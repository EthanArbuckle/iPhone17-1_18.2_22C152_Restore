void sub_18DAB3350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,void *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  void *v34;
  uint64_t v35;
  void *v37;
  std::__shared_weak_count *v38;

  operator delete(v34);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
    v37 = a26;
    if (!a26)
    {
LABEL_3:
      v38 = a25;
      if (!a25) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
  }
  else
  {
    v37 = a26;
    if (!a26) {
      goto LABEL_3;
    }
  }
  a27 = (uint64_t)v37;
  operator delete(v37);
  v38 = a25;
  if (!a25) {
    goto LABEL_9;
  }
LABEL_7:
  if (!atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
LABEL_9:
  AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0::~$_0(&a15);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a13);
  std::expected<AMSCore::SQLiteStatement,AMSCore::Error>::~expected[abi:fe180100](v35 - 176);
  std::ostringstream::~ostringstream((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void *AMSCore::operator<<(void *a1, long long *a2, uint64_t a3)
{
  AMSCore::StructuredData::TableDesc::keyColumns((AMSCore::StructuredData::TableDesc *)&v10, a2, a3);
  v4 = v10;
  v5 = v11;
  if (v10 != v11)
  {
    v6 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)"", 0);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v6, (uint64_t)"", 0);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, *v4, v4[1]);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)"", 0);
    v7 = v4 + 3;
    if (v4 + 3 == v5)
    {
LABEL_5:
      operator delete(v4);
      return a1;
    }
    do
    {
      v8 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)",", 1);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)"", 0);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, *v7, v7[1]);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)"", 0);
      v7 += 3;
    }
    while (v7 != v5);
  }
  if (v4) {
    goto LABEL_5;
  }
  return a1;
}

void sub_18DAB35C8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0::$_0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  v5 = *(unsigned char **)(a2 + 16);
  v4 = *(unsigned char **)(a2 + 24);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v6 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    v7 = (char *)operator new(v6);
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a1 + 32) = v8;
    memcpy(v7, v5, v6 - 6);
    *(void *)(a1 + 24) = v8;
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  v10 = *(unsigned char **)(a2 + 40);
  v9 = *(unsigned char **)(a2 + 48);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v11 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    v12 = (char *)operator new(v11);
    *(void *)(a1 + 40) = v12;
    *(void *)(a1 + 48) = v12;
    v13 = &v12[8 * (v11 >> 3)];
    *(void *)(a1 + 56) = v13;
    memcpy(v12, v10, v11 - 5);
    *(void *)(a1 + 48) = v13;
  }
  return a1;
}

void sub_18DAB36F0(_Unwind_Exception *exception_object)
{
  v5 = *v2;
  if (*v2)
  {
    v1[6] = v5;
    operator delete(v5);
    int64_t v6 = *v3;
    if (!*v3)
    {
LABEL_3:
      v7 = (std::__shared_weak_count *)v1[1];
      if (!v7) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
  }
  else
  {
    int64_t v6 = *v3;
    if (!*v3) {
      goto LABEL_3;
    }
  }
  v1[3] = v6;
  operator delete(v6);
  v7 = (std::__shared_weak_count *)v1[1];
  if (!v7) {
    goto LABEL_9;
  }
LABEL_7:
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_9:
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::target_type()
{
}

uint64_t std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withUpdateERKNSt3__16vec"
                     "torINS0_10ColumnDescENS3_9allocatorIS5_EEEERKNS4_INS0_9ConditionENS6_ISB_EEEEE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withUpdateERK"
                                "NSt3__16vectorINS0_10ColumnDescENS3_9allocatorIS5_EEEERKNS4_INS0_9ConditionENS6_ISB_EEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withUpdateERKNSt3__16vectorINS0_10ColumnDescENS3_9allocatorIS5_EEEERKNS4_INS0_9ConditionENS6_ISB_EEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withUpdateERKNSt3__16vectorINS0_10ColumnDescENS3_9allocatorIS5_EEEERKNS4_INS0_9ConditionENS6_ISB_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::operator()(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, std::runtime_error *a5@<X8>)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)a4;
  uint64_t v7 = *(unsigned __int8 *)(a4 + 8);
  uint64_t v9 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v11 = *a2;
  uint64_t v10 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - v9) >> 3) == (v10 - *a2) >> 5)
  {
    BOOL v12 = v9 == v8 || v11 == v10;
    if (v12)
    {
LABEL_7:
      char v81 = 1;
      goto LABEL_26;
    }
    uint64_t v14 = v9 + 24;
    uint64_t v15 = v11 + 32;
    while (1)
    {
      if (*(unsigned char *)(v14 - 7) != 2)
      {
        int v16 = *(_DWORD *)(v15 - 8);
        if (v16 == -1) {
          unsigned __int8 v17 = 0;
        }
        else {
          unsigned __int8 v17 = *(_DWORD *)(v15 - 8);
        }
        if (*(unsigned __int8 *)(v14 - 8) != v17) {
          goto LABEL_8;
        }
        if (v16 == -1 || *(_DWORD *)(v15 - 8) == 0) {
          break;
        }
      }
      if (v14 != v8)
      {
        v14 += 24;
        BOOL v12 = v15 == v10;
        v15 += 32;
        if (!v12) {
          continue;
        }
      }
      goto LABEL_7;
    }
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[41]>((uint64_t)&v83, 3u);
  }
  else
  {
LABEL_8:
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[40]>((uint64_t)&v83, 3u);
  }
  std::runtime_error::runtime_error(&v75, &v83);
  std::runtime_error v76 = v84;
  v13 = (unsigned int *)v86;
  v75.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  v77 = v85;
  uint64_t v78 = v86;
  v79 = v87;
  if (v87)
  {
    *(void *)(v86 + 16) = &v78;
    v85 = (std::runtime_error_vtbl *)&v86;
    uint64_t v86 = 0;
    v87 = 0;
    v13 = 0;
  }
  else
  {
    v77 = (std::runtime_error_vtbl *)&v78;
  }
  long long v80 = v88;
  long long v88 = 0uLL;
  char v81 = 0;
  v83.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v85, v13);
  MEMORY[0x192FA3C30](&v83);
LABEL_26:
  AMSCore::firstError<void,AMSCore::Error>((std::runtime_error *)&v89, (uint64_t)&v75);
  if (v81)
  {
    if (v93) {
      goto LABEL_32;
    }
  }
  else
  {
    ((void (*)(std::runtime_error *))v75.~runtime_error)(&v75);
    if (v93) {
      goto LABEL_32;
    }
  }
  AMSCore::StructuredData::IsValidValuesFromColumnTypes<std::vector<AMSCore::StructuredData::Condition>,std::vector<AMSCore::Any>>((uint64_t)&v75, a1[6], a1[7], *a3, a3[1]);
  AMSCore::firstError<void,AMSCore::Error>((std::runtime_error *)&v89, (uint64_t)&v75);
  if (v81)
  {
    if (v93) {
      goto LABEL_32;
    }
  }
  else
  {
    ((void (*)(std::runtime_error *))v75.~runtime_error)(&v75);
    if (v93)
    {
LABEL_32:
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v75, (uint64_t)&v89);
      v19 = std::runtime_error::runtime_error(a5, &v75);
      v19[1] = v76;
      v19->__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v20 = v78;
      v19[2].__vftable = v77;
      v19[2].__imp_.__imp_ = (const char *)v20;
      p_imp = (std::runtime_error_vtbl *)&v19[2].__imp_;
      v22 = v79;
      v19[3].__vftable = v79;
      if (v22)
      {
        *(void *)(v20 + 16) = p_imp;
        v77 = (std::runtime_error_vtbl *)&v78;
        uint64_t v78 = 0;
        v79 = 0;
        uint64_t v20 = 0;
      }
      else
      {
        v19[2].__vftable = p_imp;
      }
      *(_OWORD *)&v19[3].__imp_.__imp_ = v80;
      long long v80 = 0uLL;
      LOBYTE(v19[4].__imp_.__imp_) = 0;
      v75.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v77, (unsigned int *)v20);
      MEMORY[0x192FA3C30](&v75);
      if (v93)
      {
        v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EDC827D8;
        v23 = v92;
        if (v92)
        {
          if (!atomic_fetch_add(&v92->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v91, v91[1]);
        MEMORY[0x192FA3C30](&v89);
      }
      return;
    }
  }
  if (v7) {
    uint64_t v24 = v6;
  }
  else {
    uint64_t v24 = -1;
  }
  std::string::size_type v69 = v24;
  uint64_t v25 = a1[3];
  if (v25 != a1[4] && *a2 != a2[1])
  {
    int v26 = 0;
    uint64_t v27 = *a2 + 32;
    v28 = ":";
    while (1)
    {
      std::to_string(&v82, v26);
      v29 = std::string::insert(&v82, 0, v28, 1uLL);
      std::runtime_error v30 = *(std::runtime_error *)&v29->__r_.__value_.__l.__data_;
      v84.__vftable = (std::runtime_error_vtbl *)v29->__r_.__value_.__r.__words[2];
      std::runtime_error v83 = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      imp = (const char *)HIBYTE(v84.__vftable);
      if (SHIBYTE(v84.__vftable) >= 0) {
        size_t v32 = 22;
      }
      else {
        size_t v32 = ((uint64_t)v84.__vftable & 0x7FFFFFFFFFFFFFFFLL) - 1;
      }
      if (SHIBYTE(v84.__vftable) < 0) {
        imp = v83.__imp_.__imp_;
      }
      if ((const char *)v32 == imp) {
        break;
      }
      v36 = &v83;
      if (SHIBYTE(v84.__vftable) < 0) {
        v36 = v83.__vftable;
      }
      imp[(void)v36] = 95;
      v37 = imp + 1;
      if (SHIBYTE(v84.__vftable) < 0) {
        v83.__imp_.__imp_ = v37;
      }
      else {
        HIBYTE(v84.__vftable) = v37 & 0x7F;
      }
      v38 = &v37[(void)v36];
LABEL_79:
      const char *v38 = 0;
      v76.__vftable = v84.__vftable;
      std::runtime_error v75 = v83;
      v83.__imp_.__imp_ = 0;
      v84.__vftable = 0;
      v83.__vftable = 0;
      if (SHIBYTE(v76.__vftable) >= 0) {
        unint64_t v43 = 22;
      }
      else {
        unint64_t v43 = ((uint64_t)v76.__vftable & 0x7FFFFFFFFFFFFFFFLL) - 1;
      }
      if (SHIBYTE(v76.__vftable) >= 0) {
        size_t v44 = (unint64_t)v76.__vftable >> 56;
      }
      else {
        size_t v44 = (size_t)v75.__imp_.__imp_;
      }
      if (v43 - v44 < 4)
      {
        uint64_t v45 = v27;
        v46 = v28;
        unint64_t v47 = v44 + 4;
        if (0x7FFFFFFFFFFFFFF6 - v43 < v44 + 4 - v43) {
          std::string::__throw_length_error[abi:fe180100]();
        }
        v48 = &v75;
        if (SHIBYTE(v76.__vftable) < 0) {
          v48 = v75.__vftable;
        }
        __src = v48;
        if (v43 >= 0x3FFFFFFFFFFFFFF3)
        {
          uint64_t v53 = 0x7FFFFFFFFFFFFFF6;
        }
        else
        {
          unint64_t v49 = 2 * v43;
          if (v47 > 2 * v43) {
            unint64_t v49 = v44 + 4;
          }
          if (v49 < 0x17)
          {
            size_t v50 = 23;
LABEL_104:
            v56 = (std::runtime_error_vtbl *)operator new(v50);
            v57 = v56;
            if (v44) {
              memmove(v56, __src, v44);
            }
            *(_DWORD *)((char *)&v57->~runtime_error + v44) = 1601463667;
            if (v43 != 22) {
              operator delete(__src);
            }
            v75.__imp_.__imp_ = (const char *)(v44 + 4);
            v76.__vftable = (std::runtime_error_vtbl *)(v50 | 0x8000000000000000);
            v75.__vftable = v57;
            v54 = (char *)v57 + v47;
            v28 = v46;
            uint64_t v27 = v45;
            goto LABEL_109;
          }
          unint64_t v55 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
          uint64_t v53 = v49 | 7;
          if (v53 == 23) {
            uint64_t v53 = v55;
          }
        }
        size_t v50 = v53 + 1;
        goto LABEL_104;
      }
      v51 = (char *)&v75;
      if (SHIBYTE(v76.__vftable) < 0) {
        v51 = (char *)v75.__vftable;
      }
      *(_DWORD *)&v51[v44] = 1601463667;
      size_t v52 = v44 + 4;
      if (SHIBYTE(v76.__vftable) < 0) {
        v75.__imp_.__imp_ = (const char *)(v44 + 4);
      }
      else {
        HIBYTE(v76.__vftable) = v52 & 0x7F;
      }
      v54 = &v51[v52];
LABEL_109:
      char *v54 = 0;
      *(std::runtime_error *)&v89.__r_.__value_.__l.__data_ = v75;
      v89.__r_.__value_.__r.__words[2] = (std::string::size_type)v76.__vftable;
      v75.__imp_.__imp_ = 0;
      v76.__vftable = 0;
      v75.__vftable = 0;
      if (SHIBYTE(v84.__vftable) < 0)
      {
        operator delete(v83.__vftable);
        if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_111;
        }
      }
      else if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_111;
      }
      operator delete(v82.__r_.__value_.__l.__data_);
LABEL_111:
      std::string::size_type v58 = *(void *)(v25 + 8);
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v59 = 22;
      }
      else {
        std::string::size_type v59 = (v89.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      }
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v89.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v89.__r_.__value_.__l.__size_;
      }
      if (v59 - size >= v58)
      {
        if (v58)
        {
          if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v61 = &v89;
          }
          else {
            v61 = (std::string *)v89.__r_.__value_.__r.__words[0];
          }
          memmove((char *)v61 + size, *(const void **)v25, *(void *)(v25 + 8));
          std::string::size_type v62 = size + v58;
          if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
            v89.__r_.__value_.__l.__size_ = size + v58;
          }
          else {
            *((unsigned char *)&v89.__r_.__value_.__s + 23) = v62 & 0x7F;
          }
          v61->__r_.__value_.__s.__data_[v62] = 0;
        }
      }
      else
      {
        std::string::__grow_by_and_replace(&v89, v59, size + v58 - v59, size, size, 0, *(void *)(v25 + 8), *(const std::string::value_type **)v25);
      }
      v63 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v74, (const void **)&v89.__r_.__value_.__l.__data_, (uint64_t)&v89);
      v64 = v63;
      uint64_t v65 = *((unsigned int *)v63 + 20);
      uint64_t v66 = *(unsigned int *)(v27 - 8);
      if (v65 == -1)
      {
        if (v66 != -1)
        {
LABEL_133:
          v75.__vftable = (std::runtime_error_vtbl *)(v63 + 56);
          ((void (*)(std::runtime_error *))off_1EDCA58C0[v66])(&v75);
        }
      }
      else
      {
        if (v66 != -1) {
          goto LABEL_133;
        }
        ((void (*)(std::runtime_error *, char *))off_1EDCA5870[v65])(&v75, v63 + 56);
        *((_DWORD *)v64 + 20) = -1;
      }
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v89.__r_.__value_.__l.__data_);
      }
      v25 += 24;
      if (v25 != a1[4])
      {
        ++v26;
        BOOL v12 = v27 == a2[1];
        v27 += 32;
        if (!v12) {
          continue;
        }
      }
      goto LABEL_139;
    }
    if (v32 == 0x7FFFFFFFFFFFFFF6) {
      std::string::__throw_length_error[abi:fe180100]();
    }
    if (SHIBYTE(v84.__vftable) >= 0) {
      v33 = &v83;
    }
    else {
      v33 = v83.__vftable;
    }
    if (v32 >= 0x3FFFFFFFFFFFFFF3)
    {
      uint64_t v39 = 0x7FFFFFFFFFFFFFF6;
    }
    else
    {
      if (v32 + 1 > 2 * v32) {
        unint64_t v34 = v32 + 1;
      }
      else {
        unint64_t v34 = 2 * v32;
      }
      if (v34 < 0x17)
      {
        size_t v35 = 23;
        goto LABEL_73;
      }
      unint64_t v40 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
      uint64_t v39 = v34 | 7;
      if (v39 == 23) {
        uint64_t v39 = v40;
      }
    }
    size_t v35 = v39 + 1;
LABEL_73:
    v41 = (std::runtime_error_vtbl *)operator new(v35);
    v42 = v41;
    if (v32)
    {
      memmove(v41, v33, v32);
      *((unsigned char *)&v42->~runtime_error + v32) = 95;
      if (v32 == 22) {
        goto LABEL_78;
      }
    }
    else
    {
      LOBYTE(v41->~runtime_error) = 95;
    }
    operator delete(v33);
LABEL_78:
    v83.__vftable = v42;
    v83.__imp_.__imp_ = (const char *)(v32 + 1);
    v84.__vftable = (std::runtime_error_vtbl *)(v35 | 0x8000000000000000);
    v38 = (char *)&v42->~runtime_error + v32 + 1;
    goto LABEL_79;
  }
LABEL_139:
  v89.__r_.__value_.__r.__words[0] = v69;
  LODWORD(v90) = 4;
  HIBYTE(v76.__vftable) = 6;
  strcpy((char *)&v75, ":limit");
  v67 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v74, (const void **)&v75.__vftable, (uint64_t)&v75);
  AMSCore::Any::operator=((uint64_t)(v67 + 56), (uint64_t)&v89);
  if (SHIBYTE(v76.__vftable) < 0) {
    operator delete(v75.__vftable);
  }
  if (v90 != -1) {
    ((void (*)(std::runtime_error *, std::string *))off_1EDCA5870[v90])(&v75, &v89);
  }
  v68 = (sqlite3 **)a1[1];
  uint64_t v90 = 0;
  AMSCore::SQLiteStatement::exec((uint64_t)a5, v68, v74, (uint64_t)&v89);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v74, (unsigned int *)v74[1]);
}

void sub_18DAB4178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_18DAB4280()
{
}

void sub_18DAB4288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    JUMPOUT(0x18DAB4294);
  }
  JUMPOUT(0x18DAB42B0);
}

void sub_18DAB429C()
{
  if (*(char *)(v0 - 169) < 0) {
    JUMPOUT(0x18DAB42ACLL);
  }
  JUMPOUT(0x18DAB42B0);
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::destroy_deallocate(void *__p)
{
  v2 = (void *)__p[6];
  if (v2)
  {
    __p[7] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)__p[3];
  if (v3)
  {
    __p[4] = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)__p[2];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  operator delete(__p);
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::destroy(void *a1)
{
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)a1[2];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDC82EC8;
  return std::__compressed_pair_elem<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,0,false>::__compressed_pair_elem[abi:fe180100]<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0 const&,0ul>(a2 + 1, (void *)(a1 + 8));
}

void *std::__compressed_pair_elem<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,0,false>::__compressed_pair_elem[abi:fe180100]<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0 const&,0ul>(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  uint64_t v6 = (unsigned char *)a2[2];
  v5 = (unsigned char *)a2[3];
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v8 = (char *)operator new(v7);
    a1[2] = v8;
    a1[3] = v8;
    uint64_t v9 = &v8[8 * (v7 >> 3)];
    a1[4] = v9;
    memcpy(v8, v6, v7 - 6);
    a1[3] = v9;
  }
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  uint64_t v11 = (unsigned char *)a2[5];
  uint64_t v10 = (unsigned char *)a2[6];
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v12 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    v13 = (char *)operator new(v12);
    a1[5] = v13;
    a1[6] = v13;
    uint64_t v14 = &v13[8 * (v12 >> 3)];
    a1[7] = v14;
    memcpy(v13, v11, v12 - 5);
    a1[6] = v14;
  }
  return a1;
}

void sub_18DAB4544(_Unwind_Exception *exception_object)
{
  v5 = *v2;
  if (*v2)
  {
    v1[6] = v5;
    operator delete(v5);
    uint64_t v6 = *v3;
    if (!*v3)
    {
LABEL_3:
      int64_t v7 = (std::__shared_weak_count *)v1[1];
      if (!v7) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v6 = *v3;
    if (!*v3) {
      goto LABEL_3;
    }
  }
  v1[3] = v6;
  operator delete(v6);
  int64_t v7 = (std::__shared_weak_count *)v1[1];
  if (!v7) {
    goto LABEL_9;
  }
LABEL_7:
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_9:
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::__clone(uint64_t a1)
{
  v1 = (void *)(a1 + 8);
  v2 = operator new(0x48uLL);
  void *v2 = &unk_1EDC82EC8;
  std::__compressed_pair_elem<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,0,false>::__compressed_pair_elem[abi:fe180100]<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_18DAB4630(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::~__func(void *a1)
{
  *a1 = &unk_1EDC82EC8;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x192FA4080);
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::~__func(void *a1)
{
  *a1 = &unk_1EDC82EC8;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void AMSCore::StructuredData::TableDesc::keyColumns(AMSCore::StructuredData::TableDesc *this, long long *a2, uint64_t a3)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (a3)
  {
    unint64_t v3 = a2;
    v5 = 0;
    uint64_t v6 = (long long *)((char *)a2 + 24 * a3);
    do
    {
      if (!*((unsigned char *)v3 + 17))
      {
        unint64_t v9 = *((void *)this + 2);
        if ((unint64_t)v5 < v9)
        {
          long long v7 = *v3;
          *((void *)v5 + 2) = *((void *)v3 + 2);
          *(_OWORD *)v5 = v7;
          uint64_t v8 = v5 + 24;
        }
        else
        {
          uint64_t v10 = *(char **)this;
          unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v5[-*(void *)this] >> 3);
          unint64_t v12 = v11 + 1;
          if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::string>::__throw_length_error[abi:fe180100]();
          }
          unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v10) >> 3);
          if (2 * v13 > v12) {
            unint64_t v12 = 2 * v13;
          }
          if (v13 >= 0x555555555555555) {
            unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            if (v14 > 0xAAAAAAAAAAAAAAALL) {
              std::__throw_bad_array_new_length[abi:fe180100]();
            }
            uint64_t v15 = (char *)operator new(24 * v14);
          }
          else
          {
            uint64_t v15 = 0;
          }
          int v16 = &v15[24 * v11];
          *(_OWORD *)int v16 = *v3;
          *((void *)v16 + 2) = *((void *)v3 + 2);
          unsigned __int8 v17 = v16;
          if (v5 != v10)
          {
            do
            {
              long long v18 = *(_OWORD *)(v5 - 24);
              *((_WORD *)v17 - 4) = *((_WORD *)v5 - 4);
              *(_OWORD *)(v17 - 24) = v18;
              v17 -= 24;
              v5 -= 24;
            }
            while (v5 != v10);
            v5 = *(char **)this;
          }
          uint64_t v8 = v16 + 24;
          *(void *)this = v17;
          *((void *)this + 1) = v16 + 24;
          *((void *)this + 2) = &v15[24 * v14];
          if (v5) {
            operator delete(v5);
          }
        }
        *((void *)this + 1) = v8;
        v5 = v8;
      }
      unint64_t v3 = (long long *)((char *)v3 + 24);
    }
    while (v3 != v6);
  }
}

void sub_18DAB4940(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert@<X0>(AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder *this@<X0>, uint64_t a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v44);
  uint64_t v4 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v44, (uint64_t)"REPLACE INTO \"", 14);
  v5 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v4, **((void **)this + 1), *(void *)(*((void *)this + 1) + 8));
  uint64_t v6 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v5, (uint64_t)"\" (", 3);
  std::runtime_error v37 = *(std::runtime_error *)(*((void *)this + 1) + 16);
  *((void *)&v38 + 1) = ",";
  uint64_t v39 = (const char **)"";
  unint64_t v40 = "";
  LOBYTE(v41) = 0;
  long long v7 = AMSCore::operator<<(v6, (uint64_t)&v37);
  uint64_t v8 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v7, (uint64_t)")\n", 2);
  unint64_t v9 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)"VALUES (", 8);
  *(_OWORD *)__p = *(_OWORD *)(*((void *)this + 1) + 16);
  *((void *)&v31 + 1) = ",";
  size_t v32 = " :";
  v33 = "";
  LOBYTE(v34) = 1;
  uint64_t v10 = AMSCore::operator<<(v9, (uint64_t)__p);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v10, (uint64_t)")", 1);
  uint64_t v11 = *((void *)this + 2);
  std::stringbuf::str[abi:fe180100]((uint64_t)v45, (std::string *)__p);
  uint64_t v12 = *(void *)(v11 + 8);
  v24.__vftable = *(std::runtime_error_vtbl **)v11;
  v24.__imp_.__imp_ = (const char *)v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  AMSCore::SQLiteStatement::make((uint64_t)&v37, (uint64_t)&v24, (uint64_t)__p);
  imp = (std::__shared_weak_count *)v24.__imp_.__imp_;
  if (v24.__imp_.__imp_ && !atomic_fetch_add((atomic_ullong *volatile)v24.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
    std::__shared_weak_count::__release_weak(imp);
    if ((SBYTE7(v31) & 0x80000000) == 0)
    {
LABEL_6:
      if (v43) {
        goto LABEL_7;
      }
      goto LABEL_12;
    }
  }
  else if ((SBYTE7(v31) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(__p[0]);
  if (v43)
  {
LABEL_7:
    unint64_t v14 = (char *)operator new(0x50uLL);
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)unint64_t v14 = &unk_1EDC83D00;
    *(std::runtime_error *)(v14 + 24) = v37;
    v37.__vftable = 0;
    v37.__imp_.__imp_ = 0;
    uint64_t v15 = v38;
    int v16 = v41;
    *(void *)&long long v38 = 0;
    *((void *)v14 + 5) = v15;
    if (v16)
    {
      if (v16 == (long long *)((char *)&v38 + 8))
      {
        *((void *)v14 + 9) = v14 + 48;
        (*(void (**)(_OWORD *))(*(void *)v16 + 24))(v16);
LABEL_17:
        v24.__vftable = (std::runtime_error_vtbl *)(v14 + 24);
        v24.__imp_.__imp_ = v14;
        __p[0] = this;
        __p[1] = 0;
        atomic_fetch_add_explicit((atomic_ullong *volatile)v14 + 1, 1uLL, memory_order_relaxed);
        *(void *)&long long v31 = 0;
        *(void *)(a2 + 24) = 0;
        long long v18 = operator new(0x20uLL);
        *long long v18 = &unk_1EDC82FD0;
        v18[1] = this;
        v18[2] = v14 + 24;
        v18[3] = v14;
        *(void *)(a2 + 24) = v18;
        *(unsigned char *)(a2 + 72) = 1;
        if (!atomic_fetch_add((atomic_ullong *volatile)v14 + 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          (*(void (**)(char *))(*(void *)v14 + 16))(v14);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v14);
        }
        goto LABEL_28;
      }
      unsigned __int8 v17 = &v41;
      *((void *)v14 + 9) = v16;
    }
    else
    {
      unsigned __int8 v17 = v14 + 72;
    }
    *unsigned __int8 v17 = 0;
    goto LABEL_17;
  }
LABEL_12:
  std::runtime_error::runtime_error((std::runtime_error *)__p, &v37);
  long long v31 = v38;
  __p[0] = &unk_1EDC827D8;
  size_t v32 = (const char *)v39;
  v33 = (char *)v40;
  unint64_t v34 = v41;
  if (v41)
  {
    *((void *)v40 + 2) = &v33;
    uint64_t v39 = &v40;
    unint64_t v40 = 0;
    v41 = 0;
  }
  else
  {
    size_t v32 = (const char *)&v33;
  }
  long long v35 = v42;
  long long v42 = 0uLL;
  char v36 = 1;
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v24, (uint64_t)__p);
  std::runtime_error::runtime_error((std::runtime_error *)a2, &v24);
  *(_OWORD *)(a2 + 16) = v25;
  *(void *)a2 = &unk_1EDC827D8;
  uint64_t v19 = v27;
  *(void *)(a2 + 32) = v26;
  *(void *)(a2 + 40) = v19;
  uint64_t v20 = a2 + 40;
  uint64_t v21 = v28;
  *(void *)(a2 + 48) = v28;
  if (v21)
  {
    *(void *)(v19 + 16) = v20;
    int v26 = &v27;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v19 = 0;
  }
  else
  {
    *(void *)(a2 + 32) = v20;
  }
  *(_OWORD *)(a2 + 56) = v29;
  long long v29 = 0uLL;
  *(unsigned char *)(a2 + 72) = 0;
  v24.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v26, (unsigned int *)v19);
  MEMORY[0x192FA3C30](&v24);
  if (v36)
  {
    __p[0] = &unk_1EDC827D8;
    v22 = (std::__shared_weak_count *)*((void *)&v35 + 1);
    if (*((void *)&v35 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v32, (unsigned int *)v33);
    MEMORY[0x192FA3C30](__p);
  }
LABEL_28:
  if (v43) {
    std::__destroy_at[abi:fe180100]<AMSCore::SQLiteStatement,0>(&v37);
  }
  else {
    ((void (*)(std::runtime_error *))v37.~runtime_error)(&v37);
  }
  uint64_t v44 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v45[-1] + *(void *)(v44 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v45[0] = MEMORY[0x1E4FBA470] + 16;
  if (v46 < 0) {
    operator delete((void *)v45[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FA3FD0](&v47);
}

void sub_18DAB4F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  if (!atomic_fetch_add(v41, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0::~$_0((uint64_t)&a19);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a10);
  std::expected<AMSCore::SQLiteStatement,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&a29);
  std::ostringstream::~ostringstream((uint64_t)&a40);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0::~$_0(uint64_t a1)
{
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<std::vector<AMSCore::Any>> &&)>::target_type()
{
}

uint64_t std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<std::vector<AMSCore::Any>> &&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder18withMultipleInsertEvE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder18withMultipleInsertEvE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder18withMultipleInsertEvE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder18withMultipleInsertEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<std::vector<AMSCore::Any>> &&)>::operator()(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 8);
  long long v7 = *(sqlite3 ***)(v6 + 16);
  uint64_t v8 = sqlite3_db_mutex(*v7);
  sqlite3_mutex_enter(v8);
  v34.__imp_.__imp_ = 0;
  *(void *)&long long v35 = 0;
  v34.__vftable = (std::runtime_error_vtbl *)&v34.__imp_;
  *((void *)&v41 + 1) = 0;
  AMSCore::SQLiteStatement::exec((uint64_t)&v47, v7 + 2, &v34, (uint64_t)&v40);
  if (*((std::runtime_error **)&v41 + 1) == &v40)
  {
    ((void (*)(std::runtime_error *))v40.__vftable[1].~runtime_error_0)(&v40);
  }
  else if (*((void *)&v41 + 1))
  {
    (*(void (**)(void))(**((void **)&v41 + 1) + 40))();
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v34, (unsigned int *)v34.__imp_.__imp_);
  int v9 = v53;
  if (v53)
  {
    v40.__vftable = (std::runtime_error_vtbl *)&unk_1EDC81CD0;
    v40.__imp_.__imp_ = (const char *)v7;
    *(void *)&long long v41 = v7;
    BYTE8(v41) = 1;
    pthread_t v10 = pthread_self();
    long long v42 = (unsigned int **)v10;
    v27.__vftable = (std::runtime_error_vtbl *)&unk_1EDC81CD0;
    v27.__imp_.__imp_ = (const char *)atomic_exchange((atomic_ullong *volatile)&v40.__imp_, 0);
    *(void *)&long long v28 = v41;
    BYTE8(v28) = BYTE8(v41);
    *(void *)&long long v41 = 0;
    BYTE8(v41) = 0;
    p_sig = &v10->__sig;
    char v33 = 1;
    AMSCore::SQLiteDatabase::Transaction::~Transaction((AMSCore::SQLiteDatabase::Transaction *)&v40);
    long long v7 = 0;
  }
  else
  {
    std::runtime_error::runtime_error(&v40, &v47);
    long long v41 = v48;
    v40.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    long long v42 = v49;
    char v43 = (unsigned int *)v50;
    uint64_t v44 = v51;
    if (v51)
    {
      *(void *)(v50 + 16) = &v43;
      unint64_t v49 = (unsigned int **)&v50;
      uint64_t v50 = 0;
      uint64_t v51 = 0;
    }
    else
    {
      long long v42 = &v43;
    }
    long long v45 = v52;
    long long v52 = 0uLL;
    char v46 = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v34, (uint64_t)&v40);
    std::runtime_error::runtime_error(&v27, &v34);
    long long v28 = v35;
    uint64_t v11 = (unsigned int *)v37;
    v27.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    p_sig = v36;
    uint64_t v30 = v37;
    uint64_t v31 = v38;
    if (v38)
    {
      *(void *)(v37 + 16) = &v30;
      char v36 = &v37;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      uint64_t v11 = 0;
    }
    else
    {
      p_sig = &v30;
    }
    long long v32 = v39;
    long long v39 = 0uLL;
    char v33 = 0;
    v34.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v36, v11);
    MEMORY[0x192FA3C30](&v34);
    if (v46)
    {
      v40.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v12 = (std::__shared_weak_count *)*((void *)&v45 + 1);
      if (*((void *)&v45 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v45 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v42, v43);
      MEMORY[0x192FA3C30](&v40);
    }
  }
  if (v53)
  {
    if (v9) {
      goto LABEL_23;
    }
  }
  else
  {
    ((void (*)(std::runtime_error *))v47.~runtime_error)(&v47);
    if (v9) {
      goto LABEL_23;
    }
  }
  unint64_t v13 = sqlite3_db_mutex(*v7);
  sqlite3_mutex_leave(v13);
LABEL_23:
  if (v33)
  {
    uint64_t v15 = *a2;
    unint64_t v14 = a2[1];
    if (v15 == v14)
    {
LABEL_35:
      AMSCore::SQLiteDatabase::Transaction::commit((atomic_ullong *)&v27, a3);
      goto LABEL_56;
    }
    while (1)
    {
      AMSCore::StructuredData::IsValidValuesFromColumnTypes<std::span<AMSCore::StructuredData::ColumnDesc const,18446744073709551615ul>,std::vector<AMSCore::Any>>((uint64_t)&v40, *(void *)(*(void *)(v6 + 8) + 16), *(void *)(*(void *)(v6 + 8) + 24), *v15, v15[1]);
      AMSCore::firstError<void,AMSCore::Error>(&v47, (uint64_t)&v40);
      if (!v46) {
        ((void (*)(std::runtime_error *))v40.~runtime_error)(&v40);
      }
      if (v53) {
        break;
      }
      int v16 = *(sqlite3 ***)(a1 + 16);
      *((void *)&v48 + 1) = 0;
      AMSCore::SQLiteStatement::exec(a3, v16, &v40, (uint64_t)&v47);
      if (*((std::runtime_error **)&v48 + 1) == &v47)
      {
        ((void (*)(std::runtime_error *))v47.__vftable[1].~runtime_error_0)(&v47);
      }
      else if (*((void *)&v48 + 1))
      {
        (*(void (**)(void))(**((void **)&v48 + 1) + 40))();
      }
      int v17 = *(unsigned __int8 *)(a3 + 72);
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v40, (unsigned int *)v40.__imp_.__imp_);
      if (!v17) {
        goto LABEL_56;
      }
      v15 += 3;
      if (v15 == v14)
      {
        if (!v33) {
          __break(1u);
        }
        goto LABEL_35;
      }
    }
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v40, (uint64_t)&v47);
    std::runtime_error::runtime_error((std::runtime_error *)a3, &v40);
    *(_OWORD *)(a3 + 16) = v41;
    *(void *)a3 = &unk_1EDC827D8;
    v23 = v43;
    *(void *)(a3 + 32) = v42;
    *(void *)(a3 + 40) = v23;
    uint64_t v24 = a3 + 40;
    uint64_t v25 = v44;
    *(void *)(a3 + 48) = v44;
    if (v25)
    {
      *((void *)v23 + 2) = v24;
      long long v42 = &v43;
      char v43 = 0;
      uint64_t v44 = 0;
      v23 = 0;
    }
    else
    {
      *(void *)(a3 + 32) = v24;
    }
    *(_OWORD *)(a3 + 56) = v45;
    long long v45 = 0uLL;
    *(unsigned char *)(a3 + 72) = 0;
    v40.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v42, v23);
    MEMORY[0x192FA3C30](&v40);
    if (!v53) {
      goto LABEL_56;
    }
    v47.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    int v26 = (std::__shared_weak_count *)*((void *)&v52 + 1);
    if (*((void *)&v52 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v52 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
    v22 = (unsigned int *)v50;
    goto LABEL_55;
  }
  std::runtime_error::runtime_error(&v47, &v27);
  long long v48 = v28;
  v47.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  unint64_t v49 = (unsigned int **)p_sig;
  uint64_t v50 = v30;
  uint64_t v51 = v31;
  if (v31)
  {
    *(void *)(v30 + 16) = &v50;
    p_sig = &v30;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
  }
  else
  {
    unint64_t v49 = (unsigned int **)&v50;
  }
  long long v52 = v32;
  long long v32 = 0uLL;
  unsigned __int8 v53 = 1;
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v40, (uint64_t)&v47);
  std::runtime_error::runtime_error((std::runtime_error *)a3, &v40);
  *(_OWORD *)(a3 + 16) = v41;
  *(void *)a3 = &unk_1EDC827D8;
  long long v18 = v43;
  *(void *)(a3 + 32) = v42;
  *(void *)(a3 + 40) = v18;
  uint64_t v19 = a3 + 40;
  uint64_t v20 = v44;
  *(void *)(a3 + 48) = v44;
  if (v20)
  {
    *((void *)v18 + 2) = v19;
    long long v42 = &v43;
    char v43 = 0;
    uint64_t v44 = 0;
    long long v18 = 0;
  }
  else
  {
    *(void *)(a3 + 32) = v19;
  }
  *(_OWORD *)(a3 + 56) = v45;
  long long v45 = 0uLL;
  *(unsigned char *)(a3 + 72) = 0;
  v40.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v42, v18);
  MEMORY[0x192FA3C30](&v40);
  if (v53)
  {
    v47.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v21 = (std::__shared_weak_count *)*((void *)&v52 + 1);
    if (*((void *)&v52 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v52 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    v22 = (unsigned int *)v50;
LABEL_55:
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v49, v22);
    MEMORY[0x192FA3C30](&v47);
  }
LABEL_56:
  if (v33) {
    AMSCore::SQLiteDatabase::Transaction::~Transaction((AMSCore::SQLiteDatabase::Transaction *)&v27);
  }
  else {
    ((void (*)(std::runtime_error *))v27.~runtime_error)(&v27);
  }
}

void sub_18DAB5988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::StructuredData::IsValidValuesFromColumnTypes<std::span<AMSCore::StructuredData::ColumnDesc const,18446744073709551615ul>,std::vector<AMSCore::Any>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = result;
  if (a3 == (a5 - a4) >> 5)
  {
    if (!a3 || a4 == a5)
    {
LABEL_17:
      *(unsigned char *)(result + 72) = 1;
      return result;
    }
    uint64_t v6 = 24 * a3 - 24;
    long long v7 = (unsigned char *)(a2 + 17);
    uint64_t v8 = a4 + 32;
    while (1)
    {
      if (*v7 != 2)
      {
        int v9 = *(_DWORD *)(v8 - 8);
        if (v9 == -1) {
          char v10 = 0;
        }
        else {
          char v10 = *(_DWORD *)(v8 - 8);
        }
        if (*(v7 - 1) != v10) {
          goto LABEL_18;
        }
        BOOL v11 = v9 == -1 || *(_DWORD *)(v8 - 8) == 0;
        if (v11) {
          break;
        }
      }
      if (v6)
      {
        v6 -= 24;
        v7 += 24;
        BOOL v11 = v8 == a5;
        v8 += 32;
        if (!v11) {
          continue;
        }
      }
      goto LABEL_17;
    }
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[41]>((uint64_t)&v15, 3u);
  }
  else
  {
LABEL_18:
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[40]>((uint64_t)&v15, 3u);
  }
  std::runtime_error::runtime_error((std::runtime_error *)v5, &v15);
  *(_OWORD *)(v5 + 16) = v16;
  *(void *)uint64_t v5 = &unk_1EDC827D8;
  uint64_t v12 = v18;
  *(void *)(v5 + 32) = v17;
  *(void *)(v5 + 40) = v12;
  uint64_t v13 = v5 + 40;
  uint64_t v14 = v19;
  *(void *)(v5 + 48) = v19;
  if (v14)
  {
    *(void *)(v12 + 16) = v13;
    int v17 = &v18;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    *(void *)(v5 + 32) = v13;
  }
  *(_OWORD *)(v5 + 56) = v20;
  long long v20 = 0uLL;
  *(unsigned char *)(v5 + 72) = 0;
  v15.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v17, (unsigned int *)v12);
  return MEMORY[0x192FA3C30](&v15);
}

void AMSCore::StructuredData::anonymous namespace'::buildBindings<std::span<AMSCore::StructuredData::ColumnDesc const,18446744073709551615ul>>(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  uint64_t v3 = *a3;
  if (a2[1]) {
    BOOL v4 = v3 == a3[1];
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v6 = a1;
    int v7 = 0;
    uint64_t v8 = *a2;
    uint64_t v9 = v3 + 32;
    while (1)
    {
      std::to_string(&v35, v7);
      char v10 = std::string::insert(&v35, 0, ":", 1uLL);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      *(void *)&v36[16] = *((void *)&v10->__r_.__value_.__l + 2);
      *(_OWORD *)char v36 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      uint64_t v12 = v36[23];
      if (v36[23] >= 0) {
        size_t v13 = 22;
      }
      else {
        size_t v13 = (*(void *)&v36[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      }
      if (v36[23] < 0) {
        uint64_t v12 = *(void *)&v36[8];
      }
      if (v13 == v12) {
        break;
      }
      int v17 = v36;
      if (v36[23] < 0) {
        int v17 = *(unsigned char **)v36;
      }
      v17[v12] = 95;
      uint64_t v18 = v12 + 1;
      if ((v36[23] & 0x80000000) != 0) {
        *(void *)&v36[8] = v18;
      }
      else {
        v36[23] = v18 & 0x7F;
      }
      v17[v18] = 0;
      std::string::size_type v20 = *(void *)v36;
      unint64_t v21 = v36[23];
LABEL_38:
      v37.__r_.__value_.__l.__size_ = *(void *)&v36[8];
      *(std::string::size_type *)((char *)&v37.__r_.__value_.__r.__words[1] + 7) = *(void *)&v36[15];
      memset(v36, 0, sizeof(v36));
      v37.__r_.__value_.__r.__words[0] = v20;
      *((unsigned char *)&v37.__r_.__value_.__s + 23) = v21;
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v35.__r_.__value_.__l.__data_);
        unint64_t v21 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      }
      std::string::size_type v24 = *(void *)(v8 + 8);
      if ((v21 & 0x80u) == 0) {
        std::string::size_type v25 = 22;
      }
      else {
        std::string::size_type v25 = (v37.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      }
      if ((v21 & 0x80u) == 0) {
        std::string::size_type size = v21;
      }
      else {
        std::string::size_type size = v37.__r_.__value_.__l.__size_;
      }
      if (v25 - size >= v24)
      {
        if (v24)
        {
          if ((v21 & 0x80u) == 0) {
            std::runtime_error v27 = &v37;
          }
          else {
            std::runtime_error v27 = (std::string *)v37.__r_.__value_.__r.__words[0];
          }
          memmove((char *)v27 + size, *(const void **)v8, *(void *)(v8 + 8));
          std::string::size_type v28 = size + v24;
          if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
            v37.__r_.__value_.__l.__size_ = size + v24;
          }
          else {
            *((unsigned char *)&v37.__r_.__value_.__s + 23) = v28 & 0x7F;
          }
          v27->__r_.__value_.__s.__data_[v28] = 0;
        }
      }
      else
      {
        std::string::__grow_by_and_replace(&v37, v25, size + v24 - v25, size, size, 0, *(void *)(v8 + 8), *(const std::string::value_type **)v8);
      }
      long long v29 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (const void **)&v37.__r_.__value_.__l.__data_, (uint64_t)&v37);
      uint64_t v30 = v29;
      uint64_t v31 = *((unsigned int *)v29 + 20);
      uint64_t v32 = *(unsigned int *)(v9 - 8);
      if (v31 == -1)
      {
        if (v32 != -1)
        {
LABEL_60:
          *(void *)char v36 = v29 + 56;
          ((void (*)(unsigned char *))off_1EDCA58C0[v32])(v36);
        }
      }
      else
      {
        if (v32 != -1) {
          goto LABEL_60;
        }
        ((void (*)(unsigned char *, char *))off_1EDCA5870[v31])(v36, v29 + 56);
        *((_DWORD *)v30 + 20) = -1;
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      v8 += 24;
      if (v8 != *a2 + 24 * a2[1])
      {
        ++v7;
        BOOL v4 = v9 == a3[1];
        v9 += 32;
        if (!v4) {
          continue;
        }
      }
      return;
    }
    if (v13 == 0x7FFFFFFFFFFFFFF6) {
      std::string::__throw_length_error[abi:fe180100]();
    }
    if (v36[23] >= 0) {
      uint64_t v14 = v36;
    }
    else {
      uint64_t v14 = *(unsigned char **)v36;
    }
    if (v13 > 0x3FFFFFFFFFFFFFF2)
    {
      uint64_t v19 = 0x7FFFFFFFFFFFFFF6;
    }
    else
    {
      if (v13 + 1 > 2 * v13) {
        unint64_t v15 = v13 + 1;
      }
      else {
        unint64_t v15 = 2 * v13;
      }
      if (v15 < 0x17)
      {
        size_t v16 = 23;
        goto LABEL_32;
      }
      unint64_t v22 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      uint64_t v19 = v15 | 7;
      if (v19 == 23) {
        uint64_t v19 = v22;
      }
    }
    size_t v16 = v19 + 1;
LABEL_32:
    v23 = operator new(v16);
    std::string::size_type v20 = (std::string::size_type)v23;
    if (v13)
    {
      memmove(v23, v14, v13);
      *(unsigned char *)(v20 + v13) = 95;
      if (v13 == 22) {
        goto LABEL_37;
      }
    }
    else
    {
      unsigned char *v23 = 95;
    }
    operator delete(v14);
LABEL_37:
    *(void *)char v36 = v20;
    *(void *)&v36[8] = v13 + 1;
    *(void *)&v36[16] = v16 | 0x8000000000000000;
    *(unsigned char *)(v20 + v13 + 1) = 0;
    unint64_t v21 = (v16 | 0x8000000000000000) >> 56;
    uint64_t v6 = a1;
    goto LABEL_38;
  }
}

void sub_18DAB5F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (v29 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a9, *(unsigned int **)(a9 + 8));
  _Unwind_Resume(a1);
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<std::vector<AMSCore::Any>> &&)>::destroy_deallocate(void *__p)
{
  v2 = (std::__shared_weak_count *)__p[3];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<std::vector<AMSCore::Any>> &&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<std::vector<AMSCore::Any>> &&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EDC82FD0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

char *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<std::vector<AMSCore::Any>> &&)>::__clone(uint64_t a1)
{
  result = (char *)operator new(0x20uLL);
  *(void *)result = &unk_1EDC82FD0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<std::vector<AMSCore::Any>> &&)>::~__func(void *a1)
{
  *a1 = &unk_1EDC82FD0;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x192FA4080);
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<std::vector<AMSCore::Any>> &&)>::~__func(void *a1)
{
  *a1 = &unk_1EDC82FD0;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert@<X0>(AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder *this@<X0>, uint64_t a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v44);
  BOOL v4 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v44, (uint64_t)"INSERT INTO \"", 13);
  uint64_t v5 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v4, **((void **)this + 1), *(void *)(*((void *)this + 1) + 8));
  uint64_t v6 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v5, (uint64_t)"\" (", 3);
  std::runtime_error v37 = *(std::runtime_error *)(*((void *)this + 1) + 16);
  *((void *)&v38 + 1) = ",";
  long long v39 = (const char **)"";
  std::runtime_error v40 = "";
  LOBYTE(v41) = 0;
  int v7 = AMSCore::operator<<(v6, (uint64_t)&v37);
  uint64_t v8 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v7, (uint64_t)")\n", 2);
  uint64_t v9 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)"VALUES (", 8);
  *(_OWORD *)__p = *(_OWORD *)(*((void *)this + 1) + 16);
  *((void *)&v31 + 1) = ",";
  uint64_t v32 = " :";
  char v33 = "";
  LOBYTE(v34) = 1;
  char v10 = AMSCore::operator<<(v9, (uint64_t)__p);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v10, (uint64_t)")", 1);
  uint64_t v11 = *((void *)this + 2);
  std::stringbuf::str[abi:fe180100]((uint64_t)v45, (std::string *)__p);
  uint64_t v12 = *(void *)(v11 + 8);
  v24.__vftable = *(std::runtime_error_vtbl **)v11;
  v24.__imp_.__imp_ = (const char *)v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  AMSCore::SQLiteStatement::make((uint64_t)&v37, (uint64_t)&v24, (uint64_t)__p);
  imp = (std::__shared_weak_count *)v24.__imp_.__imp_;
  if (v24.__imp_.__imp_ && !atomic_fetch_add((atomic_ullong *volatile)v24.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
    std::__shared_weak_count::__release_weak(imp);
    if ((SBYTE7(v31) & 0x80000000) == 0)
    {
LABEL_6:
      if (v43) {
        goto LABEL_7;
      }
      goto LABEL_12;
    }
  }
  else if ((SBYTE7(v31) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(__p[0]);
  if (v43)
  {
LABEL_7:
    uint64_t v14 = (char *)operator new(0x50uLL);
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)uint64_t v14 = &unk_1EDC83D00;
    *(std::runtime_error *)(v14 + 24) = v37;
    v37.__vftable = 0;
    v37.__imp_.__imp_ = 0;
    uint64_t v15 = v38;
    size_t v16 = v41;
    *(void *)&long long v38 = 0;
    *((void *)v14 + 5) = v15;
    if (v16)
    {
      if (v16 == (long long *)((char *)&v38 + 8))
      {
        *((void *)v14 + 9) = v14 + 48;
        (*(void (**)(_OWORD *))(*(void *)v16 + 24))(v16);
LABEL_17:
        v24.__vftable = (std::runtime_error_vtbl *)(v14 + 24);
        v24.__imp_.__imp_ = v14;
        __p[0] = this;
        __p[1] = 0;
        atomic_fetch_add_explicit((atomic_ullong *volatile)v14 + 1, 1uLL, memory_order_relaxed);
        *(void *)&long long v31 = 0;
        *(void *)(a2 + 24) = 0;
        uint64_t v18 = operator new(0x20uLL);
        *uint64_t v18 = &unk_1EDC82E18;
        v18[1] = this;
        v18[2] = v14 + 24;
        v18[3] = v14;
        *(void *)(a2 + 24) = v18;
        *(unsigned char *)(a2 + 72) = 1;
        if (!atomic_fetch_add((atomic_ullong *volatile)v14 + 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          (*(void (**)(char *))(*(void *)v14 + 16))(v14);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v14);
        }
        goto LABEL_28;
      }
      int v17 = &v41;
      *((void *)v14 + 9) = v16;
    }
    else
    {
      int v17 = v14 + 72;
    }
    *int v17 = 0;
    goto LABEL_17;
  }
LABEL_12:
  std::runtime_error::runtime_error((std::runtime_error *)__p, &v37);
  long long v31 = v38;
  __p[0] = &unk_1EDC827D8;
  uint64_t v32 = (const char *)v39;
  char v33 = (char *)v40;
  std::runtime_error v34 = v41;
  if (v41)
  {
    *((void *)v40 + 2) = &v33;
    long long v39 = &v40;
    std::runtime_error v40 = 0;
    long long v41 = 0;
  }
  else
  {
    uint64_t v32 = (const char *)&v33;
  }
  long long v35 = v42;
  long long v42 = 0uLL;
  char v36 = 1;
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v24, (uint64_t)__p);
  std::runtime_error::runtime_error((std::runtime_error *)a2, &v24);
  *(_OWORD *)(a2 + 16) = v25;
  *(void *)a2 = &unk_1EDC827D8;
  uint64_t v19 = v27;
  *(void *)(a2 + 32) = v26;
  *(void *)(a2 + 40) = v19;
  uint64_t v20 = a2 + 40;
  uint64_t v21 = v28;
  *(void *)(a2 + 48) = v28;
  if (v21)
  {
    *(void *)(v19 + 16) = v20;
    int v26 = &v27;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v19 = 0;
  }
  else
  {
    *(void *)(a2 + 32) = v20;
  }
  *(_OWORD *)(a2 + 56) = v29;
  long long v29 = 0uLL;
  *(unsigned char *)(a2 + 72) = 0;
  v24.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v26, (unsigned int *)v19);
  MEMORY[0x192FA3C30](&v24);
  if (v36)
  {
    __p[0] = &unk_1EDC827D8;
    unint64_t v22 = (std::__shared_weak_count *)*((void *)&v35 + 1);
    if (*((void *)&v35 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v32, (unsigned int *)v33);
    MEMORY[0x192FA3C30](__p);
  }
LABEL_28:
  if (v43) {
    std::__destroy_at[abi:fe180100]<AMSCore::SQLiteStatement,0>(&v37);
  }
  else {
    ((void (*)(std::runtime_error *))v37.~runtime_error)(&v37);
  }
  uint64_t v44 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v45[-1] + *(void *)(v44 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v45[0] = MEMORY[0x1E4FBA470] + 16;
  if (v46 < 0) {
    operator delete((void *)v45[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FA3FD0](&v47);
}

void sub_18DAB6848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  if (!atomic_fetch_add(v41, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0::~$_0((uint64_t)&a19);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a10);
  std::expected<AMSCore::SQLiteStatement,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&a29);
  std::ostringstream::~ostringstream((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::target_type()
{
}

uint64_t std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withInsertEvE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withInsertEvE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withInsertEvE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withInsertEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 8);
  AMSCore::StructuredData::IsValidValuesFromColumnTypes<std::span<AMSCore::StructuredData::ColumnDesc const,18446744073709551615ul>,std::vector<AMSCore::Any>>((uint64_t)&v12, *(void *)(*(void *)(v6 + 8) + 16), *(void *)(*(void *)(v6 + 8) + 24), *a2, a2[1]);
  AMSCore::firstError<void,AMSCore::Error>(&v19, (uint64_t)&v12);
  if (v18)
  {
    if (v23) {
      goto LABEL_3;
    }
LABEL_6:
    char v10 = *(sqlite3 ***)(a1 + 16);
    uint64_t v20 = 0;
    AMSCore::SQLiteStatement::exec(a3, v10, &v12, (uint64_t)&v19);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v12, (unsigned int *)v12.__imp_.__imp_);
    return;
  }
  ((void (*)(std::runtime_error *))v12.~runtime_error)(&v12);
  if (!v23) {
    goto LABEL_6;
  }
LABEL_3:
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v12, (uint64_t)&v19);
  std::runtime_error::runtime_error((std::runtime_error *)a3, &v12);
  *(_OWORD *)(a3 + 16) = v13;
  *(void *)a3 = &unk_1EDC827D8;
  uint64_t v7 = v15;
  *(void *)(a3 + 32) = v14;
  *(void *)(a3 + 40) = v7;
  uint64_t v8 = a3 + 40;
  uint64_t v9 = v16;
  *(void *)(a3 + 48) = v16;
  if (v9)
  {
    *(void *)(v7 + 16) = v8;
    uint64_t v14 = &v15;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    *(void *)(a3 + 32) = v8;
  }
  *(_OWORD *)(a3 + 56) = v17;
  long long v17 = 0uLL;
  *(unsigned char *)(a3 + 72) = 0;
  v12.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v14, (unsigned int *)v7);
  MEMORY[0x192FA3C30](&v12);
  if (v23)
  {
    v19.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v11 = v22;
    if (v22)
    {
      if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v21, v21[1]);
    MEMORY[0x192FA3C30](&v19);
  }
}

void sub_18DAB6B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void (**a10)(void), uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (!a19)
  {
    (*a10)(&a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EDC82E18;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

char *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::__clone(uint64_t a1)
{
  result = (char *)operator new(0x20uLL);
  *(void *)result = &unk_1EDC82E18;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::~__func(void *a1)
{
  *a1 = &unk_1EDC82E18;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x192FA4080);
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withInsert(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::~__func(void *a1)
{
  *a1 = &unk_1EDC82E18;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace@<X0>(AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder *this@<X0>, uint64_t a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v44);
  BOOL v4 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v44, (uint64_t)"REPLACE INTO \"", 14);
  uint64_t v5 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v4, **((void **)this + 1), *(void *)(*((void *)this + 1) + 8));
  uint64_t v6 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v5, (uint64_t)"\" (", 3);
  std::runtime_error v37 = *(std::runtime_error *)(*((void *)this + 1) + 16);
  *((void *)&v38 + 1) = ",";
  long long v39 = (const char **)"";
  std::runtime_error v40 = "";
  LOBYTE(v41) = 0;
  uint64_t v7 = AMSCore::operator<<(v6, (uint64_t)&v37);
  uint64_t v8 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v7, (uint64_t)")\n", 2);
  uint64_t v9 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)"VALUES (", 8);
  *(_OWORD *)__p = *(_OWORD *)(*((void *)this + 1) + 16);
  *((void *)&v31 + 1) = ",";
  uint64_t v32 = " :";
  char v33 = "";
  LOBYTE(v34) = 1;
  char v10 = AMSCore::operator<<(v9, (uint64_t)__p);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v10, (uint64_t)")", 1);
  uint64_t v11 = *((void *)this + 2);
  std::stringbuf::str[abi:fe180100]((uint64_t)v45, (std::string *)__p);
  uint64_t v12 = *(void *)(v11 + 8);
  v24.__vftable = *(std::runtime_error_vtbl **)v11;
  v24.__imp_.__imp_ = (const char *)v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  AMSCore::SQLiteStatement::make((uint64_t)&v37, (uint64_t)&v24, (uint64_t)__p);
  imp = (std::__shared_weak_count *)v24.__imp_.__imp_;
  if (v24.__imp_.__imp_ && !atomic_fetch_add((atomic_ullong *volatile)v24.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
    std::__shared_weak_count::__release_weak(imp);
    if ((SBYTE7(v31) & 0x80000000) == 0)
    {
LABEL_6:
      if (v43) {
        goto LABEL_7;
      }
      goto LABEL_12;
    }
  }
  else if ((SBYTE7(v31) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(__p[0]);
  if (v43)
  {
LABEL_7:
    uint64_t v14 = (char *)operator new(0x50uLL);
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)uint64_t v14 = &unk_1EDC83D00;
    *(std::runtime_error *)(v14 + 24) = v37;
    v37.__vftable = 0;
    v37.__imp_.__imp_ = 0;
    uint64_t v15 = v38;
    uint64_t v16 = v41;
    *(void *)&long long v38 = 0;
    *((void *)v14 + 5) = v15;
    if (v16)
    {
      if (v16 == (long long *)((char *)&v38 + 8))
      {
        *((void *)v14 + 9) = v14 + 48;
        (*(void (**)(_OWORD *))(*(void *)v16 + 24))(v16);
LABEL_17:
        v24.__vftable = (std::runtime_error_vtbl *)(v14 + 24);
        v24.__imp_.__imp_ = v14;
        __p[0] = this;
        __p[1] = 0;
        atomic_fetch_add_explicit((atomic_ullong *volatile)v14 + 1, 1uLL, memory_order_relaxed);
        *(void *)&long long v31 = 0;
        *(void *)(a2 + 24) = 0;
        char v18 = operator new(0x20uLL);
        *char v18 = &unk_1EDC82F20;
        v18[1] = this;
        v18[2] = v14 + 24;
        v18[3] = v14;
        *(void *)(a2 + 24) = v18;
        *(unsigned char *)(a2 + 72) = 1;
        if (!atomic_fetch_add((atomic_ullong *volatile)v14 + 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          (*(void (**)(char *))(*(void *)v14 + 16))(v14);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v14);
        }
        goto LABEL_28;
      }
      long long v17 = &v41;
      *((void *)v14 + 9) = v16;
    }
    else
    {
      long long v17 = v14 + 72;
    }
    *long long v17 = 0;
    goto LABEL_17;
  }
LABEL_12:
  std::runtime_error::runtime_error((std::runtime_error *)__p, &v37);
  long long v31 = v38;
  __p[0] = &unk_1EDC827D8;
  uint64_t v32 = (const char *)v39;
  char v33 = (char *)v40;
  std::runtime_error v34 = v41;
  if (v41)
  {
    *((void *)v40 + 2) = &v33;
    long long v39 = &v40;
    std::runtime_error v40 = 0;
    long long v41 = 0;
  }
  else
  {
    uint64_t v32 = (const char *)&v33;
  }
  long long v35 = v42;
  long long v42 = 0uLL;
  char v36 = 1;
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v24, (uint64_t)__p);
  std::runtime_error::runtime_error((std::runtime_error *)a2, &v24);
  *(_OWORD *)(a2 + 16) = v25;
  *(void *)a2 = &unk_1EDC827D8;
  uint64_t v19 = v27;
  *(void *)(a2 + 32) = v26;
  *(void *)(a2 + 40) = v19;
  uint64_t v20 = a2 + 40;
  uint64_t v21 = v28;
  *(void *)(a2 + 48) = v28;
  if (v21)
  {
    *(void *)(v19 + 16) = v20;
    int v26 = &v27;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v19 = 0;
  }
  else
  {
    *(void *)(a2 + 32) = v20;
  }
  *(_OWORD *)(a2 + 56) = v29;
  long long v29 = 0uLL;
  *(unsigned char *)(a2 + 72) = 0;
  v24.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v26, (unsigned int *)v19);
  MEMORY[0x192FA3C30](&v24);
  if (v36)
  {
    __p[0] = &unk_1EDC827D8;
    unint64_t v22 = (std::__shared_weak_count *)*((void *)&v35 + 1);
    if (*((void *)&v35 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v32, (unsigned int *)v33);
    MEMORY[0x192FA3C30](__p);
  }
LABEL_28:
  if (v43) {
    std::__destroy_at[abi:fe180100]<AMSCore::SQLiteStatement,0>(&v37);
  }
  else {
    ((void (*)(std::runtime_error *))v37.~runtime_error)(&v37);
  }
  uint64_t v44 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v45[-1] + *(void *)(v44 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v45[0] = MEMORY[0x1E4FBA470] + 16;
  if (v46 < 0) {
    operator delete((void *)v45[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FA3FD0](&v47);
}

void sub_18DAB7448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  if (!atomic_fetch_add(v41, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withMultipleInsert(void)::$_0::~$_0((uint64_t)&a19);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a10);
  std::expected<AMSCore::SQLiteStatement,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&a29);
  std::ostringstream::~ostringstream((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::target_type()
{
}

uint64_t std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder11withReplaceEvE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder11withReplaceEvE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder11withReplaceEvE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder11withReplaceEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 8);
  AMSCore::StructuredData::IsValidValuesFromColumnTypes<std::span<AMSCore::StructuredData::ColumnDesc const,18446744073709551615ul>,std::vector<AMSCore::Any>>((uint64_t)&v12, *(void *)(*(void *)(v6 + 8) + 16), *(void *)(*(void *)(v6 + 8) + 24), *a2, a2[1]);
  AMSCore::firstError<void,AMSCore::Error>(&v19, (uint64_t)&v12);
  if (v18)
  {
    if (v23) {
      goto LABEL_3;
    }
LABEL_6:
    char v10 = *(sqlite3 ***)(a1 + 16);
    uint64_t v20 = 0;
    AMSCore::SQLiteStatement::exec(a3, v10, &v12, (uint64_t)&v19);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v12, (unsigned int *)v12.__imp_.__imp_);
    return;
  }
  ((void (*)(std::runtime_error *))v12.~runtime_error)(&v12);
  if (!v23) {
    goto LABEL_6;
  }
LABEL_3:
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v12, (uint64_t)&v19);
  std::runtime_error::runtime_error((std::runtime_error *)a3, &v12);
  *(_OWORD *)(a3 + 16) = v13;
  *(void *)a3 = &unk_1EDC827D8;
  uint64_t v7 = v15;
  *(void *)(a3 + 32) = v14;
  *(void *)(a3 + 40) = v7;
  uint64_t v8 = a3 + 40;
  uint64_t v9 = v16;
  *(void *)(a3 + 48) = v16;
  if (v9)
  {
    *(void *)(v7 + 16) = v8;
    uint64_t v14 = &v15;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    *(void *)(a3 + 32) = v8;
  }
  *(_OWORD *)(a3 + 56) = v17;
  long long v17 = 0uLL;
  *(unsigned char *)(a3 + 72) = 0;
  v12.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v14, (unsigned int *)v7);
  MEMORY[0x192FA3C30](&v12);
  if (v23)
  {
    v19.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v11 = v22;
    if (v22)
    {
      if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v21, v21[1]);
    MEMORY[0x192FA3C30](&v19);
  }
}

void sub_18DAB7774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void (**a10)(void), uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (!a19)
  {
    (*a10)(&a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1EDC82F20;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

char *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::__clone(uint64_t a1)
{
  result = (char *)operator new(0x20uLL);
  *(void *)result = &unk_1EDC82F20;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::~__func(void *a1)
{
  *a1 = &unk_1EDC82F20;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x192FA4080);
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withReplace(void)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&)>::~__func(void *a1)
{
  *a1 = &unk_1EDC82F20;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::~SqlTableBuilder(AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder *this)
{
  *(void *)this = &unk_1EDC81CF8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x192FA4080);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EDC81CF8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t AMSCore::StructuredData::SQLiteStructuredDataProvider::makeBuilder@<X0>(AMSCore::StructuredData::SQLiteStructuredDataProvider *this@<X0>, const AMSCore::StructuredData::TableDesc *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  long long v29 = (sqlite3 **)*((void *)this + 1);
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v39);
  BOOL v4 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v39, (uint64_t)"CREATE TABLE IF NOT EXISTS \"", 28);
  uint64_t v5 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v4, *(void *)a2, *((void *)a2 + 1));
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v5, (uint64_t)"\" (\n", 4);
  if (*((void *)a2 + 3))
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = *((void *)a2 + 2);
      uint64_t v9 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v39, (uint64_t)" \"", 2);
      char v10 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v9, *(void *)(v8 + v6), *(void *)(v8 + v6 + 8));
      uint64_t v11 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v10, (uint64_t)"\" ", 2);
      uint64_t v12 = v8 + v6;
      uint64_t v13 = 8 * *(char *)(v12 + 16) - 16;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v11, *(uint64_t *)((char *)off_1E559E1A0 + v13), *(void *)((char *)&unk_18DDEF000 + v13));
      if (*(unsigned char *)(v12 + 17) != 2) {
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v39, (uint64_t)" NOT NULL", 9);
      }
      unint64_t v14 = *((void *)a2 + 3);
      if (v7 != v14 - 1)
      {
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v39, (uint64_t)", ", 2);
        unint64_t v14 = *((void *)a2 + 3);
      }
      ++v7;
      v6 += 24;
    }
    while (v7 < v14);
  }
  else
  {
    unint64_t v14 = 0;
  }
  AMSCore::StructuredData::TableDesc::keyColumns((AMSCore::StructuredData::TableDesc *)&v47, *((long long **)a2 + 2), v14);
  uint64_t v16 = v47.__vftable;
  imp = v47.__imp_.__imp_;
  if (v47.__vftable != (std::runtime_error_vtbl *)v47.__imp_.__imp_)
  {
    long long v17 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v39, (uint64_t)", PRIMARY KEY (", 15);
    int64_t v18 = imp - (const char *)v16;
    if (0xAAAAAAAAAAAAAAABLL * ((imp - (const char *)v16) >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    std::runtime_error v19 = v17;
    uint64_t v20 = (uint64_t *)operator new(imp - (const char *)v16);
    memcpy(v20, v16, v18 - 6);
    uint64_t v21 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v19, (uint64_t)"", 0);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v21, (uint64_t)"\"", 1);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v19, *v20, v20[1]);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v19, (uint64_t)"\"", 1);
    if (v18 != 24)
    {
      unint64_t v22 = v20 + 3;
      do
      {
        char v23 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v19, (uint64_t)",", 1);
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v23, (uint64_t)"\"", 1);
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v19, *v22, v22[1]);
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v19, (uint64_t)"\"", 1);
        v22 += 3;
      }
      while (v22 != &v20[(imp - (const char *)v16) >> 3]);
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v19, (uint64_t)")", 1);
    operator delete(v20);
  }
  if (v16) {
    operator delete(v16);
  }
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v39, (uint64_t)")", 1);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v39.__imp_, &v38);
  *((void *)&v48 + 1) = 0;
  AMSCore::SQLiteDatabase::exec((uint64_t)&v31, v29, (uint64_t)&v38, &v47);
  if (*((std::runtime_error **)&v48 + 1) == &v47)
  {
    ((void (*)(std::runtime_error *))v47.__vftable[1].~runtime_error_0)(&v47);
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_26;
  }
  if (*((void *)&v48 + 1)) {
    (*(void (**)(void))(**((void **)&v48 + 1) + 40))(*((void *)&v48 + 1));
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
LABEL_26:
  }
    operator delete(v38.__r_.__value_.__l.__data_);
LABEL_21:
  v39.__vftable = (std::runtime_error_vtbl *)*MEMORY[0x1E4FBA418];
  *(std::runtime_error_vtbl **)((char *)&v39.__vftable + (unint64_t)v39.__vftable[-1].~runtime_error) = *(std::runtime_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
  v39.__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
  if (v45 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FA3FD0](&v46);
  if (v37) {
    operator new();
  }
  std::runtime_error::runtime_error(&v39, &v31);
  long long v40 = v32;
  v39.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  long long v41 = v33;
  v42[0] = (unsigned int *)v34;
  v42[1] = v35;
  if (v35)
  {
    *(void *)(v34 + 16) = v42;
    char v33 = (unsigned int **)&v34;
    uint64_t v34 = 0;
    long long v35 = 0;
  }
  else
  {
    long long v41 = v42;
  }
  long long v43 = v36;
  long long v36 = 0uLL;
  LOBYTE(__p) = 1;
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v47, (uint64_t)&v39);
  std::runtime_error::runtime_error((std::runtime_error *)a3, &v47);
  *(_OWORD *)(a3 + 16) = v48;
  *(void *)a3 = &unk_1EDC827D8;
  uint64_t v24 = v50;
  *(void *)(a3 + 32) = v49;
  *(void *)(a3 + 40) = v24;
  uint64_t v25 = a3 + 40;
  uint64_t v26 = v51;
  *(void *)(a3 + 48) = v51;
  if (v26)
  {
    *(void *)(v24 + 16) = v25;
    unint64_t v49 = &v50;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    uint64_t v24 = 0;
  }
  else
  {
    *(void *)(a3 + 32) = v25;
  }
  *(_OWORD *)(a3 + 56) = v52;
  long long v52 = 0uLL;
  *(unsigned char *)(a3 + 72) = 0;
  v47.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v49, (unsigned int *)v24);
  uint64_t result = MEMORY[0x192FA3C30](&v47);
  if ((_BYTE)__p)
  {
    v39.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v28 = (std::__shared_weak_count *)*((void *)&v43 + 1);
    if (*((void *)&v43 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v43 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v41, v42[0]);
    uint64_t result = MEMORY[0x192FA3C30](&v39);
  }
  if (!v37) {
    return ((uint64_t (*)(std::runtime_error *))v31.~runtime_error)(&v31);
  }
  return result;
}

void sub_18DAB827C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  operator delete(v25);
  if (*(void *)(v26 - 168)) {
    operator delete(*(void **)(v26 - 168));
  }
  std::ostringstream::~ostringstream((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void AMSCore::StructuredData::SQLiteStructuredDataProvider::beginImmediateTransaction(AMSCore::StructuredData::SQLiteStructuredDataProvider *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (sqlite3 **)*((void *)this + 1);
  BOOL v4 = sqlite3_db_mutex(*v3);
  sqlite3_mutex_enter(v4);
  v21.__imp_.__imp_ = 0;
  *(void *)&long long v22 = 0;
  v21.__vftable = (std::runtime_error_vtbl *)&v21.__imp_;
  *((void *)&v35 + 1) = 0;
  AMSCore::SQLiteStatement::exec((uint64_t)&v27, v3 + 9, &v21, (uint64_t)&v34);
  if (*((std::runtime_error **)&v35 + 1) == &v34)
  {
    ((void (*)(std::runtime_error *))v34.__vftable[1].~runtime_error_0)(&v34);
  }
  else if (*((void *)&v35 + 1))
  {
    (*(void (**)(void))(**((void **)&v35 + 1) + 40))(*((void *)&v35 + 1));
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v21, (unsigned int *)v21.__imp_.__imp_);
  int v5 = v33;
  if (v33)
  {
    v34.__vftable = (std::runtime_error_vtbl *)&unk_1EDC81CD0;
    v34.__imp_.__imp_ = (const char *)v3;
    *(void *)&long long v35 = v3;
    BYTE8(v35) = 1;
    pthread_t v6 = pthread_self();
    long long v36 = (unsigned int **)v6;
    v14.__vftable = (std::runtime_error_vtbl *)&unk_1EDC81CD0;
    v14.__imp_.__imp_ = (const char *)atomic_exchange((atomic_ullong *volatile)&v34.__imp_, 0);
    *(void *)&long long v15 = v35;
    BYTE8(v15) = BYTE8(v35);
    *(void *)&long long v35 = 0;
    BYTE8(v35) = 0;
    p_sig = &v6->__sig;
    char v20 = 1;
    AMSCore::SQLiteDatabase::Transaction::~Transaction((AMSCore::SQLiteDatabase::Transaction *)&v34);
    uint64_t v3 = 0;
  }
  else
  {
    std::runtime_error::runtime_error(&v34, &v27);
    long long v35 = v28;
    v34.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    long long v36 = v29;
    char v37 = v30;
    uint64_t v38 = v31;
    if (v31)
    {
      *((void *)v30 + 2) = &v37;
      long long v29 = &v30;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
    }
    else
    {
      long long v36 = &v37;
    }
    long long v39 = v32;
    long long v32 = 0uLL;
    char v40 = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v21, (uint64_t)&v34);
    std::runtime_error::runtime_error(&v14, &v21);
    long long v15 = v22;
    unint64_t v7 = (unsigned int *)v24;
    v14.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    p_sig = v23;
    uint64_t v17 = v24;
    uint64_t v18 = v25;
    if (v25)
    {
      *(void *)(v24 + 16) = &v17;
      char v23 = &v24;
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      unint64_t v7 = 0;
    }
    else
    {
      p_sig = &v17;
    }
    long long v19 = v26;
    long long v26 = 0uLL;
    char v20 = 0;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v23, v7);
    MEMORY[0x192FA3C30](&v21);
    if (v40)
    {
      v34.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v8 = (std::__shared_weak_count *)*((void *)&v39 + 1);
      if (*((void *)&v39 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v39 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v36, v37);
      MEMORY[0x192FA3C30](&v34);
    }
  }
  if (v33)
  {
    if (v5) {
      goto LABEL_23;
    }
  }
  else
  {
    ((void (*)(std::runtime_error *))v27.~runtime_error)(&v27);
    if (v5) {
      goto LABEL_23;
    }
  }
  uint64_t v9 = sqlite3_db_mutex(*v3);
  sqlite3_mutex_leave(v9);
LABEL_23:
  if (v20) {
    operator new();
  }
  std::runtime_error::runtime_error(&v27, &v14);
  long long v28 = v15;
  v27.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  long long v29 = (unsigned int **)p_sig;
  uint64_t v30 = (unsigned int *)v17;
  uint64_t v31 = v18;
  if (v18)
  {
    *(void *)(v17 + 16) = &v30;
    p_sig = &v17;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
  }
  else
  {
    long long v29 = &v30;
  }
  long long v32 = v19;
  long long v19 = 0uLL;
  unsigned __int8 v33 = 1;
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v34, (uint64_t)&v27);
  std::runtime_error::runtime_error((std::runtime_error *)a2, &v34);
  *(_OWORD *)(a2 + 16) = v35;
  *(void *)a2 = &unk_1EDC827D8;
  char v10 = v37;
  *(void *)(a2 + 32) = v36;
  *(void *)(a2 + 40) = v10;
  uint64_t v11 = a2 + 40;
  uint64_t v12 = v38;
  *(void *)(a2 + 48) = v38;
  if (v12)
  {
    *((void *)v10 + 2) = v11;
    long long v36 = &v37;
    char v37 = 0;
    uint64_t v38 = 0;
    char v10 = 0;
  }
  else
  {
    *(void *)(a2 + 32) = v11;
  }
  *(_OWORD *)(a2 + 56) = v39;
  long long v39 = 0uLL;
  *(unsigned char *)(a2 + 72) = 0;
  v34.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v36, v10);
  MEMORY[0x192FA3C30](&v34);
  if (v33)
  {
    v27.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v13 = (std::__shared_weak_count *)*((void *)&v32 + 1);
    if (*((void *)&v32 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v32 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v29, v30);
    MEMORY[0x192FA3C30](&v27);
  }
  if (v20) {
    AMSCore::SQLiteDatabase::Transaction::~Transaction((AMSCore::SQLiteDatabase::Transaction *)&v14);
  }
  else {
    ((void (*)(std::runtime_error *))v14.~runtime_error)(&v14);
  }
}

void sub_18DAB8924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_18DAB8938(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

AMSCore::SQLiteDatabase::Transaction *std::expected<AMSCore::SQLiteDatabase::Transaction,AMSCore::Error>::~expected[abi:fe180100](AMSCore::SQLiteDatabase::Transaction *this)
{
  if (*((unsigned char *)this + 72)) {
    AMSCore::SQLiteDatabase::Transaction::~Transaction(this);
  }
  else {
    (**(void (***)(AMSCore::SQLiteDatabase::Transaction *))this)(this);
  }
  return this;
}

void AMSCore::StructuredData::SQLiteStructuredDataProvider::~SQLiteStructuredDataProvider(AMSCore::StructuredData::SQLiteStructuredDataProvider *this)
{
  *(void *)this = &unk_1EDC81D60;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x192FA4080);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EDC81D60;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

AMSCore::SQLiteDatabase *std::expected<AMSCore::SQLiteDatabase,AMSCore::Error>::~expected[abi:fe180100](AMSCore::SQLiteDatabase *this)
{
  if (*((unsigned char *)this + 240)) {
    AMSCore::SQLiteDatabase::~SQLiteDatabase(this);
  }
  else {
    (**(void (***)(AMSCore::SQLiteDatabase *))this)(this);
  }
  return this;
}

uint64_t std::__shared_ptr_emplace<AMSCore::StructuredData::SQLiteStructuredDataProvider>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMSCore::StructuredData::SQLiteStructuredDataProvider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83BE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::StructuredData::SQLiteStructuredDataProvider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83BE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::SQLiteDatabase>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<AMSCore::SQLiteDatabase>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83BB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::SQLiteDatabase>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83BB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  (*(void (**)(std::runtime_error *__return_ptr))(*(void *)a1 + 48))(&v11);
  if (v17)
  {
    if (*((void *)&v12 + 1))
    {
      if (*((std::runtime_error **)&v12 + 1) == &v11)
      {
        *((void *)&v19 + 1) = &v18;
        ((void (*)(std::runtime_error *, std::runtime_error *))v11.__vftable[1].~runtime_error)(&v11, &v18);
      }
      else
      {
        *((void *)&v19 + 1) = *((void *)&v12 + 1);
        *((void *)&v12 + 1) = 0;
      }
    }
    else
    {
      *((void *)&v19 + 1) = 0;
    }
    if (*((void *)&v19 + 1))
    {
      if (*((std::runtime_error **)&v19 + 1) == &v18)
      {
        *((void *)&v25 + 1) = &v24;
        ((void (*)(std::runtime_error *, std::runtime_error *))v18.__vftable[1].~runtime_error)(&v18, &v24);
      }
      else
      {
        *((void *)&v25 + 1) = *((void *)&v19 + 1);
        *((void *)&v19 + 1) = 0;
      }
    }
    else
    {
      *((void *)&v25 + 1) = 0;
    }
    *(void *)(a2 + 24) = 0;
    uint64_t v3 = operator new(0x28uLL);
    BOOL v4 = v3;
    *uint64_t v3 = &unk_1EDC82D68;
    int v5 = v3 + 1;
    if (*((void *)&v25 + 1))
    {
      if (*((std::runtime_error **)&v25 + 1) == &v24)
      {
        v3[4] = v5;
        ((void (*)(std::runtime_error *))v24.__vftable[1].~runtime_error)(&v24);
      }
      else
      {
        v3[4] = *((void *)&v25 + 1);
        *((void *)&v25 + 1) = 0;
      }
    }
    else
    {
      v3[4] = 0;
    }
    *(void *)(a2 + 24) = v4;
    if (*((std::runtime_error **)&v25 + 1) == &v24)
    {
      ((void (*)(std::runtime_error *, void *))v24.__vftable[1].~runtime_error_0)(&v24, v5);
    }
    else if (*((void *)&v25 + 1))
    {
      (*(void (**)(void))(**((void **)&v25 + 1) + 40))();
    }
    *(unsigned char *)(a2 + 72) = 1;
    if (*((std::runtime_error **)&v19 + 1) == &v18)
    {
      ((void (*)(std::runtime_error *, void *))v18.__vftable[1].~runtime_error_0)(&v18, v5);
    }
    else if (*((void *)&v19 + 1))
    {
      (*(void (**)(void))(**((void **)&v19 + 1) + 40))();
    }
  }
  else
  {
    std::runtime_error::runtime_error(&v24, &v11);
    long long v25 = v12;
    v24.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    long long v26 = v13;
    v27[0] = (unsigned int *)v14;
    v27[1] = v15;
    if (v15)
    {
      *(void *)(v14 + 16) = v27;
      uint64_t v13 = (unsigned int **)&v14;
      uint64_t v14 = 0;
      long long v15 = 0;
    }
    else
    {
      long long v26 = v27;
    }
    long long v28 = v16;
    long long v16 = 0uLL;
    char v29 = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v18, (uint64_t)&v24);
    std::runtime_error::runtime_error((std::runtime_error *)a2, &v18);
    *(_OWORD *)(a2 + 16) = v19;
    *(void *)a2 = &unk_1EDC827D8;
    uint64_t v6 = v21;
    *(void *)(a2 + 32) = v20;
    *(void *)(a2 + 40) = v6;
    uint64_t v7 = a2 + 40;
    uint64_t v8 = v22;
    *(void *)(a2 + 48) = v22;
    if (v8)
    {
      *(void *)(v6 + 16) = v7;
      char v20 = &v21;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v6 = 0;
    }
    else
    {
      *(void *)(a2 + 32) = v7;
    }
    *(_OWORD *)(a2 + 56) = v23;
    long long v23 = 0uLL;
    *(unsigned char *)(a2 + 72) = 0;
    v18.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v20, (unsigned int *)v6);
    MEMORY[0x192FA3C30](&v18);
    if (v29)
    {
      v24.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v9 = (std::__shared_weak_count *)*((void *)&v28 + 1);
      if (*((void *)&v28 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v26, v27[0]);
      MEMORY[0x192FA3C30](&v24);
    }
  }
  if (!v17) {
    return ((uint64_t (*)(std::runtime_error *, void *))v11.~runtime_error)(&v11, v5);
  }
  uint64_t result = *((void *)&v12 + 1);
  if (*((std::runtime_error **)&v12 + 1) == &v11) {
    return ((uint64_t (*)(std::runtime_error *, void *))v11.__vftable[1].~runtime_error_0)(&v11, v5);
  }
  if (*((void *)&v12 + 1)) {
    return (*(uint64_t (**)(void))(**((void **)&v12 + 1) + 40))();
  }
  return result;
}

void sub_18DAB9170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0::~$_0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<AMSCore::Any>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::target_type()
{
}

uint64_t std::__function::__func<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<AMSCore::Any>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore14StructuredData23IStructuredDataProvider12TableBuilder13withSelectOneERKNSt3__16vectorIN"
                     "S0_9ConditionENS3_9allocatorIS5_EEEERKNS4_INS0_10ColumnDescENS6_ISB_EEEEE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore14StructuredData23IStructuredDataProvider12TableBuilder13withSelectOneERKNSt3_"
                                "_16vectorINS0_9ConditionENS3_9allocatorIS5_EEEERKNS4_INS0_10ColumnDescENS6_ISB_EEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore14StructuredData23IStructuredDataProvider12TableBuilder13withSelectOneERKNSt3__16vectorINS0_9ConditionENS3_9allocatorIS5_EEEERKNS4_INS0_10ColumnDescENS6_ISB_EEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore14StructuredData23IStructuredDataProvider12TableBuilder13withSelectOneERKNSt3__16vectorINS0_9ConditionENS3_9allocatorIS5_EEEERKNS4_INS0_10ColumnDescENS6_ISB_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<AMSCore::Any>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v8[0] = (std::runtime_error)vdupq_n_s64(1uLL);
  uint64_t v3 = *(void *)(a1 + 32);
  if (!v3) {
    std::__throw_bad_function_call[abi:fe180100]();
  }
  (*(void (**)(std::runtime_error *__return_ptr))(*(void *)v3 + 48))(v13);
  if (!v14)
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&>((uint64_t)v8, v13);
    goto LABEL_8;
  }
  BOOL v4 = v13[0].__vftable;
  if (v13[0].__vftable == (std::runtime_error_vtbl *)v13[0].__imp_.__imp_)
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[25]>((uint64_t)v8, 7u, "The selection was empty.");
LABEL_8:
    std::runtime_error::runtime_error((std::runtime_error *)a2, v8);
    *(std::runtime_error *)(a2 + 16) = v8[1];
    *(void *)a2 = &unk_1EDC827D8;
    uint64_t v5 = v10;
    *(void *)(a2 + 32) = v9;
    *(void *)(a2 + 40) = v5;
    uint64_t v6 = a2 + 40;
    uint64_t v7 = v11;
    *(void *)(a2 + 48) = v11;
    if (v7)
    {
      *(void *)(v5 + 16) = v6;
      uint64_t v9 = &v10;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v5 = 0;
    }
    else
    {
      *(void *)(a2 + 32) = v6;
    }
    *(_OWORD *)(a2 + 56) = v12;
    long long v12 = 0uLL;
    *(unsigned char *)(a2 + 72) = 0;
    v8[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v9, (unsigned int *)v5);
    MEMORY[0x192FA3C30](v8);
    if (!v14) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
  *(_OWORD *)a2 = *(_OWORD *)&v13[0].~runtime_error;
  *(void *)(a2 + 16) = v4->what;
  v4->~runtime_error_0 = 0;
  v4->what = 0;
  v4->~runtime_error = 0;
  *(unsigned char *)(a2 + 72) = 1;
  if (!v14)
  {
LABEL_5:
    ((void (*)(std::runtime_error *))v13[0].~runtime_error)(v13);
    return;
  }
LABEL_12:
  v8[0].__vftable = (std::runtime_error_vtbl *)v13;
  std::vector<std::vector<AMSCore::Any>>::__destroy_vector::operator()[abi:fe180100]((void ***)v8);
}

void sub_18DAB94C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void (**a19)(void), uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (!a28)
  {
    (*a19)(&a19);
    _Unwind_Resume(a1);
  }
  a9 = (void **)&a19;
  std::vector<std::vector<AMSCore::Any>>::__destroy_vector::operator()[abi:fe180100](&a9);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<AMSCore::Any>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::destroy_deallocate(char *__p)
{
  uint64_t v2 = __p + 8;
  uint64_t v3 = (char *)*((void *)__p + 4);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  operator delete(__p);
}

uint64_t std::__function::__func<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<AMSCore::Any>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t result = *(void *)(a1 + 32);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t std::__function::__func<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<AMSCore::Any>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1EDC82D68;
  uint64_t v3 = a2 + 1;
  uint64_t v4 = *(void *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      uint64_t v5 = *(uint64_t (**)(void))(**(void **)(result + 32) + 24);
      return v5();
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(void, void *))(*(void *)v4 + 16))(*(void *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

void *std::__function::__func<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<AMSCore::Any>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1EDC82D68;
  uint64_t v3 = v2 + 1;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
      return v2;
    }
    uint64_t v4 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v4 + 16))(v4, v3);
  }
  v2[4] = v4;
  return v2;
}

void sub_18DAB9798(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<AMSCore::Any>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::~__func(void *a1)
{
  *a1 = &unk_1EDC82D68;
  uint64_t v1 = a1 + 1;
  uint64_t v2 = (void *)a1[4];
  if (v2 == v1)
  {
    (*(void (**)(void *))(*v1 + 32))(v1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  JUMPOUT(0x192FA4080);
}

void *std::__function::__func<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder::withSelectOne(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<AMSCore::Any>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::~__func(void *a1)
{
  *a1 = &unk_1EDC82D68;
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  return a1;
}

void AMSCore::IBundleInfo::getMappedAccountClientIdentifierBundleInfo(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void AMSCore::IBundleInfo::getBuildVersion(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

void AMSCore::IBundleInfo::getUserAgentSuffix(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

void AMSCore::IBundleInfo::getURLScheme(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

void AMSCore::IBundleInfo::getIssuingBundleInfo(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void AMSCore::IBundleInfo::getBagProfile(char *a1@<X8>)
{
  a1[47] = 1;
}

void AMSCore::IDeviceInfo::getScreenInfo(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

void AMSCore::IDeviceInfo::getCountryCode(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t std::__shared_ptr_emplace<AMSCore::AppleDeviceInfo>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMSCore::AppleDeviceInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83C20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::AppleDeviceInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83C20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AMSCore::toString(std::string *this, uint64_t a2)
{
  int v4 = *(char *)(a2 + 23);
  std::string::size_type v5 = *(void *)(a2 + 8);
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  switch(v6)
  {
    case ';':
      uint64_t v7 = *(uint64_t **)a2;
      if (v4 >= 0) {
        uint64_t v7 = (uint64_t *)a2;
      }
      uint64_t v8 = *v7;
      uint64_t v9 = v7[1];
      uint64_t v10 = v7[2];
      uint64_t v11 = v7[3];
      uint64_t v12 = v7[4];
      uint64_t v13 = v7[5];
      uint64_t v14 = v7[6];
      uint64_t v15 = *(uint64_t *)((char *)v7 + 51);
      if (v8 != 0x6C7070612E6D6F63
        || v9 != 0x4D656C7070412E65
        || v10 != 0x7672655361696465
        || v11 != 0x65726F4373656369
        || v12 != 0x656369766544492ELL
        || v13 != 0x616C702E6F666E49
        || v14 != 0x696C2E6D726F6674
        || v15 != 0x78756E696C2E6D72)
      {
        goto LABEL_141;
      }
      *((unsigned char *)&this->__r_.__value_.__s + 23) = 5;
      strcpy((char *)this, "Linux");
      return;
    case '?':
      long long v25 = *(uint64_t **)a2;
      if (v4 >= 0) {
        long long v25 = (uint64_t *)a2;
      }
      uint64_t v26 = *v25;
      uint64_t v27 = v25[1];
      uint64_t v28 = v25[2];
      uint64_t v29 = v25[3];
      uint64_t v30 = v25[4];
      uint64_t v31 = v25[5];
      uint64_t v32 = v25[6];
      uint64_t v33 = *(uint64_t *)((char *)v25 + 55);
      if (v26 != 0x6C7070612E6D6F63
        || v27 != 0x4D656C7070412E65
        || v28 != 0x7672655361696465
        || v29 != 0x65726F4373656369
        || v30 != 0x656369766544492ELL
        || v31 != 0x616C702E6F666E49
        || v32 != 0x70612E6D726F6674
        || v33 != 0x736F692E656C7070)
      {
        goto LABEL_141;
      }
      *((unsigned char *)&this->__r_.__value_.__s + 23) = 3;
      LODWORD(this->__r_.__value_.__l.__data_) = 5459817;
      return;
    case '@':
      uint64_t v41 = *(uint64_t **)a2;
      if (v4 >= 0) {
        uint64_t v41 = (uint64_t *)a2;
      }
      if (*v41 == 0x6C7070612E6D6F63
        && v41[1] == 0x4D656C7070412E65
        && v41[2] == 0x7672655361696465
        && v41[3] == 0x65726F4373656369
        && v41[4] == 0x656369766544492ELL
        && v41[5] == 0x616C702E6F666E49
        && v41[6] == 0x70612E6D726F6674
        && v41[7] == 0x736F76742E656C70)
      {
        *((unsigned char *)&this->__r_.__value_.__s + 23) = 4;
        int v64 = 1397716596;
      }
      else
      {
        uint64_t v49 = *v41;
        uint64_t v50 = v41[1];
        uint64_t v51 = v41[2];
        uint64_t v52 = v41[3];
        uint64_t v53 = v41[4];
        uint64_t v54 = v41[5];
        uint64_t v55 = v41[6];
        uint64_t v56 = v41[7];
        if (v49 != 0x6C7070612E6D6F63
          || v50 != 0x4D656C7070412E65
          || v51 != 0x7672655361696465
          || v52 != 0x65726F4373656369
          || v53 != 0x656369766544492ELL
          || v54 != 0x616C702E6F666E49
          || v55 != 0x70612E6D726F6674
          || v56 != 0x736F72782E656C70)
        {
          goto LABEL_141;
        }
        *((unsigned char *)&this->__r_.__value_.__s + 23) = 4;
        int v64 = 1397715576;
      }
      LODWORD(this->__r_.__value_.__l.__data_) = v64;
      this->__r_.__value_.__s.__data_[4] = 0;
      return;
    case 'A':
      if (v4 >= 0) {
        uint64_t v65 = (uint64_t *)a2;
      }
      else {
        uint64_t v65 = *(uint64_t **)a2;
      }
      if (memcmp(v65, "com.apple.AppleMediaServicesCore.IDeviceInfo.platform.apple.macos", 0x41uLL))
      {
        if (v4 >= 0) {
          uint64_t v66 = (uint64_t *)a2;
        }
        else {
          uint64_t v66 = *(uint64_t **)a2;
        }
        if (!memcmp(v66, "com.apple.AppleMediaServicesCore.IDeviceInfo.platform.windows.x64", 0x41uLL)) {
          goto LABEL_146;
        }
        if (v6 != 67) {
          goto LABEL_137;
        }
        BOOL v67 = 1;
        goto LABEL_132;
      }
      *((unsigned char *)&this->__r_.__value_.__s + 23) = 5;
      strcpy((char *)this, "macOS");
      return;
    case 'C':
      if (v4 >= 0) {
        v68 = (uint64_t *)a2;
      }
      else {
        v68 = *(uint64_t **)a2;
      }
      if (memcmp(v68, "com.apple.AppleMediaServicesCore.IDeviceInfo.platform.apple.watchos", 0x43uLL))
      {
        BOOL v23 = v6 == 67;
        goto LABEL_127;
      }
      *((unsigned char *)&this->__r_.__value_.__s + 23) = 7;
      LODWORD(this->__r_.__value_.__l.__data_) = 1668571511;
      int v73 = 1397712995;
      goto LABEL_152;
    default:
      BOOL v23 = v6 == 67;
      if (v6 == 67)
      {
LABEL_127:
        if (v4 >= 0) {
          std::string::size_type v69 = (uint64_t *)a2;
        }
        else {
          std::string::size_type v69 = *(uint64_t **)a2;
        }
        if (!memcmp(v69, "com.apple.AppleMediaServicesCore.IDeviceInfo.platform.windows.arm64", 0x43uLL))
        {
LABEL_146:
          *((unsigned char *)&this->__r_.__value_.__s + 23) = 7;
          LODWORD(this->__r_.__value_.__l.__data_) = 1684957527;
          int v73 = 1937207140;
LABEL_152:
          *(_DWORD *)((char *)this->__r_.__value_.__r.__words + 3) = v73;
          this->__r_.__value_.__s.__data_[7] = 0;
          return;
        }
        BOOL v67 = v6 == 65;
        if (v23)
        {
LABEL_132:
          if (v4 >= 0) {
            v70 = (uint64_t *)a2;
          }
          else {
            v70 = *(uint64_t **)a2;
          }
          if (!memcmp(v70, "com.apple.AppleMediaServicesCore.IDeviceInfo.platform.android.arm64", 0x43uLL)) {
            goto LABEL_147;
          }
        }
        if (!v67) {
          goto LABEL_141;
        }
LABEL_137:
        if (v4 >= 0) {
          v71 = (uint64_t *)a2;
        }
        else {
          v71 = *(uint64_t **)a2;
        }
        if (memcmp(v71, "com.apple.AppleMediaServicesCore.IDeviceInfo.platform.android.x64", 0x41uLL)) {
          goto LABEL_141;
        }
LABEL_147:
        *((unsigned char *)&this->__r_.__value_.__s + 23) = 7;
        LODWORD(this->__r_.__value_.__l.__data_) = 1919184449;
        int v73 = 1684631410;
        goto LABEL_152;
      }
      if (v6 == 68)
      {
        std::runtime_error v24 = v4 >= 0 ? (const void *)a2 : *(const void **)a2;
        if (!memcmp(v24, "com.apple.AppleMediaServicesCore.IDeviceInfo.platform.android.armv7a", 0x44uLL)) {
          goto LABEL_147;
        }
      }
LABEL_141:
      if (v4 < 0)
      {
        v72 = *(const std::string::value_type **)a2;
        std::string::__init_copy_ctor_external(this, v72, v5);
      }
      else
      {
        *(_OWORD *)&this->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        this->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
      }
      return;
  }
}

double AMSCore::StaticBundleInfoProvider::getAccountClientIdentifier@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (char *)operator new(0x38uLL);
  *(void *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_18DDE9B40;
  strcpy(v3, "com.apple.AppleMediaServicesCore.IMediaAccount.appStore");
  return *(double *)".IMediaAccount.appStore";
}

void AMSCore::StaticBundleInfoProvider::~StaticBundleInfoProvider(void **this)
{
  *this = &unk_1EDC825B8;
  if (*((char *)this + 79) < 0)
  {
    operator delete(this[7]);
    if ((*((char *)this + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 31) & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      operator delete(this[1]);
LABEL_4:
      JUMPOUT(0x192FA4080);
    }
  }
  else if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[4]);
  if ((*((char *)this + 31) & 0x80000000) == 0) {
    goto LABEL_4;
  }
  goto LABEL_9;
}

{
  *this = &unk_1EDC825B8;
  if (*((char *)this + 79) < 0)
  {
    operator delete(this[7]);
    if ((*((char *)this + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 31) & 0x80000000) == 0) {
        return;
      }
LABEL_7:
      operator delete(this[1]);
      return;
    }
  }
  else if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[4]);
  if (*((char *)this + 31) < 0) {
    goto LABEL_7;
  }
}

uint64_t std::construct_at[abi:fe180100]<AMSCore::DialogAction::DeepLink,AMSCore::DialogAction::DeepLink,AMSCore::DialogAction::DeepLink*>(uint64_t result, long long *a2)
{
  *(unsigned char *)uint64_t result = 0;
  *(unsigned char *)(result + 24) = 0;
  if (*((unsigned char *)a2 + 24))
  {
    long long v2 = *a2;
    *(void *)(result + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t result = v2;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(result + 24) = 1;
  }
  *(unsigned char *)(result + 32) = 0;
  *(unsigned char *)(result + 56) = 0;
  if (*((unsigned char *)a2 + 56))
  {
    long long v3 = a2[2];
    *(void *)(result + 48) = *((void *)a2 + 6);
    *(_OWORD *)(result + 32) = v3;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 4) = 0;
    *(unsigned char *)(result + 56) = 1;
  }
  *(unsigned char *)(result + 64) = 0;
  *(unsigned char *)(result + 88) = 0;
  if (*((unsigned char *)a2 + 88))
  {
    long long v4 = a2[4];
    *(void *)(result + 80) = *((void *)a2 + 10);
    *(_OWORD *)(result + 64) = v4;
    *((void *)a2 + 9) = 0;
    *((void *)a2 + 10) = 0;
    *((void *)a2 + 8) = 0;
    *(unsigned char *)(result + 88) = 1;
  }
  *(_DWORD *)(result + 96) = *((_DWORD *)a2 + 24);
  *(void *)(result + 104) = result + 104;
  *(void *)(result + 112) = result + 104;
  *(void *)(result + 120) = 0;
  if ((long long *)result == a2)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = *((void *)a2 + 15);
    if (v5)
    {
      uint64_t v7 = *((void *)a2 + 13);
      uint64_t v6 = (uint64_t *)*((void *)a2 + 14);
      uint64_t v8 = *v6;
      *(void *)(v8 + 8) = *(void *)(v7 + 8);
      **(void **)(v7 + 8) = v8;
      uint64_t v9 = *(void *)(result + 104);
      *(void *)(v9 + 8) = v6;
      uint64_t *v6 = v9;
      *(void *)(result + 104) = v7;
      *(void *)(v7 + 8) = result + 104;
      *(void *)(result + 120) = v5;
      *((void *)a2 + 15) = 0;
    }
    long long v10 = a2[8];
    *(void *)(result + 144) = *((void *)a2 + 18);
    *(_OWORD *)(result + 128) = v10;
    *((void *)a2 + 17) = 0;
    *((void *)a2 + 18) = 0;
    *((void *)a2 + 16) = 0;
    *(unsigned char *)(result + 152) = *((unsigned char *)a2 + 152);
  }
  return result;
}

AMSCore::IMetricsProvider::Event *AMSCore::IMetricsProvider::Event::Event(AMSCore::IMetricsProvider::Event *this, const AMSCore::IMetricsProvider::Event *a2)
{
  long long v3 = this;
  *(void *)this = &unk_1EDC81F18;
  *((unsigned char *)this + 8) = 0;
  *((unsigned char *)this + 32) = 0;
  if (*((unsigned char *)a2 + 32))
  {
    if (*((char *)a2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
    }
    else
    {
      long long v4 = *(_OWORD *)((char *)a2 + 8);
      *((void *)this + 3) = *((void *)a2 + 3);
      *(_OWORD *)((char *)this + 8) = v4;
    }
    *((unsigned char *)v3 + 32) = 1;
  }
  *((void *)v3 + 5) = *((void *)a2 + 5);
  uint64_t v5 = (std::string *)((char *)v3 + 48);
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 3);
    *((void *)v3 + 8) = *((void *)a2 + 8);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *((void *)v3 + 10) = 0;
  *((void *)v3 + 9) = (char *)v3 + 80;
  *((void *)v3 + 11) = 0;
  uint64_t v7 = (const AMSCore::IMetricsProvider::Event *)*((void *)a2 + 9);
  if (v7 != (const AMSCore::IMetricsProvider::Event *)((char *)a2 + 80))
  {
    do
    {
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)v3 + 9, (uint64_t *)v3 + 10, (const void **)v7 + 4, (long long *)v7 + 2);
      long long v10 = (const AMSCore::IMetricsProvider::Event *)*((void *)v7 + 1);
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          long long v10 = *(const AMSCore::IMetricsProvider::Event **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (const AMSCore::IMetricsProvider::Event *)*((void *)v7 + 2);
          BOOL v12 = *(void *)v11 == (void)v7;
          uint64_t v7 = v11;
        }
        while (!v12);
      }
      uint64_t v7 = v11;
    }
    while (v11 != (const AMSCore::IMetricsProvider::Event *)((char *)a2 + 80));
  }
  *((unsigned char *)v3 + 96) = *((unsigned char *)a2 + 96);
  uint64_t v8 = (std::string *)((char *)v3 + 104);
  if (*((char *)a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a2 + 13), *((void *)a2 + 14));
  }
  else
  {
    long long v9 = *(_OWORD *)((char *)a2 + 104);
    *((void *)v3 + 15) = *((void *)a2 + 15);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  *((void *)v3 + 17) = 0;
  *((void *)v3 + 18) = 0;
  uint64_t v13 = (void *)((char *)v3 + 136);
  *((void *)v3 + 16) = (char *)v3 + 136;
  uint64_t v14 = (void *)*((void *)a2 + 16);
  long long v43 = (char *)a2 + 136;
  if (v14 != (void *)((char *)a2 + 136))
  {
    while (1)
    {
      uint64_t v16 = *((void *)v3 + 17);
      char v17 = v13;
      if (*((void **)v3 + 16) == v13) {
        break;
      }
      std::runtime_error v18 = (void *)*((void *)v3 + 17);
      long long v19 = v13;
      if (v16)
      {
        do
        {
          char v17 = v18;
          std::runtime_error v18 = (void *)v18[1];
        }
        while (v18);
      }
      else
      {
        do
        {
          char v17 = (void *)v19[2];
          BOOL v12 = *v17 == (void)v19;
          long long v19 = v17;
        }
        while (v12);
      }
      int v20 = *((char *)v17 + 55);
      if (v20 >= 0) {
        uint64_t v21 = v17 + 4;
      }
      else {
        uint64_t v21 = (const void *)v17[4];
      }
      if (v20 >= 0) {
        size_t v22 = *((unsigned __int8 *)v17 + 55);
      }
      else {
        size_t v22 = v17[5];
      }
      int v23 = *((char *)v14 + 55);
      if (v23 >= 0) {
        std::runtime_error v24 = v14 + 4;
      }
      else {
        std::runtime_error v24 = (const void *)v14[4];
      }
      if (v23 >= 0) {
        size_t v25 = *((unsigned __int8 *)v14 + 55);
      }
      else {
        size_t v25 = v14[5];
      }
      if (v25 >= v22) {
        size_t v26 = v22;
      }
      else {
        size_t v26 = v25;
      }
      int v27 = memcmp(v21, v24, v26);
      if (v27)
      {
        if (v27 < 0) {
          break;
        }
      }
      else if (v22 < v25)
      {
        break;
      }
      char v17 = v13;
      uint64_t v28 = (char **)v13;
      if (v16)
      {
        uint64_t v28 = (char **)v13;
        while (1)
        {
          char v17 = (void *)v16;
          size_t v29 = *(unsigned __int8 *)(v16 + 55);
          size_t v30 = *(void *)(v16 + 40);
          if ((v29 & 0x80u) == 0) {
            uint64_t v31 = (const void *)(v16 + 32);
          }
          else {
            uint64_t v31 = *(const void **)(v16 + 32);
          }
          if ((v29 & 0x80u) == 0) {
            size_t v32 = v29;
          }
          else {
            size_t v32 = v30;
          }
          if (v32 >= v25) {
            size_t v33 = v25;
          }
          else {
            size_t v33 = v32;
          }
          int v34 = memcmp(v24, v31, v33);
          if (v34)
          {
            if (v34 < 0) {
              goto LABEL_47;
            }
LABEL_61:
            int v35 = memcmp(v31, v24, v33);
            if (v35)
            {
              if ((v35 & 0x80000000) == 0) {
                break;
              }
            }
            else if (v32 >= v25)
            {
              break;
            }
            uint64_t v28 = (char **)(v17 + 1);
            uint64_t v16 = v17[1];
            if (!v16) {
              goto LABEL_74;
            }
          }
          else
          {
            if (v25 >= v32) {
              goto LABEL_61;
            }
LABEL_47:
            uint64_t v16 = *v17;
            uint64_t v28 = (char **)v17;
            if (!*v17) {
              goto LABEL_74;
            }
          }
        }
      }
LABEL_71:
      if (*v28)
      {
        long long v36 = (char *)v14[1];
        if (!v36) {
          goto LABEL_82;
        }
      }
      else
      {
LABEL_74:
        char v37 = (char *)operator new(0x40uLL);
        uint64_t v38 = (std::string *)(v37 + 32);
        if (*((char *)v14 + 55) < 0)
        {
          char v40 = this;
          std::string::__init_copy_ctor_external(v38, (const std::string::value_type *)v14[4], v14[5]);
        }
        else
        {
          long long v39 = *((_OWORD *)v14 + 2);
          *((void *)v37 + 6) = v14[6];
          *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v39;
          char v40 = this;
        }
        *((_WORD *)v37 + 28) = *((_WORD *)v14 + 28);
        *(void *)char v37 = 0;
        *((void *)v37 + 1) = 0;
        *((void *)v37 + 2) = v17;
        std::__shared_weak_count *v28 = v37;
        uint64_t v41 = **((void **)v40 + 16);
        if (v41)
        {
          *((void *)v40 + 16) = v41;
          char v37 = *v28;
        }
        std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v40 + 17), (uint64_t *)v37);
        ++*((void *)v40 + 18);
        long long v36 = (char *)v14[1];
        if (!v36)
        {
          do
          {
LABEL_82:
            long long v42 = (char *)v14[2];
            BOOL v12 = *(void *)v42 == (void)v14;
            uint64_t v14 = v42;
          }
          while (!v12);
          goto LABEL_22;
        }
      }
      do
      {
        long long v42 = v36;
        long long v36 = *(char **)v36;
      }
      while (v36);
LABEL_22:
      uint64_t v14 = v42;
      long long v3 = this;
      if (v42 == v43) {
        return v3;
      }
    }
    if (v16)
    {
      uint64_t v28 = (char **)(v17 + 1);
    }
    else
    {
      char v17 = v13;
      uint64_t v28 = (char **)v13;
    }
    goto LABEL_71;
  }
  return v3;
}

void sub_18DABA62C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14)
{
  if (*(unsigned char *)(v14 + 32))
  {
    if (*(char *)(a14 + 31) < 0) {
      operator delete(*a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_18DABA660(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  operator delete(v14);
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a14 + 136));
  if (*(char *)(a14 + 127) < 0) {
    operator delete(*a9);
  }
  JUMPOUT(0x18DABA6A0);
}

void AMSCore::IMetricsProvider::Event::~Event(AMSCore::IMetricsProvider::Event *this)
{
  *(void *)this = &unk_1EDC81F18;
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)this + 17));
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this + 72, *((unsigned int **)this + 10));
  if (*((char *)this + 71) < 0)
  {
    operator delete(*((void **)this + 6));
    if (!*((unsigned char *)this + 32)) {
      return;
    }
  }
  else if (!*((unsigned char *)this + 32))
  {
    return;
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  AMSCore::IMetricsProvider::Event::~Event(this);
  JUMPOUT(0x192FA4080);
}

void **std::vector<AMSCore::DialogAction>::~vector[abi:fe180100](void **a1)
{
  long long v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    long long v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 272;
        std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(v3);
      }
      while ((void *)v3 != v2);
      long long v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void AMSCore::FinanceMetricsEvent::~FinanceMetricsEvent(AMSCore::FinanceMetricsEvent *this)
{
  AMSCore::IMetricsProvider::Event::~Event(this);
  JUMPOUT(0x192FA4080);
}

void AMSCore::Log::fatal<char const(&)[41]>()
{
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v1);
  AMSCore::Logger::log<char [41]>(v1, 5u, (uint64_t)"dialog", 6, "Failed to determine the selected action.");
  uint64_t v0 = v2;
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
      std::__shared_weak_count::__release_weak(v0);
    }
  }
}

void sub_18DABA8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::string *AMSCore::DialogAction::DialogAction(std::string *this, const AMSCore::DialogAction *a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[6].__r_.__value_.__s.__data_[16] = 0;
  if (*((unsigned char *)a2 + 160))
  {
    AMSCore::URL::URL(this, a2);
    this[6].__r_.__value_.__s.__data_[8] = *((unsigned char *)a2 + 152);
    this[6].__r_.__value_.__s.__data_[16] = 1;
  }
  if (*((char *)a2 + 191) < 0)
  {
    std::string::__init_copy_ctor_external(this + 7, *((const std::string::value_type **)a2 + 21), *((void *)a2 + 22));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 168);
    this[7].__r_.__value_.__r.__words[2] = *((void *)a2 + 23);
    *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = v4;
  }
  this[8].__r_.__value_.__s.__data_[0] = *((unsigned char *)a2 + 192);
  if (*((char *)a2 + 223) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 200), *((const std::string::value_type **)a2 + 25), *((void *)a2 + 26));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 200);
    this[9].__r_.__value_.__r.__words[0] = *((void *)a2 + 27);
    *(_OWORD *)&this[8].__r_.__value_.__r.__words[1] = v5;
  }
  this[9].__r_.__value_.__r.__words[2] = 0;
  this[9].__r_.__value_.__l.__size_ = (std::string::size_type)&this[9].__r_.__value_.__r.__words[2];
  this[10].__r_.__value_.__r.__words[0] = 0;
  long long v6 = (const AMSCore::DialogAction *)*((void *)a2 + 28);
  if (v6 != (const AMSCore::DialogAction *)((char *)a2 + 232))
  {
    do
    {
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&this[9].__r_.__value_.__l.__size_, (uint64_t *)&this[9].__r_.__value_.__r.__words[2], (const void **)v6 + 4, (long long *)v6 + 2);
      long long v9 = (const AMSCore::DialogAction *)*((void *)v6 + 1);
      if (v9)
      {
        do
        {
          long long v10 = v9;
          long long v9 = *(const AMSCore::DialogAction **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          long long v10 = (const AMSCore::DialogAction *)*((void *)v6 + 2);
          BOOL v11 = *(void *)v10 == (void)v6;
          long long v6 = v10;
        }
        while (!v11);
      }
      long long v6 = v10;
    }
    while (v10 != (const AMSCore::DialogAction *)((char *)a2 + 232));
  }
  uint64_t v7 = (std::string *)((char *)this + 248);
  if (*((char *)a2 + 271) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 31), *((void *)a2 + 32));
  }
  else
  {
    long long v8 = *(_OWORD *)((char *)a2 + 248);
    this[11].__r_.__value_.__r.__words[0] = *((void *)a2 + 33);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return this;
}

void sub_18DABAA4C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v4, *(unsigned int **)(v1 + 232));
  if (*(char *)(v1 + 223) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 191) & 0x80000000) == 0)
    {
LABEL_3:
      if (!*(unsigned char *)(v1 + 160)) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*(char *)(v1 + 191) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  if (!*(unsigned char *)(v1 + 160)) {
LABEL_5:
  }
    _Unwind_Resume(a1);
LABEL_4:
  AMSCore::URL::~URL((AMSCore::URL *)v1);
  goto LABEL_5;
}

void AMSCore::DialogAction::~DialogAction(AMSCore::DialogAction *this)
{
  if (*((char *)this + 271) < 0) {
    operator delete(*((void **)this + 31));
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this + 224, *((unsigned int **)this + 29));
  if (*((char *)this + 223) < 0)
  {
    operator delete(*((void **)this + 25));
    if ((*((char *)this + 191) & 0x80000000) == 0)
    {
LABEL_5:
      if (!*((unsigned char *)this + 160)) {
        return;
      }
      goto LABEL_6;
    }
  }
  else if ((*((char *)this + 191) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*((void **)this + 21));
  if (!*((unsigned char *)this + 160)) {
    return;
  }
LABEL_6:
  AMSCore::URL::~URL(this);
}

void std::__shared_ptr_emplace<AMSCore::DialogAction>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<AMSCore::DialogAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83A98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::DialogAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83A98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AMSCore::Logger::log<char [41]>(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= a2)
  {
    char v8 = a2;
    uint64_t v9 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v15);
    uint64_t v10 = *(void *)(v15[0] - 24);
    {
    }
    size_t v11 = strlen(a5);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v15, (uint64_t)a5, v11);
    uint64_t v12 = v15[6];
    uint64_t v13 = (char *)v15 + *(void *)(v15[0] - 24);
    if ((v13[32] & 5) != 0)
    {
      uint64_t v14 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v13 + 5) + 32))(&rep);
      uint64_t v14 = v22;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v19 = v8;
    uint64_t v20 = v12;
    uint64_t v21 = v14;
    (*(void (**)(void, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v9 + 16) + 16))(*(void *)(v9 + 16), a3, a4, &rep);
    v15[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v15 + *(void *)(v15[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v15[1] = MEMORY[0x1E4FBA470] + 16;
    if (v16 < 0) {
      operator delete((void *)v15[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v17);
  }
  return result;
}

void sub_18DABAE7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *AMSCore::DialogResult::DialogResult(void *a1, uint64_t *a2, const void **a3)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    char v8 = *((unsigned char *)a3 + 23);
    if (v8 >= 0) {
      uint64_t v9 = (const void *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      uint64_t v9 = a3[1];
    }
    if (v8 >= 0) {
      uint64_t v10 = (unsigned __int8 *)a3;
    }
    else {
      uint64_t v10 = (unsigned __int8 *)*a3;
    }
    while (1)
    {
      uint64_t v11 = *(unsigned __int8 *)(v6 + 191);
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = (const void *)*(unsigned __int8 *)(v6 + 191);
      }
      else {
        uint64_t v12 = *(const void **)(v6 + 176);
      }
      if (v12 == v9)
      {
        if ((v11 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)(v6 + 168), v10, *(void *)(v6 + 176))) {
            break;
          }
        }
        else
        {
          if (!*(unsigned char *)(v6 + 191)) {
            break;
          }
          uint64_t v13 = 0;
          while (*(unsigned __int8 *)(v6 + v13 + 168) == v10[v13])
          {
            if (v11 == ++v13) {
              goto LABEL_19;
            }
          }
        }
      }
      v6 += 272;
      if (v6 == v7) {
        goto LABEL_33;
      }
    }
  }
LABEL_19:
  if (v6 == v7)
  {
LABEL_33:
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v62);
    uint64_t v26 = v62;
    if (*(unsigned __int8 *)(v62 + 8) <= 4u)
    {
      std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v64);
      uint64_t v27 = *(void *)(v64[0] - 24);
      {
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v64, (uint64_t)"Received an invalid action identifier. identifier = ", 52);
      int v28 = *((char *)a3 + 23);
      if (v28 >= 0) {
        uint64_t v29 = (uint64_t)a3;
      }
      else {
        uint64_t v29 = (uint64_t)*a3;
      }
      if (v28 >= 0) {
        uint64_t v30 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        uint64_t v30 = (uint64_t)a3[1];
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v64, v29, v30);
      uint64_t v31 = v64[6];
      size_t v32 = (char *)v64 + *(void *)(v64[0] - 24);
      if ((v32[32] & 5) != 0)
      {
        uint64_t v33 = -1;
      }
      else
      {
        (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v32 + 5) + 32))(&rep);
        uint64_t v33 = v71;
      }
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
      char v68 = 4;
      uint64_t v69 = v31;
      uint64_t v70 = v33;
      (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v26 + 16) + 16))(*(void *)(v26 + 16), "dialog", 6, &rep);
      v64[0] = *MEMORY[0x1E4FBA418];
      *(void *)((char *)v64 + *(void *)(v64[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v64[1] = MEMORY[0x1E4FBA470] + 16;
      if (v65 < 0) {
        operator delete((void *)v64[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x192FA3FD0](&v66);
    }
    int v35 = v63;
    if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    if (*a2 == v7)
    {
LABEL_62:
      AMSCore::Log::fatal<char const(&)[41]>();
      __break(1u);
    }
    while (*(unsigned char *)(v6 + 192))
    {
      v6 += 272;
      if (v6 == v7) {
        goto LABEL_62;
      }
    }
  }
  if (v6 == v7) {
    goto LABEL_62;
  }
  AMSCore::DialogAction::DialogAction(&v36, (const AMSCore::DialogAction *)v6);
  uint64_t v14 = (char *)operator new(0x128uLL);
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 2) = 0;
  *(void *)uint64_t v14 = &unk_1EDC83A98;
  v14[24] = 0;
  uint64_t v15 = v14 + 24;
  v14[184] = 0;
  if (v51)
  {
    v14[24] = 0;
    v14[48] = 0;
    if (v37)
    {
      *uint64_t v15 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
      *((void *)v14 + 5) = *((void *)&v36.__r_.__value_.__l + 2);
      memset(&v36, 0, sizeof(v36));
      v14[48] = 1;
    }
    v14[56] = 0;
    v14[80] = 0;
    if (v40)
    {
      *(_OWORD *)(v14 + 56) = v38;
      *((void *)v14 + 9) = v39;
      uint64_t v39 = 0;
      long long v38 = 0uLL;
      v14[80] = 1;
    }
    v14[88] = 0;
    v14[112] = 0;
    if (v43)
    {
      *(_OWORD *)(v14 + 88) = v41;
      *((void *)v14 + 13) = v42;
      uint64_t v42 = 0;
      long long v41 = 0uLL;
      v14[112] = 1;
    }
    *((_DWORD *)v14 + 30) = v44;
    *((void *)v14 + 16) = v14 + 128;
    *((void *)v14 + 17) = v14 + 128;
    *((void *)v14 + 18) = 0;
    uint64_t v16 = v47;
    if (v47)
    {
      uint64_t v18 = v45;
      uint64_t v17 = v46;
      uint64_t v19 = *v46;
      *(void *)(v19 + 8) = *(void *)(v45 + 8);
      **(void **)(v18 + 8) = v19;
      uint64_t v20 = *((void *)v14 + 16);
      *(void *)(v20 + 8) = v17;
      *uint64_t v17 = v20;
      *((void *)v14 + 16) = v18;
      *(void *)(v18 + 8) = v14 + 128;
      *((void *)v14 + 18) = v16;
      uint64_t v47 = 0;
    }
    *(_OWORD *)(v14 + 152) = v48;
    *((void *)v14 + 21) = v49;
    uint64_t v49 = 0;
    long long v48 = 0uLL;
    v14[176] = v50;
    v14[184] = 1;
  }
  *((_OWORD *)v14 + 12) = v52;
  *((void *)v14 + 26) = v53;
  long long v52 = 0uLL;
  v14[216] = v54;
  *((_OWORD *)v14 + 14) = __p;
  uint64_t v53 = 0;
  long long __p = 0uLL;
  uint64_t v21 = v56;
  uint64_t v22 = v57;
  uint64_t v56 = 0;
  *((void *)v14 + 30) = v21;
  *((void *)v14 + 31) = v22;
  uint64_t v23 = v14 + 256;
  uint64_t v24 = v58;
  uint64_t v25 = v59;
  *((void *)v14 + 32) = v58;
  *((void *)v14 + 33) = v25;
  if (v25)
  {
    *(void *)(v24 + 16) = v23;
    v57 = &v58;
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    uint64_t v24 = 0;
  }
  else
  {
    *((void *)v14 + 31) = v23;
  }
  *((_OWORD *)v14 + 17) = v60;
  *((void *)v14 + 36) = v61;
  uint64_t v61 = 0;
  long long v60 = 0uLL;
  *a1 = v15;
  a1[1] = v14;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v57, (unsigned int *)v24);
  if ((SHIBYTE(v56) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v53) & 0x80000000) == 0) {
      goto LABEL_46;
    }
LABEL_50:
    operator delete((void *)v52);
    if (!v51) {
      return a1;
    }
    goto LABEL_47;
  }
  operator delete((void *)__p);
  if (SHIBYTE(v53) < 0) {
    goto LABEL_50;
  }
LABEL_46:
  if (v51) {
LABEL_47:
  }
    AMSCore::URL::~URL((AMSCore::URL *)&v36);
  return a1;
}

void sub_18DABB4C0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void AMSCore::HandleDialogResultTask::perform(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  long long v5 = (char *)operator new(0x148uLL);
  *(void *)long long v5 = AMSCore::HandleDialogResultTask::perform;
  *((void *)v5 + 1) = AMSCore::HandleDialogResultTask::perform;
  *(_OWORD *)(v5 + 232) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *a3 = 0;
  a3[1] = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  v5[24] = 0;
  v5[104] = 0;
  *((void *)v5 + 14) = 0;
  *((void *)v5 + 18) = 0;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v6, (uint64_t)(v5 + 16));
}

void sub_18DABC7D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t AMSCore::HandleDialogResultTask::perform(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 296);
  if (*(unsigned char *)(v1 + 88))
  {
    uint64_t v2 = result;
    uint64_t v3 = (const std::runtime_error *)(result + 152);
    int v4 = *(unsigned __int8 *)(v1 + 80);
    if (!*(unsigned char *)(v1 + 80))
    {
      std::runtime_error::runtime_error((std::runtime_error *)(result + 152), (const std::runtime_error *)(v1 + 8));
      *(_OWORD *)(v2 + 168) = *(_OWORD *)(v1 + 24);
      long long v5 = (void *)(v1 + 48);
      uint64_t v6 = *(void *)(v1 + 48);
      *(void *)(v2 + 192) = v6;
      uint64_t v7 = v2 + 192;
      *(void *)(v2 + 152) = &unk_1EDC827D8;
      *(void *)(v2 + 184) = *(void *)(v1 + 40);
      uint64_t v8 = *(void *)(v1 + 56);
      *(void *)(v2 + 200) = v8;
      if (v8)
      {
        *(void *)(v6 + 16) = v7;
        *(void *)(v1 + 40) = v5;
        void *v5 = 0;
        *(void *)(v1 + 56) = 0;
      }
      else
      {
        *(void *)(v2 + 184) = v7;
      }
      uint64_t v9 = *(void *)(v2 + 296);
      *(_OWORD *)(v2 + 208) = *(_OWORD *)(v9 + 64);
      *(void *)(v9 + 64) = 0;
      *(void *)(v9 + 72) = 0;
    }
    *(unsigned char *)(v2 + 224) = v4;
    if (*(unsigned char *)(v2 + 104))
    {
      if (!*(unsigned char *)(v2 + 96))
      {
        (**(void (***)(uint64_t))(v2 + 24))(v2 + 24);
        int v4 = *(unsigned __int8 *)(v2 + 224);
      }
      *(unsigned char *)(v2 + 104) = 0;
    }
    if (v4)
    {
      *(unsigned char *)(v2 + 96) = v4;
      *(unsigned char *)(v2 + 104) = 1;
    }
    else
    {
      std::runtime_error::runtime_error((std::runtime_error *)(v2 + 24), v3);
      uint64_t v10 = (void *)(v2 + 192);
      uint64_t v11 = *(void *)(v2 + 192);
      *(void *)(v2 + 64) = v11;
      uint64_t v12 = v2 + 64;
      *(_OWORD *)(v2 + 40) = *(_OWORD *)(v2 + 168);
      *(void *)(v2 + 24) = &unk_1EDC827D8;
      *(void *)(v2 + 56) = *(void *)(v2 + 184);
      uint64_t v13 = *(void *)(v2 + 200);
      *(void *)(v2 + 72) = v13;
      if (v13)
      {
        *(void *)(v11 + 16) = v12;
        *(void *)(v2 + 184) = v10;
        void *v10 = 0;
        *(void *)(v2 + 200) = 0;
      }
      else
      {
        *(void *)(v2 + 56) = v12;
      }
      *(_OWORD *)(v2 + 80) = *(_OWORD *)(v2 + 208);
      *(void *)(v2 + 208) = 0;
      *(void *)(v2 + 216) = 0;
      int v14 = *(unsigned __int8 *)(v2 + 224);
      *(unsigned char *)(v2 + 96) = 0;
      *(unsigned char *)(v2 + 104) = 1;
      if (!v14) {
        ((void (*)(const std::runtime_error *))v3->~runtime_error)(v3);
      }
    }
    uint64_t v15 = *(void *)(v2 + 304);
    if (v15 && !atomic_fetch_add((atomic_ullong *volatile)(v15 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v16 = *(std::__shared_weak_count **)(v2 + 304);
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    uint64_t v17 = *(std::__shared_weak_count **)(v2 + 256);
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    uint64_t v18 = *(std::__shared_weak_count **)(v2 + 288);
    if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    uint64_t v19 = *(std::__shared_weak_count **)(v2 + 272);
    if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    *(void *)(v2 + 312) = 0;
    *(void *)(v2 + 152) = v2 + 16;
    *(void *)uint64_t v2 = 0;
    return AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void AMSCore::HandleDialogResultTask::perform(char *__p)
{
  if (*(void *)__p)
  {
    uint64_t v2 = *((void *)__p + 38);
    if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 38);
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    int v4 = (std::__shared_weak_count *)*((void *)__p + 32);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    long long v5 = (std::__shared_weak_count *)*((void *)__p + 36);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = (std::__shared_weak_count *)*((void *)__p + 34);
    if (v6)
    {
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = (std::__shared_weak_count *)*((void *)__p + 39);
  }
  uint64_t v7 = (char *)*((void *)__p + 18);
  if (v7 == __p + 120)
  {
    (*(void (**)(char *))(*((void *)__p + 15) + 32))(__p + 120);
    if (!__p[104]) {
      goto LABEL_24;
    }
    goto LABEL_22;
  }
  if (v7) {
    (*(void (**)(char *))(*(void *)v7 + 40))(v7);
  }
  if (__p[104])
  {
LABEL_22:
    if (!__p[96]) {
      (**((void (***)(void))__p + 3))();
    }
  }
LABEL_24:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)__p + 30);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(__p);
}

uint64_t AMSCore::anonymous namespace'::handleDeepLink(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 448);
  if (*(unsigned char *)(v1 + 88))
  {
    uint64_t v2 = result;
    uint64_t v3 = (const std::runtime_error *)(result + 312);
    int v4 = *(unsigned __int8 *)(v1 + 80);
    if (!*(unsigned char *)(v1 + 80))
    {
      std::runtime_error::runtime_error((std::runtime_error *)(result + 312), (const std::runtime_error *)(v1 + 8));
      *(_OWORD *)(v2 + 328) = *(_OWORD *)(v1 + 24);
      *(void *)(v2 + 312) = &unk_1EDC827D8;
      long long v5 = (void *)(v1 + 48);
      uint64_t v6 = *(void *)(v1 + 48);
      uint64_t v7 = v2 + 352;
      *(void *)(v2 + 344) = *(void *)(v1 + 40);
      *(void *)(v2 + 352) = v6;
      uint64_t v8 = *(void *)(v1 + 56);
      *(void *)(v2 + 360) = v8;
      if (v8)
      {
        *(void *)(v6 + 16) = v7;
        *(void *)(v1 + 40) = v5;
        void *v5 = 0;
        *(void *)(v1 + 56) = 0;
      }
      else
      {
        *(void *)(v2 + 344) = v7;
      }
      uint64_t v9 = *(void *)(v2 + 448);
      *(_OWORD *)(v2 + 368) = *(_OWORD *)(v9 + 64);
      *(void *)(v9 + 64) = 0;
      *(void *)(v9 + 72) = 0;
    }
    *(unsigned char *)(v2 + 384) = v4;
    if (*(unsigned char *)(v2 + 104))
    {
      if (!*(unsigned char *)(v2 + 96))
      {
        (**(void (***)(uint64_t))(v2 + 24))(v2 + 24);
        int v4 = *(unsigned __int8 *)(v2 + 384);
      }
      *(unsigned char *)(v2 + 104) = 0;
    }
    if (v4)
    {
      *(unsigned char *)(v2 + 96) = v4;
      *(unsigned char *)(v2 + 104) = 1;
    }
    else
    {
      std::runtime_error::runtime_error((std::runtime_error *)(v2 + 24), v3);
      uint64_t v10 = *(void *)(v2 + 352);
      *(void *)(v2 + 64) = v10;
      uint64_t v11 = v2 + 64;
      *(_OWORD *)(v2 + 40) = *(_OWORD *)(v2 + 328);
      *(void *)(v2 + 24) = &unk_1EDC827D8;
      *(void *)(v2 + 56) = *(void *)(v2 + 344);
      uint64_t v12 = *(void *)(v2 + 360);
      *(void *)(v2 + 72) = v12;
      if (v12)
      {
        *(void *)(v10 + 16) = v11;
        *(void *)(v2 + 344) = v2 + 352;
        *(void *)(v2 + 352) = 0;
        *(void *)(v2 + 360) = 0;
      }
      else
      {
        *(void *)(v2 + 56) = v11;
      }
      *(_OWORD *)(v2 + 80) = *(_OWORD *)(v2 + 368);
      *(void *)(v2 + 368) = 0;
      *(void *)(v2 + 376) = 0;
      int v13 = *(unsigned __int8 *)(v2 + 384);
      *(unsigned char *)(v2 + 96) = 0;
      *(unsigned char *)(v2 + 104) = 1;
      if (!v13) {
        ((void (*)(const std::runtime_error *))v3->~runtime_error)(v3);
      }
    }
    uint64_t v14 = *(void *)(v2 + 456);
    if (v14 && !atomic_fetch_add((atomic_ullong *volatile)(v14 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v15 = *(std::__shared_weak_count **)(v2 + 456);
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    uint64_t v16 = *(std::__shared_weak_count **)(v2 + 416);
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    uint64_t v17 = *(std::__shared_weak_count **)(v2 + 432);
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    AMSCore::URL::~URL((AMSCore::URL *)(v2 + 152));
    uint64_t v18 = *(std::__shared_weak_count **)(v2 + 400);
    if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    *(void *)(v2 + 464) = 0;
    *(void *)(v2 + 312) = v2 + 16;
    *(void *)uint64_t v2 = 0;
    return AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  AMSCore::URL *v2;
  AMSCore::URL ***v3;
  uint64_t v4;
  void (***v5)(uint64_t);
  char v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  AMSCore::URL *v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;

  uint64_t v1 = result;
  uint64_t v2 = (AMSCore::URL *)(result + 840);
  uint64_t v3 = (AMSCore::URL ***)(result + 1120);
  if (*(unsigned char *)(result + 1168))
  {
    int v4 = *(void *)(result + 1152);
    if (*(unsigned char *)(v4 + 88))
    {
      long long v5 = (void (***)(uint64_t))(result + 992);
      uint64_t v6 = *(unsigned char *)(v4 + 80);
      if (!v6)
      {
        std::runtime_error::runtime_error((std::runtime_error *)(result + 992), (const std::runtime_error *)(v4 + 8));
        *(_OWORD *)(v1 + 1008) = *(_OWORD *)(v4 + 24);
        *(void *)(v1 + 992) = &unk_1EDC827D8;
        uint64_t v7 = (void *)(v4 + 48);
        uint64_t v8 = *(void *)(v4 + 48);
        *(void *)(v1 + 1024) = *(void *)(v4 + 40);
        uint64_t v9 = v1 + 1032;
        *(void *)(v1 + 1032) = v8;
        uint64_t v10 = *(void *)(v4 + 56);
        *(void *)(v1 + 1040) = v10;
        if (v10)
        {
          *(void *)(v8 + 16) = v9;
          *(void *)(v4 + 40) = v7;
          char *v7 = 0;
          *(void *)(v4 + 56) = 0;
        }
        else
        {
          *(void *)(v1 + 1024) = v9;
        }
        uint64_t v17 = *(void *)(v1 + 1152);
        *(_OWORD *)(v1 + 1048) = *(_OWORD *)(v17 + 64);
        *(void *)(v17 + 64) = 0;
        *(void *)(v17 + 72) = 0;
      }
      *(unsigned char *)(v1 + 1064) = v6;
      uint64_t v18 = *(void *)(v1 + 1160);
      if (v18 && !atomic_fetch_add((atomic_ullong *volatile)(v18 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v19 = *(std::__shared_weak_count **)(v1 + 1160);
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      uint64_t v20 = *(std::__shared_weak_count **)(v1 + 1112);
      if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      AMSCore::URL::~URL((AMSCore::URL *)(v1 + 688));
      if (!*(unsigned char *)(v1 + 1064))
      {
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v30);
        AMSCore::Logger::log<char [39],AMSCore::Error>(v30, 4u, (uint64_t)"networking", 10, "Failed to open a finance URL. error = ", v1 + 992);
        uint64_t v21 = v31;
        if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
        if (!*(unsigned char *)(v1 + 1064)) {
          (**v5)(v1 + 992);
        }
      }
      LOBYTE(v30) = 0;
      size_t v32 = 0;
      uint64_t v33 = 0;
      int v34 = 0;
      int v35 = 0;
      std::string v36 = 0;
      char v37 = 0;
      long long v38 = 0;
      uint64_t v39 = 0;
      char v40 = 0;
      long long v41 = 0;
      uint64_t v42 = 0;
      char v43 = 0;
      int v44 = 0;
      uint64_t v45 = 0;
      uint64_t v46 = 0;
      uint64_t v47 = 0;
      long long v48 = 0;
      uint64_t v49 = 0;
      char v50 = 1;
      if (*(unsigned char *)(v1 + 488))
      {
        AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v1 + 24));
        *(unsigned char *)(v1 + 488) = 0;
      }
      AMSCore::HTTPResponseAction::HTTPResponseAction(v1 + 24, (uint64_t)&v30);
      *(unsigned char *)(v1 + 488) = 1;
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v30);
      AMSCore::URL::~URL(v2);
      uint64_t v22 = *(std::__shared_weak_count **)(v1 + 1096);
      if (!v22) {
        goto LABEL_47;
      }
      goto LABEL_45;
    }
LABEL_50:
    __break(1u);
    return result;
  }
  uint64_t v11 = *(void *)(result + 1136);
  if (!*(unsigned char *)(v11 + 88)) {
    goto LABEL_50;
  }
  uint64_t v12 = *(unsigned char *)(v11 + 80);
  if (!v12)
  {
    std::runtime_error::runtime_error((std::runtime_error *)(result + 840), (const std::runtime_error *)(v11 + 8));
    *(_OWORD *)(v1 + 856) = *(_OWORD *)(v11 + 24);
    *(void *)(v1 + 840) = &unk_1EDC827D8;
    int v13 = (void *)(v11 + 48);
    uint64_t v14 = *(void *)(v11 + 48);
    *(void *)(v1 + 872) = *(void *)(v11 + 40);
    uint64_t v15 = v1 + 880;
    *(void *)(v1 + 880) = v14;
    uint64_t v16 = *(void *)(v11 + 56);
    *(void *)(v1 + 888) = v16;
    if (v16)
    {
      *(void *)(v14 + 16) = v15;
      *(void *)(v11 + 40) = v13;
      char *v13 = 0;
      *(void *)(v11 + 56) = 0;
    }
    else
    {
      *(void *)(v1 + 872) = v15;
    }
    uint64_t v23 = *(void *)(v1 + 1136);
    *(_OWORD *)(v1 + 896) = *(_OWORD *)(v23 + 64);
    *(void *)(v23 + 64) = 0;
    *(void *)(v23 + 72) = 0;
  }
  *(unsigned char *)(v1 + 912) = v12;
  uint64_t v24 = *(void *)(v1 + 1144);
  if (v24 && !atomic_fetch_add((atomic_ullong *volatile)(v24 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v25 = *(std::__shared_weak_count **)(v1 + 1144);
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  uint64_t v26 = *(std::__shared_weak_count **)(v1 + 1000);
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  AMSCore::URL::~URL((AMSCore::URL *)(v1 + 536));
  if (!*(unsigned char *)(v1 + 912))
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v30);
    AMSCore::Logger::log<char [47],AMSCore::Error>(v30, (uint64_t)v2);
    uint64_t v27 = v31;
    if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    if (!*(unsigned char *)(v1 + 912)) {
      (**(void (***)(AMSCore::URL *))v2)(v2);
    }
  }
  LOBYTE(v30) = 0;
  size_t v32 = 0;
  uint64_t v33 = 0;
  int v34 = 0;
  int v35 = 0;
  std::string v36 = 0;
  char v37 = 0;
  long long v38 = 0;
  uint64_t v39 = 0;
  char v40 = 0;
  long long v41 = 0;
  uint64_t v42 = 0;
  char v43 = 0;
  int v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  long long v48 = 0;
  uint64_t v49 = 0;
  char v50 = 1;
  if (*(unsigned char *)(v1 + 488))
  {
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v1 + 24));
    *(unsigned char *)(v1 + 488) = 0;
  }
  AMSCore::HTTPResponseAction::HTTPResponseAction(v1 + 24, (uint64_t)&v30);
  *(unsigned char *)(v1 + 488) = 1;
  AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v30);
  uint64_t v22 = *(std::__shared_weak_count **)(v1 + 1096);
  if (!v22) {
    goto LABEL_47;
  }
LABEL_45:
  if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_47:
  int v28 = **v3;
  if (*((unsigned char *)v28 + 160))
  {
    AMSCore::URL::~URL(v28);
    *(unsigned char *)(v29 + 160) = 0;
  }
  *(void *)(v1 + 840) = v1 + 16;
  *(void *)uint64_t v1 = 0;
  return AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend((uint64_t)v2);
}

void AMSCore::anonymous namespace'::handleDeepLink(AMSCore::URL *this)
{
  uint64_t v2 = (AMSCore::URL *)((char *)this + 152);
  if (*(void *)this)
  {
    uint64_t v3 = *((void *)this + 57);
    if (v3 && !atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      int v4 = (std::__shared_weak_count *)*((void *)this + 57);
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    long long v5 = (std::__shared_weak_count *)*((void *)this + 52);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 54);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    AMSCore::URL::~URL(v2);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 50);
    if (v7)
    {
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      uint64_t v7 = 0;
    }
  }
  else
  {
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 58);
  }
  uint64_t v8 = (AMSCore::URL *)*((void *)this + 18);
  if (v8 == (AMSCore::URL *)((char *)this + 120))
  {
    (*(void (**)(char *))(*((void *)this + 15) + 32))((char *)this + 120);
    if (!*((unsigned char *)this + 104)) {
      goto LABEL_24;
    }
    goto LABEL_22;
  }
  if (v8) {
    (*(void (**)(AMSCore::URL *))(*(void *)v8 + 40))(v8);
  }
  if (*((unsigned char *)this + 104))
  {
LABEL_22:
    if (!*((unsigned char *)this + 96)) {
      (**((void (***)(void))this + 3))();
    }
  }
LABEL_24:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v9 = *((void *)this + 55);
  if (v9 && !atomic_fetch_add((atomic_ullong *volatile)(v9 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 55);
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  operator delete(this);
}

__n128 AMSCore::AccountsCategoryImpl::message@<Q0>(int a1@<W1>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 'd':
      *(unsigned char *)(a2 + 23) = 9;
      strcpy((char *)a2, "noAccount");
      break;
    case 'e':
      *(unsigned char *)(a2 + 23) = 20;
      *(_DWORD *)(a2 + 16) = 1684368489;
      int v4 = (__n128 *)"authenticationFailed";
      goto LABEL_10;
    case 'f':
      *(unsigned char *)(a2 + 23) = 17;
      result.n128_u64[0] = *(void *)"saveAccountFailed";
      strcpy((char *)a2, "saveAccountFailed");
      break;
    case 'g':
      uint64_t v6 = (char *)operator new(0x19uLL);
      *(void *)a2 = v6;
      *(_OWORD *)(a2 + 8) = xmmword_18DDE9B20;
      result.n128_u64[0] = *(void *)"fetchAccountImageFailed";
      strcpy(v6, "fetchAccountImageFailed");
      break;
    case 'h':
      *(unsigned char *)(a2 + 23) = 20;
      *(_DWORD *)(a2 + 16) = 1919906418;
      int v4 = (__n128 *)"underlyingAppleError";
LABEL_10:
      __n128 result = *v4;
      *(__n128 *)a2 = *v4;
      *(unsigned char *)(a2 + 20) = 0;
      break;
    case 'j':
      *(unsigned char *)(a2 + 23) = 15;
      strcpy((char *)a2, "mismatchAccount");
      break;
    case 'l':
      *(unsigned char *)(a2 + 23) = 19;
      result.n128_u64[0] = *(void *)"acceptPrivacyFailed";
      strcpy((char *)a2, "acceptPrivacyFailed");
      break;
    default:
      *(unsigned char *)(a2 + 23) = 7;
      strcpy((char *)a2, "unknown");
      break;
  }
  return result;
}

const char *AMSCore::AccountsCategoryImpl::name(AMSCore::AccountsCategoryImpl *this)
{
  return "ams.accounts";
}

void AMSCore::AccountsCategoryImpl::~AccountsCategoryImpl(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x192FA4080);
}

void AMSCore::BagCategoryImpl::message(int a1@<W1>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 200:
      *(unsigned char *)(a2 + 23) = 12;
      *(_DWORD *)(a2 + 8) = 1702194273;
      int v4 = "invalidValue";
      goto LABEL_7;
    case 202:
      *(unsigned char *)(a2 + 23) = 20;
      strcpy((char *)a2, "keyValueTypeMismatch");
      break;
    case 203:
      *(unsigned char *)(a2 + 23) = 10;
      strcpy((char *)a2, "loadFailed");
      break;
    case 204:
      *(unsigned char *)(a2 + 23) = 12;
      *(_DWORD *)(a2 + 8) = 1735289203;
      int v4 = "valueMissing";
LABEL_7:
      *(void *)a2 = *(void *)v4;
      *(unsigned char *)(a2 + 12) = 0;
      break;
    case 205:
      long long v5 = (char *)operator new(0x19uLL);
      *(void *)a2 = v5;
      *(_OWORD *)(a2 + 8) = xmmword_18DDE9B20;
      strcpy(v5, "createBagSnapshotFailed");
      break;
    default:
      *(unsigned char *)(a2 + 23) = 7;
      strcpy((char *)a2, "unknown");
      break;
  }
}

const char *AMSCore::BagCategoryImpl::name(AMSCore::BagCategoryImpl *this)
{
  return "ams.bag";
}

void AMSCore::BagCategoryImpl::~BagCategoryImpl(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x192FA4080);
}

void AMSCore::DataCategoryImpl::message(int a1@<W1>, char *a2@<X8>)
{
  switch(a1)
  {
    case 901:
      a2[23] = 14;
      strcpy(a2, "getValueFailed");
      break;
    case 902:
      a2[23] = 16;
      strcpy(a2, "dataTypeMismatch");
      break;
    case 903:
      a2[23] = 13;
      strcpy(a2, "databaseError");
      break;
    default:
      a2[23] = 15;
      strcpy(a2, "saveValueFailed");
      break;
  }
}

const char *AMSCore::DataCategoryImpl::name(AMSCore::DataCategoryImpl *this)
{
  return "data.error";
}

void AMSCore::DataCategoryImpl::~DataCategoryImpl(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x192FA4080);
}

void AMSCore::DialogCategoryImpl::message(int a1@<W1>, char *a2@<X8>)
{
  if (a1 == 701)
  {
    a2[23] = 15;
    strcpy(a2, "noDefaultAction");
  }
  else if (a1 == 700)
  {
    a2[23] = 13;
    strcpy(a2, "noUrlProvider");
  }
  else
  {
    a2[23] = 7;
    strcpy(a2, "unknown");
  }
}

const char *AMSCore::DialogCategoryImpl::name(AMSCore::DialogCategoryImpl *this)
{
  return "ams.dialog";
}

void AMSCore::DialogCategoryImpl::~DialogCategoryImpl(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x192FA4080);
}

void AMSCore::Error::makeFromCurrentException(AMSCore::Error *this)
{
  std::current_exception();
  v1.__ptr_ = &v2;
  std::rethrow_exception(v1);
  __break(1u);
}

void sub_18DABDB00(void *a1, std::exception_ptr a2, std::string *__what_arg, std::string *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::exception_ptr a10, void *__p, uint64_t __what_arg_8, int __what_arg_16, __int16 __what_arg_20, char __what_arg_22, char __what_arg_23, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__pa,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  int ptr = (int)a2.__ptr_;
  std::exception_ptr::~exception_ptr(&v53);
  if (ptr != 3)
  {
    uint64_t v49 = __cxa_begin_catch(a1);
    if (ptr == 2)
    {
      char v50 = (const char *)(*(uint64_t (**)(void *))(*(void *)v49 + 16))(v49);
      std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v55);
      size_t v51 = strlen(v50);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v55, (uint64_t)v50, v51);
      std::stringbuf::str[abi:fe180100]((uint64_t)&v55[0].__r_.__value_.__l.__size_, &v54);
      v55[0].__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA418];
      *(std::string::size_type *)((char *)v55[0].__r_.__value_.__r.__words
                                + *(void *)(v55[0].__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v55[0].__r_.__value_.__l.__size_ = MEMORY[0x1E4FBA470] + 16;
      if (v57 < 0) {
        operator delete(v56);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x192FA3FD0](&v58);
      v59.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
      *(void *)&v59.__val_ = 999;
      std::system_error::system_error((std::system_error *)v45, v59, &v54);
      if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_11;
      }
      long long v52 = (void *)v54.__r_.__value_.__r.__words[0];
    }
    else
    {
      AMSCore::StringUtils::join<char [31]>("An unknown exception occurred.", v55);
      v60.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
      *(void *)&v60.__val_ = 999;
      std::system_error::system_error((std::system_error *)v45, v60, v55);
      if ((SHIBYTE(v55[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_11:
        *(void *)uint64_t v45 = &unk_1EDC827D8;
        *(void *)(v45 + 48) = 0;
        *(void *)(v45 + 40) = 0;
        *(void *)(v45 + 32) = v45 + 40;
        *(void *)(v45 + 56) = 0;
        *(void *)(v45 + 64) = 0;
        goto LABEL_12;
      }
      long long v52 = (void *)v55[0].__r_.__value_.__r.__words[0];
    }
    operator delete(v52);
    goto LABEL_11;
  }
  long long v48 = (const std::runtime_error *)__cxa_begin_catch(a1);
  AMSCore::Error::Error((std::runtime_error *)v45, v48);
LABEL_12:
  __cxa_end_catch();
}

void sub_18DABDD1C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    __clang_call_terminate(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<char const*>(uint64_t a1, char *__s)
{
  char v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  size_t v5 = strlen(__s);
  uint64_t v6 = v2;
  do
  {
    while (1)
    {
      int v7 = *((char *)v3 + 55);
      uint64_t v8 = v7 >= 0 ? v3 + 4 : (uint64_t *)v3[4];
      size_t v9 = v7 >= 0 ? *((unsigned __int8 *)v3 + 55) : v3[5];
      size_t v10 = v5 >= v9 ? v9 : v5;
      int v11 = memcmp(v8, __s, v10);
      if (v11) {
        break;
      }
      if (v9 >= v5) {
        goto LABEL_17;
      }
LABEL_3:
      uint64_t v3 = (uint64_t *)v3[1];
      if (!v3) {
        goto LABEL_18;
      }
    }
    if (v11 < 0) {
      goto LABEL_3;
    }
LABEL_17:
    uint64_t v6 = v3;
    uint64_t v3 = (uint64_t *)*v3;
  }
  while (v3);
LABEL_18:
  if (v6 == v2) {
    return v2;
  }
  int v12 = *((char *)v6 + 55);
  if (v12 >= 0) {
    int v13 = v6 + 4;
  }
  else {
    int v13 = (const void *)v6[4];
  }
  if (v12 >= 0) {
    size_t v14 = *((unsigned __int8 *)v6 + 55);
  }
  else {
    size_t v14 = v6[5];
  }
  size_t v15 = strlen(__s);
  size_t v16 = v15;
  if (v15 >= v14) {
    size_t v17 = v14;
  }
  else {
    size_t v17 = v15;
  }
  int v18 = memcmp(v13, __s, v17);
  if (!v18)
  {
    if (v14 <= v16) {
      return v6;
    }
    return v2;
  }
  if ((v18 & 0x80000000) == 0) {
    return v2;
  }
  return v6;
}

__n128 AMSCore::FairPlayCategoryImpl::message@<Q0>(int a1@<W1>, uint64_t a2@<X8>, __n128 result@<Q0>)
{
  switch(a1)
  {
    case 601:
      size_t v10 = (char *)operator new(0x20uLL);
      *(void *)a2 = v10;
      *(_OWORD *)(a2 + 8) = xmmword_18DDE9B70;
      strcpy(v10, "mescalPrepareExchangeFailed");
      result.n128_u64[0] = *(void *)"reExchangeFailed";
      return result;
    case 602:
      *(unsigned char *)(a2 + 23) = 20;
      *(_DWORD *)(a2 + 16) = 1684368489;
      uint64_t v6 = (__n128 *)"mescalExchangeFailed";
      goto LABEL_28;
    case 603:
      *(unsigned char *)(a2 + 23) = 16;
      size_t v5 = (__n128 *)"mescalSignFailed";
      goto LABEL_21;
    case 604:
      *(unsigned char *)(a2 + 23) = 12;
      strcpy((char *)a2, "mescalFailed");
      return result;
    case 605:
      *(unsigned char *)(a2 + 23) = 15;
      strcpy((char *)a2, "getHWInfoFailed");
      return result;
    case 606:
      int v11 = (char *)operator new(0x20uLL);
      *(void *)a2 = v11;
      *(_OWORD *)(a2 + 8) = xmmword_18DDE9B60;
      strcpy(v11, "mescalFetchCertificateFailed");
      result.n128_u64[0] = *(void *)"ertificateFailed";
      return result;
    case 607:
      *(unsigned char *)(a2 + 23) = 17;
      result.n128_u64[0] = *(void *)"mescalResetFailed";
      strcpy((char *)a2, "mescalResetFailed");
      return result;
    case 608:
      int v12 = (char *)operator new(0x19uLL);
      *(void *)a2 = v12;
      long long v13 = xmmword_18DDE9B20;
      size_t v14 = "mescalSignPayloadFailed";
      goto LABEL_24;
    case 609:
      *(unsigned char *)(a2 + 23) = 19;
      result.n128_u64[0] = *(void *)"mescalSessionFailed";
      strcpy((char *)a2, "mescalSessionFailed");
      return result;
    case 610:
    case 611:
    case 612:
    case 613:
    case 614:
    case 615:
    case 616:
    case 617:
    case 618:
    case 619:
    case 620:
    case 621:
    case 622:
    case 623:
    case 624:
    case 625:
    case 626:
    case 627:
    case 628:
    case 629:
    case 630:
    case 631:
    case 632:
    case 633:
    case 634:
    case 635:
    case 636:
    case 637:
    case 638:
    case 639:
    case 640:
    case 641:
    case 642:
    case 643:
    case 644:
    case 645:
    case 646:
    case 647:
    case 648:
    case 649:
    case 658:
    case 659:
      __break(1u);
      JUMPOUT(0x18DABE394);
    case 650:
      *(unsigned char *)(a2 + 23) = 20;
      *(_DWORD *)(a2 + 16) = 1684370546;
      uint64_t v6 = (__n128 *)"anisetteNotSupported";
      goto LABEL_28;
    case 651:
      *(unsigned char *)(a2 + 23) = 20;
      *(_DWORD *)(a2 + 16) = 1684368489;
      uint64_t v6 = (__n128 *)"ADISynchronizeFailed";
      goto LABEL_28;
    case 652:
      int v7 = (char *)operator new(0x20uLL);
      *(void *)a2 = v7;
      long long v8 = xmmword_18DDE9B30;
      size_t v9 = "anisetteSyncMachineFailed";
      goto LABEL_18;
    case 653:
      int v7 = (char *)operator new(0x20uLL);
      *(void *)a2 = v7;
      long long v8 = xmmword_18DDE9B30;
      size_t v9 = "anisetteProvisioningErase";
      goto LABEL_18;
    case 654:
      int v12 = (char *)operator new(0x19uLL);
      *(void *)a2 = v12;
      long long v13 = xmmword_18DDE9B20;
      size_t v14 = "anisetteProvisioningEnd";
LABEL_24:
      *(_OWORD *)(a2 + 8) = v13;
      __n128 result = *(__n128 *)v14;
      *(_OWORD *)int v12 = *(_OWORD *)v14;
      *(void *)(v12 + 15) = *(void *)(v14 + 15);
      v12[23] = 0;
      return result;
    case 655:
      int v7 = (char *)operator new(0x20uLL);
      *(void *)a2 = v7;
      long long v8 = xmmword_18DDE9B30;
      size_t v9 = "anisetteDeviceSupportInfo";
      goto LABEL_18;
    case 656:
      *(unsigned char *)(a2 + 23) = 18;
      *(_WORD *)(a2 + 16) = 29811;
      size_t v15 = (__n128 *)"anisetteOTPRequest";
      goto LABEL_26;
    case 657:
      int v7 = (char *)operator new(0x20uLL);
      *(void *)a2 = v7;
      long long v8 = xmmword_18DDE9B30;
      size_t v9 = "anisetteProvisioningStart";
LABEL_18:
      *(_OWORD *)(a2 + 8) = v8;
      *(_OWORD *)int v7 = *(_OWORD *)v9;
      __n128 result = *(__n128 *)(v9 + 9);
      *(__n128 *)(v7 + 9) = result;
      v7[25] = 0;
      return result;
    case 660:
      *(unsigned char *)(a2 + 23) = 18;
      *(_WORD *)(a2 + 16) = 26465;
      size_t v15 = (__n128 *)"failedImportKeyBag";
LABEL_26:
      __n128 result = *v15;
      *(__n128 *)a2 = *v15;
      *(unsigned char *)(a2 + 18) = 0;
      return result;
    case 661:
      *(unsigned char *)(a2 + 23) = 20;
      *(_DWORD *)(a2 + 16) = 1635017028;
      uint64_t v6 = (__n128 *)"failedKeyBagSyncData";
LABEL_28:
      __n128 result = *v6;
      *(__n128 *)a2 = *v6;
      *(unsigned char *)(a2 + 20) = 0;
      return result;
    case 662:
      *(unsigned char *)(a2 + 23) = 16;
      size_t v5 = (__n128 *)"failedKeyBagInit";
      goto LABEL_21;
    case 663:
      size_t v16 = (char *)operator new(0x20uLL);
      *(void *)a2 = v16;
      *(_OWORD *)(a2 + 8) = xmmword_18DDE9B50;
      result.n128_u64[0] = *(void *)"failedKeyBagNotSupported";
      strcpy(v16, "failedKeyBagNotSupported");
      return result;
    default:
      *(unsigned char *)(a2 + 23) = 16;
      size_t v5 = (__n128 *)"mescalInitFailed";
LABEL_21:
      __n128 result = *v5;
      *(__n128 *)a2 = *v5;
      *(unsigned char *)(a2 + 16) = 0;
      return result;
  }
}

const char *AMSCore::FairPlayCategoryImpl::name(AMSCore::FairPlayCategoryImpl *this)
{
  return "ams.fairplay";
}

void AMSCore::FairPlayCategoryImpl::~FairPlayCategoryImpl(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x192FA4080);
}

void AMSCore::GenericCategoryImpl::message(int a1@<W1>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 0:
      *(unsigned char *)(a2 + 23) = 2;
      strcpy((char *)a2, "ok");
      return;
    case 1:
      *(unsigned char *)(a2 + 23) = 9;
      strcpy((char *)a2, "cancelled");
      return;
    case 2:
      *(unsigned char *)(a2 + 23) = 17;
      strcpy((char *)a2, "inconsistentState");
      return;
    case 3:
      *(unsigned char *)(a2 + 23) = 15;
      strcpy((char *)a2, "invalidArgument");
      return;
    case 4:
      *(unsigned char *)(a2 + 23) = 11;
      *(_DWORD *)(a2 + 7) = 1701869908;
      int v4 = "invalidType";
      goto LABEL_18;
    case 5:
      *(unsigned char *)(a2 + 23) = 5;
      strcpy((char *)a2, "noBag");
      return;
    case 6:
      *(unsigned char *)(a2 + 23) = 10;
      strcpy((char *)a2, "noProvider");
      return;
    case 7:
      *(unsigned char *)(a2 + 23) = 8;
      strcpy((char *)a2, "notFound");
      return;
    case 8:
      *(unsigned char *)(a2 + 23) = 12;
      *(_DWORD *)(a2 + 8) = 1684370546;
      size_t v5 = "notSupported";
      goto LABEL_16;
    case 9:
      *(unsigned char *)(a2 + 23) = 7;
      *(_DWORD *)a2 = 1701669236;
      int v3 = 1953853285;
      goto LABEL_22;
    case 10:
      *(unsigned char *)(a2 + 23) = 13;
      strcpy((char *)a2, "userCancelled");
      return;
    case 11:
      *(unsigned char *)(a2 + 23) = 19;
      strcpy((char *)a2, "failedToGetDeviceId");
      return;
    case 12:
      *(unsigned char *)(a2 + 23) = 12;
      *(_DWORD *)(a2 + 8) = 1735289203;
      size_t v5 = "valueMissing";
LABEL_16:
      *(void *)a2 = *(void *)v5;
      *(unsigned char *)(a2 + 12) = 0;
      return;
    case 13:
      *(unsigned char *)(a2 + 23) = 11;
      *(_DWORD *)(a2 + 7) = 2037542765;
      int v4 = "outOfMemory";
LABEL_18:
      *(void *)a2 = *(void *)v4;
      *(unsigned char *)(a2 + 11) = 0;
      return;
    case 14:
      *(unsigned char *)(a2 + 23) = 4;
      strcpy((char *)a2, "busy");
      return;
    case 15:
      *(unsigned char *)(a2 + 23) = 6;
      strcpy((char *)a2, "exists");
      return;
    case 16:
      *(unsigned char *)(a2 + 23) = 7;
      *(_DWORD *)a2 = 1917153129;
      int v3 = 1919906418;
      goto LABEL_22;
    default:
      *(unsigned char *)(a2 + 23) = 7;
      *(_DWORD *)a2 = 1852534389;
      int v3 = 1853321070;
LABEL_22:
      *(_DWORD *)(a2 + 3) = v3;
      *(unsigned char *)(a2 + 7) = 0;
      return;
  }
}

const char *AMSCore::GenericCategoryImpl::name(AMSCore::GenericCategoryImpl *this)
{
  return "ams.error";
}

void AMSCore::GenericCategoryImpl::~GenericCategoryImpl(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x192FA4080);
}

uint64_t AMSCore::make_error_code(uint64_t result)
{
  return result;
}

{
  return result;
}

double AMSCore::MetricsCategoryImpl::message@<D0>(int a1@<W1>, uint64_t a2@<X8>)
{
  if (a1 == 1002)
  {
    int v4 = (char *)operator new(0x20uLL);
    *(void *)a2 = v4;
    *(_OWORD *)(a2 + 8) = xmmword_18DDE9B50;
    double result = *(double *)"invalidMetricsIdentifier";
    strcpy(v4, "invalidMetricsIdentifier");
  }
  else if (a1 == 1001)
  {
    *(unsigned char *)(a2 + 23) = 14;
    strcpy((char *)a2, "metricsDbError");
  }
  else
  {
    *(unsigned char *)(a2 + 23) = 18;
    double result = *(double *)"enqueueEventFailed";
    strcpy((char *)a2, "enqueueEventFailed");
  }
  return result;
}

const char *AMSCore::MetricsCategoryImpl::name(AMSCore::MetricsCategoryImpl *this)
{
  return "ams.fairplay";
}

void AMSCore::MetricsCategoryImpl::~MetricsCategoryImpl(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x192FA4080);
}

void AMSCore::NetworkCategoryImpl::message(int a1@<W1>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 301:
      long long v8 = "invalidResponse";
      goto LABEL_14;
    case 302:
      *(unsigned char *)(a2 + 23) = 18;
      strcpy((char *)a2, "unknownContentType");
      return;
    case 303:
      *(unsigned char *)(a2 + 23) = 17;
      *(_WORD *)(a2 + 16) = 101;
      int v7 = "bodyNotObjectType";
      goto LABEL_10;
    case 304:
    case 307:
    case 308:
      __break(1u);
      JUMPOUT(0x18DABEB6CLL);
    case 305:
      *(unsigned char *)(a2 + 23) = 12;
      strcpy((char *)a2, "financeError");
      return;
    case 306:
      *(unsigned char *)(a2 + 23) = 13;
      strcpy((char *)a2, "maxRetryCount");
      return;
    case 309:
      *(unsigned char *)(a2 + 23) = 10;
      strcpy((char *)a2, "notTrusted");
      return;
    case 310:
      long long v8 = "failedToConnect";
LABEL_14:
      *(unsigned char *)(a2 + 23) = 15;
      *(void *)a2 = *(void *)v8;
      *(void *)(a2 + 7) = *(void *)(v8 + 7);
      *(unsigned char *)(a2 + 15) = 0;
      return;
    case 311:
      *(unsigned char *)(a2 + 23) = 11;
      strcpy((char *)a2, "invalidBody");
      return;
    case 312:
      int v4 = (char *)operator new(0x20uLL);
      *(void *)a2 = v4;
      long long v5 = xmmword_18DDE9B80;
      uint64_t v6 = "missingSignedActionHeaders";
      goto LABEL_5;
    case 313:
      size_t v9 = (char *)operator new(0x20uLL);
      *(void *)a2 = v9;
      *(_OWORD *)(a2 + 8) = xmmword_18DDE9B50;
      strcpy(v9, "missingSignedActionField");
      return;
    case 314:
      int v4 = (char *)operator new(0x20uLL);
      *(void *)a2 = v4;
      long long v5 = xmmword_18DDE9B80;
      uint64_t v6 = "missingRedirectHeaderValue";
LABEL_5:
      *(_OWORD *)(a2 + 8) = v5;
      *(_OWORD *)int v4 = *(_OWORD *)v6;
      *(_OWORD *)(v4 + 10) = *(_OWORD *)(v6 + 10);
      v4[26] = 0;
      break;
    case 315:
      *(unsigned char *)(a2 + 23) = 17;
      *(_WORD *)(a2 + 16) = 100;
      int v7 = "networkInitFailed";
LABEL_10:
      *(_OWORD *)a2 = *(_OWORD *)v7;
      break;
    default:
      *(unsigned char *)(a2 + 23) = 14;
      strcpy((char *)a2, "invalidRequest");
      break;
  }
}

const char *AMSCore::NetworkCategoryImpl::name(AMSCore::NetworkCategoryImpl *this)
{
  return "ams.network";
}

void AMSCore::NetworkCategoryImpl::~NetworkCategoryImpl(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x192FA4080);
}

void AMSCore::EraseProvisioningTask::perform(char *__p)
{
  char v2 = __p + 120;
  int v3 = (char *)*((void *)__p + 18);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  if (__p[104]) {
    BOOL v4 = __p[96] == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    (**((void (***)(void))__p + 3))();
  }
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (__p[216])
  {
    if (__p[215] < 0) {
      operator delete(*((void **)__p + 24));
    }
    if (__p[176] && __p[175] < 0) {
      operator delete(*((void **)__p + 19));
    }
  }
  operator delete(__p);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[27]>(uint64_t a1, unsigned int a2, const char *a3)
{
  uint64_t v4 = a2;
  AMSCore::StringUtils::join<char [27]>(&__what_arg, a3);
  *(void *)&v15.__val_ = v4;
  v15.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v9, v15, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  v9.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  size_t v10 = &v11;
  long long v13 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v9);
  *(std::error_code *)(a1 + 16) = v9.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v5 = v11;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = a1 + 40;
  uint64_t v7 = v12;
  *(void *)(a1 + 48) = v12;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    uint64_t v5 = 0;
    size_t v10 = &v11;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v6;
  }
  *(_OWORD *)(a1 + 56) = v13;
  long long v13 = 0uLL;
  v9.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v5);
  return MEMORY[0x192FA3C30](&v9);
}

void sub_18DABEE68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Logger::log<char [34]>(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= a2)
  {
    char v8 = a2;
    uint64_t v9 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v15);
    uint64_t v10 = *(void *)(v15[0] - 24);
    {
    }
    size_t v11 = strlen(a5);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v15, (uint64_t)a5, v11);
    uint64_t v12 = v15[6];
    long long v13 = (char *)v15 + *(void *)(v15[0] - 24);
    if ((v13[32] & 5) != 0)
    {
      uint64_t v14 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v13 + 5) + 32))(&rep);
      uint64_t v14 = v22;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v19 = v8;
    uint64_t v20 = v12;
    uint64_t v21 = v14;
    (*(void (**)(void, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v9 + 16) + 16))(*(void *)(v9 + 16), a3, a4, &rep);
    v15[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v15 + *(void *)(v15[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v15[1] = MEMORY[0x1E4FBA470] + 16;
    if (v16 < 0) {
      operator delete((void *)v15[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v17);
  }
  return result;
}

void sub_18DABF12C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::StringUtils::join<char [27]>(std::string *a1, const char *a2)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v6);
  size_t v4 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v6, (uint64_t)a2, v4);
  std::stringbuf::str[abi:fe180100]((uint64_t)v7, a1);
  uint64_t v6 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v7[-1] + *(void *)(v6 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v7[0] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FA3FD0](&v9);
}

void AMSCore::ProvisionTask::perform(uint64_t a1, uint64_t a2, void *a3, char a4, void *a5, void *a6)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  size_t v11 = operator new(0x7F0uLL);
  void *v11 = AMSCore::ProvisionTask::perform;
  v11[1] = AMSCore::ProvisionTask::perform;
  *((_OWORD *)v11 + 111) = *(_OWORD *)a2;
  v11[224] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *a3 = 0;
  a3[1] = 0;
  *((unsigned char *)v11 + 2025) = a4;
  uint64_t v12 = a5[1];
  v11[246] = *a5;
  v11[247] = v12;
  *a5 = 0;
  a5[1] = 0;
  uint64_t v13 = a6[1];
  v11[248] = *a6;
  v11[249] = v13;
  *a6 = 0;
  a6[1] = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *((unsigned char *)v11 + 24) = 0;
  *((unsigned char *)v11 + 104) = 0;
  v11[14] = 0;
  v11[18] = 0;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v14, (uint64_t)(v11 + 2));
}

void sub_18DAC1C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AMSCore::ProvisionTask::perform(uint64_t a1)
{
  char v2 = (std::runtime_error *)(a1 + 152);
  int v3 = (std::runtime_error *)(a1 + 576);
  size_t v4 = (std::runtime_error *)(a1 + 968);
  uint64_t v5 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 1360);
  uint64_t v6 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 1528);
  uint64_t v7 = (void **)(a1 + 1696);
  char v8 = (void **)(a1 + 1904);
  uint64_t v67 = a1 + 16;
  if (!*(unsigned char *)(a1 + 2024))
  {
    uint64_t v13 = *(void *)v6;
    if (!*(unsigned char *)(*(void *)v6 + 400)) {
      goto LABEL_111;
    }
    std::system_error v14 = (const std::runtime_error *)(v13 + 8);
    char v15 = *(unsigned char *)(v13 + 392);
    if (v15)
    {
      AMSCore::EncodeHTTPRequestTask::Options::Options(a1 + 968, (uint64_t)v14);
      uint64_t v16 = *(void *)(v13 + 376);
      uint64_t v17 = (void *)(v13 + 384);
      int v18 = (void *)(v13 + 376);
      *(void *)(a1 + 1336) = v16;
      char v19 = (void *)(a1 + 1344);
    }
    else
    {
      std::runtime_error::runtime_error((std::runtime_error *)(a1 + 968), v14);
      *(_OWORD *)(a1 + 984) = *(_OWORD *)(v13 + 24);
      *(void *)(a1 + 968) = &unk_1EDC827D8;
      size_t v32 = (void *)(v13 + 48);
      uint64_t v33 = *(void *)(v13 + 48);
      *(void *)(a1 + 1000) = *(void *)(v13 + 40);
      uint64_t v34 = a1 + 1008;
      *(void *)(a1 + 1008) = v33;
      uint64_t v35 = *(void *)(v13 + 56);
      *(void *)(a1 + 1016) = v35;
      if (v35)
      {
        *(void *)(v33 + 16) = v34;
        *(void *)(v13 + 40) = v32;
        *size_t v32 = 0;
        *(void *)(v13 + 56) = 0;
      }
      else
      {
        *(void *)(a1 + 1000) = v34;
      }
      uint64_t v41 = *(void *)(v13 + 64);
      int v18 = (void *)(v13 + 64);
      *(void *)(a1 + 1024) = v41;
      char v19 = (void *)(a1 + 1032);
      uint64_t v17 = v18 + 1;
    }
    void *v19 = *v17;
    *int v18 = 0;
    v18[1] = 0;
    *(unsigned char *)(a1 + 1352) = v15;
    uint64_t v42 = *(std::__shared_weak_count **)(a1 + 1536);
    if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
    char v43 = *(std::__shared_weak_count **)(a1 + 160);
    if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
    int v44 = *(std::__shared_weak_count **)(a1 + 1864);
    if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
    uint64_t v45 = *(std::__shared_weak_count **)(a1 + 1848);
    if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
      uint64_t v46 = *(std::__shared_weak_count **)(a1 + 1832);
      if (!v46) {
        goto LABEL_63;
      }
    }
    else
    {
      uint64_t v46 = *(std::__shared_weak_count **)(a1 + 1832);
      if (!v46) {
        goto LABEL_63;
      }
    }
    if (!atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
      if ((*(char *)(a1 + 1823) & 0x80000000) == 0)
      {
LABEL_64:
        if (*(unsigned char *)(a1 + 1352))
        {
LABEL_65:
          *(_OWORD *)(a1 + 1872) = *(_OWORD *)(a1 + 1968);
          *(_OWORD *)(a1 + 1888) = *(_OWORD *)(a1 + 1984);
          AMSCore::ExecuteHTTPRequestTask::OptionsBuilder::OptionsBuilder((uint64_t)v6, (long long *)(a1 + 1872), (long long *)(a1 + 1888));
          uint64_t v47 = *(std::__shared_weak_count **)(a1 + 1896);
          if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
          long long v48 = *(std::__shared_weak_count **)(a1 + 1880);
          if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
          char v49 = *(unsigned char *)(a1 + 1352);
          if (v49)
          {
            AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v3, (uint64_t)v4);
            char v50 = (void *)(a1 + 1336);
            *(void *)(a1 + 944) = *(void *)(a1 + 1336);
            size_t v51 = (void *)(a1 + 952);
            long long v52 = (void *)(a1 + 1344);
          }
          else
          {
            std::runtime_error::runtime_error(v3, v4);
            *(_OWORD *)(a1 + 592) = *(_OWORD *)(a1 + 984);
            *(void *)(a1 + 576) = &unk_1EDC827D8;
            *(void *)(a1 + 608) = *(void *)(a1 + 1000);
            uint64_t v56 = a1 + 616;
            uint64_t v57 = *(void *)(a1 + 1008);
            *(void *)(a1 + 616) = v57;
            uint64_t v58 = *(void *)(a1 + 1016);
            *(void *)(a1 + 624) = v58;
            if (v58)
            {
              *(void *)(v57 + 16) = v56;
              *(void *)(a1 + 1000) = a1 + 1008;
              *(void *)(a1 + 1008) = 0;
              *(void *)(a1 + 1016) = 0;
            }
            else
            {
              *(void *)(a1 + 608) = v56;
            }
            char v50 = (void *)(a1 + 1024);
            *(void *)(a1 + 632) = *(void *)(a1 + 1024);
            size_t v51 = (void *)(a1 + 640);
            long long v52 = (void *)(a1 + 1032);
          }
          void *v51 = *v52;
          *char v50 = 0;
          v50[1] = 0;
          *(unsigned char *)(a1 + 960) = v49;
          AMSCore::ExecuteHTTPRequestTask::Options::Options((uint64_t)v5, (uint64_t)v6);
          AMSCore::ExecuteHTTPRequestTask::perform(a1 + 1936, (uint64_t)v3, (uint64_t)v5);
        }
LABEL_77:
        std::runtime_error::runtime_error(&v74, v4);
        long long v75 = *(_OWORD *)(a1 + 984);
        std::exception_ptr v53 = *(unsigned int ***)(a1 + 1000);
        v74.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        uint64_t v54 = *(void *)(a1 + 1008);
        uint64_t v55 = *(void *)(a1 + 1016);
        std::runtime_error v76 = v53;
        v77 = (unsigned int *)v54;
        uint64_t v78 = v55;
        if (v55)
        {
          *(void *)(v54 + 16) = &v77;
          *(void *)(a1 + 1000) = a1 + 1008;
          *(void *)(a1 + 1008) = 0;
          *(void *)(a1 + 1016) = 0;
        }
        else
        {
          std::runtime_error v76 = &v77;
        }
        long long v79 = *(_OWORD *)(a1 + 1024);
        *(void *)(a1 + 1032) = 0;
        *(void *)(a1 + 1024) = 0;
        unsigned __int8 v80 = 1;
        AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v68, (uint64_t)&v74);
        if (*(unsigned char *)(a1 + 104))
        {
          if (!*(unsigned char *)(a1 + 96)) {
            (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
          }
          *(unsigned char *)(a1 + 104) = 0;
        }
        std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v68);
        long long v59 = v69;
        uint64_t v61 = v70;
        uint64_t v60 = v71;
        *(void *)(a1 + 64) = v71;
        uint64_t v62 = a1 + 64;
        *(_OWORD *)(a1 + 40) = v59;
        *(void *)(a1 + 24) = &unk_1EDC827D8;
        uint64_t v63 = v72;
        *(void *)(a1 + 56) = v61;
        *(void *)(a1 + 72) = v63;
        if (v63)
        {
          *(void *)(v60 + 16) = v62;
          uint64_t v70 = &v71;
          uint64_t v71 = 0;
          uint64_t v72 = 0;
          uint64_t v60 = 0;
        }
        else
        {
          *(void *)(a1 + 56) = v62;
        }
        *(_OWORD *)(a1 + 80) = v73;
        long long v73 = 0uLL;
        *(unsigned char *)(a1 + 96) = 0;
        *(unsigned char *)(a1 + 104) = 1;
        v68.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v70, (unsigned int *)v60);
        MEMORY[0x192FA3C30](&v68);
        if (v80)
        {
          v74.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
          int v64 = (std::__shared_weak_count *)*((void *)&v79 + 1);
          if (*((void *)&v79 + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v79 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v76, v77);
          MEMORY[0x192FA3C30](&v74);
        }
        uint64_t v29 = *(void *)(a1 + 1992);
        uint64_t v30 = *(void *)(a1 + 1976);
        if (*(unsigned char *)(a1 + 1352)) {
          goto LABEL_40;
        }
LABEL_95:
        ((void (*)(std::runtime_error *))v4->~runtime_error)(v4);
        goto LABEL_96;
      }
LABEL_76:
      operator delete(*(void **)(a1 + 1800));
      if (*(unsigned char *)(a1 + 1352)) {
        goto LABEL_65;
      }
      goto LABEL_77;
    }
LABEL_63:
    if ((*(char *)(a1 + 1823) & 0x80000000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_76;
  }
  uint64_t v9 = *(__n128 **)(a1 + 1920);
  if (!v9[27].n128_u8[0]) {
    goto LABEL_111;
  }
  uint64_t v10 = &v9->n128_u64[1];
  unsigned __int8 v11 = v9[26].n128_u8[8];
  if (v11)
  {
    *(__n128 *)(a1 + 152) = *(__n128 *)((char *)v9 + 8);
    unint64_t *v10 = 0;
    v9[1].n128_u64[0] = 0;
    AMSCore::ExecuteHTTPRequestTask::Options::Options(a1 + 168, (uint64_t)&v9[1].n128_i64[1]);
    __n128 v12 = v9[12];
    *(__n128 *)(a1 + 336) = v12;
    v9[12].n128_u64[0] = 0;
    v9[12].n128_u64[1] = 0;
  }
  else
  {
    __n128 v12 = std::__expected_base<AMSCore::HTTPResponse,AMSCore::HTTPError>::__union_t::__union_t[abi:fe180100]<AMSCore::HTTPError>(v2, (uint64_t)v10);
  }
  *(unsigned char *)(a1 + 568) = v11;
  uint64_t v20 = *(std::__shared_weak_count **)(a1 + 1928);
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *, __n128))v20->__on_zero_shared)(v20, v12);
    std::__shared_weak_count::__release_weak(v20);
  }
  uint64_t v21 = *(std::__shared_weak_count **)(a1 + 1944);
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *, __n128))v21->__on_zero_shared)(v21, v12);
    std::__shared_weak_count::__release_weak(v21);
  }
  AMSCore::ExecuteHTTPRequestTask::Options::~Options(v5);
  if (*(unsigned char *)(a1 + 960))
  {
    uint64_t v22 = *(std::__shared_weak_count **)(a1 + 952);
    if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v3->__vftable);
    if (*(unsigned char *)(a1 + 568)) {
      goto LABEL_20;
    }
LABEL_29:
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&>((uint64_t)&v74, v2);
    goto LABEL_31;
  }
  ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
  if (!*(unsigned char *)(a1 + 568)) {
    goto LABEL_29;
  }
LABEL_20:
  AMSCore::HTTPResponse::getDecodedObject(*(AMSCore::HTTPResponse **)(a1 + 336));
  if (*(unsigned char *)(v23 + 72))
  {
    if (*(unsigned char *)(a1 + 1768))
    {
      (*(void (**)(std::runtime_error *__return_ptr))(**(void **)(a1 + 1952) + 32))(&v74);
      if (*(unsigned char *)(a1 + 104))
      {
        if (!*(unsigned char *)(a1 + 96)) {
          (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
        }
        *(unsigned char *)(a1 + 104) = 0;
      }
      if (v80)
      {
        *(unsigned char *)(a1 + 96) = v80;
        *(unsigned char *)(a1 + 104) = 1;
      }
      else
      {
        std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v74);
        long long v36 = v75;
        long long v38 = v76;
        char v37 = v77;
        *(void *)(a1 + 64) = v77;
        uint64_t v39 = a1 + 64;
        *(_OWORD *)(a1 + 40) = v36;
        *(void *)(a1 + 24) = &unk_1EDC827D8;
        uint64_t v40 = v78;
        *(void *)(a1 + 56) = v38;
        *(void *)(a1 + 72) = v40;
        if (v40)
        {
          *((void *)v37 + 2) = v39;
          std::runtime_error v76 = &v77;
          v77 = 0;
          uint64_t v78 = 0;
        }
        else
        {
          *(void *)(a1 + 56) = v39;
        }
        *(_OWORD *)(a1 + 80) = v79;
        long long v79 = 0uLL;
        int v66 = v80;
        *(unsigned char *)(a1 + 96) = 0;
        *(unsigned char *)(a1 + 104) = 1;
        if (!v66) {
          ((void (*)(std::runtime_error *))v74.~runtime_error)(&v74);
        }
      }
      goto LABEL_39;
    }
LABEL_111:
    __break(1u);
    return;
  }
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&>((uint64_t)&v74, (const std::runtime_error *)v23);
LABEL_31:
  if (*(unsigned char *)(a1 + 104))
  {
    if (!*(unsigned char *)(a1 + 96)) {
      (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
    }
    *(unsigned char *)(a1 + 104) = 0;
  }
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v74);
  long long v24 = v75;
  uint64_t v26 = v76;
  uint64_t v25 = v77;
  *(void *)(a1 + 64) = v77;
  uint64_t v27 = a1 + 64;
  *(_OWORD *)(a1 + 40) = v24;
  *(void *)(a1 + 24) = &unk_1EDC827D8;
  uint64_t v28 = v78;
  *(void *)(a1 + 56) = v26;
  *(void *)(a1 + 72) = v28;
  if (v28)
  {
    *((void *)v25 + 2) = v27;
    std::runtime_error v76 = &v77;
    v77 = 0;
    uint64_t v78 = 0;
    uint64_t v25 = 0;
  }
  else
  {
    *(void *)(a1 + 56) = v27;
  }
  *(_OWORD *)(a1 + 80) = v79;
  long long v79 = 0uLL;
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 104) = 1;
  v74.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v76, v25);
  MEMORY[0x192FA3C30](&v74);
LABEL_39:
  std::__expected_base<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::__repr::__destroy_union_member[abi:fe180100]((uint64_t)v2);
  AMSCore::ExecuteHTTPRequestTask::Options::~Options(v6);
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  if (!*(unsigned char *)(a1 + 1352)) {
    goto LABEL_95;
  }
LABEL_40:
  uint64_t v31 = *(std::__shared_weak_count **)(a1 + 1344);
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v4->__vftable);
LABEL_96:
  if (!*(unsigned char *)(*(void *)(a1 + 1912) + 72)) {
    goto LABEL_111;
  }
  (*(void (**)(void))(*(void *)**v8 + 16))(**v8);
  if (*(unsigned char *)(a1 + 1768))
  {
    if (*(char *)(a1 + 1719) < 0) {
      operator delete(*v7);
    }
  }
  else
  {
    (*(void (**)(void **))*v7)(v7);
  }
  char v65 = *(std::__shared_weak_count **)(a1 + 1960);
  if (v65)
  {
    if (!atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  *(void *)(a1 + 2016) = 0;
  *(void *)(a1 + 2008) = v30;
  *(void *)(a1 + 2000) = v29;
  *(void *)(a1 + 152) = v67;
  *(void *)a1 = 0;
  AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v2);
}

void sub_18DAC2B78(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10)
{
  std::__expected_base<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::__repr::__destroy_union_member[abi:fe180100](v11);
  AMSCore::ExecuteHTTPRequestTask::Options::~Options(v15);
  std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::~expected[abi:fe180100](v14);
  _ZZN7AMSCore7finallyIZNS_13ProvisionTask7performENS_10DataBufferENSt3__110shared_ptrINS_13IMediaAccountEEENS_17IAnisetteProvider12AnisetteTypeENS4_INS_4IBagEEENS4_IKNS_11IBundleInfoEEEE3__0EEDaOT_EN7FinallyD1Ev(v13);
  std::expected<AMSCore::IAnisetteProvider::StartProvisioningResult,AMSCore::Error>::~expected[abi:fe180100](v12);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v10 + 1952);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DAC2BF4()
{
}

void AMSCore::ProvisionTask::perform(char *__p)
{
  if (*(void *)__p)
  {
    if (__p[2024])
    {
      char v2 = (std::__shared_weak_count *)*((void *)__p + 241);
      if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
      int v3 = (std::__shared_weak_count *)*((void *)__p + 243);
      if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
      AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(__p + 1360));
      if (__p[960])
      {
        size_t v4 = (std::__shared_weak_count *)*((void *)__p + 119);
        if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 72);
      }
      else
      {
        (**((void (***)(char *))__p + 72))(__p + 576);
      }
      AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(__p + 1528));
      if (__p[1352])
      {
        uint64_t v13 = (std::__shared_weak_count *)*((void *)__p + 168);
        if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 121);
      }
      else
      {
        (**((void (***)(char *))__p + 121))(__p + 968);
      }
      uint64_t v7 = 0;
      uint64_t v6 = 0;
    }
    else
    {
      char v8 = (std::__shared_weak_count *)*((void *)__p + 192);
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      uint64_t v9 = (std::__shared_weak_count *)*((void *)__p + 20);
      if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      uint64_t v10 = (std::__shared_weak_count *)*((void *)__p + 233);
      if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
      uint64_t v11 = (std::__shared_weak_count *)*((void *)__p + 231);
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      uint64_t v12 = (std::__shared_weak_count *)*((void *)__p + 229);
      if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      if (__p[1823] < 0) {
        operator delete(*((void **)__p + 225));
      }
      uint64_t v7 = (std::__shared_weak_count *)*((void *)__p + 249);
      uint64_t v6 = (std::__shared_weak_count *)*((void *)__p + 247);
    }
    if (!*(unsigned char *)(*((void *)__p + 239) + 72))
    {
      __break(1u);
      return;
    }
    (*(void (**)(void))(***((void ***)__p + 238) + 16))(**((void **)__p + 238));
    std::system_error v14 = (void **)(__p + 1696);
    if (__p[1768])
    {
      if (__p[1719] < 0) {
        operator delete(*v14);
      }
    }
    else
    {
      (*(void (**)(void **))*v14)(v14);
    }
    uint64_t v5 = (std::__shared_weak_count *)*((void *)__p + 245);
    if (v5)
    {
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = (std::__shared_weak_count *)*((void *)__p + 252);
    uint64_t v6 = (std::__shared_weak_count *)*((void *)__p + 251);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)__p + 250);
  }
  char v15 = (char *)*((void *)__p + 18);
  if (v15 == __p + 120)
  {
    (*(void (**)(char *))(*((void *)__p + 15) + 32))(__p + 120);
    if (!__p[104]) {
      goto LABEL_58;
    }
    goto LABEL_56;
  }
  if (v15) {
    (*(void (**)(char *))(*(void *)v15 + 40))(v15);
  }
  if (__p[104])
  {
LABEL_56:
    if (!__p[96]) {
      (**((void (***)(void))__p + 3))();
    }
  }
LABEL_58:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if ((__p[1799] & 0x80000000) == 0) {
      goto LABEL_70;
    }
    goto LABEL_69;
  }
  if (__p[1799] < 0) {
LABEL_69:
  }
    operator delete(*((void **)__p + 222));
LABEL_70:
  operator delete(__p);
}

std::string *std::__optional_destruct_base<AMSCore::AccountIdentity,false>::__optional_destruct_base[abi:fe180100]<AMSCore::AccountIdentity const&>(std::string *this, long long *a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__s.__data_[0] = 0;
  if (*((unsigned char *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v4 = *a2;
      this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  this[1].__r_.__value_.__l.__size_ = *((void *)a2 + 4);
  uint64_t v5 = (std::string *)((char *)this + 40);
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 40);
    this[2].__r_.__value_.__l.__size_ = *((void *)a2 + 7);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  this[2].__r_.__value_.__s.__data_[16] = 1;
  return this;
}

void sub_18DAC32E4(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

std::runtime_error *AMSCore::Task<void,AMSCore::Error>::ValuePromise::return_value<std::expected<void,AMSCore::Error>>(std::runtime_error *result, std::runtime_error *a2)
{
  uint64_t v3 = (uint64_t)result;
  p_char imp = (std::runtime_error *)&result->__imp_;
  if (LOBYTE(result[5].__imp_.__imp_))
  {
    if (!LOBYTE(result[5].__vftable)) {
      double result = (std::runtime_error *)((uint64_t (*)(std::__libcpp_refstring *))p_imp->~runtime_error)(&result->__imp_);
    }
    *(unsigned char *)(v3 + 88) = 0;
  }
  char imp = (char)a2[4].__imp_.__imp_;
  if (!imp)
  {
    double result = std::runtime_error::runtime_error(p_imp, a2);
    *(std::runtime_error *)(v3 + 24) = a2[1];
    long long v6 = (std::runtime_error_vtbl *)&a2[2].__imp_;
    uint64_t v7 = a2[2].__imp_.__imp_;
    *(void *)(v3 + 48) = v7;
    uint64_t v8 = v3 + 48;
    *(void *)(v3 + 8) = &unk_1EDC827D8;
    *(void *)(v3 + 40) = a2[2].__vftable;
    uint64_t v9 = a2[3].__vftable;
    *(void *)(v3 + 56) = v9;
    if (v9)
    {
      *((void *)v7 + 2) = v8;
      a2[2].__vftable = v6;
      v6->~runtime_error = 0;
      a2[3].__vftable = 0;
    }
    else
    {
      *(void *)(v3 + 40) = v8;
    }
    *(std::runtime_error *)(v3 + 64) = *(std::runtime_error *)((char *)a2 + 56);
    a2[3].__imp_.__imp_ = 0;
    a2[4].__vftable = 0;
  }
  *(unsigned char *)(v3 + 80) = imp;
  *(unsigned char *)(v3 + 88) = 1;
  return result;
}

void std::__expected_base<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::__repr::__destroy_union_member[abi:fe180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 416))
  {
    char v2 = *(std::__shared_weak_count **)(a1 + 192);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 16));
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    long long v4 = **(void (***)(void))a1;
    v4();
  }
}

void **_ZZN7AMSCore7finallyIZNS_13ProvisionTask7performENS_10DataBufferENSt3__110shared_ptrINS_13IMediaAccountEEENS_17IAnisetteProvider12AnisetteTypeENS4_INS_4IBagEEENS4_IKNS_11IBundleInfoEEEE3__0EEDaOT_EN7FinallyD1Ev(void **result)
{
  if (*((unsigned char *)result[1] + 72))
  {
    uint64_t v1 = result;
    (*(void (**)(void))(*(void *)**result + 16))(**result);
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::expected<AMSCore::IAnisetteProvider::StartProvisioningResult,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  else
  {
    (**(void (***)(uint64_t))a1)(a1);
  }
  return a1;
}

uint64_t AMSCore::anonymous namespace'::encodeFinishProvisioningRequest(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = result + 1224;
  uint64_t v3 = (std::runtime_error *)(result + 464);
  long long v4 = (void **)(result + 856);
  uint64_t v5 = (std::runtime_error *)(result + 1592);
  long long v6 = (void *)(result + 1960);
  if (!*(unsigned char *)(result + 2184))
  {
    uint64_t v13 = *(void *)(result + 2136);
    if (!*(unsigned char *)(v13 + 168)) {
      goto LABEL_79;
    }
    unsigned __int8 v14 = *(unsigned char *)(v13 + 160);
    std::__expected_base<AMSCore::URL,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::URL,AMSCore::Error>::__union_t>((std::runtime_error *)(result + 1592), v14, (std::runtime_error *)(v13 + 8));
    *(unsigned char *)(v1 + 1744) = v14;
    uint64_t v15 = *(void *)(v1 + 2144);
    if (v15 && !atomic_fetch_add((atomic_ullong *volatile)(v15 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v16 = *(std::__shared_weak_count **)(v1 + 2144);
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    uint64_t v17 = *(std::__shared_weak_count **)(v1 + 472);
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    int v18 = *(std::__shared_weak_count **)(v1 + 2064);
    if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if ((*(char *)(v1 + 2007) & 0x80000000) == 0)
      {
LABEL_15:
        if (*(unsigned char *)(v1 + 1744)) {
          goto LABEL_16;
        }
        goto LABEL_60;
      }
    }
    else if ((*(char *)(v1 + 2007) & 0x80000000) == 0)
    {
      goto LABEL_15;
    }
    operator delete(*(void **)(v1 + 1984));
    if (*(unsigned char *)(v1 + 1744))
    {
LABEL_16:
      *(unsigned char *)(v1 + 1752) = 0;
      *(unsigned char *)(v1 + 1776) = 0;
      if (*(unsigned char *)(v1 + 1616))
      {
        *(std::runtime_error *)(v1 + 1752) = *v5;
        *(void *)(v1 + 1768) = v5[1].__vftable;
        v5->__imp_.__imp_ = 0;
        v5[1].__vftable = 0;
        v5->__vftable = 0;
        *(unsigned char *)(v1 + 1776) = 1;
      }
      *(unsigned char *)(v1 + 1784) = 0;
      *(unsigned char *)(v1 + 1808) = 0;
      if (*(unsigned char *)(v1 + 1648))
      {
        *(void *)(v1 + 1800) = *(void *)(v1 + 1640);
        *(_OWORD *)(v1 + 1784) = *(_OWORD *)(v1 + 1624);
        *(void *)(v1 + 1640) = 0;
        *(void *)(v1 + 1624) = 0;
        *(void *)(v1 + 1632) = 0;
        *(unsigned char *)(v1 + 1808) = 1;
      }
      *(unsigned char *)(v1 + 1816) = 0;
      *(unsigned char *)(v1 + 1840) = 0;
      if (*(unsigned char *)(v1 + 1680))
      {
        *(void *)(v1 + 1832) = *(void *)(v1 + 1672);
        *(_OWORD *)(v1 + 1816) = *(_OWORD *)(v1 + 1656);
        *(void *)(v1 + 1672) = 0;
        *(void *)(v1 + 1656) = 0;
        *(void *)(v1 + 1664) = 0;
        *(unsigned char *)(v1 + 1840) = 1;
      }
      *(_DWORD *)(v1 + 1848) = *(_DWORD *)(v1 + 1688);
      *(void *)(v1 + 1856) = v1 + 1856;
      *(void *)(v1 + 1864) = v1 + 1856;
      *(void *)(v1 + 1872) = 0;
      uint64_t v19 = *(void *)(v1 + 1712);
      if (v19)
      {
        uint64_t v20 = *(uint64_t **)(v1 + 1704);
        uint64_t v21 = *(void *)(v1 + 1696);
        uint64_t v22 = *v20;
        *(void *)(v22 + 8) = *(void *)(v21 + 8);
        **(void **)(v21 + 8) = v22;
        uint64_t v23 = *(void *)(v1 + 1856);
        *(void *)(v23 + 8) = v20;
        *uint64_t v20 = v23;
        *(void *)(v1 + 1856) = v21;
        *(void *)(v21 + 8) = v1 + 1856;
        *(void *)(v1 + 1872) = v19;
        *(void *)(v1 + 1712) = 0;
      }
      *(void *)(v1 + 1896) = *(void *)(v1 + 1736);
      *(_OWORD *)(v1 + 1880) = *(_OWORD *)(v1 + 1720);
      *(void *)(v1 + 1736) = 0;
      *(void *)(v1 + 1720) = 0;
      *(void *)(v1 + 1728) = 0;
      long long v24 = *(_OWORD *)(v2 + 896);
      *(_OWORD *)(v2 + 816) = *(_OWORD *)(v2 + 880);
      *(_OWORD *)(v2 + 784) = v24;
      AMSCore::EncodeHTTPRequestTask::OptionsBuilder::OptionsBuilder(v2, (long long *)(v1 + 1752), (long long *)(v1 + 2040), (long long *)(v1 + 2008));
      uint64_t v25 = *(std::__shared_weak_count **)(v1 + 2016);
      if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
      uint64_t v26 = *(std::__shared_weak_count **)(v1 + 2048);
      if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
      uint64_t v27 = *(void *)(v1 + 2096);
      uint64_t v28 = *(void *)(v1 + 2088);
      AMSCore::URL::~URL((AMSCore::URL *)(v1 + 1752));
      *(void *)(v1 + 2024) = v28;
      *(void *)(v1 + 2032) = v27;
      if (v27) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)(v1 + 2096) + 8), 1uLL, memory_order_relaxed);
      }
      long long v29 = *(_OWORD *)(v2 + 800);
      *(void *)(v1 + 2024) = 0;
      *(void *)(v1 + 2032) = 0;
      uint64_t v30 = *(std::__shared_weak_count **)(v1 + 1232);
      *(_OWORD *)uint64_t v2 = v29;
      if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
      *(_DWORD *)(v1 + 1396) = 6;
      *(void *)(v1 + 1904) = *(void *)(v1 + 1960);
      uint64_t v31 = v1 + 1912;
      uint64_t v32 = *(void *)(v1 + 1968);
      *(void *)(v1 + 1912) = v32;
      uint64_t v33 = *(void *)(v1 + 1976);
      *(void *)(v1 + 1920) = v33;
      if (v33)
      {
        *(void *)(v32 + 16) = v31;
        void *v6 = v1 + 1968;
        *(void *)(v1 + 1968) = 0;
        *(void *)(v1 + 1976) = 0;
      }
      else
      {
        *(void *)(v1 + 1904) = v31;
      }
      *(_DWORD *)(v1 + 1928) = 8;
      AMSCore::Any::operator=(v1 + 1280, v1 + 1904);
      *(unsigned char *)(v1 + 1312) = 2;
      uint64_t v49 = *(unsigned int *)(v1 + 1928);
      if (v49 != -1) {
        ((void (*)(std::runtime_error *, uint64_t))off_1EDCA5910[v49])(v53, v1 + 1904);
      }
      *(_DWORD *)(v1 + 1928) = -1;
      char v50 = *(std::__shared_weak_count **)(v1 + 2032);
      if (v50 && !atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
      AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v4, v2);
      AMSCore::EncodeHTTPRequestTask::perform(v1 + 2072, (uint64_t)v4);
    }
LABEL_60:
    std::runtime_error::runtime_error(v53, v5);
    v53[1] = *(std::runtime_error *)(v1 + 1608);
    uint64_t v46 = *(unsigned int ***)(v1 + 1624);
    v53[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v47 = *(void *)(v1 + 1632);
    long long v48 = *(unsigned int **)(v1 + 1640);
    uint64_t v54 = v46;
    v55[0] = (unsigned int *)v47;
    v55[1] = v48;
    if (v48)
    {
      *(void *)(v47 + 16) = v55;
      *(void *)(v1 + 1624) = v1 + 1632;
      *(void *)(v1 + 1632) = 0;
      *(void *)(v1 + 1640) = 0;
    }
    else
    {
      uint64_t v54 = v55;
    }
    long long v56 = *(_OWORD *)(v1 + 1648);
    *(void *)(v1 + 1656) = 0;
    *(void *)(v1 + 1648) = 0;
    char v57 = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v58, (uint64_t)v53);
    std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((AMSCore::EncodeHTTPRequestTask::Options *)(v1 + 24), &v58);
    v58.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    size_t v51 = v60;
    if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v59, v59[1]);
    MEMORY[0x192FA3C30](&v58);
    if (v57)
    {
      v53[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      long long v52 = (std::__shared_weak_count *)*((void *)&v56 + 1);
      if (*((void *)&v56 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v56 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v54, v55[0]);
      MEMORY[0x192FA3C30](v53);
    }
    uint64_t v44 = *(void *)(v1 + 2128);
    uint64_t v45 = *(void *)(v1 + 2112);
    goto LABEL_54;
  }
  uint64_t v7 = *(void *)(result + 2152);
  if (!*(unsigned char *)(v7 + 400))
  {
LABEL_79:
    __break(1u);
    return result;
  }
  uint64_t v8 = (const std::runtime_error *)(v7 + 8);
  char v9 = *(unsigned char *)(v7 + 392);
  if (v9)
  {
    AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v3, (uint64_t)v8);
    uint64_t v10 = (void *)(v7 + 376);
    *(void *)(v1 + 832) = *(void *)(v7 + 376);
    uint64_t v11 = (void *)(v1 + 840);
    uint64_t v12 = (void *)(v7 + 384);
  }
  else
  {
    std::runtime_error::runtime_error(v3, v8);
    *(_OWORD *)(v1 + 480) = *(_OWORD *)(v7 + 24);
    *(void *)(v1 + 464) = &unk_1EDC827D8;
    uint64_t v34 = (void *)(v7 + 48);
    uint64_t v35 = *(void *)(v7 + 48);
    uint64_t v36 = v1 + 504;
    *(void *)(v1 + 496) = *(void *)(v7 + 40);
    *(void *)(v1 + 504) = v35;
    uint64_t v37 = *(void *)(v7 + 56);
    *(void *)(v1 + 512) = v37;
    if (v37)
    {
      *(void *)(v35 + 16) = v36;
      *(void *)(v7 + 40) = v34;
      *uint64_t v34 = 0;
      *(void *)(v7 + 56) = 0;
    }
    else
    {
      *(void *)(v1 + 496) = v36;
    }
    uint64_t v38 = *(void *)(v1 + 2152);
    uint64_t v39 = *(void *)(v38 + 64);
    uint64_t v10 = (void *)(v38 + 64);
    *(void *)(v1 + 520) = v39;
    uint64_t v11 = (void *)(v1 + 528);
    uint64_t v12 = v10 + 1;
  }
  void *v11 = *v12;
  void *v10 = 0;
  v10[1] = 0;
  *(unsigned char *)(v1 + 848) = v9;
  std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>,void>((std::runtime_error *)(v1 + 24), v3);
  if (*(unsigned char *)(v1 + 848))
  {
    uint64_t v40 = *(std::__shared_weak_count **)(v1 + 840);
    if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v3->__vftable);
    uint64_t v41 = *(void *)(v1 + 2160);
    if (!v41) {
      goto LABEL_50;
    }
    goto LABEL_48;
  }
  ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
  uint64_t v41 = *(void *)(v1 + 2160);
  if (v41)
  {
LABEL_48:
    if (!atomic_fetch_add((atomic_ullong *volatile)(v41 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v42 = *(std::__shared_weak_count **)(v1 + 2160);
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
LABEL_50:
  char v43 = *(std::__shared_weak_count **)(v1 + 2080);
  if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
  }
  AMSCore::EncodeHTTPRequestTask::Options::~Options(v4);
  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)v2);
  uint64_t v44 = 0;
  uint64_t v45 = 0;
LABEL_54:
  if (*(unsigned char *)(v1 + 1744)) {
    AMSCore::URL::~URL((AMSCore::URL *)v5);
  }
  else {
    ((void (*)(std::runtime_error *))v5->~runtime_error)(v5);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v6, *(unsigned int **)(v1 + 1968));
  *(void *)(v1 + 2176) = v45;
  *(void *)(v1 + 2168) = v44;
  *(void *)(v1 + 464) = v1 + 16;
  *(void *)uint64_t v1 = 0;
  return AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v3);
}

void AMSCore::anonymous namespace'::encodeFinishProvisioningRequest(char *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 16);
  if (*(void *)a1)
  {
    if (a1[2184])
    {
      uint64_t v3 = *((void *)a1 + 270);
      if (v3 && !atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        long long v4 = (std::__shared_weak_count *)*((void *)a1 + 270);
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      uint64_t v5 = (std::__shared_weak_count *)*((void *)a1 + 260);
      if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)a1 + 107);
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)a1 + 153);
      if (a1[1744]) {
        AMSCore::URL::~URL((AMSCore::URL *)(a1 + 1592));
      }
      else {
        (**((void (***)(uint64_t))a1 + 199))((uint64_t)(a1 + 1592));
      }
      uint64_t v7 = 0;
      long long v6 = 0;
      goto LABEL_25;
    }
    uint64_t v8 = *((void *)a1 + 268);
    if (v8 && !atomic_fetch_add((atomic_ullong *volatile)(v8 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      char v9 = (std::__shared_weak_count *)*((void *)a1 + 268);
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    uint64_t v10 = (std::__shared_weak_count *)*((void *)a1 + 59);
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    uint64_t v11 = (std::__shared_weak_count *)*((void *)a1 + 258);
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if ((a1[2007] & 0x80000000) == 0) {
        goto LABEL_22;
      }
    }
    else if ((a1[2007] & 0x80000000) == 0)
    {
LABEL_22:
      uint64_t v7 = (std::__shared_weak_count *)*((void *)a1 + 266);
      long long v6 = (std::__shared_weak_count *)*((void *)a1 + 264);
LABEL_25:
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)(a1 + 1960), *((unsigned int **)a1 + 246));
      goto LABEL_26;
    }
    operator delete(*((void **)a1 + 248));
    goto LABEL_22;
  }
  long long v6 = (std::__shared_weak_count *)*((void *)a1 + 272);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)a1 + 271);
LABEL_26:
  AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::~Promise(v2);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v12 = *((void *)a1 + 262);
  if (!v12 || atomic_fetch_add((atomic_ullong *volatile)(v12 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((a1[1959] & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  uint64_t v13 = (std::__shared_weak_count *)*((void *)a1 + 262);
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (a1[1959] < 0) {
LABEL_35:
  }
    operator delete(*((void **)a1 + 242));
LABEL_36:
  operator delete(a1);
}

void AMSCore::SyncMachineTask::internal::performImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = (char *)operator new(0xCB0uLL);
  *(void *)uint64_t v12 = AMSCore::SyncMachineTask::internal::performImpl;
  *((void *)v12 + 1) = AMSCore::SyncMachineTask::internal::performImpl;
  *((_OWORD *)v12 + 187) = *(_OWORD *)a2;
  *((void *)v12 + 376) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  v12[2896] = 0;
  v12[2920] = 0;
  if (*(unsigned char *)(a3 + 24))
  {
    *((_OWORD *)v12 + 181) = *(_OWORD *)a3;
    *((void *)v12 + 364) = *(void *)(a3 + 16);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    v12[2920] = 1;
  }
  *((void *)v12 + 366) = *(void *)(a3 + 32);
  *(_OWORD *)(v12 + 2936) = *(_OWORD *)(a3 + 40);
  *((void *)v12 + 369) = *(void *)(a3 + 56);
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  uint64_t v13 = a5[1];
  *((void *)v12 + 394) = *a5;
  *((void *)v12 + 395) = v13;
  *a5 = 0;
  a5[1] = 0;
  uint64_t v14 = a6[1];
  *((void *)v12 + 396) = *a6;
  *((void *)v12 + 397) = v14;
  *a6 = 0;
  a6[1] = 0;
  *a7 = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  v12[24] = 0;
  v12[104] = 0;
  *((void *)v12 + 14) = 0;
  *((void *)v12 + 18) = 0;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v15, (uint64_t)(v12 + 16));
}

void sub_18DAC6848(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20)
{
  if (a2)
  {
    std::__expected_base<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::__repr::__destroy_union_member[abi:fe180100](a18);
    AMSCore::ExecuteHTTPRequestTask::Options::~Options(v23);
    std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::~expected[abi:fe180100](v22);
    AMSCore::EncodeHTTPRequestTask::Options::~Options(a19);
    std::expected<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](v21);
    std::expected<AMSCore::URL,AMSCore::Error>::~expected[abi:fe180100](v20);
    std::expected<std::map<std::string,AMSCore::Any>,AMSCore::Error>::~expected[abi:fe180100](a20);
    __cxa_begin_catch(a1);
    AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
  }
  _Unwind_Resume(a1);
}

uint64_t AMSCore::SyncMachineTask::internal::performImpl(uint64_t a1)
{
  uint64_t v131 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::runtime_error *)(a1 + 152);
  long long v4 = (void **)(a1 + 968);
  uint64_t v5 = (atomic_ullong *)(a1 + 2088);
  long long v6 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 2256);
  v110 = (AMSCore::URL *)(a1 + 2424);
  v111 = (AMSCore::EncodeHTTPRequestTask::Options *)(a1 + 1352);
  v109 = (void *)(a1 + 2736);
  v112 = (std::runtime_error *)(a1 + 2816);
  v113 = (std::runtime_error *)(a1 + 576);
  uint64_t v7 = (long long *)(a1 + 16);
  int v8 = *(unsigned __int8 *)(a1 + 3240);
  if (v8 == 2)
  {
    uint64_t v1 = *(std::__shared_weak_count **)(a1 + 3120);
    shared_weak_owners_low = (unsigned int **)LOBYTE(v1[18].__vftable);
    if (!LOBYTE(v1[18].__vftable)) {
      goto LABEL_128;
    }
    p_char shared_owners = &v1->__shared_owners_;
    char shared_weak_owners = v1[17].__shared_weak_owners_;
    if (shared_weak_owners)
    {
      *(_OWORD *)(a1 + 152) = *(_OWORD *)&v1->__shared_owners_;
      *p_char shared_owners = 0;
      v1->__shared_weak_owners_ = 0;
      AMSCore::ExecuteHTTPRequestTask::Options::Options(a1 + 168, (uint64_t)&v1[1]);
      __n128 v62 = (__n128)v1[8].std::__shared_count;
      *(__n128 *)(a1 + 336) = v62;
      v1[8].__vftable = 0;
      v1[8].__shared_owners_ = 0;
    }
    else
    {
      __n128 v62 = std::__expected_base<AMSCore::HTTPResponse,AMSCore::HTTPError>::__union_t::__union_t[abi:fe180100]<AMSCore::HTTPError>(v3, (uint64_t)p_shared_owners);
    }
    *(unsigned char *)(a1 + 568) = shared_weak_owners;
    uint64_t v63 = *(std::__shared_weak_count **)(a1 + 3128);
    if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, __n128))v63->__on_zero_shared)(v63, v62);
      std::__shared_weak_count::__release_weak(v63);
    }
    int v64 = *(std::__shared_weak_count **)(a1 + 3144);
    if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, __n128))v64->__on_zero_shared)(v64, v62);
      std::__shared_weak_count::__release_weak(v64);
    }
    AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)v5);
    uint64_t v5 = *(atomic_ullong **)(a1 + 1344);
    if (v5 && !atomic_fetch_add(v5 + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(atomic_ullong *))(*v5 + 16))(v5);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v5);
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options(v4);
    if (!*(unsigned char *)(a1 + 568))
    {
      std::__optional_destruct_base<AMSCore::HTTPError,false>::__optional_destruct_base[abi:fe180100]<AMSCore::HTTPError>(&v115, (uint64_t)v3);
      if (v122)
      {
        AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v125, (uint64_t)&v115);
        if (*(unsigned char *)(a1 + 104))
        {
          if (!*(unsigned char *)(a1 + 96)) {
            (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
          }
          *(unsigned char *)(a1 + 104) = 0;
        }
        std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v125);
        long long v74 = v126;
        std::runtime_error v76 = v127;
        uint64_t v75 = v128;
        *(void *)(a1 + 64) = v128;
        uint64_t v77 = a1 + 64;
        *(_OWORD *)(a1 + 40) = v74;
        *(void *)(a1 + 24) = &unk_1EDC827D8;
        *(void *)(a1 + 56) = v76;
        uint64_t v78 = v129;
        *(void *)(a1 + 72) = v129;
        if (v78)
        {
          *(void *)(v75 + 16) = v77;
          v127 = &v128;
          uint64_t v128 = 0;
          uint64_t v129 = 0;
          uint64_t v75 = 0;
        }
        else
        {
          *(void *)(a1 + 56) = v77;
        }
        *(_OWORD *)(a1 + 80) = v130;
        long long v130 = 0uLL;
        *(unsigned char *)(a1 + 96) = 0;
        *(unsigned char *)(a1 + 104) = 1;
        v125.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v127, (unsigned int *)v75);
        MEMORY[0x192FA3C30](&v125);
        if (v122) {
          AMSCore::HTTPError::~HTTPError((AMSCore::HTTPError *)&v115);
        }
LABEL_175:
        std::__expected_base<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::__repr::__destroy_union_member[abi:fe180100]((uint64_t)v3);
        AMSCore::ExecuteHTTPRequestTask::Options::~Options(v6);
        uint64_t v93 = 0;
        uint64_t v94 = 0;
        if (!*(unsigned char *)(a1 + 960))
        {
LABEL_143:
          ((void (*)(std::runtime_error *))v113->~runtime_error)(v113);
LABEL_180:
          AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)v111);
          goto LABEL_181;
        }
LABEL_176:
        v102 = *(std::__shared_weak_count **)(a1 + 952);
        if (v102 && !atomic_fetch_add(&v102->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
        }
        AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v113->__vftable);
        goto LABEL_180;
      }
      shared_weak_owners_low = (unsigned int **)*(unsigned __int8 *)(a1 + 568);
      if (!*(unsigned char *)(a1 + 568)) {
        goto LABEL_128;
      }
    }
    char v65 = *(unsigned __int16 **)(a1 + 336);
    uint64_t v66 = v65[76];
    if ((v66 - 200) >= 0x64)
    {
      BYTE7(v126) = 8;
      *((void *)&v126 + 1) = v66;
      LODWORD(v129) = 3;
      v124[1] = 0;
      strcpy((char *)&v125, "httpCode");
      v123 = v124;
      v124[0] = 0;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v123, (uint64_t *)v124, (const void **)&v125.__vftable, (long long *)&v125);
      AMSCore::Unexpected<AMSCore::Error,AMSCore::NetworkErrorCode,std::map<std::string,AMSCore::Any>,char const(&)[16]>((uint64_t)&v115, 0x12Du, &v123);
      if (*(unsigned char *)(a1 + 104))
      {
        if (!*(unsigned char *)(a1 + 96)) {
          (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
        }
        *(unsigned char *)(a1 + 104) = 0;
      }
      std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v115);
      long long v69 = v116;
      uint64_t v71 = v117;
      uint64_t v70 = v118;
      *(void *)(a1 + 64) = v118;
      uint64_t v72 = a1 + 64;
      *(_OWORD *)(a1 + 40) = v69;
      *(void *)(a1 + 24) = &unk_1EDC827D8;
      uint64_t v73 = v119;
      *(void *)(a1 + 56) = v71;
      *(void *)(a1 + 72) = v73;
      if (v73)
      {
        *((void *)v70 + 2) = v72;
        v117 = &v118;
        v118 = 0;
        uint64_t v119 = 0;
        uint64_t v70 = 0;
      }
      else
      {
        *(void *)(a1 + 56) = v72;
      }
      *(_OWORD *)(a1 + 80) = v120;
      long long v120 = 0uLL;
      *(unsigned char *)(a1 + 96) = 0;
      *(unsigned char *)(a1 + 104) = 1;
      v115.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v117, v70);
      MEMORY[0x192FA3C30](&v115);
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v123, v124[0]);
      if (v129 != -1) {
        ((void (*)(char *, char *))off_1EDCA5960[v129])(&v114, (char *)&v126 + 8);
      }
      LODWORD(v129) = -1;
      if (SBYTE7(v126) < 0) {
        operator delete(v125.__vftable);
      }
    }
    else
    {
      AMSCore::HTTPResponse::getDecodedObject((AMSCore::HTTPResponse *)v65);
      if (*(unsigned char *)(v67 + 72))
      {
        AMSCore::getValueByKey<std::string,std::map<std::string,AMSCore::Any> const>((uint64_t)&v115, v67, "syncState", 9uLL);
        if (v121)
        {
          if (SHIBYTE(v115.what) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v125, (const std::string::value_type *)v115.~runtime_error, (std::string::size_type)v115.~runtime_error_0);
          }
          else
          {
            std::runtime_error v68 = *(std::runtime_error *)&v115.~runtime_error;
            *(void *)&long long v126 = v115.what;
            std::runtime_error v125 = v68;
          }
        }
        else
        {
          BYTE7(v126) = 4;
          strcpy((char *)&v125, "None");
        }
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v123);
        AMSCore::Logger::log<char [32],std::string>((uint64_t)v123, 2u, (uint64_t)"fairplay", 8, "Sync with server: syncState == ", (uint64_t)&v125);
        v101 = (std::__shared_weak_count *)v124[0];
        if (v124[0] && !atomic_fetch_add((atomic_ullong *volatile)v124[0] + 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
          std::__shared_weak_count::__release_weak(v101);
        }
        if (SBYTE7(v126) < 0) {
          operator delete(v125.__vftable);
        }
        if (*(unsigned char *)(a1 + 104) && !*(unsigned char *)(a1 + 96))
        {
          (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
          *(unsigned char *)(a1 + 104) = 0;
        }
        *(unsigned char *)(a1 + 96) = 1;
        *(unsigned char *)(a1 + 104) = 1;
        if (!v121) {
          ((void (*)(std::runtime_error *))v115.~runtime_error)(&v115);
        }
      }
      else
      {
        AMSCore::Unexpected<AMSCore::Error,AMSCore::NetworkErrorCode,char const(&)[32],AMSCore::Error const&>((uint64_t)&v115, 0x137u, v67);
        if (*(unsigned char *)(a1 + 104))
        {
          if (!*(unsigned char *)(a1 + 96)) {
            (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
          }
          *(unsigned char *)(a1 + 104) = 0;
        }
        std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v115);
        long long v82 = v116;
        std::runtime_error v84 = v117;
        std::runtime_error v83 = v118;
        *(void *)(a1 + 64) = v118;
        uint64_t v85 = a1 + 64;
        *(_OWORD *)(a1 + 40) = v82;
        *(void *)(a1 + 24) = &unk_1EDC827D8;
        uint64_t v86 = v119;
        *(void *)(a1 + 56) = v84;
        *(void *)(a1 + 72) = v86;
        if (v86)
        {
          *((void *)v83 + 2) = v85;
          v117 = &v118;
          v118 = 0;
          uint64_t v119 = 0;
          std::runtime_error v83 = 0;
        }
        else
        {
          *(void *)(a1 + 56) = v85;
        }
        *(_OWORD *)(a1 + 80) = v120;
        long long v120 = 0uLL;
        *(unsigned char *)(a1 + 96) = 0;
        *(unsigned char *)(a1 + 104) = 1;
        v115.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v117, v83);
        MEMORY[0x192FA3C30](&v115);
      }
    }
    goto LABEL_175;
  }
  v108 = (long long *)(a1 + 16);
  if (v8 == 1)
  {
    uint64_t v42 = a1 + 2256;
    uint64_t v43 = *(void *)(a1 + 3200);
    shared_weak_owners_low = (unsigned int **)*(unsigned __int8 *)(v43 + 400);
    if (*(unsigned char *)(v43 + 400))
    {
      uint64_t v44 = (const std::runtime_error *)(v43 + 8);
      char v45 = *(unsigned char *)(v43 + 392);
      if (v45)
      {
        AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v113, (uint64_t)v44);
        uint64_t v46 = (void *)(v43 + 376);
        *(void *)(a1 + 944) = *(void *)(v43 + 376);
        uint64_t v47 = (void *)(a1 + 952);
        long long v48 = (void *)(v43 + 384);
      }
      else
      {
        std::runtime_error::runtime_error(v113, v44);
        *(_OWORD *)(a1 + 592) = *(_OWORD *)(v43 + 24);
        *(void *)(a1 + 576) = &unk_1EDC827D8;
        uint64_t v49 = (void *)(v43 + 48);
        uint64_t v50 = *(void *)(v43 + 48);
        *(void *)(a1 + 608) = *(void *)(v43 + 40);
        uint64_t v51 = a1 + 616;
        *(void *)(a1 + 616) = v50;
        uint64_t v52 = *(void *)(v43 + 56);
        *(void *)(a1 + 624) = v52;
        if (v52)
        {
          *(void *)(v50 + 16) = v51;
          *(void *)(v43 + 40) = v49;
          *uint64_t v49 = 0;
          *(void *)(v43 + 56) = 0;
        }
        else
        {
          *(void *)(a1 + 608) = v51;
        }
        uint64_t v53 = *(void *)(a1 + 3200);
        uint64_t v54 = *(void *)(v53 + 64);
        uint64_t v46 = (void *)(v53 + 64);
        *(void *)(a1 + 632) = v54;
        uint64_t v47 = (void *)(a1 + 640);
        long long v48 = v46 + 1;
      }
      *uint64_t v47 = *v48;
      void *v46 = 0;
      v46[1] = 0;
      *(unsigned char *)(a1 + 960) = v45;
      uint64_t v55 = *(void *)(a1 + 3208);
      if (v55 && !atomic_fetch_add((atomic_ullong *volatile)(v55 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        long long v56 = *(std::__shared_weak_count **)(a1 + 3208);
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
      char v57 = *(std::__shared_weak_count **)(a1 + 160);
      if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
      uint64_t v7 = (long long *)(a1 + 632);
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)(a1 + 1720));
      if (!*(unsigned char *)(a1 + 960))
      {
        uint64_t v1 = (std::__shared_weak_count *)&v115;
        std::runtime_error::runtime_error(&v115, v113);
        long long v116 = *(_OWORD *)(a1 + 592);
        uint64_t v5 = (atomic_ullong *)&unk_1EDC827D8;
        long long v79 = *(unsigned int ***)(a1 + 608);
        v115.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        shared_weak_owners_low = &v118;
        uint64_t v80 = *(void *)(a1 + 616);
        uint64_t v81 = *(void *)(a1 + 624);
        v117 = v79;
        v118 = (unsigned int *)v80;
        uint64_t v119 = v81;
        if (v81)
        {
          *(void *)(v80 + 16) = &v118;
          *(void *)(a1 + 608) = a1 + 616;
          *(void *)(a1 + 616) = 0;
          *(void *)(a1 + 624) = 0;
          goto LABEL_130;
        }
LABEL_129:
        v117 = shared_weak_owners_low;
LABEL_130:
        long long v120 = *v7;
        *(void *)uint64_t v7 = 0;
        *((void *)v7 + 1) = 0;
        char v121 = 1;
        AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v125, (uint64_t)&v115);
        uint64_t v7 = v108;
        if (*(unsigned char *)(a1 + 104))
        {
          if (!*(unsigned char *)(a1 + 96)) {
            (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
          }
          *(unsigned char *)(a1 + 104) = 0;
        }
        std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v125);
        long long v87 = v126;
        std::string v89 = v127;
        uint64_t v88 = v128;
        *(void *)(a1 + 64) = v128;
        uint64_t v90 = a1 + 64;
        *(_OWORD *)(a1 + 40) = v87;
        *(void *)(a1 + 24) = &unk_1EDC827D8;
        *(void *)(a1 + 56) = v89;
        uint64_t v91 = v129;
        *(void *)(a1 + 72) = v129;
        if (v91)
        {
          *(void *)(v88 + 16) = v90;
          v127 = &v128;
          uint64_t v128 = 0;
          uint64_t v129 = 0;
          uint64_t v88 = 0;
        }
        else
        {
          *(void *)(a1 + 56) = v90;
        }
        *(_OWORD *)(a1 + 80) = v130;
        long long v130 = 0uLL;
        *(unsigned char *)(a1 + 96) = 0;
        *(unsigned char *)(a1 + 104) = 1;
        v125.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v127, (unsigned int *)v88);
        MEMORY[0x192FA3C30](&v125);
        if (v121)
        {
          v115.__vftable = (std::runtime_error_vtbl *)v5;
          v92 = (std::__shared_weak_count *)*((void *)&v120 + 1);
          if (*((void *)&v120 + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v120 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v1[1].__shared_owners_, v118);
          MEMORY[0x192FA3C30](&v115);
        }
        uint64_t v93 = *(void *)(a1 + 3176);
        uint64_t v94 = *(void *)(a1 + 3160);
        if (!*(unsigned char *)(a1 + 960)) {
          goto LABEL_143;
        }
        goto LABEL_176;
      }
      uint64_t v1 = (std::__shared_weak_count *)(a1 + 3072);
      *(_OWORD *)(a1 + 3072) = *(_OWORD *)(a1 + 3152);
      *(_OWORD *)(a1 + 3088) = *(_OWORD *)(a1 + 3168);
      AMSCore::ExecuteHTTPRequestTask::OptionsBuilder::OptionsBuilder(v42, (long long *)(a1 + 3072), (long long *)(a1 + 3088));
      std::runtime_error v58 = *(std::__shared_weak_count **)(a1 + 3096);
      if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
      long long v59 = *(std::__shared_weak_count **)(a1 + 3080);
      if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
      shared_weak_owners_low = (unsigned int **)*(unsigned __int8 *)(a1 + 960);
      if (*(unsigned char *)(a1 + 960))
      {
        AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v4, (uint64_t)v113);
        *(_OWORD *)(a1 + 1336) = *(_OWORD *)(a1 + 944);
        *(void *)(a1 + 952) = 0;
        *(void *)(a1 + 944) = 0;
        AMSCore::ExecuteHTTPRequestTask::Options::Options((uint64_t)v5, v42);
        AMSCore::ExecuteHTTPRequestTask::perform(a1 + 3136, (uint64_t)v4, (uint64_t)v5);
      }
    }
LABEL_128:
    __break(1u);
    goto LABEL_129;
  }
  uint64_t v7 = (long long *)(a1 + 2584);
  v105 = (void *)(a1 + 2960);
  char v9 = (std::runtime_error_vtbl **)(a1 + 3104);
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 3184);
  shared_weak_owners_low = (unsigned int **)LOBYTE(v1[3].__shared_weak_owners_);
  if (!LOBYTE(v1[3].__shared_weak_owners_)) {
    goto LABEL_128;
  }
  v106 = (long long *)(a1 + 3056);
  uint64_t v107 = a1 + 152;
  uint64_t v11 = (const std::runtime_error *)&v1->__shared_owners_;
  char shared_owners = v1[3].__shared_owners_;
  if (shared_owners)
  {
    uint64_t v13 = v11->__vftable;
    v11->__vftable = 0;
    v112->__vftable = v13;
  }
  else
  {
    std::runtime_error::runtime_error(v112, v11);
    *(std::__shared_count *)(a1 + 2832) = v1[1].std::__shared_count;
    *(void *)(a1 + 2816) = &unk_1EDC827D8;
    uint64_t v14 = &v1[2].__vftable;
    std::string v15 = v1[2].__vftable;
    *(void *)(a1 + 2848) = v1[1].__shared_weak_owners_;
    uint64_t v16 = (void (__cdecl *)(std::__shared_count *__hidden))(a1 + 2856);
    *(void *)(a1 + 2856) = v15;
    uint64_t v17 = v1[2].__shared_owners_;
    *(void *)(a1 + 2864) = v17;
    if (v17)
    {
      v15->__on_zero_shared = v16;
      v1[1].__shared_weak_owners_ = (uint64_t)v14;
      *uint64_t v14 = 0;
      v1[2].__shared_owners_ = 0;
    }
    else
    {
      *(void *)(a1 + 2848) = v16;
    }
    uint64_t v18 = *(void *)(a1 + 3184);
    *((_OWORD *)v111 + 95) = *(_OWORD *)(v18 + 64);
    *(void *)(v18 + 64) = 0;
    *(void *)(v18 + 72) = 0;
  }
  *(unsigned char *)(a1 + 2888) = shared_owners;
  uint64_t v19 = *(void *)(a1 + 3192);
  if (v19 && !atomic_fetch_add((atomic_ullong *volatile)(v19 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v20 = *(std::__shared_weak_count **)(a1 + 3192);
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  uint64_t v21 = *(std::__shared_weak_count **)(a1 + 584);
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    if ((*(char *)(a1 + 3039) & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (*(char *)(a1 + 3039) < 0) {
LABEL_16:
  }
    operator delete(*(void **)(a1 + 3016));
LABEL_17:
  uint64_t v22 = *(std::__shared_weak_count **)(a1 + 160);
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    if (*(unsigned char *)(a1 + 2888))
    {
LABEL_20:
      shared_weak_owners_low = (unsigned int **)*(unsigned __int8 *)(a1 + 2576);
      uint64_t v3 = (std::runtime_error *)v107;
      if (*(unsigned char *)(a1 + 2576))
      {
        *(unsigned char *)(a1 + 2584) = 0;
        *(unsigned char *)(a1 + 2608) = 0;
        if (*(unsigned char *)(a1 + 2448))
        {
          long long *v7 = *(_OWORD *)v110;
          *(void *)(a1 + 2600) = *((void *)v110 + 2);
          *((void *)v110 + 1) = 0;
          *((void *)v110 + 2) = 0;
          *(void *)v110 = 0;
          *(unsigned char *)(a1 + 2608) = 1;
        }
        *(unsigned char *)(a1 + 2616) = 0;
        *(unsigned char *)(a1 + 2640) = 0;
        if (*(unsigned char *)(a1 + 2480))
        {
          *(void *)(a1 + 2632) = *(void *)(a1 + 2472);
          *(_OWORD *)(a1 + 2616) = *(_OWORD *)(a1 + 2456);
          *(void *)(a1 + 2472) = 0;
          *(void *)(a1 + 2456) = 0;
          *(void *)(a1 + 2464) = 0;
          *(unsigned char *)(a1 + 2640) = 1;
        }
        *(unsigned char *)(a1 + 2648) = 0;
        *(unsigned char *)(a1 + 2672) = 0;
        if (*(unsigned char *)(a1 + 2512))
        {
          *(void *)(a1 + 2664) = *(void *)(a1 + 2504);
          *(_OWORD *)(a1 + 2648) = *(_OWORD *)(a1 + 2488);
          *(void *)(a1 + 2504) = 0;
          *(void *)(a1 + 2488) = 0;
          *(void *)(a1 + 2496) = 0;
          *(unsigned char *)(a1 + 2672) = 1;
        }
        *(_DWORD *)(a1 + 2680) = *(_DWORD *)(a1 + 2520);
        *(void *)(a1 + 2688) = a1 + 2688;
        *(void *)(a1 + 2696) = a1 + 2688;
        *(void *)(a1 + 2704) = 0;
        uint64_t v23 = *(void *)(a1 + 2544);
        if (v23)
        {
          long long v24 = *(uint64_t **)(a1 + 2536);
          uint64_t v25 = *(void *)(a1 + 2528);
          uint64_t v26 = *v24;
          *(void *)(v26 + 8) = *(void *)(v25 + 8);
          **(void **)(v25 + 8) = v26;
          uint64_t v27 = *(void *)(a1 + 2688);
          *(void *)(v27 + 8) = v24;
          *long long v24 = v27;
          *(void *)(a1 + 2688) = v25;
          *(void *)(v25 + 8) = a1 + 2688;
          *(void *)(a1 + 2704) = v23;
          *(void *)(a1 + 2544) = 0;
        }
        uint64_t v28 = *(void *)(a1 + 3160);
        uint64_t v29 = *(void *)(a1 + 3152);
        *(void *)(a1 + 2728) = *(void *)(a1 + 2568);
        *(_OWORD *)(a1 + 2712) = *(_OWORD *)(a1 + 2552);
        *(void *)(a1 + 2568) = 0;
        *(void *)(a1 + 2560) = 0;
        *(void *)(a1 + 2552) = 0;
        *(void *)(a1 + 3056) = v29;
        *(void *)(a1 + 3064) = v28;
        if (v28) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v30 = *(void *)(a1 + 3176);
        *(void *)(a1 + 3040) = *(void *)(a1 + 3168);
        *(void *)(a1 + 3048) = v30;
        if (v30) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
        }
        AMSCore::EncodeHTTPRequestTask::OptionsBuilder::OptionsBuilder((uint64_t)v111, (long long *)(a1 + 2584), v106, (long long *)(a1 + 3040));
        uint64_t v31 = *(std::__shared_weak_count **)(a1 + 3048);
        if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
        uint64_t v1 = *(std::__shared_weak_count **)(a1 + 3064);
        if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
          std::__shared_weak_count::__release_weak(v1);
        }
        AMSCore::URL::~URL((AMSCore::URL *)(a1 + 2584));
        shared_weak_owners_low = (unsigned int **)*(unsigned __int8 *)(a1 + 2888);
        if (*(unsigned char *)(a1 + 2888))
        {
          uint64_t v32 = v112->__vftable;
          std::__shared_weak_count *v9 = v112->__vftable;
          if (v32) {
            operator new();
          }
          *(void *)(a1 + 3112) = 0;
          *(void *)(a1 + 2816) = 0;
          long long v36 = *(_OWORD *)(a1 + 3104);
          std::__shared_weak_count *v9 = 0;
          *(void *)(a1 + 3112) = 0;
          uint64_t v1 = *(std::__shared_weak_count **)(a1 + 1360);
          *(_OWORD *)v111 = v36;
          if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
            std::__shared_weak_count::__release_weak(v1);
          }
          shared_weak_owners_low = (unsigned int **)*(unsigned __int8 *)(a1 + 2808);
          if (*(unsigned char *)(a1 + 2808))
          {
            *(void *)(a1 + 2960) = *(void *)(a1 + 2736);
            uint64_t v37 = a1 + 2968;
            uint64_t v38 = *(void *)(a1 + 2744);
            *(void *)(a1 + 2968) = v38;
            uint64_t v39 = *(void *)(a1 + 2752);
            *(void *)(a1 + 2976) = v39;
            if (v39)
            {
              *(void *)(v38 + 16) = v37;
              void *v109 = a1 + 2744;
              *(void *)(a1 + 2744) = 0;
              *(void *)(a1 + 2752) = 0;
            }
            else
            {
              void *v105 = v37;
            }
            *(_DWORD *)(a1 + 2984) = 8;
            AMSCore::Any::operator=(a1 + 1408, (uint64_t)v105);
            *(unsigned char *)(a1 + 1440) = 2;
            *(_DWORD *)(a1 + 1524) = 6;
            uint64_t v40 = *(unsigned int *)(a1 + 2984);
            if (v40 != -1) {
              ((void (*)(std::runtime_error *, void *))off_1EDCA5960[v40])(&v115, v105);
            }
            *(_DWORD *)(a1 + 2984) = -1;
            uint64_t v41 = *(std::__shared_weak_count **)(a1 + 3112);
            if (v41)
            {
              if (!atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                std::__shared_weak_count::__release_weak(v41);
              }
            }
            AMSCore::EncodeHTTPRequestTask::Options::Options(a1 + 1720, (uint64_t)v111);
            AMSCore::EncodeHTTPRequestTask::perform(v107, a1 + 1720);
          }
        }
      }
      goto LABEL_128;
    }
  }
  else if (*(unsigned char *)(a1 + 2888))
  {
    goto LABEL_20;
  }
  std::runtime_error::runtime_error(&v115, v112);
  long long v116 = *(_OWORD *)(a1 + 2832);
  uint64_t v33 = *(unsigned int ***)(a1 + 2848);
  v115.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  uint64_t v34 = *(void *)(a1 + 2856);
  uint64_t v35 = *(void *)(a1 + 2864);
  v117 = v33;
  v118 = (unsigned int *)v34;
  uint64_t v119 = v35;
  uint64_t v3 = (std::runtime_error *)v107;
  if (v35)
  {
    *(void *)(v34 + 16) = &v118;
    *(void *)(a1 + 2848) = a1 + 2856;
    *(void *)(a1 + 2856) = 0;
    *(void *)(a1 + 2864) = 0;
  }
  else
  {
    v117 = &v118;
  }
  uint64_t v7 = v108;
  long long v120 = *((_OWORD *)v111 + 95);
  *((_OWORD *)v111 + 95) = 0u;
  char v121 = 1;
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v125, (uint64_t)&v115);
  if (*(unsigned char *)(a1 + 104))
  {
    if (!*(unsigned char *)(a1 + 96)) {
      (**(void (***)(void))(a1 + 24))();
    }
    *(unsigned char *)(a1 + 104) = 0;
  }
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v125);
  long long v95 = v126;
  v97 = v127;
  uint64_t v96 = v128;
  *(void *)(a1 + 64) = v128;
  uint64_t v98 = a1 + 64;
  *(_OWORD *)(a1 + 40) = v95;
  *(void *)(a1 + 24) = &unk_1EDC827D8;
  *(void *)(a1 + 56) = v97;
  uint64_t v99 = v129;
  *(void *)(a1 + 72) = v129;
  if (v99)
  {
    *(void *)(v96 + 16) = v98;
    v127 = &v128;
    uint64_t v128 = 0;
    uint64_t v129 = 0;
    uint64_t v96 = 0;
  }
  else
  {
    *(void *)(a1 + 56) = v98;
  }
  *(_OWORD *)(a1 + 80) = v130;
  long long v130 = 0uLL;
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 104) = 1;
  v125.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v127, (unsigned int *)v96);
  MEMORY[0x192FA3C30](&v125);
  if (v121)
  {
    v115.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    v100 = (std::__shared_weak_count *)*((void *)&v120 + 1);
    if (*((void *)&v120 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v120 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v117, v118);
    MEMORY[0x192FA3C30](&v115);
  }
  uint64_t v93 = *(void *)(a1 + 3176);
  uint64_t v94 = *(void *)(a1 + 3160);
LABEL_181:
  uint64_t v103 = *(void *)(a1 + 2816);
  if (!*(unsigned char *)(a1 + 2888))
  {
    (**(void (***)(void))(a1 + 2816))();
    if (*(unsigned char *)(a1 + 2576)) {
      goto LABEL_185;
    }
LABEL_188:
    (**(void (***)(AMSCore::URL *))v110)(v110);
    if (*(unsigned char *)(a1 + 2808)) {
      goto LABEL_186;
    }
LABEL_189:
    (*(void (**)(void *))*v109)(v109);
    goto LABEL_190;
  }
  v112->__vftable = 0;
  if (v103) {
    (*(void (**)(uint64_t))(*(void *)v103 + 8))(v103);
  }
  if (!*(unsigned char *)(a1 + 2576)) {
    goto LABEL_188;
  }
LABEL_185:
  AMSCore::URL::~URL(v110);
  if (!*(unsigned char *)(a1 + 2808)) {
    goto LABEL_189;
  }
LABEL_186:
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v109, *(unsigned int **)(a1 + 2744));
LABEL_190:
  *(void *)(a1 + 3232) = v94;
  *(void *)(a1 + 3224) = v93;
  *(void *)(a1 + 3216) = 0;
  *(void *)(a1 + 152) = v7;
  *(void *)a1 = 0;
  return AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v3);
}

void sub_18DAC800C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, AMSCore::URL *a16, void **a17, uint64_t *a18, AMSCore::EncodeHTTPRequestTask::Options *a19, uint64_t a20,void (**a21)(void),uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (a2)
  {
    if (!a30) {
      (*a21)(&a21);
    }
    std::__expected_base<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::__repr::__destroy_union_member[abi:fe180100](v31);
    AMSCore::ExecuteHTTPRequestTask::Options::~Options(v30);
    std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::~expected[abi:fe180100](a19);
    AMSCore::EncodeHTTPRequestTask::Options::~Options(a17);
    std::expected<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](a18);
    std::expected<AMSCore::URL,AMSCore::Error>::~expected[abi:fe180100](a16);
    std::expected<std::map<std::string,AMSCore::Any>,AMSCore::Error>::~expected[abi:fe180100](a15);
    __cxa_begin_catch(exception_object);
    AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::SyncMachineTask::internal::performImpl(char *__p)
{
  if (!*(void *)__p)
  {
    uint64_t v7 = (std::__shared_weak_count *)*((void *)__p + 404);
    long long v6 = (std::__shared_weak_count *)*((void *)__p + 403);
    uint64_t v8 = *((void *)__p + 402);
    goto LABEL_50;
  }
  uint64_t v2 = (void (***)(char *))(__p + 2424);
  if (__p[3240])
  {
    if (__p[3240] == 1)
    {
      uint64_t v3 = *((void *)__p + 401);
      if (v3 && !atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        long long v4 = (std::__shared_weak_count *)*((void *)__p + 401);
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      uint64_t v5 = (std::__shared_weak_count *)*((void *)__p + 20);
      if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 215);
      long long v6 = (std::__shared_weak_count *)*((void *)__p + 397);
      uint64_t v7 = (std::__shared_weak_count *)*((void *)__p + 395);
    }
    else
    {
      uint64_t v13 = (std::__shared_weak_count *)*((void *)__p + 391);
      if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      uint64_t v14 = (std::__shared_weak_count *)*((void *)__p + 393);
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(__p + 2088));
      std::string v15 = (std::__shared_weak_count *)*((void *)__p + 168);
      if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 121);
      AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(__p + 2256));
      if (__p[960])
      {
        uint64_t v16 = (std::__shared_weak_count *)*((void *)__p + 119);
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 72);
      }
      else
      {
        (**((void (***)(char *))__p + 72))(__p + 576);
      }
      long long v6 = 0;
      uint64_t v7 = 0;
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 169);
    uint64_t v17 = *((void *)__p + 352);
    if (__p[2888])
    {
      *((void *)__p + 352) = 0;
      if (v17) {
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      }
    }
    else
    {
      (*(void (**)(char *))v17)(__p + 2816);
    }
  }
  else
  {
    uint64_t v9 = *((void *)__p + 399);
    if (v9 && !atomic_fetch_add((atomic_ullong *volatile)(v9 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v10 = (std::__shared_weak_count *)*((void *)__p + 399);
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    uint64_t v11 = (std::__shared_weak_count *)*((void *)__p + 73);
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    if (__p[3039] < 0) {
      operator delete(*((void **)__p + 377));
    }
    uint64_t v12 = (std::__shared_weak_count *)*((void *)__p + 20);
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    long long v6 = (std::__shared_weak_count *)*((void *)__p + 397);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)__p + 395);
  }
  if (!__p[2576])
  {
    (**v2)(__p + 2424);
    if (__p[2808]) {
      goto LABEL_46;
    }
LABEL_48:
    (**((void (***)(char *))__p + 342))(__p + 2736);
    goto LABEL_49;
  }
  AMSCore::URL::~URL((AMSCore::URL *)(__p + 2424));
  if (!__p[2808]) {
    goto LABEL_48;
  }
LABEL_46:
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)(__p + 2736), *((unsigned int **)__p + 343));
LABEL_49:
  uint64_t v8 = 0;
LABEL_50:
  uint64_t v18 = (char *)*((void *)__p + 18);
  if (v18 == __p + 120)
  {
    (*(void (**)(char *))(*((void *)__p + 15) + 32))(__p + 120);
    if (!__p[104]) {
      goto LABEL_58;
    }
    goto LABEL_56;
  }
  if (v18) {
    (*(void (**)(char *))(*(void *)v18 + 40))(v18);
  }
  if (__p[104])
  {
LABEL_56:
    if (!__p[96]) {
      (**((void (***)(void))__p + 3))();
    }
  }
LABEL_58:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if ((__p[2959] & 0x80000000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  if (__p[2959] < 0) {
LABEL_68:
  }
    operator delete(*((void **)__p + 367));
LABEL_69:
  if (__p[2920] && __p[2919] < 0) {
    operator delete(*((void **)__p + 362));
  }
  if (__p[3015] < 0) {
    operator delete(*((void **)__p + 374));
  }
  operator delete(__p);
}

uint64_t AMSCore::Logger::log<char [38]>(uint64_t result)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= 2u)
  {
    uint64_t v1 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v6);
    uint64_t v2 = *(void *)(v6[0] - 24);
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v6, (uint64_t)"running Anisette Sync Machine task...", 37);
    uint64_t v3 = v6[6];
    long long v4 = (char *)v6 + *(void *)(v6[0] - 24);
    if ((v4[32] & 5) != 0)
    {
      uint64_t v5 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v4 + 5) + 32))(&rep);
      uint64_t v5 = v13;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v10 = 2;
    uint64_t v11 = v3;
    uint64_t v12 = v5;
    (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v1 + 16) + 16))(*(void *)(v1 + 16), "fairplay", 8, &rep);
    v6[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v6[1] = MEMORY[0x1E4FBA470] + 16;
    if (v7 < 0) {
      operator delete((void *)v6[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v8);
  }
  return result;
}

void sub_18DAC8AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::runtime_error *std::__optional_destruct_base<AMSCore::HTTPError,false>::__optional_destruct_base[abi:fe180100]<AMSCore::HTTPError>(std::runtime_error *a1, uint64_t a2)
{
  double result = std::runtime_error::runtime_error(a1, (const std::runtime_error *)a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA448] + 16);
  result[1] = *(std::runtime_error *)(a2 + 16);
  result->__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  result[2].__vftable = *(std::runtime_error_vtbl **)(a2 + 32);
  long long v4 = (void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 40);
  result[2].__imp_.__imp_ = (const char *)v5;
  p_char imp = (std::runtime_error_vtbl *)&result[2].__imp_;
  char v7 = *(std::runtime_error_vtbl **)(a2 + 48);
  result[3].__vftable = v7;
  if (v7)
  {
    *(void *)(v5 + 16) = p_imp;
    *(void *)(a2 + 32) = v4;
    void *v4 = 0;
    *(void *)(a2 + 48) = 0;
  }
  else
  {
    result[2].__vftable = p_imp;
  }
  *(std::runtime_error *)((char *)result + 56) = *(std::runtime_error *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  result->__vftable = (std::runtime_error_vtbl *)&unk_1EDC828C8;
  LOBYTE(result[4].__imp_.__imp_) = 0;
  LOBYTE(result[6].__vftable) = 0;
  if (*(unsigned char *)(a2 + 96))
  {
    long long v8 = *(_OWORD *)(a2 + 72);
    result[5].__imp_.__imp_ = *(const char **)(a2 + 88);
    *(_OWORD *)&result[4].__imp_.__imp_ = v8;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 88) = 0;
    *(void *)(a2 + 72) = 0;
    LOBYTE(result[6].__vftable) = 1;
  }
  long long v9 = *(_OWORD *)(a2 + 104);
  *(std::runtime_error *)((char *)result + 120) = *(std::runtime_error *)(a2 + 120);
  *(_OWORD *)&result[6].__imp_.__imp_ = v9;
  long long v10 = *(_OWORD *)(a2 + 136);
  long long v11 = *(_OWORD *)(a2 + 152);
  long long v12 = *(_OWORD *)(a2 + 168);
  *(std::runtime_error *)((char *)result + 177) = *(std::runtime_error *)(a2 + 177);
  *(_OWORD *)&result[10].__imp_.__imp_ = v12;
  *(_OWORD *)&result[9].__imp_.__imp_ = v11;
  *(_OWORD *)&result[8].__imp_.__imp_ = v10;
  result[13].__vftable = 0;
  result[13].__imp_.__imp_ = 0;
  result[12].__imp_.__imp_ = 0;
  *(std::runtime_error *)((char *)result + 200) = *(std::runtime_error *)(a2 + 200);
  result[13].__imp_.__imp_ = *(const char **)(a2 + 216);
  *(void *)(a2 + 208) = 0;
  *(void *)(a2 + 216) = 0;
  *(void *)(a2 + 200) = 0;
  std::runtime_error v13 = *(std::runtime_error *)(a2 + 240);
  result[14] = *(std::runtime_error *)(a2 + 224);
  result[15] = v13;
  std::runtime_error v14 = *(std::runtime_error *)(a2 + 256);
  std::runtime_error v15 = *(std::runtime_error *)(a2 + 272);
  std::runtime_error v16 = *(std::runtime_error *)(a2 + 304);
  result[18] = *(std::runtime_error *)(a2 + 288);
  result[19] = v16;
  result[16] = v14;
  result[17] = v15;
  std::runtime_error v17 = *(std::runtime_error *)(a2 + 320);
  std::runtime_error v18 = *(std::runtime_error *)(a2 + 336);
  std::runtime_error v19 = *(std::runtime_error *)(a2 + 352);
  *(std::runtime_error *)((char *)result + 362) = *(std::runtime_error *)(a2 + 362);
  result[21] = v18;
  result[22] = v19;
  result[20] = v17;
  LOBYTE(result[24].__vftable) = 0;
  LOBYTE(result[25].__imp_.__imp_) = 0;
  if (*(unsigned char *)(a2 + 408))
  {
    std::runtime_error v20 = *(std::runtime_error *)(a2 + 384);
    result[25].__vftable = *(std::runtime_error_vtbl **)(a2 + 400);
    result[24] = v20;
    *(void *)(a2 + 392) = 0;
    *(void *)(a2 + 400) = 0;
    *(void *)(a2 + 384) = 0;
    LOBYTE(result[25].__imp_.__imp_) = 1;
  }
  LOBYTE(result[26].__vftable) = 1;
  return result;
}

void AMSCore::Unexpected<AMSCore::Error,AMSCore::NetworkErrorCode,std::map<std::string,AMSCore::Any>,char const(&)[16]>(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v5 = a3 + 1;
  uint64_t v6 = a3[1];
  long long v10 = (unsigned int **)*a3;
  long long v11 = (unsigned int *)v6;
  uint64_t v12 = a3[2];
  if (v12)
  {
    *(void *)(v6 + 16) = &v11;
    *a3 = v5;
    void *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    long long v10 = &v11;
  }
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v19);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Request failed!", 15);
  std::stringbuf::str[abi:fe180100]((uint64_t)v20, &__what_arg);
  uint64_t v19 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v20[-1] + *(void *)(v19 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v20[0] = MEMORY[0x1E4FBA470] + 16;
  if (v21 < 0) {
    operator delete((void *)v20[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FA3FD0](&v22);
  *(void *)&v23.__val_ = a2;
  v23.__cat_ = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
  std::system_error::system_error(&v13, v23, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  }
  v13.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::runtime_error v14 = v10;
  std::runtime_error v15 = v11;
  uint64_t v16 = v12;
  if (v12)
  {
    *((void *)v11 + 2) = &v15;
    long long v10 = &v11;
    long long v11 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    std::runtime_error v14 = &v15;
  }
  long long v17 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v13);
  *(std::error_code *)(a1 + 16) = v13.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  char v7 = v15;
  *(void *)(a1 + 32) = v14;
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = a1 + 40;
  uint64_t v9 = v16;
  *(void *)(a1 + 48) = v16;
  if (v9)
  {
    *((void *)v7 + 2) = v8;
    char v7 = 0;
    std::runtime_error v14 = &v15;
    std::runtime_error v15 = 0;
    uint64_t v16 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v8;
  }
  *(_OWORD *)(a1 + 56) = v17;
  long long v17 = 0uLL;
  v13.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v14, v7);
  MEMORY[0x192FA3C30](&v13);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, v11);
}

void sub_18DAC8F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::NetworkErrorCode,char const(&)[32],AMSCore::Error const&>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v11);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v11, (uint64_t)"Server response was unexpected!", 31);
  AMSCore::operator<<(&v11, a3);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v11.__imp_, &v10);
  v11.__vftable = (std::system_error_vtbl *)*MEMORY[0x1E4FBA418];
  *(std::system_error_vtbl **)((char *)&v11.__vftable + (unint64_t)v11.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
  v11.__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
  if (v17 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FA3FD0](&v18);
  *(void *)&v19.__val_ = a2;
  v19.__cat_ = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
  std::system_error::system_error(&v11, v19, &v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  v11.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  uint64_t v12 = &v13;
  long long v15 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v11);
  *(std::error_code *)(a1 + 16) = v11.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v6 = v13;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = a1 + 40;
  uint64_t v8 = v14;
  *(void *)(a1 + 48) = v14;
  if (v8)
  {
    *(void *)(v6 + 16) = v7;
    uint64_t v6 = 0;
    uint64_t v12 = &v13;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v7;
  }
  *(_OWORD *)(a1 + 56) = v15;
  long long v15 = 0uLL;
  v11.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v12, (unsigned int *)v6);
  return MEMORY[0x192FA3C30](&v11);
}

void sub_18DAC91AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::expected<std::map<std::string,AMSCore::Any>,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72)) {
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1, *(unsigned int **)(a1 + 8));
  }
  else {
    (**(void (***)(uint64_t))a1)(a1);
  }
  return a1;
}

uint64_t AMSCore::Logger::log<char [32],std::string>(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= a2)
  {
    char v10 = a2;
    uint64_t v11 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v20);
    uint64_t v12 = *(void *)(v20[0] - 24);
    {
    }
    size_t v13 = strlen(a5);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v20, (uint64_t)a5, v13);
    int v14 = *(char *)(a6 + 23);
    if (v14 >= 0) {
      uint64_t v15 = a6;
    }
    else {
      uint64_t v15 = *(void *)a6;
    }
    if (v14 >= 0) {
      uint64_t v16 = *(unsigned __int8 *)(a6 + 23);
    }
    else {
      uint64_t v16 = *(void *)(a6 + 8);
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v20, v15, v16);
    uint64_t v17 = v20[6];
    uint64_t v18 = (char *)v20 + *(void *)(v20[0] - 24);
    if ((v18[32] & 5) != 0)
    {
      uint64_t v19 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v18 + 5) + 32))(&rep);
      uint64_t v19 = v27;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v24 = v10;
    uint64_t v25 = v17;
    uint64_t v26 = v19;
    (*(void (**)(void, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v11 + 16) + 16))(*(void *)(v11 + 16), a3, a4, &rep);
    v20[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v20 + *(void *)(v20[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v20[1] = MEMORY[0x1E4FBA470] + 16;
    if (v21 < 0) {
      operator delete((void *)v20[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v22);
  }
  return result;
}

void sub_18DAC9504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::SyncMachineTask::perform(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 432);
  if (!*(unsigned char *)(v1 + 88))
  {
    __break(1u);
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = (void (***)(void))(result + 152);
  char v4 = *(unsigned char *)(v1 + 80);
  if (!v4)
  {
    std::runtime_error::runtime_error((std::runtime_error *)(result + 152), (const std::runtime_error *)(v1 + 8));
    *(_OWORD *)(v2 + 168) = *(_OWORD *)(v1 + 24);
    uint64_t v5 = (void *)(v1 + 48);
    uint64_t v6 = *(void *)(v1 + 48);
    *(void *)(v2 + 192) = v6;
    uint64_t v7 = v2 + 192;
    *(void *)(v2 + 152) = &unk_1EDC827D8;
    *(void *)(v2 + 184) = *(void *)(v1 + 40);
    uint64_t v8 = *(void *)(v1 + 56);
    *(void *)(v2 + 200) = v8;
    if (v8)
    {
      *(void *)(v6 + 16) = v7;
      *(void *)(v1 + 40) = v5;
      void *v5 = 0;
      *(void *)(v1 + 56) = 0;
    }
    else
    {
      *(void *)(v2 + 184) = v7;
    }
    uint64_t v9 = *(void *)(v2 + 432);
    *(_OWORD *)(v2 + 208) = *(_OWORD *)(v9 + 64);
    *(void *)(v9 + 64) = 0;
    *(void *)(v9 + 72) = 0;
  }
  *(unsigned char *)(v2 + 224) = v4;
  uint64_t v10 = *(void *)(v2 + 440);
  if (v10 && !atomic_fetch_add((atomic_ullong *volatile)(v10 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v11 = *(std::__shared_weak_count **)(v2 + 440);
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(v2 + 360);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v13 = *(void *)(v2 + 416);
  *(void *)(v2 + 416) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  int v14 = *(std::__shared_weak_count **)(v2 + 328);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v15 = *(std::__shared_weak_count **)(v2 + 344);
  if (!v15 || atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*(char *)(v2 + 295) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  if (*(char *)(v2 + 295) < 0) {
LABEL_21:
  }
    operator delete(*(void **)(v2 + 272));
LABEL_22:
  if (*(unsigned char *)(v2 + 256) && *(char *)(v2 + 255) < 0) {
    operator delete(*(void **)(v2 + 232));
  }
  if (*(char *)(v2 + 319) < 0) {
    operator delete(*(void **)(v2 + 296));
  }
  AMSCore::nestedError<std::expected<void,AMSCore::Error> &>(v22, (uint64_t)v3, 652, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
  if (v25)
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v26, (uint64_t)v22);
    if (*(unsigned char *)(v2 + 104))
    {
      if (!*(unsigned char *)(v2 + 96)) {
        (**(void (***)(void))(v2 + 24))();
      }
      *(unsigned char *)(v2 + 104) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(v2 + 24), &v26);
    long long v16 = v27;
    uint64_t v18 = v28;
    uint64_t v17 = v29;
    *(void *)(v2 + 64) = v29;
    uint64_t v19 = v2 + 64;
    *(_OWORD *)(v2 + 40) = v16;
    *(void *)(v2 + 24) = &unk_1EDC827D8;
    uint64_t v20 = v30;
    *(void *)(v2 + 56) = v18;
    *(void *)(v2 + 72) = v20;
    if (v20)
    {
      *(void *)(v17 + 16) = v19;
      uint64_t v28 = &v29;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v17 = 0;
    }
    else
    {
      *(void *)(v2 + 56) = v19;
    }
    *(_OWORD *)(v2 + 80) = v31;
    long long v31 = 0uLL;
    *(unsigned char *)(v2 + 96) = 0;
    *(unsigned char *)(v2 + 104) = 1;
    v26.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v28, (unsigned int *)v17);
    MEMORY[0x192FA3C30](&v26);
    if (v25)
    {
      v22[0] = &unk_1EDC827D8;
      char v21 = v24;
      if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v23, v23[1]);
      MEMORY[0x192FA3C30](v22);
    }
  }
  else
  {
    if (*(unsigned char *)(v2 + 104) && !*(unsigned char *)(v2 + 96)) {
      (**(void (***)(void))(v2 + 24))();
    }
    *(unsigned char *)(v2 + 96) = 1;
    *(unsigned char *)(v2 + 104) = 1;
  }
  if (!*(unsigned char *)(v2 + 224)) {
    (**v3)(v3);
  }
  *(void *)(v2 + 152) = v2 + 16;
  *(void *)uint64_t v2 = 0;
  return AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v3);
}

void sub_18DAC99CC(void *a1)
{
  if (!*(unsigned char *)(v1 + 224)) {
    (**v2)(v2);
  }
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DAC9A10()
{
}

void AMSCore::SyncMachineTask::perform(char *__p)
{
  if (!*(void *)__p) {
    goto LABEL_22;
  }
  uint64_t v2 = *((void *)__p + 55);
  if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 55);
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  char v4 = (std::__shared_weak_count *)*((void *)__p + 45);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = *((void *)__p + 52);
  *((void *)__p + 52) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)__p + 41);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)__p + 43);
  if (!v7 || atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((__p[295] & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (__p[295] < 0) {
LABEL_16:
  }
    operator delete(*((void **)__p + 34));
LABEL_17:
  if (__p[256] && __p[255] < 0) {
    operator delete(*((void **)__p + 29));
  }
  if (__p[319] < 0) {
    operator delete(*((void **)__p + 37));
  }
LABEL_22:
  uint64_t v8 = (char *)*((void *)__p + 18);
  if (v8 == __p + 120)
  {
    (*(void (**)(char *))(*((void *)__p + 15) + 32))(__p + 120);
    if (!__p[104]) {
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  if (v8) {
    (*(void (**)(char *))(*(void *)v8 + 40))(v8);
  }
  if (__p[104])
  {
LABEL_28:
    if (!__p[96]) {
      (**((void (***)(void))__p + 3))();
    }
  }
LABEL_30:
  int v9 = __p[415];
  int v10 = __p[399];
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v10 && v9 < 0) {
    operator delete(*((void **)__p + 53));
  }
  operator delete(__p);
}

void AMSCore::SyncMachineTask::perform(AMSCore::DataBuffer,AMSCore::AccountIdentity,AMSCore::IAnisetteProvider::AnisetteType,std::shared_ptr<AMSCore::IBag>,std::shared_ptr<AMSCore::IBundleInfo const>)::ADIInterface::StorageDispose(uint64_t a1, uint64_t a2)
{
}

void AMSCore::SyncMachineTask::perform(AMSCore::DataBuffer,AMSCore::AccountIdentity,AMSCore::IAnisetteProvider::AnisetteType,std::shared_ptr<AMSCore::IBag>,std::shared_ptr<AMSCore::IBundleInfo const>)::ADIInterface::Synchronize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void AMSCore::SyncMachineTask::perform(AMSCore::DataBuffer,AMSCore::AccountIdentity,AMSCore::IAnisetteProvider::AnisetteType,std::shared_ptr<AMSCore::IBag>,std::shared_ptr<AMSCore::IBundleInfo const>)::ADIInterface::~ADIInterface()
{
}

void AMSCore::IAnisetteProvider::finishProvisioning(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (uint64_t *)(a3 + 8);
  uint64_t v7 = *(uint64_t **)(a3 + 8);
  if (!v7)
  {
    uint64_t v20 = &AMSCore::Any::Null(void)::null;
    char v21 = &AMSCore::Any::Null(void)::null;
    goto LABEL_65;
  }
  uint64_t v8 = (uint64_t *)(a3 + 8);
  int v9 = *(uint64_t **)(a3 + 8);
  do
  {
    while (1)
    {
      int v10 = *((char *)v9 + 55);
      uint64_t v11 = v10 >= 0 ? v9 + 4 : (uint64_t *)v9[4];
      unint64_t v12 = v10 >= 0 ? *((unsigned __int8 *)v9 + 55) : v9[5];
      size_t v13 = v12 >= 0xB ? 11 : v12;
      int v14 = memcmp("settingInfo", v11, v13);
      if (v14) {
        break;
      }
      if (v12 >= 0xB) {
        goto LABEL_17;
      }
LABEL_3:
      int v9 = (uint64_t *)v9[1];
      if (!v9) {
        goto LABEL_18;
      }
    }
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_17:
    uint64_t v8 = v9;
    int v9 = (uint64_t *)*v9;
  }
  while (v9);
LABEL_18:
  if (v8 == v6) {
    goto LABEL_33;
  }
  int v15 = *((char *)v8 + 55);
  if (v15 >= 0) {
    long long v16 = v8 + 4;
  }
  else {
    long long v16 = (const void *)v8[4];
  }
  if (v15 >= 0) {
    unint64_t v17 = *((unsigned __int8 *)v8 + 55);
  }
  else {
    unint64_t v17 = v8[5];
  }
  if (v17 >= 0xB) {
    size_t v18 = 11;
  }
  else {
    size_t v18 = v17;
  }
  int v19 = memcmp("settingInfo", v16, v18);
  if (v19)
  {
    if ((v19 & 0x80000000) == 0) {
      goto LABEL_30;
    }
LABEL_33:
    uint64_t v20 = &AMSCore::Any::Null(void)::null;
  }
  else
  {
    if (v17 > 0xB) {
      goto LABEL_33;
    }
LABEL_30:
    uint64_t v20 = v8 + 7;
  }
  uint64_t v22 = v6;
  std::error_code v23 = v7;
  while (2)
  {
    while (2)
    {
      int v24 = *((char *)v23 + 55);
      if (v24 >= 0) {
        char v25 = v23 + 4;
      }
      else {
        char v25 = (const void *)v23[4];
      }
      if (v24 >= 0) {
        unint64_t v26 = *((unsigned __int8 *)v23 + 55);
      }
      else {
        unint64_t v26 = v23[5];
      }
      if (v26 >= 0xC) {
        size_t v27 = 12;
      }
      else {
        size_t v27 = v26;
      }
      int v28 = memcmp("transportKey", v25, v27);
      if (v28)
      {
        if (v28 < 0) {
          break;
        }
        goto LABEL_35;
      }
      if (v26 < 0xC)
      {
LABEL_35:
        std::error_code v23 = (uint64_t *)v23[1];
        if (!v23) {
          goto LABEL_50;
        }
        continue;
      }
      break;
    }
    uint64_t v22 = v23;
    std::error_code v23 = (uint64_t *)*v23;
    if (v23) {
      continue;
    }
    break;
  }
LABEL_50:
  if (v22 == v6) {
    goto LABEL_64;
  }
  int v29 = *((char *)v22 + 55);
  if (v29 >= 0) {
    uint64_t v30 = v22 + 4;
  }
  else {
    uint64_t v30 = (const void *)v22[4];
  }
  if (v29 >= 0) {
    unint64_t v31 = *((unsigned __int8 *)v22 + 55);
  }
  else {
    unint64_t v31 = v22[5];
  }
  if (v31 >= 0xC) {
    size_t v32 = 12;
  }
  else {
    size_t v32 = v31;
  }
  int v33 = memcmp("transportKey", v30, v32);
  if (v33)
  {
    if ((v33 & 0x80000000) == 0) {
      goto LABEL_62;
    }
LABEL_64:
    char v21 = &AMSCore::Any::Null(void)::null;
  }
  else
  {
    if (v31 > 0xC) {
      goto LABEL_64;
    }
LABEL_62:
    char v21 = v22 + 7;
  }
LABEL_65:
  if (*((unsigned char *)v20 + 24) != 5 || *((unsigned char *)v21 + 24) != 5)
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[58]>((uint64_t)&v76, 3u, "The response was missing settingInfo and/or transportKey.");
    std::runtime_error::runtime_error((std::runtime_error *)a4, &v76);
    *(_OWORD *)(a4 + 16) = v77;
    *(void *)a4 = &unk_1EDC827D8;
    uint64_t v46 = v79;
    *(void *)(a4 + 32) = v78;
    *(void *)(a4 + 40) = v46;
    uint64_t v47 = a4 + 40;
    uint64_t v48 = v80;
    *(void *)(a4 + 48) = v80;
    if (v48)
    {
      *(void *)(v46 + 16) = v47;
      uint64_t v78 = &v79;
      uint64_t v79 = 0;
      uint64_t v80 = 0;
      uint64_t v46 = 0;
    }
    else
    {
      *(void *)(a4 + 32) = v47;
    }
    *(_OWORD *)(a4 + 56) = v81;
    long long v81 = 0uLL;
    *(unsigned char *)(a4 + 72) = 0;
    v76.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v78, (unsigned int *)v46);
    MEMORY[0x192FA3C30](&v76);
    return;
  }
  if (!v7) {
    goto LABEL_104;
  }
  unsigned int v67 = a2;
  uint64_t v34 = v6;
  while (2)
  {
    while (2)
    {
      int v35 = *((char *)v7 + 55);
      if (v35 >= 0) {
        long long v36 = v7 + 4;
      }
      else {
        long long v36 = (const void *)v7[4];
      }
      if (v35 >= 0) {
        unint64_t v37 = *((unsigned __int8 *)v7 + 55);
      }
      else {
        unint64_t v37 = v7[5];
      }
      if (v37 >= 6) {
        size_t v38 = 6;
      }
      else {
        size_t v38 = v37;
      }
      int v39 = memcmp("keybag", v36, v38);
      if (v39)
      {
        if (v39 < 0) {
          break;
        }
        goto LABEL_69;
      }
      if (v37 < 6)
      {
LABEL_69:
        uint64_t v7 = (uint64_t *)v7[1];
        if (!v7) {
          goto LABEL_84;
        }
        continue;
      }
      break;
    }
    uint64_t v34 = v7;
    uint64_t v7 = (uint64_t *)*v7;
    if (v7) {
      continue;
    }
    break;
  }
LABEL_84:
  if (v34 == v6)
  {
    char v45 = &AMSCore::Any::Null(void)::null;
    a2 = v67;
  }
  else
  {
    int v40 = *((char *)v34 + 55);
    if (v40 >= 0) {
      uint64_t v41 = v34 + 4;
    }
    else {
      uint64_t v41 = (const void *)v34[4];
    }
    if (v40 >= 0) {
      unint64_t v42 = *((unsigned __int8 *)v34 + 55);
    }
    else {
      unint64_t v42 = v34[5];
    }
    if (v42 >= 6) {
      size_t v43 = 6;
    }
    else {
      size_t v43 = v42;
    }
    int v44 = memcmp("keybag", v41, v43);
    if (v44)
    {
      a2 = v67;
      if ((v44 & 0x80000000) == 0) {
        goto LABEL_96;
      }
LABEL_104:
      char v45 = &AMSCore::Any::Null(void)::null;
    }
    else
    {
      a2 = v67;
      if (v42 > 6) {
        goto LABEL_104;
      }
LABEL_96:
      char v45 = v34 + 7;
    }
  }
  if (*((unsigned char *)v45 + 24) != 6)
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v76);
    AMSCore::Logger::log<char [51]>((uint64_t)v76.__vftable, 2u, (uint64_t)"fairplay", 8, "Anisette provisioning did not provide keybag data.");
    uint64_t v51 = a2;
    char imp = (std::__shared_weak_count *)v76.__imp_.__imp_;
    if (v76.__imp_.__imp_ && !atomic_fetch_add((atomic_ullong *volatile)v76.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
      std::__shared_weak_count::__release_weak(imp);
    }
    goto LABEL_134;
  }
  AMSCore::ServiceProvider<AMSCore::IKeybagProvider>::getDefault(&v83);
  uint64_t v49 = v83;
  if (!v83)
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[34]>((uint64_t)&v76, 2u, "Keybag provider is not available.");
    std::runtime_error::runtime_error((std::runtime_error *)a4, &v76);
    *(_OWORD *)(a4 + 16) = v77;
    *(void *)a4 = &unk_1EDC827D8;
    uint64_t v53 = v79;
    *(void *)(a4 + 32) = v78;
    *(void *)(a4 + 40) = v53;
    uint64_t v54 = a4 + 40;
    uint64_t v55 = v80;
    *(void *)(a4 + 48) = v80;
    if (v55)
    {
      *(void *)(v53 + 16) = v54;
      uint64_t v78 = &v79;
      uint64_t v79 = 0;
      uint64_t v80 = 0;
      uint64_t v53 = 0;
    }
    else
    {
      *(void *)(a4 + 32) = v54;
    }
    *(_OWORD *)(a4 + 56) = v81;
    long long v81 = 0uLL;
    *(unsigned char *)(a4 + 72) = 0;
    v76.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v78, (unsigned int *)v53);
    MEMORY[0x192FA3C30](&v76);
LABEL_129:
    int v56 = 1;
    goto LABEL_130;
  }
  if (*((_DWORD *)v45 + 6) == 6) {
    uint64_t v50 = v45;
  }
  else {
    uint64_t v50 = 0;
  }
  if (*((char *)v50 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v75, (const std::string::value_type *)*v50, v50[1]);
  }
  else {
    std::string v75 = *(std::string *)v50;
  }
  (*(void (**)(std::runtime_error *__return_ptr, uint64_t, std::string *))(*(void *)v49 + 16))(&v76, v49, &v75);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  if (!v82)
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&>((uint64_t)&v69, &v76);
    std::runtime_error::runtime_error((std::runtime_error *)a4, &v69);
    *(_OWORD *)(a4 + 16) = v70;
    *(void *)a4 = &unk_1EDC827D8;
    uint64_t v57 = v72;
    *(void *)(a4 + 32) = v71;
    *(void *)(a4 + 40) = v57;
    uint64_t v58 = a4 + 40;
    uint64_t v59 = v73;
    *(void *)(a4 + 48) = v73;
    if (v59)
    {
      *(void *)(v57 + 16) = v58;
      uint64_t v71 = &v72;
      uint64_t v72 = 0;
      uint64_t v73 = 0;
      uint64_t v57 = 0;
    }
    else
    {
      *(void *)(a4 + 32) = v58;
    }
    *(_OWORD *)(a4 + 56) = v74;
    long long v74 = 0uLL;
    *(unsigned char *)(a4 + 72) = 0;
    v69.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v71, (unsigned int *)v57);
    MEMORY[0x192FA3C30](&v69);
    if (!v82) {
      ((void (*)(std::runtime_error *))v76.~runtime_error)(&v76);
    }
    goto LABEL_129;
  }
  int v56 = 0;
LABEL_130:
  uint64_t v51 = a2;
  uint64_t v60 = v84;
  if (v84 && !atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  if (!v56)
  {
LABEL_134:
    if (*((_DWORD *)v20 + 6) == 5) {
      uint64_t v61 = v20;
    }
    else {
      uint64_t v61 = 0;
    }
    AMSCore::Base64::decode(v61, &v76);
    if (*((_DWORD *)v21 + 6) == 5) {
      __n128 v62 = v21;
    }
    else {
      __n128 v62 = 0;
    }
    AMSCore::Base64::decode(v62, &v69);
    if ((SBYTE7(v77) & 0x80u) == 0) {
      uint64_t v63 = &v76;
    }
    else {
      uint64_t v63 = v76.__vftable;
    }
    if ((SBYTE7(v77) & 0x80u) == 0) {
      int v64 = (const char *)BYTE7(v77);
    }
    else {
      int v64 = v76.__imp_.__imp_;
    }
    if ((SBYTE7(v70) & 0x80u) == 0) {
      char v65 = &v69;
    }
    else {
      char v65 = v69.__vftable;
    }
    if ((SBYTE7(v70) & 0x80u) == 0) {
      uint64_t v66 = (const char *)BYTE7(v70);
    }
    else {
      uint64_t v66 = v69.__imp_.__imp_;
    }
    (*(void (**)(uint64_t, uint64_t, void *, const char *, void *, const char *))(*(void *)a1 + 40))(a1, v51, v63, v64, v65, v66);
    if (SBYTE7(v70) < 0) {
      operator delete(v69.__vftable);
    }
    if (SBYTE7(v77) < 0) {
      operator delete(v76.__vftable);
    }
  }
}

void sub_18DACA504(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)va);
  __clang_call_terminate(a1);
}

uint64_t std::__shared_ptr_emplace<AMSCore::BuiltInAnisetteProvider>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMSCore::BuiltInAnisetteProvider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC84048;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::BuiltInAnisetteProvider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC84048;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AMSCore::AnisetteUtils::addHeaders(uint64_t a1, void *a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int v9 = (char *)operator new(0x100uLL);
  *(void *)int v9 = AMSCore::AnisetteUtils::addHeaders;
  *((void *)v9 + 1) = AMSCore::AnisetteUtils::addHeaders;
  v9[152] = 0;
  *((void *)v9 + 29) = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v9[216] = 0;
  uint64_t v10 = *(unsigned __int8 *)(a3 + 64);
  if (*(unsigned char *)(a3 + 64))
  {
    v9[176] = 0;
    if (*(unsigned char *)(a3 + 24))
    {
      *(_OWORD *)(v9 + 152) = *(_OWORD *)a3;
      *((void *)v9 + 21) = *(void *)(a3 + 16);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      v9[176] = 1;
    }
    *((void *)v9 + 23) = *(void *)(a3 + 32);
    *((_OWORD *)v9 + 12) = *(_OWORD *)(a3 + 40);
    *((void *)v9 + 26) = *(void *)(a3 + 56);
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
    uint64_t v10 = 1;
    v9[216] = 1;
  }
  v9[249] = a4;
  int v11 = *(unsigned __int8 *)(a5 + 16);
  v9[250] = v11;
  if (v11)
  {
    uint64_t v10 = *(void *)(a5 + 8);
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
  }
  *((void *)v9 + 30) = v10;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  v9[24] = 0;
  v9[104] = 0;
  *((void *)v9 + 14) = 0;
  *((void *)v9 + 18) = 0;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v12, (uint64_t)(v9 + 16));
}

void sub_18DACBBA4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void AMSCore::AnisetteUtils::addHeaders(char *__p)
{
  uint64_t v2 = __p + 120;
  uint64_t v3 = (char *)*((void *)__p + 18);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  if (__p[104]) {
    BOOL v4 = __p[96] == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    (**((void (***)(void))__p + 3))();
  }
  uint64_t v5 = *((void *)__p + 30);
  int v6 = __p[250];
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v6 && v5 && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)__p + 30) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v7 = (std::__shared_weak_count *)*((void *)__p + 30);
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p[216])
  {
    if (__p[215] < 0) {
      operator delete(*((void **)__p + 24));
    }
    if (__p[176] && __p[175] < 0) {
      operator delete(*((void **)__p + 19));
    }
  }
  uint64_t v8 = *((void *)__p + 29);
  if (v8 && !atomic_fetch_add((atomic_ullong *volatile)(v8 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    int v9 = (std::__shared_weak_count *)*((void *)__p + 29);
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  operator delete(__p);
}

void AMSCore::AnisetteUtils::handleActions(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  int v9 = operator new(0x4D8uLL);
  void *v9 = AMSCore::AnisetteUtils::handleActions;
  v9[1] = AMSCore::AnisetteUtils::handleActions;
  *((_OWORD *)v9 + 72) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *a3 = 0;
  a3[1] = 0;
  *((_OWORD *)v9 + 73) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *((_OWORD *)v9 + 74) = *(_OWORD *)a5;
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *((unsigned char *)v9 + 24) = 0;
  *((unsigned char *)v9 + 488) = 0;
  v9[62] = 0;
  v9[66] = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,void>(&v10, (uint64_t)(v9 + 2));
}

void sub_18DACC728(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a12);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a13);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a14);
  if (v15[1055] < 0) {
    operator delete(*a15);
  }
  if (v15[1079] < 0) {
    operator delete(*v17);
  }
  if (v15[1024])
  {
    if (v15[1023] < 0) {
      operator delete(*v16);
    }
  }
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_18DACC7A4()
{
  if ((*(char *)(v0 + 559) & 0x80000000) == 0) {
    JUMPOUT(0x18DACC798);
  }
  JUMPOUT(0x18DACC790);
}

void AMSCore::AnisetteUtils::handleActions(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 1208);
  if (!*(unsigned char *)(v1 + 472)) {
    goto LABEL_77;
  }
  uint64_t v3 = (void **)(a1 + 1080);
  BOOL v4 = (AMSCore::HTTPResponseAction *)(a1 + 536);
  uint64_t v5 = (std::string *)(a1 + 1000);
  uint64_t v6 = a1 + 1032;
  uint64_t v7 = a1 + 1056;
  uint64_t v8 = (void *)(a1 + 1104);
  int v35 = (void *)(a1 + 1136);
  long long v36 = (void *)(a1 + 1120);
  uint64_t v37 = a1 + 1232;
  uint64_t v33 = a1 + 16;
  uint64_t v34 = (AMSCore::HTTPResponseAction *)(a1 + 24);
  AMSCore::HTTPResponseAction::HTTPResponseAction(a1 + 536, v1 + 8);
  uint64_t v9 = *(void *)(a1 + 1216);
  if (v9 && !atomic_fetch_add((atomic_ullong *volatile)(v9 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    int v11 = *(std::__shared_weak_count **)(a1 + 1216);
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    long long v10 = *(std::__shared_weak_count **)(a1 + 1088);
    if (!v10) {
      goto LABEL_8;
    }
  }
  else
  {
    long long v10 = *(std::__shared_weak_count **)(a1 + 1088);
    if (!v10) {
      goto LABEL_8;
    }
  }
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_8:
  std::runtime_error v12 = *(std::__shared_weak_count **)(a1 + 1144);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    uint64_t v13 = *(std::__shared_weak_count **)(a1 + 1128);
    if (!v13) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v13 = *(std::__shared_weak_count **)(a1 + 1128);
    if (!v13) {
      goto LABEL_14;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_14:
  int v14 = *(std::__shared_weak_count **)(a1 + 1112);
  if (!v14 || atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*(char *)(a1 + 1055) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (*(char *)(a1 + 1055) < 0) {
LABEL_17:
  }
    operator delete(*(void **)v6);
LABEL_18:
  int v15 = *(unsigned __int8 *)(a1 + 992);
  if (v15 == 1)
  {
    int v16 = 0;
  }
  else
  {
    uint64_t v17 = (uint64_t)v34;
    if (*(unsigned char *)(a1 + 488))
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction(v34);
      *(unsigned char *)(a1 + 488) = 0;
    }
    AMSCore::HTTPResponseAction::HTTPResponseAction(v17, (uint64_t)v4);
    *(unsigned char *)(a1 + 488) = 1;
    int v16 = 3;
  }
  AMSCore::HTTPResponseAction::~HTTPResponseAction(v4);
  if (*(char *)(a1 + 1079) < 0) {
    operator delete(*(void **)v7);
  }
  if (v15 == 1) {
    goto LABEL_41;
  }
  while (1)
  {
    *(void *)(a1 + 1224) = 0;
    if (*(unsigned char *)(a1 + 1024) && *(char *)(a1 + 1023) < 0) {
      operator delete(v5->__r_.__value_.__l.__data_);
    }
    if (v16) {
      goto LABEL_76;
    }
    uint64_t v18 = *(void *)(a1 + 1200) + 1;
    if (*(void *)(a1 + 1200) == 1)
    {
      v38[0] = 0;
      v38[24] = 0;
      v38[32] = 0;
      v38[48] = 0;
      v38[56] = 0;
      v38[128] = 0;
      v38[136] = 0;
      v38[288] = 0;
      v38[296] = 0;
      v38[300] = 0;
      v38[304] = 0;
      v38[336] = 0;
      __int16 v39 = 0;
      char v40 = 0;
      char v41 = 0;
      char v42 = 0;
      char v43 = 0;
      char v44 = 0;
      char v45 = 0;
      char v46 = 1;
      uint64_t v32 = (uint64_t)v34;
      if (*(unsigned char *)(a1 + 488))
      {
        AMSCore::HTTPResponseAction::~HTTPResponseAction(v34);
        *(unsigned char *)(a1 + 488) = 0;
      }
      AMSCore::HTTPResponseAction::HTTPResponseAction(v32, (uint64_t)v38);
      *(unsigned char *)(a1 + 488) = 1;
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v38);
LABEL_76:
      *(void *)(a1 + 536) = v33;
      *(void *)a1 = 0;
      AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend((uint64_t)v4);
      return;
    }
    *(void *)(a1 + 1200) = v18;
    int v19 = *(unsigned __int8 *)(v37 + v18);
    if (!*(unsigned char *)(v37 + v18))
    {
      *(unsigned char *)(a1 + 1000) = 0;
      *(unsigned char *)(a1 + 1024) = 0;
      goto LABEL_41;
    }
    uint64_t v20 = (void *)(*(void *)(a1 + 1152) + 160);
    char v21 = v19 == 1 ? "X-Apple-MD-Action" : "X-Apple-AMD-Action";
    size_t v22 = v19 == 1 ? 17 : 18;
    *(unsigned char *)(a1 + 559) = v22;
    memcpy(v4, v21, v22);
    *((unsigned char *)v4 + v22) = 0;
    AMSCore::IHTTPHeaderMap::getSingleValueOrNone(v5, v20, (char *)v4);
    if (*(char *)(a1 + 559) < 0) {
      break;
    }
    if (*(unsigned char *)(a1 + 1024)) {
      goto LABEL_48;
    }
LABEL_41:
    int v16 = 0;
  }
  operator delete(*(void **)v4);
  if (!*(unsigned char *)(a1 + 1024)) {
    goto LABEL_41;
  }
LABEL_48:
  std::error_code v23 = (void *)(*(void *)(a1 + 1152) + 160);
  if (v19 == 1) {
    int v24 = "X-Apple-MD-Data";
  }
  else {
    int v24 = "X-Apple-AMD-Data";
  }
  if (v19 == 1) {
    size_t v25 = 15;
  }
  else {
    size_t v25 = 16;
  }
  *(unsigned char *)(a1 + 1103) = v25;
  memcpy(v3, v24, v25);
  *((unsigned char *)v3 + v25) = 0;
  AMSCore::IHTTPHeaderMap::getSingleValueOrNone((std::string *)v4, v23, (char *)v3);
  if (*(char *)(a1 + 1103) < 0)
  {
    operator delete(*v3);
    if (!*(unsigned char *)(a1 + 560)) {
      goto LABEL_60;
    }
LABEL_56:
    AMSCore::Base64::decode((uint64_t *)v4, (void *)v7);
    if (*(unsigned char *)(a1 + 560) && *(char *)(a1 + 559) < 0) {
      operator delete(*(void **)v4);
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 560)) {
      goto LABEL_56;
    }
LABEL_60:
    *(void *)uint64_t v7 = 0;
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = 0;
  }
  if (*(unsigned char *)(a1 + 1024))
  {
    uint64_t v26 = *(void *)(a1 + 1176);
    uint64_t v27 = *(void *)(a1 + 1168);
    int v28 = *(char *)(a1 + 1023);
    if (v28 >= 0) {
      uint64_t v29 = (uint64_t)v5;
    }
    else {
      uint64_t v29 = *(void *)(a1 + 1000);
    }
    if (v28 >= 0) {
      uint64_t v30 = *(unsigned __int8 *)(a1 + 1023);
    }
    else {
      uint64_t v30 = *(void *)(a1 + 1008);
    }
    *(_OWORD *)uint64_t v6 = *(_OWORD *)v7;
    *(void *)(v6 + 16) = *(void *)(v7 + 16);
    *(void *)uint64_t v7 = 0;
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = 0;
    void *v8 = 0;
    v8[1] = 0;
    *(void *)(a1 + 1120) = v27;
    *(void *)(a1 + 1128) = v26;
    if (v26) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v31 = *(void *)(a1 + 1192);
    *(void *)(a1 + 1136) = *(void *)(a1 + 1184);
    *(void *)(a1 + 1144) = v31;
    if (v31) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
    }
  }
LABEL_77:
  __break(1u);
}

void sub_18DACCF2C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a11);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a12);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v16);
  if (v12[1055] < 0) {
    operator delete(*v15);
  }
  if (v12[1079] < 0) {
    operator delete(*v14);
  }
  if (v12[1024])
  {
    if (v12[1023] < 0) {
      operator delete(*v13);
    }
  }
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_18DACCFA4()
{
  if ((*(char *)(v0 + 559) & 0x80000000) == 0) {
    JUMPOUT(0x18DACCF98);
  }
  JUMPOUT(0x18DACCF90);
}

void AMSCore::AnisetteUtils::handleActions(char *__p)
{
  if (!*(void *)__p) {
    goto LABEL_21;
  }
  uint64_t v2 = *((void *)__p + 152);
  if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 152);
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  BOOL v4 = (std::__shared_weak_count *)*((void *)__p + 136);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)__p + 143);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)__p + 141);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)__p + 139);
  if (!v7 || atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((__p[1055] & 0x80000000) == 0) {
      goto LABEL_17;
    }
LABEL_46:
    operator delete(*((void **)__p + 129));
    if ((__p[1079] & 0x80000000) == 0) {
      goto LABEL_18;
    }
LABEL_47:
    operator delete(*((void **)__p + 132));
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (__p[1055] < 0) {
    goto LABEL_46;
  }
LABEL_17:
  if (__p[1079] < 0) {
    goto LABEL_47;
  }
LABEL_18:
  *((void *)__p + 153) = 0;
  if (__p[1024] && __p[1023] < 0) {
    operator delete(*((void **)__p + 125));
  }
LABEL_21:
  uint64_t v8 = (char *)*((void *)__p + 66);
  if (v8 == __p + 504)
  {
    (*(void (**)(char *))(*((void *)__p + 63) + 32))(__p + 504);
    if (__p[488]) {
LABEL_25:
    }
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 24));
  }
  else
  {
    if (v8) {
      (*(void (**)(char *))(*(void *)v8 + 40))(v8);
    }
    if (__p[488]) {
      goto LABEL_25;
    }
  }
  uint64_t v9 = *((void *)__p + 149);
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v9 && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)__p + 149) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    long long v10 = (std::__shared_weak_count *)*((void *)__p + 149);
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = *((void *)__p + 147);
  if (v11 && !atomic_fetch_add((atomic_ullong *volatile)(v11 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    std::runtime_error v12 = (std::__shared_weak_count *)*((void *)__p + 147);
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v13 = *((void *)__p + 153);
  if (v13 && !atomic_fetch_add((atomic_ullong *volatile)(v13 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    int v14 = (std::__shared_weak_count *)*((void *)__p + 153);
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v15 = *((void *)__p + 145);
  if (v15 && !atomic_fetch_add((atomic_ullong *volatile)(v15 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v16 = (std::__shared_weak_count *)*((void *)__p + 145);
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  operator delete(__p);
}

void std::shared_ptr<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_18DACD3EC(void *a1)
{
  __cxa_begin_catch(a1);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 480), 2uLL)) {
    (*(void (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  __cxa_rethrow();
}

void sub_18DACD418(_Unwind_Exception *a1)
{
}

void AMSCore::AnisetteUtils::anonymous namespace'::handleAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, char a6, void *a7, void *a8)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = operator new(0x5A0uLL);
  v15[161] = a2;
  v15[162] = a3;
  uint64_t v16 = *(void *)(a4 + 8);
  v15[165] = *(void *)a4;
  v15[163] = v16;
  *(void *)((char *)v15 + 1311) = *(void *)(a4 + 15);
  *((unsigned char *)v15 + 1433) = *(unsigned char *)(a4 + 23);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  v15[166] = a5[1];
  *a5 = 0;
  a5[1] = 0;
  *((unsigned char *)v15 + 1432) = a6;
  v15[167] = a7[1];
  *a7 = 0;
  a7[1] = 0;
  v15[168] = a8[1];
  *a8 = 0;
  a8[1] = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *((unsigned char *)v15 + 24) = 0;
  *((unsigned char *)v15 + 488) = 0;
  v15[62] = 0;
  v15[66] = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,void>(&v17, (uint64_t)(v15 + 2));
}

void sub_18DAD0ADC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AMSCore::HTTPResponseAction::HTTPResponseAction(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    *(void *)a1 = *(void *)a2;
    BOOL v4 = (void *)(a2 + 8);
    uint64_t v5 = *(void *)(a2 + 8);
    *(void *)(a1 + 8) = v5;
    uint64_t v6 = a1 + 8;
    uint64_t v7 = *(void *)(a2 + 16);
    *(void *)(a1 + 16) = v7;
    if (v7)
    {
      *(void *)(v5 + 16) = v6;
      *(void *)a2 = v4;
      void *v4 = 0;
      *(void *)(a2 + 16) = 0;
    }
    else
    {
      *(void *)a1 = v6;
    }
    *(unsigned char *)(a1 + 24) = 1;
  }
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  if (*(unsigned char *)(a2 + 48))
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(unsigned char *)(a1 + 48) = 1;
  }
  *(unsigned char *)(a1 + 56) = 0;
  uint64_t v8 = (std::runtime_error *)(a1 + 56);
  *(unsigned char *)(a1 + 128) = 0;
  if (*(unsigned char *)(a2 + 128))
  {
    std::runtime_error::runtime_error(v8, (const std::runtime_error *)(a2 + 56));
    *(void *)(a1 + 56) = MEMORY[0x1E4FBA448] + 16;
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 56) = &unk_1EDC827D8;
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    uint64_t v9 = (void *)(a2 + 96);
    uint64_t v10 = *(void *)(a2 + 96);
    *(void *)(a1 + 96) = v10;
    uint64_t v11 = a1 + 96;
    uint64_t v12 = *(void *)(a2 + 104);
    *(void *)(a1 + 104) = v12;
    if (v12)
    {
      *(void *)(v10 + 16) = v11;
      *(void *)(a2 + 88) = v9;
      void *v9 = 0;
      *(void *)(a2 + 104) = 0;
    }
    else
    {
      *(void *)(a1 + 88) = v11;
    }
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(void *)(a2 + 112) = 0;
    *(void *)(a2 + 120) = 0;
    *(unsigned char *)(a1 + 128) = 1;
  }
  *(unsigned char *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 288) = 0;
  std::__optional_storage_base<AMSCore::URL,false>::__construct_from[abi:fe180100]<std::__optional_move_base<AMSCore::URL,false>>(a1 + 136, (long long *)(a2 + 136));
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(unsigned char *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 336) = 0;
  if (*(unsigned char *)(a2 + 336))
  {
    *(_DWORD *)(a1 + 328) = -1;
    uint64_t v13 = *(unsigned int *)(a2 + 328);
    if (v13 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1EDCA5520[v13])(&v18, a1 + 304, a2 + 304);
      *(_DWORD *)(a1 + 328) = v13;
      uint64_t v14 = *(unsigned int *)(a2 + 328);
      if (v14 != -1)
      {
        if (!v14)
        {
LABEL_19:
          *(unsigned char *)(a1 + 336) = 1;
          goto LABEL_20;
        }
        ((void (*)(char *, uint64_t))off_1EDCA54D0[v14])(&v19, a2 + 304);
      }
    }
    *(_DWORD *)(a2 + 328) = 0;
    goto LABEL_19;
  }
LABEL_20:
  *(_WORD *)(a1 + 344) = *(_WORD *)(a2 + 344);
  *(unsigned char *)(a1 + 352) = 0;
  *(unsigned char *)(a1 + 376) = 0;
  if (*(unsigned char *)(a2 + 376))
  {
    long long v15 = *(_OWORD *)(a2 + 352);
    *(void *)(a1 + 368) = *(void *)(a2 + 368);
    *(_OWORD *)(a1 + 352) = v15;
    *(void *)(a2 + 360) = 0;
    *(void *)(a2 + 368) = 0;
    *(void *)(a2 + 352) = 0;
    *(unsigned char *)(a1 + 376) = 1;
  }
  *(unsigned char *)(a1 + 384) = 0;
  *(unsigned char *)(a1 + 408) = 0;
  if (*(unsigned char *)(a2 + 408))
  {
    long long v16 = *(_OWORD *)(a2 + 384);
    *(void *)(a1 + 400) = *(void *)(a2 + 400);
    *(_OWORD *)(a1 + 384) = v16;
    *(void *)(a2 + 392) = 0;
    *(void *)(a2 + 400) = 0;
    *(void *)(a2 + 384) = 0;
    *(unsigned char *)(a1 + 408) = 1;
  }
  *(unsigned char *)(a1 + 416) = 0;
  *(unsigned char *)(a1 + 448) = 0;
  if (*(unsigned char *)(a2 + 448))
  {
    *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
    *(void *)(a2 + 416) = 0;
    *(void *)(a2 + 424) = 0;
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
    *(void *)(a2 + 432) = 0;
    *(void *)(a2 + 440) = 0;
    *(unsigned char *)(a1 + 448) = 1;
  }
  *(unsigned char *)(a1 + 456) = *(unsigned char *)(a2 + 456);
  return a1;
}

void AMSCore::HTTPResponseAction::~HTTPResponseAction(AMSCore::HTTPResponseAction *this)
{
  if (*((unsigned char *)this + 448))
  {
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 55);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 53);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (*((unsigned char *)this + 408) && *((char *)this + 407) < 0) {
    operator delete(*((void **)this + 48));
  }
  if (*((unsigned char *)this + 376) && *((char *)this + 375) < 0)
  {
    operator delete(*((void **)this + 44));
    if (!*((unsigned char *)this + 336)) {
      goto LABEL_17;
    }
  }
  else if (!*((unsigned char *)this + 336))
  {
    goto LABEL_17;
  }
  uint64_t v4 = *((unsigned int *)this + 82);
  if (v4 != -1) {
    ((void (*)(char *, char *))off_1EDCA59B0[v4])(&v7, (char *)this + 304);
  }
  *((_DWORD *)this + 82) = -1;
LABEL_17:
  if (*((unsigned char *)this + 288)) {
    AMSCore::URL::~URL((AMSCore::HTTPResponseAction *)((char *)this + 136));
  }
  if (*((unsigned char *)this + 128))
  {
    *((void *)this + 7) = &unk_1EDC827D8;
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 15);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this + 88, *((unsigned int **)this + 12));
    MEMORY[0x192FA3C30]((char *)this + 56);
  }
  if (*((unsigned char *)this + 48))
  {
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 5);
    if (v6)
    {
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  if (*((unsigned char *)this + 24)) {
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this, *((unsigned int **)this + 1));
  }
}

uint64_t AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(uint64_t result)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void (**)(void))atomic_exchange((atomic_ullong *volatile)(*(void *)result + 480), 1uLL);
  if (v1)
  {
    uint64_t v2 = result;
    if (v1 == (void (**)(void))2) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result - 8))(*(void *)result - 16);
    }
    uint64_t v3 = *(void *)result;
    double result = *(void *)(*(void *)result + 512);
    if (result)
    {
      if (result == v3 + 488)
      {
        uint64_t v6 = v5;
        double result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 24))(result, v5);
      }
      else
      {
        uint64_t v6 = (void *)result;
        *(void *)(v3 + 512) = 0;
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    if (v6)
    {
      if (!*(unsigned char *)(*(void *)v2 + 472))
      {
        __break(1u);
        return result;
      }
      AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v4, *(void *)v2 + 8);
      if (!v6) {
        std::__throw_bad_function_call[abi:fe180100]();
      }
      (*(void (**)(void *, unsigned char *))(*v6 + 48))(v6, v4);
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v4);
    }
    else
    {
      (*v1)(v1);
    }
    double result = (uint64_t)v6;
    if (v6 == v5)
    {
      return (*(uint64_t (**)(void *))(v5[0] + 32))(v5);
    }
    else if (v6)
    {
      return (*(uint64_t (**)(void *))(*v6 + 40))(v6);
    }
  }
  return result;
}

void sub_18DAD15A8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__optional_storage_base<AMSCore::URL,false>::__construct_from[abi:fe180100]<std::__optional_move_base<AMSCore::URL,false>>(uint64_t result, long long *a2)
{
  if (*((unsigned char *)a2 + 152))
  {
    *(unsigned char *)double result = 0;
    *(unsigned char *)(result + 24) = 0;
    if (*((unsigned char *)a2 + 24))
    {
      long long v2 = *a2;
      *(void *)(result + 16) = *((void *)a2 + 2);
      *(_OWORD *)double result = v2;
      *((void *)a2 + 1) = 0;
      *((void *)a2 + 2) = 0;
      *(void *)a2 = 0;
      *(unsigned char *)(result + 24) = 1;
    }
    *(unsigned char *)(result + 32) = 0;
    *(unsigned char *)(result + 56) = 0;
    if (*((unsigned char *)a2 + 56))
    {
      long long v3 = a2[2];
      *(void *)(result + 48) = *((void *)a2 + 6);
      *(_OWORD *)(result + 32) = v3;
      *((void *)a2 + 5) = 0;
      *((void *)a2 + 6) = 0;
      *((void *)a2 + 4) = 0;
      *(unsigned char *)(result + 56) = 1;
    }
    *(unsigned char *)(result + 64) = 0;
    *(unsigned char *)(result + 88) = 0;
    if (*((unsigned char *)a2 + 88))
    {
      long long v4 = a2[4];
      *(void *)(result + 80) = *((void *)a2 + 10);
      *(_OWORD *)(result + 64) = v4;
      *((void *)a2 + 9) = 0;
      *((void *)a2 + 10) = 0;
      *((void *)a2 + 8) = 0;
      *(unsigned char *)(result + 88) = 1;
    }
    *(_DWORD *)(result + 96) = *((_DWORD *)a2 + 24);
    *(void *)(result + 104) = result + 104;
    *(void *)(result + 112) = result + 104;
    *(void *)(result + 120) = 0;
    if ((long long *)result == a2)
    {
      __break(1u);
    }
    else
    {
      uint64_t v5 = *((void *)a2 + 15);
      if (v5)
      {
        uint64_t v7 = *((void *)a2 + 13);
        uint64_t v6 = (uint64_t *)*((void *)a2 + 14);
        uint64_t v8 = *v6;
        *(void *)(v8 + 8) = *(void *)(v7 + 8);
        **(void **)(v7 + 8) = v8;
        uint64_t v9 = *(void *)(result + 104);
        *(void *)(v9 + 8) = v6;
        uint64_t *v6 = v9;
        *(void *)(result + 104) = v7;
        *(void *)(v7 + 8) = result + 104;
        *(void *)(result + 120) = v5;
        *((void *)a2 + 15) = 0;
      }
      long long v10 = a2[8];
      *(void *)(result + 144) = *((void *)a2 + 18);
      *(_OWORD *)(result + 128) = v10;
      *((void *)a2 + 17) = 0;
      *((void *)a2 + 18) = 0;
      *((void *)a2 + 16) = 0;
      *(unsigned char *)(result + 152) = 1;
    }
  }
  return result;
}

uint64_t AMSCore::AnisetteUtils::anonymous namespace'::handleAction(uint64_t result)
{
  uint64_t v1 = result;
  long long v2 = (AMSCore::HTTPResponseAction *)(result + 536);
  int v3 = *(unsigned __int8 *)(result + 1319);
  if (v3 == 2)
  {
    uint64_t v15 = *(void *)(result + 1384);
    if (!*(unsigned char *)(v15 + 472)) {
      goto LABEL_70;
    }
    AMSCore::HTTPResponseAction::HTTPResponseAction(result + 536, v15 + 8);
    if (*(unsigned char *)(v1 + 488))
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v1 + 24));
      *(unsigned char *)(v1 + 488) = 0;
    }
    AMSCore::HTTPResponseAction::HTTPResponseAction(v1 + 24, (uint64_t)v2);
    *(unsigned char *)(v1 + 488) = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction(v2);
    uint64_t v16 = *(void *)(v1 + 1392);
    if (v16 && !atomic_fetch_add((atomic_ullong *volatile)(v16 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      std::runtime_error v17 = *(std::__shared_weak_count **)(v1 + 1392);
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    char v18 = *(std::__shared_weak_count **)(v1 + 1184);
    if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    char v19 = *(std::__shared_weak_count **)(v1 + 1264);
    if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    uint64_t v20 = *(std::__shared_weak_count **)(v1 + 1280);
    if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      if ((*(char *)(v1 + 1127) & 0x80000000) == 0)
      {
LABEL_40:
        if (*(unsigned char *)(v1 + 1088) && *(char *)(v1 + 1087) < 0) {
          operator delete(*(void **)(v1 + 1064));
        }
        if (*(char *)(v1 + 1151) < 0) {
          operator delete(*(void **)(v1 + 1128));
        }
        uint64_t v12 = 0;
        char v13 = 0;
        uint64_t v14 = 0;
        *(void *)&long long v11 = *(void *)(v1 + 1328);
        goto LABEL_60;
      }
    }
    else if ((*(char *)(v1 + 1127) & 0x80000000) == 0)
    {
      goto LABEL_40;
    }
    operator delete(*(void **)(v1 + 1104));
    goto LABEL_40;
  }
  if (v3 != 1)
  {
    uint64_t v21 = *(void *)(result + 1352);
    if (!*(unsigned char *)(v21 + 472)) {
      goto LABEL_70;
    }
    AMSCore::HTTPResponseAction::HTTPResponseAction(result + 536, v21 + 8);
    if (*(unsigned char *)(v1 + 488))
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v1 + 24));
      *(unsigned char *)(v1 + 488) = 0;
    }
    AMSCore::HTTPResponseAction::HTTPResponseAction(v1 + 24, (uint64_t)v2);
    *(unsigned char *)(v1 + 488) = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction(v2);
    uint64_t v22 = *(void *)(v1 + 1360);
    if (v22 && !atomic_fetch_add((atomic_ullong *volatile)(v22 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      std::error_code v23 = *(std::__shared_weak_count **)(v1 + 1360);
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    int v24 = *(std::__shared_weak_count **)(v1 + 1184);
    if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
      if ((*(char *)(v1 + 1063) & 0x80000000) == 0)
      {
LABEL_56:
        if (*(unsigned char *)(v1 + 1024) && *(char *)(v1 + 1023) < 0) {
          operator delete(*(void **)(v1 + 1000));
        }
        uint64_t v12 = *(void *)(v1 + 1344);
        long long v11 = *(_OWORD *)(v1 + 1328);
        char v13 = *(unsigned char *)(v1 + 1433);
        uint64_t v14 = *(void *)(v1 + 1320);
        goto LABEL_60;
      }
    }
    else if ((*(char *)(v1 + 1063) & 0x80000000) == 0)
    {
      goto LABEL_56;
    }
    operator delete(*(void **)(v1 + 1040));
    goto LABEL_56;
  }
  uint64_t v4 = *(void *)(result + 1368);
  if (!*(unsigned char *)(v4 + 472))
  {
LABEL_70:
    __break(1u);
    return result;
  }
  AMSCore::HTTPResponseAction::HTTPResponseAction(result + 536, v4 + 8);
  if (*(unsigned char *)(v1 + 488))
  {
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v1 + 24));
    *(unsigned char *)(v1 + 488) = 0;
  }
  AMSCore::HTTPResponseAction::HTTPResponseAction(v1 + 24, (uint64_t)v2);
  *(unsigned char *)(v1 + 488) = 1;
  AMSCore::HTTPResponseAction::~HTTPResponseAction(v2);
  uint64_t v5 = *(void *)(v1 + 1376);
  if (v5 && !atomic_fetch_add((atomic_ullong *volatile)(v5 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v6 = *(std::__shared_weak_count **)(v1 + 1376);
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(v1 + 1184);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(v1 + 1248);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(v1 + 1232);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = *(std::__shared_weak_count **)(v1 + 1216);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  long long v11 = 0uLL;
  if (*(char *)(v1 + 1175) < 0)
  {
    operator delete(*(void **)(v1 + 1152));
    long long v11 = 0uLL;
  }
  uint64_t v12 = 0;
  char v13 = 0;
  uint64_t v14 = 0;
LABEL_60:
  size_t v25 = *(std::__shared_weak_count **)(v1 + 1200);
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    long long v26 = v11;
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    long long v11 = v26;
  }
  *(void *)(v1 + 1424) = v14;
  *(unsigned char *)(v1 + 1434) = v13;
  *(void *)(v1 + 1416) = v12;
  *(_OWORD *)(v1 + 1400) = v11;
  *(void *)(v1 + 536) = v1 + 16;
  *(void *)uint64_t v1 = 0;
  return AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend((uint64_t)v2);
}

void AMSCore::AnisetteUtils::anonymous namespace'::handleAction(char *__p)
{
  if (!*(void *)__p)
  {
    uint64_t v12 = (void *)*((void *)__p + 178);
    char v11 = __p[1434];
    long long v10 = (std::__shared_weak_count *)*((void *)__p + 177);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)__p + 176);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)__p + 175);
    goto LABEL_59;
  }
  if (__p[1319])
  {
    if (__p[1319] == 1)
    {
      uint64_t v2 = *((void *)__p + 172);
      if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        int v3 = (std::__shared_weak_count *)*((void *)__p + 172);
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
      uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 148);
      if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      uint64_t v5 = (std::__shared_weak_count *)*((void *)__p + 156);
      if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      uint64_t v6 = (std::__shared_weak_count *)*((void *)__p + 154);
      if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      uint64_t v7 = (std::__shared_weak_count *)*((void *)__p + 152);
      if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (__p[1175] < 0) {
        operator delete(*((void **)__p + 144));
      }
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      long long v10 = 0;
      char v11 = 0;
      uint64_t v12 = 0;
      char v13 = (std::__shared_weak_count *)*((void *)__p + 150);
      if (!v13) {
        goto LABEL_59;
      }
LABEL_57:
      if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      goto LABEL_59;
    }
    uint64_t v17 = *((void *)__p + 174);
    if (v17 && !atomic_fetch_add((atomic_ullong *volatile)(v17 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      char v18 = (std::__shared_weak_count *)*((void *)__p + 174);
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    char v19 = (std::__shared_weak_count *)*((void *)__p + 148);
    if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    uint64_t v20 = (std::__shared_weak_count *)*((void *)__p + 158);
    if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    uint64_t v21 = (std::__shared_weak_count *)*((void *)__p + 160);
    if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    if (__p[1127] < 0) {
      operator delete(*((void **)__p + 138));
    }
    if (__p[1088] && __p[1087] < 0) {
      operator delete(*((void **)__p + 133));
    }
    if (__p[1151] < 0) {
      operator delete(*((void **)__p + 141));
    }
    uint64_t v9 = 0;
    long long v10 = 0;
    char v11 = 0;
    uint64_t v12 = 0;
    uint64_t v8 = (std::__shared_weak_count *)*((void *)__p + 166);
    char v13 = (std::__shared_weak_count *)*((void *)__p + 150);
    if (v13) {
      goto LABEL_57;
    }
  }
  else
  {
    uint64_t v14 = *((void *)__p + 170);
    if (v14 && !atomic_fetch_add((atomic_ullong *volatile)(v14 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v15 = (std::__shared_weak_count *)*((void *)__p + 170);
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    uint64_t v16 = (std::__shared_weak_count *)*((void *)__p + 148);
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    if (__p[1063] < 0) {
      operator delete(*((void **)__p + 130));
    }
    if (__p[1024] && __p[1023] < 0) {
      operator delete(*((void **)__p + 125));
    }
    long long v10 = (std::__shared_weak_count *)*((void *)__p + 168);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)__p + 167);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)__p + 166);
    char v11 = __p[1433];
    uint64_t v12 = (void *)*((void *)__p + 165);
    char v13 = (std::__shared_weak_count *)*((void *)__p + 150);
    if (v13) {
      goto LABEL_57;
    }
  }
LABEL_59:
  uint64_t v22 = (char *)*((void *)__p + 66);
  if (v22 == __p + 504)
  {
    (*(void (**)(char *))(*((void *)__p + 63) + 32))(__p + 504);
    if (__p[488]) {
LABEL_63:
    }
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 24));
  }
  else
  {
    if (v22) {
      (*(void (**)(char *))(*(void *)v22 + 40))(v22);
    }
    if (__p[488]) {
      goto LABEL_63;
    }
  }
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (!v8 || atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((v11 & 0x80) == 0) {
      goto LABEL_76;
    }
    goto LABEL_75;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (v11 < 0) {
LABEL_75:
  }
    operator delete(v12);
LABEL_76:
  operator delete(__p);
}

uint64_t AMSCore::AnisetteUtils::anonymous namespace'::handleSyncMachineAction(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 896);
  if (*(unsigned char *)(v1 + 88))
  {
    uint64_t v2 = result;
    int v3 = (const std::runtime_error *)(result + 536);
    char v4 = *(unsigned char *)(v1 + 80);
    if (!v4)
    {
      std::runtime_error::runtime_error((std::runtime_error *)(result + 536), (const std::runtime_error *)(v1 + 8));
      *(_OWORD *)(v2 + 552) = *(_OWORD *)(v1 + 24);
      *(void *)(v2 + 536) = &unk_1EDC827D8;
      uint64_t v5 = (void *)(v1 + 48);
      uint64_t v6 = *(void *)(v1 + 48);
      *(void *)(v2 + 568) = *(void *)(v1 + 40);
      uint64_t v7 = v2 + 576;
      *(void *)(v2 + 576) = v6;
      uint64_t v8 = *(void *)(v1 + 56);
      *(void *)(v2 + 584) = v8;
      if (v8)
      {
        *(void *)(v6 + 16) = v7;
        *(void *)(v1 + 40) = v5;
        void *v5 = 0;
        *(void *)(v1 + 56) = 0;
      }
      else
      {
        *(void *)(v2 + 568) = v7;
      }
      uint64_t v9 = *(void *)(v2 + 896);
      *(_OWORD *)(v2 + 592) = *(_OWORD *)(v9 + 64);
      *(void *)(v9 + 64) = 0;
      *(void *)(v9 + 72) = 0;
    }
    *(unsigned char *)(v2 + 608) = v4;
    uint64_t v10 = *(void *)(v2 + 904);
    if (v10 && !atomic_fetch_add((atomic_ullong *volatile)(v10 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      char v11 = *(std::__shared_weak_count **)(v2 + 904);
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = *(std::__shared_weak_count **)(v2 + 800);
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    char v13 = *(std::__shared_weak_count **)(v2 + 832);
    if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v14 = *(std::__shared_weak_count **)(v2 + 816);
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      if ((*(char *)(v2 + 679) & 0x80000000) == 0) {
        goto LABEL_20;
      }
    }
    else if ((*(char *)(v2 + 679) & 0x80000000) == 0)
    {
LABEL_20:
      if (*(unsigned char *)(v2 + 640) && *(char *)(v2 + 639) < 0) {
        operator delete(*(void **)(v2 + 616));
      }
      if (*(char *)(v2 + 791) < 0)
      {
        operator delete(*(void **)(v2 + 768));
        if (*(unsigned char *)(v2 + 608))
        {
LABEL_25:
          uint64_t v15 = (char *)operator new(0x40uLL);
          *(void *)(v2 + 744) = v15;
          *(_OWORD *)(v2 + 752) = xmmword_18DDE9B90;
          strcpy(v15, "com.apple.AppleMediaServicesCore.AnisetteUtils.syncMachine");
          uint64_t v16 = (char *)operator new(0x19uLL);
          *(void *)(v2 + 720) = v16;
          *(void *)(v2 + 736) = 0x8000000000000019;
          *(void *)(v2 + 728) = 23;
          strcpy(v16, "Anisette (Sync Machine)");
          *(unsigned char *)(v2 + 680) = 0;
          *(unsigned char *)(v2 + 712) = 0;
          v19[0] = 0;
          v19[24] = 0;
          v19[32] = 0;
          v19[48] = 0;
          v19[56] = 0;
          v19[128] = 0;
          v19[136] = 0;
          v19[288] = 0;
          v19[296] = 0;
          v19[300] = 0;
          v19[304] = 0;
          v19[336] = 0;
          __int16 v20 = 0;
          v27[0] = 0;
          v27[32] = 0;
          v27[40] = 3;
          long long v21 = *(_OWORD *)(v2 + 744);
          uint64_t v22 = *(void *)(v2 + 760);
          *(void *)(v2 + 744) = 0;
          *(void *)(v2 + 752) = 0;
          *(void *)(v2 + 760) = 0;
          char v23 = 1;
          long long v24 = *(_OWORD *)(v2 + 720);
          uint64_t v25 = *(void *)(v2 + 736);
          *(void *)(v2 + 728) = 0;
          *(void *)(v2 + 736) = 0;
          *(void *)(v2 + 720) = 0;
          char v26 = 1;
          std::__optional_storage_base<AMSCore::AuthenticateResult,false>::__assign_from[abi:fe180100]<std::__optional_move_assign_base<AMSCore::AuthenticateResult,false>>((uint64_t)v27, (long long *)(v2 + 680));
          if (*(unsigned char *)(v2 + 488))
          {
            AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v2 + 24));
            *(unsigned char *)(v2 + 488) = 0;
          }
          AMSCore::HTTPResponseAction::HTTPResponseAction(v2 + 24, (uint64_t)v19);
          *(unsigned char *)(v2 + 488) = 1;
          AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v19);
          if (!*(unsigned char *)(v2 + 712)) {
            goto LABEL_33;
          }
          uint64_t v17 = *(std::__shared_weak_count **)(v2 + 704);
          if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          char v18 = *(std::__shared_weak_count **)(v2 + 688);
          if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
            if ((*(char *)(v2 + 743) & 0x80000000) == 0)
            {
LABEL_34:
              if ((*(char *)(v2 + 767) & 0x80000000) == 0) {
                goto LABEL_35;
              }
              goto LABEL_46;
            }
          }
          else
          {
LABEL_33:
            if ((*(char *)(v2 + 743) & 0x80000000) == 0) {
              goto LABEL_34;
            }
          }
          operator delete(*(void **)(v2 + 720));
          if ((*(char *)(v2 + 767) & 0x80000000) == 0)
          {
LABEL_35:
            if (*(unsigned char *)(v2 + 608))
            {
LABEL_36:
              *(void *)(v2 + 536) = v2 + 16;
              *(void *)uint64_t v2 = 0;
              return AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend((uint64_t)v3);
            }
LABEL_41:
            ((void (*)(const std::runtime_error *))v3->~runtime_error)(v3);
            goto LABEL_36;
          }
LABEL_46:
          operator delete(*(void **)(v2 + 744));
          if (*(unsigned char *)(v2 + 608)) {
            goto LABEL_36;
          }
          goto LABEL_41;
        }
      }
      else if (*(unsigned char *)(v2 + 608))
      {
        goto LABEL_25;
      }
      AMSCore::HTTPResponseAction::createCancelAction((AMSCore::HTTPResponseAction *)v19, v3);
      if (*(unsigned char *)(v2 + 488))
      {
        AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v2 + 24));
        *(unsigned char *)(v2 + 488) = 0;
      }
      AMSCore::HTTPResponseAction::HTTPResponseAction(v2 + 24, (uint64_t)v19);
      *(unsigned char *)(v2 + 488) = 1;
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v19);
      if (*(unsigned char *)(v2 + 608)) {
        goto LABEL_36;
      }
      goto LABEL_41;
    }
    operator delete(*(void **)(v2 + 656));
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

void sub_18DAD27A8(void *a1)
{
  if (!*(unsigned char *)(v2 + 608)) {
    (**v1)(v1);
  }
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::AnisetteUtils::anonymous namespace'::handleSyncMachineAction(char *__p)
{
  if (!*(void *)__p) {
    goto LABEL_20;
  }
  uint64_t v2 = *((void *)__p + 113);
  if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    int v3 = (std::__shared_weak_count *)*((void *)__p + 113);
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  char v4 = (std::__shared_weak_count *)*((void *)__p + 100);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)__p + 104);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)__p + 102);
  if (!v6 || atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((__p[679] & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (__p[679] < 0) {
LABEL_14:
  }
    operator delete(*((void **)__p + 82));
LABEL_15:
  if (__p[640] && __p[639] < 0) {
    operator delete(*((void **)__p + 77));
  }
  if (__p[791] < 0) {
    operator delete(*((void **)__p + 96));
  }
LABEL_20:
  uint64_t v7 = (char *)*((void *)__p + 66);
  if (v7 == __p + 504)
  {
    (*(void (**)(char *))(*((void *)__p + 63) + 32))(__p + 504);
    if (__p[488]) {
LABEL_24:
    }
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 24));
  }
  else
  {
    if (v7) {
      (*(void (**)(char *))(*(void *)v7 + 40))(v7);
    }
    if (__p[488]) {
      goto LABEL_24;
    }
  }
  int v8 = __p[887];
  int v9 = __p[871];
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v9 && v8 < 0) {
    operator delete(*((void **)__p + 111));
  }
  operator delete(__p);
}

uint64_t std::optional<AMSCore::AuthenticateResult>::~optional(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    int v3 = *(std::__shared_weak_count **)(a1 + 8);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void AMSCore::AnisetteUtils::anonymous namespace'::handleProvisionAction(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 936);
  if (!*(unsigned char *)(v1 + 88)) {
    goto LABEL_69;
  }
  uint64_t v3 = a1 + 808;
  char v4 = (std::runtime_error *)(a1 + 616);
  uint64_t v5 = (std::string *)(a1 + 736);
  int v35 = (long long *)(a1 + 696);
  long long v36 = (long long *)(a1 + 784);
  char v43 = (void *)(a1 + 840);
  char v44 = (void *)(a1 + 824);
  char v41 = (_DWORD *)(a1 + 952);
  char v42 = (void *)(a1 + 856);
  uint64_t v6 = (unsigned int *)(a1 + 964);
  uint64_t v37 = (long long *)(a1 + 760);
  uint64_t v38 = a1 + 16;
  __int16 v39 = (_OWORD *)(a1 + 632);
  uint64_t v40 = a1 + 656;
  uint64_t v7 = (_DWORD *)(a1 + 752);
  int v8 = (std::runtime_error *)(a1 + 536);
  char v9 = *(unsigned char *)(v1 + 80);
  if (!v9)
  {
    std::runtime_error::runtime_error(v4, (const std::runtime_error *)(v1 + 8));
    *__int16 v39 = *(_OWORD *)(v1 + 24);
    *(void *)(a1 + 616) = &unk_1EDC827D8;
    uint64_t v10 = (void *)(v1 + 48);
    uint64_t v11 = *(void *)(v1 + 48);
    *(void *)(a1 + 648) = *(void *)(v1 + 40);
    *(void *)(a1 + 656) = v11;
    uint64_t v12 = *(void *)(v1 + 56);
    *(void *)(a1 + 664) = v12;
    if (v12)
    {
      *(void *)(v11 + 16) = v40;
      *(void *)(v1 + 40) = v10;
      void *v10 = 0;
      *(void *)(v1 + 56) = 0;
    }
    else
    {
      *(void *)(a1 + 648) = v40;
    }
    uint64_t v13 = *(void *)(a1 + 936);
    *(_OWORD *)(a1 + 672) = *(_OWORD *)(v13 + 64);
    *(void *)(v13 + 64) = 0;
    *(void *)(v13 + 72) = 0;
  }
  *(unsigned char *)(a1 + 688) = v9;
  std::expected<void,AMSCore::Error>::operator=[abi:fe180100](v8, v4);
  if (*(unsigned char *)(a1 + 688))
  {
    uint64_t v14 = *(void *)(a1 + 944);
    if (!v14)
    {
LABEL_12:
      uint64_t v15 = *(std::__shared_weak_count **)(a1 + 816);
      if (!v15) {
        goto LABEL_16;
      }
      goto LABEL_13;
    }
  }
  else
  {
    ((void (*)(std::runtime_error *))v4->~runtime_error)(v4);
    uint64_t v14 = *(void *)(a1 + 944);
    if (!v14) {
      goto LABEL_12;
    }
  }
  if (atomic_fetch_add((atomic_ullong *volatile)(v14 + 8), 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_12;
  }
  uint64_t v16 = *(std::__shared_weak_count **)(a1 + 944);
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 816);
  if (!v15) {
    goto LABEL_16;
  }
LABEL_13:
  if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_16:
  uint64_t v17 = *(std::__shared_weak_count **)(a1 + 864);
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    char v18 = *(std::__shared_weak_count **)(a1 + 848);
    if (!v18) {
      goto LABEL_22;
    }
  }
  else
  {
    char v18 = *(std::__shared_weak_count **)(a1 + 848);
    if (!v18) {
      goto LABEL_22;
    }
  }
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_22:
  char v19 = *(std::__shared_weak_count **)(a1 + 832);
  if (!v19 || atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*(char *)(a1 + 759) & 0x80000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  if (*(char *)(a1 + 759) < 0) {
LABEL_25:
  }
    operator delete(v5->__r_.__value_.__l.__data_);
LABEL_26:
  if (*(unsigned char *)(a1 + 608))
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v45);
    AMSCore::Logger::log<char [34]>(v45, 2u, (uint64_t)"networking", 10, "Machine provisioned successfully.");
    uint64_t v29 = v46;
    if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
    uint64_t v30 = (char *)operator new(0x40uLL);
    *(void *)(a1 + 784) = v30;
    *(void *)(a1 + 800) = 0x8000000000000040;
    *(void *)(a1 + 792) = 63;
    strcpy(v30, "com.apple.AppleMediaServicesCore.AnisetteUtils.provisionMachine");
    uint64_t v31 = (char *)operator new(0x20uLL);
    *(void *)(a1 + 760) = v31;
    *(_OWORD *)(a1 + 768) = xmmword_18DDE9B60;
    strcpy(v31, "Anisette (Provision Machine)");
    *(unsigned char *)(a1 + 696) = 0;
    *(unsigned char *)(a1 + 728) = 0;
    LOBYTE(v45) = 0;
    char v47 = 0;
    char v48 = 0;
    char v49 = 0;
    char v50 = 0;
    char v51 = 0;
    char v52 = 0;
    char v53 = 0;
    char v54 = 0;
    char v55 = 0;
    char v56 = 0;
    char v57 = 0;
    __int16 v58 = 0;
    v65[0] = 0;
    v65[32] = 0;
    v65[40] = 3;
    long long v59 = *v36;
    uint64_t v60 = *((void *)v36 + 2);
    *(void *)long long v36 = 0;
    *((void *)v36 + 1) = 0;
    *((void *)v36 + 2) = 0;
    char v61 = 1;
    long long v62 = *v37;
    uint64_t v63 = *((void *)v37 + 2);
    *((void *)v37 + 1) = 0;
    *((void *)v37 + 2) = 0;
    *(void *)uint64_t v37 = 0;
    char v64 = 1;
    std::__optional_storage_base<AMSCore::AuthenticateResult,false>::__assign_from[abi:fe180100]<std::__optional_move_assign_base<AMSCore::AuthenticateResult,false>>((uint64_t)v65, v35);
    if (*(unsigned char *)(a1 + 488))
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(a1 + 24));
      *(unsigned char *)(a1 + 488) = 0;
    }
    AMSCore::HTTPResponseAction::HTTPResponseAction(a1 + 24, (uint64_t)&v45);
    *(unsigned char *)(a1 + 488) = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v45);
    if (*(unsigned char *)(a1 + 728))
    {
      uint64_t v32 = *(std::__shared_weak_count **)(a1 + 720);
      if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
      uint64_t v33 = *(std::__shared_weak_count **)(a1 + 704);
      if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (*(char *)(a1 + 783) < 0) {
      operator delete(*(void **)v37);
    }
    uint64_t v34 = v38;
    if (*(char *)(a1 + 807) < 0) {
      operator delete(*(void **)v36);
    }
    goto LABEL_66;
  }
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v4);
  AMSCore::Logger::log<char [38],AMSCore::Error>((uint64_t)v4->__vftable, (uint64_t)v8);
  __int16 v20 = *(std::__shared_weak_count **)(a1 + 624);
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  unsigned int v21 = *v6 + 1;
  unsigned int *v6 = v21;
  if (v21 < 6)
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v4);
    AMSCore::Logger::log<char [33],unsigned int,char [5],unsigned int>((uint64_t)v4->__vftable);
    uint64_t v22 = *(std::__shared_weak_count **)(a1 + 624);
    if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    int v23 = *(char *)(a1 + 969);
    std::string::size_type v24 = *(void *)(a1 + 880);
    uint64_t v25 = *(const std::string::value_type **)(a1 + 872);
    if (v23 < 0)
    {
      std::string::__init_copy_ctor_external(v5, v25, v24);
    }
    else
    {
      *(void *)(a1 + 736) = v25;
      *(void *)(a1 + 744) = v24;
      _DWORD *v7 = *v41;
      *(_DWORD *)((char *)v7 + 3) = *(_DWORD *)((char *)v41 + 3);
      *(unsigned char *)(a1 + 759) = v23;
    }
    uint64_t v26 = *(void *)(a1 + 896);
    *(void *)(a1 + 824) = *(void *)(a1 + 888);
    *(void *)(a1 + 832) = v26;
    if (v26) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v27 = *(void *)(a1 + 912);
    *(void *)(a1 + 840) = *(void *)(a1 + 904);
    *(void *)(a1 + 848) = v27;
    if (v27) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v28 = *(void *)(a1 + 928);
    *(void *)(a1 + 856) = *(void *)(a1 + 920);
    *(void *)(a1 + 864) = v28;
    if (v28) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
    }
    AMSCore::ProvisionTask::perform(v3, (uint64_t)v5, v44, *(unsigned char *)(a1 + 968), v43, v42);
  }
  if (*(unsigned char *)(a1 + 608))
  {
LABEL_69:
    __break(1u);
    return;
  }
  AMSCore::HTTPResponseAction::createCancelAction((AMSCore::HTTPResponseAction *)&v45, v8);
  uint64_t v34 = v38;
  if (*(unsigned char *)(a1 + 488))
  {
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(a1 + 24));
    *(unsigned char *)(a1 + 488) = 0;
  }
  AMSCore::HTTPResponseAction::HTTPResponseAction(a1 + 24, (uint64_t)&v45);
  *(unsigned char *)(a1 + 488) = 1;
  AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v45);
LABEL_66:
  if (!*(unsigned char *)(a1 + 608)) {
    ((void (*)(std::runtime_error *))v8->~runtime_error)(v8);
  }
  *(void *)(a1 + 536) = v34;
  *(void *)a1 = 0;
  AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend((uint64_t)v8);
}

void sub_18DAD3314(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (!*(unsigned char *)(v20 + 608)) {
    (**v21)(v21);
  }
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::AnisetteUtils::anonymous namespace'::handleProvisionAction(char *__p)
{
  if (*(void *)__p)
  {
    uint64_t v2 = *((void *)__p + 118);
    if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 118);
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    char v4 = (std::__shared_weak_count *)*((void *)__p + 102);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)*((void *)__p + 108);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = (std::__shared_weak_count *)*((void *)__p + 106);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    uint64_t v7 = (std::__shared_weak_count *)*((void *)__p + 104);
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if ((__p[759] & 0x80000000) == 0)
      {
LABEL_17:
        if (__p[608]) {
          goto LABEL_18;
        }
LABEL_44:
        (**((void (***)(void))__p + 67))();
        goto LABEL_18;
      }
    }
    else if ((__p[759] & 0x80000000) == 0)
    {
      goto LABEL_17;
    }
    operator delete(*((void **)__p + 92));
    if (__p[608]) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_18:
  int v8 = (char *)*((void *)__p + 66);
  if (v8 == __p + 504)
  {
    (*(void (**)(char *))(*((void *)__p + 63) + 32))(__p + 504);
    if (__p[488]) {
LABEL_22:
    }
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 24));
  }
  else
  {
    if (v8) {
      (*(void (**)(char *))(*(void *)v8 + 40))(v8);
    }
    if (__p[488]) {
      goto LABEL_22;
    }
  }
  uint64_t v9 = *((void *)__p + 116);
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v9 && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)__p + 116) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v10 = (std::__shared_weak_count *)*((void *)__p + 116);
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = *((void *)__p + 114);
  if (v11 && !atomic_fetch_add((atomic_ullong *volatile)(v11 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v12 = (std::__shared_weak_count *)*((void *)__p + 114);
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v13 = *((void *)__p + 112);
  if (!v13 || atomic_fetch_add((atomic_ullong *volatile)(v13 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((__p[969] & 0x80000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)__p + 112);
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (__p[969] < 0) {
LABEL_34:
  }
    operator delete(*((void **)__p + 109));
LABEL_35:
  operator delete(__p);
}

uint64_t AMSCore::Logger::log<char [33],unsigned int,char [5],unsigned int>(uint64_t result)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= 2u)
  {
    uint64_t v1 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v6);
    uint64_t v2 = *(void *)(v6[0] - 24);
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v6, (uint64_t)"Provisioning machine. attempt = ", 32);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v6, (uint64_t)" of ", 4);
    std::ostream::operator<<();
    uint64_t v3 = v6[6];
    char v4 = (char *)v6 + *(void *)(v6[0] - 24);
    if ((v4[32] & 5) != 0)
    {
      uint64_t v5 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v4 + 5) + 32))(&rep);
      uint64_t v5 = v13;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v10 = 2;
    uint64_t v11 = v3;
    uint64_t v12 = v5;
    (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v1 + 16) + 16))(*(void *)(v1 + 16), "networking", 10, &rep);
    v6[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v6[1] = MEMORY[0x1E4FBA470] + 16;
    if (v7 < 0) {
      operator delete((void *)v6[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v8);
  }
  return result;
}

void sub_18DAD39FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Logger::log<char [38],AMSCore::Error>(uint64_t result, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= 4u)
  {
    uint64_t v3 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v8);
    uint64_t v4 = *(void *)(v8[0] - 24);
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)"Machine provisioning failed. error = ", 37);
    AMSCore::operator<<(v8, a2);
    uint64_t v5 = v8[6];
    uint64_t v6 = (char *)v8 + *(void *)(v8[0] - 24);
    if ((v6[32] & 5) != 0)
    {
      uint64_t v7 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v6 + 5) + 32))(&rep);
      uint64_t v7 = v15;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v12 = 4;
    uint64_t v13 = v5;
    uint64_t v14 = v7;
    (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v3 + 16) + 16))(*(void *)(v3 + 16), "networking", 10, &rep);
    v8[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v8[1] = MEMORY[0x1E4FBA470] + 16;
    if (v9 < 0) {
      operator delete((void *)v8[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v10);
  }
  return result;
}

void sub_18DAD3CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::AnisetteUtils::anonymous namespace'::handleEraseProvisioningAction(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 832);
  if (*(unsigned char *)(v1 + 88))
  {
    uint64_t v2 = result;
    uint64_t v3 = (void (***)(void))(result + 536);
    char v4 = *(unsigned char *)(v1 + 80);
    if (!v4)
    {
      std::runtime_error::runtime_error((std::runtime_error *)(result + 536), (const std::runtime_error *)(v1 + 8));
      *(_OWORD *)(v2 + 552) = *(_OWORD *)(v1 + 24);
      *(void *)(v2 + 536) = &unk_1EDC827D8;
      uint64_t v5 = (void *)(v1 + 48);
      uint64_t v6 = *(void *)(v1 + 48);
      *(void *)(v2 + 568) = *(void *)(v1 + 40);
      uint64_t v7 = v2 + 576;
      *(void *)(v2 + 576) = v6;
      uint64_t v8 = *(void *)(v1 + 56);
      *(void *)(v2 + 584) = v8;
      if (v8)
      {
        *(void *)(v6 + 16) = v7;
        *(void *)(v1 + 40) = v5;
        void *v5 = 0;
        *(void *)(v1 + 56) = 0;
      }
      else
      {
        *(void *)(v2 + 568) = v7;
      }
      uint64_t v9 = *(void *)(v2 + 832);
      *(_OWORD *)(v2 + 592) = *(_OWORD *)(v9 + 64);
      *(void *)(v9 + 64) = 0;
      *(void *)(v9 + 72) = 0;
    }
    *(unsigned char *)(v2 + 608) = v4;
    uint64_t v10 = *(void *)(v2 + 840);
    if (v10 && !atomic_fetch_add((atomic_ullong *volatile)(v10 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v11 = *(std::__shared_weak_count **)(v2 + 840);
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    char v12 = *(std::__shared_weak_count **)(v2 + 784);
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    if (*(unsigned char *)(v2 + 680))
    {
      if (*(char *)(v2 + 679) < 0) {
        operator delete(*(void **)(v2 + 656));
      }
      if (*(unsigned char *)(v2 + 640) && *(char *)(v2 + 639) < 0) {
        operator delete(*(void **)(v2 + 616));
      }
    }
    if (!*(unsigned char *)(v2 + 608))
    {
      (**(void (***)(void))(v2 + 536))(v3);
      v17[0] = 0;
      char v18 = 0;
      char v19 = 0;
      char v20 = 0;
      char v21 = 0;
      char v22 = 0;
      char v23 = 0;
      char v24 = 0;
      char v25 = 0;
      char v26 = 0;
      char v27 = 0;
      char v28 = 0;
      __int16 v29 = 0;
      LOBYTE(v30) = 0;
      char v32 = 0;
      LOBYTE(v33) = 0;
      char v35 = 0;
      v36[0] = 0;
      char v37 = 0;
      char v38 = 1;
      if (*(unsigned char *)(v2 + 488))
      {
        AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v2 + 24));
        *(unsigned char *)(v2 + 488) = 0;
      }
      AMSCore::HTTPResponseAction::HTTPResponseAction(v2 + 24, (uint64_t)v17);
      *(unsigned char *)(v2 + 488) = 1;
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v17);
      goto LABEL_39;
    }
    uint64_t v13 = (char *)operator new(0x48uLL);
    *(void *)(v2 + 752) = v13;
    *(void *)(v2 + 768) = 0x8000000000000048;
    *(void *)(v2 + 760) = 64;
    strcpy(v13, "com.apple.AppleMediaServicesCore.AnisetteUtils.eraseProvisioning");
    uint64_t v14 = (char *)operator new(0x20uLL);
    *(void *)(v2 + 728) = v14;
    *(_OWORD *)(v2 + 736) = xmmword_18DDE9BA0;
    strcpy(v14, "Anisette (Erase Provisioning)");
    *(unsigned char *)(v2 + 688) = 0;
    *(unsigned char *)(v2 + 720) = 0;
    v17[0] = 0;
    char v18 = 0;
    char v19 = 0;
    char v20 = 0;
    char v21 = 0;
    char v22 = 0;
    char v23 = 0;
    char v24 = 0;
    char v25 = 0;
    char v26 = 0;
    char v27 = 0;
    char v28 = 0;
    __int16 v29 = 0;
    v36[0] = 0;
    char v37 = 0;
    char v38 = 3;
    long long v30 = *(_OWORD *)(v2 + 752);
    uint64_t v31 = *(void *)(v2 + 768);
    *(void *)(v2 + 752) = 0;
    *(void *)(v2 + 760) = 0;
    *(void *)(v2 + 768) = 0;
    char v32 = 1;
    long long v33 = *(_OWORD *)(v2 + 728);
    uint64_t v34 = *(void *)(v2 + 744);
    *(void *)(v2 + 736) = 0;
    *(void *)(v2 + 744) = 0;
    *(void *)(v2 + 728) = 0;
    char v35 = 1;
    std::__optional_storage_base<AMSCore::AuthenticateResult,false>::__assign_from[abi:fe180100]<std::__optional_move_assign_base<AMSCore::AuthenticateResult,false>>((uint64_t)v36, (long long *)(v2 + 688));
    if (*(unsigned char *)(v2 + 488))
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v2 + 24));
      *(unsigned char *)(v2 + 488) = 0;
    }
    AMSCore::HTTPResponseAction::HTTPResponseAction(v2 + 24, (uint64_t)v17);
    *(unsigned char *)(v2 + 488) = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v17);
    if (!*(unsigned char *)(v2 + 720)) {
      goto LABEL_28;
    }
    uint64_t v15 = *(std::__shared_weak_count **)(v2 + 712);
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    uint64_t v16 = *(std::__shared_weak_count **)(v2 + 696);
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      if ((*(char *)(v2 + 751) & 0x80000000) == 0)
      {
LABEL_29:
        if ((*(char *)(v2 + 775) & 0x80000000) == 0) {
          goto LABEL_30;
        }
        goto LABEL_37;
      }
    }
    else
    {
LABEL_28:
      if ((*(char *)(v2 + 751) & 0x80000000) == 0) {
        goto LABEL_29;
      }
    }
    operator delete(*(void **)(v2 + 728));
    if ((*(char *)(v2 + 775) & 0x80000000) == 0)
    {
LABEL_30:
      if (!*(unsigned char *)(v2 + 608)) {
        goto LABEL_38;
      }
      goto LABEL_39;
    }
LABEL_37:
    operator delete(*(void **)(v2 + 752));
    if (!*(unsigned char *)(v2 + 608)) {
LABEL_38:
    }
      (**v3)(v3);
LABEL_39:
    *(void *)(v2 + 536) = v2 + 16;
    *(void *)uint64_t v2 = 0;
    return AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend((uint64_t)v3);
  }
  __break(1u);
  return result;
}

void sub_18DAD41B4(void *a1)
{
  operator delete(v3);
  if (!*(unsigned char *)(v2 + 608)) {
    (**v1)(v1);
  }
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::AnisetteUtils::anonymous namespace'::handleEraseProvisioningAction(char *__p)
{
  if (*(void *)__p)
  {
    uint64_t v2 = *((void *)__p + 105);
    if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 105);
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    char v4 = (std::__shared_weak_count *)*((void *)__p + 98);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    if (__p[680])
    {
      if (__p[679] < 0) {
        operator delete(*((void **)__p + 82));
      }
      if (__p[640] && __p[639] < 0) {
        operator delete(*((void **)__p + 77));
      }
    }
  }
  uint64_t v5 = (char *)*((void *)__p + 66);
  if (v5 == __p + 504)
  {
    (*(void (**)(char *))(*((void *)__p + 63) + 32))(__p + 504);
    if (__p[488]) {
LABEL_18:
    }
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 24));
  }
  else
  {
    if (v5) {
      (*(void (**)(char *))(*(void *)v5 + 40))(v5);
    }
    if (__p[488]) {
      goto LABEL_18;
    }
  }
  int v6 = __p[848];
  int v7 = __p[823];
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v7 && v6 < 0) {
    operator delete(*((void **)__p + 103));
  }
  operator delete(__p);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise *,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINS_18HTTPResponseActionEvE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINS_18HTTPResponseActionEvE7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINS_18HTTPResponseActionEvE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINS_18HTTPResponseActionEvE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise *,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 480), 2uLL)) {
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise *,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void AMSCore::Unexpected<AMSCore::Error,AMSCore::FairPlayErrorCode,std::map<std::string,AMSCore::Any>>(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a3 + 1;
  uint64_t v6 = a3[1];
  uint64_t v10 = (unsigned int **)*a3;
  uint64_t v11 = (unsigned int *)v6;
  uint64_t v12 = a3[2];
  if (v12)
  {
    *(void *)(v6 + 16) = &v11;
    *a3 = v5;
    void *v5 = 0;
    a3[2] = 0;
  }
  else
  {
    uint64_t v10 = &v11;
  }
  AMSCore::StringUtils::join<>(&__what_arg);
  *(void *)&v19.__val_ = v4;
  v19.__cat_ = (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance;
  std::system_error::system_error(&v13, v19, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  }
  v13.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  uint64_t v14 = v10;
  uint64_t v15 = v11;
  uint64_t v16 = v12;
  if (v12)
  {
    *((void *)v11 + 2) = &v15;
    uint64_t v10 = &v11;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v14 = &v15;
  }
  long long v17 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v13);
  *(std::error_code *)(a1 + 16) = v13.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  int v7 = v15;
  *(void *)(a1 + 32) = v14;
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = a1 + 40;
  uint64_t v9 = v16;
  *(void *)(a1 + 48) = v16;
  if (v9)
  {
    *((void *)v7 + 2) = v8;
    int v7 = 0;
    uint64_t v14 = &v15;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v8;
  }
  *(_OWORD *)(a1 + 56) = v17;
  long long v17 = 0uLL;
  v13.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v14, v7);
  MEMORY[0x192FA3C30](&v13);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, v11);
}

void sub_18DAD4630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, unsigned int *a11)
{
  if (*(char *)(v11 - 49) < 0) {
    operator delete(*(void **)(v11 - 72));
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void AMSCore::anonymous namespace'::BuiltInFairPlayCoreProvider::~BuiltInFairPlayCoreProvider(AMSCore::_anonymous_namespace_::BuiltInFairPlayCoreProvider *this)
{
}

uint64_t std::__shared_ptr_emplace<AMSCore::anonymous namespace'::BuiltInFairPlayCoreProvider>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMSCore::anonymous namespace'::BuiltInFairPlayCoreProvider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDCA5A10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::anonymous namespace'::BuiltInFairPlayCoreProvider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDCA5A10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AMSCore::ErrorKeybagProvider::getSyncData@<X0>(AMSCore::ErrorKeybagProvider *this@<X0>, uint64_t a2@<X8>)
{
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&>((uint64_t)&v8, (const std::runtime_error *)((char *)this + 8));
  std::runtime_error::runtime_error((std::runtime_error *)a2, &v8);
  *(_OWORD *)(a2 + 16) = v9;
  *(void *)a2 = &unk_1EDC827D8;
  uint64_t v4 = v11;
  *(void *)(a2 + 32) = v10;
  *(void *)(a2 + 40) = v4;
  uint64_t v5 = a2 + 40;
  uint64_t v6 = v12;
  *(void *)(a2 + 48) = v12;
  if (v6)
  {
    *(void *)(v4 + 16) = v5;
    uint64_t v10 = &v11;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v4 = 0;
  }
  else
  {
    *(void *)(a2 + 32) = v5;
  }
  *(_OWORD *)(a2 + 56) = v13;
  long long v13 = 0uLL;
  *(unsigned char *)(a2 + 72) = 0;
  v8.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v4);
  return MEMORY[0x192FA3C30](&v8);
}

uint64_t AMSCore::ErrorKeybagProvider::import@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&>((uint64_t)&v7, (const std::runtime_error *)(a1 + 8));
  std::runtime_error::runtime_error((std::runtime_error *)a2, &v7);
  *(_OWORD *)(a2 + 16) = v8;
  *(void *)a2 = &unk_1EDC827D8;
  uint64_t v3 = v10;
  *(void *)(a2 + 32) = v9;
  *(void *)(a2 + 40) = v3;
  uint64_t v4 = a2 + 40;
  uint64_t v5 = v11;
  *(void *)(a2 + 48) = v11;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    long long v9 = &v10;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v3 = 0;
  }
  else
  {
    *(void *)(a2 + 32) = v4;
  }
  *(_OWORD *)(a2 + 56) = v12;
  long long v12 = 0uLL;
  *(unsigned char *)(a2 + 72) = 0;
  v7.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v9, (unsigned int *)v3);
  return MEMORY[0x192FA3C30](&v7);
}

void AMSCore::ErrorKeybagProvider::~ErrorKeybagProvider(AMSCore::ErrorKeybagProvider *this)
{
  *(void *)this = &unk_1EDC82080;
  uint64_t v2 = (char *)this + 8;
  *((void *)this + 1) = &unk_1EDC827D8;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this + 40, *((unsigned int **)this + 6));
  MEMORY[0x192FA3C30](v2);
  JUMPOUT(0x192FA4080);
}

{
  char *v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_1EDC82080;
  uint64_t v2 = (char *)this + 8;
  *((void *)this + 1) = &unk_1EDC827D8;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this + 40, *((unsigned int **)this + 6));
  MEMORY[0x192FA3C30](v2);
}

uint64_t std::__shared_ptr_emplace<AMSCore::ErrorKeybagProvider>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMSCore::ErrorKeybagProvider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83DE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::ErrorKeybagProvider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83DE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<AMSCore::BuiltInKeybagProvider>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMSCore::BuiltInKeybagProvider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83E50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::BuiltInKeybagProvider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83E50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AMSCore::Logger::log<char [41],AMSCore::Error>(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= a2)
  {
    char v10 = a2;
    uint64_t v11 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v17);
    uint64_t v12 = *(void *)(v17[0] - 24);
    {
    }
    size_t v13 = strlen(a5);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v17, (uint64_t)a5, v13);
    AMSCore::operator<<(v17, a6);
    uint64_t v14 = v17[6];
    uint64_t v15 = (char *)v17 + *(void *)(v17[0] - 24);
    if ((v15[32] & 5) != 0)
    {
      uint64_t v16 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v15 + 5) + 32))(&rep);
      uint64_t v16 = v24;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v21 = v10;
    uint64_t v22 = v14;
    uint64_t v23 = v16;
    (*(void (**)(void, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v11 + 16) + 16))(*(void *)(v11 + 16), a3, a4, &rep);
    v17[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v17[1] = MEMORY[0x1E4FBA470] + 16;
    if (v18 < 0) {
      operator delete((void *)v17[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v19);
  }
  return result;
}

void sub_18DAD4E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::setCacheValues(const void *a1, size_t a2, uint64_t a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  AMSCore::ServiceProvider<AMSCore::IDataProvider>::getDefault(&v27);
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:fe180100]();
  }
  uint64_t v6 = v27;
  if (a2 >= 0x17)
  {
    uint64_t v8 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v8 = a2 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (__n128 *)operator new(v8 + 1);
    __dst.n128_u64[1] = a2;
    unint64_t v39 = v9 | 0x8000000000000000;
    __dst.n128_u64[0] = (unint64_t)p_dst;
    goto LABEL_8;
  }
  HIBYTE(v39) = a2;
  p_dst = &__dst;
  if (a2) {
LABEL_8:
  }
    memmove(p_dst, a1, a2);
  p_dst->n128_u8[a2] = 0;
  __n128 v31 = __dst;
  unint64_t v32 = v39;
  int v33 = 6;
  v22.n128_u8[0] = 0;
  __n128 v10 = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8fe180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE19__generic_constructB8fe180100INS0_18__move_constructorIS11_LNS0_6_TraitE1EEEEEvRS12_OT_EUlRS18_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1G_EEEDcS18_DpT0_((uint64_t)&__dst, &v22, &v31);
  int v23 = 6;
  if (v33 != -1)
  {
    if (!v33) {
      goto LABEL_13;
    }
    ((void (*)(__n128 *, __n128 *, __n128))off_1EDCA54D0[v33])(&__dst, &v31, v10);
  }
  int v33 = 0;
LABEL_13:
  char v24 = 1;
  (*(void (**)(void *__return_ptr, uint64_t, const char *, uint64_t, __n128 *, __n128))(*(void *)v6 + 48))(v25, v6, "mescal-certificate", 18, &v22, v10);
  if (v24)
  {
    if (v23 != -1) {
      ((void (*)(__n128 *, __n128 *))off_1EDCA5AF8[v23])(&__dst, &v22);
    }
    int v23 = -1;
  }
  if (v33 != -1) {
    ((void (*)(__n128 *, __n128 *))off_1EDCA5AF8[v33])(&__dst, &v31);
  }
  if (!v26)
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v29);
    uint64_t v11 = v29;
    if (*(unsigned __int8 *)(v29 + 8) <= 3u)
    {
      std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v31);
      uint64_t v12 = *(void *)(v31.n128_u64[0] - 24);
      {
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Failed to set certificate: ", 27);
      AMSCore::operator<<(&v31, (uint64_t)v25);
      unint64_t v13 = v34;
      uint64_t v14 = (char *)&v31 + *(void *)(v31.n128_u64[0] - 24);
      if ((v14[32] & 5) != 0)
      {
        uint64_t v15 = -1;
      }
      else
      {
        (*(void (**)(__n128 *__return_ptr))(**((void **)v14 + 5) + 32))(&__dst);
        uint64_t v15 = v41;
      }
      __dst.n128_u64[0] = std::chrono::system_clock::now().__d_.__rep_;
      __dst.n128_u8[8] = 3;
      unint64_t v39 = v13;
      uint64_t v40 = v15;
      (*(void (**)(void, const char *, uint64_t, __n128 *))(**(void **)(v11 + 16) + 16))(*(void *)(v11 + 16), "fairplay", 8, &__dst);
      v31.n128_u64[0] = *MEMORY[0x1E4FBA418];
      *(unint64_t *)((char *)v31.n128_u64 + *(void *)(v31.n128_u64[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418]
                                                                                                  + 24);
      v31.n128_u64[1] = MEMORY[0x1E4FBA470] + 16;
      if (v36 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x192FA3FD0](&v37);
    }
    uint64_t v16 = v30;
    if (!v30 || atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      if (v26) {
        goto LABEL_32;
      }
      goto LABEL_31;
    }
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (!v26) {
LABEL_31:
    }
      (*(void (**)(void *))v25[0])(v25);
  }
LABEL_32:
  v19[0] = a3;
  int v20 = 7;
  char v21 = 1;
  (*(void (**)(__n128 *__return_ptr))(*(void *)v27 + 48))(&v31);
  ((void (*)(__n128 *, uint64_t *))off_1EDCA5B30[0])(&__dst, v19);
  int v20 = -1;
  if ((_BYTE)__p) {
    goto LABEL_37;
  }
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&__dst);
  AMSCore::Logger::log<char [39],AMSCore::Error>(__dst.n128_i64[0], 3u, (uint64_t)"fairplay", 8, "Failed to set certificate expiration: ", (uint64_t)&v31);
  long long v17 = (std::__shared_weak_count *)__dst.n128_u64[1];
  if (!__dst.n128_u64[1] || atomic_fetch_add((atomic_ullong *volatile)(__dst.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((_BYTE)__p) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (!(_BYTE)__p) {
LABEL_36:
  }
    (*(void (**)(__n128 *))v31.n128_u64[0])(&v31);
LABEL_37:
  char v18 = v28;
  if (v28)
  {
    if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_18DAD54E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t AMSCore::Logger::log<char [39],AMSCore::Error>(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= a2)
  {
    char v10 = a2;
    uint64_t v11 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v17);
    uint64_t v12 = *(void *)(v17[0] - 24);
    {
    }
    size_t v13 = strlen(a5);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v17, (uint64_t)a5, v13);
    AMSCore::operator<<(v17, a6);
    uint64_t v14 = v17[6];
    uint64_t v15 = (char *)v17 + *(void *)(v17[0] - 24);
    if ((v15[32] & 5) != 0)
    {
      uint64_t v16 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v15 + 5) + 32))(&rep);
      uint64_t v16 = v24;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v21 = v10;
    uint64_t v22 = v14;
    uint64_t v23 = v16;
    (*(void (**)(void, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v11 + 16) + 16))(*(void *)(v11 + 16), a3, a4, &rep);
    v17[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v17[1] = MEMORY[0x1E4FBA470] + 16;
    if (v18 < 0) {
      operator delete((void *)v17[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v19);
  }
  return result;
}

void sub_18DAD580C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Logger::log<char [27]>(uint64_t result, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= 2u)
  {
    uint64_t v7 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v13);
    uint64_t v8 = *(void *)(v13[0] - 24);
    {
    }
    size_t v9 = strlen(a4);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v13, (uint64_t)a4, v9);
    uint64_t v10 = v13[6];
    uint64_t v11 = (char *)v13 + *(void *)(v13[0] - 24);
    if ((v11[32] & 5) != 0)
    {
      uint64_t v12 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v11 + 5) + 32))(&rep);
      uint64_t v12 = v20;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v17 = 2;
    uint64_t v18 = v10;
    uint64_t v19 = v12;
    (*(void (**)(void, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v7 + 16) + 16))(*(void *)(v7 + 16), a2, a3, &rep);
    v13[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v13 + *(void *)(v13[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v13[1] = MEMORY[0x1E4FBA470] + 16;
    if (v14 < 0) {
      operator delete((void *)v13[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v15);
  }
  return result;
}

void sub_18DAD5AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::fetchCertificate(uint64_t a1)
{
  uint64_t v2 = (std::runtime_error *)(a1 + 152);
  uint64_t v3 = (std::runtime_error *)(a1 + 576);
  uint64_t v4 = (void **)(a1 + 968);
  uint64_t v5 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 2088);
  uint64_t v6 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 2256);
  std::runtime_error v84 = (AMSCore::URL *)(a1 + 2424);
  uint64_t v85 = (void **)(a1 + 1352);
  uint64_t v86 = (std::runtime_error *)(a1 + 2736);
  uint64_t v83 = a1 + 16;
  int v7 = *(unsigned __int8 *)(a1 + 3032);
  if (v7 == 2)
  {
    int v33 = *(__n128 **)(a1 + 2920);
    if (!v33[27].n128_u8[0]) {
      goto LABEL_159;
    }
    unint64_t v34 = &v33->n128_u64[1];
    unsigned __int8 v35 = v33[26].n128_u8[8];
    if (v35)
    {
      *(__n128 *)(a1 + 152) = *(__n128 *)((char *)v33 + 8);
      *unint64_t v34 = 0;
      v33[1].n128_u64[0] = 0;
      AMSCore::ExecuteHTTPRequestTask::Options::Options(a1 + 168, (uint64_t)&v33[1].n128_i64[1]);
      __n128 v36 = v33[12];
      *(__n128 *)(a1 + 336) = v36;
      v33[12].n128_u64[0] = 0;
      v33[12].n128_u64[1] = 0;
    }
    else
    {
      __n128 v36 = std::__expected_base<AMSCore::HTTPResponse,AMSCore::HTTPError>::__union_t::__union_t[abi:fe180100]<AMSCore::HTTPError>(v2, (uint64_t)v34);
    }
    *(unsigned char *)(a1 + 568) = v35;
    uint64_t v37 = *(std::__shared_weak_count **)(a1 + 2928);
    if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, __n128))v37->__on_zero_shared)(v37, v36);
      std::__shared_weak_count::__release_weak(v37);
    }
    char v38 = *(std::__shared_weak_count **)(a1 + 2944);
    if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, __n128))v38->__on_zero_shared)(v38, v36);
      std::__shared_weak_count::__release_weak(v38);
    }
    AMSCore::ExecuteHTTPRequestTask::Options::~Options(v6);
    unint64_t v39 = *(std::__shared_weak_count **)(a1 + 1344);
    if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options(v4);
    if (!*(unsigned char *)(a1 + 568))
    {
      LODWORD(v87.__vftable) = 606;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::HTTPError,AMSCore::FairPlayErrorCode>((uint64_t)&v95, (uint64_t)v2, (unsigned int *)&v87);
    }
    AMSCore::HTTPResponse::getDecodedObject(*(AMSCore::HTTPResponse **)(a1 + 336));
    uint64_t v41 = v40;
    AMSCore::nestedError<std::expected<std::map<std::string,AMSCore::Any>,AMSCore::Error> const&>(&v95, v40, 606, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
    if (v100)
    {
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v87, (uint64_t)&v95);
      std::optional<std::expected<AMSCore::CachedCertificate,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(a1 + 24), &v87);
      v87.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v42 = v90;
      if (v90 && !atomic_fetch_add(&v90->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v88, v89);
      MEMORY[0x192FA3C30](&v87);
      if (v100)
      {
        v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EDC827D8;
        char v43 = v99;
        if (v99 && !atomic_fetch_add(&v99->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v97, v98);
        MEMORY[0x192FA3C30](&v95);
      }
      goto LABEL_56;
    }
    if (!*(unsigned char *)(v41 + 72)) {
      goto LABEL_159;
    }
    AMSCore::getValueByKey<AMSCore::DataBuffer,std::map<std::string,AMSCore::Any> const>((uint64_t)&v87, v41);
    AMSCore::nestedError<std::expected<std::reference_wrapper<AMSCore::DataBuffer const>,AMSCore::Error> &>(&v95, (uint64_t)&v87, 606, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
    if (v100)
    {
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v92, (uint64_t)&v95);
      std::optional<std::expected<AMSCore::CachedCertificate,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(a1 + 24), &v92);
      v92.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      char v48 = v94;
      if (v94 && !atomic_fetch_add(&v94->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v93, v93[1]);
      MEMORY[0x192FA3C30](&v92);
      if (v100)
      {
        v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EDC827D8;
        char v49 = v99;
        if (v99 && !atomic_fetch_add(&v99->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v97, v98);
        MEMORY[0x192FA3C30](&v95);
      }
      if (v91) {
        goto LABEL_56;
      }
    }
    else
    {
      if (!*(unsigned char *)(a1 + 568)) {
        goto LABEL_159;
      }
      uint64_t v73 = *(void *)(a1 + 336);
      v74.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      AMSCore::HTTPResponse::getCacheControlTimePointIfDefined((uint64_t)&v95, v73, v74.__d_.__rep_, 1);
      if (v100) {
        v74.__d_.__rep_ = v95.__r_.__value_.__r.__words[0];
      }
      else {
        (*(void (**)(std::string *))v95.__r_.__value_.__l.__data_)(&v95);
      }
      if (!v91) {
        goto LABEL_159;
      }
      if (SHIBYTE(v87.what) < 0)
      {
        std::string::__init_copy_ctor_external(&v95, (const std::string::value_type *)v87.~runtime_error, (std::string::size_type)v87.~runtime_error_0);
      }
      else
      {
        long long v75 = *(_OWORD *)&v87.~runtime_error;
        v95.__r_.__value_.__r.__words[2] = (std::string::size_type)v87.what;
        *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v75;
      }
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = v74.__d_.__rep_;
      std::runtime_error v76 = (void **)(a1 + 24);
      if (*(unsigned char *)(a1 + 104))
      {
        if (*(unsigned char *)(a1 + 96))
        {
          if (*(char *)(a1 + 47) < 0) {
            operator delete(*v76);
          }
        }
        else
        {
          (*(void (**)(uint64_t))*v76)(a1 + 24);
        }
        v74.__d_.__rep_ = rep;
      }
      *(_OWORD *)std::runtime_error v76 = *(_OWORD *)&v95.__r_.__value_.__l.__data_;
      *(void *)(a1 + 40) = *((void *)&v95.__r_.__value_.__l + 2);
      *(std::chrono::system_clock::time_point *)(a1 + 48) = v74;
      *(unsigned char *)(a1 + 96) = 1;
      *(unsigned char *)(a1 + 104) = 1;
      if (v91)
      {
LABEL_56:
        std::__expected_base<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::__repr::__destroy_union_member[abi:fe180100]((uint64_t)v2);
LABEL_57:
        if (*(unsigned char *)(a1 + 960))
        {
          char v44 = *(std::__shared_weak_count **)(a1 + 952);
          if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
          AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v3->__vftable);
        }
        else
        {
          ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
        }
        AMSCore::EncodeHTTPRequestTask::Options::~Options(v85);
        AMSCore::ExecuteHTTPRequestTask::Options::~Options(v5);
        uint64_t v45 = 0;
        uint64_t v46 = 0;
        uint64_t v47 = v83;
        goto LABEL_98;
      }
    }
    ((void (*)(std::runtime_error *))v87.~runtime_error)(&v87);
    goto LABEL_56;
  }
  if (v7 != 1)
  {
    char v82 = (std::runtime_error *)(a1 + 152);
    uint64_t v80 = a1 + 2088;
    long long v81 = (AMSCore::URL *)(a1 + 2584);
    uint64_t v14 = *(void *)(a1 + 2984);
    if (!*(unsigned char *)(v14 + 88)) {
      goto LABEL_159;
    }
    uint64_t v78 = (long long *)(a1 + 2872);
    uint64_t v79 = (long long *)(a1 + 2840);
    long long v77 = (std::runtime_error_vtbl **)(a1 + 2856);
    uint64_t v15 = (const std::runtime_error *)(v14 + 8);
    char v16 = *(unsigned char *)(v14 + 80);
    if (v16)
    {
      char v17 = v15->__vftable;
      v15->__vftable = 0;
      v86->__vftable = v17;
      uint64_t v2 = (std::runtime_error *)(a1 + 152);
    }
    else
    {
      std::runtime_error::runtime_error(v86, v15);
      *(_OWORD *)(a1 + 2752) = *(_OWORD *)(v14 + 24);
      *(void *)(a1 + 2736) = &unk_1EDC827D8;
      uint64_t v22 = (void *)(v14 + 48);
      uint64_t v23 = *(void *)(v14 + 48);
      *(void *)(a1 + 2768) = *(void *)(v14 + 40);
      uint64_t v24 = a1 + 2776;
      *(void *)(a1 + 2776) = v23;
      uint64_t v25 = *(void *)(v14 + 56);
      *(void *)(a1 + 2784) = v25;
      if (v25)
      {
        *(void *)(v23 + 16) = v24;
        *(void *)(v14 + 40) = v22;
        void *v22 = 0;
        *(void *)(v14 + 56) = 0;
      }
      else
      {
        *(void *)(a1 + 2768) = v24;
      }
      uint64_t v2 = v82;
      uint64_t v50 = *(void *)(a1 + 2984);
      *(_OWORD *)(a1 + 2792) = *(_OWORD *)(v50 + 64);
      *(void *)(v50 + 64) = 0;
      *(void *)(v50 + 72) = 0;
    }
    *(unsigned char *)(a1 + 2808) = v16;
    uint64_t v51 = *(void *)(a1 + 2992);
    if (v51 && !atomic_fetch_add((atomic_ullong *volatile)(v51 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      char v52 = *(std::__shared_weak_count **)(a1 + 2992);
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
    char v53 = *(std::__shared_weak_count **)(a1 + 584);
    if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
      if ((*(char *)(a1 + 2839) & 0x80000000) == 0)
      {
LABEL_85:
        char v54 = *(std::__shared_weak_count **)(a1 + 160);
        if (v54 && !atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
        AMSCore::nestedError<std::expected<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error> &>(&v95, (uint64_t)v86, 606, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
        if (v100)
        {
          AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v87, (uint64_t)&v95);
          std::optional<std::expected<AMSCore::CachedCertificate,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(a1 + 24), &v87);
          v87.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
          char v55 = v90;
          uint64_t v47 = v83;
          if (v90 && !atomic_fetch_add(&v90->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v88, v89);
          MEMORY[0x192FA3C30](&v87);
          if (v100)
          {
            v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EDC827D8;
            char v56 = v99;
            if (v99 && !atomic_fetch_add(&v99->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
              std::__shared_weak_count::__release_weak(v56);
            }
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v97, v98);
            MEMORY[0x192FA3C30](&v95);
          }
          uint64_t v45 = *(void *)(a1 + 2976);
          uint64_t v46 = *(void *)(a1 + 2960);
LABEL_98:
          uint64_t v57 = *(void *)(a1 + 2736);
          if (*(unsigned char *)(a1 + 2808))
          {
            v86->__vftable = 0;
            if (v57) {
              (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
            }
            if (*(unsigned char *)(a1 + 2576)) {
              goto LABEL_102;
            }
          }
          else
          {
            (**(void (***)(void))(a1 + 2736))();
            if (*(unsigned char *)(a1 + 2576))
            {
LABEL_102:
              AMSCore::URL::~URL(v84);
LABEL_105:
              *(void *)(a1 + 3024) = v46;
              *(void *)(a1 + 3016) = v45;
              *(void *)(a1 + 152) = v47;
              *(void *)a1 = 0;
              AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v2);
              return;
            }
          }
          (**(void (***)(AMSCore::URL *))v84)(v84);
          goto LABEL_105;
        }
        uint64_t v58 = *(void *)(a1 + 2960);
        *(void *)(a1 + 2904) = *(void *)(a1 + 2952);
        *(void *)(a1 + 2912) = v58;
        if (v58) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v59 = *(void *)(a1 + 2976);
        *(void *)(a1 + 2888) = *(void *)(a1 + 2968);
        *(void *)(a1 + 2896) = v59;
        if (v59) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v59 + 8), 1uLL, memory_order_relaxed);
        }
        AMSCore::ExecuteHTTPRequestTask::OptionsBuilder::OptionsBuilder(v80, (long long *)(a1 + 2904), (long long *)(a1 + 2888));
        uint64_t v60 = *(std::__shared_weak_count **)(a1 + 2896);
        if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
        char v61 = *(std::__shared_weak_count **)(a1 + 2912);
        if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
        if (*(unsigned char *)(a1 + 2576))
        {
          *(unsigned char *)(a1 + 2584) = 0;
          *(unsigned char *)(a1 + 2608) = 0;
          if (*(unsigned char *)(a1 + 2448))
          {
            *(_OWORD *)long long v81 = *(_OWORD *)v84;
            *((void *)v81 + 2) = *((void *)v84 + 2);
            *((void *)v84 + 1) = 0;
            *((void *)v84 + 2) = 0;
            *(void *)std::runtime_error v84 = 0;
            *(unsigned char *)(a1 + 2608) = 1;
          }
          *(unsigned char *)(a1 + 2616) = 0;
          *(unsigned char *)(a1 + 2640) = 0;
          if (*(unsigned char *)(a1 + 2480))
          {
            *(void *)(a1 + 2632) = *(void *)(a1 + 2472);
            *(_OWORD *)(a1 + 2616) = *(_OWORD *)(a1 + 2456);
            *(void *)(a1 + 2472) = 0;
            *(void *)(a1 + 2456) = 0;
            *(void *)(a1 + 2464) = 0;
            *(unsigned char *)(a1 + 2640) = 1;
          }
          *(unsigned char *)(a1 + 2648) = 0;
          *(unsigned char *)(a1 + 2672) = 0;
          if (*(unsigned char *)(a1 + 2512))
          {
            *(void *)(a1 + 2664) = *(void *)(a1 + 2504);
            *(_OWORD *)(a1 + 2648) = *(_OWORD *)(a1 + 2488);
            *(void *)(a1 + 2504) = 0;
            *(void *)(a1 + 2488) = 0;
            *(void *)(a1 + 2496) = 0;
            *(unsigned char *)(a1 + 2672) = 1;
          }
          *(_DWORD *)(a1 + 2680) = *(_DWORD *)(a1 + 2520);
          *(void *)(a1 + 2688) = a1 + 2688;
          *(void *)(a1 + 2696) = a1 + 2688;
          *(void *)(a1 + 2704) = 0;
          uint64_t v62 = *(void *)(a1 + 2544);
          if (v62)
          {
            uint64_t v63 = *(uint64_t **)(a1 + 2536);
            uint64_t v64 = *(void *)(a1 + 2528);
            uint64_t v65 = *v63;
            *(void *)(v65 + 8) = *(void *)(v64 + 8);
            **(void **)(v64 + 8) = v65;
            uint64_t v66 = *(void *)(a1 + 2688);
            *(void *)(v66 + 8) = v63;
            uint64_t *v63 = v66;
            *(void *)(a1 + 2688) = v64;
            *(void *)(v64 + 8) = a1 + 2688;
            *(void *)(a1 + 2704) = v62;
            *(void *)(a1 + 2544) = 0;
          }
          *(void *)(a1 + 2728) = *(void *)(a1 + 2568);
          *(_OWORD *)(a1 + 2712) = *(_OWORD *)(a1 + 2552);
          *(void *)(a1 + 2568) = 0;
          *(void *)(a1 + 2552) = 0;
          *(void *)(a1 + 2560) = 0;
          *(_OWORD *)(a1 + 2872) = *(_OWORD *)(a1 + 2952);
          *(_OWORD *)(a1 + 2840) = *(_OWORD *)(a1 + 2968);
          AMSCore::EncodeHTTPRequestTask::OptionsBuilder::OptionsBuilder((uint64_t)v85, (long long *)v81, v78, v79);
          unsigned int v67 = *(std::__shared_weak_count **)(a1 + 2848);
          if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
          std::runtime_error v68 = *(std::__shared_weak_count **)(a1 + 2880);
          if (v68 && !atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
          AMSCore::URL::~URL(v81);
          if (*(unsigned char *)(a1 + 2808))
          {
            std::runtime_error v69 = v86->__vftable;
            unsigned int *v77 = v86->__vftable;
            if (v69) {
              operator new();
            }
            *(void *)(a1 + 2864) = 0;
            *(void *)(a1 + 2736) = 0;
            long long v70 = *(_OWORD *)v77;
            unsigned int *v77 = 0;
            v77[1] = 0;
            uint64_t v71 = *(std::__shared_weak_count **)(a1 + 1360);
            *(_OWORD *)uint64_t v85 = v70;
            if (v71 && !atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
            uint64_t v72 = *(std::__shared_weak_count **)(a1 + 2864);
            if (v72 && !atomic_fetch_add(&v72->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
              std::__shared_weak_count::__release_weak(v72);
            }
            AMSCore::EncodeHTTPRequestTask::Options::Options(a1 + 1720, (uint64_t)v85);
            AMSCore::EncodeHTTPRequestTask::perform((uint64_t)v2, a1 + 1720);
          }
        }
        goto LABEL_159;
      }
    }
    else if ((*(char *)(a1 + 2839) & 0x80000000) == 0)
    {
      goto LABEL_85;
    }
    operator delete(*(void **)(a1 + 2816));
    goto LABEL_85;
  }
  uint64_t v8 = *(void *)(a1 + 3000);
  if (*(unsigned char *)(v8 + 400))
  {
    size_t v9 = (const std::runtime_error *)(v8 + 8);
    char v10 = *(unsigned char *)(v8 + 392);
    if (v10)
    {
      AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v3, (uint64_t)v9);
      uint64_t v11 = (void *)(v8 + 376);
      *(void *)(a1 + 944) = *(void *)(v8 + 376);
      uint64_t v12 = (void *)(a1 + 952);
      size_t v13 = (void *)(v8 + 384);
    }
    else
    {
      std::runtime_error::runtime_error(v3, v9);
      *(_OWORD *)(a1 + 592) = *(_OWORD *)(v8 + 24);
      *(void *)(a1 + 576) = &unk_1EDC827D8;
      uint64_t v18 = (void *)(v8 + 48);
      uint64_t v19 = *(void *)(v8 + 48);
      *(void *)(a1 + 608) = *(void *)(v8 + 40);
      uint64_t v20 = a1 + 616;
      *(void *)(a1 + 616) = v19;
      uint64_t v21 = *(void *)(v8 + 56);
      *(void *)(a1 + 624) = v21;
      if (v21)
      {
        *(void *)(v19 + 16) = v20;
        *(void *)(v8 + 40) = v18;
        *uint64_t v18 = 0;
        *(void *)(v8 + 56) = 0;
      }
      else
      {
        *(void *)(a1 + 608) = v20;
      }
      uint64_t v26 = *(void *)(a1 + 3000);
      uint64_t v27 = *(void *)(v26 + 64);
      uint64_t v11 = (void *)(v26 + 64);
      *(void *)(a1 + 632) = v27;
      uint64_t v12 = (void *)(a1 + 640);
      size_t v13 = v11 + 1;
    }
    void *v12 = *v13;
    void *v11 = 0;
    v11[1] = 0;
    *(unsigned char *)(a1 + 960) = v10;
    uint64_t v28 = *(void *)(a1 + 3008);
    if (v28 && !atomic_fetch_add((atomic_ullong *volatile)(v28 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v29 = *(std::__shared_weak_count **)(a1 + 3008);
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
    long long v30 = *(std::__shared_weak_count **)(a1 + 160);
    if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)(a1 + 1720));
    AMSCore::nestedError<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error> &>(&v95, (uint64_t)v3, 606, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
    if (v100)
    {
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v87, (uint64_t)&v95);
      std::optional<std::expected<AMSCore::CachedCertificate,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(a1 + 24), &v87);
      v87.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      __n128 v31 = v90;
      if (v90 && !atomic_fetch_add(&v90->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v88, v89);
      MEMORY[0x192FA3C30](&v87);
      if (v100)
      {
        v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EDC827D8;
        unint64_t v32 = v99;
        if (v99 && !atomic_fetch_add(&v99->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v97, v98);
        MEMORY[0x192FA3C30](&v95);
      }
      goto LABEL_57;
    }
    if (*(unsigned char *)(a1 + 960))
    {
      AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v4, (uint64_t)v3);
      *(_OWORD *)(a1 + 1336) = *(_OWORD *)(a1 + 944);
      *(void *)(a1 + 952) = 0;
      *(void *)(a1 + 944) = 0;
      AMSCore::ExecuteHTTPRequestTask::Options::Options((uint64_t)v6, (uint64_t)v5);
      AMSCore::ExecuteHTTPRequestTask::perform(a1 + 2936, (uint64_t)v4, (uint64_t)v6);
    }
  }
LABEL_159:
  __break(1u);
}

void sub_18DAD6D5C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, AMSCore::ExecuteHTTPRequestTask::Options *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, AMSCore::URL *a17, void **a18, uint64_t *a19, void (**a20)(void),uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (!a29) {
    (*a20)(&a20);
  }
  std::__expected_base<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::__repr::__destroy_union_member[abi:fe180100](v29);
  std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::~expected[abi:fe180100](v31);
  AMSCore::EncodeHTTPRequestTask::Options::~Options(a18);
  AMSCore::ExecuteHTTPRequestTask::Options::~Options(v30);
  std::expected<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](a19);
  std::expected<AMSCore::URL,AMSCore::Error>::~expected[abi:fe180100](a17);
  __cxa_begin_catch(a1);
  AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DAD6E7C()
{
}

void AMSCore::fetchCertificate(char *__p)
{
  if (!*(void *)__p)
  {
    int v7 = (std::__shared_weak_count *)*((void *)__p + 378);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)__p + 377);
    goto LABEL_43;
  }
  uint64_t v2 = (void (***)(char *))(__p + 2424);
  if (!__p[3032])
  {
    uint64_t v9 = *((void *)__p + 374);
    if (v9 && !atomic_fetch_add((atomic_ullong *volatile)(v9 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      char v10 = (std::__shared_weak_count *)*((void *)__p + 374);
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    uint64_t v11 = (std::__shared_weak_count *)*((void *)__p + 73);
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    if (__p[2839] < 0) {
      operator delete(*((void **)__p + 352));
    }
    uint64_t v12 = (std::__shared_weak_count *)*((void *)__p + 20);
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v8 = (std::__shared_weak_count *)*((void *)__p + 372);
    int v7 = (std::__shared_weak_count *)*((void *)__p + 370);
    if (__p[2576]) {
      goto LABEL_42;
    }
LABEL_22:
    (**v2)(__p + 2424);
    goto LABEL_43;
  }
  if (__p[3032] == 1)
  {
    uint64_t v3 = (void **)(__p + 1720);
    uint64_t v4 = *((void *)__p + 376);
    if (v4 && !atomic_fetch_add((atomic_ullong *volatile)(v4 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v5 = (std::__shared_weak_count *)*((void *)__p + 376);
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = (std::__shared_weak_count *)*((void *)__p + 20);
    if (!v6) {
      goto LABEL_36;
    }
    goto LABEL_34;
  }
  size_t v13 = (std::__shared_weak_count *)*((void *)__p + 366);
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)__p + 368);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v3 = (void **)(__p + 576);
  AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(__p + 2256));
  uint64_t v15 = (std::__shared_weak_count *)*((void *)__p + 168);
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 121);
  if (__p[960])
  {
    uint64_t v6 = (std::__shared_weak_count *)*((void *)__p + 119);
    if (!v6)
    {
LABEL_36:
      AMSCore::EncodeHTTPRequestTask::Options::~Options(v3);
      goto LABEL_37;
    }
LABEL_34:
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    goto LABEL_36;
  }
  (*(void (**)(char *))*v3)(__p + 576);
LABEL_37:
  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 169);
  AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(__p + 2088));
  uint64_t v16 = *((void *)__p + 342);
  if (__p[2808])
  {
    *((void *)__p + 342) = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
  }
  else
  {
    (*(void (**)(char *))v16)(__p + 2736);
  }
  uint64_t v8 = 0;
  int v7 = 0;
  if (!__p[2576]) {
    goto LABEL_22;
  }
LABEL_42:
  AMSCore::URL::~URL((AMSCore::URL *)(__p + 2424));
LABEL_43:
  char v17 = (char *)*((void *)__p + 18);
  if (v17 == __p + 120)
  {
    (*(void (**)(char *))(*((void *)__p + 15) + 32))(__p + 120);
    if (!__p[104]) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v17) {
    (*(void (**)(char *))(*(void *)v17 + 40))(v17);
  }
  if (__p[104])
  {
LABEL_49:
    if (__p[96])
    {
      if (__p[47] < 0) {
        operator delete(*((void **)__p + 3));
      }
    }
    else
    {
      (**((void (***)(void))__p + 3))();
    }
  }
LABEL_53:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  operator delete(__p);
}

void std::shared_ptr<AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_18DAD7468(void *a1)
{
  __cxa_begin_catch(a1);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 96), 2uLL)) {
    (*(void (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  __cxa_rethrow();
}

void sub_18DAD7494(_Unwind_Exception *a1)
{
}

std::runtime_error *std::optional<std::expected<AMSCore::CachedCertificate,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>(std::runtime_error *this, std::runtime_error *a2)
{
  if (LOBYTE(this[5].__vftable))
  {
    if (LOBYTE(this[4].__imp_.__imp_))
    {
      if (SHIBYTE(this[1].__vftable) < 0) {
        operator delete(this->__vftable);
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))this->~runtime_error)(this);
    }
    LOBYTE(this[5].__vftable) = 0;
  }
  std::runtime_error::runtime_error(this, a2);
  this->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA448] + 16);
  this[1] = a2[1];
  this->__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  this[2].__vftable = a2[2].__vftable;
  p_char imp = (std::runtime_error_vtbl *)&a2[2].__imp_;
  char imp = a2[2].__imp_.__imp_;
  this[2].__imp_.__imp_ = imp;
  uint64_t v6 = (std::runtime_error_vtbl *)&this[2].__imp_;
  int v7 = a2[3].__vftable;
  this[3].__vftable = v7;
  if (v7)
  {
    *((void *)imp + 2) = v6;
    a2[2].__vftable = p_imp;
    p_imp->~runtime_error = 0;
    a2[3].__vftable = 0;
  }
  else
  {
    this[2].__vftable = v6;
  }
  *(std::runtime_error *)((char *)this + 56) = *(std::runtime_error *)((char *)a2 + 56);
  a2[3].__imp_.__imp_ = 0;
  a2[4].__vftable = 0;
  LOBYTE(this[4].__imp_.__imp_) = 0;
  LOBYTE(this[5].__vftable) = 1;
  return this;
}

unsigned char *AMSCore::nestedError<std::expected<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error> &>(unsigned char *result, uint64_t a2, uint64_t a3, const std::error_category *a4)
{
  if (!*(unsigned char *)(a2 + 72))
  {
    std::runtime_error::runtime_error(&v16, (const std::runtime_error *)a2);
    int v7 = (void *)(a2 + 40);
    uint64_t v8 = *(void *)(a2 + 40);
    long long v17 = *(_OWORD *)(a2 + 16);
    uint64_t v9 = *(uint64_t **)(a2 + 32);
    v16.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v18 = v9;
    uint64_t v19 = v8;
    uint64_t v20 = *(void *)(a2 + 48);
    if (v20)
    {
      *(void *)(v8 + 16) = &v19;
      *(void *)(a2 + 32) = v7;
      void *v7 = 0;
      *(void *)(a2 + 48) = 0;
    }
    else
    {
      uint64_t v18 = &v19;
    }
    long long v21 = *(_OWORD *)(a2 + 56);
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    char v22 = 1;
    std::runtime_error::runtime_error(&v10, &v16);
    long long v11 = v17;
    v10.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v12 = v18;
    v13[0] = v19;
    v13[1] = v20;
    if (v20)
    {
      *(void *)(v19 + 16) = v13;
      uint64_t v18 = &v19;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
    }
    else
    {
      uint64_t v12 = v13;
    }
    long long v14 = v21;
    long long v21 = 0uLL;
    AMSCore::Error::Error<>((uint64_t)&v15, (uint64_t)&v10, a3, a4);
  }
  std::runtime_error *result = 0;
  result[72] = 0;
  return result;
}

void sub_18DAD78B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

unsigned char *AMSCore::nestedError<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error> &>(unsigned char *result, uint64_t a2, uint64_t a3, const std::error_category *a4)
{
  if (!*(unsigned char *)(a2 + 384))
  {
    std::runtime_error::runtime_error(&v16, (const std::runtime_error *)a2);
    int v7 = (void *)(a2 + 40);
    uint64_t v8 = *(void *)(a2 + 40);
    long long v17 = *(_OWORD *)(a2 + 16);
    uint64_t v9 = *(uint64_t **)(a2 + 32);
    v16.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v18 = v9;
    uint64_t v19 = v8;
    uint64_t v20 = *(void *)(a2 + 48);
    if (v20)
    {
      *(void *)(v8 + 16) = &v19;
      *(void *)(a2 + 32) = v7;
      void *v7 = 0;
      *(void *)(a2 + 48) = 0;
    }
    else
    {
      uint64_t v18 = &v19;
    }
    long long v21 = *(_OWORD *)(a2 + 56);
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    char v22 = 1;
    std::runtime_error::runtime_error(&v10, &v16);
    long long v11 = v17;
    v10.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v12 = v18;
    v13[0] = v19;
    v13[1] = v20;
    if (v20)
    {
      *(void *)(v19 + 16) = v13;
      uint64_t v18 = &v19;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
    }
    else
    {
      uint64_t v12 = v13;
    }
    long long v14 = v21;
    long long v21 = 0uLL;
    AMSCore::Error::Error<>((uint64_t)&v15, (uint64_t)&v10, a3, a4);
  }
  std::runtime_error *result = 0;
  result[72] = 0;
  return result;
}

void sub_18DAD7BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void AMSCore::Unexpected<AMSCore::Error,AMSCore::HTTPError,AMSCore::FairPlayErrorCode>(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  std::runtime_error::runtime_error(v8, (const std::runtime_error *)a2);
  uint64_t v5 = (void *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 40);
  v8[1] = *(std::runtime_error *)(a2 + 16);
  int v7 = *(uint64_t **)(a2 + 32);
  v8[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  if (*(void *)(a2 + 48))
  {
    *(void *)(v6 + 16) = &v10;
    *(void *)(a2 + 32) = v5;
    void *v5 = 0;
    *(void *)(a2 + 48) = 0;
  }
  else
  {
    uint64_t v9 = &v10;
  }
  long long v12 = *(_OWORD *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  AMSCore::Error::Error<>((uint64_t)&v13, (uint64_t)v8, *a3, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
}

void sub_18DAD7DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned char *AMSCore::nestedError<std::expected<std::map<std::string,AMSCore::Any>,AMSCore::Error> const&>(unsigned char *result, uint64_t a2, uint64_t a3, const std::error_category *a4)
{
  if (!*(unsigned char *)(a2 + 72))
  {
    AMSCore::Error::Error(&v11, (const std::runtime_error *)a2);
    char v17 = 1;
    std::runtime_error::runtime_error(v6, &v11);
    v6[1] = v12;
    v6[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    int v7 = v13;
    v8[0] = v14;
    v8[1] = v15;
    if (v15)
    {
      *(void *)(v14 + 16) = v8;
      std::runtime_error v13 = &v14;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
    }
    else
    {
      int v7 = v8;
    }
    long long v9 = v16;
    long long v16 = 0uLL;
    AMSCore::Error::Error<>((uint64_t)&v10, (uint64_t)v6, a3, a4);
  }
  std::runtime_error *result = 0;
  result[72] = 0;
  return result;
}

void sub_18DAD8078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void AMSCore::getValueByKey<AMSCore::DataBuffer,std::map<std::string,AMSCore::Any> const>(uint64_t a1, uint64_t a2)
{
  v33[0] = (uint64_t)"sign-sap-setup-cert";
  v33[1] = 19;
  AMSCore::getValueByKey((uint64_t)&v26, a2, "sign-sap-setup-cert", 0x13uLL);
  if (!v32)
  {
    std::runtime_error::runtime_error(&v19, &v26);
    long long v20 = v27;
    v19.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    long long v21 = v28;
    uint64_t v22 = v29;
    uint64_t v23 = v30;
    if (v30)
    {
      *(void *)(v29 + 16) = &v22;
      uint64_t v28 = &v29;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
    }
    else
    {
      long long v21 = &v22;
    }
    long long v24 = v31;
    long long v31 = 0uLL;
    char v25 = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v13, (uint64_t)&v19);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v13);
    *(_OWORD *)(a1 + 16) = v14;
    *(void *)a1 = &unk_1EDC827D8;
    uint64_t v9 = v16;
    *(void *)(a1 + 32) = v15;
    *(void *)(a1 + 40) = v9;
    uint64_t v10 = a1 + 40;
    uint64_t v11 = v17;
    *(void *)(a1 + 48) = v17;
    if (v11)
    {
      *(void *)(v9 + 16) = v10;
      uint64_t v15 = &v16;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v9 = 0;
    }
    else
    {
      *(void *)(a1 + 32) = v10;
    }
    *(_OWORD *)(a1 + 56) = v18;
    long long v18 = 0uLL;
    *(unsigned char *)(a1 + 72) = 0;
    v13.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v15, (unsigned int *)v9);
    MEMORY[0x192FA3C30](&v13);
    if (!v25) {
      goto LABEL_26;
    }
    v19.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::runtime_error v12 = (std::__shared_weak_count *)*((void *)&v24 + 1);
    if (*((void *)&v24 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v6 = v22;
LABEL_25:
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v21, (unsigned int *)v6);
    MEMORY[0x192FA3C30](&v19);
    goto LABEL_26;
  }
  uint64_t v3 = v26.__vftable;
  int v4 = (int)v26.__vftable[1].~runtime_error;
  if (v4 == -1) {
    unsigned __int8 v5 = 0;
  }
  else {
    unsigned __int8 v5 = v26.__vftable[1].~runtime_error;
  }
  if (v5 != 6 && v5 != 5)
  {
    LOBYTE(v13.__vftable) = 34;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[32],std::string_view &,char>((uint64_t)&v19, 0xCu, "unable to find value with key \"", v33, (char *)&v13);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v19);
    *(_OWORD *)(a1 + 16) = v20;
    *(void *)a1 = &unk_1EDC827D8;
    uint64_t v6 = v22;
    *(void *)(a1 + 32) = v21;
    *(void *)(a1 + 40) = v6;
    uint64_t v7 = a1 + 40;
    uint64_t v8 = v23;
    *(void *)(a1 + 48) = v23;
    if (v8)
    {
      *(void *)(v6 + 16) = v7;
      long long v21 = &v22;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v6 = 0;
    }
    else
    {
      *(void *)(a1 + 32) = v7;
    }
    *(_OWORD *)(a1 + 56) = v24;
    long long v24 = 0uLL;
    *(unsigned char *)(a1 + 72) = 0;
    v19.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    goto LABEL_25;
  }
  if (v4 != v5) {
    uint64_t v3 = 0;
  }
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 72) = 1;
LABEL_26:
  if (!v32) {
    ((void (*)(std::runtime_error *))v26.~runtime_error)(&v26);
  }
}

void sub_18DAD83CC(_Unwind_Exception *exception_object)
{
  if (!*(unsigned char *)(v1 - 72)) {
    (**(void (***)(uint64_t))(v1 - 144))(v1 - 144);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *AMSCore::nestedError<std::expected<std::reference_wrapper<AMSCore::DataBuffer const>,AMSCore::Error> &>(unsigned char *result, uint64_t a2, uint64_t a3, const std::error_category *a4)
{
  if (!*(unsigned char *)(a2 + 72))
  {
    std::runtime_error::runtime_error(&v16, (const std::runtime_error *)a2);
    uint64_t v7 = (void *)(a2 + 40);
    uint64_t v8 = *(void *)(a2 + 40);
    long long v17 = *(_OWORD *)(a2 + 16);
    uint64_t v9 = *(uint64_t **)(a2 + 32);
    v16.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    long long v18 = v9;
    uint64_t v19 = v8;
    uint64_t v20 = *(void *)(a2 + 48);
    if (v20)
    {
      *(void *)(v8 + 16) = &v19;
      *(void *)(a2 + 32) = v7;
      void *v7 = 0;
      *(void *)(a2 + 48) = 0;
    }
    else
    {
      long long v18 = &v19;
    }
    long long v21 = *(_OWORD *)(a2 + 56);
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    char v22 = 1;
    std::runtime_error::runtime_error(&v10, &v16);
    long long v11 = v17;
    v10.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::runtime_error v12 = v18;
    v13[0] = v19;
    v13[1] = v20;
    if (v20)
    {
      *(void *)(v19 + 16) = v13;
      long long v18 = &v19;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
    }
    else
    {
      std::runtime_error v12 = v13;
    }
    long long v14 = v21;
    long long v21 = 0uLL;
    AMSCore::Error::Error<>((uint64_t)&v15, (uint64_t)&v10, a3, a4);
  }
  std::runtime_error *result = 0;
  result[72] = 0;
  return result;
}

void sub_18DAD8708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

__n128 AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::ValuePromise::return_value<AMSCore::CachedCertificate>(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = a1 + 8;
  if (*(unsigned char *)(a1 + 88))
  {
    if (*(unsigned char *)(a1 + 80))
    {
      if (*(char *)(a1 + 31) < 0) {
        operator delete(*(void **)v4);
      }
    }
    else
    {
      (**(void (***)(uint64_t))v4)(a1 + 8);
    }
    *(unsigned char *)(a1 + 88) = 0;
  }
  __n128 result = *a2;
  *(void *)(v4 + 16) = a2[1].n128_u64[0];
  *(__n128 *)uint64_t v4 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  *(void *)(a1 + 32) = a2[1].n128_u64[1];
  *(unsigned char *)(a1 + 80) = 1;
  *(unsigned char *)(a1 + 88) = 1;
  return result;
}

void AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise::unhandled_exception()
{
  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

uint64_t sub_18DAD87F0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v36, (uint64_t)v33);
  std::optional<std::expected<AMSCore::CachedCertificate,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>(v29, v36);
  v36[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  uint64_t v30 = v38;
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v37, v37[1]);
  MEMORY[0x192FA3C30](v36);
  v33[0] = &unk_1EDC827D8;
  long long v31 = v35;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v34, v34[1]);
  return MEMORY[0x192FA3C30](v33);
}

uint64_t AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise::Awaiter::await_suspend(uint64_t result)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void (**)(void))atomic_exchange((atomic_ullong *volatile)(*(void *)result + 96), 1uLL);
  if (v1)
  {
    uint64_t v2 = result;
    if (v1 == (void (**)(void))2) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result - 8))(*(void *)result - 16);
    }
    uint64_t v3 = (uint64_t *)(*(void *)result + 128);
    __n128 result = *v3;
    if (*v3)
    {
      if (result == *(void *)v2 + 104)
      {
        uint64_t v19 = v18;
        __n128 result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 24))(result, v18);
      }
      else
      {
        uint64_t v19 = *(void **)(*(void *)v2 + 128);
        *uint64_t v3 = 0;
      }
    }
    else
    {
      uint64_t v19 = 0;
    }
    if (v19)
    {
      uint64_t v4 = *(void *)v2;
      if (!*(unsigned char *)(v4 + 88))
      {
        __break(1u);
        return result;
      }
      unsigned __int8 v5 = (const std::runtime_error *)(v4 + 8);
      char v6 = *(unsigned char *)(v4 + 80);
      if (v6)
      {
        std::runtime_error v7 = *v5;
        *(void *)&long long v12 = *(void *)(v4 + 24);
        *(std::runtime_error *)long long __p = v7;
        v5->__vftable = 0;
        *(void *)(v4 + 16) = 0;
        *(void *)(v4 + 24) = 0;
        *((void *)&v12 + 1) = *(void *)(v4 + 32);
      }
      else
      {
        std::runtime_error::runtime_error((std::runtime_error *)__p, v5);
        uint64_t v8 = (void *)(v4 + 48);
        uint64_t v9 = *(void *)(v4 + 48);
        long long v12 = *(_OWORD *)(v4 + 24);
        std::runtime_error v10 = *(uint64_t **)(v4 + 40);
        __p[0] = &unk_1EDC827D8;
        std::runtime_error v13 = v10;
        uint64_t v14 = v9;
        if (*(void *)(v4 + 56))
        {
          *(void *)(v9 + 16) = &v14;
          *(void *)(v4 + 40) = v8;
          void *v8 = 0;
          *(void *)(v4 + 56) = 0;
        }
        else
        {
          std::runtime_error v13 = &v14;
        }
        long long v16 = *(_OWORD *)(v4 + 64);
        *(void *)(v4 + 64) = 0;
        *(void *)(v4 + 72) = 0;
      }
      char v17 = v6;
      if (!v19) {
        std::__throw_bad_function_call[abi:fe180100]();
      }
      (*(void (**)(void *, void **))(*v19 + 48))(v19, __p);
      if (v17)
      {
        if (SBYTE7(v12) < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        (*(void (**)(void **))__p[0])(__p);
      }
    }
    else
    {
      (*v1)(v1);
    }
    __n128 result = (uint64_t)v19;
    if (v19 == v18)
    {
      return (*(uint64_t (**)(void *))(v18[0] + 32))(v18);
    }
    else if (v19)
    {
      return (*(uint64_t (**)(void))(*v19 + 40))();
    }
  }
  return result;
}

void sub_18DAD8BB4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINS_17CachedCertificateENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINS_17CachedCertificateENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINS_17CachedCertificateENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINS_17CachedCertificateENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 96), 2uLL)) {
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void AMSCore::signPayload(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  std::runtime_error v7 = operator new(0xC20uLL);
  void *v7 = AMSCore::signPayload;
  v7[1] = AMSCore::signPayload;
  uint64_t v8 = *(void *)(a2 + 8);
  v7[375] = *(void *)a2;
  v7[373] = v8;
  *(void *)((char *)v7 + 2991) = *(void *)(a2 + 15);
  *((unsigned char *)v7 + 3096) = *(unsigned char *)(a2 + 23);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a3[1];
  v7[376] = *a3;
  v7[377] = v9;
  *a3 = 0;
  a3[1] = 0;
  uint64_t v10 = a4[1];
  v7[378] = *a4;
  v7[379] = v10;
  *a4 = 0;
  a4[1] = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *((unsigned char *)v7 + 24) = 0;
  *((unsigned char *)v7 + 104) = 0;
  v7[14] = 0;
  v7[18] = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v11, (uint64_t)(v7 + 2));
}

void sub_18DADA104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, AMSCore::EncodeHTTPRequestTask::Options *a9, AMSCore::ExecuteHTTPRequestTask::Options *a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t AMSCore::signPayload(uint64_t a1)
{
  uint64_t v126 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void **)(a1 + 1720);
  unint64_t v3 = (std::runtime_error *)(a1 + 152);
  uint64_t v4 = (std::runtime_error *)(a1 + 576);
  unsigned __int8 v5 = (void **)(a1 + 968);
  char v6 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 2088);
  std::runtime_error v7 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 2256);
  v105 = (AMSCore::URL *)(a1 + 2424);
  v106 = (std::runtime_error *)(a1 + 2736);
  uint64_t v104 = a1 + 16;
  int v8 = *(unsigned __int8 *)(a1 + 2999);
  if (v8 == 2)
  {
    uint64_t v37 = *(__n128 **)(a1 + 2936);
    if (!v37[27].n128_u8[0]) {
      goto LABEL_175;
    }
    char v38 = &v37->n128_u64[1];
    unsigned __int8 v39 = v37[26].n128_u8[8];
    if (v39)
    {
      *(__n128 *)(a1 + 152) = *(__n128 *)((char *)v37 + 8);
      unint64_t *v38 = 0;
      v37[1].n128_u64[0] = 0;
      AMSCore::ExecuteHTTPRequestTask::Options::Options(a1 + 168, (uint64_t)&v37[1].n128_i64[1]);
      __n128 v40 = v37[12];
      *(__n128 *)(a1 + 336) = v40;
      v37[12].n128_u64[0] = 0;
      v37[12].n128_u64[1] = 0;
    }
    else
    {
      __n128 v40 = std::__expected_base<AMSCore::HTTPResponse,AMSCore::HTTPError>::__union_t::__union_t[abi:fe180100]<AMSCore::HTTPError>(v3, (uint64_t)v38);
    }
    *(unsigned char *)(a1 + 568) = v39;
    uint64_t v41 = *(std::__shared_weak_count **)(a1 + 2944);
    if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, __n128))v41->__on_zero_shared)(v41, v40);
      std::__shared_weak_count::__release_weak(v41);
    }
    uint64_t v42 = *(std::__shared_weak_count **)(a1 + 2960);
    if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, __n128))v42->__on_zero_shared)(v42, v40);
      std::__shared_weak_count::__release_weak(v42);
    }
    AMSCore::ExecuteHTTPRequestTask::Options::~Options(v7);
    char v43 = *(std::__shared_weak_count **)(a1 + 1344);
    if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options(v5);
    if (!*(unsigned char *)(a1 + 568))
    {
      LODWORD(v107.__vftable) = 608;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::HTTPError,AMSCore::FairPlayErrorCode>((uint64_t)v119, (uint64_t)v3, (unsigned int *)&v107);
    }
    uint64_t v103 = v2;
    AMSCore::HTTPResponse::getDecodedObject(*(AMSCore::HTTPResponse **)(a1 + 336));
    char v45 = *(unsigned char *)(v44 + 72);
    if (v45)
    {
      v116.__imp_.__imp_ = 0;
      uint64_t v117 = 0;
      v116.__vftable = (std::runtime_error_vtbl *)&v116.__imp_;
      uint64_t v46 = (const void ***)(v44 + 8);
      uint64_t v47 = *(const void ***)v44;
      if (*(void *)v44 != v44 + 8)
      {
        do
        {
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v116, (uint64_t *)&v116.__imp_, v47 + 4, (long long *)v47 + 2);
          char v48 = (const void **)v47[1];
          if (v48)
          {
            do
            {
              char v49 = (const void ***)v48;
              char v48 = (const void **)*v48;
            }
            while (v48);
          }
          else
          {
            do
            {
              char v49 = (const void ***)v47[2];
              BOOL v50 = *v49 == v47;
              uint64_t v47 = (const void **)v49;
            }
            while (!v50);
          }
          uint64_t v47 = (const void **)v49;
        }
        while (v49 != v46);
      }
    }
    else
    {
      AMSCore::Error::Error(&v116, (const std::runtime_error *)v44);
    }
    char v118 = v45;
    AMSCore::nestedError<std::expected<std::map<std::string,AMSCore::Any>,AMSCore::Error> &>(v119, (uint64_t)&v116, 608, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
    uint64_t v2 = v103;
    if (v125)
    {
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v107, (uint64_t)v119);
      std::optional<std::expected<AMSCore::CachedCertificate,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(a1 + 24), &v107);
      v107.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v51 = v111;
      if (v111 && !atomic_fetch_add(&v111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v109, v110);
      MEMORY[0x192FA3C30](&v107);
      if (v125)
      {
        *(void *)uint64_t v119 = &unk_1EDC827D8;
        char v52 = v124;
        if (v124 && !atomic_fetch_add(&v124->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v122, *((unsigned int **)&v122 + 1));
        MEMORY[0x192FA3C30](v119);
        if (!v118) {
          goto LABEL_158;
        }
LABEL_80:
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v116, (unsigned int *)v116.__imp_.__imp_);
LABEL_159:
        std::__expected_base<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::__repr::__destroy_union_member[abi:fe180100]((uint64_t)v3);
LABEL_160:
        if (*(unsigned char *)(a1 + 960))
        {
          std::runtime_error v92 = *(std::__shared_weak_count **)(a1 + 952);
          if (v92 && !atomic_fetch_add(&v92->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
          uint64_t v16 = (uint64_t)v3;
          AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v4->__vftable);
        }
        else
        {
          uint64_t v16 = (uint64_t)v3;
          ((void (*)(std::runtime_error *))v4->~runtime_error)(v4);
        }
        AMSCore::ExecuteHTTPRequestTask::Options::~Options(v6);
        AMSCore::EncodeHTTPRequestTask::Options::~Options(v2);
        uint64_t v63 = 0;
        uint64_t v64 = 0;
        char v65 = 0;
        uint64_t v66 = 0;
        uint64_t v61 = v104;
        goto LABEL_167;
      }
      goto LABEL_79;
    }
    if (!v118) {
      goto LABEL_175;
    }
    AMSCore::getValueByKey<AMSCore::DataBuffer,std::map<std::string,AMSCore::Any>>((uint64_t)&v107, (uint64_t)&v116);
    AMSCore::nestedError<std::expected<std::reference_wrapper<AMSCore::DataBuffer>,AMSCore::Error> &>(v119, (uint64_t)&v107, 608, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
    if (v125)
    {
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v113, (uint64_t)v119);
      std::optional<std::expected<AMSCore::CachedCertificate,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(a1 + 24), &v113);
      v113.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      char v53 = v115;
      if (v115 && !atomic_fetch_add(&v115->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v114, v114[1]);
      MEMORY[0x192FA3C30](&v113);
      if (v125)
      {
        *(void *)uint64_t v119 = &unk_1EDC827D8;
        char v54 = v124;
        if (v124 && !atomic_fetch_add(&v124->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v122, *((unsigned int **)&v122 + 1));
        MEMORY[0x192FA3C30](v119);
      }
      if (v112) {
        goto LABEL_79;
      }
    }
    else
    {
      if (!v112) {
        goto LABEL_175;
      }
      std::string v89 = v107.__vftable;
      uint64_t v90 = (void **)(a1 + 24);
      if (*(unsigned char *)(a1 + 104))
      {
        if (*(unsigned char *)(a1 + 96))
        {
          if (*(char *)(a1 + 47) < 0) {
            operator delete(*v90);
          }
        }
        else
        {
          (*(void (**)(uint64_t))*v90)(a1 + 24);
        }
        *(unsigned char *)(a1 + 104) = 0;
      }
      long long v91 = *(_OWORD *)&v89->~runtime_error;
      *(void *)(a1 + 40) = v89->what;
      *(_OWORD *)uint64_t v90 = v91;
      v89->~runtime_error_0 = 0;
      v89->what = 0;
      v89->~runtime_error = 0;
      *(unsigned char *)(a1 + 96) = 1;
      *(unsigned char *)(a1 + 104) = 1;
      if (v112)
      {
LABEL_79:
        if (v118) {
          goto LABEL_80;
        }
LABEL_158:
        ((void (*)(std::runtime_error *))v116.~runtime_error)(&v116);
        goto LABEL_159;
      }
    }
    ((void (*)(std::runtime_error *))v107.~runtime_error)(&v107);
    if (v118) {
      goto LABEL_80;
    }
    goto LABEL_158;
  }
  uint64_t v101 = a1 + 968;
  if (v8 == 1)
  {
    uint64_t v9 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 2088);
    uint64_t v10 = *(void *)(a1 + 3056);
    if (*(unsigned char *)(v10 + 400))
    {
      std::runtime_error v11 = (const std::runtime_error *)(v10 + 8);
      char v12 = *(unsigned char *)(v10 + 392);
      if (v12)
      {
        AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v4, (uint64_t)v11);
        std::runtime_error v13 = (void *)(v10 + 376);
        *(void *)(a1 + 944) = *(void *)(v10 + 376);
        uint64_t v14 = (void *)(a1 + 952);
        std::runtime_error v15 = (void *)(v10 + 384);
        char v6 = v9;
      }
      else
      {
        std::runtime_error::runtime_error(v4, v11);
        *(_OWORD *)(a1 + 592) = *(_OWORD *)(v10 + 24);
        *(void *)(a1 + 576) = &unk_1EDC827D8;
        char v22 = (void *)(v10 + 48);
        uint64_t v23 = *(void *)(v10 + 48);
        *(void *)(a1 + 608) = *(void *)(v10 + 40);
        uint64_t v24 = a1 + 616;
        *(void *)(a1 + 616) = v23;
        uint64_t v25 = *(void *)(v10 + 56);
        *(void *)(a1 + 624) = v25;
        if (v25)
        {
          *(void *)(v23 + 16) = v24;
          *(void *)(v10 + 40) = v22;
          void *v22 = 0;
          *(void *)(v10 + 56) = 0;
        }
        else
        {
          *(void *)(a1 + 608) = v24;
        }
        char v6 = v9;
        uint64_t v30 = *(void *)(a1 + 3056);
        uint64_t v31 = *(void *)(v30 + 64);
        std::runtime_error v13 = (void *)(v30 + 64);
        *(void *)(a1 + 632) = v31;
        uint64_t v14 = (void *)(a1 + 640);
        std::runtime_error v15 = v13 + 1;
      }
      *uint64_t v14 = *v15;
      void *v13 = 0;
      v13[1] = 0;
      *(unsigned char *)(a1 + 960) = v12;
      uint64_t v32 = *(void *)(a1 + 3064);
      if (v32 && !atomic_fetch_add((atomic_ullong *volatile)(v32 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        int v33 = *(std::__shared_weak_count **)(a1 + 3064);
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
      unint64_t v34 = *(std::__shared_weak_count **)(a1 + 160);
      if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)(a1 + 1352));
      AMSCore::nestedError<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error> &>(v119, (uint64_t)v4, 608, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
      if (v125)
      {
        AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v107, (uint64_t)v119);
        std::optional<std::expected<AMSCore::CachedCertificate,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(a1 + 24), &v107);
        v107.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        unsigned __int8 v35 = v111;
        if (v111 && !atomic_fetch_add(&v111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v109, v110);
        MEMORY[0x192FA3C30](&v107);
        if (v125)
        {
          *(void *)uint64_t v119 = &unk_1EDC827D8;
          __n128 v36 = v124;
          if (v124 && !atomic_fetch_add(&v124->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v122, *((unsigned int **)&v122 + 1));
          MEMORY[0x192FA3C30](v119);
        }
        goto LABEL_160;
      }
      if (*(unsigned char *)(a1 + 960))
      {
        AMSCore::EncodeHTTPRequestTask::Options::Options(v101, (uint64_t)v4);
        *(_OWORD *)(a1 + 1336) = *(_OWORD *)(a1 + 944);
        *(void *)(a1 + 952) = 0;
        *(void *)(a1 + 944) = 0;
        AMSCore::ExecuteHTTPRequestTask::Options::Options((uint64_t)v7, (uint64_t)v6);
        AMSCore::ExecuteHTTPRequestTask::perform(a1 + 2952, v101, (uint64_t)v7);
      }
    }
LABEL_175:
    __break(1u);
  }
  v102 = (_OWORD *)(a1 + 1720);
  uint64_t v16 = a1 + 152;
  uint64_t v98 = a1 + 2088;
  uint64_t v99 = (void *)(a1 + 2816);
  char v100 = (std::runtime_error_vtbl **)(a1 + 2872);
  char v17 = (std::runtime_error_vtbl **)(a1 + 2984);
  uint64_t v18 = *(void *)(a1 + 3040);
  if (!*(unsigned char *)(v18 + 88)) {
    goto LABEL_175;
  }
  uint64_t v96 = (long long *)(a1 + 2888);
  uint64_t v97 = (long long *)(a1 + 2920);
  std::string v95 = (long long *)(a1 + 2968);
  uint64_t v19 = (const std::runtime_error *)(v18 + 8);
  char v20 = *(unsigned char *)(v18 + 80);
  if (v20)
  {
    long long v21 = v19->__vftable;
    v19->__vftable = 0;
    v106->__vftable = v21;
  }
  else
  {
    std::runtime_error::runtime_error(v106, v19);
    *(_OWORD *)(a1 + 2752) = *(_OWORD *)(v18 + 24);
    *(void *)(a1 + 2736) = &unk_1EDC827D8;
    std::runtime_error v26 = (void *)(v18 + 48);
    uint64_t v27 = *(void *)(v18 + 48);
    *(void *)(a1 + 2768) = *(void *)(v18 + 40);
    uint64_t v28 = a1 + 2776;
    *(void *)(a1 + 2776) = v27;
    uint64_t v29 = *(void *)(v18 + 56);
    *(void *)(a1 + 2784) = v29;
    if (v29)
    {
      *(void *)(v27 + 16) = v28;
      *(void *)(v18 + 40) = v26;
      *std::runtime_error v26 = 0;
      *(void *)(v18 + 56) = 0;
    }
    else
    {
      *(void *)(a1 + 2768) = v28;
    }
    uint64_t v55 = *(void *)(a1 + 3040);
    v102[67] = *(_OWORD *)(v55 + 64);
    *(void *)(v55 + 64) = 0;
    *(void *)(v55 + 72) = 0;
  }
  *(unsigned char *)(a1 + 2808) = v20;
  uint64_t v56 = *(void *)(a1 + 3048);
  if (v56 && !atomic_fetch_add((atomic_ullong *volatile)(v56 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v57 = *(std::__shared_weak_count **)(a1 + 3048);
    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
    std::__shared_weak_count::__release_weak(v57);
  }
  uint64_t v58 = *(std::__shared_weak_count **)(a1 + 584);
  if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
    std::__shared_weak_count::__release_weak(v58);
    if ((*(char *)(a1 + 2871) & 0x80000000) == 0) {
      goto LABEL_90;
    }
    goto LABEL_89;
  }
  if (*(char *)(a1 + 2871) < 0) {
LABEL_89:
  }
    operator delete(*(void **)(a1 + 2848));
LABEL_90:
  uint64_t v59 = *(std::__shared_weak_count **)(a1 + 160);
  if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
    std::__shared_weak_count::__release_weak(v59);
  }
  AMSCore::nestedError<std::expected<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error> &>(v119, (uint64_t)v106, 608, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
  if (!v125)
  {
    if (*(unsigned char *)(a1 + 2576))
    {
      *(unsigned char *)(a1 + 2584) = 0;
      *(unsigned char *)(a1 + 2608) = 0;
      if (*(unsigned char *)(a1 + 2448))
      {
        *(_OWORD *)(a1 + 2584) = *(_OWORD *)v105;
        *(void *)(a1 + 2600) = *((void *)v105 + 2);
        *((void *)v105 + 1) = 0;
        *((void *)v105 + 2) = 0;
        *(void *)v105 = 0;
        *(unsigned char *)(a1 + 2608) = 1;
      }
      *(unsigned char *)(a1 + 2616) = 0;
      *(unsigned char *)(a1 + 2640) = 0;
      if (*(unsigned char *)(a1 + 2480))
      {
        *(void *)(a1 + 2632) = *(void *)(a1 + 2472);
        *(_OWORD *)(a1 + 2616) = *(_OWORD *)(a1 + 2456);
        *(void *)(a1 + 2472) = 0;
        *(void *)(a1 + 2456) = 0;
        *(void *)(a1 + 2464) = 0;
        *(unsigned char *)(a1 + 2640) = 1;
      }
      *(unsigned char *)(a1 + 2648) = 0;
      *(unsigned char *)(a1 + 2672) = 0;
      if (*(unsigned char *)(a1 + 2512))
      {
        *(void *)(a1 + 2664) = *(void *)(a1 + 2504);
        *(_OWORD *)(a1 + 2648) = *(_OWORD *)(a1 + 2488);
        *(void *)(a1 + 2504) = 0;
        *(void *)(a1 + 2488) = 0;
        *(void *)(a1 + 2496) = 0;
        *(unsigned char *)(a1 + 2672) = 1;
      }
      *(_DWORD *)(a1 + 2680) = *(_DWORD *)(a1 + 2520);
      *(void *)(a1 + 2688) = a1 + 2688;
      *(void *)(a1 + 2696) = a1 + 2688;
      *(void *)(a1 + 2704) = 0;
      uint64_t v67 = *(void *)(a1 + 2544);
      if (v67)
      {
        std::runtime_error v68 = *(uint64_t **)(a1 + 2536);
        uint64_t v69 = *(void *)(a1 + 2528);
        uint64_t v70 = *v68;
        *(void *)(v70 + 8) = *(void *)(v69 + 8);
        **(void **)(v69 + 8) = v70;
        uint64_t v71 = *(void *)(a1 + 2688);
        *(void *)(v71 + 8) = v68;
        uint64_t *v68 = v71;
        *(void *)(a1 + 2688) = v69;
        *(void *)(v69 + 8) = a1 + 2688;
        *(void *)(a1 + 2704) = v67;
        *(void *)(a1 + 2544) = 0;
      }
      uint64_t v72 = *(void *)(a1 + 3016);
      uint64_t v73 = *(void *)(a1 + 3008);
      *(void *)(a1 + 2728) = *(void *)(a1 + 2568);
      *(_OWORD *)(a1 + 2712) = *(_OWORD *)(a1 + 2552);
      *(void *)(a1 + 2568) = 0;
      *(void *)(a1 + 2560) = 0;
      *(void *)(a1 + 2552) = 0;
      *(void *)(a1 + 2920) = v73;
      *(void *)(a1 + 2928) = v72;
      if (v72) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v72 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v74 = *(void *)(a1 + 3032);
      *(void *)(a1 + 2904) = *(void *)(a1 + 3024);
      *(void *)(a1 + 2912) = v74;
      if (v74) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v74 + 8), 1uLL, memory_order_relaxed);
      }
      AMSCore::EncodeHTTPRequestTask::OptionsBuilder::OptionsBuilder((uint64_t)v102, (long long *)(a1 + 2584), v97, (long long *)(a1 + 2904));
      long long v75 = *(std::__shared_weak_count **)(a1 + 2912);
      if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
      std::runtime_error v76 = *(std::__shared_weak_count **)(a1 + 2928);
      if (v76 && !atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
      AMSCore::URL::~URL((AMSCore::URL *)(a1 + 2584));
      if (*(unsigned char *)(a1 + 2808))
      {
        long long v77 = v106->__vftable;
        std::__shared_weak_count *v100 = v106->__vftable;
        if (v77) {
          operator new();
        }
        *(void *)(a1 + 2880) = 0;
        *(void *)(a1 + 2736) = 0;
        long long v78 = v102[72];
        std::__shared_weak_count *v100 = 0;
        v100[1] = 0;
        uint64_t v79 = *(std::__shared_weak_count **)(a1 + 1728);
        _OWORD *v102 = v78;
        if (v79 && !atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
        char v80 = *(unsigned char *)(a1 + 3096);
        uint64_t v81 = *(void *)(a1 + 3000);
        v116.__vftable = *v17;
        *(std::runtime_error_vtbl **)((char *)&v116.__vftable + 7) = *(std::runtime_error_vtbl **)(a1 + 2991);
        *char v17 = 0;
        *(void *)(a1 + 2991) = 0;
        char v120 = 21;
        strcpy(v119, "sign-sap-setup-buffer");
        *(void *)((char *)&v122 + 7) = *(std::runtime_error_vtbl **)((char *)&v116.__vftable + 7);
        uint64_t v121 = v81;
        *(void *)&long long v122 = v116.__vftable;
        HIBYTE(v122) = v80;
        v116.__vftable = 0;
        *(std::runtime_error_vtbl **)((char *)&v116.__vftable + 7) = 0;
        int v123 = 6;
        v107.__imp_.__imp_ = 0;
        uint64_t v108 = 0;
        v107.__vftable = (std::runtime_error_vtbl *)&v107.__imp_;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v107, (uint64_t *)&v107.__imp_, (const void **)v119, (long long *)v119);
        char imp = v107.__imp_.__imp_;
        *(void *)(a1 + 2816) = v107.__vftable;
        uint64_t v83 = a1 + 2824;
        *(void *)(a1 + 2824) = imp;
        uint64_t v84 = v108;
        *(void *)(a1 + 2832) = v108;
        if (v84)
        {
          *((void *)imp + 2) = v83;
          v107.__vftable = (std::runtime_error_vtbl *)&v107.__imp_;
          v107.__imp_.__imp_ = 0;
          uint64_t v108 = 0;
        }
        else
        {
          *uint64_t v99 = v83;
        }
        *(_DWORD *)(a1 + 2840) = 8;
        AMSCore::Any::operator=(a1 + 1776, (uint64_t)v99);
        *(unsigned char *)(a1 + 1808) = 2;
        *(_DWORD *)(a1 + 1892) = 6;
        uint64_t v85 = *(unsigned int *)(a1 + 2840);
        if (v85 != -1) {
          ((void (*)(std::runtime_error *, void *))off_1EDCA5B48[v85])(&v113, v99);
        }
        *(_DWORD *)(a1 + 2840) = -1;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v107, (unsigned int *)v107.__imp_.__imp_);
        if (v123 != -1) {
          ((void (*)(std::runtime_error *, uint64_t *))off_1EDCA5B48[v123])(&v113, &v121);
        }
        int v123 = -1;
        if (v120 < 0) {
          operator delete(*(void **)v119);
        }
        uint64_t v86 = *(std::__shared_weak_count **)(a1 + 2880);
        if (v86 && !atomic_fetch_add(&v86->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
        *uint64_t v96 = *(_OWORD *)(a1 + 3008);
        *std::string v95 = *(_OWORD *)(a1 + 3024);
        AMSCore::ExecuteHTTPRequestTask::OptionsBuilder::OptionsBuilder(v98, v96, v95);
        std::runtime_error v87 = *(std::__shared_weak_count **)(a1 + 2976);
        if (v87 && !atomic_fetch_add(&v87->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
        uint64_t v88 = *(std::__shared_weak_count **)(a1 + 2896);
        if (v88 && !atomic_fetch_add(&v88->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
        }
        AMSCore::EncodeHTTPRequestTask::Options::Options(a1 + 1352, (uint64_t)v102);
        AMSCore::EncodeHTTPRequestTask::perform(v16, a1 + 1352);
      }
    }
    goto LABEL_175;
  }
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v107, (uint64_t)v119);
  std::optional<std::expected<AMSCore::CachedCertificate,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(a1 + 24), &v107);
  v107.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  uint64_t v60 = v111;
  uint64_t v61 = v104;
  if (v111 && !atomic_fetch_add(&v111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v109, v110);
  MEMORY[0x192FA3C30](&v107);
  if (v125)
  {
    *(void *)uint64_t v119 = &unk_1EDC827D8;
    uint64_t v62 = v124;
    if (v124 && !atomic_fetch_add(&v124->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v122, *((unsigned int **)&v122 + 1));
    MEMORY[0x192FA3C30](v119);
  }
  uint64_t v63 = *(void *)(a1 + 3032);
  uint64_t v64 = *(void *)(a1 + 3016);
  char v65 = *(unsigned char *)(a1 + 3096);
  uint64_t v66 = *(void *)(a1 + 3000);
LABEL_167:
  uint64_t v93 = *(void *)(a1 + 2736);
  if (*(unsigned char *)(a1 + 2808))
  {
    v106->__vftable = 0;
    if (v93) {
      (*(void (**)(uint64_t))(*(void *)v93 + 8))(v93);
    }
    if (*(unsigned char *)(a1 + 2576)) {
      goto LABEL_171;
    }
LABEL_173:
    (**(void (***)(AMSCore::URL *))v105)(v105);
    goto LABEL_174;
  }
  (**(void (***)(void))(a1 + 2736))();
  if (!*(unsigned char *)(a1 + 2576)) {
    goto LABEL_173;
  }
LABEL_171:
  AMSCore::URL::~URL(v105);
LABEL_174:
  *(void *)(a1 + 3088) = v66;
  *(unsigned char *)(a1 + 3097) = v65;
  *(void *)(a1 + 3080) = v64;
  *(void *)(a1 + 3072) = v63;
  *(void *)(a1 + 152) = v61;
  *(void *)a1 = 0;
  return AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise::Awaiter::await_suspend(v16);
}

void sub_18DADB764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, AMSCore::EncodeHTTPRequestTask::Result *a17, AMSCore::EncodeHTTPRequestTask::Options *a18, uint64_t a19, AMSCore::URL *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_18DADB8E0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,unsigned int *a42)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&a41, a42);
    JUMPOUT(0x18DADB8F8);
  }
  JUMPOUT(0x18DADB8D0);
}

void sub_18DADB94C()
{
}

void AMSCore::signPayload(char *__p)
{
  if (!*(void *)__p)
  {
    std::runtime_error v7 = (void *)*((void *)__p + 386);
    char v8 = __p[3097];
    uint64_t v9 = (std::__shared_weak_count *)*((void *)__p + 385);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)__p + 384);
    goto LABEL_43;
  }
  uint64_t v2 = (void (***)(char *))(__p + 2424);
  if (!__p[2999])
  {
    uint64_t v11 = *((void *)__p + 381);
    if (v11 && !atomic_fetch_add((atomic_ullong *volatile)(v11 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      char v12 = (std::__shared_weak_count *)*((void *)__p + 381);
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    std::runtime_error v13 = (std::__shared_weak_count *)*((void *)__p + 73);
    if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    if (__p[2871] < 0) {
      operator delete(*((void **)__p + 356));
    }
    uint64_t v14 = (std::__shared_weak_count *)*((void *)__p + 20);
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    uint64_t v10 = (std::__shared_weak_count *)*((void *)__p + 379);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)__p + 377);
    char v8 = __p[3096];
    std::runtime_error v7 = (void *)*((void *)__p + 375);
    if (__p[2576]) {
      goto LABEL_42;
    }
LABEL_22:
    (**v2)(__p + 2424);
    goto LABEL_43;
  }
  if (__p[2999] == 1)
  {
    unint64_t v3 = (void **)(__p + 1352);
    uint64_t v4 = *((void *)__p + 383);
    if (v4 && !atomic_fetch_add((atomic_ullong *volatile)(v4 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      unsigned __int8 v5 = (std::__shared_weak_count *)*((void *)__p + 383);
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    char v6 = (std::__shared_weak_count *)*((void *)__p + 20);
    if (!v6) {
      goto LABEL_36;
    }
    goto LABEL_34;
  }
  std::runtime_error v15 = (std::__shared_weak_count *)*((void *)__p + 368);
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)__p + 370);
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  unint64_t v3 = (void **)(__p + 576);
  AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(__p + 2256));
  char v17 = (std::__shared_weak_count *)*((void *)__p + 168);
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 121);
  if (__p[960])
  {
    char v6 = (std::__shared_weak_count *)*((void *)__p + 119);
    if (!v6)
    {
LABEL_36:
      AMSCore::EncodeHTTPRequestTask::Options::~Options(v3);
      goto LABEL_37;
    }
LABEL_34:
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    goto LABEL_36;
  }
  (*(void (**)(char *))*v3)(__p + 576);
LABEL_37:
  AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(__p + 2088));
  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 215);
  uint64_t v18 = *((void *)__p + 342);
  if (__p[2808])
  {
    *((void *)__p + 342) = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  else
  {
    (*(void (**)(char *))v18)(__p + 2736);
  }
  uint64_t v10 = 0;
  uint64_t v9 = 0;
  char v8 = 0;
  std::runtime_error v7 = 0;
  if (!__p[2576]) {
    goto LABEL_22;
  }
LABEL_42:
  AMSCore::URL::~URL((AMSCore::URL *)(__p + 2424));
LABEL_43:
  uint64_t v19 = (char *)*((void *)__p + 18);
  if (v19 == __p + 120)
  {
    (*(void (**)(char *))(*((void *)__p + 15) + 32))(__p + 120);
    if (!__p[104]) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19) {
    (*(void (**)(char *))(*(void *)v19 + 40))(v19);
  }
  if (__p[104])
  {
LABEL_49:
    if (__p[96])
    {
      if (__p[47] < 0) {
        operator delete(*((void **)__p + 3));
      }
    }
    else
    {
      (**((void (***)(void))__p + 3))();
    }
  }
LABEL_53:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (!v9 || atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((v8 & 0x80) == 0) {
      goto LABEL_62;
    }
    goto LABEL_61;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (v8 < 0) {
LABEL_61:
  }
    operator delete(v7);
LABEL_62:
  operator delete(__p);
}

void std::shared_ptr<AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_18DADBF60(void *a1)
{
  __cxa_begin_catch(a1);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 96), 2uLL)) {
    (*(void (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  __cxa_rethrow();
}

void sub_18DADBF8C(_Unwind_Exception *a1)
{
}

uint64_t AMSCore::Logger::log<char [24]>(uint64_t result, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= 2u)
  {
    uint64_t v7 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v13);
    uint64_t v8 = *(void *)(v13[0] - 24);
    {
    }
    size_t v9 = strlen(a4);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v13, (uint64_t)a4, v9);
    uint64_t v10 = v13[6];
    uint64_t v11 = (char *)v13 + *(void *)(v13[0] - 24);
    if ((v11[32] & 5) != 0)
    {
      uint64_t v12 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v11 + 5) + 32))(&rep);
      uint64_t v12 = v20;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v17 = 2;
    uint64_t v18 = v10;
    uint64_t v19 = v12;
    (*(void (**)(void, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v7 + 16) + 16))(*(void *)(v7 + 16), a2, a3, &rep);
    v13[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v13 + *(void *)(v13[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v13[1] = MEMORY[0x1E4FBA470] + 16;
    if (v14 < 0) {
      operator delete((void *)v13[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v15);
  }
  return result;
}

void sub_18DADC248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *AMSCore::nestedError<std::expected<std::map<std::string,AMSCore::Any>,AMSCore::Error> &>(unsigned char *result, uint64_t a2, uint64_t a3, const std::error_category *a4)
{
  if (!*(unsigned char *)(a2 + 72))
  {
    std::runtime_error::runtime_error(&v16, (const std::runtime_error *)a2);
    uint64_t v7 = (void *)(a2 + 40);
    uint64_t v8 = *(void *)(a2 + 40);
    long long v17 = *(_OWORD *)(a2 + 16);
    size_t v9 = *(uint64_t **)(a2 + 32);
    v16.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v18 = v9;
    uint64_t v19 = v8;
    uint64_t v20 = *(void *)(a2 + 48);
    if (v20)
    {
      *(void *)(v8 + 16) = &v19;
      *(void *)(a2 + 32) = v7;
      void *v7 = 0;
      *(void *)(a2 + 48) = 0;
    }
    else
    {
      uint64_t v18 = &v19;
    }
    long long v21 = *(_OWORD *)(a2 + 56);
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    char v22 = 1;
    std::runtime_error::runtime_error(&v10, &v16);
    long long v11 = v17;
    v10.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v12 = v18;
    v13[0] = v19;
    v13[1] = v20;
    if (v20)
    {
      *(void *)(v19 + 16) = v13;
      uint64_t v18 = &v19;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
    }
    else
    {
      uint64_t v12 = v13;
    }
    long long v14 = v21;
    long long v21 = 0uLL;
    AMSCore::Error::Error<>((uint64_t)&v15, (uint64_t)&v10, a3, a4);
  }
  std::runtime_error *result = 0;
  result[72] = 0;
  return result;
}

void sub_18DADC578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void AMSCore::getValueByKey<AMSCore::DataBuffer,std::map<std::string,AMSCore::Any>>(uint64_t a1, uint64_t a2)
{
  v33[0] = (uint64_t)"sign-sap-setup-buffer";
  v33[1] = 21;
  AMSCore::getValueByKey((uint64_t)&v26, a2, "sign-sap-setup-buffer", 0x15uLL);
  if (!v32)
  {
    std::runtime_error::runtime_error(&v19, &v26);
    long long v20 = v27;
    v19.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    long long v21 = v28;
    uint64_t v22 = v29;
    uint64_t v23 = v30;
    if (v30)
    {
      *(void *)(v29 + 16) = &v22;
      uint64_t v28 = &v29;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
    }
    else
    {
      long long v21 = &v22;
    }
    long long v24 = v31;
    long long v31 = 0uLL;
    char v25 = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v13, (uint64_t)&v19);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v13);
    *(_OWORD *)(a1 + 16) = v14;
    *(void *)a1 = &unk_1EDC827D8;
    uint64_t v9 = v16;
    *(void *)(a1 + 32) = v15;
    *(void *)(a1 + 40) = v9;
    uint64_t v10 = a1 + 40;
    uint64_t v11 = v17;
    *(void *)(a1 + 48) = v17;
    if (v11)
    {
      *(void *)(v9 + 16) = v10;
      std::runtime_error v15 = &v16;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v9 = 0;
    }
    else
    {
      *(void *)(a1 + 32) = v10;
    }
    *(_OWORD *)(a1 + 56) = v18;
    long long v18 = 0uLL;
    *(unsigned char *)(a1 + 72) = 0;
    v13.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v15, (unsigned int *)v9);
    MEMORY[0x192FA3C30](&v13);
    if (!v25) {
      goto LABEL_26;
    }
    v19.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v12 = (std::__shared_weak_count *)*((void *)&v24 + 1);
    if (*((void *)&v24 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v6 = v22;
LABEL_25:
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v21, (unsigned int *)v6);
    MEMORY[0x192FA3C30](&v19);
    goto LABEL_26;
  }
  unint64_t v3 = v26.__vftable;
  int v4 = (int)v26.__vftable[1].~runtime_error;
  if (v4 == -1) {
    unsigned __int8 v5 = 0;
  }
  else {
    unsigned __int8 v5 = v26.__vftable[1].~runtime_error;
  }
  if (v5 != 6 && v5 != 5)
  {
    LOBYTE(v13.__vftable) = 34;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[32],std::string_view &,char>((uint64_t)&v19, 0xCu, "unable to find value with key \"", v33, (char *)&v13);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v19);
    *(_OWORD *)(a1 + 16) = v20;
    *(void *)a1 = &unk_1EDC827D8;
    uint64_t v6 = v22;
    *(void *)(a1 + 32) = v21;
    *(void *)(a1 + 40) = v6;
    uint64_t v7 = a1 + 40;
    uint64_t v8 = v23;
    *(void *)(a1 + 48) = v23;
    if (v8)
    {
      *(void *)(v6 + 16) = v7;
      long long v21 = &v22;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v6 = 0;
    }
    else
    {
      *(void *)(a1 + 32) = v7;
    }
    *(_OWORD *)(a1 + 56) = v24;
    long long v24 = 0uLL;
    *(unsigned char *)(a1 + 72) = 0;
    v19.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    goto LABEL_25;
  }
  if (v4 != v5) {
    unint64_t v3 = 0;
  }
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 72) = 1;
LABEL_26:
  if (!v32) {
    ((void (*)(std::runtime_error *))v26.~runtime_error)(&v26);
  }
}

void sub_18DADC8CC(_Unwind_Exception *exception_object)
{
  if (!*(unsigned char *)(v1 - 72)) {
    (**(void (***)(uint64_t))(v1 - 144))(v1 - 144);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *AMSCore::nestedError<std::expected<std::reference_wrapper<AMSCore::DataBuffer>,AMSCore::Error> &>(unsigned char *result, uint64_t a2, uint64_t a3, const std::error_category *a4)
{
  if (!*(unsigned char *)(a2 + 72))
  {
    std::runtime_error::runtime_error(&v16, (const std::runtime_error *)a2);
    uint64_t v7 = (void *)(a2 + 40);
    uint64_t v8 = *(void *)(a2 + 40);
    long long v17 = *(_OWORD *)(a2 + 16);
    uint64_t v9 = *(uint64_t **)(a2 + 32);
    v16.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    long long v18 = v9;
    uint64_t v19 = v8;
    uint64_t v20 = *(void *)(a2 + 48);
    if (v20)
    {
      *(void *)(v8 + 16) = &v19;
      *(void *)(a2 + 32) = v7;
      void *v7 = 0;
      *(void *)(a2 + 48) = 0;
    }
    else
    {
      long long v18 = &v19;
    }
    long long v21 = *(_OWORD *)(a2 + 56);
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    char v22 = 1;
    std::runtime_error::runtime_error(&v10, &v16);
    long long v11 = v17;
    v10.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v12 = v18;
    v13[0] = v19;
    v13[1] = v20;
    if (v20)
    {
      *(void *)(v19 + 16) = v13;
      long long v18 = &v19;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
    }
    else
    {
      uint64_t v12 = v13;
    }
    long long v14 = v21;
    long long v21 = 0uLL;
    AMSCore::Error::Error<>((uint64_t)&v15, (uint64_t)&v10, a3, a4);
  }
  std::runtime_error *result = 0;
  result[72] = 0;
  return result;
}

void sub_18DADCC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

__n128 AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::ValuePromise::return_value<AMSCore::DataBuffer>(char *a1, __n128 *a2)
{
  int v4 = a1 + 8;
  if (a1[88])
  {
    if (a1[80])
    {
      if (a1[31] < 0) {
        operator delete(*(void **)v4);
      }
    }
    else
    {
      (**(void (***)(uint64_t))v4)((uint64_t)(a1 + 8));
    }
    a1[88] = 0;
  }
  __n128 result = *a2;
  *((void *)v4 + 2) = a2[1].n128_u64[0];
  *(__n128 *)int v4 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  a1[80] = 1;
  a1[88] = 1;
  return result;
}

void AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise::unhandled_exception()
{
  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

uint64_t sub_18DADCCE8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v36, (uint64_t)v33);
  std::optional<std::expected<AMSCore::CachedCertificate,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>(v29, v36);
  v36[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  uint64_t v30 = v38;
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v37, v37[1]);
  MEMORY[0x192FA3C30](v36);
  v33[0] = &unk_1EDC827D8;
  long long v31 = v35;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v34, v34[1]);
  return MEMORY[0x192FA3C30](v33);
}

uint64_t AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise::Awaiter::await_suspend(uint64_t result)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void (**)(void))atomic_exchange((atomic_ullong *volatile)(*(void *)result + 96), 1uLL);
  if (v1)
  {
    uint64_t v2 = result;
    if (v1 == (void (**)(void))2) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result - 8))(*(void *)result - 16);
    }
    unint64_t v3 = (uint64_t *)(*(void *)result + 128);
    __n128 result = *v3;
    if (*v3)
    {
      if (result == *(void *)v2 + 104)
      {
        uint64_t v19 = v18;
        __n128 result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 24))(result, v18);
      }
      else
      {
        uint64_t v19 = *(void **)(*(void *)v2 + 128);
        *unint64_t v3 = 0;
      }
    }
    else
    {
      uint64_t v19 = 0;
    }
    if (v19)
    {
      uint64_t v4 = *(void *)v2;
      if (!*(unsigned char *)(*(void *)v2 + 88))
      {
        __break(1u);
        return result;
      }
      unsigned __int8 v5 = (const std::runtime_error *)(v4 + 8);
      char v6 = *(unsigned char *)(v4 + 80);
      if (v6)
      {
        std::runtime_error v7 = *v5;
        *(void *)&long long v12 = *(void *)(v4 + 24);
        *(std::runtime_error *)long long __p = v7;
        v5->__vftable = 0;
        *(void *)(v4 + 16) = 0;
        *(void *)(v4 + 24) = 0;
      }
      else
      {
        std::runtime_error::runtime_error((std::runtime_error *)__p, v5);
        uint64_t v8 = (void *)(v4 + 48);
        uint64_t v9 = *(void *)(v4 + 48);
        long long v12 = *(_OWORD *)(v4 + 24);
        std::runtime_error v10 = *(uint64_t **)(v4 + 40);
        __p[0] = &unk_1EDC827D8;
        std::runtime_error v13 = v10;
        uint64_t v14 = v9;
        if (*(void *)(v4 + 56))
        {
          *(void *)(v9 + 16) = &v14;
          *(void *)(v4 + 40) = v8;
          void *v8 = 0;
          *(void *)(v4 + 56) = 0;
        }
        else
        {
          std::runtime_error v13 = &v14;
        }
        long long v16 = *(_OWORD *)(v4 + 64);
        *(void *)(v4 + 64) = 0;
        *(void *)(v4 + 72) = 0;
      }
      char v17 = v6;
      if (!v19) {
        std::__throw_bad_function_call[abi:fe180100]();
      }
      (*(void (**)(void *, void **))(*v19 + 48))(v19, __p);
      if (v17)
      {
        if (SBYTE7(v12) < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        (*(void (**)(void **))__p[0])(__p);
      }
    }
    else
    {
      (*v1)(v1);
    }
    __n128 result = (uint64_t)v19;
    if (v19 == v18)
    {
      return (*(uint64_t (**)(void *))(v18[0] + 32))(v18);
    }
    else if (v19)
    {
      return (*(uint64_t (**)(void))(*v19 + 40))();
    }
  }
  return result;
}

void sub_18DADD0A4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINS_10DataBufferENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINS_10DataBufferENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINS_10DataBufferENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINS_10DataBufferENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 96), 2uLL)) {
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

uint64_t std::__shared_ptr_emplace<AMSCore::BuiltInMescalProvider>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMSCore::BuiltInMescalProvider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83E88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::BuiltInMescalProvider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83E88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(void *a1, char *a2)
{
  int v4 = a2[23];
  if (v4 >= 0) {
    unsigned __int8 v5 = a2;
  }
  else {
    unsigned __int8 v5 = *(char **)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = a2[23];
  }
  else {
    uint64_t v6 = *((void *)a2 + 1);
  }
  std::runtime_error v7 = std::locale::classic();
  uint64_t v8 = std::locale::use_facet(v7, MEMORY[0x1E4FBA258]);
  if (v6)
  {
    uint64_t v9 = v8;
    unint64_t v10 = 0;
    do
    {
      v10 ^= 2
           * ((int (*)(const std::locale::facet *, void))v9->__vftable[1].__on_zero_shared)(v9, *v5++);
      --v6;
    }
    while (v6);
    int8x8_t v11 = (int8x8_t)a1[1];
    if (!*(void *)&v11) {
      return 0;
    }
  }
  else
  {
    unint64_t v10 = 0;
    int8x8_t v11 = (int8x8_t)a1[1];
    if (!*(void *)&v11) {
      return 0;
    }
  }
  uint8x8_t v12 = (uint8x8_t)vcnt_s8(v11);
  v12.i16[0] = vaddlv_u8(v12);
  int8x8_t v35 = v11;
  unint64_t v36 = v12.u32[0];
  if (v12.u32[0] > 1uLL)
  {
    unint64_t v13 = v10;
    if (v10 >= *(void *)&v11) {
      unint64_t v13 = v10 % *(void *)&v11;
    }
  }
  else
  {
    unint64_t v13 = (*(void *)&v11 - 1) & v10;
  }
  uint64_t v14 = *(uint64_t ***)(*a1 + 8 * v13);
  if (!v14) {
    return 0;
  }
  std::runtime_error v15 = *v14;
  if (*v14)
  {
    unint64_t v34 = v13;
    do
    {
      unint64_t v17 = v15[1];
      if (v10 == v17)
      {
        long long v18 = (char *)(v15 + 2);
        char v19 = *((unsigned char *)v15 + 39);
        if (v19 < 0) {
          long long v18 = (char *)v15[2];
        }
        char v38 = v18;
        if (v19 >= 0) {
          uint64_t v20 = *((unsigned __int8 *)v15 + 39);
        }
        else {
          uint64_t v20 = v15[3];
        }
        char v21 = a2[23];
        if (v21 >= 0) {
          char v22 = a2;
        }
        else {
          char v22 = *(char **)a2;
        }
        uint64_t v37 = v22;
        if (v21 >= 0) {
          uint64_t v23 = a2[23];
        }
        else {
          uint64_t v23 = *((void *)a2 + 1);
        }
        long long v24 = std::locale::classic();
        char v25 = std::locale::use_facet(v24, MEMORY[0x1E4FBA258]);
        if (v20 == v23)
        {
          if (v20)
          {
            std::runtime_error v26 = v25;
            uint64_t v27 = v20 - 1;
            uint64_t v29 = v37;
            uint64_t v28 = v38;
            while (1)
            {
              uint64_t v30 = v27;
              uint64_t v31 = *v29;
              int v32 = ((uint64_t (*)(const std::locale::facet *, void))v26->__vftable[1].__on_zero_shared)(v26, *v28);
              if (v32 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v26->__vftable[1].__on_zero_shared)(v26, v31))break; {
              ++v28;
              }
              ++v29;
              uint64_t v27 = v30 - 1;
              if (!v30) {
                goto LABEL_45;
              }
            }
          }
          else
          {
            uint64_t v29 = v37;
            uint64_t v28 = v38;
LABEL_45:
            if (v28 == &v38[v20] && v29 == &v37[v20]) {
              return v15;
            }
          }
        }
      }
      else
      {
        if (v36 <= 1)
        {
          unint64_t v16 = v34;
          v17 &= *(void *)&v35 - 1;
        }
        else
        {
          unint64_t v16 = v34;
          if (v17 >= *(void *)&v35) {
            v17 %= *(void *)&v35;
          }
        }
        if (v17 != v16) {
          return 0;
        }
      }
      std::runtime_error v15 = (uint64_t *)*v15;
    }
    while (v15);
  }
  return v15;
}

{
  int v4;
  char *v5;
  uint64_t v6;
  const std::locale *v7;
  const std::locale::facet *v8;
  const std::locale::facet *v9;
  unint64_t v10;
  int8x8_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char v19;
  uint64_t v20;
  char v21;
  char *v22;
  uint64_t v23;
  const std::locale *v24;
  const std::locale::facet *v25;
  const std::locale::facet *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v34;
  int8x8_t v35;
  unint64_t v36;
  char *v37;
  char *v38;

  int v4 = a2[23];
  if (v4 >= 0) {
    unsigned __int8 v5 = a2;
  }
  else {
    unsigned __int8 v5 = *(char **)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = a2[23];
  }
  else {
    uint64_t v6 = *((void *)a2 + 1);
  }
  std::runtime_error v7 = std::locale::classic();
  uint64_t v8 = std::locale::use_facet(v7, MEMORY[0x1E4FBA258]);
  if (v6)
  {
    uint64_t v9 = v8;
    unint64_t v10 = 0;
    do
    {
      v10 ^= 2
           * ((int (*)(const std::locale::facet *, void))v9->__vftable[1].__on_zero_shared)(v9, *v5++);
      --v6;
    }
    while (v6);
    int8x8_t v11 = (int8x8_t)a1[1];
    if (!*(void *)&v11) {
      return 0;
    }
  }
  else
  {
    unint64_t v10 = 0;
    int8x8_t v11 = (int8x8_t)a1[1];
    if (!*(void *)&v11) {
      return 0;
    }
  }
  uint8x8_t v12 = (uint8x8_t)vcnt_s8(v11);
  v12.i16[0] = vaddlv_u8(v12);
  int8x8_t v35 = v11;
  unint64_t v36 = v12.u32[0];
  if (v12.u32[0] > 1uLL)
  {
    unint64_t v13 = v10;
    if (v10 >= *(void *)&v11) {
      unint64_t v13 = v10 % *(void *)&v11;
    }
  }
  else
  {
    unint64_t v13 = (*(void *)&v11 - 1) & v10;
  }
  uint64_t v14 = *(uint64_t ***)(*a1 + 8 * v13);
  if (!v14) {
    return 0;
  }
  std::runtime_error v15 = *v14;
  if (*v14)
  {
    unint64_t v34 = v13;
    do
    {
      unint64_t v17 = v15[1];
      if (v17 == v10)
      {
        long long v18 = (char *)(v15 + 2);
        char v19 = *((unsigned char *)v15 + 39);
        if (v19 < 0) {
          long long v18 = (char *)v15[2];
        }
        char v38 = v18;
        if (v19 >= 0) {
          uint64_t v20 = *((unsigned __int8 *)v15 + 39);
        }
        else {
          uint64_t v20 = v15[3];
        }
        char v21 = a2[23];
        if (v21 >= 0) {
          char v22 = a2;
        }
        else {
          char v22 = *(char **)a2;
        }
        uint64_t v37 = v22;
        if (v21 >= 0) {
          uint64_t v23 = a2[23];
        }
        else {
          uint64_t v23 = *((void *)a2 + 1);
        }
        long long v24 = std::locale::classic();
        char v25 = std::locale::use_facet(v24, MEMORY[0x1E4FBA258]);
        if (v20 == v23)
        {
          if (v20)
          {
            std::runtime_error v26 = v25;
            uint64_t v27 = v20 - 1;
            uint64_t v29 = v37;
            uint64_t v28 = v38;
            while (1)
            {
              uint64_t v30 = v27;
              uint64_t v31 = *v29;
              int v32 = ((uint64_t (*)(const std::locale::facet *, void))v26->__vftable[1].__on_zero_shared)(v26, *v28);
              if (v32 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v26->__vftable[1].__on_zero_shared)(v26, v31))break; {
              ++v28;
              }
              ++v29;
              uint64_t v27 = v30 - 1;
              if (!v30) {
                goto LABEL_45;
              }
            }
          }
          else
          {
            uint64_t v29 = v37;
            uint64_t v28 = v38;
LABEL_45:
            if (v28 == &v38[v20] && v29 == &v37[v20]) {
              return v15;
            }
          }
        }
      }
      else
      {
        if (v36 <= 1)
        {
          unint64_t v16 = v34;
          v17 &= *(void *)&v35 - 1;
        }
        else
        {
          unint64_t v16 = v34;
          if (v17 >= *(void *)&v35) {
            v17 %= *(void *)&v35;
          }
        }
        if (v17 != v16) {
          return 0;
        }
      }
      std::runtime_error v15 = (uint64_t *)*v15;
    }
    while (v15);
  }
  return v15;
}

void AMSCore::BuiltInMescalProvider::sign(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, long long *a5)
{
  long long v8 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  long long v11 = *a5;
  long long v12 = v8;
  *(void *)a5 = 0;
  *((void *)a5 + 1) = 0;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
  unint64_t v10 = (char *)operator new(0x180uLL);
  *(void *)unint64_t v10 = AMSCore::BuiltInMescalProvider::sign;
  *((void *)v10 + 1) = AMSCore::BuiltInMescalProvider::sign;
  *((void *)v10 + 37) = a2;
  *((void *)v10 + 38) = a3;
  *((void *)v10 + 39) = a1;
  *((void *)v10 + 40) = rep;
  *(_OWORD *)(v10 + 328) = v12;
  *(_OWORD *)(v10 + 344) = v11;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  v10[24] = 0;
  v10[104] = 0;
  *((void *)v10 + 14) = 0;
  *((void *)v10 + 18) = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(__p, (uint64_t)(v10 + 16));
}

void sub_18DADDA80(void *a1)
{
  if (!*(unsigned char *)(v1 + 224)) {
    (**v2)(v2);
  }
  if (*(unsigned char *)(v1 + 240)) {
    AMSCore::AwaitableMutex::unlock(*(std::mutex **)(v1 + 232));
  }
  __cxa_begin_catch(a1);
  AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DADDAD4()
{
}

uint64_t AMSCore::BuiltInMescalProvider::sign(uint64_t result)
{
  uint64_t v1 = result;
  if (!*(unsigned char *)(result + 376))
  {
    uint64_t v2 = *(void *)(result + 352);
    uint64_t v3 = *(void *)(result + 328);
    uint64_t v4 = *(void *)(result + 312);
    *(void *)(result + 232) = v4 + 8;
    *(unsigned char *)(result + 240) = 1;
    *(void *)(result + 264) = v3;
    *(_OWORD *)(result + 272) = *(_OWORD *)(result + 336);
    *(void *)(result + 288) = v2;
    AMSCore::BuiltInMescalProvider::ensureSessionIsValid(result + 248, v4, (uint64_t *)(result + 264), (void *)(result + 280));
  }
  uint64_t v5 = *(void *)(result + 360);
  if (*(unsigned char *)(v5 + 88))
  {
    uint64_t v6 = (void (***)(uint64_t))(result + 152);
    char v7 = *(unsigned char *)(v5 + 80);
    if (!v7)
    {
      std::runtime_error::runtime_error((std::runtime_error *)(result + 152), (const std::runtime_error *)(v5 + 8));
      *(_OWORD *)(v1 + 168) = *(_OWORD *)(v5 + 24);
      long long v8 = (void *)(v5 + 48);
      uint64_t v9 = *(void *)(v5 + 48);
      *(void *)(v1 + 192) = v9;
      uint64_t v10 = v1 + 192;
      *(void *)(v1 + 152) = &unk_1EDC827D8;
      *(void *)(v1 + 184) = *(void *)(v5 + 40);
      uint64_t v11 = *(void *)(v5 + 56);
      *(void *)(v1 + 200) = v11;
      if (v11)
      {
        *(void *)(v9 + 16) = v10;
        *(void *)(v5 + 40) = v8;
        void *v8 = 0;
        *(void *)(v5 + 56) = 0;
      }
      else
      {
        *(void *)(v1 + 184) = v10;
      }
      uint64_t v12 = *(void *)(v1 + 360);
      *(_OWORD *)(v1 + 208) = *(_OWORD *)(v12 + 64);
      *(void *)(v12 + 64) = 0;
      *(void *)(v12 + 72) = 0;
    }
    *(unsigned char *)(v1 + 224) = v7;
    uint64_t v13 = *(void *)(v1 + 368);
    if (v13 && !atomic_fetch_add((atomic_ullong *volatile)(v13 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v14 = *(std::__shared_weak_count **)(v1 + 368);
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    std::runtime_error v15 = *(std::__shared_weak_count **)(v1 + 256);
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    unint64_t v16 = *(std::__shared_weak_count **)(v1 + 288);
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    unint64_t v17 = *(std::__shared_weak_count **)(v1 + 272);
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    AMSCore::nestedError<std::expected<void,AMSCore::Error> &>(&__p, v1 + 152, 603, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
    if (v27)
    {
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v20, (uint64_t)&__p);
      std::optional<std::expected<AMSCore::CachedCertificate,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(v1 + 24), &v20);
      v20.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      long long v18 = v22;
      if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v21, v21[1]);
      MEMORY[0x192FA3C30](&v20);
      if (v27)
      {
        __p.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        char v19 = v26;
        if (v26)
        {
          if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v25, v25[1]);
        MEMORY[0x192FA3C30](&__p);
        if (!*(unsigned char *)(v1 + 224))
        {
LABEL_38:
          (**v6)(v1 + 152);
          if (!*(unsigned char *)(v1 + 240))
          {
LABEL_40:
            *(void *)(v1 + 152) = v1 + 16;
            *(void *)uint64_t v1 = 0;
            return AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise::Awaiter::await_suspend(v1 + 152);
          }
LABEL_39:
          AMSCore::AwaitableMutex::unlock(*(std::mutex **)(v1 + 232));
          goto LABEL_40;
        }
LABEL_35:
        if (!*(unsigned char *)(v1 + 240)) {
          goto LABEL_40;
        }
        goto LABEL_39;
      }
    }
    else
    {
      (*(void (**)(std::runtime_error *__return_ptr))(**(void **)(*(void *)(v1 + 312) + 104) + 32))(&__p);
      std::optional<std::expected<AMSCore::DataBuffer,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<AMSCore::DataBuffer,AMSCore::Error>,void>((std::runtime_error *)(v1 + 24), &__p);
      if (!v27)
      {
        ((void (*)(std::runtime_error *))__p.~runtime_error)(&__p);
        if (!*(unsigned char *)(v1 + 224)) {
          goto LABEL_38;
        }
        goto LABEL_35;
      }
      if (v24 < 0) {
        operator delete(__p.__vftable);
      }
    }
    if (!*(unsigned char *)(v1 + 224)) {
      goto LABEL_38;
    }
    goto LABEL_35;
  }
  __break(1u);
  return result;
}

void sub_18DADDFA4(void *a1)
{
  if (!*(unsigned char *)(v1 + 224)) {
    (**v2)(v2);
  }
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](v3);
  __cxa_begin_catch(a1);
  AMSCore::Task<AMSCore::DataBuffer,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DADDFF0()
{
}

void AMSCore::BuiltInMescalProvider::sign(char *__p)
{
  if (!*(void *)__p) {
    goto LABEL_16;
  }
  if (__p[376])
  {
    uint64_t v2 = *((void *)__p + 46);
    if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 46);
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 32);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)*((void *)__p + 36);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = (std::__shared_weak_count *)*((void *)__p + 34);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (!__p[240]) {
        goto LABEL_16;
      }
    }
    else if (!__p[240])
    {
LABEL_16:
      char v7 = 0;
      long long v8 = 0;
      goto LABEL_18;
    }
    AMSCore::AwaitableMutex::unlock(*((std::mutex **)__p + 29));
    goto LABEL_16;
  }
  char v7 = (std::__shared_weak_count *)*((void *)__p + 44);
  long long v8 = (std::__shared_weak_count *)*((void *)__p + 42);
LABEL_18:
  uint64_t v9 = (char *)*((void *)__p + 18);
  if (v9 == __p + 120)
  {
    (*(void (**)(char *))(*((void *)__p + 15) + 32))(__p + 120);
    if (!__p[104]) {
      goto LABEL_28;
    }
    goto LABEL_24;
  }
  if (v9) {
    (*(void (**)(char *))(*(void *)v9 + 40))(v9);
  }
  if (__p[104])
  {
LABEL_24:
    if (__p[96])
    {
      if (__p[47] < 0) {
        operator delete(*((void **)__p + 3));
      }
    }
    else
    {
      (**((void (***)(void))__p + 3))();
    }
  }
LABEL_28:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(__p);
}

void AMSCore::BuiltInMescalProvider::ensureSessionIsValid(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  char v7 = operator new(0x258uLL);
  void *v7 = AMSCore::BuiltInMescalProvider::ensureSessionIsValid;
  v7[1] = AMSCore::BuiltInMescalProvider::ensureSessionIsValid;
  uint64_t v9 = *a3;
  uint64_t v8 = a3[1];
  v7[63] = a2;
  v7[64] = v9;
  v7[65] = v8;
  *a3 = 0;
  a3[1] = 0;
  uint64_t v10 = a4[1];
  v7[66] = *a4;
  v7[67] = v10;
  *a4 = 0;
  a4[1] = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *((unsigned char *)v7 + 24) = 0;
  *((unsigned char *)v7 + 104) = 0;
  v7[14] = 0;
  v7[18] = 0;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(__p, (uint64_t)(v7 + 2));
}

void sub_18DAE0D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, AMSCore::ExecuteHTTPRequestTask::Options *a9, uint64_t a10, uint64_t a11, void **a12, AMSCore::EncodeHTTPRequestTask::Result *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,AMSCore::URL *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void (**a41)(void),uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  if (a2)
  {
    if (!a50) {
      (*a41)(&a41);
    }
    std::__expected_base<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::__repr::__destroy_union_member[abi:fe180100](a22);
    std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::~expected[abi:fe180100](v51);
    AMSCore::EncodeHTTPRequestTask::Options::~Options(a12);
    AMSCore::ExecuteHTTPRequestTask::Options::~Options(a9);
    std::expected<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](v50);
    std::expected<AMSCore::URL,AMSCore::Error>::~expected[abi:fe180100](a23);
    __cxa_begin_catch(exception_object);
    AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise::unhandled_exception();
  }
  _Unwind_Resume(exception_object);
}

std::runtime_error *std::optional<std::expected<AMSCore::DataBuffer,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<AMSCore::DataBuffer,AMSCore::Error>,void>(std::runtime_error *this, std::runtime_error *a2)
{
  if (LOBYTE(this[5].__vftable))
  {
    if (LOBYTE(this[4].__imp_.__imp_))
    {
      if (SHIBYTE(this[1].__vftable) < 0) {
        operator delete(this->__vftable);
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))this->~runtime_error)(this);
    }
    LOBYTE(this[5].__vftable) = 0;
  }
  char imp = (char)a2[4].__imp_.__imp_;
  if (imp)
  {
    std::runtime_error v5 = *a2;
    this[1].__vftable = a2[1].__vftable;
    *this = v5;
    a2->__imp_.__imp_ = 0;
    a2[1].__vftable = 0;
    a2->__vftable = 0;
  }
  else
  {
    std::runtime_error::runtime_error(this, a2);
    this[1] = a2[1];
    this->__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    p_char imp = (std::runtime_error_vtbl *)&a2[2].__imp_;
    char v7 = a2[2].__imp_.__imp_;
    this[2].__vftable = a2[2].__vftable;
    this[2].__imp_.__imp_ = v7;
    uint64_t v8 = (std::runtime_error_vtbl *)&this[2].__imp_;
    uint64_t v9 = a2[3].__vftable;
    this[3].__vftable = v9;
    if (v9)
    {
      *((void *)v7 + 2) = v8;
      a2[2].__vftable = p_imp;
      p_imp->~runtime_error = 0;
      a2[3].__vftable = 0;
    }
    else
    {
      this[2].__vftable = v8;
    }
    *(std::runtime_error *)((char *)this + 56) = *(std::runtime_error *)((char *)a2 + 56);
    a2[3].__imp_.__imp_ = 0;
    a2[4].__vftable = 0;
  }
  LOBYTE(this[4].__imp_.__imp_) = imp;
  LOBYTE(this[5].__vftable) = 1;
  return this;
}

unsigned char *AMSCore::BuiltInMescalProvider::ensureSessionIsValid(unsigned char *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (std::runtime_error *)(result + 152);
  uint64_t v3 = (void **)(result + 232);
  uint64_t v4 = (uint64_t)(result + 312);
  uint64_t v5 = (uint64_t)(result + 392);
  uint64_t v6 = (uint64_t *)(result + 496);
  char v7 = result + 16;
  if (!result[592])
  {
    uint64_t v12 = *((void *)result + 68);
    if (*(unsigned char *)(v12 + 88))
    {
      uint64_t v13 = (const std::runtime_error *)(v12 + 8);
      char v14 = *(unsigned char *)(v12 + 80);
      if (v14)
      {
        std::runtime_error v15 = *v13;
        *((void *)result + 31) = *(void *)(v12 + 24);
        *(std::runtime_error *)uint64_t v3 = v15;
        *(void *)(v12 + 16) = 0;
        *(void *)(v12 + 24) = 0;
        v13->__vftable = 0;
        *((void *)result + 32) = *(void *)(v12 + 32);
      }
      else
      {
        std::runtime_error::runtime_error((std::runtime_error *)(result + 232), v13);
        *(_OWORD *)(v1 + 248) = *(_OWORD *)(v12 + 24);
        *((void *)v1 + 29) = &unk_1EDC827D8;
        std::runtime_error v20 = (void *)(v12 + 48);
        uint64_t v21 = *(void *)(v12 + 48);
        char v22 = v1 + 272;
        *((void *)v1 + 33) = *(void *)(v12 + 40);
        *((void *)v1 + 34) = v21;
        uint64_t v23 = *(void *)(v12 + 56);
        *((void *)v1 + 35) = v23;
        if (v23)
        {
          *(void *)(v21 + 16) = v22;
          *(void *)(v12 + 40) = v20;
          *std::runtime_error v20 = 0;
          *(void *)(v12 + 56) = 0;
        }
        else
        {
          *((void *)v1 + 33) = v22;
        }
        uint64_t v46 = *((void *)v1 + 68);
        *((_OWORD *)v1 + 18) = *(_OWORD *)(v46 + 64);
        *(void *)(v46 + 64) = 0;
        *(void *)(v46 + 72) = 0;
      }
      v1[304] = v14;
      uint64_t v47 = *((void *)v1 + 69);
      if (v47 && !atomic_fetch_add((atomic_ullong *volatile)(v47 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        char v48 = (std::__shared_weak_count *)*((void *)v1 + 69);
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
      char v49 = (std::__shared_weak_count *)*((void *)v1 + 20);
      if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
      BOOL v50 = (std::__shared_weak_count *)*((void *)v1 + 53);
      if (v50 && !atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
      uint64_t v51 = (std::__shared_weak_count *)*((void *)v1 + 59);
      if (v51 && !atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
      __n128 result = AMSCore::nestedError<std::expected<AMSCore::CachedCertificate,AMSCore::Error> &>(v75, (uint64_t)v3, 609, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
      if (v79)
      {
        AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v68, (uint64_t)v75);
        if (v1[104])
        {
          if (!v1[96]) {
            (**((void (***)(void))v1 + 3))();
          }
          v1[104] = 0;
        }
        std::runtime_error::runtime_error((std::runtime_error *)(v1 + 24), &v68);
        long long v52 = v69;
        char v54 = v70;
        uint64_t v53 = v71;
        *((void *)v1 + 8) = v71;
        uint64_t v55 = v1 + 64;
        *(_OWORD *)(v1 + 40) = v52;
        *((void *)v1 + 3) = &unk_1EDC827D8;
        uint64_t v56 = v72;
        *((void *)v1 + 7) = v54;
        *((void *)v1 + 9) = v56;
        if (v56)
        {
          *(void *)(v53 + 16) = v55;
          uint64_t v70 = &v71;
          uint64_t v71 = 0;
          uint64_t v72 = 0;
          uint64_t v53 = 0;
        }
        else
        {
          *((void *)v1 + 7) = v55;
        }
        *((_OWORD *)v1 + 5) = v73;
        long long v73 = 0uLL;
        v1[96] = 0;
        v1[104] = 1;
        v68.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v70, (unsigned int *)v53);
        MEMORY[0x192FA3C30](&v68);
        if (v79)
        {
          v75[0] = &unk_1EDC827D8;
          char v65 = v78;
          if (v78 && !atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v76, v77);
          MEMORY[0x192FA3C30](v75);
        }
        uint64_t v44 = *((void *)v1 + 67);
        uint64_t v45 = *((void *)v1 + 65);
LABEL_116:
        if (v1[304]) {
          goto LABEL_117;
        }
        goto LABEL_129;
      }
      if (v1[304])
      {
        int v57 = (char)v1[255];
        if (v57 >= 0) {
          uint64_t v58 = v3;
        }
        else {
          uint64_t v58 = (void **)*((void *)v1 + 29);
        }
        if (v57 >= 0) {
          uint64_t v59 = v1[255];
        }
        else {
          uint64_t v59 = *((void *)v1 + 30);
        }
        (*(void (**)(void, void **, uint64_t))(**(void **)(*((void *)v1 + 63) + 104) + 16))(*(void *)(*((void *)v1 + 63) + 104), v58, v59);
        __n128 result = AMSCore::nestedError<std::expected<AMSCore::DataBuffer,AMSCore::Error> &>(v75, v4, 609, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
        if (v79)
        {
          AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v68, (uint64_t)v75);
          if (v1[104])
          {
            if (!v1[96]) {
              (**((void (***)(void))v1 + 3))();
            }
            v1[104] = 0;
          }
          std::runtime_error::runtime_error((std::runtime_error *)(v1 + 24), &v68);
          long long v60 = v69;
          uint64_t v62 = v70;
          uint64_t v61 = v71;
          *((void *)v1 + 8) = v71;
          uint64_t v63 = v1 + 64;
          *(_OWORD *)(v1 + 40) = v60;
          *((void *)v1 + 3) = &unk_1EDC827D8;
          uint64_t v64 = v72;
          *((void *)v1 + 7) = v62;
          *((void *)v1 + 9) = v64;
          if (v64)
          {
            *(void *)(v61 + 16) = v63;
            uint64_t v70 = &v71;
            uint64_t v71 = 0;
            uint64_t v72 = 0;
            uint64_t v61 = 0;
          }
          else
          {
            *((void *)v1 + 7) = v63;
          }
          *((_OWORD *)v1 + 5) = v73;
          long long v73 = 0uLL;
          v1[96] = 0;
          v1[104] = 1;
          v68.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v70, (unsigned int *)v61);
          MEMORY[0x192FA3C30](&v68);
          if (v79)
          {
            v75[0] = &unk_1EDC827D8;
            uint64_t v67 = v78;
            if (v78 && !atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
              std::__shared_weak_count::__release_weak(v67);
            }
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v76, v77);
            MEMORY[0x192FA3C30](v75);
          }
          uint64_t v44 = *((void *)v1 + 67);
          uint64_t v45 = *((void *)v1 + 65);
          if (v1[384])
          {
LABEL_71:
            if ((char)v1[335] < 0)
            {
              operator delete(*(void **)v4);
              if (!v1[304]) {
                goto LABEL_129;
              }
LABEL_117:
              if ((char)v1[255] < 0) {
                operator delete(*v3);
              }
              goto LABEL_130;
            }
            goto LABEL_116;
          }
LABEL_128:
          (**(void (***)(uint64_t))v4)(v4);
          if (v1[304]) {
            goto LABEL_117;
          }
LABEL_129:
          (*(void (**)(void **))*v3)(v3);
LABEL_130:
          _ZZN7AMSCore7finallyIZNS_21BuiltInMescalProvider20ensureSessionIsValidENSt3__110shared_ptrINS_4IBagEEENS3_IKNS_11IBundleInfoEEENS2_6chrono10time_pointINS9_12system_clockENS9_8durationIxNS2_5ratioILl1ELl1000000EEEEEEEE3__0EEDaOT_EN7FinallyD1Ev(v6);
          *((void *)v1 + 73) = v45;
          *((void *)v1 + 72) = v44;
          *((void *)v1 + 19) = v7;
          *(void *)uint64_t v1 = 0;
          return (unsigned char *)AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v2);
        }
        if (v1[384])
        {
          *(_OWORD *)uint64_t v5 = *(_OWORD *)v4;
          *(void *)(v5 + 16) = *(void *)(v4 + 16);
          *(void *)(v4 + 8) = 0;
          *(void *)(v4 + 16) = 0;
          *(void *)uint64_t v4 = 0;
          long long v66 = *((_OWORD *)v1 + 33);
          *((_OWORD *)v1 + 30) = *((_OWORD *)v1 + 32);
          *((_OWORD *)v1 + 27) = v66;
          AMSCore::signPayload((uint64_t)(v1 + 448), v5, (void *)v1 + 60, (void *)v1 + 54);
        }
      }
    }
    goto LABEL_131;
  }
  uint64_t v8 = *((void *)result + 70);
  if (!*(unsigned char *)(v8 + 88)) {
    goto LABEL_131;
  }
  uint64_t v9 = (const std::runtime_error *)(v8 + 8);
  char v10 = *(unsigned char *)(v8 + 80);
  if (v10)
  {
    std::runtime_error v11 = *v9;
    *((void *)result + 21) = *(void *)(v8 + 24);
    std::runtime_error *v2 = v11;
    *(void *)(v8 + 16) = 0;
    *(void *)(v8 + 24) = 0;
    v9->__vftable = 0;
  }
  else
  {
    std::runtime_error::runtime_error(v2, v9);
    *(_OWORD *)(v1 + 168) = *(_OWORD *)(v8 + 24);
    unint64_t v16 = (void *)(v8 + 48);
    uint64_t v17 = *(void *)(v8 + 48);
    *((void *)v1 + 24) = v17;
    long long v18 = v1 + 192;
    *((void *)v1 + 19) = &unk_1EDC827D8;
    *((void *)v1 + 23) = *(void *)(v8 + 40);
    uint64_t v19 = *(void *)(v8 + 56);
    *((void *)v1 + 25) = v19;
    if (v19)
    {
      *(void *)(v17 + 16) = v18;
      *(void *)(v8 + 40) = v16;
      *unint64_t v16 = 0;
      *(void *)(v8 + 56) = 0;
    }
    else
    {
      *((void *)v1 + 23) = v18;
    }
    uint64_t v24 = *((void *)v1 + 70);
    *((_OWORD *)v1 + 13) = *(_OWORD *)(v24 + 64);
    *(void *)(v24 + 64) = 0;
    *(void *)(v24 + 72) = 0;
  }
  v1[224] = v10;
  uint64_t v25 = *((void *)v1 + 71);
  if (v25 && !atomic_fetch_add((atomic_ullong *volatile)(v25 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    std::runtime_error v26 = (std::__shared_weak_count *)*((void *)v1 + 71);
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  char v27 = (std::__shared_weak_count *)*((void *)v1 + 57);
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  uint64_t v28 = (std::__shared_weak_count *)*((void *)v1 + 55);
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  uint64_t v29 = (std::__shared_weak_count *)*((void *)v1 + 61);
  if (!v29 || atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (((char)v1[415] & 0x80000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
  std::__shared_weak_count::__release_weak(v29);
  if ((char)v1[415] < 0) {
LABEL_26:
  }
    operator delete(*(void **)v5);
LABEL_27:
  __n128 result = AMSCore::nestedError<std::expected<AMSCore::DataBuffer,AMSCore::Error> &>(v75, (uint64_t)v2, 609, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
  if (v79)
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v68, (uint64_t)v75);
    if (v1[104])
    {
      if (!v1[96]) {
        (**((void (***)(uint64_t))v1 + 3))((uint64_t)(v1 + 24));
      }
      v1[104] = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(v1 + 24), &v68);
    long long v30 = v69;
    int v32 = v70;
    uint64_t v31 = v71;
    *((void *)v1 + 8) = v71;
    int v33 = v1 + 64;
    *(_OWORD *)(v1 + 40) = v30;
    *((void *)v1 + 3) = &unk_1EDC827D8;
    uint64_t v34 = v72;
    *((void *)v1 + 7) = v32;
    *((void *)v1 + 9) = v34;
    if (v34)
    {
      *(void *)(v31 + 16) = v33;
      uint64_t v70 = &v71;
      uint64_t v71 = 0;
      uint64_t v72 = 0;
      uint64_t v31 = 0;
    }
    else
    {
      *((void *)v1 + 7) = v33;
    }
    *((_OWORD *)v1 + 5) = v73;
    long long v73 = 0uLL;
    v1[96] = 0;
    v1[104] = 1;
    v68.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v70, (unsigned int *)v31);
    MEMORY[0x192FA3C30](&v68);
    if (v79)
    {
      v75[0] = &unk_1EDC827D8;
      __n128 v40 = v78;
      if (v78 && !atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v76, v77);
      MEMORY[0x192FA3C30](v75);
      if (!v1[224]) {
        goto LABEL_69;
      }
LABEL_66:
      if ((char)v1[175] < 0) {
        operator delete(v2->__vftable);
      }
LABEL_70:
      uint64_t v44 = 0;
      uint64_t v45 = 0;
      if (v1[384]) {
        goto LABEL_71;
      }
      goto LABEL_128;
    }
    goto LABEL_65;
  }
  if (v1[224])
  {
    (*(void (**)(std::runtime_error *__return_ptr))(**(void **)(*((void *)v1 + 63) + 104) + 24))(&v68);
    __n128 result = AMSCore::nestedError<std::expected<void,AMSCore::Error> &>(v75, (uint64_t)&v68, 609, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
    if (v79)
    {
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v80, (uint64_t)v75);
      if (v1[104])
      {
        if (!v1[96]) {
          (**((void (***)(uint64_t))v1 + 3))((uint64_t)(v1 + 24));
        }
        v1[104] = 0;
      }
      std::runtime_error::runtime_error((std::runtime_error *)(v1 + 24), &v80);
      long long v35 = v81;
      uint64_t v37 = v82;
      uint64_t v36 = v83;
      *((void *)v1 + 8) = v83;
      char v38 = v1 + 64;
      *(_OWORD *)(v1 + 40) = v35;
      *((void *)v1 + 3) = &unk_1EDC827D8;
      uint64_t v39 = v84;
      *((void *)v1 + 7) = v37;
      *((void *)v1 + 9) = v39;
      if (v39)
      {
        *(void *)(v36 + 16) = v38;
        char v82 = &v83;
        uint64_t v83 = 0;
        uint64_t v84 = 0;
        uint64_t v36 = 0;
      }
      else
      {
        *((void *)v1 + 7) = v38;
      }
      *((_OWORD *)v1 + 5) = v85;
      long long v85 = 0uLL;
      v1[96] = 0;
      v1[104] = 1;
      v80.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v82, (unsigned int *)v36);
      MEMORY[0x192FA3C30](&v80);
      if (v79)
      {
        v75[0] = &unk_1EDC827D8;
        char v43 = v78;
        if (v78 && !atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v76, v77);
        MEMORY[0x192FA3C30](v75);
      }
      goto LABEL_64;
    }
    if (v1[304])
    {
      uint64_t v41 = *((void *)v1 + 63);
      uint64_t v42 = *((void *)v1 + 32);
      if (!*(unsigned char *)(v41 + 120))
      {
        *(unsigned char *)(v41 + 120) = 1;
        uint64_t v41 = *((void *)v1 + 63);
      }
      *(void *)(v41 + 112) = v42;
      if (v1[104] && !v1[96])
      {
        (**((void (***)(uint64_t))v1 + 3))((uint64_t)(v1 + 24));
        v1[104] = 0;
      }
      v1[96] = 1;
      v1[104] = 1;
LABEL_64:
      if (!v74)
      {
        ((void (*)(std::runtime_error *))v68.~runtime_error)(&v68);
        if (v1[224]) {
          goto LABEL_66;
        }
LABEL_69:
        ((void (*)(std::runtime_error *))v2->~runtime_error)(v2);
        goto LABEL_70;
      }
LABEL_65:
      if (v1[224]) {
        goto LABEL_66;
      }
      goto LABEL_69;
    }
  }
LABEL_131:
  __break(1u);
  return result;
}

void sub_18DAE1F2C(void *a1)
{
  std::expected<AMSCore::IAnisetteProvider::StartProvisioningResult,AMSCore::Error>::~expected[abi:fe180100](v3);
  std::expected<AMSCore::IAnisetteProvider::StartProvisioningResult,AMSCore::Error>::~expected[abi:fe180100](v2);
  _ZZN7AMSCore7finallyIZNS_21BuiltInMescalProvider20ensureSessionIsValidENSt3__110shared_ptrINS_4IBagEEENS3_IKNS_11IBundleInfoEEENS2_6chrono10time_pointINS9_12system_clockENS9_8durationIxNS2_5ratioILl1ELl1000000EEEEEEEE3__0EEDaOT_EN7FinallyD1Ev(v1);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DAE1FC4()
{
}

void AMSCore::BuiltInMescalProvider::ensureSessionIsValid(char *__p)
{
  uint64_t v2 = (void **)(__p + 232);
  if (!*(void *)__p)
  {
    uint64_t v9 = (std::__shared_weak_count *)*((void *)__p + 73);
    char v10 = (std::__shared_weak_count *)*((void *)__p + 72);
    goto LABEL_41;
  }
  if (!__p[592])
  {
    uint64_t v11 = *((void *)__p + 69);
    if (v11 && !atomic_fetch_add((atomic_ullong *volatile)(v11 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v12 = (std::__shared_weak_count *)*((void *)__p + 69);
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v13 = (std::__shared_weak_count *)*((void *)__p + 20);
    if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    char v14 = (std::__shared_weak_count *)*((void *)__p + 53);
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    std::runtime_error v15 = (std::__shared_weak_count *)*((void *)__p + 59);
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    char v10 = (std::__shared_weak_count *)*((void *)__p + 67);
    uint64_t v9 = (std::__shared_weak_count *)*((void *)__p + 65);
    goto LABEL_40;
  }
  uint64_t v3 = *((void *)__p + 71);
  if (v3 && !atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 71);
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)__p + 57);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)__p + 55);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  char v7 = (std::__shared_weak_count *)*((void *)__p + 61);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = (void **)(__p + 312);
  if (__p[415] < 0)
  {
    operator delete(*((void **)__p + 49));
    if (__p[384])
    {
LABEL_17:
      if (__p[335] < 0) {
        operator delete(*v8);
      }
      if (__p[304]) {
        goto LABEL_20;
      }
      goto LABEL_38;
    }
  }
  else if (__p[384])
  {
    goto LABEL_17;
  }
  (*(void (**)(char *))*v8)(__p + 312);
  if (__p[304])
  {
LABEL_20:
    if (__p[255] < 0) {
      operator delete(*v2);
    }
    goto LABEL_39;
  }
LABEL_38:
  (*(void (**)(void **))*v2)(v2);
LABEL_39:
  char v10 = 0;
  uint64_t v9 = 0;
LABEL_40:
  _ZZN7AMSCore7finallyIZNS_21BuiltInMescalProvider20ensureSessionIsValidENSt3__110shared_ptrINS_4IBagEEENS3_IKNS_11IBundleInfoEEENS2_6chrono10time_pointINS9_12system_clockENS9_8durationIxNS2_5ratioILl1ELl1000000EEEEEEEE3__0EEDaOT_EN7FinallyD1Ev((uint64_t *)__p + 62);
LABEL_41:
  unint64_t v16 = (char *)*((void *)__p + 18);
  if (v16 == __p + 120)
  {
    (*(void (**)(char *))(*((void *)__p + 15) + 32))(__p + 120);
    if (!__p[104]) {
      goto LABEL_49;
    }
    goto LABEL_47;
  }
  if (v16) {
    (*(void (**)(char *))(*(void *)v16 + 40))(v16);
  }
  if (__p[104])
  {
LABEL_47:
    if (!__p[96]) {
      (**((void (***)(void))__p + 3))();
    }
  }
LABEL_49:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  operator delete(__p);
}

uint64_t AMSCore::Logger::log<char [25]>(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= a2)
  {
    char v8 = a2;
    uint64_t v9 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v15);
    uint64_t v10 = *(void *)(v15[0] - 24);
    {
    }
    size_t v11 = strlen(a5);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v15, (uint64_t)a5, v11);
    uint64_t v12 = v15[6];
    uint64_t v13 = (char *)v15 + *(void *)(v15[0] - 24);
    if ((v13[32] & 5) != 0)
    {
      uint64_t v14 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v13 + 5) + 32))(&rep);
      uint64_t v14 = v22;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v19 = v8;
    uint64_t v20 = v12;
    uint64_t v21 = v14;
    (*(void (**)(void, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v9 + 16) + 16))(*(void *)(v9 + 16), a3, a4, &rep);
    v15[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v15 + *(void *)(v15[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v15[1] = MEMORY[0x1E4FBA470] + 16;
    if (v16 < 0) {
      operator delete((void *)v15[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v17);
  }
  return result;
}

void sub_18DAE2738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *AMSCore::nestedError<std::expected<AMSCore::CachedCertificate,AMSCore::Error> &>(unsigned char *result, uint64_t a2, uint64_t a3, const std::error_category *a4)
{
  if (!*(unsigned char *)(a2 + 72))
  {
    std::runtime_error::runtime_error(&v16, (const std::runtime_error *)a2);
    char v7 = (void *)(a2 + 40);
    uint64_t v8 = *(void *)(a2 + 40);
    long long v17 = *(_OWORD *)(a2 + 16);
    uint64_t v9 = *(uint64_t **)(a2 + 32);
    v16.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    long long v18 = v9;
    uint64_t v19 = v8;
    uint64_t v20 = *(void *)(a2 + 48);
    if (v20)
    {
      *(void *)(v8 + 16) = &v19;
      *(void *)(a2 + 32) = v7;
      void *v7 = 0;
      *(void *)(a2 + 48) = 0;
    }
    else
    {
      long long v18 = &v19;
    }
    long long v21 = *(_OWORD *)(a2 + 56);
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    char v22 = 1;
    std::runtime_error::runtime_error(&v10, &v16);
    long long v11 = v17;
    v10.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v12 = v18;
    v13[0] = v19;
    v13[1] = v20;
    if (v20)
    {
      *(void *)(v19 + 16) = v13;
      long long v18 = &v19;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
    }
    else
    {
      uint64_t v12 = v13;
    }
    long long v14 = v21;
    long long v21 = 0uLL;
    AMSCore::Error::Error<>((uint64_t)&v15, (uint64_t)&v10, a3, a4);
  }
  std::runtime_error *result = 0;
  result[72] = 0;
  return result;
}

void sub_18DAE2A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

unsigned char *AMSCore::nestedError<std::expected<AMSCore::DataBuffer,AMSCore::Error> &>(unsigned char *result, uint64_t a2, uint64_t a3, const std::error_category *a4)
{
  if (!*(unsigned char *)(a2 + 72))
  {
    std::runtime_error::runtime_error(&v16, (const std::runtime_error *)a2);
    char v7 = (void *)(a2 + 40);
    uint64_t v8 = *(void *)(a2 + 40);
    long long v17 = *(_OWORD *)(a2 + 16);
    uint64_t v9 = *(uint64_t **)(a2 + 32);
    v16.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    long long v18 = v9;
    uint64_t v19 = v8;
    uint64_t v20 = *(void *)(a2 + 48);
    if (v20)
    {
      *(void *)(v8 + 16) = &v19;
      *(void *)(a2 + 32) = v7;
      void *v7 = 0;
      *(void *)(a2 + 48) = 0;
    }
    else
    {
      long long v18 = &v19;
    }
    long long v21 = *(_OWORD *)(a2 + 56);
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    char v22 = 1;
    std::runtime_error::runtime_error(&v10, &v16);
    long long v11 = v17;
    v10.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v12 = v18;
    v13[0] = v19;
    v13[1] = v20;
    if (v20)
    {
      *(void *)(v19 + 16) = v13;
      long long v18 = &v19;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
    }
    else
    {
      uint64_t v12 = v13;
    }
    long long v14 = v21;
    long long v21 = 0uLL;
    AMSCore::Error::Error<>((uint64_t)&v15, (uint64_t)&v10, a3, a4);
  }
  std::runtime_error *result = 0;
  result[72] = 0;
  return result;
}

void sub_18DAE2D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

uint64_t *_ZZN7AMSCore7finallyIZNS_21BuiltInMescalProvider20ensureSessionIsValidENSt3__110shared_ptrINS_4IBagEEENS3_IKNS_11IBundleInfoEEENS2_6chrono10time_pointINS9_12system_clockENS9_8durationIxNS2_5ratioILl1ELl1000000EEEEEEEE3__0EEDaOT_EN7FinallyD1Ev(uint64_t *a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  if (!*(unsigned char *)(*a1 + 120))
  {
    AMSCore::ServiceProvider<AMSCore::IDataProvider>::getDefault(&v18);
    LOBYTE(rep) = 0;
    char v30 = 0;
    (*(void (**)(void *__return_ptr))(*(void *)v18 + 48))(v22);
    if (v30)
    {
      if (v29 != -1) {
        ((void (*)(void (***)(void), std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))off_1EDCA5AF8[v29])(&v13, &rep);
      }
      LODWORD(v29) = -1;
    }
    if (!(_BYTE)__p)
    {
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v13);
      AMSCore::Logger::log<char [30],AMSCore::Error>((uint64_t)v13, 3u, (uint64_t)"fairplay", 8, "Failed to clear certificate: ", (uint64_t)v22);
      uint64_t v3 = v14;
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
      if (!(_BYTE)__p) {
        (*(void (**)(void *))v22[0])(v22);
      }
    }
    LOBYTE(v13) = 0;
    char v16 = 0;
    (*(void (**)(void *__return_ptr))(*(void *)v18 + 48))(v22);
    if (v16)
    {
      if (v15 != -1) {
        ((void (*)(uint64_t *, void (***)(void)))off_1EDCA5AF8[v15])(&v20, &v13);
      }
      int v15 = -1;
    }
    if (!(_BYTE)__p)
    {
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v20);
      AMSCore::Logger::log<char [41],AMSCore::Error>(v20, 3u, (uint64_t)"fairplay", 8, "Failed to clear certificate expiration: ", (uint64_t)v22);
      uint64_t v4 = v21;
      if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      if (!(_BYTE)__p) {
        (*(void (**)(void *))v22[0])(v22);
      }
    }
    uint64_t v5 = v19;
    if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    (*(void (**)(void *__return_ptr))(**(void **)(v2 + 104) + 40))(&v13);
    if (!v17)
    {
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v20);
      uint64_t v6 = v20;
      if (*(unsigned __int8 *)(v20 + 8) <= 4u)
      {
        std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v22);
        uint64_t v7 = *(void *)(v22[0] - 24);
        {
        }
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v22, (uint64_t)"Failed to reset mescal state", 28);
        AMSCore::operator<<(v22, (uint64_t)&v13);
        uint64_t v8 = v22[6];
        uint64_t v9 = (char *)v22 + *(void *)(v22[0] - 24);
        if ((v9[32] & 5) != 0)
        {
          uint64_t v10 = -1;
        }
        else
        {
          (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v9 + 5) + 32))(&rep);
          uint64_t v10 = v31;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
        char v27 = 4;
        uint64_t v28 = v8;
        uint64_t v29 = v10;
        (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v6 + 16) + 16))(*(void *)(v6 + 16), "fairplay", 8, &rep);
        v22[0] = *MEMORY[0x1E4FBA418];
        *(void *)((char *)v22 + *(void *)(v22[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
        v22[1] = MEMORY[0x1E4FBA470] + 16;
        if (v24 < 0) {
          operator delete(__p);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x192FA3FD0](&v25);
      }
      long long v11 = v21;
      if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      if (!v17) {
        (*v13)(&v13);
      }
    }
  }
  return a1;
}

void sub_18DAE33A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AMSCore::anonymous namespace'::loadSession(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 312);
  if (*(unsigned char *)(v1 + 88))
  {
    uint64_t v3 = a1 + 152;
    uint64_t v4 = (const std::runtime_error *)(v1 + 8);
    char v5 = *(unsigned char *)(v1 + 80);
    if (v5)
    {
      std::runtime_error v6 = *v4;
      *(void *)(a1 + 168) = *(void *)(v1 + 24);
      *(std::runtime_error *)uint64_t v3 = v6;
      *(void *)(v1 + 16) = 0;
      *(void *)(v1 + 24) = 0;
      v4->__vftable = 0;
      *(void *)(a1 + 176) = *(void *)(v1 + 32);
    }
    else
    {
      std::runtime_error::runtime_error((std::runtime_error *)(a1 + 152), v4);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(v1 + 24);
      uint64_t v7 = (void *)(v1 + 48);
      uint64_t v8 = *(void *)(v1 + 48);
      *(void *)(a1 + 192) = v8;
      uint64_t v9 = a1 + 192;
      *(void *)(a1 + 152) = &unk_1EDC827D8;
      *(void *)(a1 + 184) = *(void *)(v1 + 40);
      uint64_t v10 = *(void *)(v1 + 56);
      *(void *)(a1 + 200) = v10;
      if (v10)
      {
        *(void *)(v8 + 16) = v9;
        *(void *)(v1 + 40) = v7;
        void *v7 = 0;
        *(void *)(v1 + 56) = 0;
      }
      else
      {
        *(void *)(a1 + 184) = v9;
      }
      uint64_t v11 = *(void *)(a1 + 312);
      *(_OWORD *)(a1 + 208) = *(_OWORD *)(v11 + 64);
      *(void *)(v11 + 64) = 0;
      *(void *)(v11 + 72) = 0;
    }
    *(unsigned char *)(a1 + 224) = v5;
    uint64_t v12 = *(void *)(a1 + 320);
    if (v12 && !atomic_fetch_add((atomic_ullong *volatile)(v12 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v13 = *(std::__shared_weak_count **)(a1 + 320);
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    long long v14 = *(std::__shared_weak_count **)(a1 + 272);
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    int v15 = *(std::__shared_weak_count **)(a1 + 304);
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    char v16 = *(std::__shared_weak_count **)(a1 + 288);
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    AMSCore::nestedError<std::expected<AMSCore::CachedCertificate,AMSCore::Error> &,char const(&)[20]>(v24, v3, 606, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
    if (v27)
    {
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v28, (uint64_t)v24);
      std::optional<std::expected<AMSCore::CachedCertificate,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(a1 + 24), &v28);
      v28.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      char v17 = v30;
      if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v29, v29[1]);
      MEMORY[0x192FA3C30](&v28);
      if (v27)
      {
        v24[0] = &unk_1EDC827D8;
        uint64_t v18 = v26;
        if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v25, v25[1]);
        MEMORY[0x192FA3C30](v24);
      }
      if (*(unsigned char *)(a1 + 224))
      {
LABEL_30:
        if (*(char *)(a1 + 175) < 0) {
          operator delete(*(void **)v3);
        }
        goto LABEL_47;
      }
LABEL_46:
      (**(void (***)(uint64_t))v3)(v3);
LABEL_47:
      *(void *)(a1 + 152) = a1 + 16;
      *(void *)a1 = 0;
      *(unsigned char *)(a1 + 328) = 1;
      AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise::Awaiter::await_suspend(v3);
      return;
    }
    if (*(unsigned char *)(a1 + 224))
    {
      int v19 = *(char *)(a1 + 175);
      uint64_t v20 = v19 >= 0 ? (const void *)v3 : *(const void **)(a1 + 152);
      size_t v21 = v19 >= 0 ? *(unsigned __int8 *)(a1 + 175) : *(void *)(a1 + 160);
      AMSCore::setCacheValues(v20, v21, *(void *)(a1 + 176));
      if (*(unsigned char *)(a1 + 224))
      {
        if (*(unsigned char *)(a1 + 104))
        {
          if (*(unsigned char *)(a1 + 96))
          {
            if (*(char *)(a1 + 47) < 0) {
              operator delete(*(void **)(a1 + 24));
            }
          }
          else
          {
            (**(void (***)(void))(a1 + 24))();
          }
        }
        *(_OWORD *)(a1 + 24) = *(_OWORD *)v3;
        uint64_t v22 = *(void *)(v3 + 16);
        *(void *)(v3 + 8) = 0;
        *(void *)(v3 + 16) = 0;
        *(void *)uint64_t v3 = 0;
        uint64_t v23 = *(void *)(a1 + 176);
        *(void *)(a1 + 40) = v22;
        *(void *)(a1 + 48) = v23;
        *(unsigned char *)(a1 + 96) = 1;
        *(unsigned char *)(a1 + 104) = 1;
        if (*(unsigned char *)(a1 + 224)) {
          goto LABEL_30;
        }
        goto LABEL_46;
      }
    }
  }
  __break(1u);
}

void sub_18DAE38F8(void *a1)
{
  std::expected<AMSCore::IAnisetteProvider::StartProvisioningResult,AMSCore::Error>::~expected[abi:fe180100](v1);
  __cxa_begin_catch(a1);
  AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DAE3914()
{
}

void sub_18DAE391C(_Unwind_Exception *a1)
{
  *(void *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 328) = 1;
  _Unwind_Resume(a1);
}

void AMSCore::anonymous namespace'::loadSession(char *__p)
{
  if ((__p[328] & 1) == 0)
  {
    uint64_t v2 = *((void *)__p + 40);
    if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 40);
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 34);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    char v5 = (std::__shared_weak_count *)*((void *)__p + 38);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    std::runtime_error v6 = (std::__shared_weak_count *)*((void *)__p + 36);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  uint64_t v7 = (char *)*((void *)__p + 18);
  if (v7 == __p + 120)
  {
    (*(void (**)(char *))(*((void *)__p + 15) + 32))(__p + 120);
    if (!__p[104]) {
      goto LABEL_24;
    }
    goto LABEL_20;
  }
  if (v7) {
    (*(void (**)(char *))(*(void *)v7 + 40))(v7);
  }
  if (__p[104])
  {
LABEL_20:
    if (__p[96])
    {
      if (__p[47] < 0) {
        operator delete(*((void **)__p + 3));
      }
    }
    else
    {
      (**((void (***)(void))__p + 3))();
    }
  }
LABEL_24:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)__p + 30);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)__p + 32);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  operator delete(__p);
}

unsigned char *AMSCore::nestedError<std::expected<AMSCore::CachedCertificate,AMSCore::Error> &,char const(&)[20]>(unsigned char *result, uint64_t a2, uint64_t a3, const std::error_category *a4)
{
  if (!*(unsigned char *)(a2 + 72))
  {
    std::runtime_error::runtime_error(&v18, (const std::runtime_error *)a2);
    uint64_t v7 = (void *)(a2 + 40);
    uint64_t v8 = *(void *)(a2 + 40);
    long long v19 = *(_OWORD *)(a2 + 16);
    uint64_t v9 = *(uint64_t **)(a2 + 32);
    v18.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v20 = v9;
    uint64_t v21 = v8;
    uint64_t v22 = *(void *)(a2 + 48);
    if (v22)
    {
      *(void *)(v8 + 16) = &v21;
      *(void *)(a2 + 32) = v7;
      void *v7 = 0;
      *(void *)(a2 + 48) = 0;
    }
    else
    {
      uint64_t v20 = &v21;
    }
    long long v23 = *(_OWORD *)(a2 + 56);
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    char v24 = 1;
    std::runtime_error::runtime_error(&v10, &v18);
    long long v11 = v19;
    v10.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v12 = v20;
    v13[0] = v21;
    v13[1] = v22;
    if (v22)
    {
      *(void *)(v21 + 16) = v13;
      uint64_t v20 = &v21;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
    }
    else
    {
      uint64_t v12 = v13;
    }
    long long v14 = v23;
    long long v23 = 0uLL;
    AMSCore::StringUtils::join<char [20]>(&__what_arg, "load session failed");
    *(void *)&v26.__val_ = a3;
    v26.__cat_ = a4;
    std::system_error::system_error(&v15, v26, &__what_arg);
    if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__what_arg.__r_.__value_.__l.__data_);
    }
    v17[0] = 0;
    v17[1] = 0;
    v15.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
    char v16 = v17;
    operator new();
  }
  std::runtime_error *result = 0;
  result[72] = 0;
  return result;
}

void sub_18DAE4008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,unsigned int *a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v29, a25);
  MEMORY[0x192FA3C30](&a20);
  AMSCore::Error::~Error((AMSCore::Error *)&a11);
  std::optional<AMSCore::Error>::~optional((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_18DAE4068()
{
  if (*(char *)(v0 - 89) < 0) {
    operator delete(*(void **)(v0 - 112));
  }
  JUMPOUT(0x18DAE4050);
}

uint64_t AMSCore::Task<AMSCore::CachedCertificate,AMSCore::Error>::ValuePromise::~ValuePromise(uint64_t a1)
{
  uint64_t v2 = a1 + 104;
  uint64_t v3 = *(void *)(a1 + 128);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    if (!*(unsigned char *)(a1 + 88)) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  if (*(unsigned char *)(a1 + 88))
  {
LABEL_7:
    uint64_t v4 = (void **)(a1 + 8);
    if (*(unsigned char *)(a1 + 80))
    {
      if (*(char *)(a1 + 31) < 0) {
        operator delete(*v4);
      }
    }
    else
    {
      (*(void (**)(void **))*v4)(v4);
    }
  }
LABEL_11:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  return a1;
}

uint64_t AMSCore::StringUtils::join<char [20]>(std::string *a1, const char *a2)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v6);
  size_t v4 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v6, (uint64_t)a2, v4);
  std::stringbuf::str[abi:fe180100]((uint64_t)v7, a1);
  uint64_t v6 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v7[-1] + *(void *)(v6 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v7[0] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FA3FD0](&v9);
}

void AMSCore::BuiltInMescalProvider::~BuiltInMescalProvider(AMSCore::BuiltInMescalProvider *this)
{
  *(void *)this = &unk_1EDC82308;
  uint64_t v2 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((void *)this + 12))
  {
    uint64_t v4 = *((void *)this + 10);
    uint64_t v3 = (AMSCore::BuiltInMescalProvider *)*((void *)this + 11);
    uint64_t v5 = *(void *)v3;
    *(void *)(v5 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v5;
    *((void *)this + 12) = 0;
    if (v3 != (AMSCore::BuiltInMescalProvider *)((char *)this + 80))
    {
      do
      {
        uint64_t v6 = (AMSCore::BuiltInMescalProvider *)*((void *)v3 + 1);
        operator delete(v3);
        uint64_t v3 = v6;
      }
      while (v6 != (AMSCore::BuiltInMescalProvider *)((char *)this + 80));
    }
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  JUMPOUT(0x192FA4080);
}

{
  uint64_t v2;
  AMSCore::BuiltInMescalProvider *v3;
  uint64_t v4;
  uint64_t v5;
  AMSCore::BuiltInMescalProvider *v6;

  *(void *)this = &unk_1EDC82308;
  uint64_t v2 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((void *)this + 12))
  {
    uint64_t v4 = *((void *)this + 10);
    uint64_t v3 = (AMSCore::BuiltInMescalProvider *)*((void *)this + 11);
    uint64_t v5 = *(void *)v3;
    *(void *)(v5 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v5;
    *((void *)this + 12) = 0;
    if (v3 != (AMSCore::BuiltInMescalProvider *)((char *)this + 80))
    {
      do
      {
        uint64_t v6 = (AMSCore::BuiltInMescalProvider *)*((void *)v3 + 1);
        operator delete(v3);
        uint64_t v3 = v6;
      }
      while (v6 != (AMSCore::BuiltInMescalProvider *)((char *)this + 80));
    }
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

void AMSCore::anonymous namespace'::BuiltInNativeMescal::reset(AMSCore::_anonymous_namespace_::BuiltInNativeMescal *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 88)) {
    IPaI1oem5iL(*((void *)this + 1));
  }
  memset(v21, 0, sizeof(v21));
  cp2g1b9ro((uint64_t)this + 8, (uint64_t)v21);
  if (v4)
  {
    char v23 = 5;
    strcpy((char *)&v22, "CCode");
    uint64_t v24 = v4;
    int v25 = 3;
    long long v14 = 0;
    uint64_t v15 = 0;
    uint64_t v13 = &v14;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v13, (uint64_t *)&v14, (const void **)&v22.__vftable, (long long *)&v22);
    AMSCore::StringUtils::join<>(&__p);
    v27.__cat_ = (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance;
    *(void *)&v27.__val_ = 600;
    std::system_error::system_error(&v16, v27, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    v16.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
    char v17 = v13;
    std::runtime_error v18 = v14;
    uint64_t v19 = v15;
    if (v15)
    {
      *((void *)v14 + 2) = &v18;
      uint64_t v13 = &v14;
      long long v14 = 0;
      uint64_t v15 = 0;
    }
    else
    {
      char v17 = &v18;
    }
    long long v20 = 0uLL;
    if (*((unsigned char *)this + 88))
    {
      AMSCore::Error::operator=((uint64_t)this + 16, (uint64_t)&v16);
      uint64_t v6 = (std::__shared_weak_count *)*((void *)&v20 + 1);
      v16.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
      if (*((void *)&v20 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      std::runtime_error::runtime_error((std::runtime_error *)this + 1, &v16);
      std::error_code ec = v16.__ec_;
      uint64_t v9 = v17;
      char v8 = v18;
      *((void *)this + 7) = v18;
      std::runtime_error v10 = (char *)this + 56;
      *((std::error_code *)this + 2) = ec;
      *((void *)this + 2) = &unk_1EDC827D8;
      uint64_t v11 = v19;
      *((void *)this + 6) = v9;
      *((void *)this + 8) = v11;
      if (v11)
      {
        *((void *)v8 + 2) = v10;
        char v17 = &v18;
        std::runtime_error v18 = 0;
        uint64_t v19 = 0;
      }
      else
      {
        *((void *)this + 6) = v10;
      }
      *(_OWORD *)((char *)this + 72) = v20;
      long long v20 = 0uLL;
      *((unsigned char *)this + 88) = 1;
      v16.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v17, v18);
    MEMORY[0x192FA3C30](&v16);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v13, v14);
    if (v25 != -1) {
      ((void (*)(std::string *, uint64_t *))off_1EDCA5B98[v25])(&__p, &v24);
    }
    int v25 = -1;
    if (v23 < 0) {
      operator delete(v22.__vftable);
    }
    if (*((unsigned char *)this + 88))
    {
      AMSCore::Error::Error(&v22, (const std::runtime_error *)this + 1);
      AMSCore::Error::Error<>((uint64_t)&v16, (uint64_t)&v22, 607, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
    }
    __break(1u);
  }
  if (*((unsigned char *)this + 88))
  {
    *((void *)this + 2) = &unk_1EDC827D8;
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 10);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this + 48, *((unsigned int **)this + 7));
    MEMORY[0x192FA3C30]((char *)this + 16);
    *((unsigned char *)this + 88) = 0;
  }
  *(unsigned char *)(a2 + 72) = 1;
}

void sub_18DAE49B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AMSCore::anonymous namespace'::BuiltInNativeMescal::sign(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 88))
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&>((uint64_t)&__dst, (const std::runtime_error *)(a1 + 16));
    std::runtime_error::runtime_error((std::runtime_error *)a4, &__dst);
    *(_OWORD *)(a4 + 16) = v22;
    *(void *)a4 = &unk_1EDC827D8;
    uint64_t v5 = v24;
    *(void *)(a4 + 32) = v23;
    *(void *)(a4 + 40) = v5;
    uint64_t v6 = a4 + 40;
    uint64_t v7 = v25;
    *(void *)(a4 + 48) = v25;
    if (v7)
    {
      *(void *)(v5 + 16) = v6;
      char v23 = &v24;
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      uint64_t v5 = 0;
    }
    else
    {
      *(void *)(a4 + 32) = v6;
    }
    *(_OWORD *)(a4 + 56) = v26;
    long long v26 = 0uLL;
    *(unsigned char *)(a4 + 72) = 0;
    __dst.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v23, (unsigned int *)v5);
    MEMORY[0x192FA3C30](&__dst);
    return;
  }
  memset(__len, 0, sizeof(__len));
  Fc3vhtJDvr(*(void *)(a1 + 8), a2, a3, (uint64_t)&__len[1], (uint64_t)__len);
  if (!v8)
  {
    uint64_t v12 = *(const void **)&__len[1];
    size_t v13 = __len[0];
    if (__len[0] >= 0x17u)
    {
      uint64_t v16 = (__len[0] & 0xFFFFFFF8) + 8;
      if ((__len[0] | 7) != 0x17) {
        uint64_t v16 = __len[0] | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (std::runtime_error_vtbl *)operator new(v16 + 1);
      __dst.__imp_.__imp_ = (const char *)v13;
      *(void *)&long long v22 = v17 | 0x8000000000000000;
      __dst.__vftable = p_dst;
    }
    else
    {
      BYTE7(v22) = __len[0];
      p_dst = (std::runtime_error_vtbl *)&__dst;
      if (!__len[0])
      {
LABEL_23:
        *((unsigned char *)&p_dst->~runtime_error + v13) = 0;
        *(std::runtime_error *)a4 = __dst;
        *(void *)(a4 + 16) = v22;
        *(unsigned char *)(a4 + 72) = 1;
        uint64_t v15 = *(void *)&__len[1];
        if (!*(void *)&__len[1]) {
          return;
        }
        goto LABEL_24;
      }
    }
    memmove(p_dst, v12, v13);
    goto LABEL_23;
  }
  char v29 = 5;
  strcpy((char *)&v28, "CCode");
  v30[0] = v8;
  int v31 = 3;
  v19[0] = 0;
  v19[1] = 0;
  std::runtime_error v18 = v19;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v18, (uint64_t *)v19, (const void **)&v28, &v28);
  AMSCore::Unexpected<AMSCore::Error,AMSCore::FairPlayErrorCode,std::map<std::string,AMSCore::Any>>((uint64_t)&__dst, 0x25Bu, &v18);
  std::runtime_error::runtime_error((std::runtime_error *)a4, &__dst);
  *(_OWORD *)(a4 + 16) = v22;
  *(void *)a4 = &unk_1EDC827D8;
  uint64_t v9 = v24;
  *(void *)(a4 + 32) = v23;
  *(void *)(a4 + 40) = v9;
  uint64_t v10 = a4 + 40;
  uint64_t v11 = v25;
  *(void *)(a4 + 48) = v25;
  if (v11)
  {
    *(void *)(v9 + 16) = v10;
    char v23 = &v24;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    *(void *)(a4 + 32) = v10;
  }
  *(_OWORD *)(a4 + 56) = v26;
  long long v26 = 0uLL;
  *(unsigned char *)(a4 + 72) = 0;
  __dst.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v23, (unsigned int *)v9);
  MEMORY[0x192FA3C30](&__dst);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v18, v19[0]);
  if (v31 != -1) {
    ((void (*)(char *, void *))off_1EDCA5B98[v31])(&v27, v30);
  }
  int v31 = -1;
  if (v29 < 0) {
    operator delete((void *)v28);
  }
  uint64_t v15 = *(void *)&__len[1];
  if (*(void *)&__len[1]) {
LABEL_24:
  }
    jEHf8Xzsv8K(v15);
}

void sub_18DAE4D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AMSCore::anonymous namespace'::BuiltInNativeMescal::exchange(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v29[3] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 88))
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&>((uint64_t)&v18, (const std::runtime_error *)(a1 + 16));
    std::runtime_error::runtime_error((std::runtime_error *)a4, &v18);
    *(_OWORD *)(a4 + 16) = v19;
    *(void *)a4 = &unk_1EDC827D8;
    uint64_t v5 = v21;
    *(void *)(a4 + 32) = v20;
    *(void *)(a4 + 40) = v5;
    uint64_t v6 = a4 + 40;
    uint64_t v7 = v22;
    *(void *)(a4 + 48) = v22;
    if (v7)
    {
      *(void *)(v5 + 16) = v6;
      long long v20 = &v21;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v5 = 0;
    }
    else
    {
      *(void *)(a4 + 32) = v6;
    }
    *(_OWORD *)(a4 + 56) = v23;
    long long v23 = 0uLL;
    *(unsigned char *)(a4 + 72) = 0;
    v18.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v20, (unsigned int *)v5);
    MEMORY[0x192FA3C30](&v18);
  }
  else
  {
    uint64_t v17 = 0;
    int v16 = 0;
    memset(v29, 0, 24);
    char v15 = -1;
    Mib5yocT(200, (uint64_t)v29, *(void *)(a1 + 8), a2, a3, (uint64_t)&v17, (uint64_t)&v16, (uint64_t)&v15);
    if (v8 || v15 == 255)
    {
      char v26 = 5;
      strcpy((char *)__p, "CCode");
      v27[0] = v15;
      int v28 = 3;
      v14[0] = 0;
      v14[1] = 0;
      size_t v13 = v14;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v13, (uint64_t *)v14, (const void **)__p, (long long *)__p);
      AMSCore::Unexpected<AMSCore::Error,AMSCore::FairPlayErrorCode,std::map<std::string,AMSCore::Any>>((uint64_t)&v18, 0x25Au, &v13);
      std::runtime_error::runtime_error((std::runtime_error *)a4, &v18);
      *(_OWORD *)(a4 + 16) = v19;
      *(void *)a4 = &unk_1EDC827D8;
      uint64_t v10 = v21;
      *(void *)(a4 + 32) = v20;
      *(void *)(a4 + 40) = v10;
      uint64_t v11 = a4 + 40;
      uint64_t v12 = v22;
      *(void *)(a4 + 48) = v22;
      if (v12)
      {
        *(void *)(v10 + 16) = v11;
        long long v20 = &v21;
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        uint64_t v10 = 0;
      }
      else
      {
        *(void *)(a4 + 32) = v11;
      }
      *(_OWORD *)(a4 + 56) = v23;
      long long v23 = 0uLL;
      *(unsigned char *)(a4 + 72) = 0;
      v18.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v20, (unsigned int *)v10);
      MEMORY[0x192FA3C30](&v18);
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v13, v14[0]);
      if (v28 != -1) {
        ((void (*)(char *, void *))off_1EDCA5B98[v28])(&v24, v27);
      }
      int v28 = -1;
      if (v26 < 0)
      {
        operator delete(__p[0]);
        uint64_t v9 = v17;
        if (!v17) {
          return;
        }
      }
      else
      {
        uint64_t v9 = v17;
        if (!v17) {
          return;
        }
      }
    }
    else
    {
      *(unsigned char *)(a4 + 72) = 1;
      uint64_t v9 = v17;
      if (!v17) {
        return;
      }
    }
    jEHf8Xzsv8K(v9);
  }
}

void sub_18DAE5074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AMSCore::anonymous namespace'::BuiltInNativeMescal::prepareExchange(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v33[3] = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 88))
  {
    memset(__len, 0, sizeof(__len));
    memset(v33, 0, 24);
    char v20 = -1;
    Mib5yocT(200, (uint64_t)v33, *(void *)(a1 + 8), a2, a3, (uint64_t)&__len[1], (uint64_t)__len, (uint64_t)&v20);
    if (v8 || v20 == 255)
    {
      char v30 = 5;
      strcpy((char *)__p, "CCode");
      v31[0] = v20;
      int v32 = 3;
      v19[0] = 0;
      v19[1] = 0;
      std::runtime_error v18 = v19;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v18, (uint64_t *)v19, (const void **)__p, (long long *)__p);
      AMSCore::Unexpected<AMSCore::Error,AMSCore::FairPlayErrorCode,std::map<std::string,AMSCore::Any>>((uint64_t)&__dst, 0x259u, &v18);
      std::runtime_error::runtime_error((std::runtime_error *)a4, &__dst);
      *(_OWORD *)(a4 + 16) = v23;
      *(void *)a4 = &unk_1EDC827D8;
      uint64_t v12 = v25;
      *(void *)(a4 + 32) = v24;
      *(void *)(a4 + 40) = v12;
      uint64_t v13 = a4 + 40;
      uint64_t v14 = v26;
      *(void *)(a4 + 48) = v26;
      if (v14)
      {
        *(void *)(v12 + 16) = v13;
        char v24 = &v25;
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v12 = 0;
      }
      else
      {
        *(void *)(a4 + 32) = v13;
      }
      *(_OWORD *)(a4 + 56) = v27;
      long long v27 = 0uLL;
      *(unsigned char *)(a4 + 72) = 0;
      __dst.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v24, (unsigned int *)v12);
      MEMORY[0x192FA3C30](&__dst);
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v18, v19[0]);
      if (v32 != -1) {
        ((void (*)(char *, void *))off_1EDCA5B98[v32])(&v28, v31);
      }
      int v32 = -1;
      if (v30 < 0)
      {
        operator delete(__p[0]);
        uint64_t v17 = *(void *)&__len[1];
        if (!*(void *)&__len[1]) {
          return;
        }
      }
      else
      {
        uint64_t v17 = *(void *)&__len[1];
        if (!*(void *)&__len[1]) {
          return;
        }
      }
      goto LABEL_24;
    }
    uint64_t v9 = *(const void **)&__len[1];
    size_t v10 = __len[0];
    if (__len[0] >= 0x17u)
    {
      uint64_t v15 = (__len[0] & 0xFFFFFFF8) + 8;
      if ((__len[0] | 7) != 0x17) {
        uint64_t v15 = __len[0] | 7;
      }
      uint64_t v16 = v15 + 1;
      p_dst = (std::runtime_error_vtbl *)operator new(v15 + 1);
      __dst.__imp_.__imp_ = (const char *)v10;
      *(void *)&long long v23 = v16 | 0x8000000000000000;
      __dst.__vftable = p_dst;
    }
    else
    {
      BYTE7(v23) = __len[0];
      p_dst = (std::runtime_error_vtbl *)&__dst;
      if (!__len[0])
      {
LABEL_17:
        *((unsigned char *)&p_dst->~runtime_error + v10) = 0;
        *(std::runtime_error *)a4 = __dst;
        *(void *)(a4 + 16) = v23;
        *(unsigned char *)(a4 + 72) = 1;
        uint64_t v17 = *(void *)&__len[1];
        if (!*(void *)&__len[1]) {
          return;
        }
LABEL_24:
        jEHf8Xzsv8K(v17);
        return;
      }
    }
    memmove(p_dst, v9, v10);
    goto LABEL_17;
  }
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&>((uint64_t)&__dst, (const std::runtime_error *)(a1 + 16));
  std::runtime_error::runtime_error((std::runtime_error *)a4, &__dst);
  *(_OWORD *)(a4 + 16) = v23;
  *(void *)a4 = &unk_1EDC827D8;
  uint64_t v5 = v25;
  *(void *)(a4 + 32) = v24;
  *(void *)(a4 + 40) = v5;
  uint64_t v6 = a4 + 40;
  uint64_t v7 = v26;
  *(void *)(a4 + 48) = v26;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    char v24 = &v25;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    *(void *)(a4 + 32) = v6;
  }
  *(_OWORD *)(a4 + 56) = v27;
  long long v27 = 0uLL;
  *(unsigned char *)(a4 + 72) = 0;
  __dst.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v24, (unsigned int *)v5);
  MEMORY[0x192FA3C30](&__dst);
}

void sub_18DAE5414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AMSCore::anonymous namespace'::BuiltInNativeMescal::~BuiltInNativeMescal(AMSCore::_anonymous_namespace_::BuiltInNativeMescal *this)
{
  JUMPOUT(0x192FA4080);
}

{
  std::__shared_weak_count *v2;

  *(void *)this = &unk_1EDC81B98;
  if (*((unsigned char *)this + 88) || (IPaI1oem5iL(*((void *)this + 1)), *((unsigned char *)this + 88)))
  {
    *((void *)this + 2) = &unk_1EDC827D8;
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
    if (v2)
    {
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this + 48, *((unsigned int **)this + 7));
    MEMORY[0x192FA3C30]((char *)this + 16);
  }
}

void AMSCore::BuiltInAnisetteProvider::startProvisioning(uint64_t a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (a3 == 2)
  {
    uint64_t v5 = -1;
  }
  else if (*(unsigned char *)(a2 + 64))
  {
    uint64_t v5 = *(void *)(a2 + 32);
  }
  else
  {
    uint64_t v5 = 0;
  }
  size_t __len = 0;
  __src = 0;
  unsigned int v6 = *(_DWORD *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(void *)a1;
    uint64_t v7 = v6;
  }
  rsegvyrt87(v5, a1, v7, (uint64_t)&__src, (uint64_t)&__len + 4, (uint64_t)&__len);
  if (v8)
  {
    char v30 = 5;
    strcpy((char *)&v29, "CCode");
    v31[0] = v8;
    int v32 = 3;
    v19[0] = 0;
    v19[1] = 0;
    std::runtime_error v18 = v19;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v18, (uint64_t *)v19, (const void **)&v29, &v29);
    AMSCore::Unexpected<AMSCore::Error,AMSCore::FairPlayErrorCode,std::map<std::string,AMSCore::Any>>((uint64_t)&__dst, 0x291u, &v18);
    std::runtime_error::runtime_error((std::runtime_error *)a4, &__dst);
    *(_OWORD *)(a4 + 16) = v21;
    *(void *)a4 = &unk_1EDC827D8;
    uint64_t v9 = v23;
    *(void *)(a4 + 32) = v22;
    *(void *)(a4 + 40) = v9;
    uint64_t v10 = a4 + 40;
    uint64_t v11 = v24;
    *(void *)(a4 + 48) = v24;
    if (v11)
    {
      *(void *)(v9 + 16) = v10;
      uint64_t v22 = &v23;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      uint64_t v9 = 0;
    }
    else
    {
      *(void *)(a4 + 32) = v10;
    }
    *(_OWORD *)(a4 + 56) = v25;
    long long v25 = 0uLL;
    *(unsigned char *)(a4 + 72) = 0;
    __dst.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v22, (unsigned int *)v9);
    MEMORY[0x192FA3C30](&__dst);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v18, v19[0]);
    if (v32 != -1) {
      ((void (*)(char *, void *))off_1EDCA5BE8[v32])(&v28, v31);
    }
    int v32 = -1;
    if (v30 < 0) {
      operator delete((void *)v29);
    }
    return;
  }
  uint64_t v12 = __src;
  size_t v13 = HIDWORD(__len);
  if (HIDWORD(__len) >= 0x17)
  {
    uint64_t v15 = (HIDWORD(__len) & 0xFFFFFFF8) + 8;
    if ((HIDWORD(__len) | 7) != 0x17) {
      uint64_t v15 = HIDWORD(__len) | 7;
    }
    uint64_t v16 = v15 + 1;
    p_dst = (std::runtime_error_vtbl *)operator new(v15 + 1);
    __dst.__imp_.__imp_ = (const char *)v13;
    *(void *)&long long v21 = v16 | 0x8000000000000000;
    __dst.__vftable = p_dst;
    goto LABEL_23;
  }
  BYTE7(v21) = BYTE4(__len);
  p_dst = (std::runtime_error_vtbl *)&__dst;
  if (HIDWORD(__len)) {
LABEL_23:
  }
    memmove(p_dst, v12, v13);
  *((unsigned char *)&p_dst->~runtime_error + v13) = 0;
  int v17 = __len;
  *(std::runtime_error *)a4 = __dst;
  *(void *)(a4 + 16) = v21;
  *(_DWORD *)(a4 + 24) = v17;
  *(unsigned char *)(a4 + 72) = 1;
  if (__src) {
    jk24uiwqrg((uint64_t)__src);
  }
}

void sub_18DAE580C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AMSCore::BuiltInAnisetteProvider::getAnisetteHeaders(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v31 = 0;
  unsigned int v30 = 0;
  uint64_t v29 = 0;
  unsigned int v28 = 0;
  if (a2 == 2)
  {
    uint64_t v5 = -1;
  }
  else if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v5 = *(void *)(a1 + 32);
  }
  else
  {
    uint64_t v5 = 0;
  }
  qi864985u0(v5, (uint64_t)&v31, (uint64_t)&v30, (uint64_t)&v29, (uint64_t)&v28);
  if (v6)
  {
    char v34 = 5;
    strcpy((char *)&v33, "CCode");
    v35[0] = v6;
    int v36 = 3;
    v21[0] = 0;
    v21[1] = 0;
    char v20 = v21;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v20, (uint64_t *)v21, (const void **)&v33, &v33);
    AMSCore::Unexpected<AMSCore::Error,AMSCore::FairPlayErrorCode,std::map<std::string,AMSCore::Any>>((uint64_t)&v22, 0x290u, &v20);
    std::runtime_error::runtime_error((std::runtime_error *)a3, &v22);
    *(_OWORD *)(a3 + 16) = v23;
    *(void *)a3 = &unk_1EDC827D8;
    uint64_t v7 = v25;
    *(void *)(a3 + 32) = v24;
    *(void *)(a3 + 40) = v7;
    uint64_t v8 = a3 + 40;
    uint64_t v9 = v26;
    *(void *)(a3 + 48) = v26;
    if (v9)
    {
      *(void *)(v7 + 16) = v8;
      uint64_t v24 = (uint64_t)&v25;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v7 = 0;
    }
    else
    {
      *(void *)(a3 + 32) = v8;
    }
    *(_OWORD *)(a3 + 56) = v27;
    long long v27 = 0uLL;
    *(unsigned char *)(a3 + 72) = 0;
    v22.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v24, (unsigned int *)v7);
    MEMORY[0x192FA3C30](&v22);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v20, v21[0]);
    if (v36 != -1) {
      ((void (*)(char *, uint64_t *))off_1EDCA5BE8[v36])(&v32, v35);
    }
    int v36 = -1;
    if (v34 < 0) {
      operator delete((void *)v33);
    }
    return;
  }
  std::runtime_error v22 = (std::runtime_error)0;
  long long v23 = 0u;
  uint64_t v24 = 1065353216;
  if (v30
    && ((AMSCore::Base64::encode(v31, v30, &v33), a2 != 2) ? (uint64_t v10 = "X-Apple-MD-M") : (uint64_t v10 = "X-Apple-AMD-M"),
        std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<char const*&,std::string>(&v22, v10, (uint64_t)&v33), v34 < 0))
  {
    operator delete((void *)v33);
    uint64_t v11 = v28;
    if (!v28) {
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v11 = v28;
    if (!v28) {
      goto LABEL_26;
    }
  }
  AMSCore::Base64::encode(v29, v11, &v33);
  if (a2 == 2) {
    uint64_t v12 = "X-Apple-AMD";
  }
  else {
    uint64_t v12 = "X-Apple-MD";
  }
  std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<char const*&,std::string>(&v22, v12, (uint64_t)&v33);
  if (v34 < 0) {
    operator delete((void *)v33);
  }
LABEL_26:
  size_t v13 = v22.__vftable;
  char imp = v22.__imp_.__imp_;
  v22.__vftable = 0;
  v22.__imp_.__imp_ = 0;
  *(void *)a3 = v13;
  *(void *)(a3 + 8) = imp;
  uint64_t v15 = *((void *)&v23 + 1);
  uint64_t v16 = (char *)v23;
  *(void *)(a3 + 16) = v23;
  *(void *)(a3 + 24) = v15;
  *(_DWORD *)(a3 + 32) = v24;
  if (v15)
  {
    unint64_t v17 = *((void *)v16 + 1);
    if (((unint64_t)imp & (unint64_t)(imp - 1)) != 0)
    {
      if (v17 >= (unint64_t)imp) {
        v17 %= (unint64_t)imp;
      }
    }
    else
    {
      v17 &= (unint64_t)(imp - 1);
    }
    *((void *)&v13->~runtime_error + v17) = a3 + 16;
    long long v23 = 0uLL;
    *(unsigned char *)(a3 + 72) = 1;
    goto LABEL_40;
  }
  *(unsigned char *)(a3 + 72) = 1;
  if (v16)
  {
    do
    {
      std::runtime_error v18 = *(char **)v16;
      if (v16[63] < 0)
      {
        operator delete(*((void **)v16 + 5));
        if (v16[39] < 0) {
LABEL_36:
        }
          operator delete(*((void **)v16 + 2));
      }
      else if (v16[39] < 0)
      {
        goto LABEL_36;
      }
      operator delete(v16);
      uint64_t v16 = v18;
    }
    while (v18);
  }
LABEL_40:
  long long v19 = v22.__vftable;
  v22.__vftable = 0;
  if (v19) {
    operator delete(v19);
  }
  if (v31) {
    jk24uiwqrg(v31);
  }
  if (v29) {
    jk24uiwqrg(v29);
  }
}

void sub_18DAE5BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<char const*&,std::string>(void *a1, const char *a2, uint64_t a3)
{
  int v6 = (char *)operator new(0x40uLL);
  uint64_t v7 = v6 + 16;
  *(void *)int v6 = 0;
  *((void *)v6 + 1) = 0;
  size_t v8 = strlen(a2);
  if (v8 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:fe180100]();
  }
  size_t v9 = v8;
  if (v8 >= 0x17)
  {
    uint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v10 = v8 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t v7 = operator new(v10 + 1);
    *((void *)v6 + 3) = v9;
    *((void *)v6 + 4) = v11 | 0x8000000000000000;
    *((void *)v6 + 2) = v7;
    goto LABEL_8;
  }
  v6[39] = v8;
  if (v8) {
LABEL_8:
  }
    memcpy(v7, a2, v9);
  *((unsigned char *)v7 + v9) = 0;
  *(_OWORD *)(v6 + 40) = *(_OWORD *)a3;
  *((void *)v6 + 7) = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  int v12 = v6[39];
  if (v12 >= 0) {
    size_t v13 = v6 + 16;
  }
  else {
    size_t v13 = (char *)*((void *)v6 + 2);
  }
  if (v12 >= 0) {
    uint64_t v14 = v6[39];
  }
  else {
    uint64_t v14 = *((void *)v6 + 3);
  }
  uint64_t v15 = std::locale::classic();
  uint64_t v16 = std::locale::use_facet(v15, MEMORY[0x1E4FBA258]);
  if (v14)
  {
    unint64_t v17 = v16;
    uint64_t v18 = 0;
    do
    {
      v18 ^= 2
           * ((int (*)(const std::locale::facet *, void))v17->__vftable[1].__on_zero_shared)(v17, *v13++);
      --v14;
    }
    while (v14);
  }
  else
  {
    uint64_t v18 = 0;
  }
  *((void *)v6 + 1) = v18;
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(a1, (uint64_t)v6);
}

void sub_18DAE5DA8(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (*(char *)(v1 + 63) < 0) {
      operator delete(*(void **)(v1 + 40));
    }
    if (*(char *)(v1 + 39) < 0) {
      operator delete(*(void **)(v1 + 16));
    }
    operator delete((void *)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_18DAE5DE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:fe180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void AMSCore::BuiltInAnisetteProvider::finishProvisioning(uint64_t a1@<X8>)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uv5t6nhkui();
  if (v5)
  {
    char v19 = 5;
    strcpy((char *)&v18, "CCode");
    v20[0] = v5;
    int v21 = 3;
    v10[0] = 0;
    v10[1] = 0;
    size_t v9 = v10;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v9, (uint64_t *)v10, (const void **)&v18, &v18);
    AMSCore::Unexpected<AMSCore::Error,AMSCore::FairPlayErrorCode,std::map<std::string,AMSCore::Any>>((uint64_t)&v11, 0x28Eu, &v9);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v11);
    *(_OWORD *)(a1 + 16) = v12;
    *(void *)a1 = &unk_1EDC827D8;
    uint64_t v6 = v14;
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v6;
    uint64_t v7 = a1 + 40;
    uint64_t v8 = v15;
    *(void *)(a1 + 48) = v15;
    if (v8)
    {
      *(void *)(v6 + 16) = v7;
      size_t v13 = &v14;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v6 = 0;
    }
    else
    {
      *(void *)(a1 + 32) = v7;
    }
    *(_OWORD *)(a1 + 56) = v16;
    long long v16 = 0uLL;
    *(unsigned char *)(a1 + 72) = 0;
    v11.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v13, (unsigned int *)v6);
    MEMORY[0x192FA3C30](&v11);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v9, v10[0]);
    if (v21 != -1) {
      ((void (*)(char *, void *))off_1EDCA5BE8[v21])(&v17, v20);
    }
    int v21 = -1;
    if (v19 < 0) {
      operator delete((void *)v18);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 72) = 1;
  }
}

void sub_18DAE5FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AMSCore::BuiltInAnisetteProvider::eraseProvisioning(uint64_t a1@<X8>)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  p435tmhbla();
  if (v2)
  {
    char v16 = 5;
    strcpy((char *)&v15, "CCode");
    v17[0] = v2;
    int v18 = 3;
    v7[0] = 0;
    v7[1] = 0;
    uint64_t v6 = v7;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v6, (uint64_t *)v7, (const void **)&v15, &v15);
    AMSCore::Unexpected<AMSCore::Error,AMSCore::FairPlayErrorCode,std::map<std::string,AMSCore::Any>>((uint64_t)&v8, 0x28Du, &v6);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v8);
    *(_OWORD *)(a1 + 16) = v9;
    *(void *)a1 = &unk_1EDC827D8;
    uint64_t v3 = v11;
    *(void *)(a1 + 32) = v10;
    *(void *)(a1 + 40) = v3;
    uint64_t v4 = a1 + 40;
    uint64_t v5 = v12;
    *(void *)(a1 + 48) = v12;
    if (v5)
    {
      *(void *)(v3 + 16) = v4;
      uint64_t v10 = &v11;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v3 = 0;
    }
    else
    {
      *(void *)(a1 + 32) = v4;
    }
    *(_OWORD *)(a1 + 56) = v13;
    long long v13 = 0uLL;
    *(unsigned char *)(a1 + 72) = 0;
    v8.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v3);
    MEMORY[0x192FA3C30](&v8);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v6, v7[0]);
    if (v18 != -1) {
      ((void (*)(char *, void *))off_1EDCA5BE8[v18])(&v14, v17);
    }
    int v18 = -1;
    if (v16 < 0) {
      operator delete((void *)v15);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 72) = 1;
  }
}

void sub_18DAE61F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AMSCore::BuiltInAnisetteProvider::dispose()
{
}

void AMSCore::BuiltInAnisetteProvider::~BuiltInAnisetteProvider(AMSCore::BuiltInAnisetteProvider *this)
{
}

uint64_t AMSCore::BuiltInKeybagProvider::getSyncData@<X0>(AMSCore::BuiltInKeybagProvider *this@<X0>, const AMSCore::AccountIdentity *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (!v30)
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&>((uint64_t)&__dst, v29);
    std::runtime_error::runtime_error((std::runtime_error *)a3, &__dst);
    *(_OWORD *)(a3 + 16) = v24;
    *(void *)a3 = &unk_1EDC827D8;
    uint64_t v13 = v26;
    *(void *)(a3 + 32) = v25;
    *(void *)(a3 + 40) = v13;
    uint64_t v14 = a3 + 40;
    uint64_t v15 = v27;
    *(void *)(a3 + 48) = v27;
    if (v15)
    {
      *(void *)(v13 + 16) = v14;
      uint64_t v25 = &v26;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      uint64_t v13 = 0;
    }
    else
    {
      *(void *)(a3 + 32) = v14;
    }
    *(_OWORD *)(a3 + 56) = v28;
    long long v28 = 0uLL;
    *(unsigned char *)(a3 + 72) = 0;
    __dst.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v25, (unsigned int *)v13);
    uint64_t result = MEMORY[0x192FA3C30](&__dst);
    goto LABEL_32;
  }
  memset(__len, 0, sizeof(__len));
  Mt76Vq80ux(LODWORD(v29[0].__vftable), *((void *)a2 + 4), 0, 1, (uint64_t)&__len[1], (uint64_t)__len);
  uint64_t v6 = *(const void **)&__len[1];
  size_t v7 = __len[0];
  if (v5) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = *(void *)&__len[1] == 0;
  }
  if (v8 || __len[0] == 0)
  {
    char v33 = 5;
    strcpy((char *)&v32, "CCode");
    v34[0] = v5;
    int v35 = 3;
    v21[0] = 0;
    v21[1] = 0;
    char v20 = v21;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v20, (uint64_t *)v21, (const void **)&v32, &v32);
    AMSCore::Unexpected<AMSCore::Error,AMSCore::FairPlayErrorCode,std::map<std::string,AMSCore::Any>>((uint64_t)&__dst, 0x295u, &v20);
    std::runtime_error::runtime_error((std::runtime_error *)a3, &__dst);
    *(_OWORD *)(a3 + 16) = v24;
    *(void *)a3 = &unk_1EDC827D8;
    uint64_t v10 = v26;
    *(void *)(a3 + 32) = v25;
    *(void *)(a3 + 40) = v10;
    uint64_t v11 = a3 + 40;
    uint64_t v12 = v27;
    *(void *)(a3 + 48) = v27;
    if (v12)
    {
      *(void *)(v10 + 16) = v11;
      uint64_t v25 = &v26;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      uint64_t v10 = 0;
    }
    else
    {
      *(void *)(a3 + 32) = v11;
    }
    *(_OWORD *)(a3 + 56) = v28;
    long long v28 = 0uLL;
    *(unsigned char *)(a3 + 72) = 0;
    __dst.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v25, (unsigned int *)v10);
    MEMORY[0x192FA3C30](&__dst);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v20, v21[0]);
    if (v35 != -1) {
      ((void (*)(char *, void *))off_1EDCA5C38[v35])(&v31, v34);
    }
    int v35 = -1;
    if (v33 < 0) {
      operator delete((void *)v32);
    }
    uint64_t v6 = *(const void **)&__len[1];
    if (!*(void *)&__len[1]) {
      goto LABEL_29;
    }
  }
  else
  {
    if (__len[0] >= 0x17u)
    {
      uint64_t v17 = (__len[0] & 0xFFFFFFF8) + 8;
      if ((__len[0] | 7) != 0x17) {
        uint64_t v17 = __len[0] | 7;
      }
      uint64_t v18 = v17 + 1;
      p_dst = (std::runtime_error_vtbl *)operator new(v17 + 1);
      __dst.__imp_.__imp_ = (const char *)v7;
      *(void *)&long long v24 = v18 | 0x8000000000000000;
      __dst.__vftable = p_dst;
    }
    else
    {
      BYTE7(v24) = __len[0];
      p_dst = (std::runtime_error_vtbl *)&__dst;
    }
    memmove(p_dst, v6, v7);
    *((unsigned char *)&p_dst->~runtime_error + v7) = 0;
    *(std::runtime_error *)a3 = __dst;
    *(void *)(a3 + 16) = v24;
    *(unsigned char *)(a3 + 72) = 1;
  }
  jEHf8Xzsv8K((uint64_t)v6);
LABEL_29:
  if (!v30) {
    __break(1u);
  }
  uint64_t result = LODWORD(v29[0].__vftable);
  if (LODWORD(v29[0].__vftable)) {
    uint64_t result = VLxCLgDpiF((int)v29[0].__vftable);
  }
LABEL_32:
  if (!v30) {
    return ((uint64_t (*)(std::runtime_error *))v29[0].~runtime_error)(v29);
  }
  return result;
}

void sub_18DAE65DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AMSCore::anonymous namespace'::createContext(AMSCore::_anonymous_namespace_ *this, const FairPlayHWInfo_ *a2)
{
  char v31 = 0;
  unint64_t v32 = 0;
  uint64_t v33 = 0;
  std::string::append[abi:fe180100]<char const*,0>((unint64_t)&v31, "/private/var/mobile/Media/iTunes_Control/iTunes", "");
  int v30 = 0;
  if (SHIBYTE(v33) < 0)
  {
    unint64_t v4 = v32;
    if (v32 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:fe180100]();
    }
    int v5 = (char *)v31;
  }
  else
  {
    unint64_t v4 = HIBYTE(v33);
    int v5 = (char *)&v31;
  }
  uint64_t v6 = &v5[v4];
  if (v4 >= 0x17)
  {
    uint64_t v9 = (v4 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v9 = v4 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_p = (std::system_error_vtbl *)operator new(v9 + 1);
    __p.__imp_.__imp_ = (const char *)v4;
    *(void *)&__p.__ec_.__val_ = v10 | 0x8000000000000000;
    __p.__vftable = p_p;
  }
  else
  {
    *((unsigned char *)&__p.__ec_.__val_ + 7) = v4;
    p_p = (std::system_error_vtbl *)&__p;
    if (!v4)
    {
      BOOL v8 = &__p;
      goto LABEL_20;
    }
  }
  if (v4 < 0x20)
  {
    BOOL v8 = (std::system_error *)p_p;
  }
  else if ((unint64_t)((char *)p_p - v5) < 0x20)
  {
    BOOL v8 = (std::system_error *)p_p;
  }
  else
  {
    unint64_t v11 = v4 & 0xFFFFFFFFFFFFFFE0;
    BOOL v8 = (std::system_error *)((char *)p_p + (v4 & 0xFFFFFFFFFFFFFFE0));
    uint64_t v12 = (long long *)(v5 + 16);
    p_what = &p_p->what;
    unint64_t v14 = v4 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v15 = *v12;
      *((_OWORD *)p_what - 1) = *(v12 - 1);
      *(_OWORD *)p_what = v15;
      v12 += 2;
      p_what += 4;
      v14 -= 32;
    }
    while (v14);
    if (v4 == v11) {
      goto LABEL_20;
    }
    v5 += v11;
  }
  do
  {
    char v16 = *v5++;
    LOBYTE(v8->__vftable) = v16;
    BOOL v8 = (std::system_error *)((char *)v8 + 1);
  }
  while (v5 != v6);
LABEL_20:
  LOBYTE(v8->__vftable) = 0;
  if (*((char *)&__p.__ec_.__val_ + 7) >= 0) {
    uint64_t v17 = (std::system_error_vtbl *)&__p;
  }
  else {
    uint64_t v17 = __p.__vftable;
  }
  int v18 = XtCqEf5X(0, (uint64_t)a2, (uint64_t)v17, (uint64_t)&v30);
  if (*((char *)&__p.__ec_.__val_ + 7) < 0) {
    operator delete(__p.__vftable);
  }
  if (v18) {
    BOOL v19 = 1;
  }
  else {
    BOOL v19 = v30 == 0;
  }
  if (!v19)
  {
    *(_DWORD *)this = v30;
    *((unsigned char *)this + 72) = 1;
    if ((SHIBYTE(v33) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_37;
  }
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&__p);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Failed to initialize FairPlay context: status = ", 48);
  std::ostream::operator<<();
  std::stringbuf::str[abi:fe180100]((uint64_t)&__p.__imp_, (std::string *)&v24);
  __p.__vftable = (std::system_error_vtbl *)*MEMORY[0x1E4FBA418];
  *(std::system_error_vtbl **)((char *)&__p.__vftable + (unint64_t)__p.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
  __p.__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
  if (v40 < 0) {
    operator delete(v39);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FA3FD0](&v41);
  v42.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  *(void *)&v42.__val_ = 2;
  std::system_error::system_error(&__p, v42, (const std::string *)&v24);
  if (*((char *)&ec.__val_ + 7) < 0) {
    operator delete(v24.__vftable);
  }
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  __p.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  int v35 = &v36;
  long long v38 = 0uLL;
  std::runtime_error::runtime_error(&v24, &__p);
  std::error_code ec = __p.__ec_;
  char v20 = (unsigned int *)v36;
  v24.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  uint64_t v26 = v35;
  uint64_t v27 = v36;
  uint64_t v28 = v37;
  if (v37)
  {
    *(void *)(v36 + 16) = &v27;
    char v20 = 0;
    int v35 = &v36;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
  }
  else
  {
    uint64_t v26 = &v27;
  }
  long long v29 = v38;
  long long v38 = 0uLL;
  __p.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v35, v20);
  MEMORY[0x192FA3C30](&__p);
  std::runtime_error::runtime_error((std::runtime_error *)this, &v24);
  *((std::error_code *)this + 1) = ec;
  *(void *)this = &unk_1EDC827D8;
  uint64_t v21 = v27;
  *((void *)this + 4) = v26;
  *((void *)this + 5) = v21;
  uint64_t v22 = (char *)this + 40;
  uint64_t v23 = v28;
  *((void *)this + 6) = v28;
  if (v23)
  {
    *(void *)(v21 + 16) = v22;
    uint64_t v21 = 0;
    uint64_t v26 = &v27;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
  }
  else
  {
    *((void *)this + 4) = v22;
  }
  *(_OWORD *)((char *)this + 56) = v29;
  long long v29 = 0uLL;
  *((unsigned char *)this + 72) = 0;
  v24.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v26, (unsigned int *)v21);
  MEMORY[0x192FA3C30](&v24);
  if (SHIBYTE(v33) < 0) {
LABEL_37:
  }
    operator delete(v31);
}

void sub_18DAE6A80(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __clang_call_terminate(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMSCore::BuiltInKeybagProvider::import@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!v20)
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&>((uint64_t)&v13, v19);
    std::runtime_error::runtime_error((std::runtime_error *)a2, &v13);
    *(_OWORD *)(a2 + 16) = v14;
    *(void *)a2 = &unk_1EDC827D8;
    uint64_t v3 = v16;
    *(void *)(a2 + 32) = v15;
    *(void *)(a2 + 40) = v3;
    uint64_t v4 = a2 + 40;
    uint64_t v5 = v17;
    *(void *)(a2 + 48) = v17;
    if (v5)
    {
      *(void *)(v3 + 16) = v4;
      long long v15 = &v16;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v3 = 0;
    }
    else
    {
      *(void *)(a2 + 32) = v4;
    }
    *(_OWORD *)(a2 + 56) = v18;
    long long v18 = 0uLL;
    *(unsigned char *)(a2 + 72) = 0;
    v13.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v15, (unsigned int *)v3);
    uint64_t result = MEMORY[0x192FA3C30](&v13);
    if (v20) {
      return result;
    }
    return ((uint64_t (*)(std::runtime_error *))v19[0].~runtime_error)(v19);
  }
  lCUad();
  if (v6)
  {
    char v23 = 5;
    strcpy((char *)&v22, "CCode");
    v24[0] = v6;
    int v25 = 3;
    v12[0] = 0;
    v12[1] = 0;
    unint64_t v11 = v12;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v11, (uint64_t *)v12, (const void **)&v22, &v22);
    AMSCore::Unexpected<AMSCore::Error,AMSCore::FairPlayErrorCode,std::map<std::string,AMSCore::Any>>((uint64_t)&v13, 0x294u, &v11);
    std::runtime_error::runtime_error((std::runtime_error *)a2, &v13);
    *(_OWORD *)(a2 + 16) = v14;
    *(void *)a2 = &unk_1EDC827D8;
    uint64_t v7 = v16;
    *(void *)(a2 + 32) = v15;
    *(void *)(a2 + 40) = v7;
    uint64_t v8 = a2 + 40;
    uint64_t v9 = v17;
    *(void *)(a2 + 48) = v17;
    if (v9)
    {
      *(void *)(v7 + 16) = v8;
      long long v15 = &v16;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v7 = 0;
    }
    else
    {
      *(void *)(a2 + 32) = v8;
    }
    *(_OWORD *)(a2 + 56) = v18;
    long long v18 = 0uLL;
    *(unsigned char *)(a2 + 72) = 0;
    v13.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v15, (unsigned int *)v7);
    MEMORY[0x192FA3C30](&v13);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v11, v12[0]);
    if (v25 != -1) {
      ((void (*)(char *, void *))off_1EDCA5C38[v25])(&v21, v24);
    }
    int v25 = -1;
    if (v23 < 0) {
      operator delete((void *)v22);
    }
  }
  else
  {
    *(unsigned char *)(a2 + 72) = 1;
  }
  if (!v20) {
    __break(1u);
  }
  uint64_t result = LODWORD(v19[0].__vftable);
  if (LODWORD(v19[0].__vftable))
  {
    uint64_t result = VLxCLgDpiF((int)v19[0].__vftable);
    if (!v20) {
      return ((uint64_t (*)(std::runtime_error *))v19[0].~runtime_error)(v19);
    }
  }
  return result;
}

void sub_18DAE6DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AMSCore::BuiltInKeybagProvider::~BuiltInKeybagProvider(AMSCore::BuiltInKeybagProvider *this)
{
}

void AMSCore::AppleHardwareInfo::make(AMSCore::AppleHardwareInfo *this)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  zxcm2Qme0x(0, 0, (uint64_t)&v26);
  if (v1)
  {
    char v23 = 5;
    strcpy((char *)&v22, "CCode");
    v24[0] = v1;
    int v25 = 3;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    int v6 = &v7;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v6, (uint64_t *)&v7, (const void **)&v22, &v22);
    long long v14 = v6;
    long long v15 = v7;
    uint64_t v16 = v8;
    if (v8)
    {
      *((void *)v7 + 2) = &v15;
      int v6 = &v7;
      uint64_t v7 = 0;
      uint64_t v8 = 0;
    }
    else
    {
      long long v14 = &v15;
    }
    AMSCore::StringUtils::join<char [30]>("encountered a FairPlay error.", (std::string *)__what_arg);
    v29.__cat_ = (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance;
    *(void *)&v29.__val_ = 605;
    std::system_error::system_error(&v17, v29, (const std::string *)__what_arg);
    if ((__what_arg[23] & 0x80000000) != 0) {
      operator delete(*(void **)__what_arg);
    }
    v17.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
    long long v18 = v14;
    BOOL v19 = v15;
    char v20 = v16;
    if (v16)
    {
      *((void *)v15 + 2) = &v19;
      long long v14 = &v15;
      long long v15 = 0;
      uint64_t v16 = 0;
    }
    else
    {
      long long v18 = &v19;
    }
    long long v21 = 0uLL;
    std::runtime_error::runtime_error((std::runtime_error *)__what_arg, &v17);
    *(std::error_code *)&__what_arg[16] = v17.__ec_;
    int v2 = v19;
    *(void *)std::string __what_arg = &unk_1EDC827D8;
    uint64_t v10 = v18;
    unint64_t v11 = v19;
    uint64_t v12 = v20;
    if (v20)
    {
      *((void *)v19 + 2) = &v11;
      int v2 = 0;
      long long v18 = &v19;
      BOOL v19 = 0;
      char v20 = 0;
    }
    else
    {
      uint64_t v10 = &v11;
    }
    long long v13 = v21;
    long long v21 = 0uLL;
    v17.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v18, v2);
    MEMORY[0x192FA3C30](&v17);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v14, v15);
    uint64_t v3 = std::runtime_error::runtime_error((std::runtime_error *)&AMSCore::AppleHardwareInfo::get(void)::hardware, (const std::runtime_error *)__what_arg);
    v3[1] = *(std::runtime_error *)&__what_arg[16];
    v3->__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v4 = v11;
    v3[2].__vftable = (std::runtime_error_vtbl *)v10;
    v3[2].__imp_.__imp_ = (const char *)v4;
    uint64_t v5 = v12;
    v3[3].__vftable = v12;
    if (v5)
    {
      *((void *)v4 + 2) = &unk_1EB38BE78;
      uint64_t v4 = 0;
      uint64_t v10 = &v11;
      unint64_t v11 = 0;
      uint64_t v12 = 0;
    }
    else
    {
      qword_1EB38BE70 = (uint64_t)&unk_1EB38BE78;
    }
    xmmword_1EB38BE88 = v13;
    long long v13 = 0uLL;
    byte_1EB38BE98 = 0;
    *(void *)std::string __what_arg = &unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, v4);
    MEMORY[0x192FA3C30](__what_arg);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v6, v7);
    if (v25 != -1) {
      ((void (*)(std::system_error *, uint64_t *))off_1EDCA5C88[v25])(&v17, v24);
    }
    int v25 = -1;
    if (v23 < 0) {
      operator delete((void *)v22);
    }
  }
  else
  {
    AMSCore::AppleHardwareInfo::get(void)::hardware = v26;
    qword_1EB38BE60 = v27;
    byte_1EB38BE98 = 1;
  }
}

void sub_18DAE7158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AMSCore::CreditDisplayUpdateAction::perform(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7 = operator new(0x2F8uLL);
  void *v7 = AMSCore::CreditDisplayUpdateAction::perform;
  v7[1] = AMSCore::CreditDisplayUpdateAction::perform;
  v7[89] = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v7[90] = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v7[91] = a4[1];
  *a4 = 0;
  a4[1] = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *((unsigned char *)v7 + 24) = 0;
  *((unsigned char *)v7 + 488) = 0;
  v7[62] = 0;
  v7[66] = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,void>(&v8, (uint64_t)(v7 + 2));
}

void sub_18DAE77A4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a9);
  if (!*(unsigned char *)(v9 + 608)) {
    (**v11)(v11);
  }
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v10);
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t AMSCore::CreditDisplayUpdateAction::perform(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 736);
  if (!*(unsigned char *)(v1 + 88))
  {
    __break(1u);
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = (void (***)(void))(result + 536);
  char v4 = *(unsigned char *)(v1 + 80);
  if (!v4)
  {
    std::runtime_error::runtime_error((std::runtime_error *)(result + 536), (const std::runtime_error *)(v1 + 8));
    *(_OWORD *)(v2 + 552) = *(_OWORD *)(v1 + 24);
    *(void *)(v2 + 536) = &unk_1EDC827D8;
    uint64_t v5 = (void *)(v1 + 48);
    uint64_t v6 = *(void *)(v1 + 48);
    *(void *)(v2 + 568) = *(void *)(v1 + 40);
    uint64_t v7 = v2 + 576;
    *(void *)(v2 + 576) = v6;
    uint64_t v8 = *(void *)(v1 + 56);
    *(void *)(v2 + 584) = v8;
    if (v8)
    {
      *(void *)(v6 + 16) = v7;
      *(void *)(v1 + 40) = v5;
      void *v5 = 0;
      *(void *)(v1 + 56) = 0;
    }
    else
    {
      *(void *)(v2 + 568) = v7;
    }
    uint64_t v9 = *(void *)(v2 + 736);
    *(_OWORD *)(v2 + 592) = *(_OWORD *)(v9 + 64);
    *(void *)(v9 + 64) = 0;
    *(void *)(v9 + 72) = 0;
  }
  *(unsigned char *)(v2 + 608) = v4;
  uint64_t v10 = *(void *)(v2 + 744);
  if (v10 && !atomic_fetch_add((atomic_ullong *volatile)(v10 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    unint64_t v11 = *(std::__shared_weak_count **)(v2 + 744);
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(v2 + 672);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  long long v13 = *(std::__shared_weak_count **)(v2 + 704);
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  long long v14 = *(std::__shared_weak_count **)(v2 + 688);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (*(unsigned char *)(v2 + 608)) {
      goto LABEL_26;
    }
  }
  else if (*(unsigned char *)(v2 + 608))
  {
    goto LABEL_26;
  }
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v17);
  AMSCore::Logger::log<char [34],AMSCore::Error>(v17, (uint64_t)v3);
  long long v15 = v18;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (*(unsigned char *)(v2 + 608)) {
      goto LABEL_26;
    }
    goto LABEL_22;
  }
  if (!*(unsigned char *)(v2 + 608)) {
LABEL_22:
  }
    (**v3)(v3);
LABEL_26:
  LOBYTE(v17) = 0;
  char v19 = 0;
  char v20 = 0;
  char v21 = 0;
  char v22 = 0;
  char v23 = 0;
  char v24 = 0;
  char v25 = 0;
  char v26 = 0;
  char v27 = 0;
  char v28 = 0;
  char v29 = 0;
  __int16 v30 = 0;
  char v31 = 0;
  char v32 = 0;
  char v33 = 0;
  char v34 = 0;
  char v35 = 0;
  char v36 = 0;
  char v37 = 1;
  if (*(unsigned char *)(v2 + 488))
  {
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v2 + 24));
    *(unsigned char *)(v2 + 488) = 0;
  }
  AMSCore::HTTPResponseAction::HTTPResponseAction(v2 + 24, (uint64_t)&v17);
  *(unsigned char *)(v2 + 488) = 1;
  AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&v17);
  uint64_t v16 = *(std::__shared_weak_count **)(v2 + 656);
  if (v16)
  {
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(void *)(v2 + 536) = v2 + 16;
  *(void *)uint64_t v2 = 0;
  return AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend((uint64_t)v3);
}

void sub_18DAE7BD0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a9);
  if (!*(unsigned char *)(v9 + 608)) {
    (**v10)(v10);
  }
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v9 + 648);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::CreditDisplayUpdateAction::perform(char *__p)
{
  if (*(void *)__p)
  {
    uint64_t v2 = *((void *)__p + 93);
    if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 93);
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    char v4 = (std::__shared_weak_count *)*((void *)__p + 84);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)*((void *)__p + 88);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = (std::__shared_weak_count *)*((void *)__p + 86);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    uint64_t v7 = (std::__shared_weak_count *)*((void *)__p + 82);
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  uint64_t v8 = (char *)*((void *)__p + 66);
  if (v8 == __p + 504)
  {
    (*(void (**)(char *))(*((void *)__p + 63) + 32))(__p + 504);
    if (__p[488]) {
LABEL_21:
    }
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 24));
  }
  else
  {
    if (v8) {
      (*(void (**)(char *))(*(void *)v8 + 40))(v8);
    }
    if (__p[488]) {
      goto LABEL_21;
    }
  }
  uint64_t v9 = *((void *)__p + 91);
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v9 && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)__p + 91) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v10 = (std::__shared_weak_count *)*((void *)__p + 91);
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = *((void *)__p + 90);
  if (v11 && !atomic_fetch_add((atomic_ullong *volatile)(v11 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v12 = (std::__shared_weak_count *)*((void *)__p + 90);
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v13 = *((void *)__p + 89);
  if (v13 && !atomic_fetch_add((atomic_ullong *volatile)(v13 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    long long v14 = (std::__shared_weak_count *)*((void *)__p + 89);
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  operator delete(__p);
}

uint64_t AMSCore::Logger::log<char [34],AMSCore::Error>(uint64_t result, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= 4u)
  {
    uint64_t v3 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v8);
    uint64_t v4 = *(void *)(v8[0] - 24);
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)"Failed to update credit display: ", 33);
    AMSCore::operator<<(v8, a2);
    uint64_t v5 = v8[6];
    uint64_t v6 = (char *)v8 + *(void *)(v8[0] - 24);
    if ((v6[32] & 5) != 0)
    {
      uint64_t v7 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v6 + 5) + 32))(&rep);
      uint64_t v7 = v15;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v12 = 4;
    uint64_t v13 = v5;
    uint64_t v14 = v7;
    (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v3 + 16) + 16))(*(void *)(v3 + 16), "networking", 10, &rep);
    v8[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v8[1] = MEMORY[0x1E4FBA470] + 16;
    if (v9 < 0) {
      operator delete((void *)v8[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v10);
  }
  return result;
}

void sub_18DAE81F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::CreditDisplayUpdateAction::clone(AMSCore::CreditDisplayUpdateAction *this)
{
}

void sub_18DAE82D8(_Unwind_Exception *a1)
{
  MEMORY[0x192FA4080](v1, 0x1093C402D7449D9);
  _Unwind_Resume(a1);
}

void AMSCore::CreditDisplayUpdateAction::~CreditDisplayUpdateAction(void **this)
{
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x192FA4080);
}

{
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void AMSCore::FinanceDialogAction::getAction(uint64_t a1, void *a2, char a3, const void **a4, char a5, uint64_t a6)
{
  uint64_t v198 = *MEMORY[0x1E4F143B8];
  v152[0] = 0;
  v152[1] = 0;
  v151 = v152;
  if (a3) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = &v151;
  }
  int v9 = *((char *)a4 + 23);
  if (v9 >= 0) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = *a4;
  }
  if (v9 >= 0) {
    size_t v11 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v11 = (size_t)a4[1];
  }
  if (*(char *)(a6 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v150, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
  }
  else {
    std::string v150 = *(std::string *)a6;
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 160) = 0;
  out.__imp_.__imp_ = 0;
  out.__vftable = 0;
  uuid_generate_random((unsigned __int8 *)&out);
  char v12 = (char *)operator new(0x28uLL);
  *(void *)(a1 + 168) = v12;
  *(_OWORD *)(a1 + 176) = xmmword_18DDE9B00;
  *(_OWORD *)char v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  *(void *)(v12 + 31) = 0;
  uuid_unparse_lower((const unsigned __int8 *)&out, v12 + 1);
  char *v12 = 123;
  v12[37] = 125;
  *(unsigned char *)(a1 + 192) = a5;
  uint64_t v13 = (void *)(a1 + 200);
  if (v11 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:fe180100]();
  }
  if (v11 >= 0x17)
  {
    uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v14 = v11 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v13 = operator new(v14 + 1);
    *(void *)(a1 + 208) = v11;
    *(void *)(a1 + 216) = v15 | 0x8000000000000000;
    *(void *)(a1 + 200) = v13;
  }
  else
  {
    *(unsigned char *)(a1 + 223) = v11;
    if (!v11) {
      goto LABEL_21;
    }
  }
  memmove(v13, v10, v11);
LABEL_21:
  *((unsigned char *)v13 + v11) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  uint64_t v16 = (uint64_t *)(a1 + 232);
  *(void *)(a1 + 224) = a1 + 232;
  *(std::string *)(a1 + 248) = v150;
  memset(&v150, 0, sizeof(v150));
  __what_arg[23] = 9;
  strcpy(__what_arg, "buyParams");
  AMSCore::Any::string((uint64_t)&v148, (uint64_t)v8, (const void **)__what_arg);
  uint64_t v17 = (char *)operator new(0x20uLL);
  long long v18 = (void **)(a1 + 224);
  *(void *)std::system_error __p = v17;
  *(_OWORD *)&__p[8] = xmmword_18DDE9B70;
  strcpy(v17, "kActionUserInfoKeyBuyParams");
  uint64_t v19 = *(void *)(a1 + 232);
  char v20 = (uint64_t *)(a1 + 232);
  if (!v19) {
    goto LABEL_54;
  }
  uint64_t v21 = a1 + 232;
  do
  {
    while (1)
    {
      int v22 = *(char *)(v19 + 55);
      char v23 = v22 >= 0 ? (const void *)(v19 + 32) : *(const void **)(v19 + 32);
      unint64_t v24 = v22 >= 0 ? *(unsigned __int8 *)(v19 + 55) : *(void *)(v19 + 40);
      size_t v25 = v24 >= 0x1B ? 27 : v24;
      int v26 = memcmp(v23, v17, v25);
      if (v26) {
        break;
      }
      if (v24 >= 0x1B) {
        goto LABEL_37;
      }
LABEL_23:
      uint64_t v19 = *(void *)(v19 + 8);
      if (!v19) {
        goto LABEL_38;
      }
    }
    if (v26 < 0) {
      goto LABEL_23;
    }
LABEL_37:
    uint64_t v21 = v19;
    uint64_t v19 = *(void *)v19;
  }
  while (v19);
LABEL_38:
  char v20 = (uint64_t *)(a1 + 232);
  if ((uint64_t *)v21 != v16)
  {
    int v27 = *(char *)(v21 + 55);
    if (v27 >= 0) {
      char v28 = (const void *)(v21 + 32);
    }
    else {
      char v28 = *(const void **)(v21 + 32);
    }
    if (v27 >= 0) {
      unint64_t v29 = *(unsigned __int8 *)(v21 + 55);
    }
    else {
      unint64_t v29 = *(void *)(v21 + 40);
    }
    if (v29 >= 0x1B) {
      size_t v30 = 27;
    }
    else {
      size_t v30 = v29;
    }
    int v31 = memcmp(v17, v28, v30);
    if (v31)
    {
      if ((v31 & 0x80000000) == 0)
      {
LABEL_50:
        out.std::runtime_error = v148;
        *(void *)&out.__ec_.__val_ = v149;
        std::runtime_error v148 = (std::runtime_error)0;
        uint64_t v149 = 0;
        LODWORD(out.__ec_.__cat_) = 5;
        AMSCore::Any::operator=(v21 + 56, (uint64_t)&out);
        if (LODWORD(out.__ec_.__cat_) != -1) {
          ((void (*)(std::string *, std::system_error *))off_1EDCA5D28[LODWORD(out.__ec_.__cat_)])(&v153, &out);
        }
LABEL_55:
        if ((__p[23] & 0x80000000) == 0) {
          goto LABEL_56;
        }
LABEL_100:
        operator delete(*(void **)__p);
        if (SHIBYTE(v149) < 0) {
          goto LABEL_101;
        }
LABEL_57:
        if ((__what_arg[23] & 0x80000000) == 0) {
          goto LABEL_58;
        }
LABEL_102:
        operator delete(*(void **)__what_arg);
        goto LABEL_58;
      }
    }
    else if (v29 <= 0x1B)
    {
      goto LABEL_50;
    }
    char v20 = (uint64_t *)v21;
  }
LABEL_54:
  char v32 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__find_equal<std::string>((uint64_t **)(a1 + 224), v20, (uint64_t **)&out, (uint64_t **)&v153, (const void **)__p);
  if (*v32) {
    goto LABEL_55;
  }
  uint64_t v53 = operator new(0x58uLL);
  std::runtime_error v53[2] = *(_OWORD *)__p;
  *((void *)v53 + 6) = *(void *)&__p[16];
  memset(__p, 0, 24);
  *(std::runtime_error *)((char *)v53 + 56) = v148;
  *((void *)v53 + 9) = v149;
  std::runtime_error v148 = (std::runtime_error)0;
  uint64_t v149 = 0;
  *((_DWORD *)v53 + 20) = 5;
  char v54 = out.__vftable;
  *(void *)uint64_t v53 = 0;
  *((void *)v53 + 1) = 0;
  *((void *)v53 + 2) = v54;
  *char v32 = (uint64_t)v53;
  uint64_t v55 = (void *)**v18;
  if (v55)
  {
    *long long v18 = v55;
    uint64_t v53 = (_OWORD *)*v32;
  }
  std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 232), (uint64_t *)v53);
  ++*(void *)(a1 + 240);
  if ((__p[23] & 0x80000000) != 0) {
    goto LABEL_100;
  }
LABEL_56:
  if ((SHIBYTE(v149) & 0x80000000) == 0) {
    goto LABEL_57;
  }
LABEL_101:
  operator delete(v148.__vftable);
  if ((__what_arg[23] & 0x80000000) != 0) {
    goto LABEL_102;
  }
LABEL_58:
  __p[0] = AMSCore::Any::BOOLean((uint64_t)v8, "retry", 5uLL);
  out.__vftable = (std::system_error_vtbl *)operator new(0x20uLL);
  *(_OWORD *)&out.__imp_.__imp_ = xmmword_18DDE9BA0;
  strcpy((char *)out.__vftable, "kActionUserInfoKeyShouldRetry");
  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<BOOL &>((void **)(a1 + 224), (const void **)&out.__vftable, __p);
  if (*((char *)&out.__ec_.__val_ + 7) < 0) {
    operator delete(out.__vftable);
  }
  *((unsigned char *)&out.__ec_.__val_ + 7) = 9;
  strcpy((char *)&out, "subtarget");
  AMSCore::Any::string((uint64_t)__s, (uint64_t)v8, (const void **)&out.__vftable);
  char v33 = __s[1];
  char v34 = (std::string::value_type *)HIBYTE(v147);
  int v35 = SHIBYTE(v147);
  if (v147 < 0) {
    char v34 = __s[1];
  }
  uint64_t v140 = (uint64_t)v8;
  if (v34)
  {
    char v36 = (char *)operator new(0x20uLL);
    *(void *)std::system_error __p = v36;
    *(_OWORD *)&__p[8] = xmmword_18DDE9B70;
    strcpy(v36, "kActionUserInfoKeySubtarget");
    uint64_t v37 = *v16;
    long long v38 = (uint64_t *)(a1 + 232);
    if (!*v16) {
      goto LABEL_105;
    }
    uint64_t v39 = a1 + 232;
    while (1)
    {
      int v40 = *(char *)(v37 + 55);
      if (v40 >= 0) {
        uint64_t v41 = (const void *)(v37 + 32);
      }
      else {
        uint64_t v41 = *(const void **)(v37 + 32);
      }
      if (v40 >= 0) {
        unint64_t v42 = *(unsigned __int8 *)(v37 + 55);
      }
      else {
        unint64_t v42 = *(void *)(v37 + 40);
      }
      if (v42 >= 0x1B) {
        size_t v43 = 27;
      }
      else {
        size_t v43 = v42;
      }
      int v44 = memcmp(v41, v36, v43);
      if (v44)
      {
        if (v44 < 0) {
          goto LABEL_65;
        }
      }
      else if (v42 < 0x1B)
      {
LABEL_65:
        uint64_t v37 = *(void *)(v37 + 8);
        if (!v37) {
          goto LABEL_80;
        }
        continue;
      }
      uint64_t v39 = v37;
      uint64_t v37 = *(void *)v37;
      if (!v37)
      {
LABEL_80:
        long long v38 = (uint64_t *)(a1 + 232);
        if ((uint64_t *)v39 != v16)
        {
          int v45 = *(char *)(v39 + 55);
          if (v45 >= 0) {
            uint64_t v46 = (const void *)(v39 + 32);
          }
          else {
            uint64_t v46 = *(const void **)(v39 + 32);
          }
          if (v45 >= 0) {
            unint64_t v47 = *(unsigned __int8 *)(v39 + 55);
          }
          else {
            unint64_t v47 = *(void *)(v39 + 40);
          }
          if (v47 >= 0x1B) {
            size_t v48 = 27;
          }
          else {
            size_t v48 = v47;
          }
          int v49 = memcmp(v36, v46, v48);
          if (v49)
          {
            if ((v49 & 0x80000000) == 0)
            {
LABEL_92:
              if (v35 < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&out, __s[0], (std::string::size_type)v33);
              }
              else
              {
                out.std::runtime_error = *(std::runtime_error *)__s;
                *(void *)&out.__ec_.__val_ = v147;
              }
              LODWORD(out.__ec_.__cat_) = 5;
              AMSCore::Any::operator=(v39 + 56, (uint64_t)&out);
              uint64_t v8 = (void *)v140;
              if (LODWORD(out.__ec_.__cat_) != -1) {
                ((void (*)(unsigned char *, std::system_error *))off_1EDCA5D28[LODWORD(out.__ec_.__cat_)])(__what_arg, &out);
              }
              goto LABEL_113;
            }
          }
          else if (v47 <= 0x1B)
          {
            goto LABEL_92;
          }
          long long v38 = (uint64_t *)v39;
        }
LABEL_105:
        uint64_t v56 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__find_equal<std::string>((uint64_t **)(a1 + 224), v38, (uint64_t **)&out, (uint64_t **)__what_arg, (const void **)__p);
        if (!*v56)
        {
          int v57 = (char *)operator new(0x58uLL);
          *((_OWORD *)v57 + 2) = *(_OWORD *)__p;
          *((void *)v57 + 6) = *(void *)&__p[16];
          memset(__p, 0, 24);
          uint64_t v58 = (std::string *)(v57 + 56);
          if (SHIBYTE(v147) < 0)
          {
            std::string::__init_copy_ctor_external(v58, __s[0], (std::string::size_type)__s[1]);
          }
          else
          {
            *(_OWORD *)&v58->__r_.__value_.__l.__data_ = *(_OWORD *)__s;
            *((void *)v57 + 9) = v147;
          }
          *((_DWORD *)v57 + 20) = 5;
          uint64_t v59 = out.__vftable;
          *(void *)int v57 = 0;
          *((void *)v57 + 1) = 0;
          *((void *)v57 + 2) = v59;
          uint64_t *v56 = (uint64_t)v57;
          long long v60 = (void *)**v18;
          if (v60)
          {
            *long long v18 = v60;
            int v57 = (char *)*v56;
          }
          std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 232), (uint64_t *)v57);
          ++*(void *)(a1 + 240);
        }
        uint64_t v8 = (void *)v140;
LABEL_113:
        if ((__p[23] & 0x80000000) != 0)
        {
          long long v52 = *(std::system_error_vtbl **)__p;
          goto LABEL_115;
        }
        goto LABEL_116;
      }
    }
  }
  BOOL v50 = (std::system_error_vtbl *)operator new(0x20uLL);
  out.__vftable = v50;
  *(_OWORD *)&out.__imp_.__imp_ = xmmword_18DDE9B70;
  strcpy((char *)v50, "kActionUserInfoKeySubtarget");
  uint64_t v51 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(a1 + 224, (const void **)&out.__vftable);
  if (v16 != v51) {
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((void *)(a1 + 224), (uint64_t)v51);
  }
  long long v52 = v50;
LABEL_115:
  operator delete(v52);
LABEL_116:
  __p[23] = 4;
  strcpy(__p, "kind");
  AMSCore::Any::string((uint64_t)&out, (uint64_t)v8, (const void **)__p);
  unsigned int v61 = 0;
  char imp = (const char *)*((unsigned __int8 *)&out.__ec_.__val_ + 7);
  if (*((char *)&out.__ec_.__val_ + 7) < 0) {
    char imp = out.__imp_.__imp_;
  }
  switch((unint64_t)imp)
  {
    case 3uLL:
      p_std::system_error out = out.__vftable;
      if (*((char *)&out.__ec_.__val_ + 7) >= 0) {
        p_std::system_error out = (std::system_error_vtbl *)&out;
      }
      int v64 = LOWORD(p_out->~system_error);
      int v65 = BYTE2(p_out->~system_error);
      unsigned int v61 = v64 == 30018 && v65 == 121;
      if (*((char *)&out.__ec_.__val_ + 7) < 0) {
        goto LABEL_155;
      }
      goto LABEL_156;
    case 4uLL:
      uint64_t v72 = (unsigned int *)out.__vftable;
      if (*((char *)&out.__ec_.__val_ + 7) >= 0) {
        uint64_t v72 = (unsigned int *)&out;
      }
      unsigned int v73 = bswap32(*v72);
      BOOL v74 = v73 >= 0x476F746F;
      int v75 = v73 > 0x476F746F;
      int v76 = !v74;
      if (v75 == v76) {
        unsigned int v61 = 5;
      }
      else {
        unsigned int v61 = 0;
      }
      if (*((char *)&out.__ec_.__val_ + 7) < 0) {
        goto LABEL_155;
      }
      goto LABEL_156;
    case 7uLL:
      uint64_t v67 = out.__vftable;
      if (*((char *)&out.__ec_.__val_ + 7) >= 0) {
        uint64_t v67 = (std::system_error_vtbl *)&out;
      }
      int v68 = (int)v67->~system_error;
      int v69 = *(_DWORD *)((char *)&v67->~system_error + 3);
      BOOL v71 = v68 == 1852141647 && v69 == 1280464238;
      unsigned int v61 = 2 * v71;
      if (*((char *)&out.__ec_.__val_ + 7) < 0) {
        goto LABEL_155;
      }
      goto LABEL_156;
    case 0xBuLL:
      long long v77 = out.__vftable;
      if (*((char *)&out.__ec_.__val_ + 7) >= 0) {
        long long v77 = (std::system_error_vtbl *)&out;
      }
      if ((uint64_t)v77->~system_error ^ 0x616E69466F746F47 | *(uint64_t *)((char *)&v77->~system_error + 3) ^ 0x65636E616E69466FLL) {
        unsigned int v61 = 0;
      }
      else {
        unsigned int v61 = 3;
      }
      goto LABEL_154;
    case 0xDuLL:
      uint64_t v90 = out.__vftable;
      if (*((char *)&out.__ec_.__val_ + 7) >= 0) {
        uint64_t v90 = (std::system_error_vtbl *)&out;
      }
      long long v91 = v90->~system_error;
      uint64_t v92 = *(uint64_t *)((char *)&v90->~system_error + 5);
      BOOL v94 = v91 == (void (__cdecl *)(std::system_error *__hidden))0x616E69466F746F47 && v92 == 0x325665636E616E69;
      unsigned int v61 = 4 * v94;
      if (*((char *)&out.__ec_.__val_ + 7) < 0) {
        goto LABEL_155;
      }
      goto LABEL_156;
    default:
LABEL_154:
      if (*((char *)&out.__ec_.__val_ + 7) < 0) {
LABEL_155:
      }
        operator delete(out.__vftable);
LABEL_156:
      strcpy(__p, "kActionUserInfoKeyType");
      __p[23] = 22;
      uint64_t v78 = *v16;
      if (!*v16) {
        goto LABEL_199;
      }
      uint64_t v79 = a1 + 232;
      break;
  }
  while (2)
  {
    while (2)
    {
      int v80 = *(char *)(v78 + 55);
      if (v80 >= 0) {
        long long v81 = (const void *)(v78 + 32);
      }
      else {
        long long v81 = *(const void **)(v78 + 32);
      }
      if (v80 >= 0) {
        unint64_t v82 = *(unsigned __int8 *)(v78 + 55);
      }
      else {
        unint64_t v82 = *(void *)(v78 + 40);
      }
      if (v82 >= 0x16) {
        size_t v83 = 22;
      }
      else {
        size_t v83 = v82;
      }
      int v84 = memcmp(v81, __p, v83);
      if (v84)
      {
        if ((v84 & 0x80000000) == 0) {
          break;
        }
        goto LABEL_158;
      }
      if (v82 < 0x16)
      {
LABEL_158:
        uint64_t v78 = *(void *)(v78 + 8);
        if (!v78) {
          goto LABEL_173;
        }
        continue;
      }
      break;
    }
    uint64_t v79 = v78;
    uint64_t v78 = *(void *)v78;
    if (v78) {
      continue;
    }
    break;
  }
LABEL_173:
  if ((uint64_t *)v79 != v16)
  {
    int v85 = *(char *)(v79 + 55);
    if (v85 >= 0) {
      uint64_t v86 = (const void *)(v79 + 32);
    }
    else {
      uint64_t v86 = *(const void **)(v79 + 32);
    }
    if (v85 >= 0) {
      unint64_t v87 = *(unsigned __int8 *)(v79 + 55);
    }
    else {
      unint64_t v87 = *(void *)(v79 + 40);
    }
    if (v87 >= 0x16) {
      size_t v88 = 22;
    }
    else {
      size_t v88 = v87;
    }
    int v89 = memcmp(__p, v86, v88);
    if (v89)
    {
      if ((v89 & 0x80000000) == 0)
      {
LABEL_185:
        out.__vftable = (std::system_error_vtbl *)v61;
        LODWORD(out.__ec_.__cat_) = 4;
        AMSCore::Any::operator=(v79 + 56, (uint64_t)&out);
        if (LODWORD(out.__ec_.__cat_) != -1) {
          ((void (*)(unsigned char *, std::system_error *))off_1EDCA5D28[LODWORD(out.__ec_.__cat_)])(__what_arg, &out);
        }
LABEL_200:
        if ((__p[23] & 0x80000000) != 0) {
          goto LABEL_201;
        }
        goto LABEL_202;
      }
    }
    else if (v87 <= 0x16)
    {
      goto LABEL_185;
    }
    uint64_t v16 = (uint64_t *)v79;
  }
LABEL_199:
  std::string v95 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__find_equal<std::string>((uint64_t **)(a1 + 224), v16, (uint64_t **)&out, (uint64_t **)__what_arg, (const void **)__p);
  if (*v95) {
    goto LABEL_200;
  }
  uint64_t v98 = operator new(0x58uLL);
  v98[2] = *(_OWORD *)__p;
  uint64_t v99 = *(void *)&__p[16];
  memset(__p, 0, 24);
  *((void *)v98 + 6) = v99;
  *((void *)v98 + 7) = v61;
  *((_DWORD *)v98 + 20) = 4;
  char v100 = out.__vftable;
  *(void *)uint64_t v98 = 0;
  *((void *)v98 + 1) = 0;
  *((void *)v98 + 2) = v100;
  *std::string v95 = (uint64_t)v98;
  uint64_t v101 = (void *)**v18;
  if (v101)
  {
    *long long v18 = v101;
    uint64_t v98 = (_OWORD *)*v95;
  }
  std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 232), (uint64_t *)v98);
  ++*(void *)(a1 + 240);
  if ((__p[23] & 0x80000000) != 0) {
LABEL_201:
  }
    operator delete(*(void **)__p);
LABEL_202:
  if (v61 - 2 > 3)
  {
LABEL_309:
    if (SHIBYTE(v147) < 0) {
      goto LABEL_310;
    }
    goto LABEL_311;
  }
  *((unsigned char *)&out.__ec_.__val_ + 7) = 3;
  strcpy((char *)&out, "url");
  AMSCore::Any::string((uint64_t)&v153, v140, (const void **)&out.__vftable);
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = v153.__r_.__value_.__l.__size_;
    if (!v153.__r_.__value_.__l.__size_) {
      goto LABEL_223;
    }
    uint64_t v97 = (std::string *)v153.__r_.__value_.__r.__words[0];
LABEL_212:
    AMSCore::URL::parse((uint64_t)v97, size, (uint64_t)__what_arg);
    if ((SHIBYTE(v153.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_213;
    }
LABEL_232:
    operator delete(v153.__r_.__value_.__l.__data_);
    if (!v145) {
      goto LABEL_233;
    }
LABEL_214:
    unint64_t v102 = HIBYTE(v147);
    uint64_t v103 = __s;
    if (v147 < 0)
    {
      uint64_t v103 = (std::string::value_type **)__s[0];
      unint64_t v102 = (unint64_t)__s[1];
    }
    if (v102 < 7) {
      goto LABEL_222;
    }
    if (*(_DWORD *)v103 == 1868784481 && *(_DWORD *)((char *)v103 + 3) == 1953396079)
    {
      unsigned int v105 = 1;
    }
    else
    {
      if (v102 < 0xA)
      {
LABEL_222:
        unsigned int v105 = 0;
        goto LABEL_248;
      }
      unint64_t v114 = 0x6261636B67726F75;
      unint64_t v115 = bswap64((unint64_t)*v103);
      if (v115 == 0x6261636B67726F75
        && (v115 = bswap32(*((unsigned __int16 *)v103 + 4)) >> 16, unint64_t v114 = 28260, v115 == 28260))
      {
        int v116 = 0;
      }
      else if (v115 < v114)
      {
        int v116 = -1;
      }
      else
      {
        int v116 = 1;
      }
      unsigned int v105 = 2 * (v116 == 0);
    }
LABEL_248:
    if (v61 - 3 < 3)
    {
      if (v105 > 1) {
        goto LABEL_307;
      }
      AMSCore::URL::URL(&v153, (const AMSCore::URL *)__what_arg);
      __p[0] = 0;
      __p[24] = 0;
      if (v154)
      {
        *(std::string *)std::system_error __p = v153;
        memset(&v153, 0, sizeof(v153));
        __p[24] = 1;
      }
      LOBYTE(v171) = 0;
      v173[0] = 0;
      if (v157)
      {
        long long v171 = v155;
        uint64_t v172 = v156;
        uint64_t v156 = 0;
        long long v155 = 0uLL;
        v173[0] = 1;
      }
      v173[8] = 0;
      char v175 = 0;
      if (v160)
      {
        *(_OWORD *)&v173[8] = v158;
        uint64_t v174 = v159;
        uint64_t v159 = 0;
        long long v158 = 0uLL;
        char v175 = 1;
      }
      int v176 = v161;
      uint64_t v177 = (uint64_t)&v177;
      v178 = &v177;
      uint64_t v179 = 0;
      uint64_t v117 = v164;
      if (v164)
      {
        uint64_t v119 = v162;
        char v118 = v163;
        uint64_t v120 = *v163;
        *(void *)(v120 + 8) = *(void *)(v162 + 8);
        **(void **)(v119 + 8) = v120;
        uint64_t v121 = v177;
        *(void *)(v177 + 8) = v118;
        void *v118 = v121;
        uint64_t v177 = v119;
        *(void *)(v119 + 8) = &v177;
        uint64_t v179 = v117;
        uint64_t v164 = 0;
      }
      long long v180 = v165;
      uint64_t v181 = v166;
      uint64_t v166 = 0;
      long long v165 = 0uLL;
      char v182 = 1;
      AMSCore::URL::~URL((AMSCore::URL *)&v153);
      LOBYTE(out.__vftable) = 0;
      LOBYTE(out.__ec_.__cat_) = 0;
      if (__p[24])
      {
        out.std::runtime_error = *(std::runtime_error *)__p;
        *(void *)&out.__ec_.__val_ = *(void *)&__p[16];
        memset(__p, 0, 24);
        LOBYTE(out.__ec_.__cat_) = 1;
      }
      LOBYTE(v184) = 0;
      v186[0] = 0;
      if (v173[0])
      {
        long long v184 = v171;
        uint64_t v185 = v172;
        uint64_t v172 = 0;
        long long v171 = 0uLL;
        v186[0] = 1;
      }
      v186[8] = 0;
      char v188 = 0;
      if (v175)
      {
        *(_OWORD *)&v186[8] = *(_OWORD *)&v173[8];
        uint64_t v187 = v174;
        *(void *)&v173[16] = 0;
        uint64_t v174 = 0;
        *(void *)&v173[8] = 0;
        char v188 = 1;
      }
      int v190 = v176;
      uint64_t v191 = (uint64_t)&v191;
      v192 = &v191;
      uint64_t v193 = 0;
      uint64_t v122 = v179;
      if (v179)
      {
        int v123 = v178;
        uint64_t v124 = v177;
        uint64_t v125 = *v178;
        *(void *)(v125 + 8) = *(void *)(v177 + 8);
        **(void **)(v124 + 8) = v125;
        uint64_t v126 = v191;
        *(void *)(v191 + 8) = v123;
        *int v123 = v126;
        uint64_t v191 = v124;
        *(void *)(v124 + 8) = &v191;
        uint64_t v193 = v122;
        uint64_t v179 = 0;
      }
      long long v194 = v180;
      uint64_t v195 = v181;
      uint64_t v181 = 0;
      long long v180 = 0uLL;
      char v196 = v182;
      char v197 = 1;
      if (*(unsigned char *)(a1 + 160))
      {
        AMSCore::URL::operator=(a1, (long long *)&out);
        *(unsigned char *)(a1 + 152) = v196;
        if (!v197)
        {
LABEL_269:
          BOOL v128 = v61 - 3 < 2 || v105 == 1;
          BOOL v169 = v128;
          v167 = operator new(0x20uLL);
          long long v168 = xmmword_18DDE9BB0;
          strcpy((char *)v167, "kActionUserInfoKeyCommerceUIURL");
          std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<BOOL &>((void **)(a1 + 224), (const void **)&v167, &v169);
          if (SHIBYTE(v168) < 0) {
            operator delete(v167);
          }
          goto LABEL_297;
        }
      }
      else
      {
        std::construct_at[abi:fe180100]<AMSCore::DialogAction::DeepLink,AMSCore::DialogAction::DeepLink,AMSCore::DialogAction::DeepLink*>(a1, (long long *)&out);
        *(unsigned char *)(a1 + 160) = 1;
        if (!v197) {
          goto LABEL_269;
        }
      }
      AMSCore::URL::~URL((AMSCore::URL *)&out);
      goto LABEL_269;
    }
    if (v61 != 2) {
      goto LABEL_307;
    }
    AMSCore::URL::URL(&v153, (const AMSCore::URL *)__what_arg);
    __p[0] = 0;
    __p[24] = 0;
    if (v154)
    {
      *(std::string *)std::system_error __p = v153;
      memset(&v153, 0, sizeof(v153));
      __p[24] = 1;
    }
    LOBYTE(v171) = 0;
    v173[0] = 0;
    if (v157)
    {
      long long v171 = v155;
      uint64_t v172 = v156;
      uint64_t v156 = 0;
      long long v155 = 0uLL;
      v173[0] = 1;
    }
    v173[8] = 0;
    char v175 = 0;
    if (v160)
    {
      *(_OWORD *)&v173[8] = v158;
      uint64_t v174 = v159;
      uint64_t v159 = 0;
      long long v158 = 0uLL;
      char v175 = 1;
    }
    int v176 = v161;
    uint64_t v177 = (uint64_t)&v177;
    v178 = &v177;
    uint64_t v179 = 0;
    uint64_t v129 = v164;
    if (v164)
    {
      uint64_t v131 = v162;
      long long v130 = v163;
      uint64_t v132 = *v163;
      *(void *)(v132 + 8) = *(void *)(v162 + 8);
      **(void **)(v131 + 8) = v132;
      uint64_t v133 = v177;
      *(void *)(v177 + 8) = v130;
      *long long v130 = v133;
      uint64_t v177 = v131;
      *(void *)(v131 + 8) = &v177;
      uint64_t v179 = v129;
      uint64_t v164 = 0;
    }
    long long v180 = v165;
    uint64_t v181 = v166;
    uint64_t v166 = 0;
    long long v165 = 0uLL;
    char v182 = 0;
    AMSCore::URL::~URL((AMSCore::URL *)&v153);
    LOBYTE(out.__vftable) = 0;
    LOBYTE(out.__ec_.__cat_) = 0;
    if (__p[24])
    {
      out.std::runtime_error = *(std::runtime_error *)__p;
      *(void *)&out.__ec_.__val_ = *(void *)&__p[16];
      memset(__p, 0, 24);
      LOBYTE(out.__ec_.__cat_) = 1;
    }
    LOBYTE(v184) = 0;
    v186[0] = 0;
    if (v173[0])
    {
      long long v184 = v171;
      uint64_t v185 = v172;
      uint64_t v172 = 0;
      long long v171 = 0uLL;
      v186[0] = 1;
    }
    v186[8] = 0;
    char v188 = 0;
    if (v175)
    {
      *(_OWORD *)&v186[8] = *(_OWORD *)&v173[8];
      uint64_t v187 = v174;
      *(void *)&v173[16] = 0;
      uint64_t v174 = 0;
      *(void *)&v173[8] = 0;
      char v188 = 1;
    }
    int v190 = v176;
    uint64_t v191 = (uint64_t)&v191;
    v192 = &v191;
    uint64_t v193 = 0;
    uint64_t v134 = v179;
    if (v179)
    {
      v135 = v178;
      uint64_t v136 = v177;
      uint64_t v137 = *v178;
      *(void *)(v137 + 8) = *(void *)(v177 + 8);
      **(void **)(v136 + 8) = v137;
      uint64_t v138 = v191;
      *(void *)(v191 + 8) = v135;
      uint64_t *v135 = v138;
      uint64_t v191 = v136;
      *(void *)(v136 + 8) = &v191;
      uint64_t v193 = v134;
      uint64_t v179 = 0;
    }
    long long v194 = v180;
    uint64_t v195 = v181;
    uint64_t v181 = 0;
    long long v180 = 0uLL;
    char v196 = v182;
    char v197 = 1;
    if (*(unsigned char *)(a1 + 160))
    {
      AMSCore::URL::operator=(a1, (long long *)&out);
      *(unsigned char *)(a1 + 152) = v196;
      if (!v197)
      {
LABEL_297:
        AMSCore::URL::~URL((AMSCore::URL *)__p);
        goto LABEL_307;
      }
    }
    else
    {
      std::construct_at[abi:fe180100]<AMSCore::DialogAction::DeepLink,AMSCore::DialogAction::DeepLink,AMSCore::DialogAction::DeepLink*>(a1, (long long *)&out);
      *(unsigned char *)(a1 + 160) = 1;
      if (!v197) {
        goto LABEL_297;
      }
    }
    AMSCore::URL::~URL((AMSCore::URL *)&out);
    goto LABEL_297;
  }
  std::string::size_type size = HIBYTE(v153.__r_.__value_.__r.__words[2]);
  if (*((unsigned char *)&v153.__r_.__value_.__s + 23))
  {
    uint64_t v97 = &v153;
    goto LABEL_212;
  }
LABEL_223:
  AMSCore::StringUtils::join<char [31]>("Action does not include a URL.", (std::string *)__what_arg);
  v199.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  *(void *)&v199.__val_ = 3;
  std::system_error::system_error(&out, v199, (const std::string *)__what_arg);
  if ((__what_arg[23] & 0x80000000) != 0) {
    operator delete(*(void **)__what_arg);
  }
  uint64_t v185 = 0;
  out.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  long long v184 = (unint64_t)&v184 + 8;
  *(void *)&v186[8] = 0;
  *(void *)v186 = 0;
  std::runtime_error::runtime_error((std::runtime_error *)__p, &out);
  *(std::error_code *)&__p[16] = out.__ec_;
  v106 = (unsigned int *)*((void *)&v184 + 1);
  *(void *)std::system_error __p = &unk_1EDC827D8;
  long long v171 = v184;
  uint64_t v172 = v185;
  if (v185)
  {
    *(void *)(*((void *)&v184 + 1) + 16) = (char *)&v171 + 8;
    v106 = 0;
    *(void *)&long long v184 = (char *)&v184 + 8;
    *((void *)&v184 + 1) = 0;
    uint64_t v185 = 0;
  }
  else
  {
    *(void *)&long long v171 = (char *)&v171 + 8;
  }
  *(_OWORD *)v173 = *(_OWORD *)v186;
  *(void *)v186 = 0;
  *(void *)&v186[8] = 0;
  out.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v184, v106);
  MEMORY[0x192FA3C30](&out);
  std::runtime_error::runtime_error((std::runtime_error *)__what_arg, (const std::runtime_error *)__p);
  *(_OWORD *)&__what_arg[16] = *(_OWORD *)&__p[16];
  std::runtime_error v107 = (unsigned int *)*((void *)&v171 + 1);
  *(void *)std::string __what_arg = &unk_1EDC827D8;
  long long v142 = v171;
  uint64_t v143 = v172;
  if (v172)
  {
    *(void *)(*((void *)&v171 + 1) + 16) = (char *)&v142 + 8;
    std::runtime_error v107 = 0;
    *(void *)&long long v171 = (char *)&v171 + 8;
    *((void *)&v171 + 1) = 0;
    uint64_t v172 = 0;
  }
  else
  {
    *(void *)&long long v142 = (char *)&v142 + 8;
  }
  long long v144 = *(_OWORD *)v173;
  *(void *)v173 = 0;
  *(void *)&v173[8] = 0;
  char v145 = 0;
  *(void *)std::system_error __p = &unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v171, v107);
  MEMORY[0x192FA3C30](__p);
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_232;
  }
LABEL_213:
  if (v145) {
    goto LABEL_214;
  }
LABEL_233:
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v153);
  std::string::size_type v108 = v153.__r_.__value_.__r.__words[0];
  if (*(unsigned __int8 *)(v153.__r_.__value_.__r.__words[0] + 8) <= 4u)
  {
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&out);
    uint64_t v109 = out.__vftable[-1].~system_error;
    v110 = (void *)v140;
    {
      v110 = (void *)v140;
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&out, (uint64_t)"A URL action was missing a URL. action = ", 41);
    uint64_t v111 = v185;
    char v112 = (char *)&out + (unint64_t)out.__vftable[-1].~system_error;
    if ((v112[32] & 5) != 0)
    {
      uint64_t v113 = -1;
    }
    else
    {
      (*(void (**)(unsigned char *__return_ptr))(**((void **)v112 + 5) + 32))(__p);
      uint64_t v113 = v180;
    }
    *(std::chrono::system_clock::time_point *)std::system_error __p = std::chrono::system_clock::now();
    __p[8] = 4;
    *(void *)&__p[16] = v111;
    *(void *)&__p[24] = v113;
    (*(void (**)(void, const char *, uint64_t, unsigned char *))(**(void **)(v108 + 16) + 16))(*(void *)(v108 + 16), "dialog", 6, __p);
    out.__vftable = (std::system_error_vtbl *)*MEMORY[0x1E4FBA418];
    *(std::system_error_vtbl **)((char *)&out.__vftable + (unint64_t)out.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
    out.__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
    if (v189 < 0) {
      operator delete(*(void **)&v186[16]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x192FA3FD0](&v192);
  }
  v139 = (std::__shared_weak_count *)v153.__r_.__value_.__l.__size_;
  if (v153.__r_.__value_.__l.__size_
    && !atomic_fetch_add((atomic_ullong *volatile)(v153.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
    std::__shared_weak_count::__release_weak(v139);
  }
LABEL_307:
  if (v145)
  {
    AMSCore::URL::~URL((AMSCore::URL *)__what_arg);
    goto LABEL_309;
  }
  (**(void (***)(unsigned char *))__what_arg)(__what_arg);
  if (SHIBYTE(v147) < 0) {
LABEL_310:
  }
    operator delete(__s[0]);
LABEL_311:
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v151, v152[0]);
}

void sub_18DAE9A4C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t **std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<BOOL &>(void **a1, const void **a2, unsigned char *a3)
{
  uint64_t v6 = (uint64_t *)(a1 + 1);
  uint64_t v7 = a1[1];
  if (!v7) {
    goto LABEL_40;
  }
  int v8 = *((char *)a2 + 23);
  if (v8 >= 0) {
    int v9 = a2;
  }
  else {
    int v9 = *a2;
  }
  if (v8 >= 0) {
    size_t v10 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v10 = (size_t)a2[1];
  }
  size_t v11 = (uint64_t *)(a1 + 1);
  do
  {
    while (1)
    {
      int v12 = *((char *)v7 + 55);
      uint64_t v13 = v12 >= 0 ? v7 + 4 : (uint64_t *)v7[4];
      size_t v14 = v12 >= 0 ? *((unsigned __int8 *)v7 + 55) : v7[5];
      size_t v15 = v10 >= v14 ? v14 : v10;
      int v16 = memcmp(v13, v9, v15);
      if (v16) {
        break;
      }
      if (v14 >= v10) {
        goto LABEL_23;
      }
LABEL_9:
      uint64_t v7 = (uint64_t *)v7[1];
      if (!v7) {
        goto LABEL_24;
      }
    }
    if (v16 < 0) {
      goto LABEL_9;
    }
LABEL_23:
    size_t v11 = v7;
    uint64_t v7 = (uint64_t *)*v7;
  }
  while (v7);
LABEL_24:
  if (v11 != v6)
  {
    int v17 = *((char *)v11 + 55);
    if (v17 >= 0) {
      long long v18 = v11 + 4;
    }
    else {
      long long v18 = (void *)v11[4];
    }
    if (v17 >= 0) {
      size_t v19 = *((unsigned __int8 *)v11 + 55);
    }
    else {
      size_t v19 = v11[5];
    }
    if (v19 >= v10) {
      size_t v20 = v10;
    }
    else {
      size_t v20 = v19;
    }
    int v21 = memcmp(v9, v18, v20);
    if (v21)
    {
      if ((v21 & 0x80000000) == 0)
      {
LABEL_36:
        LOBYTE(v28[0]) = *a3;
        int v29 = 1;
        uint64_t result = (uint64_t **)AMSCore::Any::operator=((uint64_t)(v11 + 7), (uint64_t)v28);
        if (v29 != -1) {
          return (uint64_t **)((uint64_t (*)(uint64_t **, uint64_t **))off_1EDCA5D28[v29])(&v30, v28);
        }
        return result;
      }
    }
    else if (v10 >= v19)
    {
      goto LABEL_36;
    }
    uint64_t v6 = v11;
  }
LABEL_40:
  uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__find_equal<std::string>(a1, v6, v28, &v30, a2);
  if (!*result)
  {
    char v23 = result;
    unint64_t v24 = operator new(0x58uLL);
    v24[2] = *(_OWORD *)a2;
    *((void *)v24 + 6) = a2[2];
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    *((unsigned char *)v24 + 56) = *a3;
    *((_DWORD *)v24 + 20) = 1;
    size_t v25 = v28[0];
    *(void *)unint64_t v24 = 0;
    *((void *)v24 + 1) = 0;
    *((void *)v24 + 2) = v25;
    const void *v23 = (uint64_t *)v24;
    int v26 = (void *)**a1;
    if (v26)
    {
      *a1 = v26;
      int v27 = *v23;
    }
    else
    {
      int v27 = (uint64_t *)v24;
    }
    uint64_t result = (uint64_t **)std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], v27);
    a1[2] = (void *)((char *)a1[2] + 1);
  }
  return result;
}

void (***std::expected<AMSCore::FinanceMetricsEvent,AMSCore::Error>::~expected[abi:fe180100](void (***a1)(void)))(void)
{
  return a1;
}

char **std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<double>(void **a1, const std::string::value_type **a2, uint64_t **a3)
{
  uint64_t v6 = (uint64_t *)(a1 + 1);
  uint64_t v7 = a1[1];
  if (!v7) {
    goto LABEL_42;
  }
  int v8 = *((char *)a2 + 23);
  if (v8 >= 0) {
    int v9 = (const std::string::value_type *)a2;
  }
  else {
    int v9 = *a2;
  }
  if (v8 >= 0) {
    size_t v10 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v10 = (size_t)a2[1];
  }
  size_t v11 = (uint64_t *)(a1 + 1);
  do
  {
    while (1)
    {
      int v12 = *((char *)v7 + 55);
      uint64_t v13 = v12 >= 0 ? v7 + 4 : (uint64_t *)v7[4];
      size_t v14 = v12 >= 0 ? *((unsigned __int8 *)v7 + 55) : v7[5];
      size_t v15 = v10 >= v14 ? v14 : v10;
      int v16 = memcmp(v13, v9, v15);
      if (v16) {
        break;
      }
      if (v14 < v10) {
        goto LABEL_11;
      }
LABEL_9:
      size_t v11 = v7;
      uint64_t v7 = (uint64_t *)*v7;
      if (!v7) {
        goto LABEL_26;
      }
    }
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_11:
    uint64_t v7 = (uint64_t *)v7[1];
  }
  while (v7);
LABEL_26:
  if (v11 != v6)
  {
    int v17 = *((char *)v11 + 55);
    if (v17 >= 0) {
      long long v18 = v11 + 4;
    }
    else {
      long long v18 = (void *)v11[4];
    }
    if (v17 >= 0) {
      size_t v19 = *((unsigned __int8 *)v11 + 55);
    }
    else {
      size_t v19 = v11[5];
    }
    if (v19 >= v10) {
      size_t v20 = v10;
    }
    else {
      size_t v20 = v19;
    }
    int v21 = memcmp(v9, v18, v20);
    if (v21)
    {
      if ((v21 & 0x80000000) == 0)
      {
LABEL_38:
        v28[0] = *a3;
        int v29 = 2;
        uint64_t result = (char **)AMSCore::Any::operator=((uint64_t)(v11 + 7), (uint64_t)v28);
        if (v29 != -1) {
          return (char **)((uint64_t (*)(uint64_t **, uint64_t **))off_1EDCA5D78[v29])(&v30, v28);
        }
        return result;
      }
    }
    else if (v10 >= v19)
    {
      goto LABEL_38;
    }
    uint64_t v6 = v11;
  }
LABEL_42:
  uint64_t result = (char **)std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__find_equal<std::string>(a1, v6, v28, &v30, (const void **)a2);
  if (!*result)
  {
    char v23 = result;
    unint64_t v24 = (char *)operator new(0x58uLL);
    size_t v25 = (std::string *)(v24 + 32);
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v25, *a2, (std::string::size_type)a2[1]);
    }
    else
    {
      *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      *((void *)v24 + 6) = a2[2];
    }
    *((void *)v24 + 7) = *a3;
    *((_DWORD *)v24 + 20) = 2;
    int v26 = v28[0];
    *(void *)unint64_t v24 = 0;
    *((void *)v24 + 1) = 0;
    *((void *)v24 + 2) = v26;
    const void *v23 = v24;
    int v27 = (void *)**a1;
    if (v27)
    {
      *a1 = v27;
      unint64_t v24 = *v23;
    }
    uint64_t result = (char **)std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v24);
    a1[2] = (void *)((char *)a1[2] + 1);
  }
  return result;
}

void sub_18DAEA060(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char **std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<unsigned long long>(void **a1, const std::string::value_type **a2, uint64_t **a3)
{
  uint64_t v6 = (uint64_t *)(a1 + 1);
  uint64_t v7 = a1[1];
  if (!v7) {
    goto LABEL_42;
  }
  int v8 = *((char *)a2 + 23);
  if (v8 >= 0) {
    int v9 = (const std::string::value_type *)a2;
  }
  else {
    int v9 = *a2;
  }
  if (v8 >= 0) {
    size_t v10 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v10 = (size_t)a2[1];
  }
  size_t v11 = (uint64_t *)(a1 + 1);
  do
  {
    while (1)
    {
      int v12 = *((char *)v7 + 55);
      uint64_t v13 = v12 >= 0 ? v7 + 4 : (uint64_t *)v7[4];
      size_t v14 = v12 >= 0 ? *((unsigned __int8 *)v7 + 55) : v7[5];
      size_t v15 = v10 >= v14 ? v14 : v10;
      int v16 = memcmp(v13, v9, v15);
      if (v16) {
        break;
      }
      if (v14 < v10) {
        goto LABEL_11;
      }
LABEL_9:
      size_t v11 = v7;
      uint64_t v7 = (uint64_t *)*v7;
      if (!v7) {
        goto LABEL_26;
      }
    }
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_11:
    uint64_t v7 = (uint64_t *)v7[1];
  }
  while (v7);
LABEL_26:
  if (v11 != v6)
  {
    int v17 = *((char *)v11 + 55);
    if (v17 >= 0) {
      long long v18 = v11 + 4;
    }
    else {
      long long v18 = (void *)v11[4];
    }
    if (v17 >= 0) {
      size_t v19 = *((unsigned __int8 *)v11 + 55);
    }
    else {
      size_t v19 = v11[5];
    }
    if (v19 >= v10) {
      size_t v20 = v10;
    }
    else {
      size_t v20 = v19;
    }
    int v21 = memcmp(v9, v18, v20);
    if (v21)
    {
      if ((v21 & 0x80000000) == 0)
      {
LABEL_38:
        v28[0] = *a3;
        int v29 = 4;
        uint64_t result = (char **)AMSCore::Any::operator=((uint64_t)(v11 + 7), (uint64_t)v28);
        if (v29 != -1) {
          return (char **)((uint64_t (*)(uint64_t **, uint64_t **))off_1EDCA5D78[v29])(&v30, v28);
        }
        return result;
      }
    }
    else if (v10 >= v19)
    {
      goto LABEL_38;
    }
    uint64_t v6 = v11;
  }
LABEL_42:
  uint64_t result = (char **)std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__find_equal<std::string>(a1, v6, v28, &v30, (const void **)a2);
  if (!*result)
  {
    char v23 = result;
    unint64_t v24 = (char *)operator new(0x58uLL);
    size_t v25 = (std::string *)(v24 + 32);
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v25, *a2, (std::string::size_type)a2[1]);
    }
    else
    {
      *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      *((void *)v24 + 6) = a2[2];
    }
    *((void *)v24 + 7) = *a3;
    *((_DWORD *)v24 + 20) = 4;
    int v26 = v28[0];
    *(void *)unint64_t v24 = 0;
    *((void *)v24 + 1) = 0;
    *((void *)v24 + 2) = v26;
    const void *v23 = v24;
    int v27 = (void *)**a1;
    if (v27)
    {
      *a1 = v27;
      unint64_t v24 = *v23;
    }
    uint64_t result = (char **)std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v24);
    a1[2] = (void *)((char *)a1[2] + 1);
  }
  return result;
}

void sub_18DAEA28C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>(void *a1, const void **a2)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = (uint64_t *)a1[1];
  if (!v2) {
    return;
  }
  char v5 = *((unsigned char *)a2 + 23);
  if (v5 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *a2;
  }
  if (v5 >= 0) {
    size_t v7 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v7 = (size_t)a2[1];
  }
  int v8 = a1 + 1;
  int v9 = (uint64_t *)a1[1];
  do
  {
    while (1)
    {
      int v10 = *((char *)v9 + 55);
      size_t v11 = v10 >= 0 ? v9 + 4 : (uint64_t *)v9[4];
      size_t v12 = v10 >= 0 ? *((unsigned __int8 *)v9 + 55) : v9[5];
      size_t v13 = v7 >= v12 ? v12 : v7;
      int v14 = memcmp(v11, v6, v13);
      if (v14) {
        break;
      }
      if (v12 >= v7) {
        goto LABEL_23;
      }
LABEL_9:
      int v9 = (uint64_t *)v9[1];
      if (!v9) {
        goto LABEL_24;
      }
    }
    if (v14 < 0) {
      goto LABEL_9;
    }
LABEL_23:
    int v8 = v9;
    int v9 = (uint64_t *)*v9;
  }
  while (v9);
LABEL_24:
  if (v8 != v3)
  {
    int v15 = *((char *)v8 + 55);
    if (v15 >= 0) {
      int v16 = v8 + 4;
    }
    else {
      int v16 = (const void *)v8[4];
    }
    if (v15 >= 0) {
      size_t v17 = *((unsigned __int8 *)v8 + 55);
    }
    else {
      size_t v17 = v8[5];
    }
    if (v17 >= v7) {
      size_t v18 = v7;
    }
    else {
      size_t v18 = v17;
    }
    int v19 = memcmp(v6, v16, v18);
    if (v19)
    {
      if ((v19 & 0x80000000) == 0) {
        goto LABEL_36;
      }
    }
    else if (v7 >= v17)
    {
LABEL_36:
      size_t v20 = (void *)v8[1];
      if (v20)
      {
        do
        {
          int v21 = v20;
          size_t v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        int v22 = v8;
        do
        {
          int v21 = (void *)v22[2];
          BOOL v23 = *v21 == (void)v22;
          int v22 = v21;
        }
        while (!v23);
      }
      if ((void *)*a1 == v8) {
        *a1 = v21;
      }
      --a1[2];
      std::__tree_remove[abi:fe180100]<std::__tree_node_base<void *> *>(v2, v8);
      if (*((char *)v8 + 55) < 0) {
        operator delete((void *)v8[4]);
      }
      operator delete(v8);
    }
  }
}

void AMSCore::FinanceDialogRequest::perform(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  size_t v7 = operator new(0x890uLL);
  void *v7 = AMSCore::FinanceDialogRequest::perform;
  v7[1] = AMSCore::FinanceDialogRequest::perform;
  v7[268] = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v7[269] = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v7[270] = a4[1];
  *a4 = 0;
  a4[1] = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *((unsigned char *)v7 + 24) = 0;
  *((unsigned char *)v7 + 488) = 0;
  v7[62] = 0;
  v7[66] = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,void>(&v8, (uint64_t)(v7 + 2));
}

void sub_18DAEE7EC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AMSCore::FinanceDialogRequest::perform(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 2168);
  if (!*(unsigned char *)(v1 + 472))
  {
    __break(1u);
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = (AMSCore::HTTPResponseAction *)(result + 536);
  AMSCore::HTTPResponseAction::HTTPResponseAction(result + 536, v1 + 8);
  if (*(unsigned char *)(v2 + 488))
  {
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v2 + 24));
    *(unsigned char *)(v2 + 488) = 0;
  }
  AMSCore::HTTPResponseAction::HTTPResponseAction(v2 + 24, (uint64_t)v3);
  *(unsigned char *)(v2 + 488) = 1;
  AMSCore::HTTPResponseAction::~HTTPResponseAction(v3);
  uint64_t v4 = *(void *)(v2 + 2176);
  if (v4 && !atomic_fetch_add((atomic_ullong *volatile)(v4 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    char v5 = *(std::__shared_weak_count **)(v2 + 2176);
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(v2 + 2104);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  size_t v7 = *(std::__shared_weak_count **)(v2 + 2136);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  std::runtime_error v8 = *(std::__shared_weak_count **)(v2 + 2120);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  AMSCore::DialogRequest::~DialogRequest((AMSCore::DialogRequest *)(v2 + 1000));
  if (*(unsigned char *)(v2 + 1968) && *(char *)(v2 + 1967) < 0) {
    operator delete(*(void **)(v2 + 1944));
  }
  AMSCore::DialogRequest::~DialogRequest((AMSCore::DialogRequest *)(v2 + 1296));
  if (*(unsigned char *)(v2 + 1744)) {
    AMSCore::IMetricsProvider::Event::~Event((AMSCore::IMetricsProvider::Event *)(v2 + 1592));
  }
  if (*(char *)(v2 + 2071) < 0)
  {
    operator delete(*(void **)(v2 + 2048));
    if ((*(char *)(v2 + 2095) & 0x80000000) == 0) {
      goto LABEL_23;
    }
LABEL_27:
    operator delete(*(void **)(v2 + 2072));
    goto LABEL_23;
  }
  if (*(char *)(v2 + 2095) < 0) {
    goto LABEL_27;
  }
LABEL_23:
  *(void *)(v2 + 536) = v2 + 16;
  *(void *)uint64_t v2 = 0;
  return AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend((uint64_t)v3);
}

void AMSCore::FinanceDialogRequest::perform(char *__p)
{
  if (*(void *)__p)
  {
    uint64_t v2 = *((void *)__p + 272);
    if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 272);
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 263);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    char v5 = (std::__shared_weak_count *)*((void *)__p + 267);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = (std::__shared_weak_count *)*((void *)__p + 265);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    AMSCore::DialogRequest::~DialogRequest((AMSCore::DialogRequest *)(__p + 1000));
    if (__p[1968] && __p[1967] < 0) {
      operator delete(*((void **)__p + 243));
    }
    AMSCore::DialogRequest::~DialogRequest((AMSCore::DialogRequest *)(__p + 1296));
    if (__p[1744]) {
      AMSCore::IMetricsProvider::Event::~Event((AMSCore::IMetricsProvider::Event *)(__p + 1592));
    }
    if (__p[2071] < 0)
    {
      operator delete(*((void **)__p + 256));
      if ((__p[2095] & 0x80000000) == 0) {
        goto LABEL_21;
      }
    }
    else if ((__p[2095] & 0x80000000) == 0)
    {
      goto LABEL_21;
    }
    operator delete(*((void **)__p + 259));
  }
LABEL_21:
  size_t v7 = (char *)*((void *)__p + 66);
  if (v7 == __p + 504)
  {
    (*(void (**)(char *))(*((void *)__p + 63) + 32))(__p + 504);
    if (__p[488]) {
LABEL_25:
    }
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 24));
  }
  else
  {
    if (v7) {
      (*(void (**)(char *))(*(void *)v7 + 40))(v7);
    }
    if (__p[488]) {
      goto LABEL_25;
    }
  }
  uint64_t v8 = *((void *)__p + 270);
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v8 && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)__p + 270) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v9 = (std::__shared_weak_count *)*((void *)__p + 270);
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = *((void *)__p + 269);
  if (v10 && !atomic_fetch_add((atomic_ullong *volatile)(v10 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    size_t v11 = (std::__shared_weak_count *)*((void *)__p + 269);
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = *((void *)__p + 268);
  if (v12 && !atomic_fetch_add((atomic_ullong *volatile)(v12 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    size_t v13 = (std::__shared_weak_count *)*((void *)__p + 268);
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  operator delete(__p);
}

uint64_t AMSCore::DialogRequest::DialogRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  if (*(unsigned char *)(a2 + 48))
  {
    long long v4 = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v4;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 24) = 0;
    *(unsigned char *)(a1 + 48) = 1;
  }
  long long v5 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 56) = 0;
  long long v6 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v6;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  size_t v7 = (void *)(a2 + 112);
  uint64_t v8 = *(void *)(a2 + 112);
  *(void *)(a1 + 112) = v8;
  uint64_t v9 = a1 + 112;
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 120) = v10;
  if (v10)
  {
    *(void *)(v8 + 16) = v9;
    *(void *)(a2 + 104) = v7;
    void *v7 = 0;
    *(void *)(a2 + 120) = 0;
  }
  else
  {
    *(void *)(a1 + 104) = v9;
  }
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 280) = 0;
  if (*(unsigned char *)(a2 + 280))
  {
    AMSCore::IMetricsProvider::Event::Event((AMSCore::IMetricsProvider::Event *)(a1 + 128), (const AMSCore::IMetricsProvider::Event *)(a2 + 128));
    *(void *)(a1 + 128) = &unk_1EDC820B0;
    *(unsigned char *)(a1 + 280) = 1;
  }
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
  return a1;
}

void sub_18DAEF61C(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 280)) {
    AMSCore::IMetricsProvider::Event::~Event(v3);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v2, *(unsigned int **)(v1 + 112));
  if (*(char *)(v1 + 103) < 0)
  {
    operator delete(*v6);
    if ((*(char *)(v1 + 79) & 0x80000000) == 0)
    {
LABEL_5:
      if (!*(unsigned char *)(v1 + 48)) {
        goto LABEL_11;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(v1 + 79) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*v5);
  if (!*(unsigned char *)(v1 + 48)) {
    goto LABEL_11;
  }
LABEL_9:
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v4);
  }
LABEL_11:
  std::vector<AMSCore::DialogAction>::~vector[abi:fe180100]((void **)v1);
  _Unwind_Resume(a1);
}

void AMSCore::DialogRequest::~DialogRequest(AMSCore::DialogRequest *this)
{
  if (*((unsigned char *)this + 280)) {
    AMSCore::IMetricsProvider::Event::~Event((AMSCore::DialogRequest *)((char *)this + 128));
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this + 104, *((unsigned int **)this + 14));
  if ((*((char *)this + 103) & 0x80000000) == 0)
  {
    if ((*((char *)this + 79) & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_8:
    operator delete(*((void **)this + 7));
    if (!*((unsigned char *)this + 48)) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  operator delete(*((void **)this + 10));
  if (*((char *)this + 79) < 0) {
    goto LABEL_8;
  }
LABEL_5:
  if (!*((unsigned char *)this + 48))
  {
LABEL_10:
    uint64_t v2 = *(void **)this;
    if (!*(void *)this) {
      return;
    }
    goto LABEL_11;
  }
LABEL_9:
  if ((*((char *)this + 47) & 0x80000000) == 0) {
    goto LABEL_10;
  }
  operator delete(*((void **)this + 3));
  uint64_t v2 = *(void **)this;
  if (!*(void *)this) {
    return;
  }
LABEL_11:
  uint64_t v3 = *((void *)this + 1);
  long long v4 = v2;
  if ((void *)v3 != v2)
  {
    do
    {
      v3 -= 272;
      std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(v3);
    }
    while ((void *)v3 != v2);
    long long v4 = *(void **)this;
  }
  *((void *)this + 1) = v2;
  operator delete(v4);
}

uint64_t AMSCore::FinanceDialogRequest::perform(uint64_t a1, __n128 a2)
{
  long long v4 = (std::runtime_error *)(a1 + 1704);
  long long v5 = (AMSCore::HTTPResponseAction *)(a1 + 536);
  uint64_t v6 = a1 + 1936;
  int v7 = *(unsigned __int8 *)(a1 + 2184);
  if (v7 == 2)
  {
    uint64_t v8 = *(void *)(a1 + 2168);
    if (*(unsigned char *)(v8 + 472))
    {
      AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v5, v8 + 8);
      if (*(unsigned char *)(a1 + 488))
      {
        AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(a1 + 24));
        *(unsigned char *)(a1 + 488) = 0;
      }
      AMSCore::HTTPResponseAction::HTTPResponseAction(a1 + 24, (uint64_t)v5);
      *(unsigned char *)(a1 + 488) = 1;
      AMSCore::HTTPResponseAction::~HTTPResponseAction(v5);
      uint64_t v38 = *(void *)(a1 + 2176);
      if (v38 && !atomic_fetch_add((atomic_ullong *volatile)(v38 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v39 = *(std::__shared_weak_count **)(a1 + 2176);
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
      int v40 = *(std::__shared_weak_count **)(a1 + 2016);
      if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
      uint64_t v41 = *(std::__shared_weak_count **)(a1 + 2096);
      if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
      unint64_t v42 = *(std::__shared_weak_count **)(a1 + 2080);
      if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
      size_t v43 = *(std::__shared_weak_count **)(a1 + 2064);
      if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
      if (!*(unsigned char *)(a1 + 1776)) {
        goto LABEL_51;
      }
      goto LABEL_46;
    }
    goto LABEL_111;
  }
  if (v7 == 1)
  {
    uint64_t v2 = *(unsigned char **)(a1 + 2152);
    LOBYTE(v8) = v2[88];
    if ((_BYTE)v8)
    {
      uint64_t v9 = (const std::runtime_error *)(v2 + 8);
      char v10 = v2[80];
      if (v10)
      {
        *(void *)(a1 + 1704) = *((void *)v2 + 1);
        size_t v11 = (const char **)(a1 + 1712);
        p_char imp = (std::__libcpp_refstring *)(v2 + 16);
      }
      else
      {
        std::runtime_error::runtime_error((std::runtime_error *)(a1 + 1704), v9);
        *(_OWORD *)(a1 + 1720) = *(_OWORD *)(v2 + 24);
        *(void *)(a1 + 1704) = &unk_1EDC827D8;
        size_t v20 = v2 + 48;
        uint64_t v21 = *((void *)v2 + 6);
        *(void *)(a1 + 1736) = *((void *)v2 + 5);
        uint64_t v22 = a1 + 1744;
        *(void *)(a1 + 1744) = v21;
        uint64_t v23 = *((void *)v2 + 7);
        *(void *)(a1 + 1752) = v23;
        if (v23)
        {
          *(void *)(v21 + 16) = v22;
          *((void *)v2 + 5) = v20;
          *size_t v20 = 0;
          *((void *)v2 + 7) = 0;
        }
        else
        {
          *(void *)(a1 + 1736) = v22;
        }
        int v29 = *(const std::runtime_error **)(a1 + 2152);
        size_t v30 = v29[4].__vftable;
        uint64_t v9 = v29 + 4;
        *(void *)(a1 + 1760) = v30;
        size_t v11 = (const char **)(a1 + 1768);
        p_char imp = &v9->__imp_;
      }
      std::__shared_weak_count *v11 = p_imp->__imp_;
      v9->__vftable = 0;
      v9->__imp_.__imp_ = 0;
      *(unsigned char *)(a1 + 1776) = v10;
      uint64_t v31 = *(void *)(a1 + 2160);
      if (v31 && !atomic_fetch_add((atomic_ullong *volatile)(v31 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        char v32 = *(std::__shared_weak_count **)(a1 + 2160);
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
      char v33 = *(std::__shared_weak_count **)(a1 + 544);
      if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
      AMSCore::DialogRequest::~DialogRequest((AMSCore::DialogRequest *)(a1 + 1296));
      if (*(unsigned char *)(a1 + 1776))
      {
        uint64_t v34 = *(void *)(a1 + 2112);
        uint64_t v35 = *(void *)(a1 + 2104);
        *(_OWORD *)(a1 + 2056) = *(_OWORD *)(a1 + 1704);
        v4->__vftable = 0;
        v4->__imp_.__imp_ = 0;
        *(void *)(a1 + 2072) = v35;
        *(void *)(a1 + 2080) = v34;
        if (v34) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v36 = *(void *)(a1 + 2120);
        *(void *)(a1 + 2088) = *(void *)(v36 + 40);
        uint64_t v37 = *(void *)(v36 + 48);
        *(void *)(a1 + 2096) = v37;
        if (v37) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
        }
      }
      AMSCore::HTTPResponseAction::createCancelAction((AMSCore::HTTPResponseAction *)v82, v4);
      if (*(unsigned char *)(a1 + 488))
      {
        AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(a1 + 24));
        *(unsigned char *)(a1 + 488) = 0;
      }
      AMSCore::HTTPResponseAction::HTTPResponseAction(a1 + 24, (uint64_t)v82);
      *(unsigned char *)(a1 + 488) = 1;
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v82);
      if (!*(unsigned char *)(a1 + 1776))
      {
LABEL_51:
        ((void (*)(std::runtime_error *))v4->~runtime_error)(v4);
        goto LABEL_151;
      }
LABEL_46:
      int v44 = *(std::__shared_weak_count **)(a1 + 1712);
      if (!v44) {
        goto LABEL_151;
      }
      goto LABEL_149;
    }
    goto LABEL_111;
  }
  size_t v13 = (void **)(a1 + 1888);
  int v14 = (void **)(a1 + 1912);
  uint64_t v2 = *(unsigned char **)(a1 + 2136);
  LOBYTE(v8) = v2[88];
  if (!(_BYTE)v8) {
    goto LABEL_111;
  }
  BOOL v74 = (void *)(a1 + 1984);
  uint64_t v75 = a1 + 1936;
  int v15 = (const std::runtime_error *)(v2 + 8);
  char v16 = v2[80];
  size_t v17 = v2 + 24;
  if (v16)
  {
    std::runtime_error *v4 = *(std::runtime_error *)(v2 + 8);
    v15->__vftable = 0;
    *((void *)v2 + 2) = 0;
    *(void *)(a1 + 1720) = *((void *)v2 + 3);
    size_t v18 = (void *)(a1 + 1728);
    int v19 = v2 + 32;
  }
  else
  {
    unint64_t v24 = std::runtime_error::runtime_error((std::runtime_error *)(a1 + 1704), v15);
    *(_OWORD *)(a1 + 1720) = *(_OWORD *)v17;
    *(void *)(a1 + 1704) = &unk_1EDC827D8;
    size_t v25 = v2 + 48;
    uint64_t v26 = *((void *)v2 + 6);
    *(void *)(a1 + 1736) = *((void *)v2 + 5);
    uint64_t v27 = a1 + 1744;
    *(void *)(a1 + 1744) = v26;
    uint64_t v28 = *((void *)v2 + 7);
    *(void *)(a1 + 1752) = v28;
    if (v28)
    {
      *(void *)(v26 + 16) = v27;
      *((void *)v2 + 5) = v25;
      *size_t v25 = 0;
      *((void *)v2 + 7) = 0;
    }
    else
    {
      *(void *)(a1 + 1736) = v27;
    }
    uint64_t v45 = *(void *)(a1 + 2136);
    uint64_t v46 = *(void *)(v45 + 64);
    size_t v17 = (unsigned char *)(v45 + 64);
    *(void *)(a1 + 1760) = v46;
    size_t v18 = (void *)(a1 + 1768);
    int v19 = v17 + 8;
    long long v4 = v24;
  }
  *size_t v18 = *v19;
  *(void *)size_t v17 = 0;
  *((void *)v17 + 1) = 0;
  *(unsigned char *)(a1 + 1776) = v16;
  uint64_t v47 = *(void *)(a1 + 2144);
  if (v47 && !atomic_fetch_add((atomic_ullong *volatile)(v47 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    size_t v48 = *(std::__shared_weak_count **)(a1 + 2144);
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  int v49 = *(std::__shared_weak_count **)(a1 + 2048);
  uint64_t v6 = v75;
  if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
  }
  if (*(unsigned char *)(a1 + 1688) && *(char *)(a1 + 1687) < 0) {
    operator delete(*(void **)(a1 + 1664));
  }
  if (*(unsigned char *)(a1 + 1656) && *(char *)(a1 + 1655) < 0) {
    operator delete(*(void **)(a1 + 1632));
  }
  uint64_t v50 = *(void *)(a1 + 1608);
  if (v50)
  {
    uint64_t v51 = *(void *)(a1 + 1616);
    long long v52 = *(void **)(a1 + 1608);
    if (v51 != v50)
    {
      do
      {
        v51 -= 272;
        std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(v51);
      }
      while (v51 != v50);
      long long v52 = *(void **)(a1 + 1608);
    }
    *(void *)(a1 + 1616) = v50;
    operator delete(v52);
  }
  uint64_t v53 = *(std::__shared_weak_count **)(a1 + 1600);
  if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
    if (*(unsigned char *)(a1 + 1776))
    {
LABEL_74:
      v76.__r_.__value_.__s.__data_[0] = 0;
      char v77 = 0;
      if (!*(unsigned char *)(a1 + 1048))
      {
        AMSCore::StringUtils::join<char [51]>(&__what_arg, "Authenticate dialog did not have a default action.");
        v102.__cat_ = (const std::error_category *)&AMSCore::Error::Category::dialog(void)::instance;
        *(void *)&v102.__val_ = 701;
        std::system_error::system_error(&v78, v102, &__what_arg);
        if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__what_arg.__r_.__value_.__l.__data_);
        }
        memset(v80, 0, sizeof(v80));
        v78.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
        uint64_t v79 = v80;
        long long v81 = 0;
        AMSCore::HTTPResponseAction::createCancelAction((AMSCore::HTTPResponseAction *)v82, &v78);
        uint64_t v55 = (AMSCore::HTTPResponseAction *)(a1 + 24);
        if (*(unsigned char *)(a1 + 488))
        {
          AMSCore::HTTPResponseAction::~HTTPResponseAction(v55);
          *(unsigned char *)(a1 + 488) = 0;
        }
        AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v55, (uint64_t)v82);
        *(unsigned char *)(a1 + 488) = 1;
        AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v82);
        v78.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
        uint64_t v56 = v81;
        if (v81 && !atomic_fetch_add(&v81->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v79, v80[0]);
        MEMORY[0x192FA3C30](&v78);
        goto LABEL_123;
      }
      if (*(char *)(a1 + 1047) < 0)
      {
        std::string::__init_copy_ctor_external(&v76, *(const std::string::value_type **)(a1 + 1024), *(void *)(a1 + 1032));
        uint64_t v2 = v82;
        LODWORD(v8) = *(unsigned __int8 *)(a1 + 1776);
      }
      else
      {
        a2 = *(__n128 *)(a1 + 1024);
        *(__n128 *)&v76.__r_.__value_.__l.__data_ = a2;
        v76.__r_.__value_.__r.__words[2] = *(void *)(a1 + 1040);
        LODWORD(v8) = 1;
        uint64_t v2 = v82;
      }
      char v77 = 1;
      *(unsigned char *)(a1 + 1935) = 12;
      strcpy((char *)(a1 + 1920), "cate");
      *int v14 = *(void **)"authenticate";
      *(unsigned char *)(a1 + 1911) = 14;
      std::__shared_weak_count *v13 = *(void **)"authentication";
      strcpy((char *)(a1 + 1894), "tication");
      if (!v8) {
        goto LABEL_111;
      }
      *(void *)(a1 + 1784) = *(void *)(a1 + 1704);
      uint64_t v57 = *(void *)(a1 + 1712);
      *(void *)(a1 + 1792) = v57;
      if (v57) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v57 + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)(a1 + 1800) = *(void *)(a1 + 1720);
      uint64_t v58 = *(void *)(a1 + 1728);
      *(void *)(a1 + 1808) = v58;
      if (v58) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
      }
      *(unsigned char *)(a1 + 1816) = 1;
      v82[0] = 0;
      v82[24] = 0;
      v83.n128_u8[0] = 0;
      char v84 = 0;
      char v85 = 0;
      char v86 = 0;
      char v87 = 0;
      char v88 = 0;
      char v89 = 0;
      char v90 = 0;
      char v91 = 0;
      char v92 = 0;
      __int16 v93 = 0;
      v100[0] = 0;
      v100[32] = 0;
      v100[40] = 3;
      long long v59 = *(_OWORD *)v14;
      uint64_t v95 = *(void *)(a1 + 1928);
      long long v94 = v59;
      *int v14 = 0;
      *(void *)(a1 + 1920) = 0;
      *(void *)(a1 + 1928) = 0;
      char v96 = 1;
      long long v97 = *(_OWORD *)v13;
      uint64_t v98 = *(void *)(a1 + 1904);
      std::__shared_weak_count *v13 = 0;
      *(void *)(a1 + 1896) = 0;
      *(void *)(a1 + 1904) = 0;
      char v99 = 1;
      a2 = std::__optional_storage_base<AMSCore::AuthenticateResult,false>::__assign_from[abi:fe180100]<std::__optional_move_assign_base<AMSCore::AuthenticateResult,false>>((uint64_t)v100, (long long *)(a1 + 1784));
      if (*(unsigned char *)(a1 + 1816))
      {
        long long v60 = *(std::__shared_weak_count **)(a1 + 1808);
        if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, __n128))v60->__on_zero_shared)(v60, a2);
          std::__shared_weak_count::__release_weak(v60);
        }
        unsigned int v61 = *(std::__shared_weak_count **)(a1 + 1792);
        if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, __n128))v61->__on_zero_shared)(v61, a2);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      if (*(char *)(a1 + 1911) < 0)
      {
        operator delete(*v13);
        if ((*(char *)(a1 + 1935) & 0x80000000) == 0)
        {
LABEL_104:
          LOBYTE(v8) = v77;
          if (v77) {
            goto LABEL_105;
          }
          goto LABEL_111;
        }
      }
      else if ((*(char *)(a1 + 1935) & 0x80000000) == 0)
      {
        goto LABEL_104;
      }
      operator delete(*v14);
      LOBYTE(v8) = v77;
      if (v77)
      {
LABEL_105:
        AMSCore::DialogResult::DialogResult(&v78, (uint64_t *)(a1 + 1000), (const void **)&v76.__r_.__value_.__l.__data_);
        a2 = (__n128)v78.std::runtime_error;
        v78.__vftable = 0;
        v78.__imp_.__imp_ = 0;
        LOBYTE(v8) = 1;
        *(unsigned char *)(a1 + 2000) = 1;
        if (v84)
        {
          *BOOL v74 = 0;
          v74[1] = 0;
          uint64_t v62 = (std::__shared_weak_count *)v83.n128_u64[1];
          __n128 v83 = a2;
          if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
          goto LABEL_113;
        }
LABEL_112:
        *((__n128 *)v2 + 2) = a2;
        *BOOL v74 = 0;
        v74[1] = 0;
        char v84 = v8;
LABEL_113:
        if (*(unsigned char *)(a1 + 2000))
        {
          uint64_t v63 = *(std::__shared_weak_count **)(a1 + 1992);
          if (v63)
          {
            if (!atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
              std::__shared_weak_count::__release_weak(v63);
            }
          }
        }
        char imp = (std::__shared_weak_count *)v78.__imp_.__imp_;
        if (v78.__imp_.__imp_
          && !atomic_fetch_add((atomic_ullong *volatile)v78.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
          std::__shared_weak_count::__release_weak(imp);
        }
        int v65 = (AMSCore::HTTPResponseAction *)(a1 + 24);
        if (*(unsigned char *)(a1 + 488))
        {
          AMSCore::HTTPResponseAction::~HTTPResponseAction(v65);
          *(unsigned char *)(a1 + 488) = 0;
        }
        AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v65, (uint64_t)v82);
        *(unsigned char *)(a1 + 488) = 1;
        AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v82);
LABEL_123:
        if (v77 && SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v76.__r_.__value_.__l.__data_);
        }
        goto LABEL_126;
      }
LABEL_111:
      __break(1u);
      goto LABEL_112;
    }
  }
  else if (*(unsigned char *)(a1 + 1776))
  {
    goto LABEL_74;
  }
  AMSCore::HTTPResponseAction::createCancelAction((AMSCore::HTTPResponseAction *)v82, v4);
  char v54 = (AMSCore::HTTPResponseAction *)(a1 + 24);
  if (*(unsigned char *)(a1 + 488))
  {
    AMSCore::HTTPResponseAction::~HTTPResponseAction(v54);
    *(unsigned char *)(a1 + 488) = 0;
  }
  AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v54, (uint64_t)v82);
  *(unsigned char *)(a1 + 488) = 1;
  AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v82);
LABEL_126:
  if (*(unsigned char *)(a1 + 1776))
  {
    long long v66 = *(std::__shared_weak_count **)(a1 + 1728);
    if (v66 && !atomic_fetch_add(&v66->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
    uint64_t v67 = *(std::__shared_weak_count **)(a1 + 1712);
    if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  else
  {
    ((void (*)(std::runtime_error *))v4->~runtime_error)(v4);
  }
  int v68 = *(std::__shared_weak_count **)(a1 + 2016);
  if (v68 && !atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
    std::__shared_weak_count::__release_weak(v68);
  }
  if (*(unsigned char *)(a1 + 632) && *(char *)(a1 + 631) < 0) {
    operator delete(*(void **)(a1 + 608));
  }
  if (*(unsigned char *)(a1 + 600) && *(char *)(a1 + 599) < 0) {
    operator delete(*(void **)(a1 + 576));
  }
  uint64_t v69 = *(void *)(a1 + 552);
  if (v69)
  {
    uint64_t v70 = *(void *)(a1 + 560);
    BOOL v71 = *(void **)(a1 + 552);
    if (v70 != v69)
    {
      do
      {
        v70 -= 272;
        std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(v70);
      }
      while (v70 != v69);
      BOOL v71 = *(void **)(a1 + 552);
    }
    *(void *)(a1 + 560) = v69;
    operator delete(v71);
  }
  int v44 = *(std::__shared_weak_count **)(a1 + 544);
  if (v44)
  {
LABEL_149:
    if (!atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
LABEL_151:
  uint64_t v72 = *(unsigned int *)(a1 + 1952);
  if (v72 != -1) {
    ((void (*)(unsigned char *, uint64_t))off_1EDCA5E68[v72])(v82, v6);
  }
  *(void *)(a1 + 536) = a1 + 16;
  *(void *)a1 = 0;
  return AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend((uint64_t)v5);
}

void sub_18DAF0574(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, AMSCore::ExecuteHTTPRequestTask::HandlerType *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  if (a19)
  {
    if (a18 < 0) {
      operator delete(__p);
    }
  }
  std::expected<AMSCore::AuthenticateResult,AMSCore::Error>::~expected[abi:fe180100](v33);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a10);
  AMSCore::AuthenticateRequest::~AuthenticateRequest(v32);
  AMSCore::ExecuteHTTPRequestTask::HandlerType::~HandlerType(a12);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::FinanceDialogRequest::perform(char *a1)
{
  if (!*(void *)a1) {
    goto LABEL_69;
  }
  if (!a1[2184])
  {
    uint64_t v5 = *((void *)a1 + 268);
    if (v5 && !atomic_fetch_add((atomic_ullong *volatile)(v5 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v6 = (std::__shared_weak_count *)*((void *)a1 + 268);
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    int v7 = (std::__shared_weak_count *)*((void *)a1 + 256);
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    if (a1[1688] && a1[1687] < 0) {
      operator delete(*((void **)a1 + 208));
    }
    if (a1[1656] && a1[1655] < 0) {
      operator delete(*((void **)a1 + 204));
    }
    uint64_t v8 = *((void *)a1 + 201);
    if (v8)
    {
      uint64_t v9 = *((void *)a1 + 202);
      char v10 = (void *)*((void *)a1 + 201);
      if (v9 != v8)
      {
        do
        {
          v9 -= 272;
          std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(v9);
        }
        while (v9 != v8);
        char v10 = (void *)*((void *)a1 + 201);
      }
      *((void *)a1 + 202) = v8;
      operator delete(v10);
    }
    size_t v11 = (std::__shared_weak_count *)*((void *)a1 + 200);
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = (std::__shared_weak_count *)*((void *)a1 + 252);
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    if (a1[632] && a1[631] < 0) {
      operator delete(*((void **)a1 + 76));
    }
    if (a1[600] && a1[599] < 0) {
      operator delete(*((void **)a1 + 72));
    }
    uint64_t v13 = *((void *)a1 + 69);
    if (v13)
    {
      uint64_t v14 = *((void *)a1 + 70);
      int v15 = (void *)*((void *)a1 + 69);
      if (v14 != v13)
      {
        do
        {
          v14 -= 272;
          std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(v14);
        }
        while (v14 != v13);
        int v15 = (void *)*((void *)a1 + 69);
      }
      *((void *)a1 + 70) = v13;
      operator delete(v15);
    }
    char v16 = (std::__shared_weak_count *)*((void *)a1 + 68);
    if (!v16) {
      goto LABEL_67;
    }
    goto LABEL_63;
  }
  if (a1[2184] == 1)
  {
    uint64_t v2 = *((void *)a1 + 270);
    if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v3 = (std::__shared_weak_count *)*((void *)a1 + 270);
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    long long v4 = (std::__shared_weak_count *)*((void *)a1 + 68);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    AMSCore::DialogRequest::~DialogRequest((AMSCore::DialogRequest *)(a1 + 1296));
    goto LABEL_67;
  }
  uint64_t v17 = *((void *)a1 + 272);
  if (v17 && !atomic_fetch_add((atomic_ullong *volatile)(v17 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    size_t v18 = (std::__shared_weak_count *)*((void *)a1 + 272);
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  int v19 = (std::__shared_weak_count *)*((void *)a1 + 252);
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  size_t v20 = (std::__shared_weak_count *)*((void *)a1 + 262);
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  uint64_t v21 = (std::__shared_weak_count *)*((void *)a1 + 260);
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = (std::__shared_weak_count *)*((void *)a1 + 258);
  if (!v22 || atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (a1[1776]) {
      goto LABEL_62;
    }
LABEL_66:
    (**((void (***)(void))a1 + 213))();
    goto LABEL_67;
  }
  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
  std::__shared_weak_count::__release_weak(v22);
  if (!a1[1776]) {
    goto LABEL_66;
  }
LABEL_62:
  char v16 = (std::__shared_weak_count *)*((void *)a1 + 214);
  if (v16)
  {
LABEL_63:
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
LABEL_67:
  uint64_t v23 = *((unsigned int *)a1 + 488);
  if (v23 != -1) {
    ((void (*)(char *, char *))off_1EDCA5E68[v23])(&v29, a1 + 1936);
  }
LABEL_69:
  unint64_t v24 = (char *)*((void *)a1 + 66);
  if (v24 == a1 + 504)
  {
    (*(void (**)(char *))(*((void *)a1 + 63) + 32))(a1 + 504);
    if (a1[488]) {
LABEL_73:
    }
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(a1 + 24));
  }
  else
  {
    if (v24) {
      (*(void (**)(char *))(*(void *)v24 + 40))(v24);
    }
    if (a1[488]) {
      goto LABEL_73;
    }
  }
  uint64_t v25 = *((void *)a1 + 266);
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v25 && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)a1 + 266) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v26 = (std::__shared_weak_count *)*((void *)a1 + 266);
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  uint64_t v27 = *((void *)a1 + 264);
  if (v27 && !atomic_fetch_add((atomic_ullong *volatile)(v27 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v28 = (std::__shared_weak_count *)*((void *)a1 + 264);
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  AMSCore::DialogRequest::~DialogRequest((AMSCore::DialogRequest *)(a1 + 1000));
  operator delete(a1);
}

void AMSCore::AuthenticateRequest::~AuthenticateRequest(void **this)
{
  if (*((unsigned char *)this + 96) && *((char *)this + 95) < 0)
  {
    operator delete(this[9]);
    if (!*((unsigned char *)this + 64)) {
      goto LABEL_7;
    }
  }
  else if (!*((unsigned char *)this + 64))
  {
    goto LABEL_7;
  }
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
LABEL_7:
  uint64_t v2 = this[2];
  if (v2)
  {
    uint64_t v3 = (uint64_t)this[3];
    long long v4 = this[2];
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 272;
        std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(v3);
      }
      while ((void *)v3 != v2);
      long long v4 = this[2];
    }
    this[3] = v2;
    operator delete(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)this[1];
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

uint64_t AMSCore::Task<AMSCore::HTTPResponseAction,void>::ValuePromise::return_value<AMSCore::HTTPResponseAction>(uint64_t a1, uint64_t a2)
{
  long long v4 = (AMSCore::HTTPResponseAction *)(a1 + 8);
  if (*(unsigned char *)(a1 + 472))
  {
    AMSCore::HTTPResponseAction::~HTTPResponseAction(v4);
    *(unsigned char *)(a1 + 472) = 0;
  }
  uint64_t result = AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v4, a2);
  *(unsigned char *)(a1 + 472) = 1;
  return result;
}

std::string *std::optional<std::string>::optional[abi:fe180100](std::string *this, long long *a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__s.__data_[0] = 0;
  if (*((unsigned char *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v3 = *a2;
      this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void sub_18DAF0E28(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Error::Error<char [51]>(uint64_t a1, uint64_t a2, const std::error_category *a3)
{
  AMSCore::StringUtils::join<char [51]>(&__what_arg, "Authenticate dialog did not have a default action.");
  *(void *)&v8.__val_ = a2;
  v8.__cat_ = a3;
  std::system_error::system_error((std::system_error *)a1, v8, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 40) = 0;
  *(void *)a1 = &unk_1EDC827D8;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_18DAF0EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::optional<AMSCore::DialogResult>::~optional(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (v2)
    {
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  return a1;
}

uint64_t std::expected<AMSCore::AuthenticateResult,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    long long v3 = *(std::__shared_weak_count **)(a1 + 8);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    (**(void (***)(uint64_t))a1)(a1);
  }
  return a1;
}

void AMSCore::anonymous namespace'::handle(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  int v7 = (char *)operator new(0x4F0uLL);
  *((_OWORD *)v7 + 71) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *((void *)v7 + 150) = a3[1];
  *a3 = 0;
  a3[1] = 0;
  *(_OWORD *)(v7 + 1208) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  v7[24] = 0;
  v7[488] = 0;
  *((void *)v7 + 62) = 0;
  *((void *)v7 + 66) = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,void>(&v8, (uint64_t)(v7 + 16));
}

void sub_18DAF25A4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, AMSCore::URL *a12, uint64_t a13, uint64_t a14, AMSCore::URL ***a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a37);
  if (!*(unsigned char *)(v37 + 912)) {
    (**(void (***)(AMSCore::URL *))a12)(a12);
  }
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a13);
  _ZZN7AMSCore7finallyIZNS_12_GLOBAL__N_114handleDeepLinkENSt3__110shared_ptrINS_12DialogActionEEENS3_IKNS_13IMediaAccountEEEE3__0EEDaOT_EN7FinallyD1Ev(a15);
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_18DAF282C()
{
  if (SLOBYTE(STACK[0x347]) < 0) {
    JUMPOUT(0x18DAF2838);
  }
  JUMPOUT(0x18DAF2668);
}

void sub_18DAF285C()
{
}

void sub_18DAF2870()
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v1);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v0);
  JUMPOUT(0x18DAF2884);
}

uint64_t AMSCore::anonymous namespace'::handle(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = result + 1080;
  long long v3 = (AMSCore::HTTPResponseAction *)(result + 536);
  if (!*(unsigned char *)(result + 1256))
  {
    uint64_t v4 = *(void *)(result + 1224);
    if (*(unsigned char *)(v4 + 472))
    {
      AMSCore::HTTPResponseAction::HTTPResponseAction(result + 536, v4 + 8);
      uint64_t v5 = *(void *)(v1 + 1232);
      if (v5 && !atomic_fetch_add((atomic_ullong *volatile)(v5 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v6 = *(std::__shared_weak_count **)(v1 + 1232);
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      int v7 = *(std::__shared_weak_count **)(v1 + 1008);
      if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      long long v8 = *(std::__shared_weak_count **)(v1 + 1128);
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      uint64_t v9 = *(std::__shared_weak_count **)(v1 + 1112);
      if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      *(void *)(v1 + 1168) = *(void *)(v1 + 1136);
      uint64_t v10 = *(void *)(v1 + 1144);
      *(void *)(v1 + 1176) = v10;
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)(v1 + 1184) = *(_OWORD *)(v2 + 128);
      AMSCore::HandleDialogResultTask::perform(v1 + 1152, v1 + 1168, (void *)(v1 + 1184));
    }
    goto LABEL_50;
  }
  uint64_t v11 = *(void *)(result + 1240);
  if (!*(unsigned char *)(v11 + 88))
  {
LABEL_50:
    __break(1u);
    return result;
  }
  uint64_t v12 = (void (***)(uint64_t))(result + 1000);
  char v13 = *(unsigned char *)(v11 + 80);
  if (!v13)
  {
    std::runtime_error::runtime_error((std::runtime_error *)(result + 1000), (const std::runtime_error *)(v11 + 8));
    *(_OWORD *)(v1 + 1016) = *(_OWORD *)(v11 + 24);
    *(void *)(v1 + 1000) = &unk_1EDC827D8;
    uint64_t v14 = (void *)(v11 + 48);
    uint64_t v15 = *(void *)(v11 + 48);
    *(void *)(v1 + 1032) = *(void *)(v11 + 40);
    uint64_t v16 = v1 + 1040;
    *(void *)(v1 + 1040) = v15;
    uint64_t v17 = *(void *)(v11 + 56);
    *(void *)(v1 + 1048) = v17;
    if (v17)
    {
      *(void *)(v15 + 16) = v16;
      *(void *)(v11 + 40) = v14;
      *uint64_t v14 = 0;
      *(void *)(v11 + 56) = 0;
    }
    else
    {
      *(void *)(v1 + 1032) = v16;
    }
    uint64_t v18 = *(void *)(v1 + 1240);
    *(_OWORD *)(v1 + 1056) = *(_OWORD *)(v18 + 64);
    *(void *)(v18 + 64) = 0;
    *(void *)(v18 + 72) = 0;
  }
  *(unsigned char *)(v1 + 1072) = v13;
  uint64_t v19 = *(void *)(v1 + 1248);
  if (v19 && !atomic_fetch_add((atomic_ullong *volatile)(v19 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    size_t v20 = *(std::__shared_weak_count **)(v1 + 1248);
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  uint64_t v21 = *(std::__shared_weak_count **)(v1 + 1160);
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = *(std::__shared_weak_count **)(v1 + 1192);
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  uint64_t v23 = *(std::__shared_weak_count **)(v1 + 1176);
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    if (*(unsigned char *)(v1 + 1072)) {
      goto LABEL_43;
    }
  }
  else if (*(unsigned char *)(v1 + 1072))
  {
    goto LABEL_43;
  }
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v28);
  AMSCore::Logger::log<char [41],AMSCore::Error>(v28, 4u, (uint64_t)"dialog", 6, "Failed to handle dialog result. error = ", v1 + 1000);
  unint64_t v24 = v29;
  if (!v29 || atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (*(unsigned char *)(v1 + 1072)) {
      goto LABEL_43;
    }
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  if (!*(unsigned char *)(v1 + 1072)) {
LABEL_39:
  }
    (**v12)(v1 + 1000);
LABEL_43:
  *(_OWORD *)uint64_t v2 = *(_OWORD *)(v1 + 1136);
  *(void *)(v1 + 1136) = 0;
  *(void *)(v1 + 1144) = 0;
  *(unsigned char *)(v1 + 1096) = 1;
  __n128 v25 = std::__optional_storage_base<AMSCore::DialogResult,false>::__assign_from[abi:fe180100]<std::__optional_move_assign_base<AMSCore::DialogResult,false>>((__n128 *)(v1 + 568), (__n128 *)v2);
  if (*(unsigned char *)(v1 + 1096))
  {
    uint64_t v26 = *(std::__shared_weak_count **)(v1 + 1088);
    if (v26)
    {
      if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, __n128))v26->__on_zero_shared)(v26, v25);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  if (*(unsigned char *)(v1 + 488))
  {
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v1 + 24));
    *(unsigned char *)(v1 + 488) = 0;
  }
  AMSCore::HTTPResponseAction::HTTPResponseAction(v1 + 24, (uint64_t)v3);
  *(unsigned char *)(v1 + 488) = 1;
  AMSCore::HTTPResponseAction::~HTTPResponseAction(v3);
  *(void *)(v1 + 536) = v1 + 16;
  *(void *)uint64_t v1 = 0;
  return AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(v27);
}

void sub_18DAF2DC8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a9);
  if (!*(unsigned char *)(v10 + 1072)) {
    (**v11)(v11);
  }
  AMSCore::HTTPResponseAction::~HTTPResponseAction(v9);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::anonymous namespace'::handle(void *__p)
{
  if (!*__p)
  {
LABEL_16:
    int v7 = 0;
    goto LABEL_30;
  }
  if (*((unsigned char *)__p + 1256))
  {
    uint64_t v2 = __p[156];
    if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      long long v3 = (std::__shared_weak_count *)__p[156];
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)__p[145];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)__p[149];
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = (std::__shared_weak_count *)__p[147];
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 67));
    goto LABEL_16;
  }
  uint64_t v8 = __p[154];
  if (v8 && !atomic_fetch_add((atomic_ullong *volatile)(v8 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v9 = (std::__shared_weak_count *)__p[154];
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)__p[126];
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)__p[141];
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)__p[139];
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  int v7 = (std::__shared_weak_count *)__p[152];
LABEL_30:
  char v13 = (void *)__p[66];
  if (v13 == __p + 63)
  {
    (*(void (**)(char *))(__p[63] + 32))((char *)__p + 504);
    if (*((unsigned char *)__p + 488)) {
LABEL_34:
    }
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 3));
  }
  else
  {
    if (v13) {
      (*(void (**)(void *))(*v13 + 40))(v13);
    }
    if (*((unsigned char *)__p + 488)) {
      goto LABEL_34;
    }
  }
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v14 = __p[150];
  if (v14 && !atomic_fetch_add((atomic_ullong *volatile)(v14 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v15 = (std::__shared_weak_count *)__p[150];
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)__p[143];
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  operator delete(__p);
}

void sub_18DAF37CC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a9);
  if (!*(unsigned char *)(v9 + 912)) {
    (**v10)(v10);
  }
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v9 + 1088);
  _ZZN7AMSCore7finallyIZNS_12_GLOBAL__N_114handleDeepLinkENSt3__110shared_ptrINS_12DialogActionEEENS3_IKNS_13IMediaAccountEEEE3__0EEDaOT_EN7FinallyD1Ev(v11);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::anonymous namespace'::handleDeepLink(void *__p)
{
  if (*__p)
  {
    if (*((unsigned char *)__p + 1168))
    {
      uint64_t v2 = __p[145];
      if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        long long v3 = (std::__shared_weak_count *)__p[145];
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
      uint64_t v4 = (AMSCore::URL *)(__p + 105);
      uint64_t v5 = (std::__shared_weak_count *)__p[139];
      if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      AMSCore::URL::~URL((AMSCore::URL *)(__p + 86));
    }
    else
    {
      uint64_t v4 = (AMSCore::URL *)(__p + 67);
      uint64_t v13 = __p[143];
      if (v13 && !atomic_fetch_add((atomic_ullong *volatile)(v13 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v14 = (std::__shared_weak_count *)__p[143];
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      uint64_t v15 = (std::__shared_weak_count *)__p[125];
      if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    AMSCore::URL::~URL(v4);
    uint64_t v6 = (std::__shared_weak_count *)__p[137];
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    int v7 = *(AMSCore::URL **)__p[140];
    if (*((unsigned char *)v7 + 160))
    {
      AMSCore::URL::~URL(v7);
      *(unsigned char *)(v8 + 160) = 0;
    }
  }
  uint64_t v9 = (void *)__p[66];
  if (v9 == __p + 63)
  {
    (*(void (**)(char *))(__p[63] + 32))((char *)__p + 504);
    if (*((unsigned char *)__p + 488)) {
LABEL_19:
    }
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 3));
  }
  else
  {
    if (v9) {
      (*(void (**)(void *))(*v9 + 40))(v9);
    }
    if (*((unsigned char *)__p + 488)) {
      goto LABEL_19;
    }
  }
  uint64_t v10 = __p[141];
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v10 && !atomic_fetch_add((atomic_ullong *volatile)(__p[141] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v11 = (std::__shared_weak_count *)__p[141];
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)__p[135];
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  operator delete(__p);
}

uint64_t AMSCore::Logger::log<char [47],AMSCore::Error>(uint64_t result, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= 4u)
  {
    uint64_t v3 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v8);
    uint64_t v4 = *(void *)(v8[0] - 24);
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)"Failed to open an external deep link. error = ", 46);
    AMSCore::operator<<(v8, a2);
    uint64_t v5 = v8[6];
    uint64_t v6 = (char *)v8 + *(void *)(v8[0] - 24);
    if ((v6[32] & 5) != 0)
    {
      uint64_t v7 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v6 + 5) + 32))(&rep);
      uint64_t v7 = v15;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v12 = 4;
    uint64_t v13 = v5;
    uint64_t v14 = v7;
    (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v3 + 16) + 16))(*(void *)(v3 + 16), "networking", 10, &rep);
    v8[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v8[1] = MEMORY[0x1E4FBA470] + 16;
    if (v9 < 0) {
      operator delete((void *)v8[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v10);
  }
  return result;
}

void sub_18DAF3E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

AMSCore::URL ***_ZZN7AMSCore7finallyIZNS_12_GLOBAL__N_114handleDeepLinkENSt3__110shared_ptrINS_12DialogActionEEENS3_IKNS_13IMediaAccountEEEE3__0EEDaOT_EN7FinallyD1Ev(AMSCore::URL ***a1)
{
  uint64_t v2 = **a1;
  if (*((unsigned char *)v2 + 160))
  {
    AMSCore::URL::~URL(v2);
    *(unsigned char *)(v3 + 160) = 0;
  }
  return a1;
}

void ***std::__exception_guard_exceptions<std::vector<AMSCore::DialogAction>::__destroy_vector>::~__exception_guard_exceptions[abi:fe180100](void ***a1)
{
  if (!*((unsigned char *)a1 + 8))
  {
    uint64_t v2 = *a1;
    uint64_t v3 = **a1;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      uint64_t v5 = **a1;
      if ((void *)v4 != v3)
      {
        do
        {
          v4 -= 272;
          std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(v4);
        }
        while ((void *)v4 != v3);
        uint64_t v5 = **a1;
      }
      v2[1] = v3;
      operator delete(v5);
    }
  }
  return a1;
}

unsigned char *std::vector<AMSCore::DialogAction>::__emplace_back_slow_path<AMSCore::DialogAction>(void **a1, uint64_t a2)
{
  unint64_t v2 = 0xF0F0F0F0F0F0F0F1 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xF0F0F0F0F0F0F0) {
    std::vector<std::string>::__throw_length_error[abi:fe180100]();
  }
  if (0xE1E1E1E1E1E1E1E2 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v3) {
    unint64_t v3 = 0xE1E1E1E1E1E1E1E2 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xF0F0F0F0F0F0F0F1 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x78787878787878) {
    unint64_t v6 = 0xF0F0F0F0F0F0F0;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0xF0F0F0F0F0F0F0) {
      std::__throw_bad_array_new_length[abi:fe180100]();
    }
    uint64_t v7 = (char *)operator new(272 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[272 * v2];
  char *v8 = 0;
  v8[160] = 0;
  if (*(unsigned char *)(a2 + 160))
  {
    std::construct_at[abi:fe180100]<AMSCore::DialogAction::DeepLink,AMSCore::DialogAction::DeepLink,AMSCore::DialogAction::DeepLink*>((uint64_t)&v7[272 * v2], (long long *)a2);
    v8[160] = 1;
  }
  char v9 = &v7[272 * v2];
  *(_OWORD *)(v9 + 168) = *(_OWORD *)(a2 + 168);
  *((void *)v9 + 23) = *(void *)(a2 + 184);
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 168) = 0;
  v9[192] = *(unsigned char *)(a2 + 192);
  *(_OWORD *)(v9 + 200) = *(_OWORD *)(a2 + 200);
  uint64_t v10 = *(void *)(a2 + 224);
  *((void *)v9 + 27) = *(void *)(a2 + 216);
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  *(void *)(a2 + 216) = 0;
  *((void *)v9 + 28) = v10;
  uint64_t v11 = (char **)(v9 + 224);
  uint64_t v13 = *(void *)(a2 + 232);
  uint64_t v14 = *(void *)(a2 + 240);
  char v12 = (void *)(a2 + 232);
  *((void *)v9 + 29) = v13;
  *((void *)v9 + 30) = v14;
  uint64_t v15 = v9 + 232;
  if (v14)
  {
    *(void *)(v13 + 16) = v15;
    *(void *)(a2 + 224) = v12;
    void *v12 = 0;
    *(void *)(a2 + 240) = 0;
  }
  else
  {
    std::__shared_weak_count *v11 = v15;
  }
  uint64_t v16 = &v7[272 * v6];
  uint64_t v17 = &v7[272 * v2];
  *(_OWORD *)(v17 + 248) = *(_OWORD *)(a2 + 248);
  *((void *)v17 + 33) = *(void *)(a2 + 264);
  *(void *)(a2 + 256) = 0;
  *(void *)(a2 + 264) = 0;
  *(void *)(a2 + 248) = 0;
  uint64_t v18 = v8 + 272;
  size_t v20 = (char *)*a1;
  uint64_t v19 = (char *)a1[1];
  if (v19 == *a1)
  {
    *a1 = v8;
    a1[1] = v18;
    a1[2] = v16;
    if (!v19) {
      return v18;
    }
    goto LABEL_27;
  }
  uint64_t v21 = 0;
  do
  {
    __n128 v25 = &v8[v21];
    uint64_t v26 = &v8[v21 - 272];
    uint64_t v27 = (long long *)&v19[v21];
    *uint64_t v26 = 0;
    v8[v21 - 112] = 0;
    if (v19[v21 - 112])
    {
      std::construct_at[abi:fe180100]<AMSCore::DialogAction::DeepLink,AMSCore::DialogAction::DeepLink,AMSCore::DialogAction::DeepLink*>((uint64_t)v26, v27 - 17);
      *(v25 - 112) = 1;
    }
    long long v28 = *(long long *)((char *)v27 - 104);
    *((void *)v25 - 11) = *((void *)v27 - 11);
    *(_OWORD *)(v25 - 104) = v28;
    *((void *)v27 - 12) = 0;
    *((void *)v27 - 11) = 0;
    *((void *)v27 - 13) = 0;
    *(v25 - 80) = *((unsigned char *)v27 - 80);
    long long v29 = *(long long *)((char *)v27 - 72);
    *((void *)v25 - 7) = *((void *)v27 - 7);
    *(_OWORD *)(v25 - 72) = v29;
    *((void *)v27 - 8) = 0;
    *((void *)v27 - 7) = 0;
    *((void *)v27 - 9) = 0;
    *((void *)v25 - 6) = *((void *)v27 - 6);
    size_t v30 = (char *)v27 - 40;
    uint64_t v31 = *((void *)v27 - 5);
    *((void *)v25 - 5) = v31;
    char v32 = v25 - 40;
    uint64_t v33 = *((void *)v27 - 4);
    *((void *)v25 - 4) = v33;
    if (v33)
    {
      *(void *)(v31 + 16) = v32;
      *((void *)v27 - 6) = v30;
      *(void *)size_t v30 = 0;
      *((void *)v27 - 4) = 0;
    }
    else
    {
      *((void *)v25 - 6) = v32;
    }
    uint64_t v22 = &v8[v21];
    uint64_t v23 = &v19[v21];
    long long v24 = *(_OWORD *)&v19[v21 - 24];
    *((void *)v22 - 1) = *(void *)&v19[v21 - 8];
    *(_OWORD *)(v22 - 24) = v24;
    *((void *)v23 - 2) = 0;
    *((void *)v23 - 1) = 0;
    *((void *)v23 - 3) = 0;
    v21 -= 272;
  }
  while (&v19[v21] != v20);
  uint64_t v34 = &v8[v21];
  uint64_t v19 = (char *)*a1;
  uint64_t v35 = (uint64_t)a1[1];
  *a1 = v34;
  a1[1] = v18;
  a1[2] = v16;
  while ((char *)v35 != v19)
  {
    v35 -= 272;
    std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(v35);
  }
  if (v19) {
LABEL_27:
  }
    operator delete(v19);
  return v18;
}

void AMSCore::FinanceDialogRequest::clone(AMSCore::FinanceDialogRequest *this)
{
}

void AMSCore::FinanceDialogRequest::~FinanceDialogRequest(AMSCore::FinanceDialogRequest *this)
{
}

uint64_t AMSCore::FinanceResponse::getAuthenticateRequestTypeForResponse(AMSCore::FinanceResponse *this, const AMSCore::HTTPResponse *a2)
{
  std::system_error __p = operator new(0x20uLL);
  long long v31 = xmmword_18DDE9B50;
  strcpy((char *)__p, "X-Apple-Allow-Auth-Types");
  AMSCore::IHTTPHeaderMap::getSingleValueOrNone(&v32, (void *)this + 20, (char *)&__p);
  if (v33)
  {
    std::string v34 = v32;
    if ((SHIBYTE(v31) & 0x80000000) == 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  *((unsigned char *)&v34.__r_.__value_.__s + 23) = 0;
  v34.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v31) < 0) {
LABEL_3:
  }
    operator delete(__p);
LABEL_4:
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v3 = &v34;
  }
  else {
    unint64_t v3 = (std::string *)v34.__r_.__value_.__r.__words[0];
  }
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v34.__r_.__value_.__l.__size_;
  }
  AMSCore::StringUtils::split(&v32.__r_.__value_.__l.__data_, (uint64_t)v3, size, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v5 = (void *)v32.__r_.__value_.__r.__words[0];
  if (v32.__r_.__value_.__r.__words[0] == v32.__r_.__value_.__l.__size_)
  {
    BOOL v7 = 0;
    uint64_t v8 = (void *)v32.__r_.__value_.__r.__words[0];
  }
  else
  {
    std::string::size_type v6 = v32.__r_.__value_.__r.__words[0];
    while (*(void *)(v6 + 8) != 4 || **(_DWORD **)v6 != 1685417836)
    {
      v6 += 16;
      if (v6 == v32.__r_.__value_.__l.__size_)
      {
        std::string::size_type v6 = v32.__r_.__value_.__l.__size_;
        break;
      }
    }
    BOOL v7 = v6 != v32.__r_.__value_.__l.__size_;
    uint64_t v8 = (void *)v32.__r_.__value_.__r.__words[0];
    while (v8[1] != 6 || *(_DWORD *)*v8 != 1701603699 || *(_WORD *)(*v8 + 4) != 29806)
    {
      v8 += 2;
      if (v8 == (void *)v32.__r_.__value_.__l.__size_)
      {
        uint64_t v8 = (void *)v32.__r_.__value_.__l.__size_;
        break;
      }
    }
  }
  if (*((_WORD *)this + 76) == 401)
  {
    int v10 = v8 != (void *)v32.__r_.__value_.__l.__size_ || v7;
    if (v7 && v8 != (void *)v32.__r_.__value_.__l.__size_) {
      char v11 = 1;
    }
    else {
      char v11 = 2;
    }
    if (v7) {
      unsigned __int8 v12 = v11;
    }
    else {
      unsigned __int8 v12 = 0;
    }
    if (!v32.__r_.__value_.__r.__words[0]) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  if (v8 != (void *)v32.__r_.__value_.__l.__size_)
  {
LABEL_46:
    unsigned __int8 v12 = 0;
    int v10 = 1;
    if (!v5) {
      goto LABEL_42;
    }
LABEL_41:
    operator delete(v5);
    goto LABEL_42;
  }
  AMSCore::HTTPResponse::getDecodedObject(this);
  if (*(unsigned char *)(v14 + 72))
  {
    uint64_t v15 = (uint64_t *)(v14 + 8);
    uint64_t v16 = *(uint64_t **)(v14 + 8);
    if (!v16) {
      goto LABEL_80;
    }
    uint64_t v17 = (uint64_t *)(v14 + 8);
    while (1)
    {
      int v18 = *((char *)v16 + 55);
      if (v18 >= 0) {
        uint64_t v19 = v16 + 4;
      }
      else {
        uint64_t v19 = (const void *)v16[4];
      }
      if (v18 >= 0) {
        unint64_t v20 = *((unsigned __int8 *)v16 + 55);
      }
      else {
        unint64_t v20 = v16[5];
      }
      if (v20 >= 0xB) {
        size_t v21 = 11;
      }
      else {
        size_t v21 = v20;
      }
      int v22 = memcmp("failureType", v19, v21);
      if (v22)
      {
        if (v22 < 0) {
          goto LABEL_65;
        }
LABEL_51:
        uint64_t v16 = (uint64_t *)v16[1];
        if (!v16) {
          goto LABEL_66;
        }
      }
      else
      {
        if (v20 < 0xB) {
          goto LABEL_51;
        }
LABEL_65:
        uint64_t v17 = v16;
        uint64_t v16 = (uint64_t *)*v16;
        if (!v16)
        {
LABEL_66:
          if (v17 == v15) {
            goto LABEL_80;
          }
          int v23 = *((char *)v17 + 55);
          if (v23 >= 0) {
            long long v24 = v17 + 4;
          }
          else {
            long long v24 = (const void *)v17[4];
          }
          if (v23 >= 0) {
            unint64_t v25 = *((unsigned __int8 *)v17 + 55);
          }
          else {
            unint64_t v25 = v17[5];
          }
          if (v25 >= 0xB) {
            size_t v26 = 11;
          }
          else {
            size_t v26 = v25;
          }
          int v27 = memcmp("failureType", v24, v26);
          if (v27)
          {
            if ((v27 & 0x80000000) == 0) {
              goto LABEL_78;
            }
LABEL_80:
            long long v28 = &AMSCore::Any::Null(void)::null;
          }
          else
          {
            if (v25 > 0xB) {
              goto LABEL_80;
            }
LABEL_78:
            long long v28 = v17 + 7;
          }
          int v29 = *((_DWORD *)v28 + 6);
          if (v29 == -1) {
            LOBYTE(v29) = 0;
          }
          switch((char)v29)
          {
            case 1:
              if (!*(unsigned char *)v28) {
                goto LABEL_84;
              }
              goto LABEL_46;
            case 2:
              if (*(double *)v28 != 2002.0) {
                goto LABEL_84;
              }
              goto LABEL_46;
            case 3:
            case 4:
              if (*v28 != 2002) {
                goto LABEL_84;
              }
              goto LABEL_46;
            default:
              goto LABEL_84;
          }
        }
      }
    }
  }
LABEL_84:
  int v10 = 1;
  unsigned __int8 v12 = 2;
  if (v5) {
    goto LABEL_41;
  }
LABEL_42:
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  return v12 | (v10 << 8);
}

void sub_18DAF45C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<AMSCore::CreditDisplayUpdateAction>::~unique_ptr[abi:fe180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 31) < 0) {
      operator delete(*(void **)(v2 + 8));
    }
    MEMORY[0x192FA4080](v2, 0x1093C402D7449D9);
  }
  return a1;
}

__n128 std::__optional_storage_base<AMSCore::Error,false>::__assign_from[abi:fe180100]<std::__optional_move_assign_base<AMSCore::Error,false>>(std::runtime_error *this, std::runtime_error *a2)
{
  if (LOBYTE(this[4].__imp_.__imp_) == LOBYTE(a2[4].__imp_.__imp_))
  {
    if (LOBYTE(this[4].__imp_.__imp_))
    {
      AMSCore::Error::operator=((uint64_t)this, (uint64_t)a2);
    }
  }
  else if (LOBYTE(this[4].__imp_.__imp_))
  {
    this->__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v5 = (std::__shared_weak_count *)this[4].__vftable;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&this[2], (unsigned int *)this[2].__imp_.__imp_);
    MEMORY[0x192FA3C30](this);
    LOBYTE(this[4].__imp_.__imp_) = 0;
  }
  else
  {
    std::runtime_error::runtime_error(this, a2);
    this->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA448] + 16);
    this[1] = a2[1];
    this->__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    this[2].__vftable = a2[2].__vftable;
    p_char imp = (std::runtime_error_vtbl *)&a2[2].__imp_;
    char imp = a2[2].__imp_.__imp_;
    this[2].__imp_.__imp_ = imp;
    uint64_t v8 = (std::runtime_error_vtbl *)&this[2].__imp_;
    char v9 = a2[3].__vftable;
    this[3].__vftable = v9;
    if (v9)
    {
      *((void *)imp + 2) = v8;
      a2[2].__vftable = p_imp;
      p_imp->~runtime_error = 0;
      a2[3].__vftable = 0;
    }
    else
    {
      this[2].__vftable = v8;
    }
    __n128 result = *(__n128 *)&a2[3].__imp_.__imp_;
    *(__n128 *)((char *)this + 56) = result;
    a2[3].__imp_.__imp_ = 0;
    a2[4].__vftable = 0;
    LOBYTE(this[4].__imp_.__imp_) = 1;
  }
  return result;
}

unint64_t AMSCore::anonymous namespace'::getProtocolValue<std::map<std::string,AMSCore::Any>>(uint64_t a1, const void **a2)
{
  uint64_t v4 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<char const*>(a1, "protocol");
  if ((uint64_t *)(a1 + 8) == v4
    || *((_DWORD *)v4 + 20) != 8
    || (*((_DWORD *)v4 + 20) != 8 ? (uint64_t v5 = 0) : (uint64_t v5 = (uint64_t)(v4 + 7)),
        (std::string::size_type v6 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(v5, a2), (uint64_t *)(v5 + 8) == v6)|| *((_DWORD *)v6 + 20) != 8))
  {
    char v9 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(a1, a2);
    if ((uint64_t *)(a1 + 8) == v9)
    {
      LOBYTE(v7) = 0;
      unint64_t v8 = 0;
    }
    else
    {
      if (*((_DWORD *)v9 + 20) == 8) {
        unint64_t v7 = (unint64_t)(v9 + 7);
      }
      else {
        unint64_t v7 = 0;
      }
      if (*((_DWORD *)v9 + 20) == 8)
      {
        unint64_t v8 = v7 & 0xFFFFFFFFFFFFFF00;
      }
      else
      {
        LOBYTE(v7) = 0;
        unint64_t v8 = 0;
      }
    }
  }
  else
  {
    if (*((_DWORD *)v6 + 20) == 8) {
      unint64_t v7 = (unint64_t)(v6 + 7);
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v7 & 0xFFFFFFFFFFFFFF00;
  }
  return v8 | v7;
}

void AMSCore::getValueByKey<std::map<std::string,AMSCore::Any>,std::map<std::string,AMSCore::Any> const>(uint64_t a1, uint64_t a2, void *a3, unint64_t a4)
{
  v33[0] = (uint64_t)a3;
  v33[1] = a4;
  AMSCore::getValueByKey((uint64_t)&v26, a2, a3, a4);
  if (!v32)
  {
    std::runtime_error::runtime_error(&v19, &v26);
    long long v20 = v27;
    v19.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    size_t v21 = v28;
    uint64_t v22 = v29;
    uint64_t v23 = v30;
    if (v30)
    {
      *(void *)(v29 + 16) = &v22;
      long long v28 = &v29;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
    }
    else
    {
      size_t v21 = &v22;
    }
    long long v24 = v31;
    long long v31 = 0uLL;
    char v25 = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v13, (uint64_t)&v19);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v13);
    *(_OWORD *)(a1 + 16) = v14;
    *(void *)a1 = &unk_1EDC827D8;
    uint64_t v9 = v16;
    *(void *)(a1 + 32) = v15;
    *(void *)(a1 + 40) = v9;
    uint64_t v10 = a1 + 40;
    uint64_t v11 = v17;
    *(void *)(a1 + 48) = v17;
    if (v11)
    {
      *(void *)(v9 + 16) = v10;
      uint64_t v15 = &v16;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v9 = 0;
    }
    else
    {
      *(void *)(a1 + 32) = v10;
    }
    *(_OWORD *)(a1 + 56) = v18;
    long long v18 = 0uLL;
    *(unsigned char *)(a1 + 72) = 0;
    v13.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v15, (unsigned int *)v9);
    MEMORY[0x192FA3C30](&v13);
    if (!v25) {
      goto LABEL_22;
    }
    v19.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    unsigned __int8 v12 = (std::__shared_weak_count *)*((void *)&v24 + 1);
    if (*((void *)&v24 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v6 = v22;
LABEL_21:
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v21, (unsigned int *)v6);
    MEMORY[0x192FA3C30](&v19);
    goto LABEL_22;
  }
  uint64_t v5 = v26.__vftable;
  if (LODWORD(v26.__vftable[1].~runtime_error) != 8)
  {
    LOBYTE(v13.__vftable) = 34;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[32],std::string_view &,char>((uint64_t)&v19, 0xCu, "unable to find value with key \"", v33, (char *)&v13);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v19);
    *(_OWORD *)(a1 + 16) = v20;
    *(void *)a1 = &unk_1EDC827D8;
    uint64_t v6 = v22;
    *(void *)(a1 + 32) = v21;
    *(void *)(a1 + 40) = v6;
    uint64_t v7 = a1 + 40;
    uint64_t v8 = v23;
    *(void *)(a1 + 48) = v23;
    if (v8)
    {
      *(void *)(v6 + 16) = v7;
      size_t v21 = &v22;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v6 = 0;
    }
    else
    {
      *(void *)(a1 + 32) = v7;
    }
    *(_OWORD *)(a1 + 56) = v24;
    long long v24 = 0uLL;
    *(unsigned char *)(a1 + 72) = 0;
    v19.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    goto LABEL_21;
  }
  if (LODWORD(v26.__vftable[1].~runtime_error) != 8) {
    uint64_t v5 = 0;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 72) = 1;
LABEL_22:
  if (!v32) {
    ((void (*)(std::runtime_error *))v26.~runtime_error)(&v26);
  }
}

void sub_18DAF4BFC(_Unwind_Exception *exception_object)
{
  if (!*(unsigned char *)(v1 - 72)) {
    (**(void (***)(uint64_t))(v1 - 144))(v1 - 144);
  }
  _Unwind_Resume(exception_object);
}

std::runtime_error *std::expected<std::reference_wrapper<std::map<std::string,AMSCore::Any> const>,AMSCore::Error>::operator=[abi:fe180100](std::runtime_error *this, std::runtime_error *a2)
{
  if (LOBYTE(this[4].__imp_.__imp_))
  {
    if (LOBYTE(a2[4].__imp_.__imp_))
    {
      this->__vftable = a2->__vftable;
    }
    else
    {
      std::runtime_error::runtime_error(this, a2);
      this->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA448] + 16);
      this[1] = a2[1];
      this->__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      this[2].__vftable = a2[2].__vftable;
      p_char imp = (std::runtime_error_vtbl *)&a2[2].__imp_;
      char imp = a2[2].__imp_.__imp_;
      this[2].__imp_.__imp_ = imp;
      uint64_t v6 = (std::runtime_error_vtbl *)&this[2].__imp_;
      uint64_t v7 = a2[3].__vftable;
      this[3].__vftable = v7;
      if (v7)
      {
        *((void *)imp + 2) = v6;
        a2[2].__vftable = p_imp;
        p_imp->~runtime_error = 0;
        a2[3].__vftable = 0;
      }
      else
      {
        this[2].__vftable = v6;
      }
      *(std::runtime_error *)((char *)this + 56) = *(std::runtime_error *)((char *)a2 + 56);
      a2[3].__imp_.__imp_ = 0;
      a2[4].__vftable = 0;
      LOBYTE(this[4].__imp_.__imp_) = 0;
    }
  }
  else if (LOBYTE(a2[4].__imp_.__imp_))
  {
    ((void (*)(std::runtime_error *))this->~runtime_error)(this);
    this->__vftable = a2->__vftable;
    LOBYTE(this[4].__imp_.__imp_) = 1;
  }
  else
  {
    AMSCore::Error::operator=((uint64_t)this, (uint64_t)a2);
  }
  return this;
}

void *std::vector<std::unique_ptr<AMSCore::IFinanceAction>>::~vector[abi:fe180100](void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    unint64_t v3 = (void *)a1[1];
    uint64_t v4 = (void *)*a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        *unint64_t v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[28]>(uint64_t a1, unsigned int a2, const char *a3)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v12);
  size_t v6 = strlen(a3);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v12, (uint64_t)a3, v6);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v12.__imp_, &v11);
  v12.__vftable = (std::system_error_vtbl *)*MEMORY[0x1E4FBA418];
  *(std::system_error_vtbl **)((char *)&v12.__vftable + (unint64_t)v12.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
  v12.__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
  if (v18 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FA3FD0](&v19);
  *(void *)&v20.__val_ = a2;
  v20.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v12, v20, &v11);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  v12.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::runtime_error v13 = &v14;
  long long v16 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v12);
  *(std::error_code *)(a1 + 16) = v12.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v7 = v14;
  *(void *)(a1 + 32) = v13;
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = a1 + 40;
  uint64_t v9 = v15;
  *(void *)(a1 + 48) = v15;
  if (v9)
  {
    *(void *)(v7 + 16) = v8;
    uint64_t v7 = 0;
    std::runtime_error v13 = &v14;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v8;
  }
  *(_OWORD *)(a1 + 56) = v16;
  long long v16 = 0uLL;
  v12.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v13, (unsigned int *)v7);
  return MEMORY[0x192FA3C30](&v12);
}

void sub_18DAF5038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::FinanceResponse::~FinanceResponse(AMSCore::FinanceResponse *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!*((unsigned char *)this + 96)) {
      goto LABEL_8;
    }
  }
  else if (!*((unsigned char *)this + 96))
  {
    goto LABEL_8;
  }
  *((void *)this + 3) = &unk_1EDC827D8;
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this + 56, *((unsigned int **)this + 8));
  MEMORY[0x192FA3C30]((char *)this + 24);
LABEL_8:
  uint64_t v4 = *(void **)this;
  if (*(void *)this)
  {
    uint64_t v5 = (void *)*((void *)this + 1);
    size_t v6 = *(void **)this;
    if (v5 != v4)
    {
      do
      {
        uint64_t v8 = *--v5;
        uint64_t v7 = v8;
        void *v5 = 0;
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
      }
      while (v5 != v4);
      size_t v6 = *(void **)this;
    }
    *((void *)this + 1) = v4;
    operator delete(v6);
  }
}

void std::__shared_ptr_emplace<AMSCore::FinanceResponse>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<AMSCore::FinanceResponse>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83C58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::FinanceResponse>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83C58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AMSCore::FinanceRequestHandler::handleAuthentication(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = (char *)operator new(0x118uLL);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v3 + 152) = *(_OWORD *)a2;
  *(void *)unint64_t v3 = AMSCore::FinanceRequestHandler::handleAuthentication;
  *((void *)v3 + 1) = AMSCore::FinanceRequestHandler::handleAuthentication;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(v3 + 168) = v4;
  *((void *)v3 + 23) = *(void *)(a2 + 32);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  v3[192] = 0;
  v3[216] = 0;
  if (*(unsigned char *)(a2 + 64))
  {
    *((_OWORD *)v3 + 12) = *(_OWORD *)(a2 + 40);
    *((void *)v3 + 26) = *(void *)(a2 + 56);
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 40) = 0;
    v3[216] = 1;
  }
  v3[224] = 0;
  v3[248] = 0;
  if (*(unsigned char *)(a2 + 96))
  {
    *((_OWORD *)v3 + 14) = *(_OWORD *)(a2 + 72);
    *((void *)v3 + 30) = *(void *)(a2 + 88);
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 88) = 0;
    *(void *)(a2 + 72) = 0;
    v3[248] = 1;
  }
  v3[256] = *(unsigned char *)(a2 + 104);
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  v3[24] = 0;
  v3[104] = 0;
  *((void *)v3 + 14) = 0;
  *((void *)v3 + 18) = 0;
  operator new();
}

void sub_18DAF5810(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x18DAF5818);
  }
  __cxa_end_catch();
  JUMPOUT(0x18DAF578CLL);
}

void AMSCore::FinanceRequestHandler::handleAuthentication(uint64_t a1)
{
  uint64_t v2 = a1 + 120;
  uint64_t v3 = *(void *)(a1 + 144);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  std::__optional_destruct_base<std::expected<AMSCore::AuthenticateResult,AMSCore::Error>,false>::~__optional_destruct_base[abi:fe180100](a1 + 24);
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (*(unsigned char *)(a1 + 248) && *(char *)(a1 + 247) < 0) {
    operator delete(*(void **)(a1 + 224));
  }
  if (*(unsigned char *)(a1 + 216) && *(char *)(a1 + 215) < 0) {
    operator delete(*(void **)(a1 + 192));
  }
  uint64_t v4 = *(void *)(a1 + 168);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 176);
    size_t v6 = *(void **)(a1 + 168);
    if (v5 != v4)
    {
      do
      {
        v5 -= 272;
        std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(v5);
      }
      while (v5 != v4);
      size_t v6 = *(void **)(a1 + 168);
    }
    *(void *)(a1 + 176) = v4;
    operator delete(v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 160);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  operator delete((void *)a1);
}

void std::__optional_destruct_base<std::expected<AMSCore::AuthenticateResult,AMSCore::Error>,false>::reset[abi:fe180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80))
  {
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
      if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
      uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
      if (v3)
      {
        if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    else
    {
      (**(void (***)(uint64_t))a1)(a1);
    }
    *(unsigned char *)(a1 + 80) = 0;
  }
}

void AMSCore::Task<AMSCore::AuthenticateResult,AMSCore::Error>::Promise::unhandled_exception()
{
  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

uint64_t sub_18DAF5AC8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, long long a19, uint64_t a20,uint64_t a21,uint64_t a22,long long a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v41, (uint64_t)v38);
  std::__optional_destruct_base<std::expected<AMSCore::AuthenticateResult,AMSCore::Error>,false>::reset[abi:fe180100]((uint64_t)v30);
  std::runtime_error::runtime_error(v30, v41);
  std::runtime_error v31 = v41[1];
  char v33 = v42;
  uint64_t v32 = v43;
  *(void *)(v29 + 48) = v43;
  uint64_t v34 = v29 + 48;
  *(std::runtime_error *)(v29 + 24) = v31;
  *(void *)(v29 + 8) = &unk_1EDC827D8;
  uint64_t v35 = v44;
  *(void *)(v29 + 40) = v33;
  *(void *)(v29 + 56) = v35;
  if (v35)
  {
    *(void *)(v32 + 16) = v34;
    unint64_t v42 = &v43;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v32 = 0;
  }
  else
  {
    *(void *)(v29 + 40) = v34;
  }
  *(_OWORD *)(v29 + 64) = v45;
  long long v45 = 0uLL;
  *(unsigned char *)(v29 + 80) = 0;
  *(unsigned char *)(v29 + 88) = 1;
  v41[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v42, (unsigned int *)v32);
  MEMORY[0x192FA3C30](v41);
  v38[0] = &unk_1EDC827D8;
  uint64_t v36 = v40;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v39, v39[1]);
  return MEMORY[0x192FA3C30](v38);
}

uint64_t AMSCore::Task<AMSCore::AuthenticateResult,AMSCore::Error>::ValuePromise::~ValuePromise(uint64_t a1)
{
  uint64_t v2 = a1 + 104;
  uint64_t v3 = *(void *)(a1 + 128);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  std::__optional_destruct_base<std::expected<AMSCore::AuthenticateResult,AMSCore::Error>,false>::~__optional_destruct_base[abi:fe180100](a1 + 8);
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<std::expected<AMSCore::AuthenticateResult,AMSCore::Error>,false>::~__optional_destruct_base[abi:fe180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80))
  {
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
      if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
      uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
      if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    else
    {
      (**(void (***)(uint64_t))a1)(a1);
    }
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::AuthenticateResult,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::AuthenticateResult,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::AuthenticateResult,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINS_18AuthenticateResultENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINS_18AuthenticateResultENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINS_18AuthenticateResultENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINS_18AuthenticateResultENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::AuthenticateResult,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::AuthenticateResult,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::AuthenticateResult,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 96), 2uLL)) {
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::Task<AMSCore::AuthenticateResult,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::AuthenticateResult,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::AuthenticateResult,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void AMSCore::FinanceRequestHandler::handleResponse(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v8 = operator new(0x768uLL);
  void *v8 = AMSCore::FinanceRequestHandler::handleResponse;
  v8[1] = AMSCore::FinanceRequestHandler::handleResponse;
  v8[221] = a1;
  uint64_t v9 = a2[1];
  v8[222] = *a2;
  v8[223] = v9;
  *a2 = 0;
  a2[1] = 0;
  uint64_t v10 = a3[1];
  v8[224] = *a3;
  v8[225] = v10;
  *a3 = 0;
  a3[1] = 0;
  *((_OWORD *)v8 + 113) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *((unsigned char *)v8 + 24) = 0;
  *((unsigned char *)v8 + 488) = 0;
  v8[62] = 0;
  v8[66] = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,void>(&v11, (uint64_t)(v8 + 2));
}

void sub_18DAF8FC0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  AMSCore::Error::~Error((AMSCore::Error *)&a32);
  std::expected<AMSCore::URL,AMSCore::Error>::~expected[abi:fe180100]((AMSCore::URL *)&a41);
  if (a67 && a66 < 0) {
    operator delete(__p);
  }
  std::expected<AMSCore::AuthenticateResult,AMSCore::Error>::~expected[abi:fe180100](a31);
  AMSCore::AuthenticateRequest::~AuthenticateRequest(v69);
  if (*(char *)(v67 + 1551) < 0) {
    operator delete(*v68);
  }
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a25);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::FinanceRequestHandler::handleResponse(unint64_t a1)
{
  uint64_t v1 = a1 + 536;
  int v116 = (AMSCore::URL *)(a1 + 1000);
  uint64_t v117 = (std::runtime_error *)(a1 + 1360);
  std::string::size_type v108 = (long long *)(a1 + 1440);
  unint64_t v109 = a1 + 1248;
  v110 = (void *)(a1 + 1480);
  unint64_t v111 = a1 + 1504;
  char v112 = (unsigned char *)(a1 + 1890);
  uint64_t v2 = (void **)(a1 + 1528);
  unint64_t v3 = (void *)(a1 + 1576);
  uint64_t v4 = (void *)(a1 + 1608);
  v106 = (void *)(a1 + 1592);
  unint64_t v107 = a1 + 1624;
  uint64_t v5 = (void *)(a1 + 1640);
  size_t v6 = (void *)(a1 + 1656);
  uint64_t v7 = a1 + 1704;
  uint64_t v114 = a1 + 1736;
  unint64_t v115 = (void *)(a1 + 1720);
  uint64_t v113 = a1 + 1752;
  unint64_t v8 = a1 + 16;
  switch(*(unsigned char *)(a1 + 1890))
  {
    case 1:
      uint64_t v29 = *(void *)(a1 + 1840);
      if (!*(unsigned char *)(v29 + 472)) {
        goto LABEL_244;
      }
      AMSCore::HTTPResponseAction::HTTPResponseAction(v1, v29 + 8);
      uint64_t v30 = *(void *)(a1 + 1848);
      if (v30 && !atomic_fetch_add((atomic_ullong *volatile)(v30 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        std::runtime_error v31 = *(std::__shared_weak_count **)(a1 + 1848);
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
      uint64_t v32 = *(std::__shared_weak_count **)(a1 + 1368);
      if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
      char v33 = *(std::__shared_weak_count **)(a1 + 1584);
      if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
      uint64_t v34 = *(std::__shared_weak_count **)(a1 + 1648);
      if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
      uint64_t v35 = *(std::__shared_weak_count **)(a1 + 1664);
      if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
      if (*(unsigned char *)(a1 + 992) != 1)
      {
        if (*(unsigned char *)(a1 + 488))
        {
          AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(a1 + 24));
          *(unsigned char *)(a1 + 488) = 0;
        }
        AMSCore::HTTPResponseAction::HTTPResponseAction(a1 + 24, v1);
        *(unsigned char *)(a1 + 488) = 1;
        AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v1);
        if ((*(char *)(a1 + 1551) & 0x80000000) == 0) {
          goto LABEL_237;
        }
        goto LABEL_236;
      }
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v1);
      uint64_t v36 = *(void *)(a1 + 1776);
      if (*(_WORD *)(v36 + 152) != 401) {
        goto LABEL_80;
      }
      v120.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
      *(_OWORD *)&v120.__r_.__value_.__r.__words[1] = xmmword_18DDE9B50;
      strcpy(v120.__r_.__value_.__l.__data_, "X-Apple-Allow-Auth-Types");
      AMSCore::IHTTPHeaderMap::getSingleValueOrNone(&__p, (void *)(v36 + 160), (char *)&v120);
      int v38 = v139;
      if (v139 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v120.__r_.__value_.__l.__data_);
      }
      uint64_t v36 = *(void *)(a1 + 1776);
      if (!v38)
      {
LABEL_80:
        uint64_t v40 = *(void *)(a1 + 1784);
        *(void *)(a1 + 1704) = v36;
        *(void *)(a1 + 1712) = v40;
        if (v40) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v41 = *(void *)(a1 + 1800);
        *(void *)(a1 + 1720) = *(void *)(a1 + 1792);
        *(void *)(a1 + 1728) = v41;
        if (v41) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v42 = *(void *)(a1 + 1808);
        *(void *)(a1 + 1736) = *(void *)(v42 + 24);
        uint64_t v43 = *(void *)(v42 + 32);
        *(void *)(a1 + 1744) = v43;
        if (v43) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v43 + 8), 1uLL, memory_order_relaxed);
        }
        *(void *)(a1 + 1752) = *(void *)(a1 + 1608);
        *(void *)(a1 + 1760) = *(void *)(a1 + 1616);
        void *v4 = 0;
        v4[1] = 0;
        AMSCore::AnisetteUtils::handleActions((uint64_t)v117, v7, v115, v114, v113);
      }
      unsigned __int16 AuthenticateRequestTypeForResponse = AMSCore::FinanceResponse::getAuthenticateRequestTypeForResponse(*(AMSCore::FinanceResponse **)(a1 + 1776), v37);
      *(_WORD *)(a1 + 1888) = AuthenticateRequestTypeForResponse;
      if (AuthenticateRequestTypeForResponse <= 0xFFu)
      {
        uint64_t v36 = *(void *)(a1 + 1776);
        goto LABEL_80;
      }
      uint64_t v52 = *(void *)(a1 + 1800);
      *(void *)(a1 + 1592) = *(void *)(a1 + 1792);
      *(void *)(a1 + 1600) = v52;
      if (v52) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v52 + 8), 1uLL, memory_order_relaxed);
      }
      long long v53 = *(_OWORD *)(v1 + 1056);
      void *v106 = 0;
      v106[1] = 0;
      *(unsigned char *)(a1 + 600) = 0;
      *(unsigned char *)(a1 + 608) = 0;
      *(unsigned char *)(a1 + 632) = 0;
      *(void *)(a1 + 560) = 0;
      *(void *)(a1 + 552) = 0;
      *(void *)(a1 + 568) = 0;
      *(unsigned char *)(a1 + 576) = 0;
      *(unsigned char *)(a1 + 640) = AuthenticateRequestTypeForResponse;
      *(_OWORD *)(a1 + 1248) = v53;
      *(unsigned char *)(a1 + 1312) = 0;
      *(_OWORD *)uint64_t v1 = 0u;
      *(_OWORD *)(v1 + 16) = 0u;
      *(void *)(v1 + 32) = 0;
      *(void *)(a1 + 1272) = 0;
      *(void *)(a1 + 1264) = 0;
      *(unsigned char *)(a1 + 1288) = 0;
      *(void *)(a1 + 1280) = 0;
      *(unsigned char *)(a1 + 1320) = 0;
      *(unsigned char *)(a1 + 1344) = 0;
      uint64_t v54 = *(void *)(a1 + 1768);
      *(unsigned char *)(a1 + 1352) = AuthenticateRequestTypeForResponse;
      (*(void (**)(uint64_t, unint64_t))(*(void *)v54 + 48))(v54, v109);
      long long v55 = *(_OWORD *)v107;
      *(_OWORD *)(a1 + 1856) = *(_OWORD *)v107;
      *(void *)unint64_t v107 = 0;
      *(void *)(v107 + 8) = 0;
      if (atomic_load_explicit((atomic_ullong *volatile)(v55 + 96), memory_order_acquire)
        || (unsigned char *v112 = 2, atomic_exchange((atomic_ullong *volatile)(*(void *)(a1 + 1856) + 96), a1)))
      {
LABEL_115:
        uint64_t v56 = *(void *)(a1 + 1856);
        if (!*(unsigned char *)(v56 + 88)) {
          goto LABEL_244;
        }
        uint64_t v57 = (const std::runtime_error *)(v56 + 8);
        char v58 = *(unsigned char *)(v56 + 80);
        uint64_t v59 = v56 + 24;
        if (v58)
        {
          *(_OWORD *)(a1 + 1360) = *(_OWORD *)(v56 + 8);
          v57->__vftable = 0;
          *(void *)(v56 + 16) = 0;
          *(void *)(a1 + 1376) = *(void *)(v56 + 24);
          long long v60 = (void *)(a1 + 1384);
          unsigned int v61 = (void *)(v56 + 32);
          uint64_t v62 = v117;
        }
        else
        {
          uint64_t v62 = v117;
          std::runtime_error::runtime_error(v117, v57);
          *(_OWORD *)(a1 + 1376) = *(_OWORD *)v59;
          *(void *)(a1 + 1360) = &unk_1EDC827D8;
          uint64_t v63 = (void *)(v56 + 48);
          uint64_t v64 = *(void *)(v56 + 48);
          *(void *)(a1 + 1392) = *(void *)(v56 + 40);
          unint64_t v65 = a1 + 1400;
          *(void *)(a1 + 1400) = v64;
          uint64_t v66 = *(void *)(v56 + 56);
          *(void *)(a1 + 1408) = v66;
          if (v66)
          {
            *(void *)(v64 + 16) = v65;
            *(void *)(v56 + 40) = v63;
            void *v63 = 0;
            *(void *)(v56 + 56) = 0;
          }
          else
          {
            *(void *)(a1 + 1392) = v65;
          }
          uint64_t v67 = *(void *)(a1 + 1856);
          uint64_t v68 = *(void *)(v67 + 64);
          uint64_t v59 = v67 + 64;
          *(void *)(a1 + 1416) = v68;
          long long v60 = (void *)(a1 + 1424);
          unsigned int v61 = (void *)(v59 + 8);
        }
        *long long v60 = *v61;
        *(void *)uint64_t v59 = 0;
        *(void *)(v59 + 8) = 0;
        *(unsigned char *)(a1 + 1432) = v58;
        uint64_t v69 = *(void *)(a1 + 1864);
        if (v69 && !atomic_fetch_add((atomic_ullong *volatile)(v69 + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          uint64_t v70 = *(std::__shared_weak_count **)(a1 + 1864);
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
        BOOL v71 = *(std::__shared_weak_count **)(a1 + 1632);
        if (v71 && !atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
        if (*(unsigned char *)(a1 + 1344) && *(char *)(a1 + 1343) < 0) {
          operator delete(*(void **)(a1 + 1320));
        }
        if (*(unsigned char *)(a1 + 1312) && *(char *)(a1 + 1311) < 0) {
          operator delete(*(void **)(a1 + 1288));
        }
        uint64_t v72 = *(void *)(a1 + 1264);
        if (v72)
        {
          uint64_t v73 = *(void *)(a1 + 1272);
          BOOL v74 = *(void **)(a1 + 1264);
          if (v73 != v72)
          {
            do
            {
              v73 -= 272;
              std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(v73);
            }
            while (v73 != v72);
            BOOL v74 = *(void **)(a1 + 1264);
          }
          *(void *)(a1 + 1272) = v72;
          operator delete(v74);
        }
        uint64_t v75 = *(std::__shared_weak_count **)(a1 + 1256);
        if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
          if (*(unsigned char *)(a1 + 1432))
          {
LABEL_142:
            *(_WORD *)(*(void *)(a1 + 1768) + 8) = *(_WORD *)(a1 + 1888);
            *((unsigned char *)&__p.__r_.__value_.__s + 23) = 8;
            strcpy((char *)&__p, "Location");
            AMSCore::IHTTPHeaderMap::getSingleValueOrNone(&v118, (void *)(*(void *)(a1 + 1776) + 160), (char *)&__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__p.__r_.__value_.__l.__data_);
              if (v119) {
                goto LABEL_144;
              }
            }
            else if (v119)
            {
LABEL_144:
              if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string v76 = &v118;
              }
              else {
                std::string v76 = (std::string *)v118.__r_.__value_.__r.__words[0];
              }
              if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(v118.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = v118.__r_.__value_.__l.__size_;
              }
              AMSCore::URL::parse((uint64_t)v76, size, (uint64_t)&v120);
              if (!v134)
              {
                AMSCore::Error::Error<char [35],AMSCore::Error>((uint64_t)v135, 301, (const std::error_category *)&AMSCore::Error::Category::network(void)::instance, (uint64_t)&v120);
                AMSCore::HTTPResponseAction::createCancelAction((AMSCore::HTTPResponseAction *)&__p, v135);
                long long v97 = (AMSCore::HTTPResponseAction *)(a1 + 24);
                if (*(unsigned char *)(a1 + 488))
                {
                  AMSCore::HTTPResponseAction::~HTTPResponseAction(v97);
                  *(unsigned char *)(a1 + 488) = 0;
                }
                AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v97, (uint64_t)&__p);
                *(unsigned char *)(a1 + 488) = 1;
                AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&__p);
                v135[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
                uint64_t v98 = v137;
                if (v137 && !atomic_fetch_add(&v137->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                  std::__shared_weak_count::__release_weak(v98);
                }
                std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v136, v136[1]);
                MEMORY[0x192FA3C30](v135);
                if (v134)
                {
LABEL_179:
                  AMSCore::URL::~URL((AMSCore::URL *)&v120);
                  if (!v119) {
                    goto LABEL_214;
                  }
LABEL_211:
                  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
                  {
                    char v96 = (void *)v118.__r_.__value_.__r.__words[0];
LABEL_213:
                    operator delete(v96);
                  }
LABEL_214:
                  if (*(unsigned char *)(a1 + 1432))
                  {
                    char v99 = *(std::__shared_weak_count **)(a1 + 1384);
                    if (v99 && !atomic_fetch_add(&v99->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                      std::__shared_weak_count::__release_weak(v99);
                    }
                    char v100 = *(std::__shared_weak_count **)(a1 + 1368);
                    if (v100 && !atomic_fetch_add(&v100->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                      std::__shared_weak_count::__release_weak(v100);
                    }
                  }
                  else
                  {
                    ((void (*)(const std::runtime_error *))v62->~runtime_error)(v62);
                  }
                  if (*(unsigned char *)(a1 + 632) && *(char *)(a1 + 631) < 0) {
                    operator delete(*(void **)(a1 + 608));
                  }
                  if (*(unsigned char *)(a1 + 600) && *(char *)(a1 + 599) < 0) {
                    operator delete(*(void **)(a1 + 576));
                  }
                  uint64_t v101 = *(void *)(a1 + 552);
                  if (v101)
                  {
                    uint64_t v102 = *(void *)(a1 + 560);
                    uint64_t v103 = *(void **)(a1 + 552);
                    if (v102 != v101)
                    {
                      do
                      {
                        v102 -= 272;
                        std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(v102);
                      }
                      while (v102 != v101);
                      uint64_t v103 = *(void **)(a1 + 552);
                    }
                    *(void *)(a1 + 560) = v101;
                    operator delete(v103);
                  }
                  uint64_t v51 = *(std::__shared_weak_count **)(a1 + 544);
                  if (!v51)
                  {
LABEL_235:
                    if ((*(char *)(a1 + 1551) & 0x80000000) == 0) {
                      goto LABEL_237;
                    }
                    goto LABEL_236;
                  }
LABEL_234:
                  if (atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
                    goto LABEL_235;
                  }
                  ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                  std::__shared_weak_count::__release_weak(v51);
                  if ((*(char *)(a1 + 1551) & 0x80000000) == 0)
                  {
LABEL_237:
                    uint64_t v104 = *(std::__shared_weak_count **)(a1 + 1616);
                    if (v104 && !atomic_fetch_add(&v104->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                      std::__shared_weak_count::__release_weak(v104);
                    }
                    *(void *)(a1 + 536) = v8;
                    *(void *)a1 = 0;
                    AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(v1);
                    return;
                  }
LABEL_236:
                  operator delete(*v2);
                  goto LABEL_237;
                }
LABEL_210:
                (*(void (**)(std::string *))v120.__r_.__value_.__l.__data_)(&v120);
                if (!v119) {
                  goto LABEL_214;
                }
                goto LABEL_211;
              }
              *(unsigned char *)(a1 + 1000) = 0;
              *(unsigned char *)(a1 + 1024) = 0;
              if (v121)
              {
                *(std::string *)int v116 = v120;
                memset(&v120, 0, sizeof(v120));
                *(unsigned char *)(a1 + 1024) = 1;
              }
              *(unsigned char *)(a1 + 1032) = 0;
              *(unsigned char *)(a1 + 1056) = 0;
              if (v124)
              {
                *(_OWORD *)(a1 + 1032) = v122;
                *(void *)(a1 + 1048) = v123;
                uint64_t v123 = 0;
                long long v122 = 0uLL;
                *(unsigned char *)(a1 + 1056) = 1;
              }
              *(unsigned char *)(a1 + 1064) = 0;
              *(unsigned char *)(a1 + 1088) = 0;
              if (v127)
              {
                *(_OWORD *)(a1 + 1064) = v125;
                *(void *)(a1 + 1080) = v126;
                uint64_t v126 = 0;
                long long v125 = 0uLL;
                *(unsigned char *)(a1 + 1088) = 1;
              }
              *(_DWORD *)(a1 + 1096) = v128;
              *(void *)(a1 + 1104) = a1 + 1104;
              *(void *)(a1 + 1112) = a1 + 1104;
              *(void *)(a1 + 1120) = 0;
              if (v116 != (AMSCore::URL *)&v120)
              {
                uint64_t v78 = v131;
                if (v131)
                {
                  uint64_t v80 = v129;
                  uint64_t v79 = v130;
                  uint64_t v81 = *v130;
                  *(void *)(v81 + 8) = *(void *)(v129 + 8);
                  **(void **)(v80 + 8) = v81;
                  uint64_t v82 = *(void *)(a1 + 1104);
                  *(void *)(v82 + 8) = v79;
                  void *v79 = v82;
                  *(void *)(a1 + 1104) = v80;
                  *(void *)(v80 + 8) = a1 + 1104;
                  *(void *)(a1 + 1120) = v78;
                  uint64_t v131 = 0;
                }
                *(void *)(a1 + 1144) = v133;
                *(_OWORD *)(a1 + 1128) = v132;
                uint64_t v133 = 0;
                long long v132 = 0uLL;
                *(unsigned char *)(a1 + 1152) = 0;
                *(unsigned char *)(a1 + 1156) = 0;
                *(unsigned char *)(a1 + 1160) = 0;
                *(unsigned char *)(a1 + 1192) = 0;
                *(_WORD *)(a1 + 1200) = 0;
                if (*(unsigned char *)(a1 + 1432))
                {
                  *(void *)(a1 + 1208) = *(void *)(a1 + 1360);
                  uint64_t v83 = *(void *)(a1 + 1368);
                  *(void *)(a1 + 1216) = v83;
                  if (v83) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v83 + 8), 1uLL, memory_order_relaxed);
                  }
                  *(void *)(a1 + 1224) = *(void *)(a1 + 1376);
                  uint64_t v84 = *(void *)(a1 + 1384);
                  *(void *)(a1 + 1232) = v84;
                  if (v84) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v84 + 8), 1uLL, memory_order_relaxed);
                  }
                  *(unsigned char *)(a1 + 1240) = 1;
                  AMSCore::HTTPResponseAction::createRedirectAction((uint64_t)&__p, (uint64_t)v116);
                  char v85 = (AMSCore::HTTPResponseAction *)(a1 + 24);
                  if (*(unsigned char *)(a1 + 488))
                  {
                    AMSCore::HTTPResponseAction::~HTTPResponseAction(v85);
                    *(unsigned char *)(a1 + 488) = 0;
                  }
                  AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v85, (uint64_t)&__p);
                  *(unsigned char *)(a1 + 488) = 1;
                  AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&__p);
                  if (*(unsigned char *)(a1 + 1240))
                  {
                    char v86 = *(std::__shared_weak_count **)(a1 + 1232);
                    if (v86 && !atomic_fetch_add(&v86->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                      std::__shared_weak_count::__release_weak(v86);
                    }
                    char v87 = *(std::__shared_weak_count **)(a1 + 1216);
                    if (v87 && !atomic_fetch_add(&v87->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                      std::__shared_weak_count::__release_weak(v87);
                    }
                  }
                  if (*(unsigned char *)(a1 + 1192))
                  {
                    uint64_t v88 = *(unsigned int *)(a1 + 1184);
                    if (v88 != -1) {
                      ((void (*)(std::runtime_error *, unint64_t))off_1EDCA5F28[v88])(v135, a1 + 1160);
                    }
                    *(_DWORD *)(a1 + 1184) = -1;
                  }
                  AMSCore::URL::~URL(v116);
                  if (v134) {
                    goto LABEL_179;
                  }
                  goto LABEL_210;
                }
              }
LABEL_244:
              __break(1u);
              return;
            }
            *(unsigned char *)(a1 + 1527) = 12;
            *(_DWORD *)(v111 + 8) = 1702125923;
            *(void *)unint64_t v111 = *(void *)"authenticate";
            *(unsigned char *)(a1 + 1516) = 0;
            *(unsigned char *)(a1 + 1503) = 14;
            qmemcpy(v110, "authentication", 14);
            *(unsigned char *)(a1 + 1494) = 0;
            if (*(unsigned char *)(a1 + 1432))
            {
              *(void *)(a1 + 1440) = *(void *)(a1 + 1360);
              uint64_t v90 = *(void *)(a1 + 1368);
              *(void *)(a1 + 1448) = v90;
              if (v90) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v90 + 8), 1uLL, memory_order_relaxed);
              }
              *(void *)(a1 + 1456) = *(void *)(a1 + 1376);
              uint64_t v91 = *(void *)(a1 + 1384);
              *(void *)(a1 + 1464) = v91;
              if (v91) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v91 + 8), 1uLL, memory_order_relaxed);
              }
              *(unsigned char *)(a1 + 1472) = 1;
              __p.__r_.__value_.__s.__data_[0] = 0;
              unsigned __int8 v139 = 0;
              char v140 = 0;
              char v141 = 0;
              char v142 = 0;
              char v143 = 0;
              char v144 = 0;
              char v145 = 0;
              char v146 = 0;
              char v147 = 0;
              char v148 = 0;
              char v149 = 0;
              __int16 v150 = 0;
              v157[0] = 0;
              v157[32] = 0;
              v157[40] = 3;
              long long v92 = *(_OWORD *)v111;
              uint64_t v152 = *(void *)(v111 + 16);
              long long v151 = v92;
              *(void *)unint64_t v111 = 0;
              *(void *)(v111 + 8) = 0;
              *(void *)(v111 + 16) = 0;
              char v153 = 1;
              long long v154 = *(_OWORD *)v110;
              uint64_t v155 = v110[2];
              void *v110 = 0;
              v110[1] = 0;
              v110[2] = 0;
              char v156 = 1;
              std::__optional_storage_base<AMSCore::AuthenticateResult,false>::__assign_from[abi:fe180100]<std::__optional_move_assign_base<AMSCore::AuthenticateResult,false>>((uint64_t)v157, v108);
              __int16 v93 = (AMSCore::HTTPResponseAction *)(a1 + 24);
              if (*(unsigned char *)(a1 + 488))
              {
                AMSCore::HTTPResponseAction::~HTTPResponseAction(v93);
                *(unsigned char *)(a1 + 488) = 0;
              }
              AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v93, (uint64_t)&__p);
              *(unsigned char *)(a1 + 488) = 1;
              AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&__p);
              if (*(unsigned char *)(a1 + 1472))
              {
                long long v94 = *(std::__shared_weak_count **)(a1 + 1464);
                if (v94 && !atomic_fetch_add(&v94->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                  std::__shared_weak_count::__release_weak(v94);
                }
                uint64_t v95 = *(std::__shared_weak_count **)(a1 + 1448);
                if (v95 && !atomic_fetch_add(&v95->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                  std::__shared_weak_count::__release_weak(v95);
                }
              }
              if (*(char *)(a1 + 1503) < 0) {
                operator delete((void *)*v110);
              }
              if ((*(char *)(a1 + 1527) & 0x80000000) == 0) {
                goto LABEL_214;
              }
              char v96 = *(void **)v111;
              goto LABEL_213;
            }
            goto LABEL_244;
          }
        }
        else if (*(unsigned char *)(a1 + 1432))
        {
          goto LABEL_142;
        }
        AMSCore::HTTPResponseAction::createCancelAction((AMSCore::HTTPResponseAction *)&__p, v62);
        char v89 = (AMSCore::HTTPResponseAction *)(a1 + 24);
        if (*(unsigned char *)(a1 + 488))
        {
          AMSCore::HTTPResponseAction::~HTTPResponseAction(v89);
          *(unsigned char *)(a1 + 488) = 0;
        }
        AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v89, (uint64_t)&__p);
        *(unsigned char *)(a1 + 488) = 1;
        AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)&__p);
        goto LABEL_214;
      }
      return;
    case 2:
      goto LABEL_115;
    case 3:
      uint64_t v44 = *(void *)(a1 + 1872);
      if (!*(unsigned char *)(v44 + 472)) {
        goto LABEL_244;
      }
      AMSCore::HTTPResponseAction::HTTPResponseAction(v1, v44 + 8);
      if (*(unsigned char *)(a1 + 488))
      {
        AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(a1 + 24));
        *(unsigned char *)(a1 + 488) = 0;
      }
      AMSCore::HTTPResponseAction::HTTPResponseAction(a1 + 24, v1);
      *(unsigned char *)(a1 + 488) = 1;
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v1);
      uint64_t v45 = *(void *)(a1 + 1880);
      if (v45 && !atomic_fetch_add((atomic_ullong *volatile)(v45 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v46 = *(std::__shared_weak_count **)(a1 + 1880);
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
      uint64_t v47 = *(std::__shared_weak_count **)(a1 + 1368);
      if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
      size_t v48 = *(std::__shared_weak_count **)(a1 + 1760);
      if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
      int v49 = *(std::__shared_weak_count **)(a1 + 1744);
      if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
      uint64_t v50 = *(std::__shared_weak_count **)(a1 + 1728);
      if (v50 && !atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
      uint64_t v51 = *(std::__shared_weak_count **)(a1 + 1712);
      if (!v51) {
        goto LABEL_235;
      }
      goto LABEL_234;
    default:
      unint64_t v105 = a1 + 1528;
      uint64_t v10 = *(void *)(a1 + 1824);
      if (!*(unsigned char *)(v10 + 88)) {
        goto LABEL_244;
      }
      char v11 = *(unsigned char *)(v10 + 80);
      if (!v11)
      {
        std::runtime_error::runtime_error((std::runtime_error *)(a1 + 536), (const std::runtime_error *)(v10 + 8));
        *(_OWORD *)(a1 + 552) = *(_OWORD *)(v10 + 24);
        *(void *)(a1 + 536) = &unk_1EDC827D8;
        std::system_error v12 = (void *)(v10 + 48);
        uint64_t v13 = *(void *)(v10 + 48);
        *(void *)(a1 + 568) = *(void *)(v10 + 40);
        unint64_t v14 = a1 + 576;
        *(void *)(a1 + 576) = v13;
        uint64_t v15 = *(void *)(v10 + 56);
        *(void *)(a1 + 584) = v15;
        if (v15)
        {
          *(void *)(v13 + 16) = v14;
          *(void *)(v10 + 40) = v12;
          void *v12 = 0;
          *(void *)(v10 + 56) = 0;
        }
        else
        {
          *(void *)(a1 + 568) = v14;
        }
        uint64_t v16 = *(void *)(a1 + 1824);
        *(_OWORD *)(a1 + 592) = *(_OWORD *)(v16 + 64);
        *(void *)(v16 + 64) = 0;
        *(void *)(v16 + 72) = 0;
      }
      *(unsigned char *)(a1 + 608) = v11;
      uint64_t v17 = *(void *)(a1 + 1832);
      if (v17 && !atomic_fetch_add((atomic_ullong *volatile)(v17 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        char v18 = *(std::__shared_weak_count **)(a1 + 1832);
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      uint64_t v19 = *(std::__shared_weak_count **)(a1 + 1368);
      if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      if (*(char *)(a1 + 1575) < 0) {
        operator delete(*(void **)(a1 + 1552));
      }
      std::error_code v20 = *(std::__shared_weak_count **)(a1 + 1680);
      if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
        size_t v21 = *(std::__shared_weak_count **)(a1 + 1696);
        if (!v21) {
          goto LABEL_20;
        }
      }
      else
      {
        size_t v21 = *(std::__shared_weak_count **)(a1 + 1696);
        if (!v21) {
          goto LABEL_20;
        }
      }
      if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
        if (*(unsigned char *)(a1 + 608)) {
          goto LABEL_29;
        }
        goto LABEL_21;
      }
LABEL_20:
      if (*(unsigned char *)(a1 + 608)) {
        goto LABEL_29;
      }
LABEL_21:
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&__p);
      AMSCore::Logger::log<char [41],AMSCore::Error>((uint64_t)__p.__r_.__value_.__l.__data_, 4u, (uint64_t)"networking", 10, "Failed to process finance cookie headers", v1);
      uint64_t v22 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_
        && !atomic_fetch_add((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
      if (!*(unsigned char *)(a1 + 608)) {
        (**(void (***)(uint64_t))v1)(v1);
      }
LABEL_29:
      uint64_t v23 = (char *)operator new(0x19uLL);
      uint64_t v24 = *(void *)(a1 + 1776);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_18DDE9B20;
      strcpy(v23, "X-Set-Apple-Store-Front");
      AMSCore::IHTTPHeaderMap::getSingleValueOrNone(&v120, (void *)(v24 + 160), (char *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v121) {
          goto LABEL_47;
        }
      }
      else if (!v121)
      {
        goto LABEL_47;
      }
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&__p);
      AMSCore::Logger::log<char [46],std::string>((uint64_t)__p.__r_.__value_.__l.__data_, 2u, (uint64_t)"networking", 10, "Received an updated storefront. storefront = ", (uint64_t)&v120);
      char v25 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_
        && !atomic_fetch_add((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
      __p.__r_.__value_.__s.__data_[0] = 0;
      unsigned __int8 v139 = 0;
      if (v121)
      {
        if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&__p, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = v120;
        }
        unsigned __int8 v139 = 1;
      }
      (*(void (**)(void, std::string *, unint64_t))(**(void **)(a1 + 1792) + 160))(*(void *)(a1 + 1792), &__p, v105);
      if (v139 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v121 && SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v120.__r_.__value_.__l.__data_);
      }
LABEL_47:
      uint64_t v26 = *(void *)(a1 + 1784);
      *(void *)(a1 + 1656) = *(void *)(a1 + 1776);
      *(void *)(a1 + 1664) = v26;
      if (v26) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v27 = *(void *)(a1 + 1800);
      *(void *)(a1 + 1640) = *(void *)(a1 + 1792);
      *(void *)(a1 + 1648) = v27;
      if (v27) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v28 = *(void *)(a1 + 1816);
      *(void *)(a1 + 1576) = *(void *)(a1 + 1808);
      *(void *)(a1 + 1584) = v28;
      if (v28) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
      }
      AMSCore::ExecuteHTTPRequestTask::IHandler::handleResponse((uint64_t)v117, v6, v5, v3);
  }
}

void sub_18DAFA9F8(void *a1)
{
  uint64_t v7 = v2;
  AMSCore::AuthenticateRequest::~AuthenticateRequest(v4);
  AMSCore::AuthenticateRequest::~AuthenticateRequest(v3);
  if (*(char *)(v1 + 1551) < 0) {
    operator delete(*v5);
  }
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v7);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::FinanceRequestHandler::handleResponse(char *__p)
{
  if (*(void *)__p)
  {
    switch(__p[1890])
    {
      case 1:
        uint64_t v23 = *((void *)__p + 231);
        if (v23 && !atomic_fetch_add((atomic_ullong *volatile)(v23 + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          uint64_t v24 = (std::__shared_weak_count *)*((void *)__p + 231);
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
        char v25 = (std::__shared_weak_count *)*((void *)__p + 171);
        if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
        uint64_t v26 = (std::__shared_weak_count *)*((void *)__p + 198);
        if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
        uint64_t v27 = (std::__shared_weak_count *)*((void *)__p + 206);
        if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
        size_t v6 = (std::__shared_weak_count *)*((void *)__p + 208);
        if (!v6) {
          goto LABEL_80;
        }
        goto LABEL_79;
      case 2:
        uint64_t v7 = *((void *)__p + 233);
        if (v7 && !atomic_fetch_add((atomic_ullong *volatile)(v7 + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          unint64_t v8 = (std::__shared_weak_count *)*((void *)__p + 233);
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        uint64_t v9 = (std::__shared_weak_count *)*((void *)__p + 204);
        if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        if (__p[1344] && __p[1343] < 0) {
          operator delete(*((void **)__p + 165));
        }
        if (__p[1312] && __p[1311] < 0) {
          operator delete(*((void **)__p + 161));
        }
        uint64_t v10 = *((void *)__p + 158);
        if (v10)
        {
          uint64_t v11 = *((void *)__p + 159);
          std::system_error v12 = (void *)*((void *)__p + 158);
          if (v11 != v10)
          {
            do
            {
              v11 -= 272;
              std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(v11);
            }
            while (v11 != v10);
            std::system_error v12 = (void *)*((void *)__p + 158);
          }
          *((void *)__p + 159) = v10;
          operator delete(v12);
        }
        uint64_t v13 = (std::__shared_weak_count *)*((void *)__p + 157);
        if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        if (__p[632] && __p[631] < 0) {
          operator delete(*((void **)__p + 76));
        }
        if (__p[600] && __p[599] < 0) {
          operator delete(*((void **)__p + 72));
        }
        uint64_t v14 = *((void *)__p + 69);
        if (v14)
        {
          uint64_t v15 = *((void *)__p + 70);
          uint64_t v16 = (void *)*((void *)__p + 69);
          if (v15 != v14)
          {
            do
            {
              v15 -= 272;
              std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(v15);
            }
            while (v15 != v14);
            uint64_t v16 = (void *)*((void *)__p + 69);
          }
          *((void *)__p + 70) = v14;
          operator delete(v16);
        }
        size_t v6 = (std::__shared_weak_count *)*((void *)__p + 68);
        if (!v6) {
          goto LABEL_80;
        }
        goto LABEL_79;
      case 3:
        uint64_t v17 = *((void *)__p + 235);
        if (v17 && !atomic_fetch_add((atomic_ullong *volatile)(v17 + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          char v18 = (std::__shared_weak_count *)*((void *)__p + 235);
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
        uint64_t v19 = (std::__shared_weak_count *)*((void *)__p + 171);
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
        std::error_code v20 = (std::__shared_weak_count *)*((void *)__p + 220);
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
        size_t v21 = (std::__shared_weak_count *)*((void *)__p + 218);
        if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
        uint64_t v22 = (std::__shared_weak_count *)*((void *)__p + 216);
        if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
        size_t v6 = (std::__shared_weak_count *)*((void *)__p + 214);
        if (!v6) {
          goto LABEL_80;
        }
        goto LABEL_79;
      default:
        uint64_t v2 = *((void *)__p + 229);
        if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          unint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 229);
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
        uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 171);
        if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        if (__p[1575] < 0) {
          operator delete(*((void **)__p + 194));
        }
        uint64_t v5 = (std::__shared_weak_count *)*((void *)__p + 210);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        size_t v6 = (std::__shared_weak_count *)*((void *)__p + 212);
        if (!v6) {
          goto LABEL_80;
        }
LABEL_79:
        if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
LABEL_80:
          if ((__p[1551] & 0x80000000) == 0) {
            goto LABEL_82;
          }
          goto LABEL_81;
        }
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        if (__p[1551] < 0) {
LABEL_81:
        }
          operator delete(*((void **)__p + 191));
LABEL_82:
        uint64_t v28 = (std::__shared_weak_count *)*((void *)__p + 202);
        if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
        break;
    }
  }
  uint64_t v29 = (char *)*((void *)__p + 66);
  if (v29 == __p + 504)
  {
    (*(void (**)(char *))(*((void *)__p + 63) + 32))(__p + 504);
    if (__p[488]) {
LABEL_89:
    }
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 24));
  }
  else
  {
    if (v29) {
      (*(void (**)(char *))(*(void *)v29 + 40))(v29);
    }
    if (__p[488]) {
      goto LABEL_89;
    }
  }
  uint64_t v30 = *((void *)__p + 227);
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v30 && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)__p + 227) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    std::runtime_error v31 = (std::__shared_weak_count *)*((void *)__p + 227);
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  uint64_t v32 = *((void *)__p + 225);
  if (v32 && !atomic_fetch_add((atomic_ullong *volatile)(v32 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    char v33 = (std::__shared_weak_count *)*((void *)__p + 225);
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  uint64_t v34 = *((void *)__p + 223);
  if (v34 && !atomic_fetch_add((atomic_ullong *volatile)(v34 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v35 = (std::__shared_weak_count *)*((void *)__p + 223);
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  operator delete(__p);
}

uint64_t AMSCore::URL::URL(uint64_t result, long long *a2)
{
  *(unsigned char *)__n128 result = 0;
  *(unsigned char *)(result + 24) = 0;
  if (*((unsigned char *)a2 + 24))
  {
    long long v2 = *a2;
    *(void *)(result + 16) = *((void *)a2 + 2);
    *(_OWORD *)__n128 result = v2;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(result + 24) = 1;
  }
  *(unsigned char *)(result + 32) = 0;
  *(unsigned char *)(result + 56) = 0;
  if (*((unsigned char *)a2 + 56))
  {
    long long v3 = a2[2];
    *(void *)(result + 48) = *((void *)a2 + 6);
    *(_OWORD *)(result + 32) = v3;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 4) = 0;
    *(unsigned char *)(result + 56) = 1;
  }
  *(unsigned char *)(result + 64) = 0;
  *(unsigned char *)(result + 88) = 0;
  if (*((unsigned char *)a2 + 88))
  {
    long long v4 = a2[4];
    *(void *)(result + 80) = *((void *)a2 + 10);
    *(_OWORD *)(result + 64) = v4;
    *((void *)a2 + 9) = 0;
    *((void *)a2 + 10) = 0;
    *((void *)a2 + 8) = 0;
    *(unsigned char *)(result + 88) = 1;
  }
  *(_DWORD *)(result + 96) = *((_DWORD *)a2 + 24);
  *(void *)(result + 104) = result + 104;
  *(void *)(result + 112) = result + 104;
  *(void *)(result + 120) = 0;
  if ((long long *)result == a2)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = *((void *)a2 + 15);
    if (v5)
    {
      uint64_t v7 = *((void *)a2 + 13);
      size_t v6 = (uint64_t *)*((void *)a2 + 14);
      uint64_t v8 = *v6;
      *(void *)(v8 + 8) = *(void *)(v7 + 8);
      **(void **)(v7 + 8) = v8;
      uint64_t v9 = *(void *)(result + 104);
      *(void *)(v9 + 8) = v6;
      uint64_t *v6 = v9;
      *(void *)(result + 104) = v7;
      *(void *)(v7 + 8) = result + 104;
      *(void *)(result + 120) = v5;
      *((void *)a2 + 15) = 0;
    }
    long long v10 = a2[8];
    *(void *)(result + 144) = *((void *)a2 + 18);
    *(_OWORD *)(result + 128) = v10;
    *((void *)a2 + 17) = 0;
    *((void *)a2 + 18) = 0;
    *((void *)a2 + 16) = 0;
  }
  return result;
}

void AMSCore::HTTPResponseAction::RedirectContext::~RedirectContext(AMSCore::HTTPResponseAction::RedirectContext *this)
{
  if (!*((unsigned char *)this + 240)) {
    goto LABEL_7;
  }
  long long v2 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  long long v3 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (!*((unsigned char *)this + 192)) {
      goto LABEL_11;
    }
  }
  else
  {
LABEL_7:
    if (!*((unsigned char *)this + 192)) {
      goto LABEL_11;
    }
  }
  uint64_t v4 = *((unsigned int *)this + 46);
  if (v4 != -1) {
    ((void (*)(char *, char *))off_1EDCA5F28[v4])(&v5, (char *)this + 160);
  }
  *((_DWORD *)this + 46) = -1;
LABEL_11:
  AMSCore::URL::~URL(this);
}

uint64_t AMSCore::Error::Error<char [35],AMSCore::Error>(uint64_t a1, uint64_t a2, const std::error_category *a3, uint64_t a4)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v10);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Redirect URL could not be parsed: ", 34);
  AMSCore::operator<<(&v10, a4);
  std::stringbuf::str[abi:fe180100]((uint64_t)v11, &v9);
  uint64_t v10 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v11[-1] + *(void *)(v10 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v11[0] = MEMORY[0x1E4FBA470] + 16;
  if (v12 < 0) {
    operator delete((void *)v11[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FA3FD0](&v13);
  *(void *)&v14.__val_ = a2;
  v14.__cat_ = a3;
  std::system_error::system_error((std::system_error *)a1, v14, &v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 40) = 0;
  *(void *)a1 = &unk_1EDC827D8;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_18DAFB7B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::processFinanceCookieHeaders(unint64_t a1)
{
  uint64_t v1 = a1 + 312;
  long long v2 = (std::runtime_error *)(a1 + 152);
  char v149 = (unsigned char *)(a1 + 791);
  __int16 v150 = (std::runtime_error *)(a1 + 232);
  long long v3 = (const AMSCore::IHTTPHeaderMap *)(a1 + 472);
  uint64_t v4 = (std::string *)(a1 + 512);
  char v5 = (uint64_t **)(a1 + 536);
  size_t v6 = (uint64_t **)(a1 + 560);
  long long v151 = (std::runtime_error *)(a1 + 392);
  uint64_t v152 = (uint64_t *)(a1 + 584);
  uint64_t v7 = (std::runtime_error_vtbl **)(a1 + 664);
  char v145 = (uint64_t *)(a1 + 680);
  char v146 = (void *)(a1 + 648);
  uint64_t v8 = (_DWORD *)(a1 + 784);
  char v147 = (uint64_t **)(a1 + 560);
  unint64_t v148 = a1 + 16;
  switch(*(unsigned char *)(a1 + 791))
  {
    case 1:
      goto LABEL_41;
    case 2:
      goto LABEL_73;
    case 3:
      goto LABEL_96;
    case 4:
      goto LABEL_173;
    default:
      uint64_t v10 = *(void *)(a1 + 736);
      if (!*(unsigned char *)(v10 + 88)) {
        goto LABEL_264;
      }
      uint64_t v11 = (const std::runtime_error *)(v10 + 8);
      char v12 = *(unsigned char *)(v10 + 80);
      if (v12)
      {
        *(void *)(a1 + 392) = *(void *)(v10 + 8);
        uint64_t v13 = (const char **)(a1 + 400);
        p_char imp = (std::__libcpp_refstring *)(v10 + 16);
      }
      else
      {
        std::runtime_error::runtime_error(v151, v11);
        *(_OWORD *)(a1 + 408) = *(_OWORD *)(v10 + 24);
        *(void *)(a1 + 392) = &unk_1EDC827D8;
        uint64_t v15 = (void *)(v10 + 48);
        uint64_t v16 = *(void *)(v10 + 48);
        unint64_t v17 = a1 + 432;
        *(void *)(a1 + 424) = *(void *)(v10 + 40);
        *(void *)(a1 + 432) = v16;
        uint64_t v18 = *(void *)(v10 + 56);
        *(void *)(a1 + 440) = v18;
        if (v18)
        {
          *(void *)(v16 + 16) = v17;
          *(void *)(v10 + 40) = v15;
          *uint64_t v15 = 0;
          *(void *)(v10 + 56) = 0;
        }
        else
        {
          *(void *)(a1 + 424) = v17;
        }
        uint64_t v19 = *(const std::runtime_error **)(a1 + 736);
        std::error_code v20 = v19[4].__vftable;
        uint64_t v11 = v19 + 4;
        *(void *)(a1 + 448) = v20;
        uint64_t v13 = (const char **)(a1 + 456);
        p_char imp = &v11->__imp_;
      }
      std::__shared_weak_count *v13 = p_imp->__imp_;
      v11->__vftable = 0;
      v11->__imp_.__imp_ = 0;
      *(unsigned char *)(a1 + 464) = v12;
      uint64_t v21 = *(void *)(a1 + 744);
      if (v21 && !atomic_fetch_add((atomic_ullong *volatile)(v21 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v22 = *(std::__shared_weak_count **)(a1 + 744);
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
      uint64_t v23 = *(std::__shared_weak_count **)(a1 + 160);
      if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
      uint64_t v24 = *(std::__shared_weak_count **)(a1 + 624);
      if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
      if (!*(unsigned char *)(a1 + 464))
      {
        std::runtime_error::runtime_error((std::runtime_error *)v159, v151);
        *(_OWORD *)&v159[16] = *(_OWORD *)(a1 + 408);
        uint64_t v29 = *(unsigned int ***)(a1 + 424);
        uint64_t v28 = *(void *)(a1 + 432);
        *(void *)uint64_t v159 = &unk_1EDC827D8;
        char v160 = v29;
        int v161 = (unsigned int *)v28;
        uint64_t v162 = *(void *)(a1 + 440);
        if (v162)
        {
          *(void *)(v28 + 16) = &v161;
          *(void *)(a1 + 424) = a1 + 432;
          *(void *)(a1 + 432) = 0;
          *(void *)(a1 + 440) = 0;
        }
        else
        {
          char v160 = &v161;
        }
        long long v163 = *(_OWORD *)(a1 + 448);
        *(void *)(a1 + 448) = 0;
        *(void *)(a1 + 456) = 0;
        unsigned __int8 v164 = 1;
        AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v153, (uint64_t)v159);
        if (*(unsigned char *)(a1 + 104))
        {
          if (!*(unsigned char *)(a1 + 96)) {
            (**(void (***)(void))(a1 + 24))();
          }
          *(unsigned char *)(a1 + 104) = 0;
        }
        std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v153);
        long long v134 = v154;
        uint64_t v136 = v155;
        uint64_t v135 = v156;
        *(void *)(a1 + 64) = v156;
        unint64_t v137 = a1 + 64;
        *(_OWORD *)(a1 + 40) = v134;
        *(void *)(a1 + 24) = &unk_1EDC827D8;
        uint64_t v138 = v157;
        *(void *)(a1 + 56) = v136;
        *(void *)(a1 + 72) = v138;
        if (v138)
        {
          *(void *)(v135 + 16) = v137;
          uint64_t v155 = &v156;
          uint64_t v156 = 0;
          uint64_t v157 = 0;
          uint64_t v135 = 0;
        }
        else
        {
          *(void *)(a1 + 56) = v137;
        }
        *(_OWORD *)(a1 + 80) = v158;
        long long v158 = 0uLL;
        *(unsigned char *)(a1 + 96) = 0;
        *(unsigned char *)(a1 + 104) = 1;
        v153.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v155, (unsigned int *)v135);
        MEMORY[0x192FA3C30](&v153);
        if (v164)
        {
          *(void *)uint64_t v159 = &unk_1EDC827D8;
          unsigned __int8 v139 = (std::__shared_weak_count *)*((void *)&v163 + 1);
          if (*((void *)&v163 + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v163 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
            std::__shared_weak_count::__release_weak(v139);
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v160, v161);
          MEMORY[0x192FA3C30](v159);
        }
        if (*(unsigned char *)(a1 + 464)) {
          goto LABEL_225;
        }
        goto LABEL_247;
      }
      *(void *)uint64_t v159 = operator new(0x19uLL);
      *(_OWORD *)&v159[8] = xmmword_18DDE9B20;
      strcpy(*(char **)v159, "X-Apple-Set-User-Cookie");
      char v25 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v3, v159);
      if (v25)
      {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::remove((uint64_t)&v153, v3, v25);
        uint64_t v26 = v153.__vftable;
        char v27 = 1;
      }
      else
      {
        uint64_t v26 = 0;
        char v27 = 0;
        *(void *)(a1 + 592) = 0;
      }
      *(void *)(a1 + 584) = v26;
      *(unsigned char *)(a1 + 593) = v27;
      if ((v159[23] & 0x80000000) != 0) {
        operator delete(*(void **)v159);
      }
      if (v26)
      {
        if (SHIBYTE(v26[1].~runtime_error_0) < 0)
        {
          v26[1].~runtime_error = (void (__cdecl *)(std::runtime_error *__hidden))10;
          what = (char *)v26->what;
        }
        else
        {
          what = (char *)&v26->what;
          HIBYTE(v26[1].~runtime_error_0) = 10;
        }
        strcpy(what, "Set-Cookie");
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(v3, (uint64_t)v26);
        *uint64_t v152 = 0;
        if (v25) {
          *(unsigned char *)(a1 + 593) = 0;
        }
      }
      AMSCore::CookieUtils::parseResponseHeaderFields(v150, v3, *(const AMSCore::URL **)(a1 + 712));
      if (*(unsigned char *)(a1 + 304))
      {
        if (*(void *)(a1 + 232) != *(void *)(a1 + 240))
        {
          AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v159);
          AMSCore::Logger::log<char [33],std::vector<std::unique_ptr<AMSCore::HTTPCookie>>>(*(uint64_t *)v159, (uint64_t **)v150);
          std::runtime_error v31 = *(std::__shared_weak_count **)&v159[8];
          if (*(void *)&v159[8]
            && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v159[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
          if (!*(unsigned char *)(a1 + 464) || !*(unsigned char *)(a1 + 304)) {
            goto LABEL_264;
          }
          uint64_t v32 = *(void *)(a1 + 392);
          *(_OWORD *)(v1 + 224) = *(_OWORD *)(a1 + 232);
          *(void *)(a1 + 552) = *(void *)(a1 + 248);
          v150->__vftable = 0;
          v150->__imp_.__imp_ = 0;
          v150[1].__vftable = 0;
          (*(void (**)(uint64_t, uint64_t **))(*(void *)v32 + 24))(v32, v5);
          std::runtime_error v33 = *(std::runtime_error *)v1;
          *(_OWORD *)(a1 + 752) = *(_OWORD *)v1;
          *(void *)uint64_t v1 = 0;
          *(void *)(v1 + 8) = 0;
          if (!atomic_load_explicit((atomic_ullong *volatile)&v33.__vftable[4], memory_order_acquire))
          {
            *char v149 = 1;
            if (!atomic_exchange((atomic_ullong *volatile)(*(void *)(a1 + 752) + 96), a1)) {
              return;
            }
          }
LABEL_41:
          uint64_t v34 = *(void *)(a1 + 752);
          if (!*(unsigned char *)(v34 + 88)) {
            goto LABEL_264;
          }
          char v35 = *(unsigned char *)(v34 + 80);
          if (!v35)
          {
            std::runtime_error::runtime_error(v2, (const std::runtime_error *)(v34 + 8));
            *(_OWORD *)(a1 + 168) = *(_OWORD *)(v34 + 24);
            uint64_t v36 = (void *)(v34 + 48);
            uint64_t v37 = *(void *)(v34 + 48);
            *(void *)(a1 + 192) = v37;
            unint64_t v38 = a1 + 192;
            *(void *)(a1 + 152) = &unk_1EDC827D8;
            *(void *)(a1 + 184) = *(void *)(v34 + 40);
            uint64_t v39 = *(void *)(v34 + 56);
            *(void *)(a1 + 200) = v39;
            if (v39)
            {
              *(void *)(v37 + 16) = v38;
              *(void *)(v34 + 40) = v36;
              void *v36 = 0;
              *(void *)(v34 + 56) = 0;
            }
            else
            {
              *(void *)(a1 + 184) = v38;
            }
            uint64_t v41 = *(void *)(a1 + 752);
            *(_OWORD *)(a1 + 208) = *(_OWORD *)(v41 + 64);
            *(void *)(v41 + 64) = 0;
            *(void *)(v41 + 72) = 0;
          }
          *(unsigned char *)(a1 + 224) = v35;
          uint64_t v42 = *(void *)(a1 + 760);
          if (v42 && !atomic_fetch_add((atomic_ullong *volatile)(v42 + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            uint64_t v43 = *(std::__shared_weak_count **)(a1 + 760);
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
          uint64_t v44 = *(std::__shared_weak_count **)(a1 + 320);
          if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
          uint64_t v45 = *v5;
          if (*v5)
          {
            uint64_t v46 = *(uint64_t **)(a1 + 544);
            uint64_t v47 = *v5;
            if (v46 != v45)
            {
              do
                std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v46, 0);
              while (v46 != v45);
              uint64_t v47 = *v5;
            }
            *(void *)(a1 + 544) = v45;
            operator delete(v47);
          }
          if (!*(unsigned char *)(a1 + 224))
          {
            AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v159);
            AMSCore::Logger::log<char [37],AMSCore::Error>(*(uint64_t *)v159, (uint64_t)"networking", 10, "Failed to set user cookies. error = ", (uint64_t)v2);
            size_t v48 = *(std::__shared_weak_count **)&v159[8];
            if (*(void *)&v159[8]
              && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v159[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
            if (!*(unsigned char *)(a1 + 224)) {
              ((void (*)(std::runtime_error *))v2->~runtime_error)(v2);
            }
          }
        }
      }
      else
      {
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v159);
        AMSCore::Logger::log<char [39],AMSCore::Error>(*(uint64_t *)v159, 4u, (uint64_t)"networking", 10, "Failed to parse user cookies. error = ", (uint64_t)v150);
        uint64_t v40 = *(std::__shared_weak_count **)&v159[8];
        if (*(void *)&v159[8]
          && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v159[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      if ((*(uint64_t (**)(void))(**(void **)(a1 + 696) + 96))(*(void *)(a1 + 696))) {
        goto LABEL_145;
      }
      int v49 = *(char *)(a1 + 792);
      uint64_t v50 = *(void *)(a1 + 680);
      std::string::size_type v51 = *(void *)(a1 + 728);
      uint64_t v52 = *(const std::string::value_type **)(a1 + 720);
      if (v49 < 0)
      {
        std::string::__init_copy_ctor_external(v4, v52, v51);
      }
      else
      {
        *(void *)(a1 + 512) = v52;
        *(void *)(a1 + 520) = v51;
        *(_DWORD *)(a1 + 528) = *v8;
        *(_DWORD *)(a1 + 531) = *(_DWORD *)((char *)v8 + 3);
        *(unsigned char *)(a1 + 535) = v49;
      }
      (*(void (**)(uint64_t, std::string *))(*(void *)v50 + 48))(v50, v4);
      std::runtime_error v53 = *(std::runtime_error *)v1;
      *(_OWORD *)(a1 + 768) = *(_OWORD *)v1;
      *(void *)uint64_t v1 = 0;
      *(void *)(v1 + 8) = 0;
      if (!atomic_load_explicit((atomic_ullong *volatile)&v53.__vftable[4], memory_order_acquire))
      {
        *char v149 = 2;
        if (!atomic_exchange((atomic_ullong *volatile)(*(void *)(a1 + 768) + 96), a1)) {
          return;
        }
      }
LABEL_73:
      uint64_t v54 = *(void *)(a1 + 768);
      if (!*(unsigned char *)(v54 + 88)) {
        goto LABEL_264;
      }
      long long v55 = (const std::runtime_error *)(v54 + 8);
      char v56 = *(unsigned char *)(v54 + 80);
      if (v56)
      {
        uint64_t v57 = v55->__vftable;
        v55->__vftable = 0;
        v2->__vftable = v57;
      }
      else
      {
        std::runtime_error::runtime_error(v2, v55);
        *(_OWORD *)(a1 + 168) = *(_OWORD *)(v54 + 24);
        char v58 = (void *)(v54 + 48);
        uint64_t v59 = *(void *)(v54 + 48);
        *(void *)(a1 + 192) = v59;
        unint64_t v60 = a1 + 192;
        *(void *)(a1 + 152) = &unk_1EDC827D8;
        *(void *)(a1 + 184) = *(void *)(v54 + 40);
        uint64_t v61 = *(void *)(v54 + 56);
        *(void *)(a1 + 200) = v61;
        if (v61)
        {
          *(void *)(v59 + 16) = v60;
          *(void *)(v54 + 40) = v58;
          *char v58 = 0;
          *(void *)(v54 + 56) = 0;
        }
        else
        {
          *(void *)(a1 + 184) = v60;
        }
        uint64_t v62 = *(void *)(a1 + 768);
        *(_OWORD *)(a1 + 208) = *(_OWORD *)(v62 + 64);
        *(void *)(v62 + 64) = 0;
        *(void *)(v62 + 72) = 0;
      }
      *(unsigned char *)(a1 + 224) = v56;
      uint64_t v63 = *(void *)(a1 + 776);
      if (v63 && !atomic_fetch_add((atomic_ullong *volatile)(v63 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v67 = *(std::__shared_weak_count **)(a1 + 776);
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
        uint64_t v64 = *(std::__shared_weak_count **)(a1 + 320);
        if (!v64)
        {
LABEL_84:
          if ((*(char *)(a1 + 535) & 0x80000000) == 0) {
            goto LABEL_85;
          }
          goto LABEL_91;
        }
      }
      else
      {
        uint64_t v64 = *(std::__shared_weak_count **)(a1 + 320);
        if (!v64) {
          goto LABEL_84;
        }
      }
      if (atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_84;
      }
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
      if ((*(char *)(a1 + 535) & 0x80000000) == 0)
      {
LABEL_85:
        if (*(unsigned char *)(a1 + 224)) {
          goto LABEL_86;
        }
LABEL_92:
        std::runtime_error::runtime_error((std::runtime_error *)v159, v2);
        uint64_t v68 = (void *)(a1 + 192);
        uint64_t v69 = *(void *)(a1 + 192);
        *(_OWORD *)&v159[16] = *(_OWORD *)(a1 + 168);
        uint64_t v70 = *(unsigned int ***)(a1 + 184);
        *(void *)uint64_t v159 = &unk_1EDC827D8;
        char v160 = v70;
        int v161 = (unsigned int *)v69;
        uint64_t v162 = *(void *)(a1 + 200);
        if (v162)
        {
          *(void *)(v69 + 16) = &v161;
          *(void *)(a1 + 184) = v68;
          void *v68 = 0;
          *(void *)(a1 + 200) = 0;
        }
        else
        {
          char v160 = &v161;
        }
        long long v163 = *(_OWORD *)(a1 + 208);
        *(void *)(a1 + 208) = 0;
        *(void *)(a1 + 216) = 0;
        goto LABEL_126;
      }
LABEL_91:
      operator delete(v4->__r_.__value_.__l.__data_);
      if (!*(unsigned char *)(a1 + 224)) {
        goto LABEL_92;
      }
LABEL_86:
      uint64_t v65 = *v145;
      uint64_t v66 = v2->__vftable;
      std::__shared_weak_count *v7 = v2->__vftable;
      if (v66) {
        operator new();
      }
      *(void *)(a1 + 672) = 0;
      *(void *)(a1 + 152) = 0;
      (*(void (**)(uint64_t, std::runtime_error_vtbl **))(*(void *)v65 + 40))(v65, v7);
      uint64_t v71 = *(void *)(a1 + 648);
      uint64_t v72 = *(void *)(a1 + 656);
      *char v146 = 0;
      v146[1] = 0;
      *(void *)(a1 + 632) = v71;
      *(void *)(a1 + 640) = v72;
      if (atomic_load_explicit((atomic_ullong *volatile)(v71 + 96), memory_order_acquire)
        || (*char v149 = 3, atomic_exchange((atomic_ullong *volatile)(*(void *)(a1 + 632) + 96), a1)))
      {
LABEL_96:
        uint64_t v73 = *(void *)(a1 + 632);
        if (!*(unsigned char *)(v73 + 88)) {
          goto LABEL_264;
        }
        BOOL v74 = (const std::runtime_error *)(v73 + 8);
        char v75 = *(unsigned char *)(v73 + 80);
        if (v75)
        {
          *(void *)(a1 + 312) = *(void *)(v73 + 8);
          std::string v76 = (const char **)(a1 + 320);
          char v77 = (std::__libcpp_refstring *)(v73 + 16);
        }
        else
        {
          std::runtime_error::runtime_error((std::runtime_error *)v1, v74);
          *(_OWORD *)(a1 + 328) = *(_OWORD *)(v73 + 24);
          *(void *)(a1 + 312) = &unk_1EDC827D8;
          uint64_t v78 = (void *)(v73 + 48);
          uint64_t v79 = *(void *)(v73 + 48);
          unint64_t v80 = a1 + 352;
          *(void *)(a1 + 344) = *(void *)(v73 + 40);
          *(void *)(a1 + 352) = v79;
          uint64_t v81 = *(void *)(v73 + 56);
          *(void *)(a1 + 360) = v81;
          if (v81)
          {
            *(void *)(v79 + 16) = v80;
            *(void *)(v73 + 40) = v78;
            *uint64_t v78 = 0;
            *(void *)(v73 + 56) = 0;
          }
          else
          {
            *(void *)(a1 + 344) = v80;
          }
          uint64_t v83 = *(void *)(v73 + 64);
          uint64_t v82 = (const std::runtime_error *)(v73 + 64);
          *(void *)(a1 + 368) = v83;
          std::string v76 = (const char **)(a1 + 376);
          char v77 = &v82->__imp_;
          BOOL v74 = v82;
        }
        *std::string v76 = v77->__imp_;
        v74->__vftable = 0;
        v74->__imp_.__imp_ = 0;
        *(unsigned char *)(a1 + 384) = v75;
        std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::operator=[abi:fe180100](v151, (std::runtime_error *)v1);
        if (*(unsigned char *)(a1 + 384))
        {
          uint64_t v84 = *(std::__shared_weak_count **)(a1 + 320);
          if (v84 && !atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
        }
        else
        {
          (**(void (***)(uint64_t))v1)(v1);
        }
        char v85 = *(std::__shared_weak_count **)(a1 + 640);
        if (v85 && !atomic_fetch_add(&v85->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
        char v86 = *(std::__shared_weak_count **)(a1 + 656);
        if (v86 && !atomic_fetch_add(&v86->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
          char v87 = *(std::__shared_weak_count **)(a1 + 672);
          if (!v87) {
            goto LABEL_115;
          }
        }
        else
        {
          char v87 = *(std::__shared_weak_count **)(a1 + 672);
          if (!v87) {
            goto LABEL_115;
          }
        }
        if (!atomic_fetch_add(&v87->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
          if (*(unsigned char *)(a1 + 464)) {
            goto LABEL_116;
          }
LABEL_120:
          std::runtime_error::runtime_error((std::runtime_error *)v159, v151);
          *(_OWORD *)&v159[16] = *(_OWORD *)(a1 + 408);
          uint64_t v90 = *(unsigned int ***)(a1 + 424);
          uint64_t v89 = *(void *)(a1 + 432);
          *(void *)uint64_t v159 = &unk_1EDC827D8;
          char v160 = v90;
          int v161 = (unsigned int *)v89;
          uint64_t v162 = *(void *)(a1 + 440);
          if (v162)
          {
            *(void *)(v89 + 16) = &v161;
            *(void *)(a1 + 424) = a1 + 432;
            *(void *)(a1 + 432) = 0;
            *(void *)(a1 + 440) = 0;
          }
          else
          {
            char v160 = &v161;
          }
          long long v163 = *(_OWORD *)(a1 + 448);
          *(void *)(a1 + 448) = 0;
          *(void *)(a1 + 456) = 0;
LABEL_126:
          unsigned __int8 v164 = 1;
          AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v153, (uint64_t)v159);
          if (*(unsigned char *)(a1 + 104))
          {
            if (!*(unsigned char *)(a1 + 96)) {
              (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
            }
            *(unsigned char *)(a1 + 104) = 0;
          }
          std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v153);
          long long v91 = v154;
          __int16 v93 = v155;
          uint64_t v92 = v156;
          *(void *)(a1 + 64) = v156;
          unint64_t v94 = a1 + 64;
          *(_OWORD *)(a1 + 40) = v91;
          *(void *)(a1 + 24) = &unk_1EDC827D8;
          uint64_t v95 = v157;
          *(void *)(a1 + 56) = v93;
          *(void *)(a1 + 72) = v95;
          if (v95)
          {
            *(void *)(v92 + 16) = v94;
            uint64_t v155 = &v156;
            uint64_t v156 = 0;
            uint64_t v157 = 0;
            uint64_t v92 = 0;
          }
          else
          {
            *(void *)(a1 + 56) = v94;
          }
          *(_OWORD *)(a1 + 80) = v158;
          long long v158 = 0uLL;
          *(unsigned char *)(a1 + 96) = 0;
          *(unsigned char *)(a1 + 104) = 1;
          v153.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v155, (unsigned int *)v92);
          MEMORY[0x192FA3C30](&v153);
          if (v164)
          {
            *(void *)uint64_t v159 = &unk_1EDC827D8;
            char v96 = (std::__shared_weak_count *)*((void *)&v163 + 1);
            if (*((void *)&v163 + 1)
              && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v163 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
              std::__shared_weak_count::__release_weak(v96);
            }
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v160, v161);
            MEMORY[0x192FA3C30](v159);
          }
          int v88 = 3;
LABEL_139:
          uint64_t v97 = *(void *)(a1 + 152);
          if (*(unsigned char *)(a1 + 224))
          {
            v2->__vftable = 0;
            if (v97) {
              (*(void (**)(uint64_t))(*(void *)v97 + 8))(v97);
            }
            if (v88)
            {
LABEL_212:
              char v124 = *(void (***)(void))(a1 + 232);
              if (*(unsigned char *)(a1 + 304))
              {
                if (v124)
                {
                  long long v125 = *(uint64_t **)(a1 + 240);
                  uint64_t v126 = *(std::runtime_error_vtbl **)(a1 + 232);
                  if (v125 != (uint64_t *)v124)
                  {
                    do
                      std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v125, 0);
                    while (v125 != (uint64_t *)v124);
                    uint64_t v126 = v150->__vftable;
                  }
                  *(void *)(a1 + 240) = v124;
                  operator delete(v126);
                }
              }
              else
              {
                (*v124)();
              }
              uint64_t v127 = *v152;
              if (!*v152)
              {
LABEL_224:
                if (*(unsigned char *)(a1 + 464))
                {
LABEL_225:
                  int v128 = *(std::__shared_weak_count **)(a1 + 400);
                  if (v128 && !atomic_fetch_add(&v128->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                    std::__shared_weak_count::__release_weak(v128);
                  }
LABEL_248:
                  char v140 = *(std::__shared_weak_count **)(a1 + 688);
                  if (v140 && !atomic_fetch_add(&v140->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                    std::__shared_weak_count::__release_weak(v140);
                  }
                  char v141 = *(void ***)(a1 + 488);
                  if (!v141)
                  {
LABEL_252:
                    char v142 = *(void **)v3;
                    *(void *)long long v3 = 0;
                    if (v142) {
                      operator delete(v142);
                    }
                    *(void *)(a1 + 152) = v148;
                    *(void *)a1 = 0;
                    *char v149 = 5;
                    AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v2);
                    return;
                  }
                  while (1)
                  {
                    char v143 = (void **)*v141;
                    if (*((char *)v141 + 63) < 0)
                    {
                      operator delete(v141[5]);
                      if (*((char *)v141 + 39) < 0) {
                        goto LABEL_259;
                      }
                    }
                    else if (*((char *)v141 + 39) < 0)
                    {
LABEL_259:
                      operator delete(v141[2]);
                    }
                    operator delete(v141);
                    char v141 = v143;
                    if (!v143) {
                      goto LABEL_252;
                    }
                  }
                }
LABEL_247:
                ((void (*)(std::runtime_error *))v151->~runtime_error)(v151);
                goto LABEL_248;
              }
              if (*(unsigned char *)(a1 + 593))
              {
                if (*(char *)(v127 + 63) < 0)
                {
                  operator delete(*(void **)(v127 + 40));
                  if ((*(char *)(v127 + 39) & 0x80000000) == 0) {
                    goto LABEL_223;
                  }
                }
                else if ((*(char *)(v127 + 39) & 0x80000000) == 0)
                {
LABEL_223:
                  operator delete((void *)v127);
                  goto LABEL_224;
                }
                operator delete(*(void **)(v127 + 16));
                goto LABEL_223;
              }
LABEL_264:
              __break(1u);
              return;
            }
          }
          else
          {
            (*(void (**)(std::runtime_error *))v97)(v2);
            if (v88) {
              goto LABEL_212;
            }
          }
LABEL_145:
          v159[23] = 10;
          strcpy(v159, "Set-Cookie");
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>(v3, (uint64_t)v159);
          if ((v159[23] & 0x80000000) != 0) {
            operator delete(*(void **)v159);
          }
          v159[23] = 18;
          strcpy(v159, "X-Apple-Set-Cookie");
          uint64_t v98 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v3, v159);
          if (v98)
          {
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::remove((uint64_t)&v153, v3, v98);
            char v99 = v153.__vftable;
            __int16 v100 = 256;
          }
          else
          {
            char v99 = 0;
            __int16 v100 = 0;
          }
          uint64_t v101 = *v152;
          if (!*v152)
          {
LABEL_155:
            *(void *)(a1 + 584) = v99;
            *(_WORD *)(a1 + 592) = v100;
            if ((v159[23] & 0x80000000) != 0)
            {
              operator delete(*(void **)v159);
              size_t v6 = v147;
              if (!v99) {
                goto LABEL_164;
              }
            }
            else
            {
              size_t v6 = v147;
              if (!v99) {
                goto LABEL_164;
              }
            }
            if (SHIBYTE(v99[1].~runtime_error_0) < 0)
            {
              v99[1].~runtime_error = (void (__cdecl *)(std::runtime_error *__hidden))10;
              p_what = (char *)v99->what;
            }
            else
            {
              p_what = (char *)&v99->what;
              HIBYTE(v99[1].~runtime_error_0) = 10;
            }
            strcpy(p_what, "Set-Cookie");
            std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(v3, (uint64_t)v99);
            *uint64_t v152 = 0;
            if (v98) {
              *(unsigned char *)(a1 + 593) = 0;
            }
LABEL_164:
            AMSCore::CookieUtils::parseResponseHeaderFields((std::runtime_error *)v1, v3, *(const AMSCore::URL **)(a1 + 712));
            if (*(unsigned char *)(a1 + 384))
            {
              if (*(void *)(a1 + 312) != *(void *)(a1 + 320))
              {
                AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v159);
                AMSCore::Logger::log<char [35],std::vector<std::unique_ptr<AMSCore::HTTPCookie>>>(*(uint64_t *)v159, (uint64_t **)v1);
                uint64_t v103 = *(std::__shared_weak_count **)&v159[8];
                if (*(void *)&v159[8]
                  && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v159[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                  std::__shared_weak_count::__release_weak(v103);
                }
                if (!*(unsigned char *)(a1 + 464) || !*(unsigned char *)(a1 + 384)) {
                  goto LABEL_264;
                }
                uint64_t v104 = *(void *)(a1 + 392);
                *(_OWORD *)(a1 + 560) = *(_OWORD *)v1;
                *(void *)(a1 + 576) = *(void *)(a1 + 328);
                *(void *)uint64_t v1 = 0;
                *(void *)(v1 + 8) = 0;
                *(void *)(v1 + 16) = 0;
                (*(void (**)(uint64_t, uint64_t **))(*(void *)v104 + 24))(v104, v6);
                uint64_t v105 = *(void *)(a1 + 648);
                uint64_t v106 = *(void *)(a1 + 656);
                *char v146 = 0;
                v146[1] = 0;
                *(void *)(a1 + 632) = v105;
                *(void *)(a1 + 640) = v106;
                if (!atomic_load_explicit((atomic_ullong *volatile)(v105 + 96), memory_order_acquire))
                {
                  *char v149 = 4;
                  if (!atomic_exchange((atomic_ullong *volatile)(*(void *)(a1 + 632) + 96), a1)) {
                    return;
                  }
                }
LABEL_173:
                uint64_t v107 = *(void *)(a1 + 632);
                if (!*(unsigned char *)(v107 + 88)) {
                  goto LABEL_264;
                }
                char v108 = *(unsigned char *)(v107 + 80);
                if (!v108)
                {
                  std::runtime_error::runtime_error(v2, (const std::runtime_error *)(v107 + 8));
                  *(_OWORD *)(a1 + 168) = *(_OWORD *)(v107 + 24);
                  unint64_t v109 = (void *)(v107 + 48);
                  uint64_t v110 = *(void *)(v107 + 48);
                  *(void *)(a1 + 192) = v110;
                  unint64_t v111 = a1 + 192;
                  *(void *)(a1 + 152) = &unk_1EDC827D8;
                  *(void *)(a1 + 184) = *(void *)(v107 + 40);
                  uint64_t v112 = *(void *)(v107 + 56);
                  *(void *)(a1 + 200) = v112;
                  if (v112)
                  {
                    *(void *)(v110 + 16) = v111;
                    *(void *)(v107 + 40) = v109;
                    void *v109 = 0;
                    *(void *)(v107 + 56) = 0;
                  }
                  else
                  {
                    *(void *)(a1 + 184) = v111;
                  }
                  *(_OWORD *)(a1 + 208) = *(_OWORD *)(v107 + 64);
                  *(void *)(v107 + 64) = 0;
                  *(void *)(v107 + 72) = 0;
                }
                *(unsigned char *)(a1 + 224) = v108;
                uint64_t v114 = *(std::__shared_weak_count **)(a1 + 640);
                if (v114 && !atomic_fetch_add(&v114->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                  std::__shared_weak_count::__release_weak(v114);
                }
                unint64_t v115 = *(std::__shared_weak_count **)(a1 + 656);
                if (v115 && !atomic_fetch_add(&v115->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                  std::__shared_weak_count::__release_weak(v115);
                }
                int v116 = *v6;
                if (*v6)
                {
                  uint64_t v117 = *(uint64_t **)(a1 + 568);
                  std::string v118 = *v6;
                  if (v117 != v116)
                  {
                    do
                      std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v117, 0);
                    while (v117 != v116);
                    std::string v118 = *v6;
                  }
                  *(void *)(a1 + 568) = v116;
                  operator delete(v118);
                }
                if (!*(unsigned char *)(a1 + 224))
                {
                  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v159);
                  AMSCore::Logger::log<char [39],AMSCore::Error>(*(uint64_t *)v159, 4u, (uint64_t)"networking", 10, "Failed to set global cookies. error = ", (uint64_t)v2);
                  char v119 = *(std::__shared_weak_count **)&v159[8];
                  if (*(void *)&v159[8]
                    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v159[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                    std::__shared_weak_count::__release_weak(v119);
                  }
                  if (!*(unsigned char *)(a1 + 224)) {
                    ((void (*)(std::runtime_error *))v2->~runtime_error)(v2);
                  }
                }
              }
            }
            else
            {
              AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v159);
              AMSCore::Logger::log<char [41],AMSCore::Error>(*(uint64_t *)v159, 4u, (uint64_t)"networking", 10, "Failed to parse global cookies. error = ", v1);
              uint64_t v113 = *(std::__shared_weak_count **)&v159[8];
              if (*(void *)&v159[8]
                && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v159[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                std::__shared_weak_count::__release_weak(v113);
              }
            }
            unsigned __int8 v164 = 1;
            if (*(unsigned char *)(a1 + 104) && !*(unsigned char *)(a1 + 96))
            {
              (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
              int v120 = v164;
              *(unsigned char *)(a1 + 104) = 0;
              if (!v120)
              {
                std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), (const std::runtime_error *)v159);
                long long v129 = *(_OWORD *)&v159[16];
                uint64_t v131 = v160;
                long long v130 = v161;
                *(void *)(a1 + 64) = v161;
                unint64_t v132 = a1 + 64;
                *(_OWORD *)(a1 + 40) = v129;
                *(void *)(a1 + 24) = &unk_1EDC827D8;
                uint64_t v133 = v162;
                *(void *)(a1 + 56) = v131;
                *(void *)(a1 + 72) = v133;
                if (v133)
                {
                  *((void *)v130 + 2) = v132;
                  char v160 = &v161;
                  int v161 = 0;
                  uint64_t v162 = 0;
                }
                else
                {
                  *(void *)(a1 + 56) = v132;
                }
                *(_OWORD *)(a1 + 80) = v163;
                long long v163 = 0uLL;
                int v144 = v164;
                *(unsigned char *)(a1 + 96) = 0;
                *(unsigned char *)(a1 + 104) = 1;
                if (!v144) {
                  (**(void (***)(unsigned char *))v159)(v159);
                }
                goto LABEL_205;
              }
            }
            else
            {
              LOBYTE(v120) = 1;
            }
            *(unsigned char *)(a1 + 96) = v120;
            *(unsigned char *)(a1 + 104) = 1;
LABEL_205:
            char v121 = *(uint64_t **)(a1 + 312);
            if (*(unsigned char *)(a1 + 384))
            {
              if (v121)
              {
                long long v122 = *(uint64_t **)(a1 + 320);
                uint64_t v123 = *(void **)(a1 + 312);
                if (v122 != v121)
                {
                  do
                    std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v122, 0);
                  while (v122 != v121);
                  uint64_t v123 = *(void **)v1;
                }
                *(void *)(a1 + 320) = v121;
                operator delete(v123);
              }
            }
            else
            {
              ((void (*)(uint64_t))*v121)(v1);
            }
            goto LABEL_212;
          }
          if (!*(unsigned char *)(a1 + 593)) {
            goto LABEL_264;
          }
          if (*(char *)(v101 + 63) < 0)
          {
            operator delete(*(void **)(v101 + 40));
            if ((*(char *)(v101 + 39) & 0x80000000) == 0) {
              goto LABEL_154;
            }
          }
          else if ((*(char *)(v101 + 39) & 0x80000000) == 0)
          {
LABEL_154:
            operator delete((void *)v101);
            goto LABEL_155;
          }
          operator delete(*(void **)(v101 + 16));
          goto LABEL_154;
        }
LABEL_115:
        if (*(unsigned char *)(a1 + 464))
        {
LABEL_116:
          int v88 = 0;
          goto LABEL_139;
        }
        goto LABEL_120;
      }
      return;
  }
}

void sub_18DAFD2B4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&__p);
  std::expected<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::~expected[abi:fe180100](a15);
  std::__basic_node_handle<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::allocator<std::pair<std::string const,std::string>>,std::__map_node_handle_specifics>::~__basic_node_handle[abi:fe180100](a17);
  std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](a16);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a10);
  AMSCore::IHTTPHeaderMap::~IHTTPHeaderMap(v32);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DAFD408()
{
}

void sub_18DAFD410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned char *a14)
{
  *std::error_code v14 = 0;
  *a14 = 5;
  _Unwind_Resume(a1);
}

void AMSCore::processFinanceCookieHeaders(char *__p)
{
  uint64_t v1 = __p + 152;
  long long v2 = (void **)(__p + 232);
  long long v3 = (void **)(__p + 312);
  uint64_t v4 = (void (***)(void))(__p + 392);
  switch(__p[791])
  {
    case 1:
      uint64_t v10 = *((void *)__p + 95);
      if (v10 && !atomic_fetch_add((atomic_ullong *volatile)(v10 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v11 = (std::__shared_weak_count *)*((void *)__p + 95);
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      char v12 = (std::__shared_weak_count *)*((void *)__p + 40);
      if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      uint64_t v13 = (uint64_t *)*((void *)__p + 67);
      if (v13)
      {
        std::error_code v14 = (uint64_t *)*((void *)__p + 68);
        uint64_t v15 = (void *)*((void *)__p + 67);
        if (v14 != v13)
        {
          do
            std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v14, 0);
          while (v14 != v13);
          uint64_t v15 = (void *)*((void *)__p + 67);
        }
        *((void *)__p + 68) = v13;
        operator delete(v15);
      }
      goto LABEL_60;
    case 2:
      uint64_t v16 = *((void *)__p + 97);
      if (v16 && !atomic_fetch_add((atomic_ullong *volatile)(v16 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        unint64_t v17 = (std::__shared_weak_count *)*((void *)__p + 97);
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      uint64_t v18 = (std::__shared_weak_count *)*((void *)__p + 40);
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      if (__p[535] < 0) {
        operator delete(*((void **)__p + 64));
      }
      goto LABEL_60;
    case 3:
      uint64_t v19 = (std::__shared_weak_count *)*((void *)__p + 80);
      if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      std::error_code v20 = (std::__shared_weak_count *)*((void *)__p + 82);
      if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      uint64_t v21 = (std::__shared_weak_count *)*((void *)__p + 84);
      if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
      uint64_t v22 = *((void *)__p + 19);
      if (__p[224])
      {
        void *v1 = 0;
        if (v22) {
          (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
        }
      }
      else
      {
        (*(void (**)(void *))v22)(v1);
      }
      goto LABEL_60;
    case 4:
      uint64_t v23 = (std::__shared_weak_count *)*((void *)__p + 80);
      if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
      uint64_t v24 = (std::__shared_weak_count *)*((void *)__p + 82);
      if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
      char v25 = (uint64_t *)*((void *)__p + 70);
      if (v25)
      {
        uint64_t v26 = (uint64_t *)*((void *)__p + 71);
        char v27 = (void *)*((void *)__p + 70);
        if (v26 != v25)
        {
          do
            std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v26, 0);
          while (v26 != v25);
          char v27 = (void *)*((void *)__p + 70);
        }
        *((void *)__p + 71) = v25;
        operator delete(v27);
      }
      uint64_t v28 = (uint64_t *)*((void *)__p + 39);
      if (__p[384])
      {
        if (v28)
        {
          uint64_t v29 = (uint64_t *)*((void *)__p + 40);
          uint64_t v30 = (void *)*((void *)__p + 39);
          if (v29 != v28)
          {
            do
              std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v29, 0);
            while (v29 != v28);
            uint64_t v30 = *v3;
          }
          *((void *)__p + 40) = v28;
          operator delete(v30);
        }
      }
      else
      {
        ((void (*)(void **))*v28)(v3);
      }
LABEL_60:
      std::runtime_error v31 = (uint64_t *)*((void *)__p + 29);
      if (__p[304])
      {
        if (v31)
        {
          uint64_t v32 = (uint64_t *)*((void *)__p + 30);
          std::runtime_error v33 = (void *)*((void *)__p + 29);
          if (v32 != v31)
          {
            do
              std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v32, 0);
            while (v32 != v31);
            std::runtime_error v33 = *v2;
          }
          *((void *)__p + 30) = v31;
          operator delete(v33);
        }
        uint64_t v34 = *((void *)__p + 73);
        if (!v34)
        {
LABEL_67:
          if (__p[464]) {
            goto LABEL_68;
          }
LABEL_76:
          (**v4)(v4);
          goto LABEL_77;
        }
      }
      else
      {
        ((void (*)(void **))*v31)(v2);
        uint64_t v34 = *((void *)__p + 73);
        if (!v34) {
          goto LABEL_67;
        }
      }
      if (!__p[593])
      {
        __break(1u);
        JUMPOUT(0x18DAFDC84);
      }
      if (*(char *)(v34 + 63) < 0)
      {
        operator delete(*(void **)(v34 + 40));
        if ((*(char *)(v34 + 39) & 0x80000000) == 0) {
          goto LABEL_75;
        }
      }
      else if ((*(char *)(v34 + 39) & 0x80000000) == 0)
      {
        goto LABEL_75;
      }
      operator delete(*(void **)(v34 + 16));
LABEL_75:
      operator delete((void *)v34);
      if (!__p[464]) {
        goto LABEL_76;
      }
LABEL_68:
      std::string v9 = (std::__shared_weak_count *)*((void *)__p + 50);
      if (v9)
      {
LABEL_69:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
LABEL_77:
      char v35 = (std::__shared_weak_count *)*((void *)__p + 86);
      if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
      uint64_t v36 = (void **)*((void *)__p + 61);
      if (v36)
      {
        do
        {
          uint64_t v39 = (void **)*v36;
          if (*((char *)v36 + 63) < 0)
          {
            operator delete(v36[5]);
            if (*((char *)v36 + 39) < 0) {
LABEL_91:
            }
              operator delete(v36[2]);
          }
          else if (*((char *)v36 + 39) < 0)
          {
            goto LABEL_91;
          }
          operator delete(v36);
          uint64_t v36 = v39;
        }
        while (v39);
      }
      uint64_t v37 = (void *)*((void *)__p + 59);
      *((void *)__p + 59) = 0;
      if (v37) {
        operator delete(v37);
      }
LABEL_83:
      unint64_t v38 = (char *)*((void *)__p + 18);
      if (v38 == __p + 120)
      {
        (*(void (**)(char *))(*((void *)__p + 15) + 32))(__p + 120);
      }
      else if (v38)
      {
        (*(void (**)(char *))(*(void *)v38 + 40))(v38);
      }
      if (__p[104]) {
        BOOL v40 = __p[96] == 0;
      }
      else {
        BOOL v40 = 0;
      }
      if (v40) {
        (**((void (***)(void))__p + 3))();
      }
      int v41 = __p[792];
      if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
        MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
      }
      if (v41 < 0) {
        operator delete(*((void **)__p + 90));
      }
      uint64_t v42 = (std::__shared_weak_count *)*((void *)__p + 88);
      if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
      uint64_t v43 = (std::__shared_weak_count *)*((void *)__p + 76);
      if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
      operator delete(__p);
      return;
    case 5:
      goto LABEL_83;
    default:
      uint64_t v6 = *((void *)__p + 93);
      if (v6 && !atomic_fetch_add((atomic_ullong *volatile)(v6 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v7 = (std::__shared_weak_count *)*((void *)__p + 93);
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      uint64_t v8 = (std::__shared_weak_count *)*((void *)__p + 20);
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      std::string v9 = (std::__shared_weak_count *)*((void *)__p + 78);
      if (!v9) {
        goto LABEL_77;
      }
      goto LABEL_69;
  }
}

uint64_t std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::unordered_multimap(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__do_rehash<false>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (i = *(void **)(a2 + 16); i; i = (void *)*i)
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__insert_multi[abi:fe180100]<std::pair<std::string const,std::string> const&>((void *)a1, (uint64_t)(i + 2));
  return a1;
}

void sub_18DAFDDB8(_Unwind_Exception *a1)
{
  AMSCore::IHTTPHeaderMap::~IHTTPHeaderMap(v1);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::Logger::log<char [33],std::vector<std::unique_ptr<AMSCore::HTTPCookie>>>(uint64_t result, uint64_t **a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= 2u)
  {
    uint64_t v3 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v10);
    uint64_t v4 = *(void *)(v10[0] - 24);
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v10, (uint64_t)"Setting user cookies. cookies = ", 32);
    int8x8_t v5 = *a2;
    BOOL v6 = a2[1];
    if (*a2 != v6)
    {
      do
      {
        if (*v5) {
          AMSCore::operator<<(v10, *v5);
        }
        else {
          std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v10, (uint64_t)"null", 4);
        }
        ++v5;
      }
      while (v5 != v6);
    }
    uint64_t v7 = v10[6];
    uint8x8_t v8 = (char *)v10 + *(void *)(v10[0] - 24);
    if ((v8[32] & 5) != 0)
    {
      uint64_t v9 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v8 + 5) + 32))(&rep);
      uint64_t v9 = v17;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v14 = 2;
    uint64_t v15 = v7;
    uint64_t v16 = v9;
    (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v3 + 16) + 16))(*(void *)(v3 + 16), "networking", 10, &rep);
    v10[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v10[1] = MEMORY[0x1E4FBA470] + 16;
    if (v11 < 0) {
      operator delete((void *)v10[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v12);
  }
  return result;
}

void sub_18DAFE358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_18DAFE378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::Logger::log<char [37],AMSCore::Error>(uint64_t result, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= 4u)
  {
    uint64_t v9 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v15);
    uint64_t v10 = *(void *)(v15[0] - 24);
    {
    }
    size_t v11 = strlen(a4);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v15, (uint64_t)a4, v11);
    AMSCore::operator<<(v15, a5);
    uint64_t v12 = v15[6];
    uint64_t v13 = (char *)v15 + *(void *)(v15[0] - 24);
    if ((v13[32] & 5) != 0)
    {
      uint64_t v14 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v13 + 5) + 32))(&rep);
      uint64_t v14 = v22;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v19 = 4;
    uint64_t v20 = v12;
    uint64_t v21 = v14;
    (*(void (**)(void, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v9 + 16) + 16))(*(void *)(v9 + 16), a2, a3, &rep);
    v15[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v15 + *(void *)(v15[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v15[1] = MEMORY[0x1E4FBA470] + 16;
    if (v16 < 0) {
      operator delete((void *)v15[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v17);
  }
  return result;
}

void sub_18DAFE648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>(void *a1, uint64_t a2)
{
  long long v2 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a1, (char *)a2);
  if (!v2) {
    return;
  }
  uint64_t v3 = v2;
  while (1)
  {
    uint64_t v4 = v3;
    uint64_t v3 = (uint64_t *)*v3;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::remove((uint64_t)&__p, a1, v4);
    int8x8_t v5 = (void **)__p;
    if (__p)
    {
      if (v24)
      {
        if (*((char *)__p + 63) < 0)
        {
          operator delete(*((void **)__p + 5));
          if ((*((char *)v5 + 39) & 0x80000000) == 0) {
            goto LABEL_7;
          }
        }
        else if ((*((char *)__p + 39) & 0x80000000) == 0)
        {
          goto LABEL_7;
        }
        operator delete(v5[2]);
      }
LABEL_7:
      operator delete(v5);
    }
    if (!v3) {
      return;
    }
    int v6 = *((char *)v3 + 39);
    uint64_t v7 = v6 >= 0 ? (uint64_t)(v3 + 2) : v3[2];
    uint64_t v8 = v6 >= 0 ? *((unsigned __int8 *)v3 + 39) : v3[3];
    int v9 = *(char *)(a2 + 23);
    uint64_t v10 = v9 >= 0 ? (char *)a2 : *(char **)a2;
    uint64_t v11 = v9 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(void *)(a2 + 8);
    uint64_t v12 = std::locale::classic();
    uint64_t v13 = std::locale::use_facet(v12, MEMORY[0x1E4FBA258]);
    if (v8 != v11) {
      return;
    }
    if (v8) {
      break;
    }
    uint64_t v17 = v10;
    char v16 = (char *)v7;
LABEL_28:
    if (v16 != (char *)(v7 + v8) || v17 != &v10[v8]) {
      return;
    }
  }
  uint64_t v14 = v13;
  uint64_t v15 = v8 - 1;
  char v16 = (char *)v7;
  uint64_t v17 = v10;
  while (1)
  {
    uint64_t v18 = v15;
    uint64_t v19 = *v17;
    int v20 = ((uint64_t (*)(const std::locale::facet *, void))v14->__vftable[1].__on_zero_shared)(v14, *v16);
    if (v20 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v14->__vftable[1].__on_zero_shared)(v14, v19))break; {
    ++v16;
    }
    ++v17;
    uint64_t v15 = v18 - 1;
    if (!v18) {
      goto LABEL_28;
    }
  }
}

uint64_t AMSCore::Logger::log<char [35],std::vector<std::unique_ptr<AMSCore::HTTPCookie>>>(uint64_t result, uint64_t **a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= 2u)
  {
    uint64_t v3 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v10);
    uint64_t v4 = *(void *)(v10[0] - 24);
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v10, (uint64_t)"Setting global cookies. cookies = ", 34);
    int8x8_t v5 = *a2;
    int v6 = a2[1];
    if (*a2 != v6)
    {
      do
      {
        if (*v5) {
          AMSCore::operator<<(v10, *v5);
        }
        else {
          std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v10, (uint64_t)"null", 4);
        }
        ++v5;
      }
      while (v5 != v6);
    }
    uint64_t v7 = v10[6];
    uint64_t v8 = (char *)v10 + *(void *)(v10[0] - 24);
    if ((v8[32] & 5) != 0)
    {
      uint64_t v9 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v8 + 5) + 32))(&rep);
      uint64_t v9 = v17;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v14 = 2;
    uint64_t v15 = v7;
    uint64_t v16 = v9;
    (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v3 + 16) + 16))(*(void *)(v3 + 16), "networking", 10, &rep);
    v10[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v10[1] = MEMORY[0x1E4FBA470] + 16;
    if (v11 < 0) {
      operator delete((void *)v10[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v12);
  }
  return result;
}

void sub_18DAFEB18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_18DAFEB38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__basic_node_handle<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::allocator<std::pair<std::string const,std::string>>,std::__map_node_handle_specifics>::~__basic_node_handle[abi:fe180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = *result;
  if (!*result) {
    return v1;
  }
  if (*((unsigned char *)result + 9))
  {
    if (*(char *)(v2 + 63) < 0)
    {
      operator delete(*(void **)(v2 + 40));
      if ((*(char *)(v2 + 39) & 0x80000000) == 0) {
        goto LABEL_5;
      }
    }
    else if ((*(char *)(v2 + 39) & 0x80000000) == 0)
    {
LABEL_5:
      operator delete((void *)v2);
      void *v1 = 0;
      return v1;
    }
    operator delete(*(void **)(v2 + 16));
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t AMSCore::Task<void,AMSCore::Error>::ValuePromise::~ValuePromise(uint64_t a1)
{
  uint64_t v2 = a1 + 104;
  uint64_t v3 = *(void *)(a1 + 128);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    if (!*(unsigned char *)(a1 + 88)) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  if (*(unsigned char *)(a1 + 88))
  {
LABEL_7:
    if (!*(unsigned char *)(a1 + 80)) {
      (**(void (***)(void))(a1 + 8))();
    }
  }
LABEL_9:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__insert_multi[abi:fe180100]<std::pair<std::string const,std::string> const&>(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)operator new(0x40uLL);
  uint64_t v5 = (uint64_t)v4;
  int v6 = v4 + 16;
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v4 + 16), *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)int v6 = *(_OWORD *)a2;
    *((void *)v4 + 4) = *(void *)(a2 + 16);
  }
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v5 + 40), *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)(v5 + 40) = *(_OWORD *)(a2 + 24);
    *(void *)(v5 + 56) = *(void *)(a2 + 40);
  }
  int v7 = *(char *)(v5 + 39);
  if (v7 >= 0) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = *(char **)(v5 + 16);
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(v5 + 39);
  }
  else {
    uint64_t v9 = *(void *)(v5 + 24);
  }
  uint64_t v10 = std::locale::classic();
  char v11 = std::locale::use_facet(v10, MEMORY[0x1E4FBA258]);
  if (v9)
  {
    uint64_t v12 = v11;
    uint64_t v13 = 0;
    do
    {
      v13 ^= 2
           * ((int (*)(const std::locale::facet *, void))v12->__vftable[1].__on_zero_shared)(v12, *v8++);
      --v9;
    }
    while (v9);
  }
  else
  {
    uint64_t v13 = 0;
  }
  *(void *)(v5 + 8) = v13;
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(a1, v5);
}

void sub_18DAFEDF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 39) < 0) {
    operator delete(*v3);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:fe180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_18DAFEE24(_Unwind_Exception *a1)
{
  if (v1[63] < 0) {
    operator delete(*v3);
  }
  if (v1[39] < 0) {
    operator delete(*v2);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void AMSCore::FinanceRequestHandler::handleCompletion(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int v7 = operator new(0x4B0uLL);
  void *v7 = AMSCore::FinanceRequestHandler::handleCompletion;
  v7[1] = AMSCore::FinanceRequestHandler::handleCompletion;
  *a2 = 0;
  a2[1] = 0;
  *a3 = 0;
  a3[1] = 0;
  *a4 = 0;
  a4[1] = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *((unsigned char *)v7 + 24) = 0;
  *((unsigned char *)v7 + 488) = 0;
  v7[62] = 0;
  v7[66] = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,void>(&v8, (uint64_t)(v7 + 2));
}

void sub_18DB02558(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AMSCore::FinanceRequestHandler::handleCompletion(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 1160);
  if (!*(unsigned char *)(v1 + 472))
  {
    __break(1u);
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = (AMSCore::HTTPResponseAction *)(result + 536);
  AMSCore::HTTPResponseAction::HTTPResponseAction(result + 536, v1 + 8);
  if (*(unsigned char *)(v2 + 488))
  {
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v2 + 24));
    *(unsigned char *)(v2 + 488) = 0;
  }
  uint64_t v4 = *(void *)(v2 + 1168);
  AMSCore::HTTPResponseAction::HTTPResponseAction(v2 + 24, (uint64_t)v3);
  *(unsigned char *)(v2 + 488) = 1;
  AMSCore::HTTPResponseAction::~HTTPResponseAction(v3);
  if (v4 && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)(v2 + 1168) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v5 = *(std::__shared_weak_count **)(v2 + 1168);
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  int v6 = *(std::__shared_weak_count **)(v2 + 1104);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  int v7 = *(std::__shared_weak_count **)(v2 + 1152);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  std::runtime_error v8 = *(std::__shared_weak_count **)(v2 + 1136);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(v2 + 1120);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (*(unsigned char *)(v2 + 1072)) {
      goto LABEL_19;
    }
  }
  else if (*(unsigned char *)(v2 + 1072))
  {
LABEL_19:
    uint64_t v10 = *(std::__shared_weak_count **)(v2 + 1008);
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    goto LABEL_24;
  }
  (**(void (***)(void))(v2 + 1000))();
LABEL_24:
  *(_OWORD *)(v2 + 1176) = 0u;
  *(void *)(v2 + 536) = v2 + 16;
  *(void *)uint64_t v2 = 0;
  return AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend((uint64_t)v3);
}

void AMSCore::FinanceRequestHandler::handleCompletion(void *__p)
{
  if (!*__p)
  {
    uint64_t v9 = (std::__shared_weak_count *)__p[148];
    std::runtime_error v8 = (std::__shared_weak_count *)__p[147];
    goto LABEL_26;
  }
  uint64_t v2 = __p[146];
  if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v3 = (std::__shared_weak_count *)__p[146];
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)__p[138];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)__p[144];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  int v6 = (std::__shared_weak_count *)__p[142];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    int v7 = (std::__shared_weak_count *)__p[140];
    if (!v7)
    {
LABEL_15:
      if (*((unsigned char *)__p + 1072)) {
        goto LABEL_16;
      }
LABEL_23:
      (*(void (**)(void))__p[125])();
LABEL_24:
      std::runtime_error v8 = 0;
      goto LABEL_25;
    }
  }
  else
  {
    int v7 = (std::__shared_weak_count *)__p[140];
    if (!v7) {
      goto LABEL_15;
    }
  }
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (!*((unsigned char *)__p + 1072)) {
    goto LABEL_23;
  }
LABEL_16:
  std::runtime_error v8 = (std::__shared_weak_count *)__p[126];
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    goto LABEL_24;
  }
LABEL_25:
  uint64_t v9 = 0;
LABEL_26:
  uint64_t v10 = (void *)__p[66];
  if (v10 == __p + 63)
  {
    (*(void (**)(char *))(__p[63] + 32))((char *)__p + 504);
    if (*((unsigned char *)__p + 488)) {
LABEL_30:
    }
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 3));
  }
  else
  {
    if (v10) {
      (*(void (**)(void *))(*v10 + 40))(v10);
    }
    if (*((unsigned char *)__p + 488)) {
      goto LABEL_30;
    }
  }
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(__p);
}

uint64_t AMSCore::anonymous namespace'::process(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 1968);
  if (!*(unsigned char *)(v1 + 472))
  {
LABEL_73:
    __break(1u);
    return result;
  }
  unint64_t v2 = result;
  uint64_t v39 = (AMSCore::HTTPResponseAction *)(result + 536);
  uint64_t v40 = result + 1752;
  uint64_t v3 = (AMSCore::HTTPResponseAction *)(result + 1000);
  uint64_t v34 = (__n128 *)(result + 1792);
  char v35 = (long long *)(result + 1712);
  uint64_t v4 = result + 1840;
  uint64_t v5 = result + 1856;
  uint64_t v6 = result + 1872;
  int v7 = (void *)(result + 1888);
  uint64_t v33 = result + 16;
  uint64_t v37 = (uint64_t *)(result + 1416);
  uint64_t v38 = result + 1816;
  uint64_t v36 = (uint64_t *)(result + 1032);
  while (1)
  {
    AMSCore::HTTPResponseAction::HTTPResponseAction((uint64_t)v3, v1 + 8);
    uint64_t v8 = *(void *)(v2 + 1976);
    if (v8 && !atomic_fetch_add((atomic_ullong *volatile)(v8 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v10 = *(std::__shared_weak_count **)(v2 + 1976);
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      uint64_t v9 = *(std::__shared_weak_count **)(v2 + 1896);
      if (!v9) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v9 = *(std::__shared_weak_count **)(v2 + 1896);
      if (!v9) {
        goto LABEL_10;
      }
    }
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
LABEL_10:
    char v11 = *(std::__shared_weak_count **)(v2 + 1864);
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      uint64_t v12 = *(std::__shared_weak_count **)(v2 + 1848);
      if (!v12) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v12 = *(std::__shared_weak_count **)(v2 + 1848);
      if (!v12) {
        goto LABEL_16;
      }
    }
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
LABEL_16:
    uint64_t v13 = *(std::__shared_weak_count **)(v2 + 1880);
    if (!v13 || atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      if (*(unsigned char *)(v2 + 1784)) {
        goto LABEL_21;
      }
LABEL_19:
      std::__optional_storage_base<AMSCore::AuthenticateResult,false>::__assign_from[abi:fe180100]<std::__optional_copy_assign_base<AMSCore::AuthenticateResult,false> const&>(v40, v37);
      goto LABEL_21;
    }
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (!*(unsigned char *)(v2 + 1784)) {
      goto LABEL_19;
    }
LABEL_21:
    if (!*(unsigned char *)(v2 + 1832)) {
      std::__optional_storage_base<AMSCore::DialogResult,false>::__assign_from[abi:fe180100]<std::__optional_copy_assign_base<AMSCore::DialogResult,false> const&>(v38, v36);
    }
    if (*(unsigned char *)(v2 + 992) == 1 && *(unsigned char *)(v2 + 1456) != 1) {
      AMSCore::HTTPResponseAction::operator=((uint64_t)v39, (uint64_t)v3);
    }
    uint64_t v14 = *(void *)(v2 + 1960);
    uint64_t v15 = *(void *)(v2 + 1952);
    AMSCore::HTTPResponseAction::~HTTPResponseAction(v3);
    uint64_t v16 = (uint64_t *)(v14 + 8);
    if (v14 + 8 == v15) {
      break;
    }
    *(void *)(v2 + 1960) = v16;
    uint64_t v17 = *(void *)(v2 + 1912);
    uint64_t v18 = *v16;
    *(void *)(v2 + 1872) = *(void *)(v2 + 1904);
    *(void *)(v2 + 1880) = v17;
    if (v17) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v19 = *(void *)(v2 + 1928);
    *(void *)(v2 + 1840) = *(void *)(v2 + 1920);
    *(void *)(v2 + 1848) = v19;
    if (v19) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v20 = *(void *)(v2 + 1944);
    *(void *)(v2 + 1856) = *(void *)(v2 + 1936);
    *(void *)(v2 + 1864) = v20;
    if (v20) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
    }
    __n128 result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v18 + 24))(v18, v6, v4, v5);
    long long v21 = *(_OWORD *)(v2 + 1888);
    *(_OWORD *)(v2 + 1968) = v21;
    void *v7 = 0;
    v7[1] = 0;
    if (!atomic_load_explicit((atomic_ullong *volatile)(v21 + 480), memory_order_acquire))
    {
      *(unsigned char *)(v40 + 232) = 0;
      if (!atomic_exchange((atomic_ullong *volatile)(*(void *)(v2 + 1968) + 480), v2)) {
        return result;
      }
    }
    uint64_t v1 = *(void *)(v2 + 1968);
    if (!*(unsigned char *)(v1 + 472)) {
      goto LABEL_73;
    }
  }
  if (*(unsigned char *)(v2 + 992) == 1)
  {
    std::__optional_move_base<AMSCore::Error,false>::__optional_move_base[abi:fe180100]((AMSCore::Error *)v41, *(void *)(v2 + 1904) + 24);
    if (v44)
    {
      AMSCore::HTTPResponseAction::createCancelAction((AMSCore::HTTPResponseAction *)v45, v41);
      AMSCore::HTTPResponseAction::operator=((uint64_t)v39, (uint64_t)v45);
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)v45);
      if (v44)
      {
        v41[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        uint64_t v22 = v43;
        if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v42, v42[1]);
        MEMORY[0x192FA3C30](v41);
      }
    }
  }
  *(unsigned char *)(v2 + 1712) = 0;
  *(unsigned char *)(v2 + 1744) = 0;
  if (*(unsigned char *)(v2 + 1784))
  {
    long long v23 = *(_OWORD *)(v40 + 16);
    *(_OWORD *)(v2 + 1712) = *(_OWORD *)v40;
    *(void *)uint64_t v40 = 0;
    *(void *)(v40 + 8) = 0;
    *(_OWORD *)(v2 + 1728) = v23;
    *(void *)(v40 + 16) = 0;
    *(void *)(v40 + 24) = 0;
    *(unsigned char *)(v2 + 1744) = 1;
  }
  __n128 v24 = std::__optional_storage_base<AMSCore::AuthenticateResult,false>::__assign_from[abi:fe180100]<std::__optional_move_assign_base<AMSCore::AuthenticateResult,false>>(v2 + 952, v35);
  if (*(unsigned char *)(v2 + 1744))
  {
    char v25 = *(std::__shared_weak_count **)(v2 + 1736);
    if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, __n128))v25->__on_zero_shared)(v25, v24);
      std::__shared_weak_count::__release_weak(v25);
    }
    uint64_t v26 = *(std::__shared_weak_count **)(v2 + 1720);
    if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, __n128))v26->__on_zero_shared)(v26, v24);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  *(unsigned char *)(v2 + 1792) = 0;
  *(unsigned char *)(v2 + 1808) = 0;
  if (*(unsigned char *)(v2 + 1832))
  {
    *(_OWORD *)(v2 + 1792) = *(_OWORD *)v38;
    *(void *)uint64_t v38 = 0;
    *(void *)(v38 + 8) = 0;
    *(unsigned char *)(v2 + 1808) = 1;
  }
  __n128 v27 = std::__optional_storage_base<AMSCore::DialogResult,false>::__assign_from[abi:fe180100]<std::__optional_move_assign_base<AMSCore::DialogResult,false>>((__n128 *)(v2 + 568), v34);
  if (*(unsigned char *)(v2 + 1808))
  {
    uint64_t v28 = *(std::__shared_weak_count **)(v2 + 1800);
    if (v28)
    {
      if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, __n128))v28->__on_zero_shared)(v28, v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  if (*(unsigned char *)(v2 + 488))
  {
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v2 + 24));
    *(unsigned char *)(v2 + 488) = 0;
  }
  AMSCore::HTTPResponseAction::HTTPResponseAction(v2 + 24, (uint64_t)v39);
  *(unsigned char *)(v2 + 488) = 1;
  if (*(unsigned char *)(v2 + 1832))
  {
    uint64_t v29 = *(std::__shared_weak_count **)(v2 + 1824);
    if (v29)
    {
      if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  if (*(unsigned char *)(v2 + 1784))
  {
    uint64_t v30 = *(std::__shared_weak_count **)(v2 + 1776);
    if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
    std::runtime_error v31 = *(std::__shared_weak_count **)(v2 + 1760);
    if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  AMSCore::HTTPResponseAction::~HTTPResponseAction(v39);
  *(void *)(v2 + 536) = v33;
  *(void *)unint64_t v2 = 0;
  return AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend(v32);
}

void sub_18DB036C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, AMSCore::HTTPResponseAction *a16, uint64_t a17, char a18)
{
}

void AMSCore::anonymous namespace'::process(void *__p)
{
  if (*__p)
  {
    uint64_t v2 = __p[247];
    if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v3 = (std::__shared_weak_count *)__p[247];
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)__p[237];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)__p[233];
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = (std::__shared_weak_count *)__p[231];
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    int v7 = (std::__shared_weak_count *)__p[235];
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    if (*((unsigned char *)__p + 1832))
    {
      uint64_t v8 = (std::__shared_weak_count *)__p[228];
      if (v8)
      {
        if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    if (*((unsigned char *)__p + 1784))
    {
      uint64_t v9 = (std::__shared_weak_count *)__p[222];
      if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      uint64_t v10 = (std::__shared_weak_count *)__p[220];
      if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 67));
  }
  char v11 = (void *)__p[66];
  if (v11 == __p + 63)
  {
    (*(void (**)(char *))(__p[63] + 32))((char *)__p + 504);
    if (*((unsigned char *)__p + 488)) {
LABEL_33:
    }
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 3));
  }
  else
  {
    if (v11) {
      (*(void (**)(void *))(*v11 + 40))(v11);
    }
    if (*((unsigned char *)__p + 488)) {
      goto LABEL_33;
    }
  }
  uint64_t v12 = __p[243];
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v12 && !atomic_fetch_add((atomic_ullong *volatile)(__p[243] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v13 = (std::__shared_weak_count *)__p[243];
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = __p[241];
  if (v14 && !atomic_fetch_add((atomic_ullong *volatile)(v14 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v15 = (std::__shared_weak_count *)__p[241];
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = __p[239];
  if (v16 && !atomic_fetch_add((atomic_ullong *volatile)(v16 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v17 = (std::__shared_weak_count *)__p[239];
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  operator delete(__p);
}

void std::__optional_storage_base<AMSCore::AuthenticateResult,false>::__assign_from[abi:fe180100]<std::__optional_copy_assign_base<AMSCore::AuthenticateResult,false> const&>(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned __int8 *)(a1 + 32) == *((unsigned __int8 *)a2 + 32))
  {
    if (*(unsigned char *)(a1 + 32))
    {
      uint64_t v5 = *a2;
      uint64_t v4 = a2[1];
      if (v4) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 8);
      *(void *)a1 = v5;
      *(void *)(a1 + 8) = v4;
      if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      uint64_t v8 = a2[2];
      uint64_t v7 = a2[3];
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = *(std::__shared_weak_count **)(a1 + 24);
      *(void *)(a1 + 16) = v8;
      *(void *)(a1 + 24) = v7;
      if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v10 = *(std::__shared_weak_count **)(a1 + 24);
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    char v11 = *(std::__shared_weak_count **)(a1 + 8);
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    *(unsigned char *)(a1 + 32) = 0;
  }
  else
  {
    uint64_t v12 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v12;
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(a1 + 32) = 1;
  }
}

void std::__optional_storage_base<AMSCore::DialogResult,false>::__assign_from[abi:fe180100]<std::__optional_copy_assign_base<AMSCore::DialogResult,false> const&>(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned __int8 *)(a1 + 16) == *((unsigned __int8 *)a2 + 16))
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v4 = *a2;
      uint64_t v3 = a2[1];
      if (v3) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
      *(void *)a1 = v4;
      *(void *)(a1 + 8) = v3;
      if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  else if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 8);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    *(unsigned char *)(a1 + 16) = 0;
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(a1 + 16) = 1;
  }
}

AMSCore::URL *AMSCore::HTTPResponseAction::operator=(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*(unsigned char *)(a1 + 24))
    {
      uint64_t v4 = (void *)(a1 + 8);
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1, *(unsigned int **)(a1 + 8));
      *(void *)a1 = *(void *)a2;
      uint64_t v5 = (void *)(a2 + 8);
      uint64_t v6 = *(void *)(a2 + 8);
      void *v4 = v6;
      uint64_t v7 = *(void *)(a2 + 16);
      *(void *)(a1 + 16) = v7;
      if (v7)
      {
        *(void *)(v6 + 16) = v4;
        *(void *)a2 = v5;
        void *v5 = 0;
        *(void *)(a2 + 16) = 0;
      }
      else
      {
        *(void *)a1 = v4;
      }
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1, *(unsigned int **)(a1 + 8));
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    uint64_t v8 = (void *)(a2 + 8);
    uint64_t v9 = *(void *)(a2 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v10 = a1 + 8;
    uint64_t v11 = *(void *)(a2 + 16);
    *(void *)(a1 + 16) = v11;
    if (v11)
    {
      *(void *)(v9 + 16) = v10;
      *(void *)a2 = v8;
      void *v8 = 0;
      *(void *)(a2 + 16) = 0;
    }
    else
    {
      *(void *)a1 = v10;
    }
    *(unsigned char *)(a1 + 24) = 1;
  }
  std::__optional_storage_base<AMSCore::DialogResult,false>::__assign_from[abi:fe180100]<std::__optional_move_assign_base<AMSCore::DialogResult,false>>((__n128 *)(a1 + 32), (__n128 *)(a2 + 32));
  __n128 v12 = std::__optional_storage_base<AMSCore::Error,false>::__assign_from[abi:fe180100]<std::__optional_move_assign_base<AMSCore::Error,false>>((std::runtime_error *)(a1 + 56), (std::runtime_error *)(a2 + 56));
  __n128 result = (AMSCore::URL *)(a1 + 136);
  uint64_t v14 = (long long *)(a2 + 136);
  if (*(unsigned __int8 *)(a1 + 288) == *(unsigned __int8 *)(a2 + 288))
  {
    if (*(unsigned char *)(a1 + 288)) {
      AMSCore::URL::operator=((uint64_t)result, v14);
    }
  }
  else if (*(unsigned char *)(a1 + 288))
  {
    AMSCore::URL::~URL(result);
    *(unsigned char *)(a1 + 288) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 136) = 0;
    *(unsigned char *)(a1 + 160) = 0;
    if (*(unsigned char *)(a2 + 160))
    {
      long long v15 = *v14;
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(_OWORD *)__n128 result = v15;
      *(void *)(a2 + 144) = 0;
      *(void *)(a2 + 152) = 0;
      *(void *)uint64_t v14 = 0;
      *(unsigned char *)(a1 + 160) = 1;
    }
    *(unsigned char *)(a1 + 168) = 0;
    *(unsigned char *)(a1 + 192) = 0;
    if (*(unsigned char *)(a2 + 192))
    {
      long long v16 = *(_OWORD *)(a2 + 168);
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = v16;
      *(void *)(a2 + 176) = 0;
      *(void *)(a2 + 184) = 0;
      *(void *)(a2 + 168) = 0;
      *(unsigned char *)(a1 + 192) = 1;
    }
    *(unsigned char *)(a1 + 200) = 0;
    *(unsigned char *)(a1 + 224) = 0;
    if (*(unsigned char *)(a2 + 224))
    {
      long long v17 = *(_OWORD *)(a2 + 200);
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      *(_OWORD *)(a1 + 200) = v17;
      *(void *)(a2 + 208) = 0;
      *(void *)(a2 + 216) = 0;
      *(void *)(a2 + 200) = 0;
      *(unsigned char *)(a1 + 224) = 1;
    }
    *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
    *(void *)(a1 + 240) = a1 + 240;
    *(void *)(a1 + 248) = a1 + 240;
    *(void *)(a1 + 256) = 0;
    if (a1 == a2)
    {
      __break(1u);
      return result;
    }
    uint64_t v18 = *(void *)(a2 + 256);
    if (v18)
    {
      uint64_t v20 = *(void *)(a2 + 240);
      uint64_t v19 = *(uint64_t **)(a2 + 248);
      uint64_t v21 = *v19;
      *(void *)(v21 + 8) = *(void *)(v20 + 8);
      **(void **)(v20 + 8) = v21;
      uint64_t v22 = *(void *)(a1 + 240);
      *(void *)(v22 + 8) = v19;
      uint64_t *v19 = v22;
      *(void *)(a1 + 240) = v20;
      *(void *)(v20 + 8) = a1 + 240;
      *(void *)(a1 + 256) = v18;
      *(void *)(a2 + 256) = 0;
    }
    __n128 v12 = *(__n128 *)(a2 + 264);
    *(void *)(a1 + 280) = *(void *)(a2 + 280);
    *(__n128 *)(a1 + 264) = v12;
    *(void *)(a2 + 272) = 0;
    *(void *)(a2 + 280) = 0;
    *(void *)(a2 + 264) = 0;
    *(unsigned char *)(a1 + 288) = 1;
  }
  char v23 = *(unsigned char *)(a2 + 300);
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  *(unsigned char *)(a1 + 300) = v23;
  uint64_t v24 = a1 + 304;
  if (*(unsigned __int8 *)(a1 + 336) == *(unsigned __int8 *)(a2 + 336))
  {
    if (*(unsigned char *)(a1 + 336)) {
      AMSCore::Any::operator=(a1 + 304, a2 + 304);
    }
    goto LABEL_40;
  }
  if (*(unsigned char *)(a1 + 336))
  {
    uint64_t v25 = *(unsigned int *)(a1 + 328);
    if (v25 != -1) {
      ((void (*)(char *, uint64_t, __n128))off_1EDCA5F28[v25])(&v36, v24, v12);
    }
    *(_DWORD *)(a1 + 328) = -1;
    *(unsigned char *)(a1 + 336) = 0;
    goto LABEL_40;
  }
  *(unsigned char *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 328) = -1;
  uint64_t v26 = *(unsigned int *)(a2 + 328);
  if (v26 == -1) {
    goto LABEL_38;
  }
  ((void (*)(char *, uint64_t, uint64_t, __n128))off_1EDCA5520[v26])(&v37, v24, a2 + 304, v12);
  *(_DWORD *)(a1 + 328) = v26;
  uint64_t v27 = *(unsigned int *)(a2 + 328);
  if (v27 == -1) {
    goto LABEL_38;
  }
  if (v27)
  {
    ((void (*)(char *, uint64_t))off_1EDCA54D0[v27])(&v38, a2 + 304);
LABEL_38:
    *(_DWORD *)(a2 + 328) = 0;
  }
  *(unsigned char *)(a1 + 336) = 1;
LABEL_40:
  *(_WORD *)(a1 + 344) = *(_WORD *)(a2 + 344);
  uint64_t v28 = (void **)(a1 + 352);
  uint64_t v29 = (long long *)(a2 + 352);
  if (*(unsigned __int8 *)(a1 + 376) == *(unsigned __int8 *)(a2 + 376))
  {
    if (*(unsigned char *)(a1 + 376))
    {
      if (*(char *)(a1 + 375) < 0) {
        operator delete(*v28);
      }
      long long v30 = *v29;
      *(void *)(a1 + 368) = *(void *)(a2 + 368);
      *(_OWORD *)uint64_t v28 = v30;
      *(unsigned char *)(a2 + 375) = 0;
      *(unsigned char *)(a2 + 352) = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 376))
  {
    if (*(char *)(a1 + 375) < 0) {
      operator delete(*v28);
    }
    *(unsigned char *)(a1 + 376) = 0;
  }
  else
  {
    long long v31 = *v29;
    *(void *)(a1 + 368) = *(void *)(a2 + 368);
    *(_OWORD *)uint64_t v28 = v31;
    *(void *)(a2 + 360) = 0;
    *(void *)(a2 + 368) = 0;
    *(void *)uint64_t v29 = 0;
    *(unsigned char *)(a1 + 376) = 1;
  }
  uint64_t v32 = (void **)(a1 + 384);
  uint64_t v33 = (long long *)(a2 + 384);
  if (*(unsigned __int8 *)(a1 + 408) == *(unsigned __int8 *)(a2 + 408))
  {
    if (*(unsigned char *)(a1 + 408))
    {
      if (*(char *)(a1 + 407) < 0) {
        operator delete(*v32);
      }
      long long v34 = *v33;
      *(void *)(a1 + 400) = *(void *)(a2 + 400);
      *(_OWORD *)uint64_t v32 = v34;
      *(unsigned char *)(a2 + 407) = 0;
      *(unsigned char *)(a2 + 384) = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 408))
  {
    if (*(char *)(a1 + 407) < 0) {
      operator delete(*v32);
    }
    *(unsigned char *)(a1 + 408) = 0;
  }
  else
  {
    long long v35 = *v33;
    *(void *)(a1 + 400) = *(void *)(a2 + 400);
    *(_OWORD *)uint64_t v32 = v35;
    *(void *)(a2 + 392) = 0;
    *(void *)(a2 + 400) = 0;
    *(void *)uint64_t v33 = 0;
    *(unsigned char *)(a1 + 408) = 1;
  }
  std::__optional_storage_base<AMSCore::AuthenticateResult,false>::__assign_from[abi:fe180100]<std::__optional_move_assign_base<AMSCore::AuthenticateResult,false>>(a1 + 416, (long long *)(a2 + 416));
  *(unsigned char *)(a1 + 456) = *(unsigned char *)(a2 + 456);
  return (AMSCore::URL *)a1;
}

__n128 std::__optional_storage_base<AMSCore::DialogResult,false>::__assign_from[abi:fe180100]<std::__optional_move_assign_base<AMSCore::DialogResult,false>>(__n128 *a1, __n128 *a2)
{
  if (a1[1].n128_u8[0] == a2[1].n128_u8[0])
  {
    if (a1[1].n128_u8[0])
    {
      __n128 result = *a2;
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      uint64_t v4 = (std::__shared_weak_count *)a1->n128_u64[1];
      *a1 = result;
      if (v4)
      {
        if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
  }
  else if (a1[1].n128_u8[0])
  {
    uint64_t v5 = (std::__shared_weak_count *)a1->n128_u64[1];
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    a1[1].n128_u8[0] = 0;
  }
  else
  {
    __n128 result = *a2;
    *a1 = *a2;
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a1[1].n128_u8[0] = 1;
  }
  return result;
}

__n128 std::__optional_storage_base<AMSCore::AuthenticateResult,false>::__assign_from[abi:fe180100]<std::__optional_move_assign_base<AMSCore::AuthenticateResult,false>>(uint64_t a1, long long *a2)
{
  if (*(unsigned __int8 *)(a1 + 32) == *((unsigned __int8 *)a2 + 32))
  {
    if (*(unsigned char *)(a1 + 32))
    {
      long long v4 = *a2;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
      *(_OWORD *)a1 = v4;
      if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      __n128 result = (__n128)a2[1];
      *((void *)a2 + 2) = 0;
      *((void *)a2 + 3) = 0;
      uint64_t v7 = *(std::__shared_weak_count **)(a1 + 24);
      *(__n128 *)(a1 + 16) = result;
      if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 24);
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    uint64_t v9 = *(std::__shared_weak_count **)(a1 + 8);
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    *(unsigned char *)(a1 + 32) = 0;
  }
  else
  {
    *(_OWORD *)a1 = *a2;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    __n128 result = (__n128)a2[1];
    *(__n128 *)(a1 + 16) = result;
    *((void *)a2 + 2) = 0;
    *((void *)a2 + 3) = 0;
    *(unsigned char *)(a1 + 32) = 1;
  }
  return result;
}

void AMSCore::FinanceRequestHandler::~FinanceRequestHandler(AMSCore::FinanceRequestHandler *this)
{
}

void AMSCore::Logger::~Logger(AMSCore::Logger *this)
{
  *(void *)this = &unk_1EDC82878;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x192FA4080);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EDC82878;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t std::__shared_ptr_emplace<AMSCore::Logger>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMSCore::Logger>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC84278;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::Logger>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC84278;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMSCore::OSLogSink>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
}

void std::__shared_ptr_emplace<AMSCore::OSLogSink>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC842E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::OSLogSink>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC842E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *AMSCore::Log::setRedaction(void *a1)
{
  uint64_t v2 = *(void *)(*a1 - 24);
  {
  }
  return a1;
}

void AMSCore::CancellableRequestHandler::handleResponse(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7 = operator new(0x458uLL);
  void *v7 = AMSCore::CancellableRequestHandler::handleResponse;
  v7[1] = AMSCore::CancellableRequestHandler::handleResponse;
  v7[133] = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v7[134] = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v7[135] = a4[1];
  *a4 = 0;
  a4[1] = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *((unsigned char *)v7 + 24) = 0;
  *((unsigned char *)v7 + 488) = 0;
  v7[62] = 0;
  v7[66] = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,void>(v8, (uint64_t)(v7 + 2));
}

void sub_18DB04D14(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  AMSCore::Error::~Error((AMSCore::Error *)va);
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t AMSCore::CancellableRequestHandler::handleResponse(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 1088);
  if (*(unsigned char *)(v1 + 472))
  {
    uint64_t v2 = result;
    uint64_t v3 = (AMSCore::HTTPResponseAction *)(result + 536);
    AMSCore::HTTPResponseAction::HTTPResponseAction(result + 536, v1 + 8);
    if (*(unsigned char *)(v2 + 488))
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v2 + 24));
      *(unsigned char *)(v2 + 488) = 0;
    }
    uint64_t v4 = *(void *)(v2 + 1096);
    AMSCore::HTTPResponseAction::HTTPResponseAction(v2 + 24, (uint64_t)v3);
    *(unsigned char *)(v2 + 488) = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction(v3);
    if (v4 && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)(v2 + 1096) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v5 = *(std::__shared_weak_count **)(v2 + 1096);
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = *(std::__shared_weak_count **)(v2 + 1008);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    uint64_t v7 = *(std::__shared_weak_count **)(v2 + 1056);
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    uint64_t v8 = *(std::__shared_weak_count **)(v2 + 1040);
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    uint64_t v9 = *(std::__shared_weak_count **)(v2 + 1024);
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    *(void *)(v2 + 536) = v2 + 16;
    *(void *)uint64_t v2 = 0;
    return AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend((uint64_t)v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void AMSCore::CancellableRequestHandler::handleResponse(char *__p)
{
  if (*(void *)__p)
  {
    uint64_t v2 = *((void *)__p + 137);
    if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 137);
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 126);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)*((void *)__p + 132);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = (std::__shared_weak_count *)*((void *)__p + 130);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    uint64_t v7 = (std::__shared_weak_count *)*((void *)__p + 128);
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  uint64_t v8 = (char *)*((void *)__p + 66);
  if (v8 == __p + 504)
  {
    (*(void (**)(char *))(*((void *)__p + 63) + 32))(__p + 504);
    if (__p[488]) {
LABEL_21:
    }
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 24));
  }
  else
  {
    if (v8) {
      (*(void (**)(char *))(*(void *)v8 + 40))(v8);
    }
    if (__p[488]) {
      goto LABEL_21;
    }
  }
  uint64_t v9 = *((void *)__p + 135);
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v9 && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)__p + 135) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v10 = (std::__shared_weak_count *)*((void *)__p + 135);
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = *((void *)__p + 134);
  if (v11 && !atomic_fetch_add((atomic_ullong *volatile)(v11 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    __n128 v12 = (std::__shared_weak_count *)*((void *)__p + 134);
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v13 = *((void *)__p + 133);
  if (v13 && !atomic_fetch_add((atomic_ullong *volatile)(v13 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v14 = (std::__shared_weak_count *)*((void *)__p + 133);
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  operator delete(__p);
}

void AMSCore::CancellableRequestHandler::handleCompletion(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7 = operator new(0x458uLL);
  void *v7 = AMSCore::CancellableRequestHandler::handleCompletion;
  v7[1] = AMSCore::CancellableRequestHandler::handleCompletion;
  v7[133] = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v7[134] = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v7[135] = a4[1];
  *a4 = 0;
  a4[1] = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *((unsigned char *)v7 + 24) = 0;
  *((unsigned char *)v7 + 488) = 0;
  v7[62] = 0;
  v7[66] = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,void>(v8, (uint64_t)(v7 + 2));
}

void sub_18DB05710(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  AMSCore::Error::~Error((AMSCore::Error *)va);
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t AMSCore::CancellableRequestHandler::handleCompletion(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 1088);
  if (*(unsigned char *)(v1 + 472))
  {
    uint64_t v2 = result;
    uint64_t v3 = (AMSCore::HTTPResponseAction *)(result + 536);
    AMSCore::HTTPResponseAction::HTTPResponseAction(result + 536, v1 + 8);
    if (*(unsigned char *)(v2 + 488))
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v2 + 24));
      *(unsigned char *)(v2 + 488) = 0;
    }
    uint64_t v4 = *(void *)(v2 + 1096);
    AMSCore::HTTPResponseAction::HTTPResponseAction(v2 + 24, (uint64_t)v3);
    *(unsigned char *)(v2 + 488) = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction(v3);
    if (v4 && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)(v2 + 1096) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v5 = *(std::__shared_weak_count **)(v2 + 1096);
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = *(std::__shared_weak_count **)(v2 + 1008);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    uint64_t v7 = *(std::__shared_weak_count **)(v2 + 1056);
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    uint64_t v8 = *(std::__shared_weak_count **)(v2 + 1040);
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    uint64_t v9 = *(std::__shared_weak_count **)(v2 + 1024);
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    *(void *)(v2 + 536) = v2 + 16;
    *(void *)uint64_t v2 = 0;
    return AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend((uint64_t)v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void AMSCore::CancellableRequestHandler::handleCompletion(char *__p)
{
  if (*(void *)__p)
  {
    uint64_t v2 = *((void *)__p + 137);
    if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 137);
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 126);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)*((void *)__p + 132);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = (std::__shared_weak_count *)*((void *)__p + 130);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    uint64_t v7 = (std::__shared_weak_count *)*((void *)__p + 128);
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  uint64_t v8 = (char *)*((void *)__p + 66);
  if (v8 == __p + 504)
  {
    (*(void (**)(char *))(*((void *)__p + 63) + 32))(__p + 504);
    if (__p[488]) {
LABEL_21:
    }
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 24));
  }
  else
  {
    if (v8) {
      (*(void (**)(char *))(*(void *)v8 + 40))(v8);
    }
    if (__p[488]) {
      goto LABEL_21;
    }
  }
  uint64_t v9 = *((void *)__p + 135);
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v9 && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)__p + 135) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v10 = (std::__shared_weak_count *)*((void *)__p + 135);
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = *((void *)__p + 134);
  if (v11 && !atomic_fetch_add((atomic_ullong *volatile)(v11 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    __n128 v12 = (std::__shared_weak_count *)*((void *)__p + 134);
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v13 = *((void *)__p + 133);
  if (v13 && !atomic_fetch_add((atomic_ullong *volatile)(v13 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v14 = (std::__shared_weak_count *)*((void *)__p + 133);
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  operator delete(__p);
}

void AMSCore::CancellableRequestHandler::~CancellableRequestHandler(AMSCore::CancellableRequestHandler *this)
{
}

void AMSCore::AnonymousCancellableRequestHandler::handleResponse(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = operator new(0x440uLL);
  void *v5 = AMSCore::AnonymousCancellableRequestHandler::handleResponse;
  v5[1] = AMSCore::AnonymousCancellableRequestHandler::handleResponse;
  v5[131] = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v5[132] = a3[1];
  *a3 = 0;
  a3[1] = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *((unsigned char *)v5 + 24) = 0;
  *((unsigned char *)v5 + 488) = 0;
  v5[62] = 0;
  v5[66] = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,void>(v6, (uint64_t)(v5 + 2));
}

void sub_18DB060A4(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  AMSCore::Error::~Error((AMSCore::Error *)va);
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t AMSCore::AnonymousCancellableRequestHandler::handleResponse(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 1064);
  if (*(unsigned char *)(v1 + 472))
  {
    uint64_t v2 = result;
    uint64_t v3 = (AMSCore::HTTPResponseAction *)(result + 536);
    AMSCore::HTTPResponseAction::HTTPResponseAction(result + 536, v1 + 8);
    if (*(unsigned char *)(v2 + 488))
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v2 + 24));
      *(unsigned char *)(v2 + 488) = 0;
    }
    uint64_t v4 = *(void *)(v2 + 1072);
    AMSCore::HTTPResponseAction::HTTPResponseAction(v2 + 24, (uint64_t)v3);
    *(unsigned char *)(v2 + 488) = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction(v3);
    if (v4 && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)(v2 + 1072) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v5 = *(std::__shared_weak_count **)(v2 + 1072);
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = *(std::__shared_weak_count **)(v2 + 1008);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    uint64_t v7 = *(std::__shared_weak_count **)(v2 + 1040);
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    uint64_t v8 = *(std::__shared_weak_count **)(v2 + 1024);
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    *(void *)(v2 + 536) = v2 + 16;
    *(void *)uint64_t v2 = 0;
    return AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend((uint64_t)v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void AMSCore::AnonymousCancellableRequestHandler::handleResponse(char *__p)
{
  if (*(void *)__p)
  {
    uint64_t v2 = *((void *)__p + 134);
    if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 134);
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 126);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)*((void *)__p + 130);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = (std::__shared_weak_count *)*((void *)__p + 128);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  uint64_t v7 = (char *)*((void *)__p + 66);
  if (v7 == __p + 504)
  {
    (*(void (**)(char *))(*((void *)__p + 63) + 32))(__p + 504);
    if (__p[488]) {
LABEL_18:
    }
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 24));
  }
  else
  {
    if (v7) {
      (*(void (**)(char *))(*(void *)v7 + 40))(v7);
    }
    if (__p[488]) {
      goto LABEL_18;
    }
  }
  uint64_t v8 = *((void *)__p + 132);
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v8 && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)__p + 132) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v9 = (std::__shared_weak_count *)*((void *)__p + 132);
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = *((void *)__p + 131);
  if (v10 && !atomic_fetch_add((atomic_ullong *volatile)(v10 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v11 = (std::__shared_weak_count *)*((void *)__p + 131);
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(__p);
}

void AMSCore::AnonymousCancellableRequestHandler::handleCompletion(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = operator new(0x440uLL);
  void *v5 = AMSCore::AnonymousCancellableRequestHandler::handleCompletion;
  v5[1] = AMSCore::AnonymousCancellableRequestHandler::handleCompletion;
  v5[131] = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v5[132] = a3[1];
  *a3 = 0;
  a3[1] = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *((unsigned char *)v5 + 24) = 0;
  *((unsigned char *)v5 + 488) = 0;
  v5[62] = 0;
  v5[66] = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise,AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::get_return_object(void)::DetachPromise,void>(v6, (uint64_t)(v5 + 2));
}

void sub_18DB0693C(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  AMSCore::Error::~Error((AMSCore::Error *)va);
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t AMSCore::AnonymousCancellableRequestHandler::handleCompletion(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 1064);
  if (*(unsigned char *)(v1 + 472))
  {
    uint64_t v2 = result;
    uint64_t v3 = (AMSCore::HTTPResponseAction *)(result + 536);
    AMSCore::HTTPResponseAction::HTTPResponseAction(result + 536, v1 + 8);
    if (*(unsigned char *)(v2 + 488))
    {
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(v2 + 24));
      *(unsigned char *)(v2 + 488) = 0;
    }
    uint64_t v4 = *(void *)(v2 + 1072);
    AMSCore::HTTPResponseAction::HTTPResponseAction(v2 + 24, (uint64_t)v3);
    *(unsigned char *)(v2 + 488) = 1;
    AMSCore::HTTPResponseAction::~HTTPResponseAction(v3);
    if (v4 && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)(v2 + 1072) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v5 = *(std::__shared_weak_count **)(v2 + 1072);
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = *(std::__shared_weak_count **)(v2 + 1008);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    uint64_t v7 = *(std::__shared_weak_count **)(v2 + 1040);
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    uint64_t v8 = *(std::__shared_weak_count **)(v2 + 1024);
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    *(void *)(v2 + 536) = v2 + 16;
    *(void *)uint64_t v2 = 0;
    return AMSCore::Task<AMSCore::HTTPResponseAction,void>::Promise::Awaiter::await_suspend((uint64_t)v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void AMSCore::AnonymousCancellableRequestHandler::handleCompletion(char *__p)
{
  if (*(void *)__p)
  {
    uint64_t v2 = *((void *)__p + 134);
    if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 134);
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 126);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)*((void *)__p + 130);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = (std::__shared_weak_count *)*((void *)__p + 128);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  uint64_t v7 = (char *)*((void *)__p + 66);
  if (v7 == __p + 504)
  {
    (*(void (**)(char *))(*((void *)__p + 63) + 32))(__p + 504);
    if (__p[488]) {
LABEL_18:
    }
      AMSCore::HTTPResponseAction::~HTTPResponseAction((AMSCore::HTTPResponseAction *)(__p + 24));
  }
  else
  {
    if (v7) {
      (*(void (**)(char *))(*(void *)v7 + 40))(v7);
    }
    if (__p[488]) {
      goto LABEL_18;
    }
  }
  uint64_t v8 = *((void *)__p + 132);
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v8 && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)__p + 132) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v9 = (std::__shared_weak_count *)*((void *)__p + 132);
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = *((void *)__p + 131);
  if (v10 && !atomic_fetch_add((atomic_ullong *volatile)(v10 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v11 = (std::__shared_weak_count *)*((void *)__p + 131);
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(__p);
}

void AMSCore::AnonymousCancellableRequestHandler::~AnonymousCancellableRequestHandler(AMSCore::AnonymousCancellableRequestHandler *this)
{
}

void AMSCore::MetricFormatter::formatTimes(uint64_t a1, void *a2)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (!a2[2]) {
    return;
  }
  uint64_t v2 = a2 + 1;
  uint64_t v3 = (void *)*a2;
  if ((void *)*a2 == a2 + 1) {
    return;
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = (uint64_t *)(a1 + 8);
  uint64_t v41 = *(void *)(MEMORY[0x1E4FBA418] + 24);
  uint64_t v42 = *MEMORY[0x1E4FBA418];
  uint64_t v43 = a1 + 8;
  do
  {
    __int16 v9 = *((_WORD *)v3 + 28);
    uint64_t v10 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(a1, (const void **)v3 + 4);
    if (v8 == v10)
    {
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v46);
      AMSCore::Logger::log<char [32],std::string>(v46, 4u, (uint64_t)"metrics", 7, "Missing field in metrics event:", (uint64_t)(v3 + 4));
      uint64_t v13 = (std::__shared_weak_count *)*((void *)&v46 + 1);
      if (!*((void *)&v46 + 1)) {
        goto LABEL_47;
      }
    }
    else
    {
      if (*((unsigned char *)v10 + 80) == 7)
      {
        uint64_t v11 = v10 + 7;
        if (v6 >= v7)
        {
          uint64_t v22 = (v6 - v5) >> 4;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 60) {
            std::vector<std::string>::__throw_length_error[abi:fe180100]();
          }
          if ((v7 - v5) >> 3 > v23) {
            unint64_t v23 = (v7 - v5) >> 3;
          }
          if ((unint64_t)(v7 - v5) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v23;
          }
          if (v24)
          {
            if (v24 >> 60) {
              std::__throw_bad_array_new_length[abi:fe180100]();
            }
            uint64_t v25 = (char *)operator new(16 * v24);
          }
          else
          {
            uint64_t v25 = 0;
          }
          uint64_t v26 = &v25[16 * v22];
          *(void *)uint64_t v26 = v11;
          *((_WORD *)v26 + 4) = v9;
          uint64_t v27 = v26;
          if (v6 == v5)
          {
            uint64_t v8 = (uint64_t *)v43;
          }
          else
          {
            uint64_t v8 = (uint64_t *)v43;
            do
            {
              uint64_t v28 = *((void *)v6 - 2);
              v6 -= 16;
              __int16 v29 = *((_WORD *)v6 + 4);
              *((void *)v27 - 2) = v28;
              v27 -= 16;
              *((_WORD *)v27 + 4) = v29;
            }
            while (v6 != v5);
          }
          uint64_t v7 = &v25[16 * v24];
          uint64_t v6 = v26 + 16;
          if (v5) {
            operator delete(v5);
          }
          uint64_t v5 = v27;
          __n128 v12 = (void *)v3[1];
          if (!v12)
          {
            do
            {
LABEL_51:
              long long v30 = (void *)v3[2];
              BOOL v34 = *v30 == (void)v3;
              uint64_t v3 = v30;
            }
            while (!v34);
            goto LABEL_4;
          }
        }
        else
        {
          *(void *)uint64_t v6 = v11;
          *((_WORD *)v6 + 4) = v9;
          v6 += 16;
          __n128 v12 = (void *)v3[1];
          if (!v12) {
            goto LABEL_51;
          }
        }
        goto LABEL_48;
      }
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v44);
      uint64_t v14 = v44;
      if (*(unsigned __int8 *)(v44 + 8) <= 4u)
      {
        std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v46);
        uint64_t v15 = *(void *)(v46 - 24);
        {
        }
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v46, (uint64_t)"field in metrics event should be a timepoint: ", 46);
        int v16 = *((char *)v3 + 55);
        if (v16 >= 0) {
          uint64_t v17 = (uint64_t)(v3 + 4);
        }
        else {
          uint64_t v17 = v3[4];
        }
        if (v16 >= 0) {
          uint64_t v18 = *((unsigned __int8 *)v3 + 55);
        }
        else {
          uint64_t v18 = v3[5];
        }
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v46, v17, v18);
        uint64_t v19 = v49;
        uint64_t v20 = (char *)&v46 + *(void *)(v46 - 24);
        if ((v20[32] & 5) != 0)
        {
          uint64_t v21 = -1;
        }
        else
        {
          (*(void (**)(long long *__return_ptr))(**((void **)v20 + 5) + 32))(&v53);
          uint64_t v21 = v56;
        }
        *(std::chrono::system_clock::time_point *)&long long v53 = std::chrono::system_clock::now();
        BYTE8(v53) = 4;
        uint64_t v54 = v19;
        uint64_t v55 = v21;
        (*(void (**)(void, const char *, uint64_t, long long *))(**(void **)(v14 + 16) + 16))(*(void *)(v14 + 16), "metrics", 7, &v53);
        *(void *)&long long v46 = v42;
        *(void *)((char *)&v46 + *(void *)(v42 - 24)) = v41;
        *((void *)&v46 + 1) = MEMORY[0x1E4FBA470] + 16;
        if (v51 < 0) {
          operator delete(__p);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x192FA3FD0](&v52);
        uint64_t v8 = (uint64_t *)v43;
      }
      uint64_t v13 = v45;
      if (!v45)
      {
LABEL_47:
        __n128 v12 = (void *)v3[1];
        if (!v12) {
          goto LABEL_51;
        }
        goto LABEL_48;
      }
    }
    if (atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_47;
    }
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    __n128 v12 = (void *)v3[1];
    if (!v12) {
      goto LABEL_51;
    }
    do
    {
LABEL_48:
      long long v30 = v12;
      __n128 v12 = (void *)*v12;
    }
    while (v12);
LABEL_4:
    uint64_t v3 = v30;
  }
  while (v30 != v2);
  if (v5 != v6)
  {
    int v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = v5;
    do
    {
      if (v33[9])
      {
        BOOL v34 = v32 > **(void **)v33 || v31 == 0;
        if (v34) {
          uint64_t v32 = **(void **)v33;
        }
        int v31 = 1;
      }
      v33 += 16;
    }
    while (v33 != v6);
    if (v31)
    {
      uint64_t v35 = v32 % 5000000;
      char v36 = v5;
      do
      {
        if (v36[9])
        {
          char v37 = *(void **)v36;
          if (*(_DWORD *)(*(void *)v36 + 24) != 7) {
            char v37 = 0;
          }
          *v37 -= v35;
        }
        v36 += 16;
      }
      while (v36 != v6);
    }
    char v38 = (uint64_t **)v5;
    do
    {
      uint64_t v39 = *v38;
      uint64_t v40 = **v38;
      switch(*((unsigned char *)v38 + 8))
      {
        case 0:
          *(void *)&long long v46 = v40 / 1000000;
          int v48 = 3;
          AMSCore::Any::operator=((uint64_t)v39, (uint64_t)&v46);
          if (v48 != -1) {
            goto LABEL_79;
          }
          break;
        case 1:
          *(void *)&long long v46 = v40 / 1000;
          int v48 = 3;
          AMSCore::Any::operator=((uint64_t)v39, (uint64_t)&v46);
          if (v48 != -1) {
LABEL_79:
          }
            ((void (*)(long long *, long long *))off_1EDCA5F78[v48])(&v53, &v46);
          break;
        case 2:
          AMSCore::stringify_time_s((uint64_t)&v53, v40, 0);
          long long v46 = v53;
          uint64_t v47 = v54;
          uint64_t v54 = 0;
          long long v53 = 0uLL;
          int v48 = 5;
          AMSCore::Any::operator=((uint64_t)*v38, (uint64_t)&v46);
          if (v48 == -1) {
            goto LABEL_74;
          }
          goto LABEL_85;
        case 3:
          AMSCore::stringify_time_s((uint64_t)&v53, v40, 1);
          long long v46 = v53;
          uint64_t v47 = v54;
          uint64_t v54 = 0;
          long long v53 = 0uLL;
          int v48 = 5;
          AMSCore::Any::operator=((uint64_t)*v38, (uint64_t)&v46);
          if (v48 != -1) {
            goto LABEL_85;
          }
          goto LABEL_74;
        case 4:
          AMSCore::stringify_time_s((uint64_t)&v53, v40, 2);
          long long v46 = v53;
          uint64_t v47 = v54;
          uint64_t v54 = 0;
          long long v53 = 0uLL;
          int v48 = 5;
          AMSCore::Any::operator=((uint64_t)*v38, (uint64_t)&v46);
          if (v48 != -1) {
LABEL_85:
          }
            ((void (*)(uint64_t *, long long *))off_1EDCA5F78[v48])(&v44, &v46);
LABEL_74:
          int v48 = -1;
          if (SHIBYTE(v54) < 0) {
            operator delete((void *)v53);
          }
          break;
        default:
          break;
      }
      v38 += 2;
    }
    while (v38 != (uint64_t **)v6);
  }
  if (v5) {
    operator delete(v5);
  }
}

void sub_18DB075CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::hash<AMSCore::MetricsEventModifier::EventModifierForFieldFilters>::operator()(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v2 = 4 * *(void *)(a1 + 8);
    if (*(double *)(a1 + 8) == 0.0) {
      uint64_t v2 = 0;
    }
    uint64_t v3 = v2 ^ (4 * *(void *)a1);
  }
  else
  {
    uint64_t v3 = 0;
  }
  if (*(unsigned char *)(a1 + 25)) {
    unsigned __int8 v4 = 2 * *(unsigned char *)(a1 + 24);
  }
  else {
    unsigned __int8 v4 = 0;
  }
  uint64_t v5 = v3 ^ v4 & 0xFE;
  if (*(unsigned char *)(a1 + 27)) {
    unsigned __int8 v6 = 2 * *(unsigned char *)(a1 + 26);
  }
  else {
    unsigned __int8 v6 = 0;
  }
  uint64_t v7 = v5 ^ v6 & 0xFE;
  uint64_t v8 = *(void **)(a1 + 32);
  __int16 v9 = (void *)(a1 + 40);
  if (v8 != (void *)(a1 + 40))
  {
    do
    {
      int v14 = *((char *)v8 + 55);
      if (v14 >= 0) {
        uint64_t v15 = v8 + 4;
      }
      else {
        uint64_t v15 = (uint64_t *)v8[4];
      }
      if (v14 >= 0) {
        unint64_t v16 = *((unsigned __int8 *)v8 + 55);
      }
      else {
        unint64_t v16 = v8[5];
      }
      unint64_t v17 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:fe180100](v15, v16);
      uint64_t v18 = (void *)v8[1];
      if (v18)
      {
        do
        {
          uint64_t v19 = v18;
          uint64_t v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          uint64_t v19 = (void *)v8[2];
          BOOL v20 = *v19 == (void)v8;
          uint64_t v8 = v19;
        }
        while (!v20);
      }
      v7 ^= 2 * v17;
      uint64_t v8 = v19;
    }
    while (v19 != v9);
  }
  uint64_t v10 = *(void **)(a1 + 56);
  if (v10 != (void *)(a1 + 64))
  {
    do
    {
      int v21 = *((char *)v10 + 55);
      if (v21 >= 0) {
        uint64_t v22 = v10 + 4;
      }
      else {
        uint64_t v22 = (uint64_t *)v10[4];
      }
      if (v21 >= 0) {
        unint64_t v23 = *((unsigned __int8 *)v10 + 55);
      }
      else {
        unint64_t v23 = v10[5];
      }
      unint64_t v24 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:fe180100](v22, v23);
      uint64_t v25 = (void *)v10[1];
      if (v25)
      {
        do
        {
          uint64_t v26 = v25;
          uint64_t v25 = (void *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          uint64_t v26 = (void *)v10[2];
          BOOL v20 = *v26 == (void)v10;
          uint64_t v10 = v26;
        }
        while (!v20);
      }
      v7 ^= 2 * v24;
      uint64_t v10 = v26;
    }
    while (v26 != (void *)(a1 + 64));
  }
  uint64_t v11 = *(void **)(a1 + 80);
  __n128 v12 = (void *)(a1 + 88);
  if (v11 != v12)
  {
    do
    {
      uint64_t v27 = v11 + 4;
      int v28 = *((char *)v11 + 55);
      if (v28 >= 0) {
        __int16 v29 = v11 + 4;
      }
      else {
        __int16 v29 = (uint64_t *)v11[4];
      }
      if (v28 >= 0) {
        unint64_t v30 = *((unsigned __int8 *)v11 + 55);
      }
      else {
        unint64_t v30 = v11[5];
      }
      unint64_t v31 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:fe180100](v29, v30);
      uint64_t v32 = (void *)v11[1];
      if (v32)
      {
        do
        {
          uint64_t v33 = v32;
          uint64_t v32 = (void *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          uint64_t v33 = (void *)v11[2];
          BOOL v20 = *v33 == (void)v11;
          uint64_t v11 = v33;
        }
        while (!v20);
      }
      v7 ^= 4 * (v27[4] ^ v27[3] ^ v31);
      uint64_t v11 = v33;
    }
    while (v33 != v12);
  }
  return v7;
}

void AMSCore::LoadURLMetricsEvent::withHTTPTransactionMetrics(AMSCore::LoadURLMetricsEvent *this, const AMSCore::HTTPTransactionMetrics *a2)
{
  v69.__r_.__value_.__s.__data_[0] = 0;
  char v70 = 0;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (*((unsigned char *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else {
      std::string v69 = *(std::string *)a2;
    }
    char v70 = 1;
  }
  v72.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v72.__r_.__value_.__r.__words[1] = xmmword_18DDE9B60;
  strcpy(v72.__r_.__value_.__l.__data_, "cellularDataBearerTechnology");
  __p.__r_.__value_.__s.__data_[0] = 0;
  char v75 = 0;
  if (v4)
  {
    std::string __p = v69;
    memset(&v69, 0, sizeof(v69));
    char v75 = 1;
    std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>((void **)this + 9, (const std::string::value_type **)&v72.__r_.__value_.__l.__data_, (long long *)&__p);
    if (v75 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v5 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&v72.__r_.__value_.__l.__data_);
    if ((uint64_t *)((char *)this + 80) != v5) {
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((void *)this + 9, (uint64_t)v5);
    }
    std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((void *)this + 16, (const void **)&v72.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_11:
      if (!v70) {
        goto LABEL_19;
      }
      goto LABEL_17;
    }
  }
  operator delete(v72.__r_.__value_.__l.__data_);
  if (!v70) {
    goto LABEL_19;
  }
LABEL_17:
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
LABEL_19:
  if (*((unsigned char *)a2 + 40))
  {
    uint64_t v6 = *((void *)a2 + 4);
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 19;
    strcpy((char *)&__p, "connectionStartTime");
    AMSCore::IMetricsProvider::Event::withTimePoint((uint64_t)this, (uint64_t)&__p, v6, 0, 1);
    if (*((unsigned char *)a2 + 56)) {
      goto LABEL_21;
    }
LABEL_26:
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 17;
    strcpy((char *)&__p, "connectionEndTime");
    __n128 v12 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
    if ((uint64_t *)((char *)this + 80) != v12) {
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((void *)this + 9, (uint64_t)v12);
    }
    std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((void *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
    if (*((unsigned char *)a2 + 72)) {
      goto LABEL_22;
    }
    goto LABEL_29;
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 19;
  strcpy((char *)&__p, "connectionStartTime");
  uint64_t v11 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  if ((uint64_t *)((char *)this + 80) != v11) {
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((void *)this + 9, (uint64_t)v11);
  }
  std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((void *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
  if (!*((unsigned char *)a2 + 56)) {
    goto LABEL_26;
  }
LABEL_21:
  uint64_t v7 = *((void *)a2 + 6);
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&__p, "connectionEndTime");
  AMSCore::IMetricsProvider::Event::withTimePoint((uint64_t)this, (uint64_t)&__p, v7, 0, 1);
  if (*((unsigned char *)a2 + 72))
  {
LABEL_22:
    uint64_t v8 = *((void *)a2 + 8);
    __int16 v9 = (char *)operator new(0x20uLL);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_18DDE9B30;
    strcpy(v9, "secureConnectionStartTime");
    AMSCore::IMetricsProvider::Event::withTimePoint((uint64_t)this, (uint64_t)&__p, v8, 0, 1);
    uint64_t v10 = v9;
    goto LABEL_32;
  }
LABEL_29:
  uint64_t v13 = (char *)operator new(0x20uLL);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_18DDE9B30;
  strcpy(v13, "secureConnectionStartTime");
  int v14 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  if ((uint64_t *)((char *)this + 80) != v14) {
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((void *)this + 9, (uint64_t)v14);
  }
  std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((void *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
  uint64_t v10 = v13;
LABEL_32:
  operator delete(v10);
  if (*((unsigned char *)a2 + 88))
  {
    uint64_t v15 = *((void *)a2 + 10);
    unint64_t v16 = (char *)operator new(0x19uLL);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_18DDE9B20;
    strcpy(v16, "secureConnectionEndTime");
    AMSCore::IMetricsProvider::Event::withTimePoint((uint64_t)this, (uint64_t)&__p, v15, 0, 1);
    unint64_t v17 = v16;
  }
  else
  {
    uint64_t v18 = (char *)operator new(0x19uLL);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_18DDE9B20;
    strcpy(v18, "secureConnectionEndTime");
    uint64_t v19 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
    if ((uint64_t *)((char *)this + 80) != v19) {
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((void *)this + 9, (uint64_t)v19);
    }
    std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((void *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
    unint64_t v17 = v18;
  }
  operator delete(v17);
  if (*((unsigned char *)a2 + 104))
  {
    uint64_t v20 = *((void *)a2 + 12);
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 21;
    strcpy((char *)&__p, "domainLookupStartTime");
    AMSCore::IMetricsProvider::Event::withTimePoint((uint64_t)this, (uint64_t)&__p, v20, 0, 1);
    if (*((unsigned char *)a2 + 120))
    {
LABEL_39:
      uint64_t v21 = *((void *)a2 + 14);
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 19;
      strcpy((char *)&__p, "domainLookupEndTime");
      AMSCore::IMetricsProvider::Event::withTimePoint((uint64_t)this, (uint64_t)&__p, v21, 0, 1);
      goto LABEL_46;
    }
  }
  else
  {
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 21;
    strcpy((char *)&__p, "domainLookupStartTime");
    uint64_t v22 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
    if ((uint64_t *)((char *)this + 80) != v22) {
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((void *)this + 9, (uint64_t)v22);
    }
    std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((void *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
    if (*((unsigned char *)a2 + 120)) {
      goto LABEL_39;
    }
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 19;
  strcpy((char *)&__p, "domainLookupEndTime");
  unint64_t v23 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  if ((uint64_t *)((char *)this + 80) != v23) {
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((void *)this + 9, (uint64_t)v23);
  }
  std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((void *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
LABEL_46:
  if (*((void *)a2 + 16) == *((void *)a2 + 17))
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    char v75 = 0;
    AMSCore::LoadURLMetricsEvent::withDNSServers((uint64_t)this, (uint64_t)&__p);
    if (v75 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
LABEL_75:
    if (*((unsigned char *)a2 + 160))
    {
      uint64_t v38 = *((void *)a2 + 19);
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 14;
      strcpy((char *)&__p, "fetchStartTime");
      AMSCore::IMetricsProvider::Event::withTimePoint((uint64_t)this, (uint64_t)&__p, v38, 0, 1);
    }
    else
    {
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 14;
      strcpy((char *)&__p, "fetchStartTime");
      uint64_t v39 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
      if ((uint64_t *)((char *)this + 80) != v39) {
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((void *)this + 9, (uint64_t)v39);
      }
      std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((void *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
    }
    unsigned int v40 = *((unsigned __int16 *)a2 + 140);
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 14;
    strcpy((char *)&__p, "cachedResponse");
    LOWORD(v72.__r_.__value_.__l.__data_) = v40;
    if (v40 >= 0x100)
    {
      std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<BOOL>((void **)this + 9, (const std::string::value_type **)&__p.__r_.__value_.__l.__data_, &v72);
    }
    else
    {
      uint64_t v41 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
      if ((uint64_t *)((char *)this + 80) != v41) {
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((void *)this + 9, (uint64_t)v41);
      }
      std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((void *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (*((unsigned char *)a2 + 176)) {
        goto LABEL_87;
      }
    }
    else if (*((unsigned char *)a2 + 176))
    {
LABEL_87:
      uint64_t v42 = *((void *)a2 + 21);
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 16;
      strcpy((char *)&__p, "requestStartTime");
      AMSCore::IMetricsProvider::Event::withTimePoint((uint64_t)this, (uint64_t)&__p, v42, 0, 1);
      goto LABEL_92;
    }
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 16;
    strcpy((char *)&__p, "requestStartTime");
    uint64_t v43 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
    if ((uint64_t *)((char *)this + 80) != v43) {
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((void *)this + 9, (uint64_t)v43);
    }
    std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((void *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
LABEL_92:
    if (*((unsigned char *)a2 + 192))
    {
      uint64_t v44 = *((void *)a2 + 23);
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 14;
      strcpy((char *)&__p, "requestEndTime");
      AMSCore::IMetricsProvider::Event::withTimePoint((uint64_t)this, (uint64_t)&__p, v44, 0, 1);
    }
    else
    {
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 14;
      strcpy((char *)&__p, "requestEndTime");
      uint64_t v45 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
      if ((uint64_t *)((char *)this + 80) != v45) {
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((void *)this + 9, (uint64_t)v45);
      }
      std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((void *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
    }
    std::string::size_type v46 = *((void *)a2 + 25);
    std::string::size_type v47 = *((void *)a2 + 26);
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 18;
    strcpy((char *)&__p, "requestMessageSize");
    v72.__r_.__value_.__r.__words[0] = v46;
    v72.__r_.__value_.__l.__size_ = v47;
    if ((_BYTE)v47)
    {
      std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<unsigned long long>((void **)this + 9, (const std::string::value_type **)&__p.__r_.__value_.__l.__data_, (uint64_t **)&v72);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_99;
      }
    }
    else
    {
      long long v53 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
      if ((uint64_t *)((char *)this + 80) != v53) {
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((void *)this + 9, (uint64_t)v53);
      }
      std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((void *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_99:
        std::string::size_type v48 = *((void *)a2 + 27);
        std::string::size_type v49 = *((void *)a2 + 28);
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 19;
        strcpy((char *)&__p, "responseMessageSize");
        v72.__r_.__value_.__r.__words[0] = v48;
        v72.__r_.__value_.__l.__size_ = v49;
        if ((_BYTE)v49)
        {
          std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<unsigned long long>((void **)this + 9, (const std::string::value_type **)&__p.__r_.__value_.__l.__data_, (uint64_t **)&v72);
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_101;
          }
        }
        else
        {
          uint64_t v54 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
          if ((uint64_t *)((char *)this + 80) != v54) {
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((void *)this + 9, (uint64_t)v54);
          }
          std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((void *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_101:
            std::string::size_type v51 = *((void *)a2 + 29);
            std::string::size_type v50 = *((void *)a2 + 30);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
            *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_18DDE9BB0;
            strcpy(__p.__r_.__value_.__l.__data_, "responseMessageSizeUncompressed");
            v72.__r_.__value_.__r.__words[0] = v51;
            v72.__r_.__value_.__l.__size_ = v50;
            if ((_BYTE)v50)
            {
              std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<unsigned long long>((void **)this + 9, (const std::string::value_type **)&__p.__r_.__value_.__l.__data_, (uint64_t **)&v72);
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_103;
              }
            }
            else
            {
              uint64_t v55 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
              if ((uint64_t *)((char *)this + 80) != v55) {
                std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((void *)this + 9, (uint64_t)v55);
              }
              std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((void *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_103:
                if (*((unsigned char *)a2 + 256))
                {
LABEL_104:
                  uint64_t v52 = *((void *)a2 + 31);
                  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 17;
                  strcpy((char *)&__p, "responseStartTime");
                  AMSCore::IMetricsProvider::Event::withTimePoint((uint64_t)this, (uint64_t)&__p, v52, 0, 1);
                  goto LABEL_120;
                }
LABEL_117:
                *((unsigned char *)&__p.__r_.__value_.__s + 23) = 17;
                strcpy((char *)&__p, "responseStartTime");
                uint64_t v56 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
                if ((uint64_t *)((char *)this + 80) != v56) {
                  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((void *)this + 9, (uint64_t)v56);
                }
                std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((void *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
LABEL_120:
                if (*((unsigned char *)a2 + 272))
                {
                  uint64_t v57 = *((void *)a2 + 33);
                  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 15;
                  strcpy((char *)&__p, "responseEndTime");
                  AMSCore::IMetricsProvider::Event::withTimePoint((uint64_t)this, (uint64_t)&__p, v57, 0, 1);
                }
                else
                {
                  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 15;
                  strcpy((char *)&__p, "responseEndTime");
                  char v58 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
                  if ((uint64_t *)((char *)this + 80) != v58) {
                    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((void *)this + 9, (uint64_t)v58);
                  }
                  std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((void *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
                }
                unsigned int v59 = *((unsigned __int16 *)a2 + 141);
                *((unsigned char *)&__p.__r_.__value_.__s + 23) = 16;
                strcpy((char *)&__p, "connectionReused");
                LOWORD(v72.__r_.__value_.__l.__data_) = v59;
                if (v59 >= 0x100)
                {
                  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<BOOL>((void **)this + 9, (const std::string::value_type **)&__p.__r_.__value_.__l.__data_, &v72);
                }
                else
                {
                  unint64_t v60 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
                  if ((uint64_t *)((char *)this + 80) != v60) {
                    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((void *)this + 9, (uint64_t)v60);
                  }
                  std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((void *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                std::string::size_type v61 = *((void *)a2 + 36);
                std::string::size_type v62 = *((void *)a2 + 37);
                *((unsigned char *)&__p.__r_.__value_.__s + 23) = 13;
                strcpy((char *)&__p, "redirectCount");
                v72.__r_.__value_.__r.__words[0] = v61;
                v72.__r_.__value_.__l.__size_ = v62;
                if ((_BYTE)v62)
                {
                  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<unsigned long long>((void **)this + 9, (const std::string::value_type **)&__p.__r_.__value_.__l.__data_, (uint64_t **)&v72);
                  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_134:
                    unsigned int v63 = *((unsigned __int16 *)a2 + 152);
                    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 10;
                    strcpy((char *)&__p, "TFOEnabled");
                    LOWORD(v72.__r_.__value_.__l.__data_) = v63;
                    if (v63 >= 0x100)
                    {
                      std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<BOOL>((void **)this + 9, (const std::string::value_type **)&__p.__r_.__value_.__l.__data_, &v72);
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__p.__r_.__value_.__l.__data_);
                      }
                    }
                    else
                    {
                      uint64_t v64 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
                      if ((uint64_t *)((char *)this + 80) != v64) {
                        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((void *)this + 9, (uint64_t)v64);
                      }
                      std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((void *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
                    }
                    v67.__r_.__value_.__s.__data_[0] = 0;
                    char v68 = 0;
                    if (*((unsigned char *)a2 + 336))
                    {
                      if (*((char *)a2 + 335) < 0) {
                        std::string::__init_copy_ctor_external(&v67, *((const std::string::value_type **)a2 + 39), *((void *)a2 + 40));
                      }
                      else {
                        std::string v67 = *(std::string *)((unsigned char *)a2 + 13);
                      }
                      char v68 = 1;
                      *((unsigned char *)&v72.__r_.__value_.__s + 23) = 17;
                      strcpy((char *)&v72, "resolvedIPAddress");
                      std::string __p = v67;
                      memset(&v67, 0, sizeof(v67));
                      char v75 = 1;
                      std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>((void **)this + 9, (const std::string::value_type **)&v72.__r_.__value_.__l.__data_, (long long *)&__p);
                      if (v75 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__p.__r_.__value_.__l.__data_);
                      }
                    }
                    else
                    {
                      *((unsigned char *)&v72.__r_.__value_.__s + 23) = 17;
                      strcpy((char *)&v72, "resolvedIPAddress");
                      __p.__r_.__value_.__s.__data_[0] = 0;
                      char v75 = 0;
                      uint64_t v66 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&v72.__r_.__value_.__l.__data_);
                      if ((uint64_t *)((char *)this + 80) != v66) {
                        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((void *)this + 9, (uint64_t)v66);
                      }
                      std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((void *)this + 16, (const void **)&v72.__r_.__value_.__l.__data_);
                    }
                    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v72.__r_.__value_.__l.__data_);
                    }
                    if (v68)
                    {
                      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v67.__r_.__value_.__l.__data_);
                      }
                    }
                    return;
                  }
                }
                else
                {
                  uint64_t v65 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)this + 72, (const void **)&__p.__r_.__value_.__l.__data_);
                  if ((uint64_t *)((char *)this + 80) != v65) {
                    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((void *)this + 9, (uint64_t)v65);
                  }
                  std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((void *)this + 16, (const void **)&__p.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_134;
                  }
                }
                operator delete(__p.__r_.__value_.__l.__data_);
                goto LABEL_134;
              }
            }
            operator delete(__p.__r_.__value_.__l.__data_);
            if (*((unsigned char *)a2 + 256)) {
              goto LABEL_104;
            }
            goto LABEL_117;
          }
        }
        operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_101;
      }
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_99;
  }
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&__p);
  uint64_t v24 = *((void *)a2 + 16);
  if (*((void *)a2 + 17) == v24
    || ((int v25 = *(char *)(v24 + 23), v25 >= 0) ? (v26 = *((void *)a2 + 16)) : (v26 = *(void *)v24),
        v25 >= 0 ? (uint64_t v27 = *(unsigned __int8 *)(v24 + 23)) : (uint64_t v27 = *(void *)(v24 + 8)),
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__p, v26, v27),
        0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 17) - *((void *)a2 + 16)) >> 3) < 2))
  {
LABEL_64:
    std::stringbuf::str[abi:fe180100]((uint64_t)&__p.__r_.__value_.__l.__size_, &v71);
    std::string v72 = v71;
    memset(&v71, 0, sizeof(v71));
    char v73 = 1;
    AMSCore::LoadURLMetricsEvent::withDNSServers((uint64_t)this, (uint64_t)&v72);
    if (v73 && SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v72.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v71.__r_.__value_.__l.__data_);
    }
    __p.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA418];
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                              + *(void *)(__p.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418]
                                                                                                + 24);
    __p.__r_.__value_.__l.__size_ = MEMORY[0x1E4FBA470] + 16;
    if (v77 < 0) {
      operator delete(v76);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x192FA3FD0](&v78);
    goto LABEL_75;
  }
  uint64_t v28 = 0;
  unint64_t v29 = 1;
  while (1)
  {
    v72.__r_.__value_.__s.__data_[0] = 44;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__p, (uint64_t)&v72, 1);
    uint64_t v30 = *((void *)a2 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((*((void *)a2 + 17) - v30) >> 3) <= v29) {
      break;
    }
    uint64_t v31 = v30 + v28;
    uint64_t v34 = *(void *)(v31 + 24);
    uint64_t v32 = v31 + 24;
    uint64_t v33 = v34;
    int v35 = *(char *)(v32 + 23);
    if (v35 >= 0) {
      uint64_t v36 = v32;
    }
    else {
      uint64_t v36 = v33;
    }
    if (v35 >= 0) {
      uint64_t v37 = *(unsigned __int8 *)(v32 + 23);
    }
    else {
      uint64_t v37 = *(void *)(v32 + 8);
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__p, v36, v37);
    ++v29;
    v28 += 24;
    if (v29 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 17) - *((void *)a2 + 16)) >> 3)) {
      goto LABEL_64;
    }
  }
  __break(1u);
}

void sub_18DB08868(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(a9);
    }
  }
  __clang_call_terminate(a1);
}

char **std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<BOOL>(void **a1, const std::string::value_type **a2, unsigned char *a3)
{
  uint64_t v6 = (uint64_t *)(a1 + 1);
  uint64_t v7 = a1[1];
  if (!v7) {
    goto LABEL_42;
  }
  int v8 = *((char *)a2 + 23);
  if (v8 >= 0) {
    __int16 v9 = (const std::string::value_type *)a2;
  }
  else {
    __int16 v9 = *a2;
  }
  if (v8 >= 0) {
    size_t v10 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v10 = (size_t)a2[1];
  }
  uint64_t v11 = (uint64_t *)(a1 + 1);
  do
  {
    while (1)
    {
      int v12 = *((char *)v7 + 55);
      uint64_t v13 = v12 >= 0 ? v7 + 4 : (uint64_t *)v7[4];
      size_t v14 = v12 >= 0 ? *((unsigned __int8 *)v7 + 55) : v7[5];
      size_t v15 = v10 >= v14 ? v14 : v10;
      int v16 = memcmp(v13, v9, v15);
      if (v16) {
        break;
      }
      if (v14 < v10) {
        goto LABEL_11;
      }
LABEL_9:
      uint64_t v11 = v7;
      uint64_t v7 = (uint64_t *)*v7;
      if (!v7) {
        goto LABEL_26;
      }
    }
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_11:
    uint64_t v7 = (uint64_t *)v7[1];
  }
  while (v7);
LABEL_26:
  if (v11 != v6)
  {
    int v17 = *((char *)v11 + 55);
    if (v17 >= 0) {
      uint64_t v18 = v11 + 4;
    }
    else {
      uint64_t v18 = (void *)v11[4];
    }
    if (v17 >= 0) {
      size_t v19 = *((unsigned __int8 *)v11 + 55);
    }
    else {
      size_t v19 = v11[5];
    }
    if (v19 >= v10) {
      size_t v20 = v10;
    }
    else {
      size_t v20 = v19;
    }
    int v21 = memcmp(v9, v18, v20);
    if (v21)
    {
      if ((v21 & 0x80000000) == 0)
      {
LABEL_38:
        LOBYTE(v28[0]) = *a3;
        int v29 = 1;
        __n128 result = (char **)AMSCore::Any::operator=((uint64_t)(v11 + 7), (uint64_t)v28);
        if (v29 != -1) {
          return (char **)((uint64_t (*)(uint64_t **, uint64_t **))off_1EDCA5FC8[v29])(&v30, v28);
        }
        return result;
      }
    }
    else if (v10 >= v19)
    {
      goto LABEL_38;
    }
    uint64_t v6 = v11;
  }
LABEL_42:
  __n128 result = (char **)std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__find_equal<std::string>(a1, v6, v28, &v30, (const void **)a2);
  if (!*result)
  {
    unint64_t v23 = result;
    uint64_t v24 = (char *)operator new(0x58uLL);
    int v25 = (std::string *)(v24 + 32);
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v25, *a2, (std::string::size_type)a2[1]);
    }
    else
    {
      *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      *((void *)v24 + 6) = a2[2];
    }
    v24[56] = *a3;
    *((_DWORD *)v24 + 20) = 1;
    uint64_t v26 = v28[0];
    *(void *)uint64_t v24 = 0;
    *((void *)v24 + 1) = 0;
    *((void *)v24 + 2) = v26;
    uint64_t *v23 = v24;
    uint64_t v27 = (void *)**a1;
    if (v27)
    {
      *a1 = v27;
      uint64_t v24 = *v23;
    }
    __n128 result = (char **)std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v24);
    a1[2] = (void *)((char *)a1[2] + 1);
  }
  return result;
}

void sub_18DB08B2C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::LoadURLMetricsEvent::withDNSServers(uint64_t a1, uint64_t a2)
{
  HIBYTE(v8[2]) = 21;
  strcpy((char *)v8, "dnsServersIPAddresses");
  LOBYTE(__p[0]) = 0;
  char v7 = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v6 = *(void *)(a2 + 16);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    char v7 = 1;
    std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>((void **)(a1 + 72), v8, (long long *)__p);
    if (v7 && SHIBYTE(v6) < 0) {
      operator delete(__p[0]);
    }
    if ((SHIBYTE(v8[2]) & 0x80000000) == 0) {
      return a1;
    }
LABEL_10:
    operator delete((void *)v8[0]);
    return a1;
  }
  int v4 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(a1 + 72, (const void **)v8);
  if ((uint64_t *)(a1 + 80) != v4) {
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((void *)(a1 + 72), (uint64_t)v4);
  }
  std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((void *)(a1 + 128), (const void **)v8);
  if (SHIBYTE(v8[2]) < 0) {
    goto LABEL_10;
  }
  return a1;
}

uint64_t AMSCore::LoadURLMetricsEvent::withRequestURL(uint64_t a1, uint64_t a2)
{
  char v9 = 10;
  strcpy((char *)v8, "requestUrl");
  LOBYTE(__p[0]) = 0;
  char v7 = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v6 = *(void *)(a2 + 16);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    char v7 = 1;
    std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>((void **)(a1 + 72), v8, (long long *)__p);
    if (v7 && SHIBYTE(v6) < 0) {
      operator delete(__p[0]);
    }
    if ((v9 & 0x80000000) == 0) {
      return a1;
    }
LABEL_10:
    operator delete((void *)v8[0]);
    return a1;
  }
  int v4 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(a1 + 72, (const void **)v8);
  if ((uint64_t *)(a1 + 80) != v4) {
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((void *)(a1 + 72), (uint64_t)v4);
  }
  std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((void *)(a1 + 128), (const void **)v8);
  if (v9 < 0) {
    goto LABEL_10;
  }
  return a1;
}

char **std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<long long>(void **a1, const std::string::value_type **a2, uint64_t **a3)
{
  uint64_t v6 = (uint64_t *)(a1 + 1);
  char v7 = a1[1];
  if (!v7) {
    goto LABEL_42;
  }
  int v8 = *((char *)a2 + 23);
  if (v8 >= 0) {
    char v9 = (const std::string::value_type *)a2;
  }
  else {
    char v9 = *a2;
  }
  if (v8 >= 0) {
    size_t v10 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v10 = (size_t)a2[1];
  }
  uint64_t v11 = (uint64_t *)(a1 + 1);
  do
  {
    while (1)
    {
      int v12 = *((char *)v7 + 55);
      uint64_t v13 = v12 >= 0 ? v7 + 4 : (uint64_t *)v7[4];
      size_t v14 = v12 >= 0 ? *((unsigned __int8 *)v7 + 55) : v7[5];
      size_t v15 = v10 >= v14 ? v14 : v10;
      int v16 = memcmp(v13, v9, v15);
      if (v16) {
        break;
      }
      if (v14 < v10) {
        goto LABEL_11;
      }
LABEL_9:
      uint64_t v11 = v7;
      char v7 = (uint64_t *)*v7;
      if (!v7) {
        goto LABEL_26;
      }
    }
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_11:
    char v7 = (uint64_t *)v7[1];
  }
  while (v7);
LABEL_26:
  if (v11 != v6)
  {
    int v17 = *((char *)v11 + 55);
    if (v17 >= 0) {
      uint64_t v18 = v11 + 4;
    }
    else {
      uint64_t v18 = (void *)v11[4];
    }
    if (v17 >= 0) {
      size_t v19 = *((unsigned __int8 *)v11 + 55);
    }
    else {
      size_t v19 = v11[5];
    }
    if (v19 >= v10) {
      size_t v20 = v10;
    }
    else {
      size_t v20 = v19;
    }
    int v21 = memcmp(v9, v18, v20);
    if (v21)
    {
      if ((v21 & 0x80000000) == 0)
      {
LABEL_38:
        v28[0] = *a3;
        int v29 = 3;
        __n128 result = (char **)AMSCore::Any::operator=((uint64_t)(v11 + 7), (uint64_t)v28);
        if (v29 != -1) {
          return (char **)((uint64_t (*)(uint64_t **, uint64_t **))off_1EDCA5FC8[v29])(&v30, v28);
        }
        return result;
      }
    }
    else if (v10 >= v19)
    {
      goto LABEL_38;
    }
    uint64_t v6 = v11;
  }
LABEL_42:
  __n128 result = (char **)std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__find_equal<std::string>(a1, v6, v28, &v30, (const void **)a2);
  if (!*result)
  {
    unint64_t v23 = result;
    uint64_t v24 = (char *)operator new(0x58uLL);
    int v25 = (std::string *)(v24 + 32);
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v25, *a2, (std::string::size_type)a2[1]);
    }
    else
    {
      *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      *((void *)v24 + 6) = a2[2];
    }
    *((void *)v24 + 7) = *a3;
    *((_DWORD *)v24 + 20) = 3;
    uint64_t v26 = v28[0];
    *(void *)uint64_t v24 = 0;
    *((void *)v24 + 1) = 0;
    *((void *)v24 + 2) = v26;
    uint64_t *v23 = v24;
    uint64_t v27 = (void *)**a1;
    if (v27)
    {
      *a1 = v27;
      uint64_t v24 = *v23;
    }
    __n128 result = (char **)std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v24);
    a1[2] = (void *)((char *)a1[2] + 1);
  }
  return result;
}

void sub_18DB08F50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::LoadURLMetricsEvent::LoadURLMetricsEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v6 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  AMSCore::IMetricsProvider::Event::Event(a1, (long long *)__p, a2);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = &unk_1EDC82118;
  char v10 = 9;
  strcpy((char *)v9, "eventType");
  *(void *)&long long v7 = 0x6C725564616F6CLL;
  __int16 v8 = 263;
  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>((void **)(a1 + 72), v9, &v7);
  if (HIBYTE(v8) && (char)v8 < 0) {
    operator delete((void *)v7);
  }
  if (v10 < 0) {
    operator delete((void *)v9[0]);
  }
  return a1;
}

void sub_18DB09060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

AMSCore::LoadURLMetricsEvent *AMSCore::LoadURLMetricsEvent::withConfig(AMSCore::LoadURLMetricsEvent *this, const std::runtime_error *a2)
{
  if (LOBYTE(a2[4].__imp_.__imp_))
  {
    int v4 = (uint64_t *)a2->__vftable;
    __p[0].__vftable = (std::runtime_error_vtbl *)operator new(0x28uLL);
    *(_OWORD *)&__p[0].__imp_.__imp_ = xmmword_18DDE9BC0;
    strcpy((char *)__p[0].__vftable, "xpSamplingPercentageCachedResponses");
    char v10 = v4;
    uint64_t v11 = 1;
    std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<double>((void **)this + 9, (const std::string::value_type **)__p, &v10);
    if (SHIBYTE(__p[1].__vftable) < 0) {
      operator delete(__p[0].__vftable);
    }
  }
  else
  {
    AMSCore::Error::Error(__p, a2);
    char v9 = 0;
    ((void (*)(std::runtime_error *))__p[0].~runtime_error)(__p);
  }
  uint64_t v5 = (uint64_t *)a2[5].__vftable;
  __p[0].__vftable = (std::runtime_error_vtbl *)operator new(0x20uLL);
  *(_OWORD *)&__p[0].__imp_.__imp_ = xmmword_18DDE9B30;
  strcpy((char *)__p[0].__vftable, "xpSamplingPercentageUsers");
  char v10 = v5;
  uint64_t v11 = 1;
  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<double>((void **)this + 9, (const std::string::value_type **)__p, &v10);
  if (SHIBYTE(__p[1].__vftable) < 0) {
    operator delete(__p[0].__vftable);
  }
  char imp = (uint64_t *)a2[5].__imp_.__imp_;
  HIBYTE(__p[1].__vftable) = 17;
  strcpy((char *)__p, "xpSessionDuration");
  char v10 = imp;
  uint64_t v11 = 1;
  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<long long>((void **)this + 9, (const std::string::value_type **)__p, &v10);
  if (SHIBYTE(__p[1].__vftable) < 0) {
    operator delete(__p[0].__vftable);
  }
  return this;
}

uint64_t AMSCore::LoadURLMetricsEvent::withRequestMethod(uint64_t a1, uint64_t a2)
{
  char v9 = 13;
  strcpy((char *)v8, "requestMethod");
  LOBYTE(__p[0]) = 0;
  char v7 = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v6 = *(void *)(a2 + 16);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    char v7 = 1;
    std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>((void **)(a1 + 72), v8, (long long *)__p);
    if (v7 && SHIBYTE(v6) < 0) {
      operator delete(__p[0]);
    }
    if ((v9 & 0x80000000) == 0) {
      return a1;
    }
LABEL_10:
    operator delete((void *)v8[0]);
    return a1;
  }
  int v4 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(a1 + 72, (const void **)v8);
  if ((uint64_t *)(a1 + 80) != v4) {
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((void *)(a1 + 72), (uint64_t)v4);
  }
  std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((void *)(a1 + 128), (const void **)v8);
  if (v9 < 0) {
    goto LABEL_10;
  }
  return a1;
}

void AMSCore::LoadURLMetricsEventConfig::~LoadURLMetricsEventConfig(AMSCore::LoadURLMetricsEventConfig *this)
{
  if ((*((char *)this + 119) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 72)) {
      return;
    }
LABEL_5:
    (**(void (***)(AMSCore::LoadURLMetricsEventConfig *))this)(this);
    return;
  }
  operator delete(*((void **)this + 12));
  if (!*((unsigned char *)this + 72)) {
    goto LABEL_5;
  }
}

void AMSCore::LoadURLMetricsEvent::~LoadURLMetricsEvent(AMSCore::LoadURLMetricsEvent *this)
{
  AMSCore::IMetricsProvider::Event::~Event(this);
  JUMPOUT(0x192FA4080);
}

void AMSCore::LoadURLMetricsEventConfig::fromAnyMap(uint64_t a1, uint64_t a2)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  char imp = 0;
  char v57 = 0;
  int v46 = 0;
  char v47 = 0;
  if (v35)
  {
    int v4 = v29.__vftable;
    AMSCore::getValueByKey((uint64_t)&v29, a2, "metrics/performance/sessionDuration", 0x23uLL);
    if (v35)
    {
      int v5 = (int)v29.__vftable[1].~runtime_error;
      if (v5 == -1) {
        LOBYTE(v5) = 0;
      }
      switch((char)v5)
      {
        case 1:
          unint64_t v10 = 0;
          LOBYTE(v6) = v29.~runtime_error;
          goto LABEL_28;
        case 2:
          uint64_t v6 = (uint64_t)v29.~runtime_error;
          goto LABEL_27;
        case 3:
        case 4:
          uint64_t v6 = (uint64_t)v29.~runtime_error;
          goto LABEL_27;
        case 7:
          uint64_t v6 = (uint64_t)v29.~runtime_error / 1000;
LABEL_27:
          unint64_t v10 = v6 & 0xFFFFFFFFFFFFFF00;
LABEL_28:
          v39.__vftable = (std::runtime_error_vtbl *)(v10 | v6);
          char v45 = 1;
          break;
        default:
          AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[14]>((uint64_t)&v50, 0xCu);
          goto LABEL_16;
      }
    }
    else
    {
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&>((uint64_t)&v50, &v29);
LABEL_16:
      std::runtime_error::runtime_error(&v39, &v50);
      long long v40 = v51;
      uint64_t v11 = (unsigned int *)v53;
      v39.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v41 = v52;
      uint64_t v42 = v53;
      uint64_t v43 = v54;
      if (v54)
      {
        *(void *)(v53 + 16) = &v42;
        uint64_t v52 = &v53;
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        uint64_t v11 = 0;
      }
      else
      {
        uint64_t v41 = &v42;
      }
      long long v44 = v55;
      long long v55 = 0uLL;
      char v45 = 0;
      v50.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v52, v11);
      MEMORY[0x192FA3C30](&v50);
      if (!v35)
      {
        ((void (*)(std::runtime_error *))v29.~runtime_error)(&v29);
        if (v45) {
          goto LABEL_30;
        }
        goto LABEL_21;
      }
    }
    if (v45)
    {
LABEL_30:
      size_t v15 = v39.__vftable;
      AMSCore::getValueByKey((uint64_t)&v29, a2, "metrics/performance/loadUrlTopic", 0x20uLL);
      if (v35)
      {
        int v16 = v29.__vftable;
        if (LODWORD(v29.__vftable[1].~runtime_error) != 5) {
          int v16 = 0;
        }
        if (LODWORD(v29.__vftable[1].~runtime_error) == 5)
        {
          if (SHIBYTE(v16->what) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v39, (const std::string::value_type *)v16->~runtime_error, (std::string::size_type)v16->~runtime_error_0);
          }
          else
          {
            std::runtime_error v17 = *(std::runtime_error *)&v16->~runtime_error;
            *(void *)&long long v40 = v16->what;
            std::runtime_error v39 = v17;
          }
          char v45 = 1;
          if (!v35) {
            goto LABEL_47;
          }
          goto LABEL_42;
        }
        AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[14]>((uint64_t)&v50, 0xCu);
      }
      else
      {
        AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&>((uint64_t)&v50, &v29);
      }
      std::runtime_error::runtime_error(&v39, &v50);
      long long v40 = v51;
      uint64_t v18 = (unsigned int *)v53;
      v39.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v41 = v52;
      uint64_t v42 = v53;
      uint64_t v43 = v54;
      if (v54)
      {
        *(void *)(v53 + 16) = &v42;
        uint64_t v52 = &v53;
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        uint64_t v18 = 0;
      }
      else
      {
        uint64_t v41 = &v42;
      }
      long long v44 = v55;
      long long v55 = 0uLL;
      char v45 = 0;
      v50.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v52, v18);
      MEMORY[0x192FA3C30](&v50);
      if (!v35)
      {
LABEL_47:
        ((void (*)(std::runtime_error *))v29.~runtime_error)(&v29);
        if (!v45)
        {
LABEL_48:
          char v57 = 102;
          char imp = *(const char **)"lientperf";
          ((void (*)(std::runtime_error *))v39.~runtime_error)(&v39);
          char v20 = 0;
          char v21 = 17;
          uint64_t v19 = 0x635F706D615F7078;
          int v22 = v49;
          if (!v49) {
            goto LABEL_49;
          }
          goto LABEL_44;
        }
LABEL_43:
        uint64_t v19 = (uint64_t)v39.__vftable;
        char imp = v39.__imp_.__imp_;
        char v57 = v40;
        char v20 = BYTE1(v40);
        int v46 = *(_DWORD *)((char *)&v40 + 2);
        char v47 = BYTE6(v40);
        char v21 = BYTE7(v40);
        int v22 = v49;
        if (!v49)
        {
LABEL_49:
          AMSCore::Error::Error(&v29, v48);
LABEL_50:
          unsigned __int8 v35 = v22;
          *(void *)&long long v36 = v4;
          *((void *)&v36 + 1) = v15;
          *(void *)&long long v37 = v19;
          *((void *)&v37 + 1) = imp;
          LOBYTE(v38) = v57;
          BYTE1(v38) = v20;
          *(_DWORD *)((char *)&v38 + 2) = v46;
          BYTE6(v38) = v47;
          HIBYTE(v38) = v21;
          if (v22)
          {
            *(void *)a1 = v29.__vftable;
            *(unsigned char *)(a1 + 72) = v22;
            long long v23 = v37;
            *(_OWORD *)(a1 + 80) = v36;
            *(_OWORD *)(a1 + 96) = v23;
            *(void *)(a1 + 112) = v38;
            long long v37 = 0uLL;
            uint64_t v38 = 0;
            *(unsigned char *)(a1 + 120) = 1;
            goto LABEL_57;
          }
          std::runtime_error::runtime_error((std::runtime_error *)a1, &v29);
          *(_OWORD *)(a1 + 16) = v30;
          *(void *)a1 = &unk_1EDC827D8;
          uint64_t v24 = v32;
          *(void *)(a1 + 32) = v31;
          *(void *)(a1 + 40) = v24;
          uint64_t v25 = a1 + 40;
          uint64_t v26 = v33;
          *(void *)(a1 + 48) = v33;
          if (v26)
          {
            *(void *)(v24 + 16) = v25;
            uint64_t v31 = &v32;
            uint64_t v32 = 0;
            uint64_t v33 = 0;
          }
          else
          {
            *(void *)(a1 + 32) = v25;
          }
          *(_OWORD *)(a1 + 56) = v34;
          long long v34 = 0uLL;
          int v27 = v35;
          *(unsigned char *)(a1 + 72) = 0;
          long long v28 = v37;
          *(_OWORD *)(a1 + 80) = v36;
          *(_OWORD *)(a1 + 96) = v28;
          *(void *)(a1 + 112) = v38;
          long long v37 = 0uLL;
          uint64_t v38 = 0;
          *(unsigned char *)(a1 + 120) = 1;
          if (!v27) {
            goto LABEL_56;
          }
          goto LABEL_57;
        }
LABEL_44:
        v29.__vftable = v48[0].__vftable;
        goto LABEL_50;
      }
LABEL_42:
      if (!v45) {
        goto LABEL_48;
      }
      goto LABEL_43;
    }
LABEL_21:
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v29, (uint64_t)&v39);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v29);
    *(_OWORD *)(a1 + 16) = v30;
    *(void *)a1 = &unk_1EDC827D8;
    uint64_t v12 = v32;
    *(void *)(a1 + 32) = v31;
    *(void *)(a1 + 40) = v12;
    uint64_t v13 = a1 + 40;
    uint64_t v14 = v33;
    *(void *)(a1 + 48) = v33;
    if (v14)
    {
      *(void *)(v12 + 16) = v13;
      uint64_t v31 = &v32;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v12 = 0;
    }
    else
    {
      *(void *)(a1 + 32) = v13;
    }
    *(_OWORD *)(a1 + 56) = v34;
    long long v34 = 0uLL;
    *(unsigned char *)(a1 + 120) = 0;
    v29.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v31, (unsigned int *)v12);
    MEMORY[0x192FA3C30](&v29);
    if (!v45) {
      ((void (*)(std::runtime_error *))v39.~runtime_error)(&v39);
    }
    goto LABEL_57;
  }
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v39, (uint64_t)&v29);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v39);
  *(_OWORD *)(a1 + 16) = v40;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v7 = v42;
  *(void *)(a1 + 32) = v41;
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = a1 + 40;
  uint64_t v9 = v43;
  *(void *)(a1 + 48) = v43;
  if (v9)
  {
    *(void *)(v7 + 16) = v8;
    uint64_t v41 = &v42;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v8;
  }
  *(_OWORD *)(a1 + 56) = v44;
  long long v44 = 0uLL;
  *(unsigned char *)(a1 + 120) = 0;
  v39.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v41, (unsigned int *)v7);
  MEMORY[0x192FA3C30](&v39);
  if (!v35) {
LABEL_56:
  }
    ((void (*)(std::runtime_error *))v29.~runtime_error)(&v29);
LABEL_57:
  if (!v49) {
    ((void (*)(std::runtime_error *))v48[0].~runtime_error)(v48);
  }
}

void sub_18DB09BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void (**a10)(void), uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void (**a37)(void),uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  if (!a19) {
    (*a10)(&a10);
  }
  if (!a46)
  {
    (*a37)(&a37);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::anonymous namespace'::getValueByKeyWithType<double>(uint64_t a1, uint64_t a2, void *a3, unint64_t a4)
{
  AMSCore::getValueByKey((uint64_t)v16, a2, a3, a4);
  if (v17)
  {
    int v5 = (int)v16[0].__vftable[1].~runtime_error;
    if (v5 == -1) {
      LOBYTE(v5) = 0;
    }
    switch((char)v5)
    {
      case 1:
        double v6 = 0.0;
        if (LOBYTE(v16[0].~runtime_error)) {
          double v6 = 1.0;
        }
        break;
      case 2:
        double v6 = *(double *)&v16[0].~runtime_error;
        break;
      case 3:
        double v6 = (double)(uint64_t)v16[0].~runtime_error;
        break;
      case 4:
        double v6 = (double)(unint64_t)v16[0].~runtime_error;
        break;
      default:
        AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[14]>((uint64_t)&v10, 0xCu);
        goto LABEL_16;
    }
    *(double *)a1 = v6;
    *(unsigned char *)(a1 + 72) = 1;
    if (!v17) {
      goto LABEL_13;
    }
  }
  else
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&>((uint64_t)&v10, v16);
LABEL_16:
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v10);
    *(_OWORD *)(a1 + 16) = v11;
    *(void *)a1 = &unk_1EDC827D8;
    uint64_t v7 = v13;
    *(void *)(a1 + 32) = v12;
    *(void *)(a1 + 40) = v7;
    uint64_t v8 = a1 + 40;
    uint64_t v9 = v14;
    *(void *)(a1 + 48) = v14;
    if (v9)
    {
      *(void *)(v7 + 16) = v8;
      uint64_t v12 = &v13;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v7 = 0;
    }
    else
    {
      *(void *)(a1 + 32) = v8;
    }
    *(_OWORD *)(a1 + 56) = v15;
    long long v15 = 0uLL;
    *(unsigned char *)(a1 + 72) = 0;
    v10.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v12, (unsigned int *)v7);
    MEMORY[0x192FA3C30](&v10);
    if (!v17) {
LABEL_13:
    }
      ((void (*)(std::runtime_error *))v16[0].~runtime_error)(v16);
  }
}

void sub_18DB09E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void (**a19)(void), uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (!a28) {
    (*a19)(&a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[14]>(uint64_t a1, unsigned int a2)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v9);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v9, (uint64_t)"value missing", 13);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v9.__imp_, &v8);
  v9.__vftable = (std::system_error_vtbl *)*MEMORY[0x1E4FBA418];
  *(std::system_error_vtbl **)((char *)&v9.__vftable + (unint64_t)v9.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
  v9.__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
  if (v15 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FA3FD0](&v16);
  *(void *)&v17.__val_ = a2;
  v17.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v9, v17, &v8);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  v9.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::runtime_error v10 = &v11;
  long long v13 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v9);
  *(std::error_code *)(a1 + 16) = v9.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v4 = v11;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = a1 + 40;
  uint64_t v6 = v12;
  *(void *)(a1 + 48) = v12;
  if (v6)
  {
    *(void *)(v4 + 16) = v5;
    uint64_t v4 = 0;
    std::runtime_error v10 = &v11;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v5;
  }
  *(_OWORD *)(a1 + 56) = v13;
  long long v13 = 0uLL;
  v9.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v4);
  return MEMORY[0x192FA3C30](&v9);
}

void sub_18DB0A0E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::LoadURLMetricsHandler::LoadURLMetricsHandlerTask::uploadMetrics()
{
  uint64_t v0 = (char *)operator new(0xD0uLL);
  *(void *)uint64_t v0 = AMSCore::LoadURLMetricsHandler::LoadURLMetricsHandlerTask::uploadMetrics;
  *((void *)v0 + 1) = AMSCore::LoadURLMetricsHandler::LoadURLMetricsHandlerTask::uploadMetrics;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *(_WORD *)(v0 + 17) = 0;
  *((void *)v0 + 3) = 0;
  *((void *)v0 + 7) = 0;
  std::shared_ptr<AMSCore::Task<void,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,void>::Promise,AMSCore::Task<void,void>::Promise::get_return_object(void)::DetachPromise,void>(&v1, (uint64_t)(v0 + 16));
}

void sub_18DB0A520(void *a1)
{
}

void sub_18DB0A538(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a9);
  if (!*(unsigned char *)(v9 + 136)) {
    (**v10)(v10);
  }
  __cxa_begin_catch(a1);
  std::terminate();
}

std::runtime_error *AMSCore::LoadURLMetricsHandler::LoadURLMetricsHandlerTask::uploadMetrics(std::runtime_error *result)
{
  char imp = result[11].__imp_.__imp_;
  if (imp[88])
  {
    uint64_t v2 = result;
    uint64_t v3 = result + 4;
    char v4 = imp[80];
    if (!v4)
    {
      std::runtime_error::runtime_error(result + 4, (const std::runtime_error *)(imp + 8));
      v2[5] = *(std::runtime_error *)(imp + 24);
      uint64_t v5 = imp + 48;
      uint64_t v6 = *((void *)imp + 6);
      v2[6].__imp_.__imp_ = (const char *)v6;
      p_char imp = (std::runtime_error_vtbl *)&v2[6].__imp_;
      v2[4].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      v2[6].__vftable = (std::runtime_error_vtbl *)*((void *)imp + 5);
      std::string v8 = (std::runtime_error_vtbl *)*((void *)imp + 7);
      v2[7].__vftable = v8;
      if (v8)
      {
        *(void *)(v6 + 16) = p_imp;
        *((void *)imp + 5) = v5;
        void *v5 = 0;
        *((void *)imp + 7) = 0;
      }
      else
      {
        v2[6].__vftable = p_imp;
      }
      uint64_t v9 = (std::runtime_error *)v2[11].__imp_.__imp_;
      *(std::runtime_error *)((char *)v2 + 120) = v9[4];
      v9[4].__vftable = 0;
      v9[4].__imp_.__imp_ = 0;
    }
    LOBYTE(v2[8].__imp_.__imp_) = v4;
    std::runtime_error v10 = v2[12].__vftable;
    if (v10 && !atomic_fetch_add((atomic_ullong *volatile)&v10->~runtime_error_0, 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v11 = (std::__shared_weak_count *)v2[12].__vftable;
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = (std::__shared_weak_count *)v2[9].__imp_.__imp_;
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    long long v13 = v2[11].__vftable;
    v2[11].__vftable = 0;
    if (v13) {
      (*((void (**)(std::runtime_error_vtbl *))v13->~runtime_error + 1))(v13);
    }
    uint64_t v14 = (std::__shared_weak_count *)v2[10].__imp_.__imp_;
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      if (LOBYTE(v2[8].__imp_.__imp_)) {
        goto LABEL_18;
      }
    }
    else if (LOBYTE(v2[8].__imp_.__imp_))
    {
LABEL_18:
      BYTE2(v2[1].__vftable) = 1;
LABEL_25:
      v2[4].__vftable = (std::runtime_error_vtbl *)&v2[1];
      v2->__vftable = 0;
      return (std::runtime_error *)AMSCore::Task<void,void>::Promise::Awaiter::await_suspend((uint64_t)v3);
    }
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v17);
    AMSCore::Logger::log<char [31],AMSCore::Error>(v17, 4u, (uint64_t)"metrics", 7, "Failed to save load url metric", (uint64_t)v3);
    char v15 = v18;
    if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    int imp_low = LOBYTE(v2[8].__imp_.__imp_);
    BYTE2(v2[1].__vftable) = 1;
    if (!imp_low) {
      ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
    }
    goto LABEL_25;
  }
  __break(1u);
  return result;
}

void sub_18DB0A83C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a9);
  if (!*(unsigned char *)(v10 + 136)) {
    (**v9)(v9);
  }
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::LoadURLMetricsHandler::LoadURLMetricsHandlerTask::uploadMetrics(char *__p)
{
  if (*(void *)__p)
  {
    uint64_t v2 = *((void *)__p + 24);
    if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 24);
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    char v4 = (std::__shared_weak_count *)*((void *)__p + 19);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = *((void *)__p + 22);
    *((void *)__p + 22) = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = (std::__shared_weak_count *)*((void *)__p + 21);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  uint64_t v7 = (char *)*((void *)__p + 7);
  if (v7 == __p + 32)
  {
    (*(void (**)(char *))(*((void *)__p + 4) + 32))(__p + 32);
  }
  else if (v7)
  {
    (*(void (**)(char *))(*(void *)v7 + 40))(v7);
  }
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  operator delete(__p);
}

void AMSCore::LoadURLMetricsHandler::handleURLMetrics(std::runtime_error *a1@<X3>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  unsigned __int8 imp = a1[7].__imp_.__imp_;
  std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__union_t>(&v23, imp, a1);
  LOBYTE(v27) = imp;
  uint64_t v7 = (const char *)&a1[9];
  std::string v8 = a1[9].__vftable;
  unsigned __int8 v28 = a1[8].__vftable;
  std::runtime_error v29 = a1[8].__imp_.__imp_;
  long long v30 = (unsigned int *)v8;
  if (a1[9].__imp_.__imp_)
  {
    v8->what = (const char *(__cdecl *)(const std::runtime_error *__hidden))&v30;
    a1[8].__imp_.__imp_ = v7;
    *(void *)uint64_t v7 = 0;
    a1[9].__imp_.__imp_ = 0;
  }
  else
  {
    std::runtime_error v29 = (const char *)&v30;
  }
  std::runtime_error v32 = a1[10];
  a1[10].__vftable = 0;
  a1[10].__imp_.__imp_ = 0;
  AMSCore::ServiceProvider<AMSCore::IMetricsSamplingProvider>::getDefault(&v21);
  uint64_t v9 = v21;
  int v10 = v28;
  int v11 = v27;
  __n128 v12 = std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__union_t>(&v33, v27, &v23);
  char v37 = v11;
  if (v10)
  {
    if (v11)
    {
      if ((*(unsigned int (**)(uint64_t, std::runtime_error *, __n128))(*(void *)v9 + 16))(v9, &v33, v12))
      {
        if (*(unsigned char *)(a2 + 656))
        {
          if (v37) {
            operator new();
          }
        }
        else if (v37)
        {
          operator new();
        }
        __break(1u);
      }
    }
    else
    {
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v38);
      long long v13 = v38.__vftable;
      if (LOBYTE(v38.~runtime_error_0) <= 4u)
      {
        std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v39);
        uint64_t v14 = *(void *)(v39.__r_.__value_.__r.__words[0] - 24);
        {
        }
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Failed to send handleURLMetrics, MetricsConfig missing!", 55);
        uint64_t v15 = v40;
        uint64_t v16 = (char *)&v39 + *(void *)(v39.__r_.__value_.__r.__words[0] - 24);
        if ((v16[32] & 5) != 0)
        {
          uint64_t v17 = -1;
        }
        else
        {
          (*(void (**)(std::runtime_error *__return_ptr))(**((void **)v16 + 5) + 32))(&v44);
          uint64_t v17 = v47;
        }
        v44.__vftable = (std::runtime_error_vtbl *)std::chrono::system_clock::now().__d_.__rep_;
        LOBYTE(v44.__imp_.__imp_) = 4;
        uint64_t v45 = v15;
        uint64_t v46 = v17;
        (*(void (**)(const char *(__cdecl *)(const std::runtime_error *__hidden), const char *, uint64_t, std::runtime_error *))(*(void *)v13->what + 16))(v13->what, "bag", 3, &v44);
        v39.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA418];
        *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words
                                  + *(void *)(v39.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
        v39.__r_.__value_.__l.__size_ = MEMORY[0x1E4FBA470] + 16;
        if (v42 < 0) {
          operator delete(__p);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x192FA3FD0](&v43);
      }
      uint64_t v18 = (std::__shared_weak_count *)v38.__imp_.__imp_;
      if (v38.__imp_.__imp_ && !atomic_fetch_add((atomic_ullong *volatile)v38.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (!v37) {
      goto LABEL_30;
    }
  }
  else if (!v11)
  {
    goto LABEL_30;
  }
  if ((v36 & 0x80000000) == 0)
  {
    if (v34) {
      goto LABEL_31;
    }
LABEL_30:
    ((void (*)(std::runtime_error *, __n128))v33.~runtime_error)(&v33, v12);
    goto LABEL_31;
  }
  operator delete(v35);
  if (!v34) {
    goto LABEL_30;
  }
LABEL_31:
  *a3 = 0;
  uint64_t v19 = v22;
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *, __n128))v19->__on_zero_shared)(v19, v12);
    std::__shared_weak_count::__release_weak(v19);
  }
  char v20 = (std::__shared_weak_count *)v32.__imp_.__imp_;
  if (v32.__imp_.__imp_ && !atomic_fetch_add((atomic_ullong *volatile)v32.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *, __n128))v20->__on_zero_shared)(v20, v12);
    std::__shared_weak_count::__release_weak(v20);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v29, v30);
  if (!(_BYTE)v27) {
    goto LABEL_40;
  }
  if ((v26 & 0x80000000) == 0)
  {
    if (v24) {
      return;
    }
    goto LABEL_40;
  }
  operator delete(v25);
  if (!v24) {
LABEL_40:
  }
    ((void (*)(std::runtime_error *))v23.~runtime_error)(&v23);
}

void sub_18DB0C860(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void AMSCore::LoadURLMetricsHandler::Options::~Options(AMSCore::LoadURLMetricsHandler::Options *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this + 136, *((unsigned int **)this + 18));
  if (!*((unsigned char *)this + 120)) {
    goto LABEL_7;
  }
  if ((*((char *)this + 119) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 72)) {
      return;
    }
    goto LABEL_7;
  }
  operator delete(*((void **)this + 12));
  if (!*((unsigned char *)this + 72)) {
LABEL_7:
  }
    (**(void (***)(AMSCore::LoadURLMetricsHandler::Options *))this)(this);
}

void AMSCore::LoadURLMetricsHandler::OptionsBuilder::make(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 160);
  if (!v3) {
    std::__throw_bad_function_call[abi:fe180100]();
  }
  (*(void (**)(std::runtime_error *__return_ptr))(*(void *)v3 + 48))(v15);
  char v20 = *(unsigned char *)(a2 + 130);
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v21 = &v22;
  uint64_t v5 = *(const void ***)a2;
  if (*(void *)a2 != a2 + 8)
  {
    do
    {
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>(&v21, &v22, v5 + 4, (long long *)v5 + 2);
      __n128 v12 = (const void **)v5[1];
      if (v12)
      {
        do
        {
          long long v13 = (const void ***)v12;
          __n128 v12 = (const void **)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          long long v13 = (const void ***)v5[2];
          BOOL v14 = *v13 == v5;
          uint64_t v5 = (const void **)v13;
        }
        while (!v14);
      }
      uint64_t v5 = (const void **)v13;
    }
    while (v13 != (const void ***)(a2 + 8));
  }
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)&long long v24 = *(void *)(a2 + 40);
  *((void *)&v24 + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  char v7 = v19;
  std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__union_t>((std::runtime_error *)a1, v19, v15);
  uint64_t v9 = v21;
  uint64_t v8 = v22;
  *(void *)(a1 + 144) = v22;
  uint64_t v10 = a1 + 144;
  *(unsigned char *)(a1 + 120) = v7;
  *(unsigned char *)(a1 + 128) = v20;
  *(void *)(a1 + 136) = v9;
  uint64_t v11 = v23;
  *(void *)(a1 + 152) = v23;
  if (v11)
  {
    *(void *)(v8 + 16) = v10;
    uint64_t v8 = 0;
    uint64_t v21 = &v22;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
  }
  else
  {
    *(void *)(a1 + 136) = v10;
  }
  *(_OWORD *)(a1 + 160) = v24;
  long long v24 = 0uLL;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v21, (unsigned int *)v8);
  if (!(_BYTE)v19) {
    goto LABEL_18;
  }
  if ((v18 & 0x80000000) == 0)
  {
    if (v16) {
      return;
    }
    goto LABEL_18;
  }
  operator delete(__p);
  if (!v16) {
LABEL_18:
  }
    ((void (*)(std::runtime_error *))v15[0].~runtime_error)(v15);
}

void sub_18DB0CD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,unsigned int *a27)
{
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v27, a27);
  std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::MetricsEventModifier::MetricsConfig::MetricsConfig(uint64_t a1, long long *a2, uint64_t a3, void *a4)
{
  long long v7 = *a2;
  *(_OWORD *)(a1 + 12) = *(long long *)((char *)a2 + 12);
  *(_OWORD *)a1 = v7;
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  uint64_t v8 = (void *)a2 + 5;
  uint64_t v9 = *((void *)a2 + 5);
  *(void *)(a1 + 40) = v9;
  uint64_t v10 = a1 + 40;
  uint64_t v11 = *((void *)a2 + 6);
  *(void *)(a1 + 48) = v11;
  if (v11)
  {
    *(void *)(v9 + 16) = v10;
    *((void *)a2 + 4) = v8;
    void *v8 = 0;
    *((void *)a2 + 6) = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v10;
  }
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  __n128 v12 = a2 + 4;
  uint64_t v13 = *((void *)a2 + 8);
  *(void *)(a1 + 64) = v13;
  uint64_t v14 = a1 + 64;
  uint64_t v15 = *((void *)a2 + 9);
  *(void *)(a1 + 72) = v15;
  if (v15)
  {
    *(void *)(v13 + 16) = v14;
    *((void *)a2 + 7) = v12;
    void *v12 = 0;
    *((void *)a2 + 9) = 0;
  }
  else
  {
    *(void *)(a1 + 56) = v14;
  }
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  char v16 = (void *)a2 + 11;
  uint64_t v17 = *((void *)a2 + 11);
  *(void *)(a1 + 88) = v17;
  uint64_t v18 = a1 + 88;
  uint64_t v19 = *((void *)a2 + 12);
  *(void *)(a1 + 96) = v19;
  if (v19)
  {
    *(void *)(v17 + 16) = v18;
    *((void *)a2 + 10) = v16;
    *char v16 = 0;
    *((void *)a2 + 12) = 0;
  }
  else
  {
    *(void *)(a1 + 80) = v18;
  }
  long long v20 = *(long long *)((char *)a2 + 104);
  *(unsigned char *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = v20;
  *(unsigned char *)(a1 + 272) = 0;
  std::__optional_storage_base<AMSCore::URL,false>::__construct_from[abi:fe180100]<std::__optional_move_base<AMSCore::URL,false>>(a1 + 120, (long long *)((char *)a2 + 120));
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 280) = *(_OWORD *)a3;
  *(void *)(a1 + 296) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a1 + 304) = *a4;
  uint64_t v21 = (void *)(a1 + 312);
  uint64_t v22 = a4 + 1;
  uint64_t v23 = a4[1];
  *(void *)(a1 + 312) = v23;
  uint64_t v24 = a4[2];
  *(void *)(a1 + 320) = v24;
  if (v24)
  {
    *(void *)(v23 + 16) = v21;
    *a4 = v22;
    void *v22 = 0;
    a4[2] = 0;
  }
  else
  {
    *(void *)(a1 + 304) = v21;
  }
  uint64_t v25 = std::hash<AMSCore::MetricsEventModifier::EventModifierForFieldFilters>::operator()(a1);
  uint64_t v26 = *(void *)(a1 + 104);
  uint64_t v27 = *(unsigned __int8 *)(a1 + 112);
  uint64_t v69 = a1;
  if (*(unsigned char *)(a1 + 272))
  {
    AMSCore::URL::getStringRepresentation((AMSCore::URL *)(a1 + 120), &v70);
    int v28 = SHIBYTE(v70.__r_.__value_.__r.__words[2]);
    std::runtime_error v29 = (void *)v70.__r_.__value_.__r.__words[0];
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v30 = &v70;
    }
    else {
      long long v30 = (std::string *)v70.__r_.__value_.__r.__words[0];
    }
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v70.__r_.__value_.__l.__size_;
    }
    unint64_t v32 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:fe180100]((uint64_t *)v30, size);
    if (v28 < 0) {
      operator delete(v29);
    }
    uint64_t v33 = 2 * v32;
  }
  else
  {
    uint64_t v33 = 0;
  }
  uint64_t v34 = 2 * v26;
  if (!v27) {
    uint64_t v34 = 0;
  }
  uint64_t v35 = 4 * (v33 ^ v25 ^ v34);
  char v36 = *(void **)(a1 + 280);
  char v37 = *(void **)(a1 + 288);
  while (v36 != v37)
  {
    std::string v39 = (void *)*v36;
    if ((void *)*v36 == v36 + 1)
    {
      uint64_t v38 = 0;
    }
    else
    {
      uint64_t v38 = 0;
      do
      {
        int v40 = *((char *)v39 + 55);
        if (v40 >= 0) {
          uint64_t v41 = v39 + 4;
        }
        else {
          uint64_t v41 = (uint64_t *)v39[4];
        }
        if (v40 >= 0) {
          unint64_t v42 = *((unsigned __int8 *)v39 + 55);
        }
        else {
          unint64_t v42 = v39[5];
        }
        v38 ^= 2 * std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:fe180100](v41, v42);
        uint64_t v43 = v39[7];
        for (uint64_t i = v39[8]; v43 != i; v43 += 24)
        {
          int v45 = *(char *)(v43 + 23);
          if (v45 >= 0) {
            uint64_t v46 = (uint64_t *)v43;
          }
          else {
            uint64_t v46 = *(uint64_t **)v43;
          }
          if (v45 >= 0) {
            unint64_t v47 = *(unsigned __int8 *)(v43 + 23);
          }
          else {
            unint64_t v47 = *(void *)(v43 + 8);
          }
          v38 ^= 2 * std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:fe180100](v46, v47);
        }
        uint64_t v48 = (void *)v39[1];
        if (v48)
        {
          do
          {
            unsigned __int8 v49 = v48;
            uint64_t v48 = (void *)*v48;
          }
          while (v48);
        }
        else
        {
          do
          {
            unsigned __int8 v49 = (void *)v39[2];
            BOOL v50 = *v49 == (void)v39;
            std::string v39 = v49;
          }
          while (!v50);
        }
        std::string v39 = v49;
      }
      while (v49 != v36 + 1);
    }
    v35 ^= (4 * std::hash<AMSCore::MetricsEventModifier::EventModifierForFieldFilters>::operator()((uint64_t)(v36 + 3))) ^ (2 * v38);
    v36 += 16;
  }
  long long v51 = *(void **)(a1 + 304);
  if (v51 != v21)
  {
    do
    {
      int v53 = *((char *)v51 + 55);
      if (v53 >= 0) {
        uint64_t v54 = v51 + 4;
      }
      else {
        uint64_t v54 = (uint64_t *)v51[4];
      }
      if (v53 >= 0) {
        unint64_t v55 = *((unsigned __int8 *)v51 + 55);
      }
      else {
        unint64_t v55 = v51[5];
      }
      unint64_t v56 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:fe180100](v54, v55);
      uint64_t v57 = std::hash<AMSCore::MetricsEventModifier::EventModifierForFieldFilters>::operator()((uint64_t)(v51 + 7));
      uint64_t v58 = v51[20];
      uint64_t v59 = *((unsigned __int8 *)v51 + 168);
      if (*((unsigned char *)v51 + 328))
      {
        AMSCore::URL::getStringRepresentation((AMSCore::URL *)(v51 + 22), &v70);
        int v60 = SHIBYTE(v70.__r_.__value_.__r.__words[2]);
        std::string::size_type v61 = (void *)v70.__r_.__value_.__r.__words[0];
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v62 = &v70;
        }
        else {
          std::string::size_type v62 = (std::string *)v70.__r_.__value_.__r.__words[0];
        }
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v63 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v63 = v70.__r_.__value_.__l.__size_;
        }
        unint64_t v64 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:fe180100]((uint64_t *)v62, v63);
        if (v60 < 0) {
          operator delete(v61);
        }
        uint64_t v65 = 2 * v64;
      }
      else
      {
        uint64_t v65 = 0;
      }
      uint64_t v66 = 2 * v58;
      if (!v59) {
        uint64_t v66 = 0;
      }
      std::string v67 = (void *)v51[1];
      if (v67)
      {
        do
        {
          char v68 = v67;
          std::string v67 = (void *)*v67;
        }
        while (v67);
      }
      else
      {
        do
        {
          char v68 = (void *)v51[2];
          BOOL v50 = *v68 == (void)v51;
          long long v51 = v68;
        }
        while (!v50);
      }
      v35 ^= (2 * v56) ^ (4 * (v65 ^ v57 ^ v66));
      long long v51 = v68;
    }
    while (v68 != v21);
  }
  uint64_t result = v69;
  *(void *)(v69 + 328) = v35;
  return result;
}

void sub_18DB0D0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char **a10, void **a11)
{
  a11 = (void **)(a9 + 160);
  std::vector<AMSCore::MetricsEventModifier::MetricsConfig::FieldFilters>::__destroy_vector::operator()[abi:fe180100](&a11);
  AMSCore::MetricsEventModifier::EventModifier::~EventModifier((AMSCore::MetricsEventModifier::EventModifier *)a10);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>>>::destroy(*((void *)a1 + 1));
    if (a1[328]) {
      AMSCore::URL::~URL((AMSCore::URL *)(a1 + 176));
    }
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)a1 + 18));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)a1 + 15));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)a1 + 12));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

void std::vector<AMSCore::MetricsEventModifier::MetricsConfig::FieldFilters>::__destroy_vector::operator()[abi:fe180100](void ***a1)
{
  long long v1 = *a1;
  uint64_t v2 = (char **)**a1;
  if (v2)
  {
    char v4 = (char **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(v4 - 2));
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(v4 - 5));
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(v4 - 8));
        std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(*(v4 - 15));
        v4 -= 16;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void AMSCore::MetricsEventModifier::EventModifier::~EventModifier(AMSCore::MetricsEventModifier::EventModifier *this)
{
  if (*((unsigned char *)this + 272)) {
    AMSCore::URL::~URL((AMSCore::MetricsEventModifier::EventModifier *)((char *)this + 120));
  }
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)this + 11));
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)this + 8));
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)this + 5));
}

void std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(*((void *)a1 + 1));
    uint64_t v2 = *((void *)a1 + 7);
    if (v2)
    {
      uint64_t v3 = *((void *)a1 + 8);
      char v4 = (void *)*((void *)a1 + 7);
      if (v3 != v2)
      {
        do
        {
          if (*(char *)(v3 - 1) < 0) {
            operator delete(*(void **)(v3 - 24));
          }
          v3 -= 24;
        }
        while (v3 != v2);
        char v4 = (void *)*((void *)a1 + 7);
      }
      *((void *)a1 + 8) = v2;
      operator delete(v4);
    }
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

void AMSCore::MetricsEventModifier::MetricsConfig::buildFieldFilters(void **a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  AMSCore::getValueByKey((uint64_t)v149, a2, "overrides", 9uLL);
  uint64_t v3 = (void (**)(void *))v149[0];
  if (!v150)
  {
LABEL_186:
    (*v3)(v149);
    return;
  }
  char v119 = a1;
  if (*(_DWORD *)(v149[0] + 24) == 9)
  {
    char v4 = *(_DWORD *)(v149[0] + 24) == 9 ? (uint64_t *)v149[0] : 0;
    uint64_t v6 = *v4;
    uint64_t v5 = v4[1];
    if (*v4 != v5)
    {
      uint64_t v118 = v4[1];
      while (1)
      {
        if (*(_DWORD *)(v6 + 24) == 8) {
          uint64_t v9 = v6;
        }
        else {
          uint64_t v9 = 0;
        }
        if (*(_DWORD *)(v6 + 24) != 8) {
          goto LABEL_16;
        }
        AMSCore::getValueByKey((uint64_t)v147, v9, "fieldFilters", 0xCuLL);
        AMSCore::getValueByKey((uint64_t)v145, v9, "properties", 0xAuLL);
        int v8 = v146;
        if (!v148 || !v146) {
          goto LABEL_12;
        }
        if (*(_DWORD *)(v147[0] + 24) == 8) {
          break;
        }
LABEL_14:
        if (!v148) {
          (*(void (**)(void *))v147[0])(v147);
        }
LABEL_16:
        v6 += 32;
        if (v6 == v5)
        {
          if (v150) {
            return;
          }
          uint64_t v3 = (void (**)(void *))v149[0];
          goto LABEL_186;
        }
      }
      if (*(_DWORD *)(v147[0] + 24) == 8) {
        uint64_t v10 = (void *)v147[0];
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v133 = 0;
      long long v134 = 0;
      unint64_t v132 = &v133;
      v135[0] = 0;
      v135[16] = 0;
      unint64_t v137 = 0;
      uint64_t v138 = 0;
      *(_DWORD *)&v135[24] = 0;
      char v140 = 0;
      uint64_t v141 = 0;
      uint64_t v136 = &v137;
      unsigned __int8 v139 = &v140;
      char v143 = 0;
      uint64_t v144 = 0;
      char v142 = &v143;
      uint64_t v11 = (void *)*v10;
      int v120 = v10 + 1;
      if ((void *)*v10 == v10 + 1)
      {
LABEL_11:
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v143);
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v140);
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v137);
        std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(v133);
        int v8 = v146;
        uint64_t v5 = v118;
LABEL_12:
        if (!v8) {
          (*(void (**)(void *))v145[0])(v145);
        }
        goto LABEL_14;
      }
      while (1)
      {
        if (*((char *)v11 + 55) < 0)
        {
          uint64_t v13 = (const void *)v11[4];
          size_t v12 = v11[5];
          {
LABEL_108:
            {
              std::set<std::string_view>::set[abi:fe180100]<char const* const*>();
            }
          }
        }
        else
        {
          size_t v12 = *((unsigned __int8 *)v11 + 55);
          uint64_t v13 = v11 + 4;
        }
        uint64_t v14 = qword_1E91C8A48;
        if (!qword_1E91C8A48) {
          goto LABEL_102;
        }
        uint64_t v15 = &qword_1E91C8A48;
        do
        {
          while (1)
          {
            size_t v16 = *(void *)(v14 + 40);
            size_t v17 = v12 >= v16 ? *(void *)(v14 + 40) : v12;
            int v18 = memcmp(*(const void **)(v14 + 32), v13, v17);
            if (v18) {
              break;
            }
            if (v16 >= v12) {
              goto LABEL_44;
            }
LABEL_36:
            uint64_t v14 = *(void *)(v14 + 8);
            if (!v14) {
              goto LABEL_45;
            }
          }
          if (v18 < 0) {
            goto LABEL_36;
          }
LABEL_44:
          uint64_t v15 = (uint64_t *)v14;
          uint64_t v14 = *(void *)v14;
        }
        while (v14);
LABEL_45:
        if (v15 == &qword_1E91C8A48) {
          goto LABEL_102;
        }
        unint64_t v19 = v15[5];
        if (v19 >= v12) {
          size_t v20 = v12;
        }
        else {
          size_t v20 = v15[5];
        }
        int v21 = memcmp(v13, (const void *)v15[4], v20);
        if (v21)
        {
          if (v21 < 0) {
            goto LABEL_102;
          }
        }
        else if (v12 < v19)
        {
          goto LABEL_102;
        }
        uint64_t v22 = v133;
        uint64_t v23 = &v133;
        uint64_t v24 = &v133;
        if (v133)
        {
          int v25 = *((char *)v11 + 55);
          if (v25 >= 0) {
            uint64_t v26 = v11 + 4;
          }
          else {
            uint64_t v26 = (const void *)v11[4];
          }
          if (v25 >= 0) {
            size_t v27 = *((unsigned __int8 *)v11 + 55);
          }
          else {
            size_t v27 = v11[5];
          }
          while (1)
          {
            uint64_t v23 = (char **)v22;
            long long v30 = (char *)*((void *)v22 + 4);
            int v28 = v22 + 32;
            std::runtime_error v29 = v30;
            int v31 = v28[23];
            if (v31 >= 0) {
              unint64_t v32 = v28;
            }
            else {
              unint64_t v32 = v29;
            }
            if (v31 >= 0) {
              size_t v33 = v28[23];
            }
            else {
              size_t v33 = *((void *)v28 + 1);
            }
            if (v33 >= v27) {
              size_t v34 = v27;
            }
            else {
              size_t v34 = v33;
            }
            int v35 = memcmp(v26, v32, v34);
            if (v35)
            {
              if (v35 < 0) {
                goto LABEL_60;
              }
LABEL_74:
              int v36 = memcmp(v32, v26, v34);
              if (v36)
              {
                if ((v36 & 0x80000000) == 0) {
                  goto LABEL_86;
                }
              }
              else if (v33 >= v27)
              {
LABEL_86:
                char v37 = (char *)v23;
                goto LABEL_87;
              }
              uint64_t v22 = v23[1];
              if (!v22)
              {
                uint64_t v24 = v23 + 1;
                break;
              }
            }
            else
            {
              if (v27 >= v33) {
                goto LABEL_74;
              }
LABEL_60:
              uint64_t v22 = *v23;
              uint64_t v24 = v23;
              if (!*v23) {
                break;
              }
            }
          }
        }
        char v37 = (char *)operator new(0x50uLL);
        uint64_t v38 = (std::string *)(v37 + 32);
        if (*((char *)v11 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(v38, (const std::string::value_type *)v11[4], v11[5]);
        }
        else
        {
          long long v39 = *((_OWORD *)v11 + 2);
          *((void *)v37 + 6) = v11[6];
          *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v39;
        }
        *((void *)v37 + 7) = 0;
        *((void *)v37 + 8) = 0;
        *((void *)v37 + 9) = 0;
        *(void *)char v37 = 0;
        *((void *)v37 + 1) = 0;
        *((void *)v37 + 2) = v23;
        *uint64_t v24 = v37;
        int v40 = (uint64_t *)v37;
        if (*v132)
        {
          unint64_t v132 = (char **)*v132;
          int v40 = (uint64_t *)*v24;
        }
        std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>((uint64_t *)v133, v40);
        long long v134 = (char **)((char *)v134 + 1);
LABEL_87:
        if (*((_DWORD *)v11 + 20) == 9)
        {
          uint64_t v41 = *((_DWORD *)v11 + 20) == 9 ? v11 + 7 : 0;
          uint64_t v42 = *v41;
          uint64_t v43 = v41[1];
          if (*v41 != v43)
          {
            do
            {
              if (*(_DWORD *)(v42 + 24) == 5) {
                uint64_t v46 = v42;
              }
              else {
                uint64_t v46 = 0;
              }
              if (*(_DWORD *)(v42 + 24) == 5)
              {
                unint64_t v47 = *((void *)v37 + 8);
                if (v47 < *((void *)v37 + 9))
                {
                  long long v44 = *(_OWORD *)v46;
                  *(void *)(v47 + 16) = *(void *)(v46 + 16);
                  *(_OWORD *)unint64_t v47 = v44;
                  *(void *)(v46 + 8) = 0;
                  *(void *)(v46 + 16) = 0;
                  *(void *)uint64_t v46 = 0;
                  int v45 = (char *)(v47 + 24);
                }
                else
                {
                  int v45 = std::vector<std::string>::__emplace_back_slow_path<std::string>((void **)v37 + 7, v46);
                }
                *((void *)v37 + 8) = v45;
              }
              v42 += 32;
            }
            while (v42 != v43);
          }
        }
LABEL_102:
        uint64_t v48 = (void *)v11[1];
        if (v48)
        {
          do
          {
            unsigned __int8 v49 = v48;
            uint64_t v48 = (void *)*v48;
          }
          while (v48);
        }
        else
        {
          do
          {
            unsigned __int8 v49 = (void *)v11[2];
            BOOL v50 = *v49 == (void)v11;
            uint64_t v11 = v49;
          }
          while (!v50);
        }
        uint64_t v11 = v49;
        if (v49 == v120)
        {
          if (!v134) {
            goto LABEL_11;
          }
          if (!v146)
          {
            __break(1u);
            return;
          }
          if (*(_DWORD *)(v145[0] + 24) == 8)
          {
            if (*(_DWORD *)(v145[0] + 24) == 8) {
              uint64_t v51 = v145[0];
            }
            else {
              uint64_t v51 = 0;
            }
            if (!v131) {
              goto LABEL_127;
            }
            *(_OWORD *)uint64_t v135 = *(_OWORD *)v121;
            *(_OWORD *)&v135[12] = *(_OWORD *)&v121[12];
            std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v137);
            uint64_t v136 = v122;
            unint64_t v137 = v123;
            uint64_t v138 = v124;
            if (v124)
            {
              *((void *)v123 + 2) = &v137;
              long long v122 = &v123;
              uint64_t v123 = 0;
              uint64_t v124 = 0;
            }
            else
            {
              uint64_t v136 = &v137;
            }
            std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v140);
            unsigned __int8 v139 = v125;
            char v140 = v126;
            uint64_t v141 = v127;
            if (v127)
            {
              *((void *)v126 + 2) = &v140;
              long long v125 = &v126;
              uint64_t v126 = 0;
              uint64_t v127 = 0;
            }
            else
            {
              unsigned __int8 v139 = &v140;
            }
            std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v143);
            uint64_t v52 = (char *)v129;
            char v142 = v128;
            char v143 = (char *)v129;
            uint64_t v144 = v130;
            if (v130)
            {
              *(void *)(v129 + 16) = &v143;
              uint64_t v52 = 0;
              int v128 = (char **)&v129;
              uint64_t v129 = 0;
              uint64_t v130 = 0;
              if (v131) {
                goto LABEL_125;
              }
LABEL_127:
              (**(void (***)(unsigned char *))v121)(v121);
            }
            else
            {
              char v142 = &v143;
              if (!v131) {
                goto LABEL_127;
              }
LABEL_125:
              std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v52);
              std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v126);
              std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v123);
            }
          }
          uint64_t v54 = (char *)v119[1];
          unint64_t v53 = (unint64_t)v119[2];
          if ((unint64_t)v54 < v53)
          {
            *(void *)uint64_t v54 = v132;
            unint64_t v55 = v133;
            *((void *)v54 + 1) = v133;
            unint64_t v56 = v54 + 8;
            uint64_t v57 = v134;
            *((void *)v54 + 2) = v134;
            if (v57)
            {
              *((void *)v55 + 2) = v56;
              unint64_t v132 = &v133;
              uint64_t v133 = 0;
              long long v134 = 0;
            }
            else
            {
              *(void *)uint64_t v54 = v56;
            }
            long long v64 = *(_OWORD *)v135;
            *(_OWORD *)(v54 + 36) = *(_OWORD *)&v135[12];
            *(_OWORD *)(v54 + 24) = v64;
            *((void *)v54 + 7) = v136;
            uint64_t v65 = v137;
            *((void *)v54 + 8) = v137;
            uint64_t v66 = v54 + 64;
            uint64_t v67 = v138;
            *((void *)v54 + 9) = v138;
            if (v67)
            {
              *((void *)v65 + 2) = v66;
              uint64_t v136 = &v137;
              unint64_t v137 = 0;
              uint64_t v138 = 0;
            }
            else
            {
              *((void *)v54 + 7) = v66;
            }
            *((void *)v54 + 10) = v139;
            char v68 = v140;
            *((void *)v54 + 11) = v140;
            uint64_t v69 = v54 + 88;
            uint64_t v70 = v141;
            *((void *)v54 + 12) = v141;
            if (v70)
            {
              *((void *)v68 + 2) = v69;
              unsigned __int8 v139 = &v140;
              char v140 = 0;
              uint64_t v141 = 0;
            }
            else
            {
              *((void *)v54 + 10) = v69;
            }
            *((void *)v54 + 13) = v142;
            std::string v71 = v143;
            *((void *)v54 + 14) = v143;
            std::string v72 = v54 + 112;
            uint64_t v73 = v144;
            *((void *)v54 + 15) = v144;
            if (v73)
            {
              *((void *)v71 + 2) = v72;
              char v142 = &v143;
              char v143 = 0;
              uint64_t v144 = 0;
            }
            else
            {
              *((void *)v54 + 13) = v72;
            }
            long long v7 = v54 + 128;
            goto LABEL_10;
          }
          uint64_t v58 = (char *)*v119;
          uint64_t v59 = (v54 - (unsigned char *)*v119) >> 7;
          unint64_t v60 = v59 + 1;
          if ((unint64_t)(v59 + 1) >> 57) {
            std::vector<std::string>::__throw_length_error[abi:fe180100]();
          }
          uint64_t v61 = v53 - (void)v58;
          if (v61 >> 6 > v60) {
            unint64_t v60 = v61 >> 6;
          }
          if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFF80) {
            unint64_t v62 = 0x1FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v62 = v60;
          }
          if (v62)
          {
            if (v62 >> 57) {
              std::__throw_bad_array_new_length[abi:fe180100]();
            }
            std::string::size_type v63 = (char *)operator new(v62 << 7);
          }
          else
          {
            std::string::size_type v63 = 0;
          }
          BOOL v74 = (char ***)&v63[128 * v59];
          char v75 = v133;
          *BOOL v74 = v132;
          v74[1] = (char **)v75;
          std::string v76 = (char **)(v74 + 1);
          char v77 = v134;
          v74[2] = v134;
          if (v77)
          {
            *((void *)v75 + 2) = v76;
            unint64_t v132 = &v133;
            uint64_t v133 = 0;
            long long v134 = 0;
          }
          else
          {
            *BOOL v74 = v76;
          }
          uint64_t v78 = &v63[128 * v59];
          long long v79 = *(_OWORD *)v135;
          uint64_t v81 = v136;
          unint64_t v80 = v137;
          *((void *)v78 + 8) = v137;
          uint64_t v82 = v78 + 64;
          *(_OWORD *)(v82 - 40) = v79;
          *(_OWORD *)(v82 - 28) = *(_OWORD *)&v135[12];
          *((void *)v82 - 1) = v81;
          uint64_t v83 = v138;
          *((void *)v82 + 1) = v138;
          if (v83)
          {
            *((void *)v80 + 2) = v82;
            uint64_t v136 = &v137;
            unint64_t v137 = 0;
            uint64_t v138 = 0;
          }
          else
          {
            *((void *)v82 - 1) = v82;
          }
          uint64_t v84 = &v63[128 * v59];
          char v86 = v139;
          char v85 = v140;
          *((void *)v84 + 11) = v140;
          char v87 = v84 + 88;
          *((void *)v87 - 1) = v86;
          uint64_t v88 = v141;
          *((void *)v87 + 1) = v141;
          if (v88)
          {
            *((void *)v85 + 2) = v87;
            unsigned __int8 v139 = &v140;
            char v140 = 0;
            uint64_t v141 = 0;
          }
          else
          {
            *((void *)v87 - 1) = v87;
          }
          uint64_t v89 = &v63[128 * v59];
          long long v91 = v142;
          uint64_t v90 = v143;
          *((void *)v89 + 14) = v143;
          uint64_t v92 = v89 + 112;
          *((void *)v92 - 1) = v91;
          uint64_t v93 = v144;
          *((void *)v92 + 1) = v144;
          if (v93)
          {
            *((void *)v90 + 2) = v92;
            char v142 = &v143;
            char v143 = 0;
            uint64_t v144 = 0;
          }
          else
          {
            *((void *)v92 - 1) = v92;
          }
          unint64_t v94 = &v63[128 * v62];
          long long v7 = v74 + 16;
          if (v54 == v58)
          {
            *char v119 = v74;
            v119[1] = v7;
            v119[2] = v94;
            if (v54) {
              goto LABEL_183;
            }
          }
          else
          {
            unint64_t v95 = 0;
            do
            {
              char v96 = &v74[v95 / 8];
              *(v96 - 16) = *(char ***)&v54[v95 - 128];
              uint64_t v97 = &v54[v95 - 120];
              uint64_t v98 = *(char ***)v97;
              v74[v95 / 8 - 15] = *(char ***)v97;
              uint64_t v99 = (uint64_t)&v74[v95 / 8 - 15];
              __int16 v100 = *(char ***)&v54[v95 - 112];
              *(v96 - 14) = v100;
              if (v100)
              {
                v98[2] = (char *)v99;
                *(void *)&v54[v95 - 128] = v97;
                *(void *)uint64_t v97 = 0;
                *(void *)&v54[v95 - 112] = 0;
              }
              else
              {
                *(v96 - 16) = (char **)v99;
              }
              uint64_t v101 = &v74[v95 / 8];
              long long v102 = *(_OWORD *)&v54[v95 - 104];
              *(_OWORD *)((char *)v101 - 92) = *(_OWORD *)&v54[v95 - 92];
              *(_OWORD *)(v101 - 13) = v102;
              *(v101 - 9) = *(char ***)&v54[v95 - 72];
              uint64_t v103 = &v54[v95 - 64];
              uint64_t v104 = *(char ***)v103;
              v74[v95 / 8 - 8] = *(char ***)v103;
              uint64_t v105 = (uint64_t)&v74[v95 / 8 - 8];
              uint64_t v106 = *(char ***)&v54[v95 - 56];
              *(v101 - 7) = v106;
              if (v106)
              {
                v104[2] = (char *)v105;
                *(void *)&v54[v95 - 72] = v103;
                *(void *)uint64_t v103 = 0;
                *(void *)&v54[v95 - 56] = 0;
              }
              else
              {
                *(v101 - 9) = (char **)v105;
              }
              uint64_t v107 = &v74[v95 / 8];
              *(v107 - 6) = *(char ***)&v54[v95 - 48];
              char v108 = &v54[v95 - 40];
              unint64_t v109 = *(char ***)v108;
              v74[v95 / 8 - 5] = *(char ***)v108;
              uint64_t v110 = (uint64_t)&v74[v95 / 8 - 5];
              unint64_t v111 = *(char ***)&v54[v95 - 32];
              *(v107 - 4) = v111;
              if (v111)
              {
                v109[2] = (char *)v110;
                *(void *)&v54[v95 - 48] = v108;
                *(void *)char v108 = 0;
                *(void *)&v54[v95 - 32] = 0;
              }
              else
              {
                *(v107 - 6) = (char **)v110;
              }
              uint64_t v112 = &v74[v95 / 8];
              *(v112 - 3) = *(char ***)&v54[v95 - 24];
              uint64_t v113 = &v54[v95 - 16];
              uint64_t v114 = *(char ***)v113;
              v74[v95 / 8 - 2] = *(char ***)v113;
              uint64_t v115 = (uint64_t)&v74[v95 / 8 - 2];
              int v116 = *(char ***)&v54[v95 - 8];
              *(v112 - 1) = v116;
              if (v116)
              {
                v114[2] = (char *)v115;
                *(void *)&v54[v95 - 24] = v113;
                *(void *)uint64_t v113 = 0;
                *(void *)&v54[v95 - 8] = 0;
              }
              else
              {
                *(v112 - 3) = (char **)v115;
              }
              v95 -= 128;
            }
            while (&v54[v95] != v58);
            uint64_t v117 = (char *)*v119;
            uint64_t v54 = (char *)v119[1];
            *char v119 = &v74[v95 / 8];
            v119[1] = v7;
            v119[2] = v94;
            if (v54 != v117)
            {
              do
              {
                std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)v54 - 2));
                std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)v54 - 5));
                std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)v54 - 8));
                std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(*((char **)v54 - 15));
                v54 -= 128;
              }
              while (v54 != v117);
              uint64_t v54 = v117;
            }
            if (!v54) {
              goto LABEL_10;
            }
LABEL_183:
            operator delete(v54);
          }
LABEL_10:
          v119[1] = v7;
          goto LABEL_11;
        }
      }
    }
  }
}

void sub_18DB0DE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void (**a50)(void),uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  AMSCore::MetricsEventModifier::MetricsConfig::FieldFilters::~FieldFilters(&a34);
  if (a59)
  {
    if (*(unsigned char *)(v59 - 176))
    {
LABEL_3:
      if (*(unsigned char *)(v59 - 96)) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    (*a50)(&a50);
    if (*(unsigned char *)(v59 - 176)) {
      goto LABEL_3;
    }
  }
  (**(void (***)(uint64_t))(v59 - 248))(v59 - 248);
  if (*(unsigned char *)(v59 - 96))
  {
LABEL_5:
    a34 = a17;
    std::vector<AMSCore::MetricsEventModifier::MetricsConfig::FieldFilters>::__destroy_vector::operator()[abi:fe180100]((void ***)&a34);
    _Unwind_Resume(a1);
  }
LABEL_4:
  (**(void (***)(uint64_t))(v59 - 168))(v59 - 168);
  goto LABEL_5;
}

void std::set<std::string_view>::set[abi:fe180100]<char const* const*>()
{
  qword_1E91C8A50 = 0;
  qword_1E91C8A48 = 0;
  uint64_t v0 = _ZGRN7AMSCore20MetricsEventModifier12_GLOBAL__N_119AllowedFieldFiltersE_;
  long long v1 = (void **)&unk_1E91C8000;
  do
  {
    uint64_t v2 = operator new(0x30uLL);
    uint64_t v3 = *v0;
    v2[4] = *v0;
    size_t v4 = strlen(v3);
    v2[5] = v4;
    uint64_t v5 = v1;
    uint64_t v6 = v1[328];
    int v8 = &qword_1E91C8A48;
    uint64_t v7 = qword_1E91C8A48;
    if (v6 == &qword_1E91C8A48) {
      goto LABEL_32;
    }
    size_t v9 = v4;
    uint64_t v10 = qword_1E91C8A48;
    if (qword_1E91C8A48)
    {
      do
      {
        int v8 = (uint64_t *)v10;
        uint64_t v10 = *(void *)(v10 + 8);
      }
      while (v10);
    }
    else
    {
      uint64_t v11 = &qword_1E91C8A48;
      do
      {
        int v8 = (uint64_t *)v11[2];
        BOOL v12 = *v8 == (void)v11;
        uint64_t v11 = v8;
      }
      while (v12);
    }
    size_t v13 = v8[5];
    if (v4 >= v13) {
      size_t v14 = v8[5];
    }
    else {
      size_t v14 = v4;
    }
    int v15 = memcmp((const void *)v8[4], v3, v14);
    if (!v15)
    {
      if (v13 < v9) {
        goto LABEL_32;
      }
LABEL_15:
      size_t v16 = &qword_1E91C8A48;
      if (!v7)
      {
        size_t v17 = &qword_1E91C8A48;
        goto LABEL_38;
      }
      while (1)
      {
        size_t v17 = (uint64_t *)v7;
        int v18 = *(const void **)(v7 + 32);
        unint64_t v19 = v17[5];
        if (v19 >= v9) {
          size_t v20 = v9;
        }
        else {
          size_t v20 = v17[5];
        }
        int v21 = memcmp(v3, v18, v20);
        if (v21)
        {
          if (v21 < 0) {
            goto LABEL_17;
          }
LABEL_25:
          int v22 = memcmp(v18, v3, v20);
          if (v22)
          {
            if ((v22 & 0x80000000) == 0) {
              goto LABEL_38;
            }
          }
          else if (v19 >= v9)
          {
            goto LABEL_38;
          }
          size_t v16 = v17 + 1;
          uint64_t v7 = v17[1];
          if (!v7) {
            goto LABEL_39;
          }
        }
        else
        {
          if (v9 >= v19) {
            goto LABEL_25;
          }
LABEL_17:
          uint64_t v7 = *v17;
          size_t v16 = v17;
          if (!*v17) {
            goto LABEL_39;
          }
        }
      }
    }
    if ((v15 & 0x80000000) == 0) {
      goto LABEL_15;
    }
LABEL_32:
    if (v7) {
      size_t v17 = v8;
    }
    else {
      size_t v17 = &qword_1E91C8A48;
    }
    if (v7) {
      size_t v16 = v8 + 1;
    }
    else {
      size_t v16 = &qword_1E91C8A48;
    }
LABEL_38:
    if (*v16)
    {
      operator delete(v2);
      long long v1 = v5;
    }
    else
    {
LABEL_39:
      void *v2 = 0;
      v2[1] = 0;
      v2[2] = v17;
      *size_t v16 = (uint64_t)v2;
      long long v1 = v5;
      uint64_t v23 = (void *)*v5[328];
      if (v23)
      {
        v5[328] = v23;
        uint64_t v2 = (void *)*v16;
      }
      std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1E91C8A48, v2);
      ++qword_1E91C8A50;
    }
    ++v0;
  }
  while (v0 != off_1E559E228);
}

void sub_18DB0E178(_Unwind_Exception *a1)
{
}

void AMSCore::MetricsEventModifier::anonymous namespace'::getOverridesForFieldFilters(unint64_t a1, uint64_t a2)
{
  v100[2] = *MEMORY[0x1E4F143B8];
  v90[0] = 0;
  v90[16] = 0;
  *(_DWORD *)&v90[24] = 0;
  long long v91 = &v92;
  uint64_t v92 = 0;
  unint64_t v95 = 0;
  uint64_t v96 = 0;
  uint64_t v93 = 0;
  unint64_t v94 = &v95;
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  uint64_t v97 = &v98;
  AMSCore::getValueByKey((uint64_t)v88, a2, "blacklistedEvents", 0x11uLL);
  uint64_t v67 = a2;
  size_t v4 = (void (**)(void *))v88[0];
  if (!v89) {
    goto LABEL_19;
  }
  if (*(_DWORD *)(v88[0] + 24) == 9)
  {
    uint64_t v5 = *(_DWORD *)(v88[0] + 24) == 9 ? (uint64_t *)v88[0] : 0;
    uint64_t v7 = *v5;
    uint64_t v6 = v5[1];
    if (*v5 != v6)
    {
      int v8 = (_OWORD *)a1;
      do
      {
        LOBYTE(v80.__vftable) = 0;
        DWORD2(v81) = -1;
        uint64_t v9 = *(unsigned int *)(v7 + 24);
        if (v9 != -1)
        {
          ((void (*)(void **, std::runtime_error *, uint64_t))off_1EDCA60B8[v9])(__p, &v80, v7);
          DWORD2(v81) = v9;
          if (v9 != 5
            || (v9 != 5 ? (uint64_t v10 = 0) : (uint64_t v10 = &v80),
                std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v94, (const void **)&v10->__vftable, (uint64_t)v10), uint64_t v9 = DWORD2(v81), DWORD2(v81) != -1))
          {
            ((void (*)(std::runtime_error *, std::runtime_error *))off_1EDCA6068[v9])(&v69, &v80);
          }
        }
        v7 += 32;
      }
      while (v7 != v6);
      a1 = (unint64_t)v8;
      if (!v89)
      {
        size_t v4 = (void (**)(void *))v88[0];
LABEL_19:
        (*v4)(v88);
      }
    }
  }
  AMSCore::getValueByKey((uint64_t)v88, v67, "blacklistedFields", 0x11uLL);
  uint64_t v11 = (void (**)(void *))v88[0];
  if (!v89)
  {
LABEL_38:
    (*v11)(v88);
    goto LABEL_39;
  }
  if (*(_DWORD *)(v88[0] + 24) == 9)
  {
    BOOL v12 = *(_DWORD *)(v88[0] + 24) == 9 ? (uint64_t *)v88[0] : 0;
    uint64_t v14 = *v12;
    uint64_t v13 = v12[1];
    if (*v12 != v13)
    {
      do
      {
        LOBYTE(v80.__vftable) = 0;
        DWORD2(v81) = -1;
        uint64_t v15 = *(unsigned int *)(v14 + 24);
        if (v15 != -1)
        {
          ((void (*)(void **, std::runtime_error *, uint64_t))off_1EDCA60B8[v15])(__p, &v80, v14);
          DWORD2(v81) = v15;
          if (v15 != 5
            || (v15 != 5 ? (size_t v16 = 0) : (size_t v16 = &v80),
                std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v91, (const void **)&v16->__vftable, (uint64_t)v16), uint64_t v15 = DWORD2(v81), DWORD2(v81) != -1))
          {
            ((void (*)(std::runtime_error *, std::runtime_error *))off_1EDCA6068[v15])(&v69, &v80);
          }
        }
        v14 += 32;
      }
      while (v14 != v13);
      if (!v89)
      {
        uint64_t v11 = (void (**)(void *))v88[0];
        goto LABEL_38;
      }
    }
  }
LABEL_39:
  uint64_t v17 = v67;
  AMSCore::getValueByKey((uint64_t)v88, v67, "deResFields", 0xBuLL);
  int v18 = (void (**)(void *))v88[0];
  if (!v89) {
    goto LABEL_110;
  }
  if (*(_DWORD *)(v88[0] + 24) != 9) {
    goto LABEL_111;
  }
  unint64_t v19 = *(_DWORD *)(v88[0] + 24) == 9 ? (uint64_t *)v88[0] : 0;
  uint64_t v20 = *v19;
  uint64_t v68 = v19[1];
  if (*v19 == v68) {
    goto LABEL_111;
  }
  uint64_t v66 = (_OWORD *)a1;
  int v21 = 0;
  while (2)
  {
    v86[0] = 0;
    int v87 = -1;
    uint64_t v22 = *(unsigned int *)(v20 + 24);
    if (v22 == -1
      || (((void (*)(std::runtime_error *, unsigned char *, uint64_t))off_1EDCA60B8[v22])(&v69, v86, v20),
          int v87 = v22,
          v22 != 8))
    {
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[34]>((uint64_t)&v69, 4u, "any doesn't contain expected type");
      std::runtime_error::runtime_error(&v80, &v69);
      long long v81 = v70;
      uint64_t v24 = (unsigned int *)v72;
      v80.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v82 = v71;
      v83[0] = v72;
      v83[1] = v73;
      if (v73)
      {
        *(void *)(v72 + 16) = v83;
        uint64_t v24 = 0;
        std::string v71 = &v72;
        uint64_t v72 = 0;
        uint64_t v73 = 0;
      }
      else
      {
        uint64_t v82 = v83;
      }
      long long v84 = v74;
      long long v74 = 0uLL;
      char v85 = 0;
      v69.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v71, v24);
      MEMORY[0x192FA3C30](&v69);
      if (!v85) {
        goto LABEL_105;
      }
      uint64_t v23 = v80.__vftable;
    }
    else
    {
      if (v22 == 8) {
        uint64_t v23 = (std::runtime_error_vtbl *)v86;
      }
      else {
        uint64_t v23 = 0;
      }
      v80.__vftable = v23;
      char v85 = 1;
    }
    AMSCore::getValueAs<std::string,std::map<std::string,AMSCore::Any>>((uint64_t)v78, (uint64_t)v23, "fieldName", 9uLL);
    int v25 = v79;
    if (!v79)
    {
      a1 &= 0xFFFFFFFFFFFFFF00;
      goto LABEL_62;
    }
    uint64_t v26 = v78[0];
    a1 = *(void *)v78[0];
    v100[0] = *(void *)(v78[0] + 8);
    *(void *)((char *)v100 + 7) = *(void *)(v78[0] + 15);
    int v21 = (void *)*(unsigned __int8 *)(v78[0] + 23);
    *(void *)v78[0] = 0;
    *(void *)(v26 + 8) = 0;
    *(void *)(v26 + 16) = 0;
    if (!v79)
    {
LABEL_62:
      (*(void (**)(void *))v78[0])(v78);
      if (!v25) {
        goto LABEL_104;
      }
    }
    __p[0] = (void *)a1;
    __p[1] = (void *)v100[0];
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v100 + 7);
    HIBYTE(__p[2]) = (_BYTE)v21;
    v100[0] = 0;
    *(void *)((char *)v100 + 7) = 0;
    long long v77 = xmmword_18DDE9BE0;
    if (!v85) {
      goto LABEL_163;
    }
    AMSCore::getValueAs<long long,std::map<std::string,AMSCore::Any>>((uint64_t)&v69, (uint64_t)v80.__vftable, "magnitude", 9uLL);
    if (v75)
    {
      *(void *)&long long v77 = v69.__vftable;
      if (!v85) {
LABEL_163:
      }
        __break(1u);
    }
    else
    {
      ((void (*)(std::runtime_error *))v69.~runtime_error)(&v69);
      if (!v85) {
        goto LABEL_163;
      }
    }
    AMSCore::getValueAs<long long,std::map<std::string,AMSCore::Any>>((uint64_t)&v69, (uint64_t)v80.__vftable, "significantDigits", 0x11uLL);
    if (v75) {
      *((void *)&v77 + 1) = v69.__vftable;
    }
    else {
      ((void (*)(std::runtime_error *))v69.~runtime_error)(&v69);
    }
    size_t v27 = v98;
    int v28 = &v98;
    std::runtime_error v29 = &v98;
    if (!v98) {
      goto LABEL_98;
    }
    if ((char)v21 >= 0) {
      long long v30 = __p;
    }
    else {
      long long v30 = (void **)a1;
    }
    if ((char)v21 >= 0) {
      int v31 = v21;
    }
    else {
      int v31 = __p[1];
    }
    do
    {
      while (1)
      {
        int v28 = (uint64_t **)v27;
        uint64_t v34 = v27[4];
        unint64_t v32 = v27 + 4;
        size_t v33 = (uint64_t *)v34;
        int v35 = *((char *)v32 + 23);
        int v36 = v35 >= 0 ? v32 : v33;
        char v37 = v35 >= 0 ? (void *)*((unsigned __int8 *)v32 + 23) : (void *)v32[1];
        size_t v38 = (size_t)(v37 >= v31 ? v31 : v37);
        int v39 = memcmp(v30, v36, v38);
        if (v39) {
          break;
        }
        if (v31 >= v37) {
          goto LABEL_92;
        }
LABEL_78:
        size_t v27 = *v28;
        std::runtime_error v29 = v28;
        if (!*v28) {
          goto LABEL_98;
        }
      }
      if (v39 < 0) {
        goto LABEL_78;
      }
LABEL_92:
      int v40 = memcmp(v36, v30, v38);
      if (v40)
      {
        if ((v40 & 0x80000000) == 0) {
          goto LABEL_101;
        }
      }
      else if (v37 >= v31)
      {
        goto LABEL_101;
      }
      size_t v27 = v28[1];
    }
    while (v27);
    std::runtime_error v29 = v28 + 1;
LABEL_98:
    uint64_t v41 = operator new(0x48uLL);
    std::runtime_error v41[2] = *(_OWORD *)__p;
    *((void **)v41 + 6) = __p[2];
    memset(__p, 0, sizeof(__p));
    *(_OWORD *)((char *)v41 + 56) = v77;
    *(void *)uint64_t v41 = 0;
    *((void *)v41 + 1) = 0;
    *((void *)v41 + 2) = v28;
    char *v29 = (uint64_t *)v41;
    if (*v97)
    {
      uint64_t v97 = (uint64_t **)*v97;
      uint64_t v41 = *v29;
    }
    std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(v98, (uint64_t *)v41);
    ++v99;
    LOBYTE(v21) = HIBYTE(__p[2]);
LABEL_101:
    if ((v21 & 0x80) != 0) {
      operator delete(__p[0]);
    }
    a1 = 0;
    int v21 = 0;
LABEL_104:
    if (!v85) {
LABEL_105:
    }
      ((void (*)(std::runtime_error *))v80.~runtime_error)(&v80);
    if (v87 != -1) {
      ((void (*)(std::runtime_error *, unsigned char *))off_1EDCA6068[v87])(&v80, v86);
    }
    v20 += 32;
    if (v20 != v68) {
      continue;
    }
    break;
  }
  a1 = (unint64_t)v66;
  uint64_t v17 = v67;
  if (!v89)
  {
    int v18 = (void (**)(void *))v88[0];
LABEL_110:
    (*v18)(v88);
  }
LABEL_111:
  AMSCore::getValueByKey((uint64_t)v88, v17, "disabled", 8uLL);
  if (v89)
  {
    int v42 = *(unsigned __int8 *)(v88[0] + 24);
    if (v42 == 1)
    {
      int v43 = *(unsigned __int8 *)v88[0];
    }
    else
    {
      int v42 = 0;
      int v43 = 0;
    }
    unsigned int v44 = v43 | (v42 << 8);
    if (v44 >= 0x100) {
      *(_WORD *)&v90[26] = v44;
    }
  }
  else
  {
    (*(void (**)(void *))v88[0])(v88);
  }
  AMSCore::getValueByKey((uint64_t)v88, v17, "sendDisabled", 0xCuLL);
  if (v89)
  {
    int v45 = *(unsigned __int8 *)(v88[0] + 24);
    if (v45 == 1)
    {
      int v46 = *(unsigned __int8 *)v88[0];
    }
    else
    {
      int v45 = 0;
      int v46 = 0;
    }
    unsigned int v47 = v46 | (v45 << 8);
    if (v47 >= 0x100) {
      *(_WORD *)&v90[24] = v47;
    }
  }
  else
  {
    (*(void (**)(void *))v88[0])(v88);
  }
  AMSCore::getValueByKey((uint64_t)v88, v17, "sampling/duration", 0x11uLL);
  AMSCore::getValueByKey((uint64_t)&v80, v17, "sampling/percentage", 0x13uLL);
  if (v89 && v85)
  {
    unint64_t v48 = 0;
    LOBYTE(v49) = 0;
    int v50 = *(_DWORD *)(v88[0] + 24);
    if (v50 == -1) {
      LOBYTE(v50) = 0;
    }
    int v51 = v50 - 1;
    int v52 = 0;
    switch(v51)
    {
      case 0:
        unint64_t v48 = 0;
        LOBYTE(v49) = *(unsigned char *)v88[0];
        int v52 = 1;
        break;
      case 1:
        uint64_t v49 = (uint64_t)*(double *)v88[0];
        goto LABEL_134;
      case 2:
      case 3:
        uint64_t v49 = *(void *)v88[0];
        goto LABEL_134;
      case 6:
        uint64_t v49 = *(void *)v88[0] / 1000;
LABEL_134:
        unint64_t v48 = v49 & 0xFFFFFFFFFFFFFF00;
        int v52 = 1;
        break;
      default:
        break;
    }
    int v53 = (int)v80.__vftable[1].~runtime_error;
    if (v53 == -1) {
      LOBYTE(v53) = 0;
    }
    switch((char)v53)
    {
      case 1:
        double v54 = 0.0;
        if (LOBYTE(v80.~runtime_error)) {
          double v54 = 1.0;
        }
        if (v52) {
          goto LABEL_147;
        }
        break;
      case 2:
        double v54 = *(double *)&v80.~runtime_error;
        if (v52) {
          goto LABEL_147;
        }
        break;
      case 3:
        double v54 = (double)(uint64_t)v80.~runtime_error;
        if (v52) {
          goto LABEL_147;
        }
        break;
      case 4:
        double v54 = (double)(unint64_t)v80.~runtime_error;
        if (v52)
        {
LABEL_147:
          *(void *)uint64_t v90 = v48 | v49;
          *(double *)&v90[8] = v54;
          if (!v90[16]) {
            v90[16] = 1;
          }
        }
        break;
      default:
        break;
    }
  }
  *(_OWORD *)a1 = *(_OWORD *)v90;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)&v90[12];
  unint64_t v55 = v92;
  *(void *)(a1 + 32) = v91;
  *(void *)(a1 + 40) = v55;
  unint64_t v56 = (char *)(a1 + 40);
  uint64_t v57 = v93;
  *(void *)(a1 + 48) = v93;
  if (v57)
  {
    *((void *)v55 + 2) = v56;
    long long v91 = &v92;
    uint64_t v92 = 0;
    uint64_t v93 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v56;
  }
  uint64_t v59 = (uint64_t *)v94;
  uint64_t v58 = v95;
  *(void *)(a1 + 64) = v95;
  unint64_t v60 = (_OWORD *)(a1 + 64);
  *(void *)(a1 + 56) = v59;
  uint64_t v61 = v96;
  *(void *)(a1 + 72) = v96;
  if (v61)
  {
    *((void *)v58 + 2) = v60;
    unint64_t v94 = &v95;
    unint64_t v95 = 0;
    uint64_t v96 = 0;
  }
  else
  {
    *(void *)(a1 + 56) = v60;
  }
  std::string::size_type v63 = v97;
  unint64_t v62 = v98;
  *(void *)(a1 + 88) = v98;
  long long v64 = (char *)(a1 + 88);
  *(void *)(a1 + 80) = v63;
  uint64_t v65 = v99;
  *(void *)(a1 + 96) = v99;
  if (v65)
  {
    v62[2] = (uint64_t)v64;
    uint64_t v97 = &v98;
    uint64_t v98 = 0;
    uint64_t v99 = 0;
  }
  else
  {
    *(void *)(a1 + 80) = v64;
  }
  *(unsigned char *)(a1 + 104) = 1;
  if (!v85)
  {
    ((void (*)(std::runtime_error *))v80.~runtime_error)(&v80);
    if (v89) {
      goto LABEL_160;
    }
LABEL_162:
    (*(void (**)(void *))v88[0])(v88);
    goto LABEL_160;
  }
  if (!v89) {
    goto LABEL_162;
  }
LABEL_160:
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy((char *)v98);
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v95);
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v92);
}

void sub_18DB0ED74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (!LOBYTE(STACK[0x210])) {
    (*a66)(&a66);
  }
  AMSCore::MetricsEventModifier::EventModifierForFieldFilters::~EventModifierForFieldFilters((char **)(v66 - 216));
  _Unwind_Resume(a1);
}

void AMSCore::MetricsEventModifier::MetricsConfig::FieldFilters::~FieldFilters(char **this)
{
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    uint64_t v10 = a1 + 1;
    goto LABEL_29;
  }
  int v7 = *((char *)a2 + 23);
  if (v7 >= 0) {
    int v8 = a2;
  }
  else {
    int v8 = *a2;
  }
  if (v7 >= 0) {
    uint64_t v9 = (const void *)*((unsigned __int8 *)a2 + 23);
  }
  else {
    uint64_t v9 = a2[1];
  }
  do
  {
    while (1)
    {
      uint64_t v10 = (uint64_t **)v5;
      uint64_t v13 = v5[4];
      uint64_t v11 = v5 + 4;
      BOOL v12 = (void *)v13;
      int v14 = *((char *)v11 + 23);
      uint64_t v15 = v14 >= 0 ? v11 : v12;
      size_t v16 = v14 >= 0 ? (const void *)*((unsigned __int8 *)v11 + 23) : (const void *)v11[1];
      size_t v17 = (size_t)(v16 >= v9 ? v9 : v16);
      int v18 = memcmp(v8, v15, v17);
      if (v18) {
        break;
      }
      if (v9 >= v16) {
        goto LABEL_22;
      }
LABEL_8:
      uint64_t v5 = *v10;
      uint64_t v6 = v10;
      if (!*v10) {
        goto LABEL_29;
      }
    }
    if (v18 < 0) {
      goto LABEL_8;
    }
LABEL_22:
    uint64_t result = (uint64_t *)memcmp(v15, v8, v17);
    if (result)
    {
      if ((result & 0x80000000) == 0) {
        return result;
      }
    }
    else if (v16 >= v9)
    {
      return result;
    }
    uint64_t v5 = v10[1];
  }
  while (v5);
  uint64_t v6 = v10 + 1;
LABEL_29:
  uint64_t v20 = operator new(0x38uLL);
  v20[2] = *(_OWORD *)a3;
  *((void *)v20 + 6) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)uint64_t v20 = 0;
  *((void *)v20 + 1) = 0;
  *((void *)v20 + 2) = v10;
  uint64_t *v6 = (uint64_t *)v20;
  int v21 = (uint64_t *)**a1;
  if (v21)
  {
    *a1 = v21;
    uint64_t v22 = *v6;
  }
  else
  {
    uint64_t v22 = (uint64_t *)v20;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], v22);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void AMSCore::MetricsEventModifier::EventModifierForFieldFilters::~EventModifierForFieldFilters(char **this)
{
}

void std::__tree<std::string_view>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::string_view>::destroy(*a1);
    std::__tree<std::string_view>::destroy(a1[1]);
    operator delete(a1);
  }
}

void AMSCore::MetricsEventModifier::MetricsConfig::buildTopicOverrides(uint64_t **a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  long long v30 = a1 + 1;
  *a1 = (uint64_t *)(a1 + 1);
  uint64_t v2 = a2 + 1;
  uint64_t v3 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    while (1)
    {
      if (*((_DWORD *)v3 + 20) != 8) {
        goto LABEL_59;
      }
      uint64_t v5 = *((_DWORD *)v3 + 20) == 8 ? (uint64_t)(v3 + 7) : 0;
      if (v45)
      {
        if (v32 || v33 || v42 || v44 || v34 || v36 || v38 || v40)
        {
          uint64_t v6 = v30;
          int v7 = *v30;
          int v8 = v30;
          if (*v30)
          {
            int v9 = *((char *)v3 + 55);
            if (v9 >= 0) {
              uint64_t v10 = v3 + 4;
            }
            else {
              uint64_t v10 = (const void *)v3[4];
            }
            if (v9 >= 0) {
              size_t v11 = *((unsigned __int8 *)v3 + 55);
            }
            else {
              size_t v11 = v3[5];
            }
            while (1)
            {
              uint64_t v6 = (uint64_t **)v7;
              int v14 = (const void *)v7[4];
              BOOL v12 = v7 + 4;
              uint64_t v13 = v14;
              int v15 = *((char *)v12 + 23);
              if (v15 >= 0) {
                size_t v16 = v12;
              }
              else {
                size_t v16 = v13;
              }
              if (v15 >= 0) {
                size_t v17 = *((unsigned __int8 *)v12 + 23);
              }
              else {
                size_t v17 = v12[1];
              }
              if (v17 >= v11) {
                size_t v18 = v11;
              }
              else {
                size_t v18 = v17;
              }
              int v19 = memcmp(v10, v16, v18);
              if (v19)
              {
                if (v19 < 0) {
                  goto LABEL_24;
                }
LABEL_38:
                int v20 = memcmp(v16, v10, v18);
                if (v20)
                {
                  if ((v20 & 0x80000000) == 0) {
                    goto LABEL_50;
                  }
                }
                else if (v17 >= v11)
                {
LABEL_50:
                  uint64_t v22 = (char *)v6;
                  goto LABEL_51;
                }
                int v7 = v6[1];
                if (!v7)
                {
                  int v8 = v6 + 1;
                  break;
                }
              }
              else
              {
                if (v11 >= v17) {
                  goto LABEL_38;
                }
LABEL_24:
                int v7 = *v6;
                int v8 = v6;
                if (!*v6) {
                  break;
                }
              }
            }
          }
          uint64_t v22 = (char *)operator new(0x150uLL);
          uint64_t v23 = (std::string *)(v22 + 32);
          if (*((char *)v3 + 55) < 0)
          {
            std::string::__init_copy_ctor_external(v23, (const std::string::value_type *)v3[4], v3[5]);
          }
          else
          {
            long long v24 = *((_OWORD *)v3 + 2);
            *((void *)v22 + 6) = v3[6];
            *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
          }
          *((void *)v22 + 41) = 0;
          *(_OWORD *)(v22 + 248) = 0u;
          *(_OWORD *)(v22 + 232) = 0u;
          *(_OWORD *)(v22 + 216) = 0u;
          *(_OWORD *)(v22 + 200) = 0u;
          *(_OWORD *)(v22 + 184) = 0u;
          *(_OWORD *)(v22 + 168) = 0u;
          *(_OWORD *)(v22 + 152) = 0u;
          *(_OWORD *)(v22 + 136) = 0u;
          *(_OWORD *)(v22 + 104) = 0u;
          *(_OWORD *)(v22 + 88) = 0u;
          *(_OWORD *)(v22 + 56) = 0u;
          *(_OWORD *)(v22 + 72) = 0u;
          *(_OWORD *)(v22 + 296) = 0u;
          *(_OWORD *)(v22 + 312) = 0u;
          *(_OWORD *)(v22 + 280) = 0u;
          *(_OWORD *)(v22 + 264) = 0u;
          *(_OWORD *)(v22 + 120) = 0u;
          *((void *)v22 + 11) = v22 + 96;
          *((void *)v22 + 15) = 0;
          *((void *)v22 + 14) = v22 + 120;
          *((void *)v22 + 19) = 0;
          *((void *)v22 + 18) = 0;
          *((void *)v22 + 16) = 0;
          *((void *)v22 + 17) = v22 + 144;
          *(void *)uint64_t v22 = 0;
          *((void *)v22 + 1) = 0;
          *((void *)v22 + 2) = v6;
          const void *v8 = (uint64_t *)v22;
          int v25 = (uint64_t *)v22;
          uint64_t v26 = (uint64_t *)**a1;
          if (v26)
          {
            *a1 = v26;
            int v25 = *v8;
          }
          std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], v25);
          a1[2] = (uint64_t *)((char *)a1[2] + 1);
LABEL_51:
          if (v42)
          {
            *((void *)v22 + 20) = v41;
            v22[168] = v42;
          }
          if (v44) {
            std::__optional_storage_base<AMSCore::URL,false>::__assign_from[abi:fe180100]<std::__optional_copy_assign_base<AMSCore::URL,false> const&>((uint64_t)(v22 + 176), (AMSCore::URL *)v43);
          }
        }
        if (v45) {
          break;
        }
      }
      (*(void (**)(uint64_t *))v31[0])(v31);
      size_t v27 = (void *)v3[1];
      if (v27)
      {
        do
        {
LABEL_62:
          int v28 = v27;
          size_t v27 = (void *)*v27;
        }
        while (v27);
        goto LABEL_3;
      }
      do
      {
LABEL_64:
        int v28 = (void *)v3[2];
        BOOL v29 = *v28 == (void)v3;
        uint64_t v3 = v28;
      }
      while (!v29);
LABEL_3:
      uint64_t v3 = v28;
      if (v28 == v2) {
        return;
      }
    }
    if (v44) {
      AMSCore::URL::~URL((AMSCore::URL *)v43);
    }
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v39);
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v37);
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v35);
LABEL_59:
    size_t v27 = (void *)v3[1];
    if (v27) {
      goto LABEL_62;
    }
    goto LABEL_64;
  }
}

void sub_18DB0F4A4(_Unwind_Exception *a1, uint64_t a2, char **a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,void *>>>::operator()[abi:fe180100](0, v4);
  std::expected<AMSCore::MetricsEventModifier::EventModifier,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)va);
  std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>>>::destroy(*a3);
  _Unwind_Resume(a1);
}

void AMSCore::MetricsEventModifier::anonymous namespace'::getOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  v49[0] = 0;
  v49[8] = 0;
  v49[16] = 0;
  LOBYTE(v59) = 0;
  AMSCore::getValueByKey((uint64_t)&v85, a2, "metricsUrl", 0xAuLL);
  uint64_t v4 = v85.__vftable;
  if (!v91)
  {
LABEL_19:
    ((void (*)(std::runtime_error *))v4->~runtime_error)(&v85);
    goto LABEL_20;
  }
  if (LODWORD(v85.__vftable[1].~runtime_error) == 5) {
    uint64_t v5 = v85.__vftable;
  }
  else {
    uint64_t v5 = 0;
  }
  if (LODWORD(v85.__vftable[1].~runtime_error) == 5)
  {
    if (SHIBYTE(v5->what) < 0)
    {
      int v7 = v5;
      uint64_t v5 = (std::runtime_error_vtbl *)v5->~runtime_error;
      unint64_t what_high = (unint64_t)v7->~runtime_error_0;
    }
    else
    {
      unint64_t what_high = HIBYTE(v5->what);
    }
    AMSCore::URL::parse((uint64_t)v5, what_high, (uint64_t)v76);
    int v8 = v84;
    if (v84)
    {
      AMSCore::URL::URL((std::string *)&v49[16], (const AMSCore::URL *)v76);
      LOBYTE(v59) = 1;
    }
    else
    {
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&>((uint64_t)&v71, (const std::runtime_error *)v76);
      std::runtime_error::runtime_error(&v92, &v71);
      long long v93 = v72;
      int v9 = (unsigned int *)v74;
      v92.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      unint64_t v94 = v73;
      *(_OWORD *)unint64_t v95 = v74;
      if (*((void *)&v74 + 1))
      {
        *(void *)(v74 + 16) = v95;
        uint64_t v73 = &v74;
        long long v74 = 0uLL;
        int v9 = 0;
      }
      else
      {
        unint64_t v94 = (long long *)v95;
      }
      *(_OWORD *)&v95[16] = v75;
      long long v75 = 0uLL;
      char v107 = 0;
      v71.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v73, v9);
      MEMORY[0x192FA3C30](&v71);
    }
    if (v84)
    {
      AMSCore::URL::~URL((AMSCore::URL *)v76);
      int v10 = v91;
      if (v8)
      {
LABEL_17:
        if (v10) {
          goto LABEL_20;
        }
        uint64_t v4 = v85.__vftable;
        goto LABEL_19;
      }
    }
    else
    {
      (**(void (***)(unsigned char *))v76)(v76);
      int v10 = v91;
      if (v8) {
        goto LABEL_17;
      }
    }
    if (!v10) {
      ((void (*)(std::runtime_error *))v85.~runtime_error)(&v85);
    }
    if ((_BYTE)v59) {
      goto LABEL_49;
    }
    goto LABEL_50;
  }
LABEL_20:
  AMSCore::getValueByKey((uint64_t)v76, a2, "postFrequency", 0xDuLL);
  if ((_BYTE)v80)
  {
    int v11 = *(_DWORD *)(*(void *)v76 + 24);
    if (v11 == -1) {
      LOBYTE(v11) = 0;
    }
    switch((char)v11)
    {
      case 1:
        unint64_t v13 = 0;
        LOBYTE(v12) = **(unsigned char **)v76;
        goto LABEL_35;
      case 2:
        uint64_t v12 = (uint64_t)**(double **)v76;
        goto LABEL_34;
      case 3:
      case 4:
        uint64_t v12 = **(void **)v76;
        goto LABEL_34;
      case 7:
        uint64_t v12 = **(void **)v76 / 1000;
LABEL_34:
        unint64_t v13 = v12 & 0xFFFFFFFFFFFFFF00;
LABEL_35:
        unint64_t v14 = v13 | v12;
        if (!v49[8]) {
          v49[8] = 1;
        }
        *(void *)uint64_t v49 = v14;
        break;
      default:
        break;
    }
  }
  else
  {
    (**(void (***)(unsigned char *))v76)(v76);
  }
  std::runtime_error v92 = *(std::runtime_error *)v49;
  LOBYTE(v93) = 0;
  unsigned __int8 v106 = 0;
  int v15 = v59;
  if ((_BYTE)v59)
  {
    v95[0] = 0;
    if (v51[0])
    {
      long long v93 = *(_OWORD *)&v49[16];
      unint64_t v94 = v50;
      int v50 = 0;
      *(_OWORD *)&v49[16] = 0uLL;
      v95[0] = 1;
    }
    v95[8] = 0;
    char v96 = 0;
    if ((_BYTE)v52)
    {
      *(_OWORD *)&v95[8] = *(_OWORD *)&v51[8];
      *(void *)&v95[24] = *(void *)&v51[24];
      memset(&v51[8], 0, 24);
      char v96 = 1;
    }
    LOBYTE(v97) = 0;
    char v99 = 0;
    if (LOBYTE(v55.__vftable))
    {
      long long v97 = v53;
      uint64_t v98 = v54;
      uint64_t v54 = 0;
      long long v53 = 0uLL;
      char v99 = 1;
    }
    int imp = (int)v55.__imp_.__imp_;
    uint64_t v101 = (uint64_t)&v101;
    long long v102 = &v101;
    uint64_t v103 = 0;
    size_t v16 = v57;
    if (v57)
    {
      long long v17 = v56;
      uint64_t v18 = **((void **)&v56 + 1);
      *(void *)(v18 + 8) = *(void *)(v56 + 8);
      **(void **)(v17 + 8) = v18;
      uint64_t v19 = v101;
      *(void *)(v101 + 8) = *((void *)&v17 + 1);
      **((void **)&v17 + 1) = v19;
      uint64_t v101 = v17;
      *(void *)(v17 + 8) = &v101;
      uint64_t v103 = v16;
      uint64_t v57 = 0;
    }
    long long v104 = *(_OWORD *)v58;
    uint64_t v105 = *(void *)&v58[16];
    memset(v58, 0, sizeof(v58));
    unsigned __int8 v106 = 1;
  }
  char v107 = 1;
  if (v15) {
LABEL_49:
  }
    AMSCore::URL::~URL((AMSCore::URL *)&v49[16]);
LABEL_50:
  if (!v107)
  {
    std::runtime_error::runtime_error((std::runtime_error *)v49, &v92);
    *(_OWORD *)&v49[16] = v93;
    *(void *)uint64_t v49 = &unk_1EDC827D8;
    int v50 = v94;
    *(_OWORD *)int v51 = *(_OWORD *)v95;
    if (*(void *)&v95[8])
    {
      *(void *)(*(void *)v95 + 16) = v51;
      unint64_t v94 = (long long *)v95;
      *(_OWORD *)unint64_t v95 = 0uLL;
    }
    else
    {
      int v50 = (long long *)v51;
    }
    *(_OWORD *)&v51[16] = *(_OWORD *)&v95[16];
    *(_OWORD *)&v95[16] = 0uLL;
    LOBYTE(v52) = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v76, (uint64_t)v49);
    std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)v76);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)&v76[16];
    *(void *)a1 = &unk_1EDC827D8;
    uint64_t v41 = v78;
    *(void *)(a1 + 32) = v77;
    *(void *)(a1 + 40) = v41;
    uint64_t v42 = a1 + 40;
    uint64_t v43 = *((void *)&v78 + 1);
    *(void *)(a1 + 48) = *((void *)&v78 + 1);
    if (v43)
    {
      *(void *)(v41 + 16) = v42;
      long long v77 = &v78;
      long long v78 = 0uLL;
      uint64_t v41 = 0;
    }
    else
    {
      *(void *)(a1 + 32) = v42;
    }
    *(_OWORD *)(a1 + 56) = v79;
    long long v79 = 0uLL;
    *(unsigned char *)(a1 + 280) = 0;
    *(void *)std::string v76 = &unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v77, (unsigned int *)v41);
    MEMORY[0x192FA3C30](v76);
    if ((_BYTE)v52)
    {
      *(void *)uint64_t v49 = &unk_1EDC827D8;
      char v44 = *(std::__shared_weak_count **)&v51[24];
      if (*(void *)&v51[24]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v51[24] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v50, *(unsigned int **)v51);
      MEMORY[0x192FA3C30](v49);
      if (v107) {
        goto LABEL_120;
      }
      goto LABEL_123;
    }
LABEL_119:
    if (v107) {
      goto LABEL_120;
    }
LABEL_123:
    ((void (*)(std::runtime_error *))v92.~runtime_error)(&v92);
    return;
  }
  if (v83)
  {
    *(_OWORD *)uint64_t v49 = *(_OWORD *)v76;
    *(_OWORD *)&v49[12] = *(_OWORD *)&v76[12];
    int v50 = v77;
    *(_OWORD *)int v51 = v78;
    if (*((void *)&v78 + 1))
    {
      *(void *)(v78 + 16) = v51;
      long long v77 = &v78;
      long long v78 = 0uLL;
    }
    else
    {
      int v50 = (long long *)v51;
    }
    *(_OWORD *)&v51[16] = v79;
    uint64_t v52 = v80;
    if (v80)
    {
      *(void *)(*((void *)&v79 + 1) + 16) = &v51[24];
      *(void *)&long long v79 = (char *)&v79 + 8;
      *((void *)&v79 + 1) = 0;
      uint64_t v80 = 0;
    }
    else
    {
      *(void *)&v51[16] = &v51[24];
    }
    long long v53 = v81;
    uint64_t v54 = v82;
    if (v82)
    {
      *(void *)(*((void *)&v81 + 1) + 16) = (char *)&v53 + 8;
      *(void *)&long long v81 = (char *)&v81 + 8;
      *((void *)&v81 + 1) = 0;
      uint64_t v82 = 0;
      if (!v107) {
        goto LABEL_125;
      }
    }
    else
    {
      *(void *)&long long v53 = (char *)&v53 + 8;
      if (!v107) {
        goto LABEL_125;
      }
    }
    std::runtime_error v55 = v92;
    LOBYTE(v56) = 0;
    char v70 = 0;
    int v20 = v106;
    if (v106)
    {
      v58[0] = 0;
      if (v95[0])
      {
        long long v56 = v93;
        uint64_t v57 = v94;
        unint64_t v94 = 0;
        long long v93 = 0uLL;
        v58[0] = 1;
      }
      v58[8] = 0;
      char v60 = 0;
      if (v96)
      {
        *(_OWORD *)&v58[8] = *(_OWORD *)&v95[8];
        uint64_t v59 = *(void *)&v95[24];
        memset(&v95[8], 0, 24);
        char v60 = 1;
      }
      LOBYTE(v61) = 0;
      char v63 = 0;
      if (v99)
      {
        long long v61 = v97;
        uint64_t v62 = v98;
        uint64_t v98 = 0;
        long long v97 = 0uLL;
        char v63 = 1;
      }
      int v64 = imp;
      uint64_t v65 = (uint64_t)&v65;
      uint64_t v66 = &v65;
      uint64_t v67 = 0;
      int v21 = v103;
      if (v103)
      {
        uint64_t v22 = v102;
        uint64_t v23 = v101;
        uint64_t v24 = *v102;
        *(void *)(v24 + 8) = *(void *)(v101 + 8);
        **(void **)(v23 + 8) = v24;
        uint64_t v25 = v65;
        *(void *)(v65 + 8) = v22;
        uint64_t *v22 = v25;
        uint64_t v65 = v23;
        *(void *)(v23 + 8) = &v65;
        uint64_t v67 = v21;
        uint64_t v103 = 0;
      }
      long long v68 = v104;
      uint64_t v69 = v105;
      uint64_t v105 = 0;
      long long v104 = 0uLL;
      char v70 = 1;
    }
    *(_OWORD *)a1 = *(_OWORD *)v49;
    *(_OWORD *)(a1 + 12) = *(_OWORD *)&v49[12];
    uint64_t v26 = *(void *)v51;
    *(void *)(a1 + 32) = v50;
    *(void *)(a1 + 40) = v26;
    uint64_t v27 = a1 + 40;
    uint64_t v28 = *(void *)&v51[8];
    *(void *)(a1 + 48) = *(void *)&v51[8];
    if (v28)
    {
      *(void *)(v26 + 16) = v27;
      int v50 = (long long *)v51;
      *(_OWORD *)int v51 = 0uLL;
    }
    else
    {
      *(void *)(a1 + 32) = v27;
    }
    long long v29 = *(_OWORD *)&v51[16];
    *(void *)(a1 + 64) = *(void *)&v51[24];
    uint64_t v30 = a1 + 64;
    *(void *)(a1 + 56) = v29;
    uint64_t v31 = v52;
    *(void *)(a1 + 72) = v52;
    if (v31)
    {
      *(void *)(*((void *)&v29 + 1) + 16) = v30;
      *(void *)&v51[16] = &v51[24];
      *(void *)&v51[24] = 0;
      uint64_t v52 = 0;
    }
    else
    {
      *(void *)(a1 + 56) = v30;
    }
    long long v32 = v53;
    *(void *)(a1 + 88) = *((void *)&v53 + 1);
    uint64_t v33 = a1 + 88;
    *(void *)(a1 + 80) = v32;
    uint64_t v34 = v54;
    *(void *)(a1 + 96) = v54;
    if (v34)
    {
      *(void *)(*((void *)&v32 + 1) + 16) = v33;
      *(void *)&long long v53 = (char *)&v53 + 8;
      *((void *)&v53 + 1) = 0;
      uint64_t v54 = 0;
    }
    else
    {
      *(void *)(a1 + 80) = v33;
    }
    std::runtime_error v35 = v55;
    *(unsigned char *)(a1 + 120) = 0;
    *(std::runtime_error *)(a1 + 104) = v35;
    *(unsigned char *)(a1 + 272) = 0;
    if (v20)
    {
      *(unsigned char *)(a1 + 120) = 0;
      *(unsigned char *)(a1 + 144) = 0;
      if (v58[0])
      {
        *(_OWORD *)(a1 + 120) = v56;
        *(void *)(a1 + 136) = v57;
        uint64_t v57 = 0;
        long long v56 = 0uLL;
        *(unsigned char *)(a1 + 144) = 1;
      }
      *(unsigned char *)(a1 + 152) = 0;
      *(unsigned char *)(a1 + 176) = 0;
      if (v60)
      {
        *(_OWORD *)(a1 + 152) = *(_OWORD *)&v58[8];
        *(void *)(a1 + 168) = v59;
        *(void *)&v58[16] = 0;
        uint64_t v59 = 0;
        *(void *)&v58[8] = 0;
        *(unsigned char *)(a1 + 176) = 1;
      }
      *(unsigned char *)(a1 + 184) = 0;
      *(unsigned char *)(a1 + 208) = 0;
      if (v63)
      {
        *(_OWORD *)(a1 + 184) = v61;
        *(void *)(a1 + 200) = v62;
        uint64_t v62 = 0;
        long long v61 = 0uLL;
        *(unsigned char *)(a1 + 208) = 1;
      }
      *(_DWORD *)(a1 + 216) = v64;
      *(void *)(a1 + 224) = a1 + 224;
      *(void *)(a1 + 232) = a1 + 224;
      *(void *)(a1 + 240) = 0;
      if (v49 == (unsigned char *)a1) {
LABEL_125:
      }
        __break(1u);
      uint64_t v36 = v67;
      if (v67)
      {
        uint64_t v38 = v65;
        char v37 = v66;
        uint64_t v39 = *v66;
        *(void *)(v39 + 8) = *(void *)(v65 + 8);
        **(void **)(v38 + 8) = v39;
        uint64_t v40 = *(void *)(a1 + 224);
        *(void *)(v40 + 8) = v37;
        uint64_t *v37 = v40;
        *(void *)(a1 + 224) = v38;
        *(void *)(v38 + 8) = a1 + 224;
        *(void *)(a1 + 240) = v36;
        uint64_t v67 = 0;
      }
      *(_OWORD *)(a1 + 248) = v68;
      *(void *)(a1 + 264) = v69;
      uint64_t v69 = 0;
      long long v68 = 0uLL;
      *(unsigned char *)(a1 + 272) = 1;
      *(unsigned char *)(a1 + 280) = 1;
      AMSCore::URL::~URL((AMSCore::URL *)&v56);
    }
    else
    {
      *(unsigned char *)(a1 + 280) = 1;
    }
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)&v53 + 1));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)&v51[24]);
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)v51);
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)v49, (const std::runtime_error *)v76);
    *(_OWORD *)&v49[16] = *(_OWORD *)&v76[16];
    *(void *)uint64_t v49 = &unk_1EDC827D8;
    int v50 = v77;
    *(_OWORD *)int v51 = v78;
    if (*((void *)&v78 + 1))
    {
      *(void *)(v78 + 16) = v51;
      long long v77 = &v78;
      long long v78 = 0uLL;
    }
    else
    {
      int v50 = (long long *)v51;
    }
    *(_OWORD *)&v51[16] = v79;
    long long v79 = 0uLL;
    LOBYTE(v52) = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v85, (uint64_t)v49);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v85);
    *(_OWORD *)(a1 + 16) = v86;
    *(void *)a1 = &unk_1EDC827D8;
    uint64_t v45 = v88;
    *(void *)(a1 + 32) = v87;
    *(void *)(a1 + 40) = v45;
    uint64_t v46 = a1 + 40;
    uint64_t v47 = v89;
    *(void *)(a1 + 48) = v89;
    if (v47)
    {
      *(void *)(v45 + 16) = v46;
      int v87 = &v88;
      uint64_t v88 = 0;
      uint64_t v89 = 0;
      uint64_t v45 = 0;
    }
    else
    {
      *(void *)(a1 + 32) = v46;
    }
    *(_OWORD *)(a1 + 56) = v90;
    long long v90 = 0uLL;
    *(unsigned char *)(a1 + 280) = 0;
    v85.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v87, (unsigned int *)v45);
    MEMORY[0x192FA3C30](&v85);
    if ((_BYTE)v52)
    {
      *(void *)uint64_t v49 = &unk_1EDC827D8;
      unint64_t v48 = *(std::__shared_weak_count **)&v51[24];
      if (*(void *)&v51[24]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v51[24] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v50, *(unsigned int **)v51);
      MEMORY[0x192FA3C30](v49);
    }
  }
  if (v83)
  {
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)&v81 + 1));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)&v79 + 1));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy((char *)v78);
    goto LABEL_119;
  }
  (**(void (***)(unsigned char *))v76)(v76);
  if (!v107) {
    goto LABEL_123;
  }
LABEL_120:
  if (v106) {
    AMSCore::URL::~URL((AMSCore::URL *)&v93);
  }
}

void sub_18DB10268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  std::expected<AMSCore::URL,AMSCore::Error>::~expected[abi:fe180100]((AMSCore::URL *)&a53);
  if (LOBYTE(STACK[0x248]))
  {
    if (!a30) {
      goto LABEL_3;
    }
  }
  else
  {
    (*(void (**)(unint64_t *))STACK[0x200])(&STACK[0x200]);
    if (!a30) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  AMSCore::URL::~URL(v53);
  _Unwind_Resume(a1);
}

uint64_t *AMSCore::MetricsEventModifier::anonymous namespace'::merge(uint64_t *this, const AMSCore::MetricsEventModifier::EventModifierForFieldFilters *a2, AMSCore::MetricsEventModifier::EventModifierForFieldFilters *a3)
{
  uint64_t v4 = this;
  if (*((unsigned char *)this + 16))
  {
    long long v5 = *(_OWORD *)this;
    *((unsigned char *)a2 + 16) = *((unsigned char *)this + 16);
    *(_OWORD *)a2 = v5;
  }
  if (*((unsigned char *)this + 25)) {
    *((_WORD *)a2 + 12) = *((_WORD *)this + 12);
  }
  if (*((unsigned char *)this + 27)) {
    *((_WORD *)a2 + 13) = *((_WORD *)this + 13);
  }
  uint64_t v6 = (const void **)this[4];
  int v7 = this + 5;
  if (v6 != (const void **)(this + 5))
  {
    do
    {
      this = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t *)a2 + 4, (uint64_t)a2 + 40, v6 + 4, (uint64_t)(v6 + 4));
      int v8 = (uint64_t *)v6[1];
      if (v8)
      {
        do
        {
          int v9 = v8;
          int v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          int v9 = (uint64_t *)v6[2];
          BOOL v10 = *v9 == (void)v6;
          uint64_t v6 = (const void **)v9;
        }
        while (!v10);
      }
      uint64_t v6 = (const void **)v9;
    }
    while (v9 != v7);
  }
  int v11 = (uint64_t *)v4[7];
  if (v11 != v4 + 8)
  {
    do
    {
      this = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t *)a2 + 7, (uint64_t)a2 + 64, (const void **)v11 + 4, (uint64_t)(v11 + 4));
      uint64_t v12 = (uint64_t *)v11[1];
      if (v12)
      {
        do
        {
          unint64_t v13 = v12;
          uint64_t v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          unint64_t v13 = (uint64_t *)v11[2];
          BOOL v10 = *v13 == (void)v11;
          int v11 = v13;
        }
        while (!v10);
      }
      int v11 = v13;
    }
    while (v13 != v4 + 8);
  }
  unint64_t v14 = (const void **)v4[10];
  int v15 = v4 + 11;
  if (v14 != (const void **)(v4 + 11))
  {
    size_t v16 = (uint64_t *)((char *)a2 + 80);
    long long v17 = (char *)a2 + 88;
    do
    {
      this = std::__tree<AMSCore::MetricsEventModifier::DeResFields>::__emplace_hint_unique_key_args<AMSCore::MetricsEventModifier::DeResFields,AMSCore::MetricsEventModifier::DeResFields const&>(v16, (uint64_t)v17, v14 + 4, (uint64_t)(v14 + 4));
      uint64_t v18 = (uint64_t *)v14[1];
      if (v18)
      {
        do
        {
          uint64_t v19 = v18;
          uint64_t v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          uint64_t v19 = (uint64_t *)v14[2];
          BOOL v10 = *v19 == (void)v14;
          unint64_t v14 = (const void **)v19;
        }
        while (!v10);
      }
      unint64_t v14 = (const void **)v19;
    }
    while (v19 != v15);
  }
  return this;
}

void std::__optional_storage_base<AMSCore::URL,false>::__assign_from[abi:fe180100]<std::__optional_copy_assign_base<AMSCore::URL,false> const&>(uint64_t a1, AMSCore::URL *a2)
{
  if (*(unsigned __int8 *)(a1 + 152) == *((unsigned __int8 *)a2 + 152))
  {
    if (*(unsigned char *)(a1 + 152))
    {
      std::__optional_storage_base<std::string,false>::__assign_from[abi:fe180100]<std::__optional_copy_assign_base<std::string,false> const&>(a1, (std::string::value_type *)a2);
      std::__optional_storage_base<std::string,false>::__assign_from[abi:fe180100]<std::__optional_copy_assign_base<std::string,false> const&>(a1 + 32, (std::string::value_type *)a2 + 32);
      std::__optional_storage_base<std::string,false>::__assign_from[abi:fe180100]<std::__optional_copy_assign_base<std::string,false> const&>(a1 + 64, (std::string::value_type *)a2 + 64);
      __int16 v4 = *((_WORD *)a2 + 48);
      *(unsigned char *)(a1 + 98) = *((unsigned char *)a2 + 98);
      *(_WORD *)(a1 + 96) = v4;
      if ((AMSCore::URL *)a1 != a2)
      {
        std::list<std::pair<std::string,std::string>>::__assign_with_sentinel[abi:fe180100]<std::__list_const_iterator<std::pair<std::string,std::string>,void *>,std::__list_const_iterator<std::pair<std::string,std::string>,void *>>((char **)(a1 + 104), *((void *)a2 + 14), (uint64_t)a2 + 104);
        long long v5 = (void **)(a1 + 128);
        char v6 = *((unsigned char *)a2 + 151);
        if (*(char *)(a1 + 151) < 0)
        {
          if (v6 >= 0) {
            int v8 = (char *)a2 + 128;
          }
          else {
            int v8 = (char *)*((void *)a2 + 16);
          }
          if (v6 >= 0) {
            size_t v9 = *((unsigned __int8 *)a2 + 151);
          }
          else {
            size_t v9 = *((void *)a2 + 17);
          }
          std::string::__assign_no_alias<false>(v5, v8, v9);
        }
        else if ((*((unsigned char *)a2 + 151) & 0x80) != 0)
        {
          BOOL v10 = (void *)*((void *)a2 + 16);
          size_t v11 = *((void *)a2 + 17);
          std::string::__assign_no_alias<true>(v5, v10, v11);
        }
        else
        {
          long long v7 = *((_OWORD *)a2 + 8);
          *(void *)(a1 + 144) = *((void *)a2 + 18);
          *(_OWORD *)long long v5 = v7;
        }
      }
    }
  }
  else if (*(unsigned char *)(a1 + 152))
  {
    AMSCore::URL::~URL((AMSCore::URL *)a1);
    *(unsigned char *)(a1 + 152) = 0;
  }
  else
  {
    AMSCore::URL::URL((std::string *)a1, a2);
    *(unsigned char *)(a1 + 152) = 1;
  }
}

uint64_t std::expected<AMSCore::MetricsEventModifier::EventModifier,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 280))
  {
    if (*(unsigned char *)(a1 + 272)) {
      AMSCore::URL::~URL((AMSCore::URL *)(a1 + 120));
    }
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a1 + 88));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a1 + 64));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a1 + 40));
  }
  else
  {
    (**(void (***)(uint64_t))a1)(a1);
  }
  return a1;
}

uint64_t *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(uint64_t *result, uint64_t a2, const void **a3, uint64_t a4)
{
  long long v7 = result;
  int v8 = (uint64_t **)(result + 1);
  if (result + 1 == (uint64_t *)a2) {
    goto LABEL_23;
  }
  int v9 = *((char *)a3 + 23);
  if (v9 >= 0) {
    BOOL v10 = a3;
  }
  else {
    BOOL v10 = *a3;
  }
  if (v9 >= 0) {
    size_t v11 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v11 = (size_t)a3[1];
  }
  int v12 = *(char *)(a2 + 55);
  if (v12 >= 0) {
    unint64_t v13 = (const void *)(a2 + 32);
  }
  else {
    unint64_t v13 = *(const void **)(a2 + 32);
  }
  if (v12 >= 0) {
    size_t v14 = *(unsigned __int8 *)(a2 + 55);
  }
  else {
    size_t v14 = *(void *)(a2 + 40);
  }
  if (v14 >= v11) {
    size_t v15 = v11;
  }
  else {
    size_t v15 = v14;
  }
  uint64_t result = (uint64_t *)memcmp(v10, v13, v15);
  if (result)
  {
    if ((result & 0x80000000) == 0) {
      goto LABEL_19;
    }
LABEL_23:
    uint64_t v16 = *(void *)a2;
    if (*v7 == a2)
    {
      uint64_t v18 = a2;
    }
    else
    {
      if (v16)
      {
        uint64_t v17 = *(void *)a2;
        do
        {
          uint64_t v18 = v17;
          uint64_t v17 = *(void *)(v17 + 8);
        }
        while (v17);
      }
      else
      {
        uint64_t v19 = a2;
        do
        {
          uint64_t v18 = *(void *)(v19 + 16);
          BOOL v37 = *(void *)v18 == v19;
          uint64_t v19 = v18;
        }
        while (v37);
      }
      int v20 = *(char *)(v18 + 55);
      if (v20 >= 0) {
        int v21 = (const void *)(v18 + 32);
      }
      else {
        int v21 = *(const void **)(v18 + 32);
      }
      if (v20 >= 0) {
        size_t v22 = *(unsigned __int8 *)(v18 + 55);
      }
      else {
        size_t v22 = *(void *)(v18 + 40);
      }
      int v23 = *((char *)a3 + 23);
      if (v23 >= 0) {
        uint64_t v24 = a3;
      }
      else {
        uint64_t v24 = *a3;
      }
      if (v23 >= 0) {
        size_t v25 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        size_t v25 = (size_t)a3[1];
      }
      if (v25 >= v22) {
        size_t v26 = v22;
      }
      else {
        size_t v26 = v25;
      }
      uint64_t result = (uint64_t *)memcmp(v21, v24, v26);
      if (result)
      {
        if ((result & 0x80000000) == 0) {
          goto LABEL_48;
        }
      }
      else if (v22 >= v25)
      {
LABEL_48:
        uint64_t v27 = *v8;
        if (!*v8) {
          goto LABEL_49;
        }
        while (1)
        {
          uint64_t v28 = (uint64_t **)v27;
          uint64_t v31 = (const void *)v27[4];
          long long v29 = v27 + 4;
          uint64_t v30 = v31;
          int v32 = *((char *)v29 + 23);
          if (v32 >= 0) {
            uint64_t v33 = v29;
          }
          else {
            uint64_t v33 = v30;
          }
          if (v32 >= 0) {
            size_t v34 = *((unsigned __int8 *)v29 + 23);
          }
          else {
            size_t v34 = v29[1];
          }
          if (v34 >= v25) {
            size_t v35 = v25;
          }
          else {
            size_t v35 = v34;
          }
          int v36 = memcmp(v24, v33, v35);
          if (v36)
          {
            if (v36 < 0) {
              goto LABEL_50;
            }
LABEL_64:
            uint64_t result = (uint64_t *)memcmp(v33, v24, v35);
            if (result)
            {
              if ((result & 0x80000000) == 0) {
                goto LABEL_128;
              }
            }
            else if (v34 >= v25)
            {
LABEL_128:
              uint64_t v38 = v8;
              goto LABEL_77;
            }
            int v8 = v28 + 1;
            uint64_t v27 = v28[1];
            if (!v27) {
              goto LABEL_78;
            }
          }
          else
          {
            if (v25 >= v34) {
              goto LABEL_64;
            }
LABEL_50:
            uint64_t v27 = *v28;
            int v8 = v28;
            if (!*v28) {
              goto LABEL_78;
            }
          }
        }
      }
    }
    BOOL v37 = v16 == 0;
    if (v16) {
      uint64_t v28 = (uint64_t **)v18;
    }
    else {
      uint64_t v28 = (uint64_t **)a2;
    }
    if (v37) {
      uint64_t v38 = (uint64_t **)a2;
    }
    else {
      uint64_t v38 = (uint64_t **)(v18 + 8);
    }
LABEL_77:
    int v8 = v38;
    if (*v38) {
      return result;
    }
    goto LABEL_78;
  }
  if (v11 < v14) {
    goto LABEL_23;
  }
LABEL_19:
  uint64_t result = (uint64_t *)memcmp(v13, v10, v15);
  if (result)
  {
    if ((result & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v14 >= v11)
  {
    return result;
  }
  uint64_t v38 = (uint64_t **)(a2 + 8);
  uint64_t v42 = *(uint64_t **)(a2 + 8);
  if (v42)
  {
    do
    {
      uint64_t v38 = (uint64_t **)v42;
      uint64_t v42 = (uint64_t *)*v42;
      uint64_t v28 = v38;
      uint64_t v43 = v38;
    }
    while (v42);
    if (v38 == v8) {
      goto LABEL_77;
    }
  }
  else
  {
    uint64_t v43 = (uint64_t **)a2;
    do
    {
      char v44 = (uint64_t *)v43;
      uint64_t v43 = (uint64_t **)v43[2];
    }
    while (*v43 != v44);
    uint64_t v28 = (uint64_t **)a2;
    if (v43 == v8) {
      goto LABEL_77;
    }
  }
  uint64_t v47 = v43[4];
  uint64_t v45 = (uint64_t *)(v43 + 4);
  uint64_t v46 = v47;
  int v48 = *((char *)v45 + 23);
  if (v48 >= 0) {
    uint64_t v49 = v45;
  }
  else {
    uint64_t v49 = v46;
  }
  if (v48 >= 0) {
    size_t v50 = *((unsigned __int8 *)v45 + 23);
  }
  else {
    size_t v50 = v45[1];
  }
  if (v50 >= v11) {
    size_t v51 = v11;
  }
  else {
    size_t v51 = v50;
  }
  uint64_t result = (uint64_t *)memcmp(v10, v49, v51);
  if (result)
  {
    if ((result & 0x80000000) != 0) {
      goto LABEL_77;
    }
  }
  else if (v11 < v50)
  {
    goto LABEL_77;
  }
  uint64_t v52 = *v8;
  if (*v8)
  {
    while (1)
    {
      uint64_t v28 = (uint64_t **)v52;
      std::runtime_error v55 = (const void *)v52[4];
      long long v53 = v52 + 4;
      uint64_t v54 = v55;
      int v56 = *((char *)v53 + 23);
      if (v56 >= 0) {
        uint64_t v57 = v53;
      }
      else {
        uint64_t v57 = v54;
      }
      if (v56 >= 0) {
        size_t v58 = *((unsigned __int8 *)v53 + 23);
      }
      else {
        size_t v58 = v53[1];
      }
      if (v58 >= v11) {
        size_t v59 = v11;
      }
      else {
        size_t v59 = v58;
      }
      int v60 = memcmp(v10, v57, v59);
      if (v60)
      {
        if (v60 < 0) {
          goto LABEL_108;
        }
LABEL_122:
        uint64_t result = (uint64_t *)memcmp(v57, v10, v59);
        if (result)
        {
          if ((result & 0x80000000) == 0) {
            goto LABEL_128;
          }
        }
        else if (v58 >= v11)
        {
          goto LABEL_128;
        }
        int v8 = v28 + 1;
        uint64_t v52 = v28[1];
        if (!v52) {
          goto LABEL_78;
        }
      }
      else
      {
        if (v11 >= v58) {
          goto LABEL_122;
        }
LABEL_108:
        uint64_t v52 = *v28;
        int v8 = v28;
        if (!*v28) {
          goto LABEL_78;
        }
      }
    }
  }
LABEL_49:
  uint64_t v28 = v8;
LABEL_78:
  uint64_t v39 = (uint64_t *)operator new(0x38uLL);
  uint64_t v40 = (std::string *)(v39 + 4);
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v40, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&v40->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    v39[6] = *(void *)(a4 + 16);
  }
  *uint64_t v39 = 0;
  v39[1] = 0;
  v39[2] = (uint64_t)v28;
  char *v8 = v39;
  uint64_t v41 = *(void *)*v7;
  if (v41)
  {
    uint64_t *v7 = v41;
    uint64_t v39 = *v8;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[1], v39);
  ++v7[2];
  return result;
}

void sub_18DB10A44(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<AMSCore::MetricsEventModifier::DeResFields>::__emplace_hint_unique_key_args<AMSCore::MetricsEventModifier::DeResFields,AMSCore::MetricsEventModifier::DeResFields const&>(uint64_t *result, uint64_t a2, const void **a3, uint64_t a4)
{
  long long v7 = result;
  int v8 = result + 1;
  if (result + 1 == (uint64_t *)a2) {
    goto LABEL_23;
  }
  int v9 = *((char *)a3 + 23);
  if (v9 >= 0) {
    BOOL v10 = a3;
  }
  else {
    BOOL v10 = *a3;
  }
  if (v9 >= 0) {
    size_t v11 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v11 = (size_t)a3[1];
  }
  int v12 = *(char *)(a2 + 55);
  if (v12 >= 0) {
    unint64_t v13 = (const void *)(a2 + 32);
  }
  else {
    unint64_t v13 = *(const void **)(a2 + 32);
  }
  if (v12 >= 0) {
    size_t v14 = *(unsigned __int8 *)(a2 + 55);
  }
  else {
    size_t v14 = *(void *)(a2 + 40);
  }
  if (v14 >= v11) {
    size_t v15 = v11;
  }
  else {
    size_t v15 = v14;
  }
  uint64_t result = (uint64_t *)memcmp(v10, v13, v15);
  if (result)
  {
    if ((result & 0x80000000) == 0) {
      goto LABEL_19;
    }
LABEL_23:
    uint64_t v16 = *(void *)a2;
    if (*v7 == a2)
    {
      uint64_t v18 = a2;
    }
    else
    {
      if (v16)
      {
        uint64_t v17 = *(void *)a2;
        do
        {
          uint64_t v18 = v17;
          uint64_t v17 = *(void *)(v17 + 8);
        }
        while (v17);
      }
      else
      {
        uint64_t v19 = a2;
        do
        {
          uint64_t v18 = *(void *)(v19 + 16);
          BOOL v37 = *(void *)v18 == v19;
          uint64_t v19 = v18;
        }
        while (v37);
      }
      int v20 = *(char *)(v18 + 55);
      if (v20 >= 0) {
        int v21 = (const void *)(v18 + 32);
      }
      else {
        int v21 = *(const void **)(v18 + 32);
      }
      if (v20 >= 0) {
        size_t v22 = *(unsigned __int8 *)(v18 + 55);
      }
      else {
        size_t v22 = *(void *)(v18 + 40);
      }
      int v23 = *((char *)a3 + 23);
      if (v23 >= 0) {
        uint64_t v24 = a3;
      }
      else {
        uint64_t v24 = *a3;
      }
      if (v23 >= 0) {
        size_t v25 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        size_t v25 = (size_t)a3[1];
      }
      if (v25 >= v22) {
        size_t v26 = v22;
      }
      else {
        size_t v26 = v25;
      }
      uint64_t result = (uint64_t *)memcmp(v21, v24, v26);
      if (result)
      {
        if ((result & 0x80000000) == 0) {
          goto LABEL_48;
        }
      }
      else if (v22 >= v25)
      {
LABEL_48:
        uint64_t v27 = (void *)*v8;
        if (!*v8) {
          goto LABEL_49;
        }
        while (1)
        {
          uint64_t v28 = v27;
          uint64_t v31 = (const void *)v27[4];
          long long v29 = v27 + 4;
          uint64_t v30 = v31;
          int v32 = *((char *)v29 + 23);
          if (v32 >= 0) {
            uint64_t v33 = v29;
          }
          else {
            uint64_t v33 = v30;
          }
          if (v32 >= 0) {
            size_t v34 = *((unsigned __int8 *)v29 + 23);
          }
          else {
            size_t v34 = v29[1];
          }
          if (v34 >= v25) {
            size_t v35 = v25;
          }
          else {
            size_t v35 = v34;
          }
          int v36 = memcmp(v24, v33, v35);
          if (v36)
          {
            if (v36 < 0) {
              goto LABEL_50;
            }
LABEL_64:
            uint64_t result = (uint64_t *)memcmp(v33, v24, v35);
            if (result)
            {
              if ((result & 0x80000000) == 0) {
                goto LABEL_128;
              }
            }
            else if (v34 >= v25)
            {
LABEL_128:
              uint64_t v38 = v8;
              goto LABEL_77;
            }
            int v8 = v28 + 1;
            uint64_t v27 = (void *)v28[1];
            if (!v27) {
              goto LABEL_78;
            }
          }
          else
          {
            if (v25 >= v34) {
              goto LABEL_64;
            }
LABEL_50:
            uint64_t v27 = (void *)*v28;
            int v8 = v28;
            if (!*v28) {
              goto LABEL_78;
            }
          }
        }
      }
    }
    BOOL v37 = v16 == 0;
    if (v16) {
      uint64_t v28 = (void *)v18;
    }
    else {
      uint64_t v28 = (void *)a2;
    }
    if (v37) {
      uint64_t v38 = (void *)a2;
    }
    else {
      uint64_t v38 = (void *)(v18 + 8);
    }
LABEL_77:
    int v8 = v38;
    if (*v38) {
      return result;
    }
    goto LABEL_78;
  }
  if (v11 < v14) {
    goto LABEL_23;
  }
LABEL_19:
  uint64_t result = (uint64_t *)memcmp(v13, v10, v15);
  if (result)
  {
    if ((result & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v14 >= v11)
  {
    return result;
  }
  uint64_t v38 = (void *)(a2 + 8);
  uint64_t v42 = *(void **)(a2 + 8);
  if (v42)
  {
    do
    {
      uint64_t v38 = v42;
      uint64_t v42 = (void *)*v42;
      uint64_t v28 = v38;
      uint64_t v43 = v38;
    }
    while (v42);
    if (v38 == v8) {
      goto LABEL_77;
    }
  }
  else
  {
    uint64_t v43 = (void *)a2;
    do
    {
      char v44 = v43;
      uint64_t v43 = (void *)v43[2];
    }
    while ((void *)*v43 != v44);
    uint64_t v28 = (void *)a2;
    if (v43 == v8) {
      goto LABEL_77;
    }
  }
  uint64_t v47 = (const void *)v43[4];
  uint64_t v45 = v43 + 4;
  uint64_t v46 = v47;
  int v48 = *((char *)v45 + 23);
  if (v48 >= 0) {
    uint64_t v49 = v45;
  }
  else {
    uint64_t v49 = v46;
  }
  if (v48 >= 0) {
    size_t v50 = *((unsigned __int8 *)v45 + 23);
  }
  else {
    size_t v50 = v45[1];
  }
  if (v50 >= v11) {
    size_t v51 = v11;
  }
  else {
    size_t v51 = v50;
  }
  uint64_t result = (uint64_t *)memcmp(v10, v49, v51);
  if (result)
  {
    if ((result & 0x80000000) != 0) {
      goto LABEL_77;
    }
  }
  else if (v11 < v50)
  {
    goto LABEL_77;
  }
  uint64_t v52 = (void *)*v8;
  if (*v8)
  {
    while (1)
    {
      uint64_t v28 = v52;
      std::runtime_error v55 = (const void *)v52[4];
      long long v53 = v52 + 4;
      uint64_t v54 = v55;
      int v56 = *((char *)v53 + 23);
      if (v56 >= 0) {
        uint64_t v57 = v53;
      }
      else {
        uint64_t v57 = v54;
      }
      if (v56 >= 0) {
        size_t v58 = *((unsigned __int8 *)v53 + 23);
      }
      else {
        size_t v58 = v53[1];
      }
      if (v58 >= v11) {
        size_t v59 = v11;
      }
      else {
        size_t v59 = v58;
      }
      int v60 = memcmp(v10, v57, v59);
      if (v60)
      {
        if (v60 < 0) {
          goto LABEL_108;
        }
LABEL_122:
        uint64_t result = (uint64_t *)memcmp(v57, v10, v59);
        if (result)
        {
          if ((result & 0x80000000) == 0) {
            goto LABEL_128;
          }
        }
        else if (v58 >= v11)
        {
          goto LABEL_128;
        }
        int v8 = v28 + 1;
        uint64_t v52 = (void *)v28[1];
        if (!v52) {
          goto LABEL_78;
        }
      }
      else
      {
        if (v11 >= v58) {
          goto LABEL_122;
        }
LABEL_108:
        uint64_t v52 = (void *)*v28;
        int v8 = v28;
        if (!*v28) {
          goto LABEL_78;
        }
      }
    }
  }
LABEL_49:
  uint64_t v28 = v8;
LABEL_78:
  uint64_t v39 = (char *)operator new(0x48uLL);
  uint64_t v40 = (std::string *)(v39 + 32);
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v40, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&v40->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    *((void *)v39 + 6) = *(void *)(a4 + 16);
  }
  *(_OWORD *)(v39 + 56) = *(_OWORD *)(a4 + 24);
  *(void *)uint64_t v39 = 0;
  *((void *)v39 + 1) = 0;
  *((void *)v39 + 2) = v28;
  void *v8 = v39;
  uint64_t v41 = *(void *)*v7;
  if (v41)
  {
    uint64_t *v7 = v41;
    uint64_t v39 = (char *)*v8;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[1], (uint64_t *)v39);
  ++v7[2];
  return result;
}

void sub_18DB10E30(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,void *>>>::operator()[abi:fe180100](char a1, uint64_t a2)
{
  if (a1)
  {
    if (*(unsigned char *)(a2 + 328)) {
      AMSCore::URL::~URL((AMSCore::URL *)(a2 + 176));
    }
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a2 + 144));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a2 + 120));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a2 + 96));
    if (*(char *)(a2 + 55) < 0) {
      operator delete(*(void **)(a2 + 32));
    }
  }
  else if (!a2)
  {
    return;
  }
  operator delete((void *)a2);
}

uint64_t std::expected<AMSCore::MetricsEventModifier::TopicModifier,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 176))
  {
    if (*(unsigned char *)(a1 + 168)) {
      AMSCore::URL::~URL((AMSCore::URL *)(a1 + 16));
    }
  }
  else
  {
    (**(void (***)(uint64_t))a1)(a1);
  }
  return a1;
}

void AMSCore::MetricsEventModifier::MetricsConfig::build(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 608);
  if (!*(unsigned char *)(v1 + 88)) {
    goto LABEL_112;
  }
  uint64_t v3 = (long long *)(a1 + 472);
  __int16 v4 = (std::runtime_error *)(a1 + 416);
  long long v5 = (std::runtime_error *)(v1 + 8);
  char v6 = *(unsigned char *)(v1 + 80);
  if (v6)
  {
    long long v7 = (std::runtime_error_vtbl *)(v1 + 16);
    uint64_t v8 = *(void *)(v1 + 16);
    int v9 = (std::runtime_error_vtbl *)(a1 + 424);
    *(void *)(a1 + 416) = *(void *)(v1 + 8);
    *(void *)(a1 + 424) = v8;
    uint64_t v10 = *(void *)(v1 + 24);
    *(void *)(a1 + 432) = v10;
    if (v10)
    {
      *(void *)(v8 + 16) = v9;
      v5->__vftable = v7;
      v7->~runtime_error = 0;
      *(void *)(v1 + 24) = 0;
      uint64_t v1 = *(void *)(a1 + 608);
    }
    else
    {
      v4->__vftable = v9;
    }
    *(unsigned char *)(a1 + 440) = *(unsigned char *)(v1 + 32);
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 416), v5);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(v1 + 24);
    *(void *)(a1 + 416) = &unk_1EDC827D8;
    size_t v11 = (void *)(v1 + 48);
    uint64_t v12 = *(void *)(v1 + 48);
    uint64_t v13 = a1 + 456;
    *(void *)(a1 + 448) = *(void *)(v1 + 40);
    *(void *)(a1 + 456) = v12;
    uint64_t v14 = *(void *)(v1 + 56);
    *(void *)(a1 + 464) = v14;
    if (v14)
    {
      *(void *)(v12 + 16) = v13;
      *(void *)(v1 + 40) = v11;
      void *v11 = 0;
      *(void *)(v1 + 56) = 0;
    }
    else
    {
      *(void *)(a1 + 448) = v13;
    }
    uint64_t v15 = *(void *)(a1 + 608);
    *uint64_t v3 = *(_OWORD *)(v15 + 64);
    *(void *)(v15 + 64) = 0;
    *(void *)(v15 + 72) = 0;
  }
  *(unsigned char *)(a1 + 488) = v6;
  uint64_t v16 = *(void *)(a1 + 616);
  if (v16 && !atomic_fetch_add((atomic_ullong *volatile)(v16 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v17 = *(std::__shared_weak_count **)(a1 + 616);
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(a1 + 600);
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = *(std::__shared_weak_count **)(a1 + 528);
  if (!v19 || atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*(char *)(a1 + 519) & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  if (*(char *)(a1 + 519) < 0) {
LABEL_20:
  }
    operator delete(*(void **)(a1 + 496));
LABEL_21:
  if (*(char *)(a1 + 591) < 0) {
    operator delete(*(void **)(a1 + 568));
  }
  if (!*(unsigned char *)(a1 + 488))
  {
    std::runtime_error::runtime_error((std::runtime_error *)v81, v4);
    *(_OWORD *)&v81[16] = *(_OWORD *)(a1 + 432);
    size_t v22 = *(unsigned int ***)(a1 + 448);
    uint64_t v21 = *(void *)(a1 + 456);
    *(void *)long long v81 = &unk_1EDC827D8;
    uint64_t v82 = v22;
    char v83 = (unsigned int *)v21;
    uint64_t v84 = *(void *)(a1 + 464);
    if (v84)
    {
      *(void *)(v21 + 16) = &v83;
      *(void *)(a1 + 448) = a1 + 456;
      *(void *)(a1 + 456) = 0;
      *(void *)(a1 + 464) = 0;
    }
    else
    {
      uint64_t v82 = &v83;
    }
    long long v85 = *v3;
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    LOBYTE(v86) = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v64, (uint64_t)v81);
    if (*(unsigned char *)(a1 + 368))
    {
      if (*(unsigned char *)(a1 + 360)) {
        std::__destroy_at[abi:fe180100]<AMSCore::MetricsEventModifier::MetricsConfig,0>(a1 + 24);
      }
      else {
        (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
      }
      *(unsigned char *)(a1 + 368) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v64);
    long long v52 = v65;
    uint64_t v54 = v66;
    long long v53 = v67;
    *(void *)(a1 + 64) = v67;
    uint64_t v55 = a1 + 64;
    *(_OWORD *)(a1 + 40) = v52;
    *(void *)(a1 + 24) = &unk_1EDC827D8;
    uint64_t v56 = v68;
    *(void *)(a1 + 56) = v54;
    *(void *)(a1 + 72) = v56;
    if (v56)
    {
      *((void *)v53 + 2) = v55;
      uint64_t v66 = &v67;
      uint64_t v67 = 0;
      uint64_t v68 = 0;
      long long v53 = 0;
    }
    else
    {
      *(void *)(a1 + 56) = v55;
    }
    *(_OWORD *)(a1 + 80) = v69;
    long long v69 = 0uLL;
    *(unsigned char *)(a1 + 360) = 0;
    *(unsigned char *)(a1 + 368) = 1;
    v64.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v66, (unsigned int *)v53);
    MEMORY[0x192FA3C30](&v64);
    if ((_BYTE)v86)
    {
      *(void *)long long v81 = &unk_1EDC827D8;
      uint64_t v57 = (std::__shared_weak_count *)*((void *)&v85 + 1);
      if (*((void *)&v85 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v85 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v82, v83);
      MEMORY[0x192FA3C30](v81);
      if (*(unsigned char *)(a1 + 488)) {
        goto LABEL_108;
      }
      goto LABEL_110;
    }
    goto LABEL_107;
  }
  if (!v72)
  {
    std::runtime_error::runtime_error((std::runtime_error *)v81, &v64);
    *(_OWORD *)&v81[16] = v65;
    *(void *)long long v81 = &unk_1EDC827D8;
    uint64_t v82 = (unsigned int **)v66;
    char v83 = (unsigned int *)v67;
    uint64_t v84 = v68;
    if (v68)
    {
      *((void *)v67 + 2) = &v83;
      uint64_t v66 = &v67;
      uint64_t v67 = 0;
      uint64_t v68 = 0;
    }
    else
    {
      uint64_t v82 = &v83;
    }
    long long v85 = v69;
    long long v69 = 0uLL;
    LOBYTE(v86) = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v73, (uint64_t)v81);
    if (*(unsigned char *)(a1 + 368))
    {
      if (*(unsigned char *)(a1 + 360)) {
        std::__destroy_at[abi:fe180100]<AMSCore::MetricsEventModifier::MetricsConfig,0>(a1 + 24);
      }
      else {
        (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
      }
      *(unsigned char *)(a1 + 368) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v73);
    long long v58 = v74;
    int v60 = v75;
    uint64_t v59 = v76;
    *(void *)(a1 + 64) = v76;
    uint64_t v61 = a1 + 64;
    *(_OWORD *)(a1 + 40) = v58;
    *(void *)(a1 + 24) = &unk_1EDC827D8;
    uint64_t v62 = v77;
    *(void *)(a1 + 56) = v60;
    *(void *)(a1 + 72) = v62;
    if (v62)
    {
      *(void *)(v59 + 16) = v61;
      long long v75 = &v76;
      uint64_t v76 = 0;
      uint64_t v77 = 0;
      uint64_t v59 = 0;
    }
    else
    {
      *(void *)(a1 + 56) = v61;
    }
    *(_OWORD *)(a1 + 80) = v78;
    long long v78 = 0uLL;
    *(unsigned char *)(a1 + 360) = 0;
    *(unsigned char *)(a1 + 368) = 1;
    v73.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v75, (unsigned int *)v59);
    MEMORY[0x192FA3C30](&v73);
    if ((_BYTE)v86)
    {
      *(void *)long long v81 = &unk_1EDC827D8;
      char v63 = (std::__shared_weak_count *)*((void *)&v85 + 1);
      if (*((void *)&v85 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v85 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v82, v83);
      MEMORY[0x192FA3C30](v81);
    }
    goto LABEL_103;
  }
  if (*(unsigned char *)(a1 + 488))
  {
    AMSCore::MetricsEventModifier::MetricsConfig::buildFieldFilters(&v79, (uint64_t)v4);
    if (*(unsigned char *)(a1 + 488))
    {
      AMSCore::MetricsEventModifier::MetricsConfig::buildTopicOverrides((uint64_t **)&v73, v4);
      if (v72)
      {
        AMSCore::MetricsEventModifier::MetricsConfig::MetricsConfig((uint64_t)v81, (long long *)&v64, (uint64_t)&v79, &v73);
        if (*(unsigned char *)(a1 + 368))
        {
          int v20 = (void (***)(void))(a1 + 24);
          if (*(unsigned char *)(a1 + 360)) {
            std::__destroy_at[abi:fe180100]<AMSCore::MetricsEventModifier::MetricsConfig,0>((uint64_t)v20);
          }
          else {
            (**v20)(v20);
          }
          *(unsigned char *)(a1 + 368) = 0;
        }
        long long v23 = *(_OWORD *)v81;
        size_t v25 = v82;
        uint64_t v24 = v83;
        *(void *)(a1 + 64) = v83;
        uint64_t v26 = a1 + 64;
        *(_OWORD *)(a1 + 24) = v23;
        *(_OWORD *)(a1 + 36) = *(_OWORD *)&v81[12];
        *(void *)(a1 + 56) = v25;
        uint64_t v27 = v84;
        *(void *)(a1 + 72) = v84;
        if (v27)
        {
          *((void *)v24 + 2) = v26;
          uint64_t v82 = &v83;
          char v83 = 0;
          uint64_t v84 = 0;
        }
        else
        {
          *(void *)(a1 + 56) = v26;
        }
        long long v28 = v85;
        *(void *)(a1 + 88) = *((void *)&v85 + 1);
        uint64_t v29 = a1 + 88;
        *(void *)(a1 + 80) = v28;
        uint64_t v30 = v86;
        *(void *)(a1 + 96) = v86;
        if (v30)
        {
          *(void *)(*((void *)&v28 + 1) + 16) = v29;
          *(void *)&long long v85 = (char *)&v85 + 8;
          *((void *)&v85 + 1) = 0;
          uint64_t v86 = 0;
        }
        else
        {
          *(void *)(a1 + 80) = v29;
        }
        int v32 = v87;
        uint64_t v31 = v88;
        *(void *)(a1 + 112) = v88;
        uint64_t v33 = a1 + 112;
        *(void *)(a1 + 104) = v32;
        uint64_t v34 = v89;
        *(void *)(a1 + 120) = v89;
        if (v34)
        {
          *((void *)v31 + 2) = v33;
          int v87 = &v88;
          uint64_t v88 = 0;
          uint64_t v89 = 0;
        }
        else
        {
          *(void *)(a1 + 104) = v33;
        }
        *(unsigned char *)(a1 + 144) = 0;
        size_t v35 = (long long *)(a1 + 144);
        *(_OWORD *)(a1 + 128) = v90;
        *(unsigned char *)(a1 + 296) = 0;
        if (!v106) {
          goto LABEL_63;
        }
        *(unsigned char *)(a1 + 144) = 0;
        *(unsigned char *)(a1 + 168) = 0;
        if (v93)
        {
          *size_t v35 = v91;
          *(void *)(a1 + 160) = v92;
          uint64_t v92 = 0;
          long long v91 = 0uLL;
          *(unsigned char *)(a1 + 168) = 1;
        }
        *(unsigned char *)(a1 + 176) = 0;
        *(unsigned char *)(a1 + 200) = 0;
        if (v96)
        {
          *(_OWORD *)(a1 + 176) = v94;
          *(void *)(a1 + 192) = v95;
          uint64_t v95 = 0;
          long long v94 = 0uLL;
          *(unsigned char *)(a1 + 200) = 1;
        }
        *(unsigned char *)(a1 + 208) = 0;
        *(unsigned char *)(a1 + 232) = 0;
        if (v99)
        {
          *(_OWORD *)(a1 + 208) = v97;
          *(void *)(a1 + 224) = v98;
          uint64_t v98 = 0;
          long long v97 = 0uLL;
          *(unsigned char *)(a1 + 232) = 1;
        }
        *(_DWORD *)(a1 + 240) = v100;
        *(void *)(a1 + 248) = a1 + 248;
        *(void *)(a1 + 256) = a1 + 248;
        *(void *)(a1 + 264) = 0;
        if (v35 != &v91)
        {
          uint64_t v36 = v103;
          if (v103)
          {
            BOOL v37 = v102;
            uint64_t v38 = v101;
            uint64_t v39 = *v102;
            *(void *)(v39 + 8) = *(void *)(v101 + 8);
            **(void **)(v38 + 8) = v39;
            uint64_t v40 = *(void *)(a1 + 248);
            *(void *)(v40 + 8) = v37;
            void *v37 = v40;
            *(void *)(a1 + 248) = v38;
            *(void *)(v38 + 8) = a1 + 248;
            *(void *)(a1 + 264) = v36;
            uint64_t v103 = 0;
          }
          *(_OWORD *)(a1 + 272) = v104;
          *(void *)(a1 + 288) = v105;
          uint64_t v105 = 0;
          long long v104 = 0uLL;
          *(unsigned char *)(a1 + 296) = 1;
LABEL_63:
          *(_OWORD *)(a1 + 304) = __p;
          uint64_t v41 = v108;
          uint64_t v42 = v109;
          uint64_t v108 = 0;
          long long __p = 0uLL;
          *(void *)(a1 + 320) = v41;
          *(void *)(a1 + 328) = v42;
          uint64_t v43 = a1 + 336;
          uint64_t v44 = v110;
          uint64_t v45 = v111;
          *(void *)(a1 + 336) = v110;
          *(void *)(a1 + 344) = v45;
          if (v45)
          {
            *(void *)(v44 + 16) = v43;
            unint64_t v109 = &v110;
            uint64_t v110 = 0;
            uint64_t v111 = 0;
            uint64_t v44 = 0;
          }
          else
          {
            *(void *)(a1 + 328) = v43;
          }
          *(void *)(a1 + 352) = v112;
          *(unsigned char *)(a1 + 360) = 1;
          *(unsigned char *)(a1 + 368) = 1;
          std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>>>::destroy((char *)v44);
          uint64_t v46 = __p;
          if ((void)__p)
          {
            uint64_t v47 = *((void *)&__p + 1);
            int v48 = (void *)__p;
            if (*((void *)&__p + 1) != (void)__p)
            {
              do
              {
                std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v47 - 16));
                std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v47 - 40));
                std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v47 - 64));
                std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(*(char **)(v47 - 120));
                v47 -= 128;
              }
              while (v47 != v46);
              int v48 = (void *)__p;
            }
            *((void *)&__p + 1) = v46;
            operator delete(v48);
          }
          if (v106) {
            AMSCore::URL::~URL((AMSCore::URL *)&v91);
          }
          std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v88);
          std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)&v85 + 1));
          std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy((char *)v83);
          std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>>>::destroy((char *)v73.__imp_.__imp_);
          uint64_t v49 = (char **)v79;
          if (v79)
          {
            size_t v50 = v80;
            size_t v51 = v79;
            if (v80 != v79)
            {
              do
              {
                std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(v50 - 2));
                std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(v50 - 5));
                std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(v50 - 8));
                std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(*(v50 - 15));
                v50 -= 16;
              }
              while (v50 != v49);
              size_t v51 = v79;
            }
            uint64_t v80 = v49;
            operator delete(v51);
          }
LABEL_103:
          if (!v72)
          {
            ((void (*)(std::runtime_error *))v64.~runtime_error)(&v64);
            if (*(unsigned char *)(a1 + 488)) {
              goto LABEL_108;
            }
            goto LABEL_110;
          }
          if (v71[152]) {
            AMSCore::URL::~URL((AMSCore::URL *)v71);
          }
          std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v70);
          std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)&v69 + 1));
          std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v67);
LABEL_107:
          if (*(unsigned char *)(a1 + 488))
          {
LABEL_108:
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v4, *(unsigned int **)(a1 + 424));
LABEL_111:
            *(void *)(a1 + 416) = a1 + 16;
            *(void *)a1 = 0;
            *((unsigned char *)v3 + 152) = 1;
            AMSCore::Task<AMSCore::MetricsEventModifier::MetricsConfig,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v4);
            return;
          }
LABEL_110:
          ((void (*)(std::runtime_error *))v4->~runtime_error)(v4);
          goto LABEL_111;
        }
      }
    }
  }
LABEL_112:
  __break(1u);
}

void sub_18DB11A0C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,void **a57)
{
  std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>>>::destroy(a46);
  a57 = (void **)&a54;
  std::vector<AMSCore::MetricsEventModifier::MetricsConfig::FieldFilters>::__destroy_vector::operator()[abi:fe180100](&a57);
  std::expected<AMSCore::MetricsEventModifier::EventModifier,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&a9);
  std::expected<std::map<std::string,AMSCore::Any>,AMSCore::Error>::~expected[abi:fe180100](v57);
  __cxa_begin_catch(a1);
  AMSCore::Task<AMSCore::MetricsEventModifier::MetricsConfig,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DB11A60()
{
}

void sub_18DB11A68(_Unwind_Exception *a1)
{
  void *v1 = 0;
  *(unsigned char *)(v2 + 152) = 1;
  _Unwind_Resume(a1);
}

void AMSCore::MetricsEventModifier::MetricsConfig::build(char *__p)
{
  if ((__p[624] & 1) == 0)
  {
    uint64_t v2 = *((void *)__p + 77);
    if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 77);
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    __int16 v4 = (std::__shared_weak_count *)*((void *)__p + 75);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    long long v5 = (std::__shared_weak_count *)*((void *)__p + 66);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if ((__p[519] & 0x80000000) == 0)
      {
LABEL_11:
        if ((__p[591] & 0x80000000) == 0) {
          goto LABEL_12;
        }
LABEL_34:
        operator delete(*((void **)__p + 71));
        goto LABEL_12;
      }
    }
    else if ((__p[519] & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(*((void **)__p + 62));
    if ((__p[591] & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }
LABEL_12:
  char v6 = (char *)*((void *)__p + 51);
  if (v6 == __p + 384)
  {
    (*(void (**)(char *))(*((void *)__p + 48) + 32))(__p + 384);
    if (!__p[368]) {
      goto LABEL_21;
    }
    goto LABEL_18;
  }
  if (v6) {
    (*(void (**)(char *))(*(void *)v6 + 40))(v6);
  }
  if (__p[368])
  {
LABEL_18:
    long long v7 = (void (***)(void))(__p + 24);
    if (__p[360]) {
      std::__destroy_at[abi:fe180100]<AMSCore::MetricsEventModifier::MetricsConfig,0>((uint64_t)v7);
    }
    else {
      (**v7)(v7);
    }
  }
LABEL_21:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)__p + 70);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  int v9 = (std::__shared_weak_count *)*((void *)__p + 68);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  operator delete(__p);
}

void std::__destroy_at[abi:fe180100]<AMSCore::MetricsEventModifier::MetricsConfig,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::EventModifier>>>::destroy(*(char **)(a1 + 312));
  uint64_t v2 = *(void *)(a1 + 280);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 288);
    __int16 v4 = *(void **)(a1 + 280);
    if (v3 != v2)
    {
      do
      {
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v3 - 16));
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v3 - 40));
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(v3 - 64));
        std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(*(char **)(v3 - 120));
        v3 -= 128;
      }
      while (v3 != v2);
      __int16 v4 = *(void **)(a1 + 280);
    }
    *(void *)(a1 + 288) = v2;
    operator delete(v4);
  }
  if (*(unsigned char *)(a1 + 272)) {
    AMSCore::URL::~URL((AMSCore::URL *)(a1 + 120));
  }
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a1 + 88));
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a1 + 64));
  long long v5 = *(char **)(a1 + 40);
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v5);
}

void AMSCore::Task<AMSCore::MetricsEventModifier::MetricsConfig,AMSCore::Error>::Promise::unhandled_exception()
{
  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

uint64_t sub_18DB11E08(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, long long a19, uint64_t a20,uint64_t a21,uint64_t a22,long long a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v41, (uint64_t)v38);
  if (*(unsigned char *)(v29 + 352))
  {
    if (*(unsigned char *)(v29 + 344)) {
      std::__destroy_at[abi:fe180100]<AMSCore::MetricsEventModifier::MetricsConfig,0>((uint64_t)v30);
    }
    else {
      ((void (*)(std::runtime_error *))v30->~runtime_error)(v30);
    }
    *(unsigned char *)(v29 + 352) = 0;
  }
  std::runtime_error::runtime_error(v30, v41);
  std::runtime_error v31 = v41[1];
  uint64_t v33 = v42;
  uint64_t v32 = v43;
  *(void *)(v29 + 48) = v43;
  uint64_t v34 = v29 + 48;
  *(std::runtime_error *)(v29 + 24) = v31;
  *(void *)(v29 + 8) = &unk_1EDC827D8;
  uint64_t v35 = v44;
  *(void *)(v29 + 40) = v33;
  *(void *)(v29 + 56) = v35;
  if (v35)
  {
    *(void *)(v32 + 16) = v34;
    uint64_t v42 = &v43;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v32 = 0;
  }
  else
  {
    *(void *)(v29 + 40) = v34;
  }
  *(_OWORD *)(v29 + 64) = v45;
  long long v45 = 0uLL;
  *(unsigned char *)(v29 + 344) = 0;
  *(unsigned char *)(v29 + 352) = 1;
  v41[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v42, (unsigned int *)v32);
  MEMORY[0x192FA3C30](v41);
  v38[0] = &unk_1EDC827D8;
  uint64_t v36 = v40;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v39, v39[1]);
  return MEMORY[0x192FA3C30](v38);
}

uint64_t AMSCore::Task<AMSCore::MetricsEventModifier::MetricsConfig,AMSCore::Error>::Promise::Awaiter::await_suspend(uint64_t result)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void (**)(void))atomic_exchange((atomic_ullong *volatile)(*(void *)result + 360), 1uLL);
  if (v1)
  {
    uint64_t v2 = (uint64_t *)result;
    if (v1 == (void (**)(void))2) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result - 8))(*(void *)result - 16);
    }
    uint64_t v3 = *(void *)result;
    uint64_t result = *(void *)(*(void *)result + 392);
    if (result)
    {
      if (result == v3 + 368)
      {
        BOOL v37 = v36;
        uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 24))(result, v36);
      }
      else
      {
        BOOL v37 = (void *)result;
        *(void *)(v3 + 392) = 0;
      }
    }
    else
    {
      BOOL v37 = 0;
    }
    if (v37)
    {
      uint64_t v4 = *v2;
      if (!*(unsigned char *)(v4 + 352))
      {
        __break(1u);
        return result;
      }
      long long v5 = (const std::runtime_error *)(v4 + 8);
      char v6 = *(unsigned char *)(v4 + 344);
      if (v6)
      {
        std::runtime_error v7 = *v5;
        *(std::runtime_error *)((char *)&v20[0].__imp_.__imp_ + 4) = *(std::runtime_error *)(v4 + 20);
        v20[0] = v7;
        uint64_t v8 = (void *)(v4 + 48);
        uint64_t v9 = *(void *)(v4 + 48);
        uint64_t v21 = *(uint64_t **)(v4 + 40);
        uint64_t v22 = v9;
        uint64_t v23 = *(void *)(v4 + 56);
        if (v23)
        {
          *(void *)(v9 + 16) = &v22;
          *(void *)(v4 + 40) = v8;
          void *v8 = 0;
          *(void *)(v4 + 56) = 0;
        }
        else
        {
          uint64_t v21 = &v22;
        }
        uint64_t v13 = (void *)(v4 + 72);
        uint64_t v14 = *(void *)(v4 + 72);
        *(void *)&long long v24 = *(void *)(v4 + 64);
        *((void *)&v24 + 1) = v14;
        if (*(void *)(v4 + 80))
        {
          *(void *)(v14 + 16) = (char *)&v24 + 8;
          *(void *)(v4 + 64) = v13;
          void *v13 = 0;
          *(void *)(v4 + 80) = 0;
        }
        else
        {
          *(void *)&long long v24 = (char *)&v24 + 8;
        }
        uint64_t v15 = (void *)(v4 + 96);
        uint64_t v16 = *(void *)(v4 + 96);
        uint64_t v26 = *(uint64_t **)(v4 + 88);
        uint64_t v27 = v16;
        if (*(void *)(v4 + 104))
        {
          *(void *)(v16 + 16) = &v27;
          *(void *)(v4 + 88) = v15;
          *uint64_t v15 = 0;
          *(void *)(v4 + 104) = 0;
        }
        else
        {
          uint64_t v26 = &v27;
        }
        long long v29 = *(_OWORD *)(v4 + 112);
        v30[0] = 0;
        v30[152] = 0;
        std::__optional_storage_base<AMSCore::URL,false>::__construct_from[abi:fe180100]<std::__optional_move_base<AMSCore::URL,false>>((uint64_t)v30, (long long *)(v4 + 128));
        uint64_t v32 = 0;
        long long v31 = 0uLL;
        long long v31 = *(_OWORD *)(v4 + 288);
        uint64_t v17 = *(void **)(v4 + 312);
        uint64_t v32 = *(void *)(v4 + 304);
        *(void *)(v4 + 296) = 0;
        *(void *)(v4 + 304) = 0;
        *(void *)(v4 + 288) = 0;
        uint64_t v18 = *(void *)(v4 + 320);
        uint64_t v19 = *(void *)(v4 + 328);
        uint64_t v33 = v17;
        v34[0] = v18;
        v34[1] = v19;
        if (v19)
        {
          *(void *)(v18 + 16) = v34;
          *(void *)(v4 + 312) = v4 + 320;
          *(void *)(v4 + 320) = 0;
          *(void *)(v4 + 328) = 0;
        }
        else
        {
          uint64_t v33 = v34;
        }
        v34[2] = *(void *)(v4 + 336);
      }
      else
      {
        std::runtime_error::runtime_error(v20, v5);
        uint64_t v10 = (void *)(v4 + 48);
        uint64_t v11 = *(void *)(v4 + 48);
        v20[1] = *(std::runtime_error *)(v4 + 24);
        uint64_t v12 = *(uint64_t **)(v4 + 40);
        v20[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        uint64_t v21 = v12;
        uint64_t v22 = v11;
        uint64_t v23 = *(void *)(v4 + 56);
        if (v23)
        {
          *(void *)(v11 + 16) = &v22;
          *(void *)(v4 + 40) = v10;
          void *v10 = 0;
          *(void *)(v4 + 56) = 0;
        }
        else
        {
          uint64_t v21 = &v22;
        }
        long long v24 = *(_OWORD *)(v4 + 64);
        *(void *)(v4 + 64) = 0;
        *(void *)(v4 + 72) = 0;
      }
      char v35 = v6;
      if (!v37) {
        std::__throw_bad_function_call[abi:fe180100]();
      }
      (*(void (**)(void *, std::runtime_error *))(*v37 + 48))(v37, v20);
      if (v35) {
        std::__destroy_at[abi:fe180100]<AMSCore::MetricsEventModifier::MetricsConfig,0>((uint64_t)v20);
      }
      else {
        ((void (*)(std::runtime_error *))v20[0].~runtime_error)(v20);
      }
    }
    else
    {
      (*v1)(v1);
    }
    uint64_t result = (uint64_t)v37;
    if (v37 == v36)
    {
      return (*(uint64_t (**)(void *))(v36[0] + 32))(v36);
    }
    else if (v37)
    {
      return (*(uint64_t (**)(void *))(*v37 + 40))(v37);
    }
  }
  return result;
}

void sub_18DB12344(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AMSCore::Task<AMSCore::MetricsEventModifier::MetricsConfig,AMSCore::Error>::ValuePromise::~ValuePromise(uint64_t a1)
{
  uint64_t v2 = a1 + 368;
  uint64_t v3 = *(void *)(a1 + 392);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    if (!*(unsigned char *)(a1 + 352)) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  if (*(unsigned char *)(a1 + 352))
  {
LABEL_7:
    uint64_t v4 = (void (***)(void))(a1 + 8);
    if (*(unsigned char *)(a1 + 344)) {
      std::__destroy_at[abi:fe180100]<AMSCore::MetricsEventModifier::MetricsConfig,0>((uint64_t)v4);
    }
    else {
      (**v4)(v4);
    }
  }
LABEL_10:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::MetricsEventModifier::MetricsConfig,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::MetricsEventModifier::MetricsConfig,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::MetricsEventModifier::MetricsConfig,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINS_20MetricsEventModifier13MetricsConfigENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINS_20MetricsEventModifier13MetricsConfigENS_5ErrorEE7Promise17get_return"
                                "_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINS_20MetricsEventModifier13MetricsConfigENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINS_20MetricsEventModifier13MetricsConfigENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::MetricsEventModifier::MetricsConfig,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::MetricsEventModifier::MetricsConfig,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::MetricsEventModifier::MetricsConfig,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 360), 2uLL)) {
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::Task<AMSCore::MetricsEventModifier::MetricsConfig,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::MetricsEventModifier::MetricsConfig,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::MetricsEventModifier::MetricsConfig,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void AMSCore::MetricsEventModifier::MergedEventModifier::shouldDropEvent(AMSCore::MetricsEventModifier::MergedEventModifier *this, const AMSCore::IMetricsProvider::Event *a2)
{
  uint64_t v4 = (char *)a2 + 72;
  AMSCore::getValueByKey<std::string,std::map<std::string,AMSCore::Any> const>((uint64_t)&v25, (uint64_t)a2 + 72, "topic", 5uLL);
  if (!v27)
  {
    __break(1u);
    return;
  }
  uint64_t v5 = *(void *)(v25 + 8);
  if (*(char *)(v25 + 23) >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(v25 + 23);
  }
  if (v5 && !*((unsigned char *)this + 27))
  {
    AMSCore::getValueByKey<std::string,std::map<std::string,AMSCore::Any> const>((uint64_t)&v25, (uint64_t)v4, "eventType", 9uLL);
    if (!v27)
    {
      (*(void (**)(uint64_t *))v25)(&v25);
      goto LABEL_46;
    }
    char v6 = (uint64_t *)*((void *)this + 8);
    if (!v6)
    {
LABEL_46:
      if (!*((unsigned char *)a2 + 96))
      {
        if (*((unsigned char *)this + 16))
        {
          AMSCore::ServiceProvider<AMSCore::IMetricsSamplingProvider>::getDefault(&v25);
          (*(void (**)(uint64_t, AMSCore::MetricsEventModifier::MergedEventModifier *, void))(*(void *)v25 + 24))(v25, this, *((void *)this + 35));
          long long v24 = v26;
          if (v26)
          {
            if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
        }
      }
      return;
    }
    int v7 = *(char *)(v25 + 23);
    if (v7 >= 0) {
      uint64_t v8 = (const void *)v25;
    }
    else {
      uint64_t v8 = *(const void **)v25;
    }
    if (v7 >= 0) {
      size_t v9 = *(unsigned __int8 *)(v25 + 23);
    }
    else {
      size_t v9 = *(void *)(v25 + 8);
    }
    uint64_t v10 = (void *)((char *)this + 64);
    while (1)
    {
      int v11 = *((char *)v6 + 55);
      if (v11 >= 0) {
        uint64_t v12 = v6 + 4;
      }
      else {
        uint64_t v12 = (const void *)v6[4];
      }
      if (v11 >= 0) {
        size_t v13 = *((unsigned __int8 *)v6 + 55);
      }
      else {
        size_t v13 = v6[5];
      }
      if (v9 >= v13) {
        size_t v14 = v13;
      }
      else {
        size_t v14 = v9;
      }
      int v15 = memcmp(v12, v8, v14);
      if (v15)
      {
        if (v15 < 0) {
          goto LABEL_17;
        }
LABEL_31:
        uint64_t v10 = v6;
        char v6 = (uint64_t *)*v6;
        if (!v6)
        {
LABEL_32:
          if (v10 == (void *)((char *)this + 64)) {
            goto LABEL_46;
          }
          uint64_t v18 = (const void *)v10[4];
          uint64_t v17 = v10 + 4;
          uint64_t v16 = v18;
          int v19 = *((char *)v17 + 23);
          if (v19 >= 0) {
            int v20 = v17;
          }
          else {
            int v20 = v16;
          }
          if (v19 >= 0) {
            size_t v21 = *((unsigned __int8 *)v17 + 23);
          }
          else {
            size_t v21 = v17[1];
          }
          if (v21 >= v9) {
            size_t v22 = v9;
          }
          else {
            size_t v22 = v21;
          }
          int v23 = memcmp(v8, v20, v22);
          if (v23)
          {
            if (v23 < 0) {
              goto LABEL_46;
            }
          }
          else if (v9 < v21)
          {
            goto LABEL_46;
          }
          return;
        }
      }
      else
      {
        if (v13 >= v9) {
          goto LABEL_31;
        }
LABEL_17:
        char v6 = (uint64_t *)v6[1];
        if (!v6) {
          goto LABEL_32;
        }
      }
    }
  }
}

void AMSCore::MetricsEventModifier::MergedEventModifier::handleFieldModifiers(AMSCore::MetricsEventModifier::MergedEventModifier *this, AMSCore::IMetricsProvider::Event *a2)
{
  uint64_t v4 = (const void **)*((void *)this + 4);
  uint64_t v5 = (const void ***)((char *)this + 40);
  if (v4 != (const void **)((char *)this + 40))
  {
    char v6 = (uint64_t *)((char *)a2 + 80);
    do
    {
      int v7 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)a2 + 72, v4 + 4);
      if (v6 != v7) {
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((void *)a2 + 9, (uint64_t)v7);
      }
      std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((void *)a2 + 16, v4 + 4);
      uint64_t v8 = (const void **)v4[1];
      if (v8)
      {
        do
        {
          size_t v9 = (const void ***)v8;
          uint64_t v8 = (const void **)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          size_t v9 = (const void ***)v4[2];
          BOOL v10 = *v9 == v4;
          uint64_t v4 = (const void **)v9;
        }
        while (!v10);
      }
      uint64_t v4 = (const void **)v9;
    }
    while (v9 != v5);
  }
  int v11 = (AMSCore::MetricsEventModifier::MergedEventModifier *)*((void *)this + 10);
  if (v11 != (AMSCore::MetricsEventModifier::MergedEventModifier *)((char *)this + 88))
  {
    uint64_t v12 = (char *)a2 + 72;
    size_t v13 = (void *)((char *)a2 + 80);
    uint64_t v41 = (void **)v12;
    do
    {
      if (*((char *)v11 + 55) < 0)
      {
        int v15 = (const void *)*((void *)v11 + 4);
        size_t v14 = *((void *)v11 + 5);
        uint64_t v16 = (uint64_t *)*v13;
        if (!*v13) {
          goto LABEL_52;
        }
      }
      else
      {
        size_t v14 = *((unsigned __int8 *)v11 + 55);
        int v15 = (char *)v11 + 32;
        uint64_t v16 = (uint64_t *)*v13;
        if (!*v13) {
          goto LABEL_52;
        }
      }
      uint64_t v17 = v13;
      do
      {
        while (1)
        {
          int v18 = *((char *)v16 + 55);
          int v19 = v18 >= 0 ? v16 + 4 : (uint64_t *)v16[4];
          size_t v20 = v18 >= 0 ? *((unsigned __int8 *)v16 + 55) : v16[5];
          size_t v21 = v20 >= v14 ? v14 : v20;
          int v22 = memcmp(v15, v19, v21);
          if (v22) {
            break;
          }
          if (v14 <= v20) {
            goto LABEL_34;
          }
LABEL_20:
          uint64_t v16 = (uint64_t *)v16[1];
          if (!v16) {
            goto LABEL_35;
          }
        }
        if ((v22 & 0x80000000) == 0) {
          goto LABEL_20;
        }
LABEL_34:
        uint64_t v17 = v16;
        uint64_t v16 = (uint64_t *)*v16;
      }
      while (v16);
LABEL_35:
      if (v17 != v13)
      {
        int v23 = *((char *)v17 + 55);
        if (v23 >= 0) {
          long long v24 = v17 + 4;
        }
        else {
          long long v24 = (const void *)v17[4];
        }
        if (v23 >= 0) {
          size_t v25 = *((unsigned __int8 *)v17 + 55);
        }
        else {
          size_t v25 = v17[5];
        }
        if (v25 >= v14) {
          size_t v26 = v14;
        }
        else {
          size_t v26 = v25;
        }
        int v27 = memcmp(v15, v24, v26);
        if (v27)
        {
          if ((v27 & 0x80000000) == 0) {
            goto LABEL_47;
          }
        }
        else if (v14 >= v25)
        {
LABEL_47:
          int v28 = *((_DWORD *)v17 + 20);
          if (v28 == -1) {
            LOBYTE(v28) = 0;
          }
          switch((char)v28)
          {
            case 1:
              unint64_t v32 = 0;
              uint64_t v33 = *((unsigned __int8 *)v17 + 56);
              goto LABEL_62;
            case 2:
              uint64_t v29 = (uint64_t)*((double *)v17 + 7);
              goto LABEL_61;
            case 3:
            case 4:
              uint64_t v29 = v17[7];
              goto LABEL_61;
            case 7:
              uint64_t v29 = v17[7] / 1000;
LABEL_61:
              uint64_t v33 = v29;
              unint64_t v32 = v29 & 0xFFFFFFFFFFFFFF00;
LABEL_62:
              v42.__vftable = (std::runtime_error_vtbl *)(v32 | v33);
              char v47 = 1;
              uint64_t v31 = *((void *)v11 + 8);
              if ((v31 & 0x8000000000000000) == 0) {
                goto LABEL_63;
              }
              goto LABEL_68;
            default:
              break;
          }
        }
      }
LABEL_52:
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[34]>((uint64_t)&v48, 4u, "any doesn't contain expected type");
      std::runtime_error::runtime_error(&v42, &v48);
      long long v43 = v49;
      uint64_t v30 = (unsigned int *)v51;
      v42.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v44 = v50;
      v45[0] = v51;
      v45[1] = v52;
      if (v52)
      {
        *(void *)(v51 + 16) = v45;
        uint64_t v30 = 0;
        size_t v50 = &v51;
        uint64_t v51 = 0;
        uint64_t v52 = 0;
      }
      else
      {
        uint64_t v44 = v45;
      }
      long long v46 = v53;
      long long v53 = 0uLL;
      char v47 = 0;
      v48.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v50, v30);
      MEMORY[0x192FA3C30](&v48);
      if (!v47) {
        goto LABEL_67;
      }
      uint64_t v31 = *((void *)v11 + 8);
      if (v31 < 0) {
        goto LABEL_68;
      }
LABEL_63:
      uint64_t v34 = *((void *)v11 + 7);
      if (v34 >= 1)
      {
        double v35 = __exp10((double)v31);
        double v36 = (double)(uint64_t)v42.__vftable / (double)v34 / v35;
        double v37 = floor(v36);
        double v38 = ceil(v36);
        if ((uint64_t)v42.__vftable > 0) {
          double v38 = v37;
        }
        v48.__vftable = (std::runtime_error_vtbl *)(uint64_t)(v35 * v38);
        v48.__imp_.__imp_ = (const char *)1;
        std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<long long>(v41, (const std::string::value_type **)v11 + 4, (uint64_t **)&v48);
        if (!v47) {
LABEL_67:
        }
          ((void (*)(std::runtime_error *))v42.~runtime_error)(&v42);
      }
LABEL_68:
      uint64_t v39 = (AMSCore::MetricsEventModifier::MergedEventModifier *)*((void *)v11 + 1);
      if (v39)
      {
        do
        {
          uint64_t v40 = v39;
          uint64_t v39 = *(AMSCore::MetricsEventModifier::MergedEventModifier **)v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          uint64_t v40 = (AMSCore::MetricsEventModifier::MergedEventModifier *)*((void *)v11 + 2);
          BOOL v10 = *(void *)v40 == (void)v11;
          int v11 = v40;
        }
        while (!v10);
      }
      int v11 = v40;
    }
    while (v40 != (AMSCore::MetricsEventModifier::MergedEventModifier *)((char *)this + 88));
  }
}

void AMSCore::MetricsEventModifier::MetricsConfig::getOverrideForEvent(uint64_t a1, uint64_t a2, AMSCore::MetricsEventModifier::EventModifierForFieldFilters *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = a1 + 40;
  *(void *)(a1 + 32) = a1 + 40;
  int v7 = (uint64_t *)(a1 + 32);
  *(void *)(a1 + 48) = 0;
  uint64_t v8 = *(const void ***)(a2 + 32);
  size_t v9 = (const void ***)(a2 + 40);
  if (v8 != (const void **)(a2 + 40))
  {
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(v7, v6, v8 + 4, (uint64_t)(v8 + 4));
      size_t v13 = (const void **)v8[1];
      if (v13)
      {
        do
        {
          size_t v14 = (const void ***)v13;
          size_t v13 = (const void **)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          size_t v14 = (const void ***)v8[2];
          BOOL v15 = *v14 == v8;
          uint64_t v8 = (const void **)v14;
        }
        while (!v15);
      }
      uint64_t v8 = (const void **)v14;
    }
    while (v14 != v9);
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 72) = 0;
  BOOL v10 = *(const void ***)(a2 + 56);
  if (v10 != (const void **)(a2 + 64))
  {
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t *)(a1 + 56), a1 + 64, v10 + 4, (uint64_t)(v10 + 4));
      uint64_t v16 = (const void **)v10[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = (const void ***)v16;
          uint64_t v16 = (const void **)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (const void ***)v10[2];
          BOOL v15 = *v17 == v10;
          BOOL v10 = (const void **)v17;
        }
        while (!v15);
      }
      BOOL v10 = (const void **)v17;
    }
    while (v17 != (const void ***)(a2 + 64));
  }
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  int v11 = *(const void ***)(a2 + 80);
  if (v11 != (const void **)(a2 + 88))
  {
    do
    {
      std::__tree<AMSCore::MetricsEventModifier::DeResFields>::__emplace_hint_unique_key_args<AMSCore::MetricsEventModifier::DeResFields,AMSCore::MetricsEventModifier::DeResFields const&>((uint64_t *)(a1 + 80), a1 + 88, v11 + 4, (uint64_t)(v11 + 4));
      int v18 = (const void **)v11[1];
      if (v18)
      {
        do
        {
          int v19 = (const void ***)v18;
          int v18 = (const void **)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          int v19 = (const void ***)v11[2];
          BOOL v15 = *v19 == v11;
          int v11 = (const void **)v19;
        }
        while (!v15);
      }
      int v11 = (const void **)v19;
    }
    while (v19 != (const void ***)(a2 + 88));
  }
  *(unsigned char *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 272) = 0;
  if (*(unsigned char *)(a2 + 272))
  {
    AMSCore::URL::URL((std::string *)(a1 + 120), (const AMSCore::URL *)(a2 + 120));
    *(unsigned char *)(a1 + 272) = 1;
  }
  uint64_t v48 = a1 + 120;
  *(void *)(a1 + 280) = *(void *)(a2 + 328);
  uint64_t v12 = *(void **)(a2 + 280);
  long long v49 = (AMSCore::MetricsEventModifier::EventModifierForFieldFilters *)a1;
  for (uint64_t i = *(void **)(a2 + 288); v12 != i; v12 += 16)
  {
    size_t v20 = (const void **)*v12;
    if ((void *)*v12 == v12 + 1)
    {
LABEL_29:
    }
    else
    {
      while (1)
      {
        size_t v21 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)a3, v20 + 4);
        if ((uint64_t *)((char *)a3 + 8) == v21) {
          break;
        }
        int v22 = (long long *)v20[7];
        int v23 = (long long *)v20[8];
        if (v22 == v23) {
          break;
        }
        long long v24 = (unsigned __int8 *)(v21 + 7);
        while (1)
        {
          if (*((char *)v22 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)v22, *((void *)v22 + 1));
          }
          else
          {
            long long v25 = *v22;
            v51.__r_.__value_.__r.__words[2] = *((void *)v22 + 2);
            *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v25;
          }
          int v52 = 5;
          int v26 = AMSCore::operator==((unsigned __int8 *)&v51, v24);
          _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8fe180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8fe180100EvEUlRT_E_JRNS0_6__baseILS12_1EJS8_bdxySE_SG_SO_SX_S10_EEEEEEDcS14_DpT0_((uint64_t)&v53, (uint64_t)&v51);
          if (v26) {
            break;
          }
          int v22 = (long long *)((char *)v22 + 24);
          if (v22 == v23) {
            goto LABEL_30;
          }
        }
        int v27 = (const void **)v20[1];
        if (v27)
        {
          do
          {
            int v28 = (const void ***)v27;
            int v27 = (const void **)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            int v28 = (const void ***)v20[2];
            BOOL v15 = *v28 == v20;
            size_t v20 = (const void **)v28;
          }
          while (!v15);
        }
        size_t v20 = (const void **)v28;
        if (v28 == v12 + 1) {
          goto LABEL_29;
        }
      }
    }
LABEL_30:
    ;
  }
  uint64_t v31 = (uint64_t *)*((void *)a3 + 1);
  uint64_t v30 = (void *)((char *)a3 + 8);
  uint64_t v29 = v31;
  if (!v31) {
    return;
  }
  unint64_t v32 = v30;
  do
  {
    while (1)
    {
      int v33 = *((char *)v29 + 55);
      uint64_t v34 = v33 >= 0 ? v29 + 4 : (uint64_t *)v29[4];
      unint64_t v35 = v33 >= 0 ? *((unsigned __int8 *)v29 + 55) : v29[5];
      size_t v36 = v35 >= 5 ? 5 : v35;
      int v37 = memcmp(v34, "topic", v36);
      if (v37) {
        break;
      }
      if (v35 < 5) {
        goto LABEL_52;
      }
LABEL_50:
      unint64_t v32 = v29;
      uint64_t v29 = (uint64_t *)*v29;
      if (!v29) {
        goto LABEL_67;
      }
    }
    if ((v37 & 0x80000000) == 0) {
      goto LABEL_50;
    }
LABEL_52:
    uint64_t v29 = (uint64_t *)v29[1];
  }
  while (v29);
LABEL_67:
  if (v32 != v30)
  {
    int v38 = *((char *)v32 + 55);
    if (v38 >= 0) {
      uint64_t v39 = v32 + 4;
    }
    else {
      uint64_t v39 = (const void *)v32[4];
    }
    if (v38 >= 0) {
      unint64_t v40 = *((unsigned __int8 *)v32 + 55);
    }
    else {
      unint64_t v40 = v32[5];
    }
    if (v40 >= 5) {
      size_t v41 = 5;
    }
    else {
      size_t v41 = v40;
    }
    int v42 = memcmp(v39, "topic", v41);
    if (v42)
    {
      if (v42 < 0)
      {
LABEL_81:
        if (*((_DWORD *)v32 + 20) == 5)
        {
          long long v43 = *((_DWORD *)v32 + 20) == 5 ? (const void **)(v32 + 7) : 0;
          uint64_t v44 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(a2 + 304, v43);
          if ((uint64_t *)(a2 + 312) != v44)
          {
            long long v46 = v44;
            if (*((unsigned char *)v46 + 168))
            {
              uint64_t v47 = v46[20];
              *(unsigned char *)(v48 - 8) = *((unsigned char *)v46 + 168);
              *(void *)(v48 - 16) = v47;
            }
            if (*((unsigned char *)v46 + 328)) {
              std::__optional_storage_base<AMSCore::URL,false>::__assign_from[abi:fe180100]<std::__optional_copy_assign_base<AMSCore::URL,false> const&>(v48, (AMSCore::URL *)(v46 + 22));
            }
          }
        }
      }
    }
    else if (v40 <= 5)
    {
      goto LABEL_81;
    }
  }
}

void sub_18DB13074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, AMSCore::MetricsEventModifier::EventModifier *a11)
{
}

void sub_18DB130B8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*v3);
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*v2);
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void AMSCore::MetricsEventModifier::MetricsConfig::getOverrideForTopic(uint64_t a1, uint64_t a2, const void **a3)
{
  *(_OWORD *)a1 = *(_OWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v6 = a1 + 16;
  *(unsigned char *)(a1 + 168) = 0;
  if (*(unsigned char *)(a2 + 272))
  {
    AMSCore::URL::URL((std::string *)(a1 + 16), (const AMSCore::URL *)(a2 + 120));
    *(unsigned char *)(a1 + 168) = 1;
  }
  int v7 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(a2 + 304, a3);
  if ((uint64_t *)(a2 + 312) != v7)
  {
    if (*((unsigned char *)v7 + 168))
    {
      uint64_t v8 = v7[20];
      *(unsigned char *)(a1 + 8) = *((unsigned char *)v7 + 168);
      *(void *)a1 = v8;
    }
    if (*((unsigned char *)v7 + 328)) {
      std::__optional_storage_base<AMSCore::URL,false>::__assign_from[abi:fe180100]<std::__optional_copy_assign_base<AMSCore::URL,false> const&>(v6, (AMSCore::URL *)(v7 + 22));
    }
  }
}

void sub_18DB13198(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v2 + 168)) {
    AMSCore::URL::~URL(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::MetricsEventModifierProvider::~MetricsEventModifierProvider(std::mutex *this)
{
  uint64_t v2 = *(std::__shared_weak_count **)&this[1].__m_.__opaque[48];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    unint64_t v3 = *(std::__shared_weak_count **)&this[1].__m_.__opaque[32];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    unint64_t v3 = *(std::__shared_weak_count **)&this[1].__m_.__opaque[32];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = *(std::__shared_weak_count **)&this[1].__m_.__opaque[16];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = *(std::__shared_weak_count **)this[1].__m_.__opaque;
    if (!v5) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v5 = *(std::__shared_weak_count **)this[1].__m_.__opaque;
    if (!v5) {
      goto LABEL_13;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_13:
  std::mutex::~mutex(this);
}

void *std::__function::__func<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0,std::allocator<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::target_type()
{
}

uint64_t std::__function::__func<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0,std::allocator<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore28MetricsEventModifierProvider4makeENS_10BagServiceEE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore28MetricsEventModifierProvider4makeENS_10BagServiceEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore28MetricsEventModifierProvider4makeENS_10BagServiceEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore28MetricsEventModifierProvider4makeENS_10BagServiceEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0,std::allocator<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)(a1 + 8);
      if (!v7) {
        goto LABEL_29;
      }
      char v25 = 7;
      strcpy((char *)v24, "metrics");
      *(_OWORD *)long long __p = 0u;
      long long v22 = 0u;
      int v23 = 1065353216;
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, (uint64_t)v24, (uint64_t)v24);
      uint64_t v8 = (void **)v22;
      if ((void)v22)
      {
        uint64_t v20 = v7;
        uint64_t v9 = *a2;
        unint64_t v10 = a2[1];
        uint64_t v11 = a2[5];
        unint64_t v12 = a2[6];
        size_t v13 = (void *)v22;
        uint64_t v15 = a2[10];
        unint64_t v14 = a2[11];
        while (1)
        {
          if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v9, v10, (uint64_t)(v13 + 2)))
          {
            int v16 = 1;
            goto LABEL_16;
          }
          if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v11, v12, (uint64_t)(v13 + 2)))
          {
            int v16 = 1;
            goto LABEL_16;
          }
          if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v15, v14, (uint64_t)(v13 + 2)))
          {
            break;
          }
          size_t v13 = (void *)*v13;
          if (!v13)
          {
            int v16 = 0;
            goto LABEL_16;
          }
        }
        int v16 = 1;
        do
        {
LABEL_16:
          uint64_t v17 = (void **)*v8;
          if (*((char *)v8 + 39) < 0) {
            operator delete(v8[2]);
          }
          operator delete(v8);
          uint64_t v8 = v17;
        }
        while (v17);
        uint64_t v7 = v20;
      }
      else
      {
        int v16 = 0;
      }
      int v18 = __p[0];
      __p[0] = 0;
      if (v18) {
        operator delete(v18);
      }
      if (v25 < 0)
      {
        operator delete(v24[0]);
        if (!v16) {
          goto LABEL_29;
        }
      }
      else if (!v16)
      {
LABEL_29:
        if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        return;
      }
      std::mutex::lock((std::mutex *)v7);
      int v19 = *(std::__shared_weak_count **)(v7 + 72);
      *(void *)(v7 + 64) = 0;
      *(void *)(v7 + 72) = 0;
      if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      std::mutex::unlock((std::mutex *)v7);
      goto LABEL_29;
    }
  }
}

void sub_18DB135E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0,std::allocator<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0,std::allocator<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t std::__function::__func<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0,std::allocator<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1EDC83238;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0,std::allocator<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1EDC83238;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0,std::allocator<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::~__func(void *a1)
{
  *a1 = &unk_1EDC83238;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x192FA4080);
}

void *std::__function::__func<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0,std::allocator<AMSCore::MetricsEventModifierProvider::make(AMSCore::BagService)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::~__func(void *a1)
{
  *a1 = &unk_1EDC83238;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<AMSCore::MetricsEventModifierProvider *,std::shared_ptr<AMSCore::MetricsEventModifierProvider>::__shared_ptr_default_delete<AMSCore::MetricsEventModifierProvider,AMSCore::MetricsEventModifierProvider>,std::allocator<AMSCore::MetricsEventModifierProvider>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN7AMSCore28MetricsEventModifierProviderEE27__shared_ptr_default_deleteIS2_S2_EE"
    || ((v3 & (unint64_t)"NSt3__110shared_ptrIN7AMSCore28MetricsEventModifierProviderEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "NSt3__110shared_ptrIN7AMSCore28MetricsEventModifierProviderEE27__shared_ptr_default_deleteIS2_S2_EE")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN7AMSCore28MetricsEventModifierProviderEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

std::mutex *std::__shared_ptr_pointer<AMSCore::MetricsEventModifierProvider *,std::shared_ptr<AMSCore::MetricsEventModifierProvider>::__shared_ptr_default_delete<AMSCore::MetricsEventModifierProvider,AMSCore::MetricsEventModifierProvider>,std::allocator<AMSCore::MetricsEventModifierProvider>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(std::mutex **)(a1 + 24);
  if (result)
  {
    AMSCore::MetricsEventModifierProvider::~MetricsEventModifierProvider(result);
    JUMPOUT(0x192FA4080);
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::MetricsEventModifierProvider *,std::shared_ptr<AMSCore::MetricsEventModifierProvider>::__shared_ptr_default_delete<AMSCore::MetricsEventModifierProvider,AMSCore::MetricsEventModifierProvider>,std::allocator<AMSCore::MetricsEventModifierProvider>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void AMSCore::MetricsEventModifierProvider::Config::reloadModifier(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = operator new(0x220uLL);
  void *v5 = AMSCore::MetricsEventModifierProvider::Config::reloadModifier;
  v5[1] = AMSCore::MetricsEventModifierProvider::Config::reloadModifier;
  uint64_t v6 = a3[1];
  v5[62] = a2;
  v5[63] = v6;
  *a3 = 0;
  a3[1] = 0;
  v5[64] = a3[3];
  a3[2] = 0;
  a3[3] = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *((unsigned char *)v5 + 24) = 0;
  *((unsigned char *)v5 + 40) = 0;
  v5[6] = 0;
  v5[10] = 0;
  operator new();
}

void sub_18DB16374(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    JUMPOUT(0x18DB16394);
  }
  JUMPOUT(0x18DB1638CLL);
}

void sub_18DB16384(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t AMSCore::MetricsEventModifierProvider::Config::reloadModifier(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 520);
  if (!*(unsigned char *)(v1 + 352))
  {
    __break(1u);
    return result;
  }
  uint64_t v2 = result;
  unint64_t v3 = (std::runtime_error *)(result + 88);
  uint64_t v4 = (const std::runtime_error *)(v1 + 8);
  char v5 = *(unsigned char *)(v1 + 344);
  if (v5)
  {
    std::runtime_error v6 = *v4;
    *(_OWORD *)(result + 100) = *(_OWORD *)(v1 + 20);
    *unint64_t v3 = v6;
    *(void *)(result + 120) = *(void *)(v1 + 40);
    uint64_t v7 = (void *)(v1 + 48);
    uint64_t v8 = *(void *)(v1 + 48);
    *(void *)(result + 128) = v8;
    uint64_t v9 = result + 128;
    uint64_t v10 = *(void *)(v1 + 56);
    *(void *)(result + 136) = v10;
    if (v10)
    {
      *(void *)(v8 + 16) = v9;
      *(void *)(v1 + 40) = v7;
      void *v7 = 0;
      *(void *)(v1 + 56) = 0;
    }
    else
    {
      *(void *)(result + 120) = v9;
    }
    *(void *)(result + 144) = *(void *)(v1 + 64);
    uint64_t v15 = (void *)(v1 + 72);
    uint64_t v16 = *(void *)(v1 + 72);
    *(void *)(result + 152) = v16;
    uint64_t v17 = result + 152;
    uint64_t v18 = *(void *)(v1 + 80);
    *(void *)(result + 160) = v18;
    if (v18)
    {
      *(void *)(v16 + 16) = v17;
      *(void *)(v1 + 64) = v15;
      *uint64_t v15 = 0;
      *(void *)(v1 + 80) = 0;
    }
    else
    {
      *(void *)(result + 144) = v17;
    }
    *(void *)(result + 168) = *(void *)(v1 + 88);
    int v19 = (void *)(v1 + 96);
    uint64_t v20 = *(void *)(v1 + 96);
    *(void *)(result + 176) = v20;
    uint64_t v21 = result + 176;
    uint64_t v22 = *(void *)(v1 + 104);
    *(void *)(result + 184) = v22;
    if (v22)
    {
      *(void *)(v20 + 16) = v21;
      *(void *)(v1 + 88) = v19;
      void *v19 = 0;
      *(void *)(v1 + 104) = 0;
    }
    else
    {
      *(void *)(result + 168) = v21;
    }
    long long v23 = *(_OWORD *)(v1 + 112);
    *(unsigned char *)(result + 208) = 0;
    *(_OWORD *)(result + 192) = v23;
    *(unsigned char *)(result + 360) = 0;
    std::__optional_storage_base<AMSCore::URL,false>::__construct_from[abi:fe180100]<std::__optional_move_base<AMSCore::URL,false>>(result + 208, (long long *)(v1 + 128));
    *(void *)(v2 + 368) = 0;
    *(void *)(v2 + 376) = 0;
    *(void *)(v2 + 384) = 0;
    *(_OWORD *)(v2 + 368) = *(_OWORD *)(v1 + 288);
    *(void *)(v2 + 384) = *(void *)(v1 + 304);
    *(void *)(v1 + 288) = 0;
    *(void *)(v1 + 296) = 0;
    *(void *)(v1 + 304) = 0;
    *(void *)(v2 + 392) = *(void *)(v1 + 312);
    uint64_t v24 = v2 + 400;
    uint64_t v25 = *(void *)(v1 + 320);
    *(void *)(v2 + 400) = v25;
    uint64_t v26 = *(void *)(v1 + 328);
    *(void *)(v2 + 408) = v26;
    if (v26)
    {
      *(void *)(v25 + 16) = v24;
      *(void *)(v1 + 312) = v1 + 320;
      *(void *)(v1 + 320) = 0;
      *(void *)(v1 + 328) = 0;
    }
    else
    {
      *(void *)(v2 + 392) = v24;
    }
    *(void *)(v2 + 416) = *(void *)(v1 + 336);
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(result + 88), v4);
    *(_OWORD *)(v2 + 104) = *(_OWORD *)(v1 + 24);
    uint64_t v11 = (void *)(v1 + 48);
    uint64_t v12 = *(void *)(v1 + 48);
    *(void *)(v2 + 128) = v12;
    uint64_t v13 = v2 + 128;
    *(void *)(v2 + 88) = &unk_1EDC827D8;
    *(void *)(v2 + 120) = *(void *)(v1 + 40);
    uint64_t v14 = *(void *)(v1 + 56);
    *(void *)(v2 + 136) = v14;
    if (v14)
    {
      *(void *)(v12 + 16) = v13;
      *(void *)(v1 + 40) = v11;
      void *v11 = 0;
      *(void *)(v1 + 56) = 0;
    }
    else
    {
      *(void *)(v2 + 120) = v13;
    }
    uint64_t v27 = *(void *)(v2 + 520);
    *(_OWORD *)(v2 + 144) = *(_OWORD *)(v27 + 64);
    *(void *)(v27 + 64) = 0;
    *(void *)(v27 + 72) = 0;
  }
  *(unsigned char *)(v2 + 424) = v5;
  uint64_t v28 = *(void *)(v2 + 528);
  if (v28 && !atomic_fetch_add((atomic_ullong *volatile)(v28 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v29 = *(std::__shared_weak_count **)(v2 + 528);
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  uint64_t v30 = *(std::__shared_weak_count **)(v2 + 488);
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  uint64_t v31 = *(std::__shared_weak_count **)(v2 + 456);
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  unint64_t v32 = *(std::__shared_weak_count **)(v2 + 440);
  if (!v32 || atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (*(unsigned char *)(v2 + 424)) {
      goto LABEL_32;
    }
LABEL_35:
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v66);
    AMSCore::Logger::log<char [40],AMSCore::Error>(v66, (uint64_t)"metrics", 7, "failed to build metrics config modifier", (uint64_t)v3);
    uint64_t v39 = v67;
    if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
    unint64_t v40 = (char *)operator new(0x168uLL);
    *((void *)v40 + 1) = 0;
    *((void *)v40 + 2) = 0;
    *(void *)unint64_t v40 = &unk_1EDC83E18;
    *(_OWORD *)(v40 + 40) = 0u;
    *(_OWORD *)(v40 + 56) = 0u;
    *(_OWORD *)(v40 + 72) = 0u;
    *(_OWORD *)(v40 + 104) = 0u;
    *(_OWORD *)(v40 + 120) = 0u;
    *(_OWORD *)(v40 + 136) = 0u;
    *(_OWORD *)(v40 + 152) = 0u;
    *(_OWORD *)(v40 + 168) = 0u;
    *(_OWORD *)(v40 + 184) = 0u;
    *(_OWORD *)(v40 + 200) = 0u;
    *(_OWORD *)(v40 + 216) = 0u;
    *(_OWORD *)(v40 + 232) = 0u;
    *(_OWORD *)(v40 + 248) = 0u;
    *(_OWORD *)(v40 + 24) = 0u;
    *(_OWORD *)(v40 + 264) = 0u;
    *(_OWORD *)(v40 + 280) = 0u;
    *(_OWORD *)(v40 + 88) = 0u;
    *((void *)v40 + 7) = v40 + 64;
    *((void *)v40 + 37) = 0;
    *((void *)v40 + 38) = 0;
    *((void *)v40 + 11) = 0;
    *((void *)v40 + 10) = v40 + 88;
    *((void *)v40 + 15) = 0;
    *((void *)v40 + 14) = 0;
    *((void *)v40 + 12) = 0;
    *((void *)v40 + 13) = v40 + 112;
    *((void *)v40 + 39) = 0;
    *((void *)v40 + 40) = 0;
    *((void *)v40 + 43) = 0;
    *((void *)v40 + 44) = 0;
    *((void *)v40 + 41) = v40 + 336;
    *((void *)v40 + 42) = 0;
    size_t v41 = *(std::__shared_weak_count **)(v2 + 472);
    *(void *)(v2 + 464) = v40 + 24;
    *(void *)(v2 + 472) = v40;
    if (!v41) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
  std::__shared_weak_count::__release_weak(v32);
  if (!*(unsigned char *)(v2 + 424)) {
    goto LABEL_35;
  }
LABEL_32:
  int v33 = (char *)operator new(0x168uLL);
  uint64_t v34 = v33;
  *((void *)v33 + 1) = 0;
  *((void *)v33 + 2) = 0;
  *(void *)int v33 = &unk_1EDC83E18;
  *(std::runtime_error *)(v33 + 24) = *v3;
  *(std::runtime_error *)(v33 + 36) = *(std::runtime_error *)((char *)&v3->__imp_.__imp_ + 4);
  unint64_t v35 = (void *)(v2 + 128);
  uint64_t v36 = *(void *)(v2 + 128);
  *((void *)v33 + 7) = *(void *)(v2 + 120);
  *((void *)v33 + 8) = v36;
  int v37 = v33 + 64;
  uint64_t v38 = *(void *)(v2 + 136);
  *((void *)v33 + 9) = v38;
  if (v38)
  {
    *(void *)(v36 + 16) = v37;
    *(void *)(v2 + 120) = v35;
    *unint64_t v35 = 0;
    *(void *)(v2 + 136) = 0;
  }
  else
  {
    *((void *)v33 + 7) = v37;
  }
  int v42 = (void *)(v2 + 152);
  uint64_t v43 = *(void *)(v2 + 152);
  uint64_t v44 = *(void *)(v2 + 144);
  *((void *)v33 + 11) = v43;
  long long v45 = v33 + 88;
  *((void *)v33 + 10) = v44;
  uint64_t v46 = *(void *)(v2 + 160);
  *((void *)v33 + 12) = v46;
  if (v46)
  {
    *(void *)(v43 + 16) = v45;
    *(void *)(v2 + 144) = v42;
    void *v42 = 0;
    *(void *)(v2 + 160) = 0;
  }
  else
  {
    *((void *)v33 + 10) = v45;
  }
  uint64_t v47 = (void *)(v2 + 176);
  uint64_t v48 = *(void *)(v2 + 176);
  uint64_t v49 = *(void *)(v2 + 168);
  *((void *)v33 + 14) = v48;
  size_t v50 = v33 + 112;
  *((void *)v33 + 13) = v49;
  uint64_t v51 = *(void *)(v2 + 184);
  *((void *)v33 + 15) = v51;
  if (v51)
  {
    *(void *)(v48 + 16) = v50;
    *(void *)(v2 + 168) = v47;
    *uint64_t v47 = 0;
    *(void *)(v2 + 184) = 0;
  }
  else
  {
    *((void *)v33 + 13) = v50;
  }
  long long v52 = *(_OWORD *)(v2 + 192);
  v33[144] = 0;
  *((_OWORD *)v33 + 8) = v52;
  v33[296] = 0;
  std::__optional_storage_base<AMSCore::URL,false>::__construct_from[abi:fe180100]<std::__optional_move_base<AMSCore::URL,false>>((uint64_t)(v33 + 144), (long long *)(v2 + 208));
  *((_OWORD *)v34 + 19) = *(_OWORD *)(v2 + 368);
  uint64_t v53 = *(void *)(v2 + 384);
  uint64_t v54 = *(void *)(v2 + 392);
  *(void *)(v2 + 376) = 0;
  *(void *)(v2 + 384) = 0;
  *(void *)(v2 + 368) = 0;
  *((void *)v34 + 40) = v53;
  *((void *)v34 + 41) = v54;
  uint64_t v55 = v34 + 336;
  uint64_t v56 = *(void *)(v2 + 400);
  uint64_t v57 = *(void *)(v2 + 408);
  *((void *)v34 + 42) = v56;
  *((void *)v34 + 43) = v57;
  if (v57)
  {
    *(void *)(v56 + 16) = v55;
    *(void *)(v2 + 392) = v2 + 400;
    *(void *)(v2 + 400) = 0;
    *(void *)(v2 + 408) = 0;
  }
  else
  {
    *((void *)v34 + 41) = v55;
  }
  *((void *)v34 + 44) = *(void *)(v2 + 416);
  size_t v41 = *(std::__shared_weak_count **)(v2 + 472);
  *(void *)(v2 + 464) = v34 + 24;
  *(void *)(v2 + 472) = v34;
  if (!v41) {
    goto LABEL_52;
  }
LABEL_51:
  if (!atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
    if (*(unsigned char *)(v2 + 424)) {
      goto LABEL_53;
    }
LABEL_55:
    ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
    goto LABEL_56;
  }
LABEL_52:
  if (!*(unsigned char *)(v2 + 424)) {
    goto LABEL_55;
  }
LABEL_53:
  std::__destroy_at[abi:fe180100]<AMSCore::MetricsEventModifier::MetricsConfig,0>((uint64_t)v3);
LABEL_56:
  std::mutex::lock(*(std::mutex **)(v2 + 496));
  uint64_t v59 = *(void *)(v2 + 464);
  uint64_t v58 = *(void *)(v2 + 472);
  if (v58) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v60 = *(void *)(v2 + 496);
  uint64_t v61 = *(std::__shared_weak_count **)(v60 + 72);
  *(void *)(v60 + 64) = v59;
  *(void *)(v60 + 72) = v58;
  if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
    std::__shared_weak_count::__release_weak(v61);
  }
  if (*(unsigned char *)(v2 + 40))
  {
    uint64_t v62 = *(std::__shared_weak_count **)(v2 + 32);
    if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
    *(unsigned char *)(v2 + 40) = 0;
  }
  char v63 = *(std::mutex **)(v2 + 496);
  *(void *)(v2 + 24) = v63[1].__m_.__sig;
  uint64_t v64 = *(void *)(v60 + 72);
  *(void *)(v2 + 32) = v64;
  if (v64)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v64 + 8), 1uLL, memory_order_relaxed);
    char v63 = *(std::mutex **)(v2 + 496);
  }
  *(unsigned char *)(v2 + 40) = 1;
  std::mutex::unlock(v63);
  long long v65 = *(std::__shared_weak_count **)(v2 + 472);
  if (v65)
  {
    if (!atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  *(void *)(v2 + 88) = v2 + 16;
  *(void *)uint64_t v2 = 0;
  return AMSCore::Task<std::shared_ptr<AMSCore::MetricsEventModifier::MetricsConfig const>,void>::Promise::Awaiter::await_suspend((uint64_t)v3);
}

void sub_18DB16B34(void *a1)
{
  std::expected<AMSCore::MetricsEventModifier::MetricsConfig,AMSCore::Error>::~expected[abi:fe180100](v2);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v1 + 464);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::MetricsEventModifierProvider::Config::reloadModifier(char *__p)
{
  if (*(void *)__p)
  {
    uint64_t v2 = *((void *)__p + 66);
    if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      unint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 66);
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 61);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    char v5 = (std::__shared_weak_count *)*((void *)__p + 57);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    std::runtime_error v6 = (std::__shared_weak_count *)*((void *)__p + 55);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    uint64_t v7 = (std::__shared_weak_count *)*((void *)__p + 59);
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  uint64_t v8 = (char *)*((void *)__p + 10);
  if (v8 == __p + 56)
  {
    (*(void (**)(char *))(*((void *)__p + 7) + 32))(__p + 56);
    if (!__p[40]) {
      goto LABEL_26;
    }
    goto LABEL_23;
  }
  if (v8) {
    (*(void (**)(char *))(*(void *)v8 + 40))(v8);
  }
  if (__p[40])
  {
LABEL_23:
    uint64_t v9 = (std::__shared_weak_count *)*((void *)__p + 4);
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
LABEL_26:
  uint64_t v10 = *((void *)__p + 64);
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v10 && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)__p + 64) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v11 = (std::__shared_weak_count *)*((void *)__p + 64);
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = *((void *)__p + 63);
  if (v12 && !atomic_fetch_add((atomic_ullong *volatile)(v12 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v13 = (std::__shared_weak_count *)*((void *)__p + 63);
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  operator delete(__p);
}

uint64_t std::expected<AMSCore::MetricsEventModifier::MetricsConfig,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 336)) {
    std::__destroy_at[abi:fe180100]<AMSCore::MetricsEventModifier::MetricsConfig,0>(a1);
  }
  else {
    (**(void (***)(uint64_t))a1)(a1);
  }
  return a1;
}

uint64_t AMSCore::Task<std::shared_ptr<AMSCore::MetricsEventModifier::MetricsConfig const>,void>::Promise::Awaiter::await_suspend(uint64_t result)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void (**)(void))atomic_exchange((atomic_ullong *volatile)(*(void *)result + 32), 1uLL);
  if (v1)
  {
    uint64_t v2 = result;
    if (v1 == (void (**)(void))2) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result - 8))(*(void *)result - 16);
    }
    unint64_t v3 = (uint64_t *)(*(void *)result + 64);
    uint64_t result = *v3;
    if (*v3)
    {
      if (result == *(void *)v2 + 40)
      {
        uint64_t v8 = v7;
        uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 24))(result, v7);
      }
      else
      {
        uint64_t v8 = *(void **)(*(void *)v2 + 64);
        *unint64_t v3 = 0;
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    if (v8)
    {
      uint64_t v4 = *(void *)v2;
      if (!*(unsigned char *)(*(void *)v2 + 24))
      {
        __break(1u);
        return result;
      }
      long long v6 = *(_OWORD *)(v4 + 8);
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      if (!v8) {
        std::__throw_bad_function_call[abi:fe180100]();
      }
      (*(void (**)(void *, long long *))(*v8 + 48))(v8, &v6);
      char v5 = (std::__shared_weak_count *)*((void *)&v6 + 1);
      if (*((void *)&v6 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v6 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      (*v1)(v1);
    }
    uint64_t result = (uint64_t)v8;
    if (v8 == v7)
    {
      return (*(uint64_t (**)(void *))(v7[0] + 32))(v7);
    }
    else if (v8)
    {
      return (*(uint64_t (**)(void *))(*v8 + 40))(v8);
    }
  }
  return result;
}

void sub_18DB170F4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AMSCore::MetricsEventModifier::MetricsConfig>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<AMSCore::MetricsEventModifier::MetricsConfig>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83E18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::MetricsEventModifier::MetricsConfig>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83E18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<AMSCore::MetricsEventModifier::MetricsConfig const>,void>::Promise *,AMSCore::Task<std::shared_ptr<AMSCore::MetricsEventModifier::MetricsConfig const>,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::MetricsEventModifier::MetricsConfig const>,void>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINSt3__110shared_ptrIKNS_20MetricsEventModifier13MetricsConfigEEEvE7Promise17get_ret"
                     "urn_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINSt3__110shared_ptrIKNS_20MetricsEventModifier13MetricsConfigEEEvE7Promi"
                                "se17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINSt3__110shared_ptrIKNS_20MetricsEventModifier13MetricsConfigEEEvE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINSt3__110shared_ptrIKNS_20MetricsEventModifier13MetricsConfigEEEvE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<AMSCore::MetricsEventModifier::MetricsConfig const>,void>::Promise *,AMSCore::Task<std::shared_ptr<AMSCore::MetricsEventModifier::MetricsConfig const>,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::MetricsEventModifier::MetricsConfig const>,void>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 32), 2uLL)) {
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<AMSCore::MetricsEventModifier::MetricsConfig const>,void>::Promise *,AMSCore::Task<std::shared_ptr<AMSCore::MetricsEventModifier::MetricsConfig const>,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::MetricsEventModifier::MetricsConfig const>,void>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void AMSCore::MetricsEventModifierProvider::getOverrideForEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (char *)operator new(0x1D0uLL);
  *(void *)uint64_t v4 = AMSCore::MetricsEventModifierProvider::getOverrideForEvent;
  *((void *)v4 + 1) = AMSCore::MetricsEventModifierProvider::getOverrideForEvent;
  *(_OWORD *)(v4 + 424) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  v4[24] = 0;
  v4[312] = 0;
  *((void *)v4 + 40) = 0;
  *((void *)v4 + 44) = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise,AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::get_return_object(void)::DetachPromise,void>(&v5, (uint64_t)(v4 + 16));
}

{
  char *v4;
  long long v5;

  uint64_t v4 = (char *)operator new(0x1D0uLL);
  *(void *)uint64_t v4 = AMSCore::MetricsEventModifierProvider::getOverrideForEvent;
  *((void *)v4 + 1) = AMSCore::MetricsEventModifierProvider::getOverrideForEvent;
  *(_OWORD *)(v4 + 424) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  v4[24] = 0;
  v4[312] = 0;
  *((void *)v4 + 40) = 0;
  *((void *)v4 + 44) = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise,AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::get_return_object(void)::DetachPromise,void>(&v5, (uint64_t)(v4 + 16));
}

void sub_18DB1778C(void *a1)
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v1);
  __cxa_begin_catch(a1);
  std::terminate();
}

long long *AMSCore::MetricsEventModifierProvider::getOverrideForEvent(long long *result)
{
  uint64_t v1 = *((void *)result + 55);
  if (!*(unsigned char *)(v1 + 24)) {
    goto LABEL_43;
  }
  uint64_t v2 = result;
  uint64_t v3 = (uint64_t)result + 392;
  *(long long *)((char *)result + 392) = *(_OWORD *)(v1 + 8);
  *(void *)(v1 + 8) = 0;
  *(void *)(v1 + 16) = 0;
  uint64_t v4 = *((void *)result + 56);
  if (v4 && !atomic_fetch_add((atomic_ullong *volatile)(v4 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    long long v5 = (std::__shared_weak_count *)*((void *)result + 56);
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  long long v6 = (std::__shared_weak_count *)*((void *)v2 + 52);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v2 + 48);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)v2 + 46);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  AMSCore::MetricsEventModifier::MetricsConfig::getOverrideForEvent((uint64_t)v31, *((void *)v2 + 49), (AMSCore::MetricsEventModifier::EventModifierForFieldFilters *)(*((void *)v2 + 53) + 72));
  if (*((unsigned char *)v2 + 312))
  {
    if (*((unsigned char *)v2 + 296)) {
      AMSCore::URL::~URL((AMSCore::URL *)(v2 + 9));
    }
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)v2 + 14));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)v2 + 11));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)v2 + 8));
    *((unsigned char *)v2 + 312) = 0;
  }
  long long v9 = v31[0];
  uint64_t v11 = v32;
  uint64_t v10 = v33;
  *((void *)v2 + 8) = v33;
  uint64_t v12 = v2 + 4;
  *(long long *)((char *)v2 + 24) = v9;
  *(long long *)((char *)v2 + 36) = *(_OWORD *)((char *)v31 + 12);
  *((void *)v2 + 7) = v11;
  uint64_t v13 = v34;
  *((void *)v2 + 9) = v34;
  if (v13)
  {
    *((void *)v10 + 2) = v12;
    unint64_t v32 = &v33;
    int v33 = 0;
    uint64_t v34 = 0;
  }
  else
  {
    *((void *)v2 + 7) = v12;
  }
  uint64_t v15 = v35;
  uint64_t v14 = v36;
  *((void *)v2 + 11) = v36;
  uint64_t v16 = (char *)v2 + 88;
  *((void *)v2 + 10) = v15;
  uint64_t v17 = v37;
  *((void *)v2 + 12) = v37;
  if (v17)
  {
    *((void *)v14 + 2) = v16;
    unint64_t v35 = &v36;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
  }
  else
  {
    *((void *)v2 + 10) = v16;
  }
  int v19 = v38;
  uint64_t v18 = v39;
  *((void *)v2 + 14) = v39;
  uint64_t v20 = v2 + 7;
  *((void *)v2 + 13) = v19;
  uint64_t v21 = v40;
  *((void *)v2 + 15) = v40;
  if (v21)
  {
    *(void *)(v18 + 16) = v20;
    uint64_t v38 = &v39;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v18 = 0;
  }
  else
  {
    *((void *)v2 + 13) = v20;
  }
  long long v22 = v41;
  *((unsigned char *)v2 + 144) = 0;
  long long v23 = v2 + 9;
  v2[8] = v22;
  *((unsigned char *)v2 + 296) = 0;
  if (v57)
  {
    uint64_t result = &v42;
    *((unsigned char *)v2 + 168) = 0;
    if (v44)
    {
      long long *v23 = v42;
      *((void *)v2 + 20) = v43;
      uint64_t v43 = 0;
      long long v42 = 0uLL;
      *((unsigned char *)v2 + 168) = 1;
    }
    *((unsigned char *)v2 + 176) = 0;
    *((unsigned char *)v2 + 200) = 0;
    if (v47)
    {
      v2[11] = v45;
      *((void *)v2 + 24) = v46;
      uint64_t v46 = 0;
      long long v45 = 0uLL;
      *((unsigned char *)v2 + 200) = 1;
    }
    *((unsigned char *)v2 + 208) = 0;
    *((unsigned char *)v2 + 232) = 0;
    if (v50)
    {
      v2[13] = v48;
      *((void *)v2 + 28) = v49;
      uint64_t v49 = 0;
      long long v48 = 0uLL;
      *((unsigned char *)v2 + 232) = 1;
    }
    *((_DWORD *)v2 + 60) = v51;
    *((void *)v2 + 31) = (char *)v2 + 248;
    *((void *)v2 + 32) = (char *)v2 + 248;
    *((void *)v2 + 33) = 0;
    if (v23 != &v42)
    {
      uint64_t v24 = v54;
      if (v54)
      {
        uint64_t v26 = v52;
        uint64_t v25 = v53;
        uint64_t v27 = *v53;
        *(void *)(v27 + 8) = *(void *)(v52 + 8);
        **(void **)(v26 + 8) = v27;
        uint64_t v28 = *((void *)v2 + 31);
        *(void *)(v28 + 8) = v25;
        *uint64_t v25 = v28;
        *((void *)v2 + 31) = v26;
        *(void *)(v26 + 8) = (char *)v2 + 248;
        *((void *)v2 + 33) = v24;
        uint64_t v54 = 0;
      }
      v2[17] = v55;
      uint64_t v29 = v58;
      *((void *)v2 + 36) = v56;
      uint64_t v56 = 0;
      long long v55 = 0uLL;
      *((unsigned char *)v2 + 296) = 1;
      *((void *)v2 + 38) = v29;
      *((unsigned char *)v2 + 312) = 1;
      AMSCore::URL::~URL((AMSCore::URL *)&v42);
      uint64_t v18 = v39;
      goto LABEL_39;
    }
LABEL_43:
    __break(1u);
    return result;
  }
  *((void *)v2 + 38) = v58;
  *((unsigned char *)v2 + 312) = 1;
LABEL_39:
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy((char *)v18);
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v36);
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v33);
  uint64_t v30 = (std::__shared_weak_count *)*((void *)v2 + 50);
  if (v30)
  {
    if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  *((void *)v2 + 49) = v2 + 1;
  *(void *)uint64_t v2 = 0;
  return (long long *)AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::Awaiter::await_suspend(v3);
}

{
  uint64_t v1;
  long long *v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  long long v9;
  char *v10;
  char **v11;
  _OWORD *v12;
  uint64_t v13;
  char *v14;
  char **v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _OWORD *v20;
  uint64_t v21;
  long long v22;
  long long *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  _OWORD v31[2];
  char **v32;
  char *v33;
  uint64_t v34;
  char **v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  long long v41;
  long long v42;
  uint64_t v43;
  char v44;
  long long v45;
  uint64_t v46;
  char v47;
  long long v48;
  uint64_t v49;
  char v50;
  int v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  long long v55;
  uint64_t v56;
  char v57;
  uint64_t v58;

  uint64_t v1 = *((void *)result + 55);
  if (!*(unsigned char *)(v1 + 24)) {
    goto LABEL_43;
  }
  uint64_t v2 = result;
  uint64_t v3 = (uint64_t)result + 392;
  *(long long *)((char *)result + 392) = *(_OWORD *)(v1 + 8);
  *(void *)(v1 + 8) = 0;
  *(void *)(v1 + 16) = 0;
  uint64_t v4 = *((void *)result + 56);
  if (v4 && !atomic_fetch_add((atomic_ullong *volatile)(v4 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    long long v5 = (std::__shared_weak_count *)*((void *)result + 56);
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  long long v6 = (std::__shared_weak_count *)*((void *)v2 + 52);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v2 + 48);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)v2 + 46);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  AMSCore::MetricsEventModifier::MetricsConfig::getOverrideForEvent((uint64_t)v31, *((void *)v2 + 49), *((AMSCore::MetricsEventModifier::EventModifierForFieldFilters **)v2 + 53));
  if (*((unsigned char *)v2 + 312))
  {
    if (*((unsigned char *)v2 + 296)) {
      AMSCore::URL::~URL((AMSCore::URL *)(v2 + 9));
    }
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)v2 + 14));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)v2 + 11));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)v2 + 8));
    *((unsigned char *)v2 + 312) = 0;
  }
  long long v9 = v31[0];
  uint64_t v11 = v32;
  uint64_t v10 = v33;
  *((void *)v2 + 8) = v33;
  uint64_t v12 = v2 + 4;
  *(long long *)((char *)v2 + 24) = v9;
  *(long long *)((char *)v2 + 36) = *(_OWORD *)((char *)v31 + 12);
  *((void *)v2 + 7) = v11;
  uint64_t v13 = v34;
  *((void *)v2 + 9) = v34;
  if (v13)
  {
    *((void *)v10 + 2) = v12;
    unint64_t v32 = &v33;
    int v33 = 0;
    uint64_t v34 = 0;
  }
  else
  {
    *((void *)v2 + 7) = v12;
  }
  uint64_t v15 = v35;
  uint64_t v14 = v36;
  *((void *)v2 + 11) = v36;
  uint64_t v16 = (char *)v2 + 88;
  *((void *)v2 + 10) = v15;
  uint64_t v17 = v37;
  *((void *)v2 + 12) = v37;
  if (v17)
  {
    *((void *)v14 + 2) = v16;
    unint64_t v35 = &v36;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
  }
  else
  {
    *((void *)v2 + 10) = v16;
  }
  int v19 = v38;
  uint64_t v18 = v39;
  *((void *)v2 + 14) = v39;
  uint64_t v20 = v2 + 7;
  *((void *)v2 + 13) = v19;
  uint64_t v21 = v40;
  *((void *)v2 + 15) = v40;
  if (v21)
  {
    *(void *)(v18 + 16) = v20;
    uint64_t v38 = &v39;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v18 = 0;
  }
  else
  {
    *((void *)v2 + 13) = v20;
  }
  long long v22 = v41;
  *((unsigned char *)v2 + 144) = 0;
  long long v23 = v2 + 9;
  v2[8] = v22;
  *((unsigned char *)v2 + 296) = 0;
  if (v57)
  {
    uint64_t result = &v42;
    *((unsigned char *)v2 + 168) = 0;
    if (v44)
    {
      long long *v23 = v42;
      *((void *)v2 + 20) = v43;
      uint64_t v43 = 0;
      long long v42 = 0uLL;
      *((unsigned char *)v2 + 168) = 1;
    }
    *((unsigned char *)v2 + 176) = 0;
    *((unsigned char *)v2 + 200) = 0;
    if (v47)
    {
      v2[11] = v45;
      *((void *)v2 + 24) = v46;
      uint64_t v46 = 0;
      long long v45 = 0uLL;
      *((unsigned char *)v2 + 200) = 1;
    }
    *((unsigned char *)v2 + 208) = 0;
    *((unsigned char *)v2 + 232) = 0;
    if (v50)
    {
      v2[13] = v48;
      *((void *)v2 + 28) = v49;
      uint64_t v49 = 0;
      long long v48 = 0uLL;
      *((unsigned char *)v2 + 232) = 1;
    }
    *((_DWORD *)v2 + 60) = v51;
    *((void *)v2 + 31) = (char *)v2 + 248;
    *((void *)v2 + 32) = (char *)v2 + 248;
    *((void *)v2 + 33) = 0;
    if (v23 != &v42)
    {
      uint64_t v24 = v54;
      if (v54)
      {
        uint64_t v26 = v52;
        uint64_t v25 = v53;
        uint64_t v27 = *v53;
        *(void *)(v27 + 8) = *(void *)(v52 + 8);
        **(void **)(v26 + 8) = v27;
        uint64_t v28 = *((void *)v2 + 31);
        *(void *)(v28 + 8) = v25;
        *uint64_t v25 = v28;
        *((void *)v2 + 31) = v26;
        *(void *)(v26 + 8) = (char *)v2 + 248;
        *((void *)v2 + 33) = v24;
        uint64_t v54 = 0;
      }
      v2[17] = v55;
      uint64_t v29 = v58;
      *((void *)v2 + 36) = v56;
      uint64_t v56 = 0;
      long long v55 = 0uLL;
      *((unsigned char *)v2 + 296) = 1;
      *((void *)v2 + 38) = v29;
      *((unsigned char *)v2 + 312) = 1;
      AMSCore::URL::~URL((AMSCore::URL *)&v42);
      uint64_t v18 = v39;
      goto LABEL_39;
    }
LABEL_43:
    __break(1u);
    return result;
  }
  *((void *)v2 + 38) = v58;
  *((unsigned char *)v2 + 312) = 1;
LABEL_39:
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy((char *)v18);
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v36);
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v33);
  uint64_t v30 = (std::__shared_weak_count *)*((void *)v2 + 50);
  if (v30)
  {
    if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  *((void *)v2 + 49) = v2 + 1;
  *(void *)uint64_t v2 = 0;
  return (long long *)AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::Awaiter::await_suspend(v3);
}

void sub_18DB17BFC(void *a1)
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v1);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::MetricsEventModifierProvider::getOverrideForEvent(void *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 2);
  if (*a1)
  {
    uint64_t v3 = a1[56];
    if (v3 && !atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v4 = (std::__shared_weak_count *)a1[56];
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    long long v5 = (std::__shared_weak_count *)a1[52];
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    long long v6 = (std::__shared_weak_count *)a1[48];
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    uint64_t v7 = (std::__shared_weak_count *)a1[46];
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  uint64_t v8 = a1[54];
  AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::~Promise(v2);
  if (v8 && !atomic_fetch_add((atomic_ullong *volatile)(a1[54] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    long long v9 = (std::__shared_weak_count *)a1[54];
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  operator delete(a1);
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t vars8;

  uint64_t v2 = (uint64_t)(a1 + 2);
  if (*a1)
  {
    uint64_t v3 = a1[56];
    if (v3 && !atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v4 = (std::__shared_weak_count *)a1[56];
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    long long v5 = (std::__shared_weak_count *)a1[52];
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    long long v6 = (std::__shared_weak_count *)a1[48];
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    uint64_t v7 = (std::__shared_weak_count *)a1[46];
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  uint64_t v8 = a1[54];
  AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::~Promise(v2);
  if (v8 && !atomic_fetch_add((atomic_ullong *volatile)(a1[54] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    long long v9 = (std::__shared_weak_count *)a1[54];
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  operator delete(a1);
}

void std::shared_ptr<AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise,AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::get_return_object(void)::DetachPromise,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_18DB17E40(void *a1)
{
  __cxa_begin_catch(a1);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 304), 2uLL)) {
    (*(void (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  __cxa_rethrow();
}

void sub_18DB17E6C(_Unwind_Exception *a1)
{
}

uint64_t AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::Awaiter::await_suspend(uint64_t result)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void (**)(void))atomic_exchange((atomic_ullong *volatile)(*(void *)result + 304), 1uLL);
  if (v1)
  {
    uint64_t v2 = (uint64_t *)result;
    if (v1 == (void (**)(void))2)
    {
      return (*(uint64_t (**)(uint64_t))(*(void *)result - 8))(*(void *)result - 16);
    }
    else
    {
      uint64_t v3 = *(void *)result;
      uint64_t v4 = *(void **)(*(void *)result + 336);
      if (v4)
      {
        if (v4 == (void *)(v3 + 312))
        {
          uint64_t v11 = v10;
          (*(void (**)(void *, void *))(*v4 + 24))(v4, v10);
        }
        else
        {
          uint64_t v11 = v4;
          *(void *)(v3 + 336) = 0;
        }
      }
      else
      {
        uint64_t v11 = 0;
      }
      if (v11)
      {
        AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::await_resume((uint64_t)v5, *v2);
        if (!v11) {
          std::__throw_bad_function_call[abi:fe180100]();
        }
        (*(void (**)(void *, unsigned char *))(*v11 + 48))(v11, v5);
        if (v9[152]) {
          AMSCore::URL::~URL((AMSCore::URL *)v9);
        }
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v8);
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v7);
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(v6);
      }
      else
      {
        (*v1)(v1);
      }
      uint64_t result = (uint64_t)v11;
      if (v11 == v10)
      {
        return (*(uint64_t (**)(void *))(v10[0] + 32))(v10);
      }
      else if (v11)
      {
        return (*(uint64_t (**)(void *))(*v11 + 40))(v11);
      }
    }
  }
  return result;
}

void sub_18DB1805C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::await_resume(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 296))
  {
    uint64_t v3 = (void *)(a2 + 48);
    uint64_t v4 = *(void *)(a2 + 48);
    *(_OWORD *)uint64_t result = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(result + 12) = *(_OWORD *)(a2 + 20);
    *(void *)(result + 32) = *(void *)(a2 + 40);
    *(void *)(result + 40) = v4;
    uint64_t v5 = result + 40;
    uint64_t v6 = *(void *)(a2 + 56);
    *(void *)(result + 48) = v6;
    if (v6)
    {
      *(void *)(v4 + 16) = v5;
      *(void *)(a2 + 40) = v3;
      *uint64_t v3 = 0;
      *(void *)(a2 + 56) = 0;
    }
    else
    {
      *(void *)(result + 32) = v5;
    }
    uint64_t v7 = (void *)(a2 + 72);
    uint64_t v8 = *(void *)(a2 + 72);
    uint64_t v9 = *(void *)(a2 + 64);
    *(void *)(result + 64) = v8;
    uint64_t v10 = result + 64;
    *(void *)(result + 56) = v9;
    uint64_t v11 = *(void *)(a2 + 80);
    *(void *)(result + 72) = v11;
    if (v11)
    {
      *(void *)(v8 + 16) = v10;
      *(void *)(a2 + 64) = v7;
      void *v7 = 0;
      *(void *)(a2 + 80) = 0;
    }
    else
    {
      *(void *)(result + 56) = v10;
    }
    uint64_t v12 = (void *)(a2 + 96);
    uint64_t v13 = *(void *)(a2 + 96);
    uint64_t v14 = *(void *)(a2 + 88);
    *(void *)(result + 88) = v13;
    uint64_t v15 = result + 88;
    *(void *)(result + 80) = v14;
    uint64_t v16 = *(void *)(a2 + 104);
    *(void *)(result + 96) = v16;
    if (v16)
    {
      *(void *)(v13 + 16) = v15;
      *(void *)(a2 + 88) = v12;
      void *v12 = 0;
      *(void *)(a2 + 104) = 0;
    }
    else
    {
      *(void *)(result + 80) = v15;
    }
    long long v17 = *(_OWORD *)(a2 + 112);
    *(unsigned char *)(result + 120) = 0;
    uint64_t v18 = result + 120;
    *(_OWORD *)(result + 104) = v17;
    *(unsigned char *)(result + 272) = 0;
    uint64_t result = std::__optional_storage_base<AMSCore::URL,false>::__construct_from[abi:fe180100]<std::__optional_move_base<AMSCore::URL,false>>(result + 120, (long long *)(a2 + 128));
    *(void *)(v18 + 160) = *(void *)(a2 + 288);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise *,AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINS_20MetricsEventModifier19MergedEventModifierEvE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINS_20MetricsEventModifier19MergedEventModifierEvE7Promise17get_return_ob"
                                "jectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINS_20MetricsEventModifier19MergedEventModifierEvE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINS_20MetricsEventModifier19MergedEventModifierEvE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise *,AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 304), 2uLL)) {
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise *,AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

uint64_t AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::~Promise(uint64_t a1)
{
  uint64_t v2 = a1 + 312;
  uint64_t v3 = *(void *)(a1 + 336);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    if (!*(unsigned char *)(a1 + 296)) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  if (*(unsigned char *)(a1 + 296))
  {
LABEL_7:
    if (*(unsigned char *)(a1 + 280)) {
      AMSCore::URL::~URL((AMSCore::URL *)(a1 + 128));
    }
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a1 + 96));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a1 + 72));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a1 + 48));
  }
LABEL_10:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  return a1;
}

void sub_18DB18864(void *a1)
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v1);
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_18DB18CD0(void *a1)
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v1);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::MetricsEventModifierProvider::getOverrideForTopic(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (char *)operator new(0x168uLL);
  *(void *)uint64_t v4 = AMSCore::MetricsEventModifierProvider::getOverrideForTopic;
  *((void *)v4 + 1) = AMSCore::MetricsEventModifierProvider::getOverrideForTopic;
  *(_OWORD *)(v4 + 280) = *(_OWORD *)a3;
  *((void *)v4 + 37) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  v4[24] = 0;
  v4[200] = 0;
  *((void *)v4 + 26) = 0;
  *((void *)v4 + 30) = 0;
  operator new();
}

void sub_18DB1936C(void *a1)
{
}

uint64_t AMSCore::MetricsEventModifierProvider::getOverrideForTopic(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 336);
  if (*(unsigned char *)(v1 + 24))
  {
    uint64_t v2 = result;
    *(_OWORD *)(result + 304) = *(_OWORD *)(v1 + 8);
    *(void *)(v1 + 8) = 0;
    *(void *)(v1 + 16) = 0;
    uint64_t v3 = *(void *)(result + 344);
    if (v3 && !atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v4 = *(std::__shared_weak_count **)(result + 344);
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = *(std::__shared_weak_count **)(v2 + 328);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = *(std::__shared_weak_count **)(v2 + 272);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    uint64_t v7 = *(std::__shared_weak_count **)(v2 + 256);
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    AMSCore::MetricsEventModifier::MetricsConfig::getOverrideForTopic((uint64_t)&v15, *(void *)(v2 + 304), (const void **)(v2 + 280));
    if (*(unsigned char *)(v2 + 200) && *(unsigned char *)(v2 + 192)) {
      AMSCore::URL::~URL((AMSCore::URL *)(v2 + 40));
    }
    long long v8 = v15;
    *(unsigned char *)(v2 + 40) = 0;
    *(_OWORD *)(v2 + 24) = v8;
    *(unsigned char *)(v2 + 192) = 0;
    if (v31)
    {
      *(unsigned char *)(v2 + 64) = 0;
      if (v18)
      {
        *(_OWORD *)(v2 + 40) = v16;
        *(void *)(v2 + 56) = v17;
        uint64_t v17 = 0;
        long long v16 = 0uLL;
        *(unsigned char *)(v2 + 64) = 1;
      }
      *(unsigned char *)(v2 + 72) = 0;
      *(unsigned char *)(v2 + 96) = 0;
      if (v21)
      {
        *(_OWORD *)(v2 + 72) = v19;
        *(void *)(v2 + 88) = v20;
        uint64_t v20 = 0;
        long long v19 = 0uLL;
        *(unsigned char *)(v2 + 96) = 1;
      }
      *(unsigned char *)(v2 + 104) = 0;
      *(unsigned char *)(v2 + 128) = 0;
      if (v24)
      {
        *(_OWORD *)(v2 + 104) = v22;
        *(void *)(v2 + 120) = v23;
        uint64_t v23 = 0;
        long long v22 = 0uLL;
        *(unsigned char *)(v2 + 128) = 1;
      }
      *(_DWORD *)(v2 + 136) = v25;
      *(void *)(v2 + 144) = v2 + 144;
      *(void *)(v2 + 152) = v2 + 144;
      *(void *)(v2 + 160) = 0;
      uint64_t v9 = v28;
      if (v28)
      {
        uint64_t v11 = v26;
        uint64_t v10 = v27;
        uint64_t v12 = *v27;
        *(void *)(v12 + 8) = *(void *)(v26 + 8);
        **(void **)(v11 + 8) = v12;
        uint64_t v13 = *(void *)(v2 + 144);
        *(void *)(v13 + 8) = v10;
        void *v10 = v13;
        *(void *)(v2 + 144) = v11;
        *(void *)(v11 + 8) = v2 + 144;
        *(void *)(v2 + 160) = v9;
        uint64_t v28 = 0;
      }
      *(_OWORD *)(v2 + 168) = v29;
      *(void *)(v2 + 184) = v30;
      uint64_t v30 = 0;
      long long v29 = 0uLL;
      *(unsigned char *)(v2 + 192) = 1;
      *(unsigned char *)(v2 + 200) = 1;
      AMSCore::URL::~URL((AMSCore::URL *)&v16);
      uint64_t v14 = *(std::__shared_weak_count **)(v2 + 312);
      if (!v14) {
        goto LABEL_31;
      }
    }
    else
    {
      *(unsigned char *)(v2 + 200) = 1;
      uint64_t v14 = *(std::__shared_weak_count **)(v2 + 312);
      if (!v14)
      {
LABEL_31:
        *(void *)(v2 + 304) = v2 + 16;
        *(void *)uint64_t v2 = 0;
        return AMSCore::Task<AMSCore::MetricsEventModifier::TopicModifier,void>::Promise::Awaiter::await_suspend(v2 + 304);
      }
    }
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    goto LABEL_31;
  }
  __break(1u);
  return result;
}

void sub_18DB196C0(void *a1)
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v1);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::MetricsEventModifierProvider::getOverrideForTopic(char *__p)
{
  if (*(void *)__p)
  {
    uint64_t v2 = *((void *)__p + 43);
    if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 43);
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 41);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)*((void *)__p + 34);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = (std::__shared_weak_count *)*((void *)__p + 32);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  uint64_t v7 = (char *)*((void *)__p + 30);
  if (v7 == __p + 216)
  {
    (*(void (**)(char *))(*((void *)__p + 27) + 32))(__p + 216);
    if (!__p[200]) {
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v7) {
    (*(void (**)(char *))(*(void *)v7 + 40))(v7);
  }
  if (__p[200])
  {
LABEL_20:
    if (__p[192]) {
      AMSCore::URL::~URL((AMSCore::URL *)(__p + 40));
    }
  }
LABEL_22:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (__p[303] < 0) {
    operator delete(*((void **)__p + 35));
  }
  operator delete(__p);
}

uint64_t AMSCore::Task<AMSCore::MetricsEventModifier::TopicModifier,void>::Promise::Awaiter::await_suspend(uint64_t result)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void (**)(void))atomic_exchange((atomic_ullong *volatile)(*(void *)result + 192), 1uLL);
  if (v1)
  {
    uint64_t v2 = result;
    if (v1 == (void (**)(void))2) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result - 8))(*(void *)result - 16);
    }
    uint64_t v3 = (uint64_t *)(*(void *)result + 224);
    uint64_t result = *v3;
    if (*v3)
    {
      if (result == *(void *)v2 + 200)
      {
        uint64_t v10 = v9;
        uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 24))(result, v9);
      }
      else
      {
        uint64_t v10 = *(void **)(*(void *)v2 + 224);
        *uint64_t v3 = 0;
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    if (v10)
    {
      uint64_t v4 = *(void *)v2;
      if (!*(unsigned char *)(*(void *)v2 + 184))
      {
        __break(1u);
        return result;
      }
      long long v6 = *(_OWORD *)(v4 + 8);
      v7[0] = 0;
      char v8 = 0;
      std::__optional_storage_base<AMSCore::URL,false>::__construct_from[abi:fe180100]<std::__optional_move_base<AMSCore::URL,false>>((uint64_t)v7, (long long *)(v4 + 24));
      if (!v10) {
        std::__throw_bad_function_call[abi:fe180100]();
      }
      (*(void (**)(void *, long long *))(*v10 + 48))(v10, &v6);
      if (v8) {
        AMSCore::URL::~URL((AMSCore::URL *)v7);
      }
    }
    else
    {
      (*v1)(v1);
    }
    uint64_t result = (uint64_t)v10;
    if (v10 == v9)
    {
      return (*(uint64_t (**)(void *))(v9[0] + 32))(v9);
    }
    else if (v10)
    {
      return (*(uint64_t (**)(void *, uint64_t))(*v10 + 40))(v10, v5);
    }
  }
  return result;
}

void sub_18DB19AD8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::MetricsEventModifier::TopicModifier,void>::Promise *,AMSCore::Task<AMSCore::MetricsEventModifier::TopicModifier,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::MetricsEventModifier::TopicModifier,void>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINS_20MetricsEventModifier13TopicModifierEvE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINS_20MetricsEventModifier13TopicModifierEvE7Promise17get_return_objectEv"
                                "E13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINS_20MetricsEventModifier13TopicModifierEvE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINS_20MetricsEventModifier13TopicModifierEvE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::MetricsEventModifier::TopicModifier,void>::Promise *,AMSCore::Task<AMSCore::MetricsEventModifier::TopicModifier,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::MetricsEventModifier::TopicModifier,void>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 192), 2uLL)) {
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::Task<AMSCore::MetricsEventModifier::TopicModifier,void>::Promise *,AMSCore::Task<AMSCore::MetricsEventModifier::TopicModifier,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::MetricsEventModifier::TopicModifier,void>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void AMSCore::MetricsFlushTask::internal::perform(unint64_t a1)
{
  long long v91 = (unsigned char *)(a1 + 1052);
  unint64_t v97 = a1 + 600;
  uint64_t v2 = (std::runtime_error *)(a1 + 152);
  unint64_t v3 = (std::string *)(a1 + 232);
  unint64_t v109 = (const std::runtime_error *)(a1 + 312);
  uint64_t v103 = (std::system_error *)(a1 + 472);
  unint64_t v4 = a1 + 680;
  uint64_t v5 = (void **)(a1 + 704);
  unint64_t v107 = a1 + 728;
  long long v6 = (void **)(a1 + 752);
  char v99 = (std::string *)(a1 + 776);
  int v100 = (unsigned int *)(a1 + 544);
  unint64_t v94 = a1 + 816;
  unint64_t v95 = a1 + 616;
  uint64_t v89 = (long long *)(a1 + 848);
  long long v90 = (long long *)(a1 + 800);
  uint64_t v92 = (unsigned int *)(a1 + 1048);
  unint64_t v93 = a1 + 832;
  uint64_t v98 = (void **)(a1 + 680);
  unint64_t v101 = a1 + 16;
  long long v102 = (unsigned int *)(a1 + 232);
  char v96 = (void **)(a1 + 752);
  uint64_t v88 = (void *)(a1 + 704);
  if (*(unsigned char *)(a1 + 1052)) {
    goto LABEL_2;
  }
  uint64_t v50 = *(void *)(a1 + 1000);
  if (!*(unsigned char *)(v50 + 32)) {
    goto LABEL_179;
  }
  *(_OWORD *)unint64_t v4 = *(_OWORD *)(v50 + 8);
  *(void *)(a1 + 696) = *(void *)(v50 + 24);
  *(void *)(v50 + 8) = 0;
  *(void *)(v50 + 16) = 0;
  *(void *)(v50 + 24) = 0;
  uint64_t v51 = *(void *)(a1 + 1008);
  if (v51 && !atomic_fetch_add((atomic_ullong *volatile)(v51 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v52 = *(std::__shared_weak_count **)(a1 + 1008);
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
  }
  uint64_t v53 = *(std::__shared_weak_count **)(a1 + 160);
  if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
  }
  uint64_t v54 = *(std::__shared_weak_count **)(a1 + 856);
  if (v54 && !atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
    std::__shared_weak_count::__release_weak(v54);
  }
  long long v55 = *(std::__shared_weak_count **)(a1 + 808);
  if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
  }
  uint64_t v56 = (void **)*v5;
  if (!*v5) {
    goto LABEL_135;
  }
  char v57 = *(void ***)(a1 + 712);
  uint64_t v58 = *v5;
  if (v57 != v56)
  {
    while (1)
    {
      if (*((char *)v57 - 17) < 0)
      {
        operator delete(*(v57 - 5));
        if ((*((char *)v57 - 41) & 0x80000000) == 0)
        {
LABEL_128:
          if (*((char *)v57 - 65) < 0) {
            goto LABEL_132;
          }
          goto LABEL_125;
        }
      }
      else if ((*((char *)v57 - 41) & 0x80000000) == 0)
      {
        goto LABEL_128;
      }
      operator delete(*(v57 - 8));
      if (*((char *)v57 - 65) < 0) {
LABEL_132:
      }
        operator delete(*(v57 - 11));
LABEL_125:
      v57 -= 11;
      if (v57 == v56)
      {
        uint64_t v58 = *v5;
        break;
      }
    }
  }
  *(void *)(a1 + 712) = v56;
  operator delete(v58);
LABEL_135:
  if (*(void *)(a1 + 680) == *(void *)(a1 + 688))
  {
    uint64_t v28 = (uint64_t *)(a1 + 976);
    uint64_t v27 = (uint64_t *)(a1 + 968);
LABEL_142:
    unint64_t v64 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 984) - *(void *)(a1 + 992)) >> 3);
    if (v64 >= 0x1F4) {
      unint64_t v32 = *(void *)(a1 + 960);
    }
    else {
      unint64_t v32 = *(void *)(a1 + 960) + 1;
    }
    if (v64 >= 0x1F4) {
      int v30 = 0;
    }
    else {
      int v30 = 6;
    }
    goto LABEL_169;
  }
  unsigned __int8 v59 = atomic_load(*(unsigned __int8 **)(a1 + 912));
  if ((v59 & 1) == 0)
  {
    unint64_t v60 = *(void *)(a1 + 952);
    uint64_t v61 = *(unsigned __int8 *)(v60 + 8);
    if (!*(unsigned char *)(v60 + 8)) {
      unint64_t v60 = a1 + 976;
    }
    unint64_t v62 = v61 | ((unint64_t)*(unsigned int *)(a1 + 972) << 32);
    uint64_t v63 = *(void *)v60;
    *(void *)(a1 + 1024) = v62;
    *(void *)(a1 + 1016) = v63;
    if (*(char *)(a1 + 751) < 0)
    {
      std::string::__init_copy_ctor_external(v99, *(const std::string::value_type **)(a1 + 728), *(void *)(a1 + 736));
    }
    else
    {
      *(_OWORD *)&v99->__r_.__value_.__l.__data_ = *(_OWORD *)v107;
      v99->__r_.__value_.__r.__words[2] = *(void *)(v107 + 16);
    }
    uint64_t v71 = *(void *)(a1 + 888);
    uint64_t v72 = *(void *)(a1 + 880);
    *(_OWORD *)(a1 + 752) = *(_OWORD *)v4;
    *(void *)(a1 + 768) = *(void *)(a1 + 696);
    *(void *)(v4 + 8) = 0;
    *(void *)(v4 + 16) = 0;
    *(void *)unint64_t v4 = 0;
    *(void *)(a1 + 616) = v72;
    *(void *)(a1 + 624) = v71;
    if (v71) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v71 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v73 = *(void *)(a1 + 904);
    *(void *)(a1 + 632) = *(void *)(a1 + 896);
    *(void *)(a1 + 640) = v73;
    if (v73) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v73 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v74 = *(void *)(a1 + 920);
    *(void *)(a1 + 816) = *(void *)(a1 + 912);
    *(void *)(a1 + 824) = v74;
    if (v74) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v74 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v75 = *(void *)(a1 + 936);
    *(void *)(a1 + 832) = *(void *)(a1 + 928);
    *(void *)(a1 + 840) = v75;
    if (v75) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v75 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a1 + 472) = v63;
    *(void *)(a1 + 480) = v62;
    uint64_t v76 = *(void *)(a1 + 672);
    if (!v76) {
      std::__throw_bad_function_call[abi:fe180100]();
    }
    (*(void (**)(uint64_t, std::string *, void **, unint64_t, std::system_error *, unint64_t, unint64_t))(*(void *)v76 + 48))(v76, v99, v6, v95, v103, v94, v93);
    long long v77 = *(_OWORD *)(a1 + 232);
    *(_OWORD *)(v97 + 432) = v77;
    v3->__r_.__value_.__r.__words[0] = 0;
    v3->__r_.__value_.__l.__size_ = 0;
    if (!atomic_load_explicit((atomic_ullong *volatile)(v77 + 96), memory_order_acquire))
    {
      *long long v91 = 1;
      if (!atomic_exchange((atomic_ullong *volatile)(*(void *)(a1 + 1032) + 96), a1)) {
        return;
      }
    }
LABEL_2:
    uint64_t v7 = *(void *)(a1 + 1032);
    if (*(unsigned char *)(v7 + 88))
    {
      char v8 = (const std::runtime_error *)(v7 + 8);
      char v9 = *(unsigned char *)(v7 + 80);
      if (v9)
      {
        LOBYTE(v2->__vftable) = v8->__vftable;
      }
      else
      {
        std::runtime_error::runtime_error(v2, v8);
        *(_OWORD *)(a1 + 168) = *(_OWORD *)(v7 + 24);
        uint64_t v10 = (void *)(v7 + 48);
        uint64_t v11 = *(void *)(v7 + 48);
        *(void *)(a1 + 192) = v11;
        unint64_t v12 = a1 + 192;
        *(void *)(a1 + 152) = &unk_1EDC827D8;
        *(void *)(a1 + 184) = *(void *)(v7 + 40);
        uint64_t v13 = *(void *)(v7 + 56);
        *(void *)(a1 + 200) = v13;
        if (v13)
        {
          *(void *)(v11 + 16) = v12;
          *(void *)(v7 + 40) = v10;
          void *v10 = 0;
          *(void *)(v7 + 56) = 0;
        }
        else
        {
          *(void *)(a1 + 184) = v12;
        }
        uint64_t v14 = *(void *)(a1 + 1032);
        *(_OWORD *)(a1 + 208) = *(_OWORD *)(v14 + 64);
        *(void *)(v14 + 64) = 0;
        *(void *)(v14 + 72) = 0;
      }
      *(unsigned char *)(a1 + 224) = v9;
      uint64_t v15 = *(void *)(a1 + 1040);
      if (v15 && !atomic_fetch_add((atomic_ullong *volatile)(v15 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        long long v16 = *(std::__shared_weak_count **)(a1 + 1040);
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      uint64_t v17 = *(std::__shared_weak_count **)(a1 + 240);
      if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      char v18 = *(std::__shared_weak_count **)(a1 + 840);
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      long long v19 = *(std::__shared_weak_count **)(a1 + 824);
      if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      uint64_t v20 = *(std::__shared_weak_count **)(a1 + 640);
      if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      char v21 = *(std::__shared_weak_count **)(a1 + 624);
      if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
        long long v22 = (char *)*v6;
        if (!*v6) {
          goto LABEL_34;
        }
      }
      else
      {
        long long v22 = (char *)*v6;
        if (!*v6) {
          goto LABEL_34;
        }
      }
      uint64_t v23 = *(char **)(a1 + 760);
      char v24 = v22;
      if (v23 != v22)
      {
        do
        {
          int v25 = v23 - 32;
          uint64_t v26 = *((unsigned int *)v23 - 2);
          if (v26 != -1) {
            ((void (*)(std::system_error *, char *))off_1EDCA6108[v26])(v103, v23 - 32);
          }
          *((_DWORD *)v23 - 2) = -1;
          v23 -= 32;
        }
        while (v25 != v22);
        char v24 = *v96;
        unint64_t v3 = (std::string *)v102;
      }
      *(void *)(a1 + 760) = v22;
      operator delete(v24);
LABEL_34:
      if (*(char *)(a1 + 799) < 0)
      {
        operator delete(v99->__r_.__value_.__l.__data_);
        if (*(unsigned char *)(a1 + 224)) {
          goto LABEL_36;
        }
      }
      else if (*(unsigned char *)(a1 + 224))
      {
LABEL_36:
        if (LOBYTE(v2->__vftable) == 2)
        {
          AMSCore::StringUtils::join<char [17]>(v3, "invalid response");
          v116.__cat_ = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
          *(void *)&v116.__val_ = 301;
          std::system_error::system_error(v103, v116, v3);
          if (*(char *)(a1 + 255) < 0) {
            operator delete(v3->__r_.__value_.__l.__data_);
          }
          *(void *)(a1 + 472) = &unk_1EDC827D8;
          *(void *)(a1 + 520) = 0;
          *(void *)(a1 + 504) = a1 + 512;
          *(void *)(a1 + 512) = 0;
          *(void *)(a1 + 536) = 0;
          *(void *)(a1 + 528) = 0;
LABEL_42:
          (*(void (**)(void, const std::runtime_error *))(**(void **)(a1 + 864) + 40))(*(void *)(a1 + 864), v109);
          if (*(unsigned char *)(a1 + 304))
          {
            unsigned int *v100 = 999;
            AMSCore::Unexpected<AMSCore::Error,AMSCore::Error,AMSCore::ErrorCode,char const(&)[25]>((uint64_t)v3, (uint64_t)v103, v100);
          }
          unsigned int *v92 = 999;
          AMSCore::Unexpected<AMSCore::Error,AMSCore::Error,AMSCore::ErrorCode,char const(&)[56],AMSCore::Error&>((uint64_t)v100, (uint64_t)v103, v92, (uint64_t)v3);
        }
        (*(void (**)(void, const std::runtime_error *))(**(void **)(a1 + 864) + 24))(*(void *)(a1 + 864), v109);
        if (!*(unsigned char *)(a1 + 304))
        {
          unsigned int *v100 = 999;
          AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&,AMSCore::ErrorCode,char const(&)[35]>((uint64_t)v103, (const std::runtime_error *)v3, v100);
        }
        if (!*(unsigned char *)(a1 + 224)) {
          ((void (*)(std::runtime_error *))v2->~runtime_error)(v2);
        }
        uint64_t v27 = (uint64_t *)(a1 + 1024);
        uint64_t v28 = (uint64_t *)(a1 + 1016);
        goto LABEL_142;
      }
      AMSCore::Error::Error(v103, v2);
      goto LABEL_42;
    }
LABEL_179:
    __break(1u);
    return;
  }
  LODWORD(v3->__r_.__value_.__l.__data_) = 1;
  AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[20]>((uint64_t)v2, 1u);
  if (*(unsigned char *)(a1 + 104))
  {
    if (!*(unsigned char *)(a1 + 96)) {
      (**(void (***)(void))(a1 + 24))();
    }
    *(unsigned char *)(a1 + 104) = 0;
  }
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), v2);
  uint64_t v66 = (void *)(a1 + 192);
  uint64_t v65 = *(void *)(a1 + 192);
  *(void *)(a1 + 64) = v65;
  unint64_t v67 = a1 + 64;
  uint64_t v68 = (void *)(a1 + 184);
  uint64_t v69 = *(void *)(a1 + 184);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 168);
  *(void *)(a1 + 24) = &unk_1EDC827D8;
  *(void *)(a1 + 56) = v69;
  uint64_t v70 = *(void *)(a1 + 200);
  *(void *)(a1 + 72) = v70;
  if (v70)
  {
    *(void *)(v65 + 16) = v67;
    uint64_t v65 = 0;
    void *v68 = v66;
    *uint64_t v66 = 0;
    *(void *)(a1 + 200) = 0;
  }
  else
  {
    *(void *)(a1 + 56) = v67;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 208);
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 104) = 1;
  *(void *)(a1 + 152) = &unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v68, (unsigned int *)v65);
  MEMORY[0x192FA3C30](v2);
  uint64_t v28 = (uint64_t *)(a1 + 976);
  uint64_t v27 = (uint64_t *)(a1 + 968);
  unint64_t v32 = *(void *)(a1 + 960);
  int v30 = 3;
LABEL_169:
  uint64_t v108 = *v27;
  uint64_t v78 = *v28;
  uint64_t v79 = *(void *)v4;
  if (*(void *)v4)
  {
    uint64_t v80 = *(void *)(a1 + 688);
    long long v81 = *(void **)v4;
    if (v80 != v79)
    {
      do
      {
        uint64_t v82 = v80 - 32;
        uint64_t v83 = *(unsigned int *)(v80 - 8);
        if (v83 != -1) {
          ((void (*)(std::runtime_error *, uint64_t))off_1EDCA6108[v83])(v2, v80 - 32);
        }
        *(_DWORD *)(v80 - 8) = -1;
        v80 -= 32;
      }
      while (v82 != v79);
      long long v81 = *v98;
    }
    *(void *)(a1 + 688) = v79;
    operator delete(v81);
  }
  uint64_t v84 = (void (***)(uint64_t))(a1 + 24);
  long long v85 = (void *)(a1 + 192);
  uint64_t v86 = (void *)(a1 + 184);
  uint64_t v105 = (_OWORD *)(a1 + 40);
  unint64_t v106 = a1 + 64;
  long long v104 = (_OWORD *)(a1 + 168);
  int v87 = (void *)(a1 + 208);
  while (1)
  {
    std::__expected_base<AMSCore::IMetricsDataAccessObject::LockedItems,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100]((uint64_t)v109);
    if (v30)
    {
      if (v30 != 6) {
        goto LABEL_89;
      }
      if (v32 > 0x31 || (uint64_t v31 = *(void *)(a1 + 952) + 16, v31 == *(void *)(a1 + 944)))
      {
LABEL_85:
        if (*(unsigned char *)(a1 + 104) && !*(unsigned char *)(a1 + 96)) {
          (**v84)(a1 + 24);
        }
        *(unsigned char *)(a1 + 96) = 1;
        *(unsigned char *)(a1 + 104) = 1;
LABEL_89:
        unint64_t v43 = v101;
        goto LABEL_98;
      }
      *(void *)(a1 + 952) = v31;
    }
    else if (++v32 >= 0x32)
    {
      goto LABEL_85;
    }
    *(void *)(a1 + 976) = v78;
    *(void *)(a1 + 968) = v108;
    *(void *)(a1 + 960) = v32;
    unsigned __int8 v33 = atomic_load(*(unsigned __int8 **)(a1 + 912));
    if (v33) {
      break;
    }
    (*(void (**)(void, unint64_t, void, void, uint64_t))(**(void **)(a1 + 864) + 56))(*(void *)(a1 + 864), v107, **(void **)(a1 + 952), *(void *)(*(void *)(a1 + 952) + 8), 500);
    if (!*(unsigned char *)(a1 + 384))
    {
      unsigned int *v102 = 999;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&,AMSCore::ErrorCode,char const(&)[24]>((uint64_t)v2, v109, v102);
    }
    unsigned __int8 v34 = atomic_load(*(unsigned __int8 **)(a1 + 912));
    if (v34)
    {
      unsigned int *v102 = 1;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[20]>((uint64_t)v2, 1u);
      if (*(unsigned char *)(a1 + 104))
      {
        if (!*(unsigned char *)(a1 + 96)) {
          (**v84)(a1 + 24);
        }
        *(unsigned char *)(a1 + 104) = 0;
      }
      std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), v2);
      _OWORD *v105 = *v104;
      *(void *)(a1 + 24) = &unk_1EDC827D8;
      uint64_t v29 = *(void *)(a1 + 192);
      *(void *)(a1 + 56) = *(void *)(a1 + 184);
      *(void *)(a1 + 64) = v29;
      uint64_t v39 = *(void *)(a1 + 200);
      *(void *)(a1 + 72) = v39;
      if (v39)
      {
        *(void *)(v29 + 16) = v106;
        uint64_t v29 = 0;
        *uint64_t v86 = v85;
        void *v85 = 0;
        *(void *)(a1 + 200) = 0;
      }
      else
      {
        *(void *)(a1 + 56) = v106;
      }
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 208);
      void *v87 = 0;
      *(void *)(a1 + 216) = 0;
      *(unsigned char *)(a1 + 96) = 0;
      *(unsigned char *)(a1 + 104) = 1;
      *(void *)(a1 + 152) = &unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 184, (unsigned int *)v29);
      MEMORY[0x192FA3C30](v2);
      int v30 = 3;
    }
    else
    {
      if (!*(unsigned char *)(a1 + 384)) {
        goto LABEL_179;
      }
      uint64_t v36 = *(void *)(a1 + 328);
      uint64_t v35 = *(void *)(a1 + 336);
      *(void *)(a1 + 984) = v35;
      *(void *)(a1 + 992) = v36;
      if (v35 != v36)
      {
        uint64_t v47 = *(void *)(a1 + 872);
        uint64_t v48 = *(void *)(a1 + 864);
        *(void *)(a1 + 704) = v36;
        *(void *)(a1 + 712) = v35;
        *(void *)(a1 + 720) = *(void *)(a1 + 344);
        *(void *)(a1 + 328) = 0;
        *(void *)(a1 + 336) = 0;
        *(void *)(a1 + 344) = 0;
        *(void *)(a1 + 800) = v48;
        *(void *)(a1 + 808) = v47;
        if (v47) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v47 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v49 = *(void *)(a1 + 936);
        *(void *)(a1 + 848) = *(void *)(a1 + 928);
        *(void *)(a1 + 856) = v49;
        if (v49) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v49 + 8), 1uLL, memory_order_relaxed);
        }
      }
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v2);
      AMSCore::Logger::log<char [33]>((uint64_t)v2->__vftable);
      uint64_t v37 = *(std::__shared_weak_count **)(a1 + 160);
      if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
      LOBYTE(v38) = 1;
      *(unsigned char *)(a1 + 224) = 1;
      if (!*(unsigned char *)(a1 + 104)
        || *(unsigned char *)(a1 + 96)
        || ((**(void (***)(uint64_t))(a1 + 24))(a1 + 24),
            int v38 = *(unsigned __int8 *)(a1 + 224),
            *(unsigned char *)(a1 + 104) = 0,
            v38))
      {
        *(unsigned char *)(a1 + 96) = v38;
        *(unsigned char *)(a1 + 104) = 1;
        int v30 = 3;
      }
      else
      {
        std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), v2);
        _OWORD *v105 = *v104;
        *(void *)(a1 + 24) = &unk_1EDC827D8;
        uint64_t v40 = *(void *)(a1 + 192);
        *(void *)(a1 + 56) = *(void *)(a1 + 184);
        *(void *)(a1 + 64) = v40;
        uint64_t v41 = *(void *)(a1 + 200);
        *(void *)(a1 + 72) = v41;
        if (v41)
        {
          *(void *)(v40 + 16) = v106;
          *uint64_t v86 = v85;
          void *v85 = 0;
          *(void *)(a1 + 200) = 0;
        }
        else
        {
          *(void *)(a1 + 56) = v106;
        }
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 208);
        void *v87 = 0;
        *(void *)(a1 + 216) = 0;
        int v42 = *(unsigned __int8 *)(a1 + 224);
        *(unsigned char *)(a1 + 96) = 0;
        *(unsigned char *)(a1 + 104) = 1;
        int v30 = 3;
        if (!v42) {
          ((void (*)(std::runtime_error *))v2->~runtime_error)(v2);
        }
      }
    }
  }
  AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[20]>((uint64_t)&v110, 1u);
  unint64_t v43 = v101;
  if (*(unsigned char *)(a1 + 104))
  {
    if (!*(unsigned char *)(a1 + 96)) {
      (**v84)(a1 + 24);
    }
    *(unsigned char *)(a1 + 104) = 0;
  }
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v110);
  _OWORD *v105 = v111;
  *(void *)(a1 + 24) = &unk_1EDC827D8;
  uint64_t v44 = v113;
  *(void *)(a1 + 56) = v112;
  *(void *)(a1 + 64) = v44;
  uint64_t v45 = v114;
  *(void *)(a1 + 72) = v114;
  if (v45)
  {
    *(void *)(v44 + 16) = v106;
    uint64_t v112 = &v113;
    uint64_t v113 = 0;
    uint64_t v114 = 0;
    uint64_t v44 = 0;
  }
  else
  {
    *(void *)(a1 + 56) = v106;
  }
  *(_OWORD *)(a1 + 80) = v115;
  long long v115 = 0uLL;
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 104) = 1;
  v110.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v112, (unsigned int *)v44);
  MEMORY[0x192FA3C30](&v110);
LABEL_98:
  uint64_t v46 = *(void **)(a1 + 392);
  if (*(unsigned char *)(a1 + 464))
  {
    if (v46)
    {
      *(void *)(a1 + 400) = v46;
      operator delete(v46);
    }
  }
  else
  {
    (**(void (***)(void))(a1 + 392))();
  }
  *(void *)(a1 + 152) = v43;
  *(void *)a1 = 0;
  AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v2);
}

void sub_18DB1B41C()
{
  std::vector<AMSCore::Any>::~vector[abi:fe180100](v1);
  std::__expected_base<AMSCore::IMetricsDataAccessObject::LockedItems,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100](*(void *)(v0 - 168));
  JUMPOUT(0x18DB1B4ECLL);
}

void sub_18DB1B4A4()
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v0);
  std::__expected_base<AMSCore::IMetricsDataAccessObject::LockedItems,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100](*(void *)(v1 - 168));
  JUMPOUT(0x18DB1B4ECLL);
}

void sub_18DB1B4BC()
{
}

void sub_18DB1B4E0()
{
}

void sub_18DB1B504()
{
}

void AMSCore::MetricsFlushTask::internal::perform(char *__p)
{
  uint64_t v2 = __p + 152;
  if (!*(void *)__p) {
    goto LABEL_71;
  }
  if (!__p[1052])
  {
    uint64_t v15 = *((void *)__p + 126);
    if (v15 && !atomic_fetch_add((atomic_ullong *volatile)(v15 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      long long v16 = (std::__shared_weak_count *)*((void *)__p + 126);
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    uint64_t v17 = (std::__shared_weak_count *)*((void *)__p + 20);
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    char v18 = (std::__shared_weak_count *)*((void *)__p + 107);
    if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    long long v19 = (std::__shared_weak_count *)*((void *)__p + 101);
    if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    uint64_t v20 = *((void *)__p + 88);
    if (!v20) {
      goto LABEL_67;
    }
    uint64_t v21 = *((void *)__p + 89);
    long long v22 = (char *)*((void *)__p + 88);
    if (v21 == v20)
    {
LABEL_65:
      *((void *)__p + 89) = v20;
LABEL_66:
      operator delete(v22);
      goto LABEL_67;
    }
    while (1)
    {
      if (*(char *)(v21 - 17) < 0)
      {
        operator delete(*(void **)(v21 - 40));
        if ((*(char *)(v21 - 41) & 0x80000000) == 0)
        {
LABEL_44:
          if (*(char *)(v21 - 65) < 0) {
            goto LABEL_48;
          }
          goto LABEL_41;
        }
      }
      else if ((*(char *)(v21 - 41) & 0x80000000) == 0)
      {
        goto LABEL_44;
      }
      operator delete(*(void **)(v21 - 64));
      if (*(char *)(v21 - 65) < 0) {
LABEL_48:
      }
        operator delete(*(void **)(v21 - 88));
LABEL_41:
      v21 -= 88;
      if (v21 == v20)
      {
        long long v22 = (char *)*((void *)__p + 88);
        goto LABEL_65;
      }
    }
  }
  uint64_t v3 = *((void *)__p + 130);
  if (v3 && !atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    unint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 130);
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)__p + 30);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  long long v6 = (std::__shared_weak_count *)*((void *)__p + 105);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)__p + 103);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  char v8 = (std::__shared_weak_count *)*((void *)__p + 80);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  char v9 = (std::__shared_weak_count *)*((void *)__p + 78);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    uint64_t v10 = (char *)*((void *)__p + 94);
    if (!v10) {
      goto LABEL_51;
    }
  }
  else
  {
    uint64_t v10 = (char *)*((void *)__p + 94);
    if (!v10) {
      goto LABEL_51;
    }
  }
  uint64_t v11 = (char *)*((void *)__p + 95);
  unint64_t v12 = v10;
  if (v11 != v10)
  {
    do
    {
      uint64_t v13 = v11 - 32;
      uint64_t v14 = *((unsigned int *)v11 - 2);
      if (v14 != -1) {
        ((void (*)(char *, char *))off_1EDCA6108[v14])(__p + 472, v11 - 32);
      }
      *((_DWORD *)v11 - 2) = -1;
      v11 -= 32;
    }
    while (v13 != v10);
    unint64_t v12 = (char *)*((void *)__p + 94);
  }
  *((void *)__p + 95) = v10;
  operator delete(v12);
LABEL_51:
  if (__p[799] < 0)
  {
    operator delete(*((void **)__p + 97));
    uint64_t v23 = (char *)*((void *)__p + 85);
    if (!v23) {
      goto LABEL_67;
    }
    goto LABEL_55;
  }
  uint64_t v23 = (char *)*((void *)__p + 85);
  if (v23)
  {
LABEL_55:
    char v24 = (char *)*((void *)__p + 86);
    long long v22 = v23;
    if (v24 != v23)
    {
      do
      {
        int v25 = v24 - 32;
        uint64_t v26 = *((unsigned int *)v24 - 2);
        if (v26 != -1) {
          ((void (*)(char *, char *))off_1EDCA6108[v26])(v2, v24 - 32);
        }
        *((_DWORD *)v24 - 2) = -1;
        v24 -= 32;
      }
      while (v25 != v23);
      long long v22 = (char *)*((void *)__p + 85);
    }
    *((void *)__p + 86) = v23;
    goto LABEL_66;
  }
LABEL_67:
  std::__expected_base<AMSCore::IMetricsDataAccessObject::LockedItems,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100]((uint64_t)(__p + 312));
  uint64_t v27 = (void (**)(char *))*((void *)__p + 49);
  if (__p[464])
  {
    if (v27)
    {
      *((void *)__p + 50) = v27;
      operator delete(v27);
    }
  }
  else
  {
    (*v27)(__p + 392);
  }
LABEL_71:
  uint64_t v28 = (char *)*((void *)__p + 18);
  if (v28 == __p + 120)
  {
    (*(void (**)(char *))(*((void *)__p + 15) + 32))(__p + 120);
    if (!__p[104]) {
      goto LABEL_79;
    }
    goto LABEL_77;
  }
  if (v28) {
    (*(void (**)(char *))(*(void *)v28 + 40))(v28);
  }
  if (__p[104])
  {
LABEL_77:
    if (!__p[96]) {
      (**((void (***)(void))__p + 3))();
    }
  }
LABEL_79:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  uint64_t v29 = (char *)*((void *)__p + 84);
  if (v29 == __p + 648)
  {
    (*(void (**)(char *))(*((void *)__p + 81) + 32))(__p + 648);
    uint64_t v30 = *((void *)__p + 117);
    if (!v30) {
      goto LABEL_89;
    }
    goto LABEL_87;
  }
  if (v29) {
    (*(void (**)(char *))(*(void *)v29 + 40))(v29);
  }
  uint64_t v30 = *((void *)__p + 117);
  if (v30)
  {
LABEL_87:
    if (!atomic_fetch_add((atomic_ullong *volatile)(v30 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v31 = (std::__shared_weak_count *)*((void *)__p + 117);
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
LABEL_89:
  uint64_t v32 = *((void *)__p + 115);
  if (v32 && !atomic_fetch_add((atomic_ullong *volatile)(v32 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    unsigned __int8 v33 = (std::__shared_weak_count *)*((void *)__p + 115);
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  uint64_t v34 = *((void *)__p + 113);
  if (v34 && !atomic_fetch_add((atomic_ullong *volatile)(v34 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v35 = (std::__shared_weak_count *)*((void *)__p + 113);
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  uint64_t v36 = *((void *)__p + 111);
  if (v36 && !atomic_fetch_add((atomic_ullong *volatile)(v36 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v39 = (std::__shared_weak_count *)*((void *)__p + 111);
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
    if ((__p[751] & 0x80000000) == 0) {
      goto LABEL_99;
    }
    goto LABEL_98;
  }
  if (__p[751] < 0) {
LABEL_98:
  }
    operator delete(*((void **)__p + 91));
LABEL_99:
  uint64_t v37 = *((void *)__p + 109);
  if (v37 && !atomic_fetch_add((atomic_ullong *volatile)(v37 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    int v38 = (std::__shared_weak_count *)*((void *)__p + 109);
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  operator delete(__p);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[20]>(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = a2;
  AMSCore::StringUtils::join<char [20]>(&__what_arg, "flush task canceled");
  *(void *)&v14.__val_ = v3;
  v14.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v8, v14, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  v8.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  char v9 = &v10;
  long long v12 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v8);
  *(std::error_code *)(a1 + 16) = v8.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v4 = v10;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = a1 + 40;
  uint64_t v6 = v11;
  *(void *)(a1 + 48) = v11;
  if (v6)
  {
    *(void *)(v4 + 16) = v5;
    uint64_t v4 = 0;
    char v9 = &v10;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v5;
  }
  *(_OWORD *)(a1 + 56) = v12;
  long long v12 = 0uLL;
  v8.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v9, (unsigned int *)v4);
  return MEMORY[0x192FA3C30](&v8);
}

void sub_18DB1BE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&,AMSCore::ErrorCode,char const(&)[24]>(uint64_t a1, const std::runtime_error *a2, unsigned int *a3)
{
  AMSCore::Error::Error(&v5, a2);
  uint64_t v4 = *a3;
  AMSCore::StringUtils::join<char [24]>(&__what_arg, "failed to lock database");
  *(void *)&v10.__val_ = v4;
  v10.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v6, v10, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  }
  v8[0] = 0;
  v8[1] = 0;
  v6.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  uint64_t v7 = v8;
  operator new();
}

void sub_18DB1C0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,unsigned int *a24)
{
  (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v24, a24);
  MEMORY[0x192FA3C30](&a19);
  AMSCore::Error::~Error((AMSCore::Error *)&a10);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::Logger::log<char [33]>(uint64_t result)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= 2u)
  {
    uint64_t v1 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v6);
    uint64_t v2 = *(void *)(v6[0] - 24);
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v6, (uint64_t)"no events to flush, closing task", 32);
    uint64_t v3 = v6[6];
    uint64_t v4 = (char *)v6 + *(void *)(v6[0] - 24);
    if ((v4[32] & 5) != 0)
    {
      uint64_t v5 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v4 + 5) + 32))(&rep);
      uint64_t v5 = v13;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v10 = 2;
    uint64_t v11 = v3;
    uint64_t v12 = v5;
    (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v1 + 16) + 16))(*(void *)(v1 + 16), "metrics", 7, &rep);
    v6[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v6[1] = MEMORY[0x1E4FBA470] + 16;
    if (v7 < 0) {
      operator delete((void *)v6[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v8);
  }
  return result;
}

void sub_18DB1C3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::MetricsFlushTask::anonymous namespace'::convertToAnyVectorAndHandleSkips(uint64_t a1, void *a2, long long *a3, long long *a4)
{
  char v7 = operator new(0x280uLL);
  uint64_t v8 = a2[1];
  v7[70] = *a2;
  v7[71] = v8;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  long long v9 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  long long v10 = *a4;
  *((_OWORD *)v7 + 36) = v9;
  *((_OWORD *)v7 + 37) = v10;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *((unsigned char *)v7 + 24) = 0;
  *((unsigned char *)v7 + 48) = 0;
  v7[7] = 0;
  v7[11] = 0;
  operator new();
}

void sub_18DB1CC00(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  AMSCore::MetricsEventModifier::EventModifier::~EventModifier(v16);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a10);
  std::expected<AMSCore::Any,AMSCore::Error>::~expected[abi:fe180100](v17);
  std::vector<AMSCore::Any>::~vector[abi:fe180100](v15);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::Unexpected<AMSCore::Error,AMSCore::Error,AMSCore::ErrorCode,char const(&)[56],AMSCore::Error&>(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  std::runtime_error::runtime_error(&v11, (const std::runtime_error *)a2);
  char v7 = (void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 40);
  long long v12 = *(_OWORD *)(a2 + 16);
  long long v9 = *(uint64_t **)(a2 + 32);
  v11.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  uint64_t v13 = v9;
  uint64_t v14 = v8;
  if (*(void *)(a2 + 48))
  {
    *(void *)(v8 + 16) = &v14;
    *(void *)(a2 + 32) = v7;
    void *v7 = 0;
    *(void *)(a2 + 48) = 0;
  }
  else
  {
    uint64_t v13 = &v14;
  }
  long long v16 = *(_OWORD *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  uint64_t v10 = *a3;
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v21);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v21, (uint64_t)"failed to upload metrics. Db error after network fail: ", 55);
  AMSCore::operator<<(&v21, a4);
  std::stringbuf::str[abi:fe180100]((uint64_t)v22, &__what_arg);
  uint64_t v21 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v22[-1] + *(void *)(v21 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v22[0] = MEMORY[0x1E4FBA470] + 16;
  if (v23 < 0) {
    operator delete((void *)v22[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FA3FD0](&v24);
  *(void *)&v25.__val_ = v10;
  v25.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v17, v25, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  }
  v19[0] = 0;
  v19[1] = 0;
  v17.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  char v18 = v19;
  operator new();
}

void sub_18DB1D0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,unsigned int *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v33, a24);
  MEMORY[0x192FA3C30](&a19);
  AMSCore::Error::~Error((AMSCore::Error *)&a10);
  _Unwind_Resume(a1);
}

void AMSCore::Unexpected<AMSCore::Error,AMSCore::Error,AMSCore::ErrorCode,char const(&)[25]>(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  std::runtime_error::runtime_error(v9, (const std::runtime_error *)a2);
  uint64_t v5 = (void *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 40);
  v9[1] = *(std::runtime_error *)(a2 + 16);
  char v7 = *(uint64_t **)(a2 + 32);
  v9[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  if (*(void *)(a2 + 48))
  {
    *(void *)(v6 + 16) = &v11;
    *(void *)(a2 + 32) = v5;
    void *v5 = 0;
    *(void *)(a2 + 48) = 0;
  }
  else
  {
    uint64_t v10 = &v11;
  }
  long long v13 = *(_OWORD *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  uint64_t v8 = *a3;
  AMSCore::StringUtils::join<char [25]>(&__what_arg, "failed to upload metrics");
  *(void *)&v18.__val_ = v8;
  v18.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v14, v18, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  }
  v16[0] = 0;
  v16[1] = 0;
  v14.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  uint64_t v15 = v16;
  operator new();
}

void sub_18DB1D434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unsigned int *a23)
{
  (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v23, a23);
  MEMORY[0x192FA3C30](&a18);
  AMSCore::Error::~Error((AMSCore::Error *)&a9);
  _Unwind_Resume(a1);
}

void AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&,AMSCore::ErrorCode,char const(&)[35]>(uint64_t a1, const std::runtime_error *a2, unsigned int *a3)
{
  AMSCore::Error::Error(v4, a2);
  AMSCore::Error::Error<char [35]>((uint64_t)&v5, (uint64_t)v4, *a3, (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance, "failed to get events from database");
}

void sub_18DB1D61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__expected_base<AMSCore::IMetricsDataAccessObject::LockedItems,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (!v2) {
      return;
    }
    uint64_t v3 = *(void *)(a1 + 24);
    uint64_t v4 = *(void **)(a1 + 16);
    if (v3 == v2)
    {
LABEL_18:
      *(void *)(a1 + 24) = v2;
      operator delete(v4);
      return;
    }
    while (1)
    {
      if (*(char *)(v3 - 17) < 0)
      {
        operator delete(*(void **)(v3 - 40));
        if ((*(char *)(v3 - 41) & 0x80000000) == 0)
        {
LABEL_8:
          if (*(char *)(v3 - 65) < 0) {
            goto LABEL_12;
          }
          goto LABEL_5;
        }
      }
      else if ((*(char *)(v3 - 41) & 0x80000000) == 0)
      {
        goto LABEL_8;
      }
      operator delete(*(void **)(v3 - 64));
      if (*(char *)(v3 - 65) < 0) {
LABEL_12:
      }
        operator delete(*(void **)(v3 - 88));
LABEL_5:
      v3 -= 88;
      if (v3 == v2)
      {
        uint64_t v4 = *(void **)(a1 + 16);
        goto LABEL_18;
      }
    }
  }
  std::runtime_error v5 = **(void (***)(void))a1;
  v5();
}

uint64_t std::expected<std::vector<std::optional<unsigned long long>>,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 72);
  uint64_t v3 = *(void (***)(uint64_t))a1;
  if (v2)
  {
    if (v3)
    {
      *(void *)(a1 + 8) = v3;
      operator delete(v3);
    }
  }
  else
  {
    (*v3)(a1);
  }
  return a1;
}

void AMSCore::Error::Error<char [35]>(uint64_t a1, uint64_t a2, uint64_t a3, const std::error_category *a4, const char *a5)
{
  AMSCore::StringUtils::join<char [35]>(&__what_arg, a5);
  *(void *)&v9.__val_ = a3;
  v9.__cat_ = a4;
  std::system_error::system_error((std::system_error *)a1, v9, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_1EDC827D8;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)(a1 + 48) = 0;
  operator new();
}

void sub_18DB1D910(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v2, *(unsigned int **)(v1 + 40));
  MEMORY[0x192FA3C30](v1);
  _Unwind_Resume(a1);
}

void sub_18DB1D960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::MetricsFlushTask::anonymous namespace'::convertToAnyVectorAndHandleSkips(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 96);
  uint64_t v3 = (uint64_t *)(a1 + 384);
  uint64_t v44 = a1 + 464;
  uint64_t v45 = (char **)(a1 + 488);
  uint64_t v4 = a1 + 528;
  uint64_t v39 = a1 + 16;
  uint64_t v42 = a1 + 544;
  unint64_t v43 = (AMSCore::URL *)(a1 + 216);
  uint64_t v40 = a1 + 392;
  uint64_t v41 = a1 + 400;
  AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::await_resume(a1 + 96, *(void *)(a1 + 616));
  uint64_t v5 = *(void *)(a1 + 624);
  if (v5 && !atomic_fetch_add((atomic_ullong *volatile)(v5 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    char v7 = *(std::__shared_weak_count **)(a1 + 624);
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 536);
    if (!v6) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 536);
    if (!v6) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_7:
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 552);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!*(unsigned char *)(a1 + 121)) {
      goto LABEL_15;
    }
  }
  else if (!*(unsigned char *)(a1 + 121))
  {
LABEL_15:
    long long v12 = *(void **)(a1 + 512);
    unint64_t v13 = *(void *)(a1 + 496);
    if (v13 >= *(void *)(a1 + 504))
    {
      std::error_code v18 = std::vector<AMSCore::Any>::__emplace_back_slow_path<std::map<std::string,AMSCore::Any>>(v45, v12);
    }
    else
    {
      *(void *)unint64_t v13 = *v12;
      std::system_error v14 = v12 + 1;
      uint64_t v15 = v12[1];
      *(void *)(v13 + 8) = v15;
      unint64_t v16 = v13 + 8;
      uint64_t v17 = v12[2];
      *(void *)(v13 + 16) = v17;
      if (v17)
      {
        *(void *)(v15 + 16) = v16;
        void *v12 = v14;
        *std::system_error v14 = 0;
        v12[2] = 0;
      }
      else
      {
        *(void *)unint64_t v13 = v16;
      }
      *(_DWORD *)(v13 + 24) = 8;
      std::error_code v18 = (char *)(v13 + 32);
    }
    *(void *)(a1 + 496) = v18;
    goto LABEL_22;
  }
  if (!*(unsigned char *)(a1 + 120)) {
    goto LABEL_15;
  }
  uint64_t v9 = *(void *)(a1 + 608);
  uint64_t v10 = *(void *)(a1 + 576);
  uint64_t v11 = *(void *)(v9 + 40);
  *(_OWORD *)uint64_t v44 = *(_OWORD *)(v9 + 24);
  *(void *)(v44 + 16) = v11;
  *(void *)(v9 + 32) = 0;
  *(void *)(v9 + 40) = 0;
  *(void *)(v9 + 24) = 0;
  (*(void (**)(uint64_t))(*(void *)v10 + 80))(v10);
  if (*(char *)(a1 + 487) < 0) {
    operator delete(*(void **)v44);
  }
LABEL_22:
  if (*(unsigned char *)(a1 + 368)) {
    AMSCore::URL::~URL(v43);
  }
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a1 + 184));
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a1 + 160));
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a1 + 136));
  long long v19 = *(std::__shared_weak_count **)(a1 + 520);
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_57;
  }
  if (!*(unsigned char *)(a1 + 456)) {
    goto LABEL_58;
  }
LABEL_27:
  uint64_t v20 = *(unsigned int *)(a1 + 408);
  if (v20 != -1) {
    ((void (*)(uint64_t *, uint64_t *))off_1EDCA6108[v20])(v2, v3);
  }
  while (1)
  {
    uint64_t v21 = *(void *)(a1 + 608);
    if (v21 + 88 == *(void *)(a1 + 568)) {
      break;
    }
    *(void *)(a1 + 608) = v21 + 88;
    AMSCore::JsonData::decode((uint64_t *)(v21 + 136), (uint64_t)v3);
    if (*(unsigned char *)(a1 + 456))
    {
      int v22 = *(_DWORD *)(a1 + 408);
      if (v22 == 8)
      {
LABEL_32:
        if (v22 == 8) {
          uint64_t v23 = v3;
        }
        else {
          uint64_t v23 = 0;
        }
        uint64_t v24 = (atomic_ullong *)operator new(0x30uLL);
        v24[1] = 0;
        v24[2] = 0;
        *uint64_t v24 = (atomic_ullong)&unk_1EDC84358;
        uint64_t v24[3] = *v23;
        std::error_code v25 = v24 + 3;
        uint64_t v26 = v40;
        uint64_t v27 = v41;
        if (v22 != 8) {
          uint64_t v26 = 8;
        }
        atomic_ullong v28 = *(void *)v26;
        void v24[4] = *(void *)v26;
        uint64_t v29 = v24 + 4;
        if (v22 != 8) {
          uint64_t v27 = 16;
        }
        atomic_ullong v30 = *(void *)v27;
        v24[5] = v30;
        if (v30)
        {
          *(void *)(v28 + 16) = v29;
          uint64_t *v23 = v26;
          *(void *)uint64_t v26 = 0;
          *(void *)(v26 + 8) = 0;
        }
        else
        {
          *std::error_code v25 = v29;
        }
        uint64_t v33 = *(void *)(a1 + 592);
        *(void *)(a1 + 512) = v25;
        *(void *)(a1 + 520) = v24;
        *(void *)(a1 + 544) = v25;
        *(void *)(a1 + 552) = v24;
        atomic_fetch_add_explicit(v24 + 1, 1uLL, memory_order_relaxed);
        AMSCore::MetricsEventModifierProvider::getOverrideForEvent(v4, v33, v42);
      }
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v2);
      AMSCore::Logger::log<char [25]>(*v2, 4u, (uint64_t)"metrics", 7, "skipping malformed event");
    }
    else
    {
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v2);
      AMSCore::Logger::log<char [30],AMSCore::Error>(*v2, 4u, (uint64_t)"metrics", 7, "failed to deserialize event: ", (uint64_t)v3);
    }
    long long v19 = *(std::__shared_weak_count **)(a1 + 104);
    if (!v19 || atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      while (1)
      {
        if (*(unsigned char *)(a1 + 456))
        {
          uint64_t v31 = *(unsigned int *)(a1 + 408);
          if (v31 != -1) {
            ((void (*)(uint64_t *, uint64_t *))off_1EDCA6108[v31])(v2, v3);
          }
        }
        else
        {
          (*(void (**)(uint64_t *))*v3)(v3);
        }
        uint64_t v32 = *(void *)(a1 + 608);
        if (v32 + 88 == *(void *)(a1 + 568)) {
          goto LABEL_61;
        }
        *(void *)(a1 + 608) = v32 + 88;
        AMSCore::JsonData::decode((uint64_t *)(v32 + 136), (uint64_t)v3);
        if (*(unsigned char *)(a1 + 456))
        {
          int v22 = *(_DWORD *)(a1 + 408);
          if (v22 == 8) {
            goto LABEL_32;
          }
          AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v2);
          AMSCore::Logger::log<char [25]>(*v2, 4u, (uint64_t)"metrics", 7, "skipping malformed event");
          long long v19 = *(std::__shared_weak_count **)(a1 + 104);
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        else
        {
          AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v2);
          AMSCore::Logger::log<char [30],AMSCore::Error>(*v2, 4u, (uint64_t)"metrics", 7, "failed to deserialize event: ", (uint64_t)v3);
          long long v19 = *(std::__shared_weak_count **)(a1 + 104);
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
      }
    }
LABEL_57:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if (*(unsigned char *)(a1 + 456)) {
      goto LABEL_27;
    }
LABEL_58:
    (*(void (**)(uint64_t *))*v3)(v3);
  }
LABEL_61:
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v34 = *(void *)(a1 + 24);
    if (v34)
    {
      uint64_t v35 = *(void *)(a1 + 32);
      uint64_t v36 = *(void **)(a1 + 24);
      if (v35 != v34)
      {
        do
        {
          uint64_t v37 = v35 - 32;
          uint64_t v38 = *(unsigned int *)(v35 - 8);
          if (v38 != -1) {
            ((void (*)(char *, uint64_t))off_1EDCA6108[v38])(&v46, v35 - 32);
          }
          *(_DWORD *)(v35 - 8) = -1;
          v35 -= 32;
        }
        while (v37 != v34);
        uint64_t v36 = *(void **)(a1 + 24);
      }
      *(void *)(a1 + 32) = v34;
      operator delete(v36);
    }
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v45;
  *(void *)(a1 + 40) = *(void *)(a1 + 504);
  *(unsigned char *)(a1 + 48) = 1;
  *(void *)(a1 + 96) = v39;
  *(void *)a1 = 0;
  AMSCore::Task<std::vector<AMSCore::Any>,void>::Promise::Awaiter::await_suspend((uint64_t)v2);
}

void sub_18DB1E18C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  AMSCore::MetricsEventModifier::EventModifier::~EventModifier(v17);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a10);
  std::expected<AMSCore::Any,AMSCore::Error>::~expected[abi:fe180100](v18);
  std::vector<AMSCore::Any>::~vector[abi:fe180100](a17);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::MetricsFlushTask::anonymous namespace'::convertToAnyVectorAndHandleSkips(unsigned int *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 4);
  if (!*(void *)a1) {
    goto LABEL_27;
  }
  uint64_t v3 = *((void *)a1 + 78);
  if (v3 && !atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v4 = (std::__shared_weak_count *)*((void *)a1 + 78);
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)a1 + 67);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)a1 + 69);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  char v7 = (std::__shared_weak_count *)*((void *)a1 + 65);
  if (!v7 || atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (*((unsigned char *)a1 + 456)) {
      goto LABEL_14;
    }
LABEL_19:
    (**((void (***)(uint64_t))a1 + 48))((uint64_t)(a1 + 96));
    uint64_t v9 = (char *)*((void *)a1 + 61);
    if (!v9) {
      goto LABEL_27;
    }
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (!*((unsigned char *)a1 + 456)) {
    goto LABEL_19;
  }
LABEL_14:
  uint64_t v8 = a1[102];
  if (v8 != -1) {
    ((void (*)(unsigned int *, unsigned int *))off_1EDCA6108[v8])(a1 + 24, a1 + 96);
  }
  uint64_t v9 = (char *)*((void *)a1 + 61);
  if (v9)
  {
LABEL_20:
    uint64_t v10 = (char *)*((void *)a1 + 62);
    uint64_t v11 = v9;
    if (v10 != v9)
    {
      do
      {
        long long v12 = v10 - 32;
        uint64_t v13 = *((unsigned int *)v10 - 2);
        if (v13 != -1) {
          ((void (*)(char *, char *))off_1EDCA6108[v13])(&v19, v10 - 32);
        }
        *((_DWORD *)v10 - 2) = -1;
        v10 -= 32;
      }
      while (v12 != v9);
      uint64_t v11 = (char *)*((void *)a1 + 61);
    }
    *((void *)a1 + 62) = v9;
    operator delete(v11);
  }
LABEL_27:
  uint64_t v14 = *((void *)a1 + 75);
  AMSCore::Task<std::vector<AMSCore::Any>,void>::Promise::~Promise(v2);
  if (v14 && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)a1 + 75) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v15 = (std::__shared_weak_count *)*((void *)a1 + 75);
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = *((void *)a1 + 73);
  if (v16 && !atomic_fetch_add((atomic_ullong *volatile)(v16 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v17 = (std::__shared_weak_count *)*((void *)a1 + 73);
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  uint64_t i = (void **)*((void *)a1 + 70);
  if (i)
  {
    if (i != *((void ***)a1 + 71))
    {
      for (uint64_t i = (void **)*((void *)a1 + 71); i != *((void ***)a1 + 70); i -= 11)
      {
        if (*((char *)i - 17) < 0)
        {
          operator delete(*(i - 5));
          if ((*((char *)i - 41) & 0x80000000) == 0)
          {
LABEL_39:
            if (*((char *)i - 65) < 0) {
              goto LABEL_43;
            }
            continue;
          }
        }
        else if ((*((char *)i - 41) & 0x80000000) == 0)
        {
          goto LABEL_39;
        }
        operator delete(*(i - 8));
        if (*((char *)i - 65) < 0) {
LABEL_43:
        }
          operator delete(*(i - 11));
      }
    }
    operator delete(i);
  }
  operator delete(a1);
}

uint64_t AMSCore::Task<std::vector<AMSCore::Any>,void>::Promise::Awaiter::await_suspend(uint64_t result)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void (**)(void))atomic_exchange((atomic_ullong *volatile)(*(void *)result + 40), 1uLL);
  if (v1)
  {
    uint64_t v2 = result;
    if (v1 == (void (**)(void))2) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result - 8))(*(void *)result - 16);
    }
    uint64_t v3 = (uint64_t *)(*(void *)result + 72);
    uint64_t result = *v3;
    if (*v3)
    {
      if (result == *(void *)v2 + 48)
      {
        uint64_t v14 = v13;
        uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 24))(result, v13);
      }
      else
      {
        uint64_t v14 = *(void **)(*(void *)v2 + 72);
        *uint64_t v3 = 0;
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    if (v14)
    {
      uint64_t v4 = *(void *)v2;
      if (!*(unsigned char *)(*(void *)v2 + 32))
      {
        __break(1u);
        return result;
      }
      *(_OWORD *)long long __p = *(_OWORD *)(v4 + 8);
      uint64_t v11 = *(void *)(v4 + 24);
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      *(void *)(v4 + 24) = 0;
      if (!v14) {
        std::__throw_bad_function_call[abi:fe180100]();
      }
      (*(void (**)(void *, void **))(*v14 + 48))(v14, __p);
      uint64_t v5 = (char *)__p[0];
      if (__p[0])
      {
        uint64_t v6 = (char *)__p[1];
        char v7 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            uint64_t v8 = v6 - 32;
            uint64_t v9 = *((unsigned int *)v6 - 2);
            if (v9 != -1) {
              ((void (*)(char *, char *))off_1EDCA6108[v9])(&v12, v6 - 32);
            }
            *((_DWORD *)v6 - 2) = -1;
            v6 -= 32;
          }
          while (v8 != v5);
          char v7 = __p[0];
        }
        __p[1] = v5;
        operator delete(v7);
      }
    }
    else
    {
      (*v1)(v1);
    }
    uint64_t result = (uint64_t)v14;
    if (v14 == v13)
    {
      return (*(uint64_t (**)(void *))(v13[0] + 32))(v13);
    }
    else if (v14)
    {
      return (*(uint64_t (**)(void))(*v14 + 40))();
    }
  }
  return result;
}

void sub_18DB1E7C4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AMSCore::Task<std::vector<AMSCore::Any>,void>::Promise::~Promise(uint64_t a1)
{
  uint64_t v2 = a1 + 48;
  uint64_t v3 = *(void *)(a1 + 72);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    if (!*(unsigned char *)(a1 + 32)) {
      goto LABEL_15;
    }
    goto LABEL_7;
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  if (*(unsigned char *)(a1 + 32))
  {
LABEL_7:
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4)
    {
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v6 = *(void **)(a1 + 8);
      if (v5 != v4)
      {
        do
        {
          uint64_t v7 = v5 - 32;
          uint64_t v8 = *(unsigned int *)(v5 - 8);
          if (v8 != -1) {
            ((void (*)(char *, uint64_t))off_1EDCA6108[v8])(&v10, v5 - 32);
          }
          *(_DWORD *)(v5 - 8) = -1;
          v5 -= 32;
        }
        while (v7 != v4);
        uint64_t v6 = *(void **)(a1 + 8);
      }
      *(void *)(a1 + 16) = v4;
      operator delete(v6);
    }
  }
LABEL_15:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::vector<AMSCore::Any>,void>::Promise *,AMSCore::Task<std::vector<AMSCore::Any>,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::vector<AMSCore::Any>,void>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINSt3__16vectorINS_3AnyENS1_9allocatorIS3_EEEEvE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINSt3__16vectorINS_3AnyENS1_9allocatorIS3_EEEEvE7Promise17get_return_obje"
                                "ctEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINSt3__16vectorINS_3AnyENS1_9allocatorIS3_EEEEvE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINSt3__16vectorINS_3AnyENS1_9allocatorIS3_EEEEvE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::vector<AMSCore::Any>,void>::Promise *,AMSCore::Task<std::vector<AMSCore::Any>,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::vector<AMSCore::Any>,void>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 40), 2uLL)) {
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::Task<std::vector<AMSCore::Any>,void>::Promise *,AMSCore::Task<std::vector<AMSCore::Any>,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::vector<AMSCore::Any>,void>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void AMSCore::MetricsFlushTask::perform(long long *a1, uint64_t *a2, uint64_t a3, long long *a4, long long *a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long v5 = *a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v6 = *a2;
  v19[0] = a2[1];
  *(void *)((char *)v19 + 7) = *(uint64_t *)((char *)a2 + 15);
  char v7 = *((unsigned char *)a2 + 23);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  long long v14 = v5;
  *(_OWORD *)uint64_t v15 = *(_OWORD *)a3;
  long long v8 = *(_OWORD *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  long long v12 = *a4;
  long long v13 = v8;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  long long v11 = *a5;
  *(void *)a5 = 0;
  *((void *)a5 + 1) = 0;
  v17[0] = &unk_1EDC829A0;
  v17[1] = AMSCore::UploadMetricsEventTask::performMultiple;
  uint64_t v18 = v17;
  uint64_t v9 = operator new(0x420uLL);
  char v10 = v9;
  void *v9 = AMSCore::MetricsFlushTask::internal::perform;
  v9[1] = AMSCore::MetricsFlushTask::internal::perform;
  v9[91] = v6;
  v9[92] = v19[0];
  *(void *)((char *)v9 + 743) = *(void *)((char *)v19 + 7);
  *((unsigned char *)v9 + 751) = v7;
  v19[0] = 0;
  *(void *)((char *)v19 + 7) = 0;
  *((_OWORD *)v9 + 54) = v14;
  *((_OWORD *)v9 + 55) = *(_OWORD *)v15;
  *((_OWORD *)v9 + 56) = v13;
  *((_OWORD *)v9 + 57) = v12;
  *((_OWORD *)v9 + 58) = v11;
  if (v18)
  {
    if (v18 == v17)
    {
      v9[84] = v9 + 81;
      (*(void (**)(void *))(v17[0] + 24))(v17);
    }
    else
    {
      v9[84] = v18;
      uint64_t v18 = 0;
    }
  }
  else
  {
    v9[84] = 0;
  }
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *((unsigned char *)v10 + 24) = 0;
  *((unsigned char *)v10 + 104) = 0;
  v10[14] = 0;
  v10[18] = 0;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v16, (uint64_t)(v10 + 2));
}

void sub_18DB20B78(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *_ZNKSt3__110__function6__funcIPDoFN7AMSCore4TaskINS2_22UploadMetricsEventTask19UploadMetricsResultENS2_5ErrorEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorINS2_3AnyENSB_ISF_EEEENS2_10BagServiceENS_7variantIJNS_9monostateEyEEENS_10shared_ptrINS2_9StopTokenEEENSM_IKNS2_28MetricsEventModifierProviderEEEENSB_IST_EEFS7_SD_SH_SI_SL_SO_SR_EE11target_typeEv()
{
  return &_ZTIPDoFN7AMSCore4TaskINS_22UploadMetricsEventTask19UploadMetricsResultENS_5ErrorEEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS5_6vectorINS_3AnyENS9_ISD_EEEENS_10BagServiceENS5_7variantIJNS5_9monostateEyEEENS5_10shared_ptrINS_9StopTokenEEENSK_IKNS_28MetricsEventModifierProviderEEEE;
}

uint64_t _ZNKSt3__110__function6__funcIPDoFN7AMSCore4TaskINS2_22UploadMetricsEventTask19UploadMetricsResultENS2_5ErrorEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorINS2_3AnyENSB_ISF_EEEENS2_10BagServiceENS_7variantIJNS_9monostateEyEEENS_10shared_ptrINS2_9StopTokenEEENSM_IKNS2_28MetricsEventModifierProviderEEEENSB_IST_EEFS7_SD_SH_SI_SL_SO_SR_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "PDoFN7AMSCore4TaskINS_22UploadMetricsEventTask19UploadMetricsResultENS_5ErrorEEENSt3__112basic_stri"
                     "ngIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS5_6vectorINS_3AnyENS9_ISD_EEEENS_10BagServiceENS5_7v"
                     "ariantIJNS5_9monostateEyEEENS5_10shared_ptrINS_9StopTokenEEENSK_IKNS_28MetricsEventModifierProviderEEEE"
    || ((v3 & (unint64_t)"PDoFN7AMSCore4TaskINS_22UploadMetricsEventTask19UploadMetricsResultENS_5ErrorEEENSt3__11"
                                "2basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS5_6vectorINS_3AnyENS9_ISD_EEEE"
                                "NS_10BagServiceENS5_7variantIJNS5_9monostateEyEEENS5_10shared_ptrINS_9StopTokenEEENSK_IK"
                                "NS_28MetricsEventModifierProviderEEEE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "PDoFN7AMSCore4TaskINS_22UploadMetricsEventTask19UploadMetricsResultENS_5ErrorEEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS5_6vectorINS_3AnyENS9_ISD_EEEENS_10BagServiceENS5_7variantIJNS5_9monostateEyEEENS5_10shared_ptrINS_9StopTokenEEENSK_IKNS_28MetricsEventModifierProviderEEEE")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PDoFN7AMSCore4TaskINS_22UploadMetricsEventTask19UploadMetricsResultENS_5ErrorEEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS5_6vectorINS_3AnyENS9_ISD_EEEENS_10BagServiceENS5_7variantIJNS5_9monostateEyEEENS5_10shared_ptrINS_9StopTokenEEENSK_IKNS_28MetricsEventModifierProviderEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIPDoFN7AMSCore4TaskINS2_22UploadMetricsEventTask19UploadMetricsResultENS2_5ErrorEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorINS2_3AnyENSB_ISF_EEEENS2_10BagServiceENS_7variantIJNS_9monostateEyEEENS_10shared_ptrINS2_9StopTokenEEENSM_IKNS2_28MetricsEventModifierProviderEEEENSB_IST_EEFS7_SD_SH_SI_SL_SO_SR_EEclEOSD_OSH_OSI_OSL_OSO_OSR_(uint64_t a1, long long *a2, long long *a3, long long *a4, uint64_t *a5, long long *a6, long long *a7)
{
  char v7 = *(void (**)(long long *, void **, long long *, uint64_t, uint64_t, long long *, long long *))(a1 + 8);
  long long v28 = *a2;
  uint64_t v29 = *((void *)a2 + 2);
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  long long v8 = *a3;
  uint64_t v27 = *((void *)a3 + 2);
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  long long v10 = *a4;
  long long v9 = a4[1];
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  long long v25 = v9;
  *(_OWORD *)long long __p = v8;
  *((void *)a4 + 2) = 0;
  *((void *)a4 + 3) = 0;
  uint64_t v11 = *a5;
  uint64_t v12 = a5[1];
  long long v23 = *a6;
  long long v24 = v10;
  *(void *)a6 = 0;
  *((void *)a6 + 1) = 0;
  long long v22 = *a7;
  *(void *)a7 = 0;
  *((void *)a7 + 1) = 0;
  v7(&v28, __p, &v24, v11, v12, &v23, &v22);
  long long v13 = (std::__shared_weak_count *)*((void *)&v22 + 1);
  if (*((void *)&v22 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v22 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  long long v14 = (std::__shared_weak_count *)*((void *)&v23 + 1);
  if (*((void *)&v23 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v23 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)*((void *)&v25 + 1);
  if (*((void *)&v25 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v25 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  std::system_error v16 = (std::__shared_weak_count *)*((void *)&v24 + 1);
  if (*((void *)&v24 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    uint64_t v17 = (char *)__p[0];
    if (!__p[0]) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v17 = (char *)__p[0];
    if (!__p[0]) {
      goto LABEL_20;
    }
  }
  uint64_t v18 = (char *)__p[1];
  char v19 = v17;
  if (__p[1] != v17)
  {
    do
    {
      uint64_t v20 = v18 - 32;
      uint64_t v21 = *((unsigned int *)v18 - 2);
      if (v21 != -1) {
        ((void (*)(char *, char *))off_1EDCA6108[v21])(&v30, v18 - 32);
      }
      *((_DWORD *)v18 - 2) = -1;
      v18 -= 32;
    }
    while (v20 != v17);
    char v19 = (char *)__p[0];
  }
  __p[1] = v17;
  operator delete(v19);
LABEL_20:
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)v28);
  }
}

uint64_t _ZNKSt3__110__function6__funcIPDoFN7AMSCore4TaskINS2_22UploadMetricsEventTask19UploadMetricsResultENS2_5ErrorEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorINS2_3AnyENSB_ISF_EEEENS2_10BagServiceENS_7variantIJNS_9monostateEyEEENS_10shared_ptrINS2_9StopTokenEEENSM_IKNS2_28MetricsEventModifierProviderEEEENSB_IST_EEFS7_SD_SH_SI_SL_SO_SR_EE7__cloneEPNS0_6__baseISV_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDC829A0;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIPDoFN7AMSCore4TaskINS2_22UploadMetricsEventTask19UploadMetricsResultENS2_5ErrorEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorINS2_3AnyENSB_ISF_EEEENS2_10BagServiceENS_7variantIJNS_9monostateEyEEENS_10shared_ptrINS2_9StopTokenEEENSM_IKNS2_28MetricsEventModifierProviderEEEENSB_IST_EEFS7_SD_SH_SI_SL_SO_SR_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EDC829A0;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIPDoFN7AMSCore4TaskINS2_22UploadMetricsEventTask19UploadMetricsResultENS2_5ErrorEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorINS2_3AnyENSB_ISF_EEEENS2_10BagServiceENS_7variantIJNS_9monostateEyEEENS_10shared_ptrINS2_9StopTokenEEENSM_IKNS2_28MetricsEventModifierProviderEEEENSB_IST_EEFS7_SD_SH_SI_SL_SO_SR_EED0Ev()
{
}

void AMSCore::MetricsIdentifierProvider::~MetricsIdentifierProvider(AMSCore::MetricsIdentifierProvider *this)
{
  uint64_t v2 = (AMSCore::MetricsIdentifierDataAccessObject *)*((void *)this + 1);
  *(void *)this = &unk_1EDC826D8;
  *((void *)this + 1) = 0;
  if (v2)
  {
    AMSCore::MetricsIdentifierDataAccessObject::~MetricsIdentifierDataAccessObject(v2);
    MEMORY[0x192FA4080]();
  }
  JUMPOUT(0x192FA4080);
}

{
  AMSCore::MetricsIdentifierDataAccessObject *v2;

  uint64_t v2 = (AMSCore::MetricsIdentifierDataAccessObject *)*((void *)this + 1);
  *(void *)this = &unk_1EDC826D8;
  *((void *)this + 1) = 0;
  if (v2)
  {
    AMSCore::MetricsIdentifierDataAccessObject::~MetricsIdentifierDataAccessObject(v2);
    MEMORY[0x192FA4080]();
  }
}

void AMSCore::MetricsIdentifierDataAccessObject::~MetricsIdentifierDataAccessObject(AMSCore::MetricsIdentifierDataAccessObject *this)
{
  uint64_t v2 = (char *)this + 336;
  uint64_t v3 = (char *)*((void *)this + 45);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = (char *)this + 272;
  long long v5 = (AMSCore::MetricsIdentifierDataAccessObject *)*((void *)this + 41);
  if (v5 == (AMSCore::MetricsIdentifierDataAccessObject *)((char *)this + 304))
  {
    (*(void (**)(char *))(*((void *)this + 38) + 32))((char *)this + 304);
  }
  else if (v5)
  {
    (*(void (**)(AMSCore::MetricsIdentifierDataAccessObject *))(*(void *)v5 + 40))(v5);
  }
  uint64_t v6 = (char *)*((void *)this + 37);
  if (v6 == v4)
  {
    (*(void (**)(char *))(*(void *)v4 + 32))((char *)this + 272);
  }
  else if (v6)
  {
    (*(void (**)(char *))(*(void *)v6 + 40))(v6);
  }
  char v7 = (AMSCore::MetricsIdentifierDataAccessObject *)*((void *)this + 33);
  if (v7 == (AMSCore::MetricsIdentifierDataAccessObject *)((char *)this + 240))
  {
    (*(void (**)(char *))(*((void *)this + 30) + 32))((char *)this + 240);
  }
  else if (v7)
  {
    (*(void (**)(AMSCore::MetricsIdentifierDataAccessObject *))(*(void *)v7 + 40))(v7);
  }
  long long v8 = (AMSCore::MetricsIdentifierDataAccessObject *)*((void *)this + 29);
  if (v8 == (AMSCore::MetricsIdentifierDataAccessObject *)((char *)this + 208))
  {
    (*(void (**)(char *))(*((void *)this + 26) + 32))((char *)this + 208);
  }
  else if (v8)
  {
    (*(void (**)(AMSCore::MetricsIdentifierDataAccessObject *))(*(void *)v8 + 40))(v8);
  }
  long long v9 = (AMSCore::MetricsIdentifierDataAccessObject *)*((void *)this + 25);
  if (v9 == (AMSCore::MetricsIdentifierDataAccessObject *)((char *)this + 176))
  {
    (*(void (**)(char *))(*((void *)this + 22) + 32))((char *)this + 176);
  }
  else if (v9)
  {
    (*(void (**)(AMSCore::MetricsIdentifierDataAccessObject *))(*(void *)v9 + 40))(v9);
  }
  long long v10 = (AMSCore::MetricsIdentifierDataAccessObject *)*((void *)this + 21);
  if (v10 == (AMSCore::MetricsIdentifierDataAccessObject *)((char *)this + 144))
  {
    (*(void (**)(char *))(*((void *)this + 18) + 32))((char *)this + 144);
  }
  else if (v10)
  {
    (*(void (**)(AMSCore::MetricsIdentifierDataAccessObject *))(*(void *)v10 + 40))(v10);
  }
  uint64_t v11 = (AMSCore::MetricsIdentifierDataAccessObject *)*((void *)this + 17);
  if (v11 == (AMSCore::MetricsIdentifierDataAccessObject *)((char *)this + 112))
  {
    (*(void (**)(char *))(*((void *)this + 14) + 32))((char *)this + 112);
  }
  else if (v11)
  {
    (*(void (**)(AMSCore::MetricsIdentifierDataAccessObject *))(*(void *)v11 + 40))(v11);
  }
  uint64_t v12 = (AMSCore::MetricsIdentifierDataAccessObject *)*((void *)this + 13);
  if (v12 == (AMSCore::MetricsIdentifierDataAccessObject *)((char *)this + 80))
  {
    (*(void (**)(char *))(*((void *)this + 10) + 32))((char *)this + 80);
  }
  else if (v12)
  {
    (*(void (**)(AMSCore::MetricsIdentifierDataAccessObject *))(*(void *)v12 + 40))(v12);
  }
  long long v13 = (AMSCore::MetricsIdentifierDataAccessObject *)*((void *)this + 9);
  if (v13 == (AMSCore::MetricsIdentifierDataAccessObject *)((char *)this + 48))
  {
    (*(void (**)(char *))(*((void *)this + 6) + 32))((char *)this + 48);
  }
  else if (v13)
  {
    (*(void (**)(AMSCore::MetricsIdentifierDataAccessObject *))(*(void *)v13 + 40))(v13);
  }
  uint64_t v14 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  std::system_error v16 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    uint64_t v17 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v17) {
      return;
    }
  }
  else
  {
    uint64_t v17 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v17) {
      return;
    }
  }
  if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
}

AMSCore::MetricsIdentifierDataAccessObject *AMSCore::MetricsIdentifierProvider::makeDefault(AMSCore::MetricsIdentifierProvider *this)
{
  uint64_t v162 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)operator new(0x20uLL);
  v2->__shared_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83B78;
  v2->__shared_weak_owners_ = 0;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC81C28;
  AMSCore::ServiceProvider<AMSCore::StructuredData::IStructuredDataProvider>::getDefault(&v56);
  uint64_t v3 = v56;
  long long v55 = v2;
  if (v148)
  {
    (*((void (**)(std::runtime_error *__return_ptr))v142.~runtime_error + 3))(&v135);
    if (!v141)
    {
      std::runtime_error::runtime_error(&v149, &v135);
      long long v150 = v136;
      v149.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      long long v151 = v137;
      uint64_t v152 = (unsigned int *)v138;
      uint64_t v153 = v139;
      if (v139)
      {
        *(void *)(v138 + 16) = &v152;
        unint64_t v137 = (unsigned int **)&v138;
        uint64_t v138 = 0;
        uint64_t v139 = 0;
      }
      else
      {
        long long v151 = &v152;
      }
      long long v154 = v140;
      long long v140 = 0uLL;
      char v155 = 1;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v128, (uint64_t)&v149);
      std::runtime_error::runtime_error(&v58, &v128);
      long long v59 = v129;
      long long v25 = (unsigned int *)v131;
      v58.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      unint64_t v60 = v130;
      uint64_t v61 = v131;
      uint64_t v62 = v132;
      if (v132)
      {
        *(void *)(v131 + 16) = &v61;
        uint64_t v130 = (unsigned int **)&v131;
        uint64_t v131 = 0;
        uint64_t v132 = 0;
        long long v25 = 0;
      }
      else
      {
        unint64_t v60 = (unsigned int **)&v61;
      }
      long long v63 = v133;
      long long v133 = 0uLL;
      char v64 = 0;
      v128.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v130, v25);
      MEMORY[0x192FA3C30](&v128);
      if (v155)
      {
        v149.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        uint64_t v26 = (std::__shared_weak_count *)*((void *)&v154 + 1);
        if (*((void *)&v154 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v154 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v151, v152);
        MEMORY[0x192FA3C30](&v149);
        if (v141) {
          goto LABEL_243;
        }
        goto LABEL_248;
      }
      goto LABEL_242;
    }
    if (!v134)
    {
      std::runtime_error::runtime_error(&v149, &v128);
      long long v150 = v129;
      v149.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      long long v151 = v130;
      uint64_t v152 = (unsigned int *)v131;
      uint64_t v153 = v132;
      if (v132)
      {
        *(void *)(v131 + 16) = &v152;
        uint64_t v130 = (unsigned int **)&v131;
        uint64_t v131 = 0;
        uint64_t v132 = 0;
      }
      else
      {
        long long v151 = &v152;
      }
      long long v154 = v133;
      long long v133 = 0uLL;
      char v155 = 1;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v121, (uint64_t)&v149);
      std::runtime_error::runtime_error(&v58, &v121);
      long long v59 = v122;
      uint64_t v27 = (unsigned int *)v124;
      v58.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      unint64_t v60 = v123;
      uint64_t v61 = v124;
      uint64_t v62 = v125;
      if (v125)
      {
        *(void *)(v124 + 16) = &v61;
        uint64_t v123 = (unsigned int **)&v124;
        uint64_t v124 = 0;
        uint64_t v125 = 0;
        uint64_t v27 = 0;
      }
      else
      {
        unint64_t v60 = (unsigned int **)&v61;
      }
      long long v63 = v126;
      long long v126 = 0uLL;
      char v64 = 0;
      v121.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v123, v27);
      MEMORY[0x192FA3C30](&v121);
      if (v155)
      {
        v149.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        long long v28 = (std::__shared_weak_count *)*((void *)&v154 + 1);
        if (*((void *)&v154 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v154 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v151, v152);
        MEMORY[0x192FA3C30](&v149);
      }
      goto LABEL_239;
    }
    (*((void (**)(std::runtime_error *__return_ptr))v128.~runtime_error + 3))(&v121);
    if (!v127)
    {
      std::runtime_error::runtime_error(&v149, &v121);
      long long v150 = v122;
      v149.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      long long v151 = v123;
      uint64_t v152 = (unsigned int *)v124;
      uint64_t v153 = v125;
      if (v125)
      {
        *(void *)(v124 + 16) = &v152;
        uint64_t v123 = (unsigned int **)&v124;
        uint64_t v124 = 0;
        uint64_t v125 = 0;
      }
      else
      {
        long long v151 = &v152;
      }
      long long v154 = v126;
      long long v126 = 0uLL;
      char v155 = 1;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v114, (uint64_t)&v149);
      std::runtime_error::runtime_error(&v58, &v114);
      long long v59 = v115;
      uint64_t v29 = (unsigned int *)v117;
      v58.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      unint64_t v60 = v116;
      uint64_t v61 = v117;
      uint64_t v62 = v118;
      if (v118)
      {
        *(void *)(v117 + 16) = &v61;
        std::error_code v116 = (unsigned int **)&v117;
        uint64_t v117 = 0;
        uint64_t v118 = 0;
        uint64_t v29 = 0;
      }
      else
      {
        unint64_t v60 = (unsigned int **)&v61;
      }
      long long v63 = v119;
      long long v119 = 0uLL;
      char v64 = 0;
      v114.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v116, v29);
      MEMORY[0x192FA3C30](&v114);
      if (v155)
      {
        v149.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        char v30 = (std::__shared_weak_count *)*((void *)&v154 + 1);
        if (*((void *)&v154 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v154 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v151, v152);
        MEMORY[0x192FA3C30](&v149);
        if (!v127) {
          goto LABEL_238;
        }
        goto LABEL_232;
      }
LABEL_231:
      if (!v127)
      {
LABEL_238:
        ((void (*)(std::runtime_error *))v121.~runtime_error)(&v121);
LABEL_239:
        uint64_t v47 = v128.__vftable;
        if (!v134)
        {
          ((void (*)(std::runtime_error *))v128.~runtime_error)(&v128);
          if (v141)
          {
LABEL_243:
            if (*((std::runtime_error **)&v136 + 1) == &v135)
            {
              ((void (*)(std::runtime_error *))v135.__vftable[1].~runtime_error_0)(&v135);
            }
            else if (*((void *)&v136 + 1))
            {
              (*(void (**)(void))(**((void **)&v136 + 1) + 40))();
            }
            goto LABEL_249;
          }
LABEL_248:
          ((void (*)(std::runtime_error *))v135.~runtime_error)(&v135);
          goto LABEL_249;
        }
        v128.__vftable = 0;
        if (v47) {
          (*((void (**)(std::runtime_error_vtbl *))v47->~runtime_error + 1))(v47);
        }
LABEL_242:
        if (v141) {
          goto LABEL_243;
        }
        goto LABEL_248;
      }
LABEL_232:
      if (*((std::runtime_error **)&v122 + 1) == &v121)
      {
        ((void (*)(std::runtime_error *))v121.__vftable[1].~runtime_error_0)(&v121);
      }
      else if (*((void *)&v122 + 1))
      {
        (*(void (**)(void))(**((void **)&v122 + 1) + 40))();
      }
      goto LABEL_239;
    }
    if (v134)
    {
      uint64_t v4 = v128.__vftable;
      long long v5 = (char *)operator new(0x18uLL);
      *(void *)&long long v150 = v5 + 24;
      *(_OWORD *)long long v5 = xmmword_1E559E0C8;
      *(_DWORD *)(v5 + 15) = 1280;
      v149.__vftable = (std::runtime_error_vtbl *)v5;
      v149.__imp_.__imp_ = v5 + 24;
      uint64_t v6 = (char *)operator new(0x18uLL);
      *(void *)&long long v108 = v6 + 24;
      *(_OWORD *)uint64_t v6 = xmmword_1E559E0B0;
      *((_WORD *)v6 + 8) = 259;
      __p.__vftable = (std::runtime_error_vtbl *)v6;
      __p.__imp_.__imp_ = v6 + 24;
      (*((void (**)(std::runtime_error *__return_ptr, std::runtime_error_vtbl *, std::runtime_error *, std::runtime_error *))v4->~runtime_error
       + 7))(&v114, v4, &v149, &__p);
      if (__p.__vftable)
      {
        __p.__imp_.__imp_ = (const char *)__p.__vftable;
        operator delete(__p.__vftable);
      }
      if (v149.__vftable)
      {
        v149.__imp_.__imp_ = (const char *)v149.__vftable;
        operator delete(v149.__vftable);
      }
      if (!v120)
      {
        std::runtime_error::runtime_error(&v149, &v114);
        long long v150 = v115;
        v149.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        long long v151 = v116;
        uint64_t v152 = (unsigned int *)v117;
        uint64_t v153 = v118;
        if (v118)
        {
          *(void *)(v117 + 16) = &v152;
          std::error_code v116 = (unsigned int **)&v117;
          uint64_t v117 = 0;
          uint64_t v118 = 0;
        }
        else
        {
          long long v151 = &v152;
        }
        long long v154 = v119;
        long long v119 = 0uLL;
        char v155 = 1;
        AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&__p, (uint64_t)&v149);
        std::runtime_error::runtime_error(&v58, &__p);
        long long v59 = v108;
        uint64_t v31 = (unsigned int *)v110;
        v58.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        unint64_t v60 = v109;
        uint64_t v61 = v110;
        uint64_t v62 = v111;
        if (v111)
        {
          *(void *)(v110 + 16) = &v61;
          unint64_t v109 = (unsigned int **)&v110;
          uint64_t v110 = 0;
          uint64_t v111 = 0;
          uint64_t v31 = 0;
        }
        else
        {
          unint64_t v60 = (unsigned int **)&v61;
        }
        long long v63 = v112;
        long long v112 = 0uLL;
        char v64 = 0;
        __p.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v109, v31);
        MEMORY[0x192FA3C30](&__p);
        if (v155)
        {
          v149.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
          uint64_t v32 = (std::__shared_weak_count *)*((void *)&v154 + 1);
          if (*((void *)&v154 + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v154 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v151, v152);
          MEMORY[0x192FA3C30](&v149);
          if (!v120)
          {
LABEL_237:
            ((void (*)(std::runtime_error *))v114.~runtime_error)(&v114);
            if (!v127) {
              goto LABEL_238;
            }
            goto LABEL_232;
          }
          goto LABEL_226;
        }
        goto LABEL_225;
      }
      if (v148)
      {
        char v7 = v142.__vftable;
        long long v8 = (char *)operator new(0x48uLL);
        *(void *)&long long v150 = v8 + 72;
        *((_OWORD *)v8 + 2) = xmmword_1E559DF68;
        *((_OWORD *)v8 + 3) = *(_OWORD *)&off_1E559DF78;
        *(_DWORD *)(v8 + 63) = 83886848;
        *(_OWORD *)long long v8 = xmmword_1E559DF48;
        *((_OWORD *)v8 + 1) = unk_1E559DF58;
        v149.__vftable = (std::runtime_error_vtbl *)v8;
        v149.__imp_.__imp_ = v8 + 72;
        long long v9 = (char *)operator new(0x60uLL);
        *(void *)&long long v101 = v9 + 96;
        *((_OWORD *)v9 + 2) = xmmword_1E559E028;
        *((_OWORD *)v9 + 3) = *(_OWORD *)&off_1E559E038;
        *((_OWORD *)v9 + 4) = xmmword_1E559E048;
        *(_OWORD *)(v9 + 74) = *(long long *)((char *)&xmmword_1E559E048 + 10);
        *(_OWORD *)long long v9 = xmmword_1E559E008;
        *((_OWORD *)v9 + 1) = unk_1E559E018;
        v100.__vftable = (std::runtime_error_vtbl *)v9;
        v100.__imp_.__imp_ = v9 + 96;
        (*((void (**)(std::runtime_error *__return_ptr, std::runtime_error_vtbl *, std::runtime_error *, std::runtime_error *))v7->~runtime_error
         + 6))(&__p, v7, &v149, &v100);
        if (v100.__vftable)
        {
          v100.__imp_.__imp_ = (const char *)v100.__vftable;
          operator delete(v100.__vftable);
        }
        if (v149.__vftable)
        {
          v149.__imp_.__imp_ = (const char *)v149.__vftable;
          operator delete(v149.__vftable);
        }
        if (!v113)
        {
          std::runtime_error::runtime_error(&v149, &__p);
          long long v150 = v108;
          v149.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
          long long v151 = v109;
          uint64_t v152 = (unsigned int *)v110;
          uint64_t v153 = v111;
          if (v111)
          {
            *(void *)(v110 + 16) = &v152;
            unint64_t v109 = (unsigned int **)&v110;
            uint64_t v110 = 0;
            uint64_t v111 = 0;
          }
          else
          {
            long long v151 = &v152;
          }
          long long v154 = v112;
          long long v112 = 0uLL;
          char v155 = 1;
          AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v100, (uint64_t)&v149);
          std::runtime_error::runtime_error(&v58, &v100);
          long long v59 = v101;
          uint64_t v33 = (unsigned int *)v103;
          v58.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
          unint64_t v60 = v102;
          uint64_t v61 = v103;
          uint64_t v62 = v104;
          if (v104)
          {
            *(void *)(v103 + 16) = &v61;
            long long v102 = (unsigned int **)&v103;
            uint64_t v103 = 0;
            uint64_t v104 = 0;
            uint64_t v33 = 0;
          }
          else
          {
            unint64_t v60 = (unsigned int **)&v61;
          }
          long long v63 = v105;
          long long v105 = 0uLL;
          char v64 = 0;
          v100.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v102, v33);
          MEMORY[0x192FA3C30](&v100);
          if (v155)
          {
            v149.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
            uint64_t v34 = (std::__shared_weak_count *)*((void *)&v154 + 1);
            if (*((void *)&v154 + 1)
              && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v154 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v151, v152);
            MEMORY[0x192FA3C30](&v149);
          }
LABEL_219:
          if (v113)
          {
            if (*((std::runtime_error **)&v108 + 1) == &__p)
            {
              ((void (*)(std::runtime_error *))__p.__vftable[1].~runtime_error_0)(&__p);
              if (!v120) {
                goto LABEL_237;
              }
              goto LABEL_226;
            }
            if (*((void *)&v108 + 1))
            {
              (*(void (**)(void))(**((void **)&v108 + 1) + 40))();
              if (!v120) {
                goto LABEL_237;
              }
              goto LABEL_226;
            }
          }
          else
          {
            ((void (*)(std::runtime_error *))__p.~runtime_error)(&__p);
          }
LABEL_225:
          if (!v120) {
            goto LABEL_237;
          }
LABEL_226:
          if (*((std::runtime_error **)&v115 + 1) == &v114)
          {
            ((void (*)(std::runtime_error *))v114.__vftable[1].~runtime_error_0)(&v114);
          }
          else if (*((void *)&v115 + 1))
          {
            (*(void (**)(void))(**((void **)&v115 + 1) + 40))();
            if (!v127) {
              goto LABEL_238;
            }
            goto LABEL_232;
          }
          goto LABEL_231;
        }
        if (v148)
        {
          long long v10 = v142.__vftable;
          v149.__imp_.__imp_ = 0;
          v149.__vftable = 0;
          *(void *)&long long v150 = 0;
          uint64_t v11 = (char *)operator new(0x30uLL);
          *(void *)&long long v150 = v11 + 48;
          *(_OWORD *)uint64_t v11 = xmmword_1E559DF90;
          *((_OWORD *)v11 + 1) = unk_1E559DFA0;
          *(_OWORD *)(v11 + 27) = unk_1E559DFAB;
          v149.__vftable = (std::runtime_error_vtbl *)v11;
          v149.__imp_.__imp_ = v11 + 48;
          (*((void (**)(std::runtime_error *__return_ptr, std::runtime_error_vtbl *, std::runtime_error *))v10->~runtime_error
           + 8))(&v100, v10, &v149);
          if (v149.__vftable)
          {
            v149.__imp_.__imp_ = (const char *)v149.__vftable;
            operator delete(v149.__vftable);
          }
          if (!v106)
          {
            std::runtime_error::runtime_error(&v149, &v100);
            long long v150 = v101;
            v149.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
            long long v151 = v102;
            uint64_t v152 = (unsigned int *)v103;
            uint64_t v153 = v104;
            if (v104)
            {
              *(void *)(v103 + 16) = &v152;
              long long v102 = (unsigned int **)&v103;
              uint64_t v103 = 0;
              uint64_t v104 = 0;
            }
            else
            {
              long long v151 = &v152;
            }
            long long v154 = v105;
            long long v105 = 0uLL;
            char v155 = 1;
            AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v93, (uint64_t)&v149);
            std::runtime_error::runtime_error(&v58, &v93);
            long long v59 = v94;
            uint64_t v35 = (unsigned int *)v96;
            v58.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
            unint64_t v60 = v95;
            uint64_t v61 = v96;
            uint64_t v62 = v97;
            if (v97)
            {
              *(void *)(v96 + 16) = &v61;
              unint64_t v95 = (unsigned int **)&v96;
              uint64_t v96 = 0;
              uint64_t v97 = 0;
              uint64_t v35 = 0;
            }
            else
            {
              unint64_t v60 = (unsigned int **)&v61;
            }
            long long v63 = v98;
            long long v98 = 0uLL;
            char v64 = 0;
            v93.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v95, v35);
            MEMORY[0x192FA3C30](&v93);
            if (v155)
            {
              v149.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
              uint64_t v36 = (std::__shared_weak_count *)*((void *)&v154 + 1);
              if (*((void *)&v154 + 1)
                && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v154 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                std::__shared_weak_count::__release_weak(v36);
              }
              std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v151, v152);
              MEMORY[0x192FA3C30](&v149);
            }
            goto LABEL_213;
          }
          if (v148)
          {
            v149.__imp_.__imp_ = 0;
            v149.__vftable = 0;
            *(void *)&long long v150 = 0;
            (*((void (**)(std::runtime_error *__return_ptr))v142.~runtime_error + 10))(&v93);
            if (v149.__vftable)
            {
              v149.__imp_.__imp_ = (const char *)v149.__vftable;
              operator delete(v149.__vftable);
            }
            if (!v99)
            {
              std::runtime_error::runtime_error(&v149, &v93);
              long long v150 = v94;
              v149.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
              long long v151 = v95;
              uint64_t v152 = (unsigned int *)v96;
              uint64_t v153 = v97;
              if (v97)
              {
                *(void *)(v96 + 16) = &v152;
                unint64_t v95 = (unsigned int **)&v96;
                uint64_t v96 = 0;
                uint64_t v97 = 0;
              }
              else
              {
                long long v151 = &v152;
              }
              long long v154 = v98;
              long long v98 = 0uLL;
              char v155 = 1;
              AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v86, (uint64_t)&v149);
              std::runtime_error::runtime_error(&v58, &v86);
              long long v59 = v87;
              uint64_t v37 = (unsigned int *)v89;
              v58.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
              unint64_t v60 = v88;
              uint64_t v61 = v89;
              uint64_t v62 = v90;
              if (v90)
              {
                *(void *)(v89 + 16) = &v61;
                uint64_t v88 = (unsigned int **)&v89;
                uint64_t v89 = 0;
                uint64_t v90 = 0;
                uint64_t v37 = 0;
              }
              else
              {
                unint64_t v60 = (unsigned int **)&v61;
              }
              long long v63 = v91;
              long long v91 = 0uLL;
              char v64 = 0;
              v86.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
              std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v88, v37);
              MEMORY[0x192FA3C30](&v86);
              if (v155)
              {
                v149.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
                uint64_t v38 = (std::__shared_weak_count *)*((void *)&v154 + 1);
                if (*((void *)&v154 + 1)
                  && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v154 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                  std::__shared_weak_count::__release_weak(v38);
                }
                std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v151, v152);
                MEMORY[0x192FA3C30](&v149);
              }
              goto LABEL_207;
            }
            if (v148)
            {
              uint64_t v12 = v142.__vftable;
              v149.__imp_.__imp_ = 0;
              v149.__vftable = 0;
              *(void *)&long long v150 = 0;
              long long v13 = (char *)operator new(0x18uLL);
              *(void *)&long long v150 = v13 + 24;
              *(_OWORD *)long long v13 = xmmword_1E559DFC0;
              *(_DWORD *)(v13 + 15) = 67175168;
              v149.__vftable = (std::runtime_error_vtbl *)v13;
              v149.__imp_.__imp_ = v13 + 24;
              (*((void (**)(std::runtime_error *__return_ptr, std::runtime_error_vtbl *, std::runtime_error *))v12->~runtime_error
               + 10))(&v86, v12, &v149);
              if (v149.__vftable)
              {
                v149.__imp_.__imp_ = (const char *)v149.__vftable;
                operator delete(v149.__vftable);
              }
              if (!v92)
              {
                std::runtime_error::runtime_error(&v149, &v86);
                long long v150 = v87;
                v149.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
                long long v151 = v88;
                uint64_t v152 = (unsigned int *)v89;
                uint64_t v153 = v90;
                if (v90)
                {
                  *(void *)(v89 + 16) = &v152;
                  uint64_t v88 = (unsigned int **)&v89;
                  uint64_t v89 = 0;
                  uint64_t v90 = 0;
                }
                else
                {
                  long long v151 = &v152;
                }
                long long v154 = v91;
                long long v91 = 0uLL;
                char v155 = 1;
                AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v79, (uint64_t)&v149);
                std::runtime_error::runtime_error(&v58, &v79);
                long long v59 = v80;
                uint64_t v39 = (unsigned int *)v82;
                v58.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
                unint64_t v60 = v81;
                uint64_t v61 = v82;
                uint64_t v62 = v83;
                if (v83)
                {
                  *(void *)(v82 + 16) = &v61;
                  long long v81 = (unsigned int **)&v82;
                  uint64_t v82 = 0;
                  uint64_t v83 = 0;
                  uint64_t v39 = 0;
                }
                else
                {
                  unint64_t v60 = (unsigned int **)&v61;
                }
                long long v63 = v84;
                long long v84 = 0uLL;
                char v64 = 0;
                v79.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
                std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v81, v39);
                MEMORY[0x192FA3C30](&v79);
                if (v155)
                {
                  v149.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
                  uint64_t v40 = (std::__shared_weak_count *)*((void *)&v154 + 1);
                  if (*((void *)&v154 + 1)
                    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v154 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                    std::__shared_weak_count::__release_weak(v40);
                  }
                  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v151, v152);
                  MEMORY[0x192FA3C30](&v149);
                }
                goto LABEL_201;
              }
              if (v148)
              {
                uint64_t v14 = v142.__vftable;
                v149.__imp_.__imp_ = 0;
                v149.__vftable = 0;
                *(void *)&long long v150 = 0;
                uint64_t v15 = (char *)operator new(0x30uLL);
                *(void *)&long long v150 = v15 + 48;
                *(_OWORD *)uint64_t v15 = xmmword_1E559DFD8;
                *((_OWORD *)v15 + 1) = unk_1E559DFE8;
                *(_OWORD *)(v15 + 27) = unk_1E559DFF3;
                v149.__vftable = (std::runtime_error_vtbl *)v15;
                v149.__imp_.__imp_ = v15 + 48;
                v72.__vftable = 0;
                v72.__imp_.__imp_ = 0;
                *(void *)&long long v73 = 0;
                std::system_error v16 = (char *)operator new(0x60uLL);
                v72.__imp_.__imp_ = v16 + 96;
                *(void *)&long long v73 = v16 + 96;
                *((_OWORD *)v16 + 2) = xmmword_1E559E028;
                *((_OWORD *)v16 + 3) = *(_OWORD *)&off_1E559E038;
                *((_OWORD *)v16 + 4) = xmmword_1E559E048;
                *(_OWORD *)(v16 + 74) = *(long long *)((char *)&xmmword_1E559E048 + 10);
                *(_OWORD *)std::system_error v16 = xmmword_1E559E008;
                *((_OWORD *)v16 + 1) = unk_1E559E018;
                v72.__vftable = (std::runtime_error_vtbl *)v16;
                (*((void (**)(std::runtime_error *__return_ptr, std::runtime_error_vtbl *, std::runtime_error *, std::runtime_error *))v14->~runtime_error
                 + 6))(&v79, v14, &v149, &v72);
                if (v72.__vftable)
                {
                  v72.__imp_.__imp_ = (const char *)v72.__vftable;
                  operator delete(v72.__vftable);
                }
                if (v149.__vftable)
                {
                  v149.__imp_.__imp_ = (const char *)v149.__vftable;
                  operator delete(v149.__vftable);
                }
                if (!v85)
                {
                  std::runtime_error::runtime_error(&v149, &v79);
                  long long v150 = v80;
                  v149.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
                  long long v151 = v81;
                  uint64_t v152 = (unsigned int *)v82;
                  uint64_t v153 = v83;
                  if (v83)
                  {
                    *(void *)(v82 + 16) = &v152;
                    long long v81 = (unsigned int **)&v82;
                    uint64_t v82 = 0;
                    uint64_t v83 = 0;
                  }
                  else
                  {
                    long long v151 = &v152;
                  }
                  long long v154 = v84;
                  long long v84 = 0uLL;
                  char v155 = 1;
                  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v72, (uint64_t)&v149);
                  std::runtime_error::runtime_error(&v58, &v72);
                  long long v59 = v73;
                  uint64_t v41 = (unsigned int *)v75;
                  v58.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
                  unint64_t v60 = v74;
                  uint64_t v61 = v75;
                  uint64_t v62 = v76;
                  if (v76)
                  {
                    *(void *)(v75 + 16) = &v61;
                    uint64_t v74 = (unsigned int **)&v75;
                    uint64_t v75 = 0;
                    uint64_t v76 = 0;
                    uint64_t v41 = 0;
                  }
                  else
                  {
                    unint64_t v60 = (unsigned int **)&v61;
                  }
                  long long v63 = v77;
                  long long v77 = 0uLL;
                  char v64 = 0;
                  v72.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
                  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v74, v41);
                  MEMORY[0x192FA3C30](&v72);
                  if (v155)
                  {
                    v149.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
                    uint64_t v42 = (std::__shared_weak_count *)*((void *)&v154 + 1);
                    if (*((void *)&v154 + 1)
                      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v154 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                      std::__shared_weak_count::__release_weak(v42);
                    }
                    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v151, v152);
                    MEMORY[0x192FA3C30](&v149);
                  }
                  goto LABEL_195;
                }
                if (v148)
                {
                  uint64_t v17 = v142.__vftable;
                  v149.__imp_.__imp_ = 0;
                  v149.__vftable = 0;
                  *(void *)&long long v150 = 0;
                  uint64_t v18 = (char *)operator new(0x48uLL);
                  *(void *)&long long v150 = v18 + 72;
                  *((_OWORD *)v18 + 2) = xmmword_1E559E088;
                  *((_OWORD *)v18 + 3) = *(_OWORD *)&off_1E559E098;
                  *((_WORD *)v18 + 32) = 259;
                  *(_OWORD *)uint64_t v18 = xmmword_1E559E068;
                  *((_OWORD *)v18 + 1) = unk_1E559E078;
                  v149.__vftable = (std::runtime_error_vtbl *)v18;
                  v149.__imp_.__imp_ = v18 + 72;
                  v65.__vftable = 0;
                  v65.__imp_.__imp_ = 0;
                  *(void *)&long long v66 = 0;
                  char v19 = (char *)operator new(0x18uLL);
                  v65.__imp_.__imp_ = v19 + 24;
                  *(void *)&long long v66 = v19 + 24;
                  *(_OWORD *)char v19 = xmmword_1E559E0C8;
                  *(_DWORD *)(v19 + 15) = 1280;
                  v65.__vftable = (std::runtime_error_vtbl *)v19;
                  (*((void (**)(std::runtime_error *__return_ptr, std::runtime_error_vtbl *, std::runtime_error *, std::runtime_error *))v17->~runtime_error
                   + 5))(&v72, v17, &v149, &v65);
                  if (v65.__vftable)
                  {
                    v65.__imp_.__imp_ = (const char *)v65.__vftable;
                    operator delete(v65.__vftable);
                  }
                  if (v149.__vftable)
                  {
                    v149.__imp_.__imp_ = (const char *)v149.__vftable;
                    operator delete(v149.__vftable);
                  }
                  if (!v78)
                  {
                    std::runtime_error::runtime_error(&v149, &v72);
                    long long v150 = v73;
                    v149.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
                    long long v151 = v74;
                    uint64_t v152 = (unsigned int *)v75;
                    uint64_t v153 = v76;
                    if (v76)
                    {
                      *(void *)(v75 + 16) = &v152;
                      uint64_t v74 = (unsigned int **)&v75;
                      uint64_t v75 = 0;
                      uint64_t v76 = 0;
                    }
                    else
                    {
                      long long v151 = &v152;
                    }
                    long long v154 = v77;
                    long long v77 = 0uLL;
                    char v155 = 1;
                    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v65, (uint64_t)&v149);
                    std::runtime_error::runtime_error(&v58, &v65);
                    long long v59 = v66;
                    unint64_t v43 = (unsigned int *)v68;
                    v58.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
                    unint64_t v60 = v67;
                    uint64_t v61 = v68;
                    uint64_t v62 = v69;
                    if (v69)
                    {
                      *(void *)(v68 + 16) = &v61;
                      unint64_t v67 = (unsigned int **)&v68;
                      uint64_t v68 = 0;
                      uint64_t v69 = 0;
                      unint64_t v43 = 0;
                    }
                    else
                    {
                      unint64_t v60 = (unsigned int **)&v61;
                    }
                    long long v63 = v70;
                    long long v70 = 0uLL;
                    char v64 = 0;
                    v65.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
                    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v67, v43);
                    MEMORY[0x192FA3C30](&v65);
                    if (v155)
                    {
                      v149.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
                      uint64_t v44 = (std::__shared_weak_count *)*((void *)&v154 + 1);
                      if (*((void *)&v154 + 1)
                        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v154 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                        std::__shared_weak_count::__release_weak(v44);
                      }
                      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v151, v152);
                      MEMORY[0x192FA3C30](&v149);
                    }
                    goto LABEL_189;
                  }
                  if (v134)
                  {
                    uint64_t v20 = v128.__vftable;
                    v149.__imp_.__imp_ = 0;
                    v149.__vftable = 0;
                    *(void *)&long long v150 = 0;
                    uint64_t v21 = (char *)operator new(0x18uLL);
                    *(void *)&long long v150 = v21 + 24;
                    *(_OWORD *)uint64_t v21 = xmmword_1E559E0B0;
                    *((_WORD *)v21 + 8) = 259;
                    v149.__vftable = (std::runtime_error_vtbl *)v21;
                    v149.__imp_.__imp_ = v21 + 24;
                    v156.__vftable = 0;
                    v156.__imp_.__imp_ = 0;
                    *(void *)&long long v157 = 0;
                    long long v22 = (char *)operator new(0x18uLL);
                    v156.__imp_.__imp_ = v22 + 24;
                    *(void *)&long long v157 = v22 + 24;
                    *(_OWORD *)long long v22 = xmmword_1E559E0C8;
                    *(_DWORD *)(v22 + 15) = 1280;
                    v156.__vftable = (std::runtime_error_vtbl *)v22;
                    (*((void (**)(std::runtime_error *__return_ptr, std::runtime_error_vtbl *, std::runtime_error *, std::runtime_error *))v20->~runtime_error
                     + 5))(&v65, v20, &v149, &v156);
                    if (v156.__vftable)
                    {
                      v156.__imp_.__imp_ = (const char *)v156.__vftable;
                      operator delete(v156.__vftable);
                    }
                    if (v149.__vftable)
                    {
                      v149.__imp_.__imp_ = (const char *)v149.__vftable;
                      operator delete(v149.__vftable);
                    }
                    if (v71) {
                      operator new();
                    }
                    std::runtime_error::runtime_error(&v149, &v65);
                    long long v150 = v66;
                    v149.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
                    long long v151 = v67;
                    uint64_t v152 = (unsigned int *)v68;
                    uint64_t v153 = v69;
                    if (v69)
                    {
                      *(void *)(v68 + 16) = &v152;
                      unint64_t v67 = (unsigned int **)&v68;
                      uint64_t v68 = 0;
                      uint64_t v69 = 0;
                    }
                    else
                    {
                      long long v151 = &v152;
                    }
                    long long v154 = v70;
                    long long v70 = 0uLL;
                    char v155 = 1;
                    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v156, (uint64_t)&v149);
                    std::runtime_error::runtime_error(&v58, &v156);
                    long long v59 = v157;
                    uint64_t v45 = (unsigned int *)v159;
                    v58.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
                    unint64_t v60 = v158;
                    uint64_t v61 = v159;
                    uint64_t v62 = v160;
                    if (v160)
                    {
                      *(void *)(v159 + 16) = &v61;
                      long long v158 = (unsigned int **)&v159;
                      uint64_t v159 = 0;
                      uint64_t v160 = 0;
                      uint64_t v45 = 0;
                    }
                    else
                    {
                      unint64_t v60 = (unsigned int **)&v61;
                    }
                    long long v63 = v161;
                    long long v161 = 0uLL;
                    char v64 = 0;
                    v156.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
                    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v158, v45);
                    MEMORY[0x192FA3C30](&v156);
                    if (v155)
                    {
                      v149.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
                      char v46 = (std::__shared_weak_count *)*((void *)&v154 + 1);
                      if (*((void *)&v154 + 1)
                        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v154 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                        std::__shared_weak_count::__release_weak(v46);
                      }
                      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v151, v152);
                      MEMORY[0x192FA3C30](&v149);
                    }
                    if (v71)
                    {
                      if (*((std::runtime_error **)&v66 + 1) == &v65)
                      {
                        ((void (*)(std::runtime_error *))v65.__vftable[1].~runtime_error_0)(&v65);
                      }
                      else if (*((void *)&v66 + 1))
                      {
                        (*(void (**)(void))(**((void **)&v66 + 1) + 40))();
                      }
                    }
                    else
                    {
                      ((void (*)(std::runtime_error *))v65.~runtime_error)(&v65);
                    }
LABEL_189:
                    if (v78)
                    {
                      if (*((std::runtime_error **)&v73 + 1) == &v72)
                      {
                        ((void (*)(std::runtime_error *))v72.__vftable[1].~runtime_error_0)(&v72);
                      }
                      else if (*((void *)&v73 + 1))
                      {
                        (*(void (**)(void))(**((void **)&v73 + 1) + 40))();
                      }
                    }
                    else
                    {
                      ((void (*)(std::runtime_error *))v72.~runtime_error)(&v72);
                    }
LABEL_195:
                    if (v85)
                    {
                      if (*((std::runtime_error **)&v80 + 1) == &v79)
                      {
                        ((void (*)(std::runtime_error *))v79.__vftable[1].~runtime_error_0)(&v79);
                      }
                      else if (*((void *)&v80 + 1))
                      {
                        (*(void (**)(void))(**((void **)&v80 + 1) + 40))();
                      }
                    }
                    else
                    {
                      ((void (*)(std::runtime_error *))v79.~runtime_error)(&v79);
                    }
LABEL_201:
                    if (v92)
                    {
                      if (*((std::runtime_error **)&v87 + 1) == &v86)
                      {
                        ((void (*)(std::runtime_error *))v86.__vftable[1].~runtime_error_0)(&v86);
                      }
                      else if (*((void *)&v87 + 1))
                      {
                        (*(void (**)(void))(**((void **)&v87 + 1) + 40))();
                      }
                    }
                    else
                    {
                      ((void (*)(std::runtime_error *))v86.~runtime_error)(&v86);
                    }
LABEL_207:
                    if (v99)
                    {
                      if (*((std::runtime_error **)&v94 + 1) == &v93)
                      {
                        ((void (*)(std::runtime_error *))v93.__vftable[1].~runtime_error_0)(&v93);
                      }
                      else if (*((void *)&v94 + 1))
                      {
                        (*(void (**)(void))(**((void **)&v94 + 1) + 40))();
                      }
                    }
                    else
                    {
                      ((void (*)(std::runtime_error *))v93.~runtime_error)(&v93);
                    }
LABEL_213:
                    if (v106)
                    {
                      if (*((std::runtime_error **)&v101 + 1) == &v100)
                      {
                        ((void (*)(std::runtime_error *))v100.__vftable[1].~runtime_error_0)(&v100);
                      }
                      else if (*((void *)&v101 + 1))
                      {
                        (*(void (**)(void))(**((void **)&v101 + 1) + 40))();
                      }
                    }
                    else
                    {
                      ((void (*)(std::runtime_error *))v100.~runtime_error)(&v100);
                    }
                    goto LABEL_219;
                  }
                }
              }
            }
          }
        }
      }
    }
    __break(1u);
  }
  std::runtime_error::runtime_error(&v149, &v142);
  long long v150 = v143;
  v149.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  long long v151 = v144;
  uint64_t v152 = (unsigned int *)v145;
  uint64_t v153 = v146;
  if (v146)
  {
    *(void *)(v145 + 16) = &v152;
    uint64_t v144 = (unsigned int **)&v145;
    uint64_t v145 = 0;
    uint64_t v146 = 0;
  }
  else
  {
    long long v151 = &v152;
  }
  long long v154 = v147;
  long long v147 = 0uLL;
  char v155 = 1;
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v135, (uint64_t)&v149);
  std::runtime_error::runtime_error(&v58, &v135);
  long long v59 = v136;
  long long v23 = (unsigned int *)v138;
  v58.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  unint64_t v60 = v137;
  uint64_t v61 = v138;
  uint64_t v62 = v139;
  if (v139)
  {
    *(void *)(v138 + 16) = &v61;
    unint64_t v137 = (unsigned int **)&v138;
    uint64_t v138 = 0;
    uint64_t v139 = 0;
    long long v23 = 0;
  }
  else
  {
    unint64_t v60 = (unsigned int **)&v61;
  }
  long long v63 = v140;
  long long v140 = 0uLL;
  char v64 = 0;
  v135.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v137, v23);
  MEMORY[0x192FA3C30](&v135);
  if (v155)
  {
    v149.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    long long v24 = (std::__shared_weak_count *)*((void *)&v154 + 1);
    if (*((void *)&v154 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v154 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v151, v152);
    MEMORY[0x192FA3C30](&v149);
  }
LABEL_249:
  uint64_t v48 = v142.__vftable;
  if (!v148)
  {
    ((void (*)(std::runtime_error *))v142.~runtime_error)(&v142);
    uint64_t v49 = v57;
    if (!v57) {
      goto LABEL_257;
    }
    goto LABEL_255;
  }
  v142.__vftable = 0;
  if (v48) {
    (*((void (**)(std::runtime_error_vtbl *))v48->~runtime_error + 1))(v48);
  }
  uint64_t v49 = v57;
  if (v57)
  {
LABEL_255:
    if (!atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
LABEL_257:
  if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
    if (v64) {
LABEL_260:
    }
      operator new();
  }
  else if (v64)
  {
    goto LABEL_260;
  }
  std::runtime_error::runtime_error(&v149, &v58);
  long long v150 = v59;
  v149.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  long long v151 = v60;
  uint64_t v152 = (unsigned int *)v61;
  uint64_t v153 = v62;
  if (v62)
  {
    *(void *)(v61 + 16) = &v152;
    unint64_t v60 = (unsigned int **)&v61;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
  }
  else
  {
    long long v151 = &v152;
  }
  long long v154 = v63;
  long long v63 = 0uLL;
  char v155 = 1;
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v142, (uint64_t)&v149);
  std::runtime_error::runtime_error((std::runtime_error *)this, &v142);
  *((_OWORD *)this + 1) = v143;
  *(void *)this = &unk_1EDC827D8;
  uint64_t v50 = v145;
  *((void *)this + 4) = v144;
  *((void *)this + 5) = v50;
  uint64_t v51 = (char *)this + 40;
  uint64_t v52 = v146;
  *((void *)this + 6) = v146;
  if (v52)
  {
    *(void *)(v50 + 16) = v51;
    uint64_t v144 = (unsigned int **)&v145;
    uint64_t v145 = 0;
    uint64_t v146 = 0;
    uint64_t v50 = 0;
  }
  else
  {
    *((void *)this + 4) = v51;
  }
  *(_OWORD *)((char *)this + 56) = v147;
  long long v147 = 0uLL;
  *((unsigned char *)this + 72) = 0;
  v142.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v144, (unsigned int *)v50);
  MEMORY[0x192FA3C30](&v142);
  if (v155)
  {
    v149.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v53 = (std::__shared_weak_count *)*((void *)&v154 + 1);
    if (*((void *)&v154 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v154 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v151, v152);
    MEMORY[0x192FA3C30](&v149);
  }
  uint64_t result = (AMSCore::MetricsIdentifierDataAccessObject *)v58.__vftable;
  if (!v64) {
    return (AMSCore::MetricsIdentifierDataAccessObject *)((uint64_t (*)(std::runtime_error *))v58.~runtime_error)(&v58);
  }
  v58.__vftable = 0;
  if (result)
  {
    AMSCore::MetricsIdentifierDataAccessObject::~MetricsIdentifierDataAccessObject(result);
    return (AMSCore::MetricsIdentifierDataAccessObject *)MEMORY[0x192FA4080]();
  }
  return result;
}

void sub_18DB25010(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<AMSCore::MetricsIdentifierProvider *,std::shared_ptr<AMSCore::MetricsIdentifierProvider>::__shared_ptr_default_delete<AMSCore::MetricsIdentifierProvider,AMSCore::MetricsIdentifierProvider>,std::allocator<AMSCore::MetricsIdentifierProvider>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN7AMSCore25MetricsIdentifierProviderEE27__shared_ptr_default_deleteIS2_S2_EE"
    || ((v3 & (unint64_t)"NSt3__110shared_ptrIN7AMSCore25MetricsIdentifierProviderEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "NSt3__110shared_ptrIN7AMSCore25MetricsIdentifierProviderEE27__shared_ptr_default_deleteIS2_S2_EE")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN7AMSCore25MetricsIdentifierProviderEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::MetricsIdentifierProvider *,std::shared_ptr<AMSCore::MetricsIdentifierProvider>::__shared_ptr_default_delete<AMSCore::MetricsIdentifierProvider,AMSCore::MetricsIdentifierProvider>,std::allocator<AMSCore::MetricsIdentifierProvider>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::MetricsIdentifierProvider *,std::shared_ptr<AMSCore::MetricsIdentifierProvider>::__shared_ptr_default_delete<AMSCore::MetricsIdentifierProvider,AMSCore::MetricsIdentifierProvider>,std::allocator<AMSCore::MetricsIdentifierProvider>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void AMSCore::IMetricsProvider::enqueueEvent(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = operator new(8uLL);
  std::runtime_error __p = v4;
  void *v4 = v3;
  uint64_t v11 = v4 + 1;
  uint64_t v12 = v4 + 1;
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 32))(a1, &__p);
  long long v5 = __p;
  if (__p)
  {
    uint64_t v6 = v11;
    char v7 = __p;
    if (v11 != __p)
    {
      do
      {
        uint64_t v9 = *--v6;
        uint64_t v8 = v9;
        void *v6 = 0;
        if (v9) {
          (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
        }
      }
      while (v6 != v5);
      char v7 = __p;
    }
    uint64_t v11 = v5;
    operator delete(v7);
  }
}

void sub_18DB25BC4(void *a1)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  __clang_call_terminate(a1);
}

void AMSCore::IMetricsProvider::makeDefault()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_18DB27F28(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (a2)
  {
    std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&STACK[0x310]);
    std::expected<std::function<std::expected<unsigned long,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&STACK[0x360]);
    std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&STACK[0x3B0]);
    std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&a33);
    std::expected<std::function<std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&a43);
    std::expected<std::function<std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&a53);
    std::expected<std::function<std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&a63);
    std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&STACK[0x200]);
    std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&STACK[0x408]);
    std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&STACK[0x458]);
    std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<std::vector<AMSCore::Any>> &&)>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&STACK[0x4A8]);
    std::expected<std::unique_ptr<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t *)(v63 - 184));
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *_ZNKSt3__110__function6__funcIPDoFN7AMSCore4TaskIvNS2_5ErrorEEENS_10shared_ptrINS2_24IMetricsDataAccessObjectEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_10BagServiceENS6_INS2_9StopTokenEEENS6_IKNS2_28MetricsEventModifierProviderEEEENSC_ISM_EEFS5_S8_SE_SF_SH_SK_EE11target_typeEv()
{
  return &_ZTIPDoFN7AMSCore4TaskIvNS_5ErrorEEENSt3__110shared_ptrINS_24IMetricsDataAccessObjectEEENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_10BagServiceENS4_INS_9StopTokenEEENS4_IKNS_28MetricsEventModifierProviderEEEE;
}

uint64_t _ZNKSt3__110__function6__funcIPDoFN7AMSCore4TaskIvNS2_5ErrorEEENS_10shared_ptrINS2_24IMetricsDataAccessObjectEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_10BagServiceENS6_INS2_9StopTokenEEENS6_IKNS2_28MetricsEventModifierProviderEEEENSC_ISM_EEFS5_S8_SE_SF_SH_SK_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "PDoFN7AMSCore4TaskIvNS_5ErrorEEENSt3__110shared_ptrINS_24IMetricsDataAccessObjectEEENS3_12basic_str"
                     "ingIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_10BagServiceENS4_INS_9StopTokenEEENS4_IKNS_28Metri"
                     "csEventModifierProviderEEEE"
    || ((v3 & (unint64_t)"PDoFN7AMSCore4TaskIvNS_5ErrorEEENSt3__110shared_ptrINS_24IMetricsDataAccessObjectEEENS3_"
                                "12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_10BagServiceENS4_INS_9StopTo"
                                "kenEEENS4_IKNS_28MetricsEventModifierProviderEEEE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "PDoFN7AMSCore4TaskIvNS_5ErrorEEENSt3__110shared_ptrINS_24IMetricsDataAccessObjectEEENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_10BagServiceENS4_INS_9StopTokenEEENS4_IKNS_28MetricsEventModifierProviderEEEE")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PDoFN7AMSCore4TaskIvNS_5ErrorEEENSt3__110shared_ptrINS_24IMetricsDataAccessObjectEEENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_10BagServiceENS4_INS_9StopTokenEEENS4_IKNS_28MetricsEventModifierProviderEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIPDoFN7AMSCore4TaskIvNS2_5ErrorEEENS_10shared_ptrINS2_24IMetricsDataAccessObjectEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_10BagServiceENS6_INS2_9StopTokenEEENS6_IKNS2_28MetricsEventModifierProviderEEEENSC_ISM_EEFS5_S8_SE_SF_SH_SK_EEclEOS8_OSE_OSF_OSH_OSK_(uint64_t a1, long long *a2, long long *a3, long long *a4, long long *a5, long long *a6)
{
  uint64_t v6 = *(void (**)(long long *, void **, long long *, long long *, long long *))(a1 + 8);
  long long v21 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v7 = *a3;
  uint64_t v20 = *((void *)a3 + 2);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  long long v9 = *a4;
  long long v8 = a4[1];
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  long long v18 = v8;
  *(_OWORD *)std::runtime_error __p = v7;
  *((void *)a4 + 2) = 0;
  *((void *)a4 + 3) = 0;
  long long v16 = *a5;
  long long v17 = v9;
  *(void *)a5 = 0;
  *((void *)a5 + 1) = 0;
  long long v15 = *a6;
  *(void *)a6 = 0;
  *((void *)a6 + 1) = 0;
  v6(&v21, __p, &v17, &v16, &v15);
  long long v10 = (std::__shared_weak_count *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    uint64_t v11 = (std::__shared_weak_count *)*((void *)&v16 + 1);
    if (!*((void *)&v16 + 1)) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v11 = (std::__shared_weak_count *)*((void *)&v16 + 1);
    if (!*((void *)&v16 + 1)) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_7:
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    long long v13 = (std::__shared_weak_count *)*((void *)&v17 + 1);
    if (!*((void *)&v17 + 1)) {
      goto LABEL_13;
    }
  }
  else
  {
    long long v13 = (std::__shared_weak_count *)*((void *)&v17 + 1);
    if (!*((void *)&v17 + 1)) {
      goto LABEL_13;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_13:
  if (SHIBYTE(v20) < 0)
  {
    operator delete(__p[0]);
    uint64_t v14 = (std::__shared_weak_count *)*((void *)&v21 + 1);
    if (!*((void *)&v21 + 1)) {
      return;
    }
  }
  else
  {
    uint64_t v14 = (std::__shared_weak_count *)*((void *)&v21 + 1);
    if (!*((void *)&v21 + 1)) {
      return;
    }
  }
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
}

uint64_t _ZNKSt3__110__function6__funcIPDoFN7AMSCore4TaskIvNS2_5ErrorEEENS_10shared_ptrINS2_24IMetricsDataAccessObjectEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_10BagServiceENS6_INS2_9StopTokenEEENS6_IKNS2_28MetricsEventModifierProviderEEEENSC_ISM_EEFS5_S8_SE_SF_SH_SK_EE7__cloneEPNS0_6__baseISO_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDC829F8;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIPDoFN7AMSCore4TaskIvNS2_5ErrorEEENS_10shared_ptrINS2_24IMetricsDataAccessObjectEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_10BagServiceENS6_INS2_9StopTokenEEENS6_IKNS2_28MetricsEventModifierProviderEEEENSC_ISM_EEFS5_S8_SE_SF_SH_SK_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EDC829F8;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIPDoFN7AMSCore4TaskIvNS2_5ErrorEEENS_10shared_ptrINS2_24IMetricsDataAccessObjectEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS2_10BagServiceENS6_INS2_9StopTokenEEENS6_IKNS2_28MetricsEventModifierProviderEEEENSC_ISM_EEFS5_S8_SE_SF_SH_SK_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIPDoFN7AMSCore4TaskIvNS2_5ErrorEEENS_10unique_ptrINS2_16IMetricsProvider5EventENS_14default_deleteIS8_EEEENS2_10BagServiceENS_10shared_ptrIKNS2_28MetricsEventModifierProviderEEEENS_9allocatorISI_EEFS5_SB_SC_SG_EE11target_typeEv()
{
  return &_ZTIPDoFN7AMSCore4TaskIvNS_5ErrorEEENSt3__110unique_ptrINS_16IMetricsProvider5EventENS3_14default_deleteIS6_EEEENS_10BagServiceENS3_10shared_ptrIKNS_28MetricsEventModifierProviderEEEE;
}

uint64_t _ZNKSt3__110__function6__funcIPDoFN7AMSCore4TaskIvNS2_5ErrorEEENS_10unique_ptrINS2_16IMetricsProvider5EventENS_14default_deleteIS8_EEEENS2_10BagServiceENS_10shared_ptrIKNS2_28MetricsEventModifierProviderEEEENS_9allocatorISI_EEFS5_SB_SC_SG_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "PDoFN7AMSCore4TaskIvNS_5ErrorEEENSt3__110unique_ptrINS_16IMetricsProvider5EventENS3_14default_delet"
                     "eIS6_EEEENS_10BagServiceENS3_10shared_ptrIKNS_28MetricsEventModifierProviderEEEE"
    || ((v3 & (unint64_t)"PDoFN7AMSCore4TaskIvNS_5ErrorEEENSt3__110unique_ptrINS_16IMetricsProvider5EventENS3_14de"
                                "fault_deleteIS6_EEEENS_10BagServiceENS3_10shared_ptrIKNS_28MetricsEventModifierProviderEEEE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "PDoFN7AMSCore4TaskIvNS_5ErrorEEENSt3__110unique_ptrINS_16IMetricsProvider5EventENS3_14default_deleteIS6_EEEENS_10BagServiceENS3_10shared_ptrIKNS_28MetricsEventModifierProviderEEEE")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PDoFN7AMSCore4TaskIvNS_5ErrorEEENSt3__110unique_ptrINS_16IMetricsProvider5EventENS3_14default_deleteIS6_EEEENS_10BagServiceENS3_10shared_ptrIKNS_28MetricsEventModifierProviderEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIPDoFN7AMSCore4TaskIvNS2_5ErrorEEENS_10unique_ptrINS2_16IMetricsProvider5EventENS_14default_deleteIS8_EEEENS2_10BagServiceENS_10shared_ptrIKNS2_28MetricsEventModifierProviderEEEENS_9allocatorISI_EEFS5_SB_SC_SG_EEclEOSB_OSC_OSG_(uint64_t a1, uint64_t *a2, long long *a3, long long *a4)
{
  uint64_t v4 = *(void (**)(uint64_t *, long long *, long long *))(a1 + 8);
  uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t v15 = v5;
  long long v6 = *a3;
  long long v7 = a3[1];
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  long long v13 = v6;
  long long v14 = v7;
  *((void *)a3 + 2) = 0;
  *((void *)a3 + 3) = 0;
  long long v12 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  v4(&v15, &v13, &v12);
  long long v8 = (std::__shared_weak_count *)*((void *)&v12 + 1);
  if (*((void *)&v12 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v12 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    long long v9 = (std::__shared_weak_count *)*((void *)&v14 + 1);
    if (!*((void *)&v14 + 1)) {
      goto LABEL_7;
    }
  }
  else
  {
    long long v9 = (std::__shared_weak_count *)*((void *)&v14 + 1);
    if (!*((void *)&v14 + 1)) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_7:
  long long v10 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t result = v15;
  uint64_t v15 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIPDoFN7AMSCore4TaskIvNS2_5ErrorEEENS_10unique_ptrINS2_16IMetricsProvider5EventENS_14default_deleteIS8_EEEENS2_10BagServiceENS_10shared_ptrIKNS2_28MetricsEventModifierProviderEEEENS_9allocatorISI_EEFS5_SB_SC_SG_EE7__cloneEPNS0_6__baseISL_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDC82A50;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIPDoFN7AMSCore4TaskIvNS2_5ErrorEEENS_10unique_ptrINS2_16IMetricsProvider5EventENS_14default_deleteIS8_EEEENS2_10BagServiceENS_10shared_ptrIKNS2_28MetricsEventModifierProviderEEEENS_9allocatorISI_EEFS5_SB_SC_SG_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EDC82A50;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIPDoFN7AMSCore4TaskIvNS2_5ErrorEEENS_10unique_ptrINS2_16IMetricsProvider5EventENS_14default_deleteIS8_EEEENS2_10BagServiceENS_10shared_ptrIKNS2_28MetricsEventModifierProviderEEEENS_9allocatorISI_EEFS5_SB_SC_SG_EED0Ev()
{
}

void std::__shared_ptr_emplace<AMSCore::MetricsProvider>::__on_zero_shared(uint64_t a1)
{
}

void AMSCore::MetricsProvider::~MetricsProvider(AMSCore::MetricsProvider *this)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>>>::destroy(*((char **)this + 27));
  std::mutex::~mutex((std::mutex *)((char *)this + 144));
  uint64_t v2 = (AMSCore::MetricsProvider *)*((void *)this + 17);
  if (v2 == (AMSCore::MetricsProvider *)((char *)this + 112))
  {
    (*(void (**)(char *))(*((void *)this + 14) + 32))((char *)this + 112);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 13);
    if (!v3) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  if (v2) {
    (*(void (**)(AMSCore::MetricsProvider *))(*(void *)v2 + 40))(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v3)
  {
LABEL_7:
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
LABEL_9:
  uint64_t v4 = (AMSCore::MetricsProvider *)*((void *)this + 11);
  if (v4 == (AMSCore::MetricsProvider *)((char *)this + 64))
  {
    (*(void (**)(char *))(*((void *)this + 8) + 32))((char *)this + 64);
  }
  else if (v4)
  {
    (*(void (**)(AMSCore::MetricsProvider *))(*(void *)v4 + 40))(v4);
  }
  uint64_t v5 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  long long v6 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    long long v7 = (std::__shared_weak_count *)*((void *)this + 4);
    if (!v7) {
      goto LABEL_21;
    }
  }
  else
  {
    long long v7 = (std::__shared_weak_count *)*((void *)this + 4);
    if (!v7) {
      goto LABEL_21;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_21:
  long long v8 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
}

{
  uint64_t vars8;

  AMSCore::MetricsProvider::~MetricsProvider(this);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::MetricsProvider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83C90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::MetricsProvider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83C90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AMSCore::IMetricsProvider::Event::Event(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1EDC81F18;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = -1;
  *(void *)(a1 + 48) = 7824750;
  *(unsigned char *)(a1 + 71) = 3;
  *(void *)(a1 + 80) = 0;
  uint64_t v5 = (uint64_t *)(a1 + 80);
  *(void *)(a1 + 72) = a1 + 80;
  long long v6 = (void **)(a1 + 72);
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  long long v7 = (void **)(a1 + 104);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 128) = a1 + 136;
  long long v8 = (void *)(a1 + 128);
  *(void *)(a1 + 144) = 0;
  *((unsigned char *)&v36.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&v36, "topic");
  long long v9 = *a2;
  uint64_t v33 = *((void *)a2 + 2);
  *(_OWORD *)std::runtime_error __p = v9;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  char v34 = 1;
  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>((void **)(a1 + 72), (const std::string::value_type **)&v36.__r_.__value_.__l.__data_, (long long *)__p);
  if (v34 && SHIBYTE(v33) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  *((unsigned char *)&v36.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&v36, "baseVersion");
  LODWORD(v46[0]) = 65537;
  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<unsigned short>(v6, (const std::string::value_type **)&v36.__r_.__value_.__l.__data_, (unsigned __int16 *)v46);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a3 + 32))(v42, a3);
  HIBYTE(v47) = 3;
  strcpy((char *)v46, "app");
  std::string v36 = v42[0];
  memset(v42, 0, 24);
  char v37 = 1;
  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>(v6, v46, (long long *)&v36);
  if (v37 && SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47) < 0)
  {
    operator delete((void *)v46[0]);
    if ((SHIBYTE(v42[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
LABEL_44:
    operator delete(v42[0].__r_.__value_.__l.__data_);
    goto LABEL_13;
  }
  if (SHIBYTE(v42[0].__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_44;
  }
LABEL_13:
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a3 + 72))(&v35, a3);
  HIBYTE(v47) = 10;
  strcpy((char *)v46, "appVersion");
  std::string v36 = v35;
  memset(&v35, 0, sizeof(v35));
  char v37 = 1;
  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>(v6, v46, (long long *)&v36);
  if (v37 && SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47) < 0)
  {
    operator delete((void *)v46[0]);
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_18;
    }
  }
  else if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_18;
  }
  operator delete(v35.__r_.__value_.__l.__data_);
LABEL_18:
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a3 + 16))(&v36, a3);
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*v7);
  }
  *(std::string *)long long v7 = v36;
  AMSCore::ServiceProvider<AMSCore::IDeviceInfo>::getDefault(&v35);
  std::string::size_type v10 = v35.__r_.__value_.__r.__words[0];
  (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(void *)v35.__r_.__value_.__l.__data_
                                                                            + 88))(v42, v35.__r_.__value_.__r.__words[0]);
  AMSCore::toString(&v31, (uint64_t)v42);
  HIBYTE(v47) = 2;
  strcpy((char *)v46, "os");
  std::string v36 = v31;
  memset(&v31, 0, sizeof(v31));
  char v37 = 1;
  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>(v6, v46, (long long *)&v36);
  if (v37 && SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if ((SHIBYTE(v47) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_25;
    }
LABEL_48:
    operator delete(v31.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v42[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_26;
    }
LABEL_49:
    operator delete(v42[0].__r_.__value_.__l.__data_);
    goto LABEL_26;
  }
  operator delete((void *)v46[0]);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_48;
  }
LABEL_25:
  if (SHIBYTE(v42[0].__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_49;
  }
LABEL_26:
  (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(void *)v10 + 96))(&v30, v10);
  HIBYTE(v47) = 9;
  strcpy((char *)v46, "osVersion");
  std::string v36 = v30;
  memset(&v30, 0, sizeof(v30));
  char v37 = 1;
  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>(v6, v46, (long long *)&v36);
  if (v37 && SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47) < 0)
  {
    operator delete((void *)v46[0]);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
LABEL_51:
    operator delete(v30.__r_.__value_.__l.__data_);
    goto LABEL_31;
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_51;
  }
LABEL_31:
  (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(void *)v10 + 80))(v42, v10);
  v45[0] = v42[0].__r_.__value_.__l.__size_;
  std::string::size_type v11 = v42[0].__r_.__value_.__r.__words[0];
  *(void *)((char *)v45 + 7) = *(std::string::size_type *)((char *)&v42[0].__r_.__value_.__r.__words[1] + 7);
  char v12 = HIBYTE(v42[0].__r_.__value_.__r.__words[2]);
  memset(v42, 0, 24);
  HIBYTE(v47) = 14;
  strcpy((char *)v46, "hardwareFamily");
  v36.__r_.__value_.__r.__words[0] = v11;
  v36.__r_.__value_.__l.__size_ = v45[0];
  *(std::string::size_type *)((char *)&v36.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v45 + 7);
  *((unsigned char *)&v36.__r_.__value_.__s + 23) = v12;
  v45[0] = 0;
  *(void *)((char *)v45 + 7) = 0;
  char v37 = 1;
  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>(v6, v46, (long long *)&v36);
  if (v37 && SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47) < 0)
  {
    operator delete((void *)v46[0]);
    if ((SHIBYTE(v42[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_36;
    }
  }
  else if ((SHIBYTE(v42[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_36;
  }
  operator delete(v42[0].__r_.__value_.__l.__data_);
LABEL_36:
  (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(void *)v10 + 56))(&v28, v10);
  HIBYTE(v47) = 13;
  strcpy((char *)v46, "hardwareModel");
  v36.__r_.__value_.__s.__data_[0] = 0;
  char v37 = 0;
  if (v29)
  {
    std::string v36 = v28;
    memset(&v28, 0, sizeof(v28));
    char v37 = 1;
    std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>(v6, v46, (long long *)&v36);
    if (v37 && SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v47) & 0x80000000) == 0) {
      goto LABEL_41;
    }
LABEL_57:
    operator delete((void *)v46[0]);
    if (!v29) {
      goto LABEL_60;
    }
    goto LABEL_58;
  }
  long long v13 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)v6, (const void **)v46);
  if (v5 != v13) {
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase(v6, (uint64_t)v13);
  }
  std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>(v8, (const void **)v46);
  if (SHIBYTE(v47) < 0) {
    goto LABEL_57;
  }
LABEL_41:
  if (!v29) {
    goto LABEL_60;
  }
LABEL_58:
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
LABEL_60:
  (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(void *)v10 + 16))(&v27, v10);
  HIBYTE(v47) = 13;
  strcpy((char *)v46, "osBuildNumber");
  std::string v36 = v27;
  memset(&v27, 0, sizeof(v27));
  char v37 = 1;
  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>(v6, v46, (long long *)&v36);
  if (v37 && SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47) < 0)
  {
    operator delete((void *)v46[0]);
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_65;
    }
  }
  else if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_65;
  }
  operator delete(v27.__r_.__value_.__l.__data_);
LABEL_65:
  int v14 = (*(uint64_t (**)(std::string::size_type))(*(void *)v10 + 32))(v10);
  if (v14)
  {
    if (v14 == 2)
    {
      char v15 = 4;
      std::string::size_type v16 = 1684366707;
    }
    else
    {
      char v15 = 8;
      std::string::size_type v16 = 0x6C616E7265746E69;
    }
  }
  else
  {
    char v15 = 8;
    std::string::size_type v16 = 0x72656D6F74737563;
  }
  HIBYTE(v47) = 15;
  strcpy((char *)v46, "clientBuildType");
  v36.__r_.__value_.__r.__words[0] = v16;
  v36.__r_.__value_.__s.__data_[8] = 0;
  *(std::string::size_type *)((char *)&v36.__r_.__value_.__r.__words[1] + 1) = v44[0];
  *(std::string::size_type *)((char *)&v36.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v44 + 6);
  *((unsigned char *)&v36.__r_.__value_.__s + 23) = v15;
  v44[0] = 0;
  *(void *)((char *)v44 + 6) = 0;
  char v37 = 1;
  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>(v6, v46, (long long *)&v36);
  if (v37 && SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47) < 0) {
    operator delete((void *)v46[0]);
  }
  std::string::size_type size = (std::__shared_weak_count *)v35.__r_.__value_.__l.__size_;
  if (v35.__r_.__value_.__l.__size_
    && !atomic_fetch_add((atomic_ullong *volatile)(v35.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
  }
  *((unsigned char *)&v36.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&v36, "anonymous");
  LOWORD(v46[0]) = 256;
  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<BOOL>(v6, (const std::string::value_type **)&v36.__r_.__value_.__l.__data_, v46);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  *((unsigned char *)&v36.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v36, "eventVersion");
  LODWORD(v46[0]) = 65537;
  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<unsigned short>(v6, (const std::string::value_type **)&v36.__r_.__value_.__l.__data_, (unsigned __int16 *)v46);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  *(_OWORD *)&v42[0].__r_.__value_.__l.__data_ = 0uLL;
  uuid_generate_random((unsigned __int8 *)v42);
  long long v18 = (char *)operator new(0x28uLL);
  *(void *)(v18 + 29) = 0;
  *(_OWORD *)long long v18 = 0u;
  *((_OWORD *)v18 + 1) = 0u;
  uuid_unparse_lower((const unsigned __int8 *)v42, v18);
  HIBYTE(v47) = 13;
  strcpy((char *)v46, "clientEventId");
  v36.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
  *(_OWORD *)&v36.__r_.__value_.__r.__words[1] = xmmword_18DDE9BF0;
  char v37 = 1;
  std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>(v6, v46, (long long *)&v36);
  if (v37 && SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47) < 0) {
    operator delete((void *)v46[0]);
  }
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
  *((unsigned char *)&v36.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&v36, "eventTime");
  AMSCore::IMetricsProvider::Event::withTimePoint(a1, (uint64_t)&v36, rep, 0, 0);
  AMSCore::localTimeSecondsFromUTC((uint64_t)v42, rep);
  if (v43)
  {
    *((unsigned char *)&v36.__r_.__value_.__s + 23) = 14;
    strcpy((char *)&v36, "timezoneOffset");
    v46[0] = (const std::string::value_type *)((int64_t)v42[0].__r_.__value_.__r.__words[0] / 60);
    v46[1] = (const std::string::value_type *)1;
    std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<long long>(v6, (const std::string::value_type **)&v36.__r_.__value_.__l.__data_, (uint64_t **)v46);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v36.__r_.__value_.__l.__data_);
      if (!v43) {
        goto LABEL_104;
      }
      return a1;
    }
  }
  else
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v35);
    std::string::size_type v20 = v35.__r_.__value_.__r.__words[0];
    if (*(unsigned __int8 *)(v35.__r_.__value_.__r.__words[0] + 8) <= 4u)
    {
      std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v36);
      uint64_t v21 = *(void *)(v36.__r_.__value_.__r.__words[0] - 24);
      {
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v36, (uint64_t)"The current local time could not be expressed as seconds from UTC. error = ", 75);
      AMSCore::operator<<(&v36, (uint64_t)v42);
      uint64_t v22 = v38;
      long long v23 = (char *)&v36 + *(void *)(v36.__r_.__value_.__r.__words[0] - 24);
      if ((v23[32] & 5) != 0)
      {
        uint64_t v24 = -1;
      }
      else
      {
        (*(void (**)(const std::string::value_type **__return_ptr))(**((void **)v23 + 5) + 32))(v46);
        uint64_t v24 = v49;
      }
      v46[0] = (const std::string::value_type *)std::chrono::system_clock::now().__d_.__rep_;
      LOBYTE(v46[1]) = 4;
      uint64_t v47 = v22;
      uint64_t v48 = v24;
      (*(void (**)(void, const char *, uint64_t, const std::string::value_type **))(**(void **)(v20 + 16)
                                                                                              + 16))(*(void *)(v20 + 16), "metrics", 7, v46);
      v36.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA418];
      *(std::string::size_type *)((char *)v36.__r_.__value_.__r.__words
                                + *(void *)(v36.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418]
                                                                                                  + 24);
      v36.__r_.__value_.__l.__size_ = MEMORY[0x1E4FBA470] + 16;
      if (v40 < 0) {
        operator delete(v39);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x192FA3FD0](&v41);
    }
    long long v25 = (std::__shared_weak_count *)v35.__r_.__value_.__l.__size_;
    if (v35.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v35.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      if (v43) {
        return a1;
      }
      goto LABEL_104;
    }
  }
  if (!v43) {
LABEL_104:
  }
    (*(void (**)(std::string *))v42[0].__r_.__value_.__l.__data_)(v42);
  return a1;
}

void sub_18DB29838(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

char **std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<unsigned short>(void **a1, const std::string::value_type **a2, unsigned __int16 *a3)
{
  long long v6 = (uint64_t *)(a1 + 1);
  long long v7 = a1[1];
  if (!v7) {
    goto LABEL_42;
  }
  int v8 = *((char *)a2 + 23);
  if (v8 >= 0) {
    long long v9 = (const std::string::value_type *)a2;
  }
  else {
    long long v9 = *a2;
  }
  if (v8 >= 0) {
    size_t v10 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v10 = (size_t)a2[1];
  }
  std::string::size_type v11 = (uint64_t *)(a1 + 1);
  do
  {
    while (1)
    {
      int v12 = *((char *)v7 + 55);
      long long v13 = v12 >= 0 ? v7 + 4 : (uint64_t *)v7[4];
      size_t v14 = v12 >= 0 ? *((unsigned __int8 *)v7 + 55) : v7[5];
      size_t v15 = v10 >= v14 ? v14 : v10;
      int v16 = memcmp(v13, v9, v15);
      if (v16) {
        break;
      }
      if (v14 < v10) {
        goto LABEL_11;
      }
LABEL_9:
      std::string::size_type v11 = v7;
      long long v7 = (uint64_t *)*v7;
      if (!v7) {
        goto LABEL_26;
      }
    }
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_11:
    long long v7 = (uint64_t *)v7[1];
  }
  while (v7);
LABEL_26:
  if (v11 != v6)
  {
    int v17 = *((char *)v11 + 55);
    if (v17 >= 0) {
      long long v18 = v11 + 4;
    }
    else {
      long long v18 = (void *)v11[4];
    }
    if (v17 >= 0) {
      size_t v19 = *((unsigned __int8 *)v11 + 55);
    }
    else {
      size_t v19 = v11[5];
    }
    if (v19 >= v10) {
      size_t v20 = v10;
    }
    else {
      size_t v20 = v19;
    }
    int v21 = memcmp(v9, v18, v20);
    if (v21)
    {
      if ((v21 & 0x80000000) == 0)
      {
LABEL_38:
        v28[0] = (uint64_t *)*a3;
        int v29 = 3;
        uint64_t result = (char **)AMSCore::Any::operator=((uint64_t)(v11 + 7), (uint64_t)v28);
        if (v29 != -1) {
          return (char **)((uint64_t (*)(uint64_t **, uint64_t **))off_1EDCA6158[v29])(&v30, v28);
        }
        return result;
      }
    }
    else if (v10 >= v19)
    {
      goto LABEL_38;
    }
    long long v6 = v11;
  }
LABEL_42:
  uint64_t result = (char **)std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__find_equal<std::string>(a1, v6, v28, &v30, (const void **)a2);
  if (!*result)
  {
    long long v23 = result;
    uint64_t v24 = (char *)operator new(0x58uLL);
    long long v25 = (std::string *)(v24 + 32);
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v25, *a2, (std::string::size_type)a2[1]);
    }
    else
    {
      *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      *((void *)v24 + 6) = a2[2];
    }
    *((void *)v24 + 7) = *a3;
    *((_DWORD *)v24 + 20) = 3;
    uint64_t v26 = v28[0];
    *(void *)uint64_t v24 = 0;
    *((void *)v24 + 1) = 0;
    *((void *)v24 + 2) = v26;
    char *v23 = v24;
    std::string v27 = (void *)**a1;
    if (v27)
    {
      *a1 = v27;
      uint64_t v24 = *v23;
    }
    uint64_t result = (char **)std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v24);
    a1[2] = (void *)((char *)a1[2] + 1);
  }
  return result;
}

void sub_18DB29B64(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::IMetricsProvider::Event::withTimePoint(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  v47[0] = a3;
  int v48 = 7;
  size_t v10 = (uint64_t **)(a1 + 80);
  long long v9 = *(uint64_t **)(a1 + 80);
  if (v9)
  {
    int v11 = *(char *)(a2 + 23);
    if (v11 >= 0) {
      int v12 = (const std::string::value_type *)a2;
    }
    else {
      int v12 = *(const std::string::value_type **)a2;
    }
    if (v11 >= 0) {
      size_t v13 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v13 = *(void *)(a2 + 8);
    }
    while (1)
    {
      size_t v14 = (uint64_t **)v9;
      int v17 = (const void *)v9[4];
      size_t v15 = v9 + 4;
      int v16 = v17;
      int v18 = *((char *)v15 + 23);
      if (v18 >= 0) {
        size_t v19 = v15;
      }
      else {
        size_t v19 = v16;
      }
      if (v18 >= 0) {
        size_t v20 = *((unsigned __int8 *)v15 + 23);
      }
      else {
        size_t v20 = v15[1];
      }
      if (v20 >= v13) {
        size_t v21 = v13;
      }
      else {
        size_t v21 = v20;
      }
      int v22 = memcmp(v12, v19, v21);
      if (v22)
      {
        if (v22 < 0) {
          goto LABEL_8;
        }
LABEL_22:
        int v23 = memcmp(v19, v12, v21);
        if (v23)
        {
          if ((v23 & 0x80000000) == 0) {
            goto LABEL_35;
          }
        }
        else if (v20 >= v13)
        {
LABEL_35:
          uint64_t v24 = (char *)v14;
          goto LABEL_36;
        }
        long long v9 = v14[1];
        if (!v9)
        {
          size_t v10 = v14 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v13 >= v20) {
          goto LABEL_22;
        }
LABEL_8:
        long long v9 = *v14;
        size_t v10 = v14;
        if (!*v14) {
          goto LABEL_29;
        }
      }
    }
  }
  size_t v14 = (uint64_t **)(a1 + 80);
LABEL_29:
  uint64_t v24 = (char *)operator new(0x58uLL);
  long long v25 = (std::string *)(v24 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v25, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v24 + 6) = *(void *)(a2 + 16);
  }
  *(_OWORD *)(v24 + 72) = 0u;
  *(_OWORD *)(v24 + 56) = 0u;
  *(void *)uint64_t v24 = 0;
  *((void *)v24 + 1) = 0;
  *((void *)v24 + 2) = v14;
  std::__shared_weak_count *v10 = (uint64_t *)v24;
  uint64_t v26 = **(void **)(a1 + 72);
  std::string v27 = (uint64_t *)v24;
  if (v26)
  {
    *(void *)(a1 + 72) = v26;
    std::string v27 = *v10;
  }
  std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 80), v27);
  ++*(void *)(a1 + 88);
LABEL_36:
  AMSCore::Any::operator=((uint64_t)(v24 + 56), (uint64_t)v47);
  if (v48 != -1) {
    ((void (*)(char *, void *))off_1EDCA6158[v48])(&v49, v47);
  }
  int v29 = (char **)(a1 + 136);
  std::string v28 = *(char **)(a1 + 136);
  if (!v28)
  {
    uint64_t v33 = (char **)(a1 + 136);
    goto LABEL_66;
  }
  int v30 = *(char *)(a2 + 23);
  if (v30 >= 0) {
    std::string v31 = (const std::string::value_type *)a2;
  }
  else {
    std::string v31 = *(const std::string::value_type **)a2;
  }
  if (v30 >= 0) {
    unint64_t v32 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v32 = *(void *)(a2 + 8);
  }
  do
  {
    while (1)
    {
      uint64_t v33 = (char **)v28;
      std::string v36 = (void *)*((void *)v28 + 4);
      char v34 = v28 + 32;
      std::string v35 = v36;
      int v37 = *((char *)v34 + 23);
      uint64_t v38 = v37 >= 0 ? v34 : v35;
      unint64_t v39 = v37 >= 0 ? *((unsigned __int8 *)v34 + 23) : v34[1];
      size_t v40 = v39 >= v32 ? v32 : v39;
      int v41 = memcmp(v31, v38, v40);
      if (v41) {
        break;
      }
      if (v32 >= v39) {
        goto LABEL_59;
      }
LABEL_45:
      std::string v28 = *v33;
      int v29 = v33;
      if (!*v33) {
        goto LABEL_66;
      }
    }
    if (v41 < 0) {
      goto LABEL_45;
    }
LABEL_59:
    int v42 = memcmp(v38, v31, v40);
    if (v42)
    {
      if ((v42 & 0x80000000) == 0) {
        return a1;
      }
    }
    else if (v39 >= v32)
    {
      return a1;
    }
    std::string v28 = v33[1];
  }
  while (v28);
  int v29 = v33 + 1;
LABEL_66:
  char v43 = (char *)operator new(0x40uLL);
  uint64_t v44 = (std::string *)(v43 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v44, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v44->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v43 + 6) = *(void *)(a2 + 16);
  }
  *((_WORD *)v43 + 28) = (0x403020001uLL >> (8 * a4)) & 7 | ((a5 == 1) << 8);
  *(void *)char v43 = 0;
  *((void *)v43 + 1) = 0;
  *((void *)v43 + 2) = v33;
  unsigned int *v29 = v43;
  uint64_t v45 = **(void **)(a1 + 128);
  if (v45)
  {
    *(void *)(a1 + 128) = v45;
    char v43 = *v29;
  }
  std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 136), (uint64_t *)v43);
  ++*(void *)(a1 + 144);
  return a1;
}

void sub_18DB29E94(void *a1)
{
  operator delete(v1);
  __clang_call_terminate(a1);
}

uint64_t AMSCore::IMetricsProvider::Event::{unnamed type#1}::~Event(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void AMSCore::IMetricsProvider::Event::takeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (char *)operator new(0x240uLL);
  long long v6 = v5;
  *(void *)uint64_t v5 = AMSCore::IMetricsProvider::Event::takeProperties;
  *((void *)v5 + 1) = AMSCore::IMetricsProvider::Event::takeProperties;
  *((void *)v5 + 68) = a2;
  *((_OWORD *)v5 + 6) = *(_OWORD *)a3;
  *(_OWORD *)(v5 + 108) = *(_OWORD *)(a3 + 12);
  long long v7 = (void *)(a3 + 40);
  uint64_t v8 = *(void *)(a3 + 40);
  *((void *)v5 + 16) = *(void *)(a3 + 32);
  *((void *)v5 + 17) = v8;
  long long v9 = v5 + 136;
  uint64_t v10 = *(void *)(a3 + 48);
  *((void *)v5 + 18) = v10;
  if (v10)
  {
    *(void *)(v8 + 16) = v9;
    *(void *)(a3 + 32) = v7;
    void *v7 = 0;
    *(void *)(a3 + 48) = 0;
  }
  else
  {
    *((void *)v5 + 16) = v9;
  }
  int v11 = (void *)(a3 + 64);
  uint64_t v12 = *(void *)(a3 + 64);
  uint64_t v13 = *(void *)(a3 + 56);
  *((void *)v5 + 20) = v12;
  size_t v14 = v5 + 160;
  *((void *)v5 + 19) = v13;
  uint64_t v15 = *(void *)(a3 + 72);
  *((void *)v5 + 21) = v15;
  if (v15)
  {
    *(void *)(v12 + 16) = v14;
    *(void *)(a3 + 56) = v11;
    void *v11 = 0;
    *(void *)(a3 + 72) = 0;
  }
  else
  {
    *((void *)v5 + 19) = v14;
  }
  int v16 = (void *)(a3 + 88);
  uint64_t v17 = *(void *)(a3 + 88);
  uint64_t v18 = *(void *)(a3 + 80);
  *((void *)v5 + 23) = v17;
  size_t v19 = v5 + 184;
  *((void *)v5 + 22) = v18;
  uint64_t v20 = *(void *)(a3 + 96);
  *((void *)v5 + 24) = v20;
  if (v20)
  {
    *(void *)(v17 + 16) = v19;
    *(void *)(a3 + 80) = v16;
    *int v16 = 0;
    *(void *)(a3 + 96) = 0;
  }
  else
  {
    *((void *)v5 + 22) = v19;
  }
  *(_OWORD *)(v5 + 200) = *(_OWORD *)(a3 + 104);
  v5[216] = 0;
  v5[368] = 0;
  std::__optional_storage_base<AMSCore::URL,false>::__construct_from[abi:fe180100]<std::__optional_move_base<AMSCore::URL,false>>((uint64_t)(v5 + 216), (long long *)(a3 + 120));
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  v6[24] = 0;
  v6[48] = 0;
  *((void *)v6 + 7) = 0;
  *((void *)v6 + 11) = 0;
  operator new();
}

void sub_18DB2A59C(void *a1)
{
}

uint64_t AMSCore::IMetricsProvider::Event::takeProperties(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 552);
  if (!*(unsigned char *)(v1 + 88))
  {
    __break(1u);
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 376;
  uint64_t v4 = (const std::runtime_error *)(v1 + 8);
  char v5 = *(unsigned char *)(v1 + 80);
  if (v5)
  {
    long long v6 = v4->__vftable;
    v4->__vftable = 0;
    *(void *)uint64_t v3 = v6;
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(result + 376), v4);
    *(_OWORD *)(v2 + 392) = *(_OWORD *)(v1 + 24);
    *(void *)(v2 + 376) = &unk_1EDC827D8;
    long long v7 = (void *)(v1 + 48);
    uint64_t v8 = *(void *)(v1 + 48);
    uint64_t v9 = v2 + 416;
    *(void *)(v2 + 408) = *(void *)(v1 + 40);
    *(void *)(v2 + 416) = v8;
    uint64_t v10 = *(void *)(v1 + 56);
    *(void *)(v2 + 424) = v10;
    if (v10)
    {
      *(void *)(v8 + 16) = v9;
      *(void *)(v1 + 40) = v7;
      void *v7 = 0;
      *(void *)(v1 + 56) = 0;
    }
    else
    {
      *(void *)(v2 + 408) = v9;
    }
    uint64_t v11 = *(void *)(v2 + 552);
    *(_OWORD *)(v2 + 432) = *(_OWORD *)(v11 + 64);
    *(void *)(v11 + 64) = 0;
    *(void *)(v11 + 72) = 0;
  }
  *(unsigned char *)(v2 + 448) = v5;
  uint64_t v12 = *(void *)(v2 + 560);
  if (v12 && !atomic_fetch_add((atomic_ullong *volatile)(v12 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v13 = *(std::__shared_weak_count **)(v2 + 560);
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  size_t v14 = *(std::__shared_weak_count **)(v2 + 536);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if ((*(char *)(v2 + 511) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (*(char *)(v2 + 511) < 0) {
LABEL_14:
  }
    operator delete(*(void **)(v2 + 488));
LABEL_15:
  uint64_t v15 = *(std::__shared_weak_count **)(v2 + 520);
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (!*(unsigned char *)(v2 + 448)) {
      goto LABEL_25;
    }
  }
  else if (!*(unsigned char *)(v2 + 448))
  {
LABEL_25:
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(__p);
    AMSCore::Logger::log<char [51]>((uint64_t)__p[0], 4u, (uint64_t)"metrics", 7, "Failed to get account storefront for metrics event");
    uint64_t v17 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    goto LABEL_35;
  }
  if (!*(void *)v3) {
    goto LABEL_25;
  }
  (*(void (**)(void **__return_ptr))(**(void **)v3 + 128))(__p);
  if (v26)
  {
    int v16 = (void **)(v2 + 456);
    *(unsigned char *)(v2 + 456) = 0;
    *(unsigned char *)(v2 + 480) = 0;
    if (SHIBYTE(v25) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v2 + 456), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      *(_OWORD *)int v16 = *(_OWORD *)__p;
      *(void *)(v2 + 472) = v25;
    }
    *(unsigned char *)(v2 + 480) = 1;
    AMSCore::IMetricsProvider::Event::withStorefrontHeader(*(void *)(v2 + 544), v2 + 456);
    if (*(unsigned char *)(v2 + 480) && *(char *)(v2 + 479) < 0) {
      operator delete(*v16);
    }
    if (v26 && SHIBYTE(v25) < 0) {
      operator delete(__p[0]);
    }
  }
LABEL_35:
  uint64_t v18 = *(void *)(v2 + 376);
  if (*(unsigned char *)(v2 + 448))
  {
    *(void *)uint64_t v3 = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  else
  {
    (*(void (**)(uint64_t))v18)(v3);
  }
  AMSCore::MetricFormatter::formatTimes(*(void *)(v2 + 544) + 72, (void *)(*(void *)(v2 + 544) + 128));
  if (*(unsigned char *)(v2 + 48)) {
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v2 + 24, *(unsigned int **)(v2 + 32));
  }
  size_t v19 = *(void **)(v2 + 544);
  *(void *)(v2 + 24) = v19[9];
  uint64_t v20 = v19 + 10;
  uint64_t v21 = v19[10];
  *(void *)(v2 + 32) = v21;
  uint64_t v22 = v2 + 32;
  uint64_t v23 = v19[11];
  *(void *)(v2 + 40) = v23;
  if (v23)
  {
    *(void *)(v21 + 16) = v22;
    v19[9] = v20;
    *uint64_t v20 = 0;
    v19[11] = 0;
  }
  else
  {
    *(void *)(v2 + 24) = v22;
  }
  *(unsigned char *)(v2 + 48) = 1;
  *(void *)(v2 + 376) = v2 + 16;
  *(void *)uint64_t v2 = 0;
  return AMSCore::Task<std::map<std::string,AMSCore::Any>,void>::Promise::Awaiter::await_suspend(v3);
}

void sub_18DB2A99C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (*(unsigned char *)(v16 + 480) && *(char *)(v16 + 479) < 0) {
    operator delete(*v17);
  }
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  std::expected<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](v15);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::IMetricsProvider::Event::takeProperties(char *a1)
{
  if (!*(void *)a1) {
    goto LABEL_12;
  }
  uint64_t v2 = *((void *)a1 + 70);
  if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)a1 + 70);
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a1 + 67);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if ((a1[511] & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (a1[511] < 0) {
LABEL_8:
  }
    operator delete(*((void **)a1 + 61));
LABEL_9:
  char v5 = (std::__shared_weak_count *)*((void *)a1 + 65);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_12:
  long long v6 = (char *)*((void *)a1 + 11);
  if (v6 == a1 + 64)
  {
    (*(void (**)(char *))(*((void *)a1 + 8) + 32))(a1 + 64);
    if (a1[48]) {
LABEL_16:
    }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)(a1 + 24), *((unsigned int **)a1 + 4));
  }
  else
  {
    if (v6) {
      (*(void (**)(char *))(*(void *)v6 + 40))(v6);
    }
    if (a1[48]) {
      goto LABEL_16;
    }
  }
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (a1[368]) {
    AMSCore::URL::~URL((AMSCore::URL *)(a1 + 216));
  }
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)a1 + 23));
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)a1 + 20));
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)a1 + 17));
  operator delete(a1);
}

uint64_t AMSCore::IMetricsProvider::Event::withStorefrontHeader(uint64_t a1, uint64_t a2)
{
  HIBYTE(v8[2]) = 16;
  strcpy((char *)v8, "storeFrontHeader");
  LOBYTE(__p[0]) = 0;
  char v7 = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    *(_OWORD *)std::runtime_error __p = *(_OWORD *)a2;
    uint64_t v6 = *(void *)(a2 + 16);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    char v7 = 1;
    std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>((void **)(a1 + 72), v8, (long long *)__p);
    if (v7 && SHIBYTE(v6) < 0) {
      operator delete(__p[0]);
    }
    if ((SHIBYTE(v8[2]) & 0x80000000) == 0) {
      return a1;
    }
LABEL_10:
    operator delete((void *)v8[0]);
    return a1;
  }
  uint64_t v4 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(a1 + 72, (const void **)v8);
  if ((uint64_t *)(a1 + 80) != v4) {
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase((void *)(a1 + 72), (uint64_t)v4);
  }
  std::__tree<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricFormatter::FormatOption>>>::__erase_unique<std::string>((void *)(a1 + 128), (const void **)v8);
  if (SHIBYTE(v8[2]) < 0) {
    goto LABEL_10;
  }
  return a1;
}

uint64_t AMSCore::Task<std::map<std::string,AMSCore::Any>,void>::Promise::Awaiter::await_suspend(uint64_t result)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void (**)(void))atomic_exchange((atomic_ullong *volatile)(*(void *)result + 40), 1uLL);
  if (v1)
  {
    uint64_t v2 = result;
    if (v1 == (void (**)(void))2) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result - 8))(*(void *)result - 16);
    }
    uint64_t v4 = (uint64_t *)(*(void *)result + 72);
    uint64_t v3 = *v4;
    if (*v4)
    {
      if (v3 == *(void *)v2 + 48)
      {
        uint64_t v13 = v12;
        (*(void (**)(uint64_t, void *))(*(void *)v3 + 24))(v3, v12);
      }
      else
      {
        uint64_t v13 = *(void **)(*(void *)v2 + 72);
        uint64_t *v4 = 0;
      }
    }
    else
    {
      uint64_t v13 = 0;
    }
    char v5 = v13;
    if (v13)
    {
      uint64_t v6 = *(void **)v2;
      if (*(unsigned char *)(*(void *)v2 + 32))
      {
        char v7 = v6 + 2;
        uint64_t v8 = v6[2];
        uint64_t v9 = (unsigned int **)v6[1];
        uint64_t v10 = (unsigned int *)v8;
        if (v6[3])
        {
          *(void *)(v8 + 16) = &v10;
          v6[1] = v7;
          void *v7 = 0;
          v6[3] = 0;
          char v5 = v13;
          if (!v13) {
            std::__throw_bad_function_call[abi:fe180100]();
          }
        }
        else
        {
          uint64_t v9 = &v10;
        }
        (*(void (**)(void *, unsigned int ***))(*v5 + 48))(v5, &v9);
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v9, v10);
        goto LABEL_18;
      }
      __break(1u);
    }
    (*v1)(v1);
LABEL_18:
    uint64_t result = (uint64_t)v13;
    if (v13 == v12)
    {
      return (*(uint64_t (**)(void *))(v12[0] + 32))(v12);
    }
    else if (v13)
    {
      return (*(uint64_t (**)(void *))(*v13 + 40))(v13);
    }
  }
  return result;
}

void sub_18DB2AEE4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::map<std::string,AMSCore::Any>,void>::Promise *,AMSCore::Task<std::map<std::string,AMSCore::Any>,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::map<std::string,AMSCore::Any>,void>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINSt3__13mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_3AnyENS"
                     "1_4lessIvEENS6_INS1_4pairIKS8_S9_EEEEEEvE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINSt3__13mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEE"
                                "ENS_3AnyENS1_4lessIvEENS6_INS1_4pairIKS8_S9_EEEEEEvE7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINSt3__13mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_3AnyENS1_4lessIvEENS6_INS1_4pairIKS8_S9_EEEEEEvE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINSt3__13mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_3AnyENS1_4lessIvEENS6_INS1_4pairIKS8_S9_EEEEEEvE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::map<std::string,AMSCore::Any>,void>::Promise *,AMSCore::Task<std::map<std::string,AMSCore::Any>,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::map<std::string,AMSCore::Any>,void>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 40), 2uLL)) {
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::Task<std::map<std::string,AMSCore::Any>,void>::Promise *,AMSCore::Task<std::map<std::string,AMSCore::Any>,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::map<std::string,AMSCore::Any>,void>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void AMSCore::MetricsProvider::cancel(AMSCore::MetricsProvider *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 144);
  std::mutex::lock((std::mutex *)((char *)this + 144));
  unint64_t v3 = (char *)*((void *)this + 26);
  uint64_t v4 = (char *)this + 216;
  if (v3 != (char *)this + 216)
  {
    do
    {
      atomic_store(1u, *((unsigned __int8 **)v3 + 7));
      char v5 = (char *)*((void *)v3 + 1);
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          char v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (char *)*((void *)v3 + 2);
          BOOL v7 = *(void *)v6 == (void)v3;
          unint64_t v3 = v6;
        }
        while (!v7);
      }
      unint64_t v3 = v6;
    }
    while (v6 != v4);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>>>::destroy(*((char **)this + 27));
  *((void *)this + 27) = 0;
  *((void *)this + 28) = 0;
  *((void *)this + 26) = v4;
  std::mutex::unlock(v2);
}

void AMSCore::MetricsProvider::dropQueuedEvents(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (char *)operator new(0xE0uLL);
  *(void *)unint64_t v3 = AMSCore::MetricsProvider::dropQueuedEvents;
  *((void *)v3 + 1) = AMSCore::MetricsProvider::dropQueuedEvents;
  v3[152] = 0;
  v3[176] = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    *(_OWORD *)(v3 + 152) = *(_OWORD *)a2;
    *((void *)v3 + 21) = *(void *)(a2 + 16);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    v3[176] = 1;
  }
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  v3[24] = 0;
  v3[104] = 0;
  *((void *)v3 + 14) = 0;
  *((void *)v3 + 18) = 0;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v4, (uint64_t)(v3 + 16));
}

void sub_18DB2B464(void *a1)
{
}

void sub_18DB2B474()
{
}

void AMSCore::MetricsProvider::dropQueuedEvents(char *__p)
{
  uint64_t v2 = __p + 120;
  unint64_t v3 = (char *)*((void *)__p + 18);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  if (__p[104]) {
    BOOL v4 = __p[96] == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    (**((void (***)(void))__p + 3))();
  }
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (__p[176] && __p[175] < 0) {
    operator delete(*((void **)__p + 19));
  }
  operator delete(__p);
}

void AMSCore::MetricsProvider::flushQueuedEvents(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  BOOL v4 = operator new(0x250uLL);
  void *v4 = AMSCore::MetricsProvider::flushQueuedEvents;
  v4[1] = AMSCore::MetricsProvider::flushQueuedEvents;
  v4[66] = a1;
  int v5 = *(unsigned __int8 *)(a2 + 24);
  *((unsigned char *)v4 + 584) = v5;
  if (v5)
  {
    v4[64] = *(void *)(a2 + 8);
    *(void *)((char *)v4 + 519) = *(void *)(a2 + 15);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
  }
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *((unsigned char *)v4 + 24) = 0;
  *((unsigned char *)v4 + 104) = 0;
  v4[14] = 0;
  v4[18] = 0;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v6, (uint64_t)(v4 + 2));
}

void sub_18DB2C4D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  if (a2)
  {
    AMSCore::Error::~Error((AMSCore::Error *)&a45);
    std::optional<AMSCore::Error>::~optional(v45 - 192);
    std::expected<std::vector<std::string>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&a35);
    std::vector<std::string>::~vector[abi:fe180100](a10);
    __cxa_begin_catch(exception_object);
    AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::MetricsProvider::flushQueuedEvents(char *a1)
{
  uint64_t v1 = *((void *)a1 + 70);
  if (!*(unsigned char *)(v1 + 88))
  {
LABEL_103:
    __break(1u);
    return;
  }
  uint64_t v3 = (uint64_t)(a1 + 152);
  BOOL v4 = (std::runtime_error *)(a1 + 232);
  int v5 = (const std::runtime_error *)(a1 + 312);
  uint64_t v61 = a1 + 384;
  std::runtime_error v6 = (std::string *)(a1 + 416);
  uint64_t v62 = a1 + 464;
  long long v59 = a1 + 496;
  unint64_t v60 = a1 + 480;
  uint64_t v51 = a1 + 248;
  uint64_t v52 = a1 + 272;
  uint64_t v7 = (std::runtime_error *)(a1 + 24);
  uint64_t v8 = a1 + 344;
  uint64_t v54 = a1 + 352;
  long long v55 = a1 + 64;
  char v57 = a1 + 328;
  std::runtime_error v58 = a1 + 40;
  uint64_t v56 = a1 + 368;
  uint64_t v53 = (uint64_t)(a1 + 184);
  char v49 = a1 + 16;
  uint64_t v50 = a1 + 527;
  while (1)
  {
    char v9 = *(unsigned char *)(v1 + 80);
    if (!v9)
    {
      std::runtime_error::runtime_error(v4, (const std::runtime_error *)(v1 + 8));
      _OWORD *v51 = *(_OWORD *)(v1 + 24);
      uint64_t v10 = (void *)(v1 + 48);
      uint64_t v11 = *(void *)(v1 + 48);
      *((void *)a1 + 29) = &unk_1EDC827D8;
      *((void *)a1 + 33) = *(void *)(v1 + 40);
      *((void *)a1 + 34) = v11;
      uint64_t v12 = *(void *)(v1 + 56);
      *((void *)a1 + 35) = v12;
      if (v12)
      {
        *(void *)(v11 + 16) = v52;
        *(void *)(v1 + 40) = v10;
        void *v10 = 0;
        *(void *)(v1 + 56) = 0;
      }
      else
      {
        *((void *)a1 + 33) = v52;
      }
      uint64_t v13 = *((void *)a1 + 70);
      *((_OWORD *)a1 + 18) = *(_OWORD *)(v13 + 64);
      *(void *)(v13 + 64) = 0;
      *(void *)(v13 + 72) = 0;
    }
    a1[304] = v9;
    uint64_t v14 = *((void *)a1 + 71);
    if (v14 && !atomic_fetch_add((atomic_ullong *volatile)(v14 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v16 = (std::__shared_weak_count *)*((void *)a1 + 71);
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      uint64_t v15 = (std::__shared_weak_count *)*((void *)a1 + 20);
      if (!v15) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v15 = (std::__shared_weak_count *)*((void *)a1 + 20);
      if (!v15) {
        goto LABEL_15;
      }
    }
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
LABEL_15:
    uint64_t v17 = (std::__shared_weak_count *)*((void *)a1 + 63);
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      uint64_t v18 = (std::__shared_weak_count *)*((void *)a1 + 61);
      if (!v18) {
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v18 = (std::__shared_weak_count *)*((void *)a1 + 61);
      if (!v18) {
        goto LABEL_21;
      }
    }
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
LABEL_21:
    size_t v19 = (std::__shared_weak_count *)*((void *)a1 + 51);
    if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      uint64_t v20 = (std::__shared_weak_count *)*((void *)a1 + 49);
      if (!v20) {
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v20 = (std::__shared_weak_count *)*((void *)a1 + 49);
      if (!v20) {
        goto LABEL_27;
      }
    }
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
LABEL_27:
    if (a1[439] < 0)
    {
      operator delete(v6->__r_.__value_.__l.__data_);
      uint64_t v21 = (std::__shared_weak_count *)*((void *)a1 + 59);
      if (!v21) {
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v21 = (std::__shared_weak_count *)*((void *)a1 + 59);
      if (!v21) {
        goto LABEL_32;
      }
    }
    if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      uint64_t v22 = (std::__shared_weak_count *)*((void *)a1 + 40);
      if (!v22) {
        goto LABEL_36;
      }
      goto LABEL_33;
    }
LABEL_32:
    uint64_t v22 = (std::__shared_weak_count *)*((void *)a1 + 40);
    if (!v22) {
      goto LABEL_36;
    }
LABEL_33:
    if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
LABEL_36:
    AMSCore::nestedError<std::expected<void,AMSCore::Error> &,char const(&)[35],std::string const&>((unsigned char *)v3, (uint64_t)v4, 3, (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance, *((void *)a1 + 69));
    int v23 = a1[224];
    if (!a1[224])
    {
      int v27 = 0;
      if (a1[304]) {
        goto LABEL_53;
      }
LABEL_52:
      ((void (*)(std::runtime_error *))v4->~runtime_error)(v4);
      goto LABEL_53;
    }
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v5, v3);
    if (a1[104])
    {
      if (!a1[96]) {
        ((void (*)(std::runtime_error *))v7->~runtime_error)(v7);
      }
      a1[104] = 0;
    }
    std::runtime_error::runtime_error(v7, v5);
    *std::runtime_error v58 = *v57;
    *((void *)a1 + 3) = &unk_1EDC827D8;
    uint64_t v24 = *((void *)a1 + 44);
    *((void *)a1 + 7) = *((void *)a1 + 43);
    *((void *)a1 + 8) = v24;
    uint64_t v25 = *((void *)a1 + 45);
    *((void *)a1 + 9) = v25;
    if (v25)
    {
      *(void *)(v24 + 16) = v55;
      uint64_t v24 = 0;
      uint64_t v26 = (uint64_t)v8;
      void *v8 = v54;
      void *v54 = 0;
      v54[1] = 0;
    }
    else
    {
      *((void *)a1 + 7) = v55;
      uint64_t v26 = (uint64_t)v8;
    }
    *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 23);
    void *v56 = 0;
    v56[1] = 0;
    a1[96] = 0;
    a1[104] = 1;
    *((void *)a1 + 39) = &unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v26, (unsigned int *)v24);
    MEMORY[0x192FA3C30](v5);
    if (a1[224])
    {
      *((void *)a1 + 19) = &unk_1EDC827D8;
      std::string v28 = (std::__shared_weak_count *)*((void *)a1 + 27);
      if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v53, *((unsigned int **)a1 + 24));
      MEMORY[0x192FA3C30](v3);
    }
    int v27 = 3;
    if (!a1[304]) {
      goto LABEL_52;
    }
LABEL_53:
    if (v23) {
      goto LABEL_74;
    }
    uint64_t v29 = *((void *)a1 + 69);
    int v30 = (long long *)(v29 + 24);
    if (v29 + 24 == *((void *)a1 + 67)) {
      break;
    }
    *((void *)a1 + 69) = v30;
    std::string v31 = *(std::__shared_weak_count **)(*((void *)a1 + 66) + 16);
    if (!v31 || (unint64_t v32 = std::__shared_weak_count::lock(v31)) == 0) {
      std::__throw_bad_weak_ptr[abi:fe180100]();
    }
    uint64_t v33 = (void *)*((void *)a1 + 66);
    *((void *)a1 + 58) = v33[7];
    *((void *)a1 + 59) = v32;
    v5->__vftable = 0;
    v5->__imp_.__imp_ = 0;
    if (*(char *)(v29 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(v29 + 24), *(void *)(v29 + 32));
      uint64_t v33 = (void *)*((void *)a1 + 66);
    }
    else
    {
      long long v34 = *v30;
      v6->__r_.__value_.__r.__words[2] = *(void *)(v29 + 40);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v34;
    }
    uint64_t v35 = v33[4];
    *((void *)a1 + 48) = v33[3];
    *((void *)a1 + 49) = v35;
    if (v35)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
      uint64_t v33 = (void *)*((void *)a1 + 66);
    }
    uint64_t v37 = v33[5];
    uint64_t v36 = v33[6];
    *((void *)a1 + 50) = v37;
    *((void *)a1 + 51) = v36;
    if (v36) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v38 = operator new(0x20uLL);
    unint64_t v39 = (void *)*((void *)a1 + 66);
    v38[1] = 0;
    v38[2] = 0;
    void *v38 = &unk_1EDC84320;
    *((unsigned char *)v38 + 24) = 0;
    *((void *)a1 + 60) = v38 + 3;
    *((void *)a1 + 61) = v38;
    uint64_t v40 = v39[13];
    *((void *)a1 + 62) = v39[12];
    *((void *)a1 + 63) = v40;
    if (v40)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
      unint64_t v39 = (void *)*((void *)a1 + 66);
    }
    uint64_t v41 = v39[11];
    if (!v41) {
      std::__throw_bad_function_call[abi:fe180100]();
    }
    (*(void (**)(uint64_t, char *, std::string *, char *, char *, char *))(*(void *)v41 + 48))(v41, v62, v6, v61, v60, v59);
    long long v42 = *(_OWORD *)(a1 + 152);
    *((_OWORD *)a1 + 35) = v42;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    if (!atomic_load_explicit((atomic_ullong *volatile)(v42 + 96), memory_order_acquire))
    {
      *uint64_t v50 = 0;
      if (!atomic_exchange((atomic_ullong *volatile)(*((void *)a1 + 70) + 96), (unint64_t)a1)) {
        return;
      }
    }
    uint64_t v1 = *((void *)a1 + 70);
    if (!*(unsigned char *)(v1 + 88)) {
      goto LABEL_103;
    }
  }
  if (a1[104] && !a1[96]) {
    ((void (*)(std::runtime_error *))v7->~runtime_error)(v7);
  }
  a1[96] = 1;
  a1[104] = 1;
  int v27 = 3;
LABEL_74:
  char v43 = (void *)*((void *)a1 + 68);
  int v44 = a1[585];
  uint64_t v45 = (void **)*((void *)a1 + 55);
  if (v45)
  {
    for (uint64_t i = (void **)*((void *)a1 + 56); i != v45; i -= 3)
    {
      if (*((char *)i - 1) < 0) {
        operator delete(*(i - 3));
      }
    }
    operator delete(v45);
  }
  if (v27 == 3)
  {
    *((void *)a1 + 72) = v43;
    a1[586] = v44;
    *((void *)a1 + 19) = v49;
    *(void *)a1 = 0;
    AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v3);
    return;
  }
  uint64_t v47 = (char *)*((void *)a1 + 18);
  if (v47 == a1 + 120)
  {
    (*(void (**)(char *))(*((void *)a1 + 15) + 32))(a1 + 120);
    if (a1[104]) {
      goto LABEL_91;
    }
  }
  else
  {
    if (v47) {
      (*(void (**)(char *))(*(void *)v47 + 40))(v47);
    }
    if (!a1[104]) {
      goto LABEL_93;
    }
LABEL_91:
    if (!a1[96]) {
      ((void (*)(std::runtime_error *))v7->~runtime_error)(v7);
    }
  }
LABEL_93:
  int v48 = a1[584];
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v48 && v44 < 0) {
    operator delete(v43);
  }
  operator delete(a1);
}

void sub_18DB2CF30(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](*(void *)(v11 - 88));
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v10);
  std::vector<std::string>::~vector[abi:fe180100](a10);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DB2CFE4()
{
}

void AMSCore::MetricsProvider::flushQueuedEvents(char *__p)
{
  if (!*(void *)__p)
  {
    uint64_t v11 = (void *)*((void *)__p + 72);
    char v12 = __p[586];
    goto LABEL_35;
  }
  uint64_t v2 = *((void *)__p + 71);
  if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 71);
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  BOOL v4 = (std::__shared_weak_count *)*((void *)__p + 20);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  int v5 = (std::__shared_weak_count *)*((void *)__p + 63);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  std::runtime_error v6 = (std::__shared_weak_count *)*((void *)__p + 61);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)__p + 51);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)__p + 49);
  if (!v8 || atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((__p[439] & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (__p[439] < 0) {
LABEL_20:
  }
    operator delete(*((void **)__p + 52));
LABEL_21:
  char v9 = (std::__shared_weak_count *)*((void *)__p + 59);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)__p + 40);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = (void *)*((void *)__p + 68);
  char v12 = __p[585];
  uint64_t v13 = (void **)*((void *)__p + 55);
  if (v13)
  {
    for (uint64_t i = (void **)*((void *)__p + 56); i != v13; i -= 3)
    {
      if (*((char *)i - 1) < 0) {
        operator delete(*(i - 3));
      }
    }
    operator delete(v13);
  }
LABEL_35:
  uint64_t v15 = (char *)*((void *)__p + 18);
  if (v15 == __p + 120)
  {
    (*(void (**)(char *))(*((void *)__p + 15) + 32))(__p + 120);
    if (!__p[104]) {
      goto LABEL_43;
    }
    goto LABEL_41;
  }
  if (v15) {
    (*(void (**)(char *))(*(void *)v15 + 40))(v15);
  }
  if (__p[104])
  {
LABEL_41:
    if (!__p[96]) {
      (**((void (***)(void))__p + 3))();
    }
  }
LABEL_43:
  int v16 = __p[584];
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v16 && v12 < 0) {
    operator delete(v11);
  }
  operator delete(__p);
}

uint64_t std::expected<std::vector<std::string>,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  uint64_t v2 = *(void (***)(uint64_t))a1;
  if (*(unsigned char *)(a1 + 72))
  {
    if (v2)
    {
      uint64_t v3 = *(void (***)(uint64_t))(a1 + 8);
      BOOL v4 = *(void (***)(uint64_t))a1;
      if (v3 != v2)
      {
        do
        {
          if (*((char *)v3 - 1) < 0) {
            operator delete(*(v3 - 3));
          }
          v3 -= 3;
        }
        while (v3 != v2);
        BOOL v4 = *(void (***)(uint64_t))a1;
      }
      *(void *)(a1 + 8) = v2;
      operator delete(v4);
    }
  }
  else
  {
    (*v2)(a1);
  }
  return a1;
}

unsigned char *AMSCore::nestedError<std::expected<void,AMSCore::Error> &,char const(&)[35],std::string const&>(unsigned char *result, uint64_t a2, uint64_t a3, const std::error_category *a4, uint64_t a5)
{
  if (!*(unsigned char *)(a2 + 72))
  {
    std::runtime_error::runtime_error(&v23, (const std::runtime_error *)a2);
    char v9 = (void *)(a2 + 40);
    uint64_t v10 = *(void *)(a2 + 40);
    long long v24 = *(_OWORD *)(a2 + 16);
    uint64_t v11 = *(uint64_t **)(a2 + 32);
    v23.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v25 = v11;
    uint64_t v26 = v10;
    uint64_t v27 = *(void *)(a2 + 48);
    if (v27)
    {
      *(void *)(v10 + 16) = &v26;
      *(void *)(a2 + 32) = v9;
      void *v9 = 0;
      *(void *)(a2 + 48) = 0;
    }
    else
    {
      uint64_t v25 = &v26;
    }
    long long v28 = *(_OWORD *)(a2 + 56);
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    char v29 = 1;
    std::runtime_error::runtime_error(&v15, &v23);
    long long v16 = v24;
    v15.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v17 = v25;
    v18[0] = v26;
    v18[1] = v27;
    if (v27)
    {
      *(void *)(v26 + 16) = v18;
      uint64_t v25 = &v26;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
    }
    else
    {
      uint64_t v17 = v18;
    }
    long long v19 = v28;
    long long v28 = 0uLL;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v31);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v31, (uint64_t)"failed to flush events for topic: ", 34);
    int v12 = *(char *)(a5 + 23);
    if (v12 >= 0) {
      uint64_t v13 = a5;
    }
    else {
      uint64_t v13 = *(void *)a5;
    }
    if (v12 >= 0) {
      uint64_t v14 = *(unsigned __int8 *)(a5 + 23);
    }
    else {
      uint64_t v14 = *(void *)(a5 + 8);
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v31, v13, v14);
    std::stringbuf::str[abi:fe180100]((uint64_t)v32, &__what_arg);
    uint64_t v31 = *MEMORY[0x1E4FBA418];
    *(void *)((char *)&v32[-1] + *(void *)(v31 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v32[0] = MEMORY[0x1E4FBA470] + 16;
    if (v33 < 0) {
      operator delete((void *)v32[8]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x192FA3FD0](&v34);
    *(void *)&v35.__val_ = a3;
    v35.__cat_ = a4;
    std::system_error::system_error(&v20, v35, &__what_arg);
    if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__what_arg.__r_.__value_.__l.__data_);
    }
    v22[0] = 0;
    v22[1] = 0;
    v20.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
    uint64_t v21 = v22;
    operator new();
  }
  void *result = 0;
  result[72] = 0;
  return result;
}

void sub_18DB2D998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,unsigned int *a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v43, a24);
  MEMORY[0x192FA3C30](&a19);
  AMSCore::Error::~Error((AMSCore::Error *)&a10);
  std::optional<AMSCore::Error>::~optional((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AMSCore::StopToken>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC84320;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::StopToken>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC84320;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AMSCore::MetricsProvider::enqueueEvents(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  BOOL v4 = operator new(0x1C0uLL);
  void *v4 = &AMSCore::MetricsProvider::enqueueEvents;
  v4[1] = AMSCore::MetricsProvider::enqueueEvents;
  uint64_t v5 = *a2;
  v4[46] = a1;
  v4[47] = v5;
  *((_OWORD *)v4 + 24) = *(_OWORD *)(a2 + 1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *((unsigned char *)v4 + 24) = 0;
  *((unsigned char *)v4 + 104) = 0;
  v4[14] = 0;
  v4[18] = 0;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v6, (uint64_t)(v4 + 2));
}

void sub_18DB2E5C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, void (***a11)(void), uint64_t a12, uint64_t a13, char a14)
{
  if (a2)
  {
    std::expected<std::map<std::string,AMSCore::MetricsEventModifier::TopicModifier>,AMSCore::Error>::~expected[abi:fe180100](a12);
    if (!*(unsigned char *)(v14 + 320)) {
      (**a11)(a11);
    }
    __cxa_begin_catch(exception_object);
    AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
  }
  _Unwind_Resume(exception_object);
}

#error "18DB2EDD8: call analysis failed (funcsize=554)"

void sub_18DB2EF4C(void *a1)
{
  std::expected<std::map<std::string,AMSCore::MetricsEventModifier::TopicModifier>,AMSCore::Error>::~expected[abi:fe180100](v2);
  if (!*(unsigned char *)(v1 + 320)) {
    (**v3)(v3);
  }
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DB2EFC0()
{
}

void AMSCore::MetricsProvider::enqueueEvents(void *__p)
{
  uint64_t v2 = (void (***)(void))(__p + 31);
  if (*__p)
  {
    if (*((unsigned char *)__p + 440))
    {
      uint64_t v3 = __p[51];
      if (v3 && !atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        BOOL v4 = (std::__shared_weak_count *)__p[51];
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      uint64_t v5 = (std::__shared_weak_count *)__p[45];
      if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      std::runtime_error v6 = (void *)__p[41];
      if (v6)
      {
        uint64_t v7 = (void *)__p[42];
        while (v7 != v6)
        {
          uint64_t v9 = *--v7;
          uint64_t v8 = v9;
          void *v7 = 0;
          if (v9) {
            (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
          }
        }
        __p[42] = v6;
        operator delete(v6);
      }
      if (!*((unsigned char *)__p + 320)) {
        (**v2)(v2);
      }
      uint64_t v11 = 0;
      uint64_t v10 = 0;
    }
    else
    {
      if (!*((unsigned char *)__p + 240)) {
        (*(void (**)(void))__p[21])();
      }
      int v12 = (std::__shared_weak_count *)__p[20];
      if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      uint64_t v13 = (std::__shared_weak_count *)__p[45];
      if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      uint64_t v10 = (void *)__p[47];
      uint64_t v11 = (void *)__p[48];
    }
  }
  else
  {
    uint64_t v11 = (void *)__p[53];
    uint64_t v10 = (void *)__p[54];
  }
  uint64_t v14 = (void *)__p[18];
  if (v14 == __p + 15)
  {
    (*(void (**)(char *))(__p[15] + 32))((char *)__p + 120);
    if (!*((unsigned char *)__p + 104)) {
      goto LABEL_36;
    }
    goto LABEL_34;
  }
  if (v14) {
    (*(void (**)(void *))(*v14 + 40))(v14);
  }
  if (*((unsigned char *)__p + 104))
  {
LABEL_34:
    if (!*((unsigned char *)__p + 96)) {
      (*(void (**)(void))__p[3])();
    }
  }
LABEL_36:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v10)
  {
    while (v11 != v10)
    {
      uint64_t v16 = *--v11;
      uint64_t v15 = v16;
      void *v11 = 0;
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
    }
    operator delete(v10);
  }
  operator delete(__p);
}

void AMSCore::MetricsProvider::saveToDatabase(int a1, uint64_t a2, void *a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,AMSCore::MetricsEventModifier::EventModifier *a42)
{
  uint64_t v44 = operator new(0x4C8uLL);
  *uint64_t v44 = AMSCore::MetricsProvider::saveToDatabase;
  v44[1] = AMSCore::MetricsProvider::saveToDatabase;
  v44[142] = a2;
  uint64_t v45 = a3[1];
  v44[143] = *a3;
  v44[144] = v45;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *((unsigned char *)v44 + 24) = 0;
  *((unsigned char *)v44 + 104) = 0;
  v44[14] = 0;
  v44[18] = 0;
  operator new();
}

void sub_18DB30604(void *a1)
{
}

void sub_18DB30618()
{
}

void sub_18DB30620()
{
}

void sub_18DB30650(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void **a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,AMSCore::MetricsEventModifier::EventModifier *a38,uint64_t a39,uint64_t a40,uint64_t a41,AMSCore::MetricsEventModifier::EventModifier *a42)
{
  AMSCore::MetricsEventModifier::EventModifier::~EventModifier(a38);
  if (*(char *)(v42 + 983) < 0) {
    operator delete(*a32);
  }
  if (*(char *)(v42 + 1007) < 0) {
    operator delete(*v43);
  }
  AMSCore::MetricsEventModifier::EventModifier::~EventModifier(a42);
  JUMPOUT(0x18DB306C0);
}

void sub_18DB30664()
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v0);
  JUMPOUT(0x18DB306A4);
}

void sub_18DB306B4()
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v0);
  JUMPOUT(0x18DB306C0);
}

void sub_18DB306EC()
{
}

unsigned char *AMSCore::nestedError<std::expected<std::map<std::string,AMSCore::MetricsEventModifier::TopicModifier>,AMSCore::Error> &>(unsigned char *result, uint64_t a2, uint64_t a3, const std::error_category *a4)
{
  if (!*(unsigned char *)(a2 + 72))
  {
    std::runtime_error::runtime_error(&v16, (const std::runtime_error *)a2);
    uint64_t v7 = (void *)(a2 + 40);
    uint64_t v8 = *(void *)(a2 + 40);
    long long v17 = *(_OWORD *)(a2 + 16);
    uint64_t v9 = *(uint64_t **)(a2 + 32);
    v16.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v18 = v9;
    uint64_t v19 = v8;
    uint64_t v20 = *(void *)(a2 + 48);
    if (v20)
    {
      *(void *)(v8 + 16) = &v19;
      *(void *)(a2 + 32) = v7;
      void *v7 = 0;
      *(void *)(a2 + 48) = 0;
    }
    else
    {
      uint64_t v18 = &v19;
    }
    long long v21 = *(_OWORD *)(a2 + 56);
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    char v22 = 1;
    std::runtime_error::runtime_error(&v10, &v16);
    long long v11 = v17;
    v10.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    int v12 = v18;
    v13[0] = v19;
    v13[1] = v20;
    if (v20)
    {
      *(void *)(v19 + 16) = v13;
      uint64_t v18 = &v19;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
    }
    else
    {
      int v12 = v13;
    }
    long long v14 = v21;
    long long v21 = 0uLL;
    AMSCore::Error::Error<>((uint64_t)&v15, (uint64_t)&v10, a3, a4);
  }
  void *result = 0;
  result[72] = 0;
  return result;
}

void sub_18DB309F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void AMSCore::MetricsProvider::startFlushTaskForTopic(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  uint64_t v61 = (std::mutex *)(a1 + 144);
  std::mutex::lock((std::mutex *)(a1 + 144));
  std::runtime_error v6 = (uint64_t **)(a1 + 216);
  uint64_t v7 = *(void *)(a1 + 216);
  if (!v7) {
    goto LABEL_40;
  }
  char v8 = *(unsigned char *)(a2 + 23);
  if (v8 >= 0) {
    uint64_t v9 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v9 = *(const std::string::value_type **)a2;
  }
  if (v8 >= 0) {
    size_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v10 = *(void *)(a2 + 8);
  }
  long long v11 = (uint64_t **)(a1 + 216);
  int v12 = *(uint64_t ***)(a1 + 216);
  do
  {
    while (1)
    {
      int v13 = *((char *)v12 + 55);
      long long v14 = v13 >= 0 ? (uint64_t *)(v12 + 4) : v12[4];
      size_t v15 = v13 >= 0 ? *((unsigned __int8 *)v12 + 55) : (size_t)v12[5];
      size_t v16 = v10 >= v15 ? v15 : v10;
      int v17 = memcmp(v14, v9, v16);
      if (v17) {
        break;
      }
      if (v15 >= v10) {
        goto LABEL_23;
      }
LABEL_9:
      int v12 = (uint64_t **)v12[1];
      if (!v12) {
        goto LABEL_24;
      }
    }
    if (v17 < 0) {
      goto LABEL_9;
    }
LABEL_23:
    long long v11 = v12;
    int v12 = (uint64_t **)*v12;
  }
  while (v12);
LABEL_24:
  if (v11 == v6) {
    goto LABEL_40;
  }
  uint64_t v20 = v11[4];
  uint64_t v19 = (uint64_t *)(v11 + 4);
  uint64_t v18 = v20;
  int v21 = *((char *)v19 + 23);
  if (v21 >= 0) {
    char v22 = v19;
  }
  else {
    char v22 = v18;
  }
  if (v21 >= 0) {
    size_t v23 = *((unsigned __int8 *)v19 + 23);
  }
  else {
    size_t v23 = v19[1];
  }
  if (v23 >= v10) {
    size_t v24 = v10;
  }
  else {
    size_t v24 = v23;
  }
  int v25 = memcmp(v9, v22, v24);
  if (!v25)
  {
    if (v10 < v23) {
      goto LABEL_40;
    }
LABEL_36:
    std::mutex::unlock(v61);
    return;
  }
  if ((v25 & 0x80000000) == 0) {
    goto LABEL_36;
  }
LABEL_40:
  uint64_t v60 = a3;
  uint64_t v26 = operator new(0x20uLL);
  v26[1] = 0;
  v26[2] = 0;
  *uint64_t v26 = &unk_1EDC84320;
  *((unsigned char *)v26 + 24) = 0;
  uint64_t v68 = (char *)(v26 + 3);
  uint64_t v69 = (std::__shared_weak_count *)v26;
  uint64_t v27 = (void *)(a1 + 216);
  if (v7)
  {
    int v28 = *(char *)(a2 + 23);
    if (v28 >= 0) {
      char v29 = (const std::string::value_type *)a2;
    }
    else {
      char v29 = *(const std::string::value_type **)a2;
    }
    if (v28 >= 0) {
      size_t v30 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v30 = *(void *)(a2 + 8);
    }
    while (1)
    {
      uint64_t v27 = (void *)v7;
      int v31 = *(char *)(v7 + 55);
      if (v31 >= 0) {
        unint64_t v32 = (const void *)(v7 + 32);
      }
      else {
        unint64_t v32 = *(const void **)(v7 + 32);
      }
      if (v31 >= 0) {
        size_t v33 = *(unsigned __int8 *)(v7 + 55);
      }
      else {
        size_t v33 = *(void *)(v7 + 40);
      }
      if (v33 >= v30) {
        size_t v34 = v30;
      }
      else {
        size_t v34 = v33;
      }
      int v35 = memcmp(v29, v32, v34);
      if (v35)
      {
        if (v35 < 0) {
          goto LABEL_47;
        }
LABEL_61:
        int v36 = memcmp(v32, v29, v34);
        if (v36)
        {
          if ((v36 & 0x80000000) == 0) {
            goto LABEL_73;
          }
        }
        else if (v33 >= v30)
        {
LABEL_73:
          uint64_t v37 = v27;
          goto LABEL_74;
        }
        uint64_t v7 = v27[1];
        if (!v7)
        {
          std::runtime_error v6 = (uint64_t **)(v27 + 1);
          break;
        }
      }
      else
      {
        if (v30 >= v33) {
          goto LABEL_61;
        }
LABEL_47:
        uint64_t v7 = *v27;
        std::runtime_error v6 = (uint64_t **)v27;
        if (!*v27) {
          break;
        }
      }
    }
  }
  uint64_t v37 = operator new(0x48uLL);
  uint64_t v38 = (std::string *)(v37 + 4);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v38, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v38->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v37[6] = *(void *)(a2 + 16);
  }
  v37[7] = 0;
  v37[8] = 0;
  void *v37 = 0;
  v37[1] = 0;
  v37[2] = v27;
  void *v6 = v37;
  uint64_t v39 = **(void **)(a1 + 208);
  uint64_t v40 = v37;
  if (v39)
  {
    *(void *)(a1 + 208) = v39;
    uint64_t v40 = *v6;
  }
  std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 216), v40);
  ++*(void *)(a1 + 224);
LABEL_74:
  atomic_fetch_add_explicit(v26 + 1, 1uLL, memory_order_relaxed);
  uint64_t v41 = (std::__shared_weak_count *)v37[8];
  v37[7] = v26 + 3;
  v37[8] = v26;
  if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  std::mutex::unlock(v61);
  AMSCore::ServiceProvider<AMSCore::ISchedulingProvider>::getDefault(&v72);
  uint64_t v42 = v72;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v62 = *(std::string *)a2;
  }
  uint64_t v43 = *(std::__shared_weak_count **)(a1 + 16);
  v63[0] = *(std::__shared_weak_count **)(a1 + 8);
  v63[1] = v43;
  if (v43) {
    atomic_fetch_add_explicit(&v43->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v44 = v68;
  uint64_t v45 = v69;
  char v64 = v68;
  std::runtime_error v65 = v69;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  std::runtime_error v79 = 0;
  char v46 = (char *)operator new(0x40uLL);
  *(void *)char v46 = &unk_1EDC83080;
  uint64_t v47 = (std::string *)(v46 + 8);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v47, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
    uint64_t v44 = v64;
    uint64_t v45 = v65;
  }
  else
  {
    *(_OWORD *)&v47->__r_.__value_.__l.__data_ = *(_OWORD *)&v62.__r_.__value_.__l.__data_;
    *((void *)v46 + 3) = *((void *)&v62.__r_.__value_.__l + 2);
  }
  *((_OWORD *)v46 + 2) = *(_OWORD *)v63;
  v63[0] = 0;
  v63[1] = 0;
  *((void *)v46 + 6) = v44;
  *((void *)v46 + 7) = v45;
  char v64 = 0;
  std::runtime_error v65 = 0;
  std::runtime_error v79 = v46;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, void *))(*(void *)v42 + 24))(v66, v42, v60, v78);
  if (v79 == v78)
  {
    (*(void (**)(void *))(v78[0] + 32))(v78);
    int v48 = v65;
    if (!v65) {
      goto LABEL_93;
    }
    goto LABEL_91;
  }
  if (v79) {
    (*(void (**)(void))(*v79 + 40))();
  }
  int v48 = v65;
  if (v65)
  {
LABEL_91:
    if (!atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
LABEL_93:
  if (v63[1]) {
    std::__shared_weak_count::__release_weak(v63[1]);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v62.__r_.__value_.__l.__data_);
    char v49 = (std::__shared_weak_count *)v73;
    if (!v73) {
      goto LABEL_100;
    }
  }
  else
  {
    char v49 = (std::__shared_weak_count *)v73;
    if (!v73)
    {
LABEL_100:
      if (!v67) {
        goto LABEL_101;
      }
      goto LABEL_122;
    }
  }
  if (atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_100;
  }
  ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
  std::__shared_weak_count::__release_weak(v49);
  if (!v67)
  {
LABEL_101:
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v70);
    uint64_t v50 = v70;
    if (*(unsigned __int8 *)(v70 + 8) <= 4u)
    {
      std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v72);
      uint64_t v51 = *(void *)(v72 - 24);
      {
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v72, (uint64_t)"failed to schedule flush for topic: ", 36);
      int v52 = *(char *)(a2 + 23);
      if (v52 >= 0) {
        uint64_t v53 = a2;
      }
      else {
        uint64_t v53 = *(void *)a2;
      }
      if (v52 >= 0) {
        uint64_t v54 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v54 = *(void *)(a2 + 8);
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v72, v53, v54);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v72, (uint64_t)" error: ", 8);
      AMSCore::operator<<(&v72, (uint64_t)v66);
      uint64_t v55 = v74;
      uint64_t v56 = (char *)&v72 + *(void *)(v72 - 24);
      if ((v56[32] & 5) != 0)
      {
        uint64_t v57 = -1;
      }
      else
      {
        (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v56 + 5) + 32))(&rep);
        uint64_t v57 = v84;
      }
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
      char v81 = 4;
      uint64_t v82 = v55;
      uint64_t v83 = v57;
      (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v50 + 16) + 16))(*(void *)(v50 + 16), "metrics", 7, &rep);
      uint64_t v72 = *MEMORY[0x1E4FBA418];
      *(uint64_t *)((char *)&v72 + *(void *)(v72 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      uint64_t v73 = MEMORY[0x1E4FBA470] + 16;
      if (v76 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x192FA3FD0](&v77);
    }
    std::runtime_error v58 = v71;
    if (v71 && !atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
    if (!v67) {
      (*(void (**)(void *))v66[0])(v66);
    }
  }
LABEL_122:
  long long v59 = v69;
  if (v69 && !atomic_fetch_add(&v69->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
    std::__shared_weak_count::__release_weak(v59);
  }
}

void sub_18DB312FC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>>>::destroy(*((void *)a1 + 1));
    if (a1[224]) {
      AMSCore::URL::~URL((AMSCore::URL *)(a1 + 72));
    }
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

uint64_t std::expected<std::map<std::string,AMSCore::MetricsEventModifier::TopicModifier>,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72)) {
    std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>>>::destroy(*(char **)(a1 + 8));
  }
  else {
    (**(void (***)(uint64_t))a1)(a1);
  }
  return a1;
}

uint64_t AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
LABEL_4:
  }
    std::__shared_weak_count::__release_weak(v3);
LABEL_5:
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__function::__func<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0,std::allocator<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0,std::allocator<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore15MetricsProvider22startFlushTaskForTopicERKNSt3__112basic_stringIcNS1_11char_traitsIcEEN"
                     "S1_9allocatorIcEEEENS1_6chrono8durationIxNS1_5ratioILl1ELl1000EEEEEE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore15MetricsProvider22startFlushTaskForTopicERKNSt3__112basic_stringIcNS1_11char_"
                                "traitsIcEENS1_9allocatorIcEEEENS1_6chrono8durationIxNS1_5ratioILl1ELl1000EEEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore15MetricsProvider22startFlushTaskForTopicERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_6chrono8durationIxNS1_5ratioILl1ELl1000EEEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore15MetricsProvider22startFlushTaskForTopicERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_6chrono8durationIxNS1_5ratioILl1ELl1000EEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0,std::allocator<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    unint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      BOOL v4 = v3;
      uint64_t v5 = *(void *)(a1 + 32);
      if (v5)
      {
        if (*(char *)(a1 + 31) < 0) {
          std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
        }
        else {
          std::string v7 = *(std::string *)(a1 + 8);
        }
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
        std::runtime_error v6 = (char *)operator new(0x268uLL);
        *(void *)std::runtime_error v6 = AMSCore::MetricsProvider::delayedFlushCallback;
        *((void *)v6 + 1) = AMSCore::MetricsProvider::delayedFlushCallback;
        *((void *)v6 + 71) = v5;
        *((std::string *)v6 + 20) = v7;
        memset(&v7, 0, sizeof(v7));
        atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
        *(_WORD *)(v6 + 17) = 0;
        *((void *)v6 + 3) = 0;
        *((void *)v6 + 7) = 0;
        std::shared_ptr<AMSCore::Task<void,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,void>::Promise,AMSCore::Task<void,void>::Promise::get_return_object(void)::DetachPromise,void>(&v8, (uint64_t)(v6 + 16));
      }
      if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_18DB31EF8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,char a21)
{
  if (!*(unsigned char *)(v21 + 392)) {
    (**v23)(v23);
  }
  if (!*(unsigned char *)(v21 + 312)) {
    (**v22)(v22);
  }
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t AMSCore::MetricsProvider::delayedFlushCallback(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = (_OWORD *)(result + 64);
  unint64_t v3 = (void (***)(void))(result + 240);
  BOOL v4 = (void (***)(void))(result + 320);
  uint64_t v5 = (std::string *)(result + 432);
  uint64_t v6 = result + 480;
  if (!*(unsigned char *)(result + 608))
  {
    uint64_t v13 = *(void *)(result + 576);
    if (!*(unsigned char *)(v13 + 88)) {
      goto LABEL_71;
    }
    char v14 = *(unsigned char *)(v13 + 80);
    if (!v14)
    {
      std::runtime_error::runtime_error((std::runtime_error *)(result + 240), (const std::runtime_error *)(v13 + 8));
      *(_OWORD *)(v1 + 256) = *(_OWORD *)(v13 + 24);
      *(void *)(v1 + 240) = &unk_1EDC827D8;
      size_t v15 = (void *)(v13 + 48);
      uint64_t v16 = *(void *)(v13 + 48);
      uint64_t v17 = v1 + 280;
      *(void *)(v1 + 272) = *(void *)(v13 + 40);
      *(void *)(v1 + 280) = v16;
      uint64_t v18 = *(void *)(v13 + 56);
      *(void *)(v1 + 288) = v18;
      if (v18)
      {
        *(void *)(v16 + 16) = v17;
        *(void *)(v13 + 40) = v15;
        *size_t v15 = 0;
        *(void *)(v13 + 56) = 0;
      }
      else
      {
        *(void *)(v1 + 272) = v17;
      }
      uint64_t v19 = *(void *)(v1 + 576);
      *(_OWORD *)(v1 + 296) = *(_OWORD *)(v19 + 64);
      *(void *)(v19 + 64) = 0;
      *(void *)(v19 + 72) = 0;
    }
    *(unsigned char *)(v1 + 312) = v14;
    uint64_t v20 = *(void *)(v1 + 584);
    if (v20 && !atomic_fetch_add((atomic_ullong *volatile)(v20 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v21 = *(std::__shared_weak_count **)(v1 + 584);
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    char v22 = *(std::__shared_weak_count **)(v1 + 328);
    if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    size_t v23 = *(std::__shared_weak_count **)(v1 + 528);
    if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    size_t v24 = *(std::__shared_weak_count **)(v1 + 512);
    if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    int v25 = *(std::__shared_weak_count **)(v1 + 424);
    if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    uint64_t v26 = *(std::__shared_weak_count **)(v1 + 408);
    if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      if ((*(char *)(v1 + 479) & 0x80000000) == 0) {
        goto LABEL_48;
      }
    }
    else if ((*(char *)(v1 + 479) & 0x80000000) == 0)
    {
LABEL_48:
      uint64_t v27 = *(std::__shared_weak_count **)(v1 + 544);
      if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
      int v28 = *(std::__shared_weak_count **)(v1 + 72);
      if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
        if (*(unsigned char *)(v1 + 312))
        {
LABEL_54:
          AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v35);
          AMSCore::Logger::log<char [22],std::string>(v35, v6);
          char v29 = v36;
          if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
          size_t v30 = (std::mutex *)(*(void *)(v1 + 568) + 144);
          std::mutex::lock(v30);
          uint64_t v31 = *(void *)(v1 + 568);
          unint64_t v32 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(v31 + 208, (const void **)v6);
          if ((uint64_t *)(v31 + 216) != v32)
          {
            std::__tree<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>>>::erase((void *)(v31 + 208), (uint64_t)v32);
            uint64_t v31 = *(void *)(v1 + 568);
          }
          std::mutex::unlock(v30);
          (*(void (**)(void, uint64_t))(**(void **)(v31 + 56) + 64))(*(void *)(v31 + 56), v6);
          int v12 = *(unsigned __int8 *)(v1 + 392);
          if (*(unsigned char *)(v1 + 392) && *(void *)(v1 + 320))
          {
            uint64_t v33 = *(void *)(*(void *)(v1 + 568) + 96);
            if (*(char *)(v1 + 503) < 0)
            {
              std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(v1 + 480), *(void *)(v1 + 488));
            }
            else
            {
              *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)v6;
              v5->__r_.__value_.__r.__words[2] = *(void *)(v6 + 16);
            }
            AMSCore::MetricsEventModifierProvider::getOverrideForTopic(v1 + 552, v33, (uint64_t)v5);
          }
LABEL_16:
          if (v12)
          {
            if (*(unsigned char *)(v1 + 312))
            {
LABEL_18:
              *(unsigned char *)(v1 + 18) = 1;
              *(void *)(v1 + 64) = v1 + 16;
              *(void *)uint64_t v1 = 0;
              return AMSCore::Task<void,void>::Promise::Awaiter::await_suspend((uint64_t)v2);
            }
          }
          else
          {
            (**v4)(v4);
            if (*(unsigned char *)(v1 + 312)) {
              goto LABEL_18;
            }
          }
          (**v3)(v3);
          goto LABEL_18;
        }
      }
      else if (*(unsigned char *)(v1 + 312))
      {
        goto LABEL_54;
      }
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v35);
      AMSCore::Logger::log<char [35],std::string,char [9],AMSCore::Error>(v35, v6, (uint64_t)v3);
      size_t v34 = v36;
      if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
      goto LABEL_54;
    }
    operator delete(*(void **)(v1 + 456));
    goto LABEL_48;
  }
  uint64_t v7 = *(void *)(result + 592);
  if (*(unsigned char *)(v7 + 184))
  {
    _OWORD *v2 = *(_OWORD *)(v7 + 8);
    *(unsigned char *)(result + 80) = 0;
    *(unsigned char *)(result + 232) = 0;
    std::__optional_storage_base<AMSCore::URL,false>::__construct_from[abi:fe180100]<std::__optional_move_base<AMSCore::URL,false>>(result + 80, (long long *)(v7 + 24));
    uint64_t v8 = *(void *)(v1 + 600);
    if (v8 && !atomic_fetch_add((atomic_ullong *volatile)(v8 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v9 = *(std::__shared_weak_count **)(v1 + 600);
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    size_t v10 = *(std::__shared_weak_count **)(v1 + 560);
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if ((*(char *)(v1 + 455) & 0x80000000) == 0) {
        goto LABEL_10;
      }
    }
    else if ((*(char *)(v1 + 455) & 0x80000000) == 0)
    {
LABEL_10:
      if (*(unsigned char *)(v1 + 72)) {
        uint64_t v11 = *(void *)(v1 + 64);
      }
      else {
        uint64_t v11 = 60000;
      }
      AMSCore::MetricsProvider::startFlushTaskForTopic(*(void *)(v1 + 568), v6, v11);
      if (*(unsigned char *)(v1 + 232)) {
        AMSCore::URL::~URL((AMSCore::URL *)(v1 + 80));
      }
      int v12 = *(unsigned __int8 *)(v1 + 392);
      goto LABEL_16;
    }
    operator delete(v5->__r_.__value_.__l.__data_);
    goto LABEL_10;
  }
LABEL_71:
  __break(1u);
  return result;
}

void sub_18DB32794(void *a1)
{
  if (!*(unsigned char *)(v1 + 392)) {
    (**v3)(v3);
  }
  if (!*(unsigned char *)(v1 + 312)) {
    (**v2)(v2);
  }
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::MetricsProvider::delayedFlushCallback(char *__p)
{
  uint64_t v2 = (void (***)(void))(__p + 240);
  if (*(void *)__p)
  {
    if (__p[608])
    {
      uint64_t v3 = *((void *)__p + 75);
      if (v3 && !atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        BOOL v4 = (std::__shared_weak_count *)*((void *)__p + 75);
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      uint64_t v5 = (std::__shared_weak_count *)*((void *)__p + 70);
      if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        if ((__p[455] & 0x80000000) == 0)
        {
LABEL_9:
          if (__p[392]) {
            goto LABEL_10;
          }
          goto LABEL_40;
        }
      }
      else if ((__p[455] & 0x80000000) == 0)
      {
        goto LABEL_9;
      }
      operator delete(*((void **)__p + 54));
      if (__p[392])
      {
LABEL_10:
        if (__p[312]) {
          goto LABEL_42;
        }
LABEL_41:
        (**v2)(v2);
        goto LABEL_42;
      }
LABEL_40:
      (**((void (***)(void))__p + 40))();
      if (__p[312]) {
        goto LABEL_42;
      }
      goto LABEL_41;
    }
    uint64_t v6 = *((void *)__p + 73);
    if (v6 && !atomic_fetch_add((atomic_ullong *volatile)(v6 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v7 = (std::__shared_weak_count *)*((void *)__p + 73);
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    uint64_t v8 = (std::__shared_weak_count *)*((void *)__p + 41);
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    uint64_t v9 = (std::__shared_weak_count *)*((void *)__p + 66);
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    size_t v10 = (std::__shared_weak_count *)*((void *)__p + 64);
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    uint64_t v11 = (std::__shared_weak_count *)*((void *)__p + 53);
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    int v12 = (std::__shared_weak_count *)*((void *)__p + 51);
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    if (__p[479] < 0) {
      operator delete(*((void **)__p + 57));
    }
    uint64_t v13 = (std::__shared_weak_count *)*((void *)__p + 68);
    if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    char v14 = (std::__shared_weak_count *)*((void *)__p + 9);
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
LABEL_42:
  size_t v15 = (char *)*((void *)__p + 7);
  if (v15 == __p + 32)
  {
    (*(void (**)(char *))(*((void *)__p + 4) + 32))(__p + 32);
  }
  else if (v15)
  {
    (*(void (**)(char *))(*(void *)v15 + 40))(v15);
  }
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (__p[503] < 0) {
    operator delete(*((void **)__p + 60));
  }
  operator delete(__p);
}

uint64_t AMSCore::Logger::log<char [35],std::string,char [9],AMSCore::Error>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= 4u)
  {
    uint64_t v5 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v13);
    uint64_t v6 = *(void *)(v13[0] - 24);
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v13, (uint64_t)"failed to flush events for topic: ", 34);
    int v7 = *(char *)(a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *(void *)a2;
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v13, v8, v9);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v13, (uint64_t)" error: ", 8);
    AMSCore::operator<<(v13, a3);
    uint64_t v10 = v13[6];
    uint64_t v11 = (char *)v13 + *(void *)(v13[0] - 24);
    if ((v11[32] & 5) != 0)
    {
      uint64_t v12 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v11 + 5) + 32))(&rep);
      uint64_t v12 = v20;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v17 = 4;
    uint64_t v18 = v10;
    uint64_t v19 = v12;
    (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v5 + 16) + 16))(*(void *)(v5 + 16), "metrics", 7, &rep);
    v13[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v13 + *(void *)(v13[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v13[1] = MEMORY[0x1E4FBA470] + 16;
    if (v14 < 0) {
      operator delete((void *)v13[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v15);
  }
  return result;
}

void sub_18DB32FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Logger::log<char [22],std::string>(uint64_t result, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= 2u)
  {
    uint64_t v3 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v11);
    uint64_t v4 = *(void *)(v11[0] - 24);
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v11, (uint64_t)"flush task finished: ", 21);
    int v5 = *(char *)(a2 + 23);
    if (v5 >= 0) {
      uint64_t v6 = a2;
    }
    else {
      uint64_t v6 = *(void *)a2;
    }
    if (v5 >= 0) {
      uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v7 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v11, v6, v7);
    uint64_t v8 = v11[6];
    uint64_t v9 = (char *)v11 + *(void *)(v11[0] - 24);
    if ((v9[32] & 5) != 0)
    {
      uint64_t v10 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v9 + 5) + 32))(&rep);
      uint64_t v10 = v18;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v15 = 2;
    uint64_t v16 = v8;
    uint64_t v17 = v10;
    (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v3 + 16) + 16))(*(void *)(v3 + 16), "metrics", 7, &rep);
    v11[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v11[1] = MEMORY[0x1E4FBA470] + 16;
    if (v12 < 0) {
      operator delete((void *)v11[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v13);
  }
  return result;
}

void sub_18DB33294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0,std::allocator<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0>,void ()(void)>::destroy_deallocate(char *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)__p + 7);
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 5);
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 5);
  if (v3) {
LABEL_4:
  }
    std::__shared_weak_count::__release_weak(v3);
LABEL_5:
  if (__p[31] < 0) {
    operator delete(*((void **)__p + 1));
  }
  operator delete(__p);
}

void std::__function::__func<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0,std::allocator<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
LABEL_4:
  }
    std::__shared_weak_count::__release_weak(v3);
LABEL_5:
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v4 = *(void **)(a1 + 8);
    operator delete(v4);
  }
}

void std::__function::__func<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0,std::allocator<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDC83080;
  uint64_t v4 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a1 + 8);
    a2[3] = *(void *)(a1 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  a2[4] = *(void *)(a1 + 32);
  a2[5] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void *)(a1 + 56);
  a2[6] = *(void *)(a1 + 48);
  a2[7] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
}

void *std::__function::__func<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0,std::allocator<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x40uLL);
  void *v2 = &unk_1EDC83080;
  uint64_t v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  uint64_t v4 = *(void *)(a1 + 40);
  v2[4] = *(void *)(a1 + 32);
  v2[5] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 56);
  v2[6] = *(void *)(a1 + 48);
  v2[7] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return v2;
}

void sub_18DB33554(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0,std::allocator<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EDC83080;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v3)
    {
LABEL_5:
      if (*(char *)(a1 + 31) < 0) {
        operator delete(*(void **)(a1 + 8));
      }
      JUMPOUT(0x192FA4080);
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v3) {
      goto LABEL_5;
    }
  }
  std::__shared_weak_count::__release_weak(v3);
  goto LABEL_5;
}

uint64_t std::__function::__func<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0,std::allocator<AMSCore::MetricsProvider::startFlushTaskForTopic(std::string const&,std::chrono::duration<long long,std::ratio<1l,1000l>>)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EDC83080;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
LABEL_4:
  }
    std::__shared_weak_count::__release_weak(v3);
LABEL_5:
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t AMSCore::Logger::log<char [35],AMSCore::Error>(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= a2)
  {
    char v10 = a2;
    uint64_t v11 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v17);
    uint64_t v12 = *(void *)(v17[0] - 24);
    {
    }
    size_t v13 = strlen(a5);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v17, (uint64_t)a5, v13);
    AMSCore::operator<<(v17, a6);
    uint64_t v14 = v17[6];
    char v15 = (char *)v17 + *(void *)(v17[0] - 24);
    if ((v15[32] & 5) != 0)
    {
      uint64_t v16 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v15 + 5) + 32))(&rep);
      uint64_t v16 = v24;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v21 = v10;
    uint64_t v22 = v14;
    uint64_t v23 = v16;
    (*(void (**)(void, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v11 + 16) + 16))(*(void *)(v11 + 16), a3, a4, &rep);
    v17[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v17[1] = MEMORY[0x1E4FBA470] + 16;
    if (v18 < 0) {
      operator delete((void *)v17[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v19);
  }
  return result;
}

void sub_18DB339A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::MetricsProvider::saveToDatabase(char *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 152);
  uint64_t v3 = (uint64_t)(a1 + 720);
  uint64_t v4 = (std::string *)(a1 + 808);
  uint64_t v5 = (std::string *)(a1 + 960);
  uint64_t v6 = (std::string *)(a1 + 984);
  unint64_t v95 = (uint64_t **)(a1 + 1032);
  long long v94 = (void **)(a1 + 1056);
  uint64_t v7 = a1 + 1080;
  long long v98 = (std::runtime_error *)(a1 + 888);
  char v99 = a1 + 1104;
  uint64_t v96 = a1 + 440;
  uint64_t v97 = (const AMSCore::IMetricsProvider::Event **)(a1 + 1120);
  char v92 = (void **)(a1 + 1008);
  std::runtime_error v93 = a1 + 16;
  if (a1[1216])
  {
    uint64_t v8 = *((void *)a1 + 150);
    if (!*(unsigned char *)(v8 + 32)) {
      goto LABEL_176;
    }
    uint64_t v9 = (void *)(v8 + 16);
    uint64_t v10 = *(void *)(v8 + 16);
    uint64_t v11 = a1 + 1088;
    *((void *)a1 + 135) = *(void *)(v8 + 8);
    *((void *)a1 + 136) = v10;
    uint64_t v12 = *(void *)(v8 + 24);
    *((void *)a1 + 137) = v12;
    if (v12)
    {
      *(void *)(v10 + 16) = v11;
      *(void *)(v8 + 8) = v9;
      void *v9 = 0;
      *(void *)(v8 + 24) = 0;
      uint64_t v13 = *((void *)a1 + 151);
      if (!v13) {
        goto LABEL_8;
      }
    }
    else
    {
      void *v7 = v11;
      uint64_t v13 = *((void *)a1 + 151);
      if (!v13) {
        goto LABEL_8;
      }
    }
    if (!atomic_fetch_add((atomic_ullong *volatile)(v13 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      char v15 = (std::__shared_weak_count *)*((void *)a1 + 151);
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      uint64_t v14 = (std::__shared_weak_count *)*((void *)a1 + 91);
      if (!v14) {
        goto LABEL_12;
      }
      goto LABEL_9;
    }
LABEL_8:
    uint64_t v14 = (std::__shared_weak_count *)*((void *)a1 + 91);
    if (!v14) {
      goto LABEL_12;
    }
LABEL_9:
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
LABEL_12:
    if (a1[712]) {
      AMSCore::URL::~URL((AMSCore::URL *)(a1 + 560));
    }
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)a1 + 66));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)a1 + 63));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)a1 + 60));
    AMSCore::serialize(v4, v7);
    AMSCore::nestedError<std::expected<AMSCore::DataBuffer,AMSCore::Error> &,char const(&)[27]>((unsigned char *)v3, (uint64_t)v4, 3, (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance);
    if (a1[792])
    {
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v98, v3);
      std::optional<std::expected<std::map<std::string,AMSCore::MetricsEventModifier::TopicModifier>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(a1 + 24), v98);
      *((void *)a1 + 111) = &unk_1EDC827D8;
      uint64_t v16 = (std::__shared_weak_count *)*((void *)a1 + 119);
      if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)(a1 + 920), *((unsigned int **)a1 + 116));
      MEMORY[0x192FA3C30](v98);
      int v17 = 3;
      if (a1[792])
      {
        *((void *)a1 + 90) = &unk_1EDC827D8;
        char v18 = (std::__shared_weak_count *)*((void *)a1 + 98);
        if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)(a1 + 752), *((unsigned int **)a1 + 95));
        MEMORY[0x192FA3C30](v3);
        if (!a1[880]) {
          goto LABEL_36;
        }
LABEL_33:
        if (a1[831] < 0) {
          operator delete(v4->__r_.__value_.__l.__data_);
        }
LABEL_37:
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v7, *((unsigned int **)a1 + 136));
        if (a1[983] < 0)
        {
          operator delete(v5->__r_.__value_.__l.__data_);
          if (a1[1007] < 0) {
            goto LABEL_41;
          }
        }
        else if (a1[1007] < 0)
        {
LABEL_41:
          operator delete(v6->__r_.__value_.__l.__data_);
          if (!a1[424]) {
            goto LABEL_63;
          }
          goto LABEL_62;
        }
        goto LABEL_61;
      }
      goto LABEL_32;
    }
    uint64_t v19 = (void **)(a1 + 744);
    *(_OWORD *)uint64_t v3 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    *(void *)(v3 + 16) = *((void *)&v6->__r_.__value_.__l + 2);
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    *(_OWORD *)(a1 + 744) = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    *((void *)a1 + 95) = *((void *)&v5->__r_.__value_.__l + 2);
    v5->__r_.__value_.__r.__words[0] = 0;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    if (a1[880])
    {
      uint64_t v20 = *((void *)a1 + 149);
      uint64_t v21 = a1[1184];
      char v22 = a1[1217];
      uint64_t v23 = (void **)(a1 + 768);
      *((_OWORD *)a1 + 48) = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      *((void *)a1 + 98) = *((void *)&v4->__r_.__value_.__l + 2);
      v4->__r_.__value_.__r.__words[0] = 0;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      *((void *)a1 + 99) = v21 | v20;
      a1[800] = v22;
      unint64_t v24 = *((void *)a1 + 133);
      if (v24 >= *((void *)a1 + 134))
      {
        int v28 = std::vector<AMSCore::IMetricsDataAccessObject::Event>::__emplace_back_slow_path<AMSCore::IMetricsDataAccessObject::Event>(v94, v3);
        int v29 = a1[791];
        *((void *)a1 + 133) = v28;
        if (v29 < 0)
        {
          operator delete(*v23);
          if ((a1[767] & 0x80000000) == 0)
          {
LABEL_31:
            int v17 = 0;
            if (a1[743] < 0)
            {
              operator delete(*(void **)v3);
              int v17 = 0;
              if (a1[880]) {
                goto LABEL_33;
              }
LABEL_36:
              (*(void (**)(std::string *))v4->__r_.__value_.__l.__data_)(v4);
              goto LABEL_37;
            }
LABEL_32:
            if (a1[880]) {
              goto LABEL_33;
            }
            goto LABEL_36;
          }
        }
        else if ((a1[767] & 0x80000000) == 0)
        {
          goto LABEL_31;
        }
      }
      else
      {
        long long v25 = *(_OWORD *)v3;
        *(void *)(v24 + 16) = *(void *)(v3 + 16);
        *(_OWORD *)unint64_t v24 = v25;
        *(void *)(v3 + 8) = 0;
        *(void *)(v3 + 16) = 0;
        *(void *)uint64_t v3 = 0;
        long long v26 = *(_OWORD *)v19;
        *(void *)(v24 + 40) = *((void *)a1 + 95);
        *(_OWORD *)(v24 + 24) = v26;
        *((void *)a1 + 94) = 0;
        *((void *)a1 + 95) = 0;
        uint64_t *v19 = 0;
        long long v27 = *(_OWORD *)v23;
        *(void *)(v24 + 64) = *((void *)a1 + 98);
        *(_OWORD *)(v24 + 48) = v27;
        *((void *)a1 + 97) = 0;
        *((void *)a1 + 98) = 0;
        std::__shared_weak_count *v23 = 0;
        *(_OWORD *)(v24 + 72) = *(_OWORD *)(a1 + 792);
        *((void *)a1 + 133) = v24 + 88;
        if ((a1[767] & 0x80000000) == 0) {
          goto LABEL_31;
        }
      }
      operator delete(*v19);
      goto LABEL_31;
    }
LABEL_176:
    __break(1u);
    return;
  }
  AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::await_resume(v2, *((void *)a1 + 146));
  uint64_t v33 = *((void *)a1 + 147);
  if (v33 && !atomic_fetch_add((atomic_ullong *volatile)(v33 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v35 = (std::__shared_weak_count *)*((void *)a1 + 147);
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
    size_t v34 = (std::__shared_weak_count *)*((void *)a1 + 91);
    if (!v34) {
      goto LABEL_54;
    }
  }
  else
  {
    size_t v34 = (std::__shared_weak_count *)*((void *)a1 + 91);
    if (!v34) {
      goto LABEL_54;
    }
  }
  if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
LABEL_54:
  int v36 = (std::__shared_weak_count *)*((void *)a1 + 139);
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  uint64_t v37 = *v97;
  AMSCore::MetricsEventModifier::MergedEventModifier::shouldDropEvent((AMSCore::MetricsEventModifier::MergedEventModifier *)v2, *v97);
  int v39 = v38;
  AMSCore::getValueByKey<std::string,std::map<std::string,AMSCore::Any> const>((uint64_t)v105, (uint64_t)v37 + 72, "topic", 5uLL);
  if (!v111) {
    goto LABEL_176;
  }
  uint64_t v40 = v105[0];
  if (!v39)
  {
    if (*(char *)(v105[0] + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)v105[0], *(void *)(v105[0] + 8));
    }
    else
    {
      long long v50 = *(_OWORD *)v105[0];
      v6->__r_.__value_.__r.__words[2] = *(void *)(v105[0] + 16);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v50;
    }
    uint64_t v51 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<char const*>((uint64_t)v37 + 72, "clientEventId");
    int v52 = v51 + 7;
    if (*((_DWORD *)v51 + 20) != 5) {
      int v52 = 0;
    }
    if (*((char *)v52 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)*v52, v52[1]);
    }
    else
    {
      long long v53 = *(_OWORD *)v52;
      v5->__r_.__value_.__r.__words[2] = v52[2];
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v53;
    }
    AMSCore::MetricsEventModifier::MergedEventModifier::handleFieldModifiers((AMSCore::MetricsEventModifier::MergedEventModifier *)v2, v37);
    AMSCore::getValueByKey<BOOL,std::map<std::string,AMSCore::Any> const>((uint64_t)v105, (uint64_t)v37 + 72, "anonymous", 9uLL);
    if (v111)
    {
      char v54 = 0;
      uint64_t v55 = 0;
      unint64_t v56 = 0;
      if (LOBYTE(v105[0]))
      {
LABEL_97:
        *((void *)a1 + 149) = v56;
        *((void *)a1 + 148) = v55;
        a1[1217] = v54;
        *((void *)a1 + 90) = v6;
        std::runtime_error v58 = std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v95, (const void **)&v6->__r_.__value_.__l.__data_, (uint64_t)v6);
        long long v59 = a1 + 272;
        uint64_t v60 = (uint64_t *)*((void *)a1 + 32);
        *((unsigned char *)v58 + 64) = a1[264];
        v58[7] = v60;
        std::__optional_storage_base<AMSCore::URL,false>::__assign_from[abi:fe180100]<std::__optional_copy_assign_base<AMSCore::URL,false> const&>((uint64_t)(v58 + 9), (AMSCore::URL *)(a1 + 272));
        uint64_t v61 = a1 + 192;
        uint64_t v62 = *((void *)a1 + 24);
        uint64_t v63 = a1 + 480;
        *uint64_t v96 = *(_OWORD *)v2;
        *(_OWORD *)((char *)v96 + 12) = *(_OWORD *)(v2 + 12);
        *((void *)a1 + 59) = *((void *)a1 + 23);
        *((void *)a1 + 60) = v62;
        uint64_t v64 = *((void *)a1 + 25);
        *((void *)a1 + 61) = v64;
        if (v64)
        {
          *(void *)(v62 + 16) = v63;
          *((void *)a1 + 23) = v61;
          void *v61 = 0;
          *((void *)a1 + 25) = 0;
        }
        else
        {
          *((void *)a1 + 59) = v63;
        }
        std::runtime_error v65 = a1 + 216;
        uint64_t v66 = *((void *)a1 + 27);
        char v67 = a1 + 504;
        *((void *)a1 + 62) = *((void *)a1 + 26);
        *((void *)a1 + 63) = v66;
        uint64_t v68 = *((void *)a1 + 28);
        *((void *)a1 + 64) = v68;
        if (v68)
        {
          *(void *)(v66 + 16) = v67;
          *((void *)a1 + 26) = v65;
          *std::runtime_error v65 = 0;
          *((void *)a1 + 28) = 0;
        }
        else
        {
          *((void *)a1 + 62) = v67;
        }
        uint64_t v69 = a1 + 240;
        uint64_t v70 = *((void *)a1 + 30);
        char v71 = a1 + 528;
        *((void *)a1 + 65) = *((void *)a1 + 29);
        *((void *)a1 + 66) = v70;
        uint64_t v72 = *((void *)a1 + 31);
        *((void *)a1 + 67) = v72;
        if (v72)
        {
          *(void *)(v70 + 16) = v71;
          *((void *)a1 + 29) = v69;
          *uint64_t v69 = 0;
          *((void *)a1 + 31) = 0;
        }
        else
        {
          *((void *)a1 + 65) = v71;
        }
        *((_OWORD *)a1 + 34) = *((_OWORD *)a1 + 16);
        a1[560] = 0;
        a1[712] = 0;
        if (a1[424])
        {
          a1[584] = 0;
          if (a1[296])
          {
            *((_OWORD *)a1 + 35) = *v59;
            *((void *)a1 + 72) = *((void *)a1 + 36);
            *((void *)a1 + 35) = 0;
            *((void *)a1 + 36) = 0;
            *(void *)long long v59 = 0;
            a1[584] = 1;
          }
          a1[592] = 0;
          a1[616] = 0;
          if (a1[328])
          {
            *((_OWORD *)a1 + 37) = *((_OWORD *)a1 + 19);
            *((void *)a1 + 76) = *((void *)a1 + 40);
            *((void *)a1 + 39) = 0;
            *((void *)a1 + 40) = 0;
            *((void *)a1 + 38) = 0;
            a1[616] = 1;
          }
          a1[624] = 0;
          a1[648] = 0;
          if (a1[360])
          {
            *((_OWORD *)a1 + 39) = *((_OWORD *)a1 + 21);
            *((void *)a1 + 80) = *((void *)a1 + 44);
            *((void *)a1 + 43) = 0;
            *((void *)a1 + 44) = 0;
            *((void *)a1 + 42) = 0;
            a1[648] = 1;
          }
          *((_DWORD *)a1 + 164) = *((_DWORD *)a1 + 92);
          *((void *)a1 + 83) = a1 + 664;
          *((void *)a1 + 84) = a1 + 664;
          *((void *)a1 + 85) = 0;
          uint64_t v73 = *((void *)a1 + 49);
          if (v73)
          {
            uint64_t v75 = *((void *)a1 + 47);
            uint64_t v74 = (uint64_t *)*((void *)a1 + 48);
            uint64_t v76 = *v74;
            *(void *)(v76 + 8) = *(void *)(v75 + 8);
            **(void **)(v75 + 8) = v76;
            uint64_t v77 = *((void *)a1 + 83);
            *(void *)(v77 + 8) = v74;
            *uint64_t v74 = v77;
            *((void *)a1 + 83) = v75;
            *(void *)(v75 + 8) = a1 + 664;
            *((void *)a1 + 85) = v73;
            *((void *)a1 + 49) = 0;
          }
          *((_OWORD *)a1 + 43) = *((_OWORD *)a1 + 25);
          *((void *)a1 + 88) = *((void *)a1 + 52);
          *((void *)a1 + 51) = 0;
          *((void *)a1 + 52) = 0;
          *((void *)a1 + 50) = 0;
          a1[712] = 1;
        }
        AMSCore::IMetricsProvider::Event::takeProperties(v3, (uint64_t)v37, (uint64_t)v96);
      }
    }
    else
    {
      (*(void (**)(void *))v105[0])(v105);
    }
    LOBYTE(v105[0]) = 0;
    char v106 = 0;
    uint64_t v107 = -1;
    uint64_t v108 = 7824750;
    char v109 = 3;
    AMSCore::operator==((uint64_t)v37 + 8, (uint64_t)v105);
    if (v57)
    {
      uint64_t v55 = 0;
      unint64_t v56 = 0;
      a1[720] = 0;
      a1[744] = 0;
      *((void *)a1 + 94) = 0;
      *((void *)a1 + 95) = 0x6C61636F6CLL;
      char v54 = 1;
      a1[783] = 5;
    }
    else
    {
      uint64_t v55 = *((void *)v37 + 5);
      unint64_t v56 = v55 & 0xFFFFFFFFFFFFFF00;
      char v54 = 1;
    }
    goto LABEL_97;
  }
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault((void *)v3);
  AMSCore::Logger::log<char [17],std::string>(*(void *)v3, v40);
  uint64_t v41 = (std::__shared_weak_count *)*((void *)a1 + 91);
  int v17 = 5;
  if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
    if (!a1[424]) {
      goto LABEL_63;
    }
    goto LABEL_62;
  }
LABEL_61:
  if (a1[424]) {
LABEL_62:
  }
    AMSCore::URL::~URL((AMSCore::URL *)(a1 + 272));
LABEL_63:
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)a1 + 30));
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)a1 + 27));
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)a1 + 24));
  uint64_t v42 = (std::__shared_weak_count *)*((void *)a1 + 141);
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
    if (v17 == 5) {
      goto LABEL_67;
    }
  }
  else if (v17 == 5)
  {
    goto LABEL_67;
  }
  if (v17) {
    goto LABEL_143;
  }
LABEL_67:
  uint64_t v43 = (uint64_t *)(*((void *)a1 + 145) + 8);
  if (v43 != *((uint64_t **)a1 + 144))
  {
    *((void *)a1 + 145) = v43;
    uint64_t v30 = *v43;
    *((void *)a1 + 140) = *v43;
    if (v30) {
      operator new();
    }
    uint64_t v31 = *((void *)a1 + 142);
    *((void *)a1 + 141) = 0;
    *uint64_t v43 = 0;
    uint64_t v32 = *(void *)(v31 + 96);
    *char v99 = 0;
    v99[1] = 0;
    AMSCore::MetricsEventModifierProvider::getOverrideForEvent(v3, v32, (uint64_t)v99);
  }
  uint64_t v44 = *((void *)a1 + 132);
  uint64_t v45 = *((void *)a1 + 133);
  if (v44 != v45)
  {
    uint64_t v46 = *(void *)(*((void *)a1 + 142) + 56);
    *((void *)a1 + 126) = v44;
    *((void *)a1 + 127) = v45;
    *((void *)a1 + 128) = *((void *)a1 + 134);
    *long long v94 = 0;
    v94[1] = 0;
    v94[2] = 0;
    (*(void (**)(void *__return_ptr))(*(void *)v46 + 16))(v100);
    uint64_t v47 = (void **)*v92;
    if (!*v92) {
      goto LABEL_121;
    }
    int v48 = (void **)*((void *)a1 + 127);
    char v49 = *v92;
    if (v48 == v47)
    {
LABEL_120:
      *((void *)a1 + 127) = v47;
      operator delete(v49);
LABEL_121:
      AMSCore::nestedError<std::expected<void,AMSCore::Error> &,char const(&)[33]>(v105, (uint64_t)v100, 3, (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance);
      int v78 = v111;
      if (v111)
      {
        AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v102, (uint64_t)v105);
        std::optional<std::expected<std::map<std::string,AMSCore::MetricsEventModifier::TopicModifier>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(a1 + 24), &v102);
        v102.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        std::runtime_error v79 = v104;
        if (v104 && !atomic_fetch_add(&v104->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v103, v103[1]);
        MEMORY[0x192FA3C30](&v102);
        if (v111)
        {
          v105[0] = &unk_1EDC827D8;
          long long v80 = v110;
          if (v110 && !atomic_fetch_add(&v110->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v107, (unsigned int *)v108);
          MEMORY[0x192FA3C30](v105);
        }
        int v17 = 3;
        if (!v101) {
          goto LABEL_131;
        }
      }
      else
      {
        int v17 = 0;
        if (!v101) {
LABEL_131:
        }
          (*(void (**)(void *))v100[0])(v100);
      }
      if (v78) {
        goto LABEL_143;
      }
      goto LABEL_133;
    }
    while (1)
    {
      if (*((char *)v48 - 17) < 0)
      {
        operator delete(*(v48 - 5));
        if ((*((char *)v48 - 41) & 0x80000000) == 0)
        {
LABEL_77:
          if (*((char *)v48 - 65) < 0) {
            goto LABEL_81;
          }
          goto LABEL_74;
        }
      }
      else if ((*((char *)v48 - 41) & 0x80000000) == 0)
      {
        goto LABEL_77;
      }
      operator delete(*(v48 - 8));
      if (*((char *)v48 - 65) < 0) {
LABEL_81:
      }
        operator delete(*(v48 - 11));
LABEL_74:
      v48 -= 11;
      if (v48 == v47)
      {
        char v49 = *v92;
        goto LABEL_120;
      }
    }
  }
LABEL_133:
  if (a1[104])
  {
    if (a1[96]) {
      std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>>>::destroy(*((char **)a1 + 4));
    }
    else {
      (**((void (***)(void))a1 + 3))();
    }
  }
  uint64_t v81 = *((void *)a1 + 130);
  *((void *)a1 + 4) = v81;
  uint64_t v82 = a1 + 32;
  *((void *)a1 + 3) = *((void *)a1 + 129);
  uint64_t v83 = *((void *)a1 + 131);
  *((void *)a1 + 5) = v83;
  if (v83)
  {
    *(void *)(v81 + 16) = v82;
    *unint64_t v95 = (uint64_t *)(a1 + 1040);
    *((void *)a1 + 130) = 0;
    *((void *)a1 + 131) = 0;
  }
  else
  {
    *((void *)a1 + 3) = v82;
  }
  a1[96] = 1;
  a1[104] = 1;
  int v17 = 3;
LABEL_143:
  uint64_t v84 = (void **)*v94;
  if (!*v94) {
    goto LABEL_156;
  }
  uint64_t v85 = (void **)*((void *)a1 + 133);
  std::runtime_error v86 = *v94;
  if (v85 != v84)
  {
    while (1)
    {
      if (*((char *)v85 - 17) < 0)
      {
        operator delete(*(v85 - 5));
        if ((*((char *)v85 - 41) & 0x80000000) == 0)
        {
LABEL_149:
          if (*((char *)v85 - 65) < 0) {
            goto LABEL_153;
          }
          goto LABEL_146;
        }
      }
      else if ((*((char *)v85 - 41) & 0x80000000) == 0)
      {
        goto LABEL_149;
      }
      operator delete(*(v85 - 8));
      if (*((char *)v85 - 65) < 0) {
LABEL_153:
      }
        operator delete(*(v85 - 11));
LABEL_146:
      v85 -= 11;
      if (v85 == v84)
      {
        std::runtime_error v86 = *v94;
        break;
      }
    }
  }
  *((void *)a1 + 133) = v84;
  operator delete(v86);
LABEL_156:
  std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>>>::destroy(*((char **)a1 + 130));
  if (v17 == 3)
  {
    *((void *)a1 + 19) = v93;
    *(void *)a1 = 0;
    AMSCore::Task<std::map<std::string,AMSCore::MetricsEventModifier::TopicModifier>,AMSCore::Error>::Promise::Awaiter::await_suspend(v2);
    return;
  }
  long long v87 = (char *)*((void *)a1 + 18);
  if (v87 != a1 + 120)
  {
    if (v87) {
      (*(void (**)(char *))(*(void *)v87 + 40))(v87);
    }
    if (!a1[104]) {
      goto LABEL_167;
    }
    goto LABEL_164;
  }
  (*(void (**)(char *))(*((void *)a1 + 15) + 32))(a1 + 120);
  if (a1[104])
  {
LABEL_164:
    if (a1[96]) {
      std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>>>::destroy(*((char **)a1 + 4));
    }
    else {
      (**((void (***)(void))a1 + 3))();
    }
  }
LABEL_167:
  uint64_t v88 = *((void *)a1 + 143);
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v88)
  {
    uint64_t v89 = (void *)*((void *)a1 + 144);
    while (v89 != *((void **)a1 + 143))
    {
      uint64_t v91 = *--v89;
      uint64_t v90 = v91;
      *uint64_t v89 = 0;
      if (v91) {
        (*(void (**)(uint64_t))(*(void *)v90 + 8))(v90);
      }
    }
    operator delete(v89);
  }
  operator delete(a1);
}

void sub_18DB34A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void (**a19)(void), uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (!a28) {
    (*a19)(&a19);
  }
  JUMPOUT(0x18DB34B68);
}

void sub_18DB34AD0()
{
  std::vector<AMSCore::IMetricsDataAccessObject::Event>::~vector[abi:fe180100](v0);
  JUMPOUT(0x18DB34B68);
}

void sub_18DB34AE0()
{
}

void sub_18DB34AE8()
{
}

void sub_18DB34AF4()
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v0);
  JUMPOUT(0x18DB34B44);
}

void sub_18DB34B04(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, AMSCore::MetricsEventModifier::EventModifier *a15)
{
  AMSCore::MetricsEventModifier::EventModifier::~EventModifier(a15);
  if (*(char *)(v15 + 983) < 0) {
    operator delete(*v18);
  }
  if (*(char *)(v15 + 1007) < 0) {
    operator delete(*v17);
  }
  AMSCore::MetricsEventModifier::EventModifier::~EventModifier(v16);
  JUMPOUT(0x18DB34B60);
}

void sub_18DB34B18()
{
}

void sub_18DB34B54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

void sub_18DB34B88()
{
}

void AMSCore::MetricsProvider::saveToDatabase(char *__p)
{
  if (*(void *)__p)
  {
    if (!__p[1216])
    {
      uint64_t v10 = *((void *)__p + 147);
      if (v10 && !atomic_fetch_add((atomic_ullong *volatile)(v10 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v11 = (std::__shared_weak_count *)*((void *)__p + 147);
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      uint64_t v12 = (std::__shared_weak_count *)*((void *)__p + 91);
      if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      uint64_t v13 = (std::__shared_weak_count *)*((void *)__p + 139);
      if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      goto LABEL_16;
    }
    uint64_t v2 = *((void *)__p + 151);
    if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 151);
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 91);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    if (__p[712]) {
      AMSCore::URL::~URL((AMSCore::URL *)(__p + 560));
    }
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)__p + 66));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)__p + 63));
    std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)__p + 60));
    if (__p[983] < 0)
    {
      operator delete(*((void **)__p + 120));
      if ((__p[1007] & 0x80000000) == 0)
      {
LABEL_13:
        if (!__p[424])
        {
LABEL_15:
          std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)__p + 30));
          std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)__p + 27));
          std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)__p + 24));
LABEL_16:
          uint64_t v5 = (std::__shared_weak_count *)*((void *)__p + 141);
          if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
          uint64_t v6 = *((void *)__p + 132);
          if (!v6) {
            goto LABEL_32;
          }
          uint64_t v7 = *((void *)__p + 133);
          uint64_t v8 = (void *)*((void *)__p + 132);
          if (v7 == v6)
          {
LABEL_31:
            *((void *)__p + 133) = v6;
            operator delete(v8);
LABEL_32:
            std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>>>::destroy(*((char **)__p + 130));
            goto LABEL_33;
          }
          while (1)
          {
            if (*(char *)(v7 - 17) < 0)
            {
              operator delete(*(void **)(v7 - 40));
              if ((*(char *)(v7 - 41) & 0x80000000) == 0)
              {
LABEL_25:
                if (*(char *)(v7 - 65) < 0) {
                  goto LABEL_29;
                }
                goto LABEL_22;
              }
            }
            else if ((*(char *)(v7 - 41) & 0x80000000) == 0)
            {
              goto LABEL_25;
            }
            operator delete(*(void **)(v7 - 64));
            if (*(char *)(v7 - 65) < 0) {
LABEL_29:
            }
              operator delete(*(void **)(v7 - 88));
LABEL_22:
            v7 -= 88;
            if (v7 == v6)
            {
              uint64_t v8 = (void *)*((void *)__p + 132);
              goto LABEL_31;
            }
          }
        }
LABEL_14:
        AMSCore::URL::~URL((AMSCore::URL *)(__p + 272));
        goto LABEL_15;
      }
    }
    else if ((__p[1007] & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(*((void **)__p + 123));
    if (!__p[424]) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_33:
  uint64_t v9 = (char *)*((void *)__p + 18);
  if (v9 == __p + 120)
  {
    (*(void (**)(char *))(*((void *)__p + 15) + 32))(__p + 120);
    if (!__p[104]) {
      goto LABEL_51;
    }
    goto LABEL_39;
  }
  if (v9) {
    (*(void (**)(char *))(*(void *)v9 + 40))(v9);
  }
  if (__p[104])
  {
LABEL_39:
    if (__p[96]) {
      std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>>>::destroy(*((char **)__p + 4));
    }
    else {
      (**((void (***)(void))__p + 3))();
    }
  }
LABEL_51:
  uint64_t v14 = *((void *)__p + 143);
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v14)
  {
    uint64_t v15 = (void *)*((void *)__p + 144);
    while (v15 != *((void **)__p + 143))
    {
      uint64_t v17 = *--v15;
      uint64_t v16 = v17;
      *uint64_t v15 = 0;
      if (v17) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
    }
    operator delete(v15);
  }
  operator delete(__p);
}

uint64_t AMSCore::Logger::log<char [17],std::string>(uint64_t result, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= 2u)
  {
    uint64_t v3 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v11);
    uint64_t v4 = *(void *)(v11[0] - 24);
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v11, (uint64_t)"Dropping event: ", 16);
    int v5 = *(char *)(a2 + 23);
    if (v5 >= 0) {
      uint64_t v6 = a2;
    }
    else {
      uint64_t v6 = *(void *)a2;
    }
    if (v5 >= 0) {
      uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v7 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v11, v6, v7);
    uint64_t v8 = v11[6];
    uint64_t v9 = (char *)v11 + *(void *)(v11[0] - 24);
    if ((v9[32] & 5) != 0)
    {
      uint64_t v10 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v9 + 5) + 32))(&rep);
      uint64_t v10 = v18;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v15 = 2;
    uint64_t v16 = v8;
    uint64_t v17 = v10;
    (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v3 + 16) + 16))(*(void *)(v3 + 16), "metrics", 7, &rep);
    v11[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v11[1] = MEMORY[0x1E4FBA470] + 16;
    if (v12 < 0) {
      operator delete((void *)v11[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v13);
  }
  return result;
}

void sub_18DB35288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    int v7 = *((char *)a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *a2;
    }
    if (v7 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    while (1)
    {
      uint64_t v10 = (uint64_t **)v5;
      uint64_t v13 = (const void *)v5[4];
      uint64_t v11 = v5 + 4;
      char v12 = v13;
      int v14 = *((char *)v11 + 23);
      if (v14 >= 0) {
        char v15 = v11;
      }
      else {
        char v15 = v12;
      }
      if (v14 >= 0) {
        size_t v16 = *((unsigned __int8 *)v11 + 23);
      }
      else {
        size_t v16 = v11[1];
      }
      if (v16 >= v9) {
        size_t v17 = v9;
      }
      else {
        size_t v17 = v16;
      }
      int v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0) {
          goto LABEL_8;
        }
LABEL_22:
        int v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0) {
            return v10;
          }
        }
        else if (v16 >= v9)
        {
          return v10;
        }
        int v5 = v10[1];
        if (!v5)
        {
          uint64_t v6 = v10 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v9 >= v16) {
          goto LABEL_22;
        }
LABEL_8:
        int v5 = *v10;
        uint64_t v6 = v10;
        if (!*v10) {
          goto LABEL_29;
        }
      }
    }
  }
  uint64_t v10 = a1 + 1;
LABEL_29:
  uint64_t v20 = (char *)operator new(0xE8uLL);
  uint64_t v21 = (std::string *)(v20 + 32);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v21->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v20 + 6) = *(void *)(a3 + 16);
  }
  *(_OWORD *)(v20 + 216) = 0u;
  *(_OWORD *)(v20 + 200) = 0u;
  *(_OWORD *)(v20 + 184) = 0u;
  *(_OWORD *)(v20 + 168) = 0u;
  *(_OWORD *)(v20 + 152) = 0u;
  *(_OWORD *)(v20 + 136) = 0u;
  *(_OWORD *)(v20 + 120) = 0u;
  *(_OWORD *)(v20 + 104) = 0u;
  *(_OWORD *)(v20 + 88) = 0u;
  *(_OWORD *)(v20 + 72) = 0u;
  *(_OWORD *)(v20 + 56) = 0u;
  *(void *)uint64_t v20 = 0;
  *((void *)v20 + 1) = 0;
  *((void *)v20 + 2) = v10;
  std::string *v6 = (uint64_t *)v20;
  char v22 = (uint64_t *)v20;
  uint64_t v23 = (uint64_t *)**a1;
  if (v23)
  {
    *a1 = v23;
    char v22 = *v6;
  }
  std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], v22);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v20;
}

void sub_18DB35458(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned char *AMSCore::nestedError<std::expected<AMSCore::DataBuffer,AMSCore::Error> &,char const(&)[27]>(unsigned char *result, uint64_t a2, uint64_t a3, const std::error_category *a4)
{
  if (!*(unsigned char *)(a2 + 72))
  {
    std::runtime_error::runtime_error(&v18, (const std::runtime_error *)a2);
    int v7 = (void *)(a2 + 40);
    uint64_t v8 = *(void *)(a2 + 40);
    long long v19 = *(_OWORD *)(a2 + 16);
    size_t v9 = *(uint64_t **)(a2 + 32);
    v18.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v20 = v9;
    uint64_t v21 = v8;
    uint64_t v22 = *(void *)(a2 + 48);
    if (v22)
    {
      *(void *)(v8 + 16) = &v21;
      *(void *)(a2 + 32) = v7;
      void *v7 = 0;
      *(void *)(a2 + 48) = 0;
    }
    else
    {
      uint64_t v20 = &v21;
    }
    long long v23 = *(_OWORD *)(a2 + 56);
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    char v24 = 1;
    std::runtime_error::runtime_error(&v10, &v18);
    long long v11 = v19;
    v10.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    char v12 = v20;
    v13[0] = v21;
    v13[1] = v22;
    if (v22)
    {
      *(void *)(v21 + 16) = v13;
      uint64_t v20 = &v21;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
    }
    else
    {
      char v12 = v13;
    }
    long long v14 = v23;
    long long v23 = 0uLL;
    AMSCore::StringUtils::join<char [27]>(&__what_arg, "failed to parse identifier");
    *(void *)&v26.__val_ = a3;
    v26.__cat_ = a4;
    std::system_error::system_error(&v15, v26, &__what_arg);
    if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__what_arg.__r_.__value_.__l.__data_);
    }
    v17[0] = 0;
    v17[1] = 0;
    v15.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
    size_t v16 = v17;
    operator new();
  }
  void *result = 0;
  result[72] = 0;
  return result;
}

void sub_18DB35878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,unsigned int *a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v29, a25);
  MEMORY[0x192FA3C30](&a20);
  AMSCore::Error::~Error((AMSCore::Error *)&a11);
  std::optional<AMSCore::Error>::~optional((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_18DB358D8()
{
  if (*(char *)(v0 - 89) < 0) {
    operator delete(*(void **)(v0 - 112));
  }
  JUMPOUT(0x18DB358C0);
}

std::runtime_error *std::optional<std::expected<std::map<std::string,AMSCore::MetricsEventModifier::TopicModifier>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>(std::runtime_error *this, std::runtime_error *a2)
{
  if (LOBYTE(this[5].__vftable))
  {
    if (LOBYTE(this[4].__imp_.__imp_)) {
      std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>>>::destroy((char *)this->__imp_.__imp_);
    }
    else {
      ((void (*)(std::runtime_error *))this->~runtime_error)(this);
    }
    LOBYTE(this[5].__vftable) = 0;
  }
  std::runtime_error::runtime_error(this, a2);
  this->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA448] + 16);
  this[1] = a2[1];
  this->__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  this[2].__vftable = a2[2].__vftable;
  p_int imp = (std::runtime_error_vtbl *)&a2[2].__imp_;
  int imp = a2[2].__imp_.__imp_;
  this[2].__imp_.__imp_ = imp;
  uint64_t v6 = (std::runtime_error_vtbl *)&this[2].__imp_;
  int v7 = a2[3].__vftable;
  this[3].__vftable = v7;
  if (v7)
  {
    *((void *)imp + 2) = v6;
    a2[2].__vftable = p_imp;
    p_imp->~runtime_error = 0;
    a2[3].__vftable = 0;
  }
  else
  {
    this[2].__vftable = v6;
  }
  *(std::runtime_error *)((char *)this + 56) = *(std::runtime_error *)((char *)a2 + 56);
  a2[3].__imp_.__imp_ = 0;
  a2[4].__vftable = 0;
  LOBYTE(this[4].__imp_.__imp_) = 0;
  LOBYTE(this[5].__vftable) = 1;
  return this;
}

void AMSCore::IMetricsDataAccessObject::Event::~Event(void **this)
{
  if (*((char *)this + 71) < 0)
  {
    operator delete(this[6]);
    if ((*((char *)this + 47) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 23) & 0x80000000) == 0) {
        return;
      }
LABEL_7:
      operator delete(*this);
      return;
    }
  }
  else if ((*((char *)this + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[3]);
  if (*((char *)this + 23) < 0) {
    goto LABEL_7;
  }
}

unsigned char *AMSCore::nestedError<std::expected<void,AMSCore::Error> &,char const(&)[33]>(unsigned char *result, uint64_t a2, uint64_t a3, const std::error_category *a4)
{
  if (!*(unsigned char *)(a2 + 72))
  {
    std::runtime_error::runtime_error(&v18, (const std::runtime_error *)a2);
    int v7 = (void *)(a2 + 40);
    uint64_t v8 = *(void *)(a2 + 40);
    long long v19 = *(_OWORD *)(a2 + 16);
    size_t v9 = *(uint64_t **)(a2 + 32);
    v18.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v20 = v9;
    uint64_t v21 = v8;
    uint64_t v22 = *(void *)(a2 + 48);
    if (v22)
    {
      *(void *)(v8 + 16) = &v21;
      *(void *)(a2 + 32) = v7;
      void *v7 = 0;
      *(void *)(a2 + 48) = 0;
    }
    else
    {
      uint64_t v20 = &v21;
    }
    long long v23 = *(_OWORD *)(a2 + 56);
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    char v24 = 1;
    std::runtime_error::runtime_error(&v10, &v18);
    long long v11 = v19;
    v10.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    char v12 = v20;
    v13[0] = v21;
    v13[1] = v22;
    if (v22)
    {
      *(void *)(v21 + 16) = v13;
      uint64_t v20 = &v21;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
    }
    else
    {
      char v12 = v13;
    }
    long long v14 = v23;
    long long v23 = 0uLL;
    AMSCore::StringUtils::join<char [33]>(&__what_arg, "failed to add events to database");
    *(void *)&v26.__val_ = a3;
    v26.__cat_ = a4;
    std::system_error::system_error(&v15, v26, &__what_arg);
    if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__what_arg.__r_.__value_.__l.__data_);
    }
    v17[0] = 0;
    v17[1] = 0;
    v15.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
    size_t v16 = v17;
    operator new();
  }
  void *result = 0;
  result[72] = 0;
  return result;
}

void sub_18DB35E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,unsigned int *a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v29, a25);
  MEMORY[0x192FA3C30](&a20);
  AMSCore::Error::~Error((AMSCore::Error *)&a11);
  std::optional<AMSCore::Error>::~optional((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_18DB35ED0()
{
  if (*(char *)(v0 - 89) < 0) {
    operator delete(*(void **)(v0 - 112));
  }
  JUMPOUT(0x18DB35EB8);
}

void AMSCore::Task<std::map<std::string,AMSCore::MetricsEventModifier::TopicModifier>,AMSCore::Error>::Promise::unhandled_exception()
{
  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

uint64_t sub_18DB35F08(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v36, (uint64_t)v33);
  std::optional<std::expected<std::map<std::string,AMSCore::MetricsEventModifier::TopicModifier>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>(v29, v36);
  v36[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  uint64_t v30 = v38;
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v37, v37[1]);
  MEMORY[0x192FA3C30](v36);
  v33[0] = &unk_1EDC827D8;
  uint64_t v31 = v35;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v34, v34[1]);
  return MEMORY[0x192FA3C30](v33);
}

uint64_t AMSCore::Task<std::map<std::string,AMSCore::MetricsEventModifier::TopicModifier>,AMSCore::Error>::Promise::Awaiter::await_suspend(uint64_t result)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void (**)(void))atomic_exchange((atomic_ullong *volatile)(*(void *)result + 96), 1uLL);
  if (v1)
  {
    uint64_t v2 = result;
    if (v1 == (void (**)(void))2) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result - 8))(*(void *)result - 16);
    }
    uint64_t v3 = (uint64_t *)(*(void *)result + 128);
    uint64_t result = *v3;
    if (*v3)
    {
      if (result == *(void *)v2 + 104)
      {
        uint64_t v21 = v20;
        uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 24))(result, v20);
      }
      else
      {
        uint64_t v21 = *(void **)(*(void *)v2 + 128);
        *uint64_t v3 = 0;
      }
    }
    else
    {
      uint64_t v21 = 0;
    }
    if (v21)
    {
      uint64_t v4 = *(void *)v2;
      if (!*(unsigned char *)(v4 + 88))
      {
        __break(1u);
        return result;
      }
      int v5 = (std::runtime_error *)(v4 + 8);
      char v6 = *(unsigned char *)(v4 + 80);
      if (v6)
      {
        size_t v9 = *(const char **)(v4 + 16);
        uint64_t v8 = (std::runtime_error_vtbl *)(v4 + 16);
        int v7 = v9;
        v13.__vftable = (std::runtime_error_vtbl *)v8[-1].what;
        v13.__imp_.__imp_ = v9;
        *(void *)&long long v14 = v8->~runtime_error_0;
        if ((void)v14)
        {
          *((void *)v7 + 2) = &v13.__imp_;
          v5->__vftable = v8;
          v8->~runtime_error = 0;
          v8->~runtime_error_0 = 0;
        }
        else
        {
          v13.__vftable = (std::runtime_error_vtbl *)&v13.__imp_;
        }
      }
      else
      {
        std::runtime_error::runtime_error(&v13, v5);
        std::runtime_error v10 = (void *)(v4 + 48);
        uint64_t v11 = *(void *)(v4 + 48);
        long long v14 = *(_OWORD *)(v4 + 24);
        char v12 = *(uint64_t **)(v4 + 40);
        v13.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        std::system_error v15 = v12;
        uint64_t v16 = v11;
        if (*(void *)(v4 + 56))
        {
          *(void *)(v11 + 16) = &v16;
          *(void *)(v4 + 40) = v10;
          void *v10 = 0;
          *(void *)(v4 + 56) = 0;
        }
        else
        {
          std::system_error v15 = &v16;
        }
        long long v18 = *(_OWORD *)(v4 + 64);
        *(void *)(v4 + 64) = 0;
        *(void *)(v4 + 72) = 0;
      }
      char v19 = v6;
      if (!v21) {
        std::__throw_bad_function_call[abi:fe180100]();
      }
      (*(void (**)(void *, std::runtime_error *))(*v21 + 48))(v21, &v13);
      if (v19) {
        std::__tree<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,AMSCore::MetricsEventModifier::TopicModifier>>>::destroy((char *)v13.__imp_.__imp_);
      }
      else {
        ((void (*)(std::runtime_error *))v13.~runtime_error)(&v13);
      }
    }
    else
    {
      (*v1)(v1);
    }
    uint64_t result = (uint64_t)v21;
    if (v21 == v20)
    {
      return (*(uint64_t (**)(void *))(v20[0] + 32))(v20);
    }
    else if (v21)
    {
      return (*(uint64_t (**)(void))(*v21 + 40))();
    }
  }
  return result;
}

void sub_18DB362D8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<AMSCore::IMetricsProvider::Event  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN7AMSCore16IMetricsProvider5EventEEE"
    || ((v3 & (unint64_t)"NSt3__114default_deleteIN7AMSCore16IMetricsProvider5EventEEE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "NSt3__114default_deleteIN7AMSCore16IMetricsProvider5EventEEE")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN7AMSCore16IMetricsProvider5EventEEE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::IMetricsProvider::Event  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::IMetricsProvider::Event  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::map<std::string,AMSCore::MetricsEventModifier::TopicModifier>,AMSCore::Error>::Promise *,AMSCore::Task<std::map<std::string,AMSCore::MetricsEventModifier::TopicModifier>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::map<std::string,AMSCore::MetricsEventModifier::TopicModifier>,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINSt3__13mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_20Metri"
                     "csEventModifier13TopicModifierENS1_4lessIS8_EENS6_INS1_4pairIKS8_SA_EEEEEENS_5ErrorEE7Promise17get_"
                     "return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINSt3__13mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEE"
                                "ENS_20MetricsEventModifier13TopicModifierENS1_4lessIS8_EENS6_INS1_4pairIKS8_SA_EEEEEENS_"
                                "5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINSt3__13mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_20MetricsEventModifier13TopicModifierENS1_4lessIS8_EENS6_INS1_4pairIKS8_SA_EEEEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINSt3__13mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_20MetricsEventModifier13TopicModifierENS1_4lessIS8_EENS6_INS1_4pairIKS8_SA_EEEEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::map<std::string,AMSCore::MetricsEventModifier::TopicModifier>,AMSCore::Error>::Promise *,AMSCore::Task<std::map<std::string,AMSCore::MetricsEventModifier::TopicModifier>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::map<std::string,AMSCore::MetricsEventModifier::TopicModifier>,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 96), 2uLL)) {
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::Task<std::map<std::string,AMSCore::MetricsEventModifier::TopicModifier>,AMSCore::Error>::Promise *,AMSCore::Task<std::map<std::string,AMSCore::MetricsEventModifier::TopicModifier>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::map<std::string,AMSCore::MetricsEventModifier::TopicModifier>,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void AMSCore::MetricsProvider::postEvents(uint64_t a1, void *a2)
{
  uint64_t v4 = operator new(0x348uLL);
  void *v4 = AMSCore::MetricsProvider::postEvents;
  v4[1] = AMSCore::MetricsProvider::postEvents;
  v4[95] = a1;
  uint64_t v5 = a2[1];
  v4[96] = *a2;
  v4[97] = v5;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *((unsigned char *)v4 + 24) = 0;
  *((unsigned char *)v4 + 104) = 0;
  v4[14] = 0;
  v4[18] = 0;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(v6, (uint64_t)(v4 + 2));
}

void sub_18DB37000(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a24);
  AMSCore::AppleHTTPProvider::submitRequest(std::shared_ptr<AMSCore::HTTPRequest const>,std::optional<std::chrono::duration<long long,std::ratio<1l,1000l>>>)::$_0::~$_0(a25);
  uint64_t v31 = *v29;
  uint64_t *v29 = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  AMSCore::MetricsEventModifier::EventModifier::~EventModifier(v28);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a28);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DB370C0()
{
}

void AMSCore::MetricsProvider::postEvents(char *a1)
{
  uint64_t v2 = (std::runtime_error *)(a1 + 440);
  unint64_t v3 = (AMSCore::MetricsEventModifier::MergedEventModifier *)(a1 + 152);
  uint64_t v4 = (std::runtime_error *)(a1 + 520);
  uint64_t v5 = a1 + 704;
  char v49 = (const AMSCore::IMetricsProvider::Event **)(a1 + 736);
  long long v50 = (std::runtime_error *)(a1 + 600);
  char v6 = (uint64_t *)(a1 + 752);
  int v48 = a1 + 16;
  if (a1[832])
  {
    uint64_t v16 = *((void *)a1 + 101);
    if (!*(unsigned char *)(v16 + 88))
    {
LABEL_100:
      __break(1u);
      return;
    }
    char v17 = *(unsigned char *)(v16 + 80);
    if (!v17)
    {
      long long v18 = a1 + 560;
      std::runtime_error::runtime_error(v4, (const std::runtime_error *)(v16 + 8));
      *(_OWORD *)(a1 + 536) = *(_OWORD *)(v16 + 24);
      *((void *)a1 + 65) = &unk_1EDC827D8;
      char v19 = (void *)(v16 + 48);
      uint64_t v20 = *(void *)(v16 + 48);
      *((void *)a1 + 69) = *(void *)(v16 + 40);
      *((void *)a1 + 70) = v20;
      uint64_t v21 = *(void *)(v16 + 56);
      *((void *)a1 + 71) = v21;
      if (v21)
      {
        *(void *)(v20 + 16) = v18;
        *(void *)(v16 + 40) = v19;
        void *v19 = 0;
        *(void *)(v16 + 56) = 0;
      }
      else
      {
        *((void *)a1 + 69) = v18;
      }
      uint64_t v22 = *((void *)a1 + 101);
      *((_OWORD *)a1 + 36) = *(_OWORD *)(v22 + 64);
      *(void *)(v22 + 64) = 0;
      *(void *)(v22 + 72) = 0;
    }
    a1[592] = v17;
    uint64_t v23 = *((void *)a1 + 102);
    if (v23 && !atomic_fetch_add((atomic_ullong *volatile)(v23 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      long long v25 = (std::__shared_weak_count *)*((void *)a1 + 102);
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      char v24 = (std::__shared_weak_count *)*((void *)a1 + 56);
      if (!v24) {
        goto LABEL_30;
      }
    }
    else
    {
      char v24 = (std::__shared_weak_count *)*((void *)a1 + 56);
      if (!v24) {
        goto LABEL_30;
      }
    }
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
LABEL_30:
    std::error_code v26 = (std::__shared_weak_count *)*((void *)a1 + 91);
    if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      long long v27 = (std::__shared_weak_count *)*((void *)a1 + 87);
      if (v27)
      {
LABEL_33:
        if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }
    else
    {
      long long v27 = (std::__shared_weak_count *)*((void *)a1 + 87);
      if (v27) {
        goto LABEL_33;
      }
    }
    int v28 = (std::__shared_weak_count *)*((void *)a1 + 85);
    if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
    uint64_t v29 = *v6;
    uint64_t *v6 = 0;
    if (v29) {
      (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
    }
    if (!a1[592])
    {
      uint64_t v35 = (unsigned int **)(a1 + 480);
      std::runtime_error::runtime_error(v2, v4);
      *(_OWORD *)(a1 + 456) = *(_OWORD *)(a1 + 536);
      *((void *)a1 + 55) = &unk_1EDC827D8;
      uint64_t v36 = *((void *)a1 + 70);
      *((void *)a1 + 59) = *((void *)a1 + 69);
      *((void *)a1 + 60) = v36;
      uint64_t v37 = *((void *)a1 + 71);
      *((void *)a1 + 61) = v37;
      if (v37)
      {
        *(void *)(v36 + 16) = v35;
        *((void *)a1 + 69) = a1 + 560;
        *((void *)a1 + 70) = 0;
        *((void *)a1 + 71) = 0;
      }
      else
      {
        *((void *)a1 + 59) = v35;
      }
      *((_OWORD *)a1 + 31) = *((_OWORD *)a1 + 36);
      *((void *)a1 + 73) = 0;
      *((void *)a1 + 72) = 0;
      a1[512] = 1;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v50, (uint64_t)v2);
      if (a1[104])
      {
        if (!a1[96]) {
          (**((void (***)(void))a1 + 3))();
        }
        a1[104] = 0;
      }
      std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), v50);
      uint64_t v38 = *((void *)a1 + 80);
      *((void *)a1 + 8) = v38;
      int v39 = a1 + 64;
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 616);
      *((void *)a1 + 3) = &unk_1EDC827D8;
      *((void *)a1 + 7) = *((void *)a1 + 79);
      uint64_t v40 = *((void *)a1 + 81);
      *((void *)a1 + 9) = v40;
      if (v40)
      {
        *(void *)(v38 + 16) = v39;
        *((void *)a1 + 79) = a1 + 640;
        *((void *)a1 + 80) = 0;
        *((void *)a1 + 81) = 0;
        uint64_t v38 = 0;
      }
      else
      {
        *((void *)a1 + 7) = v39;
      }
      *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 41);
      *((void *)a1 + 83) = 0;
      *((void *)a1 + 82) = 0;
      a1[96] = 0;
      a1[104] = 1;
      *((void *)a1 + 75) = &unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)(a1 + 632), (unsigned int *)v38);
      MEMORY[0x192FA3C30](v50);
      if (a1[512])
      {
        *((void *)a1 + 55) = &unk_1EDC827D8;
        uint64_t v41 = (std::__shared_weak_count *)*((void *)a1 + 63);
        if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)(a1 + 472), *v35);
        MEMORY[0x192FA3C30](v2);
      }
      if (!a1[592]) {
        ((void (*)(std::runtime_error *))v4->~runtime_error)(v4);
      }
      int v15 = 3;
      if (!a1[424]) {
        goto LABEL_45;
      }
      goto LABEL_44;
    }
    int v15 = 0;
LABEL_43:
    if (!a1[424]) {
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::await_resume((uint64_t)v3, *((void *)a1 + 99));
  uint64_t v7 = *((void *)a1 + 100);
  if (v7 && !atomic_fetch_add((atomic_ullong *volatile)(v7 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    size_t v9 = (std::__shared_weak_count *)*((void *)a1 + 100);
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)a1 + 56);
    if (!v8) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v8 = (std::__shared_weak_count *)*((void *)a1 + 56);
    if (!v8) {
      goto LABEL_8;
    }
  }
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_8:
  std::runtime_error v10 = (std::__shared_weak_count *)*((void *)a1 + 89);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = *v49;
  AMSCore::MetricsEventModifier::MergedEventModifier::shouldDropEvent(v3, *v49);
  if (!v12) {
    operator new();
  }
  AMSCore::getValueByKey<std::string,std::map<std::string,AMSCore::Any> const>((uint64_t)v51, (uint64_t)v11 + 72, "topic", 5uLL);
  if (!v52) {
    goto LABEL_100;
  }
  uint64_t v13 = v51[0];
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v2);
  AMSCore::Logger::log<char [17],std::string>((uint64_t)v2->__vftable, v13);
  long long v14 = (std::__shared_weak_count *)*((void *)a1 + 56);
  int v15 = 7;
  if (!v14 || atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_43;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (a1[424]) {
LABEL_44:
  }
    AMSCore::URL::~URL((AMSCore::URL *)(a1 + 272));
LABEL_45:
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)a1 + 30));
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)a1 + 27));
  std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)a1 + 24));
  uint64_t v30 = (std::__shared_weak_count *)*((void *)a1 + 93);
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  switch(v15)
  {
    case 0:
    case 7:
      uint64_t v31 = (uint64_t *)(*((void *)a1 + 98) + 8);
      if (v31 != *((uint64_t **)a1 + 97))
      {
        *((void *)a1 + 98) = v31;
        uint64_t v32 = *v31;
        *((void *)a1 + 92) = *v31;
        if (v32) {
          operator new();
        }
        uint64_t v33 = *((void *)a1 + 95);
        *((void *)a1 + 93) = 0;
        *uint64_t v31 = 0;
        uint64_t v34 = *(void *)(v33 + 96);
        void *v5 = 0;
        v5[1] = 0;
        AMSCore::MetricsEventModifierProvider::getOverrideForEvent((uint64_t)v2, v34, (uint64_t)v5);
      }
      goto LABEL_72;
    case 3:
      goto LABEL_79;
    case 6:
LABEL_72:
      if (a1[104]) {
        BOOL v42 = a1[96] == 0;
      }
      else {
        BOOL v42 = 0;
      }
      if (v42) {
        (**((void (***)(void))a1 + 3))();
      }
      a1[96] = 1;
      a1[104] = 1;
LABEL_79:
      *((void *)a1 + 103) = a1;
      *((void *)a1 + 19) = v48;
      *(void *)a1 = 0;
      AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v3);
      break;
    default:
      uint64_t v43 = (char *)*((void *)a1 + 18);
      if (v43 == a1 + 120)
      {
        (*(void (**)(char *))(*((void *)a1 + 15) + 32))(a1 + 120);
      }
      else if (v43)
      {
        (*(void (**)(char *))(*(void *)v43 + 40))(v43);
      }
      if (a1[104] && !a1[96]) {
        (**((void (***)(void))a1 + 3))();
      }
      uint64_t v44 = *((void *)a1 + 96);
      if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
        MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
      }
      if (v44)
      {
        uint64_t v45 = (void *)*((void *)a1 + 97);
        while (v45 != *((void **)a1 + 96))
        {
          uint64_t v47 = *--v45;
          uint64_t v46 = v47;
          *uint64_t v45 = 0;
          if (v47) {
            (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
          }
        }
        operator delete(v45);
      }
      operator delete(a1);
      break;
  }
}

void sub_18DB37C10(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v14);
  AMSCore::MetricsEventModifier::EventModifier::~EventModifier(v13);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a13);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DB37CCC()
{
}

void AMSCore::MetricsProvider::postEvents(char *__p)
{
  if (*(void *)__p)
  {
    if (__p[832])
    {
      uint64_t v2 = *((void *)__p + 102);
      if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        unint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 102);
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
      uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 56);
      if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      uint64_t v5 = (std::__shared_weak_count *)*((void *)__p + 91);
      if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      char v6 = (std::__shared_weak_count *)*((void *)__p + 87);
      if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      uint64_t v7 = (std::__shared_weak_count *)*((void *)__p + 85);
      if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      uint64_t v8 = *((void *)__p + 94);
      *((void *)__p + 94) = 0;
      if (v8) {
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      }
      if (__p[424]) {
        AMSCore::URL::~URL((AMSCore::URL *)(__p + 272));
      }
      std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)__p + 30));
      std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)__p + 27));
      std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)__p + 24));
    }
    else
    {
      uint64_t v15 = *((void *)__p + 100);
      if (v15 && !atomic_fetch_add((atomic_ullong *volatile)(v15 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v16 = (std::__shared_weak_count *)*((void *)__p + 100);
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      char v17 = (std::__shared_weak_count *)*((void *)__p + 56);
      if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      long long v18 = (std::__shared_weak_count *)*((void *)__p + 89);
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    size_t v9 = (std::__shared_weak_count *)*((void *)__p + 93);
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::runtime_error v10 = (char *)*((void *)__p + 18);
  if (v10 == __p + 120)
  {
    (*(void (**)(char *))(*((void *)__p + 15) + 32))(__p + 120);
    if (!__p[104]) {
      goto LABEL_34;
    }
    goto LABEL_32;
  }
  if (v10) {
    (*(void (**)(char *))(*(void *)v10 + 40))(v10);
  }
  if (__p[104])
  {
LABEL_32:
    if (!__p[96]) {
      (**((void (***)(void))__p + 3))();
    }
  }
LABEL_34:
  uint64_t v11 = *((void *)__p + 96);
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v11)
  {
    int v12 = (void *)*((void *)__p + 97);
    while (v12 != *((void **)__p + 96))
    {
      uint64_t v14 = *--v12;
      uint64_t v13 = v14;
      void *v12 = 0;
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
    }
    operator delete(v12);
  }
  operator delete(__p);
}

uint64_t AMSCore::internal::MetricsSamplingProvider::shouldSendMetrics(uint64_t a1, uint64_t a2, unint64_t __val)
{
  strcpy(v16, "AMSSamplingSession-");
  v16[23] = 19;
  std::to_string(&v15, __val);
  int v5 = SHIBYTE(v15.__r_.__value_.__r.__words[2]);
  char v6 = (void *)v15.__r_.__value_.__r.__words[0];
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v7 = &v15;
  }
  else {
    uint64_t v7 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v15.__r_.__value_.__l.__size_;
  }
  if (size <= 3)
  {
    if (!size) {
      goto LABEL_18;
    }
    memmove(&v16[19], v7, size);
    if ((v16[23] & 0x80000000) != 0) {
      *(void *)&v16[8] = size + 19;
    }
    else {
      v16[23] = size + 19;
    }
    int v12 = &v16[size + 19];
  }
  else
  {
    if (size - 0x7FFFFFFFFFFFFFE4 <= 0x800000000000001ELL) {
      std::string::__throw_length_error[abi:fe180100]();
    }
    uint64_t v9 = 44;
    if (size + 19 > 0x2C) {
      uint64_t v9 = size + 19;
    }
    size_t v10 = (v9 | 7) + 1;
    uint64_t v11 = (char *)operator new(v10);
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v16;
    *(_DWORD *)(v11 + 15) = *(_DWORD *)&v16[15];
    memcpy(v11 + 19, v7, size);
    *(void *)&v16[8] = size + 19;
    *(void *)&v16[16] = v10 | 0x8000000000000000;
    *(void *)uint64_t v16 = v11;
    int v12 = &v11[size + 19];
  }
  char *v12 = 0;
LABEL_18:
  *(_OWORD *)std::runtime_error __p = *(_OWORD *)v16;
  uint64_t v18 = *(void *)&v16[16];
  memset(v16, 0, sizeof(v16));
  if (v5 < 0) {
    operator delete(v6);
  }
  uint64_t shouldSendLoadURLMetrics = AMSCore::internal::MetricsSamplingProvider::shouldSendLoadURLMetrics(a1, *(void *)a2, *(double *)(a2 + 8));
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  return shouldSendLoadURLMetrics;
}

void sub_18DB38364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::internal::MetricsSamplingProvider::shouldSendLoadURLMetrics(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  AMSCore::ServiceProvider<AMSCore::IDataProvider>::getDefault(&v23);
  (*(void (**)(void *__return_ptr))(*(void *)v23 + 32))(v19);
  if (v20 == 0xFFFFFFFFLL) {
    char v7 = 0;
  }
  else {
    char v7 = v20;
  }
  if (v7 == 7)
  {
    char v8 = 0;
    uint64_t v9 = v19[0];
LABEL_8:
    unint64_t v10 = v9 & 0xFFFFFFFFFFFFFF00;
    if (v20 == -1) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v7 == 3)
  {
    char v8 = 0;
    uint64_t v9 = 1000 * v19[0];
    goto LABEL_8;
  }
  LOBYTE(v9) = 0;
  unint64_t v10 = 0;
  char v8 = 1;
  if (v20 != -1) {
LABEL_11:
  }
    ((void (*)(char *, void *))off_1EDCA61A8[v20])(&v22, v19);
LABEL_12:
  int v20 = -1;
  uint64_t v11 = v24;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if ((v8 & 1) == 0)
    {
LABEL_15:
      if (v6 <= (uint64_t)((v10 | v9) + 1000 * a2)) {
        return 1;
      }
    }
  }
  else if ((v8 & 1) == 0)
  {
    goto LABEL_15;
  }
  if (a3 <= 0.0) {
    return 0;
  }
  uint64_t v12 = *(void *)(a1 + 40);
  if (!v12) {
    std::__throw_bad_function_call[abi:fe180100]();
  }
  if ((*(double (**)(uint64_t))(*(void *)v12 + 48))(v12) > a3) {
    return 0;
  }
  AMSCore::ServiceProvider<AMSCore::IDataProvider>::getDefault(&v23);
  v16[0] = v6;
  int v17 = 7;
  char v18 = 1;
  (*(void (**)(void *__return_ptr))(*(void *)v23 + 48))(v19);
  ((void (*)(char *, uint64_t *))off_1EDCA61E0[0])(&v22, v16);
  int v17 = -1;
  uint64_t v14 = v24;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (!v21)
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v23);
    AMSCore::Logger::log<char [41],AMSCore::Error>(v23, 4u, (uint64_t)"bag", 3, "Failed to set timing window start time: ", (uint64_t)v19);
    std::string v15 = v24;
    if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    if (!v21) {
      (*(void (**)(void *))v19[0])(v19);
    }
  }
  return 1;
}

void sub_18DB38730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void (**a14)(void), uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v23 - 112);
  if (!a23)
  {
    (*a14)(&a14);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AMSCore::internal::MetricsSamplingProvider::shouldSendMetrics(AMSCore::internal::MetricsSamplingProvider *this, const AMSCore::LoadURLMetricsEventConfig *a2)
{
  return AMSCore::internal::MetricsSamplingProvider::shouldSendLoadURLMetrics((uint64_t)this, *((void *)a2 + 11), *((double *)a2 + 10));
}

void AMSCore::internal::MetricsSamplingProvider::~MetricsSamplingProvider(AMSCore::internal::MetricsSamplingProvider *this)
{
  *(void *)this = &unk_1EDC82898;
  uint64_t v2 = (char *)this + 16;
  unint64_t v3 = (char *)*((void *)this + 5);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  JUMPOUT(0x192FA4080);
}

{
  char *v2;
  char *v3;
  uint64_t v4;

  *(void *)this = &unk_1EDC82898;
  uint64_t v2 = (char *)this + 16;
  unint64_t v3 = (char *)*((void *)this + 5);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
}

void *std::__function::__func<AMSCore::IMetricsSamplingProvider::makeDefault(void)::$_0,std::allocator<AMSCore::IMetricsSamplingProvider::makeDefault(void)::$_0>,double ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMSCore::IMetricsSamplingProvider::makeDefault(void)::$_0,std::allocator<AMSCore::IMetricsSamplingProvider::makeDefault(void)::$_0>,double ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore24IMetricsSamplingProvider11makeDefaultEvE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore24IMetricsSamplingProvider11makeDefaultEvE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore24IMetricsSamplingProvider11makeDefaultEvE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore24IMetricsSamplingProvider11makeDefaultEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<AMSCore::IMetricsSamplingProvider::makeDefault(void)::$_0,std::allocator<AMSCore::IMetricsSamplingProvider::makeDefault(void)::$_0>,double ()(void)>::operator()()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_14RandomProviderEEERDavE9singleton, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_14RandomProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_14RandomProviderEEERDavE9singleton);
    qword_1EB38C508 = 0;
    qword_1EB38C510 = 0;
    byte_1EB38C518 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_14RandomProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_14RandomProviderEEERDavE9singleton);
  if (!byte_1EB38C518) {
    std::terminate();
  }
  uint64_t v1 = qword_1EB38C508;
  uint64_t v0 = (std::__shared_weak_count *)qword_1EB38C510;
  if (qword_1EB38C510) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(qword_1EB38C510 + 8), 1uLL, memory_order_relaxed);
  }
  std::__shared_mutex_base::unlock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_14RandomProviderEEERDavE9singleton);
  std::mutex::lock((std::mutex *)(v1 + 8));
  uint64_t v2 = v1 + 72;
  uint64_t v3 = *(void *)(v1 + 2568);
  unint64_t v4 = (v3 + 1) % 0x270uLL;
  unsigned int v5 = *(_DWORD *)(v1 + 72 + 4 * ((v3 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(v1 + 72 + 4 * v4) & 0x7FFFFFFE | *(_DWORD *)(v1 + 72 + 4 * v3) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v1 + 72 + 4 * v4) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(v1 + 72 + 4 * v3) = v5;
  if (v4 == 623) {
    unint64_t v6 = 0;
  }
  else {
    unint64_t v6 = v4 + 1;
  }
  uint64_t v7 = 397;
  if (v4 >= 0xE3) {
    uint64_t v7 = -227;
  }
  unsigned int v8 = *(_DWORD *)(v2 + 4 * (v7 + v4)) ^ ((*(_DWORD *)(v2 + 4 * v6) & 0x7FFFFFFE | *(_DWORD *)(v2 + 4 * v4) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v2 + 4 * v6) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(v2 + 4 * v4) = v8;
  *(void *)(v1 + 2568) = v6;
  std::mutex::unlock((std::mutex *)(v1 + 8));
  if (v0 && !atomic_fetch_add(&v0->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
    std::__shared_weak_count::__release_weak(v0);
  }
  unsigned int v9 = ((v8 ^ (v8 >> 11)) << 7) & 0x9D2C5680 ^ v8 ^ (v8 >> 11);
  double v10 = (double)((v9 << 15) & 0xEFC60000 ^ v9 ^ (((v9 << 15) & 0xEFC60000 ^ v9) >> 18));
  unsigned int v11 = ((v5 ^ (v5 >> 11)) << 7) & 0x9D2C5680 ^ v5 ^ (v5 >> 11);
  return ((double)((v11 << 15) & 0xEFC60000 ^ v11 ^ (((v11 << 15) & 0xEFC60000 ^ v11) >> 18)) + v10 * 4294967300.0)
       * 5.42101086e-20
       + 0.0;
}

void sub_18DB38C20(void *a1)
{
}

void std::__function::__func<AMSCore::IMetricsSamplingProvider::makeDefault(void)::$_0,std::allocator<AMSCore::IMetricsSamplingProvider::makeDefault(void)::$_0>,double ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDC831E0;
}

void *std::__function::__func<AMSCore::IMetricsSamplingProvider::makeDefault(void)::$_0,std::allocator<AMSCore::IMetricsSamplingProvider::makeDefault(void)::$_0>,double ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_1EDC831E0;
  return result;
}

void std::__function::__func<AMSCore::IMetricsSamplingProvider::makeDefault(void)::$_0,std::allocator<AMSCore::IMetricsSamplingProvider::makeDefault(void)::$_0>,double ()(void)>::~__func()
{
}

uint64_t std::__shared_ptr_emplace<AMSCore::internal::MetricsSamplingProvider>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMSCore::internal::MetricsSamplingProvider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC842B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::internal::MetricsSamplingProvider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC842B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AMSCore::UploadMetricsEventTask::internal::perform(uint64_t a1)
{
  uint64_t v1 = a1 + 152;
  uint64_t v2 = (_OWORD *)(a1 + 440);
  uint64_t v3 = (std::runtime_error *)(a1 + 1072);
  uint64_t v138 = (void *)(a1 + 1248);
  uint64_t v139 = (_OWORD *)(a1 + 896);
  uint64_t v145 = (long long *)(a1 + 1128);
  uint64_t v146 = a1 + 1280;
  char v141 = (std::string *)(a1 + 1376);
  std::runtime_error v142 = (std::string *)(a1 + 1328);
  long long v143 = (void *)(a1 + 1400);
  uint64_t v144 = (uint64_t *)(a1 + 1304);
  unint64_t v4 = (void *)(a1 + 1424);
  uint64_t v5 = a1 + 1440;
  unint64_t v137 = (void *)(a1 + 1472);
  long long v140 = (void *)(a1 + 1488);
  unint64_t v6 = (void *)(a1 + 1504);
  uint64_t v7 = (uint64_t *)(a1 + 1520);
  uint64_t v8 = a1 + 16;
  switch(*(unsigned char *)(a1 + 1656))
  {
    case 1:
      int v39 = (_OWORD *)(a1 + 720);
      AMSCore::Task<AMSCore::MetricsEventModifier::MergedEventModifier,void>::Promise::await_resume(v1, *(void *)(a1 + 1592));
      uint64_t v40 = *(void *)(a1 + 1600);
      if (v40 && !atomic_fetch_add((atomic_ullong *volatile)(v40 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v41 = *(std::__shared_weak_count **)(a1 + 1600);
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
      BOOL v42 = *(std::__shared_weak_count **)(a1 + 728);
      if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
      uint64_t v43 = **(std::__shared_weak_count ***)(a1 + 1576);
      if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
      *int v39 = *(_OWORD *)(a1 + 256);
      *(unsigned char *)(a1 + 736) = 0;
      *(unsigned char *)(a1 + 888) = 0;
      if (*(unsigned char *)(a1 + 424))
      {
        AMSCore::URL::URL((std::string *)(a1 + 736), (const AMSCore::URL *)(a1 + 272));
        *(unsigned char *)(a1 + 888) = 1;
      }
      uint64_t v44 = (void *)(a1 + 192);
      uint64_t v45 = *(void *)(a1 + 192);
      uint64_t v46 = *(void *)(a1 + 1456);
      _OWORD *v2 = *(_OWORD *)v1;
      *(_OWORD *)((char *)v2 + 12) = *(_OWORD *)(v1 + 12);
      uint64_t v47 = a1 + 480;
      *(void *)(a1 + 472) = *(void *)(a1 + 184);
      *(void *)(a1 + 480) = v45;
      uint64_t v48 = *(void *)(a1 + 200);
      *(void *)(a1 + 488) = v48;
      if (v48)
      {
        *(void *)(v45 + 16) = v47;
        *(void *)(a1 + 184) = v44;
        *uint64_t v44 = 0;
        *(void *)(a1 + 200) = 0;
      }
      else
      {
        *(void *)(a1 + 472) = v47;
      }
      char v49 = (void *)(a1 + 216);
      uint64_t v50 = *(void *)(a1 + 216);
      uint64_t v51 = a1 + 504;
      *(void *)(a1 + 496) = *(void *)(a1 + 208);
      *(void *)(a1 + 504) = v50;
      uint64_t v52 = *(void *)(a1 + 224);
      *(void *)(a1 + 512) = v52;
      if (v52)
      {
        *(void *)(v50 + 16) = v51;
        *(void *)(a1 + 208) = v49;
        *char v49 = 0;
        *(void *)(a1 + 224) = 0;
      }
      else
      {
        *(void *)(a1 + 496) = v51;
      }
      long long v53 = (void *)(a1 + 240);
      uint64_t v54 = *(void *)(a1 + 240);
      uint64_t v55 = a1 + 528;
      *(void *)(a1 + 520) = *(void *)(a1 + 232);
      *(void *)(a1 + 528) = v54;
      uint64_t v56 = *(void *)(a1 + 248);
      *(void *)(a1 + 536) = v56;
      if (v56)
      {
        *(void *)(v54 + 16) = v55;
        *(void *)(a1 + 232) = v53;
        *long long v53 = 0;
        *(void *)(a1 + 248) = 0;
      }
      else
      {
        *(void *)(a1 + 520) = v55;
      }
      *(_OWORD *)(a1 + 544) = *(_OWORD *)(a1 + 256);
      *(unsigned char *)(a1 + 560) = 0;
      *(unsigned char *)(a1 + 712) = 0;
      if (*(unsigned char *)(a1 + 424))
      {
        *(unsigned char *)(a1 + 584) = 0;
        if (*(unsigned char *)(a1 + 296))
        {
          *(_OWORD *)(a1 + 560) = *(_OWORD *)(a1 + 272);
          *(void *)(a1 + 576) = *(void *)(a1 + 288);
          *(void *)(a1 + 280) = 0;
          *(void *)(a1 + 288) = 0;
          *(void *)(a1 + 272) = 0;
          *(unsigned char *)(a1 + 584) = 1;
        }
        *(unsigned char *)(a1 + 592) = 0;
        *(unsigned char *)(a1 + 616) = 0;
        if (*(unsigned char *)(a1 + 328))
        {
          *(_OWORD *)(a1 + 592) = *(_OWORD *)(a1 + 304);
          *(void *)(a1 + 608) = *(void *)(a1 + 320);
          *(void *)(a1 + 312) = 0;
          *(void *)(a1 + 320) = 0;
          *(void *)(a1 + 304) = 0;
          *(unsigned char *)(a1 + 616) = 1;
        }
        *(unsigned char *)(a1 + 624) = 0;
        *(unsigned char *)(a1 + 648) = 0;
        if (*(unsigned char *)(a1 + 360))
        {
          *(_OWORD *)(a1 + 624) = *(_OWORD *)(a1 + 336);
          *(void *)(a1 + 640) = *(void *)(a1 + 352);
          *(void *)(a1 + 344) = 0;
          *(void *)(a1 + 352) = 0;
          *(void *)(a1 + 336) = 0;
          *(unsigned char *)(a1 + 648) = 1;
        }
        *(_DWORD *)(a1 + 656) = *(_DWORD *)(a1 + 368);
        *(void *)(a1 + 664) = a1 + 664;
        *(void *)(a1 + 672) = a1 + 664;
        *(void *)(a1 + 680) = 0;
        uint64_t v57 = *(void *)(a1 + 392);
        if (v57)
        {
          uint64_t v59 = *(void *)(a1 + 376);
          std::runtime_error v58 = *(uint64_t **)(a1 + 384);
          uint64_t v60 = *v58;
          *(void *)(v60 + 8) = *(void *)(v59 + 8);
          **(void **)(v59 + 8) = v60;
          uint64_t v61 = *(void *)(a1 + 664);
          *(void *)(v61 + 8) = v58;
          *std::runtime_error v58 = v61;
          *(void *)(a1 + 664) = v59;
          *(void *)(v59 + 8) = a1 + 664;
          *(void *)(a1 + 680) = v57;
          *(void *)(a1 + 392) = 0;
        }
        *(_OWORD *)(a1 + 688) = *(_OWORD *)(a1 + 400);
        *(void *)(a1 + 704) = *(void *)(a1 + 416);
        *(void *)(a1 + 408) = 0;
        *(void *)(a1 + 416) = 0;
        *(void *)(a1 + 400) = 0;
        *(unsigned char *)(a1 + 712) = 1;
      }
      AMSCore::IMetricsProvider::Event::takeProperties((uint64_t)v3, v46, (uint64_t)v2);
    case 2:
      uint64_t v62 = *(void *)(a1 + 1608);
      if (!*(unsigned char *)(v62 + 32)) {
        goto LABEL_234;
      }
      uint64_t v63 = (_OWORD *)(a1 + 720);
      uint64_t v64 = (void *)(v62 + 16);
      uint64_t v65 = *(void *)(v62 + 16);
      *(void *)(a1 + 1400) = *(void *)(v62 + 8);
      uint64_t v66 = (void *)(a1 + 1408);
      *(void *)(a1 + 1408) = v65;
      uint64_t v67 = *(void *)(v62 + 24);
      *(void *)(a1 + 1416) = v67;
      if (v67)
      {
        *(void *)(v65 + 16) = v66;
        *(void *)(v62 + 8) = v64;
        void *v64 = 0;
        *(void *)(v62 + 24) = 0;
        uint64_t v68 = *(void *)(a1 + 1616);
        if (!v68) {
          goto LABEL_89;
        }
      }
      else
      {
        *long long v143 = v66;
        uint64_t v68 = *(void *)(a1 + 1616);
        if (!v68) {
          goto LABEL_89;
        }
      }
      if (!atomic_fetch_add((atomic_ullong *volatile)(v68 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v69 = *(std::__shared_weak_count **)(a1 + 1616);
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
LABEL_89:
      uint64_t v70 = *(std::__shared_weak_count **)(a1 + 1080);
      if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
      if (*(unsigned char *)(a1 + 712)) {
        AMSCore::URL::~URL((AMSCore::URL *)(a1 + 560));
      }
      std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a1 + 528));
      std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a1 + 504));
      std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a1 + 480));
      unint64_t v71 = *(void *)(a1 + 1288);
      if (v71 >= *(void *)(a1 + 1296))
      {
        uint64_t v75 = std::vector<AMSCore::Any>::__emplace_back_slow_path<std::map<std::string,AMSCore::Any>>((char **)v146, v143);
      }
      else
      {
        *(void *)unint64_t v71 = *(void *)(a1 + 1400);
        uint64_t v72 = *(void *)(a1 + 1408);
        *(void *)(v71 + 8) = v72;
        unint64_t v73 = v71 + 8;
        uint64_t v74 = *(void *)(a1 + 1416);
        *(void *)(v71 + 16) = v74;
        if (v74)
        {
          *(void *)(v72 + 16) = v73;
          *long long v143 = v66;
          *uint64_t v66 = 0;
          *(void *)(a1 + 1416) = 0;
        }
        else
        {
          *(void *)unint64_t v71 = v73;
        }
        *(_DWORD *)(v71 + 24) = 8;
        uint64_t v75 = (char *)(v71 + 32);
      }
      *(void *)(a1 + 1288) = v75;
      if (*(char *)(a1 + 1399) < 0)
      {
        std::string::__init_copy_ctor_external(v142, *(const std::string::value_type **)(a1 + 1376), *(void *)(a1 + 1384));
        uint64_t v75 = *(char **)(a1 + 1288);
      }
      else
      {
        *(_OWORD *)&v142->__r_.__value_.__l.__data_ = *(_OWORD *)&v141->__r_.__value_.__l.__data_;
        v142->__r_.__value_.__r.__words[2] = v141->__r_.__value_.__r.__words[2];
      }
      *(void *)(a1 + 1304) = *(void *)(a1 + 1280);
      *(void *)(a1 + 1312) = v75;
      *(void *)(a1 + 1320) = *(void *)(a1 + 1296);
      *(void *)(v146 + 8) = 0;
      *(void *)(v146 + 16) = 0;
      *(void *)uint64_t v146 = 0;
      *(void *)(a1 + 1248) = *(void *)(a1 + 1216);
      uint64_t v76 = *(void *)(a1 + 1224);
      *(void *)(a1 + 1256) = v76;
      if (v76) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v76 + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)(a1 + 1264) = *(void *)(a1 + 1232);
      uint64_t v77 = *(void *)(a1 + 1240);
      *(void *)(a1 + 1272) = v77;
      if (v77) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v77 + 8), 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)(a1 + 1472) = *(_OWORD *)(a1 + 1488);
      *long long v140 = 0;
      v140[1] = 0;
      _OWORD *v139 = *v63;
      *(unsigned char *)(a1 + 912) = 0;
      *(unsigned char *)(a1 + 1064) = 0;
      if (*(unsigned char *)(a1 + 888))
      {
        *(unsigned char *)(a1 + 936) = 0;
        if (*(unsigned char *)(a1 + 760))
        {
          *(_OWORD *)(a1 + 912) = *(_OWORD *)(a1 + 736);
          *(void *)(a1 + 928) = *(void *)(a1 + 752);
          *(void *)(a1 + 736) = 0;
          *(void *)(a1 + 752) = 0;
          *(void *)(a1 + 744) = 0;
          *(unsigned char *)(a1 + 936) = 1;
        }
        *(unsigned char *)(a1 + 944) = 0;
        *(unsigned char *)(a1 + 968) = 0;
        if (*(unsigned char *)(a1 + 792))
        {
          *(_OWORD *)(a1 + 944) = *(_OWORD *)(a1 + 768);
          *(void *)(a1 + 960) = *(void *)(a1 + 784);
          *(void *)(a1 + 768) = 0;
          *(void *)(a1 + 784) = 0;
          *(void *)(a1 + 776) = 0;
          *(unsigned char *)(a1 + 968) = 1;
        }
        *(unsigned char *)(a1 + 976) = 0;
        *(unsigned char *)(a1 + 1000) = 0;
        if (*(unsigned char *)(a1 + 824))
        {
          *(_OWORD *)(a1 + 976) = *(_OWORD *)(a1 + 800);
          *(void *)(a1 + 992) = *(void *)(a1 + 816);
          *(void *)(a1 + 800) = 0;
          *(void *)(a1 + 816) = 0;
          *(void *)(a1 + 808) = 0;
          *(unsigned char *)(a1 + 1000) = 1;
        }
        *(_DWORD *)(a1 + 1008) = *(_DWORD *)(a1 + 832);
        *(void *)(a1 + 1016) = a1 + 1016;
        *(void *)(a1 + 1024) = a1 + 1016;
        *(void *)(a1 + 1032) = 0;
        uint64_t v78 = *(void *)(a1 + 856);
        if (v78)
        {
          std::runtime_error v79 = *(uint64_t **)(a1 + 848);
          uint64_t v80 = *(void *)(a1 + 840);
          uint64_t v81 = *v79;
          *(void *)(v81 + 8) = *(void *)(v80 + 8);
          **(void **)(v80 + 8) = v81;
          uint64_t v82 = *(void *)(a1 + 1016);
          *(void *)(v82 + 8) = v79;
          uint64_t *v79 = v82;
          *(void *)(a1 + 1016) = v80;
          *(void *)(v80 + 8) = a1 + 1016;
          *(void *)(a1 + 1032) = v78;
          *(void *)(a1 + 856) = 0;
        }
        *(_OWORD *)(a1 + 1040) = *(_OWORD *)(a1 + 864);
        *(void *)(a1 + 1056) = *(void *)(a1 + 880);
        *(void *)(a1 + 864) = 0;
        *(void *)(a1 + 880) = 0;
        *(void *)(a1 + 872) = 0;
        *(unsigned char *)(a1 + 1064) = 1;
      }
      *(void *)(a1 + 1520) = *(void *)(a1 + 1552);
      void *v6 = 0;
      v6[1] = 0;
    case 3:
      uint64_t v83 = *(void *)(a1 + 1624);
      if (!*(unsigned char *)(v83 + 88)) {
        goto LABEL_234;
      }
      uint64_t v84 = (const std::runtime_error *)(v83 + 8);
      char v85 = *(unsigned char *)(v83 + 80);
      if (v85)
      {
        LOBYTE(v3->__vftable) = v84->__vftable;
      }
      else
      {
        std::runtime_error::runtime_error(v3, v84);
        *(_OWORD *)(a1 + 1088) = *(_OWORD *)(v83 + 24);
        *(void *)(a1 + 1072) = &unk_1EDC827D8;
        std::runtime_error v86 = (void *)(v83 + 48);
        uint64_t v87 = *(void *)(v83 + 48);
        *(void *)(a1 + 1104) = *(void *)(v83 + 40);
        uint64_t v88 = a1 + 1112;
        *(void *)(a1 + 1112) = v87;
        uint64_t v89 = *(void *)(v83 + 56);
        *(void *)(a1 + 1120) = v89;
        if (v89)
        {
          *(void *)(v87 + 16) = v88;
          *(void *)(v83 + 40) = v86;
          *std::runtime_error v86 = 0;
          *(void *)(v83 + 56) = 0;
        }
        else
        {
          *(void *)(a1 + 1104) = v88;
        }
        uint64_t v90 = *(void *)(a1 + 1624);
        *uint64_t v145 = *(_OWORD *)(v90 + 64);
        *(void *)(v90 + 64) = 0;
        *(void *)(v90 + 72) = 0;
      }
      *(unsigned char *)(a1 + 1144) = v85;
      uint64_t v91 = *(void *)(a1 + 1632);
      if (v91 && !atomic_fetch_add((atomic_ullong *volatile)(v91 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        char v92 = *(std::__shared_weak_count **)(a1 + 1632);
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
      std::runtime_error v93 = *(std::__shared_weak_count **)(a1 + 1448);
      if (v93 && !atomic_fetch_add(&v93->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
      long long v94 = *(std::__shared_weak_count **)(a1 + 1512);
      if (v94 && !atomic_fetch_add(&v94->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
      uint64_t v95 = *v7;
      uint64_t *v7 = 0;
      if (v95) {
        (*(void (**)(uint64_t))(*(void *)v95 + 8))(v95);
      }
      if (*(unsigned char *)(a1 + 1064)) {
        AMSCore::URL::~URL((AMSCore::URL *)(a1 + 912));
      }
      uint64_t v96 = *(std::__shared_weak_count **)(a1 + 1480);
      if (v96 && !atomic_fetch_add(&v96->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
      uint64_t v97 = *(std::__shared_weak_count **)(a1 + 1272);
      if (v97 && !atomic_fetch_add(&v97->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
      long long v98 = *(std::__shared_weak_count **)(a1 + 1256);
      if (v98 && !atomic_fetch_add(&v98->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
      uint64_t v99 = *v144;
      if (*v144)
      {
        uint64_t v100 = *(void *)(a1 + 1312);
        char v101 = (void *)*v144;
        if (v100 != v99)
        {
          do
          {
            uint64_t v102 = v100 - 32;
            uint64_t v103 = *(unsigned int *)(v100 - 8);
            if (v103 != -1) {
              ((void (*)(std::runtime_error *, uint64_t))off_1EDCA61F8[v103])(&v153, v100 - 32);
            }
            *(_DWORD *)(v100 - 8) = -1;
            v100 -= 32;
          }
          while (v102 != v99);
          char v101 = (void *)*v144;
        }
        *(void *)(a1 + 1312) = v99;
        operator delete(v101);
      }
      if (*(char *)(a1 + 1351) < 0)
      {
        operator delete(v142->__r_.__value_.__l.__data_);
        if (*(unsigned char *)(a1 + 1144)) {
          goto LABEL_157;
        }
LABEL_162:
        std::runtime_error::runtime_error(&v153, v3);
        long long v154 = *(_OWORD *)(a1 + 1088);
        long long v105 = *(unsigned int ***)(a1 + 1104);
        v153.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        uint64_t v106 = *(void *)(a1 + 1112);
        uint64_t v107 = *(void *)(a1 + 1120);
        char v155 = v105;
        std::runtime_error v156 = (unsigned int *)v106;
        uint64_t v157 = v107;
        if (v107)
        {
          *(void *)(v106 + 16) = &v156;
          *(void *)(a1 + 1104) = a1 + 1112;
          *(void *)(a1 + 1112) = 0;
          *(void *)(a1 + 1120) = 0;
        }
        else
        {
          char v155 = &v156;
        }
        long long v158 = *v145;
        *(void *)uint64_t v145 = 0;
        *((void *)v145 + 1) = 0;
        unsigned __int8 v159 = 1;
        AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v147, (uint64_t)&v153);
        if (*(unsigned char *)(a1 + 104))
        {
          if (!*(unsigned char *)(a1 + 96)) {
            (**(void (***)(void))(a1 + 24))();
          }
          *(unsigned char *)(a1 + 104) = 0;
        }
        std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v147);
        long long v113 = v148;
        long long v115 = v149;
        uint64_t v114 = v150;
        *(void *)(a1 + 64) = v150;
        uint64_t v116 = a1 + 64;
        *(_OWORD *)(a1 + 40) = v113;
        *(void *)(a1 + 24) = &unk_1EDC827D8;
        uint64_t v117 = v151;
        *(void *)(a1 + 56) = v115;
        *(void *)(a1 + 72) = v117;
        if (v117)
        {
          *(void *)(v114 + 16) = v116;
          std::runtime_error v149 = &v150;
          uint64_t v150 = 0;
          uint64_t v151 = 0;
          uint64_t v114 = 0;
        }
        else
        {
          *(void *)(a1 + 56) = v116;
        }
        *(_OWORD *)(a1 + 80) = v152;
        long long v152 = 0uLL;
        *(unsigned char *)(a1 + 96) = 0;
        *(unsigned char *)(a1 + 104) = 1;
        v147.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v149, (unsigned int *)v114);
        MEMORY[0x192FA3C30](&v147);
        if (v159)
        {
          v153.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
          uint64_t v118 = (std::__shared_weak_count *)*((void *)&v158 + 1);
          if (*((void *)&v158 + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v158 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
            std::__shared_weak_count::__release_weak(v118);
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v155, v156);
          MEMORY[0x192FA3C30](&v153);
        }
        goto LABEL_180;
      }
      if (!*(unsigned char *)(a1 + 1144)) {
        goto LABEL_162;
      }
LABEL_157:
      unsigned __int8 v159 = 1;
      if (!*(unsigned char *)(a1 + 104) || *(unsigned char *)(a1 + 96))
      {
        LOBYTE(v104) = 1;
LABEL_160:
        *(unsigned char *)(a1 + 96) = v104;
        *(unsigned char *)(a1 + 104) = 1;
        goto LABEL_180;
      }
      (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
      int v104 = v159;
      *(unsigned char *)(a1 + 104) = 0;
      if (v104) {
        goto LABEL_160;
      }
      std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v153);
      long long v108 = v154;
      uint64_t v110 = v155;
      char v109 = v156;
      *(void *)(a1 + 64) = v156;
      uint64_t v111 = a1 + 64;
      *(_OWORD *)(a1 + 40) = v108;
      *(void *)(a1 + 24) = &unk_1EDC827D8;
      uint64_t v112 = v157;
      *(void *)(a1 + 56) = v110;
      *(void *)(a1 + 72) = v112;
      if (v112)
      {
        *((void *)v109 + 2) = v111;
        char v155 = &v156;
        std::runtime_error v156 = 0;
        uint64_t v157 = 0;
      }
      else
      {
        *(void *)(a1 + 56) = v111;
      }
      *(_OWORD *)(a1 + 80) = v158;
      long long v158 = 0uLL;
      int v133 = v159;
      *(unsigned char *)(a1 + 96) = 0;
      *(unsigned char *)(a1 + 104) = 1;
      if (!v133) {
        ((void (*)(std::runtime_error *))v153.~runtime_error)(&v153);
      }
LABEL_180:
      if (!*(unsigned char *)(a1 + 1144)) {
        ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v143, *(unsigned int **)(a1 + 1408));
      if (*(unsigned char *)(a1 + 888)) {
        AMSCore::URL::~URL((AMSCore::URL *)(a1 + 736));
      }
      if (*(unsigned char *)(a1 + 424)) {
        AMSCore::URL::~URL((AMSCore::URL *)(a1 + 272));
      }
      std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a1 + 240));
      std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a1 + 216));
      std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*(char **)(a1 + 192));
      long long v119 = **(std::__shared_weak_count ***)(a1 + 1584);
      if (v119 && !atomic_fetch_add(&v119->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
      char v120 = *(char **)v146;
      if (*(void *)v146)
      {
        std::runtime_error v121 = *(char **)(a1 + 1288);
        long long v122 = *(char **)v146;
        if (v121 != v120)
        {
          do
          {
            uint64_t v123 = v121 - 32;
            uint64_t v124 = *((unsigned int *)v121 - 2);
            if (v124 != -1) {
              ((void (*)(std::runtime_error *, char *))off_1EDCA61F8[v124])(&v153, v121 - 32);
            }
            *((_DWORD *)v121 - 2) = -1;
            v121 -= 32;
          }
          while (v123 != v120);
          long long v122 = *(char **)v146;
        }
        *(void *)(a1 + 1288) = v120;
        operator delete(v122);
      }
      int v28 = (void (***)(void))v1;
      if (*(char *)(a1 + 1399) < 0) {
        operator delete(v141->__r_.__value_.__l.__data_);
      }
      uint64_t v125 = 0;
      uint64_t v126 = 0;
      int v29 = 3;
      char v127 = *(std::__shared_weak_count **)(a1 + 1496);
      if (v127)
      {
LABEL_200:
        if (!atomic_fetch_add(&v127->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
          std::__shared_weak_count::__release_weak(v127);
        }
      }
LABEL_202:
      if (v29 == 3)
      {
        *(void *)(a1 + 1648) = v126;
        *(void *)(a1 + 1640) = v125;
        *(void *)(a1 + 152) = v8;
        *(void *)a1 = 0;
        AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v28);
        return;
      }
      uint64_t v128 = *(void *)(a1 + 144);
      if (v128 != a1 + 120)
      {
        if (v128) {
          (*(void (**)(uint64_t))(*(void *)v128 + 40))(v128);
        }
        if (!*(unsigned char *)(a1 + 104)) {
          goto LABEL_212;
        }
        goto LABEL_210;
      }
      (*(void (**)(uint64_t))(*(void *)(a1 + 120) + 32))(a1 + 120);
      if (*(unsigned char *)(a1 + 104))
      {
LABEL_210:
        if (!*(unsigned char *)(a1 + 96)) {
          (**(void (***)(void))(a1 + 24))();
        }
      }
LABEL_212:
      if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
        MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
      }
      if (v125) {
        (*(void (**)(uint64_t))(*(void *)v125 + 8))(v125);
      }
      uint64_t v129 = *(void *)(a1 + 1544);
      if (v129 && !atomic_fetch_add((atomic_ullong *volatile)(v129 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v130 = *(std::__shared_weak_count **)(a1 + 1544);
        ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
        std::__shared_weak_count::__release_weak(v130);
      }
      uint64_t v131 = *(std::__shared_weak_count **)(a1 + 1240);
      if (v131 && !atomic_fetch_add(&v131->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
        std::__shared_weak_count::__release_weak(v131);
      }
      uint64_t v132 = *(std::__shared_weak_count **)(a1 + 1224);
      if (v132 && !atomic_fetch_add(&v132->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
        std::__shared_weak_count::__release_weak(v132);
      }
      if (v126) {
        (*(void (**)(uint64_t))(*(void *)v126 + 8))(v126);
      }
      operator delete((void *)a1);
      return;
    default:
      uint64_t v135 = a1 + 720;
      uint64_t v10 = *(void *)(a1 + 1560);
      if (!*(unsigned char *)(v10 + 88)) {
        goto LABEL_234;
      }
      uint64_t v136 = a1 + 16;
      unsigned int v11 = (const std::runtime_error *)(v10 + 8);
      char v12 = *(unsigned char *)(v10 + 80);
      if (v12)
      {
        *(void *)(a1 + 152) = *(void *)(v10 + 8);
        uint64_t v13 = (const char **)(a1 + 160);
        p_int imp = (std::__libcpp_refstring *)(v10 + 16);
      }
      else
      {
        std::runtime_error::runtime_error((std::runtime_error *)(a1 + 152), v11);
        *(_OWORD *)(a1 + 168) = *(_OWORD *)(v10 + 24);
        std::string v15 = (void *)(v10 + 48);
        uint64_t v16 = *(void *)(v10 + 48);
        *(void *)(a1 + 192) = v16;
        uint64_t v17 = a1 + 192;
        *(void *)(a1 + 152) = &unk_1EDC827D8;
        *(void *)(a1 + 184) = *(void *)(v10 + 40);
        uint64_t v18 = *(void *)(v10 + 56);
        *(void *)(a1 + 200) = v18;
        if (v18)
        {
          *(void *)(v16 + 16) = v17;
          *(void *)(v10 + 40) = v15;
          *std::string v15 = 0;
          *(void *)(v10 + 56) = 0;
        }
        else
        {
          *(void *)(a1 + 184) = v17;
        }
        char v19 = *(const std::runtime_error **)(a1 + 1560);
        int v20 = v19[4].__vftable;
        unsigned int v11 = v19 + 4;
        *(void *)(a1 + 208) = v20;
        uint64_t v13 = (const char **)(a1 + 216);
        p_int imp = &v11->__imp_;
      }
      AMSCore::MetricsEventModifier::EventModifier *v13 = p_imp->__imp_;
      v11->__vftable = 0;
      v11->__imp_.__imp_ = 0;
      *(unsigned char *)(a1 + 224) = v12;
      uint64_t v21 = *(void *)(a1 + 1568);
      if (v21 && !atomic_fetch_add((atomic_ullong *volatile)(v21 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        char v22 = *(std::__shared_weak_count **)(a1 + 1568);
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
      uint64_t v23 = *(std::__shared_weak_count **)(a1 + 728);
      if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
      if (*(char *)(a1 + 1375) < 0) {
        operator delete(*(void **)(a1 + 1352));
      }
      char v24 = *(std::__shared_weak_count **)(a1 + 1080);
      if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
      if (*(char *)(a1 + 1215) < 0) {
        operator delete(*(void **)(a1 + 1192));
      }
      if (*(unsigned char *)(a1 + 1176) && *(char *)(a1 + 1175) < 0) {
        operator delete(*(void **)(a1 + 1152));
      }
      char v134 = v4;
      if (*(unsigned char *)(a1 + 224) && (uint64_t v25 = *(void *)v1) != 0)
      {
        uint64_t v26 = *(void *)(a1 + 160);
        *(void *)uint64_t v1 = 0;
        *(void *)(v1 + 8) = 0;
        *(void *)(a1 + 1488) = v25;
        long long v27 = *(std::__shared_weak_count **)(a1 + 1496);
        *(void *)(a1 + 1496) = v26;
        int v28 = (void (***)(void))v1;
        if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
        int v29 = 0;
        char v30 = 1;
        if (!*(unsigned char *)(a1 + 224)) {
          goto LABEL_31;
        }
      }
      else
      {
        AMSCore::Unexpected<AMSCore::Error,AMSCore::AccountsErrorCode,char const(&)[44]>((uint64_t)&v153, 0x64u);
        if (*(unsigned char *)(a1 + 104))
        {
          if (!*(unsigned char *)(a1 + 96)) {
            (**(void (***)(void))(a1 + 24))();
          }
          *(unsigned char *)(a1 + 104) = 0;
        }
        std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v153);
        long long v31 = v154;
        uint64_t v33 = v155;
        uint64_t v32 = v156;
        *(void *)(a1 + 64) = v156;
        uint64_t v34 = a1 + 64;
        *(_OWORD *)(a1 + 40) = v31;
        *(void *)(a1 + 24) = &unk_1EDC827D8;
        uint64_t v35 = v157;
        *(void *)(a1 + 56) = v33;
        *(void *)(a1 + 72) = v35;
        int v28 = (void (***)(void))v1;
        if (v35)
        {
          *((void *)v32 + 2) = v34;
          char v155 = &v156;
          std::runtime_error v156 = 0;
          uint64_t v157 = 0;
          uint64_t v32 = 0;
        }
        else
        {
          *(void *)(a1 + 56) = v34;
        }
        *(_OWORD *)(a1 + 80) = v158;
        long long v158 = 0uLL;
        *(unsigned char *)(a1 + 96) = 0;
        *(unsigned char *)(a1 + 104) = 1;
        v153.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v155, v32);
        MEMORY[0x192FA3C30](&v153);
        char v30 = 0;
        int v29 = 3;
        if (!*(unsigned char *)(a1 + 224))
        {
LABEL_31:
          (**v28)(v28);
          if ((v30 & 1) == 0)
          {
LABEL_229:
            uint64_t v125 = *(void *)(a1 + 1552);
            uint64_t v126 = *(void *)(a1 + 1528);
            uint64_t v8 = v136;
            char v127 = *(std::__shared_weak_count **)(a1 + 1496);
            if (v127) {
              goto LABEL_200;
            }
            goto LABEL_202;
          }
LABEL_44:
          AMSCore::getValueByKey<std::string,std::map<std::string,AMSCore::Any> const>((uint64_t)&v153, *(void *)(a1 + 1528) + 72, "topic", 5uLL);
          if (v159)
          {
            if (SHIBYTE(v153.what) < 0)
            {
              std::string::__init_copy_ctor_external(v141, (const std::string::value_type *)v153.~runtime_error, (std::string::size_type)v153.~runtime_error_0);
            }
            else
            {
              long long v37 = *(_OWORD *)&v153.~runtime_error;
              v141->__r_.__value_.__r.__words[2] = (std::string::size_type)v153.what;
              *(_OWORD *)&v141->__r_.__value_.__l.__data_ = v37;
            }
            *(void *)uint64_t v146 = 0;
            *(void *)(v146 + 8) = 0;
            *(void *)(v146 + 16) = 0;
            std::vector<AMSCore::Any>::reserve((char **)v146, 1uLL);
            uint64_t v38 = *(void *)(a1 + 1528);
            *(void *)(a1 + 1456) = v38;
            if (v38) {
              operator new();
            }
            *(void *)(a1 + 1464) = 0;
            *char v134 = 0;
            v134[1] = 0;
            *(void *)(a1 + 1584) = a1 + 1464;
            *(void *)(a1 + 1576) = a1 + 1432;
            AMSCore::MetricsEventModifierProvider::getOverrideForEvent(v135, *(void *)(a1 + 1536), (uint64_t)v134);
          }
LABEL_234:
          __break(1u);
          return;
        }
      }
      uint64_t v36 = *(std::__shared_weak_count **)(a1 + 160);
      if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
        if ((v30 & 1) == 0) {
          goto LABEL_229;
        }
      }
      else if ((v30 & 1) == 0)
      {
        goto LABEL_229;
      }
      goto LABEL_44;
  }
}

void sub_18DB3A488(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

void sub_18DB3A57C()
{
}

void AMSCore::UploadMetricsEventTask::internal::perform(char *__p)
{
  if (*(void *)__p)
  {
    switch(__p[1656])
    {
      case 1:
        uint64_t v9 = *((void *)__p + 200);
        if (v9 && !atomic_fetch_add((atomic_ullong *volatile)(v9 + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          uint64_t v10 = (std::__shared_weak_count *)*((void *)__p + 200);
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        unsigned int v11 = (std::__shared_weak_count *)*((void *)__p + 91);
        if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        char v12 = (std::__shared_weak_count *)**((void **)__p + 197);
        if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
        uint64_t v6 = *((void *)__p + 194);
        goto LABEL_45;
      case 2:
        uint64_t v13 = *((void *)__p + 202);
        if (v13 && !atomic_fetch_add((atomic_ullong *volatile)(v13 + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          uint64_t v14 = (std::__shared_weak_count *)*((void *)__p + 202);
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        std::string v15 = (std::__shared_weak_count *)*((void *)__p + 135);
        if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        if (__p[712]) {
          AMSCore::URL::~URL((AMSCore::URL *)(__p + 560));
        }
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)__p + 66));
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)__p + 63));
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)__p + 60));
        uint64_t v6 = *((void *)__p + 194);
        if (__p[888]) {
          goto LABEL_41;
        }
        goto LABEL_42;
      case 3:
        uint64_t v27 = *((void *)__p + 204);
        if (v27 && !atomic_fetch_add((atomic_ullong *volatile)(v27 + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          int v28 = (std::__shared_weak_count *)*((void *)__p + 204);
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
        int v29 = (std::__shared_weak_count *)*((void *)__p + 181);
        if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
        char v30 = (std::__shared_weak_count *)*((void *)__p + 189);
        if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
        uint64_t v31 = *((void *)__p + 190);
        *((void *)__p + 190) = 0;
        if (v31) {
          (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
        }
        if (__p[1064]) {
          AMSCore::URL::~URL((AMSCore::URL *)(__p + 912));
        }
        uint64_t v32 = (std::__shared_weak_count *)*((void *)__p + 185);
        if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
        uint64_t v33 = (std::__shared_weak_count *)*((void *)__p + 159);
        if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        uint64_t v34 = (std::__shared_weak_count *)*((void *)__p + 157);
        if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
        uint64_t v35 = *((void *)__p + 163);
        if (v35)
        {
          uint64_t v36 = *((void *)__p + 164);
          long long v37 = (void *)*((void *)__p + 163);
          if (v36 != v35)
          {
            do
            {
              uint64_t v38 = v36 - 32;
              uint64_t v39 = *(unsigned int *)(v36 - 8);
              if (v39 != -1) {
                ((void (*)(char *, uint64_t))off_1EDCA61F8[v39])(&v41, v36 - 32);
              }
              *(_DWORD *)(v36 - 8) = -1;
              v36 -= 32;
            }
            while (v38 != v35);
            long long v37 = (void *)*((void *)__p + 163);
          }
          *((void *)__p + 164) = v35;
          operator delete(v37);
        }
        if (__p[1351] < 0) {
          operator delete(*((void **)__p + 166));
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)(__p + 1400), *((unsigned int **)__p + 176));
        uint64_t v6 = 0;
        if (!__p[888]) {
          goto LABEL_42;
        }
LABEL_41:
        AMSCore::URL::~URL((AMSCore::URL *)(__p + 736));
LABEL_42:
        if (__p[424]) {
          AMSCore::URL::~URL((AMSCore::URL *)(__p + 272));
        }
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)__p + 30));
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)__p + 27));
        std::__tree<std::__value_type<std::string,std::string_view>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string_view>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string_view>>>::destroy(*((char **)__p + 24));
LABEL_45:
        uint64_t v16 = (std::__shared_weak_count *)**((void **)__p + 198);
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
          uint64_t v17 = (char *)*((void *)__p + 160);
          if (!v17) {
            goto LABEL_55;
          }
        }
        else
        {
          uint64_t v17 = (char *)*((void *)__p + 160);
          if (!v17) {
            goto LABEL_55;
          }
        }
        uint64_t v18 = (char *)*((void *)__p + 161);
        char v19 = v17;
        if (v18 != v17)
        {
          do
          {
            int v20 = v18 - 32;
            uint64_t v21 = *((unsigned int *)v18 - 2);
            if (v21 != -1) {
              ((void (*)(char *, char *))off_1EDCA61F8[v21])(&v40, v18 - 32);
            }
            *((_DWORD *)v18 - 2) = -1;
            v18 -= 32;
          }
          while (v20 != v17);
          char v19 = (char *)*((void *)__p + 160);
        }
        *((void *)__p + 161) = v17;
        operator delete(v19);
LABEL_55:
        if (__p[1399] < 0) {
          operator delete(*((void **)__p + 172));
        }
        uint64_t v7 = 0;
        uint64_t v8 = (std::__shared_weak_count *)*((void *)__p + 187);
        if (v8)
        {
LABEL_58:
          if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        break;
      default:
        uint64_t v2 = *((void *)__p + 196);
        if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          uint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 196);
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
        unint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 91);
        if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        if (__p[1375] < 0) {
          operator delete(*((void **)__p + 169));
        }
        uint64_t v5 = (std::__shared_weak_count *)*((void *)__p + 135);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        if (__p[1215] < 0) {
          operator delete(*((void **)__p + 149));
        }
        if (__p[1176] && __p[1175] < 0) {
          operator delete(*((void **)__p + 144));
        }
        uint64_t v6 = *((void *)__p + 194);
        uint64_t v7 = *((void *)__p + 191);
        uint64_t v8 = (std::__shared_weak_count *)*((void *)__p + 187);
        if (!v8) {
          break;
        }
        goto LABEL_58;
    }
  }
  else
  {
    uint64_t v7 = *((void *)__p + 206);
    uint64_t v6 = *((void *)__p + 205);
  }
  char v22 = (char *)*((void *)__p + 18);
  if (v22 == __p + 120)
  {
    (*(void (**)(char *))(*((void *)__p + 15) + 32))(__p + 120);
    if (!__p[104]) {
      goto LABEL_68;
    }
    goto LABEL_66;
  }
  if (v22) {
    (*(void (**)(char *))(*(void *)v22 + 40))(v22);
  }
  if (__p[104])
  {
LABEL_66:
    if (!__p[96]) {
      (**((void (***)(void))__p + 3))();
    }
  }
LABEL_68:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v23 = *((void *)__p + 193);
  if (v23 && !atomic_fetch_add((atomic_ullong *volatile)(v23 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    char v24 = (std::__shared_weak_count *)*((void *)__p + 193);
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  uint64_t v25 = (std::__shared_weak_count *)*((void *)__p + 155);
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  uint64_t v26 = (std::__shared_weak_count *)*((void *)__p + 153);
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  operator delete(__p);
}

void AMSCore::UploadMetricsEventTask::anonymous namespace'::getAccount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (char *)operator new(0x268uLL);
  v5[392] = 0;
  v5[416] = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    *(_OWORD *)(v5 + 392) = *(_OWORD *)a2;
    *((void *)v5 + 51) = *(void *)(a2 + 16);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    v5[416] = 1;
  }
  *((void *)v5 + 53) = *(void *)(a2 + 32);
  *((_OWORD *)v5 + 27) = *(_OWORD *)(a2 + 40);
  *((void *)v5 + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *((void *)v5 + 74) = *(void *)a3;
  *((_DWORD *)v5 + 150) = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(v5 + 603) = *(_DWORD *)(a3 + 19);
  v5[608] = *(unsigned char *)(a3 + 23);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  v5[24] = 0;
  v5[104] = 0;
  *((void *)v5 + 14) = 0;
  *((void *)v5 + 18) = 0;
  std::shared_ptr<AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise,AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v6, (uint64_t)(v5 + 16));
}

void sub_18DB3BB60(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (*(unsigned char *)(v14 + 480))
  {
    if (*(char *)(v14 + 479) < 0) {
      operator delete(*v15);
    }
  }
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a10);
  std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](a14);
  __cxa_begin_catch(a1);
  AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DB3BC20()
{
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::AccountsErrorCode,char const(&)[44]>(uint64_t a1, unsigned int a2)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v9);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Failed to fetch the correct account object.", 43);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v9.__imp_, &v8);
  v9.__vftable = (std::system_error_vtbl *)*MEMORY[0x1E4FBA418];
  *(std::system_error_vtbl **)((char *)&v9.__vftable + (unint64_t)v9.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
  v9.__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
  if (v15 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FA3FD0](&v16);
  *(void *)&v17.__val_ = a2;
  v17.__cat_ = (const std::error_category *)&AMSCore::Error::Category::accounts(void)::instance;
  std::system_error::system_error(&v9, v17, &v8);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  v9.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  uint64_t v10 = &v11;
  long long v13 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v9);
  *(std::error_code *)(a1 + 16) = v9.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v4 = v11;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = a1 + 40;
  uint64_t v6 = v12;
  *(void *)(a1 + 48) = v12;
  if (v6)
  {
    *(void *)(v4 + 16) = v5;
    uint64_t v4 = 0;
    uint64_t v10 = &v11;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v5;
  }
  *(_OWORD *)(a1 + 56) = v13;
  long long v13 = 0uLL;
  v9.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v4);
  return MEMORY[0x192FA3C30](&v9);
}

void sub_18DB3BE70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::UploadMetricsEventTask::anonymous namespace'::performInternal(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4, void *a5, _OWORD *a6, void *a7, uint64_t a8)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  char v15 = (char *)operator new(0xAD8uLL);
  uint64_t v16 = *a2;
  *((_DWORD *)v15 + 690) = *((_DWORD *)a2 + 4);
  *(_DWORD *)(v15 + 2763) = *(_DWORD *)((char *)a2 + 19);
  char v17 = *((unsigned char *)a2 + 23);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v18 = *a3;
  long long v19 = *(_OWORD *)(a3 + 1);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t v20 = a4[1];
  *((void *)v15 + 326) = *a4;
  *a4 = 0;
  a4[1] = 0;
  uint64_t v21 = a4[3];
  *((void *)v15 + 328) = a4[2];
  a4[2] = 0;
  a4[3] = 0;
  uint64_t v22 = a5[1];
  *((void *)v15 + 330) = *a5;
  *((void *)v15 + 322) = v16;
  v15[2768] = v17;
  *((void *)v15 + 323) = v18;
  *((_OWORD *)v15 + 162) = v19;
  *((void *)v15 + 327) = v20;
  *((void *)v15 + 329) = v21;
  *((void *)v15 + 331) = v22;
  *a5 = 0;
  a5[1] = 0;
  *(_OWORD *)(v15 + 1528) = *a6;
  v15[1544] = 0;
  v15[1696] = 0;
  std::__optional_storage_base<AMSCore::URL,false>::__construct_from[abi:fe180100]<std::__optional_move_base<AMSCore::URL,false>>((uint64_t)(v15 + 1544), a6 + 1);
  *((void *)v15 + 332) = *a7;
  *a7 = 0;
  *((_OWORD *)v15 + 156) = *(_OWORD *)a8;
  *(void *)a8 = 0;
  *(void *)(a8 + 8) = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  v15[24] = 0;
  v15[104] = 0;
  *((void *)v15 + 14) = 0;
  *((void *)v15 + 18) = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v23, (uint64_t)(v15 + 16));
}

void sub_18DB3DC40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, AMSCore::URL *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
  if (a2)
  {
    std::__expected_base<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::__repr::__destroy_union_member[abi:fe180100](a21);
    AMSCore::ExecuteHTTPRequestTask::Options::~Options(v47);
    std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::~expected[abi:fe180100](v48);
    std::expected<AMSCore::URL,AMSCore::Error>::~expected[abi:fe180100](v46);
    __cxa_begin_catch(exception_object);
    AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
  }
  _Unwind_Resume(exception_object);
}

char *AMSCore::UploadMetricsEventTask::anonymous namespace'::performInternal(unint64_t a1)
{
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::runtime_error *)(a1 + 152);
  uint64_t v5 = a1 + 576;
  uint64_t v6 = (void **)(a1 + 968);
  uint64_t v7 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 1872);
  uint64_t v107 = a1 + 152;
  long long v108 = (std::runtime_error *)(a1 + 2040);
  unint64_t v105 = a1 + 16;
  uint64_t v106 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 1704);
  int v8 = *(unsigned __int8 *)(a1 + 2767);
  if (v8 == 2)
  {
    uint64_t v65 = *(__n128 **)(a1 + 2696);
    if (!v65[27].n128_u8[0]) {
      goto LABEL_140;
    }
    uint64_t v66 = &v65->n128_u64[1];
    unsigned __int8 v67 = v65[26].n128_u8[8];
    if (v67)
    {
      *(__n128 *)(a1 + 152) = *(__n128 *)((char *)v65 + 8);
      *uint64_t v66 = 0;
      v65[1].n128_u64[0] = 0;
      AMSCore::ExecuteHTTPRequestTask::Options::Options(a1 + 168, (uint64_t)&v65[1].n128_i64[1]);
      __n128 v68 = v65[12];
      *(__n128 *)(a1 + 336) = v68;
      v65[12].n128_u64[0] = 0;
      v65[12].n128_u64[1] = 0;
    }
    else
    {
      __n128 v68 = std::__expected_base<AMSCore::HTTPResponse,AMSCore::HTTPError>::__union_t::__union_t[abi:fe180100]<AMSCore::HTTPError>(v4, (uint64_t)v66);
    }
    *(unsigned char *)(a1 + 568) = v67;
    uint64_t v69 = *(void *)(a1 + 2704);
    if (v69 && !atomic_fetch_add((atomic_ullong *volatile)(v69 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v70 = *(std::__shared_weak_count **)(a1 + 2704);
      ((void (*)(std::__shared_weak_count *, __n128))v70->__on_zero_shared)(v70, v68);
      std::__shared_weak_count::__release_weak(v70);
    }
    unint64_t v71 = *(std::__shared_weak_count **)(a1 + 2488);
    if (v71 && !atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, __n128))v71->__on_zero_shared)(v71, v68);
      std::__shared_weak_count::__release_weak(v71);
    }
    AMSCore::ExecuteHTTPRequestTask::Options::~Options(v106);
    uint64_t v1 = *(std::__shared_weak_count **)(a1 + 1344);
    if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options(v6);
    if (!*(unsigned char *)(a1 + 568))
    {
      std::__optional_destruct_base<AMSCore::HTTPError,false>::__optional_destruct_base[abi:fe180100]<AMSCore::HTTPError>(&v115, (uint64_t)v4);
      if (v123)
      {
        AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v109, (uint64_t)&v115);
        if (*(unsigned char *)(a1 + 104))
        {
          if (!*(unsigned char *)(a1 + 96)) {
            (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
          }
          *(unsigned char *)(a1 + 104) = 0;
        }
        std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v109);
        long long v81 = v110;
        uint64_t v83 = v111;
        uint64_t v82 = v112;
        *(void *)(a1 + 64) = v112;
        unint64_t v84 = a1 + 64;
        *(_OWORD *)(a1 + 40) = v81;
        *(void *)(a1 + 24) = &unk_1EDC827D8;
        uint64_t v85 = v113;
        *(void *)(a1 + 56) = v83;
        *(void *)(a1 + 72) = v85;
        if (v85)
        {
          *(void *)(v82 + 16) = v84;
          uint64_t v111 = &v112;
          uint64_t v112 = 0;
          uint64_t v113 = 0;
          uint64_t v82 = 0;
        }
        else
        {
          *(void *)(a1 + 56) = v84;
        }
        *(_OWORD *)(a1 + 80) = v114;
        long long v114 = 0uLL;
        *(unsigned char *)(a1 + 96) = 0;
        *(unsigned char *)(a1 + 104) = 1;
        v109.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v111, (unsigned int *)v82);
        MEMORY[0x192FA3C30](&v109);
        if (v123) {
          AMSCore::HTTPError::~HTTPError((AMSCore::HTTPError *)&v115);
        }
        goto LABEL_117;
      }
      if (!*(unsigned char *)(a1 + 568)) {
        goto LABEL_140;
      }
    }
    int v72 = *(unsigned __int16 *)(*(void *)(a1 + 336) + 152);
    if ((v72 - 200) <= 0x63)
    {
      if (*(unsigned char *)(a1 + 104) && !*(unsigned char *)(a1 + 96)) {
        (**(void (***)(void))(a1 + 24))();
      }
      *(unsigned char *)(a1 + 24) = 0;
LABEL_116:
      *(unsigned char *)(a1 + 96) = 1;
      *(unsigned char *)(a1 + 104) = 1;
      goto LABEL_117;
    }
    if ((v72 - 400) <= 0x63)
    {
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v115);
      AMSCore::Logger::log<char [65]>((uint64_t)v115.__vftable);
      int imp = (std::__shared_weak_count *)v115.__imp_.__imp_;
      if (v115.__imp_.__imp_
        && !atomic_fetch_add((atomic_ullong *volatile)v115.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
        std::__shared_weak_count::__release_weak(imp);
      }
      if (*(unsigned char *)(a1 + 104) && !*(unsigned char *)(a1 + 96)) {
        (**(void (***)(void))(a1 + 24))();
      }
      *(unsigned char *)(a1 + 24) = 1;
      goto LABEL_116;
    }
    if ((v72 - 500) <= 0x63)
    {
      LOWORD(v109.__vftable) = *(_WORD *)(*(void *)(a1 + 336) + 152);
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v115);
      AMSCore::Logger::log<char [37],AMSCore::HTTPResponse::StatusCode>((uint64_t)v115.__vftable);
      std::runtime_error v86 = (std::__shared_weak_count *)v115.__imp_.__imp_;
      if (v115.__imp_.__imp_
        && !atomic_fetch_add((atomic_ullong *volatile)v115.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
      if (*(unsigned char *)(a1 + 104) && !*(unsigned char *)(a1 + 96)) {
        (**(void (***)(void))(a1 + 24))();
      }
      *(unsigned char *)(a1 + 24) = 2;
      goto LABEL_116;
    }
    LOWORD(v109.__vftable) = *(_WORD *)(*(void *)(a1 + 336) + 152);
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v115);
    AMSCore::Logger::log<char [48],AMSCore::HTTPResponse::StatusCode>((uint64_t)v115.__vftable);
    uint64_t v89 = (std::__shared_weak_count *)v115.__imp_.__imp_;
    if (v115.__imp_.__imp_ && !atomic_fetch_add((atomic_ullong *volatile)v115.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
    AMSCore::Unexpected<AMSCore::Error,AMSCore::NetworkErrorCode,char const(&)[46]>((uint64_t)&v115, 0x12Du, "The server returned an unexpected status code");
    if (*(unsigned char *)(a1 + 104))
    {
      if (!*(unsigned char *)(a1 + 96)) {
        (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
      }
      *(unsigned char *)(a1 + 104) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v115);
    long long v90 = v116;
    char v92 = v117;
    uint64_t v91 = v118;
    *(void *)(a1 + 64) = v118;
    unint64_t v93 = a1 + 64;
    *(_OWORD *)(a1 + 40) = v90;
    *(void *)(a1 + 24) = &unk_1EDC827D8;
    uint64_t v94 = v119;
    *(void *)(a1 + 56) = v92;
    *(void *)(a1 + 72) = v94;
    if (v94)
    {
      *((void *)v91 + 2) = v93;
      uint64_t v117 = &v118;
      uint64_t v118 = 0;
      uint64_t v119 = 0;
      uint64_t v91 = 0;
    }
    else
    {
      *(void *)(a1 + 56) = v93;
    }
    *(_OWORD *)(a1 + 80) = v120;
    long long v120 = 0uLL;
    *(unsigned char *)(a1 + 96) = 0;
    *(unsigned char *)(a1 + 104) = 1;
    v115.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v117, v91);
    MEMORY[0x192FA3C30](&v115);
LABEL_117:
    std::__expected_base<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::__repr::__destroy_union_member[abi:fe180100]((uint64_t)v4);
    AMSCore::ExecuteHTTPRequestTask::Options::~Options(v7);
    if (!*(unsigned char *)(a1 + 960))
    {
LABEL_79:
      (**(void (***)(uint64_t))v5)(v5);
      goto LABEL_122;
    }
LABEL_118:
    uint64_t v74 = *(std::__shared_weak_count **)(a1 + 952);
    if (v74 && !atomic_fetch_add(&v74->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)v5);
LABEL_122:
    uint64_t v75 = 0;
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    uint64_t v79 = 0;
    uint64_t v80 = 0;
    if (*(unsigned char *)(a1 + 2192))
    {
LABEL_123:
      AMSCore::URL::~URL((AMSCore::URL *)v108);
LABEL_172:
      *(void *)(a1 + 2752) = v80;
      *(void *)(a1 + 2744) = v79;
      *(void *)(a1 + 2736) = v78;
      *(void *)(a1 + 2728) = v77;
      *(void *)(a1 + 2720) = v76;
      *(void *)(a1 + 2712) = v75;
      *(void *)(a1 + 152) = v105;
      *(void *)a1 = 0;
      return (char *)AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise::Awaiter::await_suspend(v107);
    }
LABEL_171:
    ((void (*)(std::runtime_error *))v108->~runtime_error)(v108);
    goto LABEL_172;
  }
  uint64_t v102 = (unsigned char *)(a1 + 2767);
  unint64_t v103 = a1 + 1336;
  std::system_error v9 = (std::runtime_error *)(a1 + 2200);
  uint64_t v2 = (void **)(a1 + 2384);
  uint64_t v10 = (uint64_t *)(a1 + 2560);
  if (v8 == 1) {
    goto LABEL_24;
  }
  char v101 = (void **)(a1 + 968);
  uint64_t v6 = (void **)(a1 + 2352);
  uint64_t v1 = (std::__shared_weak_count *)(a1 + 2544);
  uint64_t v11 = *(void *)(a1 + 2664);
  if (!*(unsigned char *)(v11 + 168)) {
    goto LABEL_140;
  }
  uint64_t v12 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 1872);
  uint64_t v13 = a1 + 576;
  unsigned __int8 v14 = *(unsigned char *)(v11 + 160);
  std::__expected_base<AMSCore::URL,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::URL,AMSCore::Error>::__union_t>(v108, v14, (std::runtime_error *)(v11 + 8));
  *(unsigned char *)(a1 + 2192) = v14;
  uint64_t v15 = *(void *)(a1 + 2672);
  if (v15 && !atomic_fetch_add((atomic_ullong *volatile)(v15 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v16 = *(std::__shared_weak_count **)(a1 + 2672);
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  char v17 = *(std::__shared_weak_count **)(a1 + 160);
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  if (*(unsigned char *)(a1 + 1520)) {
    AMSCore::URL::~URL((AMSCore::URL *)(a1 + 1368));
  }
  uint64_t v5 = v13;
  if ((*(char *)(a1 + 2455) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 2192)) {
      goto LABEL_14;
    }
LABEL_30:
    std::runtime_error::runtime_error(&v115, v108);
    long long v116 = *(_OWORD *)(a1 + 2056);
    uint64_t v36 = *(unsigned int ***)(a1 + 2072);
    v115.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v37 = *(void *)(a1 + 2080);
    uint64_t v38 = *(void *)(a1 + 2088);
    uint64_t v117 = v36;
    uint64_t v118 = (unsigned int *)v37;
    uint64_t v119 = v38;
    if (v38)
    {
      *(void *)(v37 + 16) = &v118;
      *(void *)(a1 + 2072) = a1 + 2080;
      *(void *)(a1 + 2080) = 0;
      *(void *)(a1 + 2088) = 0;
    }
    else
    {
      uint64_t v117 = &v118;
    }
    long long v120 = *(_OWORD *)(a1 + 2096);
    *(void *)(a1 + 2104) = 0;
    *(void *)(a1 + 2096) = 0;
    char v121 = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v109, (uint64_t)&v115);
    if (*(unsigned char *)(a1 + 104))
    {
      if (!*(unsigned char *)(a1 + 96)) {
        (**(void (***)(void))(a1 + 24))();
      }
      *(unsigned char *)(a1 + 104) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v109);
    long long v95 = v110;
    uint64_t v97 = v111;
    uint64_t v96 = v112;
    *(void *)(a1 + 64) = v112;
    unint64_t v98 = a1 + 64;
    *(_OWORD *)(a1 + 40) = v95;
    *(void *)(a1 + 24) = &unk_1EDC827D8;
    uint64_t v99 = v113;
    *(void *)(a1 + 56) = v97;
    *(void *)(a1 + 72) = v99;
    if (v99)
    {
      *(void *)(v96 + 16) = v98;
      uint64_t v111 = &v112;
      uint64_t v112 = 0;
      uint64_t v113 = 0;
      uint64_t v96 = 0;
    }
    else
    {
      *(void *)(a1 + 56) = v98;
    }
    *(_OWORD *)(a1 + 80) = v114;
    long long v114 = 0uLL;
    *(unsigned char *)(a1 + 96) = 0;
    *(unsigned char *)(a1 + 104) = 1;
    v109.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v111, (unsigned int *)v96);
    MEMORY[0x192FA3C30](&v109);
    if (v121)
    {
      v115.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v100 = (std::__shared_weak_count *)*((void *)&v120 + 1);
      if (*((void *)&v120 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v120 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v117, v118);
      MEMORY[0x192FA3C30](&v115);
    }
    uint64_t v75 = *(void *)(a1 + 2656);
    uint64_t v76 = *(void *)(a1 + 2648);
    uint64_t v78 = *(void *)(a1 + 2632);
    uint64_t v77 = *(void *)(a1 + 2616);
    uint64_t v79 = *(void *)(a1 + 2592);
    uint64_t v80 = *(void *)(a1 + 2584);
    if (*(unsigned char *)(a1 + 2192)) {
      goto LABEL_123;
    }
    goto LABEL_171;
  }
  operator delete(*(void **)(a1 + 2432));
  if (!*(unsigned char *)(a1 + 2192)) {
    goto LABEL_30;
  }
LABEL_14:
  uint64_t v7 = v12;
  *(_OWORD *)(a1 + 2544) = *(_OWORD *)(a1 + 2640);
  *(unsigned char *)(a1 + 2200) = 0;
  *(unsigned char *)(a1 + 2224) = 0;
  if (*(unsigned char *)(a1 + 2064))
  {
    std::runtime_error *v9 = *v108;
    *(void *)(a1 + 2216) = v108[1].__vftable;
    v108->__imp_.__imp_ = 0;
    v108[1].__vftable = 0;
    v108->__vftable = 0;
    *(unsigned char *)(a1 + 2224) = 1;
  }
  *(unsigned char *)(a1 + 2232) = 0;
  *(unsigned char *)(a1 + 2256) = 0;
  if (*(unsigned char *)(a1 + 2096))
  {
    *(void *)(a1 + 2248) = *(void *)(a1 + 2088);
    *(_OWORD *)(a1 + 2232) = *(_OWORD *)(a1 + 2072);
    *(void *)(a1 + 2088) = 0;
    *(void *)(a1 + 2072) = 0;
    *(void *)(a1 + 2080) = 0;
    *(unsigned char *)(a1 + 2256) = 1;
  }
  *(unsigned char *)(a1 + 2264) = 0;
  *(unsigned char *)(a1 + 2288) = 0;
  if (*(unsigned char *)(a1 + 2128))
  {
    *(void *)(a1 + 2280) = *(void *)(a1 + 2120);
    *(_OWORD *)(a1 + 2264) = *(_OWORD *)(a1 + 2104);
    *(void *)(a1 + 2120) = 0;
    *(void *)(a1 + 2104) = 0;
    *(void *)(a1 + 2112) = 0;
    *(unsigned char *)(a1 + 2288) = 1;
  }
  *(_DWORD *)(a1 + 2296) = *(_DWORD *)(a1 + 2136);
  *(void *)(a1 + 2304) = a1 + 2304;
  *(void *)(a1 + 2312) = a1 + 2304;
  *(void *)(a1 + 2320) = 0;
  uint64_t v18 = *(void *)(a1 + 2160);
  if (v18)
  {
    long long v19 = *(uint64_t **)(a1 + 2152);
    uint64_t v20 = *(void *)(a1 + 2144);
    uint64_t v21 = *v19;
    *(void *)(v21 + 8) = *(void *)(v20 + 8);
    **(void **)(v20 + 8) = v21;
    uint64_t v22 = *(void *)(a1 + 2304);
    *(void *)(v22 + 8) = v19;
    uint64_t *v19 = v22;
    *(void *)(a1 + 2304) = v20;
    *(void *)(v20 + 8) = a1 + 2304;
    *(void *)(a1 + 2320) = v18;
    *(void *)(a1 + 2160) = 0;
  }
  uint64_t v23 = *(void *)(a1 + 2656);
  uint64_t v24 = *(void *)(a1 + 2600);
  *(void *)(a1 + 2344) = *(void *)(a1 + 2184);
  *(_OWORD *)(a1 + 2328) = *(_OWORD *)(a1 + 2168);
  *(void *)(a1 + 2184) = 0;
  *(void *)(a1 + 2176) = 0;
  *(void *)(a1 + 2168) = 0;
  *(_OWORD *)(a1 + 2384) = *(_OWORD *)(v103 + 1248);
  *(void *)(a1 + 2400) = v24;
  *(_OWORD *)(a1 + 2352) = *(_OWORD *)(a1 + 2608);
  *(_OWORD *)(a1 + 2368) = *(_OWORD *)(a1 + 2624);
  *(void *)(a1 + 2560) = v23;
  long long v26 = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(v103 + 1344) = v26;
  v4->__vftable = 0;
  v4->__imp_.__imp_ = 0;
  uint64_t v6 = v101;
  if (atomic_load_explicit((atomic_ullong *volatile)(v26 + 408), memory_order_acquire)
    || (unsigned char *v102 = 1, atomic_exchange((atomic_ullong *volatile)(*(void *)(a1 + 2680) + 408), a1)))
  {
LABEL_24:
    int v104 = (std::runtime_error *)v5;
    uint64_t v5 = *(void *)(a1 + 2680);
    if (!*(unsigned char *)(v5 + 400)) {
      goto LABEL_140;
    }
    uint64_t v27 = (const std::runtime_error *)(v5 + 8);
    char v28 = *(unsigned char *)(v5 + 392);
    if (v28)
    {
      AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v104, (uint64_t)v27);
      int v29 = (void *)(v5 + 376);
      *(void *)(a1 + 944) = *(void *)(v5 + 376);
      char v30 = (void *)(a1 + 952);
      uint64_t v31 = (void *)(v5 + 384);
    }
    else
    {
      std::runtime_error::runtime_error(v104, v27);
      *(_OWORD *)(a1 + 592) = *(_OWORD *)(v5 + 24);
      *(void *)(a1 + 576) = &unk_1EDC827D8;
      uint64_t v32 = (void *)(v5 + 48);
      uint64_t v33 = *(void *)(v5 + 48);
      *(void *)(a1 + 608) = *(void *)(v5 + 40);
      unint64_t v34 = a1 + 616;
      *(void *)(a1 + 616) = v33;
      uint64_t v35 = *(void *)(v5 + 56);
      *(void *)(a1 + 624) = v35;
      if (v35)
      {
        *(void *)(v33 + 16) = v34;
        *(void *)(v5 + 40) = v32;
        *uint64_t v32 = 0;
        *(void *)(v5 + 56) = 0;
      }
      else
      {
        *(void *)(a1 + 608) = v34;
      }
      uint64_t v39 = *(void *)(a1 + 2680);
      uint64_t v40 = *(void *)(v39 + 64);
      int v29 = (void *)(v39 + 64);
      *(void *)(a1 + 632) = v40;
      char v30 = (void *)(a1 + 640);
      uint64_t v31 = v29 + 1;
    }
    *char v30 = *v31;
    void *v29 = 0;
    v29[1] = 0;
    *(unsigned char *)(a1 + 960) = v28;
    uint64_t v41 = *(void *)(a1 + 2688);
    if (v41 && !atomic_fetch_add((atomic_ullong *volatile)(v41 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      BOOL v42 = *(std::__shared_weak_count **)(a1 + 2688);
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
    uint64_t v43 = *(std::__shared_weak_count **)(a1 + 160);
    if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
    uint64_t v44 = *v10;
    uint64_t *v10 = 0;
    if (v44) {
      (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
    }
    uint64_t v45 = *(std::__shared_weak_count **)(a1 + 2376);
    if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
    uint64_t v46 = *(std::__shared_weak_count **)(a1 + 2360);
    if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
      uint64_t v47 = (char *)*v2;
      if (!*v2) {
        goto LABEL_55;
      }
    }
    else
    {
      uint64_t v47 = (char *)*v2;
      if (!*v2) {
        goto LABEL_55;
      }
    }
    uint64_t v48 = *(char **)(a1 + 2392);
    char v49 = v47;
    if (v48 != v47)
    {
      do
      {
        uint64_t v50 = v48 - 32;
        uint64_t v51 = *((unsigned int *)v48 - 2);
        if (v51 != -1) {
          ((void (*)(std::runtime_error *, char *))off_1EDCA61F8[v51])(&v115, v48 - 32);
        }
        *((_DWORD *)v48 - 2) = -1;
        v48 -= 32;
      }
      while (v50 != v47);
      char v49 = *v2;
    }
    *(void *)(a1 + 2392) = v47;
    operator delete(v49);
LABEL_55:
    AMSCore::URL::~URL((AMSCore::URL *)(a1 + 2200));
    uint64_t v52 = *(std::__shared_weak_count **)(a1 + 2552);
    if (v52 && !atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
    uint64_t v2 = (void **)v103;
    uint64_t v5 = (uint64_t)v104;
    if (*(unsigned char *)(a1 + 960))
    {
      *(void *)(a1 + 2512) = *(void *)(a1 + 600);
      uint64_t v53 = *(void *)(a1 + 608);
      *(void *)(a1 + 2520) = v53;
      if (v53) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)(a1 + 2528) = *(void *)(a1 + 616);
      uint64_t v54 = *(void *)(a1 + 624);
      *(void *)(a1 + 2536) = v54;
      if (v54) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
      }
      AMSCore::ExecuteHTTPRequestTask::OptionsBuilder::OptionsBuilder((uint64_t)&v115, (long long *)(a1 + 2512), (long long *)(a1 + 2528));
      __int16 v122 = 256;
      AMSCore::ExecuteHTTPRequestTask::Options::Options(v7, (const AMSCore::ExecuteHTTPRequestTask::Options *)&v115);
      AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)&v115);
      uint64_t v55 = *(std::__shared_weak_count **)(a1 + 2536);
      if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
      uint64_t v1 = *(std::__shared_weak_count **)(a1 + 2520);
      if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_141;
      }
      if (!*(void *)(a1 + 2496)) {
        goto LABEL_142;
      }
      while (1)
      {
        uint64_t v56 = *(void *)(a1 + 2496);
        if (*(void *)(a1 + 2640))
        {
          uint64_t v57 = operator new(0x30uLL);
          v57[1] = 0;
          v57[2] = 0;
          void *v57 = &unk_1EDC840F0;
          *((_WORD *)v57 + 16) = 0;
          v57[3] = &unk_1EDC82628;
          v57[5] = v56;
          *(void *)(a1 + 2408) = v57 + 3;
          *(void *)(a1 + 2416) = v57;
          *(_DWORD *)(a1 + 2424) = 0;
          v115.__vftable = (std::runtime_error_vtbl *)(a1 + 1960);
          __n128 v58 = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_10shared_ptrIN7AMSCore22ExecuteHTTPRequestTask8IHandlerEEENS8_INSA_16AnonymousHandlerEEEEEEE16__generic_assignB8fe180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOST_EEEDcSL_DpT0_((__n128 **)&v115, (__n128 *)(a1 + 1960), (__n128 *)(a1 + 2408));
          uint64_t v59 = (_DWORD *)(a1 + 2424);
          uint64_t v60 = *(unsigned int *)(a1 + 2424);
          if (v60 != -1) {
            ((void (*)(std::runtime_error *, unint64_t, __n128))off_1EDCA6248[v60])(&v115, a1 + 2408, v58);
          }
        }
        else
        {
          uint64_t v62 = operator new(0x28uLL);
          v62[1] = 0;
          v62[2] = 0;
          *uint64_t v62 = &unk_1EDC84160;
          v62[3] = &unk_1EDC82740;
          v62[4] = v56;
          *(void *)(a1 + 2456) = v62 + 3;
          *(void *)(a1 + 2464) = v62;
          *(_DWORD *)(a1 + 2472) = 1;
          v115.__vftable = (std::runtime_error_vtbl *)(a1 + 1960);
          __n128 v63 = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_10shared_ptrIN7AMSCore22ExecuteHTTPRequestTask8IHandlerEEENS8_INSA_16AnonymousHandlerEEEEEEE16__generic_assignB8fe180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOST_EEEDcSL_DpT0_((__n128 **)&v115, (__n128 *)(a1 + 1960), (__n128 *)(a1 + 2456));
          uint64_t v59 = (_DWORD *)(a1 + 2472);
          uint64_t v64 = *(unsigned int *)(a1 + 2472);
          if (v64 != -1) {
            ((void (*)(std::runtime_error *, unint64_t, __n128))off_1EDCA6248[v64])(&v115, a1 + 2456, v63);
          }
        }
        *uint64_t v59 = -1;
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v115);
        AMSCore::Logger::log<char [11],unsigned long,char [16]>((uint64_t)v115.__vftable);
        uint64_t v1 = (std::__shared_weak_count *)v115.__imp_.__imp_;
        if (v115.__imp_.__imp_
          && !atomic_fetch_add((atomic_ullong *volatile)v115.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
          std::__shared_weak_count::__release_weak(v1);
        }
        if (*(unsigned char *)(a1 + 960))
        {
          AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v6, v5);
          *(_OWORD *)uint64_t v2 = *(_OWORD *)(a1 + 944);
          *(void *)(a1 + 952) = 0;
          *(void *)(a1 + 944) = 0;
          AMSCore::ExecuteHTTPRequestTask::Options::Options((uint64_t)v106, (uint64_t)v7);
          AMSCore::ExecuteHTTPRequestTask::perform(a1 + 2480, (uint64_t)v6, (uint64_t)v106);
        }
LABEL_140:
        __break(1u);
LABEL_141:
        ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
        std::__shared_weak_count::__release_weak(v1);
        if (!*(void *)(a1 + 2496))
        {
LABEL_142:
          uint64_t v87 = operator new(0x20uLL);
          v87[1] = 0;
          v87[2] = 0;
          void *v87 = &unk_1EDC84320;
          *((unsigned char *)v87 + 24) = 0;
          *(void *)(a1 + 2496) = v87 + 3;
          uint64_t v88 = *(std::__shared_weak_count **)(a1 + 2504);
          *(void *)(a1 + 2504) = v87;
          if (v88)
          {
            if (!atomic_fetch_add(&v88->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
              std::__shared_weak_count::__release_weak(v88);
            }
          }
        }
      }
    }
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v115);
    AMSCore::Logger::log<char [31],AMSCore::Error>((uint64_t)v115.__vftable, 4u, (uint64_t)"metrics", 7, "Failed to encode metrics batch", (uint64_t)v104);
    uint64_t v61 = (std::__shared_weak_count *)v115.__imp_.__imp_;
    if (v115.__imp_.__imp_ && !atomic_fetch_add((atomic_ullong *volatile)v115.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
    if (*(unsigned char *)(a1 + 104) && !*(unsigned char *)(a1 + 96)) {
      (**(void (***)(void))(a1 + 24))();
    }
    *(unsigned char *)(a1 + 24) = 1;
    *(unsigned char *)(a1 + 96) = 1;
    *(unsigned char *)(a1 + 104) = 1;
    if (!*(unsigned char *)(a1 + 960)) {
      goto LABEL_79;
    }
    goto LABEL_118;
  }
  return result;
}

void sub_18DB3F1FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, AMSCore::EncodeHTTPRequestTask::Options *a12, uint64_t a13, AMSCore::ExecuteHTTPRequestTask::Options *a14, uint64_t a15, AMSCore::URL *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2)
  {
    std::__expected_base<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::__repr::__destroy_union_member[abi:fe180100](a15);
    AMSCore::ExecuteHTTPRequestTask::Options::~Options(v27);
    std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::~expected[abi:fe180100](v26);
    std::expected<AMSCore::URL,AMSCore::Error>::~expected[abi:fe180100](a16);
    __cxa_begin_catch(exception_object);
    AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::UploadMetricsEventTask::anonymous namespace'::performInternal(char *__p)
{
  if (!*(void *)__p)
  {
    uint64_t v13 = (char *)*((void *)__p + 344);
    unsigned __int8 v14 = (char *)*((void *)__p + 343);
    uint64_t v15 = (std::__shared_weak_count *)*((void *)__p + 342);
    uint64_t v16 = (std::__shared_weak_count *)*((void *)__p + 341);
    char v17 = (std::__shared_weak_count *)*((void *)__p + 340);
    uint64_t v18 = *((void *)__p + 339);
    goto LABEL_59;
  }
  if (__p[2767])
  {
    if (__p[2767] != 1)
    {
      uint64_t v22 = *((void *)__p + 338);
      if (v22 && !atomic_fetch_add((atomic_ullong *volatile)(v22 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v23 = (std::__shared_weak_count *)*((void *)__p + 338);
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
      uint64_t v24 = (std::__shared_weak_count *)*((void *)__p + 311);
      if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
      AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(__p + 1704));
      uint64_t v25 = (std::__shared_weak_count *)*((void *)__p + 168);
      if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 121);
      AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(__p + 1872));
      if (__p[960])
      {
        long long v26 = (std::__shared_weak_count *)*((void *)__p + 119);
        if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
        AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 72);
      }
      else
      {
        (**((void (***)(char *))__p + 72))(__p + 576);
      }
      goto LABEL_55;
    }
    uint64_t v2 = *((void *)__p + 336);
    if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 336);
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 20);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = *((void *)__p + 320);
    *((void *)__p + 320) = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = (std::__shared_weak_count *)*((void *)__p + 297);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    uint64_t v7 = (std::__shared_weak_count *)*((void *)__p + 295);
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      int v8 = (char *)*((void *)__p + 298);
      if (v8) {
        goto LABEL_18;
      }
    }
    else
    {
      int v8 = (char *)*((void *)__p + 298);
      if (v8)
      {
LABEL_18:
        std::system_error v9 = (char *)*((void *)__p + 299);
        uint64_t v10 = v8;
        if (v9 != v8)
        {
          do
          {
            uint64_t v11 = v9 - 32;
            uint64_t v12 = *((unsigned int *)v9 - 2);
            if (v12 != -1) {
              ((void (*)(char *, char *))off_1EDCA61F8[v12])(&v34, v9 - 32);
            }
            *((_DWORD *)v9 - 2) = -1;
            v9 -= 32;
          }
          while (v11 != v8);
          uint64_t v10 = (char *)*((void *)__p + 298);
        }
        *((void *)__p + 299) = v8;
        operator delete(v10);
      }
    }
    AMSCore::URL::~URL((AMSCore::URL *)(__p + 2200));
    uint64_t v27 = (std::__shared_weak_count *)*((void *)__p + 319);
    if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
LABEL_55:
    char v28 = (AMSCore::URL *)(__p + 2040);
    if (__p[2192]) {
      AMSCore::URL::~URL(v28);
    }
    else {
      (**(void (***)(AMSCore::URL *))v28)(v28);
    }
    uint64_t v18 = 0;
    char v17 = 0;
    uint64_t v16 = 0;
    uint64_t v15 = 0;
    unsigned __int8 v14 = 0;
    uint64_t v13 = 0;
    goto LABEL_59;
  }
  uint64_t v19 = *((void *)__p + 334);
  if (v19 && !atomic_fetch_add((atomic_ullong *volatile)(v19 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v20 = (std::__shared_weak_count *)*((void *)__p + 334);
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  uint64_t v21 = (std::__shared_weak_count *)*((void *)__p + 20);
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  if (__p[1520]) {
    AMSCore::URL::~URL((AMSCore::URL *)(__p + 1368));
  }
  if (__p[2455] < 0) {
    operator delete(*((void **)__p + 304));
  }
  uint64_t v18 = *((void *)__p + 332);
  char v17 = (std::__shared_weak_count *)*((void *)__p + 331);
  uint64_t v15 = (std::__shared_weak_count *)*((void *)__p + 329);
  uint64_t v16 = (std::__shared_weak_count *)*((void *)__p + 327);
  unsigned __int8 v14 = (char *)*((void *)__p + 324);
  uint64_t v13 = (char *)*((void *)__p + 323);
LABEL_59:
  int v29 = (char *)*((void *)__p + 18);
  if (v29 == __p + 120)
  {
    (*(void (**)(char *))(*((void *)__p + 15) + 32))(__p + 120);
    if (!__p[104]) {
      goto LABEL_67;
    }
    goto LABEL_65;
  }
  if (v29) {
    (*(void (**)(char *))(*(void *)v29 + 40))(v29);
  }
  if (__p[104])
  {
LABEL_65:
    if (!__p[96]) {
      (**((void (***)(void))__p + 3))();
    }
  }
LABEL_67:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  char v30 = (std::__shared_weak_count *)*((void *)__p + 313);
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  if (__p[1696]) {
    AMSCore::URL::~URL((AMSCore::URL *)(__p + 1544));
  }
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (!v13) {
      goto LABEL_91;
    }
  }
  else if (!v13)
  {
    goto LABEL_91;
  }
  if (v14 != v13)
  {
    do
    {
      uint64_t v31 = v14 - 32;
      uint64_t v32 = *((unsigned int *)v14 - 2);
      if (v32 != -1) {
        ((void (*)(char *, char *))off_1EDCA61F8[v32])(&v33, v14 - 32);
      }
      *((_DWORD *)v14 - 2) = -1;
      v14 -= 32;
    }
    while (v31 != v13);
  }
  operator delete(v13);
LABEL_91:
  if (__p[2768] < 0) {
    operator delete(*((void **)__p + 322));
  }
  operator delete(__p);
}

void std::shared_ptr<AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_18DB3FB70(void *a1)
{
  __cxa_begin_catch(a1);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 96), 2uLL)) {
    (*(void (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  __cxa_rethrow();
}

void sub_18DB3FB9C(_Unwind_Exception *a1)
{
}

char *AMSCore::UploadMetricsEventTask::anonymous namespace'::encodeReportingRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t result = (char *)operator new(0x858uLL);
  uint64_t v12 = result + 1752;
  *(_OWORD *)(result + 2072) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  result[1752] = 0;
  result[1776] = 0;
  if (*(unsigned char *)(a3 + 24))
  {
    _OWORD *v12 = *(_OWORD *)a3;
    *((void *)result + 221) = *(void *)(a3 + 16);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    result[1776] = 1;
  }
  result[1784] = 0;
  result[1808] = 0;
  if (*(unsigned char *)(a3 + 56))
  {
    *(_OWORD *)(result + 1784) = *(_OWORD *)(a3 + 32);
    *((void *)result + 225) = *(void *)(a3 + 48);
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 32) = 0;
    result[1808] = 1;
  }
  result[1816] = 0;
  result[1840] = 0;
  if (*(unsigned char *)(a3 + 88))
  {
    *(_OWORD *)(result + 1816) = *(_OWORD *)(a3 + 64);
    *((void *)result + 229) = *(void *)(a3 + 80);
    *(void *)(a3 + 72) = 0;
    *(void *)(a3 + 80) = 0;
    *(void *)(a3 + 64) = 0;
    result[1840] = 1;
  }
  *((_DWORD *)result + 462) = *(_DWORD *)(a3 + 96);
  *((void *)result + 232) = result + 1856;
  *((void *)result + 233) = result + 1856;
  *((void *)result + 234) = 0;
  if (v12 != (_OWORD *)a3)
  {
    uint64_t v13 = *(void *)(a3 + 120);
    if (v13)
    {
      uint64_t v15 = *(void *)(a3 + 104);
      unsigned __int8 v14 = *(uint64_t **)(a3 + 112);
      uint64_t v16 = *v14;
      *(void *)(v16 + 8) = *(void *)(v15 + 8);
      **(void **)(v15 + 8) = v16;
      uint64_t v17 = *((void *)result + 232);
      *(void *)(v17 + 8) = v14;
      *unsigned __int8 v14 = v17;
      *((void *)result + 232) = v15;
      *(void *)(v15 + 8) = result + 1856;
      *((void *)result + 234) = v13;
      *(void *)(a3 + 120) = 0;
    }
    *(_OWORD *)(result + 1880) = *(_OWORD *)(a3 + 128);
    *((void *)result + 237) = *(void *)(a3 + 144);
    *(void *)(a3 + 136) = 0;
    *(void *)(a3 + 144) = 0;
    *(void *)(a3 + 128) = 0;
    *((_OWORD *)result + 126) = *(_OWORD *)a4;
    *((void *)result + 254) = *(void *)(a4 + 16);
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    a5[3] = 0;
    *((void *)result + 261) = *a6;
    *a6 = 0;
    atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
    result[24] = 0;
    result[416] = 0;
    *((void *)result + 53) = 0;
    *((void *)result + 57) = 0;
    std::shared_ptr<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v18, (uint64_t)(result + 16));
  }
  __break(1u);
  return result;
}

void sub_18DB425B4(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    JUMPOUT(0x18DB4265CLL);
  }
  JUMPOUT(0x18DB42654);
}

void sub_18DB425C8(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18DB425D4);
  }
  JUMPOUT(0x18DB42654);
}

void sub_18DB425F0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,unsigned int *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&a43, a44);
    std::pair<std::string const,AMSCore::Any>::~pair(v64);
    std::pair<std::string const,AMSCore::Any>::~pair(v63);
    std::pair<std::string const,AMSCore::Any>::~pair((uint64_t)&a63);
    JUMPOUT(0x18DB42620);
  }
  JUMPOUT(0x18DB42654);
}

void sub_18DB42640()
{
}

void sub_18DB4264C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t AMSCore::Logger::log<char [11],unsigned long,char [16]>(uint64_t result)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= 2u)
  {
    uint64_t v1 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v6);
    uint64_t v2 = *(void *)(v6[0] - 24);
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v6, (uint64_t)"Uploading ", 10);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v6, (uint64_t)" metrics events", 15);
    uint64_t v3 = v6[6];
    uint64_t v4 = (char *)v6 + *(void *)(v6[0] - 24);
    if ((v4[32] & 5) != 0)
    {
      uint64_t v5 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v4 + 5) + 32))(&rep);
      uint64_t v5 = v13;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v10 = 2;
    uint64_t v11 = v3;
    uint64_t v12 = v5;
    (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v1 + 16) + 16))(*(void *)(v1 + 16), "metrics", 7, &rep);
    v6[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v6[1] = MEMORY[0x1E4FBA470] + 16;
    if (v7 < 0) {
      operator delete((void *)v6[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v8);
  }
  return result;
}

void sub_18DB4291C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Logger::log<char [65]>(uint64_t result)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= 4u)
  {
    uint64_t v1 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v6);
    uint64_t v2 = *(void *)(v6[0] - 24);
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v6, (uint64_t)"The server returned a 4xx status code. Events should be deleted.", 64);
    uint64_t v3 = v6[6];
    uint64_t v4 = (char *)v6 + *(void *)(v6[0] - 24);
    if ((v4[32] & 5) != 0)
    {
      uint64_t v5 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v4 + 5) + 32))(&rep);
      uint64_t v5 = v13;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v10 = 4;
    uint64_t v11 = v3;
    uint64_t v12 = v5;
    (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v1 + 16) + 16))(*(void *)(v1 + 16), "metrics", 7, &rep);
    v6[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v6[1] = MEMORY[0x1E4FBA470] + 16;
    if (v7 < 0) {
      operator delete((void *)v6[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v8);
  }
  return result;
}

void sub_18DB42BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Logger::log<char [37],AMSCore::HTTPResponse::StatusCode>(uint64_t result)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= 4u)
  {
    uint64_t v1 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v6);
    uint64_t v2 = *(void *)(v6[0] - 24);
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v6, (uint64_t)"The server returned an status code: ", 36);
    std::ostream::operator<<();
    uint64_t v3 = v6[6];
    uint64_t v4 = (char *)v6 + *(void *)(v6[0] - 24);
    if ((v4[32] & 5) != 0)
    {
      uint64_t v5 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v4 + 5) + 32))(&rep);
      uint64_t v5 = v13;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v10 = 4;
    uint64_t v11 = v3;
    uint64_t v12 = v5;
    (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v1 + 16) + 16))(*(void *)(v1 + 16), "metrics", 7, &rep);
    v6[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v6[1] = MEMORY[0x1E4FBA470] + 16;
    if (v7 < 0) {
      operator delete((void *)v6[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v8);
  }
  return result;
}

void sub_18DB42EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Logger::log<char [48],AMSCore::HTTPResponse::StatusCode>(uint64_t result)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= 4u)
  {
    uint64_t v1 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v6);
    uint64_t v2 = *(void *)(v6[0] - 24);
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v6, (uint64_t)"The server returned an unexpected status code: ", 47);
    std::ostream::operator<<();
    uint64_t v3 = v6[6];
    uint64_t v4 = (char *)v6 + *(void *)(v6[0] - 24);
    if ((v4[32] & 5) != 0)
    {
      uint64_t v5 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v4 + 5) + 32))(&rep);
      uint64_t v5 = v13;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v10 = 4;
    uint64_t v11 = v3;
    uint64_t v12 = v5;
    (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v1 + 16) + 16))(*(void *)(v1 + 16), "metrics", 7, &rep);
    v6[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v6[1] = MEMORY[0x1E4FBA470] + 16;
    if (v7 < 0) {
      operator delete((void *)v6[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v8);
  }
  return result;
}

void sub_18DB4318C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::NetworkErrorCode,char const(&)[46]>(uint64_t a1, unsigned int a2, const char *a3)
{
  uint64_t v4 = a2;
  AMSCore::StringUtils::join<char [46]>(a3, &__what_arg);
  *(void *)&v15.__val_ = v4;
  v15.__cat_ = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
  std::system_error::system_error(&v9, v15, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  v9.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  char v10 = &v11;
  long long v13 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v9);
  *(std::error_code *)(a1 + 16) = v9.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v5 = v11;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = a1 + 40;
  uint64_t v7 = v12;
  *(void *)(a1 + 48) = v12;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    uint64_t v5 = 0;
    char v10 = &v11;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v6;
  }
  *(_OWORD *)(a1 + 56) = v13;
  long long v13 = 0uLL;
  v9.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v5);
  return MEMORY[0x192FA3C30](&v9);
}

void sub_18DB432F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise::Awaiter::await_suspend(uint64_t result)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void (**)(void))atomic_exchange((atomic_ullong *volatile)(*(void *)result + 96), 1uLL);
  if (v1)
  {
    uint64_t v2 = result;
    if (v1 == (void (**)(void))2) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result - 8))(*(void *)result - 16);
    }
    uint64_t v4 = (uint64_t *)(*(void *)result + 128);
    uint64_t v3 = *v4;
    if (*v4)
    {
      if (v3 == *(void *)v2 + 104)
      {
        std::runtime_error v18 = v17;
        (*(void (**)(uint64_t, void *))(*(void *)v3 + 24))(v3, v17);
      }
      else
      {
        std::runtime_error v18 = *(void **)(*(void *)v2 + 128);
        uint64_t *v4 = 0;
      }
    }
    else
    {
      std::runtime_error v18 = 0;
    }
    uint64_t result = (uint64_t)v18;
    if (v18)
    {
      uint64_t v5 = *(void *)v2;
      if (!*(unsigned char *)(v5 + 88))
      {
        __break(1u);
        return result;
      }
      uint64_t v6 = (const std::runtime_error *)(v5 + 8);
      if (*(unsigned char *)(v5 + 80))
      {
        LOBYTE(v10.__vftable) = v6->__vftable;
        char v16 = 1;
      }
      else
      {
        std::runtime_error::runtime_error(&v10, v6);
        uint64_t v7 = (void *)(v5 + 48);
        uint64_t v8 = *(void *)(v5 + 48);
        long long v11 = *(_OWORD *)(v5 + 24);
        std::system_error v9 = *(uint64_t **)(v5 + 40);
        v10.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        uint64_t v12 = v9;
        uint64_t v13 = v8;
        if (*(void *)(v5 + 56))
        {
          *(void *)(v8 + 16) = &v13;
          *(void *)(v5 + 40) = v7;
          void *v7 = 0;
          *(void *)(v5 + 56) = 0;
        }
        else
        {
          uint64_t v12 = &v13;
        }
        long long v15 = *(_OWORD *)(v5 + 64);
        *(void *)(v5 + 64) = 0;
        *(void *)(v5 + 72) = 0;
        uint64_t result = (uint64_t)v18;
        char v16 = 0;
        if (!v18) {
          std::__throw_bad_function_call[abi:fe180100]();
        }
      }
      (*(void (**)(uint64_t, std::runtime_error *))(*(void *)result + 48))(result, &v10);
      if (!v16) {
        ((void (*)(std::runtime_error *))v10.~runtime_error)(&v10);
      }
    }
    else
    {
      (*v1)(v1);
    }
    uint64_t result = (uint64_t)v18;
    if (v18 == v17)
    {
      return (*(uint64_t (**)(void *))(v17[0] + 32))(v17);
    }
    else if (v18)
    {
      return (*(uint64_t (**)(void))(*v18 + 40))();
    }
  }
  return result;
}

void sub_18DB43580(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<AMSCore::CancellableRequestHandler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMSCore::CancellableRequestHandler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC840F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::CancellableRequestHandler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC840F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<AMSCore::AnonymousCancellableRequestHandler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMSCore::AnonymousCancellableRequestHandler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC84160;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::AnonymousCancellableRequestHandler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC84160;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AMSCore::UploadMetricsEventTask::anonymous namespace'::encodeReportingRequest(uint64_t a1)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1 + 856;
  uint64_t v3 = (std::runtime_error *)(a1 + 464);
  uint64_t v4 = (void **)(a1 + 1232);
  uint64_t v5 = (std::runtime_error *)(a1 + 1904);
  uint64_t v6 = a1 + 16;
  if (*(unsigned char *)(a1 + 2128))
  {
    uint64_t v7 = *(void *)(a1 + 2112);
    if (*(unsigned char *)(v7 + 400))
    {
      uint64_t v8 = (const std::runtime_error *)(v7 + 8);
      char v9 = *(unsigned char *)(v7 + 392);
      if (v9)
      {
        AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v3, (uint64_t)v8);
        std::runtime_error v10 = (void *)(v7 + 376);
        *(void *)(a1 + 832) = *(void *)(v7 + 376);
        long long v11 = (void *)(a1 + 840);
        uint64_t v12 = (void *)(v7 + 384);
      }
      else
      {
        std::runtime_error::runtime_error(v3, v8);
        *(_OWORD *)(a1 + 480) = *(_OWORD *)(v7 + 24);
        *(void *)(a1 + 464) = &unk_1EDC827D8;
        char v16 = (void *)(v7 + 48);
        uint64_t v17 = *(void *)(v7 + 48);
        uint64_t v18 = a1 + 504;
        *(void *)(a1 + 496) = *(void *)(v7 + 40);
        *(void *)(a1 + 504) = v17;
        uint64_t v19 = *(void *)(v7 + 56);
        *(void *)(a1 + 512) = v19;
        if (v19)
        {
          *(void *)(v17 + 16) = v18;
          *(void *)(v7 + 40) = v16;
          *char v16 = 0;
          *(void *)(v7 + 56) = 0;
        }
        else
        {
          *(void *)(a1 + 496) = v18;
        }
        uint64_t v24 = *(void *)(a1 + 2112);
        uint64_t v25 = *(void *)(v24 + 64);
        std::runtime_error v10 = (void *)(v24 + 64);
        *(void *)(a1 + 520) = v25;
        long long v11 = (void *)(a1 + 528);
        uint64_t v12 = v10 + 1;
      }
      void *v11 = *v12;
      void *v10 = 0;
      v10[1] = 0;
      *(unsigned char *)(a1 + 848) = v9;
      std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>,void>((std::runtime_error *)(a1 + 24), v3);
      if (*(unsigned char *)(a1 + 848))
      {
        long long v26 = *(std::__shared_weak_count **)(a1 + 840);
        if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
        AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v3->__vftable);
        uint64_t v27 = *(void *)(a1 + 2120);
        if (!v27) {
          goto LABEL_23;
        }
      }
      else
      {
        ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
        uint64_t v27 = *(void *)(a1 + 2120);
        if (!v27)
        {
LABEL_23:
          int v29 = *(std::__shared_weak_count **)(a1 + 2064);
          if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
          AMSCore::EncodeHTTPRequestTask::Options::~Options(v4);
LABEL_27:
          if (!*(unsigned char *)(a1 + 1976)) {
            ((void (*)(std::runtime_error *))v5->~runtime_error)(v5);
          }
          goto LABEL_112;
        }
      }
      if (!atomic_fetch_add((atomic_ullong *volatile)(v27 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        char v28 = *(std::__shared_weak_count **)(a1 + 2120);
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
      goto LABEL_23;
    }
LABEL_143:
    __break(1u);
  }
  uint64_t v13 = *(void *)(a1 + 2096);
  if (!*(unsigned char *)(v13 + 384)) {
    goto LABEL_143;
  }
  uint64_t v14 = (const std::runtime_error *)(v13 + 8);
  char v15 = *(unsigned char *)(v13 + 376);
  if (v15)
  {
    AMSCore::EncodeHTTPRequestTask::Options::Options(a1 + 856, (uint64_t)v14);
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 856), v14);
    *(_OWORD *)(a1 + 872) = *(_OWORD *)(v13 + 24);
    *(void *)(a1 + 856) = &unk_1EDC827D8;
    uint64_t v20 = (void *)(v13 + 48);
    uint64_t v21 = *(void *)(v13 + 48);
    *(void *)(a1 + 888) = *(void *)(v13 + 40);
    uint64_t v22 = a1 + 896;
    *(void *)(a1 + 896) = v21;
    uint64_t v23 = *(void *)(v13 + 56);
    *(void *)(a1 + 904) = v23;
    if (v23)
    {
      *(void *)(v21 + 16) = v22;
      *(void *)(v13 + 40) = v20;
      *uint64_t v20 = 0;
      *(void *)(v13 + 56) = 0;
    }
    else
    {
      *(void *)(a1 + 888) = v22;
    }
    uint64_t v30 = *(void *)(a1 + 2096);
    *(_OWORD *)(a1 + 912) = *(_OWORD *)(v30 + 64);
    *(void *)(v30 + 64) = 0;
    *(void *)(v30 + 72) = 0;
  }
  *(unsigned char *)(a1 + 1224) = v15;
  uint64_t v31 = *(void *)(a1 + 2104);
  if (v31 && !atomic_fetch_add((atomic_ullong *volatile)(v31 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v32 = *(std::__shared_weak_count **)(a1 + 2104);
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  char v33 = *(std::__shared_weak_count **)(a1 + 472);
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  char v34 = *(std::__shared_weak_count **)(a1 + 2008);
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  uint64_t v35 = *(std::__shared_weak_count **)(a1 + 1992);
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  AMSCore::URL::~URL((AMSCore::URL *)(a1 + 1600));
  if (*(unsigned char *)(a1 + 1224))
  {
    *(unsigned char *)(a1 + 1025) = 1;
    uint64_t v36 = *(void *)(a1 + 2080);
    *(void *)(a1 + 2040) = *(void *)(a1 + 2072);
    *(void *)(a1 + 2048) = v36;
    if (v36) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
    }
    long long v37 = *(_OWORD *)(v2 + 1184);
    *(void *)(a1 + 2040) = 0;
    *(void *)(a1 + 2048) = 0;
    uint64_t v38 = *(std::__shared_weak_count **)(a1 + 864);
    *(_OWORD *)uint64_t v2 = v37;
    if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
    *(_DWORD *)(a1 + 1028) = 6;
    uint64_t v39 = *(std::__shared_weak_count **)(a1 + 2048);
    if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
    if (!*(unsigned char *)(a1 + 1224)) {
      goto LABEL_143;
    }
    v57.__vftable = 0;
    v57.__imp_.__imp_ = 0;
    *(void *)&long long v58 = 0;
    char v63 = 1;
    BYTE7(v79) = 14;
    strcpy((char *)&v78, "deliverVersion");
    *((void *)&v79 + 1) = 1;
    LODWORD(v82) = 3;
    char v85 = 8;
    strcpy((char *)&v83, "postTime");
    v86[0] = 60000 * (std::chrono::system_clock::now().__d_.__rep_ / 1000 / 60000);
    char v89 = 6;
    int v87 = 3;
    strcpy((char *)__p, "events");
    long long v90 = *(_OWORD *)(a1 + 2016);
    uint64_t v91 = *(void *)(a1 + 2032);
    *(void *)(a1 + 2016) = 0;
    *(void *)(a1 + 2024) = 0;
    *(void *)(a1 + 2032) = 0;
    int v92 = 9;
    *(void *)uint64_t v65 = 0;
    *(void *)&v65[8] = 0;
    uint64_t v64 = (uint64_t *)v65;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>(&v64, (uint64_t *)v65, (const void **)&v78.__vftable, (long long *)&v78);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>(&v64, (uint64_t *)v65, (const void **)&v83, &v83);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>(&v64, (uint64_t *)v65, (const void **)__p, (long long *)__p);
    if (v92 != -1) {
      ((void (*)(unsigned char *, long long *))off_1EDCA61F8[v92])(v76, &v90);
    }
    int v92 = -1;
    if (v89 < 0) {
      operator delete(__p[0]);
    }
    if (v87 != -1) {
      ((void (*)(unsigned char *, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))off_1EDCA61F8[v87])(v76, v86);
    }
    int v87 = -1;
    if (v85 < 0) {
      operator delete((void *)v83);
    }
    if (v82 != -1) {
      ((void (*)(unsigned char *, char *))off_1EDCA61F8[v82])(v76, (char *)&v79 + 8);
    }
    LODWORD(v82) = -1;
    if (SBYTE7(v79) < 0) {
      operator delete(v78.__vftable);
    }
    AMSCore::serialize((std::string *)&v78, &v64);
    std::expected<AMSCore::DataBuffer,AMSCore::Error>::operator=[abi:fe180100](&v57, &v78);
    if (v84)
    {
      if (SBYTE7(v79) < 0) {
        operator delete(v78.__vftable);
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))v78.~runtime_error)(&v78);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v64, *(unsigned int **)v65);
    if (v63)
    {
      (*(void (**)(std::runtime_error *__return_ptr))(**(void **)(a1 + 2088) + 24))(&v78);
      if (v84)
      {
        std::runtime_error v70 = v78;
        uint64_t v71 = v79;
        v78.__imp_.__imp_ = 0;
        *(void *)&long long v79 = 0;
        v78.__vftable = 0;
        int v72 = 5;
        AMSCore::Any::operator=(a1 + 912, (uint64_t)&v70);
        *(unsigned char *)(a1 + 944) = 3;
        char v74 = 12;
        strcpy((char *)v73, "Content-Type");
        *(void *)uint64_t v76 = operator new(0x20uLL);
        *(_OWORD *)&v76[8] = xmmword_18DDE9BB0;
        strcpy(*(char **)v76, "application/json; charset=UTF-8");
        LOBYTE(v77) = 1;
        AMSCore::EncodeHTTPRequestTask::OptionsBuilder::withHeader(v2, (uint64_t)v73, (uint64_t)v76);
        HIBYTE(v75[2]) = 16;
        strcpy((char *)v75, "Content-Encoding");
        *(_WORD *)&v65[15] = 260;
        strcpy((char *)&v64, "gzip");
        AMSCore::EncodeHTTPRequestTask::OptionsBuilder::withHeader(v2, (uint64_t)v75, (uint64_t)&v64);
        if (v65[16] && (v65[15] & 0x80000000) != 0) {
          operator delete(v64);
        }
        if (SHIBYTE(v75[2]) < 0) {
          operator delete(v75[0]);
        }
        if ((_BYTE)v77 && (v76[23] & 0x80000000) != 0) {
          operator delete(*(void **)v76);
        }
        uint64_t v43 = &v72;
        if (v74 < 0) {
          operator delete(v73[0]);
        }
        if (v72 != -1) {
          ((void (*)(void **, std::runtime_error *))off_1EDCA61F8[v72])(v75, &v70);
        }
      }
      else
      {
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v64);
        AMSCore::Logger::log<char [35],AMSCore::Error>((uint64_t)v64, 2u, (uint64_t)"metrics", 7, "Failed to compress metrics event: ", (uint64_t)&v78);
        uint64_t v44 = *(std::__shared_weak_count **)v65;
        if (*(void *)v65 && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)v65 + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
        if (!v63) {
          goto LABEL_143;
        }
        *(std::runtime_error *)uint64_t v76 = v57;
        *(void *)&v76[16] = v58;
        v57.__imp_.__imp_ = 0;
        *(void *)&long long v58 = 0;
        v57.__vftable = 0;
        int v77 = 5;
        AMSCore::Any::operator=(a1 + 912, (uint64_t)v76);
        *(unsigned char *)(a1 + 944) = 3;
        HIBYTE(v71) = 12;
        strcpy((char *)&v70, "Content-Type");
        uint64_t v64 = (uint64_t *)operator new(0x20uLL);
        *(_OWORD *)uint64_t v65 = xmmword_18DDE9BB0;
        strcpy((char *)v64, "application/json; charset=UTF-8");
        v65[16] = 1;
        AMSCore::EncodeHTTPRequestTask::OptionsBuilder::withHeader(v2, (uint64_t)&v70, (uint64_t)&v64);
        if (v65[16] && (v65[15] & 0x80000000) != 0) {
          operator delete(v64);
        }
        uint64_t v43 = &v77;
        if (SHIBYTE(v71) < 0) {
          operator delete(v70.__vftable);
        }
        if (v77 != -1) {
          ((void (*)(std::runtime_error *, unsigned char *))off_1EDCA61F8[v77])(&v70, v76);
        }
      }
      *uint64_t v43 = -1;
      if (v84)
      {
        if (SBYTE7(v79) < 0) {
          operator delete(v78.__vftable);
        }
      }
      else
      {
        ((void (*)(std::runtime_error *))v78.~runtime_error)(&v78);
      }
      *(unsigned char *)(a1 + 1976) = 1;
    }
    else
    {
      std::runtime_error::runtime_error(&v78, &v57);
      long long v79 = v58;
      v78.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v80 = v59;
      long long v81 = v60;
      uint64_t v82 = v61;
      if (v61)
      {
        *((void *)v60 + 2) = &v81;
        uint64_t v59 = &v60;
        uint64_t v60 = 0;
        uint64_t v61 = 0;
      }
      else
      {
        uint64_t v80 = &v81;
      }
      long long v83 = v62;
      long long v62 = 0uLL;
      char v84 = 1;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v64, (uint64_t)&v78);
      std::runtime_error::runtime_error(v5, (const std::runtime_error *)&v64);
      *(_OWORD *)(a1 + 1920) = *(_OWORD *)&v65[8];
      *(void *)(a1 + 1904) = &unk_1EDC827D8;
      uint64_t v48 = v67;
      *(void *)(a1 + 1936) = v66;
      uint64_t v49 = a1 + 1944;
      *(void *)(a1 + 1944) = v48;
      uint64_t v50 = v68;
      *(void *)(a1 + 1952) = v68;
      if (v50)
      {
        *(void *)(v48 + 16) = v49;
        uint64_t v66 = &v67;
        uint64_t v67 = 0;
        uint64_t v68 = 0;
        uint64_t v48 = 0;
      }
      else
      {
        *(void *)(a1 + 1936) = v49;
      }
      *(_OWORD *)(v2 + 1104) = v69;
      long long v69 = 0uLL;
      *(unsigned char *)(a1 + 1976) = 0;
      uint64_t v64 = (uint64_t *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v66, (unsigned int *)v48);
      MEMORY[0x192FA3C30](&v64);
      if (v84)
      {
        v78.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        uint64_t v51 = (std::__shared_weak_count *)*((void *)&v83 + 1);
        if (*((void *)&v83 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v83 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v80, v81);
        MEMORY[0x192FA3C30](&v78);
      }
    }
    if (v63)
    {
      if (SBYTE7(v58) < 0) {
        operator delete(v57.__vftable);
      }
      if (*(unsigned char *)(a1 + 1976)) {
        goto LABEL_129;
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))v57.~runtime_error)(&v57);
      if (*(unsigned char *)(a1 + 1976))
      {
LABEL_129:
        if (*(unsigned char *)(a1 + 1224))
        {
          AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v4, v2);
          AMSCore::EncodeHTTPRequestTask::perform(a1 + 2056, (uint64_t)v4);
        }
        goto LABEL_143;
      }
    }
    std::runtime_error::runtime_error(&v78, v5);
    long long v79 = *(_OWORD *)(a1 + 1920);
    uint64_t v52 = *(unsigned int ***)(a1 + 1936);
    v78.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v53 = *(void *)(a1 + 1944);
    uint64_t v54 = *(void *)(a1 + 1952);
    uint64_t v80 = v52;
    long long v81 = (unsigned int *)v53;
    uint64_t v82 = v54;
    if (v54)
    {
      *(void *)(v53 + 16) = &v81;
      *(void *)(a1 + 1936) = a1 + 1944;
      *(void *)(a1 + 1944) = 0;
      *(void *)(a1 + 1952) = 0;
    }
    else
    {
      uint64_t v80 = &v81;
    }
    long long v83 = *(_OWORD *)(v2 + 1104);
    *(_OWORD *)(v2 + 1104) = 0u;
    char v84 = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v57, (uint64_t)&v78);
    std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((AMSCore::EncodeHTTPRequestTask::Options *)(a1 + 24), &v57);
    v57.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v55 = (std::__shared_weak_count *)*((void *)&v62 + 1);
    if (*((void *)&v62 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v62 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v59, v60);
    MEMORY[0x192FA3C30](&v57);
    if (v84)
    {
      v78.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v56 = (std::__shared_weak_count *)*((void *)&v83 + 1);
      if (*((void *)&v83 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v83 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v80, v81);
      MEMORY[0x192FA3C30](&v78);
    }
    goto LABEL_27;
  }
  std::runtime_error::runtime_error(&v78, (const std::runtime_error *)v2);
  long long v79 = *(_OWORD *)(a1 + 872);
  uint64_t v40 = *(unsigned int ***)(a1 + 888);
  v78.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  uint64_t v41 = *(void *)(a1 + 896);
  uint64_t v42 = *(void *)(a1 + 904);
  uint64_t v80 = v40;
  long long v81 = (unsigned int *)v41;
  uint64_t v82 = v42;
  if (v42)
  {
    *(void *)(v41 + 16) = &v81;
    *(void *)(a1 + 888) = a1 + 896;
    *(void *)(a1 + 896) = 0;
    *(void *)(a1 + 904) = 0;
  }
  else
  {
    uint64_t v80 = &v81;
  }
  long long v83 = *(_OWORD *)(a1 + 912);
  *(void *)(a1 + 920) = 0;
  *(void *)(a1 + 912) = 0;
  char v84 = 1;
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v57, (uint64_t)&v78);
  std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((AMSCore::EncodeHTTPRequestTask::Options *)(a1 + 24), &v57);
  v57.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  uint64_t v45 = (std::__shared_weak_count *)*((void *)&v62 + 1);
  if (*((void *)&v62 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v62 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v59, v60);
  MEMORY[0x192FA3C30](&v57);
  if (v84)
  {
    v78.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v46 = (std::__shared_weak_count *)*((void *)&v83 + 1);
    if (*((void *)&v83 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v83 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v80, v81);
    MEMORY[0x192FA3C30](&v78);
  }
LABEL_112:
  if (*(unsigned char *)(a1 + 1224)) {
    AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)v2);
  }
  else {
    (**(void (***)(uint64_t))v2)(v2);
  }
  *(void *)(a1 + 464) = v6;
  *(void *)a1 = 0;
  return AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v3);
}

void sub_18DB44800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,char a59,int a60,__int16 a61,char a62,char a63)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AMSCore::UploadMetricsEventTask::anonymous namespace'::encodeReportingRequest(char *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 16);
  if (*(void *)a1)
  {
    if (a1[2128])
    {
      uint64_t v3 = *((void *)a1 + 265);
      if (v3 && !atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v4 = (std::__shared_weak_count *)*((void *)a1 + 265);
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      uint64_t v5 = (std::__shared_weak_count *)*((void *)a1 + 258);
      if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)a1 + 154);
      if (a1[1976])
      {
        if (a1[1224])
        {
LABEL_11:
          AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)a1 + 107);
          goto LABEL_27;
        }
      }
      else
      {
        (**((void (***)(void))a1 + 238))();
        if (a1[1224]) {
          goto LABEL_11;
        }
      }
      (**((void (***)(uint64_t))a1 + 107))((uint64_t)(a1 + 856));
    }
    else
    {
      uint64_t v6 = *((void *)a1 + 263);
      if (v6 && !atomic_fetch_add((atomic_ullong *volatile)(v6 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v7 = (std::__shared_weak_count *)*((void *)a1 + 263);
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      uint64_t v8 = (std::__shared_weak_count *)*((void *)a1 + 59);
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      char v9 = (std::__shared_weak_count *)*((void *)a1 + 251);
      if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      std::runtime_error v10 = (std::__shared_weak_count *)*((void *)a1 + 249);
      if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
      AMSCore::URL::~URL((AMSCore::URL *)(a1 + 1600));
    }
  }
LABEL_27:
  uint64_t v11 = *((void *)a1 + 261);
  AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::~Promise(v2);
  if (v11) {
    (*(void (**)(void))(**((void **)a1 + 261) + 8))(*((void *)a1 + 261));
  }
  uint64_t v12 = *((void *)a1 + 252);
  if (v12)
  {
    uint64_t v13 = *((void *)a1 + 253);
    uint64_t v14 = (void *)*((void *)a1 + 252);
    if (v13 != v12)
    {
      do
      {
        uint64_t v15 = v13 - 32;
        uint64_t v16 = *(unsigned int *)(v13 - 8);
        if (v16 != -1) {
          ((void (*)(char *, uint64_t))off_1EDCA61F8[v16])(&v19, v13 - 32);
        }
        *(_DWORD *)(v13 - 8) = -1;
        v13 -= 32;
      }
      while (v15 != v12);
      uint64_t v14 = (void *)*((void *)a1 + 252);
    }
    *((void *)a1 + 253) = v12;
    operator delete(v14);
  }
  uint64_t v17 = *((void *)a1 + 260);
  AMSCore::URL::~URL((AMSCore::URL *)(a1 + 1752));
  if (v17 && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)a1 + 260) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v18 = (std::__shared_weak_count *)*((void *)a1 + 260);
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  operator delete(a1);
}

std::runtime_error *std::expected<AMSCore::DataBuffer,AMSCore::Error>::operator=[abi:fe180100](std::runtime_error *this, std::runtime_error *a2)
{
  if (LOBYTE(this[4].__imp_.__imp_))
  {
    int v4 = SHIBYTE(this[1].__vftable);
    if (LOBYTE(a2[4].__imp_.__imp_))
    {
      if (v4 < 0) {
        operator delete(this->__vftable);
      }
      std::runtime_error v5 = *a2;
      this[1].__vftable = a2[1].__vftable;
      *this = v5;
      HIBYTE(a2[1].__vftable) = 0;
      LOBYTE(a2->__vftable) = 0;
    }
    else
    {
      if (v4 < 0) {
        operator delete(this->__vftable);
      }
      std::runtime_error::runtime_error(this, a2);
      this->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA448] + 16);
      this[1] = a2[1];
      this->__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      this[2].__vftable = a2[2].__vftable;
      p_int imp = (std::runtime_error_vtbl *)&a2[2].__imp_;
      int imp = a2[2].__imp_.__imp_;
      this[2].__imp_.__imp_ = imp;
      char v9 = (std::runtime_error_vtbl *)&this[2].__imp_;
      std::runtime_error v10 = a2[3].__vftable;
      this[3].__vftable = v10;
      if (v10)
      {
        *((void *)imp + 2) = v9;
        a2[2].__vftable = p_imp;
        p_imp->~runtime_error = 0;
        a2[3].__vftable = 0;
      }
      else
      {
        this[2].__vftable = v9;
      }
      *(std::runtime_error *)((char *)this + 56) = *(std::runtime_error *)((char *)a2 + 56);
      a2[3].__imp_.__imp_ = 0;
      a2[4].__vftable = 0;
      LOBYTE(this[4].__imp_.__imp_) = 0;
    }
  }
  else if (LOBYTE(a2[4].__imp_.__imp_))
  {
    ((void (*)(std::runtime_error *))this->~runtime_error)(this);
    uint64_t v6 = a2[1].__vftable;
    *this = *a2;
    this[1].__vftable = v6;
    a2->__imp_.__imp_ = 0;
    a2[1].__vftable = 0;
    a2->__vftable = 0;
    LOBYTE(this[4].__imp_.__imp_) = 1;
  }
  else
  {
    AMSCore::Error::operator=((uint64_t)this, (uint64_t)a2);
  }
  return this;
}

void **std::expected<AMSCore::EncodeHTTPRequestTask::OptionsBuilder,AMSCore::Error>::~expected[abi:fe180100](void **this)
{
  if (*((unsigned char *)this + 368)) {
    AMSCore::EncodeHTTPRequestTask::Options::~Options(this);
  }
  else {
    (*(void (**)(void **))*this)(this);
  }
  return this;
}

void AMSCore::UploadMetricsEventTask::anonymous namespace'::getReportingURL(char *__p)
{
  uint64_t v2 = __p + 200;
  uint64_t v3 = (char *)*((void *)__p + 28);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    if (!__p[184]) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  if (v3) {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  if (__p[184])
  {
LABEL_7:
    int v4 = (AMSCore::URL *)(__p + 24);
    if (__p[176]) {
      AMSCore::URL::~URL(v4);
    }
    else {
      (**(void (***)(AMSCore::URL *))v4)(v4);
    }
  }
LABEL_10:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (__p[400]) {
    AMSCore::URL::~URL((AMSCore::URL *)(__p + 248));
  }
  if (__p[583] < 0) {
    operator delete(*((void **)__p + 70));
  }
  operator delete(__p);
}

void AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise::unhandled_exception()
{
  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

uint64_t sub_18DB45014(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, long long a19, uint64_t a20,uint64_t a21,uint64_t a22,long long a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v41, (uint64_t)v38);
  if (*(unsigned char *)(v29 + 168))
  {
    if (*(unsigned char *)(v29 + 160)) {
      AMSCore::URL::~URL(v30);
    }
    else {
      (**(void (***)(AMSCore::URL *))v30)(v30);
    }
    *(unsigned char *)(v29 + 168) = 0;
  }
  std::runtime_error::runtime_error((std::runtime_error *)v30, v41);
  std::runtime_error v31 = v41[1];
  char v33 = v42;
  uint64_t v32 = v43;
  *(void *)(v29 + 48) = v43;
  uint64_t v34 = v29 + 48;
  *(std::runtime_error *)(v29 + 24) = v31;
  *(void *)(v29 + 8) = &unk_1EDC827D8;
  uint64_t v35 = v44;
  *(void *)(v29 + 40) = v33;
  *(void *)(v29 + 56) = v35;
  if (v35)
  {
    *(void *)(v32 + 16) = v34;
    uint64_t v42 = &v43;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v32 = 0;
  }
  else
  {
    *(void *)(v29 + 40) = v34;
  }
  *(_OWORD *)(v29 + 64) = v45;
  long long v45 = 0uLL;
  *(unsigned char *)(v29 + 160) = 0;
  *(unsigned char *)(v29 + 168) = 1;
  v41[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v42, (unsigned int *)v32);
  MEMORY[0x192FA3C30](v41);
  v38[0] = &unk_1EDC827D8;
  uint64_t v36 = v40;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v39, v39[1]);
  return MEMORY[0x192FA3C30](v38);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINS_22UploadMetricsEventTask19UploadMetricsResultENS_5ErrorEE7Promise17get_return_ob"
                     "jectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINS_22UploadMetricsEventTask19UploadMetricsResultENS_5ErrorEE7Promise17ge"
                                "t_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINS_22UploadMetricsEventTask19UploadMetricsResultENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINS_22UploadMetricsEventTask19UploadMetricsResultENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 96), 2uLL)) {
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

uint64_t AMSCore::UploadMetricsEventTask::anonymous namespace'::getAccount(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = (std::runtime_error *)(result + 152);
  unint64_t v3 = (std::runtime_error *)(result + 232);
  int v4 = (const std::runtime_error *)(result + 312);
  uint64_t v5 = result + 544;
  uint64_t v6 = result + 560;
  uint64_t v7 = result + 16;
  if (!*(unsigned char *)(result + 607))
  {
    uint64_t v13 = *(void *)v6;
    if (!*(unsigned char *)(*(void *)v6 + 88)) {
      goto LABEL_92;
    }
    char v9 = (void **)(result + 520);
    uint64_t v14 = (const std::runtime_error *)(v13 + 8);
    char v15 = *(unsigned char *)(v13 + 80);
    if (v15)
    {
      uint64_t v16 = v14->__vftable;
      v14->__vftable = 0;
      *(void *)(result + 312) = v16;
      *(unsigned char *)(result + 384) = v15;
      *(void *)(result + 152) = v16;
      if (v16) {
        operator new();
      }
      long long v26 = (unsigned char *)(result + 384);
      *(void *)(result + 160) = 0;
      *(void *)(result + 312) = 0;
    }
    else
    {
      uint64_t v52 = (void **)(result + 520);
      std::runtime_error::runtime_error((std::runtime_error *)(result + 312), v14);
      *(_OWORD *)(v1 + 328) = *(_OWORD *)(v13 + 24);
      *(void *)(v1 + 312) = &unk_1EDC827D8;
      uint64_t v22 = (void *)(v13 + 48);
      uint64_t v23 = *(void *)(v13 + 48);
      uint64_t v24 = (void *)(v1 + 352);
      *(void *)(v1 + 344) = *(void *)(v13 + 40);
      *(void *)(v1 + 352) = v23;
      uint64_t v25 = *(void *)(v13 + 56);
      *(void *)(v1 + 360) = v25;
      if (v25)
      {
        *(void *)(v23 + 16) = v24;
        *(void *)(v13 + 40) = v22;
        void *v22 = 0;
        *(void *)(v13 + 56) = 0;
      }
      else
      {
        *(void *)(v1 + 344) = v24;
      }
      *(_OWORD *)(v1 + 368) = *(_OWORD *)(v13 + 64);
      *(void *)(v13 + 64) = 0;
      *(void *)(v13 + 72) = 0;
      long long v26 = (unsigned char *)(v1 + 384);
      *(unsigned char *)(v1 + 384) = 0;
      std::runtime_error::runtime_error(v2, v4);
      long long v42 = *(_OWORD *)(v1 + 328);
      uint64_t v43 = *(void *)(v1 + 352);
      *(void *)(v1 + 192) = v43;
      uint64_t v44 = v1 + 192;
      *(_OWORD *)(v1 + 168) = v42;
      *(void *)(v1 + 152) = &unk_1EDC827D8;
      *(void *)(v1 + 184) = *(void *)(v1 + 344);
      uint64_t v45 = *(void *)(v1 + 360);
      *(void *)(v1 + 200) = v45;
      if (v45)
      {
        *(void *)(v43 + 16) = v44;
        *(void *)(v1 + 344) = v24;
        *uint64_t v24 = 0;
        *(void *)(v1 + 360) = 0;
      }
      else
      {
        *(void *)(v1 + 184) = v44;
      }
      char v9 = v52;
      *(_OWORD *)(v1 + 208) = *(_OWORD *)(v1 + 368);
      *(void *)(v1 + 368) = 0;
      *(void *)(v1 + 376) = 0;
    }
    *(unsigned char *)(v1 + 224) = v15;
    std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::operator=[abi:fe180100](v3, v2);
    if (*(unsigned char *)(v1 + 224))
    {
      uint64_t v46 = *(std::__shared_weak_count **)(v1 + 160);
      if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))v2->~runtime_error)(v2);
    }
    uint64_t v47 = v4->__vftable;
    if (*v26)
    {
      v4->__vftable = 0;
      if (v47) {
        (*((void (**)(std::runtime_error_vtbl *))v47->~runtime_error + 1))(v47);
      }
      uint64_t v48 = *(std::__shared_weak_count **)(v1 + 568);
      if (!v48)
      {
LABEL_87:
        uint64_t v49 = *(std::__shared_weak_count **)(v1 + 552);
        if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
        if (*(char *)(v1 + 543) < 0) {
          goto LABEL_40;
        }
        goto LABEL_41;
      }
    }
    else
    {
      ((void (*)(const std::runtime_error *))v47->~runtime_error)(v4);
      uint64_t v48 = *(std::__shared_weak_count **)(v1 + 568);
      if (!v48) {
        goto LABEL_87;
      }
    }
    if (!atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
    goto LABEL_87;
  }
  uint64_t v8 = *(void *)v5;
  if (*(unsigned char *)(*(void *)v5 + 88))
  {
    char v9 = (void **)(result + 456);
    std::runtime_error v10 = (const std::runtime_error *)(v8 + 8);
    char v11 = *(unsigned char *)(v8 + 80);
    if (v11)
    {
      uint64_t v12 = v10->__vftable;
      v10->__vftable = 0;
      *(void *)(result + 312) = v12;
      *(unsigned char *)(result + 384) = v11;
      *(void *)(result + 152) = v12;
      if (v12) {
        operator new();
      }
      uint64_t v21 = (unsigned char *)(result + 384);
      *(void *)(result + 160) = 0;
      *(void *)(result + 312) = 0;
    }
    else
    {
      uint64_t v50 = (std::runtime_error *)(result + 232);
      uint64_t v51 = (void **)(result + 456);
      std::runtime_error::runtime_error((std::runtime_error *)(result + 312), v10);
      *(_OWORD *)(v1 + 328) = *(_OWORD *)(v8 + 24);
      *(void *)(v1 + 312) = &unk_1EDC827D8;
      uint64_t v17 = (void *)(v8 + 48);
      uint64_t v18 = *(void *)(v8 + 48);
      char v19 = (void *)(v1 + 352);
      *(void *)(v1 + 344) = *(void *)(v8 + 40);
      *(void *)(v1 + 352) = v18;
      uint64_t v20 = *(void *)(v8 + 56);
      *(void *)(v1 + 360) = v20;
      if (v20)
      {
        *(void *)(v18 + 16) = v19;
        *(void *)(v8 + 40) = v17;
        *uint64_t v17 = 0;
        *(void *)(v8 + 56) = 0;
      }
      else
      {
        *(void *)(v1 + 344) = v19;
      }
      *(_OWORD *)(v1 + 368) = *(_OWORD *)(v8 + 64);
      *(void *)(v8 + 64) = 0;
      *(void *)(v8 + 72) = 0;
      uint64_t v21 = (unsigned char *)(v1 + 384);
      *(unsigned char *)(v1 + 384) = 0;
      std::runtime_error::runtime_error(v2, v4);
      long long v27 = *(_OWORD *)(v1 + 328);
      uint64_t v28 = *(void *)(v1 + 352);
      *(void *)(v1 + 192) = v28;
      uint64_t v29 = v1 + 192;
      *(_OWORD *)(v1 + 168) = v27;
      *(void *)(v1 + 152) = &unk_1EDC827D8;
      *(void *)(v1 + 184) = *(void *)(v1 + 344);
      uint64_t v30 = *(void *)(v1 + 360);
      *(void *)(v1 + 200) = v30;
      if (v30)
      {
        *(void *)(v28 + 16) = v29;
        *(void *)(v1 + 344) = v19;
        void *v19 = 0;
        *(void *)(v1 + 360) = 0;
      }
      else
      {
        *(void *)(v1 + 184) = v29;
      }
      *(_OWORD *)(v1 + 208) = *(_OWORD *)(v1 + 368);
      *(void *)(v1 + 368) = 0;
      *(void *)(v1 + 376) = 0;
      unint64_t v3 = v50;
      char v9 = v51;
    }
    *(unsigned char *)(v1 + 224) = v11;
    std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::operator=[abi:fe180100](v3, v2);
    if (*(unsigned char *)(v1 + 224))
    {
      std::runtime_error v31 = *(std::__shared_weak_count **)(v1 + 160);
      if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))v2->~runtime_error)(v2);
    }
    uint64_t v32 = v4->__vftable;
    if (*v21)
    {
      v4->__vftable = 0;
      if (v32) {
        (*((void (**)(std::runtime_error_vtbl *))v32->~runtime_error + 1))(v32);
      }
      char v33 = *(std::__shared_weak_count **)(v1 + 552);
      if (!v33)
      {
LABEL_34:
        uint64_t v34 = *(std::__shared_weak_count **)(v1 + 568);
        if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
          if ((*(char *)(v1 + 519) & 0x80000000) == 0) {
            goto LABEL_38;
          }
        }
        else if ((*(char *)(v1 + 519) & 0x80000000) == 0)
        {
LABEL_38:
          if (*(unsigned char *)(v1 + 480) && *(char *)(v1 + 479) < 0) {
LABEL_40:
          }
            operator delete(*v9);
LABEL_41:
          if (*(unsigned char *)(v1 + 304))
          {
            if (!v3->__vftable)
            {
              AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v53);
              AMSCore::Logger::log<char [55],AMSCore::AccountIdentity>((uint64_t)v53.__vftable, v1 + 392);
              int imp = (std::__shared_weak_count *)v53.__imp_.__imp_;
              if (v53.__imp_.__imp_)
              {
                if (!atomic_fetch_add((atomic_ullong *volatile)v53.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
                  std::__shared_weak_count::__release_weak(imp);
                }
              }
            }
            std::optional<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>,void>((std::runtime_error *)(v1 + 24), v3);
          }
          else
          {
            std::runtime_error::runtime_error(&v53, v3);
            long long v54 = *(_OWORD *)(v1 + 248);
            uint64_t v36 = *(unsigned int ***)(v1 + 264);
            uint64_t v35 = *(void *)(v1 + 272);
            v53.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
            uint64_t v55 = v36;
            uint64_t v56 = (unsigned int *)v35;
            if (*(void *)(v1 + 280))
            {
              *(void *)(v35 + 16) = &v56;
              *(void *)(v1 + 264) = v1 + 272;
              *(void *)(v1 + 272) = 0;
              *(void *)(v1 + 280) = 0;
            }
            else
            {
              uint64_t v55 = &v56;
            }
            long long v58 = *(_OWORD *)(v1 + 288);
            *(void *)(v1 + 288) = 0;
            *(void *)(v1 + 296) = 0;
            char v59 = 1;
            AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v60, (uint64_t)&v53);
            std::optional<std::expected<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(v1 + 24), &v60);
            v60.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
            uint64_t v38 = v62;
            if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v61, v61[1]);
            MEMORY[0x192FA3C30](&v60);
            if (v59)
            {
              v53.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
              uint64_t v39 = (std::__shared_weak_count *)*((void *)&v58 + 1);
              if (*((void *)&v58 + 1)
                && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v58 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                std::__shared_weak_count::__release_weak(v39);
              }
              std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v55, v56);
              MEMORY[0x192FA3C30](&v53);
            }
          }
          uint64_t v40 = *(std::__shared_weak_count **)(v1 + 584);
          if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
            if (*(unsigned char *)(v1 + 304))
            {
LABEL_63:
              uint64_t v41 = *(std::__shared_weak_count **)(v1 + 240);
              if (v41)
              {
                if (!atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                  std::__shared_weak_count::__release_weak(v41);
                }
              }
              goto LABEL_68;
            }
          }
          else if (*(unsigned char *)(v1 + 304))
          {
            goto LABEL_63;
          }
          ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
LABEL_68:
          *(void *)(v1 + 152) = v7;
          *(void *)uint64_t v1 = 0;
          return AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v2);
        }
        operator delete(*(void **)(v1 + 496));
        goto LABEL_38;
      }
    }
    else
    {
      ((void (*)(const std::runtime_error *))v32->~runtime_error)(v4);
      char v33 = *(std::__shared_weak_count **)(v1 + 552);
      if (!v33) {
        goto LABEL_34;
      }
    }
    if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
    goto LABEL_34;
  }
LABEL_92:
  __break(1u);
  return result;
}

void sub_18DB45C34(void *a1)
{
  std::expected<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](v4);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v6);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v5);
  if (*(char *)(v1 + 543) < 0) {
    operator delete(*v3);
  }
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v1 + 576);
  std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](v2);
  __cxa_begin_catch(a1);
  AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DB45CB8()
{
}

void AMSCore::UploadMetricsEventTask::anonymous namespace'::getAccount(char *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 16);
  if (!*(void *)a1) {
    goto LABEL_33;
  }
  if (!a1[607])
  {
    uint64_t v6 = (std::__shared_weak_count *)*((void *)a1 + 71);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    uint64_t v7 = (std::__shared_weak_count *)*((void *)a1 + 69);
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if ((a1[543] & 0x80000000) == 0) {
        goto LABEL_25;
      }
    }
    else if ((a1[543] & 0x80000000) == 0)
    {
      goto LABEL_25;
    }
    uint64_t v5 = (void **)(a1 + 520);
    goto LABEL_24;
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)a1 + 69);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  int v4 = (std::__shared_weak_count *)*((void *)a1 + 71);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if ((a1[519] & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (a1[519] < 0) {
LABEL_9:
  }
    operator delete(*((void **)a1 + 62));
LABEL_10:
  if (a1[480] && a1[479] < 0)
  {
    uint64_t v5 = (void **)(a1 + 456);
LABEL_24:
    operator delete(*v5);
  }
LABEL_25:
  uint64_t v8 = (std::__shared_weak_count *)*((void *)a1 + 73);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (a1[304]) {
      goto LABEL_28;
    }
LABEL_32:
    (**((void (***)(void))a1 + 29))();
    goto LABEL_33;
  }
  if (!a1[304]) {
    goto LABEL_32;
  }
LABEL_28:
  char v9 = (std::__shared_weak_count *)*((void *)a1 + 30);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_33:
  int v10 = a1[608];
  AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::~Promise(v2);
  if (v10 < 0)
  {
    operator delete(*((void **)a1 + 74));
    if ((a1[455] & 0x80000000) == 0)
    {
LABEL_35:
      if (!a1[416]) {
        goto LABEL_41;
      }
      goto LABEL_39;
    }
  }
  else if ((a1[455] & 0x80000000) == 0)
  {
    goto LABEL_35;
  }
  operator delete(*((void **)a1 + 54));
  if (!a1[416]) {
    goto LABEL_41;
  }
LABEL_39:
  if (a1[415] < 0) {
    operator delete(*((void **)a1 + 49));
  }
LABEL_41:
  operator delete(a1);
}

uint64_t AMSCore::Logger::log<char [55],AMSCore::AccountIdentity>(uint64_t result, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= 4u)
  {
    uint64_t v3 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v8);
    uint64_t v4 = *(void *)(v8[0] - 24);
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)"The event had an unknown account identity. identity = ", 54);
    AMSCore::operator<<(v8, a2);
    uint64_t v5 = v8[6];
    uint64_t v6 = (char *)v8 + *(void *)(v8[0] - 24);
    if ((v6[32] & 5) != 0)
    {
      uint64_t v7 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v6 + 5) + 32))(&rep);
      uint64_t v7 = v15;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v12 = 4;
    uint64_t v13 = v5;
    uint64_t v14 = v7;
    (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v3 + 16) + 16))(*(void *)(v3 + 16), "metrics", 7, &rep);
    v8[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v8[1] = MEMORY[0x1E4FBA470] + 16;
    if (v9 < 0) {
      operator delete((void *)v8[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v10);
  }
  return result;
}

void sub_18DB46254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::UploadMetricsEventTask::internal::performMultiple(char *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 152);
  uint64_t v3 = (std::runtime_error *)(a1 + 504);
  uint64_t v4 = (uint64_t *)(a1 + 712);
  uint64_t v5 = (uint64_t *)(a1 + 912);
  uint64_t v94 = a1 + 16;
  long long v95 = (std::string *)(a1 + 760);
  int v6 = a1[1087];
  if (v6 == 2)
  {
    uint64_t v61 = *((void *)a1 + 129);
    if (!*(unsigned char *)(v61 + 88)) {
      goto LABEL_179;
    }
    long long v62 = (const std::runtime_error *)(v61 + 8);
    int v63 = *(unsigned __int8 *)(v61 + 80);
    if (*(unsigned char *)(v61 + 80))
    {
      LOBYTE(v3->__vftable) = v62->__vftable;
    }
    else
    {
      std::runtime_error::runtime_error(v3, v62);
      *(_OWORD *)(a1 + 520) = *(_OWORD *)(v61 + 24);
      *((void *)a1 + 63) = &unk_1EDC827D8;
      uint64_t v64 = (void *)(v61 + 48);
      uint64_t v65 = *(void *)(v61 + 48);
      *((void *)a1 + 67) = *(void *)(v61 + 40);
      uint64_t v66 = a1 + 544;
      *((void *)a1 + 68) = v65;
      uint64_t v67 = *(void *)(v61 + 56);
      *((void *)a1 + 69) = v67;
      if (v67)
      {
        *(void *)(v65 + 16) = v66;
        *(void *)(v61 + 40) = v64;
        void *v64 = 0;
        *(void *)(v61 + 56) = 0;
      }
      else
      {
        *((void *)a1 + 67) = v66;
      }
      uint64_t v68 = *((void *)a1 + 129);
      *((_OWORD *)a1 + 35) = *(_OWORD *)(v68 + 64);
      *(void *)(v68 + 64) = 0;
      *(void *)(v68 + 72) = 0;
    }
    a1[576] = v63;
    if (a1[104])
    {
      if (!a1[96])
      {
        (**((void (***)(uint64_t))a1 + 3))((uint64_t)(a1 + 24));
        int v63 = a1[576];
      }
      a1[104] = 0;
    }
    if (v63)
    {
      a1[24] = a1[504];
      a1[96] = v63;
      a1[104] = 1;
    }
    else
    {
      std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), v3);
      uint64_t v69 = *((void *)a1 + 68);
      *((void *)a1 + 8) = v69;
      std::runtime_error v70 = a1 + 64;
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 520);
      *((void *)a1 + 3) = &unk_1EDC827D8;
      *((void *)a1 + 7) = *((void *)a1 + 67);
      uint64_t v71 = *((void *)a1 + 69);
      *((void *)a1 + 9) = v71;
      if (v71)
      {
        *(void *)(v69 + 16) = v70;
        *((void *)a1 + 67) = a1 + 544;
        *((void *)a1 + 68) = 0;
        *((void *)a1 + 69) = 0;
      }
      else
      {
        *((void *)a1 + 7) = v70;
      }
      *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 35);
      *((void *)a1 + 71) = 0;
      *((void *)a1 + 70) = 0;
      int v72 = a1[576];
      a1[96] = 0;
      a1[104] = 1;
      if (!v72) {
        ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
      }
    }
    uint64_t v73 = *((void *)a1 + 130);
    if (v73 && !atomic_fetch_add((atomic_ullong *volatile)(v73 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      char v74 = (std::__shared_weak_count *)*((void *)a1 + 130);
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
    uint64_t v75 = (std::__shared_weak_count *)*((void *)a1 + 107);
    if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
    uint64_t v76 = (std::__shared_weak_count *)*((void *)a1 + 105);
    if (v76 && !atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
    uint64_t v77 = *v5;
    uint64_t *v5 = 0;
    if (v77) {
      (*(void (**)(uint64_t))(*(void *)v77 + 8))(v77);
    }
    if (a1[496]) {
      AMSCore::URL::~URL((AMSCore::URL *)(a1 + 344));
    }
    std::runtime_error v78 = (std::__shared_weak_count *)*((void *)a1 + 113);
    if (v78 && !atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
    long long v79 = (std::__shared_weak_count *)*((void *)a1 + 84);
    if (v79 && !atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
    uint64_t v80 = (std::__shared_weak_count *)*((void *)a1 + 82);
    if (v80 && !atomic_fetch_add(&v80->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
      uint64_t v81 = *v4;
      if (!*v4) {
        goto LABEL_133;
      }
    }
    else
    {
      uint64_t v81 = *v4;
      if (!*v4) {
        goto LABEL_133;
      }
    }
    uint64_t v82 = *((void *)a1 + 90);
    long long v83 = (void *)v81;
    if (v82 != v81)
    {
      do
      {
        uint64_t v84 = v82 - 32;
        uint64_t v85 = *(unsigned int *)(v82 - 8);
        if (v85 != -1) {
          ((void (*)(std::runtime_error *, uint64_t))off_1EDCA61F8[v85])(&v96, v82 - 32);
        }
        *(_DWORD *)(v82 - 8) = -1;
        v82 -= 32;
      }
      while (v84 != v81);
      long long v83 = (void *)*v4;
    }
    *((void *)a1 + 90) = v81;
    operator delete(v83);
LABEL_133:
    if (a1[783] < 0) {
      operator delete(v95->__r_.__value_.__l.__data_);
    }
    if (a1[320]) {
      AMSCore::URL::~URL((AMSCore::URL *)(a1 + 168));
    }
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    long long v42 = 0;
    uint64_t v43 = 0;
    int v28 = 3;
    uint64_t v44 = (std::__shared_weak_count *)*((void *)a1 + 111);
    if (!v44) {
      goto LABEL_139;
    }
    goto LABEL_138;
  }
  uint64_t v7 = (void **)(a1 + 808);
  uint64_t v8 = a1 + 880;
  char v9 = a1 + 1080;
  if (v6 == 1)
  {
    uint64_t v45 = *((void *)a1 + 127);
    if (!*(unsigned char *)(v45 + 184)) {
      goto LABEL_179;
    }
    *(_OWORD *)uint64_t v2 = *(_OWORD *)(v45 + 8);
    a1[168] = 0;
    uint64_t v46 = a1 + 168;
    a1[320] = 0;
    std::__optional_storage_base<AMSCore::URL,false>::__construct_from[abi:fe180100]<std::__optional_move_base<AMSCore::URL,false>>((uint64_t)(a1 + 168), (long long *)(v45 + 24));
    uint64_t v47 = *((void *)a1 + 128);
    if (v47 && !atomic_fetch_add((atomic_ullong *volatile)(v47 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v48 = (std::__shared_weak_count *)*((void *)a1 + 128);
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
    uint64_t v49 = (std::__shared_weak_count *)*((void *)a1 + 64);
    if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
      if ((a1[831] & 0x80000000) == 0)
      {
LABEL_66:
        int v50 = a1[1088];
        std::string::size_type v51 = *((void *)a1 + 116);
        uint64_t v52 = (const std::string::value_type *)*((void *)a1 + 115);
        if (v50 < 0)
        {
          std::string::__init_copy_ctor_external(v95, v52, v51);
        }
        else
        {
          *((void *)a1 + 95) = v52;
          *((void *)a1 + 96) = v51;
          *((_DWORD *)a1 + 194) = *v9;
          *(_DWORD *)(a1 + 779) = *(_DWORD *)(a1 + 1083);
          a1[783] = v50;
        }
        *((void *)a1 + 89) = *((void *)a1 + 117);
        *((_OWORD *)a1 + 45) = *((_OWORD *)a1 + 59);
        *((void *)a1 + 81) = *((void *)a1 + 85);
        uint64_t v53 = *((void *)a1 + 86);
        *((void *)a1 + 82) = v53;
        if (v53) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
        }
        long long v54 = a1 + 328;
        *((void *)a1 + 83) = *((void *)a1 + 87);
        uint64_t v55 = *((void *)a1 + 88);
        *((void *)a1 + 84) = v55;
        if (v55) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
        }
        *((_OWORD *)a1 + 56) = *((_OWORD *)a1 + 55);
        void *v8 = 0;
        *((void *)a1 + 111) = 0;
        _OWORD *v54 = *(_OWORD *)v2;
        a1[344] = 0;
        a1[496] = 0;
        if (a1[320])
        {
          a1[368] = 0;
          if (a1[192])
          {
            *(_OWORD *)(a1 + 344) = *v46;
            *((void *)a1 + 45) = *((void *)a1 + 23);
            *((void *)a1 + 22) = 0;
            *((void *)a1 + 23) = 0;
            *(void *)uint64_t v46 = 0;
            a1[368] = 1;
          }
          a1[376] = 0;
          a1[400] = 0;
          if (a1[224])
          {
            *(_OWORD *)(a1 + 376) = *(_OWORD *)(a1 + 200);
            *((void *)a1 + 49) = *((void *)a1 + 27);
            *((void *)a1 + 26) = 0;
            *((void *)a1 + 27) = 0;
            *((void *)a1 + 25) = 0;
            a1[400] = 1;
          }
          a1[408] = 0;
          a1[432] = 0;
          if (a1[256])
          {
            *(_OWORD *)(a1 + 408) = *(_OWORD *)(a1 + 232);
            *((void *)a1 + 53) = *((void *)a1 + 31);
            *((void *)a1 + 30) = 0;
            *((void *)a1 + 31) = 0;
            *((void *)a1 + 29) = 0;
            a1[432] = 1;
          }
          *((_DWORD *)a1 + 110) = *((_DWORD *)a1 + 66);
          *((void *)a1 + 56) = a1 + 448;
          *((void *)a1 + 57) = a1 + 448;
          *((void *)a1 + 58) = 0;
          uint64_t v56 = *((void *)a1 + 36);
          if (v56)
          {
            uint64_t v58 = *((void *)a1 + 34);
            std::runtime_error v57 = (uint64_t *)*((void *)a1 + 35);
            uint64_t v59 = *v57;
            *(void *)(v59 + 8) = *(void *)(v58 + 8);
            **(void **)(v58 + 8) = v59;
            uint64_t v60 = *((void *)a1 + 56);
            *(void *)(v60 + 8) = v57;
            uint64_t *v57 = v60;
            *((void *)a1 + 56) = v58;
            *(void *)(v58 + 8) = a1 + 448;
            *((void *)a1 + 58) = v56;
            *((void *)a1 + 36) = 0;
          }
          *((void *)a1 + 61) = *((void *)a1 + 39);
          *(_OWORD *)(a1 + 472) = *(_OWORD *)(a1 + 296);
          *((void *)a1 + 38) = 0;
          *((void *)a1 + 39) = 0;
          *((void *)a1 + 37) = 0;
          a1[496] = 1;
        }
        *((void *)a1 + 114) = *((void *)a1 + 124);
        *((_OWORD *)a1 + 52) = *((_OWORD *)a1 + 60);
      }
    }
    else if ((a1[831] & 0x80000000) == 0)
    {
      goto LABEL_66;
    }
    operator delete(*v7);
    goto LABEL_66;
  }
  uint64_t v93 = (std::string *)(a1 + 808);
  uint64_t v10 = *((void *)a1 + 125);
  if (!*(unsigned char *)(v10 + 88))
  {
LABEL_179:
    __break(1u);
    return;
  }
  char v11 = (const std::runtime_error *)(v10 + 8);
  char v12 = *(unsigned char *)(v10 + 80);
  if (v12)
  {
    *((void *)a1 + 19) = *(void *)(v10 + 8);
    uint64_t v13 = (const char **)(a1 + 160);
    p_int imp = (std::__libcpp_refstring *)(v10 + 16);
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 152), v11);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(v10 + 24);
    uint64_t v15 = (void *)(v10 + 48);
    uint64_t v16 = *(void *)(v10 + 48);
    *((void *)a1 + 24) = v16;
    uint64_t v17 = a1 + 192;
    *((void *)a1 + 19) = &unk_1EDC827D8;
    *((void *)a1 + 23) = *(void *)(v10 + 40);
    uint64_t v18 = *(void *)(v10 + 56);
    *((void *)a1 + 25) = v18;
    if (v18)
    {
      *(void *)(v16 + 16) = v17;
      *(void *)(v10 + 40) = v15;
      *uint64_t v15 = 0;
      *(void *)(v10 + 56) = 0;
    }
    else
    {
      *((void *)a1 + 23) = v17;
    }
    char v19 = (const std::runtime_error *)*((void *)a1 + 125);
    uint64_t v20 = v19[4].__vftable;
    char v11 = v19 + 4;
    *((void *)a1 + 26) = v20;
    uint64_t v13 = (const char **)(a1 + 216);
    p_int imp = &v11->__imp_;
  }
  char *v13 = p_imp->__imp_;
  v11->__vftable = 0;
  v11->__imp_.__imp_ = 0;
  a1[224] = v12;
  uint64_t v21 = *((void *)a1 + 126);
  if (v21 && !atomic_fetch_add((atomic_ullong *volatile)(v21 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v22 = (std::__shared_weak_count *)*((void *)a1 + 126);
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  uint64_t v23 = (std::__shared_weak_count *)*((void *)a1 + 109);
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    if ((a1[759] & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (a1[759] < 0) {
LABEL_16:
  }
    operator delete(*((void **)a1 + 92));
LABEL_17:
  uint64_t v24 = (std::__shared_weak_count *)*((void *)a1 + 107);
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    if ((a1[647] & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (a1[647] < 0) {
LABEL_20:
  }
    operator delete(*((void **)a1 + 78));
LABEL_21:
  if (a1[608] && a1[607] < 0) {
    operator delete(*((void **)a1 + 73));
  }
  if (a1[224] && (uint64_t v25 = *(void *)v2) != 0)
  {
    uint64_t v26 = *((void *)a1 + 20);
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    *((void *)a1 + 110) = v25;
    long long v27 = (std::__shared_weak_count *)*((void *)a1 + 111);
    *((void *)a1 + 111) = v26;
    if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    int v28 = 0;
    char v29 = 1;
    if (!a1[224])
    {
LABEL_30:
      (**(void (***)(uint64_t))v2)(v2);
      goto LABEL_46;
    }
  }
  else
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::AccountsErrorCode,char const(&)[44]>((uint64_t)&v96, 0x64u);
    if (a1[104])
    {
      if (!a1[96]) {
        (**((void (***)(void))a1 + 3))();
      }
      a1[104] = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v96);
    long long v30 = v97;
    uint64_t v32 = v98;
    uint64_t v31 = v99;
    *((void *)a1 + 8) = v99;
    char v33 = a1 + 64;
    *(_OWORD *)(a1 + 40) = v30;
    *((void *)a1 + 3) = &unk_1EDC827D8;
    uint64_t v34 = v100;
    *((void *)a1 + 7) = v32;
    *((void *)a1 + 9) = v34;
    if (v34)
    {
      *(void *)(v31 + 16) = v33;
      unint64_t v98 = &v99;
      uint64_t v99 = 0;
      uint64_t v100 = 0;
      uint64_t v31 = 0;
    }
    else
    {
      *((void *)a1 + 7) = v33;
    }
    *((_OWORD *)a1 + 5) = v101;
    long long v101 = 0uLL;
    a1[96] = 0;
    a1[104] = 1;
    v96.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v98, (unsigned int *)v31);
    MEMORY[0x192FA3C30](&v96);
    char v29 = 0;
    int v28 = 3;
    if (!a1[224]) {
      goto LABEL_30;
    }
  }
  uint64_t v35 = (std::__shared_weak_count *)*((void *)a1 + 20);
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
LABEL_46:
  if (a1[567] < 0) {
    operator delete(*((void **)a1 + 68));
  }
  if (a1[528] && a1[527] < 0) {
    operator delete(v3->__vftable);
  }
  if (v29)
  {
    int v36 = a1[1088];
    std::string::size_type v37 = *((void *)a1 + 116);
    uint64_t v38 = (const std::string::value_type *)*((void *)a1 + 115);
    if (v36 < 0)
    {
      uint64_t v39 = (uint64_t)v93;
      std::string::__init_copy_ctor_external(v93, v38, v37);
    }
    else
    {
      *((void *)a1 + 101) = v38;
      *((void *)a1 + 102) = v37;
      *((_DWORD *)a1 + 206) = *v9;
      *(_DWORD *)(a1 + 827) = *(_DWORD *)(a1 + 1083);
      a1[831] = v36;
      uint64_t v39 = (uint64_t)v93;
    }
    AMSCore::MetricsEventModifierProvider::getOverrideForTopic((uint64_t)v3, *((void *)a1 + 122), v39);
  }
  uint64_t v40 = *((void *)a1 + 124);
  uint64_t v41 = (std::__shared_weak_count *)*((void *)a1 + 121);
  long long v42 = (char *)*((void *)a1 + 118);
  uint64_t v43 = (char *)*((void *)a1 + 117);
  uint64_t v44 = (std::__shared_weak_count *)*((void *)a1 + 111);
  if (!v44) {
    goto LABEL_139;
  }
LABEL_138:
  if (!atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
    if (v28 == 3) {
      goto LABEL_140;
    }
    goto LABEL_142;
  }
LABEL_139:
  if (v28 == 3)
  {
LABEL_140:
    *((void *)a1 + 134) = v43;
    *((void *)a1 + 133) = v42;
    *((void *)a1 + 132) = v41;
    *((void *)a1 + 131) = v40;
    *((void *)a1 + 19) = v94;
    *(void *)a1 = 0;
    AMSCore::Task<AMSCore::UploadMetricsEventTask::UploadMetricsResult,AMSCore::Error>::Promise::Awaiter::await_suspend(v2);
    return;
  }
LABEL_142:
  std::runtime_error v86 = (char *)*((void *)a1 + 18);
  if (v86 == a1 + 120)
  {
    (*(void (**)(char *))(*((void *)a1 + 15) + 32))(a1 + 120);
    if (!a1[104]) {
      goto LABEL_152;
    }
    goto LABEL_150;
  }
  if (v86) {
    (*(void (**)(char *))(*(void *)v86 + 40))(v86);
  }
  if (a1[104])
  {
LABEL_150:
    if (!a1[96]) {
      (**((void (***)(void))a1 + 3))();
    }
  }
LABEL_152:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
  }
  uint64_t v87 = *((void *)a1 + 123);
  if (v87 && !atomic_fetch_add((atomic_ullong *volatile)(v87 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v88 = (std::__shared_weak_count *)*((void *)a1 + 123);
    ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
    std::__shared_weak_count::__release_weak(v88);
  }
  if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  char v89 = (std::__shared_weak_count *)*((void *)a1 + 88);
  if (v89 && !atomic_fetch_add(&v89->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
    std::__shared_weak_count::__release_weak(v89);
  }
  long long v90 = (std::__shared_weak_count *)*((void *)a1 + 86);
  if (v90 && !atomic_fetch_add(&v90->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
    std::__shared_weak_count::__release_weak(v90);
    if (v43) {
      goto LABEL_168;
    }
  }
  else if (v43)
  {
LABEL_168:
    if (v42 != v43)
    {
      do
      {
        uint64_t v91 = v42 - 32;
        uint64_t v92 = *((unsigned int *)v42 - 2);
        if (v92 != -1) {
          ((void (*)(std::runtime_error *, char *))off_1EDCA61F8[v92])(&v96, v42 - 32);
        }
        *((_DWORD *)v42 - 2) = -1;
        v42 -= 32;
      }
      while (v91 != v43);
    }
    operator delete(v43);
  }
  if (a1[1088] < 0) {
    operator delete(*((void **)a1 + 115));
  }
  operator delete(a1);
}

void sub_18DB4723C(void *a1)
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v1);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DB472A4()
{
}

void AMSCore::UploadMetricsEventTask::internal::performMultiple(char *__p)
{
  if (!*(void *)__p)
  {
    int v6 = (char *)*((void *)__p + 134);
    uint64_t v7 = (char *)*((void *)__p + 133);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)__p + 132);
    uint64_t v9 = *((void *)__p + 131);
    goto LABEL_73;
  }
  if (!__p[1087])
  {
    uint64_t v10 = *((void *)__p + 126);
    if (v10 && !atomic_fetch_add((atomic_ullong *volatile)(v10 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      char v11 = (std::__shared_weak_count *)*((void *)__p + 126);
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    char v12 = (std::__shared_weak_count *)*((void *)__p + 109);
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    if (__p[759] < 0) {
      operator delete(*((void **)__p + 92));
    }
    uint64_t v13 = (std::__shared_weak_count *)*((void *)__p + 107);
    if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    if (__p[647] < 0) {
      operator delete(*((void **)__p + 78));
    }
    if (__p[608] && __p[607] < 0) {
      operator delete(*((void **)__p + 73));
    }
    if (__p[567] < 0) {
      operator delete(*((void **)__p + 68));
    }
    if (__p[528] && __p[527] < 0)
    {
      uint64_t v5 = (void *)*((void *)__p + 63);
      goto LABEL_34;
    }
LABEL_35:
    uint64_t v9 = *((void *)__p + 124);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)__p + 121);
    uint64_t v7 = (char *)*((void *)__p + 118);
    int v6 = (char *)*((void *)__p + 117);
    uint64_t v14 = (std::__shared_weak_count *)*((void *)__p + 111);
    if (!v14) {
      goto LABEL_73;
    }
    goto LABEL_71;
  }
  if (__p[1087] == 1)
  {
    uint64_t v2 = *((void *)__p + 128);
    if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 128);
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 64);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    if (__p[831] < 0)
    {
      uint64_t v5 = (void *)*((void *)__p + 101);
LABEL_34:
      operator delete(v5);
      goto LABEL_35;
    }
    goto LABEL_35;
  }
  uint64_t v15 = *((void *)__p + 130);
  if (v15 && !atomic_fetch_add((atomic_ullong *volatile)(v15 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v16 = (std::__shared_weak_count *)*((void *)__p + 130);
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v17 = (std::__shared_weak_count *)*((void *)__p + 107);
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  uint64_t v18 = (std::__shared_weak_count *)*((void *)__p + 105);
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = *((void *)__p + 114);
  *((void *)__p + 114) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  if (__p[496]) {
    AMSCore::URL::~URL((AMSCore::URL *)(__p + 344));
  }
  uint64_t v20 = (std::__shared_weak_count *)*((void *)__p + 113);
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  uint64_t v21 = (std::__shared_weak_count *)*((void *)__p + 84);
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = (std::__shared_weak_count *)*((void *)__p + 82);
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    uint64_t v23 = (char *)*((void *)__p + 89);
    if (!v23) {
      goto LABEL_66;
    }
  }
  else
  {
    uint64_t v23 = (char *)*((void *)__p + 89);
    if (!v23) {
      goto LABEL_66;
    }
  }
  uint64_t v24 = (char *)*((void *)__p + 90);
  uint64_t v25 = v23;
  if (v24 != v23)
  {
    do
    {
      uint64_t v26 = v24 - 32;
      uint64_t v27 = *((unsigned int *)v24 - 2);
      if (v27 != -1) {
        ((void (*)(char *, char *))off_1EDCA61F8[v27])(&v36, v24 - 32);
      }
      *((_DWORD *)v24 - 2) = -1;
      v24 -= 32;
    }
    while (v26 != v23);
    uint64_t v25 = (char *)*((void *)__p + 89);
  }
  *((void *)__p + 90) = v23;
  operator delete(v25);
LABEL_66:
  if (__p[783] < 0) {
    operator delete(*((void **)__p + 95));
  }
  if (__p[320]) {
    AMSCore::URL::~URL((AMSCore::URL *)(__p + 168));
  }
  uint64_t v9 = 0;
  uint64_t v8 = 0;
  uint64_t v7 = 0;
  int v6 = 0;
  uint64_t v14 = (std::__shared_weak_count *)*((void *)__p + 111);
  if (v14)
  {
LABEL_71:
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
LABEL_73:
  int v28 = (char *)*((void *)__p + 18);
  if (v28 == __p + 120)
  {
    (*(void (**)(char *))(*((void *)__p + 15) + 32))(__p + 120);
    if (!__p[104]) {
      goto LABEL_81;
    }
    goto LABEL_79;
  }
  if (v28) {
    (*(void (**)(char *))(*(void *)v28 + 40))(v28);
  }
  if (__p[104])
  {
LABEL_79:
    if (!__p[96]) {
      (**((void (***)(void))__p + 3))();
    }
  }
LABEL_81:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v29 = *((void *)__p + 123);
  if (v29 && !atomic_fetch_add((atomic_ullong *volatile)(v29 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    long long v30 = (std::__shared_weak_count *)*((void *)__p + 123);
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v31 = (std::__shared_weak_count *)*((void *)__p + 88);
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  uint64_t v32 = (std::__shared_weak_count *)*((void *)__p + 86);
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    if (!v6) {
      goto LABEL_103;
    }
  }
  else if (!v6)
  {
    goto LABEL_103;
  }
  if (v7 != v6)
  {
    do
    {
      char v33 = v7 - 32;
      uint64_t v34 = *((unsigned int *)v7 - 2);
      if (v34 != -1) {
        ((void (*)(char *, char *))off_1EDCA61F8[v34])(&v35, v7 - 32);
      }
      *((_DWORD *)v7 - 2) = -1;
      v7 -= 32;
    }
    while (v33 != v6);
  }
  operator delete(v6);
LABEL_103:
  if (__p[1088] < 0) {
    operator delete(*((void **)__p + 115));
  }
  operator delete(__p);
}

void AMSCore::UploadMetricsEventTask::perform(void *a1, void *a2, void *a3)
{
  *a1 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  *a3 = 0;
  a3[1] = 0;
  operator new();
}

void sub_18DB49424(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, AMSCore::URL *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, AMSCore::MetricsEventModifier::EventModifier *a17)
{
  if (*(unsigned char *)(v17 + 1176))
  {
    if (*(char *)(v17 + 1175) < 0) {
      operator delete(*v18);
    }
  }
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v19);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DB49508()
{
}

uint64_t AMSCore::GZip::Provider::compress@<X0>(uint64_t a1@<X8>)
{
  AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[51]>((uint64_t)&v6, 8u, "Gzip compression is not supported on this platform");
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v6);
  *(_OWORD *)(a1 + 16) = v7;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v2 = v9;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v2;
  uint64_t v3 = a1 + 40;
  uint64_t v4 = v10;
  *(void *)(a1 + 48) = v10;
  if (v4)
  {
    *(void *)(v2 + 16) = v3;
    uint64_t v8 = &v9;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v2 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v3;
  }
  *(_OWORD *)(a1 + 56) = v11;
  long long v11 = 0uLL;
  *(unsigned char *)(a1 + 72) = 0;
  v6.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v8, (unsigned int *)v2);
  return MEMORY[0x192FA3C30](&v6);
}

uint64_t AMSCore::GZip::Provider::decompress@<X0>(uint64_t a1@<X8>)
{
  return AMSCore::GZip::decompress(a1);
}

void AMSCore::GZip::Provider::~Provider(AMSCore::GZip::Provider *this)
{
}

void AMSCore::UploadMetricsEventTask::performMultiple(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = 0;
  *a6 = 0;
  a6[1] = 0;
  *a7 = 0;
  a7[1] = 0;
  operator new();
}

void sub_18DB4A828(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(unsigned char *)(v15 + 320)) {
    AMSCore::URL::~URL(v17);
  }
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v16);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DB4A88C()
{
}

void AMSCore::PrivacyProvider::getBundle()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_18DB4A9B4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    MEMORY[0x192FA4080](v2, 0x1093C4057897759);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::PrivacyBundle::getContentVersion(AMSCore::PrivacyBundle *this)
{
  return *((void *)this + 4);
}

void AMSCore::PrivacyBundle::clone(AMSCore::PrivacyBundle *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  if (*((char *)this + 31) < 0) {
    std::string::__init_copy_ctor_external(&v1, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else {
    std::string v1 = *(std::string *)((char *)this + 8);
  }
  operator new();
}

void sub_18DB4AAEC(_Unwind_Exception *exception_object)
{
}

void sub_18DB4AAF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::PrivacyBundle::~PrivacyBundle(void **this)
{
  *this = &unk_1EDC81C80;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x192FA4080);
}

{
  *this = &unk_1EDC81C80;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void AMSCore::PrivacyProvider::~PrivacyProvider(AMSCore::PrivacyProvider *this)
{
}

uint64_t std::__shared_ptr_emplace<AMSCore::PrivacyProvider>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMSCore::PrivacyProvider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83CC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::PrivacyProvider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83CC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<AMSCore::Trace::JSONTraceCollector>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMSCore::Trace::JSONTraceCollector>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC84240;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::Trace::JSONTraceCollector>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC84240;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AMSCore::Trace::JSONTraceCollector::completeSupported(AMSCore::Trace::JSONTraceCollector *this)
{
  return 1;
}

void AMSCore::Trace::JSONTraceCollector::stop(AMSCore::Trace::JSONTraceCollector *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 8);
  if (v1)
  {
    uint64_t v3 = (std::mutex *)((char *)this + 16);
    std::mutex::lock((std::mutex *)((char *)this + 16));
    char v5 = 93;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>((void *)this + 13, (uint64_t)&v5, 1);
    uint64_t v4 = (void *)std::ostream::operator<<();
    char v6 = 10;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v4, (uint64_t)&v6, 1);
    *((unsigned char *)this + 368) = 1;
    atomic_store(0, (unsigned __int8 *)this + 8);
    std::mutex::unlock(v3);
  }
}

void AMSCore::Trace::JSONTraceCollector::start(AMSCore::Trace::JSONTraceCollector *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  uint64_t v3 = (void **)((char *)this + 176);
  if (*((char *)this + 199) < 0) {
    operator delete(*v3);
  }
  *uint64_t v3 = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  std::stringbuf::__init_buf_ptrs[abi:fe180100]((uint64_t)this + 112);
  char v4 = 91;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>((void *)this + 13, (uint64_t)&v4, 1);
  *((unsigned char *)this + 368) = 1;
  atomic_store(1u, (unsigned __int8 *)this + 8);
  std::mutex::unlock(v2);
}

void AMSCore::Trace::JSONTraceCollector::asyncEnd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(a1 + 8));
  if (v3)
  {
    long long v7 = (std::mutex *)(a1 + 16);
    std::mutex::lock((std::mutex *)(a1 + 16));
    if (!*(unsigned char *)(a1 + 368))
    {
      char v9 = 44;
      uint64_t v8 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>((void *)(a1 + 104), (uint64_t)&v9, 1);
      char v10 = 10;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)&v10, 1);
    }
    *(unsigned char *)(a1 + 368) = 0;
    std::mutex::unlock(v7);
  }
}

void sub_18DB4AF04(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void *AMSCore::Trace::anonymous namespace'::writeAsync(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)"{\"ph\":\"", 7);
  char v15 = a4;
  char v9 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)&v15, 1);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v9, (uint64_t)"\",", 2);
  if (!*(unsigned char *)(a3 + 24))
  {
LABEL_10:
    char v16 = 125;
    return std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&v16, 1);
  }
  uint64_t result = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)"\"scope\":\"", 9);
  if (*(unsigned char *)(a3 + 24))
  {
    int v11 = *(char *)(a3 + 23);
    if (v11 >= 0) {
      uint64_t v12 = a3;
    }
    else {
      uint64_t v12 = *(void *)a3;
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v13 = *(void *)(a3 + 8);
    }
    uint64_t v14 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(result, v12, v13);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v14, (uint64_t)"\",", 2);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

void *AMSCore::Trace::anonymous namespace'::writeEvent(void *a1, uint64_t a2)
{
  char v4 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)"\"name\":\"", 8);
  int v5 = *(char *)(a2 + 23);
  if (v5 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *(void *)a2;
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  uint64_t v8 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v4, v6, v7);
  char v26 = 34;
  char v9 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)&v26, 1);
  char v27 = 44;
  char v10 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v9, (uint64_t)&v27, 1);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v10, (uint64_t)"\"ts\":", 5);
  int v11 = (void *)std::ostream::operator<<();
  char v28 = 44;
  uint64_t v12 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v11, (uint64_t)&v28, 1);
  uint64_t v13 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v12, (uint64_t)"\"pid\":", 6);
  char v29 = 49;
  uint64_t v14 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v13, (uint64_t)&v29, 1);
  char v30 = 44;
  char v15 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v14, (uint64_t)&v30, 1);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v15, (uint64_t)"\"tid\":", 6);
  {
  }
  else
  {
    _DWORD *v22 = v23;
    *(unsigned char *)v25(v24) = 1;
  }
  uint64_t result = (void *)std::ostream::operator<<();
  if (*(unsigned char *)(a2 + 52))
  {
    uint64_t result = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)",\"id\":", 6);
    if (!*(unsigned char *)(a2 + 52)) {
      goto LABEL_25;
    }
    uint64_t result = (void *)std::ostream::operator<<();
  }
  if (*(unsigned char *)(a2 + 80))
  {
    uint64_t result = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)",\"cat\":\"", 8);
    if (*(unsigned char *)(a2 + 80))
    {
      int v17 = *(char *)(a2 + 79);
      if (v17 >= 0) {
        uint64_t v18 = a2 + 56;
      }
      else {
        uint64_t v18 = *(void *)(a2 + 56);
      }
      if (v17 >= 0) {
        uint64_t v19 = *(unsigned __int8 *)(a2 + 79);
      }
      else {
        uint64_t v19 = *(void *)(a2 + 64);
      }
      uint64_t v20 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(result, v18, v19);
      char v31 = 34;
      uint64_t result = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v20, (uint64_t)&v31, 1);
      goto LABEL_21;
    }
LABEL_25:
    __break(1u);
    return result;
  }
LABEL_21:
  if (*(void *)(a2 + 40))
  {
    uint64_t v21 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)",\"args\":", 8);
  }
  return result;
}

void AMSCore::Trace::JSONTraceCollector::asyncNext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(a1 + 8));
  if (v3)
  {
    uint64_t v7 = (std::mutex *)(a1 + 16);
    std::mutex::lock((std::mutex *)(a1 + 16));
    if (!*(unsigned char *)(a1 + 368))
    {
      char v9 = 44;
      uint64_t v8 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>((void *)(a1 + 104), (uint64_t)&v9, 1);
      char v10 = 10;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)&v10, 1);
    }
    *(unsigned char *)(a1 + 368) = 0;
    std::mutex::unlock(v7);
  }
}

void sub_18DB4B2DC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AMSCore::Trace::JSONTraceCollector::asyncBegin(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(a1 + 8));
  if (v3)
  {
    uint64_t v7 = (std::mutex *)(a1 + 16);
    std::mutex::lock((std::mutex *)(a1 + 16));
    if (!*(unsigned char *)(a1 + 368))
    {
      char v9 = 44;
      uint64_t v8 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>((void *)(a1 + 104), (uint64_t)&v9, 1);
      char v10 = 10;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)&v10, 1);
    }
    *(unsigned char *)(a1 + 368) = 0;
    std::mutex::unlock(v7);
  }
}

void sub_18DB4B398(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AMSCore::Trace::JSONTraceCollector::instant(uint64_t a1, uint64_t a2, int a3)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(a1 + 8));
  if (v3)
  {
    uint64_t v7 = (std::mutex *)(a1 + 16);
    std::mutex::lock((std::mutex *)(a1 + 16));
    if (!*(unsigned char *)(a1 + 368))
    {
      char v12 = 44;
      uint64_t v8 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>((void *)(a1 + 104), (uint64_t)&v12, 1);
      char v13 = 10;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)&v13, 1);
    }
    *(unsigned char *)(a1 + 368) = 0;
    char v9 = (void *)(a1 + 104);
    char v10 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v9, (uint64_t)"{\"ph\":\"i\",\"s\":\"", 15);
    if (a3 == 2)
    {
      char v16 = 116;
      int v11 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v10, (uint64_t)&v16, 1);
    }
    else if (a3 == 1)
    {
      char v15 = 112;
      int v11 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v10, (uint64_t)&v15, 1);
    }
    else
    {
      char v14 = 103;
      int v11 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v10, (uint64_t)&v14, 1);
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v11, (uint64_t)"\",", 2);
    char v17 = 125;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v9, (uint64_t)&v17, 1);
    std::mutex::unlock(v7);
  }
}

void sub_18DB4B4E0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AMSCore::Trace::JSONTraceCollector::counter(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 8));
  if (v2)
  {
    int v5 = (std::mutex *)(a1 + 16);
    std::mutex::lock((std::mutex *)(a1 + 16));
    if (!*(unsigned char *)(a1 + 368))
    {
      char v8 = 44;
      uint64_t v6 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>((void *)(a1 + 104), (uint64_t)&v8, 1);
      char v9 = 10;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v6, (uint64_t)&v9, 1);
    }
    *(unsigned char *)(a1 + 368) = 0;
    uint64_t v7 = (void *)(a1 + 104);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v7, (uint64_t)"{\"ph\":\"C\",", 10);
    char v10 = 125;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v7, (uint64_t)&v10, 1);
    std::mutex::unlock(v5);
  }
}

void sub_18DB4B5C0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AMSCore::Trace::JSONTraceCollector::completion(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 8));
  if (v2)
  {
    int v5 = (std::mutex *)(a1 + 16);
    std::mutex::lock((std::mutex *)(a1 + 16));
    if (!*(unsigned char *)(a1 + 368))
    {
      char v9 = 44;
      uint64_t v6 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>((void *)(a1 + 104), (uint64_t)&v9, 1);
      char v10 = 10;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v6, (uint64_t)&v10, 1);
    }
    *(unsigned char *)(a1 + 368) = 0;
    uint64_t v7 = (void *)(a1 + 104);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v7, (uint64_t)"{\"ph\":\"X\",\"dur\":", 16);
    char v8 = (void *)std::ostream::operator<<();
    char v11 = 44;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)&v11, 1);
    char v12 = 125;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v7, (uint64_t)&v12, 1);
    std::mutex::unlock(v5);
  }
}

void sub_18DB4B6D8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AMSCore::Trace::JSONTraceCollector::durationEnd(AMSCore::Trace::JSONTraceCollector *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 8);
  if (v1)
  {
    unsigned __int8 v3 = (std::mutex *)((char *)this + 16);
    std::mutex::lock((std::mutex *)((char *)this + 16));
    if (!*((unsigned char *)this + 368))
    {
      char v18 = 44;
      char v4 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>((void *)this + 13, (uint64_t)&v18, 1);
      char v19 = 10;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v4, (uint64_t)&v19, 1);
    }
    *((unsigned char *)this + 368) = 0;
    int v5 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>((void *)this + 13, (uint64_t)"{\"ph\":\"E\",", 10);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v5, (uint64_t)"\"ts\":", 5);
    std::chrono::steady_clock::now();
    uint64_t v6 = (void *)std::ostream::operator<<();
    char v20 = 44;
    uint64_t v7 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v6, (uint64_t)&v20, 1);
    char v8 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v7, (uint64_t)"\"pid\":", 6);
    char v21 = 49;
    char v9 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)&v21, 1);
    char v22 = 44;
    char v10 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v10, (uint64_t)"\"tid\":", 6);
    {
    }
    else
    {
      _DWORD *v12 = v13;
      char v16 = (unsigned char *)v15(v14);
      *char v16 = v17;
    }
    char v11 = (void *)std::ostream::operator<<();
    char v23 = 125;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v11, (uint64_t)&v23, 1);
    std::mutex::unlock(v3);
  }
}

void sub_18DB4B8A8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AMSCore::Trace::JSONTraceCollector::durationBegin(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 8));
  if (v2)
  {
    int v5 = (std::mutex *)(a1 + 16);
    std::mutex::lock((std::mutex *)(a1 + 16));
    if (!*(unsigned char *)(a1 + 368))
    {
      char v8 = 44;
      uint64_t v6 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>((void *)(a1 + 104), (uint64_t)&v8, 1);
      char v9 = 10;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v6, (uint64_t)&v9, 1);
    }
    *(unsigned char *)(a1 + 368) = 0;
    uint64_t v7 = (void *)(a1 + 104);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v7, (uint64_t)"{\"ph\":\"B\",", 10);
    char v10 = 125;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v7, (uint64_t)&v10, 1);
    std::mutex::unlock(v5);
  }
}

void sub_18DB4B988(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AMSCore::Trace::JSONTraceCollector::~JSONTraceCollector(AMSCore::Trace::JSONTraceCollector *this)
{
  AMSCore::Trace::JSONTraceCollector::~JSONTraceCollector(this);
  JUMPOUT(0x192FA4080);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(void *)this = &unk_1EDC82800;
  unsigned __int8 v2 = MEMORY[0x1E4FBA408];
  unsigned __int8 v3 = *MEMORY[0x1E4FBA408];
  *((void *)this + 11) = *MEMORY[0x1E4FBA408];
  char v4 = *(void *)(v2 + 72);
  *(void *)((char *)this + *(void *)(v3 - 24) + 88) = *(void *)(v2 + 64);
  *((void *)this + 13) = v4;
  *((void *)this + 14) = MEMORY[0x1E4FBA470] + 16;
  if (*((char *)this + 199) < 0) {
    operator delete(*((void **)this + 22));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x192FA3FD0]((char *)this + 216);
  std::mutex::~mutex((std::mutex *)((char *)this + 16));
}

void AMSCore::HTTPCacheProvider::shutdown(AMSCore::HTTPCacheProvider *this)
{
  unsigned __int8 v1 = (std::__shared_weak_count *)*((void *)this + 4);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t AMSCore::HTTPCacheProvider::deleteResponsesForAccountIdentifier(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

void AMSCore::HTTPCacheProvider::loadAndRefreshCache(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = (char *)operator new(0x5A0uLL);
  *(void *)uint64_t v7 = AMSCore::HTTPCacheProvider::loadAndRefreshCache;
  *((void *)v7 + 1) = AMSCore::HTTPCacheProvider::loadAndRefreshCache;
  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)(v7 + 152), a2);
  *(_OWORD *)(v7 + 520) = *(_OWORD *)(a2 + 368);
  *(void *)(a2 + 368) = 0;
  *(void *)(a2 + 376) = 0;
  AMSCore::ExecuteHTTPRequestTask::Options::Options((uint64_t)(v7 + 920), a3);
  *((void *)v7 + 176) = a4[1];
  *(void *)(v7 + 1415) = *(void *)((char *)a4 + 15);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  v7[24] = 0;
  v7[104] = 0;
  *((void *)v7 + 14) = 0;
  *((void *)v7 + 18) = 0;
  std::shared_ptr<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v8, (uint64_t)(v7 + 16));
}

void sub_18DB4C048(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void **a15, AMSCore::ExecuteHTTPRequestTask::Options *a16)
{
  if (v16[1360] && v16[1359] < 0) {
    operator delete(*a15);
  }
  AMSCore::ExecuteHTTPRequestTask::Options::~Options(a16);
  AMSCore::EncodeHTTPRequestTask::Result::~Result(v17);
  if (v16[1391] < 0) {
    operator delete(*a14);
  }
  __cxa_begin_catch(a1);
  AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DB4C0A4()
{
}

void sub_18DB4C0B4(_Unwind_Exception *a1)
{
  AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::~Promise(v2);
  AMSCore::ExecuteHTTPRequestTask::Options::~Options(v4);
  AMSCore::EncodeHTTPRequestTask::Result::~Result(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::HTTPCacheProvider::loadAndRefreshCache(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 1424);
  if (*(unsigned char *)(v1 + 88))
  {
    uint64_t v2 = result;
    unsigned __int8 v3 = (std::runtime_error *)(result + 1256);
    char v4 = (const std::runtime_error *)(v1 + 8);
    char v5 = *(unsigned char *)(v1 + 80);
    if (v5)
    {
      *(void *)(result + 1256) = *(void *)(v1 + 8);
      uint64_t v6 = (const char **)(result + 1264);
      p_int imp = (std::__libcpp_refstring *)(v1 + 16);
    }
    else
    {
      std::runtime_error::runtime_error((std::runtime_error *)(result + 1256), v4);
      *(_OWORD *)(v2 + 1272) = *(_OWORD *)(v1 + 24);
      *(void *)(v2 + 1256) = &unk_1EDC827D8;
      long long v8 = (void *)(v1 + 48);
      uint64_t v9 = *(void *)(v1 + 48);
      *(void *)(v2 + 1288) = *(void *)(v1 + 40);
      uint64_t v10 = v2 + 1296;
      *(void *)(v2 + 1296) = v9;
      uint64_t v11 = *(void *)(v1 + 56);
      *(void *)(v2 + 1304) = v11;
      if (v11)
      {
        *(void *)(v9 + 16) = v10;
        *(void *)(v1 + 40) = v8;
        void *v8 = 0;
        *(void *)(v1 + 56) = 0;
      }
      else
      {
        *(void *)(v2 + 1288) = v10;
      }
      char v12 = *(const std::runtime_error **)(v2 + 1424);
      int v13 = v12[4].__vftable;
      char v4 = v12 + 4;
      *(void *)(v2 + 1312) = v13;
      uint64_t v6 = (const char **)(v2 + 1320);
      p_int imp = &v4->__imp_;
    }
    void *v6 = p_imp->__imp_;
    v4->__vftable = 0;
    v4->__imp_.__imp_ = 0;
    *(unsigned char *)(v2 + 1328) = v5;
    std::optional<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>,void>((std::runtime_error *)(v2 + 24), v3);
    if (*(unsigned char *)(v2 + 1328))
    {
      uint64_t v14 = *(std::__shared_weak_count **)(v2 + 1264);
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
    }
    uint64_t v15 = *(void *)(v2 + 1432);
    if (v15 && !atomic_fetch_add((atomic_ullong *volatile)(v15 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      char v16 = *(std::__shared_weak_count **)(v2 + 1432);
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    char v17 = *(std::__shared_weak_count **)(v2 + 1400);
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    if (*(unsigned char *)(v2 + 1360) && *(char *)(v2 + 1359) < 0) {
      operator delete(*(void **)(v2 + 1336));
    }
    AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(v2 + 1088));
    char v18 = *(std::__shared_weak_count **)(v2 + 912);
    if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)(v2 + 536));
    if (*(char *)(v2 + 1391) < 0) {
      operator delete(*(void **)(v2 + 1368));
    }
    *(void *)(v2 + 1256) = v2 + 16;
    *(void *)uint64_t v2 = 0;
    *(unsigned char *)(v2 + 1423) = 1;
    return AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void AMSCore::HTTPCacheProvider::loadAndRefreshCache(uint64_t a1)
{
  uint64_t v2 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 920);
  uint64_t v3 = a1 + 16;
  if ((*(unsigned char *)(a1 + 1423) & 1) == 0)
  {
    uint64_t v4 = *(void *)(a1 + 1432);
    if (v4 && !atomic_fetch_add((atomic_ullong *volatile)(v4 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      char v5 = *(std::__shared_weak_count **)(a1 + 1432);
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 1400);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (*(unsigned char *)(a1 + 1360) && *(char *)(a1 + 1359) < 0) {
      operator delete(*(void **)(a1 + 1336));
    }
    AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 1088));
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 912);
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)(a1 + 536));
    if (*(char *)(a1 + 1391) < 0) {
      operator delete(*(void **)(a1 + 1368));
    }
  }
  AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::~Promise(v3);
  AMSCore::ExecuteHTTPRequestTask::Options::~Options(v2);
  long long v8 = *(std::__shared_weak_count **)(a1 + 528);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)(a1 + 152));
  operator delete((void *)a1);
}

void AMSCore::HTTPCacheProvider::downloadAndUpdateCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = (char *)operator new(0x678uLL);
  *(void *)uint64_t v11 = AMSCore::HTTPCacheProvider::downloadAndUpdateCache;
  *((void *)v11 + 1) = AMSCore::HTTPCacheProvider::downloadAndUpdateCache;
  *((void *)v11 + 199) = a2;
  uint64_t v12 = *(void *)(a3 + 8);
  *((void *)v11 + 200) = *(void *)a3;
  *((void *)v11 + 201) = v12;
  *((_DWORD *)v11 + 410) = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(v11 + 1643) = *(_DWORD *)(a3 + 19);
  v11[1647] = *(unsigned char *)(a3 + 23);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)(v11 + 152), a4);
  *(_OWORD *)(v11 + 520) = *(_OWORD *)(a4 + 368);
  *(void *)(a4 + 368) = 0;
  *(void *)(a4 + 376) = 0;
  AMSCore::ExecuteHTTPRequestTask::Options::Options((uint64_t)(v11 + 1272), a5);
  LODWORD(a3) = *((unsigned __int8 *)a6 + 24);
  v11[1648] = a3;
  if (a3)
  {
    uint64_t v13 = *a6;
    *((void *)v11 + 197) = a6[1];
    *(void *)(v11 + 1583) = *(uint64_t *)((char *)a6 + 15);
    LOBYTE(a4) = *((unsigned char *)a6 + 23);
    a6[1] = 0;
    a6[2] = 0;
    *a6 = 0;
  }
  else
  {
    uint64_t v13 = 0;
  }
  *((void *)v11 + 202) = v13;
  v11[1649] = a4;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  v11[24] = 0;
  v11[104] = 0;
  *((void *)v11 + 14) = 0;
  *((void *)v11 + 18) = 0;
  std::shared_ptr<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v14, (uint64_t)(v11 + 16));
}

void sub_18DB4CEE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, AMSCore::EncodeHTTPRequestTask::Result *a15, AMSCore::ExecuteHTTPRequestTask::Options *a16, AMSCore::EncodeHTTPRequestTask::Result *a17, uint64_t a18, uint64_t a19, AMSCore::HTTPRequest::CacheKey *a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,int a29,__int16 a30,char a31,char a32)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AMSCore::HTTPCacheProvider::downloadAndUpdateCache(uint64_t a1)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1 + 520;
  uint64_t v2 = a1 + 152;
  std::string::size_type v51 = (unsigned char *)(a1 + 1591);
  uint64_t v52 = a1 + 920;
  uint64_t v3 = a1 + 1104;
  uint64_t v4 = a1 + 1272;
  char v5 = (std::runtime_error *)(a1 + 1440);
  uint64_t v6 = (std::mutex **)(a1 + 1560);
  uint64_t v7 = (uint64_t *)(a1 + 1576);
  long long v8 = (_DWORD *)(a1 + 1640);
  uint64_t v49 = a1 + 16;
  int v50 = (std::mutex **)(a1 + 1544);
  switch(*(unsigned char *)(a1 + 1591))
  {
    case 1:
      goto LABEL_7;
    case 2:
      uint64_t v32 = *v6;
      std::mutex::lock(*v6);
      char v33 = *v6;
      if (!(*v6)[2].__m_.__opaque[8]) {
        goto LABEL_57;
      }
      char v34 = v33[2].__m_.__opaque[0];
      if (v34)
      {
        *(void *)(a1 + 1440) = v33[1].__m_.__sig;
        uint64_t v35 = *(void *)v33[1].__m_.__opaque;
        *(void *)(a1 + 1448) = v35;
        if (v35) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        AMSCore::Error::Error(v5, (const std::runtime_error *)&v33[1]);
      }
      char v36 = (atomic_uchar *)(*(void *)(a1 + 1592) + 104);
      *(unsigned char *)(a1 + 1512) = v34;
      std::mutex::unlock(v32);
      if ((atomic_exchange_explicit(v36, 1u, memory_order_acquire) & 1) == 0)
      {
LABEL_33:
        if (!*(unsigned char *)(a1 + 1552)) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }
      unsigned char *v51 = 3;
      std::mutex::lock((std::mutex *)(*(void *)(a1 + 1592) + 40));
      uint64_t v43 = *(void *)(a1 + 1592);
      if (*(void *)(v43 + 128)
        || (atomic_exchange_explicit((atomic_uchar *volatile)(v43 + 104), 1u, memory_order_release) & 1) != 0)
      {
        uint64_t v44 = operator new(0x18uLL);
        uint64_t v45 = (std::mutex *)(*(void *)(a1 + 1592) + 40);
        v44[1] = v43 + 112;
        void v44[2] = a1;
        uint64_t v46 = *(void *)(v43 + 112);
        *uint64_t v44 = v46;
        *(void *)(v46 + 8) = v44;
        *(void *)(v43 + 112) = v44;
        ++*(void *)(v43 + 128);
        std::mutex::unlock(v45);
        return;
      }
      std::mutex::unlock((std::mutex *)(*(void *)(a1 + 1592) + 40));
      if (*(unsigned char *)(a1 + 1552)) {
LABEL_34:
      }
        AMSCore::AwaitableMutex::unlock(*v50);
LABEL_35:
      uint64_t v37 = *(void *)(a1 + 1592);
      *(void *)(a1 + 1544) = v37 + 40;
      *(unsigned char *)(a1 + 1552) = 1;
      char v19 = (void **)v52;
      uint64_t v38 = std::__hash_table<std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>,std::__unordered_map_hasher<AMSCore::HTTPRequest::CacheKey,std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>,AMSCore::HTTPRequest::CacheKey::Hasher,std::equal_to<AMSCore::HTTPRequest::CacheKey>,true>,std::__unordered_map_equal<AMSCore::HTTPRequest::CacheKey,std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>,std::equal_to<AMSCore::HTTPRequest::CacheKey>,AMSCore::HTTPRequest::CacheKey::Hasher,true>,std::allocator<std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>>>::find<AMSCore::HTTPRequest::CacheKey>((void *)(v37 + 136), v52);
      if (v38) {
        std::__hash_table<std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>,std::__unordered_map_hasher<AMSCore::HTTPRequest::CacheKey,std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>,AMSCore::HTTPRequest::CacheKey::Hasher,std::equal_to<AMSCore::HTTPRequest::CacheKey>,true>,std::__unordered_map_equal<AMSCore::HTTPRequest::CacheKey,std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>,std::equal_to<AMSCore::HTTPRequest::CacheKey>,AMSCore::HTTPRequest::CacheKey::Hasher,true>,std::allocator<std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>>>::erase((void *)(*(void *)(a1 + 1592) + 136), (char *)v38);
      }
      AMSCore::AwaitableMutex::unlock((std::mutex *)(*(void *)(a1 + 1592) + 40));
      *(unsigned char *)(a1 + 1552) = 0;
      std::optional<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>,void>((std::runtime_error *)(a1 + 24), v5);
      if (*(unsigned char *)(a1 + 1512))
      {
        uint64_t v39 = *(std::__shared_weak_count **)(a1 + 1448);
        uint64_t v21 = v49;
        if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      else
      {
        ((void (*)(std::runtime_error *))v5->~runtime_error)(v5);
        uint64_t v21 = v49;
      }
      uint64_t v40 = *(std::__shared_weak_count **)(a1 + 1568);
      if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
      char v23 = (uint64_t *)(a1 + 1624);
      uint64_t v24 = (char *)(a1 + 1650);
LABEL_46:
      uint64_t v41 = *v23;
      char v42 = *v24;
      if (*(unsigned char *)(a1 + 1552)) {
        AMSCore::AwaitableMutex::unlock(*v50);
      }
      AMSCore::URL::~URL((AMSCore::URL *)(a1 + 952));
      if (*(char *)(a1 + 943) < 0) {
        operator delete(*v19);
      }
      *(void *)(a1 + 1632) = v41;
      *(unsigned char *)(a1 + 1651) = v42;
      *(void *)(a1 + 920) = v21;
      *(void *)a1 = 0;
      unsigned char *v51 = 4;
      AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v19);
      return;
    case 3:
      goto LABEL_33;
    default:
      uint64_t v47 = (std::string *)(a1 + 1520);
      uint64_t v48 = (AMSCore::EncodeHTTPRequestTask::Options *)(a1 + 536);
      uint64_t v10 = *(void *)(a1 + 1592);
      *(void *)(a1 + 1544) = v10 + 40;
      *(unsigned char *)(a1 + 1552) = 1;
      uint64_t v11 = std::__hash_table<std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>,std::__unordered_map_hasher<AMSCore::HTTPRequest::CacheKey,std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>,AMSCore::HTTPRequest::CacheKey::Hasher,std::equal_to<AMSCore::HTTPRequest::CacheKey>,true>,std::__unordered_map_equal<AMSCore::HTTPRequest::CacheKey,std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>,std::equal_to<AMSCore::HTTPRequest::CacheKey>,AMSCore::HTTPRequest::CacheKey::Hasher,true>,std::allocator<std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>>>::find<AMSCore::HTTPRequest::CacheKey>((void *)(v10 + 136), v52);
      if (!v11)
      {
        int v25 = *(char *)(a1 + 1647);
        std::string::size_type v26 = *(void *)(a1 + 1608);
        char v27 = *(const std::string::value_type **)(a1 + 1600);
        if (v25 < 0)
        {
          std::string::__init_copy_ctor_external(v47, v27, v26);
        }
        else
        {
          *(void *)(a1 + 1520) = v27;
          *(void *)(a1 + 1528) = v26;
          *(_DWORD *)(a1 + 1536) = *v8;
          *(_DWORD *)(a1 + 1539) = *(_DWORD *)((char *)v8 + 3);
          *(unsigned char *)(a1 + 1543) = v25;
        }
        int v28 = *(unsigned __int8 *)(a1 + 1648);
        AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v48, v2);
        *(_OWORD *)(v1 + 384) = *(_OWORD *)v1;
        *(void *)uint64_t v1 = 0;
        *(void *)(v1 + 8) = 0;
        AMSCore::ExecuteHTTPRequestTask::Options::Options(v3, v4);
        LOBYTE(__p) = 0;
        char v57 = 0;
        uint64_t v29 = *(void *)(a1 + 1616);
        char v30 = *(unsigned char *)(a1 + 1649);
        if (v28)
        {
          uint64_t v31 = *v7;
          std::runtime_error __p = *(void **)(a1 + 1616);
          *(void *)uint64_t v55 = v31;
          *(void *)&v55[7] = *(uint64_t *)((char *)v7 + 7);
          char v56 = v30;
          uint64_t *v7 = 0;
          *(uint64_t *)((char *)v7 + 7) = 0;
          char v57 = 1;
          char v30 = 0;
          uint64_t v29 = 0;
        }
        *(void *)(a1 + 1624) = v29;
        *(unsigned char *)(a1 + 1650) = v30;
        AMSCore::HTTPCacheProvider::downloadAndUpdateCacheInner((uint64_t)v53, *(void *)(a1 + 1592), (uint64_t)v47, (uint64_t)v48, v3, (uint64_t)&__p);
      }
      *(void *)(a1 + 1560) = v11[25];
      uint64_t v12 = v11[26];
      *(void *)(a1 + 1568) = v12;
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      AMSCore::AwaitableMutex::unlock((std::mutex *)(*(void *)(a1 + 1592) + 40));
      *(unsigned char *)(a1 + 1552) = 0;
      uint64_t v13 = *(std::mutex **)(a1 + 1560);
      std::mutex::lock(v13);
      int v14 = (*v6)[2].__m_.__opaque[8];
      std::mutex::unlock(v13);
      if (!v14)
      {
        unsigned char *v51 = 1;
        if (AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::await_suspend(v6, a1)) {
          return;
        }
      }
LABEL_7:
      uint64_t v15 = *v6;
      std::mutex::lock(*v6);
      char v16 = *v6;
      if (!(*v6)[2].__m_.__opaque[8])
      {
LABEL_57:
        __break(1u);
        return;
      }
      char v17 = v16[2].__m_.__opaque[0];
      if (v17)
      {
        *(void *)(a1 + 1440) = v16[1].__m_.__sig;
        uint64_t v18 = *(void *)v16[1].__m_.__opaque;
        *(void *)(a1 + 1448) = v18;
        if (v18) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        AMSCore::Error::Error(v5, (const std::runtime_error *)&v16[1]);
      }
      *(unsigned char *)(a1 + 1512) = v17;
      std::mutex::unlock(v15);
      std::optional<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>,void>((std::runtime_error *)(a1 + 24), v5);
      char v19 = (void **)v52;
      if (*(unsigned char *)(a1 + 1512))
      {
        char v20 = *(std::__shared_weak_count **)(a1 + 1448);
        uint64_t v21 = v49;
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      else
      {
        ((void (*)(std::runtime_error *))v5->~runtime_error)(v5);
        uint64_t v21 = v49;
      }
      char v22 = *(std::__shared_weak_count **)(a1 + 1568);
      if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
      char v23 = (uint64_t *)(a1 + 1616);
      uint64_t v24 = (char *)(a1 + 1649);
      goto LABEL_46;
  }
}

{
  void **v2;
  AMSCore::ExecuteHTTPRequestTask::Options *v3;
  void (***v4)(void);
  void *v5;
  char v6;
  std::__shared_weak_count *v7;
  void **v8;
  char *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  int v12;
  std::__shared_weak_count *v13;
  int v14;
  uint64_t vars8;

  uint64_t v2 = (void **)(a1 + 152);
  uint64_t v3 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 1272);
  uint64_t v4 = (void (***)(void))(a1 + 1440);
  switch(*(unsigned char *)(a1 + 1591))
  {
    case 1:
      uint64_t v7 = *(std::__shared_weak_count **)(a1 + 1568);
      if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      long long v8 = (void **)(a1 + 1616);
      uint64_t v9 = (char *)(a1 + 1649);
      goto LABEL_17;
    case 2:
      goto LABEL_13;
    case 3:
      if (*(unsigned char *)(a1 + 1512))
      {
        uint64_t v10 = *(std::__shared_weak_count **)(a1 + 1448);
        if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      else
      {
        (**v4)(v4);
      }
LABEL_13:
      uint64_t v11 = *(std::__shared_weak_count **)(a1 + 1568);
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      long long v8 = (void **)(a1 + 1624);
      uint64_t v9 = (char *)(a1 + 1650);
LABEL_17:
      char v5 = *v8;
      uint64_t v6 = *v9;
      if (*(unsigned char *)(a1 + 1552)) {
        AMSCore::AwaitableMutex::unlock(*(std::mutex **)(a1 + 1544));
      }
      goto LABEL_19;
    case 4:
      char v5 = *(void **)(a1 + 1632);
      uint64_t v6 = *(unsigned char *)(a1 + 1651);
      goto LABEL_21;
    default:
      char v5 = *(void **)(a1 + 1616);
      uint64_t v6 = *(unsigned char *)(a1 + 1649);
LABEL_19:
      AMSCore::URL::~URL((AMSCore::URL *)(a1 + 952));
      if (*(char *)(a1 + 943) < 0) {
        operator delete(*(void **)(a1 + 920));
      }
LABEL_21:
      uint64_t v12 = *(unsigned __int8 *)(a1 + 1648);
      AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::~Promise(a1 + 16);
      if (v12 && v6 < 0) {
        operator delete(v5);
      }
      AMSCore::ExecuteHTTPRequestTask::Options::~Options(v3);
      uint64_t v13 = *(std::__shared_weak_count **)(a1 + 528);
      if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      int v14 = *(char *)(a1 + 1647);
      AMSCore::EncodeHTTPRequestTask::Options::~Options(v2);
      if (v14 < 0) {
        operator delete(*(void **)(a1 + 1600));
      }
      operator delete((void *)a1);
      return;
  }
}

void sub_18DB4D900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, AMSCore::EncodeHTTPRequestTask::Result *a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a2)
  {
    std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](a13);
    AMSCore::HTTPRequest::CacheKey::~CacheKey(a15);
    __cxa_begin_catch(exception_object);
    AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::unhandled_exception();
  }
  _Unwind_Resume(exception_object);
}

void sub_18DB4DA38()
{
}

void sub_18DB4DA40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned char *a14)
{
  *int v14 = 0;
  *a14 = 4;
  _Unwind_Resume(exception_object);
}

uint64_t *std::__hash_table<std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>,std::__unordered_map_hasher<AMSCore::HTTPRequest::CacheKey,std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>,AMSCore::HTTPRequest::CacheKey::Hasher,std::equal_to<AMSCore::HTTPRequest::CacheKey>,true>,std::__unordered_map_equal<AMSCore::HTTPRequest::CacheKey,std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>,std::equal_to<AMSCore::HTTPRequest::CacheKey>,AMSCore::HTTPRequest::CacheKey::Hasher,true>,std::allocator<std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>>>::find<AMSCore::HTTPRequest::CacheKey>(void *a1, uint64_t a2)
{
  unint64_t v4 = AMSCore::HTTPRequest::CacheKey::Hasher::hash(a2, *(_DWORD *)(a2 + 24), (AMSCore::URL *)(a2 + 32));
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(uint64_t ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v24 = (unsigned __int8 **)(a2 + 64);
    int v25 = (unsigned __int8 **)(a2 + 160);
    char v22 = (unsigned __int8 **)(a2 + 128);
    char v23 = (unsigned __int8 **)(a2 + 96);
    uint64_t v12 = (unsigned __int8 **)(a2 + 136);
    char v13 = *(unsigned char *)(a2 + 23);
    if (v13 >= 0) {
      size_t v14 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v14 = *(void *)(a2 + 8);
    }
    if (v13 >= 0) {
      uint64_t v15 = (const void *)a2;
    }
    else {
      uint64_t v15 = *(const void **)a2;
    }
    int v16 = *(_DWORD *)(a2 + 24);
    do
    {
      unint64_t v17 = v11[1];
      if (v17 == v6)
      {
        uint64_t v18 = *((unsigned __int8 *)v11 + 39);
        int v19 = (char)v18;
        if ((v18 & 0x80u) != 0) {
          uint64_t v18 = v11[3];
        }
        if (v18 == v14)
        {
          char v20 = v19 >= 0 ? v11 + 2 : (uint64_t *)v11[2];
          if (!memcmp(v20, v15, v14) && *((_DWORD *)v11 + 10) == v16)
          {
            v27[0] = (const void **)(v11 + 22);
            v27[1] = (const void **)(v11 + 10);
            v27[2] = (const void **)(v11 + 14);
            void v27[3] = (const void **)(v11 + 18);
            v27[4] = (const void **)(v11 + 19);
            v26[0] = v25;
            v26[1] = v24;
            v26[2] = v23;
            v26[3] = v22;
            v26[4] = v12;
            if (std::__tuple_equal<5ul>::operator()[abi:fe180100]<std::tuple<std::string const&,std::optional<std::string> const&,std::optional<std::string> const&,std::optional<unsigned short> const&,AMSCore::OrderedMap<std::string,std::string> const&>,std::tuple<std::string const&,std::optional<std::string> const&,std::optional<std::string> const&,std::optional<unsigned short> const&,AMSCore::OrderedMap<std::string,std::string> const&>>(v27, v26))
            {
              return v11;
            }
          }
        }
      }
      else
      {
        if (v8 <= 1)
        {
          v17 &= *(void *)&v5 - 1;
        }
        else if (v17 >= *(void *)&v5)
        {
          v17 %= *(void *)&v5;
        }
        if (v17 != v9) {
          return 0;
        }
      }
      uint64_t v11 = (uint64_t *)*v11;
    }
    while (v11);
  }
  return v11;
}

BOOL AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::await_suspend(std::mutex **a1, uint64_t a2)
{
  unint64_t v4 = *a1;
  std::mutex::lock(*a1);
  int8x8_t v5 = *a1;
  int v6 = (*a1)[2].__m_.__opaque[8];
  if (!(*a1)[2].__m_.__opaque[8])
  {
    unint64_t v8 = *(char **)&v5[2].__m_.__opaque[24];
    unint64_t v7 = *(void *)&v5[2].__m_.__opaque[32];
    if ((unint64_t)v8 >= v7)
    {
      uint64_t v10 = *(char **)&v5[2].__m_.__opaque[16];
      uint64_t v11 = (v8 - v10) >> 3;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61) {
        std::vector<std::string>::__throw_length_error[abi:fe180100]();
      }
      uint64_t v13 = v7 - (void)v10;
      if (v13 >> 2 > v12) {
        unint64_t v12 = v13 >> 2;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14)
      {
        if (v14 >> 61) {
          std::__throw_bad_array_new_length[abi:fe180100]();
        }
        uint64_t v15 = operator new(8 * v14);
      }
      else
      {
        uint64_t v15 = 0;
      }
      int v16 = &v15[8 * v11];
      unint64_t v17 = &v15[8 * v14];
      *int v16 = a2;
      unint64_t v9 = v16 + 1;
      if (v8 == v10)
      {
        uint64_t v10 = v8;
      }
      else
      {
        unint64_t v18 = v8 - v10 - 8;
        if (v18 < 0x58) {
          goto LABEL_31;
        }
        if ((unint64_t)(v10 - v15) < 0x20) {
          goto LABEL_31;
        }
        uint64_t v19 = (v18 >> 3) + 1;
        char v20 = &v15[8 * v11 - 16];
        uint64_t v21 = v8 - 16;
        uint64_t v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v23 = *(_OWORD *)v21;
          *(v20 - 1) = *((_OWORD *)v21 - 1);
          *char v20 = v23;
          v20 -= 2;
          v21 -= 32;
          v22 -= 4;
        }
        while (v22);
        v16 -= v19 & 0x3FFFFFFFFFFFFFFCLL;
        v8 -= 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
        if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_31:
          do
          {
            uint64_t v24 = *((void *)v8 - 1);
            v8 -= 8;
            *--int v16 = v24;
          }
          while (v8 != v10);
          uint64_t v10 = *(char **)&v5[2].__m_.__opaque[16];
        }
      }
      *(void *)&v5[2].__m_.__opaque[16] = v16;
      *(void *)&v5[2].__m_.__opaque[24] = v9;
      *(void *)&v5[2].__m_.__opaque[32] = v17;
      if (v10) {
        operator delete(v10);
      }
    }
    else
    {
      *(void *)unint64_t v8 = a2;
      unint64_t v9 = v8 + 8;
    }
    *(void *)&v5[2].__m_.__opaque[24] = v9;
  }
  std::mutex::unlock(v4);
  return v6 == 0;
}

void AMSCore::HTTPCacheProvider::downloadAndUpdateCacheInner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = operator new(0x708uLL);
  void *v11 = AMSCore::HTTPCacheProvider::downloadAndUpdateCacheInner;
  v11[1] = AMSCore::HTTPCacheProvider::downloadAndUpdateCacheInner;
  v11[221] = a2;
  *((_OWORD *)v11 + 107) = *(_OWORD *)a3;
  v11[216] = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)(v11 + 72), a4);
  *((_OWORD *)v11 + 59) = *(_OWORD *)(a4 + 368);
  *(void *)(a4 + 368) = 0;
  *(void *)(a4 + 376) = 0;
  AMSCore::ExecuteHTTPRequestTask::Options::Options((uint64_t)(v11 + 168), a5);
  *((unsigned char *)v11 + 1680) = 0;
  *((unsigned char *)v11 + 1704) = 0;
  if (*(unsigned char *)(a6 + 24))
  {
    *((_OWORD *)v11 + 105) = *(_OWORD *)a6;
    v11[212] = *(void *)(a6 + 16);
    *(void *)(a6 + 8) = 0;
    *(void *)(a6 + 16) = 0;
    *(void *)a6 = 0;
    *((unsigned char *)v11 + 1704) = 1;
  }
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *((unsigned char *)v11 + 24) = 0;
  *((unsigned char *)v11 + 104) = 0;
  v11[14] = 0;
  v11[18] = 0;
  std::shared_ptr<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(__p, (uint64_t)(v11 + 2));
}

void sub_18DB4E7B8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void (**a27)(void),uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v41 - 104);
  if (!a39) {
    (*a27)(&a27);
  }
  if (a11)
  {
    if (a20 < 0) {
      operator delete(__p);
    }
  }
  std::__expected_base<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::__repr::__destroy_union_member[abi:fe180100](v40);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v39 + 1752);
  __cxa_begin_catch(a1);
  AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DB4E87C()
{
}

void sub_18DB4E884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, AMSCore::EncodeHTTPRequestTask::Result *a12)
{
  AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::~Promise(v13);
  if (v12[1704] && v12[1703] < 0) {
    operator delete(*a11);
  }
  AMSCore::ExecuteHTTPRequestTask::Options::~Options(v15);
  AMSCore::EncodeHTTPRequestTask::Result::~Result(a12);
  if (v12[1735] < 0) {
    operator delete(*v14);
  }
  operator delete(v12);
  _Unwind_Resume(a1);
}

void AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::then(uint64_t *a1, void *a2)
{
  v45[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (!atomic_load_explicit((atomic_ullong *volatile)(v4 + 96), memory_order_acquire))
  {
    *(void *)&long long v41 = v4;
    *((void *)&v41 + 1) = v3;
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v9 = (void *)a2[3];
    if (v9)
    {
      if (v9 == a2)
      {
        uint64_t v43 = v42;
        (*(void (**)(void *, void *))(*a2 + 24))(a2, v42);
      }
      else
      {
        uint64_t v43 = (void *)a2[3];
        a2[3] = 0;
      }
    }
    else
    {
      uint64_t v43 = 0;
    }
    v45[0] = 0;
    uint64_t v13 = (char *)operator new(0x38uLL);
    unint64_t v14 = v13;
    *(void *)uint64_t v13 = &unk_1EDC83398;
    *(_OWORD *)(v13 + 8) = v41;
    long long v41 = 0uLL;
    if (v43)
    {
      if (v43 == v42)
      {
        *((void *)v13 + 6) = v13 + 24;
        (*(void (**)(void *))(v42[0] + 24))(v42);
      }
      else
      {
        *((void *)v13 + 6) = v43;
        uint64_t v43 = 0;
      }
    }
    else
    {
      *((void *)v13 + 6) = 0;
    }
    v45[0] = v14;
    int v16 = (unint64_t *)(v4 + 128);
    uint64_t v15 = *(void *)(v4 + 128);
    unint64_t v17 = v4 + 104;
    *(void *)(v4 + 128) = 0;
    if (v15 == v4 + 104)
    {
      (*(void (**)(uint64_t))(*(void *)v17 + 32))(v4 + 104);
    }
    else if (v15)
    {
      (*(void (**)(uint64_t))(*(void *)v15 + 40))(v15);
    }
    unint64_t v18 = (void *)(v4 + 128);
    if (v45[0])
    {
      if ((void *)v45[0] == v44)
      {
        *int v16 = v17;
        (*(void (**)(void *, uint64_t))(v44[0] + 24))(v44, v4 + 104);
LABEL_28:
        if (atomic_exchange((atomic_ullong *volatile)(v4 + 96), v17))
        {
          if (!*(unsigned char *)(v4 + 88)) {
            goto LABEL_67;
          }
          uint64_t v19 = (const std::runtime_error *)(v4 + 8);
          char v20 = *(unsigned char *)(v4 + 80);
          if (v20)
          {
            v33.__vftable = *(std::runtime_error_vtbl **)(v4 + 8);
            p_int imp = &v33.__imp_;
            uint64_t v22 = (const char **)(v4 + 16);
          }
          else
          {
            std::runtime_error::runtime_error(&v33, v19);
            char v27 = (void *)(v4 + 48);
            uint64_t v28 = *(void *)(v4 + 48);
            long long v34 = *(_OWORD *)(v4 + 24);
            uint64_t v29 = *(uint64_t **)(v4 + 40);
            v33.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
            uint64_t v35 = v29;
            uint64_t v36 = v28;
            uint64_t v37 = *(void *)(v4 + 56);
            if (v37)
            {
              *(void *)(v28 + 16) = &v36;
              *(void *)(v4 + 40) = v27;
              *char v27 = 0;
              *(void *)(v4 + 56) = 0;
            }
            else
            {
              uint64_t v35 = &v36;
            }
            uint64_t v31 = *(void *)(v4 + 64);
            char v30 = (const std::runtime_error *)(v4 + 64);
            uint64_t v38 = v31;
            p_int imp = (std::__libcpp_refstring *)&v39;
            uint64_t v22 = &v30->__imp_.__imp_;
            uint64_t v19 = v30;
          }
          p_imp->__imp_ = *v22;
          v19->__vftable = 0;
          v19->__imp_.__imp_ = 0;
          char v40 = v20;
          if (!*v16) {
            std::__throw_bad_function_call[abi:fe180100]();
          }
          (*(void (**)(unint64_t, std::runtime_error *))(*(void *)*v16 + 48))(*v16, &v33);
          if (v40)
          {
            int imp = (std::__shared_weak_count *)v33.__imp_.__imp_;
            if (v33.__imp_.__imp_
              && !atomic_fetch_add((atomic_ullong *volatile)v33.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
              std::__shared_weak_count::__release_weak(imp);
            }
          }
          else
          {
            ((void (*)(std::runtime_error *))v33.~runtime_error)(&v33);
          }
        }
        if ((void *)v45[0] == v44)
        {
          (*(void (**)(void *))(v44[0] + 32))(v44);
        }
        else if (v45[0])
        {
          (*(void (**)(void))(*(void *)v45[0] + 40))();
        }
        if (v43 == v42)
        {
          (*(void (**)(void *))(v42[0] + 32))(v42);
          std::string::size_type v26 = (std::__shared_weak_count *)*((void *)&v41 + 1);
          if (!*((void *)&v41 + 1)) {
            goto LABEL_61;
          }
        }
        else
        {
          if (v43) {
            (*(void (**)(void))(*v43 + 40))();
          }
          std::string::size_type v26 = (std::__shared_weak_count *)*((void *)&v41 + 1);
          if (!*((void *)&v41 + 1)) {
            goto LABEL_61;
          }
        }
LABEL_59:
        if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
        goto LABEL_61;
      }
      unint64_t v18 = v45;
      *int v16 = v45[0];
    }
    *unint64_t v18 = 0;
    goto LABEL_28;
  }
  if (!*(unsigned char *)(v4 + 88))
  {
LABEL_67:
    __break(1u);
    return;
  }
  int8x8_t v5 = (const std::runtime_error *)(v4 + 8);
  char v6 = *(unsigned char *)(v4 + 80);
  if (v6)
  {
    v33.__vftable = *(std::runtime_error_vtbl **)(v4 + 8);
    unint64_t v7 = &v33.__imp_;
    unint64_t v8 = (const char **)(v4 + 16);
  }
  else
  {
    std::runtime_error::runtime_error(&v33, v5);
    uint64_t v10 = (void *)(v4 + 48);
    uint64_t v11 = *(void *)(v4 + 48);
    long long v34 = *(_OWORD *)(v4 + 24);
    unint64_t v12 = *(uint64_t **)(v4 + 40);
    v33.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v35 = v12;
    uint64_t v36 = v11;
    uint64_t v37 = *(void *)(v4 + 56);
    if (v37)
    {
      *(void *)(v11 + 16) = &v36;
      *(void *)(v4 + 40) = v10;
      void *v10 = 0;
      *(void *)(v4 + 56) = 0;
    }
    else
    {
      uint64_t v35 = &v36;
    }
    uint64_t v24 = *(void *)(v4 + 64);
    long long v23 = (const std::runtime_error *)(v4 + 64);
    uint64_t v38 = v24;
    unint64_t v7 = (std::__libcpp_refstring *)&v39;
    unint64_t v8 = &v23->__imp_.__imp_;
    int8x8_t v5 = v23;
  }
  v7->__imp_ = *v8;
  v5->__vftable = 0;
  v5->__imp_.__imp_ = 0;
  char v40 = v6;
  uint64_t v25 = a2[3];
  if (!v25) {
    std::__throw_bad_function_call[abi:fe180100]();
  }
  (*(void (**)(uint64_t, std::runtime_error *))(*(void *)v25 + 48))(v25, &v33);
  if (!v40)
  {
    ((void (*)(std::runtime_error *))v33.~runtime_error)(&v33);
    goto LABEL_61;
  }
  std::string::size_type v26 = (std::__shared_weak_count *)v33.__imp_.__imp_;
  if (v33.__imp_.__imp_) {
    goto LABEL_59;
  }
LABEL_61:
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_18DB4EF34(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>,std::__unordered_map_hasher<AMSCore::HTTPRequest::CacheKey,std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>,AMSCore::HTTPRequest::CacheKey::Hasher,std::equal_to<AMSCore::HTTPRequest::CacheKey>,true>,std::__unordered_map_equal<AMSCore::HTTPRequest::CacheKey,std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>,std::equal_to<AMSCore::HTTPRequest::CacheKey>,AMSCore::HTTPRequest::CacheKey::Hasher,true>,std::allocator<std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>>>::__emplace_unique_key_args<AMSCore::HTTPRequest::CacheKey,AMSCore::HTTPRequest::CacheKey&,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared&>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v9 = AMSCore::HTTPRequest::CacheKey::Hasher::hash(a2, *(_DWORD *)(a2 + 24), (AMSCore::URL *)(a2 + 32));
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    unint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      long long v54 = a4;
      uint64_t v15 = *v14;
      if (*v14)
      {
        uint64_t v52 = (unsigned __int8 **)(a2 + 64);
        uint64_t v53 = (unsigned __int8 **)(a2 + 160);
        int v50 = (unsigned __int8 **)(a2 + 128);
        std::string::size_type v51 = (unsigned __int8 **)(a2 + 96);
        uint64_t v49 = (unsigned __int8 **)(a2 + 136);
        char v16 = *(unsigned char *)(a2 + 23);
        if (v16 >= 0) {
          size_t v17 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          size_t v17 = *(void *)(a2 + 8);
        }
        if (v16 >= 0) {
          unint64_t v18 = (const void *)a2;
        }
        else {
          unint64_t v18 = *(const void **)a2;
        }
        int v19 = *(_DWORD *)(a2 + 24);
        do
        {
          unint64_t v20 = v15[1];
          if (v20 == v10)
          {
            uint64_t v21 = *((unsigned __int8 *)v15 + 39);
            int v22 = (char)v21;
            if ((v21 & 0x80u) != 0) {
              uint64_t v21 = v15[3];
            }
            if (v21 == v17)
            {
              long long v23 = v22 >= 0 ? v15 + 2 : (uint64_t *)v15[2];
              if (!memcmp(v23, v18, v17) && *((_DWORD *)v15 + 10) == v19)
              {
                char v56 = (const void **)(v15 + 22);
                char v57 = v15 + 10;
                uint64_t v58 = v15 + 14;
                uint64_t v59 = v15 + 18;
                uint64_t v60 = v15 + 19;
                v55[0] = v53;
                v55[1] = v52;
                v55[2] = v51;
                std::string v55[3] = v50;
                v55[4] = v49;
                if (std::__tuple_equal<5ul>::operator()[abi:fe180100]<std::tuple<std::string const&,std::optional<std::string> const&,std::optional<std::string> const&,std::optional<unsigned short> const&,AMSCore::OrderedMap<std::string,std::string> const&>,std::tuple<std::string const&,std::optional<std::string> const&,std::optional<std::string> const&,std::optional<unsigned short> const&,AMSCore::OrderedMap<std::string,std::string> const&>>(&v56, v55))
                {
                  return;
                }
              }
            }
          }
          else
          {
            if (v13 <= 1)
            {
              v20 &= v11 - 1;
            }
            else if (v20 >= v11)
            {
              v20 %= v11;
            }
            if (v20 != v4) {
              break;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
      a4 = v54;
    }
  }
  uint64_t v24 = (void *)(a1 + 16);
  uint64_t v25 = (char *)operator new(0xD8uLL);
  std::string::size_type v26 = v25;
  char v56 = (const void **)v25;
  char v57 = (uint64_t *)(a1 + 16);
  LOBYTE(v58) = 0;
  *(void *)uint64_t v25 = 0;
  *((void *)v25 + 1) = v10;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v25 + 16), *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v25 + 1) = *(_OWORD *)a3;
    *((void *)v25 + 4) = *(void *)(a3 + 16);
  }
  *((_DWORD *)v26 + 10) = *(_DWORD *)(a3 + 24);
  AMSCore::URL::URL((std::string *)v26 + 2, (const AMSCore::URL *)(a3 + 32));
  uint64_t v27 = a4[1];
  *((void *)v26 + 25) = *a4;
  *((void *)v26 + 26) = v27;
  if (v27) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
  }
  LOBYTE(v58) = 1;
  float v28 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v29 = *(float *)(a1 + 32);
  if (!v11 || (float)(v29 * (float)v11) < v28)
  {
    BOOL v30 = 1;
    if (v11 >= 3) {
      BOOL v30 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v31 = v30 | (2 * v11);
    unint64_t v32 = vcvtps_u32_f32(v28 / v29);
    if (v31 <= v32) {
      int8x8_t prime = (int8x8_t)v32;
    }
    else {
      int8x8_t prime = (int8x8_t)v31;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    if (*(void *)&prime > v11) {
      goto LABEL_51;
    }
    if (*(void *)&prime < v11)
    {
      unint64_t v40 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v41 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        unint64_t v40 = std::__next_prime(v40);
      }
      else
      {
        uint64_t v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2) {
          unint64_t v40 = v42;
        }
      }
      if (*(void *)&prime <= v40) {
        int8x8_t prime = (int8x8_t)v40;
      }
      if (*(void *)&prime >= v11)
      {
        unint64_t v11 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_51:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:fe180100]();
          }
          long long v34 = operator new(8 * *(void *)&prime);
          uint64_t v35 = *(void **)a1;
          *(void *)a1 = v34;
          if (v35) {
            operator delete(v35);
          }
          uint64_t v36 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v36++) = 0;
          while (*(void *)&prime != v36);
          uint64_t v37 = (void *)*v24;
          if (*v24)
          {
            unint64_t v38 = v37[1];
            uint8x8_t v39 = (uint8x8_t)vcnt_s8(prime);
            v39.i16[0] = vaddlv_u8(v39);
            if (v39.u32[0] > 1uLL)
            {
              if (v38 >= *(void *)&prime) {
                v38 %= *(void *)&prime;
              }
            }
            else
            {
              v38 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v38) = v24;
            uint64_t v43 = (void *)*v37;
            if (*v37)
            {
              do
              {
                unint64_t v45 = v43[1];
                if (v39.u32[0] > 1uLL)
                {
                  if (v45 >= *(void *)&prime) {
                    v45 %= *(void *)&prime;
                  }
                }
                else
                {
                  v45 &= *(void *)&prime - 1;
                }
                if (v45 != v38)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v45))
                  {
                    *(void *)(*(void *)a1 + 8 * v45) = v37;
                    goto LABEL_71;
                  }
                  void *v37 = *v43;
                  uint64_t v44 = 8 * v45;
                  *uint64_t v43 = **(void **)(*(void *)a1 + v44);
                  **(void **)(*(void *)a1 + v44) = v43;
                  uint64_t v43 = v37;
                }
                unint64_t v45 = v38;
LABEL_71:
                uint64_t v37 = v43;
                uint64_t v43 = (void *)*v43;
                unint64_t v38 = v45;
              }
              while (v43);
            }
          }
          unint64_t v11 = (unint64_t)prime;
          goto LABEL_80;
        }
        uint64_t v48 = *(void **)a1;
        *(void *)a1 = 0;
        if (v48) {
          operator delete(v48);
        }
        unint64_t v11 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_80:
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v46 = *(const void ***)(*(void *)a1 + 8 * v4);
  if (v46)
  {
    unsigned int *v56 = *v46;
    _OWORD *v46 = v56;
  }
  else
  {
    unsigned int *v56 = *(const void **)(a1 + 16);
    *(void *)(a1 + 16) = v56;
    *(void *)(*(void *)a1 + 8 * v4) = v24;
    if (*v56)
    {
      unint64_t v47 = *((void *)*v56 + 1);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v47 >= v11) {
          v47 %= v11;
        }
      }
      else
      {
        v47 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v47) = v56;
    }
  }
  ++*(void *)(a1 + 24);
}

void sub_18DB4F4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>,void *>>>>::~unique_ptr[abi:fe180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>,std::__unordered_map_hasher<AMSCore::HTTPRequest::CacheKey,std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>,AMSCore::HTTPRequest::CacheKey::Hasher,std::equal_to<AMSCore::HTTPRequest::CacheKey>,true>,std::__unordered_map_equal<AMSCore::HTTPRequest::CacheKey,std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>,std::equal_to<AMSCore::HTTPRequest::CacheKey>,AMSCore::HTTPRequest::CacheKey::Hasher,true>,std::allocator<std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>>>::erase(void *a1, char *a2)
{
  int8x8_t v3 = (int8x8_t)a1[1];
  unint64_t v4 = *((void *)a2 + 1);
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  char v6 = *(char **)(*a1 + 8 * v4);
  do
  {
    unint64_t v7 = v6;
    char v6 = *(char **)v6;
  }
  while (v6 != a2);
  if (v7 == (char *)(a1 + 2)) {
    goto LABEL_18;
  }
  unint64_t v8 = *((void *)v7 + 1);
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*(void *)a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*(void *)a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*a1 + 8 * v4) = 0;
  }
  uint64_t v10 = *(void *)a2;
  if (*(void *)a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*a1 + 8 * v11) = v7;
      uint64_t v10 = *(void *)a2;
    }
  }
  *(void *)unint64_t v7 = v10;
  *(void *)a2 = 0;
  --a1[3];
  uint8x8_t v12 = (std::__shared_weak_count *)*((void *)a2 + 26);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  AMSCore::URL::~URL((AMSCore::URL *)(a2 + 48));
  if (a2[39] < 0) {
    operator delete(*((void **)a2 + 2));
  }
  operator delete(a2);
}

void AMSCore::HTTPRequest::CacheKey::~CacheKey(void **this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>,void *>>>>::~unique_ptr[abi:fe180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      int8x8_t v3 = *(std::__shared_weak_count **)(v2 + 208);
      if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
      AMSCore::URL::~URL((AMSCore::URL *)(v2 + 48));
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void *std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::then(std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &)#1},std::allocator<std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &>,std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&>::target_type()
{
}

uint64_t std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::then(std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &)#1},std::allocator<std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &>,std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNO7AMSCore4TaskINSt3__110shared_ptrIKNS_12HTTPResponseEEENS_5ErrorEE4thenEONS1_8functionIFvONS1_8e"
                     "xpectedIS5_S6_EEEEEEUlSB_E_"
    || ((v3 & (unint64_t)"ZNO7AMSCore4TaskINSt3__110shared_ptrIKNS_12HTTPResponseEEENS_5ErrorEE4thenEONS1_8functio"
                                "nIFvONS1_8expectedIS5_S6_EEEEEEUlSB_E_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNO7AMSCore4TaskINSt3__110shared_ptrIKNS_12HTTPResponseEEENS_5ErrorEE4thenEONS1_8functionIFvONS1_8expectedIS5_S6_EEEEEEUlSB_E_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNO7AMSCore4TaskINSt3__110shared_ptrIKNS_12HTTPResponseEEENS_5ErrorEE4thenEONS1_8functionIFvONS1_8expectedIS5_S6_EEEEEEUlSB_E_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::then(std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &)#1},std::allocator<std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &>,std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&>::operator()(void *a1)
{
  uint64_t v2 = a1[6];
  if (!v2) {
    std::__throw_bad_function_call[abi:fe180100]();
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  unint64_t v3 = (std::__shared_weak_count *)a1[2];
  a1[1] = 0;
  a1[2] = 0;
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::then(std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &)#1},std::allocator<std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &>,std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&>::destroy_deallocate(char *__p)
{
  uint64_t v2 = __p + 24;
  unint64_t v3 = (char *)*((void *)__p + 6);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    unint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 2);
    if (!v4) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  if (v3) {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 2);
  if (v4)
  {
LABEL_7:
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
LABEL_9:
  operator delete(__p);
}

void std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::then(std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &)#1},std::allocator<std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &>,std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&>::destroy(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    unint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v4) {
      return;
    }
    goto LABEL_7;
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
LABEL_7:
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::then(std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &)#1},std::allocator<std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &>,std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&>::__clone(void *a1, void *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  *a2 = &unk_1EDC83398;
  a2[1] = v4;
  a2[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint8x8_t v5 = (void *)a1[6];
  if (v5)
  {
    if (v5 == a1 + 3)
    {
      a2[6] = a2 + 3;
      return (*(uint64_t (**)(void))(*(void *)a1[6] + 24))(a1[6]);
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(void))(*v5 + 16))(a1[6]);
      a2[6] = result;
    }
  }
  else
  {
    uint64_t result = 0;
    a2[6] = 0;
  }
  return result;
}

void sub_18DB4FB44(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::then(std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &)#1},std::allocator<std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &>,std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&>::__clone(void *a1)
{
  uint64_t v2 = operator new(0x38uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  void *v2 = &unk_1EDC83398;
  v2[1] = v4;
  v2[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a1[6];
  if (v5)
  {
    if ((void *)v5 == a1 + 3)
    {
      v2[6] = v2 + 3;
      (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
      return v2;
    }
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  }
  v2[6] = v5;
  return v2;
}

void sub_18DB4FC70(_Unwind_Exception *a1)
{
  uint64_t v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::then(std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &)#1},std::allocator<std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &>,std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&>::~__func(void *a1)
{
  *a1 = &unk_1EDC83398;
  uint64_t v2 = a1 + 3;
  uint64_t v3 = (void *)a1[6];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    uint64_t v4 = (std::__shared_weak_count *)a1[2];
    if (!v4) {
      goto LABEL_9;
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(void *))(*v3 + 40))(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)a1[2];
    if (!v4)
    {
LABEL_9:
      JUMPOUT(0x192FA4080);
    }
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  goto LABEL_9;
}

void *std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::then(std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &)#1},std::allocator<std::function<void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)> &>,std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&>::~__func(void *a1)
{
  *a1 = &unk_1EDC83398;
  uint64_t v2 = a1 + 3;
  uint64_t v3 = (void *)a1[6];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    uint64_t v4 = (std::__shared_weak_count *)a1[2];
    if (!v4) {
      return a1;
    }
    goto LABEL_7;
  }
  if (v3) {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
LABEL_7:
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void *std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::Shared(AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>&&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)#1},std::allocator<std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &>,void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>)>::target_type()
{
}

uint64_t std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::Shared(AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>&&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)#1},std::allocator<std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &>,void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINSt3__110shared_ptrIKNS_12HTTPResponseEEENS_5ErrorEE6SharedC1EOS7_EUlONS1_8expectedIS5_S6_EEE_"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINSt3__110shared_ptrIKNS_12HTTPResponseEEENS_5ErrorEE6SharedC1EOS7_EUlONS"
                                "1_8expectedIS5_S6_EEE_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINSt3__110shared_ptrIKNS_12HTTPResponseEEENS_5ErrorEE6SharedC1EOS7_EUlONS1_8expectedIS5_S6_EEE_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINSt3__110shared_ptrIKNS_12HTTPResponseEEENS_5ErrorEE6SharedC1EOS7_EUlONS1_8expectedIS5_S6_EEE_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::Shared(AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>&&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)#1},std::allocator<std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &>,void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>)>::operator()(uint64_t a1, std::runtime_error *a2)
{
  uint64_t v4 = *(std::mutex **)(a1 + 8);
  std::mutex::lock(v4);
  std::optional<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>,void>((std::runtime_error *)(*(void *)(a1 + 8) + 64), a2);
  uint64_t v5 = *(void **)(a1 + 8);
  char v6 = (void (***)(void))v5[19];
  unint64_t v7 = (void (***)(void))v5[20];
  v5[20] = 0;
  v5[21] = 0;
  v5[19] = 0;
  std::mutex::unlock(v4);
  if (v6 != v7)
  {
    unint64_t v8 = v6;
    do
      (**v8++)();
    while (v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::Shared(AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>&&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)#1},std::allocator<std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &>,void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::Shared(AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>&&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)#1},std::allocator<std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &>,void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::Shared(AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>&&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)#1},std::allocator<std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &>,void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1EDC832E8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::Shared(AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>&&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)#1},std::allocator<std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &>,void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1EDC832E8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::Shared(AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>&&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)#1},std::allocator<std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &>,void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>)>::~__func(void *a1)
{
  *a1 = &unk_1EDC832E8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x192FA4080);
}

void *std::__function::__func<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::Shared(AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>&&)::{lambda(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &&)#1},std::allocator<std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error> &>,void ()(std::expected<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>)>::~__func(void *a1)
{
  *a1 = &unk_1EDC832E8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::Context,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::Context>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 176);
  if (v2)
  {
    *(void *)(a1 + 184) = v2;
    operator delete(v2);
  }
  if (*(unsigned char *)(a1 + 168))
  {
    if (*(unsigned char *)(a1 + 160))
    {
      uint64_t v3 = *(std::__shared_weak_count **)(a1 + 96);
      if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    else
    {
      (**(void (***)(void))(a1 + 88))();
    }
  }
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

void std::__shared_ptr_emplace<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::Context,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::Context>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC84208;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::Context,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared::Context>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC84208;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AMSCore::HTTPCacheProvider::downloadAndUpdateCacheInner(uint64_t a1, std::string *a2, size_t a3)
{
  unint64_t v7 = *(__n128 **)(a1 + 1776);
  if (!v7[27].n128_u8[0]) {
    goto LABEL_44;
  }
  uint64_t v4 = a1;
  uint64_t v5 = a1 + 152;
  unint64_t v8 = &v7->n128_u64[1];
  unsigned __int8 v9 = v7[26].n128_u8[8];
  if (v9)
  {
    *(__n128 *)(a1 + 152) = *(__n128 *)((char *)v7 + 8);
    unint64_t *v8 = 0;
    v7[1].n128_u64[0] = 0;
    AMSCore::ExecuteHTTPRequestTask::Options::Options(a1 + 168, (uint64_t)&v7[1].n128_i64[1]);
    __n128 v10 = v7[12];
    *(__n128 *)(v4 + 336) = v10;
    v7[12].n128_u64[0] = 0;
    v7[12].n128_u64[1] = 0;
  }
  else
  {
    __n128 v10 = std::__expected_base<AMSCore::HTTPResponse,AMSCore::HTTPError>::__union_t::__union_t[abi:fe180100]<AMSCore::HTTPError>((std::runtime_error *)(a1 + 152), (uint64_t)v8);
  }
  *(unsigned char *)(v4 + 568) = v9;
  uint64_t v11 = *(void *)(v4 + 1784);
  if (v11 && !atomic_fetch_add((atomic_ullong *volatile)(v11 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint8x8_t v12 = *(std::__shared_weak_count **)(v4 + 1784);
    ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, v10);
    std::__shared_weak_count::__release_weak(v12);
  }
  LOBYTE(v7) = v4 - 64;
  unint64_t v13 = *(std::__shared_weak_count **)(v4 + 1744);
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v10);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v6 = v4 + 16;
  AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(v4 + 1512));
  unint64_t v14 = *(std::__shared_weak_count **)(v4 + 1336);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)(v4 + 960));
  if (*(unsigned char *)(v4 + 568))
  {
LABEL_15:
    uint64_t v15 = *(void *)(v4 + 336);
    if (*(_WORD *)(v15 + 152) != 200)
    {
      LOWORD(v36.__r_.__value_.__l.__data_) = *(_WORD *)(v15 + 152);
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&__p);
      AMSCore::Logger::log<char [49],AMSCore::HTTPResponse::StatusCode>((uint64_t)__p.__vftable);
      int imp = (std::__shared_weak_count *)__p.__imp_.__imp_;
      if (__p.__imp_.__imp_ && !atomic_fetch_add((atomic_ullong *volatile)__p.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
        std::__shared_weak_count::__release_weak(imp);
      }
      goto LABEL_55;
    }
    char v33 = 4;
    strcpy((char *)&__p, "ETag");
    AMSCore::IHTTPHeaderMap::getSingleValueOrNone(&v36, (void *)(v15 + 160), (char *)&__p);
    if (v33 < 0) {
      operator delete(__p.__vftable);
    }
    if (!*(unsigned char *)(v4 + 1704) || !v37) {
      goto LABEL_46;
    }
    uint64_t v16 = *(unsigned __int8 *)(v4 + 1703);
    a3 = *(void *)(v4 + 1688);
    if ((v16 & 0x80u) == 0) {
      uint64_t v17 = *(unsigned __int8 *)(v4 + 1703);
    }
    else {
      uint64_t v17 = *(void *)(v4 + 1688);
    }
    std::string::size_type size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    LOBYTE(v7) = *((unsigned char *)&v36.__r_.__value_.__s + 23);
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v36.__r_.__value_.__l.__size_;
    }
    if (v17 != size)
    {
LABEL_46:
      uint64_t v21 = *(void *)(*(void *)(v4 + 1768) + 8);
      uint64_t v22 = *(void *)(v4 + 1752);
      uint64_t v23 = *(void *)(v4 + 336);
      v24.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      (*(void (**)(std::runtime_error *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep))(*(void *)v21 + 24))(&__p, v21, v4 + 1712, v22, v23, v24.__d_.__rep_);
      if (!v34)
      {
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v30);
        AMSCore::Logger::log<char [26],AMSCore::Error>(v30, (uint64_t)&__p);
        uint64_t v25 = v31;
        if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
        if (!v34) {
          ((void (*)(std::runtime_error *))__p.~runtime_error)(&__p);
        }
      }
      LOBYTE(v7) = *((unsigned char *)&v36.__r_.__value_.__s + 23);
      if (!v37) {
        goto LABEL_55;
      }
      goto LABEL_53;
    }
    uint64_t v3 = (const void **)(v4 + 1680);
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      a2 = &v36;
    }
    else {
      a2 = (std::string *)v36.__r_.__value_.__r.__words[0];
    }
    if ((v16 & 0x80) == 0)
    {
      if (*(unsigned char *)(v4 + 1703))
      {
        while (*(unsigned __int8 *)v3 == a2->__r_.__value_.__s.__data_[0])
        {
          uint64_t v3 = (const void **)((char *)v3 + 1);
          a2 = (std::string *)((char *)a2 + 1);
          if (!--v16) {
            goto LABEL_53;
          }
        }
        goto LABEL_46;
      }
LABEL_53:
      if ((v7 & 0x80) != 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
LABEL_55:
      if (*(unsigned char *)(v4 + 104))
      {
        if (*(unsigned char *)(v4 + 96))
        {
          std::string::size_type v26 = *(std::__shared_weak_count **)(v4 + 32);
          if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        else
        {
          (**(void (***)(void))(v4 + 24))();
        }
        *(unsigned char *)(v4 + 104) = 0;
      }
      uint64_t v27 = *(void *)(v4 + 344);
      *(void *)(v4 + 24) = *(void *)(v4 + 336);
      *(void *)(v4 + 32) = v27;
      if (v27) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
      }
      *(unsigned char *)(v4 + 96) = 1;
      *(unsigned char *)(v4 + 104) = 1;
      goto LABEL_65;
    }
LABEL_45:
    if (memcmp(*v3, a2, a3)) {
      goto LABEL_46;
    }
    goto LABEL_53;
  }
  std::__optional_destruct_base<AMSCore::HTTPError,false>::__optional_destruct_base[abi:fe180100]<AMSCore::HTTPError>(&__p, v5);
  if (!v35)
  {
    if (*(unsigned char *)(v4 + 568)) {
      goto LABEL_15;
    }
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v36, (uint64_t)&__p);
  std::optional<std::expected<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(v4 + 24), (std::runtime_error *)&v36);
  v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EDC827D8;
  unint64_t v20 = v39;
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v38, v38[1]);
  MEMORY[0x192FA3C30](&v36);
  if (v35) {
    AMSCore::HTTPError::~HTTPError((AMSCore::HTTPError *)&__p);
  }
LABEL_65:
  std::__expected_base<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::__repr::__destroy_union_member[abi:fe180100](v5);
  float v28 = *(std::__shared_weak_count **)(v4 + 1760);
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  *(void *)(v4 + 152) = v6;
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 1792) = 1;
  return AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::Awaiter::await_suspend(v5);
}

void sub_18DB509B4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (**a11)(void), uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a9);
  if (!a20) {
    (*a11)(&a11);
  }
  if (v22)
  {
    if (*(char *)(v23 - 129) < 0) {
      operator delete(*(void **)(v23 - 152));
    }
  }
  std::__expected_base<AMSCore::ExecuteHTTPRequestTask::Result,AMSCore::HTTPError>::__repr::__destroy_union_member[abi:fe180100](v21);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v20 + 1752);
  __cxa_begin_catch(a1);
  AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DB50A50()
{
}

void sub_18DB50A58(_Unwind_Exception *a1)
{
  *(void *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 1792) = 1;
  _Unwind_Resume(a1);
}

void AMSCore::HTTPCacheProvider::downloadAndUpdateCacheInner(uint64_t a1)
{
  uint64_t v2 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 1344);
  uint64_t v3 = a1 + 16;
  if ((*(unsigned char *)(a1 + 1792) & 1) == 0)
  {
    uint64_t v4 = *(void *)(a1 + 1784);
    if (v4 && !atomic_fetch_add((atomic_ullong *volatile)(v4 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v5 = *(std::__shared_weak_count **)(a1 + 1784);
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 1744);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 1512));
    unint64_t v7 = *(std::__shared_weak_count **)(a1 + 1336);
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)(a1 + 960));
    unint64_t v8 = *(std::__shared_weak_count **)(a1 + 1760);
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::~Promise(v3);
  if (*(unsigned char *)(a1 + 1704) && *(char *)(a1 + 1703) < 0) {
    operator delete(*(void **)(a1 + 1680));
  }
  AMSCore::ExecuteHTTPRequestTask::Options::~Options(v2);
  unsigned __int8 v9 = *(std::__shared_weak_count **)(a1 + 952);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)(a1 + 576));
  if (*(char *)(a1 + 1735) < 0) {
    operator delete(*(void **)(a1 + 1712));
  }
  operator delete((void *)a1);
}

uint64_t AMSCore::Logger::log<char [26],AMSCore::Error>(uint64_t result, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= 4u)
  {
    uint64_t v3 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v8);
    uint64_t v4 = *(void *)(v8[0] - 24);
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)"failed to update database", 25);
    AMSCore::operator<<(v8, a2);
    uint64_t v5 = v8[6];
    uint64_t v6 = (char *)v8 + *(void *)(v8[0] - 24);
    if ((v6[32] & 5) != 0)
    {
      uint64_t v7 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v6 + 5) + 32))(&rep);
      uint64_t v7 = v15;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v12 = 4;
    uint64_t v13 = v5;
    uint64_t v14 = v7;
    (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v3 + 16) + 16))(*(void *)(v3 + 16), "data", 4, &rep);
    v8[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v8 + *(void *)(v8[0] - 2AMSCore::URL::~URL((AMSCore::URL *)(this + 4)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v8[1] = MEMORY[0x1E4FBA470] + 16;
    if (v9 < 0) {
      operator delete((void *)v8[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v10);
  }
  return result;
}

void sub_18DB50F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Logger::log<char [49],AMSCore::HTTPResponse::StatusCode>(uint64_t result)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= 4u)
  {
    uint64_t v1 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v6);
    uint64_t v2 = *(void *)(v6[0] - 24);
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v6, (uint64_t)"failed to update http cache due to status code: ", 48);
    std::ostream::operator<<();
    uint64_t v3 = v6[6];
    uint64_t v4 = (char *)v6 + *(void *)(v6[0] - 24);
    if ((v4[32] & 5) != 0)
    {
      uint64_t v5 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v4 + 5) + 32))(&rep);
      uint64_t v5 = v13;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v10 = 4;
    uint64_t v11 = v3;
    uint64_t v12 = v5;
    (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v1 + 16) + 16))(*(void *)(v1 + 16), "data", 4, &rep);
    v6[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v6 + *(void *)(v6[0] - 2AMSCore::URL::~URL((AMSCore::URL *)(this + 4)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v6[1] = MEMORY[0x1E4FBA470] + 16;
    if (v7 < 0) {
      operator delete((void *)v6[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v8);
  }
  return result;
}

void sub_18DB51208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::HTTPCacheProvider::getCachedAllowStale(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(std::runtime_error *__return_ptr))(**(void **)(a1 + 8) + 16))(&v20);
  if (v28)
  {
    uint64_t v3 = operator new(0x2A8uLL);
    v3[1] = 0;
    v3[2] = 0;
    *uint64_t v3 = &unk_1EDC83AD0;
    *(void *)a2 = AMSCore::HTTPResponse::HTTPResponse((uint64_t)(v3 + 3), (long long *)&v20);
    *(void *)(a2 + 8) = v3;
    *(unsigned char *)(a2 + 72) = 1;
  }
  else
  {
    std::runtime_error::runtime_error(&v14, &v20);
    long long v15 = v21;
    v14.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v16 = v22;
    v17[0] = (unsigned int *)v23;
    v17[1] = v24;
    if (v24)
    {
      *(void *)(v23 + 16) = v17;
      int v22 = (unsigned int **)&v23;
      uint64_t v23 = 0;
      std::chrono::system_clock::time_point v24 = 0;
    }
    else
    {
      uint64_t v16 = v17;
    }
    long long v18 = v25;
    long long v25 = 0uLL;
    char v19 = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v8, (uint64_t)&v14);
    std::runtime_error::runtime_error((std::runtime_error *)a2, &v8);
    *(_OWORD *)(a2 + 16) = v9;
    *(void *)a2 = &unk_1EDC827D8;
    uint64_t v4 = v11;
    *(void *)(a2 + 32) = v10;
    *(void *)(a2 + 40) = v4;
    uint64_t v5 = a2 + 40;
    uint64_t v6 = v12;
    *(void *)(a2 + 48) = v12;
    if (v6)
    {
      *(void *)(v4 + 16) = v5;
      char v10 = &v11;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v4 = 0;
    }
    else
    {
      *(void *)(a2 + 32) = v5;
    }
    *(_OWORD *)(a2 + 56) = v13;
    long long v13 = 0uLL;
    *(unsigned char *)(a2 + 72) = 0;
    v8.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v4);
    MEMORY[0x192FA3C30](&v8);
    if (v19)
    {
      v14.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      char v7 = (std::__shared_weak_count *)*((void *)&v18 + 1);
      if (*((void *)&v18 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v16, v17[0]);
      MEMORY[0x192FA3C30](&v14);
    }
  }
  if (v28)
  {
    if (v27 < 0) {
      operator delete(__p);
    }
    AMSCore::HTTPResponse::~HTTPResponse((AMSCore::HTTPResponse *)&v20);
  }
  else
  {
    ((void (*)(std::runtime_error *))v20.~runtime_error)(&v20);
  }
}

void sub_18DB514EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
}

void **std::expected<AMSCore::IHTTPCacheDataAccessObject::CacheValue,AMSCore::Error>::~expected[abi:fe180100](void **this)
{
  if (*((unsigned char *)this + 696))
  {
    if (*((char *)this + 695) < 0) {
      operator delete(this[84]);
    }
    AMSCore::HTTPResponse::~HTTPResponse((AMSCore::HTTPResponse *)this);
  }
  else
  {
    (*(void (**)(void **))*this)(this);
  }
  return this;
}

void std::__shared_ptr_emplace<AMSCore::HTTPResponse>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<AMSCore::HTTPResponse>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83AD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::HTTPResponse>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83AD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AMSCore::HTTPCacheProvider::getCachedAllowStaleAndRefreshCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v10 = (char *)operator new(0x7E8uLL);
  *(void *)char v10 = AMSCore::HTTPCacheProvider::getCachedAllowStaleAndRefreshCache;
  *((void *)v10 + 1) = AMSCore::HTTPCacheProvider::getCachedAllowStaleAndRefreshCache;
  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)(v10 + 152), a2);
  *(_OWORD *)(v10 + 520) = *(_OWORD *)(a2 + 368);
  *(void *)(a2 + 368) = 0;
  *(void *)(a2 + 376) = 0;
  AMSCore::ExecuteHTTPRequestTask::Options::Options((uint64_t)(v10 + 1304), a3);
  *(_OWORD *)(v10 + 1944) = *(_OWORD *)a4;
  *((void *)v10 + 245) = *(void *)(a4 + 16);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  *((_OWORD *)v10 + 124) = *(_OWORD *)a6;
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  v10[24] = 0;
  v10[104] = 0;
  *((void *)v10 + 14) = 0;
  *((void *)v10 + 18) = 0;
  std::shared_ptr<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v11, (uint64_t)(v10 + 16));
}

void sub_18DB51F74(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,int a40,void *a41)
{
}

void sub_18DB52068()
{
}

void sub_18DB52074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, AMSCore::ExecuteHTTPRequestTask::Options *a14, uint64_t a15, AMSCore::EncodeHTTPRequestTask::Result *a16)
{
  AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::~Promise(v19);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v17);
  if (v16[1967] < 0) {
    operator delete(*v18);
  }
  AMSCore::ExecuteHTTPRequestTask::Options::~Options(a14);
  AMSCore::EncodeHTTPRequestTask::Result::~Result(a16);
  operator delete(v16);
  _Unwind_Resume(a1);
}

std::runtime_error *AMSCore::HTTPCacheProvider::getCachedAllowStaleAndRefreshCache(std::runtime_error *result)
{
  uint64_t v1 = result[125].__vftable;
  if (LOBYTE(v1[3].what))
  {
    uint64_t v2 = result;
    uint64_t v3 = result + 113;
    uint64_t v4 = (const std::runtime_error *)&v1->~runtime_error_0;
    char v5 = (char)v1[3].~runtime_error_0;
    if (v5)
    {
      result[113].__vftable = (std::runtime_error_vtbl *)v1->~runtime_error_0;
      p_int imp = &result[113].__imp_;
      p_what = (std::__libcpp_refstring *)&v1->what;
    }
    else
    {
      std::runtime_error::runtime_error(result + 113, v4);
      v2[114] = *(std::runtime_error *)&v1[1].~runtime_error;
      v2[113].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::runtime_error v8 = v1 + 2;
      long long v9 = v1[2].~runtime_error;
      v2[115].__vftable = (std::runtime_error_vtbl *)v1[1].what;
      char v10 = (std::runtime_error_vtbl *)&v2[115].__imp_;
      v2[115].__imp_.__imp_ = (const char *)v9;
      long long v11 = v1[2].~runtime_error_0;
      v2[116].__vftable = (std::runtime_error_vtbl *)v11;
      if (v11)
      {
        *((void *)v9 + 2) = v10;
        v1[1].what = (const char *(__cdecl *)(const std::runtime_error *__hidden))v8;
        v8->~runtime_error = 0;
        v1[2].~runtime_error_0 = 0;
      }
      else
      {
        v2[115].__vftable = v10;
      }
      uint64_t v12 = (const std::runtime_error *)v2[125].__vftable;
      long long v13 = v12[4].__vftable;
      uint64_t v4 = v12 + 4;
      v2[116].__imp_.__imp_ = (const char *)v13;
      p_int imp = (std::__libcpp_refstring *)&v2[117];
      p_what = &v4->__imp_;
    }
    p_imp->__imp_ = p_what->__imp_;
    v4->__vftable = 0;
    v4->__imp_.__imp_ = 0;
    LOBYTE(v2[117].__imp_.__imp_) = v5;
    std::optional<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>,void>((std::runtime_error *)((char *)v2 + 24), v3);
    if (LOBYTE(v2[117].__imp_.__imp_))
    {
      int imp = (std::__shared_weak_count *)v2[113].__imp_.__imp_;
      if (imp && !atomic_fetch_add(&imp->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
        std::__shared_weak_count::__release_weak(imp);
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
    }
    long long v15 = v2[125].__imp_.__imp_;
    if (v15 && !atomic_fetch_add((atomic_ullong *volatile)v15 + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v16 = (std::__shared_weak_count *)v2[125].__imp_.__imp_;
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    uint64_t v17 = (std::__shared_weak_count *)v2[123].__imp_.__imp_;
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    if (LOBYTE(v2[119].__imp_.__imp_) && SHIBYTE(v2[119].__vftable) < 0) {
      operator delete(v2[118].__vftable);
    }
    AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)&v2[92]);
    long long v18 = (std::__shared_weak_count *)v2[57].__vftable;
    if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v2[33].__imp_);
    if (SHIBYTE(v2[121].__vftable) < 0) {
      operator delete(v2[120].__vftable);
    }
    v2[113].__vftable = (std::runtime_error_vtbl *)&v2[1];
    v2->__vftable = 0;
    LOBYTE(v2[126].__vftable) = 1;
    return (std::runtime_error *)AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void AMSCore::HTTPCacheProvider::getCachedAllowStaleAndRefreshCache(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  if ((*(unsigned char *)(a1 + 2016) & 1) == 0)
  {
    uint64_t v3 = *(void *)(a1 + 2008);
    if (v3 && !atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v4 = *(std::__shared_weak_count **)(a1 + 2008);
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    char v5 = *(std::__shared_weak_count **)(a1 + 1976);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    if (*(unsigned char *)(a1 + 1912) && *(char *)(a1 + 1911) < 0) {
      operator delete(*(void **)(a1 + 1888));
    }
    AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 1472));
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 912);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)(a1 + 536));
    if (*(char *)(a1 + 1943) < 0) {
      operator delete(*(void **)(a1 + 1920));
    }
  }
  AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::~Promise(v2);
  char v7 = *(std::__shared_weak_count **)(a1 + 1992);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if ((*(char *)(a1 + 1967) & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (*(char *)(a1 + 1967) < 0) {
LABEL_19:
  }
    operator delete(*(void **)(a1 + 1944));
LABEL_20:
  AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 1304));
  std::runtime_error v8 = *(std::__shared_weak_count **)(a1 + 528);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)(a1 + 152));
  operator delete((void *)a1);
}

void AMSCore::HTTPCacheProvider::~HTTPCacheProvider(AMSCore::HTTPCacheProvider *this)
{
  AMSCore::HTTPCacheProvider::~HTTPCacheProvider(this);
  JUMPOUT(0x192FA4080);
}

{
  std::__shared_weak_count *v2;
  AMSCore::HTTPCacheProvider *v3;
  uint64_t v4;
  uint64_t v5;
  AMSCore::HTTPCacheProvider *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;

  *(void *)this = &unk_1EDC81FF0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  std::__hash_table<std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>,std::__unordered_map_hasher<AMSCore::HTTPRequest::CacheKey,std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>,AMSCore::HTTPRequest::CacheKey::Hasher,std::equal_to<AMSCore::HTTPRequest::CacheKey>,true>,std::__unordered_map_equal<AMSCore::HTTPRequest::CacheKey,std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>,std::equal_to<AMSCore::HTTPRequest::CacheKey>,AMSCore::HTTPRequest::CacheKey::Hasher,true>,std::allocator<std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>>>::~__hash_table((uint64_t)this + 136);
  if (*((void *)this + 16))
  {
    uint64_t v4 = *((void *)this + 14);
    uint64_t v3 = (AMSCore::HTTPCacheProvider *)*((void *)this + 15);
    char v5 = *(void *)v3;
    *(void *)(v5 + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = v5;
    *((void *)this + 16) = 0;
    if (v3 != (AMSCore::HTTPCacheProvider *)((char *)this + 112))
    {
      do
      {
        uint64_t v6 = (AMSCore::HTTPCacheProvider *)*((void *)v3 + 1);
        operator delete(v3);
        uint64_t v3 = v6;
      }
      while (v6 != (AMSCore::HTTPCacheProvider *)((char *)this + 112));
    }
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 40));
  char v7 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    std::runtime_error v8 = (std::__shared_weak_count *)*((void *)this + 2);
    if (!v8) {
      return;
    }
  }
  else
  {
    std::runtime_error v8 = (std::__shared_weak_count *)*((void *)this + 2);
    if (!v8) {
      return;
    }
  }
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>,std::__unordered_map_hasher<AMSCore::HTTPRequest::CacheKey,std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>,AMSCore::HTTPRequest::CacheKey::Hasher,std::equal_to<AMSCore::HTTPRequest::CacheKey>,true>,std::__unordered_map_equal<AMSCore::HTTPRequest::CacheKey,std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>,std::equal_to<AMSCore::HTTPRequest::CacheKey>,AMSCore::HTTPRequest::CacheKey::Hasher,true>,std::allocator<std::__hash_value_type<AMSCore::HTTPRequest::CacheKey,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Shared>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = *(char **)v2;
      uint64_t v4 = (std::__shared_weak_count *)*((void *)v2 + 26);
      if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      AMSCore::URL::~URL((AMSCore::URL *)(v2 + 48));
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  char v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void *std::__function::__func<AMSCore::anonymous namespace'::makeObserver(std::shared_ptr<AMSCore::IHTTPCacheDataAccessObject>)::$_0,std::allocator<AMSCore::anonymous namespace'::makeObserver(std::shared_ptr<AMSCore::IHTTPCacheDataAccessObject>)::$_0>,void ()(std::string const&,AMSCore::AccountChangedMetadata)>::target_type()
{
}

uint64_t std::__function::__func<AMSCore::anonymous namespace'::makeObserver(std::shared_ptr<AMSCore::IHTTPCacheDataAccessObject>)::$_0,std::allocator<AMSCore::anonymous namespace'::makeObserver(std::shared_ptr<AMSCore::IHTTPCacheDataAccessObject>)::$_0>,void ()(std::string const&,AMSCore::AccountChangedMetadata)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore12_GLOBAL__N_112makeObserverENSt3__110shared_ptrINS_26IHTTPCacheDataAccessObjectEEEE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore12_GLOBAL__N_112makeObserverENSt3__110shared_ptrINS_26IHTTPCacheDataAccessObjectEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore12_GLOBAL__N_112makeObserverENSt3__110shared_ptrINS_26IHTTPCacheDataAccessObjectEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore12_GLOBAL__N_112makeObserverENSt3__110shared_ptrINS_26IHTTPCacheDataAccessObjectEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMSCore::anonymous namespace'::makeObserver(std::shared_ptr<AMSCore::IHTTPCacheDataAccessObject>)::$_0,std::allocator<AMSCore::anonymous namespace'::makeObserver(std::shared_ptr<AMSCore::IHTTPCacheDataAccessObject>)::$_0>,void ()(std::string const&,AMSCore::AccountChangedMetadata)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (*a3 == 2)
  {
    (*(void (**)(void *__return_ptr))(**(void **)(a1 + 8) + 32))(v5);
    if (!v6)
    {
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v7);
      AMSCore::Logger::log<char [36],std::string>(v7, 4u, (uint64_t)"accounts", 8, "failed to delete account image for ", a2);
      uint64_t v4 = v8;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      if (!v6) {
        (*(void (**)(void *))v5[0])(v5);
      }
    }
  }
}

void sub_18DB529A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void (**a9)(void), uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  std::runtime_error v20 = *(std::__shared_weak_count **)(v18 - 24);
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  if (!a18) {
    (*a9)(&a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Logger::log<char [36],std::string>(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= a2)
  {
    char v10 = a2;
    uint64_t v11 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v20);
    uint64_t v12 = *(void *)(v20[0] - 24);
    {
    }
    size_t v13 = strlen(a5);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v20, (uint64_t)a5, v13);
    int v14 = *(char *)(a6 + 23);
    if (v14 >= 0) {
      uint64_t v15 = a6;
    }
    else {
      uint64_t v15 = *(void *)a6;
    }
    if (v14 >= 0) {
      uint64_t v16 = *(unsigned __int8 *)(a6 + 23);
    }
    else {
      uint64_t v16 = *(void *)(a6 + 8);
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v20, v15, v16);
    uint64_t v17 = v20[6];
    uint64_t v18 = (char *)v20 + *(void *)(v20[0] - 24);
    if ((v18[32] & 5) != 0)
    {
      uint64_t v19 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v18 + 5) + 32))(&rep);
      uint64_t v19 = v27;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v24 = v10;
    uint64_t v25 = v17;
    uint64_t v26 = v19;
    (*(void (**)(void, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v11 + 16) + 16))(*(void *)(v11 + 16), a3, a4, &rep);
    v20[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v20 + *(void *)(v20[0] - 2AMSCore::URL::~URL((AMSCore::URL *)(this + 4)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v20[1] = MEMORY[0x1E4FBA470] + 16;
    if (v21 < 0) {
      operator delete((void *)v20[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v22);
  }
  return result;
}

void sub_18DB52CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMSCore::anonymous namespace'::makeObserver(std::shared_ptr<AMSCore::IHTTPCacheDataAccessObject>)::$_0,std::allocator<AMSCore::anonymous namespace'::makeObserver(std::shared_ptr<AMSCore::IHTTPCacheDataAccessObject>)::$_0>,void ()(std::string const&,AMSCore::AccountChangedMetadata)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void *std::__function::__func<AMSCore::anonymous namespace'::makeObserver(std::shared_ptr<AMSCore::IHTTPCacheDataAccessObject>)::$_0,std::allocator<AMSCore::anonymous namespace'::makeObserver(std::shared_ptr<AMSCore::IHTTPCacheDataAccessObject>)::$_0>,void ()(std::string const&,AMSCore::AccountChangedMetadata)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = &unk_1EDC82CB8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMSCore::anonymous namespace'::makeObserver(std::shared_ptr<AMSCore::IHTTPCacheDataAccessObject>)::$_0,std::allocator<AMSCore::anonymous namespace'::makeObserver(std::shared_ptr<AMSCore::IHTTPCacheDataAccessObject>)::$_0>,void ()(std::string const&,AMSCore::AccountChangedMetadata)>::~__func(void *a1)
{
  *a1 = &unk_1EDC82CB8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x192FA4080);
}

void *std::__function::__func<AMSCore::anonymous namespace'::makeObserver(std::shared_ptr<AMSCore::IHTTPCacheDataAccessObject>)::$_0,std::allocator<AMSCore::anonymous namespace'::makeObserver(std::shared_ptr<AMSCore::IHTTPCacheDataAccessObject>)::$_0>,void ()(std::string const&,AMSCore::AccountChangedMetadata)>::~__func(void *a1)
{
  *a1 = &unk_1EDC82CB8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<AMSCore::IHTTPCacheDataAccessObject  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN7AMSCore26IHTTPCacheDataAccessObjectEEE"
    || ((v3 & (unint64_t)"NSt3__114default_deleteIN7AMSCore26IHTTPCacheDataAccessObjectEEE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "NSt3__114default_deleteIN7AMSCore26IHTTPCacheDataAccessObjectEEE")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN7AMSCore26IHTTPCacheDataAccessObjectEEE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::IHTTPCacheDataAccessObject  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::IHTTPCacheDataAccessObject  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

uint64_t std::__shared_ptr_emplace<AMSCore::HTTPCacheProvider>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMSCore::HTTPCacheProvider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83D70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::HTTPCacheProvider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83D70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *_ZNKSt3__110__function6__funcIPDoFNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKN7AMSCore11HTTPRequestEENS5_ISD_EEFS7_SB_EE11target_typeEv()
{
  return &_ZTIPDoFNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKN7AMSCore11HTTPRequestEE;
}

uint64_t _ZNKSt3__110__function6__funcIPDoFNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKN7AMSCore11HTTPRequestEENS5_ISD_EEFS7_SB_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "PDoFNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKN7AMSCore11HTTPRequestEE"
    || ((v3 & (unint64_t)"PDoFNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKN7AMSCore11HTTPRequestEE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "PDoFNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKN7AMSCore11HTTPRequestEE")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PDoFNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKN7AMSCore11HTTPRequestEE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIPDoFNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKN7AMSCore11HTTPRequestEENS5_ISD_EEFS7_SB_EEclESB_(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

void *_ZNKSt3__110__function6__funcIPDoFNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKN7AMSCore11HTTPRequestEENS5_ISD_EEFS7_SB_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EDCA6268;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIPDoFNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKN7AMSCore11HTTPRequestEENS5_ISD_EEFS7_SB_EED0Ev()
{
}

void AMSCore::CookieUtils::parseResponseHeaderFields(std::runtime_error *this, const AMSCore::IHTTPHeaderMap *a2, const AMSCore::URL *a3)
{
  uint64_t v168 = *MEMORY[0x1E4F143B8];
  v147.__r_.__value_.__s.__data_[0] = 0;
  char v148 = 0;
  if (!*((unsigned char *)a3 + 56))
  {
    AMSCore::URL::getStringRepresentation(a3, &v155);
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&__dst);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__dst, (uint64_t)"Received an invalid URL. url = ", 31);
    if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v6 = &v155;
    }
    else {
      char v6 = (std::string *)v155.__r_.__value_.__r.__words[0];
    }
    if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v155.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v155.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__dst, (uint64_t)v6, size);
    std::stringbuf::str[abi:fe180100]((uint64_t)&__dst.__imp_, &__what_arg);
    __dst.__vftable = (std::system_error_vtbl *)*MEMORY[0x1E4FBA418];
    *(std::system_error_vtbl **)((char *)&__dst.__vftable + (unint64_t)__dst.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
    __dst.__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
    if (SHIBYTE(v163) < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x192FA3FD0](v166);
    v169.__cat_ = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
    *(void *)&v169.__val_ = 311;
    std::system_error::system_error(&__dst, v169, &__what_arg);
    if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__what_arg.__r_.__value_.__l.__data_);
    }
    __src = 0;
    uint64_t v158 = 0;
    __dst.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
    uint64_t v157 = (std::runtime_error_vtbl *)&v158;
    long long v160 = 0uLL;
    std::runtime_error::runtime_error(&v134, &__dst);
    std::error_code ec = __dst.__ec_;
    std::runtime_error v8 = (unsigned int *)v158;
    v134.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v136 = v157;
    uint64_t v137 = v158;
    uint64_t v138 = (std::runtime_error_vtbl *)__src;
    if (__src)
    {
      *(void *)(v158 + 16) = &v137;
      std::runtime_error v8 = 0;
      uint64_t v157 = (std::runtime_error_vtbl *)&v158;
      uint64_t v158 = 0;
      __src = 0;
    }
    else
    {
      uint64_t v136 = (std::runtime_error_vtbl *)&v137;
    }
    long long v139 = v160;
    long long v160 = 0uLL;
    __dst.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v157, v8);
    MEMORY[0x192FA3C30](&__dst);
    char v121 = std::runtime_error::runtime_error(this, &v134);
    v121[1] = (std::runtime_error)ec;
    v121->__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v122 = v137;
    v121[2].__vftable = v136;
    v121[2].__imp_.__imp_ = (const char *)v122;
    p_int imp = (std::runtime_error_vtbl *)&v121[2].__imp_;
    uint64_t v124 = v138;
    v121[3].__vftable = v138;
    if (v124)
    {
      *(void *)(v122 + 16) = p_imp;
      uint64_t v122 = 0;
      uint64_t v136 = (std::runtime_error_vtbl *)&v137;
      uint64_t v137 = 0;
      uint64_t v138 = 0;
    }
    else
    {
      v121[2].__vftable = p_imp;
    }
    *(_OWORD *)&v121[3].__imp_.__imp_ = v139;
    long long v139 = 0uLL;
    LOBYTE(v121[4].__imp_.__imp_) = 0;
    v134.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v136, (unsigned int *)v122);
    MEMORY[0x192FA3C30](&v134);
    if ((SHIBYTE(v155.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_298;
    }
    uint64_t v125 = (void *)v155.__r_.__value_.__r.__words[0];
LABEL_301:
    operator delete(v125);
    if (v148) {
      goto LABEL_302;
    }
    return;
  }
  char v5 = this;
  if (*((char *)a3 + 55) < 0) {
    std::string::__init_copy_ctor_external(&v147, *((const std::string::value_type **)a3 + 4), *((void *)a3 + 5));
  }
  else {
    std::string v147 = *(std::string *)((char *)a3 + 32);
  }
  char v148 = 1;
  long long v9 = (char *)a3 + 64;
  char v10 = &v146;
  std::optional<std::string>::value_or[abi:fe180100]<char const(&)[2]>(&v146, (uint64_t)v9, "/");
  std::string::size_type v11 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
  uint64_t v12 = (std::string *)v146.__r_.__value_.__r.__words[0];
  if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    std::string::size_type v11 = v146.__r_.__value_.__l.__size_;
    char v10 = (std::string *)v146.__r_.__value_.__r.__words[0];
  }
  if (v11)
  {
    unint64_t v13 = v11;
    while (v13)
    {
      int v14 = v10->__r_.__value_.__s.__data_[--v13];
      if (v14 == 47)
      {
        if (v13) {
          goto LABEL_27;
        }
        if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        {
          v146.__r_.__value_.__l.__size_ = 1;
        }
        else
        {
          *((unsigned char *)&v146.__r_.__value_.__s + 23) = 1;
          uint64_t v12 = &v146;
        }
        LOWORD(v12->__r_.__value_.__l.__data_) = 47;
        goto LABEL_41;
      }
    }
  }
  unint64_t v13 = -1;
LABEL_27:
  if (v11 >= v13) {
    size_t v15 = v13;
  }
  else {
    size_t v15 = v11;
  }
  if (v15 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:fe180100]();
  }
  if (v15 >= 0x17)
  {
    uint64_t v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v17 = v15 | 7;
    }
    uint64_t v18 = v17 + 1;
    p_dst = (std::system_error_vtbl *)operator new(v17 + 1);
    *(void *)&__dst.__ec_.__val_ = v18 | 0x8000000000000000;
    __dst.__vftable = p_dst;
    __dst.__imp_.__imp_ = (const char *)v15;
  }
  else
  {
    *((unsigned char *)&__dst.__ec_.__val_ + 7) = v15;
    p_dst = (std::system_error_vtbl *)&__dst;
    if (!v15) {
      goto LABEL_38;
    }
  }
  memmove(p_dst, v10, v15);
LABEL_38:
  *((unsigned char *)&p_dst->~system_error + v15) = 0;
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v146.__r_.__value_.__l.__data_);
  }
  *(std::runtime_error *)&v146.__r_.__value_.__l.__data_ = __dst.std::runtime_error;
  v146.__r_.__value_.__r.__words[2] = *(void *)&__dst.__ec_.__val_;
  char v5 = this;
LABEL_41:
  *((unsigned char *)&__dst.__ec_.__val_ + 7) = 10;
  strcpy((char *)&__dst, "Set-Cookie");
  uint64_t v19 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a2, (char *)&__dst);
  std::runtime_error v20 = v19;
  if (v19)
  {
    char v21 = v19;
    while (1)
    {
      char v21 = (uint64_t *)*v21;
      if (!v21) {
        goto LABEL_71;
      }
      char v127 = v21;
      int v22 = *((char *)v21 + 39);
      if (v22 >= 0) {
        uint64_t v23 = (char *)(v21 + 2);
      }
      else {
        uint64_t v23 = (char *)v21[2];
      }
      if (v22 >= 0) {
        char v24 = (const char *)*((unsigned __int8 *)v21 + 39);
      }
      else {
        char v24 = (const char *)v21[3];
      }
      if (*((char *)&__dst.__ec_.__val_ + 7) >= 0) {
        uint64_t v25 = (const char *)&__dst;
      }
      else {
        uint64_t v25 = (const char *)__dst.__vftable;
      }
      if (*((char *)&__dst.__ec_.__val_ + 7) >= 0) {
        int imp = (const char *)*((unsigned __int8 *)&__dst.__ec_.__val_ + 7);
      }
      else {
        int imp = __dst.__imp_.__imp_;
      }
      uint64_t v27 = std::locale::classic();
      uint64_t v28 = std::locale::use_facet(v27, MEMORY[0x1E4FBA258]);
      if (v24 != imp)
      {
        char v21 = v127;
        if (*((char *)&__dst.__ec_.__val_ + 7) < 0) {
          goto LABEL_67;
        }
        goto LABEL_72;
      }
      if (v24) {
        break;
      }
      unint64_t v32 = v25;
      unint64_t v31 = v23;
LABEL_63:
      if (v31 != &v24[(void)v23]) {
        goto LABEL_66;
      }
      BOOL v48 = v32 == &v24[(void)v25];
      char v5 = this;
      char v21 = v127;
      if (!v48) {
        goto LABEL_71;
      }
    }
    float v29 = v28;
    uint64_t v30 = v24 - 1;
    unint64_t v31 = v23;
    unint64_t v32 = v25;
    while (1)
    {
      char v33 = v30;
      char v34 = *v32;
      int v35 = ((uint64_t (*)(const std::locale::facet *, void))v29->__vftable[1].__on_zero_shared)(v29, *v31);
      if (v35 != ((unsigned int (*)(const std::locale::facet *, void))v29->__vftable[1].__on_zero_shared)(v29, v34))break; {
      ++v31;
      }
      ++v32;
      uint64_t v30 = v33 - 1;
      if (!v33) {
        goto LABEL_63;
      }
    }
LABEL_66:
    char v5 = this;
    char v21 = v127;
    if (*((char *)&__dst.__ec_.__val_ + 7) < 0) {
      goto LABEL_67;
    }
LABEL_72:
    if (v21 != v20) {
      goto LABEL_73;
    }
LABEL_68:
    v5->__vftable = 0;
    v5->__imp_.__imp_ = 0;
    v5[1].__vftable = 0;
    LOBYTE(v5[4].__imp_.__imp_) = 1;
    if ((SHIBYTE(v146.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_298;
    }
LABEL_300:
    uint64_t v125 = (void *)v146.__r_.__value_.__r.__words[0];
    goto LABEL_301;
  }
  char v21 = 0;
LABEL_71:
  if ((*((char *)&__dst.__ec_.__val_ + 7) & 0x80000000) == 0) {
    goto LABEL_72;
  }
LABEL_67:
  operator delete(__dst.__vftable);
  if (v21 == v20) {
    goto LABEL_68;
  }
LABEL_73:
  long long v143 = 0;
  uint64_t v144 = 0;
  unint64_t v145 = 0;
  uint64_t v129 = (std::system_error_vtbl *)*MEMORY[0x1E4FBA418];
  uint64_t v130 = *(std::system_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
  uint64_t v128 = v21;
  do
  {
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&__dst);
    int v36 = *((char *)v20 + 63);
    if (v36 >= 0) {
      uint64_t v37 = (uint64_t)(v20 + 5);
    }
    else {
      uint64_t v37 = v20[5];
    }
    if (v36 >= 0) {
      unint64_t v38 = *((unsigned __int8 *)v20 + 63);
    }
    else {
      unint64_t v38 = v20[6];
    }
    AMSCore::StringUtils::split((char **)&v134, v37, v38, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
    uint8x8_t v39 = v134.__vftable;
    uint64_t v132 = v134.__imp_.__imp_;
    if (v134.__vftable != (std::runtime_error_vtbl *)v134.__imp_.__imp_)
    {
      uint64_t v131 = v20;
      int v40 = 0;
      int v41 = 0;
      while (1)
      {
        AMSCore::StringUtils::lowercase((uint64_t)&__what_arg, (char *)v39->~runtime_error, (std::string::size_type)v39->~runtime_error_0);
        int v42 = SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]);
        uint64_t v43 = (void *)__what_arg.__r_.__value_.__r.__words[0];
        if ((__what_arg.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_what_arg = &__what_arg;
        }
        else {
          p_what_arg = (std::string *)__what_arg.__r_.__value_.__r.__words[0];
        }
        if ((__what_arg.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int64_t v45 = HIBYTE(__what_arg.__r_.__value_.__r.__words[2]);
        }
        else {
          int64_t v45 = __what_arg.__r_.__value_.__l.__size_;
        }
        uint64_t v46 = (char *)p_what_arg + v45;
        if (v45 >= 7)
        {
          int64_t v55 = v45;
          char v56 = p_what_arg;
          do
          {
            if (v55 == 6) {
              break;
            }
            unint64_t v47 = (char *)memchr(v56, 101, v55 - 6);
            if (!v47) {
              break;
            }
            if (*(_DWORD *)v47 == 1768978533 && *(_DWORD *)(v47 + 3) == 1936028265)
            {
              int64_t v45 = v47 - (char *)p_what_arg;
              goto LABEL_93;
            }
            char v56 = (std::string *)(v47 + 1);
            int64_t v55 = v46 - (char *)v56;
          }
          while (v46 - (char *)v56 > 6);
        }
        unint64_t v47 = (char *)p_what_arg + v45;
LABEL_93:
        BOOL v48 = v47 == v46 || v45 == -1;
        int v49 = !v48;
        if (v42 < 0) {
          operator delete(v43);
        }
        v40 |= v49;
        std::string::size_type v50 = (std::string::size_type)v39->~runtime_error_0;
        if (v50)
        {
          std::string::size_type v51 = (char *)v39->~runtime_error;
          uint64_t v52 = memchr(v39->~runtime_error, 44, (size_t)v39->~runtime_error_0);
          if (v52) {
            std::string::size_type v53 = v52 - v51;
          }
          else {
            std::string::size_type v53 = -1;
          }
          if (v53 != -1 && ((v41 ^ v40) & 1) == 0)
          {
            if (v50 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:fe180100]();
            }
            if (v50 >= 0x17)
            {
              uint64_t v59 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v50 | 7) != 0x17) {
                uint64_t v59 = v50 | 7;
              }
              uint64_t v60 = v59 + 1;
              long long v54 = operator new(v59 + 1);
              __what_arg.__r_.__value_.__l.__size_ = v50;
              __what_arg.__r_.__value_.__r.__words[2] = v60 | 0x8000000000000000;
              __what_arg.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
            }
            else
            {
              *((unsigned char *)&__what_arg.__r_.__value_.__s + 23) = v50;
              long long v54 = &__what_arg;
            }
            memmove(v54, v51, v50);
            *((unsigned char *)v54 + v50) = 0;
            std::string::replace(&__what_arg, v53, 1uLL, "", 0);
            if ((__what_arg.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v61 = &__what_arg;
            }
            else {
              uint64_t v61 = (std::string *)__what_arg.__r_.__value_.__r.__words[0];
            }
            if ((__what_arg.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v62 = HIBYTE(__what_arg.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v62 = __what_arg.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__dst, (uint64_t)v61, v62);
            if ((v165 & 0x10) != 0)
            {
              unint64_t v65 = v164;
              if (v164 < (unint64_t)v160)
              {
                unint64_t v164 = v160;
                unint64_t v65 = v160;
              }
              cat = __src;
              std::string::size_type v63 = v65 - (void)__src;
              if ((uint64_t)(v65 - (void)__src) < 0)
              {
LABEL_314:
                __break(1u);
                return;
              }
            }
            else
            {
              if ((v165 & 8) == 0)
              {
                std::string::size_type v63 = 0;
                *((unsigned char *)&v155.__r_.__value_.__s + 23) = 0;
                uint64_t v64 = &v155;
                goto LABEL_149;
              }
              cat = __dst.__ec_.__cat_;
              std::string::size_type v63 = v158 - (unint64_t)__dst.__ec_.__cat_;
              if ((int64_t)(v158 - (unint64_t)__dst.__ec_.__cat_) < 0) {
                goto LABEL_314;
              }
            }
            if (v63 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:fe180100]();
            }
            if (v63 >= 0x17)
            {
              uint64_t v67 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v63 | 7) != 0x17) {
                uint64_t v67 = v63 | 7;
              }
              uint64_t v68 = v67 + 1;
              uint64_t v64 = (std::string *)operator new(v67 + 1);
              v155.__r_.__value_.__r.__words[2] = v68 | 0x8000000000000000;
              v155.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
              v155.__r_.__value_.__l.__size_ = v63;
            }
            else
            {
              *((unsigned char *)&v155.__r_.__value_.__s + 23) = v63;
              uint64_t v64 = &v155;
              if (!v63)
              {
LABEL_149:
                v64->__r_.__value_.__s.__data_[v63] = 0;
                uint64_t v69 = v144;
                if ((unint64_t)v144 >= v145)
                {
                  uint64_t v144 = std::vector<std::string>::__emplace_back_slow_path<std::string>(&v143, (uint64_t)&v155);
                  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(v155.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v163) & 0x80000000) == 0) {
                      goto LABEL_154;
                    }
                  }
                  else if ((SHIBYTE(v163) & 0x80000000) == 0)
                  {
                    goto LABEL_154;
                  }
LABEL_151:
                  operator delete(__p);
                }
                else
                {
                  long long v70 = *(_OWORD *)&v155.__r_.__value_.__l.__data_;
                  *((void *)v144 + 2) = *((void *)&v155.__r_.__value_.__l + 2);
                  *uint64_t v69 = v70;
                  uint64_t v144 = (char *)v69 + 24;
                  if (SHIBYTE(v163) < 0) {
                    goto LABEL_151;
                  }
                }
LABEL_154:
                std::runtime_error __p = 0;
                uint64_t v162 = 0;
                uint64_t v163 = 0;
                std::stringbuf::__init_buf_ptrs[abi:fe180100]((uint64_t)&__dst.__imp_);
                if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__what_arg.__r_.__value_.__l.__data_);
                }
                int v41 = 0;
                int v40 = 0;
                goto LABEL_84;
              }
            }
            memmove(v64, cat, v63);
            goto LABEL_149;
          }
          if (v53 != -1) {
            v41 |= v40;
          }
        }
        else
        {
          std::string::size_type v51 = (char *)v39->~runtime_error;
        }
        uint64_t v58 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__dst, (uint64_t)v51, v50);
        __what_arg.__r_.__value_.__s.__data_[0] = 32;
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v58, (uint64_t)&__what_arg, 1);
LABEL_84:
        uint8x8_t v39 = (std::runtime_error_vtbl *)((char *)v39 + 16);
        if (v39 == (std::runtime_error_vtbl *)v132)
        {
          uint8x8_t v39 = v134.__vftable;
          std::runtime_error v20 = v131;
          char v21 = v128;
          break;
        }
      }
    }
    if (v39) {
      operator delete(v39);
    }
    std::stringbuf::str[abi:fe180100]((uint64_t)&__dst.__imp_, (std::string *)&v134);
    uint64_t v71 = v144;
    if ((unint64_t)v144 >= v145)
    {
      uint64_t v144 = std::vector<std::string>::__emplace_back_slow_path<std::string>(&v143, (uint64_t)&v134);
      if (*((char *)&ec.__val_ + 7) < 0) {
        operator delete(v134.__vftable);
      }
    }
    else
    {
      std::runtime_error v72 = v134;
      *((void *)v144 + 2) = *(void *)&ec.__val_;
      _OWORD *v71 = v72;
      uint64_t v144 = (char *)v71 + 24;
    }
    __dst.__vftable = v129;
    *(std::system_error_vtbl **)((char *)&__dst.__vftable + (unint64_t)v129[-1].~system_error) = v130;
    __dst.__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
    if (SHIBYTE(v163) < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x192FA3FD0](v166);
    std::runtime_error v20 = (uint64_t *)*v20;
  }
  while (v20 != v21);
  std::runtime_error v141 = (std::runtime_error)0;
  std::runtime_error v142 = 0;
  std::vector<std::unique_ptr<AMSCore::HTTPCookie>>::reserve((uint64_t)&v141, 0xAAAAAAAAAAAAAAABLL * ((v144 - (unsigned char *)v143) >> 3));
  uint64_t v73 = (char *)v143;
  char v74 = v144;
  if (v143 == v144) {
    goto LABEL_283;
  }
  while (2)
  {
    if (!v148) {
      goto LABEL_314;
    }
    if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v133, v146.__r_.__value_.__l.__data_, v146.__r_.__value_.__l.__size_);
    }
    else {
      std::string v133 = v146;
    }
    int v75 = v73[23];
    if (v75 >= 0) {
      uint64_t v76 = (uint64_t)v73;
    }
    else {
      uint64_t v76 = *(void *)v73;
    }
    if (v75 >= 0) {
      unint64_t v77 = v73[23];
    }
    else {
      unint64_t v77 = *((void *)v73 + 1);
    }
    AMSCore::StringUtils::split(&v155.__r_.__value_.__l.__data_, v76, v77, ";", 1, 0xFFFFFFFFFFFFFFFFLL);
    if (v155.__r_.__value_.__r.__words[0] == v155.__r_.__value_.__l.__size_
      || (unint64_t v78 = *(void *)(v155.__r_.__value_.__r.__words[0] + 8)) == 0
      || ((uint64_t v79 = *(void *)v155.__r_.__value_.__l.__data_,
           (uint64_t v80 = (char *)memchr(*(void **)v155.__r_.__value_.__l.__data_, 61, *(void *)(v155.__r_.__value_.__r.__words[0] + 8))) != 0)? (v81 = &v80[-v79 + 1] == 0): (v81 = 1), v81))
    {
      AMSCore::Unexpected<AMSCore::Error,AMSCore::NetworkErrorCode,char const(&)[51],std::string const&>((uint64_t)&__dst, 0x137u, (uint64_t)v73);
      std::runtime_error::runtime_error(&v134, &__dst);
      std::error_code ec = __dst.__ec_;
      uint64_t v82 = (unsigned int *)v158;
      v134.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v136 = v157;
      uint64_t v137 = v158;
      uint64_t v138 = (std::runtime_error_vtbl *)__src;
      if (__src)
      {
        *(void *)(v158 + 16) = &v137;
        uint64_t v82 = 0;
        uint64_t v157 = (std::runtime_error_vtbl *)&v158;
        uint64_t v158 = 0;
        __src = 0;
      }
      else
      {
        uint64_t v136 = (std::runtime_error_vtbl *)&v137;
      }
      long long v139 = v160;
      long long v160 = 0uLL;
      char v140 = 0;
      __dst.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v157, v82);
      MEMORY[0x192FA3C30](&__dst);
      long long v83 = (void *)v155.__r_.__value_.__r.__words[0];
      if (!v155.__r_.__value_.__r.__words[0]) {
        goto LABEL_193;
      }
LABEL_192:
      operator delete(v83);
      goto LABEL_193;
    }
    AMSCore::StringUtils::split(&v153, v79, v78, "=", 1, 1uLL);
    std::runtime_error v86 = v153;
    if (v153 != v154)
    {
      unint64_t v87 = *((void *)v153 + 1);
      if (v87)
      {
        uint64_t v88 = *(void *)v153;
        uint64_t v89 = *((void *)v153 + 1);
        long long v90 = *(unsigned __int8 **)v153;
        while (1)
        {
          unint64_t v91 = *v90;
          if (v91 > 0x3F || ((1 << v91) & 0x100003E00) == 0) {
            break;
          }
          ++v90;
          if (!--v89) {
            goto LABEL_216;
          }
        }
        unint64_t v94 = (unint64_t)&v90[-v88];
        if (v94 != -1)
        {
          BOOL v95 = v87 >= v94;
          v87 -= v94;
          if (!v95) {
            std::__throw_out_of_range[abi:fe180100]("string_view::substr");
          }
          std::runtime_error v96 = (char *)(v88 + v94);
          goto LABEL_218;
        }
LABEL_216:
        unint64_t v87 = 0;
      }
      std::runtime_error v96 = 0;
LABEL_218:
      unint64_t v97 = v87;
      do
      {
        if (!v97) {
          goto LABEL_233;
        }
        unint64_t v98 = v96[--v97];
      }
      while (v98 <= 0x3F && ((1 << v98) & 0x100003E00) != 0);
      if (v97 == -1)
      {
LABEL_233:
        size_t v100 = 0;
        HIBYTE(v152) = 0;
        long long v101 = v151;
        goto LABEL_241;
      }
      if (v87 >= v97 + 1) {
        size_t v100 = v97 + 1;
      }
      else {
        size_t v100 = v87;
      }
      if (v100 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:fe180100]();
      }
      if (v100 >= 0x17)
      {
        uint64_t v102 = (v100 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v100 | 7) != 0x17) {
          uint64_t v102 = v100 | 7;
        }
        uint64_t v103 = v102 + 1;
        long long v101 = operator new(v102 + 1);
        v151[1] = (void *)v100;
        unint64_t v152 = v103 | 0x8000000000000000;
        v151[0] = v101;
      }
      else
      {
        HIBYTE(v152) = v100;
        long long v101 = v151;
        if (!v100)
        {
LABEL_241:
          *((unsigned char *)v101 + v100) = 0;
          if ((unint64_t)(v154 - v153) < 0x11)
          {
            HIBYTE(v150) = 0;
            LOBYTE(v149[0]) = 0;
            goto LABEL_278;
          }
          unint64_t v104 = *((void *)v153 + 3);
          if (v104)
          {
            unint64_t v105 = (unsigned __int8 *)*((void *)v153 + 2);
            uint64_t v106 = *((void *)v153 + 3);
            uint64_t v107 = v105;
            while (1)
            {
              unint64_t v108 = *v107;
              if (v108 > 0x3F || ((1 << v108) & 0x100003E00) == 0) {
                break;
              }
              ++v107;
              if (!--v106) {
                goto LABEL_255;
              }
            }
            unint64_t v110 = v107 - v105;
            if (v110 != -1)
            {
              BOOL v95 = v104 >= v110;
              v104 -= v110;
              if (!v95) {
                std::__throw_out_of_range[abi:fe180100]("string_view::substr");
              }
              uint64_t v111 = &v105[v110];
              goto LABEL_257;
            }
LABEL_255:
            unint64_t v104 = 0;
          }
          uint64_t v111 = 0;
LABEL_257:
          unint64_t v112 = v104;
          do
          {
            if (!v112) {
              goto LABEL_272;
            }
            unint64_t v113 = v111[--v112];
          }
          while (v113 <= 0x3F && ((1 << v113) & 0x100003E00) != 0);
          if (v112 != -1)
          {
            if (v104 >= v112 + 1) {
              size_t v115 = v112 + 1;
            }
            else {
              size_t v115 = v104;
            }
            if (v115 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:fe180100]();
            }
            if (v115 >= 0x17)
            {
              uint64_t v117 = (v115 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v115 | 7) != 0x17) {
                uint64_t v117 = v115 | 7;
              }
              uint64_t v118 = v117 + 1;
              long long v116 = operator new(v117 + 1);
              v149[1] = (void *)v115;
              unint64_t v150 = v118 | 0x8000000000000000;
              v149[0] = v116;
            }
            else
            {
              HIBYTE(v150) = v115;
              long long v116 = v149;
              if (!v115)
              {
LABEL_277:
                *((unsigned char *)v116 + v115) = 0;
LABEL_278:
                operator new();
              }
            }
            memmove(v116, v111, v115);
            goto LABEL_277;
          }
LABEL_272:
          HIBYTE(v150) = 0;
          LOBYTE(v149[0]) = 0;
          goto LABEL_278;
        }
      }
      memmove(v101, v96, v100);
      goto LABEL_241;
    }
    AMSCore::Unexpected<AMSCore::Error,AMSCore::NetworkErrorCode,char const(&)[51],std::string const&>((uint64_t)&__dst, 0x137u, (uint64_t)v73);
    std::runtime_error::runtime_error(&v134, &__dst);
    std::error_code ec = __dst.__ec_;
    uint64_t v93 = (unsigned int *)v158;
    v134.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v136 = v157;
    uint64_t v137 = v158;
    uint64_t v138 = (std::runtime_error_vtbl *)__src;
    if (__src)
    {
      *(void *)(v158 + 16) = &v137;
      uint64_t v93 = 0;
      uint64_t v157 = (std::runtime_error_vtbl *)&v158;
      uint64_t v158 = 0;
      __src = 0;
    }
    else
    {
      uint64_t v136 = (std::runtime_error_vtbl *)&v137;
    }
    long long v139 = v160;
    long long v160 = 0uLL;
    char v140 = 0;
    __dst.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v157, v93);
    MEMORY[0x192FA3C30](&__dst);
    if (v86) {
      operator delete(v86);
    }
    long long v83 = (void *)v155.__r_.__value_.__r.__words[0];
    if (v155.__r_.__value_.__r.__words[0]) {
      goto LABEL_192;
    }
LABEL_193:
    if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v133.__r_.__value_.__l.__data_);
      if (!v140) {
        goto LABEL_169;
      }
    }
    else if (!v140)
    {
LABEL_169:
      ((void (*)(std::runtime_error *))v134.~runtime_error)(&v134);
      goto LABEL_170;
    }
    uint64_t v84 = v141.__imp_.__imp_;
    if (v141.__imp_.__imp_ >= (const char *)v142)
    {
      v141.__imp_.__imp_ = (const char *)std::vector<std::unique_ptr<AMSCore::HTTPCookie>>::__emplace_back_slow_path<std::unique_ptr<AMSCore::HTTPCookie>>((uint64_t **)&v141, (uint64_t *)&v134);
      if (!v140) {
        goto LABEL_169;
      }
    }
    else
    {
      uint64_t v85 = v134.__vftable;
      v134.__vftable = 0;
      *(void *)v141.__imp_.__imp_ = v85;
      v141.__imp_.__imp_ = v84 + 8;
    }
    std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100]((uint64_t *)&v134, 0);
LABEL_170:
    v73 += 24;
    if (v73 != v74) {
      continue;
    }
    break;
  }
  uint64_t v73 = (char *)v143;
LABEL_283:
  *this = v141;
  this[1].__vftable = v142;
  LOBYTE(this[4].__imp_.__imp_) = 1;
  if (v73)
  {
    uint64_t v119 = v144;
    long long v120 = v73;
    if (v144 != v73)
    {
      do
      {
        if (*(v119 - 1) < 0) {
          operator delete(*((void **)v119 - 3));
        }
        v119 -= 24;
      }
      while (v119 != v73);
      long long v120 = v143;
    }
    uint64_t v144 = v73;
    operator delete(v120);
  }
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_300;
  }
LABEL_298:
  if (!v148) {
    return;
  }
LABEL_302:
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v147.__r_.__value_.__l.__data_);
  }
}

void sub_18DB55840(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void std::optional<std::string>::value_or[abi:fe180100]<char const(&)[2]>(std::string *this, uint64_t a2, char *__s)
{
  uint64_t v3 = this;
  if (!*(unsigned char *)(a2 + 24))
  {
    size_t v5 = strlen(__s);
    if (v5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:fe180100]();
    }
    size_t v6 = v5;
    if (v5 >= 0x17)
    {
      uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17) {
        uint64_t v9 = v5 | 7;
      }
      uint64_t v10 = v9 + 1;
      std::string::size_type v11 = (std::string *)operator new(v9 + 1);
      v3->__r_.__value_.__l.__size_ = v6;
      v3->__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
      v3->__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
      uint64_t v3 = v11;
    }
    else
    {
      *((unsigned char *)&v3->__r_.__value_.__s + 23) = v5;
      if (!v5) {
        goto LABEL_15;
      }
    }
    memcpy(v3, __s, v6);
LABEL_15:
    v3->__r_.__value_.__s.__data_[v6] = 0;
    return;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::size_type v7 = *(void *)(a2 + 8);
    std::runtime_error v8 = *(const std::string::value_type **)a2;
    std::string::__init_copy_ctor_external(this, v8, v7);
  }
  else
  {
    *this = *(std::string *)a2;
  }
}

uint64_t std::expected<std::unique_ptr<AMSCore::HTTPCookie>,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72)) {
    std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100]((uint64_t *)a1, 0);
  }
  else {
    (**(void (***)(uint64_t))a1)(a1);
  }
  return a1;
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::NetworkErrorCode,char const(&)[51],std::string const&>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v14);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Received an invalid cookie string. cookieString = ", 50);
  int v6 = *(char *)(a3 + 23);
  if (v6 >= 0) {
    uint64_t v7 = a3;
  }
  else {
    uint64_t v7 = *(void *)a3;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v8 = *(void *)(a3 + 8);
  }
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v14, v7, v8);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v14.__imp_, &v13);
  v14.__vftable = (std::system_error_vtbl *)*MEMORY[0x1E4FBA418];
  *(std::system_error_vtbl **)((char *)&v14.__vftable + (unint64_t)v14.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
  v14.__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
  if (v20 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FA3FD0](&v21);
  *(void *)&v22.__val_ = a2;
  v22.__cat_ = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
  std::system_error::system_error(&v14, v22, &v13);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  v14.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  size_t v15 = &v16;
  long long v18 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v14);
  *(std::error_code *)(a1 + 16) = v14.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v9 = v16;
  *(void *)(a1 + 32) = v15;
  *(void *)(a1 + 40) = v9;
  uint64_t v10 = a1 + 40;
  uint64_t v11 = v17;
  *(void *)(a1 + 48) = v17;
  if (v11)
  {
    *(void *)(v9 + 16) = v10;
    uint64_t v9 = 0;
    size_t v15 = &v16;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v10;
  }
  *(_OWORD *)(a1 + 56) = v18;
  long long v18 = 0uLL;
  v14.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v15, (unsigned int *)v9);
  return MEMORY[0x192FA3C30](&v14);
}

void sub_18DB55FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::StringUtils::join<char [2],std::string>(std::string *a1, const char *a2, uint64_t a3)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v11);
  size_t v6 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v11, (uint64_t)a2, v6);
  int v7 = *(char *)(a3 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = *(void *)a3;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a3 + 8);
  }
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v11, v8, v9);
  std::stringbuf::str[abi:fe180100]((uint64_t)v12, a1);
  uint64_t v11 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v12[-1] + *(void *)(v11 - 2AMSCore::URL::~URL((AMSCore::URL *)(this + 4)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v12[0] = MEMORY[0x1E4FBA470] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FA3FD0](&v14);
}

void AMSCore::CookieUtils::parseDateString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __p.__vftable = (std::system_error_vtbl *)operator new(0x20uLL);
  *(_OWORD *)&__p.__imp_.__imp_ = xmmword_18DDE9B30;
  strcpy((char *)__p.__vftable, "%a, %d-%b-%Y %H:%M:%S GMT");
  AMSCore::parseDateString((uint64_t)&v15, a2, a3, (const char *)&__p);
  if (*((char *)&__p.__ec_.__val_ + 7) < 0)
  {
    operator delete(__p.__vftable);
    if (v20) {
      goto LABEL_32;
    }
  }
  else if (v20)
  {
    goto LABEL_32;
  }
  v10[0].__vftable = (std::runtime_error_vtbl *)operator new(0x20uLL);
  *(_OWORD *)&v10[0].__imp_.__imp_ = xmmword_18DDE9B30;
  strcpy((char *)v10[0].__vftable, "%a, %d %b %Y %H:%M:%S GMT");
  AMSCore::parseDateString((uint64_t)&__p, a2, a3, (const char *)v10);
  if (!v20)
  {
    if ((_BYTE)v27)
    {
      ((void (*)(std::runtime_error *))v15.~runtime_error)(&v15);
      v15.__vftable = (std::runtime_error_vtbl *)__p.__vftable;
      char v20 = 1;
      if ((_BYTE)v27) {
        goto LABEL_30;
      }
    }
    else
    {
      AMSCore::Error::operator=((uint64_t)&v15, (uint64_t)&__p);
      if ((_BYTE)v27) {
        goto LABEL_30;
      }
    }
LABEL_14:
    ((void (*)(std::system_error *))__p.~system_error)(&__p);
    if ((SHIBYTE(v10[1].__vftable) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_15;
  }
  if ((_BYTE)v27)
  {
    v15.__vftable = (std::runtime_error_vtbl *)__p.__vftable;
    goto LABEL_30;
  }
  std::runtime_error::runtime_error(&v15, &__p);
  std::error_code ec = __p.__ec_;
  v15.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  uint64_t v17 = v23;
  v18[0] = v24;
  v18[1] = v25;
  if (v25)
  {
    *(void *)(v24 + 16) = v18;
    uint64_t v23 = &v24;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
  }
  else
  {
    uint64_t v17 = v18;
  }
  long long v19 = v26;
  long long v26 = 0uLL;
  char v20 = 0;
  if (!(_BYTE)v27) {
    goto LABEL_14;
  }
LABEL_30:
  if (SHIBYTE(v10[1].__vftable) < 0)
  {
LABEL_15:
    operator delete(v10[0].__vftable);
    if (!v20) {
      goto LABEL_16;
    }
LABEL_32:
    *(void *)a1 = v15.__vftable;
    *(unsigned char *)(a1 + 72) = 1;
    return;
  }
LABEL_31:
  if (v20) {
    goto LABEL_32;
  }
LABEL_16:
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&__p);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Received an invalid date. Date = ", 33);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__p, a2, a3);
  std::stringbuf::str[abi:fe180100]((uint64_t)&__p.__imp_, &__what_arg);
  __p.__vftable = (std::system_error_vtbl *)*MEMORY[0x1E4FBA418];
  *(std::system_error_vtbl **)((char *)&__p.__vftable + (unint64_t)__p.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
  __p.__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
  if (v28 < 0) {
    operator delete(v27);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FA3FD0](&v29);
  v30.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  *(void *)&v30.__val_ = 3;
  std::system_error::system_error(&__p, v30, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  }
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  __p.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  uint64_t v23 = &v24;
  long long v26 = 0uLL;
  std::runtime_error::runtime_error(v10, &__p);
  v10[1] = (std::runtime_error)__p.__ec_;
  size_t v6 = (unsigned int *)v24;
  v10[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  uint64_t v11 = v23;
  uint64_t v12 = v24;
  uint64_t v13 = v25;
  if (v25)
  {
    *(void *)(v24 + 16) = &v12;
    size_t v6 = 0;
    uint64_t v23 = &v24;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
  }
  else
  {
    uint64_t v11 = &v12;
  }
  long long v14 = v26;
  long long v26 = 0uLL;
  __p.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v23, v6);
  MEMORY[0x192FA3C30](&__p);
  std::runtime_error::runtime_error((std::runtime_error *)a1, v10);
  *(std::runtime_error *)(a1 + 16) = v10[1];
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v7 = v12;
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = a1 + 40;
  uint64_t v9 = v13;
  *(void *)(a1 + 48) = v13;
  if (v9)
  {
    *(void *)(v7 + 16) = v8;
    uint64_t v7 = 0;
    uint64_t v11 = &v12;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v8;
  }
  *(_OWORD *)(a1 + 56) = v14;
  long long v14 = 0uLL;
  *(unsigned char *)(a1 + 72) = 0;
  v10[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v11, (unsigned int *)v7);
  MEMORY[0x192FA3C30](v10);
  if (!v20) {
    ((void (*)(std::runtime_error *))v15.~runtime_error)(&v15);
  }
}

void sub_18DB56680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void (**a23)(void),uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  if (!a32)
  {
    (*a23)(&a23);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *std::__from_chars_integral[abi:fe180100]<unsigned long long,0>(unsigned char *result, unsigned char *a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (result == a2)
  {
    uint64_t v3 = a2;
    goto LABEL_17;
  }
  uint64_t v3 = result;
  while (*v3 == 48)
  {
    if (++v3 == a2)
    {
      uint64_t v3 = a2;
      break;
    }
  }
  if (v3 == a2)
  {
    uint64_t v3 = a2;
    if (a2 == result) {
      return result;
    }
LABEL_18:
    uint64_t v13 = 0;
LABEL_19:
    *a3 = v13;
    return v3;
  }
  if (*v3 - 48 >= 0xA)
  {
LABEL_17:
    if (v3 == result) {
      return result;
    }
    goto LABEL_18;
  }
  uint64_t v4 = 19;
  do
  {
    int v5 = *v3;
    if ((v5 - 58) < 0xFFFFFFF6) {
      break;
    }
    ++v3;
    v23[v4] = (v5 - 48);
    if (v4-- == 0) {
      break;
    }
  }
  while (v3 != a2);
  uint64_t v7 = v4 + 1;
  uint64_t v8 = (v4 + 1) << 32;
  uint64_t v9 = *(void *)((char *)v23 + (v8 >> 29));
  if ((int)v7 > 17) {
    goto LABEL_28;
  }
  uint64_t v10 = (int)v7;
  uint64_t v11 = 18 - v7;
  if ((unint64_t)(18 - v7) >= 2)
  {
    uint64_t v14 = 0;
    unint64_t v15 = v11 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v12 = (uint64_t *)((char *)&std::__itoa::__pow10_64 + 8 * (v11 & 0xFFFFFFFFFFFFFFFELL) + 8);
    uint64_t v16 = &v23[v7 + 2];
    uint64_t v17 = &unk_18DDF2CF0;
    unint64_t v18 = v11 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v9 += *(v17 - 1) * *(v16 - 1);
      v14 += *v17 * *v16;
      v17 += 2;
      v16 += 2;
      v18 -= 2;
    }
    while (v18);
    v9 += v14;
    if (v11 == v15) {
      goto LABEL_28;
    }
    v10 += v15;
  }
  else
  {
    uint64_t v12 = &qword_18DDF2CE8;
  }
  do
  {
    uint64_t v19 = *v12++;
    v9 += v19 * v23[++v10];
  }
  while (v10 != 18);
LABEL_28:
  unint64_t v20 = *(void *)((char *)&std::__itoa::__pow10_64 + ((0x1300000000 - v8) >> 29));
  uint64_t v21 = v24 * v20;
  v3 -= (v24 * (unsigned __int128)v20) >> 64 != 0;
  if (v3 != a2)
  {
    BOOL v22 = __CFADD__(v9, v21);
    if (*v3 - 48 < 0xA || v22)
    {
      while (*v3 - 48 <= 9)
      {
        if (++v3 == a2) {
          return a2;
        }
      }
      return v3;
    }
    goto LABEL_40;
  }
  if (!__CFADD__(v9, v21))
  {
LABEL_40:
    uint64_t v13 = v21 + v9;
    goto LABEL_19;
  }
  return a2;
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[42],std::string_view &>(uint64_t a1, unsigned int a2, const char *a3, uint64_t *a4)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v14);
  size_t v8 = strlen(a3);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v14, (uint64_t)a3, v8);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v14, *a4, a4[1]);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v14.__imp_, &v13);
  v14.__vftable = (std::system_error_vtbl *)*MEMORY[0x1E4FBA418];
  *(std::system_error_vtbl **)((char *)&v14.__vftable + (unint64_t)v14.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
  v14.__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
  if (v20 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FA3FD0](&v21);
  *(void *)&v22.__val_ = a2;
  v22.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v14, v22, &v13);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  v14.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  unint64_t v15 = &v16;
  long long v18 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v14);
  *(std::error_code *)(a1 + 16) = v14.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v9 = v16;
  *(void *)(a1 + 32) = v15;
  *(void *)(a1 + 40) = v9;
  uint64_t v10 = a1 + 40;
  uint64_t v11 = v17;
  *(void *)(a1 + 48) = v17;
  if (v11)
  {
    *(void *)(v9 + 16) = v10;
    uint64_t v9 = 0;
    unint64_t v15 = &v16;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v10;
  }
  *(_OWORD *)(a1 + 56) = v18;
  long long v18 = 0uLL;
  v14.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v15, (unsigned int *)v9);
  return MEMORY[0x192FA3C30](&v14);
}

void sub_18DB56B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double AMSCore::CookieUtils::getRequestHeaderFields(uint64_t a1, uint64_t *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (*a2 == a2[1])
  {
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_DWORD *)(a1 + 32) = 1065353216;
    return result;
  }
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v25);
  uint64_t v4 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = *(void *)(v4 + 8 * v5);
      uint64_t v9 = *(void *)(v6 + 48);
      uint64_t v7 = v6 + 48;
      uint64_t v8 = v9;
      int v10 = *(char *)(v7 + 23);
      if (v10 >= 0) {
        uint64_t v11 = v7;
      }
      else {
        uint64_t v11 = v8;
      }
      if (v10 >= 0) {
        uint64_t v12 = *(unsigned __int8 *)(v7 + 23);
      }
      else {
        uint64_t v12 = *(void *)(v7 + 8);
      }
      std::string v13 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v25, v11, v12);
      std::system_error v14 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v13, (uint64_t)"=", 1);
      uint64_t v15 = *(void *)(v4 + 8 * v5);
      uint64_t v18 = *(void *)(v15 + 96);
      uint64_t v16 = v15 + 96;
      uint64_t v17 = v18;
      int v19 = *(char *)(v16 + 23);
      if (v19 >= 0) {
        uint64_t v20 = v16;
      }
      else {
        uint64_t v20 = v17;
      }
      if (v19 >= 0) {
        uint64_t v21 = *(unsigned __int8 *)(v16 + 23);
      }
      else {
        uint64_t v21 = *(void *)(v16 + 8);
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v14, v20, v21);
      uint64_t v4 = *a2;
      unint64_t v22 = (a2[1] - *a2) >> 3;
      if (v5 != v22 - 1)
      {
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v25, (uint64_t)"; ", 2);
        uint64_t v4 = *a2;
        unint64_t v22 = (a2[1] - *a2) >> 3;
      }
      ++v5;
    }
    while (v5 < v22);
  }
  std::stringbuf::str[abi:fe180100]((uint64_t)v26, &v24);
  v29[23] = 6;
  strcpy(v29, "Cookie");
  std::string v30 = v24;
  memset(&v24, 0, sizeof(v24));
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__insert_multi[abi:fe180100]<std::pair<std::string const,std::string> const&>((void *)a1, (uint64_t)v29);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v30.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_21;
    }
LABEL_27:
    operator delete(v24.__r_.__value_.__l.__data_);
    goto LABEL_21;
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_27;
  }
LABEL_21:
  uint64_t v25 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v26[-1] + *(void *)(v25 - 2AMSCore::URL::~URL((AMSCore::URL *)(this + 4)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v26[0] = MEMORY[0x1E4FBA470] + 16;
  if (v27 < 0) {
    operator delete((void *)v26[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FA3FD0](&v28);
  return result;
}

void sub_18DB56E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  int v19 = *(void ***)(v16 + 16);
  if (!v19)
  {
LABEL_2:
    uint64_t v20 = *(void **)v16;
    *(void *)uint64_t v16 = 0;
    if (v20) {
      operator delete(v20);
    }
    std::tuple<std::string,std::string>::~tuple(v17 - 120);
    if (a15 < 0) {
      operator delete(__p);
    }
    std::ostringstream::~ostringstream((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  while (1)
  {
    uint64_t v21 = (void **)*v19;
    if (*((char *)v19 + 63) < 0)
    {
      operator delete(v19[5]);
      if (*((char *)v19 + 39) < 0) {
        goto LABEL_10;
      }
    }
    else if (*((char *)v19 + 39) < 0)
    {
LABEL_10:
      operator delete(v19[2]);
    }
    operator delete(v19);
    int v19 = v21;
    if (!v21) {
      goto LABEL_2;
    }
  }
}

void AMSCore::HTTPCookie::clone(AMSCore::HTTPCookie *this)
{
}

void sub_18DB57038(_Unwind_Exception *a1)
{
  if (v1[95] < 0)
  {
    operator delete(*v4);
    if ((v1[71] & 0x80000000) == 0)
    {
LABEL_3:
      if ((v1[39] & 0x80000000) == 0)
      {
LABEL_8:
        MEMORY[0x192FA4080](v1, 0x1012C407E2AE1F2);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(*v2);
      goto LABEL_8;
    }
  }
  else if ((v1[71] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  if ((v1[39] & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t AMSCore::HTTPCookie::matchesURL(AMSCore::HTTPCookie *this, const AMSCore::URL *a2)
{
  if (*((unsigned char *)this + 40))
  {
    int v4 = *((char *)a2 + 151);
    unint64_t v5 = v4 >= 0 ? (char *)a2 + 128 : (char *)*((void *)a2 + 16);
    uint64_t v6 = v4 >= 0 ? *((unsigned __int8 *)a2 + 151) : *((void *)a2 + 17);
    uint64_t v7 = std::locale::classic();
    uint64_t v8 = std::locale::use_facet(v7, MEMORY[0x1E4FBA258]);
    if (v6 != 5) {
      return 0;
    }
    uint64_t v9 = v8;
    int v10 = ((uint64_t (*)(const std::locale::facet *, void))v8->__vftable[1].__on_zero_shared)(v8, *v5);
    if (v10 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v9->__vftable[1].__on_zero_shared)(v9, 104))return 0; {
    int v11 = ((uint64_t (*)(const std::locale::facet *, void))v9->__vftable[1].__on_zero_shared)(v9, v5[1]);
    }
    if (v11 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v9->__vftable[1].__on_zero_shared)(v9, 116))return 0; {
    int v12 = ((uint64_t (*)(const std::locale::facet *, void))v9->__vftable[1].__on_zero_shared)(v9, v5[2]);
    }
    if (v12 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v9->__vftable[1].__on_zero_shared)(v9, 116))return 0; {
    int v13 = ((uint64_t (*)(const std::locale::facet *, void))v9->__vftable[1].__on_zero_shared)(v9, v5[3]);
    }
    if (v13 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v9->__vftable[1].__on_zero_shared)(v9, 112))return 0; {
    int v14 = ((uint64_t (*)(const std::locale::facet *, void))v9->__vftable[1].__on_zero_shared)(v9, v5[4]);
    }
    if (v14 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v9->__vftable[1].__on_zero_shared)(v9, 115))return 0; {
  }
    }
  if (*((char *)this + 39) < 0)
  {
    uint64_t v15 = (char *)*((void *)this + 2);
    unint64_t v16 = *((void *)this + 3);
  }
  else
  {
    uint64_t v15 = (char *)this + 16;
    unint64_t v16 = *((unsigned __int8 *)this + 39);
  }
  if (!AMSCore::URL::isInDomain((uint64_t)a2, v15, v16)) {
    return 0;
  }
  std::optional<std::string>::value_or[abi:fe180100]<char const(&)[2]>(&__s1, (uint64_t)a2 + 64, "/");
  uint64_t v17 = (const void **)((char *)this + 72);
  char v18 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __s1.__r_.__value_.__l.__size_;
  }
  size_t v20 = *((unsigned __int8 *)this + 95);
  size_t v21 = *((void *)this + 10);
  if ((v20 & 0x80u) == 0) {
    std::string::size_type v22 = v20;
  }
  else {
    std::string::size_type v22 = v21;
  }
  if (size == v22)
  {
    if ((v20 & 0x80u) == 0) {
      uint64_t v23 = (unsigned __int8 *)v17;
    }
    else {
      uint64_t v23 = (unsigned __int8 *)*v17;
    }
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      uint64_t v28 = (void *)__s1.__r_.__value_.__r.__words[0];
      if (!memcmp(__s1.__r_.__value_.__l.__data_, v23, __s1.__r_.__value_.__l.__size_))
      {
        BOOL v26 = 1;
LABEL_58:
        operator delete(v28);
        return v26;
      }
    }
    else
    {
      if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
        return 1;
      }
      p_s1 = &__s1;
      uint64_t v25 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      while (p_s1->__r_.__value_.__s.__data_[0] == *v23)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        ++v23;
        if (!--v25) {
          goto LABEL_51;
        }
      }
    }
  }
  uint64_t v29 = v17;
  size_t v30 = v20;
  if ((v20 & 0x80) != 0)
  {
    uint64_t v29 = *v17;
    size_t v30 = v21;
    if (size < v21) {
      goto LABEL_45;
    }
  }
  else if (size < v20)
  {
    goto LABEL_45;
  }
  if (v18 >= 0) {
    uint64_t v31 = &__s1;
  }
  else {
    uint64_t v31 = (std::string *)__s1.__r_.__value_.__r.__words[0];
  }
  uint64_t result = memcmp(v31, v29, v30);
  if (result)
  {
LABEL_45:
    BOOL v26 = 0;
    if (v18 < 0) {
      goto LABEL_57;
    }
    return v26;
  }
  if (v22)
  {
    if ((v20 & 0x80) != 0) {
      uint64_t v17 = (const void **)*v17;
    }
    if (*((unsigned char *)v17 + v22 - 1) == 47)
    {
LABEL_51:
      BOOL v26 = 1;
      if (v18 < 0) {
        goto LABEL_57;
      }
      return v26;
    }
    if (size >= v22)
    {
      BOOL v26 = v31->__r_.__value_.__s.__data_[v22] == 47;
      if (v18 < 0)
      {
LABEL_57:
        uint64_t v28 = (void *)__s1.__r_.__value_.__r.__words[0];
        goto LABEL_58;
      }
      return v26;
    }
  }
  __break(1u);
  return result;
}

char *AMSCore::IHTTPCookieProvider::getCookies(uint64_t a1, uint64_t a2)
{
  uint64_t result = (char *)operator new(0x1A8uLL);
  *(void *)uint64_t result = AMSCore::IHTTPCookieProvider::getCookies;
  *((void *)result + 1) = AMSCore::IHTTPCookieProvider::getCookies;
  result[152] = 0;
  int v4 = result + 152;
  result[176] = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    _OWORD *v4 = *(_OWORD *)a2;
    *((void *)result + 21) = *(void *)(a2 + 16);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    result[176] = 1;
  }
  result[184] = 0;
  result[208] = 0;
  if (*(unsigned char *)(a2 + 56))
  {
    *(_OWORD *)(result + 184) = *(_OWORD *)(a2 + 32);
    *((void *)result + 25) = *(void *)(a2 + 48);
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 32) = 0;
    result[208] = 1;
  }
  result[216] = 0;
  result[240] = 0;
  if (*(unsigned char *)(a2 + 88))
  {
    *(_OWORD *)(result + 216) = *(_OWORD *)(a2 + 64);
    *((void *)result + 29) = *(void *)(a2 + 80);
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 64) = 0;
    result[240] = 1;
  }
  *((_DWORD *)result + 62) = *(_DWORD *)(a2 + 96);
  *((void *)result + 32) = result + 256;
  *((void *)result + 33) = result + 256;
  *((void *)result + 34) = 0;
  if (v4 != (_OWORD *)a2)
  {
    uint64_t v5 = *(void *)(a2 + 120);
    if (v5)
    {
      uint64_t v7 = *(void *)(a2 + 104);
      uint64_t v6 = *(uint64_t **)(a2 + 112);
      uint64_t v8 = *v6;
      *(void *)(v8 + 8) = *(void *)(v7 + 8);
      **(void **)(v7 + 8) = v8;
      uint64_t v9 = *((void *)result + 32);
      *(void *)(v9 + 8) = v6;
      uint64_t *v6 = v9;
      *((void *)result + 32) = v7;
      *(void *)(v7 + 8) = result + 256;
      *((void *)result + 34) = v5;
      *(void *)(a2 + 120) = 0;
    }
    *(_OWORD *)(result + 280) = *(_OWORD *)(a2 + 128);
    *((void *)result + 37) = *(void *)(a2 + 144);
    *(void *)(a2 + 136) = 0;
    *(void *)(a2 + 144) = 0;
    *(void *)(a2 + 128) = 0;
    atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
    result[24] = 0;
    result[104] = 0;
    *((void *)result + 14) = 0;
    *((void *)result + 18) = 0;
    std::shared_ptr<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise,AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v10, (uint64_t)(result + 16));
  }
  __break(1u);
  return result;
}

void sub_18DB57C88(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  std::vector<std::unique_ptr<AMSCore::HTTPCookie>>::~vector[abi:fe180100](&a9);
  std::expected<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::~expected[abi:fe180100](v9);
  __cxa_begin_catch(a1);
  AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DB57CAC()
{
}

std::runtime_error *AMSCore::IHTTPCookieProvider::getCookies(std::runtime_error *result)
{
  uint64_t v1 = result[25].__vftable;
  if (!LOBYTE(v1[3].what))
  {
    __break(1u);
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = (void **)&result[19].__vftable;
  int v4 = (const std::runtime_error *)&v1->~runtime_error_0;
  char v5 = (char)v1[3].~runtime_error_0;
  if (v5)
  {
    result[19] = *(std::runtime_error *)&v1->~runtime_error_0;
    result[20].__vftable = (std::runtime_error_vtbl *)v1[1].~runtime_error;
    v1->what = 0;
    v1[1].~runtime_error = 0;
    v4->__vftable = 0;
  }
  else
  {
    std::runtime_error::runtime_error(result + 19, v4);
    v2[20] = *(std::runtime_error *)&v1[1].~runtime_error;
    v2[19].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v6 = v1 + 2;
    uint64_t v7 = v1[2].~runtime_error;
    p_int imp = (std::runtime_error_vtbl *)&v2[21].__imp_;
    v2[21].__vftable = (std::runtime_error_vtbl *)v1[1].what;
    v2[21].__imp_.__imp_ = (const char *)v7;
    uint64_t v9 = v1[2].~runtime_error_0;
    v2[22].__vftable = (std::runtime_error_vtbl *)v9;
    if (v9)
    {
      *((void *)v7 + 2) = p_imp;
      v1[1].what = (const char *(__cdecl *)(const std::runtime_error *__hidden))v6;
      v6->~runtime_error = 0;
      v1[2].~runtime_error_0 = 0;
    }
    else
    {
      v2[21].__vftable = p_imp;
    }
    long long v10 = (std::runtime_error *)v2[25].__vftable;
    *(std::runtime_error *)((char *)v2 + 360) = v10[4];
    v10[4].__vftable = 0;
    v10[4].__imp_.__imp_ = 0;
  }
  LOBYTE(v2[23].__imp_.__imp_) = v5;
  int imp = v2[25].__imp_.__imp_;
  if (imp && !atomic_fetch_add((atomic_ullong *volatile)imp + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    int v12 = (std::__shared_weak_count *)v2[25].__imp_.__imp_;
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  int v13 = (std::__shared_weak_count *)v2[24].__imp_.__imp_;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (LOBYTE(v2[23].__imp_.__imp_)) {
      goto LABEL_14;
    }
LABEL_30:
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v25, (uint64_t)v3);
    std::optional<std::expected<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)((char *)v2 + 24), (std::runtime_error *)&v25);
    *(void *)&unsigned long long v25 = &unk_1EDC827D8;
    size_t v21 = v28;
    if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v27, v27[1]);
    MEMORY[0x192FA3C30](&v25);
    goto LABEL_36;
  }
  if (!LOBYTE(v2[23].__imp_.__imp_)) {
    goto LABEL_30;
  }
LABEL_14:
  unsigned long long v25 = 0uLL;
  unint64_t v26 = 0;
  int v14 = (uint64_t *)v2[19].__vftable;
  uint64_t v15 = (uint64_t *)v2[19].__imp_.__imp_;
  if (v14 != v15)
  {
    unint64_t v16 = 0;
    do
    {
      if (AMSCore::HTTPCookie::matchesURL((AMSCore::HTTPCookie *)*v14, (const AMSCore::URL *)&v2[9].__imp_))
      {
        if ((unint64_t)v16 < v26)
        {
          uint64_t v17 = *v14;
          *int v14 = 0;
          *(void *)unint64_t v16 = v17;
          v16 += 8;
        }
        else
        {
          unint64_t v16 = (char *)std::vector<std::unique_ptr<AMSCore::HTTPCookie>>::__emplace_back_slow_path<std::unique_ptr<AMSCore::HTTPCookie>>((uint64_t **)&v25, v14);
        }
        *((void *)&v25 + 1) = v16;
      }
      ++v14;
    }
    while (v14 != v15);
  }
  if (LOBYTE(v2[6].__imp_.__imp_))
  {
    char v18 = (uint64_t *)v2[1].__imp_.__imp_;
    if (LOBYTE(v2[6].__vftable))
    {
      if (v18)
      {
        int v19 = (uint64_t *)v2[2].__vftable;
        size_t v20 = (char *)v2[1].__imp_.__imp_;
        if (v19 != v18)
        {
          do
            std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v19, 0);
          while (v19 != v18);
          size_t v20 = (char *)v2[1].__imp_.__imp_;
        }
        v2[2].__vftable = (std::runtime_error_vtbl *)v18;
        operator delete(v20);
      }
    }
    else
    {
      ((void (*)(std::__libcpp_refstring *))*v18)(&v2[1].__imp_);
    }
  }
  *(_OWORD *)&v2[1].__imp_.__imp_ = v25;
  v2[2].__imp_.__imp_ = (const char *)v26;
  LOBYTE(v2[6].__vftable) = 1;
  LOBYTE(v2[6].__imp_.__imp_) = 1;
LABEL_36:
  std::string::size_type v22 = (uint64_t *)v2[19].__vftable;
  if (LOBYTE(v2[23].__imp_.__imp_))
  {
    if (v22)
    {
      uint64_t v23 = (uint64_t *)v2[19].__imp_.__imp_;
      std::string v24 = v2[19].__vftable;
      if (v23 != v22)
      {
        do
          std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v23, 0);
        while (v23 != v22);
        std::string v24 = *v3;
      }
      v2[19].__imp_.__imp_ = (const char *)v22;
      operator delete(v24);
    }
  }
  else
  {
    ((void (*)(void **))*v22)(v3);
  }
  v2[19].__vftable = (std::runtime_error_vtbl *)&v2[1];
  v2->__vftable = 0;
  return (std::runtime_error *)AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v3);
}

void sub_18DB5807C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  std::vector<std::unique_ptr<AMSCore::HTTPCookie>>::~vector[abi:fe180100](&a9);
  std::expected<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::~expected[abi:fe180100](v9);
  __cxa_begin_catch(a1);
  AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DB580A0()
{
}

void AMSCore::IHTTPCookieProvider::getCookies(void *a1)
{
  if (*a1)
  {
    uint64_t v2 = a1[51];
    if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v3 = (std::__shared_weak_count *)a1[51];
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    int v4 = (std::__shared_weak_count *)a1[49];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::~Promise((uint64_t)(a1 + 2));
  AMSCore::URL::~URL((AMSCore::URL *)(a1 + 19));
  operator delete(a1);
}

uint64_t AMSCore::toString@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  switch((int)result)
  {
    case 1:
      *(unsigned char *)(a2 + 23) = 6;
      strcpy((char *)a2, "DELETE");
      return result;
    case 2:
      *(unsigned char *)(a2 + 23) = 3;
      unsigned __int16 v3 = 17735;
      goto LABEL_12;
    case 3:
      *(unsigned char *)(a2 + 23) = 4;
      int v4 = 1145128264;
      goto LABEL_10;
    case 4:
      *(unsigned char *)(a2 + 23) = 7;
      *(_DWORD *)a2 = 1230262351;
      int v2 = 1397641033;
      goto LABEL_7;
    case 5:
      *(unsigned char *)(a2 + 23) = 5;
      strcpy((char *)a2, "PATCH");
      return result;
    case 6:
      *(unsigned char *)(a2 + 23) = 4;
      int v4 = 1414745936;
LABEL_10:
      *(_DWORD *)a2 = v4;
      *(unsigned char *)(a2 + 4) = 0;
      break;
    case 7:
      *(unsigned char *)(a2 + 23) = 3;
      unsigned __int16 v3 = 21840;
LABEL_12:
      *(_DWORD *)a2 = v3 | 0x540000;
      break;
    case 8:
      *(unsigned char *)(a2 + 23) = 5;
      strcpy((char *)a2, "TRACE");
      break;
    default:
      *(unsigned char *)(a2 + 23) = 7;
      *(_DWORD *)a2 = 1313754947;
      int v2 = 1413694798;
LABEL_7:
      *(_DWORD *)(a2 + 3) = v2;
      *(unsigned char *)(a2 + 7) = 0;
      break;
  }
  return result;
}

void AMSCore::HTTPError::makeFromCurrentException(AMSCore::HTTPError *this)
{
  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)v1);
}

uint64_t sub_18DB58300(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, long long a11, uint64_t a12, uint64_t a13, uint64_t a14, long long a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  std::runtime_error::runtime_error((std::runtime_error *)v19, v26);
  uint64_t v22 = v27;
  uint64_t v21 = v28;
  *(void *)(v19 + 40) = v28;
  uint64_t v23 = v19 + 40;
  *(std::runtime_error *)(v19 + 16) = v26[1];
  *(void *)(v19 + 32) = v22;
  uint64_t v24 = v29;
  *(void *)(v19 + 48) = v29;
  if (v24)
  {
    *(void *)(v21 + 16) = v23;
    uint64_t v27 = v20 + 40;
    *(void *)(v20 + 40) = 0;
    *(void *)(v20 + 48) = 0;
    uint64_t v21 = 0;
  }
  else
  {
    *(void *)(v19 + 32) = v23;
  }
  *(_OWORD *)(v19 + 56) = v30;
  long long v30 = 0uLL;
  *(void *)uint64_t v19 = &unk_1EDC828C8;
  *(unsigned char *)(v19 + 72) = 0;
  *(unsigned char *)(v19 + 96) = 0;
  *(unsigned char *)(v19 + 104) = 0;
  *(unsigned char *)(v19 + 112) = 0;
  *(unsigned char *)(v19 + 120) = 0;
  *(unsigned char *)(v19 + 128) = 0;
  *(unsigned char *)(v19 + 136) = 0;
  *(unsigned char *)(v19 + 144) = 0;
  *(unsigned char *)(v19 + 152) = 0;
  *(unsigned char *)(v19 + 160) = 0;
  *(unsigned char *)(v19 + 168) = 0;
  *(unsigned char *)(v19 + 176) = 0;
  *(unsigned char *)(v19 + 184) = 0;
  *(unsigned char *)(v19 + 192) = 0;
  *(unsigned char *)(v19 + 232) = 0;
  *(unsigned char *)(v19 + 240) = 0;
  *(unsigned char *)(v19 + 248) = 0;
  *(unsigned char *)(v19 + 256) = 0;
  *(unsigned char *)(v19 + 264) = 0;
  *(unsigned char *)(v19 + 272) = 0;
  *(unsigned char *)(v19 + 280) = 0;
  *(unsigned char *)(v19 + 288) = 0;
  *(unsigned char *)(v19 + 296) = 0;
  *(unsigned char *)(v19 + 304) = 0;
  *(unsigned char *)(v19 + 312) = 0;
  *(unsigned char *)(v19 + 320) = 0;
  *(unsigned char *)(v19 + 328) = 0;
  *(unsigned char *)(v19 + 336) = 0;
  *(unsigned char *)(v19 + 344) = 0;
  *(unsigned char *)(v19 + 360) = 0;
  *(unsigned char *)(v19 + 368) = 0;
  *(_WORD *)(v19 + 376) = 0;
  *(unsigned char *)(v19 + 384) = 0;
  *(unsigned char *)(v19 + 408) = 0;
  *(void *)(v19 + 200) = 0;
  *(void *)(v19 + 208) = 0;
  *(unsigned char *)(v19 + 224) = 0;
  *(void *)(v19 + 216) = 0;
  *(_DWORD *)(v19 + 352) = 0;
  v26[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v20 + 32, (unsigned int *)v21);
  return MEMORY[0x192FA3C30](v26);
}

double AMSCore::IHTTPHeaderMap::getSingleValueOrNone(std::string *a1, void *a2, char *a3)
{
  unsigned __int16 v3 = a3;
  char v5 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a2, a3);
  uint64_t v7 = v5;
  uint64_t v28 = a1;
  if (v5)
  {
    uint64_t v8 = v5;
    uint64_t v29 = v5;
    uint64_t v27 = v3;
    do
    {
      uint64_t v8 = (uint64_t *)*v8;
      if (!v8) {
        break;
      }
      int v9 = *((char *)v8 + 39);
      uint64_t v10 = v9 >= 0 ? (uint64_t)(v8 + 2) : v8[2];
      uint64_t v11 = v9 >= 0 ? *((unsigned __int8 *)v8 + 39) : v8[3];
      int v12 = v3[23];
      int v13 = v12 >= 0 ? v3 : *(char **)v3;
      uint64_t v14 = v12 >= 0 ? v3[23] : *((void *)v3 + 1);
      uint64_t v15 = std::locale::classic();
      unint64_t v16 = std::locale::use_facet(v15, MEMORY[0x1E4FBA258]);
      if (v11 != v14) {
        break;
      }
      if (v11)
      {
        uint64_t v17 = v16;
        uint64_t v18 = v11 - 1;
        uint64_t v19 = (char *)v10;
        uint64_t v20 = v13;
        while (1)
        {
          uint64_t v21 = v18;
          uint64_t v22 = *v20;
          int v23 = ((uint64_t (*)(const std::locale::facet *, void))v17->__vftable[1].__on_zero_shared)(v17, *v19);
          if (v23 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v17->__vftable[1].__on_zero_shared)(v17, v22))break; {
          ++v19;
          }
          ++v20;
          uint64_t v18 = v21 - 1;
          if (!v21) {
            goto LABEL_23;
          }
        }
LABEL_26:
        uint64_t v7 = v29;
        if (v8 != v29) {
          goto LABEL_30;
        }
        goto LABEL_27;
      }
      uint64_t v20 = v13;
      uint64_t v19 = (char *)v10;
LABEL_23:
      if (v19 != (char *)(v10 + v11)) {
        goto LABEL_26;
      }
      BOOL v24 = v20 == &v13[v11];
      uint64_t v7 = v29;
      unsigned __int16 v3 = v27;
    }
    while (v24);
  }
  else
  {
    uint64_t v8 = 0;
  }
  if (v8 == v7)
  {
LABEL_27:
    v28->__r_.__value_.__s.__data_[0] = 0;
    v28[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
LABEL_30:
    if (*((char *)v7 + 63) < 0)
    {
      std::string::__init_copy_ctor_external(&v30, (const std::string::value_type *)v7[5], v7[6]);
    }
    else
    {
      long long v6 = *(_OWORD *)(v7 + 5);
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v6;
      v30.__r_.__value_.__r.__words[2] = v7[7];
    }
    if ((uint64_t *)*v7 == v8)
    {
      *(void *)&long long v6 = v30.__r_.__value_.__r.__words[0];
      std::string *v28 = v30;
      v28[1].__r_.__value_.__s.__data_[0] = 1;
    }
    else
    {
      v28->__r_.__value_.__s.__data_[0] = 0;
      int v25 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
      v28[1].__r_.__value_.__s.__data_[0] = 0;
      if (v25 < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
    }
  }
  return *(double *)&v6;
}

void std::__shared_ptr_emplace<AMSCore::AppleHTTPProvider>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<AMSCore::AppleHTTPProvider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83D38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::AppleHTTPProvider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83D38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AMSCore::HTTPRequest::~HTTPRequest(void **this)
{
  if (*((char *)this + 223) < 0)
  {
    operator delete(this[25]);
    int v2 = (void **)this[22];
    if (!v2) {
      goto LABEL_5;
    }
    while (1)
    {
LABEL_11:
      int v4 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0) {
LABEL_15:
        }
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_15;
      }
      operator delete(v2);
      int v2 = v4;
      if (!v4) {
        goto LABEL_5;
      }
    }
  }
  int v2 = (void **)this[22];
  if (v2) {
    goto LABEL_11;
  }
LABEL_5:
  unsigned __int16 v3 = this[20];
  this[20] = 0;
  if (v3) {
    operator delete(v3);
  }
  AMSCore::URL::~URL((AMSCore::URL *)this);
}

unint64_t AMSCore::HTTPRequest::CacheKey::Hasher::hash(uint64_t a1, int a2, AMSCore::URL *a3)
{
  unint64_t v5 = *(void *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    unint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(void *)a1;
    unint64_t v6 = v5;
  }
  unint64_t v7 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:fe180100]((uint64_t *)a1, v6);
  AMSCore::URL::getStringRepresentation(a3, &v14);
  int v8 = SHIBYTE(v14.__r_.__value_.__r.__words[2]);
  int v9 = (void *)v14.__r_.__value_.__r.__words[0];
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v10 = &v14;
  }
  else {
    uint64_t v10 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v14.__r_.__value_.__l.__size_;
  }
  unint64_t v12 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:fe180100]((uint64_t *)v10, size);
  if (v8 < 0) {
    operator delete(v9);
  }
  return v7 ^ (2 * (v12 ^ a2));
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8fe180100IOZNS0_6__dtorINS0_8__traitsIJN7AMSCore10DataBufferEPKS9_EEELNS0_6_TraitE1EE9__destroyB8fe180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:fe180100]<std::__variant_detail::__visitation::__variant::__value_visitor<AMSCore::overloaded<AMSCore::anonymous namespace'::DecodedBody::get(void)::{lambda(AMSCore::DataBuffer const&)#1},AMSCore::anonymous namespace'::DecodedBody::get(void)::{lambda(AMSCore::DataBuffer const*)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,AMSCore::DataBuffer,AMSCore::DataBuffer const*> const&>(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:fe180100]<std::__variant_detail::__visitation::__variant::__value_visitor<AMSCore::overloaded<AMSCore::anonymous namespace'::DecodedBody::get(void)::{lambda(AMSCore::DataBuffer const&)#1},AMSCore::anonymous namespace'::DecodedBody::get(void)::{lambda(AMSCore::DataBuffer const*)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,AMSCore::DataBuffer,AMSCore::DataBuffer const*> const&>(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t AMSCore::HTTPRequest::HTTPRequest(uint64_t result, long long *a2)
{
  *(unsigned char *)uint64_t result = 0;
  *(unsigned char *)(result + 24) = 0;
  if (*((unsigned char *)a2 + 24))
  {
    long long v2 = *a2;
    *(void *)(result + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t result = v2;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(result + 24) = 1;
  }
  *(unsigned char *)(result + 32) = 0;
  *(unsigned char *)(result + 56) = 0;
  if (*((unsigned char *)a2 + 56))
  {
    long long v3 = a2[2];
    *(void *)(result + 48) = *((void *)a2 + 6);
    *(_OWORD *)(result + 32) = v3;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 4) = 0;
    *(unsigned char *)(result + 56) = 1;
  }
  *(unsigned char *)(result + 64) = 0;
  *(unsigned char *)(result + 88) = 0;
  if (*((unsigned char *)a2 + 88))
  {
    long long v4 = a2[4];
    *(void *)(result + 80) = *((void *)a2 + 10);
    *(_OWORD *)(result + 64) = v4;
    *((void *)a2 + 9) = 0;
    *((void *)a2 + 10) = 0;
    *((void *)a2 + 8) = 0;
    *(unsigned char *)(result + 88) = 1;
  }
  *(_DWORD *)(result + 96) = *((_DWORD *)a2 + 24);
  *(void *)(result + 104) = result + 104;
  *(void *)(result + 112) = result + 104;
  *(void *)(result + 120) = 0;
  if ((long long *)result == a2)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = *((void *)a2 + 15);
    if (v5)
    {
      uint64_t v7 = *((void *)a2 + 13);
      unint64_t v6 = (uint64_t *)*((void *)a2 + 14);
      uint64_t v8 = *v6;
      *(void *)(v8 + 8) = *(void *)(v7 + 8);
      **(void **)(v7 + 8) = v8;
      uint64_t v9 = *(void *)(result + 104);
      *(void *)(v9 + 8) = v6;
      uint64_t *v6 = v9;
      *(void *)(result + 104) = v7;
      *(void *)(v7 + 8) = result + 104;
      *(void *)(result + 120) = v5;
      *((void *)a2 + 15) = 0;
    }
    long long v10 = a2[8];
    *(void *)(result + 144) = *((void *)a2 + 18);
    *(_OWORD *)(result + 128) = v10;
    *((void *)a2 + 17) = 0;
    *((void *)a2 + 18) = 0;
    *((void *)a2 + 16) = 0;
    *(_DWORD *)(result + 152) = *((_DWORD *)a2 + 38);
    uint64_t v11 = *((void *)a2 + 20);
    *((void *)a2 + 20) = 0;
    *(void *)(result + 160) = v11;
    *(void *)(result + 168) = *((void *)a2 + 21);
    *((void *)a2 + 21) = 0;
    uint64_t v12 = *((void *)a2 + 22);
    *(void *)(result + 176) = v12;
    uint64_t v13 = *((void *)a2 + 23);
    *(void *)(result + 184) = v13;
    *(_DWORD *)(result + 192) = *((_DWORD *)a2 + 48);
    if (v13)
    {
      unint64_t v14 = *(void *)(v12 + 8);
      unint64_t v15 = *(void *)(result + 168);
      if ((v15 & (v15 - 1)) != 0)
      {
        if (v14 >= v15) {
          v14 %= v15;
        }
      }
      else
      {
        v14 &= v15 - 1;
      }
      *(void *)(v11 + 8 * v14) = result + 176;
      *((void *)a2 + 22) = 0;
      *((void *)a2 + 23) = 0;
    }
    long long v16 = *(long long *)((char *)a2 + 200);
    *(void *)(result + 216) = *((void *)a2 + 27);
    *(_OWORD *)(result + 200) = v16;
    *((void *)a2 + 26) = 0;
    *((void *)a2 + 27) = 0;
    *((void *)a2 + 25) = 0;
    *(unsigned char *)(result + 224) = *((unsigned char *)a2 + 224);
  }
  return result;
}

void AMSCore::HTTPRequestBuilder::buildSPtr(AMSCore::HTTPRequestBuilder *this, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 72))
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&>((uint64_t)&v8, (const std::runtime_error *)a2);
    std::runtime_error::runtime_error(&v14, &v8);
    long long v15 = v9;
    long long v3 = (unsigned int *)v11;
    v14.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    long long v16 = v10;
    v17[0] = v11;
    v17[1] = v12;
    if (v12)
    {
      *(void *)(v11 + 16) = v17;
      long long v10 = &v11;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      long long v3 = 0;
    }
    else
    {
      long long v16 = v17;
    }
    long long v18 = v13;
    long long v13 = 0uLL;
    char v19 = 0;
    v8.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, v3);
    MEMORY[0x192FA3C30](&v8);
    if (!v19)
    {
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v8, (uint64_t)&v14);
      std::runtime_error::runtime_error((std::runtime_error *)this, &v8);
      *((_OWORD *)this + 1) = v9;
      *(void *)this = &unk_1EDC827D8;
      uint64_t v5 = v11;
      *((void *)this + 4) = v10;
      *((void *)this + 5) = v5;
      unint64_t v6 = (char *)this + 40;
      uint64_t v7 = v12;
      *((void *)this + 6) = v12;
      if (v7)
      {
        *(void *)(v5 + 16) = v6;
        long long v10 = &v11;
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v5 = 0;
      }
      else
      {
        *((void *)this + 4) = v6;
      }
      *(_OWORD *)((char *)this + 56) = v13;
      long long v13 = 0uLL;
      *((unsigned char *)this + 72) = 0;
      v8.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v5);
      MEMORY[0x192FA3C30](&v8);
      if (v19) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
  }
  else
  {
    AMSCore::HTTPRequest::HTTPRequest((uint64_t)&v14, (long long *)(a2 + 80));
    char v19 = 1;
  }
  long long v4 = operator new(0x100uLL);
  v4[1] = 0;
  std::runtime_error v4[2] = 0;
  void *v4 = &unk_1EDC83A60;
  *(void *)this = AMSCore::HTTPRequest::HTTPRequest((uint64_t)(v4 + 3), (long long *)&v14);
  *((void *)this + 1) = v4;
  *((unsigned char *)this + 72) = 1;
  if (v19)
  {
LABEL_8:
    AMSCore::HTTPRequest::~HTTPRequest((void **)&v14.__vftable);
    return;
  }
LABEL_13:
  ((void (*)(std::runtime_error *))v14.~runtime_error)(&v14);
}

void sub_18DB58FE4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__shared_ptr_emplace<AMSCore::HTTPRequest>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<AMSCore::HTTPRequest>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83A60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::HTTPRequest>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83A60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

std::runtime_error *AMSCore::HTTPRequestBuilder::withBody(std::runtime_error *this, uint64_t a2, int a3)
{
  v59[2] = *MEMORY[0x1E4F143B8];
  char v32 = a3;
  switch(a3)
  {
    case 1:
      std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v51);
      std::stringbuf::str[abi:fe180100]((uint64_t)&v51.__imp_, (std::string *)__what_arg);
      *(_OWORD *)uint8x8_t v39 = *(_OWORD *)__what_arg;
      *(void *)&v39[16] = *(void *)&__what_arg[16];
      v51.__vftable = (std::system_error_vtbl *)*MEMORY[0x1E4FBA418];
      *(std::system_error_vtbl **)((char *)&v51.__vftable + (unint64_t)v51.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
      v51.__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
      if (v57 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x192FA3FD0](v58);
      *(_OWORD *)unint64_t v26 = *(_OWORD *)v39;
      *(void *)&v26[16] = *(void *)&v39[16];
      goto LABEL_37;
    case 2:
      std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v51);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v51, (uint64_t)"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n", 164);
      if (v50)
      {
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v51, (uint64_t)"\n</plist>", 9);
        std::stringbuf::str[abi:fe180100]((uint64_t)&v51.__imp_, (std::string *)v39);
        *(void *)unint64_t v26 = *(void *)v39;
        *(void *)&v26[8] = *(void *)&v39[8];
        *(void *)&v26[15] = *(void *)&v39[15];
        v26[23] = v39[23];
        char v31 = 1;
        goto LABEL_79;
      }
      std::runtime_error::runtime_error((std::runtime_error *)v39, (const std::runtime_error *)__what_arg);
      *(_OWORD *)&v39[16] = *(_OWORD *)&__what_arg[16];
      *(void *)uint8x8_t v39 = &unk_1EDC827D8;
      int v40 = v46;
      uint64_t v41 = v47;
      int v42 = v48;
      if (v48)
      {
        *(void *)(v47 + 16) = &v41;
        uint64_t v46 = (std::runtime_error_vtbl *)&v47;
        uint64_t v47 = 0;
        BOOL v48 = 0;
      }
      else
      {
        int v40 = (std::runtime_error_vtbl *)&v41;
      }
      long long v43 = v49;
      long long v49 = 0uLL;
      char v44 = 1;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v33, (uint64_t)v39);
      std::runtime_error::runtime_error((std::runtime_error *)v26, &v33);
      *(_OWORD *)&v26[16] = v34;
      int v23 = (unsigned int *)v36;
      *(void *)unint64_t v26 = &unk_1EDC827D8;
      uint64_t v27 = v35;
      uint64_t v28 = v36;
      uint64_t v29 = v37;
      if (v37)
      {
        *(void *)(v36 + 16) = &v28;
        int v35 = (std::runtime_error_vtbl *)&v36;
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        int v23 = 0;
      }
      else
      {
        uint64_t v27 = (std::runtime_error_vtbl *)&v28;
      }
      long long v30 = v38;
      long long v38 = 0uLL;
      char v31 = 0;
      v33.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v35, v23);
      MEMORY[0x192FA3C30](&v33);
      if (!v44) {
        goto LABEL_79;
      }
      *(void *)uint8x8_t v39 = &unk_1EDC827D8;
      BOOL v24 = (std::__shared_weak_count *)*((void *)&v43 + 1);
      if (*((void *)&v43 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v43 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
      int v25 = (unsigned int *)v41;
      goto LABEL_78;
    case 3:
    case 4:
      int v5 = *(_DWORD *)(a2 + 24);
      if (v5 == -1) {
        unsigned __int8 v6 = 0;
      }
      else {
        unsigned __int8 v6 = *(_DWORD *)(a2 + 24);
      }
      if (v6 == 6 || v6 == 5)
      {
        if (v5 == v6) {
          uint64_t v7 = a2;
        }
        else {
          uint64_t v7 = 0;
        }
        if (*(char *)(v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v26, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
        }
        else
        {
          *(_OWORD *)unint64_t v26 = *(_OWORD *)v7;
          *(void *)&v26[16] = *(void *)(v7 + 16);
        }
        goto LABEL_37;
      }
      char v10 = a3;
      std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v51);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v51, (uint64_t)"Incorrect value type for encoding: ", 35);
      AMSCore::IData::operator<<(&v51, v10);
      std::stringbuf::str[abi:fe180100]((uint64_t)&v51.__imp_, (std::string *)__what_arg);
      v51.__vftable = (std::system_error_vtbl *)*MEMORY[0x1E4FBA418];
      *(std::system_error_vtbl **)((char *)&v51.__vftable + (unint64_t)v51.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
      v51.__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
      if (v57 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x192FA3FD0](v58);
      v60.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
      *(void *)&v60.__val_ = 4;
      std::system_error::system_error(&v51, v60, (const std::string *)__what_arg);
      if ((__what_arg[23] & 0x80000000) != 0) {
        operator delete(*(void **)__what_arg);
      }
      uint64_t v53 = 0;
      long long v54 = 0;
      v51.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
      uint64_t v52 = (std::runtime_error_vtbl *)&v53;
      long long v55 = 0uLL;
      std::runtime_error::runtime_error((std::runtime_error *)__what_arg, &v51);
      *(std::error_code *)&__what_arg[16] = v51.__ec_;
      uint64_t v11 = (unsigned int *)v53;
      *(void *)std::string __what_arg = &unk_1EDC827D8;
      uint64_t v46 = v52;
      uint64_t v47 = v53;
      BOOL v48 = v54;
      if (v54)
      {
        *(void *)(v53 + 16) = &v47;
        uint64_t v11 = 0;
        uint64_t v52 = (std::runtime_error_vtbl *)&v53;
        uint64_t v53 = 0;
        long long v54 = 0;
      }
      else
      {
        uint64_t v46 = (std::runtime_error_vtbl *)&v47;
      }
      long long v49 = v55;
      long long v55 = 0uLL;
      v51.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v52, v11);
      MEMORY[0x192FA3C30](&v51);
      std::runtime_error::runtime_error((std::runtime_error *)v26, (const std::runtime_error *)__what_arg);
      *(_OWORD *)&v26[16] = *(_OWORD *)&__what_arg[16];
      long long v18 = (unsigned int *)v47;
      *(void *)unint64_t v26 = &unk_1EDC827D8;
      uint64_t v27 = v46;
      uint64_t v28 = v47;
      uint64_t v29 = v48;
      if (v48)
      {
        *(void *)(v47 + 16) = &v28;
        long long v18 = 0;
        uint64_t v46 = (std::runtime_error_vtbl *)&v47;
        uint64_t v47 = 0;
        BOOL v48 = 0;
      }
      else
      {
        uint64_t v27 = (std::runtime_error_vtbl *)&v28;
      }
      long long v30 = v49;
      long long v49 = 0uLL;
      char v31 = 0;
      *(void *)std::string __what_arg = &unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v46, v18);
      uint64_t v17 = (std::system_error *)__what_arg;
      goto LABEL_55;
    case 5:
      int v8 = *(_DWORD *)(a2 + 24);
      if (v8 == -1 || v8 == 0)
      {
        memset(v26, 0, 24);
LABEL_37:
        char v31 = 1;
        goto LABEL_38;
      }
      if (v8 == 8)
      {
        std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v51);
        if (v8 == 8) {
          uint64_t v12 = (void *)a2;
        }
        else {
          uint64_t v12 = 0;
        }
        if (v50)
        {
          std::stringbuf::str[abi:fe180100]((uint64_t)&v51.__imp_, (std::string *)__what_arg);
          *(_OWORD *)unint64_t v26 = *(_OWORD *)__what_arg;
          *(void *)&v26[15] = *(void *)&__what_arg[15];
          v26[23] = __what_arg[23];
          char v31 = 1;
        }
        else
        {
          AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&>((uint64_t)v39, (const std::runtime_error *)__what_arg);
          std::runtime_error::runtime_error((std::runtime_error *)v26, (const std::runtime_error *)v39);
          *(_OWORD *)&v26[16] = *(_OWORD *)&v39[16];
          int v25 = (unsigned int *)v41;
          *(void *)unint64_t v26 = &unk_1EDC827D8;
          uint64_t v27 = v40;
          uint64_t v28 = v41;
          uint64_t v29 = v42;
          if (v42)
          {
            *(void *)(v41 + 16) = &v28;
            int v40 = (std::runtime_error_vtbl *)&v41;
            uint64_t v41 = 0;
            int v42 = 0;
            int v25 = 0;
          }
          else
          {
            uint64_t v27 = (std::runtime_error_vtbl *)&v28;
          }
          long long v30 = v43;
          long long v43 = 0uLL;
          char v31 = 0;
          *(void *)uint8x8_t v39 = &unk_1EDC827D8;
LABEL_78:
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v40, v25);
          MEMORY[0x192FA3C30](v39);
LABEL_79:
          if (!v50) {
            (**(void (***)(unsigned char *))__what_arg)(__what_arg);
          }
        }
        v51.__vftable = (std::system_error_vtbl *)*MEMORY[0x1E4FBA418];
        *(std::system_error_vtbl **)((char *)&v51.__vftable + (unint64_t)v51.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
        v51.__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
        if (v57 < 0) {
          operator delete(__p);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x192FA3FD0](v58);
        if (!v31) {
          goto LABEL_56;
        }
LABEL_38:
        long long v13 = *(const char **)v26;
        v59[0] = *(void *)&v26[8];
        *(void *)((char *)v59 + 7) = *(void *)&v26[15];
        char v14 = v26[23];
        memset(v26, 0, 24);
        if (SHIBYTE(this[18].__imp_.__imp_) < 0) {
          operator delete((void *)this[17].__imp_.__imp_);
        }
        long long v15 = (std::runtime_error_vtbl *)v59[0];
        this[17].__imp_.__imp_ = v13;
        this[18].__vftable = v15;
        *(std::runtime_error_vtbl **)((char *)&this[18].__vftable + 7) = *(std::runtime_error_vtbl **)((char *)v59 + 7);
        HIBYTE(this[18].__imp_.__imp_) = v14;
        if (!v31) {
          goto LABEL_58;
        }
        goto LABEL_41;
      }
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[29]>((uint64_t)&v51, 8u, "Only Maps can be URL-Encoded");
LABEL_46:
      std::runtime_error::runtime_error((std::runtime_error *)v26, &v51);
      *(std::error_code *)&v26[16] = v51.__ec_;
      long long v16 = (unsigned int *)v53;
      *(void *)unint64_t v26 = &unk_1EDC827D8;
      uint64_t v27 = v52;
      uint64_t v28 = v53;
      uint64_t v29 = v54;
      if (v54)
      {
        *(void *)(v53 + 16) = &v28;
        uint64_t v52 = (std::runtime_error_vtbl *)&v53;
        uint64_t v53 = 0;
        long long v54 = 0;
        long long v16 = 0;
      }
      else
      {
        uint64_t v27 = (std::runtime_error_vtbl *)&v28;
      }
      long long v30 = v55;
      long long v55 = 0uLL;
      char v31 = 0;
      v51.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v52, v16);
      uint64_t v17 = &v51;
LABEL_55:
      MEMORY[0x192FA3C30](v17);
      if (v31) {
        goto LABEL_38;
      }
LABEL_56:
      if (LOBYTE(this[4].__imp_.__imp_))
      {
        AMSCore::Error::operator=((uint64_t)this, (uint64_t)v26);
        if (!v31)
        {
LABEL_58:
          (**(void (***)(unsigned char *))v26)(v26);
          return this;
        }
      }
      else
      {
        std::runtime_error::runtime_error(this, (const std::runtime_error *)v26);
        this[1] = *(std::runtime_error *)&v26[16];
        this->__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        uint64_t v20 = v28;
        this[2].__vftable = v27;
        this[2].__imp_.__imp_ = (const char *)v20;
        p_int imp = (std::runtime_error_vtbl *)&this[2].__imp_;
        uint64_t v22 = v29;
        this[3].__vftable = v29;
        if (v22)
        {
          *(void *)(v20 + 16) = p_imp;
          uint64_t v27 = (std::runtime_error_vtbl *)&v28;
          uint64_t v28 = 0;
          uint64_t v29 = 0;
        }
        else
        {
          this[2].__vftable = p_imp;
        }
        *(_OWORD *)&this[3].__imp_.__imp_ = v30;
        long long v30 = 0uLL;
        LOBYTE(this[4].__imp_.__imp_) = 1;
        if (!v31) {
          goto LABEL_58;
        }
      }
LABEL_41:
      if ((v26[23] & 0x80000000) != 0) {
        operator delete(*(void **)v26);
      }
      return this;
    default:
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[19],AMSCore::IData::Encoding &>((uint64_t)&v51, 4u, &v32);
      goto LABEL_46;
  }
}

void sub_18DB59BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void (**__p)(void),uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,int a52,__int16 a53,char a54,char a55)
{
  if (a2)
  {
    if (!a51) {
      (*__p)(&__p);
    }
    std::ostringstream::~ostringstream((uint64_t)&a53);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::HTTPResponse::HTTPResponse(uint64_t result, long long *a2, __int16 a3, uint64_t *a4, long long *a5, long long *a6)
{
  *(unsigned char *)uint64_t result = 0;
  *(unsigned char *)(result + 24) = 0;
  if (*((unsigned char *)a2 + 24))
  {
    long long v6 = *a2;
    *(void *)(result + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t result = v6;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(result + 24) = 1;
  }
  *(unsigned char *)(result + 32) = 0;
  *(unsigned char *)(result + 56) = 0;
  if (*((unsigned char *)a2 + 56))
  {
    long long v7 = a2[2];
    *(void *)(result + 48) = *((void *)a2 + 6);
    *(_OWORD *)(result + 32) = v7;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 4) = 0;
    *(unsigned char *)(result + 56) = 1;
  }
  *(unsigned char *)(result + 64) = 0;
  *(unsigned char *)(result + 88) = 0;
  if (*((unsigned char *)a2 + 88))
  {
    long long v8 = a2[4];
    *(void *)(result + 80) = *((void *)a2 + 10);
    *(_OWORD *)(result + 64) = v8;
    *((void *)a2 + 9) = 0;
    *((void *)a2 + 10) = 0;
    *((void *)a2 + 8) = 0;
    *(unsigned char *)(result + 88) = 1;
  }
  *(_DWORD *)(result + 96) = *((_DWORD *)a2 + 24);
  *(void *)(result + 104) = result + 104;
  *(void *)(result + 112) = result + 104;
  *(void *)(result + 120) = 0;
  if ((long long *)result == a2)
  {
    __break(1u);
  }
  else
  {
    uint64_t v9 = *((void *)a2 + 15);
    if (v9)
    {
      uint64_t v11 = *((void *)a2 + 13);
      char v10 = (uint64_t *)*((void *)a2 + 14);
      uint64_t v12 = *v10;
      *(void *)(v12 + 8) = *(void *)(v11 + 8);
      **(void **)(v11 + 8) = v12;
      uint64_t v13 = *(void *)(result + 104);
      *(void *)(v13 + 8) = v10;
      uint64_t *v10 = v13;
      *(void *)(result + 104) = v11;
      *(void *)(v11 + 8) = result + 104;
      *(void *)(result + 120) = v9;
      *((void *)a2 + 15) = 0;
    }
    long long v14 = a2[8];
    *(void *)(result + 144) = *((void *)a2 + 18);
    *(_OWORD *)(result + 128) = v14;
    *((void *)a2 + 17) = 0;
    *((void *)a2 + 18) = 0;
    *((void *)a2 + 16) = 0;
    *(_WORD *)(result + 152) = a3;
    uint64_t v15 = *a4;
    *a4 = 0;
    *(void *)(result + 160) = v15;
    *(void *)(result + 168) = a4[1];
    a4[1] = 0;
    uint64_t v18 = a4[2];
    long long v16 = a4 + 2;
    uint64_t v17 = v18;
    *(void *)(result + 176) = v18;
    uint64_t v19 = v16[1];
    *(void *)(result + 184) = v19;
    *(_DWORD *)(result + 192) = *((_DWORD *)v16 + 4);
    if (v19)
    {
      unint64_t v20 = *(void *)(v17 + 8);
      unint64_t v21 = *(void *)(result + 168);
      if ((v21 & (v21 - 1)) != 0)
      {
        if (v20 >= v21) {
          v20 %= v21;
        }
      }
      else
      {
        v20 &= v21 - 1;
      }
      *(void *)(v15 + 8 * v20) = result + 176;
      *long long v16 = 0;
      v16[1] = 0;
    }
    long long v22 = *a5;
    *(void *)(result + 216) = *((void *)a5 + 2);
    *(_OWORD *)(result + 200) = v22;
    *((void *)a5 + 1) = 0;
    *((void *)a5 + 2) = 0;
    *(void *)a5 = 0;
    *(unsigned char *)(result + 224) = 0;
    *(unsigned char *)(result + 248) = 0;
    if (*((unsigned char *)a6 + 24))
    {
      long long v23 = *a6;
      *(void *)(result + 240) = *((void *)a6 + 2);
      *(_OWORD *)(result + 224) = v23;
      *((void *)a6 + 1) = 0;
      *((void *)a6 + 2) = 0;
      *(void *)a6 = 0;
      *(unsigned char *)(result + 248) = 1;
    }
    long long v24 = a6[3];
    *(_OWORD *)(result + 256) = a6[2];
    *(_OWORD *)(result + 272) = v24;
    long long v25 = a6[4];
    long long v26 = a6[5];
    long long v27 = a6[6];
    *(_OWORD *)(result + 329) = *(long long *)((char *)a6 + 105);
    *(_OWORD *)(result + 304) = v26;
    *(_OWORD *)(result + 320) = v27;
    *(_OWORD *)(result + 288) = v25;
    *(void *)(result + 360) = 0;
    *(void *)(result + 368) = 0;
    *(void *)(result + 352) = 0;
    *(_OWORD *)(result + 352) = a6[8];
    *(void *)(result + 368) = *((void *)a6 + 18);
    *((void *)a6 + 17) = 0;
    *((void *)a6 + 18) = 0;
    *((void *)a6 + 16) = 0;
    long long v28 = *(long long *)((char *)a6 + 152);
    *(_OWORD *)(result + 392) = *(long long *)((char *)a6 + 168);
    *(_OWORD *)(result + 376) = v28;
    long long v29 = *(long long *)((char *)a6 + 184);
    long long v30 = *(long long *)((char *)a6 + 200);
    long long v31 = *(long long *)((char *)a6 + 216);
    *(_OWORD *)(result + 456) = *(long long *)((char *)a6 + 232);
    *(_OWORD *)(result + 440) = v31;
    *(_OWORD *)(result + 424) = v30;
    *(_OWORD *)(result + 408) = v29;
    long long v32 = *(long long *)((char *)a6 + 248);
    long long v33 = *(long long *)((char *)a6 + 264);
    long long v34 = *(long long *)((char *)a6 + 280);
    *(_OWORD *)(result + 514) = *(long long *)((char *)a6 + 290);
    *(_OWORD *)(result + 488) = v33;
    *(_OWORD *)(result + 504) = v34;
    *(_OWORD *)(result + 472) = v32;
    *(unsigned char *)(result + 536) = 0;
    *(unsigned char *)(result + 560) = 0;
    if (*((unsigned char *)a6 + 336))
    {
      long long v35 = *(long long *)((char *)a6 + 312);
      *(void *)(result + 552) = *((void *)a6 + 41);
      *(_OWORD *)(result + 536) = v35;
      *((void *)a6 + 40) = 0;
      *((void *)a6 + 41) = 0;
      *((void *)a6 + 39) = 0;
      *(unsigned char *)(result + 560) = 1;
    }
    *(unsigned char *)(result + 568) = 0;
    *(unsigned char *)(result + 648) = 0;
  }
  return result;
}

void AMSCore::HTTPResponse::getDecodedObject(AMSCore::HTTPResponse *this)
{
  uint64_t v1 = (std::runtime_error *)((char *)this + 568);
  if (!*((unsigned char *)this + 648))
  {
    uint64_t v3 = *((unsigned __int8 *)this + 223);
    if ((v3 & 0x80u) != 0) {
      uint64_t v3 = *((void *)this + 26);
    }
    if (!v3)
    {
      __p.__imp_.__imp_ = 0;
      *(void *)&__p.__ec_.__val_ = 0;
      __p.__vftable = (std::system_error_vtbl *)&__p.__imp_;
      LOBYTE(v111) = 1;
      goto LABEL_206;
    }
    *((unsigned char *)&__p.__ec_.__val_ + 7) = 12;
    strcpy((char *)&__p, "Content-Type");
    AMSCore::IHTTPHeaderMap::getSingleValueOrNone(&v104, (void *)this + 20, (char *)&__p);
    if (*((char *)&__p.__ec_.__val_ + 7) < 0)
    {
      operator delete(__p.__vftable);
      if (v105)
      {
LABEL_7:
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v4 = &v104;
        }
        else {
          long long v4 = (std::string *)v104.__r_.__value_.__r.__words[0];
        }
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v104.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v104.__r_.__value_.__l.__size_;
        }
        AMSCore::StringUtils::split((char **)&__p, (uint64_t)v4, size, ";", 1, 1uLL);
        long long v6 = __p.__vftable;
        if (__p.__vftable == (std::system_error_vtbl *)__p.__imp_.__imp_)
        {
LABEL_165:
          int v78 = 0;
LABEL_166:
          if (v6) {
            operator delete(v6);
          }
          if (v78)
          {
            AMSCore::deserialize((uint64_t)&__what_arg, (uint64_t)this + 200, v78);
            if (v103)
            {
              if (LOBYTE(__what_arg_16.__cat_) == 8)
              {
                if (LODWORD(__what_arg_16.__cat_) == 8) {
                  p_what_arg = (std::system_error_vtbl **)&__what_arg;
                }
                else {
                  p_what_arg = 0;
                }
                p_int imp = (uint64_t)&__what_arg.__imp_;
                if (LODWORD(__what_arg_16.__cat_) != 8) {
                  p_int imp = 8;
                }
                uint64_t v81 = *(void *)p_imp;
                __p.__vftable = *p_what_arg;
                __p.__imp_.__imp_ = (const char *)v81;
                uint64_t p_what_arg_16 = (uint64_t)&__what_arg_16;
                if (LODWORD(__what_arg_16.__cat_) != 8) {
                  uint64_t p_what_arg_16 = 16;
                }
                *(void *)&__p.__ec_.__val_ = *(void *)p_what_arg_16;
                if (*(void *)&__p.__ec_.__val_)
                {
                  *(void *)(v81 + 16) = &__p.__imp_;
                  std::string *p_what_arg = (std::system_error_vtbl *)p_imp;
                  *(void *)p_int imp = 0;
                  *(void *)(p_imp + 8) = 0;
                }
                else
                {
                  __p.__vftable = (std::system_error_vtbl *)&__p.__imp_;
                }
                LOBYTE(v111) = 1;
                if (!v103) {
                  goto LABEL_220;
                }
LABEL_195:
                if (LODWORD(__what_arg_16.__cat_) != -1) {
                  ((void (*)(unsigned char *, std::runtime_error *))off_1EDCA6378[LODWORD(__what_arg_16.__cat_)])(v92, &__what_arg);
                }
LABEL_200:
                if (!v105) {
                  goto LABEL_203;
                }
LABEL_201:
                if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v104.__r_.__value_.__l.__data_);
                }
LABEL_203:
                if (*((unsigned char *)this + 648))
                {
                  std::expected<std::map<std::string,AMSCore::Any>,AMSCore::Error>::operator=[abi:fe180100]((uint64_t)v1, (uint64_t)&__p);
                  if (!(_BYTE)v111)
                  {
LABEL_205:
                    ((void (*)(std::system_error *))__p.~system_error)(&__p);
                    goto LABEL_216;
                  }
LABEL_215:
                  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&__p, (unsigned int *)__p.__imp_.__imp_);
LABEL_216:
                  if (!*((unsigned char *)this + 648)) {
                    __break(1u);
                  }
                  return;
                }
LABEL_206:
                char v85 = (char)v111;
                if ((_BYTE)v111)
                {
                  int imp = __p.__imp_.__imp_;
                  *((void *)this + 71) = __p.__vftable;
                  unint64_t v87 = (std::runtime_error_vtbl *)((char *)this + 576);
                  *((void *)this + 72) = imp;
                  uint64_t v88 = *(void *)&__p.__ec_.__val_;
                  *((void *)this + 73) = *(void *)&__p.__ec_.__val_;
                  if (v88)
                  {
                    *((void *)imp + 2) = v87;
                    __p.__vftable = (std::system_error_vtbl *)&__p.__imp_;
                    __p.__imp_.__imp_ = 0;
                    *(void *)&__p.__ec_.__val_ = 0;
                  }
                  else
                  {
                    v1->__vftable = v87;
                  }
                }
                else
                {
                  std::runtime_error::runtime_error(v1, &__p);
                  *(std::error_code *)((char *)this + 584) = __p.__ec_;
                  *((void *)this + 71) = &unk_1EDC827D8;
                  uint64_t v89 = v108;
                  *((void *)this + 75) = v107;
                  long long v90 = (char *)this + 608;
                  *((void *)this + 76) = v89;
                  uint64_t v91 = v109;
                  *((void *)this + 77) = v109;
                  if (v91)
                  {
                    *(void *)(v89 + 16) = v90;
                    uint64_t v107 = &v108;
                    uint64_t v108 = 0;
                    uint64_t v109 = 0;
                  }
                  else
                  {
                    *((void *)this + 75) = v90;
                  }
                  *((_OWORD *)this + 39) = v110;
                  long long v110 = 0uLL;
                }
                *((unsigned char *)this + 640) = v85;
                *((unsigned char *)this + 648) = 1;
                if (!(_BYTE)v111) {
                  goto LABEL_205;
                }
                goto LABEL_215;
              }
              AMSCore::StringUtils::join<char [29]>((std::string *)v92, "Body was not of AnyMap type.");
              v116.__cat_ = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
              *(void *)&v116.__val_ = 303;
              std::system_error::system_error(&__p, v116, (const std::string *)v92);
            }
            else
            {
              std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&__p);
              AMSCore::operator<<(&__p, (uint64_t)&__what_arg);
              std::stringbuf::str[abi:fe180100]((uint64_t)&__p.__imp_, (std::string *)v92);
              __p.__vftable = (std::system_error_vtbl *)*MEMORY[0x1E4FBA418];
              *(std::system_error_vtbl **)((char *)&__p.__vftable + (unint64_t)__p.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
              __p.__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
              if (v112 < 0) {
                operator delete(v111);
              }
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              MEMORY[0x192FA3FD0](v113);
              v115.__cat_ = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
              *(void *)&v115.__val_ = 311;
              std::system_error::system_error(&__p, v115, (const std::string *)v92);
            }
            if ((v92[23] & 0x80000000) != 0) {
              operator delete(*(void **)v92);
            }
            uint64_t v108 = 0;
            uint64_t v109 = 0;
            __p.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
            uint64_t v107 = &v108;
            long long v110 = 0uLL;
            std::runtime_error::runtime_error((std::runtime_error *)v92, &__p);
            *(std::error_code *)&v92[16] = __p.__ec_;
            long long v83 = (unsigned int *)v108;
            *(void *)uint64_t v92 = &unk_1EDC827D8;
            uint64_t v93 = v107;
            uint64_t v94 = v108;
            uint64_t v95 = v109;
            if (v109)
            {
              *(void *)(v108 + 16) = &v94;
              long long v83 = 0;
              uint64_t v107 = &v108;
              uint64_t v108 = 0;
              uint64_t v109 = 0;
            }
            else
            {
              uint64_t v93 = &v94;
            }
            long long v96 = v110;
            long long v110 = 0uLL;
            __p.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v107, v83);
            MEMORY[0x192FA3C30](&__p);
            std::runtime_error::runtime_error(&__p, (const std::runtime_error *)v92);
            __p.__ec_ = *(std::error_code *)&v92[16];
            uint64_t v84 = (unsigned int *)v94;
            __p.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
            uint64_t v107 = v93;
            uint64_t v108 = v94;
            uint64_t v109 = v95;
            if (v95)
            {
              *(void *)(v94 + 16) = &v108;
              uint64_t v84 = 0;
              uint64_t v93 = &v94;
              uint64_t v94 = 0;
              uint64_t v95 = 0;
            }
            else
            {
              uint64_t v107 = &v108;
            }
            long long v110 = v96;
            long long v96 = 0uLL;
            LOBYTE(v111) = 0;
            *(void *)uint64_t v92 = &unk_1EDC827D8;
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v93, v84);
            MEMORY[0x192FA3C30](v92);
            if (!v103)
            {
LABEL_220:
              ((void (*)(std::runtime_error *))__what_arg.~runtime_error)(&__what_arg);
              if (!v105) {
                goto LABEL_203;
              }
              goto LABEL_201;
            }
            goto LABEL_195;
          }
          AMSCore::Unexpected<AMSCore::Error,AMSCore::NetworkErrorCode,char const(&)[46]>((uint64_t)&__what_arg, 0x12Eu, "The Content-Type of the response was unknown.");
          std::runtime_error::runtime_error(&__p, &__what_arg);
          __p.__ec_ = __what_arg_16;
          long long v14 = (unsigned int *)v100;
          __p.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
          uint64_t v107 = v99;
          uint64_t v108 = v100;
          uint64_t v109 = v101;
          if (v101)
          {
            *(void *)(v100 + 16) = &v108;
            uint64_t v99 = &v100;
            uint64_t v100 = 0;
            uint64_t v101 = 0;
            long long v14 = 0;
          }
          else
          {
            uint64_t v107 = &v108;
          }
          long long v110 = v102;
          long long v102 = 0uLL;
          LOBYTE(v111) = 0;
          __what_arg.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
LABEL_199:
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v99, v14);
          MEMORY[0x192FA3C30](&__what_arg);
          goto LABEL_200;
        }
        if ((const char *)(__p.__imp_.__imp_ - (const char *)__p.__vftable) < (const char *)0x11) {
          goto LABEL_79;
        }
        long long v7 = __p.__vftable[1].~system_error;
        if (v7)
        {
          what = __p.what;
          uint64_t v9 = __p.__vftable[1].~system_error;
          char v10 = what;
          while (1)
          {
            unint64_t v11 = *(unsigned __int8 *)v10;
            if (v11 > 0x3F || ((1 << v11) & 0x100003E00) == 0) {
              break;
            }
            char v10 = (const char *(__cdecl *)(const std::runtime_error *__hidden))((char *)v10 + 1);
            uint64_t v9 = (void (__cdecl *)(std::system_error *__hidden))((char *)v9 - 1);
            if (!v9) {
              goto LABEL_40;
            }
          }
          unint64_t v15 = (char *)v10 - (char *)what;
          if ((char *)v10 - (char *)what != -1)
          {
            BOOL v16 = (unint64_t)v7 >= v15;
            long long v7 = (void (__cdecl *)(std::system_error *__hidden))((char *)v7 - v15);
            if (!v16) {
              goto LABEL_222;
            }
            uint64_t v17 = v10;
            goto LABEL_42;
          }
LABEL_40:
          long long v7 = 0;
        }
        uint64_t v17 = 0;
LABEL_42:
        uint64_t v18 = v7;
        do
        {
          if (!v18)
          {
            unint64_t v21 = 0;
            uint64_t v22 = 0;
            goto LABEL_58;
          }
          unint64_t v19 = *((unsigned __int8 *)v18 + (void)v17 - 1);
          uint64_t v18 = (void (__cdecl *)(std::system_error *__hidden))((char *)v18 - 1);
        }
        while (v19 <= 0x3F && ((1 << v19) & 0x100003E00) != 0);
        if ((unint64_t)v7 >= (unint64_t)v18 + 1) {
          long long v7 = (void (__cdecl *)(std::system_error *__hidden))((char *)v18 + 1);
        }
        if (v18 == (void (__cdecl *)(std::system_error *__hidden))-1) {
          unint64_t v21 = 0;
        }
        else {
          unint64_t v21 = (unint64_t)v7;
        }
        if (v18 == (void (__cdecl *)(std::system_error *__hidden))-1) {
          uint64_t v22 = 0;
        }
        else {
          uint64_t v22 = (uint64_t)v17;
        }
LABEL_58:
        AMSCore::StringUtils::split((char **)&__what_arg, v22, v21, "=", 1, 1uLL);
        long long v23 = (uint64_t *)__what_arg.__vftable;
        if ((const char *)(__what_arg.__imp_.__imp_ - (const char *)__what_arg.__vftable) == (const char *)32)
        {
          long long v25 = (char *)__what_arg.~runtime_error;
          long long v24 = __what_arg.~runtime_error_0;
          long long v26 = std::locale::classic();
          long long v27 = std::locale::use_facet(v26, MEMORY[0x1E4FBA258]);
          if (v24 == (void (__cdecl *)(std::runtime_error *__hidden))7)
          {
            long long v28 = v27;
            int v29 = ((uint64_t (*)(const std::locale::facet *, void))v27->__vftable[1].__on_zero_shared)(v27, *v25);
            if (v29 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v28->__vftable[1].__on_zero_shared)(v28, 99))
            {
              int v30 = ((uint64_t (*)(const std::locale::facet *, void))v28->__vftable[1].__on_zero_shared)(v28, v25[1]);
              if (v30 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v28->__vftable[1].__on_zero_shared)(v28, 104))
              {
                int v31 = ((uint64_t (*)(const std::locale::facet *, void))v28->__vftable[1].__on_zero_shared)(v28, v25[2]);
                if (v31 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v28->__vftable[1].__on_zero_shared)(v28, 97))
                {
                  int v32 = ((uint64_t (*)(const std::locale::facet *, void))v28->__vftable[1].__on_zero_shared)(v28, v25[3]);
                  if (v32 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v28->__vftable[1].__on_zero_shared)(v28, 114))
                  {
                    int v33 = ((uint64_t (*)(const std::locale::facet *, void))v28->__vftable[1].__on_zero_shared)(v28, v25[4]);
                    if (v33 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v28->__vftable[1].__on_zero_shared)(v28, 115))
                    {
                      int v34 = ((uint64_t (*)(const std::locale::facet *, void))v28->__vftable[1].__on_zero_shared)(v28, v25[5]);
                      if (v34 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v28->__vftable[1].__on_zero_shared)(v28, 101))
                      {
                        int v35 = ((uint64_t (*)(const std::locale::facet *, void))v28->__vftable[1].__on_zero_shared)(v28, v25[6]);
                        if (v35 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v28->__vftable[1].__on_zero_shared)(v28, 116))
                        {
                          uint64_t v36 = (char *)v23[2];
                          uint64_t v37 = v23[3];
                          long long v38 = std::locale::classic();
                          uint8x8_t v39 = std::locale::use_facet(v38, MEMORY[0x1E4FBA258]);
                          if (v37 != 5
                            || (int v40 = v39,
                                v41 = ((uint64_t (*)(const std::locale::facet *, void))v39->__vftable[1].__on_zero_shared)(v39, *v36), v41 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v40->__vftable[1].__on_zero_shared)(v40, 85))|| (v42 = ((uint64_t (*)(const std::locale::facet *, void))v40->__vftable[1].__on_zero_shared)(v40, v36[1]), v42 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v40->__vftable[1].__on_zero_shared)(v40, 84))|| (int v43 = ((uint64_t (*)(const std::locale::facet *, void))v40->__vftable[1].__on_zero_shared)(v40, v36[2]), v43 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v40->__vftable[1].__on_zero_shared)(v40, 70))|| (v44 = ((uint64_t (*)(const std::locale::facet *, void))v40->__vftable[1].__on_zero_shared)(v40,
                                        v36[3]),
                                v44 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v40->__vftable[1].__on_zero_shared)(v40, 45))|| (int v45 = ((uint64_t (*)(const std::locale::facet *, void))v40->__vftable[1].__on_zero_shared)(v40, v36[4]), v45 != ((unsigned int (*)(const std::locale::facet *, uint64_t))v40->__vftable[1].__on_zero_shared)(v40, 56)))
                          {
                            uint64_t v47 = v23[2];
                            uint64_t v46 = v23[3];
                            BOOL v48 = std::locale::classic();
                            long long v49 = std::locale::use_facet(v48, MEMORY[0x1E4FBA258]);
                            if (v46 == 10)
                            {
                              char v50 = v49;
                              uint64_t v51 = 0;
                              while (1)
                              {
                                char v52 = aIso88591[v51];
                                int v53 = ((uint64_t (*)(const std::locale::facet *, void))v50->__vftable[1].__on_zero_shared)(v50, *(char *)(v47 + v51));
                                if (v53 != ((unsigned int (*)(const std::locale::facet *, void))v50->__vftable[1].__on_zero_shared)(v50, v52))break; {
                                if (++v51 == 10)
                                }
                                  goto LABEL_77;
                              }
                            }
                            AMSCore::Log::error<char const(&)[21],std::string_view &>(v23 + 2);
                            operator delete(v23);
                            goto LABEL_165;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
LABEL_77:
          if (!v23) {
            goto LABEL_79;
          }
        }
        operator delete(v23);
LABEL_79:
        unint64_t v54 = (unint64_t)v6->~system_error_0;
        if (v54)
        {
          long long v55 = v6->~system_error;
          char v56 = v6->~system_error_0;
          char v57 = v6->~system_error;
          while (1)
          {
            unint64_t v58 = *(unsigned __int8 *)v57;
            if (v58 > 0x3F || ((1 << v58) & 0x100003E00) == 0) {
              break;
            }
            char v57 = (void (__cdecl *)(std::system_error *__hidden))((char *)v57 + 1);
            char v56 = (void (__cdecl *)(std::system_error *__hidden))((char *)v56 - 1);
            if (!v56) {
              goto LABEL_91;
            }
          }
          unint64_t v60 = (char *)v57 - (char *)v55;
          if ((char *)v57 - (char *)v55 != -1)
          {
            BOOL v16 = v54 >= v60;
            v54 -= v60;
            if (!v16) {
LABEL_222:
            }
              std::__throw_out_of_range[abi:fe180100]("string_view::substr");
            uint64_t v61 = v57;
            goto LABEL_93;
          }
LABEL_91:
          unint64_t v54 = 0;
        }
        uint64_t v61 = 0;
LABEL_93:
        unint64_t v62 = v54;
        while (v62)
        {
          unint64_t v63 = *((unsigned __int8 *)v61 + --v62);
          if (v63 > 0x3F || ((1 << v63) & 0x100003E00) == 0)
          {
            if (v62 == -1) {
              goto LABEL_165;
            }
            if (v54 >= v62 + 1) {
              unint64_t v54 = v62 + 1;
            }
            switch(v54)
            {
              case 8uLL:
                if (*(void *)v61 == 0x6C6D782F74786574) {
                  goto LABEL_155;
                }
                unint64_t v54 = 8;
                goto LABEL_144;
              case 0x10uLL:
                if (*(void *)v61 == 0x746163696C707061 && *((void *)v61 + 1) == 0x6E6F736A2F6E6F69)
                {
                  int v78 = 1;
                }
                else
                {
                  if (*(void *)v61 != 0x746163696C707061 || *((void *)v61 + 1) != 0x617461642F6E6F69)
                  {
                    unint64_t v54 = 16;
                    goto LABEL_144;
                  }
LABEL_162:
                  int v78 = 3;
                }
                goto LABEL_166;
              case 0x11uLL:
                if (*(void *)v61 == 0x746163696C707061
                  && *((void *)v61 + 1) == 0x73696C702F6E6F69
                  && *((unsigned char *)v61 + 16) == 116)
                {
                  goto LABEL_155;
                }
                unint64_t v54 = 17;
                goto LABEL_144;
              case 0x18uLL:
                if (*(void *)v61 == 0x746163696C707061
                  && *((void *)v61 + 1) == 0x6574636F2F6E6F69
                  && *((void *)v61 + 2) == 0x6D61657274732D74)
                {
                  goto LABEL_162;
                }
                unint64_t v54 = 24;
                goto LABEL_144;
              case 0x19uLL:
                if (*(void *)v61 == 0x746163696C707061
                  && *((void *)v61 + 1) == 0x70612D782F6E6F69
                  && *((void *)v61 + 2) == 0x73696C702D656C70
                  && *((unsigned char *)v61 + 24) == 116)
                {
LABEL_155:
                  int v78 = 2;
                }
                else
                {
                  unint64_t v54 = 25;
LABEL_144:
                  if (*(_DWORD *)v61 == 1954047348 && *((unsigned char *)v61 + 4) == 47)
                  {
                    int v78 = 4;
                  }
                  else
                  {
                    if (v54 != 33) {
                      goto LABEL_165;
                    }
                    unint64_t v75 = 0x6170706C69636174;
                    unint64_t v76 = bswap64(*(void *)v61);
                    if (v76 == 0x6170706C69636174
                      && (unint64_t v75 = 0x696F6E2F782D7777, v76 = bswap64(*((void *)v61 + 1)), v76 == 0x696F6E2F782D7777)
                      && (unint64_t v75 = 0x772D666F726D2D75, v76 = bswap64(*((void *)v61 + 2)), v76 == 0x772D666F726D2D75)
                      && (unint64_t v75 = 0x726C656E636F6465, v76 = bswap64(*((void *)v61 + 3)), v76 == 0x726C656E636F6465))
                    {
                      int v77 = *((unsigned __int8 *)v61 + 32) - 100;
                    }
                    else if (v76 < v75)
                    {
                      int v77 = -1;
                    }
                    else
                    {
                      int v77 = 1;
                    }
                    if (v77) {
                      int v78 = 0;
                    }
                    else {
                      int v78 = 5;
                    }
                  }
                }
                break;
              default:
                if (v54 < 5) {
                  goto LABEL_165;
                }
                goto LABEL_144;
            }
            goto LABEL_166;
          }
        }
        goto LABEL_165;
      }
    }
    else if (v105)
    {
      goto LABEL_7;
    }
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&__p);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__p, (uint64_t)"The response did not include a Content-Type.", 44);
    std::stringbuf::str[abi:fe180100]((uint64_t)&__p.__imp_, (std::string *)&__what_arg);
    __p.__vftable = (std::system_error_vtbl *)*MEMORY[0x1E4FBA418];
    *(std::system_error_vtbl **)((char *)&__p.__vftable + (unint64_t)__p.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
    __p.__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
    if (v112 < 0) {
      operator delete(v111);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x192FA3FD0](v113);
    v114.__cat_ = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
    *(void *)&v114.__val_ = 302;
    std::system_error::system_error(&__p, v114, (const std::string *)&__what_arg);
    if (*((char *)&__what_arg_16.__val_ + 7) < 0) {
      operator delete(__what_arg.__vftable);
    }
    uint64_t v108 = 0;
    uint64_t v109 = 0;
    __p.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
    uint64_t v107 = &v108;
    long long v110 = 0uLL;
    std::runtime_error::runtime_error(&__what_arg, &__p);
    std::error_code __what_arg_16 = __p.__ec_;
    uint64_t v13 = (unsigned int *)v108;
    __what_arg.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v99 = v107;
    uint64_t v100 = v108;
    uint64_t v101 = v109;
    if (v109)
    {
      *(void *)(v108 + 16) = &v100;
      uint64_t v13 = 0;
      uint64_t v107 = &v108;
      uint64_t v108 = 0;
      uint64_t v109 = 0;
    }
    else
    {
      uint64_t v99 = &v100;
    }
    long long v102 = v110;
    long long v110 = 0uLL;
    __p.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v107, v13);
    MEMORY[0x192FA3C30](&__p);
    std::runtime_error::runtime_error(&__p, &__what_arg);
    __p.__ec_ = __what_arg_16;
    long long v14 = (unsigned int *)v100;
    __p.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
    uint64_t v107 = v99;
    uint64_t v108 = v100;
    uint64_t v109 = v101;
    if (v101)
    {
      *(void *)(v100 + 16) = &v108;
      long long v14 = 0;
      uint64_t v99 = &v100;
      uint64_t v100 = 0;
      uint64_t v101 = 0;
    }
    else
    {
      uint64_t v107 = &v108;
    }
    long long v110 = v102;
    long long v102 = 0uLL;
    LOBYTE(v111) = 0;
    __what_arg.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    goto LABEL_199;
  }
}

void sub_18DB5B2D4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __clang_call_terminate(a1);
  }
  __clang_call_terminate(a1);
}

std::string *AMSCore::HTTPTransactionMetrics::HTTPTransactionMetrics(std::string *this, const AMSCore::HTTPTransactionMetrics *a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__s.__data_[0] = 0;
  if (*((unsigned char *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v4 = *(_OWORD *)a2;
      this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  long long v5 = *((_OWORD *)a2 + 4);
  long long v6 = *((_OWORD *)a2 + 5);
  long long v7 = *((_OWORD *)a2 + 6);
  long long v8 = *(_OWORD *)((char *)a2 + 105);
  long long v9 = *((_OWORD *)a2 + 2);
  long long v10 = *((_OWORD *)a2 + 3);
  this[5].__r_.__value_.__l.__size_ = 0;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v9;
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v10;
  *(_OWORD *)((char *)&this[4].__r_.__value_.__r.__words[1] + 1) = v8;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = v6;
  *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v7;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = v5;
  this[5].__r_.__value_.__r.__words[2] = 0;
  this[6].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::string>::__init_with_size[abi:fe180100]<std::string*,std::string*>(&this[5].__r_.__value_.__l.__size_, *((void *)a2 + 16), *((void *)a2 + 17), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 17) - *((void *)a2 + 16)) >> 3));
  long long v11 = *(_OWORD *)((char *)a2 + 152);
  *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = *(_OWORD *)((char *)a2 + 168);
  *(_OWORD *)&this[6].__r_.__value_.__r.__words[1] = v11;
  long long v12 = *(_OWORD *)((char *)a2 + 184);
  long long v13 = *(_OWORD *)((char *)a2 + 200);
  long long v14 = *(_OWORD *)((char *)a2 + 216);
  *(_OWORD *)&this[9].__r_.__value_.__r.__words[2] = *(_OWORD *)((char *)a2 + 232);
  *(_OWORD *)&this[9].__r_.__value_.__l.__data_ = v14;
  *(_OWORD *)&this[8].__r_.__value_.__r.__words[1] = v13;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[2] = v12;
  long long v15 = *(_OWORD *)((char *)a2 + 248);
  long long v16 = *(_OWORD *)((char *)a2 + 264);
  long long v17 = *(_OWORD *)((char *)a2 + 280);
  *(_OWORD *)&this[12].__r_.__value_.__s.__data_[2] = *(_OWORD *)((char *)a2 + 290);
  *(_OWORD *)&this[11].__r_.__value_.__l.__data_ = v16;
  *(_OWORD *)&this[11].__r_.__value_.__r.__words[2] = v17;
  *(_OWORD *)&this[10].__r_.__value_.__r.__words[1] = v15;
  this[13].__r_.__value_.__s.__data_[0] = 0;
  this[14].__r_.__value_.__s.__data_[0] = 0;
  if (*((unsigned char *)a2 + 336))
  {
    if (*((char *)a2 + 335) < 0)
    {
      std::string::__init_copy_ctor_external(this + 13, *((const std::string::value_type **)a2 + 39), *((void *)a2 + 40));
    }
    else
    {
      long long v18 = *(_OWORD *)((char *)a2 + 312);
      this[13].__r_.__value_.__r.__words[2] = *((void *)a2 + 41);
      *(_OWORD *)&this[13].__r_.__value_.__l.__data_ = v18;
    }
    this[14].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void sub_18DB5B4C4(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 336) && *(char *)(v1 + 335) < 0) {
    operator delete(*v3);
  }
  std::vector<std::string>::~vector[abi:fe180100](v2);
  if (*(unsigned char *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[32]>(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = a2;
  AMSCore::StringUtils::join<char [32]>(&__what_arg, "Cache-Control header is missing");
  *(void *)&v14.__val_ = v3;
  v14.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v8, v14, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  v8.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  long long v9 = &v10;
  long long v12 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v8);
  *(std::error_code *)(a1 + 16) = v8.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v4 = v10;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = a1 + 40;
  uint64_t v6 = v11;
  *(void *)(a1 + 48) = v11;
  if (v6)
  {
    *(void *)(v4 + 16) = v5;
    uint64_t v4 = 0;
    long long v9 = &v10;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v5;
  }
  *(_OWORD *)(a1 + 56) = v12;
  long long v12 = 0uLL;
  v8.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v9, (unsigned int *)v4);
  return MEMORY[0x192FA3C30](&v8);
}

void sub_18DB5B64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::chrono::duration<long long, std::ratio<1, 1000000>>::rep AMSCore::HTTPResponse::getCacheControlTimePoint(AMSCore::HTTPResponse *this)
{
  v2.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  AMSCore::HTTPResponse::getCacheControlTimePointIfDefined((uint64_t)v4, (uint64_t)this, v2.__d_.__rep_, 1);
  if (v5) {
    return v4[0];
  }
  (*(void (**)(void *))v4[0])(v4);
  return v2.__d_.__rep_;
}

void AMSCore::HTTPResponse::getCacheControlTimePointIfDefined(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *((unsigned char *)&v174.__val_ + 7) = 13;
  strcpy((char *)&__p, "Cache-Control");
  uint64_t v131 = (void *)(a2 + 160);
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(a2 + 160), (char *)&__p);
  char v5 = v4;
  if (v4)
  {
    uint64_t v6 = v4;
    do
    {
      uint64_t v6 = (uint64_t *)*v6;
      if (!v6) {
        break;
      }
      std::runtime_error v134 = v6;
      int v7 = *((char *)v6 + 39);
      if (v7 >= 0) {
        std::system_error v8 = (char *)(v6 + 2);
      }
      else {
        std::system_error v8 = (char *)v6[2];
      }
      if (v7 >= 0) {
        long long v9 = (const char *)*((unsigned __int8 *)v6 + 39);
      }
      else {
        long long v9 = (const char *)v6[3];
      }
      if (*((char *)&v174.__val_ + 7) >= 0) {
        p_p = (std::runtime_error_vtbl *)&__p;
      }
      else {
        p_p = __p.__vftable;
      }
      if (*((char *)&v174.__val_ + 7) >= 0) {
        int imp = (const char *)*((unsigned __int8 *)&v174.__val_ + 7);
      }
      else {
        int imp = __p.__imp_.__imp_;
      }
      long long v12 = std::locale::classic();
      long long v13 = std::locale::use_facet(v12, MEMORY[0x1E4FBA258]);
      if (v9 != imp)
      {
        uint64_t v4 = v5;
        uint64_t v6 = v134;
        if ((*((char *)&v174.__val_ + 7) & 0x80000000) == 0) {
          goto LABEL_30;
        }
        goto LABEL_27;
      }
      if (v9)
      {
        std::error_code v14 = v13;
        long long v15 = v9 - 1;
        long long v16 = v8;
        long long v17 = p_p;
        while (1)
        {
          long long v18 = v15;
          char v19 = (char)v17->~runtime_error;
          int v20 = ((uint64_t (*)(const std::locale::facet *, void))v14->__vftable[1].__on_zero_shared)(v14, *v16);
          if (v20 != ((unsigned int (*)(const std::locale::facet *, void))v14->__vftable[1].__on_zero_shared)(v14, v19))break; {
          ++v16;
          }
          long long v17 = (std::runtime_error_vtbl *)((char *)v17 + 1);
          long long v15 = v18 - 1;
          if (!v18) {
            goto LABEL_23;
          }
        }
LABEL_26:
        uint64_t v6 = v134;
        uint64_t v4 = v5;
        if ((*((char *)&v174.__val_ + 7) & 0x80000000) == 0) {
          goto LABEL_30;
        }
        goto LABEL_27;
      }
      long long v17 = p_p;
      long long v16 = v8;
LABEL_23:
      if (v16 != &v9[(void)v8]) {
        goto LABEL_26;
      }
      uint64_t v6 = v134;
      uint64_t v4 = v5;
    }
    while (v17 == (std::runtime_error_vtbl *)&v9[(void)p_p]);
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (*((char *)&v174.__val_ + 7) < 0)
  {
LABEL_27:
    operator delete(__p.__vftable);
    uint64_t v4 = v5;
  }
LABEL_30:
  uint64_t v135 = v6;
  if (v6 == v4)
  {
LABEL_146:
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[32]>((uint64_t)&__p, 0xCu);
    std::runtime_error::runtime_error(&v139, &__p);
    std::error_code v140 = v174;
    std::runtime_error v86 = (unsigned int *)v176;
    v139.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::runtime_error v141 = v175;
    v142[0] = v176;
    v142[1] = v177;
    if (v177)
    {
      *(void *)(v176 + 16) = v142;
      char v175 = &v176;
      uint64_t v176 = 0;
      uint64_t v177 = 0;
      std::runtime_error v86 = 0;
    }
    else
    {
      std::runtime_error v141 = v142;
    }
    long long v143 = v178;
    long long v178 = 0uLL;
    char v144 = 0;
    __p.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v175, v86);
    MEMORY[0x192FA3C30](&__p);
    if (!v144)
    {
LABEL_198:
      ((void (*)(std::runtime_error *))v139.~runtime_error)(&v139);
LABEL_199:
      *((unsigned char *)&v174.__val_ + 7) = 7;
      strcpy((char *)&__p, "Expires");
      uint64_t v107 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v131, (char *)&__p);
      uint64_t v108 = v107;
      if (v107)
      {
        uint64_t v109 = v107;
        do
        {
          uint64_t v109 = (uint64_t *)*v109;
          if (!v109) {
            break;
          }
          int v110 = *((char *)v109 + 39);
          uint64_t v111 = v110 >= 0 ? (char *)(v109 + 2) : (char *)v109[2];
          char v112 = v110 >= 0 ? (const char *)*((unsigned __int8 *)v109 + 39) : (const char *)v109[3];
          unint64_t v113 = *((char *)&v174.__val_ + 7) >= 0 ? &__p : (std::runtime_error *)__p.__vftable;
          std::error_code v114 = *((char *)&v174.__val_ + 7) >= 0
               ? (const char *)*((unsigned __int8 *)&v174.__val_ + 7)
               : __p.__imp_.__imp_;
          std::error_code v115 = std::locale::classic();
          std::error_code v116 = std::locale::use_facet(v115, MEMORY[0x1E4FBA258]);
          if (v112 != v114) {
            break;
          }
          uint64_t v138 = v111;
          if (v112)
          {
            uint64_t v117 = v116;
            uint64_t v118 = v112 - 1;
            uint64_t v119 = v113;
            while (1)
            {
              long long v120 = v118;
              char v121 = (char)v119->__vftable;
              int v122 = ((uint64_t (*)(const std::locale::facet *, void))v117->__vftable[1].__on_zero_shared)(v117, *v111);
              if (v122 != ((unsigned int (*)(const std::locale::facet *, void))v117->__vftable[1].__on_zero_shared)(v117, v121))goto LABEL_225; {
              ++v111;
              }
              uint64_t v119 = (std::runtime_error *)((char *)v119 + 1);
              uint64_t v118 = v120 - 1;
              if (!v120) {
                goto LABEL_221;
              }
            }
          }
          uint64_t v119 = v113;
LABEL_221:
          ;
        }
        while (v111 == &v112[(void)v138] && v119 == (std::runtime_error *)&v112[(void)v113]);
      }
      else
      {
        uint64_t v109 = 0;
      }
LABEL_225:
      if (*((char *)&v174.__val_ + 7) < 0)
      {
        operator delete(__p.__vftable);
        if (v109 != v108)
        {
LABEL_229:
          while (1)
          {
            if (*((char *)v108 + 63) < 0)
            {
              uint64_t v123 = v108[5];
              uint64_t v124 = v108[6];
            }
            else
            {
              uint64_t v123 = (uint64_t)(v108 + 5);
              uint64_t v124 = *((unsigned __int8 *)v108 + 63);
            }
            AMSCore::CookieUtils::parseDateString((uint64_t)&__p, v123, v124);
            if ((_BYTE)v179) {
              break;
            }
            ((void (*)(std::runtime_error *))__p.~runtime_error)(&__p);
            uint64_t v108 = (uint64_t *)*v108;
            if (v108 == v109) {
              goto LABEL_234;
            }
          }
          *(void *)a1 = __p.__vftable;
          *(unsigned char *)(a1 + 72) = 1;
          return;
        }
      }
      else if (v109 != v108)
      {
        goto LABEL_229;
      }
LABEL_234:
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[26]>((uint64_t)&__p, 0xCu, "Expires header is missing");
      std::runtime_error::runtime_error((std::runtime_error *)a1, &__p);
      *(std::error_code *)(a1 + 16) = v174;
      *(void *)a1 = &unk_1EDC827D8;
      uint64_t v125 = v176;
      *(void *)(a1 + 32) = v175;
      *(void *)(a1 + 40) = v125;
      uint64_t v126 = a1 + 40;
      uint64_t v127 = v177;
      *(void *)(a1 + 48) = v177;
      if (v127)
      {
        *(void *)(v125 + 16) = v126;
        char v175 = &v176;
        uint64_t v176 = 0;
        uint64_t v177 = 0;
        uint64_t v125 = 0;
      }
      else
      {
        *(void *)(a1 + 32) = v126;
      }
      *(_OWORD *)(a1 + 56) = v178;
      long long v178 = 0uLL;
      *(unsigned char *)(a1 + 72) = 0;
      __p.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v175, (unsigned int *)v125);
      MEMORY[0x192FA3C30](&__p);
      return;
    }
  }
  else
  {
    uint64_t v132 = *(std::runtime_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
    std::string v133 = (std::runtime_error_vtbl *)*MEMORY[0x1E4FBA418];
    unint64_t v21 = (std::locale::id *)MEMORY[0x1E4FBA258];
    while (1)
    {
      uint64_t v136 = v4;
      if (*((char *)v4 + 63) < 0)
      {
        uint64_t v22 = v4[5];
        unint64_t v23 = v4[6];
      }
      else
      {
        uint64_t v22 = (uint64_t)(v4 + 5);
        unint64_t v23 = *((unsigned __int8 *)v4 + 63);
      }
      AMSCore::StringUtils::split(&v165, v22, v23, ",", 1, 0xFFFFFFFFFFFFFFFFLL);
      long long v24 = v165;
      long long v25 = v166;
      long long v26 = v166 - 16;
      if (v165 != v166 && v26 > v165)
      {
        long long v28 = v165 + 16;
        do
        {
          long long v29 = *((_OWORD *)v28 - 1);
          *((_OWORD *)v28 - 1) = *(_OWORD *)v26;
          *(_OWORD *)long long v26 = v29;
          v26 -= 16;
          BOOL v30 = v28 >= v26;
          v28 += 16;
        }
        while (!v30);
      }
      int v31 = v24;
      int v32 = v24;
      if (v24 == v25)
      {
LABEL_44:
        AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[32]>((uint64_t)&__p, 0xCu);
        std::runtime_error::runtime_error(&v145, &__p);
        std::error_code ec = v174;
        int v33 = (unsigned int *)v176;
        v145.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        std::string v147 = v175;
        uint64_t v148 = v176;
        uint64_t v149 = v177;
        if (v177)
        {
          *(void *)(v176 + 16) = &v148;
          int v33 = 0;
          char v175 = &v176;
          uint64_t v176 = 0;
          uint64_t v177 = 0;
        }
        else
        {
          std::string v147 = &v148;
        }
        long long v150 = v178;
        long long v178 = 0uLL;
        char v151 = 0;
        __p.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v175, v33);
        MEMORY[0x192FA3C30](&__p);
        if (v24) {
LABEL_105:
        }
          operator delete(v24);
      }
      else
      {
        while (1)
        {
          unint64_t v34 = *((void *)v31 + 1);
          if (v34)
          {
            int v35 = *(unsigned __int8 **)v31;
            uint64_t v36 = *((void *)v31 + 1);
            uint64_t v37 = *(unsigned __int8 **)v31;
            while (1)
            {
              int v38 = *v37;
              if (v38 != 32 && v38 != 9) {
                break;
              }
              ++v37;
              if (!--v36) {
                goto LABEL_55;
              }
            }
            unint64_t v74 = v37 - v35;
            if (v74 == -1)
            {
LABEL_55:
              unint64_t v34 = 0;
              goto LABEL_56;
            }
            BOOL v30 = v34 >= v74;
            v34 -= v74;
            if (!v30) {
              std::__throw_out_of_range[abi:fe180100]("string_view::substr");
            }
            int v40 = &v35[v74];
          }
          else
          {
LABEL_56:
            int v40 = 0;
          }
          int v41 = v40 - 1;
          unint64_t v42 = v34;
          if (v34)
          {
            while (1)
            {
              int v43 = &v41[v42];
              int v44 = v41[v42];
              if (v44 != 32 && v44 != 9) {
                break;
              }
              if (!--v42) {
                goto LABEL_64;
              }
            }
            uint64_t v48 = v43 - v40;
            if (v34 >= v43 - v40 + 1) {
              unint64_t v34 = v48 + 1;
            }
            unint64_t v46 = v48 == -1 ? 0 : v34;
            uint64_t v47 = v48 == -1 ? 0 : (uint64_t)v40;
          }
          else
          {
LABEL_64:
            unint64_t v46 = 0;
            uint64_t v47 = 0;
          }
          AMSCore::StringUtils::split(&v163, v47, v46, "=", 1, 0xFFFFFFFFFFFFFFFFLL);
          long long v49 = v163;
          unint64_t v50 = v164 - v163;
          if (v164 == v163 || v50 >= 0x21) {
            break;
          }
          uint64_t v51 = *(char **)v163;
          uint64_t v52 = *((void *)v163 + 1);
          int v53 = std::locale::classic();
          unint64_t v54 = std::locale::use_facet(v53, v21);
          if (v52 == 8)
          {
            long long v55 = v54;
            int v56 = ((uint64_t (*)(const std::locale::facet *, void))v54->__vftable[1].__on_zero_shared)(v54, *v51);
            if (v56 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v55->__vftable[1].__on_zero_shared)(v55, 110))
            {
              int v57 = ((uint64_t (*)(const std::locale::facet *, void))v55->__vftable[1].__on_zero_shared)(v55, v51[1]);
              if (v57 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v55->__vftable[1].__on_zero_shared)(v55, 111))
              {
                int v58 = ((uint64_t (*)(const std::locale::facet *, void))v55->__vftable[1].__on_zero_shared)(v55, v51[2]);
                if (v58 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v55->__vftable[1].__on_zero_shared)(v55, 45))
                {
                  int v59 = ((uint64_t (*)(const std::locale::facet *, void))v55->__vftable[1].__on_zero_shared)(v55, v51[3]);
                  if (v59 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v55->__vftable[1].__on_zero_shared)(v55, 99))
                  {
                    int v60 = ((uint64_t (*)(const std::locale::facet *, void))v55->__vftable[1].__on_zero_shared)(v55, v51[4]);
                    if (v60 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v55->__vftable[1].__on_zero_shared)(v55, 97))
                    {
                      int v61 = ((uint64_t (*)(const std::locale::facet *, void))v55->__vftable[1].__on_zero_shared)(v55, v51[5]);
                      if (v61 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v55->__vftable[1].__on_zero_shared)(v55, 99))
                      {
                        int v62 = ((uint64_t (*)(const std::locale::facet *, void))v55->__vftable[1].__on_zero_shared)(v55, v51[6]);
                        if (v62 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v55->__vftable[1].__on_zero_shared)(v55, 104))
                        {
                          int v63 = ((uint64_t (*)(const std::locale::facet *, void))v55->__vftable[1].__on_zero_shared)(v55, v51[7]);
                          if (v63 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v55->__vftable[1].__on_zero_shared)(v55, 101))
                          {
                            v145.__vftable = 0;
                            char v151 = 1;
                            long long v24 = v32;
                            goto LABEL_132;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v64 = std::locale::classic();
          unint64_t v65 = std::locale::use_facet(v64, v21);
          if (v52 == 7)
          {
            uint64_t v66 = v65;
            int v67 = ((uint64_t (*)(const std::locale::facet *, void))v65->__vftable[1].__on_zero_shared)(v65, *v51);
            if (v67 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v66->__vftable[1].__on_zero_shared)(v66, 109))
            {
              int v68 = ((uint64_t (*)(const std::locale::facet *, void))v66->__vftable[1].__on_zero_shared)(v66, v51[1]);
              if (v68 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v66->__vftable[1].__on_zero_shared)(v66, 97))
              {
                int v69 = ((uint64_t (*)(const std::locale::facet *, void))v66->__vftable[1].__on_zero_shared)(v66, v51[2]);
                if (v69 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v66->__vftable[1].__on_zero_shared)(v66, 120))
                {
                  int v70 = ((uint64_t (*)(const std::locale::facet *, void))v66->__vftable[1].__on_zero_shared)(v66, v51[3]);
                  if (v70 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v66->__vftable[1].__on_zero_shared)(v66, 45))
                  {
                    int v71 = ((uint64_t (*)(const std::locale::facet *, void))v66->__vftable[1].__on_zero_shared)(v66, v51[4]);
                    if (v71 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v66->__vftable[1].__on_zero_shared)(v66, 97))
                    {
                      int v72 = ((uint64_t (*)(const std::locale::facet *, void))v66->__vftable[1].__on_zero_shared)(v66, v51[5]);
                      if (v72 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v66->__vftable[1].__on_zero_shared)(v66, 103))
                      {
                        int v73 = ((uint64_t (*)(const std::locale::facet *, void))v66->__vftable[1].__on_zero_shared)(v66, v51[6]);
                        if (v73 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v66->__vftable[1].__on_zero_shared)(v66, 101))
                        {
                          if (v50 == 32)
                          {
                            int v77 = (const char *)*((void *)v49 + 3);
                            v167.__vftable = (std::system_error_vtbl *)*((void *)v49 + 2);
                            v167.__imp_.__imp_ = v77;
                            *(void *)std::string __what_arg = 0;
                            int v78 = (char *)v167.__vftable + (unint64_t)v77;
                            uint64_t v79 = std::__from_chars_integral[abi:fe180100]<unsigned long long,0>(v167.__vftable, (unsigned char *)v167.__vftable + (unint64_t)v77, __what_arg);
                            if (!v80 && v78 == v79)
                            {
                              uint64_t v81 = *(std::system_error_vtbl **)__what_arg;
                              long long v24 = v32;
                              goto LABEL_131;
                            }
                            AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[42],std::string_view &>((uint64_t)&__p, 3u, "Failed to parse value as number. value = ", (uint64_t *)&v167);
                            std::runtime_error::runtime_error(&v157, &__p);
                            v157.__ec_ = v174;
                            long long v83 = (unsigned int *)v176;
                            v157.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
                            uint64_t v158 = v175;
                            uint64_t v159 = v176;
                            uint64_t v160 = v177;
                            long long v24 = v32;
                            if (v177)
                            {
                              *(void *)(v176 + 16) = &v159;
                              long long v83 = 0;
                              char v175 = &v176;
                              uint64_t v176 = 0;
                              uint64_t v177 = 0;
                            }
                            else
                            {
                              uint64_t v158 = &v159;
                            }
                            long long v161 = v178;
                            long long v178 = 0uLL;
                            char v162 = 0;
                            __p.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
                            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v175, v83);
                            MEMORY[0x192FA3C30](&__p);
                            if (v162)
                            {
                              uint64_t v81 = v157.__vftable;
LABEL_131:
                              v145.__vftable = (std::runtime_error_vtbl *)v81;
                              char v151 = 1;
                            }
                            else
                            {
                              std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&__p);
                              std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Failed to parse Cache-Control max-age. Value: \"", 47);
                              std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__p, *((void *)v49 + 2), *((void *)v49 + 3));
                              std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__p, (uint64_t)"\"", 1);
                              std::stringbuf::str[abi:fe180100]((uint64_t)&__p.__imp_, &v172);
                              __p.__vftable = v133;
                              *(std::runtime_error_vtbl **)((char *)&__p.__vftable
                                                          + (unint64_t)v133[-1].~runtime_error) = v132;
                              __p.__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
                              if (v180 < 0) {
                                operator delete(v179);
                              }
                              std::streambuf::~streambuf();
                              std::ostream::~ostream();
                              MEMORY[0x192FA3FD0](v181);
                              *(void *)&v183.__val_ = 3;
                              v183.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
                              std::system_error::system_error(&v167, v183, &v172);
                              if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(v172.__r_.__value_.__l.__data_);
                              }
                              uint64_t v169 = 0;
                              uint64_t v170 = 0;
                              v167.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
                              uint64_t v168 = &v169;
                              long long v171 = 0uLL;
                              std::runtime_error::runtime_error((std::runtime_error *)__what_arg, &v167);
                              *(std::error_code *)&__what_arg[16] = v167.__ec_;
                              uint64_t v84 = (unsigned int *)v169;
                              *(void *)std::string __what_arg = &unk_1EDC827D8;
                              std::runtime_error v153 = v168;
                              uint64_t v154 = v169;
                              uint64_t v155 = v170;
                              if (v170)
                              {
                                *(void *)(v169 + 16) = &v154;
                                uint64_t v84 = 0;
                                uint64_t v168 = &v169;
                                uint64_t v169 = 0;
                                uint64_t v170 = 0;
                              }
                              else
                              {
                                std::runtime_error v153 = &v154;
                              }
                              long long v156 = v171;
                              long long v171 = 0uLL;
                              v167.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
                              std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v168, v84);
                              MEMORY[0x192FA3C30](&v167);
                              std::runtime_error::runtime_error(&v145, (const std::runtime_error *)__what_arg);
                              std::error_code ec = *(std::error_code *)&__what_arg[16];
                              char v85 = (unsigned int *)v154;
                              v145.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
                              std::string v147 = v153;
                              uint64_t v148 = v154;
                              uint64_t v149 = v155;
                              if (v155)
                              {
                                *(void *)(v154 + 16) = &v148;
                                char v85 = 0;
                                std::runtime_error v153 = &v154;
                                uint64_t v154 = 0;
                                uint64_t v155 = 0;
                              }
                              else
                              {
                                std::string v147 = &v148;
                              }
                              long long v150 = v156;
                              long long v156 = 0uLL;
                              char v151 = 0;
                              *(void *)std::string __what_arg = &unk_1EDC827D8;
                              std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v153, v85);
                              MEMORY[0x192FA3C30](__what_arg);
                              long long v24 = v32;
                              if (!v162) {
                                ((void (*)(std::system_error *))v157.~system_error)(&v157);
                              }
                            }
                          }
                          else
                          {
                            AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[48]>((uint64_t)&__p, 3u, "Cache-Control max-age directive has no argument");
                            std::runtime_error::runtime_error(&v145, &__p);
                            std::error_code ec = v174;
                            uint64_t v82 = (unsigned int *)v176;
                            v145.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
                            std::string v147 = v175;
                            uint64_t v148 = v176;
                            uint64_t v149 = v177;
                            if (v177)
                            {
                              *(void *)(v176 + 16) = &v148;
                              uint64_t v82 = 0;
                              char v175 = &v176;
                              uint64_t v176 = 0;
                              uint64_t v177 = 0;
                            }
                            else
                            {
                              std::string v147 = &v148;
                            }
                            long long v24 = v32;
                            long long v150 = v178;
                            long long v178 = 0uLL;
                            char v151 = 0;
                            __p.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
                            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v175, v82);
                            MEMORY[0x192FA3C30](&__p);
                          }
LABEL_132:
                          operator delete(v49);
                          if (v24) {
                            goto LABEL_105;
                          }
                          goto LABEL_106;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          operator delete(v49);
          v31 += 16;
          long long v24 = v32;
          if (v31 == v25) {
            goto LABEL_44;
          }
        }
        std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&__p);
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Cache-Control header is malformed. Header = ", 44);
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&__p, v47, v46);
        std::stringbuf::str[abi:fe180100]((uint64_t)&__p.__imp_, (std::string *)__what_arg);
        __p.__vftable = v133;
        *(std::runtime_error_vtbl **)((char *)&__p.__vftable + (unint64_t)v133[-1].~runtime_error) = v132;
        __p.__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
        if (v180 < 0) {
          operator delete(v179);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x192FA3FD0](v181);
        *(void *)&v182.__val_ = 3;
        v182.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
        std::system_error::system_error(&v157, v182, (const std::string *)__what_arg);
        if ((__what_arg[23] & 0x80000000) != 0) {
          operator delete(*(void **)__what_arg);
        }
        uint64_t v159 = 0;
        uint64_t v160 = 0;
        v157.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
        uint64_t v158 = &v159;
        long long v161 = 0uLL;
        std::runtime_error::runtime_error(&v167, &v157);
        v167.__ec_ = v157.__ec_;
        unint64_t v75 = (unsigned int *)v159;
        v167.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
        uint64_t v168 = v158;
        uint64_t v169 = v159;
        uint64_t v170 = v160;
        if (v160)
        {
          *(void *)(v159 + 16) = &v169;
          unint64_t v75 = 0;
          uint64_t v158 = &v159;
          uint64_t v159 = 0;
          uint64_t v160 = 0;
        }
        else
        {
          uint64_t v168 = &v169;
        }
        long long v171 = v161;
        long long v161 = 0uLL;
        v157.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v158, v75);
        MEMORY[0x192FA3C30](&v157);
        std::runtime_error::runtime_error(&v145, &v167);
        std::error_code ec = v167.__ec_;
        unint64_t v76 = (unsigned int *)v169;
        v145.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        std::string v147 = v168;
        uint64_t v148 = v169;
        uint64_t v149 = v170;
        if (v170)
        {
          *(void *)(v169 + 16) = &v148;
          unint64_t v76 = 0;
          uint64_t v168 = &v169;
          uint64_t v169 = 0;
          uint64_t v170 = 0;
        }
        else
        {
          std::string v147 = &v148;
        }
        long long v150 = v171;
        long long v171 = 0uLL;
        char v151 = 0;
        v167.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v168, v76);
        MEMORY[0x192FA3C30](&v167);
        if (v49) {
          operator delete(v49);
        }
        long long v24 = v32;
        if (v32) {
          goto LABEL_105;
        }
      }
LABEL_106:
      if (v151) {
        break;
      }
      ((void (*)(std::runtime_error *))v145.~runtime_error)(&v145);
      uint64_t v4 = (uint64_t *)*v136;
      if ((uint64_t *)*v136 == v135) {
        goto LABEL_146;
      }
    }
    v139.__vftable = v145.__vftable;
    char v144 = 1;
  }
  *((unsigned char *)&v174.__val_ + 7) = 4;
  strcpy((char *)&__p, "Date");
  unint64_t v87 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v131, (char *)&__p);
  uint64_t v88 = v87;
  if (v87)
  {
    uint64_t v89 = v87;
    do
    {
      uint64_t v89 = (uint64_t *)*v89;
      if (!v89) {
        break;
      }
      int v90 = *((char *)v89 + 39);
      uint64_t v91 = v90 >= 0 ? (char *)(v89 + 2) : (char *)v89[2];
      uint64_t v92 = v90 >= 0 ? (const char *)*((unsigned __int8 *)v89 + 39) : (const char *)v89[3];
      uint64_t v93 = *((char *)&v174.__val_ + 7) >= 0 ? &__p : (std::runtime_error *)__p.__vftable;
      uint64_t v94 = *((char *)&v174.__val_ + 7) >= 0 ? (const char *)*((unsigned __int8 *)&v174.__val_ + 7) : __p.__imp_.__imp_;
      uint64_t v95 = std::locale::classic();
      long long v96 = std::locale::use_facet(v95, MEMORY[0x1E4FBA258]);
      if (v92 != v94) {
        break;
      }
      uint64_t v137 = v91;
      if (v92)
      {
        unint64_t v97 = v96;
        unint64_t v98 = v92 - 1;
        uint64_t v99 = v93;
        while (1)
        {
          uint64_t v100 = v98;
          char v101 = (char)v99->__vftable;
          int v102 = ((uint64_t (*)(const std::locale::facet *, void))v97->__vftable[1].__on_zero_shared)(v97, *v91);
          if (v102 != ((unsigned int (*)(const std::locale::facet *, void))v97->__vftable[1].__on_zero_shared)(v97, v101))goto LABEL_177; {
          ++v91;
          }
          uint64_t v99 = (std::runtime_error *)((char *)v99 + 1);
          unint64_t v98 = v100 - 1;
          if (!v100) {
            goto LABEL_173;
          }
        }
      }
      uint64_t v99 = v93;
LABEL_173:
      ;
    }
    while (v91 == &v92[(void)v137] && v99 == (std::runtime_error *)&v92[(void)v93]);
  }
  else
  {
    uint64_t v89 = 0;
  }
LABEL_177:
  if (*((char *)&v174.__val_ + 7) < 0)
  {
    operator delete(__p.__vftable);
    if (v89 != v88)
    {
LABEL_181:
      while (1)
      {
        if (*((char *)v88 + 63) < 0)
        {
          uint64_t v103 = v88[5];
          uint64_t v104 = v88[6];
        }
        else
        {
          uint64_t v103 = (uint64_t)(v88 + 5);
          uint64_t v104 = *((unsigned __int8 *)v88 + 63);
        }
        AMSCore::CookieUtils::parseDateString((uint64_t)&__p, v103, v104);
        if ((_BYTE)v179) {
          break;
        }
        ((void (*)(std::runtime_error *))__p.~runtime_error)(&__p);
        uint64_t v88 = (uint64_t *)*v88;
        if (v88 == v89) {
          goto LABEL_186;
        }
      }
      v157.__vftable = (std::system_error_vtbl *)__p.__vftable;
      char v162 = 1;
      uint64_t v105 = a1;
LABEL_191:
      if (v144)
      {
        *(void *)uint64_t v105 = (char *)v157.__vftable + 1000000 * (uint64_t)v139.__vftable;
        *(unsigned char *)(v105 + 72) = 1;
        return;
      }
      goto LABEL_242;
    }
  }
  else if (v89 != v88)
  {
    goto LABEL_181;
  }
LABEL_186:
  AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[23]>((uint64_t)&__p, 0xCu, "Date header is missing");
  uint64_t v105 = a1;
  std::runtime_error::runtime_error(&v157, &__p);
  v157.__ec_ = v174;
  uint64_t v106 = (unsigned int *)v176;
  v157.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  uint64_t v158 = v175;
  uint64_t v159 = v176;
  uint64_t v160 = v177;
  if (v177)
  {
    *(void *)(v176 + 16) = &v159;
    char v175 = &v176;
    uint64_t v176 = 0;
    uint64_t v177 = 0;
    uint64_t v106 = 0;
  }
  else
  {
    uint64_t v158 = &v159;
  }
  long long v161 = v178;
  long long v178 = 0uLL;
  char v162 = 0;
  __p.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v175, v106);
  MEMORY[0x192FA3C30](&__p);
  if (v162) {
    goto LABEL_191;
  }
  if (!a4)
  {
    ((void (*)(std::system_error *))v157.~system_error)(&v157);
    if (v144) {
      goto LABEL_199;
    }
    goto LABEL_198;
  }
  if (!v144)
  {
LABEL_242:
    __break(1u);
    return;
  }
  *(void *)a1 = a3 + 1000000 * (uint64_t)v139.__vftable;
  *(unsigned char *)(a1 + 72) = 1;
  ((void (*)(std::system_error *))v157.~system_error)(&v157);
  if (!v144) {
    ((void (*)(std::runtime_error *))v139.~runtime_error)(&v139);
  }
}

void sub_18DB5D218(void *a1)
{
  if (SLOBYTE(STACK[0x2C7]) < 0)
  {
    operator delete((void *)STACK[0x2B0]);
    __clang_call_terminate(a1);
  }
  __clang_call_terminate(a1);
}

std::runtime_error *AMSCore::HTTPResponseAction::createCancelAction(AMSCore::HTTPResponseAction *this, const std::runtime_error *a2)
{
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 24) = 0;
  *((unsigned char *)this + 32) = 0;
  *((unsigned char *)this + 48) = 0;
  *((unsigned char *)this + 56) = 0;
  *((unsigned char *)this + 128) = 0;
  *((unsigned char *)this + 136) = 0;
  *((unsigned char *)this + 288) = 0;
  *((unsigned char *)this + 296) = 0;
  *((unsigned char *)this + 300) = 0;
  *((unsigned char *)this + 304) = 0;
  *((unsigned char *)this + 336) = 0;
  *((_WORD *)this + 172) = 0;
  *((unsigned char *)this + 352) = 0;
  *((unsigned char *)this + 376) = 0;
  *((unsigned char *)this + 384) = 0;
  *((unsigned char *)this + 408) = 0;
  *((unsigned char *)this + 416) = 0;
  *((unsigned char *)this + 448) = 0;
  *((unsigned char *)this + 456) = 0;
  uint64_t result = AMSCore::Error::Error((std::runtime_error *)((char *)this + 56), a2);
  *((unsigned char *)this + 128) = 1;
  return result;
}

void sub_18DB5D31C(_Unwind_Exception *a1)
{
  AMSCore::HTTPResponseAction::~HTTPResponseAction(v1);
  _Unwind_Resume(a1);
}

void AMSCore::HTTPResponseAction::createRedirectAction(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  uint64_t v4 = a1 + 136;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 288) = 0;
  *(unsigned char *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 336) = 0;
  *(_WORD *)(a1 + 344) = 0;
  *(unsigned char *)(a1 + 352) = 0;
  *(unsigned char *)(a1 + 376) = 0;
  *(unsigned char *)(a1 + 384) = 0;
  *(unsigned char *)(a1 + 408) = 0;
  *(unsigned char *)(a1 + 416) = 0;
  *(unsigned char *)(a1 + 448) = 0;
  *(unsigned char *)(a1 + 456) = 2;
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 152);
  *(unsigned char *)(a1 + 300) = *(unsigned char *)(a2 + 156);
  if (!*(unsigned char *)(a2 + 192))
  {
    *(_WORD *)(a1 + 344) = *(_WORD *)(a2 + 200);
    goto LABEL_10;
  }
  *(_DWORD *)(a1 + 328) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 184);
  if (v5 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1EDCA5520[v5])(&v13, a1 + 304, a2 + 160);
    *(_DWORD *)(a1 + 328) = v5;
    uint64_t v6 = *(unsigned int *)(a2 + 184);
    if (v6 != -1)
    {
      if (!v6) {
        goto LABEL_7;
      }
      ((void (*)(char *, uint64_t))off_1EDCA54D0[v6])(&v14, a2 + 160);
    }
  }
  *(_DWORD *)(a2 + 184) = 0;
LABEL_7:
  *(unsigned char *)(a1 + 336) = 1;
  int v7 = *(unsigned __int8 *)(a1 + 288);
  *(_WORD *)(a1 + 344) = *(_WORD *)(a2 + 200);
  if (v7)
  {
    AMSCore::URL::operator=(v4, (long long *)a2);
LABEL_20:
    std::__optional_storage_base<AMSCore::AuthenticateResult,false>::__assign_from[abi:fe180100]<std::__optional_move_assign_base<AMSCore::AuthenticateResult,false>>(a1 + 416, (long long *)(a2 + 208));
    return;
  }
LABEL_10:
  *(unsigned char *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
    *(void *)(v4 + 16) = *(void *)(a2 + 16);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(a1 + 160) = 1;
  }
  *(unsigned char *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  if (*(unsigned char *)(a2 + 56))
  {
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 184) = *(void *)(a2 + 48);
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 32) = 0;
    *(unsigned char *)(a1 + 192) = 1;
  }
  *(unsigned char *)(a1 + 200) = 0;
  *(unsigned char *)(a1 + 224) = 0;
  if (*(unsigned char *)(a2 + 88))
  {
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 216) = *(void *)(a2 + 80);
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 64) = 0;
    *(unsigned char *)(a1 + 224) = 1;
  }
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 96);
  *(void *)(a1 + 240) = a1 + 240;
  *(void *)(a1 + 248) = a1 + 240;
  *(void *)(a1 + 256) = 0;
  if (v4 != a2)
  {
    uint64_t v8 = *(void *)(a2 + 120);
    if (v8)
    {
      uint64_t v10 = *(void *)(a2 + 104);
      long long v9 = *(uint64_t **)(a2 + 112);
      uint64_t v11 = *v9;
      *(void *)(v11 + 8) = *(void *)(v10 + 8);
      **(void **)(v10 + 8) = v11;
      uint64_t v12 = *(void *)(a1 + 240);
      *(void *)(v12 + 8) = v9;
      uint64_t *v9 = v12;
      *(void *)(a1 + 240) = v10;
      *(void *)(v10 + 8) = a1 + 240;
      *(void *)(a1 + 256) = v8;
      *(void *)(a2 + 120) = 0;
    }
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 128);
    *(void *)(a1 + 280) = *(void *)(a2 + 144);
    *(void *)(a2 + 136) = 0;
    *(void *)(a2 + 144) = 0;
    *(void *)(a2 + 128) = 0;
    *(unsigned char *)(a1 + 288) = 1;
    goto LABEL_20;
  }
  __break(1u);
}

double AMSCore::HTTPResponseAction::createRetryAction(uint64_t a1, long long *a2, uint64_t a3, long long *a4)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 288) = 0;
  *(unsigned char *)(a1 + 296) = 0;
  *(unsigned char *)(a1 + 300) = 0;
  *(unsigned char *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 336) = 0;
  *(_WORD *)(a1 + 344) = 0;
  *(unsigned char *)(a1 + 416) = 0;
  *(unsigned char *)(a1 + 448) = 0;
  *(unsigned char *)(a1 + 456) = 3;
  long long v4 = *a2;
  *(void *)(a1 + 368) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 352) = v4;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(unsigned char *)(a1 + 376) = 1;
  *(void *)(a1 + 400) = *(void *)(a3 + 16);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)a3;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(unsigned char *)(a1 + 408) = 1;
  *(void *)&double result = std::__optional_storage_base<AMSCore::AuthenticateResult,false>::__assign_from[abi:fe180100]<std::__optional_move_assign_base<AMSCore::AuthenticateResult,false>>(a1 + 416, a4).n128_u64[0];
  return result;
}

uint64_t AMSCore::EncodeHTTPRequestTask::OptionsBuilder::OptionsBuilder(uint64_t a1, long long *a2, long long *a3, long long *a4)
{
  LOBYTE(v21) = 0;
  char v23 = 0;
  int v5 = *((unsigned __int8 *)a2 + 24);
  if (*((unsigned char *)a2 + 24))
  {
    long long v21 = *a2;
    uint64_t v22 = *((void *)a2 + 2);
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    char v23 = 1;
  }
  LOBYTE(v24) = 0;
  char v26 = 0;
  int v6 = *((unsigned __int8 *)a2 + 56);
  if (*((unsigned char *)a2 + 56))
  {
    long long v24 = a2[2];
    uint64_t v25 = *((void *)a2 + 6);
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 4) = 0;
    char v26 = 1;
  }
  LOBYTE(v27) = 0;
  char v29 = 0;
  int v7 = *((unsigned __int8 *)a2 + 88);
  if (*((unsigned char *)a2 + 88))
  {
    long long v27 = a2[4];
    uint64_t v28 = *((void *)a2 + 10);
    *((void *)a2 + 9) = 0;
    *((void *)a2 + 10) = 0;
    *((void *)a2 + 8) = 0;
    char v29 = 1;
  }
  int v30 = *((_DWORD *)a2 + 24);
  uint64_t v8 = &v31;
  int v31 = &v31;
  int v32 = &v31;
  uint64_t v33 = 0;
  if (&v21 == a2) {
    goto LABEL_21;
  }
  uint64_t v9 = *((void *)a2 + 15);
  if (v9)
  {
    uint64_t v11 = (void *)*((void *)a2 + 13);
    uint64_t v10 = (uint64_t *)*((void *)a2 + 14);
    uint64_t v12 = *v10;
    *(void *)(v12 + 8) = v11[1];
    *(void *)v11[1] = v12;
    char v13 = v31;
    v31[1] = v10;
    uint64_t *v10 = (uint64_t)v13;
    v11[1] = &v31;
    int v31 = v11;
    uint64_t v33 = v9;
    *((void *)a2 + 15) = 0;
    uint64_t v8 = v11;
  }
  long long v34 = a2[8];
  uint64_t v35 = *((void *)a2 + 18);
  *((void *)a2 + 17) = 0;
  *((void *)a2 + 18) = 0;
  *((void *)a2 + 16) = 0;
  long long v14 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  long long v15 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  *(_DWORD *)(a1 + 15) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 24) = v14;
  *(_OWORD *)(a1 + 40) = v15;
  *(_DWORD *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 1065353216;
  *(_WORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 172) = 2;
  *(unsigned char *)(a1 + 176) = 0;
  long long v16 = (long long *)(a1 + 176);
  *(unsigned char *)(a1 + 200) = 0;
  if (v5)
  {
    *long long v16 = v21;
    *(void *)(a1 + 192) = v22;
    uint64_t v22 = 0;
    long long v21 = 0uLL;
    *(unsigned char *)(a1 + 200) = 1;
  }
  *(unsigned char *)(a1 + 208) = 0;
  *(unsigned char *)(a1 + 232) = 0;
  if (v6)
  {
    *(_OWORD *)(a1 + 208) = v24;
    *(void *)(a1 + 224) = v25;
    uint64_t v25 = 0;
    long long v24 = 0uLL;
    *(unsigned char *)(a1 + 232) = 1;
  }
  *(unsigned char *)(a1 + 240) = 0;
  *(unsigned char *)(a1 + 264) = 0;
  if (v7)
  {
    *(_OWORD *)(a1 + 240) = v27;
    *(void *)(a1 + 256) = v28;
    uint64_t v28 = 0;
    long long v27 = 0uLL;
    *(unsigned char *)(a1 + 264) = 1;
  }
  *(_DWORD *)(a1 + 272) = v30;
  *(void *)(a1 + 280) = a1 + 280;
  *(void *)(a1 + 288) = a1 + 280;
  *(void *)(a1 + 296) = 0;
  if (v16 == &v21)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v9)
  {
    long long v17 = v32;
    uint64_t v18 = *v32;
    *(void *)(v18 + 8) = v8[1];
    *(void *)v8[1] = v18;
    uint64_t v19 = *(void *)(a1 + 280);
    *(void *)(v19 + 8) = v17;
    *long long v17 = v19;
    *(void *)(a1 + 280) = v8;
    v8[1] = a1 + 280;
    *(void *)(a1 + 296) = v9;
    uint64_t v33 = 0;
  }
  *(_OWORD *)(a1 + 304) = v34;
  *(void *)(a1 + 320) = v35;
  uint64_t v35 = 0;
  long long v34 = 0uLL;
  *(unsigned char *)(a1 + 328) = 0;
  *(unsigned char *)(a1 + 336) = 0;
  *(unsigned char *)(a1 + 360) = 0;
  if (!(void)v14) {
LABEL_22:
  }
    std::terminate();
  AMSCore::URL::~URL((AMSCore::URL *)&v21);
  return a1;
}

std::runtime_error *AMSCore::EncodeHTTPRequestTask::OptionsBuilder::make(std::runtime_error *result)
{
  uint64_t v1 = result[60].__vftable;
  if (LOBYTE(v1[3].what))
  {
    std::chrono::system_clock::time_point v2 = result;
    uint64_t v3 = result + 47;
    long long v4 = (const std::runtime_error *)&v1->~runtime_error_0;
    char v5 = (char)v1[3].~runtime_error_0;
    if (v5)
    {
      result[47].__vftable = (std::runtime_error_vtbl *)v1->~runtime_error_0;
      p_int imp = &result[47].__imp_;
      p_what = (std::__libcpp_refstring *)&v1->what;
    }
    else
    {
      std::runtime_error::runtime_error(result + 47, v4);
      v2[48] = *(std::runtime_error *)&v1[1].~runtime_error;
      v2[47].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v8 = v1 + 2;
      uint64_t v9 = v1[2].~runtime_error;
      v2[49].__vftable = (std::runtime_error_vtbl *)v1[1].what;
      uint64_t v10 = (std::runtime_error_vtbl *)&v2[49].__imp_;
      v2[49].__imp_.__imp_ = (const char *)v9;
      uint64_t v11 = v1[2].~runtime_error_0;
      v2[50].__vftable = (std::runtime_error_vtbl *)v11;
      if (v11)
      {
        *((void *)v9 + 2) = v10;
        v1[1].what = (const char *(__cdecl *)(const std::runtime_error *__hidden))v8;
        v8->~runtime_error = 0;
        v1[2].~runtime_error_0 = 0;
      }
      else
      {
        v2[49].__vftable = v10;
      }
      uint64_t v12 = (const std::runtime_error *)v2[60].__vftable;
      char v13 = v12[4].__vftable;
      long long v4 = v12 + 4;
      v2[50].__imp_.__imp_ = (const char *)v13;
      p_int imp = (std::__libcpp_refstring *)&v2[51];
      p_what = &v4->__imp_;
    }
    p_imp->__imp_ = p_what->__imp_;
    v4->__vftable = 0;
    v4->__imp_.__imp_ = 0;
    LOBYTE(v2[51].__imp_.__imp_) = v5;
    int imp = v2[60].__imp_.__imp_;
    if (imp && !atomic_fetch_add((atomic_ullong *volatile)imp + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      long long v15 = (std::__shared_weak_count *)v2[60].__imp_.__imp_;
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    long long v16 = (std::__shared_weak_count *)v2[57].__imp_.__imp_;
    if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    long long v17 = (std::__shared_weak_count *)v2[58].__imp_.__imp_;
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    uint64_t v18 = &v2[50].__imp_;
    if (LOBYTE(v2[51].__imp_.__imp_))
    {
      LOBYTE(v2[37].__imp_.__imp_) = 0;
      LOBYTE(v2[39].__vftable) = 0;
      if (LOBYTE(v2[29].__imp_.__imp_))
      {
        *(std::runtime_error *)((char *)v2 + 600) = v2[28];
        v2[38].__imp_.__imp_ = (const char *)v2[29].__vftable;
        v2[28].__imp_.__imp_ = 0;
        v2[29].__vftable = 0;
        v2[28].__vftable = 0;
        LOBYTE(v2[39].__vftable) = 1;
      }
      LOBYTE(v2[39].__imp_.__imp_) = 0;
      LOBYTE(v2[41].__vftable) = 0;
      if (LOBYTE(v2[31].__imp_.__imp_))
      {
        *(std::runtime_error *)((char *)v2 + 632) = v2[30];
        v2[40].__imp_.__imp_ = (const char *)v2[31].__vftable;
        v2[30].__imp_.__imp_ = 0;
        v2[31].__vftable = 0;
        v2[30].__vftable = 0;
        LOBYTE(v2[41].__vftable) = 1;
      }
      LOBYTE(v2[41].__imp_.__imp_) = 0;
      LOBYTE(v2[43].__vftable) = 0;
      if (LOBYTE(v2[33].__imp_.__imp_))
      {
        *(std::runtime_error *)((char *)v2 + 664) = v2[32];
        v2[42].__imp_.__imp_ = (const char *)v2[33].__vftable;
        v2[32].__vftable = 0;
        v2[33].__vftable = 0;
        v2[32].__imp_.__imp_ = 0;
        LOBYTE(v2[43].__vftable) = 1;
      }
      LODWORD(v2[43].__imp_.__imp_) = v2[34].__vftable;
      v2[44].__vftable = (std::runtime_error_vtbl *)&v2[44];
      v2[44].__imp_.__imp_ = (const char *)&v2[44];
      v2[45].__vftable = 0;
      uint64_t v19 = (std::runtime_error_vtbl *)v2[35].__imp_.__imp_;
      if (v19)
      {
        int v20 = v2[35].__vftable;
        long long v21 = (std::runtime_error_vtbl *)v2[34].__imp_.__imp_;
        uint64_t v22 = v20->~runtime_error;
        *((void *)v22 + 1) = v21->~runtime_error_0;
        *(void *)v21->~runtime_error_0 = v22;
        char v23 = v2[44].__vftable;
        v23->~runtime_error_0 = (void (__cdecl *)(std::runtime_error *__hidden))v20;
        v20->~runtime_error = (void (__cdecl *)(std::runtime_error *__hidden))v23;
        v2[44].__vftable = v21;
        v21->~runtime_error_0 = (void (__cdecl *)(std::runtime_error *__hidden))&v2[44];
        v2[45].__vftable = v19;
        v2[35].__imp_.__imp_ = 0;
      }
      *(std::runtime_error *)((char *)v2 + 728) = v2[36];
      v2[46].__imp_.__imp_ = (const char *)v2[37].__vftable;
      v2[36].__vftable = 0;
      v2[37].__vftable = 0;
      v2[36].__imp_.__imp_ = 0;
      std::runtime_error v51 = v2[47];
      v3->__vftable = 0;
      v3->__imp_.__imp_ = 0;
      long long v24 = v2[55].__vftable;
      v2[59].__vftable = (std::runtime_error_vtbl *)v24[2].~runtime_error_0;
      what = v24[2].what;
      v2[59].__imp_.__imp_ = (const char *)what;
      if (what) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)what + 1, 1uLL, memory_order_relaxed);
      }
      AMSCore::EncodeHTTPRequestTask::OptionsBuilder::OptionsBuilder((uint64_t)&v45, (long long *)&v2[37].__imp_, (long long *)&v51, (long long *)&v2[59]);
      if (LOBYTE(v2[25].__vftable))
      {
        char v26 = (void **)&v2[1].__imp_;
        if (LOBYTE(v2[24].__imp_.__imp_)) {
          AMSCore::EncodeHTTPRequestTask::Options::~Options(v26);
        }
        else {
          (*(void (**)(void **))*v26)(v26);
        }
        LOBYTE(v2[25].__vftable) = 0;
      }
      AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)&v2[1].__imp_, (uint64_t)&v45);
      LOBYTE(v2[24].__imp_.__imp_) = 1;
      LOBYTE(v2[25].__vftable) = 1;
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v45.__vftable);
      int v30 = (std::__shared_weak_count *)v2[59].__imp_.__imp_;
      if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
      int v31 = (std::__shared_weak_count *)v51.__imp_.__imp_;
      if (v51.__imp_.__imp_ && !atomic_fetch_add((atomic_ullong *volatile)v51.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
      AMSCore::URL::~URL((AMSCore::URL *)&v2[37].__imp_);
    }
    else
    {
      std::runtime_error::runtime_error(&v45, v3);
      std::runtime_error v46 = v2[48];
      long long v27 = (unsigned int **)v2[49].__vftable;
      v45.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v28 = v2[49].__imp_.__imp_;
      char v29 = (unsigned int *)v2[50].__vftable;
      uint64_t v47 = v27;
      v48[0] = (unsigned int *)v28;
      v48[1] = v29;
      if (v29)
      {
        *((void *)v28 + 2) = v48;
        v2[49].__vftable = (std::runtime_error_vtbl *)&v2[49].__imp_;
        v2[49].__imp_.__imp_ = 0;
        v2[50].__vftable = 0;
      }
      else
      {
        uint64_t v47 = v48;
      }
      long long v49 = *(_OWORD *)&v18->__imp_;
      v18->__imp_ = 0;
      v2[51].__vftable = 0;
      char v50 = 1;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v39, (uint64_t)&v45);
      if (LOBYTE(v2[25].__vftable))
      {
        if (LOBYTE(v2[24].__imp_.__imp_)) {
          AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v2[1].__imp_);
        }
        else {
          (*(void (**)(std::__libcpp_refstring *))v2[1].__imp_.__imp_)(&v2[1].__imp_);
        }
        LOBYTE(v2[25].__vftable) = 0;
      }
      std::runtime_error::runtime_error((std::runtime_error *)((char *)v2 + 24), &v39);
      long long v32 = v40;
      long long v34 = (const char *)v41;
      uint64_t v33 = v42;
      v2[4].__vftable = v42;
      uint64_t v35 = (const char *)&v2[4];
      *(_OWORD *)&v2[2].__imp_.__imp_ = v32;
      v2[1].__imp_.__imp_ = (const char *)&unk_1EDC827D8;
      uint64_t v36 = v43;
      v2[3].__imp_.__imp_ = v34;
      v2[4].__imp_.__imp_ = v36;
      if (v36)
      {
        v33->what = (const char *(__cdecl *)(const std::runtime_error *__hidden))v35;
        int v41 = &v42;
        unint64_t v42 = 0;
        int v43 = 0;
        uint64_t v33 = 0;
      }
      else
      {
        v2[3].__imp_.__imp_ = v35;
      }
      v2[5] = v44;
      std::runtime_error v44 = (std::runtime_error)0;
      LOBYTE(v2[24].__imp_.__imp_) = 0;
      LOBYTE(v2[25].__vftable) = 1;
      v39.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v41, (unsigned int *)v33);
      MEMORY[0x192FA3C30](&v39);
      if (v50)
      {
        v45.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        uint64_t v37 = (std::__shared_weak_count *)*((void *)&v49 + 1);
        if (*((void *)&v49 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v49 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v47, v48[0]);
        MEMORY[0x192FA3C30](&v45);
      }
    }
    if (LOBYTE(v2[51].__imp_.__imp_))
    {
      int v38 = (std::__shared_weak_count *)v2[47].__imp_.__imp_;
      if (v38)
      {
        if (!atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
    }
    else
    {
      ((void (*)(const std::runtime_error *))v3->~runtime_error)(v3);
    }
    v2[47].__vftable = (std::runtime_error_vtbl *)&v2[1];
    v2->__vftable = 0;
    LOBYTE(v2[61].__vftable) = 1;
    return (std::runtime_error *)AMSCore::Task<AMSCore::EncodeHTTPRequestTask::OptionsBuilder,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void AMSCore::EncodeHTTPRequestTask::OptionsBuilder::make(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 976) & 1) == 0)
  {
    uint64_t v2 = *(void *)(a1 + 968);
    if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v3 = *(std::__shared_weak_count **)(a1 + 968);
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    long long v4 = *(std::__shared_weak_count **)(a1 + 920);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    char v5 = *(std::__shared_weak_count **)(a1 + 936);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  uint64_t v6 = *(void *)(a1 + 440);
  if (v6 == a1 + 416)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 416) + 32))(a1 + 416);
    if (!*(unsigned char *)(a1 + 400)) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  if (*(unsigned char *)(a1 + 400))
  {
LABEL_17:
    int v7 = (void **)(a1 + 24);
    if (*(unsigned char *)(a1 + 392)) {
      AMSCore::EncodeHTTPRequestTask::Options::~Options(v7);
    }
    else {
      (*(void (**)(void **))*v7)(v7);
    }
  }
LABEL_20:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 904);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 888);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  AMSCore::URL::~URL((AMSCore::URL *)(a1 + 448));
  operator delete((void *)a1);
}

void AMSCore::Task<AMSCore::EncodeHTTPRequestTask::OptionsBuilder,AMSCore::Error>::Promise::unhandled_exception()
{
  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

uint64_t sub_18DB5E27C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, long long a19, uint64_t a20,uint64_t a21,uint64_t a22,long long a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v41, (uint64_t)v38);
  if (*(unsigned char *)(v29 + 384))
  {
    if (*(unsigned char *)(v29 + 376)) {
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v30->__vftable);
    }
    else {
      ((void (*)(std::runtime_error *))v30->~runtime_error)(v30);
    }
    *(unsigned char *)(v29 + 384) = 0;
  }
  std::runtime_error::runtime_error(v30, v41);
  std::runtime_error v31 = v41[1];
  uint64_t v33 = v42;
  uint64_t v32 = v43;
  *(void *)(v29 + 48) = v43;
  uint64_t v34 = v29 + 48;
  *(std::runtime_error *)(v29 + 24) = v31;
  *(void *)(v29 + 8) = &unk_1EDC827D8;
  uint64_t v35 = v44;
  *(void *)(v29 + 40) = v33;
  *(void *)(v29 + 56) = v35;
  if (v35)
  {
    *(void *)(v32 + 16) = v34;
    unint64_t v42 = &v43;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v32 = 0;
  }
  else
  {
    *(void *)(v29 + 40) = v34;
  }
  *(_OWORD *)(v29 + 64) = v45;
  long long v45 = 0uLL;
  *(unsigned char *)(v29 + 376) = 0;
  *(unsigned char *)(v29 + 384) = 1;
  v41[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v42, (unsigned int *)v32);
  MEMORY[0x192FA3C30](v41);
  v38[0] = &unk_1EDC827D8;
  uint64_t v36 = v40;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v39, v39[1]);
  return MEMORY[0x192FA3C30](v38);
}

uint64_t AMSCore::Task<AMSCore::EncodeHTTPRequestTask::OptionsBuilder,AMSCore::Error>::Promise::Awaiter::await_suspend(uint64_t result)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void (**)(void))atomic_exchange((atomic_ullong *volatile)(*(void *)result + 392), 1uLL);
  if (v1)
  {
    uint64_t v2 = result;
    if (v1 == (void (**)(void))2) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result - 8))(*(void *)result - 16);
    }
    uint64_t v3 = *(void *)result;
    double result = *(void *)(*(void *)result + 424);
    if (result)
    {
      if (result == v3 + 400)
      {
        long long v17 = v16;
        double result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 24))(result, v16);
      }
      else
      {
        long long v17 = (void *)result;
        *(void *)(v3 + 424) = 0;
      }
    }
    else
    {
      long long v17 = 0;
    }
    if (v17)
    {
      uint64_t v4 = *(void *)v2;
      if (!*(unsigned char *)(*(void *)v2 + 384))
      {
        __break(1u);
        return result;
      }
      char v5 = (const std::runtime_error *)(v4 + 8);
      char v6 = *(unsigned char *)(v4 + 376);
      if (v6)
      {
        AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v10, (uint64_t)v5);
      }
      else
      {
        std::runtime_error::runtime_error(v10, v5);
        int v7 = (void *)(v4 + 48);
        uint64_t v8 = *(void *)(v4 + 48);
        v10[1] = *(std::runtime_error *)(v4 + 24);
        uint64_t v9 = *(uint64_t **)(v4 + 40);
        v10[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        uint64_t v11 = v9;
        uint64_t v12 = v8;
        if (*(void *)(v4 + 56))
        {
          *(void *)(v8 + 16) = &v12;
          *(void *)(v4 + 40) = v7;
          void *v7 = 0;
          *(void *)(v4 + 56) = 0;
        }
        else
        {
          uint64_t v11 = &v12;
        }
        long long v14 = *(_OWORD *)(v4 + 64);
        *(void *)(v4 + 64) = 0;
        *(void *)(v4 + 72) = 0;
      }
      char v15 = v6;
      if (!v17) {
        std::__throw_bad_function_call[abi:fe180100]();
      }
      (*(void (**)(void *, std::runtime_error *))(*v17 + 48))(v17, v10);
      if (v15) {
        AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v10[0].__vftable);
      }
      else {
        ((void (*)(std::runtime_error *))v10[0].~runtime_error)(v10);
      }
    }
    else
    {
      (*v1)(v1);
    }
    double result = (uint64_t)v17;
    if (v17 == v16)
    {
      return (*(uint64_t (**)(void *))(v16[0] + 32))(v16);
    }
    else if (v17)
    {
      return (*(uint64_t (**)(void *))(*v17 + 40))(v17);
    }
  }
  return result;
}

void sub_18DB5E690(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AMSCore::Task<AMSCore::EncodeHTTPRequestTask::OptionsBuilder,AMSCore::Error>::ValuePromise::~ValuePromise(uint64_t a1)
{
  uint64_t v2 = a1 + 400;
  uint64_t v3 = *(void *)(a1 + 424);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    if (!*(unsigned char *)(a1 + 384)) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  if (*(unsigned char *)(a1 + 384))
  {
LABEL_7:
    uint64_t v4 = (void **)(a1 + 8);
    if (*(unsigned char *)(a1 + 376)) {
      AMSCore::EncodeHTTPRequestTask::Options::~Options(v4);
    }
    else {
      (*(void (**)(void **))*v4)(v4);
    }
  }
LABEL_10:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::OptionsBuilder,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::EncodeHTTPRequestTask::OptionsBuilder,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::OptionsBuilder,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINS_21EncodeHTTPRequestTask14OptionsBuilderENS_5ErrorEE7Promise17get_return_objectEv"
                     "E13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINS_21EncodeHTTPRequestTask14OptionsBuilderENS_5ErrorEE7Promise17get_retu"
                                "rn_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINS_21EncodeHTTPRequestTask14OptionsBuilderENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINS_21EncodeHTTPRequestTask14OptionsBuilderENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::OptionsBuilder,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::EncodeHTTPRequestTask::OptionsBuilder,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::OptionsBuilder,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 392), 2uLL)) {
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::OptionsBuilder,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::EncodeHTTPRequestTask::OptionsBuilder,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::OptionsBuilder,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

uint64_t AMSCore::EncodeHTTPRequestTask::OptionsBuilder::withHeader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = (void *)(a1 + 128);
  if (*(unsigned char *)(a3 + 24))
  {
    int v7 = (char *)operator new(0x40uLL);
    uint64_t v8 = (uint64_t)v7;
    uint64_t v9 = v7 + 16;
    *(void *)int v7 = 0;
    *((void *)v7 + 1) = 0;
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v7 + 16), *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
      *((void *)v7 + 4) = *(void *)(a2 + 16);
    }
    *(_OWORD *)(v8 + 40) = *(_OWORD *)a3;
    *(void *)(v8 + 56) = *(void *)(a3 + 16);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    int v10 = *(char *)(v8 + 39);
    if (v10 >= 0) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = *(char **)(v8 + 16);
    }
    if (v10 >= 0) {
      uint64_t v12 = *(unsigned __int8 *)(v8 + 39);
    }
    else {
      uint64_t v12 = *(void *)(v8 + 24);
    }
    char v13 = std::locale::classic();
    long long v14 = std::locale::use_facet(v13, MEMORY[0x1E4FBA258]);
    if (v12)
    {
      char v15 = v14;
      uint64_t v16 = 0;
      do
      {
        v16 ^= 2
             * ((int (*)(const std::locale::facet *, void))v15->__vftable[1].__on_zero_shared)(v15, *v11++);
        --v12;
      }
      while (v12);
    }
    else
    {
      uint64_t v16 = 0;
    }
    *(void *)(v8 + 8) = v16;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(v5, v8);
  }
  else
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>((void *)(a1 + 128), a2);
  }
  return a1;
}

void sub_18DB5E9B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void AMSCore::EncodeHTTPRequestTask::internal::makeOptionsBuilder(uint64_t a1, long long *a2, long long *a3)
{
  LOBYTE(v16) = 0;
  char v18 = 0;
  int v3 = *((unsigned __int8 *)a2 + 24);
  if (*((unsigned char *)a2 + 24))
  {
    long long v16 = *a2;
    uint64_t v17 = *((void *)a2 + 2);
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    char v18 = 1;
  }
  LOBYTE(v19) = 0;
  char v21 = 0;
  int v4 = *((unsigned __int8 *)a2 + 56);
  if (*((unsigned char *)a2 + 56))
  {
    long long v19 = a2[2];
    uint64_t v20 = *((void *)a2 + 6);
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 4) = 0;
    char v21 = 1;
  }
  LOBYTE(v22) = 0;
  char v24 = 0;
  int v5 = *((unsigned __int8 *)a2 + 88);
  if (*((unsigned char *)a2 + 88))
  {
    long long v22 = a2[4];
    uint64_t v23 = *((void *)a2 + 10);
    *((void *)a2 + 9) = 0;
    *((void *)a2 + 10) = 0;
    *((void *)a2 + 8) = 0;
    char v24 = 1;
  }
  int v25 = *((_DWORD *)a2 + 24);
  char v6 = &v26;
  char v26 = &v26;
  long long v27 = &v26;
  uint64_t v28 = 0;
  if (&v16 == a2)
  {
    __break(1u);
  }
  else
  {
    uint64_t v7 = *((void *)a2 + 15);
    if (v7)
    {
      uint64_t v9 = (void *)*((void *)a2 + 13);
      uint64_t v8 = (uint64_t *)*((void *)a2 + 14);
      uint64_t v10 = *v8;
      *(void *)(v10 + 8) = v9[1];
      *(void *)v9[1] = v10;
      uint64_t v11 = v26;
      v26[1] = v8;
      uint64_t *v8 = (uint64_t)v11;
      char v26 = v9;
      v9[1] = &v26;
      uint64_t v28 = v7;
      *((void *)a2 + 15) = 0;
      char v6 = v9;
    }
    long long v29 = a2[8];
    uint64_t v30 = *((void *)a2 + 18);
    *((void *)a2 + 17) = 0;
    *((void *)a2 + 18) = 0;
    *((void *)a2 + 16) = 0;
    long long v12 = *a3;
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    v32[2] = 0;
    v32[3] = 0;
    std::runtime_error v31 = 0;
    v32[0] = 0;
    *(_DWORD *)((char *)v32 + 7) = 0;
    long long v33 = v12;
    int v34 = 0;
    char v35 = 1;
    char v36 = 0;
    char v37 = 0;
    long long v38 = 0u;
    long long v39 = 0u;
    int v40 = 1065353216;
    __int16 v41 = 0;
    int v42 = 2;
    LOBYTE(v43) = 0;
    char v45 = 0;
    if (v3)
    {
      long long v43 = v16;
      uint64_t v44 = v17;
      uint64_t v17 = 0;
      long long v16 = 0uLL;
      char v45 = 1;
    }
    LOBYTE(v46) = 0;
    char v48 = 0;
    if (v4)
    {
      long long v46 = v19;
      uint64_t v47 = v20;
      uint64_t v20 = 0;
      long long v19 = 0uLL;
      char v48 = 1;
    }
    LOBYTE(v49) = 0;
    char v51 = 0;
    if (v5)
    {
      long long v49 = v22;
      uint64_t v50 = v23;
      uint64_t v23 = 0;
      long long v22 = 0uLL;
      char v51 = 1;
    }
    int v52 = v25;
    v53[0] = v53;
    v53[1] = v53;
    uint64_t v54 = 0;
    if (v7)
    {
      char v13 = v27;
      uint64_t v14 = *v27;
      *(void *)(v14 + 8) = v6[1];
      *(void *)v6[1] = v14;
      uint64_t v15 = v53[0];
      *(void *)(v53[0] + 8) = v13;
      void *v13 = v15;
      v53[0] = v6;
      v6[1] = v53;
      uint64_t v54 = v7;
      uint64_t v28 = 0;
    }
    long long v55 = v29;
    uint64_t v56 = v30;
    uint64_t v30 = 0;
    long long v29 = 0uLL;
    char v57 = 0;
    char v58 = 0;
    char v59 = 0;
    AMSCore::EncodeHTTPRequestTask::Options::Options(a1, (uint64_t)&v31);
    AMSCore::EncodeHTTPRequestTask::Options::~Options(&v31);
    AMSCore::URL::~URL((AMSCore::URL *)&v16);
  }
}

void AMSCore::EncodeHTTPRequestTask::perform(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v3 = operator new(0x8B0uLL);
  *int v3 = AMSCore::EncodeHTTPRequestTask::perform;
  v3[1] = AMSCore::EncodeHTTPRequestTask::perform;
  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)(v3 + 58), a2);
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *((unsigned char *)v3 + 24) = 0;
  *((unsigned char *)v3 + 416) = 0;
  v3[53] = 0;
  v3[57] = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v4, (uint64_t)(v3 + 2));
}

void sub_18DB62AD4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18DB62E88);
  }
  _Unwind_Resume(a1);
}

void sub_18DB62E90(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (!a2) {
    JUMPOUT(0x18DB62E98);
  }
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a37);
  JUMPOUT(0x18DB62EA8);
}

void AMSCore::EncodeHTTPRequestTask::perform(uint64_t a1)
{
  uint64_t v124 = (std::runtime_error *)(a1 + 1584);
  uint64_t v125 = (long long *)(a1 + 1640);
  uint64_t v121 = a1 + 1200;
  int v122 = (std::runtime_error *)(a1 + 1664);
  int v110 = (void **)(a1 + 1744);
  uint64_t v115 = a1 + 1776;
  std::error_code v116 = (void **)(a1 + 1808);
  uint64_t v111 = a1 + 1832;
  char v112 = (void **)(a1 + 832);
  uint64_t v1 = (void **)(a1 + 1856);
  uint64_t v2 = a1 + 1880;
  int v3 = (void *)(a1 + 1896);
  uint64_t v4 = a1 + 1912;
  uint64_t v5 = (void *)(a1 + 1928);
  uint64_t v6 = a1 + 1960;
  uint64_t v7 = a1 + 1976;
  uint64_t v117 = (void *)(a1 + 2008);
  uint64_t v118 = a1 + 1992;
  uint64_t v8 = a1 + 2024;
  uint64_t v123 = (std::runtime_error **)(a1 + 2072);
  uint64_t v113 = a1 + 2120;
  std::error_code v114 = (void *)(a1 + 2104);
  uint64_t v119 = (uint64_t *)(a1 + 2136);
  uint64_t v120 = a1 + 16;
  switch(*(unsigned char *)(a1 + 2216))
  {
    case 1:
      uint64_t v18 = *(void *)(a1 + 2168);
      if (!*(unsigned char *)(v18 + 88)) {
        goto LABEL_306;
      }
      char v19 = *(unsigned char *)(v18 + 80);
      if (!v19)
      {
        std::runtime_error::runtime_error(v124, (const std::runtime_error *)(v18 + 8));
        *(_OWORD *)(a1 + 1600) = *(_OWORD *)(v18 + 24);
        *(void *)(a1 + 1584) = &unk_1EDC827D8;
        uint64_t v20 = (void *)(v18 + 48);
        uint64_t v21 = *(void *)(v18 + 48);
        *(void *)(a1 + 1616) = *(void *)(v18 + 40);
        uint64_t v22 = a1 + 1624;
        *(void *)(a1 + 1624) = v21;
        uint64_t v23 = *(void *)(v18 + 56);
        *(void *)(a1 + 1632) = v23;
        if (v23)
        {
          *(void *)(v21 + 16) = v22;
          *(void *)(v18 + 40) = v20;
          *uint64_t v20 = 0;
          *(void *)(v18 + 56) = 0;
        }
        else
        {
          *(void *)(a1 + 1616) = v22;
        }
        uint64_t v24 = *(void *)(a1 + 2168);
        *uint64_t v125 = *(_OWORD *)(v24 + 64);
        *(void *)(v24 + 64) = 0;
        *(void *)(v24 + 72) = 0;
      }
      *(unsigned char *)(a1 + 1656) = v19;
      uint64_t v25 = *(void *)(a1 + 2176);
      if (v25 && !atomic_fetch_add((atomic_ullong *volatile)(v25 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        long long v49 = *(std::__shared_weak_count **)(a1 + 2176);
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
        char v26 = *(std::__shared_weak_count **)(a1 + 1672);
        if (!v26)
        {
LABEL_32:
          if ((*(char *)(a1 + 1879) & 0x80000000) == 0) {
            goto LABEL_34;
          }
          goto LABEL_33;
        }
      }
      else
      {
        char v26 = *(std::__shared_weak_count **)(a1 + 1672);
        if (!v26) {
          goto LABEL_32;
        }
      }
      if (atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_32;
      }
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      if (*(char *)(a1 + 1879) < 0) {
LABEL_33:
      }
        operator delete(*v1);
LABEL_34:
      long long v27 = *(std::__shared_weak_count **)(a1 + 1904);
      if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
        uint64_t v28 = *(std::__shared_weak_count **)(a1 + 1888);
        if (!v28)
        {
LABEL_38:
          if (*(unsigned char *)(a1 + 1656)) {
            goto LABEL_39;
          }
          goto LABEL_74;
        }
      }
      else
      {
        uint64_t v28 = *(std::__shared_weak_count **)(a1 + 1888);
        if (!v28) {
          goto LABEL_38;
        }
      }
      if (atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_38;
      }
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      if (*(unsigned char *)(a1 + 1656))
      {
LABEL_39:
        *(void *)(a1 + 1912) = *(void *)(a1 + 2072);
        uint64_t v29 = *(void *)(a1 + 2080);
        *(void *)(a1 + 1920) = v29;
        if (v29) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
        }
        *(void *)(a1 + 1928) = *(void *)(a1 + 2088);
        uint64_t v30 = *(void *)(a1 + 2096);
        *(void *)(a1 + 1936) = v30;
        if (v30) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
        }
      }
LABEL_74:
      uint64_t v44 = v124;
      std::runtime_error::runtime_error((std::runtime_error *)v145, v124);
      *(_OWORD *)&v145[16] = *(_OWORD *)(a1 + 1600);
      uint64_t v50 = *(unsigned int ***)(a1 + 1616);
      *(void *)std::runtime_error v145 = &unk_1EDC827D8;
      uint64_t v51 = *(void *)(a1 + 1624);
      uint64_t v52 = *(void *)(a1 + 1632);
      std::string v146 = v50;
      std::string v147 = (unsigned int *)v51;
      uint64_t v148 = v52;
      if (v52)
      {
        *(void *)(v51 + 16) = &v147;
        *(void *)(a1 + 1616) = a1 + 1624;
        *(void *)(a1 + 1624) = 0;
        *(void *)(a1 + 1632) = 0;
      }
      else
      {
        std::string v146 = &v147;
      }
      uint64_t v42 = v121;
      long long v43 = &v122->__vftable;
      uint64_t v40 = v6;
      long long v149 = *v125;
      *(void *)uint64_t v125 = 0;
      *((void *)v125 + 1) = 0;
      char v150 = 1;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)__p, (uint64_t)v145);
      std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((AMSCore::EncodeHTTPRequestTask::Options *)(a1 + 24), (std::runtime_error *)__p);
      goto LABEL_115;
    case 2:
      uint64_t v31 = *(void *)(a1 + 2192);
      if (v31 && !atomic_fetch_add((atomic_ullong *volatile)(v31 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v32 = *(std::__shared_weak_count **)(a1 + 2192);
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
      long long v33 = *(std::__shared_weak_count **)(a1 + 1672);
      if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
      int v34 = *(std::__shared_weak_count **)(a1 + 1936);
      if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
      char v35 = *(std::__shared_weak_count **)(a1 + 1920);
      if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
      *(void *)(a1 + 1992) = *(void *)(a1 + 2072);
      uint64_t v36 = *(void *)(a1 + 2080);
      *(void *)(a1 + 2000) = v36;
      if (v36) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)(a1 + 2008) = *(void *)(a1 + 2088);
      uint64_t v37 = *(void *)(a1 + 2096);
      *(void *)(a1 + 2016) = v37;
      if (v37) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)(a1 + 2024) = *(void *)(a1 + 2136);
      uint64_t v38 = *(void *)(a1 + 2144);
      *(void *)(a1 + 2032) = v38;
      if (v38) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
      }
    case 3:
      uint64_t v39 = *(void *)v6;
      if (!*(unsigned char *)(*(void *)v6 + 88)) {
        goto LABEL_306;
      }
      uint64_t v40 = a1 + 1960;
      char v41 = *(unsigned char *)(v39 + 80);
      uint64_t v42 = a1 + 1200;
      long long v43 = (void *)(a1 + 1664);
      uint64_t v44 = (std::runtime_error *)(a1 + 1584);
      if (!v41)
      {
        std::runtime_error::runtime_error(v122, (const std::runtime_error *)(v39 + 8));
        *(_OWORD *)(a1 + 1680) = *(_OWORD *)(v39 + 24);
        *(void *)(a1 + 1664) = &unk_1EDC827D8;
        char v45 = (void *)(v39 + 48);
        uint64_t v46 = *(void *)(v39 + 48);
        *(void *)(a1 + 1696) = *(void *)(v39 + 40);
        uint64_t v47 = a1 + 1704;
        *(void *)(a1 + 1704) = v46;
        uint64_t v48 = *(void *)(v39 + 56);
        *(void *)(a1 + 1712) = v48;
        if (v48)
        {
          *(void *)(v46 + 16) = v47;
          *(void *)(v39 + 40) = v45;
          *char v45 = 0;
          *(void *)(v39 + 56) = 0;
        }
        else
        {
          *(void *)(a1 + 1696) = v47;
        }
        v125[5] = *(_OWORD *)(v39 + 64);
        *(void *)(v39 + 64) = 0;
        *(void *)(v39 + 72) = 0;
      }
      *(unsigned char *)(a1 + 1736) = v41;
      std::expected<void,AMSCore::Error>::operator=[abi:fe180100](v124, v122);
      if (!*(unsigned char *)(a1 + 1736)) {
        ((void (*)(std::runtime_error *))v122->~runtime_error)(v122);
      }
      int v53 = *(std::__shared_weak_count **)(a1 + 1968);
      if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
      uint64_t v54 = *(std::__shared_weak_count **)(a1 + 1984);
      if (v54 && !atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
      long long v55 = *(std::__shared_weak_count **)(a1 + 2032);
      if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
      uint64_t v56 = *(std::__shared_weak_count **)(a1 + 2016);
      if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
        char v57 = *(std::__shared_weak_count **)(a1 + 2000);
        if (!v57)
        {
LABEL_93:
          if (*(unsigned char *)(a1 + 1656)) {
            goto LABEL_94;
          }
          goto LABEL_108;
        }
      }
      else
      {
        char v57 = *(std::__shared_weak_count **)(a1 + 2000);
        if (!v57) {
          goto LABEL_93;
        }
      }
      if (atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_93;
      }
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
      if (*(unsigned char *)(a1 + 1656))
      {
LABEL_94:
        int v58 = 0;
        if (!*(unsigned char *)(a1 + 1656)) {
          goto LABEL_95;
        }
        goto LABEL_124;
      }
LABEL_108:
      std::runtime_error::runtime_error((std::runtime_error *)v145, v124);
      *(_OWORD *)&v145[16] = *(_OWORD *)(a1 + 1600);
      uint64_t v64 = *(unsigned int ***)(a1 + 1616);
      *(void *)std::runtime_error v145 = &unk_1EDC827D8;
      uint64_t v65 = *(void *)(a1 + 1624);
      uint64_t v66 = *(void *)(a1 + 1632);
      std::string v146 = v64;
      std::string v147 = (unsigned int *)v65;
      uint64_t v148 = v66;
      if (v66)
      {
        *(void *)(v65 + 16) = &v147;
        *(void *)(a1 + 1616) = a1 + 1624;
        *(void *)(a1 + 1624) = 0;
        *(void *)(a1 + 1632) = 0;
      }
      else
      {
        std::string v146 = &v147;
      }
      long long v149 = *v125;
      *(void *)uint64_t v125 = 0;
      *((void *)v125 + 1) = 0;
      char v150 = 1;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)__p, (uint64_t)v145);
      std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((AMSCore::EncodeHTTPRequestTask::Options *)(a1 + 24), (std::runtime_error *)__p);
LABEL_115:
      *(void *)std::runtime_error __p = &unk_1EDC827D8;
      int v67 = (std::__shared_weak_count *)*((void *)&v139 + 1);
      if (*((void *)&v139 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v139 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v136, v137);
      MEMORY[0x192FA3C30](__p);
      if (v150)
      {
        *(void *)std::runtime_error v145 = &unk_1EDC827D8;
        int v68 = (std::__shared_weak_count *)*((void *)&v149 + 1);
        if (*((void *)&v149 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v149 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v146, v147);
        MEMORY[0x192FA3C30](v145);
      }
      int v58 = 3;
      if (!*(unsigned char *)(a1 + 1656))
      {
LABEL_95:
        ((void (*)(std::runtime_error *))v44->~runtime_error)(v44);
        if (!v58) {
          goto LABEL_96;
        }
        goto LABEL_125;
      }
LABEL_124:
      if (!v58)
      {
LABEL_96:
        char v59 = *v123;
        uint64_t v60 = *v119;
        if (*(_DWORD *)(*v119 + 80) == -1)
        {
          uint64_t v62 = v115;
          int v61 = v116;
        }
        else
        {
          uint64_t v62 = v115;
          int v61 = v116;
          if (*(_DWORD *)(*v119 + 80))
          {
            if ((*(_DWORD *)(v60 + 172) - 5) >= 3)
            {
              AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v145);
              AMSCore::Logger::log<char [41]>(*(uint64_t *)v145, 4u, (uint64_t)"networking", 10, "Setting body on incompatible HTTP method");
              int v63 = *(std::__shared_weak_count **)&v145[8];
              if (*(void *)&v145[8])
              {
                if (!atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v145[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                  std::__shared_weak_count::__release_weak(v63);
                }
              }
            }
            switch(*(unsigned char *)(v60 + 88))
            {
              case 2:
                __p[23] = 12;
                strcpy(__p, "Content-Type");
                *(void *)std::runtime_error v145 = operator new(0x20uLL);
                *(_OWORD *)&v145[8] = xmmword_18DDE9B30;
                strcpy(*(char **)v145, "application/x-apple-plist");
                v145[24] = 1;
                std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>(&v59[15].__vftable, (uint64_t)__p);
                if (v145[24]) {
                  goto LABEL_132;
                }
                goto LABEL_135;
              case 3:
                goto LABEL_137;
              case 4:
                __p[23] = 12;
                strcpy(__p, "Content-Type");
                *(void *)std::runtime_error v145 = operator new(0x20uLL);
                *(_OWORD *)&v145[8] = xmmword_18DDE9B30;
                strcpy(*(char **)v145, "text/plain; charset=UTF-8");
                v145[24] = 1;
                std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>(&v59[15].__vftable, (uint64_t)__p);
                if (v145[24]) {
                  goto LABEL_132;
                }
                goto LABEL_135;
              case 5:
                __p[23] = 12;
                strcpy(__p, "Content-Type");
                *(void *)std::runtime_error v145 = operator new(0x28uLL);
                *(_OWORD *)&v145[8] = xmmword_18DDE9C00;
                strcpy(*(char **)v145, "application/x-www-form-urlencoded");
                v145[24] = 1;
                std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>(&v59[15].__vftable, (uint64_t)__p);
                if (v145[24]) {
                  goto LABEL_132;
                }
                goto LABEL_135;
              default:
                __p[23] = 12;
                strcpy(__p, "Content-Type");
                *(void *)std::runtime_error v145 = operator new(0x20uLL);
                *(_OWORD *)&v145[8] = xmmword_18DDE9BB0;
                strcpy(*(char **)v145, "application/json; charset=UTF-8");
                v145[24] = 1;
                std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>(&v59[15].__vftable, (uint64_t)__p);
                if (v145[24])
                {
LABEL_132:
                  std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>(&v59[15].__vftable, (uint64_t)__p, (uint64_t)v145);
                  if (v145[24] && (v145[23] & 0x80000000) != 0) {
                    operator delete(*(void **)v145);
                  }
                }
LABEL_135:
                if ((__p[23] & 0x80000000) != 0) {
                  operator delete(*(void **)__p);
                }
LABEL_137:
                AMSCore::HTTPRequestBuilder::withBody(v59, v60 + 56, *(unsigned __int8 *)(v60 + 88));
                char v59 = *v123;
                uint64_t v60 = *v119;
                break;
            }
          }
        }
        *(void *)std::runtime_error __p = operator new(0x20uLL);
        *(_OWORD *)&__p[8] = xmmword_18DDE9B50;
        strcpy(*(char **)__p, "X-Apple-NSURLCachePolicy");
        v145[0] = 0;
        v145[24] = 0;
        if (*(unsigned char *)(v60 + 120))
        {
          if (*(char *)(v60 + 119) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v145, *(const std::string::value_type **)(v60 + 96), *(void *)(v60 + 104));
          }
          else
          {
            *(_OWORD *)std::runtime_error v145 = *(_OWORD *)(v60 + 96);
            *(void *)&v145[16] = *(void *)(v60 + 112);
          }
          v145[24] = 1;
        }
        int v70 = &v59[15].__vftable;
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>(v70, (uint64_t)__p);
        if (v145[24])
        {
          std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>(v70, (uint64_t)__p, (uint64_t)v145);
          if (v145[24])
          {
            if ((v145[23] & 0x80000000) != 0) {
              operator delete(*(void **)v145);
            }
          }
        }
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        int v71 = *v123;
        uint64_t v72 = *(void *)(*v119 + 40);
        uint64_t v127 = operator new(0x20uLL);
        long long v128 = xmmword_18DDE9B80;
        strcpy((char *)v127, "X-Apple-Client-Application");
        (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v72 + 32))(v145, v72);
        std::string v141 = *(std::string *)v145;
        memset(v145, 0, 24);
        char v142 = 1;
        int v73 = &v71[15].__vftable;
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>(v73, (uint64_t)&v127);
        if (v142)
        {
          std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>(v73, (uint64_t)&v127, (uint64_t)&v141);
          if (v142)
          {
            if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v141.__r_.__value_.__l.__data_);
            }
          }
        }
        if ((v145[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v145);
          if ((SHIBYTE(v128) & 0x80000000) == 0) {
            goto LABEL_155;
          }
        }
        else if ((SHIBYTE(v128) & 0x80000000) == 0)
        {
LABEL_155:
          AMSCore::ServiceProvider<AMSCore::IDeviceInfo>::getDefault(v145);
          int v74 = (*(uint64_t (**)(void))(**(void **)v145 + 32))(*(void *)v145);
          int v75 = v74;
          unint64_t v76 = *(std::__shared_weak_count **)&v145[8];
          if (*(void *)&v145[8]
            && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v145[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
            if (v75 != 1) {
              goto LABEL_181;
            }
          }
          else if (v74 != 1)
          {
            goto LABEL_181;
          }
          (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v72 + 40))(v133, v72);
          int v77 = v133[0];
          if (v133[0])
          {
            uint64_t v129 = operator new(0x19uLL);
            long long v130 = xmmword_18DDE9B20;
            strcpy((char *)v129, "X-Apple-Issuing-Process");
            (*(void (**)(unsigned char *__return_ptr, void *))(*(void *)v77 + 32))(v145, v77);
            *(_OWORD *)std::runtime_error __p = *(_OWORD *)v145;
            *(void *)&__p[16] = *(void *)&v145[16];
            memset(v145, 0, 24);
            __p[24] = 1;
            std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>(v73, (uint64_t)&v129);
            if (__p[24])
            {
              std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>(v73, (uint64_t)&v129, (uint64_t)__p);
              if (__p[24])
              {
                if ((__p[23] & 0x80000000) != 0) {
                  operator delete(*(void **)__p);
                }
              }
            }
            if ((v145[23] & 0x80000000) != 0) {
              operator delete(*(void **)v145);
            }
            if (SHIBYTE(v130) < 0) {
              operator delete(v129);
            }
          }
          int v78 = (std::__shared_weak_count *)v133[1];
          if (v133[1] && !atomic_fetch_add((atomic_ullong *volatile)v133[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
          uint64_t v131 = operator new(0x20uLL);
          long long v132 = xmmword_18DDE9B80;
          strcpy((char *)v131, "X-Apple-Requesting-Process");
          (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v72 + 32))(v133, v72);
          *(_OWORD *)std::runtime_error v145 = *(_OWORD *)v133;
          *(void *)&v145[16] = v134;
          v133[1] = 0;
          uint64_t v134 = 0;
          v133[0] = 0;
          v145[24] = 1;
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>(v73, (uint64_t)&v131);
          if (v145[24])
          {
            std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>(v73, (uint64_t)&v131, (uint64_t)v145);
            if (v145[24])
            {
              if ((v145[23] & 0x80000000) != 0) {
                operator delete(*(void **)v145);
              }
            }
          }
          if (SHIBYTE(v134) < 0) {
            operator delete(v133[0]);
          }
          if (SHIBYTE(v132) < 0) {
            operator delete(v131);
          }
LABEL_181:
          uint64_t v79 = *v123;
          v80.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
          AMSCore::localTimeSecondsFromUTC((uint64_t)v145, v80.__d_.__rep_);
          HIBYTE(v134) = 10;
          strcpy((char *)v133, "X-Apple-Tz");
          if (!v150) {
            std::__throw_bad_expected_access[abi:fe180100]<AMSCore::Error,AMSCore::Error const&>((const std::runtime_error *)v145);
          }
          std::to_string(&v141, *(uint64_t *)v145);
          *(std::string *)std::runtime_error __p = v141;
          memset(&v141, 0, sizeof(v141));
          __p[24] = 1;
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>(&v79[15].__vftable, (uint64_t)v133);
          if (__p[24])
          {
            std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>(&v79[15].__vftable, (uint64_t)v133, (uint64_t)__p);
            if (__p[24])
            {
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
            }
          }
          if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v141.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v134) & 0x80000000) == 0)
            {
LABEL_188:
              if (v150) {
                goto LABEL_189;
              }
LABEL_242:
              (**(void (***)(unsigned char *))v145)(v145);
LABEL_189:
              uint64_t v81 = *v119;
              AMSCore::UserAgent::create(*(AMSCore::UserAgent **)(*v119 + 40), &v141);
              if (*(unsigned char *)(v81 + 360))
              {
                AMSCore::StringUtils::join<std::string,std::string>((std::string *)v145, (uint64_t)&v141, v81 + 336);
                if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v141.__r_.__value_.__l.__data_);
                }
                std::string v141 = *(std::string *)v145;
              }
              __p[23] = 10;
              strcpy(__p, "User-Agent");
              *(std::string *)std::runtime_error v145 = v141;
              memset(&v141, 0, sizeof(v141));
              v145[24] = 1;
              std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>(&v79[15].__vftable, (uint64_t)__p);
              if (v145[24])
              {
                std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>(&v79[15].__vftable, (uint64_t)__p, (uint64_t)v145);
                if (v145[24])
                {
                  if ((v145[23] & 0x80000000) != 0) {
                    operator delete(*(void **)v145);
                  }
                }
              }
              if ((__p[23] & 0x80000000) != 0)
              {
                operator delete(*(void **)__p);
                if ((SHIBYTE(v141.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_199;
                }
              }
              else if ((SHIBYTE(v141.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_199:
                AMSCore::ServiceProvider<AMSCore::IDeviceInfo>::getDefault(v43);
                *(unsigned char *)(a1 + 1831) = 15;
                qmemcpy(v61, "Accept-Language", 15);
                *(unsigned char *)(a1 + 1823) = 0;
                (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 1664) + 64))(v145);
                *(_OWORD *)uint64_t v62 = *(_OWORD *)v145;
                *(void *)(v62 + 16) = *(void *)&v145[16];
                memset(v145, 0, 24);
                *(unsigned char *)(a1 + 1800) = 1;
                std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>(&v79[15].__vftable, (uint64_t)v61);
                if (*(unsigned char *)(a1 + 1800))
                {
                  std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>(&v79[15].__vftable, (uint64_t)v61, v62);
                  if (*(unsigned char *)(a1 + 1800))
                  {
                    if (*(char *)(a1 + 1799) < 0) {
                      operator delete(*(void **)v62);
                    }
                  }
                }
                if ((v145[23] & 0x80000000) != 0)
                {
                  operator delete(*(void **)v145);
                  if ((*(char *)(a1 + 1831) & 0x80000000) == 0) {
                    goto LABEL_205;
                  }
                }
                else if ((*(char *)(a1 + 1831) & 0x80000000) == 0)
                {
LABEL_205:
                  LODWORD(v79[14].__imp_.__imp_) = *(_DWORD *)(v81 + 172);
                  if ((*(unsigned int (**)(void))(*(void *)*v43 + 32))() == 1 && *(unsigned char *)(v81 + 168))
                  {
                    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v145);
                    AMSCore::Logger::log<char [36]>(*(uint64_t *)v145);
                    uint64_t v82 = *(std::__shared_weak_count **)&v145[8];
                    if (*(void *)&v145[8]
                      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v145[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                      std::__shared_weak_count::__release_weak(v82);
                    }
                    uint64_t v79 = *(std::runtime_error **)(a1 + 2072);
                    *(unsigned char *)(a1 + 1855) = 12;
                    *(_DWORD *)(v111 + 8) = 1414808906;
                    *(void *)uint64_t v111 = *(void *)"X-Apple-JETT";
                    *(unsigned char *)(a1 + 1844) = 0;
                    *(_WORD *)(a1 + 1767) = 257;
                    *(_WORD *)(a1 + 1744) = 49;
                    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>(&v79[15].__vftable, v111);
                    if (*(unsigned char *)(a1 + 1768))
                    {
                      std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>(&v79[15].__vftable, v111, (uint64_t)v110);
                      if (*(unsigned char *)(a1 + 1768))
                      {
                        if (*(char *)(a1 + 1767) < 0) {
                          operator delete(*v110);
                        }
                      }
                    }
                    if (*(char *)(a1 + 1855) < 0) {
                      operator delete(*(void **)v111);
                    }
                  }
                  uint64_t v83 = *v119;
                  for (uint64_t i = *(uint64_t **)(*v119 + 144); i; uint64_t i = (uint64_t *)*i)
                  {
                    while (1)
                    {
                      if (*((char *)i + 39) < 0)
                      {
                        std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)i[2], i[3]);
                      }
                      else
                      {
                        *(_OWORD *)std::runtime_error __p = *((_OWORD *)i + 1);
                        *(void *)&__p[16] = i[4];
                      }
                      if (*((char *)i + 63) < 0)
                      {
                        std::string::__init_copy_ctor_external((std::string *)v145, (const std::string::value_type *)i[5], i[6]);
                      }
                      else
                      {
                        *(_OWORD *)std::runtime_error v145 = *(_OWORD *)(i + 5);
                        *(void *)&v145[16] = i[7];
                      }
                      v145[24] = 1;
                      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>(&v79[15].__vftable, (uint64_t)__p);
                      if (v145[24])
                      {
                        std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>(&v79[15].__vftable, (uint64_t)__p, (uint64_t)v145);
                        if (v145[24])
                        {
                          if ((v145[23] & 0x80000000) != 0) {
                            operator delete(*(void **)v145);
                          }
                        }
                      }
                      if ((__p[23] & 0x80000000) != 0) {
                        break;
                      }
                      uint64_t i = (uint64_t *)*i;
                      if (!i) {
                        goto LABEL_231;
                      }
                    }
                    operator delete(*(void **)__p);
                  }
LABEL_231:
                  *(void *)(a1 + 2104) = v79;
                  uint64_t v85 = *(void *)(a1 + 2080);
                  *(void *)(a1 + 2112) = v85;
                  if (v85) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v85 + 8), 1uLL, memory_order_relaxed);
                  }
                  *(void *)(a1 + 2120) = v83;
                  uint64_t v86 = *(void *)(a1 + 2144);
                  *(void *)(a1 + 2128) = v86;
                  if (v86) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v86 + 8), 1uLL, memory_order_relaxed);
                  }
                }
                operator delete(*v61);
                goto LABEL_205;
              }
              operator delete(v141.__r_.__value_.__l.__data_);
              goto LABEL_199;
            }
          }
          else if ((SHIBYTE(v134) & 0x80000000) == 0)
          {
            goto LABEL_188;
          }
          operator delete(v133[0]);
          if (v150) {
            goto LABEL_189;
          }
          goto LABEL_242;
        }
        operator delete(v127);
        goto LABEL_155;
      }
LABEL_125:
      int v69 = *(std::__shared_weak_count **)(a1 + 2080);
      if (!v69) {
        goto LABEL_292;
      }
      goto LABEL_290;
    case 4:
      uint64_t v87 = *(void *)(a1 + 2200);
      if (!*(unsigned char *)(v87 + 88)) {
        goto LABEL_306;
      }
      char v88 = *(unsigned char *)(v87 + 80);
      uint64_t v42 = a1 + 1200;
      if (!v88)
      {
        std::runtime_error::runtime_error(v124, (const std::runtime_error *)(v87 + 8));
        *(_OWORD *)(a1 + 1600) = *(_OWORD *)(v87 + 24);
        *(void *)(a1 + 1584) = &unk_1EDC827D8;
        uint64_t v89 = (void *)(v87 + 48);
        uint64_t v90 = *(void *)(v87 + 48);
        *(void *)(a1 + 1616) = *(void *)(v87 + 40);
        uint64_t v91 = a1 + 1624;
        *(void *)(a1 + 1624) = v90;
        uint64_t v92 = *(void *)(v87 + 56);
        *(void *)(a1 + 1632) = v92;
        if (v92)
        {
          *(void *)(v90 + 16) = v91;
          *(void *)(v87 + 40) = v89;
          *uint64_t v89 = 0;
          *(void *)(v87 + 56) = 0;
        }
        else
        {
          *(void *)(a1 + 1616) = v91;
        }
        uint64_t v93 = *(void *)(a1 + 2200);
        *uint64_t v125 = *(_OWORD *)(v93 + 64);
        *(void *)(v93 + 64) = 0;
        *(void *)(v93 + 72) = 0;
      }
      *(unsigned char *)(a1 + 1656) = v88;
      uint64_t v94 = *(void *)(a1 + 2208);
      if (v94 && !atomic_fetch_add((atomic_ullong *volatile)(v94 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v95 = *(std::__shared_weak_count **)(a1 + 2208);
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
      long long v96 = *(std::__shared_weak_count **)(a1 + 1968);
      if (v96 && !atomic_fetch_add(&v96->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
      unint64_t v97 = *(std::__shared_weak_count **)(a1 + 2128);
      if (v97 && !atomic_fetch_add(&v97->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
        unint64_t v98 = *(std::__shared_weak_count **)(a1 + 2112);
        if (!v98)
        {
LABEL_259:
          if (*(unsigned char *)(a1 + 1656)) {
            goto LABEL_260;
          }
LABEL_269:
          *(_DWORD *)std::runtime_error __p = 604;
          AMSCore::Unexpected<AMSCore::Error,AMSCore::Error,AMSCore::FairPlayErrorCode>((uint64_t)v145, (uint64_t)v124, (unsigned int *)__p);
        }
      }
      else
      {
        unint64_t v98 = *(std::__shared_weak_count **)(a1 + 2112);
        if (!v98) {
          goto LABEL_259;
        }
      }
      if (atomic_fetch_add(&v98->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_259;
      }
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
      if (!*(unsigned char *)(a1 + 1656)) {
        goto LABEL_269;
      }
LABEL_260:
      uint64_t v99 = *v119;
      uint64_t v100 = (uint64_t)*v123;
      *(unsigned char *)(v100 + 304) = *(unsigned char *)(*v119 + 328);
      AMSCore::HTTPRequestBuilder::buildSPtr((AMSCore::HTTPRequestBuilder *)__p, v100);
      if (!v140)
      {
        std::runtime_error::runtime_error((std::runtime_error *)v145, (const std::runtime_error *)__p);
        *(_OWORD *)&v145[16] = *(_OWORD *)&__p[16];
        *(void *)std::runtime_error v145 = &unk_1EDC827D8;
        std::string v146 = v136;
        std::string v147 = v137;
        uint64_t v148 = v138;
        if (v138)
        {
          *((void *)v137 + 2) = &v147;
          uint64_t v136 = &v137;
          uint64_t v137 = 0;
          uint64_t v138 = 0;
        }
        else
        {
          std::string v146 = &v147;
        }
        long long v149 = v139;
        long long v139 = 0uLL;
        char v150 = 1;
        AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v141, (uint64_t)v145);
        std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((AMSCore::EncodeHTTPRequestTask::Options *)(a1 + 24), (std::runtime_error *)&v141);
        v141.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EDC827D8;
        uint64_t v103 = v144;
        if (v144 && !atomic_fetch_add(&v144->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v143, v143[1]);
        MEMORY[0x192FA3C30](&v141);
        if (v150)
        {
          *(void *)std::runtime_error v145 = &unk_1EDC827D8;
          uint64_t v104 = (std::__shared_weak_count *)*((void *)&v149 + 1);
          if (*((void *)&v149 + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v149 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
            std::__shared_weak_count::__release_weak(v104);
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v146, v147);
          MEMORY[0x192FA3C30](v145);
        }
LABEL_281:
        if (v140)
        {
          uint64_t v105 = *(std::__shared_weak_count **)&__p[8];
          if (*(void *)&__p[8]
            && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__p[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
            std::__shared_weak_count::__release_weak(v105);
          }
        }
        else
        {
          (**(void (***)(unsigned char *))__p)(__p);
        }
        uint64_t v106 = *(std::__shared_weak_count **)(a1 + 1672);
        if (v106 && !atomic_fetch_add(&v106->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
          std::__shared_weak_count::__release_weak(v106);
        }
        int v69 = *(std::__shared_weak_count **)(a1 + 2080);
        if (v69)
        {
LABEL_290:
          if (!atomic_fetch_add(&v69->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
LABEL_292:
        AMSCore::URL::~URL((AMSCore::URL *)(a1 + 1280));
        if (*(unsigned char *)(a1 + 1272))
        {
          *(void *)(a1 + 1200) = &unk_1EDC827D8;
          uint64_t v107 = *(std::__shared_weak_count **)(a1 + 1264);
          if (v107 && !atomic_fetch_add(&v107->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 1232, *(unsigned int **)(a1 + 1240));
          MEMORY[0x192FA3C30](v42);
        }
        uint64_t v108 = *(std::__shared_weak_count **)(a1 + 2096);
        if (v108 && !atomic_fetch_add(&v108->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
          std::__shared_weak_count::__release_weak(v108);
          uint64_t v109 = *(std::__shared_weak_count **)(a1 + 2144);
          if (v109)
          {
LABEL_300:
            if (!atomic_fetch_add(&v109->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
              std::__shared_weak_count::__release_weak(v109);
            }
          }
        }
        else
        {
          uint64_t v109 = *(std::__shared_weak_count **)(a1 + 2144);
          if (v109) {
            goto LABEL_300;
          }
        }
        *(void *)(a1 + 1200) = v120;
        *(void *)a1 = 0;
        AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::Awaiter::await_suspend(v42);
        return;
      }
      AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v112, v99);
      if (v140)
      {
        long long v126 = *(_OWORD *)__p;
        *(void *)std::runtime_error __p = 0;
        *(void *)&__p[8] = 0;
        AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v145, (uint64_t)v112);
        long long v151 = v126;
        __n128 v101 = std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<AMSCore::EncodeHTTPRequestTask::Result,void>((__n128 *)(a1 + 24), (__n128 *)v145);
        int v102 = (std::__shared_weak_count *)*((void *)&v151 + 1);
        if (*((void *)&v151 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v151 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, __n128))v102->__on_zero_shared)(v102, v101);
          std::__shared_weak_count::__release_weak(v102);
        }
        AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)v145);
        AMSCore::EncodeHTTPRequestTask::Options::~Options(v112);
        goto LABEL_281;
      }
LABEL_306:
      __break(1u);
      return;
    default:
      uint64_t v10 = *(void *)(a1 + 2160);
      if (v10 && !atomic_fetch_add((atomic_ullong *volatile)(v10 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v11 = *(std::__shared_weak_count **)(a1 + 2160);
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      long long v12 = *(std::__shared_weak_count **)(a1 + 1592);
      if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      char v13 = *(std::__shared_weak_count **)(a1 + 1952);
      if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      uint64_t v14 = *(std::__shared_weak_count **)(a1 + 2048);
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      uint64_t v15 = *(std::__shared_weak_count **)(a1 + 2064);
      if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
      *(void *)(a1 + 1880) = *(void *)(a1 + 2072);
      uint64_t v16 = *(void *)(a1 + 2080);
      *(void *)(a1 + 1888) = v16;
      if (v16) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)(a1 + 1896) = *(void *)(a1 + 2088);
      uint64_t v17 = *(void *)(a1 + 2096);
      *(void *)(a1 + 1904) = v17;
      if (v17) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void))(**(void **)(*v119 + 40) + 16))(*(void *)(*v119 + 40));
  }
}

void sub_18DB65058(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,AMSCore::URLBuilder *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  if (a69)
  {
    if (a68 < 0) {
      operator delete(__p);
    }
  }
  operator delete(v69);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a27);
  AMSCore::URLBuilder::~URLBuilder(a25);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a10);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a23);
  __cxa_begin_catch(a1);
  AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DB6520C()
{
}

void AMSCore::EncodeHTTPRequestTask::perform(char *a1)
{
  if (*(void *)a1)
  {
    uint64_t v2 = (void (***)(uint64_t))(a1 + 1584);
    switch(a1[2216])
    {
      case 1:
        uint64_t v9 = *((void *)a1 + 272);
        if (v9 && !atomic_fetch_add((atomic_ullong *volatile)(v9 + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          uint64_t v10 = (std::__shared_weak_count *)*((void *)a1 + 272);
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        uint64_t v11 = (std::__shared_weak_count *)*((void *)a1 + 209);
        if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        if (a1[1879] < 0) {
          operator delete(*((void **)a1 + 232));
        }
        long long v12 = (std::__shared_weak_count *)*((void *)a1 + 238);
        if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
        uint64_t v8 = (std::__shared_weak_count *)*((void *)a1 + 236);
        if (v8) {
          goto LABEL_70;
        }
        goto LABEL_73;
      case 2:
        uint64_t v13 = *((void *)a1 + 274);
        if (v13 && !atomic_fetch_add((atomic_ullong *volatile)(v13 + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          uint64_t v14 = (std::__shared_weak_count *)*((void *)a1 + 274);
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        uint64_t v15 = (std::__shared_weak_count *)*((void *)a1 + 209);
        if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        uint64_t v16 = (std::__shared_weak_count *)*((void *)a1 + 242);
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        uint64_t v17 = (std::__shared_weak_count *)*((void *)a1 + 240);
        if (v17) {
          goto LABEL_54;
        }
        goto LABEL_55;
      case 3:
        uint64_t v18 = (std::__shared_weak_count *)*((void *)a1 + 246);
        if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
        char v19 = (std::__shared_weak_count *)*((void *)a1 + 248);
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
        uint64_t v20 = (std::__shared_weak_count *)*((void *)a1 + 254);
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
        uint64_t v21 = (std::__shared_weak_count *)*((void *)a1 + 252);
        if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
        uint64_t v17 = (std::__shared_weak_count *)*((void *)a1 + 250);
        if (!v17) {
          goto LABEL_55;
        }
LABEL_54:
        if (atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
LABEL_55:
          if (a1[1656]) {
            goto LABEL_73;
          }
          goto LABEL_56;
        }
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
        if (!a1[1656]) {
LABEL_56:
        }
          (**v2)((uint64_t)(a1 + 1584));
LABEL_73:
        long long v27 = (std::__shared_weak_count *)*((void *)a1 + 260);
        if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
        AMSCore::URL::~URL((AMSCore::URL *)(a1 + 1280));
        if (a1[1272])
        {
          *((void *)a1 + 150) = &unk_1EDC827D8;
          uint64_t v28 = (std::__shared_weak_count *)*((void *)a1 + 158);
          if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)(a1 + 1232), *((unsigned int **)a1 + 155));
          MEMORY[0x192FA3C30](a1 + 1200);
        }
        uint64_t v29 = (std::__shared_weak_count *)*((void *)a1 + 262);
        if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
        uint64_t v30 = (std::__shared_weak_count *)*((void *)a1 + 268);
        if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
        break;
      case 4:
        uint64_t v22 = *((void *)a1 + 276);
        if (v22 && !atomic_fetch_add((atomic_ullong *volatile)(v22 + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          uint64_t v23 = (std::__shared_weak_count *)*((void *)a1 + 276);
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        uint64_t v24 = (std::__shared_weak_count *)*((void *)a1 + 246);
        if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
        uint64_t v25 = (std::__shared_weak_count *)*((void *)a1 + 266);
        if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
        char v26 = (std::__shared_weak_count *)*((void *)a1 + 264);
        if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
        uint64_t v8 = (std::__shared_weak_count *)*((void *)a1 + 209);
        if (v8) {
          goto LABEL_70;
        }
        goto LABEL_73;
      default:
        uint64_t v3 = *((void *)a1 + 270);
        if (v3 && !atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          uint64_t v4 = (std::__shared_weak_count *)*((void *)a1 + 270);
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        uint64_t v5 = (std::__shared_weak_count *)*((void *)a1 + 199);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        uint64_t v6 = (std::__shared_weak_count *)*((void *)a1 + 244);
        if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        uint64_t v7 = (std::__shared_weak_count *)*((void *)a1 + 256);
        if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        uint64_t v8 = (std::__shared_weak_count *)*((void *)a1 + 258);
        if (!v8) {
          goto LABEL_73;
        }
LABEL_70:
        if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        goto LABEL_73;
    }
  }
  AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::~Promise((uint64_t)(a1 + 16));
  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)a1 + 58);
  operator delete(a1);
}

void AMSCore::Log::error<char const(&)[31]>()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v6);
  uint64_t v0 = v6;
  if (*(unsigned __int8 *)(v6 + 8) <= 4u)
  {
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v8);
    uint64_t v1 = *(void *)(v8[0] - 24);
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)"RegEx values missing from Bag.", 30);
    uint64_t v2 = v8[6];
    uint64_t v3 = (char *)v8 + *(void *)(v8[0] - 24);
    if ((v3[32] & 5) != 0)
    {
      uint64_t v4 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v3 + 5) + 32))(&rep);
      uint64_t v4 = v15;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v12 = 4;
    uint64_t v13 = v2;
    uint64_t v14 = v4;
    (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v0 + 16) + 16))(*(void *)(v0 + 16), "networking", 10, &rep);
    v8[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v8 + *(void *)(v8[0] - 2AMSCore::URL::~URL((AMSCore::URL *)(this + 4)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v8[1] = MEMORY[0x1E4FBA470] + 16;
    if (v9 < 0) {
      operator delete((void *)v8[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x192FA3FD0](&v10);
  }
  uint64_t v5 = v7;
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_18DB65D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (locale && !atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
  }
  std::locale::~locale(this);
}

void AMSCore::Log::error<char const(&)[39],AMSCore::Any const&,char const(&)[10],char const*>(unsigned __int8 *a1, const char **a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v12);
  uint64_t v4 = v12;
  if (*(unsigned __int8 *)(v12 + 8) <= 4u)
  {
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v14);
    uint64_t v5 = *(void *)(v14[0] - 24);
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v14, (uint64_t)"Failed to parse a GUID regex. regex = ", 38);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v14, (uint64_t)" error = ", 9);
    uint64_t v6 = *a2;
    size_t v7 = strlen(v6);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v14, (uint64_t)v6, v7);
    uint64_t v8 = v14[6];
    char v9 = (char *)v14 + *(void *)(v14[0] - 24);
    if ((v9[32] & 5) != 0)
    {
      uint64_t v10 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v9 + 5) + 32))(&rep);
      uint64_t v10 = v21;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v18 = 4;
    uint64_t v19 = v8;
    uint64_t v20 = v10;
    (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v4 + 16) + 16))(*(void *)(v4 + 16), "networking", 10, &rep);
    v14[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v14 + *(void *)(v14[0] - 2AMSCore::URL::~URL((AMSCore::URL *)(this + 4)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v14[1] = MEMORY[0x1E4FBA470] + 16;
    if (v15 < 0) {
      operator delete((void *)v14[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x192FA3FD0](&v16);
  }
  uint64_t v11 = v13;
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_18DB66118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::EncodeHTTPRequestTask::anonymous namespace'::setCookies(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  size_t v7 = (char *)operator new(0x470uLL);
  *((_OWORD *)v7 + 65) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v8 = a3[1];
  *((void *)v7 + 132) = *a3;
  *((void *)v7 + 133) = v8;
  *a3 = 0;
  a3[1] = 0;
  uint64_t v9 = *(void *)(a4 + 8);
  *((void *)v7 + 134) = *(void *)a4;
  *((void *)v7 + 135) = v9;
  LODWORD(v9) = *(_DWORD *)(a4 + 16);
  *(_DWORD *)(v7 + 1123) = *(_DWORD *)(a4 + 19);
  *((_DWORD *)v7 + 280) = v9;
  v7[1128] = *(unsigned char *)(a4 + 23);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  v7[24] = 0;
  v7[104] = 0;
  *((void *)v7 + 14) = 0;
  *((void *)v7 + 18) = 0;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v10, (uint64_t)(v7 + 16));
}

void sub_18DB67DBC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](a11);
  std::expected<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](a10);
  std::expected<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::~expected[abi:fe180100](a15);
  std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](v18);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a18);
  std::__tree<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>>>::destroy(*v19);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DB67E5C()
{
}

void sub_18DB67E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17, void *__p, uint64_t a19, uint64_t a20)
{
  AMSCore::Task<void,AMSCore::Error>::ValuePromise::~ValuePromise(a20);
  if (a17 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a14);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a13);
  operator delete(v20);
  _Unwind_Resume(a1);
}

void AMSCore::EncodeHTTPRequestTask::anonymous namespace'::setIdentifiers(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = (char *)operator new(0x1C8uLL);
  *(_OWORD *)(v5 + 408) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *((void *)v5 + 53) = a3[1];
  *a3 = 0;
  a3[1] = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *(_WORD *)(v5 + 17) = 0;
  *((void *)v5 + 3) = 0;
  *((void *)v5 + 7) = 0;
  std::shared_ptr<AMSCore::Task<void,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,void>::Promise,AMSCore::Task<void,void>::Promise::get_return_object(void)::DetachPromise,void>(&v6, (uint64_t)(v5 + 16));
}

void sub_18DB6856C(void *a1)
{
  if (v1[232] && v1[231] < 0) {
    operator delete(*v4);
  }
  if (v1[351] < 0) {
    operator delete(*v3);
  }
  AMSCore::AccountIdentity::~AccountIdentity(v2);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::EncodeHTTPRequestTask::anonymous namespace'::setStorefront(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  size_t v7 = (char *)operator new(0x1D0uLL);
  *((_OWORD *)v7 + 25) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *((void *)v7 + 52) = a3[1];
  *a3 = 0;
  a3[1] = 0;
  *(_OWORD *)(v7 + 424) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  v7[24] = 0;
  v7[104] = 0;
  *((void *)v7 + 14) = 0;
  *((void *)v7 + 18) = 0;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v8, (uint64_t)(v7 + 16));
}

void sub_18DB6940C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v33);
  if (v30[256] && v30[255] < 0) {
    operator delete(*v32);
  }
  if (v30[319] < 0) {
    operator delete(*v31);
  }
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DB694D4()
{
}

void std::__throw_bad_expected_access[abi:fe180100]<AMSCore::Error,AMSCore::Error const&>(const std::runtime_error *a1)
{
  exception = (char *)__cxa_allocate_exception(0x50uLL);
  AMSCore::Error::Error(&v6, a1);
  *(void *)exception = &unk_1EDC83898;
  std::runtime_error::runtime_error((std::runtime_error *)(exception + 8), &v6);
  *(_OWORD *)(exception + 24) = v7;
  *((void *)exception + 1) = &unk_1EDC827D8;
  *((void *)exception + 5) = v8;
  uint64_t v3 = v9;
  *((void *)exception + 6) = v9;
  uint64_t v4 = exception + 48;
  uint64_t v5 = v10;
  *((void *)exception + 7) = v10;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    std::runtime_error v8 = &v9;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    *((void *)exception + 5) = v4;
  }
  *((_OWORD *)exception + 4) = v11;
  long long v11 = 0uLL;
}

void sub_18DB695D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned int *a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  a10 = &unk_1EDC827D8;
  uint64_t v20 = a18;
  if (a18)
  {
    if (!atomic_fetch_add(&a18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v18, a15);
  MEMORY[0x192FA3C30](&a10);
  _Unwind_Resume(a1);
}

void sub_18DB69660(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::StringUtils::join<std::string,std::string>(std::string *a1, uint64_t a2, uint64_t a3)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v13);
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = *(void *)a2;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v13, v7, v8);
  int v9 = *(char *)(a3 + 23);
  if (v9 >= 0) {
    uint64_t v10 = a3;
  }
  else {
    uint64_t v10 = *(void *)a3;
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v11 = *(void *)(a3 + 8);
  }
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v13, v10, v11);
  std::stringbuf::str[abi:fe180100]((uint64_t)v14, a1);
  uint64_t v13 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v14[-1] + *(void *)(v13 - 2AMSCore::URL::~URL((AMSCore::URL *)(this + 4)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v14[0] = MEMORY[0x1E4FBA470] + 16;
  if (v15 < 0) {
    operator delete((void *)v14[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FA3FD0](&v16);
}

uint64_t AMSCore::Logger::log<char [36]>(uint64_t result)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= 2u)
  {
    uint64_t v1 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v6);
    uint64_t v2 = *(void *)(v6[0] - 24);
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v6, (uint64_t)"Setting the ignore FairPlay header.", 35);
    uint64_t v3 = v6[6];
    uint64_t v4 = (char *)v6 + *(void *)(v6[0] - 24);
    if ((v4[32] & 5) != 0)
    {
      uint64_t v5 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v4 + 5) + 32))(&rep);
      uint64_t v5 = v13;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v10 = 2;
    uint64_t v11 = v3;
    uint64_t v12 = v5;
    (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v1 + 16) + 16))(*(void *)(v1 + 16), "networking", 10, &rep);
    v6[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v6 + *(void *)(v6[0] - 2AMSCore::URL::~URL((AMSCore::URL *)(this + 4)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v6[1] = MEMORY[0x1E4FBA470] + 16;
    if (v7 < 0) {
      operator delete((void *)v6[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v8);
  }
  return result;
}

void sub_18DB69A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::EncodeHTTPRequestTask::anonymous namespace'::setMescalHeaders(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (char *)operator new(0x208uLL);
  uint64_t v6 = a2[1];
  *((void *)v5 + 57) = *a2;
  *((void *)v5 + 58) = v6;
  *a2 = 0;
  a2[1] = 0;
  *(_OWORD *)(v5 + 472) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  v5[24] = 0;
  v5[104] = 0;
  *((void *)v5 + 14) = 0;
  *((void *)v5 + 18) = 0;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v7, (uint64_t)(v5 + 16));
}

void sub_18DB6BD58(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,char a61)
{
  if (a61)
  {
    if (a60 < 0)
    {
      operator delete(__p);
      __clang_call_terminate(a1);
    }
  }
  __clang_call_terminate(a1);
}

void sub_18DB6BE08()
{
}

void sub_18DB6BE50()
{
}

void AMSCore::Unexpected<AMSCore::Error,AMSCore::Error,AMSCore::FairPlayErrorCode>(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  std::runtime_error::runtime_error(v8, (const std::runtime_error *)a2);
  uint64_t v5 = (void *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 40);
  v8[1] = *(std::runtime_error *)(a2 + 16);
  std::runtime_error v7 = *(uint64_t **)(a2 + 32);
  v8[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  int v9 = v7;
  uint64_t v10 = v6;
  if (*(void *)(a2 + 48))
  {
    *(void *)(v6 + 16) = &v10;
    *(void *)(a2 + 32) = v5;
    void *v5 = 0;
    *(void *)(a2 + 48) = 0;
  }
  else
  {
    int v9 = &v10;
  }
  long long v12 = *(_OWORD *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  AMSCore::Error::Error<>((uint64_t)&v13, (uint64_t)v8, *a3, (const std::error_category *)&AMSCore::Error::Category::fairplay(void)::instance);
}

void sub_18DB6C044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<AMSCore::EncodeHTTPRequestTask::Result,void>(__n128 *this, __n128 *a2)
{
  if (this[24].n128_u8[8])
  {
    if (this[24].n128_u8[0])
    {
      uint64_t v4 = (std::__shared_weak_count *)this[23].n128_u64[1];
      if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)this);
    }
    else
    {
      (*(void (**)(__n128 *))this->n128_u64[0])(this);
    }
    this[24].n128_u8[8] = 0;
  }
  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)this, (uint64_t)a2);
  __n128 result = a2[23];
  this[23] = result;
  a2[23].n128_u64[0] = 0;
  a2[23].n128_u64[1] = 0;
  this[24].n128_u8[0] = 1;
  this[24].n128_u8[8] = 1;
  return result;
}

uint64_t AMSCore::EncodeHTTPRequestTask::anonymous namespace'::setMescalHeaders(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void **)(result + 152);
  uint64_t v3 = (const std::runtime_error *)(result + 232);
  if (*(unsigned char *)(result + 512))
  {
    uint64_t v4 = *(void *)(result + 376);
    if (*(unsigned char *)(v4 + 88))
    {
      int v5 = *(unsigned __int8 *)(v4 + 80);
      if (!*(unsigned char *)(v4 + 80))
      {
        std::runtime_error::runtime_error((std::runtime_error *)(result + 232), (const std::runtime_error *)(v4 + 8));
        *(_OWORD *)(v1 + 248) = *(_OWORD *)(v4 + 24);
        *(void *)(v1 + 232) = &unk_1EDC827D8;
        uint64_t v6 = (void *)(v4 + 48);
        uint64_t v7 = *(void *)(v4 + 48);
        uint64_t v8 = v1 + 272;
        *(void *)(v1 + 264) = *(void *)(v4 + 40);
        *(void *)(v1 + 272) = v7;
        uint64_t v9 = *(void *)(v4 + 56);
        *(void *)(v1 + 280) = v9;
        if (v9)
        {
          *(void *)(v7 + 16) = v8;
          *(void *)(v4 + 40) = v6;
          void *v6 = 0;
          *(void *)(v4 + 56) = 0;
        }
        else
        {
          *(void *)(v1 + 264) = v8;
        }
        *(_OWORD *)(v1 + 288) = *(_OWORD *)(v4 + 64);
        *(void *)(v4 + 64) = 0;
        *(void *)(v4 + 72) = 0;
      }
      *(unsigned char *)(v1 + 304) = v5;
      if (*(unsigned char *)(v1 + 104))
      {
        if (!*(unsigned char *)(v1 + 96))
        {
          (**(void (***)(uint64_t))(v1 + 24))(v1 + 24);
          int v5 = *(unsigned __int8 *)(v1 + 304);
        }
        *(unsigned char *)(v1 + 104) = 0;
      }
      if (v5)
      {
        *(unsigned char *)(v1 + 96) = v5;
        *(unsigned char *)(v1 + 104) = 1;
      }
      else
      {
        std::runtime_error::runtime_error((std::runtime_error *)(v1 + 24), v3);
        uint64_t v16 = *(void *)(v1 + 272);
        *(void *)(v1 + 64) = v16;
        uint64_t v17 = v1 + 64;
        *(_OWORD *)(v1 + 40) = *(_OWORD *)(v1 + 248);
        *(void *)(v1 + 24) = &unk_1EDC827D8;
        *(void *)(v1 + 56) = *(void *)(v1 + 264);
        uint64_t v18 = *(void *)(v1 + 280);
        *(void *)(v1 + 72) = v18;
        if (v18)
        {
          *(void *)(v16 + 16) = v17;
          *(void *)(v1 + 264) = v1 + 272;
          *(void *)(v1 + 272) = 0;
          *(void *)(v1 + 280) = 0;
        }
        else
        {
          *(void *)(v1 + 56) = v17;
        }
        *(_OWORD *)(v1 + 80) = *(_OWORD *)(v1 + 288);
        *(void *)(v1 + 288) = 0;
        *(void *)(v1 + 296) = 0;
        int v19 = *(unsigned __int8 *)(v1 + 304);
        *(unsigned char *)(v1 + 96) = 0;
        *(unsigned char *)(v1 + 104) = 1;
        if (!v19) {
          ((void (*)(const std::runtime_error *))v3->~runtime_error)(v3);
        }
      }
      uint64_t v20 = *(std::__shared_weak_count **)(v1 + 384);
      if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      uint64_t v21 = *(std::__shared_weak_count **)(v1 + 400);
      if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
      uint64_t v22 = *(std::__shared_weak_count **)(v1 + 448);
      if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
      uint64_t v23 = *(std::__shared_weak_count **)(v1 + 432);
      if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        uint64_t v24 = *(std::__shared_weak_count **)(v1 + 416);
        if (!v24) {
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v24 = *(std::__shared_weak_count **)(v1 + 416);
        if (!v24) {
          goto LABEL_36;
        }
      }
      if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
        if (*(unsigned char *)(v1 + 224))
        {
LABEL_37:
          if (*(char *)(v1 + 175) < 0) {
            operator delete(*v2);
          }
LABEL_43:
          uint64_t v25 = 0;
          char v26 = *(std::__shared_weak_count **)(v1 + 368);
          if (!v26) {
            goto LABEL_81;
          }
LABEL_79:
          if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
          goto LABEL_81;
        }
LABEL_42:
        (*(void (**)(void **))*v2)(v2);
        goto LABEL_43;
      }
LABEL_36:
      if (*(unsigned char *)(v1 + 224)) {
        goto LABEL_37;
      }
      goto LABEL_42;
    }
LABEL_84:
    __break(1u);
    return result;
  }
  uint64_t v10 = *(void *)(result + 488);
  if (!*(unsigned char *)(v10 + 88)) {
    goto LABEL_84;
  }
  int v11 = *(unsigned __int8 *)(v10 + 80);
  if (!*(unsigned char *)(v10 + 80))
  {
    std::runtime_error::runtime_error((std::runtime_error *)(result + 232), (const std::runtime_error *)(v10 + 8));
    *(_OWORD *)(v1 + 248) = *(_OWORD *)(v10 + 24);
    *(void *)(v1 + 232) = &unk_1EDC827D8;
    long long v12 = (void *)(v10 + 48);
    uint64_t v13 = *(void *)(v10 + 48);
    uint64_t v14 = v1 + 272;
    *(void *)(v1 + 264) = *(void *)(v10 + 40);
    *(void *)(v1 + 272) = v13;
    uint64_t v15 = *(void *)(v10 + 56);
    *(void *)(v1 + 280) = v15;
    if (v15)
    {
      *(void *)(v13 + 16) = v14;
      *(void *)(v10 + 40) = v12;
      void *v12 = 0;
      *(void *)(v10 + 56) = 0;
    }
    else
    {
      *(void *)(v1 + 264) = v14;
    }
    uint64_t v27 = *(void *)(v1 + 488);
    *(_OWORD *)(v1 + 288) = *(_OWORD *)(v27 + 64);
    *(void *)(v27 + 64) = 0;
    *(void *)(v27 + 72) = 0;
  }
  *(unsigned char *)(v1 + 304) = v11;
  if (*(unsigned char *)(v1 + 104))
  {
    if (!*(unsigned char *)(v1 + 96))
    {
      (**(void (***)(uint64_t))(v1 + 24))(v1 + 24);
      int v11 = *(unsigned __int8 *)(v1 + 304);
    }
    *(unsigned char *)(v1 + 104) = 0;
  }
  if (v11)
  {
    *(unsigned char *)(v1 + 96) = v11;
    *(unsigned char *)(v1 + 104) = 1;
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(v1 + 24), v3);
    uint64_t v28 = *(void *)(v1 + 272);
    *(void *)(v1 + 64) = v28;
    uint64_t v29 = v1 + 64;
    *(_OWORD *)(v1 + 40) = *(_OWORD *)(v1 + 248);
    *(void *)(v1 + 24) = &unk_1EDC827D8;
    *(void *)(v1 + 56) = *(void *)(v1 + 264);
    uint64_t v30 = *(void *)(v1 + 280);
    *(void *)(v1 + 72) = v30;
    if (v30)
    {
      *(void *)(v28 + 16) = v29;
      *(void *)(v1 + 264) = v1 + 272;
      *(void *)(v1 + 272) = 0;
      *(void *)(v1 + 280) = 0;
    }
    else
    {
      *(void *)(v1 + 56) = v29;
    }
    *(_OWORD *)(v1 + 80) = *(_OWORD *)(v1 + 288);
    *(void *)(v1 + 288) = 0;
    *(void *)(v1 + 296) = 0;
    int v31 = *(unsigned __int8 *)(v1 + 304);
    *(unsigned char *)(v1 + 96) = 0;
    *(unsigned char *)(v1 + 104) = 1;
    if (!v31) {
      ((void (*)(const std::runtime_error *))v3->~runtime_error)(v3);
    }
  }
  uint64_t v32 = *(void *)(v1 + 496);
  if (v32 && !atomic_fetch_add((atomic_ullong *volatile)(v32 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v33 = *(std::__shared_weak_count **)(v1 + 496);
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  int v34 = *(std::__shared_weak_count **)(v1 + 384);
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  char v35 = *(std::__shared_weak_count **)(v1 + 352);
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  uint64_t v36 = *(std::__shared_weak_count **)(v1 + 336);
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
    uint64_t v37 = *(std::__shared_weak_count **)(v1 + 320);
    if (!v37)
    {
LABEL_71:
      if (*(unsigned char *)(v1 + 224)) {
        goto LABEL_72;
      }
LABEL_77:
      (*(void (**)(void **))*v2)(v2);
      goto LABEL_78;
    }
  }
  else
  {
    uint64_t v37 = *(std::__shared_weak_count **)(v1 + 320);
    if (!v37) {
      goto LABEL_71;
    }
  }
  if (atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_71;
  }
  ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
  std::__shared_weak_count::__release_weak(v37);
  if (!*(unsigned char *)(v1 + 224)) {
    goto LABEL_77;
  }
LABEL_72:
  if (*(char *)(v1 + 175) < 0) {
    operator delete(*v2);
  }
LABEL_78:
  uint64_t v25 = *(void *)(v1 + 464);
  char v26 = *(std::__shared_weak_count **)(v1 + 368);
  if (v26) {
    goto LABEL_79;
  }
LABEL_81:
  *(void *)(v1 + 504) = v25;
  *(void *)(v1 + 152) = v1 + 16;
  *(void *)uint64_t v1 = 0;
  return AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v2);
}

void AMSCore::EncodeHTTPRequestTask::anonymous namespace'::setMescalHeaders(void *__p)
{
  uint64_t v2 = (void **)(__p + 19);
  if (!*__p)
  {
    uint64_t v8 = (std::__shared_weak_count *)__p[63];
    goto LABEL_49;
  }
  if (*((unsigned char *)__p + 512))
  {
    uint64_t v3 = (std::__shared_weak_count *)__p[48];
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)__p[50];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    int v5 = (std::__shared_weak_count *)__p[56];
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = (std::__shared_weak_count *)__p[54];
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      uint64_t v7 = (std::__shared_weak_count *)__p[52];
      if (!v7) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v7 = (std::__shared_weak_count *)__p[52];
      if (!v7) {
        goto LABEL_16;
      }
    }
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (*((unsigned char *)__p + 224))
      {
LABEL_17:
        if (*((char *)__p + 175) < 0) {
          operator delete(*v2);
        }
LABEL_40:
        uint64_t v8 = 0;
        uint64_t v15 = (std::__shared_weak_count *)__p[46];
        if (!v15) {
          goto LABEL_49;
        }
        goto LABEL_47;
      }
LABEL_39:
      (*(void (**)(void **))*v2)(v2);
      goto LABEL_40;
    }
LABEL_16:
    if (*((unsigned char *)__p + 224)) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }
  uint64_t v9 = __p[62];
  if (v9 && !atomic_fetch_add((atomic_ullong *volatile)(v9 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v10 = (std::__shared_weak_count *)__p[62];
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  int v11 = (std::__shared_weak_count *)__p[48];
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)__p[44];
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v13 = (std::__shared_weak_count *)__p[42];
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    uint64_t v14 = (std::__shared_weak_count *)__p[40];
    if (!v14)
    {
LABEL_33:
      if (*((unsigned char *)__p + 224)) {
        goto LABEL_34;
      }
LABEL_45:
      (*(void (**)(void **))*v2)(v2);
      goto LABEL_46;
    }
  }
  else
  {
    uint64_t v14 = (std::__shared_weak_count *)__p[40];
    if (!v14) {
      goto LABEL_33;
    }
  }
  if (atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_33;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (!*((unsigned char *)__p + 224)) {
    goto LABEL_45;
  }
LABEL_34:
  if (*((char *)__p + 175) < 0) {
    operator delete(*v2);
  }
LABEL_46:
  uint64_t v8 = (std::__shared_weak_count *)__p[58];
  uint64_t v15 = (std::__shared_weak_count *)__p[46];
  if (!v15) {
    goto LABEL_49;
  }
LABEL_47:
  if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_49:
  uint64_t v16 = (void *)__p[18];
  if (v16 == __p + 15)
  {
    (*(void (**)(char *))(__p[15] + 32))((char *)__p + 120);
    if (!*((unsigned char *)__p + 104)) {
      goto LABEL_57;
    }
    goto LABEL_55;
  }
  if (v16) {
    (*(void (**)(void *))(*v16 + 40))(v16);
  }
  if (*((unsigned char *)__p + 104))
  {
LABEL_55:
    if (!*((unsigned char *)__p + 96)) {
      (*(void (**)(void))__p[3])();
    }
  }
LABEL_57:
  uint64_t v17 = __p[60];
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v17 && !atomic_fetch_add((atomic_ullong *volatile)(__p[60] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v18 = (std::__shared_weak_count *)__p[60];
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(__p);
}

void AMSCore::EncodeHTTPRequestTask::anonymous namespace'::setSignedHeader(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7 = operator new(0x1A8uLL);
  *((_OWORD *)v7 + 24) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v8 = a3[1];
  v7[46] = *a3;
  v7[47] = v8;
  *a3 = 0;
  a3[1] = 0;
  uint64_t v9 = a4[1];
  v7[38] = *a4;
  v7[39] = v9;
  *a4 = 0;
  a4[1] = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *((unsigned char *)v7 + 24) = 0;
  *((unsigned char *)v7 + 104) = 0;
  v7[14] = 0;
  v7[18] = 0;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v10, (uint64_t)(v7 + 2));
}

void sub_18DB6D928(void *a1)
{
}

void sub_18DB6D940(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 + 287) < 0) {
    operator delete(*v34);
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  std::expected<AMSCore::IAnisetteProvider::StartProvisioningResult,AMSCore::Error>::~expected[abi:fe180100](a12);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a9);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DB6D9B0()
{
}

void sub_18DB6D9BC(_Unwind_Exception *a1)
{
  AMSCore::Task<void,AMSCore::Error>::ValuePromise::~ValuePromise(v5);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v2);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v3);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v4);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::EncodeHTTPRequestTask::anonymous namespace'::setSignedHeader(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 400);
  if (!*(unsigned char *)(v1 + 88))
  {
    __break(1u);
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = (std::runtime_error *)(result + 152);
  uint64_t v4 = (const std::runtime_error *)(v1 + 8);
  char v5 = *(unsigned char *)(v1 + 80);
  if (v5)
  {
    std::runtime_error v6 = *v4;
    *(void *)(result + 168) = *(void *)(v1 + 24);
    *uint64_t v3 = v6;
    *(void *)(v1 + 16) = 0;
    *(void *)(v1 + 24) = 0;
    v4->__vftable = 0;
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(result + 152), v4);
    *(_OWORD *)(v2 + 168) = *(_OWORD *)(v1 + 24);
    uint64_t v7 = (void *)(v1 + 48);
    uint64_t v8 = *(void *)(v1 + 48);
    *(void *)(v2 + 192) = v8;
    uint64_t v9 = v2 + 192;
    *(void *)(v2 + 152) = &unk_1EDC827D8;
    *(void *)(v2 + 184) = *(void *)(v1 + 40);
    uint64_t v10 = *(void *)(v1 + 56);
    *(void *)(v2 + 200) = v10;
    if (v10)
    {
      *(void *)(v8 + 16) = v9;
      *(void *)(v1 + 40) = v7;
      void *v7 = 0;
      *(void *)(v1 + 56) = 0;
    }
    else
    {
      *(void *)(v2 + 184) = v9;
    }
    uint64_t v11 = *(void *)(v2 + 400);
    *(_OWORD *)(v2 + 208) = *(_OWORD *)(v11 + 64);
    *(void *)(v11 + 64) = 0;
    *(void *)(v11 + 72) = 0;
  }
  *(unsigned char *)(v2 + 224) = v5;
  uint64_t v12 = *(void *)(v2 + 408);
  if (v12 && !atomic_fetch_add((atomic_ullong *volatile)(v12 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v13 = *(std::__shared_weak_count **)(v2 + 408);
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = *(std::__shared_weak_count **)(v2 + 328);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v15 = *(std::__shared_weak_count **)(v2 + 360);
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = *(std::__shared_weak_count **)(v2 + 344);
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (*(unsigned char *)(v2 + 224)) {
      goto LABEL_20;
    }
LABEL_29:
    std::runtime_error::runtime_error(&v34, v3);
    uint64_t v23 = (void *)(v2 + 192);
    uint64_t v24 = *(void *)(v2 + 192);
    long long v35 = *(_OWORD *)(v2 + 168);
    uint64_t v25 = *(unsigned int ***)(v2 + 184);
    v34.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v36 = v25;
    uint64_t v37 = (unsigned int *)v24;
    if (*(void *)(v2 + 200))
    {
      *(void *)(v24 + 16) = &v37;
      *(void *)(v2 + 184) = v23;
      void *v23 = 0;
      *(void *)(v2 + 200) = 0;
    }
    else
    {
      uint64_t v36 = &v37;
    }
    long long v39 = *(_OWORD *)(v2 + 208);
    *(void *)(v2 + 208) = 0;
    *(void *)(v2 + 216) = 0;
    char v40 = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v41, (uint64_t)&v34);
    if (*(unsigned char *)(v2 + 104))
    {
      if (!*(unsigned char *)(v2 + 96)) {
        (**(void (***)(void))(v2 + 24))();
      }
      *(unsigned char *)(v2 + 104) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(v2 + 24), &v41);
    long long v27 = v42;
    uint64_t v29 = v43;
    uint64_t v28 = v44;
    *(void *)(v2 + 64) = v44;
    uint64_t v30 = v2 + 64;
    *(_OWORD *)(v2 + 40) = v27;
    *(void *)(v2 + 24) = &unk_1EDC827D8;
    uint64_t v31 = v45;
    *(void *)(v2 + 56) = v29;
    *(void *)(v2 + 72) = v31;
    if (v31)
    {
      *(void *)(v28 + 16) = v30;
      long long v43 = &v44;
      uint64_t v44 = 0;
      uint64_t v45 = 0;
      uint64_t v28 = 0;
    }
    else
    {
      *(void *)(v2 + 56) = v30;
    }
    *(_OWORD *)(v2 + 80) = v46;
    long long v46 = 0uLL;
    *(unsigned char *)(v2 + 96) = 0;
    *(unsigned char *)(v2 + 104) = 1;
    v41.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v43, (unsigned int *)v28);
    MEMORY[0x192FA3C30](&v41);
    if (v40)
    {
      v34.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v32 = (std::__shared_weak_count *)*((void *)&v39 + 1);
      if (*((void *)&v39 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v39 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v36, v37);
      MEMORY[0x192FA3C30](&v34);
    }
    goto LABEL_56;
  }
  if (!*(unsigned char *)(v2 + 224)) {
    goto LABEL_29;
  }
LABEL_20:
  int v17 = *(char *)(v2 + 175);
  if (v17 >= 0) {
    uint64_t v18 = (uint64_t)v3;
  }
  else {
    uint64_t v18 = *(void *)(v2 + 152);
  }
  if (v17 >= 0) {
    uint64_t v19 = *(unsigned __int8 *)(v2 + 175);
  }
  else {
    uint64_t v19 = *(void *)(v2 + 160);
  }
  AMSCore::Base64::encode(v18, v19, &v34);
  uint64_t v20 = *(void *)(v2 + 384);
  uint64_t v21 = (char *)operator new(0x19uLL);
  uint64_t v22 = (void **)(v2 + 232);
  *(void *)(v2 + 264) = v21;
  *(_OWORD *)(v2 + 272) = xmmword_18DDE9B20;
  strcpy(v21, "X-Apple-ActionSignature");
  if (SBYTE7(v35) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v2 + 232), (const std::string::value_type *)v34.__vftable, (std::string::size_type)v34.__imp_.__imp_);
  }
  else
  {
    *(std::runtime_error *)uint64_t v22 = v34;
    *(void *)(v2 + 248) = v35;
  }
  *(unsigned char *)(v2 + 256) = 1;
  char v26 = (void *)(v20 + 240);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>(v26, v2 + 264);
  if (*(unsigned char *)(v2 + 256))
  {
    std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>(v26, v2 + 264, v2 + 232);
    if (*(unsigned char *)(v2 + 256))
    {
      if (*(char *)(v2 + 255) < 0) {
        operator delete(*v22);
      }
    }
  }
  if (*(char *)(v2 + 287) < 0) {
    operator delete(*(void **)(v2 + 264));
  }
  if (*(unsigned char *)(v2 + 104) && !*(unsigned char *)(v2 + 96))
  {
    (**(void (***)(uint64_t))(v2 + 24))(v2 + 24);
    *(unsigned char *)(v2 + 104) = 0;
  }
  *(unsigned char *)(v2 + 96) = 1;
  *(unsigned char *)(v2 + 104) = 1;
  if (SBYTE7(v35) < 0) {
    operator delete(v34.__vftable);
  }
LABEL_56:
  if (*(unsigned char *)(v2 + 224))
  {
    if (*(char *)(v2 + 175) < 0) {
      operator delete(v3->__vftable);
    }
  }
  else
  {
    ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
  }
  uint64_t v33 = *(std::__shared_weak_count **)(v2 + 296);
  if (v33)
  {
    if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  *(void *)(v2 + 152) = v2 + 16;
  *(void *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 416) = 1;
  return AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v3);
}

void sub_18DB6DFF4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 287) < 0) {
    operator delete(*v17);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  std::expected<AMSCore::IAnisetteProvider::StartProvisioningResult,AMSCore::Error>::~expected[abi:fe180100](v16);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v15 + 288);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DB6E044()
{
}

void sub_18DB6E04C(_Unwind_Exception *a1)
{
  *(void *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 416) = 1;
  _Unwind_Resume(a1);
}

void AMSCore::EncodeHTTPRequestTask::anonymous namespace'::setSignedHeader(char *__p)
{
  if ((__p[416] & 1) == 0)
  {
    uint64_t v2 = *((void *)__p + 51);
    if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 51);
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 41);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    char v5 = (std::__shared_weak_count *)*((void *)__p + 45);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    std::runtime_error v6 = (std::__shared_weak_count *)*((void *)__p + 43);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    uint64_t v7 = (std::__shared_weak_count *)*((void *)__p + 37);
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  uint64_t v8 = (char *)*((void *)__p + 18);
  if (v8 == __p + 120)
  {
    (*(void (**)(char *))(*((void *)__p + 15) + 32))(__p + 120);
    if (!__p[104]) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  if (v8) {
    (*(void (**)(char *))(*(void *)v8 + 40))(v8);
  }
  if (__p[104])
  {
LABEL_23:
    if (!__p[96]) {
      (**((void (***)(void))__p + 3))();
    }
  }
LABEL_25:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)__p + 39);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)__p + 47);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)__p + 49);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(__p);
}

void std::bad_expected_access<AMSCore::Error>::~bad_expected_access(uint64_t a1)
{
  *(void *)a1 = &unk_1EDC83898;
  uint64_t v2 = a1 + 8;
  *(void *)(a1 + 8) = &unk_1EDC827D8;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 40, *(unsigned int **)(a1 + 48));
  MEMORY[0x192FA3C30](v2);
  std::exception::~exception((std::exception *)a1);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)a1 = &unk_1EDC83898;
  uint64_t v2 = a1 + 8;
  *(void *)(a1 + 8) = &unk_1EDC827D8;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 40, *(unsigned int **)(a1 + 48));
  MEMORY[0x192FA3C30](v2);
  std::exception::~exception((std::exception *)a1);
  JUMPOUT(0x192FA4080);
}

const char *std::bad_expected_access<void>::what()
{
  return "bad access to std::expected";
}

void AMSCore::EncodeHTTPRequestTask::anonymous namespace'::setStorefront(char *a1)
{
  uint64_t v1 = *((void *)a1 + 55);
  if (!*(unsigned char *)(v1 + 88))
  {
    __break(1u);
    return;
  }
  uint64_t v3 = (std::runtime_error *)(a1 + 152);
  uint64_t v4 = (const std::runtime_error *)(v1 + 8);
  char v5 = *(unsigned char *)(v1 + 80);
  if (v5)
  {
    std::runtime_error v6 = v4->__vftable;
    v4->__vftable = 0;
    v3->__vftable = v6;
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 152), v4);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(v1 + 24);
    uint64_t v7 = (void *)(v1 + 48);
    uint64_t v8 = *(void *)(v1 + 48);
    *((void *)a1 + 24) = v8;
    uint64_t v9 = a1 + 192;
    *((void *)a1 + 19) = &unk_1EDC827D8;
    *((void *)a1 + 23) = *(void *)(v1 + 40);
    uint64_t v10 = *(void *)(v1 + 56);
    *((void *)a1 + 25) = v10;
    if (v10)
    {
      *(void *)(v8 + 16) = v9;
      *(void *)(v1 + 40) = v7;
      void *v7 = 0;
      *(void *)(v1 + 56) = 0;
    }
    else
    {
      *((void *)a1 + 23) = v9;
    }
    uint64_t v11 = *((void *)a1 + 55);
    *((_OWORD *)a1 + 13) = *(_OWORD *)(v11 + 64);
    *(void *)(v11 + 64) = 0;
    *(void *)(v11 + 72) = 0;
  }
  a1[224] = v5;
  uint64_t v12 = *((void *)a1 + 56);
  if (v12 && !atomic_fetch_add((atomic_ullong *volatile)(v12 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v13 = (std::__shared_weak_count *)*((void *)a1 + 56);
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)a1 + 49);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if ((a1[367] & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (a1[367] < 0) {
LABEL_14:
  }
    operator delete(*((void **)a1 + 43));
LABEL_15:
  uint64_t v15 = (std::__shared_weak_count *)*((void *)a1 + 47);
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = (void **)(a1 + 232);
  int v17 = a1[224];
  if (a1[224])
  {
    (*((void (**)(std::runtime_error *__return_ptr))v3->~runtime_error + 16))(&v69);
    int v18 = BYTE8(v70);
    if (a1[256] == BYTE8(v70))
    {
      if (a1[256])
      {
        if (a1[255] < 0) {
          operator delete(*v16);
        }
        *(std::runtime_error *)uint64_t v16 = v69;
        *((void *)a1 + 31) = v70;
      }
    }
    else if (a1[256])
    {
      if (a1[255] < 0)
      {
        operator delete(*v16);
        int v18 = BYTE8(v70);
      }
      a1[256] = 0;
      if (v18 && SBYTE7(v70) < 0) {
        operator delete(v69.__vftable);
      }
    }
    else
    {
      *(std::runtime_error *)uint64_t v16 = v69;
      *((void *)a1 + 31) = v70;
      a1[256] = 1;
    }
    int v28 = 0;
  }
  else
  {
    std::runtime_error::runtime_error(&v69, v3);
    uint64_t v19 = a1 + 192;
    uint64_t v20 = *((void *)a1 + 24);
    long long v70 = *(_OWORD *)(a1 + 168);
    uint64_t v21 = (unsigned int **)*((void *)a1 + 23);
    v69.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    int v71 = v21;
    uint64_t v72 = (unsigned int *)v20;
    uint64_t v73 = *((void *)a1 + 25);
    if (v73)
    {
      *(void *)(v20 + 16) = &v72;
      *((void *)a1 + 23) = v19;
      void *v19 = 0;
      *((void *)a1 + 25) = 0;
    }
    else
    {
      int v71 = &v72;
    }
    long long v74 = *((_OWORD *)a1 + 13);
    *((void *)a1 + 26) = 0;
    *((void *)a1 + 27) = 0;
    unsigned __int8 v75 = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v60, (uint64_t)&v69);
    if (a1[104])
    {
      if (!a1[96]) {
        (**((void (***)(void))a1 + 3))();
      }
      a1[104] = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), (const std::runtime_error *)&v60);
    long long v22 = *(_OWORD *)&v61[8];
    uint64_t v24 = v62;
    uint64_t v23 = v63;
    *((void *)a1 + 8) = v63;
    uint64_t v25 = a1 + 64;
    *(_OWORD *)(a1 + 40) = v22;
    *((void *)a1 + 3) = &unk_1EDC827D8;
    uint64_t v26 = v64;
    *((void *)a1 + 7) = v24;
    *((void *)a1 + 9) = v26;
    if (v26)
    {
      *(void *)(v23 + 16) = v25;
      uint64_t v62 = &v63;
      uint64_t v63 = 0;
      uint64_t v64 = 0;
      uint64_t v23 = 0;
    }
    else
    {
      *((void *)a1 + 7) = v25;
    }
    *((_OWORD *)a1 + 5) = v65;
    long long v65 = 0uLL;
    a1[96] = 0;
    a1[104] = 1;
    uint64_t v60 = (char *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v62, (unsigned int *)v23);
    MEMORY[0x192FA3C30](&v60);
    if (v75)
    {
      v69.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      long long v27 = (std::__shared_weak_count *)*((void *)&v74 + 1);
      if (*((void *)&v74 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v74 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v71, v72);
      MEMORY[0x192FA3C30](&v69);
    }
    int v28 = 3;
  }
  uint64_t v29 = *((void *)a1 + 19);
  if (a1[224])
  {
    v3->__vftable = 0;
    if (v29) {
      (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
    }
    if (!v17)
    {
LABEL_54:
      if (!a1[256]) {
        goto LABEL_120;
      }
      goto LABEL_118;
    }
  }
  else
  {
    (*(void (**)(std::runtime_error *))v29)(v3);
    if (!v17) {
      goto LABEL_54;
    }
  }
  if (!a1[256])
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v69);
    AMSCore::Logger::log<char [15]>((uint64_t)v69.__vftable);
    int imp = (std::__shared_weak_count *)v69.__imp_.__imp_;
    if (v69.__imp_.__imp_ && !atomic_fetch_add((atomic_ullong *volatile)v69.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
      std::__shared_weak_count::__release_weak(imp);
    }
    if (a1[104] && !a1[96]) {
      (**((void (***)(void))a1 + 3))();
    }
    a1[96] = 1;
    a1[104] = 1;
    goto LABEL_117;
  }
  uint64_t v30 = *((void *)a1 + 53);
  *(_OWORD *)&v66.__r_.__value_.__l.__data_ = *(_OWORD *)v16;
  v66.__r_.__value_.__r.__words[2] = *((void *)a1 + 31);
  *((void *)a1 + 30) = 0;
  *((void *)a1 + 31) = 0;
  *uint64_t v16 = 0;
  uint64_t v32 = *(void *)(v30 + 24);
  uint64_t v31 = *(std::__shared_weak_count **)(v30 + 32);
  uint64_t v67 = v32;
  int v68 = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v32)
  {
    uint64_t v60 = (char *)operator new(0x20uLL);
    *(_OWORD *)int v61 = xmmword_18DDE9B50;
    strcpy(v60, "storefront-header-suffix");
    (*(void (**)(std::runtime_error *__return_ptr, uint64_t, char **))(*(void *)v32 + 56))(&v69, v32, &v60);
    if ((v61[15] & 0x80000000) != 0) {
      operator delete(v60);
    }
    uint64_t v33 = v69.__vftable;
    if (!v75) {
      goto LABEL_96;
    }
    if ((SBYTE7(v70) & 0x80u) == 0) {
      std::runtime_error v34 = &v69;
    }
    else {
      std::runtime_error v34 = v69.__vftable;
    }
    if ((SBYTE7(v70) & 0x80u) == 0) {
      size_t v35 = BYTE7(v70);
    }
    else {
      size_t v35 = (size_t)v69.__imp_.__imp_;
    }
    if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v36 = 22;
    }
    else {
      std::string::size_type v36 = (v66.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    }
    if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v66.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v66.__r_.__value_.__l.__size_;
    }
    if (v36 - size >= v35)
    {
      if (v35)
      {
        if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v39 = &v66;
        }
        else {
          long long v39 = (std::string *)v66.__r_.__value_.__r.__words[0];
        }
        memmove((char *)v39 + size, v34, v35);
        std::string::size_type v40 = size + v35;
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        {
          v66.__r_.__value_.__l.__size_ = size + v35;
          v39->__r_.__value_.__s.__data_[v40] = 0;
          if (v75)
          {
LABEL_92:
            if (SBYTE7(v70) < 0) {
              operator delete(v69.__vftable);
            }
            goto LABEL_97;
          }
          goto LABEL_95;
        }
        *((unsigned char *)&v66.__r_.__value_.__s + 23) = v40 & 0x7F;
        v39->__r_.__value_.__s.__data_[v40] = 0;
      }
    }
    else
    {
      std::string::__grow_by_and_replace(&v66, v36, size + v35 - v36, size, size, 0, v35, (const std::string::value_type *)v34);
    }
    if (v75) {
      goto LABEL_92;
    }
LABEL_95:
    uint64_t v33 = v69.__vftable;
LABEL_96:
    ((void (*)(std::runtime_error *))v33->~runtime_error)(&v69);
  }
LABEL_97:
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v69);
  AMSCore::Logger::log<char [36],std::string>((uint64_t)v69.__vftable, 2u, (uint64_t)"networking", 10, "Appending storefront. storefront = ", (uint64_t)&v66);
  std::runtime_error v41 = (std::__shared_weak_count *)v69.__imp_.__imp_;
  if (v69.__imp_.__imp_ && !atomic_fetch_add((atomic_ullong *volatile)v69.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  long long v42 = (void **)(a1 + 264);
  a1[343] = 19;
  strcpy(a1 + 320, "X-Apple-Store-Front");
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a1 + 11, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)long long v42 = *(_OWORD *)&v66.__r_.__value_.__l.__data_;
    *((void *)a1 + 35) = *((void *)&v66.__r_.__value_.__l + 2);
  }
  uint64_t v43 = *((void *)a1 + 50);
  a1[288] = 1;
  uint64_t v44 = (void *)(v43 + 240);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>((void *)(v43 + 240), (uint64_t)(a1 + 320));
  if (a1[288])
  {
    std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>(v44, (uint64_t)(a1 + 320), (uint64_t)(a1 + 264));
    if (a1[288])
    {
      if (a1[287] < 0) {
        operator delete(*v42);
      }
    }
  }
  if (a1[343] < 0) {
    operator delete(*((void **)a1 + 40));
  }
  unsigned __int8 v75 = 1;
  if (a1[104] && !a1[96])
  {
    (**((void (***)(uint64_t))a1 + 3))((uint64_t)(a1 + 24));
    int v45 = v75;
    a1[104] = 0;
    if (!v45)
    {
      std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v69);
      long long v54 = v70;
      uint64_t v56 = v71;
      long long v55 = v72;
      *((void *)a1 + 8) = v72;
      char v57 = a1 + 64;
      *(_OWORD *)(a1 + 40) = v54;
      *((void *)a1 + 3) = &unk_1EDC827D8;
      uint64_t v58 = v73;
      *((void *)a1 + 7) = v56;
      *((void *)a1 + 9) = v58;
      if (v58)
      {
        *((void *)v55 + 2) = v57;
        int v71 = &v72;
        uint64_t v72 = 0;
        uint64_t v73 = 0;
      }
      else
      {
        *((void *)a1 + 7) = v57;
      }
      *((_OWORD *)a1 + 5) = v74;
      long long v74 = 0uLL;
      int v59 = v75;
      a1[96] = 0;
      a1[104] = 1;
      if (!v59) {
        ((void (*)(std::runtime_error *))v69.~runtime_error)(&v69);
      }
      goto LABEL_113;
    }
  }
  else
  {
    LOBYTE(v45) = 1;
  }
  a1[96] = v45;
  a1[104] = 1;
LABEL_113:
  long long v46 = v68;
  if (!v68 || atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_117;
    }
    goto LABEL_116;
  }
  ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
  std::__shared_weak_count::__release_weak(v46);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
LABEL_116:
  }
    operator delete(v66.__r_.__value_.__l.__data_);
LABEL_117:
  int v28 = 3;
  if (!a1[256]) {
    goto LABEL_120;
  }
LABEL_118:
  if (a1[255] < 0) {
    operator delete(*v16);
  }
LABEL_120:
  if (a1[319] < 0)
  {
    operator delete(*((void **)a1 + 37));
    if (v28 != 3) {
      goto LABEL_125;
    }
LABEL_124:
    *((void *)a1 + 19) = a1 + 16;
    *(void *)a1 = 0;
    AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v3);
    return;
  }
  if (v28 == 3) {
    goto LABEL_124;
  }
LABEL_125:
  uint64_t v47 = (char *)*((void *)a1 + 18);
  if (v47 != a1 + 120)
  {
    if (v47) {
      (*(void (**)(char *))(*(void *)v47 + 40))(v47);
    }
    if (!a1[104]) {
      goto LABEL_133;
    }
    goto LABEL_131;
  }
  (*(void (**)(char *))(*((void *)a1 + 15) + 32))(a1 + 120);
  if (a1[104])
  {
LABEL_131:
    if (!a1[96]) {
      (**((void (***)(void))a1 + 3))();
    }
  }
LABEL_133:
  uint64_t v48 = *((void *)a1 + 54);
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v48 && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)a1 + 54) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    long long v49 = (std::__shared_weak_count *)*((void *)a1 + 54);
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
  }
  uint64_t v50 = *((void *)a1 + 52);
  if (v50 && !atomic_fetch_add((atomic_ullong *volatile)(v50 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v51 = (std::__shared_weak_count *)*((void *)a1 + 52);
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
  }
  uint64_t v52 = *((void *)a1 + 51);
  if (v52)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v52 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      int v53 = (std::__shared_weak_count *)*((void *)a1 + 51);
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  operator delete(a1);
}

void sub_18DB6F1A0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28)
{
  std::expected<AMSCore::IAnisetteProvider::StartProvisioningResult,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&a28);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a26);
  if (a24 < 0) {
    operator delete(__p);
  }
  if (v28[256] && v28[255] < 0) {
    operator delete(*v30);
  }
  if (v28[319] < 0) {
    operator delete(*v29);
  }
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DB6F250()
{
}

void AMSCore::EncodeHTTPRequestTask::anonymous namespace'::setStorefront(char *__p)
{
  if (!*(void *)__p) {
    goto LABEL_17;
  }
  uint64_t v2 = *((void *)__p + 56);
  if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 56);
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 49);
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((__p[367] & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (__p[367] < 0) {
LABEL_8:
  }
    operator delete(*((void **)__p + 43));
LABEL_9:
  char v5 = (std::__shared_weak_count *)*((void *)__p + 47);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (__p[256] && __p[255] < 0) {
    operator delete(*((void **)__p + 29));
  }
  if (__p[319] < 0) {
    operator delete(*((void **)__p + 37));
  }
LABEL_17:
  std::runtime_error v6 = (char *)*((void *)__p + 18);
  if (v6 == __p + 120)
  {
    (*(void (**)(char *))(*((void *)__p + 15) + 32))(__p + 120);
    if (!__p[104]) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  if (v6) {
    (*(void (**)(char *))(*(void *)v6 + 40))(v6);
  }
  if (__p[104])
  {
LABEL_23:
    if (!__p[96]) {
      (**((void (***)(void))__p + 3))();
    }
  }
LABEL_25:
  uint64_t v7 = *((void *)__p + 54);
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v7 && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)__p + 54) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v8 = (std::__shared_weak_count *)*((void *)__p + 54);
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = *((void *)__p + 52);
  if (v9 && !atomic_fetch_add((atomic_ullong *volatile)(v9 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v10 = (std::__shared_weak_count *)*((void *)__p + 52);
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = *((void *)__p + 51);
  if (v11 && !atomic_fetch_add((atomic_ullong *volatile)(v11 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v12 = (std::__shared_weak_count *)*((void *)__p + 51);
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  operator delete(__p);
}

uint64_t AMSCore::Logger::log<char [15]>(uint64_t result)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= 2u)
  {
    uint64_t v1 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v6);
    uint64_t v2 = *(void *)(v6[0] - 24);
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v6, (uint64_t)"No storefront.", 14);
    uint64_t v3 = v6[6];
    uint64_t v4 = (char *)v6 + *(void *)(v6[0] - 24);
    if ((v4[32] & 5) != 0)
    {
      uint64_t v5 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v4 + 5) + 32))(&rep);
      uint64_t v5 = v13;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v10 = 2;
    uint64_t v11 = v3;
    uint64_t v12 = v5;
    (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v1 + 16) + 16))(*(void *)(v1 + 16), "networking", 10, &rep);
    v6[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v6 + *(void *)(v6[0] - 2AMSCore::URL::~URL((AMSCore::URL *)(this + 4)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v6[1] = MEMORY[0x1E4FBA470] + 16;
    if (v7 < 0) {
      operator delete((void *)v6[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v8);
  }
  return result;
}

void sub_18DB6F7FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::runtime_error *AMSCore::EncodeHTTPRequestTask::anonymous namespace'::setIdentifiers(std::runtime_error *result)
{
  uint64_t v1 = result[27].__vftable;
  if (!LOBYTE(v1[3].what))
  {
    __break(1u);
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = &result[4].__vftable;
  uint64_t v4 = (const std::runtime_error *)&v1->~runtime_error_0;
  char v5 = (char)v1[3].~runtime_error_0;
  if (v5)
  {
    std::runtime_error v6 = v4->__vftable;
    v4->__vftable = 0;
    *uint64_t v3 = v6;
  }
  else
  {
    std::runtime_error::runtime_error(result + 4, v4);
    v2[5] = *(std::runtime_error *)&v1[1].~runtime_error;
    char v7 = v1 + 2;
    uint64_t v8 = v1[2].~runtime_error;
    v2[6].__imp_.__imp_ = (const char *)v8;
    p_int imp = (std::runtime_error_vtbl *)&v2[6].__imp_;
    v2[4].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    v2[6].__vftable = (std::runtime_error_vtbl *)v1[1].what;
    char v10 = v1[2].~runtime_error_0;
    v2[7].__vftable = (std::runtime_error_vtbl *)v10;
    if (v10)
    {
      *((void *)v8 + 2) = p_imp;
      v1[1].what = (const char *(__cdecl *)(const std::runtime_error *__hidden))v7;
      v7->~runtime_error = 0;
      v1[2].~runtime_error_0 = 0;
    }
    else
    {
      v2[6].__vftable = p_imp;
    }
    uint64_t v11 = (std::runtime_error *)v2[27].__vftable;
    *(std::runtime_error *)((char *)v2 + 120) = v11[4];
    v11[4].__vftable = 0;
    v11[4].__imp_.__imp_ = 0;
  }
  LOBYTE(v2[8].__imp_.__imp_) = v5;
  int imp = v2[27].__imp_.__imp_;
  if (imp && !atomic_fetch_add((atomic_ullong *volatile)imp + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v13 = (std::__shared_weak_count *)v2[27].__imp_.__imp_;
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)v2[25].__vftable;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)v2[24].__vftable;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = v2[4].__vftable;
  if (!LOBYTE(v2[8].__imp_.__imp_))
  {
LABEL_28:
    ((void (*)(void *))v16->~runtime_error)(v3);
    goto LABEL_29;
  }
  if (v16)
  {
    HIBYTE(v2[23].__vftable) = 11;
    strcpy((char *)&v2[22], "iCloud-DSID");
    uint64_t v17 = (*((uint64_t (**)(std::runtime_error_vtbl *))v16->~runtime_error + 4))(v16);
    std::to_string(&v20, *(void *)(v17 + 32));
    int v18 = v2[25].__imp_.__imp_;
    *(std::string *)&v2[17].__vftable = v20;
    memset(&v20, 0, sizeof(v20));
    LOBYTE(v2[18].__imp_.__imp_) = 1;
    uint64_t v19 = v18 + 240;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>((void *)v18 + 30, (uint64_t)&v2[22]);
    if (LOBYTE(v2[18].__imp_.__imp_))
    {
      std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>(v19, (uint64_t)&v2[22], (uint64_t)&v2[17]);
      if (LOBYTE(v2[18].__imp_.__imp_))
      {
        if (SHIBYTE(v2[18].__vftable) < 0) {
          operator delete(v2[17].__vftable);
        }
      }
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v20.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v2[23].__vftable) & 0x80000000) == 0) {
        goto LABEL_25;
      }
    }
    else if ((SHIBYTE(v2[23].__vftable) & 0x80000000) == 0)
    {
      goto LABEL_25;
    }
    operator delete(v2[22].__vftable);
LABEL_25:
    uint64_t v16 = v2[4].__vftable;
    if (LOBYTE(v2[8].__imp_.__imp_))
    {
      *uint64_t v3 = 0;
      if (v16) {
        (*((void (**)(std::runtime_error_vtbl *))v16->~runtime_error + 1))(v16);
      }
      goto LABEL_29;
    }
    goto LABEL_28;
  }
LABEL_29:
  if (SHIBYTE(v2[12].__imp_.__imp_) < 0) {
    operator delete((void *)v2[11].__imp_.__imp_);
  }
  if (LOBYTE(v2[10].__imp_.__imp_))
  {
    if (SHIBYTE(v2[10].__vftable) < 0) {
      operator delete(v2[9].__vftable);
    }
  }
  BYTE2(v2[1].__vftable) = 1;
  v2[4].__vftable = (std::runtime_error_vtbl *)&v2[1];
  v2->__vftable = 0;
  return (std::runtime_error *)AMSCore::Task<void,void>::Promise::Awaiter::await_suspend((uint64_t)v3);
}

void sub_18DB6FB9C(void *a1)
{
  if (*(char *)(v2 + 375) < 0) {
    operator delete(*v4);
  }
  std::expected<std::unique_ptr<AMSCore::IiCloudAccount>,AMSCore::Error>::~expected[abi:fe180100](v1);
  AMSCore::AccountIdentity::~AccountIdentity(v3);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::EncodeHTTPRequestTask::anonymous namespace'::setIdentifiers(char *__p)
{
  if (!*(void *)__p) {
    goto LABEL_15;
  }
  uint64_t v2 = *((void *)__p + 55);
  if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 55);
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 50);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  char v5 = (std::__shared_weak_count *)*((void *)__p + 48);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if ((__p[207] & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (__p[207] < 0) {
LABEL_11:
  }
    operator delete(*((void **)__p + 23));
LABEL_12:
  if (__p[168] && __p[167] < 0) {
    operator delete(*((void **)__p + 18));
  }
LABEL_15:
  std::runtime_error v6 = (char *)*((void *)__p + 7);
  if (v6 == __p + 32)
  {
    (*(void (**)(char *))(*((void *)__p + 4) + 32))(__p + 32);
  }
  else if (v6)
  {
    (*(void (**)(char *))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *((void *)__p + 53);
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v7 && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)__p + 53) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v8 = (std::__shared_weak_count *)*((void *)__p + 53);
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = *((void *)__p + 52);
  if (v9 && !atomic_fetch_add((atomic_ullong *volatile)(v9 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    char v10 = (std::__shared_weak_count *)*((void *)__p + 52);
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  operator delete(__p);
}

uint64_t *std::expected<std::unique_ptr<AMSCore::IiCloudAccount>,AMSCore::Error>::~expected[abi:fe180100](uint64_t *a1)
{
  int v2 = *((unsigned __int8 *)a1 + 72);
  uint64_t v3 = *a1;
  if (v2)
  {
    *a1 = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  else
  {
    (*(void (**)(uint64_t *))v3)(a1);
  }
  return a1;
}

void AMSCore::EncodeHTTPRequestTask::anonymous namespace'::setCookies(unint64_t a1)
{
  uint64_t v1 = (std::runtime_error *)(a1 + 536);
  int v2 = (std::string *)(a1 + 152);
  uint64_t v3 = (std::string *)(a1 + 304);
  char v188 = (unsigned char *)(a1 + 1127);
  char v189 = (std::runtime_error *)(a1 + 616);
  int v190 = (std::runtime_error *)(a1 + 776);
  uint64_t v191 = (std::runtime_error *)(a1 + 456);
  uint64_t v4 = a1 + 856;
  char v5 = (uint64_t **)(a1 + 888);
  std::runtime_error v6 = (std::string *)(a1 + 912);
  uint64_t v7 = (std::string *)(a1 + 936);
  uint64_t i = (_OWORD *)(a1 + 976);
  uint64_t v9 = (std::runtime_error_vtbl **)(a1 + 992);
  long long v184 = (uint64_t *)(a1 + 1008);
  unint64_t v185 = a1 + 1024;
  char v10 = (_DWORD *)(a1 + 1120);
  unint64_t v186 = a1 + 16;
  uint64_t v187 = (std::runtime_error *)(a1 + 696);
  switch(*(unsigned char *)(a1 + 1127))
  {
    case 1:
      goto LABEL_21;
    case 2:
      goto LABEL_60;
    case 3:
      goto LABEL_82;
    case 4:
      goto LABEL_99;
    default:
      unint64_t v180 = a1 + 1120;
      uint64_t v177 = (std::runtime_error *)(a1 + 536);
      long long v178 = (std::string *)(a1 + 936);
      unint64_t v12 = a1 + 992;
      uint64_t v13 = (_OWORD *)(a1 + 976);
      uint64_t v14 = (std::string *)(a1 + 304);
      uint64_t v15 = *(void *)(a1 + 1088);
      if (!*(unsigned char *)(v15 + 88)) {
        goto LABEL_266;
      }
      uint64_t v16 = (const std::runtime_error *)(v15 + 8);
      char v17 = *(unsigned char *)(v15 + 80);
      if (v17)
      {
        *(void *)(a1 + 456) = *(void *)(v15 + 8);
        int v18 = (const char **)(a1 + 464);
        p_int imp = (std::__libcpp_refstring *)(v15 + 16);
        uint64_t v3 = (std::string *)(a1 + 304);
      }
      else
      {
        std::runtime_error::runtime_error(v191, v16);
        *(_OWORD *)(a1 + 472) = *(_OWORD *)(v15 + 24);
        *(void *)(a1 + 456) = &unk_1EDC827D8;
        std::string v20 = (void *)(v15 + 48);
        uint64_t v21 = *(void *)(v15 + 48);
        unint64_t v22 = a1 + 496;
        *(void *)(a1 + 488) = *(void *)(v15 + 40);
        *(void *)(a1 + 496) = v21;
        uint64_t v23 = *(void *)(v15 + 56);
        *(void *)(a1 + 504) = v23;
        if (v23)
        {
          *(void *)(v21 + 16) = v22;
          *(void *)(v15 + 40) = v20;
          *std::string v20 = 0;
          *(void *)(v15 + 56) = 0;
        }
        else
        {
          *(void *)(a1 + 488) = v22;
        }
        uint64_t v3 = v14;
        uint64_t v24 = *(const std::runtime_error **)(a1 + 1088);
        uint64_t v25 = v24[4].__vftable;
        uint64_t v16 = v24 + 4;
        *(void *)(a1 + 512) = v25;
        int v18 = (const char **)(a1 + 520);
        p_int imp = &v16->__imp_;
      }
      uint64_t i = v13;
      *int v18 = p_imp->__imp_;
      v16->__vftable = 0;
      v16->__imp_.__imp_ = 0;
      *(unsigned char *)(a1 + 528) = v17;
      uint64_t v26 = *(void *)(a1 + 1096);
      uint64_t v9 = (std::runtime_error_vtbl **)v12;
      if (v26 && !atomic_fetch_add((atomic_ullong *volatile)(v26 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        long long v27 = *(std::__shared_weak_count **)(a1 + 1096);
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
      int v28 = *(std::__shared_weak_count **)(a1 + 544);
      uint64_t v7 = v178;
      if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
      uint64_t v29 = *(std::__shared_weak_count **)(a1 + 968);
      if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
      if (!*(unsigned char *)(a1 + 528))
      {
        std::runtime_error::runtime_error(&v201, v191);
        long long v202 = *(_OWORD *)(a1 + 472);
        uint64_t v44 = *(unsigned int ***)(a1 + 488);
        uint64_t v43 = *(void *)(a1 + 496);
        v201.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        v203 = v44;
        v204 = (unsigned int *)v43;
        uint64_t v205 = *(void *)(a1 + 504);
        if (v205)
        {
          *(void *)(v43 + 16) = &v204;
          *(void *)(a1 + 488) = a1 + 496;
          *(void *)(a1 + 496) = 0;
          *(void *)(a1 + 504) = 0;
        }
        else
        {
          v203 = &v204;
        }
        long long v206 = *(_OWORD *)(a1 + 512);
        *(void *)(a1 + 520) = 0;
        *(void *)(a1 + 512) = 0;
        unsigned __int8 v207 = 1;
        AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v192, (uint64_t)&v201);
        if (*(unsigned char *)(a1 + 104))
        {
          if (!*(unsigned char *)(a1 + 96)) {
            (**(void (***)(void))(a1 + 24))();
          }
          *(unsigned char *)(a1 + 104) = 0;
        }
        std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v192);
        long long v170 = v193;
        std::string v172 = v194;
        uint64_t v171 = v195;
        *(void *)(a1 + 64) = v195;
        unint64_t v173 = a1 + 64;
        *(_OWORD *)(a1 + 40) = v170;
        *(void *)(a1 + 24) = &unk_1EDC827D8;
        uint64_t v174 = v196;
        *(void *)(a1 + 56) = v172;
        *(void *)(a1 + 72) = v174;
        if (v174)
        {
          *(void *)(v171 + 16) = v173;
          long long v194 = &v195;
          uint64_t v195 = 0;
          uint64_t v196 = 0;
          uint64_t v171 = 0;
        }
        else
        {
          *(void *)(a1 + 56) = v173;
        }
        *(_OWORD *)(a1 + 80) = v197;
        long long v197 = 0uLL;
        *(unsigned char *)(a1 + 96) = 0;
        *(unsigned char *)(a1 + 104) = 1;
        v192.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v194, (unsigned int *)v171);
        MEMORY[0x192FA3C30](&v192);
        if (v207)
        {
          v201.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
          char v175 = (std::__shared_weak_count *)*((void *)&v206 + 1);
          if (*((void *)&v206 + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v206 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
            std::__shared_weak_count::__release_weak(v175);
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v203, v204);
          MEMORY[0x192FA3C30](&v201);
        }
        if (!*(unsigned char *)(a1 + 528)) {
          goto LABEL_229;
        }
        goto LABEL_237;
      }
      uint64_t v30 = *(void *)(a1 + 456);
      AMSCore::URL::URL(v2, (const AMSCore::URL *)(*(void *)(a1 + 1040) + 80));
      uint64_t v31 = *(void (**)(uint64_t, std::string *))(*(void *)v30 + 48);
      uint64_t v32 = v30;
      uint64_t v1 = v177;
      v31(v32, v2);
      std::runtime_error v33 = *v177;
      *(std::runtime_error *)(a1 + 1104) = *v177;
      v177->__vftable = 0;
      v177->__imp_.__imp_ = 0;
      char v10 = (_DWORD *)v180;
      if (!atomic_load_explicit((atomic_ullong *volatile)&v33.__vftable[4], memory_order_acquire))
      {
        *char v188 = 1;
        if (!atomic_exchange((atomic_ullong *volatile)(*(void *)(a1 + 1104) + 96), a1)) {
          return;
        }
      }
LABEL_21:
      uint64_t v179 = v3;
      uint64_t v34 = *(void *)(a1 + 1104);
      if (!*(unsigned char *)(v34 + 88)) {
        goto LABEL_266;
      }
      uint64_t v181 = v10;
      std::error_code v182 = i;
      size_t v35 = v7;
      std::string::size_type v36 = v1;
      uint64_t v37 = (const std::runtime_error *)(v34 + 8);
      char v38 = *(unsigned char *)(v34 + 80);
      if (v38)
      {
        *int v190 = *(std::runtime_error *)(v34 + 8);
        *(void *)(a1 + 792) = *(void *)(v34 + 24);
        *(void *)(v34 + 16) = 0;
        *(void *)(v34 + 24) = 0;
        v37->__vftable = 0;
      }
      else
      {
        std::runtime_error::runtime_error(v190, v37);
        *(_OWORD *)(a1 + 792) = *(_OWORD *)(v34 + 24);
        *(void *)(a1 + 776) = &unk_1EDC827D8;
        long long v39 = (void *)(v34 + 48);
        uint64_t v40 = *(void *)(v34 + 48);
        *(void *)(a1 + 808) = *(void *)(v34 + 40);
        unint64_t v41 = a1 + 816;
        *(void *)(a1 + 816) = v40;
        uint64_t v42 = *(void *)(v34 + 56);
        *(void *)(a1 + 824) = v42;
        if (v42)
        {
          *(void *)(v40 + 16) = v41;
          *(void *)(v34 + 40) = v39;
          *long long v39 = 0;
          *(void *)(v34 + 56) = 0;
        }
        else
        {
          *(void *)(a1 + 808) = v41;
        }
        uint64_t v45 = *(void *)(a1 + 1104);
        *(_OWORD *)(a1 + 832) = *(_OWORD *)(v45 + 64);
        *(void *)(v45 + 64) = 0;
        *(void *)(v45 + 72) = 0;
      }
      *(unsigned char *)(a1 + 848) = v38;
      uint64_t v46 = *(void *)(a1 + 1112);
      if (v46 && !atomic_fetch_add((atomic_ullong *volatile)(v46 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v47 = *(std::__shared_weak_count **)(a1 + 1112);
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
      uint64_t v48 = *(std::__shared_weak_count **)(a1 + 544);
      if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
      AMSCore::URL::~URL((AMSCore::URL *)v2);
      if (!*(unsigned char *)(a1 + 848))
      {
        std::runtime_error::runtime_error(&v201, v190);
        long long v202 = *(_OWORD *)(a1 + 792);
        long long v55 = *(unsigned int ***)(a1 + 808);
        v201.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        uint64_t v56 = *(void *)(a1 + 816);
        uint64_t v57 = *(void *)(a1 + 824);
        v203 = v55;
        v204 = (unsigned int *)v56;
        uint64_t v205 = v57;
        if (v57)
        {
          *(void *)(v56 + 16) = &v204;
          *(void *)(a1 + 808) = a1 + 816;
          *(void *)(a1 + 816) = 0;
          *(void *)(a1 + 824) = 0;
        }
        else
        {
          v203 = &v204;
        }
        long long v206 = *(_OWORD *)(a1 + 832);
        *(void *)(a1 + 840) = 0;
        *(void *)(a1 + 832) = 0;
        unsigned __int8 v207 = 1;
        AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v192, (uint64_t)&v201);
        if (*(unsigned char *)(a1 + 104))
        {
          if (!*(unsigned char *)(a1 + 96)) {
            (**(void (***)(void))(a1 + 24))();
          }
          *(unsigned char *)(a1 + 104) = 0;
        }
        std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v192);
        long long v58 = v193;
        uint64_t v60 = v194;
        uint64_t v59 = v195;
        *(void *)(a1 + 64) = v195;
        unint64_t v61 = a1 + 64;
        *(_OWORD *)(a1 + 40) = v58;
        *(void *)(a1 + 24) = &unk_1EDC827D8;
        uint64_t v62 = v196;
        *(void *)(a1 + 56) = v60;
        *(void *)(a1 + 72) = v62;
        if (v62)
        {
          *(void *)(v59 + 16) = v61;
          long long v194 = &v195;
          uint64_t v195 = 0;
          uint64_t v196 = 0;
          uint64_t v59 = 0;
        }
        else
        {
          *(void *)(a1 + 56) = v61;
        }
        *(_OWORD *)(a1 + 80) = v197;
        long long v197 = 0uLL;
        *(unsigned char *)(a1 + 96) = 0;
        *(unsigned char *)(a1 + 104) = 1;
        v192.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v194, (unsigned int *)v59);
        MEMORY[0x192FA3C30](&v192);
        if (v207)
        {
          v201.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
          uint64_t v63 = (std::__shared_weak_count *)*((void *)&v206 + 1);
          if (*((void *)&v206 + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v206 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v203, v204);
          MEMORY[0x192FA3C30](&v201);
        }
        goto LABEL_223;
      }
      long long v49 = *(uint64_t **)(a1 + 776);
      uint64_t v50 = *(uint64_t **)(a1 + 784);
      uint64_t v1 = v36;
      uint64_t v7 = v35;
      for (uint64_t i = v182; v49 != v50; ++v49)
        std::__tree<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<std::unique_ptr<AMSCore::HTTPCookie>&&>>(v5, (const void **)(*v49 + 48), *v49 + 48, v49);
      if ((*(uint64_t (**)(void))(**(void **)(a1 + 1056) + 96))(*(void *)(a1 + 1056))) {
        goto LABEL_185;
      }
      int v51 = *(char *)(a1 + 1128);
      uint64_t v52 = *(void *)(a1 + 1008);
      std::string::size_type v53 = *(void *)(a1 + 1080);
      long long v54 = *(const std::string::value_type **)(a1 + 1072);
      if (v51 < 0)
      {
        std::string::__init_copy_ctor_external(v7, v54, v53);
      }
      else
      {
        *(void *)(a1 + 936) = v54;
        *(void *)(a1 + 944) = v53;
        *(_DWORD *)(a1 + 952) = *v181;
        *(_DWORD *)(a1 + 955) = *(_DWORD *)((char *)v181 + 3);
        *(unsigned char *)(a1 + 959) = v51;
      }
      (*(void (**)(uint64_t, std::string *))(*(void *)v52 + 48))(v52, v7);
      std::runtime_error v64 = v1[10];
      v187->__vftable = 0;
      v187->__imp_.__imp_ = 0;
      std::runtime_error *v1 = v64;
      uint64_t v3 = v179;
      if (!atomic_load_explicit((atomic_ullong *volatile)&v64.__vftable[4], memory_order_acquire))
      {
        *char v188 = 2;
        if (!atomic_exchange((atomic_ullong *volatile)(*(void *)(a1 + 536) + 96), a1)) {
          return;
        }
      }
LABEL_60:
      std::error_code v183 = i;
      p_data = (void **)&v7->__r_.__value_.__l.__data_;
      std::string v66 = v1;
      uint64_t v67 = v9;
      int v68 = v66;
      std::runtime_error v69 = v66->__vftable;
      if (!LOBYTE(v66->__vftable[3].what)) {
        goto LABEL_266;
      }
      long long v70 = (const std::runtime_error *)&v69->~runtime_error_0;
      char v71 = (char)v69[3].~runtime_error_0;
      if (v71)
      {
        uint64_t v72 = v70->__vftable;
        v70->__vftable = 0;
        uint64_t v73 = v189;
        v189->__vftable = v72;
      }
      else
      {
        std::runtime_error::runtime_error(v189, v70);
        *(_OWORD *)(a1 + 632) = *(_OWORD *)&v69[1].~runtime_error;
        *(void *)(a1 + 616) = &unk_1EDC827D8;
        long long v74 = v69 + 2;
        unsigned __int8 v75 = v69[2].~runtime_error;
        *(void *)(a1 + 648) = v69[1].what;
        unint64_t v76 = a1 + 656;
        *(void *)(a1 + 656) = v75;
        int v77 = v69[2].~runtime_error_0;
        *(void *)(a1 + 664) = v77;
        if (v77)
        {
          *((void *)v75 + 2) = v76;
          v69[1].what = (const char *(__cdecl *)(const std::runtime_error *__hidden))v74;
          v74->~runtime_error = 0;
          v69[2].~runtime_error_0 = 0;
        }
        else
        {
          *(void *)(a1 + 648) = v76;
        }
        *(_OWORD *)(a1 + 672) = *(_OWORD *)&v69[2].what;
        v69[2].what = 0;
        v69[3].~runtime_error = 0;
        uint64_t v73 = v189;
      }
      *(unsigned char *)(a1 + 688) = v71;
      int v78 = *(std::__shared_weak_count **)(a1 + 544);
      if (v78 && !atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
      uint64_t v79 = *(std::__shared_weak_count **)(a1 + 704);
      if (v79 && !atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
        if ((*(char *)(a1 + 959) & 0x80000000) == 0)
        {
LABEL_73:
          if (*(unsigned char *)(a1 + 688)) {
            goto LABEL_74;
          }
LABEL_78:
          std::runtime_error::runtime_error(&v201, v73);
          long long v202 = *(_OWORD *)(a1 + 632);
          uint64_t v82 = *(unsigned int ***)(a1 + 648);
          v201.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
          uint64_t v83 = *(void *)(a1 + 656);
          uint64_t v84 = *(void *)(a1 + 664);
          v203 = v82;
          v204 = (unsigned int *)v83;
          uint64_t v205 = v84;
          if (v84)
          {
            *(void *)(v83 + 16) = &v204;
            *(void *)(a1 + 648) = a1 + 656;
            *(void *)(a1 + 656) = 0;
            *(void *)(a1 + 664) = 0;
          }
          else
          {
            v203 = &v204;
          }
          long long v206 = *(_OWORD *)(a1 + 672);
          *(void *)(a1 + 680) = 0;
          *(void *)(a1 + 672) = 0;
          unsigned __int8 v207 = 1;
          AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v192, (uint64_t)&v201);
          if (*(unsigned char *)(a1 + 104))
          {
            if (!*(unsigned char *)(a1 + 96)) {
              (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
            }
            *(unsigned char *)(a1 + 104) = 0;
          }
          std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v192);
          long long v136 = v193;
          uint64_t v138 = v194;
          uint64_t v137 = v195;
          *(void *)(a1 + 64) = v195;
          unint64_t v139 = a1 + 64;
          *(_OWORD *)(a1 + 40) = v136;
          *(void *)(a1 + 24) = &unk_1EDC827D8;
          uint64_t v140 = v196;
          *(void *)(a1 + 56) = v138;
          *(void *)(a1 + 72) = v140;
          if (v140)
          {
            *(void *)(v137 + 16) = v139;
            long long v194 = &v195;
            uint64_t v195 = 0;
            uint64_t v196 = 0;
            uint64_t v137 = 0;
          }
          else
          {
            *(void *)(a1 + 56) = v139;
          }
          *(_OWORD *)(a1 + 80) = v197;
          long long v197 = 0uLL;
          *(unsigned char *)(a1 + 96) = 0;
          *(unsigned char *)(a1 + 104) = 1;
          v192.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v194, (unsigned int *)v137);
          MEMORY[0x192FA3C30](&v192);
          if (v207)
          {
            v201.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
            std::string v141 = (std::__shared_weak_count *)*((void *)&v206 + 1);
            if (*((void *)&v206 + 1)
              && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v206 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
              std::__shared_weak_count::__release_weak(v141);
            }
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v203, v204);
            MEMORY[0x192FA3C30](&v201);
          }
          int v117 = 3;
          goto LABEL_179;
        }
      }
      else if ((*(char *)(a1 + 959) & 0x80000000) == 0)
      {
        goto LABEL_73;
      }
      operator delete(*p_data);
      if (!*(unsigned char *)(a1 + 688)) {
        goto LABEL_78;
      }
LABEL_74:
      uint64_t v80 = *v184;
      uint64_t v81 = v73->__vftable;
      std::__shared_weak_count *v67 = v73->__vftable;
      if (v81) {
        operator new();
      }
      uint64_t i = v183;
      *(void *)(a1 + 1000) = 0;
      *(void *)(a1 + 616) = 0;
      (*(void (**)(uint64_t, std::runtime_error_vtbl **))(*(void *)v80 + 40))(v80, v67);
      std::runtime_error v85 = *(std::runtime_error *)(a1 + 976);
      *std::error_code v183 = 0;
      v183[1] = 0;
      uint64_t v1 = v68;
      std::runtime_error *v68 = v85;
      if (atomic_load_explicit((atomic_ullong *volatile)&v85.__vftable[4], memory_order_acquire)
        || (*char v188 = 3, atomic_exchange((atomic_ullong *volatile)(*(void *)(a1 + 536) + 96), a1)))
      {
LABEL_82:
        uint64_t v86 = v1->__vftable;
        if (!LOBYTE(v1->__vftable[3].what)) {
          goto LABEL_266;
        }
        uint64_t v87 = (const std::runtime_error *)&v86->~runtime_error_0;
        char v88 = (char)v86[3].~runtime_error_0;
        if (v88)
        {
          *(void *)(a1 + 696) = v86->~runtime_error_0;
          uint64_t v89 = (const char **)(a1 + 704);
          p_what = (std::__libcpp_refstring *)&v86->what;
        }
        else
        {
          std::runtime_error::runtime_error(v187, v87);
          *(_OWORD *)(a1 + 712) = *(_OWORD *)&v86[1].~runtime_error;
          *(void *)(a1 + 696) = &unk_1EDC827D8;
          uint64_t v91 = v86 + 2;
          uint64_t v92 = v86[2].~runtime_error;
          *(void *)(a1 + 728) = v86[1].what;
          unint64_t v93 = a1 + 736;
          *(void *)(a1 + 736) = v92;
          uint64_t v94 = v86[2].~runtime_error_0;
          *(void *)(a1 + 744) = v94;
          if (v94)
          {
            *((void *)v92 + 2) = v93;
            v86[1].what = (const char *(__cdecl *)(const std::runtime_error *__hidden))v91;
            v91->~runtime_error = 0;
            v86[2].~runtime_error_0 = 0;
          }
          else
          {
            *(void *)(a1 + 728) = v93;
          }
          what = v86[2].what;
          uint64_t v95 = (const std::runtime_error *)&v86[2].what;
          *(void *)(a1 + 752) = what;
          uint64_t v89 = (const char **)(a1 + 760);
          p_what = &v95->__imp_;
          uint64_t v87 = v95;
        }
        *uint64_t v89 = p_what->__imp_;
        v87->__vftable = 0;
        v87->__imp_.__imp_ = 0;
        *(unsigned char *)(a1 + 768) = v88;
        unint64_t v97 = *(std::__shared_weak_count **)(a1 + 544);
        if (v97 && !atomic_fetch_add(&v97->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
        unint64_t v98 = *(std::__shared_weak_count **)(a1 + 984);
        if (v98 && !atomic_fetch_add(&v98->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
          uint64_t v99 = *(std::__shared_weak_count **)(a1 + 1000);
          if (!v99) {
            goto LABEL_96;
          }
        }
        else
        {
          uint64_t v99 = *(std::__shared_weak_count **)(a1 + 1000);
          if (!v99) {
            goto LABEL_96;
          }
        }
        if (!atomic_fetch_add(&v99->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
          std::__shared_weak_count::__release_weak(v99);
          if (*(unsigned char *)(a1 + 768)) {
            goto LABEL_97;
          }
          goto LABEL_107;
        }
LABEL_96:
        if (*(unsigned char *)(a1 + 768))
        {
LABEL_97:
          uint64_t v100 = *(void *)(a1 + 696);
          AMSCore::URL::URL(v3, (const AMSCore::URL *)(*(void *)(a1 + 1040) + 80));
          (*(void (**)(uint64_t, std::string *))(*(void *)v100 + 48))(v100, v3);
          long long v101 = *(_OWORD *)v185;
          *(void *)unint64_t v185 = 0;
          *(void *)(v185 + 8) = 0;
          _OWORD *i = v101;
          if (!atomic_load_explicit((atomic_ullong *volatile)(v101 + 96), memory_order_acquire))
          {
            *char v188 = 4;
            if (!atomic_exchange((atomic_ullong *volatile)(*(void *)(a1 + 976) + 96), a1)) {
              return;
            }
          }
LABEL_99:
          uint64_t v102 = *(void *)i;
          if (*(unsigned char *)(v102 + 88))
          {
            uint64_t v103 = (AMSCore::URL *)v3;
            uint64_t v104 = (const std::runtime_error *)(v102 + 8);
            char v105 = *(unsigned char *)(v102 + 80);
            if (v105)
            {
              std::runtime_error *v1 = *(std::runtime_error *)(v102 + 8);
              *(void *)(a1 + 552) = *(void *)(v102 + 24);
              *(void *)(v102 + 16) = 0;
              *(void *)(v102 + 24) = 0;
              v104->__vftable = 0;
              uint64_t v73 = v189;
            }
            else
            {
              std::runtime_error::runtime_error(v1, v104);
              *(_OWORD *)(a1 + 552) = *(_OWORD *)(v102 + 24);
              *(void *)(a1 + 536) = &unk_1EDC827D8;
              uint64_t v106 = (void *)(v102 + 48);
              uint64_t v107 = *(void *)(v102 + 48);
              *(void *)(a1 + 568) = *(void *)(v102 + 40);
              unint64_t v108 = a1 + 576;
              *(void *)(a1 + 576) = v107;
              uint64_t v109 = *(void *)(v102 + 56);
              *(void *)(a1 + 584) = v109;
              if (v109)
              {
                *(void *)(v107 + 16) = v108;
                *(void *)(v102 + 40) = v106;
                void *v106 = 0;
                *(void *)(v102 + 56) = 0;
              }
              else
              {
                *(void *)(a1 + 568) = v108;
              }
              uint64_t v73 = v189;
              *(_OWORD *)(a1 + 592) = *(_OWORD *)(v102 + 64);
              *(void *)(v102 + 64) = 0;
              *(void *)(v102 + 72) = 0;
            }
            *(unsigned char *)(a1 + 608) = v105;
            uint64_t v113 = *(std::__shared_weak_count **)(a1 + 984);
            if (v113 && !atomic_fetch_add(&v113->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
              std::__shared_weak_count::__release_weak(v113);
            }
            std::error_code v114 = *(std::__shared_weak_count **)(a1 + 1032);
            if (v114 && !atomic_fetch_add(&v114->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
              std::__shared_weak_count::__release_weak(v114);
            }
            AMSCore::URL::~URL(v103);
            if (*(unsigned char *)(a1 + 608))
            {
              uint64_t v115 = *(uint64_t **)(a1 + 536);
              std::error_code v116 = *(uint64_t **)(a1 + 544);
              if (v115 == v116)
              {
                int v117 = 0;
                goto LABEL_139;
              }
              do
              {
                std::__tree<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<std::unique_ptr<AMSCore::HTTPCookie>&&>>(v5, (const void **)(*v115 + 48), *v115 + 48, v115);
                ++v115;
              }
              while (v115 != v116);
              int v117 = 0;
            }
            else
            {
              std::runtime_error::runtime_error(&v201, v1);
              long long v202 = *(_OWORD *)(a1 + 552);
              uint64_t v118 = *(unsigned int ***)(a1 + 568);
              v201.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
              uint64_t v119 = *(void *)(a1 + 576);
              uint64_t v120 = *(void *)(a1 + 584);
              v203 = v118;
              v204 = (unsigned int *)v119;
              uint64_t v205 = v120;
              if (v120)
              {
                *(void *)(v119 + 16) = &v204;
                *(void *)(a1 + 568) = a1 + 576;
                *(void *)(a1 + 576) = 0;
                *(void *)(a1 + 584) = 0;
              }
              else
              {
                v203 = &v204;
              }
              long long v206 = *(_OWORD *)(a1 + 592);
              *(void *)(a1 + 600) = 0;
              *(void *)(a1 + 592) = 0;
              unsigned __int8 v207 = 1;
              AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v192, (uint64_t)&v201);
              if (*(unsigned char *)(a1 + 104))
              {
                if (!*(unsigned char *)(a1 + 96)) {
                  (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
                }
                *(unsigned char *)(a1 + 104) = 0;
              }
              std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v192);
              long long v121 = v193;
              uint64_t v123 = v194;
              uint64_t v122 = v195;
              *(void *)(a1 + 64) = v195;
              unint64_t v124 = a1 + 64;
              *(_OWORD *)(a1 + 40) = v121;
              *(void *)(a1 + 24) = &unk_1EDC827D8;
              uint64_t v125 = v196;
              *(void *)(a1 + 56) = v123;
              *(void *)(a1 + 72) = v125;
              if (v125)
              {
                *(void *)(v122 + 16) = v124;
                long long v194 = &v195;
                uint64_t v195 = 0;
                uint64_t v196 = 0;
                uint64_t v122 = 0;
              }
              else
              {
                *(void *)(a1 + 56) = v124;
              }
              *(_OWORD *)(a1 + 80) = v197;
              long long v197 = 0uLL;
              *(unsigned char *)(a1 + 96) = 0;
              *(unsigned char *)(a1 + 104) = 1;
              v192.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
              std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v194, (unsigned int *)v122);
              MEMORY[0x192FA3C30](&v192);
              if (v207)
              {
                v201.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
                long long v126 = (std::__shared_weak_count *)*((void *)&v206 + 1);
                if (*((void *)&v206 + 1)
                  && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v206 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                  std::__shared_weak_count::__release_weak(v126);
                }
                std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v203, v204);
                MEMORY[0x192FA3C30](&v201);
              }
              int v117 = 3;
            }
            uint64_t v115 = *(uint64_t **)(a1 + 536);
            if (!*(unsigned char *)(a1 + 608))
            {
              ((void (*)(std::runtime_error *))*v115)(v1);
              goto LABEL_146;
            }
LABEL_139:
            if (v115)
            {
              uint64_t v127 = *(uint64_t **)(a1 + 544);
              long long v128 = v115;
              if (v127 != v115)
              {
                do
                  std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v127, 0);
                while (v127 != v115);
                long long v128 = v1->__vftable;
              }
              *(void *)(a1 + 544) = v115;
              operator delete(v128);
              if (!*(unsigned char *)(a1 + 768)) {
                goto LABEL_144;
              }
              goto LABEL_147;
            }
LABEL_146:
            if (!*(unsigned char *)(a1 + 768))
            {
LABEL_144:
              ((void (*)(std::runtime_error *))v187->~runtime_error)(v187);
LABEL_179:
              uint64_t v142 = *(void *)(a1 + 616);
              if (*(unsigned char *)(a1 + 688))
              {
                v73->__vftable = 0;
                if (v142) {
                  (*(void (**)(uint64_t))(*(void *)v142 + 8))(v142);
                }
                if (!v117) {
                  goto LABEL_185;
                }
LABEL_223:
                uint64_t v159 = *(void (***)(void))(a1 + 776);
                if (*(unsigned char *)(a1 + 848))
                {
                  if (v159)
                  {
                    uint64_t v160 = *(uint64_t **)(a1 + 784);
                    long long v161 = *(std::runtime_error_vtbl **)(a1 + 776);
                    if (v160 != (uint64_t *)v159)
                    {
                      do
                        std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v160, 0);
                      while (v160 != (uint64_t *)v159);
                      long long v161 = v190->__vftable;
                    }
                    *(void *)(a1 + 784) = v159;
                    operator delete(v161);
                    if (!*(unsigned char *)(a1 + 528)) {
                      goto LABEL_229;
                    }
                    goto LABEL_237;
                  }
                }
                else
                {
                  (*v159)();
                }
                if (!*(unsigned char *)(a1 + 528))
                {
LABEL_229:
                  ((void (*)(std::runtime_error *))v191->~runtime_error)(v191);
LABEL_240:
                  unint64_t v164 = *(std::__shared_weak_count **)(a1 + 1016);
                  if (v164)
                  {
                    if (!atomic_fetch_add(&v164->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                      std::__shared_weak_count::__release_weak(v164);
                    }
                  }
                  std::__tree<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>>>::destroy(*(char **)(a1 + 896));
                  *(void *)(a1 + 456) = v186;
                  *(void *)a1 = 0;
                  *char v188 = 5;
                  AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v191);
                  return;
                }
LABEL_237:
                uint64_t v163 = *(std::__shared_weak_count **)(a1 + 464);
                if (v163 && !atomic_fetch_add(&v163->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                  std::__shared_weak_count::__release_weak(v163);
                }
                goto LABEL_240;
              }
              (*(void (**)(const std::runtime_error *))v142)(v73);
              if (v117) {
                goto LABEL_223;
              }
LABEL_185:
              uint64_t v198 = 0;
              std::error_code v199 = 0;
              unint64_t v200 = 0;
              if (!*(void *)(a1 + 904) || (long long v143 = *(void **)(a1 + 888), v143 == (void *)(a1 + 896)))
              {
                char v144 = 0;
              }
              else
              {
                char v144 = 0;
                do
                {
                  std::runtime_error v145 = v143 + 7;
                  if ((unint64_t)v144 >= v200)
                  {
                    char v144 = std::vector<std::unique_ptr<AMSCore::HTTPCookie>>::__emplace_back_slow_path<std::unique_ptr<AMSCore::HTTPCookie>>(&v198, v145);
                  }
                  else
                  {
                    uint64_t v146 = *v145;
                    *std::runtime_error v145 = 0;
                    *v144++ = v146;
                  }
                  std::error_code v199 = v144;
                  std::string v147 = (void *)v143[1];
                  if (v147)
                  {
                    do
                    {
                      uint64_t v148 = v147;
                      std::string v147 = (void *)*v147;
                    }
                    while (v147);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v148 = (void *)v143[2];
                      BOOL v149 = *v148 == (void)v143;
                      long long v143 = v148;
                    }
                    while (!v149);
                  }
                  long long v143 = v148;
                }
                while (v148 != (void *)(a1 + 896));
              }
              v150.n128_f64[0] = AMSCore::CookieUtils::getRequestHeaderFields((uint64_t)&v192, (uint64_t *)&v198);
              long long v151 = (uint64_t *)v193;
              if ((void)v193)
              {
                unint64_t v152 = (void *)(*(void *)(a1 + 1040) + 240);
                do
                {
                  while (1)
                  {
                    if (*((char *)v151 + 39) < 0)
                    {
                      std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)v151[2], v151[3]);
                    }
                    else
                    {
                      long long v153 = *((_OWORD *)v151 + 1);
                      v6->__r_.__value_.__r.__words[2] = v151[4];
                      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v153;
                    }
                    long long v154 = *(_OWORD *)(v151 + 5);
                    *(void *)(v4 + 16) = v151[7];
                    *(_OWORD *)uint64_t v4 = v154;
                    v151[6] = 0;
                    v151[7] = 0;
                    v151[5] = 0;
                    *(unsigned char *)(a1 + 880) = 1;
                    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_multi<std::string>(v152, (uint64_t)v6);
                    if (*(unsigned char *)(a1 + 880))
                    {
                      std::unordered_multimap<std::string,std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::pair<std::string const,std::string>>>::emplace[abi:fe180100]<std::string,std::string>(v152, (uint64_t)v6, v4);
                      if (*(unsigned char *)(a1 + 880))
                      {
                        if (*(char *)(a1 + 879) < 0) {
                          operator delete(*(void **)v4);
                        }
                      }
                    }
                    if (*(char *)(a1 + 935) < 0) {
                      break;
                    }
                    long long v151 = (uint64_t *)*v151;
                    if (!v151) {
                      goto LABEL_211;
                    }
                  }
                  operator delete(v6->__r_.__value_.__l.__data_);
                  long long v151 = (uint64_t *)*v151;
                }
                while (v151);
              }
LABEL_211:
              unsigned __int8 v207 = 1;
              if (*(unsigned char *)(a1 + 104) && !*(unsigned char *)(a1 + 96))
              {
                (**(void (***)(uint64_t, __n128))(a1 + 24))(a1 + 24, v150);
                int v155 = v207;
                *(unsigned char *)(a1 + 104) = 0;
                if (!v155)
                {
                  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v201);
                  long long v165 = v202;
                  std::system_error v167 = v203;
                  uint64_t v166 = v204;
                  *(void *)(a1 + 64) = v204;
                  unint64_t v168 = a1 + 64;
                  *(_OWORD *)(a1 + 40) = v165;
                  *(void *)(a1 + 24) = &unk_1EDC827D8;
                  uint64_t v169 = v205;
                  *(void *)(a1 + 56) = v167;
                  *(void *)(a1 + 72) = v169;
                  if (v169)
                  {
                    *((void *)v166 + 2) = v168;
                    v203 = &v204;
                    v204 = 0;
                    uint64_t v205 = 0;
                  }
                  else
                  {
                    *(void *)(a1 + 56) = v168;
                  }
                  *(_OWORD *)(a1 + 80) = v206;
                  long long v206 = 0uLL;
                  int v176 = v207;
                  *(unsigned char *)(a1 + 96) = 0;
                  *(unsigned char *)(a1 + 104) = 1;
                  if (!v176) {
                    ((void (*)(std::runtime_error *))v201.~runtime_error)(&v201);
                  }
LABEL_215:
                  long long v156 = (void **)v193;
                  if (!(void)v193)
                  {
LABEL_216:
                    std::system_error v157 = v192.__vftable;
                    v192.__vftable = 0;
                    if (v157) {
                      operator delete(v157);
                    }
                    uint64_t v158 = v198;
                    if (v198)
                    {
                      if (v144 != v198)
                      {
                        do
                          std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v144, 0);
                        while (v144 != v158);
                        char v144 = v198;
                      }
                      std::error_code v199 = v158;
                      operator delete(v144);
                    }
                    goto LABEL_223;
                  }
                  while (1)
                  {
                    char v162 = (void **)*v156;
                    if (*((char *)v156 + 63) < 0)
                    {
                      operator delete(v156[5]);
                      if (*((char *)v156 + 39) < 0) {
                        goto LABEL_234;
                      }
                    }
                    else if (*((char *)v156 + 39) < 0)
                    {
LABEL_234:
                      operator delete(v156[2]);
                    }
                    operator delete(v156);
                    long long v156 = v162;
                    if (!v162) {
                      goto LABEL_216;
                    }
                  }
                }
              }
              else
              {
                LOBYTE(v155) = 1;
              }
              *(unsigned char *)(a1 + 96) = v155;
              *(unsigned char *)(a1 + 104) = 1;
              goto LABEL_215;
            }
LABEL_147:
            uint64_t v129 = *(std::__shared_weak_count **)(a1 + 704);
            if (v129 && !atomic_fetch_add(&v129->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
              std::__shared_weak_count::__release_weak(v129);
            }
            goto LABEL_179;
          }
LABEL_266:
          __break(1u);
          return;
        }
LABEL_107:
        std::runtime_error::runtime_error(&v201, v187);
        long long v202 = *(_OWORD *)(a1 + 712);
        int v110 = *(unsigned int ***)(a1 + 728);
        v201.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        uint64_t v111 = *(void *)(a1 + 736);
        uint64_t v112 = *(void *)(a1 + 744);
        v203 = v110;
        v204 = (unsigned int *)v111;
        uint64_t v205 = v112;
        if (v112)
        {
          *(void *)(v111 + 16) = &v204;
          *(void *)(a1 + 728) = a1 + 736;
          *(void *)(a1 + 736) = 0;
          *(void *)(a1 + 744) = 0;
        }
        else
        {
          v203 = &v204;
        }
        uint64_t v73 = v189;
        long long v206 = *(_OWORD *)(a1 + 752);
        *(void *)(a1 + 760) = 0;
        *(void *)(a1 + 752) = 0;
        unsigned __int8 v207 = 1;
        AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v192, (uint64_t)&v201);
        if (*(unsigned char *)(a1 + 104))
        {
          if (!*(unsigned char *)(a1 + 96)) {
            (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
          }
          *(unsigned char *)(a1 + 104) = 0;
        }
        std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v192);
        long long v130 = v193;
        long long v132 = v194;
        uint64_t v131 = v195;
        *(void *)(a1 + 64) = v195;
        unint64_t v133 = a1 + 64;
        *(_OWORD *)(a1 + 40) = v130;
        *(void *)(a1 + 24) = &unk_1EDC827D8;
        uint64_t v134 = v196;
        *(void *)(a1 + 56) = v132;
        *(void *)(a1 + 72) = v134;
        if (v134)
        {
          *(void *)(v131 + 16) = v133;
          long long v194 = &v195;
          uint64_t v195 = 0;
          uint64_t v196 = 0;
          uint64_t v131 = 0;
        }
        else
        {
          *(void *)(a1 + 56) = v133;
        }
        *(_OWORD *)(a1 + 80) = v197;
        long long v197 = 0uLL;
        *(unsigned char *)(a1 + 96) = 0;
        *(unsigned char *)(a1 + 104) = 1;
        v192.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v194, (unsigned int *)v131);
        MEMORY[0x192FA3C30](&v192);
        if (v207)
        {
          v201.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
          uint64_t v135 = (std::__shared_weak_count *)*((void *)&v206 + 1);
          if (*((void *)&v206 + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v206 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
            std::__shared_weak_count::__release_weak(v135);
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v203, v204);
          MEMORY[0x192FA3C30](&v201);
        }
        int v117 = 3;
        if (!*(unsigned char *)(a1 + 768)) {
          goto LABEL_144;
        }
        goto LABEL_147;
      }
      return;
  }
}

void sub_18DB71BBC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  std::expected<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::~expected[abi:fe180100](a20);
  std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](a21);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a14);
  std::__tree<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>>>::destroy(*(char **)(v21 + 896));
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DB71C58()
{
}

void sub_18DB71C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned char *a18)
{
  *int v18 = 0;
  *a18 = 5;
  _Unwind_Resume(a1);
}

void AMSCore::EncodeHTTPRequestTask::anonymous namespace'::setCookies(char *__p)
{
  uint64_t v1 = (AMSCore::URL *)(__p + 152);
  int v2 = (AMSCore::URL *)(__p + 304);
  uint64_t v3 = (void (***)(void))(__p + 456);
  uint64_t v4 = __p + 616;
  char v5 = (void (***)(void))(__p + 696);
  std::runtime_error v6 = (void **)(__p + 776);
  switch(__p[1127])
  {
    case 1:
      uint64_t v12 = *((void *)__p + 139);
      if (v12 && !atomic_fetch_add((atomic_ullong *volatile)(v12 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v13 = (std::__shared_weak_count *)*((void *)__p + 139);
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      uint64_t v14 = (std::__shared_weak_count *)*((void *)__p + 68);
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      AMSCore::URL::~URL(v1);
      if (__p[528]) {
        goto LABEL_56;
      }
      goto LABEL_60;
    case 2:
      uint64_t v15 = (std::__shared_weak_count *)*((void *)__p + 68);
      if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
      uint64_t v16 = (std::__shared_weak_count *)*((void *)__p + 88);
      if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      if (__p[959] < 0) {
        operator delete(*((void **)__p + 117));
      }
      goto LABEL_49;
    case 3:
      char v17 = (std::__shared_weak_count *)*((void *)__p + 68);
      if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      int v18 = (std::__shared_weak_count *)*((void *)__p + 123);
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      uint64_t v19 = (std::__shared_weak_count *)*((void *)__p + 125);
      if (!v19) {
        goto LABEL_45;
      }
      goto LABEL_42;
    case 4:
      std::string v20 = (std::__shared_weak_count *)*((void *)__p + 123);
      if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      uint64_t v21 = (std::__shared_weak_count *)*((void *)__p + 129);
      if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
      AMSCore::URL::~URL(v2);
      if (__p[768])
      {
        uint64_t v19 = (std::__shared_weak_count *)*((void *)__p + 88);
        if (v19)
        {
LABEL_42:
          if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      else
      {
        (**v5)(v5);
      }
LABEL_45:
      uint64_t v22 = *((void *)__p + 77);
      if (__p[688])
      {
        void *v4 = 0;
        if (v22) {
          (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
        }
      }
      else
      {
        (*(void (**)(void *))v22)(v4);
      }
LABEL_49:
      uint64_t v23 = (uint64_t *)*((void *)__p + 97);
      if (!__p[848])
      {
        ((void (*)(void **))*v23)(v6);
        if (__p[528]) {
          goto LABEL_56;
        }
LABEL_60:
        (**v3)(v3);
        goto LABEL_61;
      }
      if (v23)
      {
        uint64_t v24 = (uint64_t *)*((void *)__p + 98);
        uint64_t v25 = (void *)*((void *)__p + 97);
        if (v24 != v23)
        {
          do
            std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v24, 0);
          while (v24 != v23);
          uint64_t v25 = *v6;
        }
        *((void *)__p + 98) = v23;
        operator delete(v25);
      }
      if (!__p[528]) {
        goto LABEL_60;
      }
LABEL_56:
      uint64_t v11 = (std::__shared_weak_count *)*((void *)__p + 58);
      if (v11)
      {
LABEL_57:
        if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
LABEL_61:
      uint64_t v26 = (std::__shared_weak_count *)*((void *)__p + 127);
      if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
      std::__tree<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>>>::destroy(*((char **)__p + 112));
LABEL_65:
      long long v27 = (char *)*((void *)__p + 18);
      if (v27 == __p + 120)
      {
        (*(void (**)(char *))(*((void *)__p + 15) + 32))(__p + 120);
      }
      else if (v27)
      {
        (*(void (**)(char *))(*(void *)v27 + 40))(v27);
      }
      if (__p[104]) {
        BOOL v28 = __p[96] == 0;
      }
      else {
        BOOL v28 = 0;
      }
      if (v28) {
        (**((void (***)(void))__p + 3))();
      }
      int v29 = __p[1128];
      if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
        MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
      }
      if (v29 < 0) {
        operator delete(*((void **)__p + 134));
      }
      uint64_t v30 = (std::__shared_weak_count *)*((void *)__p + 133);
      if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
      uint64_t v31 = (std::__shared_weak_count *)*((void *)__p + 131);
      if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
      operator delete(__p);
      return;
    case 5:
      goto LABEL_65;
    default:
      uint64_t v8 = *((void *)__p + 137);
      if (v8 && !atomic_fetch_add((atomic_ullong *volatile)(v8 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v9 = (std::__shared_weak_count *)*((void *)__p + 137);
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      char v10 = (std::__shared_weak_count *)*((void *)__p + 68);
      if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
      uint64_t v11 = (std::__shared_weak_count *)*((void *)__p + 121);
      if (!v11) {
        goto LABEL_61;
      }
      goto LABEL_57;
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<std::unique_ptr<AMSCore::HTTPCookie>&&>>(uint64_t **a1, const void **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = a1 + 1;
  uint64_t v7 = a1[1];
  if (!v7)
  {
    uint64_t v12 = a1 + 1;
    goto LABEL_29;
  }
  int v9 = *((char *)a2 + 23);
  if (v9 >= 0) {
    char v10 = a2;
  }
  else {
    char v10 = *a2;
  }
  if (v9 >= 0) {
    uint64_t v11 = (const void *)*((unsigned __int8 *)a2 + 23);
  }
  else {
    uint64_t v11 = a2[1];
  }
  do
  {
    while (1)
    {
      uint64_t v12 = (uint64_t **)v7;
      uint64_t v15 = v7[4];
      uint64_t v13 = v7 + 4;
      uint64_t v14 = (void *)v15;
      int v16 = *((char *)v13 + 23);
      char v17 = v16 >= 0 ? v13 : v14;
      int v18 = v16 >= 0 ? (const void *)*((unsigned __int8 *)v13 + 23) : (const void *)v13[1];
      size_t v19 = (size_t)(v18 >= v11 ? v11 : v18);
      int v20 = memcmp(v10, v17, v19);
      if (v20) {
        break;
      }
      if (v11 >= v18) {
        goto LABEL_22;
      }
LABEL_8:
      uint64_t v7 = *v12;
      uint64_t v8 = v12;
      if (!*v12) {
        goto LABEL_29;
      }
    }
    if (v20 < 0) {
      goto LABEL_8;
    }
LABEL_22:
    __n128 result = (uint64_t *)memcmp(v17, v10, v19);
    if (result)
    {
      if ((result & 0x80000000) == 0) {
        return result;
      }
    }
    else if (v18 >= v11)
    {
      return result;
    }
    uint64_t v7 = v12[1];
  }
  while (v7);
  uint64_t v8 = v12 + 1;
LABEL_29:
  uint64_t v22 = (uint64_t *)operator new(0x40uLL);
  uint64_t v23 = (std::string *)(v22 + 4);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v22[6] = *(void *)(a3 + 16);
  }
  uint64_t v24 = *a4;
  *a4 = 0;
  v22[7] = v24;
  uint64_t *v22 = 0;
  v22[1] = 0;
  void v22[2] = (uint64_t)v12;
  std::__shared_weak_count *v8 = v22;
  uint64_t v25 = (uint64_t *)**a1;
  if (v25)
  {
    *a1 = v25;
    uint64_t v22 = *v8;
  }
  __n128 result = std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], v22);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void sub_18DB7254C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::EncodeHTTPRequestTask::anonymous namespace'::setAnisetteHeaders(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 352);
  if (!*(unsigned char *)(v1 + 88))
  {
    __break(1u);
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = (uint64_t *)(result + 264);
  uint64_t v4 = (std::runtime_error *)(result + 64);
  char v5 = (std::string *)(result + 144);
  uint64_t v6 = result + 216;
  uint64_t v32 = (void *)(result + 240);
  std::runtime_error v33 = (void *)(result + 280);
  uint64_t v7 = result + 368;
  uint64_t v31 = result + 104;
  uint64_t v29 = result + 16;
  uint64_t v30 = (_OWORD *)(result + 80);
  char v8 = *(unsigned char *)(v1 + 80);
  if (!v8)
  {
    std::runtime_error::runtime_error(v4, (const std::runtime_error *)(v1 + 8));
    *uint64_t v30 = *(_OWORD *)(v1 + 24);
    int v9 = (void *)(v1 + 48);
    uint64_t v10 = *(void *)(v1 + 48);
    *(void *)(v2 + 64) = &unk_1EDC827D8;
    *(void *)(v2 + 96) = *(void *)(v1 + 40);
    *(void *)(v2 + 104) = v10;
    uint64_t v11 = *(void *)(v1 + 56);
    *(void *)(v2 + 112) = v11;
    if (v11)
    {
      *(void *)(v10 + 16) = v31;
      *(void *)(v1 + 40) = v9;
      void *v9 = 0;
      *(void *)(v1 + 56) = 0;
    }
    else
    {
      *(void *)(v2 + 96) = v31;
    }
    uint64_t v12 = *(void *)(v2 + 352);
    *(_OWORD *)(v2 + 120) = *(_OWORD *)(v12 + 64);
    *(void *)(v12 + 64) = 0;
    *(void *)(v12 + 72) = 0;
  }
  *(unsigned char *)(v2 + 136) = v8;
  uint64_t v13 = *(void *)(v2 + 360);
  if (v13 && !atomic_fetch_add((atomic_ullong *volatile)(v13 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v15 = *(std::__shared_weak_count **)(v2 + 360);
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    uint64_t v14 = *(std::__shared_weak_count **)(v2 + 272);
    if (!v14) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v14 = *(std::__shared_weak_count **)(v2 + 272);
    if (!v14) {
      goto LABEL_15;
    }
  }
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_15:
  if (*(unsigned char *)(v2 + 232)
    && (int v16 = *(std::__shared_weak_count **)(v2 + 224)) != 0
    && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (!*(unsigned char *)(v2 + 208)) {
      goto LABEL_24;
    }
  }
  else if (!*(unsigned char *)(v2 + 208))
  {
    goto LABEL_24;
  }
  if (*(char *)(v2 + 207) < 0) {
    operator delete(*(void **)(v2 + 184));
  }
  if (*(unsigned char *)(v2 + 168) && *(char *)(v2 + 167) < 0) {
    operator delete(v5->__r_.__value_.__l.__data_);
  }
LABEL_24:
  char v17 = *(std::__shared_weak_count **)(v2 + 288);
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if (*(unsigned char *)(v2 + 136)) {
      goto LABEL_36;
    }
  }
  else if (*(unsigned char *)(v2 + 136))
  {
    goto LABEL_36;
  }
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v3);
  AMSCore::Logger::log<char [41],AMSCore::Error>(*v3, 3u, (uint64_t)"networking", 10, "Failed to set Anisette headers. error = ", (uint64_t)v4);
  int v18 = *(std::__shared_weak_count **)(v2 + 272);
  if (!v18 || atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (*(unsigned char *)(v2 + 136)) {
      goto LABEL_36;
    }
    goto LABEL_30;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!*(unsigned char *)(v2 + 136)) {
LABEL_30:
  }
    ((void (*)(std::runtime_error *))v4->~runtime_error)(v4);
LABEL_36:
  if (*(unsigned char *)(v2 + 256))
  {
    size_t v19 = *(std::__shared_weak_count **)(v2 + 248);
    if (v19)
    {
      if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  uint64_t v20 = *(void *)(v2 + 344);
  uint64_t v21 = v20 + 1;
  if (v20 != 1)
  {
    *(void *)(v2 + 344) = v21;
    uint64_t v22 = *(void *)(v2 + 328);
    int v23 = *(unsigned __int8 *)(v7 + v21);
    *(unsigned char *)(v2 + 240) = 0;
    *(unsigned char *)(v2 + 256) = 0;
    int v24 = *(unsigned __int8 *)(v22 + 18);
    if (v24 != v23)
    {
      uint64_t v26 = *(void *)(v22 + 24);
      uint64_t v25 = *(void *)(v22 + 32);
      *(void *)(v2 + 240) = v26;
      *(void *)(v2 + 248) = v25;
      if (v25) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
      }
      *(unsigned char *)(v2 + 256) = 1;
    }
    uint64_t v27 = *(void *)(v2 + 304);
    *(void *)(v2 + 280) = *(void *)(v2 + 296);
    *(void *)(v2 + 288) = v27;
    if (v27) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
    }
    BOOL v28 = (long long *)(*(uint64_t (**)(void))(**(void **)(v2 + 312) + 72))(*(void *)(v2 + 312));
    std::__optional_destruct_base<AMSCore::AccountIdentity,false>::__optional_destruct_base[abi:fe180100]<AMSCore::AccountIdentity const&>(v5, v28);
    *(unsigned char *)(v2 + 216) = 0;
    *(unsigned char *)(v2 + 232) = 0;
    if (v24 != v23)
    {
      *(_OWORD *)(v2 + 216) = *(_OWORD *)(v2 + 240);
      *uint64_t v32 = 0;
      v32[1] = 0;
      *(unsigned char *)(v2 + 232) = 1;
    }
    AMSCore::AnisetteUtils::addHeaders((uint64_t)v3, v33, (uint64_t)v5, v23, v6);
  }
  *(unsigned char *)(v2 + 18) = 1;
  *(void *)(v2 + 64) = v29;
  *(void *)uint64_t v2 = 0;
  return AMSCore::Task<void,void>::Promise::Awaiter::await_suspend((uint64_t)v4);
}

void sub_18DB72A54(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v15);
  if (!*(unsigned char *)(v14 + 136)) {
    (**v13)(v13);
  }
  std::optional<AMSCore::DialogResult>::~optional(a13);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::EncodeHTTPRequestTask::anonymous namespace'::setAnisetteHeaders(char *__p)
{
  if (*(void *)__p)
  {
    uint64_t v2 = *((void *)__p + 45);
    if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 45);
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 34);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    if (__p[232])
    {
      char v5 = (std::__shared_weak_count *)*((void *)__p + 28);
      if (v5)
      {
        if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    if (__p[208])
    {
      if (__p[207] < 0) {
        operator delete(*((void **)__p + 23));
      }
      if (__p[168] && __p[167] < 0) {
        operator delete(*((void **)__p + 18));
      }
    }
    uint64_t v6 = (std::__shared_weak_count *)*((void *)__p + 36);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (__p[256])
    {
      uint64_t v7 = (std::__shared_weak_count *)*((void *)__p + 31);
      if (v7)
      {
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
  }
  char v8 = (char *)*((void *)__p + 7);
  if (v8 == __p + 32)
  {
    (*(void (**)(char *))(*((void *)__p + 4) + 32))(__p + 32);
  }
  else if (v8)
  {
    (*(void (**)(char *))(*(void *)v8 + 40))(v8);
  }
  uint64_t v9 = *((void *)__p + 42);
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v9 && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)__p + 42) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v10 = (std::__shared_weak_count *)*((void *)__p + 42);
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = *((void *)__p + 40);
  if (v11 && !atomic_fetch_add((atomic_ullong *volatile)(v11 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v12 = (std::__shared_weak_count *)*((void *)__p + 40);
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v13 = *((void *)__p + 38);
  if (v13 && !atomic_fetch_add((atomic_ullong *volatile)(v13 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v14 = (std::__shared_weak_count *)*((void *)__p + 38);
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  operator delete(__p);
}

void std::__shared_ptr_emplace<AMSCore::HTTPRequestBuilder>::__on_zero_shared(uint64_t a1)
{
  AMSCore::HTTPRequest::~HTTPRequest((void **)(a1 + 104));
  if (*(unsigned char *)(a1 + 96))
  {
    *(void *)(a1 + 24) = &unk_1EDC827D8;
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 88);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 56, *(unsigned int **)(a1 + 64));
    JUMPOUT(0x192FA3C30);
  }
}

void std::__shared_ptr_emplace<AMSCore::HTTPRequestBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83DA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::HTTPRequestBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83DA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) < __n)
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_26;
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    std::vector<std::csub_match>::size_type v9 = 2 * v8;
    if (2 * v8 <= __n) {
      std::vector<std::csub_match>::size_type v9 = __n;
    }
    unint64_t v10 = v8 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
LABEL_26:
    }
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    uint64_t v11 = v10;
    uint64_t v12 = (std::sub_match<const char *> *)operator new(24 * v10);
    this->__begin_ = v12;
    this->__end_ = v12;
    this->__end_cap_.__value_ = &v12[v11];
    std::vector<std::csub_match>::size_type v13 = 24 * __n;
    uint64_t v14 = &v12[__n];
    do
    {
      v12->std::pair<const char *, const char *> = __u->std::pair<const char *, const char *>;
      *(void *)&v12->matched = *(void *)&__u->matched;
      ++v12;
      v13 -= 24;
    }
    while (v13);
    goto LABEL_25;
  }
  std::vector<std::csub_match>::pointer end = this->__end_;
  unint64_t v16 = end - begin;
  if (v16 >= __n) {
    std::vector<std::csub_match>::size_type v17 = __n;
  }
  else {
    std::vector<std::csub_match>::size_type v17 = end - begin;
  }
  if (v17)
  {
    int v18 = begin;
    do
    {
      *v18++ = *__u;
      --v17;
    }
    while (v17);
  }
  if (__n <= v16)
  {
    uint64_t v14 = &begin[__n];
LABEL_25:
    this->__end_ = v14;
    return;
  }
  size_t v19 = &end[__n - v16];
  std::vector<std::csub_match>::size_type v20 = 24 * __n - 24 * v16;
  do
  {
    std::pair<const char *, const char *> v21 = __u->std::pair<const char *, const char *>;
    *(void *)&end->matched = *(void *)&__u->matched;
    end->std::pair<const char *, const char *> = v21;
    ++end;
    v20 -= 24;
  }
  while (v20);
  this->__end_ = v19;
}

void std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  long long v49 = 0;
  uint64_t v50 = 0;
  unint64_t v51 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)uint64_t v45 = 0;
    memset(&v45[8], 0, 48);
    *(_OWORD *)std::runtime_error __p = 0u;
    memset(v47, 0, 21);
    std::vector<std::csub_match>::size_type v13 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v49, (uint64_t)v45);
    uint64_t v50 = v13;
    if (__p[0]) {
      operator delete(__p[0]);
    }
    if (*(void *)&v45[32]) {
      operator delete(*(void **)&v45[32]);
    }
    uint64_t v14 = v49;
    if (v49 != v13)
    {
      uint64_t v15 = *((void *)v13 - 8);
      *((_DWORD *)v13 - 24) = 0;
      *((void *)v13 - 11) = a2;
      *((void *)v13 - 10) = a2;
      *((void *)v13 - 9) = a3;
      unint64_t v16 = *(unsigned int *)(a1 + 28);
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v13 - 7) - v15) >> 3);
      if (v16 <= v17)
      {
        if (v16 < v17) {
          *((void *)v13 - 7) = v15 + 24 * v16;
        }
      }
      else
      {
        std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v13 - 64), v16 - v17, &__x);
      }
      uint64_t v18 = *((void *)v13 - 5);
      unint64_t v19 = *(unsigned int *)(a1 + 32);
      unint64_t v20 = (*((void *)v13 - 4) - v18) >> 4;
      if (v19 <= v20)
      {
        if (v19 < v20) {
          *((void *)v13 - 4) = v18 + 16 * v19;
        }
      }
      else
      {
        std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v13 - 40), v19 - v20);
      }
      *((void *)v13 - 2) = v6;
      signed int v21 = a3 - a2;
      *((_DWORD *)v13 - 2) = a5;
      *(v13 - 4) = a6;
      unsigned int v22 = 1;
      while (2)
      {
        if ((v22 & 0xFFF) == 0 && (int)(v22 >> 12) >= v21) {
          std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)12>();
        }
        if (v14 != v13)
        {
          uint64_t v23 = *((void *)v13 - 2);
          if (v23) {
            (*(void (**)(uint64_t, char *))(*(void *)v23 + 16))(v23, v13 - 96);
          }
          switch(*((_DWORD *)v13 - 24))
          {
            case 0xFFFFFC18:
              uint64_t v24 = *((void *)v13 - 10);
              if ((a5 & 0x20) != 0 && v24 == a2) {
                goto LABEL_27;
              }
              uint64_t v34 = *a4;
              uint64_t v35 = a4[1] - *a4;
              if (!v35) {
                goto LABEL_57;
              }
              *(void *)uint64_t v34 = a2;
              *(void *)(v34 + 8) = v24;
              *(unsigned char *)(v34 + 16) = 1;
              uint64_t v36 = *((void *)v13 - 8);
              uint64_t v37 = *((void *)v13 - 7) - v36;
              if (!v37) {
                goto LABEL_53;
              }
              unint64_t v38 = 0;
              unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * (v35 >> 3);
              unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * (v37 >> 3);
              unsigned int v41 = 1;
              break;
            case 0xFFFFFC1D:
            case 0xFFFFFC1E:
            case 0xFFFFFC21:
              goto LABEL_18;
            case 0xFFFFFC1F:
LABEL_27:
              uint64_t v25 = v50;
              if (v49 == v50) {
                goto LABEL_57;
              }
              uint64_t v26 = (void *)*((void *)v50 - 5);
              if (v26)
              {
                *((void *)v50 - 4) = v26;
                operator delete(v26);
              }
              uint64_t v27 = (void *)*((void *)v25 - 8);
              if (v27)
              {
                *((void *)v25 - 7) = v27;
                operator delete(v27);
              }
              uint64_t v50 = v25 - 96;
LABEL_18:
              uint64_t v14 = v49;
              std::vector<std::csub_match>::size_type v13 = v50;
              ++v22;
              if (v49 != v50) {
                continue;
              }
              if (v49) {
                goto LABEL_39;
              }
              return;
            case 0xFFFFFC20:
              std::__state<char>::__state((uint64_t)v45, (long long *)v13 - 6);
              (*(void (**)(void, uint64_t, char *))(**((void **)v13 - 2) + 24))(*((void *)v13 - 2), 1, v13 - 96);
              (*(void (**)(void, void, unsigned char *))(*(void *)v47[1] + 24))(v47[1], 0, v45);
              BOOL v28 = v50;
              if ((unint64_t)v50 >= v51)
              {
                uint64_t v50 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v49, (uint64_t)v45);
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
              }
              else
              {
                long long v29 = *(_OWORD *)&v45[16];
                *(_OWORD *)uint64_t v50 = *(_OWORD *)v45;
                *((_OWORD *)v28 + 1) = v29;
                *((void *)v28 + 4) = 0;
                *((void *)v28 + 5) = 0;
                *((void *)v28 + 6) = 0;
                *((void *)v28 + 7) = 0;
                *((_OWORD *)v28 + 2) = *(_OWORD *)&v45[32];
                *((void *)v28 + 6) = *(void *)&v45[48];
                memset(&v45[32], 0, 24);
                *((void *)v28 + 8) = 0;
                *((void *)v28 + 9) = 0;
                *(_OWORD *)(v28 + 56) = *(_OWORD *)__p;
                *((void *)v28 + 9) = v47[0];
                __p[0] = 0;
                __p[1] = 0;
                v47[0] = 0;
                uint64_t v30 = v47[1];
                *(void *)(v28 + 85) = *(void *)((char *)&v47[1] + 5);
                *((void *)v28 + 10) = v30;
                uint64_t v50 = v28 + 96;
              }
              if (*(void *)&v45[32])
              {
                *(void *)&v45[40] = *(void *)&v45[32];
                operator delete(*(void **)&v45[32]);
              }
              goto LABEL_18;
            default:
              std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)16>();
          }
          while (1)
          {
            unint64_t v42 = v41;
            if (v39 <= v41) {
              break;
            }
            uint64_t v43 = v36 + 24 * v38;
            uint64_t v44 = v34 + 24 * v41;
            *(_OWORD *)uint64_t v44 = *(_OWORD *)v43;
            *(unsigned char *)(v44 + 16) = *(unsigned char *)(v43 + 16);
            unsigned int v41 = v42 + 1;
            unint64_t v38 = v42;
            if (v40 <= v42)
            {
LABEL_53:
              uint64_t v14 = v49;
              if (v49)
              {
LABEL_39:
                for (uint64_t i = v50; i != v14; i -= 96)
                {
                  uint64_t v32 = (void *)*((void *)i - 5);
                  if (v32)
                  {
                    *((void *)i - 4) = v32;
                    operator delete(v32);
                  }
                  std::runtime_error v33 = (void *)*((void *)i - 8);
                  if (v33)
                  {
                    *((void *)i - 7) = v33;
                    operator delete(v33);
                  }
                }
                operator delete(v14);
              }
              return;
            }
          }
        }
        break;
      }
    }
LABEL_57:
    __break(1u);
  }
}

void sub_18DB73534(_Unwind_Exception *a1)
{
  std::vector<std::__state<char>>::~vector[abi:fe180100]((void **)(v1 - 104));
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  long long v122 = 0u;
  int64x2_t v123 = 0u;
  long long v121 = 0u;
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6)
  {
LABEL_112:
    uint64_t v106 = (void **)*((void *)&v121 + 1);
    uint64_t v107 = (void **)v122;
    if ((void)v122 - *((void *)&v121 + 1) >= 0x11uLL)
    {
      do
      {
        operator delete(*v106);
        uint64_t v107 = (void **)v122;
        uint64_t v106 = (void **)(*((void *)&v121 + 1) + 8);
        *((void *)&v121 + 1) = v106;
      }
      while ((void)v122 - (void)v106 > 0x10uLL);
    }
    while (v106 != v107)
    {
      unint64_t v108 = *v106++;
      operator delete(v108);
    }
    if ((void)v121) {
      operator delete((void *)v121);
    }
    return;
  }
  *(_DWORD *)uint64_t v118 = 0;
  memset(&v118[8], 0, 48);
  *(_OWORD *)std::runtime_error __p = 0uLL;
  memset(v120, 0, 21);
  std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v121);
  unint64_t v11 = *(void *)(*((void *)&v121 + 1) + 8 * ((v123.i64[1] + v123.i64[0]) / 0x2AuLL))
      + 96 * ((v123.i64[1] + v123.i64[0]) % 0x2AuLL);
  long long v12 = *(_OWORD *)&v118[16];
  *(_OWORD *)unint64_t v11 = *(_OWORD *)v118;
  *(_OWORD *)(v11 + 16) = v12;
  *(void *)(v11 + 40) = 0;
  *(void *)(v11 + 48) = 0;
  *(void *)(v11 + 32) = 0;
  memset(&v118[32], 0, 24);
  *(void *)(v11 + 56) = 0;
  *(void *)(v11 + 64) = 0;
  *(void *)(v11 + 72) = 0;
  __p[0] = 0;
  __p[1] = 0;
  v120[0] = 0;
  uint64_t v13 = v120[1];
  *(void *)(v11 + 85) = *(void *)((char *)&v120[1] + 5);
  *(void *)(v11 + 80) = v13;
  uint64_t v15 = v123.i64[1];
  uint64_t v14 = v123.i64[0];
  uint64_t v16 = ++v123.i64[1];
  uint64_t v17 = *((void *)&v121 + 1);
  unint64_t v18 = *(unsigned int *)(a1 + 32);
  unint64_t v19 = v15 + v123.i64[0];
  unint64_t v20 = 8 * (v19 / 0x2A);
  unint64_t v21 = 96 * (v19 % 0x2A);
  unint64_t v22 = *(void *)(*((void *)&v121 + 1) + v20) + v21;
  *(_DWORD *)unint64_t v22 = 0;
  *(void *)(v22 + 8) = a2;
  *(void *)(*(void *)(v17 + v20) + v21 + 16) = a2;
  *(void *)(*(void *)(v17 + v20) + v21 + 24) = a3;
  unint64_t v23 = *(void *)(v17 + v20) + v21;
  uint64_t v26 = *(void *)(v23 + 56);
  uint64_t v24 = (std::vector<std::pair<unsigned long, const char *>> *)(v23 + 56);
  uint64_t v25 = v26;
  unint64_t v27 = ((uint64_t)v24->__end_ - v26) >> 4;
  uint64_t v109 = a4;
  if (v18 <= v27)
  {
    if (v18 < v27) {
      v24->__end_ = (std::vector<std::pair<unsigned long, const char *>>::pointer)(v25 + 16 * v18);
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(v24, v18 - v27);
    uint64_t v16 = v123.i64[1];
    uint64_t v14 = v123.i64[0];
    uint64_t v17 = *((void *)&v121 + 1);
  }
  char v114 = 0;
  unsigned int v28 = 0;
  uint64_t v111 = 0;
  uint64_t v117 = a3 - a2;
  unint64_t v29 = v16 + v14 - 1;
  unint64_t v30 = 8 * (v29 / 0x2A);
  unint64_t v31 = 96 * (v29 % 0x2A);
  *(void *)(*(void *)(v17 + v30) + v31 + 80) = v6;
  unint64_t v32 = *(void *)(v17 + v30) + v31;
  *(_DWORD *)(v32 + 88) = a5;
  *(unsigned char *)(v32 + 92) = a6;
  while (2)
  {
    if ((++v28 & 0xFFF) == 0 && (int)(v28 >> 12) >= (int)v117) {
      std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)12>();
    }
    unint64_t v37 = v16 + v123.i64[0] - 1;
    uint64_t v38 = *(void *)(*((void *)&v121 + 1) + 8 * (v37 / 0x2A));
    unint64_t v39 = v37 % 0x2A;
    uint64_t v40 = v38 + 96 * (v37 % 0x2A);
    unint64_t v42 = (void *)(v40 + 80);
    uint64_t v41 = *(void *)(v40 + 80);
    if (v41) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v41 + 16))(v41, v40);
    }
    switch(*(_DWORD *)v40)
    {
      case 0xFFFFFC18:
        uint64_t v43 = *(void *)(v38 + 96 * v39 + 16);
        if ((a5 & 0x20) != 0 && v43 == a2) {
          goto LABEL_8;
        }
        uint64_t v44 = v43 - *(void *)(v38 + 96 * v39 + 8);
        uint64_t v45 = v111;
        if ((v114 & (v111 >= v44)) == 0) {
          uint64_t v45 = v44;
        }
        if (v45 != v117)
        {
          uint64_t v111 = v45;
          std::deque<std::__state<char>>::pop_back(&v121);
          char v114 = 1;
          goto LABEL_9;
        }
        uint64_t v46 = (void **)*((void *)&v121 + 1);
        uint64_t v47 = v122;
        if ((void)v122 == *((void *)&v121 + 1))
        {
          uint64_t v47 = *((void *)&v121 + 1);
        }
        else
        {
          uint64_t v48 = (void *)(*((void *)&v121 + 1) + 8 * (v123.i64[0] / 0x2AuLL));
          long long v49 = (void *)(*v48 + 96 * (v123.i64[0] % 0x2AuLL));
          unint64_t v50 = *(void *)(*((void *)&v121 + 1) + 8 * ((v123.i64[1] + v123.i64[0]) / 0x2AuLL))
              + 96 * ((v123.i64[1] + v123.i64[0]) % 0x2AuLL);
          if (v49 != (void *)v50)
          {
            do
            {
              unint64_t v51 = (void *)v49[7];
              if (v51)
              {
                v49[8] = v51;
                operator delete(v51);
              }
              uint64_t v52 = (void *)v49[4];
              if (v52)
              {
                v49[5] = v52;
                operator delete(v52);
              }
              v49 += 12;
              if ((void *)((char *)v49 - *v48) == (void *)4032)
              {
                std::string::size_type v53 = (void *)v48[1];
                ++v48;
                long long v49 = v53;
              }
            }
            while (v49 != (void *)v50);
            uint64_t v46 = (void **)*((void *)&v121 + 1);
            uint64_t v47 = v122;
          }
        }
        v123.i64[1] = 0;
        unint64_t v65 = v47 - (void)v46;
        if (v65 >= 0x11)
        {
          do
          {
            operator delete(*v46);
            uint64_t v46 = (void **)(*((void *)&v121 + 1) + 8);
            *((void *)&v121 + 1) = v46;
            unint64_t v65 = v122 - (void)v46;
          }
          while ((void)v122 - (void)v46 > 0x10uLL);
        }
        if (v65 >> 3 == 1)
        {
          uint64_t v66 = 21;
        }
        else
        {
          if (v65 >> 3 != 2) {
            goto LABEL_66;
          }
          uint64_t v66 = 42;
        }
        v123.i64[0] = v66;
LABEL_66:
        char v114 = 1;
        uint64_t v111 = v117;
        goto LABEL_9;
      case 0xFFFFFC19:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_9;
      case 0xFFFFFC1D:
        unint64_t v54 = v123.i64[0];
        long long v55 = (uint64_t *)*((void *)&v121 + 1);
        uint64_t v56 = (uint64_t *)v122;
        if (v123.i64[0]) {
          goto LABEL_78;
        }
        unint64_t v57 = (uint64_t)(v122 - *((void *)&v121 + 1)) >> 3;
        uint64_t v58 = 42 * v57 - 1;
        if ((void)v122 == *((void *)&v121 + 1)) {
          uint64_t v58 = 0;
        }
        if ((unint64_t)(v58 - v123.i64[1]) >= 0x2A)
        {
          v123.i64[0] = 42;
          *(void *)uint64_t v118 = *(void *)(v122 - 8);
          *(void *)&long long v122 = v122 - 8;
          std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)&v121, v118);
          goto LABEL_77;
        }
        if (v57 < (uint64_t)(*((void *)&v122 + 1) - v121) >> 3)
        {
          if (*((void *)&v121 + 1) == (void)v121)
          {
            *(void *)uint64_t v118 = operator new(0xFC0uLL);
            std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)&v121, v118);
            *(void *)uint64_t v118 = *(void *)(v122 - 8);
            *(void *)&long long v122 = v122 - 8;
          }
          else
          {
            *(void *)uint64_t v118 = operator new(0xFC0uLL);
          }
          std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)&v121, v118);
          uint64_t v71 = 21;
          if ((void)v122 - *((void *)&v121 + 1) != 8) {
            uint64_t v71 = v123.i64[0] + 42;
          }
          v123.i64[0] = v71;
          goto LABEL_77;
        }
        if (*((void *)&v122 + 1) == (void)v121) {
          unint64_t v67 = 1;
        }
        else {
          unint64_t v67 = (uint64_t)(*((void *)&v122 + 1) - v121) >> 2;
        }
        if (v67 >> 61) {
          std::__throw_bad_array_new_length[abi:fe180100]();
        }
        __src = (char *)operator new(8 * v67);
        int v68 = operator new(0xFC0uLL);
        if (v67)
        {
          std::runtime_error v69 = __src;
          long long v70 = &__src[8 * v67];
        }
        else
        {
          uint64_t v72 = (char *)operator new(8uLL);
          long long v70 = v72 + 8;
          operator delete(__src);
          long long v55 = (uint64_t *)*((void *)&v121 + 1);
          uint64_t v56 = (uint64_t *)v122;
          std::runtime_error v69 = v72;
        }
        *(void *)std::runtime_error v69 = v68;
        uint64_t v73 = v69 + 8;
        __srca = v69;
        long long v74 = v69;
        if (v55 == v56) {
          goto LABEL_73;
        }
        break;
      case 0xFFFFFC1F:
        goto LABEL_8;
      case 0xFFFFFC20:
        std::__state<char>::__state((uint64_t)v118, (long long *)v40);
        (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v42 + 24))(*v42, 1, v40);
        (*(void (**)(void, void, unsigned char *))(*(void *)v120[1] + 24))(v120[1], 0, v118);
        uint64_t v59 = *((void *)&v121 + 1);
        if ((void)v122 == *((void *)&v121 + 1)) {
          uint64_t v60 = 0;
        }
        else {
          uint64_t v60 = 42 * ((uint64_t)(v122 - *((void *)&v121 + 1)) >> 3) - 1;
        }
        unint64_t v61 = v123.i64[1] + v123.i64[0];
        if (v60 == v123.i64[1] + v123.i64[0])
        {
          std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v121);
          uint64_t v59 = *((void *)&v121 + 1);
          unint64_t v61 = v123.i64[1] + v123.i64[0];
        }
        unint64_t v62 = *(void *)(v59 + 8 * (v61 / 0x2A)) + 96 * (v61 % 0x2A);
        long long v63 = *(_OWORD *)&v118[16];
        *(_OWORD *)unint64_t v62 = *(_OWORD *)v118;
        *(_OWORD *)(v62 + 16) = v63;
        *(void *)(v62 + 40) = 0;
        *(void *)(v62 + 48) = 0;
        *(void *)(v62 + 32) = 0;
        *(_OWORD *)(v62 + 32) = *(_OWORD *)&v118[32];
        *(void *)(v62 + 48) = *(void *)&v118[48];
        memset(&v118[32], 0, 24);
        *(void *)(v62 + 56) = 0;
        *(void *)(v62 + 64) = 0;
        *(void *)(v62 + 72) = 0;
        *(_OWORD *)(v62 + 56) = *(_OWORD *)__p;
        *(void *)(v62 + 72) = v120[0];
        __p[0] = 0;
        __p[1] = 0;
        v120[0] = 0;
        uint64_t v64 = v120[1];
        *(void *)(v62 + 85) = *(void *)((char *)&v120[1] + 5);
        *(void *)(v62 + 80) = v64;
        ++v123.i64[1];
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (*(void *)&v118[32])
        {
          *(void *)&v118[40] = *(void *)&v118[32];
          operator delete(*(void **)&v118[32]);
        }
        goto LABEL_9;
      default:
        std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)16>();
    }
    do
    {
      if (v73 != v70)
      {
        uint64_t v79 = v74;
        uint64_t v80 = v73;
        uint64_t v73 = v70;
        goto LABEL_83;
      }
      if (v74 <= __srca)
      {
        if (v73 == __srca) {
          unint64_t v89 = 1;
        }
        else {
          unint64_t v89 = (v73 - __srca) >> 2;
        }
        if (v89 >> 61) {
          std::__throw_bad_array_new_length[abi:fe180100]();
        }
        uint64_t v90 = (char *)operator new(8 * v89);
        unint64_t v91 = v89;
        unint64_t v92 = v89 >> 2;
        uint64_t v79 = &v90[8 * (v89 >> 2)];
        uint64_t v80 = v79;
        int64_t v93 = v73 - v74;
        if (v73 == v74) {
          goto LABEL_106;
        }
        uint64_t v80 = &v79[v93 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v94 = v93 - 8;
        if (v94 >= 0x38)
        {
          uint64_t v96 = 8 * v92;
          if ((unint64_t)(&v90[8 * v92] - v74) >= 0x20)
          {
            uint64_t v97 = (v94 >> 3) + 1;
            uint64_t v98 = 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v95 = &v79[v98];
            uint64_t v99 = (long long *)(v74 + 16);
            uint64_t v100 = &v90[v96 + 16];
            uint64_t v101 = v97 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v102 = *v99;
              *((_OWORD *)v100 - 1) = *(v99 - 1);
              *(_OWORD *)uint64_t v100 = v102;
              v99 += 2;
              v100 += 32;
              v101 -= 4;
            }
            while (v101);
            if (v97 == (v97 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_106;
            }
            v74 += v98;
          }
          else
          {
            uint64_t v95 = v79;
          }
        }
        else
        {
          uint64_t v95 = v79;
        }
        do
        {
          uint64_t v103 = *(void *)v74;
          v74 += 8;
          *(void *)uint64_t v95 = v103;
          v95 += 8;
        }
        while (v95 != v80);
LABEL_106:
        uint64_t v73 = &v90[8 * v91];
        if (__srca)
        {
          int v110 = v90;
          uint64_t v104 = v79;
          operator delete(__srca);
          uint64_t v79 = v104;
          __srca = v110;
        }
        else
        {
          __srca = v90;
        }
        goto LABEL_83;
      }
      uint64_t v82 = (v74 - __srca) >> 3;
      if (v82 >= -1) {
        uint64_t v83 = v82 + 1;
      }
      else {
        uint64_t v83 = v82 + 2;
      }
      uint64_t v84 = v83 >> 1;
      std::runtime_error v85 = &v74[-8 * (v83 >> 1)];
      uint64_t v86 = v73;
      int64_t v87 = v73 - v74;
      if (v73 != v74)
      {
        memmove(v85, v74, v73 - v74);
        int64_t v87 = v73 - v74;
        uint64_t v86 = v74;
      }
      uint64_t v88 = -v84;
      uint64_t v80 = &v85[v87];
      uint64_t v79 = &v86[8 * v88];
LABEL_83:
      uint64_t v81 = *v55++;
      *(void *)uint64_t v80 = v81;
      long long v74 = v79;
      long long v70 = v73;
      uint64_t v73 = v80 + 8;
    }
    while (v55 != (uint64_t *)v122);
LABEL_73:
    unsigned __int8 v75 = (void *)v121;
    *(void *)&long long v121 = __srca;
    *((void *)&v121 + 1) = v74;
    *(void *)&long long v122 = v73;
    *((void *)&v122 + 1) = v70;
    uint64_t v76 = v123.i64[0] + 42;
    if (v73 - v74 == 8) {
      uint64_t v76 = 21;
    }
    v123.i64[0] = v76;
    if (v75) {
      operator delete(v75);
    }
LABEL_77:
    unint64_t v54 = v123.i64[0];
    long long v55 = (uint64_t *)*((void *)&v121 + 1);
    uint64_t v56 = (uint64_t *)v122;
LABEL_78:
    int v77 = &v55[v54 / 0x2A];
    uint64_t v78 = *v77 + 96 * (v54 % 0x2A);
    if (v56 == v55) {
      uint64_t v78 = 0;
    }
    if (v78 == *v77) {
      uint64_t v78 = *(v77 - 1) + 4032;
    }
    long long v33 = *(_OWORD *)(v40 + 16);
    *(_OWORD *)(v78 - 96) = *(_OWORD *)v40;
    *(_OWORD *)(v78 - 80) = v33;
    uint64_t v34 = v38 + 96 * v39;
    *(void *)(v78 - 56) = 0;
    *(void *)(v78 - 48) = 0;
    *(void *)(v78 - 64) = 0;
    *(_OWORD *)(v78 - 64) = *(_OWORD *)(v34 + 32);
    *(void *)(v78 - 48) = *(void *)(v34 + 48);
    *(void *)(v34 + 32) = 0;
    *(void *)(v34 + 40) = 0;
    *(void *)(v34 + 48) = 0;
    *(void *)(v78 - 40) = 0;
    *(void *)(v78 - 32) = 0;
    *(void *)(v78 - 24) = 0;
    *(_OWORD *)(v78 - 40) = *(_OWORD *)(v34 + 56);
    *(void *)(v78 - 24) = *(void *)(v34 + 72);
    *(void *)(v34 + 56) = 0;
    *(void *)(v34 + 64) = 0;
    *(void *)(v34 + 72) = 0;
    uint64_t v35 = *v42;
    *(void *)(v78 - 11) = *(void *)(v40 + 85);
    *(void *)(v78 - 16) = v35;
    int64x2_t v123 = vaddq_s64(v123, (int64x2_t)xmmword_18DDE9C10);
LABEL_8:
    std::deque<std::__state<char>>::pop_back(&v121);
LABEL_9:
    uint64_t v16 = v123.i64[1];
    if (v123.i64[1]) {
      continue;
    }
    break;
  }
  if ((v114 & 1) == 0) {
    goto LABEL_112;
  }
  uint64_t v105 = *v109;
  if (v109[1] != *v109)
  {
    *(void *)uint64_t v105 = a2;
    *(void *)(v105 + 8) = a2 + v111;
    *(unsigned char *)(v105 + 16) = 1;
    goto LABEL_112;
  }
  __break(1u);
}

void sub_18DB74044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  operator delete(v23);
  operator delete(__p);
  std::deque<std::__state<char>>::~deque[abi:fe180100](v24 - 144);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  __n128 v150 = 0;
  long long v151 = 0;
  unint64_t v152 = 0;
  *(_DWORD *)uint64_t v146 = 0;
  memset(&v146[8], 0, 32);
  long long v147 = 0u;
  long long v148 = 0u;
  memset(v149, 0, 21);
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6)
  {
    long long v12 = 0;
LABEL_174:
    uint64_t v138 = (void *)v148;
    if (!(void)v148)
    {
LABEL_176:
      if (*(void *)&v146[32])
      {
        *(void *)&long long v147 = *(void *)&v146[32];
        operator delete(*(void **)&v146[32]);
      }
      if (v12) {
        operator delete(v12);
      }
      return;
    }
LABEL_175:
    *((void *)&v148 + 1) = v138;
    operator delete(v138);
    goto LABEL_176;
  }
  __x.first = a3;
  __x.second = a3;
  __x.matched = 0;
  *(_DWORD *)uint64_t v142 = 0;
  memset(&v142[8], 0, 48);
  *(_OWORD *)std::runtime_error __p = 0uLL;
  memset(v144, 0, 21);
  unint64_t v11 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v150, (uint64_t)v142);
  long long v151 = v11;
  if (__p[0]) {
    operator delete(__p[0]);
  }
  if (*(void *)&v142[32]) {
    operator delete(*(void **)&v142[32]);
  }
  long long v12 = v150;
  if (v150 == v11) {
    goto LABEL_184;
  }
  uint64_t v13 = *((void *)v11 - 8);
  *((_DWORD *)v11 - 24) = 0;
  *((void *)v11 - 11) = a2;
  *((void *)v11 - 10) = a2;
  *((void *)v11 - 9) = a3;
  unint64_t v14 = *(unsigned int *)(a1 + 28);
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v11 - 7) - v13) >> 3);
  if (v14 <= v15)
  {
    if (v14 < v15) {
      *((void *)v11 - 7) = v13 + 24 * v14;
    }
  }
  else
  {
    std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v11 - 64), v14 - v15, &__x);
  }
  uint64_t v16 = *((void *)v11 - 5);
  unint64_t v17 = *(unsigned int *)(a1 + 32);
  unint64_t v18 = (*((void *)v11 - 4) - v16) >> 4;
  if (v17 <= v18)
  {
    if (v17 < v18) {
      *((void *)v11 - 4) = v16 + 16 * v17;
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v11 - 40), v17 - v18);
  }
  unint64_t v139 = a4;
  unint64_t v19 = 0;
  char v20 = 0;
  unsigned int v21 = 0;
  unint64_t v22 = &a3[-a2];
  *((void *)v11 - 2) = v6;
  *((_DWORD *)v11 - 2) = a5;
  *(v11 - 4) = a6;
  while (2)
  {
    if ((++v21 & 0xFFF) == 0 && (int)(v21 >> 12) >= (int)v22) {
      std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)12>();
    }
    if (v12 == v11) {
      goto LABEL_184;
    }
    uint64_t v25 = v11 - 16;
    uint64_t v24 = *((void *)v11 - 2);
    uint64_t v26 = v11 - 96;
    if (v24) {
      (*(void (**)(uint64_t, char *))(*(void *)v24 + 16))(v24, v11 - 96);
    }
    switch(*(_DWORD *)v26)
    {
      case 0xFFFFFC18:
        uint64_t v27 = *((void *)v11 - 10);
        if ((a5 & 0x20) != 0 && v27 == a2) {
          goto LABEL_30;
        }
        uint64_t v34 = (const char *)(v27 - *((void *)v11 - 11));
        if ((v20 & ((uint64_t)v19 >= (uint64_t)v34)) != 0) {
          goto LABEL_103;
        }
        long long v35 = *(_OWORD *)v26;
        *(_OWORD *)&v146[16] = *((_OWORD *)v11 - 5);
        *(_OWORD *)uint64_t v146 = v35;
        if (v146 == v26) {
          goto LABEL_102;
        }
        unint64_t v37 = (char *)*((void *)v11 - 8);
        uint64_t v36 = (char *)*((void *)v11 - 7);
        unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((v36 - v37) >> 3);
        uint64_t v39 = *((void *)&v147 + 1);
        uint64_t v40 = *(char **)&v146[32];
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v147 + 1) - *(void *)&v146[32]) >> 3) >= v38)
        {
          uint64_t v45 = (char *)v147;
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v147 - *(void *)&v146[32]) >> 3) >= v38)
          {
            for (uint64_t i = *(void *)&v146[32]; v37 != v36; v37 += 24)
            {
              *(_OWORD *)uint64_t i = *(_OWORD *)v37;
              *(unsigned char *)(i + 16) = v37[16];
              i += 24;
            }
            uint64_t v47 = i - (void)v40;
            uint64_t v45 = v40;
          }
          else
          {
            uint64_t v48 = &v37[8 * ((uint64_t)(v147 - *(void *)&v146[32]) >> 3)];
            if ((void)v147 != *(void *)&v146[32])
            {
              do
              {
                *(_OWORD *)uint64_t v40 = *(_OWORD *)v37;
                v40[16] = v37[16];
                v37 += 24;
                v40 += 24;
              }
              while (v37 != v48);
            }
            for (j = v45; v48 != v36; v48 += 24)
            {
              long long v50 = *(_OWORD *)v48;
              *((void *)j + 2) = *((void *)v48 + 2);
              *(_OWORD *)j = v50;
              j += 24;
            }
            uint64_t v47 = j - v45;
          }
        }
        else
        {
          if (*(void *)&v146[32])
          {
            *(void *)&long long v147 = *(void *)&v146[32];
            operator delete(*(void **)&v146[32]);
            uint64_t v39 = 0;
            *(void *)&v146[32] = 0;
            long long v147 = 0uLL;
          }
          if (v38 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_182;
          }
          unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * (v39 >> 3);
          uint64_t v42 = 2 * v41;
          if (2 * v41 <= v38) {
            uint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((v36 - v37) >> 3);
          }
          unint64_t v43 = v41 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v42;
          if (v43 > 0xAAAAAAAAAAAAAAALL) {
LABEL_182:
          }
            std::vector<std::string>::__throw_length_error[abi:fe180100]();
          uint64_t v44 = (char *)operator new(24 * v43);
          uint64_t v45 = v44;
          *(void *)&v146[32] = v44;
          *(void *)&long long v147 = v44;
          *((void *)&v147 + 1) = &v44[24 * v43];
          uint64_t v46 = v44;
          if (v37 != v36)
          {
            memcpy(v44, v37, 24 * ((v36 - v37 - 24) / 0x18uLL) + 24);
            uint64_t v46 = &v45[24 * ((v36 - v37 - 24) / 0x18uLL) + 24];
          }
          uint64_t v47 = v46 - v45;
        }
        *(void *)&long long v147 = &v45[v47];
        std::string::size_type v53 = (char *)*((void *)v11 - 5);
        uint64_t v52 = (char *)*((void *)v11 - 4);
        int64_t v54 = v52 - v53;
        unint64_t v55 = (v52 - v53) >> 4;
        uint64_t v56 = v149[0];
        unint64_t v57 = (char *)v148;
        if (v55 > (uint64_t)(v149[0] - v148) >> 4)
        {
          if ((void)v148)
          {
            *((void *)&v148 + 1) = v148;
            operator delete((void *)v148);
            uint64_t v56 = 0;
            long long v148 = 0uLL;
            v149[0] = 0;
          }
          if (v54 < 0) {
            goto LABEL_183;
          }
          uint64_t v58 = v56 >> 3;
          if (v56 >> 3 <= v55) {
            uint64_t v58 = (v52 - v53) >> 4;
          }
          unint64_t v59 = (unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v58;
          if (v59 >> 60) {
LABEL_183:
          }
            std::vector<std::string>::__throw_length_error[abi:fe180100]();
          uint64_t v60 = (char *)operator new(16 * v59);
          *(void *)&long long v148 = v60;
          v149[0] = &v60[16 * v59];
          unint64_t v61 = v60;
          if (v53 != v52)
          {
            unint64_t v61 = v60;
            if ((unint64_t)(v54 - 16) < 0x30) {
              goto LABEL_187;
            }
            unint64_t v62 = ((unint64_t)(v54 - 16) >> 4) + 1;
            uint64_t v63 = 16 * (v62 & 0x1FFFFFFFFFFFFFFCLL);
            uint64_t v64 = &v53[v63];
            unint64_t v65 = (double *)(v60 + 32);
            uint64_t v66 = (const double *)(v53 + 32);
            uint64_t v67 = v62 & 0x1FFFFFFFFFFFFFFCLL;
            do
            {
              int v68 = v66 - 4;
              float64x2x2_t v153 = vld2q_f64(v68);
              float64x2x2_t v157 = vld2q_f64(v66);
              std::runtime_error v69 = v65 - 4;
              vst2q_f64(v69, v153);
              vst2q_f64(v65, v157);
              v65 += 8;
              v66 += 8;
              v67 -= 4;
            }
            while (v67);
            unint64_t v61 = &v60[v63];
            std::string::size_type v53 = v64;
            if (v62 != (v62 & 0x1FFFFFFFFFFFFFFCLL))
            {
LABEL_187:
              do
              {
                *(void *)unint64_t v61 = *(void *)v53;
                *((void *)v61 + 1) = *((void *)v53 + 1);
                v61 += 16;
                v53 += 16;
              }
              while (v53 != v52);
            }
          }
          goto LABEL_98;
        }
        uint64_t v60 = (char *)*((void *)&v148 + 1);
        uint64_t v70 = *((void *)&v148 + 1) - v148;
        unint64_t v71 = (uint64_t)(*((void *)&v148 + 1) - v148) >> 4;
        if (v71 < v55)
        {
          uint64_t v72 = &v53[16 * v71];
          if (*((void *)&v148 + 1) != (void)v148)
          {
            if ((unint64_t)(v70 - 16) < 0xF0)
            {
              uint64_t v73 = v53;
              goto LABEL_86;
            }
            unint64_t v87 = (v70 & 0xFFFFFFFFFFFFFFF0) - 8;
            unint64_t v88 = v148 + v87;
            unint64_t v89 = (unint64_t)&v53[v87];
            BOOL v91 = (uint64_t)v148 + 8 < (unint64_t)&v53[v70 & 0xFFFFFFFFFFFFFFF0]
               && (unint64_t)(v53 + 8) < (unint64_t)v148 + (v70 & 0xFFFFFFFFFFFFFFF0);
            uint64_t v73 = v53;
            BOOL v92 = v88 <= (unint64_t)v53 || (unint64_t)v148 >= v89;
            if (!v92 || v91)
            {
              do
              {
LABEL_86:
                *(void *)unint64_t v57 = *(void *)v73;
                *((void *)v57 + 1) = *((void *)v73 + 1);
                v73 += 16;
                v57 += 16;
              }
              while (v73 != v72);
            }
            else
            {
              unint64_t v93 = ((unint64_t)(v70 - 16) >> 4) + 1;
              uint64_t v94 = 16 * (v93 & 0x1FFFFFFFFFFFFFFCLL);
              uint64_t v95 = (char *)(v148 + v94);
              uint64_t v96 = (const double *)(v53 + 32);
              uint64_t v97 = (double *)(v148 + 32);
              uint64_t v98 = v93 & 0x1FFFFFFFFFFFFFFCLL;
              do
              {
                uint64_t v99 = v96 - 4;
                float64x2x2_t v154 = vld2q_f64(v99);
                float64x2x2_t v158 = vld2q_f64(v96);
                uint64_t v100 = v97 - 4;
                vst2q_f64(v100, v154);
                vst2q_f64(v97, v158);
                v96 += 8;
                v97 += 8;
                v98 -= 4;
              }
              while (v98);
              if (v93 != (v93 & 0x1FFFFFFFFFFFFFFCLL))
              {
                uint64_t v73 = &v53[v94];
                unint64_t v57 = v95;
                goto LABEL_86;
              }
            }
          }
          if (v72 == v52)
          {
            unint64_t v61 = v60;
          }
          else
          {
            long long v74 = &v53[v70];
            unint64_t v75 = v52 - v74 - 16;
            if (v75 < 0x170)
            {
              unint64_t v61 = v60;
              goto LABEL_90;
            }
            uint64_t v101 = &v74[v75 & 0xFFFFFFFFFFFFFFF0];
            unint64_t v102 = (unint64_t)(v74 + 8);
            BOOL v104 = v60 + 8 < v101 + 16 && v102 < (unint64_t)&v60[(v75 & 0xFFFFFFFFFFFFFFF0) + 16];
            unint64_t v61 = v60;
            if (v72 < &v60[(v75 & 0xFFFFFFFFFFFFFFF0) + 8] && v60 < v101 + 8) {
              goto LABEL_188;
            }
            if (v104) {
              goto LABEL_188;
            }
            uint64_t v106 = (v75 >> 4) + 1;
            uint64_t v107 = 16 * (v106 & 0x1FFFFFFFFFFFFFFCLL);
            v72 += v107;
            unint64_t v108 = (double *)(v60 + 32);
            uint64_t v109 = (const double *)&v53[16 * v71 + 32];
            uint64_t v110 = v106 & 0x1FFFFFFFFFFFFFFCLL;
            do
            {
              uint64_t v111 = v109 - 4;
              float64x2x2_t v155 = vld2q_f64(v111);
              float64x2x2_t v159 = vld2q_f64(v109);
              uint64_t v112 = v108 - 4;
              vst2q_f64(v112, v155);
              vst2q_f64(v108, v159);
              v108 += 8;
              v109 += 8;
              v110 -= 4;
            }
            while (v110);
            unint64_t v61 = &v60[v107];
            if (v106 != (v106 & 0x1FFFFFFFFFFFFFFCLL))
            {
LABEL_188:
              do
              {
LABEL_90:
                *(void *)unint64_t v61 = *(void *)v72;
                *((void *)v61 + 1) = *((void *)v72 + 1);
                v61 += 16;
                v72 += 16;
              }
              while (v72 != v52);
            }
          }
LABEL_98:
          int64_t v78 = v61 - v60;
          goto LABEL_101;
        }
        if (v53 == v52)
        {
          int v77 = (char *)v148;
          goto LABEL_100;
        }
        unint64_t v76 = v54 - 16;
        if ((unint64_t)(v54 - 16) < 0xF0)
        {
          int v77 = (char *)v148;
          goto LABEL_95;
        }
        unint64_t v113 = v76 & 0xFFFFFFFFFFFFFFF0 | 8;
        unint64_t v114 = v148 + v113;
        unint64_t v115 = (unint64_t)&v53[v113];
        unint64_t v116 = (v76 & 0xFFFFFFFFFFFFFFF0) + 16;
        BOOL v118 = (uint64_t)v148 + 8 < (unint64_t)&v53[v116]
            && (unint64_t)(v53 + 8) < (unint64_t)v148 + v116;
        int v77 = (char *)v148;
        BOOL v119 = v114 <= (unint64_t)v53 || (unint64_t)v148 >= v115;
        if (!v119 || v118) {
          goto LABEL_95;
        }
        uint64_t v120 = (v76 >> 4) + 1;
        uint64_t v121 = 16 * (v120 & 0x1FFFFFFFFFFFFFFCLL);
        int v77 = (char *)(v148 + v121);
        long long v122 = (const double *)(v53 + 32);
        int64x2_t v123 = (double *)(v148 + 32);
        uint64_t v124 = v120 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          uint64_t v125 = v122 - 4;
          float64x2x2_t v156 = vld2q_f64(v125);
          float64x2x2_t v160 = vld2q_f64(v122);
          long long v126 = v123 - 4;
          vst2q_f64(v126, v156);
          vst2q_f64(v123, v160);
          v122 += 8;
          v123 += 8;
          v124 -= 4;
        }
        while (v124);
        if (v120 != (v120 & 0x1FFFFFFFFFFFFFFCLL))
        {
          v53 += v121;
          do
          {
LABEL_95:
            *(void *)int v77 = *(void *)v53;
            *((void *)v77 + 1) = *((void *)v53 + 1);
            v77 += 16;
            v53 += 16;
          }
          while (v53 != v52);
        }
LABEL_100:
        int64_t v78 = v77 - v57;
        uint64_t v60 = v57;
LABEL_101:
        *((void *)&v148 + 1) = &v60[v78];
LABEL_102:
        uint64_t v79 = *(void *)v25;
        *(void *)((char *)&v149[1] + 5) = *(void *)(v25 + 5);
        v149[1] = v79;
        unint64_t v19 = v34;
LABEL_103:
        if (v19 == v22)
        {
          uint64_t v80 = v150;
          for (k = v151; k != v80; k -= 96)
          {
            uint64_t v82 = (void *)*((void *)k - 5);
            if (v82)
            {
              *((void *)k - 4) = v82;
              operator delete(v82);
            }
            uint64_t v83 = (void *)*((void *)k - 8);
            if (v83)
            {
              *((void *)k - 7) = v83;
              operator delete(v83);
            }
          }
          long long v151 = v80;
          char v20 = 1;
          unint64_t v19 = v22;
        }
        else
        {
          uint64_t v84 = v151;
          if (v150 == v151) {
            goto LABEL_184;
          }
          std::runtime_error v85 = (void *)*((void *)v151 - 5);
          if (v85)
          {
            *((void *)v151 - 4) = v85;
            operator delete(v85);
          }
          uint64_t v86 = (void *)*((void *)v84 - 8);
          if (v86)
          {
            *((void *)v84 - 7) = v86;
            operator delete(v86);
          }
          long long v151 = v84 - 96;
          char v20 = 1;
        }
LABEL_18:
        long long v12 = v150;
        unint64_t v11 = v151;
        if (v150 != v151) {
          continue;
        }
        if ((v20 & 1) == 0) {
          goto LABEL_174;
        }
        uint64_t v127 = *v139;
        uint64_t v128 = v139[1];
        uint64_t v129 = v128 - *v139;
        if (v128 == *v139) {
          goto LABEL_184;
        }
        *(void *)uint64_t v127 = a2;
        *(void *)(v127 + 8) = &v19[a2];
        *(unsigned char *)(v127 + 16) = 1;
        uint64_t v130 = *(void *)&v146[32];
        if ((void)v147 == *(void *)&v146[32])
        {
LABEL_172:
          uint64_t v138 = (void *)v148;
          if (!(void)v148) {
            goto LABEL_176;
          }
          goto LABEL_175;
        }
        unint64_t v131 = 0;
        unint64_t v132 = 0xAAAAAAAAAAAAAAABLL * (v129 >> 3);
        unint64_t v133 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v147 - *(void *)&v146[32]) >> 3);
        unsigned int v134 = 1;
        while (1)
        {
          unint64_t v135 = v134;
          if (v132 <= v134) {
            break;
          }
          uint64_t v136 = v130 + 24 * v131;
          uint64_t v137 = v127 + 24 * v134;
          *(_OWORD *)uint64_t v137 = *(_OWORD *)v136;
          *(unsigned char *)(v137 + 16) = *(unsigned char *)(v136 + 16);
          unsigned int v134 = v135 + 1;
          unint64_t v131 = v135;
          if (v133 <= v135) {
            goto LABEL_172;
          }
        }
LABEL_184:
        __break(1u);
        return;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_18;
      case 0xFFFFFC1F:
LABEL_30:
        unsigned int v28 = v151;
        if (v150 == v151) {
          goto LABEL_184;
        }
        unint64_t v29 = (void *)*((void *)v151 - 5);
        if (v29)
        {
          *((void *)v151 - 4) = v29;
          operator delete(v29);
        }
        unint64_t v30 = (void *)*((void *)v28 - 8);
        if (v30)
        {
          *((void *)v28 - 7) = v30;
          operator delete(v30);
        }
        long long v151 = v28 - 96;
        goto LABEL_18;
      case 0xFFFFFC20:
        std::__state<char>::__state((uint64_t)v142, (long long *)v11 - 6);
        (*(void (**)(void, uint64_t, char *))(**(void **)v25 + 24))(*(void *)v25, 1, v11 - 96);
        (*(void (**)(void, void, unsigned char *))(*(void *)v144[1] + 24))(v144[1], 0, v142);
        unint64_t v31 = v151;
        if ((unint64_t)v151 >= v152)
        {
          long long v151 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v150, (uint64_t)v142);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v32 = *(_OWORD *)&v142[16];
          *(_OWORD *)long long v151 = *(_OWORD *)v142;
          *((_OWORD *)v31 + 1) = v32;
          *((void *)v31 + 4) = 0;
          *((void *)v31 + 5) = 0;
          *((void *)v31 + 6) = 0;
          *((void *)v31 + 7) = 0;
          *((_OWORD *)v31 + 2) = *(_OWORD *)&v142[32];
          *((void *)v31 + 6) = *(void *)&v142[48];
          memset(&v142[32], 0, 24);
          *((void *)v31 + 8) = 0;
          *((void *)v31 + 9) = 0;
          *(_OWORD *)(v31 + 56) = *(_OWORD *)__p;
          *((void *)v31 + 9) = v144[0];
          __p[0] = 0;
          __p[1] = 0;
          v144[0] = 0;
          uint64_t v33 = v144[1];
          *(void *)(v31 + 85) = *(void *)((char *)&v144[1] + 5);
          *((void *)v31 + 10) = v33;
          long long v151 = v31 + 96;
        }
        if (*(void *)&v142[32])
        {
          *(void *)&v142[40] = *(void *)&v142[32];
          operator delete(*(void **)&v142[32]);
        }
        goto LABEL_18;
      default:
        std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)16>();
    }
  }
}

void sub_18DB74BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::__state<char>::~__state(&a33);
  std::vector<std::__state<char>>::~vector[abi:fe180100]((void **)(v33 - 120));
  _Unwind_Resume(a1);
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:fe180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:fe180100]();
    }
    uint64_t v7 = (char *)operator new(96 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  std::vector<std::csub_match>::size_type v9 = &v7[96 * v2];
  *(_OWORD *)std::vector<std::csub_match>::size_type v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  unint64_t v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v9 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(v9 + 85) = *(void *)(a2 + 85);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  *((void *)v9 + 9) = 0;
  *((void *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v9 + 9) = v11;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  uint64_t v13 = v9 + 96;
  unint64_t v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      unint64_t v17 = &v9[v16];
      unint64_t v18 = &v15[v16];
      long long v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((void *)v17 - 7) = 0;
      *((void *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((void *)v17 - 6) = *(void *)&v15[v16 - 48];
      *((void *)v18 - 8) = 0;
      *((void *)v18 - 7) = 0;
      *((void *)v18 - 6) = 0;
      *((void *)v17 - 4) = 0;
      *((void *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((void *)v17 - 3) = *(void *)&v15[v16 - 24];
      *((void *)v18 - 5) = 0;
      *((void *)v18 - 4) = 0;
      *((void *)v18 - 3) = 0;
      uint64_t v20 = *(void *)&v15[v16 - 16];
      *(void *)(v17 - 11) = *(void *)&v15[v16 - 11];
      *((void *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    unint64_t v15 = (char *)*a1;
    unsigned int v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      unint64_t v22 = (void *)*((void *)v21 - 5);
      if (v22)
      {
        *((void *)v21 - 4) = v22;
        operator delete(v22);
      }
      unint64_t v23 = (void *)*((void *)v21 - 8);
      if (v23)
      {
        *((void *)v21 - 7) = v23;
        operator delete(v23);
      }
      v21 -= 96;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      uint64_t v13 = &end[__n];
      std::vector<std::csub_match>::size_type v14 = 24 * __n;
      do
      {
        std::pair<const char *, const char *> v15 = __x->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__x->matched;
        end->std::pair<const char *, const char *> = v15;
        ++end;
        v14 -= 24;
      }
      while (v14);
      std::vector<std::csub_match>::pointer end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    unint64_t v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:fe180100]();
      }
      uint64_t v12 = (char *)operator new(24 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v16 = (std::sub_match<const char *> *)&v12[24 * v8];
    std::vector<std::csub_match>::size_type v17 = 24 * __n;
    unint64_t v18 = &v16[__n];
    long long v19 = v16;
    do
    {
      std::pair<const char *, const char *> v20 = __x->std::pair<const char *, const char *>;
      v19[1].first = *(const char **)&__x->matched;
      std::pair<const char *, const char *> *v19 = v20;
      long long v19 = (std::pair<const char *, const char *> *)((char *)v19 + 24);
      v17 -= 24;
    }
    while (v17);
    std::vector<std::csub_match>::pointer begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        std::pair<const char *, const char *> v22 = end[-1].std::pair<const char *, const char *>;
        *(void *)&v16[-1].matched = *(void *)&end[-1].matched;
        v16[-1].std::pair<const char *, const char *> = v22;
        --v16;
        --end;
      }
      while (end != begin);
      std::vector<std::csub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v16;
    this->__end_ = v18;
    this->__end_cap_.__value_ = (std::sub_match<const char *> *)&v12[24 * v11];
    if (end)
    {
      operator delete(end);
    }
  }
}

void std::vector<std::pair<unsigned long,char const*>>::__append(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __n)
{
  std::vector<std::csub_match>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      std::vector<std::pair<unsigned long, const char *>>::size_type v12 = 16 * __n;
      bzero(this->__end_, 16 * __n);
      std::vector<std::csub_match>::pointer end = (std::pair<unsigned long, const char *> *)((char *)end + v12);
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<std::pair<unsigned long, const char *>>::pointer begin = this->__begin_;
    uint64_t v7 = end - this->__begin_;
    unint64_t v8 = v7 + __n;
    if ((v7 + __n) >> 60) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v9 = (char *)value - (char *)begin;
    if (v9 >> 3 > v8) {
      unint64_t v8 = v9 >> 3;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 60) {
        std::__throw_bad_array_new_length[abi:fe180100]();
      }
      unint64_t v11 = (char *)operator new(16 * v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    uint64_t v13 = (std::pair<unsigned long, const char *> *)&v11[16 * v7];
    size_t v14 = __n;
    std::pair<const char *, const char *> v15 = (std::pair<unsigned long, const char *> *)&v11[16 * v10];
    bzero(v13, v14 * 16);
    uint64_t v16 = &v13[v14];
    if (end != begin)
    {
      do
      {
        v13[-1] = end[-1];
        --v13;
        --end;
      }
      while (end != begin);
      std::vector<std::csub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
    {
      operator delete(end);
    }
  }
}

void std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)12>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FA3BA0](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_18DB75164(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::__state<char>::~__state(void *a1)
{
  unint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t std::__state<char>::__state(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v7 = (unsigned char *)*((void *)a2 + 4);
  unint64_t v6 = (unsigned char *)*((void *)a2 + 5);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v9 = (char *)operator new(v8);
    *(void *)(a1 + 32) = v9;
    *(void *)(a1 + 40) = v9;
    *(void *)(a1 + 48) = &v9[8 * (v8 >> 3)];
    size_t v10 = 24 * ((v8 - 24) / 0x18uLL) + 24;
    memcpy(v9, v7, v10);
    *(void *)(a1 + 40) = &v9[v10];
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<std::pair<unsigned long, const char *>>::size_type v12 = (char *)*((void *)a2 + 7);
  unint64_t v11 = (char *)*((void *)a2 + 8);
  uint64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    size_t v14 = (char *)operator new(v11 - v12);
    *(void *)(a1 + 56) = v14;
    *(void *)(a1 + 64) = v14;
    *(void *)(a1 + 72) = &v14[16 * (v13 >> 4)];
    unint64_t v15 = v13 - 16;
    if ((unint64_t)(v13 - 16) < 0xF0) {
      goto LABEL_30;
    }
    unint64_t v20 = v15 & 0xFFFFFFFFFFFFFFF0 | 8;
    unsigned int v21 = &v14[v20];
    std::pair<const char *, const char *> v22 = &v12[v20];
    unint64_t v23 = (v15 & 0xFFFFFFFFFFFFFFF0) + 16;
    BOOL v24 = v14 + 8 >= &v12[v23] || v12 + 8 >= &v14[v23];
    BOOL v25 = !v24;
    if (v12 < v21 && v14 < v22) {
      goto LABEL_30;
    }
    if (v25) {
      goto LABEL_30;
    }
    uint64_t v27 = (v15 >> 4) + 1;
    uint64_t v28 = 16 * (v27 & 0x1FFFFFFFFFFFFFFCLL);
    unint64_t v29 = (double *)(v14 + 32);
    unint64_t v30 = (const double *)(v12 + 32);
    uint64_t v31 = v27 & 0x1FFFFFFFFFFFFFFCLL;
    do
    {
      long long v32 = v30 - 4;
      float64x2x2_t v34 = vld2q_f64(v32);
      float64x2x2_t v35 = vld2q_f64(v30);
      uint64_t v33 = v29 - 4;
      vst2q_f64(v33, v34);
      vst2q_f64(v29, v35);
      v29 += 8;
      v30 += 8;
      v31 -= 4;
    }
    while (v31);
    v14 += v28;
    v12 += v28;
    if (v27 != (v27 & 0x1FFFFFFFFFFFFFFCLL))
    {
LABEL_30:
      do
      {
        uint64_t v16 = *(void *)v12;
        uint64_t v17 = *((void *)v12 + 1);
        v12 += 16;
        *(void *)size_t v14 = v16;
        *((void *)v14 + 1) = v17;
        v14 += 16;
      }
      while (v12 != v11);
    }
    *(void *)(a1 + 64) = v14;
  }
  uint64_t v18 = *((void *)a2 + 10);
  *(void *)(a1 + 85) = *(void *)((char *)a2 + 85);
  *(void *)(a1 + 80) = v18;
  return a1;
}

void sub_18DB7539C(_Unwind_Exception *exception_object)
{
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 64) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)16>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FA3BA0](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_18DB75414(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void **std::vector<std::__state<char>>::~vector[abi:fe180100](void **a1)
{
  unint64_t v2 = (char *)*a1;
  if (*a1)
  {
    unint64_t v3 = (char *)a1[1];
    long long v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        long long v5 = (void *)*((void *)v3 - 5);
        if (v5)
        {
          *((void *)v3 - 4) = v5;
          operator delete(v5);
        }
        unint64_t v6 = (void *)*((void *)v3 - 8);
        if (v6)
        {
          *((void *)v3 - 7) = v6;
          operator delete(v6);
        }
        v3 -= 96;
      }
      while (v3 != v2);
      long long v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void std::deque<std::__state<char>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x2A;
  unint64_t v4 = v2 - 42;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    unint64_t v6 = *(void **)(a1 + 8);
    long long v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_82:
      *(void *)long long v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v32 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v32 = 1;
      }
      if (!(v32 >> 61))
      {
        unint64_t v33 = v32 >> 2;
        uint64_t v34 = 8 * v32;
        float64x2x2_t v35 = (char *)operator new(8 * v32);
        uint64_t v36 = &v35[8 * v33];
        unint64_t v37 = &v35[v34];
        int64_t v39 = v5 - v7;
        BOOL v38 = v5 == v7;
        long long v5 = v36;
        if (!v38)
        {
          long long v5 = &v36[v39 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v40 = v39 - 8;
          if ((unint64_t)(v39 - 8) >= 0x38)
          {
            unint64_t v76 = &v35[8 * v33];
            unint64_t v41 = v76;
            if ((unint64_t)(v76 - v7) >= 0x20)
            {
              uint64_t v77 = (v40 >> 3) + 1;
              uint64_t v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v41 = &v36[v78];
              uint64_t v79 = (long long *)(v6 + 3);
              uint64_t v80 = v76 + 16;
              uint64_t v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v82 = *v79;
                *(v80 - 1) = *(v79 - 1);
                *uint64_t v80 = v82;
                v79 += 2;
                v80 += 2;
                v81 -= 4;
              }
              while (v81);
              if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_80;
              }
              v7 += v78;
            }
          }
          else
          {
            unint64_t v41 = &v35[8 * v33];
          }
          do
          {
            uint64_t v83 = *(void *)v7;
            v7 += 8;
            *(void *)unint64_t v41 = v83;
            v41 += 8;
          }
          while (v41 != v5);
        }
        goto LABEL_80;
      }
LABEL_92:
      std::__throw_bad_array_new_length[abi:fe180100]();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    unint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      uint64_t v7 = *(char **)(a1 + 8);
    }
    long long v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_82;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      uint64_t v96 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v96);
      return;
    }
    uint64_t v96 = operator new(0xFC0uLL);
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v96);
    uint64_t v42 = *(void **)(a1 + 8);
    long long v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v42 + 1);
    uint64_t v8 = *v42;
    *(void *)(a1 + 8) = v42 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_82;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v43 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v43 = 1;
      }
      if (!(v43 >> 61))
      {
        unint64_t v44 = v43 >> 2;
        uint64_t v45 = 8 * v43;
        float64x2x2_t v35 = (char *)operator new(8 * v43);
        uint64_t v36 = &v35[8 * v44];
        unint64_t v37 = &v35[v45];
        int64_t v46 = v5 - v7;
        BOOL v38 = v5 == v7;
        long long v5 = v36;
        if (!v38)
        {
          long long v5 = &v36[v46 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v47 = v46 - 8;
          if ((unint64_t)(v46 - 8) >= 0x38)
          {
            uint64_t v84 = &v35[8 * v44];
            uint64_t v48 = v84;
            if ((unint64_t)(v84 - v7) >= 0x20)
            {
              uint64_t v85 = (v47 >> 3) + 1;
              uint64_t v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v48 = &v36[v86];
              unint64_t v87 = (long long *)(v42 + 3);
              unint64_t v88 = v84 + 16;
              uint64_t v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v90 = *v87;
                *(v88 - 1) = *(v87 - 1);
                *unint64_t v88 = v90;
                v87 += 2;
                v88 += 2;
                v89 -= 4;
              }
              while (v89);
              if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_80;
              }
              v7 += v86;
            }
          }
          else
          {
            uint64_t v48 = &v35[8 * v44];
          }
          do
          {
            uint64_t v91 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v48 = v91;
            v48 += 8;
          }
          while (v48 != v5);
        }
LABEL_80:
        *(void *)a1 = v35;
        *(void *)(a1 + 8) = v36;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v37;
        if (v9)
        {
          operator delete(v9);
          long long v5 = *(char **)(a1 + 16);
        }
        goto LABEL_82;
      }
      goto LABEL_92;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_92;
  }
  BOOL v25 = (char *)operator new(8 * v24);
  uint64_t v26 = &v25[8 * v21];
  v27.i64[0] = (uint64_t)v25;
  v27.i64[1] = (uint64_t)v26;
  int64x2_t v94 = v27;
  uint64_t v28 = operator new(0xFC0uLL);
  *((void *)&v29 + 1) = &v25[8 * v24];
  if (v21 == v24)
  {
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v49 = 1;
      }
      else {
        unint64_t v49 = v20 >> 2;
      }
      if (v49 >> 61) {
        std::__throw_bad_array_new_length[abi:fe180100]();
      }
      uint64_t v26 = (char *)operator new(8 * v49);
      int64x2_t v94 = vdupq_n_s64((unint64_t)v26);
      operator delete(v25);
      *((void *)&v29 + 1) = &v26[8 * v49];
      uint64_t v18 = *(void *)(a1 + 16);
    }
    else
    {
      unint64_t v30 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v30 = v21 + 1;
      }
      v26 -= 8 * (v30 >> 1);
      v31.i64[0] = v94.i64[0];
      v31.i64[1] = (uint64_t)v26;
      int64x2_t v94 = v31;
    }
  }
  *(void *)uint64_t v26 = v28;
  *(void *)&long long v29 = v26 + 8;
  while (v18 != *(void *)(a1 + 8))
  {
    std::string::size_type v53 = (void *)v94.i64[1];
    if (v94.i64[1] != v94.i64[0])
    {
      long long v50 = (char *)v94.i64[1];
      int64x2_t v51 = v94;
      goto LABEL_44;
    }
    uint64_t v54 = v29;
    if ((unint64_t)v29 >= *((void *)&v29 + 1))
    {
      if (*((void *)&v29 + 1) == v94.i64[1]) {
        unint64_t v59 = 1;
      }
      else {
        unint64_t v59 = (*((void *)&v29 + 1) - v94.i64[1]) >> 2;
      }
      if (v59 >> 61) {
        std::__throw_bad_array_new_length[abi:fe180100]();
      }
      uint64_t v60 = (char *)operator new(8 * v59);
      unint64_t v61 = (v59 + 3) >> 2;
      long long v50 = &v60[8 * v61];
      unint64_t v62 = v50;
      uint64_t v63 = v54 - v94.i64[1];
      if (v54 != v94.i64[1])
      {
        unint64_t v62 = &v50[v63 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v64 = v63 - 8;
        unint64_t v65 = &v60[8 * v61];
        uint64_t v66 = (uint64_t *)v94.i64[1];
        if (v64 > 0x37)
        {
          uint64_t v67 = 8 * v61;
          unint64_t v65 = &v60[8 * v61];
          uint64_t v66 = (uint64_t *)v94.i64[1];
          if ((unint64_t)&v65[-v94.i64[1]] >= 0x20)
          {
            uint64_t v68 = (v64 >> 3) + 1;
            uint64_t v69 = 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v65 = &v50[v69];
            uint64_t v70 = (long long *)(v94.i64[1] + 16);
            unint64_t v71 = &v60[v67 + 16];
            uint64_t v72 = v68 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v73 = *v70;
              *((_OWORD *)v71 - 1) = *(v70 - 1);
              *(_OWORD *)unint64_t v71 = v73;
              v70 += 2;
              v71 += 32;
              v72 -= 4;
            }
            while (v72);
            if (v68 == (v68 & 0x3FFFFFFFFFFFFFFCLL))
            {
              v51.i64[0] = (uint64_t)v60;
              v51.i64[1] = (uint64_t)v50;
              *(void *)&long long v29 = v62;
              *((void *)&v29 + 1) = &v60[8 * v59];
LABEL_69:
              long long v92 = v29;
              int64x2_t v95 = v51;
              operator delete(v53);
              long long v29 = v92;
              int64x2_t v51 = v95;
              long long v50 = (char *)v95.i64[1];
              goto LABEL_44;
            }
            uint64_t v66 = (uint64_t *)(v94.i64[1] + v69);
          }
        }
        do
        {
          uint64_t v74 = *v66++;
          *(void *)unint64_t v65 = v74;
          v65 += 8;
        }
        while (v65 != v62);
      }
      v51.i64[0] = (uint64_t)v60;
      v51.i64[1] = (uint64_t)v50;
      *(void *)&long long v29 = v62;
      *((void *)&v29 + 1) = &v60[8 * v59];
      if (!v94.i64[1]) {
        goto LABEL_44;
      }
      goto LABEL_69;
    }
    uint64_t v55 = (uint64_t)(*((void *)&v29 + 1) - v29) >> 3;
    if (v55 >= -1) {
      uint64_t v56 = v55 + 1;
    }
    else {
      uint64_t v56 = v55 + 2;
    }
    uint64_t v57 = v56 >> 1;
    uint64_t v58 = v29 + 8 * (v56 >> 1);
    long long v50 = (char *)(v58 - (v29 - v94.i64[1]));
    if ((void)v29 == v94.i64[1])
    {
      uint64_t v54 = v94.i64[1];
    }
    else
    {
      uint64_t v93 = *((void *)&v29 + 1);
      memmove((void *)(v58 - (v29 - v94.i64[1])), (const void *)v94.i64[1], v29 - v94.i64[1]);
      *((void *)&v29 + 1) = v93;
    }
    v51.i64[0] = v94.i64[0];
    v51.i64[1] = (uint64_t)v50;
    *(void *)&long long v29 = v54 + 8 * v57;
LABEL_44:
    uint64_t v52 = *(void *)(v18 - 8);
    v18 -= 8;
    *((void *)v50 - 1) = v52;
    v51.i64[1] -= 8;
    int64x2_t v94 = v51;
  }
  unint64_t v75 = *(char **)a1;
  *(int64x2_t *)a1 = v94;
  *(_OWORD *)(a1 + 16) = v29;
  if (v75)
  {
    operator delete(v75);
  }
}

void sub_18DB75A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::pop_back(void *a1)
{
  uint64_t v1 = a1[5];
  if (v1)
  {
    unint64_t v3 = v1 + a1[4] - 1;
    uint64_t v4 = *(void *)(a1[1] + 8 * (v3 / 0x2A));
    unint64_t v5 = v3 % 0x2A;
    unint64_t v6 = *(void **)(v4 + 96 * (v3 % 0x2A) + 56);
    if (v6)
    {
      *(void *)(v4 + 96 * v5 + 64) = v6;
      operator delete(v6);
    }
    uint64_t v7 = *(void **)(v4 + 96 * v5 + 32);
    if (v7)
    {
      *(void *)(v4 + 96 * v5 + 40) = v7;
      operator delete(v7);
    }
    uint64_t v9 = a1[1];
    uint64_t v8 = a1[2];
    if (v8 == v9) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = 42 * ((v8 - v9) >> 3) - 1;
    }
    uint64_t v12 = a1[4];
    uint64_t v11 = a1[5];
    a1[5] = v11 - 1;
    if ((unint64_t)(v10 - (v11 + v12) + 1) >= 0x54)
    {
      operator delete(*(void **)(v8 - 8));
      a1[2] -= 8;
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t std::deque<std::__state<char>>::~deque[abi:fe180100](uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  unint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v4 = (void *)(a1 + 40);
    unint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    unint64_t v6 = &v2[v5 / 0x2A];
    uint64_t v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    unint64_t v8 = (unint64_t)v2[(*(void *)(a1 + 40) + v5) / 0x2A] + 96 * ((*(void *)(a1 + 40) + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        uint64_t v9 = (void *)*((void *)v7 + 7);
        if (v9)
        {
          *((void *)v7 + 8) = v9;
          operator delete(v9);
        }
        uint64_t v10 = (void *)*((void *)v7 + 4);
        if (v10)
        {
          *((void *)v7 + 5) = v10;
          operator delete(v10);
        }
        v7 += 96;
        if (v7 - (unsigned char *)*v6 == 4032)
        {
          uint64_t v11 = (char *)v6[1];
          ++v6;
          uint64_t v7 = v11;
        }
      }
      while (v7 != (char *)v8);
      unint64_t v2 = *(void ***)(a1 + 8);
      unint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  void *v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 21;
    goto LABEL_19;
  }
  if (v13 == 2)
  {
    uint64_t v14 = 42;
LABEL_19:
    *(void *)(a1 + 32) = v14;
  }
  if (v2 != v3)
  {
    do
    {
      unint64_t v15 = *v2++;
      operator delete(v15);
    }
    while (v2 != v3);
    uint64_t v17 = *(void *)(a1 + 8);
    uint64_t v16 = *(void *)(a1 + 16);
    if (v16 != v17) {
      *(void *)(a1 + 16) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(void **a1, void *a2)
{
  uint64_t v4 = (char *)a1[1];
  if (v4 != *a1)
  {
    unint64_t v5 = (char *)a1[1];
    goto LABEL_25;
  }
  uint64_t v7 = a1[2];
  unint64_t v6 = a1[3];
  if (v7 >= v6)
  {
    uint64_t v13 = v6 - v4;
    BOOL v12 = v13 == 0;
    unint64_t v14 = v13 >> 2;
    if (v12) {
      unint64_t v14 = 1;
    }
    if (v14 >> 61) {
      std::__throw_bad_array_new_length[abi:fe180100]();
    }
    unint64_t v15 = (v14 + 3) >> 2;
    uint64_t v16 = 8 * v14;
    uint64_t v17 = (char *)operator new(8 * v14);
    unint64_t v5 = &v17[8 * v15];
    uint64_t v18 = &v17[v16];
    uint64_t v19 = v5;
    uint64_t v20 = v7 - v4;
    if (v7 != v4)
    {
      uint64_t v19 = &v5[v20 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v21 = v20 - 8;
      uint64_t v22 = &v17[8 * v15];
      uint64_t v23 = v4;
      if (v21 > 0x37)
      {
        unint64_t v24 = &v17[8 * v15];
        uint64_t v22 = v24;
        uint64_t v23 = v4;
        if ((unint64_t)(v24 - v4) >= 0x20)
        {
          uint64_t v25 = (v21 >> 3) + 1;
          uint64_t v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v22 = &v5[v26];
          int64x2_t v27 = (long long *)(v4 + 16);
          uint64_t v28 = v24 + 16;
          uint64_t v29 = v25 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v30 = *v27;
            *(v28 - 1) = *(v27 - 1);
            _OWORD *v28 = v30;
            v27 += 2;
            v28 += 2;
            v29 -= 4;
          }
          while (v29);
          if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL))
          {
            *a1 = v17;
            a1[1] = v5;
            a1[2] = v19;
            a1[3] = v18;
            goto LABEL_24;
          }
          uint64_t v23 = &v4[v26];
        }
      }
      do
      {
        uint64_t v31 = *(void *)v23;
        v23 += 8;
        *(void *)uint64_t v22 = v31;
        v22 += 8;
      }
      while (v22 != v19);
    }
    *a1 = v17;
    a1[1] = v5;
    a1[2] = v19;
    a1[3] = v18;
    if (!v4) {
      goto LABEL_25;
    }
LABEL_24:
    operator delete(v4);
    unint64_t v5 = (char *)a1[1];
    goto LABEL_25;
  }
  uint64_t v8 = (v6 - v7) >> 3;
  if (v8 >= -1) {
    uint64_t v9 = v8 + 1;
  }
  else {
    uint64_t v9 = v8 + 2;
  }
  uint64_t v10 = v9 >> 1;
  uint64_t v11 = &v7[8 * (v9 >> 1)];
  unint64_t v5 = &v11[-(v7 - v4)];
  if (v7 != v4)
  {
    memmove(&v11[-(v7 - v4)], v4, v7 - v4);
    uint64_t v4 = (char *)a1[2];
  }
  a1[1] = v5;
  a1[2] = &v4[8 * v10];
LABEL_25:
  *((void *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(char **a1, void *a2)
{
  uint64_t v4 = a1[2];
  if (v4 != a1[3]) {
    goto LABEL_23;
  }
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  if (v5 > *a1)
  {
    uint64_t v7 = (v5 - *a1) >> 3;
    if (v7 >= -1) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = v7 + 2;
    }
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = -v9;
    uint64_t v11 = &v5[-8 * v9];
    int64_t v12 = v4 - v5;
    if (v4 != v5)
    {
      memmove(&v5[-8 * v9], a1[1], v4 - v5);
      uint64_t v4 = a1[1];
    }
    uint64_t v13 = &v4[8 * v10];
    uint64_t v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_23;
  }
  unint64_t v14 = (v4 - v6) >> 2;
  if (v4 == v6) {
    unint64_t v14 = 1;
  }
  if (v14 >> 61) {
    std::__throw_bad_array_new_length[abi:fe180100]();
  }
  unint64_t v15 = v14 >> 2;
  uint64_t v16 = 8 * v14;
  uint64_t v17 = (char *)operator new(8 * v14);
  uint64_t v18 = &v17[8 * v15];
  int64_t v20 = v4 - v5;
  BOOL v19 = v4 == v5;
  uint64_t v4 = v18;
  if (!v19)
  {
    uint64_t v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      uint64_t v22 = &v17[8 * v15];
      goto LABEL_20;
    }
    uint64_t v23 = &v17[8 * v15];
    uint64_t v22 = v23;
    if ((unint64_t)(v23 - v5) < 0x20)
    {
      do
      {
LABEL_20:
        uint64_t v30 = *(void *)v5;
        v5 += 8;
        *(void *)uint64_t v22 = v30;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_21;
    }
    uint64_t v24 = (v21 >> 3) + 1;
    uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v22 = &v18[v25];
    uint64_t v26 = (long long *)(v5 + 16);
    int64x2_t v27 = v23 + 16;
    uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v29 = *v26;
      *(v27 - 1) = *(v26 - 1);
      *int64x2_t v27 = v29;
      v26 += 2;
      v27 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
    {
      v5 += v25;
      goto LABEL_20;
    }
  }
LABEL_21:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v6)
  {
    operator delete(v6);
    uint64_t v4 = a1[2];
  }
LABEL_23:
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>()
{
}

void sub_18DB76688(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)17>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FA3BA0](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_18DB76730(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  unint64_t v6 = a2;
  do
  {
    uint64_t v7 = (unsigned __int8 *)v6;
    unint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(a1, v6, a3);
    if (v7 == (unsigned __int8 *)v6)
    {
      std::vector<std::csub_match>::pointer end = a1->__end_;
      unsigned int marked_count = a1->__marked_count_;
      uint64_t v10 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>((uint64_t)a1, v7, (unsigned __int8 *)a3);
      if (v7 == (unsigned __int8 *)v10) {
        unint64_t v6 = (char *)v7;
      }
      else {
        unint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v10, a3, end, marked_count + 1, a1->__marked_count_ + 1);
      }
    }
  }
  while (v7 != (unsigned __int8 *)v6);
  if (v7 == (unsigned __int8 *)a2) {
    operator new();
  }
  if (v7 != (unsigned __int8 *)a3 && *v7 == 124)
  {
    uint64_t v11 = v7 + 1;
    int64_t v12 = (char *)(v7 + 1);
    while (1)
    {
      uint64_t v13 = (unsigned __int8 *)v12;
      int64_t v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(a1, v12, a3);
      if (v13 == (unsigned __int8 *)v12)
      {
        unint64_t v14 = a1->__end_;
        unsigned int v15 = a1->__marked_count_;
        uint64_t v16 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>((uint64_t)a1, v13, (unsigned __int8 *)a3);
        if (v13 == (unsigned __int8 *)v16) {
          int64_t v12 = (char *)v13;
        }
        else {
          int64_t v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v16, a3, v14, v15 + 1, a1->__marked_count_ + 1);
        }
      }
      if (v13 == (unsigned __int8 *)v12)
      {
        if (v13 != v11) {
          operator new();
        }
        operator new();
      }
    }
  }
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unint64_t v3 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v4 = a3;
  if (*a2 == 94) {
    operator new();
  }
  if (a2 != a3)
  {
    while (v3 != v4)
    {
      unint64_t v6 = v3;
      std::vector<std::csub_match>::pointer end = a1->__end_;
      unsigned int marked_count = a1->__marked_count_;
      uint64_t v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>((uint64_t)a1, v6, v4);
      if (v6 != v9)
      {
        unint64_t v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v9, v4, end, marked_count + 1, a1->__marked_count_ + 1);
        if (v6 != v3) {
          continue;
        }
      }
      if (v6 + 1 == v4 && *v6 == 36) {
        operator new();
      }
      std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)15>();
    }
  }
  return v4;
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3)
{
  unint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v6 == a2) {
    goto LABEL_12;
  }
  do
  {
    uint64_t v7 = v6;
    unint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v6, a3);
  }
  while (v7 != v6);
  if (v7 == a2) {
    goto LABEL_12;
  }
  if (v7 == a3) {
    return a3;
  }
  if (*v7 == 124)
  {
    uint64_t v8 = v7 + 1;
    uint64_t v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v7 + 1, a3);
    if (v7 + 1 != v9)
    {
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v9, a3);
      }
      while (v10 != v9);
      if (v10 != v8) {
        operator new();
      }
    }
LABEL_12:
    std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)15>();
  }
  return v7;
}

void std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)14>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FA3BA0](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_18DB76DE0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 80) = *(void *)(result + v3);
  return result;
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1EDC837B0;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  JUMPOUT(0x192FA4080);
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
  JUMPOUT(0x192FA4080);
}

{
  std::__node<char> *first;

  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1EDC837B0;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  JUMPOUT(0x192FA4080);
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1EDC837B0;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1EDC837B0;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3)
{
  std::vector<std::csub_match>::pointer end = this->__end_;
  unsigned int marked_count = this->__marked_count_;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case '$':
      case '(':
      case '*':
      case '+':
      case '.':
      case '?':
      case '[':
      case '\\':
      case '^':
      case '{':
      case '|':
        goto LABEL_3;
      case ')':
        if (!this->__open_count_) {
          goto LABEL_8;
        }
LABEL_3:
        uint64_t v8 = a2 + 1;
        if (a2 + 1 == a3)
        {
LABEL_15:
          int v9 = *a2;
        }
        else
        {
          int v9 = *a2;
          if (v9 == 92)
          {
            std::basic_regex<char>::value_type v10 = *v8;
            switch(*v8)
            {
              case '$':
              case '(':
              case ')':
              case '*':
              case '+':
              case '.':
              case '?':
              case '[':
              case '\\':
              case '^':
              case '{':
              case '|':
              case '}':
                std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v10);
                uint64_t v11 = a2 + 2;
                goto LABEL_34;
              default:
                if ((this->__flags_ & 0x1F0) == 0x40)
                {
                  uint64_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(this, v8, a3, 0);
                }
                else
                {
                  BOOL v12 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(this, v10);
                  uint64_t v13 = 2;
                  if (!v12) {
                    uint64_t v13 = 0;
                  }
                  uint64_t v11 = &a2[v13];
                }
                if (v11 == a2) {
                  goto LABEL_15;
                }
                goto LABEL_19;
            }
          }
        }
        if (v9 == 46) {
          operator new();
        }
        break;
      default:
LABEL_8:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, *a2);
        uint64_t v11 = a2 + 1;
        goto LABEL_34;
    }
  }
  uint64_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
LABEL_19:
  if (v11 == a2 && v11 != a3)
  {
    int v14 = *a2;
    if (v14 == 36) {
      operator new();
    }
    if (v14 != 40)
    {
      if (v14 == 94) {
        operator new();
      }
      return a2;
    }
    if ((this->__flags_ & 2) == 0) {
      operator new();
    }
    ++this->__open_count_;
    unsigned int v15 = (std::basic_regex<char>::value_type *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(this, a2 + 1, a3);
    if (v15 == a3 || *v15 != 41) {
      std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)6>();
    }
    if ((this->__flags_ & 2) == 0) {
      operator new();
    }
    --this->__open_count_;
    uint64_t v11 = v15 + 1;
  }
  if (v11 == a2) {
    return a2;
  }
LABEL_34:
  size_t v16 = this->__marked_count_ + 1;
  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)this, v11, a3, end, marked_count + 1, v16);
}

void std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)15>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FA3BA0](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_18DB77968(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)6>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FA3BA0](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_18DB779C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  if (a2 == a3) {
    return a2;
  }
  int v6 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v7 = *a2;
  if (v7 > 62)
  {
    if (v7 == 63)
    {
      uint64_t v8 = a2 + 1;
      if (v6) {
        BOOL v18 = 1;
      }
      else {
        BOOL v18 = v8 == a3;
      }
      if (!v18 && *v8 == 63)
      {
        uint64_t v8 = a2 + 2;
        __mexp_std::vector<std::pair<unsigned long, const char *>>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
        size_t v9 = 0;
        size_t v16 = 1;
        goto LABEL_42;
      }
      __mexp_std::vector<std::pair<unsigned long, const char *>>::pointer begin = __mexp_begin;
      __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
      size_t v9 = 0;
      size_t v16 = 1;
      goto LABEL_72;
    }
    uint64_t v8 = a2;
    if (v7 != 123) {
      return v8;
    }
    std::basic_regex<char>::value_type v10 = a2 + 1;
    if (a2 + 1 != a3)
    {
      int v11 = *v10;
      if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38)
      {
        int v12 = v11 - 48;
        uint64_t v13 = a2 + 2;
        if (a2 + 2 == a3)
        {
LABEL_20:
          uint64_t v13 = a3;
        }
        else
        {
          while (1)
          {
            int v14 = *v13;
            if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38) {
              break;
            }
            if (v12 >= 214748364) {
              goto LABEL_75;
            }
            int v12 = v14 + 10 * v12 - 48;
            if (++v13 == a3) {
              goto LABEL_20;
            }
          }
        }
        if (v13 != v10)
        {
          if (v13 != a3)
          {
            int v15 = *v13;
            if (v15 != 44)
            {
              if (v15 == 125)
              {
                uint64_t v8 = v13 + 1;
                if (!v6 && v8 != a3 && *v8 == 63)
                {
                  size_t v9 = v12;
                  uint64_t v8 = v13 + 2;
                  __mexp_std::vector<std::pair<unsigned long, const char *>>::pointer begin = __mexp_begin;
                  __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
                  size_t v16 = v12;
LABEL_42:
                  BOOL v19 = 0;
LABEL_73:
                  std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v9, v16, a4, __mexp_begin, __mexp_end, v19);
                  return v8;
                }
                size_t v9 = v12;
                __mexp_std::vector<std::pair<unsigned long, const char *>>::pointer begin = __mexp_begin;
                __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
                size_t v16 = v12;
LABEL_72:
                BOOL v19 = 1;
                goto LABEL_73;
              }
              goto LABEL_75;
            }
            int64_t v20 = v13 + 1;
            if (v13 + 1 == a3) {
              goto LABEL_75;
            }
            int v21 = *v20;
            if (v21 == 125)
            {
              uint64_t v8 = v13 + 2;
              if (!v6 && v8 != a3 && *v8 == 63)
              {
                size_t v9 = v12;
                uint64_t v8 = v13 + 3;
                __mexp_std::vector<std::pair<unsigned long, const char *>>::pointer begin = __mexp_begin;
                __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
                goto LABEL_35;
              }
              size_t v9 = v12;
              __mexp_std::vector<std::pair<unsigned long, const char *>>::pointer begin = __mexp_begin;
              __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
LABEL_45:
              size_t v16 = -1;
              goto LABEL_72;
            }
            if ((v21 & 0xF8) == 0x30 || (v21 & 0xFE) == 0x38)
            {
              int v22 = v21 - 48;
              uint64_t v23 = v13 + 2;
              if (v23 == a3)
              {
LABEL_61:
                uint64_t v23 = a3;
              }
              else
              {
                while (1)
                {
                  int v24 = *v23;
                  if ((v24 & 0xF8) != 0x30 && (v24 & 0xFE) != 0x38) {
                    break;
                  }
                  if (v22 >= 214748364) {
                    goto LABEL_75;
                  }
                  int v22 = v24 + 10 * v22 - 48;
                  if (++v23 == a3) {
                    goto LABEL_61;
                  }
                }
              }
              if (v23 != v20 && v23 != a3 && *v23 == 125)
              {
                if (v22 >= v12)
                {
                  uint64_t v8 = v23 + 1;
                  if (!v6 && v8 != a3 && *v8 == 63)
                  {
                    size_t v9 = v12;
                    size_t v16 = v22;
                    uint64_t v8 = v23 + 2;
                    __mexp_std::vector<std::pair<unsigned long, const char *>>::pointer begin = __mexp_begin;
                    __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
                    goto LABEL_42;
                  }
                  size_t v9 = v12;
                  size_t v16 = v22;
                  __mexp_std::vector<std::pair<unsigned long, const char *>>::pointer begin = __mexp_begin;
                  __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
                  goto LABEL_72;
                }
                goto LABEL_75;
              }
            }
          }
          std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)7>();
        }
      }
    }
LABEL_75:
    std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)8>();
  }
  if (v7 == 42)
  {
    uint64_t v8 = a2 + 1;
    if (v6) {
      BOOL v17 = 1;
    }
    else {
      BOOL v17 = v8 == a3;
    }
    if (!v17 && *v8 == 63)
    {
      uint64_t v8 = a2 + 2;
      __mexp_std::vector<std::pair<unsigned long, const char *>>::pointer begin = __mexp_begin;
      __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
      size_t v9 = 0;
      goto LABEL_35;
    }
    __mexp_std::vector<std::pair<unsigned long, const char *>>::pointer begin = __mexp_begin;
    __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
    size_t v9 = 0;
    goto LABEL_45;
  }
  uint64_t v8 = a2;
  if (v7 == 43)
  {
    uint64_t v8 = a2 + 1;
    if (!v6 && v8 != a3 && *v8 == 63)
    {
      uint64_t v8 = a2 + 2;
      __mexp_std::vector<std::pair<unsigned long, const char *>>::pointer begin = __mexp_begin;
      __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
      size_t v9 = 1;
LABEL_35:
      size_t v16 = -1;
      goto LABEL_42;
    }
    __mexp_std::vector<std::pair<unsigned long, const char *>>::pointer begin = __mexp_begin;
    __mexp_std::vector<std::csub_match>::pointer end = __mexp_end;
    size_t v9 = 1;
    goto LABEL_45;
  }
  return v8;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
}

void sub_18DB77E98(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)8>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FA3BA0](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_18DB77F14(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)7>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FA3BA0](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_18DB77F6C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
}

uint64_t std::__loop<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  if (*(unsigned __int8 *)(result + 52) == a2)
  {
    *(void *)(a3 + 80) = *(void *)(result + 16);
    return result;
  }
  *(void *)(a3 + 80) = *(void *)(result + 8);
  unint64_t v3 = *(unsigned int *)(result + 40);
  uint64_t v4 = *(void *)(a3 + 56);
  if (v3 >= (*(void *)(a3 + 64) - v4) >> 4) {
    goto LABEL_19;
  }
  *(void *)(v4 + 16 * v3 + 8) = *(void *)(a3 + 16);
  int v5 = *(_DWORD *)(result + 44);
  int v6 = *(_DWORD *)(result + 48);
  if (v5 != v6)
  {
    uint64_t v7 = (v6 - 1);
    unint64_t v8 = (v5 - 1);
    uint64_t v9 = *(void *)(a3 + 32);
    uint64_t v10 = *(void *)(a3 + 24);
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a3 + 40) - v9) >> 3);
    if (v11 <= v8) {
      unint64_t v11 = v8;
    }
    unint64_t v12 = v11 - v8;
    if (~v8 + v7 < v11 - v8) {
      unint64_t v12 = ~v8 + v7;
    }
    unint64_t v13 = v12 + 1;
    if (v12 + 1 >= 3)
    {
      uint64_t v14 = v13 & 1;
      if ((v13 & 1) == 0) {
        uint64_t v14 = 2;
      }
      unint64_t v15 = v13 - v14;
      uint64_t v16 = ~v12 + v14;
      uint64_t v17 = v9 + 24 * v8 + 24;
      do
      {
        *(void *)(v17 - 24) = v10;
        *(void *)(v17 - 16) = v10;
        *(void *)uint64_t v17 = v10;
        *(void *)(v17 + 8) = v10;
        *(unsigned char *)(v17 - 8) = 0;
        *(unsigned char *)(v17 + 16) = 0;
        v17 += 48;
        v16 += 2;
      }
      while (v16);
      v8 += v15;
    }
    unint64_t v18 = v11 - v8;
    BOOL v19 = (unsigned char *)(v9 + 24 * v8 + 16);
    uint64_t v20 = v7 - v8;
    while (v18)
    {
      *((void *)v19 - 2) = v10;
      *((void *)v19 - 1) = v10;
      --v18;
      unsigned char *v19 = 0;
      v19 += 24;
      if (!--v20) {
        return result;
      }
    }
LABEL_19:
    __break(1u);
  }
  return result;
}

uint64_t std::__loop<char>::__exec(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(result + 40);
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = (*(void *)(a2 + 64) - v3) >> 4;
  if (*(_DWORD *)a2 != -991)
  {
    if (v4 > v2)
    {
      *(void *)(v3 + 16 * v2) = 0;
      if (!*(void *)(result + 32))
      {
        *(_DWORD *)a2 = -994;
        goto LABEL_54;
      }
      if (*(void *)(result + 24))
      {
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 80) = *(void *)(result + 8);
        *(void *)(v3 + 16 * v2 + 8) = *(void *)(a2 + 16);
        int v28 = *(_DWORD *)(result + 44);
        int v29 = *(_DWORD *)(result + 48);
        if (v28 != v29)
        {
          uint64_t v30 = (v29 - 1);
          unint64_t v31 = (v28 - 1);
          uint64_t v32 = *(void *)(a2 + 32);
          uint64_t v33 = *(void *)(a2 + 24);
          unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v32) >> 3);
          if (v34 <= v31) {
            unint64_t v34 = v31;
          }
          unint64_t v35 = v34 - v31;
          if (~v31 + v30 < v34 - v31) {
            unint64_t v35 = ~v31 + v30;
          }
          unint64_t v36 = v35 + 1;
          if (v35 + 1 >= 3)
          {
            uint64_t v37 = v36 & 1;
            if ((v36 & 1) == 0) {
              uint64_t v37 = 2;
            }
            unint64_t v38 = v36 - v37;
            uint64_t v39 = ~v35 + v37;
            uint64_t v40 = v32 + 24 * v31 + 24;
            do
            {
              *(void *)(v40 - 24) = v33;
              *(void *)(v40 - 16) = v33;
              *(void *)uint64_t v40 = v33;
              *(void *)(v40 + 8) = v33;
              *(unsigned char *)(v40 - 8) = 0;
              *(unsigned char *)(v40 + 16) = 0;
              v40 += 48;
              v39 += 2;
            }
            while (v39);
            v31 += v38;
          }
          unint64_t v41 = v34 - v31;
          uint64_t v42 = (unsigned char *)(v32 + 24 * v31 + 16);
          uint64_t v43 = v30 - v31;
          while (v41)
          {
            *((void *)v42 - 2) = v33;
            *((void *)v42 - 1) = v33;
            --v41;
            unsigned char *v42 = 0;
            v42 += 24;
            if (!--v43) {
              return result;
            }
          }
          goto LABEL_55;
        }
        return result;
      }
LABEL_52:
      *(_DWORD *)a2 = -992;
      return result;
    }
LABEL_55:
    __break(1u);
    return result;
  }
  if (v4 <= v2) {
    goto LABEL_55;
  }
  unint64_t v5 = *(void *)(v3 + 16 * v2) + 1;
  *(void *)(v3 + 16 * v2) = v5;
  unint64_t v6 = *(void *)(result + 24);
  unint64_t v7 = *(void *)(result + 32);
  BOOL v8 = v5 < v7;
  if (v5 < v7 && v5 >= v6) {
    BOOL v8 = v5 < v7 && *(void *)(v3 + 16 * v2 + 8) != *(void *)(a2 + 16);
  }
  if (v8 && v5 >= v6) {
    goto LABEL_52;
  }
  *(_DWORD *)a2 = -994;
  if (!v8)
  {
LABEL_54:
    *(void *)(a2 + 80) = *(void *)(result + 16);
    return result;
  }
  *(void *)(a2 + 80) = *(void *)(result + 8);
  *(void *)(v3 + 16 * v2 + 8) = *(void *)(a2 + 16);
  int v12 = *(_DWORD *)(result + 44);
  int v13 = *(_DWORD *)(result + 48);
  if (v12 != v13)
  {
    uint64_t v14 = (v13 - 1);
    unint64_t v15 = (v12 - 1);
    uint64_t v16 = *(void *)(a2 + 32);
    uint64_t v17 = *(void *)(a2 + 24);
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v16) >> 3);
    if (v18 <= v15) {
      unint64_t v18 = v15;
    }
    unint64_t v19 = v18 - v15;
    if (~v15 + v14 < v18 - v15) {
      unint64_t v19 = ~v15 + v14;
    }
    unint64_t v20 = v19 + 1;
    if (v19 + 1 >= 3)
    {
      uint64_t v21 = v20 & 1;
      if ((v20 & 1) == 0) {
        uint64_t v21 = 2;
      }
      unint64_t v22 = v20 - v21;
      uint64_t v23 = ~v19 + v21;
      uint64_t v24 = v16 + 24 * v15 + 24;
      do
      {
        *(void *)(v24 - 24) = v17;
        *(void *)(v24 - 16) = v17;
        *(void *)uint64_t v24 = v17;
        *(void *)(v24 + 8) = v17;
        *(unsigned char *)(v24 - 8) = 0;
        *(unsigned char *)(v24 + 16) = 0;
        v24 += 48;
        v23 += 2;
      }
      while (v23);
      v15 += v22;
    }
    unint64_t v25 = v18 - v15;
    uint64_t v26 = (unsigned char *)(v16 + 24 * v15 + 16);
    uint64_t v27 = v14 - v15;
    while (v25)
    {
      *((void *)v26 - 2) = v17;
      *((void *)v26 - 1) = v17;
      --v25;
      *uint64_t v26 = 0;
      v26 += 24;
      if (!--v27) {
        return result;
      }
    }
    goto LABEL_55;
  }
  return result;
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1EDC837B0;
  unint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  JUMPOUT(0x192FA4080);
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1EDC837B0;
  unint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  unint64_t v2 = (*(_DWORD *)(result + 16) - 1);
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) <= v2)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = v3 + 24 * v2;
    *(void *)(v4 + 8) = *(void *)(a2 + 16);
    *(unsigned char *)(v4 + 16) = 1;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x192FA4080);
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  unint64_t v2 = (*(_DWORD *)(result + 16) - 1);
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) <= v2)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 24 * v2) = *(void *)(a2 + 16);
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x192FA4080);
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((int v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  return result;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x192FA4080);
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 92))
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
LABEL_11:
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 80) = *(void *)(result + 8);
    return result;
  }
  if (*(void *)(a2 + 16) == *(void *)(a2 + 8) && (*(unsigned char *)(a2 + 88) & 1) == 0) {
    goto LABEL_11;
  }
LABEL_12:
  *(_DWORD *)a2 = -993;
  *(void *)(a2 + 80) = 0;
  return result;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }
  JUMPOUT(0x192FA4080);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 != a3) {
      operator new();
    }
    std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)5>();
  }
  return a2;
}

void sub_18DB799FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)5>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FA3BA0](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_18DB79C00(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:fe180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(void *)(a1 + 8) = a3;
  unint64_t v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 168) = a4;
  *(unsigned char *)(a1 + 169) = a5;
  *(unsigned char *)(a1 + 170) = a6;
  std::locale::locale(&v16, v11);
  std::locale::name(&v17, &v16);
  std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v17.__r_.__value_.__l.__size_;
  }
  if (size == 1)
  {
    int v13 = (std::string *)v17.__r_.__value_.__r.__words[0];
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v13 = &v17;
    }
    BOOL v14 = v13->__r_.__value_.__s.__data_[0] != 67;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_9;
    }
  }
  else
  {
    BOOL v14 = 1;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
LABEL_9:
    }
      operator delete(v17.__r_.__value_.__l.__data_);
  }
  std::locale::~locale(&v16);
  *(unsigned char *)(a1 + 171) = v14;
  return a1;
}

void sub_18DB79D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  std::vector<std::string>::~vector[abi:fe180100]((void **)(v9 + 136));
  unint64_t v15 = *(void **)(v9 + 112);
  if (v15)
  {
    *(void *)(v9 + 120) = v15;
    operator delete(v15);
  }
  std::vector<std::pair<std::string,std::string>>::~vector[abi:fe180100](v12);
  std::locale v16 = *(void **)(v9 + 64);
  if (v16)
  {
    *(void *)(v9 + 72) = v16;
    operator delete(v16);
  }
  std::string v17 = *v13;
  if (*v13)
  {
    *(void *)(v9 + 48) = v17;
    operator delete(v17);
  }
  std::locale::~locale(v11);
  *(void *)uint64_t v9 = v10;
  uint64_t v18 = *(void *)(v9 + 8);
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:fe180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (!*(unsigned char *)(a1 + 169))
  {
    unint64_t v5 = *(unsigned char **)(a1 + 48);
    unint64_t v12 = *(void *)(a1 + 56);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v5 < v12) {
        goto LABEL_22;
      }
      unint64_t v6 = *(unsigned char **)(a1 + 40);
      unint64_t v13 = v5 - v6;
      uint64_t v14 = v5 - v6 + 1;
      if (v14 >= 0)
      {
        unint64_t v15 = v12 - (void)v6;
        if (2 * v15 > v14) {
          uint64_t v14 = 2 * v15;
        }
        if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v16 = v14;
        }
        if (v16) {
          unint64_t v11 = operator new(v16);
        }
        else {
          unint64_t v11 = 0;
        }
        uint64_t v18 = (char *)v11 + v13;
        unint64_t v19 = (char *)v11 + v16;
        *((unsigned char *)v11 + v13) = v2;
        uint64_t v17 = (uint64_t)v11 + v13 + 1;
        if (v5 == v6) {
          goto LABEL_49;
        }
        if (v13 >= 8 && (unint64_t)(v6 - (unsigned char *)v11) >= 0x20)
        {
          if (v13 >= 0x20)
          {
            unint64_t v25 = v13 & 0xFFFFFFFFFFFFFFE0;
            unint64_t v35 = (long long *)(v5 - 16);
            unint64_t v36 = (char *)v11 + v5 - 16 - v6;
            unint64_t v37 = v13 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v38 = *v35;
              *(v36 - 1) = *(v35 - 1);
              _OWORD *v36 = v38;
              v36 -= 2;
              v35 -= 2;
              v37 -= 32;
            }
            while (v37);
            if (v13 == v25) {
              goto LABEL_73;
            }
            if ((v13 & 0x18) == 0)
            {
              v18 -= v25;
              v5 -= v25;
              goto LABEL_80;
            }
          }
          else
          {
            unint64_t v25 = 0;
          }
          unint64_t v39 = v25 - (v13 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v40 = &v5[-v25 - 8];
          unint64_t v41 = (char *)(v40 - v6);
          do
          {
            uint64_t v42 = *(void *)v40;
            v40 -= 8;
            *(void *)&v41[(void)v11] = v42;
            v41 -= 8;
            v39 += 8;
          }
          while (v39);
          if (v13 == (v13 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_73;
          }
          v18 -= v13 & 0xFFFFFFFFFFFFFFF8;
          v5 -= v13 & 0xFFFFFFFFFFFFFFF8;
        }
LABEL_80:
        std::string::size_type v53 = v18 - 1;
        do
        {
          char v54 = *--v5;
          *v53-- = v54;
        }
        while (v5 != v6);
        goto LABEL_86;
      }
LABEL_90:
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    if ((unint64_t)v5 < v12) {
      goto LABEL_22;
    }
    unint64_t v6 = *(unsigned char **)(a1 + 40);
    unint64_t v21 = v5 - v6;
    uint64_t v22 = v5 - v6 + 1;
    if (v22 < 0) {
      goto LABEL_90;
    }
    unint64_t v23 = v12 - (void)v6;
    if (2 * v23 > v22) {
      uint64_t v22 = 2 * v23;
    }
    if (v23 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v24 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v24 = v22;
    }
    if (v24) {
      unint64_t v11 = operator new(v24);
    }
    else {
      unint64_t v11 = 0;
    }
    uint64_t v18 = (char *)v11 + v21;
    unint64_t v19 = (char *)v11 + v24;
    *((unsigned char *)v11 + v21) = v2;
    uint64_t v17 = (uint64_t)v11 + v21 + 1;
    if (v5 == v6) {
      goto LABEL_49;
    }
    if (v21 >= 8 && (unint64_t)(v6 - (unsigned char *)v11) >= 0x20)
    {
      if (v21 >= 0x20)
      {
        unint64_t v26 = v21 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v43 = (long long *)(v5 - 16);
        unint64_t v44 = (char *)v11 + v5 - 16 - v6;
        unint64_t v45 = v21 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v46 = *v43;
          *(v44 - 1) = *(v43 - 1);
          *unint64_t v44 = v46;
          v44 -= 2;
          v43 -= 2;
          v45 -= 32;
        }
        while (v45);
        if (v21 == v26) {
          goto LABEL_73;
        }
        if ((v21 & 0x18) == 0)
        {
          v18 -= v26;
          v5 -= v26;
          goto LABEL_84;
        }
      }
      else
      {
        unint64_t v26 = 0;
      }
      unint64_t v47 = v26 - (v21 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v48 = &v5[-v26 - 8];
      unint64_t v49 = (char *)(v48 - v6);
      do
      {
        uint64_t v50 = *(void *)v48;
        v48 -= 8;
        *(void *)&v49[(void)v11] = v50;
        v49 -= 8;
        v47 += 8;
      }
      while (v47);
      if (v21 == (v21 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_73;
      }
      v18 -= v21 & 0xFFFFFFFFFFFFFFF8;
      v5 -= v21 & 0xFFFFFFFFFFFFFFF8;
    }
LABEL_84:
    uint64_t v55 = v18 - 1;
    do
    {
      char v56 = *--v5;
      *v55-- = v56;
    }
    while (v5 != v6);
    goto LABEL_86;
  }
  char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  unint64_t v5 = *(unsigned char **)(a1 + 48);
  unint64_t v4 = *(void *)(a1 + 56);
  if ((unint64_t)v5 < v4)
  {
LABEL_22:
    unsigned char *v5 = v2;
    uint64_t v17 = (uint64_t)(v5 + 1);
    goto LABEL_89;
  }
  unint64_t v6 = *(unsigned char **)(a1 + 40);
  unint64_t v7 = v5 - v6;
  uint64_t v8 = v5 - v6 + 1;
  if (v8 < 0) {
    goto LABEL_90;
  }
  unint64_t v9 = v4 - (void)v6;
  if (2 * v9 > v8) {
    uint64_t v8 = 2 * v9;
  }
  if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v10 = v8;
  }
  if (v10) {
    unint64_t v11 = operator new(v10);
  }
  else {
    unint64_t v11 = 0;
  }
  uint64_t v18 = (char *)v11 + v7;
  unint64_t v19 = (char *)v11 + v10;
  *((unsigned char *)v11 + v7) = v2;
  uint64_t v17 = (uint64_t)v11 + v7 + 1;
  if (v5 == v6)
  {
LABEL_49:
    unint64_t v11 = v18;
    goto LABEL_87;
  }
  if (v7 < 8 || (unint64_t)(v6 - (unsigned char *)v11) < 0x20) {
    goto LABEL_75;
  }
  if (v7 < 0x20)
  {
    unint64_t v20 = 0;
    goto LABEL_54;
  }
  unint64_t v20 = v7 & 0xFFFFFFFFFFFFFFE0;
  uint64_t v27 = (long long *)(v5 - 16);
  int v28 = (char *)v11 + v5 - 16 - v6;
  unint64_t v29 = v7 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v30 = *v27;
    *(v28 - 1) = *(v27 - 1);
    _OWORD *v28 = v30;
    v28 -= 2;
    v27 -= 2;
    v29 -= 32;
  }
  while (v29);
  if (v7 == v20) {
    goto LABEL_73;
  }
  if ((v7 & 0x18) != 0)
  {
LABEL_54:
    unint64_t v31 = v20 - (v7 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v32 = &v5[-v20 - 8];
    uint64_t v33 = (char *)(v32 - v6);
    do
    {
      uint64_t v34 = *(void *)v32;
      v32 -= 8;
      *(void *)&v33[(void)v11] = v34;
      v33 -= 8;
      v31 += 8;
    }
    while (v31);
    if (v7 != (v7 & 0xFFFFFFFFFFFFFFF8))
    {
      v18 -= v7 & 0xFFFFFFFFFFFFFFF8;
      v5 -= v7 & 0xFFFFFFFFFFFFFFF8;
      goto LABEL_75;
    }
LABEL_73:
    unint64_t v5 = v6;
    goto LABEL_87;
  }
  v18 -= v20;
  v5 -= v20;
LABEL_75:
  int64x2_t v51 = v18 - 1;
  do
  {
    char v52 = *--v5;
    *v51-- = v52;
  }
  while (v5 != v6);
LABEL_86:
  unint64_t v5 = *(unsigned char **)(a1 + 40);
LABEL_87:
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = v17;
  *(void *)(a1 + 56) = v19;
  if (v5) {
    operator delete(v5);
  }
LABEL_89:
  *(void *)(a1 + 48) = v17;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  unint64_t v5 = a3 - 2;
  unint64_t v6 = a2;
  for (i = a2; ; unint64_t v6 = i)
  {
    int v8 = *i++;
    if (v8 == 46 && *i == 93) {
      break;
    }
    if (a2 == v5) {
      goto LABEL_15;
    }
    --v5;
  }
  if (v6 == a3) {
LABEL_15:
  }
    std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>((uint64_t)&v12, a1, a2, v6);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v12;
  unint64_t v9 = v13;
  *(void *)(a4 + 16) = v13;
  unint64_t v10 = HIBYTE(v9);
  if ((v10 & 0x80u) != 0) {
    unint64_t v10 = *(void *)(a4 + 8);
  }
  if (v10 - 1 >= 2) {
    std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)1>();
  }
  return v6 + 2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, uint64_t a4, uint64_t a5)
{
  if (this == a3) {
    std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)3>();
  }
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case 'D':
      int v7 = *(_DWORD *)(a5 + 164) | 0x400;
      goto LABEL_10;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, (uint64_t *)a4);
    case 'S':
      int v7 = *(_DWORD *)(a5 + 164) | 0x4000;
LABEL_10:
      *(_DWORD *)(a5 + 164) = v7;
      return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      if (!*(unsigned char *)(a5 + 169))
      {
        unint64_t v15 = *(unsigned char **)(a5 + 72);
        unint64_t v14 = *(void *)(a5 + 80);
        if (*(unsigned char *)(a5 + 170))
        {
          if ((unint64_t)v15 >= v14)
          {
            size_t v16 = *(unsigned char **)(a5 + 64);
            unint64_t v17 = v15 - v16;
            uint64_t v18 = v15 - v16 + 1;
            if (v18 < 0) {
              goto LABEL_117;
            }
            unint64_t v19 = v14 - (void)v16;
            if (2 * v19 > v18) {
              uint64_t v18 = 2 * v19;
            }
            if (v19 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v20 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v20 = v18;
            }
            if (v20) {
              unint64_t v21 = operator new(v20);
            }
            else {
              unint64_t v21 = 0;
            }
            unint64_t v37 = (char *)v21 + v17;
            long long v38 = (char *)v21 + v20;
            *((unsigned char *)v21 + v17) = 95;
            uint64_t v28 = (uint64_t)v21 + v17 + 1;
            if (v15 != v16)
            {
              if (v17 < 8 || (unint64_t)(v16 - (unsigned char *)v21) < 0x20) {
                goto LABEL_105;
              }
              if (v17 >= 0x20)
              {
                unint64_t v39 = v17 & 0xFFFFFFFFFFFFFFE0;
                unint64_t v49 = (long long *)(v15 - 16);
                uint64_t v50 = (char *)v21 + v15 - 16 - v16;
                unint64_t v51 = v17 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  long long v52 = *v49;
                  *(v50 - 1) = *(v49 - 1);
                  *uint64_t v50 = v52;
                  v50 -= 2;
                  v49 -= 2;
                  v51 -= 32;
                }
                while (v51);
                if (v17 == v39) {
                  goto LABEL_95;
                }
                if ((v17 & 0x18) == 0)
                {
                  v37 -= v39;
                  v15 -= v39;
LABEL_105:
                  uint64_t v67 = v37 - 1;
                  do
                  {
                    char v68 = *--v15;
                    *v67-- = v68;
                  }
                  while (v15 != v16);
LABEL_111:
                  unint64_t v15 = *(unsigned char **)(a5 + 64);
LABEL_112:
                  *(void *)(a5 + 64) = v21;
                  *(void *)(a5 + 72) = v28;
                  *(void *)(a5 + 80) = v38;
                  if (v15) {
                    operator delete(v15);
                  }
                  goto LABEL_114;
                }
              }
              else
              {
                unint64_t v39 = 0;
              }
              unint64_t v53 = v39 - (v17 & 0xFFFFFFFFFFFFFFF8);
              char v54 = &v15[-v39 - 8];
              uint64_t v55 = (char *)(v54 - v16);
              do
              {
                uint64_t v56 = *(void *)v54;
                v54 -= 8;
                *(void *)&v55[(void)v21] = v56;
                v55 -= 8;
                v53 += 8;
              }
              while (v53);
              if (v17 != (v17 & 0xFFFFFFFFFFFFFFF8))
              {
                v37 -= v17 & 0xFFFFFFFFFFFFFFF8;
                v15 -= v17 & 0xFFFFFFFFFFFFFFF8;
                goto LABEL_105;
              }
LABEL_95:
              unint64_t v15 = v16;
              goto LABEL_112;
            }
LABEL_70:
            unint64_t v21 = v37;
            goto LABEL_112;
          }
LABEL_42:
          *unint64_t v15 = 95;
          uint64_t v28 = (uint64_t)(v15 + 1);
LABEL_114:
          *(void *)(a5 + 72) = v28;
          return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
        }
        if ((unint64_t)v15 < v14) {
          goto LABEL_42;
        }
        size_t v16 = *(unsigned char **)(a5 + 64);
        unint64_t v33 = v15 - v16;
        uint64_t v34 = v15 - v16 + 1;
        if (v34 < 0) {
          goto LABEL_117;
        }
        unint64_t v35 = v14 - (void)v16;
        if (2 * v35 > v34) {
          uint64_t v34 = 2 * v35;
        }
        if (v35 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v36 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v36 = v34;
        }
        if (v36) {
          unint64_t v21 = operator new(v36);
        }
        else {
          unint64_t v21 = 0;
        }
        unint64_t v37 = (char *)v21 + v33;
        long long v38 = (char *)v21 + v36;
        *((unsigned char *)v21 + v33) = 95;
        uint64_t v28 = (uint64_t)v21 + v33 + 1;
        if (v15 == v16) {
          goto LABEL_70;
        }
        if (v33 >= 8 && (unint64_t)(v16 - (unsigned char *)v21) >= 0x20)
        {
          if (v33 >= 0x20)
          {
            unint64_t v40 = v33 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v57 = (long long *)(v15 - 16);
            uint64_t v58 = (char *)v21 + v15 - 16 - v16;
            unint64_t v59 = v33 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v60 = *v57;
              *(v58 - 1) = *(v57 - 1);
              *uint64_t v58 = v60;
              v58 -= 2;
              v57 -= 2;
              v59 -= 32;
            }
            while (v59);
            if (v33 == v40) {
              goto LABEL_95;
            }
            if ((v33 & 0x18) == 0)
            {
              v37 -= v40;
              v15 -= v40;
              goto LABEL_109;
            }
          }
          else
          {
            unint64_t v40 = 0;
          }
          unint64_t v61 = v40 - (v33 & 0xFFFFFFFFFFFFFFF8);
          unint64_t v62 = &v15[-v40 - 8];
          uint64_t v63 = (char *)(v62 - v16);
          do
          {
            uint64_t v64 = *(void *)v62;
            v62 -= 8;
            *(void *)&v63[(void)v21] = v64;
            v63 -= 8;
            v61 += 8;
          }
          while (v61);
          if (v33 == (v33 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_95;
          }
          v37 -= v33 & 0xFFFFFFFFFFFFFFF8;
          v15 -= v33 & 0xFFFFFFFFFFFFFFF8;
        }
LABEL_109:
        uint64_t v69 = v37 - 1;
        do
        {
          char v70 = *--v15;
          *v69-- = v70;
        }
        while (v15 != v16);
        goto LABEL_111;
      }
      char v9 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a5 + 24) + 40))(*(void *)(a5 + 24), 95);
      char v10 = v9;
      long long v12 = *(unsigned char **)(a5 + 72);
      unint64_t v11 = *(void *)(a5 + 80);
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v22 = *(unsigned char **)(a5 + 64);
        unint64_t v23 = v12 - v22;
        uint64_t v24 = v12 - v22 + 1;
        if (v24 >= 0)
        {
          unint64_t v25 = v11 - (void)v22;
          if (2 * v25 > v24) {
            uint64_t v24 = 2 * v25;
          }
          if (v25 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v26 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v26 = v24;
          }
          if (v26) {
            uint64_t v27 = operator new(v26);
          }
          else {
            uint64_t v27 = 0;
          }
          unint64_t v29 = (char *)v27 + v23;
          long long v30 = (char *)v27 + v26;
          *((unsigned char *)v27 + v23) = v10;
          uint64_t v31 = (uint64_t)v27 + v23 + 1;
          if (v12 == v22)
          {
            uint64_t v27 = (char *)v27 + v23;
            goto LABEL_100;
          }
          if (v23 >= 8 && (unint64_t)(v22 - (unsigned char *)v27) >= 0x20)
          {
            if (v23 < 0x20)
            {
              unint64_t v32 = 0;
              goto LABEL_75;
            }
            unint64_t v32 = v23 & 0xFFFFFFFFFFFFFFE0;
            unint64_t v41 = (long long *)(v12 - 16);
            uint64_t v42 = (char *)v27 + v12 - 16 - v22;
            unint64_t v43 = v23 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v44 = *v41;
              *(v42 - 1) = *(v41 - 1);
              _OWORD *v42 = v44;
              v42 -= 2;
              v41 -= 2;
              v43 -= 32;
            }
            while (v43);
            if (v23 == v32) {
              goto LABEL_78;
            }
            if ((v23 & 0x18) != 0)
            {
LABEL_75:
              unint64_t v45 = v32 - (v23 & 0xFFFFFFFFFFFFFFF8);
              long long v46 = &v12[-v32 - 8];
              unint64_t v47 = (char *)(v46 - v22);
              do
              {
                uint64_t v48 = *(void *)v46;
                v46 -= 8;
                *(void *)&v47[(void)v27] = v48;
                v47 -= 8;
                v45 += 8;
              }
              while (v45);
              if (v23 == (v23 & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_78:
                long long v12 = v22;
                goto LABEL_100;
              }
              v29 -= v23 & 0xFFFFFFFFFFFFFFF8;
              v12 -= v23 & 0xFFFFFFFFFFFFFFF8;
              goto LABEL_97;
            }
            v29 -= v32;
            v12 -= v32;
          }
LABEL_97:
          unint64_t v65 = v29 - 1;
          do
          {
            char v66 = *--v12;
            *v65-- = v66;
          }
          while (v12 != v22);
          long long v12 = *(unsigned char **)(a5 + 64);
LABEL_100:
          *(void *)(a5 + 64) = v27;
          *(void *)(a5 + 72) = v31;
          *(void *)(a5 + 80) = v30;
          if (v12) {
            operator delete(v12);
          }
          *(void *)(a5 + 72) = v31;
          return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
        }
LABEL_117:
        std::vector<std::string>::__throw_length_error[abi:fe180100]();
      }
      unsigned char *v12 = v9;
      *(void *)(a5 + 72) = v12 + 1;
      return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    case 'b':
      if (*(char *)(a4 + 23) < 0)
      {
        *(void *)(a4 + 8) = 1;
        a4 = *(void *)a4;
      }
      else
      {
        *(unsigned char *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    case 'd':
      int v13 = *(_DWORD *)(a5 + 160) | 0x400;
      goto LABEL_18;
    case 's':
      int v13 = *(_DWORD *)(a5 + 160) | 0x4000;
LABEL_18:
      *(_DWORD *)(a5 + 160) = v13;
      return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:fe180100](a5, 95);
      return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    default:
      if (LOBYTE(this->__traits_.__loc_.__locale_)) {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, (uint64_t *)a4);
      }
      if (*(char *)(a4 + 23) < 0)
      {
        *(void *)(a4 + 8) = 1;
        a4 = *(void *)a4;
      }
      else
      {
        *(unsigned char *)(a4 + 23) = 1;
      }
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 1) = 0;
      return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, uint64_t *a4)
{
  if (a2 == a3) {
LABEL_73:
  }
    std::__throw_regex_error[abi:fe180100]<(std::regex_constants::error_type)3>();
  std::basic_regex<char>::value_type v5 = *a2;
  switch(*a2)
  {
    case '""':
    case '/':
    case '\\':
      if (!a4)
      {
        std::basic_regex<char>::value_type v6 = *a2;
        goto LABEL_52;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v5;
      *((unsigned char *)a4 + 1) = 0;
      return a2 + 1;
    case 'a':
      if (!a4)
      {
        std::basic_regex<char>::value_type v6 = 7;
        goto LABEL_52;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      __int16 v12 = 7;
      goto LABEL_67;
    case 'b':
      if (!a4)
      {
        std::basic_regex<char>::value_type v6 = 8;
        goto LABEL_52;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      __int16 v12 = 8;
      goto LABEL_67;
    case 'f':
      if (!a4)
      {
        std::basic_regex<char>::value_type v6 = 12;
        goto LABEL_52;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      __int16 v12 = 12;
      goto LABEL_67;
    case 'n':
      if (!a4)
      {
        std::basic_regex<char>::value_type v6 = 10;
        goto LABEL_52;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      __int16 v12 = 10;
      goto LABEL_67;
    case 'r':
      if (!a4)
      {
        std::basic_regex<char>::value_type v6 = 13;
        goto LABEL_52;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      __int16 v12 = 13;
      goto LABEL_67;
    case 't':
      if (!a4)
      {
        std::basic_regex<char>::value_type v6 = 9;
        goto LABEL_52;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      __int16 v12 = 9;
      goto LABEL_67;
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        __int16 v12 = 11;
LABEL_67:
        *(_WORD *)a4 = v12;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char>::value_type v6 = 11;
LABEL_52:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return a2 + 1;
      }
    default:
      if ((v5 & 0xF8) != 0x30) {
        goto LABEL_73;
      }
      std::basic_regex<char>::value_type v7 = *a2 - 48;
      int v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        int v8 = a3;
LABEL_42:
        if (a4) {
          goto LABEL_43;
        }
LABEL_17:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
        return v8;
      }
      if ((*v8 & 0xF8) != 0x30) {
        goto LABEL_42;
      }
      std::basic_regex<char>::value_type v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 == a3)
      {
        int v8 = a3;
        if (a4) {
          goto LABEL_43;
        }
        goto LABEL_17;
      }
      std::basic_regex<char>::value_type v9 = a2[2];
      int v10 = v9 & 0xF8;
      std::basic_regex<char>::value_type v11 = v9 + 8 * v7 - 48;
      if (v10 == 48) {
        int v8 = a2 + 3;
      }
      else {
        int v8 = a2 + 2;
      }
      if (v10 == 48) {
        std::basic_regex<char>::value_type v7 = v11;
      }
      if (!a4) {
        goto LABEL_17;
      }
LABEL_43:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v7;
      *((unsigned char *)a4 + 1) = 0;
      return v8;
  }
}