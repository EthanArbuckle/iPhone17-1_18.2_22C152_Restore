uint64_t sub_100003B64()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  sub_100008308();
  sub_1000082E0();
  sub_10000A43C();
  *v2 = v1;
  v3 = *v0;
  sub_100008314();
  *v4 = v3;
  *(void *)(v6 + 96) = v5;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_10000F9E8();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100003C4C(uint64_t a1)
{
  uint64_t v4 = sub_100011D80(&qword_10012E458);
  uint64_t v5 = sub_1000085F4(v4);
  __chkstk_darwin(v5);
  sub_10000BD58();
  uint64_t v6 = type metadata accessor for Date();
  sub_10000BFC4();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  sub_100008544();
  sub_100006374(a1, v1, &qword_10012E458);
  if (sub_10001044C(v1, 1, v6) == 1)
  {
    sub_100018910(v1, &qword_10012E458);
    char v10 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v2, v1, v6);
    sub_100018964();
    char v11 = dispatch thunk of static Comparable.< infix(_:_:)();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v2, v6);
    char v10 = v11 ^ 1;
  }
  return v10 & 1;
}

void sub_100003D9C(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    sub_100012124();
    if (v7 != v8)
    {
      sub_1000122B8();
      if (v7)
      {
        __break(1u);
        return;
      }
      sub_100011F3C();
    }
  }
  else
  {
    uint64_t v6 = a2;
  }
  uint64_t v9 = *(void *)(a4 + 16);
  if (v6 <= v9) {
    uint64_t v10 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v10 = v6;
  }
  if (v10)
  {
    sub_100011D80(&qword_10012EEA0);
    char v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    sub_10000B338(v12 - 32);
  }
  else
  {
    char v11 = (char *)&_swiftEmptyArrayStorage;
  }
  if (a1)
  {
    sub_10008D904((char *)(a4 + 32), v9, v11 + 32);
    sub_100011FD0();
  }
  else
  {
    uint64_t v13 = sub_100008640();
    sub_1000045A0(v13, v14, v15, v16);
  }
}

uint64_t sub_100003E68(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_100015860;
  return v6();
}

uint64_t sub_100003F34(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id sub_10000405C()
{
  if (qword_10012E200 != -1) {
    swift_once();
  }
  v0 = (void *)qword_100137170;
  return v0;
}

uint64_t sub_1000040B8()
{
  sub_1000AB000();
  sub_100005AEC();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_100008314();
  *unint64_t v5 = v4;
  *unint64_t v5 = *v1;
  *(void *)(v4 + 392) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v4 + 400) = v3;
  }
  sub_10000F9E8();
  sub_100015F64();
  return _swift_task_switch(v6, v7, v8);
}

void sub_1000041F8(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    sub_100012124();
    if (v7 != v8)
    {
      sub_1000122B8();
      if (v7)
      {
        __break(1u);
        return;
      }
      sub_100011F3C();
    }
  }
  else
  {
    uint64_t v6 = a2;
  }
  uint64_t v9 = *(void *)(a4 + 16);
  if (v6 <= v9) {
    uint64_t v10 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v10 = v6;
  }
  if (v10)
  {
    sub_100011D80(&qword_10012EE88);
    char v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    sub_10000B338(v12 - 32);
  }
  else
  {
    char v11 = (char *)&_swiftEmptyArrayStorage;
  }
  if (a1)
  {
    sub_10008D810((char *)(a4 + 32), v9, v11 + 32);
    sub_100011FD0();
  }
  else
  {
    uint64_t v13 = sub_100008640();
    sub_100003F34(v13, v14, v15, v16);
  }
}

uint64_t *sub_1000042C4(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

void sub_100004328(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setEventType:v4];
}

double sub_100004380(uint64_t a1)
{
  sub_100011D80(&qword_10012F048);
  sub_10000BFC4();
  __chkstk_darwin(v3);
  sub_100008670();
  sub_100018448();
  sub_100016930();
  if (v1)
  {
    sub_10000D47C(a1);
  }
  else
  {
    sub_1000184D8();
    sub_1000122D4();
    uint64_t v4 = sub_100012178();
    v5(v4);
    *(void *)&double result = sub_10000D3D4().n128_u64[0];
  }
  return result;
}

uint64_t sub_100004478()
{
  return dispatch thunk of HashFunction.update(bufferPointer:)();
}

uint64_t sub_1000045A0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      sub_100011D80(&qword_10012EE98);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000046C0(uint64_t a1, int *a2)
{
  unint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100007F40;
  return v6(a1);
}

uint64_t sub_10000479C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *unint64_t v5 = v4;
  v5[1] = sub_100015860;
  return v7();
}

void sub_100004868(uint64_t *a1)
{
  if (static DeviceDetails.deviceIsRunningInternalBuild()())
  {
    sub_10000CE40(a1);
    id v4 = v3;
    [*(id *)(v1 + 24) enqueueEvent:v3];
  }
}

double sub_1000048DC(uint64_t a1)
{
  sub_100011D80(&qword_10012EFF0);
  sub_10000BFC4();
  __chkstk_darwin(v3);
  sub_100008670();
  sub_1000182A8();
  sub_100016930();
  if (v1)
  {
    sub_10000D47C(a1);
  }
  else
  {
    sub_1000183DC();
    sub_1000122D4();
    uint64_t v4 = sub_100012178();
    v5(v4);
    *(void *)&double result = sub_10000D3D4().n128_u64[0];
  }
  return result;
}

uint64_t sub_1000049D4(uint64_t a1)
{
  uint64_t v4 = sub_100011D80(&qword_10012E4A0);
  uint64_t v5 = sub_1000085F4(v4);
  __chkstk_darwin(v5);
  uint64_t v6 = sub_10000BD58();
  uint64_t v7 = type metadata accessor for CachedServerDataSyncAttempt(v6);
  sub_1000082F8();
  __chkstk_darwin(v8);
  sub_100008544();
  uint64_t v9 = (int *)type metadata accessor for CachedServerDataSyncTaskScheduleInput(0);
  sub_100006374(a1 + v9[18], v1, &qword_10012E4A0);
  if (sub_10001044C(v1, 1, v7) == 1)
  {
    sub_100018910(v1, &qword_10012E4A0);
    if (*(unsigned char *)(a1 + v9[19]))
    {
      return 2;
    }
    else if (*(void *)(a1 + v9[17]))
    {
      return 3;
    }
    else if (sub_100003C4C(a1 + v9[13]))
    {
      return 1;
    }
    else
    {
      return 11;
    }
  }
  else
  {
    sub_10009DE60(v1, (uint64_t)v2);
    uint64_t v10 = *v2;
    sub_1000ABAE0((uint64_t)v2, (void (*)(void))type metadata accessor for CachedServerDataSyncAttempt);
  }
  return v10;
}

uint64_t sub_100004B3C(uint64_t a1)
{
  uint64_t v2 = Set.init(minimumCapacity:)();
  uint64_t v10 = v2;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      sub_10000BE2C(&v9, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v10;
  }
  else
  {
    uint64_t v7 = v2;
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_100004C88(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  *(void *)&long long v37 = a1;
  *((void *)&v37 + 1) = a2;
  swift_bridgeObjectRetain();
  sub_100011D80(&qword_10012EE70);
  if (swift_dynamicCast())
  {
    sub_100007468(v35, (uint64_t)&v38);
    sub_1000087B0(&v38, v40);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
    swift_bridgeObjectRelease();
    v35[0] = v37;
    sub_10000D47C((uint64_t)&v38);
    return *(void *)&v35[0];
  }
  uint64_t v36 = 0;
  memset(v35, 0, sizeof(v35));
  sub_1000189B4((uint64_t)v35);
  uint64_t v2 = v34;
  if ((v34 & 0x1000000000000000) != 0)
  {
LABEL_61:
    uint64_t v3 = 0;
    unint64_t v5 = 0xF000000000000000;
    if ((v2 & 0x1000000000000000) == 0) {
      goto LABEL_10;
    }
  }
  else
  {
    if ((v34 & 0x2000000000000000) != 0)
    {
      uint64_t v38 = v33;
      uint64_t v39 = v34 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((v33 & 0x1000000000000000) == 0)
    {
      _StringObject.sharedUTF8.getter();
    }
    uint64_t v3 = Data._Representation.init(_:)();
    unint64_t v5 = v4;
    if (v4 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(void *)&v35[0] = v3;
      *((void *)&v35[0] + 1) = v5;
      return *(void *)&v35[0];
    }
    if ((v34 & 0x1000000000000000) == 0) {
      goto LABEL_10;
    }
  }
  String.UTF8View._foreignCount()();
LABEL_10:
  *(void *)&v35[0] = Data._Representation.init(count:)();
  *((void *)&v35[0] + 1) = v6;
  __chkstk_darwin(*(void *)&v35[0]);
  v28[2] = &v33;
  unint64_t v7 = (unint64_t)sub_10008DE34((void *(*)(uint64_t *__return_ptr, char *, char *))sub_10008E4B4, (uint64_t)v28);
  uint64_t v10 = *((void *)&v35[0] + 1) >> 62;
  uint64_t v11 = v7;
  unint64_t v13 = v12;
  unint64_t v14 = v8;
  uint64_t v2 = BYTE14(v35[0]);
  switch(*((void *)&v35[0] + 1) >> 62)
  {
    case 1:
      LODWORD(v15) = DWORD1(v35[0]) - LODWORD(v35[0]);
      if (__OFSUB__(DWORD1(v35[0]), v35[0])) {
        goto LABEL_65;
      }
      uint64_t v15 = (int)v15;
LABEL_16:
      if (v9 != v15)
      {
        if (v10)
        {
          if (v10 == 1) {
            uint64_t v2 = *(uint64_t *)&v35[0] >> 32;
          }
          else {
            uint64_t v2 = *(void *)(*(void *)&v35[0] + 24);
          }
        }
LABEL_53:
        if (v2 < v9)
        {
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
        }
        Data._Representation.replaceSubrange(_:with:count:)();
LABEL_55:
        swift_bridgeObjectRelease();
        goto LABEL_56;
      }
LABEL_22:
      if ((v13 & 0x2000000000000000) != 0) {
        unint64_t v19 = HIBYTE(v13) & 0xF;
      }
      else {
        unint64_t v19 = v7 & 0xFFFFFFFFFFFFLL;
      }
      *(void *)((char *)&v37 + 7) = 0;
      *(void *)&long long v37 = 0;
      if (4 * v19 == v8 >> 14) {
        goto LABEL_51;
      }
      unint64_t v29 = v5;
      LOBYTE(v20) = 0;
      uint64_t v21 = (v7 >> 59) & 1;
      if ((v13 & 0x1000000000000000) == 0) {
        LOBYTE(v21) = 1;
      }
      uint64_t v22 = 4 << v21;
      uint64_t v32 = v13 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v30 = v3;
      uint64_t v31 = (v13 & 0xFFFFFFFFFFFFFFFLL) + 32;
      break;
    case 2:
      uint64_t v17 = *(void *)(*(void *)&v35[0] + 16);
      uint64_t v16 = *(void *)(*(void *)&v35[0] + 24);
      BOOL v18 = __OFSUB__(v16, v17);
      uint64_t v15 = v16 - v17;
      if (!v18) {
        goto LABEL_16;
      }
      goto LABEL_66;
    case 3:
      if (!v9) {
        goto LABEL_22;
      }
      uint64_t v2 = 0;
      goto LABEL_53;
    default:
      uint64_t v15 = BYTE14(v35[0]);
      goto LABEL_16;
  }
  do
  {
    unint64_t v23 = v14;
    if ((v14 & 0xC) == v22) {
      unint64_t v23 = sub_10008DD80(v14, v11, v13);
    }
    unint64_t v24 = v23 >> 16;
    if (v23 >> 16 >= v19)
    {
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    if ((v13 & 0x1000000000000000) != 0)
    {
      char v26 = String.UTF8View._foreignSubscript(position:)();
    }
    else if ((v13 & 0x2000000000000000) != 0)
    {
      uint64_t v38 = v11;
      uint64_t v39 = v32;
      char v26 = *((unsigned char *)&v38 + v24);
    }
    else
    {
      uint64_t v25 = v31;
      if ((v11 & 0x1000000000000000) == 0) {
        uint64_t v25 = _StringObject.sharedUTF8.getter();
      }
      char v26 = *(unsigned char *)(v25 + v24);
    }
    if ((v14 & 0xC) == v22)
    {
      unint64_t v14 = sub_10008DD80(v14, v11, v13);
      if ((v13 & 0x1000000000000000) == 0)
      {
LABEL_40:
        unint64_t v14 = (v14 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_45;
      }
    }
    else if ((v13 & 0x1000000000000000) == 0)
    {
      goto LABEL_40;
    }
    if (v19 <= v14 >> 16) {
      goto LABEL_60;
    }
    unint64_t v14 = String.UTF8View._foreignIndex(after:)();
LABEL_45:
    *((unsigned char *)&v37 + v20) = v26;
    unsigned int v20 = v20 + 1;
    if ((v20 >> 8)) {
      goto LABEL_59;
    }
    BYTE14(v37) = v20;
    if (v20 == 14)
    {
      uint64_t v38 = v37;
      LODWORD(v39) = DWORD2(v37);
      WORD2(v39) = WORD6(v37);
      Data._Representation.append(contentsOf:)();
      LOBYTE(v20) = 0;
      BYTE14(v37) = 0;
    }
  }
  while (4 * v19 != v14 >> 14);
  uint64_t v3 = v30;
  unint64_t v5 = v29;
  if ((_BYTE)v20)
  {
    uint64_t v38 = v37;
    LODWORD(v39) = DWORD2(v37);
    WORD2(v39) = WORD6(v37);
    Data._Representation.append(contentsOf:)();
    sub_10008E4D0(v3, v5);
    goto LABEL_55;
  }
LABEL_51:
  swift_bridgeObjectRelease();
  sub_10008E4D0(v3, v5);
LABEL_56:
  swift_bridgeObjectRelease();
  return *(void *)&v35[0];
}

uint64_t sub_10000518C(uint64_t a1, char a2)
{
  uint64_t v3 = type metadata accessor for AccountIdentity.DSID();
  sub_10000BFC4();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AccountIdentity.dsid.getter();
  uint64_t v9 = AccountIdentity.DSID.value.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v3);
  uint64_t v17 = v9;
  uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v12 = v11;
  if (a2)
  {
    uint64_t v17 = v10;
    uint64_t v18 = v11;
    swift_bridgeObjectRetain();
    v13._countAndFlagsBits = 0x786F62646E61732ELL;
    v13._object = (void *)0xE800000000000000;
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    uint64_t v10 = v17;
    uint64_t v12 = v18;
  }
  sub_100011874(v10, v12);
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1000052B8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AMPAccount();
  uint64_t v9 = v2;
  uint64_t v10 = &off_1001158D8;
  uint64_t v3 = sub_1000042C4(v8);
  sub_100009B60(a1, (uint64_t)v3);
  uint64_t v4 = sub_1000087B0(v8, v9);
  v5._countAndFlagsBits = sub_10000518C((uint64_t)v4, (char)objc_msgSend(*(id *)((char *)v4 + *(int *)(v2 + 20)), "ams_isSandboxAccount"));
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  uint64_t v6 = sub_100007A18(0xD000000000000027);
  sub_10000D47C((uint64_t)v8);
  return v6;
}

uint64_t sub_1000053A0()
{
  sub_100005AEC();
  uint64_t v3 = v0;
  Swift::String v5 = v4;
  sub_1000086A0();
  uint64_t v6 = *(void **)(v1 + 16);
  uint64_t v7 = *v2;
  sub_100008314();
  *unint64_t v8 = v7;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  sub_1000AB0C8();
  uint64_t v10 = *(const void **)(v9 + 24);
  if (v3)
  {
    uint64_t v11 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    uint64_t v12 = sub_100009CAC();
    v13(v12);

    _Block_release(v10);
  }
  else
  {
    sub_10001656C();
    v14();
    _Block_release(v10);
  }
  sub_100016B2C();
  return v15();
}

uint64_t sub_100005510(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (v2)
  {
    uint64_t v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return sub_100016AE4();
}

uint64_t sub_10000556C()
{
  _Block_release(*(const void **)(v0 + 24));
  uint64_t v1 = sub_1000AB014();
  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1000055AC()
{
  swift_release();
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000055EC(void *a1, uint64_t a2)
{
  uint64_t v6 = type metadata accessor for AccountIdentity();
  sub_100008460();
  uint64_t v8 = v7;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v31 - v13;
  uint64_t v15 = sub_1000087B0(a1, a1[3]);
  uint64_t v33 = *(void (**)(char *, void *, uint64_t))(v8 + 16);
  v33(v14, v15, v6);
  v35[9] = v2 + 112;
  swift_beginAccess();
  uint64_t v16 = *(void *)(v2 + 112);
  if (*(void *)(v16 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v17 = sub_100008E30((uint64_t)v14);
    if (v18)
    {
      uint64_t v19 = *(void *)(*(void *)(v16 + 56) + 8 * v17);
      swift_retain();
      swift_bridgeObjectRelease();
      sub_10000A4CC();
      v20();
      return v19;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v31 = *(void *)(v8 + 8);
  uint64_t v32 = v12;
  sub_10000A4CC();
  v21();
  sub_100018570((uint64_t)a1, (uint64_t)v35);
  sub_100018570(a2, (uint64_t)v34);
  uint64_t v19 = type metadata accessor for LiveTransactionStore();
  uint64_t v22 = type metadata accessor for DeviceDetails();
  uint64_t v23 = sub_10001065C(0, &qword_10012F798);
  sub_10001065C(0, &qword_10012F7A0);
  sub_1000161F4();
  sub_1000A27AC();
  sub_1000AAF34();
  type metadata accessor for AccountDataAccessActor();
  swift_allocObject();
  sub_100068C9C((uint64_t)v35, (uint64_t)v34, (uint64_t)&type metadata for AccountDataNetworking, (uint64_t)&off_100115620, (uint64_t)&type metadata for AccountDataFileSystemStore, (uint64_t)&off_100115768, (uint64_t)&type metadata for AccountDataSyncDASScheduler, (uint64_t)&off_100115818, (uint64_t)&type metadata for AccountDataUpdateDarwinNotifier, (uint64_t)&off_100115850, (uint64_t)&type metadata for AccountsFrameworkFinder, (uint64_t)&off_1001158A8, v19, (uint64_t)&off_100116A70, v22, (uint64_t)&protocol witness table for DeviceDetails, v23, (uint64_t)&protocol witness table for AMSDefaults, v16,
    v30,
    v31,
    (uint64_t)v32,
    (uint64_t)v33,
    v34[0],
    v34[1],
    v34[2],
    v34[3],
    v34[4],
    v35[0],
    v35[1],
    v35[2]);
  if (!v3)
  {
    uint64_t v19 = v24;
    uint64_t v25 = sub_1000087B0(a1, a1[3]);
    uint64_t v26 = (uint64_t)v32;
    v33(v32, v25, v6);
    swift_beginAccess();
    uint64_t v27 = swift_retain();
    sub_1000B81F4(v27, v26);
    sub_10000A4CC();
    v28();
    swift_endAccess();
  }
  return v19;
}

uint64_t sub_10000590C()
{
  sub_100005AEC();
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = (int *)v0[4];
  uint64_t v4 = swift_task_alloc();
  Swift::String v5 = (void *)sub_1000121C4(v4);
  *Swift::String v5 = v6;
  v5[1] = sub_100015860;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_10012F990 + dword_10012F990);
  return v7(v1, v2, v3);
}

uint64_t sub_1000059C4()
{
  sub_100005AEC();
  uint64_t v2 = v1;
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  Swift::String v5 = (int *)v0[4];
  uint64_t v6 = swift_task_alloc();
  uint64_t v7 = (void *)sub_1000121C4(v6);
  *uint64_t v7 = v8;
  v7[1] = sub_100015860;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_10012F9A0 + dword_10012F9A0);
  return v9(v2, v3, v4, v5);
}

id sub_100005A88(id a1, SEL a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return objc_msgSend(a1, a2, a3, a4, v7, v8, a7, v9);
}

uint64_t sub_100005AA4()
{
  return v0;
}

void sub_100005ABC(uint64_t a1)
{
  *(void *)(v2 + 1096) = a1;
}

uint64_t sub_100005AD4()
{
  return type metadata accessor for LogInterpolation();
}

uint64_t sub_100005AF8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  sub_1000186D0(a1, a2, a3);
  return swift_bridgeObjectRetain();
}

void *sub_100005B2C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100011D80((uint64_t *)&unk_10012FD90);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = j__malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 40);
  uint64_t v5 = sub_10000D604((uint64_t)&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  sub_100017254();
  if (v5 != v1)
  {
    __break(1u);
    return &_swiftEmptyArrayStorage;
  }
  return v3;
}

uint64_t sub_100005C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100016794();
  sub_10001660C();
  uint64_t v14 = v12;
  uint64_t v15 = (void *)*v13;
  uint64_t v16 = (void *)*v13;
  sub_100008314();
  *unint64_t v17 = v16;
  uint64_t v18 = v15[5];
  uint64_t v19 = v15[4];
  uint64_t v20 = v15[3];
  uint64_t v21 = (void *)v15[2];
  *unint64_t v17 = *v13;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);

  swift_bridgeObjectRelease();
  uint64_t v22 = v15[6];
  if (v14)
  {
    uint64_t v23 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v22 + 16))(v22, v23);
  }
  else
  {
    (*(void (**)(void, void))(v22 + 16))(v15[6], 0);
  }
  _Block_release((const void *)v16[6]);
  swift_task_dealloc();
  sub_10000858C();
  return v25(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10, a11, a12);
}

uint64_t sub_100005DF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100011D80(&qword_10012E580);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000DA3F0;
  *(void *)(inited + 32) = 0x656C6174537369;
  *(void *)(inited + 40) = 0xE700000000000000;
  *(unsigned char *)(inited + 48) = static Date.< infix(_:_:)() & 1;
  *(void *)(inited + 72) = &type metadata for Bool;
  *(void *)(inited + 80) = 7368801;
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 88) = 0xE300000000000000;
  *(void *)(inited + 96) = a2;
  *(void *)(inited + 104) = a3;
  swift_bridgeObjectRetain();
  Dictionary.init(dictionaryLiteral:)();
  if (qword_10012E1F8 != -1) {
    swift_once();
  }
  sub_10000BFE0();
  return sub_10000F6D8(v6, 0xD000000000000018);
}

void sub_100005F38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccountIdentity();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = *(void **)(a1 + *(int *)(a2 + 20));
}

uint64_t sub_100005FAC(void *a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = _Block_copy(aBlock);
  sub_1000AB014();
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = a3;
  v10[3] = v9;
  v10[4] = a1;
  id v11 = a3;
  id v12 = a1;
  return sub_10000E8D0(a6, (uint64_t)v10);
}

uint64_t sub_100006028(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  sub_10001065C(0, &qword_10012EB18);
  v3[4] = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  a3;
  uint64_t v5 = (void *)swift_task_alloc();
  v3[5] = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_1000053A0;
  return sub_100017B80();
}

char *sub_100006110(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100011D80(&qword_10012FD88);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 32);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  id v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_10008D7B4(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_10001706C((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

uint64_t sub_1000061F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for AccountIdentity.DSID();
  sub_10000BFC4();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_10000F728();
  uint64_t v9 = sub_100011D80(&qword_10012ECC8);
  __chkstk_darwin(v9 - 8);
  sub_10000857C();
  uint64_t v12 = v10 - v11;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v19 - v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v2, a1, v5);
  sub_1000077D8(v2, (uint64_t)v15);
  sub_100018858((uint64_t)v15, v12);
  uint64_t v16 = type metadata accessor for AMPAccount();
  if (sub_10001044C(v12, 1, v16) == 1)
  {
    sub_1000187F8((uint64_t)v15);
    uint64_t result = sub_1000187F8(v12);
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(void *)(a2 + 32) = 0;
  }
  else
  {
    *(void *)(a2 + 24) = v16;
    *(void *)(a2 + 32) = &off_1001158D8;
    uint64_t v18 = sub_1000042C4((uint64_t *)a2);
    sub_100015CEC(v12, (uint64_t)v18);
    return sub_1000187F8((uint64_t)v15);
  }
  return result;
}

uint64_t sub_100006374(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100011D80(a3);
  sub_1000082F8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_1000063D0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100011D80(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100006434(uint64_t a1, uint64_t a2, const void *a3, void *a4)
{
  v4[2] = a4;
  uint64_t v7 = type metadata accessor for Date();
  v4[3] = v7;
  v4[4] = *(void *)(v7 - 8);
  v4[5] = swift_task_alloc();
  v4[6] = _Block_copy(a3);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4[7] = v8;
  a4;
  uint64_t v9 = (void *)swift_task_alloc();
  v4[8] = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_100005C10;
  return sub_10000BB2C();
}

uint64_t sub_100006588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AccountIdentity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v8;
  id v9 = v8;
  return a1;
}

id sub_100006608()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithTopic:v1];

  return v2;
}

uint64_t sub_10000667C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000069A4()
{
  swift_unknownObjectRelease();
  swift_release();
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000069E4(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for AccountIdentity();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + a2[13];
  uint64_t v7 = type metadata accessor for Date();
  if (!sub_10001044C(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  uint64_t v8 = a1 + a2[14];
  if (!sub_10001044C(v8, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v8, v7);
  }
  uint64_t v9 = a1 + a2[15];
  if (!sub_10001044C(v9, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v9, v7);
  }
  uint64_t v10 = a1 + a2[16];
  if (!sub_10001044C(v10, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v10, v7);
  }
  uint64_t v11 = a1 + a2[18];
  uint64_t v12 = type metadata accessor for CachedServerDataSyncAttempt(0);
  uint64_t result = sub_10001044C(v11, 1, v12);
  if (!result)
  {
    uint64_t v14 = v11 + *(int *)(v12 + 20);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    return v15(v14, v7);
  }
  return result;
}

uint64_t sub_100006CEC()
{
  id v2 = (void *)v0[31];
  uint64_t v1 = v0[32];
  static Log.accountsDataSync.getter();
  sub_100011D80((uint64_t *)&unk_10012E440);
  uint64_t v3 = sub_100005AD4();
  sub_1000082C8(v3);
  sub_100015FC4();
  uint64_t v4 = sub_100016390();
  v0[22] = v2;
  uint64_t v5 = (char *)(v0 + 22);
  *(_OWORD *)(v4 + 16) = xmmword_1000DA3D0;
  v0[25] = v1;
  id v6 = v2;
  id v7 = (id)AMSLogKey();
  if (v7)
  {
    uint64_t v8 = v7;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  uint64_t v10 = v0[44];
  uint64_t v9 = v0[45];
  uint64_t v64 = v0[43];
  unint64_t v11 = v0[30];
  static LogInterpolation.prefix(_:_:)();
  swift_bridgeObjectRelease();
  sub_10000D47C((uint64_t)(v0 + 22));
  sub_10000A3D0();
  v0[29] = sub_100011D80(&qword_10012F8D0);
  v0[26] = v11;
  swift_bridgeObjectRetain();
  static LogInterpolation.traceableSensitive(_:)();
  sub_1000AABFC((uint64_t)(v0 + 26), &qword_10012EFB0);
  Log.default(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v64);
  sub_1000174B0();
  uint64_t v60 = Dictionary.init(dictionaryLiteral:)();
  if (v11 >> 62)
  {
LABEL_34:
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v13 = v0[30];
    if (v12) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v13 = swift_bridgeObjectRetain();
    if (v12)
    {
LABEL_5:
      uint64_t v14 = 0;
      uint64_t v15 = (long long *)(v5 - 120);
      uint64_t v66 = (uint64_t)(v5 - 80);
      uint64_t v67 = (uint64_t)(v5 - 160);
      unint64_t v63 = v11 & 0xC000000000000001;
      uint64_t v58 = v13 + 32;
      v59 = (uint64_t *)(v5 - 40);
      unint64_t v11 = (unint64_t)&_swiftEmptyArrayStorage;
      uint64_t v61 = v12;
      v62 = (long long *)(v5 - 120);
      while (1)
      {
        if (v63) {
          uint64_t v16 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          uint64_t v16 = (char *)*(id *)(v58 + 8 * v14);
        }
        uint64_t v5 = v16;
        if (__OFADD__(v14, 1))
        {
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
          goto LABEL_34;
        }
        id v17 = [v16 dsid];
        [v17 unsignedLongLongValue];

        AccountIdentity.DSID.init(_:)();
        sub_100017758();
        sub_1000084F8();
        v18();
        if (v0[10])
        {
          sub_100007468(v15, v67);
          sub_100018570(v67, v66);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_100003D9C(0, *(void *)(v11 + 16) + 1, 1, v11);
            unint64_t v11 = v54;
          }
          unint64_t v20 = *(void *)(v11 + 16);
          unint64_t v19 = *(void *)(v11 + 24);
          if (v20 >= v19 >> 1)
          {
            sub_100003D9C(v19 > 1, v20 + 1, 1, v11);
            unint64_t v21 = v55;
          }
          else
          {
            unint64_t v21 = v11;
          }
          uint64_t v22 = v0[15];
          uint64_t v23 = sub_100015DA0(v66, v22);
          sub_100008460();
          uint64_t v25 = v24;
          uint64_t v26 = sub_1000084E0();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v26, v23, v22);
          v0[20] = type metadata accessor for AMPAccount();
          v0[21] = &off_1001158D8;
          uint64_t v27 = sub_1000042C4(v59);
          sub_100009C10(v26, (uint64_t)v27);
          unint64_t v11 = v21;
          *(void *)(v21 + 16) = v20 + 1;
          sub_100007468((long long *)v59, v21 + 40 * v20 + 32);
          sub_10000D47C(v66);
          swift_task_dealloc();

          sub_10000D47C(v67);
          uint64_t v28 = v14 + 1;
          uint64_t v29 = v61;
        }
        else
        {
          unint64_t v30 = v11;
          uint64_t v31 = v0[39];
          uint64_t v32 = (unint64_t *)v0[36];
          uint64_t v65 = v0[35];
          sub_1000AABFC((uint64_t)v15, &qword_10012F7C0);
          uint64_t v5 = v5;
          AccountIdentity.init(amsAccountID:)();
          NSString v33 = String._bridgeToObjectiveC()();
          NSString v34 = String._bridgeToObjectiveC()();
          unint64_t v11 = (unint64_t)(id)AMSError();

          *uint64_t v32 = v11;
          swift_storeEnumTagMultiPayload();
          sub_1000AABA8((uint64_t)v32, v65, &qword_10012EB08);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v36 = sub_100008E30(v31);
          uint64_t v38 = *(void *)(v60 + 16);
          BOOL v39 = (v37 & 1) == 0;
          Swift::Int v40 = v38 + v39;
          if (__OFADD__(v38, v39)) {
            goto LABEL_32;
          }
          unint64_t v41 = v36;
          char v42 = v37;
          sub_100011D80(&qword_10012F8D8);
          unint64_t v11 = v30;
          if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v40))
          {
            unint64_t v43 = sub_100008E30(v0[39]);
            if ((v42 & 1) != (v44 & 1))
            {
              return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            }
            unint64_t v41 = v43;
          }
          if (v42)
          {
            sub_1000AB0B4();
            sub_1000AAAD8(v45, v46);
          }
          else
          {
            uint64_t v47 = v0[35];
            *(void *)(v60 + 8 * (v41 >> 6) + 64) |= 1 << v41;
            sub_100008000();
            v48();
            sub_1000AB0B4();
            sub_1000AABA8(v47, v49, &qword_10012EB08);
            uint64_t v50 = *(void *)(v60 + 16);
            BOOL v51 = __OFADD__(v50, 1);
            uint64_t v52 = v50 + 1;
            if (v51) {
              goto LABEL_33;
            }
            *(void *)(v60 + 16) = v52;
          }
          swift_bridgeObjectRelease();
          sub_1000084F8();
          v53();

          uint64_t v29 = v61;
          uint64_t v28 = v14 + 1;
        }
        ++v14;
        uint64_t v15 = v62;
        if (v28 == v29) {
          goto LABEL_36;
        }
      }
    }
  }
  unint64_t v11 = (unint64_t)&_swiftEmptyArrayStorage;
LABEL_36:
  v0[46] = v60;
  v0[47] = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v57 = (void *)swift_task_alloc();
  v0[48] = v57;
  void *v57 = v0;
  v57[1] = sub_1000040B8;
  return sub_10000BC18();
}

uint64_t sub_100007468(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100007480(uint64_t a1, uint64_t a2)
{
  long long v3 = v2;
  uint64_t v6 = *v3;
  id v7 = v3[2];
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = v3;
  uint64_t v8[3] = a1;
  v8[4] = a2;
  v8[5] = v6;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_1000181EC;
  *(void *)(v9 + 24) = v8;
  v12[4] = sub_100017344;
  v12[5] = v9;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_10001736C;
  v12[3] = &unk_100116B28;
  uint64_t v10 = _Block_copy(v12);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  dispatch_sync(v7, v10);
  _Block_release(v10);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v7) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100007618@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&v13[0] = 0;
  id v4 = [self dataWithJSONObject:a1 options:0 error:v13];
  id v5 = *(id *)&v13[0];
  if (v4)
  {
    uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v8 = v7;

    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    sub_10001823C();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    sub_1000124D4(v6, v8);
    uint64_t result = swift_release();
    if (!v2)
    {
      long long v10 = v13[1];
      long long v11 = v13[2];
      *a2 = v13[0];
      a2[1] = v10;
      a2[2] = v11;
    }
  }
  else
  {
    uint64_t v12 = v5;
    _convertNSErrorToError(_:)();

    return swift_willThrow();
  }
  return result;
}

id sub_100007770(void *a1)
{
  id v2 = (id)AMSSetLogKey();
  (*(void (**)(void))(a1[6] + 16))();
  id v4 = (void *)a1[7];
  uint64_t v5 = a1[5];
  return [v4 releaseKeepAliveTransaction:v5];
}

void sub_1000077D8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for AccountIdentity.DSID();
  sub_10000BFC4();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_10000F728();
  type metadata accessor for AccountIdentity();
  sub_10000BFC4();
  uint64_t v30 = v10;
  uint64_t v31 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = sub_10000FA14();
  __chkstk_darwin(v11);
  sub_100008338();
  uint64_t v14 = v13 - v12;
  id v15 = objc_msgSend(self, "ams_sharedAccountStore");
  AccountIdentity.DSID.value.getter();
  Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
  id v17 = objc_msgSend(v15, "ams_iTunesAccountWithDSID:", isa);

  if (v17)
  {
    sub_100017120(v17);
    if (v18)
    {
      *(void *)(v14 + *(int *)(v11 + 20)) = v17;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v2, a1, v5);
      AccountIdentity.init(altDSID:dsid:)();
      uint64_t v19 = sub_1000083E8();
      v20(v19);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32))(v14, v3, v31);
      sub_100015CEC(v14, a2);
      sub_1000101E8(a2, 0, 1, v11);
      sub_10000A484();
      return;
    }
    uint64_t v23 = sub_1000083E8();
    v24(v23);
  }
  else
  {
    uint64_t v21 = sub_1000083E8();
    v22(v21);
  }
  sub_10000A484();
  sub_1000101E8(v25, v26, v27, v28);
}

uint64_t sub_100007A18(uint64_t a1)
{
  unint64_t v2 = *(void *)(String.utf8CString.getter() + 16);
  swift_release();
  if (v2 < 0x81) {
    return a1;
  }
  uint64_t v3 = String.count.getter();
  uint64_t v4 = 0;
  if (String.count.getter())
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return v4;
  }
  if (v3 >= 127) {
    uint64_t v3 = 127;
  }
  while (1)
  {
    String.index(_:offsetBy:)();
    swift_bridgeObjectRetain();
    String.subscript.getter();
    swift_bridgeObjectRelease();
    uint64_t v5 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
    unint64_t v6 = *(void *)(String.utf8CString.getter() + 16);
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
    if (__OFSUB__(v3--, 1)) {
      break;
    }
    if (v6 <= 0x80) {
      uint64_t v4 = v5;
    }
    if (String.count.getter()) {
      goto LABEL_9;
    }
  }
  __break(1u);
  return result;
}

void sub_100007B74()
{
  sub_10000A46C();
  unsigned int v1 = v0;
  __int16 v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  sub_100007E78(v4, (uint64_t)v51, &qword_10012E460);
  sub_100007E78((uint64_t)v51, (uint64_t)v86, &qword_10012E460);
  sub_100007E78(v5, (uint64_t)&v52, &qword_10012E460);
  if (sub_100018644((uint64_t)&v52) != 1)
  {
    v8.i32[0] = v62;
    int16x8_t v9 = (int16x8_t)vmovl_u8(v8);
    v8.i32[0] = v64;
    int16x8_t v10 = (int16x8_t)vmovl_u8(v8);
    v9.i64[0] &= 0xFF01FF01FF01FF01;
    v10.i64[0] &= 0xFF01FF01FF01FF01;
    if (v3 == 3 || v3 == 2)
    {
      int v12 = v1;
      if (v1 == 3 || v1 == 2) {
        char v14 = v55 & 1;
      }
      else {
        char v14 = v1 & 1;
      }
      if (v3 == 3) {
        goto LABEL_17;
      }
    }
    else
    {
      char v14 = v3 & 1;
    }
    if (HIBYTE(v3) != 2)
    {
      LOBYTE(v15) = HIBYTE(v3) & 1;
      uint64_t v19 = v57;
      uint64_t v16 = v53;
      goto LABEL_23;
    }
    int v12 = v1;
LABEL_17:
    LOBYTE(v15) = v79 & 1;
    uint64_t v16 = v53;
    if (v12 != 3)
    {
      uint64_t v18 = v54;
      uint64_t v17 = v52;
      if ((v1 & 0xFF00) != 0x200) {
        int v15 = (v1 >> 8) & 1;
      }
      uint64_t v19 = v57;
      goto LABEL_24;
    }
    uint64_t v19 = v57;
LABEL_23:
    uint64_t v18 = v54;
    uint64_t v17 = v52;
LABEL_24:
    v20[0] = v17;
    v20[1] = v16;
    v20[2] = v18;
    char v21 = v14;
    uint64_t v22 = v56;
    uint64_t v23 = v19;
    long long v24 = v58;
    uint64_t v25 = v59;
    uint64_t v26 = v60;
    uint64_t v27 = v61;
    unsigned __int32 v28 = vmovn_s16(v9).u32[0];
    uint64_t v29 = v63;
    unsigned __int32 v30 = vmovn_s16(v10).u32[0];
    char v31 = v65 & 1;
    char v32 = v66 & 1;
    uint64_t v33 = v67;
    uint64_t v34 = v68;
    uint64_t v35 = v69;
    uint64_t v36 = v70;
    uint64_t v37 = v71;
    uint64_t v38 = v72;
    char v39 = v73 & 1;
    char v40 = v74;
    uint64_t v41 = v75;
    uint64_t v42 = v76;
    uint64_t v43 = v77;
    char v44 = v78 & 1;
    char v45 = v15;
    char v46 = v80 & 1;
    uint64_t v47 = v81;
    uint64_t v48 = v82;
    char v49 = v83 & 1;
    uint64_t v50 = v84;
    nullsub_8(v20);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100007E78((uint64_t)v20, (uint64_t)v85, &qword_10012E460);
    goto LABEL_25;
  }
  sub_100007E78((uint64_t)v86, (uint64_t)v85, &qword_10012E460);
LABEL_25:
  sub_100007E78((uint64_t)v85, v7, &qword_10012E460);
  sub_10000A484();
}

uint64_t sub_100007E78(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100011D80(a3);
  sub_1000082F8();
  uint64_t v4 = sub_100007F20();
  v5(v4);
  return a2;
}

uint64_t sub_100007EC8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100011D80(a3);
  sub_1000082F8();
  sub_10000D340();
  v4();
  return a2;
}

uint64_t sub_100007F20()
{
  return v0;
}

uint64_t sub_100007F40()
{
  sub_100008308();
  sub_1000082E0();
  uint64_t v1 = *v0;
  sub_100008314();
  *__int16 v2 = v1;
  swift_task_dealloc();
  sub_10000800C();
  return v3();
}

uint64_t sub_10000800C()
{
  return v0 + 8;
}

uint64_t sub_10000801C()
{
  return v0;
}

uint64_t sub_100008028()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100008044@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100011D80(&qword_10012F0A0);
  sub_10000BFC4();
  __chkstk_darwin(v5);
  sub_100008670();
  sub_100018524();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10000D47C(a1);
  }
  uint64_t v6 = sub_100008418();
  uint64_t v7 = sub_100008418();
  uint64_t v14 = sub_100008418();
  uint64_t v13 = sub_100008418();
  uint64_t v12 = sub_100008418();
  uint64_t v8 = sub_100008418();
  uint64_t v9 = sub_100016898();
  v10(v9);
  uint64_t result = sub_10000D47C(a1);
  *a2 = v6;
  a2[1] = v7;
  a2[2] = v14;
  a2[3] = v13;
  a2[4] = v12;
  a2[5] = v8;
  return result;
}

uint64_t sub_100008208()
{
  sub_100008308();
  sub_1000082E0();
  uint64_t v1 = *v0;
  sub_100008314();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_100008600();
  return v3();
}

uint64_t sub_1000082C8(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_100008348()
{
  return v0 - 128;
}

uint64_t sub_10000836C()
{
  return v0;
}

void sub_100008384(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 112) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

unint64_t sub_1000083A0()
{
  return 0xD000000000000013;
}

void *sub_1000083CC@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

uint64_t sub_1000083E8()
{
  return v0;
}

uint64_t sub_100008400()
{
  return swift_continuation_init();
}

uint64_t sub_100008418()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t sub_100008434()
{
  return 1;
}

uint64_t sub_10000843C()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_100008494(uint64_t a1)
{
  return v1 + *(int *)(a1 + 20);
}

uint64_t sub_1000084B8()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_1000084E0()
{
  return swift_task_alloc();
}

uint64_t sub_100008520@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 80) = a1;
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t sub_100008568()
{
  return v0;
}

void *sub_1000085A8()
{
  return sub_1000087B0(v0, v0[3]);
}

uint64_t sub_1000085CC()
{
  return v0;
}

void sub_1000085DC(double a1, uint64_t a2, const char *a3)
{
  xpc_dictionary_set_int64(v3, a3, (uint64_t)a1);
}

uint64_t sub_1000085F4(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_100008600()
{
  return v0 + 8;
}

uint64_t sub_10000860C()
{
  return String.hash(into:)();
}

void sub_100008628()
{
  *(void *)(v1 - 360) = v0;
}

uint64_t sub_100008640()
{
  return 0;
}

BOOL sub_100008650()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v0, v1);
}

void *sub_100008670()
{
  return sub_1000087B0(v0, v0[3]);
}

uint64_t sub_100008694()
{
  return v0;
}

uint64_t sub_1000086B8()
{
  return static LogInterpolation.prefix<A>(_:_:)();
}

uint64_t sub_1000086D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = *v10;
  *int16x8_t v10 = a10;
  return result;
}

uint64_t sub_1000086FC()
{
  return 0;
}

uint64_t sub_100008708()
{
  return type metadata accessor for Date();
}

_OWORD *sub_100008728()
{
  uint64_t v3 = (_OWORD *)(*(void *)(v0 + 56) + 32 * v2);
  sub_10000D47C((uint64_t)v3);
  return sub_10000D5F4(v1, v3);
}

uint64_t sub_100008760()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

void *sub_1000087B0(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_1000087F4()
{
  sub_1000167D4();
  sub_100016230();
  Swift::Int v1 = *(void **)(v0 + 328);
  uint64_t v2 = *(void *)(v0 + 336);
  static Log.accountsDataSync.getter();
  *(void *)(v0 + 456) = sub_100011D80((uint64_t *)&unk_10012E440);
  uint64_t v3 = type metadata accessor for LogInterpolation();
  sub_1000082C8(v3);
  *(void *)(v0 + 464) = *(void *)(v4 + 72);
  *(_DWORD *)(v0 + 568) = *(_DWORD *)(v5 + 80);
  uint64_t v6 = sub_100016390();
  *(void *)(v0 + 248) = v1;
  *(_OWORD *)(v6 + 16) = xmmword_1000DA3D0;
  *(void *)(v0 + 272) = v2;
  id v7 = v1;
  id v8 = (id)AMSLogKey();
  if (v8)
  {
    uint64_t v9 = v8;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    sub_1000734E0();
  }
  uint64_t v10 = *(void *)(v0 + 432);
  uint64_t v11 = *(void *)(v0 + 320);
  sub_100073298();
  swift_bridgeObjectRelease();
  sub_10000D47C(v0 + 248);
  sub_10000A3D0();
  *(void *)(v0 + 176) = sub_100011D80(&qword_10012F800);
  *(void *)(v0 + 152) = v11;
  swift_bridgeObjectRetain();
  static LogInterpolation.traceableSensitive(_:)();
  sub_1000AABFC(v0 + 152, &qword_10012EFB0);
  Log.default(_:)();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 472) = *(void *)(v10 + 8);
  *(void *)(v0 + 480) = (v10 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v12 = sub_1000AB140();
  v13(v12);
  if (qword_10012E210 != -1) {
    swift_once();
  }
  sub_100007480(0xD000000000000010, 0x8000000100102970);
  sub_1000174B0();
  *(void *)(v0 + 488) = Dictionary.init(dictionaryLiteral:)();
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 496) = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_100018058;
  sub_10000B224();
  return sub_10001773C(v15, v16);
}

uint64_t sub_100008AE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100016794();
  sub_10001660C();
  uint64_t v13 = v12[65];
  uint64_t v15 = v12[51];
  uint64_t v14 = v12[52];
  uint64_t v17 = v12[44];
  uint64_t v16 = v12[45];
  uint64_t v18 = v12[43];
  uint64_t v19 = sub_1000087B0(v12 + 14, v12[17]);
  unint64_t v20 = *(void (**)(uint64_t, void *, uint64_t))(v17 + 16);
  v20(v16, v19, v18);
  sub_100009B60(v14, v15);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v12[39] = v13;
  uint64_t result = sub_100008E30(v16);
  uint64_t v24 = *(void *)(v13 + 16);
  BOOL v25 = (v23 & 1) == 0;
  Swift::Int v26 = v24 + v25;
  if (__OFADD__(v24, v25))
  {
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v27 = result;
  char v28 = v23;
  sub_100011D80(&qword_10012F820);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v26))
  {
    unint64_t v29 = sub_100008E30(v12[45]);
    if ((v28 & 1) != (v30 & 1))
    {
      sub_10000858C();
      return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    }
    unint64_t v27 = v29;
  }
  char v32 = (void *)v12[39];
  uint64_t v34 = v12[50];
  uint64_t v33 = v12[51];
  if (v28)
  {
    sub_1000AA1C4(v12[51], v32[7] + *(void *)(v34 + 72) * v27);
    goto LABEL_12;
  }
  uint64_t v36 = v12[44];
  uint64_t v35 = (void *)v12[45];
  uint64_t v37 = v12[43];
  v32[(v27 >> 6) + 8] |= 1 << v27;
  v20(v32[6] + *(void *)(v36 + 72) * v27, v35, v37);
  uint64_t result = sub_100009C10(v33, v32[7] + *(void *)(v34 + 72) * v27);
  uint64_t v38 = v32[2];
  BOOL v39 = __OFADD__(v38, 1);
  uint64_t v40 = v38 + 1;
  if (v39)
  {
LABEL_20:
    __break(1u);
    return result;
  }
  v32[2] = v40;
  char v32 = (void *)v12[39];
LABEL_12:
  uint64_t v41 = v12[66];
  uint64_t v42 = v12[64];
  uint64_t v43 = v12[52];
  uint64_t v45 = v12[44];
  uint64_t v44 = v12[45];
  uint64_t v46 = v12[43];
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
  swift_release();
  sub_1000117F8(v43);
  sub_10000D47C((uint64_t)(v12 + 14));
  if (v41 + 1 == v42)
  {
    swift_bridgeObjectRelease();
    sub_1000AAD28((uint64_t)"accountDataFetch");
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100007F34();
    sub_10000858C();
    return v49(v47, v48, v49, v50, v51, v52, v53, v54, a9, a10, a11, a12);
  }
  else
  {
    uint64_t v55 = v12[66] + 1;
    v12[66] = v55;
    v12[65] = v32;
    sub_100018570(v12[40] + 40 * v55 + 32, (uint64_t)(v12 + 14));
    uint64_t v56 = (void *)swift_task_alloc();
    v12[67] = v56;
    *uint64_t v56 = v12;
    v56[1] = sub_100017F5C;
    sub_1000AAF28();
    sub_10000858C();
    return sub_1000175F0(v57);
  }
}

unint64_t sub_100008E30(uint64_t a1)
{
  type metadata accessor for AccountIdentity();
  sub_1000090D0((unint64_t *)&qword_100130080, (void (*)(uint64_t))&type metadata accessor for AccountIdentity);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_100008EC8(a1, v2);
}

unint64_t sub_100008EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v4 = type metadata accessor for AccountIdentity();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    uint64_t v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      sub_1000090D0((unint64_t *)&unk_10012FB70, (void (*)(uint64_t))&type metadata accessor for AccountIdentity);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

uint64_t sub_100009088(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000090D0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100009118()
{
  uint64_t v1 = v0[18];
  v0[16] = [self uninitializedToken];
  uint64_t v2 = v0 + 10;
  id v3 = [objc_allocWithZone((Class)AMSMutablePromise) init];
  v0[20] = v3;
  uint64_t v59 = swift_allocObject();
  v0[21] = v59;
  *(void *)(v59 + 16) = v3;
  uint64_t v4 = *(void *)(v1 + 16);
  id v58 = v3;
  if (v4)
  {
    uint64_t v5 = v0[18];
    id v6 = v3;
    swift_bridgeObjectRetain();
    id v7 = (unsigned __int8 *)(v5 + 48);
    uint64_t v8 = &_swiftEmptyArrayStorage;
    unint64_t v9 = &_swiftEmptyArrayStorage;
    while (2)
    {
      uint64_t v10 = *((void *)v7 - 2);
      uint64_t v11 = *((void *)v7 - 1);
      int v13 = *v7;
      v7 += 24;
      unsigned __int8 v12 = v13;
      switch(v13)
      {
        case 1:
          uint64_t v20 = sub_100009784();
          unsigned __int8 v22 = 1;
          goto LABEL_21;
        case 2:
          uint64_t v20 = sub_100009784();
          unsigned __int8 v22 = 2;
          goto LABEL_21;
        case 3:
          uint64_t v20 = sub_100009784();
          unsigned __int8 v22 = 3;
          goto LABEL_21;
        case 4:
          uint64_t v20 = sub_100009784();
          unsigned __int8 v22 = 4;
          goto LABEL_21;
        case 5:
          sub_1000186D0(v10, v11, 5u);
          sub_1000186D0(v10, v11, 5u);
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_10000A40C();
            uint64_t v8 = v37;
          }
          unint64_t v24 = v8[2];
          unint64_t v23 = v8[3];
          if (v24 >= v23 >> 1)
          {
            sub_100016EE0(v23 > 1, v24 + 1, 1, (uint64_t)v8);
            uint64_t v8 = v38;
          }
          v8[2] = v24 + 1;
          BOOL v25 = (char *)&v8[2 * v24];
          *((void *)v25 + 4) = v10;
          *((void *)v25 + 5) = v11;
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v19 = (uint64_t)v9;
          }
          else
          {
            sub_100016EE0(0, v9[2] + 1, 1, (uint64_t)v9);
            uint64_t v19 = v39;
          }
          unint64_t v17 = *(void *)(v19 + 16);
          unint64_t v26 = *(void *)(v19 + 24);
          unint64_t v18 = v17 + 1;
          if (v17 >= v26 >> 1)
          {
            char v40 = sub_100098398(v26);
            sub_100016EE0(v40, v41, v42, v43);
            uint64_t v19 = (uint64_t)v44;
            unint64_t v9 = v44;
          }
          else
          {
            unint64_t v9 = (void *)v19;
          }
          goto LABEL_25;
        case 6:
          uint64_t v20 = sub_100009784();
          unsigned __int8 v22 = 6;
LABEL_21:
          sub_1000186D0(v20, v21, v22);
          swift_bridgeObjectRetain();
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v19 = (uint64_t)v8;
          }
          else
          {
            sub_10000A40C();
            uint64_t v19 = v31;
          }
          unint64_t v17 = *(void *)(v19 + 16);
          unint64_t v27 = *(void *)(v19 + 24);
          unint64_t v18 = v17 + 1;
          if (v17 < v27 >> 1)
          {
            uint64_t v8 = (void *)v19;
            goto LABEL_25;
          }
          char v32 = v27 > 1;
          uint64_t v33 = v17 + 1;
          char v34 = 1;
          goto LABEL_29;
        default:
          uint64_t v14 = sub_100009784();
          sub_1000186D0(v14, v15, 0);
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_10000A40C();
            uint64_t v8 = v36;
          }
          unint64_t v17 = v8[2];
          unint64_t v16 = v8[3];
          unint64_t v18 = v17 + 1;
          if (v17 >= v16 >> 1)
          {
            char v32 = sub_100098398(v16);
            uint64_t v19 = (uint64_t)v8;
LABEL_29:
            sub_100016EE0(v32, v33, v34, v19);
            uint64_t v19 = (uint64_t)v35;
            uint64_t v8 = v35;
          }
          else
          {
            uint64_t v19 = (uint64_t)v8;
          }
LABEL_25:
          *(void *)(v19 + 16) = v18;
          uint64_t v28 = v19 + 16 * v17;
          *(void *)(v28 + 32) = v10;
          *(void *)(v28 + 40) = v11;
          uint64_t v29 = sub_100009784();
          sub_1000186E8(v29, v30, v12);
          if (--v4) {
            continue;
          }
          swift_bridgeObjectRelease();
          uint64_t v2 = v0 + 10;
          break;
      }
      break;
    }
  }
  else
  {
    id v45 = v3;
    uint64_t v8 = &_swiftEmptyArrayStorage;
    unint64_t v9 = &_swiftEmptyArrayStorage;
  }
  v0[22] = v9;
  uint64_t v46 = (void *)v0[19];
  v0[23] = Dictionary.init(dictionaryLiteral:)();
  sub_100004B3C((uint64_t)v8);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v0[14] = sub_100097F48;
  v0[15] = v59;
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 1107296256;
  v0[12] = sub_100097F50;
  v0[13] = &unk_100115988;
  uint64_t v48 = _Block_copy(v2);
  swift_retain();
  swift_release();
  id v49 = [v46 cachedValuesForKeys:isa observationToken:v0 + 16 updateHandler:v48];
  _Block_release(v48);

  uint64_t v50 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v50 + 16))
  {
    uint64_t v51 = (void *)v0[19];
    swift_bridgeObjectRelease();
    [v51 removeObserverWithToken:v0[16]];
    Class v52 = Dictionary._bridgeToObjectiveC()().super.isa;
    [v58 finishWithResult:v52];

    uint64_t v53 = (void *)v0[20];
    sub_100010E34((void *)v0[22], v50);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v54.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_release();

    swift_bridgeObjectRelease();
    uint64_t v55 = (uint64_t (*)(Class))v0[1];
    return v55(v54.super.isa);
  }
  else
  {
    swift_bridgeObjectRelease();
    v0[2] = v0;
    v0[7] = v0 + 17;
    v0[3] = sub_100097B08;
    uint64_t v57 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_10008FFC0;
    v0[13] = &unk_1001159B0;
    v0[14] = v57;
    [v58 resultWithCompletion:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
}

uint64_t sub_100009768()
{
  return type metadata accessor for AccountIdentity.DSID();
}

uint64_t sub_100009784()
{
  return v0;
}

uint64_t sub_100009790()
{
  return sub_100007480(0x44746E756F636361, 0xEF636E7953617461);
}

uint64_t sub_1000097C0(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100011D80((uint64_t *)&unk_10012FDA0);
    uint64_t v2 = (void *)static _SetStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptySetSingleton;
  }
  uint64_t v3 = a1 + 56;
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1 << -(char)v4);
  }
  else {
    uint64_t v5 = -1;
  }
  uint64_t v6 = v5 & *(void *)(a1 + 56);
  int64_t v7 = (unint64_t)(63 - v4) >> 6;
  uint64_t v8 = (char *)(v2 + 7);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  if (!v6) {
    goto LABEL_9;
  }
LABEL_8:
  v6 &= v6 - 1;
  while (1)
  {
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v15 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)&v8[8 * (v16 >> 6)]) == 0)
    {
      char v19 = 0;
      unint64_t v20 = (unint64_t)(63 - v15) >> 6;
      while (++v17 != v20 || (v19 & 1) == 0)
      {
        BOOL v21 = v17 == v20;
        if (v17 == v20) {
          unint64_t v17 = 0;
        }
        v19 |= v21;
        uint64_t v22 = *(void *)&v8[8 * v17];
        if (v22 != -1)
        {
          unint64_t v18 = __clz(__rbit64(~v22)) + (v17 << 6);
          goto LABEL_34;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)&v8[8 * (v16 >> 6)])) | v16 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(void *)&v8[(v18 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v18;
    uint64_t v23 = v2[6] + 40 * v18;
    *(_OWORD *)uint64_t v23 = v24;
    *(_OWORD *)(v23 + 16) = v25;
    *(void *)(v23 + 32) = v26;
    ++v2[2];
    if (v6) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v11 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_38;
    }
    if (v11 >= v7) {
      goto LABEL_36;
    }
    uint64_t v12 = *(void *)(v3 + 8 * v11);
    int64_t v13 = v10 + 1;
    if (!v12)
    {
      int64_t v13 = v10 + 2;
      if (v10 + 2 >= v7) {
        goto LABEL_36;
      }
      uint64_t v12 = *(void *)(v3 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v10 + 3;
        if (v10 + 3 >= v7) {
          goto LABEL_36;
        }
        uint64_t v12 = *(void *)(v3 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v10 + 4;
          if (v10 + 4 >= v7) {
            goto LABEL_36;
          }
          uint64_t v12 = *(void *)(v3 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_24:
    uint64_t v6 = (v12 - 1) & v12;
    int64_t v10 = v13;
  }
  int64_t v14 = v10 + 5;
  if (v10 + 5 >= v7)
  {
LABEL_36:
    swift_release();
    sub_100017254();
    return (uint64_t)v2;
  }
  uint64_t v12 = *(void *)(v3 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v10 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v7) {
      goto LABEL_36;
    }
    uint64_t v12 = *(void *)(v3 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_24;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_100009AB0()
{
  sub_100009C64();
  uint64_t v2 = v1;
  uint64_t v3 = *(int **)(v0 + 16);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_1000121C4(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_100008208;
  int64_t v7 = (uint64_t (*)(uint64_t, int *))((char *)&dword_10012F9B0 + dword_10012F9B0);
  return v7(v2, v3);
}

uint64_t sub_100009B60(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1000AAF34();
  v4(v3);
  sub_10000A430();
  sub_100008000();
  v5();
  return a2;
}

uint64_t sub_100009BBC(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_1000082F8();
  uint64_t v4 = sub_100007F20();
  v5(v4);
  return a2;
}

uint64_t sub_100009C10(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1000AAF34();
  v4(v3);
  sub_10000A430();
  uint64_t v5 = sub_100007F20();
  v6(v5);
  return a2;
}

uint64_t sub_100009C70()
{
  return type metadata accessor for AccountIdentity.DSID();
}

uint64_t sub_100009C88()
{
  uint64_t v2 = *(void *)(v0 + 1016);
  uint64_t v3 = *(void *)(v0 + 1024);
  return sub_1000186E8(v2, v3, 1u);
}

uint64_t sub_100009CAC()
{
  return v0;
}

uint64_t sub_100009CC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v26 = *v3;
  type metadata accessor for DispatchWorkItemFlags();
  sub_10000BFC4();
  uint64_t v31 = v6;
  __chkstk_darwin(v7);
  sub_100008338();
  type metadata accessor for DispatchQoS();
  sub_10000BFC4();
  uint64_t v29 = v9;
  uint64_t v30 = v8;
  __chkstk_darwin(v8);
  sub_1000121E8();
  uint64_t v10 = type metadata accessor for DispatchTime();
  sub_10000BFC4();
  uint64_t v12 = v11;
  uint64_t v14 = __chkstk_darwin(v13);
  unint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  unint64_t v18 = (char *)&v25 - v17;
  uint64_t v27 = v3[2];
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v12 + 8);
  v28(v16, v10);
  char v19 = (void *)swift_allocObject();
  v19[2] = v3;
  v19[3] = a1;
  uint64_t v20 = v26;
  v19[4] = a2;
  v19[5] = v20;
  aBlock[4] = sub_1000B7688;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000B7388;
  aBlock[3] = &unk_100116AB0;
  BOOL v21 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  char v32 = &_swiftEmptyArrayStorage;
  sub_100017394(&qword_100130010, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100011D80(&qword_100130018);
  sub_1000172B0(&qword_100130020, &qword_100130018);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v21);
  sub_1000084F8();
  v22();
  sub_1000084F8();
  v23();
  v28(v18, v10);
  return swift_release();
}

uint64_t sub_100009FFC()
{
  uint64_t v2 = *(void **)(v0 + 232);
  uint64_t v1 = *(void *)(v0 + 240);
  static Log.accountsDataSync.getter();
  sub_100011D80((uint64_t *)&unk_10012E440);
  uint64_t v3 = sub_100005AD4();
  sub_1000082C8(v3);
  uint64_t v4 = sub_100016390();
  *(void *)(v0 + 96) = v2;
  *(_OWORD *)(v4 + 16) = xmmword_1000DA3F0;
  *(void *)(v0 + 120) = v1;
  id v5 = v2;
  id v6 = (id)AMSLogKey();
  if (v6)
  {
    uint64_t v7 = v6;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  uint64_t v8 = *(void *)(v0 + 248);
  uint64_t v23 = *(void *)(v0 + 256);
  uint64_t v22 = *(void *)(v0 + 232);
  uint64_t v21 = *(void *)(v0 + 224);
  uint64_t v9 = *(void *)(v0 + 208);
  uint64_t v20 = *(void *)(v0 + 216);
  static LogInterpolation.prefix(_:_:)();
  swift_bridgeObjectRelease();
  sub_10000D47C(v0 + 96);
  LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v10._object = (void *)0x8000000100102870;
  v10._countAndFlagsBits = 0xD000000000000024;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(v10);
  *(void *)(v0 + 152) = v8;
  uint64_t v11 = sub_1000042C4((uint64_t *)(v0 + 128));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v23 + 16))(v11, v9, v8);
  LogInterpolation.StringInterpolation.appendInterpolation(_:)();
  sub_1000AABFC(v0 + 128, &qword_10012EFB0);
  v12._countAndFlagsBits = 0x20726F6620;
  v12._object = (void *)0xE500000000000000;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(v12);
  *(void *)(v0 + 88) = &type metadata for String;
  *(void *)(v0 + 64) = v20;
  *(void *)(v0 + 72) = v21;
  swift_bridgeObjectRetain();
  LogInterpolation.StringInterpolation.appendInterpolation(_:)();
  sub_1000AABFC(v0 + 64, &qword_10012EFB0);
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(v13);
  LogInterpolation.init(stringInterpolation:)();
  Log.debug(_:)();
  swift_bridgeObjectRelease();
  sub_1000084F8();
  v14();
  uint64_t v15 = (void *)(v22 + OBJC_IVAR____TtC12amsaccountsd23CachedServerDataService_metrics);
  static Date.now.getter();
  sub_100005DF8(v9, v20, v21);
  sub_1000087B0(v15, v15[3]);
  sub_1000165B8();
  v16();
  *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 16);
  sub_10000A378(v0 + 176);
  *(_OWORD *)(v0 + 160) = *(_OWORD *)(v0 + 32);
  sub_10000A378(v0 + 160);
  *(void *)(v0 + 192) = *(void *)(v0 + 48);
  sub_10000A3A4(v0 + 192);
  *(void *)(v0 + 200) = *(void *)(v0 + 56);
  sub_10000A3A4(v0 + 200);
  sub_1000084F8();
  v17();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000800C();
  return v18();
}

uint64_t sub_10000A378(uint64_t a1)
{
  return a1;
}

uint64_t sub_10000A3A4(uint64_t a1)
{
  return a1;
}

uint64_t sub_10000A3D0()
{
  return LogInterpolation.init(stringLiteral:)();
}

uint64_t sub_10000A3E8()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

void sub_10000A40C()
{
  uint64_t v2 = *(void *)(v0 + 16) + 1;
  sub_100016EE0(0, v2, 1, v0);
}

uint64_t sub_10000A448@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 + 528) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)(v1 + 528, v2);
}

uint64_t sub_10000A4D8()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

id sub_10000A4F0(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

unsigned __int16 sub_10000A508@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>)
{
  return vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(*(int64x2_t *)(a1 + 8), *(int64x2_t *)(a2 + 8)), (int32x4_t)vceqq_s64(*(int64x2_t *)(a1 + 24), *(int64x2_t *)(a2 + 24)))), 0xFuLL)));
}

uint64_t sub_10000A53C()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_10000A55C()
{
  uint64_t result = *(void *)(v1 + 8);
  *(unsigned char *)(v0 + *(int *)(v2 + 24)) = *(unsigned char *)(v1 + *(int *)(v3 + 40));
  return result;
}

uint64_t sub_10000A578()
{
  return LogInterpolation.init(stringLiteral:)();
}

uint64_t sub_10000A5A8()
{
  return v0;
}

uint64_t sub_10000A5D0(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  v86 = a4;
  uint64_t v7 = type metadata accessor for LogInterpolation.StringInterpolation();
  __chkstk_darwin(v7 - 8);
  uint64_t v87 = type metadata accessor for Log();
  uint64_t v90 = *(void *)(v87 - 8);
  uint64_t v8 = __chkstk_darwin(v87);
  Swift::String v10 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v82 = (char *)&v72 - v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v72 - v13;
  uint64_t v85 = type metadata accessor for OSSignpostID();
  uint64_t v89 = *(void *)(v85 - 8);
  uint64_t v15 = __chkstk_darwin(v85);
  uint64_t v81 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  unint64_t v18 = (char *)&v72 - v17;
  char v19 = *(void **)(a1 + OBJC_IVAR____TtC12amsaccountsd20LiveTransactionStore_transactionSet);
  NSString v20 = String._bridgeToObjectiveC()();
  [v19 addObject:v20];

  uint64_t v21 = (void (*)(char *, uint64_t))(a1 + OBJC_IVAR____TtC12amsaccountsd20LiveTransactionStore_signposter);
  String._bridgeToObjectiveC()();
  uint64_t v84 = v21;
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:object:)();
  uint64_t v88 = a2;
  NSString v22 = String._bridgeToObjectiveC()();
  id v23 = [v19 countForObject:v22];

  if (v23 == (id)1)
  {
    static Log.accountsDaemon.getter();
    uint64_t v24 = sub_100011D80((uint64_t *)&unk_10012E440);
    uint64_t v25 = *(void *)(type metadata accessor for LogInterpolation() - 8);
    uint64_t v26 = *(void *)(v25 + 72);
    uint64_t v27 = *(unsigned __int8 *)(v25 + 80);
    uint64_t v28 = (v27 + 32) & ~v27;
    uint64_t v78 = v24;
    uint64_t v79 = v26;
    uint64_t v75 = v27 | 7;
    uint64_t v76 = v28 + 2 * v26;
    uint64_t v29 = swift_allocObject();
    long long v74 = xmmword_1000DA3F0;
    *(_OWORD *)(v29 + 16) = xmmword_1000DA3F0;
    uint64_t v77 = v28;
    v94 = v86;
    uint64_t v92 = a1;
    uint64_t v80 = a1;
    swift_retain();
    id v30 = (id)AMSLogKey();
    char v83 = v18;
    if (v30)
    {
      uint64_t v31 = v30;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    uint64_t v35 = v90;
    static LogInterpolation.prefix(_:_:)();
    swift_bridgeObjectRelease();
    sub_10000D47C((uint64_t)&v92);
    LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v36._countAndFlagsBits = 0xD000000000000016;
    v36._object = (void *)0x8000000100103310;
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v36);
    v94 = &type metadata for String;
    uint64_t v37 = v88;
    uint64_t v92 = v88;
    unint64_t v93 = a3;
    swift_bridgeObjectRetain();
    LogInterpolation.StringInterpolation.appendInterpolation(safe:)();
    sub_100016B90((uint64_t)&v92);
    v38._countAndFlagsBits = 0;
    v38._object = (void *)0xE000000000000000;
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v38);
    LogInterpolation.init(stringInterpolation:)();
    Log.info(_:)();
    swift_bridgeObjectRelease();
    uint64_t v84 = *(void (**)(char *, uint64_t))(v35 + 8);
    uint64_t v90 = v35 + 8;
    v84(v14, v87);
    swift_bridgeObjectRetain_n();
    uint64_t v39 = OSSignposter.logHandle.getter();
    int v40 = static os_signpost_type_t.begin.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v89 + 16);
      char v42 = v81;
      v41(v81, v83, v85);
      HIDWORD(v73) = v40;
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      uint64_t v92 = swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v91 = sub_1000173DC(v37, a3, &v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      os_signpost_id_t v44 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v39, BYTE4(v73), v44, "Transaction", "%s", v43, 0xCu);
      swift_arrayDestroy();
      uint64_t v45 = v85;
      swift_slowDealloc();
      uint64_t v46 = v83;
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v89 + 8))(v42, v45);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v89 + 16);
      uint64_t v45 = v85;
      uint64_t v46 = v83;
      char v42 = v81;
    }
    v41(v42, v46, v45);
    type metadata accessor for OSSignpostIntervalState();
    swift_allocObject();
    OSSignpostIntervalState.init(id:isOpen:)();
    uint64_t v47 = v80;
    uint64_t v48 = (uint64_t *)(v80 + OBJC_IVAR____TtC12amsaccountsd20LiveTransactionStore_transactionSignpostStateStore);
    swift_beginAccess();
    uint64_t v49 = *v48;
    swift_bridgeObjectRetain();
    uint64_t v50 = sub_100017300(v37, a3, v49);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_release();
    if (v50)
    {
      static Log.accountsDaemon.getter();
      *(_OWORD *)(swift_allocObject() + 16) = v74;
      v94 = v86;
      uint64_t v92 = v47;
      swift_retain();
      id v51 = (id)AMSLogKey();
      if (v51)
      {
        Class v52 = v51;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      static LogInterpolation.prefix(_:_:)();
      swift_bridgeObjectRelease();
      sub_10000D47C((uint64_t)&v92);
      LogInterpolation.init(stringLiteral:)();
      uint64_t v60 = v82;
      Log.fault(_:)();
      swift_bridgeObjectRelease();
      v84(v60, v87);
      uint64_t v37 = v88;
    }
    String.utf8CString.getter();
    swift_bridgeObjectRetain();
    uint64_t v61 = os_transaction_create();
    swift_release();
    swift_beginAccess();
    if (v61)
    {
      sub_10000B0CC(v61, v37, a3, (uint64_t)sub_100016BF0, v62, v63, v64, v65, v72, v73);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1000B804C(v37, a3);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
    swift_endAccess();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v66 = swift_retain();
    sub_10000B0CC(v66, v37, a3, (uint64_t)sub_100016D18, v67, v68, v69, v70, v72, v73);
    swift_endAccess();
    swift_release();
    swift_bridgeObjectRelease();
    id v58 = v83;
  }
  else
  {
    static Log.accountsDaemon.getter();
    sub_100011D80((uint64_t *)&unk_10012E440);
    type metadata accessor for LogInterpolation();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3F0;
    v94 = v86;
    uint64_t v92 = a1;
    swift_retain();
    id v32 = (id)AMSLogKey();
    if (v32)
    {
      uint64_t v33 = v32;
      char v34 = v18;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      char v34 = v18;
    }
    static LogInterpolation.prefix(_:_:)();
    swift_bridgeObjectRelease();
    sub_10000D47C((uint64_t)&v92);
    LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v53._object = (void *)0x80000001001032F0;
    v53._countAndFlagsBits = 0xD000000000000014;
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v53);
    v94 = &type metadata for String;
    uint64_t v92 = v88;
    unint64_t v93 = a3;
    swift_bridgeObjectRetain();
    LogInterpolation.StringInterpolation.appendInterpolation(safe:)();
    sub_100016B90((uint64_t)&v92);
    v54._countAndFlagsBits = 0;
    v54._object = (void *)0xE000000000000000;
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v54);
    LogInterpolation.init(stringInterpolation:)();
    Log.info(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v90 + 8))(v10, v87);
    uint64_t v55 = OSSignposter.logHandle.getter();
    os_signpost_type_t v56 = static os_signpost_type_t.event.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v57 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v57 = 0;
      id v58 = v34;
      os_signpost_id_t v59 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v55, v56, v59, "Transaction", "Transaction joined", v57, 2u);
      swift_slowDealloc();

      uint64_t v45 = v85;
    }
    else
    {

      uint64_t v45 = v85;
      id v58 = v34;
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v89 + 8))(v58, v45);
}

uint64_t sub_10000B0CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10000B25C();
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  swift_isUniquelyReferenced_nonNull_native();
  sub_10000B394();
  v12(v18, v16, v14);
  *Swift::String v10 = a10;
  sub_100011F8C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10000B14C()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t sub_10000B17C(uint64_t a1)
{
  return sub_1000101E8(a1, 1, 1, v1);
}

unint64_t sub_10000B198(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFFFFCLL | v1 & 3;
}

uint64_t sub_10000B1B0()
{
  return v0;
}

uint64_t sub_10000B1C0()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t sub_10000B1DC()
{
  return static LogInterpolation.prefix(_:_:)();
}

uint64_t sub_10000B270()
{
  uint64_t v3 = v0[329];
  *(void *)(v1 - 120) = v0[325];
  *(void *)(v1 - 112) = v3;
  *(void *)(v1 - 128) = v0[324];
  *(void *)(v1 - 136) = v0[310];
  return static LogInterpolation.prefix(_:_:)();
}

uint64_t sub_10000B2D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001044C(a1, a2, a3);
}

uint64_t sub_10000B2FC()
{
  return swift_allocError();
}

void sub_10000B338(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 2 * (a1 / v3);
}

unint64_t sub_10000B364()
{
  return 0xD000000000000012;
}

void sub_10000B378(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 128) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_10000B394()
{
  void *v0 = 0x8000000000000000;
}

void sub_10000B824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose((const void *)(v31 - 176), 8);
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000B9AC(uint64_t a1)
{
  uint64_t v18 = Set.init(minimumCapacity:)();
  uint64_t result = sub_100016E88(a1, v19);
  uint64_t v3 = v19[0];
  uint64_t v4 = v19[1];
  int64_t v5 = v19[3];
  unint64_t v6 = v20;
  int64_t v7 = (unint64_t)(v19[2] + 64) >> 6;
  if (!v20) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v9 = v8 | (v5 << 6);
  while (1)
  {
    uint64_t v14 = (Swift::Int *)(*(void *)(v3 + 48) + 16 * v9);
    Swift::Int v15 = *v14;
    Swift::Int v16 = v14[1];
    swift_bridgeObjectRetain();
    sub_10000BE2C(&v17, v15, v16);
    uint64_t result = swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v10 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      break;
    }
    if (v10 >= v7) {
      goto LABEL_21;
    }
    unint64_t v11 = *(void *)(v4 + 8 * v10);
    int64_t v12 = v5 + 1;
    if (!v11)
    {
      int64_t v12 = v5 + 2;
      if (v5 + 2 >= v7) {
        goto LABEL_21;
      }
      unint64_t v11 = *(void *)(v4 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v5 + 3;
        if (v5 + 3 >= v7) {
          goto LABEL_21;
        }
        unint64_t v11 = *(void *)(v4 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v5 + 4;
          if (v5 + 4 >= v7) {
            goto LABEL_21;
          }
          unint64_t v11 = *(void *)(v4 + 8 * v12);
          if (!v11)
          {
            int64_t v12 = v5 + 5;
            if (v5 + 5 >= v7) {
              goto LABEL_21;
            }
            unint64_t v11 = *(void *)(v4 + 8 * v12);
            if (!v11)
            {
              int64_t v13 = v5 + 6;
              while (v13 < v7)
              {
                unint64_t v11 = *(void *)(v4 + 8 * v13++);
                if (v11)
                {
                  int64_t v12 = v13 - 1;
                  goto LABEL_18;
                }
              }
LABEL_21:
              swift_release();
              return v18;
            }
          }
        }
      }
    }
LABEL_18:
    unint64_t v6 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
    int64_t v5 = v12;
  }
  __break(1u);
  return result;
}

uint64_t sub_10000BB2C()
{
  sub_100008308();
  v1[28] = v2;
  v1[29] = v0;
  v1[26] = v3;
  v1[27] = v4;
  v1[30] = swift_getObjectType();
  uint64_t v5 = type metadata accessor for Date();
  v1[31] = v5;
  sub_1000082C8(v5);
  v1[32] = v6;
  v1[33] = sub_1000084E0();
  uint64_t v7 = type metadata accessor for LogInterpolation.StringInterpolation();
  sub_1000085F4(v7);
  v1[34] = sub_1000084E0();
  uint64_t v8 = type metadata accessor for Log();
  v1[35] = v8;
  sub_1000082C8(v8);
  v1[36] = v9;
  v1[37] = sub_1000084E0();
  sub_10000F9E8();
  return _swift_task_switch(v10, v11, v12);
}

uint64_t sub_10000BC18()
{
  sub_100008308();
  v1[40] = v2;
  v1[41] = v0;
  v1[42] = swift_getObjectType();
  uint64_t v3 = type metadata accessor for AccountIdentity();
  v1[43] = v3;
  sub_1000082C8(v3);
  v1[44] = v4;
  v1[45] = sub_1000084E0();
  uint64_t v5 = type metadata accessor for Date();
  v1[46] = v5;
  sub_1000082C8(v5);
  v1[47] = v6;
  v1[48] = sub_1000084E0();
  uint64_t v7 = type metadata accessor for AccountDataState(0);
  v1[49] = v7;
  sub_1000082C8(v7);
  v1[50] = v8;
  v1[51] = sub_100015F90();
  v1[52] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Log();
  v1[53] = v9;
  sub_1000082C8(v9);
  v1[54] = v10;
  v1[55] = sub_100015F90();
  v1[56] = swift_task_alloc();
  sub_10000F9E8();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t sub_10000BD58()
{
  return 0;
}

uint64_t sub_10000BD74()
{
  return _NativeDictionary._delete(at:)();
}

uint64_t sub_10000BD90(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v4 = *(v3 - 1);
      Swift::Int v5 = *v3;
      swift_bridgeObjectRetain();
      sub_10000BE2C(&v8, v4, v5);
      swift_bridgeObjectRelease();
      v3 += 2;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
    return v9;
  }
  else
  {
    uint64_t v6 = a2;
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_10000BE2C(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  sub_10000C04C();
  if (v11)
  {
    uint64_t v12 = *(void *)(v7 + 48);
    uint64_t v13 = (void *)(v12 + 16 * v10);
    BOOL v14 = *v13 == a2 && v13[1] == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v15 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v18 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v18;
      sub_10000C04C();
      if ((v19 & 1) == 0) {
        break;
      }
      unint64_t v20 = (void *)(v12 + 16 * v10);
      BOOL v21 = *v20 == a2 && v20[1] == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v23 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_10000C074(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v23;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

void sub_10000BFE0()
{
  strcpy(v0, "xp_amp_ams_log");
  v0[15] = -18;
}

void sub_10000C01C(uint64_t a1@<X8>)
{
  v2[126] = a1;
  v2[125] = v1;
  uint64_t v3 = v2[122] + 24 * a1;
  v2[127] = *(void *)(v3 + 32);
  v2[128] = *(void *)(v3 + 40);
}

char *sub_10000C060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  return &a10;
}

Swift::Int sub_10000C074(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  Swift::Int v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_10000C210();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_1000B4F40();
      goto LABEL_22;
    }
    sub_1000B5384();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  BOOL v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *BOOL v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t sub_10000C210()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100011D80(&qword_10012E578);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    id v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
    {
      uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          BOOL v26 = v22 == v25;
          if (v22 == v25) {
            unint64_t v22 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v9 + 8 * v22);
          if (v27 != -1)
          {
            unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      uint64_t v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
      *uint64_t v28 = v18;
      v28[1] = v19;
      ++*(void *)(v4 + 16);
      if (v7) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v14 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_38;
      }
      if (v14 >= v8) {
        goto LABEL_32;
      }
      unint64_t v15 = v30[v14];
      ++v11;
      if (!v15)
      {
        int64_t v11 = v14 + 1;
        if (v14 + 1 >= v8) {
          goto LABEL_32;
        }
        unint64_t v15 = v30[v11];
        if (!v15)
        {
          int64_t v11 = v14 + 2;
          if (v14 + 2 >= v8) {
            goto LABEL_32;
          }
          unint64_t v15 = v30[v11];
          if (!v15)
          {
            int64_t v16 = v14 + 3;
            if (v16 >= v8)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v0;
              uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
              if (v29 > 63) {
                sub_1000B4914(0, (unint64_t)(v29 + 63) >> 6, v30);
              }
              else {
                *id v30 = -1 << v29;
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v15 = v30[v16];
            if (!v15)
            {
              while (1)
              {
                int64_t v11 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_39;
                }
                if (v11 >= v8) {
                  goto LABEL_32;
                }
                unint64_t v15 = v30[v11];
                ++v16;
                if (v15) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v11 = v16;
          }
        }
      }
LABEL_20:
      unint64_t v7 = (v15 - 1) & v15;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

void sub_10000C4EC(uint64_t a1)
{
  id v2 = (id)AMSSetLogKey();
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100007770;
  v7[3] = &unk_1001145A0;
  uint64_t v4 = *(NSObject **)(a1 + 40);
  id v8 = *(id *)(a1 + 32);
  id v5 = *(id *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  id v10 = v5;
  uint64_t v11 = v6;
  id v9 = *(id *)(a1 + 48);
  dispatch_async(v4, v7);
}

void sub_10000C5D4(uint64_t a1)
{
  id v2 = +[AMSLogConfig sharedAccountsCookiesConfig];
  if (!v2)
  {
    id v2 = +[AMSLogConfig sharedConfig];
  }
  uint64_t v3 = [v2 OSLogObject];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = AMSLogKey();
    uint64_t v5 = objc_opt_class();
    uint64_t v6 = v5;
    if (v4)
    {
      unint64_t v7 = AMSLogKey();
      id v8 = +[NSString stringWithFormat:@"%@: [%@] ", v6, v7];
    }
    else
    {
      id v8 = +[NSString stringWithFormat:@"%@: ", v5];
      unint64_t v7 = v8;
    }
    id v9 = NSStringFromSelector(*(SEL *)(a1 + 80));
    *(_DWORD *)buf = 138543618;
    id v32 = v8;
    __int16 v33 = 2114;
    char v34 = v9;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "%{public}@%{public}@ - performing block", buf, 0x16u);
    if (v4) {
  }
    }
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  v30[2] = sub_10000C8D8;
  v30[3] = &unk_100112368;
  uint64_t v10 = *(void *)(a1 + 80);
  v30[4] = *(void *)(a1 + 32);
  v30[5] = v10;
  uint64_t v11 = objc_retainBlock(v30);
  unint64_t v12 = [*(id *)(a1 + 40) identifier];
  BOOL v13 = v12 == 0;

  if (!v13)
  {
    int64_t v14 = *(void **)(a1 + 32);
    unint64_t v15 = [*(id *)(a1 + 40) identifier];
    [v14 _cacheCookieProperties:0 forIdentifier:v15];
  }
  int64_t v16 = *(void **)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  id v29 = 0;
  uint64_t v18 = [v16 _cookieDatabaseForAccount:v17 error:&v29];
  id v19 = v29;
  uint64_t v20 = v19;
  if (v18)
  {
    uint64_t v21 = *(void *)(a1 + 48);
    uint64_t v22 = *(void *)(a1 + 56);
    id v28 = v19;
    unsigned __int8 v23 = [v18 updateCookiesWithCookiePropertiesToAdd:v21 cookiePropertiesToRemove:v22 error:&v28];
    id v24 = v28;

    uint64_t v20 = v24;
  }
  else
  {
    unsigned __int8 v23 = 0;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v23;
  uint64_t v25 = *(void *)(*(void *)(a1 + 72) + 8);
  BOOL v26 = *(void **)(v25 + 40);
  *(void *)(v25 + 40) = v20;
  id v27 = v20;

  ((void (*)(void *))v11[2])(v11);
}

void sub_10000C8A4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_10000C8D8(uint64_t a1)
{
  uint64_t v3 = +[AMSLogConfig sharedAccountsCookiesConfig];
  if (!v3)
  {
    uint64_t v3 = +[AMSLogConfig sharedConfig];
  }
  uint64_t v4 = [v3 OSLogObject];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = AMSLogKey();
    uint64_t v6 = objc_opt_class();
    uint64_t v7 = v6;
    if (v5)
    {
      uint64_t v1 = AMSLogKey();
      +[NSString stringWithFormat:@"%@: [%@] ", v7, v1];
    }
    else
    {
      +[NSString stringWithFormat:@"%@: ", v6];
    id v8 = };
    id v9 = NSStringFromSelector(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 138543618;
    uint64_t v11 = v8;
    __int16 v12 = 2114;
    BOOL v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%{public}@%{public}@ - finishing block", buf, 0x16u);
    if (v5)
    {

      id v8 = (void *)v1;
    }
  }
}

void sub_10000CE40(uint64_t *a1)
{
  sub_100017214();
  swift_bridgeObjectRetain();
  id v2 = sub_100006608();
  sub_100004328(a1[2], a1[3], v2);
  [v2 setSuppressEngagement:1];
  NSString v3 = [self operatingSystem];
  if (!v3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  NSString v4 = String._bridgeToObjectiveC()();
  [v2 setProperty:v3 forBodyKey:v4];

  uint64_t v5 = a1[4];
  uint64_t v31 = v5 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(v5 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v10 = 0;
  if (!v8) {
    goto LABEL_8;
  }
LABEL_6:
  unint64_t v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v12 = v11 | (v10 << 6);
  while (2)
  {
    uint64_t v13 = *(void *)(v5 + 56);
    int64_t v14 = (void *)(*(void *)(v5 + 48) + 16 * v12);
    uint64_t v15 = v14[1];
    *(void *)&long long v32 = *v14;
    *((void *)&v32 + 1) = v15;
    sub_1000115F4(v13 + 32 * v12, (uint64_t)v33);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_10000D254((uint64_t)&v32, (uint64_t)v34);
      if (!v34[1])
      {
        swift_release();
        uint64_t v21 = swift_bridgeObjectRetain();
        uint64_t v22 = sub_10000B9AC(v21);
        uint64_t v23 = swift_bridgeObjectRetain();
        uint64_t v24 = sub_10000BD90(v23, v22);
        id v25 = [v2 underlyingDictionary];
        uint64_t v26 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v27 = sub_10000DE64(v26);
        uint64_t v28 = sub_1000097C0(v24);
        swift_bridgeObjectRelease();
        v34[0] = v27;
        sub_10000D810(v28);
        id v29 = sub_100005B2C(v34[0]);
        swift_bridgeObjectRelease();
        sub_10000D4CC((uint64_t)v29);
        swift_release();
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v2 removePropertiesForKeys:isa];

        return;
      }
      sub_10000D5F4(&v35, &v32);
      sub_1000087B0(&v32, *((uint64_t *)&v33[0] + 1));
      uint64_t v19 = _bridgeAnythingToObjectiveC<A>(_:)();
      sub_10000D47C((uint64_t)&v32);
      NSString v20 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v2 setProperty:v19 forBodyKey:v20];
      swift_unknownObjectRelease();

      if (v8) {
        goto LABEL_6;
      }
LABEL_8:
      int64_t v16 = v10 + 1;
      if (__OFADD__(v10, 1))
      {
        __break(1u);
        goto LABEL_31;
      }
      if (v16 < v9)
      {
        unint64_t v17 = *(void *)(v31 + 8 * v16);
        if (v17) {
          goto LABEL_11;
        }
        int64_t v18 = v10 + 2;
        ++v10;
        if (v16 + 1 < v9)
        {
          unint64_t v17 = *(void *)(v31 + 8 * v18);
          if (v17) {
            goto LABEL_14;
          }
          int64_t v10 = v16 + 1;
          if (v16 + 2 < v9)
          {
            unint64_t v17 = *(void *)(v31 + 8 * (v16 + 2));
            if (v17)
            {
              v16 += 2;
              goto LABEL_11;
            }
            int64_t v18 = v16 + 3;
            int64_t v10 = v16 + 2;
            if (v16 + 3 < v9) {
              break;
            }
          }
        }
      }
LABEL_25:
      unint64_t v8 = 0;
      memset(v33, 0, sizeof(v33));
      long long v32 = 0u;
    }
    unint64_t v17 = *(void *)(v31 + 8 * v18);
    if (v17)
    {
LABEL_14:
      int64_t v16 = v18;
LABEL_11:
      unint64_t v8 = (v17 - 1) & v17;
      unint64_t v12 = __clz(__rbit64(v17)) + (v16 << 6);
      int64_t v10 = v16;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v16 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v16 >= v9)
    {
      int64_t v10 = v9 - 1;
      goto LABEL_25;
    }
    unint64_t v17 = *(void *)(v31 + 8 * v16);
    ++v18;
    if (v17) {
      goto LABEL_11;
    }
  }
LABEL_31:
  __break(1u);
}

uint64_t sub_10000D254(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100011D80((uint64_t *)&unk_10012EFA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000D2BC()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10000D304()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_10000D320()
{
  return KeyedDecodingContainer.decode(_:forKey:)(v0 + 528, v1);
}

uint64_t sub_10000D378(uint64_t a1, uint64_t a2)
{
  return sub_1000101E8(a1, a2, 1, v2);
}

uint64_t sub_10000D3A0()
{
  return v0;
}

NSString sub_10000D3BC()
{
  return String._bridgeToObjectiveC()();
}

__n128 sub_10000D3D4()
{
  long long v3 = *(_OWORD *)(v2 - 128);
  *(_OWORD *)(v2 - 160) = *(_OWORD *)(v2 - 112);
  *(_OWORD *)(v2 - 144) = v3;
  uint64_t v4 = *(void *)(v2 - 96);
  uint64_t v5 = *(void *)(v2 - 88);
  sub_10000D47C(v0);
  __n128 result = *(__n128 *)(v2 - 160);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)(v2 - 144);
  *(__n128 *)(v1 + 16) = result;
  *(void *)(v1 + 32) = v4;
  *(void *)(v1 + 40) = v5;
  return result;
}

uint64_t sub_10000D40C()
{
  return v0;
}

uint64_t sub_10000D448()
{
  return v0;
}

void sub_10000D460()
{
  void *v0 = 0x8000000000000000;
}

uint64_t sub_10000D47C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

void *sub_10000D4CC(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = &_swiftEmptyArrayStorage;
  if (v1)
  {
    int64_t v10 = &_swiftEmptyArrayStorage;
    sub_100016EC0(0, v1, 0);
    uint64_t v4 = a1 + 32;
    uint64_t v2 = &_swiftEmptyArrayStorage;
    do
    {
      sub_10000E170(v4, (uint64_t)&v8);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100016EC0(0, v2[2] + 1, 1);
        uint64_t v2 = v10;
      }
      unint64_t v6 = v2[2];
      unint64_t v5 = v2[3];
      if (v6 >= v5 >> 1)
      {
        sub_100016EC0((char *)(v5 > 1), v6 + 1, 1);
        uint64_t v2 = v10;
      }
      v2[2] = v6 + 1;
      sub_10000D5F4(&v9, &v2[4 * v6 + 4]);
      v4 += 40;
      --v1;
    }
    while (v1);
  }
  return v2;
}

_OWORD *sub_10000D5F4(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10000D604(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v13 = 0;
LABEL_36:
    *unint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v13;
  }
  if (!a3)
  {
    int64_t v12 = 0;
    uint64_t v13 = 0;
    goto LABEL_36;
  }
  if (a3 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  uint64_t v22 = -1 << *(unsigned char *)(a4 + 32);
  while (v9)
  {
    unint64_t v15 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v16 = v15 | (v12 << 6);
LABEL_23:
    ++v13;
    __n128 result = sub_10000E170(*(void *)(a4 + 48) + 40 * v16, (uint64_t)v23);
    uint64_t v20 = v24;
    long long v21 = v23[1];
    *(_OWORD *)uint64_t v11 = v23[0];
    *(_OWORD *)(v11 + 16) = v21;
    *(void *)(v11 + 32) = v20;
    v11 += 40;
    if (v13 == a3)
    {
      uint64_t v13 = a3;
LABEL_35:
      uint64_t v7 = v22;
      goto LABEL_36;
    }
  }
  int64_t v17 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v17 >= v14) {
    goto LABEL_34;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v17);
  if (v18) {
    goto LABEL_22;
  }
  int64_t v19 = v12 + 2;
  ++v12;
  if (v17 + 1 >= v14) {
    goto LABEL_34;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_15;
  }
  int64_t v12 = v17 + 1;
  if (v17 + 2 >= v14) {
    goto LABEL_34;
  }
  unint64_t v18 = *(void *)(v6 + 8 * (v17 + 2));
  if (v18)
  {
    v17 += 2;
    goto LABEL_22;
  }
  int64_t v12 = v17 + 2;
  if (v17 + 3 >= v14) {
    goto LABEL_34;
  }
  unint64_t v18 = *(void *)(v6 + 8 * (v17 + 3));
  if (v18)
  {
    v17 += 3;
    goto LABEL_22;
  }
  int64_t v19 = v17 + 4;
  int64_t v12 = v17 + 3;
  if (v17 + 4 >= v14)
  {
LABEL_34:
    unint64_t v9 = 0;
    goto LABEL_35;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_15:
    int64_t v17 = v19;
LABEL_22:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      int64_t v12 = v14 - 1;
      goto LABEL_34;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10000D810(uint64_t result)
{
  long long v2 = v1;
  uint64_t v3 = result;
  int64_t v4 = 0;
  uint64_t v21 = result + 56;
  uint64_t v5 = -1 << *(unsigned char *)(result + 32);
  if (-v5 < 64) {
    uint64_t v6 = ~(-1 << -(char)v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(result + 56);
  int64_t v20 = (unint64_t)(63 - v5) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v8 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v9 = v8 | (v4 << 6);
      goto LABEL_21;
    }
    int64_t v10 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v10 >= v20) {
      return sub_100017254();
    }
    unint64_t v11 = *(void *)(v21 + 8 * v10);
    int64_t v12 = v4 + 1;
    if (!v11)
    {
      int64_t v12 = v4 + 2;
      if (v4 + 2 >= v20) {
        return sub_100017254();
      }
      unint64_t v11 = *(void *)(v21 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v4 + 3;
        if (v4 + 3 >= v20) {
          return sub_100017254();
        }
        unint64_t v11 = *(void *)(v21 + 8 * v12);
        if (!v11) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v7 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
    int64_t v4 = v12;
LABEL_21:
    sub_10000E170(*(void *)(v3 + 48) + 40 * v9, (uint64_t)v25);
    uint64_t v24 = v26;
    v23[0] = v25[0];
    v23[1] = v25[1];
    uint64_t v14 = *v2;
    if (*(void *)(*v2 + 16)
      && (Swift::Int v15 = AnyHashable._rawHashValue(seed:)(*(void *)(v14 + 40)),
          uint64_t v16 = -1 << *(unsigned char *)(v14 + 32),
          unint64_t v17 = v15 & ~v16,
          ((*(void *)(v14 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v17) & 1) != 0))
    {
      uint64_t v18 = ~v16;
      while (1)
      {
        sub_10000E170(*(void *)(v14 + 48) + 40 * v17, (uint64_t)v22);
        char v19 = static AnyHashable.== infix(_:_:)();
        sub_10000DA8C((uint64_t)v22);
        if (v19) {
          break;
        }
        unint64_t v17 = (v17 + 1) & v18;
        if (((*(void *)(v14 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v17) & 1) == 0) {
          goto LABEL_26;
        }
      }
      sub_10000DB40((uint64_t)v22);
      sub_10000DAE0((uint64_t)v22);
      __n128 result = sub_10000DA8C((uint64_t)v23);
    }
    else
    {
LABEL_26:
      sub_10000DFF4((uint64_t)v22, (uint64_t)v23);
      __n128 result = sub_10000DA8C((uint64_t)v22);
    }
  }
  int64_t v13 = v4 + 4;
  if (v4 + 4 >= v20) {
    return sub_100017254();
  }
  unint64_t v11 = *(void *)(v21 + 8 * v13);
  if (v11)
  {
    int64_t v12 = v4 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v12 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v12 >= v20) {
      return sub_100017254();
    }
    unint64_t v11 = *(void *)(v21 + 8 * v12);
    ++v13;
    if (v11) {
      goto LABEL_20;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_10000DA8C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10000DAE0(uint64_t a1)
{
  uint64_t v2 = sub_100011D80(&qword_10012E590);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000DB40@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  Swift::Int v4 = *(void *)(*v1 + 40);
  swift_bridgeObjectRetain();
  Swift::Int v5 = AnyHashable._rawHashValue(seed:)(v4);
  uint64_t v6 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v7 = v5 & ~v6;
  if ((*(void *)(v3 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7))
  {
    uint64_t v8 = ~v6;
    while (1)
    {
      sub_10000E170(*(void *)(v3 + 48) + 40 * v7, (uint64_t)v15);
      char v9 = static AnyHashable.== infix(_:_:)();
      sub_10000DA8C((uint64_t)v15);
      if (v9) {
        break;
      }
      unint64_t v7 = (v7 + 1) & v8;
      if (((*(void *)(v3 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v1;
    v15[0] = *v1;
    *int64_t v1 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1000B4D70();
      uint64_t v12 = v15[0];
    }
    uint64_t v13 = *(void *)(v12 + 48) + 40 * v7;
    long long v14 = *(_OWORD *)(v13 + 16);
    *(_OWORD *)a1 = *(_OWORD *)v13;
    *(_OWORD *)(a1 + 16) = v14;
    *(void *)(a1 + 32) = *(void *)(v13 + 32);
    sub_10000DCA4(v7);
    *int64_t v1 = v15[0];
    return swift_bridgeObjectRelease();
  }
  else
  {
LABEL_5:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

unint64_t sub_10000DCA4(unint64_t result)
{
  uint64_t v2 = v1;
  int64_t v3 = result;
  uint64_t v4 = *v1;
  uint64_t v5 = *v1 + 56;
  uint64_t v6 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v7 = (result + 1) & ~v6;
  if (((1 << v7) & *(void *)(v5 + 8 * (v7 >> 6))) != 0)
  {
    uint64_t v8 = ~v6;
    swift_retain();
    uint64_t v9 = _HashTable.previousHole(before:)();
    if ((*(void *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      unint64_t v10 = (v9 + 1) & v8;
      do
      {
        sub_10000E170(*(void *)(v4 + 48) + 40 * v7, (uint64_t)v25);
        Swift::Int v11 = AnyHashable._rawHashValue(seed:)(*(void *)(v4 + 40));
        sub_10000DA8C((uint64_t)v25);
        Swift::Int v12 = v11 & v8;
        if (v3 >= (uint64_t)v10)
        {
          if (v12 >= v10 && v3 >= v12)
          {
LABEL_15:
            uint64_t v15 = *(void *)(v4 + 48);
            unint64_t v16 = v15 + 40 * v3;
            unint64_t v17 = (long long *)(v15 + 40 * v7);
            BOOL v18 = v3 != v7 || v16 >= (unint64_t)v17 + 40;
            int64_t v3 = v7;
            if (v18)
            {
              long long v19 = *v17;
              long long v20 = v17[1];
              *(void *)(v16 + 32) = *((void *)v17 + 4);
              *(_OWORD *)unint64_t v16 = v19;
              *(_OWORD *)(v16 + 16) = v20;
              int64_t v3 = v7;
            }
          }
        }
        else if (v12 >= v10 || v3 >= v12)
        {
          goto LABEL_15;
        }
        unint64_t v7 = (v7 + 1) & v8;
      }
      while (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
    }
    *(void *)(v5 + (((unint64_t)v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v3) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v21 = *v2;
  uint64_t v22 = *(void *)(*v2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v21 + 16) = v24;
    ++*(_DWORD *)(v21 + 36);
  }
  return result;
}

uint64_t sub_10000DE64(uint64_t a1)
{
  uint64_t v19 = Set.init(minimumCapacity:)();
  uint64_t result = sub_100016E88(a1, v20);
  uint64_t v3 = v20[0];
  uint64_t v4 = v20[1];
  int64_t v5 = v20[3];
  unint64_t v6 = v21;
  int64_t v7 = (unint64_t)(v20[2] + 64) >> 6;
  if (!v21) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v9 = v8 | (v5 << 6);
  while (1)
  {
    sub_10000E170(*(void *)(v3 + 48) + 40 * v9, (uint64_t)v17);
    v14[0] = v17[0];
    v14[1] = v17[1];
    uint64_t v15 = v18;
    sub_10000DFF4((uint64_t)v16, (uint64_t)v14);
    uint64_t result = sub_10000DA8C((uint64_t)v16);
    if (v6) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v10 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      break;
    }
    if (v10 >= v7) {
      goto LABEL_21;
    }
    unint64_t v11 = *(void *)(v4 + 8 * v10);
    int64_t v12 = v5 + 1;
    if (!v11)
    {
      int64_t v12 = v5 + 2;
      if (v5 + 2 >= v7) {
        goto LABEL_21;
      }
      unint64_t v11 = *(void *)(v4 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v5 + 3;
        if (v5 + 3 >= v7) {
          goto LABEL_21;
        }
        unint64_t v11 = *(void *)(v4 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v5 + 4;
          if (v5 + 4 >= v7) {
            goto LABEL_21;
          }
          unint64_t v11 = *(void *)(v4 + 8 * v12);
          if (!v11)
          {
            int64_t v12 = v5 + 5;
            if (v5 + 5 >= v7) {
              goto LABEL_21;
            }
            unint64_t v11 = *(void *)(v4 + 8 * v12);
            if (!v11)
            {
              int64_t v13 = v5 + 6;
              while (v13 < v7)
              {
                unint64_t v11 = *(void *)(v4 + 8 * v13++);
                if (v11)
                {
                  int64_t v12 = v13 - 1;
                  goto LABEL_18;
                }
              }
LABEL_21:
              swift_release();
              return v19;
            }
          }
        }
      }
    }
LABEL_18:
    unint64_t v6 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
    int64_t v5 = v12;
  }
  __break(1u);
  return result;
}

uint64_t sub_10000DFF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  Swift::Int v7 = *(void *)(*v2 + 40);
  swift_bridgeObjectRetain();
  Swift::Int v8 = AnyHashable._rawHashValue(seed:)(v7);
  uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    while (1)
    {
      sub_10000E170(*(void *)(v6 + 48) + 40 * v10, (uint64_t)v17);
      char v12 = static AnyHashable.== infix(_:_:)();
      sub_10000DA8C((uint64_t)v17);
      if (v12) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    sub_10000DA8C(a2);
    sub_10000E170(*(void *)(*v3 + 48) + 40 * v10, a1);
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10000E170(a2, (uint64_t)v17);
    uint64_t v16 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10000E1CC((Swift::Int)v17, v10, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v16;
    swift_bridgeObjectRelease();
    long long v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v14;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    return 1;
  }
}

uint64_t sub_10000E170(uint64_t a1, uint64_t a2)
{
  return a2;
}

Swift::Int sub_10000E1CC(Swift::Int result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  Swift::Int v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_1000B4AA8();
  }
  else
  {
    if (v8 > v7)
    {
      uint64_t result = (Swift::Int)sub_1000B4D70();
      goto LABEL_12;
    }
    sub_1000B50F4();
  }
  uint64_t v9 = *v3;
  uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(v9 + 32);
  a2 = result & ~v10;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v11 = ~v10;
    do
    {
      sub_10000E170(*(void *)(v9 + 48) + 40 * a2, (uint64_t)v19);
      char v12 = static AnyHashable.== infix(_:_:)();
      uint64_t result = sub_10000DA8C((uint64_t)v19);
      if (v12) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v11;
    }
    while (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v13 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t v14 = *(void *)(v13 + 48) + 40 * a2;
  long long v15 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v6;
  *(_OWORD *)(v14 + 16) = v15;
  *(void *)(v14 + 32) = *(void *)(v6 + 32);
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (!v17)
  {
    *(void *)(v13 + 16) = v18;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10000E8D0(uint64_t a1, uint64_t a2)
{
  sub_100011D80(&qword_10012E4B0);
  __chkstk_darwin();
  int64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TaskPriority();
  sub_1000101E8((uint64_t)v5, 1, 1, v6);
  unint64_t v7 = (void *)swift_allocObject();
  v7[2] = 0;
  v7[3] = 0;
  void v7[4] = a1;
  v7[5] = a2;
  unint64_t v8 = (void *)swift_allocObject();
  v8[2] = 0;
  uint64_t v8[3] = 0;
  v8[4] = &unk_10012F998;
  v8[5] = v7;
  sub_10000E9D4((uint64_t)v5, (uint64_t)&unk_10012F9A8, (uint64_t)v8);
  return swift_release();
}

uint64_t sub_10000E9D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  if (sub_10001044C(a1, 1, v6) == 1)
  {
    sub_10000EB44(a1, &qword_10012E4B0);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_10000EB44(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100011D80(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_10000EBA0()
{
  sub_1000086E4();
  uint64_t v105 = v2;
  uint64_t v110 = v3;
  int64_t v5 = v4;
  type metadata accessor for Date();
  sub_10000BFC4();
  uint64_t v96 = v6;
  uint64_t v97 = v7;
  __chkstk_darwin(v6);
  uint64_t v92 = v8;
  v94 = (char *)v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100011D80(&qword_10012E4B0);
  uint64_t v10 = sub_1000085F4(v9);
  __chkstk_darwin(v10);
  sub_10000D2F0();
  uint64_t v93 = v11;
  uint64_t v12 = sub_100011D80(&qword_10012E4A0);
  uint64_t v13 = sub_1000085F4(v12);
  __chkstk_darwin(v13);
  sub_10000D2F0();
  uint64_t v90 = v14;
  uint64_t v15 = sub_100011D80(&qword_10012E458);
  uint64_t v16 = sub_1000085F4(v15);
  __chkstk_darwin(v16);
  sub_100008324();
  sub_10000F6C8();
  __chkstk_darwin(v17);
  sub_10000F960();
  uint64_t v89 = v18;
  uint64_t v19 = type metadata accessor for LogInterpolation.StringInterpolation();
  uint64_t v20 = sub_1000085F4(v19);
  __chkstk_darwin(v20);
  sub_100008324();
  sub_10000F6C8();
  __chkstk_darwin(v21);
  sub_10000F960();
  uint64_t v88 = v22;
  v86[1] = type metadata accessor for Log();
  sub_10000BFC4();
  uint64_t v91 = v23;
  __chkstk_darwin(v24);
  sub_10000D2F0();
  uint64_t v104 = v25;
  uint64_t v26 = (int *)sub_1000169AC();
  sub_1000082F8();
  __chkstk_darwin(v27);
  uint64_t v28 = sub_100016070();
  uint64_t v29 = type metadata accessor for CachedServerDataSyncTaskScheduleInput(v28);
  id v30 = (int *)(v29 - 8);
  __chkstk_darwin(v29);
  sub_100008338();
  __int16 v33 = (uint64_t *)(v32 - v31);
  char v34 = (void *)(v0 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_account);
  uint64_t v106 = v0;
  uint64_t v35 = v0 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_state;
  swift_beginAccess();
  uint64_t v107 = v35;
  sub_10000FC70(v35, v1, (void (*)(void))type metadata accessor for AccountDataState);
  uint64_t v36 = v5[1];
  uint64_t v98 = *v5;
  uint64_t v99 = v36;
  uint64_t v37 = v5[2];
  uint64_t v38 = v5[3];
  uint64_t v100 = v5[4];
  uint64_t v101 = v37;
  v95 = v5;
  uint64_t v102 = v5[5];
  uint64_t v103 = v38;
  uint64_t v39 = sub_1000087B0(v34, v34[3]);
  uint64_t v40 = sub_1000052B8((uint64_t)v39);
  uint64_t v42 = v41;
  uint64_t v43 = sub_1000087B0(v34, v34[3]);
  os_signpost_id_t v44 = (char *)v33 + v30[7];
  uint64_t v45 = type metadata accessor for AccountIdentity();
  sub_1000082F8();
  uint64_t v87 = *(void (**)(char *, void *, uint64_t))(v46 + 16);
  v86[2] = v46 + 16;
  v87(v44, v43, v45);
  sub_10000F620(v1 + v26[5], (uint64_t)v33 + v30[15], &qword_10012E458);
  sub_10000F620(v1 + v26[6], (uint64_t)v33 + v30[16], &qword_10012E458);
  sub_10000F620(v1 + v26[9], (uint64_t)v33 + v30[17], &qword_10012E458);
  sub_10000F620(v1 + v26[11], (uint64_t)v33 + v30[18], &qword_10012E458);
  uint64_t v47 = *(void *)(v1 + v26[12]);
  sub_10000F620(v1 + v26[13], (uint64_t)v33 + v30[20], &qword_10012E4A0);
  sub_1000169C4();
  *__int16 v33 = v40;
  v33[1] = v42;
  *(uint64_t *)((char *)v33 + v30[8]) = v98;
  *(uint64_t *)((char *)v33 + v30[9]) = v99;
  *(uint64_t *)((char *)v33 + v30[10]) = v101;
  *(uint64_t *)((char *)v33 + v30[11]) = v100;
  *((unsigned char *)v33 + v30[12]) = 8;
  *(uint64_t *)((char *)v33 + v30[13]) = v102;
  *(uint64_t *)((char *)v33 + v30[14]) = v103;
  *(uint64_t *)((char *)v33 + v30[19]) = v47;
  *((unsigned char *)v33 + v30[21]) = v48;
  sub_1000104A8(v1, (void (*)(void))type metadata accessor for AccountDataState);
  LODWORD(v103) = sub_1000049D4((uint64_t)v33);
  if (v103 != 11)
  {
    static Log.accountsDataSync.getter();
    sub_100011D80((uint64_t *)&unk_10012E440);
    uint64_t v49 = type metadata accessor for LogInterpolation();
    sub_1000082C8(v49);
    sub_100016340();
    uint64_t v102 = v50;
    uint64_t v51 = swift_allocObject();
    *(_OWORD *)(v51 + 16) = xmmword_1000DA3E0;
    uint64_t v101 = v51;
    uint64_t v52 = v51 + v47;
    v109 = (void *)type metadata accessor for AccountDataAccessActor();
    v108[0] = v106;
    swift_retain();
    id v53 = (id)AMSLogKey();
    if (v53)
    {
      Swift::String v54 = v53;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    static LogInterpolation.prefix(_:_:)();
    swift_bridgeObjectRelease();
    sub_10000D47C((uint64_t)v108);
    LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)();
    sub_1000159E0();
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v55);
    v109 = &unk_100116010;
    LOBYTE(v108[0]) = v103;
    LogInterpolation.StringInterpolation.appendInterpolation(_:)();
    sub_1000188C0((uint64_t)v108, &qword_10012EFB0);
    v56._countAndFlagsBits = sub_100072F50();
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v56);
    LogInterpolation.init(stringInterpolation:)();
    uint64_t v100 = v52;
    v109 = (void *)v45;
    sub_1000042C4(v108);
    sub_100073330();
    sub_100008000();
    v57();
    static LogInterpolation.traceableSensitive(_:)();
    sub_1000188C0((uint64_t)v108, &qword_10012EFB0);
    LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v58._countAndFlagsBits = sub_10000F8C4();
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v58);
    uint64_t v59 = v107;
    uint64_t v60 = *(void *)(v107 + v26[12]);
    v109 = &type metadata for UInt;
    v108[0] = v60;
    LogInterpolation.StringInterpolation.appendInterpolation(_:)();
    sub_1000188C0((uint64_t)v108, &qword_10012EFB0);
    v61._countAndFlagsBits = sub_100016428();
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v61);
    uint64_t v62 = v89;
    sub_10000F620(v59 + v26[6], v89, &qword_10012E458);
    uint64_t v63 = v96;
    if (sub_10001044C(v62, 1, v96) == 1)
    {
      sub_1000188C0(v62, &qword_10012E458);
      sub_1000735A0();
    }
    else
    {
      v109 = (void *)v63;
      sub_1000042C4(v108);
      sub_10007311C();
      v64();
    }
    sub_100073318();
    sub_1000188C0((uint64_t)v108, &qword_10012EFB0);
    v65._countAndFlagsBits = sub_100073040();
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v65);
    uint64_t v66 = v90;
    sub_10000F620(v59 + v26[13], v90, &qword_10012E4A0);
    uint64_t v67 = type metadata accessor for CachedServerDataSyncAttempt(0);
    if (sub_10001044C(v66, 1, v67) == 1)
    {
      sub_1000188C0(v66, &qword_10012E4A0);
      sub_1000735A0();
    }
    else
    {
      v109 = (void *)v67;
      uint64_t v68 = sub_1000042C4(v108);
      sub_100009BBC(v66, (uint64_t)v68, (void (*)(void))type metadata accessor for CachedServerDataSyncAttempt);
    }
    uint64_t v69 = v86[0];
    sub_100073318();
    sub_1000188C0((uint64_t)v108, &qword_10012EFB0);
    v70._countAndFlagsBits = sub_100072EDC();
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v70);
    sub_100073374();
    if (v72)
    {
      sub_1000735A0();
    }
    else
    {
      v109 = &unk_100115498;
      LOWORD(v108[0]) = v71;
    }
    sub_100073318();
    sub_1000188C0((uint64_t)v108, &qword_10012EFB0);
    v73._countAndFlagsBits = sub_10007305C();
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v73);
    sub_10000F620(v59 + v26[5], v69, &qword_10012E458);
    if (sub_10001044C(v69, 1, v63) == 1)
    {
      sub_1000188C0(v69, &qword_10012E458);
      sub_1000735A0();
      uint64_t v74 = v97;
    }
    else
    {
      v109 = (void *)v63;
      sub_1000042C4(v108);
      uint64_t v74 = v97;
      sub_10007311C();
      v75();
    }
    sub_100073318();
    sub_1000188C0((uint64_t)v108, &qword_10012EFB0);
    sub_100073504();
    LogInterpolation.init(stringInterpolation:)();
    Log.default(_:)();
    swift_bridgeObjectRelease();
    sub_1000734AC();
    sub_1000084F8();
    v76();
    uint64_t v77 = type metadata accessor for TaskPriority();
    uint64_t v78 = v93;
    sub_1000101E8(v93, 1, 1, v77);
    uint64_t v79 = v94;
    (*(void (**)(char *, uint64_t, uint64_t))(v74 + 16))(v94, v110, v63);
    uint64_t v80 = sub_100009088(&qword_10012E4C0, (void (*)(uint64_t))type metadata accessor for AccountDataAccessActor);
    unint64_t v81 = (*(unsigned __int8 *)(v74 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80);
    uint64_t v82 = swift_allocObject();
    uint64_t v83 = v106;
    *(void *)(v82 + 16) = v106;
    *(void *)(v82 + 24) = v80;
    *(void *)(v82 + 32) = v83;
    *(unsigned char *)(v82 + 40) = v103;
    uint64_t v84 = v95;
    long long v85 = *((_OWORD *)v95 + 1);
    *(_OWORD *)(v82 + 48) = *(_OWORD *)v95;
    *(_OWORD *)(v82 + 64) = v85;
    *(_OWORD *)(v82 + 80) = *((_OWORD *)v84 + 2);
    (*(void (**)(unint64_t, char *, uint64_t))(v74 + 32))(v82 + v81, v79, v63);
    swift_retain_n();
    sub_1000A2840(v78, (uint64_t)&unk_10012E4E0, v82);
    swift_release();
  }
  sub_1000104A8((uint64_t)v33, (void (*)(void))type metadata accessor for CachedServerDataSyncTaskScheduleInput);
  sub_10000FC70(v107, v105, (void (*)(void))type metadata accessor for AccountDataState);
  sub_100009750();
}

uint64_t sub_10000F620(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100011D80(a3);
  sub_1000082F8();
  sub_100008000();
  v4();
  return a2;
}

uint64_t sub_10000F678(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100011D80(a3);
  sub_1000082F8();
  uint64_t v4 = sub_1000160F8();
  v5(v4);
  return a2;
}

void sub_10000F6C8()
{
  *(void *)(v1 - 256) = v0;
}

uint64_t sub_10000F6D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v3[2] = a2;
  v3[3] = (v2 - 32) | 0x8000000000000000;
  v3[4] = v4;
  v3[5] = a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_10000F710()
{
  return Hasher.init(_seed:)();
}

uint64_t sub_10000F740()
{
  return *(void *)(v1 + 56) + *(void *)(*(void *)(v2 - 128) + 72) * v0;
}

uint64_t sub_10000F770()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t sub_10000F7A0()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_10000F7C4()
{
  return static LogInterpolation.prefix(_:_:)();
}

uint64_t sub_10000F838()
{
  return LogInterpolation.init(stringLiteral:)();
}

unint64_t sub_10000F884(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + 8 * (result >> 6) + 64) |= 1 << result;
  uint64_t v5 = (void *)(*(void *)(a5 + 48) + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  return result;
}

unint64_t sub_10000F8C4()
{
  return 0xD000000000000010;
}

void sub_10000F8D8()
{
  *(_WORD *)(v1 + *(int *)(v0 + 40)) = 3;
  *(void *)(v1 + *(int *)(v0 + 48)) = 0;
}

void sub_10000F8FC()
{
  *(void *)(v0 + 16) = 0x615F706D615F7078;
}

uint64_t sub_10000F940()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10000F978()
{
  uint64_t v2 = *(void *)(v0 + 1016);
  uint64_t v3 = *(void *)(v0 + 1024);
  return sub_1000186E8(v2, v3, 6u);
}

uint64_t sub_10000F99C()
{
  return swift_errorRelease();
}

uint64_t sub_10000FA14()
{
  return type metadata accessor for AMPAccount();
}

_OWORD *sub_10000FA3C()
{
  uint64_t v4 = *(void *)(v1 + 1024);
  uint64_t v5 = *(void *)(v1 + 1016);
  *(void *)(v0 + 8 * (v3 >> 6) + 64) |= 1 << v3;
  uint64_t v6 = (void *)(*(void *)(v0 + 48) + 16 * v3);
  *uint64_t v6 = v5;
  v6[1] = v4;
  return sub_10000D5F4(v2, (_OWORD *)(*(void *)(v0 + 56) + 32 * v3));
}

uint64_t sub_10000FA94()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_10000FAB8()
{
  return type metadata accessor for AccountIdentity();
}

uint64_t sub_10000FAE0()
{
  return swift_allocError();
}

uint64_t sub_10000FB00()
{
  return swift_bridgeObjectRetain();
}

void sub_10000FB28(uint64_t a1, const char *a2)
{
  xpc_dictionary_set_BOOL(v2, a2, 1);
}

void sub_10000FB40()
{
  Hasher._combine(_:)(1u);
}

uint64_t sub_10000FB58()
{
  return *(void *)(v0 - 336);
}

void sub_10000FB7C(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 168) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_10000FB98()
{
  return static LogInterpolation.prefix(_:_:)();
}

uint64_t sub_10000FBE8()
{
  uint64_t v5 = *(int *)(v2 + 24);
  return sub_100006374(v1 + v5, v0 + v5, v3);
}

__n128 sub_10000FC1C()
{
  long long v2 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v1 - 112) = *(_OWORD *)v0;
  *(_OWORD *)(v1 - 96) = v2;
  __n128 result = *(__n128 *)(v0 + 32);
  *(__n128 *)(v1 - 80) = result;
  return result;
}

uint64_t sub_10000FC30()
{
  return v0;
}

uint64_t sub_10000FC40()
{
  return v0;
}

unint64_t sub_10000FC5C()
{
  return 0xD000000000000025;
}

uint64_t sub_10000FC70(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_1000082F8();
  sub_100008000();
  v4();
  return a2;
}

uint64_t sub_10000FCCC(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_1000082F8();
  uint64_t v4 = sub_1000160F8();
  v5(v4);
  return a2;
}

void *sub_10000FD20(void *__dst, void *__src, int *a3)
{
  uint64_t v6 = __src[1];
  if (v6)
  {
    *__dst = *__src;
    __dst[1] = v6;
    __dst[2] = __src[2];
    *((unsigned char *)__dst + 24) = *((unsigned char *)__src + 24);
    uint64_t v7 = __src[5];
    __dst[4] = __src[4];
    __dst[5] = v7;
    uint64_t v8 = __src[7];
    __dst[6] = __src[6];
    __dst[7] = v8;
    uint64_t v9 = __src[9];
    __dst[8] = __src[8];
    __dst[9] = v9;
    __dst[10] = __src[10];
    *((_DWORD *)__dst + 22) = *((_DWORD *)__src + 22);
    __dst[12] = __src[12];
    *((_DWORD *)__dst + 26) = *((_DWORD *)__src + 26);
    *((_WORD *)__dst + 54) = *((_WORD *)__src + 54);
    uint64_t v10 = __src[15];
    __dst[14] = __src[14];
    __dst[15] = v10;
    uint64_t v11 = __src[17];
    __dst[16] = __src[16];
    __dst[17] = v11;
    uint64_t v12 = __src[19];
    __dst[18] = __src[18];
    __dst[19] = v12;
    *((_WORD *)__dst + 80) = *((_WORD *)__src + 80);
    uint64_t v13 = __src[22];
    __dst[21] = __src[21];
    __dst[22] = v13;
    __dst[23] = __src[23];
    *((_WORD *)__dst + 96) = *((_WORD *)__src + 96);
    *((unsigned char *)__dst + 194) = *((unsigned char *)__src + 194);
    uint64_t v14 = __src[26];
    __dst[25] = __src[25];
    __dst[26] = v14;
    *((unsigned char *)__dst + 216) = *((unsigned char *)__src + 216);
    __dst[28] = __src[28];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    memcpy(__dst, __src, 0xE8uLL);
  }
  uint64_t v15 = a3[5];
  uint64_t v16 = (char *)__dst + v15;
  uint64_t v17 = (char *)__src + v15;
  uint64_t v18 = type metadata accessor for Date();
  if (sub_10001044C((uint64_t)v17, 1, v18))
  {
    uint64_t v19 = sub_100011D80(&qword_10012E458);
    memcpy(v16, v17, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
    sub_1000101E8((uint64_t)v16, 0, 1, v18);
  }
  uint64_t v20 = a3[6];
  uint64_t v21 = (char *)__dst + v20;
  uint64_t v22 = (char *)__src + v20;
  if (sub_10001044C((uint64_t)__src + v20, 1, v18))
  {
    uint64_t v23 = sub_100011D80(&qword_10012E458);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    uint64_t v24 = *(void *)(v18 - 8);
  }
  else
  {
    uint64_t v24 = *(void *)(v18 - 8);
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v18);
    sub_1000101E8((uint64_t)v21, 0, 1, v18);
  }
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
  v25((char *)__dst + a3[7], (char *)__src + a3[7], v18);
  uint64_t v26 = a3[9];
  *(_WORD *)((char *)__dst + a3[8]) = *(_WORD *)((char *)__src + a3[8]);
  uint64_t v27 = (char *)__dst + v26;
  uint64_t v28 = (char *)__src + v26;
  if (sub_10001044C((uint64_t)__src + v26, 1, v18))
  {
    uint64_t v29 = sub_100011D80(&qword_10012E458);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    v25(v27, v28, v18);
    sub_1000101E8((uint64_t)v27, 0, 1, v18);
  }
  uint64_t v30 = a3[11];
  *(_WORD *)((char *)__dst + a3[10]) = *(_WORD *)((char *)__src + a3[10]);
  uint64_t v31 = (char *)__dst + v30;
  uint64_t v32 = (char *)__src + v30;
  if (sub_10001044C((uint64_t)__src + v30, 1, v18))
  {
    uint64_t v33 = sub_100011D80(&qword_10012E458);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    v25(v31, v32, v18);
    sub_1000101E8((uint64_t)v31, 0, 1, v18);
  }
  uint64_t v34 = a3[13];
  *(void *)((char *)__dst + a3[12]) = *(void *)((char *)__src + a3[12]);
  uint64_t v35 = (char *)__dst + v34;
  uint64_t v36 = (char *)__src + v34;
  uint64_t v37 = type metadata accessor for CachedServerDataSyncAttempt(0);
  if (sub_10001044C((uint64_t)v36, 1, v37))
  {
    uint64_t v38 = sub_100011D80(&qword_10012E4A0);
    memcpy(v35, v36, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    *uint64_t v35 = *v36;
    v25(&v35[*(int *)(v37 + 20)], &v36[*(int *)(v37 + 20)], v18);
    sub_1000101E8((uint64_t)v35, 0, 1, v37);
  }
  return __dst;
}

uint64_t sub_1000101B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100099AC0);
}

uint64_t type metadata accessor for CachedServerDataSyncAttempt(uint64_t a1)
{
  return sub_100010474(a1, qword_10012F138);
}

uint64_t sub_1000101E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_100010210(uint64_t a1, int *a2)
{
  if (*(void *)(a1 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for Date();
  if (!sub_10001044C(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  uint64_t v6 = a1 + a2[6];
  int v7 = sub_10001044C(v6, 1, v5);
  uint64_t v8 = *(void *)(v5 - 8);
  if (!v7) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v5);
  }
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v15(a1 + a2[7], v5);
  uint64_t v9 = a1 + a2[9];
  if (!sub_10001044C(v9, 1, v5)) {
    v15(v9, v5);
  }
  uint64_t v10 = a1 + a2[11];
  if (!sub_10001044C(v10, 1, v5)) {
    v15(v10, v5);
  }
  uint64_t v11 = a1 + a2[13];
  uint64_t v12 = type metadata accessor for CachedServerDataSyncAttempt(0);
  uint64_t result = sub_10001044C(v11, 1, v12);
  if (!result)
  {
    uint64_t v14 = v11 + *(int *)(v12 + 20);
    return ((uint64_t (*)(uint64_t, uint64_t))v15)(v14, v5);
  }
  return result;
}

uint64_t sub_10001044C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_100010474(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000104A8(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_1000082F8();
  sub_1000084F8();
  v3();
  return a1;
}

unint64_t sub_1000104FC(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100010540(a1, v4);
}

unint64_t sub_100010540(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_10001065C(0, &qword_10012EB18);
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

uint64_t sub_10001065C(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

id sub_100010698(uint64_t a1)
{
  sub_100011D80(&qword_10012E458);
  __chkstk_darwin();
  uint64_t v3 = (char *)v47 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Date();
  sub_10000BFC4();
  uint64_t v6 = v5;
  __chkstk_darwin();
  uint64_t v8 = (char *)v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [objc_allocWithZone((Class)AMSAccountCachedServerDataFields) init];
  uint64_t v10 = type metadata accessor for AccountDataState(0);
  sub_100006374(a1 + *(int *)(v10 + 20), (uint64_t)v3, &qword_10012E458);
  if (sub_10001044C((uint64_t)v3, 1, v4) == 1)
  {
    static Date.distantPast.getter();
    sub_100018910((uint64_t)v3, &qword_10012E458);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v3, v4);
  }
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v12 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v4);
  sub_100010D44(v12, "setExpiration:");

  sub_100007EC8(a1, (uint64_t)&v115, &qword_10012E460);
  sub_100007B74();
  sub_100007EC8((uint64_t)v77, (uint64_t)v78, &qword_10012E460);
  if (sub_100018644((uint64_t)v78) != 1)
  {
    uint64_t v13 = v78[2];
    char v14 = v79;
    uint64_t v15 = v81;
    uint64_t v62 = v83;
    uint64_t v63 = v82;
    uint64_t v67 = v84;
    uint64_t v68 = v80;
    uint64_t v66 = v85;
    int v59 = v87;
    int v60 = v86;
    int v57 = v89;
    int v58 = v88;
    uint64_t v69 = v90;
    int v55 = v92;
    int v56 = v91;
    unsigned int v61 = v93;
    char v16 = v94;
    char v17 = v95;
    char v18 = v96;
    uint64_t v71 = v98;
    uint64_t v72 = v97;
    uint64_t v73 = v100;
    uint64_t v74 = v99;
    uint64_t v75 = v102;
    uint64_t v76 = v101;
    char v19 = v103;
    int v70 = v104;
    v47[1] = v106;
    v47[2] = v105;
    v47[0] = v107;
    int v50 = v110;
    int v51 = v109;
    uint64_t v52 = v112;
    uint64_t v53 = v111;
    int v48 = v108;
    int v49 = v113;
    uint64_t v54 = v114;
    NSString v20 = String._bridgeToObjectiveC()();
    [v9 setAcAccountName:v20];

    [v9 setAccountFlagsVersion:v13];
    [v9 setAutoPlayEnabled:v14 & 1];
    if (v15)
    {
      swift_bridgeObjectRetain();
      NSString v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v21 = 0;
    }
    LODWORD(v68) = v17 & 1;
    unsigned int v64 = v18 & 1;
    unsigned int v65 = v19 & 1;
    v61 &= 1u;
    uint64_t v22 = v55 & 1;
    uint64_t v23 = v56 & 1;
    uint64_t v24 = v57 & 1;
    uint64_t v25 = v58 & 1;
    uint64_t v26 = v59 & 1;
    uint64_t v27 = v60 & 1;
    [v9 setCombinedStoreFrontID:v21];

    NSString v28 = String._bridgeToObjectiveC()();
    [v9 setCreditBalance:v28];

    NSString v29 = String._bridgeToObjectiveC()();
    [v9 setFirstName:v29];

    [v9 setHasAgreedToAppClipTerms:v27];
    [v9 setHasAgreedToTerms:v26];
    [v9 setHasSubscriptionFamilySharingEnabled:v25];
    [v9 setHasHardwareWatchOffer:v24];
    [v9 setIdentityLastVerified:v69];
    [v9 setIsAskToBuy:v23];
    [v9 setIsDisabledAccount:v22];
    [v9 setIsInBadCredit:v61];
    [v9 setIsInFamily:v16 & 1];
    [v9 setIsManagedAccount:v64];
    [v9 setIsRestrictedAccount:v65];
    id v30 = [v9 setIsInRestrictedRegion:v68];
    char v31 = v70;
    if (v70 == 2)
    {
      uint64_t v32 = 0;
    }
    else
    {
      id v30 = [objc_allocWithZone((Class)NSNumber) initWithBool:v31 & 1];
      uint64_t v32 = v30;
    }
    uint64_t v33 = v54;
    char v34 = v48;
    sub_100010D44((uint64_t)v30, "setIsU18OrCountrysEquivalent:");

    NSString v35 = String._bridgeToObjectiveC()();
    sub_100010D44((uint64_t)v35, "setIsoCountryCode:");

    NSString v36 = String._bridgeToObjectiveC()();
    sub_100010D44((uint64_t)v36, "setIso2CountryCode:");

    NSString v37 = String._bridgeToObjectiveC()();
    sub_100010D44((uint64_t)v37, "setIso3CountryCode:");

    NSString v38 = String._bridgeToObjectiveC()();
    sub_100010D44((uint64_t)v38, "setLastName:");

    if (v34)
    {
      uint64_t v41 = 0;
    }
    else
    {
      id v40 = objc_allocWithZone((Class)NSNumber);
      id v39 = [v40 initWithUnsignedLongLong:v47[0]];
      uint64_t v41 = v39;
    }
    uint64_t v42 = v49 & 1;
    uint64_t v43 = v50 & 1;
    uint64_t v44 = v51 & 1;
    sub_100010D44((uint64_t)v39, "setOneAccountLinkedDSID:");

    [v9 setPersonalization:v44];
    [v9 setRetailDemo:v43];
    NSString v45 = String._bridgeToObjectiveC()();
    sub_100010D44((uint64_t)v45, "setStorefrontId:");

    [v9 setUnderThirteen:v42];
    [v9 setVerifiedExpirationDate:v33];
    sub_1000185D0(v77);
  }
  return v9;
}

uint64_t sub_100010D20@<X0>(uint64_t a1@<X0>, char a2@<W8>)
{
  *(unsigned char *)(v3 - 80) = a2;
  return KeyedEncodingContainer.encode(_:forKey:)(a1, v3 - 80, v2);
}

id sub_100010D44(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t sub_100010D5C()
{
  return v0;
}

uint64_t sub_100010D74(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  sub_1000186D0(a1, a2, a3);
  return swift_bridgeObjectRetain();
}

uint64_t sub_100010D9C()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t sub_100010DF0()
{
  void *v0 = 0x8000000000000000;
  return v1;
}

uint64_t sub_100010E18()
{
  return AccountIdentity.DSID.init(_:)();
}

uint64_t sub_100010E34(void *a1, uint64_t a2)
{
  Swift::Int v4 = (Swift::Int)&qword_10012EBC8;
  uint64_t v5 = sub_100011D80(&qword_10012EBC8);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v68 - v9;
  uint64_t v11 = (void *)Dictionary.init(dictionaryLiteral:)();
  uint64_t v12 = *(void *)(a2 + 64);
  uint64_t v70 = a2 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  uint64_t v74 = v84;
  uint64_t v76 = &v87;
  int64_t v73 = (unint64_t)(v13 + 63) >> 6;
  int64_t v68 = v73 - 1;
  uint64_t v75 = a2;
  swift_bridgeObjectRetain();
  int64_t v77 = 0;
  uint64_t v78 = a1;
  uint64_t v69 = a1 + 9;
  uint64_t v72 = v10;
  if (!v15) {
    goto LABEL_6;
  }
LABEL_4:
  unint64_t v16 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  unint64_t v17 = v16 | (v77 << 6);
LABEL_5:
  uint64_t v18 = *(void *)(v75 + 56);
  char v19 = (void *)(*(void *)(v75 + 48) + 16 * v17);
  uint64_t v20 = v19[1];
  *(void *)&long long v83 = *v19;
  *((void *)&v83 + 1) = v20;
  sub_1000115F4(v18 + 32 * v17, (uint64_t)v74);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_100097FD4((uint64_t)&v83, (uint64_t)&v85, (uint64_t *)&unk_10012EFA0);
    uint64_t v24 = v86;
    if (!v86) {
      goto LABEL_77;
    }
    uint64_t v25 = (uint64_t)v8;
    uint64_t v26 = (uint64_t *)v4;
    uint64_t v27 = v85;
    sub_10000D5F4(v76, &v83);
    uint64_t v28 = v78[2];
    if (!v28) {
      goto LABEL_35;
    }
    BOOL v29 = v78[4] == v27 && v78[5] == v24;
    if (v29 || (sub_100098244() & 1) != 0) {
      break;
    }
    if (v28 != 1)
    {
      BOOL v62 = v78[6] == v27 && v78[7] == v24;
      if (v62 || (sub_100098244() & 1) != 0) {
        break;
      }
      if (v28 != 2)
      {
        uint64_t v63 = v69;
        Swift::Int v4 = 2;
        while (1)
        {
          Swift::Int v64 = v4 + 1;
          if (__OFADD__(v4, 1)) {
            break;
          }
          BOOL v65 = *(v63 - 1) == v27 && *v63 == v24;
          if (v65 || (sub_100098244() & 1) != 0) {
            goto LABEL_31;
          }
          v63 += 2;
          ++v4;
          if (v64 == v28) {
            goto LABEL_35;
          }
        }
LABEL_82:
        __break(1u);
        goto LABEL_83;
      }
    }
LABEL_35:
    sub_1000115F4((uint64_t)&v83, (uint64_t)&v81);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v80[0] = v11;
    sub_10001165C();
    sub_100015FF0();
    if (v38)
    {
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
      goto LABEL_82;
    }
    unint64_t v39 = v36;
    char v40 = v37;
    sub_100011D80(&qword_100130070);
    Swift::Bool v41 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v4);
    Swift::Int v4 = (Swift::Int)v26;
    uint64_t v8 = (char *)v25;
    if (v41)
    {
      unint64_t v42 = sub_10001165C();
      if ((v40 & 1) != (v43 & 1)) {
        goto LABEL_84;
      }
      unint64_t v39 = v42;
    }
    uint64_t v11 = *(void **)&v80[0];
    if ((v40 & 1) == 0)
    {
      sub_10001644C();
      sub_100016590(&v81, v46);
      if (v38) {
        goto LABEL_80;
      }
      goto LABEL_43;
    }
    uint64_t v44 = (_OWORD *)(*(void *)(*(void *)&v80[0] + 56) + 32 * v39);
    sub_10000D47C((uint64_t)v44);
    NSString v45 = &v81;
LABEL_41:
    sub_10000D5F4(v45, v44);
LABEL_44:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_45:
    sub_10000D47C((uint64_t)&v83);
    if (v15) {
      goto LABEL_4;
    }
LABEL_6:
    int64_t v21 = v77 + 1;
    if (__OFADD__(v77, 1)) {
      goto LABEL_79;
    }
    if (v21 < v73)
    {
      unint64_t v22 = *(void *)(v70 + 8 * v21);
      if (v22) {
        goto LABEL_9;
      }
      int64_t v23 = v77 + 2;
      ++v77;
      if (v21 + 1 < v73)
      {
        unint64_t v22 = *(void *)(v70 + 8 * v23);
        if (v22) {
          goto LABEL_12;
        }
        int64_t v77 = v21 + 1;
        if (v21 + 2 < v73)
        {
          unint64_t v22 = *(void *)(v70 + 8 * (v21 + 2));
          if (v22)
          {
            v21 += 2;
            goto LABEL_9;
          }
          int64_t v23 = v21 + 3;
          int64_t v77 = v21 + 2;
          if (v21 + 3 < v73)
          {
            unint64_t v22 = *(void *)(v70 + 8 * v23);
            if (v22)
            {
LABEL_12:
              int64_t v21 = v23;
LABEL_9:
              unint64_t v15 = (v22 - 1) & v22;
              unint64_t v17 = __clz(__rbit64(v22)) + (v21 << 6);
              int64_t v77 = v21;
              goto LABEL_5;
            }
            while (1)
            {
              int64_t v21 = v23 + 1;
              if (__OFADD__(v23, 1)) {
                break;
              }
              if (v21 >= v73)
              {
                int64_t v77 = v68;
                goto LABEL_23;
              }
              unint64_t v22 = *(void *)(v70 + 8 * v21);
              ++v23;
              if (v22) {
                goto LABEL_9;
              }
            }
LABEL_83:
            __break(1u);
LABEL_84:
            uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
        }
      }
    }
LABEL_23:
    unint64_t v15 = 0;
    memset(v84, 0, sizeof(v84));
    long long v83 = 0u;
  }
LABEL_31:
  sub_1000115F4((uint64_t)&v83, (uint64_t)&v81);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_35;
  }
  NSString v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v31 = [v71 URLFromURLString:v30];

  Swift::Int v4 = (Swift::Int)v26;
  uint64_t v8 = (char *)v25;
  if (v31)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v32 = type metadata accessor for URL();
    uint64_t v33 = v25;
    uint64_t v34 = 0;
  }
  else
  {
    uint64_t v32 = type metadata accessor for URL();
    uint64_t v33 = v25;
    uint64_t v34 = 1;
  }
  sub_1000101E8(v33, v34, 1, v32);
  uint64_t v48 = (uint64_t)v72;
  sub_100097FD4(v25, (uint64_t)v72, v26);
  type metadata accessor for URL();
  if (sub_10001044C(v48, 1, v32) == 1)
  {
    uint64_t v49 = sub_100009784();
    sub_10000EB44(v49, v50);
    swift_bridgeObjectRetain();
    sub_10001165C();
    sub_1000162FC();
    if (v32)
    {
      char v51 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&v80[0] = v11;
      Swift::Int v52 = v11[3];
      sub_100011D80(&qword_100130070);
      _NativeDictionary.ensureUnique(isUnique:capacity:)(v51, v52);
      uint64_t v11 = *(void **)&v80[0];
      swift_bridgeObjectRelease();
      sub_10000D5F4((_OWORD *)(v11[7] + 32 * v27), &v81);
      _NativeDictionary._delete(at:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      long long v81 = 0u;
      long long v82 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_10000EB44((uint64_t)&v81, &qword_10012EFB0);
    goto LABEL_45;
  }
  *((void *)&v82 + 1) = v32;
  uint64_t v53 = sub_1000042C4((uint64_t *)&v81);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 32))(v53, v48, v32);
  sub_10000D5F4(&v81, v80);
  char v54 = swift_isUniquelyReferenced_nonNull_native();
  char v79 = v11;
  sub_10001165C();
  sub_100015FF0();
  if (v38) {
    goto LABEL_81;
  }
  unint64_t v57 = v55;
  char v58 = v56;
  sub_100011D80(&qword_100130070);
  Swift::Bool v59 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v54, (Swift::Int)v26);
  Swift::Int v4 = (Swift::Int)v26;
  uint64_t v8 = (char *)v25;
  if (v59)
  {
    unint64_t v60 = sub_10001165C();
    if ((v58 & 1) != (v61 & 1)) {
      goto LABEL_84;
    }
    unint64_t v57 = v60;
  }
  uint64_t v11 = v79;
  if (v58)
  {
    uint64_t v44 = (_OWORD *)(v79[7] + 32 * v57);
    sub_10000D47C((uint64_t)v44);
    NSString v45 = v80;
    goto LABEL_41;
  }
  sub_10001644C();
  sub_100016590(v80, v66);
  if (!v38)
  {
LABEL_43:
    v11[2] = v47;
    swift_bridgeObjectRetain();
    goto LABEL_44;
  }
  __break(1u);
LABEL_77:
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1000115F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100011650()
{
  return v0;
}

unint64_t sub_10001165C()
{
  return sub_10001169C(v0, v1);
}

uint64_t sub_100011674()
{
  return static Log.accountsDataSync.getter();
}

unint64_t sub_10001169C(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();
  return sub_100011714(a1, a2, v4);
}

unint64_t sub_100011714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_1000117F8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccountDataState(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for AccountDataState(uint64_t a1)
{
  return sub_100010474(a1, (uint64_t *)&unk_10012E5F8);
}

void sub_100011874(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SHA512();
  sub_10000BFC4();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SHA512Digest();
  sub_10000BFC4();
  uint64_t v39 = v11;
  uint64_t v40 = v10;
  uint64_t v12 = __chkstk_darwin(v10);
  BOOL v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  char v38 = (char *)&v37 - v15;
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_100004C88(a1, a2);
  unint64_t v18 = v17;
  sub_10001248C(&qword_10012EE48, (void (*)(uint64_t))&type metadata accessor for SHA512);
  dispatch thunk of HashFunction.init()();
  switch(v18 >> 62)
  {
    case 1uLL:
      if (v16 >> 32 < (int)v16) {
        goto LABEL_23;
      }
      sub_10008E424(v16, v18);
      sub_10008E344((int)v16, v16 >> 32);
      goto LABEL_5;
    case 2uLL:
      uint64_t v20 = *(void *)(v16 + 16);
      uint64_t v19 = *(void *)(v16 + 24);
      sub_10008E424(v16, v18);
      swift_retain();
      swift_retain();
      sub_10008E344(v20, v19);
      swift_release();
      swift_release();
LABEL_5:
      sub_1000124D4(v16, v18);
      break;
    default:
      sub_100004478();
      sub_1000124D4(v16, v18);
      break;
  }
  int64_t v21 = v38;
  dispatch thunk of HashFunction.finalize()();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v4);
  sub_1000124D4(v16, v18);
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v14, v21, v40);
  sub_10001248C(&qword_10012EE50, (void (*)(uint64_t))&type metadata accessor for SHA512Digest);
  dispatch thunk of Sequence.makeIterator()();
  unint64_t v22 = v42;
  uint64_t v23 = v43;
  uint64_t v24 = v42[2];
  if (v43 == v24)
  {
    uint64_t v25 = &_swiftEmptyArrayStorage;
LABEL_9:
    swift_bridgeObjectRelease();
    unint64_t v42 = v25;
    sub_100011D80(&qword_10012EE60);
    sub_10001725C();
    BidirectionalCollection<>.joined(separator:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v38, v40);
  }
  else
  {
    if (v43 < v24)
    {
      uint64_t v25 = &_swiftEmptyArrayStorage;
      long long v41 = xmmword_1000DA680;
      unint64_t v26 = v43;
      while ((v23 & 0x8000000000000000) == 0)
      {
        if (v26 >= v22[2]) {
          goto LABEL_21;
        }
        char v27 = *((unsigned char *)v22 + v26 + 32);
        sub_100011D80(&qword_10012EE58);
        uint64_t v28 = swift_allocObject();
        *(_OWORD *)(v28 + 16) = v41;
        *(void *)(v28 + 56) = &type metadata for UInt8;
        *(void *)(v28 + 64) = &protocol witness table for UInt8;
        *(unsigned char *)(v28 + 32) = v27;
        uint64_t v29 = String.init(format:_:)();
        uint64_t v31 = v30;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100011DC4(0, v25[2] + 1, 1, (uint64_t)v25, (uint64_t *)&unk_10012FDC0, (void (*)(void, uint64_t, void *, uint64_t))sub_100012394, (void (*)(uint64_t, uint64_t, void *))sub_100012338);
          uint64_t v25 = v35;
        }
        unint64_t v33 = v25[2];
        unint64_t v32 = v25[3];
        if (v33 >= v32 >> 1)
        {
          sub_100011DC4(v32 > 1, v33 + 1, 1, (uint64_t)v25, (uint64_t *)&unk_10012FDC0, (void (*)(void, uint64_t, void *, uint64_t))sub_100012394, (void (*)(uint64_t, uint64_t, void *))sub_100012338);
          uint64_t v25 = v36;
        }
        ++v26;
        _OWORD v25[2] = v33 + 1;
        uint64_t v34 = (char *)&v25[2 * v33];
        *((void *)v34 + 4) = v29;
        *((void *)v34 + 5) = v31;
        if (v24 == v26) {
          goto LABEL_9;
        }
      }
      __break(1u);
LABEL_21:
      __break(1u);
    }
    __break(1u);
LABEL_23:
    __break(1u);
  }
}

uint64_t sub_100011D80(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

void sub_100011DC4(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(void, uint64_t, void *, uint64_t), void (*a7)(uint64_t, uint64_t, void *))
{
  if (a3)
  {
    sub_100012124();
    if (v12 != v13)
    {
      sub_1000122B8();
      if (v12)
      {
        __break(1u);
        return;
      }
      sub_100011F3C();
    }
  }
  else
  {
    uint64_t v11 = a2;
  }
  uint64_t v14 = *(void *)(a4 + 16);
  if (v11 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v11;
  }
  if (v15)
  {
    sub_100011D80(a5);
    uint64_t v16 = (void *)swift_allocObject();
    size_t v17 = j__malloc_size(v16);
    v16[2] = v14;
    v16[3] = 2 * ((uint64_t)(v17 - 32) / 16);
  }
  else
  {
    uint64_t v16 = &_swiftEmptyArrayStorage;
  }
  unint64_t v18 = v16 + 4;
  if (a1)
  {
    a7(a4 + 32, v14, v18);
    sub_100011FD0();
  }
  else
  {
    a6(0, v14, v18, a4);
  }
}

uint64_t sub_100011EAC()
{
  return LogInterpolation.init(stringLiteral:)();
}

uint64_t sub_100011EE0()
{
  return v0;
}

id sub_100011EFC(uint64_t a1)
{
  uint64_t v5 = *(const char **)(v3 + 3920);
  return objc_msgSend(v1, v5, v2, a1);
}

uint64_t sub_100011F20(uint64_t a1)
{
  return sub_1000101E8(a1, 1, 1, v1);
}

uint64_t sub_100011F4C()
{
  return v0;
}

id sub_100011F68@<X0>(void *a1@<X8>)
{
  return a1;
}

uint64_t sub_100011FD0()
{
  *(void *)(v0 + 16) = 0;
  return swift_bridgeObjectRelease();
}

_OWORD *sub_100011FE8()
{
  uint64_t v4 = (_OWORD *)(*(void *)(v1 + 56) + 32 * v2);
  return sub_10000D5F4(v4, v0);
}

void sub_100012004()
{
  Swift::UInt v2 = *v0;
  Hasher._combine(_:)(v2);
}

void sub_100012028()
{
  *(void *)(v0 + 16) = 0x615F706D615F7078;
}

uint64_t sub_10001205C()
{
  return static LogInterpolation.prefix<A>(_:_:)();
}

BOOL sub_100012078()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1 & 1, v0);
}

uint64_t sub_1000120C0(uint64_t a1)
{
  return sub_10001044C(a1, 1, v1);
}

uint64_t sub_1000120E0()
{
  sub_1000101E8(v4, 0, 1, v2);
  uint64_t v6 = *(int *)(v1 + 44);
  return sub_100006374(v0 + v6, v5 + v6, v3);
}

uint64_t sub_100012134()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100012154(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return sub_1000186E8(a1, a2, a3);
}

uint64_t sub_100012178()
{
  return v0;
}

void sub_100012194(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 120) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1000121C4(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t sub_1000121E8()
{
  return 0;
}

uint64_t sub_100012204()
{
  *(void *)(v3 - 88) = v1;
  uint64_t v5 = *(void *)(v2 - 24);
  *(void *)(v3 - 112) = *(void *)(v0 + 2560);
  *(void *)(v3 - 104) = v5;
  *(void *)(v3 - 96) = *(void *)(v2 - 8);
  return swift_bridgeObjectRetain();
}

uint64_t sub_100012264()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_1000122A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000101E8(a1, 1, 1, a4);
}

double sub_1000122C4()
{
  double result = 0.0;
  _OWORD *v0 = 0u;
  v0[1] = 0u;
  return result;
}

uint64_t sub_1000122D4()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t sub_1000122F8()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

BOOL sub_100012318(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

char *sub_100012338(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10000C008();
    double result = (char *)sub_10000F770();
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_1000083CC(a3, result);
  }
  return result;
}

uint64_t sub_100012394(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10001248C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000124D4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

void sub_10001252C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) transactionsCount];
  [v2 removeObject:*(void *)(a1 + 32)];
}

void sub_100012580(uint64_t a1)
{
  os_unfair_lock_lock_with_options();
  id v2 = [*(id *)(a1 + 32) connections];
  [v2 removeObject:*(void *)(a1 + 40)];

  uint64_t v3 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 16);
  os_unfair_lock_unlock(v3);
}

void sub_1000125E4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) transactionsCount];
  [v2 addObject:*(void *)(a1 + 32)];

  uint64_t v3 = [*(id *)(a1 + 40) transactionsCount];
  id v4 = [v3 countForObject:*(void *)(a1 + 32)];

  if (v4 == (id)1)
  {
    unint64_t v5 = +[AMSLogConfig sharedAccountsDaemonConfig];
    if (!v5)
    {
      unint64_t v5 = +[AMSLogConfig sharedConfig];
    }
    unint64_t v6 = [v5 OSLogObject];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = objc_opt_class();
      uint64_t v8 = AMSLogKey();
      uint64_t v9 = *(void *)(a1 + 32);
      int v12 = 138543874;
      uint64_t v13 = v7;
      __int16 v14 = 2114;
      uint64_t v15 = v8;
      __int16 v16 = 2114;
      uint64_t v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%{public}@: [%{public}@] Taking a keep alive transaction. transactionID = %{public}@", (uint8_t *)&v12, 0x20u);
    }
    [*(id *)(a1 + 32) UTF8String];
    Swift::Bool v10 = (void *)os_transaction_create();
    Swift::Int v11 = [*(id *)(a1 + 40) transactions];
    [v11 setObject:v10 forKeyedSubscript:*(void *)(a1 + 32)];
  }
}

void sub_100013108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_100014C34(void *a1)
{
  uint64_t v1 = a1[4];
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(a1[5] + 8) + 24);
  objc_msgSend(*(id *)(*(void *)(a1[6] + 8) + 40), "ams_sanitizedForSecureCoding");
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, id))(v1 + 16))(v1, v2, v3);
}

void sub_100014CA8(uint64_t a1)
{
  id v2 = (id)AMSSetLogKey();
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100014D04(uint64_t a1)
{
  id v2 = +[AMSLogConfig sharedAccountsCookiesConfig];
  if (!v2)
  {
    id v2 = +[AMSLogConfig sharedConfig];
  }
  id v3 = [v2 OSLogObject];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    id v4 = AMSLogKey();
    uint64_t v5 = objc_opt_class();
    uint64_t v6 = v5;
    if (v4)
    {
      uint64_t v7 = AMSLogKey();
      uint64_t v8 = +[NSString stringWithFormat:@"%@: [%@] ", v6, v7];
    }
    else
    {
      uint64_t v8 = +[NSString stringWithFormat:@"%@: ", v5];
      uint64_t v7 = v8;
    }
    uint64_t v9 = NSStringFromSelector(*(SEL *)(a1 + 56));
    *(_DWORD *)buf = 138543618;
    unint64_t v22 = v8;
    __int16 v23 = 2114;
    uint64_t v24 = v9;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "%{public}@%{public}@ - performing block", buf, 0x16u);
    if (v4) {
  }
    }
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_1000156C0;
  void v20[3] = &unk_100112368;
  uint64_t v10 = *(void *)(a1 + 56);
  void v20[4] = *(void *)(a1 + 32);
  v20[5] = v10;
  Swift::Int v11 = objc_retainBlock(v20);
  int v12 = *(void **)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t v14 = *(unsigned __int8 *)(a1 + 64);
  id v19 = 0;
  uint64_t v15 = [v12 getCookiePropertiesForAccount:v13 cookieDatabaseOnly:v14 error:&v19];
  id v16 = v19;
  uint64_t v17 = *(void *)(a1 + 48);
  unint64_t v18 = objc_msgSend(v16, "ams_sanitizedForSecureCoding");
  (*(void (**)(uint64_t, void *, void *))(v17 + 16))(v17, v15, v18);

  ((void (*)(void *))v11[2])(v11);
}

void sub_100014F6C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_1000156C0(uint64_t a1)
{
  id v3 = +[AMSLogConfig sharedAccountsCookiesConfig];
  if (!v3)
  {
    id v3 = +[AMSLogConfig sharedConfig];
  }
  id v4 = [v3 OSLogObject];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = AMSLogKey();
    uint64_t v6 = objc_opt_class();
    uint64_t v7 = v6;
    if (v5)
    {
      uint64_t v1 = AMSLogKey();
      +[NSString stringWithFormat:@"%@: [%@] ", v7, v1];
    }
    else
    {
      +[NSString stringWithFormat:@"%@: ", v6];
    uint64_t v8 = };
    uint64_t v9 = NSStringFromSelector(*(SEL *)(a1 + 40));
    *(_DWORD *)buf = 138543618;
    Swift::Int v11 = v8;
    __int16 v12 = 2114;
    uint64_t v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%{public}@%{public}@ - finishing block", buf, 0x16u);
    if (v5)
    {

      uint64_t v8 = (void *)v1;
    }
  }
}

unsigned char *initializeBufferWithCopyOfBuffer for AccountDataPayload.CodingKeys(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

unsigned char *sub_10001586C(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

void sub_100015938()
{
  sub_100015940(*v0);
}

void sub_100015940(char a1)
{
  switch(a1)
  {
    case 1:
    case 2:
    case 3:
    case 4:
      sub_1000159E0();
      break;
    default:
      return;
  }
}

uint64_t sub_1000159EC()
{
  return v0 + 8;
}

uint64_t sub_1000159FC()
{
  return swift_release();
}

uint64_t sub_100015A04()
{
  return swift_release();
}

uint64_t sub_100015A0C()
{
  return swift_release();
}

uint64_t sub_100015A14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100015A24(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100015A34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

void sub_100015A44(uint64_t a1)
{
}

void sub_100015A4C(uint64_t a1)
{
}

void sub_100015A54(uint64_t a1)
{
}

void sub_100015A5C(uint64_t a1)
{
}

void sub_100015A64(uint64_t a1)
{
}

void sub_100015A6C(uint64_t a1)
{
}

void sub_100015A74(uint64_t a1)
{
}

void sub_100015A7C(uint64_t a1)
{
}

void sub_100015A84(uint64_t a1)
{
}

uint64_t sub_100015A8C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100015A9C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100015AAC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100015ABC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

id sub_100015ACC(uint64_t a1, uint64_t a2)
{
  id result = objc_retainBlock(*(id *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t sub_100015AF8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100015B08(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100015B18(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100015B28(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100015B38()
{
  *(void *)(v1 - 104) = v0;
  return static Log.accountsDataSync.getter();
}

void sub_100015B78()
{
  Hasher._combine(_:)(0);
}

id sub_100015B9C(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t sub_100015BB4()
{
  return v0;
}

void sub_100015BCC()
{
  uint64_t v1 = 0x63636120726F6620;
  unint64_t v2 = 0xED00003A746E756FLL;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(*(Swift::String *)&v1);
}

unsigned char *sub_100015BFC(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *id result = a2;
        break;
      case 2:
        *(_WORD *)id result = a2;
        break;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)id result = a2;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *id result = 0;
        break;
      case 2:
        *(_WORD *)id result = 0;
        break;
      case 3:
LABEL_19:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)id result = 0;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_100015C9C(unsigned int *a1, int a2)
{
  if (!a2) {
    return sub_1000167B0();
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t sub_100015CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AMPAccount();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for AMPAccount()
{
  uint64_t result = qword_10012EF10;
  if (!qword_10012EF10) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100015DA0(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

void sub_100015DF0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    objc_msgSend(a2, "ams_sanitizedForSecureCoding");
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void, id))(v2 + 16))(v2, 0, v5);
  }
  else
  {
    int v3 = *(void (**)(uint64_t, uint64_t, void))(v2 + 16);
    uint64_t v4 = *(void *)(a1 + 32);
    v3(v4, 1, 0);
  }
}

void sub_100015E90(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    objc_msgSend(a3, "ams_sanitizedForSecureCoding");
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void, id))(v3 + 16))(v3, 0, v6);
  }
  else
  {
    uint64_t v4 = *(void (**)(uint64_t))(v3 + 16);
    uint64_t v5 = *(void *)(a1 + 32);
    v4(v5);
  }
}

uint64_t sub_100015F28()
{
  v0[79] = v0[31];
  v0[76] = v0[46];
  return swift_retain();
}

uint64_t sub_100015F48()
{
  return sub_100007468(v1, v0 - 80);
}

uint64_t sub_100015F90()
{
  return swift_task_alloc();
}

uint64_t sub_100016004@<X0>(uint64_t a1@<X8>)
{
  v3[3] = a1;
  v3[4] = v1;
  v3[5] = (v2 - 32) | 0x8000000000000000;
  v3[6] = v5;
  v3[7] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_10001602C@<X0>(uint64_t a1@<X8>)
{
  v2[289] = a1;
  v2[286] = *(void *)(v3 - 88);
  v2[287] = v1;
  return swift_bridgeObjectRetain();
}

BOOL sub_100016050()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v0, v1);
}

uint64_t sub_100016070()
{
  return 0;
}

uint64_t sub_10001608C()
{
  return v0;
}

uint64_t sub_100016098()
{
  uint64_t v2 = *(void *)(v0 + 1016);
  uint64_t v3 = *(void *)(v0 + 1024);
  return sub_1000186E8(v2, v3, 2u);
}

void sub_1000160BC()
{
  sub_100017758();
}

uint64_t sub_1000160F8()
{
  return v0;
}

NSString sub_10001610C()
{
  return String._bridgeToObjectiveC()();
}

id sub_100016124(__n128 *a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  a1[1] = a2;
  *(void *)(v18 + 208) = a18;
  *(void *)(v18 + 184) = v19;
  return v19;
}

uint64_t sub_100016144(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  *(void *)(v3 + 2088) = *(void *)(v4 - 120);
  *(void *)(v3 + 2064) = v2;
  return swift_retain();
}

void sub_10001616C()
{
  Hasher._combine(_:)(1u);
}

id sub_100016184(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t sub_10001619C()
{
  sub_1000087B0(v0, v0[3]);
  return type metadata accessor for AccountIdentity();
}

void sub_1000161D0(char a1@<W8>)
{
  *(unsigned char *)(v1 - 68) = a1;
}

NSString sub_1000161DC()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_1000161F4()
{
  return 0x73746E756F636341;
}

uint64_t sub_100016218()
{
  return dispatch thunk of Hashable.hash(into:)();
}

id sub_10001623C(uint64_t a1, const char *a2)
{
  uint64_t v7 = *(void *)(v5 - 112);
  return objc_msgSend(v2, a2, v4, v3, v7);
}

id sub_100016274(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  *(void *)(v2 + 24) = v4;
  return v3;
}

NSString sub_1000162A8()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_1000162C4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000162E0()
{
  *(void *)(v1 + 1968) = v0;
  *(void *)(v1 + 1976) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000162FC()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100016318@<X0>(uint64_t a1@<X8>)
{
  v3[3] = a1;
  v3[4] = v1;
  v3[5] = (v2 - 32) | 0x8000000000000000;
  v3[6] = v5;
  v3[7] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100016350()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

void sub_100016378(uint64_t a1)
{
  *(void *)(v2 + 1112) = a1;
}

uint64_t sub_100016390()
{
  return swift_allocObject();
}

uint64_t sub_1000163A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, long long a19)
{
  *(_OWORD *)(a1 + 16) = a19;
  *(void *)(v20 + 2088) = *(void *)(v21 - 112);
  *(void *)(v20 + 2064) = v19;
  return swift_retain();
}

void sub_1000163E4(uint64_t a1)
{
  *(void *)(v2 + 1048) = a1;
}

id sub_1000163FC(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  *(void *)(v2 + 24) = v4;
  return v3;
}

uint64_t sub_100016428()
{
  return 0x2D7972746572202CLL;
}

void sub_10001644C()
{
  *(void *)(v0 + 8 * (v2 >> 6) + 64) |= 1 << v2;
  uint64_t v4 = (void *)(*(void *)(v0 + 48) + 16 * v2);
  *uint64_t v4 = v1;
  v4[1] = v3;
}

uint64_t sub_100016480@<X0>(uint64_t a1@<X8>)
{
  v3[4] = 0xD000000000000010;
  v3[5] = (a1 - 32) | 0x8000000000000000;
  v3[6] = v2;
  v3[7] = v1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000164AC(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_1000164C0@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 + 32) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

id sub_1000164E0(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t sub_1000164F8()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t sub_100016530()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100016548()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t sub_100016578()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

_OWORD *sub_100016590(_OWORD *a1, _OWORD *a2)
{
  return sub_10000D5F4(a1, a2);
}

uint64_t sub_1000165C4()
{
  *(void *)(v0 - 232) = *(void *)(v0 - 312);
  *(void *)(v0 - 256) = *(void *)(v0 - 72);
  return swift_retain();
}

uint64_t sub_1000165E8@<X0>(uint64_t a1@<X0>, char a2@<W8>)
{
  *(unsigned char *)(v3 - 80) = a2;
  return KeyedEncodingContainer.encode(_:forKey:)(a1, v3 - 80, v2);
}

void sub_100016618(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 152) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_100016634()
{
  return LogInterpolation.init(stringLiteral:)();
}

uint64_t sub_100016654@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v2[334] = v4;
  v2[333] = v3;
  uint64_t v6 = v2[305];
  uint64_t v7 = (uint64_t *)(*(void *)(a1 + 48) + 16 * a2);
  uint64_t v8 = *v7;
  *(void *)(v5 - 88) = *v7;
  v2[335] = v8;
  v2[336] = v7[1];
  return v6;
}

uint64_t sub_100016694()
{
  uint64_t v5 = *(int *)(v1 + 24);
  return sub_100006374(v0 + v5, v3 + v5, v2);
}

BOOL sub_1000166B4()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1, v0);
}

void sub_1000166D4()
{
  Swift::UInt v2 = *v0;
  Hasher._combine(_:)(v2);
}

void sub_1000166F4(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 176) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void *sub_100016710(void *a1)
{
  return sub_1000087B0(a1, a1[3]);
}

uint64_t sub_100016730()
{
  return static LogInterpolation.prefix<A>(_:_:)();
}

uint64_t sub_100016750()
{
  return 5;
}

uint64_t sub_100016774()
{
  return type metadata accessor for CachedServerDataSyncAttempt(0);
}

uint64_t sub_1000167B0()
{
  return 0;
}

uint64_t sub_1000167B8()
{
  return 0;
}

unint64_t sub_1000167F0()
{
  return 0xD000000000000018;
}

uint64_t sub_100016804()
{
  *(void *)(v3 - 96) = v1;
  uint64_t v5 = *(void *)(v2 - 24);
  *(void *)(v3 - 120) = *(void *)(v0 + 2560);
  *(void *)(v3 - 112) = v5;
  *(void *)(v3 - 104) = *(void *)(v2 - 8);
  return swift_bridgeObjectRetain();
}

uint64_t sub_100016874@<X0>(uint64_t a1@<X8>)
{
  return v1 + a1;
}

uint64_t sub_100016880()
{
  return swift_continuation_init();
}

uint64_t sub_100016898()
{
  return v0;
}

uint64_t sub_1000168AC()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t sub_1000168EC()
{
  return swift_task_alloc();
}

uint64_t sub_100016914()
{
  return v0;
}

uint64_t sub_100016930()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

void sub_100016954()
{
  *(void *)(v0 + 16) = 0x615F706D615F7078;
}

uint64_t sub_100016988()
{
  return v0;
}

uint64_t sub_10001699C()
{
  return *(void *)(v0 + 304);
}

uint64_t sub_1000169AC()
{
  return type metadata accessor for AccountDataState(0);
}

void sub_1000169D0()
{
}

uint64_t sub_1000169E8()
{
  uint64_t v3 = v0[329];
  *(void *)(v1 - 120) = v0[326];
  *(void *)(v1 - 112) = v3;
  uint64_t v4 = v0[306];
  *(void *)(v1 - 136) = v0[304];
  *(void *)(v1 - 128) = v4;
  return static LogInterpolation.prefix(_:_:)();
}

uint64_t sub_100016A80()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100016AA0()
{
  return *(void *)(v0 - 120);
}

uint64_t sub_100016AB4()
{
  return sub_100009CC0(0x44746E756F636361, 0xEF636E7953617461);
}

uint64_t sub_100016AE4()
{
  return v0;
}

void sub_100016AF0()
{
  *(void *)(v1 + 416) = v2;
  *(_DWORD *)(v1 + 504) = *(_DWORD *)(v0 + 80);
}

uint64_t sub_100016B08()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_100016B2C()
{
  return v0 + 8;
}

uint64_t sub_100016B48()
{
  return v0;
}

uint64_t sub_100016B90(uint64_t a1)
{
  uint64_t v2 = sub_100011D80(&qword_10012EFB0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100016BF0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v11 = sub_10001169C(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  sub_100011D80(&qword_100130030);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_10001169C(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v18;
LABEL_5:
  uint64_t v20 = *v5;
  if (v17)
  {
    uint64_t v21 = v20[7];
    uint64_t result = swift_unknownObjectRelease();
    *(void *)(v21 + 8 * v16) = a1;
  }
  else
  {
    sub_100016E40(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100016D18(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v11 = sub_10001169C(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  sub_100011D80(&qword_100130028);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_10001169C(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v18;
LABEL_5:
  uint64_t v20 = *v5;
  if (v17)
  {
    uint64_t v21 = v20[7];
    uint64_t result = swift_release();
    *(void *)(v21 + 8 * v16) = a1;
  }
  else
  {
    sub_100016E40(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_100016E40(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t sub_100016E88@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = -1;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  *a2 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v5 = v6;
  if (-v3 < 64) {
    uint64_t v2 = ~(-1 << -(char)v3);
  }
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

char *sub_100016EC0(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_100006110(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void sub_100016EE0(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

uint64_t sub_100016F14(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_1000B7694((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      uint64_t result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    uint64_t result = (uint64_t)sub_1000B776C(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_10001706C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_10000C008();
    sub_10000FA04();
LABEL_11:
    uint64_t result = sub_10000A4D8();
    __break(1u);
    return result;
  }
  if (a3 + 32 * a2 > a1 && a1 + 32 * a2 > a3)
  {
    sub_10000C008();
    sub_10000D390();
    goto LABEL_11;
  }
  return swift_arrayInitWithCopy();
}

uint64_t sub_100017120(void *a1)
{
  return sub_100005510(a1, (SEL *)&selRef_ams_altDSID);
}

uint64_t sub_10001712C()
{
  sub_100008308();
  *(void *)(v1 + 144) = v2;
  *(void *)(v1 + 152) = v0;
  sub_10000F9E8();
  return _swift_task_switch(v3, v4, v5);
}

unint64_t sub_1000171B4()
{
  unint64_t result = qword_10012EB28;
  if (!qword_10012EB28)
  {
    sub_10001065C(255, &qword_10012EB18);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012EB28);
  }
  return result;
}

unint64_t sub_100017214()
{
  unint64_t result = qword_10012FD78;
  if (!qword_10012FD78)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10012FD78);
  }
  return result;
}

uint64_t sub_100017254()
{
  return swift_release();
}

unint64_t sub_10001725C()
{
  unint64_t result = qword_10012EE68;
  if (!qword_10012EE68)
  {
    sub_10007FBF4(&qword_10012EE60);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012EE68);
  }
  return result;
}

uint64_t sub_1000172B0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10007FBF4(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100017300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (sub_10001169C(a1, a2), (v3 & 1) != 0)) {
    return swift_retain();
  }
  else {
    return 0;
  }
}

uint64_t sub_100017344()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10001736C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_100017394(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000173DC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100016F14(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_1000115F4((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_1000115F4((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_10000D47C((uint64_t)v12);
  return v7;
}

unint64_t sub_1000174B0()
{
  unint64_t result = qword_100130080;
  if (!qword_100130080)
  {
    type metadata accessor for AccountIdentity();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100130080);
  }
  return result;
}

uint64_t type metadata accessor for CachedServerDataSyncTaskScheduleInput(uint64_t a1)
{
  return sub_100010474(a1, qword_10012F298);
}

void sub_100017520(uint64_t *a1)
{
}

uint64_t sub_100017544()
{
  sub_100009C64();
  sub_1000055EC(*(void **)(v0 + 16), *(void *)(v0 + 24) + *(void *)(v0 + 40));
  sub_100007F34();
  return v1();
}

uint64_t sub_1000175C0()
{
  uint64_t v1 = *(void *)(v0[3] + OBJC_IVAR____TtC12amsaccountsd23CachedServerDataService_accountDataActors);
  uint64_t v2 = OBJC_IVAR____TtC12amsaccountsd23CachedServerDataService_metrics;
  v0[4] = v1;
  v0[5] = v2;
  return sub_1000AACF4((uint64_t)sub_100017544, v1);
}

uint64_t sub_1000175F0(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_1000AACF4((uint64_t)sub_1000175C0, 0);
}

uint64_t sub_10001760C()
{
  sub_100009C64();
  uint64_t v1 = *(void **)(v0 + 96);
  sub_100007618((uint64_t)v1, (_OWORD *)(v0 + 16));

  uint64_t v2 = *(_OWORD **)(v0 + 64);
  long long v3 = *(_OWORD *)(v0 + 16);
  long long v4 = *(_OWORD *)(v0 + 48);
  v2[1] = *(_OWORD *)(v0 + 32);
  v2[2] = v4;
  *uint64_t v2 = v3;
  sub_10000800C();
  return v5();
}

uint64_t sub_1000176A4()
{
  sub_100008308();
  *(void *)(v0 + 80) = sub_1000182F4();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100003B64;
  sub_1000AAF28();
  return sub_10001712C();
}

uint64_t sub_10001773C(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = a2;
  return sub_1000AACF4((uint64_t)sub_1000176A4, 0);
}

void sub_100017758()
{
  sub_10000A46C();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  type metadata accessor for Log();
  sub_100008460();
  __chkstk_darwin(v4);
  sub_10000F9D0();
  sub_1000061F4(v1, (uint64_t)&v9);
  if (v10)
  {
    sub_100007468(&v9, v3);
  }
  else
  {
    sub_1000AABFC((uint64_t)&v9, &qword_10012F7C0);
    static Log.accountsDataSync.getter();
    sub_100011D80((uint64_t *)&unk_10012E440);
    uint64_t v5 = type metadata accessor for LogInterpolation();
    sub_1000082C8(v5);
    sub_100015FC4();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3D0;
    id v6 = (id)AMSSetLogKeyIfNeeded();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    static LogInterpolation.prefix<A>(_:_:)();
    swift_bridgeObjectRelease();
    sub_1000AB060();
    uint64_t v10 = type metadata accessor for AccountIdentity.DSID();
    sub_1000042C4((uint64_t *)&v9);
    sub_10000A430();
    sub_100008000();
    v7();
    static LogInterpolation.traceableSensitive(_:)();
    sub_1000AABFC((uint64_t)&v9, &qword_10012EFB0);
    Log.error(_:)();
    swift_bridgeObjectRelease();
    sub_1000084F8();
    v8();
    *(void *)(v3 + 32) = 0;
    *(_OWORD *)uint64_t v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
  }
  sub_10000A484();
}

uint64_t sub_100017960()
{
  sub_100009C64();
  sub_1000AAFD0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000121C4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100015860;
  uint64_t v3 = sub_10000FC40();
  return v4(v3);
}

uint64_t sub_100017A14()
{
  sub_10001660C();
  uint64_t v10 = v0;
  uint64_t v1 = v0[49];
  uint64_t v2 = v0[46];
  uint64_t v3 = sub_1000A9B5C(v0[50]);
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = v2;
  sub_1000A9644(v3, (uint64_t)sub_1000AA064, 0, isUniquelyReferenced_nonNull_native, &v9);
  if (v1)
  {
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = v9;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001065C(0, &qword_10012F8E0);
    uint64_t v7 = sub_100083928(v6);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100007F34();
    return v8(v7);
  }
}

uint64_t sub_100017B80()
{
  sub_100008308();
  v1[30] = v2;
  v1[31] = v0;
  v1[32] = swift_getObjectType();
  uint64_t v3 = sub_100011D80(&qword_10012EB08);
  v1[33] = v3;
  sub_1000082C8(v3);
  v1[34] = v4;
  v1[35] = sub_100015F90();
  v1[36] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for AccountIdentity();
  v1[37] = v5;
  sub_1000082C8(v5);
  v1[38] = v6;
  v1[39] = sub_1000084E0();
  uint64_t v7 = type metadata accessor for AccountIdentity.DSID();
  v1[40] = v7;
  sub_1000082C8(v7);
  v1[41] = v8;
  v1[42] = sub_1000084E0();
  uint64_t v9 = type metadata accessor for Log();
  v1[43] = v9;
  sub_1000082C8(v9);
  v1[44] = v10;
  v1[45] = sub_1000084E0();
  sub_10000F9E8();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t sub_100017CB8()
{
  sub_100009C64();
  uint64_t v1 = *(void *)(v0 + 552);
  sub_10000EBA0();
  *(void *)(v0 + 560) = v1;
  sub_1000AAD48();
  v2();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_10000F9E8();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100017D80()
{
  sub_100008308();
  static Date.now.getter();
  sub_10001656C();
  return _swift_task_switch(v0, v1, v2);
}

uint64_t sub_100017DE4()
{
  uint64_t v1 = v0[40];
  uint64_t v2 = *(void *)(v1 + 16);
  v0[64] = v2;
  if (v2)
  {
    uint64_t v3 = v0[61];
    v0[66] = 0;
    v0[65] = v3;
    uint64_t v4 = v1 + 32;
    swift_bridgeObjectRetain();
    sub_100018570(v4, (uint64_t)(v0 + 14));
    uint64_t v5 = (void *)swift_task_alloc();
    v0[67] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_100017F5C;
    return sub_1000175F0((uint64_t)(v0 + 14));
  }
  else
  {
    uint64_t v7 = v0[61];
    sub_1000AAD28((uint64_t)"accountDataFetch");
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100007F34();
    return v8(v7);
  }
}

uint64_t sub_100017F5C()
{
  sub_100008308();
  sub_1000082E0();
  uint64_t v3 = v2;
  sub_10000A43C();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 544) = v5;
  *(void *)(v3 + 552) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_10000F9E8();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_100018058()
{
  sub_100008308();
  sub_1000082E0();
  uint64_t v3 = v2;
  sub_10000A43C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_100008314();
  *uint64_t v6 = v5;
  *(void *)(v3 + 504) = v0;
  swift_task_dealloc();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  sub_10000F9E8();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_10001813C()
{
  sub_1000AB000();
  sub_100005AEC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000121C4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100015860;
  sub_100015F64();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000181EC()
{
  return sub_10000A5D0(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

double sub_1000181F8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result = sub_1000048DC(a1);
  if (!v2)
  {
    *a2 = v5;
    a2[1] = v6;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

unint64_t sub_10001823C()
{
  unint64_t result = qword_10012F7E0;
  if (!qword_10012F7E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F7E0);
  }
  return result;
}

unint64_t sub_100018288()
{
  return 0xD000000000000012;
}

unint64_t sub_1000182A8()
{
  unint64_t result = qword_10012EFF8;
  if (!qword_10012EFF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012EFF8);
  }
  return result;
}

uint64_t sub_1000182F4()
{
  sub_1000041F8(0, 1, 1, (uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v1 = v0;
  unint64_t v3 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  if (v3 >= v2 >> 1)
  {
    sub_1000041F8(v2 > 1, v3 + 1, 1, v0);
    uint64_t v1 = v6;
  }
  *(void *)(v1 + 16) = v3 + 1;
  unint64_t v4 = v1 + 24 * v3;
  *(void *)(v4 + 32) = 0xD000000000000012;
  *(void *)(v4 + 40) = 0x8000000100101720;
  *(unsigned char *)(v4 + 48) = 6;
  return v1;
}

unint64_t sub_10001838C()
{
  return sub_10000B364();
}

double sub_100018398@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result = sub_100004380(a1);
  if (!v2)
  {
    *a2 = v5;
    a2[1] = v6;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

unint64_t sub_1000183DC()
{
  unint64_t result = qword_10012F000;
  if (!qword_10012F000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F000);
  }
  return result;
}

uint64_t sub_100018428()
{
  return 0x5F746E756F636361;
}

unint64_t sub_100018448()
{
  unint64_t result = qword_10012F050;
  if (!qword_10012F050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F050);
  }
  return result;
}

double sub_100018494@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100008044(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

unint64_t sub_1000184D8()
{
  unint64_t result = qword_10012F058;
  if (!qword_10012F058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F058);
  }
  return result;
}

unint64_t sub_100018524()
{
  unint64_t result = qword_10012F0A8;
  if (!qword_10012F0A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F0A8);
  }
  return result;
}

uint64_t sub_100018570(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  sub_10000A430();
  (*v3)(a2);
  return a2;
}

uint64_t *sub_1000185D0(uint64_t *a1)
{
  return a1;
}

uint64_t sub_100018644(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_10001865C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccountDataState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for BagValueType(uint64_t a1)
{
  return sub_1000186E8(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_1000186D0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 6u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000186E8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 6u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100018700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008F548);
}

uint64_t sub_100018714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008F4BC);
}

uint64_t *sub_100018728(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AccountIdentity();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v9;
    id v10 = v9;
  }
  return a1;
}

uint64_t sub_1000187F8(uint64_t a1)
{
  uint64_t v2 = sub_100011D80(&qword_10012ECC8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100018858(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100011D80(&qword_10012ECC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000188C0(uint64_t a1, uint64_t *a2)
{
  sub_100011D80(a2);
  sub_1000082F8();
  sub_1000084F8();
  v3();
  return a1;
}

uint64_t sub_100018910(uint64_t a1, uint64_t *a2)
{
  sub_100011D80(a2);
  sub_1000082F8();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

unint64_t sub_100018964()
{
  unint64_t result = qword_10012E4D0;
  if (!qword_10012E4D0)
  {
    type metadata accessor for Date();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10012E4D0);
  }
  return result;
}

uint64_t sub_1000189B4(uint64_t a1)
{
  uint64_t v2 = sub_100011D80(&qword_10012EE78);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_1000190D8(uint64_t a1)
{
  uint64_t v2 = +[AMSLogConfig sharedAccountsMultiUserConfig];
  if (!v2)
  {
    uint64_t v2 = +[AMSLogConfig sharedConfig];
  }
  uint64_t v3 = [v2 OSLogObject];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = objc_opt_class();
    int v5 = AMSLogKey();
    long long v6 = [*(id *)(a1 + 32) share];
    uint64_t v7 = AMSHashIfNeeded();
    *(_DWORD *)buf = 138543874;
    uint64_t v26 = v4;
    __int16 v27 = 2114;
    uint64_t v28 = v5;
    __int16 v29 = 2114;
    uint64_t v30 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Accepting a home cloud share. share = %{public}@", buf, 0x20u);
  }
  uint64_t v8 = [*(id *)(a1 + 32) controller];
  uint64_t v9 = [v8 cloudDataManager];
  id v10 = [*(id *)(a1 + 32) share];
  uint64_t v11 = [v10 containerIdentifier];
  uint64_t v12 = [v9 containerWithContainerIdentifier:v11];

  id v13 = objc_alloc_init((Class)AMSMutablePromise);
  BOOL v14 = [*(id *)(a1 + 32) share];
  uint64_t v15 = [v14 URL];
  unint64_t v16 = [*(id *)(a1 + 32) share];
  char v17 = [v16 token];
  unint64_t v18 = [v12 acceptShareURL:v15 withToken:v17];
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  _OWORD v23[2] = sub_10001936C;
  v23[3] = &unk_100111ED0;
  v23[4] = *(void *)(a1 + 32);
  id v19 = v13;
  id v24 = v19;
  [v18 resultWithCompletion:v23];

  uint64_t v20 = v24;
  id v21 = v19;

  return v21;
}

void sub_10001936C(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = +[AMSLogConfig sharedAccountsMultiUserConfig];
  uint64_t v7 = (void *)v6;
  if (a2)
  {
    if (!v6)
    {
      uint64_t v7 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v8 = [v7 OSLogObject];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = objc_opt_class();
      id v10 = AMSLogKey();
      *(_DWORD *)buf = 138543618;
      uint64_t v20 = v9;
      __int16 v21 = 2114;
      uint64_t v22 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Successfully accepted the share invitation.", buf, 0x16u);
    }
    uint64_t v11 = [*(id *)(a1 + 32) _generateInviteCode];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    _OWORD v17[2] = sub_1000195D0;
    v17[3] = &unk_100111EA8;
    uint64_t v12 = *(void **)(a1 + 40);
    v17[4] = *(void *)(a1 + 32);
    id v18 = v12;
    [v11 resultWithCompletion:v17];
  }
  else
  {
    if (!v6)
    {
      uint64_t v7 = +[AMSLogConfig sharedConfig];
    }
    id v13 = [v7 OSLogObject];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = objc_opt_class();
      uint64_t v15 = AMSLogKey();
      unint64_t v16 = AMSHashIfNeeded();
      *(_DWORD *)buf = 138543874;
      uint64_t v20 = v14;
      __int16 v21 = 2114;
      uint64_t v22 = v15;
      __int16 v23 = 2114;
      id v24 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to accept the share. error = %{public}@", buf, 0x20u);
    }
    [*(id *)(a1 + 40) finishWithError:v5];
  }
}

void sub_1000195D0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    [*(id *)(a1 + 40) finishWithResult:a2];
  }
  else
  {
    uint64_t v6 = +[AMSLogConfig sharedAccountsMultiUserConfig];
    if (!v6)
    {
      uint64_t v6 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v7 = [v6 OSLogObject];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = objc_opt_class();
      uint64_t v9 = AMSLogKey();
      id v10 = AMSHashIfNeeded();
      int v11 = 138543874;
      uint64_t v12 = v8;
      __int16 v13 = 2114;
      uint64_t v14 = v9;
      __int16 v15 = 2114;
      unint64_t v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to generate a muInviteCode. error = %{public}@", (uint8_t *)&v11, 0x20u);
    }
    [*(id *)(a1 + 40) finishWithError:v5];
  }
}

id sub_100019968(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) finishWithError:a2];
}

id sub_100019974(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = +[AMSAuthenticateOptions amsd_createAppProvidedDataWithMultiUserAction:@"invite_sent" home:a2];
  id v4 = [v3 copy];
  id v5 = +[AMSAuthenticateOptions amsd_multiUserAuthenticateOptionsWithAppProvidedData:v4];

  uint64_t v6 = [*(id *)(a1 + 32) _performAuthKitUpdateTaskWithOptions:v5];

  return v6;
}

id sub_100019A10(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) finishWithError:a2];
}

void sub_100019A1C(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 authenticationResults];
  id v4 = [v3 objectForKeyedSubscript:@"AKIDMSToken"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v8 = v4;
  }
  else {
    id v8 = 0;
  }

  id v5 = [v8 objectForKeyedSubscript:@"muInviteCode"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v6 = v5;
  }
  else {
    id v6 = 0;
  }

  if ([v6 length])
  {
    [*(id *)(a1 + 32) finishWithResult:v6];
  }
  else
  {
    uint64_t v7 = AMSError();
    [*(id *)(a1 + 32) finishWithError:v7];
  }
}

void sub_100019D4C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    objc_msgSend(a2, "ams_sanitizedForSecureCoding");
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void, id))(v2 + 16))(v2, 0, v5);
  }
  else
  {
    uint64_t v3 = *(void (**)(uint64_t, uint64_t, void))(v2 + 16);
    uint64_t v4 = *(void *)(a1 + 32);
    v3(v4, 1, 0);
  }
}

uint64_t sub_100019EC0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100019FB0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    objc_msgSend(a2, "ams_sanitizedForSecureCoding");
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void, id))(v2 + 16))(v2, 0, v5);
  }
  else
  {
    uint64_t v3 = *(void (**)(uint64_t, uint64_t, void))(v2 + 16);
    uint64_t v4 = *(void *)(a1 + 32);
    v3(v4, 1, 0);
  }
}

void sub_10001A11C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    objc_msgSend(a2, "ams_sanitizedForSecureCoding");
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void, id))(v2 + 16))(v2, 0, v5);
  }
  else
  {
    uint64_t v3 = *(void (**)(uint64_t, uint64_t, void))(v2 + 16);
    uint64_t v4 = *(void *)(a1 + 32);
    v3(v4, 1, 0);
  }
}

void sub_10001A3D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = +[AMSLogConfig sharedConfig];
    if (!v4)
    {
      uint64_t v4 = +[AMSLogConfig sharedConfig];
    }
    id v5 = [v4 OSLogObject];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = objc_opt_class();
      uint64_t v7 = AMSLogKey();
      uint64_t v8 = *(void *)(a1 + 40);
      int v9 = 138544130;
      uint64_t v10 = v6;
      __int16 v11 = 2114;
      uint64_t v12 = v7;
      __int16 v13 = 2114;
      uint64_t v14 = v8;
      __int16 v15 = 2114;
      id v16 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Error during sign-out in amsaccountsd for: %{public}@ is %{public}@", (uint8_t *)&v9, 0x2Au);
    }
  }
}

BOOL sub_10001B3FC(uint64_t a1, void *a2)
{
  id v5 = +[AMSLogConfig sharedBiometricsConfig];
  if (!v5)
  {
    id v5 = +[AMSLogConfig sharedConfig];
  }
  uint64_t v6 = [v5 OSLogObject];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = objc_opt_class();
    id v8 = v7;
    int v9 = AMSLogKey();
    uint64_t v2 = [*(id *)(a1 + 32) account];
    uint64_t v10 = objc_msgSend(v2, "ams_DSID");
    AMSHashIfNeeded();
    v12 = __int16 v11 = a2;
    *(_DWORD *)buf = 138543874;
    int64_t v73 = v7;
    __int16 v74 = 2114;
    uint64_t v75 = (uint64_t)v9;
    __int16 v76 = 2114;
    uint64_t v77 = (uint64_t)v12;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Performing token update. DSID: %{public}@", buf, 0x20u);

    a2 = v11;
  }

  __int16 v13 = *(void **)(a1 + 32);
  id v71 = 0;
  unsigned __int8 v14 = [v13 _isSupported:&v71];
  id v15 = v71;
  if (v14)
  {
    if ([*(id *)(a1 + 32) isUserInitiated]) {
      goto LABEL_9;
    }
    id v16 = *(void **)(a1 + 32);
    id v70 = v15;
    unsigned __int8 v17 = [v16 _canAttemptTokenUpdate:&v70];
    id v18 = v70;

    if (v17)
    {
      id v15 = v18;
LABEL_9:
      id v19 = &swift_willThrow_ptr;
      uint64_t v20 = [*(id *)(a1 + 32) account];
      id v21 = +[AMSBiometrics stateForAccount:v20];

      uint64_t v69 = (uint64_t)v21;
      uint64_t v22 = +[AMSLogConfig sharedBiometricsConfig];
      if (!v22)
      {
        uint64_t v22 = +[AMSLogConfig sharedConfig];
      }
      __int16 v23 = [v22 OSLogObject];
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v66 = a2;
        id v24 = AMSLogKey();
        uint64_t v25 = objc_opt_class();
        uint64_t v26 = v25;
        if (v24)
        {
          uint64_t v2 = AMSLogKey();
          +[NSString stringWithFormat:@"%@: [%@] ", v26, v2];
        }
        else
        {
          +[NSString stringWithFormat:@"%@: ", v25];
        __int16 v27 = };
        *(_DWORD *)buf = 138543618;
        int64_t v73 = v27;
        __int16 v74 = 2048;
        uint64_t v75 = (uint64_t)v21;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%{public}@Current biometrics state = %ld", buf, 0x16u);
        a2 = v66;
        if (v24)
        {

          __int16 v27 = v2;
        }

        id v19 = &swift_willThrow_ptr;
      }

      unint64_t v42 = *(void **)(a1 + 32);
      id v68 = v15;
      [v42 _presentConfirmation:&v68 currentBiometricsState:&v69];
      id v43 = v68;

      if (!v43 && v69 != 2)
      {
        uint64_t v69 = 1;
        +[AMSDefaults setDeviceBiometricsState:1];
      }
      uint64_t v44 = *(void **)(a1 + 32);
      id v67 = v43;
      [v44 _updateTokens:&v67 currentBiometricsState:&v69];
      id v45 = v67;

      uint64_t v46 = v69;
      uint64_t v47 = [*(id *)(a1 + 32) account];
      id v48 = +[AMSBiometrics setState:v46 forAccount:v47];

      uint64_t v49 = +[AMSLogConfig sharedBiometricsConfig];
      if (!v49)
      {
        uint64_t v49 = +[AMSLogConfig sharedConfig];
      }
      int v50 = [v49 OSLogObject];
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        char v51 = AMSLogKey();
        uint64_t v52 = objc_opt_class();
        uint64_t v53 = v52;
        if (v51)
        {
          AMSLogKey();
          id v19 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue();
          +[NSString stringWithFormat:@"%@: [%@] ", v53, v19];
        }
        else
        {
          +[NSString stringWithFormat:@"%@: ", v52];
        char v54 = };
        *(_DWORD *)buf = 138543618;
        int64_t v73 = v54;
        __int16 v74 = 2048;
        uint64_t v75 = v69;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "%{public}@Set biometrics state = %ld", buf, 0x16u);
        if (v51)
        {

          char v54 = v19;
        }
      }
      BOOL v35 = v45 == 0;
      uint64_t v55 = +[AMSLogConfig sharedBiometricsConfig];
      char v56 = (void *)v55;
      if (v45)
      {
        if (!v55)
        {
          char v56 = +[AMSLogConfig sharedConfig];
        }
        unint64_t v57 = [v56 OSLogObject];
        if (!os_log_type_enabled(v57, OS_LOG_TYPE_ERROR)) {
          goto LABEL_53;
        }
        char v58 = objc_opt_class();
        id v59 = v58;
        unint64_t v60 = AMSLogKey();
        *(_DWORD *)buf = 138543874;
        int64_t v73 = v58;
        __int16 v74 = 2114;
        uint64_t v75 = (uint64_t)v60;
        __int16 v76 = 2114;
        uint64_t v77 = (uint64_t)v45;
        char v61 = "%{public}@: [%{public}@] Completed with error: %{public}@";
        BOOL v62 = v57;
        os_log_type_t v63 = OS_LOG_TYPE_ERROR;
      }
      else
      {
        if (!v55)
        {
          char v56 = +[AMSLogConfig sharedConfig];
        }
        unint64_t v57 = [v56 OSLogObject];
        if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_53;
        }
        Swift::Int v64 = objc_opt_class();
        id v59 = v64;
        unint64_t v60 = AMSLogKey();
        *(_DWORD *)buf = 138543874;
        int64_t v73 = v64;
        __int16 v74 = 2114;
        uint64_t v75 = (uint64_t)v60;
        __int16 v76 = 2048;
        uint64_t v77 = v69;
        char v61 = "%{public}@: [%{public}@] Completed token update task with biometricsState: %lu";
        BOOL v62 = v57;
        os_log_type_t v63 = OS_LOG_TYPE_DEFAULT;
      }
      _os_log_impl((void *)&_mh_execute_header, v62, v63, v61, buf, 0x20u);

LABEL_53:
      [*(id *)(a1 + 32) _sendMetricsForUpdate];
      id v34 = v45;
      id v15 = v34;
      goto LABEL_54;
    }
    unint64_t v36 = +[AMSLogConfig sharedBiometricsConfig];
    if (!v36)
    {
      unint64_t v36 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v37 = [v36 OSLogObject];
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      char v38 = AMSLogKey();
      uint64_t v39 = objc_opt_class();
      uint64_t v40 = v39;
      if (v38)
      {
        a1 = AMSLogKey();
        +[NSString stringWithFormat:@"%@: [%@] ", v40, a1];
      }
      else
      {
        +[NSString stringWithFormat:@"%@: ", v39];
      long long v41 = };
      *(_DWORD *)buf = 138543362;
      int64_t v73 = v41;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "%{public}@We did not attempt to create a new token.", buf, 0xCu);
      if (v38)
      {

        long long v41 = (void *)a1;
      }
    }
    if (!a2)
    {
      BOOL v35 = 0;
      id v15 = v18;
      goto LABEL_55;
    }
    unint64_t v33 = v18;
LABEL_20:
    id v34 = v33;
    id v15 = v34;
    BOOL v35 = 0;
LABEL_54:
    *a2 = v34;
    goto LABEL_55;
  }
  uint64_t v28 = +[AMSLogConfig sharedBiometricsConfig];
  if (!v28)
  {
    uint64_t v28 = +[AMSLogConfig sharedConfig];
  }
  __int16 v29 = [v28 OSLogObject];
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
  {
    uint64_t v30 = objc_opt_class();
    id v31 = v30;
    unint64_t v32 = AMSLogKey();
    *(_DWORD *)buf = 138543874;
    int64_t v73 = v30;
    __int16 v74 = 2114;
    uint64_t v75 = (uint64_t)v32;
    __int16 v76 = 2114;
    uint64_t v77 = (uint64_t)v15;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@]Biometrics Update Failed with error: %{public}@", buf, 0x20u);
  }
  if (a2)
  {
    unint64_t v33 = v15;
    goto LABEL_20;
  }
  BOOL v35 = 0;
LABEL_55:

  return v35;
}

void sub_10001CA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10001CA70(double *a1, void *a2)
{
  id v4 = a2;
  id v5 = [v4 objectForKeyedSubscript:*((void *)a1 + 4)];
  uint64_t v6 = v5;
  if (v5 && (double v7 = a1[8], [v5 doubleValue], v7 - v8 < 15.0))
  {
    int v9 = +[AMSLogConfig sharedBiometricsConfig];
    if (!v9)
    {
      int v9 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v10 = [v9 OSLogObject];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = AMSLogKey();
      uint64_t v12 = objc_opt_class();
      uint64_t v13 = v12;
      if (v11)
      {
        uint64_t v2 = AMSLogKey();
        +[NSString stringWithFormat:@"%@: [%@] ", v13, v2];
      }
      else
      {
        +[NSString stringWithFormat:@"%@: ", v12];
      unsigned __int8 v14 = };
      uint64_t v24 = *((void *)a1 + 8);
      uint64_t v25 = *((void *)a1 + 4);
      [v6 doubleValue];
      *(_DWORD *)buf = 138544386;
      unint64_t v33 = v14;
      __int16 v34 = 2048;
      uint64_t v35 = v24;
      __int16 v36 = 2114;
      uint64_t v37 = v25;
      __int16 v38 = 2048;
      uint64_t v39 = 0x402E000000000000;
      __int16 v40 = 2048;
      uint64_t v41 = v26;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}@Unable to take token update lock. Current uptime (%f) for %{public}@ is within %f seconds of existing lock uptime, %f.", buf, 0x34u);
      if (v11)
      {

        unsigned __int8 v14 = (void *)v2;
      }
    }
    *(unsigned char *)(*(void *)(*((void *)a1 + 6) + 8) + 24) = 0;
    CFStringRef v30 = @"errorIsResultOfLockTimeout";
    id v31 = &__kCFBooleanTrue;
    __int16 v23 = +[NSDictionary dictionaryWithObjects:&v31 forKeys:&v30 count:1];
    uint64_t v27 = AMSCustomError();
    uint64_t v28 = *(void *)(*((void *)a1 + 7) + 8);
    __int16 v29 = *(void **)(v28 + 40);
    *(void *)(v28 + 40) = v27;
  }
  else
  {
    id v15 = +[AMSLogConfig sharedBiometricsConfig];
    if (!v15)
    {
      id v15 = +[AMSLogConfig sharedConfig];
    }
    id v16 = [v15 OSLogObject];
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      unsigned __int8 v17 = AMSLogKey();
      uint64_t v18 = objc_opt_class();
      uint64_t v19 = v18;
      if (v17)
      {
        uint64_t v2 = AMSLogKey();
        +[NSString stringWithFormat:@"%@: [%@] ", v19, v2];
      }
      else
      {
        +[NSString stringWithFormat:@"%@: ", v18];
      uint64_t v20 = };
      uint64_t v21 = *((void *)a1 + 4);
      uint64_t v22 = *((void *)a1 + 8);
      *(_DWORD *)buf = 138543874;
      unint64_t v33 = v20;
      __int16 v34 = 2114;
      uint64_t v35 = v21;
      __int16 v36 = 2048;
      uint64_t v37 = v22;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%{public}@Updated lock uptime for %{public}@ to %f.", buf, 0x20u);
      if (v17)
      {

        uint64_t v20 = (void *)v2;
      }
    }
    __int16 v23 = +[NSNumber numberWithDouble:a1[8]];
    [v4 setObject:v23 forKeyedSubscript:*((void *)a1 + 4)];
  }
}

id sub_10001DA20(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[AMSProcessInfo currentProcess];
  id v5 = +[AMSDBag defaultBag];
  uint64_t v6 = +[NSURLSessionConfiguration ams_configurationWithProcessInfo:v4 bag:v5];

  id v7 = [objc_alloc((Class)AMSURLSession) initWithConfiguration:v6];
  [*(id *)(a1 + 32) setSession:v7];

  double v8 = *(void **)(a1 + 32);
  int v9 = [v8 session];
  [v9 setDelegate:v8];

  uint64_t v10 = [*(id *)(a1 + 32) session];
  uint64_t v11 = [v10 dataTaskPromiseWithRequest:v3];

  return v11;
}

void sub_10001DD3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10001DD68(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  double v8 = +[AMSLogConfig sharedBiometricsConfig];
  if (!v8)
  {
    double v8 = +[AMSLogConfig sharedConfig];
  }
  int v9 = [v8 OSLogObject];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = objc_opt_class();
    id v11 = v10;
    uint64_t v12 = AMSLogKey();
    int v13 = 138544130;
    unsigned __int8 v14 = v10;
    __int16 v15 = 2114;
    id v16 = v12;
    __int16 v17 = 2114;
    id v18 = v5;
    __int16 v19 = 2114;
    id v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Recevied dialog result from delegate. Result: %{public}@, error: %{public}@", (uint8_t *)&v13, 0x2Au);
  }
  [*(id *)(a1 + 32) finishWithResult:v5 error:v6];
}

void sub_10001E164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10001E190(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  double v8 = +[AMSLogConfig sharedBiometricsConfig];
  if (!v8)
  {
    double v8 = +[AMSLogConfig sharedConfig];
  }
  int v9 = [v8 OSLogObject];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = objc_opt_class();
    id v14 = v10;
    id v11 = AMSLogKey();
    uint64_t v12 = AMSHashIfNeeded();
    int v13 = AMSLogableError();
    *(_DWORD *)buf = 138544130;
    id v16 = v10;
    __int16 v17 = 2114;
    id v18 = v11;
    __int16 v19 = 2114;
    id v20 = v12;
    __int16 v21 = 2114;
    uint64_t v22 = v13;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Received authenticate result from delegate. Result: %{public}@, error: %{public}@", buf, 0x2Au);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10001E3F4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10001E608(id a1)
{
  qword_100130268 = (uint64_t)objc_alloc_init((Class)AMSThreadSafeDictionary);
  _objc_release_x1();
}

uint64_t sub_10001E7C4(uint64_t a1, void *a2)
{
  id v4 = [(id)objc_opt_class() _sharedTokenLock];
  [v4 lock];

  id v5 = [*(id *)(a1 + 32) token];
  Swift::Int v64 = [v5 base64EncodedStringWithOptions:0];

  id v6 = +[AMSLogConfig sharedAccountsDaemonConfig];
  if (!v6)
  {
    id v6 = +[AMSLogConfig sharedConfig];
  }
  id v7 = [v6 OSLogObject];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = objc_opt_class();
    int v9 = AMSLogKey();
    uint64_t v10 = [*(id *)(a1 + 32) account];
    objc_msgSend(v10, "ams_DSID");
    id v11 = v63 = a2;
    uint64_t v12 = AMSHashIfNeeded();
    int v13 = [*(id *)(a1 + 32) environment];
    id v14 = AMSHashIfNeeded();
    *(_DWORD *)buf = 138544386;
    uint64_t v68 = v8;
    __int16 v69 = 2114;
    id v70 = v9;
    __int16 v71 = 2114;
    id v72 = v12;
    __int16 v73 = 2114;
    __int16 v74 = v13;
    __int16 v75 = 2114;
    __int16 v76 = v14;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Performing token registration. (account: %{public}@; environment: %{public}@; token: %{public}@)",
      buf,
      0x34u);

    a2 = v63;
  }

  uint64_t v15 = [*(id *)(a1 + 32) token];
  if (!v15
    || (id v16 = (void *)v15,
        [*(id *)(a1 + 32) bag],
        __int16 v17 = objc_claimAutoreleasedReturnValue(),
        v17,
        v16,
        !v17))
  {
    id v18 = [*(id *)(a1 + 32) bag];
    __int16 v19 = v18 ? @"true" : @"false";
    id v20 = [*(id *)(a1 + 32) token];
    __int16 v21 = v20 ? @"true" : @"false";
    char v61 = v19;
    BOOL v62 = v21;
    AMSErrorWithFormat();
    id v22 = (id)objc_claimAutoreleasedReturnValue();

    if (v22) {
      goto LABEL_17;
    }
  }
  uint64_t v23 = objc_opt_class();
  uint64_t v24 = [*(id *)(a1 + 32) account];
  uint64_t v25 = [*(id *)(a1 + 32) environment];
  uint64_t v26 = [*(id *)(a1 + 32) token];
  LOBYTE(v23) = [(id)v23 shouldPerformForAccount:v24 environment:v25 token:v26];

  if ((v23 & 1) == 0)
  {
    uint64_t v27 = AMSError();
    if (v27)
    {
      id v22 = (id)v27;
LABEL_17:
      int v28 = 0;
      __int16 v29 = 0;
      goto LABEL_23;
    }
  }
  id v30 = objc_alloc_init((Class)NSMutableDictionary);
  id v31 = +[AMSDevice serialNumber];
  [v30 setObject:v31 forKeyedSubscript:@"serial-number"];

  [v30 setObject:v64 forKeyedSubscript:@"token"];
  unint64_t v32 = [*(id *)(a1 + 32) bag];
  unint64_t v33 = [*(id *)(a1 + 32) account];
  __int16 v34 = [v32 URLForKey:@"registerHardwareAsset" account:v33];

  id v35 = objc_alloc((Class)AMSURLRequestEncoder);
  __int16 v36 = [*(id *)(a1 + 32) bag];
  id v37 = [v35 initWithBag:v36];

  [v37 setRequestEncoding:3];
  __int16 v38 = [*(id *)(a1 + 32) account];
  [v37 setAccount:v38];

  uint64_t v39 = [v37 requestWithMethod:4 bagURL:v34 parameters:v30];
  id v66 = 0;
  __int16 v29 = [v39 resultWithError:&v66];
  id v22 = v66;

  if (!v22 && v29)
  {
    __int16 v40 = +[AMSURLSession defaultSession];
    uint64_t v41 = [v40 dataTaskPromiseWithRequest:v29];

    id v65 = 0;
    id v42 = [v41 resultWithError:&v65];
    id v22 = v65;
  }
  if (!v22)
  {
    int v50 = *(void **)(a1 + 32);
    char v51 = [v50 token];
    [v50 _updateCachedCriteriaWithToken:v51];

    uint64_t v52 = +[AMSLogConfig sharedAccountsDaemonConfig];
    if (!v52)
    {
      uint64_t v52 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v53 = objc_msgSend(v52, "OSLogObject", v61, v62);
    if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v54 = objc_opt_class();
      uint64_t v55 = AMSLogKey();
      *(_DWORD *)buf = 138543618;
      uint64_t v68 = v54;
      __int16 v69 = 2114;
      id v70 = v55;
      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Token registration succeeded", buf, 0x16u);
    }
    id v47 = 0;
    uint64_t v48 = 1;
    goto LABEL_34;
  }
  int v28 = 1;
LABEL_23:
  id v43 = +[AMSLogConfig sharedAccountsDaemonConfig];
  if (!v43)
  {
    id v43 = +[AMSLogConfig sharedConfig];
  }
  uint64_t v44 = [v43 OSLogObject];
  if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
  {
    uint64_t v45 = objc_opt_class();
    uint64_t v46 = AMSLogKey();
    *(_DWORD *)buf = 138543874;
    uint64_t v68 = v45;
    __int16 v69 = 2114;
    id v70 = v46;
    __int16 v71 = 2114;
    id v72 = v22;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Token registration failed. %{public}@", buf, 0x20u);
  }
  id v47 = v22;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  *a2 = v47;
  if (v28)
  {
LABEL_34:
    char v56 = objc_opt_class();
    unint64_t v57 = [*(id *)(a1 + 32) account];
    char v58 = [*(id *)(a1 + 32) environment];
    [v56 _updateThrottleForAccount:v57 environment:v58];

    uint64_t v49 = v48;
  }
  id v59 = [(id)objc_opt_class() _sharedTokenLock];
  [v59 unlock];

  return v49;
}

void sub_10001F418(id a1)
{
  qword_100130278 = (uint64_t)objc_alloc_init((Class)NSLock);
  _objc_release_x1();
}

void sub_10001FB78(uint64_t a1)
{
  uint64_t v2 = [(id)objc_opt_class() _task];
  id v3 = [v2 perform];
  id v17 = 0;
  id v4 = [v3 resultWithError:&v17];
  id v5 = v17;

  if (v5)
  {
    id v6 = +[AMSLogConfig sharedAccountsDaemonConfig];
    if (!v6)
    {
      id v6 = +[AMSLogConfig sharedConfig];
    }
    id v7 = [v6 OSLogObject];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = objc_opt_class();
      int v9 = AMSLogKey();
      uint64_t v10 = AMSLogableError();
      *(_DWORD *)buf = 138543874;
      uint64_t v19 = v8;
      __int16 v20 = 2114;
      __int16 v21 = v9;
      __int16 v22 = 2114;
      uint64_t v23 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to perform registration from polling. Error: %{public}@", buf, 0x20u);
    }
  }
  if (v4)
  {
    id v11 = +[AMSLogConfig sharedAccountsDaemonConfig];
    if (!v11)
    {
      id v11 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v12 = [v11 OSLogObject];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = objc_opt_class();
      id v14 = AMSLogKey();
      unsigned int v15 = [v4 BOOLValue];
      *(_DWORD *)buf = 138543874;
      uint64_t v19 = v13;
      __int16 v20 = 2114;
      __int16 v21 = v14;
      __int16 v22 = 1024;
      LODWORD(v23) = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Polled registration complete. Did register: %i", buf, 0x1Cu);
    }
    id v16 = +[NSDate now];
    +[AMSDefaults setLastCarrierOfferRegistrationDate:v16];
  }
  [*(id *)(a1 + 32) _registerForNextAttemptWithScheduler:*(void *)(a1 + 40)];
}

void sub_1000203AC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1000203D0(uint64_t a1, void *a2)
{
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v6 = +[AMSLogConfig sharedConfig];
  if (!v6)
  {
    id v6 = +[AMSLogConfig sharedConfig];
  }
  id v7 = [v6 OSLogObject];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = AMSLogKey();
    uint64_t v9 = objc_opt_class();
    uint64_t v10 = v9;
    if (v8)
    {
      uint64_t v2 = AMSLogKey();
      +[NSString stringWithFormat:@"%@: [%@] ", v10, v2];
    }
    else
    {
      +[NSString stringWithFormat:@"%@: ", v9];
    id v11 = };
    LODWORD(buf) = 138543362;
    *(void *)((char *)&buf + 4) = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@Starting cert task", (uint8_t *)&buf, 0xCu);
    if (v8)
    {

      id v11 = (void *)v2;
    }
  }
  *(void *)&long long buf = 0;
  *((void *)&buf + 1) = &buf;
  uint64_t v18 = 0x3032000000;
  uint64_t v19 = sub_100015A9C;
  __int16 v20 = sub_100015A4C;
  id v21 = 0;
  uint64_t v12 = [WeakRetained options];
  uint64_t v13 = (id *)(*((void *)&buf + 1) + 40);
  id obj = *(id *)(*((void *)&buf + 1) + 40);
  id v14 = [WeakRetained _baaOptionsWithOptions:v12 error:&obj];
  objc_storeStrong(v13, obj);

  if (*(void *)(*((void *)&buf + 1) + 40))
  {
    objc_msgSend(v4, "finishWithError:");
  }
  else
  {
    id v15 = v4;
    DeviceIdentityIssueClientCertificateWithCompletion();
  }
  _Block_object_dispose(&buf, 8);
}

void sub_100020678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100020698(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a4);
  uint64_t v9 = +[AMSLogConfig sharedConfig];
  if (!v9)
  {
    uint64_t v9 = +[AMSLogConfig sharedConfig];
  }
  uint64_t v10 = [v9 OSLogObject];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = objc_opt_class();
    id v12 = v11;
    uint64_t v13 = AMSLogKey();
    *(_DWORD *)long long buf = 138544130;
    *(void *)&uint8_t buf[4] = v11;
    *(_WORD *)&buf[12] = 2114;
    *(void *)&buf[14] = v13;
    *(_WORD *)&buf[22] = 1024;
    LODWORD(v52[0]) = a2 != 0;
    WORD2(v52[0]) = 2048;
    *(void *)((char *)v52 + 6) = [v7 count];
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Received certs. (hasRefKey: %d; certCount: %ld)",
      buf,
      0x26u);
  }
  uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  if (!(a2 | v14))
  {
    uint64_t v15 = AMSError();
    uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 8);
    id v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;

    uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  }
  if (!v14 && ![v7 count])
  {
    uint64_t v18 = AMSError();
    uint64_t v19 = *(void *)(*(void *)(a1 + 48) + 8);
    __int16 v20 = *(void **)(v19 + 40);
    *(void *)(v19 + 40) = v18;
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
  {
    id v21 = 0;
LABEL_14:
    __int16 v29 = +[AMSLogConfig sharedConfig];
    if (!v29)
    {
      __int16 v29 = +[AMSLogConfig sharedConfig];
    }
    id v30 = [v29 OSLogObject];
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      id v31 = objc_opt_class();
      id v32 = v31;
      unint64_t v33 = AMSLogKey();
      uint64_t v34 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      *(_DWORD *)long long buf = 138543874;
      *(void *)&uint8_t buf[4] = v31;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v33;
      *(_WORD *)&buf[22] = 2114;
      v52[0] = v34;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Cert task finished with error: %{public}@", buf, 0x20u);
    }
    id v23 = 0;
    goto LABEL_19;
  }
  __int16 v22 = AMSSetLogKeyIfNeeded();
  id v40 = v8;
  *(void *)long long buf = 0;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2020000000;
  v52[0] = 0;
  uint64_t v47 = 0;
  uint64_t v48 = &v47;
  uint64_t v49 = 0x2020000000;
  uint64_t v50 = 0;
  v42[0] = _NSConcreteStackBlock;
  v42[1] = 3221225472;
  v42[2] = sub_100020C14;
  v42[3] = &unk_100112198;
  uint64_t v45 = buf;
  id v23 = objc_alloc_init((Class)NSMutableArray);
  id v43 = v23;
  uint64_t v46 = &v47;
  id v24 = v22;
  id v44 = v24;
  [v7 enumerateObjectsUsingBlock:v42];
  uint64_t v25 = *(void *)(*(void *)&buf[8] + 24);
  uint64_t v26 = v48[3];
  uint64_t v27 = [*(id *)(a1 + 32) options];
  uint64_t v28 = *(void *)(*(void *)(a1 + 48) + 8);
  id obj = *(id *)(v28 + 40);
  +[AMSKeychain storePrimaryCert:v25 intermediateCert:v26 privateKey:a2 options:v27 error:&obj];
  objc_storeStrong((id *)(v28 + 40), obj);
  id v8 = v40;

  _Block_object_dispose(&v47, 8);
  _Block_object_dispose(buf, 8);

  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
  {
    id v21 = v23;
    goto LABEL_14;
  }
  id v21 = +[AMSLogConfig sharedConfig];
  if (!v21)
  {
    id v21 = +[AMSLogConfig sharedConfig];
  }
  __int16 v29 = objc_msgSend(v21, "OSLogObject", v40);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    id v37 = objc_opt_class();
    id v38 = v37;
    uint64_t v39 = AMSLogKey();
    *(_DWORD *)long long buf = 138543618;
    *(void *)&uint8_t buf[4] = v37;
    *(_WORD *)&buf[12] = 2114;
    *(void *)&buf[14] = v39;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Cert task finished successfully", buf, 0x16u);
  }
LABEL_19:

  id v35 = *(void **)(a1 + 40);
  id v36 = [v23 copy];
  [v35 finishWithResult:v36 error:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
}

void sub_100020BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100020C14(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a3 == 1)
  {
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v5;
    uint64_t v7 = *(void *)(a1 + 56);
    goto LABEL_5;
  }
  if (!a3)
  {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v5;
    uint64_t v7 = *(void *)(a1 + 48);
LABEL_5:
    id v8 = SecCertificateCopyData(*(SecCertificateRef *)(*(void *)(v7 + 8) + 24));
    [*(id *)(a1 + 32) addObject:v8];
    goto LABEL_11;
  }
  id v8 = +[AMSLogConfig sharedAttestationConfig];
  if (!v8)
  {
    id v8 = +[AMSLogConfig sharedConfig];
  }
  uint64_t v9 = [v8 OSLogObject];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = *(void *)(a1 + 40);
    id v11 = +[NSNumber numberWithUnsignedInteger:a3];
    int v12 = 138543618;
    uint64_t v13 = v10;
    __int16 v14 = 2114;
    uint64_t v15 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "AMSClientCertificateTask: [%{public}@] Processing more certificates than expected: %{public}@", (uint8_t *)&v12, 0x16u);
  }
LABEL_11:
}

id sub_1000215E0(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if ((objc_msgSend(v1, "amsd_isCKChangeTokenExpiredError") & 1) == 0
      && (objc_msgSend(v2, "amsd_isCKManateeUnavailable") & 1) == 0
      && (objc_msgSend(v2, "amsd_isCKMissingManateeIdentity") & 1) == 0
      && (objc_msgSend(v2, "amsd_isCKPartialFailureError") & 1) == 0
      && (objc_msgSend(v2, "amsd_isCKServerRecordChangedError") & 1) == 0
      && (objc_msgSend(v2, "amsd_isCKThrottledError") & 1) == 0)
    {
      objc_msgSend(v2, "amsd_isCKUnknownItemError");
    }
    id v4 = objc_alloc_init((Class)NSMutableDictionary);
    id v5 = [v2 userInfo];
    id v6 = [v5 objectForKeyedSubscript:CKPartialErrorsByItemIDKey];

    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v7 = v6;
    }
    else {
      id v7 = 0;
    }

    if (v7)
    {
      id v8 = objc_msgSend(v7, "ams_mapWithTransform:", &stru_100112228);
      [v4 setObject:v8 forKeyedSubscript:@"AMSDCloudDataPartialFailureErrorsKey"];
    }
    uint64_t v9 = [v2 userInfo];
    uint64_t v10 = [v9 objectForKeyedSubscript:CKErrorRetryAfterKey];

    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v11 = v10;
    }
    else {
      id v11 = 0;
    }

    if (v11) {
      [v4 setObject:v11 forKeyedSubscript:@"AMSDCloudDataRetryAfterKey"];
    }
    int v12 = objc_msgSend(v2, "ams_title");
    uint64_t v13 = objc_msgSend(v2, "ams_message");
    id v3 = AMSCustomError();
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

AMSPair *__cdecl sub_10002184C(id a1, id a2, NSError *a3)
{
  id v4 = a3;
  id v5 = a2;
  id v6 = objc_alloc((Class)AMSPair);
  id v7 = sub_1000215E0(v4);

  id v8 = [v6 initWithFirst:v5 second:v7];
  return (AMSPair *)v8;
}

id sub_1000219BC(void *a1, const char *a2)
{
  return objc_msgSend(a1, "ams_anyWithTest:", &stru_100112280);
}

BOOL sub_1000219C8(id a1, NSError *a2)
{
  return sub_1000219D0(a2);
}

uint64_t sub_1000219D0(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 1;
  if ((objc_msgSend(v1, "ams_hasDomain:code:", @"AMSDCloudDataErrorDomain", 1) & 1) == 0)
  {
    if ((objc_msgSend(v1, "ams_hasDomain:code:", @"AMSDCloudDataErrorDomain", 3) & 1) != 0
      || (objc_msgSend(v1, "ams_hasDomain:code:", @"AMSDCloudDataErrorDomain", 5) & 1) != 0)
    {
      uint64_t v2 = 1;
    }
    else
    {
      uint64_t v2 = (uint64_t)objc_msgSend(v1, "ams_hasDomain:code:", @"AMSDCloudDataErrorDomain", 6);
    }
  }

  return v2;
}

id sub_100021BA4(uint64_t a1)
{
  uint64_t v2 = +[AMSLogConfig sharedConfig];
  if (!v2)
  {
    uint64_t v2 = +[AMSLogConfig sharedConfig];
  }
  id v3 = [v2 OSLogObject];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = objc_opt_class();
    id v5 = AMSLogKey();
    id v6 = [*(id *)(a1 + 32) identifiers];
    *(_DWORD *)long long buf = 138543874;
    uint64_t v34 = v4;
    __int16 v35 = 2114;
    id v36 = v5;
    __int16 v37 = 2048;
    id v38 = [v6 count];
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Fetching changed records using %lu zone identifiers.", buf, 0x20u);
  }
  id v7 = objc_alloc_init((Class)NSMutableArray);
  id v8 = [*(id *)(a1 + 32) identifiers];
  uint64_t v9 = (char *)[v8 count];

  if (v9)
  {
    uint64_t v10 = 0;
    do
    {
      if ([*(id *)(a1 + 32) isCancelled]) {
        break;
      }
      id v11 = (char *)[*(id *)(a1 + 32) batchSize];
      id v12 = (uint64_t)v11 >= (uint64_t)v9 ? v9 : v11;
      uint64_t v13 = [*(id *)(a1 + 32) identifiers];
      __int16 v14 = objc_msgSend(v13, "subarrayWithRange:", v10, v12);

      uint64_t v15 = [*(id *)(a1 + 32) database];
      uint64_t v16 = [v15 fetchChangedRecordsInRecordZonesWithRecordZoneIdentifiers:v14];

      [v7 addObject:v16];
      v9 -= (unint64_t)v12;
      v10 += (uint64_t)v12;
    }
    while (v9);
  }
  if ([*(id *)(a1 + 32) isCancelled])
  {
    id v17 = +[AMSLogConfig sharedConfig];
    if (!v17)
    {
      id v17 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v18 = [v17 OSLogObject];
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = objc_opt_class();
      __int16 v20 = AMSLogKey();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v34 = v19;
      __int16 v35 = 2114;
      id v36 = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Task ended early while batching.", buf, 0x16u);
    }
    AMSError();
    id v21 = (id)objc_claimAutoreleasedReturnValue();
    __int16 v22 = +[AMSPromise promiseWithError:v21];
  }
  else
  {
    id v23 = objc_alloc_init((Class)AMSMutablePromise);
    id v24 = +[AMSPromise promiseWithAll:v7];
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    v29[2] = sub_100021F60;
    v29[3] = &unk_1001122A8;
    id v25 = v23;
    uint64_t v26 = *(void *)(a1 + 32);
    id v30 = v25;
    uint64_t v31 = v26;
    id v32 = v7;
    [v24 addFinishBlock:v29];

    uint64_t v27 = v32;
    id v21 = v25;

    __int16 v22 = v21;
  }

  return v22;
}

void sub_100021F60(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a3)
  {
    [*(id *)(a1 + 32) finishWithError:a3];
  }
  else if ([v5 count] == (id)1)
  {
    id v7 = *(void **)(a1 + 32);
    id v8 = [v6 firstObject];
    [v7 finishWithResult:v8];
  }
  else
  {
    uint64_t v9 = +[AMSLogConfig sharedConfig];
    if (!v9)
    {
      uint64_t v9 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v10 = [v9 OSLogObject];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = objc_opt_class();
      id v12 = AMSLogKey();
      id v13 = [*(id *)(a1 + 48) count];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v41 = v11;
      __int16 v42 = 2114;
      id v43 = v12;
      __int16 v44 = 2048;
      id v45 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Processing changes with %lu batches.", buf, 0x20u);
    }
    uint64_t v33 = a1;

    id v14 = objc_alloc_init((Class)NSMutableDictionary);
    id v15 = objc_alloc_init((Class)NSMutableDictionary);
    id v16 = objc_alloc_init((Class)NSMutableDictionary);
    id v17 = objc_alloc_init((Class)NSMutableDictionary);
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    uint64_t v34 = v6;
    id v18 = v6;
    id v19 = [v18 countByEnumeratingWithState:&v35 objects:v39 count:16];
    if (v19)
    {
      id v20 = v19;
      uint64_t v21 = *(void *)v36;
      do
      {
        for (unint64_t i = 0; i != v20; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v36 != v21) {
            objc_enumerationMutation(v18);
          }
          id v23 = *(void **)(*((void *)&v35 + 1) + 8 * i);
          id v24 = objc_msgSend(v23, "changedRecords", v33);

          if (v24)
          {
            id v25 = [v23 changedRecords];
            [v14 addEntriesFromDictionary:v25];
          }
          uint64_t v26 = [v23 deletedRecords];

          if (v26)
          {
            uint64_t v27 = [v23 deletedRecords];
            [v15 addEntriesFromDictionary:v27];
          }
          uint64_t v28 = [v23 errors];

          if (v28)
          {
            __int16 v29 = [v23 errors];
            [v16 addEntriesFromDictionary:v29];
          }
          id v30 = [v23 changeTokens];

          if (v30)
          {
            uint64_t v31 = [v23 changeTokens];
            [v17 addEntriesFromDictionary:v31];
          }
        }
        id v20 = [v18 countByEnumeratingWithState:&v35 objects:v39 count:16];
      }
      while (v20);
    }

    id v32 = [[AMSDCloudDataChangedRecordsResult alloc] initWithChangedRecords:v14 deletedRecords:v15 errors:v16 changeTokens:v17];
    [*(id *)(v33 + 32) finishWithResult:v32];

    id v6 = v34;
  }
}

id sub_100022694(uint64_t a1, void *a2)
{
  id v3 = [a2 identifier];
  uint64_t v4 = [*(id *)(a1 + 32) second];
  id v5 = [v3 isEqual:v4];

  return v5;
}

id sub_100022BD0(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "ams_setNullableObject:forKey:", *(void *)(a1 + 32), *(void *)(a1 + 40));
}

id sub_100023948(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)NSMutableSet);
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id obj = v3;
  id v23 = [obj countByEnumeratingWithState:&v33 objects:v39 count:16];
  if (v23)
  {
    uint64_t v22 = *(void *)v34;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v34 != v22) {
          objc_enumerationMutation(obj);
        }
        uint64_t v24 = v5;
        id v6 = *(void **)(*((void *)&v33 + 1) + 8 * v5);
        long long v29 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        id v7 = v6;
        id v8 = [v7 countByEnumeratingWithState:&v29 objects:v38 count:16];
        if (v8)
        {
          id v9 = v8;
          uint64_t v10 = *(void *)v30;
          do
          {
            for (unint64_t i = 0; i != v9; unint64_t i = (char *)i + 1)
            {
              if (*(void *)v30 != v10) {
                objc_enumerationMutation(v7);
              }
              uint64_t v12 = *(void *)(*((void *)&v29 + 1) + 8 * i);
              long long v25 = 0u;
              long long v26 = 0u;
              long long v27 = 0u;
              long long v28 = 0u;
              id v13 = [*(id *)(a1 + 32) _uniqueIdentifiersForAccount:v12 error:0];
              id v14 = [v13 countByEnumeratingWithState:&v25 objects:v37 count:16];
              if (v14)
              {
                id v15 = v14;
                uint64_t v16 = *(void *)v26;
                do
                {
                  for (j = 0; j != v15; j = (char *)j + 1)
                  {
                    if (*(void *)v26 != v16) {
                      objc_enumerationMutation(v13);
                    }
                    [v4 addObject:*(void *)(*((void *)&v25 + 1) + 8 * (void)j)];
                  }
                  id v15 = [v13 countByEnumeratingWithState:&v25 objects:v37 count:16];
                }
                while (v15);
              }
            }
            id v9 = [v7 countByEnumeratingWithState:&v29 objects:v38 count:16];
          }
          while (v9);
        }

        uint64_t v5 = v24 + 1;
      }
      while ((id)(v24 + 1) != v23);
      id v23 = [obj countByEnumeratingWithState:&v33 objects:v39 count:16];
    }
    while (v23);
  }

  id v18 = [v4 copy];
  id v19 = +[AMSPromise promiseWithResult:v18];

  return v19;
}

void sub_100023F9C(id a1)
{
  qword_100130288 = objc_alloc_init(AMSDCookieService);
  _objc_release_x1();
}

void sub_1000241E4(uint64_t a1)
{
  id v3 = +[AMSLogConfig sharedAccountsCookiesConfig];
  if (!v3)
  {
    id v3 = +[AMSLogConfig sharedConfig];
  }
  id v4 = [v3 OSLogObject];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = AMSLogKey();
    uint64_t v6 = objc_opt_class();
    uint64_t v7 = v6;
    if (v5)
    {
      uint64_t v1 = AMSLogKey();
      +[NSString stringWithFormat:@"%@: [%@] ", v7, v1];
    }
    else
    {
      +[NSString stringWithFormat:@"%@: ", v6];
    id v8 = };
    id v9 = NSStringFromSelector(*(SEL *)(a1 + 40));
    *(_DWORD *)long long buf = 138543618;
    id v18 = v8;
    __int16 v19 = 2114;
    id v20 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%{public}@%{public}@ - performing block", buf, 0x16u);
    if (v5)
    {

      id v8 = (void *)v1;
    }
  }
  [*(id *)(a1 + 32) _clearAllCachedCookieProperties];
  uint64_t v10 = +[AMSLogConfig sharedAccountsCookiesConfig];
  if (!v10)
  {
    uint64_t v10 = +[AMSLogConfig sharedConfig];
  }
  uint64_t v11 = [v10 OSLogObject];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = AMSLogKey();
    uint64_t v13 = objc_opt_class();
    uint64_t v14 = v13;
    if (v12)
    {
      uint64_t v1 = AMSLogKey();
      +[NSString stringWithFormat:@"%@: [%@] ", v14, v1];
    }
    else
    {
      +[NSString stringWithFormat:@"%@: ", v13];
    id v15 = };
    uint64_t v16 = NSStringFromSelector(*(SEL *)(a1 + 40));
    *(_DWORD *)long long buf = 138543618;
    id v18 = v15;
    __int16 v19 = 2114;
    id v20 = v16;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%{public}@%{public}@ - finishing block", buf, 0x16u);
    if (v12)
    {

      id v15 = (void *)v1;
    }
  }
}

id sub_1000245C4(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)AMSMutablePromise);
  uint64_t v5 = [a1[4] queue];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000246D4;
  v11[3] = &unk_100112390;
  id v12 = a1[5];
  id v13 = v3;
  id v6 = v4;
  id v14 = v6;
  id v15 = a1[6];
  id v7 = v3;
  dispatch_async(v5, v11);

  id v8 = v15;
  id v9 = v6;

  return v9;
}

void sub_1000246D4(uint64_t a1)
{
  id v2 = (id)AMSSetLogKey();
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = +[NSFileManager defaultManager];
  uint64_t v5 = +[AMSCookieDatabase cleanUpCookieDatabasesWithValidIdentifiers:v3 fileManager:v4];

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _OWORD v6[2] = sub_1000247CC;
  v6[3] = &unk_100111ED0;
  id v7 = *(id *)(a1 + 48);
  id v8 = *(id *)(a1 + 56);
  [v5 addFinishBlock:v6];
}

id sub_1000247CC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = +[NSNumber numberWithBool:a2];
  [v5 finishWithResult:v7 error:v6];

  uint64_t v8 = *(void *)(a1 + 40);
  return +[AMSDTransactionStore releaseKeepAliveTransaction:v8];
}

void sub_100024908(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  objc_msgSend(a3, "ams_sanitizedForSecureCoding");
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, id))(v4 + 16))(v4, a2, v5);
}

void sub_100024A64(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  id v9 = 0;
  uint64_t v4 = [v2 _cookieDatabaseForAccount:v3 error:&v9];
  id v5 = v9;
  uint64_t v6 = a1[6];
  id v7 = [v4 dbPath];
  uint64_t v8 = objc_msgSend(v5, "ams_sanitizedForSecureCoding");
  (*(void (**)(uint64_t, void *, void *))(v6 + 16))(v6, v7, v8);
}

void sub_100024C50(uint64_t a1)
{
  os_unfair_lock_lock_with_options();
  id v2 = [*(id *)(a1 + 32) connections];
  [v2 removeObject:*(void *)(a1 + 40)];

  uint64_t v3 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 16);
  os_unfair_lock_unlock(v3);
}

void sub_100024EA8(uint64_t a1, int a2, void *a3)
{
  id v6 = a3;
  uint64_t v7 = +[AMSLogConfig sharedAccountsDaemonConfig];
  uint64_t v8 = (void *)v7;
  if (a2)
  {
    if (!v7)
    {
      uint64_t v8 = +[AMSLogConfig sharedConfig];
    }
    id v9 = [v8 OSLogObject];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = AMSLogKey();
      uint64_t v11 = objc_opt_class();
      uint64_t v12 = v11;
      if (v10)
      {
        uint64_t v3 = AMSLogKey();
        +[NSString stringWithFormat:@"%@: [%@] ", v12, v3];
      }
      else
      {
        +[NSString stringWithFormat:@"%@: ", v11];
      id v13 = };
      *(_DWORD *)long long buf = 138543362;
      id v20 = v13;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Successfully cleared dangling cookie databases", buf, 0xCu);
      if (v10)
      {

        id v13 = (void *)v3;
      }
    }
  }
  else
  {
    if (!v7)
    {
      uint64_t v8 = +[AMSLogConfig sharedConfig];
    }
    id v9 = [v8 OSLogObject];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      id v14 = AMSLogKey();
      uint64_t v15 = objc_opt_class();
      uint64_t v16 = v15;
      if (v14)
      {
        uint64_t v3 = AMSLogKey();
        +[NSString stringWithFormat:@"%@: [%@] ", v16, v3];
      }
      else
      {
        +[NSString stringWithFormat:@"%@: ", v15];
      id v17 = };
      id v18 = AMSLogableError();
      *(_DWORD *)long long buf = 138543618;
      id v20 = v17;
      __int16 v21 = 2114;
      uint64_t v22 = v18;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%{public}@Error clearing dangling cookie databases: %{public}@", buf, 0x16u);
      if (v14)
      {

        id v17 = (void *)v3;
      }
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000252C0(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)AMSDataMigratorOptions);
  uint64_t v3 = +[AMSDevice buildVersion];
  [v2 setCurrentBuildVersion:v3];

  uint64_t v4 = [*(id *)(a1 + 32) _previousBuildVersion];
  [v2 setPreviousBuildVersion:v4];

  [v2 setScenario:4];
  +[AMSDataMigrator performMigrationWithOptions:v2];
  id v5 = [*(id *)(a1 + 32) _previousBuildVersion];

  if (!v5)
  {
    id v6 = +[AMSLogConfig sharedAccountsDaemonConfig];
    if (!v6)
    {
      id v6 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v7 = [v6 OSLogObject];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = objc_opt_class();
      id v9 = AMSLogKey();
      *(_DWORD *)long long buf = 138543618;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Running clean install tasks", buf, 0x16u);
    }
    +[AMSUniversalLinks update];
  }
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100025590;
  v16[3] = &unk_1001124D0;
  v16[4] = *(void *)(a1 + 32);
  uint64_t v10 = v16;
  uint64_t v11 = AMSLogKey();
  uint64_t v12 = dispatch_get_global_queue(0, 0);
  *(void *)long long buf = _NSConcreteStackBlock;
  *(void *)&buf[8] = 3221225472;
  *(void *)&buf[16] = sub_100027134;
  id v18 = &unk_100112600;
  id v19 = v11;
  id v20 = v10;
  id v13 = v11;
  dispatch_async(v12, buf);

  id v14 = *(void **)(a1 + 32);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100025598;
  v15[3] = &unk_1001124D0;
  v15[4] = v14;
  [v14 _clearDanglingCookieDatabasesWithCompletion:v15];
}

id sub_100025590(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setupMultiUser];
}

id sub_100025598(uint64_t a1)
{
  uint64_t v3 = +[AMSLogConfig sharedAccountsDaemonConfig];
  if (!v3)
  {
    uint64_t v3 = +[AMSLogConfig sharedConfig];
  }
  uint64_t v4 = [v3 OSLogObject];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = AMSLogKey();
    uint64_t v6 = objc_opt_class();
    uint64_t v7 = v6;
    if (v5)
    {
      uint64_t v1 = AMSLogKey();
      +[NSString stringWithFormat:@"%@: [%@] ", v7, v1];
    }
    else
    {
      +[NSString stringWithFormat:@"%@: ", v6];
    uint64_t v8 = };
    *(_DWORD *)long long buf = 138543362;
    id v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ Complete cookie database cleanup and start XPC", buf, 0xCu);
    if (v5)
    {

      uint64_t v8 = (void *)v1;
    }
  }
  [*(id *)(a1 + 32) _setupNotifications];
  [*(id *)(a1 + 32) _setupPollJobs];
  id v9 = +[AMSDDeviceMessengerService sharedService];
  id v10 = +[AMSDPushService sharedService];
  [*(id *)(a1 + 32) _startXPC];
  [*(id *)(a1 + 32) _setupAccountDataSync];
  return [*(id *)(a1 + 32) _updateRegulatoryEligibility];
}

AMSPromise *__cdecl sub_1000257F4(id a1, ACAccount *a2)
{
  id v2 = a2;
  uint64_t v3 = [(ACAccount *)v2 ams_cookies];
  unsigned int v4 = objc_msgSend(v3, "ams_anyWithTest:", &stru_100112550);

  if (v4)
  {
    id v5 = +[AMSBinaryPromise promiseWithSuccess];
    uint64_t v6 = [(AMSDSecurityService *)v5 promiseAdapter];
  }
  else
  {
    id v5 = objc_alloc_init(AMSDSecurityService);
    id v7 = objc_alloc_init((Class)AMSBinaryPromise);
    uint64_t v8 = [v7 completionHandlerAdapter];
    [(AMSDSecurityService *)v5 performBiometricTokenUpdateWithAccount:v2 clientInfo:0 additionalDialogMetrics:0 shouldGenerateKeysOnly:0 shouldRequestConfirmation:0 userInitiated:0 completion:v8];

    uint64_t v6 = [v7 promiseAdapter];
  }
  return (AMSPromise *)v6;
}

BOOL sub_1000258F4(id a1, NSHTTPCookie *a2)
{
  id v2 = [(NSHTTPCookie *)a2 name];
  unsigned __int8 v3 = [v2 hasPrefix:@"mt-tid-"];

  return v3;
}

void sub_1000260E8(id a1, NSNumber *a2)
{
  if ([(NSNumber *)a2 unsignedIntegerValue] >= 2)
  {
    unsigned int v4 = [[AMSDRefreshMultiUserOptions alloc] initWithReason:@"Subscribing to private database changes initially failed."];
    id v2 = +[AMSDMultiUserController sharedController];
    id v3 = [v2 refreshWithOptions:v4];
  }
}

void sub_100026184(id a1, NSNumber *a2)
{
  if ([(NSNumber *)a2 unsignedIntegerValue] >= 2)
  {
    unsigned int v4 = [[AMSDRefreshMultiUserOptions alloc] initWithReason:@"Subscribing to shared database changes initially failed."];
    id v2 = +[AMSDMultiUserController sharedController];
    id v3 = [v2 refreshWithOptions:v4];
  }
}

void sub_10002630C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (id)AMSSetLogKey();
  string = (char *)xpc_dictionary_get_string(v3, _xpc_event_key_name);

  if (string) {
    string = (char *)[objc_alloc((Class)NSString) initWithUTF8String:string];
  }
  uint64_t v6 = +[AMSLogConfig sharedAccountsDaemonConfig];
  if (!v6)
  {
    uint64_t v6 = +[AMSLogConfig sharedConfig];
  }
  id v7 = [v6 OSLogObject];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = objc_opt_class();
    id v9 = AMSLogKey();
    *(_DWORD *)long long buf = 138543874;
    uint64_t v34 = v8;
    __int16 v35 = 2114;
    long long v36 = v9;
    __int16 v37 = 2114;
    long long v38 = string;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Received a Darwin notification. notification = %{public}@", buf, 0x20u);
  }
  if ([string isEqualToString:@"com.apple.ams.provision-biometrics"])
  {
    [*(id *)(a1 + 32) _handleBiometricsProvisioningNotification];
    goto LABEL_12;
  }
  if (([string isEqualToString:@"AppleLanguagePreferencesChangedNotification"] & 1) != 0
    || [string isEqualToString:@"com.apple.language.changed"])
  {
    [*(id *)(a1 + 32) _handleDeviceLanguageChangeNotification:0];
    goto LABEL_12;
  }
  id v10 = &swift_willThrow_ptr;
  uint64_t v11 = +[NSString stringWithUTF8String:"com.apple.mobile.keybagd.lock_status"];
  unsigned int v12 = [string isEqualToString:v11];

  if (v12)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100026930;
    block[3] = &unk_1001124D0;
    block[4] = *(void *)(a1 + 32);
    if (qword_100130290 != -1) {
      dispatch_once(&qword_100130290, block);
    }
    goto LABEL_12;
  }
  if ([string isEqualToString:@"com.apple.StoreServices.SSAccountStore.activeaccountchanged"])
  {
    id v13 = +[AMSRegulatoryEligibilityTask sharedInstance];
    [v13 setOverride:0];
LABEL_18:

LABEL_19:
    [*(id *)(a1 + 32) _updateRegulatoryEligibility];
    goto LABEL_12;
  }
  if ([string isEqualToString:AMSAccountCachedServerDataUpdatedNotification])
  {
    [*(id *)(a1 + 32) _handleCachedDataUpdate];
    goto LABEL_12;
  }
  if ([string isEqualToString:@"com.apple.AppleMediaServices.eligibilityoverridechanged"])goto LABEL_19; {
  if ([string isEqualToString:@"com.apple.os-eligibility-domain.input-needed"])
  }
  {
    id v13 = +[AMSLogConfig sharedRegulatoryEligibilityConfig];
    if (!v13)
    {
      id v13 = +[AMSLogConfig sharedConfig];
    }
    id v14 = [v13 OSLogObject];
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = AMSLogKey();
      uint64_t v16 = objc_opt_class();
      uint64_t v17 = v16;
      if (v15)
      {
        AMSLogKey();
        id v10 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue();
        +[NSString stringWithFormat:@"%@: [%@] ", v17, v10];
      }
      else
      {
        +[NSString stringWithFormat:@"%@: ", v16];
      id v18 = };
      *(_DWORD *)long long buf = 138543362;
      uint64_t v34 = (uint64_t)v18;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%{public}@Eligibility engine is requesting input.", buf, 0xCu);
      if (v15)
      {

        id v18 = v10;
      }
    }
    goto LABEL_18;
  }
  if ([string isEqualToString:@"com.apple.ams.privateListeningChanged"])
  {
    id v19 = +[AMSLogConfig sharedAccountsDaemonConfig];
    if (!v19)
    {
      id v19 = +[AMSLogConfig sharedConfig];
    }
    id v20 = [v19 OSLogObject];
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = objc_opt_class();
      uint64_t v22 = AMSLogKey();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v34 = v21;
      __int16 v35 = 2114;
      long long v36 = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Private listening setting changed.", buf, 0x16u);
    }
    id v23 = [[AMSDRefreshMultiUserOptions alloc] initWithReason:@"Private listening setting changed."];
    [(AMSDRefreshMultiUserOptions *)v23 setShouldUseCloudData:0];
    uint64_t v24 = +[AMSDMultiUserController sharedController];
    id v25 = [v24 refreshWithOptions:v23];
  }
  else if ([string isEqualToString:@"com.apple.purplebuddy.setupexited"])
  {
    long long v26 = +[AMSLogConfig sharedAccountsDaemonConfig];
    if (!v26)
    {
      long long v26 = +[AMSLogConfig sharedConfig];
    }
    long long v27 = [v26 OSLogObject];
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v28 = objc_opt_class();
      long long v29 = AMSLogKey();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v34 = v28;
      __int16 v35 = 2114;
      long long v36 = v29;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Buddy has finished.", buf, 0x16u);
    }
    long long v30 = +[DeviceAccountPrivacyUpdater shared];
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    v31[2] = sub_100026A44;
    v31[3] = &unk_100111F20;
    v31[4] = *(void *)(a1 + 32);
    [v30 updateIfNeededWithCompletionHandler:v31];
  }
LABEL_12:
}

id sub_100026930(uint64_t a1)
{
  id v2 = +[AMSLogConfig sharedRegulatoryEligibilityConfig];
  if (!v2)
  {
    id v2 = +[AMSLogConfig sharedConfig];
  }
  id v3 = [v2 OSLogObject];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = objc_opt_class();
    id v5 = AMSLogKey();
    int v7 = 138543618;
    uint64_t v8 = v4;
    __int16 v9 = 2114;
    id v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Acting on first device unlock notification", (uint8_t *)&v7, 0x16u);
  }
  return [*(id *)(a1 + 32) _updateRegulatoryEligibility];
}

void sub_100026A44(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = +[AMSLogConfig sharedAccountsDaemonConfig];
  uint64_t v4 = (void *)v3;
  if (v2)
  {
    if (!v3)
    {
      uint64_t v4 = +[AMSLogConfig sharedConfig];
    }
    id v5 = [v4 OSLogObject];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = objc_opt_class();
      int v7 = AMSLogKey();
      uint64_t v8 = AMSLogableError();
      int v10 = 138543874;
      uint64_t v11 = v6;
      __int16 v12 = 2114;
      id v13 = v7;
      __int16 v14 = 2114;
      uint64_t v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Did finish running device account updater in response to buddy exit with error %{public}@", (uint8_t *)&v10, 0x20u);

LABEL_10:
    }
  }
  else
  {
    if (!v3)
    {
      uint64_t v4 = +[AMSLogConfig sharedConfig];
    }
    id v5 = [v4 OSLogObject];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = objc_opt_class();
      int v7 = AMSLogKey();
      int v10 = 138543618;
      uint64_t v11 = v9;
      __int16 v12 = 2114;
      id v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Did finish running device account updater in response to buddy exit", (uint8_t *)&v10, 0x16u);
      goto LABEL_10;
    }
  }
}

id sub_100026D84(uint64_t a1)
{
  id v2 = +[AMSLogConfig sharedAccountsDaemonConfig];
  if (!v2)
  {
    id v2 = +[AMSLogConfig sharedConfig];
  }
  uint64_t v3 = [v2 OSLogObject];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138543362;
    uint64_t v6 = objc_opt_class();
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@: Received SIGTERM...", (uint8_t *)&v5, 0xCu);
  }

  [*(id *)(a1 + 32) _tearDownMultiUser];
  return +[AMSDTransactionStore flushAllKeepAliveTransactions];
}

uint64_t sub_100027134(uint64_t a1)
{
  id v2 = (id)AMSSetLogKey();
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v3();
}

void sub_1000271D4(id a1)
{
  qword_1001302A0 = objc_alloc_init(AMSDDeviceMessengerService);
  _objc_release_x1();
}

id sub_1000275C8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _cleanupSavedMessages];
}

void sub_100027684(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) delegates];
  id v2 = +[NSValue valueWithWeakObject:*(void *)(a1 + 40)];
  [v3 addObject:v2];
}

void sub_1000278F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) _getSavedMessages];
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0);
}

void sub_100027B18(void *a1)
{
  id v3 = (void *)a1[4];
  id v2 = (void *)a1[5];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100027BC4;
  v7[3] = &unk_100112670;
  void v7[4] = v3;
  id v8 = v2;
  id v4 = [v3 _sendMessage:v8 withReplyHandler:v7];
  (*(void (**)(void, id, void, uint64_t, uint64_t))(a1[6] + 16))(a1[6], v4, 0, v5, v6);
}

void sub_100027BC4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = +[AMSLogConfig sharedConfig];
  id v8 = (void *)v7;
  if (v6)
  {
    if (!v7)
    {
      id v8 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v9 = [v8 OSLogObject];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = objc_opt_class();
      uint64_t v11 = [*(id *)(a1 + 40) logKey];
      int v15 = 138543874;
      uint64_t v16 = v10;
      __int16 v17 = 2114;
      id v18 = v11;
      __int16 v19 = 2114;
      id v20 = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Error sending message. Error: %{public}@", (uint8_t *)&v15, 0x20u);
LABEL_10:
    }
  }
  else
  {
    if (!v7)
    {
      id v8 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v9 = [v8 OSLogObject];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = objc_opt_class();
      uint64_t v11 = [*(id *)(a1 + 40) logKey];
      id v13 = [v5 origin];
      __int16 v14 = [v13 identifier];
      int v15 = 138544130;
      uint64_t v16 = v12;
      __int16 v17 = 2114;
      id v18 = v11;
      __int16 v19 = 2114;
      id v20 = v5;
      __int16 v21 = 2114;
      uint64_t v22 = v14;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Received reply for: %{public}@ from: %{public}@", (uint8_t *)&v15, 0x2Au);

      goto LABEL_10;
    }
  }
}

void sub_100028214(id a1, AMSDeviceMessengerClientInterface *a2)
{
}

uint64_t sub_100028B8C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

id sub_100028C94(uint64_t a1, void *a2)
{
  return _[a2 deviceMessengerDidReceiveMessage:*(void *)(a1 + 32)];
}

uint64_t sub_100028F30(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

id sub_100028F48(uint64_t a1, void *a2)
{
  return _[a2 deviceMessengerDidReceiveReply:*(void *)(a1 + 32)];
}

id sub_100029B90(uint64_t a1, void *a2)
{
  return _[a2 deviceMessengerDidClearMessage:*(void *)(a1 + 32)];
}

void sub_10002AC3C(id a1)
{
  qword_1001302B0 = objc_alloc_init(AMSDDismissQRDialogService);
  _objc_release_x1();
}

void sub_10002AD6C(uint64_t a1)
{
  id v2 = +[AMSLogConfig sharedConfig];
  if (!v2)
  {
    id v2 = +[AMSLogConfig sharedConfig];
  }
  id v3 = [v2 OSLogObject];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = objc_opt_class();
    id v5 = v4;
    id v6 = AMSLogKey();
    uint64_t v7 = *(void *)(a1 + 40);
    int v10 = 138543874;
    uint64_t v11 = v4;
    __int16 v12 = 2114;
    id v13 = v6;
    __int16 v14 = 2112;
    uint64_t v15 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] QR code dialog start listening for push notifications with identifier: %@", (uint8_t *)&v10, 0x20u);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  id v8 = objc_retainBlock(*(id *)(a1 + 48));
  uint64_t v9 = [*(id *)(a1 + 32) dismissalCompletionQueue];
  [v9 setObject:v8 forKeyedSubscript:*(void *)(a1 + 40)];

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
}

uint64_t sub_10002AFD0(uint64_t a1)
{
  id v2 = +[AMSLogConfig sharedConfig];
  if (!v2)
  {
    id v2 = +[AMSLogConfig sharedConfig];
  }
  id v3 = [v2 OSLogObject];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = objc_opt_class();
    id v5 = v4;
    id v6 = AMSLogKey();
    uint64_t v7 = *(void *)(a1 + 40);
    int v10 = 138543874;
    uint64_t v11 = v4;
    __int16 v12 = 2114;
    id v13 = v6;
    __int16 v14 = 2112;
    uint64_t v15 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] QR code dialog stop listening for push notifications with identifier: %@", (uint8_t *)&v10, 0x20u);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  id v8 = [*(id *)(a1 + 32) dismissalCompletionQueue];
  [v8 setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10002B208(uint64_t a1)
{
  id v2 = +[AMSLogConfig sharedConfig];
  if (!v2)
  {
    id v2 = +[AMSLogConfig sharedConfig];
  }
  id v3 = [v2 OSLogObject];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = objc_opt_class();
    id v5 = v4;
    id v6 = AMSLogKey();
    uint64_t v7 = *(void *)(a1 + 40);
    int v12 = 138543874;
    id v13 = v4;
    __int16 v14 = 2114;
    uint64_t v15 = v6;
    __int16 v16 = 2112;
    uint64_t v17 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] QR code dialog notified for dismissal with identifier: %@", (uint8_t *)&v12, 0x20u);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  id v8 = [*(id *)(a1 + 32) dismissalCompletionQueue];
  uint64_t v9 = [v8 objectForKeyedSubscript:*(void *)(a1 + 40)];
  int v10 = (void (**)(void))[v9 copy];

  uint64_t v11 = [*(id *)(a1 + 32) dismissalCompletionQueue];
  [v11 setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  if (v10) {
    v10[2](v10);
  }
}

id sub_10002B624(uint64_t a1, void *a2)
{
  id v4 = +[AMSLogConfig sharedAccountsMultiUserConfig];
  if (!v4)
  {
    id v4 = +[AMSLogConfig sharedConfig];
  }
  id v5 = [v4 OSLogObject];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v41 = objc_opt_class();
    id v6 = AMSLogKey();
    uint64_t v7 = [*(id *)(a1 + 32) home];
    id v8 = AMSHashIfNeeded();
    uint64_t v9 = [*(id *)(a1 + 32) user];
    AMSHashIfNeeded();
    int v10 = v43 = a2;
    uint64_t v11 = [*(id *)(a1 + 32) database];
    int v12 = AMSHashIfNeeded();
    unsigned int v13 = [*(id *)(a1 + 32) createIfMissing];
    *(_DWORD *)long long buf = 138544642;
    CFStringRef v14 = @"false";
    uint64_t v48 = v41;
    __int16 v49 = 2114;
    if (v13) {
      CFStringRef v14 = @"true";
    }
    uint64_t v50 = v6;
    __int16 v51 = 2114;
    uint64_t v52 = v8;
    __int16 v53 = 2114;
    uint64_t v54 = v10;
    __int16 v55 = 2114;
    uint64_t v56 = (uint64_t)v12;
    __int16 v57 = 2114;
    CFStringRef v58 = v14;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%{public}@: [%{public}@] Fetching a record zone. home = %{public}@ | user = %{public}@ | database = %{public}@ | createIfMissing = %{public}@", buf, 0x3Eu);

    a2 = v43;
  }

  [*(id *)(a1 + 32) enqueBeginMetrics];
  uint64_t v15 = *(void **)(a1 + 32);
  id v46 = 0;
  __int16 v16 = [v15 _fetchRecordZoneWithError:&v46];
  id v17 = v46;
  id v18 = v17;
  if (v16)
  {
    id v19 = v16;
    goto LABEL_31;
  }
  if (objc_msgSend(v17, "ams_hasDomain:code:", @"AMSDCloudDataErrorDomain", 7))
  {
    if ([*(id *)(a1 + 32) createIfMissing])
    {
      id v20 = [*(id *)(a1 + 32) database];
      unsigned __int8 v21 = [v20 isPrivateDatabase];

      if (v21)
      {
        uint64_t v22 = +[AMSLogConfig sharedAccountsMultiUserConfig];
        if (!v22)
        {
          uint64_t v22 = +[AMSLogConfig sharedConfig];
        }
        id v23 = [v22 OSLogObject];
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v24 = objc_opt_class();
          id v25 = AMSLogKey();
          *(_DWORD *)long long buf = 138543618;
          uint64_t v48 = v24;
          __int16 v49 = 2114;
          uint64_t v50 = v25;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "%{public}@: [%{public}@] The record zone doesn't exist. Creating it.", buf, 0x16u);
        }
        long long v26 = *(void **)(a1 + 32);
        id v45 = 0;
        id v19 = [v26 _createRecordZoneWithError:&v45];
        id v27 = v45;
        uint64_t v28 = v27;
        if (v27)
        {
          if (a2) {
            *a2 = v27;
          }
          [*(id *)(a1 + 32) enqueFailedMetrics:v28];
        }

        goto LABEL_31;
      }
    }
  }
  else
  {
    long long v29 = +[AMSLogConfig sharedAccountsMultiUserConfig];
    if (!v29)
    {
      long long v29 = +[AMSLogConfig sharedConfig];
    }
    long long v30 = [v29 OSLogObject];
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      uint64_t v39 = objc_opt_class();
      long long v31 = AMSLogKey();
      __int16 v42 = [*(id *)(a1 + 32) home];
      long long v32 = AMSHashIfNeeded();
      id v40 = [*(id *)(a1 + 32) user];
      long long v33 = AMSHashIfNeeded();
      uint64_t v34 = [*(id *)(a1 + 32) database];
      uint64_t v35 = AMSHashIfNeeded();
      __int16 v44 = a2;
      long long v36 = (void *)v35;
      *(_DWORD *)long long buf = 138544642;
      CFStringRef v37 = @"true";
      uint64_t v48 = v39;
      __int16 v49 = 2114;
      if (!v18) {
        CFStringRef v37 = @"false";
      }
      uint64_t v50 = v31;
      __int16 v51 = 2114;
      uint64_t v52 = v32;
      __int16 v53 = 2114;
      uint64_t v54 = v33;
      __int16 v55 = 2114;
      uint64_t v56 = v35;
      __int16 v57 = 2114;
      CFStringRef v58 = v37;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to fetch a record zone. home = %{public}@ | user = %{public}@ | database = %{public}@ | error = %{public}@", buf, 0x3Eu);

      a2 = v44;
    }
  }
  if (a2) {
    *a2 = v18;
  }
  objc_msgSend(*(id *)(a1 + 32), "enqueFailedMetrics:", v18, v39);
  id v19 = 0;
LABEL_31:

  return v19;
}

id sub_10002C9A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isDefaultRecordZone])
  {
    id v4 = 0;
  }
  else
  {
    id v5 = [*(id *)(a1 + 32) database];
    id v6 = +[AMSDHomeManager identifiersForRecordZone:inDatabase:qualityOfService:](AMSDHomeManager, "identifiersForRecordZone:inDatabase:qualityOfService:", v3, v5, [*(id *)(a1 + 32) qualityOfService]);
    id v20 = 0;
    uint64_t v7 = [v6 resultWithError:&v20];
    id v8 = v20;

    if (v7)
    {
      uint64_t v9 = [*(id *)(a1 + 32) home];
      int v10 = [v9 identifier];
      uint64_t v11 = [v7 first];
      if ([v10 isEqual:v11])
      {
        int v12 = [*(id *)(a1 + 32) user];
        unsigned int v13 = [v12 identifier];
        CFStringRef v14 = [v7 second];
        id v4 = [v13 isEqual:v14];
      }
      else
      {
        id v4 = 0;
      }
    }
    else
    {
      uint64_t v9 = +[AMSLogConfig sharedAccountsMultiUserConfig];
      if (!v9)
      {
        uint64_t v9 = +[AMSLogConfig sharedConfig];
      }
      int v10 = [v9 OSLogObject];
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = objc_opt_class();
        __int16 v16 = AMSLogKey();
        id v17 = AMSHashIfNeeded();
        id v18 = AMSHashIfNeeded();
        *(_DWORD *)long long buf = 138544130;
        uint64_t v22 = v15;
        __int16 v23 = 2114;
        uint64_t v24 = v16;
        __int16 v25 = 2114;
        long long v26 = v17;
        __int16 v27 = 2114;
        uint64_t v28 = v18;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to fetch home/home user identifiers for a record zone. recordZone = %{public}@ | error = %{public}@", buf, 0x2Au);
      }
      id v4 = 0;
    }
  }
  return v4;
}

void sub_10002D10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_10002D19C(uint64_t a1)
{
  sub_10002D1F4();
  Class result = objc_getClass("ODISession");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1000CB5E4();
  }
  qword_1001302B8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_10002D1F4()
{
  v3[0] = 0;
  if (!qword_1001302C0)
  {
    v3[1] = _NSConcreteStackBlock;
    v3[2] = 3221225472;
    v3[3] = sub_10002D2F4;
    v3[4] = &unk_1001127A8;
    v3[5] = v3;
    long long v4 = off_100112790;
    uint64_t v5 = 0;
    qword_1001302C0 = _sl_dlopen();
  }
  uint64_t v0 = qword_1001302C0;
  uint64_t v1 = (void *)v3[0];
  if (!qword_1001302C0)
  {
    uint64_t v1 = (void *)abort_report_np();
    goto LABEL_7;
  }
  if (v3[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t sub_10002D2F4()
{
  uint64_t result = _sl_dlopen();
  qword_1001302C0 = result;
  return result;
}

void *sub_10002D368(uint64_t a1)
{
  id v2 = (void *)sub_10002D1F4();
  uint64_t result = dlsym(v2, "ODIServiceProviderIdTDMTrustedInference");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001302C8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id sub_10002D544(uint64_t a1)
{
  id v2 = AMSSetLogKeyIfNeeded();
  id v3 = +[AMSLogConfig sharedFraudReportConfig];
  if (!v3)
  {
    id v3 = +[AMSLogConfig sharedConfig];
  }
  long long v4 = [v3 OSLogObject];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = objc_opt_class();
    uint64_t v6 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138543874;
    long long v32 = v5;
    __int16 v33 = 2114;
    uint64_t v34 = v2;
    __int16 v35 = 2112;
    uint64_t v36 = v6;
    id v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Running fraud report blinding message task. (transactionId: %@)", buf, 0x20u);
  }
  id v8 = [*(id *)(a1 + 32) bag];
  uint64_t v9 = [v8 URLForKey:AMSBagKeyFraudReportPKSService];
  int v10 = [v9 valuePromise];

  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_10002D84C;
  v27[3] = &unk_1001127D0;
  id v11 = *(id *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 32);
  id v28 = v11;
  uint64_t v29 = v12;
  id v13 = v2;
  id v30 = v13;
  CFStringRef v14 = [v10 continueWithBlock:v27];
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  _OWORD v25[2] = sub_10002DA74;
  v25[3] = &unk_1001127F8;
  v25[4] = *(void *)(a1 + 32);
  id v15 = v13;
  id v26 = v15;
  __int16 v16 = [v14 continueWithBlock:v25];
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_10002DBF0;
  v21[3] = &unk_100112820;
  id v17 = *(void **)(a1 + 40);
  v21[4] = *(void *)(a1 + 32);
  id v22 = v15;
  id v23 = v17;
  id v24 = *(id *)(a1 + 48);
  id v18 = v15;
  id v19 = [v16 continueWithBlock:v21];

  return v19;
}

id sub_10002D84C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v5)
  {
    if (*(void *)(a1 + 32))
    {
      uint64_t v8 = objc_msgSend(v5, "URLByAppendingPathComponent:");

      id v5 = (id)v8;
    }
    uint64_t v9 = +[AMSLogConfig sharedFraudReportConfig];
    if (!v9)
    {
      uint64_t v9 = +[AMSLogConfig sharedConfig];
    }
    int v10 = [v9 OSLogObject];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = objc_opt_class();
      uint64_t v12 = *(void *)(a1 + 48);
      *(_DWORD *)long long buf = 138543618;
      id v22 = v11;
      __int16 v23 = 2114;
      uint64_t v24 = v12;
      id v13 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Fraud report blinding message - obtaining keys", buf, 0x16u);
    }
    id v14 = objc_alloc((Class)AMSURLRequestEncoder);
    id v15 = [*(id *)(a1 + 40) bag];
    id v16 = [v14 initWithBag:v15];

    [v16 setDialogOptions:1];
    [v16 setRequestEncoding:1];
    [v16 setUrlKnownToBeTrusted:1];
    [v16 setLogUUID:*(void *)(a1 + 48)];
    id v17 = [v16 requestWithMethod:2 URL:v5 parameters:0];
  }
  else
  {
    id v20 = v6;
    id v18 = AMSErrorWithFormat();
    id v17 = +[AMSPromise promiseWithError:](AMSPromise, "promiseWithError:", v18, v20);
  }
  return v17;
}

id sub_10002DA74(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = +[AMSURLSession defaultSession];
    uint64_t v8 = [v7 dataTaskPromiseWithRequest:v5];
  }
  else
  {
    uint64_t v9 = +[AMSLogConfig sharedFraudReportConfig];
    if (!v9)
    {
      uint64_t v9 = +[AMSLogConfig sharedConfig];
    }
    int v10 = [v9 OSLogObject];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = objc_opt_class();
      uint64_t v12 = *(void *)(a1 + 40);
      int v14 = 138543874;
      uint64_t v15 = v11;
      __int16 v16 = 2114;
      uint64_t v17 = v12;
      __int16 v18 = 2114;
      id v19 = v6;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}@ [%{public}@] Error fraud report blinding message, cannot create request: %{public}@", (uint8_t *)&v14, 0x20u);
    }

    uint64_t v8 = +[AMSPromise promiseWithError:v6];
  }

  return v8;
}

id sub_10002DBF0(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = +[AMSLogConfig sharedFraudReportConfig];
  uint64_t v8 = (void *)v7;
  if (v5)
  {
    if (!v7)
    {
      uint64_t v8 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v9 = [v8 OSLogObject];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = objc_opt_class();
      uint64_t v11 = a1[5];
      *(_DWORD *)long long buf = 138543618;
      uint64_t v25 = (uint64_t)v10;
      __int16 v26 = 2114;
      uint64_t v27 = v11;
      id v12 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Fraud report blinding message - obtaining keys success", buf, 0x16u);
    }
    uint64_t v13 = a1[6];
    int v14 = [v5 data];
    uint64_t v15 = a1[7];
    id v23 = 0;
    __int16 v16 = +[AMSDFraudReportPrivacyTask _blindedTransactionWithTransactionID:v13 pks:v14 keyID:v15 error:&v23];
    id v17 = v23;

    if (v16) {
      +[AMSPromise promiseWithResult:v16];
    }
    else {
    unsigned __int8 v21 = +[AMSPromise promiseWithError:v17];
    }
  }
  else
  {
    if (!v7)
    {
      uint64_t v8 = +[AMSLogConfig sharedConfig];
    }
    __int16 v18 = [v8 OSLogObject];
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = objc_opt_class();
      uint64_t v20 = a1[5];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v25 = v19;
      __int16 v26 = 2114;
      uint64_t v27 = v20;
      __int16 v28 = 2114;
      id v29 = v6;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%{public}@ [%{public}@] Error fraud report blinding message, cannot fetch the pks key: %{public}@", buf, 0x20u);
    }

    unsigned __int8 v21 = +[AMSPromise promiseWithError:v6];
  }

  return v21;
}

void sub_10002E608(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = +[AMSLogConfig sharedFraudReportConfig];
  if (!v7)
  {
    uint64_t v7 = +[AMSLogConfig sharedConfig];
  }
  uint64_t v8 = [v7 OSLogObject];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = objc_opt_class();
    id v10 = v9;
    uint64_t v11 = AMSLogKey();
    *(_DWORD *)long long buf = 138543618;
    uint64_t v50 = v9;
    __int16 v51 = 2114;
    uint64_t v52 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Finished blinding transaction.", buf, 0x16u);
  }
  if (v5)
  {
    id v12 = [*(id *)(a1 + 40) fsrData];
    id v48 = 0;
    uint64_t v13 = +[AMSDFraudReportService _reportedScoreFromFSRDataString:v12 error:&v48];
    id v14 = v48;

    if (v13)
    {
      uint64_t v15 = [AMSDFraudReportServiceRequest alloc];
      __int16 v16 = [*(id *)(a1 + 40) nameSpace];
      id v17 = [v13 unsignedCharValue];
      [v5 blindedMessage];
      id v43 = v14;
      __int16 v18 = v13;
      v20 = id v19 = v6;
      unsigned __int8 v21 = [v5 keyID];
      id v22 = -[AMSDFraudReportServiceRequest initWithNameSpace:reportedScore:blindedMessage:keyID:authenticationTokenType:shouldIncludeODIAssessment:](v15, "initWithNameSpace:reportedScore:blindedMessage:keyID:authenticationTokenType:shouldIncludeODIAssessment:", v16, v17, v20, v21, [*(id *)(a1 + 40) authenticationTokenType], objc_msgSend(*(id *)(a1 + 40), "shouldIncludeODIAssessment"));

      id v6 = v19;
      uint64_t v13 = v18;
      id v14 = v43;

      id v23 = [AMSDFraudReportServiceTask alloc];
      uint64_t v24 = [*(id *)(a1 + 40) account];
      uint64_t v25 = [(AMSDFraudReportServiceTask *)v23 initWithAccount:v24 bag:*(void *)(a1 + 48)];

      __int16 v26 = [(AMSDFraudReportServiceTask *)v25 performReceiveFraudReportForServiceRequest:v22];
      v45[0] = _NSConcreteStackBlock;
      v45[1] = 3221225472;
      v45[2] = sub_10002EB9C;
      v45[3] = &unk_100112870;
      id v47 = *(id *)(a1 + 56);
      id v46 = v5;
      [v26 resultWithCompletion:v45];
    }
    else
    {
      unsigned int v28 = +[AMSUnitTests isRunningUnitTests];
      uint64_t v29 = +[AMSLogConfig sharedFraudReportConfig];
      id v30 = (void *)v29;
      if (v28)
      {
        if (!v29)
        {
          id v30 = +[AMSLogConfig sharedConfig];
        }
        long long v31 = [v30 OSLogObject];
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          long long v32 = objc_opt_class();
          id v42 = v32;
          __int16 v33 = AMSLogKey();
          objc_msgSend(v14, "ams_title");
          v35 = id v34 = v6;
          *(_DWORD *)long long buf = 138543874;
          uint64_t v50 = v32;
          __int16 v51 = 2114;
          uint64_t v52 = v33;
          __int16 v53 = 2114;
          uint64_t v54 = v35;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Unable to parse reported score from fsrData: %{public}@", buf, 0x20u);

          id v6 = v34;
          uint64_t v13 = 0;
        }
        id v30 = +[NSNotificationCenter defaultCenter];
        uint64_t v36 = +[AMSLogConfig sharedFraudReportConfig];
        [v30 postNotificationName:@"com.apple.AppleMediaServicesTests.FaultLogged" object:v36 userInfo:0];
      }
      else
      {
        if (!v29)
        {
          id v30 = +[AMSLogConfig sharedConfig];
        }
        uint64_t v36 = [v30 OSLogObject];
        if (os_log_type_enabled(v36, OS_LOG_TYPE_FAULT))
        {
          CFStringRef v37 = objc_opt_class();
          id v44 = v37;
          long long v38 = AMSLogKey();
          objc_msgSend(v14, "ams_title");
          v40 = id v39 = v6;
          *(_DWORD *)long long buf = 138543874;
          uint64_t v50 = v37;
          __int16 v51 = 2114;
          uint64_t v52 = v38;
          __int16 v53 = 2114;
          uint64_t v54 = v40;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_FAULT, "%{public}@: [%{public}@] Unable to parse reported score from fsrData: %{public}@", buf, 0x20u);

          id v6 = v39;
        }
      }

      uint64_t v41 = *(void *)(a1 + 56);
      AMSError();
      id v22 = (AMSDFraudReportServiceRequest *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void, AMSDFraudReportServiceRequest *))(v41 + 16))(v41, 0, v22);
    }
  }
  else
  {
    uint64_t v27 = *(void *)(a1 + 56);
    objc_msgSend(v6, "ams_sanitizedForSecureCoding");
    id v14 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void, id))(v27 + 16))(v27, 0, v14);
  }
}

void sub_10002EB9C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if (v5)
  {
    id v6 = [*(id *)(a1 + 32) tdmToken];
    uint64_t v7 = [*(id *)(a1 + 32) pks];
    id v13 = 0;
    uint64_t v8 = +[AMSDFraudReportPrivacyTask performUnBlindingFraudReportForResponse:v5 tdmToken:v6 pks:v7 error:&v13];
    id v9 = v13;

    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v11 = objc_msgSend(v9, "ams_sanitizedForSecureCoding");
    (*(void (**)(uint64_t, void *, void *))(v10 + 16))(v10, v8, v11);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v8 = objc_msgSend(a3, "ams_sanitizedForSecureCoding");
    (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0, v8);
  }
}

void sub_10002F244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

AMSPromise *__cdecl sub_10002F260(id a1, ACAccount *a2, NSString *a3)
{
  long long v4 = a3;
  id v5 = a2;
  id v6 = [(ACAccount *)v5 accountStore];
  uint64_t v7 = objc_msgSend(v6, "ams_fetchGrandSlamTokenForAccount:withIdentifier:", v5, v4);

  return (AMSPromise *)v7;
}

AMSPromise *__cdecl sub_10002F2D8(id a1, ACAccount *a2, NSString *a3)
{
  return (AMSPromise *)+[AMSDFraudReportServiceTask performSilentAuthAndFetchTokenForAccount:a2 tokenIdentifier:a3];
}

AMSDFraudReportODIAssessmentProvider *__cdecl sub_10002F2EC(id a1)
{
  id v10 = 0;
  uint64_t v1 = [[AMSDFraudReportODIAssessmentProvider alloc] initWithError:&v10];
  id v2 = v10;
  if (!v1)
  {
    id v3 = +[AMSLogConfig sharedFraudReportConfig];
    if (!v3)
    {
      id v3 = +[AMSLogConfig sharedConfig];
    }
    long long v4 = [v3 OSLogObject];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      id v5 = objc_opt_class();
      id v6 = v5;
      uint64_t v7 = AMSLogKey();
      uint64_t v8 = AMSLogableError();
      *(_DWORD *)long long buf = 138543874;
      uint64_t v12 = v5;
      __int16 v13 = 2114;
      id v14 = v7;
      __int16 v15 = 2114;
      __int16 v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Cannot create ODI assessment provider: %{public}@.", buf, 0x20u);
    }
  }

  return v1;
}

id sub_10002F46C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v8 = WeakRetained;
  if (WeakRetained)
  {
    id v9 = [WeakRetained bag];
    AMSFraudReportAddDeviceIdentityCertificateAndSignatureToRequest();
  }
  else
  {
    id v9 = AMSError();
    +[AMSPromise promiseWithError:v9];
  id v10 = };

  return v10;
}

id sub_10002F5F4(uint64_t a1)
{
  id v2 = AMSSetLogKeyIfNeeded();
  id v3 = +[AMSLogConfig sharedFraudReportConfig];
  if (!v3)
  {
    id v3 = +[AMSLogConfig sharedConfig];
  }
  long long v4 = [v3 OSLogObject];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543618;
    id v23 = (id)objc_opt_class();
    __int16 v24 = 2114;
    uint64_t v25 = v2;
    id v5 = v23;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Running fraud report service request.", buf, 0x16u);
  }
  id v6 = [*(id *)(a1 + 32) bag];
  uint64_t v7 = [v6 URLForKey:AMSBagKeyFraudReportService];

  uint64_t v8 = +[AMSDFraudReportServiceTask grandSlamTokenIdentifierForAuthenticationTokenType:](AMSDFraudReportServiceTask, "grandSlamTokenIdentifierForAuthenticationTokenType:", [*(id *)(a1 + 40) authenticationTokenType]);
  id v9 = [*(id *)(a1 + 32) account];
  id v10 = +[AMSDFraudReportServiceTask determineAccountForAccount:v9];

  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  _OWORD v17[2] = sub_10002F848;
  v17[3] = &unk_100112A78;
  uint64_t v11 = *(void **)(a1 + 40);
  v17[4] = *(void *)(a1 + 32);
  id v18 = v7;
  id v19 = v8;
  id v20 = v11;
  id v21 = v2;
  id v12 = v2;
  id v13 = v8;
  id v14 = v7;
  __int16 v15 = [v10 thenWithBlock:v17];

  return v15;
}

id sub_10002F848(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v4 = [*(id *)(a1 + 32) requestEncoderWithAccount:v3];
  id v5 = [v4 requestWithMethod:4 bagURL:*(void *)(a1 + 40) parameters:0];
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_10002FA08;
  v19[3] = &unk_100112988;
  void v19[4] = *(void *)(a1 + 32);
  id v6 = v3;
  id v20 = v6;
  id v21 = *(id *)(a1 + 48);
  uint64_t v7 = [v5 thenWithBlock:v19];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10002FA1C;
  _OWORD v13[3] = &unk_100112A50;
  id v8 = *(id *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 32);
  id v14 = v8;
  uint64_t v15 = v9;
  id v16 = *(id *)(a1 + 64);
  id v17 = v6;
  id v18 = *(id *)(a1 + 48);
  id v10 = v6;
  uint64_t v11 = [v7 thenWithBlock:v13];

  return v11;
}

id sub_10002FA08(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) appendTokenIfNeededToRequest:a2 forAccount:*(void *)(a1 + 40) tokenIdentifier:*(void *)(a1 + 48)];
}

id sub_10002FA1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v4 = +[AADeviceInfo currentInfo];
  id v5 = [v4 clientInfoHeader];

  [v3 setValue:v5 forHTTPHeaderField:AMSHTTPHeaderMMeClientInfo];
  uint64_t v31 = 0;
  long long v32 = &v31;
  uint64_t v33 = 0x3032000000;
  id v34 = sub_100015ABC;
  __int16 v35 = sub_100015A5C;
  unsigned int v6 = [*(id *)(a1 + 32) shouldIncludeODIAssessment];
  uint64_t v7 = 0;
  if (v6)
  {
    uint64_t v7 = (*(void (**)(void))(*(void *)(*(void *)(a1 + 40) + 32) + 16))();
  }
  id v36 = v7;
  id v8 = +[AMSDFraudReportServiceTask requestBodyParametersForRequest:*(void *)(a1 + 32) odiAssessmentProvider:v32[5]];
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  v29[2] = sub_10002FD14;
  v29[3] = &unk_1001129B0;
  void v29[4] = *(void *)(a1 + 40);
  id v9 = v3;
  id v30 = v9;
  id v10 = [v8 thenWithBlock:v29];
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_10002FD34;
  v24[3] = &unk_100112A00;
  id v11 = *(id *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 40);
  id v25 = v11;
  uint64_t v26 = v12;
  id v27 = *(id *)(a1 + 56);
  id v28 = *(id *)(a1 + 64);
  id v13 = [v10 thenWithBlock:v24];
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_10002FEE0;
  v19[3] = &unk_100112A28;
  id v23 = &v31;
  id v14 = *(id *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  id v16 = *(void **)(a1 + 48);
  id v20 = v14;
  uint64_t v21 = v15;
  id v22 = v16;
  id v17 = [v13 continueWithBlock:v19];

  _Block_object_dispose(&v31, 8);
  return v17;
}

void sub_10002FCFC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10002FD14(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 24) + 16))();
}

id sub_10002FD34(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v4 = +[AMSURLSession defaultSession];
  id v5 = [v4 dataTaskPromiseWithRequest:v3];

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10002FE58;
  void v12[3] = &unk_1001129D8;
  id v6 = *(id *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  id v8 = *(void **)(a1 + 48);
  id v13 = v6;
  uint64_t v14 = v7;
  id v15 = v3;
  id v16 = v8;
  id v17 = *(id *)(a1 + 56);
  id v9 = v3;
  id v10 = [v5 continueWithBlock:v12];

  return v10;
}

id sub_10002FE58(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = (id)AMSSetLogKey();
  id v8 = [*(id *)(a1 + 40) handleExpiredAuthenticationTokenErrorWithResult:v6 error:v5 forRequest:*(void *)(a1 + 48) account:*(void *)(a1 + 56) tokenIdentifier:*(void *)(a1 + 64)];

  return v8;
}

id sub_10002FEE0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) provideFeedbackWithOutcome:0];
    uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8);
    id v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = 0;

    id v9 = [v5 object];
    id v10 = v9;
    if (v9)
    {
      id v11 = v9;
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        id v12 = v11;
      }
      else {
        id v12 = 0;
      }

      if (v12)
      {
        id v23 = objc_alloc((Class)AMSFraudReportResponse);
        __int16 v24 = [*(id *)(a1 + 32) nameSpace];
        id v25 = [*(id *)(a1 + 32) reportedScore];
        uint64_t v26 = [*(id *)(a1 + 32) keyID];
        id v50 = 0;
        id v27 = [v23 initWithResponseDictionary:v12 expectedNamespace:v24 expectedReportedScore:v25 keyID:v26 error:&v50];
        id v28 = v50;

        if (v27)
        {
          uint64_t v29 = +[AMSLogConfig sharedFraudReportConfig];
          if (!v29)
          {
            uint64_t v29 = +[AMSLogConfig sharedConfig];
          }
          id v30 = [v29 OSLogObject];
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v31 = objc_opt_class();
            uint64_t v32 = *(void *)(a1 + 48);
            *(_DWORD *)long long buf = 138543618;
            uint64_t v52 = v31;
            __int16 v53 = 2114;
            uint64_t v54 = v32;
            id v33 = v31;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Fraud report received service result", buf, 0x16u);
          }
          uint64_t v21 = +[AMSPromise promiseWithResult:v27];
        }
        else
        {
          unsigned int v35 = +[AMSUnitTests isRunningUnitTests];
          uint64_t v36 = +[AMSLogConfig sharedFraudReportConfig];
          CFStringRef v37 = (void *)v36;
          if (v35)
          {
            if (!v36)
            {
              CFStringRef v37 = +[AMSLogConfig sharedConfig];
            }
            long long v38 = [v37 OSLogObject];
            if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
            {
              id v39 = objc_opt_class();
              uint64_t v46 = *(void *)(a1 + 48);
              id v48 = v39;
              id v40 = objc_msgSend(v28, "ams_title");
              *(_DWORD *)long long buf = 138543874;
              uint64_t v52 = v39;
              __int16 v53 = 2114;
              uint64_t v54 = v46;
              __int16 v55 = 2114;
              uint64_t v56 = v40;
              _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to parse fraud report response: %{public}@", buf, 0x20u);
            }
            CFStringRef v37 = +[NSNotificationCenter defaultCenter];
            uint64_t v41 = +[AMSLogConfig sharedFraudReportConfig];
            [v37 postNotificationName:@"com.apple.AppleMediaServicesTests.FaultLogged" object:v41 userInfo:0];
          }
          else
          {
            if (!v36)
            {
              CFStringRef v37 = +[AMSLogConfig sharedConfig];
            }
            uint64_t v41 = [v37 OSLogObject];
            if (os_log_type_enabled(v41, OS_LOG_TYPE_FAULT))
            {
              id v42 = objc_opt_class();
              uint64_t v47 = *(void *)(a1 + 48);
              id v49 = v42;
              id v43 = objc_msgSend(v28, "ams_title");
              *(_DWORD *)long long buf = 138543874;
              uint64_t v52 = v42;
              __int16 v53 = 2114;
              uint64_t v54 = v47;
              __int16 v55 = 2114;
              uint64_t v56 = v43;
              _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_FAULT, "%{public}@: [%{public}@] Failed to parse fraud report response: %{public}@", buf, 0x20u);
            }
          }

          id v44 = AMSError();
          uint64_t v21 = +[AMSPromise promiseWithError:v44];
        }
      }
      else
      {
        id v34 = AMSError();
        uint64_t v21 = +[AMSPromise promiseWithError:v34];
      }
    }
    else
    {
      id v22 = AMSError();
      uint64_t v21 = +[AMSPromise promiseWithError:v22];
    }
  }
  else
  {
    id v13 = +[AMSLogConfig sharedFraudReportConfig];
    if (!v13)
    {
      id v13 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v14 = [v13 OSLogObject];
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      id v15 = objc_opt_class();
      uint64_t v16 = *(void *)(a1 + 48);
      id v17 = v15;
      id v18 = AMSLogableError();
      *(_DWORD *)long long buf = 138543874;
      uint64_t v52 = v15;
      __int16 v53 = 2114;
      uint64_t v54 = v16;
      __int16 v55 = 2114;
      uint64_t v56 = v18;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Fraud report request failed with error: %{public}@", buf, 0x20u);
    }
    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) provideFeedbackWithOutcome:1];
    uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 8);
    id v20 = *(void **)(v19 + 40);
    *(void *)(v19 + 40) = 0;

    uint64_t v21 = +[AMSPromise promiseWithError:v6];
  }

  return v21;
}

id sub_100030828(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = +[AMSLogConfig sharedFraudReportConfig];
  id v8 = (void *)v7;
  if (v5)
  {
    if (!v7)
    {
      id v8 = +[AMSLogConfig sharedConfig];
    }
    id v9 = [v8 OSLogObject];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      id v10 = objc_opt_class();
      uint64_t v11 = *(void *)(a1 + 40);
      int v22 = 138543618;
      id v23 = v10;
      __int16 v24 = 2114;
      uint64_t v25 = v11;
      id v12 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%{public}@: [%{public}@] Retrieved new authentication token after silent auth, retrying fraud report request.", (uint8_t *)&v22, 0x16u);
    }
    id v13 = [*(id *)(a1 + 56) mutableCopy];
    [v13 setValue:v5 forHTTPHeaderField:AMSHTTPHeaderAuthorization];
    uint64_t v14 = +[AMSURLSession defaultSession];
    id v15 = [v14 dataTaskPromiseWithRequest:v13];
  }
  else
  {
    if (!v7)
    {
      id v8 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v16 = [v8 OSLogObject];
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      id v17 = objc_opt_class();
      uint64_t v18 = *(void *)(a1 + 40);
      id v19 = v17;
      id v20 = AMSLogableError();
      int v22 = 138543874;
      id v23 = v17;
      __int16 v24 = 2114;
      uint64_t v25 = v18;
      __int16 v26 = 2114;
      id v27 = v20;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to retrieve updated authentication token after silent auth, not retrying request. Error: %{public}@.", (uint8_t *)&v22, 0x20u);
    }
    id v15 = +[AMSPromise promiseWithError:*(void *)(a1 + 48)];
  }

  return v15;
}

id sub_100030BCC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = +[AMSLogConfig sharedFraudReportConfig];
  id v6 = (void *)v5;
  if (v4)
  {
    if (!v5)
    {
      id v6 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v7 = [v6 OSLogObject];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      id v9 = AMSSetLogKeyIfNeeded();
      int v16 = 138543874;
      uint64_t v17 = v8;
      __int16 v18 = 2114;
      id v19 = v9;
      __int16 v20 = 2114;
      id v21 = v4;
      id v10 = "%{public}@: [%{public}@] No iTunes account found for the given account | error = %{public}@";
      uint64_t v11 = v7;
      uint32_t v12 = 32;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v16, v12);
    }
  }
  else
  {
    if (!v5)
    {
      id v6 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v7 = [v6 OSLogObject];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 40);
      id v9 = AMSSetLogKeyIfNeeded();
      int v16 = 138543618;
      uint64_t v17 = v13;
      __int16 v18 = 2114;
      id v19 = v9;
      id v10 = "%{public}@: [%{public}@] iTunes backing account for given account found.";
      uint64_t v11 = v7;
      uint32_t v12 = 22;
      goto LABEL_10;
    }
  }

  uint64_t v14 = +[AMSPromise promiseWithResult:*(void *)(a1 + 32)];

  return v14;
}

AMSPromise *sub_1000311C4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    [*(id *)(a1 + 32) setValue:a2 forHTTPHeaderField:AMSHTTPHeaderAuthorization];
    [*(id *)(a1 + 32) setValue:*(void *)(a1 + 40) forHTTPHeaderField:@"X-Apple-Auth-Token-Identifier"];
  }
  uint64_t v3 = *(void *)(a1 + 32);
  return +[AMSPromise promiseWithResult:v3];
}

id sub_100031360(void *a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = +[AMSLogConfig sharedFraudReportConfig];
    if (!v4)
    {
      id v4 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v5 = [v4 OSLogObject];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[4];
      uint64_t v7 = a1[5];
      uint64_t v8 = a1[6];
      int v12 = 138543874;
      uint64_t v13 = v6;
      __int16 v14 = 2114;
      uint64_t v15 = v7;
      __int16 v16 = 2114;
      uint64_t v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Token with identifier '%{public}@' found without authentication", (uint8_t *)&v12, 0x20u);
    }

    uint64_t v9 = +[AMSPromise promiseWithResult:v3];
  }
  else
  {
    uint64_t v9 = (*(void (**)(void))(*(void *)(a1[4] + 16) + 16))();
  }
  id v10 = (void *)v9;

  return v10;
}

id sub_100031700(id *a1)
{
  id v2 = [a1[4] accountStore];
  id v3 = objc_msgSend(v2, "ams_fetchGrandSlamTokenForAccount:withIdentifier:", a1[4], a1[5]);

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _OWORD v6[2] = sub_100031800;
  v6[3] = &unk_100112B68;
  id v7 = a1[4];
  id v8 = a1[6];
  id v9 = a1[5];
  id v4 = [v3 catchWithBlock:v6];

  return v4;
}

id sub_100031800(uint64_t a1)
{
  id v2 = [objc_alloc((Class)AMSAuthKitUpdateTask) initWithAccount:*(void *)(a1 + 32) options:*(void *)(a1 + 40)];
  id v3 = [v2 performAuthKitUpdate];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _OWORD v6[2] = sub_1000318DC;
  v6[3] = &unk_100112B40;
  id v7 = *(id *)(a1 + 48);
  id v4 = [v3 thenWithBlock:v6];

  return v4;
}

id sub_1000318DC(uint64_t a1, void *a2)
{
  id v3 = [a2 authenticationResults];
  id v4 = [v3 objectForKeyedSubscript:AKAuthenticationIDMSTokenKey];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v5 = v4;
  }
  else {
    id v5 = 0;
  }

  if (!v5)
  {
    AMSError();
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v8 = +[AMSPromise promiseWithError:v7];
LABEL_11:
    id v9 = (void *)v8;
    goto LABEL_13;
  }
  uint64_t v6 = [v5 objectForKeyedSubscript:*(void *)(a1 + 32)];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v7 = v6;
  }
  else {
    id v7 = 0;
  }

  if (v7)
  {
    uint64_t v8 = +[AMSPromise promiseWithResult:v7];
    goto LABEL_11;
  }
  uint64_t v12 = *(void *)(a1 + 32);
  id v10 = AMSErrorWithFormat();
  id v9 = +[AMSPromise promiseWithError:](AMSPromise, "promiseWithError:", v10, v12);

LABEL_13:
  return v9;
}

void sub_100031E1C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = +[AMSLogConfig sharedFraudReportConfig];
  uint64_t v8 = (void *)v7;
  if (a2)
  {
    if (!v7)
    {
      uint64_t v8 = +[AMSLogConfig sharedConfig];
    }
    id v9 = [v8 OSLogObject];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = *(void **)(a1 + 56);
      uint64_t v11 = *(void *)(a1 + 32);
      int v16 = 138543618;
      uint64_t v17 = v10;
      __int16 v18 = 2114;
      uint64_t v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] ODI assessment successfully obtained.", (uint8_t *)&v16, 0x16u);
    }
  }
  else
  {
    if (!v7)
    {
      uint64_t v8 = +[AMSLogConfig sharedConfig];
    }
    id v9 = [v8 OSLogObject];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = objc_opt_class();
      uint64_t v13 = *(void *)(a1 + 32);
      id v14 = v12;
      uint64_t v15 = AMSLogableError();
      int v16 = 138543874;
      uint64_t v17 = v12;
      __int16 v18 = 2114;
      uint64_t v19 = v13;
      __int16 v20 = 2114;
      id v21 = v15;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to obtain ODI assessment, proceeding without one: %{public}@.", (uint8_t *)&v16, 0x20u);
    }
  }

  [*(id *)(a1 + 40) setObject:v6 forKeyedSubscript:@"odiAssessment"];
  [*(id *)(a1 + 48) finishWithResult:*(void *)(a1 + 40)];
}

void sub_100032268(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void *sub_100032284(uint64_t a1, void *a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = objc_alloc_init(AMSDMultiUserMetrics);
  [WeakRetained setMetrics:v4];

  id v5 = [WeakRetained metrics];
  id v6 = [v5 enqueueGenerateMultiUserTokenBeginEvent];

  uint64_t v7 = +[ACAccountStore ams_sharedAccountStore];
  uint64_t v8 = objc_msgSend(v7, "ams_activeiCloudAccount");

  unsigned int v9 = [WeakRetained tokenNeedsRegeneration];
  id v10 = @"accept";
  if (v9) {
    id v10 = @"tokenRefresh";
  }
  v132 = v10;
  uint64_t v11 = +[AMSLogConfig sharedAccountsMultiUserConfig];
  if (!v11)
  {
    uint64_t v11 = +[AMSLogConfig sharedConfig];
  }
  uint64_t v12 = [v11 OSLogObject];
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = objc_opt_class();
    id v14 = AMSLogKey();
    uint64_t v15 = AMSHashIfNeeded();
    [WeakRetained account];
    int v16 = v130 = a2;
    uint64_t v17 = AMSHashIfNeeded();
    [WeakRetained home];
    id v127 = WeakRetained;
    v19 = __int16 v18 = v8;
    __int16 v20 = AMSHashIfNeeded();
    *(_DWORD *)long long buf = 138544642;
    uint64_t v140 = v13;
    __int16 v141 = 2114;
    v142 = v14;
    __int16 v143 = 2114;
    v144 = v132;
    __int16 v145 = 2114;
    v146 = v15;
    __int16 v147 = 2114;
    v148 = v17;
    __int16 v149 = 2114;
    v150 = v20;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Generating a multi-user token. action = %{public}@ | iCloudAccount = %{public}@ | iTunesAccount = %{public}@ | home = %{public}@", buf, 0x3Eu);

    uint64_t v8 = v18;
    id WeakRetained = v127;

    a2 = v130;
  }

  if (v8)
  {
    id v21 = [WeakRetained home];
    unsigned int v22 = [v21 isCurrentUserRestrictedGuest];

    if (v22)
    {
      AMSError();
      id v23 = (__CFString *)objc_claimAutoreleasedReturnValue();
      __int16 v24 = +[AMSLogConfig sharedAccountsMultiUserConfig];
      if (!v24)
      {
        __int16 v24 = +[AMSLogConfig sharedConfig];
      }
      uint64_t v25 = [v24 OSLogObject];
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = objc_opt_class();
        id v27 = AMSLogKey();
        *(_DWORD *)long long buf = 138543874;
        uint64_t v140 = v26;
        __int16 v141 = 2114;
        v142 = v27;
        __int16 v143 = 2114;
        v144 = v23;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Restricted Guest Error: %{public}@", buf, 0x20u);
      }
      if (a2) {
        *a2 = v23;
      }

      a2 = 0;
      goto LABEL_87;
    }
    v128 = v8;
    id v34 = [WeakRetained controller];
    unsigned int v35 = [v34 cloudContainer];
    uint64_t v36 = [v35 privateDatabase];

    CFStringRef v37 = [AMSDFetchMultiUserRecordZoneTask alloc];
    long long v38 = [WeakRetained home];
    id v39 = [WeakRetained home];
    id v40 = [v39 currentUser];
    uint64_t v41 = [WeakRetained metrics];
    id v42 = [(AMSDFetchMultiUserRecordZoneTask *)v37 initWithHome:v38 homeUser:v40 database:v36 metrics:v41];

    v125 = v42;
    id v43 = [(AMSDFetchMultiUserRecordZoneTask *)v42 performTask];
    id v137 = 0;
    id v44 = [v43 resultWithError:&v137];
    id v45 = v137;

    v126 = v36;
    if (!v44)
    {
      __int16 v55 = +[AMSLogConfig sharedAccountsMultiUserConfig];
      if (!v55)
      {
        __int16 v55 = +[AMSLogConfig sharedConfig];
      }
      uint64_t v56 = [v55 OSLogObject];
      if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      {
        uint64_t v57 = objc_opt_class();
        CFStringRef v58 = AMSLogKey();
        AMSHashIfNeeded();
        id v59 = (__CFString *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)long long buf = 138543874;
        uint64_t v140 = v57;
        __int16 v141 = 2114;
        v142 = v58;
        __int16 v143 = 2114;
        v144 = v59;
        _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to generate a multi-user token. We couldn't fetch the record zone. error = %{public}@", buf, 0x20u);
      }
      uint64_t v8 = v128;
      if (a2)
      {
        AMSError();
        *a2 = (id)objc_claimAutoreleasedReturnValue();
      }
      id v48 = [WeakRetained metrics];
      id v60 = [v48 enqueueGenerateMultiUserTokenFailedEventWithError:v45];
      a2 = 0;
      goto LABEL_86;
    }
    uint64_t v46 = [v44 identifier];
    uint64_t v47 = [v36 fetchRecordWithName:@"AMSHomeParticipant" zoneIdentifier:v46];
    id v136 = v45;
    id v48 = [v47 resultWithError:&v136];
    id v49 = v136;

    if (!v48)
    {
      __int16 v73 = a2;
      __int16 v74 = +[AMSLogConfig sharedAccountsMultiUserConfig];
      uint64_t v8 = v128;
      if (!v74)
      {
        __int16 v74 = +[AMSLogConfig sharedConfig];
      }
      __int16 v75 = [v74 OSLogObject];
      if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
      {
        uint64_t v76 = objc_opt_class();
        uint64_t v77 = AMSLogKey();
        AMSHashIfNeeded();
        uint64_t v78 = (__CFString *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)long long buf = 138543874;
        uint64_t v140 = v76;
        __int16 v141 = 2114;
        v142 = v77;
        __int16 v143 = 2114;
        v144 = v78;
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to generate a multi-user token. We couldn't fetch the home participant. error = %{public}@", buf, 0x20u);

        uint64_t v8 = v128;
      }

      if (v73)
      {
        AMSError();
        *__int16 v73 = (id)objc_claimAutoreleasedReturnValue();
      }
      uint64_t v54 = [WeakRetained metrics];
      id v79 = [v54 enqueueGenerateMultiUserTokenFailedEventWithError:v49];
      a2 = 0;
      goto LABEL_85;
    }
    id v50 = [WeakRetained metrics];
    id v51 = [v50 enqueueCloudKitFetchSuccessEvent];

    uint64_t v8 = v128;
    if (([WeakRetained tokenNeedsRegeneration] & 1) != 0
      || ![WeakRetained _shouldGenerateInviteToken])
    {
      uint64_t v54 = 0;
    }
    else
    {
      id v135 = 0;
      uint64_t v52 = [WeakRetained _shareRecord:v48 withError:&v135];
      id v53 = v135;
      uint64_t v54 = v53;
      if (!v52)
      {
        v124 = v44;
        unsigned __int8 v109 = a2;
        unsigned __int8 v110 = +[AMSLogConfig sharedAccountsMultiUserConfig];
        if (!v110)
        {
          unsigned __int8 v110 = +[AMSLogConfig sharedConfig];
        }
        uint64_t v111 = [v110 OSLogObject];
        if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
        {
          uint64_t v112 = objc_opt_class();
          AMSLogKey();
          v114 = unsigned __int8 v113 = v54;
          AMSHashIfNeeded();
          uint64_t v115 = (__CFString *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)long long buf = 138543874;
          uint64_t v140 = v112;
          __int16 v141 = 2114;
          v142 = v114;
          __int16 v143 = 2114;
          v144 = v115;
          _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to generate a multi-user token. We couldn't generate an invite token. error = %{public}@", buf, 0x20u);

          uint64_t v8 = v128;
          uint64_t v54 = v113;
        }

        if (v109) {
          void *v109 = v54;
        }
        id v61 = [WeakRetained metrics];
        id v116 = [v61 enqueueGenerateMultiUserTokenFailedEventWithError:v54];
        a2 = 0;
        id v44 = v124;
        goto LABEL_84;
      }

      uint64_t v54 = (void *)v52;
    }
    id v134 = v49;
    id v61 = [WeakRetained _generateMultiUserTokenWithAction:v132 iCloudAccount:v128 inviteToken:v54 error:&v134];
    id v62 = v134;

    uint64_t v63 = +[AMSLogConfig sharedAccountsMultiUserConfig];
    Swift::Int v64 = (void *)v63;
    v131 = a2;
    if (v61)
    {
      if (!v63)
      {
        Swift::Int v64 = +[AMSLogConfig sharedConfig];
      }
      id v65 = [v64 OSLogObject];
      v120 = v48;
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v66 = objc_opt_class();
        AMSLogKey();
        v68 = id v67 = v54;
        AMSHashIfNeeded();
        __int16 v69 = (__CFString *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)long long buf = 138543874;
        uint64_t v140 = v66;
        __int16 v141 = 2114;
        v142 = v68;
        __int16 v143 = 2114;
        v144 = v69;
        _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Successfully generated a multi-user token. Saving it. token = %{public}@", buf, 0x20u);

        uint64_t v8 = v128;
        uint64_t v54 = v67;
        id v48 = v120;
      }

      id v133 = v62;
      unsigned __int8 v70 = [WeakRetained _saveMultiUserToken:v61 forHomeParticipant:v48 iCloudAccount:v8 error:&v133];
      id v49 = v133;

      if (v70)
      {
        __int16 v71 = [WeakRetained metrics];
        id v72 = [v71 enqueueGenerateMultiUserTokenSuccessEvent];

        id v61 = v61;
        a2 = v61;
      }
      else
      {
        id v89 = v61;
        uint64_t v90 = +[AMSLogConfig sharedAccountsMultiUserConfig];
        if (!v90)
        {
          uint64_t v90 = +[AMSLogConfig sharedConfig];
        }
        unsigned __int8 v91 = [v90 OSLogObject];
        if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
        {
          uint64_t v92 = objc_opt_class();
          AMSLogKey();
          unsigned __int8 v93 = v122 = v54;
          AMSLogableError();
          char v94 = (__CFString *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)long long buf = 138543874;
          uint64_t v140 = v92;
          __int16 v141 = 2114;
          v142 = v93;
          __int16 v143 = 2114;
          v144 = v94;
          _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to save the multi-user token. error = %{public}@", buf, 0x20u);

          uint64_t v8 = v128;
          uint64_t v54 = v122;
        }

        if (v131)
        {
          AMSError();
          void *v131 = (id)objc_claimAutoreleasedReturnValue();
        }
        char v95 = [WeakRetained metrics];
        id v96 = [v95 enqueueGenerateMultiUserTokenFailedEventWithError:v49];

        a2 = 0;
        id v61 = v89;
        id v48 = v120;
      }
    }
    else
    {
      if (!v63)
      {
        Swift::Int v64 = +[AMSLogConfig sharedConfig];
      }
      uint64_t v80 = [v64 OSLogObject];
      if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
      {
        id v81 = v62;
        uint64_t v82 = objc_opt_class();
        AMSLogKey();
        long long v83 = v121 = v54;
        AMSLogableError();
        uint64_t v84 = (__CFString *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)long long buf = 138543874;
        uint64_t v140 = v82;
        id v62 = v81;
        __int16 v141 = 2114;
        v142 = v83;
        __int16 v143 = 2114;
        v144 = v84;
        _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to generate a multi-user token. error = %{public}@", buf, 0x20u);

        uint64_t v8 = v128;
        uint64_t v54 = v121;
      }

      id v129 = v62;
      uint64_t v85 = objc_msgSend(v62, "ams_underlyingErrorWithDomain:", @"com.apple.AppleIDAuthSupport");
      uint64_t v86 = [v85 userInfo];
      uint64_t v87 = [v86 objectForKeyedSubscript:@"Status"];

      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        id v88 = v87;
      }
      else {
        id v88 = 0;
      }

      uint64_t v97 = [v88 objectForKeyedSubscript:@"ec"];
      objc_opt_class();
      v119 = v88;
      if (objc_opt_isKindOfClass()) {
        id v98 = v97;
      }
      else {
        id v98 = 0;
      }

      if (v98 && [v98 integerValue] == (id)-26091)
      {
        uint64_t v99 = +[AMSLogConfig sharedAccountsMultiUserConfig];
        if (!v99)
        {
          uint64_t v99 = +[AMSLogConfig sharedConfig];
        }
        v123 = v54;
        uint64_t v100 = [v99 OSLogObject];
        if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
        {
          log = v100;
          uint64_t v101 = objc_opt_class();
          uint64_t v102 = AMSLogKey();
          *(_DWORD *)long long buf = 138543618;
          uint64_t v140 = v101;
          uint64_t v100 = log;
          __int16 v141 = 2114;
          v142 = v102;
          _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] The user isn't part of the home. Deleting the record zone.", buf, 0x16u);
        }
        char v103 = [v44 identifier];
        v138 = v103;
        unsigned __int8 v104 = +[NSArray arrayWithObjects:&v138 count:1];
        id v105 = [v126 deleteRecordZonesWithRecordZoneIdentifiers:v104];

        uint64_t v54 = v123;
      }
      uint64_t v106 = v98;
      id v49 = v129;
      if (v131)
      {
        AMSError();
        void *v131 = (id)objc_claimAutoreleasedReturnValue();
      }
      uint64_t v107 = [WeakRetained metrics];
      id v108 = [v107 enqueueGenerateMultiUserTokenFailedEventWithError:v129];

      a2 = 0;
    }
LABEL_84:

LABEL_85:
    id v45 = v49;
LABEL_86:

    goto LABEL_87;
  }
  id v28 = +[AMSLogConfig sharedAccountsMultiUserConfig];
  if (!v28)
  {
    id v28 = +[AMSLogConfig sharedConfig];
  }
  uint64_t v29 = [v28 OSLogObject];
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
  {
    uint64_t v30 = objc_opt_class();
    uint64_t v31 = AMSLogKey();
    *(_DWORD *)long long buf = 138543618;
    uint64_t v140 = v30;
    __int16 v141 = 2114;
    v142 = v31;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to generate a multi-user token. There's no active iCloud account.", buf, 0x16u);
  }
  if (a2)
  {
    AMSError();
    id v32 = (id)objc_claimAutoreleasedReturnValue();
    id v33 = a2;
    a2 = 0;
    *id v33 = v32;
  }
LABEL_87:

  return a2;
}

id sub_100033990(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend(v3, "ams_hasDomain:code:", @"AMSDCloudDataErrorDomain", 7)) {
    [*(id *)(a1 + 32) _saveRecord:*(void *)(a1 + 40) database:*(void *)(a1 + 48)];
  }
  else {
  id v4 = +[AMSPromise promiseWithError:v3];
  }

  return v4;
}

id sub_100033A14(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 conformsToProtocol:&OBJC_PROTOCOL___AMSDCloudDataShare]) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }

  if (v4)
  {
    id v5 = [v4 participants];
    id v6 = objc_msgSend(v5, "ams_firstObjectPassingTest:", &stru_100112C20);

    if (v6 && [v6 participantStatus] == (id)1)
    {
      uint64_t v7 = +[AMSLogConfig sharedAccountsMultiUserConfig];
      if (!v7)
      {
        uint64_t v7 = +[AMSLogConfig sharedConfig];
      }
      uint64_t v8 = [v7 OSLogObject];
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = objc_opt_class();
        id v10 = AMSLogKey();
        int v14 = 138543618;
        uint64_t v15 = v9;
        __int16 v16 = 2114;
        uint64_t v17 = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Removing the home owner as a share participant.", (uint8_t *)&v14, 0x16u);
      }
      [v4 removeParticipant:v6];
      uint64_t v11 = [*(id *)(a1 + 32) _saveRecord:v4 database:*(void *)(a1 + 40)];
    }
    else
    {
      uint64_t v11 = +[AMSPromise promiseWithResult:v4];
    }
  }
  else
  {
    id v6 = AMSCustomError();
    uint64_t v11 = +[AMSPromise promiseWithError:v6];
  }
  uint64_t v12 = (void *)v11;

  return v12;
}

BOOL sub_100033C40(id a1, AMSDCloudDataShareParticipant *a2)
{
  return [(AMSDCloudDataShareParticipant *)a2 participantRole] != (id)1;
}

id sub_100033C64(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 conformsToProtocol:&OBJC_PROTOCOL___AMSDCloudDataShare]) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }

  if (v4)
  {
    id v5 = [*(id *)(a1 + 32) controller];
    id v6 = [v5 homeManager];
    uint64_t v7 = [*(id *)(a1 + 32) controller];
    uint64_t v8 = [v7 cloudContainer];
    uint64_t v9 = [*(id *)(a1 + 32) home];
    id v10 = [v6 sendCloudShare:v4 inContainer:v8 toOwnerOfHome:v9];
  }
  else
  {
    id v5 = AMSCustomError();
    id v10 = +[AMSPromise promiseWithError:v5];
  }

  return v10;
}

AMSPromise *__cdecl sub_100033ED0(id a1, AMSAuthKitUpdateResult *a2)
{
  uint64_t v2 = [(AMSAuthKitUpdateResult *)a2 authenticationResults];
  id v3 = [v2 objectForKeyedSubscript:@"AKIDMSToken"];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }

  id v5 = [v4 objectForKeyedSubscript:@"com.apple.gs.itunes.mu.idmsws"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v6 = v5;
  }
  else {
    id v6 = 0;
  }

  if (v6)
  {
    uint64_t v7 = +[AMSPromise promiseWithResult:v6];
  }
  else
  {
    uint64_t v8 = AMSError();
    uint64_t v7 = +[AMSPromise promiseWithError:v8];
  }
  return (AMSPromise *)v7;
}

void sub_1000342BC(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  id v4 = [*(id *)(a1 + 32) metrics];
  id v5 = [v4 enqueueCloudKitSaveRecordFinishEventWithError:v6];
}

void sub_1000345FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000346F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100034714(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000347EC;
  uint64_t v8[3] = &unk_100112D00;
  v8[4] = WeakRetained;
  id v5 = objc_msgSend(v3, "ams_mapWithTransform:", v8);

  id v6 = +[AMSPromise promiseWithResult:v5];

  return v6;
}

AMSDHomeKitHome *sub_1000347EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [[AMSDHomeKitHome alloc] initWithHome:v3 dataSource:*(void *)(a1 + 32)];

  return v4;
}

id sub_100034930(uint64_t a1, void *a2)
{
  return [a2 setDelegate:*(void *)(a1 + 32)];
}

id sub_100034C7C(uint64_t a1, void *a2)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100034D88;
  v7[3] = &unk_100112D78;
  id v8 = *(id *)(a1 + 32);
  id v3 = objc_msgSend(a2, "ams_firstObjectPassingTest:", v7);
  if (v3)
  {
    id v4 = +[AMSPromise promiseWithResult:v3];
  }
  else
  {
    id v5 = AMSError();
    id v4 = +[AMSPromise promiseWithError:v5];
  }
  return v4;
}

id sub_100034D88(uint64_t a1, void *a2)
{
  id v3 = [a2 uniqueIdentifier];
  id v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

BOOL sub_1000350E4(id a1, HMAccessory *a2)
{
  return [(HMAccessory *)a2 isCurrentAccessory];
}

void sub_1000352D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1000352F4(id a1, AMSDCloudDataContainer *a2)
{
  return [(AMSDCloudDataContainer *)a2 identifier];
}

void sub_1000352FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (id)AMSSetLogKey();
  if (!v3)
  {
    id v8 = +[AMSLogConfig sharedAccountsDaemonConfig];
    if (!v8)
    {
      id v8 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v9 = [v8 OSLogObject];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
      uint64_t v15 = objc_opt_class();
      uint64_t v16 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138543618;
      *(void *)&uint8_t buf[4] = v15;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v16;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Successfully registered to receive CloudKit shares via HomeKit.", buf, 0x16u);
    }
    goto LABEL_14;
  }
  uint64_t v17 = 0;
  __int16 v18 = &v17;
  uint64_t v19 = 0x2020000000;
  id v5 = (void *)qword_1001302E8;
  uint64_t v20 = qword_1001302E8;
  if (!qword_1001302E8)
  {
    *(void *)long long buf = _NSConcreteStackBlock;
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = sub_100037768;
    unsigned int v22 = &unk_100112770;
    id v23 = &v17;
    id v6 = (void *)sub_1000375F4();
    uint64_t v7 = dlsym(v6, "HMErrorDomain");
    *(void *)(v23[1] + 24) = v7;
    qword_1001302E8 = *(void *)(v23[1] + 24);
    id v5 = (void *)v18[3];
  }
  _Block_object_dispose(&v17, 8);
  if (!v5) {
    sub_1000CB5C0();
  }
  if ((objc_msgSend(v3, "ams_hasDomain:code:", *v5, 1, v17) & 1) == 0)
  {
    id v8 = +[AMSLogConfig sharedAccountsDaemonConfig];
    if (!v8)
    {
      id v8 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v9 = [v8 OSLogObject];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      id v10 = objc_loadWeakRetained((id *)(a1 + 40));
      uint64_t v11 = objc_opt_class();
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = AMSLogableError();
      *(_DWORD *)long long buf = 138543874;
      *(void *)&uint8_t buf[4] = v11;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v12;
      *(_WORD *)&buf[22] = 2114;
      unsigned int v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to register to accept CloudKit shares. error = %{public}@", buf, 0x20u);
    }
LABEL_14:
  }
}

void sub_1000355BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_1000358B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)AMSMutablePromise);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100035988;
  v9[3] = &unk_100112E48;
  id v7 = v4;
  id v10 = v7;
  [v3 establishShareWithHomeOwner:v6 container:v5 completionHandler:v9];

  return v7;
}

void sub_100035988(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  uint64_t v6 = v5;
  id v7 = *(void **)(a1 + 32);
  if (v9)
  {
    [v7 finishWithResult:v9];
  }
  else if (v5)
  {
    [v7 finishWithError:v5];
  }
  else
  {
    id v8 = AMSError();
    [v7 finishWithError:v8];
  }
}

AMSPromise *__cdecl sub_100035A48(id a1, HMHomeCloudShareResponse *a2)
{
  uint64_t v2 = [(HMHomeCloudShareResponse *)a2 clientInfo];
  id v3 = [v2 accountAuthToken];

  if (!v3)
  {
    AMSError();
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v5 = +[AMSPromise promiseWithError:v4];
    goto LABEL_5;
  }
  id v4 = [objc_alloc((Class)NSString) initWithData:v3 encoding:4];
  if (v4)
  {
    uint64_t v5 = +[AMSPromise promiseWithResult:v4];
LABEL_5:
    uint64_t v6 = (void *)v5;
    goto LABEL_7;
  }
  id v7 = AMSError();
  uint64_t v6 = +[AMSPromise promiseWithError:v7];

LABEL_7:
  return (AMSPromise *)v6;
}

id sub_100035F84(uint64_t a1, void *a2)
{
  id v3 = [a2 uniqueIdentifier];
  id v4 = [*(id *)(a1 + 32) identifier];
  id v5 = [v3 isEqual:v4];

  return v5;
}

void sub_10003681C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = [v5 dataUsingEncoding:4];
    uint64_t v12 = 0;
    uint64_t v13 = &v12;
    uint64_t v14 = 0x2050000000;
    id v8 = (void *)qword_1001302F0;
    uint64_t v15 = qword_1001302F0;
    if (!qword_1001302F0)
    {
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_1000377B8;
      v11[3] = &unk_100112770;
      void v11[4] = &v12;
      sub_1000377B8((uint64_t)v11);
      id v8 = (void *)v13[3];
    }
    id v9 = v8;
    _Block_object_dispose(&v12, 8);
    id v10 = [[v9 alloc] initWithAccountAuthToken:v7];
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_100036974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100036D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100036DDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[AMSLogConfig sharedAccountsDaemonConfig];
  if (!v4)
  {
    id v4 = +[AMSLogConfig sharedConfig];
  }
  id v5 = [v4 OSLogObject];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v7 = objc_opt_class();
    id v8 = AMSLogKey();
    id v9 = AMSLogableError();
    int v10 = 138543874;
    uint64_t v11 = v7;
    __int16 v12 = 2114;
    uint64_t v13 = v8;
    __int16 v14 = 2114;
    uint64_t v15 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}@ [%{public}@] Failed to fetch the device's homes. error = %{public}@", (uint8_t *)&v10, 0x20u);
  }
  [*(id *)(a1 + 32) finishWithError:v3];
}

void sub_100036F30(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = [WeakRetained homeManager];
  id v4 = [v3 homes];

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100036FF0;
  v5[3] = &unk_100112F50;
  v5[4] = WeakRetained;
  [v4 enumerateObjectsUsingBlock:v5];
  [*(id *)(a1 + 32) finishWithResult:v4];
}

id sub_100036FF0(uint64_t a1, void *a2)
{
  return [a2 setDelegate:*(void *)(a1 + 32)];
}

id sub_1000374AC(uint64_t a1, void *a2)
{
  id v3 = [a2 keyPath];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

Class sub_10003759C(uint64_t a1)
{
  sub_1000375F4();
  Class result = objc_getClass("HMHomeManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1000CB60C();
  }
  qword_1001302D8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1000375F4()
{
  v3[0] = 0;
  if (!qword_1001302E0)
  {
    v3[1] = _NSConcreteStackBlock;
    v3[2] = 3221225472;
    v3[3] = sub_1000376F4;
    v3[4] = &unk_1001127A8;
    v3[5] = v3;
    long long v4 = off_100112FC0;
    uint64_t v5 = 0;
    qword_1001302E0 = _sl_dlopen();
  }
  uint64_t v0 = qword_1001302E0;
  uint64_t v1 = (void *)v3[0];
  if (!qword_1001302E0)
  {
    uint64_t v1 = (void *)abort_report_np();
    goto LABEL_7;
  }
  if (v3[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t sub_1000376F4()
{
  uint64_t result = _sl_dlopen();
  qword_1001302E0 = result;
  return result;
}

void *sub_100037768(uint64_t a1)
{
  uint64_t v2 = (void *)sub_1000375F4();
  uint64_t result = dlsym(v2, "HMErrorDomain");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001302E8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1000377B8(uint64_t a1)
{
  sub_1000375F4();
  Class result = objc_getClass("HMUserCloudShareClientInfo");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1000CB634();
  }
  qword_1001302F0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id sub_100037E08(id a1, HMUser *a2)
{
  uint64_t v2 = a2;
  id v3 = [[AMSDHomeKitHomeUser alloc] initWithUser:v2];

  return v3;
}

id sub_10003817C(uint64_t a1, void *a2)
{
  id v3 = [a2 uniqueIdentifier];
  long long v4 = [*(id *)(a1 + 32) identifier];
  id v5 = [v3 isEqual:v4];

  return v5;
}

id sub_1000382C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (a2) {
    return [v2 finishWithError:a2];
  }
  else {
    return [v2 finishWithSuccess];
  }
}

id sub_1000383A8(uint64_t a1, void *a2)
{
  id v3 = [a2 identifier];
  id v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

id sub_100038558(uint64_t a1, void *a2)
{
  id v3 = [a2 uniqueIdentifier];
  id v4 = [*(id *)(a1 + 32) identifier];
  id v5 = [v3 isEqual:v4];

  return v5;
}

id sub_100038F24(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) homeForRecord:a2];
}

id sub_1000390C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) homeIdentifierForRecord:v3];
  if (v4)
  {
    id v5 = +[AMSPromise promiseWithResult:v4];
  }
  else
  {
    id v6 = [v3 hashedDescription];
    uint64_t v7 = AMSErrorWithFormat();
    id v5 = +[AMSPromise promiseWithError:](AMSPromise, "promiseWithError:", v7, v6);
  }
  return v5;
}

id sub_100039334(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) homeUserIdentifierForRecord:v3];
  if (v4)
  {
    id v5 = +[AMSPromise promiseWithResult:v4];
  }
  else
  {
    id v6 = [v3 hashedDescription];
    uint64_t v7 = AMSErrorWithFormat();
    id v5 = +[AMSPromise promiseWithError:](AMSPromise, "promiseWithError:", v7, v6);
  }
  return v5;
}

id sub_10003962C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) identifiersForRecord:v3];
  if (v4)
  {
    id v5 = +[AMSPromise promiseWithResult:v4];
  }
  else
  {
    id v6 = [v3 hashedDescription];
    uint64_t v7 = AMSErrorWithFormat();
    id v5 = +[AMSPromise promiseWithError:](AMSPromise, "promiseWithError:", v7, v6);
  }
  return v5;
}

AMSPromise *__cdecl sub_100039A3C(id a1, NSArray *a2)
{
  return +[AMSPromise promiseWithResult:a2];
}

id sub_100039B1C(uint64_t a1, void *a2)
{
  id v9 = _NSConcreteStackBlock;
  uint64_t v10 = 3221225472;
  uint64_t v11 = sub_100039C5C;
  __int16 v12 = &unk_100113080;
  id v13 = *(id *)(a1 + 32);
  id v4 = objc_msgSend(a2, "ams_firstObjectPassingTest:", &v9);
  if (v4)
  {
    id v5 = +[AMSPromise promiseWithResult:v4];
  }
  else
  {
    id v6 = +[NSString stringWithFormat:@"There's no home with the specified home identifier. homeIdentifier = %@", *(void *)(a1 + 32), v9, v10, v11, v12];
    uint64_t v7 = AMSError();
    id v5 = +[AMSPromise promiseWithError:v7];
  }
  return v5;
}

id sub_100039C5C(uint64_t a1, void *a2)
{
  id v3 = [a2 identifier];
  id v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

void sub_10003A238(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

BOOL sub_10003A254(uint64_t a1, void *a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = +[ACAccountStore ams_sharedAccountStore];
  id v5 = objc_msgSend(v4, "ams_activeiCloudAccount");

  id v6 = +[AMSLogConfig sharedAccountsMultiUserConfig];
  if (!v6)
  {
    id v6 = +[AMSLogConfig sharedConfig];
  }
  uint64_t v7 = [v6 OSLogObject];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = objc_opt_class();
    id v9 = AMSLogKey();
    AMSHashIfNeeded();
    v11 = uint64_t v10 = a2;
    __int16 v12 = [WeakRetained homeIdentifier];
    id v13 = AMSHashIfNeeded();
    *(_DWORD *)long long buf = 138544130;
    uint64_t v45 = v8;
    __int16 v46 = 2114;
    uint64_t v47 = v9;
    __int16 v48 = 2114;
    id v49 = v11;
    __int16 v50 = 2114;
    id v51 = v13;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Leaving a home. iCloudAccount = %{public}@ | homeIdentiifer = %{public}@", buf, 0x2Au);

    a2 = v10;
  }

  if (v5)
  {
    __int16 v14 = [WeakRetained _generateAppProvidedData];
    uint64_t v15 = +[AMSAuthenticateOptions amsd_multiUserAuthenticateOptionsWithAppProvidedData:v14];

    id v16 = [objc_alloc((Class)AMSAuthKitUpdateTask) initWithAccount:v5 options:v15];
    [v16 setRunMode:1];
    uint64_t v17 = [v16 performAuthKitUpdate];
    id v43 = 0;
    __int16 v18 = [v17 resultWithError:&v43];
    id v42 = v43;

    uint64_t v19 = +[ACAccountStore ams_sharedAccountStore];
    uint64_t v20 = objc_msgSend(v19, "ams_iTunesAccountForAccount:", v5);

    if (!v20 || ([v20 isActive] & 1) == 0) {
      objc_msgSend(v5, "ams_setInUse:", 0);
    }
    BOOL v21 = v18 != 0;
    uint64_t v22 = +[AMSLogConfig sharedAccountsMultiUserConfig];
    id v23 = (void *)v22;
    if (v18)
    {
      if (!v22)
      {
        id v23 = +[AMSLogConfig sharedConfig];
      }
      __int16 v24 = [v23 OSLogObject];
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v25 = objc_opt_class();
        AMSLogKey();
        id v40 = WeakRetained;
        v27 = uint64_t v26 = v15;
        *(_DWORD *)long long buf = 138543618;
        uint64_t v45 = v25;
        __int16 v46 = 2114;
        uint64_t v47 = v27;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Successfully left the home.", buf, 0x16u);

        uint64_t v15 = v26;
        id WeakRetained = v40;
      }

      id v28 = v42;
    }
    else
    {
      if (!v22)
      {
        id v23 = +[AMSLogConfig sharedConfig];
      }
      id v33 = [v23 OSLogObject];
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        id v41 = WeakRetained;
        id v34 = v15;
        uint64_t v35 = objc_opt_class();
        uint64_t v36 = AMSLogKey();
        AMSHashIfNeeded();
        CFStringRef v37 = v39 = a2;
        *(_DWORD *)long long buf = 138543874;
        uint64_t v45 = v35;
        uint64_t v15 = v34;
        id WeakRetained = v41;
        __int16 v46 = 2114;
        uint64_t v47 = v36;
        __int16 v48 = 2114;
        id v49 = v37;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to leave the home. error = %{public}@", buf, 0x20u);

        a2 = v39;
        BOOL v21 = v18 != 0;
      }

      id v28 = v42;
      if (a2) {
        *a2 = v42;
      }
    }
  }
  else
  {
    uint64_t v29 = +[AMSLogConfig sharedAccountsMultiUserConfig];
    if (!v29)
    {
      uint64_t v29 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v30 = [v29 OSLogObject];
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      uint64_t v31 = objc_opt_class();
      id v32 = AMSLogKey();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v45 = v31;
      __int16 v46 = 2114;
      uint64_t v47 = v32;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to leave the home. There's no active iCloud account.", buf, 0x16u);
    }
    if (a2)
    {
      AMSError();
      BOOL v21 = 0;
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      BOOL v21 = 0;
    }
  }

  return v21;
}

void sub_10003A998(uint64_t a1)
{
  uint64_t v2 = [[AMSDBackgroundActivityScheduler alloc] initWithIdentifier:@"com.apple.amsaccountsd.refresh"];
  id v3 = [*(id *)(a1 + 32) _scheduledRefreshActivityBlock];
  [(AMSDBackgroundActivityScheduler *)v2 setActivityBlock:v3];

  [(AMSDBackgroundActivityScheduler *)v2 checkIn];
  id v4 = objc_alloc_init(AMSDCloudKitDataSource);
  id v5 = [[AMSDCloudDataManager alloc] initWithDataSource:v4];
  id v6 = objc_alloc_init(AMSDHomeKitDataSource);
  uint64_t v7 = [[AMSDHomeManager alloc] initWithDataSource:v6];
  id v8 = [objc_alloc(*(Class *)(a1 + 32)) initWithCloudDataManager:v5 homeManager:v7];
  [(AMSDCloudKitDataSource *)v4 setDelegate:v8];
  [(AMSDHomeKitDataSource *)v6 setDelegate:v8];

  id v9 = (void *)qword_100130300;
  qword_100130300 = (uint64_t)v8;
}

id sub_10003ADCC(uint64_t a1, void *a2)
{
  id v3 = [a2 identifier];
  id v4 = [*(id *)(a1 + 32) identifier];
  id v5 = [v3 isEqual:v4];

  return v5;
}

void sub_10003B1B4(id a1)
{
  id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.amsaccountsd.AMSDMultiUserController.refresh", v3);
  uint64_t v2 = (void *)qword_100130310;
  qword_100130310 = (uint64_t)v1;
}

void sub_10003B218(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _isRefreshThrottlingDisabledWithOptions:*(void *)(a1 + 40)];
  id v3 = [v2 promiseAdapter];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10003B38C;
  v15[3] = &unk_1001130F0;
  v15[4] = *(void *)(a1 + 32);
  id v4 = [v3 thenWithBlock:v15];

  id v8 = _NSConcreteStackBlock;
  uint64_t v9 = 3221225472;
  uint64_t v10 = sub_10003B3DC;
  uint64_t v11 = &unk_100113118;
  id v5 = *(void **)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 32);
  id v13 = v5;
  id v14 = *(id *)(a1 + 48);
  id v6 = [v4 thenWithBlock:&v8];
  uint64_t v7 = objc_msgSend(v6, "promiseWithTimeout:", 300.0, v8, v9, v10, v11, v12);

  [v7 waitUntilFinished];
  [*(id *)(a1 + 56) finishWithPromise:v7];
}

id sub_10003B38C(uint64_t a1)
{
  dispatch_queue_t v1 = [*(id *)(a1 + 32) homeManager];
  uint64_t v2 = [v1 allHomes];

  return v2;
}

id sub_10003B3DC(uint64_t a1, void *a2)
{
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_10003B6CC;
  v19[3] = &unk_100113080;
  void v19[4] = *(void *)(a1 + 32);
  id v3 = objc_msgSend(a2, "ams_filterUsingTest:", v19);
  id v4 = [*(id *)(a1 + 40) copy];
  if (([v4 shouldUseCloudData] & 1) == 0)
  {
    objc_msgSend(v4, "setShouldUseCloudData:", objc_msgSend(*(id *)(a1 + 32), "_refreshShouldUseCloudDataWithHomes:", v3));
    if ([v4 shouldUseCloudData])
    {
      id v5 = +[AMSLogConfig sharedAccountsMultiUserConfig];
      if (!v5)
      {
        id v5 = +[AMSLogConfig sharedConfig];
      }
      id v6 = [v5 OSLogObject];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = objc_opt_class();
        id v8 = AMSLogKey();
        *(_DWORD *)long long buf = 138543618;
        uint64_t v21 = v7;
        __int16 v22 = 2114;
        id v23 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Overriding shouldUseCloudData with true.", buf, 0x16u);
      }
    }
  }
  uint64_t v9 = [*(id *)(a1 + 32) _isCloudDataAvailable];
  unsigned __int8 v10 = [v9 resultWithError:0];

  if ([v4 shouldUseCloudData] && (v10 & 1) == 0)
  {
    [v4 setShouldUseCloudData:0];
    uint64_t v11 = +[AMSLogConfig sharedAccountsMultiUserConfig];
    if (!v11)
    {
      uint64_t v11 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v12 = [v11 OSLogObject];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = objc_opt_class();
      id v14 = AMSLogKey();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v21 = v13;
      __int16 v22 = 2114;
      id v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Overriding shouldUseCloudData with false. isCloudDataAvailable = false", buf, 0x16u);
    }
  }
  uint64_t v15 = [[AMSDRefreshMultiUserTask alloc] initWithMultiUserController:*(void *)(a1 + 32) homes:v3 options:v4];
  id v16 = v15;
  if (*(void *)(a1 + 48)) {
    -[AMSDRefreshMultiUserTask setMetrics:](v15, "setMetrics:");
  }
  uint64_t v17 = [(AMSDRefreshMultiUserTask *)v16 performTask];

  return v17;
}

uint64_t sub_10003B6CC(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (([v2 isMultiUserEnabled] & 1) == 0)
  {
    id v3 = +[AMSLogConfig sharedAccountsMultiUserConfig];
    if (!v3)
    {
      id v3 = +[AMSLogConfig sharedConfig];
    }
    id v4 = [v3 OSLogObject];
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    uint64_t v11 = objc_opt_class();
    id v6 = AMSLogKey();
    uint64_t v7 = AMSHashIfNeeded();
    int v15 = 138543874;
    uint64_t v16 = v11;
    __int16 v17 = 2114;
    __int16 v18 = v6;
    __int16 v19 = 2114;
    uint64_t v20 = v7;
    id v8 = "%{public}@: [%{public}@] Skipping a home. Multi-User isn't enabled. home = %{public}@";
LABEL_18:
    uint64_t v9 = v4;
    os_log_type_t v10 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_19;
  }
  if (+[AMSDMultiUserController deviceSupportsMultipleUsers](AMSDMultiUserController, "deviceSupportsMultipleUsers")&& ([v2 isCurrentDeviceAccessory] & 1) == 0)
  {
    id v3 = +[AMSLogConfig sharedAccountsMultiUserConfig];
    if (!v3)
    {
      id v3 = +[AMSLogConfig sharedConfig];
    }
    id v4 = [v3 OSLogObject];
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    uint64_t v13 = objc_opt_class();
    id v6 = AMSLogKey();
    uint64_t v7 = AMSHashIfNeeded();
    int v15 = 138543874;
    uint64_t v16 = v13;
    __int16 v17 = 2114;
    __int16 v18 = v6;
    __int16 v19 = 2114;
    uint64_t v20 = v7;
    id v8 = "%{public}@: [%{public}@] Skipping a home. The current device isn't an accessory of it. home = %{public}@";
    goto LABEL_18;
  }
  if ([v2 isCurrentUserRestrictedGuest])
  {
    id v3 = +[AMSLogConfig sharedAccountsMultiUserConfig];
    if (!v3)
    {
      id v3 = +[AMSLogConfig sharedConfig];
    }
    id v4 = [v3 OSLogObject];
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      goto LABEL_20;
    }
    uint64_t v5 = objc_opt_class();
    id v6 = AMSLogKey();
    uint64_t v7 = AMSHashIfNeeded();
    int v15 = 138543874;
    uint64_t v16 = v5;
    __int16 v17 = 2114;
    __int16 v18 = v6;
    __int16 v19 = 2114;
    uint64_t v20 = v7;
    id v8 = "%{public}@: [%{public}@] Current user is Restricted Guest in home, not updating multi-user token for home = %{public}@";
    uint64_t v9 = v4;
    os_log_type_t v10 = OS_LOG_TYPE_ERROR;
LABEL_19:
    _os_log_impl((void *)&_mh_execute_header, v9, v10, v8, (uint8_t *)&v15, 0x20u);

LABEL_20:
    uint64_t v12 = 0;
    goto LABEL_21;
  }
  uint64_t v12 = 1;
LABEL_21:

  return v12;
}

id sub_10003B994(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = +[AMSLogConfig sharedAccountsMultiUserConfig];
  id v8 = (void *)v7;
  if (v5)
  {
    if (!v7)
    {
      id v8 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v9 = [v8 OSLogObject];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = objc_opt_class();
      uint64_t v11 = AMSLogKey();
      uint64_t v12 = AMSHashIfNeeded();
      *(_DWORD *)id v40 = 138543874;
      *(void *)&v40[4] = v10;
      *(_WORD *)&v40[12] = 2114;
      *(void *)&v40[14] = v11;
      *(_WORD *)&v40[22] = 2114;
      id v41 = v12;
      uint64_t v13 = "%{public}@: [%{public}@] The refresh finished. result = %{public}@";
      id v14 = v9;
      os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v14, v15, v13, v40, 0x20u);
    }
  }
  else
  {
    if (!v7)
    {
      id v8 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v9 = [v8 OSLogObject];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = objc_opt_class();
      uint64_t v11 = AMSLogKey();
      uint64_t v12 = AMSHashIfNeeded();
      *(_DWORD *)id v40 = 138543874;
      *(void *)&v40[4] = v16;
      *(_WORD *)&v40[12] = 2114;
      *(void *)&v40[14] = v11;
      *(_WORD *)&v40[22] = 2114;
      id v41 = v12;
      uint64_t v13 = "%{public}@: [%{public}@] The refresh failed. error = %{public}@";
      id v14 = v9;
      os_log_type_t v15 = OS_LOG_TYPE_ERROR;
      goto LABEL_10;
    }
  }

  if (v6
    || ([v5 errors],
        __int16 v17 = objc_claimAutoreleasedReturnValue(),
        id v18 = [v17 count],
        v17,
        v18))
  {
    __int16 v19 = objc_msgSend(v5, "errors", *(_OWORD *)v40, *(void *)&v40[16], v41);
    objc_msgSend(v19, "ams_firstObjectPassingTest:", &stru_100113138);
    uint64_t v20 = (AMSDBackgroundActivityScheduler *)objc_claimAutoreleasedReturnValue();

    uint64_t v21 = [(AMSDBackgroundActivityScheduler *)v20 userInfo];
    __int16 v22 = [v21 objectForKeyedSubscript:@"AMSDCloudDataRetryAfterKey"];

    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v23 = v22;
    }
    else {
      id v23 = 0;
    }

    [v23 doubleValue];
    double v25 = v24;

    if (v25 == 0.0) {
      double v25 = 86400.0;
    }
    uint64_t v26 = [[AMSDRefreshMultiUserOptions alloc] initWithReason:@"A previous refresh failed."];
    [(AMSDRefreshMultiUserOptions *)v26 setSchedulingInterval:v25];
    id v27 = [v5 errors];
    unsigned int v29 = sub_1000219BC(v27, v28);

    if (v29)
    {
      uint64_t v30 = +[AMSLogConfig sharedAccountsMultiUserConfig];
      if (!v30)
      {
        uint64_t v30 = +[AMSLogConfig sharedConfig];
      }
      uint64_t v31 = [v30 OSLogObject];
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        uint64_t v32 = objc_opt_class();
        id v33 = AMSLogKey();
        *(_DWORD *)id v40 = 138543618;
        *(void *)&v40[4] = v32;
        *(_WORD *)&v40[12] = 2114;
        *(void *)&v40[14] = v33;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] The refresh encountered a fatal cloud data error.", v40, 0x16u);
      }
      +[AMSStorage _setValue:0 forKey:@"AMSDLastMultiUserRefresh"];
    }
    id v34 = [*(id *)(a1 + 32) refreshWithOptions:v26];

    goto LABEL_25;
  }
  CFStringRef v37 = *(void **)(a1 + 32);
  long long v38 = [v5 homes];
  [v37 _setLastSuccessfulRefreshDateWithHomes:v38];

  id v39 = [v5 options];
  LODWORD(v3_Block_object_dispose(&a9, 8) = [v39 shouldUseCloudData];

  if (v38)
  {
    uint64_t v20 = [[AMSDBackgroundActivityScheduler alloc] initWithIdentifier:@"com.apple.amsaccountsd.refresh"];
    [(AMSDBackgroundActivityScheduler *)v20 invalidate];
LABEL_25:
  }
  if (v5) {
    +[AMSPromise promiseWithResult:v5];
  }
  else {
  uint64_t v35 = +[AMSPromise promiseWithError:v6];
  }

  return v35;
}

BOOL sub_10003BE1C(id a1, NSError *a2)
{
  return [(NSError *)a2 ams_hasDomain:@"AMSDCloudDataErrorDomain" code:6];
}

void sub_10003C0A8(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = +[AMSLogConfig sharedAccountsMultiUserConfig];
  if (!v3)
  {
    id v3 = +[AMSLogConfig sharedConfig];
  }
  id v4 = [v3 OSLogObject];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = objc_opt_class();
    id v6 = AMSLogKey();
    uint64_t v7 = AMSHashIfNeeded();
    int v8 = 138543874;
    uint64_t v9 = v5;
    __int16 v10 = 2114;
    uint64_t v11 = v6;
    __int16 v12 = 2114;
    uint64_t v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to fetch a cloud container's status. error = %{public}@", (uint8_t *)&v8, 0x20u);
  }
}

void sub_10003C1DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) previousCloudContainerStatus];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10003C298;
  v7[3] = &unk_100113188;
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = v5;
  id v8 = v3;
  id v6 = v3;
  [v4 readWrite:v7];
}

id sub_10003C298(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  if (!v3 || !v4) {
    goto LABEL_9;
  }
  if (([v4 isEqual:v3] & 1) == 0)
  {
    id v4 = *(void **)(a1 + 32);
LABEL_9:
    uint64_t v5 = +[NSString stringWithFormat:@"Cloud data manager changed. changeType = %lu | previousCloudContainerStatus = %@ | cloudContainerStatus = %@", *(void *)(a1 + 48), v3, v4];
    id v6 = [[AMSDRefreshMultiUserOptions alloc] initWithReason:v5];
    [(AMSDRefreshMultiUserOptions *)v6 setShouldUseCloudData:1];
    id v12 = [*(id *)(a1 + 40) refreshWithOptions:v6];
    goto LABEL_10;
  }
  uint64_t v5 = +[AMSLogConfig sharedAccountsMultiUserConfig];
  if (!v5)
  {
    uint64_t v5 = +[AMSLogConfig sharedConfig];
  }
  id v6 = [v5 OSLogObject];
  if (os_log_type_enabled(&v6->super, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = objc_opt_class();
    id v8 = AMSLogKey();
    uint64_t v9 = *(void *)(a1 + 48);
    id v10 = [v3 unsignedLongValue];
    id v11 = [*(id *)(a1 + 32) unsignedLongValue];
    *(_DWORD *)long long buf = 138544386;
    uint64_t v16 = v7;
    __int16 v17 = 2114;
    id v18 = v8;
    __int16 v19 = 2048;
    uint64_t v20 = v9;
    __int16 v21 = 2048;
    id v22 = v10;
    __int16 v23 = 2048;
    id v24 = v11;
    _os_log_impl((void *)&_mh_execute_header, &v6->super, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Ignoring a cloud data manager change. changeType = %lu | previousCloudContainerStatus = %lu | cloudContainerStatus = %lu", buf, 0x34u);
  }
LABEL_10:

  id v13 = *(id *)(a1 + 32);
  return v13;
}

void sub_10003CA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10003CA28(id a1)
{
  qword_100130328 = +[NSMutableArray array];
  _objc_release_x1();
}

void sub_10003CA68(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[AMSLogConfig sharedAccountsMultiUserConfig];
  if (!v4)
  {
    id v4 = +[AMSLogConfig sharedConfig];
  }
  uint64_t v5 = [v4 OSLogObject];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = objc_opt_class();
    uint64_t v7 = AMSLogKey();
    id v8 = AMSHashIfNeeded();
    *(_DWORD *)long long buf = 138543874;
    uint64_t v18 = v6;
    __int16 v19 = 2114;
    uint64_t v20 = v7;
    __int16 v21 = 2114;
    id v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Beginning queued cloud data repair request. home = %{public}@", buf, 0x20u);
  }
  uint64_t v9 = [v3 performTask];

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10003CC3C;
  _OWORD v13[3] = &unk_1001131F8;
  id v10 = *(void **)(a1 + 40);
  void v13[4] = *(void *)(a1 + 32);
  id v14 = v10;
  id v11 = *(id *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  id v15 = v11;
  uint64_t v16 = v12;
  [v9 resultWithCompletion:v13];
}

void sub_10003CC3C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = +[AMSLogConfig sharedAccountsMultiUserConfig];
    if (!v7)
    {
      uint64_t v7 = +[AMSLogConfig sharedConfig];
    }
    id v8 = [v7 OSLogObject];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = objc_opt_class();
      id v10 = AMSLogKey();
      id v11 = AMSHashIfNeeded();
      uint64_t v12 = AMSHashIfNeeded();
      int v16 = 138544130;
      uint64_t v17 = v9;
      __int16 v18 = 2114;
      __int16 v19 = v10;
      __int16 v20 = 2114;
      __int16 v21 = v11;
      __int16 v22 = 2114;
      __int16 v23 = v12;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Repair request failed with error. home = %{public}@ error = %{public}@", (uint8_t *)&v16, 0x2Au);
    }
  }
  os_unfair_lock_lock_with_options();
  [*(id *)(a1 + 48) removeObjectAtIndex:0];
  if ([*(id *)(a1 + 48) count])
  {
    id v13 = [*(id *)(a1 + 48) objectAtIndexedSubscript:0];
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_100130318);
    (*(void (**)(void))(*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) + 16))();
  }
  else
  {
    uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8);
    id v15 = *(void **)(v14 + 40);
    *(void *)(v14 + 40) = 0;

    os_unfair_lock_unlock((os_unfair_lock_t)&unk_100130318);
  }
}

uint64_t sub_10003D01C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_10003D180(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = [*(id *)(a1 + 32) previousCloudContainerStatus];
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    _OWORD v23[2] = sub_10003D4CC;
    v23[3] = &unk_100113248;
    id v8 = v5;
    id v24 = v8;
    [v7 readWrite:v23];

    id v9 = [v8 unsignedIntegerValue];
    if (v9 == (id)1)
    {
      id v10 = +[AMSLogConfig sharedAccountsMultiUserConfig];
      if (!v10)
      {
        id v10 = +[AMSLogConfig sharedConfig];
      }
      id v11 = [v10 OSLogObject];
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = objc_opt_class();
        id v13 = AMSLogKey();
        *(_DWORD *)long long buf = 138543874;
        uint64_t v26 = v12;
        __int16 v27 = 2114;
        id v28 = v13;
        __int16 v29 = 2048;
        uint64_t v30 = 1;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Cloud data is available. status = %ld", buf, 0x20u);
      }
      uint64_t v14 = +[AMSPromise promiseWithResult:&__kCFBooleanTrue];
      goto LABEL_14;
    }
  }
  else
  {
    id v9 = 0;
  }
  id v15 = +[AMSLogConfig sharedAccountsMultiUserConfig];
  if (!v15)
  {
    id v15 = +[AMSLogConfig sharedConfig];
  }
  int v16 = [v15 OSLogObject];
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    uint64_t v17 = objc_opt_class();
    __int16 v18 = AMSLogKey();
    __int16 v19 = AMSHashIfNeeded();
    *(_DWORD *)long long buf = 138544130;
    uint64_t v26 = v17;
    __int16 v27 = 2114;
    id v28 = v18;
    __int16 v29 = 2048;
    uint64_t v30 = (uint64_t)v9;
    __int16 v31 = 2114;
    uint64_t v32 = v19;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Cloud data is unavailable. status = %ld | error = %{public}@", buf, 0x2Au);
  }
  __int16 v20 = +[NSString stringWithFormat:@"Cloud data is unavailable. status = %ld", v9];
  __int16 v21 = AMSCustomError();
  uint64_t v14 = +[AMSPromise promiseWithError:v21];

LABEL_14:
  return v14;
}

id sub_10003D4CC(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_10003D894(id a1, AMSDHome *a2)
{
  id v2 = [(AMSDHome *)a2 identifier];
  id v3 = [v2 UUIDString];

  return v3;
}

id sub_10003DA58(id a1, AMSDHome *a2)
{
  id v2 = [(AMSDHome *)a2 identifier];
  id v3 = [v2 UUIDString];

  return v3;
}

void sub_10003DB5C(id a1, id a2)
{
  id v2 = a2;
  id v3 = (id)AMSSetLogKey();
  id v4 = +[AMSLogConfig sharedAccountsMultiUserConfig];
  if (!v4)
  {
    id v4 = +[AMSLogConfig sharedConfig];
  }
  id v5 = [v4 OSLogObject];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = AMSLogKey();
    *(_DWORD *)long long buf = 138543362;
    uint64_t v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "AMSDMultiUserController: [%{public}@] Scheduled refresh fired.", buf, 0xCu);
  }
  uint64_t v7 = [[AMSDRefreshMultiUserOptions alloc] initWithReason:@"Scheduled Refresh"];
  [(AMSDRefreshMultiUserOptions *)v7 setIgnoreThrottling:1];
  [(AMSDRefreshMultiUserOptions *)v7 setShouldUseCloudData:0];
  id v8 = +[AMSDMultiUserController sharedController];
  id v9 = [v8 refreshWithOptions:v7];

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10003DD24;
  v11[3] = &unk_100113338;
  id v12 = v2;
  id v10 = v2;
  [v9 addFinishBlock:v11];
}

uint64_t sub_10003DD24(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10003E0B0(uint64_t a1)
{
  id v2 = (id)AMSSetLogKey();
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v3();
}

void sub_10003E2A4()
{
  uint64_t v0 = +[AMSLogConfig sharedAccountsConfig];
  if (!v0)
  {
    uint64_t v0 = +[AMSLogConfig sharedConfig];
  }
  dispatch_queue_t v1 = [v0 OSLogObject];
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v2 = objc_opt_class();
    id v3 = AMSLogKey();
    int v4 = 138543618;
    uint64_t v5 = v2;
    __int16 v6 = 2114;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "%{public}@: [%{public}@] Flushing Multi-User Metrics", (uint8_t *)&v4, 0x16u);
  }
}

void sub_10003F3F8(id a1)
{
  dispatch_queue_t v1 = (void *)qword_100130338;
  qword_100130338 = @"Accounts";
}

void sub_10003F464(id a1)
{
  dispatch_queue_t v1 = (void *)qword_100130348;
  qword_100130348 = @"1";
}

void sub_10003FC00(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    [*(id *)(a1 + 32) finishWithError:a3];
  }
  else if ([*(id *)(a1 + 40) _isTopicDefined:v5])
  {
    __int16 v6 = +[AMSLogConfig sharedAccountsConfig];
    if (!v6)
    {
      __int16 v6 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v7 = [v6 OSLogObject];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = objc_opt_class();
      id v9 = AMSLogKey();
      uint64_t v10 = *(void *)(a1 + 48);
      *(_DWORD *)long long buf = 138544130;
      uint64_t v21 = v8;
      __int16 v22 = 2114;
      __int16 v23 = v9;
      __int16 v24 = 2114;
      id v25 = v5;
      __int16 v26 = 2114;
      uint64_t v27 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%{public}@: [%{public}@] Queue Metrics Event for topic = %{public}@ | userId namespace %{public}@", buf, 0x2Au);
    }
    id v11 = [*(id *)(a1 + 40) _userIdForBagNamespace:*(void *)(a1 + 48)];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_10003FE38;
    v16[3] = &unk_1001133C8;
    int8x16_t v15 = *(int8x16_t *)(a1 + 32);
    id v12 = (id)v15.i64[0];
    int8x16_t v17 = vextq_s8(v15, v15, 8uLL);
    id v18 = *(id *)(a1 + 56);
    id v19 = v5;
    [v11 resultWithCompletion:v16];
  }
  else
  {
    id v13 = *(void **)(a1 + 32);
    uint64_t v14 = AMSError();
    [v13 finishWithError:v14];
  }
}

void sub_10003FE38(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  __int16 v6 = v5;
  if (!a2 || v5)
  {
    uint64_t v14 = +[AMSLogConfig sharedAccountsConfig];
    if (!v14)
    {
      uint64_t v14 = +[AMSLogConfig sharedConfig];
    }
    int8x16_t v15 = [v14 OSLogObject];
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = objc_opt_class();
      int8x16_t v17 = AMSLogKey();
      id v18 = AMSLogableError();
      int v21 = 138543874;
      uint64_t v22 = v16;
      __int16 v23 = 2114;
      __int16 v24 = v17;
      __int16 v25 = 2114;
      __int16 v26 = v18;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to create metrics event due to an error while fetching userId. error = %{public}@", (uint8_t *)&v21, 0x20u);
    }
    id v19 = *(void **)(a1 + 40);
    __int16 v20 = AMSError();
    [v19 finishWithError:v20];
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 48), "ams_setNullableObject:forKey:", a2, @"userId");
    uint64_t v7 = *(void **)(a1 + 48);
    uint64_t v8 = [*(id *)(a1 + 32) _eventTime];
    objc_msgSend(v7, "ams_setNullableObject:forKey:", v8, @"eventTime");

    uint64_t v10 = *(void **)(a1 + 32);
    id v9 = *(void **)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 56);
    id v12 = [*(id *)(a1 + 48) copy];
    id v13 = [v10 _enqueueEventWithTopic:v11 properties:v12];
    [v9 finishWithPromise:v13];
  }
}

void sub_100040488(id a1)
{
  dispatch_queue_t v1 = [AMSDMultiUserService alloc];
  id v4 = +[AMSDMultiUserController sharedController];
  uint64_t v2 = [(AMSDMultiUserService *)v1 initWithMultiUserController:v4];
  id v3 = (void *)qword_100130358;
  qword_100130358 = (uint64_t)v2;
}

id sub_100040A18(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    if ([v5 isCurrentUserRestrictedGuest])
    {
      AMSError();
      uint64_t v7 = (AMSDFetchMultiUserRecordZoneTask *)objc_claimAutoreleasedReturnValue();
      uint64_t v8 = +[AMSLogConfig sharedAccountsMultiUserConfig];
      if (!v8)
      {
        uint64_t v8 = +[AMSLogConfig sharedConfig];
      }
      id v9 = [v8 OSLogObject];
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = objc_opt_class();
        uint64_t v11 = AMSLogKey();
        *(_DWORD *)long long buf = 138543874;
        uint64_t v31 = v10;
        __int16 v32 = 2114;
        id v33 = v11;
        __int16 v34 = 2114;
        uint64_t v35 = v7;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Restricted Guest Error: %{public}@", buf, 0x20u);
      }
      id v12 = +[AMSPromise promiseWithError:v7];
    }
    else
    {
      id v18 = [*(id *)(a1 + 40) cloudContainer];
      id v19 = [v18 privateDatabase];

      __int16 v20 = [AMSDFetchMultiUserRecordZoneTask alloc];
      int v21 = [v5 currentUser];
      uint64_t v7 = [(AMSDFetchMultiUserRecordZoneTask *)v20 initWithHome:v5 homeUser:v21 database:v19 metrics:0];

      [(AMSDFetchMultiUserRecordZoneTask *)v7 setCreateIfMissing:0];
      uint64_t v22 = [(AMSDFetchMultiUserRecordZoneTask *)v7 performTask];
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472;
      _OWORD v25[2] = sub_100040DB8;
      v25[3] = &unk_100113488;
      id v26 = v19;
      id v27 = v5;
      __int16 v29 = *(_WORD *)(a1 + 48);
      id v28 = *(id *)(a1 + 40);
      id v23 = v19;
      id v12 = [v22 continueWithBlock:v25];
    }
  }
  else
  {
    id v13 = +[AMSLogConfig sharedAccountsMultiUserConfig];
    if (!v13)
    {
      id v13 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v14 = [v13 OSLogObject];
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = objc_opt_class();
      uint64_t v16 = AMSLogKey();
      AMSLogableError();
      int8x16_t v17 = (AMSDFetchMultiUserRecordZoneTask *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)long long buf = 138543874;
      uint64_t v31 = v15;
      __int16 v32 = 2114;
      id v33 = v16;
      __int16 v34 = 2114;
      uint64_t v35 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Unable to export the multi-user token. Failed to find a home matching the given identifier. error = %{public}@", buf, 0x20u);
    }
    id v12 = +[AMSPromise promiseWithError:v6];
  }

  return v12;
}

id sub_100040DB8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = [a2 identifier];
    uint64_t v8 = [v6 fetchRecordWithName:@"AMSHomeParticipant" zoneIdentifier:v7];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_100040FF0;
    v16[3] = &unk_100113460;
    id v17 = *(id *)(a1 + 40);
    __int16 v19 = *(_WORD *)(a1 + 56);
    id v18 = *(id *)(a1 + 48);
    id v9 = [v8 continueWithBlock:v16];
  }
  else
  {
    uint64_t v10 = +[AMSLogConfig sharedAccountsMultiUserConfig];
    if (!v10)
    {
      uint64_t v10 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v11 = [v10 OSLogObject];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = objc_opt_class();
      id v13 = AMSLogKey();
      uint64_t v14 = AMSLogableError();
      *(_DWORD *)long long buf = 138543874;
      uint64_t v21 = v12;
      __int16 v22 = 2114;
      id v23 = v13;
      __int16 v24 = 2114;
      __int16 v25 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Unable to export the multi-user token. Failed to fetch the record zone for the current user. error = %{public}@", buf, 0x20u);
    }
    id v9 = +[AMSPromise promiseWithError:v5];
  }

  return v9;
}

id sub_100040FF0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = objc_msgSend(v5, "fieldForKey:");
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v8 = v7;
    }
    else {
      id v8 = 0;
    }

    id v43 = v6;
    if (v8)
    {
      uint64_t v15 = [v5 fieldForKey:@"AMSHomeParticipant_MultiUserTokenInvalid"];
      if (objc_opt_respondsToSelector())
      {
        uint64_t v16 = [v5 fieldForKey:@"AMSHomeParticipant_MultiUserTokenInvalid"];
        unsigned int v17 = [v16 BOOLValue];
      }
      else
      {
        unsigned int v17 = 0;
      }
      unsigned int v42 = v17;
    }
    else
    {
      unsigned int v42 = 1;
    }
    id v18 = objc_alloc((Class)NSMutableDictionary);
    v54[0] = @"AMSHomeParticipant_HomeIdentifier";
    __int16 v19 = [*(id *)(a1 + 32) identifier];
    __int16 v20 = [v19 UUIDString];
    v55[0] = v20;
    v54[1] = @"AMSHomeParticipant_HomeUserIdentifier";
    uint64_t v21 = [*(id *)(a1 + 32) currentUser];
    __int16 v22 = [v21 identifier];
    id v23 = [v22 UUIDString];
    v55[1] = v23;
    __int16 v24 = +[NSDictionary dictionaryWithObjects:v55 forKeys:v54 count:2];
    id v25 = [v18 initWithDictionary:v24];

    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    v52[0] = @"AMSHomeParticipant_iCloudAltDSID";
    v52[1] = @"AMSHomeParticipant_iCloudDSID";
    v52[2] = @"AMSHomeParticipant_iTunesAltDSID";
    void v52[3] = @"AMSHomeParticipant_iTunesDSID";
    v52[4] = @"AMSHomeParticipant_iTunesUsername";
    id v26 = +[NSArray arrayWithObjects:v52 count:5];
    id v27 = [v26 countByEnumeratingWithState:&v48 objects:v53 count:16];
    if (v27)
    {
      id v28 = v27;
      uint64_t v29 = *(void *)v49;
      do
      {
        for (unint64_t i = 0; i != v28; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v49 != v29) {
            objc_enumerationMutation(v26);
          }
          uint64_t v31 = *(void *)(*((void *)&v48 + 1) + 8 * i);
          __int16 v32 = [v5 fieldForKey:v31];
          objc_msgSend(v25, "ams_setNullableObject:forKey:", v32, v31);
        }
        id v28 = [v26 countByEnumeratingWithState:&v48 objects:v53 count:16];
      }
      while (v28);
    }

    if (!v8 && *(unsigned char *)(a1 + 48) || v42 && *(unsigned char *)(a1 + 49))
    {
      uint64_t v36 = +[ACAccountStore ams_sharedAccountStore];
      objc_msgSend(v36, "ams_activeiTunesAccountForMediaType:", AMSAccountMediaTypeProduction);
      id v34 = (id)objc_claimAutoreleasedReturnValue();

      v44[0] = _NSConcreteStackBlock;
      v44[1] = 3221225472;
      v44[2] = sub_100041664;
      v44[3] = &unk_100113438;
      id v45 = *(id *)(a1 + 40);
      id v46 = *(id *)(a1 + 32);
      id v47 = v25;
      uint64_t v14 = [v34 continueWithBlock:v44];

      id v6 = v43;
    }
    else
    {
      id v6 = v43;
      if (v8)
      {
        [v25 setObject:v8 forKeyedSubscript:@"AMSHomeParticipant_MultiUserToken"];
        id v33 = +[NSNumber numberWithBool:v42];
        [v25 setObject:v33 forKeyedSubscript:@"AMSHomeParticipant_MultiUserTokenInvalid"];

        id v34 = [v25 copy];
        uint64_t v35 = +[AMSPromise promiseWithResult:v34];
      }
      else
      {
        CFStringRef v37 = +[AMSLogConfig sharedAccountsMultiUserConfig];
        if (!v37)
        {
          CFStringRef v37 = +[AMSLogConfig sharedConfig];
        }
        long long v38 = [v37 OSLogObject];
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        {
          uint64_t v39 = objc_opt_class();
          id v40 = AMSLogKey();
          *(_DWORD *)long long buf = 138543618;
          uint64_t v57 = v39;
          __int16 v58 = 2114;
          id v59 = v40;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Unable to export the multi-user token. Failed to find a valid token.", buf, 0x16u);
        }
        AMSError();
        id v34 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v35 = +[AMSPromise promiseWithError:v34];
      }
      uint64_t v14 = (void *)v35;
    }
  }
  else
  {
    id v9 = +[AMSLogConfig sharedAccountsMultiUserConfig];
    if (!v9)
    {
      id v9 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v10 = [v9 OSLogObject];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = objc_opt_class();
      uint64_t v12 = AMSLogKey();
      id v13 = AMSLogableError();
      *(_DWORD *)long long buf = 138543874;
      uint64_t v57 = v11;
      __int16 v58 = 2114;
      id v59 = v12;
      __int16 v60 = 2114;
      id v61 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Unable to export the multi-user token. Failed to fetch the record for the home participant. error = %{public}@", buf, 0x20u);
    }
    uint64_t v14 = +[AMSPromise promiseWithError:v6];
  }

  return v14;
}

id sub_100041664(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = [[AMSDGenerateMultiUserTokenTask alloc] initWithController:*(void *)(a1 + 32) account:v5 home:*(void *)(a1 + 40)];
    id v8 = [(AMSDGenerateMultiUserTokenTask *)v7 performTask];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_100041884;
    v16[3] = &unk_100113410;
    id v17 = *(id *)(a1 + 48);
    id v9 = [v8 continueWithBlock:v16];
  }
  else
  {
    uint64_t v10 = +[AMSLogConfig sharedAccountsMultiUserConfig];
    if (!v10)
    {
      uint64_t v10 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v11 = [v10 OSLogObject];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = objc_opt_class();
      id v13 = AMSLogKey();
      uint64_t v14 = AMSLogableError();
      *(_DWORD *)long long buf = 138543874;
      uint64_t v19 = v12;
      __int16 v20 = 2114;
      uint64_t v21 = v13;
      __int16 v22 = 2114;
      id v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Unable to export the multi-user token. Failed to find the active iTunes account. error = %{public}@", buf, 0x20u);
    }
    id v9 = +[AMSPromise promiseWithError:v6];
  }

  return v9;
}

id sub_100041884(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    [*(id *)(a1 + 32) setObject:a2 forKeyedSubscript:@"AMSHomeParticipant_MultiUserToken"];
    [*(id *)(a1 + 32) setObject:&__kCFBooleanFalse forKeyedSubscript:@"AMSHomeParticipant_MultiUserTokenInvalid"];
    id v6 = [*(id *)(a1 + 32) copy];
    uint64_t v7 = +[AMSPromise promiseWithResult:v6];
  }
  else
  {
    id v8 = +[AMSLogConfig sharedAccountsMultiUserConfig];
    if (!v8)
    {
      id v8 = +[AMSLogConfig sharedConfig];
    }
    id v9 = [v8 OSLogObject];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = objc_opt_class();
      uint64_t v11 = AMSLogKey();
      uint64_t v12 = AMSLogableError();
      int v14 = 138543874;
      uint64_t v15 = v10;
      __int16 v16 = 2114;
      id v17 = v11;
      __int16 v18 = 2114;
      uint64_t v19 = v12;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Unable to export the multi-user token. Failed to generate the token. error = %{public}@", (uint8_t *)&v14, 0x20u);
    }
    uint64_t v7 = +[AMSPromise promiseWithError:v5];
  }

  return v7;
}

void sub_100041A54(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 40);
  if (v5)
  {
    (*(void (**)(void, id, void))(v7 + 16))(*(void *)(a1 + 40), v5, 0);
  }
  else
  {
    id v8 = +[AMSDMultiUserService _sanitizeError:v6];
    (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0, v8);
  }
  if (*(unsigned char *)(a1 + 64))
  {
    id v9 = +[AMSLogConfig sharedAccountsMultiUserConfig];
    uint64_t v10 = v9;
    if (v9)
    {
      uint64_t v11 = [v9 OSLogObject];
    }
    else
    {
      uint64_t v12 = +[AMSLogConfig sharedConfig];
      uint64_t v11 = [v12 OSLogObject];
    }
    os_signpost_id_t v13 = *(void *)(a1 + 48);
    if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
    {
      int v14 = NSStringFromSelector(*(SEL *)(a1 + 56));
      int v15 = 138543362;
      __int16 v16 = v14;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_INTERVAL_END, v13, "exportMultiUserToken", "%{public}@", (uint8_t *)&v15, 0xCu);
    }
  }
  +[AMSDTransactionStore releaseKeepAliveTransaction:*(void *)(a1 + 32)];
}

id sub_100041F80(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v26 = [v2 objectAtIndexedSubscript:0];
  id v3 = [v2 objectAtIndexedSubscript:1];
  id v27 = v2;
  id v4 = [v2 objectAtIndexedSubscript:2];
  id v5 = objc_opt_new();
  [v5 appendString:@"Private Record Zones:\n"];
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  id v6 = [v3 results];
  id v7 = [v6 countByEnumeratingWithState:&v39 objects:v44 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v40;
    do
    {
      for (unint64_t i = 0; i != v8; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v40 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = [*(id *)(*((void *)&v39 + 1) + 8 * i) name];
        [v5 appendFormat:@"  %@\n", v11];
      }
      id v8 = [v6 countByEnumeratingWithState:&v39 objects:v44 count:16];
    }
    while (v8);
  }

  [v5 appendString:@"\n"];
  [v5 appendString:@"Shared Record Zones:\n"];
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  uint64_t v12 = [v4 results];
  id v13 = [v12 countByEnumeratingWithState:&v35 objects:v43 count:16];
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = *(void *)v36;
    do
    {
      for (j = 0; j != v14; j = (char *)j + 1)
      {
        if (*(void *)v36 != v15) {
          objc_enumerationMutation(v12);
        }
        id v17 = [*(id *)(*((void *)&v35 + 1) + 8 * (void)j) name];
        [v5 appendFormat:@"  %@\n", v17];
      }
      id v14 = [v12 countByEnumeratingWithState:&v35 objects:v43 count:16];
    }
    while (v14);
  }

  [v5 appendString:@"\n"];
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  v30[2] = sub_100042354;
  v30[3] = &unk_1001135C8;
  id v31 = v3;
  id v32 = *(id *)(a1 + 32);
  id v33 = v4;
  id v34 = *(id *)(a1 + 40);
  id v18 = v4;
  id v19 = v3;
  __int16 v20 = objc_msgSend(v26, "ams_mapWithTransform:", v30);
  uint64_t v21 = +[AMSPromise promiseWithAll:v20];
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  v28[2] = sub_100043094;
  v28[3] = &unk_100112320;
  id v29 = v5;
  id v22 = v5;
  id v23 = [v21 thenWithBlock:v28];

  return v23;
}

id sub_100042354(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_opt_new();
  id v5 = [v3 name];
  [v4 appendFormat:@"%@:\n", v5];

  id v6 = [v3 identifier];
  id v7 = [v6 UUIDString];
  [v4 appendFormat:@"  identifier-> %@\n", v7];

  if ([v3 isCurrentDeviceAccessory]) {
    CFStringRef v8 = @"true";
  }
  else {
    CFStringRef v8 = @"false";
  }
  [v4 appendFormat:@"  isCurrentDeviceAccessory-> %@\n", v8];
  unsigned int v9 = [v3 isCurrentUserOwner];
  char v10 = v9;
  if (v9) {
    CFStringRef v11 = @"true";
  }
  else {
    CFStringRef v11 = @"false";
  }
  [v4 appendFormat:@"  isCurrentUserOwner-> %@\n", v11];
  if ([v3 isMultiUserEnabled]) {
    CFStringRef v12 = @"true";
  }
  else {
    CFStringRef v12 = @"false";
  }
  [v4 appendFormat:@"  isMultiUserEnabled-> %@\n", v12];
  if ([v3 isPrimary]) {
    CFStringRef v13 = @"true";
  }
  else {
    CFStringRef v13 = @"false";
  }
  [v4 appendFormat:@"  isPrimary-> %@\n", v13];
  [v4 appendFormat:@"  Record Zones:\n"];
  id v14 = [a1[4] results];
  uint64_t v15 = [v14 allValues];
  v48[0] = _NSConcreteStackBlock;
  v48[1] = 3221225472;
  v48[2] = sub_100042804;
  v48[3] = &unk_100113500;
  id v49 = a1[5];
  id v16 = v3;
  id v50 = v16;
  id v17 = objc_msgSend(v15, "ams_filterUsingTest:", v48);
  id v18 = [v17 mutableCopy];
  id v19 = v18;
  if (v18) {
    id v20 = v18;
  }
  else {
    id v20 = objc_alloc_init((Class)NSMutableArray);
  }
  uint64_t v21 = v20;

  id v22 = [a1[6] results];
  id v23 = [v22 allValues];
  v45[0] = _NSConcreteStackBlock;
  v45[1] = 3221225472;
  v45[2] = sub_100042884;
  v45[3] = &unk_100113500;
  id v46 = a1[7];
  id v24 = v16;
  id v47 = v24;
  uint64_t v25 = objc_msgSend(v23, "ams_filterUsingTest:", v45);
  id v26 = (void *)v25;
  if (v25) {
    id v27 = (void *)v25;
  }
  else {
    id v27 = &__NSArray0__struct;
  }
  [v21 addObjectsFromArray:v27];

  v43[0] = _NSConcreteStackBlock;
  v43[1] = 3221225472;
  v43[2] = sub_100042904;
  v43[3] = &unk_100113528;
  id v28 = v4;
  id v44 = v28;
  [v21 enumerateObjectsUsingBlock:v43];
  [v28 appendFormat:@"  Users:\n"];
  id v29 = [v24 users];
  v38[0] = _NSConcreteStackBlock;
  v38[1] = 3221225472;
  v38[2] = sub_100042974;
  v38[3] = &unk_1001135A0;
  id v39 = v24;
  char v42 = v10;
  id v40 = a1[5];
  id v41 = a1[7];
  id v30 = v24;
  id v31 = objc_msgSend(v29, "ams_mapWithTransform:", v38);

  id v32 = +[AMSPromise promiseWithAll:v31];
  v36[0] = _NSConcreteStackBlock;
  v36[1] = 3221225472;
  v36[2] = sub_100042F78;
  v36[3] = &unk_100112320;
  id v37 = v28;
  id v33 = v28;
  id v34 = [v32 thenWithBlock:v36];

  return v34;
}

id sub_100042804(uint64_t a1, uint64_t a2)
{
  id v3 = +[AMSDHomeManager homeIdentifierForRecordZone:a2 inDatabase:*(void *)(a1 + 32)];
  id v4 = [v3 resultWithError:0];

  id v5 = [*(id *)(a1 + 40) identifier];
  id v6 = [v5 isEqual:v4];

  return v6;
}

id sub_100042884(uint64_t a1, uint64_t a2)
{
  id v3 = +[AMSDHomeManager homeIdentifierForRecordZone:a2 inDatabase:*(void *)(a1 + 32)];
  id v4 = [v3 resultWithError:0];

  id v5 = [*(id *)(a1 + 40) identifier];
  id v6 = [v5 isEqual:v4];

  return v6;
}

void sub_100042904(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v4 = [a2 identifier];
  id v3 = [v4 name];
  [v2 appendFormat:@"    %@\n", v3];
}

id sub_100042974(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) currentUser];
  id v5 = [v4 identifier];
  id v6 = [v3 identifier];
  unsigned int v7 = [v5 isEqual:v6];

  CFStringRef v8 = objc_opt_new();
  unsigned int v9 = [v3 name];
  [v8 appendFormat:@"    %@:\n", v9];

  char v10 = [v3 identifier];
  CFStringRef v11 = [v10 UUIDString];
  [v8 appendFormat:@"      identifier-> %@\n", v11];

  CFStringRef v12 = @"false";
  if (v7) {
    CFStringRef v12 = @"true";
  }
  [v8 appendFormat:@"      isCurrentUser-> %@\n", v12];
  if (v7)
  {
    CFStringRef v13 = (id *)(a1 + 40);
LABEL_7:
    id v14 = *v13;
    uint64_t v15 = [[AMSDFetchMultiUserRecordZoneTask alloc] initWithHome:*(void *)(a1 + 32) homeUser:v3 database:v14 metrics:0];
    [(AMSDFetchMultiUserRecordZoneTask *)v15 setCreateIfMissing:0];
    id v16 = [(AMSDFetchMultiUserRecordZoneTask *)v15 performTask];
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_100042C30;
    v24[3] = &unk_100113550;
    id v25 = v14;
    id v17 = v8;
    id v26 = v17;
    id v18 = v14;
    id v19 = [v16 thenWithBlock:v24];
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_100042F64;
    v22[3] = &unk_100113578;
    id v23 = v17;
    id v20 = [v19 catchWithBlock:v22];

    goto LABEL_9;
  }
  if (*(unsigned char *)(a1 + 56))
  {
    CFStringRef v13 = (id *)(a1 + 48);
    goto LABEL_7;
  }
  id v20 = +[AMSPromise promiseWithResult:v8];
LABEL_9:

  return v20;
}

id sub_100042C30(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v5 = [v3 identifier];
  id v6 = [v4 fetchRecordWithName:@"AMSHomeParticipant" zoneIdentifier:v5];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100042D40;
  v10[3] = &unk_100112C48;
  id v11 = *(id *)(a1 + 40);
  id v12 = v3;
  id v7 = v3;
  CFStringRef v8 = [v6 thenWithBlock:v10];

  return v8;
}

AMSPromise *sub_100042D40(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = *(void **)(a1 + 40);
  id v5 = a2;
  id v6 = [v4 identifier];
  id v7 = [v6 name];
  [v3 appendFormat:@"      recordZoneName-> %@\n", v7];

  CFStringRef v8 = *(void **)(a1 + 32);
  unsigned int v9 = [v5 fieldForKey:@"AMSHomeParticipant_iCloudAltDSID"];
  [v8 appendFormat:@"      iCloudAltDSID-> %@\n", v9];

  char v10 = *(void **)(a1 + 32);
  id v11 = [v5 fieldForKey:@"AMSHomeParticipant_iCloudDSID"];
  [v10 appendFormat:@"      iCloudDSID-> %@\n", v11];

  id v12 = *(void **)(a1 + 32);
  CFStringRef v13 = [v5 fieldForKey:@"AMSHomeParticipant_iTunesAltDSID"];
  [v12 appendFormat:@"      iTunesAltDSID-> %@\n", v13];

  id v14 = *(void **)(a1 + 32);
  uint64_t v15 = [v5 fieldForKey:@"AMSHomeParticipant_iTunesDSID"];
  [v14 appendFormat:@"      iTunesDSID-> %@\n", v15];

  id v16 = *(void **)(a1 + 32);
  id v17 = [v5 fieldForKey:@"AMSHomeParticipant_iTunesUsername"];
  [v16 appendFormat:@"      iTunesUsername-> %@\n", v17];

  id v18 = *(void **)(a1 + 32);
  id v19 = [v5 fieldForKey:@"AMSHomeParticipant_MultiUserToken"];
  [v18 appendFormat:@"      token-> %@\n", v19];

  id v20 = *(void **)(a1 + 32);
  uint64_t v21 = [v5 fieldForKey:@"AMSHomeParticipant_MultiUserTokenInvalid"];

  [v20 appendFormat:@"      tokenIsInvalid-> %@\n", v21];
  uint64_t v22 = *(void *)(a1 + 32);
  return +[AMSPromise promiseWithResult:v22];
}

AMSPromise *sub_100042F64(uint64_t a1)
{
  return +[AMSPromise promiseWithResult:*(void *)(a1 + 32)];
}

id sub_100042F78(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      for (unint64_t i = 0; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(a1 + 32) appendString:*(void *)(*((void *)&v10 + 1) + 8 * i)];
      }
      id v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }
  CFStringRef v8 = +[AMSPromise promiseWithResult:*(void *)(a1 + 32)];

  return v8;
}

id sub_100043094(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = [a2 componentsJoinedByString:@"\n"];
  [v3 appendString:v4];

  id v5 = [*(id *)(a1 + 32) copy];
  uint64_t v6 = +[AMSPromise promiseWithResult:v5];

  return v6;
}

id sub_100043128(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (a2)
  {
    (*(void (**)(void, uint64_t, void))(v3 + 16))(*(void *)(a1 + 40), a2, 0);
  }
  else
  {
    id v4 = +[AMSDMultiUserService _sanitizeError:](AMSDMultiUserService, "_sanitizeError:");
    (*(void (**)(uint64_t, void, void *))(v3 + 16))(v3, 0, v4);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  return +[AMSDTransactionStore releaseKeepAliveTransaction:v5];
}

id sub_1000435D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = [v3 currentUser];
    if (v5)
    {
      uint64_t v6 = [[AMSDFetchMultiUserRecordZoneTask alloc] initWithHome:v4 homeUser:v5 database:*(void *)(a1 + 32) metrics:*(void *)(a1 + 40)];
      [(AMSDFetchMultiUserRecordZoneTask *)v6 setCreateIfMissing:0];
      id v7 = [(AMSDFetchMultiUserRecordZoneTask *)v6 performTask];
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_100043900;
      v18[3] = &unk_100113578;
      id v19 = *(id *)(a1 + 40);
      CFStringRef v8 = [v7 catchWithBlock:v18];
    }
    else
    {
      long long v13 = +[AMSLogConfig sharedAccountsMultiUserConfig];
      if (!v13)
      {
        long long v13 = +[AMSLogConfig sharedConfig];
      }
      id v14 = [v13 OSLogObject];
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = objc_opt_class();
        id v16 = AMSLogKey();
        *(_DWORD *)long long buf = 138543618;
        uint64_t v21 = v15;
        __int16 v22 = 2114;
        id v23 = v16;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Unable to fetch the account. There's no home user for the current user.", buf, 0x16u);
      }
      AMSError();
      uint64_t v6 = (AMSDFetchMultiUserRecordZoneTask *)objc_claimAutoreleasedReturnValue();
      CFStringRef v8 = +[AMSPromise promiseWithError:v6];
    }
  }
  else
  {
    unsigned int v9 = +[AMSLogConfig sharedAccountsMultiUserConfig];
    if (!v9)
    {
      unsigned int v9 = +[AMSLogConfig sharedConfig];
    }
    long long v10 = [v9 OSLogObject];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = objc_opt_class();
      long long v12 = AMSLogKey();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v21 = v11;
      __int16 v22 = 2114;
      id v23 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Unable to fetch the account. Failed to find a home matching the given identifier.", buf, 0x16u);
    }
    uint64_t v5 = AMSError();
    CFStringRef v8 = +[AMSPromise promiseWithError:v5];
  }

  return v8;
}

id sub_100043900(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3) {
    id v4 = [*(id *)(a1 + 32) enqueueCloudKitFetchFailedEventWithError:v3];
  }
  unsigned int v5 = objc_msgSend(v3, "ams_hasDomain:code:", @"AMSDCloudDataErrorDomain", 7);
  uint64_t v6 = +[AMSLogConfig sharedAccountsMultiUserConfig];
  id v7 = (void *)v6;
  if (v5)
  {
    if (!v6)
    {
      id v7 = +[AMSLogConfig sharedConfig];
    }
    CFStringRef v8 = [v7 OSLogObject];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = objc_opt_class();
      long long v10 = AMSLogKey();
      int v17 = 138543618;
      uint64_t v18 = v9;
      __int16 v19 = 2114;
      id v20 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Unable to fetch the account. The home does not have an iTunes account associated with it.", (uint8_t *)&v17, 0x16u);
    }
  }
  else
  {
    if (!v6)
    {
      id v7 = +[AMSLogConfig sharedConfig];
    }
    CFStringRef v8 = [v7 OSLogObject];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = objc_opt_class();
      long long v12 = AMSLogKey();
      long long v13 = AMSHashIfNeeded();
      int v17 = 138543874;
      uint64_t v18 = v11;
      __int16 v19 = 2114;
      id v20 = v12;
      __int16 v21 = 2114;
      __int16 v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Unable to fetch the account. We failed to fetch the record zone for the home. error = %{public}@", (uint8_t *)&v17, 0x20u);
    }
  }

  id v14 = AMSError();
  uint64_t v15 = +[AMSPromise promiseWithError:v14];

  return v15;
}

id sub_100043B84(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = [a2 identifier];
  unsigned int v5 = [v3 fetchRecordWithName:@"AMSHomeParticipant" zoneIdentifier:v4];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100043C74;
  uint64_t v8[3] = &unk_100113668;
  id v9 = *(id *)(a1 + 40);
  uint64_t v6 = [v5 continueWithBlock:v8];

  return v6;
}

id sub_100043C74(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = [*(id *)(a1 + 32) enqueueCloudKitFetchSuccessEvent];
    CFStringRef v8 = +[ACAccountStore ams_sharedAccountStore];
    id v9 = objc_msgSend(v8, "amsd_iTunesAccountForHomeParticipant:createEphemeral:", v5, 1);

    if (v9)
    {
      long long v10 = +[AMSPromise promiseWithResult:v9];
    }
    else
    {
      int v17 = +[AMSLogConfig sharedAccountsMultiUserConfig];
      if (!v17)
      {
        int v17 = +[AMSLogConfig sharedConfig];
      }
      uint64_t v18 = [v17 OSLogObject];
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        uint64_t v19 = objc_opt_class();
        id v20 = AMSLogKey();
        __int16 v21 = AMSHashIfNeeded();
        int v24 = 138543874;
        uint64_t v25 = v19;
        __int16 v26 = 2114;
        id v27 = v20;
        __int16 v28 = 2114;
        id v29 = v21;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Unable to fetch the account. The home participant has no identifiers for the iTunes account. homeParticipant = %{public}@", (uint8_t *)&v24, 0x20u);
      }
      __int16 v22 = AMSError();
      long long v10 = +[AMSPromise promiseWithError:v22];
    }
  }
  else
  {
    uint64_t v11 = +[AMSLogConfig sharedAccountsMultiUserConfig];
    if (!v11)
    {
      uint64_t v11 = +[AMSLogConfig sharedConfig];
    }
    long long v12 = [v11 OSLogObject];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = objc_opt_class();
      id v14 = AMSLogKey();
      uint64_t v15 = AMSHashIfNeeded();
      int v24 = 138543874;
      uint64_t v25 = v13;
      __int16 v26 = 2114;
      id v27 = v14;
      __int16 v28 = 2114;
      id v29 = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Unable to fetch the home participant. error = %{public}@", (uint8_t *)&v24, 0x20u);
    }
    id v16 = [*(id *)(a1 + 32) enqueueCloudKitFetchFailedEventWithError:v6];
    long long v10 = +[AMSPromise promiseWithError:v6];
  }

  return v10;
}

void sub_100043F74(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (v5)
  {
    id v6 = +[AMSLogConfig sharedAccountsMultiUserConfig];
    if (!v6)
    {
      id v6 = +[AMSLogConfig sharedConfig];
    }
    id v7 = [v6 OSLogObject];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = objc_opt_class();
      id v9 = AMSLogKey();
      long long v10 = AMSHashIfNeeded();
      int v13 = 138543874;
      uint64_t v14 = v8;
      __int16 v15 = 2114;
      id v16 = v9;
      __int16 v17 = 2114;
      uint64_t v18 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Successfully fetched the account. account = %{public}@", (uint8_t *)&v13, 0x20u);
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 40);
    long long v12 = +[AMSDMultiUserService _sanitizeError:a3];
    (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0, v12);
  }
  +[AMSDTransactionStore releaseKeepAliveTransaction:*(void *)(a1 + 32)];
}

id sub_100044470(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v5 = [v3 currentUser];
  id v6 = [v4 databaseForHome:v3 user:v5];

  if (v6)
  {
    id v7 = [AMSDFetchMultiUserRecordZoneTask alloc];
    uint64_t v8 = [v3 currentUser];
    id v9 = [(AMSDFetchMultiUserRecordZoneTask *)v7 initWithHome:v3 homeUser:v8 database:v6 metrics:0];

    long long v10 = [(AMSDFetchMultiUserRecordZoneTask *)v9 performTask];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_100044674;
    v18[3] = &unk_1001136B8;
    id v11 = v6;
    id v19 = v11;
    long long v12 = [v10 thenWithBlock:v18];

    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1000446E8;
    v16[3] = &unk_100112C70;
    id v17 = v11;
    int v13 = [v12 thenWithBlock:v16];
  }
  else
  {
    uint64_t v14 = AMSError();
    int v13 = +[AMSPromise promiseWithError:v14];
  }
  return v13;
}

id sub_100044674(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [a2 identifier];
  id v4 = [v2 fetchRecordWithName:@"AMSHomeParticipant" zoneIdentifier:v3];

  return v4;
}

id sub_1000446E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setField:@"INVALIDATED FOR TESTING PURPOSES" forKey:@"AMSHomeParticipant_MultiUserToken"];
  id v4 = [*(id *)(a1 + 32) saveRecord:v3];

  return v4;
}

void sub_100044760(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = +[AMSLogConfig sharedAccountsMultiUserConfig];
  id v7 = (void *)v6;
  if (a2)
  {
    if (!v6)
    {
      id v7 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v8 = [v7 OSLogObject];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = objc_opt_class();
      long long v10 = AMSLogKey();
      int v17 = 138543618;
      uint64_t v18 = v9;
      __int16 v19 = 2114;
      id v20 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Successfully invalidated the multi-user token.", (uint8_t *)&v17, 0x16u);
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    if (!v6)
    {
      id v7 = +[AMSLogConfig sharedConfig];
    }
    id v11 = [v7 OSLogObject];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = objc_opt_class();
      int v13 = AMSLogKey();
      uint64_t v14 = AMSHashIfNeeded();
      int v17 = 138543874;
      uint64_t v18 = v12;
      __int16 v19 = 2114;
      id v20 = v13;
      __int16 v21 = 2114;
      __int16 v22 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to invalidate the multi-user token. error = %{public}@", (uint8_t *)&v17, 0x20u);
    }
    uint64_t v15 = *(void *)(a1 + 40);
    id v16 = +[AMSDMultiUserService _sanitizeError:v5];
    (*(void (**)(uint64_t, void, void *))(v15 + 16))(v15, 0, v16);
  }
  +[AMSDTransactionStore releaseKeepAliveTransaction:*(void *)(a1 + 32)];
}

id sub_100044BEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (a2)
  {
    (*(void (**)(void, uint64_t, void))(v3 + 16))(*(void *)(a1 + 40), 1, 0);
  }
  else
  {
    id v4 = +[AMSDMultiUserService _sanitizeError:](AMSDMultiUserService, "_sanitizeError:");
    (*(void (**)(uint64_t, void, void *))(v3 + 16))(v3, 0, v4);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  return +[AMSDTransactionStore releaseKeepAliveTransaction:v5];
}

id sub_100045018(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = [[AMSDUpdateMultiUserTokenTask alloc] initWithController:*(void *)(a1 + 32) account:*(void *)(a1 + 40) home:v3];
    uint64_t v5 = [(AMSDUpdateMultiUserTokenTask *)v4 performTask];
  }
  else
  {
    uint64_t v6 = +[AMSLogConfig sharedAccountsMultiUserConfig];
    if (!v6)
    {
      uint64_t v6 = +[AMSLogConfig sharedConfig];
    }
    id v7 = [v6 OSLogObject];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = objc_opt_class();
      uint64_t v9 = AMSLogKey();
      int v12 = 138543618;
      uint64_t v13 = v8;
      __int16 v14 = 2114;
      uint64_t v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Unable to set the account. Failed to find a home matching the given identifier.", (uint8_t *)&v12, 0x16u);
    }
    AMSError();
    id v4 = (AMSDUpdateMultiUserTokenTask *)objc_claimAutoreleasedReturnValue();
    uint64_t v5 = +[AMSPromise promiseWithError:v4];
  }
  long long v10 = (void *)v5;

  return v10;
}

id sub_1000451B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (a2)
  {
    (*(void (**)(void, uint64_t, void))(v3 + 16))(*(void *)(a1 + 40), 1, 0);
  }
  else
  {
    id v4 = +[AMSDMultiUserService _sanitizeError:](AMSDMultiUserService, "_sanitizeError:");
    (*(void (**)(uint64_t, void, void *))(v3 + 16))(v3, 0, v4);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  return +[AMSDTransactionStore releaseKeepAliveTransaction:v5];
}

id sub_1000455D0(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v24 = a3;
  if (v5)
  {
    uint64_t v6 = +[NSMutableArray array];
    id v7 = [v5 results];
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472;
    long long v35[2] = sub_100045A14;
    v35[3] = &unk_1001137D8;
    id v36 = a1[4];
    id v37 = a1[5];
    id v38 = a1[6];
    id v23 = v6;
    id v39 = v23;
    [v7 enumerateKeysAndObjectsUsingBlock:v35];

    if ([v23 count])
    {
      id v8 = objc_alloc((Class)AMSThreadSafeObject);
      uint64_t v9 = +[NSMutableArray array];
      id v10 = [v8 initWithObject:v9];

      id v25 = objc_alloc_init((Class)AMSMutablePromise);
      *(void *)long long buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2020000000;
      char v42 = 0;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      id v11 = v23;
      id v12 = [v11 countByEnumeratingWithState:&v31 objects:v40 count:16];
      if (v12)
      {
        uint64_t v13 = *(void *)v32;
        do
        {
          for (unint64_t i = 0; i != v12; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v32 != v13) {
              objc_enumerationMutation(v11);
            }
            uint64_t v15 = *(void **)(*((void *)&v31 + 1) + 8 * i);
            v26[0] = _NSConcreteStackBlock;
            v26[1] = 3221225472;
            v26[2] = sub_1000462C0;
            v26[3] = &unk_100113828;
            id v27 = v10;
            id v30 = buf;
            id v16 = v11;
            id v28 = v16;
            id v29 = v25;
            [v15 addFinishBlock:v26];
          }
          id v12 = [v16 countByEnumeratingWithState:&v31 objects:v40 count:16];
        }
        while (v12);
      }

      _Block_object_dispose(buf, 8);
    }
    else
    {
      id v25 = +[AMSPromise promiseWithResult:&__NSArray0__struct];
    }
  }
  else
  {
    int v17 = +[AMSLogConfig sharedAccountsMultiUserConfig];
    if (!v17)
    {
      int v17 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v18 = [v17 OSLogObject];
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = objc_opt_class();
      id v20 = AMSLogKey();
      __int16 v21 = AMSHashIfNeeded();
      *(_DWORD *)long long buf = 138543874;
      *(void *)&uint8_t buf[4] = v19;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v20;
      *(_WORD *)&buf[22] = 2114;
      char v42 = v21;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to fetch the record zones. error = %{public}@", buf, 0x20u);
    }
    id v25 = +[AMSPromise promiseWithError:v24];
  }

  return v25;
}

void sub_1000459EC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100045A14(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (([v4 isDefaultRecordZone] & 1) == 0)
  {
    id v5 = *(void **)(a1 + 32);
    uint64_t v6 = [v4 identifier];
    id v7 = [v5 fetchRecordWithName:@"AMSHomeParticipant" zoneIdentifier:v6];

    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100045C0C;
    v15[3] = &unk_100112C48;
    id v16 = *(id *)(a1 + 40);
    id v17 = *(id *)(a1 + 48);
    id v8 = [v7 thenWithBlock:v15];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100046030;
    _OWORD v13[3] = &unk_100111F20;
    id v14 = v4;
    [v7 addErrorBlock:v13];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10004618C;
    v10[3] = &unk_1001137B0;
    id v11 = *(id *)(a1 + 48);
    id v12 = *(id *)(a1 + 40);
    uint64_t v9 = [v8 thenWithBlock:v10];
    [*(id *)(a1 + 56) addObject:v9];
  }
}

id sub_100045C0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 fieldForKey:@"AMSHomeParticipant_iTunesDSID"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v5 = v4;
  }
  else {
    id v5 = 0;
  }

  if (v5
    && (objc_msgSend(*(id *)(a1 + 32), "ams_DSID"),
        uint64_t v6 = objc_claimAutoreleasedReturnValue(),
        unsigned __int8 v7 = [v6 isEqualToNumber:v5],
        v6,
        (v7 & 1) != 0))
  {
    id v8 = +[AMSLogConfig sharedAccountsMultiUserConfig];
    if (!v8)
    {
      id v8 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v9 = [v8 OSLogObject];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = objc_opt_class();
      id v11 = AMSLogKey();
      id v12 = AMSHashIfNeeded();
      int v26 = 138543874;
      uint64_t v27 = v10;
      __int16 v28 = 2114;
      id v29 = v11;
      __int16 v30 = 2114;
      long long v31 = v12;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Found a home that's using the account. homeParticipant = %{public}@", (uint8_t *)&v26, 0x20u);
    }
    uint64_t v13 = [v3 fieldForKey:@"AMSHomeParticipant_HomeIdentifier"];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v14 = v13;
    }
    else {
      id v14 = 0;
    }

    if (v14 && (id v16 = [objc_alloc((Class)NSUUID) initWithUUIDString:v14]) != 0)
    {
      id v17 = v16;
      uint64_t v18 = [*(id *)(a1 + 40) homeManager];
      uint64_t v19 = [v18 homeWithHomeIdentifier:v17];
      uint64_t v15 = [v19 thenWithBlock:&stru_100113748];
    }
    else
    {
      id v20 = +[AMSLogConfig sharedAccountsMultiUserConfig];
      if (!v20)
      {
        id v20 = +[AMSLogConfig sharedConfig];
      }
      __int16 v21 = [v20 OSLogObject];
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        uint64_t v22 = objc_opt_class();
        id v23 = AMSLogKey();
        id v24 = AMSHashIfNeeded();
        int v26 = 138543874;
        uint64_t v27 = v22;
        __int16 v28 = 2114;
        id v29 = v23;
        __int16 v30 = 2114;
        long long v31 = v24;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Invalid home identifier. homeIdentifier = %{public}@", (uint8_t *)&v26, 0x20u);
      }
      id v17 = AMSError();
      uint64_t v15 = +[AMSPromise promiseWithError:v17];
    }
  }
  else
  {
    id v14 = +[AMSOptional optionalWithNil];
    uint64_t v15 = +[AMSPromise promiseWithResult:v14];
  }

  return v15;
}

AMSPromise *__cdecl sub_100045FC8(id a1, AMSDHome *a2)
{
  id v2 = +[AMSOptional optionalWithValue:a2];
  id v3 = +[AMSPromise promiseWithResult:v2];

  return (AMSPromise *)v3;
}

void sub_100046030(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = +[AMSLogConfig sharedAccountsMultiUserConfig];
  if (!v3)
  {
    id v3 = +[AMSLogConfig sharedConfig];
  }
  id v4 = [v3 OSLogObject];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = objc_opt_class();
    uint64_t v6 = AMSLogKey();
    unsigned __int8 v7 = AMSHashIfNeeded();
    id v8 = AMSHashIfNeeded();
    int v9 = 138544130;
    uint64_t v10 = v5;
    __int16 v11 = 2114;
    id v12 = v6;
    __int16 v13 = 2114;
    id v14 = v7;
    __int16 v15 = 2114;
    id v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to fetch the home participant record. recordZone = %{public}@ | error = %{public}@", (uint8_t *)&v9, 0x2Au);
  }
}

id sub_10004618C(uint64_t a1, void *a2)
{
  id v3 = [a2 value];
  if (v3)
  {
    id v4 = [[AMSDUpdateMultiUserTokenTask alloc] initWithController:*(void *)(a1 + 32) account:*(void *)(a1 + 40) home:v3];
    uint64_t v5 = [(AMSDUpdateMultiUserTokenTask *)v4 performTask];
    uint64_t v6 = [v5 thenWithBlock:&stru_100113788];
  }
  else
  {
    id v4 = +[AMSOptional optionalWithNil];
    uint64_t v6 = +[AMSPromise promiseWithResult:v4];
  }

  return v6;
}

AMSPromise *__cdecl sub_100046258(id a1, NSString *a2)
{
  id v2 = +[AMSOptional optionalWithValue:a2];
  id v3 = +[AMSPromise promiseWithResult:v2];

  return (AMSPromise *)v3;
}

void sub_1000462C0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100046390;
  uint64_t v8[3] = &unk_100113800;
  uint64_t v5 = *(void *)(a1 + 56);
  id v9 = v4;
  uint64_t v12 = v5;
  uint64_t v6 = *(void **)(a1 + 32);
  id v10 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 48);
  id v7 = v4;
  [v6 readWrite:v8];
}

id sub_100046390(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(void *)(a1 + 32)) {
    objc_msgSend(v3, "addObject:");
  }
  id v5 = (id)++*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
  if (v5 == [*(id *)(a1 + 40) count]) {
    [*(id *)(a1 + 48) finishWithResult:v4];
  }
  return v4;
}

void sub_100046420(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = +[AMSLogConfig sharedAccountsDaemonConfig];
    if (!v7)
    {
      id v7 = +[AMSLogConfig sharedConfig];
    }
    id v8 = [v7 OSLogObject];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = objc_opt_class();
      id v10 = AMSLogKey();
      id v11 = AMSHashIfNeeded();
      int v27 = 138543874;
      uint64_t v28 = v9;
      __int16 v29 = 2114;
      __int16 v30 = v10;
      __int16 v31 = 2114;
      long long v32 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Error occurred before attempt to update multi-user tokens. error = %{public}@", (uint8_t *)&v27, 0x20u);
    }
    uint64_t v12 = *(void *)(a1 + 40);
    __int16 v13 = +[AMSDMultiUserService _sanitizeError:v6];
    (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0, v13);
  }
  else
  {
    id v14 = [v5 count];
    uint64_t v15 = +[AMSLogConfig sharedAccountsDaemonConfig];
    id v16 = (void *)v15;
    if (v14)
    {
      if (!v15)
      {
        id v16 = +[AMSLogConfig sharedConfig];
      }
      id v17 = [v16 OSLogObject];
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        uint64_t v18 = objc_opt_class();
        uint64_t v19 = AMSLogKey();
        id v20 = AMSHashIfNeeded();
        int v27 = 138543874;
        uint64_t v28 = v18;
        __int16 v29 = 2114;
        __int16 v30 = v19;
        __int16 v31 = 2114;
        long long v32 = v20;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to update one or more multi-user tokens. errors = %{public}@", (uint8_t *)&v27, 0x20u);
      }
      __int16 v21 = AMSErrorWithMultipleUnderlyingErrors();
      uint64_t v22 = *(void *)(a1 + 40);
      id v23 = +[AMSDMultiUserService _sanitizeError:v21];
      (*(void (**)(uint64_t, void, void *))(v22 + 16))(v22, 0, v23);
    }
    else
    {
      if (!v15)
      {
        id v16 = +[AMSLogConfig sharedConfig];
      }
      id v24 = [v16 OSLogObject];
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v25 = objc_opt_class();
        int v26 = AMSLogKey();
        int v27 = 138543618;
        uint64_t v28 = v25;
        __int16 v29 = 2114;
        __int16 v30 = v26;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Successfully updated all multi-user tokens.", (uint8_t *)&v27, 0x16u);
      }
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
  }
  +[AMSDTransactionStore releaseKeepAliveTransaction:*(void *)(a1 + 32)];
}

void sub_100047C14(uint64_t a1, char a2, void *a3)
{
  id v4 = a3;
  if ((a2 & 1) == 0)
  {
    id v5 = +[AMSLogConfig sharedAccountsDaemonConfig];
    if (!v5)
    {
      id v5 = +[AMSLogConfig sharedConfig];
    }
    id v6 = [v5 OSLogObject];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = objc_opt_class();
      id v8 = AMSLogKey();
      int v9 = 138543874;
      uint64_t v10 = v7;
      __int16 v11 = 2114;
      uint64_t v12 = v8;
      __int16 v13 = 2114;
      id v14 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Error posting notification: %{public}@", (uint8_t *)&v9, 0x20u);
    }
  }
}

id sub_1000480B0()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_100130360;
  uint64_t v7 = qword_100130360;
  if (!qword_100130360)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000492EC;
    v3[3] = &unk_100112770;
    v3[4] = &v4;
    sub_1000492EC((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10004817C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100048194(uint64_t a1, void *a2)
{
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_10004841C;
  v16[3] = &unk_100113920;
  id v17 = *(id *)(a1 + 32);
  uint64_t v4 = objc_msgSend(a2, "ams_firstObjectPassingTest:", v16);
  uint64_t v5 = +[AMSLogConfig sharedAccountsDaemonConfig];
  uint64_t v6 = (void *)v5;
  if (v4)
  {
    if (!v5)
    {
      uint64_t v6 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v7 = [v6 OSLogObject];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = objc_opt_class();
      int v9 = AMSLogKey();
      uint64_t v10 = [v4 familyID];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v19 = v8;
      __int16 v20 = 2114;
      __int16 v21 = v9;
      __int16 v22 = 2114;
      id v23 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Arcade entitlement found, user is a subscriber. Entitlement.familyID = %{public}@", buf, 0x20u);
    }
    [*(id *)(a1 + 48) finishWithResult:&__kCFBooleanTrue];
  }
  else
  {
    if (!v5)
    {
      uint64_t v6 = +[AMSLogConfig sharedConfig];
    }
    __int16 v11 = [v6 OSLogObject];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = objc_opt_class();
      __int16 v13 = AMSLogKey();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v19 = v12;
      __int16 v20 = 2114;
      __int16 v21 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] No Arcade entitlement found, user is not subscribed.", buf, 0x16u);
    }
    id v14 = *(void **)(a1 + 48);
    uint64_t v15 = AMSError();
    [v14 finishWithError:v15];
  }
}

uint64_t sub_10004841C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 familyID];
  uint64_t v5 = [v4 stringValue];
  unsigned int v6 = [v5 isEqualToString:*(void *)(a1 + 32)];

  uint64_t v7 = [v3 expiryDate];

  uint64_t v8 = +[NSDate date];
  id v9 = [v7 compare:v8];

  if (v9 == (id)-1) {
    return 0;
  }
  else {
    return v6;
  }
}

void sub_10004868C(uint64_t a1, void *a2)
{
  id v3 = objc_msgSend(a2, "ams_firstObjectPassingTest:", &stru_100113988);
  uint64_t v4 = +[AMSLogConfig sharedAccountsDaemonConfig];
  uint64_t v5 = (void *)v4;
  if (v3)
  {
    if (!v4)
    {
      uint64_t v5 = +[AMSLogConfig sharedConfig];
    }
    unsigned int v6 = [v5 OSLogObject];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = objc_opt_class();
      uint64_t v8 = AMSLogKey();
      id v9 = [v3 familyID];
      int v15 = 138543874;
      uint64_t v16 = v7;
      __int16 v17 = 2114;
      uint64_t v18 = v8;
      __int16 v19 = 2114;
      __int16 v20 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Fitness+ entitlement found, user is a subscriber. Entitlement.familyID = %{public}@", (uint8_t *)&v15, 0x20u);
    }
    [*(id *)(a1 + 40) finishWithResult:&__kCFBooleanTrue];
  }
  else
  {
    if (!v4)
    {
      uint64_t v5 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v10 = [v5 OSLogObject];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = objc_opt_class();
      uint64_t v12 = AMSLogKey();
      int v15 = 138543618;
      uint64_t v16 = v11;
      __int16 v17 = 2114;
      uint64_t v18 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] No Fitness+ entitlement found, user is not subscribed.", (uint8_t *)&v15, 0x16u);
    }
    __int16 v13 = *(void **)(a1 + 40);
    id v14 = AMSError();
    [v13 finishWithError:v14];
  }
}

BOOL sub_1000488BC(id a1, ASDSubscriptionEntitlement *a2)
{
  id v2 = [(ASDSubscriptionEntitlement *)a2 expiryDate];
  id v3 = +[NSDate date];
  BOOL v4 = [v2 compare:v3] != (id)-1;

  return v4;
}

void sub_100048B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100048B98(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 statusType];
  uint64_t v5 = +[AMSLogConfig sharedAccountsDaemonConfig];
  unsigned int v6 = (void *)v5;
  if (v4 == (id)1)
  {
    if (!v5)
    {
      unsigned int v6 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v7 = [v6 OSLogObject];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = objc_opt_class();
      id v9 = AMSLogKey();
      uint64_t v10 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v3 statusType]);
      int v17 = 138543874;
      uint64_t v18 = v8;
      __int16 v19 = 2114;
      __int16 v20 = v9;
      __int16 v21 = 2114;
      __int16 v22 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Music subscription enabled, user is a subscriber. StatusType = %{public}@", (uint8_t *)&v17, 0x20u);
    }
    [*(id *)(a1 + 40) finishWithResult:&__kCFBooleanTrue];
  }
  else
  {
    if (!v5)
    {
      unsigned int v6 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v11 = [v6 OSLogObject];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = objc_opt_class();
      __int16 v13 = AMSLogKey();
      id v14 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v3 statusType]);
      int v17 = 138543874;
      uint64_t v18 = v12;
      __int16 v19 = 2114;
      __int16 v20 = v13;
      __int16 v21 = 2114;
      __int16 v22 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Music subscription not enabled, user is not subscribed. StatusType = %{public}@", (uint8_t *)&v17, 0x20u);
    }
    int v15 = *(void **)(a1 + 40);
    uint64_t v16 = AMSError();
    [v15 finishWithError:v16];
  }
}

void sub_100049060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100049080(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = [v3 isTVPlusSubscriber];
  uint64_t v5 = +[AMSLogConfig sharedAccountsDaemonConfig];
  unsigned int v6 = (void *)v5;
  if (v4)
  {
    if (!v5)
    {
      unsigned int v6 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v7 = [v6 OSLogObject];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = objc_opt_class();
      id v9 = AMSLogKey();
      uint64_t v10 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v3 isTVPlusSubscriber]);
      int v17 = 138543874;
      uint64_t v18 = v8;
      __int16 v19 = 2114;
      __int16 v20 = v9;
      __int16 v21 = 2114;
      __int16 v22 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] TV subscription enabled, user is a subscriber. SubscriptionData.isTVPlusSubscriber = %{public}@", (uint8_t *)&v17, 0x20u);
    }
    [*(id *)(a1 + 40) finishWithResult:&__kCFBooleanTrue];
  }
  else
  {
    if (!v5)
    {
      unsigned int v6 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v11 = [v6 OSLogObject];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = objc_opt_class();
      __int16 v13 = AMSLogKey();
      id v14 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v3 isTVPlusSubscriber]);
      int v17 = 138543874;
      uint64_t v18 = v12;
      __int16 v19 = 2114;
      __int16 v20 = v13;
      __int16 v21 = 2114;
      __int16 v22 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] TV subscription not enabled, user is not subscribed. SubscriptionData.isTVPlusSubscriber = %{public}@", (uint8_t *)&v17, 0x20u);
    }
    int v15 = *(void **)(a1 + 40);
    uint64_t v16 = AMSError();
    [v15 finishWithError:v16];
  }
}

Class sub_1000492EC(uint64_t a1)
{
  v3[0] = 0;
  if (!qword_100130368)
  {
    v3[1] = _NSConcreteStackBlock;
    v3[2] = (void *)3221225472;
    v3[3] = sub_100049430;
    v3[4] = &unk_1001127A8;
    void v3[5] = v3;
    long long v4 = off_100113A20;
    uint64_t v5 = 0;
    qword_100130368 = _sl_dlopen();
    if (!qword_100130368)
    {
      abort_report_np();
LABEL_8:
      sub_1000CB65C();
    }
    if (v3[0]) {
      free(v3[0]);
    }
  }
  Class result = objc_getClass("ASDSubscriptionEntitlements");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    goto LABEL_8;
  }
  qword_100130360 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_100049430()
{
  uint64_t result = _sl_dlopen();
  qword_100130368 = result;
  return result;
}

Class sub_1000494A4(uint64_t a1)
{
  v3[0] = 0;
  if (!qword_100130378)
  {
    v3[1] = _NSConcreteStackBlock;
    v3[2] = (void *)3221225472;
    v3[3] = sub_1000495E8;
    v3[4] = &unk_1001127A8;
    void v3[5] = v3;
    long long v4 = off_100113A38;
    uint64_t v5 = 0;
    qword_100130378 = _sl_dlopen();
    if (!qword_100130378)
    {
      abort_report_np();
LABEL_8:
      sub_1000CB684();
    }
    if (v3[0]) {
      free(v3[0]);
    }
  }
  Class result = objc_getClass("ICMusicSubscriptionStatusController");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    goto LABEL_8;
  }
  qword_100130370 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1000495E8()
{
  uint64_t result = _sl_dlopen();
  qword_100130378 = result;
  return result;
}

Class sub_10004965C(uint64_t a1)
{
  v3[0] = 0;
  if (!qword_100130388)
  {
    v3[1] = _NSConcreteStackBlock;
    v3[2] = (void *)3221225472;
    v3[3] = sub_1000497A0;
    v3[4] = &unk_1001127A8;
    void v3[5] = v3;
    long long v4 = off_100113A50;
    uint64_t v5 = 0;
    qword_100130388 = _sl_dlopen();
    if (!qword_100130388)
    {
      abort_report_np();
LABEL_8:
      sub_1000CB6AC();
    }
    if (v3[0]) {
      free(v3[0]);
    }
  }
  Class result = objc_getClass("WLKSubscriptionStore");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    goto LABEL_8;
  }
  qword_100130380 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1000497A0()
{
  uint64_t result = _sl_dlopen();
  qword_100130388 = result;
  return result;
}

void sub_100049868(id a1)
{
  qword_100130398 = objc_alloc_init(AMSDPaymentValidationService);
  _objc_release_x1();
}

void sub_1000498F8(id a1)
{
  id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.AppleMediaServices.AMSDPaymentValidationService", v3);
  id v2 = (void *)qword_1001303A8;
  qword_1001303A8 = (uint64_t)v1;
}

void sub_100049AA0(uint64_t a1)
{
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2050000000;
  id v2 = (void *)qword_1001303B0;
  uint64_t v12 = qword_1001303B0;
  if (!qword_1001303B0)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100049F44;
    uint64_t v8[3] = &unk_100112770;
    void v8[4] = &v9;
    sub_100049F44((uint64_t)v8);
    id v2 = (void *)v10[3];
  }
  id v3 = v2;
  _Block_object_dispose(&v9, 8);
  id v4 = objc_alloc_init(v3);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _OWORD v6[2] = sub_100049BF4;
  v6[3] = &unk_100113AB0;
  uint64_t v5 = *(void **)(a1 + 40);
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v5;
  [v4 paymentHardwareStatusWithType:1 completion:v6];
}

void sub_100049BDC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_100049BF4(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v4 = [a2 canMakeLocalPayments];
    uint64_t v5 = +[AMSLogConfig sharedPurchaseConfig];
    if (!v5)
    {
      uint64_t v5 = +[AMSLogConfig sharedConfig];
    }
    unsigned int v6 = [v5 OSLogObject];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = AMSLogKey();
      uint64_t v8 = objc_opt_class();
      uint64_t v9 = v8;
      if (v7)
      {
        uint64_t v2 = AMSLogKey();
        +[NSString stringWithFormat:@"%@: [%@] ", v9, v2];
      }
      else
      {
        +[NSString stringWithFormat:@"%@: ", v8];
      uint64_t v10 = };
      int v17 = AMSLogKey();
      uint64_t v18 = +[NSNumber numberWithBool:v4];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v25 = v10;
      __int16 v26 = 2114;
      int v27 = v17;
      __int16 v28 = 2114;
      __int16 v29 = v18;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Get payment hardware status. canUseApplePay = %{public}@", buf, 0x20u);

      if (v7)
      {

        uint64_t v10 = (void *)v2;
      }
    }
    uint64_t v19 = +[AMSDPaymentValidationService paymentHardwareType];
    uint64_t v16 = (void *)v19;
    CFStringRef v20 = @"false";
    if (v4) {
      CFStringRef v20 = @"true";
    }
    v22[0] = AMSHTTPHeaderPaymentHardwareStatus;
    v22[1] = AMSHTTPHeaderPaymentHardwareType;
    v23[0] = v20;
    v23[1] = v19;
    __int16 v21 = +[NSDictionary dictionaryWithObjects:v23 forKeys:v22 count:2];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    uint64_t v11 = +[AMSLogConfig sharedPurchaseConfig];
    if (!v11)
    {
      uint64_t v11 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v12 = [v11 OSLogObject];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      __int16 v13 = objc_opt_class();
      id v14 = v13;
      int v15 = AMSLogKey();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v25 = v13;
      __int16 v26 = 2114;
      int v27 = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to get paymentHardwareStatus", buf, 0x16u);
    }
    uint64_t v16 = AMSError();
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

Class sub_100049F44(uint64_t a1)
{
  v3[0] = 0;
  if (!qword_1001303B8)
  {
    v3[1] = _NSConcreteStackBlock;
    v3[2] = (void *)3221225472;
    v3[3] = sub_10004A088;
    v3[4] = &unk_1001127A8;
    void v3[5] = v3;
    long long v4 = off_100113AD0;
    uint64_t v5 = 0;
    qword_1001303B8 = _sl_dlopen();
    if (!qword_1001303B8)
    {
      abort_report_np();
LABEL_8:
      sub_1000CB6D4();
    }
    if (v3[0]) {
      free(v3[0]);
    }
  }
  Class result = objc_getClass("PKInAppPaymentService");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    goto LABEL_8;
  }
  qword_1001303B0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_10004A088()
{
  uint64_t result = _sl_dlopen();
  qword_1001303B8 = result;
  return result;
}

void sub_10004A150(id a1)
{
  qword_1001303C8 = objc_alloc_init(AMSDPaymentViewService);
  _objc_release_x1();
}

void sub_10004A4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10004A510(uint64_t a1)
{
  id v5 = [(id)objc_opt_class() _fdsResultCache];
  uint64_t v2 = [v5 objectForKeyedSubscript:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  long long v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10004A7C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = [(id)objc_opt_class() _fdsResultCache];
  [v3 setObject:v2 forKeyedSubscript:*(void *)(a1 + 40)];
}

void sub_10004AABC(uint64_t a1)
{
  id v2 = [(id)objc_opt_class() _fdsConsumedCache];
  [v2 setObject:&off_10011BEC0 forKey:*(void *)(a1 + 40)];
}

void sub_10004AE08(uint64_t a1)
{
  id v3 = [(id)objc_opt_class() _fdsConsumedCache];
  id v2 = [*(id *)(a1 + 40) purchaseIdentifier];
  [v3 setObject:&off_10011BED8 forKey:v2];
}

void sub_10004AE80(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  objc_msgSend(a3, "ams_sanitizedForSecureCoding");
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_10004AEFC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  objc_msgSend(a3, "ams_sanitizedForSecureCoding");
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_10004B328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10004B364(uint64_t a1)
{
  id v2 = [(id)objc_opt_class() _odiSessionCache];
  id v3 = [*(id *)(a1 + 40) purchaseIdentifier];
  uint64_t v4 = [v2 objectForKey:v3];

  if (v4)
  {
    uint64_t v5 = [v4 availablePartialAssessment];
    uint64_t v6 = *(void *)(a1 + 48);
  }
  else
  {
    id v7 = +[AMSLogConfig sharedConfig];
    if (!v7)
    {
      id v7 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v8 = [v7 OSLogObject];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = objc_opt_class();
      uint64_t v10 = AMSLogKey();
      uint64_t v11 = [*(id *)(a1 + 40) purchaseIdentifier];
      uint64_t v12 = AMSHashIfNeeded();
      int v15 = 138543874;
      uint64_t v16 = v9;
      __int16 v17 = 2114;
      uint64_t v18 = v10;
      __int16 v19 = 2112;
      CFStringRef v20 = v12;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to get ODI assessment, no matching session for id: %@", (uint8_t *)&v15, 0x20u);
    }
    uint64_t v5 = AMSError();
    uint64_t v6 = *(void *)(a1 + 56);
  }
  uint64_t v13 = *(void *)(v6 + 8);
  uint64_t v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v5;
}

void sub_10004B840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10004B878(uint64_t a1)
{
  id v2 = [(id)objc_opt_class() _odiSessionCache];
  id v3 = [v2 objectForKey:*(void *)(a1 + 40)];

  if (!v3)
  {
    uint64_t v10 = +[AMSLogConfig sharedConfig];
    if (!v10)
    {
      uint64_t v10 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v11 = [v10 OSLogObject];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = objc_opt_class();
      uint64_t v13 = AMSLogKey();
      uint64_t v14 = AMSHashIfNeeded();
      *(_DWORD *)long long buf = 138543874;
      uint64_t v19 = v12;
      __int16 v20 = 2114;
      __int16 v21 = v13;
      __int16 v22 = 2112;
      id v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to get ODI assessment, no matching session for id: %@", buf, 0x20u);
    }
    uint64_t v15 = AMSError();
    uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v9 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;
    goto LABEL_9;
  }
  uint64_t v4 = [*(id *)(a1 + 32) _odiAssessmentForSession:v3];
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8);
  id obj = *(id *)(v5 + 40);
  uint64_t v6 = [v4 resultWithError:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v9 = [(id)objc_opt_class() _odiSessionCache];
    [v9 setObject:0 forKey:*(void *)(a1 + 40)];
LABEL_9:
  }
}

void sub_10004BD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10004BD68(uint64_t a1)
{
  id v2 = [(id)objc_opt_class() _odiSessionCache];
  id v3 = [v2 objectForKey:*(void *)(a1 + 40)];

  if (v3)
  {
    objc_msgSend(v3, "provideFeedbackOnPayloadOutcome:", objc_msgSend(*(id *)(a1 + 32), "_outcomeTypeForOutcome:", *(void *)(a1 + 56)));
    if (*(unsigned char *)(a1 + 64))
    {
      uint64_t v4 = [(id)objc_opt_class() _odiSessionCache];
      [v4 setObject:0 forKey:*(void *)(a1 + 40)];
    }
  }
  else
  {
    uint64_t v5 = +[AMSLogConfig sharedConfig];
    if (!v5)
    {
      uint64_t v5 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v6 = [v5 OSLogObject];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = objc_opt_class();
      uint64_t v8 = AMSLogKey();
      uint64_t v9 = AMSHashIfNeeded();
      int v13 = 138543874;
      uint64_t v14 = v7;
      __int16 v15 = 2114;
      uint64_t v16 = v8;
      __int16 v17 = 2112;
      uint64_t v18 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to provide ODI assessment, no matching session for id: %@", (uint8_t *)&v13, 0x20u);
    }
    uint64_t v10 = AMSError();
    uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v12 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = v10;
  }
}

void sub_10004C1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10004C220(uint64_t a1)
{
  id v2 = [(id)objc_opt_class() _odiSessionCache];
  id v3 = [v2 objectForKey:*(void *)(a1 + 40)];

  if (v3)
  {
    uint64_t v15 = 0;
    uint64_t v16 = &v15;
    uint64_t v17 = 0x2050000000;
    uint64_t v4 = (void *)qword_100130450;
    uint64_t v18 = qword_100130450;
    if (!qword_100130450)
    {
      *(void *)long long buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = sub_10004F9F4;
      __int16 v20 = &unk_100112770;
      __int16 v21 = &v15;
      sub_10004F9F4((uint64_t)buf);
      uint64_t v4 = (void *)v16[3];
    }
    uint64_t v5 = v4;
    _Block_object_dispose(&v15, 8);
    id v6 = objc_alloc_init(v5);
    uint64_t v7 = objc_msgSend(*(id *)(a1 + 48), "attributes", v15);
    [v6 setAttributes:v7];

    [v3 updateWithAdditionalAttributes:v6];
  }
  else
  {
    uint64_t v8 = +[AMSLogConfig sharedConfig];
    if (!v8)
    {
      uint64_t v8 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v9 = [v8 OSLogObject];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = objc_opt_class();
      uint64_t v11 = AMSLogKey();
      uint64_t v12 = AMSHashIfNeeded();
      *(_DWORD *)long long buf = 138412802;
      *(void *)&uint8_t buf[4] = v10;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v11;
      *(_WORD *)&buf[22] = 2112;
      __int16 v20 = v12;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%@{public}@: [%{public}@] Failed to update ODI attributes, no matching session for id: %@", buf, 0x20u);
    }
    uint64_t v13 = AMSError();
    uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8);
    id v6 = *(id *)(v14 + 40);
    *(void *)(v14 + 40) = v13;
  }
}

void sub_10004C488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10004C828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v37 - 128), 8);
  _Block_object_dispose((const void *)(v37 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10004C864(void *a1)
{
  id v2 = [(id)objc_opt_class() _fdsConsumedCache];
  id v4 = [v2 objectForKey:a1[5]];

  id v3 = v4;
  if (v4)
  {
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = [v4 BOOLValue];
    id v3 = v4;
    *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = 1;
  }
}

void sub_10004C8F4(uint64_t a1)
{
  id v4 = [(id)objc_opt_class() _odiSessionCache];
  id v2 = [*(id *)(a1 + 40) stringValue];
  id v3 = [v4 objectForKey:v2];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v3 != 0;
}

void sub_10004C980(void *a1)
{
  id v2 = [(id)objc_opt_class() _fdsEvaluatorCache];
  id v3 = [v2 objectForKey:a1[5]];

  if (v3)
  {
    id v4 = +[AMSLogConfig sharedConfig];
    if (!v4)
    {
      id v4 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v5 = [v4 OSLogObject];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = objc_opt_class();
      uint64_t v7 = a1[6];
      uint64_t v8 = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1[7] + 8) + 24)];
      int v10 = 138543874;
      uint64_t v11 = v6;
      __int16 v12 = 2114;
      uint64_t v13 = v7;
      __int16 v14 = 2114;
      uint64_t v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Invoking FDS completion SPI with consumption state: %{public}@", (uint8_t *)&v10, 0x20u);
    }
    uint64_t v9 = objc_alloc_init(L1vrniCr6VjgMaLl);
    [(L1vrniCr6VjgMaLl *)v9 setConsumed:*(unsigned __int8 *)(*(void *)(a1[7] + 8) + 24)];
    [v3 eVZ8hjC0Tuzwvnqc:v9];
  }
}

void sub_10004CB10(uint64_t a1)
{
  id v2 = [(id)objc_opt_class() _fdsConsumedCache];
  [v2 setObject:0 forKey:*(void *)(a1 + 40)];
}

void sub_10004CB6C(uint64_t a1)
{
  id v2 = [(id)objc_opt_class() _fdsEvaluatorCache];
  [v2 setObject:0 forKey:*(void *)(a1 + 40)];
}

void sub_10004CFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10004D010(uint64_t a1)
{
  id v2 = [(id)objc_opt_class() _odiSessionCache];
  [v2 setObject:*(void *)(a1 + 40) forKey:*(void *)(a1 + 48)];
}

void sub_10004D8B8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 48);
    if (v7) {
      (*(void (**)(uint64_t, void, id))(v7 + 16))(v7, 0, v6);
    }
  }
  else
  {
    id v8 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v9 = [*(id *)(a1 + 32) account];
    int v10 = objc_msgSend(v9, "ams_firstName");
    uint64_t v39 = 0;
    id v40 = &v39;
    uint64_t v41 = 0x2020000000;
    uint64_t v11 = (void *)qword_100130468;
    uint64_t v42 = qword_100130468;
    if (!qword_100130468)
    {
      long long v34 = _NSConcreteStackBlock;
      uint64_t v35 = 3221225472;
      id v36 = sub_10004FC18;
      uint64_t v37 = &unk_100112770;
      id v38 = &v39;
      __int16 v12 = (void *)sub_10004FA4C();
      v40[3] = (uint64_t)dlsym(v12, "ODIAttributeKeyUserFirstName");
      qword_100130468 = *(void *)(v38[1] + 24);
      uint64_t v11 = (void *)v40[3];
    }
    _Block_object_dispose(&v39, 8);
    if (!v11) {
      sub_1000CB5C0();
    }
    [v8 setObject:v10 forKeyedSubscript:*v11];

    uint64_t v13 = [*(id *)(a1 + 32) account];
    __int16 v14 = objc_msgSend(v13, "ams_lastName");
    uint64_t v39 = 0;
    id v40 = &v39;
    uint64_t v41 = 0x2020000000;
    uint64_t v15 = (void *)qword_100130470;
    uint64_t v42 = qword_100130470;
    if (!qword_100130470)
    {
      long long v34 = _NSConcreteStackBlock;
      uint64_t v35 = 3221225472;
      id v36 = sub_10004FC68;
      uint64_t v37 = &unk_100112770;
      id v38 = &v39;
      uint64_t v16 = (void *)sub_10004FA4C();
      v40[3] = (uint64_t)dlsym(v16, "ODIAttributeKeyUserLastName");
      qword_100130470 = *(void *)(v38[1] + 24);
      uint64_t v15 = (void *)v40[3];
    }
    _Block_object_dispose(&v39, 8);
    if (!v15) {
      sub_1000CB5C0();
    }
    [v8 setObject:v14 forKeyedSubscript:*v15];

    uint64_t v17 = +[AMSDevice phoneNumber];
    uint64_t v39 = 0;
    id v40 = &v39;
    uint64_t v41 = 0x2020000000;
    uint64_t v18 = (void *)qword_100130478;
    uint64_t v42 = qword_100130478;
    if (!qword_100130478)
    {
      long long v34 = _NSConcreteStackBlock;
      uint64_t v35 = 3221225472;
      id v36 = sub_10004FCB8;
      uint64_t v37 = &unk_100112770;
      id v38 = &v39;
      uint64_t v19 = (void *)sub_10004FA4C();
      v40[3] = (uint64_t)dlsym(v19, "ODIAttributeKeyUserPhoneNumber");
      qword_100130478 = *(void *)(v38[1] + 24);
      uint64_t v18 = (void *)v40[3];
    }
    _Block_object_dispose(&v39, 8);
    if (!v18) {
      sub_1000CB5C0();
    }
    [v8 setObject:v17 forKeyedSubscript:*v18];

    __int16 v20 = [*(id *)(a1 + 32) account];
    __int16 v21 = [v20 username];
    uint64_t v39 = 0;
    id v40 = &v39;
    uint64_t v41 = 0x2020000000;
    __int16 v22 = (void *)qword_100130480;
    uint64_t v42 = qword_100130480;
    if (!qword_100130480)
    {
      long long v34 = _NSConcreteStackBlock;
      uint64_t v35 = 3221225472;
      id v36 = sub_10004FD08;
      uint64_t v37 = &unk_100112770;
      id v38 = &v39;
      id v23 = (void *)sub_10004FA4C();
      v40[3] = (uint64_t)dlsym(v23, "ODIAttributeKeyUserEmail");
      qword_100130480 = *(void *)(v38[1] + 24);
      __int16 v22 = (void *)v40[3];
    }
    _Block_object_dispose(&v39, 8);
    if (!v22) {
      sub_1000CB5C0();
    }
    [v8 setObject:v21 forKeyedSubscript:*v22];

    id v24 = [*(id *)(a1 + 32) options];
    uint64_t v25 = [v24 bundleIdentifier];
    uint64_t v39 = 0;
    id v40 = &v39;
    uint64_t v41 = 0x2020000000;
    __int16 v26 = (void *)qword_100130488;
    uint64_t v42 = qword_100130488;
    if (!qword_100130488)
    {
      long long v34 = _NSConcreteStackBlock;
      uint64_t v35 = 3221225472;
      id v36 = sub_10004FD58;
      uint64_t v37 = &unk_100112770;
      id v38 = &v39;
      int v27 = (void *)sub_10004FA4C();
      v40[3] = (uint64_t)dlsym(v27, "ODIAttributeKeyCallerID");
      qword_100130488 = *(void *)(v38[1] + 24);
      __int16 v26 = (void *)v40[3];
    }
    _Block_object_dispose(&v39, 8);
    if (!v26) {
      sub_1000CB5C0();
    }
    [v8 setObject:v25 forKeyedSubscript:*v26];

    id v28 = [objc_alloc((Class)AMSODIAdditionalAttributes) initWithAttributes:v8];
    __int16 v29 = *(void **)(a1 + 40);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_10004DEA8;
    v30[3] = &unk_100113C50;
    void v30[4] = v29;
    id v31 = v5;
    id v33 = *(id *)(a1 + 48);
    id v32 = *(id *)(a1 + 32);
    [v29 updateODIWithAttributes:v28 forSessionIdentifier:v31 completion:v30];
  }
}

void sub_10004DE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10004DEA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 56);
    if (v4) {
      (*(void (**)(uint64_t, void, id))(v4 + 16))(v4, 0, v3);
    }
  }
  else
  {
    id v5 = *(void **)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10004DF8C;
    v7[3] = &unk_100113C28;
    id v9 = *(id *)(a1 + 56);
    id v8 = *(id *)(a1 + 48);
    [v5 getODIAssessmentForSessionIdentifier:v6 clearCache:0 completion:v7];
  }
}

void sub_10004DF8C(uint64_t a1, void *a2, void *a3)
{
  if (*(void *)(a1 + 40))
  {
    id v5 = a3;
    id v6 = a2;
    id v7 = objc_alloc((Class)AMSFDSResult);
    id v8 = [v6 stringValue];

    id v9 = [*(id *)(a1 + 32) options];
    id v10 = objc_msgSend(v7, "initWithValue:action:", v8, objc_msgSend(v9, "action"));

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_10004E730(uint64_t a1)
{
  id v4 = [(id)objc_opt_class() _fdsEvaluatorCache];
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [*(id *)(a1 + 48) purchaseIdentifier];
  [v4 setObject:v2 forKey:v3];
}

void sub_10004E7A4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = +[AMSLogConfig sharedConfig];
  id v9 = (void *)v8;
  if (v6)
  {
    if (!v8)
    {
      id v9 = +[AMSLogConfig sharedConfig];
    }
    id v10 = [v9 OSLogObject];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = [*(id *)(a1 + 32) logKey];
      int v17 = 138543362;
      uint64_t v18 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "AMSDSecurityService: [%{public}@] Successfully generated FDS.", (uint8_t *)&v17, 0xCu);
    }
    [*(id *)(a1 + 40) finishWithResult:v6];
  }
  else
  {
    if (!v8)
    {
      id v9 = +[AMSLogConfig sharedConfig];
    }
    __int16 v12 = [v9 OSLogObject];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = [*(id *)(a1 + 32) logKey];
      __int16 v14 = AMSHashIfNeeded();
      int v17 = 138543618;
      uint64_t v18 = v13;
      __int16 v19 = 2114;
      __int16 v20 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "AMSDSecurityService: [%{public}@] Failed to generate FDS, error = %{public}@", (uint8_t *)&v17, 0x16u);
    }
    uint64_t v15 = *(void **)(a1 + 40);
    if (v7)
    {
      [v15 finishWithError:v7];
    }
    else
    {
      uint64_t v16 = AMSError();
      [v15 finishWithError:v16];
    }
  }
}

void sub_10004EA34(id a1)
{
  qword_1001303D8 = (uint64_t)[objc_alloc((Class)AMSLRUCache) initWithMaxSize:5];
  _objc_release_x1();
}

void sub_10004EACC(id a1)
{
  id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.AMSDPurchaseService.FDSConsumedCache", v3);
  uint64_t v2 = (void *)qword_1001303E8;
  qword_1001303E8 = (uint64_t)v1;
}

void sub_10004EB84(id a1)
{
  qword_1001303F8 = (uint64_t)[objc_alloc((Class)AMSLRUCache) initWithMaxSize:5];
  _objc_release_x1();
}

void sub_10004EC1C(id a1)
{
  id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.AMSDPurchaseService.FDSEvaluatorCache", v3);
  uint64_t v2 = (void *)qword_100130408;
  qword_100130408 = (uint64_t)v1;
}

void sub_10004ECD4(id a1)
{
  qword_100130418 = (uint64_t)objc_alloc_init((Class)NSMutableDictionary);
  _objc_release_x1();
}

void sub_10004ED64(id a1)
{
  id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.AMSDPurchaseService.FDSResultCache", v3);
  uint64_t v2 = (void *)qword_100130428;
  qword_100130428 = (uint64_t)v1;
}

void sub_10004EFDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _OWORD v6[2] = sub_10004F074;
  v6[3] = &unk_100113D88;
  id v7 = v3;
  id v5 = v3;
  [v4 getAssessment:v6];
}

void sub_10004F074(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = +[AMSLogConfig sharedConfig];
    if (!v7)
    {
      id v7 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v8 = [v7 OSLogObject];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v9 = AMSLogKey();
      int v18 = 138543618;
      __int16 v19 = v9;
      __int16 v20 = 2114;
      id v21 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "AMSDPurchaseService: [%{public}@] ODI assessment failed with error: %{public}@", (uint8_t *)&v18, 0x16u);
    }
    [*(id *)(a1 + 32) finishWithError:v6];
  }
  else
  {
    uint64_t v10 = +[AMSLogConfig sharedConfig];
    uint64_t v11 = (void *)v10;
    if (v5)
    {
      if (!v10)
      {
        uint64_t v11 = +[AMSLogConfig sharedConfig];
      }
      __int16 v12 = [v11 OSLogObject];
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = AMSLogKey();
        __int16 v14 = AMSHashIfNeeded();
        int v18 = 138543618;
        __int16 v19 = v13;
        __int16 v20 = 2112;
        id v21 = v14;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "AMSDPurchaseService: [%{public}@] ODI assessment: %@", (uint8_t *)&v18, 0x16u);
      }
      id v15 = [objc_alloc((Class)AMSODIAssessment) initWithStringValue:v5];
      [*(id *)(a1 + 32) finishWithResult:v15];
    }
    else
    {
      if (!v10)
      {
        uint64_t v11 = +[AMSLogConfig sharedConfig];
      }
      uint64_t v16 = [v11 OSLogObject];
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        int v17 = AMSLogKey();
        int v18 = 138543362;
        __int16 v19 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "AMSDPurchaseService: [%{public}@] ODI assessment failed with unknown error", (uint8_t *)&v18, 0xCu);
      }
      AMSError();
      id v15 = (id)objc_claimAutoreleasedReturnValue();
      [*(id *)(a1 + 32) finishWithError:v15];
    }
  }
}

void sub_10004F898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10004F91C(id a1)
{
  qword_100130438 = (uint64_t)[objc_alloc((Class)AMSLRUCache) initWithMaxSize:5];
  _objc_release_x1();
}

void sub_10004F9B4(id a1)
{
  qword_100130448 = (uint64_t)dispatch_queue_create("com.apple.AMSDPurchaseService.ODISessionCache", 0);
  _objc_release_x1();
}

Class sub_10004F9F4(uint64_t a1)
{
  sub_10004FA4C();
  Class result = objc_getClass("ODIAdditionalAttributes");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1000CB6FC();
  }
  qword_100130450 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_10004FA4C()
{
  v3[0] = 0;
  if (!qword_100130458)
  {
    v3[1] = _NSConcreteStackBlock;
    v3[2] = 3221225472;
    v3[3] = sub_10004FB4C;
    v3[4] = &unk_1001127A8;
    void v3[5] = v3;
    long long v4 = off_100113E10;
    uint64_t v5 = 0;
    qword_100130458 = _sl_dlopen();
  }
  uint64_t v0 = qword_100130458;
  dispatch_queue_t v1 = (void *)v3[0];
  if (!qword_100130458)
  {
    dispatch_queue_t v1 = (void *)abort_report_np();
    goto LABEL_7;
  }
  if (v3[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t sub_10004FB4C()
{
  uint64_t result = _sl_dlopen();
  qword_100130458 = result;
  return result;
}

Class sub_10004FBC0(uint64_t a1)
{
  sub_10004FA4C();
  Class result = objc_getClass("ODISession");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1000CB5E4();
  }
  qword_100130460 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_10004FC18(uint64_t a1)
{
  uint64_t v2 = (void *)sub_10004FA4C();
  Class result = dlsym(v2, "ODIAttributeKeyUserFirstName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100130468 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_10004FC68(uint64_t a1)
{
  uint64_t v2 = (void *)sub_10004FA4C();
  Class result = dlsym(v2, "ODIAttributeKeyUserLastName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100130470 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_10004FCB8(uint64_t a1)
{
  uint64_t v2 = (void *)sub_10004FA4C();
  Class result = dlsym(v2, "ODIAttributeKeyUserPhoneNumber");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100130478 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_10004FD08(uint64_t a1)
{
  uint64_t v2 = (void *)sub_10004FA4C();
  Class result = dlsym(v2, "ODIAttributeKeyUserEmail");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100130480 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_10004FD58(uint64_t a1)
{
  uint64_t v2 = (void *)sub_10004FA4C();
  Class result = dlsym(v2, "ODIAttributeKeyCallerID");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100130488 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_10004FDA8(uint64_t a1)
{
  uint64_t v2 = (void *)sub_10004FA4C();
  Class result = dlsym(v2, "ODIServiceProviderIdAmpPaidBuy");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100130490 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_10004FDF8(uint64_t a1)
{
  uint64_t v2 = (void *)sub_10004FA4C();
  Class result = dlsym(v2, "ODIServiceProviderIdApplicationCreate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100130498 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_10004FE48(uint64_t a1)
{
  uint64_t v2 = (void *)sub_10004FA4C();
  Class result = dlsym(v2, "ODIServiceProviderIdApplicationSubmit");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001304A0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_10004FE98(uint64_t a1)
{
  uint64_t v2 = (void *)sub_10004FA4C();
  Class result = dlsym(v2, "ODIServiceProviderIdIdUpdate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001304A8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_10004FEE8(uint64_t a1)
{
  uint64_t v2 = (void *)sub_10004FA4C();
  Class result = dlsym(v2, "ODIServiceProviderIdTDMTrustedInference");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1001304B0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_100050C50(uint64_t a1, int a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = +[AMSLogConfig sharedAccountsConfig];
  if (!v5)
  {
    uint64_t v5 = +[AMSLogConfig sharedConfig];
  }
  id v6 = [v5 OSLogObject];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = objc_opt_class();
    uint64_t v8 = AMSLogKey();
    int v9 = 138544130;
    uint64_t v10 = v7;
    __int16 v11 = 2114;
    __int16 v12 = v8;
    __int16 v13 = 1024;
    int v14 = a2;
    __int16 v15 = 2114;
    id v16 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Data cache update result: %d error: %{public}@", (uint8_t *)&v9, 0x26u);
  }
}

void sub_100050D80(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2)
  {
    id v3 = +[AMSLogConfig sharedAccountsConfig];
    if (!v3)
    {
      id v3 = +[AMSLogConfig sharedConfig];
    }
    id v4 = [v3 OSLogObject];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = objc_opt_class();
      id v6 = AMSLogKey();
      int v7 = 138543874;
      uint64_t v8 = v5;
      __int16 v9 = 2114;
      uint64_t v10 = v6;
      __int16 v11 = 2114;
      id v12 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Account data sync returned error: %{public}@", (uint8_t *)&v7, 0x20u);
    }
  }
}

void sub_100051140(uint64_t a1, int a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = +[AMSLogConfig sharedAccountsMultiUserConfig];
  id v6 = (void *)v5;
  if (a2)
  {
    if (!v5)
    {
      id v6 = +[AMSLogConfig sharedConfig];
    }
    int v7 = [v6 OSLogObject];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 138543362;
      id v13 = (id)objc_opt_class();
      id v8 = v13;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@: Successfully updated the multi-user tokens.", (uint8_t *)&v12, 0xCu);
    }
  }
  else
  {
    if (!v5)
    {
      id v6 = +[AMSLogConfig sharedConfig];
    }
    int v7 = [v6 OSLogObject];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      __int16 v9 = objc_opt_class();
      id v10 = v9;
      __int16 v11 = AMSHashIfNeeded();
      int v12 = 138543618;
      id v13 = v9;
      __int16 v14 = 2114;
      __int16 v15 = v11;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}@: Failed to update the multi-user tokens. error = %{public}@", (uint8_t *)&v12, 0x16u);
    }
  }
}

id sub_100051AD0(uint64_t a1)
{
  id v2 = +[AMSLogConfig sharedAccountsDaemonConfig];
  if (!v2)
  {
    id v2 = +[AMSLogConfig sharedConfig];
  }
  id v3 = [v2 OSLogObject];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = AMSLogKey();
    uint64_t v5 = objc_opt_class();
    uint64_t v6 = v5;
    id v31 = (void *)v4;
    if (v4)
    {
      uint64_t v29 = AMSLogKey();
      +[NSString stringWithFormat:@"%@: [%@] ", v6, v29];
    }
    else
    {
      +[NSString stringWithFormat:@"%@: ", v5];
    int v7 = };
    __int16 v30 = [*(id *)(a1 + 32) account];
    id v8 = objc_msgSend(v30, "ams_DSID");
    __int16 v9 = AMSHashIfNeeded();
    id v10 = [*(id *)(a1 + 32) environment];
    __int16 v11 = [*(id *)(a1 + 32) token];
    int v12 = [v11 base64EncodedStringWithOptions:0];
    id v13 = AMSHashIfNeeded();
    *(_DWORD *)long long buf = 138544130;
    uint64_t v35 = v7;
    __int16 v36 = 2114;
    uint64_t v37 = v9;
    __int16 v38 = 2114;
    uint64_t v39 = v10;
    __int16 v40 = 2114;
    uint64_t v41 = v13;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@Performing token registration. account: %{public}@ | environment: %{public}@ | token: %{public}@", buf, 0x2Au);

    if (v31)
    {

      int v7 = (void *)v29;
    }
  }
  uint64_t v14 = [*(id *)(a1 + 32) token];
  if (v14
    && (__int16 v15 = (void *)v14,
        [*(id *)(a1 + 32) bag],
        id v16 = objc_claimAutoreleasedReturnValue(),
        v16,
        v15,
        v16))
  {
    int v17 = objc_opt_class();
    int v18 = [*(id *)(a1 + 32) account];
    __int16 v19 = [*(id *)(a1 + 32) environment];
    __int16 v20 = [*(id *)(a1 + 32) token];
    id v21 = [v17 shouldPerformForAccount:v18 environment:v19 token:v20];
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_100051E88;
    v32[3] = &unk_100113EF8;
    v32[4] = *(void *)(a1 + 32);
    char v33 = 0;
    __int16 v22 = [v21 thenWithBlock:v32];
  }
  else
  {
    id v23 = [*(id *)(a1 + 32) bag];
    if (v23) {
      CFStringRef v24 = @"true";
    }
    else {
      CFStringRef v24 = @"false";
    }
    uint64_t v25 = [*(id *)(a1 + 32) token];
    if (v25) {
      CFStringRef v26 = @"true";
    }
    else {
      CFStringRef v26 = @"false";
    }
    CFStringRef v28 = v26;
    int v18 = AMSErrorWithFormat();

    __int16 v22 = +[AMSPromise promiseWithError:](AMSPromise, "promiseWithError:", v18, v24, v28);
  }

  return v22;
}

id sub_100051E88(uint64_t a1, void *a2)
{
  if ([a2 BOOLValue])
  {
    id v3 = objc_alloc((Class)AMSPushRegisterTask);
    uint64_t v4 = [*(id *)(a1 + 32) account];
    uint64_t v5 = [*(id *)(a1 + 32) token];
    uint64_t v6 = [*(id *)(a1 + 32) environment];
    int v7 = [*(id *)(a1 + 32) bag];
    id v8 = [v3 initWithAccount:v4 token:v5 environment:v6 bag:v7];

    __int16 v9 = [v8 performTask];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_1000520B8;
    v15[3] = &unk_100111F20;
    void v15[4] = *(void *)(a1 + 32);
    [v9 addErrorBlock:v15];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    _OWORD v14[2] = sub_100052250;
    v14[3] = &unk_100113EA8;
    v14[4] = *(void *)(a1 + 32);
    [v9 addSuccessBlock:v14];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1000523D8;
    void v12[3] = &unk_100113ED0;
    char v13 = *(unsigned char *)(a1 + 40);
    void v12[4] = *(void *)(a1 + 32);
    [v9 addFinishBlock:v12];
  }
  else
  {
    id v10 = AMSError();
    __int16 v9 = +[AMSPromise promiseWithError:v10];
  }
  return v9;
}

void sub_1000520B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[AMSLogConfig sharedAccountsDaemonConfig];
  if (!v4)
  {
    uint64_t v4 = +[AMSLogConfig sharedConfig];
  }
  uint64_t v5 = [v4 OSLogObject];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = AMSLogKey();
    uint64_t v7 = objc_opt_class();
    uint64_t v8 = v7;
    if (v6)
    {
      a1 = AMSLogKey();
      +[NSString stringWithFormat:@"%@: [%@] ", v8, a1];
    }
    else
    {
      +[NSString stringWithFormat:@"%@: ", v7];
    __int16 v9 = };
    id v10 = AMSLogableError();
    *(_DWORD *)long long buf = 138543618;
    int v12 = v9;
    __int16 v13 = 2114;
    uint64_t v14 = v10;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}@Token registration failed with error: %{public}@", buf, 0x16u);
    if (v6)
    {

      __int16 v9 = (void *)a1;
    }
  }
}

void sub_100052250(uint64_t a1)
{
  uint64_t v1 = a1;
  id v2 = *(void **)(a1 + 32);
  id v3 = [v2 token];
  [v2 _updateCachedCriteriaWithToken:v3];

  uint64_t v4 = +[AMSLogConfig sharedAccountsDaemonConfig];
  if (!v4)
  {
    uint64_t v4 = +[AMSLogConfig sharedConfig];
  }
  uint64_t v5 = [v4 OSLogObject];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = AMSLogKey();
    uint64_t v7 = objc_opt_class();
    uint64_t v8 = v7;
    if (v6)
    {
      uint64_t v1 = AMSLogKey();
      +[NSString stringWithFormat:@"%@: [%@] ", v8, v1];
    }
    else
    {
      +[NSString stringWithFormat:@"%@: ", v7];
    __int16 v9 = };
    *(_DWORD *)long long buf = 138543362;
    __int16 v11 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Token registration succeeded", buf, 0xCu);
    if (v6)
    {

      __int16 v9 = (void *)v1;
    }
  }
}

void sub_1000523D8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    id v2 = objc_opt_class();
    id v4 = [*(id *)(a1 + 32) account];
    id v3 = [*(id *)(a1 + 32) environment];
    [v2 _updateThrottleForAccount:v4 environment:v3];
  }
}

id sub_100052874(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (([v4 BOOLValue] & 1) == 0)
  {
    __int16 v11 = v4;
LABEL_21:
    id v23 = +[AMSPromise promiseWithResult:v11];
    goto LABEL_22;
  }
  if ([*(id *)(a1 + 56) _shouldThrottleForAccount:*(void *)(a1 + 32) environment:*(void *)(a1 + 40)])
  {
    uint64_t v5 = +[AMSLogConfig sharedAccountsDaemonConfig];
    if (!v5)
    {
      uint64_t v5 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v6 = [v5 OSLogObject];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = AMSLogKey();
      uint64_t v8 = objc_opt_class();
      uint64_t v9 = v8;
      if (v7)
      {
        uint64_t v2 = AMSLogKey();
        +[NSString stringWithFormat:@"%@: [%@] ", v9, v2];
      }
      else
      {
        +[NSString stringWithFormat:@"%@: ", v8];
      id v10 = };
      CFStringRef v24 = AMSHashIfNeeded();
      uint64_t v25 = AMSHashIfNeeded();
      *(_DWORD *)long long buf = 138543874;
      uint64_t v28 = (uint64_t)v10;
      __int16 v29 = 2114;
      __int16 v30 = v24;
      __int16 v31 = 2114;
      id v32 = v25;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@Throttling registration. account: %{public}@ | environment: %{public}@", buf, 0x20u);
      if (v7)
      {

        id v10 = (void *)v2;
      }
    }
    __int16 v11 = &__kCFBooleanFalse;
    goto LABEL_21;
  }
  int v12 = [*(id *)(a1 + 56) _createCriteriaWithToken:*(void *)(a1 + 48)];
  __int16 v13 = objc_msgSend(*(id *)(a1 + 32), "ams_registerSuccessCriteria");
  uint64_t v14 = [v13 objectForKeyedSubscript:*(void *)(a1 + 40)];

  unsigned int v15 = [v14 isEqualToString:v12];
  if (v15)
  {
    id v16 = +[AMSLogConfig sharedAccountsDaemonConfig];
    if (!v16)
    {
      id v16 = +[AMSLogConfig sharedConfig];
    }
    int v17 = [v16 OSLogObject];
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = objc_opt_class();
      __int16 v19 = AMSLogKey();
      __int16 v20 = [*(id *)(a1 + 32) username];
      id v21 = AMSHashIfNeeded();
      *(_DWORD *)long long buf = 138543874;
      uint64_t v28 = v18;
      __int16 v29 = 2114;
      __int16 v30 = v19;
      __int16 v31 = 2114;
      id v32 = v21;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Already posted registration for %{public}@", buf, 0x20u);
    }
  }
  __int16 v22 = +[NSNumber numberWithInt:v15 ^ 1];
  id v23 = +[AMSPromise promiseWithResult:v22];

LABEL_22:
  return v23;
}

void sub_1000536DC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_100053718(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _deviceNameChanged];
}

id sub_100053758(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _startConnectionWithEnvironment:a2];
}

void sub_100053820(id a1)
{
  qword_1001304C0 = objc_alloc_init(AMSDPushService);
  _objc_release_x1();
}

id sub_100053C60(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateDeviceAccountPrivacyIfNeeded];
}

AMSPromise *__cdecl sub_100055034(id a1, NSArray *a2)
{
  uint64_t v2 = +[NSNumber numberWithInt:[(NSArray *)a2 count] != 0];
  id v3 = +[AMSPromise promiseWithResult:v2];

  return (AMSPromise *)v3;
}

AMSPromise *__cdecl sub_1000550AC(id a1, NSArray *a2)
{
  uint64_t v2 = +[NSNumber numberWithInt:[(NSArray *)a2 count] != 0];
  id v3 = +[AMSPromise promiseWithResult:v2];

  return (AMSPromise *)v3;
}

id sub_100055124(uint64_t a1, void *a2)
{
  if ([a2 BOOLValue])
  {
    id v3 = *(void **)(a1 + 32);
    id v4 = +[AMSDBag defaultBag];
    uint64_t v5 = [v3 _pushEnvironmentFromBag:v4];
    uint64_t v6 = [v5 thenWithBlock:&stru_100113FF0];
  }
  else
  {
    id v4 = +[AMSOptional optionalWithNil];
    uint64_t v6 = +[AMSPromise promiseWithResult:v4];
  }

  return v6;
}

AMSPromise *__cdecl sub_1000551E8(id a1, NSString *a2)
{
  uint64_t v2 = +[AMSOptional optionalWithValue:a2];
  id v3 = +[AMSPromise promiseWithResult:v2];

  return (AMSPromise *)v3;
}

id sub_100055250(uint64_t a1, void *a2)
{
  if ([a2 BOOLValue])
  {
    id v3 = *(void **)(a1 + 32);
    id v4 = +[AMSDBag bagForMediaType:AMSAccountMediaTypeAppStoreSandbox];
    uint64_t v5 = [v3 _pushEnvironmentFromBag:v4];
    uint64_t v6 = [v5 thenWithBlock:&stru_100114010];
  }
  else
  {
    id v4 = +[AMSOptional optionalWithNil];
    uint64_t v6 = +[AMSPromise promiseWithResult:v4];
  }

  return v6;
}

AMSPromise *__cdecl sub_100055320(id a1, NSString *a2)
{
  uint64_t v2 = +[AMSOptional optionalWithValue:a2];
  id v3 = +[AMSPromise promiseWithResult:v2];

  return (AMSPromise *)v3;
}

AMSPromise *__cdecl sub_100055388(id a1, NSArray *a2)
{
  uint64_t v2 = a2;
  id v3 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", -[NSArray count](v2, "count"));
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v4 = v2;
  id v5 = [(NSArray *)v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v15;
    do
    {
      for (unint64_t i = 0; i != v6; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = objc_msgSend(*(id *)(*((void *)&v14 + 1) + 8 * i), "value", (void)v14);
        objc_msgSend(v3, "ams_addNullableObject:", v9);
      }
      id v6 = [(NSArray *)v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v6);
  }

  id v10 = +[NSSet setWithArray:v3];
  __int16 v11 = [v10 allObjects];
  int v12 = +[AMSPromise promiseWithResult:v11];

  return (AMSPromise *)v12;
}

id sub_100055524(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v3, "count"));
  os_unfair_lock_assert_not_owner((const os_unfair_lock *)(*(void *)(a1 + 32) + 8));
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id v5 = [*(id *)(*(void *)(a1 + 32) + 32) allKeys];
  id v6 = [v5 countByEnumeratingWithState:&v29 objects:v34 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v30;
    do
    {
      for (unint64_t i = 0; i != v7; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v30 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void *)(*((void *)&v29 + 1) + 8 * i);
        if (([v3 containsObject:v10] & 1) == 0)
        {
          __int16 v11 = *(id **)(a1 + 32);
          int v12 = [v11[4] objectForKeyedSubscript:v10];
          [v11 _shutDownConnection:v12 forEnvironment:v10];
        }
      }
      id v7 = [v5 countByEnumeratingWithState:&v29 objects:v34 count:16];
    }
    while (v7);
  }

  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v13 = v3;
  id v14 = [v13 countByEnumeratingWithState:&v25 objects:v33 count:16];
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = *(void *)v26;
    do
    {
      for (j = 0; j != v15; j = (char *)j + 1)
      {
        if (*(void *)v26 != v16) {
          objc_enumerationMutation(v13);
        }
        uint64_t v18 = *(void *)(*((void *)&v25 + 1) + 8 * (void)j);
        __int16 v19 = [*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v18];

        if (!v19) {
          [v4 addObject:v18];
        }
      }
      id v15 = [v13 countByEnumeratingWithState:&v25 objects:v33 count:16];
    }
    while (v15);
  }

  os_unfair_lock_assert_owner((const os_unfair_lock *)(*(void *)(a1 + 32) + 8));
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  if ([v4 count])
  {
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_100055848;
    v24[3] = &unk_100114058;
    void v24[4] = *(void *)(a1 + 32);
    __int16 v20 = objc_msgSend(v13, "ams_mapWithTransform:", v24);
    id v21 = +[AMSPromise promiseWithAll:v20];
  }
  else
  {
    __int16 v22 = +[AMSBinaryPromise promiseWithSuccess];
    id v21 = [v22 promiseAdapter];
  }
  return v21;
}

id sub_100055848(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = [*(id *)(a1 + 32) _startConnectionWithEnvironment:a2];
  id v3 = [v2 promiseAdapter];

  return v3;
}

void sub_100055ABC(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = +[AMSLogConfig sharedAccountsDaemonConfig];
  if (!v3)
  {
    id v3 = +[AMSLogConfig sharedConfig];
  }
  id v4 = [v3 OSLogObject];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = objc_opt_class();
    id v6 = AMSLogKey();
    id v7 = AMSHashIfNeeded();
    int v8 = 138543874;
    uint64_t v9 = v5;
    __int16 v10 = 2114;
    __int16 v11 = v6;
    __int16 v12 = 2114;
    id v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to determine the push environment. error = %{public}@", (uint8_t *)&v8, 0x20u);
  }
}

AMSPromise *sub_100055BF0(uint64_t a1)
{
  return +[AMSPromise promiseWithResult:*(void *)(a1 + 32)];
}

BOOL sub_100056010(id a1, ACAccount *a2)
{
  return [(ACAccount *)a2 ams_isLocalAccount] ^ 1;
}

id sub_100056030(uint64_t a1, void *a2)
{
  id v2 = objc_msgSend(a2, "ams_filterUsingTest:", *(void *)(a1 + 32));
  id v3 = +[AMSPromise promiseWithResult:v2];

  return v3;
}

id sub_100056094(uint64_t a1, void *a2)
{
  id v2 = objc_msgSend(a2, "ams_filterUsingTest:", *(void *)(a1 + 32));
  id v3 = +[AMSPromise promiseWithResult:v2];

  return v3;
}

AMSPromise *__cdecl sub_1000560F8(id a1, ACAccount *a2)
{
  id v6 = a2;
  id v2 = a2;
  id v3 = +[NSArray arrayWithObjects:&v6 count:1];
  id v4 = +[AMSPromise promiseWithResult:](AMSPromise, "promiseWithResult:", v3, v6);

  return (AMSPromise *)v4;
}

AMSPromise *__cdecl sub_1000561B4(id a1, NSArray *a2)
{
  id v2 = a2;
  id v3 = [(NSArray *)v2 objectAtIndexedSubscript:0];
  id v4 = [(NSArray *)v2 objectAtIndexedSubscript:1];
  uint64_t v5 = [v3 arrayByAddingObjectsFromArray:v4];
  id v6 = [(NSArray *)v2 objectAtIndexedSubscript:2];

  id v7 = [v5 arrayByAddingObjectsFromArray:v6];
  int v8 = +[AMSPromise promiseWithResult:v7];

  return (AMSPromise *)v8;
}

id sub_100056290(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _registerAccounts:a2 withOptions:*(void *)(a1 + 40)];
}

void sub_1000562A0(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = +[AMSLogConfig sharedAccountsDaemonConfig];
  if (!v3)
  {
    id v3 = +[AMSLogConfig sharedConfig];
  }
  id v4 = [v3 OSLogObject];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = objc_opt_class();
    id v6 = AMSLogKey();
    id v7 = AMSLogableError();
    int v8 = 138543874;
    uint64_t v9 = v5;
    __int16 v10 = 2114;
    __int16 v11 = v6;
    __int16 v12 = 2114;
    id v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to post push tokens. %{public}@", (uint8_t *)&v8, 0x20u);
  }
}

id sub_1000565A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) _pushEnvironmentForAccount:v3];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100056684;
  v9[3] = &unk_100114178;
  uint64_t v5 = *(void *)(a1 + 40);
  void v9[4] = *(void *)(a1 + 32);
  id v10 = v3;
  uint64_t v11 = v5;
  id v6 = v3;
  id v7 = [v4 thenWithBlock:v9];

  return v7;
}

id sub_100056684(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) _connectionForEnvironment:v3];

  if (v4)
  {
    uint64_t v28 = 0;
    long long v29 = &v28;
    uint64_t v30 = 0x3032000000;
    long long v31 = sub_100015B08;
    long long v32 = sub_100015A74;
    id v33 = 0;
    uint64_t v5 = [*(id *)(a1 + 32) registerTaskQueue];
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    void v23[2] = sub_100056A80;
    v23[3] = &unk_100114150;
    id v6 = *(void **)(a1 + 40);
    void v23[4] = *(void *)(a1 + 32);
    id v24 = v6;
    id v25 = v3;
    long long v26 = &v28;
    uint64_t v27 = *(void *)(a1 + 48);
    id v7 = v23;
    int v8 = v5;
    uint64_t v9 = AMSLogKey();
    *(void *)block = _NSConcreteStackBlock;
    *(void *)&block[8] = 3221225472;
    *(void *)&block[16] = sub_100057CDC;
    uint64_t v35 = &unk_100112600;
    id v36 = v9;
    id v37 = v7;
    id v10 = v9;
    dispatch_sync(v8, block);

    uint64_t v11 = +[AMSLogConfig sharedAccountsDaemonConfig];
    if (!v11)
    {
      uint64_t v11 = +[AMSLogConfig sharedConfig];
    }
    __int16 v12 = [v11 OSLogObject];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = objc_opt_class();
      AMSLogKey();
      id v14 = (id)objc_claimAutoreleasedReturnValue();
      id v15 = AMSHashIfNeeded();
      *(_DWORD *)block = 138543874;
      *(void *)&block[4] = v13;
      *(_WORD *)&block[12] = 2114;
      *(void *)&block[14] = v14;
      *(_WORD *)&block[22] = 2114;
      uint64_t v35 = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%{public}@: [%{public}@] Task promise: %{public}@", block, 0x20u);
    }
    id v16 = (id)v29[5];

    _Block_object_dispose(&v28, 8);
  }
  else
  {
    long long v17 = +[AMSLogConfig sharedAccountsDaemonConfig];
    if (!v17)
    {
      long long v17 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v18 = [v17 OSLogObject];
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = objc_opt_class();
      __int16 v20 = AMSLogKey();
      *(_DWORD *)block = 138543874;
      *(void *)&block[4] = v19;
      *(_WORD *)&block[12] = 2114;
      *(void *)&block[14] = v20;
      *(_WORD *)&block[22] = 2114;
      uint64_t v35 = v3;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] No active connection for this environment. Starting connection. environment = %{public}@", block, 0x20u);
    }
    id v21 = [*(id *)(a1 + 32) _startConnectionWithEnvironment:v3];
    id v16 = [v21 promiseAdapter];
  }
  return v16;
}

void sub_100056A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100056A80(uint64_t a1)
{
  id v2 = +[AMSLogConfig sharedAccountsDaemonConfig];
  if (!v2)
  {
    id v2 = +[AMSLogConfig sharedConfig];
  }
  id v3 = [v2 OSLogObject];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = objc_opt_class();
    uint64_t v5 = AMSLogKey();
    id v6 = AMSHashIfNeeded();
    uint64_t v7 = *(void *)(a1 + 48);
    *(_DWORD *)id v49 = 138544130;
    *(void *)&v49[4] = v4;
    *(_WORD *)&v49[12] = 2114;
    *(void *)&v49[14] = v5;
    *(_WORD *)&v49[22] = 2114;
    id v50 = v6;
    __int16 v51 = 2114;
    uint64_t v52 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%{public}@: [%{public}@] Starting push registration. account = %{public}@ | environment = %{public}@", v49, 0x2Au);
  }
  int v8 = [*(id *)(a1 + 32) _pushTokenForEnvironment:*(void *)(a1 + 48)];
  if (!v8 || !*(void *)(a1 + 48))
  {
    uint64_t v9 = +[AMSLogConfig sharedAccountsDaemonConfig];
    if (!v9)
    {
      uint64_t v9 = +[AMSLogConfig sharedConfig];
    }
    id v10 = [v9 OSLogObject];
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_15;
    }
    uint64_t v11 = objc_opt_class();
    __int16 v12 = AMSLogKey();
    uint64_t v13 = AMSHashIfNeeded();
    uint64_t v14 = *(void *)(a1 + 48);
    *(_DWORD *)id v49 = 138544130;
    *(void *)&v49[4] = v11;
    *(_WORD *)&v49[12] = 2114;
    *(void *)&v49[14] = v12;
    *(_WORD *)&v49[22] = 2114;
    id v50 = v13;
    __int16 v51 = 2114;
    uint64_t v52 = v14;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Either the token or environment is nil. token = %{public}@ | environment = %{public}@", v49, 0x2Au);

    goto LABEL_14;
  }
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v19 = +[AMSLogConfig sharedAccountsDaemonConfig];
    if (!v19)
    {
      uint64_t v19 = +[AMSLogConfig sharedConfig];
    }
    __int16 v20 = [v19 OSLogObject];
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      uint64_t v21 = objc_opt_class();
      __int16 v22 = AMSLogKey();
      *(_DWORD *)id v49 = 138543618;
      *(void *)&v49[4] = v21;
      *(_WORD *)&v49[12] = 2114;
      *(void *)&v49[14] = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "%{public}@: [%{public}@] Checking to see if we should perform push registration.", v49, 0x16u);
    }
    if ((objc_msgSend(*(id *)(a1 + 40), "ams_isLocalAccount") & 1) == 0)
    {
      long long v34 = +[AMSDPushRegisterTask shouldPerformForAccount:*(void *)(a1 + 40) environment:*(void *)(a1 + 48) token:v8];

      uint64_t v35 = +[AMSLogConfig sharedAccountsDaemonConfig];
      uint64_t v9 = (void *)v35;
      if (v34)
      {
        if (!v35)
        {
          uint64_t v9 = +[AMSLogConfig sharedConfig];
        }
        id v36 = [v9 OSLogObject];
        if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
        {
          uint64_t v37 = objc_opt_class();
          __int16 v38 = AMSLogKey();
          *(_DWORD *)id v49 = 138543618;
          *(void *)&v49[4] = v37;
          *(_WORD *)&v49[12] = 2114;
          *(void *)&v49[14] = v38;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "%{public}@: [%{public}@] We should perform push registration.", v49, 0x16u);
        }
LABEL_44:
        id v15 = [*(id *)(a1 + 32) _bagForAccount:*(void *)(a1 + 40)];
        uint64_t v18 = [[AMSDPushRegisterTask alloc] initWithAccount:*(void *)(a1 + 40) token:v8 environment:*(void *)(a1 + 48) bag:v15];
        long long v32 = +[AMSLogConfig sharedAccountsDaemonConfig];
        if (!v32)
        {
          long long v32 = +[AMSLogConfig sharedConfig];
        }
        id v33 = [v32 OSLogObject];
        if (!os_log_type_enabled(v33, OS_LOG_TYPE_INFO)) {
          goto LABEL_48;
        }
        goto LABEL_47;
      }
      if (!v35)
      {
        uint64_t v9 = +[AMSLogConfig sharedConfig];
      }
      id v10 = [v9 OSLogObject];
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO)) {
        goto LABEL_15;
      }
      uint64_t v46 = objc_opt_class();
      __int16 v12 = AMSLogKey();
      *(_DWORD *)id v49 = 138543618;
      *(void *)&v49[4] = v46;
      *(_WORD *)&v49[12] = 2114;
      *(void *)&v49[14] = v12;
      id v47 = "%{public}@: [%{public}@] We should not perform push registration. Returning success.";
      goto LABEL_57;
    }
  }
  else if ((objc_msgSend(*(id *)(a1 + 40), "ams_isLocalAccount") & 1) == 0)
  {
    goto LABEL_44;
  }
  if (!_os_feature_enabled_impl()
    || !+[AMSDevice deviceIsBundle])
  {
    goto LABEL_16;
  }
  id v23 = +[AMSLogConfig sharedAccountsDaemonConfig];
  if (!v23)
  {
    id v23 = +[AMSLogConfig sharedConfig];
  }
  id v24 = [v23 OSLogObject];
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    uint64_t v25 = objc_opt_class();
    long long v26 = AMSLogKey();
    *(_DWORD *)id v49 = 138543618;
    *(void *)&v49[4] = v25;
    *(_WORD *)&v49[12] = 2114;
    *(void *)&v49[14] = v26;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "%{public}@: [%{public}@] Checking to see if we should perform bundle push registration.", v49, 0x16u);
  }
  unsigned int v27 = +[AMSDBundlePushRegisterTask shouldPerformForAccount:*(void *)(a1 + 40) environment:*(void *)(a1 + 48) token:v8];
  uint64_t v28 = +[AMSLogConfig sharedAccountsDaemonConfig];
  uint64_t v9 = (void *)v28;
  if (v27)
  {
    if (!v28)
    {
      uint64_t v9 = +[AMSLogConfig sharedConfig];
    }
    long long v29 = [v9 OSLogObject];
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      uint64_t v30 = objc_opt_class();
      long long v31 = AMSLogKey();
      *(_DWORD *)id v49 = 138543618;
      *(void *)&v49[4] = v30;
      *(_WORD *)&v49[12] = 2114;
      *(void *)&v49[14] = v31;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "%{public}@: [%{public}@] We should perform bundle push registration.", v49, 0x16u);
    }
    id v15 = [*(id *)(a1 + 32) _bagForAccount:*(void *)(a1 + 40)];
    uint64_t v18 = [[AMSDBundlePushRegisterTask alloc] initWithAccount:*(void *)(a1 + 40) token:v8 environment:*(void *)(a1 + 48) bag:v15];
    long long v32 = +[AMSLogConfig sharedAccountsDaemonConfig];
    if (!v32)
    {
      long long v32 = +[AMSLogConfig sharedConfig];
    }
    id v33 = [v32 OSLogObject];
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_INFO)) {
      goto LABEL_48;
    }
LABEL_47:
    uint64_t v39 = objc_opt_class();
    __int16 v40 = AMSLogKey();
    uint64_t v41 = AMSHashIfNeeded();
    *(_DWORD *)id v49 = 138543874;
    *(void *)&v49[4] = v39;
    *(_WORD *)&v49[12] = 2114;
    *(void *)&v49[14] = v40;
    *(_WORD *)&v49[22] = 2114;
    id v50 = v41;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "%{public}@: [%{public}@] Created task: %{public}@", v49, 0x20u);

LABEL_48:
    uint64_t v42 = [(AMSDPushRegisterTask *)v18 perform];
    uint64_t v43 = [v42 promiseAdapter];
    uint64_t v44 = *(void *)(*(void *)(a1 + 56) + 8);
    id v45 = *(void **)(v44 + 40);
    *(void *)(v44 + 40) = v43;

    goto LABEL_17;
  }
  if (!v28)
  {
    uint64_t v9 = +[AMSLogConfig sharedConfig];
  }
  id v10 = [v9 OSLogObject];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v48 = objc_opt_class();
    __int16 v12 = AMSLogKey();
    *(_DWORD *)id v49 = 138543618;
    *(void *)&v49[4] = v48;
    *(_WORD *)&v49[12] = 2114;
    *(void *)&v49[14] = v12;
    id v47 = "%{public}@: [%{public}@] We should not perform bundle push registration. Returning success.";
LABEL_57:
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, v47, v49, 0x16u);
LABEL_14:
  }
LABEL_15:

LABEL_16:
  id v15 = +[AMSBinaryPromise promiseWithSuccess];
  uint64_t v16 = [v15 promiseAdapter];
  uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v18 = *(AMSDPushRegisterTask **)(v17 + 40);
  *(void *)(v17 + 40) = v16;
LABEL_17:
}

void sub_100057A04(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = +[AMSLogConfig sharedAccountsDaemonConfig];
  uint64_t v4 = (void *)v3;
  if (v2)
  {
    if (!v3)
    {
      uint64_t v4 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v5 = [v4 OSLogObject];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = objc_opt_class();
      uint64_t v7 = AMSLogKey();
      int v8 = AMSLogableError();
      int v10 = 138543874;
      uint64_t v11 = v6;
      __int16 v12 = 2114;
      uint64_t v13 = v7;
      __int16 v14 = 2114;
      id v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Did finish running device account updater with error %{public}@", (uint8_t *)&v10, 0x20u);

LABEL_10:
    }
  }
  else
  {
    if (!v3)
    {
      uint64_t v4 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v5 = [v4 OSLogObject];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = objc_opt_class();
      uint64_t v7 = AMSLogKey();
      int v10 = 138543618;
      uint64_t v11 = v9;
      __int16 v12 = 2114;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Did finish running device account updater", (uint8_t *)&v10, 0x16u);
      goto LABEL_10;
    }
  }
}

uint64_t sub_100057CDC(uint64_t a1)
{
  id v2 = (id)AMSSetLogKey();
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v3();
}

void sub_1000582F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10005830C(uint64_t a1)
{
  id v2 = *(unsigned char **)(a1 + 32);
  if (v2[8]) {
    id result = [v2 isScheduled];
  }
  else {
    id result = 0;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

uint64_t sub_1000583AC(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + _Block_object_dispose(&a9, 8) = *(unsigned char *)(result + 40);
  return result;
}

AMSDRefreshMultiUserResult *sub_10005872C(uint64_t a1)
{
  id v2 = +[AMSLogConfig sharedAccountsMultiUserConfig];
  if (!v2)
  {
    id v2 = +[AMSLogConfig sharedConfig];
  }
  uint64_t v3 = [v2 OSLogObject];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = objc_opt_class();
    uint64_t v5 = AMSLogKey();
    uint64_t v6 = [*(id *)(a1 + 32) homes];
    uint64_t v7 = AMSHashIfNeeded();
    int v8 = [*(id *)(a1 + 32) options];
    uint64_t v9 = AMSHashIfNeeded();
    int v27 = 138544130;
    uint64_t v28 = v4;
    __int16 v29 = 2114;
    uint64_t v30 = v5;
    __int16 v31 = 2114;
    long long v32 = v7;
    __int16 v33 = 2114;
    long long v34 = v9;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Starting a Multi-User refresh. homes = %{public}@ | options = %{public}@", (uint8_t *)&v27, 0x2Au);
  }
  id v10 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v11 = [*(id *)(a1 + 32) metrics];

  if (!v11)
  {
    __int16 v12 = objc_alloc_init(AMSDMultiUserMetrics);
    [*(id *)(a1 + 32) setMetrics:v12];
  }
  uint64_t v13 = [*(id *)(a1 + 32) metrics];
  __int16 v14 = [*(id *)(a1 + 32) options];
  id v15 = [v13 enqueueMultiUserRefreshBeginEventWithOptions:v14];

  [*(id *)(a1 + 32) _createMultiUserTokensWithErrors:v10];
  [*(id *)(a1 + 32) _reconcileiTunesAccountsWithErrors:v10];
  [*(id *)(a1 + 32) _reconcileRecordZonesWithErrors:v10];
  [*(id *)(a1 + 32) _refreshCloudDatabasesWithErrors:v10];
  [*(id *)(a1 + 32) _configurePreferredMediaUser:v10];
  [*(id *)(a1 + 32) _transferHomeSettingsToAccountsWithErrors:v10];
  if ([v10 count])
  {
    uint64_t v16 = +[AMSLogConfig sharedAccountsMultiUserConfig];
    if (!v16)
    {
      uint64_t v16 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v17 = [v16 OSLogObject];
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = objc_opt_class();
      uint64_t v19 = AMSLogKey();
      __int16 v20 = AMSLogableErrors();
      int v27 = 138543874;
      uint64_t v28 = v18;
      __int16 v29 = 2114;
      uint64_t v30 = v19;
      __int16 v31 = 2114;
      long long v32 = v20;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] The refresh failed. errors = %{public}@", (uint8_t *)&v27, 0x20u);

LABEL_16:
    }
  }
  else
  {
    [*(id *)(a1 + 32) _removeRenewCredentialsFollowUp];
    uint64_t v16 = +[AMSLogConfig sharedAccountsMultiUserConfig];
    if (!v16)
    {
      uint64_t v16 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v17 = [v16 OSLogObject];
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = objc_opt_class();
      uint64_t v19 = AMSLogKey();
      int v27 = 138543618;
      uint64_t v28 = v21;
      __int16 v29 = 2114;
      uint64_t v30 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] The refresh succeeded.", (uint8_t *)&v27, 0x16u);
      goto LABEL_16;
    }
  }

  __int16 v22 = [AMSDRefreshMultiUserResult alloc];
  id v23 = [*(id *)(a1 + 32) homes];
  id v24 = [*(id *)(a1 + 32) options];
  uint64_t v25 = [(AMSDRefreshMultiUserResult *)v22 initWithHomes:v23 options:v24];

  [(AMSDRefreshMultiUserResult *)v25 setErrors:v10];
  return v25;
}

void sub_1000597B0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v5 = a1;
  uint64_t v6 = *(void **)(a1 + 32);
  id v9 = 0;
  [v6 _createMultiUserTokenForHome:a2 error:&v9];
  id v7 = v9;
  objc_msgSend(*(id *)(v5 + 40), "ams_addNullableObject:", v7);
  LODWORD(v5) = sub_1000219BC(*(void **)(v5 + 40), v8);

  if (v5) {
    *a4 = 1;
  }
}

void sub_100059AC4(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v6 = a3;
  if (([v6 isDefaultRecordZone] & 1) == 0)
  {
    Swift::Int v64 = a4;
    id v7 = +[AMSDHomeManager identifiersForRecordZone:v6 inDatabase:*(void *)(a1 + 32)];
    id v73 = 0;
    int v8 = [v7 resultWithError:&v73];
    id v9 = v73;

    if (v9)
    {
      id v10 = +[AMSLogConfig sharedAccountsMultiUserConfig];
      if (!v10)
      {
        id v10 = +[AMSLogConfig sharedConfig];
      }
      uint64_t v11 = [v10 OSLogObject];
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = objc_opt_class();
        uint64_t v13 = AMSLogKey();
        AMSHashIfNeeded();
        v15 = id v14 = v9;
        AMSLogableError();
        v17 = uint64_t v16 = v8;
        *(_DWORD *)long long buf = 138544130;
        uint64_t v76 = v12;
        __int16 v77 = 2114;
        uint64_t v78 = v13;
        __int16 v79 = 2114;
        uint64_t v80 = v15;
        __int16 v81 = 2114;
        uint64_t v82 = v17;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to fetch a home/user identifiers from a record zone. recordZone = %{public}@ | error = %{public}@", buf, 0x2Au);

        int v8 = v16;
        id v9 = v14;
      }
      if (objc_msgSend(v9, "ams_hasDomain:code:", @"AMSDCloudDataErrorDomain", 7))
      {
        if (!v8) {
          goto LABEL_30;
        }
        id v65 = v9;
        int v18 = 1;
LABEL_13:
        uint64_t v19 = [v8 first];
        uint64_t v66 = [v8 second];
        __int16 v20 = [*(id *)(a1 + 40) homes];
        v71[0] = _NSConcreteStackBlock;
        v71[1] = 3221225472;
        v71[2] = sub_10005A31C;
        v71[3] = &unk_100113080;
        id v21 = v19;
        id v72 = v21;
        __int16 v22 = objc_msgSend(v20, "ams_firstObjectPassingTest:", v71);

        if (v21 && v22)
        {
          id v23 = v8;
          id v24 = [v22 users];
          v69[0] = _NSConcreteStackBlock;
          v69[1] = 3221225472;
          v69[2] = sub_10005A360;
          v69[3] = &unk_1001122D0;
          id v70 = v66;
          unsigned __int8 v25 = objc_msgSend(v24, "ams_anyWithTest:", v69);

          if ((v25 & 1) == 0)
          {
            long long v26 = [*(id *)(a1 + 40) options];
            id v27 = [v26 reasonType];

            if (v27)
            {
              uint64_t v28 = +[AMSLogConfig sharedAccountsMultiUserConfig];
              if (!v28)
              {
                uint64_t v28 = +[AMSLogConfig sharedConfig];
              }
              __int16 v29 = [v28 OSLogObject];
              if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v60 = objc_opt_class();
                id v62 = AMSLogKey();
                uint64_t v30 = AMSHashIfNeeded();
                __int16 v31 = AMSHashIfNeeded();
                long long v32 = AMSHashIfNeeded();
                *(_DWORD *)long long buf = 138544386;
                uint64_t v76 = v60;
                __int16 v77 = 2114;
                uint64_t v78 = v62;
                __int16 v79 = 2114;
                uint64_t v80 = v30;
                __int16 v81 = 2114;
                uint64_t v82 = v31;
                __int16 v83 = 2114;
                uint64_t v84 = v32;
                _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Remove record zone, user not found in home. homeIdentifier = %{public}@ | userIdentifier = %{public}@ | recordZone = %{public}@", buf, 0x34u);
              }
              int v18 = 1;
            }
          }

          int v8 = v23;
          goto LABEL_29;
        }
        __int16 v33 = +[AMSLogConfig sharedAccountsMultiUserConfig];
        if (!v33)
        {
          __int16 v33 = +[AMSLogConfig sharedConfig];
        }
        long long v34 = [v33 OSLogObject];
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          int v61 = v18;
          uint64_t v35 = v8;
          uint64_t v36 = objc_opt_class();
          uint64_t v37 = AMSLogKey();
          __int16 v38 = AMSHashIfNeeded();
          AMSHashIfNeeded();
          uint64_t v39 = v63 = v22;
          *(_DWORD *)long long buf = 138544130;
          uint64_t v76 = v36;
          int v8 = v35;
          int v18 = v61;
          __int16 v77 = 2114;
          uint64_t v78 = v37;
          __int16 v79 = 2114;
          uint64_t v80 = v38;
          __int16 v81 = 2114;
          uint64_t v82 = v39;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] A record zone is associated with a non-existent home. homeIdentifier = %{public}@ | recordZone = %{public}@", buf, 0x2Au);

          __int16 v22 = v63;
        }

        if (!v21)
        {
LABEL_29:

          id v9 = v65;
          if (v18) {
            goto LABEL_30;
          }
LABEL_41:
          id v53 = v9;
LABEL_42:

          goto LABEL_43;
        }
        __int16 v40 = [[AMSDLeaveMultiUserHomeTask alloc] initWithHomeIdentifier:v21];
        [(AMSDLeaveMultiUserHomeTask *)v40 setRunMode:1];
        uint64_t v41 = [(AMSDLeaveMultiUserHomeTask *)v40 performTask];
        id v68 = 0;
        [v41 resultWithError:&v68];
        id v42 = v68;

        objc_msgSend(*(id *)(a1 + 48), "ams_addNullableObject:", v42);
        id v9 = v65;
LABEL_30:
        uint64_t v43 = +[AMSLogConfig sharedAccountsMultiUserConfig];
        if (!v43)
        {
          uint64_t v43 = +[AMSLogConfig sharedConfig];
        }
        uint64_t v44 = [v43 OSLogObject];
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v45 = objc_opt_class();
          uint64_t v46 = AMSLogKey();
          id v47 = AMSHashIfNeeded();
          *(_DWORD *)long long buf = 138543874;
          uint64_t v76 = v45;
          __int16 v77 = 2114;
          uint64_t v78 = v46;
          __int16 v79 = 2114;
          uint64_t v80 = v47;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Removing the record zone. recordZone = %{public}@", buf, 0x20u);
        }
        uint64_t v48 = *(void **)(a1 + 32);
        id v49 = [v6 identifier];
        __int16 v74 = v49;
        id v50 = +[NSArray arrayWithObjects:&v74 count:1];
        __int16 v51 = [v48 deleteRecordZonesWithRecordZoneIdentifiers:v50];
        id v67 = v9;
        uint64_t v52 = [v51 resultWithError:&v67];
        id v53 = v67;

        if (!v52)
        {
          uint64_t v54 = +[AMSLogConfig sharedAccountsMultiUserConfig];
          if (!v54)
          {
            uint64_t v54 = +[AMSLogConfig sharedConfig];
          }
          __int16 v55 = [v54 OSLogObject];
          if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
          {
            uint64_t v56 = objc_opt_class();
            uint64_t v57 = AMSLogKey();
            __int16 v58 = AMSLogableError();
            *(_DWORD *)long long buf = 138543874;
            uint64_t v76 = v56;
            __int16 v77 = 2114;
            uint64_t v78 = v57;
            __int16 v79 = 2114;
            uint64_t v80 = v58;
            _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to remove the record zone. error = %{public}@", buf, 0x20u);
          }
          objc_msgSend(*(id *)(a1 + 48), "ams_addNullableObject:", v53);
          if (sub_1000219BC(*(void **)(a1 + 48), v59)) {
            *Swift::Int v64 = 1;
          }
        }
        goto LABEL_42;
      }
      [*(id *)(a1 + 48) addObject:v9];
    }
    if (!v8) {
      goto LABEL_41;
    }
    id v65 = v9;
    int v18 = 0;
    goto LABEL_13;
  }
LABEL_43:
}

id sub_10005A31C(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 identifier];
  id v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

id sub_10005A360(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 identifier];
  id v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

void sub_10005A4D4(id a1)
{
  uint64_t v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.AppleMediaServices.AMSDSecurityService", v3);
  id v2 = (void *)qword_1001304D0;
  qword_1001304D0 = (uint64_t)v1;
}

void sub_10005A690(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  objc_msgSend(a3, "ams_sanitizedForSecureCoding");
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_10005B198(uint64_t a1)
{
  id v2 = +[AMSLogConfig sharedConfig];
  if (!v2)
  {
    id v2 = +[AMSLogConfig sharedConfig];
  }
  uint64_t v3 = [v2 OSLogObject];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = objc_opt_class();
    id v5 = v4;
    id v6 = AMSLogKey();
    *(_DWORD *)long long buf = 138543618;
    id v27 = v4;
    __int16 v28 = 2114;
    __int16 v29 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Running biometric token update", buf, 0x16u);
  }
  if ((objc_msgSend(*(id *)(a1 + 40), "ams_isSandboxAccount") & 1) == 0)
  {
    int v8 = [[AMSDBiometricsTokenUpdateTask alloc] initWithAccount:*(void *)(a1 + 40)];
    [(AMSDBiometricsTokenUpdateTask *)v8 setAdditionalDialogMetrics:*(void *)(a1 + 48)];
    [(AMSDBiometricsTokenUpdateTask *)v8 setClientInfo:*(void *)(a1 + 56)];
    id v14 = [*(id *)(a1 + 32) delegate];
    [(AMSDBiometricsTokenUpdateTask *)v8 setDelegate:v14];

    [(AMSDBiometricsTokenUpdateTask *)v8 setShouldGenerateKeysOnly:*(unsigned __int8 *)(a1 + 72)];
    [(AMSDBiometricsTokenUpdateTask *)v8 setShouldRequestConfirmation:*(unsigned __int8 *)(a1 + 73)];
    [(AMSDBiometricsTokenUpdateTask *)v8 setUserInitiated:*(unsigned __int8 *)(a1 + 74)];
    id v15 = [(AMSDBiometricsTokenUpdateTask *)v8 performUpdate];
    id v25 = 0;
    id v13 = [v15 resultWithError:&v25];
    id v7 = v25;

    uint64_t v16 = +[AMSLogConfig sharedConfig];
    id v9 = v16;
    if (v7)
    {
      if (!v16)
      {
        id v9 = +[AMSLogConfig sharedConfig];
      }
      uint64_t v17 = [v9 OSLogObject];
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        goto LABEL_21;
      }
      int v18 = objc_opt_class();
      id v19 = v18;
      __int16 v20 = AMSLogKey();
      id v21 = AMSLogableError();
      *(_DWORD *)long long buf = 138543874;
      id v27 = v18;
      __int16 v28 = 2114;
      __int16 v29 = v20;
      __int16 v30 = 2114;
      __int16 v31 = v21;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Biometrics token update failed with error: %{public}@", buf, 0x20u);
    }
    else
    {
      if (!v16)
      {
        id v9 = +[AMSLogConfig sharedConfig];
      }
      uint64_t v17 = [v9 OSLogObject];
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_21;
      }
      __int16 v22 = objc_opt_class();
      id v19 = v22;
      __int16 v20 = AMSLogKey();
      *(_DWORD *)long long buf = 138543618;
      id v27 = v22;
      __int16 v28 = 2114;
      __int16 v29 = v20;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Biometrics token update completed successfully.", buf, 0x16u);
    }

LABEL_21:
    goto LABEL_22;
  }
  AMSError();
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  int v8 = +[AMSLogConfig sharedConfig];
  if (!v8)
  {
    int v8 = +[AMSLogConfig sharedConfig];
  }
  id v9 = [(AMSDBiometricsTokenUpdateTask *)v8 OSLogObject];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    id v10 = objc_opt_class();
    id v11 = v10;
    uint64_t v12 = AMSLogKey();
    *(_DWORD *)long long buf = 138543618;
    id v27 = v10;
    __int16 v28 = 2114;
    __int16 v29 = v12;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Skipping biometric token update for sandbox account", buf, 0x16u);
  }
  id v13 = 0;
LABEL_22:

  uint64_t v23 = *(void *)(a1 + 64);
  if (v23)
  {
    id v24 = objc_msgSend(v7, "ams_sanitizedForSecureCoding");
    (*(void (**)(uint64_t, id, void *))(v23 + 16))(v23, v13, v24);
  }
}

void sub_10005B6AC(uint64_t a1)
{
  uint64_t v3 = &swift_willThrow_ptr;
  uint64_t v4 = +[AMSLogConfig sharedConfig];
  if (!v4)
  {
    uint64_t v4 = +[AMSLogConfig sharedConfig];
  }
  id v5 = [v4 OSLogObject];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = AMSLogKey();
    uint64_t v7 = objc_opt_class();
    uint64_t v8 = v7;
    if (v6)
    {
      uint64_t v1 = AMSLogKey();
      +[NSString stringWithFormat:@"%@: [%@] ", v8, v1];
    }
    else
    {
      +[NSString stringWithFormat:@"%@: ", v7];
    id v9 = };
    *(_DWORD *)long long buf = 138543362;
    __int16 v30 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@Verifying device passcode.", buf, 0xCu);
    if (v6)
    {

      id v9 = (void *)v1;
    }
  }
  id v10 = objc_alloc_init(AMSDVerifyDevicePasscodeTask);
  id v11 = [(AMSDVerifyDevicePasscodeTask *)v10 verifyPasscode];
  id v28 = 0;
  id v12 = [v11 resultWithError:&v28];
  id v13 = v28;

  uint64_t v14 = +[AMSLogConfig sharedConfig];
  id v15 = (void *)v14;
  if (v13)
  {
    if (!v14)
    {
      id v15 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v16 = [v15 OSLogObject];
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = AMSLogKey();
      uint64_t v18 = objc_opt_class();
      uint64_t v19 = v18;
      if (v17)
      {
        AMSLogKey();
        uint64_t v3 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue();
        +[NSString stringWithFormat:@"%@: [%@] ", v19, v3];
      }
      else
      {
        +[NSString stringWithFormat:@"%@: ", v18];
      __int16 v20 = };
      id v25 = AMSLogableError();
      *(_DWORD *)long long buf = 138543618;
      __int16 v30 = v20;
      __int16 v31 = 2114;
      long long v32 = v25;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%{public}@Device passcode verification failed with error: %{public}@", buf, 0x16u);
      if (v17)
      {

        __int16 v20 = v3;
      }
    }
  }
  else
  {
    if (!v14)
    {
      id v15 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v16 = [v15 OSLogObject];
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      id v21 = AMSLogKey();
      uint64_t v22 = objc_opt_class();
      uint64_t v23 = v22;
      if (v21)
      {
        AMSLogKey();
        uint64_t v3 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue();
        +[NSString stringWithFormat:@"%@: [%@] ", v23, v3];
      }
      else
      {
        +[NSString stringWithFormat:@"%@: ", v22];
      id v24 = };
      *(_DWORD *)long long buf = 138543362;
      __int16 v30 = v24;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%{public}@Device passcode verification completed successfully.", buf, 0xCu);
      if (v21)
      {

        id v24 = v3;
      }
    }
  }

  uint64_t v26 = *(void *)(a1 + 40);
  if (v26)
  {
    id v27 = objc_msgSend(v13, "ams_sanitizedForSecureCoding");
    (*(void (**)(uint64_t, id, void *))(v26 + 16))(v26, v12, v27);
  }
}

void sub_10005BD04(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_10005BD40(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v41 = 0;
  id v42 = &v41;
  uint64_t v43 = 0x2050000000;
  id v5 = (void *)qword_1001304D8;
  uint64_t v44 = qword_1001304D8;
  if (!qword_1001304D8)
  {
    *(void *)long long buf = _NSConcreteStackBlock;
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = sub_10005E838;
    uint64_t v46 = (uint64_t)&unk_100112770;
    id v47 = &v41;
    sub_10005E838((uint64_t)buf);
    id v5 = (void *)v42[3];
  }
  id v6 = v5;
  _Block_object_dispose(&v41, 8);
  id v7 = objc_alloc_init(v6);
  if (v7)
  {
    uint64_t v8 = +[AMSLogConfig sharedConfig];
    if (!v8)
    {
      uint64_t v8 = +[AMSLogConfig sharedConfig];
    }
    id v9 = [v8 OSLogObject];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = objc_opt_class();
      uint64_t v11 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138543874;
      *(void *)&uint8_t buf[4] = v10;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v11;
      *(_WORD *)&buf[22] = 2050;
      uint64_t v46 = 4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] [apple-pay-classic] calling paymentServicesMerchantURLForAPIType. APIType = %{public}ld", buf, 0x20u);
    }

    id v12 = NSStringFromSelector("paymentServicesMerchantURLForAPIType:completion:");
    id v13 = objc_alloc((Class)AMSDeallocGuard);
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472;
    v37[2] = sub_10005C320;
    v37[3] = &unk_1001142F0;
    uint64_t v40 = *(void *)(a1 + 48);
    v37[4] = WeakRetained;
    id v38 = v12;
    id v14 = v3;
    id v39 = v14;
    id v15 = v12;
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_10005C5A4;
    v32[3] = &unk_100114318;
    id v33 = [v13 initWithDeallocGuardBlock:v37];
    id v34 = WeakRetained;
    id v35 = *(id *)(a1 + 32);
    id v36 = v14;
    id v16 = v33;
    [v7 paymentServicesMerchantURLForAPIType:4 completion:v32];
  }
  else
  {
    unsigned int v17 = +[AMSUnitTests isRunningUnitTests];
    uint64_t v18 = +[AMSLogConfig sharedConfig];
    uint64_t v19 = (void *)v18;
    if (v17)
    {
      if (!v18)
      {
        uint64_t v19 = +[AMSLogConfig sharedConfig];
      }
      __int16 v20 = [v19 OSLogObject];
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        id v21 = AMSLogKey();
        uint64_t v22 = v21 == 0;
        uint64_t v23 = objc_opt_class();
        uint64_t v24 = v23;
        if (v21)
        {
          uint64_t v22 = AMSLogKey();
          +[NSString stringWithFormat:@"%@: [%@] ", v24, v22];
        }
        else
        {
          +[NSString stringWithFormat:@"%@: ", v23];
        id v25 = };
        *(_DWORD *)long long buf = 138543362;
        *(void *)&uint8_t buf[4] = v25;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%{public}@Failed to load PKInAppPaymentService", buf, 0xCu);
        if (v21)
        {

          id v25 = (void *)v22;
        }
      }
      uint64_t v19 = +[NSNotificationCenter defaultCenter];
      uint64_t v26 = +[AMSLogConfig sharedConfig];
      [v19 postNotificationName:@"com.apple.AppleMediaServicesTests.FaultLogged" object:v26 userInfo:0];
    }
    else
    {
      if (!v18)
      {
        uint64_t v19 = +[AMSLogConfig sharedConfig];
      }
      uint64_t v26 = [v19 OSLogObject];
      if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT))
      {
        id v27 = AMSLogKey();
        uint64_t v28 = v27 == 0;
        uint64_t v29 = objc_opt_class();
        uint64_t v30 = v29;
        if (v27)
        {
          uint64_t v28 = AMSLogKey();
          +[NSString stringWithFormat:@"%@: [%@] ", v30, v28];
        }
        else
        {
          +[NSString stringWithFormat:@"%@: ", v29];
        __int16 v31 = };
        *(_DWORD *)long long buf = 138543362;
        *(void *)&uint8_t buf[4] = v31;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}@Failed to load PKInAppPaymentService", buf, 0xCu);
        if (v27)
        {

          __int16 v31 = (void *)v28;
        }
      }
    }

    AMSError();
    id v15 = (id)objc_claimAutoreleasedReturnValue();
    [v3 finishWithError:v15];
  }
}

void sub_10005C300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_10005C320(uint64_t a1)
{
  unsigned int v2 = +[AMSUnitTests isRunningUnitTests];
  uint64_t v3 = +[AMSLogConfig sharedConfig];
  uint64_t v4 = (void *)v3;
  if (v2)
  {
    if (!v3)
    {
      uint64_t v4 = +[AMSLogConfig sharedConfig];
    }
    id v5 = [v4 OSLogObject];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      id v6 = (objc_class *)objc_opt_class();
      id v7 = NSStringFromClass(v6);
      uint64_t v8 = NSStringFromSelector(*(SEL *)(a1 + 56));
      uint64_t v9 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138543874;
      uint64_t v18 = v7;
      __int16 v19 = 2114;
      __int16 v20 = v8;
      __int16 v21 = 2114;
      uint64_t v22 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "-[%{public}@ %{public}@]: Completion handler for %{public}@ deallocated without being invoked", buf, 0x20u);
    }
    uint64_t v4 = +[NSNotificationCenter defaultCenter];
    uint64_t v10 = +[AMSLogConfig sharedConfig];
    [v4 postNotificationName:@"com.apple.AppleMediaServicesTests.FaultLogged" object:v10 userInfo:0];
  }
  else
  {
    if (!v3)
    {
      uint64_t v4 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v10 = [v4 OSLogObject];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
    {
      uint64_t v11 = (objc_class *)objc_opt_class();
      id v12 = NSStringFromClass(v11);
      id v13 = NSStringFromSelector(*(SEL *)(a1 + 56));
      uint64_t v14 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138543874;
      uint64_t v18 = v12;
      __int16 v19 = 2114;
      __int16 v20 = v13;
      __int16 v21 = 2114;
      uint64_t v22 = v14;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "-[%{public}@ %{public}@]: Completion handler for %{public}@ deallocated without being invoked", buf, 0x20u);
    }
  }

  id v15 = +[NSString stringWithFormat:@"Completion handler for %@ deallocated without being invoked", *(void *)(a1 + 40)];
  id v16 = AMSError();

  [*(id *)(a1 + 48) finishWithError:v16];
}

void sub_10005C5A4(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  [*(id *)(a1 + 32) invalidate];
  uint64_t v6 = +[AMSLogConfig sharedConfig];
  id v7 = (void *)v6;
  if (a2)
  {
    if (!v6)
    {
      id v7 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v8 = [v7 OSLogObject];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      uint64_t v10 = *(void *)(a1 + 48);
      uint64_t v11 = [v5 absoluteString];
      id v12 = AMSHashIfNeeded();
      int v17 = 138543874;
      uint64_t v18 = v9;
      __int16 v19 = 2114;
      uint64_t v20 = v10;
      __int16 v21 = 2114;
      uint64_t v22 = v12;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] [apple-pay-classic] Payment services call succeeded with Merchant URL: %{public}@", (uint8_t *)&v17, 0x20u);
    }
    [*(id *)(a1 + 56) finishWithResult:v5];
  }
  else
  {
    if (!v6)
    {
      id v7 = +[AMSLogConfig sharedConfig];
    }
    id v13 = [v7 OSLogObject];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = *(void *)(a1 + 40);
      uint64_t v15 = *(void *)(a1 + 48);
      int v17 = 138543618;
      uint64_t v18 = v14;
      __int16 v19 = 2114;
      uint64_t v20 = v15;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] [apple-pay-classic] Payment services call failed", (uint8_t *)&v17, 0x16u);
    }

    id v16 = AMSError();
    [*(id *)(a1 + 56) finishWithError:v16];
  }
}

void sub_10005C7A8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  objc_msgSend(a3, "ams_sanitizedForSecureCoding");
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, id))(v3 + 16))(v3, v4, v5);
}

void sub_10005CD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_10005CDAC(void *a1, id a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    uint64_t v6 = +[AMSLogConfig sharedConfig];
    if (!v6)
    {
      uint64_t v6 = +[AMSLogConfig sharedConfig];
    }
    id v7 = [v6 OSLogObject];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = objc_opt_class();
      uint64_t v9 = a1[5];
      *(_DWORD *)long long buf = 138543618;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v9;
      id v10 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] [apple-pay-classic] Performing biometric/ACL check", buf, 0x16u);
    }
    uint64_t v16 = 0;
    int v17 = &v16;
    uint64_t v18 = 0x2050000000;
    uint64_t v11 = (void *)qword_1001304E8;
    uint64_t v19 = qword_1001304E8;
    if (!qword_1001304E8)
    {
      *(void *)long long buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = sub_10005EA00;
      __int16 v21 = &unk_100112770;
      uint64_t v22 = &v16;
      sub_10005EA00((uint64_t)buf);
      uint64_t v11 = (void *)v17[3];
    }
    id v12 = v11;
    _Block_object_dispose(&v16, 8);
    a2 = objc_msgSend(v12, "canPerformPSD2StyleBuyForAccessControlRef:", *(void *)(*(void *)(a1[7] + 8) + 24), v16);
  }
  id v13 = *(const void **)(*(void *)(a1[7] + 8) + 24);
  if (v13) {
    CFRelease(v13);
  }
  uint64_t v14 = a1[6];
  uint64_t v15 = objc_msgSend(v5, "ams_sanitizedForSecureCoding");
  (*(void (**)(uint64_t, id, void *))(v14 + 16))(v14, a2, v15);
}

void sub_10005CFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10005D358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10005D394(uint64_t a1, void *a2)
{
  id v35 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v44 = 0;
  uint64_t v45 = &v44;
  uint64_t v46 = 0x2050000000;
  uint64_t v4 = (void *)qword_1001304F8;
  uint64_t v47 = qword_1001304F8;
  if (!qword_1001304F8)
  {
    *(void *)long long buf = _NSConcreteStackBlock;
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = sub_10005EBB8;
    uint64_t v49 = (uint64_t)&unk_100112770;
    v50[0] = &v44;
    sub_10005EBB8((uint64_t)buf);
    uint64_t v4 = (void *)v45[3];
  }
  id v5 = v4;
  _Block_object_dispose(&v44, 8);
  id v6 = objc_alloc_init(v5);
  if (v6)
  {
    id v7 = +[NSSet setWithObject:*(void *)(a1 + 32)];
    uint64_t v8 = +[AMSLogConfig sharedConfig];
    if (!v8)
    {
      uint64_t v8 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v9 = [v8 OSLogObject];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = objc_opt_class();
      uint64_t v11 = *(void *)(a1 + 40);
      id v12 = AMSHashIfNeeded();
      *(_DWORD *)long long buf = 138544130;
      *(void *)&uint8_t buf[4] = v10;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v11;
      *(_WORD *)&buf[22] = 2050;
      uint64_t v49 = 13;
      LOWORD(v50[0]) = 2114;
      *(void *)((char *)v50 + 2) = v12;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] [apple-pay-classic] calling hasInAppPaymentPasses. capabilities = %{public}ld | issuerCountryCodes = %{public}@", buf, 0x2Au);
    }
    id v13 = NSStringFromSelector("hasInAppPaymentPassesForNetworks:capabilities:issuerCountryCodes:withHandler:");
    id v14 = objc_alloc((Class)AMSDeallocGuard);
    v40[0] = _NSConcreteStackBlock;
    v40[1] = 3221225472;
    v40[2] = sub_10005D9A0;
    v40[3] = &unk_1001142F0;
    uint64_t v43 = *(void *)(a1 + 64);
    v40[4] = WeakRetained;
    id v41 = v13;
    id v15 = v35;
    id v42 = v15;
    id v16 = v13;
    id v17 = [v14 initWithDeallocGuardBlock:v40];
    uint64_t v18 = *(void *)(a1 + 48);
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472;
    v36[2] = sub_10005DC24;
    v36[3] = &unk_1001143B8;
    id v37 = v17;
    id v38 = WeakRetained;
    id v39 = v15;
    id v19 = v17;
    [v6 hasInAppPaymentPassesForNetworks:v18 capabilities:13 issuerCountryCodes:v7 withHandler:v36];
  }
  else
  {
    unsigned int v20 = +[AMSUnitTests isRunningUnitTests];
    __int16 v21 = &swift_willThrow_ptr;
    uint64_t v22 = +[AMSLogConfig sharedConfig];
    uint64_t v23 = (void *)v22;
    if (v20)
    {
      if (!v22)
      {
        uint64_t v23 = +[AMSLogConfig sharedConfig];
      }
      uint64_t v24 = [v23 OSLogObject];
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        id v25 = AMSLogKey();
        uint64_t v26 = v25 == 0;
        uint64_t v27 = objc_opt_class();
        uint64_t v28 = v27;
        if (v25)
        {
          uint64_t v26 = AMSLogKey();
          +[NSString stringWithFormat:@"%@: [%@] ", v28, v26];
        }
        else
        {
          +[NSString stringWithFormat:@"%@: ", v27];
        uint64_t v29 = };
        *(_DWORD *)long long buf = 138543362;
        *(void *)&uint8_t buf[4] = v29;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%{public}@Failed to load PKPassLibrary", buf, 0xCu);
        if (v25)
        {

          uint64_t v29 = (void *)v26;
        }
      }
      uint64_t v23 = +[NSNotificationCenter defaultCenter];
      uint64_t v30 = +[AMSLogConfig sharedConfig];
      [v23 postNotificationName:@"com.apple.AppleMediaServicesTests.FaultLogged" object:v30 userInfo:0];
    }
    else
    {
      if (!v22)
      {
        uint64_t v23 = +[AMSLogConfig sharedConfig];
      }
      uint64_t v30 = [v23 OSLogObject];
      if (os_log_type_enabled(v30, OS_LOG_TYPE_FAULT))
      {
        __int16 v31 = AMSLogKey();
        uint64_t v32 = objc_opt_class();
        uint64_t v33 = v32;
        if (v31)
        {
          AMSLogKey();
          __int16 v21 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue();
          +[NSString stringWithFormat:@"%@: [%@] ", v33, v21];
        }
        else
        {
          +[NSString stringWithFormat:@"%@: ", v32];
        id v34 = };
        *(_DWORD *)long long buf = 138543362;
        *(void *)&uint8_t buf[4] = v34;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "%{public}@Failed to load PKPassLibrary", buf, 0xCu);
        if (v31)
        {

          id v34 = v21;
        }
      }
    }

    id v7 = AMSError();
    [v35 finishWithError:v7];
  }
}

void sub_10005D980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_10005D9A0(uint64_t a1)
{
  unsigned int v2 = +[AMSUnitTests isRunningUnitTests];
  uint64_t v3 = +[AMSLogConfig sharedConfig];
  uint64_t v4 = (void *)v3;
  if (v2)
  {
    if (!v3)
    {
      uint64_t v4 = +[AMSLogConfig sharedConfig];
    }
    id v5 = [v4 OSLogObject];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      id v6 = (objc_class *)objc_opt_class();
      id v7 = NSStringFromClass(v6);
      uint64_t v8 = NSStringFromSelector(*(SEL *)(a1 + 56));
      uint64_t v9 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138543874;
      uint64_t v18 = v7;
      __int16 v19 = 2114;
      unsigned int v20 = v8;
      __int16 v21 = 2114;
      uint64_t v22 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "-[%{public}@ %{public}@]: Completion handler for %{public}@ deallocated without being invoked", buf, 0x20u);
    }
    uint64_t v4 = +[NSNotificationCenter defaultCenter];
    uint64_t v10 = +[AMSLogConfig sharedConfig];
    [v4 postNotificationName:@"com.apple.AppleMediaServicesTests.FaultLogged" object:v10 userInfo:0];
  }
  else
  {
    if (!v3)
    {
      uint64_t v4 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v10 = [v4 OSLogObject];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
    {
      uint64_t v11 = (objc_class *)objc_opt_class();
      id v12 = NSStringFromClass(v11);
      id v13 = NSStringFromSelector(*(SEL *)(a1 + 56));
      uint64_t v14 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138543874;
      uint64_t v18 = v12;
      __int16 v19 = 2114;
      unsigned int v20 = v13;
      __int16 v21 = 2114;
      uint64_t v22 = v14;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "-[%{public}@ %{public}@]: Completion handler for %{public}@ deallocated without being invoked", buf, 0x20u);
    }
  }

  id v15 = +[NSString stringWithFormat:@"Completion handler for %@ deallocated without being invoked", *(void *)(a1 + 40)];
  id v16 = AMSError();

  [*(id *)(a1 + 48) finishWithError:v16];
}

void sub_10005DC24(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) invalidate];
  uint64_t v4 = +[AMSLogConfig sharedConfig];
  if (!v4)
  {
    uint64_t v4 = +[AMSLogConfig sharedConfig];
  }
  id v5 = [v4 OSLogObject];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 40);
    id v7 = AMSSetLogKeyIfNeeded();
    uint64_t v8 = +[NSNumber numberWithBool:a2];
    int v11 = 138543874;
    uint64_t v12 = v6;
    __int16 v13 = 2114;
    uint64_t v14 = v7;
    __int16 v15 = 2114;
    id v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] [apple-pay-classic] hasInAppPaymentPasses completed with value: %{public}@", (uint8_t *)&v11, 0x20u);
  }
  uint64_t v9 = *(void **)(a1 + 48);
  uint64_t v10 = +[NSNumber numberWithBool:a2];
  [v9 finishWithResult:v10];
}

void sub_10005DEA0(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = +[AMSDBag defaultBag];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _OWORD v6[2] = sub_10005DF64;
  v6[3] = &unk_100114408;
  uint64_t v5 = *(void *)(a1 + 48);
  id v7 = *(id *)(a1 + 56);
  [v2 _absintheHeadersForRequest:v3 bag:v4 buyParams:v5 completion:v6];
}

void sub_10005DF64(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  objc_msgSend(a3, "ams_sanitizedForSecureCoding");
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_10005E0CC(uint64_t a1)
{
  id v2 = [objc_alloc((Class)AMSBiometricsSignatureTask) initWithRequest:*(void *)(a1 + 32)];
  uint64_t v3 = [v2 performSignatureFromService];
  id v8 = 0;
  uint64_t v4 = [v3 resultWithTimeout:&v8 error:60.0];
  id v5 = v8;

  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    id v7 = objc_msgSend(v5, "ams_sanitizedForSecureCoding");
    (*(void (**)(uint64_t, void *, void *))(v6 + 16))(v6, v4, v7);
  }
}

void sub_10005E370(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = +[AMSLogConfig sharedConfig];
    if (!v7)
    {
      id v7 = +[AMSLogConfig sharedConfig];
    }
    id v8 = [v7 OSLogObject];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = objc_opt_class();
      uint64_t v10 = *(void *)(a1 + 40);
      int v25 = 138543874;
      uint64_t v26 = v9;
      __int16 v27 = 2114;
      uint64_t v28 = v10;
      __int16 v29 = 2114;
      id v30 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Silent-enrollment payment session failed with error: %{public}@", (uint8_t *)&v25, 0x20u);
    }

    id v11 = v6;
    id v12 = 0;
  }
  else
  {
    __int16 v13 = [v5 object];
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    uint64_t v15 = +[AMSLogConfig sharedConfig];
    id v16 = (void *)v15;
    if (isKindOfClass)
    {
      if (!v15)
      {
        id v16 = +[AMSLogConfig sharedConfig];
      }
      id v17 = [v16 OSLogObject];
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = objc_opt_class();
        uint64_t v19 = *(void *)(a1 + 40);
        int v25 = 138543618;
        uint64_t v26 = v18;
        __int16 v27 = 2114;
        uint64_t v28 = v19;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Silent-enrollment payment session completed successfully", (uint8_t *)&v25, 0x16u);
      }

      id v12 = v13;
      id v11 = 0;
    }
    else
    {
      if (!v15)
      {
        id v16 = +[AMSLogConfig sharedConfig];
      }
      unsigned int v20 = [v16 OSLogObject];
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        uint64_t v21 = objc_opt_class();
        uint64_t v22 = *(void *)(a1 + 40);
        int v25 = 138543618;
        uint64_t v26 = v21;
        __int16 v27 = 2114;
        uint64_t v28 = v22;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Silent-enrollment payment session failed to deserialize JSON response", (uint8_t *)&v25, 0x16u);
      }

      AMSError();
      id v11 = (id)objc_claimAutoreleasedReturnValue();
      id v12 = 0;
    }
  }
  uint64_t v23 = *(void *)(a1 + 48);
  if (v23)
  {
    uint64_t v24 = objc_msgSend(v11, "ams_sanitizedForSecureCoding");
    (*(void (**)(uint64_t, id, void *))(v23 + 16))(v23, v12, v24);
  }
}

uint64_t sub_10005E7E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

Class sub_10005E838(uint64_t a1)
{
  sub_10005E890();
  Class result = objc_getClass("PKInAppPaymentService");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1000CB6D4();
  }
  qword_1001304D8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_10005E890()
{
  v1[0] = 0;
  if (!qword_1001304E0)
  {
    v1[1] = _NSConcreteStackBlock;
    v1[2] = 3221225472;
    v1[3] = sub_10005E98C;
    v1[4] = &unk_1001127A8;
    v1[5] = v1;
    long long v2 = off_100114478;
    uint64_t v3 = 0;
    qword_1001304E0 = _sl_dlopen();
  }
  uint64_t v0 = (void *)v1[0];
  if (!qword_1001304E0)
  {
    uint64_t v0 = (void *)abort_report_np();
    goto LABEL_7;
  }
  if (v1[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t sub_10005E98C()
{
  uint64_t result = _sl_dlopen();
  qword_1001304E0 = result;
  return result;
}

Class sub_10005EA00(uint64_t a1)
{
  v3[0] = 0;
  if (!qword_1001304F0)
  {
    v3[1] = _NSConcreteStackBlock;
    v3[2] = (void *)3221225472;
    v3[3] = sub_10005EB44;
    v3[4] = &unk_1001127A8;
    void v3[5] = v3;
    long long v4 = off_100114490;
    uint64_t v5 = 0;
    qword_1001304F0 = _sl_dlopen();
    if (!qword_1001304F0)
    {
      abort_report_np();
LABEL_8:
      sub_1000CB724();
    }
    if (v3[0]) {
      free(v3[0]);
    }
  }
  Class result = objc_getClass("PKAuthenticator");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    goto LABEL_8;
  }
  qword_1001304E8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_10005EB44()
{
  uint64_t result = _sl_dlopen();
  qword_1001304F0 = result;
  return result;
}

Class sub_10005EBB8(uint64_t a1)
{
  sub_10005E890();
  Class result = objc_getClass("PKPassLibrary");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1000CB74C();
  }
  qword_1001304F8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_10005F13C(id a1)
{
  qword_100130508 = (uint64_t)objc_alloc_init((Class)NSMutableDictionary);
  _objc_release_x1();
}

void sub_10005F178(id a1)
{
  uint64_t v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.amsaccountsd.AMSDTransactionStore.transactions", v3);
  long long v2 = (void *)qword_100130518;
  qword_100130518 = (uint64_t)v1;
}

void sub_10005F1DC(id a1)
{
  qword_100130528 = (uint64_t)objc_alloc_init((Class)NSCountedSet);
  _objc_release_x1();
}

void sub_10005F2A0(uint64_t a1)
{
  long long v2 = +[AMSLogConfig sharedAccountsDaemonConfig];
  if (!v2)
  {
    long long v2 = +[AMSLogConfig sharedConfig];
  }
  uint64_t v3 = [v2 OSLogObject];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = objc_opt_class();
    uint64_t v5 = [*(id *)(a1 + 32) transactions];
    *(_DWORD *)long long buf = 138543618;
    uint64_t v9 = v4;
    __int16 v10 = 2114;
    id v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%{public}@: Flush all keep alive transaction. remaining transactions = %{public}@", buf, 0x16u);
  }
  id v6 = [*(id *)(a1 + 32) transactions];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10005F420;
  v7[3] = &unk_100114508;
  void v7[4] = *(void *)(a1 + 32);
  [v6 enumerateKeysAndObjectsUsingBlock:v7];

  qword_10012DE28 = 0;
}

void sub_10005F420(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) transactionsCount];
  id v5 = [v4 countForObject:v3];

  if (!v5)
  {
    id v6 = +[AMSLogConfig sharedAccountsDaemonConfig];
    if (!v6)
    {
      id v6 = +[AMSLogConfig sharedConfig];
    }
    id v7 = [v6 OSLogObject];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = objc_opt_class();
      uint64_t v9 = AMSLogKey();
      int v11 = 138543874;
      uint64_t v12 = v8;
      __int16 v13 = 2114;
      uint64_t v14 = v9;
      __int16 v15 = 2114;
      id v16 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%{public}@: [%{public}@] Releasing a keep alive transaction. transactionID = %{public}@", (uint8_t *)&v11, 0x20u);
    }
    __int16 v10 = [*(id *)(a1 + 32) transactions];
    [v10 setObject:0 forKeyedSubscript:v3];
  }
}

void sub_10005F5CC(id a1)
{
  qword_10012DE28 = 0x4014000000000000;
}

void sub_10005F5DC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = (id)AMSSetLogKey();
  uint64_t v4 = [WeakRetained transactionsCount];
  id v5 = [v4 countForObject:*(void *)(a1 + 40)];

  if (!v5)
  {
    id v6 = +[AMSLogConfig sharedAccountsDaemonConfig];
    if (!v6)
    {
      id v6 = +[AMSLogConfig sharedConfig];
    }
    id v7 = [v6 OSLogObject];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = objc_opt_class();
      uint64_t v9 = AMSLogKey();
      uint64_t v10 = *(void *)(a1 + 40);
      int v12 = 138543874;
      uint64_t v13 = v8;
      __int16 v14 = 2114;
      __int16 v15 = v9;
      __int16 v16 = 2114;
      uint64_t v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%{public}@: [%{public}@] Releasing a keep alive transaction. transactionID = %{public}@", (uint8_t *)&v12, 0x20u);
    }
    int v11 = [WeakRetained transactions];
    [v11 setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
  }
}

void sub_10005F920(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v2 = (id)AMSSetLogKey();
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  [WeakRetained releaseKeepAliveTransaction:*(void *)(a1 + 40)];
}

uint64_t sub_10005FA24(uint64_t a1, void *a2)
{
  id v2 = +[AMSLogConfig sharedAccountsDaemonConfig];
  if (!v2)
  {
    id v2 = +[AMSLogConfig sharedConfig];
  }
  id v3 = [v2 OSLogObject];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = objc_opt_class();
    id v5 = v4;
    id v6 = AMSLogKey();
    *(_DWORD *)long long buf = 138543618;
    uint64_t v53 = (uint64_t)v4;
    __int16 v54 = 2114;
    __int16 v55 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Starting update device language task", buf, 0x16u);
  }
  uint64_t v61 = AMSAccountMediaTypeProduction;
  +[NSArray arrayWithObjects:&v61 count:1];
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  id v8 = [v7 countByEnumeratingWithState:&v48 objects:v60 count:16];
  if (!v8)
  {

    int v11 = &swift_willThrow_ptr;
    goto LABEL_34;
  }
  id v9 = v8;
  uint64_t v10 = 0;
  uint64_t v44 = *(void *)v49;
  int v11 = &swift_willThrow_ptr;
  id obj = v7;
  do
  {
    int v12 = 0;
    do
    {
      if (*(void *)v49 != v44) {
        objc_enumerationMutation(obj);
      }
      uint64_t v13 = *(void **)(*((void *)&v48 + 1) + 8 * (void)v12);
      __int16 v14 = [v11[175] sharedAccountsDaemonConfig];
      if (!v14)
      {
        __int16 v14 = [v11[175] sharedConfig];
      }
      __int16 v15 = [v14 OSLogObject];
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v16 = objc_opt_class();
        id v17 = v16;
        uint64_t v18 = AMSLogKey();
        *(_DWORD *)long long buf = 138543874;
        uint64_t v53 = (uint64_t)v16;
        __int16 v54 = 2114;
        __int16 v55 = v18;
        __int16 v56 = 2114;
        uint64_t v57 = v13;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Updating language code. mediaType = %{public}@", buf, 0x20u);
      }
      uint64_t v19 = +[ACAccountStore ams_sharedAccountStoreForMediaType:v13];
      uint64_t v20 = objc_msgSend(v19, "ams_activeiTunesAccount");
      if (v20)
      {
        uint64_t v21 = (void *)v20;
LABEL_18:
        uint64_t v24 = [*(id *)(a1 + 32) _updateLanguageForAccount:v21 mediaType:v13];
        id v46 = v10;
        [v24 resultWithError:&v46];
        id v25 = v46;

        uint64_t v10 = v25;
        int v11 = &swift_willThrow_ptr;
        goto LABEL_19;
      }
      uint64_t v22 = objc_msgSend(v19, "ams_fetchLocaliTunesAccount");
      id v47 = v10;
      uint64_t v21 = [v22 resultWithError:&v47];
      id v23 = v47;

      if (v21)
      {
        uint64_t v10 = v23;
        goto LABEL_18;
      }
      uint64_t v21 = [v11[175] sharedAccountsDaemonConfig];
      if (!v21)
      {
        uint64_t v21 = [v11[175] sharedConfig];
      }
      uint64_t v24 = [v21 OSLogObject];
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = objc_opt_class();
        __int16 v27 = AMSLogKey();
        uint64_t v28 = AMSLogableError();
        *(_DWORD *)long long buf = 138544130;
        uint64_t v53 = v26;
        __int16 v54 = 2114;
        __int16 v55 = v27;
        __int16 v56 = 2114;
        uint64_t v57 = v13;
        __int16 v58 = 2114;
        id v59 = v28;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to fetch either the active or local accounts. mediaType = %{public}@ | error = %{public}@", buf, 0x2Au);

        int v11 = &swift_willThrow_ptr;
      }
      uint64_t v10 = v23;
LABEL_19:

      int v12 = (char *)v12 + 1;
    }
    while (v9 != v12);
    id v7 = obj;
    id v29 = [obj countByEnumeratingWithState:&v48 objects:v60 count:16];
    id v9 = v29;
  }
  while (v29);

  if (v10)
  {
    id v30 = [v11[175] sharedAccountsDaemonConfig];
    if (!v30)
    {
      id v30 = [v11[175] sharedConfig];
    }
    __int16 v31 = [v30 OSLogObject];
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = objc_opt_class();
      id v33 = v32;
      id v34 = AMSLogKey();
      id v35 = AMSLogableError();
      *(_DWORD *)long long buf = 138543874;
      uint64_t v53 = (uint64_t)v32;
      __int16 v54 = 2114;
      __int16 v55 = v34;
      __int16 v56 = 2114;
      uint64_t v57 = v35;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to send the network request in response to the device's language code changing. Error = %{public}@", buf, 0x20u);

      id v7 = obj;
    }
    uint64_t v36 = 0;
    goto LABEL_39;
  }
LABEL_34:
  id v30 = [v11[175] sharedAccountsDaemonConfig];
  if (!v30)
  {
    id v30 = [v11[175] sharedConfig];
  }
  __int16 v31 = [v30 OSLogObject];
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    id v37 = objc_opt_class();
    id v38 = v37;
    AMSLogKey();
    v40 = id v39 = v7;
    *(_DWORD *)long long buf = 138543618;
    uint64_t v53 = (uint64_t)v37;
    __int16 v54 = 2114;
    __int16 v55 = v40;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Successfully sent network request in response to the device's language code changing", buf, 0x16u);

    id v7 = v39;
  }
  uint64_t v10 = 0;
  uint64_t v36 = 1;
LABEL_39:

  if (a2) {
    *a2 = v10;
  }

  return v36;
}

AMSPromise *__cdecl sub_100060270(id a1, AMSURLRequest *a2)
{
  id v2 = a2;
  id v3 = +[AMSURLSession defaultSession];
  uint64_t v4 = [v3 dataTaskPromiseWithRequest:v2];

  return (AMSPromise *)v4;
}

void sub_1000602E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3 = *(void **)(a1 + 32);
  if (a3)
  {
    AMSError();
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    [v3 finishWithError:v5];
  }
  else
  {
    uint64_t v4 = *(void **)(a1 + 32);
    [v4 finishWithSuccess];
  }
}

id sub_1000604D0(uint64_t a1)
{
  id v2 = +[AMSLogConfig sharedAccountsMultiUserConfig];
  if (!v2)
  {
    id v2 = +[AMSLogConfig sharedConfig];
  }
  id v3 = [v2 OSLogObject];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v38 = objc_opt_class();
    id v39 = AMSLogKey();
    uint64_t v4 = [*(id *)(a1 + 32) account];
    AMSHashIfNeeded();
    id v5 = (uint64_t (*)(uint64_t, uint64_t))objc_claimAutoreleasedReturnValue();
    id v6 = [*(id *)(a1 + 32) home];
    id v7 = AMSHashIfNeeded();
    id v8 = [*(id *)(a1 + 32) home];
    id v9 = [v8 currentUser];
    uint64_t v10 = AMSHashIfNeeded();
    *(_DWORD *)long long buf = 138544386;
    *(void *)&uint8_t buf[4] = v38;
    *(_WORD *)&buf[12] = 2114;
    *(void *)&buf[14] = v39;
    *(_WORD *)&buf[22] = 2114;
    long long v50 = v5;
    *(_WORD *)long long v51 = 2114;
    *(void *)&v51[2] = v7;
    *(_WORD *)&v51[10] = 2114;
    *(void *)&v51[12] = v10;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Updating a home's multi-user token. account = %{public}@ | home = %{public}@ | home.currentUser = %{public}@", buf, 0x34u);
  }
  int v11 = [*(id *)(a1 + 32) metrics];
  BOOL v12 = v11 == 0;

  if (v12)
  {
    uint64_t v13 = objc_alloc_init(AMSDMultiUserMetrics);
    [*(id *)(a1 + 32) setMetrics:v13];
  }
  __int16 v14 = [*(id *)(a1 + 32) metrics];
  [v14 homeKitRepairRequestUpdateTokenBegin];

  __int16 v15 = [*(id *)(a1 + 32) home];
  unsigned int v16 = [v15 isCurrentUserRestrictedGuest];

  if (v16)
  {
    AMSError();
    id v17 = (uint64_t (*)(uint64_t, uint64_t))objc_claimAutoreleasedReturnValue();
    uint64_t v18 = +[AMSLogConfig sharedAccountsMultiUserConfig];
    if (!v18)
    {
      uint64_t v18 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v19 = [v18 OSLogObject];
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = objc_opt_class();
      uint64_t v21 = AMSLogKey();
      *(_DWORD *)long long buf = 138543874;
      *(void *)&uint8_t buf[4] = v20;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v21;
      *(_WORD *)&buf[22] = 2114;
      long long v50 = v17;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Restricted Guest Error: %{public}@", buf, 0x20u);
    }
    uint64_t v22 = +[AMSPromise promiseWithError:v17];
  }
  else
  {
    *(void *)long long buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    long long v50 = sub_100015B18;
    *(void *)long long v51 = sub_100015A7C;
    *(void *)&v51[8] = 0;
    id v23 = [*(id *)(a1 + 32) controller];
    uint64_t v24 = [v23 cloudContainer];
    id v25 = [v24 privateDatabase];

    uint64_t v26 = [AMSDFetchMultiUserRecordZoneTask alloc];
    __int16 v27 = [*(id *)(a1 + 32) home];
    uint64_t v28 = [*(id *)(a1 + 32) home];
    id v29 = [v28 currentUser];
    id v30 = [*(id *)(a1 + 32) metrics];
    __int16 v31 = [(AMSDFetchMultiUserRecordZoneTask *)v26 initWithHome:v27 homeUser:v29 database:v25 metrics:v30];

    uint64_t v32 = [*(id *)(a1 + 32) account];
    [(AMSDFetchMultiUserRecordZoneTask *)v31 setCreateIfMissing:v32 != 0];

    id v33 = [(AMSDFetchMultiUserRecordZoneTask *)v31 performTask];
    v48[0] = _NSConcreteStackBlock;
    v48[1] = 3221225472;
    v48[2] = sub_100060B58;
    v48[3] = &unk_100111F20;
    void v48[4] = *(void *)(a1 + 32);
    [v33 addErrorBlock:v48];
    v45[0] = _NSConcreteStackBlock;
    v45[1] = 3221225472;
    v45[2] = sub_100060C8C;
    v45[3] = &unk_100114658;
    void v45[4] = *(void *)(a1 + 32);
    id v47 = buf;
    id v34 = v25;
    id v46 = v34;
    id v35 = [v33 continueWithBlock:v45];
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472;
    v42[2] = sub_10006121C;
    v42[3] = &unk_100114770;
    void v42[4] = *(void *)(a1 + 32);
    id v36 = v34;
    id v43 = v36;
    uint64_t v44 = buf;
    uint64_t v22 = [v35 thenWithBlock:v42];

    v41[0] = _NSConcreteStackBlock;
    v41[1] = 3221225472;
    v41[2] = sub_100062004;
    v41[3] = &unk_100113F70;
    v41[4] = *(void *)(a1 + 32);
    [v22 addSuccessBlock:v41];
    v40[0] = _NSConcreteStackBlock;
    v40[1] = 3221225472;
    v40[2] = sub_100062160;
    v40[3] = &unk_100111F20;
    v40[4] = *(void *)(a1 + 32);
    [v22 addErrorBlock:v40];

    _Block_object_dispose(buf, 8);
  }
  return v22;
}

void sub_100060B2C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_100060B58(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = +[AMSLogConfig sharedAccountsMultiUserConfig];
  if (!v3)
  {
    id v3 = +[AMSLogConfig sharedConfig];
  }
  uint64_t v4 = [v3 OSLogObject];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = objc_opt_class();
    id v6 = AMSLogKey();
    id v7 = AMSHashIfNeeded();
    int v8 = 138543874;
    uint64_t v9 = v5;
    __int16 v10 = 2114;
    int v11 = v6;
    __int16 v12 = 2114;
    uint64_t v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to fetch the record zone. error = %{public}@", (uint8_t *)&v8, 0x20u);
  }
}

id sub_100060C8C(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if ([v7 code] == (id)7
    && ([*(id *)(a1 + 32) account],
        int v8 = objc_claimAutoreleasedReturnValue(),
        v8,
        !v8))
  {
    uint64_t v9 = +[AMSLogConfig sharedAccountsMultiUserConfig];
    if (!v9)
    {
      uint64_t v9 = +[AMSLogConfig sharedConfig];
    }
    __int16 v10 = [v9 OSLogObject];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = objc_opt_class();
      uint64_t v19 = AMSLogKey();
      uint64_t v20 = AMSHashIfNeeded();
      *(_DWORD *)long long buf = 138543874;
      uint64_t v24 = v18;
      __int16 v25 = 2114;
      uint64_t v26 = v19;
      __int16 v27 = 2114;
      uint64_t v28 = v20;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Home participant record zone not found and an account was not provided. error = %{public}@", buf, 0x20u);
    }
  }
  else
  {
    if (!v7)
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a2);
      __int16 v14 = *(void **)(a1 + 40);
      __int16 v15 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) identifier];
      unsigned int v16 = [v14 fetchRecordWithName:@"AMSHomeParticipant" zoneIdentifier:v15];
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      void v22[2] = sub_100060FE4;
      v22[3] = &unk_100113668;
      void v22[4] = *(void *)(a1 + 32);
      id v17 = [v16 continueWithBlock:v22];

      goto LABEL_15;
    }
    uint64_t v9 = +[AMSLogConfig sharedAccountsMultiUserConfig];
    if (!v9)
    {
      uint64_t v9 = +[AMSLogConfig sharedConfig];
    }
    __int16 v10 = [v9 OSLogObject];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = objc_opt_class();
      __int16 v12 = AMSLogKey();
      uint64_t v13 = AMSHashIfNeeded();
      *(_DWORD *)long long buf = 138543874;
      uint64_t v24 = v11;
      __int16 v25 = 2114;
      uint64_t v26 = v12;
      __int16 v27 = 2114;
      uint64_t v28 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to fetch the home participant record zone. error = %{public}@", buf, 0x20u);
    }
  }

  __int16 v15 = AMSError();
  id v17 = +[AMSPromise promiseWithError:v15];
LABEL_15:

  return v17;
}

id sub_100060FE4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v5)
  {
    int v8 = [*(id *)(a1 + 32) metrics];
    id v9 = [v8 enqueueCloudKitFetchSuccessEvent];

    uint64_t v10 = +[AMSOptional optionalWithValue:v5];
LABEL_7:
    uint64_t v13 = (void *)v10;
    __int16 v14 = +[AMSPromise promiseWithResult:v10];

    goto LABEL_8;
  }
  if (objc_msgSend(v6, "ams_hasDomain:code:", @"AMSDCloudDataErrorDomain", 7))
  {
    if (v7)
    {
      uint64_t v11 = [*(id *)(a1 + 32) metrics];
      id v12 = [v11 enqueueCloudKitFetchFailedEventWithError:v7];
    }
    uint64_t v10 = +[AMSOptional optionalWithNil];
    goto LABEL_7;
  }
  unsigned int v16 = +[AMSLogConfig sharedAccountsMultiUserConfig];
  if (!v16)
  {
    unsigned int v16 = +[AMSLogConfig sharedConfig];
  }
  id v17 = [v16 OSLogObject];
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    uint64_t v18 = objc_opt_class();
    uint64_t v19 = AMSLogKey();
    uint64_t v20 = AMSHashIfNeeded();
    int v21 = 138543874;
    uint64_t v22 = v18;
    __int16 v23 = 2114;
    uint64_t v24 = v19;
    __int16 v25 = 2114;
    uint64_t v26 = v20;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to fetch the home participant record. error = %{public}@", (uint8_t *)&v21, 0x20u);
  }
  __int16 v14 = +[AMSPromise promiseWithError:v7];
LABEL_8:

  return v14;
}

id sub_10006121C(uint64_t a1, void *a2)
{
  id v3 = [a2 value];
  uint64_t v4 = [*(id *)(a1 + 32) account];
  if (v4
    || v3
    && (+[ACAccountStore ams_sharedAccountStore],
        unsigned int v16 = objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v16, "amsd_iTunesAccountForHomeParticipant:createEphemeral:", v3, 1),
        uint64_t v4 = objc_claimAutoreleasedReturnValue(),
        v16,
        v4))
  {
    id v5 = [AMSDGenerateMultiUserTokenTask alloc];
    id v6 = [*(id *)(a1 + 32) controller];
    id v7 = [*(id *)(a1 + 32) home];
    int v8 = [(AMSDGenerateMultiUserTokenTask *)v5 initWithController:v6 account:v4 home:v7];

    id v9 = [v3 fieldForKey:@"AMSHomeParticipant_MultiUserToken"];
    [(AMSDGenerateMultiUserTokenTask *)v8 setTokenNeedsRegeneration:v9 != 0];

    uint64_t v10 = [(AMSDGenerateMultiUserTokenTask *)v8 performTask];
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    void v23[2] = sub_100061528;
    v23[3] = &unk_100114748;
    id v24 = v3;
    id v25 = v4;
    uint64_t v11 = *(void **)(a1 + 40);
    uint64_t v26 = *(void *)(a1 + 32);
    id v12 = v11;
    uint64_t v13 = *(void *)(a1 + 48);
    id v27 = v12;
    uint64_t v28 = v13;
    id v14 = v4;
    __int16 v15 = [v10 continueWithBlock:v23];
  }
  else
  {
    id v17 = +[AMSLogConfig sharedAccountsMultiUserConfig];
    if (!v17)
    {
      id v17 = +[AMSLogConfig sharedConfig];
    }
    uint64_t v18 = [v17 OSLogObject];
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = objc_opt_class();
      uint64_t v20 = AMSLogKey();
      int v21 = AMSHashIfNeeded();
      *(_DWORD *)long long buf = 138543874;
      uint64_t v30 = v19;
      __int16 v31 = 2114;
      uint64_t v32 = v20;
      __int16 v33 = 2114;
      id v34 = v21;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] The caller didn't provide an account, and the home participant record isn't associated with one. homeParticipant = %{public}@", buf, 0x20u);
    }
    AMSError();
    id v14 = (id)objc_claimAutoreleasedReturnValue();
    __int16 v15 = +[AMSPromise promiseWithError:v14];
  }

  return v15;
}

id sub_100061528(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (v6)
  {
    int v8 = +[AMSPromise promiseWithResult:v6];
    goto LABEL_17;
  }
  if (*(void *)(a1 + 32))
  {
    id v9 = +[ACAccountStore ams_sharedAccountStore];
    uint64_t v10 = objc_msgSend(v9, "amsd_iTunesAccountForHomeParticipant:createEphemeral:", *(void *)(a1 + 32), 1);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v11 = objc_msgSend(v10, "ams_altDSID");
  uint64_t v12 = objc_msgSend(v10, "ams_DSID");
  uint64_t v13 = (void *)v12;
  if (v11)
  {
    id v3 = objc_msgSend(*(id *)(a1 + 40), "ams_altDSID");
    if ([v3 isEqualToString:v11])
    {
      unsigned int v14 = 1;
LABEL_15:

      goto LABEL_16;
    }
    if (!v13)
    {
      unsigned int v14 = 0;
      goto LABEL_15;
    }
  }
  else if (!v12)
  {
    unsigned int v14 = 0;
    goto LABEL_16;
  }
  __int16 v15 = objc_msgSend(*(id *)(a1 + 40), "ams_DSID");
  unsigned int v14 = [v15 isEqualToNumber:v13];

  if (v11) {
    goto LABEL_15;
  }
LABEL_16:

  unsigned int v16 = +[AMSPromise promiseWithError:v7];
  int v8 = v16;
  if (!v14)
  {
    id v25 = v16;
    uint64_t v26 = v25;
    goto LABEL_22;
  }
LABEL_17:
  id v17 = +[AMSLogConfig sharedAccountsMultiUserConfig];
  if (!v17)
  {
    id v17 = +[AMSLogConfig sharedConfig];
  }
  uint64_t v18 = [v17 OSLogObject];
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v19 = objc_opt_class();
    uint64_t v20 = AMSLogKey();
    *(_DWORD *)long long buf = 138544130;
    uint64_t v36 = v19;
    __int16 v37 = 2114;
    uint64_t v38 = v20;
    __int16 v39 = 1024;
    BOOL v40 = v6 == 0;
    __int16 v41 = 1024;
    BOOL v42 = v40;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Setting repair flags. multiUserTokenInvalid = %d | currentUserNeedsTokenRepair = %d", buf, 0x22u);
  }
  int v21 = *(void **)(a1 + 56);
  uint64_t v22 = [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) identifier];
  __int16 v23 = [v21 fetchRecordWithName:@"AMSHomeParticipant" zoneIdentifier:v22];
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  v31[2] = sub_100061914;
  v31[3] = &unk_1001146D0;
  v31[4] = *(void *)(a1 + 48);
  id v32 = v7;
  BOOL v34 = v6 == 0;
  id v33 = *(id *)(a1 + 56);
  id v24 = [v23 continueWithBlock:v31];

  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  v28[2] = sub_100061D5C;
  v28[3] = &unk_100114720;
  void v28[4] = *(void *)(a1 + 48);
  BOOL v30 = v6 == 0;
  id v25 = v8;
  id v29 = v25;
  uint64_t v26 = [v24 continueWithBlock:v28];

LABEL_22:
  return v26;
}

id sub_100061914(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 56)];
    [v3 setField:v4 forKey:@"AMSHomeParticipant_MultiUserTokenInvalid"];

    id v5 = [*(id *)(a1 + 32) metrics];
    id v6 = [v5 enqueueCloudKitSaveRecordEvent];

    id v7 = [*(id *)(a1 + 48) saveRecord:v3];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100061BA0;
    v15[3] = &unk_100114680;
    void v15[4] = *(void *)(a1 + 32);
    char v16 = *(unsigned char *)(a1 + 56);
    [v7 addErrorBlock:v15];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    _OWORD v14[2] = sub_100061D10;
    v14[3] = &unk_1001146A8;
    v14[4] = *(void *)(a1 + 32);
    [v7 addSuccessBlock:v14];
  }
  else
  {
    int v8 = +[AMSLogConfig sharedAccountsMultiUserConfig];
    if (!v8)
    {
      int v8 = +[AMSLogConfig sharedConfig];
    }
    id v9 = [v8 OSLogObject];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = objc_opt_class();
      uint64_t v11 = AMSLogKey();
      uint64_t v12 = AMSHashIfNeeded();
      *(_DWORD *)long long buf = 138543874;
      uint64_t v18 = v10;
      __int16 v19 = 2114;
      uint64_t v20 = v11;
      __int16 v21 = 2114;
      uint64_t v22 = v12;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Unable to set a repair flag. Failed to fetch the home participant. error = %{public}@", buf, 0x20u);
    }
    id v7 = +[AMSPromise promiseWithError:*(void *)(a1 + 40)];
  }

  return v7;
}

void sub_100061BA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[AMSLogConfig sharedAccountsMultiUserConfig];
  if (!v4)
  {
    uint64_t v4 = +[AMSLogConfig sharedConfig];
  }
  id v5 = [v4 OSLogObject];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = objc_opt_class();
    id v7 = AMSLogKey();
    int v8 = *(unsigned __int8 *)(a1 + 40);
    id v9 = AMSHashIfNeeded();
    int v12 = 138544130;
    uint64_t v13 = v6;
    __int16 v14 = 2114;
    __int16 v15 = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    __int16 v18 = 2114;
    __int16 v19 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to set the multi-user token's invalid status. status = %d | error = %{public}@", (uint8_t *)&v12, 0x26u);
  }
  uint64_t v10 = [*(id *)(a1 + 32) metrics];
  id v11 = [v10 enqueueCloudKitSaveRecordFailedEventWithError:v3];
}

void sub_100061D10(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) metrics];
  id v1 = [v2 enqueueCloudKitSaveRecordSucceededEvent];
}

id sub_100061D5C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) home];
  id v3 = [v2 setCurrentUserNeedsTokenRepair:*(unsigned __int8 *)(a1 + 48)];

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100061EA8;
  v9[3] = &unk_1001146F8;
  void v9[4] = *(void *)(a1 + 32);
  char v10 = *(unsigned char *)(a1 + 48);
  [v3 addFinishBlock:v9];
  uint64_t v4 = [v3 promiseAdapter];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100061FFC;
  v7[3] = &unk_100113270;
  id v8 = *(id *)(a1 + 40);
  id v5 = [v4 continueWithBlock:v7];

  return v5;
}

void sub_100061EA8(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = +[AMSLogConfig sharedAccountsMultiUserConfig];
    if (!v6)
    {
      uint64_t v6 = +[AMSLogConfig sharedConfig];
    }
    id v7 = [v6 OSLogObject];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = objc_opt_class();
      id v9 = AMSLogKey();
      int v10 = *(unsigned __int8 *)(a1 + 40);
      id v11 = AMSHashIfNeeded();
      int v12 = 138544130;
      uint64_t v13 = v8;
      __int16 v14 = 2114;
      __int16 v15 = v9;
      __int16 v16 = 1024;
      int v17 = v10;
      __int16 v18 = 2114;
      __int16 v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to set the home's token repair status. status = %d | error = %{public}@", (uint8_t *)&v12, 0x26u);
    }
  }
}

id sub_100061FFC(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_100062004(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[AMSLogConfig sharedAccountsMultiUserConfig];
  if (!v4)
  {
    uint64_t v4 = +[AMSLogConfig sharedConfig];
  }
  id v5 = [v4 OSLogObject];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = objc_opt_class();
    id v7 = AMSLogKey();
    uint64_t v8 = AMSHashIfNeeded();
    int v11 = 138543874;
    uint64_t v12 = v6;
    __int16 v13 = 2114;
    __int16 v14 = v7;
    __int16 v15 = 2114;
    __int16 v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Successfully updated the home's multi-user token. token = %{public}@", (uint8_t *)&v11, 0x20u);
  }
  id v9 = [*(id *)(a1 + 32) metrics];
  id v10 = [v9 enqueueHomeKitRepairRequestCompletedSuccessEvent];
}

void sub_100062160(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[AMSLogConfig sharedAccountsMultiUserConfig];
  if (!v4)
  {
    uint64_t v4 = +[AMSLogConfig sharedConfig];
  }
  id v5 = [v4 OSLogObject];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = objc_opt_class();
    id v7 = AMSLogKey();
    uint64_t v8 = AMSHashIfNeeded();
    int v11 = 138543874;
    uint64_t v12 = v6;
    __int16 v13 = 2114;
    __int16 v14 = v7;
    __int16 v15 = 2114;
    __int16 v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to update the home's multi-user token. error = %{public}@", (uint8_t *)&v11, 0x20u);
  }
  id v9 = [*(id *)(a1 + 32) metrics];
  id v10 = [v9 enqueueHomeKitRepairRequestCompletedFailedEventWithError:v3];
}

void sub_10006247C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006249C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setPasscodeStringPromise:0];
}

void sub_100062760(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = [v7 info];
  uint64_t v4 = [v3 objectForSetting:1];

  if ([v4 length])
  {
    [*(id *)(a1 + 32) finishWithResult:v4];
  }
  else
  {
    id v5 = [v7 error];
    uint64_t v6 = AMSError();

    [*(id *)(a1 + 32) finishWithError:v6];
  }
}

void sub_100062C34(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) activityIdentifier];
  id v5 = +[NSString stringWithFormat:@"com.apple.amsaccountsd.registerActivity.%@", v4];
  [v5 UTF8String];

  uint64_t v6 = (void *)os_transaction_create();
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  uint64_t v8 = +[AMSLogConfig sharedAccountsDaemonConfig];
  if (!v8)
  {
    uint64_t v8 = +[AMSLogConfig sharedConfig];
  }
  id v9 = [v8 OSLogObject];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = objc_opt_class();
    int v11 = AMSLogKey();
    uint64_t v12 = [*(id *)(a1 + 32) activityIdentifier];
    *(_DWORD *)long long buf = 138544130;
    uint64_t v33 = v10;
    __int16 v34 = 2114;
    id v35 = v11;
    __int16 v36 = 2114;
    __int16 v37 = v12;
    __int16 v38 = 2048;
    xpc_activity_state_t v39 = state;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Fetched state for %{public}@: %li", buf, 0x2Au);
  }
  if (state == 2)
  {
    uint64_t v20 = +[AMSLogConfig sharedAccountsDaemonConfig];
    if (!v20)
    {
      uint64_t v20 = +[AMSLogConfig sharedConfig];
    }
    __int16 v21 = [v20 OSLogObject];
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = objc_opt_class();
      __int16 v23 = AMSLogKey();
      id v24 = [*(id *)(a1 + 32) activityIdentifier];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v33 = v22;
      __int16 v34 = 2114;
      id v35 = v23;
      __int16 v36 = 2114;
      __int16 v37 = v24;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Running activity %{public}@", buf, 0x20u);
    }
    [*(id *)(a1 + 32) runActivityQueuedByScheduler:*(void *)(a1 + 40)];
  }
  else
  {
    if (state)
    {
      __int16 v13 = +[AMSLogConfig sharedAccountsDaemonConfig];
      if (!v13)
      {
        __int16 v13 = +[AMSLogConfig sharedConfig];
      }
      __int16 v15 = [v13 OSLogObject];
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v25 = objc_opt_class();
        uint64_t v26 = AMSLogKey();
        id v27 = [*(id *)(a1 + 32) activityIdentifier];
        *(_DWORD *)long long buf = 138543874;
        uint64_t v33 = v25;
        __int16 v34 = 2114;
        id v35 = v26;
        __int16 v36 = 2114;
        __int16 v37 = v27;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Unknown state for %{public}@", buf, 0x20u);
      }
    }
    else
    {
      __int16 v13 = xpc_activity_copy_criteria(v3);
      uint64_t v14 = +[AMSLogConfig sharedAccountsDaemonConfig];
      __int16 v15 = v14;
      if (v13)
      {
        if (!v14)
        {
          __int16 v15 = +[AMSLogConfig sharedConfig];
        }
        __int16 v16 = [v15 OSLogObject];
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v17 = objc_opt_class();
          __int16 v18 = AMSLogKey();
          __int16 v19 = [*(id *)(a1 + 32) activityIdentifier];
          *(_DWORD *)long long buf = 138544130;
          uint64_t v33 = v17;
          __int16 v34 = 2114;
          id v35 = v18;
          __int16 v36 = 2114;
          __int16 v37 = v19;
          __int16 v38 = 2114;
          xpc_activity_state_t v39 = (xpc_activity_state_t)v13;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] checkin found criteria for %{public}@: %{public}@", buf, 0x2Au);
        }
      }
      else
      {
        if (!v14)
        {
          __int16 v15 = +[AMSLogConfig sharedConfig];
        }
        uint64_t v28 = [v15 OSLogObject];
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v29 = objc_opt_class();
          BOOL v30 = AMSLogKey();
          __int16 v31 = [*(id *)(a1 + 32) activityIdentifier];
          *(_DWORD *)long long buf = 138543874;
          uint64_t v33 = v29;
          __int16 v34 = 2114;
          id v35 = v30;
          __int16 v36 = 2114;
          __int16 v37 = v31;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Setting criteria for %{public}@", buf, 0x20u);
        }
        __int16 v15 = [*(id *)(a1 + 32) criteria];
        xpc_activity_set_criteria(v3, v15);
      }
    }
  }
}

BOOL sub_1000633B8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 2) {
        break;
      }
      if ((v6 >> 3) == 1)
      {
        uint64_t v12 = PBReaderReadData();
        uint64_t v13 = 16;
LABEL_21:
        uint64_t v14 = *(void **)(a1 + v13);
        *(void *)(a1 + v13) = v12;

        goto LABEL_23;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_23:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    uint64_t v12 = PBReaderReadString();
    uint64_t v13 = 8;
    goto LABEL_21;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_1000639A4(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _acceptShareWithShareMetadata:a2];
}

void sub_100063A5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    id v3 = *(void **)(a1 + 32);
    objc_msgSend(v3, "finishWithError:");
  }
  else
  {
    if ((unint64_t)(a2 - 1) > 3) {
      uint64_t v4 = 0;
    }
    else {
      uint64_t v4 = qword_1000DA360[a2 - 1];
    }
    unsigned int v5 = *(void **)(a1 + 32);
    id v6 = +[NSNumber numberWithUnsignedInteger:v4];
    [v5 finishWithResult:v6];
  }
}

id sub_100063C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void **)(a1 + 32);
  if (a3) {
    return objc_msgSend(v4, "finishWithResult:");
  }
  else {
    return [v4 finishWithError:a4];
  }
}

id sub_100063E64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void **)(a1 + 32);
  if (a3) {
    return objc_msgSend(v4, "finishWithResult:");
  }
  else {
    return [v4 finishWithError:a4];
  }
}

void sub_10006428C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v10 = a3;
  id v6 = a4;
  id v7 = [v10 count];
  char v8 = *(void **)(a1 + 32);
  if (v7)
  {
    id v9 = [v10 firstObject];
    [v8 finishWithResult:v9];
LABEL_3:

    goto LABEL_6;
  }
  if (!v6)
  {
    id v9 = AMSError();
    [v8 finishWithError:v9];
    goto LABEL_3;
  }
  [v8 finishWithError:v6];
LABEL_6:
}

AMSPromise *__cdecl sub_100064360(id a1, NSError *a2)
{
  id v2 = sub_1000215E0(a2);
  id v3 = +[AMSPromise promiseWithError:v2];

  return (AMSPromise *)v3;
}

void sub_100064514(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v10 = a3;
  id v6 = a4;
  id v7 = [v10 count];
  char v8 = *(void **)(a1 + 32);
  if (v7)
  {
    [v8 finishWithResult:v10];
  }
  else if (v6)
  {
    [v8 finishWithError:v6];
  }
  else
  {
    id v9 = AMSError();
    [v8 finishWithError:v9];
  }
}

AMSPromise *__cdecl sub_1000645D8(id a1, NSError *a2)
{
  id v2 = sub_1000215E0(a2);
  id v3 = +[AMSPromise promiseWithError:v2];

  return (AMSPromise *)v3;
}

id sub_100064710(id a1, AMSDCloudDataRecordZoneIdentifier *a2)
{
  id v2 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }

  return v3;
}

id sub_100064780(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_class();
  id v5 = [*(id *)(a1 + 32) scope];
  id v6 = [v3 zoneName];

  id v7 = [v4 _fetchChangeTokenWithDatabaseScope:v5 recordZoneName:v6];

  return v7;
}

id sub_100064908(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend(v3, "amsd_isCKChangeTokenExpiredError"))
  {
    [*(id *)(a1 + 32) persistChangedRecordZonesChangeToken:0];
    [*(id *)(a1 + 32) _fetchChangedRecordZonesWithServerChangeToken:0];
  }
  else
  {
    +[AMSPromise promiseWithError:v3];
  uint64_t v4 = };

  return v4;
}

AMSPromise *__cdecl sub_100064988(id a1, NSError *a2)
{
  id v2 = sub_1000215E0(a2);
  id v3 = +[AMSPromise promiseWithError:v2];

  return (AMSPromise *)v3;
}

void sub_100064DB8(uint64_t a1, void *a2, void *a3)
{
  id v14 = a3;
  id v5 = [a2 objectForKeyedSubscript:*(void *)(a1 + 32)];
  if (v5)
  {
    [*(id *)(a1 + 40) finishWithResult:v5];
  }
  else
  {
    id v6 = v14;
    if (objc_msgSend(v6, "amsd_isCKPartialFailureError"))
    {
      id v7 = [v6 userInfo];
      char v8 = [v7 objectForKeyedSubscript:CKPartialErrorsByItemIDKey];

      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        id v9 = v8;
      }
      else {
        id v9 = 0;
      }

      id v10 = [v9 objectForKeyedSubscript:*(void *)(a1 + 32)];

      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        id v11 = v10;
      }
      else {
        id v11 = 0;
      }

      id v6 = v11;
    }
    uint64_t v12 = *(void **)(a1 + 40);
    if (v6)
    {
      [v12 finishWithError:v6];
    }
    else
    {
      uint64_t v13 = AMSError();
      [v12 finishWithError:v13];
    }
  }
}

AMSPromise *__cdecl sub_100064F4C(id a1, NSError *a2)
{
  id v2 = sub_1000215E0(a2);
  id v3 = +[AMSPromise promiseWithError:v2];

  return (AMSPromise *)v3;
}

void sub_10006523C(uint64_t a1, void *a2, void *a3)
{
  id v13 = a2;
  id v5 = sub_1000215E0(a3);
  id v6 = v5;
  if (v5 && !objc_msgSend(v5, "ams_hasDomain:code:", @"AMSDCloudDataErrorDomain", 4))
  {
    [*(id *)(a1 + 32) finishWithError:v6];
  }
  else
  {
    id v7 = [v6 userInfo];
    char v8 = [v7 objectForKeyedSubscript:@"AMSDCloudDataPartialFailureErrorsKey"];

    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v9 = v8;
    }
    else {
      id v9 = 0;
    }

    id v10 = [AMSDCloudDataFetchResult alloc];
    if (v13) {
      id v11 = v13;
    }
    else {
      id v11 = &__NSDictionary0__struct;
    }
    uint64_t v12 = [(AMSDCloudDataFetchResult *)v10 initWithResults:v11 failures:v9];
    [*(id *)(a1 + 32) finishWithResult:v12];
  }
}

void sub_10006536C(uint64_t a1, void *a2)
{
  id v3 = [a2 failures];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000653FC;
  v4[3] = &unk_100114A30;
  v4[4] = *(void *)(a1 + 32);
  [v3 enumerateKeysAndObjectsUsingBlock:v4];
}

id sub_1000653FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[AMSDCloudDataManager handleRecordZoneFetchFailed:a2 inDatabase:*(void *)(a1 + 32) withError:a3];
}

void sub_100065E08(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v10 = a2;
  id v6 = a4;
  id v7 = [v10 count];
  char v8 = *(void **)(a1 + 32);
  if (v7)
  {
    id v9 = [v10 firstObject];
    [v8 finishWithResult:v9];
LABEL_3:

    goto LABEL_6;
  }
  if (!v6)
  {
    id v9 = AMSError();
    [v8 finishWithError:v9];
    goto LABEL_3;
  }
  [v8 finishWithError:v6];
LABEL_6:
}

AMSPromise *__cdecl sub_100065EDC(id a1, NSError *a2)
{
  id v2 = sub_1000215E0(a2);
  id v3 = +[AMSPromise promiseWithError:v2];

  return (AMSPromise *)v3;
}

void sub_1000660EC(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v10 = a2;
  id v6 = a4;
  id v7 = [v10 count];
  char v8 = *(void **)(a1 + 32);
  if (v7)
  {
    id v9 = [v10 firstObject];
    [v8 finishWithResult:v9];
LABEL_3:

    goto LABEL_6;
  }
  if (!v6)
  {
    id v9 = AMSError();
    [v8 finishWithError:v9];
    goto LABEL_3;
  }
  [v8 finishWithError:v6];
LABEL_6:
}

AMSPromise *__cdecl sub_1000661C0(id a1, NSError *a2)
{
  id v2 = sub_1000215E0(a2);
  id v3 = +[AMSPromise promiseWithError:v2];

  return (AMSPromise *)v3;
}

void sub_100066598(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v10 = a2;
  id v6 = a4;
  id v7 = [v10 count];
  char v8 = *(void **)(a1 + 32);
  if (v7)
  {
    id v9 = [v10 firstObject];
    [v8 finishWithResult:v9];
LABEL_3:

    goto LABEL_6;
  }
  if (!v6)
  {
    id v9 = AMSError();
    [v8 finishWithError:v9];
    goto LABEL_3;
  }
  [v8 finishWithError:v6];
LABEL_6:
}

id sub_10006666C(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = +[AMSLogConfig sharedAccountsDaemonConfig];
  id v7 = (void *)v6;
  if (a2)
  {
    if (!v6)
    {
      id v7 = +[AMSLogConfig sharedConfig];
    }
    char v8 = [v7 OSLogObject];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = objc_opt_class();
      id v10 = AMSLogKey();
      *(_DWORD *)long long buf = 138543618;
      uint64_t v42 = v9;
      __int16 v43 = 2114;
      uint64_t v44 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Successfully setup the database subscription.", buf, 0x16u);
    }
    id v11 = +[NSNumber numberWithUnsignedInteger:a1[6] + 1];
    id v12 = +[AMSPromise promiseWithResult:v11];
  }
  else
  {
    if (!v6)
    {
      id v7 = +[AMSLogConfig sharedConfig];
    }
    id v13 = [v7 OSLogObject];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = objc_opt_class();
      __int16 v15 = AMSLogKey();
      __int16 v16 = AMSLogableError();
      *(_DWORD *)long long buf = 138543874;
      uint64_t v42 = v14;
      __int16 v43 = 2114;
      uint64_t v44 = v15;
      __int16 v45 = 2114;
      double v46 = *(double *)&v16;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Failed to setup the database subscription. error = %{public}@", buf, 0x20u);
    }
    unint64_t v17 = a1[6];
    if (v17 > 9)
    {
      __int16 v31 = +[AMSLogConfig sharedAccountsDaemonConfig];
      if (!v31)
      {
        __int16 v31 = +[AMSLogConfig sharedConfig];
      }
      id v32 = [v31 OSLogObject];
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        uint64_t v33 = objc_opt_class();
        __int16 v34 = AMSLogKey();
        *(_DWORD *)long long buf = 138543618;
        uint64_t v42 = v33;
        __int16 v43 = 2114;
        uint64_t v44 = v34;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Attempted to setup the database subscription too many times. Refusing to try again.", buf, 0x16u);
      }
      id v12 = +[AMSPromise promiseWithError:v5];
    }
    else
    {
      unint64_t v18 = v17 + 1;
      double v19 = exp2((double)(v17 + 1));
      uint64_t v20 = +[AMSLogConfig sharedAccountsDaemonConfig];
      if (!v20)
      {
        uint64_t v20 = +[AMSLogConfig sharedConfig];
      }
      __int16 v21 = [v20 OSLogObject];
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v22 = objc_opt_class();
        __int16 v23 = AMSLogKey();
        *(_DWORD *)long long buf = 138543874;
        uint64_t v42 = v22;
        __int16 v43 = 2114;
        uint64_t v44 = v23;
        __int16 v45 = 2048;
        double v46 = v19;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "%{public}@: [%{public}@] Scheduling another attempt to setup the database subscription. timeInterval = %f", buf, 0x20u);
      }
      id v24 = objc_alloc_init((Class)AMSMutablePromise);
      dispatch_time_t v25 = dispatch_time(0, (uint64_t)(v19 * 1000000000.0));
      uint64_t v26 = dispatch_get_global_queue(0, 0);
      v36[0] = _NSConcreteStackBlock;
      v36[1] = 3221225472;
      v36[2] = sub_100066AF8;
      v36[3] = &unk_1001142F0;
      id v27 = v24;
      uint64_t v28 = a1[4];
      uint64_t v29 = (void *)a1[5];
      id v37 = v27;
      uint64_t v38 = v28;
      id v39 = v29;
      unint64_t v40 = v18;
      dispatch_after(v25, v26, v36);

      BOOL v30 = v39;
      id v12 = v27;
    }
  }

  return v12;
}

void sub_100066AF8(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = [*(id *)(a1 + 40) _subscribeWithIdentifier:*(void *)(a1 + 48) attempt:*(void *)(a1 + 56)];
  [v1 finishWithPromise:v2];
}

id sub_100066DE4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObject:a2];
}

id sub_100066DF0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObject:a2];
}

void sub_100066DFC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  if (a4)
  {
    [*(id *)(a1 + 32) finishWithError:a4];
  }
  else
  {
    uint64_t v6 = [[AMSDCloudDataChangedRecordZonesResult alloc] initWithChangedRecordZones:*(void *)(a1 + 40) deletedRecordZones:*(void *)(a1 + 48) changeToken:v7];
    [*(id *)(a1 + 32) finishWithResult:v6];
  }
}

void sub_100067278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100067298(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)CKFetchRecordZoneChangesConfiguration);
  id v5 = [*(id *)(a1 + 32) objectForKeyedSubscript:v3];

  [v4 setPreviousServerChangeToken:v5];
  return v4;
}

void sub_100067318(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (v10)
  {
    id v11 = +[AMSLogConfig sharedConfig];
    if (!v11)
    {
      id v11 = +[AMSLogConfig sharedConfig];
    }
    id v12 = [v11 OSLogObject];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      id v13 = AMSLogKey();
      uint64_t v14 = objc_opt_class();
      uint64_t v15 = v14;
      if (v13)
      {
        uint64_t v4 = AMSLogKey();
        +[NSString stringWithFormat:@"%@: [%@] ", v15, v4];
      }
      else
      {
        +[NSString stringWithFormat:@"%@: ", v14];
      __int16 v16 = };
      unint64_t v17 = AMSLogableError();
      *(_DWORD *)long long buf = 138543618;
      id v24 = v16;
      __int16 v25 = 2114;
      uint64_t v26 = v17;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%{public}@Error passed to recordWasChangedBlock: %{public}@", buf, 0x16u);
      if (v13)
      {

        __int16 v16 = (void *)v4;
      }
    }
  }
  if (v9)
  {
    unint64_t v18 = *(void **)(a1 + 40);
    double v19 = [v8 zoneID];
    id v20 = [v18 objectForKeyedSubscript:v19];

    if (!v20)
    {
      id v20 = objc_alloc_init((Class)NSMutableArray);
      __int16 v21 = *(void **)(a1 + 40);
      uint64_t v22 = [v8 zoneID];
      [v21 setObject:v20 forKeyedSubscript:v22];
    }
    [v20 addObject:v9];
  }
}

void sub_100067558(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  id v9 = v3;
  id v5 = [v3 zoneID];
  id v6 = [v4 objectForKeyedSubscript:v5];

  if (!v6)
  {
    id v6 = objc_alloc_init((Class)NSMutableArray);
    id v7 = *(void **)(a1 + 32);
    id v8 = [v9 zoneID];
    [v7 setObject:v6 forKeyedSubscript:v8];
  }
  [v6 addObject:v9];
}

void sub_100067618(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v15 = a6;
  if (v15)
  {
    id v9 = *(void **)(a1 + 40);
    id v10 = a2;
    [v9 setObject:0 forKeyedSubscript:v10];
    [*(id *)(a1 + 48) setObject:0 forKeyedSubscript:v10];
    id v11 = *(void **)(a1 + 56);
    id v12 = v15;
    id v13 = v10;
  }
  else
  {
    uint64_t v14 = *(void **)(a1 + 32);
    id v13 = a2;
    id v11 = v14;
    id v12 = a3;
  }
  [v11 setObject:v12 forKeyedSubscript:v13];
}

void sub_1000676C8(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = (id)AMSSetLogKey();
  if ([a1[5] count]
    || [a1[6] count]
    || [a1[7] count]
    || (id v13 = [a1[8] count], !v3)
    || v13)
  {
    if (v3)
    {
      id v5 = +[AMSLogConfig sharedAccountsDaemonConfig];
      if (!v5)
      {
        id v5 = +[AMSLogConfig sharedConfig];
      }
      id v6 = [v5 OSLogObject];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        id WeakRetained = objc_loadWeakRetained(a1 + 10);
        uint64_t v8 = objc_opt_class();
        id v9 = AMSLogKey();
        id v10 = AMSHashIfNeeded();
        int v14 = 138543874;
        uint64_t v15 = v8;
        __int16 v16 = 2114;
        unint64_t v17 = v9;
        __int16 v18 = 2114;
        double v19 = v10;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}@: [%{public}@] Received both valid data and an error when fetching record zone changes. error = %{public}@", (uint8_t *)&v14, 0x20u);
      }
    }
    id v11 = objc_msgSend(a1[7], "ams_mapWithTransform:", &stru_100114BC8);
    id v12 = [[AMSDCloudDataChangedRecordsResult alloc] initWithChangedRecords:a1[5] deletedRecords:a1[6] errors:v11 changeTokens:a1[8]];
    [a1[9] finishWithResult:v12];
  }
  else
  {
    [a1[9] finishWithError:v3];
  }
}

AMSPair *__cdecl sub_1000678B4(id a1, CKRecordZoneID *a2, NSError *a3)
{
  id v4 = a3;
  id v5 = a2;
  id v6 = objc_alloc((Class)AMSPair);
  id v7 = sub_1000215E0(v4);

  id v8 = [v6 initWithFirst:v5 second:v7];
  return (AMSPair *)v8;
}

AMSPromise *__cdecl sub_100067944(id a1, NSError *a2)
{
  id v2 = sub_1000215E0(a2);
  id v3 = +[AMSPromise promiseWithError:v2];

  return (AMSPromise *)v3;
}

void sub_10006801C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  AMSHashIfNeeded();
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  id v5 = [*(id *)(a1 + 40) encryptedValues];
  id v6 = [v5 objectForKeyedSubscript:v4];

  id v7 = AMSHashIfNeeded();
  [v3 appendFormat:@"\n  %@ = %@,", v8, v7];
}

uint64_t start()
{
  if ((_set_user_dir_suffix() & 1) == 0)
  {
    id v1 = +[AMSLogConfig sharedAccountsDaemonConfig];
    if (!v1)
    {
      id v1 = +[AMSLogConfig sharedConfig];
    }
    id v2 = [v1 OSLogObject];
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = NSTemporaryDirectory();
      int v6 = 138543362;
      id v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "_set_user_dir_suffix() seems to have failed. NSTemporaryDirectory() = %{public}@", (uint8_t *)&v6, 0xCu);
    }
  }
  id v4 = objc_opt_new();
  [v4 runUntilIdleExit];

  return 0;
}

uint64_t sub_100068A3C()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = &v16[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v4 = sub_100011D80(&qword_10012E458);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  id v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  id v9 = &v16[-v8 - 8];
  id v10 = (int *)type metadata accessor for AccountDataState(0);
  sub_100072558((uint64_t)v10, qword_1001370E8);
  uint64_t v11 = sub_100072520((uint64_t)v10, (uint64_t)qword_1001370E8);
  sub_1000725BC(v16);
  static Date.distantPast.getter();
  sub_1000101E8((uint64_t)v9, 0, 1, v0);
  sub_1000101E8((uint64_t)v7, 1, 1, v0);
  static Date.distantPast.getter();
  sub_1000101E8(v11 + v10[9], 1, 1, v0);
  sub_1000101E8(v11 + v10[11], 1, 1, v0);
  uint64_t v12 = v11 + v10[13];
  uint64_t v13 = type metadata accessor for CachedServerDataSyncAttempt(0);
  sub_1000101E8(v12, 1, 1, v13);
  sub_100007E78((uint64_t)v16, v11, &qword_10012E460);
  sub_100007E78((uint64_t)v9, v11 + v10[5], &qword_10012E458);
  sub_100007E78((uint64_t)v7, v11 + v10[6], &qword_10012E458);
  uint64_t result = (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v1 + 32))(v11 + v10[7], v3, v0);
  *(_WORD *)(v11 + v10[8]) = 3;
  *(_WORD *)(v11 + v10[10]) = 3;
  *(void *)(v11 + v10[12]) = 0;
  return result;
}

void sub_100068C9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  sub_1000086E4();
  uint64_t v35 = v31;
  uint64_t v92 = v37;
  uint64_t v93 = v36;
  uint64_t v39 = v38;
  uint64_t v100 = v40;
  uint64_t v42 = v41;
  uint64_t v96 = v43;
  uint64_t v95 = v44;
  uint64_t v94 = v45;
  type metadata accessor for FileStoreError();
  sub_1000082F8();
  __chkstk_darwin(v46);
  sub_10000D2F0();
  uint64_t v91 = v47;
  uint64_t v89 = type metadata accessor for URL();
  sub_10000BFC4();
  uint64_t v88 = v48;
  __chkstk_darwin(v49);
  sub_10000D2F0();
  uint64_t v87 = v50;
  type metadata accessor for Log();
  sub_10000BFC4();
  __chkstk_darwin(v51);
  sub_100008324();
  sub_10000F6C8();
  __chkstk_darwin(v52);
  sub_10000F960();
  uint64_t v90 = sub_1000169AC();
  sub_1000082F8();
  __chkstk_darwin(v53);
  sub_100016070();
  uint64_t v54 = type metadata accessor for AccountIdentity();
  sub_10000BFC4();
  uint64_t v56 = v55;
  __chkstk_darwin(v57);
  sub_100011FA0();
  swift_defaultActor_initialize();
  __int16 v58 = sub_1000087B0(v42, v42[3]);
  id v59 = *(void (**)(void))(v56 + 16);
  ((void (*)(uint64_t, void *, uint64_t))v59)(v34, v58, v54);
  uint64_t v86 = v35 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_accountID;
  v59();
  uint64_t v85 = v35 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_account;
  sub_100018570((uint64_t)v42, v35 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_account);
  uint64_t v84 = v35 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_metrics;
  sub_100018570(v100, v35 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_metrics);
  uint64_t v60 = (void *)(v35 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_store);
  *uint64_t v60 = v39;
  v60[1] = v92;
  uint64_t v61 = (void *)(v35 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_requester);
  *uint64_t v61 = v93;
  v61[1] = v94;
  id v62 = (void *)(v35 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_scheduler);
  void *v62 = v95;
  v62[1] = v96;
  uint64_t v63 = (void *)(v35 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_notifier);
  *uint64_t v63 = a21;
  v63[1] = a22;
  Swift::Int v64 = (void *)(v35 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_accountFinder);
  *Swift::Int v64 = a23;
  v64[1] = a24;
  id v65 = (void *)(v35 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_transactionStore);
  *id v65 = a25;
  v65[1] = a26;
  uint64_t v66 = (void *)(v35 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_deviceInformation);
  *uint64_t v66 = a27;
  v66[1] = a28;
  id v67 = (void *)(v35 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_defaults);
  *id v67 = a29;
  v67[1] = a30;
  *(void *)(v35 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_bag) = a31;
  id v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(v92 + 8);
  swift_unknownObjectRetain();
  uint64_t v97 = v34;
  v68(v34, v39, v92);
  if (!v32)
  {
    sub_100009BBC(v33, v35 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_state, (void (*)(void))type metadata accessor for AccountDataState);
    sub_100073258();
    static Log.accountsDataSync.getter();
    sub_100011D80((uint64_t *)&unk_10012E440);
    uint64_t v72 = type metadata accessor for LogInterpolation();
    sub_1000082C8(v72);
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3D0;
    uint64_t v99 = type metadata accessor for AccountDataAccessActor();
    v98[0] = v35;
    swift_retain();
    id v73 = (id)AMSLogKey();
    if (v73)
    {
      __int16 v74 = v73;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    uint64_t v79 = v54;
    static LogInterpolation.prefix(_:_:)();
    swift_bridgeObjectRelease();
    sub_10000D47C((uint64_t)v98);
    sub_10007353C();
    LogInterpolation.init(stringLiteral:)();
    uint64_t v99 = v54;
    sub_1000042C4(v98);
    uint64_t v80 = v97;
    sub_100008000();
    v82();
    static LogInterpolation.traceableSensitive(_:)();
    sub_1000188C0((uint64_t)v98, &qword_10012EFB0);
    Log.default(_:)();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  v98[0] = v32;
  swift_errorRetain();
  sub_100011D80(&qword_10012E438);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_8:
    swift_errorRelease();
    if (qword_10012E1F0 != -1) {
      swift_once();
    }
    uint64_t v75 = sub_100072520(v90, (uint64_t)qword_1001370E8);
    sub_10000FC70(v75, v35 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_state, (void (*)(void))type metadata accessor for AccountDataState);
    static Log.accountsDataSync.getter();
    sub_100011D80((uint64_t *)&unk_10012E440);
    uint64_t v76 = type metadata accessor for LogInterpolation();
    sub_1000082C8(v76);
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3D0;
    uint64_t v99 = type metadata accessor for AccountDataAccessActor();
    v98[0] = v35;
    swift_retain();
    id v77 = (id)AMSLogKey();
    if (v77)
    {
      uint64_t v78 = v77;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    static LogInterpolation.prefix(_:_:)();
    swift_bridgeObjectRelease();
    sub_10000D47C((uint64_t)v98);
    sub_10000A3D0();
    uint64_t v79 = v54;
    uint64_t v99 = v54;
    sub_1000042C4(v98);
    uint64_t v80 = v34;
    sub_100008000();
    v81();
    static LogInterpolation.traceableSensitive(_:)();
    sub_1000188C0((uint64_t)v98, &qword_10012EFB0);
    Log.default(_:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_unknownObjectRelease();
LABEL_14:
    sub_10000D47C(v100);
    sub_1000734AC();
    sub_1000084F8();
    v83();
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v80, v79);
    goto LABEL_15;
  }
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    sub_1000104A8(v91, (void (*)(void))type metadata accessor for FileStoreError);
    goto LABEL_8;
  }
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 32))(v87, v91, v89);
  sub_100009088(&qword_10012E450, (void (*)(uint64_t))type metadata accessor for FileStoreError);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 16))(v69, v87, v89);
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  sub_100073368();
  v70();
  __int16 v71 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
  v71(v34, v54);
  swift_errorRelease();
  v71(v86, v54);
  sub_10000D47C(v85);
  sub_10000D47C(v84);
  swift_unknownObjectRelease();
  type metadata accessor for AccountDataAccessActor();
  swift_defaultActor_destroy();
  swift_unknownObjectRelease();
  sub_10000D47C(v100);
  swift_deallocPartialClassInstance();
LABEL_15:
  sub_10000D47C((uint64_t)v42);
  sub_100009750();
}

uint64_t sub_100069640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 24) = a6;
  *(void *)(v7 + 32) = a7;
  *(unsigned char *)(v7 + 40) = a5;
  *(void *)(v7 + 16) = a4;
  return _swift_task_switch(sub_100069668, a4, 0);
}

uint64_t sub_100069668()
{
  sub_100009C64();
  sub_1000696E4();
  sub_100008600();
  return v0();
}

void sub_1000696E4()
{
  sub_1000086E4();
  uint64_t v91 = v1;
  uint64_t v103 = v3;
  uint64_t v5 = v4;
  int v97 = v6;
  uint64_t v98 = type metadata accessor for CachedServerDataSyncTaskSchedule(0);
  sub_1000082F8();
  __chkstk_darwin(v7);
  sub_10000D2F0();
  uint64_t v102 = v8;
  uint64_t v9 = type metadata accessor for LogInterpolation.StringInterpolation();
  uint64_t v10 = sub_1000085F4(v9);
  __chkstk_darwin(v10);
  sub_100008338();
  uint64_t v110 = type metadata accessor for Log();
  sub_10000BFC4();
  uint64_t v111 = v11;
  __chkstk_darwin(v12);
  sub_100008324();
  sub_10000F6C8();
  __chkstk_darwin(v13);
  sub_100016908();
  sub_10000F6C8();
  __chkstk_darwin(v14);
  sub_100016908();
  sub_10000F6C8();
  __chkstk_darwin(v15);
  sub_100016908();
  sub_10000F6C8();
  __chkstk_darwin(v16);
  sub_10000F960();
  uint64_t v108 = v17;
  uint64_t v18 = sub_1000169AC();
  double v19 = (int *)(v18 - 8);
  __chkstk_darwin(v18);
  sub_100011FA0();
  id v20 = (int *)type metadata accessor for CachedServerDataSyncTaskScheduleInput(0);
  sub_1000082F8();
  __chkstk_darwin(v21);
  __int16 v23 = (uint64_t *)((char *)&v85 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v127 = v0;
  id v24 = (void *)(v0 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_account);
  uint64_t v25 = v0 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_state;
  swift_beginAccess();
  sub_10000FC70(v25, v2, (void (*)(void))type metadata accessor for AccountDataState);
  uint64_t v104 = *v5;
  uint64_t v105 = v5[1];
  uint64_t v26 = v5[3];
  uint64_t v107 = v5[2];
  uint64_t v106 = v5[4];
  uint64_t v87 = v5;
  uint64_t v109 = v5[5];
  id v27 = sub_1000087B0(v24, v24[3]);
  uint64_t v100 = sub_1000052B8((uint64_t)v27);
  uint64_t v29 = v28;
  BOOL v30 = sub_1000087B0(v24, v24[3]);
  uint64_t v31 = (char *)v23 + v20[5];
  type metadata accessor for AccountIdentity();
  sub_1000082F8();
  uint64_t v33 = *(void (**)(void, void))(v32 + 16);
  uint64_t v90 = v34;
  uint64_t v89 = v33;
  uint64_t v88 = v32 + 16;
  v33(v31, v30);
  sub_10000F620(v2 + v19[7], (uint64_t)v23 + v20[13], &qword_10012E458);
  sub_10000F620(v2 + v19[8], (uint64_t)v23 + v20[14], &qword_10012E458);
  sub_10000F620(v2 + v19[11], (uint64_t)v23 + v20[15], &qword_10012E458);
  sub_10000F620(v2 + v19[13], (uint64_t)v23 + v20[16], &qword_10012E458);
  uint64_t v35 = *(void *)(v2 + v19[14]);
  sub_10000F620(v2 + v19[15], (uint64_t)v23 + v20[18], &qword_10012E4A0);
  sub_1000169C4();
  *__int16 v23 = v100;
  v23[1] = v29;
  sub_100073198();
  sub_100073198();
  sub_100073198();
  sub_100073198();
  *((unsigned char *)v23 + v20[10]) = v97;
  sub_100073198();
  *(uint64_t *)((char *)v23 + v20[12]) = v26;
  *(uint64_t *)((char *)v23 + v20[17]) = v35;
  *((unsigned char *)v23 + v20[19]) = v36;
  sub_1000104A8(v2, (void (*)(void))type metadata accessor for AccountDataState);
  static Log.accountsDataSync.getter();
  uint64_t v37 = sub_100011D80((uint64_t *)&unk_10012E440);
  uint64_t v38 = type metadata accessor for LogInterpolation();
  sub_1000082C8(v38);
  sub_100016340();
  uint64_t v109 = v39;
  uint64_t v106 = v37;
  uint64_t v100 = v26 + 2 * v39;
  uint64_t v104 = v40 | 7;
  uint64_t v41 = swift_allocObject();
  long long v99 = xmmword_1000DA3F0;
  *(_OWORD *)(v41 + 16) = xmmword_1000DA3F0;
  uint64_t v107 = v26;
  uint64_t v105 = type metadata accessor for AccountDataAccessActor();
  unsigned __int8 v113 = (void *)v105;
  v112[0] = v127;
  swift_retain();
  id v42 = (id)AMSLogKey();
  if (v42)
  {
    uint64_t v43 = v42;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  uint64_t v44 = v103;
  static LogInterpolation.prefix(_:_:)();
  swift_bridgeObjectRelease();
  sub_10000D47C((uint64_t)v112);
  LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v45._countAndFlagsBits = 0x207475706E49;
  v45._object = (void *)0xE600000000000000;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(v45);
  unsigned __int8 v113 = v20;
  uint64_t v46 = sub_1000042C4(v112);
  sub_10000FC70((uint64_t)v23, (uint64_t)v46, (void (*)(void))type metadata accessor for CachedServerDataSyncTaskScheduleInput);
  LogInterpolation.StringInterpolation.appendInterpolation(_:)();
  sub_1000188C0((uint64_t)v112, &qword_10012EFB0);
  sub_100073504();
  LogInterpolation.init(stringInterpolation:)();
  Log.default(_:)();
  swift_bridgeObjectRelease();
  uint64_t v47 = *(void *)(v111 + 8);
  v111 += 8;
  uint64_t v108 = v47;
  sub_100072E60();
  v48();
  uint64_t v49 = v102;
  sub_1000AB160(v23, v44, v102);
  sub_100073258();
  static Log.accountsDataSync.getter();
  *(_OWORD *)(sub_100073094() + 16) = v99;
  sub_1000165C4();
  if ((id)AMSLogKey())
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000732E8();
  }
  else
  {
    sub_1000734F8();
  }
  sub_100072E6C();
  swift_bridgeObjectRelease();
  sub_10000D47C((uint64_t)v112);
  LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v50._countAndFlagsBits = 0x656863536B736174;
  v50._object = (void *)0xED000020656C7564;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(v50);
  unsigned __int8 v113 = (void *)v98;
  uint64_t v51 = sub_1000042C4(v112);
  sub_10000FC70(v49, (uint64_t)v51, (void (*)(void))type metadata accessor for CachedServerDataSyncTaskSchedule);
  LogInterpolation.StringInterpolation.appendInterpolation(_:)();
  sub_1000188C0((uint64_t)v112, &qword_10012EFB0);
  sub_100073504();
  LogInterpolation.init(stringInterpolation:)();
  Log.default(_:)();
  swift_bridgeObjectRelease();
  sub_10001209C();
  v52();
  type metadata accessor for Date();
  sub_100009088(&qword_10012E4D0, (void (*)(uint64_t))&type metadata accessor for Date);
  if (dispatch thunk of static Comparable.< infix(_:_:)())
  {
    Date.distance(to:)();
    sub_1000ABA2C((uint64_t)v114, v53);
    uint64_t v54 = v115;
    uint64_t v101 = v118;
    uint64_t v96 = v119;
    uint64_t v95 = v120;
    unint64_t v93 = v114[0] | ((unint64_t)v114[1] << 8);
    unint64_t v94 = v116 | ((unint64_t)v117 << 8);
    if (v123) {
      int v55 = 0x10000;
    }
    else {
      int v55 = 0;
    }
    int v56 = v121 | (v122 << 8) | v55;
    if (v124) {
      int v57 = 0x1000000;
    }
    else {
      int v57 = 0;
    }
    int v92 = v56 | v57;
  }
  else
  {
    uint64_t v54 = 0;
    unint64_t v94 = 0;
    uint64_t v101 = 0;
    uint64_t v96 = 0;
    uint64_t v95 = 0;
    int v92 = 0;
    unint64_t v93 = 2;
  }
  static Log.accountsDataSync.getter();
  *(_OWORD *)(sub_100073094() + 16) = v99;
  sub_1000165C4();
  if ((id)AMSLogKey())
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000732E8();
  }
  else
  {
    sub_1000734F8();
  }
  uint64_t v100 = 2 * v109;
  sub_100072E6C();
  swift_bridgeObjectRelease();
  sub_10000D47C((uint64_t)v112);
  LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v58._countAndFlagsBits = 0x206E6F69746361;
  v58._object = (void *)0xE700000000000000;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(v58);
  unsigned __int8 v113 = &unk_100115EF0;
  uint64_t v59 = swift_allocObject();
  v112[0] = v59;
  char v60 = v93;
  *(void *)(v59 + 16) = v93;
  *(void *)(v59 + 24) = v54;
  sub_100073258();
  *(void *)(v61 + 32) = v63;
  *(void *)(v61 + 40) = v62;
  sub_10007339C();
  *(void *)(v64 + 4_Block_object_dispose(&a9, 8) = v66;
  *(void *)(v64 + 56) = v65;
  *(_DWORD *)(v64 + 64) = v92;
  LogInterpolation.StringInterpolation.appendInterpolation(_:)();
  sub_1000188C0((uint64_t)v112, &qword_10012EFB0);
  sub_100073504();
  LogInterpolation.init(stringInterpolation:)();
  Log.default(_:)();
  swift_bridgeObjectRelease();
  sub_10001209C();
  v67();
  if (v60 == 2)
  {
    static Log.accountsDataSync.getter();
    *(_OWORD *)(sub_10007343C() + 16) = xmmword_1000DA3D0;
    sub_1000165C4();
    if ((id)AMSLogKey())
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_1000732E8();
    }
    else
    {
      sub_1000734F8();
    }
    uint64_t v69 = v102;
    sub_100072E6C();
    swift_bridgeObjectRelease();
    sub_10000D47C((uint64_t)v112);
    sub_10000A3D0();
    unsigned __int8 v113 = v90;
    sub_1000042C4(v112);
    sub_100008000();
    v70();
    static LogInterpolation.traceableSensitive(_:)();
    sub_1000188C0((uint64_t)v112, &qword_10012EFB0);
    Log.default(_:)();
    swift_bridgeObjectRelease();
    sub_10001209C();
    v71();
    sub_10006A470();
  }
  else
  {
    static Log.accountsDataSync.getter();
    *(_OWORD *)(sub_10007343C() + 16) = xmmword_1000DA3E0;
    sub_1000165C4();
    id v68 = (id)AMSLogKey();
    uint64_t v86 = v54;
    if (v68)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_1000732E8();
    }
    else
    {
      sub_1000734F8();
    }
    sub_100072E6C();
    swift_bridgeObjectRelease();
    sub_10000D47C((uint64_t)v112);
    sub_10000A3D0();
    unsigned __int8 v113 = v90;
    sub_1000042C4(v112);
    sub_100073330();
    sub_100008000();
    v72();
    static LogInterpolation.traceableSensitive(_:)();
    sub_1000188C0((uint64_t)v112, &qword_10012EFB0);
    sub_100012258();
    LogInterpolation.init(stringLiteral:)();
    Log.default(_:)();
    swift_bridgeObjectRelease();
    sub_10001209C();
    v73();
    uint64_t v74 = *(void *)(v127 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_scheduler);
    uint64_t v75 = *(void *)(v127 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_scheduler + 8);
    uint64_t v69 = v102;
    uint64_t v76 = (uint64_t *)(v102 + *(int *)(v98 + 32));
    uint64_t v77 = *v76;
    uint64_t v78 = v76[1];
    v125[0] = v93 & 0xFFFFFFFFFFFFFF01;
    v125[1] = v86;
    sub_100073258();
    v125[2] = v80;
    v125[3] = v79;
    sub_10007339C();
    v125[4] = v82;
    v125[5] = v81;
    int v126 = v83;
    uint64_t v84 = *(void (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t))(v75 + 8);
    swift_bridgeObjectRetain();
    v84(v69, v77, v78, v125, v74, v75);
    swift_bridgeObjectRelease();
  }
  sub_1000104A8(v69, (void (*)(void))type metadata accessor for CachedServerDataSyncTaskSchedule);
  sub_1000104A8((uint64_t)v23, (void (*)(void))type metadata accessor for CachedServerDataSyncTaskScheduleInput);
  sub_100009750();
}

void sub_10006A470()
{
  sub_1000086E4();
  char v2 = v1;
  uint64_t v3 = type metadata accessor for Log();
  sub_10000BFC4();
  uint64_t v17 = v4;
  __chkstk_darwin(v5);
  sub_100008338();
  uint64_t v8 = v7 - v6;
  if ((dispatch thunk of static DeviceInformation.deviceIsRunningInternalBuild()() & 1) != 0
    && (char v9 = dispatch thunk of static Defaults.autoSyncDisabledForAccountData.getter(), (v9 & 1) != 0)
    && (v2 & 1) == 0)
  {
    char v14 = v9;
    static Log.accountsDataSync.getter();
    sub_100011D80((uint64_t *)&unk_10012E440);
    uint64_t v10 = type metadata accessor for LogInterpolation();
    sub_1000082C8(v10);
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA400;
    uint64_t v16 = (void *)type metadata accessor for AccountDataAccessActor();
    v15[0] = v0;
    swift_retain();
    id v11 = (id)AMSLogKey();
    if (v11)
    {
      uint64_t v12 = v11;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    static LogInterpolation.prefix(_:_:)();
    swift_bridgeObjectRelease();
    sub_10000D47C((uint64_t)v15);
    sub_100012258();
    LogInterpolation.init(stringLiteral:)();
    uint64_t v16 = (void *)type metadata accessor for AccountIdentity();
    sub_1000042C4(v15);
    sub_10000A430();
    sub_100008000();
    v13();
    static LogInterpolation.traceableSensitive(_:)();
    sub_1000733F8();
    sub_10000A3D0();
    uint64_t v16 = &type metadata for Bool;
    LOBYTE(v15[0]) = 1;
    static LogInterpolation.safe(_:)();
    sub_1000733F8();
    sub_10000A3D0();
    uint64_t v16 = &type metadata for Bool;
    LOBYTE(v15[0]) = v14 & 1;
    static LogInterpolation.safe(_:)();
    sub_1000733F8();
    LogInterpolation.init(stringLiteral:)();
    uint64_t v16 = &type metadata for Bool;
    LOBYTE(v15[0]) = 0;
    static LogInterpolation.safe(_:)();
    sub_1000733F8();
    Log.default(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v8, v3);
  }
  else
  {
    sub_10006A7C4();
  }
  sub_100009750();
}

void sub_10006A7C4()
{
  sub_1000086E4();
  uint64_t v139 = v1;
  uint64_t v148 = v0;
  uint64_t v141 = v3;
  v142 = v2;
  int v144 = v4;
  uint64_t v5 = type metadata accessor for Date();
  sub_10000BFC4();
  uint64_t v115 = v6;
  __chkstk_darwin(v7);
  uint64_t v114 = v8;
  uint64_t v118 = (char *)v106 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100011D80(&qword_10012E4B0);
  uint64_t v10 = sub_1000085F4(v9);
  __chkstk_darwin(v10);
  sub_10000D2F0();
  uint64_t v117 = v11;
  uint64_t v108 = type metadata accessor for AccountDataServerRequest(0);
  sub_10000BFC4();
  uint64_t v111 = v12;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v112 = v15;
  uint64_t v113 = (uint64_t)v106 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  sub_10000F960();
  uint64_t v116 = v16;
  uint64_t v17 = sub_100011D80(&qword_10012E4A0);
  uint64_t v18 = sub_1000085F4(v17);
  __chkstk_darwin(v18);
  sub_10000D2F0();
  uint64_t v130 = v19;
  uint64_t v20 = type metadata accessor for CachedServerDataSyncTaskScheduleInput(0);
  sub_1000082F8();
  __chkstk_darwin(v21);
  sub_10000D2F0();
  id v137 = v22;
  uint64_t v131 = sub_1000169AC();
  sub_1000082F8();
  __chkstk_darwin(v23);
  sub_100008324();
  uint64_t v110 = v24;
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v28 = (char *)v106 - v27;
  __chkstk_darwin(v26);
  sub_10000F960();
  uint64_t v159 = v29;
  uint64_t v145 = type metadata accessor for Log();
  sub_10000BFC4();
  uint64_t v147 = v30;
  __chkstk_darwin(v31);
  sub_100008324();
  uint64_t v109 = v32;
  __chkstk_darwin(v33);
  sub_100016908();
  uint64_t v138 = v34;
  __chkstk_darwin(v35);
  static Log.accountsDataSync.getter();
  uint64_t v36 = sub_100011D80((uint64_t *)&unk_10012E440);
  uint64_t v37 = type metadata accessor for LogInterpolation();
  sub_1000082C8(v37);
  uint64_t v39 = *(void *)(v38 + 72);
  uint64_t v41 = *(unsigned __int8 *)(v40 + 80);
  uint64_t v42 = (v41 + 32) & ~v41;
  uint64_t v146 = v39;
  uint64_t v136 = v36;
  uint64_t v121 = v42 + 3 * v39;
  uint64_t v134 = v41 | 7;
  uint64_t v43 = swift_allocObject();
  long long v120 = xmmword_1000DA3D0;
  *(_OWORD *)(v43 + 16) = xmmword_1000DA3D0;
  uint64_t v135 = v42;
  uint64_t v133 = type metadata accessor for AccountDataAccessActor();
  uint64_t v151 = v133;
  v150[0] = v0;
  swift_retain();
  id v44 = (id)AMSLogKey();
  uint64_t v119 = v5;
  id v129 = (int *)v20;
  __int16 v143 = v28;
  if (v44)
  {
    Swift::String v45 = v44;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  static LogInterpolation.prefix(_:_:)();
  swift_bridgeObjectRelease();
  sub_10000D47C((uint64_t)v150);
  sub_100012258();
  LogInterpolation.init(stringLiteral:)();
  uint64_t v46 = v148;
  uint64_t v140 = v148 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_accountID;
  uint64_t v47 = type metadata accessor for AccountIdentity();
  uint64_t v151 = v47;
  sub_1000042C4(v150);
  sub_10000A430();
  uint64_t v49 = *(void (**)(void))(v48 + 16);
  uint64_t v122 = v48 + 16;
  char v123 = v49;
  v49();
  static LogInterpolation.traceableSensitive(_:)();
  sub_1000188C0((uint64_t)v150, &qword_10012EFB0);
  Log.default(_:)();
  swift_bridgeObjectRelease();
  uint64_t v50 = v147 + 8;
  uint64_t v132 = *(void *)(v147 + 8);
  sub_100073368();
  v51();
  uint64_t v52 = v46 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_state;
  swift_beginAccess();
  uint64_t v53 = (uint64_t)v143;
  sub_10000FC70(v52, (uint64_t)v143, (void (*)(void))type metadata accessor for AccountDataState);
  uint64_t v54 = v142[1];
  uint64_t v124 = *v142;
  uint64_t v125 = v54;
  uint64_t v55 = v142[2];
  uint64_t v56 = v142[3];
  uint64_t v57 = v142[5];
  uint64_t v126 = v142[4];
  uint64_t v127 = v55;
  uint64_t v128 = v57;
  sub_100088D78();
  sub_1000104A8(v53, (void (*)(void))type metadata accessor for AccountDataState);
  uint64_t v58 = v139;
  sub_10006E240(v140, v159);
  if (v58)
  {
    uint64_t v59 = v159;
  }
  else
  {
    v106[2] = v47;
    uint64_t v107 = v56;
    uint64_t v139 = v52;
    uint64_t v147 = v50;
    uint64_t v60 = 2 * v146;
    static Log.accountsDataSync.getter();
    *(_OWORD *)(swift_allocObject() + 16) = v120;
    sub_100015F28();
    id v61 = (id)AMSLogKey();
    v106[1] = 0;
    if (v61)
    {
      uint64_t v62 = v61;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    uint64_t v63 = v137;
    uint64_t v64 = (uint64_t)v143;
    sub_100073278();
    swift_bridgeObjectRelease();
    sub_10000D47C((uint64_t)v150);
    sub_10000A3D0();
    uint64_t v121 = v60;
    uint64_t v65 = (int *)v131;
    uint64_t v151 = v131;
    uint64_t v66 = sub_1000042C4(v150);
    sub_10000FC70(v159, (uint64_t)v66, (void (*)(void))type metadata accessor for AccountDataState);
    static LogInterpolation.sensitive(_:)();
    sub_1000188C0((uint64_t)v150, &qword_10012EFB0);
    Log.default(_:)();
    swift_bridgeObjectRelease();
    sub_100072E60();
    v67();
    id v68 = (void *)(v148 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_account);
    sub_10000FC70(v139, v64, (void (*)(void))type metadata accessor for AccountDataState);
    uint64_t v69 = sub_1000087B0(v68, v68[3]);
    uint64_t v138 = sub_1000052B8((uint64_t)v69);
    uint64_t v71 = v70;
    sub_1000087B0(v68, v68[3]);
    uint64_t v72 = v129;
    sub_100008000();
    v73();
    sub_10000F620(v64 + v65[5], (uint64_t)v63 + v72[13], &qword_10012E458);
    sub_10000F620(v64 + v65[6], (uint64_t)v63 + v72[14], &qword_10012E458);
    sub_10000F620(v64 + v65[9], (uint64_t)v63 + v72[15], &qword_10012E458);
    sub_10000F620(v64 + v65[11], (uint64_t)v63 + v72[16], &qword_10012E458);
    uint64_t v74 = *(void *)(v64 + v65[12]);
    uint64_t v75 = (uint64_t)v63 + v72[18];
    sub_10000F620(v64 + v65[13], v75, &qword_10012E4A0);
    sub_1000169C4();
    *uint64_t v63 = v138;
    v63[1] = v71;
    *(uint64_t *)((char *)v63 + v72[6]) = v124;
    *(uint64_t *)((char *)v63 + v72[7]) = v125;
    *(uint64_t *)((char *)v63 + v72[8]) = v127;
    *(uint64_t *)((char *)v63 + v72[9]) = v126;
    *((unsigned char *)v63 + v72[10]) = v144;
    *(uint64_t *)((char *)v63 + v72[11]) = v128;
    *(uint64_t *)((char *)v63 + v72[12]) = v107;
    *(uint64_t *)((char *)v63 + v72[17]) = v74;
    *((unsigned char *)v63 + v72[19]) = v76;
    sub_1000104A8(v64, (void (*)(void))type metadata accessor for AccountDataState);
    uint64_t v77 = v75;
    uint64_t v78 = v130;
    sub_10000F620(v77, v130, &qword_10012E4A0);
    uint64_t v79 = type metadata accessor for CachedServerDataSyncAttempt(0);
    LODWORD(v72) = sub_10001044C(v78, 1, v79);
    sub_1000188C0(v78, &qword_10012E4A0);
    if (v72 == 1)
    {
      uint64_t v80 = v148;
      (*(void (**)(uint64_t))(*(void *)(v148
                                                  + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_transactionStore
                                                  + 8)
                                      + 8))(5);
      uint64_t v81 = v110;
      sub_10000FC70(v139, v110, (void (*)(void))type metadata accessor for AccountDataState);
      __int16 v82 = *(_WORD *)(v81 + v65[10]);
      uint64_t v83 = v116;
      if (v82 == 3
        || (sub_100007E78(v81, (uint64_t)v149, &qword_10012E460),
            sub_100007E78((uint64_t)v149, (uint64_t)v150, &qword_10012E460),
            sub_100018644((uint64_t)v150) == 1))
      {
        AccountIdentity.dsid.getter();
      }
      else
      {
        uint64_t v89 = v150[2];
        AccountIdentity.dsid.getter();
        uint64_t v90 = type metadata accessor for AccountDataServerRequest.Put(0);
        *(void *)(v83 + *(int *)(v90 + 20)) = v89;
        *(_WORD *)(v83 + *(int *)(v90 + 24)) = v82;
        uint64_t v80 = v148;
      }
      swift_storeEnumTagMultiPayload();
      sub_1000104A8(v81, (void (*)(void))type metadata accessor for AccountDataState);
      uint64_t v91 = (void *)(v80 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_metrics);
      sub_100074A74(v83);
      uint64_t v92 = v91[3];
      uint64_t v93 = v91[4];
      uint64_t v94 = v80;
      sub_1000087B0(v91, v92);
      (*(void (**)(_OWORD *, uint64_t, uint64_t))(v93 + 8))(v152, v92, v93);
      long long v158 = v152[0];
      sub_10000A378((uint64_t)&v158);
      long long v157 = v152[1];
      sub_10000A378((uint64_t)&v157);
      uint64_t v156 = v153;
      sub_10000A3A4((uint64_t)&v156);
      uint64_t v155 = v154;
      sub_10000A3A4((uint64_t)&v155);
      uint64_t v95 = type metadata accessor for TaskPriority();
      sub_1000101E8(v117, 1, 1, v95);
      uint64_t v96 = v113;
      sub_10000FC70(v83, v113, (void (*)(void))type metadata accessor for AccountDataServerRequest);
      uint64_t v97 = v115;
      (*(void (**)(char *, uint64_t, uint64_t))(v115 + 16))(v118, v141, v119);
      uint64_t v98 = sub_100009088(&qword_10012E4C0, (void (*)(uint64_t))type metadata accessor for AccountDataAccessActor);
      unint64_t v99 = (*(unsigned __int8 *)(v111 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v111 + 80);
      unint64_t v100 = (v112 + v99 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v101 = (*(unsigned __int8 *)(v97 + 80) + v100 + 48) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80);
      uint64_t v102 = (char *)swift_allocObject();
      *((void *)v102 + 2) = v94;
      *((void *)v102 + 3) = v98;
      *((void *)v102 + 4) = v94;
      sub_100009BBC(v96, (uint64_t)&v102[v99], (void (*)(void))type metadata accessor for AccountDataServerRequest);
      uint64_t v103 = &v102[v100];
      uint64_t v104 = v142;
      long long v105 = *((_OWORD *)v142 + 1);
      *(_OWORD *)uint64_t v103 = *(_OWORD *)v142;
      *((_OWORD *)v103 + 1) = v105;
      *((_OWORD *)v103 + 2) = *((_OWORD *)v104 + 2);
      (*(void (**)(char *, char *, uint64_t))(v97 + 32))(&v102[v101], v118, v119);
      swift_retain_n();
      sub_1000B87B8(v117, (uint64_t)&unk_10012E4C8, (uint64_t)v102);
      swift_release();
      sub_1000104A8(v116, (void (*)(void))type metadata accessor for AccountDataServerRequest);
      uint64_t v86 = v159;
      uint64_t v87 = (uint64_t)v137;
    }
    else
    {
      static Log.accountsDataSync.getter();
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3F0;
      sub_100015F28();
      id v84 = (id)AMSLogKey();
      if (v84)
      {
        uint64_t v85 = v84;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      uint64_t v86 = v159;
      uint64_t v87 = (uint64_t)v137;
      sub_100073278();
      swift_bridgeObjectRelease();
      sub_10000D47C((uint64_t)v150);
      sub_10000A3D0();
      Log.default(_:)();
      swift_bridgeObjectRelease();
      sub_100072E60();
      v88();
    }
    sub_1000104A8(v87, (void (*)(void))type metadata accessor for CachedServerDataSyncTaskScheduleInput);
    uint64_t v59 = v86;
  }
  sub_1000104A8(v59, (void (*)(void))type metadata accessor for AccountDataState);
  sub_100009750();
}

uint64_t sub_10006B490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_10006B540;
  return sub_10006B6AC();
}

uint64_t sub_10006B540()
{
  sub_100008308();
  sub_1000082E0();
  uint64_t v3 = v2;
  sub_10000A43C();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_100008314();
  *uint64_t v6 = v5;
  *(void *)(v3 + 32) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(void *)(v3 + 16);
    return _swift_task_switch(sub_10006B63C, v7, 0);
  }
  else
  {
    sub_100008600();
    return v8();
  }
}

uint64_t sub_10006B63C()
{
  sub_100008308();
  uint64_t v0 = sub_100016750();
  v1(v0);
  swift_errorRelease();
  sub_100008600();
  return v2();
}

uint64_t sub_10006B6AC()
{
  sub_100009C64();
  v1[2] = v2;
  v1[3] = v0;
  uint64_t v3 = type metadata accessor for Date();
  v1[4] = v3;
  sub_1000082C8(v3);
  v1[5] = v4;
  void v1[6] = sub_1000084E0();
  uint64_t v5 = sub_100011D80(&qword_10012E4A8);
  sub_1000085F4(v5);
  v1[7] = sub_1000084E0();
  uint64_t v6 = (void *)swift_task_alloc();
  v1[8] = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_10006B7B0;
  return sub_10006BB94();
}

uint64_t sub_10006B7B0()
{
  sub_100008308();
  sub_1000082E0();
  uint64_t v1 = *v0;
  sub_100008314();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10001656C();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10006B88C()
{
  sub_100008308();
  static Date.now.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10006B928;
  return sub_10006C204();
}

uint64_t sub_10006B928()
{
  sub_100005AEC();
  uint64_t v2 = (void *)*v1;
  sub_10000A43C();
  *uint64_t v4 = v3;
  uint64_t v5 = v2[6];
  uint64_t v6 = v2[5];
  uint64_t v7 = v2[4];
  *uint64_t v4 = *v1;
  *(void *)(v3 + 80) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  uint64_t v8 = v2[3];
  if (v0) {
    uint64_t v9 = sub_10006BB1C;
  }
  else {
    uint64_t v9 = sub_10006BAA8;
  }
  return _swift_task_switch(v9, v8, 0);
}

uint64_t sub_10006BAA8()
{
  sub_100008308();
  sub_1000188C0(*(void *)(v0 + 56), &qword_10012E4A8);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000800C();
  return v1();
}

uint64_t sub_10006BB1C()
{
  sub_100008308();
  sub_1000188C0(*(void *)(v0 + 56), &qword_10012E4A8);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100008600();
  return v1();
}

uint64_t sub_10006BB94()
{
  sub_100008308();
  v1[20] = v2;
  v1[21] = v0;
  v1[18] = v3;
  v1[19] = v4;
  uint64_t v5 = type metadata accessor for LogInterpolation.StringInterpolation();
  sub_1000085F4(v5);
  v1[22] = sub_1000084E0();
  uint64_t v6 = type metadata accessor for Log();
  v1[23] = v6;
  sub_1000082C8(v6);
  v1[24] = v7;
  v1[25] = sub_1000168EC();
  v1[26] = swift_task_alloc();
  sub_10001656C();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_10006BC50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_100015FD4();
  uint64_t v17 = *(void *)(v16 + 168);
  static Log.accountsDataSync.getter();
  *(void *)(v16 + 216) = sub_100011D80((uint64_t *)&unk_10012E440);
  uint64_t v18 = type metadata accessor for LogInterpolation();
  sub_1000082C8(v18);
  *(void *)(v16 + 224) = *(void *)(v19 + 72);
  *(_DWORD *)(v16 + 264) = *(_DWORD *)(v20 + 80);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3F0;
  uint64_t v21 = type metadata accessor for AccountDataAccessActor();
  *(void *)(v16 + 16) = v17;
  *(void *)(v16 + 232) = v21;
  *(void *)(v16 + 40) = v21;
  swift_retain();
  id v22 = (id)AMSLogKey();
  if (v22)
  {
    uint64_t v23 = v22;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    sub_1000734E0();
  }
  uint64_t v24 = *(void *)(v16 + 192);
  uint64_t v42 = *(void *)(v16 + 208);
  uint64_t v43 = *(void *)(v16 + 184);
  uint64_t v45 = *(void *)(v16 + 168);
  uint64_t v41 = *(void *)(v16 + 152);
  sub_100073298();
  swift_bridgeObjectRelease();
  sub_10000D47C(v16 + 16);
  LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)();
  sub_1000159E0();
  v25._countAndFlagsBits = 0xD000000000000011;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(v25);
  *(void *)(v16 + 72) = type metadata accessor for AccountDataServerRequest(0);
  uint64_t v26 = sub_1000042C4((uint64_t *)(v16 + 48));
  sub_10000FC70(v41, (uint64_t)v26, (void (*)(void))type metadata accessor for AccountDataServerRequest);
  LogInterpolation.StringInterpolation.appendInterpolation(_:)();
  sub_1000188C0(v16 + 48, &qword_10012EFB0);
  v27._countAndFlagsBits = 0;
  v27._object = (void *)0xE000000000000000;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(v27);
  sub_100073300();
  Log.default(_:)();
  swift_bridgeObjectRelease();
  uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
  *(void *)(v16 + 240) = v28;
  *(void *)(v16 + 24_Block_object_dispose(&a9, 8) = (v24 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v28(v42, v43);
  uint64_t v29 = *(void *)(v45 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_requester + 8);
  uint64_t v44 = *(void *)(v29 + 8) + **(int **)(v29 + 8);
  uint64_t v46 = v29 + 8;
  uint64_t v30 = (void *)swift_task_alloc();
  *(void *)(v16 + 256) = v30;
  *uint64_t v30 = v16;
  v30[1] = sub_10006BF34;
  sub_100072F00();
  return v38(v31, v32, v33, v34, v35, v36, v37, v38, a9, v41, v42, v44, v46, a14, a15, a16);
}

uint64_t sub_10006BF34()
{
  sub_100008308();
  sub_1000082E0();
  uint64_t v1 = *v0;
  sub_100008314();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10001656C();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10006C010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_100015FD4();
  uint64_t v17 = v16[29];
  uint64_t v18 = v16[21];
  static Log.accountsDataSync.getter();
  uint64_t v19 = swift_allocObject();
  v16[10] = v18;
  *(_OWORD *)(v19 + 16) = xmmword_1000DA3D0;
  v16[13] = v17;
  swift_retain();
  id v20 = (id)AMSLogKey();
  if (v20)
  {
    uint64_t v21 = v20;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  uint64_t v36 = (void (*)(uint64_t, uint64_t))v16[30];
  uint64_t v37 = v16[31];
  uint64_t v22 = v16[25];
  uint64_t v34 = v16[23];
  uint64_t v35 = v16[26];
  uint64_t v38 = v16[22];
  uint64_t v23 = v16[18];
  static LogInterpolation.prefix(_:_:)();
  swift_bridgeObjectRelease();
  sub_10000D47C((uint64_t)(v16 + 10));
  LogInterpolation.init(stringLiteral:)();
  v16[17] = sub_100011D80(&qword_10012E4A8);
  uint64_t v24 = sub_1000042C4(v16 + 14);
  sub_10000F620(v23, (uint64_t)v24, &qword_10012E4A8);
  static LogInterpolation.sensitive(_:)();
  sub_1000188C0((uint64_t)(v16 + 14), &qword_10012EFB0);
  Log.default(_:)();
  swift_bridgeObjectRelease();
  v36(v22, v34);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100008600();
  sub_100072F00();
  return v26(v25, v26, v27, v28, v29, v30, v31, v32, v34, v35, v36, v37, v38, a14, a15, a16);
}

uint64_t sub_10006C204()
{
  sub_100008308();
  v1[93] = v0;
  v1[92] = v2;
  v1[91] = v3;
  v1[90] = v4;
  uint64_t v5 = sub_100011D80(&qword_10012E4A0);
  sub_1000085F4(v5);
  v1[94] = sub_1000084E0();
  uint64_t v6 = sub_100011D80(&qword_10012E458);
  sub_1000085F4(v6);
  v1[95] = sub_1000168EC();
  v1[96] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for LogInterpolation.StringInterpolation();
  sub_1000085F4(v7);
  v1[97] = sub_1000168EC();
  v1[98] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for CachedServerDataSyncTaskScheduleInput(0);
  v1[99] = v8;
  sub_1000085F4(v8);
  v1[100] = sub_1000084E0();
  uint64_t v9 = type metadata accessor for Log();
  v1[101] = v9;
  sub_1000082C8(v9);
  v1[102] = v10;
  v1[103] = sub_1000168EC();
  v1[104] = swift_task_alloc();
  v1[105] = swift_task_alloc();
  v1[106] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for AccountDataState(0);
  v1[107] = v11;
  sub_1000085F4(v11);
  v1[108] = sub_1000168EC();
  v1[109] = swift_task_alloc();
  v1[110] = swift_task_alloc();
  v1[111] = swift_task_alloc();
  sub_10001656C();
  return _swift_task_switch(v12, v13, v14);
}

uint64_t sub_10006C3AC()
{
  uint64_t v1 = *(void *)(v0 + 888);
  uint64_t v2 = *(void *)(v0 + 880);
  uint64_t v3 = *(void *)(v0 + 872);
  uint64_t v4 = *(void *)(v0 + 744);
  uint64_t v5 = *(void *)(v0 + 736);
  uint64_t v6 = *(void *)(v0 + 720);
  uint64_t v7 = v4 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_state;
  swift_beginAccess();
  sub_10000FC70(v7, v1, (void (*)(void))type metadata accessor for AccountDataState);
  sub_100073330();
  sub_10000FC70(v8, v9, v10);
  sub_100089084();
  sub_1000104A8(v3, (void (*)(void))type metadata accessor for AccountDataState);
  sub_100074720(v6, v1, v2, (void *)(v4 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_metrics), v5);
  uint64_t v11 = OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_accountID;
  *(void *)(v0 + 896) = OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_accountID;
  uint64_t v12 = v4 + v11;
  sub_10006E240(v4 + v11, v2);
  uint64_t v116 = v7;
  uint64_t v113 = (uint64_t *)(v0 + 280);
  uint64_t v115 = v12;
  uint64_t v13 = *(void *)(v0 + 744);
  static Log.accountsDataSync.getter();
  sub_100011D80((uint64_t *)&unk_10012E440);
  uint64_t v14 = type metadata accessor for LogInterpolation();
  sub_1000082C8(v14);
  sub_100016340();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3D0;
  uint64_t v98 = v4;
  uint64_t v97 = type metadata accessor for AccountDataAccessActor();
  *(void *)(v0 + 272) = v97;
  *(void *)(v0 + 24_Block_object_dispose(&a9, 8) = v13;
  swift_retain();
  id v15 = (id)AMSLogKey();
  if (v15)
  {
    uint64_t v16 = v15;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  uint64_t v17 = *(void *)(v0 + 872);
  uint64_t v18 = *(int **)(v0 + 856);
  uint64_t v99 = *(void *)(v0 + 880);
  uint64_t v101 = *(void *)(v0 + 848);
  uint64_t v19 = *(void *)(v0 + 816);
  id v20 = *(uint64_t **)(v0 + 800);
  uint64_t v21 = *(int **)(v0 + 792);
  uint64_t v104 = *(void *)(v0 + 808);
  uint64_t v107 = *(void *)(v0 + 744);
  uint64_t v22 = *(uint64_t **)(v0 + 728);
  static LogInterpolation.prefix(_:_:)();
  swift_bridgeObjectRelease();
  sub_10000D47C(v0 + 248);
  sub_10007353C();
  LogInterpolation.init(stringLiteral:)();
  *(void *)(v0 + 304) = v18;
  uint64_t v23 = sub_1000042C4(v113);
  sub_10000FC70(v99, (uint64_t)v23, (void (*)(void))type metadata accessor for AccountDataState);
  static LogInterpolation.sensitive(_:)();
  sub_1000188C0((uint64_t)v113, &qword_10012EFB0);
  Log.default(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v101, v104);
  uint64_t v24 = (void *)(v107 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_account);
  sub_10000FC70(v116, v17, (void (*)(void))type metadata accessor for AccountDataState);
  uint64_t v102 = *v22;
  uint64_t v105 = v22[1];
  uint64_t v110 = v22[2];
  uint64_t v114 = v22[3];
  uint64_t v108 = v22[4];
  uint64_t v111 = v22[5];
  uint64_t v25 = sub_1000087B0(v24, v24[3]);
  uint64_t v26 = sub_1000052B8((uint64_t)v25);
  uint64_t v100 = v27;
  uint64_t v28 = sub_1000087B0(v24, v24[3]);
  uint64_t v29 = (char *)v20 + v21[5];
  type metadata accessor for AccountIdentity();
  sub_1000082F8();
  uint64_t v31 = *(void (**)(char *, void *, uint64_t))(v30 + 16);
  uint64_t v32 = v29;
  uint64_t v34 = v33;
  v31(v32, v28, v33);
  sub_10000F620(v17 + v18[5], (uint64_t)v20 + v21[13], &qword_10012E458);
  sub_1000731BC(v17 + v18[6], v21[14]);
  sub_1000731BC(v17 + v18[9], v21[15]);
  sub_1000731BC(v17 + v18[11], v21[16]);
  uint64_t v35 = *(void *)(v17 + v18[12]);
  sub_10000F620(v17 + v18[13], (uint64_t)v20 + v21[18], &qword_10012E4A0);
  sub_1000169C4();
  *id v20 = v26;
  uint64_t v36 = (uint64_t)v20;
  v20[1] = v100;
  *(uint64_t *)((char *)v20 + v21[6]) = v102;
  *(uint64_t *)((char *)v20 + v21[7]) = v105;
  *(uint64_t *)((char *)v20 + v21[8]) = v110;
  *(uint64_t *)((char *)v20 + v21[9]) = v108;
  *((unsigned char *)v20 + v21[10]) = 8;
  *(uint64_t *)((char *)v20 + v21[11]) = v111;
  *(uint64_t *)((char *)v20 + v21[12]) = v114;
  uint64_t v37 = v21[17];
  *(void *)(v36 + v37) = v35;
  *(unsigned char *)(v36 + v21[19]) = v38;
  sub_1000104A8(v17, (void (*)(void))type metadata accessor for AccountDataState);
  char v39 = sub_1000049D4(v36);
  if (v39 != 11)
  {
    char v112 = v39;
    uint64_t v94 = v37;
    uint64_t v95 = v36;
    uint64_t v43 = *(void *)(v0 + 744);
    static Log.accountsDataSync.getter();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3E0;
    *(void *)(v0 + 400) = v97;
    *(void *)(v0 + 376) = v43;
    swift_retain();
    id v44 = (id)AMSLogKey();
    if (v44)
    {
      uint64_t v45 = v44;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    uint64_t v103 = (uint64_t *)(v0 + 504);
    uint64_t v96 = *(void *)(v0 + 768);
    static LogInterpolation.prefix(_:_:)();
    swift_bridgeObjectRelease();
    sub_10000D47C(v0 + 376);
    LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)();
    sub_1000159E0();
    v49._countAndFlagsBits = 0xD00000000000001DLL;
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v49);
    *(void *)(v0 + 432) = &unk_100116010;
    *(unsigned char *)(v0 + 40_Block_object_dispose(&a9, 8) = v112;
    LogInterpolation.StringInterpolation.appendInterpolation(_:)();
    sub_1000188C0(v0 + 408, &qword_10012EFB0);
    v50._countAndFlagsBits = sub_100072F50();
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v50);
    LogInterpolation.init(stringInterpolation:)();
    *(void *)(v0 + 464) = v34;
    sub_1000042C4((uint64_t *)(v0 + 440));
    sub_100008000();
    v51();
    static LogInterpolation.traceableSensitive(_:)();
    sub_1000188C0(v0 + 440, &qword_10012EFB0);
    LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)();
    sub_1000159E0();
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v52);
    uint64_t v53 = *(void *)(v116 + v18[12]);
    *(void *)(v0 + 656) = &type metadata for UInt;
    *(void *)(v0 + 632) = v53;
    LogInterpolation.StringInterpolation.appendInterpolation(_:)();
    sub_1000188C0(v0 + 632, &qword_10012EFB0);
    v54._countAndFlagsBits = sub_100016428();
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v54);
    sub_10000F620(v116 + v18[6], v96, &qword_10012E458);
    uint64_t v55 = type metadata accessor for Date();
    if (sub_10001044C(v96, 1, v55) == 1)
    {
      sub_1000188C0(*(void *)(v0 + 768), &qword_10012E458);
      uint64_t v56 = v0 + 504;
      *(_OWORD *)uint64_t v103 = 0u;
      *(_OWORD *)(v0 + 520) = 0u;
    }
    else
    {
      *(void *)(v0 + 52_Block_object_dispose(&a9, 8) = v55;
      uint64_t v56 = v0 + 504;
      sub_1000042C4(v103);
      sub_10000A430();
      (*(void (**)(void))(v57 + 32))();
    }
    uint64_t v58 = *(void *)(v0 + 752);
    LogInterpolation.StringInterpolation.appendInterpolation(_:)();
    sub_1000188C0(v56, &qword_10012EFB0);
    v59._countAndFlagsBits = sub_100073040();
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v59);
    sub_10000F620(v116 + v18[13], v58, &qword_10012E4A0);
    uint64_t v60 = type metadata accessor for CachedServerDataSyncAttempt(0);
    int v61 = sub_10001044C(v58, 1, v60);
    uint64_t v62 = *(void *)(v0 + 752);
    if (v61 == 1)
    {
      sub_1000188C0(*(void *)(v0 + 752), &qword_10012E4A0);
      *(_OWORD *)(v0 + 536) = 0u;
      *(_OWORD *)(v0 + 552) = 0u;
    }
    else
    {
      *(void *)(v0 + 560) = v60;
      uint64_t v63 = sub_1000042C4((uint64_t *)(v0 + 536));
      sub_100009BBC(v62, (uint64_t)v63, (void (*)(void))type metadata accessor for CachedServerDataSyncAttempt);
    }
    uint64_t v106 = (void *)(v0 + 16);
    LogInterpolation.StringInterpolation.appendInterpolation(_:)();
    sub_1000188C0(v0 + 536, &qword_10012EFB0);
    v64._countAndFlagsBits = sub_100072EDC();
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v64);
    sub_100073374();
    if (v66)
    {
      *(_OWORD *)(v0 + 56_Block_object_dispose(&a9, 8) = 0u;
      *(_OWORD *)(v0 + 584) = 0u;
    }
    else
    {
      *(void *)(v0 + 592) = &unk_100115498;
      *(_WORD *)(v0 + 56_Block_object_dispose(&a9, 8) = v65;
    }
    uint64_t v67 = *(void *)(v0 + 760);
    LogInterpolation.StringInterpolation.appendInterpolation(_:)();
    sub_1000188C0(v0 + 568, &qword_10012EFB0);
    v68._countAndFlagsBits = sub_10007305C();
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v68);
    sub_10000F620(v116 + v18[5], v67, &qword_10012E458);
    uint64_t v109 = v60;
    if (sub_10001044C(v67, 1, v55) == 1)
    {
      sub_1000188C0(*(void *)(v0 + 760), &qword_10012E458);
      *(_OWORD *)(v0 + 600) = 0u;
      *(_OWORD *)(v0 + 616) = 0u;
    }
    else
    {
      *(void *)(v0 + 624) = v55;
      sub_1000042C4((uint64_t *)(v0 + 600));
      sub_10000A430();
      (*(void (**)(void))(v69 + 32))();
    }
    uint64_t v70 = *(void *)(v0 + 872);
    uint64_t v71 = *(void *)(v0 + 864);
    uint64_t v72 = *(void *)(v0 + 856);
    LogInterpolation.StringInterpolation.appendInterpolation(_:)();
    sub_1000188C0(v0 + 600, &qword_10012EFB0);
    v73._countAndFlagsBits = 0;
    v73._object = (void *)0xE000000000000000;
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v73);
    LogInterpolation.init(stringInterpolation:)();
    Log.default(_:)();
    swift_bridgeObjectRelease();
    sub_100072E60();
    v74();
    sub_10000FC70(v116, v70, (void (*)(void))type metadata accessor for AccountDataState);
    sub_100007E78(v70, (uint64_t)v106, &qword_10012E460);
    uint64_t v75 = v18;
    sub_10000F620(v70 + v18[5], v71 + v18[5], &qword_10012E458);
    sub_1000731BC(v70 + v75[6], v75[6]);
    sub_10000A430();
    sub_100008000();
    v76();
    __int16 v77 = *(_WORD *)(v70 + v18[8]);
    sub_10000F620(v70 + v75[9], v71 + v75[9], &qword_10012E458);
    __int16 v78 = *(_WORD *)(v70 + *(int *)(v72 + 40));
    sub_1000731BC(v70 + v75[11], v75[11]);
    uint64_t v79 = *(void *)(v70 + v18[12]);
    sub_1000101E8(v71 + v18[13], 1, 1, v109);
    sub_100007E78((uint64_t)v106, v71, &qword_10012E460);
    *(_WORD *)(v71 + v18[8]) = v77;
    *(_WORD *)(v71 + *(int *)(v72 + 40)) = v78;
    *(void *)(v71 + v18[12]) = v79;
    sub_1000726A0(v106, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10007271C);
    sub_1000104A8(v70, (void (*)(void))type metadata accessor for AccountDataState);
    sub_10006E240(v115, v71);
    uint64_t v34 = v0 + 664;
    uint64_t v80 = *(void *)(v0 + 744);
    static Log.accountsDataSync.getter();
    uint64_t v81 = swift_allocObject();
    *(_OWORD *)(v81 + 16) = xmmword_1000DA3D0;
    uint64_t v21 = (int *)(v81 + v98);
    *(void *)(v0 + 68_Block_object_dispose(&a9, 8) = v97;
    *(void *)(v0 + 664) = v80;
    swift_retain();
    id v82 = (id)AMSLogKey();
    if (v82)
    {
      uint64_t v83 = v82;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    uint64_t v31 = *(void (**)(char *, void *, uint64_t))(v0 + 864);
    uint64_t v91 = *(void *)(v0 + 856);
    static LogInterpolation.prefix(_:_:)();
    swift_bridgeObjectRelease();
    sub_10000D47C(v0 + 664);
    sub_10000A3D0();
    *(void *)(v0 + 496) = v91;
    uint64_t v92 = sub_1000042C4((uint64_t *)(v0 + 472));
    sub_10000FC70((uint64_t)v31, (uint64_t)v92, (void (*)(void))type metadata accessor for AccountDataState);
    static LogInterpolation.sensitive(_:)();
    sub_1000188C0(v0 + 472, &qword_10012EFB0);
    Log.default(_:)();
    swift_bridgeObjectRelease();
    sub_100072E60();
    v93();
    sub_1000696E4();
    sub_1000104A8(*(void *)(v0 + 864), (void (*)(void))type metadata accessor for AccountDataState);
    uint64_t v37 = v94;
    uint64_t v36 = v95;
  }
  if (*(void *)(v36 + v37))
  {
    sub_100072E8C();
    uint64_t v40 = sub_100016750();
    v41(v40);
    sub_1000104A8((uint64_t)v31, (void (*)(void))type metadata accessor for CachedServerDataSyncTaskScheduleInput);
    sub_1000104A8((uint64_t)v21, (void (*)(void))type metadata accessor for AccountDataState);
    sub_1000104A8(v34, (void (*)(void))type metadata accessor for AccountDataState);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000800C();
    return v42();
  }
  else
  {
    uint64_t v46 = *(void *)(v0 + 744);
    static Log.accountsDataSync.getter();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3D0;
    *(void *)(v0 + 336) = v97;
    *(void *)(v0 + 312) = v46;
    swift_retain();
    id v47 = (id)AMSLogKey();
    if (v47)
    {
      uint64_t v48 = v47;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    uint64_t v84 = *(void *)(v0 + 856);
    static LogInterpolation.prefix(_:_:)();
    swift_bridgeObjectRelease();
    sub_10000D47C(v0 + 312);
    sub_10000A3D0();
    *(void *)(v0 + 36_Block_object_dispose(&a9, 8) = v84;
    uint64_t v85 = sub_1000042C4((uint64_t *)(v0 + 344));
    sub_10000FC70(v116, (uint64_t)v85, (void (*)(void))type metadata accessor for AccountDataState);
    static LogInterpolation.sensitive(_:)();
    sub_1000188C0(v0 + 344, &qword_10012EFB0);
    Log.default(_:)();
    swift_bridgeObjectRelease();
    sub_100072E60();
    v86();
    uint64_t v87 = sub_100072FD8(OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_notifier);
    v88(v87);
    uint64_t v89 = (void *)swift_task_alloc();
    *(void *)(v0 + 904) = v89;
    *uint64_t v89 = v0;
    v89[1] = sub_10006D4D4;
    return sub_10006E338();
  }
}

uint64_t sub_10006D4D4()
{
  sub_100005AEC();
  uint64_t v1 = *v0;
  sub_100008314();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  *uint64_t v2 = *v0;
  swift_task_dealloc();
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 912) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_10006D658;
  return sub_10006F024();
}

uint64_t sub_10006D658()
{
  sub_100008308();
  sub_1000082E0();
  uint64_t v1 = *v0;
  sub_100008314();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10001656C();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10006D734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_100016858();
  sub_100072E8C();
  uint64_t v35 = v23;
  uint64_t v36 = v22;
  uint64_t v37 = v18[97];
  uint64_t v38 = v18[96];
  uint64_t v39 = v18[95];
  uint64_t v40 = v18[94];
  uint64_t v24 = sub_100016750();
  v25(v24);
  sub_1000104A8(v21, (void (*)(void))type metadata accessor for CachedServerDataSyncTaskScheduleInput);
  sub_1000104A8(v20, (void (*)(void))type metadata accessor for AccountDataState);
  sub_1000104A8(v19, (void (*)(void))type metadata accessor for AccountDataState);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000800C();
  sub_100008504();
  return v27(v26, v27, v28, v29, v30, v31, v32, v33, a9, v35, v36, v37, v38, v39, v40, a16, a17, a18);
}

uint64_t sub_10006D87C()
{
  sub_100008308();
  *(void *)(v1 + 480) = v2;
  *(void *)(v1 + 48_Block_object_dispose(&a9, 8) = v0;
  *(unsigned char *)(v1 + 569) = v3;
  *(void *)(v1 + 464) = v4;
  *(void *)(v1 + 472) = v5;
  *(unsigned char *)(v1 + 56_Block_object_dispose(&a9, 8) = v6;
  uint64_t v7 = type metadata accessor for AccountDataState(0);
  *(void *)(v1 + 496) = v7;
  sub_1000085F4(v7);
  *(void *)(v1 + 504) = sub_1000168EC();
  *(void *)(v1 + 512) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for LogInterpolation.StringInterpolation();
  sub_1000085F4(v8);
  *(void *)(v1 + 520) = sub_1000084E0();
  uint64_t v9 = type metadata accessor for Log();
  *(void *)(v1 + 52_Block_object_dispose(&a9, 8) = v9;
  sub_1000082C8(v9);
  *(void *)(v1 + 536) = v10;
  *(void *)(v1 + 544) = sub_1000168EC();
  *(void *)(v1 + 552) = swift_task_alloc();
  sub_10001656C();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t sub_10006D970()
{
  sub_1000731D4();
  uint64_t v42 = (uint64_t *)(v0 + 312);
  uint64_t v1 = *(void *)(v0 + 488);
  static Log.accountsDataSync.getter();
  sub_100011D80((uint64_t *)&unk_10012E440);
  uint64_t v2 = type metadata accessor for LogInterpolation();
  sub_1000082C8(v2);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3D0;
  uint64_t v3 = type metadata accessor for AccountDataAccessActor();
  *(void *)(v0 + 400) = v3;
  *(void *)(v0 + 376) = v1;
  swift_retain();
  id v4 = (id)AMSLogKey();
  uint64_t v40 = v3;
  uint64_t v43 = (void *)(v0 + 16);
  if (v4)
  {
    uint64_t v5 = v4;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  uint64_t v6 = *(void *)(v0 + 504);
  uint64_t v7 = *(void *)(v0 + 512);
  uint64_t v8 = *(int **)(v0 + 496);
  uint64_t v44 = *(void *)(v0 + 488);
  __int16 v41 = *(unsigned __int8 *)(v0 + 569);
  char v9 = *(unsigned char *)(v0 + 568);
  static LogInterpolation.prefix(_:_:)();
  swift_bridgeObjectRelease();
  sub_10000D47C(v0 + 376);
  LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v10._countAndFlagsBits = 0x676E69676E616843;
  v10._object = (void *)0xE900000000000020;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(v10);
  *(void *)(v0 + 272) = &unk_100115300;
  *(unsigned char *)(v0 + 24_Block_object_dispose(&a9, 8) = v9 & 1;
  LogInterpolation.StringInterpolation.appendInterpolation(_:)();
  sub_1000188C0(v0 + 248, &qword_10012EFB0);
  v11._countAndFlagsBits = 544175136;
  v11._object = (void *)0xE400000000000000;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(v11);
  *(void *)(v0 + 304) = &type metadata for Bool;
  *(unsigned char *)(v0 + 280) = v41;
  LogInterpolation.StringInterpolation.appendInterpolation(_:)();
  sub_1000188C0(v0 + 280, &qword_10012EFB0);
  v12._countAndFlagsBits = 1919903264;
  v12._object = (void *)0xE400000000000000;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(v12);
  LogInterpolation.init(stringInterpolation:)();
  *(void *)(v0 + 336) = type metadata accessor for AccountIdentity();
  sub_1000042C4(v42);
  sub_10000A430();
  sub_100008000();
  v13();
  sub_100073570();
  sub_1000188C0((uint64_t)v42, &qword_10012EFB0);
  Log.default(_:)();
  swift_bridgeObjectRelease();
  sub_1000084F8();
  v14();
  uint64_t v15 = v44 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_state;
  swift_beginAccess();
  uint64_t v16 = sub_100011650();
  sub_10000FC70(v16, v17, v18);
  if (v9) {
    char v19 = 2;
  }
  else {
    char v19 = v41;
  }
  if (v9) {
    __int16 v20 = v41;
  }
  else {
    __int16 v20 = 2;
  }
  unsigned int v21 = *(unsigned __int16 *)(v6 + v8[8]);
  int v22 = *(_WORD *)(v6 + v8[8]);
  unsigned int v23 = v21 >> 8;
  if (v9) {
    LOWORD(v23) = v41;
  }
  else {
    LOBYTE(v21) = v41;
  }
  if (v22 == 3) {
    unsigned __int8 v24 = v19;
  }
  else {
    unsigned __int8 v24 = v21;
  }
  if (v22 == 3) {
    __int16 v25 = v20;
  }
  else {
    __int16 v25 = v23;
  }
  sub_100007E78(v6, (uint64_t)v43, &qword_10012E460);
  sub_10000F620(v6 + v8[5], v7 + v8[5], &qword_10012E458);
  sub_10000F620(v6 + v8[6], v7 + v8[6], &qword_10012E458);
  type metadata accessor for Date();
  sub_1000082F8();
  sub_100008000();
  v26();
  sub_10000F620(v6 + v8[9], v7 + v8[9], &qword_10012E458);
  __int16 v27 = *(_WORD *)(v6 + v8[10]);
  sub_10000F620(v6 + v8[11], v7 + v8[11], &qword_10012E458);
  uint64_t v28 = *(void *)(v6 + v8[12]);
  sub_10000F620(v6 + v8[13], v7 + v8[13], &qword_10012E4A0);
  sub_100007E78((uint64_t)v43, v7, &qword_10012E460);
  *(_WORD *)(v7 + v8[8]) = v24 | (unsigned __int16)(v25 << 8);
  *(_WORD *)(v7 + v8[10]) = v27;
  *(void *)(v7 + v8[12]) = v28;
  sub_1000726A0(v43, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10007271C);
  sub_1000104A8(v6, (void (*)(void))type metadata accessor for AccountDataState);
  sub_10006E240(v44 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_accountID, v7);
  sub_1000696E4();
  uint64_t v29 = *(void *)(v0 + 488);
  static Log.accountsDataSync.getter();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3D0;
  *(void *)(v0 + 432) = v40;
  *(void *)(v0 + 40_Block_object_dispose(&a9, 8) = v29;
  swift_retain();
  id v30 = (id)AMSLogKey();
  if (v30)
  {
    uint64_t v31 = v30;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  uint64_t v32 = *(void *)(v0 + 496);
  static LogInterpolation.prefix(_:_:)();
  swift_bridgeObjectRelease();
  sub_10000D47C(v0 + 408);
  sub_100073550();
  *(void *)(v0 + 36_Block_object_dispose(&a9, 8) = v32;
  uint64_t v33 = sub_1000042C4((uint64_t *)(v0 + 344));
  sub_10000FC70(v15, (uint64_t)v33, (void (*)(void))type metadata accessor for AccountDataState);
  static LogInterpolation.sensitive(_:)();
  sub_1000188C0(v0 + 344, &qword_10012EFB0);
  Log.default(_:)();
  swift_bridgeObjectRelease();
  sub_100072E60();
  v34();
  uint64_t v35 = sub_100072FD8(OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_notifier);
  v36(v35);
  uint64_t v37 = (void *)swift_task_alloc();
  *(void *)(v0 + 560) = v37;
  *uint64_t v37 = v0;
  v37[1] = sub_10006E0B0;
  sub_100072E44();
  return sub_10006E338();
}

uint64_t sub_10006E0B0()
{
  sub_100008308();
  sub_1000082E0();
  uint64_t v1 = *v0;
  sub_100008314();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10001656C();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10006E18C()
{
  sub_100005AEC();
  sub_1000104A8(*(void *)(v0 + 512), (void (*)(void))type metadata accessor for AccountDataState);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000800C();
  return v1();
}

uint64_t sub_10006E240(uint64_t a1, uint64_t a2)
{
  sub_100073528();
  uint64_t result = v5(a2);
  if (!v3)
  {
    uint64_t v7 = v2 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_state;
    swift_beginAccess();
    sub_10007263C(a2, v7);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_10006E2D8(void *a1)
{
  uint64_t v1 = sub_1000087B0(a1, a1[3]);
  sub_1000052B8((uint64_t)v1);
  sub_100073528();
  v2();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10006E338()
{
  sub_100008308();
  v1[165] = v0;
  v1[164] = v2;
  v1[163] = v3;
  uint64_t v4 = type metadata accessor for Log();
  v1[166] = v4;
  sub_1000082C8(v4);
  v1[167] = v5;
  v1[168] = sub_1000168EC();
  v1[169] = swift_task_alloc();
  v1[170] = swift_task_alloc();
  v1[171] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for AccountIdentity.DSID();
  v1[172] = v6;
  sub_1000082C8(v6);
  v1[173] = v7;
  v1[174] = sub_1000084E0();
  sub_10001656C();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_10006E420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_100015FD4();
  uint64_t v17 = *(void *)(v16 + 1392);
  uint64_t v18 = *(void *)(v16 + 1384);
  uint64_t v19 = *(void *)(v16 + 1376);
  AccountIdentity.dsid.getter();
  sub_10007311C();
  unsigned int v21 = (void *)v20();
  *(void *)(v16 + 1400) = v21;
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  if (v21)
  {
    id v22 = [v21 accountStore];
    *(void *)(v16 + 140_Block_object_dispose(&a9, 8) = v22;
    if (v22)
    {
      unsigned int v23 = v22;
      sub_100073330();
      sub_100007E78(v24, v25, v26);
      type metadata accessor for AccountDataState(0);
      sub_100007B74();
      sub_100007E78(v16 + 776, v16 + 544, &qword_10012E460);
      sub_100073078();
      if (!v27)
      {
        memcpy((void *)(v16 + 312), (const void *)(v16 + 544), 0xE8uLL);
        uint64_t v40 = sub_100083178();
        sub_100072344((uint64_t)v40, v21);
        uint64_t v41 = *(void *)(v16 + 312);
        uint64_t v42 = *(void *)(v16 + 320);
        swift_bridgeObjectRetain();
        sub_10007241C(v41, v42, v21);
        swift_bridgeObjectRelease();
        uint64_t v43 = *(void *)(v16 + 368);
        uint64_t v44 = *(void *)(v16 + 376);
        swift_bridgeObjectRetain();
        sub_1000726A0((void *)(v16 + 776), (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10000667C);
        sub_100072474(v43, v44, v21);
        swift_bridgeObjectRelease();
        id v45 = objc_msgSend(v23, "ams_saveAccount:", v21);
        *(void *)(v16 + 1416) = v45;
        *(void *)(v16 + 16) = v16;
        *(void *)(v16 + 56) = v16 + 1432;
        *(void *)(v16 + 24) = sub_10006EBF8;
        *(void *)(v16 + 1040) = swift_continuation_init();
        *(void *)(v16 + 100_Block_object_dispose(&a9, 8) = _NSConcreteStackBlock;
        *(void *)(v16 + 1016) = 0x40000000;
        *(void *)(v16 + 1024) = sub_10006EFC4;
        *(void *)(v16 + 1032) = &unk_1001150A8;
        [v45 resultWithCompletion:v16 + 1008];
        sub_100072F00();
        return _swift_continuation_await(v46);
      }
      a12 = v16 + 1112;
      a13 = (uint64_t *)(v16 + 1144);
      uint64_t v28 = *(void *)(v16 + 1320);
      static Log.accountsDataSync.getter();
      sub_100011D80((uint64_t *)&unk_10012E440);
      uint64_t v29 = type metadata accessor for LogInterpolation();
      sub_1000082C8(v29);
      sub_1000160DC();
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3D0;
      *(void *)(v16 + 1136) = type metadata accessor for AccountDataAccessActor();
      *(void *)(v16 + 1112) = v28;
      swift_retain();
      id v30 = (id)AMSLogKey();
      if (v30)
      {
        uint64_t v31 = v30;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      uint64_t v54 = *(void *)(v16 + 1336);
      a10 = *(void *)(v16 + 1368);
      a11 = *(void *)(v16 + 1328);
      a9 = *(void *)(v16 + 1304);
      static LogInterpolation.prefix(_:_:)();
      swift_bridgeObjectRelease();
      sub_10000D47C(a12);
      sub_100012258();
      LogInterpolation.init(stringLiteral:)();
      *(void *)(v16 + 116_Block_object_dispose(&a9, 8) = type metadata accessor for AccountIdentity();
      sub_1000042C4(a13);
      sub_10000A430();
      sub_100008000();
      v55();
      static LogInterpolation.traceableSensitive(_:)();
      sub_1000188C0((uint64_t)a13, &qword_10012EFB0);
      Log.default(_:)();
      swift_bridgeObjectRelease();

      (*(void (**)(uint64_t, uint64_t))(v54 + 8))(a10, a11);
    }
    else
    {
      uint64_t v36 = *(void *)(v16 + 1320);
      static Log.accountsDataSync.getter();
      sub_100011D80((uint64_t *)&unk_10012E440);
      uint64_t v37 = type metadata accessor for LogInterpolation();
      sub_1000082C8(v37);
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3D0;
      *(void *)(v16 + 1072) = type metadata accessor for AccountDataAccessActor();
      *(void *)(v16 + 104_Block_object_dispose(&a9, 8) = v36;
      swift_retain();
      id v38 = (id)AMSLogKey();
      if (v38)
      {
        uint64_t v39 = v38;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      static LogInterpolation.prefix(_:_:)();
      swift_bridgeObjectRelease();
      sub_10000D47C(v16 + 1048);
      sub_10000A3D0();
      id v51 = [v21 identifier];
      if (v51)
      {
        id v52 = v51;
        *(void *)(v16 + 1104) = sub_10001065C(0, (unint64_t *)&unk_10012EFD0);
        *(void *)(v16 + 1080) = v52;
      }
      else
      {
        *(_OWORD *)(v16 + 1080) = 0u;
        *(_OWORD *)(v16 + 1096) = 0u;
      }
      static LogInterpolation.traceableSensitive(_:)();
      sub_1000188C0(v16 + 1080, &qword_10012EFB0);
      Log.fault(_:)();
      swift_bridgeObjectRelease();

      sub_100073368();
      v53();
    }
  }
  else
  {
    a13 = (uint64_t *)(v16 + 1208);
    uint64_t v32 = *(void *)(v16 + 1320);
    static Log.accountsDataSync.getter();
    sub_100011D80((uint64_t *)&unk_10012E440);
    uint64_t v33 = type metadata accessor for LogInterpolation();
    sub_1000082C8(v33);
    sub_100016340();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3D0;
    *(void *)(v16 + 1264) = type metadata accessor for AccountDataAccessActor();
    *(void *)(v16 + 1240) = v32;
    swift_retain();
    id v34 = (id)AMSLogKey();
    if (v34)
    {
      uint64_t v35 = v34;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      sub_1000734E0();
    }
    uint64_t v48 = *(void *)(v16 + 1352);
    uint64_t v49 = *(void *)(v16 + 1336);
    a12 = *(void *)(v16 + 1328);
    sub_100073298();
    swift_bridgeObjectRelease();
    sub_10000D47C(v16 + 1240);
    sub_10000A3D0();
    *(void *)(v16 + 1232) = type metadata accessor for AccountIdentity();
    sub_1000042C4(a13);
    sub_10000A430();
    sub_100008000();
    v50();
    static LogInterpolation.traceableSensitive(_:)();
    sub_1000188C0((uint64_t)a13, &qword_10012EFB0);
    Log.default(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, a12);
  }
  sub_100072EB8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100008600();
  sub_100072F00();
  return v57(v56, v57, v58, v59, v60, v61, v62, v63, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_10006EBF8()
{
  sub_100008308();
  sub_1000082E0();
  sub_10000A43C();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  uint64_t v4 = *(void *)(v3 + 48);
  *(void *)(v1 + 1424) = v4;
  uint64_t v5 = *(void *)(v3 + 1320);
  if (v4) {
    uint64_t v6 = sub_10006ED80;
  }
  else {
    uint64_t v6 = sub_10006ECEC;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_10006ECEC()
{
  sub_100009C64();
  uint64_t v1 = *(void **)(v0 + 1416);
  uint64_t v2 = *(void **)(v0 + 1400);

  sub_100072EB8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100008600();
  return v3();
}

uint64_t sub_10006ED80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_100016858();
  uint64_t v43 = (uint64_t)(v18 + 159);
  uint64_t v19 = (void *)v18[177];
  uint64_t v20 = v18[165];
  swift_willThrow();

  static Log.accountsDataSync.getter();
  sub_100011D80((uint64_t *)&unk_10012E440);
  uint64_t v21 = type metadata accessor for LogInterpolation();
  sub_1000082C8(v21);
  sub_1000160DC();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3D0;
  v18[162] = type metadata accessor for AccountDataAccessActor();
  v18[159] = v20;
  swift_retain();
  id v22 = (id)AMSLogKey();
  if (v22)
  {
    unsigned int v23 = v22;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    sub_1000734E0();
  }
  uint64_t v40 = (void *)v18[175];
  uint64_t v41 = (void *)v18[176];
  uint64_t v39 = v18[168];
  uint64_t v24 = v18[167];
  uint64_t v42 = v18[166];
  sub_100073298();
  swift_bridgeObjectRelease();
  sub_10000D47C(v43);
  sub_100073550();
  uint64_t v25 = (void *)_convertErrorToNSError(_:)();
  id v26 = (id)AMSLogableError();

  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v29 = v28;

  v18[150] = &type metadata for String;
  v18[147] = v27;
  v18[148] = v29;
  static LogInterpolation.safe(_:)();
  sub_1000188C0((uint64_t)(v18 + 147), &qword_10012EFB0);
  Log.error(_:)();

  swift_errorRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v39, v42);
  sub_100072EB8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100008600();
  sub_100008504();
  return v31(v30, v31, v32, v33, v34, v35, v36, v37, a9, v39, v40, v41, v42, v43, a15, a16, a17, a18);
}

uint64_t sub_10006EFC4(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    id v4 = a3;
    return sub_1000ABB38(v3, v4);
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 32);
    return sub_1000ABBA0(v6, a2);
  }
}

uint64_t sub_10006F024()
{
  sub_100008308();
  v1[307] = v0;
  v1[306] = v2;
  v1[305] = v3;
  v1[304] = v4;
  v1[308] = *v0;
  uint64_t v5 = type metadata accessor for LogInterpolation.StringInterpolation();
  sub_1000085F4(v5);
  v1[309] = sub_1000084E0();
  uint64_t v6 = type metadata accessor for Log();
  v1[310] = v6;
  sub_1000082C8(v6);
  v1[311] = v7;
  v1[312] = sub_1000168EC();
  v1[313] = swift_task_alloc();
  v1[314] = swift_task_alloc();
  v1[315] = swift_task_alloc();
  v1[316] = swift_task_alloc();
  v1[317] = swift_task_alloc();
  sub_10001656C();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_10006F140()
{
  sub_100016858();
  uint64_t v24 = (void *)(v0 + 1008);
  unsigned int v23 = (const void *)(v0 + 1240);
  id v22 = (uint64_t *)(v0 + 1776);
  uint64_t v1 = *(void *)(v0 + 2456);
  static Log.accountsDataSync.getter();
  *(void *)(v0 + 2544) = sub_100011D80((uint64_t *)&unk_10012E440);
  uint64_t v2 = type metadata accessor for LogInterpolation();
  sub_1000082C8(v2);
  *(void *)(v0 + 2552) = *(void *)(v3 + 72);
  *(_DWORD *)(v0 + 2720) = *(_DWORD *)(v4 + 80);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3D0;
  uint64_t v5 = type metadata accessor for AccountDataAccessActor();
  *(void *)(v0 + 2560) = v5;
  *(void *)(v0 + 176_Block_object_dispose(&a9, 8) = v5;
  *(void *)(v0 + 1744) = v1;
  swift_retain();
  id v6 = (id)AMSLogKey();
  if (v6)
  {
    uint64_t v7 = v6;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  uint64_t v8 = *(void *)(v0 + 2488);
  uint64_t v21 = *(void *)(v0 + 2440);
  static LogInterpolation.prefix(_:_:)();
  swift_bridgeObjectRelease();
  sub_10000D47C(v0 + 1744);
  sub_100012258();
  LogInterpolation.init(stringLiteral:)();
  uint64_t v9 = type metadata accessor for AccountIdentity();
  *(void *)(v0 + 256_Block_object_dispose(&a9, 8) = v9;
  *(void *)(v0 + 1800) = v9;
  sub_1000042C4(v22);
  sub_10000A430();
  *(void *)(v0 + 2576) = *(void *)(v10 + 16);
  *(void *)(v0 + 2584) = (v10 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  sub_100008000();
  v11();
  static LogInterpolation.traceableSensitive(_:)();
  sub_1000188C0((uint64_t)v22, &qword_10012EFB0);
  Log.default(_:)();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 2592) = *(void *)(v8 + 8);
  *(void *)(v0 + 2600) = (v8 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  sub_100073368();
  v12();
  sub_10001065C(0, &qword_10012E468);
  *(void *)(v0 + 260_Block_object_dispose(&a9, 8) = sub_100071800(0x644972657375, 0xE600000000000000, 1, 0);
  sub_100007E78(v21, v0 + 312, &qword_10012E460);
  uint64_t v13 = type metadata accessor for AccountDataState(0);
  *(void *)(v0 + 2616) = v13;
  *(_DWORD *)(v0 + 2724) = *(_DWORD *)(v13 + 32);
  *(_DWORD *)(v0 + 272_Block_object_dispose(&a9, 8) = *(_DWORD *)(v13 + 40);
  sub_100007B74();
  sub_100007E78((uint64_t)v24, (uint64_t)v23, &qword_10012E460);
  uint64_t v14 = _swiftEmptyArrayStorage;
  if (sub_100018644((uint64_t)v23) != 1)
  {
    memcpy((void *)(v0 + 80), v23, 0xE8uLL);
    sub_100007E78(v0 + 128, v0 + 2408, (uint64_t *)&unk_10012E480);
    sub_1000725C4(v0 + 2408);
    sub_1000726A0(v24, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10000667C);
    uint64_t v15 = sub_100011650();
    sub_100007E78(v15, v16, (uint64_t *)&unk_10012E480);
    if (*(void *)(v0 + 2424)) {
      uint64_t v14 = *(void **)(v0 + 2424);
    }
  }
  *(void *)(v0 + 2624) = v14;
  *(void *)(v0 + 2632) = *(void *)(*(void *)(v0 + 2456)
                                     + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_bag);
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v0 + 2640) = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_10006F514;
  sub_100008504();
  return sub_10007187C(v18);
}

uint64_t sub_10006F514()
{
  sub_100008308();
  sub_1000082E0();
  sub_10000A43C();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  sub_100008314();
  *uint64_t v4 = v3;
  *(void *)(v6 + 264_Block_object_dispose(&a9, 8) = v5;
  swift_task_dealloc();
  sub_10001656C();
  return _swift_task_switch(v7, v8, v9);
}

#error "10006F758: call analysis failed (funcsize=322)"

uint64_t sub_10006FB20()
{
  sub_100008308();
  sub_1000082E0();
  sub_10000A43C();
  *uint64_t v2 = v1;
  *(unsigned char *)(v1 + 2392) = v3;
  *(void *)(v1 + 2384) = v4;
  *(void *)(v1 + 2376) = v0;
  uint64_t v5 = *v0;
  sub_100008314();
  *uint64_t v6 = v5;
  *(unsigned char *)(v8 + 2733) = v7;
  swift_task_dealloc();
  sub_10001656C();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_10006FC08()
{
  if (*(unsigned char *)(v0 + 2733))
  {
    uint64_t v84 = (void *)(v0 + 776);
    uint64_t v102 = (void *)(v0 + 1808);
    uint64_t v103 = v0 + 1840;
    uint64_t v105 = (uint64_t *)(v0 + 1872);
    sub_100016518();
    sub_10007312C();
    sub_100072F1C();
    uint64_t v5 = *(void *)(v0 + 2456);
    static Log.accountsDataSync.getter();
    sub_100011650();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3D0;
    *(void *)(v0 + 1832) = v1;
    *(void *)(v0 + 180_Block_object_dispose(&a9, 8) = v5;
    swift_retain();
    id v6 = (id)AMSLogKey();
    if (v6)
    {
      char v7 = v6;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v9 = v8;
    }
    else
    {
      uint64_t v9 = 0;
    }
    uint64_t v21 = *(void *)(v0 + 2688);
    uint64_t v22 = *(void *)(v0 + 2680);
    sub_10007318C();
    uint64_t v99 = v23;
    uint64_t v91 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v0 + 2576);
    uint64_t v24 = *(void *)(v0 + 2568);
    uint64_t v96 = *(void **)(v0 + 2512);
    uint64_t v98 = *(void *)(v0 + 2480);
    uint64_t v88 = *(void *)(v0 + 2432);
    static LogInterpolation.prefix(_:_:)();
    swift_bridgeObjectRelease();
    sub_10000D47C((uint64_t)v102);
    LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)();
    sub_1000732D0(0xD000000000000029, (uint64_t)"Failed sunsetting metrics identifier for ");
    *(void *)(v0 + 1864) = &type metadata for String;
    *(void *)(v0 + 1840) = v22;
    *(void *)(v0 + 184_Block_object_dispose(&a9, 8) = v21;
    LogInterpolation.StringInterpolation.appendInterpolation(_:)();
    sub_1000188C0(v103, &qword_10012EFB0);
    sub_1000732D0(0xD000000000000033, (uint64_t)", could not get consumerIdResetInterval. identity =");
    LogInterpolation.init(stringInterpolation:)();
    *(void *)(v0 + 1896) = v24;
    uint64_t v25 = sub_1000042C4(v105);
    v91(v25, v88, v24);
    static LogInterpolation.traceableSensitive(_:)();
    sub_1000188C0((uint64_t)v105, &qword_10012EFB0);
    id v26 = v96;
    Log.error(_:)();
    swift_bridgeObjectRelease();
    v99(v96, v98);
    uint64_t v27 = *(void **)(v0 + 2672);
    uint64_t v28 = *(uint64_t **)(v0 + 2664);
    sub_100016B3C();
    __int16 v78 = v29;
    if (!v27) {
      goto LABEL_12;
    }
LABEL_11:
    uint64_t v30 = sub_1000730BC();
    while (1)
    {
      *(void *)(v0 + 2672) = v27;
      *(void *)(v0 + 2664) = v28;
      sub_1000731F0(v30, v31);
      uint64_t v43 = *(void *)(v42 + 8);
      *(void *)(v0 + 268_Block_object_dispose(&a9, 8) = v43;
      sub_100007E78((uint64_t)v26, v0 + 544, &qword_10012E460);
      sub_100007B74();
      sub_100007E78((uint64_t)v84, v0 + 1472, &qword_10012E460);
      sub_100073078();
      if (v44) {
        break;
      }
      char v45 = *(unsigned char *)(v0 + 1632);
      swift_bridgeObjectRetain();
      sub_1000726A0(v84, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10000667C);
      if ((v45 & 1) == 0) {
        goto LABEL_35;
      }
      uint64_t v103 = (uint64_t)v27;
      uint64_t v105 = v28;
      sub_100072F1C();
      uint64_t v46 = *(void *)(v0 + 2456);
      static Log.accountsDataSync.getter();
      *(_OWORD *)(sub_100073170() + 16) = xmmword_1000DA3D0;
      *(void *)(v0 + 2344) = v28;
      *(void *)(v0 + 2320) = v46;
      swift_retain();
      id v47 = (id)AMSLogKey();
      if (v47)
      {
        uint64_t v48 = v47;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      uint64_t v102 = *(void **)(v0 + 2632);
      uint64_t v92 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v0 + 2576);
      uint64_t v49 = *(void *)(v0 + 2568);
      uint64_t v89 = *(void *)(v0 + 2432);
      static LogInterpolation.prefix(_:_:)();
      swift_bridgeObjectRelease();
      sub_10000D47C(v0 + 2320);
      sub_100072FF8();
      v50._countAndFlagsBits = 0xD000000000000020;
      v50._object = v78;
      LogInterpolation.StringInterpolation.appendLiteral(_:)(v50);
      *(void *)(v0 + 2312) = &type metadata for String;
      *(void *)(v0 + 228_Block_object_dispose(&a9, 8) = v9;
      *(void *)(v0 + 2296) = v43;
      swift_bridgeObjectRetain();
      LogInterpolation.StringInterpolation.appendInterpolation(_:)();
      sub_1000188C0(v80, &qword_10012EFB0);
      v51._countAndFlagsBits = 0xD00000000000002CLL;
      v51._object = (void *)0x80000001001019A0;
      LogInterpolation.StringInterpolation.appendLiteral(_:)(v51);
      LogInterpolation.init(stringInterpolation:)();
      *(void *)(v0 + 2280) = v49;
      id v52 = sub_1000042C4((uint64_t *)v82.n128_u64[0]);
      v92(v52, v89, v49);
      static LogInterpolation.traceableSensitive(_:)();
      sub_1000188C0(v82.n128_i64[0], &qword_10012EFB0);
      Log.default(_:)();
      swift_bridgeObjectRelease();
      uint64_t v53 = sub_100073160();
      v54(v53);
      self;
      NSString v55 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v26 = (void *)AccountIdentity.amsAccountIdentity()();
      sub_10001623C((uint64_t)v26, "_removeStoreForNamespace:accountID:bag:");

      if (v27) {
        goto LABEL_11;
      }
LABEL_12:
      if (__OFADD__(v28, 1))
      {
        __break(1u);
LABEL_48:
        __break(1u);
        return _swift_continuation_await(v19);
      }
      uint64_t v32 = sub_100072E28();
      if (v35 == v36) {
        goto LABEL_38;
      }
      uint64_t v37 = v32 + 56;
      uint64_t v28 = v34;
      if (!*(void *)(v32 + 56 + 8 * (void)v34))
      {
        int64_t v38 = v33 >> 6;
        uint64_t v28 = (uint64_t *)((char *)v34 + 1);
        if ((uint64_t)v34 + 1 >= v38) {
          goto LABEL_38;
        }
        if (!*(void *)(v37 + 8 * (void)v28))
        {
          uint64_t v28 = (uint64_t *)((char *)v34 + 2);
          if ((uint64_t)v34 + 2 >= v38) {
            goto LABEL_38;
          }
          if (!*(void *)(v37 + 8 * (void)v28))
          {
            sub_10007351C();
            if (v35 == v36)
            {
LABEL_38:
              Class v64 = *(Class *)(v0 + 2624);
              swift_release();
              if (*((void *)v64 + 2))
              {
                sub_100072FC8();
                uint64_t v85 = self;
                __int16 v65 = (char *)v64 + 56;
                sub_100072FB4();
                do
                {
                  sub_100016804();
                  swift_bridgeObjectRetain();
                  static Log.accountsDataSync.getter();
                  char v66 = (__n128 *)sub_100072F98();
                  sub_100016144(v66, v82);
                  if ((id)AMSLogKey())
                  {
                    static String._unconditionallyBridgeFromObjectiveC(_:)();
                    sub_100073588();
                  }
                  else
                  {
                    sub_1000734EC();
                  }
                  uint64_t v100 = *(void *)(v0 + 2608);
                  uint64_t v101 = *(void *)(v0 + 2632);
                  sub_10007318C();
                  uint64_t v94 = v67;
                  uint64_t v68 = *(void *)(v0 + 2552);
                  uint64_t v90 = *(void *)(v0 + 2504);
                  uint64_t v93 = *(void *)(v0 + 2480);
                  sub_10007333C();
                  static LogInterpolation.prefix(_:_:)();
                  swift_bridgeObjectRelease();
                  sub_10000D47C(v75);
                  LogInterpolation.init(stringLiteral:)();
                  *(void *)(v0 + 2056) = &type metadata for String;
                  uint64_t v27 = (void *)v103;
                  sub_100072F7C();
                  sub_100073220();
                  sub_1000188C0((uint64_t)v64 + 2 * v68, &qword_10012EFB0);
                  sub_100011EAC();
                  *(void *)(v0 + 1992) = &type metadata for String;
                  sub_1000162E0();
                  sub_10007323C();
                  sub_100073350();
                  Log.default(_:)();
                  swift_bridgeObjectRelease();
                  v94(v90, v93);
                  sub_10007345C();
                  sub_1000162A8();
                  sub_100073474();
                  swift_bridgeObjectRelease();
                  uint64_t v69 = (void *)AccountIdentity.amsAccountIdentity()();
                  Class isa = Date._bridgeToObjectiveC()().super.isa;
                  Class v64 = Date._bridgeToObjectiveC()().super.isa;
                  sub_100005A88(v85, "_setConsumerIdentifier:forKey:inNamespace:accountID:bag:at:serverProvidedAt:", (uint64_t)v102, v100, v71, v72, v101);

                  v65 += 32;
                }
                while (v105 != (uint64_t *)1);
              }
              sub_10000D2BC();

              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              sub_100008600();
              sub_100072F30();
              __asm { BRAA            X1, X16 }
            }
            if (!*(void *)(v39 + 8 * (void)v41))
            {
              while (1)
              {
                uint64_t v28 = (uint64_t *)((char *)v41 + 1);
                if (__OFADD__(v41, 1)) {
                  goto LABEL_48;
                }
                if ((uint64_t)v28 >= v40) {
                  goto LABEL_38;
                }
                uint64_t v41 = (uint64_t *)((char *)v41 + 1);
                if (*(void *)(v39 + 8 * (void)v28)) {
                  goto LABEL_27;
                }
              }
            }
            uint64_t v28 = v41;
          }
        }
      }
LABEL_27:
      sub_100015FAC();
    }
    swift_bridgeObjectRetain();
LABEL_35:
    uint64_t v56 = swift_task_alloc();
    uint64_t v57 = (void *)sub_100073430(v56);
    void *v57 = v58;
    v57[1] = sub_10006FB20;
    sub_100073388();
    sub_100072F30();
    return sub_100071BB4(v59, v60, v61);
  }
  else
  {
    double v104 = *(double *)(v0 + 2384);
    sub_100072F1C();
    uint64_t v2 = *(void *)(v0 + 2456);
    static Log.accountsDataSync.getter();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3D0;
    *(void *)(v0 + 192_Block_object_dispose(&a9, 8) = v1;
    *(void *)(v0 + 1904) = v2;
    swift_retain();
    id v3 = (id)AMSLogKey();
    if (v3)
    {
      uint64_t v4 = v3;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    uint64_t v76 = *(void *)(v0 + 2688);
    uint64_t v10 = *(void *)(v0 + 2680);
    uint64_t v97 = *(void *)(v0 + 2632);
    uint64_t v95 = *(void *)(v0 + 2608);
    sub_10007318C();
    uint64_t v87 = v11;
    uint64_t v81 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v0 + 2576);
    uint64_t v77 = *(void *)(v0 + 2568);
    uint64_t v83 = *(void *)(v0 + 2520);
    uint64_t v86 = *(void *)(v0 + 2480);
    uint64_t v79 = *(void *)(v0 + 2432);
    static LogInterpolation.prefix(_:_:)();
    swift_bridgeObjectRelease();
    sub_10000D47C(v0 + 1904);
    LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)();
    sub_1000732D0(0xD000000000000022, (uint64_t)"Sunsetting metrics identifier for ");
    *(void *)(v0 + 1960) = &type metadata for String;
    *(void *)(v0 + 1936) = v10;
    *(void *)(v0 + 1944) = v76;
    swift_bridgeObjectRetain();
    LogInterpolation.StringInterpolation.appendInterpolation(_:)();
    sub_1000188C0(v0 + 1936, &qword_10012EFB0);
    v12._countAndFlagsBits = sub_10000F8C4();
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v12);
    *(void *)(v0 + 2120) = &type metadata for Double;
    *(double *)(v0 + 2096) = v104;
    LogInterpolation.StringInterpolation.appendInterpolation(_:)();
    sub_1000188C0(v0 + 2096, &qword_10012EFB0);
    sub_1000730D8(0x202Eu);
    LogInterpolation.init(stringInterpolation:)();
    *(void *)(v0 + 2024) = v77;
    uint64_t v13 = sub_1000042C4((uint64_t *)(v0 + 2000));
    v81(v13, v79, v77);
    static LogInterpolation.traceableSensitive(_:)();
    sub_1000188C0(v0 + 2000, &qword_10012EFB0);
    Log.default(_:)();
    swift_bridgeObjectRelease();
    v87(v83, v86);
    uint64_t v14 = self;
    NSString v15 = String._bridgeToObjectiveC()();
    uint64_t v16 = (void *)AccountIdentity.amsAccountIdentity()();
    Class v17 = Date._bridgeToObjectiveC()().super.isa;
    id v18 = [v14 _applyExpiryForKey:v95 inNamespace:v15 accountID:v16 bag:v97 at:v17 consumerIDResetInterval:v104];
    *(void *)(v0 + 2704) = v18;

    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 56) = v0 + 2416;
    *(void *)(v0 + 24) = sub_10007083C;
    *(void *)(v0 + 1736) = swift_continuation_init();
    *(void *)(v0 + 1704) = _NSConcreteStackBlock;
    *(void *)(v0 + 1712) = 0x40000000;
    *(void *)(v0 + 1720) = sub_1000ABBE4;
    *(void *)(v0 + 172_Block_object_dispose(&a9, 8) = &unk_100115060;
    objc_msgSend(v18, "resultWithCompletion:");
    sub_100072F30();
    return _swift_continuation_await(v19);
  }
}

uint64_t sub_10007083C()
{
  sub_100008308();
  sub_10000A43C();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  uint64_t v4 = *(void *)(v3 + 48);
  *(void *)(v1 + 2712) = v4;
  if (v4)
  {
    uint64_t v5 = *(void *)(v1 + 2456);
    id v6 = sub_100070E54;
  }
  else
  {
    uint64_t v7 = *(void *)(v1 + 2456);
    swift_bridgeObjectRelease();
    id v6 = (void (*)())sub_10007095C;
    uint64_t v5 = v7;
  }
  return _swift_task_switch(v6, v5, 0);
}

#error "100070A8C: call analysis failed (funcsize=309)"

void sub_100070E54()
{
  uint64_t v63 = (void *)(v0 + 776);
  uint64_t v76 = (uint64_t *)(v0 + 2192);
  __n128 v82 = (uint64_t *)(v0 + 2224);
  uint64_t v62 = (uint64_t *)(v0 + 2256);
  uint64_t v80 = (void *)(v0 + 2352);
  uint64_t v1 = *(void **)(v0 + 2704);
  uint64_t v2 = *(void *)(v0 + 2560);
  uint64_t v3 = *(void *)(v0 + 2456);
  swift_willThrow();

  static Log.accountsDataSync.getter();
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1000DA410;
  uint64_t v81 = (void *)v4;
  *(void *)(v0 + 2152) = v2;
  *(void *)(v0 + 212_Block_object_dispose(&a9, 8) = v3;
  swift_retain();
  id v5 = (id)AMSLogKey();
  if (v5)
  {
    id v6 = v5;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    sub_1000734E0();
  }
  uint64_t v7 = *(void *)(v0 + 2688);
  uint64_t v8 = *(void *)(v0 + 2680);
  sub_10007318C();
  uint64_t v72 = v9;
  uint64_t v60 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v0 + 2576);
  uint64_t v10 = *(void *)(v0 + 2568);
  uint64_t v11 = *(void **)(v0 + 2552);
  uint64_t v67 = *(void **)(v0 + 2496);
  uint64_t v70 = *(void *)(v0 + 2480);
  uint64_t v59 = *(void *)(v0 + 2432);
  sub_100073298();
  swift_bridgeObjectRelease();
  sub_10000D47C(v0 + 2128);
  LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)();
  sub_1000732D0(0xD000000000000029, (uint64_t)"Failed sunsetting metrics identifier for ");
  *(void *)(v0 + 2184) = &type metadata for String;
  *(void *)(v0 + 2160) = v8;
  *(void *)(v0 + 216_Block_object_dispose(&a9, 8) = v7;
  LogInterpolation.StringInterpolation.appendInterpolation(_:)();
  sub_1000188C0(v0 + 2160, &qword_10012EFB0);
  sub_1000730D8(0x202Cu);
  sub_100073300();
  *(void *)(v0 + 2216) = v10;
  Swift::String v12 = sub_1000042C4(v76);
  v60(v12, v59, v10);
  sub_100073570();
  sub_1000188C0((uint64_t)v76, &qword_10012EFB0);
  LogInterpolation.init(stringLiteral:)();
  swift_getErrorValue();
  *(void *)(v0 + 224_Block_object_dispose(&a9, 8) = *(void *)(v0 + 2360);
  sub_1000042C4(v82);
  sub_10000A430();
  sub_100008000();
  v13();
  static LogInterpolation.safe(_:)();
  sub_1000188C0((uint64_t)v82, &qword_10012EFB0);
  uint64_t v14 = v67;
  Log.error(_:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  v72(v67, v70);
  NSString v15 = *(void **)(v0 + 2672);
  uint64_t v16 = *(uint64_t **)(v0 + 2664);
  sub_100016B3C();
  uint64_t v61 = v17;
  if (!v15) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v18 = sub_1000730BC();
  while (1)
  {
    *(void *)(v0 + 2672) = v15;
    *(void *)(v0 + 2664) = v16;
    sub_1000731F0(v18, v19);
    uint64_t v31 = *(void *)(v30 + 8);
    *(void *)(v0 + 268_Block_object_dispose(&a9, 8) = v31;
    sub_100007E78((uint64_t)v14, v0 + 544, &qword_10012E460);
    sub_100007B74();
    sub_100007E78((uint64_t)v63, v0 + 1472, &qword_10012E460);
    sub_100073078();
    if (v32) {
      break;
    }
    char v33 = *(unsigned char *)(v0 + 1632);
    swift_bridgeObjectRetain();
    sub_1000726A0(v63, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10000667C);
    if ((v33 & 1) == 0) {
      goto LABEL_29;
    }
    uint64_t v81 = v15;
    __n128 v82 = v16;
    uint64_t v34 = *(void *)(v0 + 2560);
    uint64_t v35 = *(void *)(v0 + 2456);
    static Log.accountsDataSync.getter();
    sub_100011650();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3D0;
    *(void *)(v0 + 2344) = v34;
    *(void *)(v0 + 2320) = v35;
    swift_retain();
    id v36 = (id)AMSLogKey();
    uint64_t v80 = v11;
    if (v36)
    {
      uint64_t v37 = v36;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    uint64_t v78 = *(void *)(v0 + 2632);
    uint64_t v75 = *(void (**)(uint64_t, uint64_t))(v0 + 2592);
    uint64_t v68 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v0 + 2576);
    uint64_t v38 = *(void *)(v0 + 2568);
    uint64_t v73 = *(void *)(v0 + 2528);
    uint64_t v74 = *(void *)(v0 + 2480);
    uint64_t v65 = *(void *)(v0 + 2432);
    static LogInterpolation.prefix(_:_:)();
    swift_bridgeObjectRelease();
    sub_10000D47C(v0 + 2320);
    sub_100072FF8();
    v39._countAndFlagsBits = 0xD000000000000020;
    v39._object = v61;
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v39);
    *(void *)(v0 + 2312) = &type metadata for String;
    *(void *)(v0 + 228_Block_object_dispose(&a9, 8) = v11;
    *(void *)(v0 + 2296) = v31;
    swift_bridgeObjectRetain();
    LogInterpolation.StringInterpolation.appendInterpolation(_:)();
    sub_1000188C0(v0 + 2288, &qword_10012EFB0);
    v40._countAndFlagsBits = 0xD00000000000002CLL;
    v40._object = (void *)0x80000001001019A0;
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v40);
    LogInterpolation.init(stringInterpolation:)();
    *(void *)(v0 + 2280) = v38;
    uint64_t v41 = sub_1000042C4(v62);
    v68(v41, v65, v38);
    static LogInterpolation.traceableSensitive(_:)();
    sub_1000188C0((uint64_t)v62, &qword_10012EFB0);
    Log.default(_:)();
    swift_bridgeObjectRelease();
    v75(v73, v74);
    uint64_t v42 = self;
    NSString v43 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v14 = (void *)AccountIdentity.amsAccountIdentity()();
    [v42 _removeStoreForNamespace:v43 accountID:v14 bag:v78];

    if (v15) {
      goto LABEL_5;
    }
LABEL_6:
    if (__OFADD__(v16, 1))
    {
      __break(1u);
LABEL_42:
      __break(1u);
      return;
    }
    uint64_t v20 = sub_100072E28();
    if (v23 == v24) {
      goto LABEL_32;
    }
    uint64_t v25 = v20 + 56;
    uint64_t v16 = v22;
    if (!*(void *)(v20 + 56 + 8 * (void)v22))
    {
      int64_t v26 = v21 >> 6;
      uint64_t v16 = (uint64_t *)((char *)v22 + 1);
      if ((uint64_t)v22 + 1 >= v26) {
        goto LABEL_32;
      }
      if (!*(void *)(v25 + 8 * (void)v16))
      {
        uint64_t v16 = (uint64_t *)((char *)v22 + 2);
        if ((uint64_t)v22 + 2 >= v26) {
          goto LABEL_32;
        }
        if (!*(void *)(v25 + 8 * (void)v16))
        {
          sub_10007351C();
          if (v23 == v24)
          {
LABEL_32:
            uint64_t v49 = *(void *)(v0 + 2624);
            swift_release();
            if (*(void *)(v49 + 16))
            {
              sub_100072FC8();
              Class v64 = self;
              uint64_t v50 = v49 + 56;
              do
              {
                sub_100016804();
                swift_bridgeObjectRetain();
                static Log.accountsDataSync.getter();
                Swift::String v51 = (__n128 *)sub_100072F98();
                sub_100016144(v51, (__n128)xmmword_1000DA410);
                if ((id)AMSLogKey())
                {
                  static String._unconditionallyBridgeFromObjectiveC(_:)();
                  sub_100073588();
                }
                else
                {
                  sub_1000734EC();
                }
                uint64_t v77 = *(void *)(v0 + 2608);
                uint64_t v79 = *(void *)(v0 + 2632);
                sub_10007318C();
                uint64_t v71 = v52;
                uint64_t v66 = *(void *)(v0 + 2504);
                uint64_t v69 = *(void *)(v0 + 2480);
                sub_10007333C();
                static LogInterpolation.prefix(_:_:)();
                swift_bridgeObjectRelease();
                sub_10000D47C(v0 + 2064);
                LogInterpolation.init(stringLiteral:)();
                *(void *)(v0 + 2056) = &type metadata for String;
                NSString v15 = v81;
                sub_100072F7C();
                static LogInterpolation.traceableSensitive(_:)();
                sub_1000188C0(v0 + 2032, &qword_10012EFB0);
                sub_100011EAC();
                *(void *)(v0 + 1992) = &type metadata for String;
                sub_1000162E0();
                static LogInterpolation.traceableSensitive(_:)();
                sub_100073350();
                Log.default(_:)();
                swift_bridgeObjectRelease();
                v71(v66, v69);
                sub_10007345C();
                sub_1000162A8();
                sub_100073474();
                swift_bridgeObjectRelease();
                uint64_t v53 = (void *)AccountIdentity.amsAccountIdentity()();
                Class isa = Date._bridgeToObjectiveC()().super.isa;
                Class v58 = Date._bridgeToObjectiveC()().super.isa;
                sub_100005A88(v64, "_setConsumerIdentifier:forKey:inNamespace:accountID:bag:at:serverProvidedAt:", (uint64_t)v80, v77, v55, v56, v79);

                v50 += 32;
              }
              while (v82 != (uint64_t *)1);
            }
            sub_10000D2BC();

            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            sub_100008600();
            v57();
            return;
          }
          if (!*(void *)(v27 + 8 * (void)v29))
          {
            while (1)
            {
              uint64_t v16 = (uint64_t *)((char *)v29 + 1);
              if (__OFADD__(v29, 1)) {
                goto LABEL_42;
              }
              if ((uint64_t)v16 >= v28) {
                goto LABEL_32;
              }
              uint64_t v29 = (uint64_t *)((char *)v29 + 1);
              if (*(void *)(v27 + 8 * (void)v16)) {
                goto LABEL_21;
              }
            }
          }
          uint64_t v16 = v29;
        }
      }
    }
LABEL_21:
    sub_100015FAC();
  }
  swift_bridgeObjectRetain();
LABEL_29:
  uint64_t v44 = swift_task_alloc();
  char v45 = (void *)sub_100073430(v44);
  *char v45 = v46;
  v45[1] = sub_10006FB20;
  uint64_t v47 = sub_100073388();
  sub_100071BB4(v47, v48, v31);
}

id sub_100071800(uint64_t a1, uint64_t a2, char a3, char a4)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v7 = [(id)swift_getObjCClassFromMetadata() keyWithName:v6 crossDeviceSync:a3 & 1 isActiveITunesAccountRequired:a4 & 1];

  return v7;
}

uint64_t sub_10007187C(uint64_t a1)
{
  *(void *)(v1 + 12_Block_object_dispose(&a9, 8) = a1;
  return sub_100072F70((uint64_t)sub_100071894);
}

uint64_t sub_100071894()
{
  sub_100005AEC();
  sub_100015F78();
  NSString v5 = sub_1000732B0();
  id v6 = [v2 dictionaryForKey:v5];

  id v7 = [v6 valuePromise];
  v0[17] = v7;

  v0[2] = v0;
  v0[7] = v4;
  v0[3] = sub_1000719E0;
  uint64_t v8 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10008FFC0;
  v0[13] = &unk_100115090;
  v0[14] = v8;
  [v7 resultWithCompletion:v3];
  return _swift_continuation_await(v1);
}

uint64_t sub_1000719E0()
{
  sub_100008308();
  sub_1000082E0();
  sub_10000A43C();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  uint64_t v4 = *(void *)(v3 + 48);
  *(void *)(v1 + 144) = v4;
  if (v4) {
    NSString v5 = sub_100071B38;
  }
  else {
    NSString v5 = sub_100071AC4;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100071AC4()
{
  sub_100008308();
  uint64_t v1 = *(void **)(v0 + 120);

  uint64_t v2 = sub_10007389C(v1);
  uint64_t v3 = *(uint64_t (**)(void *))(v0 + 8);
  return v3(v2);
}

uint64_t sub_100071B38()
{
  sub_100009C64();
  uint64_t v1 = *(void **)(v0 + 136);
  swift_willThrow();

  swift_errorRelease();
  uint64_t v2 = *(uint64_t (**)(void *))(v0 + 8);
  return v2(&_swiftEmptySetSingleton);
}

uint64_t sub_100071BB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[17] = a2;
  v3[18] = a3;
  v3[16] = a1;
  return sub_100072F70((uint64_t)sub_100071BD0);
}

uint64_t sub_100071BD0()
{
  sub_100005AEC();
  sub_100015F78();
  NSString v5 = sub_1000732B0();
  id v6 = [v2 dictionaryForKey:v5];

  id v7 = [v6 valuePromise];
  v0[19] = v7;

  v0[2] = v0;
  v0[7] = v4;
  v0[3] = sub_100071D1C;
  uint64_t v8 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10008FFC0;
  v0[13] = &unk_100115078;
  v0[14] = v8;
  [v7 resultWithCompletion:v3];
  return _swift_continuation_await(v1);
}

uint64_t sub_100071D1C()
{
  sub_100008308();
  sub_1000082E0();
  sub_10000A43C();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  uint64_t v4 = *(void *)(v3 + 48);
  *(void *)(v1 + 160) = v4;
  if (v4) {
    NSString v5 = sub_100071E90;
  }
  else {
    NSString v5 = sub_100071E00;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100071E00()
{
  sub_100009C64();
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void **)(v0 + 120);

  uint64_t v4 = sub_1000736B4(v3, v2, v1);
  char v6 = v5;

  uint64_t v7 = *(uint64_t (**)(uint64_t, void))(v0 + 8);
  return v7(v4, v6 & 1);
}

uint64_t sub_100071E90()
{
  sub_100009C64();
  uint64_t v1 = *(void **)(v0 + 152);
  swift_willThrow();

  swift_errorRelease();
  uint64_t v2 = *(uint64_t (**)(void, uint64_t))(v0 + 8);
  return v2(0, 1);
}

uint64_t sub_100071F0C()
{
  sub_1000104A8(v0 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_state, (void (*)(void))type metadata accessor for AccountDataState);
  type metadata accessor for AccountIdentity();
  sub_1000082F8();
  sub_1000084F8();
  v1();
  sub_10000D47C(v0 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_account);
  sub_10000D47C(v0 + OBJC_IVAR____TtC12amsaccountsd22AccountDataAccessActor_metrics);
  swift_unknownObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_100071FC0()
{
  sub_100071F0C();
  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_100071FEC()
{
  return type metadata accessor for AccountDataAccessActor();
}

uint64_t type metadata accessor for AccountDataAccessActor()
{
  uint64_t result = qword_10012E240;
  if (!qword_10012E240) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10007203C()
{
  uint64_t result = type metadata accessor for AccountDataState(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for AccountIdentity();
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

uint64_t sub_10007213C()
{
  return v0;
}

uint64_t sub_100072148()
{
  return sub_10007213C();
}

uint64_t sub_100072164()
{
  return sub_100072DE8(*v0, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

NSString sub_10007219C@<X0>(void *a1@<X8>)
{
  NSString result = sub_100072DB0();
  *a1 = result;
  return result;
}

uint64_t sub_1000721C4()
{
  return sub_100072DE8(*v0, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_1000721F4()
{
  return sub_1000724CC();
}

Swift::Int sub_1000721FC()
{
  return sub_100085140();
}

uint64_t sub_100072204()
{
  return sub_1000B44C0();
}

uint64_t sub_100072210@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_100072258@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = j___sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100072288(uint64_t a1)
{
  uint64_t v2 = sub_100009088(&qword_10012E498, (void (*)(uint64_t))type metadata accessor for AMSAccountFlag);
  uint64_t v3 = sub_100009088(&qword_10012E508, (void (*)(uint64_t))type metadata accessor for AMSAccountFlag);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

void sub_100072344(uint64_t a1, void *a2)
{
  type metadata accessor for AMSAccountFlag();
  sub_10001065C(0, (unint64_t *)&qword_10012E490);
  sub_100009088(&qword_10012E498, (void (*)(uint64_t))type metadata accessor for AMSAccountFlag);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a2, "ams_setAccountFlags:", isa);
}

void sub_10007241C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setUsername:v4];
}

void sub_100072474(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  objc_msgSend(a3, "ams_setCreditsString:", v4);
}

uint64_t sub_1000724CC()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100072520(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t *sub_100072558(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

void sub_1000725BC(void *a1)
{
}

uint64_t sub_1000725C4(uint64_t a1)
{
  return a1;
}

void type metadata accessor for AMSAccountFlag()
{
  if (!qword_10012E4E8)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_10012E4E8);
    }
  }
}

uint64_t sub_10007263C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccountDataState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void *sub_1000726A0(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22],
    a1[23],
    a1[24],
    a1[25],
    a1[26],
    a1[27],
    a1[28]);
  return a1;
}

uint64_t sub_10007271C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000727E0()
{
  uint64_t v1 = type metadata accessor for AccountDataServerRequest(0);
  sub_1000082C8(v1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = type metadata accessor for Date();
  sub_10000BFC4();
  uint64_t v8 = v7;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = *(void *)(v10 + 64);
  swift_unknownObjectRelease();
  swift_release();
  type metadata accessor for AccountIdentity.DSID();
  sub_1000082F8();
  sub_1000084F8();
  v12();
  uint64_t v13 = v3 | v9 | 7;
  unint64_t v14 = (((v5 + ((v3 + 40) & ~v3) + 7) & 0xFFFFFFFFFFFFFFF8) + v9 + 48) & ~v9;
  uint64_t v15 = v14 + v11;
  (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v0 + v14, v6);
  return _swift_deallocObject(v0, v15, v13);
}

uint64_t sub_100072910()
{
  uint64_t v1 = type metadata accessor for AccountDataServerRequest(0);
  sub_1000082C8(v1);
  uint64_t v2 = type metadata accessor for Date();
  sub_1000164AC(v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100008208;
  sub_100073264();
  return sub_10006B490(v4, v5, v6, v7);
}

uint64_t sub_100072A3C()
{
  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100072A4C()
{
  uint64_t v1 = type metadata accessor for Date();
  sub_10000BFC4();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (v6 + 96) & ~v6;
  uint64_t v8 = v7 + *(void *)(v5 + 64);
  uint64_t v9 = v6 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v7, v1);
  return _swift_deallocObject(v0, v8, v9);
}

uint64_t sub_100072AF8()
{
  uint64_t v2 = type metadata accessor for Date();
  sub_1000164AC(v2);
  uint64_t v4 = v0 + 48;
  uint64_t v5 = v0 + ((*(unsigned __int8 *)(v3 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  char v6 = *(unsigned char *)(v0 + 40);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_100008208;
  sub_100073264();
  return sub_100069640(v8, v9, v10, v11, v6, v4, v5);
}

uint64_t sub_100072BE0()
{
  return sub_100009088(&qword_10012E4F0, (void (*)(uint64_t))type metadata accessor for AMSAccountFlag);
}

uint64_t sub_100072C28()
{
  return sub_100009088(&qword_10012E4F8, (void (*)(uint64_t))type metadata accessor for AMSAccountFlag);
}

uint64_t sub_100072C70()
{
  return sub_100009088(&qword_10012E500, (void (*)(uint64_t))type metadata accessor for AMSAccountFlag);
}

uint64_t sub_100072CB8(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_100072D38(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

NSString sub_100072DB0()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100072DE8(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = a2(v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_100072E28()
{
  return *(void *)(v0 + 2656);
}

uint64_t sub_100072E6C()
{
  return static LogInterpolation.prefix(_:_:)();
}

uint64_t sub_100072EB8()
{
  return swift_task_dealloc();
}

uint64_t sub_100072EDC()
{
  return 0x206C61636F6C202CLL;
}

uint64_t sub_100072F50()
{
  return 0x636E7973206F7420;
}

uint64_t sub_100072F70(uint64_t a1)
{
  return _swift_task_switch(a1, 0, 0);
}

uint64_t sub_100072F7C()
{
  *(void *)(v0 + 2032) = v2;
  *(void *)(v0 + 2040) = v1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100072F98()
{
  return swift_allocObject();
}

uint64_t sub_100072FD8@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(v1 + a1);
}

uint64_t sub_100072FF8()
{
  return LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t sub_100073014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long a15)
{
  *(_OWORD *)(a1 + 16) = a15;
  *(void *)(v16 + 2344) = v17;
  *(void *)(v16 + 2320) = v15;
  return swift_retain();
}

uint64_t sub_100073040()
{
  return 0x706D65747461202CLL;
}

uint64_t sub_10007305C()
{
  return 0x797269707865202CLL;
}

uint64_t sub_100073078()
{
  return sub_100018644(v0);
}

uint64_t sub_100073094()
{
  return swift_allocObject();
}

uint64_t sub_1000730BC()
{
  return *(void *)(v0 + 2656);
}

void sub_1000730D8(unsigned __int16 a1)
{
  uint64_t v2 = a1 | 0x69746E6564690000;
  unint64_t v3 = 0xEC0000003D207974;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(*(Swift::String *)&v2);
}

uint64_t sub_100073100()
{
  return *(void *)(v0 + 2656);
}

uint64_t sub_10007313C()
{
  return LogInterpolation.init(stringLiteral:)();
}

uint64_t sub_100073160()
{
  return v0;
}

uint64_t sub_100073170()
{
  return swift_allocObject();
}

void sub_100073198()
{
  *(void *)(v2 + v0) = *(void *)(v1 - 256);
}

uint64_t sub_1000731A4()
{
  return *(void *)(v0 + 2632);
}

uint64_t sub_1000731BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10000F620(a1, v2 + a2, v3);
}

uint64_t sub_1000731F0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 + 2680) = *(void *)(*(void *)(result + 48) + 16 * a2);
  return result;
}

uint64_t sub_100073220()
{
  return static LogInterpolation.traceableSensitive(_:)();
}

uint64_t sub_10007323C()
{
  return static LogInterpolation.traceableSensitive(_:)();
}

uint64_t sub_100073278()
{
  return static LogInterpolation.prefix(_:_:)();
}

uint64_t sub_100073298()
{
  return static LogInterpolation.prefix(_:_:)();
}

NSString sub_1000732B0()
{
  return String._bridgeToObjectiveC()();
}

void sub_1000732D0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (a2 - 32) | 0x8000000000000000;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(*(Swift::String *)&a1);
}

void sub_1000732E8()
{
}

uint64_t sub_100073300()
{
  return LogInterpolation.init(stringInterpolation:)();
}

uint64_t sub_100073318()
{
  return LogInterpolation.StringInterpolation.appendInterpolation(_:)();
}

void sub_10007333C()
{
  uint64_t v2 = *(void *)(v0 + 2448);
  *(void *)(v1 - 144) = *(void *)(v0 + 2432);
  *(void *)(v1 - 136) = v2;
}

uint64_t sub_100073350()
{
  return sub_1000188C0(v1, v0);
}

uint64_t sub_100073388()
{
  return *(void *)(v0 + 2632);
}

uint64_t *sub_1000733C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t *a19)
{
  *(void *)(v20 + 2280) = v19;
  return sub_1000042C4(a19);
}

uint64_t sub_1000733F8()
{
  return sub_1000188C0(v1 - 112, v0);
}

void sub_100073410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  unint64_t v14 = 0xD00000000000002CLL;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(*(Swift::String *)&v14);
}

uint64_t sub_100073430(uint64_t result)
{
  *(void *)(v1 + 2696) = result;
  return result;
}

uint64_t sub_10007343C()
{
  return swift_allocObject();
}

NSString sub_10007345C()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_100073474()
{
  return swift_bridgeObjectRelease();
}

void sub_10007348C()
{
  sub_100007B74();
}

uint64_t sub_1000734AC()
{
  return v0;
}

uint64_t sub_1000734C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  return sub_100007E78(v22, a22, v23);
}

void sub_100073504()
{
  uint64_t v1 = 0;
  unint64_t v2 = 0xE000000000000000;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(*(Swift::String *)&v1);
}

unint64_t sub_10007353C()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_100073550()
{
  return LogInterpolation.init(stringLiteral:)();
}

uint64_t sub_100073570()
{
  return static LogInterpolation.traceableSensitive(_:)();
}

void sub_100073588()
{
}

double sub_1000735A0()
{
  double result = 0.0;
  *(_OWORD *)(v0 - 144) = 0u;
  *(_OWORD *)(v0 - 12_Block_object_dispose(&a9, 8) = 0u;
  return result;
}

unint64_t *sub_1000735AC(uint64_t a1, uint64_t a2)
{
  int64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    sub_1000B585C(0, v3, 0);
    uint64_t v5 = (uint64_t *)(a1 + 56);
    do
    {
      uint64_t v7 = *(v5 - 1);
      uint64_t v6 = *v5;
      unint64_t v8 = _swiftEmptyArrayStorage[2];
      unint64_t v9 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain();
      if (v8 >= v9 >> 1) {
        sub_1000B585C((void *)(v9 > 1), v8 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v8 + 1;
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage[2 * v8];
      *((void *)v10 + 4) = v7;
      *((void *)v10 + 5) = v6;
      v5 += 4;
      --v3;
    }
    while (v3);
  }
  uint64_t v11 = sub_100004B3C((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRetain();
  Swift::String v12 = sub_100073B2C(v11, a2);
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1000736B4(void *a1, uint64_t a2, uint64_t a3)
{
  *(void *)&v7[0] = a2;
  *((void *)&v7[0] + 1) = a3;
  swift_bridgeObjectRetain_n();
  id v4 = objc_msgSend(a1, "__swift_objectForKeyedSubscript:", _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  sub_100073834((uint64_t)v7, (uint64_t)&v8);
  if (!v9)
  {
    swift_bridgeObjectRelease();
LABEL_10:
    sub_100016B90((uint64_t)&v8);
    goto LABEL_12;
  }
  sub_100011D80(&qword_10012E570);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  sub_1000B3B04(0xD000000000000010, 0x8000000100101DC0, v6, &v8);
  swift_bridgeObjectRelease();
  if (!v9) {
    goto LABEL_10;
  }
  if (swift_dynamicCast())
  {
    *(double *)&uint64_t result = (double)*(uint64_t *)&v7[0];
    return result;
  }
LABEL_12:
  *(double *)&uint64_t result = 0.0;
  return result;
}

uint64_t sub_100073834(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100011D80(&qword_10012EFB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *sub_10007389C(void *a1)
{
  uint64_t v15 = &_swiftEmptySetSingleton;
  id v2 = [a1 allKeys];
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    for (uint64_t i = v3 + 32; ; i += 32)
    {
      sub_1000115F4(i, (uint64_t)&v13);
      if (swift_dynamicCast())
      {
        long long v6 = v12[0];
        swift_bridgeObjectRetain_n();
        id v7 = objc_msgSend(a1, "__swift_objectForKeyedSubscript:", _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        if (v7)
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          memset(v12, 0, sizeof(v12));
        }
        sub_100073834((uint64_t)v12, (uint64_t)&v13);
        if (!*((void *)&v14 + 1))
        {
          swift_bridgeObjectRelease_n();
LABEL_19:
          sub_100016B90((uint64_t)&v13);
          goto LABEL_21;
        }
        sub_100011D80(&qword_10012E570);
        if (swift_dynamicCast())
        {
          swift_bridgeObjectRelease();
          if (*(void *)(v11 + 16) && (unint64_t v8 = sub_10001169C(0xD000000000000010, 0x8000000100101DC0), (v9 & 1) != 0))
          {
            sub_1000115F4(*(void *)(v11 + 56) + 32 * v8, (uint64_t)&v13);
          }
          else
          {
            long long v13 = 0u;
            long long v14 = 0u;
          }
          swift_bridgeObjectRelease();
          if (*((void *)&v14 + 1))
          {
            if (swift_dynamicCast()) {
              sub_10000BE2C((Swift::Int *)&v13, v6, *((Swift::Int *)&v6 + 1));
            }
            swift_bridgeObjectRelease();
            goto LABEL_21;
          }
          swift_bridgeObjectRelease();
          goto LABEL_19;
        }
        swift_bridgeObjectRelease_n();
      }
LABEL_21:
      if (!--v4)
      {
        swift_bridgeObjectRelease();
        return v15;
      }
    }
  }
  swift_bridgeObjectRelease();
  return &_swiftEmptySetSingleton;
}

unint64_t *sub_100073B2C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) <= *(void *)(a2 + 16) >> 3)
  {
    sub_100073B90(a1);
    return (unint64_t *)a2;
  }
  else
  {
    return sub_100073D3C(a1, a2);
  }
}

uint64_t sub_100073B90(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  if (!v6) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    long long v14 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    swift_bridgeObjectRetain();
    sub_1000B4930(v15, v16);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v11 >= v7) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v12 = *(void *)(v3 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v12 = *(void *)(v3 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v6 = (v12 - 1) & v12;
  }
  int64_t v13 = v11 + 4;
  if (v13 < v7)
  {
    unint64_t v12 = *(void *)(v3 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        int64_t v8 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        ++v13;
        if (v12) {
          goto LABEL_21;
        }
      }
    }
    int64_t v8 = v13;
    goto LABEL_21;
  }
LABEL_24:
  return swift_release();
}

unint64_t *sub_100073D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v37 = a1 + 56;
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v35 = ~v5;
    if (-v5 < 64) {
      uint64_t v6 = ~(-1 << -(char)v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & v4;
    int64_t v36 = (unint64_t)(63 - v5) >> 6;
    uint64_t v8 = a2 + 56;
    swift_bridgeObjectRetain();
    int64_t v9 = 0;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v11 = v10 | (v9 << 6);
    while (1)
    {
      uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v19 = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v21 = v19 & ~v20;
      if ((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21)) {
        break;
      }
LABEL_37:
      swift_bridgeObjectRelease();
      if (v7) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v12 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
        goto LABEL_50;
      }
      if (v12 >= v36) {
        goto LABEL_48;
      }
      unint64_t v13 = *(void *)(v37 + 8 * v12);
      int64_t v14 = v9 + 1;
      if (!v13)
      {
        int64_t v14 = v9 + 2;
        if (v9 + 2 >= v36) {
          goto LABEL_48;
        }
        unint64_t v13 = *(void *)(v37 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v9 + 3;
          if (v9 + 3 >= v36) {
            goto LABEL_48;
          }
          unint64_t v13 = *(void *)(v37 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v9 + 4;
            if (v9 + 4 >= v36) {
              goto LABEL_48;
            }
            unint64_t v13 = *(void *)(v37 + 8 * v14);
            if (!v13)
            {
              int64_t v15 = v9 + 5;
              if (v9 + 5 >= v36)
              {
LABEL_48:
                sub_100017254();
                return (unint64_t *)v2;
              }
              unint64_t v13 = *(void *)(v37 + 8 * v15);
              if (!v13)
              {
                while (1)
                {
                  int64_t v14 = v15 + 1;
                  if (__OFADD__(v15, 1)) {
                    break;
                  }
                  if (v14 >= v36) {
                    goto LABEL_48;
                  }
                  unint64_t v13 = *(void *)(v37 + 8 * v14);
                  ++v15;
                  if (v13) {
                    goto LABEL_22;
                  }
                }
LABEL_50:
                __break(1u);
              }
              int64_t v14 = v9 + 5;
            }
          }
        }
      }
LABEL_22:
      unint64_t v7 = (v13 - 1) & v13;
      unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
      int64_t v9 = v14;
    }
    uint64_t v22 = *(void *)(v2 + 48);
    char v23 = (void *)(v22 + 16 * v21);
    BOOL v24 = *v23 == v18 && v23[1] == v17;
    if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
      uint64_t v38 = a1;
      uint64_t v39 = v37;
      uint64_t v40 = v35;
      int64_t v41 = v9;
      unint64_t v42 = v7;
    }
    else
    {
      uint64_t v25 = ~v20;
      do
      {
        unint64_t v21 = (v21 + 1) & v25;
        if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
          goto LABEL_37;
        }
        int64_t v26 = (void *)(v22 + 16 * v21);
        BOOL v27 = *v26 == v18 && v26[1] == v17;
      }
      while (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
      uint64_t v38 = a1;
      uint64_t v39 = v37;
      uint64_t v40 = v35;
      int64_t v41 = v9;
      unint64_t v42 = v7;
      uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
    }
    char v29 = *(unsigned char *)(v2 + 32);
    unint64_t v30 = (unint64_t)((1 << v29) + 63) >> 6;
    size_t v31 = 8 * v30;
    if ((v29 & 0x3Fu) < 0xE
      || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v31);
      char v32 = sub_1000741B4((unint64_t *)((char *)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0)), v30, v2, v21, &v38);
      swift_release();
      sub_100017254();
    }
    else
    {
      char v33 = (void *)swift_slowAlloc();
      memcpy(v33, (const void *)(v2 + 56), v31);
      char v32 = sub_1000741B4((unint64_t *)v33, v30, v2, v21, &v38);
      swift_release();
      sub_100017254();
      swift_slowDealloc();
    }
    return v32;
  }
  else
  {
    swift_release();
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

unint64_t *sub_1000741B4(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v38 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v39 = a3 + 56;
  while (2)
  {
    uint64_t v37 = v8;
    do
    {
      while (1)
      {
        int64_t v9 = a5[3];
        unint64_t v10 = a5[4];
        if (v10)
        {
          uint64_t v11 = (v10 - 1) & v10;
          unint64_t v12 = __clz(__rbit64(v10)) | (v9 << 6);
        }
        else
        {
          int64_t v13 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            goto LABEL_46;
          }
          int64_t v14 = (unint64_t)(a5[2] + 64) >> 6;
          int64_t v15 = a5[3];
          if (v13 >= v14) {
            goto LABEL_44;
          }
          uint64_t v16 = a5[1];
          unint64_t v17 = *(void *)(v16 + 8 * v13);
          if (!v17)
          {
            int64_t v15 = v9 + 1;
            if (v9 + 2 >= v14) {
              goto LABEL_44;
            }
            unint64_t v17 = *(void *)(v16 + 8 * (v9 + 2));
            if (v17)
            {
              int64_t v13 = v9 + 2;
            }
            else
            {
              int64_t v15 = v9 + 2;
              if (v9 + 3 >= v14) {
                goto LABEL_44;
              }
              unint64_t v17 = *(void *)(v16 + 8 * (v9 + 3));
              if (v17)
              {
                int64_t v13 = v9 + 3;
              }
              else
              {
                int64_t v13 = v9 + 4;
                int64_t v15 = v9 + 3;
                if (v9 + 4 >= v14) {
                  goto LABEL_44;
                }
                unint64_t v17 = *(void *)(v16 + 8 * v13);
                if (!v17)
                {
                  int64_t v18 = v9 + 5;
                  while (v18 < v14)
                  {
                    unint64_t v17 = *(void *)(v16 + 8 * v18++);
                    if (v17)
                    {
                      int64_t v13 = v18 - 1;
                      goto LABEL_20;
                    }
                  }
                  int64_t v15 = v14 - 1;
LABEL_44:
                  a5[3] = v15;
                  a5[4] = 0;
                  swift_retain();
                  return (unint64_t *)sub_100074490(v38, a2, v37, a3);
                }
              }
            }
          }
LABEL_20:
          uint64_t v11 = (v17 - 1) & v17;
          unint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
          int64_t v9 = v13;
        }
        Swift::Int v19 = (uint64_t *)(*(void *)(*a5 + 48) + 16 * v12);
        uint64_t v21 = *v19;
        uint64_t v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v22 = Hasher._finalize()();
        uint64_t v23 = -1 << *(unsigned char *)(a3 + 32);
        unint64_t v24 = v22 & ~v23;
        unint64_t v25 = v24 >> 6;
        uint64_t v26 = 1 << v24;
        if (((1 << v24) & *(void *)(v39 + 8 * (v24 >> 6))) != 0) {
          break;
        }
LABEL_38:
        uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
      }
      uint64_t v27 = *(void *)(a3 + 48);
      uint64_t v28 = (void *)(v27 + 16 * v24);
      BOOL v29 = *v28 == v21 && v28[1] == v20;
      if (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v31 = ~v23;
        for (unint64_t i = v24 + 1; ; unint64_t i = v33 + 1)
        {
          unint64_t v33 = i & v31;
          if (((*(void *)(v39 + (((i & v31) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v31)) & 1) == 0) {
            break;
          }
          uint64_t v34 = (void *)(v27 + 16 * v33);
          BOOL v35 = *v34 == v21 && v34[1] == v20;
          if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
            unint64_t v25 = v33 >> 6;
            uint64_t v26 = 1 << v33;
            goto LABEL_28;
          }
        }
        goto LABEL_38;
      }
      uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
LABEL_28:
      unint64_t v30 = v38[v25];
      v38[v25] = v30 & ~v26;
    }
    while ((v26 & v30) == 0);
    uint64_t v8 = v37 - 1;
    if (__OFSUB__(v37, 1))
    {
LABEL_46:
      __break(1u);
      return result;
    }
    if (v37 != 1) {
      continue;
    }
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

uint64_t sub_100074490(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_35:
    swift_release();
    return (uint64_t)v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_100011D80(&qword_10012E578);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = (unsigned char *)result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_35;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_35;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_35;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    unint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << v8[32];
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t v28 = (void *)(*((void *)v8 + 6) + 16 * v23);
    *uint64_t v28 = v18;
    v28[1] = v19;
    ++*((void *)v8 + 2);
    if (__OFSUB__(v5--, 1)) {
      goto LABEL_38;
    }
    if (!v5) {
      goto LABEL_35;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_35;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_35;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100074720(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for AccountDataServerResponse(0);
  __chkstk_darwin(v10 - 8);
  sub_100008338();
  uint64_t v13 = v12 - v11;
  sub_100011D80(&qword_10012E4A8);
  sub_1000082F8();
  __chkstk_darwin(v14);
  sub_100008338();
  unint64_t v17 = (uint64_t *)(v16 - v15);
  sub_100006374(a1, v16 - v15, &qword_10012E4A8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = *v17;
    sub_1000087B0(a4, a4[3]);
    sub_100011D80(&qword_10012E580);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1000DA3F0;
    sub_10000F9BC();
    *(void *)(v20 + 32) = 0xD000000000000012;
    *(void *)(v20 + 40) = v21;
    *(void *)(inited + 4_Block_object_dispose(&a9, 8) = sub_100074E58(a2, a3);
    *(void *)(inited + 72) = &type metadata for UInt;
    *(void *)(inited + 80) = 0xD000000000000012;
    sub_10000F9BC();
    *(void *)(inited + 8_Block_object_dispose(&a9, 8) = v22;
    char v23 = sub_100075050(a2, a3, a5);
    *(void *)(inited + 120) = &type metadata for Bool;
    *(unsigned char *)(inited + 96) = v23 & 1;
    uint64_t v24 = Dictionary.init(dictionaryLiteral:)();
    if (qword_10012E1F8 != -1) {
      swift_once();
    }
    uint64_t v25 = qword_100137168;
    swift_errorRetain();
    uint64_t v26 = sub_1000B5B9C(v18, v24);
    swift_errorRelease();
    strcpy((char *)&v37, "xp_amp_ams_log");
    HIBYTE(v37) = -18;
    *(void *)&long long v38 = 0xD000000000000019;
    *((void *)&v38 + 1) = 0x8000000100101E40;
    uint64_t v39 = v26;
    uint64_t v40 = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v27 = sub_100008348();
    v28(v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_1000759C0((uint64_t)v17, v13, (void (*)(void))type metadata accessor for AccountDataServerResponse);
    uint64_t v30 = sub_1000087B0(a4, a4[3]);
    sub_100074D14((uint64_t)v30, a2, a3, a5);
    uint64_t v31 = sub_100008348();
    v32(v31);
    long long v36 = v37;
    sub_10000A378((uint64_t)&v36);
    long long v35 = v38;
    sub_10000A378((uint64_t)&v35);
    uint64_t v34 = v39;
    sub_10000A3A4((uint64_t)&v34);
    uint64_t v33 = v40;
    sub_10000A3A4((uint64_t)&v33);
    return sub_100075A14(v13, (void (*)(void))type metadata accessor for AccountDataServerResponse);
  }
}

void sub_100074A60()
{
  qword_100137168 = (uint64_t)&off_100114D00;
}

uint64_t sub_100074A74(uint64_t a1)
{
  sub_100011D80(&qword_10012E580);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000DA3F0;
  sub_10000F9BC();
  *(void *)(v3 + 32) = 0xD000000000000012;
  *(void *)(v3 + 40) = v4;
  *(void *)(inited + 4_Block_object_dispose(&a9, 8) = sub_100074BC0(a1);
  *(void *)(inited + 72) = &type metadata for UInt;
  strcpy((char *)(inited + 80), "requestReason");
  *(_WORD *)(inited + 94) = -4864;
  uint64_t v5 = String.init<A>(describing:)();
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 96) = v5;
  *(void *)(inited + 104) = v6;
  Dictionary.init(dictionaryLiteral:)();
  if (qword_10012E1F8 != -1) {
    swift_once();
  }
  sub_10000BFE0();
  return sub_10000F6D8(v7, 0xD000000000000018);
}

BOOL sub_100074BC0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccountDataServerRequest.Put(0);
  sub_1000082F8();
  __chkstk_darwin(v3);
  sub_100008338();
  uint64_t v6 = v5 - v4;
  type metadata accessor for AccountDataServerRequest(0);
  sub_1000082F8();
  __chkstk_darwin(v7);
  sub_100008338();
  uint64_t v10 = v9 - v8;
  sub_10007595C(a1, v9 - v8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_100075A14(v10, (void (*)(void))type metadata accessor for AccountDataServerRequest);
    return 0;
  }
  else
  {
    sub_1000759C0(v10, v6, (void (*)(void))type metadata accessor for AccountDataServerRequest.Put);
    uint64_t v12 = (unsigned __int8 *)(v6 + *(int *)(v2 + 24));
    int v13 = *v12;
    int v14 = v12[1];
    sub_100075A14(v6, (void (*)(void))type metadata accessor for AccountDataServerRequest.Put);
    uint64_t v15 = 1;
    if (v13 != 2) {
      uint64_t v15 = 2;
    }
    if (v14 == 2) {
      return v13 != 2;
    }
    else {
      return v15;
    }
  }
}

uint64_t sub_100074D14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100011D80(&qword_10012E580);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000DA3F0;
  sub_10000F9BC();
  *(void *)(v8 + 32) = 0xD000000000000012;
  *(void *)(v8 + 40) = v9;
  *(void *)(inited + 4_Block_object_dispose(&a9, 8) = sub_100074E58(a2, a3);
  *(void *)(inited + 72) = &type metadata for UInt;
  *(void *)(inited + 80) = 0xD000000000000012;
  sub_10000F9BC();
  *(void *)(inited + 8_Block_object_dispose(&a9, 8) = v10;
  char v11 = sub_100075050(a2, a3, a4);
  *(void *)(inited + 120) = &type metadata for Bool;
  *(unsigned char *)(inited + 96) = v11 & 1;
  Dictionary.init(dictionaryLiteral:)();
  if (qword_10012E1F8 != -1) {
    swift_once();
  }
  sub_10000BFE0();
  return sub_10000F6D8(v12, 0xD000000000000019);
}

uint64_t sub_100074E58(uint64_t a1, uint64_t a2)
{
  sub_100007E78(a1, (uint64_t)v13, &qword_10012E460);
  sub_100007E78((uint64_t)v13, (uint64_t)__src, &qword_10012E460);
  if (sub_100018644((uint64_t)__src) == 1)
  {
    uint64_t v3 = Dictionary.init(dictionaryLiteral:)();
  }
  else
  {
    memcpy(__dst, __src, sizeof(__dst));
    sub_100007E78((uint64_t)v13, (uint64_t)v11, &qword_10012E460);
    sub_1000758A8((uint64_t)v11);
    uint64_t v3 = sub_1000B0EA4();
    sub_1000185D0(v13);
  }
  sub_100007E78(a2, (uint64_t)v9, &qword_10012E460);
  sub_100007E78((uint64_t)v9, (uint64_t)v10, &qword_10012E460);
  if (sub_100018644((uint64_t)v10) == 1)
  {
    uint64_t v4 = Dictionary.init(dictionaryLiteral:)();
  }
  else
  {
    memcpy(v11, v10, sizeof(v11));
    sub_100007E78((uint64_t)v9, (uint64_t)v8, &qword_10012E460);
    sub_1000758A8((uint64_t)v8);
    uint64_t v4 = sub_1000B0EA4();
    sub_1000185D0(v9);
  }
  sub_100011D80((uint64_t *)&unk_10012FDC0);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1000DA680;
  *(void *)(v5 + 32) = 0xD000000000000013;
  *(void *)(v5 + 40) = 0x8000000100101E60;
  uint64_t v6 = sub_1000753A4(v3, v4, (void *)v5);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_100075864();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_100075050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100011D80(&qword_10012E458);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  char v11 = &v14[-v10];
  uint64_t v12 = type metadata accessor for AccountDataState(0);
  sub_100006374(a1 + *(int *)(v12 + 20), (uint64_t)v11, &qword_10012E458);
  uint64_t v16 = a3;
  LODWORD(a1) = sub_1000751E4((void (*)(uint64_t *__return_ptr, char *))sub_100075A6C);
  sub_100018910((uint64_t)v11, &qword_10012E458);
  LODWORD(v11) = (a1 == 2) | a1;
  sub_100006374(a2 + *(int *)(v12 + 20), (uint64_t)v9, &qword_10012E458);
  uint64_t v15 = a3;
  LODWORD(a1) = sub_1000751E4((void (*)(uint64_t *__return_ptr, char *))sub_100075828);
  sub_100018910((uint64_t)v9, &qword_10012E458);
  return (v11 ^ ((a1 == 2) | a1)) & 1;
}

uint64_t sub_1000751E4(void (*a1)(uint64_t *__return_ptr, char *))
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100011D80(&qword_10012E458);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006374(v1, (uint64_t)v10, &qword_10012E458);
  if (sub_10001044C((uint64_t)v10, 1, v4) == 1) {
    return 2;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
  a1(&v13, v7);
  if (v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v13;
}

uint64_t sub_1000753A4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v33 = a2 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a2 + 64);
  int64_t v34 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v35 = 0;
  int64_t v37 = 0;
  long long v38 = a3;
  char v32 = a3 + 9;
  uint64_t v9 = &qword_10012E590;
  while (v7)
  {
    unint64_t v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v11 = v10 | (v37 << 6);
LABEL_6:
    uint64_t v12 = *(void *)(a2 + 56);
    uint64_t v13 = (void *)(*(void *)(a2 + 48) + 16 * v11);
    uint64_t v14 = v13[1];
    *(void *)&long long v42 = *v13;
    *((void *)&v42 + 1) = v14;
    sub_10000E170(v12 + 40 * v11, (uint64_t)v43);
    swift_bridgeObjectRetain();
LABEL_25:
    sub_100007E78((uint64_t)&v42, (uint64_t)&v51, &qword_10012E588);
    uint64_t v18 = v52;
    if (!v52)
    {
      swift_release();
      return v35;
    }
    uint64_t v19 = v51;
    v49[0] = v53;
    v49[1] = v54;
    uint64_t v50 = v55;
    uint64_t v20 = v38[2];
    if (!v20) {
      goto LABEL_33;
    }
    uint64_t v21 = v9;
    BOOL v22 = v38[4] == v51 && v38[5] == v52;
    if (v22 || (sub_10000D304() & 1) != 0)
    {
LABEL_53:
      sub_10000DA8C((uint64_t)v49);
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v9 = v21;
    }
    else
    {
      if (v20 != 1)
      {
        if (v38[6] != v19 || v38[7] != v18)
        {
          uint64_t result = sub_10000D304();
          if ((result & 1) == 0)
          {
            if (v20 != 2)
            {
              uint64_t v28 = v32;
              uint64_t v29 = 2;
              while (1)
              {
                uint64_t v30 = v29 + 1;
                if (__OFADD__(v29, 1)) {
                  goto LABEL_68;
                }
                if (*(v28 - 1) == v19 && *v28 == v18) {
                  goto LABEL_53;
                }
                uint64_t result = sub_10000D304();
                if (result) {
                  goto LABEL_53;
                }
                v28 += 2;
                ++v29;
                BOOL v22 = v30 == v20;
                uint64_t v9 = v21;
                if (v22) {
                  goto LABEL_33;
                }
              }
            }
            goto LABEL_33;
          }
        }
        goto LABEL_53;
      }
LABEL_33:
      if (*(void *)(a1 + 16) && (unint64_t v23 = sub_10001169C(v19, v18), (v24 & 1) != 0))
      {
        sub_10000E170(*(void *)(a1 + 56) + 40 * v23, (uint64_t)v47);
      }
      else
      {
        uint64_t v48 = 0;
        memset(v47, 0, sizeof(v47));
      }
      swift_bridgeObjectRelease();
      sub_10000E170((uint64_t)v49, (uint64_t)v46);
      sub_100006374((uint64_t)v47, (uint64_t)&v42, v9);
      sub_100006374((uint64_t)v46, (uint64_t)&v43[24], v9);
      if (*(void *)&v43[8])
      {
        sub_100006374((uint64_t)&v42, (uint64_t)v41, v9);
        if (!*((void *)&v44 + 1))
        {
          sub_100018910((uint64_t)v46, v9);
          sub_100018910((uint64_t)v47, v9);
          sub_10000DA8C((uint64_t)v49);
          sub_10000DA8C((uint64_t)v41);
          goto LABEL_44;
        }
        v39[0] = *(_OWORD *)&v43[24];
        v39[1] = v44;
        uint64_t v40 = v45;
        char v25 = static AnyHashable.== infix(_:_:)();
        sub_10000DA8C((uint64_t)v39);
        sub_100018910((uint64_t)v46, v9);
        sub_100018910((uint64_t)v47, v9);
        sub_10000DA8C((uint64_t)v49);
        sub_10000DA8C((uint64_t)v41);
        uint64_t result = sub_100018910((uint64_t)&v42, v9);
        if ((v25 & 1) == 0) {
          goto LABEL_45;
        }
      }
      else
      {
        sub_100018910((uint64_t)v46, v9);
        sub_100018910((uint64_t)v47, v9);
        sub_10000DA8C((uint64_t)v49);
        if (*((void *)&v44 + 1))
        {
LABEL_44:
          uint64_t result = sub_100018910((uint64_t)&v42, &qword_10012E598);
LABEL_45:
          if (__CFADD__(v35++, 1)) {
            goto LABEL_67;
          }
        }
        else
        {
          uint64_t result = sub_100018910((uint64_t)&v42, v9);
        }
      }
    }
  }
  int64_t v15 = v37 + 1;
  if (__OFADD__(v37, 1))
  {
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  if (v15 >= v34)
  {
LABEL_24:
    unint64_t v7 = 0;
    memset(v43, 0, sizeof(v43));
    long long v42 = 0u;
    goto LABEL_25;
  }
  unint64_t v16 = *(void *)(v33 + 8 * v15);
  if (v16)
  {
LABEL_10:
    unint64_t v7 = (v16 - 1) & v16;
    unint64_t v11 = __clz(__rbit64(v16)) + (v15 << 6);
    int64_t v37 = v15;
    goto LABEL_6;
  }
  int64_t v17 = v37 + 2;
  ++v37;
  if (v15 + 1 >= v34) {
    goto LABEL_24;
  }
  unint64_t v16 = *(void *)(v33 + 8 * v17);
  if (v16) {
    goto LABEL_13;
  }
  int64_t v37 = v15 + 1;
  if (v15 + 2 >= v34) {
    goto LABEL_24;
  }
  unint64_t v16 = *(void *)(v33 + 8 * (v15 + 2));
  if (v16)
  {
    v15 += 2;
    goto LABEL_10;
  }
  int64_t v17 = v15 + 3;
  int64_t v37 = v15 + 2;
  if (v15 + 3 >= v34) {
    goto LABEL_24;
  }
  unint64_t v16 = *(void *)(v33 + 8 * v17);
  if (v16)
  {
LABEL_13:
    int64_t v15 = v17;
    goto LABEL_10;
  }
  while (1)
  {
    int64_t v15 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v15 >= v34)
    {
      int64_t v37 = v34 - 1;
      goto LABEL_24;
    }
    unint64_t v16 = *(void *)(v33 + 8 * v15);
    ++v17;
    if (v16) {
      goto LABEL_10;
    }
  }
LABEL_69:
  __break(1u);
  return result;
}

uint64_t sub_100075828@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = static Date.> infix(_:_:)();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100075864()
{
  swift_arrayDestroy();
  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_1000758A8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10007595C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccountDataServerRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000759C0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_1000082F8();
  uint64_t v4 = sub_100007F20();
  v5(v4);
  return a2;
}

uint64_t sub_100075A14(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_1000082F8();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_100075A6C@<X0>(unsigned char *a1@<X8>)
{
  return sub_100075828(a1);
}

void *sub_100075A84(void *__dst, void *__src, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *__src;
    *__dst = *__src;
    __dst = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = __src[1];
    if (v7)
    {
      *__dst = *__src;
      __dst[1] = v7;
      __dst[2] = __src[2];
      *((unsigned char *)__dst + 24) = *((unsigned char *)__src + 24);
      uint64_t v8 = __src[5];
      __dst[4] = __src[4];
      __dst[5] = v8;
      uint64_t v9 = __src[7];
      __dst[6] = __src[6];
      __dst[7] = v9;
      uint64_t v10 = __src[9];
      __dst[8] = __src[8];
      __dst[9] = v10;
      __dst[10] = __src[10];
      *((_DWORD *)__dst + 22) = *((_DWORD *)__src + 22);
      __dst[12] = __src[12];
      *((_DWORD *)__dst + 26) = *((_DWORD *)__src + 26);
      *((_WORD *)__dst + 54) = *((_WORD *)__src + 54);
      uint64_t v11 = __src[15];
      __dst[14] = __src[14];
      __dst[15] = v11;
      uint64_t v12 = __src[17];
      __dst[16] = __src[16];
      __dst[17] = v12;
      uint64_t v13 = __src[19];
      __dst[18] = __src[18];
      __dst[19] = v13;
      *((_WORD *)__dst + 80) = *((_WORD *)__src + 80);
      uint64_t v14 = __src[22];
      __dst[21] = __src[21];
      __dst[22] = v14;
      __dst[23] = __src[23];
      *((_WORD *)__dst + 96) = *((_WORD *)__src + 96);
      *((unsigned char *)__dst + 194) = *((unsigned char *)__src + 194);
      uint64_t v15 = __src[26];
      __dst[25] = __src[25];
      __dst[26] = v15;
      *((unsigned char *)__dst + 216) = *((unsigned char *)__src + 216);
      __dst[28] = __src[28];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      memcpy(__dst, __src, 0xE8uLL);
    }
    uint64_t v17 = a3[5];
    uint64_t v18 = (char *)__dst + v17;
    uint64_t v19 = (char *)__src + v17;
    uint64_t v20 = type metadata accessor for Date();
    if (sub_10001044C((uint64_t)v19, 1, v20))
    {
      uint64_t v21 = sub_100011D80(&qword_10012E458);
      memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
      sub_1000101E8((uint64_t)v18, 0, 1, v20);
    }
    uint64_t v22 = a3[6];
    unint64_t v23 = (char *)__dst + v22;
    char v24 = (char *)__src + v22;
    if (sub_10001044C((uint64_t)__src + v22, 1, v20))
    {
      uint64_t v25 = sub_100011D80(&qword_10012E458);
      memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
      uint64_t v26 = *(void *)(v20 - 8);
    }
    else
    {
      uint64_t v26 = *(void *)(v20 - 8);
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v20);
      sub_1000101E8((uint64_t)v23, 0, 1, v20);
    }
    uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
    v27((char *)__dst + a3[7], (char *)__src + a3[7], v20);
    uint64_t v28 = a3[9];
    *(_WORD *)((char *)__dst + a3[8]) = *(_WORD *)((char *)__src + a3[8]);
    uint64_t v29 = (char *)__dst + v28;
    uint64_t v30 = (char *)__src + v28;
    if (sub_10001044C((uint64_t)__src + v28, 1, v20))
    {
      uint64_t v31 = sub_100011D80(&qword_10012E458);
      memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      v27(v29, v30, v20);
      sub_1000101E8((uint64_t)v29, 0, 1, v20);
    }
    uint64_t v32 = a3[11];
    *(_WORD *)((char *)__dst + a3[10]) = *(_WORD *)((char *)__src + a3[10]);
    uint64_t v33 = (char *)__dst + v32;
    int64_t v34 = (char *)__src + v32;
    if (sub_10001044C((uint64_t)__src + v32, 1, v20))
    {
      uint64_t v35 = sub_100011D80(&qword_10012E458);
      memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      v27(v33, v34, v20);
      sub_1000101E8((uint64_t)v33, 0, 1, v20);
    }
    uint64_t v36 = a3[13];
    *(void *)((char *)__dst + a3[12]) = *(void *)((char *)__src + a3[12]);
    int64_t v37 = (char *)__dst + v36;
    long long v38 = (char *)__src + v36;
    uint64_t v39 = type metadata accessor for CachedServerDataSyncAttempt(0);
    if (sub_10001044C((uint64_t)v38, 1, v39))
    {
      uint64_t v40 = sub_100011D80(&qword_10012E4A0);
      memcpy(v37, v38, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      *int64_t v37 = *v38;
      v27(&v37[*(int *)(v39 + 20)], &v38[*(int *)(v39 + 20)], v20);
      sub_1000101E8((uint64_t)v37, 0, 1, v39);
    }
  }
  return __dst;
}

void *sub_100075F68(void *__dst, void *__src, int *a3)
{
  uint64_t v6 = __src[1];
  if (__dst[1])
  {
    if (v6)
    {
      *__dst = *__src;
      __dst[1] = __src[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      __dst[2] = __src[2];
      *((unsigned char *)__dst + 24) = *((unsigned char *)__src + 24);
      __dst[4] = __src[4];
      __dst[5] = __src[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      __dst[6] = __src[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      __dst[7] = __src[7];
      __dst[8] = __src[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      __dst[9] = __src[9];
      __dst[10] = __src[10];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((unsigned char *)__dst + 8_Block_object_dispose(&a9, 8) = *((unsigned char *)__src + 88);
      *((unsigned char *)__dst + 89) = *((unsigned char *)__src + 89);
      *((unsigned char *)__dst + 90) = *((unsigned char *)__src + 90);
      *((unsigned char *)__dst + 91) = *((unsigned char *)__src + 91);
      __dst[12] = __src[12];
      *((unsigned char *)__dst + 104) = *((unsigned char *)__src + 104);
      *((unsigned char *)__dst + 105) = *((unsigned char *)__src + 105);
      *((unsigned char *)__dst + 106) = *((unsigned char *)__src + 106);
      *((unsigned char *)__dst + 107) = *((unsigned char *)__src + 107);
      *((unsigned char *)__dst + 10_Block_object_dispose(&a9, 8) = *((unsigned char *)__src + 108);
      *((unsigned char *)__dst + 109) = *((unsigned char *)__src + 109);
      __dst[14] = __src[14];
      __dst[15] = __src[15];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      __dst[16] = __src[16];
      __dst[17] = __src[17];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      __dst[18] = __src[18];
      __dst[19] = __src[19];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((unsigned char *)__dst + 160) = *((unsigned char *)__src + 160);
      *((unsigned char *)__dst + 161) = *((unsigned char *)__src + 161);
      __dst[21] = __src[21];
      __dst[22] = __src[22];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v7 = __src[23];
      *((unsigned char *)__dst + 192) = *((unsigned char *)__src + 192);
      __dst[23] = v7;
      *((unsigned char *)__dst + 193) = *((unsigned char *)__src + 193);
      *((unsigned char *)__dst + 194) = *((unsigned char *)__src + 194);
      __dst[25] = __src[25];
      __dst[26] = __src[26];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((unsigned char *)__dst + 216) = *((unsigned char *)__src + 216);
      __dst[28] = __src[28];
      goto LABEL_8;
    }
    sub_100076900((uint64_t)__dst);
  }
  else if (v6)
  {
    *__dst = *__src;
    __dst[1] = __src[1];
    __dst[2] = __src[2];
    *((unsigned char *)__dst + 24) = *((unsigned char *)__src + 24);
    __dst[4] = __src[4];
    __dst[5] = __src[5];
    __dst[6] = __src[6];
    __dst[7] = __src[7];
    __dst[8] = __src[8];
    __dst[9] = __src[9];
    __dst[10] = __src[10];
    *((unsigned char *)__dst + 8_Block_object_dispose(&a9, 8) = *((unsigned char *)__src + 88);
    *((unsigned char *)__dst + 89) = *((unsigned char *)__src + 89);
    *((unsigned char *)__dst + 90) = *((unsigned char *)__src + 90);
    *((unsigned char *)__dst + 91) = *((unsigned char *)__src + 91);
    __dst[12] = __src[12];
    *((unsigned char *)__dst + 104) = *((unsigned char *)__src + 104);
    *((unsigned char *)__dst + 105) = *((unsigned char *)__src + 105);
    *((unsigned char *)__dst + 106) = *((unsigned char *)__src + 106);
    *((unsigned char *)__dst + 107) = *((unsigned char *)__src + 107);
    *((unsigned char *)__dst + 10_Block_object_dispose(&a9, 8) = *((unsigned char *)__src + 108);
    *((unsigned char *)__dst + 109) = *((unsigned char *)__src + 109);
    __dst[14] = __src[14];
    __dst[15] = __src[15];
    __dst[16] = __src[16];
    __dst[17] = __src[17];
    __dst[18] = __src[18];
    __dst[19] = __src[19];
    *((unsigned char *)__dst + 160) = *((unsigned char *)__src + 160);
    *((unsigned char *)__dst + 161) = *((unsigned char *)__src + 161);
    __dst[21] = __src[21];
    __dst[22] = __src[22];
    uint64_t v8 = __src[23];
    *((unsigned char *)__dst + 192) = *((unsigned char *)__src + 192);
    __dst[23] = v8;
    *((unsigned char *)__dst + 193) = *((unsigned char *)__src + 193);
    *((unsigned char *)__dst + 194) = *((unsigned char *)__src + 194);
    __dst[25] = __src[25];
    __dst[26] = __src[26];
    *((unsigned char *)__dst + 216) = *((unsigned char *)__src + 216);
    __dst[28] = __src[28];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_8;
  }
  memcpy(__dst, __src, 0xE8uLL);
LABEL_8:
  uint64_t v9 = a3[5];
  uint64_t v10 = (char *)__dst + v9;
  uint64_t v11 = (char *)__src + v9;
  uint64_t v12 = type metadata accessor for Date();
  int v13 = sub_10001044C((uint64_t)v10, 1, v12);
  int v14 = sub_10001044C((uint64_t)v11, 1, v12);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
      sub_1000101E8((uint64_t)v10, 0, 1, v12);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v15 = *(void *)(v12 - 8);
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v12);
LABEL_13:
    uint64_t v16 = sub_100011D80(&qword_10012E458);
    memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 24))(v10, v11, v12);
LABEL_14:
  uint64_t v17 = a3[6];
  uint64_t v18 = (char *)__dst + v17;
  uint64_t v19 = (char *)__src + v17;
  int v20 = sub_10001044C((uint64_t)__dst + v17, 1, v12);
  int v21 = sub_10001044C((uint64_t)v19, 1, v12);
  if (v20)
  {
    if (v21)
    {
      uint64_t v22 = sub_100011D80(&qword_10012E458);
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
      uint64_t v23 = *(void *)(v12 - 8);
    }
    else
    {
      uint64_t v23 = *(void *)(v12 - 8);
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v18, v19, v12);
      sub_1000101E8((uint64_t)v18, 0, 1, v12);
    }
  }
  else
  {
    uint64_t v23 = *(void *)(v12 - 8);
    if (v21)
    {
      (*(void (**)(char *, uint64_t))(v23 + 8))(v18, v12);
      uint64_t v24 = sub_100011D80(&qword_10012E458);
      memcpy(v18, v19, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v18, v19, v12);
    }
  }
  uint64_t v25 = v23;
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v23 + 24);
  v26((char *)__dst + a3[7], (char *)__src + a3[7], v12);
  *(_WORD *)((char *)__dst + a3[8]) = *(_WORD *)((char *)__src + a3[8]);
  uint64_t v27 = a3[9];
  uint64_t v28 = (char *)__dst + v27;
  uint64_t v29 = (char *)__src + v27;
  int v30 = sub_10001044C((uint64_t)__dst + v27, 1, v12);
  int v31 = sub_10001044C((uint64_t)v29, 1, v12);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v28, v29, v12);
      sub_1000101E8((uint64_t)v28, 0, 1, v12);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v12);
LABEL_27:
    uint64_t v32 = sub_100011D80(&qword_10012E458);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_28;
  }
  v26(v28, v29, v12);
LABEL_28:
  *(_WORD *)((char *)__dst + a3[10]) = *(_WORD *)((char *)__src + a3[10]);
  uint64_t v33 = a3[11];
  int64_t v34 = (char *)__dst + v33;
  uint64_t v35 = (char *)__src + v33;
  int v36 = sub_10001044C((uint64_t)__dst + v33, 1, v12);
  int v37 = sub_10001044C((uint64_t)v35, 1, v12);
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v34, v35, v12);
      sub_1000101E8((uint64_t)v34, 0, 1, v12);
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (v37)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v34, v12);
LABEL_33:
    uint64_t v38 = sub_100011D80(&qword_10012E458);
    memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_34;
  }
  v26(v34, v35, v12);
LABEL_34:
  *(void *)((char *)__dst + a3[12]) = *(void *)((char *)__src + a3[12]);
  uint64_t v39 = a3[13];
  uint64_t v40 = (char *)__dst + v39;
  int64_t v41 = (char *)__src + v39;
  uint64_t v42 = type metadata accessor for CachedServerDataSyncAttempt(0);
  int v43 = sub_10001044C((uint64_t)v40, 1, v42);
  int v44 = sub_10001044C((uint64_t)v41, 1, v42);
  if (!v43)
  {
    if (!v44)
    {
      *uint64_t v40 = *v41;
      v26(&v40[*(int *)(v42 + 20)], &v41[*(int *)(v42 + 20)], v12);
      return __dst;
    }
    sub_10007F954((uint64_t)v40, (void (*)(void))type metadata accessor for CachedServerDataSyncAttempt);
    goto LABEL_39;
  }
  if (v44)
  {
LABEL_39:
    uint64_t v45 = sub_100011D80(&qword_10012E4A0);
    memcpy(v40, v41, *(void *)(*(void *)(v45 - 8) + 64));
    return __dst;
  }
  *uint64_t v40 = *v41;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v25 + 16))(&v40[*(int *)(v42 + 20)], &v41[*(int *)(v42 + 20)], v12);
  sub_1000101E8((uint64_t)v40, 0, 1, v42);
  return __dst;
}

uint64_t sub_100076900(uint64_t a1)
{
  return a1;
}

char *sub_100076930(char *a1, char *a2, int *a3)
{
  memcpy(a1, a2, 0xE8uLL);
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  if (sub_10001044C((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = sub_100011D80(&qword_10012E458);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    sub_1000101E8((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v11 = a3[6];
  uint64_t v12 = &a1[v11];
  int v13 = &a2[v11];
  if (sub_10001044C((uint64_t)&a2[v11], 1, v9))
  {
    uint64_t v14 = sub_100011D80(&qword_10012E458);
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
    uint64_t v15 = *(void *)(v9 - 8);
  }
  else
  {
    uint64_t v15 = *(void *)(v9 - 8);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v9);
    sub_1000101E8((uint64_t)v12, 0, 1, v9);
  }
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v16(&a1[a3[7]], &a2[a3[7]], v9);
  uint64_t v17 = a3[9];
  *(_WORD *)&a1[a3[8]] = *(_WORD *)&a2[a3[8]];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  if (sub_10001044C((uint64_t)&a2[v17], 1, v9))
  {
    uint64_t v20 = sub_100011D80(&qword_10012E458);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    v16(v18, v19, v9);
    sub_1000101E8((uint64_t)v18, 0, 1, v9);
  }
  uint64_t v21 = a3[11];
  *(_WORD *)&a1[a3[10]] = *(_WORD *)&a2[a3[10]];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  if (sub_10001044C((uint64_t)&a2[v21], 1, v9))
  {
    uint64_t v24 = sub_100011D80(&qword_10012E458);
    memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    v16(v22, v23, v9);
    sub_1000101E8((uint64_t)v22, 0, 1, v9);
  }
  uint64_t v25 = a3[13];
  *(void *)&a1[a3[12]] = *(void *)&a2[a3[12]];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  uint64_t v28 = type metadata accessor for CachedServerDataSyncAttempt(0);
  if (sub_10001044C((uint64_t)v27, 1, v28))
  {
    uint64_t v29 = sub_100011D80(&qword_10012E4A0);
    memcpy(v26, v27, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    *uint64_t v26 = *v27;
    v16(&v26[*(int *)(v28 + 20)], &v27[*(int *)(v28 + 20)], v9);
    sub_1000101E8((uint64_t)v26, 0, 1, v28);
  }
  return a1;
}

void *sub_100076C9C(void *__dst, void *__src, int *a3)
{
  if (__dst[1])
  {
    uint64_t v6 = __src[1];
    if (v6)
    {
      *__dst = *__src;
      __dst[1] = v6;
      swift_bridgeObjectRelease();
      __dst[2] = __src[2];
      *((unsigned char *)__dst + 24) = *((unsigned char *)__src + 24);
      uint64_t v7 = __src[5];
      __dst[4] = __src[4];
      __dst[5] = v7;
      swift_bridgeObjectRelease();
      __dst[6] = __src[6];
      swift_bridgeObjectRelease();
      uint64_t v8 = __src[8];
      __dst[7] = __src[7];
      __dst[8] = v8;
      swift_bridgeObjectRelease();
      uint64_t v9 = __src[10];
      __dst[9] = __src[9];
      __dst[10] = v9;
      swift_bridgeObjectRelease();
      *((unsigned char *)__dst + 8_Block_object_dispose(&a9, 8) = *((unsigned char *)__src + 88);
      *((unsigned char *)__dst + 89) = *((unsigned char *)__src + 89);
      *((unsigned char *)__dst + 90) = *((unsigned char *)__src + 90);
      *((unsigned char *)__dst + 91) = *((unsigned char *)__src + 91);
      __dst[12] = __src[12];
      *((unsigned char *)__dst + 104) = *((unsigned char *)__src + 104);
      *((unsigned char *)__dst + 105) = *((unsigned char *)__src + 105);
      *((unsigned char *)__dst + 106) = *((unsigned char *)__src + 106);
      *((unsigned char *)__dst + 107) = *((unsigned char *)__src + 107);
      *((unsigned char *)__dst + 10_Block_object_dispose(&a9, 8) = *((unsigned char *)__src + 108);
      *((unsigned char *)__dst + 109) = *((unsigned char *)__src + 109);
      uint64_t v10 = __src[15];
      __dst[14] = __src[14];
      __dst[15] = v10;
      swift_bridgeObjectRelease();
      uint64_t v11 = __src[17];
      __dst[16] = __src[16];
      __dst[17] = v11;
      swift_bridgeObjectRelease();
      uint64_t v12 = __src[19];
      __dst[18] = __src[18];
      __dst[19] = v12;
      swift_bridgeObjectRelease();
      *((unsigned char *)__dst + 160) = *((unsigned char *)__src + 160);
      *((unsigned char *)__dst + 161) = *((unsigned char *)__src + 161);
      uint64_t v13 = __src[22];
      __dst[21] = __src[21];
      __dst[22] = v13;
      swift_bridgeObjectRelease();
      __dst[23] = __src[23];
      *((unsigned char *)__dst + 192) = *((unsigned char *)__src + 192);
      *((unsigned char *)__dst + 193) = *((unsigned char *)__src + 193);
      *((unsigned char *)__dst + 194) = *((unsigned char *)__src + 194);
      uint64_t v14 = __src[26];
      __dst[25] = __src[25];
      __dst[26] = v14;
      swift_bridgeObjectRelease();
      *((unsigned char *)__dst + 216) = *((unsigned char *)__src + 216);
      __dst[28] = __src[28];
      goto LABEL_6;
    }
    sub_100076900((uint64_t)__dst);
  }
  memcpy(__dst, __src, 0xE8uLL);
LABEL_6:
  uint64_t v15 = a3[5];
  uint64_t v16 = (char *)__dst + v15;
  uint64_t v17 = (char *)__src + v15;
  uint64_t v18 = type metadata accessor for Date();
  int v19 = sub_10001044C((uint64_t)v16, 1, v18);
  int v20 = sub_10001044C((uint64_t)v17, 1, v18);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
      sub_1000101E8((uint64_t)v16, 0, 1, v18);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  uint64_t v21 = *(void *)(v18 - 8);
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v16, v18);
LABEL_11:
    uint64_t v22 = sub_100011D80(&qword_10012E458);
    memcpy(v16, v17, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 40))(v16, v17, v18);
LABEL_12:
  uint64_t v23 = a3[6];
  uint64_t v24 = (char *)__dst + v23;
  uint64_t v25 = (char *)__src + v23;
  int v26 = sub_10001044C((uint64_t)__dst + v23, 1, v18);
  int v27 = sub_10001044C((uint64_t)v25, 1, v18);
  if (v26)
  {
    if (v27)
    {
      uint64_t v28 = sub_100011D80(&qword_10012E458);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
      uint64_t v29 = *(void *)(v18 - 8);
    }
    else
    {
      uint64_t v29 = *(void *)(v18 - 8);
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v24, v25, v18);
      sub_1000101E8((uint64_t)v24, 0, 1, v18);
    }
  }
  else
  {
    uint64_t v29 = *(void *)(v18 - 8);
    if (v27)
    {
      (*(void (**)(char *, uint64_t))(v29 + 8))(v24, v18);
      uint64_t v30 = sub_100011D80(&qword_10012E458);
      memcpy(v24, v25, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 40))(v24, v25, v18);
    }
  }
  uint64_t v31 = v29;
  uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v29 + 40);
  v32((char *)__dst + a3[7], (char *)__src + a3[7], v18);
  uint64_t v33 = a3[9];
  *(_WORD *)((char *)__dst + a3[8]) = *(_WORD *)((char *)__src + a3[8]);
  int64_t v34 = (char *)__dst + v33;
  uint64_t v35 = (char *)__src + v33;
  int v36 = sub_10001044C((uint64_t)__dst + v33, 1, v18);
  int v37 = sub_10001044C((uint64_t)v35, 1, v18);
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v34, v35, v18);
      sub_1000101E8((uint64_t)v34, 0, 1, v18);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v37)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v34, v18);
LABEL_25:
    uint64_t v38 = sub_100011D80(&qword_10012E458);
    memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_26;
  }
  v32(v34, v35, v18);
LABEL_26:
  uint64_t v39 = a3[11];
  *(_WORD *)((char *)__dst + a3[10]) = *(_WORD *)((char *)__src + a3[10]);
  uint64_t v40 = (char *)__dst + v39;
  int64_t v41 = (char *)__src + v39;
  int v42 = sub_10001044C((uint64_t)__dst + v39, 1, v18);
  int v43 = sub_10001044C((uint64_t)v41, 1, v18);
  if (v42)
  {
    if (!v43)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v40, v41, v18);
      sub_1000101E8((uint64_t)v40, 0, 1, v18);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v43)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v40, v18);
LABEL_31:
    uint64_t v44 = sub_100011D80(&qword_10012E458);
    memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
    goto LABEL_32;
  }
  v32(v40, v41, v18);
LABEL_32:
  uint64_t v45 = a3[13];
  *(void *)((char *)__dst + a3[12]) = *(void *)((char *)__src + a3[12]);
  uint64_t v46 = (char *)__dst + v45;
  uint64_t v47 = (char *)__src + v45;
  uint64_t v48 = type metadata accessor for CachedServerDataSyncAttempt(0);
  int v49 = sub_10001044C((uint64_t)v46, 1, v48);
  int v50 = sub_10001044C((uint64_t)v47, 1, v48);
  if (!v49)
  {
    if (!v50)
    {
      *uint64_t v46 = *v47;
      v32(&v46[*(int *)(v48 + 20)], &v47[*(int *)(v48 + 20)], v18);
      return __dst;
    }
    sub_10007F954((uint64_t)v46, (void (*)(void))type metadata accessor for CachedServerDataSyncAttempt);
    goto LABEL_37;
  }
  if (v50)
  {
LABEL_37:
    uint64_t v51 = sub_100011D80(&qword_10012E4A0);
    memcpy(v46, v47, *(void *)(*(void *)(v51 - 8) + 64));
    return __dst;
  }
  *uint64_t v46 = *v47;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v31 + 32))(&v46[*(int *)(v48 + 20)], &v47[*(int *)(v48 + 20)], v18);
  sub_1000101E8((uint64_t)v46, 0, 1, v48);
  return __dst;
}

uint64_t sub_1000773EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100077400);
}

uint64_t sub_100077400(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 2147483646)
  {
    sub_100083158();
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    sub_100011D80(&qword_10012E458);
    sub_10000F6F8();
    if (*(_DWORD *)(v10 + 84) == a2)
    {
      uint64_t v11 = v9;
      uint64_t v12 = a3[5];
    }
    else
    {
      type metadata accessor for Date();
      sub_10000F6F8();
      if (*(_DWORD *)(v14 + 84) == a2)
      {
        uint64_t v11 = v13;
        uint64_t v12 = a3[7];
      }
      else
      {
        uint64_t v11 = sub_100011D80(&qword_10012E4A0);
        uint64_t v12 = a3[13];
      }
    }
    return sub_10001044C(a1 + v12, a2, v11);
  }
}

uint64_t sub_1000774D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000774EC);
}

void sub_1000774EC()
{
  sub_10000F96C();
  if (v2 == 2147483646)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = v0;
  }
  else
  {
    int v4 = v3;
    int v5 = v2;
    sub_100011D80(&qword_10012E458);
    sub_10000F6F8();
    if (*(_DWORD *)(v7 + 84) == v5)
    {
      uint64_t v8 = v6;
      uint64_t v9 = v4[5];
    }
    else
    {
      type metadata accessor for Date();
      sub_10000F6F8();
      if (*(_DWORD *)(v11 + 84) == v5)
      {
        uint64_t v8 = v10;
        uint64_t v9 = v4[7];
      }
      else
      {
        uint64_t v8 = sub_100011D80(&qword_10012E4A0);
        uint64_t v9 = v4[13];
      }
    }
    sub_1000101E8(v1 + v9, v0, v0, v8);
  }
}

void sub_1000775BC()
{
  sub_100077720(319, &qword_10012E608, (void (*)(uint64_t))&type metadata accessor for Date);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date();
    if (v1 <= 0x3F)
    {
      sub_100077720(319, (unint64_t *)&unk_10012E610, (void (*)(uint64_t))type metadata accessor for CachedServerDataSyncAttempt);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_100077720(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_100077774()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000777F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 8_Block_object_dispose(&a9, 8) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_WORD *)(a1 + 10_Block_object_dispose(&a9, 8) = *(_WORD *)(a2 + 108);
  uint64_t v7 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v7;
  uint64_t v8 = *(void *)(a2 + 136);
  *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v8;
  uint64_t v9 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v9;
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  uint64_t v10 = *(void *)(a2 + 176);
  *(void *)(a1 + 16_Block_object_dispose(&a9, 8) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v10;
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
  *(unsigned char *)(a1 + 194) = *(unsigned char *)(a2 + 194);
  uint64_t v11 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 20_Block_object_dispose(&a9, 8) = v11;
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100077930(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8_Block_object_dispose(&a9, 8) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(unsigned char *)(a1 + 90) = *(unsigned char *)(a2 + 90);
  *(unsigned char *)(a1 + 91) = *(unsigned char *)(a2 + 91);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
  *(unsigned char *)(a1 + 106) = *(unsigned char *)(a2 + 106);
  *(unsigned char *)(a1 + 107) = *(unsigned char *)(a2 + 107);
  *(unsigned char *)(a1 + 10_Block_object_dispose(&a9, 8) = *(unsigned char *)(a2 + 108);
  *(unsigned char *)(a1 + 109) = *(unsigned char *)(a2 + 109);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
  *(void *)(a1 + 16_Block_object_dispose(&a9, 8) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 184);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(void *)(a1 + 184) = v4;
  *(unsigned char *)(a1 + 193) = *(unsigned char *)(a2 + 193);
  *(unsigned char *)(a1 + 194) = *(unsigned char *)(a2 + 194);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 20_Block_object_dispose(&a9, 8) = *(void *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  return a1;
}

void *sub_100077B40(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xE8uLL);
}

uint64_t sub_100077B48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8_Block_object_dispose(&a9, 8) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(unsigned char *)(a1 + 90) = *(unsigned char *)(a2 + 90);
  *(unsigned char *)(a1 + 91) = *(unsigned char *)(a2 + 91);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
  *(unsigned char *)(a1 + 106) = *(unsigned char *)(a2 + 106);
  *(unsigned char *)(a1 + 107) = *(unsigned char *)(a2 + 107);
  *(unsigned char *)(a1 + 10_Block_object_dispose(&a9, 8) = *(unsigned char *)(a2 + 108);
  *(unsigned char *)(a1 + 109) = *(unsigned char *)(a2 + 109);
  uint64_t v7 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 136);
  *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v9;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
  uint64_t v10 = *(void *)(a2 + 176);
  *(void *)(a1 + 16_Block_object_dispose(&a9, 8) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v10;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(unsigned char *)(a1 + 193) = *(unsigned char *)(a2 + 193);
  *(unsigned char *)(a1 + 194) = *(unsigned char *)(a2 + 194);
  uint64_t v11 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 20_Block_object_dispose(&a9, 8) = v11;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  return a1;
}

uint64_t sub_100077CB8(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 232))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100077CF8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 16_Block_object_dispose(&a9, 8) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 8_Block_object_dispose(&a9, 8) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&a9, 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 232) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(&a9, 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 232) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for AccountDataPayload()
{
}

void sub_100077D7C()
{
  sub_10000A46C();
  uint64_t v4 = v0;
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for CachedServerDataSyncAttempt(0);
  sub_1000082F8();
  __chkstk_darwin(v8);
  sub_10000D2F0();
  int v42 = (unsigned __int8 *)v9;
  uint64_t v10 = sub_100011D80(&qword_10012E4A0);
  uint64_t v11 = sub_1000085F4(v10);
  __chkstk_darwin(v11);
  sub_1000164C0(v12, v41);
  uint64_t v13 = type metadata accessor for Date();
  sub_10000BFC4();
  uint64_t v47 = v14;
  __chkstk_darwin(v15);
  sub_100011FB8();
  uint64_t v16 = sub_100011D80(&qword_10012E458);
  uint64_t v17 = sub_1000085F4(v16);
  __chkstk_darwin(v17);
  sub_100008324();
  uint64_t v44 = v18;
  sub_100016A48();
  __chkstk_darwin(v19);
  sub_100016908();
  uint64_t v43 = v20;
  sub_100016A48();
  __chkstk_darwin(v21);
  sub_1000830F8();
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v41 - v23;
  sub_100007E78(v0, (uint64_t)v50, &qword_10012E460);
  sub_100007E78((uint64_t)v50, (uint64_t)v51, &qword_10012E460);
  int v25 = sub_100018644((uint64_t)v51);
  uint64_t v46 = v7;
  if (v25 == 1)
  {
    sub_100015B78();
  }
  else
  {
    sub_100007E78((uint64_t)v50, (uint64_t)v48, &qword_10012E460);
    memcpy(v49, v48, sizeof(v49));
    sub_10000FB40();
    sub_1000758A8((uint64_t)v48);
    sub_10007C40C(v6);
    sub_1000726A0(v50, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10000667C);
  }
  int v26 = (int *)type metadata accessor for AccountDataState(0);
  sub_10000F678(v0 + v26[5], (uint64_t)v24, &qword_10012E458);
  sub_10000B2D8((uint64_t)v24, 1, v13);
  if (v27)
  {
    sub_100015B78();
  }
  else
  {
    sub_1000830C4();
    sub_100082FA8();
    v28();
    sub_10000FB40();
    sub_10007F434(&qword_10012E670, (void (*)(uint64_t))&type metadata accessor for Date);
    sub_10008310C();
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v13);
  }
  sub_10000F678(v0 + v26[6], v2, &qword_10012E458);
  sub_10000B2D8(v2, 1, v13);
  if (v27)
  {
    sub_100015B78();
  }
  else
  {
    sub_1000830C4();
    sub_100082FA8();
    v29();
    sub_10000FB40();
    sub_10007F434(&qword_10012E670, (void (*)(uint64_t))&type metadata accessor for Date);
    sub_10008310C();
    uint64_t v30 = sub_10008303C();
    v31(v30);
  }
  sub_10007F434(&qword_10012E670, (void (*)(uint64_t))&type metadata accessor for Date);
  sub_100016218();
  if (*(_WORD *)(v0 + v26[8]) == 3)
  {
    sub_100015B78();
  }
  else
  {
    sub_10000FB40();
    sub_10007A9F0();
  }
  uint64_t v32 = v43;
  sub_10000F678(v4 + v26[9], v43, &qword_10012E458);
  sub_10000B2D8(v32, 1, v13);
  if (v27)
  {
    sub_100015B78();
  }
  else
  {
    sub_100082FA8();
    v33();
    sub_10000FB40();
    sub_100016218();
    uint64_t v34 = sub_10008303C();
    v35(v34);
  }
  if (*(_WORD *)(v4 + v26[10]) == 3)
  {
    sub_100015B78();
  }
  else
  {
    sub_10000FB40();
    sub_10007A9F0();
  }
  uint64_t v36 = v44;
  sub_10000F678(v4 + v26[11], v44, &qword_10012E458);
  sub_10000B2D8(v36, 1, v13);
  if (v27)
  {
    sub_100015B78();
  }
  else
  {
    uint64_t v37 = v47;
    sub_100082FA8();
    v38();
    sub_10000FB40();
    sub_100016218();
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v3, v13);
  }
  Hasher._combine(_:)(*(void *)(v4 + v26[12]));
  uint64_t v39 = v45;
  sub_10000F678(v4 + v26[13], v45, &qword_10012E4A0);
  sub_10000B2D8(v39, 1, v46);
  if (v27)
  {
    sub_100015B78();
  }
  else
  {
    uint64_t v40 = v42;
    sub_1000828FC(v39, (uint64_t)v42, (void (*)(void))type metadata accessor for CachedServerDataSyncAttempt);
    sub_10000FB40();
    Hasher._combine(_:)(*v40);
    sub_100016218();
    sub_10007F954((uint64_t)v40, (void (*)(void))type metadata accessor for CachedServerDataSyncAttempt);
  }
  sub_10000A484();
}

void sub_100078300()
{
  sub_10000A46C();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v154 = type metadata accessor for CachedServerDataSyncAttempt(0);
  sub_1000082F8();
  __chkstk_darwin(v6);
  sub_10000D2F0();
  v152 = (unsigned __int8 *)v7;
  uint64_t v153 = sub_100011D80(&qword_10012E6D0);
  sub_1000082F8();
  __chkstk_darwin(v8);
  sub_100011FB8();
  uint64_t v9 = sub_100011D80(&qword_10012E4A0);
  uint64_t v10 = sub_1000085F4(v9);
  __chkstk_darwin(v10);
  sub_100008324();
  uint64_t v155 = v11;
  sub_100016A48();
  __chkstk_darwin(v12);
  sub_100016908();
  uint64_t v156 = v13;
  sub_100016A48();
  __chkstk_darwin(v14);
  v163 = &v148[-v15];
  type metadata accessor for Date();
  sub_10000BFC4();
  uint64_t v171 = v17;
  uint64_t v172 = v16;
  __chkstk_darwin(v16);
  sub_10000D2F0();
  uint64_t v167 = v18;
  uint64_t v173 = sub_100011D80(&qword_10012E6D8);
  sub_1000082F8();
  __chkstk_darwin(v19);
  sub_100008324();
  uint64_t v159 = v20;
  sub_100016A48();
  __chkstk_darwin(v21);
  sub_100016908();
  uint64_t v162 = v22;
  sub_100016A48();
  __chkstk_darwin(v23);
  sub_100016908();
  v170 = (unsigned char *)v24;
  sub_100016A48();
  __chkstk_darwin(v25);
  char v27 = &v148[-v26];
  uint64_t v28 = sub_100011D80(&qword_10012E458);
  uint64_t v29 = sub_1000085F4(v28);
  __chkstk_darwin(v29);
  sub_100008324();
  uint64_t v157 = v30;
  sub_100016A48();
  __chkstk_darwin(v31);
  sub_100016908();
  uint64_t v158 = v32;
  sub_100016A48();
  __chkstk_darwin(v33);
  sub_100016908();
  uint64_t v160 = v34;
  sub_100016A48();
  __chkstk_darwin(v35);
  sub_100016908();
  uint64_t v161 = v36;
  sub_100016A48();
  __chkstk_darwin(v37);
  sub_100016908();
  uint64_t v165 = v38;
  sub_100016A48();
  __chkstk_darwin(v39);
  sub_100016908();
  uint64_t v164 = v40;
  sub_100016A48();
  __chkstk_darwin(v41);
  sub_100016908();
  uint64_t v166 = v42;
  sub_100016A48();
  __chkstk_darwin(v43);
  sub_100016908();
  uint64_t v168 = v44;
  sub_100016A48();
  __chkstk_darwin(v45);
  sub_100016908();
  uint64_t v169 = v46;
  sub_100016A48();
  uint64_t v48 = __chkstk_darwin(v47);
  int v50 = &v148[-v49];
  __chkstk_darwin(v48);
  sub_1000830F8();
  __chkstk_darwin(v51);
  long long v53 = &v148[-v52];
  sub_100007E78(v5, (uint64_t)v181, &qword_10012E460);
  uint64_t v174 = v3;
  sub_100007E78(v3, (uint64_t)v182, &qword_10012E460);
  sub_100007E78((uint64_t)v181, (uint64_t)v183, &qword_10012E460);
  if (sub_100018644((uint64_t)v183) == 1)
  {
    sub_100007E78((uint64_t)v182, (uint64_t)v178, &qword_10012E460);
    if (sub_100018644((uint64_t)v178) == 1) {
      goto LABEL_7;
    }
LABEL_5:
    sub_100007E78((uint64_t)v181, (uint64_t)v178, &qword_10012E460);
    sub_100007E78((uint64_t)v182, (uint64_t)&v179, &qword_10012E460);
    sub_1000726A0(v181, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10007271C);
    sub_1000726A0(v182, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10007271C);
    sub_10007FA40(v178);
    goto LABEL_27;
  }
  sub_100007E78((uint64_t)v182, (uint64_t)v177, &qword_10012E460);
  if (sub_100018644((uint64_t)v177) == 1) {
    goto LABEL_5;
  }
  sub_100007E78((uint64_t)v181, (uint64_t)v175, &qword_10012E460);
  memcpy(v180, v175, sizeof(v180));
  sub_100007E78((uint64_t)v182, (uint64_t)v176, &qword_10012E460);
  memcpy(v178, v176, sizeof(v178));
  if ((sub_10007C690((uint64_t)v180, (uint64_t)v178) & 1) == 0) {
    goto LABEL_27;
  }
LABEL_7:
  uint64_t v151 = v1;
  uint64_t v54 = type metadata accessor for AccountDataState(0);
  sub_10000F678(v5 + *(int *)(v54 + 20), (uint64_t)v53, &qword_10012E458);
  sub_10000F678(v174 + *(int *)(v54 + 20), v0, &qword_10012E458);
  sub_1000830D8();
  uint64_t v56 = (uint64_t)&v27[v55];
  sub_10000F678((uint64_t)v53, (uint64_t)v27, &qword_10012E458);
  sub_10000F678(v0, v56, &qword_10012E458);
  uint64_t v57 = v172;
  sub_10000B2D8((uint64_t)v27, 1, v172);
  if (v58)
  {
    sub_1000188C0(v0, &qword_10012E458);
    sub_1000188C0((uint64_t)v53, &qword_10012E458);
    sub_1000120C0(v56);
    if (!v58) {
      goto LABEL_25;
    }
    sub_1000188C0((uint64_t)v27, &qword_10012E458);
  }
  else
  {
    sub_10000F678((uint64_t)v27, (uint64_t)v50, &qword_10012E458);
    sub_1000120C0(v56);
    if (v58)
    {
      sub_1000188C0(v0, &qword_10012E458);
      uint64_t v59 = (uint64_t)v53;
LABEL_24:
      sub_1000188C0(v59, &qword_10012E458);
      uint64_t v81 = sub_100083140();
      v82(v81);
      goto LABEL_25;
    }
    uint64_t v60 = v57;
    uint64_t v61 = v171;
    v150 = (int *)v5;
    uint64_t v62 = v54;
    uint64_t v63 = v167;
    sub_10001608C();
    sub_100082FA8();
    v64();
    sub_10007F434(&qword_10012E6E0, (void (*)(uint64_t))&type metadata accessor for Date);
    int v149 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v65 = v61;
    uint64_t v57 = v60;
    uint64_t v66 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
    uint64_t v67 = v63;
    uint64_t v54 = v62;
    uint64_t v5 = (uint64_t)v150;
    v66(v67, v60);
    sub_1000188C0(v0, &qword_10012E458);
    sub_1000188C0((uint64_t)v53, &qword_10012E458);
    uint64_t v68 = sub_100083140();
    ((void (*)(uint64_t))v66)(v68);
    sub_1000188C0((uint64_t)v27, &qword_10012E458);
    if ((v149 & 1) == 0) {
      goto LABEL_27;
    }
  }
  uint64_t v69 = v169;
  sub_10000F678(v5 + *(int *)(v54 + 24), v169, &qword_10012E458);
  v150 = (int *)v54;
  uint64_t v70 = v174;
  uint64_t v71 = v174 + *(int *)(v54 + 24);
  uint64_t v72 = v168;
  sub_10000F678(v71, v168, &qword_10012E458);
  sub_1000830D8();
  char v27 = v170;
  uint64_t v74 = (uint64_t)&v170[v73];
  sub_10000F678(v69, (uint64_t)v170, &qword_10012E458);
  uint64_t v75 = sub_10001608C();
  sub_10000F678(v75, v76, &qword_10012E458);
  sub_1000120C0((uint64_t)v27);
  if (v58)
  {
    sub_1000188C0(v72, &qword_10012E458);
    sub_1000188C0(v69, &qword_10012E458);
    sub_1000120C0(v74);
    if (v58)
    {
      sub_1000188C0((uint64_t)v27, &qword_10012E458);
      goto LABEL_29;
    }
LABEL_25:
    uint64_t v83 = &qword_10012E6D8;
    uint64_t v84 = (uint64_t)v27;
LABEL_26:
    sub_1000188C0(v84, v83);
    goto LABEL_27;
  }
  uint64_t v77 = v166;
  sub_10000F678((uint64_t)v27, v166, &qword_10012E458);
  sub_1000120C0(v74);
  if (v78)
  {
    uint64_t v79 = sub_10001608C();
    sub_1000188C0(v79, v80);
    uint64_t v59 = v69;
    goto LABEL_24;
  }
  uint64_t v85 = v171;
  uint64_t v86 = v167;
  sub_100082FA8();
  v87();
  sub_10007F434(&qword_10012E6E0, (void (*)(uint64_t))&type metadata accessor for Date);
  char v88 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v89 = *(void (**)(uint64_t, uint64_t))(v85 + 8);
  v89(v86, v57);
  sub_1000188C0(v72, &qword_10012E458);
  sub_1000188C0(v69, &qword_10012E458);
  v89(v77, v57);
  uint64_t v70 = v174;
  sub_1000188C0((uint64_t)v170, &qword_10012E458);
  if ((v88 & 1) == 0) {
    goto LABEL_27;
  }
LABEL_29:
  uint64_t v90 = v150;
  if ((static Date.== infix(_:_:)() & 1) == 0) {
    goto LABEL_27;
  }
  __int16 v91 = sub_1000830AC(v90[8]);
  if (v58)
  {
    uint64_t v95 = v163;
    uint64_t v94 = v164;
    uint64_t v96 = v165;
    if (v93 != 3) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v95 = v163;
    uint64_t v94 = v164;
    uint64_t v96 = v165;
    if (v93 == 3 || (sub_10007AA58(v91, v92) & 1) == 0) {
      goto LABEL_27;
    }
  }
  uint64_t v97 = v150;
  sub_10000F678(v5 + v150[9], v94, &qword_10012E458);
  sub_10000F678(v70 + v97[9], v96, &qword_10012E458);
  sub_1000830D8();
  uint64_t v98 = v96;
  uint64_t v99 = v57;
  uint64_t v100 = v162;
  uint64_t v102 = v162 + v101;
  uint64_t v103 = sub_100083140();
  sub_10000F678(v103, v104, &qword_10012E458);
  uint64_t v105 = v100;
  uint64_t v106 = v99;
  sub_10000F678(v98, v102, &qword_10012E458);
  sub_10000B2D8(v105, 1, v99);
  if (v58)
  {
    sub_1000188C0(v98, &qword_10012E458);
    uint64_t v105 = v162;
    sub_1000188C0(v94, &qword_10012E458);
    sub_1000120C0(v102);
    if (!v58) {
      goto LABEL_44;
    }
    sub_1000188C0(v105, &qword_10012E458);
  }
  else
  {
    uint64_t v107 = v161;
    sub_10000F678(v105, v161, &qword_10012E458);
    sub_1000120C0(v102);
    if (v108)
    {
      sub_1000188C0(v165, &qword_10012E458);
      sub_1000188C0(v94, &qword_10012E458);
      uint64_t v109 = sub_10008314C();
      v110(v109);
LABEL_44:
      uint64_t v83 = &qword_10012E6D8;
      uint64_t v84 = v105;
      goto LABEL_26;
    }
    uint64_t v111 = v171;
    uint64_t v112 = v167;
    sub_100082FA8();
    v113();
    sub_10007F434(&qword_10012E6E0, (void (*)(uint64_t))&type metadata accessor for Date);
    char v114 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v115 = v5;
    uint64_t v116 = *(void (**)(uint64_t, uint64_t))(v111 + 8);
    v116(v112, v172);
    sub_1000188C0(v165, &qword_10012E458);
    sub_1000188C0(v164, &qword_10012E458);
    v116(v107, v172);
    uint64_t v5 = v115;
    uint64_t v106 = v172;
    sub_1000188C0(v162, &qword_10012E458);
    if ((v114 & 1) == 0) {
      goto LABEL_27;
    }
  }
  __int16 v117 = sub_1000830AC(v150[10]);
  if (v58)
  {
    uint64_t v120 = v160;
    if (v119 != 3) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v120 = v160;
    if (v119 == 3 || (sub_10007AA58(v117, v118) & 1) == 0) {
      goto LABEL_27;
    }
  }
  uint64_t v121 = v106;
  uint64_t v122 = v150;
  sub_10000F678(v5 + v150[11], v120, &qword_10012E458);
  uint64_t v123 = v158;
  sub_10000F678(v70 + v122[11], v158, &qword_10012E458);
  sub_1000830D8();
  uint64_t v124 = v159;
  uint64_t v126 = v159 + v125;
  sub_10000F678(v120, v159, &qword_10012E458);
  uint64_t v105 = v124;
  sub_10000F678(v123, v126, &qword_10012E458);
  sub_10000B2D8(v124, 1, v121);
  if (v58)
  {
    sub_1000188C0(v123, &qword_10012E458);
    uint64_t v105 = v159;
    sub_1000188C0(v120, &qword_10012E458);
    sub_10000B2D8(v126, 1, v121);
    if (v58)
    {
      sub_1000188C0(v105, &qword_10012E458);
LABEL_61:
      uint64_t v135 = (uint64_t)v95;
      uint64_t v136 = v150;
      if (*(void *)(v5 + v150[12]) != *(void *)(v70 + v150[12])) {
        goto LABEL_27;
      }
      sub_10000F678(v5 + v150[13], v135, &qword_10012E4A0);
      uint64_t v137 = v156;
      sub_10000F678(v70 + v136[13], v156, &qword_10012E4A0);
      uint64_t v138 = v151;
      uint64_t v139 = v151 + *(int *)(v153 + 48);
      sub_10000F678(v135, v151, &qword_10012E4A0);
      sub_10000F678(v137, v139, &qword_10012E4A0);
      sub_10000B2D8(v138, 1, v154);
      if (v58)
      {
        sub_1000188C0(v137, &qword_10012E4A0);
        sub_1000188C0(v135, &qword_10012E4A0);
        sub_1000120C0(v139);
        if (v58)
        {
          sub_1000188C0(v138, &qword_10012E4A0);
          goto LABEL_27;
        }
        uint64_t v141 = &qword_10012E6D0;
      }
      else
      {
        sub_10000F678(v138, (uint64_t)v155, &qword_10012E4A0);
        sub_1000120C0(v139);
        if (v140)
        {
          uint64_t v141 = &qword_10012E6D0;
        }
        else
        {
          v142 = v152;
          sub_1000828FC(v139, (uint64_t)v152, (void (*)(void))type metadata accessor for CachedServerDataSyncAttempt);
          if (*v155 == *v142)
          {
            __int16 v143 = v155;
            static Date.== infix(_:_:)();
            sub_10007F954((uint64_t)v142, (void (*)(void))type metadata accessor for CachedServerDataSyncAttempt);
            sub_1000188C0(v156, &qword_10012E4A0);
            uint64_t v144 = sub_100083140();
            sub_1000188C0(v144, v145);
            sub_10007F954((uint64_t)v143, (void (*)(void))type metadata accessor for CachedServerDataSyncAttempt);
            uint64_t v146 = sub_10008314C();
            sub_1000188C0(v146, v147);
            goto LABEL_27;
          }
          sub_10007F954((uint64_t)v142, (void (*)(void))type metadata accessor for CachedServerDataSyncAttempt);
          uint64_t v141 = &qword_10012E4A0;
        }
        sub_1000188C0(v156, &qword_10012E4A0);
        sub_1000188C0(v135, &qword_10012E4A0);
        sub_10007F954((uint64_t)v155, (void (*)(void))type metadata accessor for CachedServerDataSyncAttempt);
      }
      uint64_t v84 = v138;
      uint64_t v83 = v141;
      goto LABEL_26;
    }
    goto LABEL_44;
  }
  uint64_t v127 = v124;
  uint64_t v128 = v157;
  sub_10000F678(v127, v157, &qword_10012E458);
  sub_10000B2D8(v126, 1, v121);
  if (v129)
  {
    sub_1000188C0(v158, &qword_10012E458);
    sub_1000188C0(v160, &qword_10012E458);
    (*(void (**)(uint64_t))(v171 + 8))(v128);
    goto LABEL_44;
  }
  uint64_t v130 = v171;
  uint64_t v131 = v167;
  sub_100082FA8();
  v132();
  sub_10007F434(&qword_10012E6E0, (void (*)(uint64_t))&type metadata accessor for Date);
  char v133 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v134 = *(void (**)(uint64_t, uint64_t))(v130 + 8);
  v134(v131, v121);
  sub_1000188C0(v158, &qword_10012E458);
  sub_1000188C0(v160, &qword_10012E458);
  v134(v157, v121);
  sub_1000188C0(v159, &qword_10012E458);
  if (v133) {
    goto LABEL_61;
  }
LABEL_27:
  sub_10000A484();
}

BOOL sub_100079230(char a1, char a2)
{
  return a1 == a2;
}

void sub_100079240(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t sub_100079268(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F6C796150776172 && a2 == 0xEA00000000006461;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x4173657269707865 && a2 == 0xE900000000000074;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x7466417972746572 && a2 == 0xEA00000000007265;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0xD000000000000011 && a2 == 0x8000000100101EA0 {
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      }
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        BOOL v8 = a1 == 0x6168436C61636F6CLL && a2 == 0xEB0000000065676ELL;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          BOOL v9 = a1 == 0x4274736575716572 && a2 == 0xEE0074416E616765;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else
          {
            BOOL v10 = a1 == 0x746867696C666E69 && a2 == 0xEE0065676E616843;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 6;
            }
            else
            {
              BOOL v11 = a1 == 0x6C6961467473616CLL && a2 == 0xED00007441657275;
              if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 7;
              }
              else if (a1 == 0xD000000000000017 && a2 == 0x8000000100101EC0 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 8;
              }
              else if (a1 == 0xD000000000000013 && a2 == 0x8000000100101EE0)
              {
                swift_bridgeObjectRelease();
                return 9;
              }
              else
              {
                char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if (v12) {
                  return 9;
                }
                else {
                  return 10;
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1000796E4()
{
  return 10;
}

uint64_t sub_1000796EC()
{
  return 0;
}

unint64_t sub_1000796F8(char a1)
{
  unint64_t result = 0x6F6C796150776172;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x4173657269707865;
      break;
    case 2:
      unint64_t result = 0x7466417972746572;
      break;
    case 3:
      unint64_t result = 0xD000000000000011;
      break;
    case 4:
      unint64_t result = 0x6168436C61636F6CLL;
      break;
    case 5:
      unint64_t result = 0x4274736575716572;
      break;
    case 6:
      unint64_t result = 0x746867696C666E69;
      break;
    case 7:
      unint64_t result = 0x6C6961467473616CLL;
      break;
    case 8:
      unint64_t result = 0xD000000000000017;
      break;
    case 9:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_100079874(char *a1, char *a2)
{
  return sub_100079230(*a1, *a2);
}

Swift::Int sub_100079880()
{
  return sub_10007D658(*v0);
}

void sub_10007989C(uint64_t a1)
{
  sub_100079240(a1, *v1);
}

unint64_t sub_1000798A8()
{
  return sub_1000796F8(*v0);
}

uint64_t sub_1000798B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100079268(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000798D8()
{
  return sub_1000796EC();
}

uint64_t sub_1000798F8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1000796E4();
  *a1 = result;
  return result;
}

uint64_t sub_100079920(uint64_t a1)
{
  unint64_t v2 = sub_10007F870();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007995C(uint64_t a1)
{
  unint64_t v2 = sub_10007F870();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100079998()
{
  sub_1000086E4();
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  uint64_t v6 = sub_100011D80(&qword_10012E6A8);
  sub_10000BFC4();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  sub_10000F9D0();
  sub_1000087B0(v5, v5[3]);
  sub_10007F870();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_100007E78(v3, (uint64_t)v12, &qword_10012E460);
  sub_100007E78((uint64_t)v12, (uint64_t)v11, &qword_10012E460);
  sub_10007F9A8();
  sub_100016578();
  if (!v1)
  {
    uint64_t v10 = type metadata accessor for AccountDataState(0);
    LOBYTE(v11[0]) = 1;
    type metadata accessor for Date();
    sub_10007F434(&qword_10012E6B8, (void (*)(uint64_t))&type metadata accessor for Date);
    sub_100012264();
    LOBYTE(v11[0]) = 2;
    sub_100012264();
    LOBYTE(v11[0]) = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11[0] = *(_WORD *)(v3 + *(int *)(v10 + 32));
    sub_10007F9F4();
    sub_100016578();
    LOBYTE(v11[0]) = 5;
    sub_100012264();
    v11[0] = *(_WORD *)(v3 + *(int *)(v10 + 40));
    sub_100016578();
    LOBYTE(v11[0]) = 7;
    sub_100012264();
    LOBYTE(v11[0]) = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11[0]) = 9;
    type metadata accessor for CachedServerDataSyncAttempt(0);
    sub_10007F434(&qword_10012E6C8, (void (*)(uint64_t))type metadata accessor for CachedServerDataSyncAttempt);
    sub_100016578();
  }
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v2, v6);
  sub_100009750();
}

void sub_100079CFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11)
{
  sub_1000086E4();
  uint64_t v60 = v11;
  uint64_t v14 = v13;
  uint64_t v51 = v15;
  uint64_t v16 = sub_100011D80(&qword_10012E4A0);
  uint64_t v17 = sub_1000085F4(v16);
  __chkstk_darwin(v17);
  sub_1000164C0(v18, v49[0]);
  type metadata accessor for Date();
  sub_10000BFC4();
  uint64_t v57 = v20;
  uint64_t v58 = v19;
  __chkstk_darwin(v19);
  sub_10000D2F0();
  uint64_t v53 = v21;
  uint64_t v22 = sub_100011D80(&qword_10012E458);
  uint64_t v23 = sub_1000085F4(v22);
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v26 = (char *)v49 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v29 = (char *)v49 - v28;
  uint64_t v30 = __chkstk_darwin(v27);
  uint64_t v32 = (char *)v49 - v31;
  __chkstk_darwin(v30);
  uint64_t v34 = (char *)v49 - v33;
  sub_100011D80(&qword_10012E678);
  sub_10000BFC4();
  uint64_t v54 = v36;
  uint64_t v55 = v35;
  __chkstk_darwin(v35);
  sub_100011FB8();
  uint64_t v62 = (int *)type metadata accessor for AccountDataState(0);
  sub_1000082F8();
  __chkstk_darwin(v37);
  sub_10000D2F0();
  uint64_t v61 = v38;
  uint64_t v39 = v14[3];
  uint64_t v59 = v14;
  sub_1000087B0(v14, v39);
  sub_10007F870();
  uint64_t v56 = v12;
  uint64_t v40 = v60;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v40)
  {
    sub_10000D47C((uint64_t)v59);
  }
  else
  {
    uint64_t v60 = v29;
    int v50 = v26;
    sub_10007F8BC();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_100007E78((uint64_t)&v64, (uint64_t)v63, &qword_10012E460);
    uint64_t v41 = v61;
    sub_100007E78((uint64_t)v63, v61, &qword_10012E460);
    LOBYTE(a11) = 1;
    uint64_t v42 = sub_10007F434(&qword_10012E690, (void (*)(uint64_t))&type metadata accessor for Date);
    sub_10000A3E8();
    sub_100007E78((uint64_t)v34, v41 + v62[5], &qword_10012E458);
    sub_1000161D0(2);
    sub_10000A3E8();
    sub_100007E78((uint64_t)v32, v41 + v62[6], &qword_10012E458);
    sub_1000161D0(3);
    sub_100082FE4();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v49[1] = v42;
    uint64_t v43 = v62;
    sub_100082FA8();
    v44();
    sub_10007F908();
    sub_100016350();
    *(_WORD *)(v41 + v43[8]) = a11;
    sub_1000161D0(5);
    uint64_t v45 = (uint64_t)v60;
    sub_100082FE4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_100007E78(v45, v41 + v43[9], &qword_10012E458);
    sub_100016350();
    *(_WORD *)(v41 + v43[10]) = a11;
    sub_1000161D0(7);
    uint64_t v46 = (uint64_t)v50;
    sub_100082FE4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_100007E78(v46, v41 + v43[11], &qword_10012E458);
    *(void *)(v41 + v62[12]) = KeyedDecodingContainer.decode(_:forKey:)();
    type metadata accessor for CachedServerDataSyncAttempt(0);
    sub_10007F434(&qword_10012E6A0, (void (*)(uint64_t))type metadata accessor for CachedServerDataSyncAttempt);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_1000084F8();
    v47();
    uint64_t v48 = v61;
    sub_100007E78(v52, v61 + v62[13], &qword_10012E4A0);
    sub_10000FCCC(v48, v51, (void (*)(void))type metadata accessor for AccountDataState);
    sub_10000D47C((uint64_t)v59);
    sub_10007F954(v48, (void (*)(void))type metadata accessor for AccountDataState);
  }
  sub_100009750();
}

Swift::Int sub_10007A468()
{
  return sub_10007B628((void (*)(unsigned char *))sub_100077D7C);
}

Swift::Int sub_10007A498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007BA78(a1, a2, a3, (void (*)(unsigned char *))sub_100077D7C);
}

void sub_10007A4B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100079CFC(a1, a2, a3, a4, a5, a6, a7, a8, vars0, *(int *)vars8, *(__int16 *)&vars8[4]);
}

void sub_10007A4C8()
{
}

uint64_t sub_10007A4E4(char a1)
{
  if (a1) {
    return 0x6C616E6F73726570;
  }
  else {
    return 0x79616C506F747561;
  }
}

uint64_t sub_10007A528(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100114DD8, v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t sub_10007A580(char *a1, char *a2)
{
  return sub_1000BA180(*a1, *a2);
}

Swift::Int sub_10007A58C()
{
  return sub_10007A594();
}

Swift::Int sub_10007A594()
{
  return sub_10007A6BC();
}

Swift::Int sub_10007A5A0()
{
  return sub_10007A854();
}

Swift::Int sub_10007A5AC(char a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_10007A5F4()
{
  return sub_10007A630();
}

Swift::Int sub_10007A614()
{
  return sub_10007A630();
}

Swift::Int sub_10007A630()
{
  return Hasher._finalize()();
}

Swift::Int sub_10007A66C(char a1)
{
  sub_10000F710();
  sub_1000BA298((uint64_t)v3, a1);
  return Hasher._finalize()();
}

uint64_t sub_10007A6AC()
{
  return sub_1000BA35C();
}

Swift::Int sub_10007A6B4()
{
  return sub_10007A6BC();
}

Swift::Int sub_10007A6BC()
{
  return Hasher._finalize()();
}

Swift::Int sub_10007A748(uint64_t a1, char a2)
{
  return Hasher._finalize()();
}

Swift::Int sub_10007A794()
{
  return sub_10007A7D0();
}

Swift::Int sub_10007A7B4()
{
  return sub_10007A7D0();
}

Swift::Int sub_10007A7D0()
{
  return Hasher._finalize()();
}

Swift::Int sub_10007A810(uint64_t a1, char a2)
{
  Hasher.init(_seed:)();
  sub_1000BA298((uint64_t)v4, a2);
  return Hasher._finalize()();
}

Swift::Int sub_10007A854()
{
  return Hasher._finalize()();
}

uint64_t sub_10007A8D0@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10007A528(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10007A900@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10007A4E4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10007A92C()
{
  return sub_10007A4E4(*v0);
}

uint64_t sub_10007A934@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10007A57C(a1);
  *a2 = result;
  return result;
}

void sub_10007A95C(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_10007A968(uint64_t a1)
{
  unint64_t v2 = sub_100082844();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007A9A4(uint64_t a1)
{
  unint64_t v2 = sub_100082844();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10007A9E0(void *a1@<X8>)
{
  *a1 = &off_100114E28;
}

void sub_10007A9F0()
{
  sub_10000F96C();
  if (v1 == 2)
  {
    Swift::UInt8 v2 = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    Swift::UInt8 v2 = v0 & 1;
  }
  Hasher._combine(_:)(v2);
  if ((v0 & 0xFF00) == 0x200)
  {
    LOBYTE(v3) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    int v3 = (v0 >> 8) & 1;
  }
  Hasher._combine(_:)(v3);
}

uint64_t sub_10007AA58(__int16 a1, int a2)
{
  if (a1 == 2)
  {
    if (a2 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if (a2 == 2 || ((((a1 & 1) == 0) ^ a2) & 1) == 0) {
      return v2;
    }
  }
  if ((a1 & 0xFF00) == 0x200)
  {
    if (BYTE1(a2) != 2) {
      return 0;
    }
  }
  else if (BYTE1(a2) == 2 || ((((a1 & 0x100) == 0) ^ ((unsigned __int16)(a2 & 0x100) >> 8)) & 1) == 0)
  {
    return 0;
  }
  return 1;
}

uint64_t sub_10007AADC(void *a1)
{
  sub_100011D80(&qword_10012EA20);
  sub_10000BFC4();
  __chkstk_darwin(v3);
  sub_100008544();
  sub_1000087B0(a1, a1[3]);
  sub_100082844();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v1)
  {
    sub_10008316C();
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  sub_1000163D8();
  return v4();
}

Swift::Int sub_10007ABFC()
{
  return Hasher._finalize()();
}

uint64_t sub_10007AC3C(void *a1)
{
  sub_100011D80(&qword_10012EA10);
  sub_10000BFC4();
  __chkstk_darwin(v3);
  sub_10000F728();
  uint64_t v4 = a1[3];
  sub_1000087B0(a1, v4);
  sub_100082844();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_10000D47C((uint64_t)a1);
  }
  else
  {
    unsigned __int8 v5 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    sub_10008316C();
    int v6 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    sub_1000163D8();
    v7();
    sub_10000D47C((uint64_t)a1);
    return v5 | (v6 << 8);
  }
  return v4;
}

void sub_10007AD9C()
{
  sub_100009C70();
  sub_10007F434(&qword_10012EA40, (void (*)(uint64_t))&type metadata accessor for AccountIdentity.DSID);
  sub_10000801C();
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v1 = type metadata accessor for AccountDataServerRequest.Put(0);
  Hasher._combine(_:)(*(void *)(v0 + *(int *)(v1 + 20)));
  uint64_t v2 = (unsigned __int8 *)(v0 + *(int *)(v1 + 24));
  int v3 = *v2;
  int v4 = v2[1];
  if (v3 == 2)
  {
    Swift::UInt8 v5 = 0;
  }
  else
  {
    Swift::UInt8 v5 = v3 & 1;
    sub_10001616C();
  }
  Hasher._combine(_:)(v5);
  if (v4 == 2)
  {
    Swift::UInt8 v6 = 0;
  }
  else
  {
    Swift::UInt8 v6 = v4 & 1;
    sub_10001616C();
  }
  Hasher._combine(_:)(v6);
}

uint64_t sub_10007AE80(uint64_t a1, uint64_t a2)
{
  if ((static AccountIdentity.DSID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for AccountDataServerRequest.Put(0);
  if (*(void *)(a1 + *(int *)(v4 + 20)) != *(void *)(a2 + *(int *)(v4 + 20))) {
    return 0;
  }
  uint64_t v5 = *(int *)(v4 + 24);
  int v6 = *(unsigned __int16 *)(a2 + v5);
  __int16 v7 = *(_WORD *)(a1 + v5);
  return sub_10007AA58(v7, v6);
}

uint64_t sub_10007AEF4()
{
  sub_100009C70();
  sub_10007F434(&qword_10012EA40, (void (*)(uint64_t))&type metadata accessor for AccountIdentity.DSID);
  sub_10000801C();
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int sub_10007AF70()
{
  return Hasher._finalize()();
}

uint64_t sub_10007AFF0()
{
  uint64_t v4 = type metadata accessor for AccountDataServerRequest.Get(0);
  uint64_t v5 = sub_1000085F4(v4);
  __chkstk_darwin(v5);
  uint64_t v6 = sub_100082FF8();
  sub_1000082F8();
  __chkstk_darwin(v7);
  uint64_t v8 = sub_10000BD58();
  type metadata accessor for AccountDataServerRequest(v8);
  sub_1000082F8();
  __chkstk_darwin(v9);
  sub_10000F728();
  sub_10000FCCC(v0, v3, (void (*)(void))type metadata accessor for AccountDataServerRequest);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = sub_10008314C();
    sub_1000828FC(v10, v11, v12);
    Hasher._combine(_:)(1uLL);
    type metadata accessor for AccountIdentity.DSID();
    sub_10007F434(&qword_10012EA40, (void (*)(uint64_t))&type metadata accessor for AccountIdentity.DSID);
    sub_10000801C();
    dispatch thunk of Hashable.hash(into:)();
    uint64_t v13 = type metadata accessor for AccountDataServerRequest.Get;
    uint64_t v14 = v2;
  }
  else
  {
    sub_1000828FC(v3, v1, (void (*)(void))type metadata accessor for AccountDataServerRequest.Put);
    Hasher._combine(_:)(0);
    type metadata accessor for AccountIdentity.DSID();
    sub_10007F434(&qword_10012EA40, (void (*)(uint64_t))&type metadata accessor for AccountIdentity.DSID);
    sub_10000801C();
    dispatch thunk of Hashable.hash(into:)();
    Hasher._combine(_:)(*(void *)(v1 + *(int *)(v6 + 20)));
    uint64_t v15 = (unsigned __int8 *)(v1 + *(int *)(v6 + 24));
    int v16 = *v15;
    int v17 = v15[1];
    if (v16 == 2)
    {
      Swift::UInt8 v18 = 0;
    }
    else
    {
      Swift::UInt8 v18 = v16 & 1;
      sub_10001616C();
    }
    Hasher._combine(_:)(v18);
    if (v17 == 2)
    {
      Swift::UInt8 v19 = 0;
    }
    else
    {
      Swift::UInt8 v19 = v17 & 1;
      sub_10001616C();
    }
    Hasher._combine(_:)(v19);
    uint64_t v13 = type metadata accessor for AccountDataServerRequest.Put;
    uint64_t v14 = v1;
  }
  return sub_10007F954(v14, (void (*)(void))v13);
}

void sub_10007B280()
{
  sub_10000A46C();
  uint64_t v28 = v2;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for AccountDataServerRequest.Get(0);
  uint64_t v6 = sub_1000085F4(v5);
  __chkstk_darwin(v6);
  uint64_t v7 = sub_100082FF8();
  sub_1000082F8();
  __chkstk_darwin(v8);
  sub_10000A49C();
  type metadata accessor for AccountDataServerRequest(0);
  sub_1000082F8();
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v27 - v13;
  uint64_t v15 = sub_100011D80(&qword_10012EA48);
  uint64_t v16 = sub_1000085F4(v15);
  __chkstk_darwin(v16);
  sub_100008338();
  uint64_t v19 = v18 - v17;
  uint64_t v21 = v18 - v17 + *(int *)(v20 + 56);
  sub_10000FCCC(v4, v18 - v17, (void (*)(void))type metadata accessor for AccountDataServerRequest);
  sub_10000FCCC(v28, v21, (void (*)(void))type metadata accessor for AccountDataServerRequest);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_10000FCCC(v19, (uint64_t)v12, (void (*)(void))type metadata accessor for AccountDataServerRequest);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_1000828FC(v21, v1, (void (*)(void))type metadata accessor for AccountDataServerRequest.Get);
      sub_10008314C();
      static AccountIdentity.DSID.== infix(_:_:)();
      sub_10007F954(v1, (void (*)(void))type metadata accessor for AccountDataServerRequest.Get);
      sub_10007F954((uint64_t)v12, (void (*)(void))type metadata accessor for AccountDataServerRequest.Get);
      sub_10007F954(v19, (void (*)(void))type metadata accessor for AccountDataServerRequest);
      goto LABEL_12;
    }
    uint64_t v22 = type metadata accessor for AccountDataServerRequest.Get;
    uint64_t v23 = (uint64_t)v12;
LABEL_7:
    sub_10007F954(v23, (void (*)(void))v22);
    sub_1000188C0(v19, &qword_10012EA48);
    goto LABEL_12;
  }
  sub_10000FCCC(v19, (uint64_t)v14, (void (*)(void))type metadata accessor for AccountDataServerRequest);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v22 = type metadata accessor for AccountDataServerRequest.Put;
    uint64_t v23 = (uint64_t)v14;
    goto LABEL_7;
  }
  uint64_t v24 = sub_10001608C();
  sub_1000828FC(v24, v25, v26);
  if ((static AccountIdentity.DSID.== infix(_:_:)() & 1) != 0
    && *(void *)&v14[*(int *)(v7 + 20)] == *(void *)(v0 + *(int *)(v7 + 20)))
  {
    sub_10007AA58(*(_WORD *)&v14[*(int *)(v7 + 24)], *(unsigned __int16 *)(v0 + *(int *)(v7 + 24)));
  }
  sub_10007F954(v0, (void (*)(void))type metadata accessor for AccountDataServerRequest.Put);
  sub_10007F954((uint64_t)v14, (void (*)(void))type metadata accessor for AccountDataServerRequest.Put);
  sub_10007F954(v19, (void (*)(void))type metadata accessor for AccountDataServerRequest);
LABEL_12:
  sub_10000A484();
}

Swift::Int sub_10007B628(void (*a1)(unsigned char *))
{
  sub_10000F710();
  a1(v3);
  return Hasher._finalize()();
}

void sub_10007B668()
{
  sub_10000A46C();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for Date();
  sub_10000BFC4();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  uint64_t v10 = sub_10000BD58();
  uint64_t v11 = type metadata accessor for AccountDataServerResponse.Errors(v10);
  uint64_t v12 = sub_1000085F4(v11);
  __chkstk_darwin(v12);
  sub_100008544();
  uint64_t v13 = sub_100011D80(&qword_10012EA50);
  uint64_t v14 = sub_1000085F4(v13);
  __chkstk_darwin(v14);
  sub_10000A49C();
  uint64_t v16 = v0 + *(int *)(v15 + 56);
  sub_10000FCCC(v5, v0, (void (*)(void))type metadata accessor for AccountDataServerResponse.Errors);
  sub_10000FCCC(v3, v16, (void (*)(void))type metadata accessor for AccountDataServerResponse.Errors);
  uint64_t v17 = sub_100011D80(&qword_10012E868);
  sub_10000B2D8(v0, 1, v17);
  if (!v18)
  {
    sub_10000FCCC(v0, v1, (void (*)(void))type metadata accessor for AccountDataServerResponse.Errors);
    sub_10000B2D8(v16, 1, v17);
    if (!v18)
    {
      sub_100082FA8();
      v19();
      static Date.== infix(_:_:)();
      uint64_t v20 = *(void (**)(void))(v8 + 8);
      sub_1000163D8();
      v20();
      sub_1000163D8();
      v20();
      sub_10007F954(v0, (void (*)(void))type metadata accessor for AccountDataServerResponse.Errors);
      goto LABEL_10;
    }
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1, v6);
LABEL_9:
    sub_1000188C0(v0, &qword_10012EA50);
    goto LABEL_10;
  }
  sub_10000B2D8(v16, 1, v17);
  if (!v18) {
    goto LABEL_9;
  }
  sub_10007F954(v0, (void (*)(void))type metadata accessor for AccountDataServerResponse.Errors);
LABEL_10:
  sub_10000A484();
}

Swift::Int sub_10007B8AC()
{
  return sub_10007ABFC();
}

void sub_10007B8B4()
{
}

Swift::Int sub_10007B8BC()
{
  return Hasher._finalize()();
}

uint64_t sub_10007B900@<X0>(void *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t result = sub_10007AC3C(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_10007B92C(void *a1)
{
  return sub_10007AADC(a1);
}

uint64_t sub_10007B948(__int16 *a1, unsigned __int16 *a2)
{
  return sub_10007AA58(*a1, *a2);
}

Swift::Int sub_10007B954()
{
  return sub_10007B628((void (*)(unsigned char *))sub_10007AD9C);
}

Swift::Int sub_10007B984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007BA78(a1, a2, a3, (void (*)(unsigned char *))sub_10007AD9C);
}

Swift::Int sub_10007B9A8()
{
  return Hasher._finalize()();
}

Swift::Int sub_10007BA30()
{
  return sub_10007B628((void (*)(unsigned char *))sub_10007AFF0);
}

Swift::Int sub_10007BA60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007BA78(a1, a2, a3, (void (*)(unsigned char *))sub_10007AFF0);
}

Swift::Int sub_10007BA78(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

uint64_t sub_10007BAD0(uint64_t a1)
{
  memcpy(__dst, v1, sizeof(__dst));
  sub_1000758A8((uint64_t)__dst);
  sub_10007C40C(a1);
  sub_10007FC88((uint64_t)__dst);
  uint64_t v3 = type metadata accessor for AccountDataServerResponse(0);
  type metadata accessor for Date();
  sub_10007F434(&qword_10012E670, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(void *)&v1[*(int *)(v3 + 24)]);
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t sub_10007BBD0(char *__src, char *a2)
{
  memcpy(v6, __src, sizeof(v6));
  memcpy(__dst, a2, sizeof(__dst));
  if ((sub_10007C690((uint64_t)v6, (uint64_t)__dst) & 1) == 0) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for AccountDataServerResponse(0);
  if ((static Date.== infix(_:_:)() & 1) == 0
    || *(void *)&__src[*(int *)(v4 + 24)] != *(void *)&a2[*(int *)(v4 + 24)])
  {
    return 0;
  }
  return static Date.== infix(_:_:)();
}

Swift::Int sub_10007BC9C()
{
  Hasher.init(_seed:)();
  memcpy(__dst, v0, sizeof(__dst));
  sub_1000758A8((uint64_t)__dst);
  sub_10007C40C((uint64_t)&v3);
  sub_10007FC88((uint64_t)__dst);
  uint64_t v1 = type metadata accessor for AccountDataServerResponse(0);
  type metadata accessor for Date();
  sub_10007F434(&qword_10012E670, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(void *)&v0[*(int *)(v1 + 24)]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int sub_10007BDB0(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  memcpy(__dst, v2, sizeof(__dst));
  sub_1000758A8((uint64_t)__dst);
  sub_10007C40C((uint64_t)&v5);
  sub_10007FC88((uint64_t)__dst);
  type metadata accessor for Date();
  sub_10007F434(&qword_10012E670, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(void *)&v2[*(int *)(a2 + 24)]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_10007BEB0@<X0>(__int16 a1@<W0>, uint64_t a2@<X8>)
{
  if (a1 == 2) {
    char v3 = *(unsigned char *)(v2 + 24);
  }
  else {
    char v3 = a1 & 1;
  }
  if ((a1 & 0xFF00) == 0x200) {
    char v4 = *(unsigned char *)(v2 + 193);
  }
  else {
    char v4 = HIBYTE(a1) & 1;
  }
  uint64_t v5 = *(void *)(v2 + 32);
  uint64_t v6 = *(void *)(v2 + 40);
  uint64_t v7 = *(void *)(v2 + 72);
  char v8 = *(unsigned char *)(v2 + 88);
  char v33 = *(unsigned char *)(v2 + 192);
  char v9 = *(unsigned char *)(v2 + 89);
  *(void *)(a2 + 16) = *(void *)(v2 + 16);
  char v10 = *(unsigned char *)(v2 + 90);
  *(unsigned char *)(a2 + 24) = v3;
  char v11 = *(unsigned char *)(v2 + 91);
  *(void *)(a2 + 32) = v5;
  uint64_t v12 = *(void *)(v2 + 96);
  *(void *)(a2 + 72) = v7;
  LOBYTE(v7) = *(unsigned char *)(v2 + 104);
  *(unsigned char *)(a2 + 8_Block_object_dispose(&a9, 8) = v8;
  char v13 = *(unsigned char *)(v2 + 105);
  *(unsigned char *)(a2 + 89) = v9;
  char v14 = *(unsigned char *)(v2 + 106);
  *(unsigned char *)(a2 + 90) = v10;
  char v15 = *(unsigned char *)(v2 + 107);
  *(unsigned char *)(a2 + 91) = v11;
  char v16 = *(unsigned char *)(v2 + 108);
  *(void *)(a2 + 96) = v12;
  LOBYTE(v12) = *(unsigned char *)(v2 + 109);
  *(unsigned char *)(a2 + 104) = v7;
  *(unsigned char *)(a2 + 105) = v13;
  uint64_t v17 = *(void *)(v2 + 112);
  uint64_t v18 = *(void *)(v2 + 120);
  *(unsigned char *)(a2 + 106) = v14;
  *(unsigned char *)(a2 + 107) = v15;
  uint64_t v19 = *(void *)(v2 + 128);
  uint64_t v20 = *(void *)(v2 + 136);
  *(unsigned char *)(a2 + 10_Block_object_dispose(&a9, 8) = v16;
  *(unsigned char *)(a2 + 109) = v12;
  uint64_t v21 = *(void *)(v2 + 144);
  uint64_t v22 = *(void *)(v2 + 152);
  *(void *)(a2 + 112) = v17;
  LOBYTE(v12) = *(unsigned char *)(v2 + 160);
  *(void *)(a2 + 12_Block_object_dispose(&a9, 8) = v19;
  LOBYTE(v17) = *(unsigned char *)(v2 + 161);
  *(void *)(a2 + 144) = v21;
  *(unsigned char *)(a2 + 160) = v12;
  uint64_t v23 = *(void *)(v2 + 168);
  uint64_t v24 = *(void *)(v2 + 176);
  *(unsigned char *)(a2 + 161) = v17;
  uint64_t v25 = *(void *)(v2 + 184);
  *(void *)(a2 + 16_Block_object_dispose(&a9, 8) = v23;
  LOBYTE(v23) = *(unsigned char *)(v2 + 194);
  *(void *)(a2 + 184) = v25;
  *(unsigned char *)(a2 + 192) = v33;
  *(unsigned char *)(a2 + 193) = v4 & 1;
  uint64_t v26 = *(void *)(v2 + 200);
  uint64_t v27 = *(void *)(v2 + 208);
  *(unsigned char *)(a2 + 194) = v23;
  LOBYTE(v23) = *(unsigned char *)(v2 + 216);
  *(void *)(a2 + 200) = v26;
  *(void *)(a2 + 20_Block_object_dispose(&a9, 8) = v27;
  uint64_t v28 = *(void *)(v2 + 224);
  *(unsigned char *)(a2 + 216) = v23;
  *(void *)(a2 + 224) = v28;
  uint64_t v29 = *(void *)(v2 + 8);
  *(void *)a2 = *(void *)v2;
  *(void *)(a2 + _Block_object_dispose(&a9, 8) = v29;
  *(void *)(a2 + 64) = *(void *)(v2 + 64);
  long long v30 = *(_OWORD *)(v2 + 48);
  uint64_t v31 = *(void *)(v2 + 80);
  *(void *)(a2 + 40) = v6;
  *(_OWORD *)(a2 + 4_Block_object_dispose(&a9, 8) = v30;
  *(void *)(a2 + 80) = v31;
  *(void *)(a2 + 120) = v18;
  *(void *)(a2 + 136) = v20;
  *(void *)(a2 + 152) = v22;
  *(void *)(a2 + 176) = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_10007C094()
{
  uint64_t v6 = sub_1000B0EA4();
  uint64_t v5 = 0;
  long long v3 = 0u;
  long long v4 = 0u;
  sub_1000B0CF0((uint64_t)&v3, 0xD000000000000013, 0x8000000100101E60);
  uint64_t v2 = sub_1000B0EA4();
  uint64_t v5 = 0;
  long long v3 = 0u;
  long long v4 = 0u;
  sub_1000B0CF0((uint64_t)&v3, 0xD000000000000013, 0x8000000100101E60);
  char v0 = sub_10007C15C(v6, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

uint64_t sub_10007C15C(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v20 = result + 64;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 64);
  int64_t v21 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v8 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v9 = v8 | (v4 << 6);
LABEL_8:
      uint64_t v10 = *(void *)(v3 + 56);
      char v11 = (void *)(*(void *)(v3 + 48) + 16 * v9);
      uint64_t v12 = v11[1];
      *(void *)&long long v23 = *v11;
      *((void *)&v23 + 1) = v12;
      sub_10000E170(v10 + 40 * v9, (uint64_t)&v24);
      swift_bridgeObjectRetain();
      goto LABEL_30;
    }
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v13 < v21)
    {
      unint64_t v14 = *(void *)(v20 + 8 * v13);
      if (v14) {
        goto LABEL_12;
      }
      int64_t v15 = v4 + 2;
      ++v4;
      if (v13 + 1 < v21)
      {
        unint64_t v14 = *(void *)(v20 + 8 * v15);
        if (v14) {
          goto LABEL_15;
        }
        int64_t v4 = v13 + 1;
        if (v13 + 2 < v21)
        {
          unint64_t v14 = *(void *)(v20 + 8 * (v13 + 2));
          if (v14)
          {
            v13 += 2;
            goto LABEL_12;
          }
          int64_t v4 = v13 + 2;
          if (v13 + 3 < v21)
          {
            unint64_t v14 = *(void *)(v20 + 8 * (v13 + 3));
            if (v14)
            {
              v13 += 3;
              goto LABEL_12;
            }
            int64_t v15 = v13 + 4;
            int64_t v4 = v13 + 3;
            if (v13 + 4 < v21) {
              break;
            }
          }
        }
      }
    }
LABEL_29:
    unint64_t v7 = 0;
    uint64_t v26 = 0;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v23 = 0u;
LABEL_30:
    sub_100007E78((uint64_t)&v23, (uint64_t)&v27, &qword_10012E588);
    if (!v28) {
      return 1;
    }
    long long v23 = v29;
    long long v24 = v30;
    *(void *)&long long v25 = v31;
    unint64_t v16 = sub_10001169C(v27, v28);
    char v18 = v17;
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0)
    {
      sub_10000DA8C((uint64_t)&v23);
      return 0;
    }
    sub_10000E170(*(void *)(a2 + 56) + 40 * v16, (uint64_t)v22);
    char v19 = static AnyHashable.== infix(_:_:)();
    sub_10000DA8C((uint64_t)v22);
    uint64_t result = sub_10000DA8C((uint64_t)&v23);
    if ((v19 & 1) == 0) {
      return 0;
    }
  }
  unint64_t v14 = *(void *)(v20 + 8 * v15);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v15;
LABEL_12:
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v9 = __clz(__rbit64(v14)) + (v13 << 6);
    int64_t v4 = v13;
    goto LABEL_8;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v21)
    {
      int64_t v4 = v21 - 1;
      goto LABEL_29;
    }
    unint64_t v14 = *(void *)(v20 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_12;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_10007C40C(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  sub_10000860C();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(void *)(v2 + 16));
  Hasher._combine(_:)(*(unsigned char *)(v2 + 24) & 1);
  if (*(void *)(v2 + 40))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v4 = *(void *)(v2 + 48);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    sub_10007F7C0(a1, v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRetain();
  sub_10000860C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_10000860C();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(unsigned char *)(v2 + 88) & 1);
  Hasher._combine(_:)(*(unsigned char *)(v2 + 89) & 1);
  Hasher._combine(_:)(*(unsigned char *)(v2 + 90) & 1);
  Hasher._combine(_:)(*(unsigned char *)(v2 + 91) & 1);
  Hasher._combine(_:)(*(void *)(v2 + 96));
  Hasher._combine(_:)(*(unsigned char *)(v2 + 104) & 1);
  Hasher._combine(_:)(*(unsigned char *)(v2 + 105) & 1);
  Hasher._combine(_:)(*(unsigned char *)(v2 + 106) & 1);
  Hasher._combine(_:)(*(unsigned char *)(v2 + 107) & 1);
  Hasher._combine(_:)(*(unsigned char *)(v2 + 108) & 1);
  Hasher._combine(_:)(*(unsigned char *)(v2 + 109) & 1);
  swift_bridgeObjectRetain();
  sub_10000860C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_10000860C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_10000860C();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(unsigned char *)(v2 + 160) & 1);
  int v5 = *(unsigned __int8 *)(v2 + 161);
  if (v5 == 2)
  {
    Swift::UInt8 v6 = 0;
  }
  else
  {
    Swift::UInt8 v6 = v5 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v6);
  swift_bridgeObjectRetain();
  sub_10000860C();
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v2 + 192) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v7 = *(void *)(v2 + 184);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v7);
  }
  Hasher._combine(_:)(*(unsigned char *)(v2 + 193) & 1);
  Hasher._combine(_:)(*(unsigned char *)(v2 + 194) & 1);
  swift_bridgeObjectRetain();
  sub_10000860C();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(unsigned char *)(v2 + 216) & 1);
  Hasher._combine(_:)(*(void *)(v2 + 224));
}

uint64_t sub_10007C690(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2 || *(void *)(a1 + 8) != *(void *)(a2 + 8))
  {
    _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = sub_1000086FC();
    if ((v6 & 1) == 0) {
      return result;
    }
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)
    || ((*(unsigned __int8 *)(a1 + 24) ^ *(unsigned __int8 *)(a2 + 24)) & 1) != 0)
  {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a2 + 40);
  if (v7)
  {
    if (!v8) {
      return 0;
    }
    if (*(void *)(a1 + 32) != *(void *)(a2 + 32) || v7 != v8)
    {
      _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t result = sub_1000086FC();
      if ((v10 & 1) == 0) {
        return result;
      }
    }
  }
  else if (v8)
  {
    return 0;
  }
  char v11 = *(void **)(a1 + 48);
  uint64_t v12 = *(void **)(a2 + 48);
  if (v11)
  {
    if (!v12 || (sub_10007F670(v11, v12) & 1) == 0) {
      return 0;
    }
  }
  else if (v12)
  {
    return 0;
  }
  if (*(void *)(a1 + 56) != *(void *)(a2 + 56) || *(void *)(a1 + 64) != *(void *)(a2 + 64))
  {
    _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = sub_1000086FC();
    if ((v14 & 1) == 0) {
      return result;
    }
  }
  if (*(void *)(a1 + 72) != *(void *)(a2 + 72) || *(void *)(a1 + 80) != *(void *)(a2 + 80))
  {
    _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = sub_1000086FC();
    if ((v16 & 1) == 0) {
      return result;
    }
  }
  if (((*(unsigned __int8 *)(a1 + 88) ^ *(unsigned __int8 *)(a2 + 88)) & 1) != 0
    || ((*(unsigned __int8 *)(a1 + 89) ^ *(unsigned __int8 *)(a2 + 89)) & 1) != 0
    || ((*(unsigned __int8 *)(a1 + 90) ^ *(unsigned __int8 *)(a2 + 90)) & 1) != 0
    || ((*(unsigned __int8 *)(a1 + 91) ^ *(unsigned __int8 *)(a2 + 91)) & 1) != 0
    || *(void *)(a1 + 96) != *(void *)(a2 + 96)
    || ((*(unsigned __int8 *)(a1 + 104) ^ *(unsigned __int8 *)(a2 + 104)) & 1) != 0
    || ((*(unsigned __int8 *)(a1 + 105) ^ *(unsigned __int8 *)(a2 + 105)) & 1) != 0
    || ((*(unsigned __int8 *)(a1 + 106) ^ *(unsigned __int8 *)(a2 + 106)) & 1) != 0
    || ((*(unsigned __int8 *)(a1 + 107) ^ *(unsigned __int8 *)(a2 + 107)) & 1) != 0
    || ((*(unsigned __int8 *)(a1 + 108) ^ *(unsigned __int8 *)(a2 + 108)) & 1) != 0
    || ((*(unsigned __int8 *)(a1 + 109) ^ *(unsigned __int8 *)(a2 + 109)) & 1) != 0)
  {
    return 0;
  }
  if (*(void *)(a1 + 112) != *(void *)(a2 + 112) || *(void *)(a1 + 120) != *(void *)(a2 + 120))
  {
    _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = sub_1000086FC();
    if ((v18 & 1) == 0) {
      return result;
    }
  }
  if (*(void *)(a1 + 128) != *(void *)(a2 + 128) || *(void *)(a1 + 136) != *(void *)(a2 + 136))
  {
    _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = sub_1000086FC();
    if ((v20 & 1) == 0) {
      return result;
    }
  }
  if (*(void *)(a1 + 144) != *(void *)(a2 + 144) || *(void *)(a1 + 152) != *(void *)(a2 + 152))
  {
    _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = sub_1000086FC();
    if ((v22 & 1) == 0) {
      return result;
    }
  }
  if ((*(unsigned __int8 *)(a1 + 160) ^ *(unsigned __int8 *)(a2 + 160))) {
    return 0;
  }
  int v23 = *(unsigned __int8 *)(a1 + 161);
  int v24 = *(unsigned __int8 *)(a2 + 161);
  if (v23 == 2)
  {
    if (v24 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    BOOL v25 = (v23 & 1) == 0;
    if (v24 == 2 || ((v25 ^ v24) & 1) == 0) {
      return result;
    }
  }
  if (*(void *)(a1 + 168) != *(void *)(a2 + 168) || *(void *)(a1 + 176) != *(void *)(a2 + 176))
  {
    _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = sub_1000086FC();
    if ((v27 & 1) == 0) {
      return result;
    }
  }
  char v28 = *(unsigned char *)(a2 + 192);
  if (*(unsigned char *)(a1 + 192))
  {
    if (*(unsigned char *)(a2 + 192)) {
      goto LABEL_77;
    }
    return 0;
  }
  if (*(void *)(a1 + 184) != *(void *)(a2 + 184)) {
    char v28 = 1;
  }
  if (v28) {
    return 0;
  }
LABEL_77:
  if (((*(unsigned __int8 *)(a1 + 193) ^ *(unsigned __int8 *)(a2 + 193)) & 1) != 0
    || ((*(unsigned __int8 *)(a1 + 194) ^ *(unsigned __int8 *)(a2 + 194)) & 1) != 0)
  {
    return 0;
  }
  BOOL v29 = *(void *)(a1 + 200) == *(void *)(a2 + 200) && *(void *)(a1 + 208) == *(void *)(a2 + 208);
  if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = sub_1000086FC(), (v30 & 1) != 0))
  {
    if (((*(unsigned __int8 *)(a1 + 216) ^ *(unsigned __int8 *)(a2 + 216)) & 1) == 0) {
      return *(void *)(a1 + 224) == *(void *)(a2 + 224);
    }
    return 0;
  }
  return result;
}

uint64_t sub_10007C9BC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E756F6363416361 && a2 == 0xED0000656D614E74;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000100101E60 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    BOOL v6 = a1 == 0x79616C506F747561 && a2 == 0xE800000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else if (a1 == 0xD000000000000014 && a2 == 0x8000000100101F00 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 3;
    }
    else
    {
      BOOL v7 = a1 == 0x72656D75736E6F63 && a2 == 0xEE007473694C6449;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 4;
      }
      else
      {
        BOOL v8 = a1 == 0x6142746964657263 && a2 == 0xED000065636E616CLL;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 5;
        }
        else
        {
          BOOL v9 = a1 == 0x6D614E7473726966 && a2 == 0xE900000000000065;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 6;
          }
          else if (a1 == 0xD000000000000017 && a2 == 0x8000000100101F20 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_bridgeObjectRelease();
            return 7;
          }
          else if (a1 == 0xD000000000000010 && a2 == 0x8000000100101F40 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_bridgeObjectRelease();
            return 8;
          }
          else if (a1 == 0xD000000000000023 && a2 == 0x8000000100101F60 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_bridgeObjectRelease();
            return 9;
          }
          else if (a1 == 0xD000000000000015 && a2 == 0x8000000100101F90 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_bridgeObjectRelease();
            return 10;
          }
          else if (a1 == 0xD000000000000014 && a2 == 0x8000000100101FB0 {
                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          }
          {
            swift_bridgeObjectRelease();
            return 11;
          }
          else
          {
            BOOL v10 = a1 == 0x426F546B73417369 && a2 == 0xEA00000000007975;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 12;
            }
            else if (a1 == 0xD000000000000011 && a2 == 0x8000000100101FD0 {
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            }
            {
              swift_bridgeObjectRelease();
              return 13;
            }
            else
            {
              BOOL v11 = a1 == 0x436461426E497369 && a2 == 0xED00007469646572;
              if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 14;
              }
              else
              {
                BOOL v12 = a1 == 0x696D61466E497369 && a2 == 0xEA0000000000796CLL;
                if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 15;
                }
                else if (a1 == 0xD000000000000014 && a2 == 0x8000000100101FF0 {
                       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                }
                {
                  swift_bridgeObjectRelease();
                  return 16;
                }
                else if (a1 == 0xD000000000000010 && a2 == 0x8000000100102010 {
                       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                }
                {
                  swift_bridgeObjectRelease();
                  return 17;
                }
                else
                {
                  BOOL v13 = a1 == 0x746E756F436F7369 && a2 == 0xEE0065646F437972;
                  if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 18;
                  }
                  else
                  {
                    BOOL v14 = a1 == 0x6E756F43326F7369 && a2 == 0xEF65646F43797274;
                    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    {
                      swift_bridgeObjectRelease();
                      return 19;
                    }
                    else
                    {
                      BOOL v15 = a1 == 0x6E756F43336F7369 && a2 == 0xEF65646F43797274;
                      if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      {
                        swift_bridgeObjectRelease();
                        return 20;
                      }
                      else if (a1 == 0xD000000000000013 && a2 == 0x8000000100102030 {
                             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      }
                      {
                        swift_bridgeObjectRelease();
                        return 21;
                      }
                      else if (a1 == 0xD000000000000019 && a2 == 0x8000000100102050 {
                             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      }
                      {
                        swift_bridgeObjectRelease();
                        return 22;
                      }
                      else
                      {
                        BOOL v16 = a1 == 0x656D614E7473616CLL && a2 == 0xE800000000000000;
                        if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        {
                          swift_bridgeObjectRelease();
                          return 23;
                        }
                        else if (a1 == 0xD000000000000014 && a2 == 0x8000000100102070 {
                               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        }
                        {
                          swift_bridgeObjectRelease();
                          return 24;
                        }
                        else
                        {
                          BOOL v17 = a1 == 0x6C616E6F73726570 && a2 == 0xEF6E6F6974617A69;
                          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                          {
                            swift_bridgeObjectRelease();
                            return 25;
                          }
                          else
                          {
                            BOOL v18 = a1 == 0x65446C6961746572 && a2 == 0xEA00000000006F6DLL;
                            if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                            {
                              swift_bridgeObjectRelease();
                              return 26;
                            }
                            else
                            {
                              BOOL v19 = a1 == 0x6F726665726F7473 && a2 == 0xEC0000006449746ELL;
                              if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                              {
                                swift_bridgeObjectRelease();
                                return 27;
                              }
                              else
                              {
                                BOOL v20 = a1 == 0x6968547265646E75 && a2 == 0xED00006E65657472;
                                if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                {
                                  swift_bridgeObjectRelease();
                                  return 28;
                                }
                                else if (a1 == 0xD000000000000016 && a2 == 0x8000000100102090)
                                {
                                  swift_bridgeObjectRelease();
                                  return 29;
                                }
                                else
                                {
                                  char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  swift_bridgeObjectRelease();
                                  if (v21) {
                                    return 29;
                                  }
                                  else {
                                    return 30;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_10007D650()
{
  return 30;
}

Swift::Int sub_10007D658(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t sub_10007D698(char a1)
{
  uint64_t result = 0x6E756F6363416361;
  switch(a1)
  {
    case 1:
      uint64_t result = 0xD000000000000013;
      break;
    case 2:
      uint64_t result = 0x79616C506F747561;
      break;
    case 3:
    case 11:
    case 16:
    case 24:
      uint64_t result = 0xD000000000000014;
      break;
    case 4:
      uint64_t result = 0x72656D75736E6F63;
      break;
    case 5:
      uint64_t result = 0x6142746964657263;
      break;
    case 6:
      uint64_t result = 0x6D614E7473726966;
      break;
    case 7:
      uint64_t result = 0xD000000000000017;
      break;
    case 8:
      uint64_t result = 0xD000000000000010;
      break;
    case 9:
      uint64_t result = 0xD000000000000023;
      break;
    case 10:
      uint64_t result = 0xD000000000000015;
      break;
    case 12:
      uint64_t result = 0x426F546B73417369;
      break;
    case 13:
      uint64_t result = 0xD000000000000011;
      break;
    case 14:
      uint64_t result = 0x436461426E497369;
      break;
    case 15:
      uint64_t result = 0x696D61466E497369;
      break;
    case 17:
      uint64_t result = 0xD000000000000010;
      break;
    case 18:
      uint64_t result = 0x746E756F436F7369;
      break;
    case 19:
      unsigned int v3 = 846164841;
      goto LABEL_19;
    case 20:
      unsigned int v3 = 862942057;
LABEL_19:
      uint64_t result = v3 | 0x6E756F4300000000;
      break;
    case 21:
      uint64_t result = 0xD000000000000013;
      break;
    case 22:
      uint64_t result = 0xD000000000000019;
      break;
    case 23:
      uint64_t result = 0x656D614E7473616CLL;
      break;
    case 25:
      uint64_t result = 0x6C616E6F73726570;
      break;
    case 26:
      uint64_t result = 0x65446C6961746572;
      break;
    case 27:
      uint64_t result = 0x6F726665726F7473;
      break;
    case 28:
      uint64_t result = 0x6968547265646E75;
      break;
    case 29:
      uint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10007DA60(void *a1)
{
  uint64_t v3 = v1;
  sub_100011D80(&qword_10012E710);
  sub_10000BFC4();
  __chkstk_darwin(v5);
  sub_10000F9D0();
  sub_1000087B0(a1, a1[3]);
  sub_10007FBA8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    sub_1000165E8(*(void *)(v3 + 16), 1);
    sub_100010D20(*(unsigned __int8 *)(v3 + 24), 2);
    sub_100083070(3);
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_100007E78(v3 + 48, (uint64_t)v9, (uint64_t *)&unk_10012E480);
    sub_100007E78((uint64_t)v9, (uint64_t)v8, (uint64_t *)&unk_10012E480);
    sub_100011D80(&qword_10012E6F8);
    sub_10007FD3C(&qword_10012E718, (void (*)(void))sub_10007FDAC);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_100008520(5);
    sub_100008520(6);
    sub_100010D20(*(unsigned __int8 *)(v3 + 88), 7);
    sub_100010D20(*(unsigned __int8 *)(v3 + 89), 8);
    sub_100010D20(*(unsigned __int8 *)(v3 + 90), 9);
    sub_100010D20(*(unsigned __int8 *)(v3 + 91), 10);
    sub_1000165E8(*(void *)(v3 + 96), 11);
    sub_100010D20(*(unsigned __int8 *)(v3 + 104), 12);
    sub_100010D20(*(unsigned __int8 *)(v3 + 105), 13);
    sub_100010D20(*(unsigned __int8 *)(v3 + 106), 14);
    sub_100010D20(*(unsigned __int8 *)(v3 + 107), 15);
    sub_100010D20(*(unsigned __int8 *)(v3 + 108), 16);
    sub_100010D20(*(unsigned __int8 *)(v3 + 109), 17);
    sub_100008520(18);
    sub_100008520(19);
    sub_100008520(20);
    sub_100010D20(*(unsigned __int8 *)(v3 + 160), 21);
    v8[0] = 22;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_100008520(23);
    sub_100083070(24);
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_100010D20(*(unsigned __int8 *)(v3 + 193), 25);
    sub_100010D20(*(unsigned __int8 *)(v3 + 194), 26);
    sub_100008520(27);
    sub_100010D20(*(unsigned __int8 *)(v3 + 216), 28);
    sub_1000165E8(*(void *)(v3 + 224), 29);
  }
  sub_1000163D8();
  return v6();
}

Swift::Int sub_10007DE48()
{
  sub_10000F710();
  sub_10007C40C((uint64_t)v1);
  return Hasher._finalize()();
}

void sub_10007DE80()
{
  sub_1000086E4();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_100011D80(&qword_10012E6E8);
  sub_10000BFC4();
  __chkstk_darwin(v5);
  sub_100008338();
  uint64_t v63 = (uint64_t)v2;
  sub_1000087B0(v2, v2[3]);
  sub_10007FBA8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    sub_10000D47C((uint64_t)v2);
  }
  else
  {
    BOOL v6 = v4;
    uint64_t v7 = sub_100083020();
    uint64_t v9 = v8;
    swift_bridgeObjectRetain();
    uint64_t v58 = v9;
    uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
    char v53 = sub_100082FC8();
    uint64_t v64 = v10;
    LOBYTE(v66[0]) = 3;
    uint64_t v52 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v12 = v11;
    sub_100011D80(&qword_10012E6F8);
    LOBYTE(v65[0]) = 4;
    sub_10007FD3C(&qword_10012E700, (void (*)(void))sub_10007FC3C);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    swift_bridgeObjectRetain();
    uint64_t v57 = v66[0];
    uint64_t v51 = sub_100083020();
    uint64_t v14 = v13;
    swift_bridgeObjectRetain();
    uint64_t v56 = v14;
    uint64_t v50 = sub_100083020();
    uint64_t v16 = v15;
    swift_bridgeObjectRetain();
    uint64_t v55 = v16;
    char v49 = sub_100082FC8();
    char v48 = sub_100082FC8();
    char v47 = sub_100082FC8();
    char v46 = sub_10000A448(10);
    sub_100082FB4();
    uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)();
    char v45 = sub_10000A448(12);
    char v44 = sub_10000A448(13);
    char v43 = sub_10000A448(14);
    char v42 = sub_10000A448(15);
    char v41 = sub_10000A448(16);
    char v40 = sub_10000A448(17);
    uint64_t v18 = sub_10000B14C();
    uint64_t v62 = v19;
    uint64_t v20 = v18;
    swift_bridgeObjectRetain();
    uint64_t v39 = sub_10000B14C();
    uint64_t v61 = v21;
    swift_bridgeObjectRetain();
    uint64_t v38 = sub_10000B14C();
    uint64_t v60 = v22;
    swift_bridgeObjectRetain();
    char v37 = sub_10000D320();
    sub_100082FB4();
    char v36 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v35 = sub_10000B14C();
    uint64_t v59 = v23;
    swift_bridgeObjectRetain();
    sub_100082FB4();
    uint64_t v33 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v34 = v24;
    char v114 = v24 & 1;
    char v32 = sub_10000A448(25);
    char v31 = sub_10000A448(26);
    uint64_t v30 = sub_10000B14C();
    uint64_t v54 = v25;
    LOBYTE(v66[0]) = 28;
    swift_bridgeObjectRetain();
    char v29 = sub_10000D320();
    char v110 = 29;
    uint64_t v28 = KeyedDecodingContainer.decode(_:forKey:)();
    v48 &= 1u;
    v49 &= 1u;
    v44 &= 1u;
    v45 &= 1u;
    v42 &= 1u;
    v43 &= 1u;
    v40 &= 1u;
    v41 &= 1u;
    v37 &= 1u;
    uint64_t v26 = sub_10000836C();
    v27(v26);
    LOBYTE(v65[24]) = v34 & 1;
    v65[0] = v7;
    v65[1] = v58;
    v65[2] = v64;
    LOBYTE(v65[3]) = v53 & 1;
    v65[4] = v52;
    v65[5] = v12;
    v65[6] = v57;
    v65[7] = v51;
    v65[8] = v56;
    v65[9] = v50;
    v65[10] = v55;
    LOBYTE(v65[11]) = v49;
    BYTE1(v65[11]) = v48;
    BYTE2(v65[11]) = v47 & 1;
    BYTE3(v65[11]) = v46 & 1;
    v65[12] = v17;
    LOBYTE(v65[13]) = v45;
    BYTE1(v65[13]) = v44;
    BYTE2(v65[13]) = v43;
    BYTE3(v65[13]) = v42;
    BYTE4(v65[13]) = v41;
    BYTE5(v65[13]) = v40;
    v65[14] = v20;
    v65[15] = v62;
    v65[16] = v39;
    v65[17] = v61;
    v65[18] = v38;
    v65[19] = v60;
    LOBYTE(v65[20]) = v37;
    BYTE1(v65[20]) = v36;
    v65[21] = v35;
    v65[22] = v59;
    v65[23] = v33;
    BYTE1(v65[24]) = v32 & 1;
    BYTE2(v65[24]) = v31 & 1;
    v65[25] = v30;
    v65[26] = v54;
    LOBYTE(v65[27]) = v29 & 1;
    v65[28] = v28;
    sub_1000758A8((uint64_t)v65);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000D47C(v63);
    v66[0] = v7;
    v66[1] = v58;
    v66[2] = v64;
    char v67 = v53 & 1;
    uint64_t v69 = v52;
    uint64_t v70 = v12;
    uint64_t v71 = v57;
    uint64_t v72 = v51;
    uint64_t v73 = v56;
    uint64_t v74 = v50;
    *(_DWORD *)uint64_t v68 = *(_DWORD *)v117;
    *(_DWORD *)&v68[3] = *(_DWORD *)&v117[3];
    uint64_t v75 = v55;
    char v76 = v49;
    char v77 = v48;
    char v78 = v47 & 1;
    char v79 = v46 & 1;
    uint64_t v80 = v17;
    char v81 = v45;
    char v82 = v44;
    char v83 = v43;
    char v84 = v42;
    char v85 = v41;
    char v86 = v40;
    uint64_t v87 = v20;
    uint64_t v88 = v62;
    uint64_t v89 = v39;
    uint64_t v90 = v61;
    uint64_t v91 = v38;
    uint64_t v92 = v60;
    char v93 = v37;
    char v94 = v36;
    int v95 = v115;
    __int16 v96 = v116;
    uint64_t v97 = v35;
    uint64_t v98 = v59;
    uint64_t v99 = v33;
    char v100 = v114;
    char v101 = v32 & 1;
    char v102 = v31 & 1;
    int v103 = v112;
    char v104 = v113;
    uint64_t v105 = v30;
    uint64_t v106 = v54;
    char v107 = v29 & 1;
    *(_DWORD *)&uint64_t v108[3] = *(_DWORD *)&v111[3];
    *(_DWORD *)char v108 = *(_DWORD *)v111;
    uint64_t v109 = v28;
    sub_10007FC88((uint64_t)v66);
    memcpy(v6, v65, 0xE8uLL);
  }
  sub_100009750();
}

uint64_t sub_10007EB58()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10007EBE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v12 = a1 == a5 && a2 == a6;
  if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = sub_1000086FC(), (v14 & 1) != 0))
  {
    if (a3 == a7 && a4 == a8)
    {
      return 1;
    }
    else
    {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

BOOL sub_10007EC80(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_10007EC90(uint64_t a1, char a2)
{
}

uint64_t sub_10007ECB8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x72656D75736E6F63 && a2 == 0xEA00000000006449;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x63617073656D616ELL && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10007EDC0()
{
  return 2;
}

Swift::Int sub_10007EDC8(char a1)
{
  return Hasher._finalize()();
}

uint64_t sub_10007EE10(char a1)
{
  if (a1) {
    return 0x63617073656D616ELL;
  }
  else {
    return 0x72656D75736E6F63;
  }
}

void sub_10007EE50()
{
  sub_1000086E4();
  uint64_t v3 = v2;
  uint64_t v4 = sub_100011D80(&qword_10012EA38);
  sub_10000BFC4();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_10000F728();
  sub_1000087B0(v3, v3[3]);
  sub_100082890();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v0)
  {
    sub_10008316C();
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v4);
  sub_100009750();
}

Swift::Int sub_10007EF78()
{
  return Hasher._finalize()();
}

void sub_10007EFF4()
{
  sub_1000086E4();
  BOOL v2 = v1;
  sub_100011D80(&qword_10012EA28);
  sub_10000BFC4();
  __chkstk_darwin(v3);
  sub_100008338();
  sub_1000087B0(v2, v2[3]);
  sub_100082890();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    sub_10000D47C((uint64_t)v2);
  }
  else
  {
    KeyedDecodingContainer.decode(_:forKey:)();
    sub_10008316C();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v4 = sub_100005AA4();
    v5(v4);
    swift_bridgeObjectRetain();
    sub_10000D47C((uint64_t)v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_100009750();
}

Swift::Int sub_10007F198()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10007F1DC()
{
  return sub_10007D698(*v0);
}

uint64_t sub_10007F1E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10007C9BC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10007F20C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10007D650();
  *a1 = result;
  return result;
}

uint64_t sub_10007F234(uint64_t a1)
{
  unint64_t v2 = sub_10007FBA8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007F270(uint64_t a1)
{
  unint64_t v2 = sub_10007FBA8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10007F2AC(void *a1@<X8>)
{
  sub_10007DE80();
  if (!v1) {
    memcpy(a1, __src, 0xE8uLL);
  }
}

uint64_t sub_10007F300(void *a1)
{
  memcpy(__dst, v1, sizeof(__dst));
  return sub_10007DA60(a1);
}

Swift::Int sub_10007F35C()
{
  Hasher.init(_seed:)();
  sub_10007C40C((uint64_t)v1);
  return Hasher._finalize()();
}

unint64_t sub_10007F3A0()
{
  unint64_t result = qword_10012E660;
  if (!qword_10012E660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012E660);
  }
  return result;
}

uint64_t sub_10007F3EC()
{
  return sub_10007F434(&qword_10012E668, (void (*)(uint64_t))type metadata accessor for AccountDataState);
}

uint64_t sub_10007F434(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

BOOL sub_10007F47C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10007EC80(*a1, *a2);
}

Swift::Int sub_10007F488()
{
  return sub_10007EDC8(*v0);
}

void sub_10007F490(uint64_t a1)
{
  sub_10007EC90(a1, *v1);
}

uint64_t sub_10007F498()
{
  return sub_10007EE10(*v0);
}

uint64_t sub_10007F4A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10007ECB8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10007F4C8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10007EDC0();
  *a1 = result;
  return result;
}

uint64_t sub_10007F4F0(uint64_t a1)
{
  unint64_t v2 = sub_100082890();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007F52C(uint64_t a1)
{
  unint64_t v2 = sub_100082890();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10007F568(void *a1@<X8>)
{
  sub_10007EFF4();
  if (!v1)
  {
    *a1 = v3;
    a1[1] = v4;
    a1[2] = v5;
    a1[3] = v6;
  }
}

void sub_10007F598()
{
}

Swift::Int sub_10007F5B8()
{
  return sub_10007EF78();
}

uint64_t sub_10007F5C4()
{
  return sub_10007EB58();
}

Swift::Int sub_10007F5D0()
{
  return Hasher._finalize()();
}

uint64_t sub_10007F654(uint64_t *a1, uint64_t *a2)
{
  return sub_10007EBE4(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t sub_10007F670(void *a1, void *a2)
{
  unint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t result = a1[4];
  uint64_t v6 = a1[6];
  uint64_t v7 = a1[7];
  uint64_t v8 = a2[6];
  uint64_t v9 = a2[7];
  BOOL v10 = result == a2[4] && a1[5] == a2[5];
  if (v10 || (char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v11 & 1) != 0))
  {
    BOOL v12 = v6 == v8 && v7 == v9;
    if (v12 || (char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v13 & 1) != 0))
    {
      if (v2 == 1) {
        return 1;
      }
      char v14 = a2 + 11;
      uint64_t v15 = a1 + 11;
      unint64_t v16 = 1;
      while (v16 < v2)
      {
        uint64_t v17 = *(v15 - 1);
        uint64_t v18 = *v15;
        uint64_t v19 = *(v14 - 1);
        uint64_t v20 = *v14;
        BOOL v21 = *(v15 - 3) == *(v14 - 3) && *(v15 - 2) == *(v14 - 2);
        if (!v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          return 0;
        }
        BOOL v22 = v17 == v19 && v18 == v20;
        if (!v22 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          return 0;
        }
        ++v16;
        v14 += 4;
        v15 += 4;
        uint64_t result = 1;
        if (v2 == v16) {
          return result;
        }
      }
      __break(1u);
    }
  }
  return result;
}

void sub_10007F7C0(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = a2 + 56;
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v4 += 32;
      --v3;
    }
    while (v3);
  }
}

unint64_t sub_10007F870()
{
  unint64_t result = qword_10012E680;
  if (!qword_10012E680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012E680);
  }
  return result;
}

unint64_t sub_10007F8BC()
{
  unint64_t result = qword_10012E688;
  if (!qword_10012E688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012E688);
  }
  return result;
}

unint64_t sub_10007F908()
{
  unint64_t result = qword_10012E698;
  if (!qword_10012E698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012E698);
  }
  return result;
}

uint64_t sub_10007F954(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_1000082F8();
  sub_1000084F8();
  v3();
  return a1;
}

unint64_t sub_10007F9A8()
{
  unint64_t result = qword_10012E6B0;
  if (!qword_10012E6B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012E6B0);
  }
  return result;
}

unint64_t sub_10007F9F4()
{
  unint64_t result = qword_10012E6C0;
  if (!qword_10012E6C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012E6C0);
  }
  return result;
}

uint64_t *sub_10007FA40(uint64_t *a1)
{
  uint64_t v2 = a1[29];
  uint64_t v3 = a1[30];
  sub_10000667C(*a1, a1[1]);
  sub_10000667C(v2, v3);
  return a1;
}

unint64_t sub_10007FBA8()
{
  unint64_t result = qword_10012E6F0;
  if (!qword_10012E6F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012E6F0);
  }
  return result;
}

uint64_t sub_10007FBF4(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_10007FC3C()
{
  unint64_t result = qword_10012E708;
  if (!qword_10012E708)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012E708);
  }
  return result;
}

uint64_t sub_10007FC88(uint64_t a1)
{
  return a1;
}

uint64_t sub_10007FD3C(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10007FBF4(&qword_10012E6F8);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10007FDAC()
{
  unint64_t result = qword_10012E720;
  if (!qword_10012E720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012E720);
  }
  return result;
}

uint64_t *sub_10007FDFC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AccountIdentity.DSID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    *(_WORD *)((char *)a1 + v_Block_object_dispose(&a9, 8) = *(_WORD *)((char *)a2 + v8);
  }
  return a1;
}

uint64_t sub_10007FED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AccountIdentity.DSID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(_WORD *)(a1 + v7) = *(_WORD *)(a2 + v7);
  return a1;
}

uint64_t sub_10007FF58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AccountIdentity.DSID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (unsigned char *)(a1 + v7);
  uint64_t v9 = (unsigned char *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  return a1;
}

uint64_t sub_10007FFF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AccountIdentity.DSID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(_WORD *)(a1 + v7) = *(_WORD *)(a2 + v7);
  return a1;
}

uint64_t sub_100080074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AccountIdentity.DSID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(_WORD *)(a1 + v7) = *(_WORD *)(a2 + v7);
  return a1;
}

uint64_t sub_1000800F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008010C);
}

uint64_t sub_10008010C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100009C70();
  sub_10000F6F8();
  if (*(_DWORD *)(v6 + 84) == a2)
  {
    uint64_t v7 = sub_10000801C();
    return sub_10001044C(v7, a2, v8);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(v3 + *(int *)(a3 + 24));
    if (v10 >= 2) {
      int v11 = ((v10 + 2147483646) & 0x7FFFFFFF) - 1;
    }
    else {
      int v11 = -2;
    }
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_1000801A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000801BC);
}

void sub_1000801BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_100009768();
  sub_10000F6F8();
  if (*(_DWORD *)(v8 + 84) == a3)
  {
    uint64_t v9 = sub_1000830E4();
    sub_1000101E8(v9, v10, v11, v12);
  }
  else
  {
    *(unsigned char *)(v5 + *(int *)(a4 + 24)) = v4 + 2;
  }
}

uint64_t type metadata accessor for AccountDataServerRequest.Put(uint64_t a1)
{
  return sub_100010474(a1, qword_10012E780);
}

uint64_t sub_10008024C()
{
  uint64_t result = type metadata accessor for AccountIdentity.DSID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1000802F0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v7 = type metadata accessor for AccountIdentity.DSID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    if (EnumCaseMultiPayload != 1)
    {
      uint64_t v9 = type metadata accessor for AccountDataServerRequest.Put(0);
      *(uint64_t *)((char *)a1 + *(int *)(v9 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v9 + 20));
      *(_WORD *)((char *)a1 + *(int *)(v9 + 24)) = *(_WORD *)((char *)a2 + *(int *)(v9 + 24));
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100080408(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v5 = type metadata accessor for AccountIdentity.DSID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v6 = type metadata accessor for AccountDataServerRequest.Put(0);
    *(void *)(a1 + *(int *)(v6 + 20)) = *(void *)(a2 + *(int *)(v6 + 20));
    *(_WORD *)(a1 + *(int *)(v6 + 24)) = *(_WORD *)(a2 + *(int *)(v6 + 24));
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_1000804C8(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_10007F954(a1, (void (*)(void))type metadata accessor for AccountDataServerRequest);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v5 = type metadata accessor for AccountIdentity.DSID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
    if (EnumCaseMultiPayload != 1)
    {
      uint64_t v6 = type metadata accessor for AccountDataServerRequest.Put(0);
      *(void *)(a1 + *(int *)(v6 + 20)) = *(void *)(a2 + *(int *)(v6 + 20));
      *(_WORD *)(a1 + *(int *)(v6 + 24)) = *(_WORD *)(a2 + *(int *)(v6 + 24));
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for AccountDataServerRequest(uint64_t a1)
{
  return sub_100010474(a1, qword_10012E830);
}

uint64_t sub_1000805CC(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v5 = type metadata accessor for AccountIdentity.DSID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v6 = type metadata accessor for AccountDataServerRequest.Put(0);
    *(void *)(a1 + *(int *)(v6 + 20)) = *(void *)(a2 + *(int *)(v6 + 20));
    *(_WORD *)(a1 + *(int *)(v6 + 24)) = *(_WORD *)(a2 + *(int *)(v6 + 24));
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_10008068C(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_10007F954(a1, (void (*)(void))type metadata accessor for AccountDataServerRequest);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v5 = type metadata accessor for AccountIdentity.DSID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
    if (EnumCaseMultiPayload != 1)
    {
      uint64_t v6 = type metadata accessor for AccountDataServerRequest.Put(0);
      *(void *)(a1 + *(int *)(v6 + 20)) = *(void *)(a2 + *(int *)(v6 + 20));
      *(_WORD *)(a1 + *(int *)(v6 + 24)) = *(_WORD *)(a2 + *(int *)(v6 + 24));
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10008077C()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_10008078C()
{
  uint64_t result = type metadata accessor for AccountDataServerRequest.Put(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for AccountIdentity.DSID();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_100080850(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = sub_100011D80(&qword_10012E868);
    if (sub_10001044C((uint64_t)a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v9 = type metadata accessor for Date();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
      sub_1000101E8((uint64_t)a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_100080958(uint64_t a1)
{
  uint64_t v2 = sub_100011D80(&qword_10012E868);
  uint64_t result = sub_10001044C(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = type metadata accessor for Date();
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    return v5(a1, v4);
  }
  return result;
}

void *sub_1000809E8(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_100011D80(&qword_10012E868);
  if (sub_10001044C((uint64_t)a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    sub_1000101E8((uint64_t)a1, 0, 1, v6);
  }
  return a1;
}

void *sub_100080AB4(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_100011D80(&qword_10012E868);
  int v7 = sub_10001044C((uint64_t)a1, 1, v6);
  int v8 = sub_10001044C((uint64_t)a2, 1, v6);
  if (!v7)
  {
    if (!v8)
    {
      uint64_t v11 = type metadata accessor for Date();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 24))(a1, a2, v11);
      return a1;
    }
    sub_1000188C0((uint64_t)a1, &qword_10012E868);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
  sub_1000101E8((uint64_t)a1, 0, 1, v6);
  return a1;
}

void *sub_100080BF4(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_100011D80(&qword_10012E868);
  if (sub_10001044C((uint64_t)a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    sub_1000101E8((uint64_t)a1, 0, 1, v6);
  }
  return a1;
}

void *sub_100080CC0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_100011D80(&qword_10012E868);
  int v7 = sub_10001044C((uint64_t)a1, 1, v6);
  int v8 = sub_10001044C((uint64_t)a2, 1, v6);
  if (!v7)
  {
    if (!v8)
    {
      uint64_t v11 = type metadata accessor for Date();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 40))(a1, a2, v11);
      return a1;
    }
    sub_1000188C0((uint64_t)a1, &qword_10012E868);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
  sub_1000101E8((uint64_t)a1, 0, 1, v6);
  return a1;
}

uint64_t sub_100080E00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100080E14);
}

uint64_t sub_100080E14()
{
  sub_10000F96C();
  uint64_t v2 = sub_100011D80(&qword_10012E868);
  unsigned int v3 = sub_10001044C(v1, v0, v2);
  if (v3 >= 2) {
    return v3 - 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_100080E5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100080E70);
}

uint64_t sub_100080E70(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = sub_100011D80(&qword_10012E868);
  return sub_1000101E8(a1, v5, a3, v6);
}

uint64_t sub_100080ED0(uint64_t a1)
{
  uint64_t v2 = sub_100011D80(&qword_10012E868);
  return sub_10001044C(a1, 1, v2);
}

uint64_t sub_100080F18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100011D80(&qword_10012E868);
  return sub_1000101E8(a1, a2, 1, v4);
}

uint64_t type metadata accessor for AccountDataServerResponse.Errors(uint64_t a1)
{
  return sub_100010474(a1, (uint64_t *)&unk_10012E8E0);
}

uint64_t sub_100080F88()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

void *sub_100081000(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + _Block_object_dispose(&a9, 8) = v7;
    *(void *)(a1 + 16) = a2[2];
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    uint64_t v8 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v8;
    uint64_t v9 = a2[7];
    *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = a2[6];
    *(void *)(a1 + 56) = v9;
    uint64_t v10 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v10;
    *(void *)(a1 + 80) = a2[10];
    *(_DWORD *)(a1 + 8_Block_object_dispose(&a9, 8) = *((_DWORD *)a2 + 22);
    *(void *)(a1 + 96) = a2[12];
    *(_DWORD *)(a1 + 104) = *((_DWORD *)a2 + 26);
    *(_WORD *)(a1 + 10_Block_object_dispose(&a9, 8) = *((_WORD *)a2 + 54);
    uint64_t v11 = a2[15];
    *(void *)(a1 + 112) = a2[14];
    *(void *)(a1 + 120) = v11;
    uint64_t v12 = a2[17];
    *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = a2[16];
    *(void *)(a1 + 136) = v12;
    uint64_t v13 = a2[19];
    *(void *)(a1 + 144) = a2[18];
    *(void *)(a1 + 152) = v13;
    *(_WORD *)(a1 + 160) = *((_WORD *)a2 + 80);
    uint64_t v14 = a2[22];
    *(void *)(a1 + 16_Block_object_dispose(&a9, 8) = a2[21];
    *(void *)(a1 + 176) = v14;
    *(void *)(a1 + 184) = a2[23];
    *(_WORD *)(a1 + 192) = *((_WORD *)a2 + 96);
    *(unsigned char *)(a1 + 194) = *((unsigned char *)a2 + 194);
    uint64_t v15 = a2[25];
    uint64_t v16 = a2[26];
    *(unsigned char *)(a1 + 216) = *((unsigned char *)a2 + 216);
    *(void *)(a1 + 224) = a2[28];
    uint64_t v17 = a3[5];
    uint64_t v23 = (uint64_t)a2 + v17;
    uint64_t v24 = a1 + v17;
    *(void *)(a1 + 200) = v15;
    *(void *)(a1 + 20_Block_object_dispose(&a9, 8) = v16;
    uint64_t v18 = type metadata accessor for Date();
    uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19(v24, v23, v18);
    uint64_t v20 = a3[7];
    *(void *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    v19((uint64_t)v4 + v20, (uint64_t)a2 + v20, v18);
  }
  return v4;
}

uint64_t sub_10008122C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v8)((void *)(v5 - 8), v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  return v8(v6, v5);
}

uint64_t sub_100081324(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v5;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v22 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v22;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 8_Block_object_dispose(&a9, 8) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_WORD *)(a1 + 10_Block_object_dispose(&a9, 8) = *(_WORD *)(a2 + 108);
  uint64_t v8 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v8;
  uint64_t v9 = *(void *)(a2 + 136);
  *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v9;
  uint64_t v10 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v10;
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  uint64_t v11 = *(void *)(a2 + 176);
  *(void *)(a1 + 16_Block_object_dispose(&a9, 8) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v11;
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
  *(unsigned char *)(a1 + 194) = *(unsigned char *)(a2 + 194);
  uint64_t v12 = *(void *)(a2 + 200);
  uint64_t v13 = *(void *)(a2 + 208);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  uint64_t v14 = a3[5];
  uint64_t v19 = a2 + v14;
  uint64_t v20 = a1 + v14;
  *(void *)(a1 + 200) = v12;
  *(void *)(a1 + 20_Block_object_dispose(&a9, 8) = v13;
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16(v20, v19, v15);
  uint64_t v17 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  v16(a1 + v17, a2 + v17, v15);
  return a1;
}

uint64_t sub_1000814FC(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8_Block_object_dispose(&a9, 8) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(unsigned char *)(a1 + 90) = *(unsigned char *)(a2 + 90);
  *(unsigned char *)(a1 + 91) = *(unsigned char *)(a2 + 91);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
  *(unsigned char *)(a1 + 106) = *(unsigned char *)(a2 + 106);
  *(unsigned char *)(a1 + 107) = *(unsigned char *)(a2 + 107);
  *(unsigned char *)(a1 + 10_Block_object_dispose(&a9, 8) = *(unsigned char *)(a2 + 108);
  *(unsigned char *)(a1 + 109) = *(unsigned char *)(a2 + 109);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
  *(void *)(a1 + 16_Block_object_dispose(&a9, 8) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 184);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(void *)(a1 + 184) = v6;
  *(unsigned char *)(a1 + 193) = *(unsigned char *)(a2 + 193);
  *(unsigned char *)(a1 + 194) = *(unsigned char *)(a2 + 194);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 20_Block_object_dispose(&a9, 8) = *(void *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24);
  v11(v8, v9, v10);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  v11(a1 + a3[7], a2 + a3[7], v10);
  return a1;
}

char *sub_100081794(char *a1, char *a2, int *a3)
{
  memcpy(a1, a2, 0xE8uLL);
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  v10(&a1[v11], &a2[v11], v9);
  return a1;
}

uint64_t sub_100081850(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v9;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8_Block_object_dispose(&a9, 8) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(unsigned char *)(a1 + 90) = *(unsigned char *)(a2 + 90);
  *(unsigned char *)(a1 + 91) = *(unsigned char *)(a2 + 91);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
  *(unsigned char *)(a1 + 106) = *(unsigned char *)(a2 + 106);
  *(unsigned char *)(a1 + 107) = *(unsigned char *)(a2 + 107);
  *(unsigned char *)(a1 + 10_Block_object_dispose(&a9, 8) = *(unsigned char *)(a2 + 108);
  *(unsigned char *)(a1 + 109) = *(unsigned char *)(a2 + 109);
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 136);
  *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v12;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
  uint64_t v13 = *(void *)(a2 + 176);
  *(void *)(a1 + 16_Block_object_dispose(&a9, 8) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v13;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(unsigned char *)(a1 + 193) = *(unsigned char *)(a2 + 193);
  *(unsigned char *)(a1 + 194) = *(unsigned char *)(a2 + 194);
  uint64_t v14 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 20_Block_object_dispose(&a9, 8) = v14;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  uint64_t v15 = a3[5];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 40);
  v19(v16, v17, v18);
  uint64_t v20 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  v19(a1 + v20, a2 + v20, v18);
  return a1;
}

uint64_t sub_100081A4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100081A60);
}

uint64_t sub_100081A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    sub_100083158();
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    return sub_10001044C(v9, a2, v8);
  }
}

uint64_t sub_100081ADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100081AF0);
}

void sub_100081AF0()
{
  sub_10000F96C();
  if (v3 == 0x7FFFFFFF)
  {
    *(void *)(v1 + _Block_object_dispose(&a9, 8) = (v0 - 1);
  }
  else
  {
    uint64_t v4 = v2;
    uint64_t v5 = type metadata accessor for Date();
    uint64_t v6 = v1 + *(int *)(v4 + 20);
    sub_1000101E8(v6, v0, v0, v5);
  }
}

uint64_t type metadata accessor for AccountDataServerResponse(uint64_t a1)
{
  return sub_100010474(a1, qword_10012E948);
}

uint64_t sub_100081B8C()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100081C3C(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_100081C44(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

void type metadata accessor for AccountDataChange.CodingKeys()
{
}

uint64_t getEnumTagSinglePayload for AccountDataPayload.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xE3)
  {
    if (a2 + 29 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 29) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 30;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1E;
  int v5 = v6 - 30;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for AccountDataPayload.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 29 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 29) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE2)
  {
    unsigned int v6 = ((a2 - 227) >> 8) + 1;
    *uint64_t result = a2 + 29;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100081DB0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 29;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccountDataPayload.CodingKeys()
{
  return &type metadata for AccountDataPayload.CodingKeys;
}

uint64_t getEnumTagSinglePayload for AccountDataState.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF7)
  {
    if (a2 + 9 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 9) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 10;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v5 = v6 - 10;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for AccountDataState.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100081F3CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

unsigned char *sub_100081F64(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for AccountDataState.CodingKeys()
{
  return &type metadata for AccountDataState.CodingKeys;
}

_WORD *sub_100081F7C(_WORD *result, _WORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t sub_100081F88(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 65282 <= 0xFFFEFFFF) {
      int v2 = 2;
    }
    else {
      int v2 = 4;
    }
    if (a2 + 65282 < 0xFF0000) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (v4) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v3 == 2)
      {
        int v4 = a1[1];
        if (!a1[1]) {
          goto LABEL_17;
        }
LABEL_15:
        int v5 = (*a1 | (v4 << 16)) - 65283;
        return (v5 + 1);
      }
      int v4 = *((unsigned __int8 *)a1 + 2);
      if (*((unsigned char *)a1 + 2)) {
        goto LABEL_15;
      }
    }
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  if (v6 >= 2) {
    int v5 = ((v6 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v5 = -2;
  }
  if (v5 < 0) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_100082030(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65282 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65282 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 254;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000820FCLL);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for AccountDataChange()
{
}

uint64_t initializeBufferWithCopyOfBuffer for AccountDataNetworkingBag(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for AccountDataNetworkingBag()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for AccountDataNetworkingBag(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AccountDataNetworkingBag(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for AccountDataNetworkingBag(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for AccountDataNetworkingBag(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccountDataNetworkingBag(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccountDataNetworkingBag(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + _Block_object_dispose(&a9, 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(&a9, 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for ConsumerIDPayload()
{
}

unint64_t sub_100082334()
{
  unint64_t result = qword_10012E988;
  if (!qword_10012E988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012E988);
  }
  return result;
}

unint64_t sub_100082384()
{
  unint64_t result = qword_10012E990;
  if (!qword_10012E990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012E990);
  }
  return result;
}

unint64_t sub_1000823D4()
{
  unint64_t result = qword_10012E998;
  if (!qword_10012E998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012E998);
  }
  return result;
}

unint64_t sub_100082424()
{
  unint64_t result = qword_10012E9A0;
  if (!qword_10012E9A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012E9A0);
  }
  return result;
}

unint64_t sub_100082474()
{
  unint64_t result = qword_10012E9A8;
  if (!qword_10012E9A8)
  {
    sub_10007FBF4(&qword_10012E9B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012E9A8);
  }
  return result;
}

unint64_t sub_1000824C8(uint64_t a1)
{
  unint64_t result = sub_1000824F0();
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = result;
  return result;
}

unint64_t sub_1000824F0()
{
  unint64_t result = qword_10012E9B8;
  if (!qword_10012E9B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012E9B8);
  }
  return result;
}

unint64_t sub_100082540()
{
  unint64_t result = qword_10012E9C0;
  if (!qword_10012E9C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012E9C0);
  }
  return result;
}

unint64_t sub_100082590()
{
  unint64_t result = qword_10012E9C8;
  if (!qword_10012E9C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012E9C8);
  }
  return result;
}

unint64_t sub_1000825E0()
{
  unint64_t result = qword_10012E9D0;
  if (!qword_10012E9D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012E9D0);
  }
  return result;
}

uint64_t sub_10008262C()
{
  return sub_10007F434(&qword_10012E9D8, (void (*)(uint64_t))type metadata accessor for AccountDataServerResponse);
}

uint64_t sub_100082674()
{
  return sub_10007F434(&qword_10012E9E0, (void (*)(uint64_t))type metadata accessor for AccountDataServerRequest);
}

uint64_t sub_1000826BC()
{
  return sub_10007F434(&qword_10012E9E8, (void (*)(uint64_t))type metadata accessor for AccountDataServerRequest.Put);
}

unint64_t sub_100082708()
{
  unint64_t result = qword_10012E9F0;
  if (!qword_10012E9F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012E9F0);
  }
  return result;
}

unint64_t sub_100082758()
{
  unint64_t result = qword_10012E9F8;
  if (!qword_10012E9F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012E9F8);
  }
  return result;
}

unint64_t sub_1000827A8()
{
  unint64_t result = qword_10012EA00;
  if (!qword_10012EA00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012EA00);
  }
  return result;
}

unint64_t sub_1000827F8()
{
  unint64_t result = qword_10012EA08;
  if (!qword_10012EA08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012EA08);
  }
  return result;
}

unint64_t sub_100082844()
{
  unint64_t result = qword_10012EA18;
  if (!qword_10012EA18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012EA18);
  }
  return result;
}

unint64_t sub_100082890()
{
  unint64_t result = qword_10012EA30;
  if (!qword_10012EA30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012EA30);
  }
  return result;
}

uint64_t type metadata accessor for AccountDataServerRequest.Get(uint64_t a1)
{
  return sub_100010474(a1, qword_10012EAB0);
}

uint64_t sub_1000828FC(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_1000082F8();
  uint64_t v4 = sub_100007F20();
  v5(v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for AccountDataNetworkingBag.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *_s12amsaccountsd17ConsumerIDPayloadV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100082AA4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConsumerIDPayload.CodingKeys()
{
  return &type metadata for ConsumerIDPayload.CodingKeys;
}

uint64_t sub_100082ADC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccountIdentity.DSID();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  return v5(a1, a2, v4);
}

uint64_t sub_100082B48()
{
  sub_100009C70();
  sub_1000082F8();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8);
  return v3(v0, v1);
}

uint64_t sub_100082B9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccountIdentity.DSID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_100082C00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccountIdentity.DSID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_100082C64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccountIdentity.DSID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_100082CC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccountIdentity.DSID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_100082D2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100082D40);
}

uint64_t sub_100082D40()
{
  uint64_t v2 = sub_100009768();
  return sub_10001044C(v1, v0, v2);
}

uint64_t sub_100082D7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100082D90);
}

uint64_t sub_100082D90()
{
  sub_100009768();
  uint64_t v0 = sub_1000830E4();
  return sub_1000101E8(v0, v1, v2, v3);
}

uint64_t sub_100082DC4()
{
  uint64_t result = type metadata accessor for AccountIdentity.DSID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100082E50()
{
  return sub_10007F434(&qword_10012EAE8, (void (*)(uint64_t))type metadata accessor for AccountDataServerRequest.Get);
}

unint64_t sub_100082E9C()
{
  unint64_t result = qword_10012EAF0;
  if (!qword_10012EAF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012EAF0);
  }
  return result;
}

unint64_t sub_100082EEC()
{
  unint64_t result = qword_10012EAF8;
  if (!qword_10012EAF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012EAF8);
  }
  return result;
}

unint64_t sub_100082F3C()
{
  unint64_t result = qword_10012EB00;
  if (!qword_10012EB00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012EB00);
  }
  return result;
}

uint64_t sub_100082FB4()
{
  return v0 + 528;
}

uint64_t sub_100082FC8()
{
  return KeyedDecodingContainer.decode(_:forKey:)(v0 + 528, v1);
}

uint64_t sub_100082FE4()
{
  return v0;
}

uint64_t sub_100082FF8()
{
  return type metadata accessor for AccountDataServerRequest.Put(0);
}

uint64_t sub_100083020()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t sub_10008303C()
{
  return v0;
}

uint64_t sub_100083054()
{
  return String.hash(into:)();
}

void sub_100083070(char a1@<W8>)
{
  *(unsigned char *)(v1 - 80) = a1;
}

uint64_t sub_100083088()
{
  return String.hash(into:)();
}

uint64_t sub_1000830AC@<X0>(uint64_t a1@<X8>)
{
  return *(unsigned __int16 *)(v1 + a1);
}

uint64_t sub_1000830C4()
{
  return v0;
}

uint64_t sub_1000830E4()
{
  return v0;
}

uint64_t sub_10008310C()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t sub_10008312C()
{
  return *(void *)(v0 + 64);
}

uint64_t sub_100083140()
{
  return v0;
}

uint64_t sub_10008314C()
{
  return v0;
}

void sub_10008316C()
{
  *(unsigned char *)(v0 - 66) = 1;
}

void *sub_100083178()
{
  uint64_t v1 = sub_100083624();
  uint64_t v2 = sub_100083294(v1);
  swift_bridgeObjectRelease();
  sub_100011D80(&qword_10012EB50);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000DA680;
  uint64_t v4 = (void *)AMSAccountFlagAgeVerificationExpiration;
  uint64_t v5 = *(void *)(v0 + 224);
  *(void *)(inited + 32) = AMSAccountFlagAgeVerificationExpiration;
  *(void *)(inited + 40) = v5;
  type metadata accessor for AMSAccountFlag();
  sub_1000850F8(&qword_10012E498, (void (*)(uint64_t))type metadata accessor for AMSAccountFlag);
  id v6 = v4;
  uint64_t v7 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v8 = sub_10008345C(v7);
  swift_bridgeObjectRelease();
  sub_1000840C8(v8);
  return sub_10008387C(v2);
}

uint64_t sub_100083294(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  sub_1000B580C(0, v1, 0);
  uint64_t result = sub_1000851B4(a1);
  if ((result & 0x8000000000000000) == 0)
  {
    unint64_t v5 = result;
    if (result < 1 << *(unsigned char *)(a1 + 32))
    {
      int v6 = v4;
      uint64_t v7 = a1 + 64;
      while ((*(void *)(v7 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
      {
        if (v6 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_18;
        }
        int64_t v12 = v1;
        id v13 = *(id *)(*(void *)(a1 + 48) + 8 * v5);
        uint64_t result = (uint64_t)Bool._bridgeToObjectiveC()().super.super.isa;
        uint64_t v8 = result;
        unint64_t v10 = _swiftEmptyArrayStorage[2];
        unint64_t v9 = _swiftEmptyArrayStorage[3];
        if (v10 >= v9 >> 1) {
          uint64_t result = (uint64_t)sub_1000B580C((void *)(v9 > 1), v10 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v10 + 1;
        uint64_t v11 = &_swiftEmptyArrayStorage[2 * v10];
        void v11[4] = v13;
        void v11[5] = v8;
        if ((uint64_t)v5 >= -(-1 << *(unsigned char *)(a1 + 32))) {
          goto LABEL_19;
        }
        uint64_t v7 = a1 + 64;
        if ((*(void *)(a1 + 64 + 8 * (v5 >> 6)) & (1 << v5)) == 0) {
          goto LABEL_20;
        }
        if (v6 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_21;
        }
        uint64_t result = _HashTable.occupiedBucket(after:)();
        --v1;
        if (v12 == 1) {
          return (uint64_t)_swiftEmptyArrayStorage;
        }
        unint64_t v5 = result;
        if ((result & 0x8000000000000000) == 0)
        {
          int v6 = *(_DWORD *)(a1 + 36);
          if (result < 1 << *(unsigned char *)(a1 + 32)) {
            continue;
          }
        }
        goto LABEL_22;
      }
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
    }
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_10008345C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  sub_1000B580C(0, v1, 0);
  uint64_t result = sub_1000851B4(a1);
  if ((result & 0x8000000000000000) == 0)
  {
    unint64_t v5 = result;
    if (result < 1 << *(unsigned char *)(a1 + 32))
    {
      int v6 = v4;
      uint64_t v7 = a1 + 64;
      while ((*(void *)(v7 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
      {
        if (v6 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_18;
        }
        int64_t v12 = v1;
        id v13 = *(id *)(*(void *)(a1 + 48) + 8 * v5);
        uint64_t result = (uint64_t)UInt64._bridgeToObjectiveC()().super.super.isa;
        uint64_t v8 = result;
        unint64_t v10 = _swiftEmptyArrayStorage[2];
        unint64_t v9 = _swiftEmptyArrayStorage[3];
        if (v10 >= v9 >> 1) {
          uint64_t result = (uint64_t)sub_1000B580C((void *)(v9 > 1), v10 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v10 + 1;
        uint64_t v11 = &_swiftEmptyArrayStorage[2 * v10];
        void v11[4] = v13;
        void v11[5] = v8;
        if ((uint64_t)v5 >= -(-1 << *(unsigned char *)(a1 + 32))) {
          goto LABEL_19;
        }
        uint64_t v7 = a1 + 64;
        if ((*(void *)(a1 + 64 + 8 * (v5 >> 6)) & (1 << v5)) == 0) {
          goto LABEL_20;
        }
        if (v6 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_21;
        }
        uint64_t result = _HashTable.occupiedBucket(after:)();
        --v1;
        if (v12 == 1) {
          return (uint64_t)_swiftEmptyArrayStorage;
        }
        unint64_t v5 = result;
        if ((result & 0x8000000000000000) == 0)
        {
          int v6 = *(_DWORD *)(a1 + 36);
          if (result < 1 << *(unsigned char *)(a1 + 32)) {
            continue;
          }
        }
        goto LABEL_22;
      }
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
    }
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_100083624()
{
  sub_100011D80(&qword_10012EB68);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000DB180;
  uint64_t v28 = (void *)AMSAccountFlagAutoPlay;
  *(void *)(inited + 32) = AMSAccountFlagAutoPlay;
  *(unsigned char *)(inited + 40) = v0[24];
  char v27 = (void *)AMSAccountFlagIsDisabledAccount;
  *(void *)(inited + 4_Block_object_dispose(&a9, 8) = AMSAccountFlagIsDisabledAccount;
  *(unsigned char *)(inited + 56) = v0[105];
  uint64_t v26 = (void *)AMSAccountFlagPersonalization;
  *(void *)(inited + 64) = AMSAccountFlagPersonalization;
  *(unsigned char *)(inited + 72) = v0[193];
  uint64_t v25 = (void *)AMSAccountFlagHasAgreedToTerms;
  *(void *)(inited + 80) = AMSAccountFlagHasAgreedToTerms;
  *(unsigned char *)(inited + 8_Block_object_dispose(&a9, 8) = v0[89];
  uint64_t v24 = (void *)AMSAccountFlagHasAgreedToAppClipTerms;
  *(void *)(inited + 96) = AMSAccountFlagHasAgreedToAppClipTerms;
  *(unsigned char *)(inited + 104) = v0[88];
  uint64_t v2 = (void *)AMSAccountFlagHasFamilySharingEnabled;
  *(void *)(inited + 112) = AMSAccountFlagHasFamilySharingEnabled;
  *(unsigned char *)(inited + 120) = v0[90];
  uint64_t v3 = (void *)AMSAccountFlagIsInBadCredit;
  *(void *)(inited + 12_Block_object_dispose(&a9, 8) = AMSAccountFlagIsInBadCredit;
  *(unsigned char *)(inited + 136) = v0[106];
  int v4 = (void *)AMSAccountFlagHasiCloudFamily;
  *(void *)(inited + 144) = AMSAccountFlagHasiCloudFamily;
  *(unsigned char *)(inited + 152) = v0[107];
  unint64_t v5 = (void *)AMSAccountFlagIsInRestrictedRegion;
  *(void *)(inited + 160) = AMSAccountFlagIsInRestrictedRegion;
  *(unsigned char *)(inited + 16_Block_object_dispose(&a9, 8) = v0[108];
  int v6 = (void *)AMSAccountFlagIsManagedAccount;
  *(void *)(inited + 176) = AMSAccountFlagIsManagedAccount;
  *(unsigned char *)(inited + 184) = v0[109];
  uint64_t v7 = (void *)AMSAccountFlagIsRestrictedAccount;
  *(void *)(inited + 192) = AMSAccountFlagIsRestrictedAccount;
  *(unsigned char *)(inited + 200) = v0[160];
  uint64_t v8 = (void *)AMSAccountFlagRetailDemo;
  *(void *)(inited + 20_Block_object_dispose(&a9, 8) = AMSAccountFlagRetailDemo;
  *(unsigned char *)(inited + 216) = v0[194];
  unint64_t v9 = (void *)AMSAccountFlagUnderThirteen;
  *(void *)(inited + 224) = AMSAccountFlagUnderThirteen;
  *(unsigned char *)(inited + 232) = v0[216];
  type metadata accessor for AMSAccountFlag();
  sub_1000850F8(&qword_10012E498, (void (*)(uint64_t))type metadata accessor for AMSAccountFlag);
  id v10 = v28;
  id v11 = v27;
  id v12 = v26;
  id v13 = v25;
  id v14 = v24;
  id v15 = v2;
  id v16 = v3;
  id v17 = v4;
  id v18 = v5;
  id v19 = v6;
  id v20 = v7;
  id v21 = v8;
  id v22 = v9;
  return Dictionary.init(dictionaryLiteral:)();
}

void *sub_10008387C(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100011D80(&qword_10012EB58);
    int64_t v1 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    int64_t v1 = &_swiftEmptyDictionarySingleton;
  }
  int v4 = v1;
  uint64_t v2 = swift_bridgeObjectRetain();
  sub_1000841A4(v2, 1, &v4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_100083928(uint64_t a1)
{
  uint64_t v78 = a1;
  type metadata accessor for AccountDataState(0);
  ((void (*)(void))__chkstk_darwin)();
  sub_10000D2F0();
  uint64_t v74 = v1;
  uint64_t v85 = sub_100011D80(&qword_10012EB08);
  sub_10000BFC4();
  uint64_t v76 = v2;
  uint64_t v3 = ((uint64_t (*)(void))__chkstk_darwin)();
  unint64_t v5 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v70 - v6;
  uint64_t v8 = type metadata accessor for AccountIdentity();
  sub_10000BFC4();
  uint64_t v77 = v9;
  __chkstk_darwin(v10);
  sub_100008384(v11, v70);
  uint64_t v12 = sub_100011D80(&qword_10012EB10);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  id v15 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  id v17 = (char *)&v70 - v16;
  id v18 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  uint64_t v19 = sub_10001065C(0, &qword_10012EB18);
  uint64_t v20 = sub_10001065C(0, &qword_10012EB20);
  unint64_t v21 = sub_1000171B4();
  id v91 = v18;
  Dictionary.init(dictionaryLiteral:)();
  uint64_t v88 = v20;
  uint64_t v89 = v19;
  unint64_t v87 = v21;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v91 setAllAccountResults:isa];

  int64_t v86 = 0;
  uint64_t v23 = *(void *)(v78 + 64);
  uint64_t v72 = v78 + 64;
  uint64_t v24 = 1 << *(unsigned char *)(v78 + 32);
  uint64_t v25 = -1;
  if (v24 < 64) {
    uint64_t v25 = ~(-1 << v24);
  }
  unint64_t v26 = v25 & v23;
  uint64_t v75 = v77 + 16;
  uint64_t v84 = v77 + 32;
  uint64_t v80 = (void (**)(uint64_t, uint64_t))(v77 + 8);
  int64_t v73 = (unint64_t)(v24 + 63) >> 6;
  int64_t v71 = v73 - 1;
  char v27 = (uint64_t *)&unk_10012EB30;
  char v82 = v7;
  char v83 = v5;
  uint64_t v81 = v8;
  char v79 = v15;
  if ((v25 & v23) == 0) {
    goto LABEL_6;
  }
LABEL_4:
  unint64_t v28 = __clz(__rbit64(v26));
  v26 &= v26 - 1;
  unint64_t v29 = v28 | (v86 << 6);
LABEL_5:
  uint64_t v30 = v78;
  (*(void (**)(char *, unint64_t, uint64_t))(v77 + 16))(v15, *(void *)(v78 + 48) + *(void *)(v77 + 72) * v29, v8);
  uint64_t v31 = *(void *)(v30 + 56) + *(void *)(v76 + 72) * v29;
  uint64_t v32 = sub_100011D80(v27);
  sub_100006374(v31, (uint64_t)&v15[*(int *)(v32 + 48)], &qword_10012EB08);
  sub_1000101E8((uint64_t)v15, 0, 1, v32);
  while (1)
  {
    sub_100007EC8((uint64_t)v15, (uint64_t)v17, &qword_10012EB10);
    uint64_t v37 = sub_100011D80(v27);
    if (sub_10001044C((uint64_t)v17, 1, v37) == 1)
    {
      id v68 = v91;

      swift_release();
      return (uint64_t)v68;
    }
    uint64_t v38 = v27;
    uint64_t v39 = (uint64_t)&v17[*(int *)(v37 + 48)];
    sub_10000D340();
    v40();
    sub_100007EC8(v39, (uint64_t)v7, &qword_10012EB08);
    char v41 = (void *)AccountIdentity.amsAccountIdentity()();
    id v42 = [objc_allocWithZone((Class)AMSAccountCachedServerDataAccountResult) init];
    sub_100006374((uint64_t)v7, (uint64_t)v5, &qword_10012EB08);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      char v43 = (void *)_convertErrorToNSError(_:)();
      [v42 setError:v43];

      swift_errorRelease();
    }
    else
    {
      uint64_t v44 = v74;
      sub_10001865C((uint64_t)v5, v74);
      id v45 = sub_100010698(v44);
      [v42 setFields:v45];

      sub_1000117F8(v44);
    }
    id v46 = v41;
    id v47 = v42;
    id v48 = [v91 allAccountResults];
    uint64_t v49 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if ((v49 & 0xC000000000000001) != 0)
    {
      if (v49 >= 0) {
        v49 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      uint64_t v50 = __CocoaDictionary.count.getter();
      if (__OFADD__(v50, 1)) {
        goto LABEL_45;
      }
      uint64_t v49 = sub_100084EB8(v49, v50 + 1);
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v92 = (void *)v49;
    unint64_t v52 = sub_1000104FC((uint64_t)v46);
    uint64_t v54 = *(void *)(v49 + 16);
    BOOL v55 = (v53 & 1) == 0;
    Swift::Int v56 = v54 + v55;
    if (__OFADD__(v54, v55)) {
      break;
    }
    unint64_t v57 = v52;
    char v58 = v53;
    sub_100011D80(&qword_10012EB38);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v56))
    {
      unint64_t v59 = sub_1000104FC((uint64_t)v46);
      if ((v58 & 1) != (v60 & 1)) {
        goto LABEL_49;
      }
      unint64_t v57 = v59;
    }
    uint64_t v61 = v92;
    if (v58)
    {
      uint64_t v62 = v92[7];

      *(void *)(v62 + 8 * v57) = v47;
    }
    else
    {
      v92[(v57 >> 6) + 8] |= 1 << v57;
      *(void *)(v61[6] + 8 * v57) = v46;
      *(void *)(v61[7] + 8 * v57) = v47;
      uint64_t v63 = v61[2];
      BOOL v64 = __OFADD__(v63, 1);
      uint64_t v65 = v63 + 1;
      if (v64) {
        goto LABEL_46;
      }
      v61[2] = v65;
      id v66 = v46;
    }

    swift_bridgeObjectRelease();
    Class v67 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v91 setAllAccountResults:v67];

    uint64_t v7 = v82;
    sub_100018910((uint64_t)v82, &qword_10012EB08);
    uint64_t v8 = v81;
    (*v80)(v90, v81);
    unint64_t v5 = v83;
    char v27 = v38;
    id v15 = v79;
    if (v26) {
      goto LABEL_4;
    }
LABEL_6:
    int64_t v33 = v86 + 1;
    if (__OFADD__(v86, 1)) {
      goto LABEL_47;
    }
    if (v33 < v73)
    {
      unint64_t v34 = *(void *)(v72 + 8 * v33);
      if (v34) {
        goto LABEL_9;
      }
      int64_t v35 = v86 + 2;
      ++v86;
      if (v33 + 1 < v73)
      {
        unint64_t v34 = *(void *)(v72 + 8 * v35);
        if (v34) {
          goto LABEL_12;
        }
        int64_t v86 = v33 + 1;
        if (v33 + 2 < v73)
        {
          unint64_t v34 = *(void *)(v72 + 8 * (v33 + 2));
          if (v34)
          {
            v33 += 2;
            goto LABEL_9;
          }
          int64_t v35 = v33 + 3;
          int64_t v86 = v33 + 2;
          if (v33 + 3 < v73)
          {
            unint64_t v34 = *(void *)(v72 + 8 * v35);
            if (!v34)
            {
              while (1)
              {
                int64_t v33 = v35 + 1;
                if (__OFADD__(v35, 1)) {
                  goto LABEL_48;
                }
                if (v33 >= v73)
                {
                  int64_t v86 = v71;
                  goto LABEL_23;
                }
                unint64_t v34 = *(void *)(v72 + 8 * v33);
                ++v35;
                if (v34) {
                  goto LABEL_9;
                }
              }
            }
LABEL_12:
            int64_t v33 = v35;
LABEL_9:
            unint64_t v26 = (v34 - 1) & v34;
            unint64_t v29 = __clz(__rbit64(v34)) + (v33 << 6);
            int64_t v86 = v33;
            goto LABEL_5;
          }
        }
      }
    }
LABEL_23:
    uint64_t v36 = sub_100011D80(v27);
    sub_1000101E8((uint64_t)v15, 1, 1, v36);
    unint64_t v26 = 0;
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1000840C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v5 > *(void *)(v3 + 24) >> 1)
  {
    if (v4 <= v5) {
      uint64_t v8 = v4 + v2;
    }
    else {
      uint64_t v8 = v4;
    }
    sub_10008D320(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    uint64_t v3 = v9;
  }
  if (!*(void *)(a1 + 16))
  {
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  sub_10008DC04(a1 + 32, v2);
  if (!v2)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return;
  }
  uint64_t v10 = *(void *)(v3 + 16);
  BOOL v11 = __OFADD__(v10, v2);
  uint64_t v12 = v10 + v2;
  if (!v11)
  {
    *(void *)(v3 + 16) = v12;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
}

uint64_t sub_1000841A4(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return swift_bridgeObjectRelease();
  }
  for (unint64_t i = (void **)(swift_bridgeObjectRetain() + 40); ; i += 2)
  {
    uint64_t v7 = *i;
    uint64_t v8 = (void *)*a3;
    id v9 = *(i - 1);
    id v10 = v7;
    unint64_t v12 = sub_1000B42B4((uint64_t)v9);
    uint64_t v13 = v8[2];
    BOOL v14 = (v11 & 1) == 0;
    uint64_t v15 = v13 + v14;
    if (__OFADD__(v13, v14))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      type metadata accessor for AMSAccountFlag();
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_20;
    }
    char v16 = v11;
    if (v8[3] < v15) {
      break;
    }
    if (a2)
    {
      if (v11) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_100011D80(&qword_10012EB60);
      _NativeDictionary.copy()();
      if (v16) {
        goto LABEL_14;
      }
    }
LABEL_10:
    uint64_t v19 = (void *)*a3;
    *(void *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    *(void *)(v19[6] + 8 * v12) = v9;
    *(void *)(v19[7] + 8 * v12) = v10;
    uint64_t v20 = v19[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_18;
    }
    v19[2] = v22;
    a2 = 1;
    if (!--v3) {
      return swift_bridgeObjectRelease_n();
    }
  }
  sub_100084460(v15, a2 & 1);
  unint64_t v17 = sub_1000B42B4((uint64_t)v9);
  if ((v16 & 1) != (v18 & 1)) {
    goto LABEL_19;
  }
  unint64_t v12 = v17;
  if ((v16 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  swift_allocError();
  swift_willThrow();
  swift_errorRetain();
  sub_100011D80(&qword_10012E438);
  if ((swift_dynamicCast() & 1) == 0)
  {

    swift_bridgeObjectRelease_n();
    return swift_errorRelease();
  }
LABEL_20:
  _StringGuts.grow(_:)(30);
  v24._object = (void *)0x80000001001020F0;
  v24._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v24);
  type metadata accessor for AMSAccountFlag();
  _print_unlocked<A, B>(_:_:)();
  v25._countAndFlagsBits = 39;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100084460(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100011D80(&qword_10012EB58);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_39;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  if (!v10) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v13 << 6))
  {
    uint64_t v20 = *(void **)(*(void *)(v5 + 48) + 8 * i);
    BOOL v21 = *(void **)(*(void *)(v5 + 56) + 8 * i);
    if ((v37 & 1) == 0)
    {
      id v22 = v20;
      id v23 = v21;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v24 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v26 = v24 & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) == 0)
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v25) >> 6;
      while (++v27 != v30 || (v29 & 1) == 0)
      {
        BOOL v31 = v27 == v30;
        if (v27 == v30) {
          unint64_t v27 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v11 + 8 * v27);
        if (v32 != -1)
        {
          unint64_t v28 = __clz(__rbit64(~v32)) + (v27 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    unint64_t v28 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v11 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
    *(void *)(*(void *)(v7 + 48) + 8 * v2_Block_object_dispose(&a9, 8) = v20;
    *(void *)(*(void *)(v7 + 56) + 8 * v2_Block_object_dispose(&a9, 8) = v21;
    ++*(void *)(v7 + 16);
    if (v10) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      goto LABEL_41;
    }
    if (v16 >= v35)
    {
      swift_release();
      uint64_t v3 = v34;
      unint64_t v17 = (void *)(v5 + 64);
      goto LABEL_34;
    }
    unint64_t v17 = (void *)(v5 + 64);
    unint64_t v18 = *(void *)(v36 + 8 * v16);
    ++v13;
    if (!v18)
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v35) {
        goto LABEL_32;
      }
      unint64_t v18 = *(void *)(v36 + 8 * v13);
      if (!v18) {
        break;
      }
    }
LABEL_18:
    unint64_t v10 = (v18 - 1) & v18;
  }
  int64_t v19 = v16 + 2;
  if (v19 < v35)
  {
    unint64_t v18 = *(void *)(v36 + 8 * v19);
    if (!v18)
    {
      while (1)
      {
        int64_t v13 = v19 + 1;
        if (__OFADD__(v19, 1)) {
          goto LABEL_42;
        }
        if (v13 >= v35) {
          goto LABEL_32;
        }
        unint64_t v18 = *(void *)(v36 + 8 * v13);
        ++v19;
        if (v18) {
          goto LABEL_18;
        }
      }
    }
    int64_t v13 = v19;
    goto LABEL_18;
  }
LABEL_32:
  swift_release();
  uint64_t v3 = v34;
LABEL_34:
  if (v37)
  {
    uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
    if (v33 >= 64) {
      sub_1000B4914(0, (unint64_t)(v33 + 63) >> 6, v17);
    }
    else {
      *unint64_t v17 = -1 << v33;
    }
    *(void *)(v5 + 16) = 0;
  }
LABEL_39:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100084778(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100011D80(&qword_10012EB40);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    unint64_t v34 = v2;
    uint64_t v35 = v5 + 64;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v11 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v12 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    if (!v10) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v15 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v14 << 6))
    {
      BOOL v21 = *(void **)(*(void *)(v5 + 48) + 8 * i);
      id v22 = *(void **)(*(void *)(v5 + 56) + 8 * i);
      if ((a2 & 1) == 0)
      {
        id v23 = v21;
        id v24 = v22;
      }
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6))) == 0)
      {
        char v29 = 0;
        unint64_t v30 = (unint64_t)(63 - v25) >> 6;
        while (++v27 != v30 || (v29 & 1) == 0)
        {
          BOOL v31 = v27 == v30;
          if (v27 == v30) {
            unint64_t v27 = 0;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v12 + 8 * v27);
          if (v32 != -1)
          {
            unint64_t v28 = __clz(__rbit64(~v32)) + (v27 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }
      unint64_t v28 = __clz(__rbit64((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v12 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
      *(void *)(*(void *)(v7 + 48) + 8 * v2_Block_object_dispose(&a9, 8) = v21;
      *(void *)(*(void *)(v7 + 56) + 8 * v2_Block_object_dispose(&a9, 8) = v22;
      ++*(void *)(v7 + 16);
      if (v10) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v17 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_41;
      }
      if (v17 >= v11) {
        break;
      }
      unint64_t v18 = (void *)(v5 + 64);
      unint64_t v19 = *(void *)(v35 + 8 * v17);
      ++v14;
      if (!v19)
      {
        int64_t v14 = v17 + 1;
        if (v17 + 1 >= v11) {
          goto LABEL_32;
        }
        unint64_t v19 = *(void *)(v35 + 8 * v14);
        if (!v19)
        {
          int64_t v20 = v17 + 2;
          if (v20 >= v11)
          {
LABEL_32:
            swift_release();
            uint64_t v3 = v34;
            if ((a2 & 1) == 0) {
              goto LABEL_39;
            }
            goto LABEL_35;
          }
          unint64_t v19 = *(void *)(v35 + 8 * v20);
          if (!v19)
          {
            while (1)
            {
              int64_t v14 = v20 + 1;
              if (__OFADD__(v20, 1)) {
                goto LABEL_42;
              }
              if (v14 >= v11) {
                goto LABEL_32;
              }
              unint64_t v19 = *(void *)(v35 + 8 * v14);
              ++v20;
              if (v19) {
                goto LABEL_18;
              }
            }
          }
          int64_t v14 = v20;
        }
      }
LABEL_18:
      unint64_t v10 = (v19 - 1) & v19;
    }
    swift_release();
    uint64_t v3 = v34;
    unint64_t v18 = (void *)(v5 + 64);
    if ((a2 & 1) == 0) {
      goto LABEL_39;
    }
LABEL_35:
    uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
    if (v33 >= 64) {
      sub_1000B4914(0, (unint64_t)(v33 + 63) >> 6, v18);
    }
    else {
      *unint64_t v18 = -1 << v33;
    }
    *(void *)(v5 + 16) = 0;
  }
LABEL_39:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100084A3C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_100011D80(&qword_10012EB08);
  __chkstk_darwin(v5 - 8);
  sub_10000D2F0();
  uint64_t v52 = v6;
  uint64_t v7 = type metadata accessor for AccountIdentity();
  sub_10000BFC4();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  sub_100008384(v11, v44);
  uint64_t v12 = *v2;
  sub_100011D80(&qword_10012EB48);
  char v49 = a2;
  uint64_t v13 = v12;
  uint64_t v14 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v15 = v14;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_40;
  }
  uint64_t v16 = 1 << *(unsigned char *)(v13 + 32);
  id v47 = (void *)(v13 + 64);
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & *(void *)(v13 + 64);
  id v45 = v2;
  int64_t v46 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v51 = v7;
  uint64_t v19 = v14 + 64;
  uint64_t result = swift_retain();
  int64_t v21 = 0;
  uint64_t v48 = v13;
  uint64_t v22 = v50;
  if (!v18) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v23 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  unint64_t v24 = v23 | (v21 << 6);
  while (1)
  {
    if (v49)
    {
      sub_10000D340();
      v29();
      uint64_t v30 = sub_10000F740();
      sub_100007EC8(v30, v31, &qword_10012EB08);
    }
    else
    {
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 16))(v22, *(void *)(v13 + 48) + *(void *)(v9 + 72) * v24, v51);
      uint64_t v32 = sub_10000F740();
      sub_100006374(v32, v33, &qword_10012EB08);
    }
    sub_1000850F8((unint64_t *)&qword_100130080, (void (*)(uint64_t))&type metadata accessor for AccountIdentity);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v34 = -1 << *(unsigned char *)(v15 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6))) == 0)
    {
      char v38 = 0;
      unint64_t v39 = (unint64_t)(63 - v34) >> 6;
      uint64_t v22 = v50;
      while (++v36 != v39 || (v38 & 1) == 0)
      {
        BOOL v40 = v36 == v39;
        if (v36 == v39) {
          unint64_t v36 = 0;
        }
        v38 |= v40;
        uint64_t v41 = *(void *)(v19 + 8 * v36);
        if (v41 != -1)
        {
          unint64_t v37 = __clz(__rbit64(~v41)) + (v36 << 6);
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    unint64_t v37 = __clz(__rbit64((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    uint64_t v22 = v50;
LABEL_31:
    *(void *)(v19 + ((v37 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v37;
    sub_10000D340();
    v42();
    uint64_t result = sub_100007EC8(v52, *(void *)(v15 + 56) + v13 * v37, &qword_10012EB08);
    ++*(void *)(v15 + 16);
    uint64_t v13 = v48;
    if (v18) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      goto LABEL_42;
    }
    if (v25 >= v46)
    {
      swift_release();
      uint64_t v3 = v45;
      unint64_t v26 = v47;
      goto LABEL_35;
    }
    unint64_t v26 = v47;
    unint64_t v27 = v47[v25];
    ++v21;
    if (!v27)
    {
      int64_t v21 = v25 + 1;
      if (v25 + 1 >= v46) {
        goto LABEL_33;
      }
      unint64_t v27 = v47[v21];
      if (!v27) {
        break;
      }
    }
LABEL_18:
    unint64_t v18 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v21 << 6);
    uint64_t v22 = v50;
  }
  int64_t v28 = v25 + 2;
  if (v28 < v46)
  {
    unint64_t v27 = v47[v28];
    if (!v27)
    {
      while (1)
      {
        int64_t v21 = v28 + 1;
        if (__OFADD__(v28, 1)) {
          goto LABEL_43;
        }
        if (v21 >= v46) {
          goto LABEL_33;
        }
        unint64_t v27 = v47[v21];
        ++v28;
        if (v27) {
          goto LABEL_18;
        }
      }
    }
    int64_t v21 = v28;
    goto LABEL_18;
  }
LABEL_33:
  swift_release();
  uint64_t v3 = v45;
LABEL_35:
  if (v49)
  {
    uint64_t v43 = 1 << *(unsigned char *)(v13 + 32);
    if (v43 >= 64) {
      sub_1000B4914(0, (unint64_t)(v43 + 63) >> 6, v26);
    }
    else {
      *unint64_t v26 = -1 << v43;
    }
    *(void *)(v13 + 16) = 0;
  }
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v15;
  return result;
}

Swift::Int sub_100084EB8(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  sub_100011D80(&qword_10012EB40);
  uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
  uint64_t v17 = v2;
  __CocoaDictionary.makeIterator()();
  uint64_t v3 = __CocoaDictionary.Iterator.next()();
  if (!v3)
  {
LABEL_16:
    swift_release();
    return v2;
  }
  uint64_t v4 = v3;
  sub_10001065C(0, &qword_10012EB18);
  while (1)
  {
    swift_dynamicCast();
    sub_10001065C(0, &qword_10012EB20);
    swift_dynamicCast();
    uint64_t v2 = v17;
    unint64_t v5 = *(void *)(v17 + 16);
    if (*(void *)(v17 + 24) <= v5)
    {
      sub_100084778(v5 + 1, 1);
      uint64_t v2 = v17;
    }
    Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
    uint64_t v7 = v2 + 64;
    uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v9 = result & ~v8;
    unint64_t v10 = v9 >> 6;
    if (((-1 << v9) & ~*(void *)(v2 + 64 + 8 * (v9 >> 6))) == 0) {
      break;
    }
    unint64_t v11 = __clz(__rbit64((-1 << v9) & ~*(void *)(v2 + 64 + 8 * (v9 >> 6)))) | v9 & 0x7FFFFFFFFFFFFFC0;
LABEL_15:
    *(void *)(v7 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(void *)(*(void *)(v2 + 48) + 8 * v11) = v16;
    *(void *)(*(void *)(v2 + 56) + 8 * v11) = v4;
    ++*(void *)(v2 + 16);
    uint64_t v4 = __CocoaDictionary.Iterator.next()();
    if (!v4) {
      goto LABEL_16;
    }
  }
  char v12 = 0;
  unint64_t v13 = (unint64_t)(63 - v8) >> 6;
  while (++v10 != v13 || (v12 & 1) == 0)
  {
    BOOL v14 = v10 == v13;
    if (v10 == v13) {
      unint64_t v10 = 0;
    }
    v12 |= v14;
    uint64_t v15 = *(void *)(v7 + 8 * v10);
    if (v15 != -1)
    {
      unint64_t v11 = __clz(__rbit64(~v15)) + (v10 << 6);
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000850F8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::Int sub_100085140()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000851B4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 64;
  for (uint64_t i = 10; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

ValueMetadata *type metadata accessor for AccountDataNetworking()
{
  return &type metadata for AccountDataNetworking;
}

uint64_t sub_100085244()
{
  sub_100008308();
  v0[20] = v1;
  v0[21] = v2;
  v0[18] = v3;
  v0[19] = v4;
  uint64_t v5 = type metadata accessor for AccountDataServerResponse(0);
  v0[22] = v5;
  sub_1000085F4(v5);
  v0[23] = sub_1000084E0();
  uint64_t v6 = type metadata accessor for IndexSet();
  v0[24] = v6;
  sub_1000082C8(v6);
  v0[25] = v7;
  v0[26] = swift_task_alloc();
  v0[27] = swift_task_alloc();
  uint64_t v8 = sub_100011D80(&qword_10012E4A8);
  v0[28] = v8;
  sub_1000085F4(v8);
  v0[29] = sub_1000084E0();
  sub_10000F9E8();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_100085338()
{
  sub_100008308();
  id v1 = objc_allocWithZone((Class)type metadata accessor for MetricsActivity());
  *(void *)(v0 + 240) = MetricsActivity.init(label:)();
  dispatch thunk of MetricsActivity.activate()();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 24_Block_object_dispose(&a9, 8) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000853F0;
  return sub_100085B64();
}

uint64_t sub_1000853F0()
{
  sub_100008308();
  sub_1000082E0();
  sub_10000A43C();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 256) = v4;
  *(void *)(v2 + 264) = v0;
  swift_task_dealloc();
  sub_10000F9E8();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1000854D4()
{
  id v1 = [objc_allocWithZone((Class)AMSURLResponseDecoder) init];
  sub_100087164(&qword_10012EB88, (void (*)(uint64_t))&type metadata accessor for IndexSet);
  dispatch thunk of SetAlgebra.init()();
  for (uint64_t i = 200; i != 300; ++i)
  {
    v0[16] = i;
    sub_100016914();
    dispatch thunk of SetAlgebra.insert(_:)();
  }
  uint64_t v3 = (void *)v0[32];
  uint64_t v4 = v0[27];
  uint64_t v5 = v0[24];
  uint64_t v6 = v0[25];
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 32))(v4, v0[26], v5);
  IndexSet.insert(_:)(304);
  IndexSet.insert(_:)(409);
  IndexSet.insert(_:)(429);
  IndexSet._bridgeToObjectiveC()(v7);
  uint64_t v9 = v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  [v1 setAllowedStatusCodes:v9];

  id v10 = [objc_allocWithZone((Class)AMSURLSession) init];
  v0[34] = v10;
  [v10 setResponseDecoder:v1];

  id v11 = [objc_allocWithZone((Class)type metadata accessor for AuthURLDelegate()) init];
  v0[35] = v11;
  [v10 setDelegate:v11];
  id v12 = v3;
  id v13 = [v10 dataTaskPromiseWithRequest:v12 activity:dispatch thunk of MetricsActivity.nwActivity.getter()];
  v0[36] = v13;
  swift_unknownObjectRelease();

  v0[2] = v0;
  v0[7] = v0 + 17;
  v0[3] = sub_1000857B0;
  uint64_t v14 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_100086330;
  v0[13] = &unk_100115630;
  v0[14] = v14;
  [v13 resultWithCompletion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000857B0()
{
  sub_100008308();
  sub_1000082E0();
  sub_10000A43C();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 296) = *(void *)(v3 + 48);
  sub_10000F9E8();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_100085890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_100012288();
  sub_10000B2F0();
  uint64_t v11 = *(void *)(v10 + 264);
  id v12 = *(char **)(v10 + 184);
  id v13 = *(void (**)(void))(v10 + 160);
  uint64_t v14 = *(void **)(v10 + 136);

  sub_1000863A0(v14, v13, v12);
  uint64_t v16 = *(void **)(v10 + 272);
  uint64_t v15 = *(void **)(v10 + 280);
  uint64_t v17 = *(void **)(v10 + 256);
  if (v11)
  {

    **(void **)(v10 + 232) = v11;
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    id v12 = *(char **)(v10 + 232);
    uint64_t v18 = *(void *)(v10 + 184);

    sub_100087038(v18, (uint64_t)v12);
    sub_100016914();
    swift_storeEnumTagMultiPayload();
  }
  sub_10000D34C();
  sub_1000063D0((uint64_t)v12, v19, &qword_10012E4A8);
  dispatch thunk of MetricsActivity.complete<A>(with:)();

  sub_10000EB44((uint64_t)v12, &qword_10012E4A8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100008600();
  sub_10000A4B4();
  return v21(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10);
}

uint64_t sub_1000859C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_100012288();
  sub_10000B2F0();
  **(void **)(v12 + 232) = *(void *)(v12 + 264);
  swift_storeEnumTagMultiPayload();
  sub_10000D34C();
  sub_1000063D0(v10, v13, &qword_10012E4A8);
  dispatch thunk of MetricsActivity.complete<A>(with:)();

  sub_10000EB44(v10, &qword_10012E4A8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100008600();
  sub_10000A4B4();
  return v15(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10);
}

uint64_t sub_100085A84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_100012288();
  sub_10000B2F0();
  uint64_t v11 = *(void **)(v10 + 288);
  uint64_t v13 = *(void **)(v10 + 272);
  uint64_t v12 = *(void **)(v10 + 280);
  uint64_t v14 = *(void **)(v10 + 256);
  swift_willThrow();

  **(void **)(v10 + 232) = *(void *)(v10 + 296);
  swift_storeEnumTagMultiPayload();
  sub_10000D34C();
  sub_1000063D0((uint64_t)v12, v15, &qword_10012E4A8);
  dispatch thunk of MetricsActivity.complete<A>(with:)();

  sub_10000EB44((uint64_t)v12, &qword_10012E4A8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100008600();
  sub_10000A4B4();
  return v17(v16, v17, v18, v19, v20, v21, v22, v23, a9, a10);
}

uint64_t sub_100085B64()
{
  sub_100008308();
  v0[10] = v1;
  v0[11] = v2;
  uint64_t v3 = type metadata accessor for URL();
  v0[12] = v3;
  sub_1000082C8(v3);
  v0[13] = v4;
  v0[14] = sub_1000084E0();
  uint64_t v5 = type metadata accessor for AccountDataServerRequest(0);
  v0[15] = v5;
  sub_1000085F4(v5);
  v0[16] = sub_1000084E0();
  sub_10000F9E8();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_100085C14()
{
  sub_10000B2F0();
  uint64_t v1 = *(void *)(v0 + 80);
  id v2 = [objc_allocWithZone((Class)AMSURLRequestEncoder) initWithBag:*(void *)(v0 + 88)];
  *(void *)(v0 + 136) = v2;
  [v2 setRequestEncoding:3];
  id v3 = sub_10008696C(v1);
  *(void *)(v0 + 144) = 0;
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v0 + 128);
  uint64_t v6 = *(void *)(v0 + 80);
  [v2 setAccount:v3];

  sub_10007595C(v6, v5);
  *(_DWORD *)(v0 + 216) = swift_getEnumCaseMultiPayload();
  id v7 = v2;
  sub_100087108(v5);
  swift_getObjectType();
  *(void *)(v0 + 152) = sub_10008740C();
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 160) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100085DC4;
  uint64_t v9 = sub_100016914();
  return sub_10008FFEC(v9);
}

uint64_t sub_100085DC4()
{
  sub_100008308();
  sub_1000082E0();
  sub_10000A43C();
  *id v2 = v1;
  uint64_t v3 = *v0;
  sub_10000A43C();
  *uint64_t v4 = v3;
  *(void *)(v6 + 16_Block_object_dispose(&a9, 8) = v5;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_10000F9E8();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100085EB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_100012288();
  sub_10000B2F0();
  uint64_t v11 = v10[18];
  sub_100087534(v10[10], v10[21], v10[14]);
  if (v11)
  {
    uint64_t v12 = (void *)v10[17];

    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000A4B4();
    return v14(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10);
  }
  else
  {
    uint64_t v22 = v10[10];

    v10[22] = sub_1000871AC(v22);
    sub_100011D80(&qword_10012EBA0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1000DA680;
    *(void *)(inited + 32) = 0x646975472D58;
    *(void *)(inited + 40) = 0xE600000000000000;
    id v24 = [self deviceGUID];
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v27 = v26;

    *(void *)(inited + 4_Block_object_dispose(&a9, 8) = v25;
    *(void *)(inited + 56) = v27;
    v10[23] = Dictionary.init(dictionaryLiteral:)();
    int64_t v28 = (void *)swift_task_alloc();
    v10[24] = (uint64_t)v28;
    *int64_t v28 = v10;
    v28[1] = sub_100086094;
    sub_10000A4B4();
    return sub_1000B5C78(v29, v30, v31, v32);
  }
}

uint64_t sub_100086094(uint64_t a1)
{
  uint64_t v4 = *v2;
  sub_10000A43C();
  *uint64_t v5 = v4;
  *uint64_t v5 = *v2;
  *(void *)(v4 + 200) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v1) {
    *(void *)(v4 + 20_Block_object_dispose(&a9, 8) = a1;
  }
  sub_10000F9E8();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_1000861D0()
{
  uint64_t v1 = (void *)v0[22];
  id v2 = (void *)v0[17];

  uint64_t v3 = sub_100016914();
  v4(v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v6 = v0[26];
  return v5(v6);
}

uint64_t sub_100086280()
{
  uint64_t v1 = (void *)v0[22];
  id v2 = (void *)v0[17];
  uint64_t v4 = v0[13];
  uint64_t v3 = v0[14];
  uint64_t v5 = v0[12];

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100008600();
  return v6();
}

uint64_t sub_100086330(uint64_t result, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 32);
  if (a3)
  {
    id v4 = a3;
    return sub_1000ABB38(v3, v4);
  }
  else if (a2)
  {
    id v5 = a2;
    return sub_1000ABBC0(v3, v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000863A0@<X0>(void *a1@<X0>, void (*a2)(void)@<X1>, char *a3@<X8>)
{
  uint64_t v51 = a2;
  uint64_t v6 = sub_100011D80(&qword_10012E458);
  uint64_t v7 = sub_1000085F4(v6);
  __chkstk_darwin(v7);
  sub_100008324();
  sub_10000F6C8();
  __chkstk_darwin(v8);
  uint64_t v56 = (uint64_t)v47 - v9;
  uint64_t v10 = type metadata accessor for Date();
  sub_10000BFC4();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  sub_100008324();
  sub_10000F6C8();
  __chkstk_darwin(v14);
  sub_10000F6C8();
  __chkstk_darwin(v15);
  sub_10000F6C8();
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)v47 - v18;
  __chkstk_darwin(v17);
  sub_10000F6C8();
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)v47 - v21;
  static Date.now.getter();
  uint64_t v23 = sub_10008709C(a1);
  if (!v23 || (uint64_t v24 = sub_100086B18(v23), swift_bridgeObjectRelease(), !v24))
  {
    uint64_t v24 = Dictionary.init(dictionaryLiteral:)();
    swift_bridgeObjectRelease();
  }
  sub_100087A10((uint64_t)[a1 responseStatusCode], v24);
  if (v3)
  {
    sub_10000855C();
    v25();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v48 = a3;
    uint64_t v49 = v10;
    id v26 = [a1 data];
    uint64_t v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v29 = v28;

    sub_100087C14(__src);
    sub_1000124D4(v27, v29);
    uint64_t v31 = v56;
    sub_1000B237C(0xD00000000000001CLL, 0x8000000100102140, v24, v56);
    uint64_t v32 = v31;
    uint64_t v33 = v52;
    sub_1000063D0(v32, v52, &qword_10012E458);
    uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    uint64_t v35 = v49;
    v47[1] = v12 + 16;
    v47[0] = v34;
    v34(v19, v22, v49);
    if (sub_10001044C(v33, 1, v35) == 1)
    {
      uint64_t v36 = v54;
      Date.addingTimeInterval(_:)();
      uint64_t v37 = v36;
      sub_100008628();
      v38();
      sub_10000EB44(v33, &qword_10012E458);
    }
    else
    {
      sub_100008628();
      v39();
      uint64_t v37 = v54;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v54, v33, v35);
    }
    sub_1000B2650(1702125892, 0xE400000000000000, v24, v53);
    BOOL v40 = *(void (**)(void))(v12 + 32);
    uint64_t v41 = v49;
    sub_10000B16C();
    v40();
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t, uint64_t))v47[0])(v50, v37, v41);
    unint64_t v42 = (unint64_t)[a1 responseStatusCode];
    if ((v42 & 0x8000000000000000) != 0)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      unint64_t v43 = v42;
      uint64_t v44 = v51;
      sub_10000855C();
      v44();
      sub_10000EB44(v56, &qword_10012E458);
      sub_10000855C();
      v44();
      uint64_t v45 = type metadata accessor for AccountDataServerResponse(0);
      int64_t v46 = v48;
      sub_10000B16C();
      v40();
      memcpy(v46, __src, 0xE8uLL);
      sub_10000B16C();
      uint64_t result = ((uint64_t (*)(void))v40)();
      *(void *)&v46[*(int *)(v45 + 24)] = v43;
    }
  }
  return result;
}

id sub_10008696C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccountIdentity.DSID();
  sub_10000BFC4();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10008787C(a1, (uint64_t)v7);
  id v8 = objc_msgSend(self, "ams_sharedAccountStore");
  AccountIdentity.DSID.value.getter();
  Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
  id v10 = objc_msgSend(v8, "ams_iTunesAccountWithDSID:", isa);

  if (!v10)
  {
    type metadata accessor for AccountDataNetworkingCore.Errors();
    sub_100087164(&qword_10012EBA8, (void (*)(uint64_t))type metadata accessor for AccountDataNetworkingCore.Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 16))(v11, v7, v2);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v2);
  return v10;
}

unint64_t sub_100086B18(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100011D80(&qword_10012EB90);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  sub_1000B5B94(a1, v29);
  int64_t v3 = v29[3];
  unint64_t v4 = v29[4];
  int64_t v21 = (unint64_t)(v29[2] + 64) >> 6;
  uint64_t v22 = v29[1];
  uint64_t v23 = v29[0];
  unint64_t result = swift_bridgeObjectRetain();
  if (!v4) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v6 = (v4 - 1) & v4;
  unint64_t v7 = __clz(__rbit64(v4)) | (v3 << 6);
  for (i = v3; ; unint64_t v7 = __clz(__rbit64(v10)) + (i << 6))
  {
    sub_10000E170(*(void *)(v23 + 48) + 40 * v7, (uint64_t)__src);
    sub_1000115F4(*(void *)(v23 + 56) + 32 * v7, (uint64_t)&__src[40]);
    memcpy(__dst, __src, sizeof(__dst));
    sub_10000E170((uint64_t)__dst, (uint64_t)v26);
    if (!swift_dynamicCast())
    {
      sub_10000EB44((uint64_t)__dst, &qword_10012EB98);
LABEL_33:
      swift_bridgeObjectRelease();
      sub_100017254();
      swift_release();
      return 0;
    }
    sub_1000115F4((uint64_t)&__dst[40], (uint64_t)v26);
    sub_10000EB44((uint64_t)__dst, &qword_10012EB98);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_33;
    }
    unint64_t result = sub_10001169C(v24, v25);
    unint64_t v12 = result;
    if (v13)
    {
      uint64_t v14 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *uint64_t v14 = v24;
      v14[1] = v25;
      uint64_t v15 = (uint64_t *)(v2[7] + 16 * v12);
      unint64_t result = swift_bridgeObjectRelease();
      *uint64_t v15 = v24;
      v15[1] = v25;
      goto LABEL_29;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v16 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v16 = v24;
    v16[1] = v25;
    uint64_t v17 = (uint64_t *)(v2[7] + 16 * result);
    *uint64_t v17 = v24;
    v17[1] = v25;
    uint64_t v18 = v2[2];
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (v19) {
      goto LABEL_37;
    }
    v2[2] = v20;
LABEL_29:
    int64_t v3 = i;
    unint64_t v4 = v6;
    if (v6) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v9 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      goto LABEL_38;
    }
    if (v9 >= v21) {
      goto LABEL_34;
    }
    unint64_t v10 = *(void *)(v22 + 8 * v9);
    int64_t i = v3 + 1;
    if (!v10)
    {
      int64_t i = v3 + 2;
      if (v3 + 2 >= v21) {
        goto LABEL_34;
      }
      unint64_t v10 = *(void *)(v22 + 8 * i);
      if (!v10)
      {
        int64_t i = v3 + 3;
        if (v3 + 3 >= v21) {
          goto LABEL_34;
        }
        unint64_t v10 = *(void *)(v22 + 8 * i);
        if (!v10)
        {
          int64_t i = v3 + 4;
          if (v3 + 4 >= v21) {
            goto LABEL_34;
          }
          unint64_t v10 = *(void *)(v22 + 8 * i);
          if (!v10)
          {
            int64_t i = v3 + 5;
            if (v3 + 5 >= v21) {
              goto LABEL_34;
            }
            unint64_t v10 = *(void *)(v22 + 8 * i);
            if (!v10)
            {
              int64_t v11 = v3 + 6;
              while (v11 < v21)
              {
                unint64_t v10 = *(void *)(v22 + 8 * v11++);
                if (v10)
                {
                  int64_t i = v11 - 1;
                  goto LABEL_21;
                }
              }
LABEL_34:
              sub_100017254();
              return (unint64_t)v2;
            }
          }
        }
      }
    }
LABEL_21:
    uint64_t v6 = (v10 - 1) & v10;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_100086EBC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100086F74;
  return sub_100085244();
}

uint64_t sub_100086F74()
{
  sub_100008308();
  sub_1000082E0();
  uint64_t v1 = *v0;
  sub_10000A43C();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_100008600();
  return v3();
}

uint64_t sub_100087038(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccountDataServerResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008709C(void *a1)
{
  id v1 = [a1 responseHeaders];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100087108(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccountDataServerRequest(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100087164(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000871AC(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for AccountDataServerRequest.Put(0);
  sub_1000082F8();
  __chkstk_darwin(v5);
  sub_10000D360();
  type metadata accessor for AccountDataServerRequest(0);
  sub_1000082F8();
  __chkstk_darwin(v6);
  sub_10000A49C();
  sub_10007595C(a1, v2);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_10008881C(v2, (void (*)(void))type metadata accessor for AccountDataServerRequest);
    return 0;
  }
  else
  {
    sub_100088414(v2, v1, (void (*)(void))type metadata accessor for AccountDataServerRequest.Put);
    sub_100011D80(&qword_10012EBB8);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1000DA680;
    *(void *)(v8 + 56) = &type metadata for String;
    *(void *)(v8 + 32) = 0xD000000000000013;
    *(void *)(v8 + 40) = 0x8000000100101E60;
    uint64_t v9 = *(void *)(v1 + *(int *)(v4 + 20));
    *(void *)(v8 + 8_Block_object_dispose(&a9, 8) = &type metadata for UInt64;
    *(void *)(v8 + 64) = v9;
    sub_100087CD0();
    uint64_t v7 = NSDictionary.init(dictionaryLiteral:)();
    unint64_t v10 = (unsigned char *)(v1 + *(int *)(v4 + 24));
    if (*v10 != 2)
    {
      Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
      uint64_t v12 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      sub_100011EFC(v12);

      swift_unknownObjectRelease();
    }
    if (v10[1] != 2)
    {
      Class v13 = Bool._bridgeToObjectiveC()().super.super.isa;
      uint64_t v14 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      sub_100011EFC(v14);

      swift_unknownObjectRelease();
    }
    sub_10008881C(v1, (void (*)(void))type metadata accessor for AccountDataServerRequest.Put);
  }
  return v7;
}

uint64_t sub_10008740C()
{
  sub_1000041F8(0, 1, 1, (uint64_t)_swiftEmptyArrayStorage);
  uint64_t v1 = v0;
  unint64_t v3 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  unint64_t v4 = v3 + 1;
  if (v3 >= v2 >> 1)
  {
    sub_1000041F8(v2 > 1, v3 + 1, 1, v0);
    uint64_t v1 = v10;
  }
  *(void *)(v1 + 16) = v4;
  uint64_t v5 = v1 + 24 * v3;
  *(void *)(v5 + 32) = 0xD000000000000013;
  *(void *)(v5 + 40) = 0x80000001001015F0;
  *(unsigned char *)(v5 + 4_Block_object_dispose(&a9, 8) = 4;
  unint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v3 + 2;
  if (v4 >= v6 >> 1)
  {
    sub_1000041F8(v6 > 1, v7, 1, v1);
    uint64_t v1 = v11;
  }
  *(void *)(v1 + 16) = v7;
  uint64_t v8 = v1 + 24 * v4;
  *(void *)(v8 + 32) = 0xD000000000000013;
  *(void *)(v8 + 40) = 0x8000000100101610;
  *(unsigned char *)(v8 + 4_Block_object_dispose(&a9, 8) = 4;
  return v1;
}

id sub_100087534@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = sub_100011D80(&qword_10012EBC8);
  uint64_t v9 = sub_1000085F4(v8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v28 - v13;
  type metadata accessor for AccountDataServerRequest(0);
  sub_1000082F8();
  __chkstk_darwin(v15);
  sub_10000D360();
  id result = sub_1000A297C(a2);
  if (!v4)
  {
    id v20 = result;
    uint64_t v21 = v18;
    uint64_t v28 = a3;
    uint64_t v29 = v19;
    uint64_t v30 = v17;
    sub_10007595C(a1, v3);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v22 = v30;
      URL.init(string:)();
      uint64_t v23 = type metadata accessor for URL();
      if (sub_10001044C((uint64_t)v14, 1, v23) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v28, v14, v23);
        return (id)sub_10008881C(v3, (void (*)(void))type metadata accessor for AccountDataServerRequest);
      }
      sub_100018910((uint64_t)v14, &qword_10012EBC8);
      type metadata accessor for AccountDataNetworkingCore.Errors();
      sub_100087D58(&qword_10012EBA8, (void (*)(uint64_t))type metadata accessor for AccountDataNetworkingCore.Errors);
      sub_10000B2FC();
      *uint64_t v24 = v20;
      v24[1] = v22;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
    else
    {
      uint64_t v25 = v29;
      URL.init(string:)();
      uint64_t v26 = type metadata accessor for URL();
      if (sub_10001044C((uint64_t)v12, 1, v26) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v28, v12, v26);
        return (id)sub_10008881C(v3, (void (*)(void))type metadata accessor for AccountDataServerRequest);
      }
      sub_100018910((uint64_t)v12, &qword_10012EBC8);
      type metadata accessor for AccountDataNetworkingCore.Errors();
      sub_100087D58(&qword_10012EBA8, (void (*)(uint64_t))type metadata accessor for AccountDataNetworkingCore.Errors);
      sub_10000B2FC();
      *uint64_t v27 = v21;
      v27[1] = v25;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      swift_willThrow();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return (id)sub_10008881C(v3, (void (*)(void))type metadata accessor for AccountDataServerRequest);
  }
  return result;
}

uint64_t sub_10008787C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = type metadata accessor for AccountDataServerRequest.Put(0);
  uint64_t v7 = sub_1000085F4(v6);
  __chkstk_darwin(v7);
  sub_10000A49C();
  uint64_t v8 = type metadata accessor for AccountDataServerRequest.Get(0);
  uint64_t v9 = sub_1000085F4(v8);
  __chkstk_darwin(v9);
  sub_100008338();
  uint64_t v12 = v11 - v10;
  type metadata accessor for AccountDataServerRequest(0);
  sub_1000082F8();
  __chkstk_darwin(v13);
  sub_10000F9D0();
  sub_10007595C(a1, v3);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_100088414(v3, v12, (void (*)(void))type metadata accessor for AccountDataServerRequest.Get);
    type metadata accessor for AccountIdentity.DSID();
    sub_1000082F8();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 32))(a2, v12);
  }
  else
  {
    sub_100088414(v3, v2, (void (*)(void))type metadata accessor for AccountDataServerRequest.Put);
    type metadata accessor for AccountIdentity.DSID();
    sub_1000082F8();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 32))(a2, v2);
  }
}

void sub_100087A10(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100011D80(&qword_10012E458);
  uint64_t v6 = sub_1000085F4(v5);
  __chkstk_darwin(v6);
  sub_10000F9D0();
  uint64_t v7 = type metadata accessor for Date();
  sub_10000BFC4();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  sub_100008338();
  uint64_t v13 = v12 - v11;
  if (a1 == 429)
  {
    sub_1000B237C(0x66612D7972746572, 0xEB00000000726574, a2, v2);
    if (sub_10001044C(v2, 1, v7) == 1)
    {
      sub_100018910(v2, &qword_10012E458);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v13, v2, v7);
      type metadata accessor for AccountDataServerResponse.Errors(0);
      sub_100087D58(&qword_10012EBB0, (void (*)(uint64_t))type metadata accessor for AccountDataServerResponse.Errors);
      swift_allocError();
      uint64_t v15 = v14;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v14, v13, v7);
      uint64_t v16 = sub_100011D80(&qword_10012E868);
      sub_1000101E8(v15, 0, 1, v16);
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v13, v7);
    }
  }
}

void *sub_100087C14@<X0>(void *a1@<X8>)
{
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_10007F8BC();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  id result = (void *)swift_release();
  if (!v1) {
    return memcpy(a1, __src, 0xE8uLL);
  }
  return result;
}

unint64_t sub_100087CD0()
{
  unint64_t result = qword_10012EBC0;
  if (!qword_10012EBC0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10012EBC0);
  }
  return result;
}

uint64_t type metadata accessor for AccountDataNetworkingCore.Errors()
{
  uint64_t result = qword_10012EC40;
  if (!qword_10012EC40) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100087D58(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100087DA0()
{
  return sub_1000083A0();
}

uint64_t sub_100087DBC(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100114E78, v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t sub_100087E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v12 = a1 == a5 && a2 == a6;
  if (v12 || (char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v13 & 1) != 0))
  {
    if (a3 == a7 && a4 == a8)
    {
      return 1;
    }
    else
    {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

uint64_t sub_100087EB4(void *a1)
{
  uint64_t v3 = sub_100011D80(&qword_10012EC90);
  sub_10000BFC4();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_100008338();
  uint64_t v9 = v8 - v7;
  sub_1000087B0(a1, a1[3]);
  sub_100088AE0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1) {
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
}

Swift::Int sub_100087FF8()
{
  return Hasher._finalize()();
}

uint64_t sub_100088088(void *a1)
{
  sub_100011D80(&qword_10012EC80);
  sub_10000BFC4();
  __chkstk_darwin(v3);
  sub_100008338();
  uint64_t v4 = a1[4];
  sub_1000087B0(a1, a1[3]);
  sub_100088AE0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_10000D47C((uint64_t)a1);
  }
  else
  {
    uint64_t v4 = KeyedDecodingContainer.decode(_:forKey:)();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v6 = sub_100005AA4();
    v7(v6);
    swift_bridgeObjectRetain();
    sub_10000D47C((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v4;
}

uint64_t sub_100088240(char *a1, char *a2)
{
  return sub_1000BA030(*a1, *a2);
}

Swift::Int sub_10008824C()
{
  return sub_10007A5A0();
}

uint64_t sub_100088254()
{
  return sub_1000BA230();
}

Swift::Int sub_10008825C()
{
  return sub_10007A854();
}

uint64_t sub_100088264@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100087DBC(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100088294@<X0>(void *a1@<X8>)
{
  unint64_t result = sub_100087DA0();
  *a1 = 0xD000000000000013;
  a1[1] = v3;
  return result;
}

unint64_t sub_1000882C8()
{
  return 0xD000000000000013;
}

uint64_t sub_1000882EC@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100087E10(a1);
  *a2 = result;
  return result;
}

void sub_100088314(void *a1@<X8>)
{
  *a1 = &off_100114E50;
}

uint64_t sub_100088324(uint64_t a1)
{
  unint64_t v2 = sub_100088AE0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100088360(uint64_t a1)
{
  unint64_t v2 = sub_100088AE0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10008839C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100088088(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1000883CC(void *a1)
{
  return sub_100087EB4(a1);
}

Swift::Int sub_1000883EC()
{
  return sub_100087FF8();
}

uint64_t sub_1000883F8(uint64_t *a1, uint64_t *a2)
{
  return sub_100087E14(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t sub_100088414(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_1000082F8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

ValueMetadata *type metadata accessor for AccountDataNetworkingBag()
{
  return &type metadata for AccountDataNetworkingBag;
}

uint64_t *sub_100088484(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      swift_bridgeObjectRetain();
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(v6 + 64));
        return a1;
      }
      uint64_t v8 = type metadata accessor for AccountIdentity.DSID();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1000885A0(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    return swift_bridgeObjectRelease();
  }
  else if (!result)
  {
    uint64_t v3 = type metadata accessor for AccountIdentity.DSID();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

void *sub_100088640(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
    }
    uint64_t v7 = type metadata accessor for AccountIdentity.DSID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_100088718(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10008881C((uint64_t)a1, (void (*)(void))type metadata accessor for AccountDataNetworkingCore.Errors);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
      }
      uint64_t v7 = type metadata accessor for AccountIdentity.DSID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10008881C(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_1000082F8();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

void *sub_100088874(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for AccountIdentity.DSID();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_100088928(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10008881C((uint64_t)a1, (void (*)(void))type metadata accessor for AccountDataNetworkingCore.Errors);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for AccountIdentity.DSID();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_100088A00()
{
  uint64_t result = type metadata accessor for AccountIdentity.DSID();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unint64_t sub_100088A94()
{
  unint64_t result = qword_10012EC78;
  if (!qword_10012EC78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012EC78);
  }
  return result;
}

unint64_t sub_100088AE0()
{
  unint64_t result = qword_10012EC88;
  if (!qword_10012EC88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012EC88);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AccountDataNetworkingBag.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100088BF8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccountDataNetworkingBag.CodingKeys()
{
  return &type metadata for AccountDataNetworkingBag.CodingKeys;
}

unint64_t sub_100088C34()
{
  unint64_t result = qword_10012EC98;
  if (!qword_10012EC98)
  {
    sub_10007FBF4(&qword_10012ECA0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012EC98);
  }
  return result;
}

unint64_t sub_100088C8C()
{
  unint64_t result = qword_10012ECA8;
  if (!qword_10012ECA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012ECA8);
  }
  return result;
}

unint64_t sub_100088CDC()
{
  unint64_t result = qword_10012ECB0;
  if (!qword_10012ECB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012ECB0);
  }
  return result;
}

unint64_t sub_100088D2C()
{
  unint64_t result = qword_10012ECB8;
  if (!qword_10012ECB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012ECB8);
  }
  return result;
}

void sub_100088D78()
{
  sub_10000A46C();
  uint64_t v2 = v1;
  uint64_t v3 = sub_100011D80(&qword_10012E458);
  uint64_t v4 = sub_1000085F4(v3);
  __chkstk_darwin(v4);
  sub_100008338();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = type metadata accessor for Date();
  sub_10000BFC4();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_100011FA0();
  BOOL v12 = (int *)type metadata accessor for AccountDataState(0);
  sub_100006374(v2 + v12[9], v7, &qword_10012E458);
  if (sub_10001044C(v7, 1, v8) == 1)
  {
    sub_100018910(v7, &qword_10012E458);
    if (*(_WORD *)(v2 + v12[8]) == 3)
    {
      __int16 v27 = *(_WORD *)(v2 + v12[8]);
      sub_100007EC8(v2, (uint64_t)v29, &qword_10012E460);
      sub_100007EC8((uint64_t)v29, (uint64_t)v30, &qword_10012E460);
      if (sub_100018644((uint64_t)v30) == 1 || v30[194] != 1)
      {
        uint64_t v20 = sub_10008A4F4();
        sub_100006374(v20, v21, &qword_10012E458);
        sub_100016694();
        uint64_t v22 = *(void (**)(void))(v10 + 16);
        sub_10000F9F4();
        v22();
        sub_10000F9F4();
        v22();
        sub_1000120E0();
        uint64_t v23 = sub_100016774();
        sub_1000122A0(v2, v24, v25, v23);
        sub_100007EC8((uint64_t)v29, v0, &qword_10012E460);
        *(_WORD *)(v0 + v12[8]) = 3;
        uint64_t v26 = (uint64_t *)sub_10008A4E0(v12[10]);
        sub_100089B1C(v26);
      }
      else
      {
        uint64_t v13 = sub_10008A4F4();
        sub_100006374(v13, v14, &qword_10012E458);
        sub_100016694();
        uint64_t v15 = *(void (**)(void))(v10 + 16);
        sub_10000F9F4();
        v15();
        sub_10000F9F4();
        v15();
        sub_1000120E0();
        uint64_t v16 = sub_100016774();
        sub_1000122A0(v2, v17, v18, v16);
        sub_100007EC8((uint64_t)v29, v0, &qword_10012E460);
        *(_WORD *)(v0 + v12[8]) = v27;
        uint64_t v19 = sub_10008A4E0(v12[10]);
        sub_100007EC8(v19, (uint64_t)v28, &qword_10012E460);
        sub_1000758A8((uint64_t)v28);
      }
    }
    else
    {
      sub_10008A294();
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v0, v7, v8);
    sub_100089BEC();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0, v8);
  }
  sub_10000A484();
}

void sub_100089084()
{
  sub_10000A46C();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  type metadata accessor for AccountDataServerResponse(0);
  sub_1000082F8();
  __chkstk_darwin(v7);
  sub_100008338();
  uint64_t v10 = (const void *)(v9 - v8);
  sub_100011D80(&qword_10012E4A8);
  sub_1000082F8();
  __chkstk_darwin(v11);
  sub_10000F758();
  sub_100006374(v4, v0, &qword_10012E4A8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_100089318();
    swift_errorRelease();
  }
  else
  {
    sub_100089B90(v0, (uint64_t)v10, (void (*)(void))type metadata accessor for AccountDataServerResponse);
    uint64_t v12 = type metadata accessor for AccountDataState(0);
    if (*(_WORD *)(v2 + *(int *)(v12 + 40)) == 3)
    {
      uint64_t v13 = (int *)v12;
      __int16 v19 = *(_WORD *)(v2 + *(int *)(v12 + 40));
      memcpy(v20, v10, sizeof(v20));
      memcpy(v21, v10, 0xE8uLL);
      nullsub_8(v21);
      uint64_t v14 = v6 + v13[5];
      uint64_t v15 = type metadata accessor for Date();
      sub_1000082F8();
      uint64_t v17 = *(void (**)(void))(v16 + 16);
      sub_100015B90();
      v17();
      sub_1000101E8(v14, 0, 1, v15);
      sub_100011F20(v6 + v13[6]);
      sub_100015B90();
      v17();
      __int16 v18 = *(_WORD *)(v2 + v13[8]);
      sub_100011F20(v6 + v13[9]);
      sub_100011F20(v6 + v13[11]);
      sub_100006374(v2 + v13[13], v6 + v13[13], &qword_10012E4A0);
      sub_100007EC8((uint64_t)v21, v6, &qword_10012E460);
      *(_WORD *)(v6 + v13[8]) = v18;
      *(_WORD *)(v6 + v13[10]) = v19;
      *(void *)(v6 + v13[12]) = 0;
      sub_1000758A8((uint64_t)v20);
    }
    else
    {
      sub_100089704();
    }
    sub_10008A488((uint64_t)v10, (void (*)(void))type metadata accessor for AccountDataServerResponse);
  }
  sub_10000A484();
}

void sub_100089318()
{
  sub_10000A46C();
  uint64_t v44 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = sub_100011D80(&qword_10012ECC0);
  uint64_t v10 = sub_1000085F4(v9);
  __chkstk_darwin(v10);
  sub_10000F758();
  uint64_t v11 = type metadata accessor for AccountDataServerResponse.Errors(0);
  sub_1000082F8();
  __chkstk_darwin(v12);
  sub_10000B31C();
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v43 - v14;
  uint64_t v16 = sub_100011D80(&qword_10012E458);
  uint64_t v17 = sub_1000085F4(v16);
  __chkstk_darwin(v17);
  sub_100008338();
  uint64_t v20 = v19 - v18;
  uint64_t v21 = (int *)type metadata accessor for AccountDataState(0);
  uint64_t v22 = v21;
  unsigned int v23 = *(unsigned __int16 *)(v4 + v21[8]);
  unsigned int v24 = *(unsigned __int16 *)(v4 + v21[10]);
  unsigned int v25 = v24 >> 8;
  int v26 = *(_WORD *)(v4 + v21[8]);
  unsigned int v27 = v23 >> 8;
  if (v26 == 2) {
    __int16 v28 = *(_WORD *)(v4 + v21[10]);
  }
  else {
    __int16 v28 = *(_WORD *)(v4 + v21[8]);
  }
  if (v27 == 2) {
    unsigned int v27 = v24 >> 8;
  }
  if (v26 != 3)
  {
    unsigned int v25 = v27;
    LOBYTE(v24) = v28;
  }
  int v29 = v24 | (v25 << 8);
  if (*(_WORD *)(v4 + v21[10]) != 3) {
    unsigned int v23 = v29;
  }
  HIDWORD(v43) = v23;
  uint64_t v30 = v4 + v21[6];
  sub_100006374(v30, v20, &qword_10012E458);
  v45[0] = v6;
  swift_errorRetain();
  sub_100011D80(&qword_10012E438);
  if (swift_dynamicCast())
  {
    sub_1000101E8(v1, 0, 1, v11);
    sub_100018910(v20, &qword_10012E458);
    sub_100089B90(v1, (uint64_t)v15, (void (*)(void))type metadata accessor for AccountDataServerResponse.Errors);
    sub_100089B90((uint64_t)v15, v0, (void (*)(void))type metadata accessor for AccountDataServerResponse.Errors);
    uint64_t v31 = sub_100011D80(&qword_10012E868);
    if (sub_10001044C(v0, 1, v31) == 1)
    {
      sub_100006374(v30, v20, &qword_10012E458);
      sub_10008A488(v0, (void (*)(void))type metadata accessor for AccountDataServerResponse.Errors);
    }
    else
    {
      uint64_t v32 = type metadata accessor for Date();
      sub_1000082F8();
      sub_10000D340();
      v33();
      sub_1000101E8(v20, 0, 1, v32);
    }
  }
  else
  {
    sub_100011F20(v1);
    sub_100018910(v1, &qword_10012ECC0);
  }
  sub_100007EC8(v4, (uint64_t)v45, &qword_10012E460);
  uint64_t v34 = sub_100016874(v22[5]);
  sub_100006374(v34, v35, &qword_10012E458);
  type metadata accessor for Date();
  sub_1000082F8();
  uint64_t v37 = *(void (**)(void))(v36 + 16);
  sub_1000083BC();
  v37();
  sub_10000D378(v8 + v22[9], 1);
  uint64_t v38 = v8 + v22[11];
  sub_1000083BC();
  v37();
  sub_10000D378(v38, 0);
  uint64_t v39 = *(void *)(v4 + v22[12]);
  uint64_t v40 = v39 + 1;
  if (v39 == -1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v41 = sub_100016874(v22[13]);
    sub_100006374(v41, v42, &qword_10012E4A0);
    sub_100007EC8((uint64_t)v45, v8, &qword_10012E460);
    sub_100007EC8(v20, v8 + v22[6], &qword_10012E458);
    *(_WORD *)(v8 + v22[8]) = WORD2(v43);
    *(_WORD *)(v8 + v22[10]) = 3;
    *(void *)(v8 + v22[12]) = v40;
    sub_100089B1C(v45);
    sub_10000A484();
  }
}

void sub_100089704()
{
  sub_10000A46C();
  uint64_t v2 = v1;
  __int16 v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = type metadata accessor for Date();
  sub_10000BFC4();
  uint64_t v44 = v10;
  __chkstk_darwin(v11);
  sub_100008338();
  uint64_t v14 = (char *)(v13 - v12);
  uint64_t v15 = sub_100011D80(&qword_10012E458);
  uint64_t v16 = sub_1000085F4(v15);
  __chkstk_darwin(v16);
  sub_100016A54();
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v39 - v18;
  sub_100007EC8(v2, (uint64_t)v50, &qword_10012E460);
  sub_100007EC8((uint64_t)v50, (uint64_t)v51, &qword_10012E460);
  if (sub_100018644((uint64_t)v51) != 1)
  {
    uint64_t v42 = v9;
    memcpy(v49, v51, sizeof(v49));
    sub_10007BEB0(v4, (uint64_t)v47);
    memcpy(v48, v6, sizeof(v48));
    memcpy(v46, v6, sizeof(v46));
    char v20 = sub_10007C094();
    sub_10007FC88((uint64_t)v47);
    if (v20)
    {
      memcpy(v45, v46, sizeof(v45));
      nullsub_8(v45);
      uint64_t v21 = (int *)type metadata accessor for AccountDataState(0);
      uint64_t v22 = v44;
      uint64_t v23 = v8 + v21[5];
      type metadata accessor for AccountDataServerResponse(0);
      unsigned int v24 = *(void (**)(void))(v22 + 16);
      uint64_t v25 = v42;
      sub_100015B90();
      v24();
      sub_1000101E8(v23, 0, 1, v25);
      sub_10000B17C(v8 + v21[6]);
      sub_100015B90();
      v24();
      __int16 v26 = *(_WORD *)(v2 + v21[8]);
      sub_10000B17C(v8 + v21[9]);
      sub_10000B17C(v8 + v21[11]);
      sub_100006374(v2 + v21[13], v8 + v21[13], &qword_10012E4A0);
      sub_100007EC8((uint64_t)v45, v8, &qword_10012E460);
      *(_WORD *)(v8 + v21[8]) = v26;
      sub_10000F8D8();
      unsigned int v27 = v48;
      goto LABEL_16;
    }
    uint64_t v9 = v42;
  }
  uint64_t v40 = v6;
  uint64_t v41 = v2;
  LODWORD(v42) = HIBYTE(v4);
  memcpy(v46, v6, sizeof(v46));
  uint64_t v28 = type metadata accessor for AccountDataServerResponse(0);
  int v29 = &v6[*(int *)(v28 + 20)];
  uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
  uint64_t v43 = v19;
  v30(v19, v29, v9);
  sub_10000D378((uint64_t)v19, 0);
  sub_10000D378(v0, 1);
  v30(v14, &v40[*(int *)(v28 + 28)], v9);
  uint64_t v31 = (int *)type metadata accessor for AccountDataState(0);
  uint64_t v32 = v41;
  unsigned int v33 = *(unsigned __int16 *)(v41 + v31[8]);
  int v34 = *(_WORD *)(v41 + v31[8]);
  unsigned int v35 = v33 >> 8;
  if (v34 == 2) {
    LOBYTE(v33) = v4;
  }
  if (v35 == 2) {
    LOWORD(v35) = v42;
  }
  if (v34 == 3) {
    __int16 v36 = v42;
  }
  else {
    __int16 v36 = v35;
  }
  if (v34 == 3) {
    unsigned __int8 v37 = v4;
  }
  else {
    unsigned __int8 v37 = v33;
  }
  memcpy(v45, v46, sizeof(v45));
  nullsub_8(v45);
  sub_10000D378(v8 + v31[9], 1);
  sub_10000D378(v8 + v31[11], 1);
  sub_100006374(v32 + v31[13], v8 + v31[13], &qword_10012E4A0);
  sub_100007EC8((uint64_t)v45, v8, &qword_10012E460);
  sub_100007EC8((uint64_t)v43, v8 + v31[5], &qword_10012E458);
  sub_100007EC8(v0, v8 + v31[6], &qword_10012E458);
  sub_10000D340();
  v38();
  *(_WORD *)(v8 + v31[8]) = v37 | (unsigned __int16)(v36 << 8);
  sub_10000F8D8();
  unsigned int v27 = v46;
LABEL_16:
  sub_1000758A8((uint64_t)v27);
  sub_10000A484();
}

uint64_t *sub_100089B1C(uint64_t *a1)
{
  return a1;
}

uint64_t sub_100089B90(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_1000082F8();
  sub_10000D340();
  v4();
  return a2;
}

void sub_100089BEC()
{
  sub_10000A46C();
  unsigned int v68 = v3;
  uint64_t v72 = v4;
  unint64_t v73 = v5;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v69 = v10;
  uint64_t v70 = type metadata accessor for Date();
  sub_10000BFC4();
  uint64_t v71 = v11;
  __chkstk_darwin(v12);
  sub_100011FA0();
  uint64_t v13 = sub_100011D80(&qword_10012E458);
  uint64_t v14 = sub_1000085F4(v13);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v66 - v18;
  char v20 = (int *)type metadata accessor for AccountDataState(0);
  sub_1000082F8();
  __chkstk_darwin(v21);
  sub_10000B31C();
  __chkstk_darwin(v22);
  unsigned int v24 = (char *)&v66 - v23;
  uint64_t v25 = sub_100011D80(&qword_10012E4A0);
  uint64_t v26 = sub_1000085F4(v25);
  __chkstk_darwin(v26);
  sub_100016A54();
  __chkstk_darwin(v27);
  int v29 = (char *)&v66 - v28;
  uint64_t v72 = v9;
  Date.timeIntervalSince(_:)();
  if (v30 <= (double)v73)
  {
    sub_100006374(v7 + v20[13], (uint64_t)v29, &qword_10012E4A0);
    sub_100006374((uint64_t)v29, v1, &qword_10012E4A0);
    uint64_t v43 = type metadata accessor for CachedServerDataSyncAttempt(0);
    int v44 = sub_10001044C(v1, 1, v43);
    sub_100018910(v1, &qword_10012E4A0);
    BOOL v45 = v44 == 1;
    uint64_t v46 = v70;
    uint64_t v47 = v71;
    if (v45)
    {
      sub_100018910((uint64_t)v29, &qword_10012E4A0);
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v47 + 16))(&v29[*(int *)(v43 + 20)], v72, v46);
      *int v29 = v68;
      sub_1000101E8((uint64_t)v29, 0, 1, v43);
    }
    sub_100007EC8(v7, (uint64_t)v74, &qword_10012E460);
    uint64_t v48 = v69;
    sub_100006374(v7 + v20[5], v69 + v20[5], &qword_10012E458);
    sub_100006374(v7 + v20[6], v48 + v20[6], &qword_10012E458);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v48 + v20[7], v7 + v20[7], v46);
    __int16 v49 = *(_WORD *)(v7 + v20[8]);
    sub_100006374(v7 + v20[9], v48 + v20[9], &qword_10012E458);
    __int16 v50 = *(_WORD *)(v7 + v20[10]);
    sub_100006374(v7 + v20[11], v48 + v20[11], &qword_10012E458);
    uint64_t v51 = *(void *)(v7 + v20[12]);
    sub_100007EC8((uint64_t)v74, v48, &qword_10012E460);
    *(_WORD *)(v48 + v20[8]) = v49;
    *(_WORD *)(v48 + v20[10]) = v50;
    *(void *)(v48 + v20[12]) = v51;
    sub_100007EC8((uint64_t)v29, v48 + v20[13], &qword_10012E4A0);
    sub_100089B1C(v74);
  }
  else
  {
    id v66 = v19;
    Class v67 = v17;
    unsigned int v31 = *(unsigned __int16 *)(v7 + v20[10]);
    uint64_t v32 = v71;
    unsigned int v33 = (void (**)(uint64_t, uint64_t, uint64_t))(v71 + 16);
    if (*(_WORD *)(v7 + v20[10]) == 3)
    {
      sub_100007EC8(v7, (uint64_t)v74, &qword_10012E460);
      sub_100006374(v7 + v20[5], v0 + v20[5], &qword_10012E458);
      sub_100006374(v7 + v20[6], v0 + v20[6], &qword_10012E458);
      uint64_t v34 = v70;
      (*v33)(v0 + v20[7], v7 + v20[7], v70);
      __int16 v35 = *(_WORD *)(v7 + v20[8]);
      sub_1000101E8(v0 + v20[9], 1, 1, v34);
      sub_100006374(v7 + v20[11], v0 + v20[11], &qword_10012E458);
      uint64_t v36 = *(void *)(v7 + v20[12]);
      uint64_t v37 = v0 + v20[13];
      uint64_t v38 = type metadata accessor for CachedServerDataSyncAttempt(0);
      sub_1000122A0(v37, v39, v40, v38);
      sub_100007EC8((uint64_t)v74, v0, &qword_10012E460);
      *(_WORD *)(v0 + v20[8]) = v35;
      *(_WORD *)(v0 + v20[10]) = v31;
      *(void *)(v0 + v20[12]) = v36;
      sub_100089B1C(v74);
      uint64_t v41 = sub_10000FB58();
      sub_100088D78(v41, v0, v73, v68);
      uint64_t v42 = v0;
    }
    else
    {
      unsigned int v52 = v31 >> 8;
      sub_100007EC8(v7, (uint64_t)v74, &qword_10012E460);
      sub_100006374(v7 + v20[5], (uint64_t)v66, &qword_10012E458);
      sub_100006374(v7 + v20[6], (uint64_t)v67, &qword_10012E458);
      uint64_t v53 = v2;
      uint64_t v54 = v2;
      uint64_t v55 = v70;
      (*v33)(v54, v7 + v20[7], v70);
      unsigned int v56 = *(unsigned __int16 *)(v7 + v20[8]);
      int v57 = *(_WORD *)(v7 + v20[8]);
      unint64_t v58 = v73;
      if (v57 != 3)
      {
        if (v57 != 2) {
          LOBYTE(v31) = *(_WORD *)(v7 + v20[8]);
        }
        if (v56 >> 8 != 2) {
          unsigned int v52 = v56 >> 8;
        }
      }
      __int16 v59 = v31 | (unsigned __int16)((_WORD)v52 << 8);
      sub_1000101E8((uint64_t)&v24[v20[9]], 1, 1, v55);
      sub_100006374(v7 + v20[11], (uint64_t)&v24[v20[11]], &qword_10012E458);
      uint64_t v60 = *(void *)(v7 + v20[12]);
      uint64_t v61 = (uint64_t)&v24[v20[13]];
      uint64_t v62 = type metadata accessor for CachedServerDataSyncAttempt(0);
      sub_1000122A0(v61, v63, v64, v62);
      sub_100007EC8((uint64_t)v74, (uint64_t)v24, &qword_10012E460);
      sub_100007EC8((uint64_t)v66, (uint64_t)&v24[v20[5]], &qword_10012E458);
      sub_100007EC8((uint64_t)v67, (uint64_t)&v24[v20[6]], &qword_10012E458);
      (*(void (**)(char *, uint64_t, uint64_t))(v32 + 32))(&v24[v20[7]], v53, v55);
      *(_WORD *)&v24[v20[8]] = v59;
      *(_WORD *)&v24[v20[10]] = 3;
      *(void *)&v24[v20[12]] = v60;
      sub_100089B1C(v74);
      uint64_t v65 = sub_10000FB58();
      sub_100088D78(v65, v24, v58, v68);
      uint64_t v42 = (uint64_t)v24;
    }
    sub_10008A488(v42, (void (*)(void))type metadata accessor for AccountDataState);
  }
  sub_10000A484();
}

void sub_10008A294()
{
  sub_10000A46C();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  sub_100007EC8(v0, (uint64_t)v24, &qword_10012E460);
  sub_100007EC8((uint64_t)v24, (uint64_t)v25, &qword_10012E460);
  if (sub_100018644((uint64_t)v25) == 1 || v25[194] != 1)
  {
    uint64_t v4 = (int *)type metadata accessor for AccountDataState(0);
    uint64_t v12 = sub_100016874(v4[5]);
    sub_100006374(v12, v13, &qword_10012E458);
    sub_10000FBE8();
    sub_100008708();
    sub_1000082F8();
    uint64_t v15 = *(void (**)(void))(v14 + 16);
    sub_1000083BC();
    v15();
    uint64_t v16 = v3 + v4[9];
    sub_1000083BC();
    v15();
    sub_10000D378(v16, 0);
    __int16 v11 = *(_WORD *)(v1 + v4[8]);
    __int16 v9 = 3;
  }
  else
  {
    uint64_t v4 = (int *)type metadata accessor for AccountDataState(0);
    uint64_t v5 = sub_100016874(v4[5]);
    sub_100006374(v5, v6, &qword_10012E458);
    sub_10000FBE8();
    sub_100008708();
    sub_1000082F8();
    uint64_t v8 = *(void (**)(void))(v7 + 16);
    sub_1000083BC();
    v8();
    __int16 v9 = *(_WORD *)(v1 + v4[8]);
    uint64_t v10 = v3 + v4[9];
    sub_1000083BC();
    v8();
    sub_10000D378(v10, 0);
    __int16 v11 = 3;
  }
  uint64_t v17 = sub_100016874(v4[11]);
  sub_100006374(v17, v18, &qword_10012E458);
  uint64_t v19 = *(void *)(v1 + v4[12]);
  uint64_t v20 = v3 + v4[13];
  uint64_t v21 = type metadata accessor for CachedServerDataSyncAttempt(0);
  sub_1000122A0(v20, v22, v23, v21);
  sub_100007EC8((uint64_t)v24, v3, &qword_10012E460);
  *(_WORD *)(v3 + v4[8]) = v9;
  *(_WORD *)(v3 + v4[10]) = v11;
  *(void *)(v3 + v4[12]) = v19;
  sub_100089B1C(v24);
  sub_10000A484();
}

uint64_t sub_10008A488(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_1000082F8();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_10008A4E0@<X0>(uint64_t a1@<X8>)
{
  *(_WORD *)(v5 + a1) = v1;
  *(void *)(v5 + *(int *)(v4 + 48)) = v3;
  return v2 + 248;
}

uint64_t sub_10008A4F4()
{
  return v0 + *(int *)(v1 + 20);
}

uint64_t sub_10008A508@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for URL();
  sub_10000BFC4();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_10000F758();
  uint64_t v7 = sub_100011D80(&qword_10012EBC8);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)v22 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v22 - v14;
  id v16 = objc_msgSend(self, "ams_dataVaultDirectory");
  if (v16)
  {
    uint64_t v17 = v16;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v18 = 1;
  }
  sub_1000101E8((uint64_t)v10, v18, 1, v3);
  sub_10008B208((uint64_t)v10, (uint64_t)v13);
  if (sub_10001044C((uint64_t)v13, 1, v3) == 1)
  {
    sub_100018910((uint64_t)v13, &qword_10012EBC8);
    sub_1000101E8((uint64_t)v15, 1, 1, v3);
LABEL_7:
    sub_100018910((uint64_t)v15, &qword_10012EBC8);
    type metadata accessor for AccountDataFileSystemStore.Errors();
    sub_10008B1C0(&qword_10012ECD0, (void (*)(uint64_t))type metadata accessor for AccountDataFileSystemStore.Errors);
    swift_allocError();
    *uint64_t v20 = 0xD000000000000016;
    v20[1] = 0x80000001001021B0;
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v5 + 8);
  v19(v13, v3);
  URL.appendingPathComponent(_:isDirectory:)();
  v19(v1, v3);
  sub_1000101E8((uint64_t)v15, 0, 1, v3);
  if (sub_10001044C((uint64_t)v15, 1, v3) == 1) {
    goto LABEL_7;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a1, v15, v3);
}

uint64_t sub_10008A82C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for AccountDataStoreFilesystemCore();
  sub_1000082F8();
  __chkstk_darwin(v4);
  sub_100008338();
  uint64_t v7 = (char *)(v6 - v5);
  uint64_t v8 = sub_100011D80(&qword_10012ECC8);
  __chkstk_darwin(v8 - 8);
  sub_10000F758();
  uint64_t v9 = type metadata accessor for AMPAccount();
  sub_1000082F8();
  __chkstk_darwin(v10);
  sub_100008338();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = type metadata accessor for URL();
  sub_10000BFC4();
  uint64_t v16 = v15;
  __chkstk_darwin(v17);
  sub_100008338();
  uint64_t v20 = v19 - v18;
  uint64_t result = sub_10008A508(v19 - v18);
  if (!v1)
  {
    AccountIdentity.altDSID.getter();
    sub_10008E5CC(v2);
    if (sub_10001044C(v2, 1, v9) == 1)
    {
      sub_100018910(v2, &qword_10012ECC8);
      type metadata accessor for AccountDataFileSystemStore.Errors();
      sub_10008B1C0(&qword_10012ECD0, (void (*)(uint64_t))type metadata accessor for AccountDataFileSystemStore.Errors);
      swift_allocError();
      uint64_t v23 = v22;
      type metadata accessor for AccountIdentity();
      sub_1000082F8();
      (*(void (**)(uint64_t, uint64_t))(v24 + 16))(v23, a1);
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      uint64_t v25 = v16;
    }
    else
    {
      sub_100015CEC(v2, v13);
      id v26 = [self defaultManager];
      *((void *)v7 + 3) = &type metadata for LiveFileStore;
      *((void *)v7 + 4) = &off_1001169D8;
      *(void *)uint64_t v7 = v26;
      uint64_t v25 = v16;
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(&v7[*(int *)(v3 + 20)], v20, v14);
      uint64_t v27 = (uint64_t *)&v7[*(int *)(v3 + 24)];
      v27[3] = v9;
      void v27[4] = (uint64_t)&off_1001158D8;
      uint64_t v28 = sub_1000042C4(v27);
      sub_10008B15C(v13, (uint64_t)v28);
      sub_10008B81C();
      sub_10008B58C((uint64_t)v7, (void (*)(void))type metadata accessor for AccountDataStoreFilesystemCore);
      sub_10008B58C(v13, (void (*)(void))type metadata accessor for AMPAccount);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v20, v14);
  }
  return result;
}

uint64_t sub_10008AB70(uint64_t a1, uint64_t a2)
{
  uint64_t v50 = a1;
  uint64_t v49 = type metadata accessor for AccountDataStoreFilesystemCore();
  sub_1000082F8();
  __chkstk_darwin(v3);
  sub_100008338();
  unsigned int v52 = (void *)(v5 - v4);
  uint64_t v6 = type metadata accessor for URL();
  sub_10000BFC4();
  uint64_t v51 = v7;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v47 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v47 - v15;
  uint64_t v17 = sub_100011D80(&qword_10012ECC8);
  __chkstk_darwin(v17 - 8);
  sub_100008338();
  uint64_t v20 = v19 - v18;
  uint64_t v21 = type metadata accessor for AMPAccount();
  sub_1000082F8();
  __chkstk_darwin(v22);
  sub_100008338();
  uint64_t v25 = v24 - v23;
  uint64_t v26 = a2;
  AccountIdentity.altDSID.getter();
  sub_10008E5CC(v20);
  if (sub_10001044C(v20, 1, v21) == 1)
  {
    sub_100018910(v20, &qword_10012ECC8);
    type metadata accessor for AccountDataFileSystemStore.Errors();
    sub_10008B1C0(&qword_10012ECD0, (void (*)(uint64_t))type metadata accessor for AccountDataFileSystemStore.Errors);
    swift_allocError();
    uint64_t v28 = v27;
    type metadata accessor for AccountIdentity();
    sub_1000082F8();
    (*(void (**)(uint64_t, uint64_t))(v29 + 16))(v28, v26);
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  else
  {
    uint64_t v47 = v11;
    uint64_t v48 = v14;
    unsigned int v31 = v52;
    sub_100015CEC(v20, v25);
    uint64_t v32 = v53;
    sub_10008A508((uint64_t)v16);
    uint64_t v33 = v25;
    if (v32)
    {
      uint64_t v34 = v25;
    }
    else
    {
      id v35 = [self defaultManager];
      v31[3] = &type metadata for LiveFileStore;
      v31[4] = &off_1001169D8;
      *unsigned int v31 = v35;
      uint64_t v36 = v49;
      uint64_t v37 = (char *)v31 + *(int *)(v49 + 20);
      uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
      uint64_t v53 = v16;
      v38(v37, v16, v6);
      uint64_t v39 = (void *)((char *)v31 + *(int *)(v36 + 24));
      v39[3] = v21;
      v39[4] = (uint64_t)&off_1001158D8;
      uint64_t v40 = sub_1000042C4(v39);
      uint64_t v49 = v33;
      sub_10008B15C(v33, (uint64_t)v40);
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      JSONEncoder.init()();
      type metadata accessor for AccountDataState(0);
      sub_10008B1C0(&qword_10012ECD8, (void (*)(uint64_t))type metadata accessor for AccountDataState);
      uint64_t v41 = dispatch thunk of JSONEncoder.encode<A>(_:)();
      unint64_t v43 = v42;
      swift_release();
      int v44 = (void **)sub_1000087B0(v31, v31[3]);
      uint64_t v45 = (uint64_t)v48;
      sub_10008B95C((uint64_t)v48);
      sub_1000B3E60(v45, 1, *v44);
      uint64_t v46 = *(void (**)(void))(v51 + 8);
      sub_10000A4CC();
      v46();
      sub_10008BAE0((uint64_t)v47);
      Data.write(to:options:)();
      sub_10000A4CC();
      v46();
      sub_1000124D4(v41, v43);
      sub_10008B58C((uint64_t)v31, (void (*)(void))type metadata accessor for AccountDataStoreFilesystemCore);
      sub_10000A4CC();
      v46();
      uint64_t v34 = v49;
    }
    return sub_10008B58C(v34, (void (*)(void))type metadata accessor for AMPAccount);
  }
}

uint64_t sub_10008B0E4(uint64_t a1)
{
  return sub_10008A82C(a1);
}

uint64_t sub_10008B0FC(uint64_t a1, uint64_t a2)
{
  return sub_10008AB70(a1, a2);
}

uint64_t type metadata accessor for AccountDataFileSystemStore.Errors()
{
  uint64_t result = qword_10012ED50;
  if (!qword_10012ED50) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10008B15C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AMPAccount();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008B1C0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10008B208(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100011D80(&qword_10012EBC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_10008B270(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for AccountIdentity();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10008B370(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for AccountIdentity();
    uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
    return v3(a1, v2);
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

void *sub_10008B400(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for AccountIdentity();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_10008B4B0(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_10008B58C((uint64_t)a1, (void (*)(void))type metadata accessor for AccountDataFileSystemStore.Errors);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for AccountIdentity();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10008B58C(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_1000082F8();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

void *sub_10008B5E4(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for AccountIdentity();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_10008B69C(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10008B58C((uint64_t)a1, (void (*)(void))type metadata accessor for AccountDataFileSystemStore.Errors);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for AccountIdentity();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10008B778()
{
  uint64_t result = type metadata accessor for AccountIdentity();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccountDataFileSystemStore()
{
  return &type metadata for AccountDataFileSystemStore;
}

uint64_t sub_10008B81C()
{
  type metadata accessor for URL();
  sub_10000BFC4();
  __chkstk_darwin(v2);
  sub_100008338();
  uint64_t v5 = v4 - v3;
  uint64_t v6 = (void **)sub_1000087B0(v0, v0[3]);
  sub_10008BAE0(v5);
  uint64_t v7 = sub_1000B3BC0(v5, *v6);
  if (v1)
  {
    uint64_t v9 = sub_100010D5C();
    return v10(v9);
  }
  else
  {
    uint64_t v12 = v7;
    unint64_t v13 = v8;
    uint64_t v14 = sub_100010D5C();
    v15(v14);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    type metadata accessor for AccountDataState(0);
    sub_10008BC80();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    sub_1000124D4(v12, v13);
    return swift_release();
  }
}

uint64_t sub_10008B95C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for URL.DirectoryHint();
  sub_10000BFC4();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_100008338();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for AccountDataStoreFilesystemCore();
  uint64_t v11 = v1 + *(int *)(v10 + 20);
  uint64_t v12 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(a1, v11, v12);
  unint64_t v13 = sub_1000087B0((void *)(v1 + *(int *)(v10 + 24)), *(void *)(v1 + *(int *)(v10 + 24) + 24));
  char v14 = objc_msgSend(*(id *)((char *)v13 + *(int *)(type metadata accessor for AMPAccount() + 20)), "ams_isSandboxAccount");
  sub_10000518C((uint64_t)v13, v14);
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v9, enum case for URL.DirectoryHint.inferFromPath(_:), v3);
  sub_10008BBEC();
  URL.append<A>(component:directoryHint:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10008BAE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for URL.DirectoryHint();
  sub_10000BFC4();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_100008338();
  uint64_t v8 = v7 - v6;
  sub_10008B95C(a1);
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v8, enum case for URL.DirectoryHint.inferFromPath(_:), v2);
  sub_10008BBEC();
  URL.append<A>(component:directoryHint:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v8, v2);
  return swift_bridgeObjectRelease();
}

unint64_t sub_10008BBEC()
{
  unint64_t result = qword_10012ED88;
  if (!qword_10012ED88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012ED88);
  }
  return result;
}

uint64_t type metadata accessor for AccountDataStoreFilesystemCore()
{
  uint64_t result = qword_10012EDF0;
  if (!qword_10012EDF0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_10008BC80()
{
  unint64_t result = qword_10012ED90;
  if (!qword_10012ED90)
  {
    type metadata accessor for AccountDataState(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012ED90);
  }
  return result;
}

void *sub_10008BCD0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)v4 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = *(int *)(a3 + 24);
    long long v13 = *(_OWORD *)((char *)a2 + v12 + 24);
    *(_OWORD *)((char *)v4 + v12 + 24) = v13;
    (**(void (***)(void))(v13 - 8))();
  }
  return v4;
}

uint64_t sub_10008BE34(uint64_t a1, uint64_t a2)
{
  sub_10000D47C(a1);
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  return sub_10000D47C(v6);
}

uint64_t sub_10008BEBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  long long v12 = *(_OWORD *)(a2 + v11 + 24);
  *(_OWORD *)(a1 + v11 + 24) = v12;
  (**(void (***)(void))(v12 - 8))();
  return a1;
}

uint64_t *sub_10008BFC8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  sub_10008C060(a1, a2);
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  sub_10008C060((uint64_t *)((char *)a1 + *(int *)(a3 + 24)), (uint64_t *)((char *)a2 + *(int *)(a3 + 24)));
  return a1;
}

uint64_t *sub_10008C060(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        unint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t sub_10008C290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  long long v14 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v14;
  *(void *)(v12 + 32) = *(void *)(v13 + 32);
  return a1;
}

uint64_t sub_10008C340(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10000D47C(a1);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  sub_10000D47C(a1 + v11);
  long long v14 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v14;
  *(void *)(v12 + 32) = *(void *)(v13 + 32);
  return a1;
}

uint64_t sub_10008C3FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008C410);
}

uint64_t sub_10008C410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    return sub_10001044C(v9, a2, v8);
  }
}

uint64_t sub_10008C498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008C4AC);
}

uint64_t sub_10008C4AC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = v5 + *(int *)(a4 + 20);
    return sub_1000101E8(v8, a2, a2, v7);
  }
  return result;
}

uint64_t sub_10008C52C()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10008C5C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v84 = a3;
  uint64_t v86 = a2;
  uint64_t v88 = a1;
  sub_10008CD1C(a4, (uint64_t)v90);
  unint64_t v70 = v90[0];
  uint64_t v72 = v90[1];
  unint64_t v73 = v90[2];
  uint64_t v74 = v90[3];
  uint64_t v75 = v90[4];
  uint64_t v76 = v90[5];
  unsigned int v77 = v91;
  uint64_t v5 = type metadata accessor for AccountIdentity();
  sub_10000BFC4();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  uint64_t v80 = v9;
  uint64_t v81 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for LogInterpolation.StringInterpolation();
  __chkstk_darwin(v10 - 8);
  sub_100008324();
  uint64_t v71 = v11;
  __chkstk_darwin(v12);
  uint64_t v85 = type metadata accessor for Log();
  sub_10000BFC4();
  uint64_t v87 = v13;
  __chkstk_darwin(v14);
  sub_100008324();
  uint64_t v79 = v15;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v65 - v17;
  static Log.accountsDataSync.getter();
  uint64_t v19 = sub_100011D80((uint64_t *)&unk_10012E440);
  uint64_t v20 = type metadata accessor for LogInterpolation();
  sub_1000082C8(v20);
  uint64_t v22 = *(char **)(v21 + 72);
  uint64_t v24 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v25 = (v24 + 32) & ~v24;
  uint64_t v78 = v22;
  uint64_t v69 = v19;
  uint64_t v67 = v25 + 2 * (void)v22;
  uint64_t v66 = v24 | 7;
  uint64_t v26 = swift_allocObject();
  long long v65 = xmmword_1000DA3F0;
  *(_OWORD *)(v26 + 16) = xmmword_1000DA3F0;
  unsigned int v68 = (void (*)(uint64_t, uint64_t))v25;
  id v27 = (id)AMSSetLogKeyIfNeeded();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v28 = a4;
  static LogInterpolation.prefix<A>(_:_:)();
  swift_bridgeObjectRelease();
  LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v29._countAndFlagsBits = 0x696C756465686353;
  v29._object = (void *)0xEF20726F6620676ELL;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(v29);
  *((void *)&v95 + 1) = v5;
  double v30 = sub_1000042C4((uint64_t *)&v94);
  uint64_t v82 = v7;
  unsigned int v31 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v83 = v5;
  v31(v30, v88, v5);
  LogInterpolation.StringInterpolation.appendInterpolation(_:)();
  sub_100016B90((uint64_t)&v94);
  v32._countAndFlagsBits = 8250;
  v32._object = (void *)0xE200000000000000;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(v32);
  sub_10008CD1C(v28, (uint64_t)&v94);
  if (v94 == 2)
  {
    long long v92 = 0u;
    long long v93 = 0u;
  }
  else
  {
    *((void *)&v93 + 1) = &unk_100116CB8;
    uint64_t v33 = swift_allocObject();
    *(void *)&long long v92 = v33;
    long long v34 = v95;
    *(_OWORD *)(v33 + 16) = v94;
    *(_OWORD *)(v33 + 32) = v34;
    *(_OWORD *)(v33 + 4_Block_object_dispose(&a9, 8) = v96;
    *(_DWORD *)(v33 + 64) = v97;
  }
  id v35 = v78;
  LogInterpolation.StringInterpolation.appendInterpolation(_:)();
  sub_100016B90((uint64_t)&v92);
  v36._countAndFlagsBits = 0;
  v36._object = (void *)0xE000000000000000;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(v36);
  LogInterpolation.init(stringInterpolation:)();
  Log.default(_:)();
  swift_bridgeObjectRelease();
  uint64_t v37 = v87 + 8;
  uint64_t v38 = *(void (**)(char *, uint64_t))(v87 + 8);
  v38(v18, v85);
  sub_10008CD1C(v28, (uint64_t)&v92);
  uint64_t v39 = v84;
  if (v92 != 2)
  {
    static Log.accountsDataSync.getter();
    uint64_t v40 = swift_allocObject();
    uint64_t v67 = v40;
    *(_OWORD *)(v40 + 16) = v65;
    uint64_t v41 = (char *)v68 + v40;
    id v42 = (id)AMSSetLogKeyIfNeeded();
    uint64_t v87 = v37;
    id v43 = v42;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v69 = v28;

    static LogInterpolation.prefix<A>(_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v78 = &v35[(void)v41];
    LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v44._object = (void *)0x80000001001021F0;
    v44._countAndFlagsBits = 0xD000000000000045;
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v44);
    unsigned int v68 = (void (*)(uint64_t, uint64_t))v38;
    uint64_t v45 = v39;
    char v46 = v70;
    unint64_t v47 = v70 >> 8;
    uint64_t v48 = v31;
    char v49 = v73;
    unint64_t v50 = v73 >> 8;
    v89[3] = &unk_100116CB8;
    unsigned int v51 = v77;
    unsigned int v52 = v77 >> 8;
    uint64_t v53 = swift_allocObject();
    v89[0] = v53;
    char v54 = v46 & 1;
    uint64_t v39 = v45;
    *(unsigned char *)(v53 + 16) = v54;
    *(unsigned char *)(v53 + 17) = v47;
    *(void *)(v53 + 24) = v72;
    char v55 = v49 & 1;
    unsigned int v31 = v48;
    *(unsigned char *)(v53 + 32) = v55;
    *(unsigned char *)(v53 + 33) = v50;
    *(void *)(v53 + 40) = v74;
    *(unsigned char *)(v53 + 4_Block_object_dispose(&a9, 8) = v75 & 1;
    *(void *)(v53 + 56) = v76;
    *(unsigned char *)(v53 + 64) = v51 & 1;
    *(unsigned char *)(v53 + 65) = v52;
    *(unsigned char *)(v53 + 66) = BYTE2(v51) & 1;
    *(unsigned char *)(v53 + 67) = HIBYTE(v51) & 1;
    LogInterpolation.StringInterpolation.appendInterpolation(_:)();
    sub_100016B90((uint64_t)v89);
    v56._countAndFlagsBits = 0;
    v56._object = (void *)0xE000000000000000;
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v56);
    uint64_t v28 = v69;
    LogInterpolation.init(stringInterpolation:)();
    uint64_t v57 = v79;
    Log.default(_:)();
    swift_bridgeObjectRelease();
    v68(v57, v85);
    uint64_t v58 = String.utf8CString.getter();
    xpc_activity_unregister((const char *)(v58 + 32));
    swift_release();
  }
  __int16 v59 = v81;
  uint64_t v60 = v83;
  v31((uint64_t *)v81, v88, v83);
  uint64_t v61 = v82;
  unint64_t v62 = (*(unsigned __int8 *)(v82 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80);
  uint64_t v63 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v61 + 32))(v63 + v62, v59, v60);
  sub_1000B8928(v86, v39, v28, (uint64_t)&unk_10012EE40, v63);
  return swift_release();
}

uint64_t sub_10008CD1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100011D80(&qword_10012EE30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008CD84()
{
  uint64_t v0 = String.utf8CString.getter();
  xpc_activity_unregister((const char *)(v0 + 32));
  return swift_release();
}

uint64_t sub_10008CDC4(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_10008CDE4, 0, 0);
}

uint64_t sub_10008CDE4()
{
  sub_10008D094();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10008CE44()
{
  uint64_t v1 = type metadata accessor for AccountIdentity();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10008CED4()
{
  uint64_t v2 = *(void *)(type metadata accessor for AccountIdentity() - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10008CFA0;
  return sub_10008CDC4(v3);
}

uint64_t sub_10008CFA0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void sub_10008D094()
{
  uint64_t v0 = type metadata accessor for Log();
  sub_10000BFC4();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.accountsDataSync.getter();
  sub_100011D80((uint64_t *)&unk_10012E440);
  uint64_t v6 = type metadata accessor for LogInterpolation();
  sub_1000082C8(v6);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3F0;
  id v7 = (id)AMSSetLogKeyIfNeeded();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  static LogInterpolation.prefix<A>(_:_:)();
  swift_bridgeObjectRelease();
  LogInterpolation.init(stringLiteral:)();
  Log.default(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v0);
  if (qword_10012E200 != -1) {
    swift_once();
  }
  sub_1000A2ABC();
}

uint64_t sub_10008D260()
{
  return _swift_deallocObject(v0, 72, 7);
}

ValueMetadata *type metadata accessor for AccountDataSyncDASScheduler()
{
  return &type metadata for AccountDataSyncDASScheduler;
}

ValueMetadata *type metadata accessor for AccountDataUpdateDarwinNotifier()
{
  return &type metadata for AccountDataUpdateDarwinNotifier;
}

void sub_10008D298()
{
  uint64_t v0 = CFNotificationCenterGetDarwinNotifyCenter();
  if (AMSAccountCachedServerDataUpdatedNotification)
  {
    uint64_t v1 = v0;
    CFNotificationCenterPostNotification(v0, AMSAccountCachedServerDataUpdatedNotification, 0, 0, 1u);
  }
  else
  {
    __break(1u);
  }
}

void sub_10008D320(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

uint64_t sub_10008D354(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    sub_100012124();
    if (v7 != v8)
    {
      sub_1000122B8();
      if (v7)
      {
        __break(1u);
        goto LABEL_23;
      }
      sub_100011F3C();
    }
  }
  else
  {
    uint64_t v6 = a2;
  }
  uint64_t v9 = *(void *)(a4 + 16);
  if (v6 <= v9) {
    uint64_t v10 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v10 = v6;
  }
  if (!v10)
  {
    uint64_t v14 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  sub_100011D80(&qword_10012EE90);
  uint64_t v11 = *(void *)(type metadata accessor for AMPAccount() - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (void *)swift_allocObject();
  size_t v15 = j__malloc_size(v14);
  if (!v12 || (v15 - v13 == 0x8000000000000000 ? (BOOL v16 = v12 == -1) : (BOOL v16 = 0), v16))
  {
LABEL_23:
    sub_10000C008();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  sub_10000B338(v15 - v13);
LABEL_18:
  uint64_t v17 = *(void *)(type metadata accessor for AMPAccount() - 8);
  if (a1)
  {
    unint64_t v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    sub_10008D968(a4 + v18, v9, (unint64_t)v14 + v18);
    sub_100011FD0();
  }
  else
  {
    uint64_t v19 = sub_100008640();
    sub_10008D654(v19, v20, v21, v22);
  }
  return (uint64_t)v14;
}

uint64_t sub_10008D53C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      sub_100011D80(&qword_10012EEA8);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10008D654(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(type metadata accessor for AMPAccount() - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10008D7B4(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10000C008();
    uint64_t result = (char *)sub_10000F770();
    __break(1u);
  }
  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)sub_1000083CC(a3, result);
  }
  return result;
}

char *sub_10008D810(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[24 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 24 * a2);
  }
  return __src;
}

char *sub_10008D8A8(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10000C008();
    uint64_t result = (char *)sub_10000F770();
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_1000083CC(a3, result);
  }
  return result;
}

char *sub_10008D904(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10000C008();
    uint64_t result = (char *)sub_10000F770();
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)sub_1000083CC(a3, result);
  }
  return result;
}

uint64_t sub_10008D968(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t v8 = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return _swift_arrayInitWithTakeBackToFront(v8, v9, v10, v7);
  }
  if (a3 < a1
    || (uint64_t result = type metadata accessor for AMPAccount(), a1 + *(void *)(*(void *)(result - 8) + 72) * a2 <= a3))
  {
    uint64_t v11 = type metadata accessor for AMPAccount();
    return _swift_arrayInitWithTakeFrontToBack(a3, a1, a2, v11);
  }
  else if (a3 != a1)
  {
    uint64_t v7 = result;
    uint64_t v8 = a3;
    unint64_t v9 = a1;
    uint64_t v10 = a2;
    return _swift_arrayInitWithTakeBackToFront(v8, v9, v10, v7);
  }
  return result;
}

uint64_t sub_10008DA98(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_10000C008();
    sub_10000FA04();
LABEL_11:
    uint64_t result = sub_10000A4D8();
    __break(1u);
    return result;
  }
  if (a3 + 16 * a2 > a1 && a1 + 16 * a2 > a3)
  {
    sub_10000C008();
    sub_10000D390();
    goto LABEL_11;
  }
  return swift_arrayInitWithCopy();
}

uint64_t sub_10008DB48(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_10000C008();
    sub_10000FA04();
LABEL_11:
    uint64_t result = sub_10000A4D8();
    __break(1u);
    return result;
  }
  sub_100016A70();
  if (v4 + 8 * v3 > v2 && v2 + 8 * v3 > v4)
  {
    sub_10000C008();
    sub_10000D390();
    goto LABEL_11;
  }
  sub_100011D80(&qword_10012EE80);
  sub_100008568();
  return swift_arrayInitWithCopy();
}

uint64_t sub_10008DC04(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_10000C008();
    sub_10000FA04();
LABEL_11:
    uint64_t result = sub_10000A4D8();
    __break(1u);
    return result;
  }
  sub_100016A70();
  if (v4 + 16 * v3 > v2 && v2 + 16 * v3 > v4)
  {
    sub_10000C008();
    sub_10000D390();
    goto LABEL_11;
  }
  sub_100011D80(&qword_10012EEA8);
  sub_100008568();
  return swift_arrayInitWithCopy();
}

uint64_t sub_10008DCC0(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_10000C008();
    sub_10000FA04();
LABEL_11:
    uint64_t result = sub_10000A4D8();
    __break(1u);
    return result;
  }
  sub_100016A70();
  if (v4 + 40 * v3 > v2 && v2 + 40 * v3 > v4)
  {
    sub_10000C008();
    sub_10000D390();
    goto LABEL_11;
  }
  sub_100011D80(&qword_10012EE98);
  sub_100008568();
  return swift_arrayInitWithCopy();
}

uint64_t sub_10008DD80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v6 = String.UTF16View.index(_:offsetBy:)();
    sub_10000B198(v6);
    return v7 | 4;
  }
  else
  {
    uint64_t v3 = String.UTF8View._foreignIndex(_:offsetBy:)();
    sub_10000B198(v3);
    return v4 | 8;
  }
}

void *sub_10008DDDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a3;
  v6[1] = a4;
  v5[2] = v6;
  return sub_10008E1DC((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_10008E528, (uint64_t)v5, a1, a2);
}

void *sub_10008DE34(void *(*a1)(uint64_t *__return_ptr, char *, char *), uint64_t a2)
{
  uint64_t v4 = *v2;
  unint64_t v3 = v2[1];
  unint64_t v5 = v2;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)unint64_t v2 = xmmword_1000DB670;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = v4 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_11;
      }
      if (v11 < (int)v4) {
        goto LABEL_16;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v4, __DataStorage._offset.getter())) {
        goto LABEL_17;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v13 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v9 = v13;
      uint64_t v11 = v4 >> 32;
LABEL_11:
      if (v11 < (int)v4)
      {
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
      }
      uint64_t result = sub_10008E244((int)v4, v11, a1);
      unint64_t v12 = v9 | 0x4000000000000000;
      *unint64_t v5 = v4;
LABEL_13:
      v5[1] = v12;
      return result;
    case 2uLL:
      *(void *)&long long v14 = *v2;
      *((void *)&v14 + 1) = v3 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t result = sub_10008E244(*(void *)(v14 + 16), *(void *)(v14 + 24), a1);
      unint64_t v12 = *((void *)&v14 + 1) | 0x8000000000000000;
      *unint64_t v2 = v14;
      goto LABEL_13;
    case 3uLL:
      *(void *)((char *)&v14 + 7) = 0;
      *(void *)&long long v14 = 0;
      return sub_10008E2F8((uint64_t)&v14, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))a1, a2, 0);
    default:
      *(void *)&long long v14 = *v2;
      WORD4(v14) = v3;
      BYTE10(v14) = BYTE2(v3);
      BYTE11(v14) = BYTE3(v3);
      BYTE12(v14) = BYTE4(v3);
      BYTE13(v14) = BYTE5(v3);
      BYTE14(v14) = BYTE6(v3);
      uint64_t result = sub_10008E2F8((uint64_t)&v14, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))a1, a2, BYTE6(v3));
      unint64_t v8 = DWORD2(v14) | ((unint64_t)BYTE12(v14) << 32) | ((unint64_t)BYTE13(v14) << 40) | ((unint64_t)BYTE14(v14) << 48);
      *unint64_t v2 = v14;
      v2[1] = v8;
      return result;
  }
}

uint64_t sub_10008E0E0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    uint64_t result = Data.InlineData.init(_:)();
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = Data.LargeSlice.init(_:)();
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    uint64_t result = Data.InlineSlice.init(_:)();
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_10008E158(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _StringGuts.copyUTF8(into:)();
    if ((v1 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_10008E1DC(void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v6 = a4 - a3;
    uint64_t v7 = a3;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  uint64_t result = a1(&v9, v7, v6);
  if (!v4) {
    return (void *)v9;
  }
  return result;
}

char *sub_10008E244(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v8 = result;
  uint64_t result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

void *sub_10008E2F8(uint64_t a1, void *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t result = a2(&v6, a1, a1 + a4);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

uint64_t sub_10008E344(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for SHA512();
      sub_10001248C(&qword_10012EE48, (void (*)(uint64_t))&type metadata accessor for SHA512);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10008E424(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

void *sub_10008E47C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t result = sub_10008DDDC(a1, a2, *a3, a3[1]);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
    a4[3] = v9;
  }
  return result;
}

void *sub_10008E4B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_10008E47C(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

uint64_t sub_10008E4D0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1000124D4(a1, a2);
  }
  return a1;
}

uint64_t sub_10008E4E4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10008E158(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_10008E528@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10008E4E4(a1, a2);
}

id sub_10008E548()
{
  id v0 = objc_msgSend(self, "ams_sharedAccountStore");
  AccountIdentity.DSID.value.getter();
  Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
  id v2 = objc_msgSend(v0, "ams_iTunesAccountWithDSID:", isa);

  return v2;
}

void sub_10008E5CC(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AccountIdentity.DSID();
  __chkstk_darwin(v3 - 8);
  sub_100008338();
  uint64_t v4 = type metadata accessor for AMPAccount();
  __chkstk_darwin(v4);
  sub_10000F728();
  id v5 = objc_msgSend(self, "ams_sharedAccountStore");
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = objc_msgSend(v5, "ams_iTunesAccountWithAltDSID:", v6);

  if (v7)
  {
    id v8 = objc_msgSend(v7, "ams_DSID");
    if (v8)
    {
      uint64_t v9 = v8;
      [v8 unsignedLongLongValue];

      *(void *)(v1 + *(int *)(v4 + 20)) = v7;
      id v10 = v7;
      AccountIdentity.DSID.init(_:)();
      AccountIdentity.init(altDSID:dsid:)();

      sub_100015CEC(v1, a1);
      sub_1000101E8(a1, 0, 1, v4);
      sub_10000A484();
      return;
    }
  }
  swift_bridgeObjectRelease();
  sub_10000A484();
  sub_1000101E8(v11, v12, v13, v14);
}

void sub_10008E7B8(char a1, int a2)
{
  uint64_t v71 = type metadata accessor for AccountIdentity();
  sub_10000BFC4();
  uint64_t v81 = v5;
  __chkstk_darwin(v6);
  sub_100008338();
  uint64_t v70 = v8 - v7;
  uint64_t v77 = type metadata accessor for AccountIdentity.DSID();
  sub_10000BFC4();
  uint64_t v80 = v9;
  __chkstk_darwin(v10);
  sub_10000857C();
  uint64_t v69 = v11 - v12;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v64 - v14;
  uint64_t v16 = sub_100011D80(&qword_10012ECC8);
  __chkstk_darwin(v16 - 8);
  uint64_t v79 = sub_10000FA14();
  sub_10000BFC4();
  uint64_t v73 = v17;
  __chkstk_darwin(v18);
  sub_10000857C();
  uint64_t v21 = v19 - v20;
  uint64_t v23 = __chkstk_darwin(v22);
  unsigned int v68 = (char *)&v64 - v24;
  __chkstk_darwin(v23);
  uint64_t v72 = (uint64_t)&v64 - v25;
  id v78 = self;
  id v64 = objc_msgSend(v78, "ams_sharedAccountStore");
  unint64_t v26 = (unint64_t)sub_10008EEF4(v64);
  unint64_t v27 = v26;
  if (a1) {
    goto LABEL_14;
  }
  uint64_t v82 = _swiftEmptyArrayStorage;
  if (v26 >> 62)
  {
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    if (v28) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v28 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v28)
    {
LABEL_4:
      if (v28 < 1)
      {
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }
      LODWORD(v75) = a2;
      unint64_t v76 = v21;
      unint64_t v29 = v27;
      uint64_t v30 = 0;
      unint64_t v31 = v29;
      unint64_t v32 = v29 & 0xC000000000000001;
      do
      {
        if (v32) {
          id v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v33 = *(id *)(v31 + 8 * v30 + 32);
        }
        long long v34 = v33;
        if (objc_msgSend(v33, "ams_isLocalAccount"))
        {
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        ++v30;
      }
      while (v28 != v30);
      swift_bridgeObjectRelease();
      unint64_t v27 = (unint64_t)v82;
      uint64_t v21 = v76;
      LOBYTE(a2) = (_BYTE)v75;
LABEL_14:
      if (a2) {
        goto LABEL_32;
      }
      goto LABEL_15;
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v27 = (unint64_t)_swiftEmptyArrayStorage;
  if (a2) {
    goto LABEL_32;
  }
LABEL_15:
  uint64_t v82 = _swiftEmptyArrayStorage;
  if (v27 >> 62)
  {
    sub_100012134();
    uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v35) {
      goto LABEL_17;
    }
LABEL_31:
    swift_bridgeObjectRelease();
    unint64_t v27 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_32;
  }
  uint64_t v35 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v35) {
    goto LABEL_31;
  }
LABEL_17:
  if (v35 < 1)
  {
LABEL_61:
    __break(1u);
    return;
  }
  unint64_t v76 = v21;
  uint64_t v36 = 0;
  unint64_t v37 = v27 & 0xC000000000000001;
  uint64_t v38 = (void *)v27;
  do
  {
    if (v37) {
      id v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v39 = *(id *)(v27 + 8 * v36 + 32);
    }
    uint64_t v40 = v39;
    if (objc_msgSend(v39, "ams_isSandboxAccount"))
    {
    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    ++v36;
    unint64_t v27 = (unint64_t)v38;
  }
  while (v35 != v36);
  swift_bridgeObjectRelease();
  unint64_t v27 = (unint64_t)v82;
  uint64_t v21 = v76;
LABEL_32:
  if (v27 >> 62)
  {
    sub_100012134();
    uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
    if (v41) {
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v41 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v41)
    {
LABEL_34:
      if (v41 >= 1)
      {
        uint64_t v42 = 0;
        uint64_t v75 = (void (**)(char *, uint64_t))(v80 + 1);
        unint64_t v76 = v27 & 0xC000000000000001;
        long long v65 = (void (**)(char *, uint64_t, uint64_t))(v81 + 32);
        uint64_t v66 = (void (**)(uint64_t, char *, uint64_t))(v80 + 2);
        uint64_t v80 = _swiftEmptyArrayStorage;
        uint64_t v74 = v41;
        uint64_t v67 = (void *)v27;
        uint64_t v43 = v77;
        while (1)
        {
          if (v76) {
            Swift::String v44 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            Swift::String v44 = (char *)*(id *)(v27 + 8 * v42 + 32);
          }
          uint64_t v81 = v44;
          id v45 = objc_msgSend(v44, "ams_DSID");
          if (v45)
          {
            char v46 = v45;
            [v45 unsignedLongLongValue];
          }
          AccountIdentity.DSID.init(_:)();
          id v47 = objc_msgSend(v78, "ams_sharedAccountStore");
          AccountIdentity.DSID.value.getter();
          Class isa = UInt64._bridgeToObjectiveC()().super.super.isa;
          id v49 = objc_msgSend(v47, "ams_iTunesAccountWithDSID:", isa);

          if (!v49) {
            break;
          }
          sub_100017120(v49);
          if (!v50)
          {
            uint64_t v57 = sub_10000D3A0();
            v58(v57);

            goto LABEL_46;
          }
          unsigned int v51 = v68;
          *(void *)&v68[*(int *)(v79 + 20)] = v49;
          (*v66)(v69, v15, v43);
          uint64_t v52 = v70;
          uint64_t v41 = v74;
          AccountIdentity.init(altDSID:dsid:)();
          (*v75)(v15, v43);
          (*v65)(v51, v52, v71);
          uint64_t v53 = (uint64_t)v51;
          unint64_t v27 = (unint64_t)v67;
          sub_100015CEC(v53, v2);
          uint64_t v54 = 0;
LABEL_47:
          uint64_t v59 = v79;
          sub_1000101E8(v2, v54, 1, v79);

          if (sub_10001044C(v2, 1, v59) == 1)
          {
            sub_1000187F8(v2);
          }
          else
          {
            uint64_t v60 = v72;
            sub_100015CEC(v2, v72);
            sub_100015CEC(v60, v21);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v80 = (void *)sub_10008D354(0, v80[2] + 1, 1, (uint64_t)v80);
            }
            unint64_t v62 = v80[2];
            unint64_t v61 = v80[3];
            if (v62 >= v61 >> 1) {
              uint64_t v80 = (void *)sub_10008D354(v61 > 1, v62 + 1, 1, (uint64_t)v80);
            }
            uint64_t v63 = v80;
            _OWORD v80[2] = v62 + 1;
            sub_100015CEC(v21, (uint64_t)v63+ ((*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80))+ *(void *)(v73 + 72) * v62);
            uint64_t v41 = v74;
          }
          if (v41 == ++v42) {
            goto LABEL_58;
          }
        }
        uint64_t v55 = sub_10000D3A0();
        v56(v55);
LABEL_46:
        uint64_t v54 = 1;
        goto LABEL_47;
      }
      __break(1u);
      goto LABEL_60;
    }
  }
  uint64_t v80 = _swiftEmptyArrayStorage;
LABEL_58:
  swift_bridgeObjectRelease_n();
  sub_1000B45D4((uint64_t)v80);
  swift_bridgeObjectRelease();

  sub_10000A484();
}

void *sub_10008EEF4(void *a1)
{
  id v2 = objc_msgSend(a1, "ams_activeiTunesAccount");
  if (v2)
  {
    id v3 = v2;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  id v4 = objc_msgSend(a1, "ams_activeiCloudAccount");
  if (v4)
  {
    id v5 = v4;
    id v6 = objc_msgSend(a1, "ams_iTunesAccountForAccount:", v4);
    if (v6)
    {
      id v7 = v6;
      unint64_t v8 = swift_bridgeObjectRetain();
      char v9 = sub_10008F080(v8, v7);
      swift_bridgeObjectRelease();
      if ((v9 & 1) == 0)
      {
        id v10 = v7;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10008F080(unint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  unint64_t v5 = a1;
  if (a1 >> 62)
  {
LABEL_34:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
    {
LABEL_3:
      uint64_t v25 = v3;
      unint64_t v26 = a2;
      unint64_t v27 = v5 & 0xC000000000000001;
      uint64_t v3 = 4;
      while (1)
      {
        if (v27) {
          id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v7 = *(id *)(v5 + 8 * v3);
        }
        unint64_t v8 = v7;
        uint64_t v9 = v3 - 3;
        if (__OFADD__(v3 - 4, 1))
        {
          __break(1u);
          goto LABEL_34;
        }
        uint64_t v10 = sub_100017120(v7);
        uint64_t v12 = v11;
        uint64_t v13 = sub_100017120(a2);
        if (!v12) {
          break;
        }
        if (!v14) {
          goto LABEL_17;
        }
        if (v10 == v13 && v12 == v14)
        {
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
LABEL_30:
          swift_bridgeObjectRelease();
LABEL_31:

          return 1;
        }
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v16)
        {
          swift_bridgeObjectRelease();

          goto LABEL_31;
        }
LABEL_18:
        id v17 = objc_msgSend(v8, "ams_DSID", v25);
        id v18 = objc_msgSend(a2, "ams_DSID");
        uint64_t v19 = v18;
        if (!v17)
        {
          if (!v18)
          {
LABEL_28:

            swift_bridgeObjectRelease();
            return 1;
          }
          goto LABEL_25;
        }
        if (!v18)
        {
          uint64_t v19 = v17;
LABEL_25:

          goto LABEL_26;
        }
        sub_10008F2F4();
        unint64_t v20 = v5;
        uint64_t v21 = v6;
        id v22 = v17;
        char v23 = static NSObject.== infix(_:_:)();

        uint64_t v6 = v21;
        unint64_t v5 = v20;
        a2 = v26;

        if (v23) {
          goto LABEL_30;
        }
LABEL_26:
        ++v3;
        if (v9 == v6) {
          goto LABEL_35;
        }
      }
      if (!v14) {
        goto LABEL_28;
      }
LABEL_17:
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
  }
LABEL_35:

  swift_bridgeObjectRelease();
  return 0;
}

unint64_t sub_10008F2F4()
{
  unint64_t result = qword_10012E490;
  if (!qword_10012E490)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10012E490);
  }
  return result;
}

uint64_t sub_10008F334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AccountIdentity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  unint64_t v8 = *(void **)(a2 + v7);
  uint64_t v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  return a1;
}

uint64_t sub_10008F3BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AccountIdentity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10008F438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AccountIdentity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  unint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  return a1;
}

uint64_t sub_10008F4BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for AccountIdentity();
  sub_10000F6F8();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return sub_10001044C(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

void sub_10008F548(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for AccountIdentity();
  sub_10000F6F8();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    sub_1000101E8(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

uint64_t sub_10008F5D0()
{
  uint64_t result = type metadata accessor for AccountIdentity();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccountsFrameworkFinder()
{
  return &type metadata for AccountsFrameworkFinder;
}

id sub_10008F678()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, "init");
}

id sub_10008F6D4()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AuthURLDelegate()
{
  return self;
}

uint64_t sub_10008F730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 12_Block_object_dispose(&a9, 8) = a3;
  return _swift_task_switch(sub_10008F750, 0, 0);
}

uint64_t sub_10008F750()
{
  id v1 = [objc_allocWithZone((Class)AMSAuthenticateTask) initWithRequest:v0[16]];
  v0[17] = v1;
  id v2 = [v1 performAuthentication];
  v0[18] = v2;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_10008F88C;
  uint64_t v3 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_100086330;
  v0[13] = &unk_100115948;
  v0[14] = v3;
  [v2 resultWithCompletion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10008F88C()
{
  sub_1000082E0();
  uint64_t v1 = *(void *)(v0 + 48);
  *(void *)(v2 + 152) = v1;
  if (v1) {
    uint64_t v3 = sub_10008F9E8;
  }
  else {
    uint64_t v3 = sub_10008F978;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10008F978()
{
  uint64_t v1 = *(void **)(v0 + 144);

  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_10008F9E8()
{
  uint64_t v1 = (void *)v0[18];
  uint64_t v2 = (void *)v0[17];
  swift_willThrow();

  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10008FB04(void *a1, void *a2, void *a3, void *aBlock, void *a5)
{
  v5[4] = a3;
  void v5[5] = a5;
  v5[2] = a1;
  void v5[3] = a2;
  v5[6] = _Block_copy(aBlock);
  id v10 = a1;
  id v11 = a2;
  id v12 = a3;
  id v13 = a5;
  uint64_t v14 = (void *)swift_task_alloc();
  v5[7] = v14;
  *uint64_t v14 = v5;
  v14[1] = sub_10008FBE0;
  return sub_10008F730((uint64_t)v14, v15, (uint64_t)v12);
}

uint64_t sub_10008FBE0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  uint64_t v6 = *(void **)(*v2 + 40);
  uint64_t v7 = *(void **)(*v2 + 32);
  uint64_t v8 = *(void **)(*v2 + 24);
  uint64_t v9 = *(void **)(*v2 + 16);
  uint64_t v10 = *v2;
  swift_task_dealloc();

  id v11 = *(void (***)(void, void, void))(v5 + 48);
  if (v3)
  {
    id v12 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    ((void (**)(void, void, void *))v11)[2](v11, 0, v12);

    _Block_release(v11);
  }
  else
  {
    ((void (**)(void, void *, void))v11)[2](*(void *)(v5 + 48), a1, 0);
    _Block_release(v11);
  }
  id v13 = *(uint64_t (**)(void))(v10 + 8);
  return v13();
}

uint64_t sub_10008FDD0()
{
  _Block_release(*(const void **)(v0 + 40));
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10008FE28()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  id v4 = (void *)v0[4];
  uint64_t v5 = (void *)v0[5];
  uint64_t v6 = (void *)v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_10008FEF0;
  uint64_t v8 = (uint64_t (*)(void *, void *, void *, void *, void *))((char *)&dword_10012EF78 + dword_10012EF78);
  return v8(v2, v3, v4, v5, v6);
}

uint64_t sub_10008FEF0()
{
  sub_1000082E0();
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10008FFC0(uint64_t a1, void *a2, void *a3)
{
  return sub_100097A58(a1, a2, a3, (uint64_t (*)(uint64_t, id))sub_1000ABB38, (uint64_t (*)(uint64_t, id))sub_1000ABBC0);
}

uint64_t sub_10008FFEC(uint64_t a1)
{
  *(void *)(v2 + 984) = v1;
  *(void *)(v2 + 976) = a1;
  sub_10000F9E8();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100090014()
{
  uint64_t v1 = v0[122];
  uint64_t v2 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v3 = *(void *)(v1 + 16);
  v0[124] = v3;
  if (v3)
  {
    uint64_t v4 = v0 + 63;
    uint64_t v5 = v0[122];
    v0[126] = 0;
    v0[125] = v2;
    v0[127] = *(void *)(v5 + 32);
    v0[128] = *(void *)(v5 + 40);
    uint64_t v6 = *(unsigned __int8 *)(v5 + 48);
    swift_bridgeObjectRetain();
    switch(v6)
    {
      case 1:
        uint64_t v7 = v0 + 2;
        uint64_t v18 = sub_1000980A4();
        sub_1000982C0(v18, v19, 1u);
        NSString v20 = sub_10001610C();
        id v21 = sub_100016184((uint64_t)v20, "BOOLForKey:");

        id v12 = [v21 valuePromise];
        v0[131] = v12;

        sub_10000F794();
        v0[2] = v22;
        v0[7] = v4;
        v0[3] = sub_1000907FC;
        v0[62] = sub_100008400();
        v0[58] = _NSConcreteStackBlock;
        v0[59] = 0x40000000;
        uint64_t v14 = &unk_100115A40;
        break;
      case 2:
        uint64_t v7 = v0 + 34;
        uint64_t v23 = sub_1000980A4();
        sub_1000982C0(v23, v24, 2u);
        NSString v25 = sub_10001610C();
        id v26 = sub_100016184((uint64_t)v25, "doubleForKey:");

        id v12 = [v26 valuePromise];
        v0[133] = v12;

        sub_10000F794();
        v0[34] = v27;
        v0[39] = v4;
        v0[35] = sub_1000908D8;
        v0[62] = sub_100008400();
        v0[58] = _NSConcreteStackBlock;
        v0[59] = 0x40000000;
        uint64_t v14 = &unk_100115A28;
        break;
      case 3:
        uint64_t v7 = v0 + 50;
        uint64_t v28 = sub_1000980A4();
        sub_1000982C0(v28, v29, 3u);
        NSString v30 = sub_10001610C();
        id v31 = sub_100016184((uint64_t)v30, "integerForKey:");

        id v12 = [v31 valuePromise];
        v0[135] = v12;

        sub_10000F794();
        v0[50] = v32;
        v0[55] = v4;
        v0[51] = sub_1000909B4;
        v0[62] = sub_100008400();
        v0[58] = _NSConcreteStackBlock;
        v0[59] = 0x40000000;
        uint64_t v14 = &unk_100115A10;
        break;
      case 4:
        uint64_t v7 = v0 + 18;
        uint64_t v33 = sub_1000980A4();
        sub_1000982C0(v33, v34, 4u);
        NSString v35 = sub_10001610C();
        id v36 = sub_100016184((uint64_t)v35, "stringForKey:");

        id v12 = [v36 valuePromise];
        v0[137] = v12;

        sub_10000F794();
        v0[18] = v37;
        v0[23] = v4;
        v0[19] = sub_100090A90;
        v0[62] = sub_100008400();
        v0[58] = _NSConcreteStackBlock;
        v0[59] = 0x40000000;
        uint64_t v14 = &unk_1001159F8;
        break;
      case 5:
        uint64_t v7 = v0 + 42;
        uint64_t v38 = sub_1000980A4();
        sub_1000982C0(v38, v39, 5u);
        NSString v40 = sub_10001610C();
        id v41 = sub_100016184((uint64_t)v40, "URLForKey:");

        id v12 = [v41 valuePromise];
        v0[139] = v12;

        sub_10000F794();
        v0[42] = v42;
        v0[47] = v4;
        v0[43] = sub_100090B6C;
        v0[62] = sub_100008400();
        v0[58] = _NSConcreteStackBlock;
        v0[59] = 0x40000000;
        uint64_t v14 = &unk_1001159E0;
        break;
      case 6:
        uint64_t v7 = v0 + 10;
        uint64_t v43 = sub_1000980A4();
        sub_1000982C0(v43, v44, 6u);
        NSString v45 = sub_10001610C();
        id v46 = sub_100016184((uint64_t)v45, "dictionaryForKey:");

        id v12 = [v46 valuePromise];
        v0[141] = v12;

        sub_10000F794();
        v0[10] = v47;
        v0[15] = v4;
        v0[11] = sub_100090C48;
        v0[62] = sub_100008400();
        v0[58] = _NSConcreteStackBlock;
        v0[59] = 0x40000000;
        uint64_t v14 = &unk_1001159C8;
        break;
      default:
        uint64_t v7 = v0 + 26;
        uint64_t v8 = sub_1000980A4();
        sub_1000982C0(v8, v9, 0);
        NSString v10 = sub_10001610C();
        id v11 = sub_100016184((uint64_t)v10, "arrayForKey:");

        id v12 = [v11 valuePromise];
        v0[129] = v12;

        sub_10000F794();
        v0[26] = v13;
        v0[31] = v4;
        v0[27] = sub_100090720;
        v0[62] = sub_100008400();
        v0[58] = _NSConcreteStackBlock;
        v0[59] = 0x40000000;
        uint64_t v14 = &unk_100115A58;
        break;
    }
    v0[60] = sub_10008FFC0;
    v0[61] = v14;
    [v12 resultWithCompletion:v0 + 58];
    return _swift_continuation_await(v7);
  }
  else
  {
    v15.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    char v16 = (uint64_t (*)(Class))v0[1];
    return v16(v15.super.isa);
  }
}

uint64_t sub_100090720()
{
  sub_100008308();
  sub_1000082E0();
  sub_10000FB6C();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 1040) = *(void *)(v3 + 240);
  sub_10000F9E8();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_1000907FC()
{
  sub_100008308();
  sub_1000082E0();
  sub_10000FB6C();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 1056) = *(void *)(v3 + 48);
  sub_10000F9E8();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_1000908D8()
{
  sub_100008308();
  sub_1000082E0();
  sub_10000FB6C();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 1072) = *(void *)(v3 + 304);
  sub_10000F9E8();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_1000909B4()
{
  sub_100008308();
  sub_1000082E0();
  sub_10000FB6C();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 108_Block_object_dispose(&a9, 8) = *(void *)(v3 + 432);
  sub_10000F9E8();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_100090A90()
{
  sub_100008308();
  sub_1000082E0();
  sub_10000FB6C();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 1104) = *(void *)(v3 + 176);
  sub_10000F9E8();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_100090B6C()
{
  sub_100008308();
  sub_1000082E0();
  sub_10000FB6C();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 1120) = *(void *)(v3 + 368);
  sub_10000F9E8();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_100090C48()
{
  sub_100008308();
  sub_1000082E0();
  sub_10000FB6C();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 1136) = *(void *)(v3 + 112);
  sub_10000F9E8();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_100090D24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, Swift::Int a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100016794();
  sub_10001660C();
  uint64_t v13 = v12 + 464;
  uint64_t v14 = (_OWORD *)(v12 + 504);
  NSDictionary v15 = *(void **)(v12 + 504);

  uint64_t v16 = *(void *)(v12 + 1024);
  uint64_t v17 = *(void *)(v12 + 1016);
  Swift::Int v18 = *(void *)(v12 + 1000);
  if (v15)
  {
    *(void *)(v12 + 48_Block_object_dispose(&a9, 8) = sub_10001065C(0, &qword_10012EFE0);
    *(void *)(v12 + 464) = v15;
    sub_10000D5F4((_OWORD *)(v12 + 464), (_OWORD *)(v12 + 664));
    id v19 = v15;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v12 + 96_Block_object_dispose(&a9, 8) = v18;
    sub_10001169C(v17, v16);
    sub_10000FC08();
    if (v23)
    {
      __break(1u);
    }
    else
    {
      unint64_t v24 = v21;
      char v25 = v22;
      sub_100011D80(&qword_100130070);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v18))
      {
        uint64_t v26 = sub_1000981DC();
        unint64_t v28 = sub_10001169C(v26, v27);
        if ((v25 & 1) != (v29 & 1))
        {
          sub_10000858C();
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
        unint64_t v24 = v28;
      }
      Swift::Int v18 = *(void *)(v12 + 968);
      if (v25)
      {
        sub_10000D47C(*(void *)(v18 + 56) + 32 * v24);
        id v36 = (_OWORD *)sub_100009784();
        sub_10000D5F4(v36, v37);
        uint64_t v13 = v12 + 464;
LABEL_17:
        uint64_t v42 = *(void *)(v12 + 1024);
        uint64_t v43 = *(void *)(v12 + 1016);
        swift_bridgeObjectRelease();
        sub_1000186E8(v43, v42, 0);

        sub_1000186E8(v43, v42, 0);
        goto LABEL_18;
      }
      uint64_t v38 = *(void *)(v12 + 1024);
      uint64_t v39 = *(void *)(v12 + 1016);
      *(void *)(v18 + 8 * (v24 >> 6) + 64) |= 1 << v24;
      NSString v40 = (void *)(*(void *)(v18 + 48) + 16 * v24);
      *NSString v40 = v39;
      v40[1] = v38;
      sub_100016590((_OWORD *)(v12 + 664), (_OWORD *)(*(void *)(v18 + 56) + 32 * v24));
      if (!v23)
      {
        uint64_t v13 = v12 + 464;
        sub_100098220(v41);
        goto LABEL_17;
      }
    }
    __break(1u);
    JUMPOUT(0x10009165CLL);
  }
  swift_bridgeObjectRetain();
  unint64_t v32 = sub_10001169C(v17, v16);
  char v34 = v33;
  swift_bridgeObjectRelease();
  if (v34)
  {
    sub_100098074();
    a9 = v18;
    sub_100011D80(&qword_100130070);
    sub_100016050();
    sub_100098378();
    sub_10000D5F4((_OWORD *)(*(void *)(v18 + 56) + 32 * v32), (_OWORD *)(v12 + 504));
    _NativeDictionary._delete(at:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    *uint64_t v14 = 0u;
    *(_OWORD *)(v12 + 520) = 0u;
    Swift::Int v18 = *(void *)(v12 + 1000);
  }
  id v19 = *(id *)(v12 + 1024);
  uint64_t v35 = *(void *)(v12 + 1016);
  sub_1000186E8(v35, (uint64_t)v19, 0);
  sub_10000EB44(v12 + 504, &qword_10012EFB0);
  sub_1000186E8(v35, (uint64_t)v19, 0);
LABEL_18:
  uint64_t v44 = *(void *)(v12 + 1008) + 1;
  if (v44 == *(void *)(v12 + 992))
  {
    swift_bridgeObjectRelease();
    Dictionary._bridgeToObjectiveC()();
    sub_100016530();
    sub_10000B1B0();
    sub_10000858C();
    return v47(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12);
  }
  else
  {
    sub_10009818C(v44);
    switch(v53)
    {
      case 1:
        sub_100098214();
        sub_100010D74((uint64_t)v19, v18, 1u);
        NSString v59 = sub_10009808C();
        id v60 = sub_100015B9C((uint64_t)v59, "BOOLForKey:");

        id v56 = [v60 valuePromise];
        *(void *)(v12 + 104_Block_object_dispose(&a9, 8) = v56;

        sub_10000F8F0();
        *(void *)(v12 + 16) = v61;
        *(void *)(v12 + 56) = v14;
        *(void *)(v12 + 24) = sub_1000907FC;
        *(void *)(v12 + 496) = sub_100016880();
        *(void *)(v12 + 464) = _NSConcreteStackBlock;
        *(void *)(v12 + 472) = 0x40000000;
        uint64_t v58 = &unk_100115A40;
        break;
      case 2:
        sub_100098214();
        sub_100010D74((uint64_t)v19, v18, 2u);
        NSString v62 = sub_10009808C();
        id v63 = sub_100015B9C((uint64_t)v62, "doubleForKey:");

        id v56 = [v63 valuePromise];
        *(void *)(v12 + 1064) = v56;

        sub_10000F8F0();
        *(void *)(v12 + 272) = v64;
        *(void *)(v12 + 312) = v14;
        *(void *)(v12 + 280) = sub_1000908D8;
        *(void *)(v12 + 496) = sub_100016880();
        *(void *)(v12 + 464) = _NSConcreteStackBlock;
        *(void *)(v12 + 472) = 0x40000000;
        uint64_t v58 = &unk_100115A28;
        break;
      case 3:
        sub_100098214();
        sub_100010D74((uint64_t)v19, v18, 3u);
        NSString v65 = sub_10009808C();
        id v66 = sub_100015B9C((uint64_t)v65, "integerForKey:");

        id v56 = [v66 valuePromise];
        *(void *)(v12 + 1080) = v56;

        sub_10000F8F0();
        *(void *)(v12 + 400) = v67;
        *(void *)(v12 + 440) = v14;
        *(void *)(v12 + 40_Block_object_dispose(&a9, 8) = sub_1000909B4;
        *(void *)(v12 + 496) = sub_100016880();
        *(void *)(v12 + 464) = _NSConcreteStackBlock;
        *(void *)(v12 + 472) = 0x40000000;
        uint64_t v58 = &unk_100115A10;
        break;
      case 4:
        sub_100098214();
        sub_100010D74((uint64_t)v19, v18, 4u);
        NSString v68 = sub_10009808C();
        id v69 = sub_100015B9C((uint64_t)v68, "stringForKey:");

        id v56 = [v69 valuePromise];
        *(void *)(v12 + 1096) = v56;

        sub_10000F8F0();
        *(void *)(v12 + 144) = v70;
        *(void *)(v12 + 184) = v14;
        *(void *)(v12 + 152) = sub_100090A90;
        *(void *)(v12 + 496) = sub_100016880();
        *(void *)(v12 + 464) = _NSConcreteStackBlock;
        *(void *)(v12 + 472) = 0x40000000;
        uint64_t v58 = &unk_1001159F8;
        break;
      case 5:
        sub_100098214();
        sub_100010D74((uint64_t)v19, v18, 5u);
        NSString v71 = sub_10009808C();
        id v72 = sub_100015B9C((uint64_t)v71, "URLForKey:");

        id v56 = [v72 valuePromise];
        *(void *)(v12 + 1112) = v56;

        sub_10000F8F0();
        *(void *)(v12 + 336) = v73;
        *(void *)(v12 + 376) = v14;
        *(void *)(v12 + 344) = sub_100090B6C;
        *(void *)(v12 + 496) = sub_100016880();
        *(void *)(v12 + 464) = _NSConcreteStackBlock;
        *(void *)(v12 + 472) = 0x40000000;
        uint64_t v58 = &unk_1001159E0;
        break;
      case 6:
        sub_100098214();
        sub_100010D74((uint64_t)v19, v18, 6u);
        NSString v74 = sub_10009808C();
        id v75 = sub_100015B9C((uint64_t)v74, "dictionaryForKey:");

        id v56 = [v75 valuePromise];
        *(void *)(v12 + 112_Block_object_dispose(&a9, 8) = v56;

        sub_10000F8F0();
        *(void *)(v12 + 80) = v76;
        *(void *)(v12 + 120) = v14;
        *(void *)(v12 + 8_Block_object_dispose(&a9, 8) = sub_100090C48;
        *(void *)(v12 + 496) = sub_100016880();
        *(void *)(v12 + 464) = _NSConcreteStackBlock;
        *(void *)(v12 + 472) = 0x40000000;
        uint64_t v58 = &unk_1001159C8;
        break;
      default:
        sub_100098214();
        sub_100010D74((uint64_t)v19, v18, 0);
        NSString v54 = sub_10009808C();
        id v55 = sub_100015B9C((uint64_t)v54, "arrayForKey:");

        id v56 = [v55 valuePromise];
        *(void *)(v12 + 1032) = v56;

        sub_10000F8F0();
        *(void *)(v12 + 20_Block_object_dispose(&a9, 8) = v57;
        *(void *)(v12 + 24_Block_object_dispose(&a9, 8) = v14;
        *(void *)(v12 + 216) = sub_100090720;
        *(void *)(v12 + 496) = sub_100016880();
        *(void *)(v12 + 464) = _NSConcreteStackBlock;
        *(void *)(v12 + 472) = 0x40000000;
        uint64_t v58 = &unk_100115A58;
        break;
    }
    *(void *)(v12 + 480) = sub_10008FFC0;
    *(void *)(v12 + 48_Block_object_dispose(&a9, 8) = v58;
    [v56 resultWithCompletion:v13];
    sub_10000858C();
    return _swift_continuation_await(v77);
  }
}

uint64_t sub_100091678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100016794();
  sub_10001660C();
  uint64_t v17 = *(void *)(v14 + 504);

  sub_10009817C();
  if (v17)
  {
    uint64_t v13 = (void *)(v14 + 728);
    *(void *)(v14 + 752) = sub_10001065C(0, (unint64_t *)&qword_10012E490);
    *(void *)(v14 + 72_Block_object_dispose(&a9, 8) = v17;
    sub_1000981E8();
    sub_1000982A8();
    *(void *)(v14 + 936) = v12;
    sub_1000980B4();
    sub_10000FC08();
    if (v18)
    {
      __break(1u);
    }
    else
    {
      sub_100098238();
      sub_100011D80(&qword_100130070);
      if (sub_1000166B4())
      {
        uint64_t v19 = sub_1000981DC();
        sub_10001169C(v19, v20);
        sub_1000980D8();
        if (!v21)
        {
          sub_10000858C();
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
      }
      uint64_t v12 = *(void *)(v14 + 936);
      if (v16)
      {
        sub_100008728();
LABEL_16:
        sub_100008028();
        uint64_t v27 = sub_1000980CC();
        sub_1000186E8(v27, v28, 1u);

        uint64_t v24 = sub_1000980CC();
        goto LABEL_17;
      }
      sub_10000FA3C();
      if (!v18)
      {
        sub_100098220(v26);
        goto LABEL_16;
      }
    }
    __break(1u);
    JUMPOUT(0x100091E6CLL);
  }
  swift_bridgeObjectRetain();
  sub_1000980B4();
  sub_1000162FC();
  if (v15)
  {
    sub_100098074();
    sub_100016920();
    sub_100011D80(&qword_100130070);
    sub_100008650();
    sub_100016A80();
    sub_100011FE8();
    sub_100098148();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000122C4();
  }
  sub_100009C88();
  sub_10000EB44(v14 + 464, &qword_10012EFB0);
  uint64_t v24 = sub_1000981B8();
LABEL_17:
  sub_100012154(v24, v25, 1u);
  if (v21)
  {
    swift_bridgeObjectRelease();
    Dictionary._bridgeToObjectiveC()();
    sub_100016530();
    sub_10000B1B0();
    sub_10000858C();
    return v32(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10, a11, a12);
  }
  else
  {
    sub_10000C01C(v29);
    switch(v38)
    {
      case 1:
        sub_100010D74((uint64_t)v13, v12, 1u);
        NSString v44 = sub_10000D3BC();
        id v45 = sub_10000A4F0((uint64_t)v44, "BOOLForKey:");

        sub_1000163E4((uint64_t)[v45 valuePromise]);
        sub_10000F794();
        *(void *)(v14 + 16) = v46;
        *(void *)(v14 + 56) = v16;
        *(void *)(v14 + 24) = sub_1000907FC;
        uint64_t v42 = sub_100008400();
        *(void *)(v14 + 496) = v42;
        *(void *)(v14 + 464) = _NSConcreteStackBlock;
        *(void *)(v14 + 472) = 0x40000000;
        uint64_t v43 = &unk_100115A40;
        break;
      case 2:
        sub_100010D74((uint64_t)v13, v12, 2u);
        NSString v47 = sub_10000D3BC();
        id v48 = sub_10000A4F0((uint64_t)v47, "doubleForKey:");

        sub_1000980E8((uint64_t)[v48 valuePromise]);
        sub_10000F794();
        *(void *)(v14 + 272) = v49;
        *(void *)(v14 + 312) = v16;
        *(void *)(v14 + 280) = sub_1000908D8;
        uint64_t v42 = sub_100008400();
        *(void *)(v14 + 496) = v42;
        *(void *)(v14 + 464) = _NSConcreteStackBlock;
        *(void *)(v14 + 472) = 0x40000000;
        uint64_t v43 = &unk_100115A28;
        break;
      case 3:
        sub_100010D74((uint64_t)v13, v12, 3u);
        NSString v50 = sub_10000D3BC();
        id v51 = sub_10000A4F0((uint64_t)v50, "integerForKey:");

        sub_100098130((uint64_t)[v51 valuePromise]);
        sub_10000F794();
        *(void *)(v14 + 400) = v52;
        *(void *)(v14 + 440) = v16;
        *(void *)(v14 + 40_Block_object_dispose(&a9, 8) = sub_1000909B4;
        uint64_t v42 = sub_100008400();
        *(void *)(v14 + 496) = v42;
        *(void *)(v14 + 464) = _NSConcreteStackBlock;
        *(void *)(v14 + 472) = 0x40000000;
        uint64_t v43 = &unk_100115A10;
        break;
      case 4:
        sub_100010D74((uint64_t)v13, v12, 4u);
        NSString v53 = sub_10000D3BC();
        id v54 = sub_10000A4F0((uint64_t)v53, "stringForKey:");

        sub_100005ABC((uint64_t)[v54 valuePromise]);
        sub_10000F794();
        *(void *)(v14 + 144) = v55;
        *(void *)(v14 + 184) = v16;
        *(void *)(v14 + 152) = sub_100090A90;
        uint64_t v42 = sub_100008400();
        *(void *)(v14 + 496) = v42;
        *(void *)(v14 + 464) = _NSConcreteStackBlock;
        *(void *)(v14 + 472) = 0x40000000;
        uint64_t v43 = &unk_1001159F8;
        break;
      case 5:
        sub_100010D74((uint64_t)v13, v12, 5u);
        NSString v56 = sub_10000D3BC();
        id v57 = sub_10000A4F0((uint64_t)v56, "URLForKey:");

        sub_100016378((uint64_t)[v57 valuePromise]);
        sub_10000F794();
        *(void *)(v14 + 336) = v58;
        *(void *)(v14 + 376) = v16;
        *(void *)(v14 + 344) = sub_100090B6C;
        uint64_t v42 = sub_100008400();
        *(void *)(v14 + 496) = v42;
        *(void *)(v14 + 464) = _NSConcreteStackBlock;
        *(void *)(v14 + 472) = 0x40000000;
        uint64_t v43 = &unk_1001159E0;
        break;
      case 6:
        sub_100010D74((uint64_t)v13, v12, 6u);
        NSString v59 = sub_10000D3BC();
        id v60 = sub_10000A4F0((uint64_t)v59, "dictionaryForKey:");

        sub_100098100((uint64_t)[v60 valuePromise]);
        sub_10000F794();
        *(void *)(v14 + 80) = v61;
        *(void *)(v14 + 120) = v16;
        *(void *)(v14 + 8_Block_object_dispose(&a9, 8) = sub_100090C48;
        uint64_t v42 = sub_100008400();
        *(void *)(v14 + 496) = v42;
        *(void *)(v14 + 464) = _NSConcreteStackBlock;
        *(void *)(v14 + 472) = 0x40000000;
        uint64_t v43 = &unk_1001159C8;
        break;
      default:
        sub_100010D74((uint64_t)v13, v12, 0);
        NSString v39 = sub_10000D3BC();
        id v40 = sub_10000A4F0((uint64_t)v39, "arrayForKey:");

        sub_100098118((uint64_t)[v40 valuePromise]);
        sub_10000F794();
        *(void *)(v14 + 20_Block_object_dispose(&a9, 8) = v41;
        *(void *)(v14 + 24_Block_object_dispose(&a9, 8) = v16;
        *(void *)(v14 + 216) = sub_100090720;
        uint64_t v42 = sub_100008400();
        *(void *)(v14 + 496) = v42;
        *(void *)(v14 + 464) = _NSConcreteStackBlock;
        *(void *)(v14 + 472) = 0x40000000;
        uint64_t v43 = &unk_100115A58;
        break;
    }
    *(void *)(v14 + 480) = sub_10008FFC0;
    *(void *)(v14 + 48_Block_object_dispose(&a9, 8) = v43;
    sub_1000164E0(v42, "resultWithCompletion:");
    sub_10000858C();
    return _swift_continuation_await(v62);
  }
}

uint64_t sub_100091E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100016794();
  sub_10001660C();
  uint64_t v17 = *(void *)(v14 + 504);

  sub_10009817C();
  if (v17)
  {
    uint64_t v13 = (void *)(v14 + 824);
    *(void *)(v14 + 84_Block_object_dispose(&a9, 8) = sub_10001065C(0, (unint64_t *)&qword_10012E490);
    *(void *)(v14 + 824) = v17;
    sub_1000981E8();
    sub_1000982A8();
    *(void *)(v14 + 920) = v12;
    sub_1000980B4();
    sub_10000FC08();
    if (v18)
    {
      __break(1u);
    }
    else
    {
      sub_100098238();
      sub_100011D80(&qword_100130070);
      if (sub_1000166B4())
      {
        uint64_t v19 = sub_1000981DC();
        sub_10001169C(v19, v20);
        sub_1000980D8();
        if (!v21)
        {
          sub_10000858C();
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
      }
      uint64_t v12 = *(void *)(v14 + 920);
      if (v16)
      {
        sub_100008728();
LABEL_16:
        sub_100008028();
        uint64_t v27 = sub_1000980CC();
        sub_1000186E8(v27, v28, 2u);

        uint64_t v24 = sub_1000980CC();
        goto LABEL_17;
      }
      sub_10000FA3C();
      if (!v18)
      {
        sub_100098220(v26);
        goto LABEL_16;
      }
    }
    __break(1u);
    JUMPOUT(0x10009267CLL);
  }
  swift_bridgeObjectRetain();
  sub_1000980B4();
  sub_1000162FC();
  if (v15)
  {
    sub_100098074();
    sub_100016920();
    sub_100011D80(&qword_100130070);
    sub_100008650();
    sub_100016A80();
    sub_100011FE8();
    sub_100098148();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000122C4();
  }
  sub_100016098();
  sub_10000EB44(v14 + 464, &qword_10012EFB0);
  uint64_t v24 = sub_1000981B8();
LABEL_17:
  sub_100012154(v24, v25, 2u);
  if (v21)
  {
    swift_bridgeObjectRelease();
    Dictionary._bridgeToObjectiveC()();
    sub_100016530();
    sub_10000B1B0();
    sub_10000858C();
    return v32(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10, a11, a12);
  }
  else
  {
    sub_10000C01C(v29);
    switch(v38)
    {
      case 1:
        sub_100010D74((uint64_t)v13, v12, 1u);
        NSString v44 = sub_10000D3BC();
        id v45 = sub_10000A4F0((uint64_t)v44, "BOOLForKey:");

        sub_1000163E4((uint64_t)[v45 valuePromise]);
        sub_10000F794();
        *(void *)(v14 + 16) = v46;
        *(void *)(v14 + 56) = v16;
        *(void *)(v14 + 24) = sub_1000907FC;
        uint64_t v42 = sub_100008400();
        *(void *)(v14 + 496) = v42;
        *(void *)(v14 + 464) = _NSConcreteStackBlock;
        *(void *)(v14 + 472) = 0x40000000;
        uint64_t v43 = &unk_100115A40;
        break;
      case 2:
        sub_100010D74((uint64_t)v13, v12, 2u);
        NSString v47 = sub_10000D3BC();
        id v48 = sub_10000A4F0((uint64_t)v47, "doubleForKey:");

        sub_1000980E8((uint64_t)[v48 valuePromise]);
        sub_10000F794();
        *(void *)(v14 + 272) = v49;
        *(void *)(v14 + 312) = v16;
        *(void *)(v14 + 280) = sub_1000908D8;
        uint64_t v42 = sub_100008400();
        *(void *)(v14 + 496) = v42;
        *(void *)(v14 + 464) = _NSConcreteStackBlock;
        *(void *)(v14 + 472) = 0x40000000;
        uint64_t v43 = &unk_100115A28;
        break;
      case 3:
        sub_100010D74((uint64_t)v13, v12, 3u);
        NSString v50 = sub_10000D3BC();
        id v51 = sub_10000A4F0((uint64_t)v50, "integerForKey:");

        sub_100098130((uint64_t)[v51 valuePromise]);
        sub_10000F794();
        *(void *)(v14 + 400) = v52;
        *(void *)(v14 + 440) = v16;
        *(void *)(v14 + 40_Block_object_dispose(&a9, 8) = sub_1000909B4;
        uint64_t v42 = sub_100008400();
        *(void *)(v14 + 496) = v42;
        *(void *)(v14 + 464) = _NSConcreteStackBlock;
        *(void *)(v14 + 472) = 0x40000000;
        uint64_t v43 = &unk_100115A10;
        break;
      case 4:
        sub_100010D74((uint64_t)v13, v12, 4u);
        NSString v53 = sub_10000D3BC();
        id v54 = sub_10000A4F0((uint64_t)v53, "stringForKey:");

        sub_100005ABC((uint64_t)[v54 valuePromise]);
        sub_10000F794();
        *(void *)(v14 + 144) = v55;
        *(void *)(v14 + 184) = v16;
        *(void *)(v14 + 152) = sub_100090A90;
        uint64_t v42 = sub_100008400();
        *(void *)(v14 + 496) = v42;
        *(void *)(v14 + 464) = _NSConcreteStackBlock;
        *(void *)(v14 + 472) = 0x40000000;
        uint64_t v43 = &unk_1001159F8;
        break;
      case 5:
        sub_100010D74((uint64_t)v13, v12, 5u);
        NSString v56 = sub_10000D3BC();
        id v57 = sub_10000A4F0((uint64_t)v56, "URLForKey:");

        sub_100016378((uint64_t)[v57 valuePromise]);
        sub_10000F794();
        *(void *)(v14 + 336) = v58;
        *(void *)(v14 + 376) = v16;
        *(void *)(v14 + 344) = sub_100090B6C;
        uint64_t v42 = sub_100008400();
        *(void *)(v14 + 496) = v42;
        *(void *)(v14 + 464) = _NSConcreteStackBlock;
        *(void *)(v14 + 472) = 0x40000000;
        uint64_t v43 = &unk_1001159E0;
        break;
      case 6:
        sub_100010D74((uint64_t)v13, v12, 6u);
        NSString v59 = sub_10000D3BC();
        id v60 = sub_10000A4F0((uint64_t)v59, "dictionaryForKey:");

        sub_100098100((uint64_t)[v60 valuePromise]);
        sub_10000F794();
        *(void *)(v14 + 80) = v61;
        *(void *)(v14 + 120) = v16;
        *(void *)(v14 + 8_Block_object_dispose(&a9, 8) = sub_100090C48;
        uint64_t v42 = sub_100008400();
        *(void *)(v14 + 496) = v42;
        *(void *)(v14 + 464) = _NSConcreteStackBlock;
        *(void *)(v14 + 472) = 0x40000000;
        uint64_t v43 = &unk_1001159C8;
        break;
      default:
        sub_100010D74((uint64_t)v13, v12, 0);
        NSString v39 = sub_10000D3BC();
        id v40 = sub_10000A4F0((uint64_t)v39, "arrayForKey:");

        sub_100098118((uint64_t)[v40 valuePromise]);
        sub_10000F794();
        *(void *)(v14 + 20_Block_object_dispose(&a9, 8) = v41;
        *(void *)(v14 + 24_Block_object_dispose(&a9, 8) = v16;
        *(void *)(v14 + 216) = sub_100090720;
        uint64_t v42 = sub_100008400();
        *(void *)(v14 + 496) = v42;
        *(void *)(v14 + 464) = _NSConcreteStackBlock;
        *(void *)(v14 + 472) = 0x40000000;
        uint64_t v43 = &unk_100115A58;
        break;
    }
    *(void *)(v14 + 480) = sub_10008FFC0;
    *(void *)(v14 + 48_Block_object_dispose(&a9, 8) = v43;
    sub_1000164E0(v42, "resultWithCompletion:");
    sub_10000858C();
    return _swift_continuation_await(v62);
  }
}

uint64_t sub_100092698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100016794();
  sub_10001660C();
  uint64_t v17 = *(void *)(v14 + 504);

  sub_10009817C();
  if (v17)
  {
    uint64_t v13 = (void *)(v14 + 536);
    *(void *)(v14 + 560) = sub_10001065C(0, (unint64_t *)&qword_10012E490);
    *(void *)(v14 + 536) = v17;
    sub_1000981E8();
    sub_1000982A8();
    *(void *)(v14 + 92_Block_object_dispose(&a9, 8) = v12;
    sub_1000980B4();
    sub_10000FC08();
    if (v18)
    {
      __break(1u);
    }
    else
    {
      sub_100098238();
      sub_100011D80(&qword_100130070);
      if (sub_1000166B4())
      {
        uint64_t v19 = sub_1000981DC();
        sub_10001169C(v19, v20);
        sub_1000980D8();
        if (!v21)
        {
          sub_10000858C();
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
      }
      uint64_t v12 = *(void *)(v14 + 928);
      if (v16)
      {
        sub_100008728();
LABEL_16:
        sub_100008028();
        uint64_t v27 = sub_1000980CC();
        sub_1000186E8(v27, v28, 3u);

        uint64_t v24 = sub_1000980CC();
        goto LABEL_17;
      }
      sub_10000FA3C();
      if (!v18)
      {
        sub_100098220(v26);
        goto LABEL_16;
      }
    }
    __break(1u);
    JUMPOUT(0x100092E8CLL);
  }
  swift_bridgeObjectRetain();
  sub_1000980B4();
  sub_1000162FC();
  if (v15)
  {
    sub_100098074();
    sub_100016920();
    sub_100011D80(&qword_100130070);
    sub_100008650();
    sub_100016A80();
    sub_100011FE8();
    sub_100098148();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000122C4();
  }
  sub_100098260();
  sub_10000EB44(v14 + 464, &qword_10012EFB0);
  uint64_t v24 = sub_1000981B8();
LABEL_17:
  sub_100012154(v24, v25, 3u);
  if (v21)
  {
    swift_bridgeObjectRelease();
    Dictionary._bridgeToObjectiveC()();
    sub_100016530();
    sub_10000B1B0();
    sub_10000858C();
    return v32(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10, a11, a12);
  }
  else
  {
    sub_10000C01C(v29);
    switch(v38)
    {
      case 1:
        sub_100010D74((uint64_t)v13, v12, 1u);
        NSString v44 = sub_10000D3BC();
        id v45 = sub_10000A4F0((uint64_t)v44, "BOOLForKey:");

        sub_1000163E4((uint64_t)[v45 valuePromise]);
        sub_10000F794();
        *(void *)(v14 + 16) = v46;
        *(void *)(v14 + 56) = v16;
        *(void *)(v14 + 24) = sub_1000907FC;
        uint64_t v42 = sub_100008400();
        *(void *)(v14 + 496) = v42;
        *(void *)(v14 + 464) = _NSConcreteStackBlock;
        *(void *)(v14 + 472) = 0x40000000;
        uint64_t v43 = &unk_100115A40;
        break;
      case 2:
        sub_100010D74((uint64_t)v13, v12, 2u);
        NSString v47 = sub_10000D3BC();
        id v48 = sub_10000A4F0((uint64_t)v47, "doubleForKey:");

        sub_1000980E8((uint64_t)[v48 valuePromise]);
        sub_10000F794();
        *(void *)(v14 + 272) = v49;
        *(void *)(v14 + 312) = v16;
        *(void *)(v14 + 280) = sub_1000908D8;
        uint64_t v42 = sub_100008400();
        *(void *)(v14 + 496) = v42;
        *(void *)(v14 + 464) = _NSConcreteStackBlock;
        *(void *)(v14 + 472) = 0x40000000;
        uint64_t v43 = &unk_100115A28;
        break;
      case 3:
        sub_100010D74((uint64_t)v13, v12, 3u);
        NSString v50 = sub_10000D3BC();
        id v51 = sub_10000A4F0((uint64_t)v50, "integerForKey:");

        sub_100098130((uint64_t)[v51 valuePromise]);
        sub_10000F794();
        *(void *)(v14 + 400) = v52;
        *(void *)(v14 + 440) = v16;
        *(void *)(v14 + 40_Block_object_dispose(&a9, 8) = sub_1000909B4;
        uint64_t v42 = sub_100008400();
        *(void *)(v14 + 496) = v42;
        *(void *)(v14 + 464) = _NSConcreteStackBlock;
        *(void *)(v14 + 472) = 0x40000000;
        uint64_t v43 = &unk_100115A10;
        break;
      case 4:
        sub_100010D74((uint64_t)v13, v12, 4u);
        NSString v53 = sub_10000D3BC();
        id v54 = sub_10000A4F0((uint64_t)v53, "stringForKey:");

        sub_100005ABC((uint64_t)[v54 valuePromise]);
        sub_10000F794();
        *(void *)(v14 + 144) = v55;
        *(void *)(v14 + 184) = v16;
        *(void *)(v14 + 152) = sub_100090A90;
        uint64_t v42 = sub_100008400();
        *(void *)(v14 + 496) = v42;
        *(void *)(v14 + 464) = _NSConcreteStackBlock;
        *(void *)(v14 + 472) = 0x40000000;
        uint64_t v43 = &unk_1001159F8;
        break;
      case 5:
        sub_100010D74((uint64_t)v13, v12, 5u);
        NSString v56 = sub_10000D3BC();
        id v57 = sub_10000A4F0((uint64_t)v56, "URLForKey:");

        sub_100016378((uint64_t)[v57 valuePromise]);
        sub_10000F794();
        *(void *)(v14 + 336) = v58;
        *(void *)(v14 + 376) = v16;
        *(void *)(v14 + 344) = sub_100090B6C;
        uint64_t v42 = sub_100008400();
        *(void *)(v14 + 496) = v42;
        *(void *)(v14 + 464) = _NSConcreteStackBlock;
        *(void *)(v14 + 472) = 0x40000000;
        uint64_t v43 = &unk_1001159E0;
        break;
      case 6:
        sub_100010D74((uint64_t)v13, v12, 6u);
        NSString v59 = sub_10000D3BC();
        id v60 = sub_10000A4F0((uint64_t)v59, "dictionaryForKey:");

        sub_100098100((uint64_t)[v60 valuePromise]);
        sub_10000F794();
        *(void *)(v14 + 80) = v61;
        *(void *)(v14 + 120) = v16;
        *(void *)(v14 + 8_Block_object_dispose(&a9, 8) = sub_100090C48;
        uint64_t v42 = sub_100008400();
        *(void *)(v14 + 496) = v42;
        *(void *)(v14 + 464) = _NSConcreteStackBlock;
        *(void *)(v14 + 472) = 0x40000000;
        uint64_t v43 = &unk_1001159C8;
        break;
      default:
        sub_100010D74((uint64_t)v13, v12, 0);
        NSString v39 = sub_10000D3BC();
        id v40 = sub_10000A4F0((uint64_t)v39, "arrayForKey:");

        sub_100098118((uint64_t)[v40 valuePromise]);
        sub_10000F794();
        *(void *)(v14 + 20_Block_object_dispose(&a9, 8) = v41;
        *(void *)(v14 + 24_Block_object_dispose(&a9, 8) = v16;
        *(void *)(v14 + 216) = sub_100090720;
        uint64_t v42 = sub_100008400();
        *(void *)(v14 + 496) = v42;
        *(void *)(v14 + 464) = _NSConcreteStackBlock;
        *(void *)(v14 + 472) = 0x40000000;
        uint64_t v43 = &unk_100115A58;
        break;
    }
    *(void *)(v14 + 480) = sub_10008FFC0;
    *(void *)(v14 + 48_Block_object_dispose(&a9, 8) = v43;
    sub_1000164E0(v42, "resultWithCompletion:");
    sub_10000858C();
    return _swift_continuation_await(v62);
  }
}

uint64_t sub_100092EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100016794();
  sub_10001660C();
  uint64_t v17 = *(void *)(v14 + 504);

  sub_10009817C();
  if (v17)
  {
    uint64_t v13 = (void *)(v14 + 888);
    *(void *)(v14 + 912) = sub_10001065C(0, (unint64_t *)&unk_10012EFD0);
    *(void *)(v14 + 88_Block_object_dispose(&a9, 8) = v17;
    sub_1000981E8();
    sub_1000982A8();
    *(void *)(v14 + 944) = v12;
    sub_1000980B4();
    sub_10000FC08();
    if (v18)
    {
      __break(1u);
    }
    else
    {
      sub_100098238();
      sub_100011D80(&qword_100130070);
      if (sub_1000166B4())
      {
        uint64_t v19 = sub_1000981DC();
        sub_10001169C(v19, v20);
        sub_1000980D8();
        if (!v21)
        {
          sub_10000858C();
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
      }
      uint64_t v12 = *(void *)(v14 + 944);
      if (v16)
      {
        sub_100008728();
LABEL_16:
        sub_100008028();
        uint64_t v27 = sub_1000980CC();
        sub_1000186E8(v27, v28, 4u);

        uint64_t v24 = sub_1000980CC();
        goto LABEL_17;
      }
      sub_10000FA3C();
      if (!v18)
      {
        sub_100098220(v26);
        goto LABEL_16;
      }
    }
    __break(1u);
    JUMPOUT(0x10009369CLL);
  }
  swift_bridgeObjectRetain();
  sub_1000980B4();
  sub_1000162FC();
  if (v15)
  {
    sub_100098074();
    sub_100016920();
    sub_100011D80(&qword_100130070);
    sub_100008650();
    sub_100016A80();
    sub_100011FE8();
    sub_100098148();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000122C4();
  }
  sub_100098284();
  sub_10000EB44(v14 + 464, &qword_10012EFB0);
  uint64_t v24 = sub_1000981B8();
LABEL_17:
  sub_100012154(v24, v25, 4u);
  if (v21)
  {
    swift_bridgeObjectRelease();
    Dictionary._bridgeToObjectiveC()();
    sub_100016530();
    sub_10000B1B0();
    sub_10000858C();
    return v32(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10, a11, a12);
  }
  else
  {
    sub_10000C01C(v29);
    switch(v38)
    {
      case 1:
        sub_100010D74((uint64_t)v13, v12, 1u);
        NSString v44 = sub_10000D3BC();
        id v45 = sub_10000A4F0((uint64_t)v44, "BOOLForKey:");

        sub_1000163E4((uint64_t)[v45 valuePromise]);
        sub_10000F794();
        *(void *)(v14 + 16) = v46;
        *(void *)(v14 + 56) = v16;
        *(void *)(v14 + 24) = sub_1000907FC;
        uint64_t v42 = sub_100008400();
        *(void *)(v14 + 496) = v42;
        *(void *)(v14 + 464) = _NSConcreteStackBlock;
        *(void *)(v14 + 472) = 0x40000000;
        uint64_t v43 = &unk_100115A40;
        break;
      case 2:
        sub_100010D74((uint64_t)v13, v12, 2u);
        NSString v47 = sub_10000D3BC();
        id v48 = sub_10000A4F0((uint64_t)v47, "doubleForKey:");

        sub_1000980E8((uint64_t)[v48 valuePromise]);
        sub_10000F794();
        *(void *)(v14 + 272) = v49;
        *(void *)(v14 + 312) = v16;
        *(void *)(v14 + 280) = sub_1000908D8;
        uint64_t v42 = sub_100008400();
        *(void *)(v14 + 496) = v42;
        *(void *)(v14 + 464) = _NSConcreteStackBlock;
        *(void *)(v14 + 472) = 0x40000000;
        uint64_t v43 = &unk_100115A28;
        break;
      case 3:
        sub_100010D74((uint64_t)v13, v12, 3u);
        NSString v50 = sub_10000D3BC();
        id v51 = sub_10000A4F0((uint64_t)v50, "integerForKey:");

        sub_100098130((uint64_t)[v51 valuePromise]);
        sub_10000F794();
        *(void *)(v14 + 400) = v52;
        *(void *)(v14 + 440) = v16;
        *(void *)(v14 + 40_Block_object_dispose(&a9, 8) = sub_1000909B4;
        uint64_t v42 = sub_100008400();
        *(void *)(v14 + 496) = v42;
        *(void *)(v14 + 464) = _NSConcreteStackBlock;
        *(void *)(v14 + 472) = 0x40000000;
        uint64_t v43 = &unk_100115A10;
        break;
      case 4:
        sub_100010D74((uint64_t)v13, v12, 4u);
        NSString v53 = sub_10000D3BC();
        id v54 = sub_10000A4F0((uint64_t)v53, "stringForKey:");

        sub_100005ABC((uint64_t)[v54 valuePromise]);
        sub_10000F794();
        *(void *)(v14 + 144) = v55;
        *(void *)(v14 + 184) = v16;
        *(void *)(v14 + 152) = sub_100090A90;
        uint64_t v42 = sub_100008400();
        *(void *)(v14 + 496) = v42;
        *(void *)(v14 + 464) = _NSConcreteStackBlock;
        *(void *)(v14 + 472) = 0x40000000;
        uint64_t v43 = &unk_1001159F8;
        break;
      case 5:
        sub_100010D74((uint64_t)v13, v12, 5u);
        NSString v56 = sub_10000D3BC();
        id v57 = sub_10000A4F0((uint64_t)v56, "URLForKey:");

        sub_100016378((uint64_t)[v57 valuePromise]);
        sub_10000F794();
        *(void *)(v14 + 336) = v58;
        *(void *)(v14 + 376) = v16;
        *(void *)(v14 + 344) = sub_100090B6C;
        uint64_t v42 = sub_100008400();
        *(void *)(v14 + 496) = v42;
        *(void *)(v14 + 464) = _NSConcreteStackBlock;
        *(void *)(v14 + 472) = 0x40000000;
        uint64_t v43 = &unk_1001159E0;
        break;
      case 6:
        sub_100010D74((uint64_t)v13, v12, 6u);
        NSString v59 = sub_10000D3BC();
        id v60 = sub_10000A4F0((uint64_t)v59, "dictionaryForKey:");

        sub_100098100((uint64_t)[v60 valuePromise]);
        sub_10000F794();
        *(void *)(v14 + 80) = v61;
        *(void *)(v14 + 120) = v16;
        *(void *)(v14 + 8_Block_object_dispose(&a9, 8) = sub_100090C48;
        uint64_t v42 = sub_100008400();
        *(void *)(v14 + 496) = v42;
        *(void *)(v14 + 464) = _NSConcreteStackBlock;
        *(void *)(v14 + 472) = 0x40000000;
        uint64_t v43 = &unk_1001159C8;
        break;
      default:
        sub_100010D74((uint64_t)v13, v12, 0);
        NSString v39 = sub_10000D3BC();
        id v40 = sub_10000A4F0((uint64_t)v39, "arrayForKey:");

        sub_100098118((uint64_t)[v40 valuePromise]);
        sub_10000F794();
        *(void *)(v14 + 20_Block_object_dispose(&a9, 8) = v41;
        *(void *)(v14 + 24_Block_object_dispose(&a9, 8) = v16;
        *(void *)(v14 + 216) = sub_100090720;
        uint64_t v42 = sub_100008400();
        *(void *)(v14 + 496) = v42;
        *(void *)(v14 + 464) = _NSConcreteStackBlock;
        *(void *)(v14 + 472) = 0x40000000;
        uint64_t v43 = &unk_100115A58;
        break;
    }
    *(void *)(v14 + 480) = sub_10008FFC0;
    *(void *)(v14 + 48_Block_object_dispose(&a9, 8) = v43;
    sub_1000164E0(v42, "resultWithCompletion:");
    sub_10000858C();
    return _swift_continuation_await(v62);
  }
}

uint64_t sub_1000936B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100016794();
  sub_10001660C();
  uint64_t v16 = v13 + 504;
  uint64_t v17 = *(void **)(v13 + 504);

  sub_10009817C();
  if (v17)
  {
    *(void *)(v13 + 624) = sub_10001065C(0, &qword_10012EFC8);
    *(void *)(v13 + 600) = v17;
    char v18 = (_OWORD *)sub_1000981B8();
    sub_10000D5F4(v18, v19);
    id v20 = v17;
    swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v13 + 952) = v12;
    sub_1000980B4();
    sub_10000FC08();
    if (v21)
    {
      __break(1u);
    }
    else
    {
      sub_100098238();
      sub_100011D80(&qword_100130070);
      if (sub_1000166B4())
      {
        uint64_t v22 = sub_1000981DC();
        sub_10001169C(v22, v23);
        sub_1000980D8();
        if (!v25)
        {
          sub_10000858C();
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
        unint64_t v14 = v24;
      }
      uint64_t v12 = *(void *)(v13 + 952);
      if (v15)
      {
        uint64_t v35 = (_OWORD *)(*(void *)(v12 + 56) + 32 * v14);
        sub_10000D47C((uint64_t)v35);
        sub_10000D5F4((_OWORD *)(v13 + 504), v35);
LABEL_17:
        uint64_t v40 = *(void *)(v13 + 1024);
        uint64_t v41 = *(void *)(v13 + 1016);
        swift_bridgeObjectRelease();
        sub_1000186E8(v41, v40, 5u);

        uint64_t v33 = v41;
        uint64_t v34 = v40;
        goto LABEL_18;
      }
      uint64_t v36 = *(void *)(v13 + 1024);
      uint64_t v37 = *(void *)(v13 + 1016);
      *(void *)(v12 + 8 * (v14 >> 6) + 64) |= 1 << v14;
      uint64_t v38 = (void *)(*(void *)(v12 + 48) + 16 * v14);
      *uint64_t v38 = v37;
      v38[1] = v36;
      sub_100016590((_OWORD *)(v13 + 504), (_OWORD *)(*(void *)(v12 + 56) + 32 * v14));
      if (!v21)
      {
        sub_100098220(v39);
        goto LABEL_17;
      }
    }
    __break(1u);
    JUMPOUT(0x100093F34);
  }
  swift_bridgeObjectRetain();
  unint64_t v28 = sub_1000980B4();
  char v30 = v29;
  swift_bridgeObjectRelease();
  if (v30)
  {
    sub_100098074();
    a9 = v12;
    sub_100011D80(&qword_100130070);
    sub_100016050();
    sub_100098378();
    sub_10000D5F4((_OWORD *)(*(void *)(v12 + 56) + 32 * v28), (_OWORD *)(v13 + 464));
    _NativeDictionary._delete(at:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000122C4();
  }
  id v20 = *(id *)(v13 + 1024);
  uint64_t v31 = sub_1000980CC();
  sub_1000186E8(v31, v32, 5u);
  sub_10000EB44(v13 + 464, &qword_10012EFB0);
  uint64_t v33 = sub_1000980CC();
LABEL_18:
  sub_100012154(v33, v34, 5u);
  if (v25)
  {
    swift_bridgeObjectRelease();
    Dictionary._bridgeToObjectiveC()();
    sub_100016530();
    sub_10000B1B0();
    sub_10000858C();
    return v45(v43, v44, v45, v46, v47, v48, v49, v50, a9, a10, a11, a12);
  }
  else
  {
    sub_10009818C(v42);
    switch(v51)
    {
      case 1:
        uint64_t v57 = sub_100098360();
        sub_100010D74(v57, v12, 1u);
        NSString v58 = sub_10009808C();
        id v59 = sub_100015B9C((uint64_t)v58, "BOOLForKey:");

        *(void *)(v13 + 104_Block_object_dispose(&a9, 8) = [v59 valuePromise];
        sub_10000F8F0();
        *(void *)(v13 + 16) = v60;
        *(void *)(v13 + 56) = v16;
        *(void *)(v13 + 24) = sub_1000907FC;
        uint64_t v55 = sub_100016880();
        *(void *)(v13 + 496) = v55;
        *(void *)(v13 + 464) = _NSConcreteStackBlock;
        *(void *)(v13 + 472) = 0x40000000;
        NSString v56 = &unk_100115A40;
        break;
      case 2:
        uint64_t v61 = sub_100098348();
        sub_100010D74(v61, v12, 2u);
        NSString v62 = sub_10009808C();
        id v63 = sub_100015B9C((uint64_t)v62, "doubleForKey:");

        *(void *)(v13 + 1064) = [v63 valuePromise];
        sub_10000F8F0();
        *(void *)(v13 + 272) = v64;
        *(void *)(v13 + 312) = v16;
        *(void *)(v13 + 280) = sub_1000908D8;
        uint64_t v55 = sub_100016880();
        *(void *)(v13 + 496) = v55;
        *(void *)(v13 + 464) = _NSConcreteStackBlock;
        *(void *)(v13 + 472) = 0x40000000;
        NSString v56 = &unk_100115A28;
        break;
      case 3:
        uint64_t v65 = sub_100098330();
        sub_100010D74(v65, v12, 3u);
        NSString v66 = sub_10009808C();
        id v67 = sub_100015B9C((uint64_t)v66, "integerForKey:");

        *(void *)(v13 + 1080) = [v67 valuePromise];
        sub_10000F8F0();
        *(void *)(v13 + 400) = v68;
        *(void *)(v13 + 440) = v16;
        *(void *)(v13 + 40_Block_object_dispose(&a9, 8) = sub_1000909B4;
        uint64_t v55 = sub_100016880();
        *(void *)(v13 + 496) = v55;
        *(void *)(v13 + 464) = _NSConcreteStackBlock;
        *(void *)(v13 + 472) = 0x40000000;
        NSString v56 = &unk_100115A10;
        break;
      case 4:
        uint64_t v69 = sub_100098318();
        sub_100010D74(v69, v12, 4u);
        NSString v70 = sub_10009808C();
        id v71 = sub_100015B9C((uint64_t)v70, "stringForKey:");

        *(void *)(v13 + 1096) = [v71 valuePromise];
        sub_10000F8F0();
        *(void *)(v13 + 144) = v72;
        *(void *)(v13 + 184) = v16;
        *(void *)(v13 + 152) = sub_100090A90;
        uint64_t v55 = sub_100016880();
        *(void *)(v13 + 496) = v55;
        *(void *)(v13 + 464) = _NSConcreteStackBlock;
        *(void *)(v13 + 472) = 0x40000000;
        NSString v56 = &unk_1001159F8;
        break;
      case 5:
        uint64_t v73 = sub_100098300();
        sub_100010D74(v73, v12, 5u);
        NSString v74 = sub_10009808C();
        id v75 = sub_100015B9C((uint64_t)v74, "URLForKey:");

        *(void *)(v13 + 1112) = [v75 valuePromise];
        sub_10000F8F0();
        *(void *)(v13 + 336) = v76;
        *(void *)(v13 + 376) = v16;
        *(void *)(v13 + 344) = sub_100090B6C;
        uint64_t v55 = sub_100016880();
        *(void *)(v13 + 496) = v55;
        *(void *)(v13 + 464) = _NSConcreteStackBlock;
        *(void *)(v13 + 472) = 0x40000000;
        NSString v56 = &unk_1001159E0;
        break;
      case 6:
        uint64_t v77 = sub_1000982E8();
        sub_100010D74(v77, v12, 6u);
        NSString v78 = sub_10009808C();
        id v79 = sub_100015B9C((uint64_t)v78, "dictionaryForKey:");

        *(void *)(v13 + 112_Block_object_dispose(&a9, 8) = [v79 valuePromise];
        sub_10000F8F0();
        *(void *)(v13 + 80) = v80;
        *(void *)(v13 + 120) = v16;
        *(void *)(v13 + 8_Block_object_dispose(&a9, 8) = sub_100090C48;
        uint64_t v55 = sub_100016880();
        *(void *)(v13 + 496) = v55;
        *(void *)(v13 + 464) = _NSConcreteStackBlock;
        *(void *)(v13 + 472) = 0x40000000;
        NSString v56 = &unk_1001159C8;
        break;
      default:
        sub_100010D74((uint64_t)v20, v12, 0);
        NSString v52 = sub_10009808C();
        id v53 = sub_100015B9C((uint64_t)v52, "arrayForKey:");

        *(void *)(v13 + 1032) = [v53 valuePromise];
        sub_10000F8F0();
        *(void *)(v13 + 20_Block_object_dispose(&a9, 8) = v54;
        *(void *)(v13 + 24_Block_object_dispose(&a9, 8) = v16;
        *(void *)(v13 + 216) = sub_100090720;
        uint64_t v55 = sub_100016880();
        *(void *)(v13 + 496) = v55;
        *(void *)(v13 + 464) = _NSConcreteStackBlock;
        *(void *)(v13 + 472) = 0x40000000;
        NSString v56 = &unk_100115A58;
        break;
    }
    *(void *)(v13 + 480) = sub_10008FFC0;
    *(void *)(v13 + 48_Block_object_dispose(&a9, 8) = v56;
    sub_1000164E0(v55, "resultWithCompletion:");
    sub_10000858C();
    return _swift_continuation_await(v81);
  }
}

uint64_t sub_100093F50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100016794();
  sub_10001660C();
  uint64_t v17 = *(void *)(v14 + 504);

  sub_10009817C();
  if (v17)
  {
    uint64_t v13 = (void *)(v14 + 792);
    *(void *)(v14 + 816) = sub_10001065C(0, &qword_10012EFC0);
    *(void *)(v14 + 792) = v17;
    sub_1000981E8();
    sub_1000982A8();
    *(void *)(v14 + 960) = v12;
    sub_1000980B4();
    sub_10000FC08();
    if (v18)
    {
      __break(1u);
    }
    else
    {
      sub_100098238();
      sub_100011D80(&qword_100130070);
      if (sub_1000166B4())
      {
        uint64_t v19 = sub_1000981DC();
        sub_10001169C(v19, v20);
        sub_1000980D8();
        if (!v21)
        {
          sub_10000858C();
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
      }
      uint64_t v12 = *(void *)(v14 + 960);
      if (v16)
      {
        sub_100008728();
LABEL_16:
        sub_100008028();
        uint64_t v27 = sub_1000980CC();
        sub_1000186E8(v27, v28, 6u);

        uint64_t v24 = sub_1000980CC();
        goto LABEL_17;
      }
      sub_10000FA3C();
      if (!v18)
      {
        sub_100098220(v26);
        goto LABEL_16;
      }
    }
    __break(1u);
    JUMPOUT(0x100094744);
  }
  swift_bridgeObjectRetain();
  sub_1000980B4();
  sub_1000162FC();
  if (v15)
  {
    sub_100098074();
    sub_100016920();
    sub_100011D80(&qword_100130070);
    sub_100008650();
    sub_100016A80();
    sub_100011FE8();
    sub_100098148();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000122C4();
  }
  sub_10000F978();
  sub_10000EB44(v14 + 464, &qword_10012EFB0);
  uint64_t v24 = sub_1000981B8();
LABEL_17:
  sub_100012154(v24, v25, 6u);
  if (v21)
  {
    swift_bridgeObjectRelease();
    Dictionary._bridgeToObjectiveC()();
    sub_100016530();
    sub_10000B1B0();
    sub_10000858C();
    return v32(v30, v31, v32, v33, v34, v35, v36, v37, a9, a10, a11, a12);
  }
  else
  {
    sub_10000C01C(v29);
    switch(v38)
    {
      case 1:
        sub_100010D74((uint64_t)v13, v12, 1u);
        NSString v44 = sub_10000D3BC();
        id v45 = sub_10000A4F0((uint64_t)v44, "BOOLForKey:");

        sub_1000163E4((uint64_t)[v45 valuePromise]);
        sub_10000F794();
        *(void *)(v14 + 16) = v46;
        *(void *)(v14 + 56) = v16;
        *(void *)(v14 + 24) = sub_1000907FC;
        uint64_t v42 = sub_100008400();
        *(void *)(v14 + 496) = v42;
        *(void *)(v14 + 464) = _NSConcreteStackBlock;
        *(void *)(v14 + 472) = 0x40000000;
        uint64_t v43 = &unk_100115A40;
        break;
      case 2:
        sub_100010D74((uint64_t)v13, v12, 2u);
        NSString v47 = sub_10000D3BC();
        id v48 = sub_10000A4F0((uint64_t)v47, "doubleForKey:");

        sub_1000980E8((uint64_t)[v48 valuePromise]);
        sub_10000F794();
        *(void *)(v14 + 272) = v49;
        *(void *)(v14 + 312) = v16;
        *(void *)(v14 + 280) = sub_1000908D8;
        uint64_t v42 = sub_100008400();
        *(void *)(v14 + 496) = v42;
        *(void *)(v14 + 464) = _NSConcreteStackBlock;
        *(void *)(v14 + 472) = 0x40000000;
        uint64_t v43 = &unk_100115A28;
        break;
      case 3:
        sub_100010D74((uint64_t)v13, v12, 3u);
        NSString v50 = sub_10000D3BC();
        id v51 = sub_10000A4F0((uint64_t)v50, "integerForKey:");

        sub_100098130((uint64_t)[v51 valuePromise]);
        sub_10000F794();
        *(void *)(v14 + 400) = v52;
        *(void *)(v14 + 440) = v16;
        *(void *)(v14 + 40_Block_object_dispose(&a9, 8) = sub_1000909B4;
        uint64_t v42 = sub_100008400();
        *(void *)(v14 + 496) = v42;
        *(void *)(v14 + 464) = _NSConcreteStackBlock;
        *(void *)(v14 + 472) = 0x40000000;
        uint64_t v43 = &unk_100115A10;
        break;
      case 4:
        sub_100010D74((uint64_t)v13, v12, 4u);
        NSString v53 = sub_10000D3BC();
        id v54 = sub_10000A4F0((uint64_t)v53, "stringForKey:");

        sub_100005ABC((uint64_t)[v54 valuePromise]);
        sub_10000F794();
        *(void *)(v14 + 144) = v55;
        *(void *)(v14 + 184) = v16;
        *(void *)(v14 + 152) = sub_100090A90;
        uint64_t v42 = sub_100008400();
        *(void *)(v14 + 496) = v42;
        *(void *)(v14 + 464) = _NSConcreteStackBlock;
        *(void *)(v14 + 472) = 0x40000000;
        uint64_t v43 = &unk_1001159F8;
        break;
      case 5:
        sub_100010D74((uint64_t)v13, v12, 5u);
        NSString v56 = sub_10000D3BC();
        id v57 = sub_10000A4F0((uint64_t)v56, "URLForKey:");

        sub_100016378((uint64_t)[v57 valuePromise]);
        sub_10000F794();
        *(void *)(v14 + 336) = v58;
        *(void *)(v14 + 376) = v16;
        *(void *)(v14 + 344) = sub_100090B6C;
        uint64_t v42 = sub_100008400();
        *(void *)(v14 + 496) = v42;
        *(void *)(v14 + 464) = _NSConcreteStackBlock;
        *(void *)(v14 + 472) = 0x40000000;
        uint64_t v43 = &unk_1001159E0;
        break;
      case 6:
        sub_100010D74((uint64_t)v13, v12, 6u);
        NSString v59 = sub_10000D3BC();
        id v60 = sub_10000A4F0((uint64_t)v59, "dictionaryForKey:");

        sub_100098100((uint64_t)[v60 valuePromise]);
        sub_10000F794();
        *(void *)(v14 + 80) = v61;
        *(void *)(v14 + 120) = v16;
        *(void *)(v14 + 8_Block_object_dispose(&a9, 8) = sub_100090C48;
        uint64_t v42 = sub_100008400();
        *(void *)(v14 + 496) = v42;
        *(void *)(v14 + 464) = _NSConcreteStackBlock;
        *(void *)(v14 + 472) = 0x40000000;
        uint64_t v43 = &unk_1001159C8;
        break;
      default:
        sub_100010D74((uint64_t)v13, v12, 0);
        NSString v39 = sub_10000D3BC();
        id v40 = sub_10000A4F0((uint64_t)v39, "arrayForKey:");

        sub_100098118((uint64_t)[v40 valuePromise]);
        sub_10000F794();
        *(void *)(v14 + 20_Block_object_dispose(&a9, 8) = v41;
        *(void *)(v14 + 24_Block_object_dispose(&a9, 8) = v16;
        *(void *)(v14 + 216) = sub_100090720;
        uint64_t v42 = sub_100008400();
        *(void *)(v14 + 496) = v42;
        *(void *)(v14 + 464) = _NSConcreteStackBlock;
        *(void *)(v14 + 472) = 0x40000000;
        uint64_t v43 = &unk_100115A58;
        break;
    }
    *(void *)(v14 + 480) = sub_10008FFC0;
    *(void *)(v14 + 48_Block_object_dispose(&a9, 8) = v43;
    sub_1000164E0(v42, "resultWithCompletion:");
    sub_10000858C();
    return _swift_continuation_await(v62);
  }
}

uint64_t sub_100094760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100098038();
  sub_10001660C();
  uint64_t v13 = (_OWORD *)(v12 + 504);
  uint64_t v14 = *(void **)(v12 + 1032);
  swift_willThrow();
  swift_errorRelease();

  uint64_t v15 = *(void *)(v12 + 1024);
  uint64_t v16 = *(void *)(v12 + 1016);
  swift_bridgeObjectRetain();
  unint64_t v17 = sub_10001169C(v16, v15);
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  if (v19)
  {
    char v20 = sub_100098074();
    a9 = v19;
    Swift::Int v21 = *(void *)(v19 + 24);
    sub_100011D80(&qword_100130070);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(v20, v21);
    uint64_t v22 = v19;
    swift_bridgeObjectRelease();
    sub_10000D5F4((_OWORD *)(*(void *)(v19 + 56) + 32 * v17), (_OWORD *)(v12 + 504));
    sub_1000981B8();
    _NativeDictionary._delete(at:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    *uint64_t v13 = 0u;
    *(_OWORD *)(v12 + 520) = 0u;
    uint64_t v22 = *(void *)(v12 + 1000);
  }
  uint64_t v23 = *(void *)(v12 + 1024);
  uint64_t v24 = *(void *)(v12 + 1016);
  sub_1000186E8(v24, v23, 0);
  sub_10000EB44(v12 + 504, &qword_10012EFB0);
  sub_100012154(v24, v23, 0);
  if (v26)
  {
    swift_bridgeObjectRelease();
    Dictionary._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    sub_10000B348();
    return v29(v27, v28, v29, v30, v31, v32, v33, v34, a9, a10, a11, a12);
  }
  else
  {
    *(void *)(v12 + 100_Block_object_dispose(&a9, 8) = v25;
    *(void *)(v12 + 1000) = v22;
    uint64_t v36 = *(void *)(v12 + 976) + 24 * v25;
    *(void *)(v12 + 1016) = *(void *)(v36 + 32);
    uint64_t v37 = *(void *)(v36 + 40);
    *(void *)(v12 + 1024) = v37;
    switch(*(unsigned char *)(v36 + 48))
    {
      case 1:
        uint64_t v45 = sub_100098360();
        sub_100005AF8(v45, v37, 1u);
        NSString v46 = sub_1000161DC();
        id v47 = sub_1000981C4((uint64_t)v46, "BOOLForKey:");

        id v42 = [v47 valuePromise];
        *(void *)(v12 + 104_Block_object_dispose(&a9, 8) = v42;

        sub_10000F8F0();
        *(void *)(v12 + 16) = v48;
        *(void *)(v12 + 56) = v13;
        *(void *)(v12 + 24) = sub_1000907FC;
        *(void *)(v12 + 496) = sub_100016880();
        *(void *)(v12 + 464) = _NSConcreteStackBlock;
        *(void *)(v12 + 472) = 0x40000000;
        NSString v44 = &unk_100115A40;
        break;
      case 2:
        uint64_t v49 = sub_100098348();
        sub_100005AF8(v49, v37, 2u);
        NSString v50 = sub_1000161DC();
        id v51 = sub_1000981C4((uint64_t)v50, "doubleForKey:");

        id v42 = [v51 valuePromise];
        *(void *)(v12 + 1064) = v42;

        sub_10000F8F0();
        *(void *)(v12 + 272) = v52;
        *(void *)(v12 + 312) = v13;
        *(void *)(v12 + 280) = sub_1000908D8;
        *(void *)(v12 + 496) = sub_100016880();
        *(void *)(v12 + 464) = _NSConcreteStackBlock;
        *(void *)(v12 + 472) = 0x40000000;
        NSString v44 = &unk_100115A28;
        break;
      case 3:
        uint64_t v53 = sub_100098330();
        sub_100005AF8(v53, v37, 3u);
        NSString v54 = sub_1000161DC();
        id v55 = sub_1000981C4((uint64_t)v54, "integerForKey:");

        id v42 = [v55 valuePromise];
        *(void *)(v12 + 1080) = v42;

        sub_10000F8F0();
        *(void *)(v12 + 400) = v56;
        *(void *)(v12 + 440) = v13;
        *(void *)(v12 + 40_Block_object_dispose(&a9, 8) = sub_1000909B4;
        *(void *)(v12 + 496) = sub_100016880();
        *(void *)(v12 + 464) = _NSConcreteStackBlock;
        *(void *)(v12 + 472) = 0x40000000;
        NSString v44 = &unk_100115A10;
        break;
      case 4:
        uint64_t v57 = sub_100098318();
        sub_100005AF8(v57, v37, 4u);
        NSString v58 = sub_1000161DC();
        id v59 = sub_1000981C4((uint64_t)v58, "stringForKey:");

        id v42 = [v59 valuePromise];
        *(void *)(v12 + 1096) = v42;

        sub_10000F8F0();
        *(void *)(v12 + 144) = v60;
        *(void *)(v12 + 184) = v13;
        *(void *)(v12 + 152) = sub_100090A90;
        *(void *)(v12 + 496) = sub_100016880();
        *(void *)(v12 + 464) = _NSConcreteStackBlock;
        *(void *)(v12 + 472) = 0x40000000;
        NSString v44 = &unk_1001159F8;
        break;
      case 5:
        uint64_t v61 = sub_100098300();
        sub_100005AF8(v61, v37, 5u);
        NSString v62 = sub_1000161DC();
        id v63 = sub_1000981C4((uint64_t)v62, "URLForKey:");

        id v42 = [v63 valuePromise];
        *(void *)(v12 + 1112) = v42;

        sub_10000F8F0();
        *(void *)(v12 + 336) = v64;
        *(void *)(v12 + 376) = v13;
        *(void *)(v12 + 344) = sub_100090B6C;
        *(void *)(v12 + 496) = sub_100016880();
        *(void *)(v12 + 464) = _NSConcreteStackBlock;
        *(void *)(v12 + 472) = 0x40000000;
        NSString v44 = &unk_1001159E0;
        break;
      case 6:
        uint64_t v65 = sub_1000982E8();
        sub_100005AF8(v65, v37, 6u);
        NSString v66 = sub_1000161DC();
        id v67 = sub_1000981C4((uint64_t)v66, "dictionaryForKey:");

        id v42 = [v67 valuePromise];
        *(void *)(v12 + 112_Block_object_dispose(&a9, 8) = v42;

        sub_10000F8F0();
        *(void *)(v12 + 80) = v68;
        *(void *)(v12 + 120) = v13;
        *(void *)(v12 + 8_Block_object_dispose(&a9, 8) = sub_100090C48;
        *(void *)(v12 + 496) = sub_100016880();
        *(void *)(v12 + 464) = _NSConcreteStackBlock;
        *(void *)(v12 + 472) = 0x40000000;
        NSString v44 = &unk_1001159C8;
        break;
      default:
        uint64_t v38 = sub_1000981B8();
        sub_100005AF8(v38, v39, 0);
        NSString v40 = sub_1000161DC();
        id v41 = sub_1000981C4((uint64_t)v40, "arrayForKey:");

        id v42 = [v41 valuePromise];
        *(void *)(v12 + 1032) = v42;

        sub_10000F8F0();
        *(void *)(v12 + 20_Block_object_dispose(&a9, 8) = v43;
        *(void *)(v12 + 24_Block_object_dispose(&a9, 8) = v13;
        *(void *)(v12 + 216) = sub_100090720;
        *(void *)(v12 + 496) = sub_100016880();
        *(void *)(v12 + 464) = _NSConcreteStackBlock;
        *(void *)(v12 + 472) = 0x40000000;
        NSString v44 = &unk_100115A58;
        break;
    }
    *(void *)(v12 + 480) = sub_10008FFC0;
    *(void *)(v12 + 48_Block_object_dispose(&a9, 8) = v44;
    [v42 resultWithCompletion:v12 + 464];
    sub_10000B348();
    return _swift_continuation_await(v69);
  }
}

uint64_t sub_100094F24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100098038();
  sub_10001660C();
  uint64_t v13 = v12[132];
  uint64_t v14 = (void *)v12[131];
  swift_willThrow();
  swift_errorRelease();

  sub_100098054();
  sub_100098160();
  sub_1000162C4();
  if (v13)
  {
    sub_100098074();
    sub_100016920();
    sub_100011D80(&qword_100130070);
    sub_100008650();
    sub_100016A80();
    sub_100011FE8();
    sub_10000BD74();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000122C4();
  }
  sub_100009C88();
  sub_10000EB44((uint64_t)(v12 + 58), &qword_10012EFB0);
  sub_100012154((uint64_t)v14, v13, 1u);
  if (v16)
  {
    swift_bridgeObjectRelease();
    Dictionary._bridgeToObjectiveC()();
    sub_100016530();
    sub_10000B1B0();
    sub_10000B348();
    return v19(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12);
  }
  else
  {
    sub_10000C01C(v15);
    switch(v26)
    {
      case 1:
        sub_100010D74(v13, v13, 1u);
        NSString v32 = sub_10000D3BC();
        id v33 = sub_10000A4F0((uint64_t)v32, "BOOLForKey:");

        sub_1000163E4((uint64_t)[v33 valuePromise]);
        sub_10000F794();
        _OWORD v12[2] = v34;
        v12[7] = &type metadata for Any;
        void v12[3] = sub_1000907FC;
        uint64_t v30 = sub_100008400();
        v12[62] = v30;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        uint64_t v31 = &unk_100115A40;
        break;
      case 2:
        sub_100010D74(v13, v13, 2u);
        NSString v35 = sub_10000D3BC();
        id v36 = sub_10000A4F0((uint64_t)v35, "doubleForKey:");

        sub_1000980E8((uint64_t)[v36 valuePromise]);
        sub_10000F794();
        v12[34] = v37;
        v12[39] = &type metadata for Any;
        v12[35] = sub_1000908D8;
        uint64_t v30 = sub_100008400();
        v12[62] = v30;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        uint64_t v31 = &unk_100115A28;
        break;
      case 3:
        sub_100010D74(v13, v13, 3u);
        NSString v38 = sub_10000D3BC();
        id v39 = sub_10000A4F0((uint64_t)v38, "integerForKey:");

        sub_100098130((uint64_t)[v39 valuePromise]);
        sub_10000F794();
        v12[50] = v40;
        v12[55] = &type metadata for Any;
        v12[51] = sub_1000909B4;
        uint64_t v30 = sub_100008400();
        v12[62] = v30;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        uint64_t v31 = &unk_100115A10;
        break;
      case 4:
        sub_100010D74(v13, v13, 4u);
        NSString v41 = sub_10000D3BC();
        id v42 = sub_10000A4F0((uint64_t)v41, "stringForKey:");

        sub_100005ABC((uint64_t)[v42 valuePromise]);
        sub_10000F794();
        v12[18] = v43;
        v12[23] = &type metadata for Any;
        v12[19] = sub_100090A90;
        uint64_t v30 = sub_100008400();
        v12[62] = v30;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        uint64_t v31 = &unk_1001159F8;
        break;
      case 5:
        sub_100010D74(v13, v13, 5u);
        NSString v44 = sub_10000D3BC();
        id v45 = sub_10000A4F0((uint64_t)v44, "URLForKey:");

        sub_100016378((uint64_t)[v45 valuePromise]);
        sub_10000F794();
        v12[42] = v46;
        v12[47] = &type metadata for Any;
        v12[43] = sub_100090B6C;
        uint64_t v30 = sub_100008400();
        v12[62] = v30;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        uint64_t v31 = &unk_1001159E0;
        break;
      case 6:
        sub_100010D74(v13, v13, 6u);
        NSString v47 = sub_10000D3BC();
        id v48 = sub_10000A4F0((uint64_t)v47, "dictionaryForKey:");

        sub_100098100((uint64_t)[v48 valuePromise]);
        sub_10000F794();
        v12[10] = v49;
        v12[15] = &type metadata for Any;
        v12[11] = sub_100090C48;
        uint64_t v30 = sub_100008400();
        v12[62] = v30;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        uint64_t v31 = &unk_1001159C8;
        break;
      default:
        sub_100010D74(v13, v13, 0);
        NSString v27 = sub_10000D3BC();
        id v28 = sub_10000A4F0((uint64_t)v27, "arrayForKey:");

        sub_100098118((uint64_t)[v28 valuePromise]);
        sub_10000F794();
        v12[26] = v29;
        v12[31] = &type metadata for Any;
        v12[27] = sub_100090720;
        uint64_t v30 = sub_100008400();
        v12[62] = v30;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        uint64_t v31 = &unk_100115A58;
        break;
    }
    v12[60] = sub_10008FFC0;
    v12[61] = v31;
    sub_1000164E0(v30, "resultWithCompletion:");
    sub_10000B348();
    return _swift_continuation_await(v50);
  }
}

uint64_t sub_100095654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100098038();
  sub_10001660C();
  uint64_t v13 = v12[134];
  uint64_t v14 = (void *)v12[133];
  swift_willThrow();
  swift_errorRelease();

  sub_100098054();
  sub_100098160();
  sub_1000162C4();
  if (v13)
  {
    sub_100098074();
    sub_100016920();
    sub_100011D80(&qword_100130070);
    sub_100008650();
    sub_100016A80();
    sub_100011FE8();
    sub_10000BD74();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000122C4();
  }
  sub_100016098();
  sub_10000EB44((uint64_t)(v12 + 58), &qword_10012EFB0);
  sub_100012154((uint64_t)v14, v13, 2u);
  if (v16)
  {
    swift_bridgeObjectRelease();
    Dictionary._bridgeToObjectiveC()();
    sub_100016530();
    sub_10000B1B0();
    sub_10000B348();
    return v19(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12);
  }
  else
  {
    sub_10000C01C(v15);
    switch(v26)
    {
      case 1:
        sub_100010D74(v13, v13, 1u);
        NSString v32 = sub_10000D3BC();
        id v33 = sub_10000A4F0((uint64_t)v32, "BOOLForKey:");

        sub_1000163E4((uint64_t)[v33 valuePromise]);
        sub_10000F794();
        _OWORD v12[2] = v34;
        v12[7] = &type metadata for Any;
        void v12[3] = sub_1000907FC;
        uint64_t v30 = sub_100008400();
        v12[62] = v30;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        uint64_t v31 = &unk_100115A40;
        break;
      case 2:
        sub_100010D74(v13, v13, 2u);
        NSString v35 = sub_10000D3BC();
        id v36 = sub_10000A4F0((uint64_t)v35, "doubleForKey:");

        sub_1000980E8((uint64_t)[v36 valuePromise]);
        sub_10000F794();
        v12[34] = v37;
        v12[39] = &type metadata for Any;
        v12[35] = sub_1000908D8;
        uint64_t v30 = sub_100008400();
        v12[62] = v30;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        uint64_t v31 = &unk_100115A28;
        break;
      case 3:
        sub_100010D74(v13, v13, 3u);
        NSString v38 = sub_10000D3BC();
        id v39 = sub_10000A4F0((uint64_t)v38, "integerForKey:");

        sub_100098130((uint64_t)[v39 valuePromise]);
        sub_10000F794();
        v12[50] = v40;
        v12[55] = &type metadata for Any;
        v12[51] = sub_1000909B4;
        uint64_t v30 = sub_100008400();
        v12[62] = v30;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        uint64_t v31 = &unk_100115A10;
        break;
      case 4:
        sub_100010D74(v13, v13, 4u);
        NSString v41 = sub_10000D3BC();
        id v42 = sub_10000A4F0((uint64_t)v41, "stringForKey:");

        sub_100005ABC((uint64_t)[v42 valuePromise]);
        sub_10000F794();
        v12[18] = v43;
        v12[23] = &type metadata for Any;
        v12[19] = sub_100090A90;
        uint64_t v30 = sub_100008400();
        v12[62] = v30;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        uint64_t v31 = &unk_1001159F8;
        break;
      case 5:
        sub_100010D74(v13, v13, 5u);
        NSString v44 = sub_10000D3BC();
        id v45 = sub_10000A4F0((uint64_t)v44, "URLForKey:");

        sub_100016378((uint64_t)[v45 valuePromise]);
        sub_10000F794();
        v12[42] = v46;
        v12[47] = &type metadata for Any;
        v12[43] = sub_100090B6C;
        uint64_t v30 = sub_100008400();
        v12[62] = v30;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        uint64_t v31 = &unk_1001159E0;
        break;
      case 6:
        sub_100010D74(v13, v13, 6u);
        NSString v47 = sub_10000D3BC();
        id v48 = sub_10000A4F0((uint64_t)v47, "dictionaryForKey:");

        sub_100098100((uint64_t)[v48 valuePromise]);
        sub_10000F794();
        v12[10] = v49;
        v12[15] = &type metadata for Any;
        v12[11] = sub_100090C48;
        uint64_t v30 = sub_100008400();
        v12[62] = v30;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        uint64_t v31 = &unk_1001159C8;
        break;
      default:
        sub_100010D74(v13, v13, 0);
        NSString v27 = sub_10000D3BC();
        id v28 = sub_10000A4F0((uint64_t)v27, "arrayForKey:");

        sub_100098118((uint64_t)[v28 valuePromise]);
        sub_10000F794();
        v12[26] = v29;
        v12[31] = &type metadata for Any;
        v12[27] = sub_100090720;
        uint64_t v30 = sub_100008400();
        v12[62] = v30;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        uint64_t v31 = &unk_100115A58;
        break;
    }
    v12[60] = sub_10008FFC0;
    v12[61] = v31;
    sub_1000164E0(v30, "resultWithCompletion:");
    sub_10000B348();
    return _swift_continuation_await(v50);
  }
}

uint64_t sub_100095D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100098038();
  sub_10001660C();
  uint64_t v13 = v12[136];
  uint64_t v14 = (void *)v12[135];
  swift_willThrow();
  swift_errorRelease();

  sub_100098054();
  sub_100098160();
  sub_1000162C4();
  if (v13)
  {
    sub_100098074();
    sub_100016920();
    sub_100011D80(&qword_100130070);
    sub_100008650();
    sub_100016A80();
    sub_100011FE8();
    sub_10000BD74();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000122C4();
  }
  sub_100098260();
  sub_10000EB44((uint64_t)(v12 + 58), &qword_10012EFB0);
  sub_100012154((uint64_t)v14, v13, 3u);
  if (v16)
  {
    swift_bridgeObjectRelease();
    Dictionary._bridgeToObjectiveC()();
    sub_100016530();
    sub_10000B1B0();
    sub_10000B348();
    return v19(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12);
  }
  else
  {
    sub_10000C01C(v15);
    switch(v26)
    {
      case 1:
        sub_100010D74(v13, v13, 1u);
        NSString v32 = sub_10000D3BC();
        id v33 = sub_10000A4F0((uint64_t)v32, "BOOLForKey:");

        sub_1000163E4((uint64_t)[v33 valuePromise]);
        sub_10000F794();
        _OWORD v12[2] = v34;
        v12[7] = &type metadata for Any;
        void v12[3] = sub_1000907FC;
        uint64_t v30 = sub_100008400();
        v12[62] = v30;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        uint64_t v31 = &unk_100115A40;
        break;
      case 2:
        sub_100010D74(v13, v13, 2u);
        NSString v35 = sub_10000D3BC();
        id v36 = sub_10000A4F0((uint64_t)v35, "doubleForKey:");

        sub_1000980E8((uint64_t)[v36 valuePromise]);
        sub_10000F794();
        v12[34] = v37;
        v12[39] = &type metadata for Any;
        v12[35] = sub_1000908D8;
        uint64_t v30 = sub_100008400();
        v12[62] = v30;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        uint64_t v31 = &unk_100115A28;
        break;
      case 3:
        sub_100010D74(v13, v13, 3u);
        NSString v38 = sub_10000D3BC();
        id v39 = sub_10000A4F0((uint64_t)v38, "integerForKey:");

        sub_100098130((uint64_t)[v39 valuePromise]);
        sub_10000F794();
        v12[50] = v40;
        v12[55] = &type metadata for Any;
        v12[51] = sub_1000909B4;
        uint64_t v30 = sub_100008400();
        v12[62] = v30;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        uint64_t v31 = &unk_100115A10;
        break;
      case 4:
        sub_100010D74(v13, v13, 4u);
        NSString v41 = sub_10000D3BC();
        id v42 = sub_10000A4F0((uint64_t)v41, "stringForKey:");

        sub_100005ABC((uint64_t)[v42 valuePromise]);
        sub_10000F794();
        v12[18] = v43;
        v12[23] = &type metadata for Any;
        v12[19] = sub_100090A90;
        uint64_t v30 = sub_100008400();
        v12[62] = v30;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        uint64_t v31 = &unk_1001159F8;
        break;
      case 5:
        sub_100010D74(v13, v13, 5u);
        NSString v44 = sub_10000D3BC();
        id v45 = sub_10000A4F0((uint64_t)v44, "URLForKey:");

        sub_100016378((uint64_t)[v45 valuePromise]);
        sub_10000F794();
        v12[42] = v46;
        v12[47] = &type metadata for Any;
        v12[43] = sub_100090B6C;
        uint64_t v30 = sub_100008400();
        v12[62] = v30;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        uint64_t v31 = &unk_1001159E0;
        break;
      case 6:
        sub_100010D74(v13, v13, 6u);
        NSString v47 = sub_10000D3BC();
        id v48 = sub_10000A4F0((uint64_t)v47, "dictionaryForKey:");

        sub_100098100((uint64_t)[v48 valuePromise]);
        sub_10000F794();
        v12[10] = v49;
        v12[15] = &type metadata for Any;
        v12[11] = sub_100090C48;
        uint64_t v30 = sub_100008400();
        v12[62] = v30;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        uint64_t v31 = &unk_1001159C8;
        break;
      default:
        sub_100010D74(v13, v13, 0);
        NSString v27 = sub_10000D3BC();
        id v28 = sub_10000A4F0((uint64_t)v27, "arrayForKey:");

        sub_100098118((uint64_t)[v28 valuePromise]);
        sub_10000F794();
        v12[26] = v29;
        v12[31] = &type metadata for Any;
        v12[27] = sub_100090720;
        uint64_t v30 = sub_100008400();
        v12[62] = v30;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        uint64_t v31 = &unk_100115A58;
        break;
    }
    v12[60] = sub_10008FFC0;
    v12[61] = v31;
    sub_1000164E0(v30, "resultWithCompletion:");
    sub_10000B348();
    return _swift_continuation_await(v50);
  }
}

uint64_t sub_1000964B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100098038();
  sub_10001660C();
  uint64_t v13 = v12[138];
  uint64_t v14 = (void *)v12[137];
  swift_willThrow();
  swift_errorRelease();

  sub_100098054();
  sub_100098160();
  sub_1000162C4();
  if (v13)
  {
    sub_100098074();
    sub_100016920();
    sub_100011D80(&qword_100130070);
    sub_100008650();
    sub_100016A80();
    sub_100011FE8();
    sub_10000BD74();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000122C4();
  }
  sub_100098284();
  sub_10000EB44((uint64_t)(v12 + 58), &qword_10012EFB0);
  sub_100012154((uint64_t)v14, v13, 4u);
  if (v16)
  {
    swift_bridgeObjectRelease();
    Dictionary._bridgeToObjectiveC()();
    sub_100016530();
    sub_10000B1B0();
    sub_10000B348();
    return v19(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12);
  }
  else
  {
    sub_10000C01C(v15);
    switch(v26)
    {
      case 1:
        sub_100010D74(v13, v13, 1u);
        NSString v32 = sub_10000D3BC();
        id v33 = sub_10000A4F0((uint64_t)v32, "BOOLForKey:");

        sub_1000163E4((uint64_t)[v33 valuePromise]);
        sub_10000F794();
        _OWORD v12[2] = v34;
        v12[7] = &type metadata for Any;
        void v12[3] = sub_1000907FC;
        uint64_t v30 = sub_100008400();
        v12[62] = v30;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        uint64_t v31 = &unk_100115A40;
        break;
      case 2:
        sub_100010D74(v13, v13, 2u);
        NSString v35 = sub_10000D3BC();
        id v36 = sub_10000A4F0((uint64_t)v35, "doubleForKey:");

        sub_1000980E8((uint64_t)[v36 valuePromise]);
        sub_10000F794();
        v12[34] = v37;
        v12[39] = &type metadata for Any;
        v12[35] = sub_1000908D8;
        uint64_t v30 = sub_100008400();
        v12[62] = v30;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        uint64_t v31 = &unk_100115A28;
        break;
      case 3:
        sub_100010D74(v13, v13, 3u);
        NSString v38 = sub_10000D3BC();
        id v39 = sub_10000A4F0((uint64_t)v38, "integerForKey:");

        sub_100098130((uint64_t)[v39 valuePromise]);
        sub_10000F794();
        v12[50] = v40;
        v12[55] = &type metadata for Any;
        v12[51] = sub_1000909B4;
        uint64_t v30 = sub_100008400();
        v12[62] = v30;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        uint64_t v31 = &unk_100115A10;
        break;
      case 4:
        sub_100010D74(v13, v13, 4u);
        NSString v41 = sub_10000D3BC();
        id v42 = sub_10000A4F0((uint64_t)v41, "stringForKey:");

        sub_100005ABC((uint64_t)[v42 valuePromise]);
        sub_10000F794();
        v12[18] = v43;
        v12[23] = &type metadata for Any;
        v12[19] = sub_100090A90;
        uint64_t v30 = sub_100008400();
        v12[62] = v30;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        uint64_t v31 = &unk_1001159F8;
        break;
      case 5:
        sub_100010D74(v13, v13, 5u);
        NSString v44 = sub_10000D3BC();
        id v45 = sub_10000A4F0((uint64_t)v44, "URLForKey:");

        sub_100016378((uint64_t)[v45 valuePromise]);
        sub_10000F794();
        v12[42] = v46;
        v12[47] = &type metadata for Any;
        v12[43] = sub_100090B6C;
        uint64_t v30 = sub_100008400();
        v12[62] = v30;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        uint64_t v31 = &unk_1001159E0;
        break;
      case 6:
        sub_100010D74(v13, v13, 6u);
        NSString v47 = sub_10000D3BC();
        id v48 = sub_10000A4F0((uint64_t)v47, "dictionaryForKey:");

        sub_100098100((uint64_t)[v48 valuePromise]);
        sub_10000F794();
        v12[10] = v49;
        v12[15] = &type metadata for Any;
        v12[11] = sub_100090C48;
        uint64_t v30 = sub_100008400();
        v12[62] = v30;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        uint64_t v31 = &unk_1001159C8;
        break;
      default:
        sub_100010D74(v13, v13, 0);
        NSString v27 = sub_10000D3BC();
        id v28 = sub_10000A4F0((uint64_t)v27, "arrayForKey:");

        sub_100098118((uint64_t)[v28 valuePromise]);
        sub_10000F794();
        v12[26] = v29;
        v12[31] = &type metadata for Any;
        v12[27] = sub_100090720;
        uint64_t v30 = sub_100008400();
        v12[62] = v30;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        uint64_t v31 = &unk_100115A58;
        break;
    }
    v12[60] = sub_10008FFC0;
    v12[61] = v31;
    sub_1000164E0(v30, "resultWithCompletion:");
    sub_10000B348();
    return _swift_continuation_await(v50);
  }
}

uint64_t sub_100096BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100098038();
  sub_10001660C();
  uint64_t v13 = v12[140];
  uint64_t v14 = (void *)v12[139];
  swift_willThrow();
  swift_errorRelease();

  sub_100098054();
  sub_100098160();
  sub_1000162C4();
  if (v13)
  {
    sub_100098074();
    sub_100016920();
    sub_100011D80(&qword_100130070);
    sub_100008650();
    sub_100016A80();
    sub_100011FE8();
    sub_10000BD74();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000122C4();
  }
  uint64_t v15 = v12[128];
  uint64_t v16 = v12[127];
  sub_1000186E8(v16, v15, 5u);
  sub_10000EB44((uint64_t)(v12 + 58), &qword_10012EFB0);
  sub_100012154(v16, v15, 5u);
  if (v18)
  {
    swift_bridgeObjectRelease();
    Dictionary._bridgeToObjectiveC()();
    sub_100016530();
    sub_10000B1B0();
    sub_10000B348();
    return v21(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10, a11, a12);
  }
  else
  {
    sub_10000C01C(v17);
    switch(v28)
    {
      case 1:
        sub_100010D74(v15, v13, 1u);
        NSString v34 = sub_10000D3BC();
        id v35 = sub_10000A4F0((uint64_t)v34, "BOOLForKey:");

        sub_1000163E4((uint64_t)[v35 valuePromise]);
        sub_10000F794();
        _OWORD v12[2] = v36;
        v12[7] = &type metadata for Any;
        void v12[3] = sub_1000907FC;
        uint64_t v32 = sub_100008400();
        v12[62] = v32;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        id v33 = &unk_100115A40;
        break;
      case 2:
        sub_100010D74(v15, v13, 2u);
        NSString v37 = sub_10000D3BC();
        id v38 = sub_10000A4F0((uint64_t)v37, "doubleForKey:");

        sub_1000980E8((uint64_t)[v38 valuePromise]);
        sub_10000F794();
        v12[34] = v39;
        v12[39] = &type metadata for Any;
        v12[35] = sub_1000908D8;
        uint64_t v32 = sub_100008400();
        v12[62] = v32;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        id v33 = &unk_100115A28;
        break;
      case 3:
        sub_100010D74(v15, v13, 3u);
        NSString v40 = sub_10000D3BC();
        id v41 = sub_10000A4F0((uint64_t)v40, "integerForKey:");

        sub_100098130((uint64_t)[v41 valuePromise]);
        sub_10000F794();
        v12[50] = v42;
        v12[55] = &type metadata for Any;
        v12[51] = sub_1000909B4;
        uint64_t v32 = sub_100008400();
        v12[62] = v32;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        id v33 = &unk_100115A10;
        break;
      case 4:
        sub_100010D74(v15, v13, 4u);
        NSString v43 = sub_10000D3BC();
        id v44 = sub_10000A4F0((uint64_t)v43, "stringForKey:");

        sub_100005ABC((uint64_t)[v44 valuePromise]);
        sub_10000F794();
        v12[18] = v45;
        v12[23] = &type metadata for Any;
        v12[19] = sub_100090A90;
        uint64_t v32 = sub_100008400();
        v12[62] = v32;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        id v33 = &unk_1001159F8;
        break;
      case 5:
        sub_100010D74(v15, v13, 5u);
        NSString v46 = sub_10000D3BC();
        id v47 = sub_10000A4F0((uint64_t)v46, "URLForKey:");

        sub_100016378((uint64_t)[v47 valuePromise]);
        sub_10000F794();
        v12[42] = v48;
        v12[47] = &type metadata for Any;
        v12[43] = sub_100090B6C;
        uint64_t v32 = sub_100008400();
        v12[62] = v32;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        id v33 = &unk_1001159E0;
        break;
      case 6:
        sub_100010D74(v15, v13, 6u);
        NSString v49 = sub_10000D3BC();
        id v50 = sub_10000A4F0((uint64_t)v49, "dictionaryForKey:");

        sub_100098100((uint64_t)[v50 valuePromise]);
        sub_10000F794();
        v12[10] = v51;
        v12[15] = &type metadata for Any;
        v12[11] = sub_100090C48;
        uint64_t v32 = sub_100008400();
        v12[62] = v32;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        id v33 = &unk_1001159C8;
        break;
      default:
        sub_100010D74(v15, v13, 0);
        NSString v29 = sub_10000D3BC();
        id v30 = sub_10000A4F0((uint64_t)v29, "arrayForKey:");

        sub_100098118((uint64_t)[v30 valuePromise]);
        sub_10000F794();
        v12[26] = v31;
        v12[31] = &type metadata for Any;
        v12[27] = sub_100090720;
        uint64_t v32 = sub_100008400();
        v12[62] = v32;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        id v33 = &unk_100115A58;
        break;
    }
    v12[60] = sub_10008FFC0;
    v12[61] = v33;
    sub_1000164E0(v32, "resultWithCompletion:");
    sub_10000B348();
    return _swift_continuation_await(v52);
  }
}

uint64_t sub_100097328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100098038();
  sub_10001660C();
  uint64_t v13 = v12[142];
  uint64_t v14 = (void *)v12[141];
  swift_willThrow();
  swift_errorRelease();

  sub_100098054();
  sub_100098160();
  sub_1000162C4();
  if (v13)
  {
    sub_100098074();
    sub_100016920();
    sub_100011D80(&qword_100130070);
    sub_100008650();
    sub_100016A80();
    sub_100011FE8();
    sub_10000BD74();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000122C4();
  }
  sub_10000F978();
  sub_10000EB44((uint64_t)(v12 + 58), &qword_10012EFB0);
  sub_100012154((uint64_t)v14, v13, 6u);
  if (v16)
  {
    swift_bridgeObjectRelease();
    Dictionary._bridgeToObjectiveC()();
    sub_100016530();
    sub_10000B1B0();
    sub_10000B348();
    return v19(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12);
  }
  else
  {
    sub_10000C01C(v15);
    switch(v26)
    {
      case 1:
        sub_100010D74(v13, v13, 1u);
        NSString v32 = sub_10000D3BC();
        id v33 = sub_10000A4F0((uint64_t)v32, "BOOLForKey:");

        sub_1000163E4((uint64_t)[v33 valuePromise]);
        sub_10000F794();
        _OWORD v12[2] = v34;
        v12[7] = &type metadata for Any;
        void v12[3] = sub_1000907FC;
        uint64_t v30 = sub_100008400();
        v12[62] = v30;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        uint64_t v31 = &unk_100115A40;
        break;
      case 2:
        sub_100010D74(v13, v13, 2u);
        NSString v35 = sub_10000D3BC();
        id v36 = sub_10000A4F0((uint64_t)v35, "doubleForKey:");

        sub_1000980E8((uint64_t)[v36 valuePromise]);
        sub_10000F794();
        v12[34] = v37;
        v12[39] = &type metadata for Any;
        v12[35] = sub_1000908D8;
        uint64_t v30 = sub_100008400();
        v12[62] = v30;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        uint64_t v31 = &unk_100115A28;
        break;
      case 3:
        sub_100010D74(v13, v13, 3u);
        NSString v38 = sub_10000D3BC();
        id v39 = sub_10000A4F0((uint64_t)v38, "integerForKey:");

        sub_100098130((uint64_t)[v39 valuePromise]);
        sub_10000F794();
        v12[50] = v40;
        v12[55] = &type metadata for Any;
        v12[51] = sub_1000909B4;
        uint64_t v30 = sub_100008400();
        v12[62] = v30;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        uint64_t v31 = &unk_100115A10;
        break;
      case 4:
        sub_100010D74(v13, v13, 4u);
        NSString v41 = sub_10000D3BC();
        id v42 = sub_10000A4F0((uint64_t)v41, "stringForKey:");

        sub_100005ABC((uint64_t)[v42 valuePromise]);
        sub_10000F794();
        v12[18] = v43;
        v12[23] = &type metadata for Any;
        v12[19] = sub_100090A90;
        uint64_t v30 = sub_100008400();
        v12[62] = v30;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        uint64_t v31 = &unk_1001159F8;
        break;
      case 5:
        sub_100010D74(v13, v13, 5u);
        NSString v44 = sub_10000D3BC();
        id v45 = sub_10000A4F0((uint64_t)v44, "URLForKey:");

        sub_100016378((uint64_t)[v45 valuePromise]);
        sub_10000F794();
        v12[42] = v46;
        v12[47] = &type metadata for Any;
        v12[43] = sub_100090B6C;
        uint64_t v30 = sub_100008400();
        v12[62] = v30;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        uint64_t v31 = &unk_1001159E0;
        break;
      case 6:
        sub_100010D74(v13, v13, 6u);
        NSString v47 = sub_10000D3BC();
        id v48 = sub_10000A4F0((uint64_t)v47, "dictionaryForKey:");

        sub_100098100((uint64_t)[v48 valuePromise]);
        sub_10000F794();
        v12[10] = v49;
        v12[15] = &type metadata for Any;
        v12[11] = sub_100090C48;
        uint64_t v30 = sub_100008400();
        v12[62] = v30;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        uint64_t v31 = &unk_1001159C8;
        break;
      default:
        sub_100010D74(v13, v13, 0);
        NSString v27 = sub_10000D3BC();
        id v28 = sub_10000A4F0((uint64_t)v27, "arrayForKey:");

        sub_100098118((uint64_t)[v28 valuePromise]);
        sub_10000F794();
        v12[26] = v29;
        v12[31] = &type metadata for Any;
        v12[27] = sub_100090720;
        uint64_t v30 = sub_100008400();
        v12[62] = v30;
        v12[58] = _NSConcreteStackBlock;
        v12[59] = 0x40000000;
        uint64_t v31 = &unk_100115A58;
        break;
    }
    v12[60] = sub_10008FFC0;
    v12[61] = v31;
    sub_1000164E0(v30, "resultWithCompletion:");
    sub_10000B348();
    return _swift_continuation_await(v50);
  }
}

uint64_t sub_100097A58(uint64_t a1, void *a2, void *a3, uint64_t (*a4)(uint64_t, id), uint64_t (*a5)(uint64_t, id))
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (a3)
  {
    id v6 = a3;
    uint64_t v7 = v5;
    uint64_t v8 = a4;
  }
  else
  {
    if (!a2)
    {
      __break(1u);
      JUMPOUT(0x100097AECLL);
    }
    id v6 = a2;
    uint64_t v7 = v5;
    uint64_t v8 = a5;
  }
  return v8(v7, v6);
}

uint64_t sub_100097B08()
{
  sub_100008308();
  sub_1000082E0();
  sub_10000FB6C();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 192) = *(void *)(v3 + 48);
  sub_10000F9E8();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_100097C10()
{
  sub_10001660C();
  uint64_t v1 = *(void **)(v0 + 136);
  static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();

  [*(id *)(v0 + 152) removeObserverWithToken:*(void *)(v0 + 128)];
  uint64_t v2 = *(void **)(v0 + 160);
  uint64_t v3 = (void *)sub_1000981B8();
  sub_100010E34(v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_release();

  swift_bridgeObjectRelease();
  uint64_t v6 = *(uint64_t (**)(Class))(v0 + 8);
  return v6(v5.super.isa);
}

uint64_t sub_100097D6C()
{
  swift_willThrow();
  swift_errorRelease();
  uint64_t v1 = *(void *)(v0 + 184);
  [*(id *)(v0 + 152) removeObserverWithToken:*(void *)(v0 + 128)];
  uint64_t v2 = *(void **)(v0 + 160);
  sub_100010E34(*(void **)(v0 + 176), v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_release();

  swift_bridgeObjectRelease();
  uint64_t v4 = *(uint64_t (**)(Class))(v0 + 8);
  return v4(v3.super.isa);
}

void sub_100097E9C(uint64_t a1, void *a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  [a2 finishWithResult:isa];
}

uint64_t sub_100097F10()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100097F48(uint64_t a1)
{
  sub_100097E9C(a1, *(void **)(v1 + 16));
}

uint64_t sub_100097F50(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v1(v2);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100097FD4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100011D80(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100098054()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100098074()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

NSString sub_10009808C()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_1000980A4()
{
  return v0;
}

unint64_t sub_1000980B4()
{
  return sub_10001169C(v1, v0);
}

uint64_t sub_1000980CC()
{
  return v0;
}

void sub_1000980E8(uint64_t a1)
{
  *(void *)(v2 + 1064) = a1;
}

void sub_100098100(uint64_t a1)
{
  *(void *)(v2 + 112_Block_object_dispose(&a9, 8) = a1;
}

void sub_100098118(uint64_t a1)
{
  *(void *)(v2 + 1032) = a1;
}

void sub_100098130(uint64_t a1)
{
  *(void *)(v2 + 1080) = a1;
}

uint64_t sub_100098148()
{
  return _NativeDictionary._delete(at:)();
}

unint64_t sub_100098160()
{
  return sub_10001169C(v1, v0);
}

void sub_10009818C(uint64_t a1@<X8>)
{
  v2[126] = a1;
  v2[125] = v1;
  uint64_t v3 = v2[122] + 24 * a1;
  v2[127] = *(void *)(v3 + 32);
  v2[128] = *(void *)(v3 + 40);
}

uint64_t sub_1000981B8()
{
  return v0;
}

id sub_1000981C4(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t sub_1000981DC()
{
  return *(void *)(v0 + 1016);
}

id sub_1000981E8()
{
  sub_10000D5F4(v0, v1);
  return v2;
}

uint64_t sub_100098220@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 16) = a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100098244()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_100098260()
{
  uint64_t v2 = *(void *)(v0 + 1016);
  uint64_t v3 = *(void *)(v0 + 1024);
  return sub_1000186E8(v2, v3, 3u);
}

uint64_t sub_100098284()
{
  uint64_t v2 = *(void *)(v0 + 1016);
  uint64_t v3 = *(void *)(v0 + 1024);
  return sub_1000186E8(v2, v3, 4u);
}

uint64_t sub_1000982A8()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_1000982C0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  sub_1000186D0(a1, a2, a3);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000982E8()
{
  return v0;
}

uint64_t sub_100098300()
{
  return v0;
}

uint64_t sub_100098318()
{
  return v0;
}

uint64_t sub_100098330()
{
  return v0;
}

uint64_t sub_100098348()
{
  return v0;
}

uint64_t sub_100098360()
{
  return v0;
}

uint64_t sub_100098378()
{
  return swift_bridgeObjectRelease();
}

BOOL sub_100098398@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_1000983B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_1000186D0(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for BagValueType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_1000186D0(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_1000186E8(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for BagValueType(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for BagValueType(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_1000186E8(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for BagValueType(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFA && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 249;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 6) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BagValueType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 250;
    *(void *)(result + _Block_object_dispose(&a9, 8) = 0;
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100098534(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_10009853C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for BagValueType()
{
  return &type metadata for BagValueType;
}

void sub_100098554(char a1)
{
  switch(a1)
  {
    case 1:
    case 2:
    case 3:
    case 4:
      sub_1000159E0();
      break;
    default:
      return;
  }
}

unint64_t sub_10009860C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100114EF0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6) {
    return 6;
  }
  else {
    return v3;
  }
}

void sub_100098674()
{
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v0[1]);
  Hasher._combine(_:)(v0[2]);
  Hasher._combine(_:)(v0[3]);
  Hasher._combine(_:)(v0[4]);
  Hasher._combine(_:)(v0[5]);
}

BOOL sub_1000986C8(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 0x30uLL) == 0;
}

uint64_t sub_1000986EC()
{
  uint64_t v1 = sub_100011D80(&qword_10012F0B0);
  sub_10000BFC4();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  unsigned __int8 v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000085A8();
  sub_100018524();
  sub_10000B1C0();
  v8[15] = 0;
  sub_100010D9C();
  if (!v0)
  {
    v8[14] = 1;
    sub_100010D9C();
    v8[13] = 2;
    sub_100010D9C();
    v8[12] = 3;
    sub_100010D9C();
    v8[11] = 4;
    sub_100010D9C();
    v8[10] = 5;
    sub_100010D9C();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v3 + 8))(v6, v1);
}

Swift::Int sub_100098860()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v0[1]);
  Hasher._combine(_:)(v0[2]);
  Hasher._combine(_:)(v0[3]);
  Hasher._combine(_:)(v0[4]);
  Hasher._combine(_:)(v0[5]);
  return Hasher._finalize()();
}

uint64_t sub_1000988E4(char *a1, char *a2)
{
  return sub_1000BA0F8(*a1, *a2);
}

Swift::Int sub_1000988F0()
{
  return sub_10007A5AC(*v0);
}

uint64_t sub_1000988F8(uint64_t a1)
{
  return sub_1000BA308(a1, *v1);
}

Swift::Int sub_100098900(uint64_t a1)
{
  return sub_10007A748(a1, *v1);
}

unint64_t sub_100098908@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10009860C(*a1);
  *a2 = result;
  return result;
}

void sub_100098938(void *a1@<X8>)
{
  sub_100098554(*v1);
  *a1 = v3;
  a1[1] = v4;
}

uint64_t sub_100098964@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100098658(a1);
  *a2 = result;
  return result;
}

void sub_10009898C(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

void sub_100098998(void *a1@<X8>)
{
  *a1 = &off_100114EC8;
}

uint64_t sub_1000989A8(uint64_t a1)
{
  unint64_t v2 = sub_100018524();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000989E4(uint64_t a1)
{
  unint64_t v2 = sub_100018524();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100098A20()
{
  return sub_1000986EC();
}

Swift::Int sub_100098A40()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  Swift::UInt v4 = v0[3];
  Swift::UInt v5 = v0[4];
  Swift::UInt v6 = v0[5];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

BOOL sub_100098AE4(Swift::String a1)
{
  v1._rawValue = &off_100114FC8;
  return sub_100098E5C(a1, v1);
}

void sub_100098B04()
{
  sub_100012004();
  Hasher._combine(_:)(v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
}

uint64_t sub_100098B64(void *a1, void *a2)
{
  if (*a1 == *a2
    && (sub_10000A508((uint64_t)a1, (uint64_t)a2), (v4 & 1) != 0)
    && *(void *)(v2 + 40) == *(void *)(v3 + 40))
  {
    return sub_100008434();
  }
  else
  {
    return sub_1000167B0();
  }
}

uint64_t sub_100098B9C()
{
  sub_100011D80(&qword_10012F060);
  sub_10000BFC4();
  __chkstk_darwin(v0);
  sub_1000085A8();
  sub_100018448();
  sub_10000B1C0();
  sub_10000FC1C();
  sub_100099324();
  sub_100008760();
  uint64_t v1 = sub_100011F4C();
  return v2(v1);
}

Swift::Int sub_100098C78()
{
  Hasher.init(_seed:)();
  sub_1000166D4();
  Hasher._combine(_:)(v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

BOOL sub_100098D10@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_100114FC8;
  BOOL result = sub_100098E5C(*a1, v3);
  *a2 = result;
  return result;
}

void sub_100098D50(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

BOOL sub_100098D74@<W0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  BOOL result = sub_100098AE4(a1);
  *a2 = result;
  return result;
}

void sub_100098DA4(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void sub_100098DB0(void *a1@<X8>)
{
  *a1 = &off_100114FA0;
}

uint64_t sub_100098DC0(uint64_t a1)
{
  unint64_t v2 = sub_100018448();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100098DFC(uint64_t a1)
{
  unint64_t v2 = sub_100018448();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100098E38()
{
  return sub_100098B9C();
}

BOOL sub_100098E5C(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  return v5 != 0;
}

BOOL sub_100098EA0(Swift::String a1)
{
  v1._rawValue = &off_100115028;
  return sub_100098E5C(a1, v1);
}

uint64_t sub_100098EC0()
{
  sub_100011D80(&qword_10012F008);
  sub_10000BFC4();
  __chkstk_darwin(v0);
  sub_1000085A8();
  sub_1000182A8();
  sub_10000B1C0();
  sub_10000FC1C();
  sub_100099158();
  sub_100008760();
  uint64_t v1 = sub_100011F4C();
  return v2(v1);
}

BOOL sub_100098FA8@<W0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_100115028;
  BOOL result = sub_100098E5C(*a1, v3);
  *a2 = result;
  return result;
}

unint64_t sub_100098FE8@<X0>(void *a1@<X8>)
{
  unint64_t result = sub_10001838C();
  *a1 = 0xD000000000000012;
  a1[1] = v3;
  return result;
}

BOOL sub_100099018@<W0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  BOOL result = sub_100098EA0(a1);
  *a2 = result;
  return result;
}

void sub_100099048(void *a1@<X8>)
{
  *a1 = &off_100115000;
}

uint64_t sub_100099058(uint64_t a1)
{
  unint64_t v2 = sub_1000182A8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100099094(uint64_t a1)
{
  unint64_t v2 = sub_1000182A8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000990D0()
{
  return sub_100098EC0();
}

__n128 sub_1000990E8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void type metadata accessor for CachedServerDataBag()
{
}

unint64_t sub_10009910C()
{
  unint64_t result = qword_10012EFE8;
  if (!qword_10012EFE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012EFE8);
  }
  return result;
}

unint64_t sub_100099158()
{
  unint64_t result = qword_10012F010;
  if (!qword_10012F010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F010);
  }
  return result;
}

void type metadata accessor for CachedServerDataBag.CodingKeys()
{
}

void type metadata accessor for CachedServerDataBag.CachedServerDataBagInner()
{
}

unint64_t sub_1000991C0()
{
  unint64_t result = qword_10012F018;
  if (!qword_10012F018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F018);
  }
  return result;
}

uint64_t sub_10009920C()
{
  return sub_100099654(&qword_10012F020, &qword_10012F028);
}

unint64_t sub_100099238()
{
  unint64_t result = qword_10012F030;
  if (!qword_10012F030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F030);
  }
  return result;
}

unint64_t sub_100099288()
{
  unint64_t result = qword_10012F038;
  if (!qword_10012F038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F038);
  }
  return result;
}

unint64_t sub_1000992D8()
{
  unint64_t result = qword_10012F040;
  if (!qword_10012F040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F040);
  }
  return result;
}

unint64_t sub_100099324()
{
  unint64_t result = qword_10012F068;
  if (!qword_10012F068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F068);
  }
  return result;
}

void type metadata accessor for CachedServerDataBag.CachedServerDataBagInner.CodingKeys()
{
}

uint64_t sub_1000993A4(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000993C4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&a9, 8) = 0u;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 4_Block_object_dispose(&a9, 8) = v3;
  return result;
}

void type metadata accessor for CachedServerDataBag.CachedServerDataBagInner.AccountData()
{
}

unint64_t sub_10009940C()
{
  unint64_t result = qword_10012F070;
  if (!qword_10012F070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F070);
  }
  return result;
}

uint64_t sub_100099458()
{
  return sub_100099654(&qword_10012F078, &qword_10012F080);
}

unint64_t sub_100099484()
{
  unint64_t result = qword_10012F088;
  if (!qword_10012F088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F088);
  }
  return result;
}

unint64_t sub_1000994D4()
{
  unint64_t result = qword_10012F090;
  if (!qword_10012F090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F090);
  }
  return result;
}

unint64_t sub_100099524()
{
  unint64_t result = qword_10012F098;
  if (!qword_10012F098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F098);
  }
  return result;
}

uint64_t sub_100099570(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 5) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v5 = v6 - 6;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

void type metadata accessor for CachedServerDataBag.CachedServerDataBagInner.AccountData.CodingKeys()
{
}

uint64_t sub_10009962C()
{
  return sub_100099654(&qword_10012F0B8, &qword_10012F0C0);
}

uint64_t sub_100099654(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10007FBF4(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000996A8()
{
  unint64_t result = qword_10012F0C8;
  if (!qword_10012F0C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F0C8);
  }
  return result;
}

unint64_t sub_1000996F8()
{
  unint64_t result = qword_10012F0D0;
  if (!qword_10012F0D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F0D0);
  }
  return result;
}

unint64_t sub_100099748()
{
  unint64_t result = qword_10012F0D8;
  if (!qword_10012F0D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F0D8);
  }
  return result;
}

uint64_t *sub_10009979C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *int v3 = *a2;
    int v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v5 = *(int *)(a3 + 20);
    unsigned int v6 = (char *)a1 + v5;
    BOOL v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for Date();
    (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_100099868(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for Date();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(v2, v3);
}

unsigned char *sub_1000998D0(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  unsigned int v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

unsigned char *sub_10009994C(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  unsigned int v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

unsigned char *sub_1000999C8(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  unsigned int v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

unsigned char *sub_100099A44(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  unsigned int v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_100099AC0(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 245)
  {
    unsigned int v4 = *a1;
    if (v4 >= 0xB) {
      return v4 - 10;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = (uint64_t)&a1[*(int *)(a3 + 20)];
    return sub_10001044C(v9, a2, v8);
  }
}

uint64_t sub_100099B40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100099B54);
}

unsigned char *sub_100099B54(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 245)
  {
    *unint64_t result = a2 + 10;
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = (uint64_t)&v5[*(int *)(a4 + 20)];
    return (unsigned char *)sub_1000101E8(v8, a2, a2, v7);
  }
  return result;
}

uint64_t sub_100099BD0()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_100099C68()
{
  sub_1000A1150(v0, (uint64_t)v1);
  if (v1[0] == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    char v12 = v1[0] & 1;
    char v13 = v1[1];
    uint64_t v14 = v2;
    char v15 = v3;
    char v16 = v4;
    uint64_t v17 = v5;
    char v18 = v6;
    uint64_t v19 = v7;
    char v20 = v8;
    char v21 = v9;
    char v22 = v10;
    char v23 = v11;
    Hasher._combine(_:)(1uLL);
    sub_1000BABAC();
  }
}

uint64_t sub_100099D34(long long *a1, long long *a2)
{
  sub_1000A1150(a1, (uint64_t)v26);
  __int16 v3 = v26[0];
  if (LOBYTE(v26[0]) == 2)
  {
    sub_1000A1150(a2, (uint64_t)v46);
    char v4 = LOBYTE(v46[0]) == 2;
  }
  else
  {
    double v5 = *(double *)&v26[1];
    char v6 = v27;
    char v7 = v28;
    uint64_t v8 = v29;
    char v9 = v30;
    uint64_t v10 = v31;
    char v11 = v32;
    char v12 = v33;
    char v14 = v35;
    char v15 = v34;
    sub_1000A1150(a2, (uint64_t)v16);
    if (LOBYTE(v16[0]) == 2)
    {
      char v4 = 0;
    }
    else
    {
      LOWORD(v36[0]) = v3 & 0xFF01;
      v36[1] = v5;
      char v37 = v6;
      char v38 = v7;
      uint64_t v39 = v8;
      char v40 = v9;
      uint64_t v41 = v10;
      char v42 = v11;
      char v43 = v12;
      char v44 = v15;
      char v45 = v14;
      LOWORD(v46[0]) = v16[0] & 0xFF01;
      v46[1] = *(double *)&v16[1];
      char v47 = v17;
      char v48 = v18;
      uint64_t v49 = v19;
      char v50 = v20;
      uint64_t v51 = v21;
      char v52 = v22;
      char v53 = v23;
      char v54 = v24;
      char v55 = v25;
      char v4 = sub_1000BACAC(v36, v46);
    }
  }
  return v4 & 1;
}

Swift::Int sub_100099EB0()
{
  sub_10000F710();
  sub_1000A1150(v0, (uint64_t)v2);
  if (v2[0] == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    char v13 = v2[0] & 1;
    char v14 = v2[1];
    uint64_t v15 = v3;
    char v16 = v4;
    char v17 = v5;
    uint64_t v18 = v6;
    char v19 = v7;
    uint64_t v20 = v8;
    char v21 = v9;
    char v22 = v10;
    char v23 = v11;
    char v24 = v12;
    Hasher._combine(_:)(1uLL);
    sub_1000BABAC();
  }
  return Hasher._finalize()();
}

uint64_t sub_100099F84()
{
  Hasher._combine(_:)(*v0);
  type metadata accessor for CachedServerDataSyncAttempt(0);
  type metadata accessor for Date();
  sub_10009DD80(&qword_10012E670, (void (*)(uint64_t))&type metadata accessor for Date);
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t sub_10009A01C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  type metadata accessor for CachedServerDataSyncAttempt(0);
  return static Date.== infix(_:_:)();
}

uint64_t sub_10009A084(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x72656767697274 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6572656767697274 && a2 == 0xEB00000000744164)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10009A18C(char a1)
{
  if (a1) {
    return 0x6572656767697274;
  }
  else {
    return 0x72656767697274;
  }
}

uint64_t sub_10009A1CC(void *a1)
{
  sub_100011D80(&qword_10012F190);
  sub_10000BFC4();
  __chkstk_darwin(v3);
  sub_1000087B0(a1, a1[3]);
  sub_10009DDC8();
  sub_1000164F8();
  sub_10009DEC4();
  sub_1000A2758();
  if (!v1)
  {
    type metadata accessor for CachedServerDataSyncAttempt(0);
    type metadata accessor for Date();
    sub_10009DD80(&qword_10012E6B8, (void (*)(uint64_t))&type metadata accessor for Date);
    sub_1000A2758();
  }
  uint64_t v4 = sub_100015BB4();
  return v5(v4);
}

Swift::Int sub_10009A344()
{
  sub_10000F710();
  Hasher._combine(_:)(*v0);
  type metadata accessor for CachedServerDataSyncAttempt(0);
  type metadata accessor for Date();
  sub_10009DD80(&qword_10012E670, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

void sub_10009A3E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_1000086E4();
  char v17 = v16;
  uint64_t v26 = v18;
  uint64_t v28 = type metadata accessor for Date();
  sub_10000BFC4();
  uint64_t v27 = v19;
  __chkstk_darwin(v20);
  sub_100011FB8();
  sub_100011D80(&qword_10012F178);
  sub_10000BFC4();
  __chkstk_darwin(v21);
  uint64_t v22 = sub_1000167B8();
  uint64_t v23 = type metadata accessor for CachedServerDataSyncAttempt(v22);
  sub_10000A430();
  __chkstk_darwin(v24);
  sub_10000F758();
  sub_1000087B0(v17, v17[3]);
  sub_10009DDC8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v13)
  {
    sub_10009DE14();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *char v14 = a13;
    sub_10009DD80(&qword_10012E690, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_1000165AC();
    v25();
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v27 + 32))(&v14[*(int *)(v23 + 20)], v15, v28);
    sub_10009DE60((uint64_t)v14, v26);
  }
  sub_10000D47C((uint64_t)v17);
  sub_100009750();
}

uint64_t sub_10009A650(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100102570
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v5 = a1 == 0x6970784561746164 && a2 == 0xEB00000000646572;
    if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v6 = a1 == 0x6168436C61636F6CLL && a2 == 0xEB0000000065676ELL;
      if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v7 = a1 == 0x4674736575716572 && a2 == 0xED000064656C6961;
        if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          BOOL v8 = a1 == 0x70556D6574737973 && a2 == 0xEC00000065746164;
          if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            BOOL v9 = a1 == 0x676E696C6C6F70 && a2 == 0xE700000000000000;
            if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else if (a1 == 0xD000000000000011 && a2 == 0x8000000100102590 {
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            }
            {
              swift_bridgeObjectRelease();
              return 6;
            }
            else
            {
              BOOL v10 = a1 == 0x646563726F66 && a2 == 0xE600000000000000;
              if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 7;
              }
              else
              {
                BOOL v11 = a1 == 0x6C6F486563616C70 && a2 == 0xEB00000000726564;
                if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 8;
                }
                else
                {
                  BOOL v12 = a1 == 0x79536C61756E616DLL && a2 == 0xEA0000000000636ELL;
                  if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 9;
                  }
                  else if (a1 == 0x41746E756F636361 && a2 == 0xEB00000000687475)
                  {
                    swift_bridgeObjectRelease();
                    return 10;
                  }
                  else
                  {
                    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    if (v14) {
                      return 10;
                    }
                    else {
                      return 11;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_10009AB3C()
{
  return 11;
}

unint64_t sub_10009AB44(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6970784561746164;
      break;
    case 2:
      unint64_t result = 0x6168436C61636F6CLL;
      break;
    case 3:
      unint64_t result = 0x4674736575716572;
      break;
    case 4:
      unint64_t result = 0x70556D6574737973;
      break;
    case 5:
      unint64_t result = 0x676E696C6C6F70;
      break;
    case 6:
      unint64_t result = 0xD000000000000011;
      break;
    case 7:
      unint64_t result = 0x646563726F66;
      break;
    case 8:
      unint64_t result = 0x6C6F486563616C70;
      break;
    case 9:
      unint64_t result = 0x79536C61756E616DLL;
      break;
    case 10:
      unint64_t result = 0x41746E756F636361;
      break;
    default:
      return result;
  }
  return result;
}

void sub_10009ACD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11, char a12, char a13, char a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  sub_1000086E4();
  a26 = v27;
  a27 = v28;
  uint64_t v102 = v29;
  uint64_t v31 = v30;
  sub_100011D80(&qword_10012F400);
  sub_10000BFC4();
  uint64_t v98 = v33;
  uint64_t v99 = v32;
  __chkstk_darwin(v32);
  sub_100016618(v34, v76[0]);
  sub_100011D80(&qword_10012F408);
  sub_10000BFC4();
  uint64_t v95 = v36;
  uint64_t v96 = v35;
  __chkstk_darwin(v35);
  sub_1000166F4(v37, v76[0]);
  v76[2] = sub_100011D80(&qword_10012F410);
  sub_10000BFC4();
  v76[1] = v38;
  __chkstk_darwin(v39);
  sub_10000D2F0();
  v76[0] = v40;
  sub_100011D80(&qword_10012F418);
  sub_10000BFC4();
  uint64_t v92 = v42;
  uint64_t v93 = v41;
  __chkstk_darwin(v41);
  sub_10000D2F0();
  uint64_t v91 = v43;
  sub_100011D80(&qword_10012F420);
  sub_10000BFC4();
  uint64_t v89 = v45;
  uint64_t v90 = v44;
  __chkstk_darwin(v44);
  sub_10000D2F0();
  uint64_t v88 = v46;
  sub_100011D80(&qword_10012F428);
  sub_10000BFC4();
  uint64_t v86 = v48;
  uint64_t v87 = v47;
  __chkstk_darwin(v47);
  sub_10000D2F0();
  uint64_t v85 = v49;
  uint64_t v84 = sub_100011D80(&qword_10012F430);
  sub_10000BFC4();
  uint64_t v83 = v50;
  __chkstk_darwin(v51);
  sub_10000D2F0();
  uint64_t v82 = v52;
  uint64_t v81 = sub_100011D80(&qword_10012F438);
  sub_10000BFC4();
  uint64_t v80 = v53;
  __chkstk_darwin(v54);
  sub_10000D2F0();
  uint64_t v79 = v55;
  uint64_t v78 = sub_100011D80(&qword_10012F440);
  sub_10000BFC4();
  uint64_t v77 = v56;
  __chkstk_darwin(v57);
  id v59 = (char *)v76 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_100011D80(&qword_10012F448);
  sub_10000BFC4();
  v76[4] = v61;
  __chkstk_darwin(v62);
  sub_100008544();
  uint64_t v63 = sub_100011D80(&qword_10012F450);
  sub_10000BFC4();
  v76[3] = v64;
  __chkstk_darwin(v65);
  sub_10000F758();
  sub_100011D80(&qword_10012F458);
  sub_10000BFC4();
  uint64_t v100 = v66;
  uint64_t v101 = v67;
  __chkstk_darwin(v66);
  sub_10000F9D0();
  sub_1000087B0(v31, v31[3]);
  sub_1000A0DC0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch((char)v102)
  {
    case 1:
      char v104 = 1;
      sub_1000A10B8();
      sub_10000F7A0();
      uint64_t v68 = sub_10000FC30();
      uint64_t v70 = v60;
      goto LABEL_15;
    case 2:
      char v105 = 2;
      sub_1000A106C();
      sub_10000A53C();
      uint64_t v69 = *(void (**)(uint64_t, uint64_t))(v77 + 8);
      uint64_t v68 = (uint64_t)v59;
      id v71 = &a20;
      goto LABEL_14;
    case 3:
      a10 = 3;
      sub_1000A1020();
      sub_10000F7A0();
      uint64_t v68 = sub_10000FC30();
      id v71 = &a23;
      goto LABEL_14;
    case 4:
      a11 = 4;
      sub_1000A0FD4();
      sub_10000F7A0();
      uint64_t v68 = sub_10000FC30();
      uint64_t v70 = v84;
      goto LABEL_15;
    case 5:
      a12 = 5;
      sub_1000A0F88();
      uint64_t v72 = v85;
      sub_10000F7A0();
      uint64_t v74 = v86;
      uint64_t v73 = v87;
      goto LABEL_12;
    case 6:
      a13 = 6;
      sub_1000A0F3C();
      uint64_t v72 = v88;
      sub_10000F7A0();
      uint64_t v74 = v89;
      uint64_t v73 = v90;
      goto LABEL_12;
    case 7:
      a14 = 7;
      sub_1000A0EF0();
      uint64_t v72 = v91;
      sub_10000F7A0();
      uint64_t v74 = v92;
      uint64_t v73 = v93;
      goto LABEL_12;
    case 8:
      a15 = 8;
      sub_1000A0EA4();
      sub_10000F7A0();
      uint64_t v68 = sub_10000FC30();
      id v71 = &a9;
LABEL_14:
      uint64_t v70 = *(v71 - 32);
      goto LABEL_15;
    case 9:
      a16 = 9;
      sub_1000A0E58();
      uint64_t v72 = v94;
      sub_10000F7A0();
      uint64_t v74 = v95;
      uint64_t v73 = v96;
      goto LABEL_12;
    case 10:
      a17 = 10;
      sub_1000A0E0C();
      uint64_t v72 = v97;
      sub_10000F7A0();
      uint64_t v74 = v98;
      uint64_t v73 = v99;
LABEL_12:
      (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v72, v73);
      break;
    default:
      char v103 = 0;
      sub_1000A1104();
      sub_10000A53C();
      uint64_t v68 = sub_1000A278C();
      uint64_t v70 = v63;
LABEL_15:
      v69(v68, v70);
      break;
  }
  sub_1000084F8();
  v75();
  sub_100009750();
}

void sub_10009B378()
{
  sub_1000086E4();
  uint64_t v3 = v2;
  sub_100011D80(&qword_10012F338);
  sub_10000BFC4();
  __chkstk_darwin(v4);
  sub_1000A2770(v5, v40);
  sub_100011D80(&qword_10012F340);
  sub_10000BFC4();
  __chkstk_darwin(v6);
  sub_100016618(v7, v41);
  sub_100011D80(&qword_10012F348);
  sub_10000BFC4();
  __chkstk_darwin(v8);
  sub_10000D2F0();
  sub_100011D80(&qword_10012F350);
  sub_10000BFC4();
  __chkstk_darwin(v9);
  sub_100012194(v10, v42);
  sub_100011D80(&qword_10012F358);
  sub_10000BFC4();
  __chkstk_darwin(v11);
  sub_10000B378(v12, v43);
  sub_100011D80(&qword_10012F360);
  sub_10000BFC4();
  __chkstk_darwin(v13);
  sub_10000D2F0();
  sub_100011D80(&qword_10012F368);
  sub_10000BFC4();
  __chkstk_darwin(v14);
  sub_10000FB7C(v15, v44);
  sub_100011D80(&qword_10012F370);
  sub_10000BFC4();
  __chkstk_darwin(v16);
  sub_1000166F4(v17, v45);
  sub_100011D80(&qword_10012F378);
  sub_10000BFC4();
  __chkstk_darwin(v18);
  sub_10000D2F0();
  sub_100011D80(&qword_10012F380);
  sub_10000BFC4();
  __chkstk_darwin(v19);
  sub_10000D360();
  sub_100011D80(&qword_10012F388);
  sub_10000BFC4();
  __chkstk_darwin(v20);
  sub_100008544();
  uint64_t v21 = sub_100011D80(&qword_10012F390);
  sub_10000BFC4();
  uint64_t v23 = v22;
  __chkstk_darwin(v24);
  sub_10000F9D0();
  sub_1000087B0(v3, v3[3]);
  sub_1000A0DC0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    uint64_t v25 = (uint64_t)v3;
LABEL_10:
    sub_10000D47C(v25);
    goto LABEL_11;
  }
  uint64_t v46 = v1;
  uint64_t v26 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v27 = *(void *)(v26 + 16);
  uint64_t v28 = v21;
  if (!v27)
  {
    uint64_t v25 = (uint64_t)v3;
LABEL_9:
    type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v36 = v35;
    sub_100011D80(&qword_10012F3A0);
    *uint64_t v36 = &unk_100116010;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    sub_10000A430();
    (*(void (**)(void *))(v37 + 104))(v36);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v46, v28);
    goto LABEL_10;
  }
  uint64_t v29 = v21;
  uint64_t v30 = *(unsigned __int8 *)(v26 + 32);
  sub_1000A1F64(1, v27, v26, v26 + 32, 0, (2 * v27) | 1);
  uint64_t v32 = v31;
  unint64_t v34 = v33;
  swift_bridgeObjectRelease();
  if (v32 != v34 >> 1)
  {
    uint64_t v25 = (uint64_t)v3;
    uint64_t v28 = v29;
    goto LABEL_9;
  }
  switch(v30)
  {
    case 1:
      sub_1000A10B8();
      sub_10000843C();
      sub_1000085CC();
      break;
    case 2:
      sub_1000A106C();
      sub_10000843C();
      sub_1000085CC();
      break;
    case 3:
      sub_1000A1020();
      sub_10000843C();
      sub_1000085CC();
      break;
    case 4:
      sub_1000A0FD4();
      sub_10000843C();
      sub_1000085CC();
      break;
    case 5:
      sub_1000A0F88();
      sub_10000843C();
      sub_1000085CC();
      break;
    case 6:
      sub_1000A0F3C();
      sub_10000843C();
      sub_100008694();
      break;
    case 7:
      sub_1000A0EF0();
      sub_10000843C();
      goto LABEL_22;
    case 8:
      sub_1000A0EA4();
      sub_10000843C();
      goto LABEL_22;
    case 9:
      sub_1000A0E58();
      sub_10000843C();
      goto LABEL_22;
    case 10:
      sub_1000A0E0C();
      sub_10000843C();
LABEL_22:
      sub_100008694();
      break;
    default:
      sub_1000A1104();
      sub_10000843C();
      sub_1000085CC();
      break;
  }
  sub_1000084F8();
  v38();
  swift_unknownObjectRelease();
  sub_1000084F8();
  v39();
  sub_10000D47C((uint64_t)v3);
LABEL_11:
  sub_100009750();
}

uint64_t sub_10009BC58(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x647261646E617473 && a2 == 0xEC000000636E7953;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x4974706D65747461 && a2 == 0xEF746867696C666ELL;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x526572756C696166 && a2 == 0xEC00000079727465;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x676E696C6C6F70 && a2 == 0xE700000000000000;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else if (a1 == 0x797469726F697270 && a2 == 0xEC000000636E7953)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v10) {
            return 4;
          }
          else {
            return 5;
          }
        }
      }
    }
  }
}

uint64_t sub_10009BED0()
{
  return 5;
}

uint64_t sub_10009BED8(char a1)
{
  uint64_t result = 0x647261646E617473;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x4974706D65747461;
      break;
    case 2:
      uint64_t result = 0x526572756C696166;
      break;
    case 3:
      uint64_t result = 0x676E696C6C6F70;
      break;
    case 4:
      uint64_t result = 0x797469726F697270;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10009BFA0()
{
  return 1;
}

uint64_t sub_10009BFC0()
{
  return 0;
}

void sub_10009BFCC()
{
  sub_1000086E4();
  char v24 = v1;
  uint64_t v3 = v2;
  sub_100011D80(&qword_10012F5F0);
  sub_10000BFC4();
  __chkstk_darwin(v4);
  sub_100012194(v5, v19);
  sub_100011D80(&qword_10012F5F8);
  sub_10000BFC4();
  __chkstk_darwin(v6);
  sub_1000A2770(v7, v20);
  sub_100011D80(&qword_10012F600);
  sub_10000BFC4();
  __chkstk_darwin(v8);
  sub_10000FB7C(v9, v21);
  sub_100011D80(&qword_10012F608);
  sub_10000BFC4();
  uint64_t v22 = v11;
  uint64_t v23 = v10;
  __chkstk_darwin(v10);
  sub_100011FB8();
  uint64_t v12 = sub_100011D80(&qword_10012F610);
  sub_10000BFC4();
  __chkstk_darwin(v13);
  sub_10000D360();
  sub_100011D80(&qword_10012F618);
  sub_10000BFC4();
  __chkstk_darwin(v14);
  sub_10000F758();
  sub_1000087B0(v3, v3[3]);
  sub_1000A1F18();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch(v24)
  {
    case 1:
      sub_1000A20C4();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v0, v23);
      goto LABEL_9;
    case 2:
      sub_1000A2078();
      sub_1000122F8();
      goto LABEL_7;
    case 3:
      sub_1000A202C();
      sub_1000122F8();
      goto LABEL_7;
    case 4:
      sub_1000A1FE0();
      sub_1000122F8();
LABEL_7:
      uint64_t v15 = sub_100008694();
      break;
    default:
      sub_1000A2110();
      sub_1000122F8();
      uint64_t v15 = sub_100008694();
      uint64_t v17 = v12;
      break;
  }
  v16(v15, v17);
LABEL_9:
  sub_1000165AC();
  v18();
  sub_100009750();
}

void sub_10009C318()
{
  sub_1000086E4();
  uint64_t v61 = v1;
  uint64_t v4 = v3;
  uint64_t v55 = sub_100011D80(&qword_10012F590);
  sub_10000BFC4();
  uint64_t v57 = v5;
  __chkstk_darwin(v6);
  sub_10000D2F0();
  uint64_t v59 = v7;
  uint64_t v58 = sub_100011D80(&qword_10012F598);
  sub_10000BFC4();
  uint64_t v56 = v8;
  __chkstk_darwin(v9);
  sub_100012194(v10, v44);
  sub_100011D80(&qword_10012F5A0);
  sub_10000BFC4();
  uint64_t v53 = v12;
  uint64_t v54 = v11;
  __chkstk_darwin(v11);
  sub_10000B378(v13, v44);
  sub_100011D80(&qword_10012F5A8);
  sub_10000BFC4();
  uint64_t v51 = v15;
  uint64_t v52 = v14;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100011D80(&qword_10012F5B0);
  sub_10000BFC4();
  uint64_t v50 = v19;
  __chkstk_darwin(v20);
  sub_10000F758();
  uint64_t v21 = sub_100011D80(&qword_10012F5B8);
  sub_10000BFC4();
  uint64_t v23 = v22;
  __chkstk_darwin(v24);
  sub_10000D360();
  uint64_t v25 = v4[3];
  uint64_t v60 = v4;
  sub_1000087B0(v4, v25);
  sub_1000A1F18();
  uint64_t v26 = v61;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v26)
  {
LABEL_10:
    uint64_t v39 = (uint64_t)v60;
LABEL_11:
    sub_10000D47C(v39);
    goto LABEL_12;
  }
  uint64_t v46 = v18;
  uint64_t v47 = v2;
  uint64_t v48 = v17;
  uint64_t v61 = v23;
  uint64_t v27 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v28 = *(void *)(v27 + 16);
  if (!v28)
  {
    uint64_t v35 = v0;
LABEL_9:
    type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v37 = v36;
    sub_100011D80(&qword_10012F3A0);
    *uint64_t v37 = &unk_100116320;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    sub_10000A430();
    (*(void (**)(void *))(v38 + 104))(v37);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v35, v21);
    goto LABEL_10;
  }
  uint64_t v45 = 0;
  uint64_t v49 = v21;
  uint64_t v29 = v0;
  uint64_t v30 = *(unsigned __int8 *)(v27 + 32);
  sub_1000A1F64(1, v28, v27, v27 + 32, 0, (2 * v28) | 1);
  uint64_t v32 = v31;
  unint64_t v34 = v33;
  swift_bridgeObjectRelease();
  if (v32 != v34 >> 1)
  {
    uint64_t v35 = v29;
    uint64_t v21 = v49;
    goto LABEL_9;
  }
  switch(v30)
  {
    case 1:
      sub_1000A20C4();
      uint64_t v40 = v45;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (!v40) {
        goto LABEL_6;
      }
      swift_unknownObjectRelease();
      sub_1000165AC();
      v41();
      uint64_t v39 = (uint64_t)v60;
      goto LABEL_11;
    case 2:
      sub_1000A2078();
      sub_10000FA94();
      goto LABEL_6;
    case 3:
      sub_1000A202C();
      sub_10000FA94();
      goto LABEL_19;
    case 4:
      sub_1000A1FE0();
      sub_10000FA94();
      sub_1000A278C();
      goto LABEL_19;
    default:
      sub_1000A2110();
      sub_10000FA94();
LABEL_6:
      sub_1000A278C();
LABEL_19:
      sub_1000084F8();
      v42();
      swift_unknownObjectRelease();
      sub_1000165AC();
      v43();
      sub_10000D47C((uint64_t)v60);
      break;
  }
LABEL_12:
  sub_100009750();
}

uint64_t sub_10009C890()
{
  type metadata accessor for AccountIdentity();
  sub_10009DD80((unint64_t *)&qword_100130080, (void (*)(uint64_t))&type metadata accessor for AccountIdentity);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v1 = type metadata accessor for CachedServerDataSyncTaskSchedule(0);
  type metadata accessor for Date();
  sub_10009DD80(&qword_10012E670, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + *(int *)(v1 + 24)));
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + *(int *)(v1 + 28)));
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10009C9CC(uint64_t a1, uint64_t a2)
{
  if ((static AccountIdentity.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = (int *)type metadata accessor for CachedServerDataSyncTaskSchedule(0);
  if ((static Date.== infix(_:_:)() & 1) == 0
    || *(unsigned __int8 *)(a1 + v4[6]) != *(unsigned __int8 *)(a2 + v4[6])
    || *(unsigned __int8 *)(a1 + v4[7]) != *(unsigned __int8 *)(a2 + v4[7]))
  {
    return 0;
  }
  uint64_t v5 = v4[8];
  uint64_t v6 = *(void *)(a1 + v5);
  uint64_t v7 = *(void *)(a1 + v5 + 8);
  uint64_t v8 = (void *)(a2 + v5);
  if (v6 == *v8 && v7 == v8[1]) {
    return 1;
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_10009CA98(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x49746E756F636361 && a2 == 0xE900000000000044;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x636E79537478656ELL && a2 == 0xEA00000000007441;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x72656767697274 && a2 == 0xE700000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x6E6F73616572 && a2 == 0xE600000000000000;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else if (a1 == 0x44496B736174 && a2 == 0xE600000000000000)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v10) {
            return 4;
          }
          else {
            return 5;
          }
        }
      }
    }
  }
}

uint64_t sub_10009CCB8(char a1)
{
  uint64_t result = 0x49746E756F636361;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x636E79537478656ELL;
      break;
    case 2:
      uint64_t result = 0x72656767697274;
      break;
    case 3:
      uint64_t result = 0x6E6F73616572;
      break;
    case 4:
      uint64_t result = 0x44496B736174;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10009CD68(void *a1)
{
  sub_100011D80(&qword_10012F488);
  sub_10000BFC4();
  __chkstk_darwin(v3);
  sub_1000087B0(a1, a1[3]);
  sub_1000A1170();
  sub_1000164F8();
  type metadata accessor for AccountIdentity();
  sub_10009DD80(&qword_10012F490, (void (*)(uint64_t))&type metadata accessor for AccountIdentity);
  sub_1000A2758();
  if (!v1)
  {
    type metadata accessor for CachedServerDataSyncTaskSchedule(0);
    type metadata accessor for Date();
    sub_10009DD80(&qword_10012E6B8, (void (*)(uint64_t))&type metadata accessor for Date);
    sub_1000A2758();
    sub_10009DEC4();
    sub_1000168AC();
    sub_1000A1310();
    sub_1000168AC();
    sub_1000A135C();
    sub_1000168AC();
  }
  uint64_t v4 = sub_100015BB4();
  return v5(v4);
}

Swift::Int sub_10009CFA8()
{
  return Hasher._finalize()();
}

void sub_10009CFE0()
{
  sub_1000086E4();
  uint64_t v37 = (void *)v0;
  uint64_t v4 = v3;
  uint64_t v29 = v5;
  type metadata accessor for Date();
  sub_10000BFC4();
  uint64_t v32 = v7;
  uint64_t v33 = v6;
  __chkstk_darwin(v6);
  sub_100011FB8();
  uint64_t v8 = type metadata accessor for AccountIdentity();
  sub_10000BFC4();
  uint64_t v31 = v9;
  __chkstk_darwin(v10);
  sub_10000B378(v11, v28);
  uint64_t v36 = sub_100011D80(&qword_10012F460);
  sub_10000BFC4();
  uint64_t v30 = v12;
  __chkstk_darwin(v13);
  uint64_t v14 = sub_1000167B8();
  uint64_t v15 = (int *)type metadata accessor for CachedServerDataSyncTaskSchedule(v14);
  sub_10000A430();
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000087B0(v4, v4[3]);
  sub_1000A1170();
  uint64_t v35 = v1;
  uint64_t v19 = (uint64_t)v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v19)
  {
    sub_10000D47C((uint64_t)v4);
  }
  else
  {
    uint64_t v20 = v2;
    uint64_t v37 = v4;
    uint64_t v21 = v31;
    uint64_t v22 = v32;
    uint64_t v23 = v33;
    LOBYTE(v3_Block_object_dispose(&a9, 8) = 0;
    sub_10009DD80(&qword_10012F470, (void (*)(uint64_t))&type metadata accessor for AccountIdentity);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 32))(v18, v34, v8);
    LOBYTE(v3_Block_object_dispose(&a9, 8) = 1;
    sub_10009DD80(&qword_10012E690, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 32))(&v18[v15[5]], v20, v23);
    sub_10009DE14();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v18[v15[6]] = v38;
    sub_1000A11BC();
    sub_100016548();
    v18[v15[7]] = v38;
    sub_1000A1208();
    sub_100016548();
    uint64_t v24 = sub_100016AA0();
    v25(v24);
    uint64_t v26 = v39;
    uint64_t v27 = &v18[v15[8]];
    *(void *)uint64_t v27 = v38;
    *((void *)v27 + 1) = v26;
    sub_1000A1254((uint64_t)v18, v29);
    sub_10000D47C((uint64_t)v37);
    sub_1000A12B8((uint64_t)v18, (void (*)(void))type metadata accessor for CachedServerDataSyncTaskSchedule);
  }
  sub_100009750();
}

Swift::Int sub_10009D408()
{
  sub_1000A1150(v0, (uint64_t)v2);
  return sub_100099EB0();
}

void sub_10009D440()
{
  sub_1000A1150(v0, (uint64_t)v1);
  sub_100099C68();
}

Swift::Int sub_10009D480()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    sub_1000BABAC();
  }
  return Hasher._finalize()();
}

uint64_t sub_10009D564(long long *a1, long long *a2)
{
  sub_1000A1150(a1, (uint64_t)v4);
  sub_1000A1150(a2, (uint64_t)v5);
  return sub_100099D34(v4, v5) & 1;
}

uint64_t sub_10009D5B0()
{
  return sub_10009A18C(*v0);
}

uint64_t sub_10009D5B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10009A084(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10009D5E0(uint64_t a1)
{
  unint64_t v2 = sub_10009DDC8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10009D61C(uint64_t a1)
{
  unint64_t v2 = sub_10009DDC8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10009D658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10009A3E4(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8, SWORD2(vars8), SBYTE6(vars8), SHIBYTE(vars8));
}

uint64_t sub_10009D670(void *a1)
{
  return sub_10009A1CC(a1);
}

Swift::Int sub_10009D690()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  type metadata accessor for Date();
  sub_10009DD80(&qword_10012E670, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_10009D73C()
{
  return sub_10009DD80(&qword_10012F170, (void (*)(uint64_t))type metadata accessor for CachedServerDataSyncAttempt);
}

uint64_t sub_10009D788(uint64_t a1)
{
  unint64_t v2 = sub_1000A0E0C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10009D7C4(uint64_t a1)
{
  unint64_t v2 = sub_1000A0E0C();
  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_10009D800()
{
  return sub_10009AB44(*v0);
}

uint64_t sub_10009D808@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10009A650(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10009D830@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10009AB3C();
  *a1 = result;
  return result;
}

uint64_t sub_10009D858(uint64_t a1)
{
  unint64_t v2 = sub_1000A0DC0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10009D894(uint64_t a1)
{
  unint64_t v2 = sub_1000A0DC0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10009D8D0(uint64_t a1)
{
  unint64_t v2 = sub_1000A10B8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10009D90C(uint64_t a1)
{
  unint64_t v2 = sub_1000A10B8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10009D948(uint64_t a1)
{
  unint64_t v2 = sub_1000A0EF0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10009D984(uint64_t a1)
{
  unint64_t v2 = sub_1000A0EF0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10009D9C0(uint64_t a1)
{
  unint64_t v2 = sub_1000A106C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10009D9FC(uint64_t a1)
{
  unint64_t v2 = sub_1000A106C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10009DA38(uint64_t a1)
{
  unint64_t v2 = sub_1000A0E58();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10009DA74(uint64_t a1)
{
  unint64_t v2 = sub_1000A0E58();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10009DAB0(uint64_t a1)
{
  unint64_t v2 = sub_1000A0EA4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10009DAEC(uint64_t a1)
{
  unint64_t v2 = sub_1000A0EA4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10009DB28(uint64_t a1)
{
  unint64_t v2 = sub_1000A0F88();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10009DB64(uint64_t a1)
{
  unint64_t v2 = sub_1000A0F88();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10009DBA0(uint64_t a1)
{
  unint64_t v2 = sub_1000A1104();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10009DBDC(uint64_t a1)
{
  unint64_t v2 = sub_1000A1104();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10009DC18(uint64_t a1)
{
  unint64_t v2 = sub_1000A1020();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10009DC54(uint64_t a1)
{
  unint64_t v2 = sub_1000A1020();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10009DC90(uint64_t a1)
{
  unint64_t v2 = sub_1000A0F3C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10009DCCC(uint64_t a1)
{
  unint64_t v2 = sub_1000A0F3C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10009DD08(uint64_t a1)
{
  unint64_t v2 = sub_1000A0FD4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10009DD44(uint64_t a1)
{
  unint64_t v2 = sub_1000A0FD4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10009DD80(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10009DDC8()
{
  unint64_t result = qword_10012F180;
  if (!qword_10012F180)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F180);
  }
  return result;
}

unint64_t sub_10009DE14()
{
  unint64_t result = qword_10012F188;
  if (!qword_10012F188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F188);
  }
  return result;
}

uint64_t sub_10009DE60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CachedServerDataSyncAttempt(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10009DEC4()
{
  unint64_t result = qword_10012F198;
  if (!qword_10012F198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F198);
  }
  return result;
}

__n128 sub_10009DF10(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_10009DF2C(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && a1[52]) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  unsigned int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    unsigned int v5 = -1;
  }
  if (v5 + 1 >= 2) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t sub_10009DF80(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_DWORD *)(result + 4_Block_object_dispose(&a9, 8) = 0;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_DWORD *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 52) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 52) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 2;
    }
  }
  return result;
}

uint64_t sub_10009DFD0(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  BOOL v2 = v1 >= 2;
  int v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2) {
    return (v3 + 1);
  }
  else {
    return 0;
  }
}

double sub_10009DFEC(uint64_t a1, unsigned int a2)
{
  if (a2 > 0xFE)
  {
    *(void *)(a1 + 40) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + _Block_object_dispose(&a9, 8) = 0u;
    *(_DWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = 0;
    *(void *)a1 = a2 - 255;
  }
  else if (a2)
  {
    *(unsigned char *)a1 = a2 + 1;
  }
  return result;
}

void type metadata accessor for CachedServerDataSyncScheduleAction()
{
}

void *sub_10009E030(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AccountIdentity();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[7];
    *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
    *((unsigned char *)a1 + v12) = *((unsigned char *)a2 + v12);
    uint64_t v13 = a3[8];
    uint64_t v14 = (void *)((char *)a1 + v13);
    uint64_t v15 = (void *)((char *)a2 + v13);
    uint64_t v16 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v16;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10009E16C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccountIdentity();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10009E22C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AccountIdentity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  uint64_t v12 = a3[8];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10009E318(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AccountIdentity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v11 = a3[8];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10009E41C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AccountIdentity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_10009E4FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AccountIdentity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  uint64_t v12 = a3[8];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10009E5EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10009E600);
}

uint64_t sub_10009E600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for AccountIdentity();
  sub_10000F6F8();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
  }
  else
  {
    type metadata accessor for Date();
    sub_10000F6F8();
    if (*(_DWORD *)(v11 + 84) != a2) {
      return sub_1000A2798(*(void *)(a1 + *(int *)(a3 + 32) + 8));
    }
    uint64_t v8 = v10;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
  }
  return sub_10001044C(v9, a2, v8);
}

uint64_t sub_10009E6AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10009E6C0);
}

void sub_10009E6C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for AccountIdentity();
  sub_10000F6F8();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    type metadata accessor for Date();
    sub_10000F6F8();
    if (*(_DWORD *)(v13 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 32) + _Block_object_dispose(&a9, 8) = (a2 - 1);
      return;
    }
    uint64_t v10 = v12;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
  }
  sub_1000101E8(v11, a2, a2, v10);
}

uint64_t type metadata accessor for CachedServerDataSyncTaskSchedule(uint64_t a1)
{
  return sub_100010474(a1, qword_10012F1F8);
}

uint64_t sub_10009E794()
{
  uint64_t result = type metadata accessor for AccountIdentity();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *sub_10009E878(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for AccountIdentity();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[7];
    *(void *)((char *)v4 + a3[6]) = *(void *)((char *)a2 + a3[6]);
    *(void *)((char *)v4 + v13) = *(void *)((char *)a2 + v13);
    uint64_t v14 = a3[9];
    *(void *)((char *)v4 + a3[8]) = *(void *)((char *)a2 + a3[8]);
    *(void *)((char *)v4 + v14) = *(void *)((char *)a2 + v14);
    uint64_t v15 = a3[11];
    *((unsigned char *)v4 + a3[10]) = *((unsigned char *)a2 + a3[10]);
    *(void *)((char *)v4 + v15) = *(void *)((char *)a2 + v15);
    uint64_t v16 = a3[13];
    *(void *)((char *)v4 + a3[12]) = *(void *)((char *)a2 + a3[12]);
    uint64_t v17 = (char *)v4 + v16;
    uint64_t v18 = (char *)a2 + v16;
    uint64_t v19 = type metadata accessor for Date();
    if (sub_10001044C((uint64_t)v18, 1, v19))
    {
      uint64_t v20 = sub_100011D80(&qword_10012E458);
      memcpy(v17, v18, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
      sub_1000101E8((uint64_t)v17, 0, 1, v19);
    }
    uint64_t v22 = a3[14];
    uint64_t v23 = (char *)v4 + v22;
    uint64_t v24 = (char *)a2 + v22;
    if (sub_10001044C((uint64_t)a2 + v22, 1, v19))
    {
      uint64_t v25 = sub_100011D80(&qword_10012E458);
      memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v23, v24, v19);
      sub_1000101E8((uint64_t)v23, 0, 1, v19);
    }
    uint64_t v26 = a3[15];
    uint64_t v27 = (char *)v4 + v26;
    uint64_t v28 = (char *)a2 + v26;
    if (sub_10001044C((uint64_t)a2 + v26, 1, v19))
    {
      uint64_t v29 = sub_100011D80(&qword_10012E458);
      memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v27, v28, v19);
      sub_1000101E8((uint64_t)v27, 0, 1, v19);
    }
    uint64_t v30 = a3[16];
    uint64_t v31 = (char *)v4 + v30;
    uint64_t v32 = (char *)a2 + v30;
    if (sub_10001044C((uint64_t)a2 + v30, 1, v19))
    {
      uint64_t v33 = sub_100011D80(&qword_10012E458);
      memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v31, v32, v19);
      sub_1000101E8((uint64_t)v31, 0, 1, v19);
    }
    uint64_t v34 = a3[18];
    *(void *)((char *)v4 + a3[17]) = *(void *)((char *)a2 + a3[17]);
    uint64_t v35 = (char *)v4 + v34;
    uint64_t v36 = (char *)a2 + v34;
    uint64_t v37 = type metadata accessor for CachedServerDataSyncAttempt(0);
    if (sub_10001044C((uint64_t)v36, 1, v37))
    {
      uint64_t v38 = sub_100011D80(&qword_10012E4A0);
      memcpy(v35, v36, *(void *)(*(void *)(v38 - 8) + 64));
    }
    else
    {
      *uint64_t v35 = *v36;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v19 - 8) + 16))(&v35[*(int *)(v37 + 20)], &v36[*(int *)(v37 + 20)], v19);
      sub_1000101E8((uint64_t)v35, 0, 1, v37);
    }
    *((unsigned char *)v4 + a3[19]) = *((unsigned char *)a2 + a3[19]);
  }
  return v4;
}

void *sub_10009ECE4(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for AccountIdentity();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  uint64_t v13 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + v13) = *(void *)((char *)a2 + v13);
  uint64_t v14 = a3[11];
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  *(void *)((char *)a1 + v14) = *(void *)((char *)a2 + v14);
  uint64_t v15 = a3[13];
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for Date();
  if (sub_10001044C((uint64_t)v17, 1, v18))
  {
    uint64_t v19 = sub_100011D80(&qword_10012E458);
    memcpy(v16, v17, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
    sub_1000101E8((uint64_t)v16, 0, 1, v18);
  }
  uint64_t v20 = a3[14];
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  if (sub_10001044C((uint64_t)a2 + v20, 1, v18))
  {
    uint64_t v23 = sub_100011D80(&qword_10012E458);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v21, v22, v18);
    sub_1000101E8((uint64_t)v21, 0, 1, v18);
  }
  uint64_t v24 = a3[15];
  uint64_t v25 = (char *)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  if (sub_10001044C((uint64_t)a2 + v24, 1, v18))
  {
    uint64_t v27 = sub_100011D80(&qword_10012E458);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v25, v26, v18);
    sub_1000101E8((uint64_t)v25, 0, 1, v18);
  }
  uint64_t v28 = a3[16];
  uint64_t v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)a2 + v28;
  if (sub_10001044C((uint64_t)a2 + v28, 1, v18))
  {
    uint64_t v31 = sub_100011D80(&qword_10012E458);
    memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v29, v30, v18);
    sub_1000101E8((uint64_t)v29, 0, 1, v18);
  }
  uint64_t v32 = a3[18];
  *(void *)((char *)a1 + a3[17]) = *(void *)((char *)a2 + a3[17]);
  uint64_t v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  uint64_t v35 = type metadata accessor for CachedServerDataSyncAttempt(0);
  if (sub_10001044C((uint64_t)v34, 1, v35))
  {
    uint64_t v36 = sub_100011D80(&qword_10012E4A0);
    memcpy(v33, v34, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    *uint64_t v33 = *v34;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v18 - 8) + 16))(&v33[*(int *)(v35 + 20)], &v34[*(int *)(v35 + 20)], v18);
    sub_1000101E8((uint64_t)v33, 0, 1, v35);
  }
  *((unsigned char *)a1 + a3[19]) = *((unsigned char *)a2 + a3[19]);
  return a1;
}

void *sub_10009F100(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for AccountIdentity();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  *(void *)((char *)a1 + a3[11]) = *(void *)((char *)a2 + a3[11]);
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  uint64_t v10 = a3[13];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  int v14 = sub_10001044C((uint64_t)v11, 1, v13);
  int v15 = sub_10001044C((uint64_t)v12, 1, v13);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
      sub_1000101E8((uint64_t)v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v16 = *(void *)(v13 - 8);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v11, v13);
LABEL_6:
    uint64_t v17 = sub_100011D80(&qword_10012E458);
    memcpy(v11, v12, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v11, v12, v13);
LABEL_7:
  uint64_t v18 = a3[14];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  int v21 = sub_10001044C((uint64_t)a1 + v18, 1, v13);
  int v22 = sub_10001044C((uint64_t)v20, 1, v13);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v19, v20, v13);
      sub_1000101E8((uint64_t)v19, 0, 1, v13);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v23 = *(void *)(v13 - 8);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v19, v13);
LABEL_12:
    uint64_t v24 = sub_100011D80(&qword_10012E458);
    memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v19, v20, v13);
LABEL_13:
  uint64_t v25 = a3[15];
  uint64_t v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  int v28 = sub_10001044C((uint64_t)a1 + v25, 1, v13);
  int v29 = sub_10001044C((uint64_t)v27, 1, v13);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v26, v27, v13);
      sub_1000101E8((uint64_t)v26, 0, 1, v13);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v30 = *(void *)(v13 - 8);
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v26, v13);
LABEL_18:
    uint64_t v31 = sub_100011D80(&qword_10012E458);
    memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v30 + 24))(v26, v27, v13);
LABEL_19:
  uint64_t v32 = a3[16];
  uint64_t v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  int v35 = sub_10001044C((uint64_t)a1 + v32, 1, v13);
  int v36 = sub_10001044C((uint64_t)v34, 1, v13);
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v33, v34, v13);
      sub_1000101E8((uint64_t)v33, 0, 1, v13);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  uint64_t v37 = *(void *)(v13 - 8);
  if (v36)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v33, v13);
LABEL_24:
    uint64_t v38 = sub_100011D80(&qword_10012E458);
    memcpy(v33, v34, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 24))(v33, v34, v13);
LABEL_25:
  *(void *)((char *)a1 + a3[17]) = *(void *)((char *)a2 + a3[17]);
  uint64_t v39 = a3[18];
  uint64_t v40 = (char *)a1 + v39;
  uint64_t v41 = (char *)a2 + v39;
  uint64_t v42 = type metadata accessor for CachedServerDataSyncAttempt(0);
  int v43 = sub_10001044C((uint64_t)v40, 1, v42);
  int v44 = sub_10001044C((uint64_t)v41, 1, v42);
  if (!v43)
  {
    if (!v44)
    {
      *uint64_t v40 = *v41;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 24))(&v40[*(int *)(v42 + 20)], &v41[*(int *)(v42 + 20)], v13);
      goto LABEL_31;
    }
    sub_1000A12B8((uint64_t)v40, (void (*)(void))type metadata accessor for CachedServerDataSyncAttempt);
    goto LABEL_30;
  }
  if (v44)
  {
LABEL_30:
    uint64_t v45 = sub_100011D80(&qword_10012E4A0);
    memcpy(v40, v41, *(void *)(*(void *)(v45 - 8) + 64));
    goto LABEL_31;
  }
  *uint64_t v40 = *v41;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 16))(&v40[*(int *)(v42 + 20)], &v41[*(int *)(v42 + 20)], v13);
  sub_1000101E8((uint64_t)v40, 0, 1, v42);
LABEL_31:
  *((unsigned char *)a1 + a3[19]) = *((unsigned char *)a2 + a3[19]);
  return a1;
}

_OWORD *sub_10009F7B0(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for AccountIdentity();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v10) = *(void *)((char *)a2 + v10);
  uint64_t v11 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + v11) = *(void *)((char *)a2 + v11);
  uint64_t v12 = a3[11];
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  uint64_t v13 = a3[13];
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  int v14 = (char *)a1 + v13;
  int v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for Date();
  if (sub_10001044C((uint64_t)v15, 1, v16))
  {
    uint64_t v17 = sub_100011D80(&qword_10012E458);
    memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
    sub_1000101E8((uint64_t)v14, 0, 1, v16);
  }
  uint64_t v18 = a3[14];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  if (sub_10001044C((uint64_t)a2 + v18, 1, v16))
  {
    uint64_t v21 = sub_100011D80(&qword_10012E458);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v19, v20, v16);
    sub_1000101E8((uint64_t)v19, 0, 1, v16);
  }
  uint64_t v22 = a3[15];
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  if (sub_10001044C((uint64_t)a2 + v22, 1, v16))
  {
    uint64_t v25 = sub_100011D80(&qword_10012E458);
    memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v23, v24, v16);
    sub_1000101E8((uint64_t)v23, 0, 1, v16);
  }
  uint64_t v26 = a3[16];
  uint64_t v27 = (char *)a1 + v26;
  int v28 = (char *)a2 + v26;
  if (sub_10001044C((uint64_t)a2 + v26, 1, v16))
  {
    uint64_t v29 = sub_100011D80(&qword_10012E458);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v27, v28, v16);
    sub_1000101E8((uint64_t)v27, 0, 1, v16);
  }
  uint64_t v30 = a3[18];
  *(void *)((char *)a1 + a3[17]) = *(void *)((char *)a2 + a3[17]);
  uint64_t v31 = (char *)a1 + v30;
  uint64_t v32 = (char *)a2 + v30;
  uint64_t v33 = type metadata accessor for CachedServerDataSyncAttempt(0);
  if (sub_10001044C((uint64_t)v32, 1, v33))
  {
    uint64_t v34 = sub_100011D80(&qword_10012E4A0);
    memcpy(v31, v32, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    *uint64_t v31 = *v32;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v16 - 8) + 32))(&v31[*(int *)(v33 + 20)], &v32[*(int *)(v33 + 20)], v16);
    sub_1000101E8((uint64_t)v31, 0, 1, v33);
  }
  *((unsigned char *)a1 + a3[19]) = *((unsigned char *)a2 + a3[19]);
  return a1;
}

void *sub_10009FBB8(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for AccountIdentity();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v11) = *(void *)((char *)a2 + v11);
  uint64_t v12 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  uint64_t v13 = a3[11];
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  *(void *)((char *)a1 + v13) = *(void *)((char *)a2 + v13);
  uint64_t v14 = a3[13];
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  int v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for Date();
  int v18 = sub_10001044C((uint64_t)v15, 1, v17);
  int v19 = sub_10001044C((uint64_t)v16, 1, v17);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
      sub_1000101E8((uint64_t)v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v20 = *(void *)(v17 - 8);
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v15, v17);
LABEL_6:
    uint64_t v21 = sub_100011D80(&qword_10012E458);
    memcpy(v15, v16, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v15, v16, v17);
LABEL_7:
  uint64_t v22 = a3[14];
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  int v25 = sub_10001044C((uint64_t)a1 + v22, 1, v17);
  int v26 = sub_10001044C((uint64_t)v24, 1, v17);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v23, v24, v17);
      sub_1000101E8((uint64_t)v23, 0, 1, v17);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v27 = *(void *)(v17 - 8);
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v23, v17);
LABEL_12:
    uint64_t v28 = sub_100011D80(&qword_10012E458);
    memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 40))(v23, v24, v17);
LABEL_13:
  uint64_t v29 = a3[15];
  uint64_t v30 = (char *)a1 + v29;
  uint64_t v31 = (char *)a2 + v29;
  int v32 = sub_10001044C((uint64_t)a1 + v29, 1, v17);
  int v33 = sub_10001044C((uint64_t)v31, 1, v17);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v30, v31, v17);
      sub_1000101E8((uint64_t)v30, 0, 1, v17);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v34 = *(void *)(v17 - 8);
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v30, v17);
LABEL_18:
    uint64_t v35 = sub_100011D80(&qword_10012E458);
    memcpy(v30, v31, *(void *)(*(void *)(v35 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v34 + 40))(v30, v31, v17);
LABEL_19:
  uint64_t v36 = a3[16];
  uint64_t v37 = (char *)a1 + v36;
  uint64_t v38 = (char *)a2 + v36;
  int v39 = sub_10001044C((uint64_t)a1 + v36, 1, v17);
  int v40 = sub_10001044C((uint64_t)v38, 1, v17);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v37, v38, v17);
      sub_1000101E8((uint64_t)v37, 0, 1, v17);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  uint64_t v41 = *(void *)(v17 - 8);
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v41 + 8))(v37, v17);
LABEL_24:
    uint64_t v42 = sub_100011D80(&qword_10012E458);
    memcpy(v37, v38, *(void *)(*(void *)(v42 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v41 + 40))(v37, v38, v17);
LABEL_25:
  uint64_t v43 = a3[18];
  *(void *)((char *)a1 + a3[17]) = *(void *)((char *)a2 + a3[17]);
  int v44 = (char *)a1 + v43;
  uint64_t v45 = (char *)a2 + v43;
  uint64_t v46 = type metadata accessor for CachedServerDataSyncAttempt(0);
  int v47 = sub_10001044C((uint64_t)v44, 1, v46);
  int v48 = sub_10001044C((uint64_t)v45, 1, v46);
  if (!v47)
  {
    if (!v48)
    {
      *int v44 = *v45;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v17 - 8) + 40))(&v44[*(int *)(v46 + 20)], &v45[*(int *)(v46 + 20)], v17);
      goto LABEL_31;
    }
    sub_1000A12B8((uint64_t)v44, (void (*)(void))type metadata accessor for CachedServerDataSyncAttempt);
    goto LABEL_30;
  }
  if (v48)
  {
LABEL_30:
    uint64_t v49 = sub_100011D80(&qword_10012E4A0);
    memcpy(v44, v45, *(void *)(*(void *)(v49 - 8) + 64));
    goto LABEL_31;
  }
  *int v44 = *v45;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v17 - 8) + 32))(&v44[*(int *)(v46 + 20)], &v45[*(int *)(v46 + 20)], v17);
  sub_1000101E8((uint64_t)v44, 0, 1, v46);
LABEL_31:
  *((unsigned char *)a1 + a3[19]) = *((unsigned char *)a2 + a3[19]);
  return a1;
}

uint64_t sub_1000A0244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A0258);
}

uint64_t sub_1000A0258(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF) {
    return sub_1000A2798(*(void *)(a1 + 8));
  }
  type metadata accessor for AccountIdentity();
  sub_10000F6F8();
  if (*(_DWORD *)(v8 + 84) == a2)
  {
    uint64_t v9 = v7;
    uint64_t v10 = a3[5];
  }
  else
  {
    sub_100011D80(&qword_10012E458);
    sub_10000F6F8();
    if (*(_DWORD *)(v12 + 84) == a2)
    {
      uint64_t v9 = v11;
      uint64_t v10 = a3[13];
    }
    else
    {
      uint64_t v9 = sub_100011D80(&qword_10012E4A0);
      uint64_t v10 = a3[18];
    }
  }
  return sub_10001044C(a1 + v10, a2, v9);
}

uint64_t sub_1000A0324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A0338);
}

uint64_t sub_1000A0338(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + _Block_object_dispose(&a9, 8) = (a2 - 1);
  }
  else
  {
    type metadata accessor for AccountIdentity();
    sub_10000F6F8();
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a4[5];
    }
    else
    {
      sub_100011D80(&qword_10012E458);
      sub_10000F6F8();
      if (*(_DWORD *)(v13 + 84) == a3)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a4[13];
      }
      else
      {
        uint64_t v10 = sub_100011D80(&qword_10012E4A0);
        uint64_t v11 = a4[18];
      }
    }
    return sub_1000101E8(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_1000A040C()
{
  type metadata accessor for AccountIdentity();
  if (v0 <= 0x3F)
  {
    sub_100077720(319, &qword_10012E608, (void (*)(uint64_t))&type metadata accessor for Date);
    if (v1 <= 0x3F)
    {
      sub_100077720(319, (unint64_t *)&unk_10012E610, (void (*)(uint64_t))type metadata accessor for CachedServerDataSyncAttempt);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

unsigned char *storeEnumTagSinglePayload for CachedServerDataSyncAttempt.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A0650);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncAttempt.CodingKeys()
{
  return &type metadata for CachedServerDataSyncAttempt.CodingKeys;
}

void type metadata accessor for CachedServerDataSyncTrigger()
{
}

unint64_t sub_1000A06A0()
{
  unint64_t result = qword_10012F308;
  if (!qword_10012F308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F308);
  }
  return result;
}

unint64_t sub_1000A06F0()
{
  unint64_t result = qword_10012F310;
  if (!qword_10012F310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F310);
  }
  return result;
}

void sub_1000A073C(unsigned char *a1@<X8>)
{
  sub_10009B378();
  if (!v1) {
    *a1 = v3;
  }
}

#error "1000A0778: call analysis failed (funcsize=7)"

uint64_t sub_1000A0784(uint64_t a1)
{
  unint64_t v2 = sub_1000A20C4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A07C0(uint64_t a1)
{
  unint64_t v2 = sub_1000A20C4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A07FC()
{
  return sub_10009BED8(*v0);
}

uint64_t sub_1000A0804@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10009BC58(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000A082C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10009BED0();
  *a1 = result;
  return result;
}

uint64_t sub_1000A0854(uint64_t a1)
{
  unint64_t v2 = sub_1000A1F18();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A0890(uint64_t a1)
{
  unint64_t v2 = sub_1000A1F18();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A08CC(uint64_t a1)
{
  unint64_t v2 = sub_1000A2078();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A0908(uint64_t a1)
{
  unint64_t v2 = sub_1000A2078();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A0944(uint64_t a1)
{
  unint64_t v2 = sub_1000A202C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A0980(uint64_t a1)
{
  unint64_t v2 = sub_1000A202C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A09BC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10009BFA0();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000A09E8()
{
  return sub_1000796EC();
}

uint64_t sub_1000A0A04@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100008434();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000A0A30(uint64_t a1)
{
  unint64_t v2 = sub_1000A1FE0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A0A6C(uint64_t a1)
{
  unint64_t v2 = sub_1000A1FE0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A0AA8(uint64_t a1)
{
  unint64_t v2 = sub_1000A2110();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A0AE4(uint64_t a1)
{
  unint64_t v2 = sub_1000A2110();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000A0B20(unsigned char *a1@<X8>)
{
  sub_10009C318();
  if (!v1) {
    *a1 = v3;
  }
}

void sub_1000A0B4C()
{
}

uint64_t sub_1000A0B68()
{
  return sub_10009CCB8(*v0);
}

uint64_t sub_1000A0B70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10009CA98(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000A0B98(uint64_t a1)
{
  unint64_t v2 = sub_1000A1170();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A0BD4(uint64_t a1)
{
  unint64_t v2 = sub_1000A1170();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_1000A0C18()
{
  return Hasher._finalize()();
}

void sub_1000A0C54()
{
}

uint64_t sub_1000A0C6C(void *a1)
{
  return sub_10009CD68(a1);
}

uint64_t sub_1000A0C88()
{
  return sub_10009DD80(&qword_10012F318, (void (*)(uint64_t))type metadata accessor for CachedServerDataSyncTaskSchedule);
}

unint64_t sub_1000A0CD4()
{
  unint64_t result = qword_10012F320;
  if (!qword_10012F320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F320);
  }
  return result;
}

unint64_t sub_1000A0D24()
{
  unint64_t result = qword_10012F328;
  if (!qword_10012F328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F328);
  }
  return result;
}

unint64_t sub_1000A0D74()
{
  unint64_t result = qword_10012F330;
  if (!qword_10012F330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F330);
  }
  return result;
}

unint64_t sub_1000A0DC0()
{
  unint64_t result = qword_10012F398;
  if (!qword_10012F398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F398);
  }
  return result;
}

unint64_t sub_1000A0E0C()
{
  unint64_t result = qword_10012F3A8;
  if (!qword_10012F3A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F3A8);
  }
  return result;
}

unint64_t sub_1000A0E58()
{
  unint64_t result = qword_10012F3B0;
  if (!qword_10012F3B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F3B0);
  }
  return result;
}

unint64_t sub_1000A0EA4()
{
  unint64_t result = qword_10012F3B8;
  if (!qword_10012F3B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F3B8);
  }
  return result;
}

unint64_t sub_1000A0EF0()
{
  unint64_t result = qword_10012F3C0;
  if (!qword_10012F3C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F3C0);
  }
  return result;
}

unint64_t sub_1000A0F3C()
{
  unint64_t result = qword_10012F3C8;
  if (!qword_10012F3C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F3C8);
  }
  return result;
}

unint64_t sub_1000A0F88()
{
  unint64_t result = qword_10012F3D0;
  if (!qword_10012F3D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F3D0);
  }
  return result;
}

unint64_t sub_1000A0FD4()
{
  unint64_t result = qword_10012F3D8;
  if (!qword_10012F3D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F3D8);
  }
  return result;
}

unint64_t sub_1000A1020()
{
  unint64_t result = qword_10012F3E0;
  if (!qword_10012F3E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F3E0);
  }
  return result;
}

unint64_t sub_1000A106C()
{
  unint64_t result = qword_10012F3E8;
  if (!qword_10012F3E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F3E8);
  }
  return result;
}

unint64_t sub_1000A10B8()
{
  unint64_t result = qword_10012F3F0;
  if (!qword_10012F3F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F3F0);
  }
  return result;
}

unint64_t sub_1000A1104()
{
  unint64_t result = qword_10012F3F8;
  if (!qword_10012F3F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F3F8);
  }
  return result;
}

uint64_t sub_1000A1150(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  long long v4 = a1[2];
  *(_DWORD *)(a2 + 4_Block_object_dispose(&a9, 8) = *((_DWORD *)a1 + 12);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v2;
  return a2;
}

unint64_t sub_1000A1170()
{
  unint64_t result = qword_10012F468;
  if (!qword_10012F468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F468);
  }
  return result;
}

unint64_t sub_1000A11BC()
{
  unint64_t result = qword_10012F478;
  if (!qword_10012F478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F478);
  }
  return result;
}

unint64_t sub_1000A1208()
{
  unint64_t result = qword_10012F480;
  if (!qword_10012F480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F480);
  }
  return result;
}

uint64_t sub_1000A1254(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CachedServerDataSyncTaskSchedule(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A12B8(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_10000A430();
  sub_1000084F8();
  v3();
  return a1;
}

unint64_t sub_1000A1310()
{
  unint64_t result = qword_10012F498;
  if (!qword_10012F498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F498);
  }
  return result;
}

unint64_t sub_1000A135C()
{
  unint64_t result = qword_10012F4A0;
  if (!qword_10012F4A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F4A0);
  }
  return result;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncTaskSchedule.CodingKeys()
{
  return &type metadata for CachedServerDataSyncTaskSchedule.CodingKeys;
}

uint64_t _s12amsaccountsd27CachedServerDataSyncTriggerO10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF6)
  {
    if (a2 + 10 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 10) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 11;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v5 = v6 - 11;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *_s12amsaccountsd27CachedServerDataSyncTriggerO10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *unint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A1514);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncTrigger.CodingKeys()
{
  return &type metadata for CachedServerDataSyncTrigger.CodingKeys;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncTrigger.PushNotificationCodingKeys()
{
  return &type metadata for CachedServerDataSyncTrigger.PushNotificationCodingKeys;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncTrigger.DataExpiredCodingKeys()
{
  return &type metadata for CachedServerDataSyncTrigger.DataExpiredCodingKeys;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncTrigger.LocalChangeCodingKeys()
{
  return &type metadata for CachedServerDataSyncTrigger.LocalChangeCodingKeys;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncTrigger.RequestFailedCodingKeys()
{
  return &type metadata for CachedServerDataSyncTrigger.RequestFailedCodingKeys;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncTrigger.SystemUpdateCodingKeys()
{
  return &type metadata for CachedServerDataSyncTrigger.SystemUpdateCodingKeys;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncTrigger.PollingCodingKeys()
{
  return &type metadata for CachedServerDataSyncTrigger.PollingCodingKeys;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncTrigger.ScheduledActivityCodingKeys()
{
  return &type metadata for CachedServerDataSyncTrigger.ScheduledActivityCodingKeys;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncTrigger.ForcedCodingKeys()
{
  return &type metadata for CachedServerDataSyncTrigger.ForcedCodingKeys;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncTrigger.PlaceHolderCodingKeys()
{
  return &type metadata for CachedServerDataSyncTrigger.PlaceHolderCodingKeys;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncTrigger.ManualSyncCodingKeys()
{
  return &type metadata for CachedServerDataSyncTrigger.ManualSyncCodingKeys;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncTrigger.AccountAuthCodingKeys()
{
  return &type metadata for CachedServerDataSyncTrigger.AccountAuthCodingKeys;
}

void type metadata accessor for CachedServerDataSyncReason()
{
}

unint64_t sub_1000A160C()
{
  unint64_t result = qword_10012F4A8;
  if (!qword_10012F4A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F4A8);
  }
  return result;
}

unint64_t sub_1000A165C()
{
  unint64_t result = qword_10012F4B0;
  if (!qword_10012F4B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F4B0);
  }
  return result;
}

unint64_t sub_1000A16AC()
{
  unint64_t result = qword_10012F4B8;
  if (!qword_10012F4B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F4B8);
  }
  return result;
}

unint64_t sub_1000A16FC()
{
  unint64_t result = qword_10012F4C0;
  if (!qword_10012F4C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F4C0);
  }
  return result;
}

unint64_t sub_1000A174C()
{
  unint64_t result = qword_10012F4C8;
  if (!qword_10012F4C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F4C8);
  }
  return result;
}

unint64_t sub_1000A179C()
{
  unint64_t result = qword_10012F4D0;
  if (!qword_10012F4D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F4D0);
  }
  return result;
}

unint64_t sub_1000A17EC()
{
  unint64_t result = qword_10012F4D8;
  if (!qword_10012F4D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F4D8);
  }
  return result;
}

unint64_t sub_1000A183C()
{
  unint64_t result = qword_10012F4E0;
  if (!qword_10012F4E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F4E0);
  }
  return result;
}

unint64_t sub_1000A188C()
{
  unint64_t result = qword_10012F4E8;
  if (!qword_10012F4E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F4E8);
  }
  return result;
}

unint64_t sub_1000A18DC()
{
  unint64_t result = qword_10012F4F0;
  if (!qword_10012F4F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F4F0);
  }
  return result;
}

unint64_t sub_1000A192C()
{
  unint64_t result = qword_10012F4F8;
  if (!qword_10012F4F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F4F8);
  }
  return result;
}

unint64_t sub_1000A197C()
{
  unint64_t result = qword_10012F500;
  if (!qword_10012F500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F500);
  }
  return result;
}

unint64_t sub_1000A19CC()
{
  unint64_t result = qword_10012F508;
  if (!qword_10012F508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F508);
  }
  return result;
}

unint64_t sub_1000A1A1C()
{
  unint64_t result = qword_10012F510;
  if (!qword_10012F510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F510);
  }
  return result;
}

unint64_t sub_1000A1A6C()
{
  unint64_t result = qword_10012F518;
  if (!qword_10012F518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F518);
  }
  return result;
}

unint64_t sub_1000A1ABC()
{
  unint64_t result = qword_10012F520;
  if (!qword_10012F520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F520);
  }
  return result;
}

unint64_t sub_1000A1B0C()
{
  unint64_t result = qword_10012F528;
  if (!qword_10012F528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F528);
  }
  return result;
}

unint64_t sub_1000A1B5C()
{
  unint64_t result = qword_10012F530;
  if (!qword_10012F530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F530);
  }
  return result;
}

unint64_t sub_1000A1BAC()
{
  unint64_t result = qword_10012F538;
  if (!qword_10012F538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F538);
  }
  return result;
}

unint64_t sub_1000A1BFC()
{
  unint64_t result = qword_10012F540;
  if (!qword_10012F540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F540);
  }
  return result;
}

unint64_t sub_1000A1C4C()
{
  unint64_t result = qword_10012F548;
  if (!qword_10012F548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F548);
  }
  return result;
}

unint64_t sub_1000A1C9C()
{
  unint64_t result = qword_10012F550;
  if (!qword_10012F550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F550);
  }
  return result;
}

unint64_t sub_1000A1CEC()
{
  unint64_t result = qword_10012F558;
  if (!qword_10012F558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F558);
  }
  return result;
}

unint64_t sub_1000A1D3C()
{
  unint64_t result = qword_10012F560;
  if (!qword_10012F560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F560);
  }
  return result;
}

unint64_t sub_1000A1D8C()
{
  unint64_t result = qword_10012F568;
  if (!qword_10012F568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F568);
  }
  return result;
}

unint64_t sub_1000A1DDC()
{
  unint64_t result = qword_10012F570;
  if (!qword_10012F570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F570);
  }
  return result;
}

unint64_t sub_1000A1E2C()
{
  unint64_t result = qword_10012F578;
  if (!qword_10012F578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F578);
  }
  return result;
}

unint64_t sub_1000A1E7C()
{
  unint64_t result = qword_10012F580;
  if (!qword_10012F580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F580);
  }
  return result;
}

unint64_t sub_1000A1ECC()
{
  unint64_t result = qword_10012F588;
  if (!qword_10012F588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F588);
  }
  return result;
}

unint64_t sub_1000A1F18()
{
  unint64_t result = qword_10012F5C0;
  if (!qword_10012F5C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F5C0);
  }
  return result;
}

uint64_t sub_1000A1F64(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result < a5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((uint64_t)(a6 >> 1) < result || (uint64_t)(a6 >> 1) < a2) {
    goto LABEL_10;
  }
  if (a2 < a5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((a2 & 0x8000000000000000) == 0) {
    return swift_unknownObjectRetain();
  }
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1000A1FE0()
{
  unint64_t result = qword_10012F5C8;
  if (!qword_10012F5C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F5C8);
  }
  return result;
}

unint64_t sub_1000A202C()
{
  unint64_t result = qword_10012F5D0;
  if (!qword_10012F5D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F5D0);
  }
  return result;
}

unint64_t sub_1000A2078()
{
  unint64_t result = qword_10012F5D8;
  if (!qword_10012F5D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F5D8);
  }
  return result;
}

unint64_t sub_1000A20C4()
{
  unint64_t result = qword_10012F5E0;
  if (!qword_10012F5E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F5E0);
  }
  return result;
}

unint64_t sub_1000A2110()
{
  unint64_t result = qword_10012F5E8;
  if (!qword_10012F5E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F5E8);
  }
  return result;
}

uint64_t _s12amsaccountsd32CachedServerDataSyncTaskScheduleV10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *_s12amsaccountsd32CachedServerDataSyncTaskScheduleV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A22B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncReason.CodingKeys()
{
  return &type metadata for CachedServerDataSyncReason.CodingKeys;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncReason.StandardSyncCodingKeys()
{
  return &type metadata for CachedServerDataSyncReason.StandardSyncCodingKeys;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncReason.AttemptInflightCodingKeys()
{
  return &type metadata for CachedServerDataSyncReason.AttemptInflightCodingKeys;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncReason.FailureRetryCodingKeys()
{
  return &type metadata for CachedServerDataSyncReason.FailureRetryCodingKeys;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncReason.PollingCodingKeys()
{
  return &type metadata for CachedServerDataSyncReason.PollingCodingKeys;
}

ValueMetadata *type metadata accessor for CachedServerDataSyncReason.PrioritySyncCodingKeys()
{
  return &type metadata for CachedServerDataSyncReason.PrioritySyncCodingKeys;
}

unint64_t sub_1000A233C()
{
  unint64_t result = qword_10012F620;
  if (!qword_10012F620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F620);
  }
  return result;
}

unint64_t sub_1000A238C()
{
  unint64_t result = qword_10012F628;
  if (!qword_10012F628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F628);
  }
  return result;
}

unint64_t sub_1000A23DC()
{
  unint64_t result = qword_10012F630;
  if (!qword_10012F630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F630);
  }
  return result;
}

unint64_t sub_1000A242C()
{
  unint64_t result = qword_10012F638;
  if (!qword_10012F638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F638);
  }
  return result;
}

unint64_t sub_1000A247C()
{
  unint64_t result = qword_10012F640;
  if (!qword_10012F640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F640);
  }
  return result;
}

unint64_t sub_1000A24CC()
{
  unint64_t result = qword_10012F648;
  if (!qword_10012F648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F648);
  }
  return result;
}

unint64_t sub_1000A251C()
{
  unint64_t result = qword_10012F650;
  if (!qword_10012F650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F650);
  }
  return result;
}

unint64_t sub_1000A256C()
{
  unint64_t result = qword_10012F658;
  if (!qword_10012F658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F658);
  }
  return result;
}

unint64_t sub_1000A25BC()
{
  unint64_t result = qword_10012F660;
  if (!qword_10012F660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F660);
  }
  return result;
}

unint64_t sub_1000A260C()
{
  unint64_t result = qword_10012F668;
  if (!qword_10012F668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F668);
  }
  return result;
}

unint64_t sub_1000A265C()
{
  unint64_t result = qword_10012F670;
  if (!qword_10012F670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F670);
  }
  return result;
}

unint64_t sub_1000A26AC()
{
  unint64_t result = qword_10012F678;
  if (!qword_10012F678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F678);
  }
  return result;
}

unint64_t sub_1000A26FC()
{
  unint64_t result = qword_10012F680;
  if (!qword_10012F680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F680);
  }
  return result;
}

uint64_t sub_1000A2758()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

void sub_1000A2770(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 144) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1000A278C()
{
  return v0;
}

uint64_t sub_1000A2798@<X0>(unint64_t a1@<X8>)
{
  if (a1 >= 0xFFFFFFFF) {
    LODWORD(a1) = -1;
  }
  return (a1 + 1);
}

id sub_1000A27AC()
{
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [(id)swift_getObjCClassFromMetadata() bagForProfile:v0 profileVersion:v1];

  return v2;
}

uint64_t sub_1000A2840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000AAF34();
  uint64_t v5 = type metadata accessor for TaskPriority();
  if (sub_10001044C(v3, 1, v5) == 1)
  {
    sub_1000AABFC(v3, &qword_10012E4B0);
  }
  else
  {
    TaskPriority.rawValue.getter();
    sub_10000A430();
    sub_1000084F8();
    v6();
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

id sub_1000A297C(uint64_t a1)
{
  id v9 = 0;
  id v2 = [self dataWithJSONObject:a1 options:0 error:&v9];
  id v3 = v9;
  if (v2)
  {
    uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v6 = v5;

    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    sub_1000AAC50();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    sub_1000124D4(v4, v6);
    id result = (id)swift_release();
    if (!v1) {
      return v9;
    }
  }
  else
  {
    uint64_t v8 = v3;
    _convertNSErrorToError(_:)();

    return (id)swift_willThrow();
  }
  return result;
}

void sub_1000A2ABC()
{
  sub_10000A46C();
  uint64_t ObjectType = swift_getObjectType();
  type metadata accessor for AccountIdentity.DSID();
  sub_100008460();
  __chkstk_darwin(v2);
  sub_1000AAEB8();
  sub_100008460();
  __chkstk_darwin(v3);
  sub_100011674();
  sub_100011D80((uint64_t *)&unk_10012E440);
  uint64_t v4 = type metadata accessor for LogInterpolation();
  sub_1000082C8(v4);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3F0;
  void v12[3] = ObjectType;
  v12[0] = v0;
  v0;
  id v5 = (id)AMSLogKey();
  if (v5)
  {
    unint64_t v6 = v5;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  static LogInterpolation.prefix(_:_:)();
  swift_bridgeObjectRelease();
  sub_10000D47C((uint64_t)v12);
  sub_10000A3D0();
  Log.default(_:)();
  swift_bridgeObjectRelease();
  sub_1000AAF5C();
  v7();
  if (qword_10012E210 != -1) {
    swift_once();
  }
  sub_100007480(0xD00000000000001CLL, 0x80000001001029D0);
  AccountIdentity.dsid.getter();
  sub_100017758();
  sub_1000084F8();
  v8();
  if (v11)
  {
    sub_100007468(&v10, (uint64_t)v12);
    sub_100011D80(&qword_10012EEA0);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1000DA680;
    sub_100018570((uint64_t)v12, v9 + 32);
    sub_1000A7C5C();
    swift_bridgeObjectRelease();
    sub_10000D47C((uint64_t)v12);
  }
  else
  {
    sub_1000AABFC((uint64_t)&v10, &qword_10012F7C0);
  }
  sub_100009CC0(0xD00000000000001CLL, 0x80000001001029D0);
  sub_10000A484();
}

id sub_1000A2DA0()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for CachedServerDataService()) init];
  qword_100137170 = (uint64_t)result;
  return result;
}

void sub_1000A2DD0()
{
  sub_10000A46C();
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = type metadata accessor for Log();
  sub_100008460();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  BOOL v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AccountDataCollection();
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = v0;
  swift_defaultActor_initialize();
  type metadata accessor for AccountIdentity();
  sub_1000AAF34();
  type metadata accessor for AccountDataAccessActor();
  sub_1000174B0();
  *(void *)(v8 + 112) = Dictionary.init(dictionaryLiteral:)();
  *(void *)&v9[OBJC_IVAR____TtC12amsaccountsd23CachedServerDataService_accountDataActors] = v8;
  sub_10001065C(0, &qword_10012F7A0);
  sub_1000161F4();
  id v10 = sub_1000A27AC();
  *(void *)&v9[OBJC_IVAR____TtC12amsaccountsd23CachedServerDataService_bag] = v10;
  uint64_t v11 = type metadata accessor for MetricsOnInternalBuilds();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v10;
  *(void *)(v12 + 24) = [self internalInstanceUsingBag:v10];
  uint64_t v13 = (uint64_t *)&v9[OBJC_IVAR____TtC12amsaccountsd23CachedServerDataService_metrics];
  _OWORD v13[3] = v11;
  void v13[4] = (uint64_t)&off_100116A20;
  *uint64_t v13 = v12;

  v20.receiver = v9;
  v20.super_class = ObjectType;
  id v14 = objc_msgSendSuper2(&v20, "init");
  static Log.accountsDataSync.getter();
  sub_100011D80((uint64_t *)&unk_10012E440);
  uint64_t v15 = type metadata accessor for LogInterpolation();
  sub_1000082C8(v15);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3F0;
  v19[3] = ObjectType;
  v19[0] = v14;
  id v16 = v14;
  id v17 = (id)AMSLogKey();
  if (v17)
  {
    int v18 = v17;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  static LogInterpolation.prefix(_:_:)();
  swift_bridgeObjectRelease();
  sub_10000D47C((uint64_t)v19);
  sub_100012258();
  LogInterpolation.init(stringLiteral:)();
  Log.default(_:)();
  swift_bridgeObjectRelease();

  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v2);
  sub_10000A484();
}

#error "1000A31D4: call analysis failed (funcsize=142)"

#error "1000A342C: call analysis failed (funcsize=144)"

#error "1000A3690: call analysis failed (funcsize=147)"

uint64_t sub_1000A37D8()
{
  sub_100008308();
  *(unsigned char *)(v1 + 417) = v2;
  *(void *)(v1 + 240) = v3;
  *(void *)(v1 + 24_Block_object_dispose(&a9, 8) = v0;
  *(unsigned char *)(v1 + 416) = v4;
  *(void *)(v1 + 256) = swift_getObjectType();
  uint64_t v5 = type metadata accessor for Date();
  *(void *)(v1 + 264) = v5;
  sub_1000082C8(v5);
  *(void *)(v1 + 272) = v6;
  *(void *)(v1 + 280) = sub_1000084E0();
  uint64_t v7 = type metadata accessor for AccountIdentity();
  *(void *)(v1 + 28_Block_object_dispose(&a9, 8) = v7;
  sub_1000082C8(v7);
  *(void *)(v1 + 296) = v8;
  *(void *)(v1 + 304) = sub_1000084E0();
  uint64_t v9 = type metadata accessor for LogInterpolation.StringInterpolation();
  sub_1000085F4(v9);
  *(void *)(v1 + 312) = sub_1000084E0();
  uint64_t v10 = type metadata accessor for Log();
  *(void *)(v1 + 320) = v10;
  sub_1000082C8(v10);
  *(void *)(v1 + 32_Block_object_dispose(&a9, 8) = v11;
  *(void *)(v1 + 336) = sub_1000084E0();
  sub_10000F9E8();
  return _swift_task_switch(v12, v13, v14);
}

uint64_t sub_1000A38F8()
{
  uint64_t v1 = v0;
  char v2 = (void *)v0[31];
  uint64_t v3 = v0[32];
  static Log.accountsDataSync.getter();
  sub_100011D80((uint64_t *)&unk_10012E440);
  uint64_t v4 = sub_100005AD4();
  sub_1000082C8(v4);
  sub_1000AAF98();
  uint64_t v5 = sub_100016390();
  v0[14] = v2;
  uint64_t v6 = (uint64_t)(v0 + 14);
  int v26 = (uint64_t *)(v6 + 96);
  *(_OWORD *)(v5 + 16) = xmmword_1000DA3D0;
  *(void *)(v6 + 24) = v3;
  id v7 = v2;
  id v8 = (id)AMSLogKey();
  if (v8)
  {
    uint64_t v9 = v8;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    sub_1000AB0D4();
  }
  uint64_t v10 = v1[37];
  uint64_t v25 = v1[36];
  char v24 = *((unsigned char *)v1 + 417);
  uint64_t v11 = (void *)v1[30];
  char v12 = v1[52] & 1;
  static LogInterpolation.prefix(_:_:)();
  swift_bridgeObjectRelease();
  sub_10000D47C(v6);
  LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v13._countAndFlagsBits = 0x20676E6974746553;
  v13._object = (void *)0xE800000000000000;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(v13);
  v1[21] = &unk_100115300;
  *((unsigned char *)v1 + 144) = v12;
  LogInterpolation.StringInterpolation.appendInterpolation(_:)();
  sub_1000AABFC(v6 + 32, &qword_10012EFB0);
  v14._countAndFlagsBits = 544175136;
  v14._object = (void *)0xE400000000000000;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(v14);
  v1[25] = &type metadata for Bool;
  *((unsigned char *)v1 + 176) = v24;
  LogInterpolation.StringInterpolation.appendInterpolation(_:)();
  sub_1000AABFC(v6 + 64, &qword_10012EFB0);
  sub_100015BCC();
  LogInterpolation.init(stringInterpolation:)();
  uint64_t v15 = sub_1000087B0(v11, v11[3]);
  v1[29] = v25;
  uint64_t v16 = sub_1000042C4(v26);
  id v17 = *(void (**)(uint64_t *, void *, uint64_t))(v10 + 16);
  v1[43] = v17;
  v1[44] = (v10 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v17(v16, v15, v25);
  static LogInterpolation.traceableSensitive(_:)();
  sub_1000AABFC((uint64_t)v26, &qword_10012EFB0);
  Log.default(_:)();
  swift_bridgeObjectRelease();
  sub_1000084F8();
  v18();
  if (qword_10012E210 != -1) {
    swift_once();
  }
  unint64_t v19 = sub_1000AB0A0();
  sub_100007480(v19, v20);
  uint64_t v21 = (void *)swift_task_alloc();
  v1[45] = v21;
  *uint64_t v21 = v1;
  v21[1] = sub_1000A3C28;
  uint64_t v22 = sub_1000AB154(v1[30]);
  return sub_1000175F0(v22);
}

uint64_t sub_1000A3C28()
{
  sub_100008308();
  sub_1000082E0();
  sub_10000A43C();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 36_Block_object_dispose(&a9, 8) = v4;
  *(void *)(v2 + 376) = v0;
  swift_task_dealloc();
  sub_10000F9E8();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1000A3D0C()
{
  sub_100008308();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 384) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000A3DAC;
  uint64_t v2 = sub_1000AAE90();
  return sub_10001773C(v2, v3);
}

uint64_t sub_1000A3DAC()
{
  sub_100008308();
  sub_1000082E0();
  sub_10000A43C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_100008314();
  *uint64_t v5 = v4;
  *(void *)(v6 + 392) = v0;
  swift_task_dealloc();
  sub_10000F9E8();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000A3E88()
{
  uint64_t v1 = *(void (**)(uint64_t, void *, uint64_t))(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 304);
  uint64_t v3 = *(void *)(v0 + 288);
  uint64_t v4 = sub_1000087B0(*(void **)(v0 + 240), *(void *)(*(void *)(v0 + 240) + 24));
  v1(v2, v4, v3);
  static Date.now.getter();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 400) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1000A3F80;
  return sub_10006D87C();
}

uint64_t sub_1000A3F80()
{
  sub_100005AEC();
  sub_1000086A0();
  sub_10000A43C();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 40_Block_object_dispose(&a9, 8) = v0;
  swift_task_dealloc();
  sub_1000AB0C8();
  sub_1000AAD48();
  v4();
  sub_10000A4CC();
  v5();
  sub_10000F9E8();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_1000A4104()
{
  sub_1000AB000();
  sub_100005AEC();
  swift_release();
  unint64_t v0 = sub_1000AB0A0();
  sub_100009CC0(v0, v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000800C();
  sub_100015F64();
  return v3(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1000A41A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_100015FD4();
  sub_100005B20();
  uint64_t v18 = *(void *)(v16 + 376);
  sub_100016710((void *)(*(void *)(v16 + 248) + OBJC_IVAR____TtC12amsaccountsd23CachedServerDataService_metrics));
  uint64_t v19 = Dictionary.init(dictionaryLiteral:)();
  if (qword_10012E1F8 != -1) {
    swift_once();
  }
  sub_1000AADA8();
  swift_errorRetain();
  sub_1000B5B9C(v18, v19);
  swift_errorRelease();
  sub_10000F8FC();
  sub_1000AAD58(v20);
  swift_bridgeObjectRelease();
  sub_1000121B0();
  v21();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_willThrow();
  sub_1000AAEA0(v17 | 6, (uint64_t)"accountDataChangeValue");
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000AACBC();
  sub_100072F00();
  return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_1000A431C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_100015FD4();
  sub_100005B20();
  swift_release();
  uint64_t v18 = *(void *)(v16 + 392);
  sub_100016710((void *)(*(void *)(v16 + 248) + OBJC_IVAR____TtC12amsaccountsd23CachedServerDataService_metrics));
  uint64_t v19 = Dictionary.init(dictionaryLiteral:)();
  if (qword_10012E1F8 != -1) {
    swift_once();
  }
  sub_1000AADA8();
  swift_errorRetain();
  sub_1000B5B9C(v18, v19);
  swift_errorRelease();
  sub_10000F8FC();
  sub_1000AAD58(v20);
  swift_bridgeObjectRelease();
  sub_1000121B0();
  v21();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_willThrow();
  sub_1000AAEA0(v17 | 6, (uint64_t)"accountDataChangeValue");
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000AACBC();
  sub_100072F00();
  return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_1000A4498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_100015FD4();
  sub_100005B20();
  swift_release();
  uint64_t v18 = *(void *)(v16 + 408);
  sub_100016710((void *)(*(void *)(v16 + 248) + OBJC_IVAR____TtC12amsaccountsd23CachedServerDataService_metrics));
  uint64_t v19 = Dictionary.init(dictionaryLiteral:)();
  if (qword_10012E1F8 != -1) {
    swift_once();
  }
  sub_1000AADA8();
  swift_errorRetain();
  sub_1000B5B9C(v18, v19);
  swift_errorRelease();
  sub_10000F8FC();
  sub_1000AAD58(v20);
  swift_bridgeObjectRelease();
  sub_1000121B0();
  v21();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_willThrow();
  sub_1000AAEA0(v17 | 6, (uint64_t)"accountDataChangeValue");
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000AACBC();
  sub_100072F00();
  return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_1000A4614()
{
  sub_100008308();
  v1[22] = v2;
  v1[23] = v0;
  v1[24] = swift_getObjectType();
  uint64_t v3 = type metadata accessor for Date();
  v1[25] = v3;
  sub_1000082C8(v3);
  v1[26] = v4;
  v1[27] = sub_1000084E0();
  uint64_t v5 = type metadata accessor for Log();
  v1[28] = v5;
  sub_1000082C8(v5);
  v1[29] = v6;
  v1[30] = sub_1000084E0();
  sub_10000F9E8();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000A46DC()
{
  sub_1000167D4();
  sub_100016230();
  uint64_t v2 = (void *)v0[23];
  uint64_t v1 = v0[24];
  static Log.accountsDataSync.getter();
  sub_100011D80((uint64_t *)&unk_10012E440);
  uint64_t v3 = sub_100005AD4();
  sub_1000082C8(v3);
  sub_1000AAF98();
  uint64_t v4 = sub_100016390();
  v0[14] = v2;
  *(_OWORD *)(v4 + 16) = xmmword_1000DA3D0;
  v0[17] = v1;
  id v5 = v2;
  id v6 = (id)AMSLogKey();
  if (v6)
  {
    uint64_t v7 = v6;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    sub_1000734E0();
  }
  uint64_t v8 = v0[29];
  uint64_t v14 = v0[30];
  uint64_t v15 = v0[28];
  sub_100073298();
  swift_bridgeObjectRelease();
  sub_10000D47C((uint64_t)(v0 + 14));
  sub_100012258();
  LogInterpolation.init(stringLiteral:)();
  v0[21] = sub_10001619C();
  sub_1000042C4(v0 + 18);
  sub_10000A430();
  sub_100008000();
  v9();
  static LogInterpolation.traceableSensitive(_:)();
  sub_1000AABFC((uint64_t)(v0 + 18), &qword_10012EFB0);
  Log.default(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v14, v15);
  if (qword_10012E210 != -1) {
    swift_once();
  }
  sub_100009790();
  uint64_t v10 = (void *)swift_task_alloc();
  v0[31] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_1000A4918;
  sub_1000AB154(v0[22]);
  sub_10000B224();
  return sub_1000175F0(v11);
}

uint64_t sub_1000A4918()
{
  sub_100008308();
  sub_1000082E0();
  sub_10000A43C();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 256) = v4;
  *(void *)(v2 + 264) = v0;
  swift_task_dealloc();
  sub_10000F9E8();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1000A49FC()
{
  sub_100008308();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000AB080(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_1000A4A98;
  uint64_t v3 = sub_1000AAE90();
  return sub_10001773C(v3, v4);
}

uint64_t sub_1000A4A98()
{
  sub_100008308();
  sub_1000082E0();
  sub_10000A43C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_100008314();
  *uint64_t v5 = v4;
  *(void *)(v6 + 280) = v0;
  swift_task_dealloc();
  sub_10000F9E8();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000A4B74()
{
  sub_100008308();
  static Date.now.getter();
  sub_10001656C();
  return _swift_task_switch(v0, v1, v2);
}

uint64_t sub_1000A4BD8()
{
  sub_100009C64();
  sub_1000AB034();
  sub_1000696E4();
  *(void *)(v1 + 28_Block_object_dispose(&a9, 8) = v0;
  sub_1000AAD48();
  v2();
  sub_10000F9E8();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000A4C6C()
{
  sub_100009C64();
  swift_release();
  sub_100016AB4();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000800C();
  return v0();
}

uint64_t sub_1000A4CF0()
{
  sub_100009C64();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100008600();
  return v0();
}

uint64_t sub_1000A4D80()
{
  sub_100008308();
  *(unsigned char *)(v1 + 28_Block_object_dispose(&a9, 8) = v2;
  *(void *)(v1 + 192) = v3;
  *(void *)(v1 + 200) = v0;
  *(void *)(v1 + 20_Block_object_dispose(&a9, 8) = swift_getObjectType();
  uint64_t v4 = type metadata accessor for AccountIdentity.DSID();
  *(void *)(v1 + 216) = v4;
  sub_1000082C8(v4);
  *(void *)(v1 + 224) = v5;
  *(void *)(v1 + 232) = sub_1000084E0();
  uint64_t v6 = type metadata accessor for LogInterpolation.StringInterpolation();
  sub_1000085F4(v6);
  *(void *)(v1 + 240) = sub_1000084E0();
  uint64_t v7 = type metadata accessor for Log();
  *(void *)(v1 + 24_Block_object_dispose(&a9, 8) = v7;
  sub_1000082C8(v7);
  *(void *)(v1 + 256) = v8;
  *(void *)(v1 + 264) = sub_1000084E0();
  sub_10000F9E8();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_1000A4E6C()
{
  uint64_t v3 = v1[25];
  uint64_t v4 = (void *)v1[26];
  static Log.accountsDataSync.getter();
  sub_100011D80((uint64_t *)&unk_10012E440);
  uint64_t v5 = sub_100005AD4();
  sub_1000082C8(v5);
  uint64_t v23 = *(void *)(v6 + 72);
  uint64_t v7 = (__n128 *)sub_100016390();
  v1[12] = v3;
  sub_100016274(v7, (__n128)xmmword_1000DA3D0);
  id v8 = (id)AMSLogKey();
  if (v8)
  {
    uint64_t v9 = v8;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    sub_1000734E0();
  }
  sub_10000FB98();
  swift_bridgeObjectRelease();
  sub_10000D47C((uint64_t)(v1 + 12));
  LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v10._countAndFlagsBits = sub_1000AB08C();
  LogInterpolation.StringInterpolation.appendLiteral(_:)(v10);
  sub_1000AB120((uint64_t)&type metadata for Bool);
  sub_1000AABFC((uint64_t)v0, &qword_10012EFB0);
  sub_100015BCC();
  LogInterpolation.init(stringInterpolation:)();
  v1[23] = sub_10001065C(0, &qword_10012EB18);
  v1[20] = v4;
  id v11 = v4;
  sub_1000AB0E0();
  sub_1000AABFC(v2 + 2 * v23, &qword_10012EFB0);
  Log.default(_:)();
  swift_bridgeObjectRelease();
  uint64_t v12 = sub_100016B48();
  v13(v12);
  id v14 = [v0 dsid];
  [v14 unsignedLongLongValue];

  AccountIdentity.DSID.init(_:)();
  sub_1000AAFDC();
  sub_1000084F8();
  v15();
  if (!v1[10])
  {
    sub_1000AABFC((uint64_t)v7, &qword_10012F7C0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000800C();
    sub_100008478();
    __asm { BRAA            X1, X16 }
  }
  sub_1000AB100();
  uint64_t v16 = swift_task_alloc();
  uint64_t v17 = (void *)sub_1000AB080(v16);
  *uint64_t v17 = v18;
  v17[1] = sub_1000A5130;
  sub_100008478();
  return sub_1000A37D8();
}

uint64_t sub_1000A5130()
{
  sub_100008308();
  sub_1000082E0();
  sub_10000A43C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_100008314();
  *uint64_t v5 = v4;
  *(void *)(v6 + 280) = v0;
  swift_task_dealloc();
  sub_10000F9E8();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000A520C()
{
  sub_100008308();
  sub_10000D47C(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000800C();
  return v1();
}

uint64_t sub_1000A5280()
{
  sub_100009C64();
  sub_10000D47C(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100008600();
  return v1();
}

uint64_t sub_1000A5324(void *a1, int a2, void *aBlock, void *a4)
{
  v4[2] = a1;
  long long v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  id v7 = a1;
  a4;
  uint64_t v8 = (void *)swift_task_alloc();
  void v4[5] = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_1000AACB8;
  return sub_1000A4D80();
}

uint64_t sub_1000A53F0()
{
  sub_100008308();
  *(unsigned char *)(v1 + 28_Block_object_dispose(&a9, 8) = v2;
  *(void *)(v1 + 192) = v3;
  *(void *)(v1 + 200) = v0;
  *(void *)(v1 + 20_Block_object_dispose(&a9, 8) = swift_getObjectType();
  uint64_t v4 = type metadata accessor for AccountIdentity.DSID();
  *(void *)(v1 + 216) = v4;
  sub_1000082C8(v4);
  *(void *)(v1 + 224) = v5;
  *(void *)(v1 + 232) = sub_1000084E0();
  uint64_t v6 = type metadata accessor for LogInterpolation.StringInterpolation();
  sub_1000085F4(v6);
  *(void *)(v1 + 240) = sub_1000084E0();
  uint64_t v7 = type metadata accessor for Log();
  *(void *)(v1 + 24_Block_object_dispose(&a9, 8) = v7;
  sub_1000082C8(v7);
  *(void *)(v1 + 256) = v8;
  *(void *)(v1 + 264) = sub_1000084E0();
  sub_10000F9E8();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_1000A54DC()
{
  uint64_t v3 = v1[25];
  uint64_t v4 = (void *)v1[26];
  static Log.accountsDataSync.getter();
  sub_100011D80((uint64_t *)&unk_10012E440);
  uint64_t v5 = sub_100005AD4();
  sub_1000082C8(v5);
  uint64_t v23 = *(void *)(v6 + 72);
  uint64_t v7 = (__n128 *)sub_100016390();
  v1[12] = v3;
  sub_100016274(v7, (__n128)xmmword_1000DA3D0);
  id v8 = (id)AMSLogKey();
  if (v8)
  {
    uint64_t v9 = v8;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    sub_1000734E0();
  }
  sub_10000FB98();
  swift_bridgeObjectRelease();
  sub_10000D47C((uint64_t)(v1 + 12));
  LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v10._object = (void *)0x8000000100102B00;
  v10._countAndFlagsBits = 0xD000000000000022;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(v10);
  sub_1000AB120((uint64_t)&type metadata for Bool);
  sub_1000AABFC((uint64_t)v0, &qword_10012EFB0);
  sub_100015BCC();
  LogInterpolation.init(stringInterpolation:)();
  v1[23] = sub_10001065C(0, &qword_10012EB18);
  v1[20] = v4;
  id v11 = v4;
  sub_1000AB0E0();
  sub_1000AABFC(v2 + 2 * v23, &qword_10012EFB0);
  Log.default(_:)();
  swift_bridgeObjectRelease();
  uint64_t v12 = sub_100016B48();
  v13(v12);
  id v14 = [v0 dsid];
  [v14 unsignedLongLongValue];

  AccountIdentity.DSID.init(_:)();
  sub_1000AAFDC();
  sub_1000084F8();
  v15();
  if (!v1[10])
  {
    sub_1000AABFC((uint64_t)v7, &qword_10012F7C0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000800C();
    sub_100008478();
    __asm { BRAA            X1, X16 }
  }
  sub_1000AB100();
  uint64_t v16 = swift_task_alloc();
  uint64_t v17 = (void *)sub_1000AB080(v16);
  *uint64_t v17 = v18;
  v17[1] = sub_1000A57AC;
  sub_100008478();
  return sub_1000A37D8();
}

uint64_t sub_1000A57AC()
{
  sub_100008308();
  sub_1000082E0();
  sub_10000A43C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_100008314();
  *uint64_t v5 = v4;
  *(void *)(v6 + 280) = v0;
  swift_task_dealloc();
  sub_10000F9E8();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000A58A8(void *a1, int a2, void *a3, char a4, void *aBlock, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = _Block_copy(aBlock);
  sub_1000AAE80();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a3;
  *(unsigned char *)(v12 + 24) = a4;
  *(void *)(v12 + 32) = v11;
  *(void *)(v12 + 40) = a1;
  id v13 = a3;
  id v14 = a1;
  return sub_10000E8D0(a7, v12);
}

uint64_t sub_1000A592C(void *a1, int a2, void *aBlock, void *a4)
{
  v4[2] = a1;
  long long v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  id v7 = a1;
  a4;
  uint64_t v8 = (void *)swift_task_alloc();
  void v4[5] = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_1000AACB8;
  return sub_1000A53F0();
}

uint64_t sub_1000A59F8()
{
  sub_100008308();
  v1[32] = v2;
  v1[33] = v0;
  v1[34] = swift_getObjectType();
  uint64_t v3 = type metadata accessor for Date();
  v1[35] = v3;
  sub_1000082C8(v3);
  v1[36] = v4;
  v1[37] = sub_1000084E0();
  uint64_t v5 = type metadata accessor for AccountIdentity.DSID();
  v1[38] = v5;
  sub_1000082C8(v5);
  v1[39] = v6;
  v1[40] = sub_1000084E0();
  uint64_t v7 = type metadata accessor for Log();
  v1[41] = v7;
  sub_1000082C8(v7);
  v1[42] = v8;
  v1[43] = sub_1000084E0();
  sub_10000F9E8();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_1000A5AF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_1000167D4();
  sub_100016230();
  uint64_t v15 = (void *)v14[33];
  uint64_t v16 = v14[34];
  static Log.accountsDataSync.getter();
  sub_100011D80((uint64_t *)&unk_10012E440);
  uint64_t v17 = sub_100005AD4();
  sub_1000082C8(v17);
  sub_1000AAF98();
  uint64_t v18 = sub_100016390();
  v14[24] = v15;
  uint64_t v39 = (uint64_t)(v14 + 28);
  int v40 = (long long *)(v14 + 19);
  *(_OWORD *)(v18 + 16) = xmmword_1000DA3D0;
  v14[27] = v16;
  id v19 = v15;
  id v20 = (id)AMSLogKey();
  if (v20)
  {
    uint64_t v21 = v20;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    sub_1000AAFC4();
  }
  uint64_t v23 = v14[42];
  uint64_t v22 = v14[43];
  uint64_t v38 = v14[41];
  uint64_t v24 = v14[32];
  static LogInterpolation.prefix(_:_:)();
  swift_bridgeObjectRelease();
  sub_10000D47C((uint64_t)(v14 + 24));
  sub_10000A3D0();
  v14[31] = &type metadata for UInt64;
  v14[28] = v24;
  static LogInterpolation.traceableSensitive(_:)();
  sub_1000AABFC(v39, &qword_10012EFB0);
  Log.default(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v38);
  if (qword_10012E210 != -1) {
    swift_once();
  }
  sub_100007480(0xD00000000000001BLL, 0x8000000100102AE0);
  AccountIdentity.DSID.init(_:)();
  sub_100017758();
  sub_1000AAF5C();
  v25();
  if (v14[22])
  {
    sub_100007468(v40, (uint64_t)(v14 + 14));
    uint64_t v26 = (void *)swift_task_alloc();
    v14[44] = v26;
    *uint64_t v26 = v14;
    v26[1] = sub_1000A5DFC;
    sub_1000AAF28();
    sub_10000B224();
    return sub_1000175F0(v27);
  }
  else
  {
    sub_1000AABFC((uint64_t)v40, &qword_10012F7C0);
    sub_100009CC0(0xD00000000000001BLL, 0x8000000100102AE0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000800C();
    sub_10000B224();
    return v31(v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, a12, a13, a14);
  }
}

uint64_t sub_1000A5DFC()
{
  sub_100008308();
  sub_1000082E0();
  sub_10000A43C();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 360) = v4;
  *(void *)(v2 + 36_Block_object_dispose(&a9, 8) = v0;
  swift_task_dealloc();
  sub_10000F9E8();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1000A5EE0()
{
  sub_100008308();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 376) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000A5F80;
  uint64_t v2 = sub_1000AAE90();
  return sub_10001773C(v2, v3);
}

uint64_t sub_1000A5F80()
{
  sub_100008308();
  sub_1000082E0();
  sub_10000A43C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_100008314();
  *uint64_t v5 = v4;
  *(void *)(v6 + 384) = v0;
  swift_task_dealloc();
  sub_10000F9E8();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000A605C()
{
  sub_100008308();
  static Date.now.getter();
  sub_10001656C();
  return _swift_task_switch(v0, v1, v2);
}

uint64_t sub_1000A60C0()
{
  sub_100009C64();
  uint64_t v1 = *(void *)(v0 + 384);
  sub_1000696E4();
  *(void *)(v0 + 392) = v1;
  sub_1000AAD48();
  v2();
  sub_10000F9E8();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000A6160()
{
  sub_100009C64();
  swift_release();
  sub_10000D47C(v0 + 112);
  unint64_t v1 = sub_1000AB08C();
  sub_100009CC0(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000800C();
  return v3();
}

uint64_t sub_1000A6208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_100015FD4();
  sub_100005B20();
  uint64_t v18 = *(void *)(v16 + 368);
  uint64_t v19 = *(void *)(v16 + 264);
  sub_10000D47C(v16 + 112);
  sub_100016710((void *)(v19 + OBJC_IVAR____TtC12amsaccountsd23CachedServerDataService_metrics));
  uint64_t v20 = Dictionary.init(dictionaryLiteral:)();
  if (qword_10012E1F8 != -1) {
    swift_once();
  }
  sub_1000AADE8();
  swift_errorRetain();
  sub_1000B5B9C(v18, v20);
  swift_errorRelease();
  sub_100016954();
  sub_1000AAD80(v21);
  swift_bridgeObjectRelease();
  sub_1000121B0();
  v22();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_willThrow();
  sub_1000AAEA0(v17 | 0xB, (uint64_t)"accountDataPushNotification");
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000AACBC();
  sub_100072F00();
  return v24(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_1000A6380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_100015FD4();
  sub_100005B20();
  swift_release();
  uint64_t v18 = *(void *)(v16 + 384);
  uint64_t v19 = *(void *)(v16 + 264);
  sub_10000D47C(v16 + 112);
  sub_100016710((void *)(v19 + OBJC_IVAR____TtC12amsaccountsd23CachedServerDataService_metrics));
  uint64_t v20 = Dictionary.init(dictionaryLiteral:)();
  if (qword_10012E1F8 != -1) {
    swift_once();
  }
  sub_1000AADE8();
  swift_errorRetain();
  sub_1000B5B9C(v18, v20);
  swift_errorRelease();
  sub_100016954();
  sub_1000AAD80(v21);
  swift_bridgeObjectRelease();
  sub_1000121B0();
  v22();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_willThrow();
  sub_1000AAEA0(v17 | 0xB, (uint64_t)"accountDataPushNotification");
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000AACBC();
  sub_100072F00();
  return v24(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_1000A6504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_100015FD4();
  sub_100005B20();
  swift_release();
  uint64_t v18 = *(void *)(v16 + 392);
  uint64_t v19 = *(void *)(v16 + 264);
  sub_10000D47C(v16 + 112);
  sub_100016710((void *)(v19 + OBJC_IVAR____TtC12amsaccountsd23CachedServerDataService_metrics));
  uint64_t v20 = Dictionary.init(dictionaryLiteral:)();
  if (qword_10012E1F8 != -1) {
    swift_once();
  }
  sub_1000AADE8();
  swift_errorRetain();
  sub_1000B5B9C(v18, v20);
  swift_errorRelease();
  sub_100016954();
  sub_1000AAD80(v21);
  swift_bridgeObjectRelease();
  sub_1000121B0();
  v22();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_willThrow();
  sub_1000AAEA0(v17 | 0xB, (uint64_t)"accountDataPushNotification");
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000AACBC();
  sub_100072F00();
  return v24(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_1000A670C(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  a3;
  uint64_t v5 = (void *)swift_task_alloc();
  v3[4] = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_1000A67C8;
  return sub_1000A59F8();
}

uint64_t sub_1000A67C8()
{
  sub_1000AB000();
  sub_100005AEC();
  uint64_t v3 = v0;
  sub_1000086A0();
  uint64_t v5 = v4;
  sub_100008314();
  *uint64_t v6 = v5;
  uint64_t v7 = *(void **)(v1 + 16);
  *uint64_t v6 = *v2;
  swift_task_dealloc();

  sub_1000AB0C8();
  if (v3)
  {
    uint64_t v8 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    uint64_t v9 = sub_100016988();
    v10(v9);
  }
  else
  {
    uint64_t v11 = sub_100009CAC();
    v12(v11);
  }
  _Block_release(*(const void **)(v5 + 24));
  sub_100016B2C();
  sub_100015F64();
  return v14(v13, v14, v15, v16, v17, v18, v19, v20);
}

uint64_t sub_1000A68F0()
{
  sub_100008308();
  v1[20] = v2;
  v1[21] = v0;
  v1[22] = swift_getObjectType();
  uint64_t v3 = type metadata accessor for AccountIdentity.DSID();
  v1[23] = v3;
  sub_1000082C8(v3);
  v1[24] = v4;
  v1[25] = sub_1000084E0();
  uint64_t v5 = type metadata accessor for Log();
  v1[26] = v5;
  sub_1000082C8(v5);
  v1[27] = v6;
  v1[28] = sub_1000084E0();
  sub_10000F9E8();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000A69B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_100016858();
  static Log.accountsDataSync.getter();
  sub_100011D80((uint64_t *)&unk_10012E440);
  uint64_t v22 = sub_100005AD4();
  sub_1000082C8(v22);
  sub_1000AACFC();
  sub_1000AB024();
  sub_1000163FC(v23, (__n128)xmmword_1000DA3D0);
  id v24 = (id)AMSLogKey();
  if (v24)
  {
    uint64_t v25 = v24;
    uint64_t v21 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    sub_1000AB0D4();
  }
  sub_10000B1DC();
  swift_bridgeObjectRelease();
  sub_10000D47C(v18);
  sub_1000AB060();
  v20[19] = sub_10001065C(0, &qword_10012EB18);
  v20[16] = v19;
  id v26 = v19;
  sub_1000AAE40();
  sub_1000AABFC((uint64_t)v19, &qword_10012EFB0);
  Log.default(_:)();
  swift_bridgeObjectRelease();
  uint64_t v27 = sub_1000AAE00();
  v28(v27);
  id v29 = [v21 dsid];
  id v30 = [v29 unsignedLongLongValue];

  sub_100010E18();
  sub_1000160BC();
  sub_1000084F8();
  v31();
  if (v20[10])
  {
    sub_100015F48();
    uint64_t v32 = (void *)swift_task_alloc();
    v20[29] = v32;
    *uint64_t v32 = v20;
    v32[1] = sub_1000A6BE8;
    sub_1000AAF28();
    sub_100008504();
    return sub_1000A6D9C();
  }
  else
  {
    sub_1000AABFC((uint64_t)v30, &qword_10012F7C0);
    sub_1000AB048();
    swift_task_dealloc();
    sub_10000800C();
    sub_100008504();
    return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  }
}

uint64_t sub_1000A6BE8()
{
  sub_100008308();
  sub_1000082E0();
  sub_10000A43C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_100008314();
  *uint64_t v5 = v4;
  *(void *)(v6 + 240) = v0;
  swift_task_dealloc();
  sub_10000F9E8();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000A6CC4()
{
  sub_100008308();
  sub_10000D47C(v0 + 16);
  sub_1000AB048();
  swift_task_dealloc();
  sub_10000800C();
  return v1();
}

uint64_t sub_1000A6D28()
{
  sub_100008308();
  sub_10000D47C(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100008600();
  return v1();
}

uint64_t sub_1000A6D9C()
{
  sub_100008308();
  v1[16] = v2;
  v1[17] = v0;
  v1[18] = swift_getObjectType();
  uint64_t v3 = type metadata accessor for Log();
  v1[19] = v3;
  sub_1000082C8(v3);
  v1[20] = v4;
  v1[21] = sub_1000084E0();
  sub_10000F9E8();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1000A6E34()
{
  sub_1000167D4();
  sub_100016230();
  uint64_t v2 = (void *)v0[17];
  uint64_t v1 = v0[18];
  static Log.accountsDataSync.getter();
  sub_100011D80((uint64_t *)&unk_10012E440);
  uint64_t v3 = sub_100005AD4();
  sub_1000082C8(v3);
  uint64_t v4 = sub_100016390();
  v0[8] = v2;
  *(_OWORD *)(v4 + 16) = xmmword_1000DA3D0;
  v0[11] = v1;
  id v5 = v2;
  if ((id)AMSLogKey())
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000169D0();
  }
  else
  {
    sub_1000AAFC4();
  }
  uint64_t v6 = v0[20];
  uint64_t v7 = v0[21];
  uint64_t v13 = v0[19];
  static LogInterpolation.prefix(_:_:)();
  swift_bridgeObjectRelease();
  sub_10000D47C((uint64_t)(v0 + 8));
  sub_100012258();
  LogInterpolation.init(stringLiteral:)();
  v0[15] = sub_10001619C();
  sub_1000042C4(v0 + 12);
  sub_10000A430();
  sub_100008000();
  v8();
  static LogInterpolation.traceableSensitive(_:)();
  sub_1000AABFC((uint64_t)(v0 + 12), &qword_10012EFB0);
  Log.default(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v13);
  uint64_t v9 = (void *)swift_task_alloc();
  v0[22] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1000A7040;
  sub_1000AB154(v0[16]);
  sub_10000B224();
  return sub_1000175F0(v10);
}

uint64_t sub_1000A7040()
{
  sub_100008308();
  uint64_t v3 = v2;
  sub_1000082E0();
  sub_10000A43C();
  *id v5 = v4;
  uint64_t v6 = *v1;
  sub_100008314();
  *uint64_t v7 = v6;
  *(void *)(v8 + 184) = v3;
  *(void *)(v8 + 192) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v9 = sub_1000A72AC;
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v9 = sub_1000A712C;
    uint64_t v10 = v3;
  }
  return _swift_task_switch(v9, v10, 0);
}

uint64_t sub_1000A712C()
{
  sub_100009C64();
  uint64_t v1 = *(void *)(v0 + 192);
  sub_10006E2D8(*(void **)(v0 + 128));
  *(void *)(v0 + 200) = v1;
  sub_10000F9E8();
  return _swift_task_switch(v2, v3, v4);
}

uint64_t sub_1000A71B0()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 136) + OBJC_IVAR____TtC12amsaccountsd23CachedServerDataService_accountDataActors);
  *(void *)(v0 + 20_Block_object_dispose(&a9, 8) = v1;
  return sub_1000AACF4((uint64_t)sub_1000A71D8, v1);
}

uint64_t sub_1000A71D8()
{
  sub_100008308();
  uint64_t v1 = sub_1000087B0(*(void **)(v0 + 128), *(void *)(*(void *)(v0 + 128) + 24));
  sub_1000AA718((uint64_t)v1);
  sub_10000F9E8();
  return _swift_task_switch(v2, v3, v4);
}

uint64_t sub_1000A7248()
{
  sub_100008308();
  swift_release();
  swift_task_dealloc();
  sub_10000800C();
  return v0();
}

uint64_t sub_1000A72AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100016794();
  sub_10001660C();
  uint64_t v13 = v12[24];
  sub_100016710((void *)(v12[17] + OBJC_IVAR____TtC12amsaccountsd23CachedServerDataService_metrics));
  uint64_t v14 = Dictionary.init(dictionaryLiteral:)();
  if (qword_10012E1F8 != -1) {
    swift_once();
  }
  swift_errorRetain();
  sub_1000B5B9C(v13, v14);
  swift_errorRelease();
  _OWORD v12[2] = 0x615F706D615F7078;
  sub_1000168D0();
  sub_100016004(v15);
  swift_bridgeObjectRelease();
  sub_1000121B0();
  v16();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_task_dealloc();
  sub_1000AACBC();
  sub_10000858C();
  return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12);
}

uint64_t sub_1000A7408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_100016794();
  sub_10001660C();
  swift_release();
  uint64_t v13 = v12[25];
  sub_100016710((void *)(v12[17] + OBJC_IVAR____TtC12amsaccountsd23CachedServerDataService_metrics));
  uint64_t v14 = Dictionary.init(dictionaryLiteral:)();
  if (qword_10012E1F8 != -1) {
    swift_once();
  }
  swift_errorRetain();
  sub_1000B5B9C(v13, v14);
  swift_errorRelease();
  _OWORD v12[2] = 0x615F706D615F7078;
  sub_1000168D0();
  sub_100016004(v15);
  swift_bridgeObjectRelease();
  sub_1000121B0();
  v16();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_willThrow();
  swift_task_dealloc();
  sub_1000AACBC();
  sub_10000858C();
  return v18(v17, v18, v19, v20, v21, v22, v23, v24, a9, a10, a11, a12);
}

uint64_t sub_1000A758C(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  a3;
  uint64_t v7 = (void *)swift_task_alloc();
  void v3[5] = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_1000A7650;
  return sub_1000A68F0();
}

uint64_t sub_1000A7650()
{
  sub_100005AEC();
  uint64_t v3 = v0;
  sub_1000086A0();
  uint64_t v5 = v4;
  sub_100008314();
  *id v6 = v5;
  uint64_t v7 = *(void **)(v1 + 24);
  uint64_t v8 = *(void **)(v1 + 16);
  *id v6 = *v2;
  swift_task_dealloc();

  sub_1000AB0C8();
  if (v3)
  {
    uint64_t v9 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    uint64_t v10 = sub_100016988();
    v11(v10);
  }
  else
  {
    uint64_t v12 = sub_100009CAC();
    v13(v12);
  }
  _Block_release(*(const void **)(v5 + 32));
  sub_100016B2C();
  return v14();
}

uint64_t sub_1000A7798()
{
  sub_100008308();
  v1[20] = v2;
  v1[21] = v0;
  v1[22] = swift_getObjectType();
  uint64_t v3 = type metadata accessor for AccountIdentity.DSID();
  v1[23] = v3;
  sub_1000082C8(v3);
  v1[24] = v4;
  v1[25] = sub_1000084E0();
  uint64_t v5 = type metadata accessor for Log();
  v1[26] = v5;
  sub_1000082C8(v5);
  v1[27] = v6;
  v1[28] = sub_1000084E0();
  sub_10000F9E8();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000A7860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_100016858();
  static Log.accountsDataSync.getter();
  sub_100011D80((uint64_t *)&unk_10012E440);
  uint64_t v22 = sub_100005AD4();
  sub_1000082C8(v22);
  sub_1000AACFC();
  sub_1000AB024();
  sub_1000163FC(v23, (__n128)xmmword_1000DA3D0);
  id v24 = (id)AMSLogKey();
  if (v24)
  {
    uint64_t v25 = v24;
    uint64_t v21 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    sub_1000AB0D4();
  }
  sub_10000B1DC();
  swift_bridgeObjectRelease();
  sub_10000D47C(v18);
  sub_100012258();
  LogInterpolation.init(stringLiteral:)();
  v20[19] = sub_10001065C(0, &qword_10012EB18);
  v20[16] = v19;
  id v26 = v19;
  sub_1000AAE40();
  sub_1000AABFC((uint64_t)v19, &qword_10012EFB0);
  Log.default(_:)();
  swift_bridgeObjectRelease();
  uint64_t v27 = sub_1000AAE00();
  v28(v27);
  id v29 = [v21 dsid];
  id v30 = [v29 unsignedLongLongValue];

  sub_100010E18();
  sub_1000160BC();
  sub_1000084F8();
  v31();
  if (v20[10])
  {
    sub_100015F48();
    uint64_t v32 = (void *)swift_task_alloc();
    v20[29] = v32;
    *uint64_t v32 = v20;
    v32[1] = sub_1000A7A9C;
    sub_1000AAF28();
    sub_100008504();
    return sub_1000A4614();
  }
  else
  {
    sub_1000AABFC((uint64_t)v30, &qword_10012F7C0);
    sub_1000AB048();
    swift_task_dealloc();
    sub_10000800C();
    sub_100008504();
    return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  }
}

uint64_t sub_1000A7A9C()
{
  sub_100008308();
  sub_1000082E0();
  sub_10000A43C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_100008314();
  *uint64_t v5 = v4;
  *(void *)(v6 + 240) = v0;
  swift_task_dealloc();
  sub_10000F9E8();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000A7B98(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  a3;
  uint64_t v7 = (void *)swift_task_alloc();
  void v3[5] = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_1000AACB8;
  return sub_1000A7798();
}

void sub_1000A7C5C()
{
  sub_10000A46C();
  uint64_t v23 = v2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = sub_100011D80(&qword_10012E4B0);
  uint64_t v5 = sub_1000085F4(v4);
  __chkstk_darwin(v5);
  sub_10000D2F0();
  uint64_t v22 = v6;
  uint64_t v7 = type metadata accessor for LogInterpolation.StringInterpolation();
  uint64_t v8 = sub_1000085F4(v7);
  __chkstk_darwin(v8);
  uint64_t v21 = type metadata accessor for Log();
  sub_100008460();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_10000F9D0();
  static Log.accountsDataSync.getter();
  sub_100011D80((uint64_t *)&unk_10012E440);
  uint64_t v12 = type metadata accessor for LogInterpolation();
  sub_1000082C8(v12);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3F0;
  uint64_t v25 = ObjectType;
  v24[0] = v0;
  id v13 = v0;
  id v14 = (id)AMSLogKey();
  if (v14)
  {
    uint64_t v15 = v14;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    sub_1000734E0();
  }
  sub_100073298();
  swift_bridgeObjectRelease();
  sub_10000D47C((uint64_t)v24);
  LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v16._object = (void *)0x8000000100102920;
  v16._countAndFlagsBits = 0xD000000000000018;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(v16);
  uint64_t v25 = sub_100011D80(&qword_10012F800);
  v24[0] = v23;
  swift_bridgeObjectRetain();
  LogInterpolation.StringInterpolation.appendInterpolation(_:)();
  sub_1000AABFC((uint64_t)v24, &qword_10012EFB0);
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  LogInterpolation.StringInterpolation.appendLiteral(_:)(v17);
  LogInterpolation.init(stringInterpolation:)();
  Log.default(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v1, v21);
  uint64_t v18 = type metadata accessor for TaskPriority();
  sub_1000101E8(v22, 1, 1, v18);
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = 0;
  v19[3] = 0;
  void v19[4] = v13;
  void v19[5] = v23;
  id v20 = v13;
  swift_bridgeObjectRetain();
  sub_1000A2840(v22, (uint64_t)&unk_10012F810, (uint64_t)v19);
  swift_release();
  sub_10000A484();
}

uint64_t sub_1000A7F44()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000A7FE0;
  return sub_10000BC18();
}

uint64_t sub_1000A7FE0()
{
  sub_100008308();
  sub_1000082E0();
  uint64_t v2 = *v1;
  sub_100008314();
  *uint64_t v3 = v2;
  swift_task_dealloc();
  if (!v0) {
    swift_bridgeObjectRelease();
  }
  sub_100008600();
  return v4();
}

void sub_1000A80B0()
{
  sub_10000A46C();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v38 = type metadata accessor for AccountIdentity();
  sub_100008460();
  uint64_t v34 = v3;
  __chkstk_darwin(v4);
  sub_10000D2F0();
  uint64_t v37 = v5;
  uint64_t v36 = type metadata accessor for AccountIdentity.DSID();
  sub_100008460();
  uint64_t v33 = v6;
  __chkstk_darwin(v7);
  uint64_t v35 = sub_1000AAEB8();
  sub_100008460();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  sub_100011674();
  sub_100011D80((uint64_t *)&unk_10012E440);
  uint64_t v11 = type metadata accessor for LogInterpolation();
  sub_1000082C8(v11);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3F0;
  v48[0] = ObjectType;
  uint64_t v46 = (uint64_t)v0;
  v0;
  id v12 = (id)AMSLogKey();
  if (v12)
  {
    id v13 = v12;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  static LogInterpolation.prefix(_:_:)();
  swift_bridgeObjectRelease();
  sub_10000D47C((uint64_t)&v46);
  sub_10000A3D0();
  Log.default(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v0, v35);
  if (qword_10012E210 != -1) {
    swift_once();
  }
  uint64_t v14 = qword_100137180;
  sub_100007480(0xD000000000000011, 0x80000001001028D0);
  sub_10008E7B8(0, 0);
  uint64_t v16 = *(void *)(v15 + 16);
  if (v16)
  {
    uint64_t v46 = 2;
    long long v47 = 0u;
    uint64_t v17 = v15 + 32;
    memset(v48, 0, 28);
    swift_bridgeObjectRetain();
    do
    {
      sub_100018570(v17, (uint64_t)v44);
      sub_1000087B0(v44, v45);
      sub_1000AAF34();
      uint64_t v18 = type metadata accessor for AMPAccount();
      uint64_t v42 = v18;
      uint64_t v43 = &off_1001158D8;
      uint64_t v19 = sub_1000042C4(v41);
      sub_100009B60(v14, (uint64_t)v19);
      LODWORD(v1_Block_object_dispose(&a9, 8) = objc_msgSend(*(id *)((char *)sub_1000087B0(v41, v42) + *(int *)(v18 + 20)), "ams_isSandboxAccount");
      AccountIdentity.dsid.getter();
      AccountIdentity.DSID.value.getter();
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v1, v36);
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v22 = v21;
      if (v18)
      {
        uint64_t v39 = v20;
        uint64_t v40 = v21;
        swift_bridgeObjectRetain();
        v23._countAndFlagsBits = 0x786F62646E61732ELL;
        v23._object = (void *)0xE800000000000000;
        String.append(_:)(v23);
        swift_bridgeObjectRelease();
        uint64_t v20 = v39;
        uint64_t v22 = v40;
      }
      sub_100011874(v20, v22);
      uint64_t v25 = v24;
      uint64_t v27 = v26;
      swift_bridgeObjectRelease();
      v28._countAndFlagsBits = v25;
      v28._object = v27;
      String.append(_:)(v28);
      swift_bridgeObjectRelease();
      uint64_t v14 = sub_100007A18(0xD000000000000027);
      uint64_t v30 = v29;
      sub_10000D47C((uint64_t)v41);
      uint64_t v31 = sub_1000087B0(v44, v45);
      (*(void (**)(uint64_t, void *, uint64_t))(v34 + 16))(v37, v31, v38);
      sub_10008C5C4(v37, v14, v30, (uint64_t)&v46);
      swift_bridgeObjectRelease();
      sub_1000AAF5C();
      v32();
      sub_10000D47C((uint64_t)v44);
      v17 += 40;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
  }
  sub_1000A7C5C();
  swift_bridgeObjectRelease();
  sub_100009CC0(0xD000000000000011, 0x80000001001028D0);
  sub_10000A484();
}

uint64_t sub_1000A8640()
{
  sub_100008308();
  v1[20] = v2;
  v1[21] = v0;
  v1[22] = swift_getObjectType();
  uint64_t v3 = type metadata accessor for AccountIdentity.DSID();
  v1[23] = v3;
  sub_1000082C8(v3);
  v1[24] = v4;
  v1[25] = sub_1000084E0();
  uint64_t v5 = type metadata accessor for Log();
  v1[26] = v5;
  sub_1000082C8(v5);
  v1[27] = v6;
  v1[28] = sub_1000084E0();
  sub_10000F9E8();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000A8708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_100016858();
  static Log.accountsDataSync.getter();
  sub_100011D80((uint64_t *)&unk_10012E440);
  uint64_t v22 = sub_100005AD4();
  sub_1000082C8(v22);
  sub_1000AACFC();
  sub_1000AB024();
  sub_1000163FC(v23, (__n128)xmmword_1000DA3D0);
  id v24 = (id)AMSLogKey();
  if (v24)
  {
    uint64_t v25 = v24;
    uint64_t v21 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    sub_1000AB0D4();
  }
  sub_10000B1DC();
  swift_bridgeObjectRelease();
  sub_10000D47C(v18);
  sub_100012258();
  LogInterpolation.init(stringLiteral:)();
  v20[19] = sub_10001065C(0, &qword_10012EB18);
  v20[16] = v19;
  id v26 = v19;
  sub_1000AAE40();
  sub_1000AABFC((uint64_t)v19, &qword_10012EFB0);
  Log.default(_:)();
  swift_bridgeObjectRelease();
  uint64_t v27 = sub_1000AAE00();
  v28(v27);
  id v29 = [v21 dsid];
  id v30 = [v29 unsignedLongLongValue];

  sub_100010E18();
  sub_1000160BC();
  sub_1000084F8();
  v31();
  if (v20[10])
  {
    sub_100015F48();
    uint64_t v32 = (void *)swift_task_alloc();
    v20[29] = v32;
    *uint64_t v32 = v20;
    v32[1] = sub_1000A7A9C;
    sub_1000AAF28();
    sub_100008504();
    return sub_1000A8944();
  }
  else
  {
    sub_1000AABFC((uint64_t)v30, &qword_10012F7C0);
    sub_1000AB048();
    swift_task_dealloc();
    sub_10000800C();
    sub_100008504();
    return v36(v35, v36, v37, v38, v39, v40, v41, v42, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  }
}

uint64_t sub_1000A8944()
{
  sub_100008308();
  v1[22] = v2;
  v1[23] = v0;
  v1[24] = swift_getObjectType();
  uint64_t v3 = type metadata accessor for Date();
  v1[25] = v3;
  sub_1000082C8(v3);
  v1[26] = v4;
  v1[27] = sub_1000084E0();
  uint64_t v5 = type metadata accessor for Log();
  v1[28] = v5;
  sub_1000082C8(v5);
  v1[29] = v6;
  v1[30] = sub_1000084E0();
  sub_10000F9E8();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000A8A0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_1000167D4();
  sub_100016230();
  if (static DeviceDetails.deviceIsRunningInternalBuild()())
  {
    uint64_t v36 = v14 + 18;
    uint64_t v16 = (void *)v14[23];
    uint64_t v15 = v14[24];
    static Log.accountsDataSync.getter();
    sub_100011D80((uint64_t *)&unk_10012E440);
    uint64_t v17 = type metadata accessor for LogInterpolation();
    sub_1000082C8(v17);
    sub_100015FC4();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3D0;
    v14[17] = v15;
    v14[14] = v16;
    id v18 = v16;
    id v19 = (id)AMSLogKey();
    if (v19)
    {
      uint64_t v20 = v19;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      sub_1000734E0();
    }
    sub_100073298();
    swift_bridgeObjectRelease();
    sub_10000D47C((uint64_t)(v14 + 14));
    sub_100012258();
    LogInterpolation.init(stringLiteral:)();
    v14[21] = sub_10001619C();
    sub_1000042C4(v36);
    sub_10000A430();
    sub_100008000();
    v30();
    static LogInterpolation.traceableSensitive(_:)();
    sub_1000AABFC((uint64_t)v36, &qword_10012EFB0);
    Log.default(_:)();
    swift_bridgeObjectRelease();
    uint64_t v31 = sub_1000AB140();
    v32(v31);
    if (qword_10012E210 != -1) {
      swift_once();
    }
    sub_100009790();
    uint64_t v33 = (void *)swift_task_alloc();
    v14[31] = v33;
    *uint64_t v33 = v14;
    v33[1] = sub_1000A8C9C;
    sub_1000AB154(v14[22]);
    sub_10000B224();
    return sub_1000175F0(v34);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000800C();
    sub_10000B224();
    return v22(v21, v22, v23, v24, v25, v26, v27, v28, a9, a10, a11, a12, a13, a14);
  }
}

uint64_t sub_1000A8C9C()
{
  sub_100008308();
  sub_1000082E0();
  sub_10000A43C();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 256) = v4;
  *(void *)(v2 + 264) = v0;
  swift_task_dealloc();
  sub_10000F9E8();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1000A8D80()
{
  sub_100008308();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000AB080(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_1000A8E1C;
  uint64_t v3 = sub_1000AAE90();
  return sub_10001773C(v3, v4);
}

uint64_t sub_1000A8E1C()
{
  sub_100008308();
  sub_1000082E0();
  sub_10000A43C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_100008314();
  *uint64_t v5 = v4;
  *(void *)(v6 + 280) = v0;
  swift_task_dealloc();
  sub_10000F9E8();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000A8EF8()
{
  sub_100008308();
  static Date.now.getter();
  sub_10001656C();
  return _swift_task_switch(v0, v1, v2);
}

uint64_t sub_1000A8F5C()
{
  sub_100009C64();
  sub_1000AB034();
  sub_10006A470();
  *(void *)(v1 + 28_Block_object_dispose(&a9, 8) = v0;
  sub_1000AAD48();
  v2();
  sub_10000F9E8();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000A8FF4()
{
  sub_100008308();
  swift_release();
  sub_100016AB4();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000800C();
  return v0();
}

uint64_t sub_1000A906C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_1000167D4();
  sub_100016230();
  uint64_t v15 = *(void *)(v14 + 264);
  sub_1000AAF04(*(void *)(v14 + 184));
  uint64_t v16 = Dictionary.init(dictionaryLiteral:)();
  if (qword_10012E1F8 != -1) {
    swift_once();
  }
  swift_errorRetain();
  sub_1000B5B9C(v15, v16);
  swift_errorRelease();
  sub_100012028();
  sub_100016318(v17);
  swift_bridgeObjectRelease();
  sub_1000121B0();
  v18();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_willThrow();
  sub_100016AB4();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000AACBC();
  sub_10000B224();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_1000A91C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_1000167D4();
  sub_100016230();
  swift_release();
  uint64_t v15 = *(void *)(v14 + 280);
  sub_1000AAF04(*(void *)(v14 + 184));
  uint64_t v16 = Dictionary.init(dictionaryLiteral:)();
  if (qword_10012E1F8 != -1) {
    swift_once();
  }
  swift_errorRetain();
  sub_1000B5B9C(v15, v16);
  swift_errorRelease();
  sub_100012028();
  sub_100016318(v17);
  swift_bridgeObjectRelease();
  sub_1000121B0();
  v18();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_willThrow();
  sub_100016AB4();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000AACBC();
  sub_10000B224();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_1000A932C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_1000167D4();
  sub_100016230();
  swift_release();
  uint64_t v15 = *(void *)(v14 + 288);
  sub_1000AAF04(*(void *)(v14 + 184));
  uint64_t v16 = Dictionary.init(dictionaryLiteral:)();
  if (qword_10012E1F8 != -1) {
    swift_once();
  }
  swift_errorRetain();
  sub_1000B5B9C(v15, v16);
  swift_errorRelease();
  sub_100012028();
  sub_100016318(v17);
  swift_bridgeObjectRelease();
  sub_1000121B0();
  v18();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_willThrow();
  sub_100016AB4();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000AACBC();
  sub_10000B224();
  return v20(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_1000A94B0(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  a3;
  uint64_t v7 = (void *)swift_task_alloc();
  void v3[5] = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_1000AACB8;
  return sub_1000A8640();
}

uint64_t type metadata accessor for CachedServerDataService()
{
  return self;
}

uint64_t sub_1000A95E8()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for AccountDataCollection()
{
  return self;
}

uint64_t sub_1000A9644(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  int v48 = a5;
  uint64_t v9 = sub_100011D80(&qword_10012EB08);
  uint64_t v38 = *(void *)(v9 - 8);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for AccountIdentity();
  uint64_t v39 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  id v13 = (char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100011D80(&qword_10012F8F0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000AA358(a1, a2, a3, v46);
  long long v42 = v46[0];
  long long v43 = v46[1];
  long long v44 = v46[2];
  uint64_t v45 = v47;
  v37[1] = a1;
  swift_bridgeObjectRetain();
  v37[2] = a3;
  swift_retain();
  sub_1000AA394((uint64_t)v16);
  uint64_t v17 = sub_100011D80(&qword_10012F8E8);
  if (sub_10001044C((uint64_t)v16, 1, v17) == 1)
  {
LABEL_2:
    swift_bridgeObjectRelease();
    swift_release();
    sub_100017254();
    return swift_release();
  }
  else
  {
    uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
    uint64_t v19 = &qword_10012EB08;
    while (1)
    {
      uint64_t v20 = (uint64_t)&v16[*(int *)(v17 + 48)];
      v40(v13, v16, v41);
      uint64_t v21 = (uint64_t)v11;
      uint64_t v22 = v19;
      sub_1000AABA8(v20, (uint64_t)v11, v19);
      uint64_t v23 = (void *)*v48;
      unint64_t v25 = sub_100008E30((uint64_t)v13);
      uint64_t v26 = v23[2];
      BOOL v27 = (v24 & 1) == 0;
      uint64_t v28 = v26 + v27;
      if (__OFADD__(v26, v27)) {
        break;
      }
      char v29 = v24;
      if (v23[3] >= v28)
      {
        if (a4)
        {
          if (v24) {
            goto LABEL_15;
          }
        }
        else
        {
          sub_100011D80(&qword_10012F8D8);
          _NativeDictionary.copy()();
          if (v29) {
            goto LABEL_15;
          }
        }
      }
      else
      {
        sub_100084A3C(v28, a4 & 1);
        unint64_t v30 = sub_100008E30((uint64_t)v13);
        if ((v29 & 1) != (v31 & 1)) {
          goto LABEL_18;
        }
        unint64_t v25 = v30;
        if (v29)
        {
LABEL_15:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          break;
        }
      }
      uint64_t v32 = (void *)*v48;
      *(void *)(*v48 + 8 * (v25 >> 6) + 64) |= 1 << v25;
      v40((char *)(v32[6] + *(void *)(v39 + 72) * v25), v13, v41);
      uint64_t v33 = v32[7] + *(void *)(v38 + 72) * v25;
      uint64_t v11 = (char *)v21;
      uint64_t v19 = v22;
      sub_1000AABA8(v21, v33, v22);
      uint64_t v34 = v32[2];
      BOOL v35 = __OFADD__(v34, 1);
      uint64_t v36 = v34 + 1;
      if (v35) {
        goto LABEL_17;
      }
      v32[2] = v36;
      sub_1000AA394((uint64_t)v16);
      uint64_t v17 = sub_100011D80(&qword_10012F8E8);
      a4 = 1;
      if (sub_10001044C((uint64_t)v16, 1, v17) == 1) {
        goto LABEL_2;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A9A80()
{
  sub_100009C64();
  sub_1000AAFD0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000121C4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100015860;
  uint64_t v3 = sub_10000FC40();
  return v4(v3);
}

uint64_t sub_1000A9B14()
{
  _Block_release(*(const void **)(v0 + 32));
  uint64_t v1 = sub_1000AAE80();
  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1000A9B5C(uint64_t a1)
{
  uint64_t v2 = sub_100011D80(&qword_10012EB08);
  uint64_t v50 = *(void *)(v2 - 8);
  uint64_t v51 = v2;
  __chkstk_darwin(v2);
  uint64_t v49 = (uint64_t)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AccountDataState(0);
  uint64_t v48 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  uint64_t v47 = (uint64_t)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for AccountIdentity();
  uint64_t v6 = *(void *)(v46 - 8);
  uint64_t v7 = __chkstk_darwin(v46);
  long long v44 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  long long v43 = (char *)&v36 - v9;
  sub_100011D80(&qword_10012EB48);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  uint64_t v11 = result;
  int64_t v12 = 0;
  uint64_t v52 = a1;
  uint64_t v15 = *(void *)(a1 + 64);
  uint64_t v14 = a1 + 64;
  uint64_t v13 = v15;
  uint64_t v16 = 1 << *(unsigned char *)(v14 - 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v13;
  uint64_t v37 = v14;
  int64_t v38 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v45 = v6;
  uint64_t v40 = v6 + 32;
  uint64_t v41 = v6 + 16;
  uint64_t v39 = result + 64;
  uint64_t v42 = result;
  uint64_t v19 = v46;
  uint64_t v20 = v44;
  if (!v18) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v53 = (v18 - 1) & v18;
  int64_t v54 = v12;
  for (unint64_t i = __clz(__rbit64(v18)) | (v12 << 6); ; unint64_t i = __clz(__rbit64(v23)) + (v24 << 6))
  {
    uint64_t v26 = v52;
    uint64_t v27 = v45;
    unint64_t v28 = *(void *)(v45 + 72) * i;
    char v29 = v43;
    (*(void (**)(char *, unint64_t, uint64_t))(v45 + 16))(v43, *(void *)(v52 + 48) + v28, v19);
    uint64_t v30 = v47;
    sub_100009B60(*(void *)(v26 + 56) + *(void *)(v48 + 72) * i, v47);
    char v31 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
    v31(v20, v29, v19);
    uint64_t v32 = v49;
    sub_100009B60(v30, v49);
    swift_storeEnumTagMultiPayload();
    sub_1000117F8(v30);
    *(void *)(v39 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t v11 = v42;
    v31((char *)(*(void *)(v42 + 48) + v28), v20, v19);
    uint64_t result = sub_1000AABA8(v32, *(void *)(v11 + 56) + *(void *)(v50 + 72) * i, &qword_10012EB08);
    uint64_t v33 = *(void *)(v11 + 16);
    BOOL v34 = __OFADD__(v33, 1);
    uint64_t v35 = v33 + 1;
    if (v34)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    *(void *)(v11 + 16) = v35;
    int64_t v12 = v54;
    unint64_t v18 = v53;
    if (v53) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v22 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      goto LABEL_24;
    }
    if (v22 >= v38) {
      return v11;
    }
    unint64_t v23 = *(void *)(v37 + 8 * v22);
    int64_t v24 = v12 + 1;
    if (!v23)
    {
      int64_t v24 = v12 + 2;
      if (v12 + 2 >= v38) {
        return v11;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v24);
      if (!v23)
      {
        int64_t v24 = v12 + 3;
        if (v12 + 3 >= v38) {
          return v11;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23) {
          break;
        }
      }
    }
LABEL_18:
    uint64_t v53 = (v23 - 1) & v23;
    int64_t v54 = v24;
  }
  uint64_t v25 = v12 + 4;
  if (v12 + 4 >= v38) {
    return v11;
  }
  unint64_t v23 = *(void *)(v37 + 8 * v25);
  if (v23)
  {
    int64_t v24 = v12 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v24 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v24 >= v38) {
      return v11;
    }
    unint64_t v23 = *(void *)(v37 + 8 * v24);
    ++v25;
    if (v23) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1000A9FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for AccountIdentity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a3, v8);
  return sub_1000AAB40(a4, a2);
}

uint64_t sub_1000AA064@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1 + *(int *)(sub_100011D80(&qword_10012EB30) + 48);
  uint64_t v5 = a2 + *(int *)(sub_100011D80(&qword_10012F8E8) + 48);
  return sub_1000A9FDC(a2, v5, a1, v4);
}

uint64_t sub_1000AA0D4()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  uint64_t v1 = sub_1000AAE80();
  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1000AA114()
{
  sub_1000AB000();
  sub_100005AEC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000121C4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100008208;
  sub_100015F64();
  return sub_1000A7F44();
}

uint64_t sub_1000AA1C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccountDataState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000AA22C()
{
  sub_100009C64();
  sub_1000AAFD0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000121C4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100015860;
  uint64_t v3 = sub_10000FC40();
  return v4(v3);
}

uint64_t sub_1000AA2C4()
{
  sub_100009C64();
  sub_1000AAFD0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000121C4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100008208;
  uint64_t v3 = sub_10000FC40();
  return v4(v3);
}

uint64_t sub_1000AA358@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  *a4 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64) {
    uint64_t v8 = ~(-1 << -(char)v4);
  }
  else {
    uint64_t v8 = -1;
  }
  a4[3] = 0;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t sub_1000AA394@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100011D80(&qword_10012EB30);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100011D80(&qword_10012EB10);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v35 - v10;
  uint64_t v13 = *v1;
  uint64_t v12 = v1[1];
  uint64_t v14 = v1[2];
  int64_t v15 = v1[3];
  unint64_t v16 = v1[4];
  uint64_t v36 = v5;
  uint64_t v37 = v14;
  uint64_t v38 = v12;
  if (v16)
  {
    uint64_t v5 = (char *)a1;
    uint64_t v17 = (v16 - 1) & v16;
    unint64_t v18 = __clz(__rbit64(v16)) | (v15 << 6);
LABEL_3:
    uint64_t v19 = *(void *)(v13 + 48);
    uint64_t v20 = type metadata accessor for AccountIdentity();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v11, v19 + *(void *)(*(void *)(v20 - 8) + 72) * v18, v20);
    uint64_t v21 = *(void *)(v13 + 56);
    uint64_t v22 = sub_100011D80(&qword_10012EB08);
    sub_1000AAB40(v21 + *(void *)(*(void *)(v22 - 8) + 72) * v18, (uint64_t)&v11[*(int *)(v3 + 48)]);
    uint64_t v23 = 0;
LABEL_4:
    a1 = (uint64_t)v5;
    goto LABEL_5;
  }
  int64_t v30 = v15 + 1;
  if (__OFADD__(v15, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  int64_t v31 = (unint64_t)(v14 + 64) >> 6;
  if (v30 >= v31)
  {
    uint64_t v17 = 0;
    uint64_t v23 = 1;
    goto LABEL_5;
  }
  unint64_t v32 = *(void *)(v12 + 8 * v30);
  if (v32)
  {
    uint64_t v5 = (char *)a1;
LABEL_12:
    uint64_t v17 = (v32 - 1) & v32;
    unint64_t v18 = __clz(__rbit64(v32)) + (v30 << 6);
    int64_t v15 = v30;
    goto LABEL_3;
  }
  int64_t v33 = v15 + 2;
  if (v15 + 2 >= v31)
  {
    uint64_t v17 = 0;
    uint64_t v23 = 1;
    ++v15;
    goto LABEL_5;
  }
  unint64_t v32 = *(void *)(v12 + 8 * v33);
  if (v32)
  {
LABEL_16:
    uint64_t v5 = (char *)a1;
    int64_t v30 = v33;
    goto LABEL_12;
  }
  if (v15 + 3 >= v31) {
    goto LABEL_29;
  }
  unint64_t v32 = *(void *)(v12 + 8 * (v15 + 3));
  if (v32)
  {
    uint64_t v5 = (char *)a1;
    int64_t v30 = v15 + 3;
    goto LABEL_12;
  }
  int64_t v33 = v15 + 4;
  if (v15 + 4 < v31)
  {
    unint64_t v32 = *(void *)(v12 + 8 * v33);
    if (v32) {
      goto LABEL_16;
    }
    int64_t v30 = v15 + 5;
    if (v15 + 5 < v31)
    {
      uint64_t v5 = (char *)a1;
      unint64_t v32 = *(void *)(v12 + 8 * v30);
      if (v32) {
        goto LABEL_12;
      }
      int64_t v30 = v31 - 1;
      int64_t v34 = v15 + 6;
      while (v34 < v31)
      {
        unint64_t v32 = *(void *)(v12 + 8 * v34++);
        if (v32)
        {
          int64_t v30 = v34 - 1;
          goto LABEL_12;
        }
      }
LABEL_32:
      uint64_t v17 = 0;
      uint64_t v23 = 1;
      int64_t v15 = v30;
      goto LABEL_4;
    }
LABEL_29:
    uint64_t v17 = 0;
    uint64_t v23 = 1;
    int64_t v15 = v33;
    goto LABEL_5;
  }
  uint64_t v17 = 0;
  uint64_t v23 = 1;
  v15 += 3;
LABEL_5:
  uint64_t v24 = 1;
  sub_1000101E8((uint64_t)v11, v23, 1, v3);
  uint64_t v25 = v38;
  *uint64_t v1 = v13;
  v1[1] = v25;
  v1[2] = v37;
  v1[3] = v15;
  v1[4] = v17;
  uint64_t v26 = (void (*)(uint64_t))v1[5];
  sub_1000AABA8((uint64_t)v11, (uint64_t)v9, &qword_10012EB10);
  if (sub_10001044C((uint64_t)v9, 1, v3) != 1)
  {
    uint64_t v27 = (uint64_t)v36;
    sub_1000AABA8((uint64_t)v9, (uint64_t)v36, &qword_10012EB30);
    v26(v27);
    sub_1000AABFC(v27, &qword_10012EB30);
    uint64_t v24 = 0;
  }
  uint64_t v28 = sub_100011D80(&qword_10012F8E8);
  return sub_1000101E8(a1, v24, 1, v28);
}

uint64_t sub_1000AA718(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccountIdentity();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for AMPAccount();
  uint64_t v12 = &off_1001158D8;
  uint64_t v6 = sub_1000042C4(v10);
  sub_100009B60(a1, (uint64_t)v6);
  uint64_t v7 = sub_1000087B0(v10, v11);
  (*(void (**)(unsigned char *, void *, uint64_t))(v3 + 16))(v5, v7, v2);
  swift_beginAccess();
  sub_1000B7DEC();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  swift_endAccess();
  swift_release();
  return sub_10000D47C((uint64_t)v10);
}

uint64_t sub_1000AA888()
{
  _Block_release(*(const void **)(v0 + 24));

  uint64_t v1 = sub_1000AB014();
  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1000AA8C0()
{
  sub_100009C64();
  sub_1000AAFD0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000121C4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100015860;
  uint64_t v3 = sub_10000FC40();
  return v4(v3);
}

uint64_t sub_1000AA958()
{
  sub_1000AB000();
  sub_100005AEC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000121C4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100015860;
  sub_1000AAE60();
  sub_100015F64();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000AA9F8()
{
  _Block_release(*(const void **)(v0 + 32));
  uint64_t v1 = sub_1000AAE80();
  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1000AAA38()
{
  sub_1000AB000();
  sub_100005AEC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000121C4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100015860;
  sub_1000AAE60();
  sub_100015F64();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000AAAD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100011D80(&qword_10012EB08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000AAB40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100011D80(&qword_10012EB08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000AABA8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100011D80(a3);
  sub_10000A430();
  uint64_t v4 = sub_100007F20();
  v5(v4);
  return a2;
}

uint64_t sub_1000AABFC(uint64_t a1, uint64_t *a2)
{
  sub_100011D80(a2);
  sub_10000A430();
  sub_1000084F8();
  v3();
  return a1;
}

unint64_t sub_1000AAC50()
{
  unint64_t result = qword_10012F8F8;
  if (!qword_10012F8F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012F8F8);
  }
  return result;
}

uint64_t sub_1000AACBC()
{
  return v0 + 8;
}

void sub_1000AACCC()
{
  strcpy((char *)(v0 + 16), "xp_amp_ams_log");
  *(unsigned char *)(v0 + 31) = -18;
}

uint64_t sub_1000AACF4(uint64_t a1, uint64_t a2)
{
  return _swift_task_switch(a1, a2, 0);
}

uint64_t sub_1000AACFC()
{
  return swift_allocObject();
}

uint64_t sub_1000AAD28@<X0>(uint64_t a1@<X8>)
{
  return sub_100009CC0(0xD000000000000010, (a1 - 32) | 0x8000000000000000);
}

uint64_t sub_1000AAD58@<X0>(uint64_t a1@<X8>)
{
  v2[3] = a1;
  v2[4] = v5;
  v2[5] = (v1 - 32) | 0x8000000000000000;
  v2[6] = v4;
  v2[7] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000AAD80@<X0>(uint64_t a1@<X8>)
{
  v2[3] = a1;
  v2[4] = v4;
  v2[5] = (v1 - 32) | 0x8000000000000000;
  v2[6] = v3;
  v2[7] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000AADC4()
{
  return swift_getErrorValue();
}

uint64_t sub_1000AAE00()
{
  return v0;
}

unint64_t sub_1000AAE18()
{
  sub_10000D47C(v0);
  return 0xD000000000000013;
}

uint64_t sub_1000AAE40()
{
  return static LogInterpolation.traceableSensitive(_:)();
}

uint64_t sub_1000AAE60()
{
  return v0;
}

uint64_t sub_1000AAE80()
{
  return v0;
}

uint64_t sub_1000AAE90()
{
  return v0;
}

uint64_t sub_1000AAEA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100009CC0(a1, (a2 - 32) | 0x8000000000000000);
}

uint64_t sub_1000AAEB8()
{
  return type metadata accessor for Log();
}

void *sub_1000AAEE0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000087B0((void *)(a1 + v1), *(void *)(a1 + v1 + 24));
}

void *sub_1000AAF04@<X0>(uint64_t a1@<X8>)
{
  return sub_1000087B0((void *)(a1 + v1), *(void *)(a1 + v1 + 24));
}

uint64_t sub_1000AAF28()
{
  return v0;
}

uint64_t sub_1000AAF34()
{
  return 0;
}

uint64_t sub_1000AAF6C()
{
  return v0;
}

uint64_t *sub_1000AAF7C()
{
  *(void *)(v1 + 240) = *(void *)(v1 + 288);
  return sub_1000042C4(v0);
}

uint64_t sub_1000AAFA8()
{
  return swift_allocObject();
}

void sub_1000AAFDC()
{
  sub_100017758();
}

uint64_t sub_1000AB014()
{
  return v0;
}

void sub_1000AB024()
{
  *(void *)(v1 + 96) = v0;
}

uint64_t sub_1000AB048()
{
  return swift_task_dealloc();
}

uint64_t sub_1000AB060()
{
  return LogInterpolation.init(stringLiteral:)();
}

uint64_t sub_1000AB080(uint64_t result)
{
  *(void *)(v1 + 272) = result;
  return result;
}

unint64_t sub_1000AB08C()
{
  return 0xD00000000000001BLL;
}

unint64_t sub_1000AB0A0()
{
  return 0xD000000000000016;
}

uint64_t sub_1000AB0E0()
{
  return static LogInterpolation.traceableSensitive(_:)();
}

uint64_t sub_1000AB100()
{
  return sub_100007468(v1, v0 - 80);
}

uint64_t sub_1000AB120@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 + 152) = a1;
  *(unsigned char *)(v2 + 12_Block_object_dispose(&a9, 8) = v1;
  return LogInterpolation.StringInterpolation.appendInterpolation(_:)();
}

uint64_t sub_1000AB140()
{
  return v0;
}

uint64_t sub_1000AB154@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_1000AB160@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100011D80(&qword_10012E4A0);
  uint64_t v7 = sub_1000085F4(v6);
  __chkstk_darwin(v7);
  sub_100008338();
  uint64_t v10 = v9 - v8;
  uint64_t v60 = type metadata accessor for CachedServerDataSyncAttempt(0);
  sub_1000082F8();
  __chkstk_darwin(v11);
  sub_100008338();
  uint64_t v59 = (unsigned char *)(v13 - v12);
  uint64_t v14 = sub_100011D80(&qword_10012E458);
  uint64_t v15 = sub_1000085F4(v14);
  __chkstk_darwin(v15);
  sub_100008338();
  uint64_t v18 = v17 - v16;
  uint64_t v19 = type metadata accessor for Date();
  sub_10000BFC4();
  uint64_t v21 = v20;
  __chkstk_darwin(v22);
  sub_100008338();
  uint64_t v25 = v24 - v23;
  uint64_t v26 = (int *)type metadata accessor for CachedServerDataSyncTaskScheduleInput(0);
  sub_100006374((uint64_t)a1 + v26[14], v18, &qword_10012E458);
  if (sub_10001044C(v18, 1, v19) == 1)
  {
    sub_100018910(v18, &qword_10012E458);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v25, v18, v19);
    if (static Date.> infix(_:_:)())
    {
      sub_10000FAB8();
      sub_1000082F8();
      uint64_t v27 = sub_10000D40C();
      v28(v27);
      uint64_t v29 = type metadata accessor for CachedServerDataSyncTaskSchedule(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(a3 + *(int *)(v29 + 20), v25, v19);
      uint64_t v30 = sub_10000A55C();
      *(unsigned char *)(a3 + v31) = 2;
      unint64_t v32 = (void *)(a3 + *(int *)(v29 + 32));
      *unint64_t v32 = v33;
      v32[1] = v30;
      int64_t v34 = *(uint64_t (**)(uint64_t, uint64_t))(v21 + 8);
      swift_bridgeObjectRetain();
      return v34(v25, v19);
    }
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v25, v19);
  }
  if (sub_1000AB564((uint64_t)a1))
  {
    sub_10000FAB8();
    sub_1000082F8();
    uint64_t v36 = sub_10000D40C();
    v37(v36);
    uint64_t v38 = type metadata accessor for CachedServerDataSyncTaskSchedule(0);
    uint64_t v39 = sub_100008494(v38);
    v40(v39);
    uint64_t v41 = sub_10000A55C();
    *(unsigned char *)(a3 + v43) = 4;
LABEL_8:
    long long v44 = (void *)(a3 + dword_10012E478);
    *long long v44 = v42;
    v44[1] = v41;
    return swift_bridgeObjectRetain();
  }
  if (*(uint64_t *)((char *)a1 + v26[17])) {
    return sub_1000AB620(a1, a2, a3);
  }
  sub_100006374((uint64_t)a1 + v26[18], v10, &qword_10012E4A0);
  if (sub_10001044C(v10, 1, v60) == 1)
  {
    sub_100018910(v10, &qword_10012E4A0);
    sub_10000FAB8();
    sub_1000082F8();
    uint64_t v45 = sub_10000D40C();
    v46(v45);
    uint64_t v47 = type metadata accessor for CachedServerDataSyncTaskSchedule(0);
    uint64_t v48 = sub_100008494(v47);
    v49(v48);
    uint64_t v41 = sub_10000A55C();
    *(unsigned char *)(a3 + v50) = 0;
    goto LABEL_8;
  }
  sub_10009DE60(v10, (uint64_t)v59);
  sub_10000FAB8();
  sub_1000082F8();
  uint64_t v51 = sub_10000D40C();
  v52(v51);
  uint64_t v53 = type metadata accessor for CachedServerDataSyncTaskSchedule(0);
  uint64_t v54 = sub_100008494(v53);
  v55(v54);
  uint64_t v57 = *a1;
  uint64_t v56 = a1[1];
  *(unsigned char *)(a3 + dword_10012E470) = *v59;
  *(unsigned char *)(a3 + dword_10012E474) = 1;
  uint64_t v58 = (void *)(a3 + dword_10012E478);
  *uint64_t v58 = v57;
  v58[1] = v56;
  swift_bridgeObjectRetain();
  return sub_1000ABAE0((uint64_t)v59, (void (*)(void))type metadata accessor for CachedServerDataSyncAttempt);
}

BOOL sub_1000AB564(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CachedServerDataSyncTaskScheduleInput(0);
  sub_1000082F8();
  __chkstk_darwin(v3);
  sub_100008338();
  uint64_t v6 = v5 - v4;
  int v8 = *(unsigned __int8 *)(a1 + *(int *)(v7 + 40));
  sub_1000ABA7C(a1, v5 - v4);
  BOOL v9 = v8 == 10 || *(unsigned char *)(v6 + *(int *)(v2 + 40)) == 0;
  sub_1000ABAE0(v6, (void (*)(void))type metadata accessor for CachedServerDataSyncTaskScheduleInput);
  return v9;
}

uint64_t sub_1000AB620@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v37 = a2;
  uint64_t v39 = a3;
  uint64_t v4 = sub_100011D80(&qword_10012E458);
  uint64_t v5 = sub_1000085F4(v4);
  __chkstk_darwin(v5);
  sub_100008338();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = type metadata accessor for Date();
  sub_10000BFC4();
  uint64_t v11 = v10;
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v38 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v36 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (NSDecimal *)((char *)&v36 - v18);
  uint64_t v20 = (int *)type metadata accessor for CachedServerDataSyncTaskScheduleInput(0);
  Swift::UInt v36 = *(void *)((char *)a1 + v20[8]);
  Swift::UInt v21 = *(void *)((char *)a1 + v20[6]);
  uint64_t v22 = *(void *)((char *)a1 + v20[17]);
  sub_100006374((uint64_t)a1 + v20[16], v8, &qword_10012E458);
  if (sub_10001044C(v8, 1, v9) == 1)
  {
    static Date.distantPast.getter();
    sub_100018910(v8, &qword_10012E458);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v17, v8, v9);
  }
  sub_1000AB91C(v36, v21, v22, v19);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v11 + 8);
  v23(v17, v9);
  uint64_t v24 = v37;
  char v25 = static Date.> infix(_:_:)();
  uint64_t v26 = v38;
  if (v25)
  {
    (*(void (**)(char *, NSDecimal *, uint64_t))(v11 + 32))(v38, v19, v9);
  }
  else
  {
    v23((char *)v19, v9);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v26, v24, v9);
  }
  uint64_t v27 = (char *)a1 + v20[5];
  type metadata accessor for AccountIdentity();
  sub_1000082F8();
  uint64_t v29 = v39;
  (*(void (**)(uint64_t, char *))(v28 + 16))(v39, v27);
  char v30 = *((unsigned char *)a1 + v20[10]);
  uint64_t v32 = *a1;
  uint64_t v31 = a1[1];
  uint64_t v33 = (int *)type metadata accessor for CachedServerDataSyncTaskSchedule(0);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v29 + v33[5], v26, v9);
  *(unsigned char *)(v29 + v33[6]) = v30;
  *(unsigned char *)(v29 + v33[7]) = 2;
  int64_t v34 = (void *)(v29 + v33[8]);
  *int64_t v34 = v32;
  v34[1] = v31;
  return swift_bridgeObjectRetain();
}

void sub_1000AB91C(Swift::UInt a1@<X0>, Swift::UInt a2@<X1>, uint64_t a3@<X2>, NSDecimal *a4@<X8>)
{
  NSDecimal.init(_:)(a4, a2);
  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    pow(_:_:)(v8, v6, v7);
    NSDecimal.init(_:)(v9, a1);
    static NSDecimal.* infix(_:_:)();
    NSDecimal._bridgeToObjectiveC()(v10);
    uint64_t v12 = v11;
    [v11 doubleValue];

    Date.addingTimeInterval(_:)();
  }
}

void sub_1000ABA2C(uint64_t a1@<X8>, double a2@<D0>)
{
  *(_WORD *)a1 = 1;
  *(double *)(a1 + _Block_object_dispose(&a9, 8) = a2;
  if (a2 >= 1800.0) {
    double v2 = 300.0;
  }
  else {
    double v2 = 60.0;
  }
  *(_WORD *)(a1 + 16) = 0;
  *(double *)(a1 + 24) = v2;
  *(unsigned char *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 4_Block_object_dispose(&a9, 8) = 1;
  *(_WORD *)(a1 + 49) = 257;
  *(unsigned char *)(a1 + 51) = 0;
}

uint64_t sub_1000ABA7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CachedServerDataSyncTaskScheduleInput(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000ABAE0(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_1000082F8();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_1000ABB3C(uint64_t a1, uint64_t a2)
{
  sub_100011D80(&qword_10012E438);
  uint64_t v4 = swift_allocError();
  *uint64_t v5 = a2;
  return _swift_continuation_throwingResumeWithError(a1, v4);
}

uint64_t sub_1000ABBA0(uint64_t a1, char a2)
{
  **(unsigned char **)(*(void *)(a1 + 64) + 40) = a2;
  return _swift_continuation_throwingResume();
}

uint64_t sub_1000ABBC4(uint64_t a1, uint64_t a2)
{
  **(void **)(*(void *)(a1 + 64) + 40) = a2;
  return _swift_continuation_throwingResume();
}

uint64_t sub_1000ABBE4(uint64_t result, uint64_t a2, void *a3)
{
  if (a3) {
    return sub_1000ABB3C(*(void *)(result + 32), (uint64_t)a3);
  }
  if (a2)
  {
    swift_unknownObjectRetain();
    uint64_t v3 = sub_100016AE4();
    return sub_1000ABBC4(v3, v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL sub_1000ABC38(unint64_t a1, unint64_t a2)
{
  BOOL result = (a1 | a2) == 0;
  if (a1)
  {
    if (a2)
    {
      sub_10001065C(0, &qword_10012F940);
      id v5 = (id)a1;
      id v6 = (id)a2;
      char v7 = static NSObject.== infix(_:_:)();

      return v7 & 1;
    }
  }
  return result;
}

BOOL sub_1000ABCC4(unint64_t *a1, unint64_t *a2)
{
  return sub_1000ABC38(*a1, *a2);
}

id sub_1000ABCD0()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for DeviceAccountPrivacyUpdater()) init];
  qword_100137178 = (uint64_t)result;
  return result;
}

id sub_1000ABD00()
{
  if (qword_10012E208 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_100137178;
  return v0;
}

uint64_t sub_1000ABD84()
{
  sub_100008308();
  v1[10] = v0;
  uint64_t v2 = type metadata accessor for Log();
  v1[11] = v2;
  sub_1000082C8(v2);
  v1[12] = v3;
  v1[13] = swift_task_alloc();
  v1[14] = swift_task_alloc();
  sub_10000F9E8();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_1000ABE28()
{
  char v1 = (void *)v0[10];
  static Log.accountsDaemon.getter();
  sub_100011D80((uint64_t *)&unk_10012E440);
  uint64_t v2 = type metadata accessor for LogInterpolation();
  sub_1000082C8(v2);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3F0;
  uint64_t v3 = type metadata accessor for DeviceAccountPrivacyUpdater();
  v0[2] = v1;
  uint64_t v22 = v3;
  v0[5] = v3;
  id v4 = v1;
  id v5 = (id)AMSLogKey();
  if (v5)
  {
    uint64_t v6 = v5;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  uint64_t v7 = v0[14];
  uint64_t v8 = v0[11];
  uint64_t v9 = v0[12];
  static LogInterpolation.prefix(_:_:)();
  swift_bridgeObjectRelease();
  sub_10000D47C((uint64_t)(v0 + 2));
  LogInterpolation.init(stringLiteral:)();
  Log.default(_:)();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  id v11 = objc_msgSend(self, "ams_sharedAccountStore");
  id v12 = objc_msgSend(v11, "ams_activeiTunesAccount");
  v0[15] = v12;

  if (v12)
  {
    uint64_t v13 = (void *)swift_task_alloc();
    v0[16] = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_1000AC1A0;
    return sub_1000AC5B0();
  }
  else
  {
    uint64_t v15 = (void *)v0[10];
    static Log.accountsDaemon.getter();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3F0;
    v0[9] = v22;
    v0[6] = v15;
    id v16 = v15;
    id v17 = (id)AMSLogKey();
    if (v17)
    {
      uint64_t v18 = v17;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    uint64_t v19 = v0[13];
    uint64_t v20 = v0[11];
    static LogInterpolation.prefix(_:_:)();
    swift_bridgeObjectRelease();
    sub_10000D47C((uint64_t)(v0 + 6));
    sub_100012258();
    LogInterpolation.init(stringLiteral:)();
    Log.default(_:)();
    swift_bridgeObjectRelease();
    v10(v19, v20);
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000800C();
    return v21();
  }
}

uint64_t sub_1000AC1A0()
{
  sub_100008308();
  sub_1000082E0();
  sub_10000A43C();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_100008314();
  *id v5 = v4;
  *(void *)(v6 + 136) = v0;
  swift_task_dealloc();
  sub_10000F9E8();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000AC27C()
{
  sub_100008308();

  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000800C();
  return v1();
}

uint64_t sub_1000AC2E4()
{
  sub_100008308();

  swift_task_dealloc();
  swift_task_dealloc();
  sub_100008600();
  return v1();
}

uint64_t sub_1000AC3D0(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1000AC478;
  return sub_1000ABD84();
}

uint64_t sub_1000AC478()
{
  sub_100005AEC();
  sub_10000D420();
  uint64_t v4 = v3;
  sub_100008314();
  *id v5 = v4;
  uint64_t v6 = *(void **)(v1 + 16);
  uint64_t v7 = *v2;
  *id v5 = *v2;
  swift_task_dealloc();

  if (v0)
  {
    uint64_t v8 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    uint64_t v9 = sub_100016988();
    v10(v9);
  }
  else
  {
    uint64_t v11 = sub_100009CAC();
    v12(v11);
  }
  _Block_release(*(const void **)(v4 + 24));
  uint64_t v13 = *(uint64_t (**)(void))(v7 + 8);
  return v13();
}

uint64_t sub_1000AC5B0()
{
  sub_100008308();
  v1[40] = v2;
  v1[41] = v0;
  uint64_t v3 = type metadata accessor for Log();
  v1[42] = v3;
  sub_1000082C8(v3);
  v1[43] = v4;
  v1[44] = swift_task_alloc();
  v1[45] = swift_task_alloc();
  v1[46] = swift_task_alloc();
  v1[47] = swift_task_alloc();
  sub_10000F9E8();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1000AC66C()
{
  uint64_t v1 = *(void **)(v0 + 328);
  static Log.accountsDaemon.getter();
  *(void *)(v0 + 384) = sub_100011D80((uint64_t *)&unk_10012E440);
  uint64_t v2 = type metadata accessor for LogInterpolation();
  sub_1000082C8(v2);
  *(void *)(v0 + 392) = *(void *)(v3 + 72);
  *(_DWORD *)(v0 + 48_Block_object_dispose(&a9, 8) = *(_DWORD *)(v4 + 80);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3D0;
  uint64_t v5 = type metadata accessor for DeviceAccountPrivacyUpdater();
  *(void *)(v0 + 184) = v1;
  *(void *)(v0 + 400) = v5;
  uint64_t v30 = v5;
  *(void *)(v0 + 20_Block_object_dispose(&a9, 8) = v5;
  id v6 = v1;
  id v7 = (id)AMSLogKey();
  if (v7)
  {
    uint64_t v8 = v7;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  uint64_t v9 = *(void *)(v0 + 376);
  uint64_t v10 = *(void *)(v0 + 344);
  uint64_t v31 = *(void *)(v0 + 336);
  uint64_t v11 = *(void **)(v0 + 320);
  static LogInterpolation.prefix(_:_:)();
  swift_bridgeObjectRelease();
  sub_10000D47C(v0 + 184);
  LogInterpolation.init(stringLiteral:)();
  id v12 = [v11 hashedDescription];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  *(void *)(v0 + 80) = &type metadata for String;
  *(void *)(v0 + 56) = v13;
  *(void *)(v0 + 64) = v15;
  static LogInterpolation.sensitive(_:)();
  sub_10000EB44(v0 + 56, &qword_10012EFB0);
  Log.default(_:)();
  swift_bridgeObjectRelease();
  id v16 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  *(void *)(v0 + 40_Block_object_dispose(&a9, 8) = v16;
  *(void *)(v0 + 416) = (v10 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v16(v9, v31);
  if ([self deviceIsBundle])
  {
    id v17 = *(void **)(v0 + 328);
    static Log.accountsDaemon.getter();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3F0;
    *(void *)(v0 + 240) = v30;
    *(void *)(v0 + 216) = v17;
    id v18 = v17;
    id v19 = (id)AMSLogKey();
    if (v19)
    {
      uint64_t v20 = v19;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    uint64_t v25 = *(void *)(v0 + 360);
    uint64_t v26 = *(void *)(v0 + 336);
    static LogInterpolation.prefix(_:_:)();
    swift_bridgeObjectRelease();
    sub_10000D47C(v0 + 216);
    sub_100012258();
    LogInterpolation.init(stringLiteral:)();
    Log.default(_:)();
    swift_bridgeObjectRelease();
    v16(v25, v26);
    NSString v27 = String._bridgeToObjectiveC()();
    (id)AMSError();

    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
    return v28();
  }
  else
  {
    Swift::UInt v21 = *(void **)(v0 + 320);
    *(void *)(v0 + 424) = *(void *)(*(void *)(v0 + 328)
                                      + OBJC_IVAR____TtC12amsaccountsd27DeviceAccountPrivacyUpdater_stateTracker);
    id v22 = v21;
    uint64_t v23 = sub_100016AE4();
    return _swift_task_switch(v23, v24, 0);
  }
}

uint64_t sub_1000ACAA0()
{
  sub_100008308();
  uint64_t v1 = *(void **)(v0 + 320);
  *(unsigned char *)(v0 + 492) = sub_1000AE958((void *)(v0 + 312), 0, v1) & 1;

  sub_10000F9E8();
  return _swift_task_switch(v2, v3, v4);
}

uint64_t sub_1000ACB1C()
{
  int v1 = *(unsigned __int8 *)(v0 + 492);
  uint64_t v2 = *(void **)(v0 + 312);
  *(void *)(v0 + 432) = v2;
  if (v1 == 1)
  {
    if (qword_10012E210 != -1) {
      swift_once();
    }
    uint64_t v3 = *(void **)(v0 + 328);
    unint64_t v4 = sub_10000F8C4();
    sub_100007480(v4, v5);
    uint64_t v6 = sub_10001065C(0, &qword_10012F948);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v7 = sub_1000AD3CC();
    *(void *)(v0 + 440) = v7;
    sub_10001065C(0, (unint64_t *)&qword_10012E490);
    *(NSNumber *)(v0 + 44_Block_object_dispose(&a9, 8) = NSNumber.init(integerLiteral:)(0);
    *(void *)(v0 + 40) = v6;
    *(void *)(v0 + 4_Block_object_dispose(&a9, 8) = &off_100116790;
    *(void *)(v0 + 16) = v7;
    uint64_t v8 = swift_allocObject();
    *(void *)(v0 + 456) = v8;
    *(void *)(v8 + 16) = v3;
    id v9 = v3;
    id v10 = v7;
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 464) = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_1000ACF2C;
    sub_10000B224();
    return sub_1000AEE1C(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  else
  {
    uint64_t v22 = *(void *)(v0 + 400);
    uint64_t v23 = *(void **)(v0 + 328);
    static Log.accountsDaemon.getter();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3D0;
    *(void *)(v0 + 144) = v22;
    *(void *)(v0 + 120) = v23;
    id v24 = v23;
    id v25 = (id)AMSLogKey();
    if (v25)
    {
      uint64_t v26 = v25;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v0 + 408);
    uint64_t v27 = *(void *)(v0 + 368);
    uint64_t v28 = *(void *)(v0 + 336);
    static LogInterpolation.prefix(_:_:)();
    swift_bridgeObjectRelease();
    sub_10000D47C(v0 + 120);
    LogInterpolation.init(stringLiteral:)();
    *(void *)(v0 + 176) = &type metadata for DeviceAccountPrivacyUpdater.State;
    *(void *)(v0 + 152) = v2;
    id v29 = v2;
    static LogInterpolation.sensitive(_:)();
    sub_10000EB44(v0 + 152, &qword_10012EFB0);
    Log.error(_:)();
    swift_bridgeObjectRelease();
    v32(v27, v28);
    NSString v30 = String._bridgeToObjectiveC()();
    (id)AMSError();

    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
    return v31();
  }
}

uint64_t sub_1000ACF2C()
{
  sub_100009C64();
  sub_1000082E0();
  uint64_t v3 = v2;
  sub_10000A43C();
  *unint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_100008314();
  *uint64_t v6 = v5;
  *(void *)(v3 + 472) = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v7 = *(void **)(v3 + 448);
    swift_release();

    uint64_t v8 = sub_1000AD1A4;
    uint64_t v9 = 0;
  }
  else
  {

    swift_release();
    sub_10000D47C(v3 + 16);
    *(void *)(v3 + 480) = 0;
    uint64_t v9 = *(void *)(v3 + 424);
    uint64_t v8 = sub_1000AD048;
  }
  return _swift_task_switch(v8, v9, 0);
}

uint64_t sub_1000AD048()
{
  sub_100008308();
  sub_1000AEA30(0);
  sub_10000F9E8();
  return _swift_task_switch(v0, v1, v2);
}

uint64_t sub_1000AD0AC()
{
  sub_100005AEC();
  uint64_t v1 = *(void *)(v0 + 480);
  unint64_t v2 = sub_10000F8C4();
  sub_100009CC0(v2, v3);
  if (v1)
  {
    uint64_t v5 = *(void **)(v0 + 432);
    uint64_t v4 = *(void **)(v0 + 440);
    swift_willThrow();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100008600();
  }
  else
  {
    id v7 = *(void **)(v0 + 432);

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000800C();
  }
  return v6();
}

uint64_t sub_1000AD1A4()
{
  uint64_t v1 = v0[50];
  unint64_t v2 = (void *)v0[41];
  sub_10000D47C((uint64_t)(v0 + 2));
  static Log.accountsDaemon.getter();
  uint64_t v3 = swift_allocObject();
  v0[11] = v2;
  *(_OWORD *)(v3 + 16) = xmmword_1000DA3D0;
  v0[14] = v1;
  id v4 = v2;
  id v5 = (id)AMSLogKey();
  if (v5)
  {
    uint64_t v6 = v5;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  uint64_t v7 = v0[59];
  uint64_t v16 = (void (*)(uint64_t, uint64_t))v0[51];
  uint64_t v14 = v0[44];
  uint64_t v15 = v0[42];
  static LogInterpolation.prefix(_:_:)();
  swift_bridgeObjectRelease();
  sub_10000D47C((uint64_t)(v0 + 11));
  sub_100012258();
  LogInterpolation.init(stringLiteral:)();
  uint64_t v8 = v7;
  swift_getErrorValue();
  uint64_t v9 = v0[35];
  uint64_t v10 = v0[36];
  v0[34] = v10;
  uint64_t v11 = sub_1000042C4(v0 + 31);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v11, v9, v10);
  static LogInterpolation.safe(_:)();
  sub_10000EB44((uint64_t)(v0 + 31), &qword_10012EFB0);
  Log.error(_:)();
  swift_bridgeObjectRelease();
  v16(v14, v15);
  v0[60] = v8;
  uint64_t v12 = v0[53];
  return _swift_task_switch(sub_1000AD048, v12, 0);
}

id sub_1000AD3CC()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithDomain:v1];

  return v2;
}

uint64_t sub_1000AD440(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 12_Block_object_dispose(&a9, 8) = a1;
  *(void *)(v2 + 136) = a2;
  return _swift_task_switch(sub_1000AD460, 0, 0);
}

uint64_t sub_1000AD460()
{
  sub_100005AEC();
  uint64_t v1 = v0[16];
  id v2 = [self sharedService];
  id v3 = [v2 forceRegisterAccount:v1];
  v0[18] = v3;

  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_1000AD5AC;
  uint64_t v4 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1000ABBE4;
  v0[13] = &unk_1001166B0;
  v0[14] = v4;
  [v3 resultWithCompletion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000AD5AC()
{
  sub_100008308();
  sub_1000082E0();
  sub_10000A43C();
  *id v2 = v1;
  *id v2 = *v0;
  *(void *)(v1 + 152) = *(void *)(v3 + 48);
  sub_10000F9E8();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_1000AD68C()
{
  sub_100005AEC();
  id v2 = (void *)v0[17];
  uint64_t v1 = (void *)v0[18];
  swift_unknownObjectRelease();

  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  sub_1000087B0(v2, v3);
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  id v6 = [v5 BOOLValue];

  uint64_t v7 = (uint64_t (*)(id))v0[1];
  return v7(v6);
}

uint64_t sub_1000AD76C()
{
  sub_100009C64();
  uint64_t v1 = *(void **)(v0 + 144);
  swift_willThrow();

  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2(0);
}

uint64_t sub_1000AD7DC(uint64_t a1)
{
  *(void *)(v1 + 12_Block_object_dispose(&a9, 8) = a1;
  return _swift_task_switch(sub_1000AD7FC, 0, 0);
}

uint64_t sub_1000AD7FC()
{
  uint64_t v1 = (void *)v0[16];
  id v2 = self;
  id v3 = v1;
  id v4 = objc_msgSend(v2, "ams_sharedAccountStore");
  id v5 = [self defaultBag];
  id v6 = [objc_allocWithZone((Class)AMSAccountDeviceInfoTask) initWithAccount:v3 accountStore:v4 bag:v5];

  id v7 = [v6 perform];
  v0[17] = v7;

  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_1000AD9BC;
  uint64_t v8 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1000ADB8C;
  v0[13] = &unk_100116698;
  v0[14] = v8;
  [v7 resultWithCompletion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000AD9BC()
{
  sub_100008308();
  sub_1000082E0();
  sub_10000A43C();
  *id v2 = v1;
  *id v2 = *v0;
  *(void *)(v1 + 144) = *(void *)(v3 + 48);
  sub_10000F9E8();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_1000ADA9C()
{
  sub_100008308();
  uint64_t v1 = *(void **)(v0 + 120);

  id v2 = [v1 account];
  uint64_t v3 = *(uint64_t (**)(id))(v0 + 8);
  return v3(v2);
}

uint64_t sub_1000ADB24()
{
  sub_100009C64();
  uint64_t v1 = *(void **)(v0 + 136);
  swift_willThrow();

  sub_100008600();
  return v2();
}

uint64_t sub_1000ADB90(uint64_t a1, uint64_t a2)
{
  v2[57] = a1;
  v2[58] = a2;
  uint64_t v3 = type metadata accessor for Log();
  v2[59] = v3;
  v2[60] = *(void *)(v3 - 8);
  v2[61] = swift_task_alloc();
  return _swift_task_switch(sub_1000ADC50, 0, 0);
}

uint64_t sub_1000ADC50()
{
  id v1 = [self defaultBag];
  id v2 = [objc_allocWithZone((Class)AMSEngagement) initWithBag:v1];
  *(void *)(v0 + 496) = v2;

  sub_100011D80(&qword_10012F970);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000DA3D0;
  *(void *)(v0 + 432) = 0x707954746E657665;
  *(void *)(v0 + 440) = 0xE900000000000065;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 72) = 0xD000000000000023;
  *(void *)(inited + 80) = 0x8000000100102E10;
  strcpy((char *)(v0 + 416), "nativeHandling");
  *(unsigned char *)(v0 + 431) = -18;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 16_Block_object_dispose(&a9, 8) = &type metadata for Bool;
  *(unsigned char *)(inited + 144) = 1;
  *(void *)(v0 + 400) = 0x746E756F636361;
  *(void *)(v0 + 40_Block_object_dispose(&a9, 8) = 0xE700000000000000;
  AnyHashable.init<A>(_:)();
  uint64_t v4 = sub_1000AE284();
  *(void *)(inited + 240) = sub_100011D80(&qword_10012E570);
  *(void *)(inited + 216) = v4;
  Dictionary.init(dictionaryLiteral:)();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v6 = [v2 enqueueData:isa];
  *(void *)(v0 + 504) = v6;

  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 448;
  *(void *)(v0 + 24) = sub_1000ADF50;
  uint64_t v7 = swift_continuation_init();
  *(void *)(v0 + 32_Block_object_dispose(&a9, 8) = _NSConcreteStackBlock;
  *(void *)(v0 + 336) = 0x40000000;
  *(void *)(v0 + 344) = sub_1000ADB8C;
  *(void *)(v0 + 352) = &unk_100116680;
  *(void *)(v0 + 360) = v7;
  objc_msgSend(v6, "resultWithCompletion:");
  sub_10000B224();
  return _swift_continuation_await(v8);
}

uint64_t sub_1000ADF50()
{
  sub_100008308();
  sub_1000082E0();
  sub_10000A43C();
  *id v2 = v1;
  *id v2 = *v0;
  *(void *)(v1 + 512) = *(void *)(v3 + 48);
  sub_10000F9E8();
  return _swift_task_switch(v4, v5, v6);
}

void sub_1000AE030()
{
  uint64_t v1 = *(void **)(v0 + 464);
  uint64_t v12 = *(void **)(v0 + 448);

  static Log.accountsDaemon.getter();
  sub_100011D80((uint64_t *)&unk_10012E440);
  uint64_t v2 = type metadata accessor for LogInterpolation();
  sub_1000082C8(v2);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3F0;
  *(void *)(v0 + 392) = type metadata accessor for DeviceAccountPrivacyUpdater();
  *(void *)(v0 + 36_Block_object_dispose(&a9, 8) = v1;
  id v3 = v1;
  id v4 = (id)AMSLogKey();
  if (v4)
  {
    uint64_t v5 = v4;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  uint64_t v6 = *(void *)(v0 + 488);
  uint64_t v7 = *(void **)(v0 + 496);
  uint64_t v8 = *(void *)(v0 + 472);
  uint64_t v9 = *(void *)(v0 + 480);
  static LogInterpolation.prefix(_:_:)();
  swift_bridgeObjectRelease();
  sub_10000D47C(v0 + 368);
  sub_100012258();
  LogInterpolation.init(stringLiteral:)();
  Log.default(_:)();

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v6, v8);
  swift_task_dealloc();
  sub_10000B224();
  __asm { BRAA            X2, X16 }
}

uint64_t sub_1000AE1FC()
{
  sub_100005AEC();
  uint64_t v1 = (void *)v0[63];
  uint64_t v2 = (void *)v0[62];
  swift_willThrow();

  swift_task_dealloc();
  id v3 = (uint64_t (*)(void))v0[1];
  return v3(0);
}

void *sub_1000AE284()
{
  uint64_t v1 = v0;
  uint64_t v11 = &_swiftEmptyDictionarySingleton;
  id v2 = objc_msgSend(v0, "ams_DSID");
  if (v2)
  {
    id v3 = v2;
    *((void *)&v10 + 1) = sub_10001065C(0, (unint64_t *)&qword_10012E490);
    *(void *)&long long v9 = v3;
  }
  else
  {
    long long v9 = 0u;
    long long v10 = 0u;
  }
  sub_1000B0C5C((uint64_t)&v9, 1684632420, 0xE400000000000000);
  uint64_t v4 = sub_100005510(v1, (SEL *)&selRef_ams_altDSID);
  if (v5)
  {
    *((void *)&v10 + 1) = &type metadata for String;
    *(void *)&long long v9 = v4;
    *((void *)&v9 + 1) = v5;
  }
  else
  {
    long long v9 = 0u;
    long long v10 = 0u;
  }
  sub_1000B0C5C((uint64_t)&v9, 0x44495344746C61, 0xE700000000000000);
  uint64_t v6 = sub_100005510(v1, (SEL *)&selRef_username);
  if (v7)
  {
    *((void *)&v10 + 1) = &type metadata for String;
    *(void *)&long long v9 = v6;
    *((void *)&v9 + 1) = v7;
  }
  else
  {
    long long v9 = 0u;
    long long v10 = 0u;
  }
  sub_1000B0C5C((uint64_t)&v9, 0x656D616E72657375, 0xE800000000000000);
  return v11;
}

uint64_t sub_1000AE3C0(uint64_t result, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 32);
  if (a3) {
    return sub_1000ABB3C(v3, (uint64_t)a3);
  }
  if (a2) {
    return sub_1000ABBC4(v3, (uint64_t)a2);
  }
  __break(1u);
  return result;
}

id sub_1000AE498()
{
  uint64_t v1 = OBJC_IVAR____TtC12amsaccountsd27DeviceAccountPrivacyUpdater_stateTracker;
  sub_100011D80(&qword_10012F978);
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = v0;
  swift_defaultActor_initialize();
  *(void *)(v2 + 112) = 0;
  *(void *)&v0[v1] = v2;

  v5.receiver = v3;
  v5.super_class = (Class)type metadata accessor for DeviceAccountPrivacyUpdater();
  return objc_msgSendSuper2(&v5, "init");
}

uint64_t sub_1000AE51C(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  a3;
  uint64_t v7 = (void *)swift_task_alloc();
  void v3[5] = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_1000AE5E0;
  return sub_1000AC5B0();
}

uint64_t sub_1000AE5E0()
{
  sub_100005AEC();
  sub_10000D420();
  uint64_t v4 = v3;
  sub_100008314();
  *objc_super v5 = v4;
  id v6 = *(void **)(v1 + 24);
  uint64_t v7 = *(void **)(v1 + 16);
  uint64_t v8 = *v2;
  *objc_super v5 = *v2;
  swift_task_dealloc();

  if (v0)
  {
    uint64_t v9 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    uint64_t v10 = sub_100016988();
    v11(v10);
  }
  else
  {
    uint64_t v12 = sub_100009CAC();
    v13(v12);
  }
  _Block_release(*(const void **)(v4 + 32));
  uint64_t v14 = *(uint64_t (**)(void))(v8 + 8);
  return v14();
}

id sub_1000AE754()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DeviceAccountPrivacyUpdater();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DeviceAccountPrivacyUpdater()
{
  return self;
}

void **initializeBufferWithCopyOfBuffer for DeviceAccountPrivacyUpdater.State(void **a1, void **a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  id v4 = v3;
  return a1;
}

void destroy for DeviceAccountPrivacyUpdater.State(id *a1)
{
}

void **assignWithCopy for DeviceAccountPrivacyUpdater.State(void **a1, void **a2)
{
  uint64_t v3 = *a2;
  id v4 = *a1;
  *a1 = *a2;
  id v5 = v3;

  return a1;
}

void *initializeWithTake for DeviceAccountPrivacyUpdater.State(void *result, void *a2)
{
  *id result = *a2;
  return result;
}

void **assignWithTake for DeviceAccountPrivacyUpdater.State(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for DeviceAccountPrivacyUpdater.State(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DeviceAccountPrivacyUpdater.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)id result = 0;
    *(_DWORD *)id result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + _Block_object_dispose(&a9, 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + _Block_object_dispose(&a9, 8) = 0;
    }
    if (a2) {
      *(void *)id result = a2;
    }
  }
  return result;
}

uint64_t sub_1000AE910(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_1000AE928(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *id result = v2;
  return result;
}

ValueMetadata *type metadata accessor for DeviceAccountPrivacyUpdater.State()
{
  return &type metadata for DeviceAccountPrivacyUpdater.State;
}

uint64_t sub_1000AE958(void *a1, void *a2, void *a3)
{
  uint64_t v4 = v3;
  id v8 = *(id *)(v3 + 112);
  if (v8)
  {
    if (a2)
    {
      sub_10001065C(0, &qword_10012F940);
      id v9 = v8;
      id v10 = a2;
      char v11 = static NSObject.== infix(_:_:)();

      uint64_t v12 = *(void **)(v4 + 112);
      id v8 = v12;
      if (v11) {
        goto LABEL_4;
      }
    }
LABEL_6:
    uint64_t v13 = 0;
    *a1 = v8;
    goto LABEL_7;
  }
  uint64_t v12 = 0;
  if (a2) {
    goto LABEL_6;
  }
LABEL_4:
  *(void *)(v4 + 112) = a3;
  id v8 = a3;

  *a1 = a3;
  uint64_t v13 = 1;
LABEL_7:
  id v14 = v8;
  return v13;
}

void sub_1000AEA30(void *a1)
{
  id v3 = *(id *)(v1 + 112);
  *(void *)(v1 + 112) = a1;
  id v2 = a1;
}

uint64_t sub_1000AEA70()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000AEAA8()
{
  sub_100008308();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000121C4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_1000AEB38;
  uint64_t v3 = sub_100016AE4();
  return sub_1000ADB90(v3, v4);
}

uint64_t sub_1000AEB38()
{
  sub_100008308();
  uint64_t v2 = v1;
  sub_1000082E0();
  uint64_t v3 = *v0;
  sub_100008314();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  id v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return v5(v2);
}

uint64_t sub_1000AEC04()
{
  _Block_release(*(const void **)(v0 + 24));
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000AEC4C()
{
  sub_100009C64();
  uint64_t v1 = (void *)v0[2];
  uint64_t v2 = (void *)v0[3];
  uint64_t v3 = (void *)v0[4];
  uint64_t v4 = swift_task_alloc();
  id v5 = (void *)sub_1000121C4(v4);
  *id v5 = v6;
  v5[1] = sub_100008208;
  uint64_t v7 = (uint64_t (*)(void *, void *, void *))((char *)&dword_10012F980 + dword_10012F980);
  return v7(v1, v2, v3);
}

uint64_t sub_1000AED00()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000AED38()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000AED78()
{
  sub_100009C64();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000121C4(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100015860;
  uint64_t v3 = sub_100016AE4();
  return v4(v3);
}

uint64_t sub_1000AEE1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[45] = a8;
  v8[46] = v13;
  v8[43] = a6;
  v8[44] = a7;
  v8[41] = a4;
  v8[42] = a5;
  v8[39] = a2;
  v8[40] = a3;
  v8[38] = a1;
  uint64_t v9 = type metadata accessor for Log();
  v8[47] = v9;
  sub_1000082C8(v9);
  v8[48] = v10;
  v8[49] = swift_task_alloc();
  v8[50] = swift_task_alloc();
  return _swift_task_switch(sub_1000AEEE0, 0, 0);
}

void sub_1000AEEE0()
{
  uint64_t v1 = *(void **)(v0 + 320);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_1000087B0(v1, v2);
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  unsigned int v48 = [v4 BOOLValue];

  uint64_t v5 = *(void *)(v0 + 400);
  uint64_t v6 = *(void *)(v0 + 384);
  uint64_t v47 = *(void *)(v0 + 376);
  static Log.accountsDaemon.getter();
  *(void *)(v0 + 40_Block_object_dispose(&a9, 8) = sub_100011D80((uint64_t *)&unk_10012E440);
  uint64_t v7 = type metadata accessor for LogInterpolation();
  sub_1000082C8(v7);
  uint64_t v9 = *(void *)(v8 + 72);
  sub_100016AF0();
  uint64_t v12 = v11 & ~v10;
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3D0;
  id v13 = (id)AMSSetLogKeyIfNeeded();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  static LogInterpolation.prefix<A>(_:_:)();
  swift_bridgeObjectRelease();
  sub_10000F838();
  *(void *)(v0 + 40) = &type metadata for Bool;
  *(unsigned char *)(v0 + 16) = v48;
  static LogInterpolation.safe(_:)();
  sub_100016B90(v0 + 16);
  Log.default(_:)();
  swift_bridgeObjectRelease();
  id v14 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  *(void *)(v0 + 424) = v14;
  *(void *)(v0 + 432) = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v14(v5, v47);
  if (v48)
  {
    uint64_t v15 = *(void *)(v0 + 312);
    static Log.accountsDaemon.getter();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3D0;
    uint64_t v45 = v12;
    id v16 = (id)AMSSetLogKeyIfNeeded();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    static LogInterpolation.prefix<A>(_:_:)();
    swift_bridgeObjectRelease();
    sub_100016634();
    uint64_t v17 = *(void **)(v0 + 312);
    if (v15)
    {
      *(void *)(v0 + 72) = sub_10001065C(0, (unint64_t *)&qword_10012E490);
      *(void *)(v0 + 4_Block_object_dispose(&a9, 8) = v17;
    }
    else
    {
      *(_OWORD *)(v0 + 4_Block_object_dispose(&a9, 8) = 0u;
      *(_OWORD *)(v0 + 64) = 0u;
    }
    uint64_t v22 = *(void *)(v0 + 392);
    uint64_t v23 = *(void *)(v0 + 376);
    id v24 = v17;
    static LogInterpolation.safe(_:)();
    sub_100016B90(v0 + 48);
    Log.default(_:)();
    swift_bridgeObjectRelease();
    v14(v22, v23);
    if (v15)
    {
      *(void *)(v0 + 464) = *(void *)(v0 + 304);
      uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v0 + 424);
      sub_1000121D0();
      id v26 = sub_100011F68(v25);
      static Log.accountsDaemon.getter();
      uint64_t v27 = swift_allocObject();
      id v35 = (id)sub_1000B0C3C(v27, v28, v29, v30, v31, v32, v33, v34, v9, v45, xmmword_1000DA3D0);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100016730();
      swift_bridgeObjectRelease();
      sub_1000167F0();
      sub_10000A3D0();
      *(void *)(v0 + 200) = sub_10001065C(0, &qword_10012FA58);
      *(void *)(v0 + 176) = v26;
      id v36 = v26;
      static LogInterpolation.sensitive(_:)();
      sub_100016B90(v0 + 176);
      Log.default(_:)();
      swift_bridgeObjectRelease();
      v50(v22, v23);
      uint64_t v37 = (void *)swift_task_alloc();
      *(void *)(v0 + 472) = v37;
      *uint64_t v37 = v0;
      v37[1] = sub_1000B0000;
      sub_100008478();
      __asm { BRAA            X1, X16 }
    }
    uint64_t v40 = *(void *)(v0 + 400);
    uint64_t v46 = *(void *)(v0 + 376);
    static Log.accountsDaemon.getter();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3F0;
    id v41 = (id)AMSSetLogKeyIfNeeded();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000086B8();
    swift_bridgeObjectRelease();
    sub_10000A3D0();
    Log.default(_:)();
    swift_bridgeObjectRelease();
    v14(v40, v46);
    uint64_t v42 = (void *)swift_task_alloc();
    *(void *)(v0 + 440) = v42;
    *uint64_t v42 = v0;
    v42[1] = sub_1000AFCF8;
    sub_10001699C();
    sub_100008478();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v18 = *(void *)(v0 + 400);
  uint64_t v49 = *(void *)(v0 + 376);
  static Log.accountsDaemon.getter();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3F0;
  id v19 = (id)AMSSetLogKeyIfNeeded();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10001205C();
  swift_bridgeObjectRelease();
  sub_10000FC5C();
  sub_10000A3D0();
  Log.default(_:)();
  swift_bridgeObjectRelease();
  v14(v18, v49);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000800C();
  sub_100008478();
  __asm { BRAA            X1, X16 }
}

void sub_1000AF67C()
{
  int v43 = *(unsigned __int8 *)(v0 + 508);
  uint64_t v1 = *(void *)(v0 + 400);
  uint64_t v2 = *(void *)(v0 + 384);
  uint64_t v44 = *(void *)(v0 + 376);
  static Log.accountsDaemon.getter();
  *(void *)(v0 + 40_Block_object_dispose(&a9, 8) = sub_100011D80((uint64_t *)&unk_10012E440);
  uint64_t v3 = type metadata accessor for LogInterpolation();
  sub_1000082C8(v3);
  sub_100016AF0();
  uint64_t v6 = v5 & ~v4;
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3D0;
  id v7 = (id)AMSSetLogKeyIfNeeded();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  static LogInterpolation.prefix<A>(_:_:)();
  swift_bridgeObjectRelease();
  sub_10000F838();
  *(unsigned char *)(v0 + 16) = v43;
  *(void *)(v0 + 40) = &type metadata for Bool;
  static LogInterpolation.safe(_:)();
  sub_100016B90(v0 + 16);
  Log.default(_:)();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  *(void *)(v0 + 424) = v8;
  *(void *)(v0 + 432) = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v8(v1, v44);
  if (v43 == 1)
  {
    uint64_t v9 = (_OWORD *)(v0 + 48);
    uint64_t v10 = *(void *)(v0 + 312);
    static Log.accountsDaemon.getter();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3D0;
    uint64_t v41 = v6;
    id v11 = (id)AMSSetLogKeyIfNeeded();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10001205C();
    swift_bridgeObjectRelease();
    sub_100016634();
    uint64_t v12 = *(void **)(v0 + 312);
    if (v10)
    {
      *(void *)(v0 + 72) = sub_10001065C(0, (unint64_t *)&qword_10012E490);
      *(void *)(v0 + 4_Block_object_dispose(&a9, 8) = v12;
    }
    else
    {
      *uint64_t v9 = 0u;
      *(_OWORD *)(v0 + 64) = 0u;
    }
    uint64_t v18 = *(void *)(v0 + 392);
    uint64_t v19 = *(void *)(v0 + 376);
    id v20 = v12;
    static LogInterpolation.safe(_:)();
    sub_100016B90((uint64_t)v9);
    Log.default(_:)();
    swift_bridgeObjectRelease();
    v8(v18, v19);
    if (v10)
    {
      *(void *)(v0 + 464) = *(void *)(v0 + 304);
      uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v0 + 424);
      sub_1000121D0();
      id v22 = sub_100011F68(v21);
      static Log.accountsDaemon.getter();
      uint64_t v23 = swift_allocObject();
      id v31 = (id)sub_1000B0C3C(v23, v24, v25, v26, v27, v28, v29, v30, (uint64_t)v8, v41, xmmword_1000DA3D0);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100016730();
      swift_bridgeObjectRelease();
      sub_1000167F0();
      sub_10000A3D0();
      *(void *)(v0 + 200) = sub_10001065C(0, &qword_10012FA58);
      *(void *)(v0 + 176) = v22;
      id v32 = v22;
      static LogInterpolation.sensitive(_:)();
      sub_100016B90(v0 + 176);
      Log.default(_:)();
      swift_bridgeObjectRelease();
      v45(v18, v18);
      uint64_t v33 = (void *)swift_task_alloc();
      *(void *)(v0 + 472) = v33;
      *uint64_t v33 = v0;
      v33[1] = sub_1000B0000;
      sub_10000B240();
      __asm { BRAA            X1, X16 }
    }
    uint64_t v36 = *(void *)(v0 + 400);
    uint64_t v42 = *(void *)(v0 + 376);
    static Log.accountsDaemon.getter();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3F0;
    id v37 = (id)AMSSetLogKeyIfNeeded();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000086B8();
    swift_bridgeObjectRelease();
    sub_10000A3D0();
    Log.default(_:)();
    swift_bridgeObjectRelease();
    v8(v36, v42);
    uint64_t v38 = (void *)swift_task_alloc();
    *(void *)(v0 + 440) = v38;
    *uint64_t v38 = v0;
    v38[1] = sub_1000AFCF8;
    sub_10001699C();
    sub_10000B240();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v13 = *(void *)(v0 + 400);
  uint64_t v14 = *(void *)(v0 + 376);
  static Log.accountsDaemon.getter();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3F0;
  id v15 = (id)AMSSetLogKeyIfNeeded();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10001205C();
  swift_bridgeObjectRelease();
  sub_10000FC5C();
  sub_10000A3D0();
  Log.default(_:)();
  swift_bridgeObjectRelease();
  v8(v13, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10000800C();
  sub_10000B240();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_1000AFCF8(uint64_t a1)
{
  sub_1000082E0();
  uint64_t v5 = v4;
  sub_10000A43C();
  *uint64_t v6 = v5;
  uint64_t v7 = *v2;
  sub_10000A43C();
  *uint64_t v8 = v7;
  *(void *)(v5 + 44_Block_object_dispose(&a9, 8) = v1;
  swift_task_dealloc();
  if (!v1) {
    *(void *)(v5 + 456) = a1;
  }
  sub_10000F930();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_1000AFDEC()
{
  uint64_t v1 = (void *)v0[57];
  v0[58] = v1;
  uint64_t v9 = (void (*)(uint64_t, uint64_t))v0[53];
  uint64_t v2 = v0[50];
  uint64_t v3 = v0[47];
  uint64_t v8 = (int *)v0[45];
  static Log.accountsDaemon.getter();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3D0;
  id v4 = (id)AMSSetLogKeyIfNeeded();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1000086B8();
  swift_bridgeObjectRelease();
  LogInterpolation.init(stringLiteral:)();
  v0[25] = sub_10001065C(0, &qword_10012FA58);
  v0[22] = v1;
  id v5 = v1;
  static LogInterpolation.sensitive(_:)();
  sub_100016B90((uint64_t)(v0 + 22));
  Log.default(_:)();
  swift_bridgeObjectRelease();
  v9(v2, v3);
  uint64_t v10 = (uint64_t (*)(id))((char *)v8 + *v8);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[59] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1000B0000;
  return v10(v5);
}

uint64_t sub_1000B0000(char a1)
{
  sub_1000082E0();
  uint64_t v5 = v4;
  sub_10000A43C();
  *uint64_t v6 = v5;
  uint64_t v7 = *v2;
  sub_10000A43C();
  *uint64_t v8 = v7;
  *(void *)(v5 + 480) = v1;
  swift_task_dealloc();
  if (!v1) {
    *(unsigned char *)(v5 + 509) = a1 & 1;
  }
  sub_10000F930();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_1000B00F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void (*a12)(uint64_t, uint64_t), uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_100016858();
  if (*(unsigned char *)(v18 + 509))
  {

    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000800C();
  }
  else
  {
    a10 = v18 + 232;
    a11 = v18 + 280;
    NSString v19 = String._bridgeToObjectiveC()();
    (id)AMSError();

    swift_willThrow();
    sub_1000B0C28();
    a12 = *(void (**)(uint64_t, uint64_t))(v18 + 424);
    uint64_t v20 = *(void *)(v18 + 400);
    a9 = *(void *)(v18 + 376);
    static Log.accountsDaemon.getter();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3D0;
    id v21 = (id)AMSSetLogKeyIfNeeded();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    static LogInterpolation.prefix<A>(_:_:)();
    swift_bridgeObjectRelease();
    sub_10000A578();
    swift_getErrorValue();
    *(void *)(v18 + 16_Block_object_dispose(&a9, 8) = *(void *)(v18 + 240);
    sub_1000042C4((uint64_t *)(v18 + 144));
    sub_10000A430();
    sub_100008000();
    v22();
    static LogInterpolation.safe(_:)();
    sub_100016B90(v18 + 144);
    Log.error(_:)();
    swift_bridgeObjectRelease();
    a12(v20, a9);
    swift_willThrow();

    swift_task_dealloc();
    swift_task_dealloc();
  }
  sub_100008504();
  return v24(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t sub_1000B0330(char a1)
{
  sub_1000082E0();
  uint64_t v5 = v4;
  sub_10000A43C();
  *uint64_t v6 = v5;
  uint64_t v7 = *v2;
  sub_10000A43C();
  *uint64_t v8 = v7;
  *(void *)(v5 + 496) = v1;
  swift_task_dealloc();
  if (!v1) {
    *(unsigned char *)(v5 + 50_Block_object_dispose(&a9, 8) = a1 & 1;
  }
  sub_10000F930();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_1000B0428()
{
  uint64_t v1 = v0[50];
  uint64_t v2 = v0[48];
  uint64_t v8 = v0[47];
  static Log.accountsDaemon.getter();
  sub_100011D80((uint64_t *)&unk_10012E440);
  uint64_t v3 = type metadata accessor for LogInterpolation();
  sub_1000082C8(v3);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3D0;
  id v4 = (id)AMSSetLogKeyIfNeeded();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  static LogInterpolation.prefix<A>(_:_:)();
  swift_bridgeObjectRelease();
  sub_10000A578();
  swift_getErrorValue();
  v0[17] = v0[33];
  sub_1000042C4(v0 + 14);
  sub_10000A430();
  sub_100008000();
  v5();
  static LogInterpolation.safe(_:)();
  sub_100016B90((uint64_t)(v0 + 14));
  Log.error(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v8);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1000B062C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_100016858();
  id v32 = (void (*)(uint64_t, uint64_t))v18[53];
  uint64_t v33 = v18[54];
  uint64_t v19 = v18[50];
  uint64_t v31 = v18[47];
  static Log.accountsDaemon.getter();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3D0;
  id v20 = (id)AMSSetLogKeyIfNeeded();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  static LogInterpolation.prefix<A>(_:_:)();
  swift_bridgeObjectRelease();
  LogInterpolation.init(stringLiteral:)();
  swift_getErrorValue();
  v18[13] = v18[27];
  sub_1000042C4(v18 + 10);
  sub_10000A430();
  sub_100008000();
  v21();
  static LogInterpolation.safe(_:)();
  sub_100016B90((uint64_t)(v18 + 10));
  Log.error(_:)();
  swift_bridgeObjectRelease();
  v32(v19, v31);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100008504();
  return v23(v22, v23, v24, v25, v26, v27, v28, v29, a9, v18 + 36, v18 + 26, v31, v32, v33, a15, a16, a17, a18);
}

uint64_t sub_1000B07F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_100016858();
  sub_1000B0C28();
  uint64_t v19 = v18[50];
  uint64_t v31 = v18[47];
  id v32 = (void (*)(uint64_t, uint64_t))v18[53];
  static Log.accountsDaemon.getter();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3D0;
  id v20 = (id)AMSSetLogKeyIfNeeded();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  static LogInterpolation.prefix<A>(_:_:)();
  swift_bridgeObjectRelease();
  sub_10000A578();
  swift_getErrorValue();
  v18[21] = v18[30];
  sub_1000042C4(v18 + 18);
  sub_10000A430();
  sub_100008000();
  v21();
  static LogInterpolation.safe(_:)();
  sub_100016B90((uint64_t)(v18 + 18));
  Log.error(_:)();
  swift_bridgeObjectRelease();
  v32(v19, v31);
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  sub_100008504();
  return v23(v22, v23, v24, v25, v26, v27, v28, v29, v18 + 35, v18 + 29, v31, v32, a13, a14, a15, a16, a17, a18);
}

id sub_1000B09B0()
{
  id v5 = 0;
  id v1 = [v0 isLassetAndReturnError:&v5];
  if (v1)
  {
    id v2 = v5;
  }
  else
  {
    id v3 = v5;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v1;
}

id sub_1000B0A68()
{
  return sub_1000B09B0();
}

uint64_t sub_1000B0A90()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000B0B30()
{
  sub_10000A430();
  (*(void (**)(void))(v1 + 8))();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_1000B0BA4()
{
  sub_1000B0B30();
  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for StateTracker()
{
  return sub_1000B0BE8();
}

uint64_t sub_1000B0BE8()
{
  return swift_getGenericMetadata();
}

ValueMetadata *type metadata accessor for DeviceAccountPrivacyUpdaterCore()
{
  return &type metadata for DeviceAccountPrivacyUpdaterCore;
}

uint64_t sub_1000B0C3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long a11)
{
  *(_OWORD *)(a1 + 16) = a11;
  return AMSSetLogKeyIfNeeded();
}

uint64_t sub_1000B0C5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_10000D5F4((_OWORD *)a1, v6);
    sub_1000B815C(v6, a2, a3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_10000EB44(a1, &qword_10012EFB0);
    sub_1000B7C20(v6, a2, a3);
    swift_bridgeObjectRelease();
    return sub_10000EB44((uint64_t)v6, &qword_10012EFB0);
  }
}

uint64_t sub_1000B0CF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    long long v5 = *(_OWORD *)(a1 + 16);
    v7[0] = *(_OWORD *)a1;
    v7[1] = v5;
    uint64_t v8 = *(void *)(a1 + 32);
    sub_1000B81A8(v7, a2, a3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_10000EB44(a1, &qword_10012E590);
    sub_1000B7D00(v7, a2, a3);
    swift_bridgeObjectRelease();
    return sub_10000EB44((uint64_t)v7, &qword_10012E590);
  }
}

uint64_t sub_1000B0D8C()
{
  uint64_t v1 = type metadata accessor for Mirror();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = (char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8[3] = type metadata accessor for AccountDataServerRequest.Put(0);
  long long v5 = sub_1000042C4(v8);
  sub_1000B1D48(v0, (uint64_t)v5);
  Mirror.init(reflecting:)();
  Mirror.children.getter();
  uint64_t v6 = sub_1000B11F8();
  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v6;
}

uint64_t sub_1000B0EA4()
{
  uint64_t v1 = type metadata accessor for Mirror();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = (char *)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7[3] = &unk_1001151C8;
  v7[0] = swift_allocObject();
  memcpy((void *)(v7[0] + 16), v0, 0xE8uLL);
  sub_1000758A8((uint64_t)v0);
  Mirror.init(reflecting:)();
  Mirror.children.getter();
  uint64_t v5 = sub_1000B11F8();
  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v5;
}

uint64_t sub_1000B0FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Mirror();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15[3] = &unk_100115518;
  uint64_t v12 = (void *)swift_allocObject();
  v15[0] = v12;
  _OWORD v12[2] = a1;
  void v12[3] = a2;
  void v12[4] = a3;
  void v12[5] = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Mirror.init(reflecting:)();
  Mirror.children.getter();
  uint64_t v13 = sub_1000B11F8();
  swift_release();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v13;
}

uint64_t sub_1000B1130()
{
  memcpy(__dst, v0, sizeof(__dst));
  return sub_1000B0EA4();
}

uint64_t sub_1000B116C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 248, 7);
}

uint64_t sub_1000B11EC()
{
  return sub_1000B0FDC(*v0, v0[1], v0[2], v0[3]);
}

uint64_t sub_1000B11F8()
{
  uint64_t v0 = (void *)Dictionary.init(dictionaryLiteral:)();
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  swift_retain();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (!v92)
  {
LABEL_56:
    swift_release_n();
    return (uint64_t)v0;
  }
  while (1)
  {
    uint64_t v2 = v89;
    uint64_t v1 = v90;
    v87[0] = v89;
    v87[1] = v90;
    sub_10000D5F4(&v91, v88);
    *(void *)&long long v84 = v2;
    *((void *)&v84 + 1) = v1;
    sub_1000115F4((uint64_t)v88, (uint64_t)&v85);
    if (!v1)
    {
      sub_10000EB44((uint64_t)v87, &qword_10012FA60);
      sub_10000D47C((uint64_t)&v85);
      goto LABEL_41;
    }
    swift_bridgeObjectRetain_n();
    sub_10000D47C((uint64_t)&v85);
    *(void *)&long long v84 = v2;
    *((void *)&v84 + 1) = v1;
    sub_1000115F4((uint64_t)v88, (uint64_t)&v85);
    if (swift_dynamicCast()) {
      break;
    }
    uint64_t v80 = 0;
    long long v78 = 0u;
    long long v79 = 0u;
    sub_10000EB44((uint64_t)&v78, &qword_10012E590);
    *(void *)&long long v84 = v2;
    *((void *)&v84 + 1) = v1;
    sub_1000115F4((uint64_t)v88, (uint64_t)&v85);
    sub_100011D80(&qword_10012FA68);
    if (swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      sub_1000B1CEC(&qword_10012FAA8, &qword_10012FA68);
      AnyHashable.init<A>(_:)();
      long long v81 = v84;
      long long v82 = v85;
      uint64_t v83 = v86;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v78 = v0;
      unint64_t v14 = sub_10001169C(v2, v1);
      uint64_t v16 = v0[2];
      BOOL v17 = (v15 & 1) == 0;
      Swift::Int v18 = v16 + v17;
      if (__OFADD__(v16, v17)) {
        goto LABEL_58;
      }
      unint64_t v19 = v14;
      char v20 = v15;
      sub_100011D80(&qword_10012FAA0);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v18))
      {
        unint64_t v21 = sub_10001169C(v2, v1);
        if ((v20 & 1) != (v22 & 1)) {
          goto LABEL_64;
        }
        unint64_t v19 = v21;
      }
      uint64_t v0 = (void *)v78;
      if (v20) {
        goto LABEL_17;
      }
      *(void *)(v78 + 8 * (v19 >> 6) + 64) |= 1 << v19;
      uint64_t v51 = (uint64_t *)(v0[6] + 16 * v19);
      *uint64_t v51 = v2;
      v51[1] = v1;
      uint64_t v52 = v0[7] + 40 * v19;
      long long v53 = v81;
      long long v54 = v82;
      *(void *)(v52 + 32) = v83;
      *(_OWORD *)uint64_t v52 = v53;
      *(_OWORD *)(v52 + 16) = v54;
      uint64_t v55 = v0[2];
      BOOL v40 = __OFADD__(v55, 1);
      uint64_t v56 = v55 + 1;
      if (v40) {
        goto LABEL_61;
      }
LABEL_38:
      v0[2] = v56;
      swift_bridgeObjectRetain();
      goto LABEL_39;
    }
    *(void *)&long long v84 = v2;
    *((void *)&v84 + 1) = v1;
    sub_1000115F4((uint64_t)v88, (uint64_t)&v85);
    sub_100011D80(&qword_10012FA70);
    if (!swift_dynamicCast())
    {
      uint64_t v80 = 0;
      long long v78 = 0u;
      long long v79 = 0u;
      sub_10000EB44((uint64_t)&v78, &qword_10012FA78);
      *(void *)&long long v84 = v2;
      *((void *)&v84 + 1) = v1;
      sub_1000115F4((uint64_t)v88, (uint64_t)&v85);
      swift_bridgeObjectRelease();
      sub_100011D80(&qword_10012FA80);
      if ((swift_dynamicCast() & 1) == 0)
      {
        swift_bridgeObjectRelease();
        sub_10000EB44((uint64_t)v87, &qword_10012FA60);
        goto LABEL_41;
      }
      uint64_t v42 = v81;
      int64_t v43 = *(void *)(v81 + 16);
      if (v43)
      {
        *(void *)&long long v81 = _swiftEmptyArrayStorage;
        sub_1000B57EC(0, v43, 0);
        uint64_t v44 = v42 + 32;
        uint64_t v45 = (void *)v81;
        do
        {
          sub_1000B1B94(v44, (uint64_t)&v84);
          uint64_t v46 = *((void *)&v85 + 1);
          uint64_t v47 = v86;
          sub_1000087B0(&v84, *((uint64_t *)&v85 + 1));
          uint64_t v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 8))(v46, v47);
          sub_10000D47C((uint64_t)&v84);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1000B57EC(0, v45[2] + 1, 1);
            uint64_t v45 = (void *)v81;
          }
          unint64_t v50 = v45[2];
          unint64_t v49 = v45[3];
          if (v50 >= v49 >> 1)
          {
            sub_1000B57EC((char *)(v49 > 1), v50 + 1, 1);
            uint64_t v45 = (void *)v81;
          }
          v45[2] = v50 + 1;
          v45[v50 + 4] = v48;
          v44 += 40;
          --v43;
        }
        while (v43);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v45 = _swiftEmptyArrayStorage;
      }
      *(void *)&long long v81 = v45;
      sub_100011D80(&qword_10012FA88);
      sub_1000B1BF8();
      AnyHashable.init<A>(_:)();
      long long v81 = v84;
      long long v82 = v85;
      uint64_t v83 = v86;
      char v63 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v78 = v0;
      unint64_t v64 = sub_10001169C(v2, v1);
      uint64_t v66 = v0[2];
      BOOL v67 = (v65 & 1) == 0;
      Swift::Int v68 = v66 + v67;
      if (__OFADD__(v66, v67)) {
        goto LABEL_62;
      }
      unint64_t v19 = v64;
      char v69 = v65;
      sub_100011D80(&qword_10012FAA0);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v63, v68))
      {
        unint64_t v70 = sub_10001169C(v2, v1);
        if ((v69 & 1) != (v71 & 1)) {
          goto LABEL_64;
        }
        unint64_t v19 = v70;
      }
      uint64_t v0 = (void *)v78;
      if ((v69 & 1) == 0)
      {
        *(void *)(v78 + 8 * (v19 >> 6) + 64) |= 1 << v19;
        uint64_t v72 = (uint64_t *)(v0[6] + 16 * v19);
        *uint64_t v72 = v2;
        v72[1] = v1;
        uint64_t v73 = v0[7] + 40 * v19;
        long long v74 = v81;
        long long v75 = v82;
        *(void *)(v73 + 32) = v83;
        *(_OWORD *)uint64_t v73 = v74;
        *(_OWORD *)(v73 + 16) = v75;
        uint64_t v76 = v0[2];
        BOOL v40 = __OFADD__(v76, 1);
        uint64_t v56 = v76 + 1;
        if (v40)
        {
          __break(1u);
          goto LABEL_56;
        }
        goto LABEL_38;
      }
LABEL_17:
      sub_1000B1C90((uint64_t)&v81, v0[7] + 40 * v19);
LABEL_39:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_40:
      sub_10000EB44((uint64_t)v87, &qword_10012FA60);
      goto LABEL_41;
    }
    swift_bridgeObjectRelease();
    sub_100007468(&v78, (uint64_t)&v81);
    uint64_t v23 = *((void *)&v82 + 1);
    uint64_t v24 = v83;
    sub_1000087B0(&v81, *((uint64_t *)&v82 + 1));
    *(void *)&long long v78 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
    sub_100011D80(&qword_10012EE80);
    sub_1000B1CEC(&qword_10012FA98, &qword_10012EE80);
    AnyHashable.init<A>(_:)();
    long long v78 = v84;
    long long v79 = v85;
    uint64_t v80 = v86;
    char v25 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v26 = sub_10001169C(v2, v1);
    uint64_t v28 = v0[2];
    BOOL v29 = (v27 & 1) == 0;
    Swift::Int v30 = v28 + v29;
    if (__OFADD__(v28, v29)) {
      goto LABEL_60;
    }
    unint64_t v31 = v26;
    char v32 = v27;
    sub_100011D80(&qword_10012FAA0);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v25, v30))
    {
      unint64_t v33 = sub_10001169C(v2, v1);
      if ((v32 & 1) != (v34 & 1)) {
        goto LABEL_64;
      }
      unint64_t v31 = v33;
    }
    if (v32)
    {
      sub_1000B1C90((uint64_t)&v78, v0[7] + 40 * v31);
    }
    else
    {
      v0[(v31 >> 6) + 8] |= 1 << v31;
      uint64_t v57 = (uint64_t *)(v0[6] + 16 * v31);
      uint64_t *v57 = v2;
      v57[1] = v1;
      uint64_t v58 = v0[7] + 40 * v31;
      long long v59 = v78;
      long long v60 = v79;
      *(void *)(v58 + 32) = v80;
      *(_OWORD *)uint64_t v58 = v59;
      *(_OWORD *)(v58 + 16) = v60;
      uint64_t v61 = v0[2];
      BOOL v40 = __OFADD__(v61, 1);
      uint64_t v62 = v61 + 1;
      if (v40) {
        goto LABEL_63;
      }
      v0[2] = v62;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000EB44((uint64_t)v87, &qword_10012FA60);
    sub_10000D47C((uint64_t)&v81);
LABEL_41:
    dispatch thunk of _AnyIteratorBoxBase.next()();
    if (!v92) {
      goto LABEL_56;
    }
  }
  swift_bridgeObjectRelease();
  long long v81 = v78;
  long long v82 = v79;
  uint64_t v83 = v80;
  sub_10000E170((uint64_t)&v81, (uint64_t)&v84);
  char v3 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v78 = v0;
  unint64_t v4 = sub_10001169C(v2, v1);
  uint64_t v6 = v0[2];
  BOOL v7 = (v5 & 1) == 0;
  Swift::Int v8 = v6 + v7;
  if (!__OFADD__(v6, v7))
  {
    unint64_t v9 = v4;
    char v10 = v5;
    sub_100011D80(&qword_10012FAA0);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v3, v8))
    {
      unint64_t v11 = sub_10001169C(v2, v1);
      if ((v10 & 1) != (v12 & 1)) {
        goto LABEL_64;
      }
      unint64_t v9 = v11;
    }
    uint64_t v0 = (void *)v78;
    if (v10)
    {
      sub_1000B1C90((uint64_t)&v84, *(void *)(v78 + 56) + 40 * v9);
    }
    else
    {
      *(void *)(v78 + 8 * (v9 >> 6) + 64) |= 1 << v9;
      uint64_t v35 = (uint64_t *)(v0[6] + 16 * v9);
      *uint64_t v35 = v2;
      v35[1] = v1;
      uint64_t v36 = v0[7] + 40 * v9;
      long long v37 = v84;
      long long v38 = v85;
      *(void *)(v36 + 32) = v86;
      *(_OWORD *)uint64_t v36 = v37;
      *(_OWORD *)(v36 + 16) = v38;
      uint64_t v39 = v0[2];
      BOOL v40 = __OFADD__(v39, 1);
      uint64_t v41 = v39 + 1;
      if (v40) {
        goto LABEL_59;
      }
      v0[2] = v41;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000DA8C((uint64_t)&v81);
    goto LABEL_40;
  }
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000B1B94(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_1000B1BF8()
{
  unint64_t result = qword_10012FA90;
  if (!qword_10012FA90)
  {
    sub_10007FBF4(&qword_10012FA88);
    sub_1000B1CEC(&qword_10012FA98, &qword_10012EE80);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012FA90);
  }
  return result;
}

uint64_t sub_1000B1C90(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000B1CEC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10007FBF4(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000B1D48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccountDataServerRequest.Put(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B1DAC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t *sub_1000B1DEC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1000B1F70(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result <= 2)
  {
    uint64_t v3 = type metadata accessor for URL();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

uint64_t sub_1000B1FEC(uint64_t a1, uint64_t a2)
{
  swift_getEnumCaseMultiPayload();
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_1000B207C(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_1000B211C(a1);
    swift_getEnumCaseMultiPayload();
    uint64_t v4 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1000B211C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FileStoreError();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for FileStoreError()
{
  uint64_t result = qword_10012FB20;
  if (!qword_10012FB20) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000B21C0(uint64_t a1, uint64_t a2)
{
  swift_getEnumCaseMultiPayload();
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_1000B2250(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_1000B211C(a1);
    swift_getEnumCaseMultiPayload();
    uint64_t v4 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1000B22F0()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void sub_1000B237C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_1000B2CD4(a1, a2, a3);
  if (!v7) {
    goto LABEL_59;
  }
  uint64_t v8 = v7;
  uint64_t v9 = HIBYTE(v7) & 0xF;
  uint64_t v10 = v6 & 0xFFFFFFFFFFFFLL;
  if ((v8 & 0x2000000000000000) != 0) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = v6 & 0xFFFFFFFFFFFFLL;
  }
  if (!v11)
  {
    swift_bridgeObjectRelease();
    goto LABEL_59;
  }
  if ((v8 & 0x1000000000000000) != 0)
  {
    sub_1000B2F40(v6, v8, 10);
    char v4 = v41;
    goto LABEL_49;
  }
  if ((v8 & 0x2000000000000000) == 0)
  {
    if ((v6 & 0x1000000000000000) != 0) {
      char v12 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      char v12 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    sub_1000B3028(v12, v10, 10);
    char v4 = v13 & 1;
LABEL_49:
    swift_bridgeObjectRelease();
    if ((v4 & 1) == 0)
    {
      Date.addingTimeInterval(_:)();
      uint64_t v37 = 0;
LABEL_60:
      uint64_t v40 = type metadata accessor for Date();
      sub_1000101E8(a4, v37, 1, v40);
      return;
    }
LABEL_59:
    uint64_t v37 = 1;
    goto LABEL_60;
  }
  if (v6 == 43)
  {
    if (!v9) {
      goto LABEL_64;
    }
    if (v9 == 1) {
      goto LABEL_34;
    }
    sub_100010DB8();
    if (!v18 && v17) {
      goto LABEL_34;
    }
    unsigned int v22 = v21;
    if (v20 != 2)
    {
      sub_100010DB8();
      if (!v18 && v17) {
        goto LABEL_34;
      }
      unint64_t v25 = 10 * v22 + v24;
      if (v23 != 3)
      {
        while (1)
        {
          sub_10000F864();
          if (!v18 && v17) {
            goto LABEL_34;
          }
          if (!is_mul_ok(v25, v26)) {
            goto LABEL_34;
          }
          BOOL v17 = __CFADD__(10 * v25, v27);
          unint64_t v25 = 10 * v25 + v27;
          if (v17) {
            goto LABEL_34;
          }
          sub_10000A598();
          if (v18) {
            goto LABEL_49;
          }
        }
      }
    }
LABEL_48:
    char v4 = 0;
    goto LABEL_49;
  }
  if (v6 != 45)
  {
    if (!v9 || (v6 - 48) > 9u) {
      goto LABEL_34;
    }
    unsigned int v28 = (v6 - 48);
    if (v9 != 1)
    {
      sub_100010DB8();
      if (!v18 && v17) {
        goto LABEL_34;
      }
      unint64_t v31 = 10 * v28 + v30;
      if (v29 != 2)
      {
        while (1)
        {
          sub_10000F864();
          if (!v18 && v17) {
            goto LABEL_34;
          }
          if (!is_mul_ok(v31, v32)) {
            goto LABEL_34;
          }
          BOOL v17 = __CFADD__(10 * v31, v33);
          unint64_t v31 = 10 * v31 + v33;
          if (v17) {
            goto LABEL_34;
          }
          sub_10000A598();
          if (v18) {
            goto LABEL_49;
          }
        }
      }
    }
    goto LABEL_48;
  }
  if (v9)
  {
    if (v9 != 1)
    {
      sub_100010DB8();
      if (v18 || !v17)
      {
        BOOL v17 = v16 == 0;
        unint64_t v19 = -(uint64_t)v16;
        if (v17)
        {
          if (v15 == 2)
          {
            char v4 = 0;
            goto LABEL_49;
          }
          unsigned __int8 v34 = v14 - 48;
          if ((v14 - 48) <= 9u && is_mul_ok(v19, 0xAuLL))
          {
            unint64_t v35 = 10 * v19;
            unint64_t v36 = v35 - v34;
            if (v35 >= v34)
            {
              if (v15 == 3) {
                goto LABEL_48;
              }
              while (1)
              {
                sub_10000F864();
                if (!v18 && v17) {
                  break;
                }
                if (!is_mul_ok(v36, v38)) {
                  break;
                }
                BOOL v17 = 10 * v36 >= v39;
                unint64_t v36 = 10 * v36 - v39;
                if (!v17) {
                  break;
                }
                sub_10000A598();
                if (v18) {
                  goto LABEL_49;
                }
              }
            }
          }
        }
      }
    }
LABEL_34:
    char v4 = 1;
    goto LABEL_49;
  }
  __break(1u);
LABEL_64:
  __break(1u);
}

void sub_1000B2650(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v59 = type metadata accessor for Date();
  sub_10000BFC4();
  uint64_t v53 = v6;
  __chkstk_darwin(v7);
  sub_10000D2F0();
  uint64_t v52 = v8;
  uint64_t v9 = sub_100011D80(&qword_10012E458);
  __chkstk_darwin(v9 - 8);
  sub_10000D2F0();
  uint64_t v58 = v10;
  uint64_t v56 = type metadata accessor for Calendar.Identifier();
  sub_10000BFC4();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  sub_100008338();
  uint64_t v16 = v15 - v14;
  type metadata accessor for Calendar();
  sub_10000BFC4();
  uint64_t v54 = v18;
  uint64_t v55 = v17;
  __chkstk_darwin(v17);
  sub_100008338();
  uint64_t v21 = v20 - v19;
  uint64_t v22 = sub_100011D80(&qword_10012FB58);
  __chkstk_darwin(v22 - 8);
  sub_100008338();
  uint64_t v25 = v24 - v23;
  uint64_t v26 = type metadata accessor for Locale();
  sub_10000BFC4();
  uint64_t v28 = v27;
  __chkstk_darwin(v29);
  sub_100008338();
  uint64_t v32 = v31 - v30;
  sub_1000B2CD4(a1, a2, a3);
  uint64_t v57 = v33;
  uint64_t v61 = v34;
  if (v34)
  {
    uint64_t v50 = a1;
    uint64_t v51 = a2;
    id v35 = [objc_allocWithZone((Class)NSDateFormatter) init];
    Locale.init(identifier:)();
    Class isa = Locale._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v32, v26);
    [v35 setLocale:isa];

    TimeZone.init(secondsFromGMT:)();
    uint64_t v37 = type metadata accessor for TimeZone();
    Class v38 = 0;
    if (sub_10001044C(v25, 1, v37) != 1)
    {
      Class v38 = TimeZone._bridgeToObjectiveC()().super.isa;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v37 - 8) + 8))(v25, v37);
    }
    objc_msgSend(v35, "setTimeZone:", v38, a4);

    sub_1000B37A0(0xD00000000000001BLL, 0x80000001001030C0, v35);
    (*(void (**)(uint64_t, void, uint64_t))(v12 + 104))(v16, enum case for Calendar.Identifier.gregorian(_:), v56);
    Calendar.init(identifier:)();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v16, v56);
    Class v39 = Calendar._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v21, v55);
    [v35 setCalendar:v39];

    NSString v40 = String._bridgeToObjectiveC()();
    id v41 = [v35 dateFromString:v40];

    if (v41)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 32);
      uint64_t v43 = v58;
      v42(v58, v52, v59);
      sub_1000101E8(v58, 0, 1, v59);
      uint64_t v45 = v50;
      uint64_t v44 = v51;
      if (sub_10001044C(v58, 1, v59) != 1)
      {
        swift_bridgeObjectRelease();

        v42(v49, v58, v59);
        return;
      }
    }
    else
    {
      uint64_t v43 = v58;
      sub_1000101E8(v58, 1, 1, v59);
      uint64_t v45 = v50;
      uint64_t v44 = v51;
    }
    sub_1000B3804(v43);
    sub_1000B2EF4();
    swift_allocError();
    *(void *)uint64_t v47 = v45;
    *(void *)(v47 + _Block_object_dispose(&a9, 8) = v44;
    *(void *)(v47 + 16) = v57;
    *(void *)(v47 + 24) = v61;
    *(unsigned char *)(v47 + 32) = 1;
    swift_bridgeObjectRetain();
    swift_willThrow();
  }
  else
  {
    sub_1000B2EF4();
    swift_allocError();
    *(void *)uint64_t v46 = a1;
    *(void *)(v46 + _Block_object_dispose(&a9, 8) = a2;
    *(void *)(v46 + 16) = 0;
    *(void *)(v46 + 24) = 0;
    *(unsigned char *)(v46 + 32) = 0;
    swift_bridgeObjectRetain();
    swift_willThrow();
  }
}

uint64_t sub_1000B2B88(long long *a1, long long *a2)
{
  sub_1000B3AEC(a1, (uint64_t)v20);
  uint64_t v3 = v20[0];
  uint64_t v4 = v20[1];
  if ((v21 & 1) == 0)
  {
    sub_1000B3AEC(a2, (uint64_t)&v15);
    if ((v19 & 1) == 0)
    {
      if (v3 != v15 || v4 != v16) {
        goto LABEL_19;
      }
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  uint64_t v5 = v20[2];
  uint64_t v6 = v20[3];
  sub_1000B3AEC(a2, (uint64_t)&v15);
  if (v19 != 1)
  {
LABEL_14:
    char v11 = 0;
    return v11 & 1;
  }
  uint64_t v7 = v17;
  uint64_t v8 = v18;
  BOOL v9 = v3 == v15 && v4 == v16;
  if (v9 || (char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), v11 = 0, (v10 & 1) != 0))
  {
    if (v5 != v7 || v6 != v8)
    {
LABEL_19:
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      return v11 & 1;
    }
LABEL_20:
    char v11 = 1;
  }
  return v11 & 1;
}

uint64_t sub_1000B2C88(long long *a1, long long *a2)
{
  sub_1000B3AEC(a1, (uint64_t)v4);
  sub_1000B3AEC(a2, (uint64_t)v5);
  return sub_1000B2B88(v4, v5) & 1;
}

void sub_1000B2CD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = a3 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a3 + 64);
  int64_t v24 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v8 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v11)) + (v7 << 6))
  {
    uint64_t v20 = (uint64_t *)(*(void *)(a3 + 48) + 16 * i);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    sub_10008BBEC();
    swift_bridgeObjectRetain();
    if (!StringProtocol.caseInsensitiveCompare<A>(_:)())
    {
      sub_1000B3B68(v22, v21, a3);
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v10 >= v24) {
      goto LABEL_32;
    }
    unint64_t v11 = *(void *)(v23 + 8 * v10);
    ++v7;
    if (!v11)
    {
      int64_t v7 = v10 + 1;
      sub_10000FAD4();
      if (v12 == v13) {
        goto LABEL_32;
      }
      sub_10000D43C();
      if (!v11)
      {
        int64_t v7 = v14 + 2;
        sub_10000FAD4();
        if (v12 == v13) {
          goto LABEL_32;
        }
        sub_10000D43C();
        if (!v11)
        {
          int64_t v7 = v15 + 3;
          sub_10000FAD4();
          if (v12 == v13) {
            goto LABEL_32;
          }
          sub_10000D43C();
          if (!v11)
          {
            int64_t v7 = v16 + 4;
            sub_10000FAD4();
            if (v12 == v13) {
              goto LABEL_32;
            }
            sub_10000D43C();
            if (!v11) {
              break;
            }
          }
        }
      }
    }
LABEL_27:
    unint64_t v6 = (v11 - 1) & v11;
  }
  int64_t v18 = v17 + 5;
  if (v18 >= v24)
  {
LABEL_32:
    swift_release();
    return;
  }
  unint64_t v11 = *(void *)(v23 + 8 * v18);
  if (v11)
  {
    int64_t v7 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v7 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    sub_10000FAD4();
    if (v12 == v13) {
      goto LABEL_32;
    }
    sub_10000D43C();
    int64_t v18 = v19 + 1;
    if (v11) {
      goto LABEL_27;
    }
  }
LABEL_34:
  __break(1u);
}

unint64_t sub_1000B2EF4()
{
  unint64_t result = qword_10012FB60;
  if (!qword_10012FB60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10012FB60);
  }
  return result;
}

unsigned __int8 *sub_1000B2F40(uint64_t a1, uint64_t a2, int64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    int64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_1000B32A4();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    int64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    int64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  unint64_t v11 = sub_1000B3028(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *sub_1000B3028(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v17 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v18 = a3 + 48;
        unsigned __int8 v19 = a3 + 55;
        unsigned __int8 v20 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = 58;
        }
        else
        {
          unsigned __int8 v20 = 97;
          unsigned __int8 v19 = 65;
        }
        if (result)
        {
          unint64_t v9 = 0;
          uint64_t v21 = result + 1;
          do
          {
            unsigned int v22 = *v21;
            if (v22 < 0x30 || v22 >= v18)
            {
              if (v22 < 0x41 || v22 >= v19)
              {
                uint64_t v13 = 0;
                if (v22 < 0x61 || v22 >= v20) {
                  return (unsigned __int8 *)v13;
                }
                char v23 = -87;
              }
              else
              {
                char v23 = -55;
              }
            }
            else
            {
              char v23 = -48;
            }
            if (!is_mul_ok(v9, a3)) {
              return 0;
            }
            unint64_t v24 = v9 * a3;
            unsigned __int8 v25 = v22 + v23;
            BOOL v16 = __CFADD__(v24, v25);
            unint64_t v9 = v24 + v25;
            if (v16) {
              return 0;
            }
            ++v21;
            --v17;
          }
          while (v17);
          return (unsigned __int8 *)v9;
        }
        return 0;
      }
      return 0;
    }
  }
  else
  {
    if (v4 != 45)
    {
      if (a2)
      {
        unsigned __int8 v26 = a3 + 48;
        unsigned __int8 v27 = a3 + 55;
        unsigned __int8 v28 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = 58;
        }
        else
        {
          unsigned __int8 v28 = 97;
          unsigned __int8 v27 = 65;
        }
        if (result)
        {
          unint64_t v29 = 0;
          do
          {
            unsigned int v30 = *result;
            if (v30 < 0x30 || v30 >= v26)
            {
              if (v30 < 0x41 || v30 >= v27)
              {
                uint64_t v13 = 0;
                if (v30 < 0x61 || v30 >= v28) {
                  return (unsigned __int8 *)v13;
                }
                char v31 = -87;
              }
              else
              {
                char v31 = -55;
              }
            }
            else
            {
              char v31 = -48;
            }
            if (!is_mul_ok(v29, a3)) {
              return 0;
            }
            unint64_t v32 = v29 * a3;
            unsigned __int8 v33 = v30 + v31;
            BOOL v16 = __CFADD__(v32, v33);
            unint64_t v29 = v32 + v33;
            if (v16) {
              return 0;
            }
            ++result;
            --v3;
          }
          while (v3);
          return (unsigned __int8 *)v29;
        }
        return 0;
      }
      return 0;
    }
    if (a2 >= 1)
    {
      uint64_t v5 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v6 = a3 + 48;
        unsigned __int8 v7 = a3 + 55;
        unsigned __int8 v8 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = 58;
        }
        else
        {
          unsigned __int8 v8 = 97;
          unsigned __int8 v7 = 65;
        }
        if (result)
        {
          unint64_t v9 = 0;
          for (unint64_t i = result + 1; ; ++i)
          {
            unsigned int v11 = *i;
            if (v11 < 0x30 || v11 >= v6)
            {
              if (v11 < 0x41 || v11 >= v7)
              {
                uint64_t v13 = 0;
                if (v11 < 0x61 || v11 >= v8) {
                  return (unsigned __int8 *)v13;
                }
                char v12 = -87;
              }
              else
              {
                char v12 = -55;
              }
            }
            else
            {
              char v12 = -48;
            }
            if (!is_mul_ok(v9, a3)) {
              return 0;
            }
            unint64_t v14 = v9 * a3;
            unsigned __int8 v15 = v11 + v12;
            BOOL v16 = v14 >= v15;
            unint64_t v9 = v14 - v15;
            if (!v16) {
              return 0;
            }
            if (!--v5) {
              return (unsigned __int8 *)v9;
            }
          }
        }
        return 0;
      }
      return 0;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000B32A4()
{
  unint64_t v0 = sub_1000B3310();
  uint64_t v4 = sub_1000B3344(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1000B3310()
{
  return String.subscript.getter();
}

uint64_t sub_1000B3344(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_1000B349C(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          unsigned int v11 = sub_1000B7978(v9, 0),
          unint64_t v12 = sub_1000B359C((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          v12 == v10))
    {
      uint64_t v13 = static String._uncheckedFromUTF8(_:)();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return static String._uncheckedFromUTF8(_:)();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  _StringObject.sharedUTF8.getter();
LABEL_4:
  return static String._uncheckedFromUTF8(_:)();
}

uint64_t sub_1000B349C(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v_Block_object_dispose(&a9, 8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    a1 = sub_10008DD80(a1, a3, a4);
    unint64_t v7 = a1;
  }
  if ((v6 & 0xC) == v9)
  {
    a1 = sub_10008DD80(v6, v5, v4);
    unint64_t v6 = a1;
    if ((v4 & 0x1000000000000000) == 0) {
      return (v6 >> 16) - (v7 >> 16);
    }
  }
  else if ((v4 & 0x1000000000000000) == 0)
  {
    return (v6 >> 16) - (v7 >> 16);
  }
  unint64_t v11 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    unint64_t v11 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v11 >= v6 >> 16)
  {
    a1 = v7;
    a2 = v6;
    a3 = v5;
    a4 = v4;
    return String.UTF8View._foreignDistance(from:to:)(a1, a2, a3, a4);
  }
  __break(1u);
  return String.UTF8View._foreignDistance(from:to:)(a1, a2, a3, a4);
}

unint64_t sub_1000B359C(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_35;
  }
  if (a3 < 0) {
    goto LABEL_38;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_35:
    *uint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    void v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t result = v12;
    if ((v12 & 0xC) == v15) {
      unint64_t result = sub_10008DD80(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
      }
      else
      {
        unint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          unint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
      }
    }
    if ((v12 & 0xC) == v15)
    {
      unint64_t result = sub_10008DD80(v12, a6, a7);
      unint64_t v12 = result;
      if ((a7 & 0x1000000000000000) == 0)
      {
LABEL_27:
        unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_31;
      }
    }
    else if ((a7 & 0x1000000000000000) == 0)
    {
      goto LABEL_27;
    }
    if (v23 <= v12 >> 16) {
      goto LABEL_37;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_31:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_35;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_35;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

void sub_1000B37A0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a3 setDateFormat:v4];
}

uint64_t sub_1000B3804(uint64_t a1)
{
  uint64_t v2 = sub_100011D80(&qword_10012E458);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000B3864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = vars8;
  }
  return swift_bridgeObjectRetain();
}

uint64_t destroy for HTTPHelpers.Errors(uint64_t a1)
{
  return sub_1000B38B8(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t sub_1000B38B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result = swift_bridgeObjectRelease();
  if (a5)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for HTTPHelpers.Errors(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_1000B3864(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for HTTPHelpers.Errors(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_1000B3864(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  char v12 = *(unsigned char *)(a1 + 32);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(&a9, 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  sub_1000B38B8(v8, v9, v10, v11, v12);
  return a1;
}

__n128 initializeWithTake for HTTPHelpers.Errors(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for HTTPHelpers.Errors(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 32);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 32) = v3;
  sub_1000B38B8(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for HTTPHelpers.Errors(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 33))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HTTPHelpers.Errors(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + _Block_object_dispose(&a9, 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1000B3AC8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_1000B3AD0(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for HTTPHelpers.Errors()
{
  return &type metadata for HTTPHelpers.Errors;
}

uint64_t sub_1000B3AEC(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(unsigned char *)(a2 + 32) = *((unsigned char *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

double sub_1000B3B04@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = sub_10001169C(a1, a2), (v7 & 1) != 0))
  {
    uint64_t v8 = *(void *)(a3 + 56) + 32 * v6;
    sub_1000115F4(v8, (uint64_t)a4);
  }
  else
  {
    double result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

uint64_t sub_1000B3B68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  unint64_t v4 = sub_10001169C(a1, a2);
  if ((v5 & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(void *)(*(void *)(a3 + 56) + 16 * v4);
  swift_bridgeObjectRetain();
  return v6;
}

uint64_t sub_1000B3BC0(uint64_t a1, void *a2)
{
  URL.relativePath.getter();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [a2 contentsAtPath:v3];

  if (v4)
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

    return v5;
  }
  else
  {
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    unsigned int v8 = [a2 fileExistsAtPath:v7];

    if (v8)
    {
      if (static DeviceDetails.deviceUnlockedSinceBoot()() == 2)
      {
        type metadata accessor for FileStoreError();
        sub_1000090D0(&qword_10012E450, (void (*)(uint64_t))type metadata accessor for FileStoreError);
        sub_10000FAE0();
      }
      else
      {
        type metadata accessor for FileStoreError();
        sub_1000090D0(&qword_10012E450, (void (*)(uint64_t))type metadata accessor for FileStoreError);
        swift_allocError();
      }
      type metadata accessor for URL();
      sub_100010DC8();
      sub_10000F874();
      v9();
    }
    else
    {
      type metadata accessor for FileStoreError();
      sub_1000090D0(&qword_10012E450, (void (*)(uint64_t))type metadata accessor for FileStoreError);
      sub_10000FAE0();
      type metadata accessor for URL();
      sub_100010DC8();
      sub_10000F874();
      v10();
    }
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
}

uint64_t sub_1000B3E60(uint64_t a1, char a2, void *a3)
{
  type metadata accessor for URLResourceValues();
  sub_10000BFC4();
  v51[2] = v7;
  v51[3] = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = type metadata accessor for URL();
  sub_10000BFC4();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.relativePath.getter();
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)&long long v54 = 0;
  unsigned int v15 = [a3 createDirectoryAtPath:v14 withIntermediateDirectories:a2 & 1 attributes:0 error:&v54];

  uint64_t v16 = (void *)v54;
  if (v15)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v8);
    id v17 = v16;
    URLResourceValues.init()();
    URLResourceValues.isExcludedFromBackup.setter();
    uint64_t v18 = v51[1];
    URL.setResourceValues(_:)();
    if (!v18)
    {
      uint64_t v38 = sub_10000D448();
      v39(v38);
      uint64_t v40 = sub_10000A5A8();
      return v41(v40);
    }
    uint64_t v19 = sub_10000D448();
    v20(v19);
    uint64_t v21 = sub_10000A5A8();
    v22(v21);
    uint64_t v23 = v18;
  }
  else
  {
    id v24 = (id)v54;
    uint64_t v23 = _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  uint64_t v53 = v23;
  swift_errorRetain();
  sub_100011D80(&qword_10012E438);
  sub_10001065C(0, &qword_10012FB68);
  if (!swift_dynamicCast()) {
    return swift_errorRelease();
  }
  swift_errorRelease();
  id v25 = v52;
  id v26 = [v52 userInfo];
  uint64_t v27 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000B3B04(v28, v29, v27, &v54);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v55)
  {
    if (swift_dynamicCast())
    {
      unsigned int v30 = (void *)v51[4];
      id v31 = [v25 domain];
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v34 = v33;

      if (v32 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v34 == v35)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v37 = sub_1000084B8();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v37 & 1) == 0) {
          goto LABEL_23;
        }
      }
      if ([v25 code] == (id)516)
      {
        id v43 = [v30 domain];
        uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v46 = v45;

        if (v44 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v46 == v47)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v49 = sub_1000084B8();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v49 & 1) == 0) {
            goto LABEL_23;
          }
        }
        id v50 = [v30 code];

        if (v50 == (id)17)
        {

          return swift_errorRelease();
        }
        goto LABEL_24;
      }
LABEL_23:
    }
  }
  else
  {
    sub_100016B90((uint64_t)&v54);
  }
LABEL_24:
  swift_willThrow();
  return swift_errorRelease();
}

unint64_t sub_1000B42B4(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return sub_1000B4348(a1, v2);
}

unint64_t sub_1000B4348(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t sub_1000B44C0()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t getEnumTagSinglePayload for LiveFileStore(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 8))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LiveFileStore(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + _Block_object_dispose(&a9, 8) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)double result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + _Block_object_dispose(&a9, 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LiveFileStore()
{
  return &type metadata for LiveFileStore;
}

void *sub_1000B45D4(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    id v25 = _swiftEmptyArrayStorage;
    sub_1000B58AC(0, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = type metadata accessor for AMPAccount();
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(v4 - 8);
    uint64_t v17 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v18 = v6;
    do
    {
      uint64_t v23 = v4;
      id v24 = &off_1001158D8;
      uint64_t v7 = sub_1000042C4(v22);
      sub_10008B15C(v17 + *(void *)(v18 + 72) * v5, (uint64_t)v7);
      id v25 = v2;
      unint64_t v9 = v2[2];
      unint64_t v8 = v2[3];
      if (v9 >= v8 >> 1)
      {
        sub_1000B58AC((char *)(v8 > 1), v9 + 1, 1);
        uint64_t v2 = v25;
      }
      ++v5;
      uint64_t v10 = sub_100015DA0((uint64_t)v22, v23);
      __chkstk_darwin(v10);
      uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v13 + 16))(v12);
      uint64_t v20 = v4;
      uint64_t v21 = &off_1001158D8;
      uint64_t v14 = sub_1000042C4((uint64_t *)&v19);
      sub_100015CEC((uint64_t)v12, (uint64_t)v14);
      v2[2] = v9 + 1;
      sub_100007468(&v19, (uint64_t)&v2[5 * v9 + 4]);
      sub_10000D47C((uint64_t)v22);
    }
    while (v1 != v5);
  }
  return v2;
}

uint64_t sub_1000B47DC()
{
  swift_unknownObjectRelease();

  return v0;
}

uint64_t sub_1000B4804()
{
  sub_1000B47DC();
  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for MetricsCommon()
{
  return self;
}

uint64_t type metadata accessor for MetricsOnInternalBuilds()
{
  return self;
}

void sub_1000B4880(uint64_t *a1)
{
  sub_10000CE40(a1);
  id v3 = v2;
  [*(id *)(v1 + 24) enqueueEvent:v2];
}

uint64_t type metadata accessor for MetricsOnAllBuilds()
{
  return self;
}

void sub_1000B48F0(uint64_t *a1)
{
}

uint64_t sub_1000B4914(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

uint64_t sub_1000B4930(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  sub_100010DDC();
  if ((v9 & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v10 = *(void *)(v5 + 48);
  uint64_t v11 = (void *)(v10 + 16 * v8);
  BOOL v12 = *v11 == a1 && v11[1] == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v16 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v16;
      sub_100010DDC();
      if ((v17 & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v18 = (void *)(v10 + 16 * v8);
      BOOL v19 = *v18 == a1 && v18[1] == a2;
    }
    while (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = *v2;
  uint64_t v21 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000B4F40();
    uint64_t v14 = v21;
  }
  uint64_t v15 = *(void *)(*(void *)(v14 + 48) + 16 * v8);
  sub_1000B5630(v8);
  *uint64_t v2 = v21;
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1000B4AA8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100011D80((uint64_t *)&unk_10012FDA0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    Swift::Int v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    if (!v8) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v13 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
    {
      uint64_t v18 = *(void *)(v2 + 48) + 40 * i;
      long long v29 = *(_OWORD *)v18;
      long long v30 = *(_OWORD *)(v18 + 16);
      uint64_t v31 = *(void *)(v18 + 32);
      uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v4 + 40));
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6))) == 0)
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v19) >> 6;
        while (++v21 != v24 || (v23 & 1) == 0)
        {
          BOOL v25 = v21 == v24;
          if (v21 == v24) {
            unint64_t v21 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v21);
          if (v26 != -1)
          {
            unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v10 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      uint64_t v27 = *(void *)(v4 + 48) + 40 * v22;
      *(_OWORD *)uint64_t v27 = v29;
      *(_OWORD *)(v27 + 16) = v30;
      *(void *)(v27 + 32) = v31;
      ++*(void *)(v4 + 16);
      if (v8) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v15 = v12 + 1;
      if (__OFADD__(v12, 1)) {
        goto LABEL_38;
      }
      if (v15 >= v9) {
        goto LABEL_32;
      }
      unint64_t v16 = v6[v15];
      ++v12;
      if (!v16)
      {
        int64_t v12 = v15 + 1;
        if (v15 + 1 >= v9) {
          goto LABEL_32;
        }
        unint64_t v16 = v6[v12];
        if (!v16)
        {
          int64_t v12 = v15 + 2;
          if (v15 + 2 >= v9) {
            goto LABEL_32;
          }
          unint64_t v16 = v6[v12];
          if (!v16)
          {
            int64_t v17 = v15 + 3;
            if (v17 >= v9)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v0;
              uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
              if (v28 > 63) {
                sub_1000B4914(0, (unint64_t)(v28 + 63) >> 6, (void *)(v2 + 56));
              }
              else {
                *Swift::Int v6 = -1 << v28;
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v16 = v6[v17];
            if (!v16)
            {
              while (1)
              {
                int64_t v12 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_39;
                }
                if (v12 >= v9) {
                  goto LABEL_32;
                }
                unint64_t v16 = v6[v12];
                ++v17;
                if (v16) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v12 = v17;
          }
        }
      }
LABEL_20:
      unint64_t v8 = (v16 - 1) & v16;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

void *sub_1000B4D70()
{
  uint64_t v1 = v0;
  sub_100011D80((uint64_t *)&unk_10012FDA0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    uint64_t v20 = 5 * i;
    uint64_t result = (void *)sub_10000E170(*(void *)(v2 + 48) + 40 * i, (uint64_t)v24);
    uint64_t v21 = *(void *)(v4 + 48) + 8 * v20;
    long long v22 = v24[0];
    long long v23 = v24[1];
    *(void *)(v21 + 32) = v25;
    *(_OWORD *)uint64_t v21 = v22;
    *(_OWORD *)(v21 + 16) = v23;
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v13 = (v18 - 1) & v18;
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1000B4F40()
{
  uint64_t v1 = v0;
  sub_100011D80(&qword_10012E578);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    uint64_t v20 = (void *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v21 = v20[1];
    long long v22 = (void *)(*(void *)(v4 + 48) + 16 * i);
    *long long v22 = *v20;
    v22[1] = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v13 = (v18 - 1) & v18;
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1000B50F4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100011D80((uint64_t *)&unk_10012FDA0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v13 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    sub_10000E170(*(void *)(v2 + 48) + 40 * i, (uint64_t)v29);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v4 + 40));
    uint64_t v18 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v19 = result & ~v18;
    unint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v10 + 8 * (v19 >> 6))) == 0)
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v18) >> 6;
      while (++v20 != v23 || (v22 & 1) == 0)
      {
        BOOL v24 = v20 == v23;
        if (v20 == v23) {
          unint64_t v20 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v10 + 8 * v20);
        if (v25 != -1)
        {
          unint64_t v21 = __clz(__rbit64(~v25)) + (v20 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v21 = __clz(__rbit64((-1 << v19) & ~*(void *)(v10 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v10 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t v26 = *(void *)(v4 + 48) + 40 * v21;
    long long v27 = v29[0];
    long long v28 = v29[1];
    *(void *)(v26 + 32) = v30;
    *(_OWORD *)uint64_t v26 = v27;
    *(_OWORD *)(v26 + 16) = v28;
    ++*(void *)(v4 + 16);
    if (v8) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v15 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      goto LABEL_36;
    }
    if (v15 >= v9) {
      goto LABEL_32;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v12;
    if (!v16)
    {
      int64_t v12 = v15 + 1;
      if (v15 + 1 >= v9) {
        goto LABEL_32;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v12);
      if (!v16)
      {
        int64_t v12 = v15 + 2;
        if (v15 + 2 >= v9) {
          goto LABEL_32;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v12);
        if (!v16) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v16 - 1) & v16;
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v9)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_34;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v12 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v12 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_32;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    ++v17;
    if (v16) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000B5384()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100011D80(&qword_10012E578);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    int64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v9 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    long long v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
    *long long v28 = v18;
    v28[1] = v19;
    ++*(void *)(v4 + 16);
    if (v8) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_36;
    }
    if (v14 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v29) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v11);
      if (!v15)
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v29) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v11);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_34;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    int64_t v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t sub_1000B5630(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        Swift::Int v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 >= v9 && v2 >= v11)
          {
LABEL_15:
            uint64_t v14 = *(void *)(v3 + 48);
            unint64_t v15 = (_OWORD *)(v14 + 16 * v2);
            int64_t v16 = (_OWORD *)(v14 + 16 * v6);
            BOOL v17 = v2 != v6 || v15 >= v16 + 1;
            int64_t v2 = v6;
            if (v17)
            {
              *unint64_t v15 = *v16;
              int64_t v2 = v6;
            }
          }
        }
        else if (v11 >= v9 || v2 >= v11)
        {
          goto LABEL_15;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v18 = *(void *)(v3 + 16);
  BOOL v19 = __OFSUB__(v18, 1);
  uint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

char *sub_1000B57EC(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B58CC(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void *sub_1000B580C(void *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B59B0(a1, a2, a3, *v3, &qword_10012EEB0, (void (*)(uint64_t, uint64_t, void *))sub_100012338, (void (*)(uint64_t, uint64_t, void *))sub_10008DC04);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void *sub_1000B585C(void *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B59B0(a1, a2, a3, *v3, (uint64_t *)&unk_10012FDC0, (void (*)(uint64_t, uint64_t, void *))sub_100012338, (void (*)(uint64_t, uint64_t, void *))sub_10008DA98);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

char *sub_1000B58AC(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000B5AA8(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

char *sub_1000B58CC(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100011D80((uint64_t *)&unk_10012FDB0);
    Swift::Int v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 8);
  }
  else
  {
    Swift::Int v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v12 = (char *)(a4 + 32);
  if (v5)
  {
    sub_10008D8A8(v12, v8, v10 + 32);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_10008DB48((uint64_t)v12, v8);
  }
  swift_release();
  return v10;
}

void *sub_1000B59B0(void *result, int64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, void *), void (*a7)(uint64_t, uint64_t, void *))
{
  char v10 = (char)result;
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    int64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v12 = a2;
      }
    }
  }
  else
  {
    int64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (v14)
  {
    sub_100011D80(a5);
    unint64_t v15 = (void *)swift_allocObject();
    size_t v16 = j__malloc_size(v15);
    v15[2] = v13;
    uint64_t v15[3] = 2 * ((uint64_t)(v16 - 32) / 16);
  }
  else
  {
    unint64_t v15 = &_swiftEmptyArrayStorage;
  }
  BOOL v17 = v15 + 4;
  uint64_t v18 = a4 + 32;
  if (v10)
  {
    a6(v18, v13, v17);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    a7(v18, v13, v17);
  }
  swift_release();
  return v15;
}

char *sub_1000B5AA8(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100011D80(&qword_10012EEA0);
    char v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    char v10 = (char *)_swiftEmptyArrayStorage;
  }
  int64_t v12 = (char *)(a4 + 32);
  if (v5)
  {
    sub_10008D904(v12, v8, v10 + 32);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_10008DCC0((uint64_t)v12, v8);
  }
  swift_release();
  return v10;
}

uint64_t sub_1000B5B9C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  int64_t v2 = (void *)_convertErrorToNSError(_:)();
  id v3 = [v2 code];
  size_t v11 = sub_10000C060((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10, v26, (char)v3);
  sub_1000B0C5C((uint64_t)v11, v12 | 0x646F437200000000, 0xE900000000000065);
  id v13 = [v2 domain];
  char v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v23 = sub_10000C060(v15, v16, v17, v18, v19, v20, v21, v22, v27, v14);
  sub_1000B0C5C((uint64_t)v23, v24 | 0x6D6F447200000000, 0xEB000000006E6961);

  return a2;
}

uint64_t sub_1000B5C78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[19] = a4;
  v5[20] = v4;
  v5[17] = a2;
  v5[18] = a3;
  v5[16] = a1;
  return _swift_task_switch(sub_1000B5CA0, 0, 0);
}

uint64_t sub_1000B5CA0@<X0>(NSURL *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 144);
  URL._bridgeToObjectiveC()(a1);
  uint64_t v4 = v3;
  if (v2) {
    v5.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  else {
    v5.super.Class isa = 0;
  }
  id v6 = [*(id *)(v1 + 160) requestWithMethod:*(void *)(v1 + 128) URL:v4 headers:v5.super.isa parameters:*(void *)(v1 + 152)];
  *(void *)(v1 + 16_Block_object_dispose(&a9, 8) = v6;

  *(void *)(v1 + 16) = v1;
  *(void *)(v1 + 56) = v1 + 120;
  *(void *)(v1 + 24) = sub_1000B5E0C;
  uint64_t v7 = swift_continuation_init();
  *(void *)(v1 + 80) = _NSConcreteStackBlock;
  *(void *)(v1 + 8_Block_object_dispose(&a9, 8) = 0x40000000;
  *(void *)(v1 + 96) = sub_100086330;
  *(void *)(v1 + 104) = &unk_100116A58;
  *(void *)(v1 + 112) = v7;
  [v6 resultWithCompletion:v1 + 80];
  return _swift_continuation_await(v1 + 16);
}

uint64_t sub_1000B5E0C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 176) = v1;
  if (v1) {
    uint64_t v2 = sub_1000B5F88;
  }
  else {
    uint64_t v2 = sub_1000B5F1C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000B5F1C()
{
  uint64_t v1 = *(void *)(v0 + 120);

  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_1000B5F88()
{
  uint64_t v1 = *(void **)(v0 + 168);
  swift_willThrow();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t static Date.utcGregorianTimestamp(year:month:day:hour:minute:second:millisecond:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = sub_100011D80(&qword_10012FB58);
  __chkstk_darwin(v7 - 8);
  sub_100008338();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = sub_100011D80((uint64_t *)&unk_10012FEA0);
  __chkstk_darwin(v11 - 8);
  sub_100008338();
  uint64_t v14 = v13 - v12;
  uint64_t v37 = type metadata accessor for DateComponents();
  sub_10000BFC4();
  uint64_t v16 = v15;
  __chkstk_darwin(v17);
  sub_100008338();
  uint64_t v20 = v19 - v18;
  uint64_t v21 = type metadata accessor for Calendar.Identifier();
  sub_10000BFC4();
  uint64_t v23 = v22;
  __chkstk_darwin(v24);
  sub_100008338();
  uint64_t v27 = v26 - v25;
  uint64_t v28 = type metadata accessor for Calendar();
  sub_10000BFC4();
  uint64_t v30 = v29;
  __chkstk_darwin(v31);
  sub_100008338();
  uint64_t v34 = v33 - v32;
  (*(void (**)(uint64_t, void, uint64_t))(v23 + 104))(v27, enum case for Calendar.Identifier.gregorian(_:), v21);
  Calendar.init(identifier:)();
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v27, v21);
  sub_1000101E8(v14, 1, 1, v28);
  uint64_t v35 = type metadata accessor for TimeZone();
  sub_1000101E8(v10, 1, 1, v35);
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v14, v34, v28);
  sub_1000101E8(v14, 0, 1, v28);
  DateComponents.calendar.setter();
  TimeZone.init(secondsFromGMT:)();
  DateComponents.timeZone.setter();
  DateComponents.year.setter();
  DateComponents.month.setter();
  DateComponents.day.setter();
  DateComponents.hour.setter();
  DateComponents.minute.setter();
  uint64_t result = DateComponents.second.setter();
  if ((unsigned __int128)(a7 * (__int128)1000) >> 64 == (1000 * a7) >> 63)
  {
    uint64_t result = 1000000 * a7;
    if ((unsigned __int128)(1000 * a7 * (__int128)1000) >> 64 == (1000000 * a7) >> 63)
    {
      DateComponents.nanosecond.setter();
      Calendar.date(from:)();
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v20, v37);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8))(v34, v28);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000B63C8(char a1, void (*a2)(unint64_t))
{
  if (qword_10012E210 != -1) {
    swift_once();
  }
  unint64_t v4 = sub_1000B6454(a1);
  a2(v4);
  return swift_bridgeObjectRelease();
}

unint64_t sub_1000B6454(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0xD000000000000016;
      break;
    case 3:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 4:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 5:
      unint64_t result = 0x44746E756F636361;
      break;
    case 6:
      unint64_t result = 0x7669746341736164;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000B654C()
{
  type metadata accessor for LiveTransactionStore();
  uint64_t v0 = swift_allocObject();
  uint64_t result = sub_1000B6590(5);
  qword_100137180 = v0;
  return result;
}

uint64_t sub_1000B6590(uint64_t a1)
{
  uint64_t v2 = v1;
  type metadata accessor for Log();
  sub_10000BFC4();
  __chkstk_darwin(v3);
  sub_1000121E8();
  type metadata accessor for OS_dispatch_queue.Attributes();
  sub_1000082F8();
  __chkstk_darwin(v4);
  sub_100008338();
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  sub_100008338();
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  sub_10000BFC4();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  sub_100008338();
  uint64_t v12 = v11 - v10;
  sub_1000B825C();
  (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))(v12, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v6);
  static DispatchQoS.unspecified.getter();
  sub_100017394(&qword_100130048, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100011D80(&qword_100130050);
  sub_1000172B0(&qword_100130058, &qword_100130050);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v1 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  static Log.accountsDaemon.getter();
  Log.osLog.getter();
  sub_1000084F8();
  v13();
  OSSignposter.init(logHandle:)();
  uint64_t v14 = OBJC_IVAR____TtC12amsaccountsd20LiveTransactionStore_transactionSet;
  *(void *)(v2 + v14) = [objc_allocWithZone((Class)NSCountedSet) init];
  uint64_t v15 = OBJC_IVAR____TtC12amsaccountsd20LiveTransactionStore_transactionSignpostStateStore;
  type metadata accessor for OSSignpostIntervalState();
  *(void *)(v2 + v15) = Dictionary.init(dictionaryLiteral:)();
  uint64_t v16 = OBJC_IVAR____TtC12amsaccountsd20LiveTransactionStore_transactionStore;
  sub_100011D80(&qword_100130038);
  *(void *)(v2 + v16) = Dictionary.init(dictionaryLiteral:)();
  uint64_t v17 = v2 + OBJC_IVAR____TtC12amsaccountsd20LiveTransactionStore_holdTime;
  *(void *)(v2 + OBJC_IVAR____TtC12amsaccountsd20LiveTransactionStore_holdTime) = a1;
  uint64_t v18 = enum case for DispatchTimeInterval.seconds(_:);
  type metadata accessor for DispatchTimeInterval();
  sub_1000082F8();
  (*(void (**)(uint64_t, uint64_t))(v19 + 104))(v17, v18);
  return v2;
}

uint64_t sub_1000B68EC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v94 = a4;
  uint64_t v7 = type metadata accessor for OSSignpostError();
  uint64_t v85 = *(void *)(v7 - 8);
  uint64_t v86 = v7;
  __chkstk_darwin(v7);
  long long v84 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OSSignpostID();
  uint64_t v88 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v87 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v77 - v12;
  uint64_t v14 = type metadata accessor for LogInterpolation.StringInterpolation();
  __chkstk_darwin(v14 - 8);
  uint64_t v90 = (char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = type metadata accessor for Log();
  uint64_t v95 = *(uint64_t **)(v92 - 8);
  uint64_t v16 = __chkstk_darwin(v92);
  uint64_t v18 = (char *)&v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v77 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v77 - v22;
  uint64_t v24 = *(void **)(a1 + OBJC_IVAR____TtC12amsaccountsd20LiveTransactionStore_transactionSet);
  NSString v25 = String._bridgeToObjectiveC()();
  [v24 removeObject:v25];

  uint64_t v91 = a3;
  NSString v26 = String._bridgeToObjectiveC()();
  id v27 = [v24 countForObject:v26];

  uint64_t v89 = v9;
  uint64_t v93 = a1;
  if (v27)
  {
    uint64_t v86 = a2;
    static Log.accountsDaemon.getter();
    sub_100011D80((uint64_t *)&unk_10012E440);
    type metadata accessor for LogInterpolation();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3F0;
    uint64_t v98 = v94;
    uint64_t v96 = a1;
    swift_retain();
    id v28 = (id)AMSLogKey();
    if (v28)
    {
      uint64_t v29 = v28;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    uint64_t v39 = v91;
    static LogInterpolation.prefix(_:_:)();
    swift_bridgeObjectRelease();
    sub_10000D47C((uint64_t)&v96);
    LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v40._object = (void *)0x8000000100103220;
    v40._countAndFlagsBits = 0xD000000000000012;
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v40);
    uint64_t v98 = &type metadata for String;
    uint64_t v96 = v86;
    uint64_t v97 = v39;
    swift_bridgeObjectRetain();
    LogInterpolation.StringInterpolation.appendInterpolation(safe:)();
    sub_100016B90((uint64_t)&v96);
    v41._countAndFlagsBits = 0;
    v41._object = (void *)0xE000000000000000;
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v41);
    LogInterpolation.init(stringInterpolation:)();
    Log.info(_:)();
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v95[1])(v18, v92);
    String._bridgeToObjectiveC()();
    OSSignposter.logHandle.getter();
    uint64_t v42 = v87;
    OSSignpostID.init(log:object:)();
    id v43 = OSSignposter.logHandle.getter();
    os_signpost_type_t v44 = static os_signpost_type_t.event.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v45 = 0;
      os_signpost_id_t v46 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v43, v44, v46, "Transaction", "Transaction left", v45, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v88 + 8))(v42, v89);
  }
  else
  {
    long long v82 = v21;
    uint64_t v83 = v13;
    uint64_t v30 = a2;
    uint64_t v87 = v23;
    static Log.accountsDaemon.getter();
    uint64_t v31 = sub_100011D80((uint64_t *)&unk_10012E440);
    uint64_t v32 = *(void *)(type metadata accessor for LogInterpolation() - 8);
    uint64_t v33 = *(void *)(v32 + 72);
    uint64_t v34 = *(unsigned __int8 *)(v32 + 80);
    uint64_t v35 = (v34 + 32) & ~v34;
    uint64_t v81 = v31;
    uint64_t v79 = v35 + 2 * v33;
    uint64_t v78 = v34 | 7;
    uint64_t v36 = swift_allocObject();
    long long v77 = xmmword_1000DA3F0;
    *(_OWORD *)(v36 + 16) = xmmword_1000DA3F0;
    uint64_t v80 = v35;
    uint64_t v98 = v94;
    uint64_t v96 = a1;
    swift_retain();
    id v37 = (id)AMSLogKey();
    if (v37)
    {
      uint64_t v38 = v37;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    uint64_t v48 = v91;
    uint64_t v49 = v92;
    static LogInterpolation.prefix(_:_:)();
    swift_bridgeObjectRelease();
    sub_10000D47C((uint64_t)&v96);
    LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v50._countAndFlagsBits = 0xD000000000000013;
    v50._object = (void *)0x8000000100103240;
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v50);
    uint64_t v98 = &type metadata for String;
    uint64_t v96 = a2;
    uint64_t v97 = v48;
    swift_bridgeObjectRetain();
    LogInterpolation.StringInterpolation.appendInterpolation(safe:)();
    sub_100016B90((uint64_t)&v96);
    v51._countAndFlagsBits = 0;
    v51._object = (void *)0xE000000000000000;
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v51);
    LogInterpolation.init(stringInterpolation:)();
    id v52 = v87;
    Log.info(_:)();
    swift_bridgeObjectRelease();
    long long v54 = v95 + 1;
    uint64_t v53 = (void (*)(char *, uint64_t))v95[1];
    v53(v52, v49);
    uint64_t v55 = v93;
    uint64_t v56 = (uint64_t *)(v93 + OBJC_IVAR____TtC12amsaccountsd20LiveTransactionStore_transactionSignpostStateStore);
    swift_beginAccess();
    uint64_t v95 = v56;
    uint64_t v57 = *v56;
    swift_bridgeObjectRetain();
    uint64_t v58 = sub_100017300(v30, v48, v57);
    swift_bridgeObjectRelease();
    if (v58)
    {
      swift_endAccess();
      uint64_t v59 = OSSignposter.logHandle.getter();
      long long v60 = v83;
      OSSignpostIntervalState.signpostID.getter();
      os_signpost_type_t v61 = static os_signpost_type_t.end.getter();
      char v62 = OS_os_log.signpostsEnabled.getter();
      uint64_t v63 = v89;
      if (v62)
      {
        swift_retain();
        unint64_t v64 = v84;
        checkForErrorAndConsumeState(state:)();
        swift_release();
        uint64_t v66 = v85;
        uint64_t v65 = v86;
        if ((*(unsigned int (**)(char *, uint64_t))(v85 + 88))(v64, v86) == enum case for OSSignpostError.doubleEnd(_:))
        {
          BOOL v67 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v66 + 8))(v64, v65);
          BOOL v67 = "";
        }
        unint64_t v70 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v70 = 0;
        char v71 = v83;
        os_signpost_id_t v72 = OSSignpostID.rawValue.getter();
        uint64_t v73 = v67;
        long long v60 = v71;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v59, v61, v72, "Transaction", v73, v70, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v88 + 8))(v60, v63);
      swift_release();
      swift_beginAccess();
      sub_1000B804C(v30, v48);
      swift_endAccess();
      swift_unknownObjectRelease();
      swift_beginAccess();
      sub_1000B7F40(v30, v48);
      swift_endAccess();
      return swift_release();
    }
    else
    {
      uint64_t v92 = v33;
      uint64_t v95 = v54;
      swift_endAccess();
      static Log.accountsDaemon.getter();
      *(_OWORD *)(swift_allocObject() + 16) = v77;
      uint64_t v98 = v94;
      uint64_t v96 = v55;
      swift_retain();
      id v68 = (id)AMSLogKey();
      if (v68)
      {
        char v69 = v68;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      static LogInterpolation.prefix(_:_:)();
      swift_bridgeObjectRelease();
      sub_10000D47C((uint64_t)&v96);
      LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v74._countAndFlagsBits = 0xD000000000000038;
      v74._object = (void *)0x8000000100103260;
      LogInterpolation.StringInterpolation.appendLiteral(_:)(v74);
      uint64_t v98 = &type metadata for String;
      uint64_t v96 = v30;
      uint64_t v97 = v48;
      swift_bridgeObjectRetain();
      LogInterpolation.StringInterpolation.appendInterpolation(safe:)();
      sub_100016B90((uint64_t)&v96);
      v75._countAndFlagsBits = 0x6361736E61727420;
      v75._object = (void *)0xEC0000006E6F6974;
      LogInterpolation.StringInterpolation.appendLiteral(_:)(v75);
      LogInterpolation.init(stringInterpolation:)();
      uint64_t v76 = v82;
      Log.fault(_:)();
      swift_bridgeObjectRelease();
      return ((uint64_t (*)(char *, uint64_t))v53)(v76, v49);
    }
  }
}

uint64_t sub_1000B7388(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t sub_1000B73CC()
{
  type metadata accessor for DispatchTimeInterval();
  sub_1000082F8();
  sub_1000084F8();
  v1();
  type metadata accessor for OSSignposter();
  sub_1000082F8();
  sub_1000084F8();
  v2();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000B7494()
{
  sub_1000B73CC();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_1000B74EC()
{
  return type metadata accessor for LiveTransactionStore();
}

uint64_t type metadata accessor for LiveTransactionStore()
{
  uint64_t result = qword_10012FF00;
  if (!qword_10012FF00) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000B753C()
{
  uint64_t result = type metadata accessor for DispatchTimeInterval();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for OSSignposter();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_updateClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1000B762C(char a1)
{
  return sub_1000B63C8(a1, (void (*)(unint64_t))sub_100007480);
}

uint64_t sub_1000B7658(char a1)
{
  return sub_1000B63C8(a1, (void (*)(unint64_t))sub_100009CC0);
}

uint64_t sub_1000B7688()
{
  return sub_1000B68EC(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

void *sub_1000B7694(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

void *sub_1000B776C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = sub_1000B7804(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v2 = sub_1000B79E0(0, v2[2] + 1, 1, (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    unint64_t v2 = sub_1000B79E0((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  }
  v2[2] = v4 + 1;
  *((unsigned char *)v2 + v4 + 32) = 0;
  return v2;
}

void *sub_1000B7804(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int v2 = String.UTF8View._foreignCount()();
    if (v2) {
      goto LABEL_6;
    }
    return &_swiftEmptyArrayStorage;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    Swift::Int v2 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
LABEL_6:
  unint64_t v3 = sub_1000B7978(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    unint64_t v4 = v3;
    uint64_t v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2) {
      goto LABEL_14;
    }
    return v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1000B7978(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100011D80((uint64_t *)&unk_100130060);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  long long v4[2] = a1;
  long long v4[3] = 2 * v5 - 64;
  return v4;
}

char *sub_1000B79E0(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100011D80((uint64_t *)&unk_100130060);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_1000B7B90(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000B7AB8(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_1000B7AB8(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

char *sub_1000B7B90(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

#error "1000B7C78: call analysis failed (funcsize=55)"

#error "1000B7D58: call analysis failed (funcsize=58)"

void sub_1000B7DEC()
{
  sub_10000B25C();
  unint64_t v1 = v0;
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  sub_100008E30(v3);
  LOBYTE(v3) = v4;
  swift_bridgeObjectRelease();
  if (v3)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v1;
    uint64_t v6 = *v1;
    *unint64_t v1 = 0x8000000000000000;
    Swift::Int v7 = *(void *)(v6 + 24);
    sub_100011D80(&qword_100130078);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v7);
    type metadata accessor for AccountIdentity();
    sub_1000082F8();
    sub_1000084F8();
    v8();
    type metadata accessor for AccountDataAccessActor();
    sub_100017394((unint64_t *)&qword_100130080, (void (*)(uint64_t))&type metadata accessor for AccountIdentity);
    _NativeDictionary._delete(at:)();
    *unint64_t v1 = v9;
    swift_bridgeObjectRelease();
  }
  sub_100011F8C();
}

uint64_t sub_1000B7F40(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10001169C(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v3;
  uint64_t v9 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  Swift::Int v10 = *(void *)(v9 + 24);
  sub_100011D80(&qword_100130028);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v10);
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(*(void *)(v13 + 56) + 8 * v6);
  type metadata accessor for OSSignpostIntervalState();
  _NativeDictionary._delete(at:)();
  *uint64_t v3 = v13;
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1000B804C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10001169C(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v3;
  uint64_t v9 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  Swift::Int v10 = *(void *)(v9 + 24);
  sub_100011D80(&qword_100130030);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v10);
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(*(void *)(v13 + 56) + 8 * v6);
  sub_100011D80(&qword_100130038);
  _NativeDictionary._delete(at:)();
  *uint64_t v3 = v13;
  swift_bridgeObjectRelease();
  return v11;
}

#error "1000B8180: call analysis failed (funcsize=19)"

#error "1000B81CC: call analysis failed (funcsize=19)"

uint64_t sub_1000B81F4(uint64_t a1, uint64_t a2)
{
  swift_isUniquelyReferenced_nonNull_native();
  sub_10000B394();
  uint64_t v5 = sub_1000B84F0(a1, a2, v4);
  sub_1000086D4(v5, v6, v7, v8, v9, v10, v11, v12, v14, v15);
  return swift_bridgeObjectRelease();
}

unint64_t sub_1000B825C()
{
  unint64_t result = qword_100130040;
  if (!qword_100130040)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100130040);
  }
  return result;
}

uint64_t sub_1000B82A0()
{
  return _swift_deallocObject(v0, 32, 7);
}

_OWORD *sub_1000B82B0(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  sub_10001169C(a2, a3);
  sub_10000FC08();
  if (v9)
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v10 = v7;
  char v11 = v8;
  sub_100011D80(&qword_100130070);
  if (!sub_100012078()) {
    goto LABEL_5;
  }
  unint64_t v12 = sub_10001169C(a2, a3);
  if ((v11 & 1) != (v13 & 1))
  {
LABEL_13:
    unint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v12;
LABEL_5:
  uint64_t v14 = *v3;
  if (v11)
  {
    uint64_t v15 = (_OWORD *)(*(void *)(v14 + 56) + 32 * v10);
    sub_10000D47C((uint64_t)v15);
    return sub_10000D5F4(a1, v15);
  }
  else
  {
    sub_1000B8680(v10, a2, a3, (uint64_t)a1, v14);
    return (_OWORD *)swift_bridgeObjectRetain();
  }
}

uint64_t sub_1000B83D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10001169C(a2, a3);
  sub_10000FC08();
  if (v9)
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v10 = v7;
  char v11 = v8;
  sub_100011D80(&qword_10012FAA0);
  if (!sub_100012078()) {
    goto LABEL_5;
  }
  unint64_t v12 = sub_10001169C(a2, a3);
  if ((v11 & 1) != (v13 & 1))
  {
LABEL_13:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v12;
LABEL_5:
  uint64_t v14 = *v3;
  if (v11)
  {
    uint64_t v15 = *(void *)(v14 + 56) + 40 * v10;
    return sub_1000B1C90(a1, v15);
  }
  else
  {
    sub_1000B86C4(v10, a2, a3, a1, v14);
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_1000B84F0(uint64_t a1, uint64_t a2, char a3)
{
  char v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for AccountIdentity();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v13 = sub_100008E30(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v18 = v13;
  char v19 = v14;
  sub_100011D80(&qword_100130078);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v17)) {
    goto LABEL_5;
  }
  unint64_t v20 = sub_100008E30(a2);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_10:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v18 = v20;
LABEL_5:
  uint64_t v22 = *v4;
  if (v19)
  {
    uint64_t v23 = v22[7];
    uint64_t result = swift_release();
    *(void *)(v23 + 8 * v1_Block_object_dispose(&a9, 8) = a1;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    return sub_1000B8700(v18, (uint64_t)v11, a1, v22);
  }
  return result;
}

_OWORD *sub_1000B8680(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = sub_10000F884(a1, a2, a3, a4, a5);
  uint64_t result = sub_10000D5F4(v8, (_OWORD *)(v7 + 32 * v6));
  uint64_t v10 = *(void *)(a5 + 16);
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    *(void *)(a5 + 16) = v12;
  }
  return result;
}

unint64_t sub_1000B86C4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result = sub_10000F884(a1, a2, a3, a4, a5);
  uint64_t v8 = v7 + 40 * result;
  long long v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  uint64_t v11 = *(void *)(v6 + 16);
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    *(void *)(v6 + 16) = v13;
  }
  return result;
}

uint64_t sub_1000B8700(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for AccountIdentity();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_1000B87B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  if (sub_10001044C(a1, 1, v6) == 1)
  {
    sub_10000EB44(a1, &qword_10012E4B0);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  return swift_task_create();
}

void sub_1000B8928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a4;
  *(void *)(v8 + 24) = a5;
  sub_100097FD4(a3, v8 + 32, &qword_10012EE30);
  void v11[4] = sub_1000B8FE8;
  void v11[5] = v8;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_1000B9910;
  v11[3] = &unk_100116B78;
  uint64_t v9 = _Block_copy(v11);
  swift_retain();
  swift_release();
  uint64_t v10 = String.utf8CString.getter();
  xpc_activity_register((const char *)(v10 + 32), XPC_ACTIVITY_CHECK_IN, v9);
  swift_release();
  _Block_release(v9);
}

xpc_activity_state_t sub_1000B8A5C(_xpc_activity_s *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100011D80(&qword_10012E4B0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for LogInterpolation.StringInterpolation();
  __chkstk_darwin(v11 - 8);
  uint64_t v12 = type metadata accessor for Log();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  xpc_activity_state_t result = xpc_activity_get_state(a1);
  if (result)
  {
    if (result == 2)
    {
      id v27 = v10;
      uint64_t v28 = a2;
      uint64_t v29 = a3;
      static Log.dasActivity.getter();
      sub_100011D80((uint64_t *)&unk_10012E440);
      type metadata accessor for LogInterpolation();
      uint64_t v30 = v12;
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3F0;
      id v17 = (id)AMSSetLogKeyIfNeeded();
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      static LogInterpolation.prefix<A>(_:_:)();
      swift_bridgeObjectRelease();
      LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v18._object = (void *)0x80000001001035F0;
      v18._countAndFlagsBits = 0xD000000000000014;
      LogInterpolation.StringInterpolation.appendLiteral(_:)(v18);
      uint64_t ObjectType = swift_getObjectType();
      v31[0] = a1;
      swift_unknownObjectRetain();
      LogInterpolation.StringInterpolation.appendInterpolation(_:)();
      sub_10000EB44((uint64_t)v31, &qword_10012EFB0);
      v19._countAndFlagsBits = 0;
      v19._object = (void *)0xE000000000000000;
      LogInterpolation.StringInterpolation.appendLiteral(_:)(v19);
      LogInterpolation.init(stringInterpolation:)();
      Log.default(_:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v30);
      if (qword_10012E210 != -1) {
        swift_once();
      }
      sub_100007480(0x7669746341736164, 0xEB00000000797469);
      uint64_t v20 = type metadata accessor for TaskPriority();
      uint64_t v21 = (uint64_t)v27;
      sub_1000101E8((uint64_t)v27, 1, 1, v20);
      uint64_t v22 = (void *)swift_allocObject();
      void v22[2] = 0;
      uint64_t v22[3] = 0;
      void v22[4] = v28;
      void v22[5] = v29;
      swift_retain();
      sub_1000B87B8(v21, (uint64_t)&unk_100130098, (uint64_t)v22);
      return swift_release();
    }
  }
  else
  {
    static Log.dasActivity.getter();
    sub_100011D80((uint64_t *)&unk_10012E440);
    uint64_t v23 = v13;
    type metadata accessor for LogInterpolation();
    uint64_t v30 = v12;
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3F0;
    id v24 = (id)AMSSetLogKeyIfNeeded();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v29 = a4;

    static LogInterpolation.prefix<A>(_:_:)();
    swift_bridgeObjectRelease();
    LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v25._countAndFlagsBits = 0xD000000000000015;
    v25._object = (void *)0x80000001001035D0;
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v25);
    uint64_t ObjectType = swift_getObjectType();
    v31[0] = a1;
    swift_unknownObjectRetain();
    LogInterpolation.StringInterpolation.appendInterpolation(_:)();
    sub_10000EB44((uint64_t)v31, &qword_10012EFB0);
    v26._countAndFlagsBits = 0;
    v26._object = (void *)0xE000000000000000;
    LogInterpolation.StringInterpolation.appendLiteral(_:)(v26);
    LogInterpolation.init(stringInterpolation:)();
    Log.default(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v15, v30);
    return sub_1000B9234(v29, a1);
  }
  return result;
}

uint64_t sub_1000B8FB0()
{
  swift_release();
  return _swift_deallocObject(v0, 84, 7);
}

xpc_activity_state_t sub_1000B8FE8(_xpc_activity_s *a1)
{
  return sub_1000B8A5C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), v1 + 32);
}

uint64_t sub_1000B8FF4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_1000B90C0;
  return v7();
}

uint64_t sub_1000B90C0()
{
  sub_100008308();
  sub_1000082E0();
  uint64_t v1 = *v0;
  sub_100008314();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000B918C, 0, 0);
}

uint64_t sub_1000B918C()
{
  sub_100008308();
  if (qword_10012E210 != -1) {
    swift_once();
  }
  sub_100009CC0(0x7669746341736164, 0xEB00000000797469);
  sub_100008600();
  return v0();
}

uint64_t sub_1000B9234(uint64_t a1, _xpc_activity_s *a2)
{
  uint64_t v4 = type metadata accessor for LogInterpolation.StringInterpolation();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for Log();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  xpc_object_t v9 = xpc_activity_copy_criteria(a2);
  if (v9)
  {
    sub_100097FD4(a1, (uint64_t)&v45, &qword_10012EE30);
    if (v45 != 2)
    {
      static Log.dasActivity.getter();
      sub_100011D80((uint64_t *)&unk_10012E440);
      uint64_t v10 = type metadata accessor for LogInterpolation();
      sub_1000082C8(v10);
      uint64_t v38 = v5;
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3F0;
      id v11 = (id)AMSSetLogKeyIfNeeded();
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      static LogInterpolation.prefix<A>(_:_:)();
      swift_bridgeObjectRelease();
      LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v12._countAndFlagsBits = 0xD000000000000017;
      v12._object = (void *)0x8000000100103680;
      LogInterpolation.StringInterpolation.appendLiteral(_:)(v12);
      *((void *)&v42 + 1) = swift_getObjectType();
      *(void *)&long long v41 = v9;
      swift_unknownObjectRetain();
      LogInterpolation.StringInterpolation.appendInterpolation(_:)();
      sub_10000EB44((uint64_t)&v41, &qword_10012EFB0);
      v13._countAndFlagsBits = 0;
      v13._object = (void *)0xE000000000000000;
      LogInterpolation.StringInterpolation.appendLiteral(_:)(v13);
      LogInterpolation.init(stringInterpolation:)();
      Log.default(_:)();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v38);
    }
  }
  else
  {
    sub_100097FD4(a1, (uint64_t)&v41, &qword_10012EE30);
    if (v41 != 2)
    {
      long long v45 = v41;
      long long v46 = v42;
      long long v47 = v43;
      int v48 = v44;
      static Log.dasActivity.getter();
      uint64_t v37 = sub_100011D80((uint64_t *)&unk_10012E440);
      uint64_t v17 = type metadata accessor for LogInterpolation();
      sub_1000082C8(v17);
      uint64_t v19 = *(void *)(v18 + 72);
      uint64_t v21 = *(unsigned __int8 *)(v20 + 80);
      uint64_t v36 = ((v21 + 32) & ~v21) + 2 * v19;
      uint64_t v34 = (v21 + 32) & ~v21;
      v32[1] = v19;
      uint64_t v35 = v21 | 7;
      uint64_t v22 = swift_allocObject();
      uint64_t v38 = v5;
      long long v33 = xmmword_1000DA3F0;
      *(_OWORD *)(v22 + 16) = xmmword_1000DA3F0;
      id v23 = (id)AMSSetLogKeyIfNeeded();
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      static LogInterpolation.prefix<A>(_:_:)();
      swift_bridgeObjectRelease();
      LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v24._countAndFlagsBits = 0xD00000000000001ELL;
      v24._object = (void *)0x8000000100103640;
      LogInterpolation.StringInterpolation.appendLiteral(_:)(v24);
      uint64_t ObjectType = &unk_100116CB8;
      uint64_t v25 = swift_allocObject();
      v39[0] = v25;
      long long v26 = v46;
      *(_OWORD *)(v25 + 16) = v45;
      *(_OWORD *)(v25 + 32) = v26;
      *(_OWORD *)(v25 + 4_Block_object_dispose(&a9, 8) = v47;
      *(_DWORD *)(v25 + 64) = v48;
      LogInterpolation.StringInterpolation.appendInterpolation(_:)();
      sub_10000EB44((uint64_t)v39, &qword_10012EFB0);
      v27._countAndFlagsBits = 0;
      v27._object = (void *)0xE000000000000000;
      LogInterpolation.StringInterpolation.appendLiteral(_:)(v27);
      LogInterpolation.init(stringInterpolation:)();
      Log.default(_:)();
      swift_bridgeObjectRelease();
      v32[0] = *(void *)(v6 + 8);
      ((void (*)(char *, uint64_t))v32[0])(v8, v38);
      uint64_t v28 = sub_1000B9A70((BOOL *)&v45);
      static Log.dasActivity.getter();
      *(_OWORD *)(swift_allocObject() + 16) = v33;
      id v29 = (id)AMSSetLogKeyIfNeeded();
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      static LogInterpolation.prefix<A>(_:_:)();
      swift_bridgeObjectRelease();
      LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v30._object = (void *)0x8000000100103660;
      v30._countAndFlagsBits = 0xD000000000000016;
      LogInterpolation.StringInterpolation.appendLiteral(_:)(v30);
      uint64_t ObjectType = (void *)swift_getObjectType();
      v39[0] = v28;
      swift_unknownObjectRetain();
      LogInterpolation.StringInterpolation.appendInterpolation(_:)();
      sub_10000EB44((uint64_t)v39, &qword_10012EFB0);
      v31._countAndFlagsBits = 0;
      v31._object = (void *)0xE000000000000000;
      LogInterpolation.StringInterpolation.appendLiteral(_:)(v31);
      LogInterpolation.init(stringInterpolation:)();
      Log.default(_:)();
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v32[0])(v8, v38);
      xpc_activity_set_criteria(a2, v28);
      return swift_unknownObjectRelease();
    }
  }
  static Log.dasActivity.getter();
  sub_100011D80((uint64_t *)&unk_10012E440);
  uint64_t v15 = type metadata accessor for LogInterpolation();
  sub_1000082C8(v15);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000DA3F0;
  id v16 = (id)AMSSetLogKeyIfNeeded();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  static LogInterpolation.prefix<A>(_:_:)();
  swift_bridgeObjectRelease();
  LogInterpolation.init(stringLiteral:)();
  Log.default(_:)();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000B9910(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_1000B9970()
{
  swift_unknownObjectRelease();
  swift_release();
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000B99B0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100008208;
  return sub_1000B8FF4(a1, v4, v5, v6);
}

void *sub_1000B9A70(BOOL *a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  uint64_t v3 = v2;
  if (a1[50]) {
    uint64_t v4 = (const char **)&XPC_ACTIVITY_PRIORITY_UTILITY;
  }
  else {
    uint64_t v4 = (const char **)&XPC_ACTIVITY_PRIORITY_MAINTENANCE;
  }
  xpc_dictionary_set_string(v2, XPC_ACTIVITY_PRIORITY, *v4);
  if (!a1[49])
  {
    if (!XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY)
    {
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    BOOL v7 = 1;
    sub_10000FB28(v5, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY);
    uint64_t v6 = (const char *)XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY;
    if (!XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY)
    {
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
      JUMPOUT(0x1000B9D70);
    }
LABEL_11:
    xpc_dictionary_set_BOOL(v3, v6, v7);
    goto LABEL_12;
  }
  if (a1[49])
  {
    if (!XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY)
    {
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    sub_10000FB28(v5, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY);
    uint64_t v6 = (const char *)XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY;
    if (!XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY)
    {
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    BOOL v7 = 0;
    goto LABEL_11;
  }
LABEL_12:
  switch(a1[1])
  {
    case 1:
      uint64_t v8 = (const char *)XPC_ACTIVITY_REQUIRES_CLASS_A;
      if (XPC_ACTIVITY_REQUIRES_CLASS_A) {
        goto LABEL_18;
      }
      __break(1u);
LABEL_15:
      uint64_t v8 = (const char *)XPC_ACTIVITY_REQUIRES_CLASS_B;
      if (!XPC_ACTIVITY_REQUIRES_CLASS_B)
      {
        __break(1u);
LABEL_17:
        uint64_t v8 = (const char *)XPC_ACTIVITY_REQUIRES_CLASS_C;
        if (!XPC_ACTIVITY_REQUIRES_CLASS_C) {
          goto LABEL_55;
        }
      }
LABEL_18:
      sub_10000FB28(v5, v8);
LABEL_19:
      sub_10000FB28(v5, XPC_ACTIVITY_PREVENT_DEVICE_SLEEP);
      xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REPEATING, a1[51]);
      if (!XPC_ACTIVITY_EXPECTED_DURATION) {
        goto LABEL_50;
      }
      sub_10000F8B4();
      if (v12)
      {
        __break(1u);
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
      sub_1000085DC(v11, v9, v10);
      xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_ALLOW_BATTERY, *a1);
      sub_100097FD4((uint64_t)(a1 + 8), (uint64_t)v26, &qword_1001300B0);
      sub_100097FD4((uint64_t)v26, (uint64_t)&v27, &qword_1001300B0);
      if (v28) {
        goto LABEL_27;
      }
      sub_10000F8B4();
      if (v12) {
        goto LABEL_41;
      }
      if (v13 <= -9.22337204e18)
      {
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      sub_10000A5C0();
      if (!v16) {
        goto LABEL_44;
      }
      sub_1000085DC(v15, v14, XPC_ACTIVITY_DELAY);
LABEL_27:
      sub_100097FD4((uint64_t)(a1 + 40), (uint64_t)v25, &qword_1001300B0);
      sub_100097FD4((uint64_t)v25, (uint64_t)&v29, &qword_1001300B0);
      if (v30) {
        goto LABEL_33;
      }
      sub_10000F8B4();
      if (v12)
      {
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
      if (v17 <= -9.22337204e18)
      {
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
      sub_10000A5C0();
      if (!v16) {
        goto LABEL_47;
      }
      sub_1000085DC(v19, v18, XPC_ACTIVITY_INTERVAL);
LABEL_33:
      sub_100097FD4((uint64_t)(a1 + 24), (uint64_t)v24, &qword_1001300B0);
      sub_100097FD4((uint64_t)v24, (uint64_t)&v31, &qword_1001300B0);
      if ((v32 & 1) == 0)
      {
        sub_10000F8B4();
        if (v12)
        {
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
          goto LABEL_48;
        }
        if (v20 <= -9.22337204e18)
        {
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
        sub_10000A5C0();
        if (!v16)
        {
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
          goto LABEL_51;
        }
        sub_1000085DC(v22, v21, XPC_ACTIVITY_GRACE_PERIOD);
      }
      return v3;
    case 2:
      goto LABEL_15;
    case 3:
      goto LABEL_17;
    default:
      goto LABEL_19;
  }
}

uint64_t sub_1000B9D80(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1000B9E5C;
  return v6(a1);
}

uint64_t sub_1000B9E5C()
{
  sub_100008308();
  sub_1000082E0();
  uint64_t v1 = *v0;
  sub_100008314();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_100008600();
  return v3();
}

uint64_t sub_1000B9F20()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B9F58(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100008208;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1001300A0 + dword_1001300A0);
  return v6(a1, v4);
}

uint64_t sub_1000BA010()
{
  return _swift_deallocObject(v0, 72, 7);
}

ValueMetadata *type metadata accessor for XPCActivity()
{
  return &type metadata for XPCActivity;
}

uint64_t sub_1000BA030(char a1, char a2)
{
  if (a1) {
    unint64_t v2 = 0x8000000100101610;
  }
  else {
    unint64_t v2 = 0x80000001001015F0;
  }
  if (a2) {
    unint64_t v3 = 0x8000000100101610;
  }
  else {
    unint64_t v3 = 0x80000001001015F0;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

BOOL sub_1000BA0D0(char a1, char a2)
{
  return dbl_1000DDCC8[a1] == dbl_1000DDCC8[a2];
}

uint64_t sub_1000BA0F8(char a1, char a2)
{
  sub_100098554(a1);
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  sub_100098554(a2);
  if (v4 == v8 && v6 == v7) {
    char v10 = 1;
  }
  else {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10 & 1;
}

uint64_t sub_1000BA180(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x6C616E6F73726570;
  }
  else {
    uint64_t v3 = 0x79616C506F747561;
  }
  if (v2) {
    unint64_t v4 = 0xE800000000000000;
  }
  else {
    unint64_t v4 = 0xEF6E6F6974617A69;
  }
  if (a2) {
    uint64_t v5 = 0x6C616E6F73726570;
  }
  else {
    uint64_t v5 = 0x79616C506F747561;
  }
  if (a2) {
    unint64_t v6 = 0xEF6E6F6974617A69;
  }
  else {
    unint64_t v6 = 0xE800000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1000BA230()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void sub_1000BA298(uint64_t a1, char a2)
{
}

uint64_t sub_1000BA2CC()
{
  return String.hash(into:)();
}

uint64_t sub_1000BA2E8()
{
  return String.hash(into:)();
}

uint64_t sub_1000BA308(uint64_t a1, char a2)
{
  sub_100098554(a2);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000BA35C()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

double sub_1000BA3D4(char a1)
{
  return dbl_1000DDCC8[a1];
}

uint64_t sub_1000BA3E8(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && a1[52])
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *a1;
      BOOL v4 = v3 >= 2;
      int v2 = (v3 + 2147483646) & 0x7FFFFFFF;
      if (!v4) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000BA434(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&a9, 8) = 0u;
    *(_DWORD *)(result + 4_Block_object_dispose(&a9, 8) = 0;
    *(void *)xpc_activity_state_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 52) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 52) = 0;
    }
    if (a2) {
      *(unsigned char *)xpc_activity_state_t result = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for XPCActivityCriteria()
{
}

uint64_t sub_1000BA494(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000BA4C8()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000BA524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return sub_100008434();
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

void sub_1000BA53C()
{
}

uint64_t sub_1000BA564(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

Swift::Int sub_1000BA5E4()
{
  return Hasher._finalize()();
}

uint64_t sub_1000BA628()
{
  return 0x65756C6176;
}

uint64_t sub_1000BA63C(void *a1)
{
  uint64_t v2 = sub_100011D80(&qword_1001300F8);
  sub_10000BFC4();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000087B0(a1, a1[3]);
  sub_1000BB7F8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v2);
}

Swift::Int sub_1000BA750()
{
  return Hasher._finalize()();
}

uint64_t sub_1000BA7A8(void *a1)
{
  uint64_t v3 = sub_100011D80(&qword_1001300E8);
  sub_10000BFC4();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  char v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (uint64_t)sub_1000087B0(a1, a1[3]);
  sub_1000BB7F8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v3);
  }
  sub_10000D47C((uint64_t)a1);
  return v9;
}

Swift::Int sub_1000BA8E0()
{
  return Hasher._finalize()();
}

uint64_t sub_1000BA924@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000BA564(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1000BA950(uint64_t a1)
{
  unint64_t v2 = sub_1000BB7F8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000BA98C(uint64_t a1)
{
  unint64_t v2 = sub_1000BB7F8();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_1000BA9C8()
{
  return sub_1000BA750();
}

uint64_t sub_1000BA9D0()
{
  return sub_1000BA4C8();
}

Swift::Int sub_1000BA9D8()
{
  return Hasher._finalize()();
}

uint64_t sub_1000BAA30()
{
  return sub_1000BA494(*v0);
}

uint64_t sub_1000BAA38@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000BA7A8(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1000BAA64(void *a1)
{
  return sub_1000BA63C(a1);
}

uint64_t sub_1000BAA80(uint64_t *a1, uint64_t *a2)
{
  return sub_1000BA524(*a1, a1[1], *a2, a2[1]);
}

Swift::Int sub_1000BAA94(char a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1000BAAD4(double a1)
{
  if (a1 == 60.0) {
    return 0;
  }
  if (a1 == 300.0) {
    return sub_100008434();
  }
  if (a1 == 900.0) {
    return 2;
  }
  if (a1 == 1800.0) {
    return 3;
  }
  if (a1 == 3600.0) {
    return 4;
  }
  if (a1 == 14400.0) {
    return 5;
  }
  if (a1 == 28800.0) {
    return 6;
  }
  if (a1 == 86400.0) {
    return 7;
  }
  if (a1 == 604800.0) {
    return 8;
  }
  return 9;
}

void sub_1000BABAC()
{
  Hasher._combine(_:)(*(unsigned char *)v0 & 1);
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 1));
  if (*(unsigned char *)(v0 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v1 = *(void *)(v0 + 8);
    Hasher._combine(_:)(1u);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v2 = v1;
    }
    else {
      Swift::UInt64 v2 = 0;
    }
    Hasher._combine(_:)(v2);
  }
  Hasher._combine(_:)(qword_1000DDD10[*(char *)(v0 + 17)]);
  if (*(unsigned char *)(v0 + 32) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v3 = *(void *)(v0 + 24);
    Hasher._combine(_:)(1u);
    if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v4 = v3;
    }
    else {
      Swift::UInt64 v4 = 0;
    }
    Hasher._combine(_:)(v4);
  }
  if (*(unsigned char *)(v0 + 48) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v5 = *(void *)(v0 + 40);
    Hasher._combine(_:)(1u);
    if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v6 = v5;
    }
    else {
      Swift::UInt64 v6 = 0;
    }
    Hasher._combine(_:)(v6);
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 49));
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 50));
  Hasher._combine(_:)(*(unsigned char *)(v0 + 51) & 1);
}

uint64_t sub_1000BACAC(double *a1, double *a2)
{
  if (((*(unsigned __int8 *)a1 ^ *(unsigned __int8 *)a2) & 1) != 0
    || *((unsigned __int8 *)a1 + 1) != *((unsigned __int8 *)a2 + 1))
  {
    goto LABEL_9;
  }
  char v2 = *((unsigned char *)a2 + 16);
  if (((_BYTE)a1[2] & 1) == 0)
  {
    if (a1[1] != a2[1]) {
      char v2 = 1;
    }
    if (v2) {
      goto LABEL_9;
    }
    goto LABEL_11;
  }
  if (*((unsigned char *)a2 + 16))
  {
LABEL_11:
    int v4 = *((unsigned __int8 *)a1 + 17);
    switch(*((unsigned char *)a2 + 17))
    {
      case 1:
        if (v4 != 1) {
          goto LABEL_9;
        }
        break;
      case 2:
        if (v4 != 2) {
          goto LABEL_9;
        }
        break;
      case 3:
        if (v4 != 3) {
          goto LABEL_9;
        }
        break;
      case 4:
        if (v4 != 4) {
          goto LABEL_9;
        }
        break;
      case 5:
        if (v4 != 5) {
          goto LABEL_9;
        }
        break;
      case 6:
        if (v4 != 6) {
          goto LABEL_9;
        }
        break;
      case 7:
        if (v4 != 7) {
          goto LABEL_9;
        }
        break;
      case 8:
        if (v4 != 8) {
          goto LABEL_9;
        }
        break;
      default:
        if (*((unsigned char *)a1 + 17)) {
          goto LABEL_9;
        }
        break;
    }
    char v2 = *((unsigned char *)a2 + 32);
    if ((_BYTE)a1[4])
    {
      if (!*((unsigned char *)a2 + 32)) {
        return v2 & 1;
      }
    }
    else
    {
      if (a1[3] != a2[3]) {
        char v2 = 1;
      }
      if (v2) {
        goto LABEL_9;
      }
    }
    char v2 = *((unsigned char *)a2 + 48);
    if ((_BYTE)a1[6])
    {
      if (!*((unsigned char *)a2 + 48)) {
        return v2 & 1;
      }
      goto LABEL_41;
    }
    if (a1[5] != a2[5]) {
      char v2 = 1;
    }
    if ((v2 & 1) == 0)
    {
LABEL_41:
      if (*((unsigned __int8 *)a1 + 49) == *((unsigned __int8 *)a2 + 49)
        && *((unsigned __int8 *)a1 + 50) == *((unsigned __int8 *)a2 + 50))
      {
        char v2 = ((*((unsigned char *)a1 + 51) & 1) == 0) ^ *((unsigned char *)a2 + 51);
        return v2 & 1;
      }
    }
LABEL_9:
    char v2 = 0;
  }
  return v2 & 1;
}

Swift::Int sub_1000BAE38()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000BAE70()
{
  return sub_1000BAA94(*v0);
}

BOOL sub_1000BAE78(char *a1, char *a2)
{
  return sub_1000BA0D0(*a1, *a2);
}

Swift::Int sub_1000BAE84()
{
  return sub_10007A66C(*v0);
}

void sub_1000BAE8C(uint64_t a1)
{
  sub_1000BA298(a1, *v1);
}

Swift::Int sub_1000BAE94(uint64_t a1)
{
  return sub_10007A810(a1, *v1);
}

uint64_t sub_1000BAE9C@<X0>(double *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000BAAD4(*a1);
  *a2 = result;
  return result;
}

void sub_1000BAEC8(double *a1@<X8>)
{
  *a1 = sub_1000BA3D4(*v1);
}

Swift::Int sub_1000BAEFC()
{
  return Hasher._finalize()();
}

unint64_t sub_1000BAF40()
{
  unint64_t result = qword_1001300B8;
  if (!qword_1001300B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001300B8);
  }
  return result;
}

unsigned char *sub_1000BAF8C(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000BB058);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for XPCActivityCriteria.Priority()
{
}

uint64_t sub_1000BB08C(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *sub_1000BB114(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000BB1E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for XPCActivityCriteria.NetworkRequirement()
{
}

uint64_t sub_1000BB214(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF8)
  {
    if (a2 + 8 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 8) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 9;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v5 = v6 - 9;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *sub_1000BB29C(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000BB368);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

void type metadata accessor for XPCActivityCriteria.Interval()
{
}

uint64_t sub_1000BB39C(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v5 = v6 - 4;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *sub_1000BB424(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000BB4F0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void type metadata accessor for DataClass()
{
}

void *sub_1000BB524(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000BB554()
{
  return swift_bridgeObjectRelease();
}

void *sub_1000BB55C(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 sub_1000BB5A0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *sub_1000BB5AC(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000BB5E0(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000BB620(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + _Block_object_dispose(&a9, 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(&a9, 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for XPCActivityTaskID()
{
}

unint64_t sub_1000BB66C()
{
  unint64_t result = qword_1001300C0;
  if (!qword_1001300C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001300C0);
  }
  return result;
}

unint64_t sub_1000BB6BC()
{
  unint64_t result = qword_1001300C8;
  if (!qword_1001300C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001300C8);
  }
  return result;
}

unint64_t sub_1000BB70C()
{
  unint64_t result = qword_1001300D0;
  if (!qword_1001300D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001300D0);
  }
  return result;
}

unint64_t sub_1000BB75C()
{
  unint64_t result = qword_1001300D8;
  if (!qword_1001300D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001300D8);
  }
  return result;
}

unint64_t sub_1000BB7AC()
{
  unint64_t result = qword_1001300E0;
  if (!qword_1001300E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001300E0);
  }
  return result;
}

unint64_t sub_1000BB7F8()
{
  unint64_t result = qword_1001300F0;
  if (!qword_1001300F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001300F0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for XPCActivityTaskID.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for XPCActivityTaskID.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000BB930);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCActivityTaskID.CodingKeys()
{
  return &type metadata for XPCActivityTaskID.CodingKeys;
}

unint64_t sub_1000BB96C()
{
  unint64_t result = qword_100130100;
  if (!qword_100130100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100130100);
  }
  return result;
}

unint64_t sub_1000BB9BC()
{
  unint64_t result = qword_100130108;
  if (!qword_100130108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100130108);
  }
  return result;
}

unint64_t sub_1000BBA0C()
{
  unint64_t result = qword_100130110;
  if (!qword_100130110)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100130110);
  }
  return result;
}

void sub_1000BBAB0(id a1)
{
  qword_1001370B0 = [[ktSeAkOyXkmyQNgH alloc] initWithServiceName:@"com.apple.asd.scoring"];
  _objc_release_x1();
}

void sub_1000BBC64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000BBC84(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained uTtwJoGUgL3N0GVz];
}

void sub_1000BBE88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BBEA8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000BBEC4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v10 = a2;
  id v7 = a3;
  id v8 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if ([WeakRetained l7UrdRfCzeduYqtA:*(void *)(a1 + 32)]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1000BC18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BC1AC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000BC1C4(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if ([WeakRetained l7UrdRfCzeduYqtA:*(void *)(a1 + 32)]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1000BC404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BC424(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000BC440(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v8 = a3;
  id v6 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if ([WeakRetained l7UrdRfCzeduYqtA:*(void *)(a1 + 32)]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1000BC66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_1000BC68C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000BC6A4(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if ([WeakRetained l7UrdRfCzeduYqtA:*(void *)(a1 + 32)]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1000BC9B8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 152));
  _Unwind_Resume(a1);
}

uint64_t sub_1000BC9D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000BC9FC(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  id v14 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a6;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if ([WeakRetained l7UrdRfCzeduYqtA:*(void *)(a1 + 32)]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1000BCC48(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

uint64_t sub_1000BCC70(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000BCC80(uint64_t a1, void *a2)
{
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if ([WeakRetained l7UrdRfCzeduYqtA:*(void *)(a1 + 32)]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1000BCF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Block_object_dispose((const void *)(v22 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1000BCFC8(uint64_t a1, void *a2)
{
}

uint64_t sub_1000BCFD8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000BCFF0(uint64_t a1, void *a2)
{
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if ([WeakRetained l7UrdRfCzeduYqtA:*(void *)(a1 + 32)]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1000BD1EC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

uint64_t sub_1000BD214(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000BD228(uint64_t a1, void *a2)
{
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if ([WeakRetained l7UrdRfCzeduYqtA:*(void *)(a1 + 32)]) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1000BD7DC(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 16);
  id v3 = objc_retainBlock(*(id *)(a1 + 48));
  [v2 setObject:v3 forKey:*(void *)(a1 + 40)];
}

id sub_1000BD908(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 16) objectForKeyedSubscript:a1[5]];
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = v2 != 0;

  uint64_t v3 = a1[5];
  id v4 = *(void **)(a1[4] + 16);
  return [v4 removeObjectForKey:v3];
}

void sub_1000BD9DC(uint64_t a1)
{
  uint64_t v2 = +[NSString stringWithUTF8String:kCoreASErrorDomainCA];
  uint64_t v3 = +[NSError errorWithDomain:v2 code:-31 userInfo:0];

  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v4 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "allValues", 0);
  id v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      id v8 = 0;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v9 + 1) + 8 * (void)v8) + 16))();
        id v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v6);
  }

  [*(id *)(*(void *)(a1 + 32) + 16) removeAllObjects];
}

uint64_t sub_1000BE658(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 24) = os_log_create("com.apple.CoreAS", "libCoreAS");
  return _objc_release_x1();
}

void sub_1000BEC60(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(*(void *)(a1 + 32) + 24);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_1000CB4BC(v2);
  }
  id v3 = [objc_alloc((Class)off_100130248[0]()) initWithServiceIdentifier:@"com.apple.amp.all.sp.paidBuyV2" forDSIDType:0];
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 88);
  *(void *)(v4 + 8_Block_object_dispose(&a9, 8) = v3;
}

void sub_1000BECD4(void *a1)
{
  dispatch_semaphore_t v2 = dispatch_semaphore_create(0);
  id v3 = (void *)a1[4];
  uint64_t v4 = a1[5];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _OWORD v6[2] = sub_1000BED8C;
  v6[3] = &unk_100117368;
  void v6[4] = a1[6];
  dispatch_semaphore_t v7 = v2;
  id v5 = v2;
  [v3 JI0A3nkqsab9cUj8:v4 completion:v6];
  dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
}

void sub_1000BED8C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v10 = a2;
  id v8 = a3;
  id v9 = a4;
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 64), a2);
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 72), a4);
  if (v10) {
    [*(id *)(*(void *)(a1 + 32) + 16) setObject:v8 forKey:v10];
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void *sub_1000BEF2C(void *result)
{
  uint64_t v1 = result[4];
  if (!*(unsigned char *)(v1 + 8))
  {
    *(unsigned char *)(v1 + _Block_object_dispose(&a9, 8) = 1;
    uint64_t v2 = *(void *)(result[4] + 40);
    if (v2) {
      return (void *)(*(uint64_t (**)(void, void, void, void))(v2 + 16))(*(void *)(result[4] + 40), result[5], result[6], result[7]);
    }
  }
  return result;
}

void sub_1000BF14C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 72))
  {
    objc_msgSend((id)v2, "_safeCallbackWithMessage:uuid:error:", 0, 0);
    return;
  }
  id v3 = [*(id *)(v2 + 32) serverEndpointIdentifier];
  if ([v3 isEqualToString:@"enable"])
  {
    uint64_t v4 = [*(id *)(a1 + 40) nonce];

    if (!v4)
    {
      id v5 = +[NSString stringWithUTF8String:kCoreASErrorDomainCA];
      id v6 = v5;
      uint64_t v7 = -701;
LABEL_28:
      id v21 = +[NSError errorWithDomain:v6 code:v7 userInfo:0];

      [*(id *)(a1 + 32) _safeCallbackWithMessage:0 uuid:0 error:v21];

      return;
    }
  }
  else
  {
  }
  unsigned int v8 = [*(id *)(a1 + 32) isPaidBuyV2];
  uint64_t v9 = *(void *)(a1 + 32);
  if (v8)
  {
    _[(id)v9 triggerCoreODI];
  }
  else
  {
    if (!*(void *)(v9 + 64))
    {
      id v5 = +[NSString stringWithUTF8String:kCoreASErrorDomainCA];
      id v6 = v5;
      uint64_t v7 = -710;
      goto LABEL_28;
    }
    id v10 = objc_msgSend(*(id *)(v9 + 16), "objectForKey:");
    id v20 = *(id *)(a1 + 48);
    uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 64);
    long long v12 = [*(id *)(a1 + 40) hostChallenge];
    double v13 = v12;
    if (!v12)
    {
      double v13 = [*(id *)(*(void *)(a1 + 32) + 32) hostChallenge];
    }
    id v14 = [*(id *)(a1 + 40) challengeResponse];
    double v15 = v14;
    if (!v14)
    {
      double v15 = [*(id *)(*(void *)(a1 + 32) + 32) challengeResponse];
    }
    char v16 = [*(id *)(a1 + 40) seid];
    double v17 = v16;
    if (!v16)
    {
      double v17 = [*(id *)(*(void *)(a1 + 32) + 32) seid];
    }
    uint64_t v18 = [*(id *)(a1 + 40) nonce];
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    void v22[2] = sub_1000BF484;
    uint64_t v22[3] = &unk_1001173E0;
    void v22[4] = *(void *)(a1 + 32);
    id v23 = v10;
    id v19 = v10;
    [v20 QeMnG23X94qgz7jT:v11 hostChallenge:v13 challengeResponse:v15 seid:v17 nonce:v18 completion:v22];

    if (!v16) {
    if (!v14)
    }

    if (!v12) {
  }
    }
}

void sub_1000BF484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  if (!a2 || a3)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    [v4 _safeCallbackWithMessage:a2 uuid:v7 error:a3];
  }
  else
  {
    id v8 = 0;
    id v5 = [v4 VkBISyFszEu5z9lr:a2 error:&v8];
    id v6 = v8;
    [*(id *)(a1 + 32) _safeCallbackWithMessage:v5 uuid:*(void *)(a1 + 40) error:v6];
  }
}

id sub_1000BF704(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = [*(id *)(a1 + 40) consumed];
  return _[v1 provideFeedback:v2];
}

void sub_1000BF930(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = +[NSString stringWithUTF8String:kCoreASErrorDomainCA];
    v16[0] = NSLocalizedDescriptionKey;
    v16[1] = NSUnderlyingErrorKey;
    v17[0] = @"error calling getAssessment";
    v17[1] = v6;
    id v8 = +[NSDictionary dictionaryWithObjects:v17 forKeys:v16 count:2];
    id v9 = +[NSError errorWithDomain:v7 code:-810 userInfo:v8];

    id v10 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_1000CB548((uint64_t)v9, v10);
    }
    [*(id *)(a1 + 32) _safeCallbackWithMessage:0 uuid:0 error:v9];
  }
  else
  {
    uint64_t v11 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      LOWORD(v15) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Returning data", (uint8_t *)&v15, 2u);
    }
    long long v12 = +[NSUUID UUID];
    [v12 getUUIDBytes:&v15];

    id v9 = [objc_alloc((Class)NSData) initWithBytes:&v15 length:16];
    double v13 = *(void **)(a1 + 32);
    id v14 = [v5 dataUsingEncoding:4];
    [v13 _safeCallbackWithMessage:v14 uuid:v9 error:0];
  }
}

void sub_1000BFC64(uint64_t a1, void *a2)
{
  id v11 = a2;
  id v3 = [v11 firstName];

  if (v3)
  {
    uint64_t v4 = [v11 firstName];
    [*(id *)(a1 + 32) setObject:v4 forKeyedSubscript:@"firstName"];
  }
  id v5 = [v11 lastName];

  if (v5)
  {
    id v6 = [v11 lastName];
    [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:@"lastName"];
  }
  uint64_t v7 = [v11 phoneNumber];

  if (v7)
  {
    id v8 = [v11 phoneNumber];
    [*(id *)(a1 + 32) setObject:v8 forKeyedSubscript:@"phoneNumber"];
  }
  id v9 = [v11 emailAddress];

  if (v9)
  {
    id v10 = [v11 emailAddress];
    [*(id *)(a1 + 32) setObject:v10 forKeyedSubscript:@"email"];
  }
}

Class sub_1000BFF34()
{
  if (qword_1001370D8 != -1) {
    dispatch_once(&qword_1001370D8, &stru_100117478);
  }
  Class result = objc_getClass("ODISession");
  qword_1001370C8 = (uint64_t)result;
  off_100130248[0] = (uint64_t (*)())sub_1000BFF98;
  return result;
}

id sub_1000BFF98()
{
  return (id)qword_1001370C8;
}

void sub_1000BFFA4(id a1)
{
  qword_1001370D0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CoreODI.framework/CoreODI", 2);
}

Class sub_1000BFFD0()
{
  if (qword_1001370D8 != -1) {
    dispatch_once(&qword_1001370D8, &stru_100117478);
  }
  Class result = objc_getClass("ODIAdditionalAttributes");
  qword_1001370E0 = (uint64_t)result;
  off_100130250 = (uint64_t (*)())sub_1000C0034;
  return result;
}

id sub_1000C0034()
{
  return (id)qword_1001370E0;
}

void sub_1000C04CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    BOOL v3 = a3 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  int v4 = v3;
  __asm { BRAA            X8, X17 }
}

uint64_t sub_1000C052C()
{
  return 4294940294;
}

uint64_t sub_1000C0534(uint64_t a1, unsigned int a2, void *a3)
{
  *a3 = (*(uint64_t (**)(void, uint64_t))(v3 + 576))(a2, 3384187359);
  (*(void (**)(void *, unint64_t *, uint64_t))(v3 + 760))(&unk_1000DE174, &STACK[0x420], 16);
  id v5 = *(uint64_t (**)(void *))(v3 + 760);
  STACK[0x398] = v4 - 144;
  uint64_t v6 = v5(&unk_1000DDD60);
  return (*(uint64_t (**)(uint64_t))(v3
                                            + 8
                                            * ((13
                                              * ((unint64_t)((char *)&STACK[0x430] - (char *)&unk_1000DEAA0) < 0x20)) ^ 0x27u)))(v6);
}

uint64_t sub_1000C05EC@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)&STACK[0x430] = xmmword_1000DFFF0;
  *(_OWORD *)&STACK[0x440] = xmmword_1000E0000;
  *(_OWORD *)&STACK[0x450] = xmmword_1000E0010;
  *(_OWORD *)&STACK[0x460] = xmmword_1000E0020;
  *(_OWORD *)&STACK[0x470] = xmmword_1000E0030;
  *(_OWORD *)&STACK[0x480] = xmmword_1000E0040;
  *(_OWORD *)&STACK[0x490] = xmmword_1000E0050;
  *(_OWORD *)&STACK[0x4A0] = xmmword_1000E0060;
  *(_OWORD *)&STACK[0x4B0] = xmmword_1000E0070;
  *(_OWORD *)&STACK[0x4C0] = xmmword_1000E0080;
  *(_OWORD *)&STACK[0x4D0] = xmmword_1000E0090;
  *(_OWORD *)&STACK[0x4E0] = xmmword_1000E00A0;
  *(_OWORD *)&STACK[0x4F0] = xmmword_1000E00B0;
  *(_OWORD *)&STACK[0x500] = xmmword_1000E00C0;
  *(_OWORD *)&STACK[0x510] = xmmword_1000E00D0;
  *(_OWORD *)&STACK[0x520] = xmmword_1000E00E0;
  *(_OWORD *)&STACK[0x530] = xmmword_1000E00F0;
  *(_OWORD *)&STACK[0x540] = xmmword_1000E0100;
  *(_OWORD *)&STACK[0x550] = xmmword_1000E0110;
  *(_OWORD *)&STACK[0x560] = xmmword_1000E0120;
  *(_OWORD *)&STACK[0x570] = xmmword_1000E0130;
  *(_OWORD *)&STACK[0x580] = xmmword_1000E0140;
  *(_OWORD *)&STACK[0x590] = xmmword_1000E0150;
  *(_OWORD *)&STACK[0x5A0] = xmmword_1000E0160;
  *(_OWORD *)&STACK[0x5B0] = xmmword_1000E0170;
  *(_OWORD *)&STACK[0x5C0] = xmmword_1000E0180;
  *(_OWORD *)&STACK[0x5D0] = xmmword_1000E0190;
  *(_OWORD *)&STACK[0x5E0] = xmmword_1000E01A0;
  *(_OWORD *)&STACK[0x5F0] = 0u;
  *(_OWORD *)&STACK[0x600] = 0u;
  *(_OWORD *)&STACK[0x610] = 0u;
  *(_OWORD *)&STACK[0x620] = 0u;
  *(_OWORD *)&STACK[0x630] = 0u;
  *(_OWORD *)&STACK[0x640] = 0u;
  *(_DWORD *)(a1 + 544) = *(_DWORD *)(v1 + 544);
  int v4 = ((118806587 - v3) & 0xFD1595EF ^ 0x82) == 137;
  return (*(uint64_t (**)(void))(v2 + 8 * ((2 * v4) | (v4 << 6) | 0xD)))();
}

uint64_t sub_1000C07C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(v10
                              + 8 * (v9 ^ ((4 * (&a9 == (uint64_t *)-1072)) | (16 * (&a9 == (uint64_t *)-1072))))))();
}

uint64_t sub_1000C07F8@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(v3 + 8 * (int)(((((v1 ^ 7) + 67831726) & 0xFBF4F86B ^ 0x3B) * (a1 == v2)) ^ v1 ^ 7)))();
}

uint64_t sub_1000C0838()
{
  int v5 = v0 + 26;
  *(void *)(v4 - 144) = 0x951FAAEE1026D03;
  *(void *)(v4 - 136) = 0x9AAF552B875DE8C0;
  int v6 = (v0 + 26) ^ 0x2B;
  if (v1) {
    BOOL v7 = v2 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = v7;
  return (*(uint64_t (**)(void))(v3 + 8 * (((v6 + 15) * v8) ^ v5)))();
}

uint64_t sub_1000C0894()
{
  STACK[0x398] = (unint64_t)&STACK[0x420];
  if (v1) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  int v5 = v4;
  return (*(uint64_t (**)(void))(v3 + 8 * ((((v0 ^ 0x2B) + 15) * v5) ^ v0)))();
}

uint64_t sub_1000C08D0@<X0>(int a1@<W8>)
{
  unsigned int v4 = ((v2 + 1357734545) ^ 0xFD29D4E) & (2 * ((v2 + 1357734545) & 0xAF129D6F)) ^ (v2 + 1357734545) & 0xAF129D6F;
  unsigned int v5 = ((v1 - 712503020) ^ (2 * ((v2 + 1357734545) ^ 0x45D695C4))) & ((v2 + 1357734545) ^ 0x45D695C4) ^ (2 * ((v2 + 1357734545) ^ 0x45D695C4)) & 0xEAC408AA;
  unsigned int v6 = ((4 * (v5 ^ 0x2A4408A9)) ^ 0xAB1022AC) & (v5 ^ 0x2A4408A9) ^ (4 * (v5 ^ 0x2A4408A9)) & 0xEAC408A8;
  unsigned int v7 = (v6 ^ 0xAA0000A0) & (16 * ((v5 ^ 0xC0800000) & (4 * v4) ^ v4)) ^ (v5 ^ 0xC0800000) & (4 * v4) ^ v4;
  unsigned int v8 = ((16 * (v6 ^ 0x40C40803)) ^ 0xAC408AB0) & (v6 ^ 0x40C40803) ^ (16 * (v6 ^ 0x40C40803)) & 0xEAC408A0;
  unsigned int v9 = v7 ^ 0xEAC408AB ^ (v8 ^ 0xA8400800) & (v7 << 8);
  unsigned int v10 = (v2 + 1357734545) ^ (2
                           * ((v9 << 16) & 0x6AC40000 ^ v9 ^ ((v9 << 16) ^ 0x8AB0000) & (((v8 ^ 0x4284000B) << 8) & 0xEAC40000 ^ 0x2AC40000 ^ (((v8 ^ 0x4284000B) << 8) ^ 0x44080000) & (v8 ^ 0x4284000B))));
  BOOL v12 = ((2 * (v10 & 0xF ^ 0x14144808)) | 0xBBAA1134) - (v10 & 0xF ^ 0x14144808) != -1483323083 || v10 == 1805290553;
  return (*(uint64_t (**)(void))(v3 + 8 * (((a1 ^ 5 ^ ((a1 + 56) | 2)) * v12) ^ a1)))();
}

uint64_t sub_1000C0A98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(v10 + 8 * ((((v9 ^ 0x21) + 3) * (&a9 == (uint64_t *)-1072)) | v9)))();
}

uint64_t sub_1000C0ACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  uint64_t v47 = (*(uint64_t (**)(uint64_t))(v46 + 8 * (v45 + 15)))(1032);
  uint64_t v48 = (*(uint64_t (**)(uint64_t))(v46 + 8 * (v45 + 15)))(1032);
  STACK[0x380] = v47;
  STACK[0x378] = v48;
  if (v47) {
    BOOL v56 = v48 == 0;
  }
  else {
    BOOL v56 = 1;
  }
  int v57 = !v56;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 8 * ((v57 * (((v45 ^ 0x1B) - 4) ^ 4)) ^ v45)))(v48, v49, v50, v51, v52, v53, v54, v55, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45);
}

uint64_t sub_1000C0B3C()
{
  LODWORD(STACK[0x408]) = v4 >> 3;
  unsigned int v5 = (v4 >> 3) ^ 0xD735187;
  LODWORD(STACK[0x404]) = v5;
  uint64_t v6 = v1[((v0 + 60) ^ 0xA88D423B) % v5];
  unint64_t v7 = ((((v4 >> 3) ^ 0xFA7DD71E757E83ALL) - 0x7C853498ECDBE7DDLL) ^ (((v4 >> 3) ^ 0xBC7D8232869CD75)
                                                                    - 0x78E531CA23E5C292) ^ (((v4 >> 3) ^ 0x4600552C24D74C8)
                                                                                             - 0x7742ECBBC9C17B2FLL))
     + 0x7322E9E984482D8FLL;
  if (v7 < 0x7D48CF2F != (unint64_t)(v6 + 3030306715) < 0x7D48CF2F) {
    BOOL v8 = v7 < 0x7D48CF2F;
  }
  else {
    BOOL v8 = v6 + 3030306715 < v7;
  }
  unint64_t v9 = (v4 >> 3) ^ 0xD735187;
  int v10 = (v6
       - ((((v4 >> 3) ^ 0xF2ED58B59878CAE4) + 0x7E304EA36C0B3AFDLL) ^ (((v4 >> 3) ^ 0xB37863114FD9A27ELL)
                                                                       + 0x3FA57507BBAA5267) ^ (((v4 >> 3) ^ 0x41953BA4DAD2391DLL)
                                                                                                - 0x32B7D24DD15E36FALL))
       - 0x7322E9E8CFA95DF4)
      % v9;
  int v11 = (v10 ^ 0x67CF7DE7) - 1648521478 + ((2 * v10) & 0xF9EFBCE);
  if (v8) {
    int v11 = v6 + 1021513037;
  }
  unsigned int v12 = (v11 ^ 0xFB72EB1F) & (2 * (v11 & 0xFA72F31F)) ^ v11 & 0xFA72F31F;
  unsigned int v13 = ((2 * (v11 ^ 0xCFD72D19)) ^ 0x6B4BBC0C) & (v11 ^ 0xCFD72D19) ^ (2 * (v11 ^ 0xCFD72D19)) & 0x35A5DE06;
  int v14 = v13 ^ 0x14A44202;
  int v15 = (v13 ^ 0x21019C04) & (4 * v12) ^ v12;
  unsigned int v16 = ((4 * v14) ^ 0xD6977818) & v14 ^ (4 * v14) & 0x35A5DE00;
  int v17 = (v16 ^ 0x14855800) & (16 * v15) ^ v15;
  int v18 = ((16 * (v16 ^ 0x21208606)) ^ 0x5A5DE060) & (v16 ^ 0x21208606) ^ (16 * (v16 ^ 0x21208606)) & 0x35A5DE00;
  unint64_t v19 = v11 ^ (2
             * ((((v18 ^ 0x25A01E06) << 8) & 0x35A50000 ^ 0x25840000 ^ (((v18 ^ 0x25A01E06) << 8) ^ 0xA5DE0000) & (v18 ^ 0x25A01E06)) & (((v18 ^ 0x1005C000) & (v17 << 8) ^ v17) << 16) ^ (v18 ^ 0x1005C000) & (v17 << 8) ^ v17)) ^ 0x82819111F058D31DLL;
  unint64_t v20 = v1[(v1[(v1[(v19 - ((2 * v19) & 0x5012203D35393CCLL) - 0x1C1D4A741656361ALL) ^ 0x163249AE383E9E4] + 3855038535)
             % v9]
          + 3865674970)
         % v9]
      + 578455804;
  STACK[0x3F8] = v9;
  LODWORD(v20) = v20 % v9 - ((2 * (v20 % v9)) & 0x1737DBD2) + 1268510185;
  unsigned int v21 = (((v20 ^ 0x81F1505E) + 2113871245) ^ ((v20 ^ 0x77571436) - 1957078555) ^ ((v20 ^ 0xBD3DA981) + 1093919828))
      - 1494198759;
  BOOL v22 = v21 < 0x5E85F655;
  *int v2 = *v1 ^ 0x6D6D6D6D6D6D6D6DLL;
  if (v21 >= 0x5E85F655) {
    BOOL v22 = v21 > 0x5E85F656;
  }
  return (*(uint64_t (**)(void))(v3 + 8 * ((15 * !v22) ^ (v0 + 60))))();
}

uint64_t sub_1000C1084@<X0>(uint64_t a1@<X5>, unsigned int a2@<W8>)
{
  unsigned int v6 = (v2 + 1350776877) & 0xAF7CC79D;
  unsigned int v7 = (((LODWORD(STACK[0x408]) ^ 0x819E62D0) + 727381173) ^ ((LODWORD(STACK[0x408]) ^ 0x14CF84FD) - 1106570598) ^ ((LODWORD(STACK[0x408]) ^ 0x9822B7AA) + 853942735))
     + v6
     + 1114879174;
  BOOL v8 = v7 < 0xEA2B7CAA;
  *(void *)(v4 + 8 * a2) = *(void *)(v3 + 8 * a2) ^ a1;
  if (v8 == a2 - 366248789 < 0xEA2B7CAA) {
    BOOL v8 = v7 > a2 - 366248789;
  }
  return (*(uint64_t (**)(void))(v5 + 8 * (int)((53 * v8) | v6)))();
}

uint64_t sub_1000C11BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  STACK[0x390] = v6;
  if (((*(unsigned char *)(a5 + ((*(unsigned char *)(a5 + ((*(unsigned char *)(a5 + ((*(unsigned char *)(a5 + 11) + 12) & 0xF)) + 2) & 0xF)) + 6) & 0xF))
       + 10) & 0xE) != 0)
    uint64_t v8 = (*(unsigned char *)(a5
                   + ((*(unsigned char *)(a5 + ((*(unsigned char *)(a5 + ((*(unsigned char *)(a5 + 11) + 12) & 0xF)) + 2) & 0xF)) + 6) & 0xF))
        + 10) & 0xF;
  else {
    uint64_t v8 = 1;
  }
  return (*(uint64_t (**)(void))(v7 + 8 * ((103 * (v8 != 1)) ^ (v5 - 29))))();
}

uint64_t sub_1000C130C()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((99 * (v1 == 15)) ^ v0)))();
}

#error "1000C32C0: call analysis failed (funcsize=1831)"

uint64_t sub_1000C32C8@<X0>(uint64_t a1@<X0>, int a2@<W4>, uint64_t a3@<X5>, int a4@<W6>, uint64_t a5@<X7>, int a6@<W8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  int v62 = v56 - 11;
  LODWORD(a50) = LODWORD(STACK[0x330]) ^ LODWORD(STACK[0x3E8]) ^ (LODWORD(STACK[0x2E0])
                                                                + a2
                                                                + 295089407
                                                                + (LODWORD(STACK[0x3D4]) ^ LODWORD(STACK[0x200]) ^ (a6 + v60)));
  uint64_t v63 = (((LODWORD(STACK[0x408]) ^ 0xC5E51CD5) + 1864469170) ^ ((LODWORD(STACK[0x408]) ^ 0x32CC1792) - 1744272905) ^ (((v56 - 94741882) ^ LODWORD(STACK[0x408])) + 1352584357))
      + 1916659118;
  BOOL v64 = v63 < 0x19F5AD92;
  unint64_t v65 = 0x418B018541479FA3
      * (((*(void *)(STACK[0x390] + 8 * v58) + (*(void *)(STACK[0x390] + 8 * v58) ^ 0x9292929292929292) + 1) ^ 0xFFFFFFFFFFFFFFFELL)
       + *(void *)(STACK[0x390] + 8 * v58));
  unint64_t v66 = (v65 ^ v59) + v58 - (((v65 ^ v59) + v58) >> 32);
  unint64_t v67 = v66 - (v66 >> ((v56 - 47) ^ 0x1Bu)) - ((v66 - (v66 >> ((v56 - 47) ^ 0x1Bu))) >> 8);
  int v68 = (v67 + a1) ^ a4;
  unint64_t v69 = ((v67 + v57) ^ v65) + v58 - ((((v67 + v57) ^ v65) + v58) >> 32);
  unint64_t v70 = v69 - (v69 >> 16) - ((v69 - (v69 >> 16)) >> 8);
  unint64_t v71 = ((v70 + v57) ^ v65) + v58 - ((((v70 + v57) ^ v65) + v58) >> 32);
  uint64_t v72 = v68 ^ (v70 + a1) ^ (v71
                                          - (v71 >> 16)
                                          - ((v71 - (v71 >> 16)) >> 8)
                                          + a1);
  unsigned int v73 = v58 + 1;
  uint64_t v74 = v64 ^ (v73 >= 0xE60A526E);
  if (!v74) {
    BOOL v64 = v73 + 435531154 < v63;
  }
  Swift::String v75 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v61 + 8 * ((21 * v64) ^ v62));
  HIDWORD(a45) = LODWORD(STACK[0x348]) ^ 0x2AE252BD;
  return v75(a1, v75, 0x418B018541479FA3, v74, v63, a3, v72, a5, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17,
           a18,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56);
}

uint64_t sub_1000C34B8@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  if (((*(unsigned char *)(v3
                  + ((*(unsigned char *)(v3
                               + ((*(unsigned __int8 *)(v3 + ((*(unsigned char *)(v3 + 2) + 13) & 0xF)) + 2) & 0xFLL))
                    + 3) & 0xF))
       + 1) & 0xE) != 0)
    uint64_t v4 = (*(unsigned char *)(v3
                   + ((*(unsigned char *)(v3
                                + ((*(unsigned __int8 *)(v3 + ((*(unsigned char *)(v3 + 2) + 13) & 0xF)) + 2) & 0xFLL))
                     + 3) & 0xF))
        + 1) & 0xF;
  else {
    uint64_t v4 = 1;
  }
  return (*(uint64_t (**)(uint64_t, void))(v2 + 8 * ((25 * (v4 == 1)) ^ a2)))(a1, (a2 - 8));
}

uint64_t sub_1000C3A84(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(void))(v3 + 8 * (a2 | (4 * (v2 != 15)))))();
}

uint64_t sub_1000C3B1C(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  int v68 = (a2 - 2) | 0x18;
  unsigned int v69 = (a3 ^ 0xCF39C5D0) - ((a3 ^ 0xCF39C5D0) >> 13) + (((a3 ^ 0xCF39C5D0) - ((a3 ^ 0xCF39C5D0) >> 13)) >> 5);
  unsigned int v70 = (v68 ^ 0xF9901316) + v69 - (((v68 ^ 0xF9901316) + v69) >> 10);
  unsigned int v71 = v70 - (v70 >> 2);
  int v72 = v69 ^ v62;
  unsigned int v73 = v71 ^ 0xF30576F9;
  int v74 = v71 ^ v65;
  unsigned int v75 = v73 + (v73 >> 14) - ((v73 + (v73 >> 14)) >> 2);
  unsigned int v76 = v75 + 511487013 + ((v75 + 511487013) >> 15) + ((v75 + 511487013 + ((v75 + 511487013) >> 15)) >> 3);
  unsigned int v77 = (v72 ^ -v72 ^ (v76 - (v76 ^ v72))) + v76;
  unsigned int v78 = (v76 ^ 0x5985AE2F) - ((v76 ^ 0x5985AE2F) >> 10) + (((v76 ^ 0x5985AE2F) - ((v76 ^ 0x5985AE2F) >> 10)) >> 7);
  int v79 = v74 ^ v78;
  unsigned int v80 = v78 - 787086048 - ((v78 - 787086048) >> 9) + ((v78 - 787086048 - ((v78 - 787086048) >> 9)) >> 5);
  unsigned int v81 = v80 - 1168002143 - ((v80 - 1168002143) >> 14) + ((v80 - 1168002143 - ((v80 - 1168002143) >> 14)) >> 4);
  int v82 = v81 ^ v77;
  unsigned int v83 = v81 - 879085134 + ((v81 - 879085134) >> 10) - ((v81 - 879085134 + ((v81 - 879085134) >> 10)) >> 5);
  unsigned int v84 = v79 ^ v83;
  unsigned int v85 = v82 ^ 2 | v82 & 0x9A38B5A8;
  unsigned int v86 = v75 ^ v64 ^ v80 ^ (v83
                         + 1300749569
                         - ((v83 + 1300749569) >> 9)
                         - ((v83 + 1300749569 - ((v83 + 1300749569) >> 9)) >> 4));
  unint64_t v87 = (((v75 ^ v64 ^ v80 ^ (v83
                                             + 1
                                             - ((v83 + 1300749569) >> 9)
                                             - ((v83 + 1300749569 - ((v83 + 1300749569) >> 9)) >> 4))) ^ 4)
       + 1) & 7;
  int v88 = v86 & 7 ^ 3;
  LODWORD(STACK[0x354]) = v88;
  BOOL v89 = v88 == 0;
  if (v88) {
    int v90 = 255;
  }
  else {
    int v90 = 0;
  }
  STACK[0x2A8] = v87;
  int v91 = v90 << v87;
  int v92 = v91;
  int v93 = 16843009 * v91;
  if (v89) {
    unsigned __int8 v94 = 0;
  }
  else {
    unsigned __int8 v94 = ~(_BYTE)v91;
  }
  uint64_t v95 = (~v93 - v93) ^ 0xFFFFFFFE;
  uint64_t v96 = (1929379840 * v92) & v84;
  uint64_t v97 = v67[0xB4C2D96D % LODWORD(STACK[0x404])];
  LODWORD(STACK[0x328]) = v84;
  LODWORD(v97) = ((v67[((v67[((v67[((v97 ^ 0x6D6D6D6D6D6D6D6DuLL) + 2986301921u) % STACK[0x3F8]] ^ 0x6D6D6D6D6D6D6D6DuLL)
                            + 2923655298u)
                           % STACK[0x3F8]] ^ 0x6D6D6D6D6D6D6D6DuLL)
                      + 2008708959)
                     % STACK[0x3F8]] ^ 0x6D6D6D6D6D6D6D6DuLL)
                + 3811120295u)
               % STACK[0x3F8];
  int v98 = 16843009
      * (v84 ^ 0x88 ^ ((unsigned __int16)(v84 ^ 0x5B88) >> 8) ^ ((v84 ^ 0x74325B88) >> 16) ^ HIBYTE(v84) ^ 0x71);
  LODWORD(STACK[0x3E0]) = (16843009
                         * (v85 ^ 0xBB ^ ((unsigned __int16)(v85 ^ 0x2BB) >> 8) ^ ((v85 ^ 0x247F02BB) >> 16) ^ HIBYTE(v85) ^ 0x48)) ^ 0x69696969 ^ v98;
  uint64_t v99 = (v97 - ((2 * v97) & 0xA49F8CA) - 1524302747) ^ 0xA524FC65;
  LODWORD(STACK[0x250]) = v98 ^ 0x5050505;
  int v100 = LODWORD(STACK[0x318]) ^ 0x14BE8117;
  LODWORD(STACK[0x40C]) = v85;
  LODWORD(STACK[0x314]) = v85 & 0xFFFFFF01;
  LODWORD(STACK[0x3EC]) = v86;
  BOOL v101 = v99 > 0x1AE6B61D;
  uint64_t v102 = 0x418B018541479FA3 * (*v67 ^ 0x6D6D6D6D6D6D6D6DLL);
  uint64_t v103 = (v102 ^ 0x177943424141AE0BLL)
       - ((v102 ^ 0x177943424141AE0BuLL) >> 32)
       - (((v102 ^ 0x177943424141AE0BLL) - ((v102 ^ 0x177943424141AE0BuLL) >> 32)) >> 16)
       - (((v102 ^ 0x177943424141AE0BLL)
         - ((v102 ^ 0x177943424141AE0BuLL) >> 32)
         - (((v102 ^ 0x177943424141AE0BLL) - ((v102 ^ 0x177943424141AE0BuLL) >> 32)) >> 16)) >> (((v68 - 8) | 0x20u) - 41))
       + v63;
  int v104 = v103 ^ v100;
  uint64_t v105 = (v103 ^ v102)
       - ((v103 ^ (unint64_t)v102) >> 32)
       - (((v103 ^ v102) - ((v103 ^ (unint64_t)v102) >> 32)) >> 16)
       - (((v103 ^ v102)
         - ((v103 ^ (unint64_t)v102) >> 32)
         - (((v103 ^ v102) - ((v103 ^ (unint64_t)v102) >> 32)) >> 16)) >> 8)
       + v63;
  int v106 = v104 ^ v105;
  uint64_t v107 = (v105 ^ v102)
       - ((v105 ^ (unint64_t)v102) >> 32)
       - (((v105 ^ v102) - ((v105 ^ (unint64_t)v102) >> 32)) >> 16)
       - (((v105 ^ v102)
         - ((v105 ^ (unint64_t)v102) >> 32)
         - (((v105 ^ v102) - ((v105 ^ (unint64_t)v102) >> 32)) >> 16)) >> 8)
       + v63;
  uint64_t v108 = v106 ^ v107;
  if (v99 <= 0x1AE6B61D) {
    BOOL v101 = (v99 - 451327518) > 0xE51949E3;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 8 * ((93 * v101) ^ v68)))(a1, v108, v96, v99, v107, 0x6D6D6D6D6D6D6D6DLL, v95, (v85 ^ 2u) & v94, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61,
           a62);
}

void sub_1000C3F44()
{
}

uint64_t sub_1000C3F4C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, int a6@<W6>, int a7@<W7>, int a8@<W8>)
{
  LODWORD(STACK[0x334]) = (a6 + a8) ^ a7;
  unsigned int v12 = (((LODWORD(STACK[0x408]) ^ 0xB3C2264A) + 419868719) ^ ((LODWORD(STACK[0x408]) ^ 0x11E19BDF) - 1155199556) ^ (((v10 - 1353651231) ^ LODWORD(STACK[0x408])) + 93616759))
      - 340330973;
  BOOL v13 = v12 < 0x936EBE07;
  uint64_t v14 = 0x418B018541479FA3 * ((17 * ((v10 + 20) ^ 0x47u)) ^ (a5 - 30) ^ *(void *)(STACK[0x390] + 8 * v8));
  unint64_t v15 = (v14 ^ a4) + v8 - (((v14 ^ a4) + (unint64_t)v8) >> 32);
  unint64_t v16 = v15 - (v15 >> 16) - ((v15 - (v15 >> 16)) >> 8);
  unint64_t v17 = ((v16 + v9) ^ v14) + v8 - ((((v16 + v9) ^ v14) + v8) >> 32);
  unint64_t v18 = v17 - (v17 >> 16) - ((v17 - (v17 >> 16)) >> 8);
  unint64_t v19 = ((v18 + v9) ^ v14) + v8 - ((((v18 + v9) ^ v14) + v8) >> 32);
  unint64_t v20 = v19 - (v19 >> 16) - ((v19 - (v19 >> 16)) >> 8);
  uint64_t v21 = (v16 + v9) ^ a2 ^ (v18 + v9) ^ ((v9 & (2
                                                                                           * (v20 + 1238975257)))
                                                                      + ((v20 + 1238975257) ^ 0x49D94319));
  if (v13 == v8 - 1821458936 < 0x936EBE07) {
    BOOL v13 = v12 > v8 - 1821458936;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v11
                                                                                + 8 * ((v13 | (2 * v13)) ^ (v10 + 20))))(a1, v21, a3, 0x89751B1549D94319);
}

uint64_t sub_1000C40F4()
{
  LODWORD(STACK[0x24C]) = v0 ^ 0x6C6C6C6C;
  if (((*(unsigned char *)(v3
                  + ((*(unsigned char *)(v3
                               + ((*(unsigned char *)(v3 + ((*(unsigned __int8 *)(v3 + 7) + 5) & 0xFLL)) + 9) & 0xF))
                    + 9) & 0xF))
       + 7) & 0xE) != 0)
    uint64_t v4 = (*(unsigned char *)(v3
                   + ((*(unsigned char *)(v3
                                + ((*(unsigned char *)(v3 + ((*(unsigned __int8 *)(v3 + 7) + 5) & 0xFLL)) + 9) & 0xF))
                     + 9) & 0xF))
        + 7) & 0xF;
  else {
    uint64_t v4 = 1;
  }
  return (*(uint64_t (**)(uint64_t))(v2 + 8 * ((39 * (v4 != 1)) ^ (v1 - 1585224797) & 0x5E7C9C3Fu)))(1236720864);
}

void sub_1000C4408()
{
}

uint64_t sub_1000C4410@<X0>(int a1@<W2>, int a2@<W6>, int a3@<W8>)
{
  STACK[0x410] = 1302115035;
  LODWORD(STACK[0x29C]) = a1 ^ a3;
  return (*(uint64_t (**)(void))(v4 + 8 * ((v3 == 15) | (16 * (v3 == 15)) | (a2 + 69889606))))();
}

void sub_1000C459C()
{
}

#error "1000C4DB0: call analysis failed (funcsize=450)"

uint64_t sub_1000C4DB8(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int v76 = (a3 - 42) | 0x18;
  LODWORD(STACK[0x330]) = a68 ^ a48;
  LODWORD(STACK[0x21C]) ^= LODWORD(STACK[0x300]) ^ STACK[0x348] ^ (STACK[0x2A8] | (STACK[0x348] << 6));
  LODWORD(STACK[0x210]) ^= a50 ^ HIDWORD(a50) ^ a1 ^ LODWORD(STACK[0x208]) ^ (HIDWORD(a48) << (((a3 - 42) | 0x18) - 53));
  LODWORD(STACK[0x300]) = a69 ^ a49 ^ v74 & STACK[0x2F8] ^ 0x184832E0;
  unsigned int v77 = (((LODWORD(STACK[0x408]) ^ 0xE1D4BBA2) + 1259351495) ^ ((LODWORD(STACK[0x408]) ^ 0x74969F81) - 565048858) ^ ((LODWORD(STACK[0x408]) ^ 0x983175A4) + 854975425))
      - 204021315;
  LODWORD(STACK[0x208]) = LODWORD(STACK[0x2FC]) ^ (8 * HIDWORD(a49));
  BOOL v78 = v77 < 0x9B8EA9A1;
  uint64_t v79 = 0x418B018541479FA3 * (*(void *)(v71 + 8 * a7) ^ v75);
  unint64_t v80 = (v79 ^ v69) + a7 - (((v79 ^ v69) + (unint64_t)a7) >> 32);
  uint64_t v81 = v80 - (v80 >> 16) - ((v80 - (v80 >> 16)) >> ((v76 + 2) ^ 0x33u)) + v70;
  unint64_t v82 = (v81 ^ v79) + a7 - (((v81 ^ v79) + (unint64_t)a7) >> 32);
  unint64_t v83 = v82 - (v82 >> 16) - ((v82 - (v82 >> 16)) >> 8);
  uint64_t v84 = v73 & ((v83 + a4) >> 1);
  unint64_t v85 = ((v83 + v70) ^ v79) + a7 - ((((v83 + v70) ^ v79) + a7) >> 32);
  uint64_t v86 = a7 + 1;
  uint64_t v87 = v78 ^ ((v86 - 1685149279) < 0x9B8EA9A1);
  if (!v87) {
    BOOL v78 = v77 > (int)v86 - 1685149279;
  }
  return (*(uint64_t (**)(unint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 8 * ((97 * v78) ^ v76)))(v85 - (v85 >> 16) - ((v85 - (v85 >> 16)) >> 8), 2609818017, (v76 + 2), a4, v87, v84, v86, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54);
}

uint64_t sub_1000C5068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  LODWORD(a5_Block_object_dispose(&a9, 8) = a58 + LODWORD(STACK[0x308]);
  LODWORD(STACK[0x2FC]) = 16 * v63;
  LODWORD(STACK[0x200]) ^= HIDWORD(a55) ^ a51 ^ HIDWORD(a53);
  LODWORD(STACK[0x308]) = a54 + LODWORD(STACK[0x30C]);
  LODWORD(STACK[0x30C]) = LODWORD(STACK[0x3A0]) ^ 0xED35EB3F ^ (2093737731 * HIDWORD(a51));
  unint64_t v67 = a1
      - 0x373B377CD11039CBLL
      + ((unint64_t)(a1 - 0x373B377CD11039CBLL) >> 28)
      + ((a1 - 0x373B377CD11039CBLL + ((unint64_t)(a1 - 0x373B377CD11039CBLL) >> 28)) >> 11);
  uint64_t v68 = (v67 >> 7) + v67 - 2 * (v67 >> 7);
  unint64_t v69 = v68
      - 0x13AFA5FA8FB17A6
      + ((unint64_t)(v68 - 0x13AFA5FA8FB17A6) >> 29)
      - ((v68 - 0x13AFA5FA8FB17A6 + ((unint64_t)(v68 - 0x13AFA5FA8FB17A6) >> 29)) >> 8);
  unint64_t v70 = v69 + (v69 >> 6);
  unint64_t v71 = v70
      + 0x47CBE9EA4DE0F1B7
      - ((v70 + 0x47CBE9EA4DE0F1B7) >> 28)
      + ((v70 + 0x47CBE9EA4DE0F1B7 - ((v70 + 0x47CBE9EA4DE0F1B7) >> 28)) >> 8);
  unint64_t v72 = v71
      + (v71 >> 7)
      - 0x25953151116B048ALL
      + ((v71 + (v71 >> 7) - 0x25953151116B048ALL) >> 29)
      - ((v71 + (v71 >> 7) - 0x25953151116B048ALL + ((v71 + (v71 >> 7) - 0x25953151116B048ALL) >> 29)) >> 14);
  unint64_t v73 = v72
      - (v72 >> 7)
      - 0x10BF2422B96631C1
      - ((v72 - (v72 >> 7) - 0x10BF2422B96631C1) >> 28)
      + ((v72 - (v72 >> 7) - 0x10BF2422B96631C1 - ((v72 - (v72 >> 7) - 0x10BF2422B96631C1) >> 28)) >> 8);
  unint64_t v74 = v73 + (v73 >> 8);
  unint64_t v75 = (v74 ^ 0xF929F7F6E1EC1FCELL)
      + ((v74 ^ 0xF929F7F6E1EC1FCELL) >> 26)
      + (((v74 ^ 0xF929F7F6E1EC1FCELL) + ((v74 ^ 0xF929F7F6E1EC1FCELL) >> 26)) >> 14);
  unint64_t v76 = v75
      + (v75 >> 6)
      - 0x70FE5FCAA42AEA45
      - ((v75 + (v75 >> 6) - 0x70FE5FCAA42AEA45) >> 26)
      - ((v75 + (v75 >> 6) - 0x70FE5FCAA42AEA45 - ((v75 + (v75 >> 6) - 0x70FE5FCAA42AEA45) >> 26)) >> 13);
  unint64_t v77 = ((v76 - (v76 >> 3)) ^ 0x48CFA99F8FD15905)
      - (((v76 - (v76 >> 3)) ^ 0x48CFA99F8FD15905) >> 28)
      - ((((v76 - (v76 >> 3)) ^ 0x48CFA99F8FD15905) - (((v76 - (v76 >> 3)) ^ 0x48CFA99F8FD15905) >> 28)) >> 11);
  int v78 = v74 ^ v70 ^ v62 ^ ((v74 ^ v70) >> 1) & 0x55DF6EBA ^ v65 & ((v77
                                                                                              + (v77 >> 4)) >> 1) ^ (v77 + (v77 >> 4));
  if (((v66[(v66[(v66[(v66[13] + 8) & 0xF] + 6) & 0xF] + 7) & 0xF] + 11) & 0xE) != 0) {
    uint64_t v79 = (v66[(v66[(v66[(v66[13] + 8) & 0xF] + 6) & 0xF] + 7) & 0xF] + 11) & 0xF;
  }
  else {
    uint64_t v79 = 1;
  }
  unsigned int v80 = *v66 * ((a3 ^ 0xFBD591FD) + 1973706621);
  unint64_t v81 = (unint64_t)((v80 ^ 0x19226648) + ((v80 ^ 0x19226648) >> 16)) >> 8;
  uint64_t v82 = (v80 ^ 0x19226648) - 651057517 + ((v80 ^ 0x19226648) >> 16) + v81;
  int v83 = (v80 ^ 0x19226648) - 1302115034 + ((v80 ^ 0x19226648) >> 16) + v81;
  unint64_t v84 = (unint64_t)((v83 ^ v80) + ((v83 ^ v80) >> 16)) >> 8;
  unsigned int v85 = (v83 ^ v80) - 651057517 + ((v83 ^ v80) >> 16) + v84;
  uint64_t v86 = ((v83 ^ v80) - 1302115034 + ((v83 ^ v80) >> 16) + v84) ^ v80;
  unint64_t v87 = (unint64_t)v86 >> 16;
  unint64_t v88 = (unint64_t)(v86 + WORD1(v86)) >> 8;
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, void, void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 8 * (int)(((2 * (v79 == 1)) | (4 * (v79 == 1))) ^ a3)))(v86, 0, a3, a4, (v86 - 1302115034 + v87 + v88), (v85 >> 1) & 0x55DF6EBA, v82 ^ v78 ^ (v82 >> 1) & 0x55DF6EBA ^ v85 ^ (v85 >> 1) & 0x55DF6EBA ^ (v86 - 651057517 + v87 + v88) ^ ((v86 - 651057517 + v87 + v88) >> 1) & 0x55DF6EBA, v82, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61,
           a62);
}

uint64_t sub_1000C542C@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X3>, int a4@<W6>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  STACK[0x3A0] = v69;
  LODWORD(STACK[0x32C]) = a65 ^ ~HIDWORD(a53);
  LODWORD(STACK[0x2F8]) = a54 ^ LODWORD(STACK[0x38C]);
  LODWORD(STACK[0x310]) ^= a66;
  int v72 = 1903817027 * *(unsigned __int8 *)(v70 + a5);
  unsigned int v73 = v72 ^ (v71 + a1 + ((a1 + a2) >> 16) + ((a1 + a2 + ((a1 + a2) >> 16)) >> 8) + v66 - 1);
  uint64_t v74 = (a5 - 651057517);
  unsigned int v75 = v74 + v73 + ((v73 + a5) >> 16) + ((v73 + a5 + ((v73 + a5) >> 16)) >> 8);
  unsigned int v76 = ((2 * v75) & 0xB2634D26) + (v75 ^ 0xD931A693);
  unint64_t v77 = (unint64_t)((v76 ^ v72) + a5 + (((v76 ^ v72) + a5) >> 16)) >> 8;
  unsigned int v78 = v74 + (v76 ^ v72) + (((v76 ^ v72) + a5) >> 16) + v77;
  LODWORD(v77) = (a5 - 1302115034 + (v76 ^ v72) + (((v76 ^ v72) + a5) >> 16) + v77) ^ v72;
  unint64_t v79 = (v77 + a5);
  unint64_t v80 = v79 >> 16;
  unint64_t v81 = (unint64_t)(v79 + WORD1(v79)) >> 8;
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, void, unint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(STACK[0x3A0] + 8 * ((a5 != 15) | (16 * (a5 != 15)) | (v68 + 69889598))))((a5 - 1302115034 + v77 + v80 + v81), 1302115034, -651057517, a3, 3 * (v68 ^ 0xFBD591D7), v80, v75 ^ a4 ^ v67 & (v75 >> 1) ^ v78 ^ v67 & (v78 >> 1) ^ (v74 + v77 + v80 + v81) ^ v67 & ((v74 + v77 + v80 + v81) >> 1), v74, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16,
           a17,
           a18,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56);
}

void sub_1000C5650()
{
}

uint64_t sub_1000C5668@<X0>(int a1@<W1>, int a2@<W4>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unsigned int v69 = (a3 + ((v67 + v66) >> 16) + v67 + ((v67 + v66 + ((v67 + v66) >> 16)) >> 8) - a1) ^ 0xCF39C5D0;
  int v70 = ((*(void *)(STACK[0x390]
                    + 8
                    * (((*(void *)(STACK[0x390]
                                   + 8
                                   * (((*(void *)(STACK[0x390]
                                                  + 8
                                                  * (((*(void *)(STACK[0x390]
                                                                 + 8 * (0x791DF2FAu % LODWORD(STACK[0x404]))) ^ 0x6D6D6D6D6D6D6D6DuLL)
                                                    + 2126161460)
                                                   % STACK[0x3F8])) ^ 0x6D6D6D6D6D6D6D6DuLL)
                                     + 2993841644u)
                                    % STACK[0x3F8])) ^ 0x6D6D6D6D6D6D6D6DuLL)
                      + 2220923829u)
                     % STACK[0x3F8])) ^ 0x6D6D6D6D6D6D6D6DuLL)
       + 1951303181)
      % STACK[0x3F8];
  LODWORD(STACK[0x3F8]) = ((v69 - (v69 >> 13)) >> (((a2 - 117) & 0x47) - 1)) + v69 - (v69 >> 13);
  unsigned int v71 = (v70 - ((2 * v70) & 0x3C890E0C) - 1102805242) ^ 0xBE448706;
  int v72 = STACK[0x318];
  LODWORD(STACK[0x404]) = a65 ^ LODWORD(STACK[0x3F0]);
  unsigned int v73 = v72 ^ LODWORD(STACK[0x3EC]) ^ 0x5879B4F0;
  LODWORD(STACK[0x318]) = v73;
  LODWORD(STACK[0x324]) = v65 & (v73 >> 1);
  BOOL v74 = v71 > 0x7AF340BF;
  if (v71 <= 0x7AF340BF) {
    BOOL v74 = v71 - 2062762176 > 0x850CBF41;
  }
  return (*(uint64_t (**)(uint64_t))(v68 + 8 * (int)((53 * v74) ^ (a2 + 1562391435) & 0xA2DFCC47)))(3141127236);
}

uint64_t sub_1000C5A7C@<X0>(uint64_t a1@<X3>, int a2@<W4>, uint64_t a3@<X6>, int a4@<W8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v75 = (a2 + 13);
  LODWORD(STACK[0x3F8]) ^= a66 ^ HIDWORD(a44) ^ a65 ^ HIDWORD(a54) ^ a52 ^ v73 ^ HIDWORD(a46) ^ a46 ^ HIDWORD(a45) & v68 ^ 0x7BE8B087;
  unsigned int v76 = (((LODWORD(STACK[0x408]) ^ 0xA0D707E7) + 169054596) ^ ((LODWORD(STACK[0x408]) ^ 0x52B52E1C) - 126764935) ^ ((LODWORD(STACK[0x408]) ^ 0xFF11787C) + 1440083453 + v75))
      - 862621162;
  int v77 = v69 + a4;
  BOOL v78 = v76 < 0x744D39FA;
  uint64_t v79 = 0x418B018541479FA3 * (*(void *)(v74 + 8 * v69) ^ 0x6D6D6D6D6D6D6D6DLL);
  unint64_t v80 = (v79 ^ v70) + v69 - (((v79 ^ v70) + (unint64_t)v69) >> (((a2 + 1) | 4u) + 12));
  uint64_t v81 = v80 - (v80 >> 16) - ((v80 - (v80 >> 16)) >> 8) + v67;
  int v82 = v66 & (v81 >> 1) ^ v81 ^ v72;
  unint64_t v83 = (v81 ^ v79) + v69 - (((v81 ^ v79) + (unint64_t)v69) >> 32);
  uint64_t v84 = v83 - (v83 >> 16) - ((v83 - (v83 >> 16)) >> 8) + v67;
  unsigned int v85 = v66 & (v84 >> 1) ^ v84;
  uint64_t v86 = v78 ^ ((v77 + 797378118) < 0x744D39FA);
  if (!v86) {
    BOOL v78 = v76 > v77 + 797378118;
  }
  unint64_t v87 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v71 + 8 * (int)((57 * v78) ^ v75));
  HIDWORD(a45) = a45 & v68;
  return v87(57, v75, 1951218170, a1, v87, v82 ^ v85, a3, v86, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15,
           a16,
           a17,
           a18,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56);
}

void sub_1000C5CEC()
{
}

uint64_t sub_1000C5CF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49,int a50,uint64_t a51,int a52,int a53,uint64_t a54,int a55,int a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,int a62)
{
  int v64 = LODWORD(STACK[0x230]) ^ LODWORD(STACK[0x328]) ^ a7;
  LODWORD(STACK[0x230]) = a62 ^ LODWORD(STACK[0x3DC]) ^ 0xF7F7F7F7;
  LODWORD(STACK[0x408]) = v64 ^ a56 ^ a53 ^ a52 ^ a50 ^ 0xA6766605;
  if (((*(unsigned char *)(STACK[0x398]
                  + ((*(unsigned char *)(STACK[0x398]
                               + ((*(unsigned char *)(STACK[0x398] + ((*(unsigned char *)(STACK[0x398] + 1) + 14) & 0xF)) + 1) & 0xF))
                    + 6) & 0xF))
       + 12) & 0xE) != 0)
    uint64_t v65 = (*(unsigned char *)(STACK[0x398]
                    + ((*(unsigned char *)(STACK[0x398]
                                 + ((*(unsigned char *)(STACK[0x398] + ((*(unsigned char *)(STACK[0x398] + 1) + 14) & 0xF)) + 1) & 0xF))
                      + 6) & 0xF))
         + 12) & 0xF;
  else {
    uint64_t v65 = 1;
  }
  return (*(uint64_t (**)(void))(v62 + 8 * ((69 * (v65 == 1)) ^ v63)))();
}

uint64_t sub_1000C6084@<X0>(int a1@<W2>, uint64_t a2@<X4>, int a3@<W6>, int a4@<W8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  int v63 = 1903817027 * *(unsigned __int8 *)(v60 + v58);
  unsigned int v64 = v63 ^ (v62
             + a4
             + ((a4 + v57) >> 16)
             + ((a4 + v57 + ((a4 + v57) >> 16)) >> 8)
             + a1
             - 1);
  int v65 = v58 + v62;
  unsigned int v66 = v58
      + v62
      + v64
      + ((v64 + v58) >> 16)
      + ((v64 + v58 + ((v64 + v58) >> 16)) >> 8);
  unsigned int v67 = v58
      + v62
      + (v66 ^ v63)
      + (((v66 ^ v63) + v58) >> 16)
      + (((v66 ^ v63) + v58 + (((v66 ^ v63) + v58) >> 16)) >> 8);
  int v68 = v67 ^ v63;
  unint64_t v69 = (v67 ^ v63) + v58;
  unint64_t v70 = v69 >> 16;
  unint64_t v71 = (unint64_t)(v69 + WORD1(v69)) >> 8;
  return (*(uint64_t (**)(void, void, uint64_t, unint64_t, uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(STACK[0x3A0] + 8 * ((74 * (v58 == 15)) ^ (v59 + 69889625))))((v65 + v68 + v70 + v71), v58, 74, STACK[0x410] - 1, a2, v60, v66 ^ a3 ^ a2 & (v66 >> 1) ^ v67 ^ a2 & (v67 >> 1) ^ (v65+ v68+ v70+ v71) ^ a2 & ((v65 + v68 + v70 + v71) >> 1), a2 & ((v58 + v61 + v68 + v70 + v71) >> 1), a5, a6, a7, a8, a9, a10, a11, a12,
           a13,
           a14,
           a15,
           a16,
           a17,
           a18,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57);
}

void sub_1000C6250(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  STACK[0x410] = a4;
  JUMPOUT(0x1000C60D0);
}

uint64_t sub_1000C626C@<X0>(int a1@<W1>, int a2@<W3>, uint64_t a3@<X4>, uint64_t a4@<X6>, int a5@<W8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unsigned int v68 = (v65 + ((a5 + a1) >> 16) + a5 + ((a5 + a1 + ((a5 + a1) >> 16)) >> 8) - a2) ^ 0xCF39C5D0;
  unsigned int v69 = v68 - (v68 >> 13) + ((v68 - (v68 >> 13)) >> 5);
  unsigned int v70 = v69 - 107998449 - ((v69 - 107998449) >> 10) - ((v69 - 107998449 - ((v69 - 107998449) >> 10)) >> 2);
  unsigned int v71 = (v70 ^ 0xF30576F9) + ((v70 ^ 0xF30576F9) >> 14) - (((v70 ^ 0xF30576F9) + ((v70 ^ 0xF30576F9) >> 14)) >> 2);
  unsigned int v72 = v71 + 511487013 + ((v71 + 511487013) >> 15) + ((v71 + 511487013 + ((v71 + 511487013) >> 15)) >> 3);
  uint64_t v73 = (v72 ^ 0x5985AE2F) - ((v72 ^ 0x5985AE2F) >> 10) + (((v72 ^ 0x5985AE2F) - ((v72 ^ 0x5985AE2F) >> 10)) >> 7);
  int v74 = v73
      - 787086048
      - ((v73 - 787086048) >> 9)
      + ((v73 - 787086048 - ((v73 - 787086048) >> 9)) >> 5);
  unsigned int v75 = v74
      - 1168002143
      - ((v74 - 1168002143) >> 14)
      + ((v74 - 1168002143 - ((v74 - 1168002143) >> 14)) >> 4);
  unsigned int v76 = v75 - 879085134 + ((v75 - 879085134) >> 10) - ((v75 - 879085134 + ((v75 - 879085134) >> 10)) >> 5);
  LODWORD(a51) = a3 & (LODWORD(STACK[0x310]) >> 1);
  HIDWORD(a50) = a3 & (HIDWORD(a52) >> 1);
  LODWORD(a56) = v70;
  HIDWORD(v8_Block_object_dispose(&a9, 8) = (((v73 ^ 0x903F3380) + (v73 | 0x6FC0CC7F) + 1) ^ v70 & 0x6FC0CC7E) >> 1;
  int v77 = a3 & (v75 >> 1) ^ v75;
  LODWORD(a53) = v66 ^ v69 ^ v72 ^ a3 & ((v72 ^ v69) >> 1);
  HIDWORD(a52) = v77 ^ a53;
  LODWORD(v8_Block_object_dispose(&a9, 8) = -v77;
  HIDWORD(v87) = v76 & 0x6FC0CC7F;
  LODWORD(v87) = !(((_BYTE)v73
                  + 32
                  - ((v73 - 787086048) >> 9)
                  + ((v73 - 787086048 - ((v73 - 787086048) >> 9)) >> 5)) & 1);
  int v78 = STACK[0x318];
  LODWORD(STACK[0x410]) = v71;
  LODWORD(STACK[0x318]) = v74;
  HIDWORD(a55) = v76 + 1300749569 - ((v76 + 1300749569) >> 9) - ((v76 + 1300749569 - ((v76 + 1300749569) >> 9)) >> 4);
  HIDWORD(a46) = (v74 ^ v71 ^ v78 ^ HIDWORD(a55)) >> 1;
  uint64_t v79 = (LODWORD(STACK[0x250]) ^ LODWORD(STACK[0x24C]));
  int v80 = STACK[0x328];
  unsigned int v81 = (v67 + 27) ^ 0x9B67EC7F ^ *((_DWORD *)*(&off_1001177E0 + (v67 ^ 0x12)) + 232);
  LODWORD(v82) = __ROR4__(0, 20) ^ 0xAE6F4F2C;
  HIDWORD(v82) = v82;
  uint64_t v83 = LODWORD(STACK[0x38C]);
  uint64_t v84 = 4 * (LOBYTE(STACK[0x250]) ^ LOBYTE(STACK[0x24C]));
  *(_DWORD *)(STACK[0x378] + v84) = a65 ^ LODWORD(STACK[0x314]) ^ 0xE00D27BF ^ ((((v81 ^ ((v81 & STACK[0x344]) >> 1)) & STACK[0x334]) >> STACK[0x348]) | (((v81 ^ ((v81 & STACK[0x344]) >> 1)) & STACK[0x32C]) << v83));
  uint64_t v85 = LODWORD(STACK[0x40C]);
  *(_DWORD *)(STACK[0x380] + v84) = v85 ^ v80 ^ 0x8CDA8304 ^ (unsigned __int16)(((v82 >> 12) ^ 0xE6A3) - 7298) ^ *((unsigned __int16 *)*(&off_1001177E0 + (v67 ^ 0x1C)) + ((v82 >> 12) ^ 0xF2CAE6B1) - 6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _UNKNOWN **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(STACK[0x3A0] + 8 * v67))(v73, v85, 59043, v83, a3, v79, a4, &off_1001177E0, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16,
           a17,
           a18,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           v87,
           v88,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57);
}

void sub_1000C6558()
{
}

#error "1000CB0EC: call analysis failed (funcsize=4626)"

void sub_1000CB0F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,int a55,int a56,int a57,int a58,int a59)
{
  LODWORD(STACK[0x28C]) = a58 ^ 0xCEEAF932;
  LODWORD(STACK[0x288]) = a57 ^ 0x79C04953;
  LODWORD(STACK[0x280]) = a56 ^ 0x32A6819A;
  LODWORD(STACK[0x284]) = a59 ^ 0x84299AD3;
  JUMPOUT(0x1000C81E4);
}

void sub_1000CB1AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,int a54)
{
  uint64_t v55 = 8 * (a54 + 54);
  (*(void (**)(unint64_t))(v54 + v55))(STACK[0x380]);
  (*(void (**)(unint64_t))(v54 + v55))(STACK[0x378]);
  JUMPOUT(0x1000CB224);
}

char *sub_1000CB260(char *result, char *a2, unint64_t a3)
{
  if (((a2 ^ result) & 7) != 0)
  {
    if ((a3 + 7) >= 8)
    {
      unsigned int v3 = (a3 + 7) >> 3;
      switch(a3 & 7)
      {
        case 1uLL:
          goto LABEL_23;
        case 2uLL:
          goto LABEL_22;
        case 3uLL:
          goto LABEL_21;
        case 4uLL:
          goto LABEL_20;
        case 5uLL:
          goto LABEL_19;
        case 6uLL:
          goto LABEL_18;
        case 7uLL:
          goto LABEL_17;
        default:
          do
          {
            char v15 = *result++;
            *a2++ = v15;
LABEL_17:
            char v16 = *result++;
            *a2++ = v16;
LABEL_18:
            char v17 = *result++;
            *a2++ = v17;
LABEL_19:
            char v18 = *result++;
            *a2++ = v18;
LABEL_20:
            char v19 = *result++;
            *a2++ = v19;
LABEL_21:
            char v20 = *result++;
            *a2++ = v20;
LABEL_22:
            char v21 = *result++;
            *a2++ = v21;
LABEL_23:
            char v22 = *result++;
            *a2++ = v22;
            --v3;
          }
          while (v3);
          break;
      }
    }
  }
  else
  {
    unint64_t v4 = -(int)result & 7;
    switch((int)v4)
    {
      case 1:
        goto LABEL_11;
      case 2:
        goto LABEL_10;
      case 3:
        goto LABEL_9;
      case 4:
        goto LABEL_8;
      case 5:
        goto LABEL_7;
      case 6:
        goto LABEL_6;
      case 7:
        char v5 = *result++;
        *a2++ = v5;
LABEL_6:
        char v6 = *result++;
        *a2++ = v6;
LABEL_7:
        char v7 = *result++;
        *a2++ = v7;
LABEL_8:
        char v8 = *result++;
        *a2++ = v8;
LABEL_9:
        char v9 = *result++;
        *a2++ = v9;
LABEL_10:
        char v10 = *result++;
        *a2++ = v10;
LABEL_11:
        char v11 = *result++;
        *a2++ = v11;
        break;
      default:
        break;
    }
    BOOL v12 = a3 >= v4;
    unint64_t v13 = a3 - v4;
    if (!v12) {
      unint64_t v13 = 0;
    }
    if (v13 >= 8)
    {
      unint64_t v14 = ((v13 >> 3) + 7) >> 3;
      switch((v13 >> 3) & 7)
      {
        case 1uLL:
          goto LABEL_32;
        case 2uLL:
          goto LABEL_31;
        case 3uLL:
          goto LABEL_30;
        case 4uLL:
          goto LABEL_29;
        case 5uLL:
          goto LABEL_28;
        case 6uLL:
          goto LABEL_27;
        case 7uLL:
          goto LABEL_26;
        default:
          do
          {
            uint64_t v23 = *(void *)result;
            result += 8;
            *(void *)a2 = v23;
            a2 += 8;
LABEL_26:
            uint64_t v24 = *(void *)result;
            result += 8;
            *(void *)a2 = v24;
            a2 += 8;
LABEL_27:
            uint64_t v25 = *(void *)result;
            result += 8;
            *(void *)a2 = v25;
            a2 += 8;
LABEL_28:
            uint64_t v26 = *(void *)result;
            result += 8;
            *(void *)a2 = v26;
            a2 += 8;
LABEL_29:
            uint64_t v27 = *(void *)result;
            result += 8;
            *(void *)a2 = v27;
            a2 += 8;
LABEL_30:
            uint64_t v28 = *(void *)result;
            result += 8;
            *(void *)a2 = v28;
            a2 += 8;
LABEL_31:
            uint64_t v29 = *(void *)result;
            result += 8;
            *(void *)a2 = v29;
            a2 += 8;
LABEL_32:
            uint64_t v30 = *(void *)result;
            result += 8;
            *(void *)a2 = v30;
            a2 += 8;
            --v14;
          }
          while (v14);
          break;
      }
    }
    switch(v13 & 7)
    {
      case 1uLL:
        goto LABEL_40;
      case 2uLL:
        goto LABEL_39;
      case 3uLL:
        goto LABEL_38;
      case 4uLL:
        goto LABEL_37;
      case 5uLL:
        goto LABEL_36;
      case 6uLL:
        goto LABEL_35;
      case 7uLL:
        char v31 = *result++;
        *a2++ = v31;
LABEL_35:
        char v32 = *result++;
        *a2++ = v32;
LABEL_36:
        char v33 = *result++;
        *a2++ = v33;
LABEL_37:
        char v34 = *result++;
        *a2++ = v34;
LABEL_38:
        char v35 = *result++;
        *a2++ = v35;
LABEL_39:
        char v36 = *result++;
        *a2++ = v36;
LABEL_40:
        *a2 = *result;
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_1000CB4BC(os_log_t log)
{
  *(_WORD *)int v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "prepare: switching to ODIFLOW", v1, 2u);
}

void sub_1000CB500()
{
  *(_WORD *)int v0 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT, "-scoreWithScoreRequest:completionHandler is deprecated.", v0, 2u);
}

void sub_1000CB548(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error getting data, %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000CB5C0()
{
}

void sub_1000CB5E4()
{
  uint64_t v0 = abort_report_np();
  sub_1000CB60C(v0);
}

void sub_1000CB60C()
{
  uint64_t v0 = abort_report_np();
  sub_1000CB634(v0);
}

void sub_1000CB634()
{
  uint64_t v0 = abort_report_np();
  sub_1000CB65C(v0);
}

void sub_1000CB65C()
{
  uint64_t v0 = abort_report_np();
  sub_1000CB684(v0);
}

void sub_1000CB684()
{
  uint64_t v0 = abort_report_np();
  sub_1000CB6AC(v0);
}

void sub_1000CB6AC()
{
  uint64_t v0 = abort_report_np();
  sub_1000CB6D4(v0);
}

void sub_1000CB6D4()
{
  uint64_t v0 = abort_report_np();
  sub_1000CB6FC(v0);
}

void sub_1000CB6FC()
{
  uint64_t v0 = abort_report_np();
  sub_1000CB724(v0);
}

void sub_1000CB724()
{
  uint64_t v0 = abort_report_np();
  sub_1000CB74C(v0);
}

void sub_1000CB74C()
{
  uint64_t v0 = abort_report_np();
  sub_1000CB774(v0);
}

void sub_1000CB774()
{
  __assert_rtn("-[AMSXDProtoMessage writeTo:]", "AMSXDProtoMessage.m", 87, "nil != self->_messageData");
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return dispatch thunk of JSONDecoder.decode<A>(_:from:)();
}

uint64_t JSONDecoder.init()()
{
  return JSONDecoder.init()();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return type metadata accessor for JSONDecoder();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return dispatch thunk of JSONEncoder.encode<A>(_:)();
}

uint64_t JSONEncoder.init()()
{
  return JSONEncoder.init()();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return type metadata accessor for JSONEncoder();
}

uint64_t __DataStorage.init(bytes:length:copy:deallocator:offset:)()
{
  return __DataStorage.init(bytes:length:copy:deallocator:offset:)();
}

uint64_t __DataStorage._bytes.getter()
{
  return __DataStorage._bytes.getter();
}

uint64_t __DataStorage._length.getter()
{
  return __DataStorage._length.getter();
}

uint64_t __DataStorage._offset.getter()
{
  return __DataStorage._offset.getter();
}

uint64_t type metadata accessor for __DataStorage()
{
  return type metadata accessor for __DataStorage();
}

uint64_t DateComponents.nanosecond.setter()
{
  return DateComponents.nanosecond.setter();
}

uint64_t DateComponents.day.setter()
{
  return DateComponents.day.setter();
}

uint64_t DateComponents.hour.setter()
{
  return DateComponents.hour.setter();
}

uint64_t DateComponents.year.setter()
{
  return DateComponents.year.setter();
}

uint64_t DateComponents.month.setter()
{
  return DateComponents.month.setter();
}

uint64_t DateComponents.minute.setter()
{
  return DateComponents.minute.setter();
}

uint64_t DateComponents.second.setter()
{
  return DateComponents.second.setter();
}

uint64_t DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)()
{
  return DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
}

uint64_t DateComponents.calendar.setter()
{
  return DateComponents.calendar.setter();
}

uint64_t DateComponents.timeZone.setter()
{
  return DateComponents.timeZone.setter();
}

uint64_t type metadata accessor for DateComponents()
{
  return type metadata accessor for DateComponents();
}

uint64_t dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)()
{
  return dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
}

uint64_t URLResourceValues.isExcludedFromBackup.setter()
{
  return URLResourceValues.isExcludedFromBackup.setter();
}

uint64_t URLResourceValues.init()()
{
  return URLResourceValues.init()();
}

uint64_t type metadata accessor for URLResourceValues()
{
  return type metadata accessor for URLResourceValues();
}

uint64_t _convertErrorToNSError(_:)()
{
  return _convertErrorToNSError(_:)();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t URL.relativePath.getter()
{
  return URL.relativePath.getter();
}

uint64_t type metadata accessor for URL.DirectoryHint()
{
  return type metadata accessor for URL.DirectoryHint();
}

uint64_t URL.setResourceValues(_:)()
{
  return URL.setResourceValues(_:)();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t URL.appendingPathComponent(_:isDirectory:)()
{
  return URL.appendingPathComponent(_:isDirectory:)();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t URL.append<A>(component:directoryHint:)()
{
  return URL.append<A>(component:directoryHint:)();
}

uint64_t URL.init(string:)()
{
  return URL.init(string:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

void __swiftcall pow(_:_:)(NSDecimal *__return_ptr retstr, NSDecimal *a2, Swift::Int a3)
{
}

uint64_t Data.InlineData.init(_:)()
{
  return Data.InlineData.init(_:)();
}

Swift::Void __swiftcall Data.LargeSlice.ensureUniqueReference()()
{
}

uint64_t Data.LargeSlice.init(_:)()
{
  return Data.LargeSlice.init(_:)();
}

uint64_t Data.InlineSlice.init(_:)()
{
  return Data.InlineSlice.init(_:)();
}

uint64_t Data._Representation.replaceSubrange(_:with:count:)()
{
  return Data._Representation.replaceSubrange(_:with:count:)();
}

uint64_t Data._Representation.init(count:)()
{
  return Data._Representation.init(count:)();
}

uint64_t Data._Representation.append(contentsOf:)()
{
  return Data._Representation.append(contentsOf:)();
}

uint64_t Data._Representation.init(_:)()
{
  return Data._Representation.init(_:)();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Data.write(to:options:)()
{
  return Data.write(to:options:)();
}

uint64_t static Date.distantPast.getter()
{
  return static Date.distantPast.getter();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return Date.timeIntervalSince(_:)();
}

uint64_t Date.addingTimeInterval(_:)()
{
  return Date.addingTimeInterval(_:)();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)Date._bridgeToObjectiveC()();
}

uint64_t static Date.> infix(_:_:)()
{
  return static Date.> infix(_:_:)();
}

uint64_t static Date.< infix(_:_:)()
{
  return static Date.< infix(_:_:)();
}

uint64_t static Date.== infix(_:_:)()
{
  return static Date.== infix(_:_:)();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static Date.now.getter()
{
  return static Date.now.getter();
}

uint64_t Date.distance(to:)()
{
  return Date.distance(to:)();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t Locale.init(identifier:)()
{
  return Locale.init(identifier:)();
}

NSLocale __swiftcall Locale._bridgeToObjectiveC()()
{
  return (NSLocale)Locale._bridgeToObjectiveC()();
}

uint64_t type metadata accessor for Locale()
{
  return type metadata accessor for Locale();
}

uint64_t type metadata accessor for Calendar.Identifier()
{
  return type metadata accessor for Calendar.Identifier();
}

uint64_t Calendar.init(identifier:)()
{
  return Calendar.init(identifier:)();
}

NSCalendar __swiftcall Calendar._bridgeToObjectiveC()()
{
  return (NSCalendar)Calendar._bridgeToObjectiveC()();
}

uint64_t Calendar.date(from:)()
{
  return Calendar.date(from:)();
}

uint64_t type metadata accessor for Calendar()
{
  return type metadata accessor for Calendar();
}

void __swiftcall IndexSet._bridgeToObjectiveC()(NSIndexSet *__return_ptr retstr)
{
}

Swift::tuple_inserted_Bool_memberAfterInsert_Int __swiftcall IndexSet.insert(_:)(Swift::Int a1)
{
  char v1 = IndexSet.insert(_:)(a1);
  result.memberAfterInsert = v2;
  result.inserted = v1;
  return result;
}

uint64_t type metadata accessor for IndexSet()
{
  return type metadata accessor for IndexSet();
}

uint64_t TimeZone.init(secondsFromGMT:)()
{
  return TimeZone.init(secondsFromGMT:)();
}

NSTimeZone __swiftcall TimeZone._bridgeToObjectiveC()()
{
  return (NSTimeZone)TimeZone._bridgeToObjectiveC()();
}

uint64_t type metadata accessor for TimeZone()
{
  return type metadata accessor for TimeZone();
}

uint64_t static DeviceDetails.deviceUnlockedSinceBoot()()
{
  return static DeviceDetails.deviceUnlockedSinceBoot()();
}

uint64_t static DeviceDetails.deviceIsRunningInternalBuild()()
{
  return static DeviceDetails.deviceIsRunningInternalBuild()();
}

uint64_t type metadata accessor for DeviceDetails()
{
  return type metadata accessor for DeviceDetails();
}

uint64_t AccountIdentity.init(amsAccountID:)()
{
  return AccountIdentity.init(amsAccountID:)();
}

uint64_t AccountIdentity.amsAccountIdentity()()
{
  return AccountIdentity.amsAccountIdentity()();
}

uint64_t static AccountIdentity.== infix(_:_:)()
{
  return static AccountIdentity.== infix(_:_:)();
}

uint64_t static AccountIdentity.DSID.== infix(_:_:)()
{
  return static AccountIdentity.DSID.== infix(_:_:)();
}

uint64_t AccountIdentity.DSID.value.getter()
{
  return AccountIdentity.DSID.value.getter();
}

uint64_t type metadata accessor for AccountIdentity.DSID()
{
  return type metadata accessor for AccountIdentity.DSID();
}

uint64_t AccountIdentity.DSID.init(_:)()
{
  return AccountIdentity.DSID.init(_:)();
}

uint64_t AccountIdentity.dsid.getter()
{
  return AccountIdentity.dsid.getter();
}

uint64_t AccountIdentity.init(altDSID:dsid:)()
{
  return AccountIdentity.init(altDSID:dsid:)();
}

uint64_t AccountIdentity.altDSID.getter()
{
  return AccountIdentity.altDSID.getter();
}

uint64_t type metadata accessor for AccountIdentity()
{
  return type metadata accessor for AccountIdentity();
}

uint64_t dispatch thunk of MetricsActivity.nwActivity.getter()
{
  return dispatch thunk of MetricsActivity.nwActivity.getter();
}

uint64_t MetricsActivity.init(label:)()
{
  return MetricsActivity.init(label:)();
}

uint64_t dispatch thunk of MetricsActivity.activate()()
{
  return dispatch thunk of MetricsActivity.activate()();
}

uint64_t dispatch thunk of MetricsActivity.complete<A>(with:)()
{
  return dispatch thunk of MetricsActivity.complete<A>(with:)();
}

uint64_t type metadata accessor for MetricsActivity()
{
  return type metadata accessor for MetricsActivity();
}

uint64_t LogInterpolation.StringInterpolation.appendInterpolation(safe:)()
{
  return LogInterpolation.StringInterpolation.appendInterpolation(safe:)();
}

uint64_t LogInterpolation.StringInterpolation.appendInterpolation(_:)()
{
  return LogInterpolation.StringInterpolation.appendInterpolation(_:)();
}

Swift::Void __swiftcall LogInterpolation.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
}

uint64_t LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return LogInterpolation.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t type metadata accessor for LogInterpolation.StringInterpolation()
{
  return type metadata accessor for LogInterpolation.StringInterpolation();
}

uint64_t LogInterpolation.init(stringInterpolation:)()
{
  return LogInterpolation.init(stringInterpolation:)();
}

uint64_t LogInterpolation.init(stringLiteral:)()
{
  return LogInterpolation.init(stringLiteral:)();
}

uint64_t static LogInterpolation.traceableSensitive(_:)()
{
  return static LogInterpolation.traceableSensitive(_:)();
}

uint64_t static LogInterpolation.safe(_:)()
{
  return static LogInterpolation.safe(_:)();
}

uint64_t static LogInterpolation.prefix<A>(_:_:)()
{
  return static LogInterpolation.prefix<A>(_:_:)();
}

uint64_t static LogInterpolation.prefix(_:_:)()
{
  return static LogInterpolation.prefix(_:_:)();
}

uint64_t static LogInterpolation.sensitive(_:)()
{
  return static LogInterpolation.sensitive(_:)();
}

uint64_t type metadata accessor for LogInterpolation()
{
  return type metadata accessor for LogInterpolation();
}

uint64_t dispatch thunk of static DeviceInformation.deviceIsRunningInternalBuild()()
{
  return dispatch thunk of static DeviceInformation.deviceIsRunningInternalBuild()();
}

uint64_t Log.osLog.getter()
{
  return Log.osLog.getter();
}

uint64_t static Log.dasActivity.getter()
{
  return static Log.dasActivity.getter();
}

uint64_t static Log.accountsDaemon.getter()
{
  return static Log.accountsDaemon.getter();
}

uint64_t static Log.accountsDataSync.getter()
{
  return static Log.accountsDataSync.getter();
}

uint64_t Log.info(_:)()
{
  return Log.info(_:)();
}

uint64_t Log.debug(_:)()
{
  return Log.debug(_:)();
}

uint64_t Log.error(_:)()
{
  return Log.error(_:)();
}

uint64_t Log.fault(_:)()
{
  return Log.fault(_:)();
}

uint64_t Log.default(_:)()
{
  return Log.default(_:)();
}

uint64_t type metadata accessor for Log()
{
  return type metadata accessor for Log();
}

uint64_t dispatch thunk of static Defaults.autoSyncDisabledForAccountData.getter()
{
  return dispatch thunk of static Defaults.autoSyncDisabledForAccountData.getter();
}

uint64_t OSSignpostID.init(log:object:)()
{
  return OSSignpostID.init(log:object:)();
}

uint64_t OSSignpostID.rawValue.getter()
{
  return OSSignpostID.rawValue.getter();
}

uint64_t type metadata accessor for OSSignpostID()
{
  return type metadata accessor for OSSignpostID();
}

uint64_t OSSignposter.init(logHandle:)()
{
  return OSSignposter.init(logHandle:)();
}

uint64_t OSSignposter.logHandle.getter()
{
  return OSSignposter.logHandle.getter();
}

uint64_t type metadata accessor for OSSignposter()
{
  return type metadata accessor for OSSignposter();
}

uint64_t type metadata accessor for OSSignpostError()
{
  return type metadata accessor for OSSignpostError();
}

uint64_t OSSignpostIntervalState.signpostID.getter()
{
  return OSSignpostIntervalState.signpostID.getter();
}

uint64_t OSSignpostIntervalState.init(id:isOpen:)()
{
  return OSSignpostIntervalState.init(id:isOpen:)();
}

uint64_t type metadata accessor for OSSignpostIntervalState()
{
  return type metadata accessor for OSSignpostIntervalState();
}

uint64_t checkForErrorAndConsumeState(state:)()
{
  return checkForErrorAndConsumeState(state:)();
}

uint64_t type metadata accessor for DispatchTimeInterval()
{
  return type metadata accessor for DispatchTimeInterval();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t static DispatchTime.now()()
{
  return static DispatchTime.now()();
}

uint64_t type metadata accessor for DispatchTime()
{
  return type metadata accessor for DispatchTime();
}

uint64_t + infix(_:_:)()
{
  return + infix(_:_:)();
}

uint64_t dispatch thunk of HashFunction.update(bufferPointer:)()
{
  return dispatch thunk of HashFunction.update(bufferPointer:)();
}

uint64_t dispatch thunk of HashFunction.finalize()()
{
  return dispatch thunk of HashFunction.finalize()();
}

uint64_t dispatch thunk of HashFunction.init()()
{
  return dispatch thunk of HashFunction.init()();
}

uint64_t type metadata accessor for SHA512Digest()
{
  return type metadata accessor for SHA512Digest();
}

uint64_t type metadata accessor for SHA512()
{
  return type metadata accessor for SHA512();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Dictionary.init(dictionaryLiteral:)()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.init(format:_:)()
{
  return String.init(format:_:)();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

uint64_t String.utf8CString.getter()
{
  return String.utf8CString.getter();
}

uint64_t static String._fromSubstring(_:)()
{
  return static String._fromSubstring(_:)();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return static String._uncheckedFromUTF8(_:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

uint64_t String.count.getter()
{
  return String.count.getter();
}

uint64_t String.index(_:offsetBy:)()
{
  return String.index(_:offsetBy:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return String.UTF8View._foreignIndex(after:)();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return String.UTF8View._foreignIndex(_:offsetBy:)();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return String.UTF8View._foreignSubscript(position:)();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return String.UTF16View.index(_:offsetBy:)();
}

uint64_t String.init<A>(_:)()
{
  return String.init<A>(_:)();
}

uint64_t String.subscript.getter()
{
  return String.subscript.getter();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return dispatch thunk of Sequence.makeIterator()();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)Bool._bridgeToObjectiveC()();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)Set._bridgeToObjectiveC()();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

uint64_t NSDictionary.init(dictionaryLiteral:)()
{
  return NSDictionary.init(dictionaryLiteral:)();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)()
{
  return OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t static os_signpost_type_t.end.getter()
{
  return static os_signpost_type_t.end.getter();
}

uint64_t static os_signpost_type_t.begin.getter()
{
  return static os_signpost_type_t.begin.getter();
}

uint64_t static os_signpost_type_t.event.getter()
{
  return static os_signpost_type_t.event.getter();
}

NSNumber __swiftcall NSNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  return (NSNumber)NSNumber.init(integerLiteral:)(integerLiteral);
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

void __swiftcall NSDecimal._bridgeToObjectiveC()(NSDecimalNumber *__return_ptr retstr)
{
}

uint64_t static NSDecimal.* infix(_:_:)()
{
  return static NSDecimal.* infix(_:_:)();
}

void __swiftcall NSDecimal.init(_:)(NSDecimal *__return_ptr retstr, Swift::UInt a2)
{
}

uint64_t OS_os_log.signpostsEnabled.getter()
{
  return OS_os_log.signpostsEnabled.getter();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t StringProtocol.caseInsensitiveCompare<A>(_:)()
{
  return StringProtocol.caseInsensitiveCompare<A>(_:)();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t dispatch thunk of SetAlgebra.insert(_:)()
{
  return dispatch thunk of SetAlgebra.insert(_:)();
}

uint64_t dispatch thunk of SetAlgebra.init()()
{
  return dispatch thunk of SetAlgebra.init()();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

uint64_t _HashTable.occupiedBucket(after:)()
{
  return _HashTable.occupiedBucket(after:)();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
}

uint64_t type metadata accessor for DecodingError()
{
  return type metadata accessor for DecodingError();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t dispatch thunk of _AnySequenceBox._makeIterator()()
{
  return dispatch thunk of _AnySequenceBox._makeIterator()();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

Swift::Bool __swiftcall _NativeDictionary.ensureUnique(isUnique:capacity:)(Swift::Bool isUnique, Swift::Int capacity)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, capacity);
}

Swift::Void __swiftcall _NativeDictionary.copy()()
{
}

uint64_t _NativeDictionary._delete(at:)()
{
  return _NativeDictionary._delete(at:)();
}

uint64_t __CocoaDictionary.makeIterator()()
{
  return __CocoaDictionary.makeIterator()();
}

uint64_t __CocoaDictionary.count.getter()
{
  return __CocoaDictionary.count.getter();
}

uint64_t __CocoaDictionary.Iterator.next()()
{
  return __CocoaDictionary.Iterator.next()();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.convert(_:capacity:)()
{
  return static _DictionaryStorage.convert(_:capacity:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t dispatch thunk of _AnyIteratorBoxBase.next()()
{
  return dispatch thunk of _AnyIteratorBoxBase.next()();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return KeyedDecodingContainer.codingPath.getter();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return KeyedDecodingContainer.allKeys.getter();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return _bridgeAnythingToObjectiveC<A>(_:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()
{
  return _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t Error._getEmbeddedNSError()()
{
  return Error._getEmbeddedNSError()();
}

uint64_t Error._code.getter()
{
  return Error._code.getter();
}

uint64_t Error._domain.getter()
{
  return Error._domain.getter();
}

uint64_t Error._userInfo.getter()
{
  return Error._userInfo.getter();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t Mirror.init(reflecting:)()
{
  return Mirror.init(reflecting:)();
}

uint64_t Mirror.children.getter()
{
  return Mirror.children.getter();
}

uint64_t type metadata accessor for Mirror()
{
  return type metadata accessor for Mirror();
}

NSNumber __swiftcall UInt64._bridgeToObjectiveC()()
{
  return (NSNumber)UInt64._bridgeToObjectiveC()();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}