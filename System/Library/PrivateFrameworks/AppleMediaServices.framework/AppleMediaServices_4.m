uint64_t sub_18D9EAA84(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + 16) = *(_DWORD *)a1;
  *(_DWORD *)(v2 + 88) = *(_DWORD *)(a1 + 72);
  *(_DWORD *)(v2 + 92) = *(_DWORD *)(a1 + 76);
  *(unsigned char *)(v2 + 96) = *(unsigned char *)(a1 + 80);
  *(unsigned char *)(v2 + 97) = *(unsigned char *)(a1 + 81);
  *(_DWORD *)(v2 + 120) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(v2 + 100) = *(_DWORD *)(a1 + 84);
  *(unsigned char *)(v2 + 124) = *(unsigned char *)(a1 + 108) & 1 | 0xAA;
  *(unsigned char *)(v2 + 55) = (*(unsigned char *)(a1 + 39)
                       + (~*(unsigned char *)(a1 + 39) | 0x1B)
                       + (((v1 ^ 1) + 11) | *(unsigned char *)(a1 + 39))
                       - 105) ^ 0x61 ^ *((unsigned char *)*(&off_1E559D8D0 + v1 - 1457) + 15) ^ *((unsigned char *)*(&off_1E559D8D0 + v1 - 1507)
                                                                                        + 16) ^ *((unsigned char *)*(&off_1E559D8D0 + v1 - 1551)
                                                                                                + 5);
  return (*(uint64_t (**)(void))(v3 + 8 * v1))();
}

void sub_18D9EAB8C()
{
}

uint64_t sub_18D9EAB94()
{
  *(unsigned char *)(v5 + 87) = *(unsigned char *)(v3 + 17) ^ *(unsigned char *)(v2 + 15) ^ *(unsigned char *)(v4 + 16) ^ 0x61 ^ (*(unsigned char *)(v0 + 31)
                                                                                                + (~*(unsigned char *)(v0 + 31) | 0x1B)
                                                                                                + (*(unsigned char *)(v0 + 31) | 0x1B)
                                                                                                - 105);
  return (*(uint64_t (**)(void))(v6 + 8 * ((1489 * (((v1 + 702) ^ 0xFFFFFFFFFFFFFA31) == -32)) ^ v1)))();
}

void sub_18D9EAC30()
{
}

uint64_t sub_18D9EAC38@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  *(unsigned char *)(v3 + 119) = *(unsigned char *)(a1 + 103);
  *(unsigned char *)(v3 + 118) = *(unsigned char *)(a1 + 102);
  *(unsigned char *)(v3 + 117) = *(unsigned char *)(a1 + 101);
  *(unsigned char *)(v3 + 116) = *(unsigned char *)(a1 + 100);
  *(unsigned char *)(v3 + 115) = *(unsigned char *)(a1 + 99);
  *(unsigned char *)(v3 + 114) = *(unsigned char *)(a1 + 98);
  *(unsigned char *)(v3 + 113) = *(unsigned char *)(a1 + 97);
  *(unsigned char *)(v3 + 112) = *(unsigned char *)(a1 + 96);
  *(unsigned char *)(v3 + 111) = *(unsigned char *)(a1 + 95);
  *(unsigned char *)(v3 + 110) = *(unsigned char *)(a1 + 94);
  *(unsigned char *)(v3 + 109) = *(unsigned char *)(a1 + 93);
  *(unsigned char *)(v3 + 108) = *(unsigned char *)(a1 + 92);
  *(unsigned char *)(v3 + 107) = *(unsigned char *)(a1 + 91);
  *(unsigned char *)(v3 + 106) = *(unsigned char *)(a1 + 90);
  *(unsigned char *)(v3 + 105) = *(unsigned char *)(a1 + 89);
  *(unsigned char *)(v3 + 104) = *(unsigned char *)(a1 + 88);
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 4);
  return (*(uint64_t (**)(void))(v4 + 8 * (((*(_DWORD *)(a1 + 4) == a2) * (((v2 - 440) | 0x2C0) ^ 0x55A)) ^ v2)))();
}

uint64_t sub_18D9EACF8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (int)(((*(_DWORD *)(a1 + 72) == v1) * (743 * (v2 ^ 0x6D4) + ((v2 - 1074) ^ 0xFFFFF8D5))) ^ v2)))();
}

uint64_t sub_18D9EAD38@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  *(_DWORD *)(v3 + 20) = a2 + 1;
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * (((((a1 == 0) ^ (v5 + v2 - 42 + 92)) & 1)
                                * (v4 + v5 + v2 - 810 - 676 - 646)) ^ (v2 - 810))))();
}

uint64_t sub_18D9EAD7C@<X0>(int a1@<W8>)
{
  (*(void (**)(void))(v3 + 8 * (a1 + 1546)))();
  BOOL v4 = (*(uint64_t (**)(uint64_t))(STACK[0x330] + 8 * (v1 + v2 + 1534)))(16) == 0;
  return (*(uint64_t (**)(void))(STACK[0x330]
                              + 8
                              * ((((v1 + 22) ^ v4) & 1 | (4 * (((v1 + 22) ^ v4) & 1))) ^ (v1 + v2))))();
}

uint64_t sub_18D9EADE8(void *a1)
{
  *a1 = 0x24CC9A478416F3DCLL;
  a1[1] = 0x24CC9A478416F3DCLL;
  *(void *)(v2 + 8) = (char *)a1 + 0x66FBF218A8091D0CLL;
  BOOL v5 = (*(uint64_t (**)(uint64_t))(v4 + 8 * (v1 & 0x683807EF ^ 0xF4Au)))(16) == 0;
  return (*(uint64_t (**)(void))(STACK[0x330]
                              + 8 * ((((v1 & 0xEF ^ v5) & 1) * (v1 & 0x683807EF ^ v3 ^ 0x2068902B)) ^ v1 & 0x683807EF)))();
}

uint64_t sub_18D9EAE80(void *a1)
{
  *a1 = 0x24CC9A478416F3DCLL;
  a1[1] = 0x24CC9A478416F3DCLL;
  *int v1 = (char *)a1 + v2;
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * (((((&STACK[0x370] == 0) ^ (v4 + (v3 ^ 0x1A) + 15)) & 1)
                                * ((((v3 ^ 0x11A) - 1774) | 0xC4) - 185)) ^ v3 ^ 0x11A)))();
}

uint64_t sub_18D9EAEE0()
{
  LODWORD(STACK[0x26C]) = 2032305565;
  STACK[0x218] = *v1;
  STACK[0x2C8] = *(void *)(v3 + 8 * (v2 + v0 - 435));
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (int)((((v0 + 282114586) & 0xCEC6A797 ^ 0x25A) * (&STACK[0x370] == 0)) ^ (v2 + v0 + 802))))();
}

uint64_t sub_18D9EAFCC()
{
  return (*(uint64_t (**)(void))(v1 + 8 * ((88 * ((v0 ^ ((v0 ^ 0x49096AFD) == 1225354090)) & 1)) ^ v0)))();
}

uint64_t sub_18D9EB018(int a1)
{
  LODWORD(STACK[0x2D8]) = a1;
  return (*(uint64_t (**)(void))(v5 + 8 * ((1287 * (v4 == v1 + v3 + v2 - 476 - 199)) ^ (v3 + v2))))();
}

uint64_t sub_18D9EB054@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W8>)
{
  LODWORD(STACK[0x308]) = 740297993;
  STACK[0x328] = v4;
  STACK[0x258] = (unint64_t)&STACK[0x364];
  uint64_t v7 = *(void *)(v4 - 0x134F8A8684413526);
  uint64_t v8 = *(void *)(v6 + 8 * a4);
  STACK[0x358] = 0x24CC9A478416F3DCLL;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6
                                                                       + 8
                                                                       * ((109 * (v7 == 0x66FBF218A8091D0CLL)) ^ (v5 + ((a4 + 543686745) | 0x9EC5) + 1161))))(a1, a2, a3, v8);
}

uint64_t sub_18D9EB438(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  STACK[0x2E8] = (unint64_t)&STACK[0x358];
  LODWORD(STACK[0x310]) = -1129976585;
  STACK[0x318] = a4;
  unint64_t v10 = *(void *)(STACK[0x330] + 8 * (v5 - 430));
  v11 = *(uint64_t (**)(void))(STACK[0x330]
                            + 8 * (((v4 == 0x66FBF218A8091D0CLL) * (v6 ^ (v9 - 1235) ^ 0x506)) ^ (v8 + v6 + 59)));
  STACK[0x320] = v7;
  STACK[0x260] = v10;
  return v11();
}

uint64_t sub_18D9EB4A8()
{
  return v0();
}

uint64_t sub_18D9EB4C4()
{
  STACK[0x2A8] = v0;
  if (v3 == -1393729084)
  {
    unint64_t v6 = STACK[0x368];
    uint64_t v7 = *(void *)(STACK[0x368] - 0x24CC9A478416F3D4);
    unint64_t v8 = STACK[0x288];
    *(void *)(STACK[0x288] - 0x24CC9A478416F3D4) = v7;
    *(void *)(v8 - 0x24CC9A478416F3DCLL) = *(void *)(v6 - 0x24CC9A478416F3DCLL);
    return (*(uint64_t (**)(void))(v4
                                + 8
                                * (v1
                                 + v2
                                 + (((41 * (v2 ^ (v2 + 11))) ^ (v7 == 0x24CC9A478416F3DCLL)) & 1)
                                 * ((v2 ^ (v2 + 11)) - 13)
                                 + 372)))();
  }
  else if (v3 == 1393700935)
  {
    return (*(uint64_t (**)(void))(v4
                                             + 8
                                             * (((*(void *)(STACK[0x238] - 0x66FBF218A8091D04) == 0x24CC9A478416F3DCLL)
                                               * (v1 + v2 - 647)) ^ (v1 + v2 + 1378))))(LODWORD(STACK[0x2D8]));
  }
  else
  {
    return (*(uint64_t (**)(void))(v4
                                + 8
                                * (((((v2 + 49) ^ 0xE5 ^ (*(void *)(STACK[0x288]
                                                                                     - 0x24CC9A478416F3C4) == 0)) & 1)
                                  * (543728604 - v2)) ^ (v1 + 543727413))))();
  }
}

void sub_18D9EB740(void *a1@<X8>)
{
  *(void *)(v1 - 0x24CC9A478416F3DCLL) = v2;
  *(void *)(v2 - 0x24CC9A478416F3D4) = *a1;
  *a1 = v2;
  JUMPOUT(0x18D9EB770);
}

uint64_t sub_18D9EB784()
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((909 * (v1 != v2)) ^ (v0 + 1414))))();
}

uint64_t sub_18D9EB7CC()
{
  return (*(uint64_t (**)(void))(v2 + 8 * (((*v0 == 0x24CC9A478416F3DCLL) * (v1 - 455)) ^ v1)))();
}

uint64_t sub_18D9EB804@<X0>(void *a1@<X8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((((*a1 == 0x24CC9A478416F3DCLL) ^ (v1 + 64)) & 1)
                                * (((v1 - 411) | 0x319) ^ 0x31D)) | v1)))();
}

void sub_18D9EB85C()
{
  *(void *)(STACK[0x238] - 0x66FBF218A8091D04) = STACK[0x288];
  JUMPOUT(0x18D9EB884);
}

uint64_t sub_18D9EB8D8()
{
  return (*(uint64_t (**)(void))(v4
                                           + 8
                                           * ((((((v0 - 245) | 0x141) ^ (v2 - 56)) + (v0 ^ (v3 - 717)))
                                             * (v1 == 0x24CC9A478416F3DCLL)) ^ v0)))(LODWORD(STACK[0x2D8]));
}

uint64_t sub_18D9EB938@<X0>(int a1@<W8>)
{
  int v6 = a1 ^ 0x1B0;
  (*(void (**)(void))(v5 + 8 * (a1 ^ 0xBE0)))();
  unint64_t v7 = STACK[0x330];
  *int v2 = 0;
  return (*(uint64_t (**)(void))(v7
                                           + 8
                                           * ((((((v6 - 245) | 0x141) ^ (v3 - 56)) + (v6 ^ (v4 - 717)))
                                             * (v1 == 0x24CC9A478416F3DCLL)) ^ v6)))(LODWORD(STACK[0x2D8]));
}

uint64_t sub_18D9EB9BC@<X0>(int a1@<W8>)
{
  (*(void (**)(uint64_t))(v2 + 8 * (a1 ^ 0xBE4)))(v1 - 0x24CC9A478416F3DCLL);
  int v3 = (uint64_t (*)(uint64_t))STACK[0x2C0];
  uint64_t v4 = LODWORD(STACK[0x2D8]);
  STACK[0x368] = 0x24CC9A478416F3DCLL;
  STACK[0x2C0] = (unint64_t)v3;
  return v3(v4);
}

uint64_t sub_18D9EBA0C()
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((2690 * (v2 == -1393729084)) ^ (v1 + v0 + 76))))();
}

void sub_18D9EBA40()
{
  *(void *)STACK[0x290] = 0;
  LODWORD(STACK[0x2DC]) = -1393729084;
  JUMPOUT(0x18D9EBA6CLL);
}

uint64_t sub_18D9EBB18(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(v4 + 8 * (((*(void *)(v3 + a1) == a2) * (v2 + v2 - 1158 - 1407)) ^ v2)))();
}

uint64_t sub_18D9EBB48@<X0>(unint64_t a1@<X3>, unint64_t a2@<X4>, int a3@<W8>)
{
  STACK[0x308] = a2;
  STACK[0x310] = a1;
  STACK[0x318] = v4;
  STACK[0x320] = v3 - 0x134F8A868441352ELL;
  return (*(uint64_t (**)(void))(v8
                              + 8
                              * (((v3 == 0x134F8A8684413526) * ((a3 - v6 + 518) ^ (v7 - 2058) ^ v5)) ^ (a3 + 331))))();
}

uint64_t sub_18D9EBBBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(v7 + 8 * (int)(((*v4 == a3) * (((v3 + v5) & 0xB0799FFF) - v6 + 116)) ^ v3)))();
}

uint64_t sub_18D9EBBF4@<X0>(uint64_t a1@<X8>)
{
  unint64_t v4 = (void *)(a1 - 0x66FBF218A8091D0CLL);
  STACK[0x328] = (unint64_t)v4;
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (((((*v4 + v2 == 0x3BCC90A264D1475ALL) ^ (v1 - 81)) & 1)
                                * ((47 * ((v1 + 683) ^ 0x2A0)) ^ 0x218)) ^ (v1 + 683))))();
}

uint64_t sub_18D9EBC6C()
{
  (*(void (**)(unint64_t))(v3 + 8 * (v2 ^ 0xAA8)))(STACK[0x328]);
  *int v0 = 0x66FBF218A8091D0CLL;
  return v1(STACK[0x320]);
}

void sub_18D9EBCC4()
{
}

uint64_t sub_18D9EBCDC()
{
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(v6 + 8 * (v3 ^ v0)))(v2);
  return (*(uint64_t (**)(uint64_t))(STACK[0x330]
                                            + 8
                                            * (((((v4 + v5 == 0x3BCC90A264D1475ALL) ^ (v3 + 90)) & 1)
                                              * (((v3 - 265) | 0x60C) ^ v1)) ^ v3)))(v7);
}

uint64_t sub_18D9EBD44@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (int)(((*(void *)(a1 - 0x24CC9A478416F3C4) == 0)
                                     * ((v1 ^ 0x3D) + ((v1 + 164935437) & 0xF62B43EF) - 2514)) ^ v1)))();
}

uint64_t sub_18D9EBDB8()
{
  (*(void (**)(void))(v2 + 8 * (v0 + 282)))();
  *int v1 = 0;
  return sub_18D9EBCDC();
}

uint64_t sub_18D9EBDD8()
{
  (*(void (**)(void))(v2 + 8 * (v0 + v1 + 1546)))();
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, unint64_t))(STACK[0x330]
                                                                                         + 8
                                                                                         * ((4093
                                                                                           * (((STACK[0x318] == 0x60DE7237762FB090) ^ (1 - 79 * (v1 ^ (v1 + 2)))) & 1)) ^ (v0 + v1 + 1370))))(0x9F218DC889D04F70, 0x134F8A868441352ELL, 0x66FBF218A8091D0CLL, STACK[0x310]);
}

uint64_t sub_18D9EBE98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  *uint64_t v4 = 0x134F8A868441352ELL;
  return a4();
}

void sub_18D9EBEC4()
{
}

uint64_t sub_18D9EBEDC()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((((v1 + 1068794858) & 0x1FE2DFFB) + 624) * (LODWORD(STACK[0x2DC]) == -1393729084)) ^ (v0 + v1 + 296))))();
}

uint64_t sub_18D9EBF28@<X0>(int a1@<W8>)
{
  return (v3 + v1 - ((a1 + 1507508157) & (2 * v3))) ^ v1;
}

uint64_t sub_18D9EBF94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  STACK[0x2A8] = v3;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v8
                                                                                + 8
                                                                                * ((3731
                                                                                  * (v7 == ((v5 + v6 + 990) ^ (v4 + 1409)))) ^ (v5 + v6 + 991))))(a1, a2, a3, STACK[0x318]);
}

uint64_t sub_18D9EBFD8()
{
  STACK[0x300] = 0;
  return (*(uint64_t (**)(void))(STACK[0x330]
                              + 8
                              * (((*(void *)(STACK[0x358] - 0x24CC9A478416F3C4) == 0)
                                * (((v0 ^ 3) - v1 - 991) ^ (v2 + 1))) ^ v0)))();
}

uint64_t sub_18D9EC030@<X0>(int a1@<W8>)
{
  unint64_t v5 = (*(_DWORD *)(v1 - 0x24CC9A478416F3CCLL) - 1508655795);
  STACK[0x270] = v5;
  int v6 = *(uint64_t (**)(void))(STACK[0x330]
                           + 8
                           * ((386
                             * (0x2B47CADB86F88AF4 - v2 + v5 - 10 < (((a1 ^ (v3 - 1662)) - v3 + 126) ^ 0xFFFFFFFFFFFFFF88))) ^ a1));
  STACK[0x300] = v4;
  STACK[0x298] = v2;
  return v6();
}

uint64_t sub_18D9EC0C0()
{
  unint64_t v3 = STACK[0x270];
  STACK[0x300] = v2;
  STACK[0x298] = v1;
  STACK[0x270] = v3;
  STACK[0x240] = v3 + 1835573037;
  STACK[0x220] = ((v1 - 0x2B47CADB86F88AEALL) ^ 0xBF9DFF7FE5FBBFCFLL)
               + 0x57FBDEE79FF5C776
               + ((2 * (v1 - 0x2B47CADB86F88AEALL)) & 0x7F3BFEFFCBF77F9ELL);
  return (*(uint64_t (**)(void))(STACK[0x330] + 8 * v0))();
}

void sub_18D9ECE70()
{
  int v4 = (*v0 ^ v2) | ((*v3 ^ v1) << 8);
  LODWORD(STACK[0x2FC]) = v4 - 2 * (v4 & 0x2C3F ^ (*v0 ^ v2) & 1) - 21442;
  JUMPOUT(0x18D9EC6C0);
}

uint64_t sub_18D9ECEB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = (v3 ^ 0xBCA5ECF7) + STACK[0x298];
  STACK[0x280] = v4 + 10;
  unint64_t v5 = v4 - 0x2B47CADB198FEBBDLL;
  BOOL v7 = v5 >= 0x6D689F2D && v5 <= STACK[0x240];
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(STACK[0x330]
                                                                                + 8 * ((510 * v7) ^ 0x6E3)))(a1, a2, a3, STACK[0x318]);
}

uint64_t sub_18D9ECF4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  int v6 = (unsigned __int16)LODWORD(STACK[0x2FC]);
  if (v6 == 15177)
  {
    LODWORD(STACK[0x2FC]) = 15177;
    JUMPOUT(0x18D9EC6B0);
  }
  if (v6 == 10427 || v6 == 64741) {
    return (*(uint64_t (**)(void))(STACK[0x330]
  }
                                + 8
                                * ((314
                                  * ((unsigned __int16)(28 * (v5 ^ (v5 - 20)) + 13721) == (unsigned __int16)LODWORD(STACK[0x2FC]))) ^ (v4 + v5 + 991))))();
  else {
    return a4();
  }
}

uint64_t sub_18D9ECF7C()
{
  return (*(uint64_t (**)(void))(STACK[0x330]
                              + 8 * ((54 * ((v0 ^ 0xBCA5ECF7) != LODWORD(STACK[0x308]) - 898219723)) ^ 0x384)))();
}

void sub_18D9ECFE8()
{
}

uint64_t sub_18D9ED070@<X0>(uint64_t a1@<X8>)
{
  *(void *)STACK[0x2E8] = a1;
  return v1();
}

uint64_t sub_18D9ED08C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(STACK[0x330]
                                                                                + 8
                                                                                * ((314
                                                                                  * ((unsigned __int16)LODWORD(STACK[0x2FC]) == 15177)) ^ 0x682)))(a1, a2, a3, STACK[0x318]);
}

void sub_18D9ED100(int a1@<W8>)
{
  *(_DWORD *)STACK[0x258] = ((a1 ^ (v2 - 1424)) - 1673704174) ^ v1;
  LODWORD(STACK[0x2FC]) = 15177;
  JUMPOUT(0x18D9ED134);
}

void sub_18D9ED14C()
{
  STACK[0x2A8] = v0;
  JUMPOUT(0x18D9EC0E8);
}

uint64_t sub_18D9ED200(unsigned int a1)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((1909
                                * (*(_DWORD *)(STACK[0x2B0] - 0xFC58F007312F078 + 40 * (a1 - 1225354090) + 36)
                                 - LODWORD(STACK[0x26C]) == ((v1 + 103) | 0x1C0) - 2032307040)) ^ v1)))();
}

uint64_t sub_18D9ED270()
{
  int v5 = *(_DWORD *)(v1 + 40 * v0 + 28);
  switch(v5)
  {
    case 1:
      LODWORD(STACK[0x308]) = *(_DWORD *)(v1 + 40 * v0 + 24);
      JUMPOUT(0x18D9ED484);
    case 3:
      return (*(uint64_t (**)(void))(v4
                                  + 8
                                  * (((((v3 ^ (v3 - 3)) + 782) ^ (113 * (v3 ^ (v3 - 3))))
                                    * (*(void *)(v1 + 40 * v0 + 16) != 0)) | (v2 + v3 + 726))))();
    case 2:
      return (*(uint64_t (**)(void))(v4
                                  + 8
                                  * ((28
                                    * (((STACK[0x218] == 0x66FBF218A8091D0CLL) ^ ((v3 ^ (v3 + 18)) + 1)) & 1)) ^ (v2 + v3 + 449))))();
  }
  return ((uint64_t (*)(void))STACK[0x2C8])();
}

void sub_18D9ED4E4()
{
}

uint64_t sub_18D9ED570(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  LODWORD(STACK[0x2E8]) = v65;
  STACK[0x200] = v64;
  STACK[0x320] = v68;
  STACK[0x2C0] = v63;
  LODWORD(STACK[0x2D8]) = a1;
  STACK[0x328] = v66;
  uint64_t v71 = (*(uint64_t (**)(uint64_t))(v70 + 8 * (v67 ^ 0xF76)))(32);
  STACK[0x288] = v71 + 0x24CC9A478416F3DCLL;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 8 * ((54 * (((v71 == 0) ^ (v69 + v67 + 65)) & 1)) ^ v67)))(v71, v72, v73, v74, v75, v76, v77, v78, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61,
           a62,
           a63);
}

uint64_t sub_18D9ED600(uint64_t a1)
{
  unsigned int v5 = v1 & 0x8752A38F;
  *(void *)a1 = 0x24CC9A478416F3DCLL;
  *(void *)(a1 + 8) = 0x24CC9A478416F3DCLL;
  *(_DWORD *)(a1 + 16) = ((v5 - 847) ^ 0x41D4D31D) + v2;
  uint64_t v6 = (*(uint64_t (**)(void))(v3 + 8 * (int)(v5 ^ 0xB2C)))((((v5 + 6516) | 0x206882E4) ^ 0xC7800F95) + v2);
  *(void *)(a1 + 24) = v6;
  return (*(uint64_t (**)(void))(v3 + 8 * (int)((73 * (v6 == 0)) ^ v5)))();
}

uint64_t sub_18D9ED6F8@<X0>(int a1@<W8>)
{
  int v6 = a1 ^ 0x26F;
  uint64_t v7 = v1;
  (*(void (**)(void))(v5 + 8 * (a1 + 1722)))();
  unint64_t v8 = STACK[0x330];
  *int v2 = 0;
  return (*(uint64_t (**)(void))(v8
                                           + 8
                                           * (((((v7 == 0x24CC9A478416F3DCLL) ^ v6 ^ 0xD5) & 1)
                                             * ((v6 - v3 - 249) ^ (v4 - 12))) ^ v6)))(LODWORD(STACK[0x2D8]));
}

void sub_18D9ED780(int a1@<W8>)
{
  (*(void (**)(unint64_t))(v1 + 8 * (a1 + 1380)))(STACK[0x288] - 0x24CC9A478416F3DCLL);
  JUMPOUT(0x18D9ED7B8);
}

uint64_t sub_18D9ED7CC@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v4 + 8 * ((593 * (v3 == ((v2 + a1 + 802) ^ (v1 + 573)))) ^ (v2 + a1 - 212))))();
}

uint64_t sub_18D9ED804()
{
  return ((uint64_t (*)(void))STACK[0x278])();
}

uint64_t sub_18D9ED814(int a1)
{
  LODWORD(STACK[0x2D8]) = a1;
  int v6 = *(uint64_t (**)(void))(v5 + 8 * ((v3 + v2) ^ (1529 * (v4 == v1))));
  LODWORD(STACK[0x2D4]) = -1393729084;
  return v6();
}

uint64_t sub_18D9ED850()
{
  return (*(uint64_t (**)(void))(v4 + 8 * ((((v1 + v2 + 802) ^ 0x794) * (v3 == v0)) ^ (v1 + v2 - 212))))();
}

uint64_t sub_18D9ED880()
{
  return (*(uint64_t (**)(void))(v4 + 8 * ((593 * (v3 == v0 + (v2 ^ (v2 - 1477)) - 1477)) ^ (v1 + v2 - 212))))();
}

uint64_t sub_18D9ED8BC@<X0>(int a1@<W0>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((88
                                * (((37 * (a2 ^ 0xCE)) ^ (((a1 + ((37 * (a2 ^ 0x5CE)) ^ 0x196)) & 0xFFFFFFFE) == ((37 * (a2 ^ 0x5CE)) ^ 0x49096AFD))) & 1)) ^ (37 * (a2 ^ 0x5CE)))))();
}

uint64_t sub_18D9ED92C()
{
  return (*(uint64_t (**)(void))(v4
                                           + 8
                                           * (((((v1 == 0x24CC9A478416F3DCLL) ^ (v0 - 100) ^ 0xD5) & 1)
                                             * ((v0 + 924 - v2 - 249) ^ (v3 - 12))) ^ (v0 + 924))))(LODWORD(STACK[0x2D8]));
}

uint64_t sub_18D9ED994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  int v65 = LODWORD(STACK[0x308])
      - (((LODWORD(STACK[0x308]) << ((v61 - 89) ^ (v64 - 1))) + 351044202) & 0x74FCEE56)
      - 2064336800;
  LODWORD(STACK[0x260]) = v62;
  LODWORD(STACK[0x240]) = v62 - ((2 * v62 + 1339105484) & 0x74FCEE56) - 1570306159;
  LODWORD(STACK[0x220]) = v63 ^ 0xC3EE4D67;
  unint64_t v66 = *(unsigned char **)(v60 + 24);
  uint64_t v67 = __ROR8__(v66, 8);
  unint64_t v68 = (0x150C087CC469144DLL - (v67 & 0xF8FFFFFFFFFFFFFFLL)) & 0x19A889ECFF1A1ED8 | ((v67 & 0xF8FFFFFFFFFFFFFFLL)
                                                                                      - 0x550C087CC469144ELL) & 0xE057761300E5E127;
  uint64_t v69 = __ROR8__(v68 ^ 0xA2238B49AE9B5874, 8);
  v68 ^= 0xF5BC3750722C05E1;
  uint64_t v70 = (v69 + v68) ^ 0x50D4D0E13CBD7177;
  uint64_t v71 = v70 ^ __ROR8__(v68, 61);
  *((void *)&v73 + 1) = __ROR8__(v70, 8) + v71;
  *(void *)&long long v73 = *((void *)&v73 + 1) ^ 0xE5D7DAAEED85A300;
  uint64_t v72 = v73 >> 8;
  *(void *)&long long v73 = __ROR8__(v71, 61);
  unint64_t v74 = (v72 + (*((void *)&v73 + 1) ^ 0xE5D7DAAEED85A300 ^ v73)) ^ 0x8E85997BF8A3092DLL;
  unint64_t v75 = v74 ^ __ROR8__(*((void *)&v73 + 1) ^ 0xE5D7DAAEED85A300 ^ v73, 61);
  uint64_t v76 = *(uint64_t (**)(uint64_t, unint64_t, unint64_t, unint64_t, uint64_t, unint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(STACK[0x330] + 8 * v61);
  unint64_t v77 = (__ROR8__(v74, 8) + v75) ^ 0xCD091F17C02FDE51;
  uint64_t v78 = __ROR8__(v77, 8);
  unint64_t v79 = v77 ^ __ROR8__(v75, 61);
  uint64_t v80 = (v78 + v79) ^ 0x628ABC52894BE762;
  uint64_t v81 = v80 ^ __ROR8__(v79, 61);
  *(void *)&long long v73 = __ROR8__(v80, 8);
  unint64_t v82 = (((2 * (v73 + v81)) & 0xFCA17D98F44813EALL) - (v73 + v81) - 0x7E50BECC7A2409F6) ^ 0xDB6FDD30BA50D16BLL;
  *unint64_t v66 = (((__ROR8__(v82, 8) + (v82 ^ __ROR8__(v81, 61))) ^ 0x1B0BD1982B59C071) >> (8 * (v66 & 7u))) ^ HIBYTE(v65) ^ 0xBA;
  unint64_t v83 = (__ROR8__(v66 + 1, 8) & 0xF8FFFFFFFFFFFFFFLL) - 0x550C087CC469144ELL;
  *(void *)&long long v73 = __ROR8__(v83 ^ 0xB98B02A5518146ACLL, 8);
  v83 ^= 0xEE14BEBC8D361B39;
  uint64_t v84 = (v73 + v83) ^ 0x50D4D0E13CBD7177;
  uint64_t v85 = v84 ^ __ROR8__(v83, 61);
  *(void *)&long long v73 = __ROR8__(v84, 8);
  unint64_t v86 = (((2 * (v73 + v85)) & 0xA793A7F6AC829AE6) - (v73 + v85) - 0x53C9D3FB56414D74) ^ 0x49E1F6AA443B118CLL;
  unint64_t v87 = v86 ^ __ROR8__(v85, 61);
  unint64_t v88 = (__ROR8__(v86, 8) + v87) ^ 0x8E85997BF8A3092DLL;
  uint64_t v89 = __ROR8__(v88, 8);
  unint64_t v90 = v88 ^ __ROR8__(v87, 61);
  unint64_t v91 = (((2 * (v89 + v90)) & 0xF0BAF55B447DEC8ELL) - (v89 + v90) + 0x7A285525DC109B8) ^ 0xCAAB9A459DEED7E9;
  unint64_t v92 = v91 ^ __ROR8__(v90, 61);
  *(void *)&long long v73 = __ROR8__(v91, 8);
  unint64_t v93 = (-2 - ((~(v73 + v92) | 0x1FF46385B66E09DELL) + ((v73 + v92) | 0xE00B9C7A4991F621))) ^ 0x7D7EDFD73F25EEBCLL;
  unint64_t v94 = v93 ^ __ROR8__(v92, 61);
  *(void *)&long long v73 = __ROR8__(v93, 8);
  unint64_t v95 = (0xA4E31C196FB07E65 - ((v73 + v94) | 0xA4E31C196FB07E65) + ((v73 + v94) | 0x5B1CE3E6904F819ALL)) ^ 0x1DC7FE5AFC4A6FBLL;
  unint64_t v96 = v95 ^ __ROR8__(v94, 61);
  *(void *)&long long v73 = __ROR8__(v95, 8);
  v66[1] = (((-2 - ((~((void)v73 + v96) | 0x75B531B3FC4CDC6BLL) + (((void)v73 + v96) | 0x8A4ACE4C03B32394))) ^ 0x6EBEE02BD7151C1ALL) >> (8 * (((_BYTE)v66 + 1) & 7u))) ^ BYTE2(v65) ^ 0x7E;
  unint64_t v97 = (__ROR8__(v66 + 2, 8) & 0xF8FFFFFFFFFFFFFFLL) - 0x550C087CC469144ELL;
  unint64_t v98 = v97 ^ 0xB98B02A5518146ACLL;
  v97 ^= 0xEE14BEBC8D361B39;
  *(void *)&long long v73 = __ROR8__(v98, 8);
  unint64_t v99 = (((2 * (v73 + v97)) & 0x9D263FB38571CE96) - (v73 + v97) + 0x316CE0263D4718B4) ^ 0x61B830C701FA69C3;
  unint64_t v100 = v99 ^ __ROR8__(v97, 61);
  *((void *)&v73 + 1) = __ROR8__(v99, 8) + v100;
  *(void *)&long long v73 = *((void *)&v73 + 1) ^ 0xE5D7DAAEED85A300;
  uint64_t v101 = v73 >> 8;
  *(void *)&long long v73 = __ROR8__(v100, 61);
  unint64_t v102 = (0x8EEAB8D098054CA2
        - ((v101 + (*((void *)&v73 + 1) ^ 0xE5D7DAAEED85A300 ^ v73)) | 0x8EEAB8D098054CA2)
        + ((v101 + (*((void *)&v73 + 1) ^ 0xE5D7DAAEED85A300 ^ v73)) | 0x7115472F67FAB35DLL)) ^ 0xFF90DE549F59BA70;
  unint64_t v103 = v102 ^ __ROR8__(*((void *)&v73 + 1) ^ 0xE5D7DAAEED85A300 ^ v73, 61);
  *(void *)&long long v73 = __ROR8__(v102, 8);
  uint64_t v104 = __ROR8__((-2 - ((~(v73 + v103) | 0x978199C1D991797DLL) + ((v73 + v103) | 0x687E663E266E8682))) ^ 0x5A8886D619BEA72CLL, 8);
  unint64_t v105 = (-2 - ((~(v73 + v103) | 0x978199C1D991797DLL) + ((v73 + v103) | 0x687E663E266E8682))) ^ 0x5A8886D619BEA72CLL ^ __ROR8__(v103, 61);
  unint64_t v106 = (((2 * (v104 + v105)) & 0x9D3B31D97DA9F9B8) - (v104 + v105) - 0x4E9D98ECBED4FCDDLL) ^ 0xD3E8DB41C860E441;
  unint64_t v107 = v106 ^ __ROR8__(v105, 61);
  uint64_t v108 = (__ROR8__(v106, 8) + v107) ^ 0x5AC09C033F8B2761;
  *(void *)&long long v73 = __ROR8__(v66 + 3, 8);
  v66[2] = (((__ROR8__(v108, 8) + (v108 ^ __ROR8__(v107, 61))) ^ 0x1B0BD1982B59C071uLL) >> (8 * (((_BYTE)v66 + 2) & 7u))) ^ BYTE1(v65) ^ 0x77;
  unint64_t v109 = ((2 * ((v73 & 0xF8FFFFFFFFFFFFFFLL) - 0x550C087CC469144ELL)) | 0x20EB39D37CA90794)
       - ((v73 & 0xF8FFFFFFFFFFFFFFLL)
        - 0x550C087CC469144ELL)
       - 0x10759CE9BE5483CALL;
  unint64_t v110 = v109 ^ 0xA9FE9E4CEFD5C566;
  v109 ^= 0xFE612255336298F3;
  *(void *)&long long v73 = __ROR8__(v110, 8);
  uint64_t v111 = __ROR8__((-2 - ((~(v73 + v109) | 0x3D54A62DE74C24CLL) + ((v73 + v109) | 0xFC2AB59D218B3DB3))) ^ 0x53019A83E2C9B33BLL, 8);
  unint64_t v112 = (-2 - ((~(v73 + v109) | 0x3D54A62DE74C24CLL) + ((v73 + v109) | 0xFC2AB59D218B3DB3))) ^ 0x53019A83E2C9B33BLL ^ __ROR8__(v109, 61);
  unint64_t v113 = (-2 - ((~(v111 + v112) | 0x1730E72B835C4191) + ((v111 + v112) | 0xE8CF18D47CA3BE6ELL))) ^ 0xF2E73D856ED9E291;
  unint64_t v114 = v113 ^ __ROR8__(v112, 61);
  *(void *)&long long v73 = __ROR8__(v113, 8);
  unint64_t v115 = (v73 + v114 - ((2 * (v73 + v114)) & 0x9B516F8D43D1232ELL) - 0x325748395E176E69) ^ 0x432D2EBD594B98BALL;
  unint64_t v116 = v115 ^ __ROR8__(v114, 61);
  unint64_t v117 = (__ROR8__(v115, 8) + v116) ^ 0xCD091F17C02FDE51;
  unint64_t v118 = v117 ^ __ROR8__(v116, 61);
  *(void *)&long long v73 = __ROR8__(v117, 8);
  uint64_t v119 = __ROR8__((((2 * (v73 + v118)) | 0x70B9105F53F81A68) - (v73 + v118) + 0x47A377D05603F2CCLL) ^ 0xDAD6347D20B7EA56, 8);
  unint64_t v120 = (((2 * (v73 + v118)) | 0x70B9105F53F81A68) - (v73 + v118) + 0x47A377D05603F2CCLL) ^ 0xDAD6347D20B7EA56 ^ __ROR8__(v118, 61);
  uint64_t v121 = __ROR8__((v119 + v120) ^ 0x5AC09C033F8B2761, 8) + ((v119 + v120) ^ 0x5AC09C033F8B2761 ^ __ROR8__(v120, 61));
  v66[3] = v65 ^ 0x2B ^ (((v121 - ((2 * v121) & 0xCDE279B6265D5694) - 0x190EC324ECD154B6) ^ 0xFDFAED4338776B3BLL) >> (8 * (((_BYTE)v66 + 3) & 7u)));
  return v76(43, 0xFDFAED4338776B3BLL, 0xEE14BEBC8D361B39, 0xB98B02A5518146ACLL, 0x628ABC52894BE762, 0xAAF3F7833B96EBB2, 0xA4E31C196FB07E65, 0x8EEAB8D098054CA2, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60);
}

uint64_t sub_18D9EE6A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int v69 = STACK[0x2E8];
  if (LODWORD(STACK[0x2E8]) == 62934) {
    return (*(uint64_t (**)(void))(STACK[0x330] + 8 * ((1707 * (LODWORD(STACK[0x260]) == 404189086)) ^ 0x3C4)))();
  }
  int v71 = STACK[0x260];
  if (v69 == 44858) {
    return (*(uint64_t (**)(void))(STACK[0x330]
  }
                                + 8
                                * (32
                                 * (((2 * (v71 - ((a69 - 808378164) & 0x9C147D78) + 905105186)) & 0xFFBEF7BA ^ 0x9C147538)
                                  + ((v71 - ((a69 - 808378164) & 0x9C147D78) + 905105186) ^ 0x31D54561)
                                  - 1284854297 == 860498372)
                                 + 1426)))();
  if (v69 == 58084) {
    return (*(uint64_t (**)(void))(STACK[0x330] + 8 * ((57 * (v71 != 404189090)) ^ 0x18F)))();
  }
  return (*(uint64_t (**)(void))(STACK[0x330]
                              + 8
                              * ((1015 * (((*(void *)(STACK[0x288] - 0x24CC9A478416F3C4) == 0) ^ 0xF3) & 1)) ^ 0x1F3)))();
}

uint64_t sub_18D9EF808@<X0>(int a1@<W8>)
{
  STACK[0x2E8] = *(void *)(v3 + 24);
  STACK[0x260] = STACK[0x200] - 0x2DD266C5A2519723;
  return (*(uint64_t (**)(void))(STACK[0x330]
                              + 8 * ((108 * (v2 + v1 - 2145352669 < ((((a1 - 614) | 0x220) + 823) ^ 0x696u))) ^ a1)))();
}

uint64_t sub_18D9EF880()
{
  return (*(uint64_t (**)(void))(STACK[0x330]
                              + 8
                              * ((224
                                * (STACK[0x200] - STACK[0x2E8] - 0x2DD266C5A251972DLL < (unint64_t)((v0 + 737) ^ 0xD6u)
                                                                                      - 1678)) ^ v0)))();
}

uint64_t sub_18D9EF8D8()
{
  return (*(uint64_t (**)(void))(STACK[0x330]
                              + 8 * (((v1 < ((v0 - 1105) ^ 0x1E7u)) * (((v0 - 1608) | 0x402) ^ 0x410)) | v0)))();
}

#error "18D9F09D0: call analysis failed (funcsize=1003)"

void sub_18D9F09D4()
{
}

uint64_t sub_18D9F09DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(void))(STACK[0x330]
                              + 8 * ((((4 * (a8 ^ (v8 - 1813) ^ (v8 - 75))) ^ 0x155) * (v9 == v10)) ^ a8)))();
}

uint64_t sub_18D9F0A20()
{
  return (*(uint64_t (**)(void))(STACK[0x330]
                              + 8 * ((1013 * (((154 * (v0 ^ 0x1F7) - 1686) & v1) == ((v0 + 518) ^ 0x402))) ^ v0)))();
}

#error "18D9F136C: call analysis failed (funcsize=511)"

void sub_18D9F1370()
{
}

uint64_t sub_18D9F1378()
{
  return (*(uint64_t (**)(void))(v1 + 8 * (((v4 + ((v3 + 791) ^ (v5 - 1642)) + 1212) * (v2 == v0)) ^ v3)))();
}

uint64_t sub_18D9F13A8@<X0>(int a1@<W8>)
{
  int v3 = v1 - 1;
  uint64_t v4 = (v3 - v2 - 1018);
  uint64_t v5 = (a1 - 860498373);
  uint64_t v6 = v5 + STACK[0x2E8];
  uint64_t v7 = __ROR8__(v6 + 10, 8);
  unint64_t v8 = (((v7 & 0xF8FFFFFFFFFFFFFFLL) - 0x550C087CC469144ELL) | v4 ^ 0x991A82D9521715FBLL)
     - (((v7 & 0xF8FFFFFFFFFFFFFFLL) - 0x550C087CC469144ELL) | 0x66E57D268D8075E1)
     + 0x66E57D268D8075E1;
  uint64_t v9 = v8 ^ 0x2091807C23FECCB2;
  v8 ^= 0x770E3C65FF499127uLL;
  uint64_t v10 = (__ROR8__(v9, 8) + v8) ^ 0x50D4D0E13CBD7177;
  uint64_t v11 = v10 ^ __ROR8__(v8, 61);
  uint64_t v12 = __ROR8__(v10, 8);
  unint64_t v13 = (((2 * (v12 + v11)) & 0x8B37078EC418761ELL) - (v12 + v11) - 0x459B83C7620C3B10) ^ 0x5FB3A696707667F0;
  unint64_t v14 = v13 ^ __ROR8__(v11, 61);
  uint64_t v15 = __ROR8__(v13, 8);
  uint64_t v16 = __ROR8__((((2 * (v15 + v14)) | 0x909803455169E568) - (v15 + v14) - 0x484C01A2A8B4F2B4) ^ 0xC6C998D95017FB99, 8);
  unint64_t v17 = (((2 * (v15 + v14)) | 0x909803455169E568) - (v15 + v14) - 0x484C01A2A8B4F2B4) ^ 0xC6C998D95017FB99 ^ __ROR8__(v14, 61);
  unint64_t v18 = (((2 * (v16 + v17)) | 0x661703085D1D211ALL) - (v16 + v17) - 0x330B81842E8E908DLL) ^ 0xFE029E93EEA14EDCLL;
  unint64_t v19 = v18 ^ __ROR8__(v17, 61);
  uint64_t v20 = __ROR8__(v18, 8);
  unint64_t v21 = (((2 * (v20 + v19)) | 0x88D82846AB8C19D8) - (v20 + v19) - 0x446C142355C60CECLL) ^ 0x26E6A871DC8DEB8ELL;
  unint64_t v22 = v21 ^ __ROR8__(v19, 61);
  uint64_t v23 = __ROR8__(v21, 8);
  unint64_t v24 = (0x96EEEB3C2090953ELL - ((v23 + v22) | 0x96EEEB3C2090953ELL) + ((v23 + v22) | 0x691114C3DF6F6AC1)) ^ 0x33D188C0E0E44DA0;
  *(unsigned char *)(v6 + 10) = (((__ROR8__(v24, 8) + (v24 ^ __ROR8__(v22, 61))) ^ 0x1B0BD1982B59C071) >> (8 * ((v6 + 10) & 7))) ^ *(unsigned char *)(STACK[0x260] + v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, unint64_t, unint64_t, unint64_t))(STACK[0x330] + 8 * (((a1 != 860498373) | (2 * (a1 != 860498373))) ^ v3)))(0x2091807C23FECCB2, 0x770E3C65FF499127, 0x8B37078EC418761ELL, 0xBA647C389DF3C4F0, 0x5FB3A696707667F0, 0x909803455169E568, 0xB7B3FE5D574B0D4CLL, 0xC6C998D95017FB99);
}

void sub_18D9F1648(uint64_t a1)
{
  int v1 = 228215629 * (((a1 | 0x96E52B02) - (a1 & 0x96E52B02)) ^ 0xAE5A5B57);
  __asm { BRAA            X9, X17 }
}

uint64_t sub_18D9F1704@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11)
{
  BOOL v11 = *(void *)(a1 + 8) == 0;
  LODWORD(STACK[0x56C]) = a9;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 8 * ((223 * (((a9 ^ v11) & 1) == 0)) ^ (a9 + 721))))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11);
}

uint64_t sub_18D9F1744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v19 = *(void *)(a18 + 24);
  STACK[0x4B8] = *(void *)(a18 + 48);
  return (*(uint64_t (**)(void))(a2
                              + 8
                              * ((((466 * (LODWORD(STACK[0x56C]) ^ 0x3A6) + 225) ^ LODWORD(STACK[0x56C]) ^ 0x6D0)
                                * (v18 == v19)) ^ LODWORD(STACK[0x56C]) ^ 0x1CE)))();
}

uint64_t sub_18D9F17A0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 80) = *v2;
  return (*(uint64_t (**)(void))(a1 + 8 * (v3 ^ 0x3B4 | (v3 + 542))))();
}

uint64_t sub_18D9F17E4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(v2 + v6) = *(_OWORD *)(v3 + v6);
  return (*(uint64_t (**)(void))(a2 + 8 * (((v6 != 16) * v5) | v4)))();
}

uint64_t sub_18D9F180C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  STACK[0x630] = *v31;
  STACK[0x638] = v31[1];
  STACK[0x640] = v31[2];
  STACK[0x648] = v31[3];
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 8 * ((((v30 ^ 0x71E) + 313 + (((v30 ^ 0x71E) - 596) | 0x84) - 2630) * (v31 == 0)) | v30 ^ 0x71E)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30);
}

_DWORD *sub_18D9F1884(_DWORD *result)
{
  *result = 1393700936;
  return result;
}

uint64_t sub_18D9F1A04@<X0>(unint64_t a1@<X1>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  STACK[0x4D0] = a1;
  LODWORD(STACK[0x5A0]) = 0;
  LODWORD(STACK[0x48C]) = a2;
  STACK[0x448] = v35 + 0x138A5B0312551205;
  int v36 = 5 * (v34 ^ 0x3A0);
  int v37 = v33[4];
  int v38 = v33[1];
  LODWORD(STACK[0x598]) = v36;
  LODWORD(STACK[0x5B8]) = v38 - ((v38 << (v36 ^ 0xC8)) & 0x4A);
  int v39 = *v33;
  LODWORD(STACK[0x5B0]) = v39 - ((2 * v39) & 0xFFFFFF96);
  int v40 = v33[2];
  LODWORD(STACK[0x5A8]) = v40 - ((2 * v40) & 0x34);
  int v41 = v33[5];
  LODWORD(STACK[0x590]) = v41 - ((2 * v41) & 0x36);
  int v42 = v33[12];
  LODWORD(STACK[0x588]) = v42 - ((2 * v42) & 0xFFFFFFA6);
  int v43 = v33[13];
  LODWORD(STACK[0x580]) = v43 - ((2 * v43) & 0xFFFFFFC7);
  int v197 = -102 - 5 * v40 - ((54 * v40) & 0x34);
  int v44 = v33[11];
  LODWORD(STACK[0x578]) = v44 - ((2 * v44) & 0xFFFFFFDA);
  LODWORD(STACK[0x570]) = 31 * v39 - ((62 * v39) & 0xFFFFFF96);
  LODWORD(STACK[0x560]) = -61 * v41 - ((6 * v41) & 0x36);
  LODWORD(STACK[0x558]) = -43 * v38 - ((42 * v38) & 0x4A);
  LODWORD(STACK[0x550]) = 103 * v43 - ((-50 * v43) & 0xFFFFFFC7);
  LODWORD(STACK[0x548]) = -119 * v42 - ((18 * v42) & 0xFFFFFFA6);
  LODWORD(STACK[0x540]) = (~(86 * v44) | 0x25) - 85 * v44;
  LODWORD(STACK[0x530]) = v37 - ((2 * v37) & 0xFFFFFFB8);
  LODWORD(STACK[0x538]) = 93 * v37 - ((-70 * v37) & 0xFFFFFFB8);
  int v45 = v33[8];
  LODWORD(STACK[0x528]) = v45 - ((2 * v45) & 0xFFFFFFBA);
  unsigned int v195 = 93 - 33 * v45 - ((-66 * v45) & 0xFFFFFFBA);
  int v46 = v33[3];
  LODWORD(STACK[0x518]) = v46 - ((2 * v46) & 0xFFFFFF83);
  LODWORD(STACK[0x520]) = 99 * v46 - ((-58 * v46) & 0xFFFFFF83);
  int v47 = v33[6];
  LODWORD(STACK[0x508]) = v47 - ((2 * v47) & 0xFFFFFF8C);
  unsigned int v191 = 70 - 5 * v47 - ((-10 * v47) & 0xFFFFFF8C);
  int v48 = v33[16];
  LODWORD(STACK[0x510]) = (v48 ^ 0x37) + ((2 * v48) & 0x6E);
  int v49 = v33[14];
  LODWORD(STACK[0x500]) = v49 - ((2 * v49) & 0xFFFFFFC7);
  LODWORD(STACK[0x4F8]) = -((10 * v49) & 0xFFFFFFC7) - 123 * v49;
  int v50 = v33[10];
  LODWORD(STACK[0x4E0]) = v50 - ((2 * v50) & 0x16);
  int v193 = -117 - v50 - ((-2 * v50) & 0x16);
  int v51 = v33[7];
  unsigned int v52 = (2 * v51) & 0xFFFFFF9F;
  LODWORD(STACK[0x4D8]) = v51 - v52;
  LODWORD(STACK[0x4F0]) = -127 * v51 - v52;
  int v53 = v33[9];
  LODWORD(STACK[0x4C0]) = v53 - ((2 * v53) & 0x2C);
  LODWORD(STACK[0x4E8]) = -((-2 * v53) & 0x2C) - 97 * v53;
  int v54 = v33[18];
  LODWORD(STACK[0x4C8]) = (v54 ^ 0x3B) + ((2 * v54) & 0x76);
  int v55 = v33[15];
  int v56 = v55 - ((2 * v55) & 0xFFFFFFF4);
  unsigned int v57 = -((6 * v55) & 0xFFFFFFF4) - 125 * v55;
  int v58 = v33[22];
  int v59 = v33[20];
  int v60 = v33[17];
  unsigned int v61 = (v60 ^ 0xFFFFFFFD) + ((2 * v60) & 0xFFFFFFFB);
  int v62 = v33[19];
  int v63 = v33[29];
  int v169 = -71 * v54 + 9;
  int v171 = 111 * v60 + 73;
  int v172 = -23 * v48 + 37;
  unsigned int v64 = v33[21];
  int v65 = v33[24];
  int v66 = v33[27];
  unsigned int v67 = (v66 ^ 0x71) + ((2 * v66) & 0xFFFFFFE3);
  unsigned int v68 = v33[28];
  int v69 = v33[30];
  int v70 = v33[31];
  unsigned int v71 = (v70 ^ 0xFFFFFFBF) + 2 * (v70 & 0x3F);
  STACK[0x288] = (unint64_t)&STACK[0x650];
  LODWORD(STACK[0x2EC]) = LODWORD(STACK[0x530]) - 36;
  LODWORD(STACK[0x2E0]) = LODWORD(STACK[0x5B8]) + 37;
  LODWORD(STACK[0x2B8]) = LODWORD(STACK[0x4E0]) - 117;
  LODWORD(STACK[0x2C0]) = LODWORD(STACK[0x5B0]) - 53;
  LODWORD(STACK[0x2E8]) = LODWORD(STACK[0x518]) - 63;
  LODWORD(STACK[0x2C4]) = LODWORD(STACK[0x5A8]) - 102;
  LODWORD(STACK[0x2E4]) = LODWORD(STACK[0x590]) - 101;
  LODWORD(STACK[0x2B4]) = LODWORD(STACK[0x508]) + 70;
  LODWORD(STACK[0x2DC]) = LODWORD(STACK[0x588]) + 83;
  LODWORD(STACK[0x2CC]) = LODWORD(STACK[0x528]) + 93;
  LODWORD(STACK[0x2D8]) = LODWORD(STACK[0x4D8]) + 79;
  LODWORD(STACK[0x2BC]) = LODWORD(STACK[0x580]) - 29;
  LODWORD(STACK[0x2C8]) = LODWORD(STACK[0x4C0]) - 106;
  LODWORD(STACK[0x2D0]) = LODWORD(STACK[0x578]) - 19;
  int v179 = LODWORD(STACK[0x570]) - 53;
  int v186 = LODWORD(STACK[0x560]) - 101;
  STACK[0x2F0] = (v56 - 6);
  LODWORD(STACK[0x2D4]) = LODWORD(STACK[0x500]) + 99;
  int v182 = LODWORD(STACK[0x540]) - 18;
  int v190 = LODWORD(STACK[0x538]) - 36;
  int v188 = LODWORD(STACK[0x558]) + 37;
  int v174 = LODWORD(STACK[0x520]) - 63;
  int v176 = LODWORD(STACK[0x4F8]) + 99;
  int v183 = LODWORD(STACK[0x550]) - 29;
  int v180 = LODWORD(STACK[0x4F0]) + 79;
  int v177 = LODWORD(STACK[0x4E8]) - 106;
  int v200 = LODWORD(STACK[0x4C8]) - 50;
  unsigned int v187 = v57 - 6;
  unsigned int v203 = (v58 ^ 0xFFFFFFFB) + ((2 * v58) & 0xFFFFFFF7) + 56;
  int v185 = LODWORD(STACK[0x548]) + 83;
  unsigned int v198 = (v59 ^ 0xFFFFFFFD) + ((2 * v59) & 0xFFFFFFFB) + 15;
  unsigned int v199 = v61 + 76;
  unsigned int v201 = (v62 ^ 0x5F) + ((2 * v62) & 0xFFFFFFBF) - 19;
  unsigned int v204 = (v63 ^ 0xFFFFFFDA) + ((2 * v63) & 0xFFFFFFB4) + 126;
  LODWORD(STACK[0x590]) = -113 * v59;
  HIDWORD(v173) = 97 * v69 + 83;
  int v72 = v33[25];
  int v73 = v33[23];
  int v74 = v33[26];
  int v202 = (v74 ^ 0x7F) + 2 * v74 - 37;
  int v75 = -33 * v58;
  int v76 = (v73 ^ 0x7F) + 2 * v73;
  int v77 = -39 * v73;
  int v78 = 111 * v64;
  int v79 = 81 * v74;
  int v168 = -35 * v62 + 76;
  int v80 = 69 * v66;
  int v81 = 105 * v65;
  LODWORD(STACK[0x5B8]) = -79 * v63;
  LODWORD(STACK[0x5B0]) = -49 * v70;
  int v82 = -115 * v72;
  LODWORD(STACK[0x4A8]) = LODWORD(STACK[0x48C]) + 461907989;
  unsigned int v83 = (v64 ^ 0xFFFFFFFE) + 4 * (v64 >> 1) + 2;
  unsigned int v84 = (v65 ^ 0x4F) + ((2 * v65) & 0xFFFFFF9F) - 79;
  int v85 = (v72 ^ 0x7F) + 2 * v72 - 127;
  unsigned int v86 = (v69 ^ 0x7B) + ((2 * v69) & 0xFFFFFFF7) - 123;
  LODWORD(STACK[0x5A8]) = v71 + 65;
  LODWORD(STACK[0x5A0]) += 16;
  unint64_t v87 = (unsigned __int8 *)STACK[0x4B8];
  int v88 = *(unsigned __int8 *)(STACK[0x4B8] + 2);
  int v89 = v169 - 71 * v88;
  LODWORD(STACK[0x530]) = v200 + v88;
  int v90 = *v87;
  LODWORD(STACK[0x520]) = v90;
  int v91 = v172 - 23 * v90;
  LODWORD(STACK[0x528]) = v91;
  int v92 = v87[4];
  unsigned int v93 = LODWORD(STACK[0x590]) - 113 * v92 - ((2 * (LODWORD(STACK[0x590]) - 113 * v92)) & 0xFFFFFFB6);
  int v94 = v87[3];
  LODWORD(STACK[0x590]) = v168 + v94 * (LODWORD(STACK[0x598]) - 236);
  int v95 = v87[5];
  int v96 = v95 + v83;
  LODWORD(STACK[0x518]) = v78 + 111 * v95;
  int v97 = v87[7];
  int v98 = v97 + v76 - 127;
  int v99 = v77 - 39 * v97;
  int v100 = v87[6];
  int v101 = v87[9];
  int v102 = v101 + v85;
  int v103 = v82 - 115 * v101;
  int v104 = v87[8];
  int v105 = v104 + v84;
  int v106 = v81 + 105 * v104;
  int v107 = v87[11];
  int v108 = v107 + v67 - 113;
  LODWORD(STACK[0x510]) = v80 + 69 * v107;
  int v109 = v87[12];
  LODWORD(STACK[0x508]) = v109 + (v68 ^ 0xFFFFFFFE) + 4 * (v68 >> 1) + 2;
  int v110 = -71 * v68 - 71 * v109;
  int v111 = v87[1];
  LODWORD(STACK[0x4F8]) = v199 - 57 * (v91 + 22) + v111;
  int v112 = v171 + 73 * (v91 + 22) + 111 * v111;
  LODWORD(STACK[0x500]) = v112;
  int v113 = v89 - 65 * v112;
  LODWORD(STACK[0x4F0]) = v113;
  int v114 = v87[15];
  int v115 = v114 + LODWORD(STACK[0x5A8]);
  int v116 = LODWORD(STACK[0x5B0]) - 49 * v114;
  int v117 = 65 * v113 + v201 + v94;
  LODWORD(STACK[0x4E8]) = v198 + v92 + 65 * (v117 - 8396);
  unsigned int v118 = (~(30 * (v117 - 8396) + 58) | 0xFFFFFFCB) + 79 * (v117 - 8396) + 56;
  unsigned int v119 = ((v93 + 91) ^ v118 ^ 0xFFFFFFC1) + 2 * ((v118 ^ 0x1A) & ((v93 + 91) ^ 0x5B));
  LODWORD(STACK[0x4E0]) = v100 + v203;
  int v120 = v96 + 57 * v119;
  LODWORD(STACK[0x570]) = v120;
  int v121 = v75 - 33 * v100 - 97 * v120;
  int v122 = v98 - 21 * v121;
  LODWORD(STACK[0x560]) = v122;
  int v123 = v106 + 109 * v122;
  LODWORD(STACK[0x578]) = v123;
  LODWORD(STACK[0x4C8]) = v103 - 15 * v123;
  int v124 = v87[10];
  int v125 = v79 + 81 * v124;
  LODWORD(STACK[0x4D8]) = v124 + v202;
  int v126 = v87[13];
  int v127 = LODWORD(STACK[0x5B8]) - 79 * v126;
  LODWORD(STACK[0x5B8]) = v126 + v204;
  LODWORD(v87) = v87[14];
  unsigned int v128 = v87 + v86;
  LODWORD(STACK[0x4C0]) = HIDWORD(v173) + 97 * v87;
  LODWORD(STACK[0x580]) = v121;
  int v129 = v99 + 51 * v121;
  LODWORD(STACK[0x558]) = v129;
  int v130 = v105 + 109 * v129;
  LODWORD(STACK[0x550]) = v130;
  int v131 = v102 + 125 * v130;
  LODWORD(STACK[0x538]) = v131;
  int v132 = v125 - 87 * v131;
  int v133 = v108 - 125 * v132;
  LODWORD(STACK[0x540]) = v133;
  int v134 = v110 - 121 * v133;
  LODWORD(STACK[0x548]) = v134;
  int v135 = v127 - 75 * v134;
  unsigned int v136 = v128 - 77 * v135;
  int v137 = v116 + 69 * v136;
  LODWORD(STACK[0x5B0]) = v137;
  LODWORD(v87) = (v179 ^ 0xFFFFFFCB) + 121 * v137 - ((2 * ((v179 ^ 0xFFFFFFCB) + 121 * v137)) & 0xFFFFFF96);
  LODWORD(STACK[0x588]) = v136;
  int v138 = v115 - 85 * v136;
  unsigned int v139 = LODWORD(STACK[0x2C0]) ^ 0xFFFFFFCB;
  LODWORD(STACK[0x5A8]) = v138;
  int v140 = v139 + 73 * v138 + (~(2 * (v139 + 73 * v138)) | 0x69);
  HIDWORD(v178) = v87 - 53;
  unsigned int v141 = -15 * (HIDWORD(v178) ^ 0xFFFFFFCB)
       + (LODWORD(STACK[0x2E0]) ^ 0x25)
       - ((2 * (-15 * (HIDWORD(v178) ^ 0xFFFFFFCB) + (LODWORD(STACK[0x2E0]) ^ 0x25))) & 0x4A)
       + 37;
  LODWORD(v87) = LODWORD(STACK[0x2C4]) ^ 0xFFFFFF9A;
  LODWORD(STACK[0x2E0]) = v141;
  v141 ^= 0x25u;
  LODWORD(STACK[0x4B0]) = v141;
  LODWORD(v87) = v87 + 85 * v141 - ((2 * (v87 + 85 * v141)) & 0x34);
  unsigned int v189 = (v188 ^ 0x25)
       - 123 * (HIDWORD(v178) ^ 0xFFFFFFCB)
       + (~(2 * ((v188 ^ 0x25) - 123 * (HIDWORD(v178) ^ 0xFFFFFFCB))) | 0xFFFFFFB5)
       + 38;
  unsigned int v142 = (LODWORD(STACK[0x2E8]) ^ 0xFFFFFFC1)
       - 65
       * (((v197 ^ 0xFFFFFF9A) + 123 * (v189 ^ 0x25) - ((2 * ((v197 ^ 0xFFFFFF9A) + 123 * (v189 ^ 0x25))) & 0x34) - 102) ^ 0xFFFFFF9A);
  unsigned int v143 = v142 - ((2 * v142) & 0xFFFFFF83) - 63;
  unsigned int v144 = LODWORD(STACK[0x2EC]) ^ 0xFFFFFFDC;
  LODWORD(STACK[0x2E8]) = v143;
  uint64_t v145 = v143 ^ 0xFFFFFFC1;
  int v146 = v144 - 97 * v145 - ((2 * (v144 - 97 * v145)) & 0xFFFFFFB8);
  LODWORD(STACK[0x2C4]) = v87 - 102;
  LODWORD(STACK[0x4A0]) = (v87 - 102) ^ 0xFFFFFF9A;
  uint64_t v147 = (v174 ^ 0xFFFFFFC1)
       - 81 * ((v87 - 102) ^ 0xFFFFFF9A)
       - ((2 * ((v174 ^ 0xFFFFFFC1) - 81 * ((v87 - 102) ^ 0xFFFFFF9A))) & 0xFFFFFF83);
  int v148 = ((v190 ^ 0xFFFFFFDC) - 61 * v145 - ((2 * ((v190 ^ 0xFFFFFFDC) - 61 * v145)) & 0xFFFFFFB8) - 36) ^ 0xFFFFFFDC;
  LODWORD(v87) = (LODWORD(STACK[0x2B4]) ^ 0x46)
               - 17
               * (((v186 ^ 0xFFFFFF9B) + 75 * v148 - ((2 * ((v186 ^ 0xFFFFFF9B) + 75 * v148)) & 0x36) - 101) ^ 0xFFFFFF9B);
  unsigned int v149 = v87 - ((2 * v87) & 0xFFFFFF8C);
  unsigned int v150 = (LODWORD(STACK[0x2E4]) ^ 0xFFFFFF9B)
       - 39 * v148
       - ((2 * ((LODWORD(STACK[0x2E4]) ^ 0xFFFFFF9B) - 39 * v148)) & 0x36)
       - 101;
  LODWORD(STACK[0x2E4]) = v150;
  unsigned int v192 = (v191 ^ 0x46) - 65 * (v150 ^ 0xFFFFFF9B) - ((2 * ((v191 ^ 0x46) - 65 * (v150 ^ 0xFFFFFF9B))) & 0xFFFFFF8C) + 70;
  LODWORD(v181) = (v180 ^ 0x4F) - 45 * (v192 ^ 0x46) - ((2 * ((v180 ^ 0x4F) - 45 * (v192 ^ 0x46))) & 0xFFFFFF9F) + 79;
  LODWORD(v87) = (LODWORD(STACK[0x2CC]) ^ 0x5D)
               + 115 * (v181 ^ 0x4F)
               - ((2 * ((LODWORD(STACK[0x2CC]) ^ 0x5D) + 115 * (v181 ^ 0x4F))) & 0xFFFFFFBA);
  int v151 = (LODWORD(STACK[0x2D8]) ^ 0x4F) + 83 * (v192 ^ 0x46);
  unsigned int v152 = v151 - ((2 * v151) & 0xFFFFFF9F) + 79;
  LODWORD(STACK[0x2D8]) = v152;
  unint64_t v153 = v152 ^ 0x4F;
  STACK[0x498] = v153;
  int v154 = v87 + 93;
  LODWORD(v87) = LODWORD(STACK[0x2C8]) ^ 0xFFFFFF96;
  LODWORD(STACK[0x2CC]) = v154;
  unint64_t v155 = v154 ^ 0x5Du;
  STACK[0x490] = v155;
  int v196 = (v195 ^ 0x5D) - 83 * v153 - ((2 * ((v195 ^ 0x5D) - 83 * v153)) & 0xFFFFFFBA) + 93;
  unsigned int v156 = -15 * (v196 ^ 0x5D) - ((-30 * (v196 ^ 0x5D)) & 0xFFFFFFAE) - 41;
  LODWORD(v153) = v177 ^ 0x41 ^ v156;
  int v157 = v153 + 2 * ((v156 ^ 0x57) & (v177 ^ 0x16));
  LODWORD(v87) = v87 - 79 * v155 - ((2 * (v87 - 79 * v155)) & 0x2C) - 106;
  LODWORD(STACK[0x2C8]) = v87;
  unsigned int v194 = (v193 ^ 0xFFFFFF8B)
       - 19 * (v87 ^ 0xFFFFFF96)
       - ((2 * ((v193 ^ 0xFFFFFF8B) - 19 * (v87 ^ 0xFFFFFF96))) & 0x16)
       - 117;
  unsigned int v158 = (LODWORD(STACK[0x2D0]) ^ 0xFFFFFFED) - 35 * (v194 ^ 0xFFFFFF8B);
  LODWORD(v178) = v157 + ~(2 * (v157 & 0x17 ^ v153 & 1)) - 105;
  int v159 = (LODWORD(STACK[0x2B8]) ^ 0xFFFFFF8B)
       + 13 * (v178 ^ 0xFFFFFF96)
       - ((2 * ((LODWORD(STACK[0x2B8]) ^ 0xFFFFFF8B) + 13 * (v178 ^ 0xFFFFFF96))) & 0x16);
  unsigned int v160 = v158 - ((2 * v158) & 0xFFFFFFDA) - 19;
  LODWORD(STACK[0x2D0]) = v160;
  HIDWORD(v181) = (v182 ^ 0xFFFFFFED)
                - 97 * (v194 ^ 0xFFFFFF8B)
                - ((2 * ((v182 ^ 0xFFFFFFED) - 97 * (v194 ^ 0xFFFFFF8B))) & 0xFFFFFFDA)
                - 19;
  LODWORD(v155) = (LODWORD(STACK[0x2DC]) ^ 0x53)
                - 123 * (HIDWORD(v181) ^ 0xFFFFFFED)
                + (~(2 * ((LODWORD(STACK[0x2DC]) ^ 0x53) - 123 * (HIDWORD(v181) ^ 0xFFFFFFED))) | 0x59)
                + 84;
  unsigned int v161 = LODWORD(STACK[0x2BC]) ^ 0xFFFFFFE3;
  LODWORD(STACK[0x2DC]) = v155;
  int v162 = v161 - 79 * (v155 ^ 0x53) - ((2 * (v161 - 79 * (v155 ^ 0x53))) & 0xFFFFFFC7);
  HIDWORD(v184) = (v185 ^ 0x53)
                - (v160 ^ 0xFFFFFFED)
                + 16 * (v160 ^ 0xFFFFFFED)
                + (~(2 * ((v185 ^ 0x53) - (v160 ^ 0xFFFFFFED) + 16 * (v160 ^ 0xFFFFFFED))) | 0x59)
                + 84;
  LODWORD(v184) = (v183 ^ 0xFFFFFFE3)
                - 65 * (HIDWORD(v184) ^ 0x53)
                - ((2 * ((v183 ^ 0xFFFFFFE3) - 65 * (HIDWORD(v184) ^ 0x53))) & 0xFFFFFFC7)
                - 29;
  LODWORD(v155) = (v184 ^ 0xFFFFFFE3)
                + (LODWORD(STACK[0x2D4]) ^ 0x63)
                - ((2 * ((v184 ^ 0xFFFFFFE3) + (LODWORD(STACK[0x2D4]) ^ 0x63))) & 0xFFFFFFC7)
                + 99;
  int v163 = STACK[0x2F0] ^ 0xFFFFFFFA;
  LODWORD(STACK[0x2D4]) = v155;
  STACK[0x2F0] = v163 + 59 * (v155 ^ 0x63) + (~(2 * (v163 + 59 * (v155 ^ 0x63))) | 0xB) - 5;
  LODWORD(v173) = LODWORD(STACK[0x528])
                - 23
                * (((v187 ^ 0xFFFFFFFA)
                  + 49 * (v155 ^ 0x63)
                  - ((2 * ((v187 ^ 0xFFFFFFFA) + 49 * (v155 ^ 0x63))) & 0xFFFFFFF4)
                  - 6) ^ 0xFFFFFFFA);
  BOOL v164 = LODWORD(STACK[0x4A8]) < 0x56699FB6;
  if (LODWORD(STACK[0x4A8]) >= 0x56699FB6) {
    BOOL v164 = LODWORD(STACK[0x4A8]) > 0x56699FC6;
  }
  HIDWORD(v170) = LODWORD(STACK[0x500]) + 45;
  LODWORD(v170) = LODWORD(STACK[0x4F0]) + 28;
  uint64_t v165 = LODWORD(STACK[0x4C8]);
  HIDWORD(a24) = LODWORD(STACK[0x590]) - 11 * (LODWORD(STACK[0x530]) - 39 * LODWORD(STACK[0x4F8])) - 331;
  LODWORD(STACK[0x590]) = v119;
  uint64_t v166 = (LODWORD(STACK[0x508]) - 77 * (LODWORD(STACK[0x510]) + 79 * v132));
  LODWORD(STACK[0x5B8]) = v135;
  HIDWORD(v173) = LODWORD(STACK[0x4C0]) - 45 * v135;
  LODWORD(STACK[0x2C0]) = v140 - 52;
  LODWORD(STACK[0x2EC]) = v146 - 36;
  LODWORD(v175) = v147 - 63;
  HIDWORD(v175) = (v176 ^ 0x63)
                - 123 * (v184 ^ 0xFFFFFFE3)
                - ((2 * ((v176 ^ 0x63) - 123 * (v184 ^ 0xFFFFFFE3))) & 0xFFFFFFC7)
                + 99;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(STACK[0x4D0] + 8 * (LODWORD(STACK[0x598]) ^ (4 * !v164))))(4294967261, v166, v165, v149 + 70, (v159 - 117), v147, v145, (v162 - 29), a3, 0x530000004CLL, a5, a6, a7, a8, a9, a10, a11, a12, a13,
           a14,
           a15,
           a16,
           a17,
           a18,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           v170,
           v173,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           v175,
           v178,
           v181,
           v184);
}

void sub_18D9F29F8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, int a8)
{
  LODWORD(STACK[0x2B4]) = a4;
  LODWORD(STACK[0x2B8]) = a5;
  LODWORD(STACK[0x2BC]) = a8;
  JUMPOUT(0x18D9F20F8);
}

uint64_t sub_18D9F2A3C(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6, unsigned __int8 a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,int a48,int a49,int a50,int a51,int a52,int a53,int a54,int a55)
{
  int v64 = (LODWORD(STACK[0x598]) - 1949013202) & 0x742B937F;
  HIDWORD(v186) = (v64 ^ 0x46) + v63;
  STACK[0x300] = STACK[0x4B8] - LODWORD(STACK[0x5A0]) + v61 + 0x2DAF9BBA5E7BAD1ELL;
  int v65 = STACK[0x2C0];
  unint64_t v66 = (((unint64_t)(LODWORD(STACK[0x2C0]) ^ 0xCBu) << 56) | ((unint64_t)LODWORD(STACK[0x4B0]) << 48) | ((unint64_t)LODWORD(STACK[0x4A0]) << 40) | ((unint64_t)a7 << 32) | ((unint64_t)(LODWORD(STACK[0x2EC]) ^ 0xDCu) << 24) | ((unint64_t)v57 << 16) | ((unint64_t)(a4 ^ 0x46u) << 8)) ^ STACK[0x498];
  unint64_t v67 = (STACK[0x490] << 56) | ((unint64_t)v55 << 48) | ((unint64_t)(a5 ^ 0x8Bu) << 40);
  STACK[0x298] = v66 ^ 0xCBD0B75E7B1668F5;
  unint64_t v68 = (v67 & 0xFFFFFFFF000000FFLL | ((unint64_t)v56 << 32) | ((unint64_t)v58 << 24) | ((unint64_t)(a8 ^ 0xE3u) << 16) | ((unint64_t)v59 << 8)) ^ STACK[0x2F0];
  STACK[0x290] = v68 ^ 0x2EE17E3F1B266A62;
  STACK[0x2A8] = v68 ^ 0x2FBF9DB608D07BFALL;
  STACK[0x2A0] = v66 ^ 0x1C9C806447C482F1;
  LODWORD(v186) = LODWORD(STACK[0x48C]) - 149552686;
  HIDWORD(a19) = LODWORD(STACK[0x48C]) - 1652650109;
  int v69 = STACK[0x56C];
  STACK[0x4B0] = (LODWORD(STACK[0x56C]) + 186689551) & 0xF4DF55FE;
  STACK[0x4E0] = (v69 - 573018105) & 0x22278F7F;
  STACK[0x4D8] = (v69 - 128182325) & 0x7A3E7BB ^ 0x30BLL;
  LODWORD(v185) = v62 + 118;
  HIDWORD(v185) = LODWORD(STACK[0x590]) + 12;
  LODWORD(v184) = LODWORD(STACK[0x558]) + 26;
  HIDWORD(v184) = LODWORD(STACK[0x580]) + 51;
  LODWORD(v183) = a3 + 75;
  HIDWORD(v183) = LODWORD(STACK[0x578]) + 75;
  LODWORD(v182) = LODWORD(STACK[0x548]) + 126;
  HIDWORD(v182) = v60 + 90;
  LODWORD(v181) = LODWORD(STACK[0x5B0]) + 60;
  HIDWORD(v181) = LODWORD(STACK[0x5B8]) + 88;
  int v191 = LODWORD(STACK[0x588]) + 83;
  int v193 = LODWORD(STACK[0x538]) + 75;
  int v195 = LODWORD(STACK[0x540]) + 49;
  int v70 = LODWORD(STACK[0x560]) + 26;
  int v188 = LODWORD(STACK[0x5A8]) + 60;
  int v190 = LODWORD(STACK[0x550]) + 75;
  int v71 = LODWORD(STACK[0x570]) + 118;
  STACK[0x280] = (unint64_t)&STACK[0x750];
  LODWORD(STACK[0x5B0]) = 1262421197;
  STACK[0x4C0] = 0xD7564F027E6BC667;
  STACK[0x4C8] = 0xD7564F027E6BC667;
  STACK[0x318] = 0xD7564F027E6BC667;
  STACK[0x320] = 0xD7564F027E6BC667;
  v64 += 227;
  LODWORD(STACK[0x570]) = v64;
  int v72 = a49 - 121 * a55 + 125;
  int v73 = a50 + v72 * (v64 ^ 0xB) - 25;
  int v74 = a51 - v73 + 32 * v73 - 23;
  int v75 = a48 + 61 * v74 - 28;
  LODWORD(v187) = v71 - 111 * v75 + 52;
  int v76 = a53 - 33 * v187 + 54;
  HIDWORD(v187) = v70 - 125 * v76 - 25;
  HIDWORD(v189) = v190 - 81 * HIDWORD(v187) + 58;
  int v77 = a52 + 69 * (v193 + 11 * HIDWORD(v189) - 57) - 55;
  LODWORD(v194) = v193 + 11 * HIDWORD(v189) - 57;
  HIDWORD(v194) = v195 + 3 * v77 - 14;
  HIDWORD(v192) = a2 + 126 + 33 * HIDWORD(v194) - 81;
  int v78 = a54 + 95 * HIDWORD(v192) + 62;
  LODWORD(v192) = v191 + 87 * v78 + 24;
  LODWORD(v189) = v188 - 59 * v192 + 33;
  int v79 = (v65 ^ 0xFFFFFFCB) - 21 * v189 - 20 - ((2 * ((v65 ^ 0xFFFFFFCB) - 21 * v189 - 20)) & 0xFFFFFF96) - 53;
  LODWORD(v68) = LODWORD(STACK[0x2E0]) ^ 0x25;
  LODWORD(STACK[0x2C0]) = v79;
  v79 ^= 0xFFFFFFCB;
  int v80 = -15 * v79 + v68 - ((2 * (-15 * v79 + v68)) & 0x4A) + 37;
  LODWORD(v68) = LODWORD(STACK[0x2C4]) ^ 0xFFFFFF9A;
  LODWORD(STACK[0x2E0]) = v80;
  int v81 = v80 ^ 0x25;
  LODWORD(v68) = v68 + 83 * v81 - ((2 * (v68 + 83 * v81)) & 0x34) - 102;
  LODWORD(v66) = LODWORD(STACK[0x2E8]) ^ 0xFFFFFFC1;
  LODWORD(STACK[0x2C4]) = v68;
  LODWORD(v68) = v68 ^ 0xFFFFFF9A;
  int v82 = v66 + 53 * v68 - ((2 * (v66 + 53 * v68)) & 0xFFFFFF83) - 63;
  unsigned int v83 = LODWORD(STACK[0x2EC]) ^ 0xFFFFFFDC;
  LODWORD(STACK[0x2E8]) = v82;
  LOBYTE(v66) = v82 ^ 0xC1;
  unsigned int v84 = v83 - 95 * (v82 ^ 0xFFFFFFC1) + (~(2 * (v83 - 95 * (v82 ^ 0xFFFFFFC1))) | 0x47) - 35;
  unsigned int v85 = LODWORD(STACK[0x2E4]) ^ 0xFFFFFF9B;
  LODWORD(STACK[0x2EC]) = v84;
  v84 ^= 0xFFFFFFDC;
  int v86 = v85 + 61 * v84 - ((2 * (v85 + 61 * v84)) & 0x36) - 101;
  LODWORD(STACK[0x2E4]) = v86;
  char v87 = v86 ^ 0x9B;
  unsigned int v88 = (a4 ^ 0x46) - 101 * (v86 ^ 0xFFFFFF9B) - ((2 * ((a4 ^ 0x46) - 101 * (v86 ^ 0xFFFFFF9B))) & 0xFFFFFF8C) + 70;
  int v89 = LODWORD(STACK[0x2D8]) ^ 0x4F;
  LODWORD(STACK[0x2B4]) = v88;
  v88 ^= 0x46u;
  unsigned int v90 = -127 * v88 + v89 - ((2 * (-127 * v88 + v89)) & 0xFFFFFF9F) + 79;
  int v91 = LODWORD(STACK[0x2CC]) ^ 0x5D;
  LODWORD(STACK[0x2D8]) = v90;
  char v92 = v90 ^ 0x4F;
  unsigned int v93 = v91 - 107 * (v90 ^ 0x4F) - ((2 * (v91 - 107 * (v90 ^ 0x4F))) & 0xFFFFFFBA) + 93;
  unsigned int v94 = LODWORD(STACK[0x2C8]) ^ 0xFFFFFF96;
  LODWORD(STACK[0x2CC]) = v93;
  int v95 = v93 ^ 0x5D;
  int v96 = v94 - 107 * (v93 ^ 0x5D) - ((2 * (v94 - 107 * (v93 ^ 0x5D))) & 0x2C) - 106;
  LODWORD(STACK[0x2C8]) = v96;
  char v97 = v96 ^ 0x96;
  unsigned int v98 = -7 * (v96 ^ 0xFFFFFF96) + (a5 ^ 0xFFFFFF8B) - ((2 * (-7 * (v96 ^ 0xFFFFFF96) + (a5 ^ 0xFFFFFF8B))) & 0x16) - 117;
  unsigned int v99 = LODWORD(STACK[0x2D0]) ^ 0xFFFFFFED;
  LODWORD(STACK[0x2B8]) = v98;
  v98 ^= 0xFFFFFF8B;
  unsigned int v100 = v99 + 69 * v98 - ((2 * (v99 + 69 * v98)) & 0xFFFFFFDA) - 19;
  int v101 = LODWORD(STACK[0x2DC]) ^ 0x53;
  LODWORD(STACK[0x2D0]) = v100;
  v100 ^= 0xFFFFFFED;
  unsigned int v102 = -15 * v100 + v101 - ((2 * (-15 * v100 + v101)) & 0xFFFFFFA6) + 83;
  LODWORD(STACK[0x2DC]) = v102;
  int v103 = v102 ^ 0x53;
  unsigned int v104 = 3 * v103 + (a8 ^ 0xFFFFFFE3) - ((2 * (3 * v103 + (a8 ^ 0xFFFFFFE3))) & 0xFFFFFFC7) - 29;
  int v105 = LODWORD(STACK[0x2D4]) ^ 0x63;
  LODWORD(STACK[0x2BC]) = v104;
  v104 ^= 0xFFFFFFE3;
  int v106 = v105 + 105 * v104 + (~(2 * (v105 + 105 * v104)) | 0x39) + 100;
  int v107 = STACK[0x2F0] ^ 0xFFFFFFFA;
  LODWORD(STACK[0x2D4]) = v106;
  int v108 = v107 + 23 * (v106 ^ 0x63) + (~(2 * (v107 + 23 * (v106 ^ 0x63))) | 0xB);
  unint64_t v109 = (-39 * v92) | ((unint64_t)(111 * v87) << 16) | ((unint64_t)(-35 * v66) << 32) | ((unint64_t)(-113 * v84) << 24) | ((unint64_t)(-23 * v79) << 56) | ((unint64_t)(111 * v81) << 48) | ((unint64_t)(-71 * v68) << 40) | ((unint64_t)(-33 * v88) << 8);
  unint64_t v110 = v109 - 0x37940BF97F933881 - ((2 * v109) & 0x90D7E80D00D98EFELL);
  unint64_t v111 = ((unint64_t)(-71 * v103) << 24) | ((unint64_t)(-79 * v104) << 16) | ((unint64_t)(105 * v95) << 56) | ((unint64_t)(-115 * v97) << 48) | ((unint64_t)(81 * v98) << 40) | ((unint64_t)(69 * v100) << 32) | ((unint64_t)(97 * (v106 ^ 0x63)) << 8);
  unint64_t v112 = (v108 - 5);
  STACK[0x2F0] = v112;
  unint64_t v113 = v111 & 0xFFFFFFFFFFFFFF00 | (-49 * ((v108 - 5) ^ 0xFA));
  STACK[0x2A8] ^= v113;
  STACK[0x290] ^= v113;
  STACK[0x2A0] ^= 0xC86BF406806CC77FLL ^ v110;
  STACK[0x298] ^= 0xC86BF406806CC77FLL ^ v110;
  unint64_t v114 = ((unint64_t)(111 * v72 + 89) << 48) | ((unint64_t)(HIDWORD(a10)
                                                                                         - 23
                                                                                         * (a55
                                                                                          - 45
                                                                                          * (v112 ^ 0xFFFFFFFA))) << 56) | ((unint64_t)(-71 * v73 + 127) << 40) | ((unint64_t)(100 - 35 * v74) << 32) | ((unint64_t)(a10 - 113 * v75) << 24) | ((unint64_t)(111 * v187 - 42) << 16) | (-10 - 39 * BYTE4(v187)) | ((unint64_t)(-109 - 33 * v76) << 8);
  unint64_t v115 = ((unint64_t)(81 * v77 - 122) << 40) | ((unint64_t)(69 * BYTE4(v194) - 53) << 32) | ((unint64_t)(105 * HIDWORD(v189) + 61) << 56) | ((unint64_t)(-115 * v194 - 79) << 48) | ((unint64_t)(-71 * BYTE4(v192) - 14) << 24) | ((unint64_t)(-79 * v78 + 40) << 16) | ((unint64_t)(97 * v192 - 115) << 8) | (-49 * v189 + 124);
  LODWORD(v66) = STACK[0x570];
  STACK[0x278] = v115 ^ STACK[0x4C8];
  STACK[0x318] ^= v115;
  STACK[0x270] = v114 ^ STACK[0x4C0];
  STACK[0x320] ^= v114;
  STACK[0x508] = LODWORD(STACK[0x3DC]);
  STACK[0x558] = LODWORD(STACK[0x3B0]);
  STACK[0x5B8] = LODWORD(STACK[0x398]);
  LODWORD(STACK[0x2FC]) = STACK[0x5B0];
  STACK[0x560] = LODWORD(STACK[0x3CC]);
  STACK[0x578] = LODWORD(STACK[0x3C4]);
  STACK[0x548] = LODWORD(STACK[0x3A0]);
  STACK[0x510] = LODWORD(STACK[0x3E8]);
  STACK[0x5A0] = LODWORD(STACK[0x39C]);
  LODWORD(STACK[0x590]) = STACK[0x3EC];
  STACK[0x538] = LODWORD(STACK[0x394]);
  STACK[0x598] = LODWORD(STACK[0x3E0]);
  STACK[0x5B0] = LODWORD(STACK[0x390]);
  STACK[0x5A8] = LODWORD(STACK[0x3B8]);
  LODWORD(STACK[0x588]) = STACK[0x3C8];
  STACK[0x550] = LODWORD(STACK[0x3AC]);
  STACK[0x580] = LODWORD(STACK[0x3D0]);
  HIDWORD(a39) = 98;
  LODWORD(STACK[0x328]) = 14;
  unint64_t v116 = STACK[0x300];
  unint64_t v117 = STACK[0x300] - 0x2DAF9BBA5E7BAD1ELL;
  STACK[0x530] = 3 * (v66 ^ 0x520);
  unint64_t v118 = v117 - ((v117 << ((3 * (v66 ^ 0x20)) ^ 0x6F)) & 0x363DCBA41F215E04) + 0x1B1EE5D20F90AF02;
  int v119 = v66;
  uint64_t v120 = (v118 >> 3 << 59) - 0x550C087CC469144ELL + ((v118 >> 8) ^ 0x1B1EE5D20F90AFLL);
  STACK[0x540] = v117;
  LOBYTE(v66) = (v117 << ((v66 ^ 0x20u) - 119)) & 0x38;
  unint64_t v121 = v120 - 0x588EB678E529AE37 + ((2 * v120) & 0x42E2930E35ACA390 ^ 0xFBFFFFFFFFFFFFFFLL);
  *((void *)&v122 + 1) = (v120 + 450253257 + ~((2 * v120) & 0x35ACA390)) ^ 0x64u;
  *(void *)&long long v122 = v121 ^ 0x1EFA4B224B571700;
  uint64_t v123 = (v122 >> 8)
       + (v121 ^ 0x4965F73B97E04AF1)
       - 0x410659907BCBDFEBLL
       - ((2 * ((v122 >> 8) + (v121 ^ 0x4965F73B97E04AF1))) & 0x7DF34CDF0868402ALL);
  *((void *)&v122 + 1) = v121 ^ 0x965F73B97E04AF1;
  *(void *)&long long v122 = v121 ^ 0x4000000000000000;
  unint64_t v124 = v123 ^ ((v122 >> 61) - 0x410659907BCBDFEBLL - ((2 * (v122 >> 61)) & 0x7DF34CDF0868402ALL));
  *((void *)&v122 + 1) = v123 ^ 0x62;
  *(void *)&long long v122 = v123 ^ 0xEE2D768EB8895100;
  uint64_t v125 = (v124 ^ 0x50D4D0E13CBD7177)
       + (v122 >> 8)
       + 0xEFED3F3BB9D3762
       - ((2 * ((v124 ^ 0x50D4D0E13CBD7177) + (v122 >> 8))) & 0x1DFDA7E7773A6EC4);
  unint64_t v126 = (((8 * v124) ^ 0x86A68709E5EB8BB8)
        - 0x63346AF52C8E9C68
        - ((2 * ((8 * v124) ^ 0x86A68709E5EB8BB8)) & 0x39972A15A6E2C730)
        + (v124 >> 61)) ^ 0x9CCB950AD371639ALL;
  uint64_t v127 = v126 + 0xEFED3F3BB9D3762 - ((2 * v126) & 0x1DFDA7E7773A6EC4);
  *((void *)&v122 + 1) = v125 ^ 0x62;
  *(void *)&long long v122 = v125 ^ 0xEFED3F3BB9D3700;
  uint64_t v128 = (v127 ^ v125 ^ 0xE5D7DAAEED85A300) + ((v122 >> 8) ^ 0xE5D7DAAEED85A3);
  uint64_t v129 = v128 - 0x69268C134A4484E0 - ((2 * v128) & 0x2DB2E7D96B76F640);
  *((void *)&v122 + 1) = v127 ^ v125 ^ 0x5D7DAAEED85A300;
  *(void *)&long long v122 = v127 ^ ~v125;
  uint64_t v130 = (v122 >> 61) - 0x69268C134A4484E0 - ((2 * (v122 >> 61)) & 0x2DB2E7D96B76F640);
  *((void *)&v122 + 1) = v129 ^ 0xD;
  *(void *)&long long v122 = v129 ^ 0x185CEA974D187200;
  uint64_t v131 = v130 ^ v129;
  uint64_t v132 = (v122 >> 8)
       + (v131 ^ 0x8E85997BF8A3092DLL)
       + 0x4DD9705EBA486DEDLL
       - ((2 * ((v122 >> 8) + (v131 ^ 0x8E85997BF8A3092DLL))) & 0x9BB2E0BD7490DBDALL);
  *((void *)&v122 + 1) = v131 ^ 0xE85997BF8A3092DLL;
  *(void *)&long long v122 = v131 ^ 0x8000000000000000;
  uint64_t v133 = ((v122 >> 61) + 0x4DD9705EBA486DEDLL - ((2 * (v122 >> 61)) & 0x9BB2E0BD7490DBDALL)) ^ v132;
  *((void *)&v122 + 1) = v132 ^ 0xBC;
  *(void *)&long long v122 = v132 ^ 0x80D06F497A67B300;
  uint64_t v134 = (v133 ^ 0xCD091F17C02FDE51)
       + (v122 >> 8)
       - 0x68E357328310390DLL
       - ((2 * ((v133 ^ 0xCD091F17C02FDE51) + (v122 >> 8))) & 0x2E39519AF9DF8DE6);
  *((void *)&v122 + 1) = v133 ^ 0xD091F17C02FDE51;
  *(void *)&long long v122 = v133 ^ 0xC000000000000000;
  uint64_t v135 = ((v122 >> 61) - 0x68E357328310390DLL - ((2 * (v122 >> 61)) & 0x2E39519AF9DF8DE6)) ^ v134;
  *((void *)&v122 + 1) = v134 ^ 3;
  *(void *)&long long v122 = v134 ^ 0x971CA8CD7CEFC6F0;
  uint64_t v136 = v122 >> 3;
  *((void *)&v122 + 1) = v136 ^ 0xE3FB8425F3302DLL;
  *(void *)&long long v122 = v136 ^ 0x6000000000000000;
  uint64_t v137 = v122 >> 61;
  *((void *)&v122 + 1) = v137 ^ 9;
  *(void *)&long long v122 = v137 ^ 0x65956073A6D26600;
  uint64_t v138 = v122 >> 8;
  *((void *)&v122 + 1) = v135 ^ 0x28ABC52894BE762;
  *(void *)&long long v122 = v135 ^ 0x6000000000000000;
  uint64_t v139 = v138 + (v135 ^ 0x628ABC52894BE762);
  uint64_t v140 = ((v122 >> 61) - ((2 * (v122 >> 61)) & 0x78F9704FD9E954BALL) + 0x3C7CB827ECF4AA5DLL) ^ 0x66BC2424D37F8D3CLL ^ v139;
  *((void *)&v122 + 1) = v139 ^ 0x61;
  *(void *)&long long v122 = v139 ^ 0x5AC09C033F8B2700;
  unint64_t v141 = (((unint64_t)(v122 >> 8) + v140) ^ 0x1B0BD1982B59C071) >> v66;
  STACK[0x570] = v116 - 0x2DAF9BBA5E7BAD16;
  *(void *)&long long v122 = __ROR8__(v116- 0x2DAF9BBA5E7BAD16- ((2 * (v116 - 0x2DAF9BBA5E7BAD16)) & 0x866F7BF29073B820)- 0x3CC84206B7C623F0, 8);
  unint64_t v142 = (v122 & 0xF8FFFFFFFFFFFFFFLL ^ 0x10C337BDF94839DCLL)
       - ((2 * (v122 & 0xF8FFFFFFFFFFFFFFLL ^ 0x10C337BDF94839DCLL) + 0x55E7EF06772DD764) & 0xF0EAC6182F528AFALL);
  *((void *)&v122 + 1) = ((v122 ^ 0xF94839DC)
                          - ((2 * (v122 ^ 0xF94839DC) + 1999492964) & 0x2F528AFA)
                          + 1396715823) ^ 0xD1;
  *(void *)&long long v122 = (v142 + 0x23695A8F5340312FLL) ^ 0xC1FE61A946280300;
  uint64_t v143 = v122 >> 8;
  *((void *)&v122 + 1) = (v142 + 0x23695A8F5340312FLL) ^ 0x1661DDB09A9F5E44;
  *(void *)&long long v122 = v142 - 0x5C96A570ACBFCED1;
  uint64_t v144 = v141 - 0x62BEA7F7AE284A8BLL - ((2 * v141) & 0x3A82B010A3AF6AEALL);
  uint64_t v145 = v143 + ((v142 + 0x23695A8F5340312FLL) ^ 0x9661DDB09A9F5E44);
  uint64_t v146 = v145 ^ (v122 >> 61);
  *((void *)&v122 + 1) = v145 ^ 0x77777777;
  *(void *)&long long v122 = v145 ^ 0x50D4D0E13CBD7100;
  uint64_t v147 = (v146 ^ 0x50D4D0E13CBD7177)
       + (v122 >> 8)
       - 0x45BD66D73A53112BLL
       - ((2 * ((v146 ^ 0x50D4D0E13CBD7177) + (v122 >> 8))) & 0x748532518B59DDAALL);
  *((void *)&v122 + 1) = v146 ^ 0x10D4D0E13CBD7177;
  *(void *)&long long v122 = v146 ^ 0x4000000000000000;
  uint64_t v148 = (v122 >> 61) - 0x45BD66D73A53112BLL - ((2 * (v122 >> 61)) & 0x748532518B59DDAALL);
  *((void *)&v122 + 1) = v147 ^ 0xD5;
  *(void *)&long long v122 = v147 ^ 0xBA429928C5ACEE00;
  uint64_t v149 = ((v122 >> 8) ^ 0xE5D7DAAEED85A3) + (v148 ^ v147 ^ 0xE5D7DAAEED85A300);
  *((void *)&v122 + 1) = v148 ^ v147 ^ 0x5D7DAAEED85A300;
  *(void *)&long long v122 = v148 ^ ~v147;
  unint64_t v150 = v149 - 0x1692ECAC3F4479B0 - ((2 * v149) & 0xD2DA26A781770CA0);
  uint64_t v151 = v150 ^ ((v122 >> 61) - 0x1692ECAC3F4479B0 - ((2 * (v122 >> 61)) & 0xD2DA26A781770CA0));
  *((void *)&v122 + 1) = v150 ^ 0x7D;
  *(void *)&long long v122 = v150 ^ 0x67E88A2838188F00;
  uint64_t v152 = (v151 ^ 0x8E85997BF8A3092DLL)
       + (v122 >> 8)
       - 0x1F46888BC1F05CFALL
       - ((2 * ((v151 ^ 0x8E85997BF8A3092DLL) + (v122 >> 8))) & 0xC172EEE87C1F460CLL);
  *((void *)&v122 + 1) = v151 ^ 0xE85997BF8A3092DLL;
  *(void *)&long long v122 = v151 ^ 0x8000000000000000;
  uint64_t v153 = ((v122 >> 61) - 0x1F46888BC1F05CFALL - ((2 * (v122 >> 61)) & 0xC172EEE87C1F460CLL)) ^ v152;
  *((void *)&v122 + 1) = v152 ^ 0x57;
  *(void *)&long long v122 = v152 ^ 0x2DB06863FE207D00;
  uint64_t v154 = (v122 >> 8)
       + (v153 ^ 0xCD091F17C02FDE51)
       + 0x1238574DE35FB655
       - ((2 * ((v122 >> 8) + (v153 ^ 0xCD091F17C02FDE51))) & 0x2470AE9BC6BF6CAALL);
  *((void *)&v122 + 1) = v153 ^ 0xD091F17C02FDE51;
  *(void *)&long long v122 = v153 ^ 0xC000000000000000;
  uint64_t v155 = (v122 >> 61) + 0x1238574DE35FB655 - ((2 * (v122 >> 61)) & 0x2470AE9BC6BF6CAALL);
  *((void *)&v122 + 1) = v154 ^ 0x37;
  *(void *)&long long v122 = v154 ^ 0x70B2EB1F6A145100;
  uint64_t v156 = v155 ^ v154;
  uint64_t v157 = (v122 >> 8)
       + (v156 ^ 0x628ABC52894BE762)
       + 0x308CAF387D4F8FFELL
       - ((2 * ((v122 >> 8) + (v156 ^ 0x628ABC52894BE762))) & 0x61195E70FA9F1FFCLL);
  *((void *)&v122 + 1) = v156 ^ 0x28ABC52894BE762;
  *(void *)&long long v122 = v156 ^ 0x6000000000000000;
  uint64_t v158 = (v122 >> 61) + 0x308CAF387D4F8FFELL - ((2 * (v122 >> 61)) & 0x61195E70FA9F1FFCLL);
  *((void *)&v122 + 1) = v157 ^ 0xFFFFFF9F;
  *(void *)&long long v122 = v157 ^ 0x6A4C333B42C4A800;
  unint64_t v159 = ((v122 >> 8) + (v158 ^ 0x5AC09C033F8B2761 ^ v157)) ^ 0x1B0BD1982B59C071;
  unint64_t v160 = (v159 >> v66) + 0x5A057A7096A95235 - ((2 * (v159 >> v66)) & 0xB40AF4E12D52A46ALL);
  LOBYTE(v66) = v66 ^ 0x3D;
  *(void *)&long long v122 = __ROR8__(v116- 0x2DAF9BBA5E7BAD0ELL- ((2 * (v116 - 0x2DAF9BBA5E7BAD0ELL)) & 0x30B53BE594586C30)- 0x67A5620D35D3C9E8, 8);
  unint64_t v161 = (v122 & 0xF8FFFFFFFFFFFFFFLL ^ 0x18985A9DF2CA2C36)
       - ((2 * (v122 & 0xF8FFFFFFFFFFFFFFLL ^ 0x18985A9DF2CA2C36) + 0x15E7EF06772DD764) & 0x27FA03285A62DE74)
       + 0x3EF0F91768C85AECLL;
  *((void *)&v122 + 1) = ((v122 ^ 0xF2CA2C36)
                          - ((2 * (v122 ^ 0xF2CA2C36) + 1999492964) & 0x5A62DE74)
                          + 1757960940) ^ 0x96;
  *(void *)&long long v122 = v161 ^ 0x2A7603317CB02900;
  uint64_t v162 = v122 >> 8;
  unint64_t v163 = (v144 ^ 0x9D41580851D7B575)
       + 8 * (v159 << v66)
       - ((2 * ((v144 ^ 0x9D41580851D7B575) + 8 * (v159 << v66))) & 0x1222B5F432D304FELL)
       - 0x76EEA505E6967D81;
  *((void *)&v122 + 1) = v161 ^ 0x1DE9BF28A0077403;
  *(void *)&long long v122 = v161 ^ 0x6000000000000000;
  uint64_t v164 = v162 + (v161 ^ 0x7DE9BF28A0077403);
  uint64_t v165 = v164 ^ (v122 >> 61);
  STACK[0x310] = 0x50D4D0E13CBD7100;
  *((void *)&v122 + 1) = v164 ^ 0x77777777;
  *(void *)&long long v122 = v164 ^ 0x50D4D0E13CBD7100;
  uint64_t v166 = (v122 >> 8)
       + (v165 ^ 0x50D4D0E13CBD7177)
       + 0x57B796EAA530AD3BLL
       - ((2 * ((v122 >> 8) + (v165 ^ 0x50D4D0E13CBD7177))) & 0xAF6F2DD54A615A76);
  *((void *)&v122 + 1) = v165 ^ 0x10D4D0E13CBD7177;
  *(void *)&long long v122 = v165 ^ 0x4000000000000000;
  uint64_t v167 = (v122 >> 61) + 0x57B796EAA530AD3BLL - ((2 * (v122 >> 61)) & 0xAF6F2DD54A615A76);
  *((void *)&v122 + 1) = v166 ^ 0x3B;
  *(void *)&long long v122 = v166 ^ 0x57B796EAA530AD00;
  uint64_t v168 = ((v122 >> 8) ^ 0xE5D7DAAEED85A3) + (v167 ^ v166 ^ 0xE5D7DAAEED85A300);
  unint64_t v169 = v168 - 0x22312A7D01205C6CLL - ((2 * v168) & 0xBB9DAB05FDBF4728);
  *((void *)&v122 + 1) = v167 ^ v166 ^ 0x5D7DAAEED85A300;
  *(void *)&long long v122 = v167 ^ ~v166;
  uint64_t v170 = v169 ^ ((v122 >> 61) - 0x22312A7D01205C6CLL - ((2 * (v122 >> 61)) & 0xBB9DAB05FDBF4728));
  *((void *)&v122 + 1) = v169 ^ 0xB9;
  *(void *)&long long v122 = v169 ^ 0x534B4CF9067CAA00;
  uint64_t v171 = (v170 ^ 0x8E85997BF8A3092DLL)
       + (v122 >> 8)
       + 0x4EA063BB768DFC92
       - ((2 * ((v170 ^ 0x8E85997BF8A3092DLL) + (v122 >> 8))) & 0x9D40C776ED1BF924);
  *((void *)&v122 + 1) = v170 ^ 0xE85997BF8A3092DLL;
  *(void *)&long long v122 = v170 ^ 0x8000000000000000;
  uint64_t v172 = ((v122 >> 61) + 0x4EA063BB768DFC92 - ((2 * (v122 >> 61)) & 0x9D40C776ED1BF924)) ^ v171;
  *((void *)&v122 + 1) = v171 ^ 0xFFFFFFC3;
  *(void *)&long long v122 = v171 ^ 0x83A97CACB6A22200;
  uint64_t v173 = (v172 ^ 0xCD091F17C02FDE51) + (v122 >> 8);
  *((void *)&v122 + 1) = v172 ^ 0xD091F17C02FDE51;
  *(void *)&long long v122 = v172 ^ 0xC000000000000000;
  uint64_t v174 = v173 ^ (v122 >> 61);
  *((void *)&v122 + 1) = v173 ^ 0x62;
  *(void *)&long long v122 = v173 ^ 0x628ABC52894BE700;
  uint64_t v175 = (v174 ^ 0x628ABC52894BE762)
       + (v122 >> 8)
       - 0x788E9EA7D3554707
       - ((2 * ((v174 ^ 0x628ABC52894BE762) + (v122 >> 8))) & 0xEE2C2B0595571F2);
  *((void *)&v122 + 1) = v174 ^ 0x28ABC52894BE762;
  *(void *)&long long v122 = v174 ^ 0x6000000000000000;
  uint64_t v176 = ((v122 >> 61) - 0x788E9EA7D3554707 - ((2 * (v122 >> 61)) & 0xEE2C2B0595571F2)) ^ 0x1AC09C033F8B2761 ^ v175;
  *((void *)&v122 + 1) = v175 ^ 0x18;
  *(void *)&long long v122 = v175 ^ 0xDDB1FD5B13219F00;
  LODWORD(STACK[0x438]) = v144 ^ 0xFFFFFFB8;
  LODWORD(STACK[0x444]) = (v163 >> 16) ^ 3;
  LODWORD(STACK[0x43C]) = (v163 >> 8) ^ 0xFFFFFFBF;
  LODWORD(STACK[0x430]) = HIWORD(v163) ^ 0x1E;
  unint64_t v177 = (v160 ^ 0x5A057A7096A95235) + 8 * ((((unint64_t)(v122 >> 8) + v176) ^ 0x1B0BD1982B59C071) << v66);
  unint64_t v178 = v177 + 0x4F894A0E6C79BB1ELL - 2 * (v177 & 0x4F894A0E6C79BB3ELL ^ (v160 ^ 0x5A057A7096A95235) & 0x20);
  LODWORD(STACK[0x440]) = v160 ^ 0x45;
  LODWORD(STACK[0x408]) = HIDWORD(v163) ^ 0xFFFFFFCA;
  LODWORD(STACK[0x40C]) = (v163 >> 24) ^ 0xFFFFFFDA;
  LODWORD(STACK[0x434]) = HIBYTE(v163) ^ 0xFFFFFF8E;
  int v179 = *(uint64_t (**)(unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, void, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(STACK[0x4D0] + 8 * v119);
  LODWORD(STACK[0x410]) = (v178 >> 8) ^ 0xFFFFFF9B;
  LODWORD(STACK[0x41C]) = (v178 >> 24) ^ 0xFFFFFF8D;
  LODWORD(STACK[0x428]) = (v163 >> 40) ^ 0x66;
  LODWORD(STACK[0x420]) = (v178 >> 16) ^ 0xFFFFFFC9;
  LODWORD(STACK[0x42C]) = (v178 >> 40) ^ 0x21;
  LODWORD(STACK[0x424]) = HIBYTE(v178) ^ 0xFFFFFFCF;
  LODWORD(STACK[0x414]) = HIWORD(v178) ^ 0x11;
  LODWORD(STACK[0x418]) = HIDWORD(v178) ^ 0x33;
  LODWORD(STACK[0x518]) = 37;
  return v179(v178 >> 8, v178 >> 24, v178 >> 16, v163 >> 8, v178 >> 40, LODWORD(STACK[0x590]), STACK[0x598], STACK[0x5A0], a9, a10, v181, v182, v183, v184, v185, v186, 0xA3695A8F5340312FLL, a18, a19,
           0x8C70C87B8A4CFB2CLL,
           0x628ABC52894BE700,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           0x5200000049,
           v187,
           v189,
           v192,
           v194,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43);
}

uint64_t sub_18D9F4218(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3, unsigned __int8 a4, unsigned __int8 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,int a34)
{
  int v45 = STACK[0x530] ^ 0x6FD;
  uint64_t v46 = v36;
  unint64_t v47 = ((unint64_t)v37 << 8) ^ 0x75826919FA5A1100 ^ (((unint64_t)a4 << 48) | ((unint64_t)v35 << 40) | ((unint64_t)v38 << 32) | (v41 << 24) | ((unint64_t)v34 << 16) | (v39 << (STACK[0x530] ^ 0x56u)));
  uint64_t v48 = v47 - 0x4205FC8AAC0329BALL - ((2 * v47) & 0x7BF406EAA7F9ACDCLL);
  unint64_t v49 = ((unint64_t)a3 << 40) & 0xFF00FF00FF00FFFFLL | ((unint64_t)a1 << 48) | (v43 << 56) | ((unint64_t)a2 << 32) | (v42 << 24) | ((unint64_t)a5 << 16);
  uint64_t v50 = *(unsigned __int8 *)STACK[0x540];
  int v51 = v50 - ((2 * v50) & 0xFFFFFF96);
  unint64_t v52 = STACK[0x300];
  uint64_t v53 = *(unsigned __int8 *)(STACK[0x300] - 0x2DAF9BBA5E7BAD1BLL);
  uint64_t v54 = *(unsigned __int8 *)(STACK[0x300] - 0x2DAF9BBA5E7BAD1DLL);
  unint64_t v55 = (v49 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v40 << 8)) ^ 0x35BB796C0E4A8900;
  uint64_t v56 = *(unsigned __int8 *)(STACK[0x300] - 0x2DAF9BBA5E7BAD1CLL);
  uint64_t v57 = *(unsigned __int8 *)(STACK[0x300] - 0x2DAF9BBA5E7BAD18);
  uint64_t v58 = *(unsigned __int8 *)(STACK[0x300] - 0x2DAF9BBA5E7BAD1ALL);
  uint64_t v59 = *(unsigned __int8 *)(STACK[0x300] - 0x2DAF9BBA5E7BAD12);
  uint64_t v60 = (v50 << 56) | (v53 << 32) | (v54 << 48);
  uint64_t v61 = *(unsigned __int8 *)(STACK[0x300] - 0x2DAF9BBA5E7BAD15);
  uint64_t v62 = *(unsigned __int8 *)(STACK[0x300] - 0x2DAF9BBA5E7BAD14);
  uint64_t v63 = *(unsigned __int8 *)STACK[0x570];
  LODWORD(STACK[0x3EC]) = v51 - 53;
  LODWORD(STACK[0x3E8]) = v53 - ((2 * v53) & 0xFFFFFF83) - 63;
  LODWORD(STACK[0x3DC]) = v54 - ((2 * v54) & 0x4A) + 37;
  LODWORD(STACK[0x3E0]) = v56 - ((2 * v56) & 0x34) - 102;
  LODWORD(STACK[0x3CC]) = v57 - ((2 * v57) & 0x18C) + 70;
  LODWORD(STACK[0x3D0]) = v58 + (~(2 * v58) | 0x47) - 35;
  LODWORD(STACK[0x3C4]) = v59 + (~(2 * v59) | 0x59) + 84;
  LODWORD(STACK[0x3C8]) = v61 - ((2 * v61) & 0x2C) - 106;
  uint64_t v64 = *(unsigned __int8 *)(v52 - 0x2DAF9BBA5E7BAD17);
  LODWORD(STACK[0x3B8]) = v64 - ((2 * v64) & 0xFFFFFF9F) + 79;
  LODWORD(STACK[0x3B0]) = v62 - ((2 * v62) & 0x16) - 117;
  LODWORD(STACK[0x3AC]) = v63 - ((2 * v63) & 0xFFFFFFBA) + 93;
  uint64_t v65 = v60 | (v56 << 40) | (v57 << 8) | (v58 << 24) | v64;
  unint64_t v66 = STACK[0x320] ^ 0xBDFA037553FCD6CFLL;
  uint64_t v67 = *(unsigned __int8 *)(v52 - 0x2DAF9BBA5E7BAD10);
  LODWORD(STACK[0x3A0]) = v67 - ((2 * v67) & 0xFFFFFFC7) + 99;
  uint64_t v68 = *(unsigned __int8 *)(v52 - 0x2DAF9BBA5E7BAD13);
  unint64_t v69 = v44 ^ v66 ^ v48;
  LODWORD(STACK[0x398]) = v68 - ((2 * v68) & 0x1DA) - 19;
  unint64_t v70 = v65 ^ STACK[0x270];
  uint64_t v71 = *(unsigned __int8 *)(v52 - 0x2DAF9BBA5E7BAD11);
  uint64_t v72 = *(unsigned __int8 *)(v52 - 0x2DAF9BBA5E7BAD0FLL);
  unint64_t v73 = v46 ^ 0xA0DCCBCB36B789F6 ^ STACK[0x318] ^ (v55 - 0x5F233434C9487647 - ((2 * v55) & 0x41B997966D6F137ALL));
  LODWORD(v65) = v72 - ((2 * v72) & 0x1F4);
  unint64_t v74 = STACK[0x278] ^ (v72 | (v67 << 8));
  uint64_t v75 = *(unsigned __int8 *)(v52 - 0x2DAF9BBA5E7BAD19);
  LODWORD(STACK[0x394]) = v71 + (~(2 * v71) | 0x39) - 28;
  LODWORD(STACK[0x39C]) = v75 - ((2 * v75) & 0x36) - 101;
  LODWORD(STACK[0x390]) = v65 - 6;
  unint64_t v76 = ((v59 << 24) | (v61 << 48) | (v62 << 40) | (v63 << 56) | (v68 << 32) | (v71 << 16)) ^ v74;
  LODWORD(STACK[0x328]) = 15;
  unint64_t v77 = v70 ^ (v75 << 16);
  unint64_t v78 = STACK[0x2A8];
  unint64_t v79 = STACK[0x2A0];
  unint64_t v80 = STACK[0x298];
  unint64_t v81 = STACK[0x290];
  STACK[0x2A8] = STACK[0x2A8];
  STACK[0x3F8] = (7 * (v45 ^ 0x2DAu)) ^ v78 ^ 0x9D65A226C25DF401;
  STACK[0x2A0] = v79;
  STACK[0x3F0] = v79 ^ 0xA3DDD429CB3B4450;
  STACK[0x298] = v80;
  STACK[0x498] = v80 ^ 0x1C86F85C057DAE92;
  STACK[0x290] = v81;
  STACK[0x490] = v81 ^ 0xF9B7313D654DACFFLL;
  LODWORD(STACK[0x400]) = a34;
  STACK[0x270] = v77;
  STACK[0x278] = v76;
  STACK[0x318] = v73;
  STACK[0x320] = v69;
  LODWORD(STACK[0x4B8]) = 0;
  STACK[0x4A8] = v73;
  STACK[0x4C8] = 0xD7564F027E6BC667;
  unint64_t v82 = STACK[0x3F8];
  unint64_t v83 = STACK[0x3F0];
  STACK[0x4A0] = v69;
  STACK[0x4C0] = 0xD7564F027E6BC667;
  LODWORD(STACK[0x580]) = 0;
  unint64_t v84 = HIDWORD(v83) ^ 0xD7564F02A93D8965;
  unint64_t v85 = HIDWORD(v69) ^ 0xD7564F02A93D8965;
  uint64_t v86 = ((v83 ^ v82) >> 32) - 0x28A9B0FD81943999 - ((2 * ((v83 ^ v82) >> 32)) & 0xFCD78CCE);
  uint64_t v87 = ((v69 ^ v73) >> 32) - 0x28A9B0FD81943999 - ((2 * ((v69 ^ v73) >> 32)) & 0xFCD78CCE);
  STACK[0x540] = v86;
  STACK[0x530] = v83 ^ v82 ^ v86;
  STACK[0x538] = v87;
  STACK[0x528] = v69 ^ v73 ^ v87;
  STACK[0x520] = HIDWORD(v82) ^ 0xD7564F02A93D8965;
  STACK[0x518] = HIDWORD(v73) ^ 0xD7564F02A93D8965;
  STACK[0x548] = v69;
  STACK[0x510] = v69 ^ 0xD7564F02 ^ HIDWORD(v69);
  STACK[0x550] = v83;
  STACK[0x508] = v83 ^ 0xD7564F027E6BC667 ^ v84;
  STACK[0x558] = v82;
  STACK[0x500] = v82 ^ 0xD7564F02 ^ HIDWORD(v82);
  STACK[0x560] = v73;
  STACK[0x4F8] = v73 ^ 0xD7564F02 ^ HIDWORD(v73);
  STACK[0x4F0] = v69 ^ v73 ^ 0xD7564F027E6BC667;
  STACK[0x4E8] = v83 ^ v82 ^ 0xD7564F027E6BC667;
  STACK[0x578] = 0x9DDAF9D236D8E063;
  STACK[0x570] = 0xCBD2C40F5233E967;
  STACK[0x590] = 0xC6592DEE738659A2;
  STACK[0x588] = 0xC1E973907E2AF118;
  while (1)
  {
    uint64_t v90 = ((v85 & 0xE0562EA2 ^ 0x4D1ACB1B20400C81) + (v85 & 0x1FA9D15D) - 1) ^ 0x4D11C81BDCCE6EFFLL;
    unint64_t v91 = (((2 * v90) | 0x6A451E8C2AA57D4) - v90 + 0x7CADD70B9EAAD416) ^ 0x83592BF4E3B08FF2;
    STACK[0x5B8] = v91 >> (32 * (v84 & 1u));
    STACK[0x5B0] = v91 >> ((16 * v84) & 0x20);
    STACK[0x5A8] = v91 >> ((8 * v84) & 0x20);
    STACK[0x5A0] = v91 >> (~(4 * v84) & 0x20);
    STACK[0x598] = v91 >> (~(2 * v84) & 0x20);
    unint64_t v92 = v91 >> (v84 & 0x20);
    unint64_t v93 = v91 >> ((v84 >> 1) & 0x20);
    unint64_t v94 = v91 >> (~(v84 >> 2) & 0x20);
    unint64_t v95 = v91 >> (~(v84 >> 3) & 0x20);
    unint64_t v96 = v91 >> ((v84 >> 4) & 0x20);
    unint64_t v97 = v91 >> ((v84 >> 5) & 0x20);
    unint64_t v98 = v91 >> (~(v84 >> 6) & 0x20);
    unint64_t v99 = v91 >> (~(v84 >> 7) & 0x20);
    unint64_t v100 = v91 >> (~BYTE1(v84) & 0x20);
    unint64_t v101 = v91 >> ((v84 >> 9) & 0x20);
    unint64_t v102 = v91 >> ((v84 >> 10) & 0x20);
    unint64_t v103 = v91 >> ((v84 >> 11) & 0x20);
    unint64_t v104 = v91 >> ((v84 >> 12) & 0x20);
    unint64_t v105 = v91 >> (~(v84 >> 13) & 0x20);
    unint64_t v106 = v91 >> ((v84 >> 14) & 0x20);
    unint64_t v107 = v91 >> (~(v84 >> 15) & 0x20);
    unint64_t v108 = v91 >> (BYTE2(v84) & 0x20);
    unint64_t v109 = v91 >> ((v84 >> 17) & 0x20);
    unint64_t v110 = v91 >> (~(v84 >> 18) & 0x20);
    unint64_t v111 = v91 >> (~(v84 >> 19) & 0x20);
    unint64_t v112 = v91 >> ((v84 >> 20) & 0x20);
    unint64_t v113 = v91 >> ((v84 >> 21) & 0x20);
    unint64_t v114 = v91 >> ((v84 >> 22) & 0x20);
    unint64_t v115 = v91 >> (BYTE3(v84) & 0x20);
    unint64_t v116 = v91 >> ((v84 >> 23) & 0x20);
    unint64_t v117 = v91 >> ((v84 >> 25) & 0x20);
    unint64_t v118 = v91 >> (~(v84 >> 26) & 0x20);
    unint64_t v119 = (4 * STACK[0x5B0]) ^ (2 * STACK[0x5B8]) ^ (8 * STACK[0x5A8]) ^ (16 * STACK[0x5A0]) ^ (32 * STACK[0x598]) ^ (v92 << 6) ^ (v93 << 7) ^ (v94 << 8) ^ (v95 << 9) ^ (v96 << 10) ^ (v97 << 11) ^ (v98 << 12) ^ (v99 << 13) ^ (v100 << 14) ^ (v101 << 15) ^ (v102 << 16) ^ (v103 << 17) ^ (v104 << 18) ^ (v105 << 19) ^ (v106 << 20) ^ (v107 << 21) ^ (v108 << 22) ^ (v109 << 23) ^ (v110 << 24) ^ (v111 << 25);
    unint64_t v120 = (v114 << 28) ^ (v116 << 29) ^ (v113 << 27) ^ (v112 << 26) ^ v119;
    unint64_t v121 = (v115 << 30) ^ (v117 << 31) ^ v120;
    unint64_t v122 = v121 ^ (v118 << 32);
    switch(LODWORD(STACK[0x580]))
    {
      case 0:
        unint64_t v123 = v122 ^ STACK[0x590] ^ 0xC6592DEE738659A2;
        unint64_t v124 = (v121 << 32)
             + 0x6F4D64FBE2A84AA8
             - ((v121 << 33) & 0xDE9AC9F600000000)
             + (LODWORD(STACK[0x56C]) - 121)
             - 811;
        STACK[0x570] ^= v122 ^ HIDWORD(v122);
        STACK[0x588] ^= 0x6F4D64FBE2A84AA8 ^ v124;
        STACK[0x590] = HIDWORD(v122) ^ 0xC6592DEE738659A2 ^ v124 ^ (v123
                                                                    + 0x6F4D64FBE2A84AA8
                                                                    - ((2 * v123) & 0xDE9AC9F7C5509550));
        LODWORD(STACK[0x580]) = 1;
        unint64_t v84 = STACK[0x550];
        unint64_t v85 = STACK[0x548];
        break;
      case 1:
        unint64_t v130 = (v121 << 32) - 0x16E4F8EE2A128420 - ((v121 << 33) & 0xD2360E2200000000);
        unint64_t v131 = STACK[0x590];
        unint64_t v132 = STACK[0x590] & 0x20000 ^ 0xF5FDBF79BFD3CFD9;
        unint64_t v133 = v132 + 0x4A3AFDE7DEFF3C14 + STACK[0x4E0];
        STACK[0x570] ^= HIDWORD(v122);
        int v134 = v132 + 1076768807;
        unint64_t v135 = v131 & 0xFFFFFFFFFFFDFFFFLL;
        unint64_t v136 = 0x36367CDB5EA2DEF1 - v132;
        if ((HIDWORD(v122) & *(void *)&v134) == 0) {
          unint64_t v136 = v133;
        }
        unint64_t v137 = v135 ^ 0xC6592DEE738459A2 ^ (HIDWORD(v122) - 0x4038BD619ED10F18 + v136);
        STACK[0x588] ^= v122 ^ 0xE91B0711D5ED7BE0 ^ v130;
        STACK[0x590] = v122 ^ 0xC6592DEE738659A2 ^ v130 ^ (v137
                                                           - 0x16E4F8EE2A128420
                                                           - ((2 * v137) & 0xD2360E23ABDAF7C0));
        LODWORD(STACK[0x580]) = 2;
        unint64_t v84 = STACK[0x520];
        unint64_t v85 = STACK[0x518];
        break;
      case 2:
        uint64_t v125 = (LODWORD(STACK[0x56C]) - 121);
        unint64_t v126 = (v121 << 32) - 0x324DBEE1A61B5CF7 - ((v121 << 33) & 0x9B64823C00000000);
        STACK[0x590] ^= v122 ^ HIDWORD(v122);
        STACK[0x578] ^= 0xCDB2411E59E4A309 ^ v126;
        STACK[0x588] = v122 ^ v126 ^ 0x795426138E2B3D4BLL ^ ((HIDWORD(v122) ^ STACK[0x588] ^ 0xC1E973907E2AF118)
                                                           + 0x750F149DA9E56F5ALL
                                                           - 2
                                                           * ((v125 + 0x750F149DA9E56C30) & (HIDWORD(v122) ^ STACK[0x588] ^ 0xC1E973907E2AF118) ^ (HIDWORD(v122) ^ STACK[0x588]) & 1));
        LODWORD(STACK[0x580]) = 3;
        unint64_t v84 = STACK[0x558];
        unint64_t v85 = STACK[0x560];
        break;
      case 3:
        unint64_t v127 = v122 >> STACK[0x4D8];
        uint64_t v128 = 0x3BF9EF487B7C7E8 - ((v119 << 33) & 0x77F3DE800000000) + (v121 << 32);
        STACK[0x590] ^= v127;
        STACK[0x588] = v128 ^ v127 ^ 0x9DE768E873ABBDD1 ^ ((v122 ^ STACK[0x588] ^ 0xC1E973907E2AF118)
                                                           + 0x5FB1858C8A368B21
                                                           - 2
                                                           * ((v122 ^ STACK[0x588] ^ 0xC1E973907E2AF118) & 0x5FB1858C8A368B27 ^ (v122 ^ STACK[0x588]) & 6));
        STACK[0x578] ^= 0x3BF9EF487B7C7E8 ^ v122 ^ v128;
        LODWORD(STACK[0x580]) = 4;
        unint64_t v84 = STACK[0x508];
        unint64_t v85 = STACK[0x510];
        break;
      case 4:
        uint64_t v88 = (LODWORD(STACK[0x56C]) - 121);
        unint64_t v89 = (v121 << 32) + 0x6245EA994ABDB292 - ((v121 << 33) & 0xC48BD53200000000);
        STACK[0x588] ^= 0x6245EA994ABDB292 ^ v89;
        STACK[0x570] ^= HIDWORD(v122);
        STACK[0x590] ^= 0x6245EA994ABDB1B9 ^ HIDWORD(v122) ^ v89 ^ v88;
        LODWORD(STACK[0x580]) = 5;
        unint64_t v84 = STACK[0x540];
        unint64_t v85 = STACK[0x538];
        break;
      case 5:
        char v138 = (LODWORD(STACK[0x56C]) + 100) | 0x23;
        STACK[0x588] ^= v121 << 32;
        STACK[0x590] ^= v122 ^ 0x750F149DA9E56F5ALL ^ ((v122 >> (v138 - 11))
                                                     + 0x750F149DA9E56F5ALL
                                                     - ((2 * (v122 >> (v138 - 11))) & 0x153CADEB4));
        LODWORD(STACK[0x580]) = 6;
        unint64_t v84 = STACK[0x4E8];
        unint64_t v85 = STACK[0x4F0];
        break;
      case 6:
        char v139 = (LODWORD(STACK[0x56C]) - 123) | 2;
        STACK[0x590] ^= HIDWORD(v122);
        STACK[0x588] ^= v122 ^ 0xC1E973907E2AF118 ^ (0xC1E973907E2AF118
                                                     - ((v121 << 33) & 0x83D2E72000000000)
                                                     + (v121 << (v139 - 11)));
        LODWORD(STACK[0x580]) = 7;
        unint64_t v84 = STACK[0x500];
        unint64_t v85 = STACK[0x4F8];
        break;
      case 7:
        uint64_t v129 = (v121 << 32)
             - 0x40DAB18B192F1F68
             - ((v120 << (LODWORD(STACK[0x56C]) + 125)) & 0x7E4A9CE800000000);
        STACK[0x590] ^= HIDWORD(v122);
        STACK[0x588] ^= 0xBF254E74E6D0E098 ^ HIDWORD(v122) ^ v129;
        STACK[0x578] ^= 0xBF254E74E6D0E098 ^ v129;
        LODWORD(STACK[0x580]) = 8;
        unint64_t v84 = STACK[0x530];
        unint64_t v85 = STACK[0x528];
        break;
      default:
        unint64_t v140 = STACK[0x588] ^ (v121 << 32);
        uint64_t v141 = (v140 >> 1) ^ (v140 >> 2) ^ (v140 >> 7) ^ 0x510D37CB00639128;
        unint64_t v142 = v140 ^ 0xD967B4CF5E032EA4 ^ (v141 - ((2 * v141) & 0x311D8EBE4053BF78) + 0x188EC75F2029DFBCLL);
        unint64_t v143 = (v142 - 0x342D3BF0ADCC1699 - ((2 * v142) & 0x97A5881EA467D2CELL)) ^ STACK[0x570];
        unint64_t v144 = ((STACK[0x578] >> 2) ^ (STACK[0x578] >> 7) | (STACK[0x588] << 62)) ^ (STACK[0x588] << 57) ^ 0x58A0776E32B7F9E9 ^ ((STACK[0x578] >> (STACK[0x4B0] + 79)) ^ HIDWORD(v122) | (STACK[0x588] << 63));
        unint64_t v145 = (v144 - 0x28A9B0FD81943999 + (~(2 * v144) | 0x515361FB03287331) + 1) ^ STACK[0x4C8];
        unint64_t v146 = (~STACK[0x578] << 62) ^ (~STACK[0x578] << 63) ^ (STACK[0x578] << 57);
        unint64_t v147 = STACK[0x590] ^ STACK[0x578] ^ (v145 - 0x6225062DC9271F9DLL - ((2 * v145) & 0x3BB5F3A46DB1C0C6)) ^ 0x110F62EC0DED9FC5;
        unint64_t v148 = STACK[0x4C0] ^ (v146 >> 1) ^ (v146 >> 2) ^ (v146 >> 7) ^ (v143
                                                                       - ((2 * v143) & 0x48FCCFFE701225ACLL)
                                                                       - 0x5B819800C7F6ED2ALL) ^ v146;
        unint64_t v149 = STACK[0x4D0];
        unint64_t v150 = *(uint64_t (**)(unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(STACK[0x4D0] + 8 * ((LODWORD(STACK[0x56C]) - 409) ^ (1402 * (STACK[0x4B8] & 1))));
        STACK[0x4C0] = v148 ^ 0x317267FF380912D6;
        STACK[0x4C8] = v147;
        return v150(v149, v147, v112, v108, v96, v95, v119, v122, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21,
                 a22,
                 a23,
                 a24);
    }
  }
}

void sub_18D9F51C4()
{
  LODWORD(STACK[0x4B8]) = 1;
  JUMPOUT(0x18D9F4648);
}

uint64_t sub_18D9F51E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1
                              + 8
                              * (int)((88
                                     * (((STACK[0x4B0] + 77) ^ (((((2 * STACK[0x4B0]) ^ 0x2C8)
                                                                                 - 90) & 0xFE) == LODWORD(STACK[0x400]))) & 1)) ^ STACK[0x4B0])))();
}

uint64_t sub_18D9F5230(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1
                              + 8
                              * (((v1 + 754 + ((v1 - 2085101128) & 0x7C481FEC) - 740) * (LODWORD(STACK[0x328]) == 14)) ^ v1)))();
}

void sub_18D9F5278(uint64_t a1, unint64_t a2)
{
  LODWORD(STACK[0x328]) = 14;
  LODWORD(STACK[0x400]) = 82;
  STACK[0x318] = a2;
  STACK[0x320] = v2;
  JUMPOUT(0x18D9F461CLL);
}

uint64_t sub_18D9F529C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,unsigned __int8 a40)
{
  return (*(uint64_t (**)(void))(a1
                              + 8
                              * ((496 * (a40 != (53 * (((v40 + 19) | 0xA0) ^ 0xBC) + 106))) ^ v40)))();
}

uint64_t sub_18D9F52E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,char a40)
{
  LODWORD(STACK[0x32C]) = 252;
  LODWORD(STACK[0x330]) = 190;
  LODWORD(STACK[0x374]) = 1623541894;
  LODWORD(STACK[0x334]) = 206;
  LODWORD(STACK[0x338]) = 59;
  LODWORD(STACK[0x368]) = -1344893503;
  LODWORD(STACK[0x33C]) = 101;
  LODWORD(STACK[0x340]) = 249;
  LODWORD(STACK[0x344]) = 108;
  LODWORD(STACK[0x348]) = 79;
  LODWORD(STACK[0x34C]) = 63;
  LODWORD(STACK[0x378]) = 1132707016;
  LODWORD(STACK[0x350]) = 230;
  LODWORD(STACK[0x354]) = 126;
  LODWORD(STACK[0x370]) = -1817424264;
  LODWORD(STACK[0x358]) = 32;
  LODWORD(STACK[0x35C]) = 172;
  LODWORD(STACK[0x360]) = 146;
  LODWORD(STACK[0x364]) = 161;
  LODWORD(STACK[0x36C]) = 123;
  LODWORD(STACK[0x5B8]) = a3;
  BOOL v41 = a40 == v40;
  unint64_t v42 = (a3 - 632) | 0x80u;
  char v43 = 8 * ((a38 - 93) & 7);
  STACK[0x5B0] = (a3 + 10);
  STACK[0x598] = a38 - 0x6C3BEE829B0CF45DLL;
  unint64_t v44 = a38
      - 0x6C3BEE829B0CF45DLL
      - (((a38 - 0x6C3BEE829B0CF45DLL) << ((a3 + 10) ^ 0xAFu)) & 0xB576A94567744ABELL)
      + 0x5ABB54A2B3BA255FLL;
  STACK[0x5A8] = v42;
  unint64_t v45 = ((v42 - 0x8000000000001ACLL) & (v44 << 56) & 0xFF00000000000000 | (v44 >> 8)) ^ 0x585ABB54A2B3BA25;
  unint64_t v46 = ((2 * v45 + 0x15E7EF06772DD764) & 0x306D798A5CF82004 ^ 0xFBFFFFFFFFFFFFFFLL) + v45;
  *((void *)&v47 + 1) = (v46 + 1779628981) ^ 0xAEu;
  *(void *)&long long v47 = (v46 - 0x3AD54BB795ED044BLL) ^ 0xA3BDBE607FFD5600;
  uint64_t v48 = (v47 >> 8) + ((v46 - 0x3AD54BB795ED044BLL) ^ 0xF4220279A34A0B3BLL);
  *((void *)&v47 + 1) = (v46 - 0x3AD54BB795ED044BLL) ^ 0x14220279A34A0B3BLL;
  *(void *)&long long v47 = 0x3AD54BB795ED044ALL - v46;
  uint64_t v49 = v48 ^ (v47 >> 61);
  *((void *)&v47 + 1) = v48 ^ 0x77777777;
  *(void *)&long long v47 = v48 ^ STACK[0x310];
  uint64_t v50 = (v49 ^ 0x50D4D0E13CBD7177)
      + (v47 >> 8)
      - 0x1F51B95552FF9478
      - ((2 * ((v49 ^ 0x50D4D0E13CBD7177) + (v47 >> 8))) & 0xC15C8D555A00D710);
  *((void *)&v47 + 1) = v49 ^ 0x10D4D0E13CBD7177;
  *(void *)&long long v47 = v49 ^ 0x4000000000000000;
  uint64_t v51 = (v47 >> 61) - 0x1F51B95552FF9478 - ((2 * (v47 >> 61)) & 0xC15C8D555A00D710);
  uint64_t v52 = v51 ^ v50;
  *((void *)&v47 + 1) = v51 ^ v50 ^ 0x5D7DAAEED85A300;
  *(void *)&long long v47 = v51 ^ ~v50;
  uint64_t v53 = v47 >> 61;
  *((void *)&v47 + 1) = v50 ^ 0x88888888;
  *(void *)&long long v47 = v50 ^ 0xE0AE46AAAD006B00;
  uint64_t v54 = ((v47 >> 8) ^ 0xE5D7DAAEED85A3) + (v52 ^ 0xE5D7DAAEED85A300);
  uint64_t v55 = v54 + 0x10403D7B4A876456 - ((2 * v54) & 0x20807AF6950EC8ACLL);
  uint64_t v56 = v55 ^ (v53 + 0x10403D7B4A876456 - ((2 * v53) & 0x20807AF6950EC8ACLL));
  *((void *)&v47 + 1) = v55 ^ 0x7B;
  *(void *)&long long v47 = v55 ^ 0x9EC5A400B2246D00;
  uint64_t v57 = (v56 ^ 0x8E85997BF8A3092DLL)
      + (v47 >> 8)
      + 0x59F7C862EF6C1534
      - ((2 * ((v56 ^ 0x8E85997BF8A3092DLL) + (v47 >> 8))) & 0xB3EF90C5DED82A68);
  *((void *)&v47 + 1) = v56 ^ 0xE85997BF8A3092DLL;
  *(void *)&long long v47 = v56 ^ 0x8000000000000000;
  uint64_t v58 = ((v47 >> 61) + 0x59F7C862EF6C1534 - ((2 * (v47 >> 61)) & 0xB3EF90C5DED82A68)) ^ v57;
  *((void *)&v47 + 1) = v57 ^ 0x65;
  *(void *)&long long v47 = v57 ^ 0x94FED7752F43CB00;
  uint64_t v59 = (v47 >> 8) + (v58 ^ 0xCD091F17C02FDE51);
  *((void *)&v47 + 1) = v58 ^ 0xD091F17C02FDE51;
  *(void *)&long long v47 = v58 ^ 0xC000000000000000;
  uint64_t v60 = v59 - 0x725713C2276884B5 - ((2 * v59) & 0x1B51D87BB12EF696);
  uint64_t v61 = ((v47 >> 61) - 0x725713C2276884B5 - ((2 * (v47 >> 61)) & 0x1B51D87BB12EF696)) ^ v60;
  *((void *)&v47 + 1) = v60 ^ 0x29;
  *(void *)&long long v47 = v60 ^ 0xEF22506F51DC9C00;
  uint64_t v62 = (v61 ^ 0x628ABC52894BE762) + (v47 >> 8);
  *((void *)&v47 + 1) = v61 ^ 0x28ABC52894BE762;
  *(void *)&long long v47 = v61 ^ 0x6000000000000000;
  uint64_t v63 = v62 ^ 0x67ABA069AC6DE1DCLL ^ ((v47 >> 61) - ((2 * (v47 >> 61)) & 0x7AD678D527CD8D7ALL) + 0x3D6B3C6A93E6C6BDLL);
  *((void *)&v47 + 1) = v62 ^ 0x61;
  *(void *)&long long v47 = v62 ^ 0x5AC09C033F8B2700;
  unint64_t v64 = ((v63 + (unint64_t)(v47 >> 8)) ^ 0x1B0BD1982B59C071) >> v43;
  unint64_t v65 = ((2 * v64) & 0xDD52A86FD9BDBDEALL) + (v64 ^ 0xEEA95437ECDEDEF5);
  STACK[0x590] = a38 - 0x6C3BEE829B0CF455;
  *(void *)&long long v47 = __ROR8__(a38- 0x6C3BEE829B0CF455- ((2 * (a38 - 0x6C3BEE829B0CF455)) & 0x73BE5A17B4A8FCAELL)- 0x4620D2F425AB81A9, 8);
  unint64_t v66 = (v47 & 0xF8FFFFFFFFFFFFFFLL ^ 0x50B9DF2D0BDA547ELL)
      + 0x6654BA01176D5C84
      + ((2 * (v47 & 0xF8FFFFFFFFFFFFFFLL ^ 0x50B9DF2D0BDA547ELL) + 0x55E7EF06772DD764) & 0x72C184FBB7ACE1A2 ^ 0xFBFFFFFFFFFFFFFFLL);
  unint64_t v67 = ((2 * (((v66 >> 8) ^ 0x2EBC0D88A5736) + (v66 ^ 0x55747CC156E06BE8))) & 0xE61EFA53D6BD2E7ELL)
      + ((((v66 >> 8) ^ 0x2EBC0D88A5736) + (v66 ^ 0x55747CC156E06BE8)) ^ 0x730F7D29EB5E973FLL);
  unint64_t v68 = v67
      - 0x730F7D29EB5E973FLL
      + ((v66 << 56) ^ 0x7D00000000000000)
      + 0x2C8B30B314EBF6D9
      - 2
      * ((v67 - 0x730F7D29EB5E973FLL + ((v66 << 56) ^ 0x7D00000000000000)) & 0x2C8B30B314EBF6FFLL ^ (v67 - 0x730F7D29EB5E973FLL) & 0x26);
  *((void *)&v47 + 1) = v66 ^ 0x15747CC156E06BE8;
  *(void *)&long long v47 = v66 ^ 0x4000000000000000;
  uint64_t v69 = v68 ^ ((v47 >> 61) + 0x2C8B30B314EBF6D9 - ((2 * (v47 >> 61)) & 0x5916616629D7EDB2));
  v68 >>= 8;
  *((void *)&v47 + 1) = v68 ^ 0x151837F;
  *(void *)&long long v47 = v68 ^ 0xFF8738D2E8000000;
  uint64_t v70 = v47 >> 27;
  *((void *)&v47 + 1) = v70 ^ 0x1FFF6CE657;
  *(void *)&long long v47 = v70 ^ 0x6F3ABF0000000000;
  uint64_t v71 = ((((v47 >> 37) | (v67 << 56)) - 0x3F00000000000000) ^ 0x7700000000000000) + (v69 ^ 0x50D4D0E13CBD7177);
  unint64_t v72 = v71 - 0x13BAE24794902E26 - ((2 * v71) & 0xD88A3B70D6DFA3B4);
  *((void *)&v47 + 1) = v69 ^ 0x10D4D0E13CBD7177;
  *(void *)&long long v47 = v69 ^ 0x4000000000000000;
  uint64_t v73 = (v47 >> 61) - 0x13BAE24794902E26 - ((2 * (v47 >> 61)) & 0xD88A3B70D6DFA3B4);
  *((void *)&v47 + 1) = v72 ^ 0xDA;
  *(void *)&long long v47 = v72 ^ 0xEC451DB86B6FD100;
  uint64_t v74 = (v47 >> 8) ^ 0xE5D7DAAEED85A3;
  unint64_t v75 = v72 ^ v73 ^ 0xE5D7DAAEED85A300;
  *((void *)&v47 + 1) = v72 ^ v73 ^ 0x5D7DAAEED85A300;
  *(void *)&long long v47 = v72 ^ ~v73;
  uint64_t v76 = v47 >> 61;
  *((void *)&v47 + 1) = (v74 + v75) ^ 0x2Du;
  *(void *)&long long v47 = (v74 + v75) ^ 0x8E85997BF8A30900;
  unint64_t v77 = (v74 + v75) ^ v76;
  uint64_t v78 = (v47 >> 8)
      + (v77 ^ 0x8E85997BF8A3092DLL)
      + 0x362CD7C7AD6F7957
      - ((2 * ((v47 >> 8) + (v77 ^ 0x8E85997BF8A3092DLL))) & 0x6C59AF8F5ADEF2AELL);
  *((void *)&v47 + 1) = v77 ^ 0xE85997BF8A3092DLL;
  *(void *)&long long v47 = v77 ^ 0x8000000000000000;
  uint64_t v79 = ((v47 >> 61) + 0x362CD7C7AD6F7957 - ((2 * (v47 >> 61)) & 0x6C59AF8F5ADEF2AELL)) ^ v78;
  *((void *)&v47 + 1) = v78 ^ 6;
  *(void *)&long long v47 = v78 ^ 0xFB25C8D06D40A700;
  uint64_t v80 = (v79 ^ 0xCD091F17C02FDE51)
      + (v47 >> 8)
      + 0x78B464CF0CD9B633
      - ((2 * ((v79 ^ 0xCD091F17C02FDE51) + (v47 >> 8))) & 0xF168C99E19B36C66);
  *((void *)&v47 + 1) = v79 ^ 0xD091F17C02FDE51;
  *(void *)&long long v47 = v79 ^ 0xC000000000000000;
  uint64_t v81 = ((v47 >> 61) + 0x78B464CF0CD9B633 - ((2 * (v47 >> 61)) & 0xF168C99E19B36C66)) ^ v80;
  *((void *)&v47 + 1) = v80 ^ 0x51;
  *(void *)&long long v47 = v80 ^ 0x1A3ED89D85925100;
  uint64_t v82 = (v81 ^ 0x628ABC52894BE762)
      + (v47 >> 8)
      - 0x40848C5316D529E4
      - ((2 * ((v81 ^ 0x628ABC52894BE762) + (v47 >> 8))) & 0x7EF6E759D255AC38);
  *((void *)&v47 + 1) = v81 ^ 0x28ABC52894BE762;
  *(void *)&long long v47 = v81 ^ 0x6000000000000000;
  uint64_t v83 = ((v47 >> 61) - 0x40848C5316D529E4 - ((2 * (v47 >> 61)) & 0x7EF6E759D255AC38)) ^ 0x5AC09C033F8B2761 ^ v82;
  *((void *)&v47 + 1) = v82 ^ 0x7D;
  *(void *)&long long v47 = v82 ^ 0xE5BBEFAFD6A1F100;
  uint64_t v84 = v83 + (v47 >> 8);
  unint64_t v85 = ((2 * ((v84 ^ 0x1B0BD1982B59C071uLL) >> v43)) & 0xBF6BFD6DFF39EDB6)
      + (((v84 ^ 0x1B0BD1982B59C071uLL) >> v43) ^ 0xDFB5FEB6FF9CF6DBLL);
  char v86 = v43 ^ 0x3A;
  uint64_t v87 = v65 + 0x1156ABC81321210BLL + ((v84 ^ 0x30BD1982B59C071) << (v43 ^ 0x3Au) << 6);
  unint64_t v88 = v87 - 2 * (v87 & 0x2C2EF5E0E831ABBBLL ^ (v65 + 0x1156ABC81321210BLL) & 8) - 0x53D10A1F17CE544DLL;
  *(void *)&long long v47 = __ROR8__(a38- 0x6C3BEE829B0CF44DLL- ((2 * (a38 - 0x6C3BEE829B0CF44DLL)) & 0x49DFA00C4EB72F12)+ 0x24EFD006275B9789, 8);
  unint64_t v89 = (v47 & 0xF8FFFFFFFFFFFFFFLL ^ 0x8824EFD006275B97)
      - ((2 * (v47 & 0xF8FFFFFFFFFFFFFFLL ^ 0x8824EFD006275B97) + 0x55E7EF06772DD764) & 0xC2F9A1F09D6C1EF4);
  *((void *)&v47 + 1) = ((v47 ^ 0x6275B97)
                         - ((2 * (v47 ^ 0x6275B97) + 1999492964) & 0x9D6C1EF4)
                         - 1974666452) ^ 0xD6;
  *(void *)&long long v47 = (v89 + 0xC70C87B8A4CFB2CLL) ^ 0xD8F7D25D1F374900;
  uint64_t v90 = (v47 >> 8) + ((v89 + 0xC70C87B8A4CFB2CLL) ^ 0x8F686E44C3801443);
  unint64_t v91 = v90 + 0x53D5A9A4F7104CCELL - ((2 * v90) & 0xA7AB5349EE20999CLL);
  *((void *)&v47 + 1) = (v89 + 0xC70C87B8A4CFB2CLL) ^ 0xF686E44C3801443;
  *(void *)&long long v47 = v89 + a20;
  uint64_t v92 = (v47 >> 61) + 0x53D5A9A4F7104CCELL - ((2 * (v47 >> 61)) & 0xA7AB5349EE20999CLL);
  *((void *)&v47 + 1) = v91 ^ 0xB9;
  *(void *)&long long v47 = v91 ^ 0x3017945CBAD3D00;
  unint64_t v93 = v91 ^ v92;
  uint64_t v94 = (v93 ^ 0x50D4D0E13CBD7177)
      + (v47 >> 8)
      - 0x6751EFEBAF099DF2
      - ((2 * ((v93 ^ 0x50D4D0E13CBD7177) + (v47 >> 8))) & 0x315C2028A1ECC41CLL);
  *((void *)&v47 + 1) = v93 ^ 0x10D4D0E13CBD7177;
  *(void *)&long long v47 = v93 ^ 0x4000000000000000;
  uint64_t v95 = (v47 >> 61) - 0x6751EFEBAF099DF2 - ((2 * (v47 >> 61)) & 0x315C2028A1ECC41CLL);
  *((void *)&v47 + 1) = v94 ^ 0xE;
  *(void *)&long long v47 = v94 ^ 0x98AE101450F66200;
  uint64_t v96 = ((v47 >> 8) ^ 0xE5D7DAAEED85A3) + (v95 ^ v94 ^ 0xE5D7DAAEED85A300);
  unint64_t v97 = v96 - 0x397ED4CC7EA152F8 - ((2 * v96) & 0x8D02566702BD5A10);
  *((void *)&v47 + 1) = v95 ^ v94 ^ 0x5D7DAAEED85A300;
  *(void *)&long long v47 = v95 ^ ~v94;
  uint64_t v98 = (v47 >> 61) - 0x397ED4CC7EA152F8 - ((2 * (v47 >> 61)) & 0x8D02566702BD5A10);
  *((void *)&v47 + 1) = v97 ^ 0x25;
  *(void *)&long long v47 = v97 ^ 0x4804B24879FDA400;
  uint64_t v99 = v47 >> 8;
  unint64_t v100 = v97 ^ v98;
  unint64_t v101 = v100 ^ 0x8E85997BF8A3092DLL;
  *((void *)&v47 + 1) = v100 ^ 0xE85997BF8A3092DLL;
  *(void *)&long long v47 = v100 ^ 0x8000000000000000;
  uint64_t v102 = v47 >> 61;
  uint64_t v103 = v101 + v99;
  *((void *)&v47 + 1) = v103 ^ 0x51;
  *(void *)&long long v47 = v103 ^ 0xCD091F17C02FDE00;
  uint64_t v104 = v47 >> 8;
  uint64_t v105 = v103 ^ v102;
  *((void *)&v47 + 1) = v105 ^ 0xD091F17C02FDE51;
  *(void *)&long long v47 = v105 ^ 0xC000000000000000;
  uint64_t v106 = v104 + (v105 ^ 0xCD091F17C02FDE51);
  uint64_t v107 = v106 ^ (v47 >> 61);
  *((void *)&v47 + 1) = v106 ^ 0x62;
  *(void *)&long long v47 = v106 ^ a21;
  uint64_t v108 = (v47 >> 8) + (v107 ^ 0x628ABC52894BE762);
  *((void *)&v47 + 1) = v107 ^ 0x28ABC52894BE762;
  *(void *)&long long v47 = v107 ^ 0x6000000000000000;
  uint64_t v109 = v108 ^ 0xD2483A4AE6BB76 ^ ((v47 >> 61) - ((2 * (v47 >> 61)) & 0x1C25A872EADB382ELL) + 0xE12D439756D9C17);
  int v110 = ((v88 >> 24) ^ 0xFFFFFFE8) - ((2 * ((v88 >> 24) ^ 0xFFFFFFE8)) & 0xFFFFFF87);
  *((void *)&v47 + 1) = v108 ^ 1;
  *(void *)&long long v47 = v108 ^ 0x5AC09C033F8B2700;
  uint64_t v111 = ((v88 >> 8) ^ 0xFFFFFFAB) - ((2 * ((v88 >> 8) ^ 0xFFFFFFAB)) & 0x7A);
  unint64_t v112 = v85 + (((v109 + (unint64_t)(v47 >> 8)) ^ 0x30BD1982B59C071) << v86 << 6) + 0x204A014900630925;
  unint64_t v113 = v112 - ((2 * v112) & 0x97BC496DC1746752) + 0x4BDE24B6E0BA33A9;
  uint64_t v114 = (HIDWORD(v88) ^ 0xFFFFFFE0) - 2 * ((HIDWORD(v88) ^ 0xFFFFFFE0) & 0x33 ^ BYTE4(v88) & 3);
  int v115 = v65 - ((2 * v65 + 22) & 0xFFFFFF9A);
  unint64_t v116 = ((v113 >> 24) ^ 0xFFFFFFE0)
       - 2 * (((v113 >> 24) ^ 0xFFFFFFE0) & 0x65 ^ (v113 >> 24) & 4);
  unint64_t v117 = (HIBYTE(v88) ^ 0xFFFFFFAC) - 2 * ((HIBYTE(v88) ^ 0xFFFFFFAC) & 7);
  uint64_t v118 = ((v88 >> 16) ^ 0x31) - ((2 * ((v88 >> 16) ^ 0x31)) & 0xFFFFFFD4);
  unint64_t v119 = ((v88 >> 40) ^ 0xFFFFFFF5) - ((2 * ((v88 >> 40) ^ 0xFFFFFFF5)) & 0x78);
  unint64_t v120 = (HIWORD(v113) ^ 0xFFFFFFDE) - ((2 * (HIWORD(v113) ^ 0xFFFFFFDE)) & 0x30);
  int v121 = (HIWORD(v88) ^ 0x2E) - 2 * ((HIWORD(v88) ^ 0x2E) & 0xF);
  int v122 = !v41;
  int v123 = LODWORD(STACK[0x5B8]) + 849;
  LODWORD(STACK[0x47C]) = v110 - 61;
  LODWORD(STACK[0x474]) = v111 + 61;
  LODWORD(STACK[0x484]) = v114 + 48;
  LODWORD(STACK[0x45C]) = v115 - 40;
  LODWORD(STACK[0x460]) = v116 - 31;
  LODWORD(STACK[0x464]) = v117 + 7;
  LODWORD(STACK[0x454]) = v118 + 106;
  LODWORD(STACK[0x46C]) = v119 + 60;
  LODWORD(STACK[0x488]) = v85 - ((2 * v85 + 74) & 0xFFFFFFE0) - 107;
  LODWORD(STACK[0x470]) = (HIDWORD(v113) ^ 0xFFFFFFB6) - ((2 * (HIDWORD(v113) ^ 0xFFFFFFB6)) & 0x7A) + 61;
  LODWORD(STACK[0x48C]) = ((v113 >> 16) ^ 0xFFFFFFBA) - ((2 * ((v113 >> 16) ^ 0xFFFFFFBA)) & 0x60) - 80;
  LODWORD(STACK[0x450]) = HIBYTE(v113) ^ 0xFFFFFFCB;
  LODWORD(STACK[0x458]) = ((v113 >> 40) ^ 0x24) - ((2 * ((v113 >> 40) ^ 0x24)) & 0x1FFFFD6) + 107;
  LODWORD(STACK[0x480]) = ((v113 >> 8) ^ 0x33) + (~(2 * ((v113 >> 8) ^ 0x33)) | 0xFFFFFFBF) + 33;
  LODWORD(STACK[0x478]) = v120 - 104;
  LODWORD(STACK[0x468]) = v121 + 15;
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, unint64_t, unint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(STACK[0x4D0] + 8 * (v123 ^ (461 * v122))))(v111, v114, v116, v117, v118, v119, v120, v123 ^ (461 * v122), a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30);
}

uint64_t sub_18D9F63DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, unsigned int a20)
{
  BOOL v21 = a20 < 0xD8600724;
  unint64_t v22 = STACK[0x5B0];
  int v23 = STACK[0x2FC];
  uint64_t v24 = ((STACK[0x5B0] - 1056592855) & 0x3EFA52BB ^ ((STACK[0x5B0] ^ 0xD9) - 244))
      + LODWORD(STACK[0x2FC]);
  STACK[0x448] += 16;
  if (v21 == (v23 - 1927216537) < 0xD8600724) {
    BOOL v21 = v23 - 1927216537 < a20;
  }
  STACK[0x300] += 16;
  return (*(uint64_t (**)(uint64_t))(v20 + 8 * (int)(v22 ^ (127 * v21))))(v24);
}

void sub_18D9F647C(int a1)
{
  LODWORD(STACK[0x328]) = 15;
  LODWORD(STACK[0x444]) = STACK[0x454];
  LODWORD(STACK[0x2FC]) = a1;
  LODWORD(STACK[0x440]) = STACK[0x488];
  LODWORD(STACK[0x42C]) = STACK[0x458];
  LODWORD(STACK[0x41C]) = STACK[0x460];
  LODWORD(STACK[0x428]) = STACK[0x46C];
  LODWORD(STACK[0x424]) = STACK[0x450];
  LODWORD(STACK[0x418]) = STACK[0x470];
  LODWORD(STACK[0x420]) = STACK[0x48C];
  LODWORD(STACK[0x434]) = STACK[0x464];
  LODWORD(STACK[0x414]) = STACK[0x478];
  LODWORD(STACK[0x43C]) = STACK[0x474];
  LODWORD(STACK[0x40C]) = STACK[0x47C];
  LODWORD(STACK[0x410]) = STACK[0x480];
  LODWORD(STACK[0x438]) = STACK[0x45C];
  LODWORD(STACK[0x408]) = STACK[0x484];
  LODWORD(STACK[0x430]) = STACK[0x468];
  JUMPOUT(0x18D9F4608);
}

uint64_t sub_18D9F659C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,int a35,int a36,int a37,int a38,int a39,int a40,int a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,int a52,int a53,int a54,int a55,int a56,int a57,int a58,int a59)
{
  LODWORD(STACK[0x5A0]) = v65;
  int v69 = (v60 - 103) | 0x232;
  int v70 = a54 - 121 * (a53 + a59 * v62 - 69);
  int v71 = a55 + (v69 ^ v61) * (v70 - 127);
  int v72 = a52 + (v71 - 51) * v63;
  int v73 = a34 - 79 * v72;
  int v74 = a57 + 79 * v73;
  int v75 = a35 + 85 * (v74 - 106);
  HIDWORD(v137) = v75 + 17;
  int v76 = a37 - 97 * (v75 + 17);
  HIDWORD(v138) = v76 - 38;
  int v77 = a40 - 73 * (v76 - 38);
  LODWORD(v140) = v77 + 99;
  int v78 = a56 + 105 * (v77 + 99);
  int v79 = a41 - (v78 + 61) + 32 * (v78 + 61);
  HIDWORD(v140) = v79 + 26;
  int v80 = a39 - 123 * (v79 + 26);
  HIDWORD(v139) = v80 - 117;
  int v81 = a58 - 89 * (v80 - 117);
  int v82 = a38 + 39 * (v81 - 50);
  LODWORD(v139) = v82 - 104;
  int v83 = a36 + 43 * (v82 - 104);
  LODWORD(STACK[0x5B8]) = v83;
  LODWORD(v138) = v83 + 15;
  unsigned int v84 = (LODWORD(STACK[0x2C0]) ^ 0xFFFFFFCB)
      + 123 * (v83 + 15)
      + 44
      + (~(2 * ((LODWORD(STACK[0x2C0]) ^ 0xFFFFFFCB) + 123 * (v83 + 15) + 44)) | 0x69)
      - 52;
  int v85 = LODWORD(STACK[0x2E0]) ^ 0x25;
  LODWORD(STACK[0x2C0]) = v84;
  unsigned int v86 = v85 - 37 * (v84 ^ 0xFFFFFFCB) - ((2 * (v85 - 37 * (v84 ^ 0xFFFFFFCB))) & 0x4A) + 37;
  unsigned int v87 = LODWORD(STACK[0x2C4]) ^ 0xFFFFFF9A;
  LODWORD(STACK[0x2E0]) = v86;
  LODWORD(STACK[0x518]) = 37;
  int v88 = v87 + 93 * (v86 ^ 0x25) - ((2 * (v87 + 93 * (v86 ^ 0x25))) & 0x34) - 102;
  unsigned int v89 = LODWORD(STACK[0x2E8]) ^ 0xFFFFFFC1;
  LODWORD(STACK[0x2C4]) = v88;
  unsigned int v90 = v89 + 77 * (v88 ^ 0xFFFFFF9A) - ((2 * (v89 + 77 * (v88 ^ 0xFFFFFF9A))) & 0xFFFFFF83) - 63;
  unsigned int v91 = LODWORD(STACK[0x2EC]) ^ 0xFFFFFFDC;
  LODWORD(STACK[0x2E8]) = v90;
  unsigned int v92 = v91 - 97 * (v90 ^ 0xFFFFFFC1) - ((2 * (v91 - 97 * (v90 ^ 0xFFFFFFC1))) & 0xFFFFFFB8) - 36;
  unsigned int v93 = LODWORD(STACK[0x2E4]) ^ 0xFFFFFF9B;
  LODWORD(STACK[0x2EC]) = v92;
  unsigned int v94 = v93 - 29 * (v92 ^ 0xFFFFFFDC) + (~(2 * (v93 - 29 * (v92 ^ 0xFFFFFFDC))) | 0xFFFFFFC9) - 100;
  int v95 = LODWORD(STACK[0x2B4]) ^ 0x46;
  LODWORD(STACK[0x2E4]) = v94;
  unsigned int v96 = v95 - 109 * (v94 ^ 0xFFFFFF9B) - (v67 & (2 * (v95 - 109 * (v94 ^ 0xFFFFFF9B)))) + 70;
  int v97 = LODWORD(STACK[0x2D8]) ^ 0x4F;
  LODWORD(STACK[0x2B4]) = v96;
  int v98 = v97 + 51 * (v96 ^ 0x46) + (~(2 * (v97 + 51 * (v96 ^ 0x46))) | 0x61) + 80;
  int v99 = LODWORD(STACK[0x2CC]) ^ 0x5D;
  LODWORD(STACK[0x2D8]) = v98;
  unsigned int v100 = v99 + 75 * (v98 ^ 0x4F) - ((2 * (v99 + 75 * (v98 ^ 0x4F))) & 0xFFFFFFBA) + 93;
  unsigned int v101 = LODWORD(STACK[0x2C8]) ^ 0xFFFFFF96;
  LODWORD(STACK[0x2CC]) = v100;
  int v102 = v101 - 43 * (v100 ^ 0x5D) - ((2 * (v101 - 43 * (v100 ^ 0x5D))) & 0x2C) - 106;
  unsigned int v103 = LODWORD(STACK[0x2B8]) ^ 0xFFFFFF8B;
  LODWORD(STACK[0x2C8]) = v102;
  unsigned int v104 = v103 - 103 * (v102 ^ 0xFFFFFF96) - ((2 * (v103 - 103 * (v102 ^ 0xFFFFFF96))) & 0x16) - 117;
  unsigned int v105 = LODWORD(STACK[0x2D0]) ^ 0xFFFFFFED;
  LODWORD(STACK[0x2B8]) = v104;
  unsigned int v106 = v105 + (v104 ^ 0xFFFFFF8B) * v66 - ((2 * (v105 + (v104 ^ 0xFFFFFF8B) * v66)) & 0xFFFFFFDA) - 19;
  int v107 = LODWORD(STACK[0x2DC]) ^ 0x53;
  LODWORD(STACK[0x2D0]) = v106;
  unsigned int v108 = v107 - 21 * (v106 ^ 0xFFFFFFED) - ((2 * (v107 - 21 * (v106 ^ 0xFFFFFFED))) & 0xFFFFFFA6) + 83;
  unsigned int v109 = LODWORD(STACK[0x2BC]) ^ 0xFFFFFFE3;
  LODWORD(STACK[0x2DC]) = v108;
  unsigned int v110 = v109 + 77 * (v108 ^ 0x53) - ((2 * (v109 + 77 * (v108 ^ 0x53))) & 0xFFFFFFC7) - 29;
  int v111 = LODWORD(STACK[0x2D4]) ^ 0x63;
  LODWORD(STACK[0x2BC]) = v110;
  unsigned int v112 = v111 - 21 * (v110 ^ 0xFFFFFFE3) - ((2 * (v111 - 21 * (v110 ^ 0xFFFFFFE3))) & 0xFFFFFFC7) + 99;
  LODWORD(STACK[0x2D4]) = v112;
  int v113 = 65 * (v112 ^ 0x63) + (STACK[0x2F0] ^ 0xFFFFFFFA);
  unint64_t v114 = v113 - ((2 * v113) & 0xFFFFFFF4) - 6;
  STACK[0x2F0] = v114;
  int v115 = a59 + (v114 ^ 0xFFFFFFFA) * v68;
  unint64_t v116 = v64 ^ STACK[0x320];
  int v117 = (v70 + 120) ^ 0x67 ^ (v116 >> 40);
  int v118 = v117 - ((2 * v117) & 0x34);
  int v119 = ((v115 - 37) ^ HIBYTE(v116) ^ 0x31)
       - 2 * (((v115 - 37) ^ HIBYTE(v116) ^ 0x31) & 0x4F ^ ((v115 - 37) ^ HIBYTE(v116)) & 4);
  LODWORD(v137) = v73;
  int v120 = (v116 >> 16) ^ (v73 - 118) ^ 9;
  int v121 = (v116 ^ (v75 - 9) ^ 0xFFFFFFD6) + (~(2 * (v116 ^ (v75 - 9) ^ 0xFFFFFFD6)) | 0x61);
  unint64_t v122 = v59 ^ STACK[0x318];
  int v123 = (v122 >> 40) ^ (v78 - 29) ^ 0x62;
  int v124 = HIBYTE(v122) ^ (v76 - 113) ^ 0x11;
  uint64_t v125 = v124 - ((2 * v124) & 0xFFFFFFBA);
  int v126 = HIWORD(v122) ^ (v77 + 24) ^ 0xF;
  uint64_t v127 = v126 - ((2 * v126) & 0x2Cu);
  uint64_t v128 = ((v79 - 23) ^ HIDWORD(v122) ^ 0xFFFFFFEC)
       - 2 * ((((v79 - 23) ^ BYTE4(v122)) ^ 0xEC) & 0x6F ^ ((v79 - 23) ^ HIDWORD(v122)) & 2);
  int v129 = (v122 >> 24) ^ (v80 + 13) ^ 0xD;
  int v130 = (v122 >> 16) ^ (v81 + 118) ^ 0xFFFFFFED;
  uint64_t v131 = v130 - ((2 * v130) & 0xFFFFFFC7);
  int v132 = (v122 >> 8) ^ (v82 + 69) ^ 0xFFFFFF9F;
  unint64_t v133 = v129 - ((2 * v129) & 0xFFFFFFA6) + 83;
  unint64_t v134 = v132 - ((2 * v132) & 0xFFFFFFC7) + 99;
  unint64_t v135 = (v122 ^ (LODWORD(STACK[0x5B8]) - 45) ^ 0xFFFFFFC5)
       - ((2 * (v122 ^ (LODWORD(STACK[0x5B8]) - 45) ^ 0xFFFFFFC5)) & 0xFFFFFFF4)
       - 6;
  STACK[0x558] = v123 - ((2 * v123) & 0x16u) - 117;
  STACK[0x578] = v133;
  HIDWORD(v144) = v133;
  STACK[0x5B0] = v135;
  STACK[0x560] = ((v74 + 99) ^ (v116 >> 8) ^ 0x12)
               - 2
               * (((v74 + 99) ^ (v116 >> 8) ^ 0x12) & 0x47 ^ ((v74 + 99) ^ (v116 >> 8)) & 1)
               + 70;
  STACK[0x5B8] = (v128 - 19);
  HIDWORD(v143) = v128 - 19;
  LODWORD(v141) = ((126 - v71) ^ HIDWORD(v116)) - ((2 * ((126 - v71) ^ HIDWORD(v116))) & 0xFFFFFF83) - 63;
  HIDWORD(v141) = v134;
  STACK[0x538] = (v131 - 29);
  LODWORD(v144) = v131 - 29;
  LODWORD(v142) = v127 - 106;
  STACK[0x5A8] = (v121 + 80);
  LODWORD(v143) = v121 + 80;
  STACK[0x548] = v134;
  STACK[0x550] = (v125 + 93);
  STACK[0x580] = (v72 ^ (v116 >> 24) ^ 0x38)
               - 2 * ((v72 ^ (v116 >> 24) ^ 0x38) & 0x5F ^ (v72 ^ (v116 >> 24)) & 3)
               - 36;
  HIDWORD(v142) = v119 - 53;
  HIDWORD(a33) = 82;
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(STACK[0x4D0] + 8 * (int)(((((v69 + 552548744) & 0xDF10C75A ^ 0xFFFFFE29) + ((v69 - 627) | 0x491)) * (LODWORD(STACK[0x400]) == LODWORD(STACK[0x5A0]))) ^ v69)))(v131, v133, v127, v128, v125, (v119 - 53), (v118 - 102), v120 - ((2 * v120) & 0x36u) - 101, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           v137,
           v138,
           v139,
           v140,
           a42,
           a43,
           v141,
           v142,
           v143,
           v144);
}

#error "18D9F7024: call analysis failed (funcsize=158)"

uint64_t sub_18D9F7028(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, int a6, unint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,unsigned __int8 *a52,unsigned __int8 *a53,unsigned __int8 *a54,unsigned __int8 *a55,unsigned __int8 *a56,unsigned __int8 *a57,unsigned __int8 *a58,unsigned __int8 *a59,int a60,unsigned __int8 *a61,unsigned __int8 *a62,unsigned __int8 *a63)
{
  unint64_t v75 = STACK[0x320];
  LODWORD(STACK[0x438]) ^= HIBYTE(STACK[0x320]) ^ 0xFFFFFFD7 ^ *a67;
  int v76 = (v73 - 1377328286) & 0x52185DBF;
  LODWORD(STACK[0x43C]) ^= HIWORD(v75) ^ *a68 ^ (v76 - 99);
  int v77 = HIDWORD(v75) ^ LODWORD(STACK[0x40C]) ^ *a64;
  LODWORD(STACK[0x444]) ^= (v75 >> 40) ^ v68 ^ *a66;
  int v78 = (v75 >> 24) ^ LODWORD(STACK[0x408]) ^ *a65;
  LODWORD(STACK[0x428]) ^= (v75 >> 16) ^ 0x6B ^ *a61;
  LODWORD(STACK[0x430]) ^= a60 ^ 0xFFFFFFC6 ^ *a63;
  LODWORD(STACK[0x434]) ^= v75 ^ 0x67 ^ *a62;
  unint64_t v79 = STACK[0x318];
  LODWORD(STACK[0x440]) ^= HIBYTE(STACK[0x318]) ^ 0xFFFFFFD7 ^ *a58;
  LODWORD(STACK[0x410]) ^= HIWORD(v79) ^ 0x56 ^ *a59;
  LODWORD(STACK[0x420]) ^= (v79 >> 40) ^ 0x4F ^ *a57;
  int v80 = HIDWORD(v79) ^ LODWORD(STACK[0x41C]) ^ *a56;
  LODWORD(STACK[0x42C]) ^= (v79 >> 16) ^ 0x6B ^ *a54;
  int v81 = (v79 >> 24) ^ LODWORD(STACK[0x418]) ^ *a55;
  LODWORD(STACK[0x414]) ^= (v79 >> 8) ^ 0xFFFFFFC6 ^ *a53;
  LODWORD(STACK[0x40C]) = v77 ^ 2;
  LODWORD(STACK[0x408]) = v78 ^ 0x7E;
  LODWORD(STACK[0x41C]) = v80 ^ 2;
  LODWORD(STACK[0x418]) = v81 ^ 0x7E;
  uint64_t v82 = (LODWORD(STACK[0x2FC]) - 1262421197);
  STACK[0x448] -= v82;
  STACK[0x300] -= v82;
  LODWORD(STACK[0x424]) ^= v79 ^ 0x67 ^ *a52;
  LODWORD(STACK[0x2FC]) = 1262421197;
  LODWORD(STACK[0x570]) = (v76 ^ 0x4A0) * v69;
  int v83 = (a7 ^ 0x9A)
      - 55460167
      - (((a7 ^ 0x9A) << ((((v73 + 98) & 0xBF ^ 0xA0) + 57) ^ (((v73 + 98) & 0xBF ^ 0xA0) * v69))) & 0x172);
  LODWORD(v79) = (v71 ^ 0xC1) + 1543899305 - ((2 * (v71 ^ 0xC1)) & 0x152);
  int v84 = (a8 ^ 0x9B) - 1818858422 + (~(2 * (a8 ^ 0x9B)) | 0xFFFFFECF);
  int v86 = (v70 ^ 0x4F) - 384245682 - ((2 * (v70 ^ 0x4F)) & 0x9C);
  int v87 = (v74 ^ 0xED) - 1038479246 - ((2 * (v74 ^ 0xED)) & 0x14C);
  int v88 = (char *)*(&off_1E559D8D0 + v76 - 1102) - 8;
  LODWORD(v82) = ((a6 ^ 0x1C) + 12) ^ *(void *)&v88[8 * (a6 ^ 0xCB)] ^ *(void *)&v88[8 * (v72 ^ a4)] ^ ((v72 ^ 0xF3) - ((2 * (v72 ^ 0xF3) + 24) & 0xCA) + 241) ^ 0xFFFFFFE5;
  LOBYTE(v82) = a6 ^ 0x2C ^ (v82 - ((2 * v82) & 0x60) + 48);
  LODWORD(STACK[0x590]) = a6;
  LOBYTE(v82) = (v82 + (~(2 * v82) | 0x69) - 52) ^ a6;
  LOBYTE(v82) = (v82 + (~(2 * v82) | 0xB5) + 38) ^ v72;
  STACK[0x598] = a7;
  LOBYTE(v82) = (v82 - ((2 * v82) & 0x34) - 102) ^ a7;
  STACK[0x510] = v71;
  LOBYTE(v82) = (v82 - ((2 * v82) & 0x83) - 63) ^ v71;
  unint64_t v89 = STACK[0x580];
  LOBYTE(v82) = (v82 + (~(2 * v82) | 0x47) - 35) ^ STACK[0x580];
  STACK[0x5A0] = a8;
  LOBYTE(v82) = (v82 - ((2 * v82) & 0x36) - 101) ^ a8;
  unint64_t v90 = STACK[0x560];
  LOBYTE(v82) = (v82 - ((2 * v82) & 0x8C) + 70) ^ STACK[0x560];
  STACK[0x5A8] = v70;
  LOBYTE(v82) = (v82 + (~(2 * v82) | 0x61) + 80) ^ v70;
  unint64_t v91 = STACK[0x550];
  LOBYTE(v82) = (v82 - ((2 * v82) & 0xBA) + 93) ^ STACK[0x550];
  unint64_t v92 = STACK[0x558];
  LOBYTE(v82) = (v82 - ((2 * v82) & 0x16) - 117) ^ STACK[0x558];
  STACK[0x5B8] = v74;
  LOBYTE(v82) = (v82 - ((2 * v82) & 0xDA) - 19) ^ v74;
  unint64_t v93 = STACK[0x578];
  LOBYTE(v82) = (v82 - ((2 * v82) & 0xA6) + 83) ^ STACK[0x578];
  unint64_t v94 = STACK[0x548];
  LOBYTE(v82) = (v82 - ((2 * v82) & 0xC7) + 99) ^ STACK[0x548];
  unint64_t v95 = STACK[0x538];
  LOBYTE(v82) = (v82 - ((2 * v82) & 0xC7) - 29) ^ STACK[0x538];
  unint64_t v96 = STACK[0x5B0];
  LOBYTE(v82) = (v82 + (~(2 * v82) | 0xB) - 5) ^ STACK[0x5B0];
  int v97 = *(void *)&v88[8 * (v79 ^ 0x5C0609AA)] ^ ((v79 ^ 0x5C06097D) + 12);
  unsigned __int8 v98 = v89 ^ 0x85 ^ ((*(void *)&v88[8 * (v89 ^ 0xD8)] ^ ((v89 ^ 0xF)
                                                                           - ((2 * (v89 ^ 0xF) + 24) & 0xCA)
                                                                           - 15))
                    + (~(2
                       * (*(void *)&v88[8 * (v89 ^ 0xD8)] ^ ((v89 ^ 0xF)
                                                                              - ((2 * (v89 ^ 0xF) + 24) & 0xCA)
                                                                              - 15))) | 0xB7)
                    - 91);
  int v99 = v79 ^ ((v83 ^ 0xFCB1BF6C) + 12);
  uint64_t v100 = *(void *)&v88[8 * (v83 ^ 0xFCB1BFBB)];
  STACK[0x508] = v72;
  LODWORD(v82) = v99 ^ v100 ^ ((v97 ^ 0x53E7C7E5) - 2 * ((v97 ^ 0x53E7C7E5) & 0x363921F ^ v97 & 0x18) - 2090626553) ^ v98 ^ 0x8C825C9F ^ (v72 ^ (v82 - ((2 * v82) & 0x1A) - 115)) ^ 0x7E;
  int v101 = *(void *)&v88[8 * (v86 ^ 0xE918E149)] ^ ((v86 ^ 0xE918E19E) + 12);
  LODWORD(v82) = (((v84 + 335) ^ 0x93966C4A) + 12) ^ v86 ^ v83 ^ *(void *)&v88[8 * ((v84 + 335) ^ 0x93966C9D)] ^ ((v101 ^ 0x53E7C7E5) + 69226245 - 2 * ((v101 ^ 0x53E7C7E5) & 0x4204F07 ^ v101 & 2)) ^ v90 ^ 0xD0 ^ ((*(void *)&v88[8 * (v90 ^ 0x40)] ^ ((v90 ^ 0x97) - ((2 * (v90 ^ 0x97) + 24) & 0xCA) - 15)) - ((2 * (*(void *)&v88[8 * (v90 ^ 0x40)] ^ ((v90 ^ 0x97) - ((2 * (v90 ^ 0x97) + 24) & 0xCA) - 15))) & 0xD2) + 105) ^ 0x79C330BF ^ (v82 - ((2 * v82) & 0x775BCD5A) + 1001252525);
  int v102 = STACK[0x588];
  int v103 = *(void *)&v88[8 * (v92 ^ 0x89)] ^ ((v92 ^ 0x5E)
                                                             - ((2 * (v92 ^ 0x5E) + 24) & 0xCA)
                                                             + 241);
  LODWORD(v82) = *(void *)&v88[8 * (v102 ^ 0x97)] ^ ((v102 ^ 0x40)
                                                                      - ((2 * (v102 ^ 0x40) + 24) & 0xCA)
                                                                      + 241) ^ v92 ^ (v103 - ((2 * v103) & 0x3A) - 99) ^ ((v91 ^ 0xFFFFFF8A) + 12) ^ (v84 + 335) ^ *(void *)&v88[8 * (v91 ^ 0x5D)] ^ (v82 - ((2 * v82) & 0x52) + 41);
  LOBYTE(v82) = ((v82 ^ 0x45) - ((2 * v82) & 0x10) + 8) ^ v91;
  int v104 = (((v87 + 308) ^ 0xC21A1072) + 12) ^ (v87 + 308) ^ *(void *)&v88[8 * ((v87 + 308) ^ 0xC21A10A5)] ^ v93 ^ 0xB ^ ((*(void *)&v88[8 * (v93 ^ 0x57)] ^ ((v93 ^ 0x80) - 2 * ((v93 + 12) & 0x67 ^ (v93 ^ 0x80) & 2) - 15)) - ((2 * (*(void *)&v88[8 * (v93 ^ 0x57)] ^ ((v93 ^ 0x80) - 2 * ((v93 + 12) & 0x67 ^ (v93 ^ 0x80) & 2) - 15))) & 0x4A) - 91);
  int v105 = v104 ^ v95 ^ 0xB4 ^ ((*(void *)&v88[8 * (v95 ^ 0xE6)] ^ ((v95 ^ 0x31) - ((2 * (v95 ^ 0x31) + 24) & 0xCA) - 15))
                                                              + (~(2
                                                                 * (*(void *)&v88[8 * (v95 ^ 0xE6)] ^ ((v95 ^ 0x31) - ((2 * (v95 ^ 0x31) + 24) & 0xCA) - 15))) | 0xA9)
                                                              - 84) ^ v94 ^ 0x7D ^ ((*(void *)&v88[8 * (v94 ^ 0x65)] ^ ((v94 ^ 0xB2) - 2 * (((v94 ^ 0xB2) + 12) & 0x67 ^ (v94 ^ 0xB2) & 2) - 15)) - ((2 * (*(void *)&v88[8 * (v94 ^ 0x65)] ^ ((v94 ^ 0xB2) - 2 * (((v94 ^ 0xB2) + 12) & 0x67 ^ (v94 ^ 0xB2) & 2) - 15))) & 0xC3) - 31) ^ (v96 ^ ((*(void *)&v88[8 * (v96 ^ 0xFD)] ^ ((v96 ^ 0x2A) - ((2 * (v96 ^ 0x2A) + 24) & 0xCA) - 15)) - ((2 * (*(void *)&v88[8 * (v96 ^ 0xFD)] ^ ((v96 ^ 0x2A) - ((2 * (v96 ^ 0x2A) + 24) & 0xCA) - 15))) & 0xD4) - 22)) ^ 0xEE ^ v102 ^ 0xD4 ^ ((v82 ^ 0x82) - 2 * ((v82 ^ 0x82) & 0x3E ^ v82 & 4) - 70);
  unint64_t v106 = v105 ^ LODWORD(STACK[0x588]);
  unint64_t v107 = (unint64_t)*(&off_1E559D8D0 + (v76 ^ 0x4FA));
  STACK[0x530] = v107;
  LODWORD(v82) = ((2 * v106) & 0x72 ^ 0x40) + (v106 ^ 0x59);
  LODWORD(v82) = (v82 - ((2 * v82) & 0x4A) + 37) ^ *(unsigned __int8 *)(v107 + ((v105 ^ v102) ^ 0x1BLL));
  int v108 = (v82 - ((2 * v82) & 0x4E) + 39) ^ v106 ^ 0x47;
  uint64_t v109 = (((v82 - ((2 * v82) & 0x4E) + 39) ^ v105 ^ v102 ^ 0x47) ^ 0x9Eu)
       - 0x69400DC159F7AB25
       - ((2 * (v108 ^ 0xFFFFFF9E)) & 0x1B6);
  unint64_t v110 = ((v109 << 8) ^ 0xBFF23EA60854DB00 | v109 ^ 0x96BFF23EA60854DBLL)
       + 0x32756F9F4AE4BE75
       - 2
       * (((v109 << 8) ^ 0xBFF23EA60854DB00 | v109 ^ 0x96BFF23EA60854DBLL) & 0x32756F9F4AE4BE7DLL ^ (v109 ^ 0x96BFF23EA60854DBLL) & 8);
  uint64_t v111 = ((v110 << 16) ^ 0x6F9F4AE4BE750000 | v110 ^ 0x32756F9F4AE4BE75)
       + 0x1F901674D2DF8378
       - ((2 * ((v110 << 16) ^ 0x6F9F4AE4BE750000 | v110 ^ 0x32756F9F4AE4BE75)) & 0x3F202CE9A5BF06F0);
  uint64_t v112 = v111 ^ 0x1F901674D2DF8378;
  unint64_t v113 = (v111 << 32) ^ 0xD2DF837800000000 | v111 ^ 0x1F901674D2DF8378;
  unint64_t v114 = *(uint64_t (**)(void))(STACK[0x4D0] + 8 * (v76 ^ (121 * (STACK[0x540] & 1))));
  STACK[0x500] = v106;
  LODWORD(STACK[0x30C]) = v106 ^ 0x47;
  LODWORD(STACK[0x4F8]) = v108;
  STACK[0x4F0] = v113;
  STACK[0x4E8] = v112;
  return v114();
}

uint64_t sub_18D9F7B24()
{
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * ((251
                                * (((LODWORD(STACK[0x518]) == 37) ^ (LODWORD(STACK[0x570]) - 48)) & 1)) ^ LODWORD(STACK[0x570]))))();
}

uint64_t sub_18D9F7B6C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  int v11 = v9 - 167;
  unsigned int v12 = a1 ^ 0xFFFFFFCF;
  int v13 = a1 ^ 0x30;
  unint64_t v14 = LODWORD(STACK[0x454]) ^ a1 ^ 0x7Eu;
  unsigned int v15 = LODWORD(STACK[0x474]) ^ a1 ^ 0xFFFFFFE7;
  unint64_t v16 = LODWORD(STACK[0x45C]) ^ a1 ^ 0x67u;
  HIDWORD(v17) = LODWORD(STACK[0x46C]) ^ a7 ^ (v9 - 167);
  LODWORD(v17) = (LODWORD(STACK[0x46C]) ^ 0x20) << 24;
  int v18 = (v17 >> 29) - ((2 * (v17 >> 29)) & 0xFFFFFF87) - 61;
  int v19 = LODWORD(STACK[0x47C]) ^ a1 ^ 0x6D;
  HIDWORD(v17) = a1 ^ 0xA;
  LODWORD(v17) = (a1 ^ 0x20) << 24;
  int v20 = ((v17 >> 29) - ((2 * (v17 >> 29)) & 0x5C) + 46) ^ v18;
  HIDWORD(v17) = v20 ^ 5;
  LODWORD(v17) = (v20 ^ 0xFFFFFFEF) << 24;
  int v21 = v17 >> 27;
  HIDWORD(v17) = ((v21 >> 5) | (8 * v21)) ^ 1;
  LODWORD(v17) = (v21 << 27) ^ 0x68000000;
  unint64_t v22 = LODWORD(STACK[0x464]) ^ a1 ^ 0xFFFFFFEC;
  STACK[0x528] = a1 ^ 0xFFFFFFCF ^ LODWORD(STACK[0x470]);
  unint64_t v23 = LODWORD(STACK[0x484]) ^ a1 ^ 0x44u;
  unint64_t v24 = LODWORD(STACK[0x468]) ^ a1 ^ 0x76u;
  unint64_t v25 = LODWORD(STACK[0x488]) ^ a1 ^ v10;
  STACK[0x570] = LODWORD(STACK[0x478]) ^ a1 ^ 0x26u;
  STACK[0x588] = LODWORD(STACK[0x450]) ^ a1 ^ 3u;
  STACK[0x520] = LODWORD(STACK[0x48C]) ^ a1 ^ 0xFFFFFFB1;
  unint64_t v26 = (v17 >> 27) ^ 0x2F;
  int v27 = STACK[0x460];
  int v28 = STACK[0x458];
  int v29 = STACK[0x480];
  unint64_t v30 = STACK[0x578];
  STACK[0x4A8] = v16;
  LODWORD(STACK[0x4C8]) = v15;
  unint64_t v31 = v29 ^ v8 ^ 0x3Bu;
  unint64_t v32 = v28 ^ v12;
  STACK[0x3A0] = v32;
  unint64_t v33 = v27 ^ v13;
  STACK[0x3B0] = v33;
  LODWORD(STACK[0x3F8]) = (v16 ^ 0xE) - ((2 * (v16 ^ 0xE) + 114) & v10);
  LODWORD(v16) = (v11 + 665) | 0x46;
  unint64_t v34 = STACK[0x530];
  unsigned int v35 = ((v15 ^ 0xFFFFFFBA) + (~(2 * (v15 ^ 0xFFFFFFBA) + 114) | 0xFFFFFFB5) + 95) ^ *(unsigned __int8 *)(STACK[0x530] + (v15 ^ (((v11 - 103) | 0x46) + 75)));
  LODWORD(STACK[0x4A0]) = v35 - ((2 * v35) & 0xFFFFFFF3);
  STACK[0x578] = v14;
  LODWORD(STACK[0x498]) = (v14 ^ 0xFFFFFFCD) + (~(2 * (v14 ^ 0xFFFFFFCD) + 114) | 0xFFFFFFB5);
  unsigned int v36 = ((v19 ^ 0xFFFFFFB7) + 57) ^ v19 ^ *(unsigned __int8 *)(v34 + (v19 ^ 0xCCLL));
  HIDWORD(v17) = v36 ^ 0x12;
  LODWORD(v17) = (v36 ^ 0x80) << 24;
  LODWORD(STACK[0x4C0]) = ((v17 >> 30) >> 2) | ((v17 >> 30) << 6);
  STACK[0x400] = v23;
  int v37 = *(unsigned __int8 *)(v34 + (v23 ^ 0x33)) ^ ((v23 ^ 0x48)
                                                                     - ((2 * (v23 ^ 0x48) + 114) & 0x4A)
                                                                     + 94);
  LODWORD(STACK[0x3EC]) = v37 - ((2 * v37) & 0xFFFFFF9C);
  STACK[0x3F0] = v26;
  int v38 = *(unsigned __int8 *)(v34 + (v26 ^ 0x7FLL)) ^ ((v26 ^ 4) - ((2 * (v26 ^ 4) + 114) & 0x4A) + 94);
  LODWORD(STACK[0x3E8]) = v38 - ((2 * v38) & 0xFFFFFFAA);
  LODWORD(STACK[0x4B8]) = (v24 ^ 0x52) - ((2 * (v24 ^ 0x52) + 114) & 0x4A);
  STACK[0x3D0] = v22;
  int v39 = *(unsigned __int8 *)(v34 + (v22 ^ 0xB3)) ^ ((v22 ^ 0x37)
                                                                     - ((2 * (v22 ^ 0x37) + 14) & 0x4A)
                                                                     - 20);
  LODWORD(STACK[0x3CC]) = v39 - ((2 * v39) & 0x6E);
  STACK[0x3E0] = v25;
  int v40 = *(unsigned __int8 *)(v34 + (v25 ^ 0x54)) ^ ((v25 ^ 0x2F)
                                                                     - ((2 * (v25 ^ 0x2F) + 114) & 0x4A)
                                                                     + 94);
  LODWORD(STACK[0x3C8]) = v40 - ((2 * v40) & 0xFFFFFF8A);
  STACK[0x490] = v31;
  int v41 = *(unsigned __int8 *)(v34 + (v31 ^ 0x1ELL)) ^ ((v31 ^ 0x65)
                                                                     - ((2 * (v31 ^ 0x65) + 114) & 0x4A)
                                                                     + 94);
  LODWORD(STACK[0x3DC]) = v41 - ((2 * v41) & 0xD4);
  LODWORD(STACK[0x3AC]) = (STACK[0x520] ^ 0x42) + (~(2 * (STACK[0x520] ^ 0x42) + 114) | 0xFFFFFFB5);
  LODWORD(STACK[0x3C4]) = (STACK[0x528] ^ 0xFFFFFFDB) - ((2 * (STACK[0x528] ^ 0xFFFFFFDB) + 114) & 0x4A);
  LODWORD(STACK[0x3B8]) = (v33 ^ 0xFFFFFFE4) - ((2 * (v33 ^ 0xFFFFFFE4) + 114) & 0x4A);
  LODWORD(STACK[0x398]) = (v32 ^ 0x50) - ((2 * (v32 ^ 0x50) + 114) & 0x4A);
  int v42 = *(unsigned __int8 *)(v34 + (STACK[0x570] ^ 0xCFLL)) ^ ((STACK[0x570] ^ 0xFFFFFFB4)
                                                                              + (~(2 * (STACK[0x570] ^ 0xFFFFFFB4) + 114) | 0xFFFFFFB5)
                                                                              + 95);
  LODWORD(STACK[0x39C]) = v42 - ((2 * v42) & 0xFFFFFFA8);
  int v43 = *(unsigned __int8 *)(v34 + (STACK[0x588] ^ 0x97)) ^ ((STACK[0x588] ^ 0xFFFFFFEC)
                                                                              - ((2 * (STACK[0x588] ^ 0xFFFFFFEC) + 114) & 0x4A)
                                                                              + 94);
  LODWORD(STACK[0x394]) = v43 - ((2 * v43) & 0xFFFFFFA8);
  LODWORD(v32) = STACK[0x590];
  unsigned int v44 = *(unsigned __int8 *)(v34 + ~LOBYTE(STACK[0x590])) ^ ((LODWORD(STACK[0x590]) ^ 0xFFFFFF84)
                                                                            - ((2 * (LODWORD(STACK[0x590]) ^ 0xFFFFFF84)
                                                                              + 114) & 0x4A)
                                                                            + 94);
  unsigned int v45 = v44 + (~(2 * v44) | 0xFFFFFFE7);
  unint64_t v46 = STACK[0x508];
  int v47 = (STACK[0x508] ^ 0x6A) - ((2 * (STACK[0x508] ^ 0x6A) + 114) & 0x4A);
  unint64_t v48 = STACK[0x598];
  int v49 = *(unsigned __int8 *)(v34 + (STACK[0x598] ^ 0xAELL)) ^ ((STACK[0x598] ^ 0xFFFFFFD5)
                                                                              - ((2 * (STACK[0x598] ^ 0xFFFFFFD5) + 114) & 0x4A)
                                                                              + 94);
  int v50 = v49 - ((2 * v49) & 0x38);
  unint64_t v51 = STACK[0x510];
  LODWORD(STACK[0x38C]) = (STACK[0x510] ^ 0xFFFFFF8E) - ((2 * (STACK[0x510] ^ 0xFFFFFF8E) + 114) & 0x4A);
  unint64_t v52 = STACK[0x580];
  unint64_t v53 = v24;
  LODWORD(v24) = (STACK[0x580] ^ 0xFFFFFF93) + (~(2 * (STACK[0x580] ^ 0xFFFFFF93) + 114) | 0xFFFFFFB5);
  unint64_t v54 = STACK[0x560];
  int v55 = *(unsigned __int8 *)(v34 + (STACK[0x560] ^ 0x72)) ^ ((STACK[0x560] ^ 9)
                                                                              - ((2 * (STACK[0x560] ^ 9) + 114) & 0x4A)
                                                                              + 94);
  LODWORD(STACK[0x390]) = v55 - ((2 * v55) & 0xFFFFFF9A);
  unint64_t v56 = STACK[0x5A0];
  int v57 = (STACK[0x5A0] ^ 0xFFFFFFD4) - ((2 * (STACK[0x5A0] ^ 0xFFFFFFD4) + 114) & 0x4A);
  LODWORD(STACK[0x380]) = (STACK[0x550] ^ 0x12) - ((2 * (STACK[0x550] ^ 0x12) + 114) & 0x4A);
  unint64_t v58 = STACK[0x558];
  int v59 = *(unsigned __int8 *)(v34 + (STACK[0x558] ^ 0xBFLL)) ^ ((STACK[0x558] ^ 0xFFFFFFC4)
                                                                              - ((2 * (STACK[0x558] ^ 0xFFFFFFC4) + 114) & 0x4A)
                                                                              + 94);
  LODWORD(STACK[0x37C]) = v59 - ((2 * v59) & 0xFFFFFF83);
  int v60 = v30 ^ 0x1C ^ ((v30 ^ 0x1C) + 57);
  int v61 = *(unsigned __int8 *)(v34 + (v30 ^ 0x67)) ^ 0x25;
  LODWORD(v33) = v61 + v60;
  int v62 = v61 & v60;
  int v63 = *(unsigned __int8 *)(v34 + (STACK[0x5B8] ^ 0xD9)) ^ ((STACK[0x5B8] ^ 0xFFFFFFA2)
                                                                              - ((2 * (STACK[0x5B8] ^ 0xFFFFFFA2) + 114) & 0x4A)
                                                                              + 94);
  LODWORD(STACK[0x388]) = v63 - ((2 * v63) & 0x7A);
  LODWORD(STACK[0x384]) = v33 - 2 * v62;
  unint64_t v64 = STACK[0x538];
  int v65 = *(unsigned __int8 *)(v34 + (STACK[0x538] ^ 0xD7)) ^ ((STACK[0x538] ^ 0xFFFFFFAC)
                                                                              - ((2 * (STACK[0x538] ^ 0xFFFFFFAC) + 114) & 0x4A)
                                                                              + 94);
  LOBYTE(v30) = v65 - ((2 * v65) & 0x98);
  int v66 = *(unsigned __int8 *)(v34 + (STACK[0x4A8] ^ 0x75)) ^ v32 ^ (LODWORD(STACK[0x3F8]) + 94) ^ (v45 + 13);
  LODWORD(STACK[0x590]) = STACK[0x4A8] ^ 0x3B ^ ((v66 ^ 0x88888888) - ((2 * v66) & 0x6A) + 53);
  int v67 = LODWORD(STACK[0x4C8]) ^ (v47 + 94) ^ *(unsigned __int8 *)(v34 + (v46 ^ 0x11)) ^ (LODWORD(STACK[0x4A0]) - 7);
  LODWORD(STACK[0x508]) = v46 ^ 0x42 ^ ((v67 ^ 0x43) + (~(2 * v67) | 0xAF) + 41);
  unint64_t v68 = STACK[0x548];
  LODWORD(STACK[0x4C8]) = (STACK[0x548] ^ 0x2C) + (~(2 * (STACK[0x548] ^ 0x2C) + 114) | 0xFFFFFFB5);
  int v69 = (LODWORD(STACK[0x498]) + 95) ^ v48 ^ *(unsigned __int8 *)(v34 + (STACK[0x578] ^ 0xB6)) ^ (v50 + 28);
  int v70 = LODWORD(STACK[0x4C0]) ^ (LODWORD(STACK[0x38C]) + 94) ^ *(unsigned __int8 *)(v34 + (v51 ^ 0xF5));
  int v71 = (v24 + 95) ^ STACK[0x400] ^ *(unsigned __int8 *)(v34 + (v52 ^ 0xE8)) ^ 0xFFFFFF86 ^ (LODWORD(STACK[0x3EC]) - 50);
  LODWORD(v33) = STACK[0x3F0] ^ (v57 + 94) ^ *(unsigned __int8 *)(v34 + (v56 ^ 0xAFLL)) ^ (LODWORD(STACK[0x3E8]) + 85);
  LODWORD(STACK[0x5A0]) = (((v51 ^ (v70 - ((2 * v70) & 0x22) - 111)) ^ 0x1F) << 8) | ((((v69 ^ 0x36) + ((2 * v69) & 0x64) - 50) ^ STACK[0x578]) << 16);
  LODWORD(v48) = STACK[0x5A8] ^ (127
                               - (STACK[0x3D0] ^ (STACK[0x5A8] - ((2 * STACK[0x5A8] + 114) & 0x4A) + 94) ^ *(unsigned __int8 *)(v34 + (STACK[0x5A8] ^ 0x7BLL)) ^ (LODWORD(STACK[0x3CC]) + 55)));
  LODWORD(v46) = ((v52 ^ 0xA5 ^ (v71 - ((2 * v71) & 0x6C) + 54)) << 16) | ((v56 ^ 0xC4 ^ ((v33 ^ 0x51) - 2 * ((v33 ^ 0x51) & 0x12 ^ v33 & 2) + 16)) << 8);
  STACK[0x5A8] = v53;
  int v72 = (LODWORD(STACK[0x4B8]) + 94) ^ v54 ^ *(unsigned __int8 *)(v34 + (v53 ^ 0x29)) ^ (LODWORD(STACK[0x390]) + 77);
  LODWORD(STACK[0x598]) = (v72 ^ 0x44) & 0x27 ^ v72 & 2;
  LODWORD(v56) = v58 ^ (LODWORD(STACK[0x3AC]) + 95) ^ *(unsigned __int8 *)(v34 + (STACK[0x520] ^ 0x39)) ^ (LODWORD(STACK[0x37C]) - 63) ^ 5;
  LOBYTE(v56) = STACK[0x520] ^ (v56 - ((2 * v56) & 0xB8) + 92);
  LOBYTE(v33) = STACK[0x490] ^ 0x91 ^ (LODWORD(STACK[0x3DC]) + 106);
  LOBYTE(v22) = (LOBYTE(STACK[0x398]) + 94) ^ v64 ^ *(unsigned char *)(v34 + (STACK[0x3A0] ^ 0x2BLL)) ^ (v30 - 52);
  unint64_t v73 = STACK[0x3B0];
  LODWORD(v52) = *(unsigned __int8 *)(v34 + (STACK[0x3B0] ^ 0x9FLL));
  LOBYTE(v22) = STACK[0x3A0] ^ 0x89 ^ ((v22 ^ 0x60) + ~(2 * ((v22 ^ 0x60) & 0x5D ^ v22 & 4)) - 38);
  unint64_t v74 = STACK[0x528];
  LODWORD(v23) = LODWORD(STACK[0x3B8]) + 94;
  int v75 = LODWORD(STACK[0x39C]) + 84;
  LODWORD(v30) = LODWORD(STACK[0x388]) - 67;
  LODWORD(v53) = *(unsigned __int8 *)(v34 + (v68 ^ 0x57));
  LODWORD(v64) = *(unsigned __int8 *)(v34 + (STACK[0x528] ^ 0xA0)) ^ (LODWORD(STACK[0x3C4]) + 94) ^ LODWORD(STACK[0x384]);
  int v76 = LODWORD(STACK[0x4C8]) + 95;
  uint64_t v77 = LODWORD(STACK[0x508]);
  LODWORD(STACK[0x580]) = (v72 ^ 0x44) - 91;
  LODWORD(STACK[0x590]) = v33;
  int v78 = STACK[0x5B8] ^ v23 ^ v52 ^ v30 ^ 0x1F;
  uint64_t v79 = ((v56 ^ 0x1E) << 16) | ((v73 ^ 0x85 ^ (v78 - ((2 * v78) & 0xC3) + 97)) << 8);
  int v80 = STACK[0x570] ^ v76 ^ v53 ^ v75;
  uint64_t v81 = ((v74 ^ 0xA0 ^ (v64 - ((2 * v64) & 0xFFFFFFF7) + 123)) << 24) | (v22 << 16) | (((v68 ^ ((v80 ^ 0xE0) - 2 * ((v80 ^ 0xE0) & 0x2F ^ v80 & 1) + 46)) ^ 2) << 8);
  int v82 = STACK[0x4F8] & 7 ^ 6;
  int v83 = ((-903049995 << ((v16 ^ 0x32) - 65)) | v82) ^ 0x516467A8;
  int v84 = v83 - 193855429 - 2 * (v83 & 0x747201EE ^ v82 & 2) + 433;
  uint64_t v85 = *(void *)(a8 + 8 * (v84 ^ 0xF47200EC));
  unint64_t v86 = (v84 ^ 0xF472003B) - 0x1EF89B62E32E63A9 + (~(2 * (v84 ^ 0xF472003B)) | 0xFFFFFFFFC65CC751) + 1;
  *(void *)(STACK[0x288]
            + 8
            * (((((STACK[0x4F8] & 0xF8) >> 3) ^ 0x13)
              - 903049995
              - ((2 * (((STACK[0x4F8] & 0xF8) >> 3) ^ 0x13)) & 0xAAAAAAAA)) ^ 0xCA2C8CF5)) = (STACK[0x4F0]
                                                                                            + 0x68B82AB753E7C7E5
                                                                                            - 2
                                                                                            * (STACK[0x4F0] & 0x68B82AB753E7C7FDLL ^ STACK[0x4E8] & 0x18)) ^ v85 ^ v86 ^ 0xCA1FDA1760A0172ELL ^ ((v86 ^ 0xE107649D1CD19C57) - ((2 * (v86 ^ 0xE107649D1CD19C57) + 0x5A19C58645550618) & 0x4208C11A39A338AELL) - 0x71EBB89FC083E09DLL);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(STACK[0x4D0]
                                                                                                 + 8
                                                                                                 * (int)(v16 ^ 0xE2)))(v46 | ((v48 ^ 0x7F) << 24), v79, v81, v77, 0x8E1447603F7C1F63, 4294967260);
}

uint64_t sub_18D9F8BA8(int a1, int a2, int a3, int a4, uint64_t a5, char a6)
{
  int v13 = LODWORD(STACK[0x5A0]) + (v7 | (a4 << 24));
  unsigned __int8 v14 = STACK[0x5A8] ^ (LODWORD(STACK[0x580]) - 2 * LOBYTE(STACK[0x598])) ^ 0xF7;
  int v15 = a2 | v6 | (LODWORD(STACK[0x590]) << (v12 - 44));
  char v16 = STACK[0x5B0] ^ (v10 - 2 * v9);
  LODWORD(STACK[0x570]) = v12 - 994;
  unsigned __int8 v17 = v16 ^ (v12 + 30) ^ a6;
  unint64_t v18 = ((a1 + v14) ^ 0x75354125u) - ((2 * ((a1 + v14) ^ 0x75354125u)) & 0x155E9ED40) - 0x42338BA9550B0960;
  unint64_t v19 = ((a3 + v17) ^ 0xEE9DF34D) - ((2 * ((a3 + v17) ^ 0xEE9DF34D)) & 0x1BEEFA8C0) + 0x4C3AAD18DF77D460;
  unint64_t v20 = STACK[0x280];
  uint64_t v21 = *(unsigned __int8 *)(STACK[0x280] + ((v18 >> 24) ^ 0xBDCC7456AALL));
  unint64_t v22 = (v13 ^ 0x2DF1AFB7u) - (unint64_t)((2 * (v13 ^ 0x2DF1AFB7)) & 0x1F432672) - 0x5F87CFB4F05E6CC7;
  uint64_t v23 = *(unsigned __int8 *)(STACK[0x280] + (BYTE2(v19) ^ 0x77));
  uint64_t v24 = *(unsigned __int8 *)(STACK[0x280] + (v7 ^ 0xB7));
  uint64_t v25 = *(unsigned __int8 *)(STACK[0x280] + ((v22 >> 24) ^ 0xA078304B0FLL));
  unint64_t v26 = (v15 ^ 0xB9B4A505) - (unint64_t)((2 * (v15 ^ 0xB9B4A505)) & 0xA6A0177E) - 0x7F8C08DFACAFF441;
  uint64_t v27 = *(unsigned __int8 *)(STACK[0x280] + (BYTE2(v26) ^ 0x50));
  uint64_t v28 = *(unsigned __int8 *)(STACK[0x280] + (BYTE2(v18) ^ 0xF4));
  uint64_t v29 = *(unsigned __int8 *)(STACK[0x280] + (v6 ^ 5));
  uint64_t v30 = *(unsigned __int8 *)(STACK[0x280] + (BYTE1(v26) ^ 0xBLL));
  uint64_t v31 = *(unsigned __int8 *)(STACK[0x280] + (BYTE1(v18) ^ 0xF6));
  uint64_t v32 = *(unsigned __int8 *)(STACK[0x280] + (v17 ^ 0x4DLL));
  uint64_t v33 = *(unsigned __int8 *)(STACK[0x280] + (BYTE2(v22) ^ 0xA1));
  uint64_t v34 = *(unsigned __int8 *)(STACK[0x280] + (BYTE1(v19) ^ 0xD4));
  uint64_t v35 = *(unsigned __int8 *)(STACK[0x280] + ((v19 >> 24) ^ 0x4C3AAD18DFLL));
  STACK[0x5B8] = *(unsigned __int8 *)(STACK[0x280] + (BYTE1(v22) ^ 0x93));
  uint64_t v36 = *(unsigned __int8 *)(v20 + (v14 ^ 0x25));
  uint64_t v37 = *(unsigned __int8 *)(v20 + ((v26 >> 24) ^ 0x8073F72053));
  uint64_t v38 = (*(void *)(v8 + 8 * (v24 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v39 = (*(void *)(v8 + 8 * (v23 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v40 = *(void *)(v8 + 8 * (v27 ^ 0x23));
  *((void *)&v41 + 1) = v40 ^ 0x1F8;
  *(void *)&long long v41 = v40 ^ 0xCB308CF472657000;
  unint64_t v42 = (v41 >> 11) - ((2 * (v41 >> 11)) & 0x53A4914787A5E0B2) + 0x29D248A3C3D2F059;
  uint64_t v43 = *(void *)(v8 + 8 * (v21 ^ 0x23));
  *((void *)&v41 + 1) = v43 ^ 0x1F8;
  *(void *)&long long v41 = v43 ^ 0xCB308CF472657000;
  unint64_t v44 = (v41 >> 11) + 0x404C9628D5639F09 - ((2 * (v41 >> 11)) & 0x80992C51AAC73E12);
  LODWORD(v42) = (((v42 ^ 0x2903A44CF12BCC97) + (v42 & 0xF8D1ECEF32F93CCELL ^ 0x2FFE5BB3CFD6F379) + 1) >> 27) ^ (v42 >> 24) ^ ((((((v38 - 0x4BF6E3FD798BBAAFLL - ((2 * v38) & 0x1238050CE88AA2uLL)) >> 3) & 0x6219A0D800 ^ 0x10808800) - 0x4BF6E3FD798BBAAFLL - ((2 * ((v38 - 0x4BF6E3FD798BBAAFLL - ((2 * v38) & 0x1238050CE88AA2uLL)) >> 3)) & 0x400408000)) ^ (v38 - 0x4BF6E3FD798BBAAFLL - ((2 * v38) & 0x1238050CE88AA2))) >> 8) ^ ((((((v39 - 0x6ABABD54475CCF46 - ((2 * v39) & 0xA855771466174uLL)) >> 3) & 0xC26219A00000 ^ 0x804011000000) - 0x6ABABD54475CCF46 - ((2 * (((v39 - 0x6ABABD54475CCF46 - ((2 * v39) & 0xA855771466174uLL)) >> 3) & 0xC26219A00000 ^ 0x804011000000)) & 0x844431400000)) ^ (v39 - 0x6ABABD54475CCF46 - ((2 * v39) & 0xA855771466174))) >> 16) ^ (((((v44 >> 3) & 0x1BE5C26200000000 ^ 0x801824000000000) + 0x404C9628D5639F09 - ((2 * ((v44 >> 3) & 0x1BE5C26200000000 ^ 0x801824000000000)) & 0x89044000000000)) ^ v44) >> 32);
  uint64_t v45 = (*(void *)(v8 + 8 * (v28 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v46 = *(void *)(v8 + 8 * (v25 ^ 0x23));
  *((void *)&v41 + 1) = v46 ^ 0x1F8;
  *(void *)&long long v41 = v46 ^ 0xCB308CF472657000;
  unint64_t v47 = (v41 >> 11) - 0x173D9059E947BE24 - ((2 * (v41 >> 11)) & 0xD184DF4C2D7083B8);
  uint64_t v48 = *(void *)(v8 + 8 * (v34 ^ 0x23));
  LODWORD(v45) = (((((v47 >> 3) & 0xE5C26219000000 ^ 0x406000000000)
                  - 0x173D9059E947BE24
                  - ((2 * ((v47 >> 3) & 0xE5C26219000000 ^ 0x406000000000)) & 0x180844420000000)) ^ v47) >> 24) ^ ((((((v45 + 0x5E1F7A0C36CB926ALL - ((2 * v45) & 0x3EF4186D9724D4uLL)) >> 3) & 0xC26219A00000 ^ 0xC24000800000) + 0x5E1F7A0C36CB926ALL - ((2 * (((v45 + 0x5E1F7A0C36CB926ALL - ((2 * v45) & 0x3EF4186D9724D4uLL)) >> 3) & 0xC26219A00000 ^ 0xC24000800000)) & 0x840021000000)) ^ (v45 + 0x5E1F7A0C36CB926ALL - ((2 * v45) & 0x3EF4186D9724D4))) >> 16);
  *((void *)&v41 + 1) = v48 ^ 0x1F8;
  *(void *)&long long v41 = v48 ^ 0xCB308CF472657000;
  unint64_t v49 = (v41 >> 11) - 0x1981D78FC69CC554 - ((2 * (v41 >> 11)) & 0xCCFC50E072C67558);
  LODWORD(v45) = v45 ^ (((((v49 >> 3) & 0x1BE5C26200000000 ^ 0x18C5C00200000000)
                        - 0x1981D78FC69CC554
                        - ((2 * ((v49 >> 3) & 0x1BE5C26200000000 ^ 0x18C5C00200000000)) & 0x4C800C000000000)) ^ v49) >> 32);
  uint64_t v50 = (*(void *)(v8 + 8 * (v30 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v30) = v45 ^ ((((((v50 - ((2 * v50) & 0x234BADB0F0B6DAuLL) - 0x65AE5A292787A493) >> 3) & 0x6219A0D800 ^ 0x2219000800)
                        - ((2
                          * (((v50 - ((2 * v50) & 0x234BADB0F0B6DAuLL) - 0x65AE5A292787A493) >> 3) & 0x6219A0D800 ^ 0x2219000800)) & 0x843040B000)
                        - 0x65AE59292787A493) ^ (v50 - ((2 * v50) & 0x234BADB0F0B6DALL) - 0x65AE5A292787A493)) >> 8);
  uint64_t v51 = (*(void *)(v8 + 8 * (v29 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v52 = *(void *)(v8 + 8 * (v31 ^ 0x23));
  *((void *)&v41 + 1) = v52 ^ 0x1F8;
  *(void *)&long long v41 = v52 ^ 0xCB308CF472657000;
  unint64_t v53 = (v41 >> 11) - 0x236F4A12648F163CLL - ((2 * (v41 >> 11)) & 0xB9216BDB36E1D388);
  LODWORD(v51) = (((((v53 >> 3) & 0xE5C26219000000 ^ 0x80022011000000)
                  - 0x236F4A12648F163CLL
                  - ((2 * ((v53 >> 3) & 0xE5C26219000000 ^ 0x80022011000000)) & 0x10100C032000000)) ^ v53) >> 24) ^ ((((((v51 - 0x16C5350DA1113596 - ((2 * v51) & 0x3595E4BDDD94D4uLL)) >> 3) & 0xC26219A00000 ^ 0x404209800000) - 0x16C5350DA1113596 - ((2 * (((v51 - 0x16C5350DA1113596 - ((2 * v51) & 0x3595E4BDDD94D4uLL)) >> 3) & 0xC26219A00000 ^ 0x404209800000)) & 0x184C431400000)) ^ (v51 - 0x16C5350DA1113596 - ((2 * v51) & 0x3595E4BDDD94D4))) >> 16);
  uint64_t v54 = *(void *)(v8 + 8 * (v33 ^ 0x23));
  *((void *)&v41 + 1) = v54 ^ 0x1F8;
  *(void *)&long long v41 = v54 ^ 0xCB308CF472657000;
  unint64_t v55 = (v41 >> 11) - 0x61224B4F0986DB20 - ((2 * (v41 >> 11)) & 0x3DBB6961ECF249C0);
  uint64_t v56 = (*(void *)(v8 + 8 * (v32 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v51) = v51 ^ (((((v55 >> 3) & 0x1BE5C26200000000 ^ 0x13C1820200000000)
                        - 0x61224B4F0986DB20
                        - ((2 * ((v55 >> 3) & 0x1BE5C26200000000 ^ 0x13C1820200000000)) & 0x358B004000000000)) ^ v55) >> 32);
  unint64_t v57 = ((((v56 - ((2 * v56) & 0x2DDA06C07B36A8uLL) + 0x6676ED03603D9B54) >> 3) & 0x6219A0D800 ^ 0x2008009000)
       - ((2
         * (((v56 - ((2 * v56) & 0x2DDA06C07B36A8uLL) + 0x6676ED03603D9B54) >> 3) & 0x6219A0D800 ^ 0x2008009000)) & 0x400413000)
       + 0x6676EE03603D9B54) ^ (v56 - ((2 * v56) & 0x2DDA06C07B36A8) + 0x6676ED03603D9B54);
  unint64_t v58 = *(void *)(v8 + 8 * (v35 ^ 0x23));
  LODWORD(v35) = v51 ^ (v57 >> 8);
  unint64_t v59 = ((v58 >> 11) ^ 0x1966119E8E4CAELL)
      - 0x19C019E6AE8EB541
      - ((2 * ((v58 >> 11) ^ 0x1966119E8E4CAELL)) & 0x3FCC32A2E2957ELL);
  uint64_t v60 = (*(void *)(v8 + 8 * (v37 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v61 = *(void *)(v8 + 8 * (v36 ^ 0x23));
  *((void *)&v41 + 1) = v61 ^ 0x1F8;
  *(void *)&long long v41 = v61 ^ 0xCB308CF472657000;
  unint64_t v62 = (v41 >> 11) - ((2 * (v41 >> 11)) & 0x2217B6C360772C8ALL) - 0x6EF4249E4FC469BBLL;
  LODWORD(v59) = ((((((v60 + 0x16053AD5A2D1A5A5 - ((2 * v60) & 0xA75AB45A34B4AuLL)) >> 3) & 0xC26219A00000 ^ 0x824210000000)
                  + 0x16053AD5A2D1A5A5
                  + (~(2
                     * (((v60 + 0x16053AD5A2D1A5A5 - ((2 * v60) & 0xA75AB45A34B4AuLL)) >> 3) & 0xC26219A00000 ^ 0x824210000000)) | 0xFFFFFB7FFEFFFFFFLL)
                  + 1) ^ (v60 + 0x16053AD5A2D1A5A5 - ((2 * v60) & 0xA75AB45A34B4ALL))) >> 16) ^ (((((v59 >> 3) & 0x6219A0D800 ^ 0x4208200800) - 0x19C019E6AE8EB541 - ((2 * ((v59 >> 3) & 0x19A0D800 ^ 0x8200800)) & 0x22409000)) ^ v59) >> 8);
  unint64_t v63 = (((v62 >> 3) & 0xE5C26219000000 ^ 0x21426010000000)
       - ((2 * ((v62 >> 3) & 0xE5C26219000000 ^ 0x21426010000000)) & 0x384C020000000)
       - 0x6DF4249E4FC469BBLL) ^ v62;
  uint64_t v64 = *(void *)(v8 + 8 * (STACK[0x5B8] ^ 0x23));
  LODWORD(v59) = v59 ^ (v63 >> 24);
  *((void *)&v41 + 1) = v64 ^ 0x1F8;
  *(void *)&long long v41 = v64 ^ 0xCB308CF472657000;
  unint64_t v65 = (v41 >> 11) - 0x4F5D2078EB2B34AELL - ((2 * (v41 >> 11)) & 0x6145BF0E29A996A4);
  LODWORD(v59) = v59 ^ (((((v65 >> 3) & 0x1BE5C26200000000 ^ 0x1204426000000000)
                        - 0x4F5D2078EB2B34AELL
                        - ((2 * ((v65 >> 3) & 0x1BE5C26200000000 ^ 0x1204426000000000)) & 0x2141840400000000)) ^ v65) >> 32);
  unint64_t v66 = (v59 ^ 0xF4ADDA78)
      - ((2 * (v59 ^ 0xF4ADDA78)) & 0x28F2EB84)
      - 0x31624C3FEB868A3ELL;
  uint64_t v67 = *(unsigned __int8 *)(v20
                           + (((unsigned __int16)((v59 ^ 0xDA78)
                                                                 - ((2 * (v59 ^ 0xDA78)) & 0xEB84)
                                                                 + 30146) >> 8) ^ 0x75));
  uint64_t v68 = *(unsigned __int8 *)(v20 + (v59 ^ 0x78));
  uint64_t v69 = *(void *)(v8
                  + 8
                  * (*(unsigned __int8 *)(v20
                                        + ((((v42 ^ 0x8639DF94)
                                                            - ((2 * (v42 ^ 0x8639DF94)) & 0x57DFA3FC)
                                                            - 1410346498) >> 16) ^ 0xEFLL)) ^ 0x23));
  *((void *)&v41 + 1) = v69 ^ 0x1F8;
  *(void *)&long long v41 = v69 ^ 0xCB308CF472657000;
  unint64_t v70 = (v41 >> 11) - 0xBD25927E1D8CC0BLL - ((2 * (v41 >> 11)) & 0xE85B4DB03C4E67EALL);
  uint64_t v71 = *(void *)(v8 + 8 * (v67 ^ 0x23));
  *((void *)&v41 + 1) = v71 ^ 0x1F8;
  *(void *)&long long v41 = v71 ^ 0xCB308CF472657000;
  unint64_t v72 = (v41 >> 11) - 0x2F741474ACDCF1ADLL - ((2 * (v41 >> 11)) & 0xA117D716A6461CA6);
  LODWORD(v70) = (((((v72 >> 3) & 0x1BE5C26200000000 ^ 0x1A01406000000000)
                  - 0x2F741474ACDCF1ADLL
                  - ((2 * ((v72 >> 3) & 0x1BE5C26200000000 ^ 0x1A01406000000000)) & 0x2103840400000000)) ^ v72) >> 32) ^ (((((v70 >> 3) & 0xE5C26219000000 ^ 0x85804201000000) - 0xBD25927E1D8CC0BLL - ((2 * ((v70 >> 3) & 0xE5C26219000000 ^ 0x85804201000000)) & 0x4B048030000000)) ^ v70) >> 24);
  uint64_t v73 = (*(void *)(v8
                   + 8
                   * (*(unsigned __int8 *)(v20
                                         + ((((v35 ^ 0x5EAD28D5)
                                            - ((2 * (v35 ^ 0x5EAD28D5)) & 0x1F277BBA0uLL)
                                            - 0x642A23E006C42230) >> 24) ^ 0x9BD5DC1FF9)) ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v74 = (*(void *)(v8
                   + 8
                   * (*(unsigned __int8 *)(v20
                                         + ((((v30 ^ 0xD3920D16)
                                                             - ((2 * (v30 ^ 0xD3920D16)) & 0x1B25F74)
                                                             + 14233530) >> 16) ^ 0xD9)) ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v24) = v70 ^ ((((((v73 - ((2 * v73) & 0x229B58661518D6uLL) - 0x324EB253CCF57395) >> 3) & 0x6219A0D800 ^ 0x2000205000)
                        - ((2
                          * (((v73 - ((2 * v73) & 0x229B58661518D6uLL) - 0x324EB253CCF57395) >> 3) & 0x6219A0D800 ^ 0x2000205000)) & 0x4022011000)
                        - 0x324EB153CCF57395) ^ (v73 - ((2 * v73) & 0x229B58661518D6) - 0x324EB253CCF57395)) >> 8) ^ ((((((v74 - ((2 * v74) & 0x1ED67EFC5F6864uLL) - 0x471094C081D04BCELL) >> 3) & 0xC26219A00000 ^ 0xC06209800000) - ((2 * (((v74 - ((2 * v74) & 0x1ED67EFC5F6864uLL) - 0x471094C081D04BCELL) >> 3) & 0xC26219A00000 ^ 0xC06209800000)) & 0x844430400000) - 0x470F94C081D04BCELL) ^ (v74 - ((2 * v74) & 0x1ED67EFC5F6864) - 0x471094C081D04BCELL)) >> 16);
  uint64_t v75 = *(void *)(v8
                  + 8
                  * (*(unsigned __int8 *)(v20
                                        + (((unsigned __int16)((v30 ^ 0xD16)
                                                                              - ((2 * (v30 ^ 0xD16)) & 0x5F74)
                                                                              + 12218) >> 8) ^ 0x2FLL)) ^ 0x23));
  *((void *)&v41 + 1) = v75 ^ 0x1F8;
  *(void *)&long long v41 = v75 ^ 0xCB308CF472657000;
  unint64_t v76 = (v41 >> 11) + 0x2EF6DB71819292DALL - ((2 * (v41 >> 11)) & 0x5DEDB6E3032525B4);
  uint64_t v77 = (*(void *)(v8
                   + 8
                   * (*(unsigned __int8 *)(v20
                                         + (((unsigned __int16)((v42 ^ 0xDF94)
                                                                               - ((2 * (v42 ^ 0xDF94)) & 0xA3FC)
                                                                               - 11778) >> 8) ^ 0xD1)) ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v76) = ((((((v77 - 0x4D7A980021986EE1 - ((2 * v77) & 0xACFFFBCCF223EuLL)) >> 3) & 0x6219A0D800 ^ 0x621980D000)
                  - 0x4D7A980021986EE1
                  - ((2
                    * (((v77 - 0x4D7A980021986EE1 - ((2 * v77) & 0xACFFFBCCF223EuLL)) >> 3) & 0x6219A0D800 ^ 0x621980D000)) & 0xC430412000)) ^ (v77 - 0x4D7A980021986EE1 - ((2 * v77) & 0xACFFFBCCF223ELL))) >> 8) ^ (((((v76 >> 3) & 0x1BE5C26200000000 ^ 0x1C4C26200000000) + 0x2EF6DB71819292DALL - ((2 * ((v76 >> 3) & 0x1BE5C26200000000 ^ 0x1C4C26200000000)) & 0x15C984C000000000)) ^ v76) >> 32);
  uint64_t v78 = (*(void *)(v8 + 8 * (v68 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v79 = *(void *)(v8
                  + 8
                  * (*(unsigned __int8 *)(v20
                                        + ((((v35 ^ 0x5EAD28D5)
                                                            - ((2 * (v35 ^ 0x5EAD28D5)) & 0xF277BBA0)
                                                            - 113517104) >> 16) ^ 0x3BLL)) ^ 0x23));
  *((void *)&v41 + 1) = v79 ^ 0x1F8;
  *(void *)&long long v41 = v79 ^ 0xCB308CF472657000;
  unint64_t v80 = (v41 >> 11) - ((2 * (v41 >> 11)) & 0xBAEFBCD02742BD46) - 0x22882197EC5EA15DLL;
  LODWORD(v76) = v76 ^ ((((((v78 - ((2 * v78) & 0x15D0F22CCED1AAuLL) + 0x5CEAE879166768D5) >> 3) & 0xC26219A00000 ^ 0x400200800000)
                        - ((2
                          * (((v78 - ((2 * v78) & 0x15D0F22CCED1AAuLL) + 0x5CEAE879166768D5) >> 3) & 0xC26219A00000 ^ 0x400200800000)) & 0x180C020400000)
                        + 0x5CEBE879166768D5) ^ (v78 - ((2 * v78) & 0x15D0F22CCED1AALL) + 0x5CEAE879166768D5)) >> 16);
  unint64_t v81 = (((v80 >> 3) & 0xE5C26219000000 ^ 0xA4C24000000000)
       - ((2 * ((v80 >> 3) & 0xE5C26219000000 ^ 0xA4C24000000000)) & 0xCB84C022000000)
       - 0x21882197EC5EA15DLL) ^ v80;
  uint64_t v82 = *(void *)(v8
                  + 8
                  * (*(unsigned __int8 *)(v20
                                        + (((unsigned __int16)((v35 ^ 0x28D5)
                                                                              - ((2 * (v35 ^ 0x28D5)) & 0xBBA0)
                                                                              - 8752) >> 8) ^ 0xDDLL)) ^ 0x23));
  *((void *)&v41 + 1) = v82 ^ 0x1F8;
  *(void *)&long long v41 = v82 ^ 0xCB308CF472657000;
  unint64_t v83 = (v41 >> 11) + 0x79D88100B41645DCLL - ((2 * (v41 >> 11)) & 0xF3B10201682C8BB8);
  LODWORD(v33) = v76 ^ (v81 >> 24);
  uint64_t v84 = (*(void *)(v8 + 8 * (*(unsigned __int8 *)(v20 + (v30 ^ 0x16)) ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v76) = ((((((v84 + 0x1B939C6619AAA107 - ((2 * v84) & 0x2738CC3355420EuLL)) >> 3) & 0x6219A0D800 ^ 0x1205000)
                  + 0x1B939C6619AAA107
                  - ((2
                    * (((v84 + 0x1B939C6619AAA107 - ((2 * v84) & 0x2738CC3355420EuLL)) >> 3) & 0x6219A0D800 ^ 0x1205000)) & 0xC433410000)) ^ (v84 + 0x1B939C6619AAA107 - ((2 * v84) & 0x2738CC3355420ELL))) >> 8) ^ (((((v83 >> 3) & 0x1BE5C26200000000 ^ 0xB21002000000000) + 0x79D88100B41645DCLL - ((2 * ((v83 >> 3) & 0x1BE5C26200000000 ^ 0xB21002000000000)) & 0x3381000000000000)) ^ v83) >> 32);
  uint64_t v85 = (*(void *)(v8 + 8 * (*(unsigned __int8 *)(v20 + (v42 ^ 0x94)) ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v86 = *(void *)(v8 + 8 * (*(unsigned __int8 *)(v20 + ((v66 >> 24) ^ 0xCE9DB3C014)) ^ 0x23));
  *((void *)&v41 + 1) = v86 ^ 0x1F8;
  *(void *)&long long v41 = v86 ^ 0xCB308CF472657000;
  unint64_t v87 = (v41 >> 11) - ((2 * (v41 >> 11)) & 0x509189B3C6AE2CE6) - 0x57B73B261CA8E98DLL;
  LODWORD(v76) = v76 ^ ((((((v85 - ((2 * v85) & 0x314C32D5908AE2uLL) + 0x29D8A6196AC84571) >> 3) & 0xC26219A00000 ^ 0x4209000000)
                        - ((2
                          * (((v85 - ((2 * v85) & 0x314C32D5908AE2uLL) + 0x29D8A6196AC84571) >> 3) & 0xC26219A00000 ^ 0x4209000000)) & 0x1040011000000)
                        + 0x29D9A6196AC84571) ^ (v85 - ((2 * v85) & 0x314C32D5908AE2) + 0x29D8A6196AC84571)) >> 16);
  unint64_t v88 = (((v87 >> 3) & 0xE5C26219000000 ^ 0x1000218000000) - ((v87 >> 2) & 0x81808002000000) - 0x56B73B261CA8E98DLL) ^ v87;
  uint64_t v89 = *(void *)(v8 + 8 * (*(unsigned __int8 *)(v20 + (BYTE2(v66) ^ 0x79)) ^ 0x23));
  LODWORD(v37) = v76 ^ (v88 >> 24);
  *((void *)&v41 + 1) = v89 ^ 0x1F8;
  *(void *)&long long v41 = v89 ^ 0xCB308CF472657000;
  unint64_t v90 = (v41 >> 11) - 0x1036929B0A288483 - ((2 * (v41 >> 11)) & 0xDF92DAC9EBAEF6FALL);
  uint64_t v91 = *(void *)(v8 + 8 * (*(unsigned __int8 *)(v20 + (v35 ^ 0xD5)) ^ 0x23));
  *((void *)&v41 + 1) = v91 ^ 0x1F8;
  *(void *)&long long v41 = v91 ^ 0xCB308CF472657000;
  unint64_t v92 = (v41 >> 11) + 0xE4C43BD69422943 - ((2 * (v41 >> 11)) & 0x1C98877AD2845286);
  LODWORD(v90) = (((((v92 >> 3) & 0x1BE5C26200000000 ^ 0x1C1806200000000)
                  + 0xE4C43BD69422943
                  - ((2 * ((v92 >> 3) & 0x1BE5C26200000000 ^ 0x1C1806200000000)) & 0x1488844000000000)) ^ v92) >> 32) ^ (((((v90 >> 3) & 0xE5C26219000000 ^ 0xE1002018000000) - 0x1036929B0A288483 - ((2 * ((v90 >> 3) & 0xE5C26219000000 ^ 0xE1002018000000)) & 0x18280C022000000)) ^ v90) >> 24);
  uint64_t v93 = (*(void *)(v8
                   + 8
                   * (*(unsigned __int8 *)(v20
                                         + ((((v30 ^ 0xD3920D16)
                                            - (unint64_t)((2 * (v30 ^ 0xD3920D16)) & 0x1B25F74)
                                            + 0x1767F8D200D92FBALL) >> 24) ^ 0x1767F8D200)) ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v90) = v90 ^ ((((((v93 - ((2 * v93) & 0x31B102B390FE2EuLL) - 0x1327277EA63780E9) >> 3) & 0x6219A0D800 ^ 0x9200800)
                        - ((2
                          * (((v93 - ((2 * v93) & 0x31B102B390FE2EuLL) - 0x1327277EA63780E9) >> 3) & 0x19A0D800 ^ 0x9200800)) & 0x3300B000)
                        - 0x1327267EA63780E9) ^ (v93 - ((2 * v93) & 0x31B102B390FE2ELL) - 0x1327277EA63780E9)) >> 8);
  uint64_t v94 = (*(void *)(v8
                   + 8
                   * (*(unsigned __int8 *)(v20
                                         + ((((v42 ^ 0x8639DF94)
                                            - ((2 * (v42 ^ 0x8639DF94)) & 0x157DFA3FCuLL)
                                            - 0x69E453C654102E02) >> 24) ^ 0x961BAC39ABLL)) ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v30) = v90 ^ ((((((v94 - ((2 * v94) & 0x3D7BBE1D8CECCuLL) + 0x4B61EBDDF0EC6766) >> 3) & 0xC26219A00000 ^ 0x6218000000)
                        - ((2
                          * (((v94 - ((2 * v94) & 0x3D7BBE1D8CECCuLL) + 0x4B61EBDDF0EC6766) >> 3) & 0xC26219A00000 ^ 0x6218000000)) & 0x1848021400000)
                        + 0x4B62EBDDF0EC6766) ^ (v94 - ((2 * v94) & 0x3D7BBE1D8CECCLL) + 0x4B61EBDDF0EC6766)) >> 16);
  unint64_t v95 = (v37 ^ 0xCB38B344)
      - ((2 * (v37 ^ 0xCB38B344)) & 0x1AAC386EELL)
      + 0x76C2AC9FD561C377;
  uint64_t v96 = *(void *)(v8 + 8 * (*(unsigned __int8 *)(v20 + (v24 ^ 0xE3)) ^ 0x23));
  *((void *)&v41 + 1) = v96 ^ 0x1F8;
  *(void *)&long long v41 = v96 ^ 0xCB308CF472657000;
  unint64_t v97 = (v41 >> 11) - 0x3B3D7ECB488251D1 - ((2 * (v41 >> 11)) & 0x898502696EFB5C5ELL);
  uint64_t v98 = *(void *)(v8
                  + 8
                  * (*(unsigned __int8 *)(v20
                                        + ((((v30 ^ 0x7EA1B9C8)
                                           - (unint64_t)((2 * (v30 ^ 0x7EA1B9C8)) & 0x12057DBA)
                                           - 0x84D1ABCF6FD4123) >> 24) ^ 0xF7B2E54309)) ^ 0x23));
  *((void *)&v41 + 1) = v98 ^ 0x1F8;
  *(void *)&long long v41 = v98 ^ 0xCB308CF472657000;
  unint64_t v99 = (v41 >> 11) + 0x4A781FB9AD4012E3 - ((2 * (v41 >> 11)) & 0x94F03F735A8025C6);
  unint64_t v100 = *(void *)(v8
                   + 8
                   * (*(unsigned __int8 *)(v20
                                         + (((unsigned __int16)((v37 ^ 0xB344)
                                                                               - ((2 * (v37 ^ 0xB344)) & 0x86EE)
                                                                               - 15497) >> 8) ^ 0xC3)) ^ 0x23));
  LODWORD(v97) = (((((v99 >> 3) & 0x1BE5C26200000000 ^ 0x945026200000000)
                  + 0x4A781FB9AD4012E3
                  - ((2 * ((v99 >> 3) & 0x1BE5C26200000000 ^ 0x945026200000000)) & 0x14C0044000000000)) ^ v99) >> 32) ^ (((((v97 >> 3) & 0xE5C26219000000 ^ 0x80402210000000) - 0x3B3D7ECB488251D1 - ((2 * ((v97 >> 3) & 0xE5C26219000000 ^ 0x80402210000000)) & 0x181004022000000)) ^ v97) >> 24);
  unint64_t v101 = ((v100 >> 11) ^ 0x1966119E8E4CAELL)
       - ((2 * ((v100 >> 11) ^ 0x1966119E8E4CAELL)) & 0x26EC34BEAFD5B6)
       + 0x79D3761A5F57EADBLL;
  uint64_t v102 = (*(void *)(v8 + 8 * (*(unsigned __int8 *)(v20 + (v33 ^ 0x22)) ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v19) = v97 ^ (((((v101 >> 3) & 0x6219A0D800 ^ 0x4209A0D800)
                        - ((2 * ((v101 >> 3) & 0x6219A0D800 ^ 0x4209A0D800)) & 0x432019000)
                        + 0x79D3771A5F57EADBLL) ^ v101) >> 8) ^ ((((((v102
                                                                    - ((2 * v102) & 0x34B7A4E5C655BCuLL)
                                                                    + 0x15DA5BD272E32ADELL) >> 3) & 0xC26219A00000 ^ 0x426208000000)
                                                                 - ((2
                                                                   * (((v102
                                                                      - ((2 * v102) & 0x34B7A4E5C655BCuLL)
                                                                      + 0x15DA5BD272E32ADELL) >> 3) & 0xC26219A00000 ^ 0x426208000000)) & 0x848421400000)
                                                                 + 0x15DB5BD272E32ADELL) ^ (v102
                                                                                          - ((2 * v102) & 0x34B7A4E5C655BCLL)
                                                                                          + 0x15DA5BD272E32ADELL)) >> 16);
  uint64_t v103 = *(void *)(v8
                   + 8
                   * (*(unsigned __int8 *)(v20
                                         + ((((v33 ^ 0x820D3322)
                                            - ((2 * (v33 ^ 0x820D3322)) & 0x1ACA27880uLL)
                                            + 0xE56C64CD6513C40) >> 24) ^ 0xE56C64CD6)) ^ 0x23));
  *((void *)&v41 + 1) = v103 ^ 0x1F8;
  *(void *)&long long v41 = v103 ^ 0xCB308CF472657000;
  unint64_t v104 = (v41 >> 11) - 0x4BB82B39C5911454 + (~(2 * (v41 >> 11)) | 0x977056738B2228A7) + 1;
  uint64_t v105 = (*(void *)(v8
                    + 8
                    * (*(unsigned __int8 *)(v20
                                          + ((((v24 ^ 0xBE5D6DE3)
                                             - (unint64_t)((2 * (v24 ^ 0xBE5D6DE3)) & 0x4EBB59C0)
                                             - 0x4996D1CBD8A25320) >> 24) ^ 0xB6692E3427)) ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v104) = ((((((v105 + 0x65603479EFFD5E59 - ((2 * v105) & 0x68F3DFFABCB2uLL)) >> 3) & 0x6219A0D800 ^ 0x219A08800)
                   + 0x65603479EFFD5E59
                   - ((2
                     * (((v105 + 0x65603479EFFD5E59 - ((2 * v105) & 0x68F3DFFABCB2uLL)) >> 3) & 0x6219A0D800 ^ 0x219A08800)) & 0xC01340B000)) ^ (v105 + 0x65603479EFFD5E59 - ((2 * v105) & 0x68F3DFFABCB2))) >> 8) ^ (((((v104 >> 3) & 0x1BE5C26200000000 ^ 0x1280C20000000000) - 0x4BB82B39C5911454 - ((2 * ((v104 >> 3) & 0x1BE5C26200000000 ^ 0x1280C20000000000)) & 0x208B808400000000)) ^ v104) >> 32);
  uint64_t v106 = (*(void *)(v8
                    + 8
                    * (*(unsigned __int8 *)(v20
                                          + ((((v30 ^ 0x7EA1B9C8)
                                                              - ((2 * (v30 ^ 0x7EA1B9C8)) & 0x12057DBA)
                                                              + 151174877) >> 16) ^ 2)) ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v29) = v104 ^ ((((((v106 - ((2 * v106) & 0x128F375809A922uLL) - 0x6A76B86453FB2B6FLL) >> 3) & 0xC26219A00000 ^ 0x6211800000)
                         - ((2
                           * (((v106 - ((2 * v106) & 0x128F375809A922uLL) - 0x6A76B86453FB2B6FLL) >> 3) & 0xC26219A00000 ^ 0x6211800000)) & 0x840410000000)
                         - 0x6A75B86453FB2B6FLL) ^ (v106 - ((2 * v106) & 0x128F375809A922) - 0x6A76B86453FB2B6FLL)) >> 16);
  uint64_t v107 = *(void *)(v8 + 8 * (*(unsigned __int8 *)(v20 + (v37 ^ 0x44)) ^ 0x23));
  *((void *)&v41 + 1) = v107 ^ 0x1F8;
  *(void *)&long long v41 = v107 ^ 0xCB308CF472657000;
  unint64_t v108 = (v41 >> 11) - ((2 * (v41 >> 11)) & 0xA40D9A83A3C457A6) + 0x5206CD41D1E22BD3;
  unint64_t v109 = (((v108 >> 3) & 0xE5C26219000000 ^ 0x40C02018000000)
        - ((2 * ((v108 >> 3) & 0xE5C26219000000 ^ 0x40C02018000000)) & 0x9808022000000)
        + 0x5306CD41D1E22BD3) ^ v108;
  uint64_t v110 = (*(void *)(v8 + 8 * (*(unsigned __int8 *)(v20 + ((v95 >> 24) ^ 0x76C2AC9FD5)) ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v111 = (*(void *)(v8
                    + 8
                    * (*(unsigned __int8 *)(v20
                                          + ((((v33 ^ 0x820D3322)
                                                              - ((2 * (v33 ^ 0x820D3322)) & 0xACA27880)
                                                              - 699319232) >> 16) ^ 0x51)) ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  unint64_t v112 = ((((((v111 + 0x28231E372E2B9D79 - ((2 * v111) & 0x63C6E5C573AF2uLL)) >> 3) & 0xC26219A00000 ^ 0x424201800000)
          + 0x28231E372E2B9D79
          - ((2
            * (((v111 + 0x28231E372E2B9D79 - ((2 * v111) & 0x63C6E5C573AF2uLL)) >> 3) & 0xC26219A00000 ^ 0x424201800000)) & 0x44410400000)) ^ (v111 + 0x28231E372E2B9D79 - ((2 * v111) & 0x63C6E5C573AF2))) >> 16) ^ ((((((v110 - 0x3DF76840D5014E43 - ((2 * v110) & 0x112F7E55FD637AuLL)) >> 3) & 0x6219A0D800 ^ 0x620100D000) - 0x3DF76840D5014E43 - ((2 * (((v110 - 0x3DF76840D5014E43 - ((2 * v110) & 0x112F7E55FD637AuLL)) >> 3) & 0x6219A0D800 ^ 0x620100D000)) & 0x4411412000)) ^ (v110 - 0x3DF76840D5014E43 - ((2 * v110) & 0x112F7E55FD637ALL))) >> 8);
  uint64_t v113 = *(void *)(v8
                   + 8
                   * (*(unsigned __int8 *)(v20
                                         + ((((v24 ^ 0xBE5D6DE3)
                                                             - ((2 * (v24 ^ 0xBE5D6DE3)) & 0x4EBB59C0)
                                                             + 660450528) >> 16) ^ 0x5DLL)) ^ 0x23));
  *((void *)&v41 + 1) = v113 ^ 0x1F8;
  *(void *)&long long v41 = v113 ^ 0xCB308CF472657000;
  unint64_t v114 = (v41 >> 11) - ((2 * (v41 >> 11)) & 0x2FAD949F825226F0) + 0x17D6CA4FC1291378;
  uint64_t v115 = *(void *)(v8
                   + 8
                   * (*(unsigned __int8 *)(v20
                                         + (((unsigned __int16)((v30 ^ 0xB9C8)
                                                                               - ((2 * (v30 ^ 0xB9C8)) & 0x7DBA)
                                                                               - 16675) >> 8) ^ 0xBELL)) ^ 0x23));
  unint64_t v116 = v112 ^ (((((v114 >> 3) & 0xE5C26219000000 ^ 0xE0C04018000000)
                 - ((2 * ((v114 >> 3) & 0xE5C26219000000 ^ 0xE0C04018000000)) & 0x189848402000000)
                 + 0x18D6CA4FC1291378) ^ v114) >> 24);
  *((void *)&v41 + 1) = v115 ^ 0x1F8;
  *(void *)&long long v41 = v115 ^ 0xCB308CF472657000;
  unint64_t v117 = (v41 >> 11) - 0x3314427467ED8464 - ((2 * (v41 >> 11)) & 0x99D77B173024F738);
  uint64_t v118 = *(void *)(v8 + 8 * (*(unsigned __int8 *)(v20 + (v30 ^ 0xC8)) ^ 0x23));
  unint64_t v119 = v116 ^ (((((v117 >> 3) & 0x1BE5C26200000000 ^ 0x1985422000000000)
                 - 0x3314427467ED8464
                 + (~(2 * ((v117 >> 3) & 0x1BE5C26200000000 ^ 0x1985422000000000)) | 0xEE3CFFFBFFFFFFFFLL)
                 + 1) ^ v117) >> 32);
  *((void *)&v41 + 1) = v118 ^ 0x1F8;
  *(void *)&long long v41 = v118 ^ 0xCB308CF472657000;
  unint64_t v120 = (v41 >> 11) - 0x7A27E92BBE620B08 - ((2 * (v41 >> 11)) & 0xBB02DA8833BE9F0);
  uint64_t v121 = (*(void *)(v8 + 8 * (*(unsigned __int8 *)(v20 + (BYTE2(v95) ^ 0x61)) ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v122 = (*(void *)(v8
                    + 8
                    * (*(unsigned __int8 *)(v20
                                          + (((unsigned __int16)((v33 ^ 0x3322)
                                                                                - ((2 * (v33 ^ 0x3322)) & 0x7880)
                                                                                + 15424) >> 8) ^ 0x3CLL)) ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v120) = ((((((v121 + 0x581A62416FCBADE2 - ((2 * v121) & 0x34C482DF975BC4uLL)) >> 3) & 0x6219A0D800 ^ 0x4009A05000)
                   + 0x581A62416FCBADE2
                   - ((2
                     * (((v121 + 0x581A62416FCBADE2 - ((2 * v121) & 0x34C482DF975BC4uLL)) >> 3) & 0x6219A0D800 ^ 0x4009A05000)) & 0x8013011000)) ^ (v121 + 0x581A62416FCBADE2 - ((2 * v121) & 0x34C482DF975BC4))) >> 8) ^ (((((v120 >> 3) & 0x1BE5C26200000000 ^ 0x10A1024200000000) - 0x7A27E92BBE620B08 - ((2 * ((v120 >> 3) & 0x1BE5C26200000000 ^ 0x10A1024200000000)) & 0x380048000000000)) ^ v120) >> 32) ^ ((((((v122 - ((2 * v122) & 0x2D7F0CB4766EF0uLL) + 0x79D6BF865A3B3778) >> 3) & 0xC26219A00000 ^ 0xC26009000000) - ((2 * (((v122 - ((2 * v122) & 0x2D7F0CB4766EF0uLL) + 0x79D6BF865A3B3778) >> 3) & 0xC26219A00000 ^ 0xC26009000000)) & 0x1040430400000) + 0x79D7BF865A3B3778) ^ (v122 - ((2 * v122) & 0x2D7F0CB4766EF0) + 0x79D6BF865A3B3778)) >> 16);
  uint64_t v123 = *(void *)(v8
                   + 8
                   * (*(unsigned __int8 *)(v20
                                         + (((unsigned __int16)((v24 ^ 0x6DE3)
                                                                               - ((2 * (v24 ^ 0x6DE3)) & 0x59C0)
                                                                               - 21280) >> 8) ^ 0xACLL)) ^ 0x23));
  *((void *)&v41 + 1) = v123 ^ 0x1F8;
  *(void *)&long long v41 = v123 ^ 0xCB308CF472657000;
  unint64_t v124 = (v41 >> 11) - ((2 * (v41 >> 11)) & 0x60DFE708DABD6AFELL) - 0x4F900C7B92A14A81;
  LODWORD(v124) = v120 ^ (((((v124 >> 3) & 0xE5C26219000000 ^ 0x5C26009000000)
                          - ((2 * ((v124 >> 3) & 0xE5C26219000000 ^ 0x5C26009000000)) & 0xCB840012000000)
                          - 0x4E900C7B92A14A81) ^ v124) >> 24);
  uint64_t v125 = *(unsigned __int8 *)(v11
                            + ((((v124 ^ 0xF7CA5FA9)
                                                - ((2 * (v124 ^ 0xF7CA5FA9)) & 0xDBB1E48C)
                                                + 1842934342) >> 16) ^ 0xD8));
  uint64_t v126 = *(unsigned __int8 *)(v11 + (v19 ^ 0x6BLL));
  uint64_t v127 = *(unsigned __int8 *)(v11 + (v119 ^ 0x85));
  uint64_t v128 = v29 ^ (v109 >> 24) ^ 0x5F928AF6;
  unint64_t v129 = v128 - ((2 * v128) & 0x9E7BFB96) - 0x3A901033B0C20235;
  uint64_t v130 = *(unsigned __int8 *)(v11 + ((v129 >> 24) ^ 0xC56FEFCC4FLL));
  unint64_t v131 = (v19 ^ 0xBC7AAA6BLL)
       - ((2 * (v19 ^ 0xBC7AAA6BLL)) & 0x14253A298)
       + 0x4572D109A129D14CLL;
  unint64_t v132 = (v119 ^ 0x56DDEB85)
       - 2 * ((v119 ^ 0x56DDEB85) & 0x60D3F77C ^ v119 & 0x28)
       - 0x7D237F079F2C08ACLL;
  uint64_t v133 = *(unsigned __int8 *)(v11 + ((v29 ^ BYTE3(v109)) ^ 0xF6));
  uint64_t v134 = *(unsigned __int8 *)(v11
                            + (((unsigned __int16)((v124 ^ 0x5FA9)
                                                                  - ((2 * (v124 ^ 0x5FA9)) & 0xE48C)
                                                                  - 3514) >> 8) ^ 0xF2));
  uint64_t v135 = *(unsigned __int8 *)(v11 + ((v132 >> 24) ^ 0x82DC80F860));
  uint64_t v136 = *(unsigned __int8 *)(v11 + (BYTE2(v132) ^ 0xD3));
  uint64_t v137 = *(unsigned __int8 *)(v11 + ((v131 >> 24) ^ 0x4572D109A1));
  uint64_t v138 = *(unsigned __int8 *)(v11 + (BYTE2(v129) ^ 0x3DLL));
  LODWORD(STACK[0x5B8]) = v12;
  uint64_t v139 = *(unsigned __int8 *)(v11 + (v124 ^ 0xA9));
  unint64_t v140 = (((v124 ^ 0xF7CA5FA9)
         - (unint64_t)((2 * (v124 ^ 0xF7CA5FA9)) & 0xDBB1E48C)
         - 0x4C47BB3492270DBALL) >> 24) ^ 0xB3B844CB6DLL;
  uint64_t v141 = *(unsigned __int8 *)(v11 + (BYTE2(v131) ^ 0x29));
  uint64_t v142 = *(unsigned __int8 *)(v11 + (BYTE1(v132) ^ 0xF7));
  uint64_t v143 = *(unsigned __int8 *)(v11 + v140);
  uint64_t v144 = *(unsigned __int8 *)(v11 + (BYTE1(v131) ^ 0xD1));
  unint64_t v145 = ((*(void *)(v8 + 8 * (v126 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL)
       + 0x194AB515DFD4CCE3
       - ((2 * ((*(void *)(v8 + 8 * (v126 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL)) & 0x156A2BBFA999C6);
  uint64_t v146 = (*(void *)(v8 + 8 * (v125 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v147 = *(void *)(v8 + 8 * (v127 ^ 0x23));
  *((void *)&v41 + 1) = v147 ^ 0x1F8;
  *(void *)&long long v41 = v147 ^ 0xCB308CF472657000;
  unint64_t v148 = (v41 >> 11) - ((2 * (v41 >> 11)) & 0x143118E30FDB58CCLL) - 0x75E7738E7812539ALL;
  LODWORD(v145) = ((((((v146 - 0x6DB60AC6EA9DDB68 - ((2 * v146) & 0x13EA722AC44930uLL)) >> 3) & 0xC26219A00000 ^ 0x22200A00000)
                   - 0x6DB60AC6EA9DDB68
                   - ((2
                     * (((v146 - 0x6DB60AC6EA9DDB68 - ((2 * v146) & 0x13EA722AC44930uLL)) >> 3) & 0xC26219A00000 ^ 0x22200A00000)) & 0x1804022400000)) ^ (v146 - 0x6DB60AC6EA9DDB68 - ((2 * v146) & 0x13EA722AC44930))) >> 16) ^ (((((v145 >> 3) & 0x6219A0D800 ^ 0x2219A09800) + 0x194AB515DFD4CCE3 - ((2 * ((v145 >> 3) & 0x19A0D800 ^ 0x19A09800)) & 0x33019000)) ^ v145) >> 8);
  uint64_t v149 = *(void *)(v8 + 8 * (v133 ^ 0x23));
  *((void *)&v41 + 1) = v149 ^ 0x1F8;
  *(void *)&long long v41 = v149 ^ 0xCB308CF472657000;
  unint64_t v150 = (((v148 >> 3) & 0xE5C26219000000 ^ 0x41000210000000)
        - ((v148 >> 2) & 0x100C002000000)
        - 0x74E7738E7812539ALL) ^ v148;
  unint64_t v151 = (v41 >> 11) + 0x376313520336B3EFLL - ((2 * (v41 >> 11)) & 0x6EC626A4066D67DELL);
  LODWORD(v145) = v145 ^ (v150 >> 24);
  uint64_t v152 = (((v151 >> 3) & 0x1BE5C26200000000 ^ 0x2E4426200000000)
        + 0x376313520336B3EFLL
        - ((2 * ((v151 >> 3) & 0x1BE5C26200000000 ^ 0x2E4426200000000)) & 0x26C2048400000000)) ^ v151;
  uint64_t v153 = (*(void *)(v8 + 8 * (v130 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v133) = v145 ^ HIDWORD(v152);
  unint64_t v154 = ((((v153 - 0x7257C13C872243CFLL - ((2 * v153) & 0x107D86F1BB7862uLL)) >> 3) & 0x6219A0D800 ^ 0x4009009000)
        - 0x7257C13C872243CFLL
        - ((2
          * (((v153 - 0x7257C13C872243CFLL - ((2 * v153) & 0x107D86F1BB7862uLL)) >> 3) & 0x6219A0D800 ^ 0x4009009000)) & 0x8431013000)) ^ (v153 - 0x7257C13C872243CFLL - ((2 * v153) & 0x107D86F1BB7862));
  uint64_t v155 = (*(void *)(v8 + 8 * (v137 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v156 = *(void *)(v8 + 8 * (v134 ^ 0x23));
  *((void *)&v41 + 1) = v156 ^ 0x1F8;
  *(void *)&long long v41 = v156 ^ 0xCB308CF472657000;
  unint64_t v157 = (v41 >> 11) - ((2 * (v41 >> 11)) & 0xCEDF71A90D11F770) - 0x1890472B79770448;
  LODWORD(v154) = ((((((v155 - 0x3D4333EDA4F77293 - ((2 * v155) & 0x399824B6111ADAuLL)) >> 3) & 0xC26219A00000 ^ 0x800209200000)
                   - 0x3D4333EDA4F77293
                   - ((2
                     * (((v155 - 0x3D4333EDA4F77293 - ((2 * v155) & 0x399824B6111ADAuLL)) >> 3) & 0xC26219A00000 ^ 0x800209200000)) & 0x1800432000000)) ^ (v155 - 0x3D4333EDA4F77293 - ((2 * v155) & 0x399824B6111ADALL))) >> 16) ^ (v154 >> 8);
  unint64_t v158 = (((v157 >> 3) & 0xE5C26219000000 ^ 0xE5C20210000000)
        - ((2 * ((v157 >> 3) & 0xE5C26219000000 ^ 0xE5C20210000000)) & 0xCB008000000000)
        - 0x1790472B79770448) ^ v157;
  uint64_t v159 = *(void *)(v8 + 8 * (v135 ^ 0x23));
  *((void *)&v41 + 1) = v159 ^ 0x1F8;
  *(void *)&long long v41 = v159 ^ 0xCB308CF472657000;
  LODWORD(v154) = v154 ^ (v158 >> 24);
  unint64_t v160 = (v41 >> 11) - 0x4A7B533B956D3AF3 - ((2 * (v41 >> 11)) & 0x6B095988D5258A1ALL);
  LODWORD(v135) = v154 ^ (((((v160 >> 3) & 0x1BE5C26200000000 ^ 0x12A0800000000000)
                          - 0x4A7B533B956D3AF3
                          - ((2 * ((v160 >> 3) & 0x1BE5C26200000000 ^ 0x12A0800000000000)) & 0x2309008000000000)) ^ v160) >> 32);
  uint64_t v161 = *(void *)(v8 + 8 * (v136 ^ 0x23));
  *((void *)&v41 + 1) = v161 ^ 0x1F8;
  *(void *)&long long v41 = v161 ^ 0xCB308CF472657000;
  unint64_t v162 = (v41 >> 11) + 0x2CE18AEB767D0F34 - ((2 * (v41 >> 11)) & 0x59C315D6ECFA1E68);
  uint64_t v163 = (*(void *)(v8 + 8 * (v138 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v162) = ((((((v163 - 0x17E7099C8CE77A8ALL - ((2 * v163) & 0x31ECC6E6310AECuLL)) >> 3) & 0x6219A0D800 ^ 0x4008201000)
                   - 0x17E7099C8CE77A8ALL
                   - ((2
                     * (((v163 - 0x17E7099C8CE77A8ALL - ((2 * v163) & 0x31ECC6E6310AECuLL)) >> 3) & 0x6219A0D800 ^ 0x4008201000)) & 0xC422010000)) ^ (v163 - 0x17E7099C8CE77A8ALL - ((2 * v163) & 0x31ECC6E6310AECLL))) >> 8) ^ (((((v162 >> 3) & 0x1BE5C26200000000 ^ 0x184004000000000) + 0x2CE18AEB767D0F34 - ((2 * ((v162 >> 3) & 0x1BE5C26200000000 ^ 0x184004000000000)) & 0x11C304C400000000)) ^ v162) >> 32);
  uint64_t v164 = (*(void *)(v8 + 8 * (v141 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v162) = v162 ^ ((((((v164 - ((2 * v164) & 0x133E51AEF890AEuLL) - 0x4F7660D72883B7A9) >> 3) & 0xC26219A00000 ^ 0x26018A00000)
                          - ((2
                            * (((v164 - ((2 * v164) & 0x133E51AEF890AEuLL) - 0x4F7660D72883B7A9) >> 3) & 0xC26219A00000 ^ 0x26018A00000)) & 0x1044022400000)
                          - 0x4F7560D72883B7A9) ^ (v164 - ((2 * v164) & 0x133E51AEF890AELL) - 0x4F7660D72883B7A9)) >> 16);
  uint64_t v165 = *(void *)(v8 + 8 * (v139 ^ 0x23));
  *((void *)&v41 + 1) = v165 ^ 0x1F8;
  *(void *)&long long v41 = v165 ^ 0xCB308CF472657000;
  unint64_t v166 = (v41 >> 11) - ((2 * (v41 >> 11)) & 0xDD66FCDD0F0CBDAALL) + 0x6EB37E6E87865ED5;
  uint64_t v167 = (*(void *)(v8 + 8 * (v143 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v143) = v162 ^ (((((v166 >> 3) & 0xE5C26219000000 ^ 0xC4424010000000)
                          - ((2 * ((v166 >> 3) & 0xE5C26219000000 ^ 0xC4424010000000)) & 0x14284C402000000)
                          + 0x6FB37E6E87865ED5) ^ v166) >> 24);
  uint64_t v168 = *(void *)(v8 + 8 * (v142 ^ 0x23));
  *((void *)&v41 + 1) = v168 ^ 0x1F8;
  *(void *)&long long v41 = v168 ^ 0xCB308CF472657000;
  unint64_t v169 = (v41 >> 11) - ((2 * (v41 >> 11)) & 0xB7E8B508DE5B33E8) - 0x240BA57B90D2660CLL;
  uint64_t v170 = *(void *)(v8 + 8 * (*(unsigned __int8 *)(v11 + (BYTE1(v129) ^ 0xFDLL)) ^ 0x23));
  unint64_t v171 = (((v169 ^ 0xDB25B66B5DD4A53ALL) + (v169 & 0xF8D1ECEF32F93CCELL ^ 0xDFFE5B94EF2FDBF5) + 1) >> 27) ^ (v169 >> 24) ^ ((((((v167 + 0x76C66EFA5CB55739 - ((2 * v167) & 0xCDDF4B96AAE72uLL)) >> 3) & 0xC26219A00000 ^ 0xC04209800000) + 0x76C66EFA5CB55739 - ((2 * (((v167 + 0x76C66EFA5CB55739 - ((2 * v167) & 0xCDDF4B96AAE72uLL)) >> 3) & 0xC26219A00000 ^ 0xC04209800000)) & 0x84C431400000)) ^ (v167 + 0x76C66EFA5CB55739 - ((2 * v167) & 0xCDDF4B96AAE72))) >> 16);
  *((void *)&v41 + 1) = v170 ^ 0x1F8;
  *(void *)&long long v41 = v170 ^ 0xCB308CF472657000;
  unint64_t v172 = (v41 >> 11) - 0xA4396A2E2806108 - ((2 * (v41 >> 11)) & 0xEB78D2BA3AFF3DF0);
  unint64_t v173 = v171 ^ (((((v172 >> 3) & 0x1BE5C26200000000 ^ 0x1AA5802200000000)
                 - 0xA4396A2E2806108
                 - ((2 * ((v172 >> 3) & 0x1BE5C26200000000 ^ 0x1AA5802200000000)) & 0x2348808000000000)) ^ v172) >> 32);
  uint64_t v174 = (*(void *)(v8 + 8 * (v144 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  unint64_t v175 = v173 ^ ((((((v174 - ((2 * v174) & 0x3AEA3E5C4327DEuLL) + 0x785D751F2E2193EFLL) >> 3) & 0x6219A0D800 ^ 0x2201801000)
                 - ((2
                   * (((v174 - ((2 * v174) & 0x3AEA3E5C4327DEuLL) + 0x785D751F2E2193EFLL) >> 3) & 0x6219A0D800 ^ 0x2201801000)) & 0x410412000)
                 + 0x785D761F2E2193EFLL) ^ (v174 - ((2 * v174) & 0x3AEA3E5C4327DELL) + 0x785D751F2E2193EFLL)) >> 8);
  uint64_t v176 = *(unsigned __int8 *)(v11
                            + (((unint64_t)((v133 ^ 0xF92B26B5)
                                                                  - 2
                                                                  * ((v133 ^ 0xF92B26B5) & 0x68E7592F ^ v133 & 8)
                                                                  + 1759992103) >> 16) ^ 0xE7));
  uint64_t v177 = *(unsigned __int8 *)(v11 + (v175 ^ 0xC6));
  unint64_t v178 = (v143 ^ 0xD7CFBE3CLL)
       - ((2 * (v143 ^ 0xD7CFBE3CLL)) & 0x1C8F44AE0)
       + 0x60FC874BE47A2570;
  uint64_t v179 = *(unsigned __int8 *)(v11
                            + (((unsigned __int16)((v143 ^ 0xBE3C)
                                                                  - ((2 * (v143 ^ 0xBE3C)) & 0x4AE0)
                                                                  + 9584) >> 8) ^ 0x25));
  uint64_t v180 = *(unsigned __int8 *)(v11
                            + (((unsigned __int16)((v133 ^ 0x26B5)
                                                                  - 2 * ((v133 ^ 0x26B5) & 0x592F ^ v133 & 8)
                                                                  + 22823) >> 8) ^ 0x59));
  unint64_t v181 = (v175 ^ 0x52764DC6)
       - 2 * ((v175 ^ 0x52764DC6) & 0x3B5C0D3F ^ v175 & 0x11)
       + 0x4BB6B6CA3B5C0D2ELL;
  uint64_t v182 = *(unsigned __int8 *)(v11 + (v143 ^ 0x3CLL));
  uint64_t v183 = *(unsigned __int8 *)(v11 + (v133 ^ 0xB5));
  uint64_t v184 = *(unsigned __int8 *)(v11 + ((v181 >> 24) ^ 0x4BB6B6CA3BLL));
  uint64_t v185 = *(unsigned __int8 *)(v11
                            + (((unsigned __int16)((v135 ^ 0xDC93)
                                                                  - ((2 * (v135 ^ 0xDC93)) & 0x1400)
                                                                  + 2560) >> 8) ^ 0xALL));
  uint64_t v186 = *(unsigned __int8 *)(v11 + (BYTE2(v181) ^ 0x5CLL));
  uint64_t v187 = *(unsigned __int8 *)(v11 + ((v178 >> 24) ^ 0x60FC874BE4));
  uint64_t v188 = *(unsigned __int8 *)(v11 + (BYTE2(v178) ^ 0x7ALL));
  uint64_t v189 = *(unsigned __int8 *)(v11 + (BYTE1(v181) ^ 0xDLL));
  unint64_t v190 = (((v133 ^ 0xF92B26B5)
         - 2 * ((v133 ^ 0xF92B26B5) & 0x68E7592F ^ (unint64_t)(v133 & 8))
         - 0x79658E8B9718A6D9) >> 24) ^ 0x869A717468;
  uint64_t v191 = *(unsigned __int8 *)(v11 + (v135 ^ 0x93));
  uint64_t v192 = v176 ^ 0x23;
  uint64_t v193 = *(unsigned __int8 *)(v11 + v190);
  uint64_t v194 = *(void *)(v8 + 8 * v192);
  *((void *)&v41 + 1) = v194 ^ 0x1F8;
  *(void *)&long long v41 = v194 ^ 0xCB308CF472657000;
  unint64_t v195 = (v41 >> 11) - 0x1804D14B9B54E572 - ((2 * (v41 >> 11)) & 0xCFF65D68C956351CLL);
  uint64_t v196 = (*(void *)(v8 + 8 * (v177 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v195) = ((((((v196 - 0x133C76DC0244F98ELL - ((2 * v196) & 0x71247FB760CE4uLL)) >> 3) & 0x6219A0D800 ^ 0x2019A04000)
                   - 0x133C76DC0244F98ELL
                   - ((2
                     * (((v196 - 0x133C76DC0244F98ELL - ((2 * v196) & 0x71247FB760CE4uLL)) >> 3) & 0x6219A0D800 ^ 0x2019A04000)) & 0x4433400000)) ^ (v196 - 0x133C76DC0244F98ELL - ((2 * v196) & 0x71247FB760CE4))) >> 8) ^ (((((v195 >> 3) & 0x1BE5C26200000000 ^ 0x18E5404200000000) - 0x1804D14B9B54E572 - ((2 * ((v195 >> 3) & 0x1BE5C26200000000 ^ 0x18E5404200000000)) & 0x7C2044000000000)) ^ v195) >> 32);
  uint64_t v197 = (*(void *)(v8 + 8 * (v179 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v195) = v195 ^ ((((((v197 - ((2 * v197) & 0x3C07B7CD9DB11CuLL) - 0x2301FC2419312772) >> 3) & 0xC26219A00000 ^ 0xC06218800000)
                          - ((2
                            * (((v197 - ((2 * v197) & 0x3C07B7CD9DB11CuLL) - 0x2301FC2419312772) >> 3) & 0xC26219A00000 ^ 0xC06218800000)) & 0x48401000000)
                          - 0x2300FC2419312772) ^ (v197 - ((2 * v197) & 0x3C07B7CD9DB11CLL) - 0x2301FC2419312772)) >> 16);
  uint64_t v198 = *(void *)(v8
                   + 8
                   * (*(unsigned __int8 *)(v11
                                         + ((((v135 ^ 0x7859DC93)
                                            - ((2 * (v135 ^ 0x7859DC93)) & 0x172C81400uLL)
                                            - 0x116981B0469BF600) >> 24) ^ 0xEE967E4FB9)) ^ 0x23));
  *((void *)&v41 + 1) = v198 ^ 0x1F8;
  *(void *)&long long v41 = v198 ^ 0xCB308CF472657000;
  unint64_t v199 = (v41 >> 11) - ((2 * (v41 >> 11)) & 0xC296EBECEF5A50ECLL) - 0x1EB48A098852D78ALL;
  unint64_t v200 = *(void *)(v8
                   + 8
                   * (*(unsigned __int8 *)(v11
                                         + ((((v135 ^ 0x7859DC93)
                                                             - ((2 * (v135 ^ 0x7859DC93)) & 0x72C81400)
                                                             - 1184626176) >> 16) ^ 0x64)) ^ 0x23));
  LODWORD(v135) = v195 ^ (((((v199 >> 3) & 0xE5C26219000000 ^ 0x21422208000000)
                          - ((2 * ((v199 >> 3) & 0xE5C26219000000 ^ 0x21422208000000)) & 0x8280C422000000)
                          - 0x1DB48A098852D78ALL) ^ v199) >> 24);
  unint64_t v201 = ((v200 >> 11) ^ 0x1966119E8E4CAELL)
       + 0x1A9E0CB6DAC713D8
       - ((2 * ((v200 >> 11) ^ 0x1966119E8E4CAELL)) & 0x3C196DB58E27B0);
  uint64_t v202 = *(void *)(v8 + 8 * (v180 ^ 0x23));
  *((void *)&v41 + 1) = v202 ^ 0x1F8;
  *(void *)&long long v41 = v202 ^ 0xCB308CF472657000;
  unint64_t v203 = (v41 >> 11) + 0x744650F6EFEAC765 + (~(2 * (v41 >> 11)) | 0x17735E12202A7135) + 1;
  uint64_t v204 = *(void *)(v8 + 8 * (v184 ^ 0x23));
  LODWORD(v201) = (((((v203 >> 3) & 0xE5C26219000000 ^ 0x80C20219000000)
                   + 0x744650F6EFEAC765
                   - ((2 * ((v203 >> 3) & 0xE5C26219000000 ^ 0x80C20219000000)) & 0x8880C412000000)) ^ v203) >> 24) ^ (((((v201 >> 3) & 0xC26219A00000 ^ 0xC00219000000) + 0x1A9E0CB6DAC713D8 - ((2 * ((v201 >> 3) & 0xC26219A00000 ^ 0xC00219000000)) & 0x4431000000)) ^ v201) >> 16);
  *((void *)&v41 + 1) = v204 ^ 0x1F8;
  *(void *)&long long v41 = v204 ^ 0xCB308CF472657000;
  unint64_t v205 = (v41 >> 11) - 0x15789A0B1D703D69 - ((2 * (v41 >> 11)) & 0xD50ECBE9C51F852ELL);
  LODWORD(v201) = v201 ^ (((((v205 >> 3) & 0x1BE5C26200000000 ^ 0x1940C02200000000)
                          - 0x15789A0B1D703D69
                          - ((2 * ((v205 >> 3) & 0x1BE5C26200000000 ^ 0x1940C02200000000)) & 0x150A80C000000000)) ^ v205) >> 32);
  uint64_t v206 = (*(void *)(v8 + 8 * (v182 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v207 = *(void *)(v8 + 8 * (v187 ^ 0x23));
  *((void *)&v41 + 1) = v207 ^ 0x1F8;
  *(void *)&long long v41 = v207 ^ 0xCB308CF472657000;
  unint64_t v208 = (v41 >> 11) - 0x26D78938C5EEAE5FLL - ((2 * (v41 >> 11)) & 0xB250ED8E7422A342);
  uint64_t v209 = v185 ^ 0x23;
  LODWORD(v185) = v201 ^ ((((((v206 - ((2 * v206) & 0x23F3546CBC3D32uLL) - 0x342E0655C9A1E167) >> 3) & 0x6219A0D800 ^ 0x200080C000)
                          - ((2
                            * (((v206 - ((2 * v206) & 0x23F3546CBC3D32uLL) - 0x342E0655C9A1E167) >> 3) & 0x6219A0D800 ^ 0x200080C000)) & 0x4420003000)
                          - 0x342E0555C9A1E167) ^ (v206 - ((2 * v206) & 0x23F3546CBC3D32) - 0x342E0655C9A1E167)) >> 8);
  uint64_t v210 = *(void *)(v8 + 8 * v209);
  *((void *)&v41 + 1) = v210 ^ 0x1F8;
  *(void *)&long long v41 = v210 ^ 0xCB308CF472657000;
  unint64_t v211 = (v41 >> 11) - 0x38D43C9227D6D837 - ((2 * (v41 >> 11)) & 0x8E5786DBB0524F92);
  uint64_t v212 = (*(void *)(v8 + 8 * (v183 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v211) = (((((v211 >> 3) & 0x1BE5C26200000000 ^ 0x18E5406000000000)
                   - 0x38D43C9227D6D837
                   - ((2 * ((v211 >> 3) & 0x1BE5C26200000000 ^ 0x18E5406000000000)) & 0x64384C000000000)) ^ v211) >> 32) ^ (((((v208 >> 3) & 0xE5C26219000000 ^ 0x25024001000000) - 0x26D78938C5EEAE5FLL - ((2 * ((v208 >> 3) & 0xE5C26219000000 ^ 0x25024001000000)) & 0x40848430000000)) ^ v208) >> 24) ^ ((((((v212 - ((2 * v212) & 0x2FD6997CE75D66uLL) - 0x67E814B3418C514DLL) >> 3) & 0x6219A0D800 ^ 0x6011805000) - ((2 * (((v212 - ((2 * v212) & 0x2FD6997CE75D66uLL) - 0x67E814B3418C514DLL) >> 3) & 0x6219A0D800 ^ 0x6011805000)) & 0x8030411000) - 0x67E813B3418C514DLL) ^ (v212 - ((2 * v212) & 0x2FD6997CE75D66) - 0x67E814B3418C514DLL)) >> 8);
  uint64_t v213 = (*(void *)(v8 + 8 * (v186 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v186) = v211 ^ ((((((v213 - ((2 * v213) & 0x2A8FC5790FCCD2uLL) + 0x74D547E2BC87E669) >> 3) & 0xC26219A00000 ^ 0x806011800000)
                          - ((2
                            * (((v213 - ((2 * v213) & 0x2A8FC5790FCCD2uLL) + 0x74D547E2BC87E669) >> 3) & 0xC26219A00000 ^ 0x806011800000)) & 0x84C431000000)
                          + 0x74D647E2BC87E669) ^ (v213 - ((2 * v213) & 0x2A8FC5790FCCD2) + 0x74D547E2BC87E669)) >> 16);
  uint64_t v214 = (*(void *)(v8 + 8 * (v189 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v215 = (*(void *)(v8 + 8 * (v188 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v214) = ((((((v215 + 0x72130BB9FB052954 - ((2 * v215) & 0x261773F60A52A8uLL)) >> 3) & 0xC26219A00000 ^ 0x406219200000)
                   + 0x72130BB9FB052954
                   - ((2
                     * (((v215 + 0x72130BB9FB052954 - ((2 * v215) & 0x261773F60A52A8uLL)) >> 3) & 0xC26219A00000 ^ 0x406219200000)) & 0x44032000000)) ^ (v215 + 0x72130BB9FB052954 - ((2 * v215) & 0x261773F60A52A8))) >> 16) ^ ((((((v214 - 0x367DEC5A2EBB1A1FLL - ((2 * v214) & 0x4274BA289CBC2uLL)) >> 3) & 0x6219A0D800 ^ 0x6018209800) - 0x367DEC5A2EBB1A1FLL - ((2 * (((v214 - 0x367DEC5A2EBB1A1FLL - ((2 * v214) & 0x4274BA289CBC2uLL)) >> 3) & 0x6219A0D800 ^ 0x6018209800)) & 0x4022018000)) ^ (v214 - 0x367DEC5A2EBB1A1FLL - ((2 * v214) & 0x4274BA289CBC2))) >> 8);
  uint64_t v216 = *(void *)(v8 + 8 * (v191 ^ 0x23));
  *((void *)&v41 + 1) = v216 ^ 0x1F8;
  *(void *)&long long v41 = v216 ^ 0xCB308CF472657000;
  unint64_t v217 = (v41 >> 11) - ((2 * (v41 >> 11)) & 0x16DAC264215B0A30) - 0x74929ECDEF527AE8;
  uint64_t v218 = *(void *)(v8 + 8 * (v193 ^ 0x23));
  *((void *)&v41 + 1) = v218 ^ 0x1F8;
  *(void *)&long long v41 = v218 ^ 0xCB308CF472657000;
  unint64_t v219 = (v41 >> 11) + 0x4E23D53EB57034FCLL - ((2 * (v41 >> 11)) & 0x9C47AA7D6AE069F8);
  LODWORD(v214) = v214 ^ (((((v217 >> 3) & 0xE5C26219000000 ^ 0x65802200000000)
                          - ((2 * ((v217 >> 3) & 0xE5C26219000000 ^ 0x65802200000000)) & 0xCA804420000000)
                          - 0x73929ECDEF527AE8) ^ v217) >> 24) ^ (((((v219 >> 3) & 0x1BE5C26200000000 ^ 0x9C4422200000000)
                                                                    + 0x4E23D53EB57034FCLL
                                                                    - ((2
                                                                      * ((v219 >> 3) & 0x1BE5C26200000000 ^ 0x9C4422200000000)) & 0x1443804400000000)) ^ v219) >> 32);
  uint64_t v220 = *(unsigned __int8 *)(v11
                            + (((unsigned __int16)((v214 ^ 0x4CE7)
                                                                  - ((2 * (v214 ^ 0x4CE7)) & 0x53B8)
                                                                  - 22052) >> 8) ^ 0xA9));
  unint64_t v221 = (v185 ^ 0x2967F6FELL)
       - ((2 * (v185 ^ 0x2967F6FELL)) & 0x129213CC4)
       + 0x3FA11DAA94909E62;
  uint64_t v222 = *(unsigned __int8 *)(v11
                            + ((((v186 ^ 0x854FA656)
                                                - ((2 * (v186 ^ 0x854FA656)) & 0x64822332)
                                                - 1304358503) >> 16) ^ 0x41));
  uint64_t v223 = *(unsigned __int8 *)(v11
                            + ((((v185 ^ 0x2967F6FE)
                                                - ((2 * (v185 ^ 0x2967F6FE)) & 0x29213CC4)
                                                - 1802461598) >> 16) ^ 0x90));
  uint64_t v224 = *(unsigned __int8 *)(v11
                            + (((unsigned __int16)((v185 ^ 0xF6FE)
                                                                  - ((2 * (v185 ^ 0xF6FE)) & 0x3CC4)
                                                                  - 24990) >> 8) ^ 0x9ELL));
  uint64_t v225 = *(unsigned __int8 *)(v11 + (v214 ^ 0xE7));
  uint64_t v226 = *(unsigned __int8 *)(v11
                            + (((unsigned __int16)((v186 ^ 0xA656)
                                                                  - ((2 * (v186 ^ 0xA656)) & 0x2332)
                                                                  + 4505) >> 8) ^ 0x11));
  uint64_t v227 = *(unsigned __int8 *)(v11 + (v186 ^ 0x56));
  uint64_t v228 = *(unsigned __int8 *)(v11
                            + (((unint64_t)((v135 ^ 0x33848D0D)
                                                                  - 2
                                                                  * ((v135 ^ 0x33848D0D) & 0x1C276D5B ^ v135 & 2)
                                                                  + 472345945) >> 16) ^ 0x27));
  uint64_t v229 = *(unsigned __int8 *)(v11 + (v185 ^ 0xFELL));
  uint64_t v230 = *(unsigned __int8 *)(v11
                            + ((((v214 ^ 0x8FCA4CE7)
                                                - ((2 * (v214 ^ 0x8FCA4CE7)) & 0xC53F53B8)
                                                - 492852772) >> 16) ^ 0x9FLL));
  uint64_t v231 = *(unsigned __int8 *)(v11
                            + (((unsigned __int16)((v135 ^ 0x8D0D)
                                                                  - 2 * ((v135 ^ 0x8D0D) & 0x6D5B ^ v135 & 2)
                                                                  + 27993) >> 8) ^ 0x6DLL));
  uint64_t v232 = *(unsigned __int8 *)(v11
                            + ((((v186 ^ 0x854FA656)
                               - ((2 * (v186 ^ 0x854FA656)) & 0x164822332uLL)
                               + 0x84008EAB2411199) >> 24) ^ 0x84008EAB2));
  uint64_t v233 = *(unsigned __int8 *)(v11
                            + ((((v214 ^ 0x8FCA4CE7)
                               - ((2 * (v214 ^ 0x8FCA4CE7)) & 0x1C53F53B8uLL)
                               - 0x72C59B31D605624) >> 24) ^ 0xF8D3A64CE2));
  uint64_t v234 = *(unsigned __int8 *)(v11 + ((v221 >> 24) ^ 0x3FA11DAA94));
  uint64_t v235 = *(void *)(v8
                   + 8
                   * (*(unsigned __int8 *)(v11
                                         + ((((v135 ^ 0x33848D0DLL)
                                            - 2
                                            * ((v135 ^ 0x33848D0DLL) & 0x1C276D5B ^ (unint64_t)(v135 & 2))
                                            + 0x382A5A171C276D59) >> 24) ^ 0x382A5A171CLL)) ^ 0x23));
  uint64_t v236 = *(unsigned __int8 *)(v11 + (v135 ^ 0xDLL));
  *((void *)&v41 + 1) = v235 ^ 0x1F8;
  *(void *)&long long v41 = v235 ^ 0xCB308CF472657000;
  unint64_t v237 = (v41 >> 11) + 0x3142A73A111F1C6CLL - ((2 * (v41 >> 11)) & 0x62854E74223E38D8);
  uint64_t v238 = (*(void *)(v8 + 8 * (v220 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  int v239 = ((((((v238 - ((2 * v238) & 0xB936FA6B492C4uLL) + 0x7465C9B7D35A4962) >> 3) & 0x6219A0D800 ^ 0x2218204800)
          - ((2
            * (((v238 - ((2 * v238) & 0xB936FA6B492C4uLL) + 0x7465C9B7D35A4962) >> 3) & 0x6219A0D800 ^ 0x2218204800)) & 0x4422009000)
          + 0xB7D35A4962) ^ (v238 - ((2 * v238) & 0xB936FA6B492C4) + 0x7465C9B7D35A4962)) >> 8) ^ (((((v237 >> 3) & 0x1BE5C26200000000 ^ 0x220406200000000) + 0x3142A73A111F1C6CLL - ((2 * ((v237 >> 3) & 0x1BE5C26200000000 ^ 0x220406200000000)) & 0x2281044400000000)) ^ v237) >> 32);
  uint64_t v240 = (*(void *)(v8 + 8 * (v222 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  unint64_t v241 = (((((v240 - ((2 * v240) & 0x25DA5A5B9F7B78uLL) - 0x392D12D2D2304244) >> 3) & 0xC26219A00000 ^ 0x402001A00000)
         - ((2
           * (((v240 - ((2 * v240) & 0x25DA5A5B9F7B78uLL) - 0x392D12D2D2304244) >> 3) & 0xC26219A00000 ^ 0x402001A00000)) & 0x804013000000)
         + 0xED2D2DCFBDBCLL) ^ (v240 - ((2 * v240) & 0x25DA5A5B9F7B78) - 0x392D12D2D2304244)) >> 16;
  LODWORD(v241) = v241 + 2074156538 - ((2 * v241) & 0xF7423BF4);
  uint64_t v242 = *(void *)(v8 + 8 * (v223 ^ 0x23));
  int v243 = v241 ^ 0xC0F73908;
  *((void *)&v41 + 1) = v242 ^ 0x1F8;
  *(void *)&long long v41 = v242 ^ 0xCB308CF472657000;
  unint64_t v244 = (v41 >> 11) - ((2 * (v41 >> 11)) & 0x7E03DC3CE6BE6608) + 0x3F01EE1E735F3304;
  LODWORD(v135) = (2 * (v239 & 0x80000)) ^ 0x100000 | v239 & 0x80000;
  int v245 = v135 + 247409937;
  LODWORD(v129) = v135 - 0x80000;
  int v246 = 248458513 - v135;
  if ((v129 & (v241 ^ 0x7BA11DFA)) != 0) {
    int v247 = v246;
  }
  else {
    int v247 = v245;
  }
  int v248 = v239 & 0xFFF7FFFF ^ (((((v244 >> 3) & 0xE5C26219000000 ^ 0xE0004208000000)
                              - ((2 * ((v244 >> 3) & 0xE5C26219000000 ^ 0xE0004208000000)) & 0x3840422000000)
                              + 0x1EE1E735F3304) ^ v244) >> 24);
  uint64_t v249 = *(void *)(v8 + 8 * (v224 ^ 0x23));
  *((void *)&v250 + 1) = v249 ^ 0x1F8;
  *(void *)&long long v250 = v249 ^ 0xCB308CF472657000;
  int v251 = v248 ^ (v243 - 247934225 + v247);
  unint64_t v252 = (v250 >> 11) + 0x4B4AAEC321F4D18BLL - ((2 * (v250 >> 11)) & 0x96955D8643E9A316);
  uint64_t v253 = *(void *)(v8 + 8 * (v228 ^ 0x23));
  *((void *)&v250 + 1) = v253 ^ 0x1F8;
  *(void *)&long long v250 = v253 ^ 0xCB308CF472657000;
  unint64_t v254 = (v250 >> 11) + 0x306C5E7A31FBEC45 - ((2 * (v250 >> 11)) & 0x60D8BCF463F7D88ALL);
  LODWORD(v252) = (((((v254 >> 3) & 0x1BE5C26200000000 ^ 0x205824200000000)
                   + 0x306C5E7A31FBEC45
                   - ((2 * ((v254 >> 3) & 0x1BE5C26200000000 ^ 0x205824200000000)) & 0x20C884C400000000)) ^ v254) >> 32) ^ (((((v252 >> 3) & 0xE5C26219000000 ^ 0x61404000000000) + 0x4B4AAEC321F4D18BLL - ((2 * ((v252 >> 3) & 0xE5C26219000000 ^ 0x61404000000000)) & 0x81048402000000)) ^ v252) >> 24);
  unint64_t v255 = ((*(void *)(v8 + 8 * (v225 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL)
       - ((2 * ((*(void *)(v8 + 8 * (v225 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL)) & 0x33667A4D9583E4)
       + 0xFD9B33D26CAC1F2;
  LODWORD(v252) = v252 ^ (((((v255 >> 3) & 0x6219A0D800 ^ 0x6200805800)
                          - ((2 * ((v255 >> 3) & 0x6219A0D800 ^ 0x6200805800)) & 0x4001018000)
                          + 0xFD9B43D26CAC1F2) ^ v255) >> 8);
  uint64_t v256 = (*(void *)(v8 + 8 * (v226 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  unsigned int v257 = v252 ^ ((((((v256 - ((2 * v256) & 0x38420485AE080uLL) + 0x57E1C210242D7040) >> 3) & 0xC26219A00000 ^ 0x4200800000)
                 - (((v256 - ((2 * v256) & 0x38420485AE080uLL) + 0x57E1C210242D7040) >> 2) & 0x1840000400000)
                 + 0x57E2C210242D7040) ^ (v256 - ((2 * v256) & 0x38420485AE080) + 0x57E1C210242D7040)) >> 16);
  uint64_t v258 = *(void *)(v8 + 8 * (v227 ^ 0x23));
  *((void *)&v250 + 1) = v258 ^ 0x1F8;
  *(void *)&long long v250 = v258 ^ 0xCB308CF472657000;
  unint64_t v259 = (v250 >> 11) + 0x7B4CB8C313972089 - ((2 * (v250 >> 11)) & 0xF6997186272E4112);
  uint64_t v260 = *(void *)(v8 + 8 * (v229 ^ 0x23));
  *((void *)&v250 + 1) = v260 ^ 0x1F8;
  *(void *)&long long v250 = v260 ^ 0xCB308CF472657000;
  unint64_t v261 = (v250 >> 11) + 0xF118CE35D066478 - ((2 * (v250 >> 11)) & 0x1E2319C6BA0CC8F0);
  LODWORD(v259) = (((((v261 >> 3) & 0x1BE5C26200000000 ^ 0x1E0000000000000)
                   + 0xF118CE35D066478
                   - ((2 * ((v261 >> 3) & 0x1BE5C26200000000 ^ 0x1E0000000000000)) & 0x160300C400000000)) ^ v261) >> 32) ^ (((((v259 >> 3) & 0xE5C26219000000 ^ 0x61820000000000) + 0x7B4CB8C313972089 - ((2 * ((v259 >> 3) & 0xE5C26219000000 ^ 0x61820000000000)) & 0x89008422000000)) ^ v259) >> 24);
  uint64_t v262 = (*(void *)(v8 + 8 * (v231 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v259) = v259 ^ ((((((v262 - ((2 * v262) & 0x1E0CCCC7194568uLL) + 0x42CF0666638CA2B4) >> 3) & 0x6219A0D800 ^ 0x4008209000)
                          - ((2
                            * (((v262 - ((2 * v262) & 0x1E0CCCC7194568uLL) + 0x42CF0666638CA2B4) >> 3) & 0x6219A0D800 ^ 0x4008209000)) & 0xC403010000)
                          + 0x42CF0766638CA2B4) ^ (v262 - ((2 * v262) & 0x1E0CCCC7194568) + 0x42CF0666638CA2B4)) >> 8);
  uint64_t v263 = (*(void *)(v8 + 8 * (v233 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v264 = *(void *)(v8 + 8 * (v230 ^ 0x23));
  *((void *)&v250 + 1) = v264 ^ 0x1F8;
  *(void *)&long long v250 = v264 ^ 0xCB308CF472657000;
  LODWORD(v263) = v259 ^ ((((((v263 - ((2 * v263) & 0x1F3997DDD250D4uLL) - 0x425063341116D796) >> 3) & 0xC26219A00000 ^ 0xC20019800000)
                          - ((2
                            * (((v263 - ((2 * v263) & 0x1F3997DDD250D4uLL) - 0x425063341116D796) >> 3) & 0xC26219A00000 ^ 0xC20019800000)) & 0x1008411400000)
                          - 0x424F63341116D796) ^ (v263 - ((2 * v263) & 0x1F3997DDD250D4) - 0x425063341116D796)) >> 16);
  unint64_t v265 = (v250 >> 11) + 0x4BCDCC620D38C79FLL - ((2 * (v250 >> 11)) & 0x979B98C41A718F3ELL);
  uint64_t v266 = *(void *)(v8 + 8 * (v232 ^ 0x23));
  *((void *)&v250 + 1) = v266 ^ 0x1F8;
  *(void *)&long long v250 = v266 ^ 0xCB308CF472657000;
  unint64_t v267 = (v250 >> 11) + 0x3052F5BC374AE06ALL - ((2 * (v250 >> 11)) & 0x60A5EB786E95C0D4);
  LODWORD(v265) = (((((v267 >> 3) & 0x1BE5C26200000000 ^ 0x200422200000000)
                   + 0x3052F5BC374AE06ALL
                   - ((2 * ((v267 >> 3) & 0x1BE5C26200000000 ^ 0x200422200000000)) & 0x2081804000000000)) ^ v267) >> 32) ^ (((((v265 >> 3) & 0xE5C26219000000 ^ 0x61800001000000) + 0x4BCDCC620D38C79FLL - ((2 * ((v265 >> 3) & 0xE5C26219000000 ^ 0x61800001000000)) & 0x18B80C412000000)) ^ v265) >> 24);
  uint64_t v268 = (*(void *)(v8 + 8 * (v234 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v265) = v265 ^ ((((((v268 - ((2 * v268) & 0x3ACD22F59E1CC8uLL) + 0x649D66917ACF0E64) >> 3) & 0x6219A0D800 ^ 0x420900C000)
                          - ((2
                            * (((v268 - ((2 * v268) & 0x3ACD22F59E1CC8uLL) + 0x649D66917ACF0E64) >> 3) & 0x19A0D800 ^ 0x900C000)) & 0x31001000)
                          + 0x649D67917ACF0E64) ^ (v268 - ((2 * v268) & 0x3ACD22F59E1CC8) + 0x649D66917ACF0E64)) >> 8);
  uint64_t v269 = (*(void *)(v8 + 8 * (v236 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  unint64_t v270 = (v251 ^ 0x44E1A65Eu) - (unint64_t)((2 * (v251 ^ 0x44E1A65E)) & 0x1127FCA2) - 0x78C8EF0BF76C01AFLL;
  char v271 = v265 ^ ((((((v269 - ((2 * v269) & 0xF6EC2982741A4uLL) - 0x1F38489EB3EC5F2ELL) >> 3) & 0x19A00000 ^ 0x9800000)
                 - ((2
                   * (((v269 - ((2 * v269) & 0xF6EC2982741A4uLL) - 0x1F38489EB3EC5F2ELL) >> 3) & 0x19A00000 ^ 0x9800000)) & 0x10000000)
                 + 1276354770) ^ (v269 - ((2 * v269) & 0x982741A4) + 1276354770)) >> 16);
  uint64_t v272 = *(unsigned __int8 *)(v11 + ((v270 >> 24) ^ 0x873710F408));
  uint64_t v273 = v265 ^ ((((((v269 - ((2 * v269) & 0xF6EC2982741A4uLL) - 0x1F38489EB3EC5F2ELL) >> 3) & 0xC26219A00000 ^ 0xC26009800000)
                                             - ((2
                                               * (((v269 - ((2 * v269) & 0xF6EC2982741A4uLL) - 0x1F38489EB3EC5F2ELL) >> 3) & 0xC26219A00000 ^ 0xC26009800000)) & 0x104C010000000)
                                             - 0x1F37489EB3EC5F2ELL) ^ (v269
                                                                      - ((2 * v269) & 0xF6EC2982741A4)
                                                                      - 0x1F38489EB3EC5F2ELL)) >> 16) ^ 0x369777FFLL;
  unint64_t v274 = v273 - ((2 * v273) & 0x1D0D20EB4) + 0x2E36166EE869075ALL;
  int v275 = *(unsigned __int8 *)(v11 + ((v274 >> 24) ^ 0x2E36166EE8));
  uint64_t v276 = *(unsigned __int8 *)(v11 + (v257 ^ 0x33));
  uint64_t v277 = *(unsigned __int8 *)(v11
                            + ((((v263 ^ 0x9BEF883D)
                                                - ((2 * (v263 ^ 0x9BEF883D)) & 0x7E1243E6)
                                                + 1057563123) >> 16) ^ 9));
  unint64_t v278 = (v257 ^ 0x792ED733) - ((2 * (v257 ^ 0x792ED733)) & 0xC6CA608C) - 0x23E126E09C9ACFBALL;
  uint64_t v279 = *(unsigned __int8 *)(v11
                            + (((unsigned __int16)((v257 ^ 0xD733)
                                                                  - ((2 * (v257 ^ 0xD733)) & 0x608C)
                                                                  + 12358) >> 8) ^ 0x30));
  uint64_t v280 = *(unsigned __int8 *)(v11
                            + (((unsigned __int16)((v263 ^ 0x883D)
                                                                  - ((2 * (v263 ^ 0x883D)) & 0x43E6)
                                                                  + 8691) >> 8) ^ 0x21));
  uint64_t v281 = *(unsigned __int8 *)(v11 + (BYTE2(v270) ^ 0x93));
  uint64_t v282 = *(unsigned __int8 *)(v11 + (v263 ^ 0x3DLL));
  uint64_t v283 = *(unsigned __int8 *)(v11 + (BYTE1(v270) ^ 0xFELL));
  uint64_t v284 = *(unsigned __int8 *)(v11 + ((v278 >> 24) ^ 0xDC1ED91F63));
  uint64_t v285 = *(unsigned __int8 *)(v11 + ~v271);
  uint64_t v286 = *(unsigned __int8 *)(v11
                            + ((((v263 ^ 0x9BEF883DLL)
                               - (unint64_t)((2 * (v263 ^ 0x9BEF883D)) & 0x7E1243E6)
                               - 0x327FEEE9C0F6DE0DLL) >> 24) ^ 0xCD8011163FLL));
  uint64_t v287 = *(unsigned __int8 *)(v11 + (v251 ^ 0x5ELL));
  uint64_t v288 = *(unsigned __int8 *)(v11 + (BYTE2(v278) ^ 0x65));
  uint64_t v289 = (*(void *)(v8 + 8 * (v272 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v266) = (v275 ^ 0xDA) - 974801399 + (~(2 * (v275 ^ 0xDA)) | 0xFFFFFFED) + 1;
  LODWORD(v278) = ((v266 ^ 0x3A1A49F6) + 1) ^ (249 - (v275 ^ 0x23));
  uint64_t v290 = *(void *)(v8
                   + 8 * (((v278 - 974801399 - ((2 * v278) & 0x8BCB6C12)) ^ v266) + 249));
  *((void *)&v250 + 1) = v290 ^ 0x1F8;
  *(void *)&long long v250 = v290 ^ 0xCB308CF472657000;
  unint64_t v291 = (v250 >> 11) - 0x1DE0B500E7C177F6 - ((2 * (v250 >> 11)) & 0xC43E95FE307D1014);
  uint64_t v292 = *(void *)(v8 + 8 * (v277 ^ 0x23));
  *((void *)&v250 + 1) = v292 ^ 0x1F8;
  *(void *)&long long v250 = v292 ^ 0xCB308CF472657000;
  LODWORD(v289) = (((((v291 >> 3) & 0xE5C26219000000 ^ 0x41C04201000000)
                   - 0x1DE0B500E7C177F6
                   - ((2 * ((v291 >> 3) & 0xE5C26219000000 ^ 0x41C04201000000)) & 0xA84C430000000)) ^ v291) >> 24) ^ ((((((v289 + 0x1DB6B0B17DCBE44ALL - ((2 * v289) & 0x2D6162FB97C894uLL)) >> 3) & 0xC26219A00000 ^ 0xC20209A00000) + 0x1DB6B0B17DCBE44ALL - ((2 * (((v289 + 0x1DB6B0B17DCBE44ALL - ((2 * v289) & 0x2D6162FB97C894uLL)) >> 3) & 0xC26219A00000 ^ 0xC20209A00000)) & 0x1004033000000)) ^ (v289 + 0x1DB6B0B17DCBE44ALL - ((2 * v289) & 0x2D6162FB97C894))) >> 16);
  unint64_t v293 = (v250 >> 11) + 0x1ECF500D5FB91EDELL - ((2 * (v250 >> 11)) & 0x3D9EA01ABF723DBCLL);
  LODWORD(v289) = v289 ^ (((((v293 >> 3) & 0x1BE5C26200000000 ^ 0x3C1C20000000000)
                          + 0x1ECF500D5FB91EDELL
                          - ((2 * ((v293 >> 3) & 0x1BE5C26200000000 ^ 0x3C1C20000000000)) & 0x358A800000000000)) ^ v293) >> 32);
  uint64_t v294 = (*(void *)(v8 + 8 * (v279 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v294) = v289 ^ ((((((v294 - ((2 * v294) & 0x16B729F59A3934uLL) - 0x6AF4A46B0532E366) >> 3) & 0x6219A0D800 ^ 0x6219008000)
                          - ((2
                            * (((v294 - ((2 * v294) & 0x16B729F59A3934uLL) - 0x6AF4A46B0532E366) >> 3) & 0x19A0D800 ^ 0x19008000)) & 0x31003000)
                          - 0x6AF4A36B0532E366) ^ (v294 - ((2 * v294) & 0x16B729F59A3934) - 0x6AF4A46B0532E366)) >> 8);
  uint64_t v295 = *(void *)(v8 + 8 * (v276 ^ 0x23));
  *((void *)&v250 + 1) = v295 ^ 0x1F8;
  *(void *)&long long v250 = v295 ^ 0xCB308CF472657000;
  unint64_t v296 = (v250 >> 11) - 0x1150EB117EDA9C23 - ((2 * (v250 >> 11)) & 0xDD5E29DD024AC7BALL);
  uint64_t v297 = *(void *)(v8 + 8 * (v281 ^ 0x23));
  *((void *)&v250 + 1) = v297 ^ 0x1F8;
  *(void *)&long long v250 = v297 ^ 0xCB308CF472657000;
  unint64_t v298 = (v250 >> 11) - 0x3B8A1E79A96EC96 - ((2 * (v250 >> 11)) & 0xF88EBC30CAD226D4);
  LODWORD(v296) = (((((v298 >> 3) & 0x1BE5C26200000000 ^ 0x1B80C24200000000)
                   - 0x3B8A1E79A96EC96
                   - ((2 * ((v298 >> 3) & 0x1BE5C26200000000 ^ 0x1B80C24200000000)) & 0x308A840000000000)) ^ v298) >> 32) ^ (((((v296 >> 3) & 0xE5C26219000000 ^ 0xC5C20010000000) - 0x1150EB117EDA9C23 - ((2 * ((v296 >> 3) & 0xE5C26219000000 ^ 0xC5C20010000000)) & 0x14A00C402000000)) ^ v296) >> 24);
  uint64_t v299 = (*(void *)(v8 + 8 * (*(unsigned __int8 *)(v11 + (BYTE2(v274) ^ 0x69)) ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v296) = v296 ^ ((((((v299 - ((2 * v299) & 0x3E1BAF0284ACDCuLL) - 0x4C60F2287EBDA992) >> 3) & 0x6219A0D800 ^ 0x2210204800)
                          - ((2
                            * (((v299 - ((2 * v299) & 0x3E1BAF0284ACDCuLL) - 0x4C60F2287EBDA992) >> 3) & 0x6219A0D800 ^ 0x2210204800)) & 0x840200A000)
                          - 0x4C60F1287EBDA992) ^ (v299 - ((2 * v299) & 0x3E1BAF0284ACDCLL) - 0x4C60F2287EBDA992)) >> 8);
  uint64_t v300 = (*(void *)(v8 + 8 * (v280 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  unint64_t v301 = *(void *)(v8 + 8 * (v282 ^ 0x23));
  LODWORD(v282) = v296 ^ ((((((v300 - ((2 * v300) & 0x1E3A1B3F7CF94EuLL) + 0x5DEF1D0D9FBE7CA7) >> 3) & 0xC26219A00000 ^ 0xC22011A00000)
                          - ((2
                            * (((v300 - ((2 * v300) & 0x1E3A1B3F7CF94EuLL) + 0x5DEF1D0D9FBE7CA7) >> 3) & 0x19A00000 ^ 0x11A00000)) & 0x33400000)
                          + 0x5DF01D0D9FBE7CA7) ^ (v300 - ((2 * v300) & 0x1E3A1B3F7CF94ELL) + 0x5DEF1D0D9FBE7CA7)) >> 16);
  unint64_t v302 = ((v301 >> 11) ^ 0x1966119E8E4CAELL)
       + 0x50F9D247774427BLL
       - ((2 * ((v301 >> 11) ^ 0x1966119E8E4CAELL)) & 0x1F3A48EEE884F6);
  uint64_t v303 = (*(void *)(v8 + 8 * (v284 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v302) = ((((((v303 - 0x69CB095A70EBB8CDLL - ((2 * v303) & 0x29ED4B1E288E66uLL)) >> 3) & 0xC26219A00000 ^ 0x824011A00000)
                   - 0x69CB095A70EBB8CDLL
                   - ((2
                     * (((v303 - 0x69CB095A70EBB8CDLL - ((2 * v303) & 0x29ED4B1E288E66uLL)) >> 3) & 0xC26219A00000 ^ 0x824011A00000)) & 0x1844012000000)) ^ (v303 - 0x69CB095A70EBB8CDLL - ((2 * v303) & 0x29ED4B1E288E66))) >> 16) ^ (((((v302 >> 3) & 0x6219A0D800 ^ 0x2008A08800) + 0x50F9D247774427BLL - ((2 * ((v302 >> 3) & 0x6219A0D800 ^ 0x2008A08800)) & 0x4022408000)) ^ v302) >> 8);
  uint64_t v304 = *(void *)(v8 + 8 * (v283 ^ 0x23));
  *((void *)&v250 + 1) = v304 ^ 0x1F8;
  *(void *)&long long v250 = v304 ^ 0xCB308CF472657000;
  unint64_t v305 = (v250 >> 11) - ((2 * (v250 >> 11)) & 0x90CD5101E6C0F442) + 0x4866A880F3607A21;
  uint64_t v306 = *(void *)(v8 + 8 * (*(unsigned __int8 *)(v11 + (BYTE1(v274) ^ 7)) ^ 0x23));
  LODWORD(v302) = v302 ^ (((((v305 >> 3) & 0xE5C26219000000 ^ 0x4C00018000000)
                          - ((2 * ((v305 >> 3) & 0xE5C26219000000 ^ 0x4C00018000000)) & 0xC9000022000000)
                          + 0x4966A880F3607A21) ^ v305) >> 24);
  *((void *)&v250 + 1) = v306 ^ 0x1F8;
  *(void *)&long long v250 = v306 ^ 0xCB308CF472657000;
  unint64_t v307 = (v250 >> 11) - 0x4153E5CE63CAB3B6 - ((2 * (v250 >> 11)) & 0x7D583463386A9894);
  uint64_t v308 = v285 ^ 0x23;
  LODWORD(v285) = v302 ^ (((((v307 >> 3) & 0x1BE5C26200000000 ^ 0x13C5824200000000)
                          - 0x4153E5CE63CAB3B6
                          - ((2 * ((v307 >> 3) & 0x1BE5C26200000000 ^ 0x13C5824200000000)) & 0x3548044000000000)) ^ v307) >> 32);
  uint64_t v309 = *(void *)(v8 + 8 * v308);
  *((void *)&v250 + 1) = v309 ^ 0x1F8;
  *(void *)&long long v250 = v309 ^ 0xCB308CF472657000;
  unint64_t v310 = (v250 >> 11) + 0xF3DB0E3475437FALL - ((2 * (v250 >> 11)) & 0x1E7B61C68EA86FF4);
  uint64_t v311 = (*(void *)(v8 + 8 * (v286 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v310) = ((((((v311 - 0x4E2E51B167F869DLL - ((2 * v311) & 0x3A35C9D300F2C6uLL)) >> 3) & 0x6219A0D800 ^ 0x4019200800)
                   - 0x4E2E51B167F869DLL
                   - ((2
                     * (((v311 - 0x4E2E51B167F869DLL - ((2 * v311) & 0x3A35C9D300F2C6uLL)) >> 3) & 0x6219A0D800 ^ 0x4019200800)) & 0xC01300B000)) ^ (v311 - 0x4E2E51B167F869DLL - ((2 * v311) & 0x3A35C9D300F2C6))) >> 8) ^ (((((v310 >> 3) & 0x1BE5C26200000000 ^ 0x1E5820000000000) + 0xF3DB0E3475437FALL - ((2 * ((v310 >> 3) & 0x1BE5C26200000000 ^ 0x1E5820000000000)) & 0x164B00C400000000)) ^ v310) >> 32);
  uint64_t v312 = (*(void *)(v8 + 8 * (v288 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v313 = *(void *)(v8 + 8 * (v287 ^ 0x23));
  *((void *)&v250 + 1) = v313 ^ 0x1F8;
  *(void *)&long long v250 = v313 ^ 0xCB308CF472657000;
  LODWORD(v310) = v310 ^ ((((((v312 - ((2 * v312) & 0x62875DCBCDCFEuLL) - 0x66FCEBC511A19181) >> 3) & 0xC26219A00000 ^ 0x420219800000)
                          - ((2
                            * (((v312 - ((2 * v312) & 0x62875DCBCDCFEuLL) - 0x66FCEBC511A19181) >> 3) & 0xC26219A00000 ^ 0x420219800000)) & 0x4410000000)
                          - 0x66FBEBC511A19181) ^ (v312 - ((2 * v312) & 0x62875DCBCDCFELL) - 0x66FCEBC511A19181)) >> 16);
  unint64_t v314 = (v250 >> 11) - ((2 * (v250 >> 11)) & 0xDD27C778B460B442) - 0x116C1C43A5CFA5DFLL;
  unint64_t v315 = (v294 ^ 0x48BF3C1ELL)
       - ((2 * (v294 ^ 0x48BF3C1E)) & 0x94F101E6)
       - 0x68A070AB5877F0DLL;
  LOBYTE(v277) = v310 ^ (((((v314 >> 3) & 0x19000000 ^ 0x9000000)
                         - ((2 * ((v314 >> 3) & 0x19000000 ^ 0x9000000)) & 0x30000000)
                         + 1513118241) ^ v314) >> 24);
  char v316 = *(unsigned char *)(v11
                  + (((unsigned __int16)((v294 ^ 0x3C1E) - ((2 * (v294 ^ 0x3C1E)) & 0x1E6) - 32525) >> 8) ^ 0x80));
  uint64_t v317 = v310 ^ (((((v314 >> 3) & 0xE5C26219000000 ^ 0xC0406209000000)
                                             - ((2 * ((v314 >> 3) & 0xE5C26219000000 ^ 0xC0406209000000)) & 0x103844030000000)
                                             - 0x106C1C43A5CFA5DFLL) ^ v314) >> 24) ^ 0xEC6615D0;
  unint64_t v318 = v317 - ((2 * v317) & 0x13315DBE4) - 0x56D7822E6675120ELL;
  char v319 = *(unsigned char *)(v11 + (v285 ^ 0x5ELL));
  unint64_t v320 = (v285 ^ 0xD44DAA5ELL)
       - 2 * ((v285 ^ 0xD44DAA5ELL) & 0x3CAB34F2 ^ v285 & 0x20)
       + 0x114D736A3CAB34D2;
  LOBYTE(v281) = *(unsigned char *)(v11 + (BYTE2(v318) ^ 0x8ALL));
  LOBYTE(v274) = *(unsigned char *)(v11 + (v294 ^ 0x1ELL));
  LOBYTE(v280) = *(unsigned char *)(v11
                          + (((unsigned __int16)((v282 ^ 0x8B74)
                                                                - ((2 * (v282 ^ 0x8B74)) & 0x90BA)
                                                                + 18525) >> 8) ^ 0x48));
  LOBYTE(v285) = *(unsigned char *)(v11 + (BYTE1(v318) ^ 0xEDLL));
  LOBYTE(v283) = *(unsigned char *)(v11
                          + ((((v282 ^ 0xE6288B74)
                             - ((2 * (v282 ^ 0xE6288B74)) & 0x1570690BAuLL)
                             - 0x4ADC107B547CB7A3) >> 24) ^ 0xB523EF84ABLL));
  LOBYTE(v313) = *(unsigned char *)(v11 + ((v320 >> 24) ^ 0x114D736A3CLL));
  LOBYTE(v294) = *(unsigned char *)(v11 + (BYTE2(v320) ^ 0xABLL));
  LOBYTE(v275) = *(unsigned char *)(v11
                          + ((((v282 ^ 0xE6288B74)
                                              - ((2 * (v282 ^ 0xE6288B74)) & 0x570690BA)
                                              - 1417459619) >> 16) ^ 0x83));
  char v321 = *(unsigned char *)(v11 + ((v318 >> 24) ^ 0xA9287DD199));
  LOBYTE(v288) = *(unsigned char *)(v11 + (BYTE1(v320) ^ 0x34));
  uint64_t v322 = *(void *)(v8
                   + 8
                   * (LODWORD(STACK[0x35C]) ^ 0x23u ^ (v316 - ((2 * v316) & 0x96) - 53)));
  *((void *)&v250 + 1) = v322 ^ 0x1F8;
  *(void *)&long long v250 = v322 ^ 0xCB308CF472657000;
  unint64_t v323 = (v250 >> 11) + 0x44B3B7B72839DEE7 - ((2 * (v250 >> 11)) & 0x89676F6E5073BDCELL);
  LOBYTE(v320) = v281 - ((2 * v281) & 0x4A) + 37;
  unint64_t v324 = ((((v323 >> 3) & 0x1BE5C26200000000 ^ 0x884426200000000)
         + 0x44B3B7B72839DEE7
         - ((2 * ((v323 >> 3) & 0x1BE5C26200000000 ^ 0x884426200000000)) & 0x143044400000000)) ^ v323) >> 32;
  uint64_t v325 = (*(void *)(v8 + 8 * (LODWORD(STACK[0x340]) ^ 0x23u ^ v320)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v326 = (*(void *)(v8
                    + 8
                    * (LODWORD(STACK[0x348]) ^ 0x23u ^ (v319
                                                                                        - ((2 * v319) & 0x34)
                                                                                        - 102))) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v325) = ((((((v325 + 0x6513995018CF5EB6 - ((2 * v325) & 0x2732A0319EBD6CuLL)) >> 3) & 0x6219A0D800 ^ 0x220100C800)
                   + 0x6513995018CF5EB6
                   - ((2
                     * (((v325 + 0x6513995018CF5EB6 - ((2 * v325) & 0x2732A0319EBD6CuLL)) >> 3) & 0x6219A0D800 ^ 0x220100C800)) & 0x803100B000)) ^ (v325 + 0x6513995018CF5EB6 - ((2 * v325) & 0x2732A0319EBD6CLL))) >> 8) ^ ((((((v326 - ((2 * v326) & 0x2754046653CAA0uLL) + 0x2913AA023329E550) >> 3) & 0xC26219A00000 ^ 0x404000200000) - ((2 * (((v326 - ((2 * v326) & 0x2754046653CAA0uLL) + 0x2913AA023329E550) >> 3) & 0xC26219A00000 ^ 0x404000200000)) & 0x40422400000) + 0x2914AA023329E550) ^ (v326 - ((2 * v326) & 0x2754046653CAA0) + 0x2913AA023329E550)) >> 16);
  uint64_t v327 = *(void *)(v8
                   + 8
                   * (LODWORD(STACK[0x358]) ^ 0x23u ^ (v280 - ((2 * v280) & 0x83) - 63)));
  *((void *)&v250 + 1) = v327 ^ 0x1F8;
  *(void *)&long long v250 = v327 ^ 0xCB308CF472657000;
  unint64_t v328 = (v250 >> 11) - ((2 * (v250 >> 11)) & 0xB4610FA4224E0636) + 0x5A3087D21127031BLL;
  uint64_t v329 = *(void *)(v8
                   + 8
                   * (LODWORD(STACK[0x334]) ^ 0x23u ^ (*(unsigned char *)(v11
                                                                                                  + (v282 ^ 0x74))
                                                                                       - ((2
                                                                                         * *(unsigned char *)(v11 + (v282 ^ 0x74))) & 0xB8)
                                                                                       - 36)));
  *((void *)&v250 + 1) = v329 ^ 0x1F8;
  *(void *)&long long v250 = v329 ^ 0xCB308CF472657000;
  unint64_t v330 = (v250 >> 11) + 0x677A84A2DE69E5CELL - ((2 * (v250 >> 11)) & 0xCEF50945BCD3CB9CLL);
  LODWORD(v325) = v325 ^ (((((v328 >> 3) & 0xE5C26219000000 ^ 0x44006200000000)
                          - ((2 * ((v328 >> 3) & 0xE5C26219000000 ^ 0x44006200000000)) & 0x41048422000000)
                          + 0x3087D21127031BLL) ^ v328) >> 24) ^ v324;
  LODWORD(v272) = (v325 - ((2 * v325) & 0x8CCD150A) + 1181125253) ^ LODWORD(STACK[0x370]);
  unint64_t v331 = ((((v330 >> 3) & 0xE5C26219000000 ^ 0xE5400019000000)
         + 0x677A84A2DE69E5CELL
         - ((2 * ((v330 >> 3) & 0xE5C26219000000 ^ 0xE5400019000000)) & 0xC1004430000000)) ^ v330) >> 24;
  uint64_t v332 = *(void *)(v8
                   + 8
                   * (LODWORD(STACK[0x344]) ^ 0x23u ^ (v274 - ((2 * v274) & 0x36) - 101)));
  *((void *)&v250 + 1) = v332 ^ 0x1F8;
  *(void *)&long long v250 = v332 ^ 0xCB308CF472657000;
  unint64_t v333 = (v250 >> 11) + 0x1BB1B5257D7312BDLL - ((2 * (v250 >> 11)) & 0x37636A4AFAE6257ALL);
  uint64_t v334 = (*(void *)(v8
                    + 8
                    * (LODWORD(STACK[0x32C]) ^ 0x23u ^ (v285 - ((2 * v285) & 0x8C) + 70))) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v331) = (((((v333 >> 3) & 0x1BE5C26200000000 ^ 0x364022000000000)
                   + 0x1BB1B5257D7312BDLL
                   - ((2 * ((v333 >> 3) & 0x1BE5C26200000000 ^ 0x364022000000000)) & 0x3743004000000000)) ^ v333) >> 32) ^ v331 ^ ((((((v334 - ((2 * v334) & 0x1DC0E06573BECEuLL) + 0x408EE07032B9DF67) >> 3) & 0x6219A0D800 ^ 0x200001800) - ((2 * (((v334 - ((2 * v334) & 0x1DC0E06573BECEuLL) + 0x408EE07032B9DF67) >> 3) & 0x6219A0D800 ^ 0x200001800)) & 0xC02141B000) + 0x408EE17032B9DF67) ^ (v334 - ((2 * v334) & 0x1DC0E06573BECELL) + 0x408EE07032B9DF67)) >> 8);
  uint64_t v335 = (*(void *)(v8
                    + 8
                    * (LODWORD(STACK[0x330]) ^ 0x23u ^ (v313
                                                                                        + (~(2 * v313) | 0x61)
                                                                                        + 80))) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v331) = v331 ^ ((((((v335 - ((2 * v335) & 0xFE04A47754654uLL) + 0x7EA7F02523BAA32ALL) >> 3) & 0xC26219A00000 ^ 0xC20000200000)
                          - ((2
                            * (((v335 - ((2 * v335) & 0xFE04A47754654uLL) + 0x7EA7F02523BAA32ALL) >> 3) & 0xC26219A00000 ^ 0xC20000200000)) & 0x804003400000)
                          + 0xF02523BAA32ALL) ^ (v335 - ((2 * v335) & 0xFE04A47754654) + 0x7EA7F02523BAA32ALL)) >> 16);
  LODWORD(v313) = (v331 - ((2 * v331) & 0x8F63F922) + 1202846865) ^ LODWORD(STACK[0x378]);
  uint64_t v336 = (*(void *)(v8
                    + 8
                    * (LODWORD(STACK[0x33C]) ^ 0x23u ^ (v294 - ((2 * v294) & 0xBA) + 93))) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v337 = (*(void *)(v8
                    + 8
                    * (LODWORD(STACK[0x338]) ^ 0x23u ^ (v283
                                                                                        - ((2 * v283) & 0x2C)
                                                                                        - 106))) >> 11) ^ 0x1966119E8E4CAELL;
  unint64_t v338 = v337 - 0x58770A9C04EAC954 + (~(2 * v337) | 0xFFEE153809D592A7) + 1;
  LODWORD(v334) = *(unsigned __int8 *)(v11 + ((v315 >> 24) ^ 0xF975F8F54ALL)) ^ LODWORD(STACK[0x350]);
  LODWORD(v336) = (((((v338 >> 3) & 0xC26219A00000 ^ 0x22019200000)
                   - 0x58770A9C04EAC954
                   - ((2 * ((v338 >> 3) & 0xC26219A00000 ^ 0x22019200000)) & 0x80C432000000)) ^ v338) >> 16) ^ ((((((v336 - 0x529680973B3C75F7 - ((2 * v336) & 0x12FED189871412uLL)) >> 3) & 0x6219A0D800 ^ 0x6018805000) - 0x529680973B3C75F7 + (~(2 * (((v336 - 0x529680973B3C75F7 - ((2 * v336) & 0x12FED189871412uLL)) >> 3) & 0x6219A0D800 ^ 0x6018805000)) | 0x3FFEFEEFFFLL) + 1) ^ (v336 - 0x529680973B3C75F7 - ((2 * v336) & 0x12FED189871412))) >> 8);
  uint64_t v339 = *(void *)(v8
                   + 8
                   * (((((v334 ^ 0x8F5E4B75)
                       + ((2 * (v334 ^ 0x8B)) & 0x1FC)
                       + 1889645570
                       - (v334 ^ 0x51)) ^ 0xFFFFFFFC)
                     + (v334 ^ 0x8F5E4B75)
                     + ((2 * (v334 ^ 0x8B)) & 0x1FC)
                     + 1889645570) ^ 0xF9));
  *((void *)&v250 + 1) = v339 ^ 0x1F8;
  *(void *)&long long v250 = v339 ^ 0xCB308CF472657000;
  unint64_t v340 = (v250 >> 11) - ((2 * (v250 >> 11)) & 0xC905B878A89ADB9CLL) + 0x6482DC3C544D6DCELL;
  uint64_t v341 = *(void *)(v8
                   + 8
                   * (LODWORD(STACK[0x360]) ^ 0x23u ^ (*(unsigned char *)(v11
                                                                                                  + (v277 ^ 0xD0))
                                                                                       - ((2
                                                                                         * *(unsigned char *)(v11 + (v277 ^ 0xD0))) & 0xDA)
                                                                                       - 19)));
  *((void *)&v250 + 1) = v341 ^ 0x1F8;
  *(void *)&long long v250 = v341 ^ 0xCB308CF472657000;
  unint64_t v342 = (v250 >> 11) - 0x2F0FA90C73E3322DLL - ((2 * (v250 >> 11)) & 0xA1E0ADE718399BA6);
  LODWORD(v336) = v336 ^ (((((v342 >> 3) & 0x1BE5C26200000000 ^ 0x1A04024200000000)
                          - 0x2F0FA90C73E3322DLL
                          - ((2 * ((v342 >> 3) & 0x1BE5C26200000000 ^ 0x1A04024200000000)) & 0x21C084C400000000)) ^ v342) >> 32) ^ (((((v340 >> 3) & 0xE5C26219000000 ^ 0x80420208000000) - ((2 * ((v340 >> 3) & 0xE5C26219000000 ^ 0x80420208000000)) & 0x1804020000000) + 0x6582DC3C544D6DCELL) ^ v340) >> 24);
  LODWORD(v340) = (v336 - ((2 * v336) & 0xFD443908) + 2124553348) ^ LODWORD(STACK[0x374]);
  uint64_t v343 = (*(void *)(v8
                    + 8
                    * (LODWORD(STACK[0x354]) ^ 0x23u ^ (v321 - ((2 * v321) & 0xA6) + 83))) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v344 = *(void *)(v8
                   + 8
                   * (LODWORD(STACK[0x364]) ^ 0x23u ^ (v288 - ((2 * v288) & 0xC7) - 29)));
  *((void *)&v250 + 1) = v344 ^ 0x1F8;
  *(void *)&long long v250 = v344 ^ 0xCB308CF472657000;
  unint64_t v345 = (v250 >> 11) - 0x5708100A08672564 - ((2 * (v250 >> 11)) & 0x51EFDFEBEF31B538);
  uint64_t v346 = *(void *)(v8
                   + 8
                   * (LODWORD(STACK[0x36C]) ^ 0x23u ^ (v275
                                                                                       + (~(2 * v275) | 0x39)
                                                                                       + 100)));
  *((void *)&v250 + 1) = v346 ^ 0x1F8;
  *(void *)&long long v250 = v346 ^ 0xCB308CF472657000;
  LODWORD(v343) = (((((v345 >> 3) & 0xE5C26219000000 ^ 0x4C06218000000)
                   - 0x5708100A08672564
                   - ((2 * ((v345 >> 3) & 0xE5C26219000000 ^ 0x4C06218000000)) & 0xCB84C022000000)) ^ v345) >> 24) ^ ((((((v343 + 0x4FE7F90D2F296349 - ((2 * v343) & 0xFF21A5E52C692uLL)) >> 3) & 0xC26219A00000 ^ 0xC22001A00000) + 0x4FE7F90D2F296349 - ((2 * (((v343 + 0x4FE7F90D2F296349 - ((2 * v343) & 0xFF21A5E52C692uLL)) >> 3) & 0xC26219A00000 ^ 0xC22001A00000)) & 0x800012400000)) ^ (v343 + 0x4FE7F90D2F296349 - ((2 * v343) & 0xFF21A5E52C692))) >> 16);
  unint64_t v347 = (v250 >> 11) + 0x45FA30ECAECF1DFALL - ((2 * (v250 >> 11)) & 0x8BF461D95D9E3BF4);
  LODWORD(v343) = v343 ^ (((((v347 >> 3) & 0x1BE5C26200000000 ^ 0x8A5420000000000)
                          + 0x45FA30ECAECF1DFALL
                          - ((2 * ((v347 >> 3) & 0x1BE5C26200000000 ^ 0x8A5420000000000)) & 0x3C000C000000000)) ^ v347) >> 32);
  uint64_t v348 = (*(void *)(v8
                    + 8
                    * (LODWORD(STACK[0x34C]) ^ 0x23u ^ (*(unsigned char *)(v11 + (BYTE2(v315) ^ 0x78))
                                                                                        - ((2
                                                                                          * *(unsigned char *)(v11 + (BYTE2(v315) ^ 0x78))) & 0xF4)
                                                                                        - 6))) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v343) = v343 ^ ((((((v348 - ((2 * v348) & 0x2BDD69502C3A7EuLL) + 0x58F5EEB4A8161D3FLL) >> 3) & 0x6219A0D800 ^ 0x421100C000)
                          - ((2 * ((v348 - ((2 * v348) & 0x2BDD69502C3A7EuLL) + 0x58F5EEB4A8161D3FLL) >> 3)) & 0x4010003000)
                          + 0xB4A8161D3FLL) ^ (v348 - ((2 * v348) & 0x2BDD69502C3A7ELL) + 0x58F5EEB4A8161D3FLL)) >> 8);
  LODWORD(v343) = (v343 - ((2 * v343) & 0x3DD0303E) + 518527007) ^ LODWORD(STACK[0x368]);
  unint64_t v349 = (v272 ^ 0x1E94D1A3)
       - ((2 * (v272 ^ 0x1E94D1A3)) & 0x12CD63650)
       - 0x67E2D91A6994E4D8;
  uint64_t v350 = *(unsigned __int8 *)(v11 + (v340 ^ 0x8ELL));
  uint64_t v351 = *(unsigned __int8 *)(v11 + (v343 ^ 0x60));
  uint64_t v352 = *(unsigned __int8 *)(v11 + (BYTE2(v349) ^ 0x6BLL));
  unint64_t v353 = (v313 ^ 0x604165C6)
       - (unint64_t)((2 * (v313 ^ 0x604165C6)) & 0xCBD85E92)
       - 0x2561E0149A13D0B7;
  unint64_t v354 = (v340 ^ 0xC742818E)
       - ((2 * (v340 ^ 0xC742818E)) & 0x17F1B3546)
       - 0x6AA368194072655DLL;
  unint64_t v355 = (v343 ^ 0x8871AD60)
       - ((2 * (v343 ^ 0x8871AD60)) & 0x11C94635CLL)
       - 0x539F2CC771B5CE52;
  uint64_t v356 = *(unsigned __int8 *)(v11 + ((v355 >> 24) ^ 0xAC60D3388ELL));
  uint64_t v357 = *(unsigned __int8 *)(v11 + (v313 ^ 0xC6));
  uint64_t v358 = *(unsigned __int8 *)(v11 + ((v353 >> 24) ^ 0xDA9E1FEB65));
  uint64_t v359 = *(unsigned __int8 *)(v11 + (BYTE1(v349) ^ 0x1BLL));
  uint64_t v360 = *(unsigned __int8 *)(v11 + (BYTE2(v353) ^ 0xECLL));
  uint64_t v361 = *(unsigned __int8 *)(v11 + (BYTE2(v355) ^ 0x4ALL));
  uint64_t v362 = *(unsigned __int8 *)(v11 + (BYTE1(v355) ^ 0x31));
  uint64_t v363 = *(void *)(v8 + 8 * (*(unsigned __int8 *)(v11 + ((v349 >> 24) ^ 0x981D26E596)) ^ 0x23));
  *((void *)&v250 + 1) = v363 ^ 0x1F8;
  *(void *)&long long v250 = v363 ^ 0xCB308CF472657000;
  unint64_t v364 = (v250 >> 11) + 0x2F57D149C8FF1379 - ((2 * (v250 >> 11)) & 0x5EAFA29391FE26F2);
  uint64_t v365 = (*(void *)(v8 + 8 * (v351 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v364) = ((((((v365 - 0x1148EB57595EA181 - ((2 * v365) & 0x2E29514D42BCFEuLL)) >> 3) & 0x6219A0D800 ^ 0x10800800)
                   - 0x1148EB57595EA181
                   - ((2
                     * (((v365 - 0x1148EB57595EA181 - ((2 * v365) & 0x2E29514D42BCFEuLL)) >> 3) & 0x6219A0D800 ^ 0x10800800)) & 0x400140B000)) ^ (v365 - 0x1148EB57595EA181 - ((2 * v365) & 0x2E29514D42BCFELL))) >> 8) ^ (((((v364 >> 3) & 0x1BE5C26200000000 ^ 0x1E0C22000000000) + 0x2F57D149C8FF1379 - ((2 * ((v364 >> 3) & 0x1BE5C26200000000 ^ 0x1E0C22000000000)) & 0x168B808000000000)) ^ v364) >> 32);
  uint64_t v366 = (*(void *)(v8 + 8 * (v350 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v367 = *(void *)(v8 + 8 * (*(unsigned __int8 *)(v11 + (BYTE1(v353) ^ 0x2FLL)) ^ 0x23));
  *((void *)&v250 + 1) = v367 ^ 0x1F8;
  *(void *)&long long v250 = v367 ^ 0xCB308CF472657000;
  LODWORD(v364) = v364 ^ ((((((v366 - ((2 * v366) & 0x3D0E4EE0905ADEuLL) - 0x34178D88FB7D291) >> 3) & 0xC26219A00000 ^ 0xC06008000000)
                          - ((2
                            * (((v366 - ((2 * v366) & 0x3D0E4EE0905ADEuLL) - 0x34178D88FB7D291) >> 3) & 0xC26219A00000 ^ 0xC06008000000)) & 0x1044420000000)
                          - 0x34078D88FB7D291) ^ (v366 - ((2 * v366) & 0x3D0E4EE0905ADELL) - 0x34178D88FB7D291)) >> 16);
  unint64_t v368 = (v250 >> 11) - ((2 * (v250 >> 11)) & 0xAC6072FC5E5B5AE6) - 0x29CFC681D0D2528DLL;
  unint64_t v369 = *(void *)(v8 + 8 * (v357 ^ 0x23));
  LODWORD(v357) = v364 ^ (((((v368 >> 3) & 0xE5C26219000000 ^ 0xC4022201000000)
                          - ((2 * ((v368 >> 3) & 0xE5C26219000000 ^ 0xC4022201000000)) & 0x4000C412000000)
                          - 0x28CFC681D0D2528DLL) ^ v368) >> 24);
  uint64_t v370 = (v369 >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v371 = *(void *)(v8 + 8 * (v352 ^ 0x23));
  *((void *)&v250 + 1) = v371 ^ 0x1F8;
  *(void *)&long long v250 = v371 ^ 0xCB308CF472657000;
  unint64_t v372 = (v250 >> 11) - 0x702B296F0B1983DDLL - ((2 * (v250 >> 11)) & 0x1FA9AD21E9CCF846);
  uint64_t v373 = *(void *)(v8 + 8 * (v356 ^ 0x23));
  *((void *)&v250 + 1) = v373 ^ 0x1F8;
  *(void *)&long long v250 = v373 ^ 0xCB308CF472657000;
  LODWORD(v370) = (((((v372 >> 3) & 0xE5C26219000000 ^ 0xE0824218000000)
                   - 0x702B296F0B1983DDLL
                   - ((2 * ((v372 >> 3) & 0xE5C26219000000 ^ 0xE0824218000000)) & 0x189840020000000)) ^ v372) >> 24) ^ ((((((v370 + 0x37534C8640DAEC31 - ((2 * v370) & 0x26990C81B5D862uLL)) >> 3) & 0xC26219A00000 ^ 0x400008000000) + 0x37534C8640DAEC31 - ((2 * (((v370 + 0x37534C8640DAEC31 - ((2 * v370) & 0x26990C81B5D862uLL)) >> 3) & 0xC26219A00000 ^ 0x400008000000)) & 0x800401000000)) ^ (v370 + 0x37534C8640DAEC31 - ((2 * v370) & 0x26990C81B5D862))) >> 16);
  unint64_t v374 = (v250 >> 11) + 0x66D4F4A8DA887222 - ((2 * (v250 >> 11)) & 0xCDA9E951B510E444);
  LODWORD(v370) = v370 ^ (((((v374 >> 3) & 0x1BE5C26200000000 ^ 0x8C0820000000000)
                          + 0x66D4F4A8DA887222
                          - ((2 * ((v374 >> 3) & 0x1BE5C26200000000 ^ 0x8C0820000000000)) & 0x589804000000000)) ^ v374) >> 32);
  uint64_t v375 = (*(void *)(v8 + 8 * (*(unsigned __int8 *)(v11 + ((v354 >> 24) ^ 0x955C97E6BFLL)) ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v376 = *(void *)(v8 + 8 * (*(unsigned __int8 *)(v11 + (BYTE2(v354) ^ 0x8DLL)) ^ 0x23));
  LODWORD(v284) = v370 ^ ((((((v375 - ((2 * v375) & 0xC669775D3E5AAuLL) - 0x48B9CCB445160D2BLL) >> 3) & 0x6219A0D800 ^ 0x6011001800)
                          - ((2
                            * (((v375 - ((2 * v375) & 0xC669775D3E5AAuLL) - 0x48B9CCB445160D2BLL) >> 3) & 0x6219A0D800 ^ 0x6011001800)) & 0x843141A000)
                          - 0x48B9CBB445160D2BLL) ^ (v375 - ((2 * v375) & 0xC669775D3E5AALL) - 0x48B9CCB445160D2BLL)) >> 8);
  *((void *)&v250 + 1) = v376 ^ 0x1F8;
  *(void *)&long long v250 = v376 ^ 0xCB308CF472657000;
  unint64_t v377 = (v250 >> 11) + 0x287F63EE3FA58DA6 - ((2 * (v250 >> 11)) & 0x50FEC7DC7F4B1B4CLL);
  uint64_t v378 = *(void *)(v8 + 8 * (v358 ^ 0x23));
  *((void *)&v250 + 1) = v378 ^ 0x1F8;
  *(void *)&long long v250 = v378 ^ 0xCB308CF472657000;
  unint64_t v379 = (v250 >> 11) - 0x40D193C115B85D77 - ((2 * (v250 >> 11)) & 0x7E5CD87DD48F4512);
  uint64_t v380 = (*(void *)(v8 + 8 * (v359 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v377) = (((((v379 >> 3) & 0x1BE5C26200000000 ^ 0x13E5C00200000000)
                   - 0x40D193C115B85D77
                   - ((2 * ((v379 >> 3) & 0x1BE5C26200000000 ^ 0x13E5C00200000000)) & 0x3648804400000000)) ^ v379) >> 32) ^ (((((v377 >> 3) & 0xE5C26219000000 ^ 0x5C06001000000) + 0x287F63EE3FA58DA6 - ((2 * ((v377 >> 3) & 0xE5C26219000000 ^ 0x5C06001000000)) & 0xCA84C432000000)) ^ v377) >> 24) ^ ((((((v380 - ((2 * v380) & 0x2F67EC1B198CF8uLL) + 0x6BF7B3F60D8CC67CLL) >> 3) & 0x6219A0D800 ^ 0x6201A09800) - ((2 * (((v380 - ((2 * v380) & 0x2F67EC1B198CF8uLL) + 0x6BF7B3F60D8CC67CLL) >> 3) & 0x6219A0D800 ^ 0x6201A09800)) & 0xC413018000) + 0x6BF7B4F60D8CC67CLL) ^ (v380 - ((2 * v380) & 0x2F67EC1B198CF8) + 0x6BF7B3F60D8CC67CLL)) >> 8);
  uint64_t v381 = (*(void *)(v8 + 8 * (v361 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v359) = v377 ^ ((((((v381 - ((2 * v381) & 0x2F1640A7923C94uLL) - 0x96874DFAC36E1B6) >> 3) & 0xC26219A00000 ^ 0xC06008200000)
                          - ((2
                            * (((v381 - ((2 * v381) & 0x2F1640A7923C94uLL) - 0x96874DFAC36E1B6) >> 3) & 0xC26219A00000 ^ 0xC06008200000)) & 0x1044023000000)
                          - 0x96774DFAC36E1B6) ^ (v381 - ((2 * v381) & 0x2F1640A7923C94) - 0x96874DFAC36E1B6)) >> 16);
  uint64_t v382 = *(void *)(v8 + 8 * (v362 ^ 0x23));
  *((void *)&v250 + 1) = v382 ^ 0x1F8;
  *(void *)&long long v250 = v382 ^ 0xCB308CF472657000;
  unint64_t v383 = (v250 >> 11) - 0x29B1BFDBC4EF4F26 - ((2 * (v250 >> 11)) & 0xAC9C8048762161B4);
  uint64_t v384 = (*(void *)(v8 + 8 * (*(unsigned __int8 *)(v11 + (BYTE1(v354) ^ 0x9ALL)) ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v383) = ((((((v384 - 0x5E961FF9C0D6EC29 - ((2 * v384) & 0x13C00C7E5227AEuLL)) >> 3) & 0x6219A0D800 ^ 0x1A00000)
                   - 0x5E961FF9C0D6EC29
                   - ((2
                     * (((v384 - 0x5E961FF9C0D6EC29 - ((2 * v384) & 0x13C00C7E5227AEuLL)) >> 3) & 0x6219A0D800 ^ 0x1A00000)) & 0x432402000)) ^ (v384 - 0x5E961FF9C0D6EC29 - ((2 * v384) & 0x13C00C7E5227AELL))) >> 8) ^ (((((v383 >> 3) & 0x1BE5C26200000000 ^ 0x1AC1C00000000000) - 0x29B1BFDBC4EF4F26 - ((2 * ((v383 >> 3) & 0x1BE5C26200000000 ^ 0x1AC1C00000000000)) & 0x2488804000000000)) ^ v383) >> 32);
  uint64_t v385 = (*(void *)(v8 + 8 * (v360 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v383) = v383 ^ ((((((v385 - ((2 * v385) & 0xB32B25CA6DA6EuLL) - 0x4DDA66A6D1AC92C9) >> 3) & 0xC26219A00000 ^ 0x822201800000)
                          - ((2
                            * (((v385 - ((2 * v385) & 0xB32B25CA6DA6EuLL) - 0x4DDA66A6D1AC92C9) >> 3) & 0xC26219A00000 ^ 0x822201800000)) & 0x1008010000000)
                          - 0x4DD966A6D1AC92C9) ^ (v385 - ((2 * v385) & 0xB32B25CA6DA6ELL) - 0x4DDA66A6D1AC92C9)) >> 16);
  uint64_t v386 = *(void *)(v8 + 8 * (*(unsigned __int8 *)(v11 + (v272 ^ 0xA3)) ^ 0x23));
  *((void *)&v250 + 1) = v386 ^ 0x1F8;
  *(void *)&long long v250 = v386 ^ 0xCB308CF472657000;
  unint64_t v387 = (v250 >> 11) - ((2 * (v250 >> 11)) & 0x4A427A23F8EBA71ELL) + 0x25213D11FC75D38FLL;
  LODWORD(v387) = v383 ^ (((((v387 >> 3) & 0xE5C26219000000 ^ 0xA4022219000000)
                          - ((2 * ((v387 >> 3) & 0xE5C26219000000 ^ 0xA4022219000000)) & 0x42000030000000)
                          + 0x26213D11FC75D38FLL) ^ v387) >> 24);
  unint64_t v388 = (v359 ^ 0xA898372CLL)
       - 2 * ((v359 ^ 0xA898372CLL) & 0x8DBF2C1FLL ^ v359 & 3)
       + 0x6390641D8DBF2C1CLL;
  uint64_t v389 = *(unsigned __int8 *)(v11
                            + (((unint64_t)((v359 ^ 0xA898372C)
                                                                  - 2
                                                                  * ((v359 ^ 0xA898372C) & 0x8DBF2C1F ^ v359 & 3)
                                                                  - 1916851172) >> 16) ^ 0xBFLL));
  uint64_t v390 = *(unsigned __int8 *)(v11
                            + ((((v387 ^ 0x74A45B82)
                                                - 2 * ((v387 ^ 0x74A45B82) & 0xD677CBBF ^ v387 & 0x1C)
                                                - 696792157) >> 16) ^ 0x77));
  unint64_t v391 = (v284 ^ 0xE6BBF021)
       - ((2 * (v284 ^ 0xE6BBF021)) & 0x1D8A1117ELL)
       + 0x72B1CE76EC5088BFLL;
  uint64_t v392 = *(unsigned __int8 *)(v11
                            + ((((v284 ^ 0xE6BBF021)
                                                - ((2 * (v284 ^ 0xE6BBF021)) & 0xD8A1117E)
                                                - 330266433) >> 16) ^ 0x50));
  uint64_t v393 = *(unsigned __int8 *)(v11
                            + (((unsigned __int16)((v284 ^ 0xF021)
                                                                  - ((2 * (v284 ^ 0xF021)) & 0x117E)
                                                                  - 30529) >> 8) ^ 0x88));
  uint64_t v394 = *(unsigned __int8 *)(v11
                            + (((unsigned __int16)((v387 ^ 0x5B82)
                                                                  - 2 * ((v387 ^ 0x5B82) & 0xCBBF ^ v387 & 0x1C)
                                                                  - 13405) >> 8) ^ 0xCBLL));
  uint64_t v395 = *(unsigned __int8 *)(v11 + (v284 ^ 0x21));
  uint64_t v396 = *(unsigned __int8 *)(v11
                            + ((((v357 ^ 0x35AACF2C)
                                                + 2123660233
                                                + (~(2 * (v357 ^ 0x35AACF2C)) | 0x2D7086F)) >> 16) ^ 0x94));
  uint64_t v397 = *(unsigned __int8 *)(v11 + (v359 ^ 0x2CLL));
  uint64_t v398 = *(unsigned __int8 *)(v11
                            + (((unsigned __int16)((v359 ^ 0x372C)
                                                                  - 2 * ((v359 ^ 0x372C) & 0x2C1F ^ v359 & 3)
                                                                  + 11292) >> 8) ^ 0x2CLL));
  uint64_t v399 = *(unsigned __int8 *)(v11
                            + (((unsigned __int16)((v357 ^ 0xCF2C)
                                                                  + 31689
                                                                  + (~(2 * (v357 ^ 0xCF2C)) | 0x86F)) >> 8) ^ 0x7BLL));
  uint64_t v400 = *(unsigned __int8 *)(v11
                            + ((((v387 ^ 0x74A45B82)
                               - 2 * ((v387 ^ 0x74A45B82) & 0xD677CBBFLL ^ v387 & 0x1C)
                               + 0x30C8EA66D677CBA3) >> 24) ^ 0x30C8EA66D6));
  uint64_t v401 = *(unsigned __int8 *)(v11 + (v357 ^ 0x2CLL));
  uint64_t v402 = *(unsigned __int8 *)(v11 + (v387 ^ 0x82));
  uint64_t v403 = *(unsigned __int8 *)(v11
                            + ((((v357 ^ 0x35AACF2CLL)
                               + 0x7E512DAE7E947BC9
                               + (~(2 * (v357 ^ 0x35AACF2C)) | 0xFFFFFFFF02D7086FLL)) >> 24) ^ 0x7E512DAE7ELL)) ^ 0x23;
  uint64_t v404 = *(unsigned __int8 *)(v11 + ((v388 >> 24) ^ 0x6390641D8DLL));
  unint64_t v405 = *(void *)(v8 + 8 * v403);
  unint64_t v406 = *(unsigned __int8 *)(v11 + ((v391 >> 24) ^ 0x72B1CE76ECLL));
  STACK[0x5B0] = v406;
  unint64_t v407 = ((v405 >> 11) ^ 0x1966119E8E4CAELL)
       + 0x4AB9265171EE95DFLL
       - ((2 * ((v405 >> 11) ^ 0x1966119E8E4CAELL)) & 0x324CA2E3DD2BBELL);
  uint64_t v408 = (*(void *)(v8 + 8 * (v390 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  unint64_t v409 = ((((((v408 + 0x660DEF19888C9F51 - ((2 * v408) & 0x1BDE3311193EA2uLL)) >> 3) & 0xC26219A00000 ^ 0x806211000000)
          + 0x660DEF19888C9F51
          - ((2
            * (((v408 + 0x660DEF19888C9F51 - ((2 * v408) & 0x1BDE3311193EA2uLL)) >> 3) & 0xC26219A00000 ^ 0x806211000000)) & 0x1840011000000)) ^ (v408 + 0x660DEF19888C9F51 - ((2 * v408) & 0x1BDE3311193EA2))) >> 16) ^ (((((v407 >> 3) & 0x6219A0D800 ^ 0x420820D000) + 0x4AB9265171EE95DFLL - ((2 * ((v407 >> 3) & 0x6219A0D800 ^ 0x420820D000)) & 0x8023412000)) ^ v407) >> 8);
  uint64_t v410 = *(void *)(v8 + 8 * (v389 ^ 0x23));
  *((void *)&v250 + 1) = v410 ^ 0x1F8;
  *(void *)&long long v250 = v410 ^ 0xCB308CF472657000;
  unint64_t v411 = (v250 >> 11) - ((2 * (v250 >> 11)) & 0x13F2D397C2F02FCALL) + 0x9F969CBE17817E5;
  unint64_t v412 = v409 ^ (((((v411 >> 3) & 0xE5C26219000000 ^ 0x25002018000000)
                 - ((2 * ((v411 >> 3) & 0xE5C26219000000 ^ 0x25002018000000)) & 0x1C2808402000000)
                 + 0xAF969CBE17817E5) ^ v411) >> 24);
  uint64_t v413 = *(void *)(v8 + 8 * (v392 ^ 0x23));
  *((void *)&v250 + 1) = v413 ^ 0x1F8;
  *(void *)&long long v250 = v413 ^ 0xCB308CF472657000;
  unint64_t v414 = (v250 >> 11) + 0x37079A3B3DA53DDDLL - ((2 * (v250 >> 11)) & 0x6E0F34767B4A7BBALL);
  unint64_t v415 = v412 ^ (((((v414 >> 3) & 0x1BE5C26200000000 ^ 0x2E0C24200000000)
                 + 0x37079A3B3DA53DDDLL
                 - ((2 * ((v414 >> 3) & 0x1BE5C26200000000 ^ 0x2E0C24200000000)) & 0x260B044400000000)) ^ v414) >> 32);
  uint64_t v416 = (*(void *)(v8 + 8 * (v393 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v417 = (*(void *)(v8 + 8 * (v396 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v418 = *(void *)(v8 + 8 * (v394 ^ 0x23));
  *((void *)&v250 + 1) = v418 ^ 0x1F8;
  *(void *)&long long v250 = v418 ^ 0xCB308CF472657000;
  unint64_t v419 = (v250 >> 11) - ((2 * (v250 >> 11)) & 0xF0693F227123291ALL) - 0x7CB606EC76E6B73;
  LODWORD(v416) = ((((((v416 + 0x5150EE96D61D0FBBLL - ((2 * v416) & 0x21DD2DAC3A1F76uLL)) >> 3) & 0x6219A0D800 ^ 0x4218808000)
                   + 0x5150EE96D61D0FBBLL
                   - ((2
                     * (((v416 + 0x5150EE96D61D0FBBLL - ((2 * v416) & 0x21DD2DAC3A1F76uLL)) >> 3) & 0x6219A0D800 ^ 0x4218808000)) & 0x420001000)) ^ (v416 + 0x5150EE96D61D0FBBLL - ((2 * v416) & 0x21DD2DAC3A1F76))) >> 8) ^ (((((v417 - ((2 * v417) & 0x243A462BB169DCuLL) + 0x5BF21D2315D8B4EELL) >> 3) & 0xC20210A00000 ^ (v417 - ((2 * v417) & 0x243A462BB169DCLL) + 0x5BF21D2315D8B4EELL) & 0xF61730F40000 | ((v417 - ((2 * v417) & 0x243A462BB169DCuLL) + 0x5BF21D2315D8B4EELL) >> 3) & 0x6009000000) ^ (v417 - ((2 * v417) & 0x243A462BB169DCLL) + 0x5BF21D2315D8B4EELL) & 0x9E8CF0B0000) >> 16);
  uint64_t v420 = *(void *)(v8 + 8 * (v398 ^ 0x23));
  *((void *)&v250 + 1) = v420 ^ 0x1F8;
  *(void *)&long long v250 = v420 ^ 0xCB308CF472657000;
  unint64_t v421 = (v250 >> 11) - 0x76B646C771007CD8 - ((2 * (v250 >> 11)) & 0x129372711DFF0650);
  LODWORD(v394) = v416 ^ (((((v419 >> 3) & 0xE5C26219000000 ^ 0x4826201000000)
                          - ((2 * ((v419 >> 3) & 0xE5C26219000000 ^ 0x4826201000000)) & 0x49040030000000)
                          - 0x6CB606EC76E6B73) ^ v419) >> 24) ^ (((((v421 >> 3) & 0x1BE5C26200000000 ^ 0x1121022200000000)
                                                                   - 0x76B646C771007CD8
                                                                   - ((2
                                                                     * ((v421 >> 3) & 0x1BE5C26200000000 ^ 0x1121022200000000)) & 0x1283004000000000)) ^ v421) >> 32);
  uint64_t v422 = *(void *)(v8 + 8 * (v397 ^ 0x23));
  *((void *)&v250 + 1) = v422 ^ 0x1F8;
  *(void *)&long long v250 = v422 ^ 0xCB308CF472657000;
  unint64_t v423 = (v250 >> 11) - 0x1F448EC19A8DE73FLL - ((2 * (v250 >> 11)) & 0xC176E27CCAE43182);
  uint64_t v424 = *(void *)(v8 + 8 * (v395 ^ 0x23));
  *((void *)&v250 + 1) = v424 ^ 0x1F8;
  *(void *)&long long v250 = v424 ^ 0xCB308CF472657000;
  unint64_t v425 = (v250 >> 11) - 0x584D000035BC58E9 - ((2 * (v250 >> 11)) & 0x4F65FFFF94874E2ELL);
  uint64_t v426 = (*(void *)(v8 + 8 * (v399 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  unint64_t v427 = (((((v425 >> 3) & 0x1BE5C26200000000 ^ 0x10E4426200000000)
          - 0x584D000035BC58E9
          - ((2 * ((v425 >> 3) & 0x1BE5C26200000000 ^ 0x10E4426200000000)) & 0x74184C400000000)) ^ v425) >> 32) ^ (((((v423 >> 3) & 0xE5C26219000000 ^ 0x5422208000000) - 0x1F448EC19A8DE73FLL - ((2 * ((v423 >> 3) & 0xE5C26219000000 ^ 0x5422208000000)) & 0x142804402000000)) ^ v423) >> 24) ^ ((((((v426 - ((2 * v426) & 0x2A3D9C31BDFE3CuLL) + 0x32151ECE18DEFF1ELL) >> 3) & 0x6219A0D800 ^ 0x400100D800) - ((2 * (((v426 - ((2 * v426) & 0x2A3D9C31BDFE3CuLL) + 0x32151ECE18DEFF1ELL) >> 3) & 0x6219A0D800 ^ 0x400100D800)) & 0x843101B000) + 0x32151FCE18DEFF1ELL) ^ (v426 - ((2 * v426) & 0x2A3D9C31BDFE3CLL) + 0x32151ECE18DEFF1ELL)) >> 8);
  uint64_t v428 = (*(void *)(v8 + 8 * (v402 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  unint64_t v429 = *(void *)(v8 + 8 * (v400 ^ 0x23));
  unint64_t v430 = v427 ^ ((((((v428 - ((2 * v428) & 0x2280DBA2E721A2uLL) + 0xD51406DD17390D1) >> 3) & 0xC26219A00000 ^ 0x18200000)
                 - ((2
                   * (((v428 - ((2 * v428) & 0x2280DBA2E721A2uLL) + 0xD51406DD17390D1) >> 3) & 0xC26219A00000 ^ 0x18200000)) & 0x80C022400000)
                 + 0xD52406DD17390D1) ^ (v428 - ((2 * v428) & 0x2280DBA2E721A2) + 0xD51406DD17390D1)) >> 16);
  unint64_t v431 = ((v429 >> 11) ^ 0x1966119E8E4CAELL)
       - 0x1E549697E8CEBDDDLL
       - ((2 * ((v429 >> 11) ^ 0x1966119E8E4CAELL)) & 0x16D2D02E628446);
  uint64_t v432 = *(void *)(v8 + 8 * (v404 ^ 0x23));
  *((void *)&v250 + 1) = v432 ^ 0x1F8;
  *(void *)&long long v250 = v432 ^ 0xCB308CF472657000;
  unint64_t v433 = (v250 >> 11) - 0x1E000042306FBAD0 - ((2 * (v250 >> 11)) & 0xC3FFFF7B9F208A60);
  uint64_t v434 = *(void *)(v8 + 8 * (v406 ^ 0x23));
  *((void *)&v250 + 1) = v434 ^ 0x1F8;
  *(void *)&long long v250 = v434 ^ 0xCB308CF472657000;
  unint64_t v435 = (v250 >> 11) - 0x5576C0CC494DFE54 - ((2 * (v250 >> 11)) & 0x55127E676D640358);
  LODWORD(v431) = (*(void *)(v8 + 8 * (v401 ^ 0x23)) >> 22) & 0x6219A0D8 ^ (*(void *)(v8 + 8 * (v401 ^ 0x23)) >> 19) ^ (((((v431 >> 3) & 0xC26219A00000 ^ 0x402000A00000) - 0x1E549697E8CEBDDDLL - ((2 * ((v431 >> 3) & 0xC26219A00000 ^ 0x402000A00000)) & 0x80C022400000)) ^ v431) >> 16) ^ (((((v433 >> 3) & 0xE5C26219000000 ^ 0x25C26219000000) - 0x1E000042306FBAD0 - ((2 * ((v433 >> 3) & 0xE5C26219000000 ^ 0x25C26219000000)) & 0x1CB844012000000)) ^ v433) >> 24) ^ (((((v435 >> 3) & 0x1BE5C26200000000 ^ 0x1141026200000000) - 0x5576C0CC494DFE54 - ((2 * ((v435 >> 3) & 0x1BE5C26200000000 ^ 0x1141026200000000)) & 0x1502044400000000)) ^ v435) >> 32);
  uint64_t v436 = *(unsigned __int8 *)(v11 + (BYTE2(v430) ^ 0x59));
  uint64_t v437 = *(unsigned __int8 *)(v11 + (v431 ^ 0x63));
  unint64_t v438 = (v431 ^ 0xEABE6663)
       - ((2 * (v431 ^ 0xEABE6663)) & 0xFE67B5BE)
       + 0x5C4B94977F33DADFLL;
  uint64_t v439 = *(unsigned __int8 *)(v11 + ((v438 >> 24) ^ 0x5C4B94977FLL));
  uint64_t v440 = *(unsigned __int8 *)(v11
                            + (((unsigned __int16)((v430 ^ 0x5146)
                                                                  - ((2 * (v430 ^ 0x5146)) & 0xCF58)
                                                                  - 6228) >> 8) ^ 0xE7));
  uint64_t v441 = *(unsigned __int8 *)(v11 + (v430 ^ 0x46));
  uint64_t v442 = *(unsigned __int8 *)(v11
                            + (((unsigned __int16)((v394 ^ 0x7254)
                                                                  - ((2 * (v394 ^ 0x7254)) & 0x854E)
                                                                  + 17063) >> 8) ^ 0x42));
  unint64_t v443 = (((v430 ^ 0x24595146)
         - ((2 * (v430 ^ 0x24595146)) & 0x18881CF58uLL)
         - 0xF77D6E43BBF1854) >> 24) ^ 0xF088291BC4;
  uint64_t v444 = *(unsigned __int8 *)(v11 + (BYTE1(v438) ^ 0xDALL));
  uint64_t v445 = *(unsigned __int8 *)(v11 + (BYTE2(v438) ^ 0x33));
  uint64_t v446 = *(unsigned __int8 *)(v11 + (v394 ^ 0x54));
  uint64_t v447 = *(void *)(v8
                   + 8
                   * (*(unsigned __int8 *)(v11
                                         + ((((v415 ^ 0x3A1B039C)
                                                             - ((2 * (v415 ^ 0x3A1B039C)) & 0xE236CB3E)
                                                             - 249862753) >> 16) ^ 0x1BLL)) ^ 0x23));
  *((void *)&v250 + 1) = v447 ^ 0x1F8;
  *(void *)&long long v250 = v447 ^ 0xCB308CF472657000;
  unint64_t v448 = (v250 >> 11) - 0x54AACFBD57D617A8 - ((2 * (v250 >> 11)) & 0x56AA60855053D0B0);
  uint64_t v449 = (*(void *)(v8 + 8 * (v437 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v448) = ((((((v449 + 0x6816C1BC63A74FCFLL - ((2 * v449) & 0x2D8378C74E9F9EuLL)) >> 3) & 0x6219A0D800 ^ 0x220820C800)
                   + 0x6816C1BC63A74FCFLL
                   - ((2
                     * (((v449 + 0x6816C1BC63A74FCFLL - ((2 * v449) & 0x2D8378C74E9F9EuLL)) >> 3) & 0x6219A0D800 ^ 0x220820C800)) & 0x4003409000)) ^ (v449 + 0x6816C1BC63A74FCFLL - ((2 * v449) & 0x2D8378C74E9F9ELL))) >> 8) ^ (((((v448 >> 3) & 0x1BE5C26200000000 ^ 0x1160820000000000) - 0x54AACFBD57D617A8 - ((2 * ((v448 >> 3) & 0x1BE5C26200000000 ^ 0x1160820000000000)) & 0x168A008400000000)) ^ v448) >> 32);
  uint64_t v450 = (*(void *)(v8 + 8 * (v436 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v451 = *(void *)(v8
                   + 8
                   * (*(unsigned __int8 *)(v11
                                         + ((((v394 ^ 0x2E8A7254)
                                            - ((2 * (v394 ^ 0x2E8A7254)) & 0x13500854EuLL)
                                            + 0x494C3C4C9A8042A7) >> 24) ^ 0x494C3C4C9ALL)) ^ 0x23));
  *((void *)&v250 + 1) = v451 ^ 0x1F8;
  *(void *)&long long v250 = v451 ^ 0xCB308CF472657000;
  unint64_t v452 = (v250 >> 11) - ((2 * (v250 >> 11)) & 0xFAB700DA52AE4A5CLL) + 0x7D5B806D2957252ELL;
  LODWORD(v448) = v448 ^ ((((((v450 - ((2 * v450) & 0x2209D358BFCB8AuLL) + 0x305104E9AC5FE5C5) >> 3) & 0xC26219A00000 ^ 0x11800000)
                          - (((v450 - ((2 * v450) & 0x2209D358BFCB8AuLL) + 0x305104E9AC5FE5C5) >> 2) & 0xC010000000)
                          + 0x305204E9AC5FE5C5) ^ (v450 - ((2 * v450) & 0x2209D358BFCB8ALL) + 0x305104E9AC5FE5C5)) >> 16);
  unint64_t v453 = (((v452 >> 3) & 0xE5C26219000000 ^ 0xA1400001000000)
        - ((2 * ((v452 >> 3) & 0xE5C26219000000 ^ 0xA1400001000000)) & 0x8300C012000000)
        + 0x7E5B806D2957252ELL) ^ v452;
  uint64_t v454 = *(void *)(v8
                   + 8
                   * (*(unsigned __int8 *)(v11
                                         + ((((v394 ^ 0x2E8A7254)
                                                             - ((2 * (v394 ^ 0x2E8A7254)) & 0x3500854E)
                                                             - 1702870361) >> 16) ^ 0x80)) ^ 0x23));
  LODWORD(v399) = v448 ^ (v453 >> 24);
  *((void *)&v250 + 1) = v454 ^ 0x1F8;
  *(void *)&long long v250 = v454 ^ 0xCB308CF472657000;
  unint64_t v455 = (v250 >> 11) + 0x4D9A31BAFB6AF40DLL - ((2 * (v250 >> 11)) & 0x9B346375F6D5E81ALL);
  uint64_t v456 = *(void *)(v8 + 8 * (*(unsigned __int8 *)(v11 + (BYTE1(v415) ^ 3)) ^ 0x23));
  *((void *)&v250 + 1) = v456 ^ 0x1F8;
  *(void *)&long long v250 = v456 ^ 0xCB308CF472657000;
  unint64_t v457 = (v250 >> 11) + 0x483C323F060EAD83 - ((2 * (v250 >> 11)) & 0x9078647E0C1D5B06);
  uint64_t v458 = (*(void *)(v8 + 8 * (v439 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v455) = (((((v457 >> 3) & 0x1BE5C26200000000 ^ 0x905824200000000)
                   + 0x483C323F060EAD83
                   - ((2 * ((v457 >> 3) & 0x1BE5C26200000000 ^ 0x905824200000000)) & 0x1048044400000000)) ^ v457) >> 32) ^ (((((v455 >> 3) & 0xE5C26219000000 ^ 0xA1422219000000) + 0x4D9A31BAFB6AF40DLL - ((2 * ((v455 >> 3) & 0xE5C26219000000 ^ 0xA1422219000000)) & 0x100004432000000)) ^ v455) >> 24);
  uint64_t v459 = (*(void *)(v8 + 8 * (v440 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v394) = v455 ^ ((((((v458 - ((2 * v458) & 0x13B97B26EE8D0CuLL) + 0x2529DCBD93774686) >> 3) & 0x6219A0D800 ^ 0x21020C800)
                          - ((2
                            * (((v458 - ((2 * v458) & 0x13B97B26EE8D0CuLL) + 0x2529DCBD93774686) >> 3) & 0x6219A0D800 ^ 0x21020C800)) & 0x4022408000)
                          + 0x2529DDBD93774686) ^ (v458 - ((2 * v458) & 0x13B97B26EE8D0CLL) + 0x2529DCBD93774686)) >> 8) ^ ((((((v459 - ((2 * v459) & 0x36B64FE24CF728uLL) - 0x50E4A4D80ED9846CLL) >> 3) & 0xC26219A00000 ^ 0x426018200000) - ((2 * (((v459 - ((2 * v459) & 0x36B64FE24CF728uLL) - 0x50E4A4D80ED9846CLL) >> 3) & 0xC26219A00000 ^ 0x426018200000)) & 0x844422400000) - 0x50E3A4D80ED9846CLL) ^ (v459 - ((2 * v459) & 0x36B64FE24CF728) - 0x50E4A4D80ED9846CLL)) >> 16);
  uint64_t v460 = *(void *)(v8 + 8 * (v441 ^ 0x23));
  *((void *)&v250 + 1) = v460 ^ 0x1F8;
  *(void *)&long long v250 = v460 ^ 0xCB308CF472657000;
  unint64_t v461 = (v250 >> 11) + 0x5E57046FD87C9472 - ((2 * (v250 >> 11)) & 0xBCAE08DFB0F928E4);
  uint64_t v462 = *(void *)(v8 + 8 * (v442 ^ 0x23));
  *((void *)&v250 + 1) = v462 ^ 0x1F8;
  *(void *)&long long v250 = v462 ^ 0xCB308CF472657000;
  unint64_t v463 = (v250 >> 11) - 0x15B1F6A0E411E96FLL - ((2 * (v250 >> 11)) & 0xD49C12BE37DC2D22);
  LODWORD(v461) = (((((v463 >> 3) & 0x1BE5C26200000000 ^ 0x1941C02200000000)
                   - 0x15B1F6A0E411E96FLL
                   - ((2 * ((v463 >> 3) & 0x1BE5C26200000000 ^ 0x1941C02200000000)) & 0x1488008400000000)) ^ v463) >> 32) ^ (((((v461 >> 3) & 0xE5C26219000000 ^ 0xC0C00019000000) + 0x5E57046FD87C9472 - ((2 * ((v461 >> 3) & 0xE5C26219000000 ^ 0xC0C00019000000)) & 0x8A00C430000000)) ^ v461) >> 24);
  uint64_t v464 = (*(void *)(v8 + 8 * (*(unsigned __int8 *)(v11 + (v415 ^ 0x9CLL)) ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v461) = v461 ^ ((((((v464 - ((2 * v464) & 0x3E86CE7536EFF6uLL) - 0x6360BC98C5648805) >> 3) & 0x6219A0D800 ^ 0x6001004800)
                          - ((2
                            * (((v464 - ((2 * v464) & 0x3E86CE7536EFF6uLL) - 0x6360BC98C5648805) >> 3) & 0x6219A0D800 ^ 0x6001004800)) & 0xC43100A000)
                          - 0x6360BB98C5648805) ^ (v464 - ((2 * v464) & 0x3E86CE7536EFF6) - 0x6360BC98C5648805)) >> 8);
  uint64_t v465 = (*(void *)(v8 + 8 * (v445 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v466 = *(void *)(v8 + 8 * (v444 ^ 0x23));
  *((void *)&v250 + 1) = v466 ^ 0x1F8;
  *(void *)&long long v250 = v466 ^ 0xCB308CF472657000;
  LODWORD(v444) = v461 ^ ((((((v465 - ((2 * v465) & 0x3A5D69867266C6uLL) + 0x22FD2EB4C3393363) >> 3) & 0xC26219A00000 ^ 0x804218200000)
                          - ((2
                            * (((v465 - ((2 * v465) & 0x3A5D69867266C6uLL) + 0x22FD2EB4C3393363) >> 3) & 0xC26219A00000 ^ 0x804218200000)) & 0x44002400000)
                          + 0x22FE2EB4C3393363) ^ (v465 - ((2 * v465) & 0x3A5D69867266C6) + 0x22FD2EB4C3393363)) >> 16);
  unint64_t v467 = (v250 >> 11) - 0x49C80F5F6E475797 - ((2 * (v250 >> 11)) & 0x6C6FE141237150D2);
  uint64_t v468 = *(void *)(v8 + 8 * (*(unsigned __int8 *)(v11 + v443) ^ 0x23));
  *((void *)&v250 + 1) = v468 ^ 0x1F8;
  *(void *)&long long v250 = v468 ^ 0xCB308CF472657000;
  unint64_t v469 = (v250 >> 11) - 0x219708E965D43F29 + (~(2 * (v250 >> 11)) | 0x432E11D2CBA87E51) + 1;
  LODWORD(v467) = (((((v469 >> 3) & 0x1BE5C26200000000 ^ 0x1BC5026200000000)
                   - 0x219708E965D43F29
                   - ((2 * ((v469 >> 3) & 0x1BE5C26200000000 ^ 0x1BC5026200000000)) & 0x34C1840400000000)) ^ v469) >> 32) ^ (((((v467 >> 3) & 0xE5C26219000000 ^ 0xC4C20010000000) - 0x49C80F5F6E475797 - ((2 * ((v467 >> 3) & 0xE5C26219000000 ^ 0xC4C20010000000)) & 0x4B804022000000)) ^ v467) >> 24);
  uint64_t v470 = (*(void *)(v8 + 8 * (v446 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v467) = v467 ^ ((((((v470 - ((2 * v470) & 0xFC752D49B1B6CuLL) + 0x2507E3A96A4D8DB6) >> 3) & 0x6219A0D800 ^ 0x6009009000)
                          - ((2
                            * (((v470 - ((2 * v470) & 0xFC752D49B1B6CuLL) + 0x2507E3A96A4D8DB6) >> 3) & 0x6219A0D800 ^ 0x6009009000)) & 0x4010011000)
                          + 0x2507E4A96A4D8DB6) ^ (v470 - ((2 * v470) & 0xFC752D49B1B6CLL) + 0x2507E3A96A4D8DB6)) >> 8);
  uint64_t v471 = (*(void *)(v8
                    + 8
                    * (*(unsigned __int8 *)(v11
                                          + ((((v415 ^ 0x3A1B039CLL)
                                             - ((2 * (v415 ^ 0x3A1B039CLL)) & 0x1E236CB3EuLL)
                                             + 0x547D6F4BF11B659FLL) >> 24) ^ 0x547D6F4BF1)) ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v471) = v467 ^ ((((((v471 - ((2 * v471) & 0xD97709100715EuLL) - 0x993447B77FC751) >> 3) & 0xC26219A00000 ^ 0xC06209000000)
                          - ((2
                            * (((v471 - ((2 * v471) & 0xD97709100715EuLL) - 0x993447B77FC751) >> 3) & 0xC26219A00000 ^ 0xC06209000000)) & 0x1844011000000)
                          - 0x983447B77FC751) ^ (v471 - ((2 * v471) & 0xD97709100715ELL) - 0x993447B77FC751)) >> 16);
  uint64_t v472 = *(unsigned __int8 *)(v11
                            + ((((v471 ^ 0xA7A3DCC3)
                               - 2 * ((v471 ^ 0xA7A3DCC3) & 0x386990F4 ^ (unint64_t)(v471 & 4))
                               - 0x3E9FD26BC7966F10) >> 24) ^ 0xC1602D9438));
  uint64_t v473 = *(unsigned __int8 *)(v11
                            + (((unsigned __int16)((v394 ^ 0x61AA)
                                                                  - ((2 * (v394 ^ 0x61AA)) & 0x5528)
                                                                  - 21868) >> 8) ^ 0xAALL));
  uint64_t v474 = *(unsigned __int8 *)(v11
                            + ((((v444 ^ 0xFAB8F296)
                                                - ((2 * (v444 ^ 0xFAB8F296)) & 0xE2FBB11A)
                                                - 243410803) >> 16) ^ 0x7DLL));
  uint64_t v475 = *(unsigned __int8 *)(v11
                            + (((unint64_t)((v399 ^ 0x8E4D801F)
                                                                  - 2
                                                                  * ((v399 ^ 0x8E4D801F) & 0xCD026A33 ^ v399 & 0x20)
                                                                  - 855479789) >> 16) ^ 2));
  uint64_t v476 = *(unsigned __int8 *)(v11 + (v394 ^ 0xAALL));
  uint64_t v477 = *(unsigned __int8 *)(v11
                            + (((unint64_t)((v471 ^ 0xA7A3DCC3)
                                                                  - 2
                                                                  * ((v471 ^ 0xA7A3DCC3) & 0x386990F4 ^ v471 & 4)
                                                                  + 946442480) >> 16) ^ 0x69));
  uint64_t v478 = *(unsigned __int8 *)(v11
                            + (((unsigned __int16)((v444 ^ 0xF296)
                                                                  - ((2 * (v444 ^ 0xF296)) & 0xB11A)
                                                                  - 10099) >> 8) ^ 0xD8));
  uint64_t v479 = *(unsigned __int8 *)(v11
                            + (((unsigned __int16)((v399 ^ 0x801F)
                                                                  - 2 * ((v399 ^ 0x801F) & 0x6A33 ^ v399 & 0x20)
                                                                  + 27155) >> 8) ^ 0x6ALL));
  uint64_t v480 = *(unsigned __int8 *)(v11 + (v444 ^ 0x96));
  uint64_t v481 = *(unsigned __int8 *)(v11
                            + ((((v394 ^ 0xDF661AALL)
                               - ((2 * (v394 ^ 0xDF661AALL)) & 0x184C15528uLL)
                               - 0x264475C43D9F556CLL) >> 24) ^ 0xD9BB8A3BC2));
  uint64_t v482 = *(unsigned __int8 *)(v11
                            + ((((v444 ^ 0xFAB8F296)
                               - ((2 * (v444 ^ 0xFAB8F296)) & 0x1E2FBB11AuLL)
                               + 0x555C5CACF17DD88DLL) >> 24) ^ 0x555C5CACF1));
  uint64_t v483 = *(unsigned __int8 *)(v11 + (v471 ^ 0xC3));
  uint64_t v484 = *(unsigned __int8 *)(v11
                            + (((unsigned __int16)((v471 ^ 0xDCC3)
                                                                  - 2 * ((v471 ^ 0xDCC3) & 0x90F4 ^ v471 & 4)
                                                                  - 28432) >> 8) ^ 0x90));
  uint64_t v485 = *(unsigned __int8 *)(v11
                            + ((((v394 ^ 0xDF661AA)
                                                - ((2 * (v394 ^ 0xDF661AA)) & 0x84C15528)
                                                - 1033852268) >> 16) ^ 0x60));
  uint64_t v486 = *(void *)(v8
                   + 8
                   * (*(unsigned __int8 *)(v11
                                         + ((((v399 ^ 0x8E4D801FLL)
                                            - 2
                                            * ((v399 ^ 0x8E4D801FLL) & 0xCD026A33 ^ (unint64_t)(v399 & 0x20))
                                            - 0x60B26BA832FD95EDLL) >> 24) ^ 0x9F4D9457CDLL)) ^ 0x23));
  STACK[0x5A8] = *(unsigned __int8 *)(v11 + (v399 ^ 0x1FLL));
  *((void *)&v250 + 1) = v486 ^ 0x1F8;
  *(void *)&long long v250 = v486 ^ 0xCB308CF472657000;
  unint64_t v487 = (v250 >> 11) + 0x1B43615FF91F7B09 - ((2 * (v250 >> 11)) & 0x3686C2BFF23EF612);
  uint64_t v488 = *(void *)(v8 + 8 * (v472 ^ 0x23));
  unint64_t v489 = (((v487 >> 3) & 0xE5C26219000000 ^ 0x60402219000000)
        + 0x1B43615FF91F7B09
        - ((2 * ((v487 >> 3) & 0xE5C26219000000 ^ 0x60402219000000)) & 0x82808432000000)) ^ v487;
  *((void *)&v250 + 1) = v488 ^ 0x1F8;
  *(void *)&long long v250 = v488 ^ 0xCB308CF472657000;
  unint64_t v490 = (v250 >> 11) - 0xB7EBC2C87524ACBLL - ((2 * (v250 >> 11)) & 0xE90287A6F15B6A6ALL);
  uint64_t v491 = (((v490 >> 3) & 0x1BE5C26200000000 ^ 0x1A80006200000000)
        - 0xB7EBC2C87524ACBLL
        - ((2 * ((v490 >> 3) & 0x1BE5C26200000000 ^ 0x1A80006200000000)) & 0x2102848400000000)) ^ v490;
  uint64_t v492 = (*(void *)(v8 + 8 * (v474 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  unint64_t v493 = v492 - 0x37BCA299EE0D7000 - ((2 * v492) & 0x6BACC23E5206ELL) + 55;
  uint64_t v494 = v493 ^ 0x435989230BA800;
  if (STACK[0x5B0] == 218) {
    uint64_t v494 = 0x310CD06C000;
  }
  uint64_t v495 = (*(void *)(v8 + 8 * (v473 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v495) = ((v494 & (v493 ^ 0xC8435D6611F29000)) >> 11) ^ (v493 >> 8) ^ (v489 >> 24) ^ HIDWORD(v491) ^ ((((((v495 - ((2 * v495) & 0x3CD96D03477352uLL) - 0x5BE193497E5C4657) >> 3) & 0xC26219A00000 ^ 0xC00210200000) - ((2 * (((v495 - ((2 * v495) & 0x3CD96D03477352uLL) - 0x5BE193497E5C4657) >> 3) & 0xC26219A00000 ^ 0xC00210200000)) & 0x804403400000) - 0x5BE093497E5C4657) ^ (v495 - ((2 * v495) & 0x3CD96D03477352) - 0x5BE193497E5C4657)) >> 16);
  uint64_t v496 = (*(void *)(v8 + 8 * (v476 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v497 = *(void *)(v8 + 8 * (v475 ^ 0x23));
  *((void *)&v498 + 1) = v497 ^ 0x1F8;
  *(void *)&long long v498 = v497 ^ 0xCB308CF472657000;
  unint64_t v499 = (v498 >> 11) - 0x60E1A6C4FF587D54 - ((2 * (v498 >> 11)) & 0x3E3CB276014F0558);
  uint64_t v500 = *(void *)(v8 + 8 * (v477 ^ 0x23));
  LODWORD(v496) = (((((v499 >> 3) & 0xE5C26219000000 ^ 0xE1C22200000000)
                   - 0x60E1A6C4FF587D54
                   - ((2 * ((v499 >> 3) & 0xE5C26219000000 ^ 0xE1C22200000000)) & 0x8804400000000)) ^ v499) >> 24) ^ ((((((v496 + 0xD72081F0F1D6F91 - ((2 * v496) & 0x24103E1E3ADF22uLL)) >> 3) & 0xC26219A00000 ^ 0x400201A00000) + 0xD72081F0F1D6F91 - ((2 * (((v496 + 0xD72081F0F1D6F91 - ((2 * v496) & 0x24103E1E3ADF22uLL)) >> 3) & 0xC26219A00000 ^ 0x400201A00000)) & 0x412000000)) ^ (v496 + 0xD72081F0F1D6F91 - ((2 * v496) & 0x24103E1E3ADF22))) >> 16);
  *((void *)&v498 + 1) = v500 ^ 0x1F8;
  *(void *)&long long v498 = v500 ^ 0xCB308CF472657000;
  unint64_t v501 = (v498 >> 11) - 0x55992B5903690BC0 - ((2 * (v498 >> 11)) & 0x54CDA94DF92DE880);
  LODWORD(v496) = v496 ^ (((((v501 >> 3) & 0x1BE5C26200000000 ^ 0x1144C20000000000)
                          - 0x55992B5903690BC0
                          - ((2 * ((v501 >> 3) & 0x1BE5C26200000000 ^ 0x1144C20000000000)) & 0x14C9804400000000)) ^ v501) >> 32);
  uint64_t v502 = (*(void *)(v8 + 8 * (v478 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  unsigned int v503 = v496 ^ ((((((v502 - ((2 * v502) & 0x993330D2D3EB6uLL) + 0x1844C99986969F5BLL) >> 3) & 0x6219A0D800 ^ 0x221080D000)
                 - ((2
                   * (((v502 - ((2 * v502) & 0x993330D2D3EB6uLL) + 0x1844C99986969F5BLL) >> 3) & 0x19A0D800 ^ 0x1080D000)) & 0x1013000)
                 + 0x1844CA9986969F5BLL) ^ (v502 - ((2 * v502) & 0x993330D2D3EB6) + 0x1844C99986969F5BLL)) >> 8);
  uint64_t v504 = (*(void *)(v8 + 8 * (v480 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v505 = (*(void *)(v8 + 8 * (v481 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v506 = *(void *)(v8 + 8 * (v479 ^ 0x23));
  *((void *)&v498 + 1) = v506 ^ 0x1F8;
  *(void *)&long long v498 = v506 ^ 0xCB308CF472657000;
  LODWORD(v504) = ((((((v505 - 0x7A00A8B50FF8A15FLL - ((2 * v505) & 0x3EAE95E00EBD42uLL)) >> 3) & 0xC26219A00000 ^ 0xC26018000000)
                   - 0x7A00A8B50FF8A15FLL
                   - ((2
                     * (((v505 - 0x7A00A8B50FF8A15FLL - ((2 * v505) & 0x3EAE95E00EBD42uLL)) >> 3) & 0xC26219A00000 ^ 0xC26018000000)) & 0x848420000000)) ^ (v505 - 0x7A00A8B50FF8A15FLL - ((2 * v505) & 0x3EAE95E00EBD42))) >> 16) ^ ((((((v504 - 0x7F544663D4B0E1CCLL - ((2 * v504) & 0x177338569E3C68uLL)) >> 3) & 0x6219A0D800 ^ 0x220120C000) - 0x7F544663D4B0E1CCLL - ((2 * (((v504 - 0x7F544663D4B0E1CCLL - ((2 * v504) & 0x177338569E3C68uLL)) >> 3) & 0x19A0D800 ^ 0x120C000)) & 0x12003000)) ^ (v504 - 0x7F544663D4B0E1CCLL - ((2 * v504) & 0x177338569E3C68))) >> 8);
  unint64_t v507 = (v498 >> 11) - ((2 * (v498 >> 11)) & 0xDA1247C76B45FC10) + 0x6D0923E3B5A2FE08;
  uint64_t v508 = *(void *)(v8 + 8 * (v484 ^ 0x23));
  LODWORD(v504) = v504 ^ (((((v507 >> 3) & 0xE5C26219000000 ^ 0xA1006010000000)
                          - ((2 * ((v507 >> 3) & 0xE5C26219000000 ^ 0xA1006010000000)) & 0x204C422000000)
                          + 0x6E0923E3B5A2FE08) ^ v507) >> 24);
  *((void *)&v498 + 1) = v508 ^ 0x1F8;
  *(void *)&long long v498 = v508 ^ 0xCB308CF472657000;
  unint64_t v509 = (v498 >> 11) + 0xBD4781186215E56 - ((2 * (v498 >> 11)) & 0x17A8F0230C42BCACLL);
  unsigned int v510 = v504 ^ (((((v509 >> 3) & 0x1BE5C26200000000 ^ 0x160820200000000)
                 + 0xBD4781186215E56
                 - ((2 * ((v509 >> 3) & 0x1BE5C26200000000 ^ 0x160820200000000)) & 0x1788800000000000)) ^ v509) >> 32);
  uint64_t v511 = (*(void *)(v8 + 8 * (v483 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v512 = (*(void *)(v8 + 8 * (v482 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v513 = *(void *)(v8 + 8 * (v485 ^ 0x23));
  LODWORD(v511) = ((((((v512 - 0x6E1C255C38C7BDALL - ((2 * v512) & 0x3C7B5478E7084CuLL)) >> 3) & 0xC26219A00000 ^ 0xC22001800000)
                   - 0x6E1C255C38C7BDALL
                   - ((2
                     * (((v512 - 0x6E1C255C38C7BDALL - ((2 * v512) & 0x3C7B5478E7084CuLL)) >> 3) & 0xC26219A00000 ^ 0xC22001800000)) & 0x4430400000)) ^ (v512 - 0x6E1C255C38C7BDALL - ((2 * v512) & 0x3C7B5478E7084CLL))) >> 16) ^ ((((((v511 - 0x5FF82E719D812DCLL - ((2 * v511) & 0xFA31CC4FDA48uLL)) >> 3) & 0x6219A0D800 ^ 0x221880D800) - 0x5FF82E719D812DCLL - ((2 * (((v511 - 0x5FF82E719D812DCLL - ((2 * v511) & 0xFA31CC4FDA48uLL)) >> 3) & 0x19A0D800 ^ 0x1880D800)) & 0x419000)) ^ (v511 - 0x5FF82E719D812DCLL - ((2 * v511) & 0xFA31CC4FDA48))) >> 8);
  *((void *)&v498 + 1) = v513 ^ 0x1F8;
  *(void *)&long long v498 = v513 ^ 0xCB308CF472657000;
  unint64_t v514 = (v498 >> 11) - ((2 * (v498 >> 11)) & 0x2F2797E3500F4FDCLL) - 0x686C340E57F85812;
  uint64_t v515 = *(void *)(v8 + 8 * (STACK[0x5A8] ^ 0x23));
  LODWORD(v511) = v511 ^ (((((v514 >> 3) & 0xE5C26219000000 ^ 0xE0406211000000)
                          - ((2 * ((v514 >> 3) & 0xE5C26219000000 ^ 0xE0406211000000)) & 0x10384C010000000)
                          - 0x676C340E57F85812) ^ v514) >> 24);
  *((void *)&v498 + 1) = v515 ^ 0x1F8;
  *(void *)&long long v498 = v515 ^ 0xCB308CF472657000;
  unint64_t v516 = (v498 >> 11) - 0x1D1F1E85ADE5541FLL - ((2 * (v498 >> 11)) & 0xC5C1C2F4A43557C2);
  LODWORD(v511) = v511 ^ (((((v516 >> 3) & 0x1BE5C26200000000 ^ 0x1844002200000000)
                          - 0x1D1F1E85ADE5541FLL
                          - ((2 * ((v516 >> 3) & 0x1BE5C26200000000 ^ 0x1844002200000000)) & 0x5C180C400000000)) ^ v516) >> 32);
  uint64_t v517 = *(unsigned __int8 *)(v11
                            + (((unsigned __int16)((v511 ^ 0xBD07)
                                                                  - ((2 * (v511 ^ 0xBD07)) & 0xCAD2)
                                                                  - 6807) >> 8) ^ 0xE5));
  uint64_t v518 = *(unsigned __int8 *)(v11 + (v510 ^ 0xB5));
  unint64_t v519 = (v503 ^ 0xCEEEE603) - 2 * ((v503 ^ 0xCEEEE603) & 0x2F0D76EE ^ v503 & 0x20) - 0x64DF0FCDD0F28932;
  uint64_t v520 = *(unsigned __int8 *)(v11
                            + ((((v503 ^ 0xCEEEE603)
                                                - 2 * ((v503 ^ 0xCEEEE603) & 0x2F0D76EE ^ v503 & 0x20)
                                                + 789411534) >> 16) ^ 0xDLL));
  uint64_t v521 = *(unsigned __int8 *)(v11
                            + (((unsigned __int16)((v503 ^ 0xE603)
                                                                  - 2 * ((v503 ^ 0xE603) & 0x76EE ^ v503 & 0x20)
                                                                  + 30414) >> 8) ^ 0x76));
  unint64_t v522 = (v510 ^ 0x6E2C2EB5) - ((2 * (v510 ^ 0x6E2C2EB5)) & 0x16562B4E4) - 0x2E7494B24D4EA58ELL;
  uint64_t v523 = *(unsigned __int8 *)(v11
                            + ((((v495 ^ 0x80278345)
                               - 2 * ((v495 ^ 0x80278345) & 0xABD0D03ELL ^ (unint64_t)(v495 & 2))
                               - 0x746C8C2C542F2FC4) >> 24) ^ 0x8B9373D3ABLL));
  uint64_t v524 = *(unsigned __int8 *)(v11 + (v511 ^ 7));
  uint64_t v525 = *(unsigned __int8 *)(v11
                            + (((unint64_t)((v495 ^ 0x80278345)
                                                                  - 2
                                                                  * ((v495 ^ 0x80278345) & 0xABD0D03E ^ v495 & 2)
                                                                  - 1412378564) >> 16) ^ 0xD0));
  uint64_t v526 = *(unsigned __int8 *)(v11 + (v503 ^ 3));
  uint64_t v527 = *(unsigned __int8 *)(v11 + (BYTE2(v522) ^ 0xB1));
  uint64_t v528 = *(unsigned __int8 *)(v11 + ((v522 >> 24) ^ 0xD18B6B4DB2));
  uint64_t v529 = *(unsigned __int8 *)(v11
                            + ((((v511 ^ 0x9A8BD07)
                               - ((2 * (v511 ^ 0x9A8BD07)) & 0x169F7CAD2uLL)
                               + 0x2ED3F62DB4FBE569) >> 24) ^ 0x2ED3F62DB4));
  uint64_t v530 = *(unsigned __int8 *)(v11
                            + ((((v511 ^ 0x9A8BD07)
                                                - ((2 * (v511 ^ 0x9A8BD07)) & 0x69F7CAD2)
                                                - 1258560151) >> 16) ^ 0xFBLL));
  uint64_t v531 = *(unsigned __int8 *)(v11
                            + (((unsigned __int16)((v495 ^ 0x8345)
                                                                  - 2 * ((v495 ^ 0x8345) & 0xD03E ^ v495 & 2)
                                                                  - 12228) >> 8) ^ 0xD0));
  uint64_t v532 = *(unsigned __int8 *)(v11 + (BYTE1(v522) ^ 0x5ALL));
  uint64_t v533 = *(unsigned __int8 *)(v11 + ((v519 >> 24) ^ 0x9B20F0322FLL));
  uint64_t v534 = (*(void *)(v8 + 8 * (*(unsigned __int8 *)(v11 + (v495 ^ 0x45)) ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v535 = *(void *)(v8 + 8 * (v517 ^ 0x23));
  *((void *)&v498 + 1) = v535 ^ 0x1F8;
  *(void *)&long long v498 = v535 ^ 0xCB308CF472657000;
  unint64_t v536 = (v498 >> 11) + 0x24314C1284BCB9EALL - ((2 * (v498 >> 11)) & 0x48629825097973D4);
  LODWORD(v534) = (((((v536 >> 3) & 0xE5C26219000000 ^ 0x84000210000000)
                   + 0x24314C1284BCB9EALL
                   - ((2 * ((v536 >> 3) & 0xE5C26219000000 ^ 0x84000210000000)) & 0x42800400000000)) ^ v536) >> 24) ^ ((((((v534 - 0x791118510FF07F6CLL - ((2 * v534) & 0x1DCF5DE01F0128uLL)) >> 3) & 0xC26219A00000 ^ 0xC06018000000) - 0x791118510FF07F6CLL - ((2 * (((v534 - 0x791118510FF07F6CLL - ((2 * v534) & 0x1DCF5DE01F0128uLL)) >> 3) & 0xC26219A00000 ^ 0xC06018000000)) & 0x1844420000000)) ^ (v534 - 0x791118510FF07F6CLL - ((2 * v534) & 0x1DCF5DE01F0128))) >> 16);
  uint64_t v537 = *(void *)(v8 + 8 * (v518 ^ 0x23));
  *((void *)&v498 + 1) = v537 ^ 0x1F8;
  *(void *)&long long v498 = v537 ^ 0xCB308CF472657000;
  unint64_t v538 = (v498 >> 11) - 0x423B743036A3BE81 - ((2 * (v498 >> 11)) & 0x7B89179F92B882FELL);
  LODWORD(v534) = v534 ^ (((((v538 >> 3) & 0x1BE5C26200000000 ^ 0x13A0806000000000)
                          - 0x423B743036A3BE81
                          - ((2 * ((v538 >> 3) & 0x1BE5C26200000000 ^ 0x13A0806000000000)) & 0x3389048400000000)) ^ v538) >> 32);
  uint64_t v539 = (*(void *)(v8 + 8 * (v520 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v540 = (*(void *)(v8 + 8 * (v521 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v495) = v534 ^ ((((((v539 - ((2 * v539) & 0x36C5A338057D0CuLL) + 0x3B7B62D19C02BE86) >> 3) & 0x6219A0D800 ^ 0x4211805000)
                          + 0xD19C02BE87
                          + ~((2
                             * (((v539 - ((2 * v539) & 0x36C5A338057D0CuLL) + 0x3B7B62D19C02BE86) >> 3) & 0x6219A0D800 ^ 0x4211805000)) & 0x8030013000)) ^ (v539 - ((2 * v539) & 0x36C5A338057D0CLL) + 0x3B7B62D19C02BE86)) >> 8);
  unint64_t v541 = ((((v540 - 0x3777807F86681CE0 - ((2 * v540) & 0x10FF00F32FC640uLL)) >> 3) & 0xC26219A00000 ^ 0x26009200000)
        - 0x3777807F86681CE0
        - ((2
          * (((v540 - 0x3777807F86681CE0 - ((2 * v540) & 0x10FF00F32FC640uLL)) >> 3) & 0xC26219A00000 ^ 0x26009200000)) & 0x840033000000)) ^ (v540 - 0x3777807F86681CE0 - ((2 * v540) & 0x10FF00F32FC640));
  uint64_t v542 = *(void *)(v8 + 8 * (v523 ^ 0x23));
  *((void *)&v498 + 1) = v542 ^ 0x1F8;
  *(void *)&long long v498 = v542 ^ 0xCB308CF472657000;
  unint64_t v543 = (v498 >> 11) + 0x4E98C0F6A1FB99DCLL - ((2 * (v498 >> 11)) & 0x9D3181ED43F733B8);
  uint64_t v544 = *(void *)(v8 + 8 * (v524 ^ 0x23));
  LODWORD(v541) = (((((v543 >> 3) & 0xE5C26219000000 ^ 0xC1000210000000)
                   + 0x4E98C0F6A1FB99DCLL
                   - ((2 * ((v543 >> 3) & 0xE5C26219000000 ^ 0xC1000210000000)) & 0x10180C402000000)) ^ v543) >> 24) ^ (v541 >> 16);
  *((void *)&v498 + 1) = v544 ^ 0x1F8;
  *(void *)&long long v498 = v544 ^ 0xCB308CF472657000;
  unint64_t v545 = (v498 >> 11) + 0x7EA4C6000BA36327 - ((2 * (v498 >> 11)) & 0xFD498C001746C64ELL);
  unint64_t v546 = *(void *)(v8 + 8 * (v528 ^ 0x23));
  LODWORD(v528) = v541 ^ (((((v545 >> 3) & 0x1BE5C26200000000 ^ 0xBC4804000000000)
                          + 0x7EA4C6000BA36327
                          - ((2 * ((v545 >> 3) & 0x1BE5C26200000000 ^ 0xBC4804000000000)) & 0x3549840000000000)) ^ v545) >> 32);
  unint64_t v547 = ((v546 >> 11) ^ 0x1966119E8E4CAELL)
       - ((2 * ((v546 >> 11) ^ 0x1966119E8E4CAELL)) & 0x1B498D6C6BA6A6)
       - 0x63B25B3949CA2CADLL;
  unint64_t v548 = (((v547 >> 3) & 0x6219A0D800 ^ 0x10809800)
        - ((2 * ((v547 >> 3) & 0x6219A0D800 ^ 0x10809800)) & 0x842041A000)
        - 0x63B25A3949CA2CADLL) ^ v547;
  uint64_t v549 = (*(void *)(v8 + 8 * (v527 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v550 = *(void *)(v8 + 8 * (v526 ^ 0x23));
  *((void *)&v498 + 1) = v550 ^ 0x1F8;
  *(void *)&long long v498 = v550 ^ 0xCB308CF472657000;
  unint64_t v551 = (v498 >> 11) - 0x1AB217890403C671 - ((2 * (v498 >> 11)) & 0xCA9BD0EDF7F8731ELL);
  uint64_t v552 = *(void *)(v8 + 8 * (v525 ^ 0x23));
  LODWORD(v549) = (((((v551 >> 3) & 0xE5C26219000000 ^ 0xA1800219000000)
                   - 0x1AB217890403C671
                   - ((2 * ((v551 >> 3) & 0xE5C26219000000 ^ 0xA1800219000000)) & 0x8B80C432000000)) ^ v551) >> 24) ^ ((((((v549 + 0x3EBA9B27E8324535 - ((2 * v549) & 0x35364FD0648A6AuLL)) >> 3) & 0xC26219A00000 ^ 0x426019000000) + 0x3EBA9B27E8324535 - ((2 * (((v549 + 0x3EBA9B27E8324535 - ((2 * v549) & 0x35364FD0648A6AuLL)) >> 3) & 0xC26219A00000 ^ 0x426019000000)) & 0x1044410400000)) ^ (v549 + 0x3EBA9B27E8324535 - ((2 * v549) & 0x35364FD0648A6ALL))) >> 16);
  *((void *)&v498 + 1) = v552 ^ 0x1F8;
  *(void *)&long long v498 = v552 ^ 0xCB308CF472657000;
  unint64_t v553 = (v498 >> 11) + 0x208B77C3A01F669ALL - ((2 * (v498 >> 11)) & 0x4116EF87403ECD34);
  LODWORD(v549) = v549 ^ (((((v553 >> 3) & 0x1BE5C26200000000 ^ 0x1426000000000)
                          + 0x208B77C3A01F669ALL
                          - ((2 * ((v553 >> 3) & 0x1BE5C26200000000 ^ 0x1426000000000)) & 0x102848400000000)) ^ v553) >> 32);
  uint64_t v554 = (*(void *)(v8 + 8 * (v529 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v555 = v530 ^ 0x23;
  LODWORD(v530) = v549 ^ ((((((v554 - ((2 * v554) & 0x3D9D377DBE8426uLL) + 0x21DECE9BBEDF4213) >> 3) & 0x6219A0D800 ^ 0x421180C800)
                          - ((2
                            * (((v554 - ((2 * v554) & 0x3D9D377DBE8426uLL) + 0x21DECE9BBEDF4213) >> 3) & 0x6219A0D800 ^ 0x421180C800)) & 0x431008000)
                          + 0x21DECF9BBEDF4213) ^ (v554 - ((2 * v554) & 0x3D9D377DBE8426) + 0x21DECE9BBEDF4213)) >> 8);
  uint64_t v556 = *(void *)(v8 + 8 * v555);
  *((void *)&v498 + 1) = v556 ^ 0x1F8;
  *(void *)&long long v498 = v556 ^ 0xCB308CF472657000;
  unint64_t v557 = (v498 >> 11) - 0x568BFCA30ABA8F81 - ((2 * (v498 >> 11)) & 0x52E806B9EA8AE0FELL);
  uint64_t v558 = (*(void *)(v8 + 8 * (v532 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v557) = ((((((v558 - 0x679F0CB8D513AFE7 - ((2 * v558) & 0x1E68E55D8A032uLL)) >> 3) & 0x6219A0D800 ^ 0x6001008800)
                   - 0x679F0CB8D513AFE7
                   - ((2
                     * (((v558 - 0x679F0CB8D513AFE7 - ((2 * v558) & 0x1E68E55D8A032uLL)) >> 3) & 0x6219A0D800 ^ 0x6001008800)) & 0x841140A000)) ^ (v558 - 0x679F0CB8D513AFE7 - ((2 * v558) & 0x1E68E55D8A032))) >> 8) ^ (((((v557 >> 3) & 0x1BE5C26200000000 ^ 0x1124806200000000) - 0x568BFCA30ABA8F81 + (~(2 * ((v557 >> 3) & 0x1BE5C26200000000 ^ 0x1124806200000000)) | 0xED37FB7FFFFFFFFFLL) + 1) ^ v557) >> 32);
  uint64_t v559 = (*(void *)(v8 + 8 * (v533 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v560 = *(void *)(v8 + 8 * (v531 ^ 0x23));
  LODWORD(v557) = v557 ^ ((((((v559 - ((2 * v559) & 0x1B4C34A86B01CAuLL) - 0x6D259E5ABCA7F1BLL) >> 3) & 0xC26219A00000 ^ 0x804208800000)
                          - ((2
                            * (((v559 - ((2 * v559) & 0x1B4C34A86B01CAuLL) - 0x6D259E5ABCA7F1BLL) >> 3) & 0xC26219A00000 ^ 0x804208800000)) & 0x1040420400000)
                          - 0x6D159E5ABCA7F1BLL) ^ (v559 - ((2 * v559) & 0x1B4C34A86B01CALL) - 0x6D259E5ABCA7F1BLL)) >> 16);
  *((void *)&v498 + 1) = v560 ^ 0x1F8;
  *(void *)&long long v498 = v560 ^ 0xCB308CF472657000;
  unint64_t v561 = (v498 >> 11) - ((2 * (v498 >> 11)) & 0x1B82A5080F10C80ELL) - 0x723EAD7BF8779BF9;
  LODWORD(v561) = v557 ^ (((((v561 >> 3) & 0xE5C26219000000 ^ 0xA0024000000000)
                          - ((2 * ((v561 >> 3) & 0xE5C26219000000 ^ 0xA0024000000000)) & 0x182840002000000)
                          - 0x713EAD7BF8779BF9) ^ v561) >> 24);
  uint64_t v562 = *(unsigned __int8 *)(v20
                            + ((((v561 ^ 0xFA0CFC20)
                                                - ((2 * (v561 ^ 0xFA0CFC20)) & 0x4321BC2E)
                                                - 1584341481) >> 16) ^ 0x90));
  LOBYTE(v555) = v528 ^ BYTE1(v548);
  uint64_t v563 = v528 ^ (v548 >> 8) ^ 0x207A8532;
  unint64_t v564 = v563 - ((2 * v563) & 0x19BAEA694) + 0x4BEE08B3CDD7534ALL;
  uint64_t v565 = *(unsigned __int8 *)(v20
                            + (((unsigned __int16)((v561 ^ 0xFC20)
                                                                  - ((2 * (v561 ^ 0xFC20)) & 0xBC2E)
                                                                  - 8681) >> 8) ^ 0xDELL));
  uint64_t v566 = *(unsigned __int8 *)(v20 + (v555 ^ 0x32));
  uint64_t v567 = *(unsigned __int8 *)(v20
                            + ((((v561 ^ 0xFA0CFC20)
                               - ((2 * (v561 ^ 0xFA0CFC20)) & 0x14321BC2EuLL)
                               + 0x4A061850A190DE17) >> 24) ^ 0x4A061850A1));
  uint64_t v568 = *(unsigned __int8 *)(v20 + (v561 ^ 0x20));
  uint64_t v569 = *(void *)(v8
                   + 8
                   * (*(unsigned __int8 *)(v20
                                         + (((unsigned __int16)((v495 ^ 0xD8C4)
                                                                               - ((2 * (v495 ^ 0xD8C4)) & 0x47E6)
                                                                               + 9203) >> 8) ^ 0x23)) ^ 0x23));
  uint64_t v570 = *(unsigned __int8 *)(v20 + ((v564 >> 24) ^ 0x4BEE08B3CDLL));
  *((void *)&v498 + 1) = v569 ^ 0x1F8;
  *(void *)&long long v498 = v569 ^ 0xCB308CF472657000;
  unint64_t v571 = (v498 >> 11) - 0x45304BB35BB0C477 + (~(2 * (v498 >> 11)) | 0x8A609766B76188EDLL) + 1;
  uint64_t v572 = *(void *)(v8 + 8 * (v562 ^ 0x23));
  *((void *)&v498 + 1) = v572 ^ 0x1F8;
  *(void *)&long long v498 = v572 ^ 0xCB308CF472657000;
  unint64_t v573 = (v498 >> 11) - 0x170D1EE83AB8079BLL - ((2 * (v498 >> 11)) & 0xD1E5C22F8A8FF0CALL);
  uint64_t v574 = (*(void *)(v8
                    + 8
                    * (*(unsigned __int8 *)(v20
                                          + ((((v530 ^ 0x80E48F21)
                                             - (unint64_t)((2 * (v530 ^ 0x80E48F21)) & 0xC7C40D1C)
                                             - 0x1AB6726A9C1DF972) >> 24) ^ 0xE5498D9563)) ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v571) = (((((v573 >> 3) & 0x1BE5C26200000000 ^ 0x1904402200000000)
                   - 0x170D1EE83AB8079BLL
                   - ((2 * ((v573 >> 3) & 0x1BE5C26200000000 ^ 0x1904402200000000)) & 0x11C1800400000000)) ^ v573) >> 32) ^ (((((v571 >> 3) & 0xE5C26219000000 ^ 0x41C20010000000) - 0x45304BB35BB0C477 - ((2 * ((v571 >> 3) & 0xE5C26219000000 ^ 0x41C20010000000)) & 0x18B008000000000)) ^ v571) >> 24) ^ ((((((v574 - ((2 * v574) & 0x27A9CD0001B4E8uLL) + 0x71F3D4E68000DA74) >> 3) & 0x6219A0D800 ^ 0x10001800) - ((2 * (((v574 - ((2 * v574) & 0x27A9CD0001B4E8uLL) + 0x71F3D4E68000DA74) >> 3) & 0x6219A0D800 ^ 0x10001800)) & 0xC40001B000) + 0x71F3D5E68000DA74) ^ (v574 - ((2 * v574) & 0x27A9CD0001B4E8) + 0x71F3D4E68000DA74)) >> 8);
  uint64_t v575 = (*(void *)(v8 + 8 * (*(unsigned __int8 *)(v20 + (BYTE2(v564) ^ 0xD7)) ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v576 = *(void *)(v8 + 8 * (*(unsigned __int8 *)(v20 + (BYTE1(v564) ^ 0x53)) ^ 0x23));
  *((void *)&v498 + 1) = v576 ^ 0x1F8;
  *(void *)&long long v498 = v576 ^ 0xCB308CF472657000;
  unint64_t v577 = (v498 >> 11) - 0x8C63D1CB15D46FALL - ((2 * (v498 >> 11)) & 0xEE7385C69D45720CLL);
  LODWORD(v532) = v571 ^ ((((((v575 - ((2 * v575) & 0xA13968CA4C53CuLL) - 0x765AF634B9AD9D62) >> 3) & 0xC26219A00000 ^ 0x802008800000)
                          - (((v575 - ((2 * v575) & 0xA13968CA4C53CuLL) - 0x765AF634B9AD9D62) >> 2) & 0x8400000000)
                          - 0x7659F634B9AD9D62) ^ (v575 - ((2 * v575) & 0xA13968CA4C53CLL) - 0x765AF634B9AD9D62)) >> 16);
  uint64_t v578 = *(void *)(v8 + 8 * (*(unsigned __int8 *)(v20 + (v495 ^ 0xC4)) ^ 0x23));
  *((void *)&v498 + 1) = v578 ^ 0x1F8;
  *(void *)&long long v498 = v578 ^ 0xCB308CF472657000;
  uint64_t v579 = (v498 >> 11) - ((2 * (v498 >> 11)) & 0xDFE1D2DEC1587884);
  LODWORD(v571) = (((((v577 >> 3) & 0xE5C26219000000 ^ 0xE5004009000000)
                   - 0x8C63D1CB15D46FALL
                   - ((2 * ((v577 >> 3) & 0xE5C26219000000 ^ 0xE5004009000000)) & 0x4384C410000000)) ^ v577) >> 24) ^ (((((unint64_t)(v579 + 0x6FF0E96F60AC3C42) >> 3) & 0x1BE5C26200000000 | (0x900F16909F53C3BDLL - v579) & 0x1000000000) ^ (v579 + 0x6FF0E96F60AC3C42) & 0xFFFFFFEF00000000) >> 32);
  uint64_t v580 = (*(void *)(v8 + 8 * (v565 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v571) = v571 ^ ((((((v580 - ((2 * v580) & 0x1791F590DA2C0CuLL) - 0x69D437053792E9FALL) >> 3) & 0x6219A0D800 ^ 0x219008000)
                          - ((2
                            * (((v580 - ((2 * v580) & 0x1791F590DA2C0CuLL) - 0x69D437053792E9FALL) >> 3) & 0x6219A0D800 ^ 0x219008000)) & 0xC410402000)
                          - 0x69D436053792E9FALL) ^ (v580 - ((2 * v580) & 0x1791F590DA2C0CLL) - 0x69D437053792E9FALL)) >> 8);
  uint64_t v581 = (*(void *)(v8
                    + 8
                    * (*(unsigned __int8 *)(v20
                                          + ((((v530 ^ 0x80E48F21)
                                                              - ((2 * (v530 ^ 0x80E48F21)) & 0xC7C40D1C)
                                                              + 1675757198) >> 16) ^ 0xE2)) ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v525) = v571 ^ ((((((v581 - ((2 * v581) & 0x3D232B91D432ACuLL) + 0x55BE9195C8EA1956) >> 3) & 0xC26219A00000 ^ 0xC22219000000)
                          - ((2
                            * (((v581 - ((2 * v581) & 0x3D232B91D432ACuLL) + 0x55BE9195C8EA1956) >> 3) & 0xC26219A00000 ^ 0xC22219000000)) & 0x1000011400000)
                          + 0x55BF9195C8EA1956) ^ (v581 - ((2 * v581) & 0x3D232B91D432ACLL) + 0x55BE9195C8EA1956)) >> 16);
  uint64_t v582 = *(void *)(v8
                   + 8
                   * (*(unsigned __int8 *)(v20
                                         + (((unsigned __int16)((v530 ^ 0x8F21)
                                                                               - ((2 * (v530 ^ 0x8F21)) & 0xD1C)
                                                                               + 1678) >> 8) ^ 6)) ^ 0x23));
  *((void *)&v498 + 1) = v582 ^ 0x1F8;
  *(void *)&long long v498 = v582 ^ 0xCB308CF472657000;
  unint64_t v583 = (v498 >> 11) - 0x52EC0F04543F3FB4 - ((2 * (v498 >> 11)) & 0x5A27E1F757818098);
  uint64_t v584 = (*(void *)(v8 + 8 * (v566 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v583) = ((((((v584 + 0x7A4602D9FC47125BLL - ((2 * v584) & 0xC05B3F88E24B6uLL)) >> 3) & 0x6219A0D800 ^ 0x421980C000)
                   + 0x7A4602D9FC47125BLL
                   - ((2
                     * (((v584 + 0x7A4602D9FC47125BLL - ((2 * v584) & 0xC05B3F88E24B6uLL)) >> 3) & 0x6219A0D800 ^ 0x421980C000)) & 0x8030002000)) ^ (v584 + 0x7A4602D9FC47125BLL - ((2 * v584) & 0xC05B3F88E24B6))) >> 8) ^ (((((v583 >> 3) & 0x1BE5C26200000000 ^ 0x11A0420200000000) - 0x52EC0F04543F3FB4 - ((2 * ((v583 >> 3) & 0x1BE5C26200000000 ^ 0x11A0420200000000)) & 0x120380C400000000)) ^ v583) >> 32);
  uint64_t v585 = (*(void *)(v8
                    + 8
                    * (*(unsigned __int8 *)(v20
                                          + ((((v495 ^ 0x5E75D8C4)
                                             - ((2 * (v495 ^ 0x5E75D8C4)) & 0x1D1FE47E6uLL)
                                             - 0x2940F0B41700DC0DLL) >> 24) ^ 0xD6BF0F4BE8)) ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v586 = *(void *)(v8 + 8 * (v568 ^ 0x23));
  LODWORD(v583) = v583 ^ ((((((v585 - ((2 * v585) & 0xBC9C3E4D29066uLL) + 0x6D05E4E1F2694833) >> 3) & 0xC26219A00000 ^ 0x800018000000)
                          - ((2
                            * (((v585 - ((2 * v585) & 0xBC9C3E4D29066uLL) + 0x6D05E4E1F2694833) >> 3) & 0xC26219A00000 ^ 0x800018000000)) & 0x180C020400000)
                          + 0x6D06E4E1F2694833) ^ (v585 - ((2 * v585) & 0xBC9C3E4D29066) + 0x6D05E4E1F2694833)) >> 16);
  *((void *)&v498 + 1) = v586 ^ 0x1F8;
  *(void *)&long long v498 = v586 ^ 0xCB308CF472657000;
  unint64_t v587 = (v498 >> 11) - ((2 * (v498 >> 11)) & 0x88CB57C85D254420) + 0x4465ABE42E92A210;
  LODWORD(v529) = v583 ^ (((((v587 >> 3) & 0xE5C26219000000 ^ 0x84806001000000)
                          - ((2 * ((v587 >> 3) & 0xE5C26219000000 ^ 0x84806001000000)) & 0xCB04C010000000)
                          + 0x4565ABE42E92A210) ^ v587) >> 24);
  uint64_t v588 = (*(void *)(v8 + 8 * (v567 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v589 = *(void *)(v8 + 8 * (*(unsigned __int8 *)(v20 + (v530 ^ 0x21)) ^ 0x23));
  *((void *)&v498 + 1) = v589 ^ 0x1F8;
  *(void *)&long long v498 = v589 ^ 0xCB308CF472657000;
  unint64_t v590 = (v498 >> 11) + 0x54533F796CA03A8ALL - ((2 * (v498 >> 11)) & 0xA8A67EF2D9407514);
  uint64_t v591 = *(void *)(v8 + 8 * (v570 ^ 0x23));
  *((void *)&v498 + 1) = v591 ^ 0x1F8;
  *(void *)&long long v498 = v591 ^ 0xCB308CF472657000;
  unint64_t v592 = (v498 >> 11) - 0x45328A2CB704E634 - ((2 * (v498 >> 11)) & 0x759AEBA691F63398);
  LODWORD(v588) = (((((v590 >> 3) & 0xE5C26219000000 ^ 0x80426209000000)
                   + 0x54533F796CA03A8ALL
                   - ((2 * ((v590 >> 3) & 0xE5C26219000000 ^ 0x80426209000000)) & 0x8204C010000000)) ^ v590) >> 24) ^ ((((((v588 + 0x58178C6621641A90 - ((2 * v588) & 0x2F18CC42C83520uLL)) >> 3) & 0xC26219A00000 ^ 0xC00000200000) + 0x58178C6621641A90 - ((2 * (((v588 + 0x58178C6621641A90 - ((2 * v588) & 0x2F18CC42C83520uLL)) >> 3) & 0xC26219A00000 ^ 0xC00000200000)) & 0x100C402400000)) ^ (v588 + 0x58178C6621641A90 - ((2 * v588) & 0x2F18CC42C83520))) >> 16) ^ (((((v592 >> 3) & 0x1BE5C26200000000 ^ 0x1341822200000000) - 0x45328A2CB704E634 - ((2 * ((v592 >> 3) & 0x1BE5C26200000000 ^ 0x1341822200000000)) & 0x358A808400000000)) ^ v592) >> 32);
  uint64_t v593 = (*(void *)(v8
                    + 8
                    * (*(unsigned __int8 *)(v20
                                          + ~(((v495 ^ 0x5E75D8C4)
                                                              - ((2 * (v495 ^ 0x5E75D8C4)) & 0xD1FE47E6)
                                                              - 385932301) >> 16)) ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  unint64_t v594 = (v529 ^ 0x5A525E13)
       - ((2 * (v529 ^ 0x5A525E13)) & 0xDBBA6B48)
       + 0x5373D17A6DDD35A4;
  LODWORD(v588) = v588 ^ ((((((v593 - ((2 * v593) & 0x52E6A43627450uLL) + 0x7882973521B13A28) >> 3) & 0x6219A0D800 ^ 0x6200200000)
                          - ((2
                            * (((v593 - ((2 * v593) & 0x52E6A43627450uLL) + 0x7882973521B13A28) >> 3) & 0x6219A0D800 ^ 0x6200200000)) & 0x4003403000)
                          + 0x7882983521B13A28) ^ (v593 - ((2 * v593) & 0x52E6A43627450) + 0x7882973521B13A28)) >> 8);
  uint64_t v595 = *(unsigned __int8 *)(v20 + (v588 ^ 0xAFLL));
  unint64_t v596 = (v525 ^ 0xB9B634F9)
       - ((2 * (v525 ^ 0xB9B634F9)) & 0x7EFF8442)
       + 0x749E47433F7FC221;
  uint64_t v597 = *(unsigned __int8 *)(v20 + (v532 ^ 5));
  uint64_t v598 = *(unsigned __int8 *)(v20
                            + (((unsigned __int16)((v529 ^ 0x5E13)
                                                                  - ((2 * (v529 ^ 0x5E13)) & 0x6B48)
                                                                  + 13732) >> 8) ^ 0x35));
  unint64_t v599 = (v532 ^ 0x39915905)
       - ((2 * (v532 ^ 0x39915905)) & 0x1B5C218C6)
       + 0x3CFD63D5DAE10C63;
  uint64_t v600 = *(unsigned __int8 *)(v20
                            + (((unsigned __int16)((v525 ^ 0x34F9)
                                                                  - ((2 * (v525 ^ 0x34F9)) & 0x8442)
                                                                  - 15839) >> 8) ^ 0xC2));
  unint64_t v601 = (v588 ^ 0x3E2B31AFLL)
       - ((2 * (v588 ^ 0x3E2B31AF)) & 0xED23AF82)
       + 0x412DD1F7691D7C1;
  uint64_t v602 = *(unsigned __int8 *)(v20 + ((v601 >> 24) ^ 0x412DD1F76));
  uint64_t v603 = *(unsigned __int8 *)(v20 + (v529 ^ 0x13));
  uint64_t v604 = *(unsigned __int8 *)(v20 + (v525 ^ 0xF9));
  uint64_t v605 = *(unsigned __int8 *)(v20 + ((v599 >> 24) ^ 0x3CFD63D5DALL));
  uint64_t v606 = *(unsigned __int8 *)(v20 + ((v596 >> 24) ^ 0x749E47433FLL));
  uint64_t v607 = *(unsigned __int8 *)(v20 + ((v594 >> 24) ^ 0x5373D17A6DLL));
  uint64_t v608 = *(void *)(v8 + 8 * (v597 ^ 0x23));
  *((void *)&v498 + 1) = v608 ^ 0x1F8;
  *(void *)&long long v498 = v608 ^ 0xCB308CF472657000;
  unint64_t v609 = (v498 >> 11) + 0x6703218889BF8FD7 - ((2 * (v498 >> 11)) & 0xCE064311137F1FAELL);
  uint64_t v610 = *(void *)(v8 + 8 * (v595 ^ 0x23));
  *((void *)&v498 + 1) = v610 ^ 0x1F8;
  *(void *)&long long v498 = v610 ^ 0xCB308CF472657000;
  unint64_t v611 = (v498 >> 11) - 0x5F325AA7344B9FE6 - ((2 * (v498 >> 11)) & 0x419B4AB19768C034);
  unint64_t v612 = (((((v611 >> 3) & 0x1BE5C26200000000 ^ 0x1001802200000000)
          - 0x5F325AA7344B9FE6
          - ((2 * ((v611 >> 3) & 0x1BE5C26200000000 ^ 0x1001802200000000)) & 0x18B008000000000)) ^ v611) >> 32) ^ (((((v609 >> 3) & 0xE5C26219000000 ^ 0xE0402011000000) + 0x6703218889BF8FD7 - ((2 * ((v609 >> 3) & 0xE5C26219000000 ^ 0xE0402011000000)) & 0x2000012000000)) ^ v609) >> 24);
  uint64_t v613 = (*(void *)(v8 + 8 * (v598 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  unint64_t v614 = v612 ^ ((((((v613 - ((2 * v613) & 0x306D9E7EE3463CuLL) + 0x201836CF3F71A31ELL) >> 3) & 0x6219A0D800 ^ 0x4001A01000)
                 - ((2
                   * (((v613 - ((2 * v613) & 0x306D9E7EE3463CuLL) + 0x201836CF3F71A31ELL) >> 3) & 0x6219A0D800 ^ 0x4001A01000)) & 0x8432410000)
                 + 0x201837CF3F71A31ELL) ^ (v613 - ((2 * v613) & 0x306D9E7EE3463CLL) + 0x201836CF3F71A31ELL)) >> 8);
  uint64_t v615 = (*(void *)(v8 + 8 * (v600 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  unint64_t v616 = *(void *)(v8 + 8 * (v604 ^ 0x23));
  STACK[0x5B0] = v614 ^ ((((((v615 - ((2 * v615) & 0x3D4E2BC713A718uLL) + 0x2B5EA715E389D38CLL) >> 3) & 0xC26219A00000 ^ 0xC06218200000)
                         - ((2
                           * (((v615 - ((2 * v615) & 0x3D4E2BC713A718uLL) + 0x2B5EA715E389D38CLL) >> 3) & 0xC26219A00000 ^ 0xC06218200000)) & 0x1040003000000)
                         + 0x2B5FA715E389D38CLL) ^ (v615 - ((2 * v615) & 0x3D4E2BC713A718) + 0x2B5EA715E389D38CLL)) >> 16);
  unint64_t v617 = ((v616 >> 11) ^ 0x1966119E8E4CAELL)
       - 0x3C0819620D05D741
       - ((2 * ((v616 >> 11) ^ 0x1966119E8E4CAELL)) & 0x2FCD3BE5F4517ELL);
  uint64_t v618 = *(void *)(v8 + 8 * (v605 ^ 0x23));
  *((void *)&v498 + 1) = v618 ^ 0x1F8;
  *(void *)&long long v498 = v618 ^ 0xCB308CF472657000;
  unint64_t v619 = (v498 >> 11) - 0x22D786E64686BE46 - ((2 * (v498 >> 11)) & 0xBA50F23372F28374);
  uint64_t v620 = *(void *)(v8 + 8 * (v602 ^ 0x23));
  *((void *)&v498 + 1) = v620 ^ 0x1F8;
  *(void *)&long long v498 = v620 ^ 0xCB308CF472657000;
  unint64_t v621 = (v498 >> 11) - 0x4B6E30D7C5BD0B99 - ((2 * (v498 >> 11)) & 0x69239E507485E8CELL);
  uint64_t v622 = (*(void *)(v8 + 8 * (v603 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  STACK[0x598] = (((((v619 >> 3) & 0xE5C26219000000 ^ 0xA5022211000000)
                  - 0x22D786E64686BE46
                  - ((2 * ((v619 >> 3) & 0xE5C26219000000 ^ 0xA5022211000000)) & 0x40800032000000)) ^ v619) >> 24) ^ (((((v617 >> 3) & 0xC26219A00000 ^ 0xC04218000000) - 0x3C0819620D05D741 - ((2 * ((v617 >> 3) & 0xC26219A00000 ^ 0xC04218000000)) & 0x1840021400000)) ^ v617) >> 16) ^ (((((v621 >> 3) & 0x1BE5C26200000000 ^ 0x1280006000000000) - 0x4B6E30D7C5BD0B99 - ((2 * ((v621 >> 3) & 0x1BE5C26200000000 ^ 0x1280006000000000)) & 0x2103844000000000)) ^ v621) >> 32) ^ ((((((v622 - ((2 * v622) & 0x964E027B50F5AuLL) + 0x74E4B27013DA87ADLL) >> 3) & 0x6219A0D800 ^ 0x4200205000) - ((2 * (((v622 - ((2 * v622) & 0x964E027B50F5AuLL) + 0x74E4B27013DA87ADLL) >> 3) & 0x6219A0D800 ^ 0x4200205000)) & 0xC023010000) + 0x74E4B37013DA87ADLL) ^ (v622 - ((2 * v622) & 0x964E027B50F5ALL) + 0x74E4B27013DA87ADLL)) >> 8);
  uint64_t v623 = (*(void *)(v8 + 8 * (v607 ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  unint64_t v624 = v623 + 0x13948832443A2258 - ((2 * v623) & 0x291064887444B0);
  uint64_t v625 = *(void *)(v8 + 8 * (v606 ^ 0x23));
  *((void *)&v498 + 1) = v625 ^ 0x1F8;
  *(void *)&long long v498 = v625 ^ 0xCB308CF472657000;
  unint64_t v626 = (v498 >> 11) + 0x8E0DB45C06D8384 - ((2 * (v498 >> 11)) & 0x11C1B68B80DB0708);
  uint64_t v627 = *(void *)(v8 + 8 * (*(unsigned __int8 *)(v20 + (BYTE2(v599) ^ 0xE1)) ^ 0x23));
  *((void *)&v498 + 1) = v627 ^ 0x1F8;
  *(void *)&long long v498 = v627 ^ 0xCB308CF472657000;
  unint64_t v628 = (v498 >> 11) + 0x5FEF5058390359BFLL - ((2 * (v498 >> 11)) & 0xBFDEA0B07206B37ELL);
  uint64_t v629 = (*(void *)(v8 + 8 * (*(unsigned __int8 *)(v20 + (BYTE2(v601) ^ 0x91)) ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  unint64_t v630 = v629 - ((2 * v629) & 0x286B5A8EC6DF0CLL) - 0x352BCA52B89C907ALL;
  uint64_t v631 = (*(void *)(v8 + 8 * (*(unsigned __int8 *)(v20 + (BYTE1(v601) ^ 0xD7)) ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v632 = (*(void *)(v8 + 8 * (*(unsigned __int8 *)(v20 + (BYTE2(v594) ^ 0xDDLL)) ^ 0x23)) >> 11) ^ 0x1966119E8E4CAELL;
  uint64_t v633 = *(void *)(v8 + 8 * (*(unsigned __int8 *)(v20 + (BYTE2(v596) ^ 0x7FLL)) ^ 0x23));
  *((void *)&v498 + 1) = v633 ^ 0x1F8;
  *(void *)&long long v498 = v633 ^ 0xCB308CF472657000;
  uint64_t v634 = v498 >> 11;
  uint64_t v635 = *(void *)(v8 + 8 * (*(unsigned __int8 *)(v20 + (BYTE1(v599) ^ 0xCLL)) ^ 0x23));
  *((void *)&v498 + 1) = v635 ^ 0x1F8;
  *(void *)&long long v498 = v635 ^ 0xCB308CF472657000;
  unint64_t v636 = (v498 >> 11) - 0x42A8992E7BB678DELL - ((2 * (v498 >> 11)) & 0x7AAECDA308930E44);
  unint64_t v637 = (STACK[0x598] ^ 0xA3AEA966)
       - ((2 * (STACK[0x598] ^ 0xA3AEA966)) & 0x3B1D08B4)
       - 0x19D52A51E2717BA6;
  LODWORD(v624) = (((((v626 >> 3) & 0xE5C26219000000 ^ 0x4026018000000)
                   + 0x8E0DB45C06D8384
                   - ((2 * ((v626 >> 3) & 0xE5C26219000000 ^ 0x4026018000000)) & 0x1C1848000000000)) ^ v626) >> 24) ^ (((((v624 >> 3) & 0xC26219A00000 ^ 0x800208800000) + 0x13948832443A2258 - ((2 * ((v624 >> 3) & 0xC26219A00000 ^ 0x800208800000)) & 0x1004400400000)) ^ v624) >> 16) ^ (((((v628 >> 3) & 0x1BE5C26200000000 ^ 0xBE5C20200000000) + 0x5FEF5058390359BFLL - ((2 * ((v628 >> 3) & 0x1BE5C26200000000 ^ 0xBE5C20200000000)) & 0x37CA808000000000)) ^ v628) >> 32) ^ (((((v630 >> 3) & 0x6219A0D800 ^ 0x2008A04800) - ((2 * ((v630 >> 3) & 0x6219A0D800 ^ 0x2008A04800)) & 0x4002409000) - 0x352BC952B89C907ALL) ^ v630) >> 8);
  LODWORD(v631) = ((((((v632 + 0x2095C3509BF36BF6 - ((2 * v632) & 0x2B86A137E6D7ECuLL)) >> 3) & 0xC26219A00000 ^ 0x806211200000)
                   + 0x2095C3509BF36BF6
                   - ((2
                     * (((v632 + 0x2095C3509BF36BF6 - ((2 * v632) & 0x2B86A137E6D7ECuLL)) >> 3) & 0xC26219A00000 ^ 0x806211200000)) & 0x1848033400000)) ^ (v632 + 0x2095C3509BF36BF6 - ((2 * v632) & 0x2B86A137E6D7ECLL))) >> 16) ^ ((((((v631 + 0x3BBDFB56BA8A256ELL - ((2 * v631) & 0x3BF6AD75144ADCuLL)) >> 3) & 0x6219A0D800 ^ 0x6211004000) + 0x3BBDFB56BA8A256ELL - ((2 * (((v631 + 0x3BBDFB56BA8A256ELL - ((2 * v631) & 0x3BF6AD75144ADCuLL)) >> 3) & 0x6219A0D800 ^ 0x6211004000)) & 0x8431000000)) ^ (v631 + 0x3BBDFB56BA8A256ELL - ((2 * v631) & 0x3BF6AD75144ADCLL))) >> 8) ^ ((((((v634 - ((2 * v634) & 0x2BEFA60EE74B2C58uLL) + 0x15F7D30773A5962CLL) >> 3) & 0xE5C26219000000 ^ 0xA4C26008000000) - ((2 * (((v634 - ((2 * v634) & 0x2BEFA60EE74B2C58uLL) + 0x15F7D30773A5962CLL) >> 3) & 0xE5C26219000000 ^ 0xA4C26008000000)) & 0x1CB840422000000) + 0x16F7D30773A5962CLL) ^ (v634 - ((2 * v634) & 0x2BEFA60EE74B2C58) + 0x15F7D30773A5962CLL)) >> 24) ^ (((((v636 >> 3) & 0x1BE5C26200000000 ^ 0x13A0C04200000000) - 0x42A8992E7BB678DELL - ((2 * ((v636 >> 3) & 0x1BE5C26200000000 ^ 0x13A0C04200000000)) & 0x328A848000000000)) ^ v636) >> 32);
  unint64_t v638 = (STACK[0x5B0] ^ 0x1C808984)
       - ((2 * (STACK[0x5B0] ^ 0x1C808984)) & 0x8EDF5EE6)
       - 0x7B806A29B890508DLL;
  LODWORD(v594) = *(unsigned __int8 *)(v20 + (STACK[0x5B0] ^ 0x84));
  LODWORD(v562) = *(unsigned __int8 *)(v20
                                     + (((unsigned __int16)((v631 ^ 0x1249)
                                                                           - ((2 * (v631 ^ 0x1249)) & 0xBD4)
                                                                           + 1514) >> 8) ^ 5));
  uint64_t v639 = BYTE2(v638) ^ 0x6FLL;
  uint64_t v640 = STACK[0x598] ^ 0x66;
  LODWORD(v630) = *(unsigned __int8 *)(v20 + (BYTE2(v637) ^ 0x8ELL));
  uint64_t v641 = BYTE1(v638) ^ 0xAFLL;
  unint64_t v642 = STACK[0x448];
  unint64_t v643 = STACK[0x448] - 0x138A5B0312551205;
  unint64_t v644 = STACK[0x448] - 0x138A5B03125511F5;
  LODWORD(STACK[0x558]) = *(unsigned __int8 *)(v20
                                             + ((((v624 ^ 0xB1268BB8)
                                                - (unint64_t)((2 * (v624 ^ 0xB1268BB8)) & 0x8CBD162E)
                                                + 0x3B662511465E8B17) >> 24) ^ 0x3B66251146));
  int v645 = *(unsigned __int8 *)(v20 + (BYTE1(v637) ^ 0x84));
  LODWORD(v638) = *(unsigned __int8 *)(v20 + ((v638 >> 24) ^ 0x847F95D647));
  LODWORD(STACK[0x550]) = *(unsigned __int8 *)(v20 + (v631 ^ 0x49));
  LODWORD(v635) = *(unsigned __int8 *)(v20
                                     + ((((v631 ^ 0x68E61249)
                                        - (unint64_t)((2 * (v631 ^ 0x68E61249)) & 0xEDE40BD4)
                                        - 0x225C381C890DFA16) >> 24) ^ 0xDDA3C7E376));
  LODWORD(STACK[0x538]) = *(unsigned __int8 *)(v20
                                             + (((unsigned __int16)((v624 ^ 0x8BB8)
                                                                                   - ((2 * (v624 ^ 0x8BB8)) & 0x162E)
                                                                                   - 29929) >> 8) ^ 0x8BLL));
  LODWORD(STACK[0x510]) = *(unsigned __int8 *)(v20
                                             + ((((v624 ^ 0xB1268BB8)
                                                                 - ((2 * (v624 ^ 0xB1268BB8)) & 0x8CBD162E)
                                                                 + 1180601111) >> 16) ^ 0x5ELL));
  LODWORD(v626) = *(unsigned __int8 *)(v20 + v639);
  LODWORD(v640) = *(unsigned __int8 *)(v20 + v640);
  LODWORD(v639) = *(unsigned __int8 *)(v20 + v641);
  LODWORD(v576) = *(unsigned __int8 *)(v20
                                     + ((((v631 ^ 0x68E61249)
                                                         - ((2 * (v631 ^ 0x68E61249)) & 0xEDE40BD4)
                                                         + 1995572714) >> 16) ^ 0xF2));
  LODWORD(v632) = *(unsigned __int8 *)(v20 + (v624 ^ 0xB8));
  LODWORD(v624) = *(unsigned __int8 *)(v20 + ((v637 >> 24) ^ 0xE62AD5AE1DLL));
  v646 = *(uint64_t (**)(void))(STACK[0x4D0] + 8 * (LODWORD(STACK[0x5B8]) ^ (197 * ((STACK[0x540] & 1) == 0))));
  STACK[0x3B8] = v642 - 0x138A5B03125511FDLL;
  STACK[0x3A0] = v644;
  STACK[0x3B0] = v643;
  LODWORD(STACK[0x5B0]) = v639;
  LODWORD(STACK[0x5A8]) = v562;
  LODWORD(STACK[0x5A0]) = v594;
  LODWORD(STACK[0x598]) = v630;
  LODWORD(STACK[0x590]) = v635;
  LODWORD(STACK[0x588]) = v632;
  LODWORD(STACK[0x580]) = v645;
  LODWORD(STACK[0x578]) = v576;
  LODWORD(STACK[0x560]) = v638;
  LODWORD(STACK[0x548]) = v626;
  LODWORD(STACK[0x528]) = v624;
  LODWORD(STACK[0x520]) = v640;
  return v646();
}

uint64_t sub_18DA02334()
{
  unint64_t v0 = (LODWORD(STACK[0x570]) + 1237420055) & 0xB63E7CF6;
  unint64_t v1 = STACK[0x500];
  unint64_t v2 = LODWORD(STACK[0x454]) ^ STACK[0x500] ^ 0x22;
  int v3 = LODWORD(STACK[0x45C]) ^ STACK[0x500] ^ 0xFFFFFFA1;
  unint64_t v4 = LODWORD(STACK[0x474]) ^ STACK[0x500] ^ 0xFFFFFFFC;
  unint64_t v5 = LODWORD(STACK[0x47C]) ^ STACK[0x500] ^ 0xFFFFFF81;
  unint64_t v6 = LODWORD(STACK[0x484]) ^ STACK[0x500] ^ 0x74 ^ v0;
  unint64_t v7 = LODWORD(STACK[0x46C]) ^ STACK[0x500] ^ 0xFFFFFFDD;
  unint64_t v8 = LODWORD(STACK[0x460]) ^ STACK[0x500] ^ 0x79;
  unint64_t v9 = LODWORD(STACK[0x464]) ^ STACK[0x500] ^ 0x5D;
  int v10 = LODWORD(STACK[0x480]) ^ STACK[0x500] ^ 0x24;
  unint64_t v11 = LODWORD(STACK[0x48C]) ^ STACK[0x500] ^ 0xFFFFFFC1;
  unint64_t v12 = LODWORD(STACK[0x478]) ^ STACK[0x500] ^ 0xFFFFFFA0;
  unint64_t v13 = LODWORD(STACK[0x488]) ^ STACK[0x500] ^ 0xFFFFFFD8;
  unint64_t v14 = LODWORD(STACK[0x468]) ^ STACK[0x500] ^ 0x4B;
  STACK[0x5B8] = LODWORD(STACK[0x450]) ^ STACK[0x500] ^ 0x54;
  unint64_t v15 = LODWORD(STACK[0x458]) ^ v1 ^ 0xFFFFFFC6;
  unint64_t v16 = LODWORD(STACK[0x470]) ^ v1 ^ 0x79;
  int v17 = STACK[0x518];
  STACK[0x400] = v5;
  STACK[0x490] = v6;
  STACK[0x4A8] = v13;
  STACK[0x4C0] = v11;
  LODWORD(STACK[0x500]) = v10;
  BOOL v18 = v17 == 37;
  LODWORD(STACK[0x518]) = (v3 ^ 0xFFFFFFEB) - ((2 * (v3 ^ 0xFFFFFFEB) + 114) & 0x4A);
  LODWORD(STACK[0x570]) = v0 ^ 0xDE5;
  unint64_t v19 = v0;
  LODWORD(STACK[0x3F0]) = (v4 ^ ((v0 ^ 0xDE5) - 49)) + (~(2 * (v4 ^ ((v0 ^ 0xDE5) - 49)) + 114) | 0xFFFFFFB5);
  LODWORD(STACK[0x3EC]) = (v2 ^ 0x3B) - ((2 * (v2 ^ 0x3B) + 114) & 0x4A);
  STACK[0x3E0] = v4;
  LODWORD(STACK[0x3D0]) = (v5 ^ 0x27) - ((2 * (v5 ^ 0x27) + 114) & 0x4A);
  LODWORD(STACK[0x3DC]) = (v6 ^ 0x32) - ((2 * (v6 ^ 0x32) + 114) & 0x4A);
  LODWORD(STACK[0x3E8]) = (v7 ^ 0x1F) - ((2 * (v7 ^ 0x1F) + 114) & 0x4A);
  LODWORD(STACK[0x3C8]) = (v14 ^ 0x54) - ((2 * (v14 ^ 0x54) + 114) & 0x4A);
  LODWORD(STACK[0x3CC]) = (v9 ^ 0x11) - ((2 * (v9 ^ 0x11) + 14) & 0x4A);
  LOBYTE(v17) = v14;
  STACK[0x4A0] = v14;
  LODWORD(STACK[0x3C4]) = (v13 ^ 0x5B) - ((2 * (v13 ^ 0x5B) + 114) & 0x4A);
  unsigned __int8 v20 = v2;
  STACK[0x3F8] = v2;
  LODWORD(v14) = (v10 ^ 0x48) - ((2 * (v10 ^ 0x48) + 114) & 0x4A);
  LODWORD(v0) = (v11 ^ 0xFFFFFF90) - ((2 * (v11 ^ 0xFFFFFF90) + 114) & 0x4A);
  unsigned __int8 v21 = v7;
  STACK[0x498] = v7;
  LODWORD(v7) = (v8 ^ 0xFFFFFF89) - ((2 * (v8 ^ 0xFFFFFF89) + 114) & 0x4A);
  int v22 = (v16 ^ 0xFFFFFFB1) - ((2 * (v16 ^ 0xFFFFFFB1) + 114) & 0x4A);
  STACK[0x4C8] = v19;
  LOBYTE(v2) = v3;
  LODWORD(STACK[0x3AC]) = v19 - 774;
  unsigned __int8 v23 = v9;
  STACK[0x4B8] = v9;
  unint64_t v24 = STACK[0x530];
  int v25 = *(unsigned __int8 *)(STACK[0x530] + ((v19 - 6) ^ v3 ^ 0xFA));
  int v26 = *(unsigned __int8 *)(STACK[0x530] + (v20 ^ 0x40));
  int v27 = *(unsigned __int8 *)(STACK[0x530] + (v5 ^ 0x5CLL));
  LODWORD(v5) = *(unsigned __int8 *)(STACK[0x530] + (v6 ^ 0x49));
  LODWORD(v6) = *(unsigned __int8 *)(STACK[0x530] + (v21 ^ 0x64));
  int v28 = *(unsigned __int8 *)(STACK[0x530] + (v17 ^ 0x2FLL));
  int v29 = *(unsigned __int8 *)(STACK[0x530] + (v23 ^ 0x95));
  STACK[0x4F8] = v15;
  int v30 = *(unsigned __int8 *)(v24 + (v13 ^ 0x20));
  int v31 = *(unsigned __int8 *)(v24 + (v10 ^ 0x48) - (((2 * v10) ^ 0x99999999) & 0xF6) + 123);
  STACK[0x4E8] = v8;
  LOBYTE(v4) = v16;
  STACK[0x4F0] = v16;
  LODWORD(v16) = *(unsigned __int8 *)(v24 + (v11 ^ 0xEBLL));
  int v32 = *(unsigned __int8 *)(v24 + (v8 ^ 0xF2));
  LODWORD(v4) = *(unsigned __int8 *)(v24 + (v4 ^ 0xCALL));
  LODWORD(v13) = *(unsigned __int8 *)(v24 + (v15 ^ 0xB8));
  STACK[0x508] = v12;
  int v33 = *(unsigned __int8 *)(v24 + (v12 ^ 7));
  LODWORD(v24) = *(unsigned __int8 *)(v24 + (STACK[0x5B8] ^ 0xBLL));
  int v34 = (v12 ^ 0x7C) - ((2 * (v12 ^ 0x7C) + 114) & 0x4A);
  int v35 = (STACK[0x5B8] ^ 0x70) + (~(2 * (STACK[0x5B8] ^ 0x70) + 114) | 0xFFFFFFB5);
  unsigned int v36 = LODWORD(STACK[0x5A0]) ^ (LODWORD(STACK[0x518]) + 94) ^ v25 ^ 0xFFFFFFE6;
  LOBYTE(v8) = v36 - ((2 * v36) & 0x9A);
  int v37 = (LODWORD(STACK[0x3D0]) + 94) ^ v27 ^ LODWORD(STACK[0x598]);
  LODWORD(STACK[0x530]) = (v37 ^ 0xFFFFFF81) + ~(2 * ((v37 ^ 0xFFFFFF81) & 0x7B ^ v37 & 8));
  unsigned int v38 = LODWORD(STACK[0x558]) ^ (LODWORD(STACK[0x3EC]) + 94) ^ v26 ^ 0xFFFFFFBF;
  LOBYTE(v12) = v38 - ((2 * v38) & 0x3A);
  int v39 = (LODWORD(STACK[0x3DC]) + 94) ^ v5 ^ LODWORD(STACK[0x580]);
  LOBYTE(v5) = (v39 ^ 0xC) - ((2 * v39) & 0xA2);
  int v40 = (LODWORD(STACK[0x3C8]) + 94) ^ v28 ^ LODWORD(STACK[0x550]);
  LODWORD(STACK[0x558]) = (v40 ^ 0xFFFFFF84) + (~(2 * v40) | 0x2D);
  int v41 = LODWORD(STACK[0x560]) ^ (LODWORD(STACK[0x3E8]) + 94) ^ v6 ^ 0x1A;
  LODWORD(STACK[0x560]) = v41 - ((2 * v41) & 0x4C);
  int v42 = (LODWORD(STACK[0x3CC]) - 20) ^ v29 ^ LODWORD(STACK[0x510]);
  LODWORD(STACK[0x580]) = (v42 ^ 8) - ((2 * v42) & 0x22);
  int v43 = LODWORD(STACK[0x538]) ^ (LODWORD(STACK[0x3C4]) + 94) ^ v30 ^ 0x1A;
  LODWORD(STACK[0x5A0]) = v43 - ((2 * v43) & 0x72);
  int v44 = LODWORD(STACK[0x520]) ^ (v14 + 94) ^ v31 ^ 1;
  LODWORD(STACK[0x5A8]) = v44 - ((2 * v44) & 0xFFFFFF92);
  LODWORD(STACK[0x598]) = ((v0 + 94) ^ v16 ^ LODWORD(STACK[0x548]) ^ 0xFFFFFF94)
                        - ((2 * ((v0 + 94) ^ v16 ^ LODWORD(STACK[0x548]))) & 0xFFFFFF96);
  int v45 = LODWORD(STACK[0x590]) ^ (v7 + 94) ^ v32 ^ 0xFFFFFFF9;
  char v46 = v45 - ((2 * v45) & 0xC8);
  int v47 = LODWORD(STACK[0x528]) ^ (v34 + 94) ^ v33 ^ 0x34;
  char v48 = v47 - ((2 * v47) & 0xC7);
  LOBYTE(v47) = v2 ^ 0x4E ^ (v8 + 77);
  int v49 = LODWORD(STACK[0x578]) ^ (v22 + 94) ^ v4 ^ 0xFFFFFFB9;
  char v50 = v49 + (~(2 * v49) | 0x11);
  LODWORD(v1) = LODWORD(STACK[0x588]) ^ ((v15 ^ 0xFFFFFFC3) - ((2 * (v15 ^ 0xFFFFFFC3) + 114) & 0x4A) + 94) ^ v13 ^ 0xFFFFFFD6;
  char v51 = v1 + (~(2 * v1) | 0x47);
  int v52 = ((v35 + 95) ^ v24 ^ LODWORD(STACK[0x5B0]) ^ 0xFFFFFFA5)
      - ((2 * ((v35 + 95) ^ v24 ^ LODWORD(STACK[0x5B0]))) & 0xFFFFFFB0);
  unint64_t v53 = (char *)*(&off_1E559D8D0 + (int)v19 - 2102) - 8;
  unsigned int v54 = -43 * v53[v47] - ((42 * v53[v47] + 34) & 0x30) + 9;
  int v55 = (((v54 >> 3) & 0xA ^ 2) - ((v54 >> 2) & 0x10) + 24) ^ v54;
  int v56 = v53[STACK[0x3F8] ^ 0xCE ^ (v12 + 29)];
  unsigned int v57 = -43 * v56 - ((42 * v56 + 98) & 0x56) - 100;
  int v58 = (-((v57 >> 3) & 0xA) - 85) ^ v57;
  LODWORD(v1) = v53[STACK[0x490] ^ 0xB ^ (v5 - 47)];
  LODWORD(v1) = ((-43 * v1) ^ 0xFFFFFF80) - ((10 * (_BYTE)v1 + 2) & 0xE);
  int v59 = ((((v1 + 120) >> 3) & 0xA) - (((v1 + 120) >> 2) & 4) - 121) ^ (v1 - 8);
  int v60 = v53[STACK[0x498] ^ 0x51 ^ (LODWORD(STACK[0x560]) - 90)];
  unsigned int v61 = -43 * v60 - ((-30 - 86 * v60) & 0xFFFFFFDF) + 96;
  int v62 = (111 - ((v61 >> 3) & 0xA ^ 8)) ^ v61;
  int v63 = v53[STACK[0x4B8] ^ 0xE8 ^ (LODWORD(STACK[0x580]) + 17)];
  unsigned int v64 = -43 * v63 - ((-30 - 86 * v63) & 0xFFFFFF9F) - 64;
  int v65 = (((v64 >> 3) & 0xA ^ 8) + ~(2 * ((v64 >> 3) & 0xA ^ 8)) - 48) ^ v64;
  int v66 = v18;
  LODWORD(STACK[0x5B0]) = v66;
  unsigned __int8 v67 = v46 + 100;
  char v68 = v48 - 29;
  char v69 = v51 + 93;
  char v70 = v52 + 88;
  int v71 = v53[LODWORD(STACK[0x500]) ^ 0xE9 ^ (LODWORD(STACK[0x5A8]) + 73)];
  unsigned int v72 = -43 * v71 - ((10 * v71 + 2) & 0x12) + 122;
  int v73 = (((v72 >> 3) & 0xA) - ((v72 >> 2) & 0x10) - 119) ^ v72;
  int v74 = v53[STACK[0x4E8] ^ 5 ^ v67];
  unsigned int v75 = -43 * v74 - ((42 * (_BYTE)v74 + 98) & 0x7E) + 48;
  int v76 = (63 - ((v75 >> 3) & 0xA ^ 2)) ^ v75;
  int v77 = (~(-30 - 86 * v53[STACK[0x4F0] ^ 0xAE ^ (v50 - 8)]) | 0x45)
      - 43 * v53[STACK[0x4F0] ^ 0xAE ^ (v50 - 8)]
      + 79;
  unsigned __int8 v78 = STACK[0x4F8] ^ v69 ^ 0x77;
  int v79 = ((~((v77 & 0xF8) >> 3) & 0xA) - ((2 * ~((v77 & 0xF8) >> 3)) & 0x10) + 93) ^ v77;
  unsigned int v80 = -43 * v53[v78] - ((-30 - 86 * v53[v78]) & 0xFFFFFFC3) + 82;
  int v81 = (v80 >> 3) & 0xA ^ v80;
  int v82 = v53[(STACK[0x508] ^ v68) ^ 0x77];
  unsigned int v83 = (~(-30 - 86 * v82) | 0x57) - 43 * v82 + 70;
  int v84 = v53[(STACK[0x5B8] ^ v70) ^ 0xC0];
  unsigned int v85 = -43 * v84 - ((42 * (_BYTE)v84 + 98) & 0x7C) - 81;
  unsigned int v86 = (((v85 >> 3) & 0xA ^ 2) + ((2 * ((v85 >> 3) & 0xA)) ^ 0xFFFFFFFB) - 65) ^ v85;
  int v87 = (v83 >> 3) & 0xA ^ v83;
  LODWORD(STACK[0x530]) = v87;
  STACK[0x598] = v58 ^ 0x1Au;
  STACK[0x580] = v59 ^ 0x5Cu;
  STACK[0x5B8] = v76 ^ 0x6Du;
  STACK[0x5A0] = v62 ^ 0x1Bu;
  STACK[0x5A8] = v65 ^ 0xFFFFFFCF;
  LODWORD(STACK[0x588]) = v73 ^ 0x16;
  LODWORD(STACK[0x590]) = v55 ^ 0x4B;
  int v88 = STACK[0x4C8] | LODWORD(STACK[0x5B0]);
  LODWORD(STACK[0x520]) = v86;
  uint64_t v89 = *(uint64_t (**)(void))(STACK[0x4D0] + 8 * v88);
  LODWORD(STACK[0x528]) = v79;
  LODWORD(STACK[0x538]) = v81;
  STACK[0x548] = v87 ^ 0xFFFFFFBD;
  STACK[0x578] = v79 ^ 0xFFFFFFD3;
  return v89();
}

void sub_18DA03CD8(char a1, unsigned __int8 a2, unsigned __int8 a3, int a4, unsigned __int8 a5, unsigned __int8 a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  LODWORD(STACK[0x540]) = 0;
  unsigned __int8 v83 = (LODWORD(STACK[0x570]) - 21) ^ a1;
  STACK[0x560] = v78;
  STACK[0x5B0] = v79;
  STACK[0x558] = a7;
  STACK[0x550] = v70;
  unint64_t v84 = ((unint64_t)(a4 ^ 0x80u) << 56) | ((unint64_t)(v82 ^ 0x80u) << 48) | ((unint64_t)(v72 ^ 0x80u) << 40) | ((unint64_t)v83 << 32);
  unint64_t v85 = ((unint64_t)(v69 ^ 0xEDu) << 56) | ((unint64_t)(a2 ^ 0x80u) << 48) | ((unint64_t)(a3 ^ 0x80u) << 40);
  uint64_t v86 = *(void *)(v74 + 8 * a67);
  *((void *)&v88 + 1) = v86 ^ 0x1F8;
  *(void *)&long long v88 = v86 ^ 0xCB308CF472657000;
  uint64_t v87 = v88 >> 11;
  uint64_t v89 = *(void *)(v74 + 8 * STACK[0x258]);
  *((void *)&v88 + 1) = v89 ^ 0x1F8;
  *(void *)&long long v88 = v89 ^ 0xCB308CF472657000;
  uint64_t v90 = v88 >> 11;
  uint64_t v91 = *(void *)(v74 + 8 * STACK[0x250]);
  *((void *)&v88 + 1) = v91 ^ 0x1F8;
  *(void *)&long long v88 = v91 ^ 0xCB308CF472657000;
  uint64_t v92 = v88 >> 11;
  uint64_t v93 = *(void *)(v74 + 8 * STACK[0x248]);
  unint64_t v94 = v73;
  *((void *)&v88 + 1) = v93 ^ 0x1F8;
  *(void *)&long long v88 = v93 ^ 0xCB308CF472657000;
  uint64_t v95 = v88 >> 11;
  uint64_t v96 = *(void *)(v74 + 8 * STACK[0x228]);
  *((void *)&v88 + 1) = v96 ^ 0x1F8;
  *(void *)&long long v88 = v96 ^ 0xCB308CF472657000;
  uint64_t v97 = v88 >> 11;
  uint64_t v98 = *(void *)(v74 + 8 * STACK[0x220]);
  *((void *)&v88 + 1) = v98 ^ 0x1F8;
  *(void *)&long long v88 = v98 ^ 0xCB308CF472657000;
  uint64_t v99 = v88 >> 11;
  uint64_t v100 = *(void *)(v74 + 8 * STACK[0x210]);
  int v101 = v80;
  unsigned __int8 v102 = v81;
  *((void *)&v88 + 1) = v100 ^ 0x1F8;
  *(void *)&long long v88 = v100 ^ 0xCB308CF472657000;
  uint64_t v105 = v88 >> 11;
  uint64_t v106 = *(void *)(v74 + 8 * STACK[0x208]);
  int v107 = v75;
  *((void *)&v88 + 1) = v106 ^ 0x1F8;
  *(void *)&long long v88 = v106 ^ 0xCB308CF472657000;
  uint64_t v108 = v88 >> 11;
  unint64_t v109 = v85 | ((unint64_t)(v71 ^ 0x80u) << 32);
  uint64_t v110 = (*(void *)(v74 + 8 * STACK[0x268]) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(v106) = ((((((v110 - 0x4DA5A0DD0BE83839 - ((2 * v110) & 0x34BE45E82F8F8EuLL)) >> 3) & 0x6219A0D800 ^ 0x601880D800)
                   - 0x4DA5A0DD0BE83839
                   - ((2
                     * (((v110 - 0x4DA5A0DD0BE83839 - ((2 * v110) & 0x34BE45E82F8F8EuLL)) >> 3) & 0x6219A0D800 ^ 0x601880D800)) & 0x4420018000)) ^ (v110 - 0x4DA5A0DD0BE83839 - ((2 * v110) & 0x34BE45E82F8F8ELL))) >> 8) ^ ((((((v87 + 0x6C00E096F43FDB96 - ((2 * v87) & 0xD801C12DE87FB72CLL)) >> 3) & 0x1BE5C26200000000 ^ 0x980000200000000) + 0x6C00E096F43FDB96 - ((2 * (((v87 + 0x6C00E096F43FDB96 - ((2 * v87) & 0xD801C12DE87FB72CLL)) >> 3) & 0x1BE5C26200000000 ^ 0x980000200000000)) & 0x1001800400000000)) ^ (v87 + 0x6C00E096F43FDB96 - ((2 * v87) & 0xD801C12DE87FB72CLL))) >> 32);
  uint64_t v111 = (*(void *)(v74 + 8 * STACK[0x260]) >> 11) ^ 0x1966119E8E4CAELL;
  int v112 = v76;
  int v113 = v106 ^ ((((((v111 - ((2 * v111) & 0x121AAD8DE460BEuLL) - 0x416F2A9390DCFA1) >> 3) & 0xC26219A00000 ^ 0x2218800000)
                 - ((2
                   * (((v111 - ((2 * v111) & 0x121AAD8DE460BEuLL) - 0x416F2A9390DCFA1) >> 3) & 0xC26219A00000 ^ 0x2218800000)) & 0x8401400000)
                 - 0x415F2A9390DCFA1) ^ (v111 - ((2 * v111) & 0x121AAD8DE460BELL) - 0x416F2A9390DCFA1)) >> 16) ^ ((((((v90 - ((2 * v90) & 0xB878D847BFFEC554) + 0x5C3C6C23DFFF62AALL) >> 3) & 0xE5C26219000000 ^ 0x85800019000000) - ((2 * (((v90 - ((2 * v90) & 0xB878D847BFFEC554) + 0x5C3C6C23DFFF62AALL) >> 3) & 0xE5C26219000000 ^ 0x85800019000000)) & 0x48804432000000) + 0x3C6C23DFFF62AALL) ^ (v90 - ((2 * v90) & 0xB878D847BFFEC554) + 0x5C3C6C23DFFF62AALL)) >> 24);
  LODWORD(v106) = ((((((v95 + 0x400DF02AFEFD7A0ALL - ((2 * v95) & 0x801BE055FDFAF414)) >> 3) & 0x1BE5C26200000000 ^ 0x801820000000000)
                   + 0x400DF02AFEFD7A0ALL
                   - ((2
                     * (((v95 + 0x400DF02AFEFD7A0ALL - ((2 * v95) & 0x801BE055FDFAF414)) >> 3) & 0x1BE5C26200000000 ^ 0x801820000000000)) & 0xB804400000000)) ^ (v95 + 0x400DF02AFEFD7A0ALL - ((2 * v95) & 0x801BE055FDFAF414))) >> 32) ^ ((((((v92 - ((2 * v92) & 0x58CAC42D44E7582EuLL) - 0x539A9DE95D8C53E9) >> 3) & 0xE5C26219000000 ^ 0x84804210000000) + 0x656216A273AC18 + (~(2 * (((v92 - ((2 * v92) & 0x58CAC42D44E7582EuLL) - 0x539A9DE95D8C53E9) >> 3) & 0xE5C26219000000 ^ 0x84804210000000)) | 0x357BFBFFFFFFFFLL)) ^ (v92 - ((2 * v92) & 0x58CAC42D44E7582ELL) - 0x539A9DE95D8C53E9)) >> 24);
  uint64_t v114 = (*(void *)(v74 + 8 * STACK[0x240]) >> 11) ^ 0x1966119E8E4CAELL;
  int v115 = v106 - ((2 * v106) & 0xD094CF5A) - 397776947;
  LODWORD(v111) = (2 * (v115 & 4)) ^ 8 | v115 & 4;
  int v116 = ((((((v114 - ((2 * v114) & 0x735E08EC7AE24uLL) - 0x45C650FB89C28EELL) >> 3) & 0x6219A0D800 ^ 0x4208A05800)
          - ((2
            * (((v114 - ((2 * v114) & 0x735E08EC7AE24uLL) - 0x45C650FB89C28EELL) >> 3) & 0x6219A0D800 ^ 0x4208A05800)) & 0xC00241A000)
          + 0xF04763D712) ^ (v114 - ((2 * v114) & 0x735E08EC7AE24) - 0x45C650FB89C28EELL)) >> 8) ^ 0x5624F27C;
  BOOL v117 = ((v111 - 4) & v116) == 0;
  int v118 = v111 + 1522042061;
  int v119 = 1522042069 - v111;
  if (v117) {
    int v119 = v118;
  }
  int v120 = v116 - 1522042065 + v119;
  uint64_t v121 = (*(void *)(v74 + 8 * STACK[0x238]) >> 11) ^ 0x1966119E8E4CAELL;
  int v122 = ((((((v121 - ((2 * v121) & 0x20BE762918A3F0uLL) - 0x1B0FA0C4EB73AE08) >> 3) & 0xC26219A00000 ^ 0x26200800000)
          - ((2
            * (((v121 - ((2 * v121) & 0x20BE762918A3F0uLL) - 0x1B0FA0C4EB73AE08) >> 3) & 0xC26219A00000 ^ 0x26200800000)) & 0x844421000000)
          + 0x5F3B148C51F8) ^ (v121 - ((2 * v121) & 0x20BE762918A3F0) - 0x1B0FA0C4EB73AE08)) >> 16) ^ ((v115 & 0xFFFFFFFB) - 32) ^ 0x267852B8;
  unint64_t v123 = *(void *)(v74 + 8 * a66);
  LODWORD(STACK[0x378]) = v122 ^ v120;
  unint64_t v124 = ((v123 >> 11) ^ 0x1966119E8E4CAELL)
       + 0xB52F3C828AAD8F1
       - ((2 * ((v123 >> 11) ^ 0x1966119E8E4CAELL)) & 0x25E7905155B1E2);
  uint64_t v125 = (*(void *)(v74 + 8 * STACK[0x230]) >> 11) ^ 0x1966119E8E4CAELL;
  LODWORD(STACK[0x374]) = ((((((v125 - 0xC4186BB91F75A30 - ((2 * v125) & 0x3CF288DC114BA0uLL)) >> 3) & 0xC26219A00000 ^ 0xC22009800000)
                           - 0xC4186BB91F75A30
                           - ((2
                             * (((v125 - 0xC4186BB91F75A30 - ((2 * v125) & 0x3CF288DC114BA0uLL)) >> 3) & 0xC26219A00000 ^ 0xC22009800000)) & 0x808010000000)) ^ (v125 - 0xC4186BB91F75A30 - ((2 * v125) & 0x3CF288DC114BA0))) >> 16) ^ (((((v124 >> 3) & 0x6219A0D800 ^ 0x6001005800) + 0xB52F3C828AAD8F1 - ((2 * ((v124 >> 3) & 0x6219A0D800 ^ 0x6001005800)) & 0x801141B000)) ^ v124) >> 8) ^ ((((((v99 + 0x41860E598EB5A255 - ((2 * v99) & 0x830C1CB31D6B44AALL)) >> 3) & 0x1BE5C26200000000 ^ 0x820C04200000000) + 0x41860E598EB5A255 - ((2 * (((v99 + 0x41860E598EB5A255 - ((2 * v99) & 0x830C1CB31D6B44AALL)) >> 3) & 0x1BE5C26200000000 ^ 0x820C04200000000)) & 0x308048000000000)) ^ (v99 + 0x41860E598EB5A255 - ((2 * v99) & 0x830C1CB31D6B44AALL))) >> 32) ^ 0xA1052778 ^ ((((((v97 - ((2 * v97) & 0xFD212467C77BB506) + 0x7E909233E3BDDA83) >> 3) & 0xE5C26219000000 ^ 0xC0024218000000) - ((2 * (((v97 - ((2 * v97) & 0xFD212467C77BB506) + 0x7E909233E3BDDA83) >> 3) & 0xE5C26219000000 ^ 0xC0024218000000)) & 0x1044402000000) + 0x7F909233E3BDDA83) ^ (v97 - ((2 * v97) & 0xFD212467C77BB506) + 0x7E909233E3BDDA83)) >> 24);
  uint64_t v126 = (*(void *)(v74 + 8 * STACK[0x218]) >> 11) ^ 0x1966119E8E4CAELL;
  unint64_t v127 = v105 + 0x51B4E3AED0ACF09ELL - ((2 * v105) & 0xA369C75DA159E13CLL);
  unint64_t v128 = STACK[0x5A8];
  LODWORD(v126) = (((((v127 >> 3) & 0xE5C26219000000 ^ 0x24806018000000)
                   + 0x51B4E3AED0ACF09ELL
                   - ((2 * ((v127 >> 3) & 0xE5C26219000000 ^ 0x24806018000000)) & 0x49844420000000)) ^ v127) >> 24) ^ ((((((v126 - 0x7F689D48A5D5FD7CLL - ((2 * v126) & 0x2EC56EB4540508uLL)) >> 3) & 0xC26219A00000 ^ 0xC04209000000) - 0x7F689D48A5D5FD7CLL - ((2 * (((v126 - 0x7F689D48A5D5FD7CLL - ((2 * v126) & 0x2EC56EB4540508uLL)) >> 3) & 0xC26219A00000 ^ 0xC04209000000)) & 0x844430400000)) ^ (v126 - 0x7F689D48A5D5FD7CLL - ((2 * v126) & 0x2EC56EB4540508))) >> 16) ^ ((((((v108 - 0x639D233AC26D1E30 - ((2 * v108) & 0x38C5B98A7B25C3A0uLL)) >> 3) & 0x1BE5C26200000000 ^ 0x1384420000000000) - 0x639D233AC26D1E30 - ((2 * (((v108 - 0x639D233AC26D1E30 - ((2 * v108) & 0x38C5B98A7B25C3A0uLL)) >> 3) & 0x1BE5C26200000000 ^ 0x1384420000000000)) & 0x30C1808000000000)) ^ (v108 - 0x639D233AC26D1E30 - ((2 * v108) & 0x38C5B98A7B25C3A0))) >> 32);
  uint64_t v129 = (*(void *)(v74 + 8 * STACK[0x200]) >> 11) ^ 0x1966119E8E4CAELL;
  unint64_t v130 = STACK[0x5A0];
  unsigned __int8 v131 = LODWORD(STACK[0x528]) ^ 0x80;
  unsigned __int8 v132 = LODWORD(STACK[0x538]) ^ 0xE9;
  int v133 = LODWORD(STACK[0x530]) ^ 0xDE;
  uint64_t v134 = LODWORD(STACK[0x520]) ^ 0x80u;
  LODWORD(STACK[0x370]) = v113 ^ 0x99C1B179;
  LODWORD(STACK[0x45C]) ^= LODWORD(STACK[0x2C0]) ^ 0xFFFFFFCB;
  LODWORD(STACK[0x47C]) ^= LODWORD(STACK[0x2E8]) ^ 0xFFFFFFC1;
  LODWORD(STACK[0x454]) ^= LODWORD(STACK[0x2C4]) ^ 0xFFFFFF9A;
  LODWORD(STACK[0x368]) = v126 ^ ((((((v129 - ((2 * v129) & 0x75C79B2477866uLL) - 0x2DFC51C326DC43CDLL) >> 3) & 0x6219A0D800 ^ 0x4219205000)
                                  - ((2
                                    * (((v129 - ((2 * v129) & 0x75C79B2477866uLL) - 0x2DFC51C326DC43CDLL) >> 3) & 0x6219A0D800 ^ 0x4219205000)) & 0x4032413000)
                                  + 0x3CD923BC33) ^ (v129 - ((2 * v129) & 0x75C79B2477866) - 0x2DFC51C326DC43CDLL)) >> 8) ^ 0xC14F23E3;
  LODWORD(STACK[0x458]) ^= LODWORD(STACK[0x2BC]) ^ 0xFFFFFFE3;
  LODWORD(STACK[0x464]) ^= LODWORD(STACK[0x2D8]) ^ 0x4F;
  LODWORD(STACK[0x488]) ^= LODWORD(STACK[0x2CC]) ^ 0x5D;
  LODWORD(STACK[0x474]) ^= LODWORD(STACK[0x2E0]) ^ 0x25;
  LODWORD(STACK[0x478]) ^= LODWORD(STACK[0x2D4]) ^ 0x63;
  LODWORD(STACK[0x484]) ^= LODWORD(STACK[0x2EC]) ^ 0xFFFFFFDC;
  LODWORD(STACK[0x48C]) ^= LODWORD(STACK[0x2B8]) ^ 0xFFFFFF8B;
  LODWORD(STACK[0x468]) ^= LODWORD(STACK[0x2B4]) ^ 0x46;
  LODWORD(STACK[0x470]) ^= LODWORD(STACK[0x2DC]) ^ 0x53;
  LODWORD(STACK[0x480]) ^= LODWORD(STACK[0x2C8]) ^ 0xFFFFFF96;
  LODWORD(STACK[0x460]) ^= LODWORD(STACK[0x2D0]) ^ 0xFFFFFFED;
  LODWORD(STACK[0x46C]) ^= LODWORD(STACK[0x2E4]) ^ 0xFFFFFF9B;
  LODWORD(STACK[0x450]) ^= STACK[0x2F0] ^ 0xFFFFFFFA;
  STACK[0x2A0] = (v77 ^ 0x80u | ((unint64_t)(v102 ^ 0x80u) << 8) | v84 & 0xFFFFFFFF0000FFFFLL | ((unint64_t)(a5 ^ 0x80u) << 24) | ((unint64_t)(a6 ^ 0x80u) << 16)) ^ 0x748B9B2BB5508237;
  STACK[0x2A8] = (v109 & 0xFFFFFFFF0000FFFFLL | ((unint64_t)v131 << 24) | ((unint64_t)v132 << 16) | v134 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v133 << 8)) ^ 0x4A33ED24BC363399;
  LODWORD(STACK[0x36C]) = v107;
  STACK[0x538] = v94;
  LODWORD(STACK[0x364]) = v94;
  LODWORD(STACK[0x360]) = STACK[0x5B8];
  LODWORD(STACK[0x35C]) = STACK[0x590];
  LODWORD(STACK[0x358]) = v112;
  LODWORD(STACK[0x354]) = STACK[0x578];
  LODWORD(STACK[0x350]) = STACK[0x558];
  LODWORD(STACK[0x34C]) = STACK[0x5B0];
  LODWORD(STACK[0x348]) = STACK[0x598];
  STACK[0x290] = a68;
  LODWORD(STACK[0x344]) = v130;
  LODWORD(STACK[0x340]) = v101;
  LODWORD(STACK[0x33C]) = STACK[0x550];
  LODWORD(STACK[0x338]) = STACK[0x588];
  LODWORD(STACK[0x334]) = STACK[0x580];
  STACK[0x298] = a69;
  LODWORD(STACK[0x330]) = v128;
  LODWORD(STACK[0x32C]) = STACK[0x560];
  JUMPOUT(0x18D9F6FECLL);
}

uint64_t sub_18DA0489C()
{
  LODWORD(STACK[0x5B0]) = v1;
  STACK[0x508] = v3;
  STACK[0x510] = v2;
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * ((7
                                * ((LODWORD(STACK[0x540]) ^ (LODWORD(STACK[0x3AC])
                                                                                             - 111)) & 1)) ^ LODWORD(STACK[0x3AC]))))();
}

void sub_18DA048F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,int a41,int a42,int a43,int a44,int a45,int a46,int a47,int a48,unsigned int a49,int a50,int a51,int a52,int a53,int a54,int a55)
{
  int v56 = *(unsigned __int8 *)(STACK[0x448] - 0x138A5B0312551204);
  int v57 = *(unsigned __int8 *)(STACK[0x448] - 0x138A5B0312551200);
  int v58 = *(unsigned __int8 *)(STACK[0x448] - 0x138A5B03125511FCLL);
  int v59 = *(unsigned __int8 *)STACK[0x3B0] + a8 - 727 - ((2 * *(unsigned __int8 *)STACK[0x3B0]) & 0xFF96);
  int v60 = *(unsigned __int8 *)(STACK[0x448] - 0x138A5B03125511FELL)
      - ((2 * *(unsigned __int8 *)(STACK[0x448] - 0x138A5B03125511FELL)) & 0xFF9F);
  int v61 = *(unsigned __int8 *)(STACK[0x448] - 0x138A5B0312551202);
  int v62 = *(unsigned __int8 *)(STACK[0x448] - 0x138A5B0312551203)
      - ((2 * *(unsigned __int8 *)(STACK[0x448] - 0x138A5B0312551203)) & 0x34);
  int v63 = *(unsigned __int8 *)(STACK[0x448] - 0x138A5B03125511FFLL)
      - ((2 * *(unsigned __int8 *)(STACK[0x448] - 0x138A5B03125511FFLL)) & 0x18C);
  int v64 = *(unsigned __int8 *)(STACK[0x448] - 0x138A5B0312551201);
  int v65 = *(unsigned __int8 *)STACK[0x3B8];
  int v66 = *(unsigned __int8 *)(STACK[0x448] - 0x138A5B03125511F8);
  int v67 = *(unsigned __int8 *)(STACK[0x448] - 0x138A5B03125511FBLL);
  int v68 = *(unsigned __int8 *)(STACK[0x448] - 0x138A5B03125511FALL);
  int v69 = *(unsigned __int8 *)(STACK[0x448] - 0x138A5B03125511F9);
  int v70 = *(unsigned __int8 *)(STACK[0x448] - 0x138A5B03125511F7);
  int v71 = *(unsigned __int8 *)(STACK[0x448] - 0x138A5B03125511F6);
  LODWORD(STACK[0x3EC]) = v59 + 56;
  LODWORD(STACK[0x3DC]) = v56 - ((2 * v56) & 0x4A) + 37;
  LODWORD(STACK[0x3B8]) = v60 + 79;
  LODWORD(STACK[0x3E0]) = v62 - 102;
  LODWORD(STACK[0x3E8]) = v61 - ((2 * v61) & 0xFFFFFF83) - 63;
  LODWORD(STACK[0x3CC]) = v63 + 70;
  LODWORD(STACK[0x39C]) = v57 + (~(2 * v57) | 0xFFFFFFC9) - 100;
  LODWORD(STACK[0x3C8]) = v58 - ((2 * v58) & 0x2C) - 106;
  LODWORD(STACK[0x3D0]) = v64 - ((2 * v64) & 0x1B8) - 36;
  LODWORD(STACK[0x3AC]) = v65 - ((2 * v65) & 0xFFFFFFBA) + 93;
  LODWORD(STACK[0x394]) = v66 - ((2 * v66) & 0xFFFFFFC7) - 29;
  LODWORD(STACK[0x3A0]) = v70 - ((2 * v70) & 0xFFFFFFC7) + 99;
  LODWORD(STACK[0x3B0]) = v67 - (v55 & (2 * v67)) - 117;
  LODWORD(STACK[0x398]) = v68 + (~(2 * v68) | 0x25) - 18;
  LODWORD(STACK[0x3C4]) = v69 - ((2 * v69) & 0x1A6) + 83;
  LODWORD(STACK[0x390]) = v71 - ((2 * v71) & 0x1F4) - 6;
  LODWORD(STACK[0x2EC]) = a51;
  LODWORD(STACK[0x2E8]) = a40;
  LODWORD(STACK[0x2B8]) = a53;
  LODWORD(STACK[0x2E4]) = a48;
  LODWORD(STACK[0x2C0]) = a43;
  LODWORD(STACK[0x2B4]) = a52;
  LODWORD(STACK[0x2E0]) = a50;
  STACK[0x2F0] = a49;
  LODWORD(STACK[0x2BC]) = a46;
  LODWORD(STACK[0x2C8]) = a42;
  LODWORD(STACK[0x2C4]) = a55;
  LODWORD(STACK[0x2D4]) = a41;
  LODWORD(STACK[0x2CC]) = a54;
  LODWORD(STACK[0x2DC]) = a47;
  LODWORD(STACK[0x2D8]) = a44;
  LODWORD(STACK[0x2D0]) = a45;
  JUMPOUT(0x18DA05440);
}

uint64_t sub_18DA04D74(char a1, char a2, char a3, char a4, char a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,char a23,__int16 a24,char a25,__int16 a26,char a27,__int16 a28,char a29,__int16 a30,char a31,__int16 a32,char a33,__int16 a34,char a35,__int16 a36,char a37,__int16 a38,char a39,__int16 a40,char a41,__int16 a42,char a43,__int16 a44,char a45,int a46,int a47,char a48,int a49)
{
  char v59 = (a6 + (a31 & 0x80)) ^ (((v52 - 78) & 0xF6) - 37) & a31 ^ 0x1B;
  char v60 = a25 ^ a2 ^ v53;
  *(unsigned char *)STACK[0x3B0] = a43 ^ a4 ^ (v52 + 115) ^ 0x25;
  int v61 = a47 ^ LODWORD(STACK[0x520]) ^ 0x7A;
  int v62 = a46 ^ LODWORD(STACK[0x528]) ^ 0xD3;
  int v63 = a49 ^ LODWORD(STACK[0x5B0]);
  unint64_t v64 = STACK[0x448];
  *(unsigned char *)(v64 - 0x138A5B03125511FELL) = a37 ^ v54 ^ 0xCF;
  *(unsigned char *)(v64 - 0x138A5B0312551204) = a48 ^ v58 ^ 0xA5;
  *(unsigned char *)(v64 - 0x138A5B0312551202) = a35 ^ a1 ^ 0x41;
  *(unsigned char *)(v64 - 0x138A5B03125511FFLL) = a23 ^ v56 ^ 0xC6;
  *(unsigned char *)(v64 - 0x138A5B0312551201) = a41 ^ a5 ^ 0x5C;
  *(unsigned char *)(v64 - 0x138A5B0312551200) = v59;
  *(unsigned char *)(v64 - 0x138A5B0312551203) = a27 ^ v51 ^ 0x1A;
  *(unsigned char *)STACK[0x3B8] = a45 ^ v49 ^ 0xB0;
  *(unsigned char *)(v64 - 0x138A5B03125511F9) = v62;
  *(unsigned char *)(v64 - 0x138A5B03125511F7) = a33 ^ v57 ^ 0xBD;
  *(unsigned char *)(v64 - 0x138A5B03125511FBLL) = a39 ^ a3 ^ 0xB;
  *(unsigned char *)(v64 - 0x138A5B03125511FALL) = v63 ^ 0x6D;
  *(unsigned char *)(v64 - 0x138A5B03125511F6) = v61;
  *(unsigned char *)(v64 - 0x138A5B03125511FCLL) = v60;
  *(unsigned char *)(v64 - 0x138A5B03125511F8) = a29 ^ v55 ^ 0xA;
  unsigned int v65 = LODWORD(STACK[0x2FC]) - 424119114;
  int v66 = (a16 < 0x31F77973) ^ (v65 < 0x31F77973);
  BOOL v67 = v65 < a16;
  if (v66) {
    BOOL v67 = a16 < 0x31F77973;
  }
  return (*(uint64_t (**)(void))(v50 + 8 * (v52 ^ (1799 * v67))))();
}

void sub_18DA05038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v14 = v12;
  int v15 = *(unsigned __int8 *)(v12 - 0x138A5B03125511F3);
  int v16 = *(unsigned __int8 *)(v12 - 0x138A5B03125511F1);
  int v17 = *(unsigned __int8 *)STACK[0x3A0];
  int v18 = v7 | ~(2 * v17);
  int v19 = *(unsigned __int8 *)(v12 - 0x138A5B03125511F0);
  int v20 = *(unsigned __int8 *)(v12 - 0x138A5B03125511EFLL);
  int v21 = *(unsigned __int8 *)(v12 - 0x138A5B03125511EBLL);
  int v22 = *(unsigned __int8 *)(v12 - 0x138A5B03125511E9);
  int v23 = *(unsigned __int8 *)(v14 - 0x138A5B03125511F4);
  LODWORD(STACK[0x5B8]) = ~(2 * v23) | 0xFFFFFFB5;
  int v24 = *(unsigned __int8 *)(v14 - 0x138A5B03125511EDLL);
  LODWORD(STACK[0x5B0]) = (2 * v24) & 0xFFFFFFBA;
  int v25 = *(unsigned __int8 *)(v14 - 0x138A5B03125511ECLL);
  LODWORD(STACK[0x5A8]) = (2 * v25) & 0x2C;
  int v26 = *(unsigned __int8 *)(v14 - 0x138A5B03125511E8);
  int v27 = *(unsigned __int8 *)(v14 - 0x138A5B03125511EELL);
  uint64_t v29 = v14;
  LODWORD(v14) = *(unsigned __int8 *)(v14 - 0x138A5B03125511E7);
  int v30 = *(unsigned __int8 *)(v29 - 0x138A5B03125511F2)
      - ((2 * *(unsigned __int8 *)(v29 - 0x138A5B03125511F2)) & 0xFF83);
  int v31 = *(unsigned __int8 *)(v29 - 0x138A5B03125511EALL);
  int v32 = v20 - ((2 * v20) & 0x18C);
  int v33 = *(unsigned __int8 *)(v29 - 0x138A5B03125511E6);
  STACK[0x300] += 16;
  LODWORD(STACK[0x2FC]) = a7 + v10 - 475 - 643;
  LODWORD(STACK[0x3E8]) = v30 - 63;
  LODWORD(STACK[0x3E0]) = v15 - (v11 & (2 * v15)) - 102;
  LODWORD(STACK[0x3D0]) = v16 - ((2 * v16) & 0x1B8) - 36;
  LODWORD(STACK[0x3EC]) = v17 + v18 - 52;
  LODWORD(STACK[0x39C]) = v19 - (v9 & (2 * v19)) - 101;
  LODWORD(STACK[0x3CC]) = v32 + 70;
  LODWORD(STACK[0x3B0]) = v21 - (v13 & (2 * v21)) - 117;
  LODWORD(STACK[0x3C4]) = v22 - ((2 * v22) & 0x1A6) + 83;
  LODWORD(STACK[0x3DC]) = v23 + LODWORD(STACK[0x5B8]) + 38;
  LODWORD(STACK[0x3AC]) = v24 - LODWORD(STACK[0x5B0]) + 93;
  LODWORD(STACK[0x3C8]) = v25 - LODWORD(STACK[0x5A8]) - 106;
  LODWORD(STACK[0x394]) = v26 + (v8 | ~(2 * v26)) - 28;
  LODWORD(STACK[0x3B8]) = v27 + (~(2 * v27) | 0x61) + 80;
  LODWORD(STACK[0x3A0]) = v14 + (v8 | ~(2 * v14)) + 100;
  LODWORD(STACK[0x398]) = v31 - ((2 * v31) & 0x1DA) - 19;
  LODWORD(STACK[0x390]) = v33 + (~(2 * v33) | 0xB) - 5;
  STACK[0x448] = v29 + 16;
  LODWORD(STACK[0x48C]) = STACK[0x420];
  LODWORD(STACK[0x488]) = STACK[0x440];
  LODWORD(STACK[0x480]) = STACK[0x410];
  LODWORD(STACK[0x484]) = STACK[0x408];
  LODWORD(STACK[0x47C]) = STACK[0x40C];
  LODWORD(STACK[0x478]) = STACK[0x414];
  LODWORD(STACK[0x474]) = STACK[0x43C];
  LODWORD(STACK[0x470]) = STACK[0x418];
  LODWORD(STACK[0x468]) = STACK[0x430];
  LODWORD(STACK[0x46C]) = STACK[0x428];
  LODWORD(STACK[0x464]) = STACK[0x434];
  LODWORD(STACK[0x460]) = STACK[0x41C];
  LODWORD(STACK[0x458]) = STACK[0x42C];
  LODWORD(STACK[0x45C]) = STACK[0x438];
  LODWORD(STACK[0x454]) = STACK[0x444];
  LODWORD(STACK[0x450]) = STACK[0x424];
  JUMPOUT(0x18DA0543CLL);
}

void sub_18DA054C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  LODWORD(STACK[0x5A0]) = v38;
  int v41 = *(unsigned __int8 *)(a38 - 0x6C3BEE829B0CF466);
  int v42 = *(unsigned __int8 *)(a38 - 0x6C3BEE829B0CF463);
  int v43 = *(unsigned __int8 *)(a38 - 0x6C3BEE829B0CF469);
  STACK[0x560] = *(unsigned __int8 *)(a38 - 0x6C3BEE829B0CF467)
               - (unsigned __int16)(v39 & (2 * *(unsigned __int8 *)(a38 - 0x6C3BEE829B0CF467)))
               + 70;
  STACK[0x5A8] = v41 + (~(2 * v41) | 0x61u) + 80;
  STACK[0x558] = v42 - ((2 * v42) & 0x16u) - 117;
  STACK[0x580] = v43 - ((2 * v43) & 0xFFFFFFB8) - 36;
  STACK[0x538] = *(unsigned __int8 *)(a38 - 0x6C3BEE829B0CF460)
               - ((2 * *(unsigned __int8 *)(a38 - 0x6C3BEE829B0CF460)) & 0xFFC7u)
               - 29;
  STACK[0x548] = *(unsigned __int8 *)(a38 - 0x6C3BEE829B0CF45FLL)
               - ((2 * *(unsigned __int8 *)(a38 - 0x6C3BEE829B0CF45FLL)) & 0xFFC7u)
               + 99;
  STACK[0x578] = *(unsigned __int8 *)(a38 - 0x6C3BEE829B0CF461)
               - ((2 * *(unsigned __int8 *)(a38 - 0x6C3BEE829B0CF461)) & 0xFFA6u)
               + 83;
  STACK[0x550] = *(unsigned __int8 *)STACK[0x590] - ((2 * *(unsigned __int8 *)STACK[0x590]) & 0xFFBAu) + 93;
  STACK[0x5B0] = *(unsigned __int8 *)(a38 - 0x6C3BEE829B0CF45ELL)
               + (~(2 * *(unsigned __int8 *)(a38 - 0x6C3BEE829B0CF45ELL)) | 0xBu)
               - 5;
  STACK[0x5B8] = *(unsigned __int8 *)(a38 - 0x6C3BEE829B0CF462)
               + (~(2 * *(unsigned __int8 *)(a38 - 0x6C3BEE829B0CF462)) | 0x25u)
               - 18;
  LODWORD(STACK[0x518]) = 38;
  STACK[0x270] = v40;
  STACK[0x278] = STACK[0x4C8];
  JUMPOUT(0x18D9F6C64);
}

void sdfspp103e9rf(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1) {
    BOOL v5 = a2 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  int v8 = !v5 && a4 != 0 && a5 != 0;
  __asm { BRAA            X8, X17 }
}

uint64_t sub_18DA0584C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((112 * (a3 > 0x400)) ^ 0x1B5u)))();
}

uint64_t sub_18DA05878(int a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  STACK[0x250] = a4;
  STACK[0x258] = a5;
  STACK[0x238] = (unint64_t)&STACK[0x1099C345BDD22F4];
  STACK[0x230] = (unint64_t)&STACK[0x1099C345BDD230C];
  STACK[0x240] = (unint64_t)&STACK[0x1099C345BDD22FC];
  STACK[0x268] = (unint64_t)&STACK[0x60DE7237762FB458];
  STACK[0x278] = (unint64_t)&STACK[0x60DE7237762FB460];
  STACK[0x270] = (unint64_t)&STACK[0x60DE7237762FB388];
  unsigned int v9 = a1 - ((2 * a1) & 0xA76CF164) + 1404467378;
  *(_DWORD *)(v7 - 192) = (248152243
                         * ((((v7 - 192) | 0x7377530B) - (v7 - 192) + ((v7 - 192) & 0x8C88ACF0)) ^ 0x69B21EA9)) ^ 0x56EDD32D;
  int v10 = *(void (**)(uint64_t))(v5 + 17296);
  STACK[0x2B8] = v5;
  v10(v7 - 192);
  STACK[0x438] = 0x351251FA89A1409ALL;
  LODWORD(STACK[0x440]) = -814673933;
  STACK[0x448] = 0;
  STACK[0x450] = 0x175F22EA6;
  STACK[0x458] = 0x230CA1832;
  STACK[0x460] = 0x351251FA89A1409ALL;
  LODWORD(STACK[0x468]) = v9;
  STACK[0x470] = 0;
  STACK[0x478] = 0x12AB2D36ALL;
  STACK[0x480] = 0x230CA1832;
  STACK[0x488] = 0x351251FA89A1409ALL;
  unint64_t v11 = STACK[0x2B8];
  LODWORD(STACK[0x490]) = 1404467378;
  STACK[0x498] = a2;
  STACK[0x4A0] = 0x3433DFBE3;
  LODWORD(STACK[0x4A8]) = (v6 ^ 0x39DE3AEE) - 152314560 + ((2 * v6) & 0x73BC75DC);
  LODWORD(STACK[0x4AC]) = 2;
  STACK[0x248] = (unint64_t)&STACK[0x77BA8C2C0E5A85B5];
  LODWORD(STACK[0x324]) = 0;
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(v11 + 17672))(128);
  STACK[0x350] = v12 + 0x134F8A868441352ELL;
  int v13 = *(uint64_t (**)(void))(v11 + 8 * ((2 * (v12 != 0)) | (32 * (v12 != 0)) | 0x5DDu));
  LODWORD(STACK[0x264]) = 1393700944;
  return v13();
}

uint64_t sub_18DA05AC4()
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(v1 + 8 * (v0 + 708)))(112);
  STACK[0x318] = v2 + 0x23120F4208F8DDDLL;
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (int)(((v2 == 0)
                                     * (((((v0 - 550) ^ 0x3B4) + 361) ^ 0xFFFFFC52) + 267 * ((v0 - 550) ^ 0x3B4))) ^ (v0 - 550))))();
}

uint64_t sub_18DA05B34(uint64_t a1)
{
  *(_DWORD *)a1 = 1394714680;
  *(_DWORD *)(a1 + 4) = 1710104185;
  *(void *)(a1 + 72) = 0x116585BF116585BFLL;
  *(_WORD *)(a1 + 80) = 25175;
  memset((void *)(a1 + 8), 79, 64);
  unint64_t v4 = STACK[0x318];
  *(_DWORD *)(STACK[0x318] - 0x23120F4208F8D89) = 1095089643;
  *(_DWORD *)(v4 - 0x23120F4208F8D75) = 2126566836;
  memset((void *)(v4 - 0x23120F4208F8D85), 79, 16);
  *(unsigned char *)(v4 - 0x23120F4208F8D71) = 42;
  BOOL v6 = v4 != v1 && STACK[0x350] != 0x134F8A868441352ELL;
  return (*(uint64_t (**)(void))(v3 + 8 * ((v6 * (((v2 - 477) | 0x28) + 1226)) ^ v2)))();
}

uint64_t sub_18DA05C64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  STACK[0x2D0] = v63 - 0x23120F4208F8D84;
  STACK[0x2C0] = v63 - 0x23120F4208F8D83;
  STACK[0x2A0] = v63 - 0x23120F4208F8D82;
  STACK[0x290] = v63 - 0x23120F4208F8D81;
  STACK[0x280] = v63 - 0x23120F4208F8D80;
  STACK[0x220] = v63 - 0x23120F4208F8D7FLL;
  STACK[0x210] = v63 - 0x23120F4208F8D7ELL;
  STACK[0x200] = v63 - 0x23120F4208F8D7CLL;
  *(_DWORD *)(v65 - 0x134F8A868441351ELL) = *(_DWORD *)(v63 - 0x23120F4208F8DDDLL);
  *(_DWORD *)(v65 - 0x134F8A86844134D6) = *(_DWORD *)(v63 - 0x23120F4208F8D95);
  *(_DWORD *)(v65 - 0x134F8A86844134D2) = *(_DWORD *)(v63 - 0x23120F4208F8D91);
  *(unsigned char *)(v65 - 0x134F8A86844134CELL) = *(unsigned char *)(v63 - 0x23120F4208F8D8DLL);
  *(unsigned char *)(v65 - 0x134F8A86844134CDLL) = *(unsigned char *)(v63 - 0x23120F4208F8D8CLL);
  *(_DWORD *)(v65 - 0x134F8A86844134B6) = *v67;
  *(_DWORD *)(v65 - 0x134F8A86844134CALL) = *v66;
  *(unsigned char *)(v65 - 0x134F8A86844134B2) = (47 - (*v68 | 0xFE)) ^ 0x9B;
  uint64_t v69 = (v64 + 1551) & 0x80DF9806;
  uint64_t v70 = (v64 - 364) | 0x302u;
  uint64_t v71 = (v70 ^ 0x30D) & 0x1F;
  uint64_t v72 = *(unsigned __int8 *)(v63 - 0x23120F4208F8DB6)
      + (~*(unsigned __int8 *)(v63 - 0x23120F4208F8DB6) | 0x1B)
      + (*(unsigned __int8 *)(v63 - 0x23120F4208F8DB6) | 0x1Bu)
      - 105;
  uint64_t v73 = *((unsigned __int8 *)*(&off_1E559D8D0 + (int)v69) + v71 - 10);
  *(unsigned char *)(v65 - 0x134F8A86844134F7) = (*(unsigned char *)(v63 - 0x23120F4208F8DB6)
                                          + (~*(unsigned char *)(v63 - 0x23120F4208F8DB6) | 0x1B)
                                          + (*(unsigned char *)(v63 - 0x23120F4208F8DB6) | 0x1B)
                                          - 105) ^ *((unsigned char *)*(&off_1E559D8D0 + ((v64 + 1551) & 0x5FCD7864)) + v71) ^ (-113 * v71) ^ v73 ^ *((unsigned char *)*(&off_1E559D8D0 + v64 - 318) + v71 + 1);
  uint64_t v74 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(STACK[0x2B8] + 8 * (v64 + 1551));
  return v74(v70, v63 - 0x23120F4208F8D95, v69, 4294967183, 233, v74, v72, v73, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61,
           a62,
           a63);
}

void sub_18DA05FC8()
{
}

uint64_t sub_18DA05FD0()
{
  return (*(uint64_t (**)(void))(v2 + 8 * (((v0 == -1393729084) * ((((v1 - 196) | 0x14) ^ 0x324) + v1 - 8)) ^ v1)))();
}

uint64_t sub_18DA06034(int a1)
{
  *(unsigned char *)(v2 - 0x134F8A86844134D7) = *(unsigned char *)(v4 + 17) ^ *(unsigned char *)(v3 + 15) ^ *(unsigned char *)(v5 + 16) ^ 0x61 ^ (*(unsigned char *)(v1 - 0x23120F4208F8D96) + (*(unsigned char *)(v1 - 0x23120F4208F8D96) | 0x1B) + ((a1 + 54) ^ 0x23 | ~*(unsigned char *)(v1 - 0x23120F4208F8D96)) - 105);
  return (*(uint64_t (**)(void))(STACK[0x2B8] + 8 * ((a1 - 26) ^ 0x1EA)))();
}

void sub_18DA060E8()
{
}

uint64_t sub_18DA060F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  *(unsigned char *)(v75 - 0x134F8A86844134B7) = *v78;
  *(unsigned char *)(v75 - 0x134F8A86844134B8) = *v76;
  *(unsigned char *)(v75 - 0x134F8A86844134B9) = *v74;
  *(unsigned char *)(v75 - 0x134F8A86844134BALL) = *a67;
  *(unsigned char *)(v75 - 0x134F8A86844134BBLL) = *a69;
  *(unsigned char *)(v75 - 0x134F8A86844134BCLL) = *a71;
  *(unsigned char *)(v75 - 0x134F8A86844134BDLL) = *(unsigned char *)STACK[0x200];
  *(unsigned char *)(v75 - 0x134F8A86844134BELL) = *v73;
  *(unsigned char *)(v75 - 0x134F8A86844134BFLL) = *(unsigned char *)STACK[0x210];
  *(unsigned char *)(v75 - 0x134F8A86844134C0) = *(unsigned char *)STACK[0x220];
  *(unsigned char *)(v75 - 0x134F8A86844134C1) = *(unsigned char *)STACK[0x280];
  *(unsigned char *)(v75 - 0x134F8A86844134C2) = *(unsigned char *)STACK[0x290];
  *(unsigned char *)(v75 - 0x134F8A86844134C3) = *(unsigned char *)STACK[0x2A0];
  *(unsigned char *)(v75 - 0x134F8A86844134C4) = *(unsigned char *)STACK[0x2C0];
  *(unsigned char *)(v75 - 0x134F8A86844134C5) = *(unsigned char *)STACK[0x2D0];
  *(unsigned char *)(v75 - 0x134F8A86844134C6) = *v72;
  *(_DWORD *)(v75 - 0x134F8A868441351ALL) = *(_DWORD *)(v71 - 0x23120F4208F8DD9);
  return (*(uint64_t (**)(void))(STACK[0x2B8]
                              + 8
                              * ((1006 * (*(_DWORD *)(v71 - 0x23120F4208F8DD9) == ((v77 + 493) | 0x158) + 1710102268)) ^ v77)))();
}

uint64_t sub_18DA06308(uint64_t a1, _DWORD *a2)
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((127 * (*a2 != ((v2 + 1138348997) & 0xBC262F7F) + (v2 ^ 0x11657A7A))) ^ v2)))();
}

uint64_t sub_18DA06360@<X0>(_DWORD *a1@<X8>)
{
  *a1 = v3 + 1918;
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((((((v2 - 975532926) & 0x3A25777F ^ 0x21C9BF7E) + 147) ^ (((v2 - 975532926) & 0x3A25777F)
                                                                                         + 566866054))
                                * (v1 == 0x23120F4208F8DDDLL)) ^ (v2 - 975532926) & 0x3A25777F)))();
}

uint64_t sub_18DA063D8@<X0>(int a1@<W8>)
{
  int v3 = (v2 + a1 - 281) | 0x490;
  int v4 = v2 + a1 + 747;
  BOOL v5 = (*(uint64_t (**)(uint64_t))(v1 + 8 * (a1 ^ 0x21C9B0A2)))(16) != 0;
  return (*(uint64_t (**)(void))(v1 + 8 * ((v5 * (v3 - 1176)) | v4)))();
}

uint64_t sub_18DA0645C(void *a1)
{
  *a1 = 0x24CC9A478416F3DCLL;
  a1[1] = 0x24CC9A478416F3DCLL;
  *(void *)(v1 - 0x134F8A8684413526) = (char *)a1 + 0x66FBF218A8091D0CLL;
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (v2 | (2 * (((v1 == 0x134F8A868441352ELL) ^ (v2 + v2 + 102 + 1)) & 1)))))();
}

uint64_t sub_18DA064E8@<X0>(int a1@<W8>)
{
  int v2 = (((*(uint64_t (**)(uint64_t))(v1 + 8 * ((a1 | 0x140) + 863)))(16) == 0)
      * (((((a1 | 0x140) - 962) | 3) - 19) ^ (52 * ((a1 | 0x140) ^ 0x545)))) ^ (a1 | 0x140);
  return (*(uint64_t (**)(void))(v1 + 8 * v2))();
}

uint64_t sub_18DA0654C()
{
  int v5 = (v1 - 2140812915) & 0x7F9A357F;
  LODWORD(STACK[0x338]) = v0;
  STACK[0x3C8] = v2;
  unint64_t v6 = STACK[0x268];
  STACK[0x3A8] = *(void *)(v3 + 8 * v5);
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3
                                                                       + 8
                                                                       * ((127
                                                                         * (((((v1 - 115) & 0x7F ^ 0x10)
                                                                                             - 102) ^ 4 ^ (v6 == 0x60DE7237762FB090)) & 1)) ^ (v4 + (v5 ^ 0x110) + 566867610 + 1430))))(0x9F218DC889D04F70, 0x134F8A868441352ELL, 0x66FBF218A8091D0CLL);
}

uint64_t sub_18DA0AB58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(v7 + 8 * (((*(void *)(a4 + a1) == a2) * (v8 + ((v4 + v5) & v6) - 213)) ^ v4)))();
}

uint64_t sub_18DA0AB8C@<X0>(unint64_t a1@<X3>, unint64_t a2@<X4>, unint64_t a3@<X5>, unint64_t a4@<X6>, int a5@<W8>)
{
  STACK[0x280] = a3;
  STACK[0x290] = a2;
  STACK[0x2A0] = a1;
  STACK[0x2C0] = a4;
  return (*(uint64_t (**)(void))(v5 + 8 * (((a4 != 0x134F8A8684413526) * v6) ^ (v7 + a5 + 1240))))();
}

uint64_t sub_18DA0ABDC@<X0>(uint64_t a1@<X2>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * (((*v2 == a1)
                                * (v3 + ((a2 - 267) | v4) + ((((a2 - 267) | v4) - 268) ^ (v6 + 575)) - 1051)) ^ ((a2 - 267) | v4))))();
}

uint64_t sub_18DA0AC1C@<X0>(int a1@<W8>)
{
  int v4 = (void *)(v1 - 0x66FBF218A8091D0CLL);
  STACK[0x2D0] = (unint64_t)v4;
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((146
                                * (((*v4 + v2 == 0x3787A23264FFE2D1) ^ (5 * (a1 ^ 0xED) + 1)) & 1)) ^ a1)))();
}

uint64_t sub_18DA0AC8C()
{
  uint64_t v4 = (*(uint64_t (**)(unint64_t))(v1 + 8 * (v2 + 1091)))(STACK[0x2D0]);
  *int v0 = 0x66FBF218A8091D0CLL;
  return v3(v4);
}

void sub_18DA0ACD8()
{
}

uint64_t sub_18DA0ACFC()
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(v4 + 8 * (v3 + 1438)))(v2);
  return (*(uint64_t (**)(uint64_t))(v4
                                            + 8
                                            * (((((v0 + v1 == 0x3787A23264FFE2D1) ^ (v3 + 92)) & 1)
                                              * ((2 * v3) ^ 0x68C)) ^ v3)))(v5);
}

uint64_t sub_18DA0AD70()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (int)(((*(void *)(v0 - 0x24CC9A478416F3C4) != 0)
                                     * (((v2 + 441992393) & 0xE5A7B7FF) - 726)) ^ v2)))();
}

uint64_t sub_18DA0ADD8()
{
  (*(void (**)(void))(v0 + 8 * (v2 ^ 0xEEB)))();
  *uint64_t v1 = 0;
  return sub_18DA0ACFC();
}

uint64_t sub_18DA0ADF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  (*(void (**)(uint64_t))(v8 + 8 * (v7 ^ (v7 - 1877))))(a7 - 0x134F8A868441352ELL);
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8
                                                                       + 8
                                                                       * ((((v9 + v7 + 562) ^ 0x3BE)
                                                                         * (STACK[0x2A0] != 0x60DE7237762FB090)) ^ (v9 + v7 + 88))))(0x9F218DC889D04F70, 0x134F8A868441352ELL, 0x66FBF218A8091D0CLL);
}

uint64_t sub_18DA0AEB0()
{
  *uint64_t v0 = 0x134F8A868441352ELL;
  return ((uint64_t (*)(void))STACK[0x3A8])();
}

void sub_18DA0AED0()
{
}

uint64_t sub_18DA0AEE8()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (((LODWORD(STACK[0x33C]) == -1393729084) * (((v0 ^ (v0 + 451)) + 1532) ^ 0x80E)) ^ (v2 + v0 + 1708))))();
}

uint64_t sub_18DA0AF2C()
{
  return (v5 + v1 - ((v5 << ((v0 - v3 + 96) ^ (v2 - 1))) & 0x59DAC388)) ^ v1;
}

uint64_t sub_18DA0B064@<X0>(unsigned int a1@<W8>)
{
  return (*(uint64_t (**)(void))(STACK[0x2B8]
                              + 8
                              * ((1388
                                * (v1
                                 + 249
                                 + *(_DWORD *)(STACK[0x360]
                                             - 0x77BA8C2C0E5A817DLL
                                             + 40 * ((a1 | ((unint64_t)(a1 < 0x5479C05B) << 32)) - 1417265243)
                                             + 36)
                                 - LODWORD(STACK[0x394])
                                 + 530714809 == (v1 ^ 0xA0331103))) ^ v1)))();
}

uint64_t sub_18DA0B0FC(uint64_t a1)
{
  int v5 = *(_DWORD *)(v2 + 40 * v1 + 28);
  switch(v5)
  {
    case 1:
      LODWORD(STACK[0x290]) = *(_DWORD *)(v2 + 40 * v1 + 24);
      JUMPOUT(0x18DA0B1F0);
    case 3:
      return (*(uint64_t (**)(void))(a1
                                  + 8
                                  * (((*(void *)(v2 + 40 * v1 + 16) != 0) * (v4 + v3 - 233)) ^ (v4 + v3 + 1848))))();
    case 2:
      return (*(uint64_t (**)(void))(a1
                                  + 8 * (((STACK[0x308] == 0x66FBF218A8091D0CLL) * (v4 + v3 - 185)) ^ (v4 + v3 + 409))))();
  }
  return ((uint64_t (*)(void))STACK[0x2E8])();
}

void sub_18DA0B240(uint64_t a1)
{
  STACK[0x3F8] = *(void *)(a1 + 8 * v1);
  JUMPOUT(0x18DA0B27CLL);
}

uint64_t sub_18DA0B2C4()
{
  STACK[0x220] = v2;
  STACK[0x280] = v1;
  int v4 = v0 | 0x150;
  unsigned __int8 v5 = (((v0 | 0x50) + 15) & 0xDD) - v3 - 56;
  unint64_t v6 = STACK[0x2B8];
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(STACK[0x2B8] + 8 * ((v0 | 0x150) ^ 0x9D1)))(32);
  STACK[0x300] = v7 + 0x24CC9A478416F3DCLL;
  return (*(uint64_t (**)(void))(v6 + 8 * ((225 * (((v7 == 0) ^ v5) & 1)) ^ v4)))();
}

uint64_t sub_18DA0B35C(uint64_t a1)
{
  *(void *)a1 = 0x24CC9A478416F3DCLL;
  *(void *)(a1 + 8) = 0x24CC9A478416F3DCLL;
  *(_DWORD *)(a1 + 16) = v2 + 690104961 + ((v1 - 35387054) & 0x21BF05E);
  uint64_t v5 = (*(uint64_t (**)(void))(v3 + 8 * (v1 + 580)))((v2 - 818550820));
  *(void *)(a1 + 24) = v5;
  return (*(uint64_t (**)(void))(v3 + 8 * (((v5 != 0) * (v1 - 1573)) ^ v1)))();
}

uint64_t sub_18DA0B3E4()
{
  int v5 = LODWORD(STACK[0x290]) - (((v3 ^ 0x615852A2) + 2 * LODWORD(STACK[0x290])) & 0x74FCEE56) + 1797955713;
  LODWORD(STACK[0x2D0]) = v4;
  LODWORD(STACK[0x210]) = 2 * v2;
  LODWORD(STACK[0x2C0]) = v2 - ((2 * v2 + 510381988) & 0x74FCEE56) - 1984667907;
  LODWORD(STACK[0x2A0]) = v0 ^ 0xE9C80F99;
  unint64_t v6 = *(unsigned char **)(v1 + 24);
  uint64_t v7 = __ROR8__(v6, 8);
  unint64_t v8 = (0x150C087CC469144DLL - (v7 & 0xF8FFFFFFFFFFFFFFLL)) & 0x19A889ECFF1A1ED8 | ((v7 & 0xF8FFFFFFFFFFFFFFLL)
                                                                                    - 0x550C087CC469144ELL) & 0xE057761300E5E127;
  uint64_t v9 = __ROR8__(v8 ^ 0xA2238B49AE9B5874, 8);
  v8 ^= 0xF5BC3750722C05E1;
  uint64_t v10 = (v9 + v8) ^ 0x50D4D0E13CBD7177;
  uint64_t v11 = v10 ^ __ROR8__(v8, 61);
  *((void *)&v13 + 1) = __ROR8__(v10, 8) + v11;
  *(void *)&long long v13 = *((void *)&v13 + 1) ^ 0xE5D7DAAEED85A300;
  uint64_t v12 = v13 >> 8;
  *(void *)&long long v13 = __ROR8__(v11, 61);
  unint64_t v14 = (v12 + (*((void *)&v13 + 1) ^ 0xE5D7DAAEED85A300 ^ v13)) ^ 0x8E85997BF8A3092DLL;
  unint64_t v15 = v14 ^ __ROR8__(*((void *)&v13 + 1) ^ 0xE5D7DAAEED85A300 ^ v13, 61);
  int v16 = *(uint64_t (**)(void))(STACK[0x2B8] + 8 * v3);
  unint64_t v17 = (__ROR8__(v14, 8) + v15) ^ 0xCD091F17C02FDE51;
  unint64_t v18 = v17 ^ __ROR8__(v15, 61);
  uint64_t v19 = (__ROR8__(v17, 8) + v18) ^ 0x628ABC52894BE762;
  uint64_t v20 = v19 ^ __ROR8__(v18, 61);
  *(void *)&long long v13 = __ROR8__(v19, 8);
  unint64_t v21 = (((2 * (v13 + v20)) & 0xFCA17D98F44813EALL) - (v13 + v20) - 0x7E50BECC7A2409F6) ^ 0xDB6FDD30BA50D16BLL;
  *unint64_t v6 = (((__ROR8__(v21, 8) + (v21 ^ __ROR8__(v20, 61))) ^ 0x1B0BD1982B59C071) >> (8 * (v6 & 7u))) ^ HIBYTE(v5) ^ 0xBA;
  unint64_t v22 = (__ROR8__(v6 + 1, 8) & 0xF8FFFFFFFFFFFFFFLL) - 0x550C087CC469144ELL;
  *(void *)&long long v13 = __ROR8__(v22 ^ 0xB98B02A5518146ACLL, 8);
  v22 ^= 0xEE14BEBC8D361B39;
  uint64_t v23 = (v13 + v22) ^ 0x50D4D0E13CBD7177;
  uint64_t v24 = v23 ^ __ROR8__(v22, 61);
  *(void *)&long long v13 = __ROR8__(v23, 8);
  unint64_t v25 = (((2 * (v13 + v24)) & 0xA793A7F6AC829AE6) - (v13 + v24) - 0x53C9D3FB56414D74) ^ 0x49E1F6AA443B118CLL;
  unint64_t v26 = v25 ^ __ROR8__(v24, 61);
  unint64_t v27 = (__ROR8__(v25, 8) + v26) ^ 0x8E85997BF8A3092DLL;
  uint64_t v28 = __ROR8__(v27, 8);
  unint64_t v29 = v27 ^ __ROR8__(v26, 61);
  unint64_t v30 = (((2 * (v28 + v29)) & 0xF0BAF55B447DEC8ELL) - (v28 + v29) + 0x7A285525DC109B8) ^ 0xCAAB9A459DEED7E9;
  unint64_t v31 = v30 ^ __ROR8__(v29, 61);
  *(void *)&long long v13 = __ROR8__(v30, 8);
  unint64_t v32 = (-2 - ((~(v13 + v31) | 0x1FF46385B66E09DELL) + ((v13 + v31) | 0xE00B9C7A4991F621))) ^ 0x7D7EDFD73F25EEBCLL;
  unint64_t v33 = v32 ^ __ROR8__(v31, 61);
  *(void *)&long long v13 = __ROR8__(v32, 8);
  unint64_t v34 = (0xA4E31C196FB07E65 - ((v13 + v33) | 0xA4E31C196FB07E65) + ((v13 + v33) | 0x5B1CE3E6904F819ALL)) ^ 0x1DC7FE5AFC4A6FBLL;
  unint64_t v35 = v34 ^ __ROR8__(v33, 61);
  *(void *)&long long v13 = __ROR8__(v34, 8);
  v6[1] = (((-2 - ((~((void)v13 + v35) | 0x75B531B3FC4CDC6BLL) + (((void)v13 + v35) | 0x8A4ACE4C03B32394))) ^ 0x6EBEE02BD7151C1ALL) >> (8 * (((_BYTE)v6 + 1) & 7u))) ^ BYTE2(v5) ^ 0x7E;
  unint64_t v36 = (__ROR8__(v6 + 2, 8) & 0xF8FFFFFFFFFFFFFFLL) - 0x550C087CC469144ELL;
  unint64_t v37 = v36 ^ 0xB98B02A5518146ACLL;
  v36 ^= 0xEE14BEBC8D361B39;
  *(void *)&long long v13 = __ROR8__(v37, 8);
  unint64_t v38 = (((2 * (v13 + v36)) & 0x9D263FB38571CE96) - (v13 + v36) + 0x316CE0263D4718B4) ^ 0x61B830C701FA69C3;
  unint64_t v39 = v38 ^ __ROR8__(v36, 61);
  *((void *)&v13 + 1) = __ROR8__(v38, 8) + v39;
  *(void *)&long long v13 = *((void *)&v13 + 1) ^ 0xE5D7DAAEED85A300;
  uint64_t v40 = v13 >> 8;
  *(void *)&long long v13 = __ROR8__(v39, 61);
  unint64_t v41 = (0x8EEAB8D098054CA2
       - ((v40 + (*((void *)&v13 + 1) ^ 0xE5D7DAAEED85A300 ^ v13)) | 0x8EEAB8D098054CA2)
       + ((v40 + (*((void *)&v13 + 1) ^ 0xE5D7DAAEED85A300 ^ v13)) | 0x7115472F67FAB35DLL)) ^ 0xFF90DE549F59BA70;
  unint64_t v42 = v41 ^ __ROR8__(*((void *)&v13 + 1) ^ 0xE5D7DAAEED85A300 ^ v13, 61);
  *(void *)&long long v13 = __ROR8__(v41, 8);
  uint64_t v43 = __ROR8__((-2 - ((~(v13 + v42) | 0x978199C1D991797DLL) + ((v13 + v42) | 0x687E663E266E8682))) ^ 0x5A8886D619BEA72CLL, 8);
  unint64_t v44 = (-2 - ((~(v13 + v42) | 0x978199C1D991797DLL) + ((v13 + v42) | 0x687E663E266E8682))) ^ 0x5A8886D619BEA72CLL ^ __ROR8__(v42, 61);
  unint64_t v45 = (((2 * (v43 + v44)) & 0x9D3B31D97DA9F9B8) - (v43 + v44) - 0x4E9D98ECBED4FCDDLL) ^ 0xD3E8DB41C860E441;
  unint64_t v46 = v45 ^ __ROR8__(v44, 61);
  uint64_t v47 = (__ROR8__(v45, 8) + v46) ^ 0x5AC09C033F8B2761;
  *(void *)&long long v13 = __ROR8__(v6 + 3, 8);
  v6[2] = (((__ROR8__(v47, 8) + (v47 ^ __ROR8__(v46, 61))) ^ 0x1B0BD1982B59C071uLL) >> (8 * (((_BYTE)v6 + 2) & 7u))) ^ BYTE1(v5) ^ 0x77;
  unint64_t v48 = ((2 * ((v13 & 0xF8FFFFFFFFFFFFFFLL) - 0x550C087CC469144ELL)) | 0x20EB39D37CA90794)
      - ((v13 & 0xF8FFFFFFFFFFFFFFLL)
       - 0x550C087CC469144ELL)
      - 0x10759CE9BE5483CALL;
  unint64_t v49 = v48 ^ 0xA9FE9E4CEFD5C566;
  v48 ^= 0xFE612255336298F3;
  *(void *)&long long v13 = __ROR8__(v49, 8);
  uint64_t v50 = __ROR8__((-2 - ((~(v13 + v48) | 0x3D54A62DE74C24CLL) + ((v13 + v48) | 0xFC2AB59D218B3DB3))) ^ 0x53019A83E2C9B33BLL, 8);
  unint64_t v51 = (-2 - ((~(v13 + v48) | 0x3D54A62DE74C24CLL) + ((v13 + v48) | 0xFC2AB59D218B3DB3))) ^ 0x53019A83E2C9B33BLL ^ __ROR8__(v48, 61);
  unint64_t v52 = (-2 - ((~(v50 + v51) | 0x1730E72B835C4191) + ((v50 + v51) | 0xE8CF18D47CA3BE6ELL))) ^ 0xF2E73D856ED9E291;
  unint64_t v53 = v52 ^ __ROR8__(v51, 61);
  *(void *)&long long v13 = __ROR8__(v52, 8);
  unint64_t v54 = (v13 + v53 - ((2 * (v13 + v53)) & 0x9B516F8D43D1232ELL) - 0x325748395E176E69) ^ 0x432D2EBD594B98BALL;
  unint64_t v55 = v54 ^ __ROR8__(v53, 61);
  unint64_t v56 = (__ROR8__(v54, 8) + v55) ^ 0xCD091F17C02FDE51;
  unint64_t v57 = v56 ^ __ROR8__(v55, 61);
  *(void *)&long long v13 = __ROR8__(v56, 8);
  uint64_t v58 = __ROR8__((((2 * (v13 + v57)) | 0x70B9105F53F81A68) - (v13 + v57) + 0x47A377D05603F2CCLL) ^ 0xDAD6347D20B7EA56, 8);
  unint64_t v59 = (((2 * (v13 + v57)) | 0x70B9105F53F81A68) - (v13 + v57) + 0x47A377D05603F2CCLL) ^ 0xDAD6347D20B7EA56 ^ __ROR8__(v57, 61);
  uint64_t v60 = __ROR8__((v58 + v59) ^ 0x5AC09C033F8B2761, 8) + ((v58 + v59) ^ 0x5AC09C033F8B2761 ^ __ROR8__(v59, 61));
  v6[3] = v5 ^ 0x2B ^ (((v60 - ((2 * v60) & 0xCDE279B6265D5694) - 0x190EC324ECD154B6) ^ 0xFDFAED4338776B3BLL) >> (8 * (((_BYTE)v6 + 3) & 7u)));
  return v16();
}

uint64_t sub_18DA0C0D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v8 = STACK[0x2D0];
  if (LODWORD(STACK[0x2D0]) == 53610) {
    return (*(uint64_t (**)(void))(STACK[0x2B8] + 8 * ((1286 * (v7 == 818550834)) ^ 0x170)))();
  }
  if (v8 == 35534)
  {
    unsigned int v11 = v7 - ((LODWORD(STACK[0x210]) - 1637101660) & 0x9C147D78) + 490743438;
    return (*(uint64_t (**)(void))(STACK[0x2B8]
                                + 8
                                * ((26
                                  * (((2 * v11) & 0xFFBEF7BA ^ 0x9C147538) + (v11 ^ 0x31D54561) - 1284854297 == 860498372)) ^ 0x44F)))();
  }
  else
  {
    unint64_t v10 = STACK[0x2B8];
    if (v8 == 48760) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 8 * ((601 * (v7 == 818550838)) ^ 0x170)))(a1, a2, a3, a4, a5, a6, a7, 0x5AC09C033F8B2761);
    }
    else {
      return (*(uint64_t (**)(void))(v10
    }
                                  + 8 * ((47 * (*(void *)(STACK[0x300] - 0x24CC9A478416F3C4) != 0)) ^ 0x61C)))();
  }
}

void sub_18DA0C140()
{
}

uint64_t sub_18DA0C1B8()
{
  return v0();
}

uint64_t sub_18DA0C200(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8 * ((44 * (((STACK[0x308] == 0x66FBF218A8091D0CLL) ^ 0x8D) & 1)) ^ 0x88C)))();
}

void sub_18DA0C24C()
{
  LODWORD(STACK[0x290]) = *(_DWORD *)(v1 + 40 * v0 + 24);
  STACK[0x3F8] = *(void *)(STACK[0x2B8] + 8 * (v2 - 1985));
  JUMPOUT(0x18DA0C2A8);
}

void sub_18DA0C350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(unsigned char **)(STACK[0x300] - 0x24CC9A478416F3C4);
  unint64_t v10 = STACK[0x220] - ((2 * STACK[0x220] - 0x6A24A3F513428134) & 0xF6B04CCF712B80C0) - 0x39BA2B92D10B803ALL;
  uint64_t v11 = __ROR8__(v9 + 10, 8);
  unint64_t v12 = ((2 * (v11 & 0xF8FFFFFFFFFFFFFFLL) + 0x55E7EF06772DD764) & 0x90B16B7D1B79A6A2)
      - (v11 & 0xF8FFFFFFFFFFFFFFLL)
      + 0xCB352BE36AC40FCLL;
  uint64_t v13 = v12 ^ 0xE2C48E423C26A02;
  v12 ^= 0x59B3F4FDFF753797uLL;
  uint64_t v14 = __ROR8__(v13, 8);
  uint64_t v15 = __ROR8__((((2 * (v14 + v12)) | 0x17FE78BC45B94652) - (v14 + v12) + 0x7400C3A1DD235CD7) ^ 0xDB2BECBF1E61D25ELL, 8);
  unint64_t v16 = (((2 * (v14 + v12)) | 0x17FE78BC45B94652) - (v14 + v12) + 0x7400C3A1DD235CD7) ^ 0xDB2BECBF1E61D25ELL ^ __ROR8__(v12, 61);
  uint64_t v17 = v15 + v16;
  unint64_t v18 = (v15 + v16) ^ 0xE5D7DAAEED85A300 ^ __ROR8__(v16, 61);
  *((void *)&v19 + 1) = v17;
  *(void *)&long long v19 = v17 ^ 0xE5D7DAAEED85A300;
  uint64_t v20 = (((2 * ((v19 >> 8) + v18)) | 0x706FEFFD119E6122) - ((v19 >> 8) + v18) - 0x3837F7FE88CF3091) ^ 0xB6B26E85706C39BCLL;
  uint64_t v21 = v20 ^ __ROR8__(v18, 61);
  *(void *)&long long v19 = __ROR8__(v20, 8);
  unint64_t v22 = (((v19 + v21) | 0xE7F54DC4843AFB99) - ((v19 + v21) | 0x180AB23B7BC50466) + 0x180AB23B7BC50466) ^ 0x2AFC52D3441525C8;
  unint64_t v23 = v22 ^ __ROR8__(v21, 61);
  uint64_t v24 = (__ROR8__(v22, 8) + v23) ^ 0x628ABC52894BE762;
  uint64_t v25 = v24 ^ __ROR8__(v23, 61);
  uint64_t v26 = (__ROR8__(v24, 8) + v25) ^ a8;
  uint64_t v27 = v26 ^ __ROR8__(v25, 61);
  *(void *)&long long v19 = __ROR8__(v26, 8);
  v9[10] = (((((2 * ((void)v19 + v27)) & 0x5BA874AF5D38F1CELL) - ((void)v19 + v27) + 0x522BC5A851638718) ^ 0x492014307A3A4769uLL) >> (8 * (((_BYTE)v9 + 10) & 7u))) ^ (v10 >> ((v8 + 4) ^ 0x3Fu)) ^ 0xFB;
  *(void *)&long long v19 = __ROR8__(v9 + 11, 8);
  unint64_t v28 = (v19 & 0xF8FFFFFFFFFFFFFFLL)
      - ((2 * (v19 & 0xF8FFFFFFFFFFFFFFLL) + 0x15E7EF06772DD764) & 0x355AB94138DC40D0)
      + 0x45A15423D8050C1ALL;
  *(void *)&long long v19 = __ROR8__(v28 ^ 0x23265E05CDEF66C4, 8);
  unint64_t v29 = (-2
       - ((~(v19 + (v28 ^ 0x74B9E21C11583B51)) | 0xC11DED4DEE4C92CCLL)
        + ((v19 + (v28 ^ 0x74B9E21C11583B51)) | 0x3EE212B211B36D33))) ^ 0x91C93DACD2F1E3BBLL;
  unint64_t v30 = v29 ^ __ROR8__(v28 ^ 0x74B9E21C11583B51, 61);
  unint64_t v31 = __ROR8__(v29, 8) + v30;
  unint64_t v32 = v31 ^ 0xE5D7DAAEED85A300 ^ __ROR8__(v30, 61);
  *((void *)&v19 + 1) = v31;
  *(void *)&long long v19 = v31 ^ 0xE5D7DAAEED85A300;
  uint64_t v33 = (-2 - ((~((v19 >> 8) + v32) | 0x77956CCF89056578) + (((v19 >> 8) + v32) | 0x886A933076FA9A87))) ^ 0xF910F5B471A66C55;
  uint64_t v34 = v33 ^ __ROR8__(v32, 61);
  unint64_t v35 = (__ROR8__(v33, 8) + v34) ^ 0xCD091F17C02FDE51;
  unint64_t v36 = v35 ^ __ROR8__(v34, 61);
  *(void *)&long long v19 = __ROR8__(v35, 8);
  unint64_t v37 = (v19 + v36 - ((2 * (v19 + v36)) & 0xA9BB3F9CB54546FALL) - 0x2B226031A55D5C83) ^ 0xB657239CD3E9441FLL;
  unint64_t v38 = v37 ^ __ROR8__(v36, 61);
  *(void *)&long long v19 = __ROR8__(v37, 8);
  unint64_t v39 = (((2 * ((v19 + v38) ^ 0x42D0978BF5AB05F8)) & 0x28E8EE91FE510F3CLL)
       - ((v19 + v38) ^ 0x42D0978BF5AB05F8)
       - 0x14747748FF28879FLL) ^ 0xF39B833FCAF75AF8;
  unint64_t v40 = v39 ^ __ROR8__(v38, 61);
  *(void *)&long long v19 = __ROR8__(v39, 8);
  v9[11] = (((((2 * ((void)v19 + v40)) & 0x3AD738EFF2AEAA6ELL) - ((void)v19 + v40) - 0x1D6B9C77F9575538) ^ 0xF99FB2102DF16AB9) >> (8 * (((_BYTE)v9 + 11) & 7u))) ^ BYTE6(v10) ^ 0x58;
  unint64_t v41 = (((unint64_t)(v9 + 12) >> 8) - 0x550C087CC469144ELL + ((unint64_t)(v9 + 12) >> 3 << 59)) & 0xF9FFFFFFFFFFFFFFLL;
  unint64_t v42 = v41 ^ 0xBB8B02A5518146ACLL;
  v41 ^= 0xEC14BEBC8D361B39;
  *(void *)&long long v19 = __ROR8__(v42, 8);
  unint64_t v43 = (-2 - ((~(v19 + v41) | 0xD61356B240505818) + ((v19 + v41) | 0x29ECA94DBFAFA7E7))) ^ 0x86C786537CED296FLL;
  unint64_t v44 = v43 ^ __ROR8__(v41, 61);
  *(void *)&long long v19 = __ROR8__(v43, 8);
  unint64_t v45 = (v19 + v44 - ((2 * (v19 + v44)) & 0xA73BF08C7129AAFALL) - 0x2C6207B9C76B2A83) ^ 0x364A22E8D511767DLL;
  unint64_t v46 = v45 ^ __ROR8__(v44, 61);
  unint64_t v47 = (__ROR8__(v45, 8) + v46) ^ 0x8E85997BF8A3092DLL;
  unint64_t v48 = v47 ^ __ROR8__(v46, 61);
  unint64_t v49 = (__ROR8__(v47, 8) + v48) ^ 0xCD091F17C02FDE51;
  unint64_t v50 = v49 ^ __ROR8__(v48, 61);
  uint64_t v51 = (__ROR8__(v49, 8) + v50) ^ 0x628ABC52894BE762;
  uint64_t v52 = v51 ^ __ROR8__(v50, 61);
  uint64_t v53 = (__ROR8__(v51, 8) + v52) ^ a8;
  v9[12] = (((__ROR8__(v53, 8) + (v53 ^ __ROR8__(v52, 61))) ^ 0x1B0BD1982B59C071uLL) >> (8 * (((_BYTE)v9 + 12) & 7u))) ^ BYTE5(v10) ^ 0x26;
  *(void *)&long long v19 = __ROR8__(v9 + 13, 8);
  unint64_t v54 = ((0x150C087CC469144DLL - (v19 & 0xF8FFFFFFFFFFFFFFLL)) & 0x28C891185D033579)
      + (v19 & 0xF8FFFFFFFFFFFFFFLL)
      - 0x550C087CC469144ELL
      - (((v19 & 0xF8FFFFFFFFFFFFFFLL) - 0x550C087CC469144ELL) & 0x28C891185D033579);
  unint64_t v55 = v54 ^ 0x914393BD0C8273D5;
  v54 ^= 0xC6DC2FA4D0352E40;
  uint64_t v56 = (__ROR8__(v55, 8) + v54) ^ 0x50D4D0E13CBD7177;
  uint64_t v57 = v56 ^ __ROR8__(v54, 61);
  uint64_t v58 = __ROR8__(v56, 8) + v57;
  unint64_t v59 = v58 ^ 0xE5D7DAAEED85A300 ^ __ROR8__(v57, 61);
  *((void *)&v19 + 1) = v58;
  *(void *)&long long v19 = v58 ^ 0xE5D7DAAEED85A300;
  uint64_t v60 = __ROR8__(((v19 >> 8) + v59) ^ 0x8E85997BF8A3092DLL, 8);
  uint64_t v61 = ((v19 >> 8) + v59) ^ 0x8E85997BF8A3092DLL ^ __ROR8__(v59, 61);
  unint64_t v62 = (((v60 + v61) | 0x44E79080D479A43CLL) - ((v60 + v61) | 0xBB186F7F2B865BC3) - 0x44E79080D479A43DLL) ^ 0x89EE8F9714567A6DLL;
  uint64_t v63 = __ROR8__(v62, 8);
  unint64_t v64 = v62 ^ __ROR8__(v61, 61);
  unint64_t v65 = (v63 + v64 - ((2 * (v63 + v64)) & 0x52EBE49C49841E16) - 0x568A0DB1DB3DF0F5) ^ 0xCBFF4E1CAD89E869;
  unint64_t v66 = v65 ^ __ROR8__(v64, 61);
  *(void *)&long long v19 = __ROR8__(v65, 8);
  unint64_t v67 = (((2 * (v19 + v66)) & 0x2CE91245637A82CELL) - (v19 + v66) - 0x16748922B1BD4168) ^ 0xB34BEADE71C999F9;
  unint64_t v68 = v67 ^ __ROR8__(v66, 61);
  *(void *)&long long v19 = __ROR8__(v67, 8);
  v9[13] = ((((((void)v19 + v68) | 0x65D87B9400A7D7E8)
            - (((void)v19 + v68) | 0x9A27846BFF582817)
            - 0x65D87B9400A7D7E9) ^ 0x7ED3AA0C2BFE1799) >> (8 * (((_BYTE)v9 + 13) & 7u))) ^ BYTE4(v10) ^ 0x67;
  unint64_t v69 = (__ROR8__(v9 + 14, 8) & 0xF8FFFFFFFFFFFFFFLL) - 0x550C087CC469144ELL;
  unint64_t v70 = v69 ^ 0xB98B02A5518146ACLL;
  v69 ^= 0xEE14BEBC8D361B39;
  *(void *)&long long v19 = __ROR8__(v70, 8);
  unint64_t v71 = (-2 - ((~(v19 + v69) | 0xE9A79F6B661C85EELL) + ((v19 + v69) | 0x1658609499E37A11))) ^ 0xB9734F8A5AA1F499;
  unint64_t v72 = v71 ^ __ROR8__(v69, 61);
  *(void *)&long long v19 = __ROR8__(v71, 8);
  unint64_t v73 = (-2 - ((~(v19 + v72) | 0x4D951D4085C79FFCLL) + ((v19 + v72) | 0xB26AE2BF7A386003))) ^ 0xA842C7EE68423CFCLL;
  unint64_t v74 = v73 ^ __ROR8__(v72, 61);
  *(void *)&long long v19 = __ROR8__(v73, 8);
  uint64_t v75 = (v19 + v74 - ((2 * (v19 + v74)) & 0x21DC1477A93D02AELL) - 0x6F11F5C42B617EA9) ^ 0x1E6B93402C3D887ALL;
  uint64_t v76 = v75 ^ __ROR8__(v74, 61);
  unint64_t v77 = (__ROR8__(v75, 8) + v76) ^ 0xCD091F17C02FDE51;
  unint64_t v78 = v77 ^ __ROR8__(v76, 61);
  uint64_t v79 = (__ROR8__(v77, 8) + v78) ^ 0x628ABC52894BE762;
  uint64_t v80 = v79 ^ __ROR8__(v78, 61);
  *(void *)&long long v19 = __ROR8__(v79, 8);
  unint64_t v81 = (((v19 + v80) ^ 0xDA4A082A2E95835ALL)
       - ((2 * ((v19 + v80) ^ 0xDA4A082A2E95835ALL)) & 0xC06B33C43F36BFCLL)
       + 0x603599E21F9B5FELL) ^ 0x8689CDB730E711C5;
  unint64_t v82 = v81 ^ __ROR8__(v80, 61);
  *(void *)&long long v19 = __ROR8__(v81, 8);
  v9[14] = ((((((void)v19 + v82) | 0x66A3B2E4FFC0348)
            - (((void)v19 + v82) | 0xF995C4D1B003FCB7)
            - 0x66A3B2E4FFC0349) ^ 0x1D61EAB664A5C339) >> (8 * (((_BYTE)v9 + 14) & 7u))) ^ BYTE3(v10) ^ 0xB8;
  unint64_t v83 = (((unint64_t)(v9 + 15) >> 8) - 0x550C087CC469144ELL + ((unint64_t)(v9 + 15) >> 3 << 59)) & 0xF9FFFFFFFFFFFFFFLL;
  *(void *)&long long v19 = __ROR8__(v83 ^ 0xBB8B02A5518146ACLL, 8);
  unint64_t v84 = (((2 * (v19 + (v83 ^ 0xEC14BEBC8D361B39))) & 0x816ACA45F412BB72)
       - (v19
        + (v83 ^ 0xEC14BEBC8D361B39))
       + 0x3F4A9ADD05F6A246) ^ 0x6F9E4A3C394BD331;
  unint64_t v85 = v84 ^ __ROR8__(v83 ^ 0xEC14BEBC8D361B39, 61);
  *(void *)&long long v19 = __ROR8__(v84, 8);
  unint64_t v86 = (((v19 + v85) ^ 0x2692AA20E73CE799 | 0x9DC1EBBF7BCB2010)
       - ((v19 + v85) ^ 0x2692AA20E73CE799 | 0x623E14408434DFEFLL)
       + 0x623E14408434DFEFLL) ^ 0x5E849B3171726489;
  unint64_t v87 = v86 ^ __ROR8__(v85, 61);
  *(void *)&long long v19 = __ROR8__(v86, 8);
  unint64_t v88 = (((v19 + v87) ^ 0x919E5F45A3B0DF24)
       - ((2 * ((v19 + v87) ^ 0x919E5F45A3B0DF24)) & 0x371B0A0EEE8C1D3ELL)
       - 0x64727AF888B9F161) ^ 0x849643392C55D896 ^ __ROR8__(v87, 61);
  unint64_t v89 = (__ROR8__((((v19 + v87) ^ 0x919E5F45A3B0DF24)- ((2 * ((v19 + v87) ^ 0x919E5F45A3B0DF24)) & 0x371B0A0EEE8C1D3ELL)- 0x64727AF888B9F161) ^ 0x849643392C55D896, 8)+ v88) ^ 0xCD091F17C02FDE51;
  unint64_t v90 = v89 ^ __ROR8__(v88, 61);
  uint64_t v91 = (__ROR8__(v89, 8) + v90) ^ 0x628ABC52894BE762;
  uint64_t v92 = v91 ^ __ROR8__(v90, 61);
  *(void *)&long long v19 = __ROR8__(v91, 8);
  unint64_t v93 = (-2 - ((~(v19 + v92) | 0xC967FA94AB04334ELL) + ((v19 + v92) | 0x3698056B54FBCCB1))) ^ 0x93A76697948F142FLL;
  unint64_t v94 = v93 ^ __ROR8__(v92, 61);
  *(void *)&long long v19 = __ROR8__(v93, 8);
  v9[15] = (((-2 - ((~((void)v19 + v94) | 0x87F6A9D2E02A807ELL) + (((void)v19 + v94) | 0x7809562D1FD57F81))) ^ 0x9CFD784ACB73400FLL) >> (8 * (((_BYTE)v9 + 15) & 7u))) ^ BYTE2(v10) ^ 0x95;
  *(void *)&long long v19 = __ROR8__(v9 + 16, 8);
  unint64_t v95 = -2
      - (((0x150C087CC469144DLL - (v19 & 0xF8FFFFFFFFFFFFFFLL)) | 0xD42E87D37243C3E6)
       + (((v19 & 0xF8FFFFFFFFFFFFFFLL) - 0x550C087CC469144ELL) | 0x2BD1782C8DBC3C19));
  uint64_t v96 = v95 ^ 0x6DA5857623C2854ALL;
  v95 ^= 0x3A3A396FFF75D8DFuLL;
  *(void *)&long long v19 = __ROR8__(v96, 8);
  unint64_t v97 = (((v19 + v95) | 0x96F726EF6CD2AD87) - ((v19 + v95) | 0x6908D910932D5278) + 0x6908D910932D5278) ^ 0xC623F60E506FDCF0;
  unint64_t v98 = v97 ^ __ROR8__(v95, 61);
  unint64_t v99 = __ROR8__(v97, 8) + v98;
  unint64_t v100 = v99 ^ 0xE5D7DAAEED85A300 ^ __ROR8__(v98, 61);
  *((void *)&v19 + 1) = v99;
  *(void *)&long long v19 = v99 ^ 0xE5D7DAAEED85A300;
  uint64_t v101 = (-2 - ((~((v19 >> 8) + v100) | 0x3BD37CAD8A56413ELL) + (((v19 >> 8) + v100) | 0xC42C835275A9BEC1))) ^ 0xB556E5D672F54813;
  uint64_t v102 = v101 ^ __ROR8__(v100, 61);
  unint64_t v103 = (__ROR8__(v101, 8) + v102) ^ 0xCD091F17C02FDE51;
  uint64_t v104 = __ROR8__(v103, 8);
  unint64_t v105 = v103 ^ __ROR8__(v102, 61);
  uint64_t v106 = (v104 + v105) ^ 0x628ABC52894BE762;
  uint64_t v107 = v106 ^ __ROR8__(v105, 61);
  uint64_t v108 = (__ROR8__(v106, 8) + v107) ^ a8;
  v9[16] = (((__ROR8__(v108, 8) + (v108 ^ __ROR8__(v107, 61))) ^ 0x1B0BD1982B59C071uLL) >> (8 * (((_BYTE)v9 + 16) & 7u))) ^ BYTE1(v10) ^ 0xC0;
  unint64_t v109 = (((unint64_t)(v9 + 17) >> 8) - 0x550C087CC469144ELL + ((unint64_t)(v9 + 17) >> 3 << 59)) ^ 0xF5E6268322329A2;
  uint64_t v110 = ((2 * v109) & 0xB425A4BB16C91CCLL) - v109 - 0x5A12D25D8B648E7;
  uint64_t v111 = (__ROR8__(v110 ^ 0x4C8BB21744EBD817, 8) + (v110 ^ 0x1B140E0E985C8582)) ^ 0x50D4D0E13CBD7177;
  *((void *)&v19 + 1) = v110 ^ 0x1B140E0E985C8582;
  *(void *)&long long v19 = v110;
  uint64_t v112 = v111 ^ (v19 >> 61);
  uint64_t v113 = __ROR8__(v111, 8) + v112;
  unint64_t v114 = v113 ^ 0xE5D7DAAEED85A300 ^ __ROR8__(v112, 61);
  *((void *)&v19 + 1) = v113;
  *(void *)&long long v19 = v113 ^ 0xE5D7DAAEED85A300;
  uint64_t v115 = ((v19 >> 8) + v114) ^ 0x8E85997BF8A3092DLL;
  uint64_t v116 = v115 ^ __ROR8__(v114, 61);
  *(void *)&long long v19 = __ROR8__(v115, 8);
  unint64_t v117 = (((2 * (v19 + v116)) | 0xC2F682CA4CC09A3CLL) - (v19 + v116) - 0x617B416526604D1ELL) ^ 0xAC725E72E64F934FLL;
  unint64_t v118 = v117 ^ __ROR8__(v116, 61);
  *(void *)&long long v19 = __ROR8__(v117, 8);
  unint64_t v119 = (((2 * (v19 + v118)) | 0xC157B57B1A348C68) - (v19 + v118) - 0x60ABDABD8D1A4634) ^ 0x22166EF0451A156;
  unint64_t v120 = v119 ^ __ROR8__(v118, 61);
  *(void *)&long long v19 = __ROR8__(v119, 8);
  unint64_t v121 = (((v19 + v120) | 0xD97D8D1C4B94792ALL) - ((v19 + v120) | 0x268272E3B46B86D5) + 0x268272E3B46B86D5) ^ 0x83BD111F741F5E4BLL;
  v9[17] = (((__ROR8__(v121, 8) + (v121 ^ __ROR8__(v120, 61))) ^ 0x1B0BD1982B59C071) >> (8 * (((_BYTE)v9 + 17) & 7u))) ^ v10 ^ 0x60;
  STACK[0x388] = 0x24CC9A478416F3DCLL;
  STACK[0x3B0] = *(void *)(STACK[0x2B8] + 8 * (((v8 + 4) ^ 4) - 566867937));
  JUMPOUT(0x18DA06878);
}

uint64_t sub_18DA0D320@<X0>(int a1@<W8>)
{
  int v5 = (a1 - 1623351069) & 0x60C25BCD;
  uint64_t v6 = (*(uint64_t (**)(void))(v4 + 8 * (a1 ^ 0xEB1)))();
  *int v2 = 0;
  return (*(uint64_t (**)(uint64_t))(v4
                                            + 8
                                            * ((((2 * (((v5 + 549522739) | 0x108A803) ^ (v3 + 259))) ^ 0x3D2)
                                              * (v1 == 0x24CC9A478416F3DCLL)) ^ v5)))(v6);
}

void sub_18DA0D3B8(int a1@<W8>)
{
  (*(void (**)(uint64_t))(STACK[0x2B8] + 8 * (a1 ^ 0xAA7)))(v1 - 0x24CC9A478416F3DCLL);
  JUMPOUT(0x18DA0D3E4);
}

uint64_t sub_18DA0D3F0()
{
  return (*(uint64_t (**)(void))(STACK[0x2B8] + 8 * ((((v2 == v1) << 6) | ((v2 == v1) << 10)) ^ (v3 + v0 + 429))))();
}

uint64_t sub_18DA0D420()
{
  return ((uint64_t (*)(void))STACK[0x380])();
}

uint64_t sub_18DA0D42C()
{
  return (*(uint64_t (**)(void))(STACK[0x2B8] + 8 * ((((v0 ^ (v0 + 624)) + 464) * (v2 == v1)) ^ (v3 + v0 + 429))))();
}

uint64_t sub_18DA0D460()
{
  return (*(uint64_t (**)(void))(STACK[0x2B8] + 8
                                             * ((((26 * (v0 ^ (v0 + 24))) ^ 0x237) * (v2 == v1)) ^ (v3 + v0 + 257))))();
}

uint64_t sub_18DA0D4A0@<X0>(int a1@<W8>)
{
  int v2 = a1 + 249;
  unint64_t v3 = STACK[0x2B8];
  int v4 = a1 + 98;
  int v5 = ((a1 + 98) ^ 0x2D3) + LODWORD(STACK[0x3A4]);
  LODWORD(STACK[0x3A4]) = v5;
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((400 * ((v4 ^ (v1 + 718) ^ 0x8A4F8536) + v5 + ((v2 + 872467464) & 0xCBFF32FE) < 3)) ^ v4)))();
}

uint64_t sub_18DA0D528()
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((((2 * (((((v0 - 293) | 0x2CD) + 549522739) | 0x108A803) ^ (v2 + 259))) ^ 0x3D2)
                                * (v1 == 0x24CC9A478416F3DCLL)) ^ ((v0 - 293) | 0x2CD))))();
}

uint64_t sub_18DA0D6B4@<X0>(int a1@<W8>)
{
  STACK[0x2D0] = *(void *)(STACK[0x300] - 0x24CC9A478416F3C4);
  STACK[0x2C0] = STACK[0x280] - 0x2DD266C5A2519723;
  return (*(uint64_t (**)(void))(STACK[0x2B8]
                              + 8 * ((489 * (v2 + v1 + ((a1 - 2145353236) ^ (a1 - 499)) < 8)) ^ a1)))();
}

uint64_t sub_18DA0D738()
{
  return (*(uint64_t (**)(void))(STACK[0x2B8]
                              + 8
                              * ((((v0 - 218) ^ 0x2F1) * (STACK[0x280] - STACK[0x2D0] - 0x2DD266C5A251972DLL < 0x10)) | v0)))();
}

uint64_t sub_18DA0D788(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(void))(STACK[0x2B8]
                              + 8
                              * ((54
                                * ((((a2 ^ 0x3D) + 36) ^ (v2 < (((a2 ^ 0x73D) - 23199755) & 0x161FFEBu)
                                                                              - 1432)) & 1)) ^ a2 ^ 0x73D)))();
}

#error "18DA0E8A0: call analysis failed (funcsize=1003)"

void sub_18DA0E8A4()
{
}

uint64_t sub_18DA0E8AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  return (*(uint64_t (**)(void))(v8
                              + 8
                              * (((a8 ^ 0x28D ^ (v9 + 1494) ^ (a8 - 1580338031) & 0x7FFBBC27) * (v10 == v11)) ^ a8)))();
}

uint64_t sub_18DA0E8F4(int a1)
{
  return (*(uint64_t (**)(void))(STACK[0x2B8]
                              + 8
                              * (int)(((((a1 - 1877242317) & 0x2FE46EFF ^ 0xFFFFFF0D) + ((a1 + 1793481000) & 0x9519A5FA))
                                     * ((v1 & 8) == 0)) ^ a1)))();
}

#error "18DA0F254: call analysis failed (funcsize=510)"

void sub_18DA0F258()
{
}

uint64_t sub_18DA0F260(int a1)
{
  return (*(uint64_t (**)(void))(v1
                              + 8 * (((381 * (((v3 + 541104349) | 0x1891800) ^ 0x21C9B801) - 630) * (v2 == a1)) ^ v3)))();
}

uint64_t sub_18DA0F2B0@<X0>(int a1@<W1>, int a2@<W8>)
{
  uint64_t v2 = (a2 - 860498373);
  uint64_t v3 = v2 + STACK[0x2D0];
  unint64_t v4 = (((a1 + 566867209) - 0x800000021C9B803) & ((v3 + 10) << 56) & 0xFF00000000000000 | ((unint64_t)(v3 + 10) >> 8))
     - 0x550C087CC469144ELL;
  unint64_t v5 = (v4 | 0x991A82D9727F8A1ELL) - (v4 | 0x66E57D268D8075E1) + 0x66E57D268D8075E1;
  uint64_t v6 = v5 ^ 0x2091807C23FECCB2;
  v5 ^= 0x770E3C65FF499127uLL;
  uint64_t v7 = (__ROR8__(v6, 8) + v5) ^ 0x50D4D0E13CBD7177;
  uint64_t v8 = v7 ^ __ROR8__(v5, 61);
  uint64_t v9 = __ROR8__(v7, 8);
  unint64_t v10 = (((2 * (v9 + v8)) & 0x8B37078EC418761ELL) - (v9 + v8) - 0x459B83C7620C3B10) ^ 0x5FB3A696707667F0;
  unint64_t v11 = v10 ^ __ROR8__(v8, 61);
  uint64_t v12 = __ROR8__(v10, 8);
  unint64_t v13 = (((2 * (v12 + v11)) | 0x909803455169E568) - (v12 + v11) - 0x484C01A2A8B4F2B4) ^ 0xC6C998D95017FB99;
  unint64_t v14 = v13 ^ __ROR8__(v11, 61);
  uint64_t v15 = __ROR8__(v13, 8);
  unint64_t v16 = (((2 * (v15 + v14)) | 0x661703085D1D211ALL) - (v15 + v14) - 0x330B81842E8E908DLL) ^ 0xFE029E93EEA14EDCLL;
  unint64_t v17 = v16 ^ __ROR8__(v14, 61);
  uint64_t v18 = __ROR8__(v16, 8);
  unint64_t v19 = (((2 * (v18 + v17)) | 0x88D82846AB8C19D8) - (v18 + v17) - 0x446C142355C60CECLL) ^ 0x26E6A871DC8DEB8ELL;
  unint64_t v20 = v19 ^ __ROR8__(v17, 61);
  uint64_t v21 = __ROR8__(v19, 8);
  *(unsigned char *)(v3 + 10) = (((__ROR8__((0x96EEEB3C2090953ELL- ((v21 + v20) | 0x96EEEB3C2090953ELL)+ ((v21 + v20) | 0x691114C3DF6F6AC1)) ^ 0x33D188C0E0E44DA0, 8)+ ((0x96EEEB3C2090953ELL- ((v21 + v20) | 0x96EEEB3C2090953ELL)+ ((v21 + v20) | 0x691114C3DF6F6AC1)) ^ 0x33D188C0E0E44DA0 ^ __ROR8__(v20, 61))) ^ 0x1B0BD1982B59C071) >> (8 * ((v3 + 10) & 7))) ^ *(unsigned char *)(STACK[0x2C0] + v2);
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, unint64_t, unint64_t))(STACK[0x2B8] + 8 * (((8 * (a2 != 860498373)) | ((a2 != 860498373) << 7)) ^ (a1 - 136))))(0x991A82D9727F8A1ELL, 0x2091807C23FECCB2, 0x770E3C65FF499127, 0x8B37078EC418761ELL, 0xBA647C389DF3C4F0, 0x5FB3A696707667F0, 0x909803455169E568, 0xB7B3FE5D574B0D4CLL);
}

uint64_t sub_18DA0F56C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 4) - 301540361 * ((~a1 & 0x49C9CFEB | a1 & 0xB6363014) ^ 0x8D90C899);
  return (*(uint64_t (**)(void))((char *)*(&off_1E559D8D0 + (v1 ^ 0x463))
                              + 8 * ((((13 * (v1 ^ 0x44B)) ^ 0x13A) * (*(void *)(a1 + 8) == 0)) ^ v1)
                              - 12))();
}

_DWORD *sub_18DA0F604(_DWORD *result)
{
  *result = -346732044;
  return result;
}

_DWORD *sub_18DA0F614@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 4) = result[4] - v2 + ((564 * (v3 ^ 0x1C5)) ^ 0x9E6632B0);
  *result = 2001147358;
  return result;
}

uint64_t sub_18DA0F650(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v2 = *(_DWORD *)(a1 + 16)
     + 2076429097 * ((((2 * (a1 ^ 0x6B58D2DD)) | 0x803DAA60) - (a1 ^ 0x6B58D2DD) + 1071721168) ^ 0xE974FF15);
  uint64_t v3 = *(void *)(a1 + 8);
  v6[0] = (248152243 * ((v6 - 397293405 - 2 * (v6 & 0xE851C8A3)) ^ 0xF2948501)) ^ (v2 + 79139507);
  unint64_t v4 = (char *)*(&off_1E559D8D0 + v2 - 1379287151) - 12;
  (*(void (**)(_DWORD *))&v4[8 * (v2 ^ 0x52364808)])(v6);
  uint64_t v7 = v3;
  v6[0] = v2
        - 1379287151
        + 1779465991 * ((-1962458332 - (v6 | 0x8B074324) + (v6 | 0x74F8BCDB)) ^ 0x523C3A15)
        + 1147;
  uint64_t result = (*(uint64_t (**)(_DWORD *))&v4[8 * (v2 ^ 0x523648BA)])(v6);
  *(_DWORD *)a1 = 260430583 * v6[1] - 1830933960;
  return result;
}

uint64_t sub_18DA0F80C(uint64_t a1)
{
  int v1 = *(_DWORD *)a1 - 1275073529 * ((((2 * a1) | 0xDB2AE4E4) - a1 - 1838510706) ^ 0x81132F09);
  return (*(uint64_t (**)(void))((char *)*(&off_1E559D8D0 + (v1 ^ 0x529))
                              + 8 * ((((3 * (v1 ^ 0x4E3)) ^ 0x522) * (*(void *)(a1 + 16) == 0)) ^ v1)
                              - 12))();
}

uint64_t sub_18DA0F8AC(uint64_t result)
{
  *(_DWORD *)(result + 8) = 1350066117;
  return result;
}

uint64_t sub_18DA0F8BC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 20) = (v3 + 2057287719) & 0x856047B7 ^ (*(_DWORD *)(result + 4) - v2) ^ 0xF9AF05F1;
  *(_DWORD *)(result + 8) = 693475099;
  return result;
}

void sub_18DA0F900(uint64_t a1)
{
  if (*(void *)(a1 + 16)) {
    BOOL v2 = *(void *)a1 == 0x60DE7237762FB090;
  }
  else {
    BOOL v2 = 1;
  }
  int v3 = !v2;
  int v1 = *(_DWORD *)(a1 + 24) ^ (1894094617 * ((499646398 - (a1 | 0x1DC7FFBE) + (a1 | 0xE2380041)) ^ 0xFF37CED1));
  __asm { BRAA            X9, X17 }
}

uint64_t sub_18DA0FA34@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, unint64_t *a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t *a15, unint64_t *a16, uint64_t a17, unint64_t *a18, unint64_t *a19, uint64_t a20,uint64_t a21,unint64_t a22,uint64_t a23,unint64_t a24,uint64_t a25,unint64_t *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,unint64_t *a32,uint64_t a33,unint64_t a34,unint64_t *a35,unint64_t a36,unint64_t a37,unint64_t *a38,unint64_t *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49,int a50,char *a51,unint64_t a52,uint64_t a53,unint64_t *a54)
{
  a16 = &STACK[0x1E34DA578D8F4E8B];
  a32 = &STACK[0x53992AF880434009];
  a11 = &STACK[0x1E34DA578D8F4EA3];
  a18 = &STACK[0x1E34DA578D8F4E5B];
  a26 = &STACK[0x1E34DA578D8F4F53];
  a19 = &STACK[0x1E34DA578D8F4D8B];
  a38 = &STACK[0x53992AF880433FA1];
  a15 = &STACK[0x1E34DA578D8F4E53];
  a39 = &STACK[0x36533D3AA39D32B9];
  STACK[0x3C8] = (unint64_t)&STACK[0x53992AF880434119];
  a35 = &STACK[0x1E34DA578D8F4DB3];
  a54 = &STACK[0x36533D3AA39D3409];
  a53 = v54 + 0xD148FB722DB3AB8;
  unint64_t v56 = a36;
  a52 = a36 + 0x4BB5DA5DB9E5414BLL;
  STACK[0x3D8] = v54 - 0x60DE7237762FB090;
  *(int64x2_t *)&STACK[0x4E0] = vdupq_n_s64(0x38uLL);
  *(int64x2_t *)&STACK[0x680] = vdupq_n_s64(0xF8FFFFFFFFFFFFFFLL);
  *(int64x2_t *)&STACK[0x650] = vdupq_n_s64(0x55E7EF06772DD764uLL);
  *(int64x2_t *)&STACK[0x630] = vdupq_n_s64(0xD75B4A9B67868872);
  *(_OWORD *)&STACK[0x4F0] = xmmword_18DDB59D0;
  LODWORD(a21) = (v55 - 769294899) & 0x2DDA87FB;
  a37 = (v55 + 1281764181) & 0xFFFFFFFFB399D3DBLL;
  LODWORD(STACK[0x4AC]) = (v55 - 186310576) & 0xB1ADFDF;
  HIDWORD(a27) = (v55 - 1085037429) & 0x40AC5B1B;
  *(int64x2_t *)&STACK[0x620] = vdupq_n_s64(0x9AA19CD0EF5A2FEBLL);
  *(int64x2_t *)&STACK[0x610] = vdupq_n_s64(0x5626A7E8E2420295uLL);
  *(int64x2_t *)&STACK[0x600] = vdupq_n_s64(0x1B91BF13EF55F00uLL);
  *(int64x2_t *)&STACK[0x5F0] = vdupq_n_s64(0x50D4D0E13CBD7177uLL);
  *(int64x2_t *)&STACK[0x5E0] = vdupq_n_s64(0x849309F7FD9A8BD9);
  *(int64x2_t *)&STACK[0x5D0] = vdupq_n_s64(0x7B6CF60802657426uLL);
  *(int64x2_t *)&STACK[0x670] = vdupq_n_s64(0xFFFFFFFFFFFFFFFELL);
  *(int64x2_t *)&STACK[0x5C0] = vdupq_n_s64(0x9EBB2CA6EFE0D726);
  *(int64x2_t *)&STACK[0x660] = vdupq_n_s64(0x8E85997BF8A3092DLL);
  *(int64x2_t *)&STACK[0x5B0] = vdupq_n_s64(0x79A234E3E9ACE39AuLL);
  *(int64x2_t *)&STACK[0x5A0] = vdupq_n_s64(0x3CD11A71F4D671CDuLL);
  *(int64x2_t *)&STACK[0x590] = vdupq_n_s64(0xF1D8056634F9AF9CLL);
  *(int64x2_t *)&STACK[0x580] = vdupq_n_s64(0x628ABC52894BE762uLL);
  *(int64x2_t *)&STACK[0x570] = vdupq_n_s64(0xA2147622BAF9140ELL);
  *(int64x2_t *)&STACK[0x560] = vdupq_n_s64(0x2EF5C4EEA28375F8uLL);
  *(int64x2_t *)&STACK[0x550] = vdupq_n_s64(0x743558ED9D085299uLL);
  *(int64x2_t *)&STACK[0x640] = vdupq_n_s64(0x1B0BD1982B59C071uLL);
  HIDWORD(a40) = v55 ^ 0x369;
  a50 = v55 ^ 0x257;
  LODWORD(a23) = (v55 + 580464765) & 0xDD66CFFD;
  LODWORD(a27) = a23 ^ 0x1EB;
  HIDWORD(a21) = v55 + 113134733;
  a14 = 0x1CAEFB3D54F94258;
  LODWORD(STACK[0x4A8]) = v55 ^ 0x2D9;
  HIDWORD(a25) = 827 * (v55 ^ 0x168);
  LODWORD(a31) = HIDWORD(a25) ^ 0x505;
  LODWORD(a17) = ((v55 + 971799176) & 0xC61385FD) - 465;
  HIDWORD(a17) = v55 ^ 0x713;
  a34 = v56 - 0x134F8A868441352ELL;
  a22 = v56 - 0x134F8A868441351ALL;
  a24 = v56 - 0x134F8A8684413526;
  a51 = (char *)&a10 - 0x1E7881515ED9428FLL;
  HIDWORD(a30) = v55 ^ 0x14A;
  HIDWORD(a23) = v55 ^ 0x9C7;
  HIDWORD(a12) = v55 ^ 0x169;
  LODWORD(a13) = v55 ^ 0x16D;
  HIDWORD(a13) = -829080363;
  HIDWORD(a33) = 38 * (v55 ^ 0x175);
  LODWORD(a33) = HIDWORD(a33) ^ 0x298;
  LODWORD(STACK[0x69C]) = v55;
  STACK[0x6C8] = a4;
  STACK[0x718] = *(void *)(a4 + 8 * a9);
  *a2 = &STACK[0x36533D3AA39D34F1];
  STACK[0x3D0] = v56;
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *, uint64_t, unint64_t *, unint64_t *, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t, unint64_t *, unint64_t, unint64_t, unint64_t *, unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 8 * (((v56 == 0x134F8A868441352ELL) * ((2 * ((16 * (a9 ^ 0x53)) ^ 0x535) - 139) ^ (16 * (a9 ^ 0x53) - 1155))) | (16 * (a9 ^ 0x53)))))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45);
}

uint64_t sub_18DA0FF94@<X0>(uint64_t (*a1)(void)@<X8>)
{
  return a1();
}

uint64_t sub_18DA0FFA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4
                              + 8 * ((((v5 ^ 0x54) + ((v5 + 75) | 0x22) - 52) * (v4 == 0x36533D3AA39D2B8DLL)) ^ v5)))();
}

uint64_t sub_18DA0FFF8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(STACK[0x3D0] - 0x134F8A8684413526);
  a2[70] = *(void *)(a4 + 8 * v5);
  a2[48] = v4;
  LODWORD(STACK[0x834]) = -1129976585;
  a2[17] = 0x24CC9A478416F3DCLL;
  a2[18] = 0x6F654FD9E3543B12;
  BOOL v8 = v6 == 0x66FBF218A8091D0CLL || v4 == 0x36533D3AA39D2B8DLL;
  return (*(uint64_t (**)(void))(a4
                              + 8
                              * (int)((((((((v5 + 1119) | 0xA4) - 1304) ^ v8) & 1) == 0)
                                     * (((((v5 + 1119) | 0xA4) - 1304) | 0x23) - 62)) ^ ((v5 + 1119) | 0xA4))))();
}

uint64_t sub_18DA10024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8 * ((1997 * (v4 == v6 + v5 + 1405 - 1767)) ^ v5)))();
}

uint64_t sub_18DA10050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)(v5 - 224) = (v4 + 70) ^ (1966835309
                                     * ((~((v5 - 232) ^ 0xBADA9CD0 | 0x7FF94509)
                                       + (((v5 - 232) ^ 0xBADA9CD0) & 0x7FF94509)) ^ 0x89B92546));
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(a4 + 8 * (v4 + 493)))(v5 - 232);
  unint64_t v8 = STACK[0xB98];
  STACK[0x848] = STACK[0xB98];
  return (*(uint64_t (**)(uint64_t))(a4
                                            + 8
                                            * (((((v4 + 58) ^ (v8 == 0)) & 1) * (v4 - 1268)) ^ v4)))(v7);
}

uint64_t sub_18DA10100(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  a2[31] = 0;
  LODWORD(STACK[0x9AC]) = 1356535942;
  a2[55] = 0;
  a2[51] = 0x134F8A868441352ELL;
  return (*(uint64_t (**)(void))(v52
                              + 8
                              * (int)(((((a51 == 0x6DF301EE990AEB48) ^ (v51 + 94)) & 1)
                                     * (((v51 + 408948571) & 0xE79FEAD7) - 576)) | v51)))();
}

uint64_t sub_18DA101A0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t v52 = a2[1];
  a2[72] = a49 + v52 + 80;
  uint64_t v53 = a49 + v52 + 96;
  a2[68] = v53;
  a2[56] = a49 + v52 + 128;
  a2[1] = v52 + ((v50 - 580) | 0x284u) - 580;
  (*(void (**)(void))(a4 + 8 * (v50 + 1614)))();
  uint64_t v54 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v51 + 8 * (v50 ^ 0xAF6)))(v53, 0, 32);
  STACK[0x928] = 0x66FBF218A8091D0CLL;
  STACK[0x6D8] = 0;
  LODWORD(STACK[0x8B4]) = -1129976585;
  STACK[0x938] = 0;
  LODWORD(STACK[0x77C]) = 1356535942;
  return (*(uint64_t (**)(uint64_t))(v51 + 8 * (((v50 - 553) * (a50 != 0x5F0564E43E267679)) ^ v50)))(v54);
}

uint64_t sub_18DA1028C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t *a33)
{
  uint64_t v35 = *a33;
  *(void *)(a2 + 488) = 0;
  LODWORD(STACK[0x6D4]) = v33;
  STACK[0x400] = (unint64_t)&STACK[0x948];
  STACK[0x3F0] = (unint64_t)&STACK[0x6D4];
  return (*(uint64_t (**)(void))(a4
                              + 8
                              * (((((v34 + 26) & 0xFB) - 41) ^ (v35 == 0x66FBF218A8091D0CLL)) & 1 | (4 * (((((v34 + 26) & 0xFB) - 41) ^ (v35 == 0x66FBF218A8091D0CLL)) & 1)) | (((v34 - 552001766) & 0x20E6DFFB) + 1334))))();
}

uint64_t sub_18DA1030C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a2 + 8) = v6 - 80;
  return (*(uint64_t (**)(void))(a4
                              + 8
                              * (int)(((v5 == 1393700946)
                                     * ((((v4 + 1982806084) & 0x89D0C7B7) + 2617) ^ (v4 + 465280216) & 0xE44466FF)) ^ v4)))();
}

uint64_t sub_18DA10318@<X0>(uint64_t a1@<X3>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(a1 + 8 * ((((v2 - 327) ^ 0x218) * a2) ^ (v2 - 327))))();
}

uint64_t sub_18DA10338(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  int v6 = 593 * (v4 ^ 0x21);
  uint64_t v7 = a2[61];
  int v8 = STACK[0x6D4];
  unint64_t v9 = STACK[0x3C8];
  a2[32] = *(void *)(a4 + 8 * v4);
  a2[27] = v9;
  LODWORD(STACK[0x854]) = v8;
  a2[20] = v7;
  a2[41] = 0x6C7FF723B0D6051BLL;
  LODWORD(STACK[0x6F0]) = -1129976585;
  a2[54] = 0x10426474F9598483;
  STACK[0x740] = 0;
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(a4 + 8 * (v6 + 1023)))(16);
  STACK[0x898] = v11 + v5;
  return (*(uint64_t (**)(void))(a4
                              + 8
                              * (((2 * ((((v6 ^ 0xC8) + 125) ^ (v11 == 0)) & 1)) & 0xF7 | (8 * ((((v6 ^ 0xC8) + 125) ^ (v11 == 0)) & 1))) ^ v6)))();
}

uint64_t sub_18DA103FC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = 0x24CC9A478416F3DCLL;
  a1[1] = 0x24CC9A478416F3DCLL;
  return (*(uint64_t (**)(uint64_t))(a4
                                            + 8
                                            * ((((unint64_t)(v4 - 1356535942) + 1440341746 > 0x55D9DEF2)
                                              * (((12 * ((v5 + 122) ^ 0x337) - 920200971) & 0x36D92B75) - 1094)) ^ (v5 + 122))))(1);
}

uint64_t sub_18DA1043C()
{
  return v0();
}

uint64_t sub_18DA10460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8 * ((43 * (*(void *)(a2 + 488) == 0)) ^ (v4 + 419))))();
}

uint64_t sub_18DA10488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32)
{
  return (*(uint64_t (**)(void))(a4 + 8 * ((a32 * (v32 == v34)) ^ (v33 - 26))))();
}

uint64_t sub_18DA104B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (*(uint64_t (**)(void))(a4 + 8 * (v5 + 1859)))();
  return (*(uint64_t (**)(uint64_t, unint64_t *))(a4
                                                                + 8
                                                                * ((((38 * (v5 ^ 0x175)) ^ 0x298) * (v4 == v6)) ^ (v5 - 26))))(v8, &STACK[0x760]);
}

uint64_t sub_18DA1051C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4
                              + 8 * (((((v4 ^ (*(void *)(a2 + 456) == v5)) & 1) == 0) * ((v4 ^ 0x5F0) - 314)) ^ v4)))();
}

uint64_t sub_18DA1055C@<X0>(void *a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3 ^ 0x4A8;
  STACK[0x750] = *(void *)(a2 + 8 * v4);
  a1[45] = a3;
  LODWORD(STACK[0xA78]) = -975974931;
  LOWORD(STACK[0xA7E]) = -31135;
  LODWORD(STACK[0xA80]) = -1129976589;
  LODWORD(STACK[0xA84]) = -1129976586;
  a1[101] = 0x10426474F9598483;
  a1[102] = 0;
  return (*(uint64_t (**)(void))(a2
                              + 8
                              * (int)((((((v4 + 94) ^ (a3 == 0x66FBF218A8091D0CLL)) & 1) == 0)
                                     * (((v4 + 94) | 0x20C) + 354)) ^ (v4 + 446))))();
}

uint64_t sub_18DA172B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(a4 + 8 * (v4 + 1541)))(32);
  unint64_t v6 = STACK[0x6C8];
  STACK[0x708] = v5 + 0x24CC9A478416F3DCLL;
  return (*(uint64_t (**)(void))(v6 + 8 * (((v5 == 0) * ((v4 + 680) ^ (v4 - 306) ^ 0x5B9)) ^ v4)))();
}

uint64_t sub_18DA17328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = 0x24CC9A478416F3DCLL;
  *(void *)(a1 + 8) = 0x24CC9A478416F3DCLL;
  unint64_t v7 = v5 ^ 0xBCA5ECF7;
  STACK[0xA98] = v7;
  LODWORD(v7) = ((v7 + 10) ^ 0xF9FCD6FF) + 1609526196 + (((v4 - 986) ^ 0xF3F9AC94) & (2 * (v7 + 10)));
  *(_DWORD *)(a1 + 16) = v7;
  uint64_t v8 = (*(uint64_t (**)(void))(a4 + 8 * (v4 + 861)))((v7 - 1508655795));
  unint64_t v9 = STACK[0x6C8];
  *(void *)(a1 + 24) = v8;
  return (*(uint64_t (**)(void))(v9 + 8 * (v4 | (2 * (v8 != 0)))))();
}

uint64_t sub_18DA173C8()
{
  int v3 = LOWORD(STACK[0xA3E]);
  LODWORD(STACK[0x6B0]) = STACK[0xA40];
  LODWORD(STACK[0x540]) = STACK[0xA44];
  uint64_t v4 = LODWORD(STACK[0x69C]);
  LODWORD(STACK[0x6A0]) = v3;
  int v5 = *(unsigned char **)(v0 + 24);
  uint64_t v6 = __ROR8__(v5, 8);
  unint64_t v7 = (0x150C087CC469144DLL - (v6 & 0xF8FFFFFFFFFFFFFFLL)) & 0x19A889ECFF1A1ED8 | ((v6 & 0xF8FFFFFFFFFFFFFFLL)
                                                                                    - 0x550C087CC469144ELL) & 0xE057761300E5E127;
  uint64_t v8 = __ROR8__(v7 ^ 0xA2238B49AE9B5874, 8);
  v7 ^= 0xF5BC3750722C05E1;
  uint64_t v9 = __ROR8__((v8 + v7) ^ 0x50D4D0E13CBD7177, 8);
  uint64_t v10 = (v8 + v7) ^ 0x50D4D0E13CBD7177 ^ __ROR8__(v7, 61);
  unint64_t v11 = (v9 + v10) ^ 0xE5D7DAAEED85A300 ^ __ROR8__(v10, 61);
  *((void *)&v12 + 1) = v9 + v10;
  *(void *)&long long v12 = (v9 + v10) ^ 0xE5D7DAAEED85A300;
  unint64_t v13 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))(STACK[0x6C8]
                                                                                                + 8 * (v2 ^ 0x19C));
  uint64_t v14 = ((v12 >> 8) + v11) ^ 0x8E85997BF8A3092DLL ^ __ROR8__(v11, 61);
  unint64_t v15 = (__ROR8__(((v12 >> 8) + v11) ^ 0x8E85997BF8A3092DLL, 8) + v14) ^ 0xCD091F17C02FDE51;
  unint64_t v16 = v15 ^ __ROR8__(v14, 61);
  uint64_t v17 = (__ROR8__(v15, 8) + v16) ^ 0x628ABC52894BE762;
  uint64_t v18 = v17 ^ __ROR8__(v16, 61);
  *(void *)&long long v12 = __ROR8__(v17, 8);
  *int v5 = (((__ROR8__((((2 * (v12 + v18)) & 0xFCA17D98F44813EALL) - (v12 + v18) - 0x7E50BECC7A2409F6) ^ 0xDB6FDD30BA50D16BLL, 8)+ ((((2 * ((void)v12 + v18)) & 0xFCA17D98F44813EALL) - ((void)v12 + v18) - 0x7E50BECC7A2409F6) ^ 0xDB6FDD30BA50D16BLL ^ __ROR8__(v18, 61))) ^ 0x1B0BD1982B59C071) >> (8 * (v5 & 7u))) ^ HIBYTE(v1) ^ 0xBC;
  unint64_t v19 = (__ROR8__(v5 + 1, 8) & 0xF8FFFFFFFFFFFFFFLL) - 0x550C087CC469144ELL;
  unint64_t v20 = v19 ^ 0xB98B02A5518146ACLL;
  v19 ^= 0xEE14BEBC8D361B39;
  uint64_t v21 = (__ROR8__(v20, 8) + v19) ^ 0x50D4D0E13CBD7177;
  uint64_t v22 = v21 ^ __ROR8__(v19, 61);
  *(void *)&long long v12 = __ROR8__(v21, 8);
  uint64_t v23 = __ROR8__((((2 * (v12 + v22)) & 0xA793A7F6AC829AE6) - (v12 + v22) - 0x53C9D3FB56414D74) ^ 0x49E1F6AA443B118CLL, 8);
  unint64_t v24 = (((2 * (v12 + v22)) & 0xA793A7F6AC829AE6) - (v12 + v22) - 0x53C9D3FB56414D74) ^ 0x49E1F6AA443B118CLL ^ __ROR8__(v22, 61);
  unint64_t v25 = (v23 + v24) ^ 0x8E85997BF8A3092DLL;
  unint64_t v26 = v25 ^ __ROR8__(v24, 61);
  *(void *)&long long v12 = __ROR8__(v25, 8);
  unint64_t v27 = (((2 * (v12 + v26)) & 0xF0BAF55B447DEC8ELL) - (v12 + v26) + 0x7A285525DC109B8) ^ 0xCAAB9A459DEED7E9;
  unint64_t v28 = v27 ^ __ROR8__(v26, 61);
  *(void *)&long long v12 = __ROR8__(v27, 8);
  unint64_t v29 = (-2 - ((~(v12 + v28) | 0x1FF46385B66E09DELL) + ((v12 + v28) | 0xE00B9C7A4991F621))) ^ 0x7D7EDFD73F25EEBCLL;
  unint64_t v30 = v29 ^ __ROR8__(v28, 61);
  *(void *)&long long v12 = __ROR8__(v29, 8);
  unint64_t v31 = (0xA4E31C196FB07E65 - ((v12 + v30) | 0xA4E31C196FB07E65) + ((v12 + v30) | 0x5B1CE3E6904F819ALL)) ^ 0x1DC7FE5AFC4A6FBLL;
  unint64_t v32 = v31 ^ __ROR8__(v30, 61);
  *(void *)&long long v12 = __ROR8__(v31, 8);
  v5[1] = (((-2 - ((~((void)v12 + v32) | 0x75B531B3FC4CDC6BLL) + (((void)v12 + v32) | 0x8A4ACE4C03B32394))) ^ 0x6EBEE02BD7151C1ALL) >> (8 * (((_BYTE)v5 + 1) & 7u))) ^ BYTE2(v1) ^ 0xA5;
  unint64_t v33 = (__ROR8__(v5 + 2, 8) & 0xF8FFFFFFFFFFFFFFLL) - 0x550C087CC469144ELL;
  unint64_t v34 = v33 ^ 0xB98B02A5518146ACLL;
  v33 ^= 0xEE14BEBC8D361B39;
  *(void *)&long long v12 = __ROR8__(v34, 8);
  uint64_t v35 = __ROR8__((((2 * (v12 + v33)) & 0x9D263FB38571CE96) - (v12 + v33) + 0x316CE0263D4718B4) ^ 0x61B830C701FA69C3, 8);
  unint64_t v36 = (((2 * (v12 + v33)) & 0x9D263FB38571CE96) - (v12 + v33) + 0x316CE0263D4718B4) ^ 0x61B830C701FA69C3 ^ __ROR8__(v33, 61);
  uint64_t v37 = v35 + v36;
  unint64_t v38 = (v35 + v36) ^ 0xE5D7DAAEED85A300 ^ __ROR8__(v36, 61);
  *((void *)&v12 + 1) = v37;
  *(void *)&long long v12 = v37 ^ 0xE5D7DAAEED85A300;
  uint64_t v39 = (0x8EEAB8D098054CA2 - (((v12 >> 8) + v38) | 0x8EEAB8D098054CA2) + (((v12 >> 8) + v38) | 0x7115472F67FAB35DLL)) ^ 0xFF90DE549F59BA70;
  uint64_t v40 = v39 ^ __ROR8__(v38, 61);
  *(void *)&long long v12 = __ROR8__(v39, 8);
  unint64_t v41 = (-2 - ((~(v12 + v40) | 0x978199C1D991797DLL) + ((v12 + v40) | 0x687E663E266E8682))) ^ 0x5A8886D619BEA72CLL;
  unint64_t v42 = v41 ^ __ROR8__(v40, 61);
  *(void *)&long long v12 = __ROR8__(v41, 8);
  unint64_t v43 = (((2 * (v12 + v42)) & 0x9D3B31D97DA9F9B8) - (v12 + v42) - 0x4E9D98ECBED4FCDDLL) ^ 0xD3E8DB41C860E441;
  unint64_t v44 = v43 ^ __ROR8__(v42, 61);
  uint64_t v45 = (__ROR8__(v43, 8) + v44) ^ 0x5AC09C033F8B2761;
  v5[2] = (((__ROR8__(v45, 8) + (v45 ^ __ROR8__(v44, 61))) ^ 0x1B0BD1982B59C071uLL) >> (8 * (((_BYTE)v5 + 2) & 7u))) ^ BYTE1(v1) ^ 0xEC;
  *(void *)&long long v12 = __ROR8__(v5 + 3, 8);
  unint64_t v46 = ((2 * ((v12 & 0xF8FFFFFFFFFFFFFFLL) - 0x550C087CC469144ELL)) | 0x20EB39D37CA90794)
      - ((v12 & 0xF8FFFFFFFFFFFFFFLL)
       - 0x550C087CC469144ELL)
      - 0x10759CE9BE5483CALL;
  unint64_t v47 = v46 ^ 0xA9FE9E4CEFD5C566;
  v46 ^= 0xFE612255336298F3;
  *(void *)&long long v12 = __ROR8__(v47, 8);
  unint64_t v48 = (-2 - ((~(v12 + v46) | 0x3D54A62DE74C24CLL) + ((v12 + v46) | 0xFC2AB59D218B3DB3))) ^ 0x53019A83E2C9B33BLL;
  unint64_t v49 = v48 ^ __ROR8__(v46, 61);
  *(void *)&long long v12 = __ROR8__(v48, 8);
  unint64_t v50 = (-2 - ((~(v12 + v49) | 0x1730E72B835C4191) + ((v12 + v49) | 0xE8CF18D47CA3BE6ELL))) ^ 0xF2E73D856ED9E291;
  unint64_t v51 = v50 ^ __ROR8__(v49, 61);
  *(void *)&long long v12 = __ROR8__(v50, 8);
  unint64_t v52 = (v12 + v51 - ((2 * (v12 + v51)) & 0x9B516F8D43D1232ELL) - 0x325748395E176E69) ^ 0x432D2EBD594B98BALL;
  unint64_t v53 = v52 ^ __ROR8__(v51, 61);
  unint64_t v54 = (__ROR8__(v52, 8) + v53) ^ 0xCD091F17C02FDE51;
  unint64_t v55 = v54 ^ __ROR8__(v53, 61);
  *(void *)&long long v12 = __ROR8__(v54, 8);
  unint64_t v56 = (((2 * (v12 + v55)) | 0x70B9105F53F81A68) - (v12 + v55) + 0x47A377D05603F2CCLL) ^ 0xDAD6347D20B7EA56;
  unint64_t v57 = v56 ^ __ROR8__(v55, 61);
  uint64_t v58 = (__ROR8__(v56, 8) + v57) ^ 0x5AC09C033F8B2761;
  uint64_t v59 = v58 ^ __ROR8__(v57, 61);
  *(void *)&long long v12 = __ROR8__(v58, 8);
  v5[3] = v1 ^ ((((void)v12 + v59 - ((2 * ((void)v12 + v59)) & 0xCDE279B6265D5694) - 0x190EC324ECD154B6) ^ 0xFDFAED4338776B3BLL) >> (8 * (((_BYTE)v5 + 3) & 7u))) ^ 0xF7;
  return v13(v4, 0xDAD6347D20B7EA56, -2, 0xAAF3F7833B96EBB2, 0x55E7EF06772DD764);
}

uint64_t sub_18DA17C4C@<X0>(unsigned __int16 a1@<W8>)
{
  if (a1 == 34401) {
    return (*(uint64_t (**)(void))(STACK[0x6C8] + 8 * ((v2 + 417) ^ (1073 * (v3 == v1)))))();
  }
  if (a1 == 16845)
  {
    unsigned int v6 = LODWORD(STACK[0xA98]) - ((2 * LODWORD(STACK[0xA98])) & 0xA32AAC02) + v2 + 1368741015;
    return (*(uint64_t (**)(void))(STACK[0x6C8]
                                + 8
                                * ((60
                                  * (((2 * v6) & 0xE4FFF4F6 ^ 0xA02AA402) + (v6 ^ 0x23EAAC7A) - 574620161 == 1346369658)) ^ (v2 + 1583))))();
  }
  else
  {
    unint64_t v5 = STACK[0x6C8];
    if (a1 == 38291) {
      return (*(uint64_t (**)(void))(v5
    }
                                  + 8
                                  * ((LODWORD(STACK[0x69C]) + 231) ^ (2
                                                                    * (LODWORD(STACK[0xA80]) == (LODWORD(STACK[0x69C]) ^ 0xBCA5ED95))))))();
    else {
      return (*(uint64_t (**)(void))(v5
    }
                                  + 8
                                  * (((((v2 + 1) ^ (*(void *)(STACK[0x708] - 0x24CC9A478416F3C4) == 0)) & 1)
                                    * ((v2 - 1528572283) & 0x5B1C2F3F ^ 0x733)) ^ (v2 + 1473))))();
  }
}

uint64_t sub_18DA1A5D8()
{
  return (*(uint64_t (**)(void))(STACK[0x6C8]
                              + 8
                              * ((251
                                * (v2 + v1 - 1920989819 < ((v0 + 367162178) ^ 0x15E2706D ^ (v0 + 367162178) & 0xEA1D8DFF ^ 0x265))) ^ v0)))();
}

uint64_t sub_18DA1A660@<X0>(uint64_t a1@<X8>)
{
  BOOL v3 = v1 - a1 - (unint64_t)((v2 - 1174464213) & 0x4600E86B) + 2143 < (unint64_t)((v2 - 1709775315) & 0x65E917BF)
                                                                           - 1199;
  return (*(uint64_t (**)(void))(STACK[0x6C8] + 8 * (v3 | (32 * v3) | v2)))();
}

uint64_t sub_18DA1A6C4()
{
  int v2 = *(uint64_t (**)(void))(STACK[0x6C8] + 8 * (((v1 < ((v0 + 2001310546) & 0x88B667F4) - 928) * (v0 - 1917)) ^ v0));
  *(int64x2_t *)&STACK[0x510] = vdupq_n_s64(0x7478E03DF40C5B42uLL);
  *(int64x2_t *)&STACK[0x500] = vdupq_n_s64(0x43EF5C8734CE4CF8uLL);
  *(int64x2_t *)&STACK[0x4D0] = vdupq_n_s64(0x5E0851BC6598D983uLL);
  *(int64x2_t *)&STACK[0x430] = vdupq_n_s64(0x93FBB324C015C46DLL);
  *(int64x2_t *)&STACK[0x530] = vdupq_n_s64(0xC4640F3D1CA299F8);
  *(int64x2_t *)&STACK[0x540] = vdupq_n_s64(0x3E7010AE0C9DA520uLL);
  *(int64x2_t *)&STACK[0x4C0] = vdupq_n_s64(0x9F380857064ED290);
  *(int64x2_t *)&STACK[0x6A0] = vdupq_n_s64(0xCFECD8B63AF3A3E7);
  *(int64x2_t *)&STACK[0x6B0] = vdupq_n_s64(0x5779CC908A660305uLL);
  *(int64x2_t *)&STACK[0x420] = vdupq_n_s64(0xA886336F7599FCFALL);
  *(int64x2_t *)&STACK[0x4B0] = vdupq_n_s64(0xB2AE163E67E3A005);
  *(int64x2_t *)&STACK[0x480] = vdupq_n_s64(0xA2D96FE4A6DCACF6);
  *(int64x2_t *)&STACK[0x490] = vdupq_n_s64(0x2E93480DAC91A984uLL);
  *(int64x2_t *)&STACK[0x470] = vdupq_n_s64(0x4C19F45F25DA4EE6uLL);
  *(int64x2_t *)&STACK[0x450] = vdupq_n_s64(0xB23013EADB8B346CLL);
  *(int64x2_t *)&STACK[0x460] = vdupq_n_s64(0x4DCFEC152474CB93uLL);
  *(int64x2_t *)&STACK[0x440] = vdupq_n_s64(0x170F70161BFFECF2uLL);
  return v2();
}

uint64_t sub_18DA1A8A4@<X0>(unint64_t a1@<X3>, uint64_t a2@<X8>)
{
  int v8 = (v3 - 368) | 0x11A;
  LODWORD(STACK[0x380]) = ((v8 ^ 0xFFFFFCAA) & v7) - 16;
  STACK[0x370] = v2 - 15;
  unsigned int v9 = v5 - 1920989826 + v4;
  LODWORD(STACK[0x360]) = v9 - 9;
  LODWORD(STACK[0x350]) = v9 - 8;
  v10.i64[0] = v9 - 6 + a2 + 10;
  v10.i64[1] = v9 - 7 + a2 + 10;
  v11.i64[0] = v9 - 4 + a2 + 10;
  v11.i64[1] = v9 - 5 + a2 + 10;
  v12.i64[0] = v9 - 2 + a2 + 10;
  v12.i64[1] = v9 - 3 + a2 + 10;
  int64x2_t v13 = v12;
  v12.i64[0] = v9 + a2 + 10;
  v12.i64[1] = v9 - 1 + a2 + 10;
  v14.i64[0] = v9 + 2 + a2 + 10;
  v14.i64[1] = v9 + 1 + a2 + 10;
  v15.i64[0] = v9 + 4 + a2 + 10;
  v15.i64[1] = v9 + 3 + a2 + 10;
  v16.i64[0] = v9 + 6 + a2 + 10;
  v16.i64[1] = v6 + (((v8 - 474) | 0x61A) ^ 0xAFC0001E) + a2 + 10;
  int64x2_t v17 = (int64x2_t)vandq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v16, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v16, 8uLL)), *(int8x16_t *)&STACK[0x680]);
  int64x2_t v18 = (int64x2_t)vandq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v15, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v15, 8uLL)), *(int8x16_t *)&STACK[0x680]);
  int64x2_t v19 = (int64x2_t)vandq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v14, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v14, 8uLL)), *(int8x16_t *)&STACK[0x680]);
  int64x2_t v20 = (int64x2_t)vandq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v12, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v12, 8uLL)), *(int8x16_t *)&STACK[0x680]);
  *(int64x2_t *)&STACK[0x520] = v13;
  *(int8x16_t *)&STACK[0x3F0] = vorrq_s8((int8x16_t)vshlq_n_s64(v13, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v13, 8uLL));
  *(int64x2_t *)&STACK[0x400] = v10;
  *(int64x2_t *)&STACK[0x410] = v11;
  *(int8x16_t *)&STACK[0x3B0] = vorrq_s8((int8x16_t)vshlq_n_s64(v11, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v11, 8uLL));
  *(int8x16_t *)&STACK[0x3E0] = vorrq_s8((int8x16_t)vshlq_n_s64(v10, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v10, 8uLL));
  int64x2_t v21 = vdupq_n_s64(a1);
  int8x16_t v22 = *(int8x16_t *)&STACK[0x510];
  int64x2_t v23 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(v17, v21), *(int8x16_t *)&STACK[0x510]);
  int64x2_t v24 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(v18, v21), *(int8x16_t *)&STACK[0x510]);
  int64x2_t v25 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(v19, v21), *(int8x16_t *)&STACK[0x510]);
  int64x2_t v26 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(v20, v21), *(int8x16_t *)&STACK[0x510]);
  int8x16_t v27 = *(int8x16_t *)&STACK[0x500];
  int64x2_t v28 = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v26, v26), *(int8x16_t *)&STACK[0x500]), v26);
  int64x2_t v29 = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v25, v25), *(int8x16_t *)&STACK[0x500]), v25);
  int64x2_t v30 = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v24, v24), *(int8x16_t *)&STACK[0x500]), v24);
  *(int64x2_t *)&STACK[0x3A0] = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v23, v23), *(int8x16_t *)&STACK[0x500]), v23);
  int64x2_t v31 = *(int64x2_t *)&STACK[0x4D0];
  int8x16_t v32 = (int8x16_t)vaddq_s64(v29, *(int64x2_t *)&STACK[0x4D0]);
  int8x16_t v33 = (int8x16_t)vaddq_s64(v28, *(int64x2_t *)&STACK[0x4D0]);
  int8x16_t v34 = *(int8x16_t *)&STACK[0x430];
  int64x2_t v35 = (int64x2_t)veorq_s8(v33, *(int8x16_t *)&STACK[0x430]);
  int64x2_t v36 = (int64x2_t)veorq_s8(v32, *(int8x16_t *)&STACK[0x430]);
  int64x2_t v37 = (int64x2_t)veorq_s8(v32, *(int8x16_t *)&STACK[0x530]);
  int64x2_t v38 = (int64x2_t)veorq_s8(v33, *(int8x16_t *)&STACK[0x530]);
  int64x2_t v39 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v35, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v35, 8uLL)), v38);
  int64x2_t v40 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v36, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v36, 8uLL)), v37);
  int64x2_t v41 = *(int64x2_t *)&STACK[0x4C0];
  int64x2_t v42 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v40, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v40, v40), *(int8x16_t *)&STACK[0x540])), *(int64x2_t *)&STACK[0x4C0]), *(int8x16_t *)&STACK[0x6A0]);
  int64x2_t v43 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v39, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v39, v39), *(int8x16_t *)&STACK[0x540])), *(int64x2_t *)&STACK[0x4C0]), *(int8x16_t *)&STACK[0x6A0]);
  int64x2_t v44 = (int64x2_t)veorq_s8((int8x16_t)v43, vorrq_s8((int8x16_t)vshlq_n_s64(v38, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v38, 0x3DuLL)));
  int64x2_t v45 = (int64x2_t)veorq_s8((int8x16_t)v42, vorrq_s8((int8x16_t)vshlq_n_s64(v37, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v37, 0x3DuLL)));
  int8x16_t v46 = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v42, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v42, 8uLL)), v45);
  int8x16_t v47 = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v43, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v43, 8uLL)), v44);
  int8x16_t v48 = *(int8x16_t *)&STACK[0x4B0];
  int64x2_t v49 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64((int64x2_t)vorrq_s8(v46, *(int8x16_t *)&STACK[0x6B0]), (int64x2_t)vorrq_s8(v46, *(int8x16_t *)&STACK[0x420])), *(int64x2_t *)&STACK[0x420]), *(int8x16_t *)&STACK[0x4B0]);
  int64x2_t v50 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64((int64x2_t)vorrq_s8(v47, *(int8x16_t *)&STACK[0x6B0]), (int64x2_t)vorrq_s8(v47, *(int8x16_t *)&STACK[0x420])), *(int64x2_t *)&STACK[0x420]), *(int8x16_t *)&STACK[0x4B0]);
  int64x2_t v51 = (int64x2_t)veorq_s8((int8x16_t)v50, vorrq_s8((int8x16_t)vshlq_n_s64(v44, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v44, 0x3DuLL)));
  int64x2_t v52 = (int64x2_t)veorq_s8((int8x16_t)v49, vorrq_s8((int8x16_t)vshlq_n_s64(v45, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v45, 0x3DuLL)));
  int64x2_t v53 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v50, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v50, 8uLL)), v51), *(int8x16_t *)&STACK[0x660]);
  int64x2_t v54 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v49, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v49, 8uLL)), v52), *(int8x16_t *)&STACK[0x660]);
  int64x2_t v55 = (int64x2_t)veorq_s8((int8x16_t)v54, vorrq_s8((int8x16_t)vshlq_n_s64(v52, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v52, 0x3DuLL)));
  int64x2_t v56 = (int64x2_t)veorq_s8((int8x16_t)v53, vorrq_s8((int8x16_t)vshlq_n_s64(v51, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v51, 0x3DuLL)));
  int8x16_t v57 = (int8x16_t)vdupq_n_s64(0xCD091F17C02FDE51);
  int64x2_t v58 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v54, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v54, 8uLL)), v55), v57);
  int64x2_t v59 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v53, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v53, 8uLL)), v56), v57);
  int8x16_t v60 = vorrq_s8((int8x16_t)vshlq_n_s64(v55, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v55, 0x3DuLL));
  int64x2_t v61 = (int64x2_t)veorq_s8((int8x16_t)v59, vorrq_s8((int8x16_t)vshlq_n_s64(v56, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v56, 0x3DuLL)));
  int64x2_t v62 = (int64x2_t)veorq_s8((int8x16_t)v58, v60);
  int64x2_t v63 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v58, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v58, 8uLL)), v62);
  int64x2_t v64 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v59, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v59, 8uLL)), v61);
  int8x16_t v65 = *(int8x16_t *)&STACK[0x480];
  int64x2_t v66 = *(int64x2_t *)&STACK[0x490];
  int8x16_t v67 = *(int8x16_t *)&STACK[0x470];
  int64x2_t v68 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v64, v64), *(int8x16_t *)&STACK[0x480]), v64), *(int64x2_t *)&STACK[0x490]), *(int8x16_t *)&STACK[0x470]);
  int64x2_t v69 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v63, v63), *(int8x16_t *)&STACK[0x480]), v63), *(int64x2_t *)&STACK[0x490]), *(int8x16_t *)&STACK[0x470]);
  int64x2_t v70 = (int64x2_t)veorq_s8((int8x16_t)v69, vorrq_s8((int8x16_t)vshlq_n_s64(v62, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v62, 0x3DuLL)));
  int64x2_t v71 = (int64x2_t)veorq_s8((int8x16_t)v68, vorrq_s8((int8x16_t)vshlq_n_s64(v61, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v61, 0x3DuLL)));
  int8x16_t v72 = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v68, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v68, 8uLL)), v71);
  int8x16_t v73 = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v69, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v69, 8uLL)), v70);
  int8x16_t v74 = *(int8x16_t *)&STACK[0x450];
  int8x16_t v75 = *(int8x16_t *)&STACK[0x460];
  int64x2_t v76 = *(int64x2_t *)&STACK[0x670];
  int8x16_t v77 = *(int8x16_t *)&STACK[0x440];
  int64x2_t v78 = (int64x2_t)veorq_s8((int8x16_t)vsubq_s64(*(int64x2_t *)&STACK[0x670], vaddq_s64((int64x2_t)vornq_s8(*(int8x16_t *)&STACK[0x460], v72), (int64x2_t)vorrq_s8(v72, *(int8x16_t *)&STACK[0x450]))), *(int8x16_t *)&STACK[0x440]);
  int64x2_t v79 = (int64x2_t)veorq_s8((int8x16_t)vsubq_s64(*(int64x2_t *)&STACK[0x670], vaddq_s64((int64x2_t)vornq_s8(*(int8x16_t *)&STACK[0x460], v73), (int64x2_t)vorrq_s8(v73, *(int8x16_t *)&STACK[0x450]))), *(int8x16_t *)&STACK[0x440]);
  int8x16_t v80 = (int8x16_t)vdupq_n_s64(0x38uLL);
  int8x16_t v81 = (int8x16_t)vaddq_s64(v30, *(int64x2_t *)&STACK[0x4D0]);
  int8x16_t v82 = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v78, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v78, 8uLL)), (int64x2_t)veorq_s8((int8x16_t)v78, vorrq_s8((int8x16_t)vshlq_n_s64(v71, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v71, 0x3DuLL))));
  int8x16_t v83 = *(int8x16_t *)&STACK[0x640];
  v176.val[3] = (int8x16_t)vshlq_u64((uint64x2_t)veorq_s8(v82, *(int8x16_t *)&STACK[0x640]), (uint64x2_t)vnegq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v12, 3uLL), v80)));
  v176.val[2] = (int8x16_t)vshlq_u64((uint64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v79, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v79, 8uLL)), (int64x2_t)veorq_s8((int8x16_t)v79, vorrq_s8((int8x16_t)vshlq_n_s64(v70, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v70, 0x3DuLL)))), *(int8x16_t *)&STACK[0x640]), (uint64x2_t)vnegq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v14, 3uLL), v80)));
  int64x2_t v84 = *(int64x2_t *)&STACK[0x420];
  int64x2_t v85 = (int64x2_t)veorq_s8(v81, *(int8x16_t *)&STACK[0x430]);
  int8x16_t v86 = *(int8x16_t *)&STACK[0x530];
  int64x2_t v87 = (int64x2_t)veorq_s8(v81, *(int8x16_t *)&STACK[0x530]);
  int64x2_t v88 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v85, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v85, 8uLL)), v87);
  int8x16_t v89 = *(int8x16_t *)&STACK[0x540];
  int64x2_t v90 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v88, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v88, v88), *(int8x16_t *)&STACK[0x540])), *(int64x2_t *)&STACK[0x4C0]), *(int8x16_t *)&STACK[0x6A0]);
  int64x2_t v91 = (int64x2_t)veorq_s8((int8x16_t)v90, vorrq_s8((int8x16_t)vshlq_n_s64(v87, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v87, 0x3DuLL)));
  int8x16_t v92 = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v90, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v90, 8uLL)), v91);
  int64x2_t v93 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64((int64x2_t)vorrq_s8(v92, *(int8x16_t *)&STACK[0x6B0]), (int64x2_t)vorrq_s8(v92, *(int8x16_t *)&STACK[0x420])), *(int64x2_t *)&STACK[0x420]), *(int8x16_t *)&STACK[0x4B0]);
  int64x2_t v94 = (int64x2_t)veorq_s8((int8x16_t)v93, vorrq_s8((int8x16_t)vshlq_n_s64(v91, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v91, 0x3DuLL)));
  int8x16_t v95 = *(int8x16_t *)&STACK[0x660];
  int64x2_t v96 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v93, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v93, 8uLL)), v94), *(int8x16_t *)&STACK[0x660]);
  int64x2_t v97 = (int64x2_t)veorq_s8((int8x16_t)v96, vorrq_s8((int8x16_t)vshlq_n_s64(v94, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v94, 0x3DuLL)));
  *(int8x16_t *)&STACK[0x390] = v57;
  int64x2_t v98 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v96, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v96, 8uLL)), v97), v57);
  int64x2_t v99 = (int64x2_t)veorq_s8((int8x16_t)v98, vorrq_s8((int8x16_t)vshlq_n_s64(v97, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v97, 0x3DuLL)));
  int64x2_t v100 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v98, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v98, 8uLL)), v99);
  int64x2_t v101 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v100, v100), v65), v100), v66), v67);
  int64x2_t v102 = (int64x2_t)veorq_s8((int8x16_t)v101, vorrq_s8((int8x16_t)vshlq_n_s64(v99, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v99, 0x3DuLL)));
  int8x16_t v103 = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v101, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v101, 8uLL)), v102);
  int64x2_t v104 = (int64x2_t)veorq_s8((int8x16_t)vsubq_s64(v76, vaddq_s64((int64x2_t)vornq_s8(v75, v103), (int64x2_t)vorrq_s8(v103, v74))), v77);
  int8x16_t v105 = (int8x16_t)vaddq_s64(*(int64x2_t *)&STACK[0x3A0], v31);
  v176.val[1] = (int8x16_t)vshlq_u64((uint64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v104, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v104, 8uLL)), (int64x2_t)veorq_s8((int8x16_t)v104, vorrq_s8((int8x16_t)vshlq_n_s64(v102, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v102, 0x3DuLL)))), v83), (uint64x2_t)vnegq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v15, 3uLL), v80)));
  int64x2_t v106 = (int64x2_t)veorq_s8(v105, v34);
  int8x16_t v107 = v34;
  int64x2_t v108 = v84;
  int64x2_t v109 = (int64x2_t)veorq_s8(v105, v86);
  int64x2_t v110 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v106, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v106, 8uLL)), v109);
  int64x2_t v111 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v110, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v110, v110), v89)), v41), *(int8x16_t *)&STACK[0x6A0]);
  int64x2_t v112 = (int64x2_t)veorq_s8((int8x16_t)v111, vorrq_s8((int8x16_t)vshlq_n_s64(v109, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v109, 0x3DuLL)));
  int8x16_t v113 = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v111, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v111, 8uLL)), v112);
  int64x2_t v114 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64((int64x2_t)vorrq_s8(v113, *(int8x16_t *)&STACK[0x6B0]), (int64x2_t)vorrq_s8(v113, (int8x16_t)v84)), v84), v48);
  int64x2_t v115 = (int64x2_t)veorq_s8((int8x16_t)v114, vorrq_s8((int8x16_t)vshlq_n_s64(v112, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v112, 0x3DuLL)));
  int64x2_t v116 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v114, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v114, 8uLL)), v115), v95);
  int64x2_t v117 = (int64x2_t)veorq_s8((int8x16_t)v116, vorrq_s8((int8x16_t)vshlq_n_s64(v115, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v115, 0x3DuLL)));
  int64x2_t v118 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v116, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v116, 8uLL)), v117), v57);
  int64x2_t v119 = (int64x2_t)veorq_s8((int8x16_t)v118, vorrq_s8((int8x16_t)vshlq_n_s64(v117, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v117, 0x3DuLL)));
  int64x2_t v120 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v118, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v118, 8uLL)), v119);
  int64x2_t v121 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v120, v120), v65), v120), v66), v67);
  int64x2_t v122 = (int64x2_t)veorq_s8((int8x16_t)v121, vorrq_s8((int8x16_t)vshlq_n_s64(v119, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v119, 0x3DuLL)));
  int8x16_t v123 = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v121, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v121, 8uLL)), v122);
  int64x2_t v124 = (int64x2_t)veorq_s8((int8x16_t)vsubq_s64(v76, vaddq_s64((int64x2_t)vornq_s8(v75, v123), (int64x2_t)vorrq_s8(v123, v74))), v77);
  int8x16_t v125 = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v124, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v124, 8uLL)), (int64x2_t)veorq_s8((int8x16_t)v124, vorrq_s8((int8x16_t)vshlq_n_s64(v122, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v122, 0x3DuLL))));
  v124.i64[0] = LODWORD(STACK[0x350]) + a2 + 10;
  v124.i64[1] = LODWORD(STACK[0x360]) + a2 + 10;
  v176.val[0] = (int8x16_t)vshlq_u64((uint64x2_t)veorq_s8(v125, v83), (uint64x2_t)vnegq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v16, 3uLL), v80)));
  int8x16_t v126 = (int8x16_t)vaddq_s64((int64x2_t)vandq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v124, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v124, 8uLL)), *(int8x16_t *)&STACK[0x680]), v21);
  int8x16_t v127 = (int8x16_t)vaddq_s64((int64x2_t)vandq_s8(*(int8x16_t *)&STACK[0x3E0], *(int8x16_t *)&STACK[0x680]), v21);
  int8x16_t v128 = (int8x16_t)vaddq_s64((int64x2_t)vandq_s8(*(int8x16_t *)&STACK[0x3B0], *(int8x16_t *)&STACK[0x680]), v21);
  int64x2_t v129 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vandq_s8(*(int8x16_t *)&STACK[0x3F0], *(int8x16_t *)&STACK[0x680]), v21), v22);
  int64x2_t v130 = (int64x2_t)veorq_s8(v128, v22);
  int64x2_t v131 = (int64x2_t)veorq_s8(v127, v22);
  int64x2_t v132 = (int64x2_t)veorq_s8(v126, v22);
  int64x2_t v133 = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v131, v131), v27), v131);
  int64x2_t v134 = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v130, v130), v27), v130);
  int64x2_t v135 = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v129, v129), v27), v129);
  int8x16_t v136 = (int8x16_t)vaddq_s64(v133, v31);
  int8x16_t v137 = (int8x16_t)vaddq_s64(vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v132, v132), v27), v132), v31);
  v132.i64[0] = vqtbl4q_s8(v176, *(int8x16_t *)&STACK[0x4F0]).u64[0];
  v176.val[0] = veorq_s8(v137, v107);
  v176.val[1] = veorq_s8(v136, v107);
  v176.val[2] = veorq_s8(v136, v86);
  v176.val[3] = veorq_s8(v137, v86);
  v176.val[0] = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v176.val[0], 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v176.val[0], 8uLL)), (int64x2_t)v176.val[3]);
  v176.val[1] = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v176.val[1], 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v176.val[1], 8uLL)), (int64x2_t)v176.val[2]);
  v176.val[1] = veorq_s8((int8x16_t)vaddq_s64(vsubq_s64((int64x2_t)v176.val[1], (int64x2_t)vandq_s8((int8x16_t)vaddq_s64((int64x2_t)v176.val[1], (int64x2_t)v176.val[1]), v89)), v41), *(int8x16_t *)&STACK[0x6A0]);
  v176.val[0] = veorq_s8((int8x16_t)vaddq_s64(vsubq_s64((int64x2_t)v176.val[0], (int64x2_t)vandq_s8((int8x16_t)vaddq_s64((int64x2_t)v176.val[0], (int64x2_t)v176.val[0]), v89)), v41), *(int8x16_t *)&STACK[0x6A0]);
  v176.val[3] = veorq_s8(v176.val[0], vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v176.val[3], 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v176.val[3], 0x3DuLL)));
  v176.val[2] = veorq_s8(v176.val[1], vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v176.val[2], 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v176.val[2], 0x3DuLL)));
  v176.val[1] = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v176.val[1], 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v176.val[1], 8uLL)), (int64x2_t)v176.val[2]);
  v176.val[0] = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v176.val[0], 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v176.val[0], 8uLL)), (int64x2_t)v176.val[3]);
  v176.val[1] = veorq_s8((int8x16_t)vaddq_s64(vsubq_s64((int64x2_t)vorrq_s8(v176.val[1], *(int8x16_t *)&STACK[0x6B0]), (int64x2_t)vorrq_s8(v176.val[1], (int8x16_t)v108)), v108), v48);
  v176.val[0] = veorq_s8((int8x16_t)vaddq_s64(vsubq_s64((int64x2_t)vorrq_s8(v176.val[0], *(int8x16_t *)&STACK[0x6B0]), (int64x2_t)vorrq_s8(v176.val[0], (int8x16_t)v108)), v108), v48);
  v176.val[3] = veorq_s8(v176.val[0], vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v176.val[3], 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v176.val[3], 0x3DuLL)));
  v176.val[2] = veorq_s8(v176.val[1], vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v176.val[2], 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v176.val[2], 0x3DuLL)));
  v176.val[0] = veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v176.val[0], 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v176.val[0], 8uLL)), (int64x2_t)v176.val[3]), v95);
  v176.val[1] = veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v176.val[1], 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v176.val[1], 8uLL)), (int64x2_t)v176.val[2]), v95);
  v176.val[2] = veorq_s8(v176.val[1], vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v176.val[2], 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v176.val[2], 0x3DuLL)));
  v176.val[3] = veorq_s8(v176.val[0], vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v176.val[3], 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v176.val[3], 0x3DuLL)));
  v176.val[1] = veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v176.val[1], 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v176.val[1], 8uLL)), (int64x2_t)v176.val[2]), *(int8x16_t *)&STACK[0x390]);
  v176.val[0] = veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v176.val[0], 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v176.val[0], 8uLL)), (int64x2_t)v176.val[3]), *(int8x16_t *)&STACK[0x390]);
  v176.val[3] = veorq_s8(v176.val[0], vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v176.val[3], 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v176.val[3], 0x3DuLL)));
  v176.val[2] = veorq_s8(v176.val[1], vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v176.val[2], 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v176.val[2], 0x3DuLL)));
  v176.val[1] = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v176.val[1], 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v176.val[1], 8uLL)), (int64x2_t)v176.val[2]);
  v176.val[0] = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v176.val[0], 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v176.val[0], 8uLL)), (int64x2_t)v176.val[3]);
  v176.val[0] = veorq_s8((int8x16_t)vaddq_s64(vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64((int64x2_t)v176.val[0], (int64x2_t)v176.val[0]), v65), (int64x2_t)v176.val[0]), v66), v67);
  v176.val[1] = veorq_s8((int8x16_t)vaddq_s64(vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64((int64x2_t)v176.val[1], (int64x2_t)v176.val[1]), v65), (int64x2_t)v176.val[1]), v66), v67);
  v176.val[2] = veorq_s8(v176.val[1], vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v176.val[2], 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v176.val[2], 0x3DuLL)));
  v176.val[3] = veorq_s8(v176.val[0], vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v176.val[3], 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v176.val[3], 0x3DuLL)));
  v176.val[0] = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v176.val[0], 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v176.val[0], 8uLL)), (int64x2_t)v176.val[3]);
  v176.val[1] = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v176.val[1], 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v176.val[1], 8uLL)), (int64x2_t)v176.val[2]);
  v176.val[0] = veorq_s8((int8x16_t)vsubq_s64(v76, vaddq_s64((int64x2_t)vornq_s8(v75, v176.val[0]), (int64x2_t)vorrq_s8(v176.val[0], v74))), v77);
  v176.val[1] = veorq_s8((int8x16_t)vsubq_s64(v76, vaddq_s64((int64x2_t)vornq_s8(v75, v176.val[1]), (int64x2_t)vorrq_s8(v176.val[1], v74))), v77);
  int8x16_t v138 = (int8x16_t)vaddq_s64(v134, v31);
  v176.val[3] = (int8x16_t)vshlq_u64((uint64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v176.val[0], 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v176.val[0], 8uLL)), (int64x2_t)veorq_s8(v176.val[0], vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v176.val[3], 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v176.val[3], 0x3DuLL)))), v83),
                             (uint64x2_t)vnegq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v124, 3uLL), v80)));
  v176.val[2] = (int8x16_t)vshlq_u64((uint64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v176.val[1], 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v176.val[1], 8uLL)), (int64x2_t)veorq_s8(v176.val[1], vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v176.val[2], 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v176.val[2], 0x3DuLL)))), v83),
                             (uint64x2_t)vnegq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(*(int64x2_t *)&STACK[0x400], 3uLL), v80)));
  int64x2_t v139 = (int64x2_t)veorq_s8(v138, v107);
  int64x2_t v140 = (int64x2_t)veorq_s8(v138, v86);
  int64x2_t v141 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v139, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v139, 8uLL)), v140);
  int64x2_t v142 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v141, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v141, v141), v89)), v41), *(int8x16_t *)&STACK[0x6A0]);
  int64x2_t v143 = (int64x2_t)veorq_s8((int8x16_t)v142, vorrq_s8((int8x16_t)vshlq_n_s64(v140, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v140, 0x3DuLL)));
  int8x16_t v144 = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v142, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v142, 8uLL)), v143);
  int64x2_t v145 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64((int64x2_t)vorrq_s8(v144, *(int8x16_t *)&STACK[0x6B0]), (int64x2_t)vorrq_s8(v144, (int8x16_t)v108)), v108), v48);
  int64x2_t v146 = (int64x2_t)veorq_s8((int8x16_t)v145, vorrq_s8((int8x16_t)vshlq_n_s64(v143, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v143, 0x3DuLL)));
  int64x2_t v147 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v145, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v145, 8uLL)), v146), v95);
  int64x2_t v148 = (int64x2_t)veorq_s8((int8x16_t)v147, vorrq_s8((int8x16_t)vshlq_n_s64(v146, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v146, 0x3DuLL)));
  int64x2_t v149 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v147, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v147, 8uLL)), v148), *(int8x16_t *)&STACK[0x390]);
  int64x2_t v150 = (int64x2_t)veorq_s8((int8x16_t)v149, vorrq_s8((int8x16_t)vshlq_n_s64(v148, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v148, 0x3DuLL)));
  int64x2_t v151 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v149, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v149, 8uLL)), v150);
  int64x2_t v152 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v151, v151), v65), v151), v66), v67);
  int64x2_t v153 = (int64x2_t)veorq_s8((int8x16_t)v152, vorrq_s8((int8x16_t)vshlq_n_s64(v150, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v150, 0x3DuLL)));
  int8x16_t v154 = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v152, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v152, 8uLL)), v153);
  int64x2_t v155 = (int64x2_t)veorq_s8((int8x16_t)vsubq_s64(v76, vaddq_s64((int64x2_t)vornq_s8(v75, v154), (int64x2_t)vorrq_s8(v154, v74))), v77);
  int8x16_t v156 = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v155, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v155, 8uLL)), (int64x2_t)veorq_s8((int8x16_t)v155, vorrq_s8((int8x16_t)vshlq_n_s64(v153, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v153, 0x3DuLL))));
  int8x16_t v157 = (int8x16_t)vaddq_s64(v135, v31);
  v176.val[1] = (int8x16_t)vshlq_u64((uint64x2_t)veorq_s8(v156, v83), (uint64x2_t)vnegq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(*(int64x2_t *)&STACK[0x410], 3uLL), v80)));
  int64x2_t v158 = (int64x2_t)veorq_s8(v157, v107);
  int64x2_t v159 = (int64x2_t)veorq_s8(v157, v86);
  int64x2_t v160 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v158, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v158, 8uLL)), v159);
  int64x2_t v161 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v160, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v160, v160), v89)), v41), *(int8x16_t *)&STACK[0x6A0]);
  int64x2_t v162 = (int64x2_t)veorq_s8((int8x16_t)v161, vorrq_s8((int8x16_t)vshlq_n_s64(v159, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v159, 0x3DuLL)));
  int8x16_t v163 = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v161, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v161, 8uLL)), v162);
  int64x2_t v164 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64((int64x2_t)vorrq_s8(v163, *(int8x16_t *)&STACK[0x6B0]), (int64x2_t)vorrq_s8(v163, (int8x16_t)v108)), v108), v48);
  int64x2_t v165 = (int64x2_t)veorq_s8((int8x16_t)v164, vorrq_s8((int8x16_t)vshlq_n_s64(v162, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v162, 0x3DuLL)));
  int64x2_t v166 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v164, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v164, 8uLL)), v165), v95);
  int64x2_t v167 = (int64x2_t)veorq_s8((int8x16_t)v166, vorrq_s8((int8x16_t)vshlq_n_s64(v165, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v165, 0x3DuLL)));
  int64x2_t v168 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v166, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v166, 8uLL)), v167), *(int8x16_t *)&STACK[0x390]);
  int64x2_t v169 = (int64x2_t)veorq_s8((int8x16_t)v168, vorrq_s8((int8x16_t)vshlq_n_s64(v167, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v167, 0x3DuLL)));
  int64x2_t v170 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v168, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v168, 8uLL)), v169);
  int64x2_t v171 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v170, v170), v65), v170), v66), v67);
  int64x2_t v172 = (int64x2_t)veorq_s8((int8x16_t)v171, vorrq_s8((int8x16_t)vshlq_n_s64(v169, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v169, 0x3DuLL)));
  int8x16_t v173 = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v171, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v171, 8uLL)), v172);
  int64x2_t v174 = (int64x2_t)veorq_s8((int8x16_t)vsubq_s64(v76, vaddq_s64((int64x2_t)vornq_s8(v75, v173), (int64x2_t)vorrq_s8(v173, v74))), v77);
  v176.val[0] = (int8x16_t)vshlq_u64((uint64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v174, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v174, 8uLL)), (int64x2_t)veorq_s8((int8x16_t)v174, vorrq_s8((int8x16_t)vshlq_n_s64(v172, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v172, 0x3DuLL)))), v83), (uint64x2_t)vnegq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(*(int64x2_t *)&STACK[0x520], 3uLL), v80)));
  v132.i64[1] = vqtbl4q_s8(v176, *(int8x16_t *)&STACK[0x4F0]).u64[0];
  v176.val[1] = vrev64q_s8((int8x16_t)v132);
  *(int8x16_t *)(v9 + 6 + a2 - 5) = veorq_s8(vextq_s8(v176.val[1], v176.val[1], 8uLL), *(int8x16_t *)(STACK[0x370] + v9 + 6));
  return (*(uint64_t (**)(void))(STACK[0x6C8] + 8 * ((234 * (LODWORD(STACK[0x380]) != 0)) ^ v8)))();
}

void sub_18DA1B6F0()
{
}

void sub_18DA1B744()
{
}

uint64_t sub_18DA1C6C0(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15)
{
  STACK[0x8C0] = 0x24CC9A478416F3DCLL;
  unint64_t v15 = STACK[0x730];
  int v16 = STACK[0xA38];
  unint64_t v17 = STACK[0x6C8];
  STACK[0x8D0] = *(void *)(STACK[0x6C8] + 8 * (a1 - 177));
  LODWORD(STACK[0xA6C]) = v16;
  STACK[0xA70] = a15;
  BOOL v19 = a15 == 0x1E34DA578D8F45CBLL || v15 == 0x66FBF218A8091D0CLL;
  return (*(uint64_t (**)(void))(v17
                              + 8
                              * ((v19 * (((((a1 ^ 0x94A) - 496) | 0x100) - 1558) ^ (2 * (a1 ^ 0x1DF)))) ^ a1 ^ 0x94A)))();
}

uint64_t sub_18DA1E6D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8 * ((v5 - 26) ^ (53 * (v4 == v6)))))();
}

uint64_t sub_18DA1E6F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_DWORD *a21)
{
  if (*a21 == 1710104185)
  {
    STACK[0x400] = (unint64_t)&STACK[0x938];
    STACK[0x3F0] = (unint64_t)&STACK[0x77C];
    JUMPOUT(0x18DA1E824);
  }
  if (*a21 == 1710104186)
  {
    uint64_t v24 = (*(uint64_t (**)(void, void, uint64_t))(a4 + 8 * (v21 + 1848)))(*(void *)(a2 + 448), 0, 32);
    return (*(uint64_t (**)(uint64_t, unint64_t *))(a4
                                                                  + 8
                                                                  * (((((((v21 + 62) ^ 0xA0) - 41) ^ (STACK[0x928] == v22)) & 1)
                                                                    * (((((v21 + 574) ^ 0xBA0) - 1960) | 0x10A) ^ 0x14A)) ^ (v21 + 574) ^ 0xBA0)))(v24, &STACK[0x760]);
  }
  else
  {
    LODWORD(STACK[0x8BC]) = 1393700945;
    *(void *)(a2 + 104) = *(void *)(a4 + 8 * (v21 - 314));
    return (*(uint64_t (**)(void))(a4
                                + 8
                                * ((13
                                  * (((((((v21 - 1519917515) & 0x5A981AEF) + 407) | 0x200) ^ (STACK[0x3C8] == 0x53992AF8804337F1)) & 1) == 0)) ^ ((((v21 - 1519917515) & 0x5A981AEF) + 407) | 0x200))))();
  }
}

uint64_t sub_18DA1E860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  STACK[0x420] = v6;
  return (*(uint64_t (**)(uint64_t, uint64_t))(a4
                                                     + 8
                                                     * (((*(void *)(v4 - 0x66FBF218A8091D0CLL) != 0x24CC9A478416F3DCLL)
                                                       * ((((v5 | 0x400) - 1085) | 0x38) ^ 0x1F2)) ^ (v5 | 0x400))))(1, 206);
}

uint64_t sub_18DA1E900@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X3>, int a4@<W8>)
{
  return (*(uint64_t (**)(void))(a3 + 8 * (((a1 & ~((a4 - 1029) ^ (*(void *)(v4 + v7) + v6 == v5))) * a2) ^ a4)))();
}

uint64_t sub_18DA1E93C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6 = (v5 + 6) & ((v4 ^ 0x56) - 347);
  LODWORD(STACK[0x3E0]) = v6;
  uint64_t v8 = (*(uint64_t (**)(void))(a4 + 8 * (v4 + 1893)))((v5 - v6 - 765428250));
  STACK[0x460] = v8;
  return (*(uint64_t (**)(void))(a4 + 8 * (((v8 == 0) * ((v4 ^ 0x87) - 350)) ^ v4)))();
}

uint64_t sub_18DA1E9D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  LODWORD(STACK[0x390]) = 2 - v5;
  LODWORD(STACK[0x3A0]) = v7 + 591107692;
  return (*(uint64_t (**)(void))(a4
                              + 8
                              * ((77
                                * (((*v4 == 0x24CC9A478416F3DCLL) ^ ((-45 * (v6 ^ 0xB9)) ^ ((v6 ^ 0xB9) + 123))) & 1)) ^ v6)))();
}

uint64_t sub_18DA1EA64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = (v4 + 1286);
  unint64_t v6 = STACK[0x460];
  STACK[0x370] = STACK[0x460] - 15;
  STACK[0x380] = v6 - 7;
  STACK[0x410] = v5;
  int v7 = *(_DWORD *)(a1 - 0x24CC9A478416F3CCLL)
     - (((((v5 - 1295) | 9) ^ 0x4C2778E7) + 2 * *(_DWORD *)(a1 - 0x24CC9A478416F3CCLL)) & ((v5 ^ 0x33F) - 1188714884))
     - 2103012631;
  return (*(uint64_t (**)(void))(a4
                              + 8
                              * (int)((7
                                     * (((2 * v7) & 0xBFFFEBDC ^ 0xB925AB18) + (v7 ^ 0x36D2072) + 1853685556 == 1316812066)) ^ v5)))();
}

uint64_t sub_18DA1EBAC@<X0>(unint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, int a6@<W5>, int a7@<W6>, int a8@<W8>)
{
  STACK[0x470] = a5;
  STACK[0x490] = a1;
  STACK[0x6A0] = *(void *)(a1 - 0x24CC9A478416F3C4);
  LODWORD(STACK[0x480]) = a2;
  uint64_t v8 = a2 - 747659167 + ((a8 - 1174) | 0x301u);
  STACK[0x6B0] = ((2 * v8) & 0x1B57CFEBELL) + (v8 ^ 0x3CBD7AFFDABE7F5FLL) - 0x3CBD7AFFDABE7F5FLL;
  LODWORD(STACK[0x440]) = a6;
  LODWORD(STACK[0x430]) = a7;
  unsigned int v9 = a7 + a6 + 536873490;
  LODWORD(STACK[0x450]) = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(a4 + 8 * (a8 ^ (84 * (v9 > 7)))))(2978155229, 0x1B0BD1982B59C071, a3, 0x8E85997BF8A3092DLL, 0x79A234E3E9ACE39ALL, 0xA2147622BAF9140ELL, 1058, -2);
}

uint64_t sub_18DA1ED84()
{
  return (*(uint64_t (**)(void))(STACK[0x6C8]
                              + 8
                              * (((((v0 - 778) | 0x300) - 730)
                                * (0x3CBD7AFFDABE7F5FLL - v3 - STACK[0x410] + STACK[0x6A0] - v2 - v1 + 1923 < 0x10)) ^ v0)))();
}

uint64_t sub_18DA1EDE4()
{
  return (*(uint64_t (**)(void))(STACK[0x6C8]
                              + 8
                              * ((504 * (LODWORD(STACK[0x450]) >= ((((v0 - 47) ^ 0x327) - 167) ^ 0x128u))) ^ (v0 - 47))))();
}

uint64_t sub_18DA1EE28(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  unint64_t v8 = STACK[0x6A0];
  int v9 = STACK[0x450];
  LODWORD(STACK[0x3B0]) = STACK[0x450] & 0xFFFFFFF0;
  LODWORD(STACK[0x4D0]) = -(v9 & 0xFFFFFFF0);
  unsigned int v10 = LODWORD(STACK[0x430]) + 536873482 + LODWORD(STACK[0x440]);
  LODWORD(STACK[0x4C0]) = v10 - 8;
  LODWORD(STACK[0x4B0]) = v10 - 7;
  unint64_t v11 = STACK[0x6C8];
  unint64_t v12 = STACK[0x370];
  v13.i64[0] = v8 + v10 - 5;
  v13.i64[1] = v8 + v10 - 6;
  v14.i64[0] = v8 + v10 - 3;
  v14.i64[1] = v8 + v10 - 4;
  v15.i64[0] = v8 + v10 - 1;
  v15.i64[1] = v8 + v10 - 2;
  *(int64x2_t *)&STACK[0x540] = v15;
  v16.i64[0] = v8 + v10 + 1;
  v16.i64[1] = v8 + v10;
  v17.i64[0] = v8 + v10 + 3;
  v17.i64[1] = v8 + v10 + 2;
  v18.i64[0] = v8 + v10 + 5;
  v18.i64[1] = v8 + v10 + 4;
  v19.i64[0] = v8 + v10 + 7;
  v19.i64[1] = v8 + a3 + ((a8 + 1511958008) & 0xA5E15F3B ^ 0xB1830DCF);
  int64x2_t v20 = (int64x2_t)vandq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v19, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v19, 8uLL)), *(int8x16_t *)&STACK[0x680]);
  int64x2_t v21 = (int64x2_t)vandq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v18, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v18, 8uLL)), *(int8x16_t *)&STACK[0x680]);
  int64x2_t v22 = (int64x2_t)vandq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v17, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v17, 8uLL)), *(int8x16_t *)&STACK[0x680]);
  int64x2_t v23 = (int64x2_t)vandq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v16, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v16, 8uLL)), *(int8x16_t *)&STACK[0x680]);
  *(int8x16_t *)&STACK[0x510] = vorrq_s8((int8x16_t)vshlq_n_s64(v15, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v15, 8uLL));
  *(int64x2_t *)&STACK[0x530] = v14;
  *(int8x16_t *)&STACK[0x500] = vorrq_s8((int8x16_t)vshlq_n_s64(v14, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v14, 8uLL));
  *(int64x2_t *)&STACK[0x520] = v13;
  int8x16_t v24 = (int8x16_t)vaddq_s64(vsubq_s64(v23, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(vaddq_s64(v23, v23), *(int64x2_t *)&STACK[0x650]), *(int8x16_t *)&STACK[0x630])), *(int64x2_t *)&STACK[0x620]);
  int8x16_t v25 = (int8x16_t)vaddq_s64(vsubq_s64(v22, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(vaddq_s64(v22, v22), *(int64x2_t *)&STACK[0x650]), *(int8x16_t *)&STACK[0x630])), *(int64x2_t *)&STACK[0x620]);
  int64x2_t v26 = (int64x2_t)veorq_s8(v25, *(int8x16_t *)&STACK[0x610]);
  int64x2_t v27 = (int64x2_t)veorq_s8(v24, *(int8x16_t *)&STACK[0x610]);
  int64x2_t v28 = (int64x2_t)veorq_s8(v24, *(int8x16_t *)&STACK[0x600]);
  int8x16_t v29 = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v27, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v27, 8uLL)), v28);
  int8x16_t v30 = vorrq_s8((int8x16_t)vshlq_n_s64(v28, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v24, 0x3DuLL));
  int64x2_t v31 = (int64x2_t)veorq_s8(v25, *(int8x16_t *)&STACK[0x600]);
  int64x2_t v32 = (int64x2_t)veorq_s8(v29, *(int8x16_t *)&STACK[0x5F0]);
  int64x2_t v33 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v26, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v26, 8uLL)), v31), *(int8x16_t *)&STACK[0x5F0]);
  int64x2_t v34 = (int64x2_t)veorq_s8((int8x16_t)v33, vorrq_s8((int8x16_t)vshlq_n_s64(v31, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v25, 0x3DuLL)));
  int64x2_t v35 = (int64x2_t)veorq_s8((int8x16_t)v32, v30);
  int8x16_t v36 = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v32, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v32, 8uLL)), v35);
  int8x16_t v37 = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v33, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v33, 8uLL)), v34);
  int64x2_t v38 = (int64x2_t)veorq_s8((int8x16_t)vsubq_s64(*(int64x2_t *)&STACK[0x670], vaddq_s64((int64x2_t)vornq_s8(*(int8x16_t *)&STACK[0x5D0], v36), (int64x2_t)vorrq_s8(v36, *(int8x16_t *)&STACK[0x5E0]))), *(int8x16_t *)&STACK[0x5C0]);
  int64x2_t v39 = (int64x2_t)veorq_s8((int8x16_t)vsubq_s64(*(int64x2_t *)&STACK[0x670], vaddq_s64((int64x2_t)vornq_s8(*(int8x16_t *)&STACK[0x5D0], v37), (int64x2_t)vorrq_s8(v37, *(int8x16_t *)&STACK[0x5E0]))), *(int8x16_t *)&STACK[0x5C0]);
  int64x2_t v40 = (int64x2_t)veorq_s8((int8x16_t)v39, vorrq_s8((int8x16_t)vshlq_n_s64(v34, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v34, 0x3DuLL)));
  int64x2_t v41 = (int64x2_t)veorq_s8((int8x16_t)v38, vorrq_s8((int8x16_t)vshlq_n_s64(v35, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v35, 0x3DuLL)));
  int64x2_t v42 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v39, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v39, 8uLL)), v40), *(int8x16_t *)&STACK[0x660]);
  int64x2_t v43 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v38, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v38, 8uLL)), v41), *(int8x16_t *)&STACK[0x660]);
  int64x2_t v44 = (int64x2_t)veorq_s8((int8x16_t)v43, vorrq_s8((int8x16_t)vshlq_n_s64(v41, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v41, 0x3DuLL)));
  int64x2_t v45 = (int64x2_t)veorq_s8((int8x16_t)v42, vorrq_s8((int8x16_t)vshlq_n_s64(v40, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v40, 0x3DuLL)));
  int64x2_t v46 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v42, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v42, 8uLL)), v45);
  int64x2_t v47 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v43, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v43, 8uLL)), v44);
  int64x2_t v48 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v47, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v47, v47), *(int8x16_t *)&STACK[0x5B0])), *(int64x2_t *)&STACK[0x5A0]), *(int8x16_t *)&STACK[0x590]);
  int64x2_t v49 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v46, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v46, v46), *(int8x16_t *)&STACK[0x5B0])), *(int64x2_t *)&STACK[0x5A0]), *(int8x16_t *)&STACK[0x590]);
  int64x2_t v50 = (int64x2_t)veorq_s8((int8x16_t)v49, vorrq_s8((int8x16_t)vshlq_n_s64(v45, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v45, 0x3DuLL)));
  int64x2_t v51 = (int64x2_t)veorq_s8((int8x16_t)v48, vorrq_s8((int8x16_t)vshlq_n_s64(v44, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v44, 0x3DuLL)));
  int64x2_t v52 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v49, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v49, 8uLL)), v50), *(int8x16_t *)&STACK[0x580]);
  int64x2_t v53 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v48, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v48, 8uLL)), v51), *(int8x16_t *)&STACK[0x580]);
  int64x2_t v54 = (int64x2_t)veorq_s8((int8x16_t)v53, vorrq_s8((int8x16_t)vshlq_n_s64(v51, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v51, 0x3DuLL)));
  int64x2_t v55 = (int64x2_t)veorq_s8((int8x16_t)v52, vorrq_s8((int8x16_t)vshlq_n_s64(v50, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v50, 0x3DuLL)));
  int64x2_t v56 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v52, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v52, 8uLL)), v55);
  int64x2_t v57 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v53, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v53, 8uLL)), v54);
  int64x2_t v58 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v57, v57), *(int8x16_t *)&STACK[0x570]), v57), *(int64x2_t *)&STACK[0x560]), *(int8x16_t *)&STACK[0x550]);
  int64x2_t v59 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v56, v56), *(int8x16_t *)&STACK[0x570]), v56), *(int64x2_t *)&STACK[0x560]), *(int8x16_t *)&STACK[0x550]);
  int8x16_t v60 = (int8x16_t)vaddq_s64(vsubq_s64(v21, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(vaddq_s64(v21, v21), *(int64x2_t *)&STACK[0x650]), *(int8x16_t *)&STACK[0x630])), *(int64x2_t *)&STACK[0x620]);
  int8x16_t v61 = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v58, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v58, 8uLL)), (int64x2_t)veorq_s8((int8x16_t)v58, vorrq_s8((int8x16_t)vshlq_n_s64(v54, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v54, 0x3DuLL))));
  uint64x2_t v62 = (uint64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v59, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v59, 8uLL)), (int64x2_t)veorq_s8((int8x16_t)v59, vorrq_s8((int8x16_t)vshlq_n_s64(v55, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v55, 0x3DuLL)))), *(int8x16_t *)&STACK[0x640]);
  v175.val[3] = (int8x16_t)vshlq_u64((uint64x2_t)veorq_s8(v61, *(int8x16_t *)&STACK[0x640]), (uint64x2_t)vnegq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v16, 3uLL), *(int8x16_t *)&STACK[0x4E0])));
  v175.val[2] = (int8x16_t)vshlq_u64(v62, (uint64x2_t)vnegq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v17, 3uLL), *(int8x16_t *)&STACK[0x4E0])));
  int64x2_t v63 = (int64x2_t)veorq_s8(v60, *(int8x16_t *)&STACK[0x610]);
  int64x2_t v64 = (int64x2_t)veorq_s8(v60, *(int8x16_t *)&STACK[0x600]);
  int64x2_t v65 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v63, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v63, 8uLL)), v64), *(int8x16_t *)&STACK[0x5F0]);
  int64x2_t v66 = (int64x2_t)veorq_s8((int8x16_t)v65, vorrq_s8((int8x16_t)vshlq_n_s64(v64, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v60, 0x3DuLL)));
  int8x16_t v67 = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v65, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v65, 8uLL)), v66);
  int64x2_t v68 = (int64x2_t)veorq_s8((int8x16_t)vsubq_s64(*(int64x2_t *)&STACK[0x670], vaddq_s64((int64x2_t)vornq_s8(*(int8x16_t *)&STACK[0x5D0], v67), (int64x2_t)vorrq_s8(v67, *(int8x16_t *)&STACK[0x5E0]))), *(int8x16_t *)&STACK[0x5C0]);
  int64x2_t v69 = (int64x2_t)veorq_s8((int8x16_t)v68, vorrq_s8((int8x16_t)vshlq_n_s64(v66, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v66, 0x3DuLL)));
  int64x2_t v70 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v68, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v68, 8uLL)), v69), *(int8x16_t *)&STACK[0x660]);
  int64x2_t v71 = (int64x2_t)veorq_s8((int8x16_t)v70, vorrq_s8((int8x16_t)vshlq_n_s64(v69, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v69, 0x3DuLL)));
  int64x2_t v72 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v70, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v70, 8uLL)), v71);
  int64x2_t v73 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v72, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v72, v72), *(int8x16_t *)&STACK[0x5B0])), *(int64x2_t *)&STACK[0x5A0]), *(int8x16_t *)&STACK[0x590]);
  int64x2_t v74 = (int64x2_t)veorq_s8((int8x16_t)v73, vorrq_s8((int8x16_t)vshlq_n_s64(v71, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v71, 0x3DuLL)));
  int64x2_t v75 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v73, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v73, 8uLL)), v74), *(int8x16_t *)&STACK[0x580]);
  int64x2_t v76 = (int64x2_t)veorq_s8((int8x16_t)v75, vorrq_s8((int8x16_t)vshlq_n_s64(v74, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v74, 0x3DuLL)));
  int64x2_t v77 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v75, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v75, 8uLL)), v76);
  int64x2_t v78 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v77, v77), *(int8x16_t *)&STACK[0x570]), v77), *(int64x2_t *)&STACK[0x560]), *(int8x16_t *)&STACK[0x550]);
  int8x16_t v79 = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v78, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v78, 8uLL)), (int64x2_t)veorq_s8((int8x16_t)v78, vorrq_s8((int8x16_t)vshlq_n_s64(v76, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v76, 0x3DuLL))));
  int8x16_t v80 = (int8x16_t)vaddq_s64(vsubq_s64(v20, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(vaddq_s64(v20, v20), *(int64x2_t *)&STACK[0x650]), *(int8x16_t *)&STACK[0x630])), *(int64x2_t *)&STACK[0x620]);
  v175.val[1] = (int8x16_t)vshlq_u64((uint64x2_t)veorq_s8(v79, *(int8x16_t *)&STACK[0x640]), (uint64x2_t)vnegq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v18, 3uLL), *(int8x16_t *)&STACK[0x4E0])));
  int64x2_t v81 = (int64x2_t)veorq_s8(v80, *(int8x16_t *)&STACK[0x610]);
  int64x2_t v82 = (int64x2_t)veorq_s8(v80, *(int8x16_t *)&STACK[0x600]);
  int64x2_t v83 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v81, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v81, 8uLL)), v82), *(int8x16_t *)&STACK[0x5F0]);
  int64x2_t v84 = (int64x2_t)veorq_s8((int8x16_t)v83, vorrq_s8((int8x16_t)vshlq_n_s64(v82, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v80, 0x3DuLL)));
  int8x16_t v85 = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v83, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v83, 8uLL)), v84);
  int64x2_t v86 = (int64x2_t)veorq_s8((int8x16_t)vsubq_s64(*(int64x2_t *)&STACK[0x670], vaddq_s64((int64x2_t)vornq_s8(*(int8x16_t *)&STACK[0x5D0], v85), (int64x2_t)vorrq_s8(v85, *(int8x16_t *)&STACK[0x5E0]))), *(int8x16_t *)&STACK[0x5C0]);
  int64x2_t v87 = (int64x2_t)veorq_s8((int8x16_t)v86, vorrq_s8((int8x16_t)vshlq_n_s64(v84, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v84, 0x3DuLL)));
  int64x2_t v88 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v86, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v86, 8uLL)), v87), *(int8x16_t *)&STACK[0x660]);
  int64x2_t v89 = (int64x2_t)veorq_s8((int8x16_t)v88, vorrq_s8((int8x16_t)vshlq_n_s64(v87, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v87, 0x3DuLL)));
  int64x2_t v90 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v88, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v88, 8uLL)), v89);
  int64x2_t v91 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v90, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v90, v90), *(int8x16_t *)&STACK[0x5B0])), *(int64x2_t *)&STACK[0x5A0]), *(int8x16_t *)&STACK[0x590]);
  int64x2_t v92 = (int64x2_t)veorq_s8((int8x16_t)v91, vorrq_s8((int8x16_t)vshlq_n_s64(v89, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v89, 0x3DuLL)));
  int64x2_t v93 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v91, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v91, 8uLL)), v92), *(int8x16_t *)&STACK[0x580]);
  int64x2_t v94 = (int64x2_t)veorq_s8((int8x16_t)v93, vorrq_s8((int8x16_t)vshlq_n_s64(v92, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v92, 0x3DuLL)));
  int64x2_t v95 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v93, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v93, 8uLL)), v94);
  int64x2_t v96 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v95, v95), *(int8x16_t *)&STACK[0x570]), v95), *(int64x2_t *)&STACK[0x560]), *(int8x16_t *)&STACK[0x550]);
  int8x16_t v97 = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v96, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v96, 8uLL)), (int64x2_t)veorq_s8((int8x16_t)v96, vorrq_s8((int8x16_t)vshlq_n_s64(v94, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v94, 0x3DuLL))));
  v96.i64[0] = v8 + LODWORD(STACK[0x4B0]);
  v96.i64[1] = v8 + LODWORD(STACK[0x4C0]);
  int64x2_t v98 = (int64x2_t)vandq_s8(*(int8x16_t *)&STACK[0x510], *(int8x16_t *)&STACK[0x680]);
  int64x2_t v99 = (int64x2_t)vandq_s8(*(int8x16_t *)&STACK[0x500], *(int8x16_t *)&STACK[0x680]);
  int64x2_t v100 = (int64x2_t)vandq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v13, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v13, 8uLL)), *(int8x16_t *)&STACK[0x680]);
  v175.val[0] = (int8x16_t)vshlq_u64((uint64x2_t)veorq_s8(v97, *(int8x16_t *)&STACK[0x640]), (uint64x2_t)vnegq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v19, 3uLL), *(int8x16_t *)&STACK[0x4E0])));
  int64x2_t v101 = (int64x2_t)vandq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v96, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v96, 8uLL)), *(int8x16_t *)&STACK[0x680]);
  int8x16_t v102 = (int8x16_t)vaddq_s64(vsubq_s64(v101, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(vaddq_s64(v101, v101), *(int64x2_t *)&STACK[0x650]), *(int8x16_t *)&STACK[0x630])), *(int64x2_t *)&STACK[0x620]);
  int8x16_t v103 = (int8x16_t)vaddq_s64(vsubq_s64(v100, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(vaddq_s64(v100, v100), *(int64x2_t *)&STACK[0x650]), *(int8x16_t *)&STACK[0x630])), *(int64x2_t *)&STACK[0x620]);
  v101.i64[0] = vqtbl4q_s8(v175, *(int8x16_t *)&STACK[0x4F0]).u64[0];
  int64x2_t v104 = (int64x2_t)veorq_s8(v103, *(int8x16_t *)&STACK[0x610]);
  int64x2_t v105 = (int64x2_t)veorq_s8(v102, *(int8x16_t *)&STACK[0x610]);
  v175.val[0] = veorq_s8(v102, *(int8x16_t *)&STACK[0x600]);
  int8x16_t v106 = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v105, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v105, 8uLL)), (int64x2_t)v175.val[0]);
  int8x16_t v107 = vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v175.val[0], 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v102, 0x3DuLL));
  v175.val[0] = veorq_s8(v103, *(int8x16_t *)&STACK[0x600]);
  int64x2_t v108 = (int64x2_t)veorq_s8(v106, *(int8x16_t *)&STACK[0x5F0]);
  int64x2_t v109 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v104, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v104, 8uLL)), (int64x2_t)v175.val[0]), *(int8x16_t *)&STACK[0x5F0]);
  int64x2_t v110 = (int64x2_t)veorq_s8((int8x16_t)v109, vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v175.val[0], 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v103, 0x3DuLL)));
  int64x2_t v111 = (int64x2_t)veorq_s8((int8x16_t)v108, v107);
  int8x16_t v112 = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v108, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v108, 8uLL)), v111);
  int8x16_t v113 = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v109, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v109, 8uLL)), v110);
  int64x2_t v114 = (int64x2_t)veorq_s8((int8x16_t)vsubq_s64(*(int64x2_t *)&STACK[0x670], vaddq_s64((int64x2_t)vornq_s8(*(int8x16_t *)&STACK[0x5D0], v112), (int64x2_t)vorrq_s8(v112, *(int8x16_t *)&STACK[0x5E0]))), *(int8x16_t *)&STACK[0x5C0]);
  int64x2_t v115 = (int64x2_t)veorq_s8((int8x16_t)vsubq_s64(*(int64x2_t *)&STACK[0x670], vaddq_s64((int64x2_t)vornq_s8(*(int8x16_t *)&STACK[0x5D0], v113), (int64x2_t)vorrq_s8(v113, *(int8x16_t *)&STACK[0x5E0]))), *(int8x16_t *)&STACK[0x5C0]);
  int64x2_t v116 = (int64x2_t)veorq_s8((int8x16_t)v115, vorrq_s8((int8x16_t)vshlq_n_s64(v110, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v110, 0x3DuLL)));
  int64x2_t v117 = (int64x2_t)veorq_s8((int8x16_t)v114, vorrq_s8((int8x16_t)vshlq_n_s64(v111, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v111, 0x3DuLL)));
  int64x2_t v118 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v115, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v115, 8uLL)), v116), *(int8x16_t *)&STACK[0x660]);
  int64x2_t v119 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v114, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v114, 8uLL)), v117), *(int8x16_t *)&STACK[0x660]);
  int64x2_t v120 = (int64x2_t)veorq_s8((int8x16_t)v119, vorrq_s8((int8x16_t)vshlq_n_s64(v117, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v117, 0x3DuLL)));
  int64x2_t v121 = (int64x2_t)veorq_s8((int8x16_t)v118, vorrq_s8((int8x16_t)vshlq_n_s64(v116, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v116, 0x3DuLL)));
  int64x2_t v122 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v118, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v118, 8uLL)), v121);
  int64x2_t v123 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v119, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v119, 8uLL)), v120);
  int64x2_t v124 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v123, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v123, v123), *(int8x16_t *)&STACK[0x5B0])), *(int64x2_t *)&STACK[0x5A0]), *(int8x16_t *)&STACK[0x590]);
  int64x2_t v125 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v122, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v122, v122), *(int8x16_t *)&STACK[0x5B0])), *(int64x2_t *)&STACK[0x5A0]), *(int8x16_t *)&STACK[0x590]);
  int64x2_t v126 = (int64x2_t)veorq_s8((int8x16_t)v125, vorrq_s8((int8x16_t)vshlq_n_s64(v121, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v121, 0x3DuLL)));
  int64x2_t v127 = (int64x2_t)veorq_s8((int8x16_t)v124, vorrq_s8((int8x16_t)vshlq_n_s64(v120, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v120, 0x3DuLL)));
  int64x2_t v128 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v125, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v125, 8uLL)), v126), *(int8x16_t *)&STACK[0x580]);
  int64x2_t v129 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v124, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v124, 8uLL)), v127), *(int8x16_t *)&STACK[0x580]);
  int64x2_t v130 = (int64x2_t)veorq_s8((int8x16_t)v129, vorrq_s8((int8x16_t)vshlq_n_s64(v127, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v127, 0x3DuLL)));
  int64x2_t v131 = (int64x2_t)veorq_s8((int8x16_t)v128, vorrq_s8((int8x16_t)vshlq_n_s64(v126, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v126, 0x3DuLL)));
  int64x2_t v132 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v128, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v128, 8uLL)), v131);
  int64x2_t v133 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v129, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v129, 8uLL)), v130);
  int64x2_t v134 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v133, v133), *(int8x16_t *)&STACK[0x570]), v133), *(int64x2_t *)&STACK[0x560]), *(int8x16_t *)&STACK[0x550]);
  int64x2_t v135 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v132, v132), *(int8x16_t *)&STACK[0x570]), v132), *(int64x2_t *)&STACK[0x560]), *(int8x16_t *)&STACK[0x550]);
  int8x16_t v136 = (int8x16_t)vaddq_s64(vsubq_s64(v99, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(vaddq_s64(v99, v99), *(int64x2_t *)&STACK[0x650]), *(int8x16_t *)&STACK[0x630])), *(int64x2_t *)&STACK[0x620]);
  v175.val[0] = (int8x16_t)vshlq_u64((uint64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v134, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v134, 8uLL)), (int64x2_t)veorq_s8((int8x16_t)v134, vorrq_s8((int8x16_t)vshlq_n_s64(v130, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v130, 0x3DuLL)))), *(int8x16_t *)&STACK[0x640]), (uint64x2_t)vnegq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v96, 3uLL), *(int8x16_t *)&STACK[0x4E0])));
  uint64x2_t v137 = vshlq_u64((uint64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v135, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v135, 8uLL)), (int64x2_t)veorq_s8((int8x16_t)v135, vorrq_s8((int8x16_t)vshlq_n_s64(v131, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v131, 0x3DuLL)))), *(int8x16_t *)&STACK[0x640]), (uint64x2_t)vnegq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(*(int64x2_t *)&STACK[0x520], 3uLL), *(int8x16_t *)&STACK[0x4E0])));
  int64x2_t v138 = (int64x2_t)veorq_s8(v136, *(int8x16_t *)&STACK[0x610]);
  int64x2_t v139 = (int64x2_t)veorq_s8(v136, *(int8x16_t *)&STACK[0x600]);
  int64x2_t v140 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v138, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v138, 8uLL)), v139), *(int8x16_t *)&STACK[0x5F0]);
  int64x2_t v141 = (int64x2_t)veorq_s8((int8x16_t)v140, vorrq_s8((int8x16_t)vshlq_n_s64(v139, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v136, 0x3DuLL)));
  int8x16_t v142 = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v140, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v140, 8uLL)), v141);
  int64x2_t v143 = (int64x2_t)veorq_s8((int8x16_t)vsubq_s64(*(int64x2_t *)&STACK[0x670], vaddq_s64((int64x2_t)vornq_s8(*(int8x16_t *)&STACK[0x5D0], v142), (int64x2_t)vorrq_s8(v142, *(int8x16_t *)&STACK[0x5E0]))), *(int8x16_t *)&STACK[0x5C0]);
  int64x2_t v144 = (int64x2_t)veorq_s8((int8x16_t)v143, vorrq_s8((int8x16_t)vshlq_n_s64(v141, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v141, 0x3DuLL)));
  int64x2_t v145 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v143, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v143, 8uLL)), v144), *(int8x16_t *)&STACK[0x660]);
  int64x2_t v146 = (int64x2_t)veorq_s8((int8x16_t)v145, vorrq_s8((int8x16_t)vshlq_n_s64(v144, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v144, 0x3DuLL)));
  int64x2_t v147 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v145, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v145, 8uLL)), v146);
  int64x2_t v148 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v147, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v147, v147), *(int8x16_t *)&STACK[0x5B0])), *(int64x2_t *)&STACK[0x5A0]), *(int8x16_t *)&STACK[0x590]);
  int64x2_t v149 = (int64x2_t)veorq_s8((int8x16_t)v148, vorrq_s8((int8x16_t)vshlq_n_s64(v146, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v146, 0x3DuLL)));
  int64x2_t v150 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v148, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v148, 8uLL)), v149), *(int8x16_t *)&STACK[0x580]);
  int64x2_t v151 = (int64x2_t)veorq_s8((int8x16_t)v150, vorrq_s8((int8x16_t)vshlq_n_s64(v149, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v149, 0x3DuLL)));
  int64x2_t v152 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v150, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v150, 8uLL)), v151);
  int64x2_t v153 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v152, v152), *(int8x16_t *)&STACK[0x570]), v152), *(int64x2_t *)&STACK[0x560]), *(int8x16_t *)&STACK[0x550]);
  int8x16_t v154 = (int8x16_t)vaddq_s64(vsubq_s64(v98, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(vaddq_s64(v98, v98), *(int64x2_t *)&STACK[0x650]), *(int8x16_t *)&STACK[0x630])), *(int64x2_t *)&STACK[0x620]);
  uint64x2_t v155 = vshlq_u64((uint64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v153, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v153, 8uLL)), (int64x2_t)veorq_s8((int8x16_t)v153, vorrq_s8((int8x16_t)vshlq_n_s64(v151, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v151, 0x3DuLL)))), *(int8x16_t *)&STACK[0x640]), (uint64x2_t)vnegq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(*(int64x2_t *)&STACK[0x530], 3uLL), *(int8x16_t *)&STACK[0x4E0])));
  int64x2_t v156 = (int64x2_t)veorq_s8(v154, *(int8x16_t *)&STACK[0x610]);
  int64x2_t v157 = (int64x2_t)veorq_s8(v154, *(int8x16_t *)&STACK[0x600]);
  int64x2_t v158 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v156, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v156, 8uLL)), v157), *(int8x16_t *)&STACK[0x5F0]);
  int64x2_t v159 = (int64x2_t)veorq_s8((int8x16_t)v158, vorrq_s8((int8x16_t)vshlq_n_s64(v157, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v154, 0x3DuLL)));
  int8x16_t v160 = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v158, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v158, 8uLL)), v159);
  int64x2_t v161 = (int64x2_t)veorq_s8((int8x16_t)vsubq_s64(*(int64x2_t *)&STACK[0x670], vaddq_s64((int64x2_t)vornq_s8(*(int8x16_t *)&STACK[0x5D0], v160), (int64x2_t)vorrq_s8(v160, *(int8x16_t *)&STACK[0x5E0]))), *(int8x16_t *)&STACK[0x5C0]);
  int64x2_t v162 = (int64x2_t)veorq_s8((int8x16_t)v161, vorrq_s8((int8x16_t)vshlq_n_s64(v159, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v159, 0x3DuLL)));
  int64x2_t v163 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v161, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v161, 8uLL)), v162), *(int8x16_t *)&STACK[0x660]);
  int64x2_t v164 = (int64x2_t)veorq_s8((int8x16_t)v163, vorrq_s8((int8x16_t)vshlq_n_s64(v162, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v162, 0x3DuLL)));
  int64x2_t v165 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v163, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v163, 8uLL)), v164);
  int64x2_t v166 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v165, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v165, v165), *(int8x16_t *)&STACK[0x5B0])), *(int64x2_t *)&STACK[0x5A0]), *(int8x16_t *)&STACK[0x590]);
  int64x2_t v167 = (int64x2_t)veorq_s8((int8x16_t)v166, vorrq_s8((int8x16_t)vshlq_n_s64(v164, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v164, 0x3DuLL)));
  int64x2_t v168 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v166, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v166, 8uLL)), v167), *(int8x16_t *)&STACK[0x580]);
  int64x2_t v169 = (int64x2_t)veorq_s8((int8x16_t)v168, vorrq_s8((int8x16_t)vshlq_n_s64(v167, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v167, 0x3DuLL)));
  int64x2_t v170 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v168, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v168, 8uLL)), v169);
  int64x2_t v171 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v170, v170), *(int8x16_t *)&STACK[0x570]), v170), *(int64x2_t *)&STACK[0x560]), *(int8x16_t *)&STACK[0x550]);
  uint64x2_t v172 = vshlq_u64((uint64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v171, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v171, 8uLL)), (int64x2_t)veorq_s8((int8x16_t)v171, vorrq_s8((int8x16_t)vshlq_n_s64(v169, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v169, 0x3DuLL)))), *(int8x16_t *)&STACK[0x640]), (uint64x2_t)vnegq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(*(int64x2_t *)&STACK[0x540], 3uLL), *(int8x16_t *)&STACK[0x4E0])));
  v101.i64[1] = vqtbl4q_s8(v175, *(int8x16_t *)&STACK[0x4F0]).u64[0];
  int8x16_t v173 = vrev64q_s8((int8x16_t)v101);
  *(int8x16_t *)(v12 + v10 + 7 + STACK[0x6B0]) = veorq_s8(vextq_s8(v173, v173, 8uLL), *(int8x16_t *)(v8 + v10 + 7 - 15));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8 * ((984 * (LODWORD(STACK[0x4D0]) == -16)) ^ a8)))(1511958008, 2783010619);
}

void sub_18DA1FB80()
{
}

uint64_t sub_18DA1FB88@<X0>(uint64_t a1@<X2>, int a2@<W8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v2 + 8 * ((((((a2 - 1227) ^ (v3 == LODWORD(STACK[0x3B0]))) & 1) == 0) * (a2 - 1807)) ^ a2)))(2978155229, 0x1B0BD1982B59C071, a1, 0x8E85997BF8A3092DLL, 0x79A234E3E9ACE39ALL, 0xA2147622BAF9140ELL, 1058, -2);
}

uint64_t sub_18DA1FCD4()
{
  return (*(uint64_t (**)(void))(STACK[0x6C8]
                              + 8
                              * ((4 * ((((STACK[0x450] & 8) == 0) ^ (v0 - 1)) & 1)) & 0xDF | (32 * ((((STACK[0x450] & 8) == 0) ^ (v0 - 1)) & 1)) | v0)))();
}

uint64_t sub_18DA1FD20()
{
  unsigned int v2 = (v0 + 89329218) & 0xFAACF1B7;
  int v3 = -v1;
  unsigned int v4 = 8 - ((v2 ^ 0xFFFFFECA) & STACK[0x450]);
  int v5 = LODWORD(STACK[0x430]) + 536873482 + LODWORD(STACK[0x440]);
  unint64_t v6 = STACK[0x6C8];
  uint64_t v7 = v3 + v5 + v2 - 299;
  v8.i64[0] = STACK[0x6A0] + (v3 + v5 + 1);
  v8.i64[1] = STACK[0x6A0] + (v3 + v5);
  v9.i64[0] = STACK[0x6A0] + (v3 + v5 + 3);
  v9.i64[1] = STACK[0x6A0] + (v3 + v5 + 2);
  v10.i64[0] = STACK[0x6A0] + (v3 + v5 + 5);
  v10.i64[1] = STACK[0x6A0] + (v3 + v5 + 4);
  v11.i64[0] = STACK[0x6A0] + v7;
  v11.i64[1] = STACK[0x6A0] + (v3 + v5 + 6);
  int64x2_t v12 = (int64x2_t)vandq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v11, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v11, 8uLL)), *(int8x16_t *)&STACK[0x680]);
  int64x2_t v13 = (int64x2_t)vandq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v10, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v10, 8uLL)), *(int8x16_t *)&STACK[0x680]);
  int64x2_t v14 = (int64x2_t)vandq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v9, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v9, 8uLL)), *(int8x16_t *)&STACK[0x680]);
  int64x2_t v15 = (int64x2_t)vandq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(v8, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v8, 8uLL)), *(int8x16_t *)&STACK[0x680]);
  int8x16_t v16 = (int8x16_t)vaddq_s64(vsubq_s64(v15, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(vaddq_s64(v15, v15), *(int64x2_t *)&STACK[0x650]), *(int8x16_t *)&STACK[0x630])), *(int64x2_t *)&STACK[0x620]);
  int8x16_t v17 = (int8x16_t)vaddq_s64(vsubq_s64(v14, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(vaddq_s64(v14, v14), *(int64x2_t *)&STACK[0x650]), *(int8x16_t *)&STACK[0x630])), *(int64x2_t *)&STACK[0x620]);
  int64x2_t v18 = (int64x2_t)veorq_s8(v17, *(int8x16_t *)&STACK[0x610]);
  int64x2_t v19 = (int64x2_t)veorq_s8(v16, *(int8x16_t *)&STACK[0x610]);
  int64x2_t v20 = (int64x2_t)veorq_s8(v16, *(int8x16_t *)&STACK[0x600]);
  int8x16_t v21 = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v19, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v19, 8uLL)), v20);
  int8x16_t v22 = vorrq_s8((int8x16_t)vshlq_n_s64(v20, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v16, 0x3DuLL));
  int64x2_t v23 = (int64x2_t)veorq_s8(v17, *(int8x16_t *)&STACK[0x600]);
  int64x2_t v24 = (int64x2_t)veorq_s8(v21, *(int8x16_t *)&STACK[0x5F0]);
  int64x2_t v25 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v18, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v18, 8uLL)), v23), *(int8x16_t *)&STACK[0x5F0]);
  int64x2_t v26 = (int64x2_t)veorq_s8((int8x16_t)v25, vorrq_s8((int8x16_t)vshlq_n_s64(v23, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v17, 0x3DuLL)));
  int64x2_t v27 = (int64x2_t)veorq_s8((int8x16_t)v24, v22);
  int8x16_t v28 = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v24, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v24, 8uLL)), v27);
  int8x16_t v29 = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v25, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v25, 8uLL)), v26);
  int64x2_t v30 = (int64x2_t)veorq_s8((int8x16_t)vsubq_s64(*(int64x2_t *)&STACK[0x670], vaddq_s64((int64x2_t)vornq_s8(*(int8x16_t *)&STACK[0x5D0], v28), (int64x2_t)vorrq_s8(v28, *(int8x16_t *)&STACK[0x5E0]))), *(int8x16_t *)&STACK[0x5C0]);
  int64x2_t v31 = (int64x2_t)veorq_s8((int8x16_t)vsubq_s64(*(int64x2_t *)&STACK[0x670], vaddq_s64((int64x2_t)vornq_s8(*(int8x16_t *)&STACK[0x5D0], v29), (int64x2_t)vorrq_s8(v29, *(int8x16_t *)&STACK[0x5E0]))), *(int8x16_t *)&STACK[0x5C0]);
  int64x2_t v32 = (int64x2_t)veorq_s8((int8x16_t)v31, vorrq_s8((int8x16_t)vshlq_n_s64(v26, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v26, 0x3DuLL)));
  int64x2_t v33 = (int64x2_t)veorq_s8((int8x16_t)v30, vorrq_s8((int8x16_t)vshlq_n_s64(v27, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v27, 0x3DuLL)));
  int64x2_t v34 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v31, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v31, 8uLL)), v32), *(int8x16_t *)&STACK[0x660]);
  int64x2_t v35 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v30, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v30, 8uLL)), v33), *(int8x16_t *)&STACK[0x660]);
  int64x2_t v36 = (int64x2_t)veorq_s8((int8x16_t)v35, vorrq_s8((int8x16_t)vshlq_n_s64(v33, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v33, 0x3DuLL)));
  int64x2_t v37 = (int64x2_t)veorq_s8((int8x16_t)v34, vorrq_s8((int8x16_t)vshlq_n_s64(v32, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v32, 0x3DuLL)));
  int64x2_t v38 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v34, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v34, 8uLL)), v37);
  int64x2_t v39 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v35, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v35, 8uLL)), v36);
  int64x2_t v40 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v39, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v39, v39), *(int8x16_t *)&STACK[0x5B0])), *(int64x2_t *)&STACK[0x5A0]), *(int8x16_t *)&STACK[0x590]);
  int64x2_t v41 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v38, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v38, v38), *(int8x16_t *)&STACK[0x5B0])), *(int64x2_t *)&STACK[0x5A0]), *(int8x16_t *)&STACK[0x590]);
  int64x2_t v42 = (int64x2_t)veorq_s8((int8x16_t)v41, vorrq_s8((int8x16_t)vshlq_n_s64(v37, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v37, 0x3DuLL)));
  int64x2_t v43 = (int64x2_t)veorq_s8((int8x16_t)v40, vorrq_s8((int8x16_t)vshlq_n_s64(v36, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v36, 0x3DuLL)));
  int64x2_t v44 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v41, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v41, 8uLL)), v42), *(int8x16_t *)&STACK[0x580]);
  int64x2_t v45 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v40, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v40, 8uLL)), v43), *(int8x16_t *)&STACK[0x580]);
  int64x2_t v46 = (int64x2_t)veorq_s8((int8x16_t)v45, vorrq_s8((int8x16_t)vshlq_n_s64(v43, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v43, 0x3DuLL)));
  int64x2_t v47 = (int64x2_t)veorq_s8((int8x16_t)v44, vorrq_s8((int8x16_t)vshlq_n_s64(v42, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v42, 0x3DuLL)));
  int64x2_t v48 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v44, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v44, 8uLL)), v47);
  int64x2_t v49 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v45, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v45, 8uLL)), v46);
  int64x2_t v50 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v49, v49), *(int8x16_t *)&STACK[0x570]), v49), *(int64x2_t *)&STACK[0x560]), *(int8x16_t *)&STACK[0x550]);
  int64x2_t v51 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v48, v48), *(int8x16_t *)&STACK[0x570]), v48), *(int64x2_t *)&STACK[0x560]), *(int8x16_t *)&STACK[0x550]);
  int64x2_t v52 = (int64x2_t)veorq_s8((int8x16_t)v51, vorrq_s8((int8x16_t)vshlq_n_s64(v47, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v47, 0x3DuLL)));
  int8x16_t v53 = (int8x16_t)vdupq_n_s64(0x38uLL);
  int8x16_t v54 = (int8x16_t)vaddq_s64(vsubq_s64(v13, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(vaddq_s64(v13, v13), *(int64x2_t *)&STACK[0x650]), *(int8x16_t *)&STACK[0x630])), *(int64x2_t *)&STACK[0x620]);
  v89.val[3] = (int8x16_t)vshlq_u64((uint64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v50, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v50, 8uLL)), (int64x2_t)veorq_s8((int8x16_t)v50, vorrq_s8((int8x16_t)vshlq_n_s64(v46, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v46, 0x3DuLL)))), *(int8x16_t *)&STACK[0x640]), (uint64x2_t)vnegq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v8, 3uLL), v53)));
  v89.val[2] = (int8x16_t)vshlq_u64((uint64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v51, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v51, 8uLL)), v52), *(int8x16_t *)&STACK[0x640]), (uint64x2_t)vnegq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v9, 3uLL), v53)));
  int64x2_t v55 = (int64x2_t)veorq_s8(v54, *(int8x16_t *)&STACK[0x610]);
  int64x2_t v56 = (int64x2_t)veorq_s8(v54, *(int8x16_t *)&STACK[0x600]);
  int64x2_t v57 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v55, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v55, 8uLL)), v56), *(int8x16_t *)&STACK[0x5F0]);
  int64x2_t v58 = (int64x2_t)veorq_s8((int8x16_t)v57, vorrq_s8((int8x16_t)vshlq_n_s64(v56, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v54, 0x3DuLL)));
  int8x16_t v59 = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v57, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v57, 8uLL)), v58);
  int64x2_t v60 = (int64x2_t)veorq_s8((int8x16_t)vsubq_s64(*(int64x2_t *)&STACK[0x670], vaddq_s64((int64x2_t)vornq_s8(*(int8x16_t *)&STACK[0x5D0], v59), (int64x2_t)vorrq_s8(v59, *(int8x16_t *)&STACK[0x5E0]))), *(int8x16_t *)&STACK[0x5C0]);
  int64x2_t v61 = (int64x2_t)veorq_s8((int8x16_t)v60, vorrq_s8((int8x16_t)vshlq_n_s64(v58, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v58, 0x3DuLL)));
  int64x2_t v62 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v60, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v60, 8uLL)), v61), *(int8x16_t *)&STACK[0x660]);
  int64x2_t v63 = (int64x2_t)veorq_s8((int8x16_t)v62, vorrq_s8((int8x16_t)vshlq_n_s64(v61, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v61, 0x3DuLL)));
  int64x2_t v64 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v62, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v62, 8uLL)), v63);
  int64x2_t v65 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v64, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v64, v64), *(int8x16_t *)&STACK[0x5B0])), *(int64x2_t *)&STACK[0x5A0]), *(int8x16_t *)&STACK[0x590]);
  int64x2_t v66 = (int64x2_t)veorq_s8((int8x16_t)v65, vorrq_s8((int8x16_t)vshlq_n_s64(v63, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v63, 0x3DuLL)));
  int64x2_t v67 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v65, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v65, 8uLL)), v66), *(int8x16_t *)&STACK[0x580]);
  int64x2_t v68 = (int64x2_t)veorq_s8((int8x16_t)v67, vorrq_s8((int8x16_t)vshlq_n_s64(v66, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v66, 0x3DuLL)));
  int64x2_t v69 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v67, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v67, 8uLL)), v68);
  int64x2_t v70 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v69, v69), *(int8x16_t *)&STACK[0x570]), v69), *(int64x2_t *)&STACK[0x560]), *(int8x16_t *)&STACK[0x550]);
  int8x16_t v71 = (int8x16_t)vaddq_s64(vsubq_s64(v12, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(vaddq_s64(v12, v12), *(int64x2_t *)&STACK[0x650]), *(int8x16_t *)&STACK[0x630])), *(int64x2_t *)&STACK[0x620]);
  v89.val[1] = (int8x16_t)vshlq_u64((uint64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v70, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v70, 8uLL)), (int64x2_t)veorq_s8((int8x16_t)v70, vorrq_s8((int8x16_t)vshlq_n_s64(v68, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v68, 0x3DuLL)))), *(int8x16_t *)&STACK[0x640]), (uint64x2_t)vnegq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v10, 3uLL), v53)));
  int64x2_t v72 = (int64x2_t)veorq_s8(v71, *(int8x16_t *)&STACK[0x610]);
  int64x2_t v73 = (int64x2_t)veorq_s8(v71, *(int8x16_t *)&STACK[0x600]);
  int64x2_t v74 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v72, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v72, 8uLL)), v73), *(int8x16_t *)&STACK[0x5F0]);
  int64x2_t v75 = (int64x2_t)veorq_s8((int8x16_t)v74, vorrq_s8((int8x16_t)vshlq_n_s64(v73, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v71, 0x3DuLL)));
  int8x16_t v76 = (int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v74, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v74, 8uLL)), v75);
  int64x2_t v77 = (int64x2_t)veorq_s8((int8x16_t)vsubq_s64(*(int64x2_t *)&STACK[0x670], vaddq_s64((int64x2_t)vornq_s8(*(int8x16_t *)&STACK[0x5D0], v76), (int64x2_t)vorrq_s8(v76, *(int8x16_t *)&STACK[0x5E0]))), *(int8x16_t *)&STACK[0x5C0]);
  int64x2_t v78 = (int64x2_t)veorq_s8((int8x16_t)v77, vorrq_s8((int8x16_t)vshlq_n_s64(v75, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v75, 0x3DuLL)));
  int64x2_t v79 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v77, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v77, 8uLL)), v78), *(int8x16_t *)&STACK[0x660]);
  int64x2_t v80 = (int64x2_t)veorq_s8((int8x16_t)v79, vorrq_s8((int8x16_t)vshlq_n_s64(v78, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v78, 0x3DuLL)));
  int64x2_t v81 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v79, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v79, 8uLL)), v80);
  int64x2_t v82 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64(v81, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v81, v81), *(int8x16_t *)&STACK[0x5B0])), *(int64x2_t *)&STACK[0x5A0]), *(int8x16_t *)&STACK[0x590]);
  int64x2_t v83 = (int64x2_t)veorq_s8((int8x16_t)v82, vorrq_s8((int8x16_t)vshlq_n_s64(v80, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v80, 0x3DuLL)));
  int64x2_t v84 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v82, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v82, 8uLL)), v83), *(int8x16_t *)&STACK[0x580]);
  int64x2_t v85 = (int64x2_t)veorq_s8((int8x16_t)v84, vorrq_s8((int8x16_t)vshlq_n_s64(v83, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v83, 0x3DuLL)));
  int64x2_t v86 = vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v84, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v84, 8uLL)), v85);
  int64x2_t v87 = (int64x2_t)veorq_s8((int8x16_t)vaddq_s64(vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v86, v86), *(int8x16_t *)&STACK[0x570]), v86), *(int64x2_t *)&STACK[0x560]), *(int8x16_t *)&STACK[0x550]);
  v89.val[0] = (int8x16_t)vshlq_u64((uint64x2_t)veorq_s8((int8x16_t)vaddq_s64((int64x2_t)vorrq_s8((int8x16_t)vshlq_n_s64(v87, 0x38uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v87, 8uLL)), (int64x2_t)veorq_s8((int8x16_t)v87, vorrq_s8((int8x16_t)vshlq_n_s64(v85, 3uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v85, 0x3DuLL)))), *(int8x16_t *)&STACK[0x640]), (uint64x2_t)vnegq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_n_s64(v11, 3uLL), v53)));
  *(int8x8_t *)(STACK[0x380] + v7 + STACK[0x6B0]) = veor_s8(vrev64_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v89, (int8x16_t)xmmword_18DDB59E0)), *(int8x8_t *)(v11.i64[0] - 7));
  return (*(uint64_t (**)(void))(v6 + 8 * (int)(((2 * (v3 != v4)) | (8 * (v3 != v4))) ^ v2)))();
}

void sub_18DA203F8()
{
}

uint64_t sub_18DA20420(uint64_t a1, int a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v5 + 8 * (((((v4 + 562) ^ 0x747) - 879) * (a2 == v3)) ^ (v4 + 562))))(2978155229, 0x1B0BD1982B59C071, a3, 0x8E85997BF8A3092DLL, 0x79A234E3E9ACE39ALL, 0xA2147622BAF9140ELL, 1058, -2);
}

uint64_t sub_18DA20560@<X0>(int a1@<W0>, unint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, char a6@<W6>, uint64_t a7@<X7>, int a8@<W8>)
{
  uint64_t v23 = (a8 + a1);
  uint64_t v24 = __ROR8__(STACK[0x6A0] + v23, 8);
  unint64_t v25 = (v24 & 0xF8FFFFFFFFFFFFFFLL)
      - ((((v24 & 0xF8FFFFFFFFFFFFFFLL) << (((v9 - 26) | v11) ^ a6)) + 0x55E7EF06772DD764) & 0xD75B4A9B67868872)
      - 0x655E632F10A5D015;
  unint64_t v26 = (__ROR8__(v25 ^ v13, 8) + (v25 ^ v20)) ^ v16;
  *((void *)&v28 + 1) = v25 ^ v20;
  *(void *)&long long v28 = v25;
  uint64_t v27 = v28 >> 61;
  *(void *)&long long v28 = __ROR8__(v26, 8);
  unint64_t v29 = v26 ^ v27;
  uint64_t v30 = (a7 - ((v15 | ~(v28 + v29)) + ((v28 + v29) | v14))) ^ v19;
  uint64_t v31 = v30 ^ __ROR8__(v29, 61);
  uint64_t v32 = (__ROR8__(v30, 8) + v31) ^ a3;
  uint64_t v33 = v32 ^ __ROR8__(v31, 61);
  *(void *)&long long v28 = __ROR8__(v32, 8);
  uint64_t v34 = (v28 + v33 - (a4 & (2 * (v28 + v33))) + v21) ^ v10;
  uint64_t v35 = v34 ^ __ROR8__(v33, 61);
  uint64_t v36 = (__ROR8__(v34, 8) + v35) ^ v17;
  uint64_t v37 = v36 ^ __ROR8__(v35, 61);
  *(void *)&long long v28 = __ROR8__(v36, 8);
  *(unsigned char *)(v12 + v23 + STACK[0x6B0]) = (((__ROR8__(((a5 & (2 * (v28 + v37))) - (v28 + v37) + v8) ^ v18, 8)
                                          + (((a5 & (2 * ((void)v28 + v37))) - ((void)v28 + v37) + v8) ^ v18 ^ __ROR8__(v37, 61))) ^ a2) >> (8 * ((LOBYTE(STACK[0x6A0]) + a8 + a1) & 7u))) ^ *(unsigned char *)(STACK[0x6A0] + v23);
  return (*(uint64_t (**)(void))(STACK[0x6C8] + 8 * ((2 * (a8 - 1 == v22)) | ((a8 - 1 == v22) << 10) | v9)))();
}

void sub_18DA206AC()
{
}

uint64_t sub_18DA2070C@<X0>(int a1@<W1>, uint64_t a2@<X3>, int a3@<W8>)
{
  uint64_t v3 = ((2 * (a1 - 747658360)) & 0xDFEFFBBC) + ((a1 - 747658360) ^ 0x1D7FFBFB6FF7FDDELL);
  unint64_t v4 = STACK[0x460];
  unint64_t v5 = STACK[0x460] - 0x1D7FFBFB6FF7FDDELL + v3;
  *(_WORD *)unint64_t v5 = 0;
  *(unsigned char *)(v5 + 2) = 0;
  *(unsigned char *)(v4 + v3 + ((a3 - 1093) ^ 0xE280040490080344)) = 0;
  *(_WORD *)(v4
           + ((2 * (a1 - 747658356)) & 0xF35F6FFC)
           - 0x67FFF66979AFB7FELL
           + ((a1 - 747658356) ^ 0x67FFF66979AFB7FELL)) = -9392;
  uint64_t v6 = (16 - LODWORD(STACK[0x3E0]));
  int v7 = LODWORD(STACK[0x3E0]) + 2 * ((16 - LOBYTE(STACK[0x3E0])) & 0x17 ^ STACK[0x390] & 3);
  unint64_t v8 = v4
     + ((2 * (a1 - 747658354)) & 0x1DEEFFFBALL)
     + ((a1 - 747658354) ^ 0xDDD7FBDFEF77FFDDLL)
     + 0x2228042010880023;
  *(_WORD *)unint64_t v8 = 0;
  *(unsigned char *)(v8 + 2) = 0;
  *(unsigned char *)(v8 + 3) = (-28 - v7) ^ 0xD4;
  return (*(uint64_t (**)(void))(a2
                              + 8
                              * (a3 ^ (26
                                     * ((v6 ^ 0xFFFE93B7DFFDFF7FLL) + 2 * v6 != 0xFFFE93B7DFFDFF7FLL)))))();
}

uint64_t sub_18DA208B4@<X0>(int a1@<W0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W8>)
{
  BOOL v10 = v8 < v9;
  *(unsigned char *)(v7 + v6) = 0;
  if (v10 == (v5 ^ a2) + v6 > a3) {
    BOOL v10 = v9 + v6 + 1 < v8;
  }
  return (*(uint64_t (**)(void))(a4 + 8 * ((v10 * a1) ^ a5)))();
}

uint64_t sub_18DA20900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)STACK[0x400] = a5;
  *(_DWORD *)STACK[0x3F0] = STACK[0x3A0];
  return ((uint64_t (*)(uint64_t, unint64_t *))STACK[0x420])(a1, &STACK[0x760]);
}

uint64_t sub_18DA20930@<X0>(uint64_t a1@<X3>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(a1 + 8 * (((v2 + 1092) * a2) ^ (v2 - 26))))();
}

void sub_18DA20950(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 248) = *(void *)(a2 + 472);
  LODWORD(STACK[0x9AC]) = STACK[0x77C];
  JUMPOUT(0x18DA20974);
}

uint64_t sub_18DA209A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8 * ((43 * (STACK[0x6D8] == 0)) ^ (v4 + 1065))))();
}

void sub_18DA209CC()
{
}

uint64_t sub_18DA20A68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (*(uint64_t (**)(void, void, void))(a4 + 8 * (v4 ^ 0xA5E)))(0, 0, 0);
  STACK[0x6E8] = v5;
  (*(void (**)(void))(STACK[0x6C8] + 8 * (v4 + 1597)))();
  uint64_t v6 = (*(uint64_t (**)(unint64_t, uint64_t))(STACK[0x6C8] + 8 * (v4 + 1594)))(STACK[0x848], v5);
  unint64_t v7 = STACK[0x6C8];
  STACK[0x870] = v6;
  return (*(uint64_t (**)(void))(v7 + 8 * (((v6 == 0) * ((5 * (v4 ^ 0x214)) ^ v4)) | v4)))();
}

uint64_t sub_18DA20B40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (*(uint64_t (**)(void))(a4 + 8 * (v4 + 1557)))();
  return (*(uint64_t (**)(void))(STACK[0x6C8]
                              + 8
                              * (((v5 == (void)*(&off_1E559D8D0 + v4 - 585) - 4) * (((v4 + 400) | 0x24A) + 1145)) ^ v4)))();
}

uint64_t sub_18DA20BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t, char *))(a4 + 8 * (v5 + 626)))(v4, (char *)*(&off_1E559D8D0 + (v5 ^ 0x677)) - 1);
  return (*(uint64_t (**)(void))(STACK[0x6C8]
                              + 8
                              * (((((v5 - 1) ^ (v6 == 0)) & 1) * (((v5 - 268009200) & 0xFF97EED) - 1418)) ^ v5)))();
}

uint64_t sub_18DA20C20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5 = *(uint64_t (**)(void))(STACK[0x6C8]
                           + 8
                           * ((((*(uint64_t (**)(void))(a4 + 8 * (v4 + 571)))() == (void)*(&off_1E559D8D0
                                                                                            + ((v4 - 986) ^ 0x2AA))
                                                                                  - 12)
                             * ((v4 - 307) ^ (v4 - 2) ^ 0x36F)) ^ (v4 - 986)));
  return v5();
}

uint64_t sub_18DA20C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6 = (*(uint64_t (**)(uint64_t))(a4 + 8 * (v4 ^ 0xD87)))(v5);
  unint64_t v7 = STACK[0x6C8];
  int v8 = v6 - 1393729084 - ((v6 << (((v4 - 85) ^ 0x8C) - 105)) & 0x59DAC388);
  LODWORD(STACK[0x73C]) = v8;
  return (*(uint64_t (**)(void))(v7 + 8 * ((118 * (v8 == -1393729084)) ^ v4)))();
}

uint64_t sub_18DA20CFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = *(uint64_t (**)(void))(STACK[0x6C8]
                           + 8
                           * ((((*(uint64_t (**)(uint64_t, uint64_t, unint64_t *))(a4 + 8 * (v4 + 683)))(v5, v6, &STACK[0x918]) == 0)* (((822 * (v4 ^ 0x5E4)) ^ 0x576) + 217)) ^ v4));
  return v7();
}

uint64_t sub_18DA20D68(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6 = (LODWORD(STACK[0x918]) ^ 0x70FF7CBF)
     - 539255865
     + ((LODWORD(STACK[0x918]) << (((v4 + 105) | 4) + 122)) & 0xE1FEF97E);
  a2[71] = (char *)&STACK[0xAA0] + v5 - 0x1E7881515ED94D2FLL;
  a2[49] = a1;
  a2[9] = 0;
  STACK[0x6F8] = 0;
  LODWORD(STACK[0x8B8]) = -1129976585;
  LODWORD(STACK[0x72C]) = 0;
  a2[1] = ((v4 + 361) ^ 0xFFFFFFFFFFFFFB53) + v5;
  a2[2] = 0;
  LODWORD(STACK[0x824]) = -1129976585;
  uint64_t v7 = (*(uint64_t (**)(char *, void, uint64_t))(a4 + 8 * (v4 ^ 0xBB8)))((char *)&STACK[0xAA0] + v5 - 0x1E7881515ED94D2FLL, 0, 32);
  return (*(uint64_t (**)(uint64_t))(STACK[0x6C8] + 8 * ((v6 != 1356535942) | (32 * (v6 != 1356535942)) | v4)))(v7);
}

uint64_t sub_18DA20E54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(a4 + 8 * (v4 ^ 0xE26)))(128);
  unint64_t v7 = STACK[0x6C8];
  *(void *)(v5 + 152) = v6 + 0x134F8A868441352ELL;
  return (*(uint64_t (**)(void))(v7 + 8 * (((v6 == 0) * ((v4 ^ 0x6C0) + 1435 + 7 * (v4 ^ 0x6C0) - 1989)) ^ v4)))();
}

uint64_t sub_18DA20ECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v6 + 8) = v7;
  LODWORD(STACK[0x7DC]) = v4;
  return (*(uint64_t (**)(void))(a4
                              + 8
                              * (((STACK[0x858] != 0)
                                * (((((((v5 + 31) | 0x84) - 48) | 0x408) - 1775177590) & 0x69CF0D6B) - 876)) ^ ((((v5 + 31) | 0x84) - 48) | 0x408))))();
}

void sub_18DA20EE4()
{
  unint64_t v0 = STACK[0x8F8];
  LODWORD(STACK[0x844]) = STACK[0x73C];
  *(void *)STACK[0x3D8] = v0;
  JUMPOUT(0x18DA26490);
}

uint64_t sub_18DA20EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8 * (((2 * ((2 * v4) ^ 0xAAE) - 715) * (a1 == 0)) | v4)))();
}

uint64_t sub_18DA20F3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 8) = v4;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(a4 + 8 * (v5 ^ 0x9CB)))(112);
  unint64_t v7 = STACK[0x6C8];
  STACK[0x700] = v6 + 0x23120F4208F8DDDLL;
  return (*(uint64_t (**)(void))(v7 + 8 * (((v6 == 0) * ((v5 + 326) ^ 0x2AB)) ^ (v5 + 1527))))();
}

uint64_t sub_18DA20FBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_WORD *)(a1 + 80) = 25175;
  *(void *)a1 = 0x65EE1E795321A838;
  memset((void *)(a1 + 8), 79, 64);
  *(void *)(a1 + 72) = 0x116585BF116585BFLL;
  unint64_t v5 = STACK[0x700];
  *(_DWORD *)(STACK[0x700] - 0x23120F4208F8D89) = 1095089643;
  *(_DWORD *)(v5 - 0x23120F4208F8D75) = 2126566836;
  memset((void *)(v5 - 0x23120F4208F8D85), 79, 16);
  BOOL v7 = v5 != 0x23120F4208F8DDDLL && *(void *)(a2 + 152) != 0x134F8A868441352ELL;
  *(unsigned char *)(v5 - 0x23120F4208F8D71) = 42;
  return (*(uint64_t (**)(void))(a4 + 8 * (int)((v7 * (49 * ((v4 + 922247482) & 0xC9079D7F ^ 0x17B) + 683)) ^ v4)))();
}

uint64_t sub_18DA21110@<X0>(int a1@<W6>, uint64_t a2@<X8>)
{
  STACK[0x6B0] = a2 - 0x23120F4208F8D84;
  STACK[0x6A0] = a2 - 0x23120F4208F8D83;
  STACK[0x540] = a2 - 0x23120F4208F8D82;
  STACK[0x530] = a2 - 0x23120F4208F8D81;
  STACK[0x520] = a2 - 0x23120F4208F8D80;
  STACK[0x510] = a2 - 0x23120F4208F8D7FLL;
  *(_DWORD *)(v2 - 0x134F8A868441351ELL) = *(_DWORD *)(a2 - 0x23120F4208F8DDDLL);
  *(_DWORD *)(v2 - 0x134F8A86844134D6) = *(_DWORD *)(a2 - 0x23120F4208F8D95);
  *(_DWORD *)(v2 - 0x134F8A86844134D2) = *(_DWORD *)(a2 - 0x23120F4208F8D91);
  *(unsigned char *)(v2 - 0x134F8A86844134CELL) = *(unsigned char *)(a2 - 0x23120F4208F8D8DLL);
  *(unsigned char *)(v2 - 0x134F8A86844134CDLL) = *(unsigned char *)(a2 - 0x23120F4208F8D8CLL);
  *(_DWORD *)(v2 - 0x134F8A86844134B6) = *v3;
  *(_DWORD *)(v2 - 0x134F8A86844134CALL) = *v5;
  *(unsigned char *)(v2 - 0x134F8A86844134B2) = *v4 & 1 | 0xAA;
  *(unsigned char *)(v2 - 0x134F8A86844134F7) = *((unsigned char *)*(&off_1E559D8D0 + a1 - 737) + 15) ^ 0x61 ^ (((a1 - 120) ^ 0x5E)
                                                                                                + *(unsigned char *)(a2 - 0x23120F4208F8DB6)
                                                                                                + (~*(unsigned char *)(a2 - 0x23120F4208F8DB6) | 0x1B)
                                                                                                + (*(unsigned char *)(a2 - 0x23120F4208F8DB6) | 0x1B)) ^ *((unsigned char *)*(&off_1E559D8D0 + a1 - 831) + 5) ^ *((unsigned char *)*(&off_1E559D8D0 + (a1 ^ 0x36F)) + 16);
  return (*(uint64_t (**)(uint64_t))(STACK[0x6C8] + 8 * a1))(a2 - 0x23120F4208F8D7ELL);
}

void sub_18DA21438()
{
}

uint64_t sub_18DA21440@<X0>(uint64_t a1@<X8>)
{
  *(unsigned char *)(v2 - 0x134F8A86844134D7) = *(unsigned char *)(v5 + 17) ^ *(unsigned char *)(v4 + 15) ^ *(unsigned char *)(v3 + 16) ^ 0x61 ^ (*(unsigned char *)(a1 - 0x23120F4208F8D96) + 17 * (v1 ^ 0xAE) + (~*(unsigned char *)(a1 - 0x23120F4208F8D96) | 0x1B) + (*(unsigned char *)(a1 - 0x23120F4208F8D96) | 0x1B) - 64);
  return (*(uint64_t (**)(void))(STACK[0x6C8] + 8 * v1))();
}

void sub_18DA214FC()
{
}

uint64_t sub_18DA21504@<X0>(unsigned char *a1@<X0>, unsigned char *a2@<X3>, unsigned char *a3@<X4>, unsigned char *a4@<X5>, int a5@<W6>, unsigned char *a6@<X7>, uint64_t a7@<X8>)
{
  *(unsigned char *)(v10 - 0x134F8A86844134B7) = *v12;
  *(unsigned char *)(v10 - 0x134F8A86844134B8) = *v11;
  *(unsigned char *)(v10 - 0x134F8A86844134B9) = *v9;
  *(unsigned char *)(v10 - 0x134F8A86844134BALL) = *a6;
  *(unsigned char *)(v10 - 0x134F8A86844134BBLL) = *a4;
  *(unsigned char *)(v10 - 0x134F8A86844134BCLL) = *a3;
  *(unsigned char *)(v10 - 0x134F8A86844134BDLL) = *a2;
  *(unsigned char *)(v10 - 0x134F8A86844134BELL) = *v8;
  *(unsigned char *)(v10 - 0x134F8A86844134BFLL) = *a1;
  *(unsigned char *)(v10 - 0x134F8A86844134C0) = *(unsigned char *)STACK[0x510];
  *(unsigned char *)(v10 - 0x134F8A86844134C1) = *(unsigned char *)STACK[0x520];
  *(unsigned char *)(v10 - 0x134F8A86844134C2) = *(unsigned char *)STACK[0x530];
  *(unsigned char *)(v10 - 0x134F8A86844134C3) = *(unsigned char *)STACK[0x540];
  *(unsigned char *)(v10 - 0x134F8A86844134C4) = *(unsigned char *)STACK[0x6A0];
  *(unsigned char *)(v10 - 0x134F8A86844134C5) = *(unsigned char *)STACK[0x6B0];
  *(unsigned char *)(v10 - 0x134F8A86844134C6) = *v7;
  *(_DWORD *)(v10 - 0x134F8A868441351ALL) = *(_DWORD *)(a7 - 0x23120F4208F8DD9);
  return (*(uint64_t (**)(void))(STACK[0x6C8]
                              + 8
                              * (((*(_DWORD *)(a7 - 0x23120F4208F8DD9) == 1710104185) * (((a5 - 591) | 0x241) + 2041)) ^ a5)))();
}

uint64_t sub_18DA21708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8 * ((30 * (*v5 == (v4 ^ 0x599) + 291865199)) ^ v4)))();
}

uint64_t sub_18DA21748@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  *uint64_t v3 = 1710104186;
  return (*(uint64_t (**)(uint64_t, unint64_t *))(a2
                                                                + 8
                                                                * ((((((v4 - 965) | 0x340) - 510364005) & 0x1E6B877E ^ 0x14B)
                                                                  * (a3 == 0x23120F4208F8DDDLL)) | (v4 - 965) | 0x340)))(a1, &STACK[0x760]);
}

void sub_18DA217E0()
{
}

uint64_t sub_18DA21830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,int a40)
{
  return (*(uint64_t (**)(void))(a4 + 8 * (((a40 - 293) * (v40 != v42)) ^ (v41 + 260))))();
}

uint64_t sub_18DA2185C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,int a40)
{
  return (*(uint64_t (**)(void))(a4
                              + 8
                              * (((*(unsigned __int8 *)(*(void *)(a2 + 152) - 0x134F8A86844134CELL) == ((a40 + 118) ^ 0x2E))
                                * ((a40 - 348) ^ 0x13B)) ^ a40)))();
}

uint64_t sub_18DA218B0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a3 - 0x134F8A868441352ELL);
  *(void *)(a1 + 96) = 0x24CC9A478416F3DCLL;
  STACK[0x6E0] = 0x4860F2874C89E0E8;
  return (*(uint64_t (**)(void))(a2 + 8 * ((7 * (v4 != 0x66FBF218A8091D0CLL)) ^ v3)))();
}

uint64_t sub_18DA21930@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15 = v13 ^ 0x4DCLL;
  *(void *)(a1 + 368) = *(void *)(a2 + 8 * v15);
  LODWORD(STACK[0xA6C]) = -528353723;
  *(void *)(a1 + 784) = a13;
  BOOL v17 = a13 == 0x1E34DA578D8F45CBLL || a3 == v14;
  return (*(uint64_t (**)(void))(a2
                              + 8
                              * (int)((v17 * ((((v15 + 1419) | 0x100) - 1558) ^ (2 * ((v15 + 1915) ^ 0x895)))) ^ (v15 + 1915))))();
}

uint64_t sub_18DA21958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,int a27)
{
  return (*(uint64_t (**)(void))(a4 + 8 * (((a27 + 388) * (v27 == v29)) ^ (v28 + 783))))();
}

uint64_t sub_18DA21980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,int a27)
{
  uint64_t v27 = *(void *)(*(void *)(a2 + 96) - 0x24CC9A478416F3C4);
  *(void *)(a2 + 320) = v27;
  return (*(uint64_t (**)(void))(a4 + 8 * (((v27 != 0) * (((a27 - 209) | 0x12A) ^ 0x1C1)) ^ a27)))();
}

uint64_t sub_18DA219EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,unsigned int a27)
{
  uint64_t v28 = (v27 - 1508655795);
  *(void *)(a2 + 648) = v28;
  unint64_t v29 = STACK[0x6E0];
  *(void *)(a2 + 656) = STACK[0x6E0];
  return (*(uint64_t (**)(void))(a4
                              + 8
                              * ((1905
                                * (v28 - v29 + 0x4860F2874C89E0E8 > ((a27 - 1250184098) & 0x4A844BFA ^ 0xFFFFFFFFFFFFFFF5)
                                                                    + a27
                                                                    + 89)) ^ a27)))();
}

uint64_t sub_18DA21A74@<X0>(void *a1@<X1>, int a2@<W8>)
{
  uint64_t v3 = a1[90];
  STACK[0x6B0] = a1[89] + 2449801858;
  STACK[0x6A0] = ((v3 - 0x1CAEFB3D54F94338) ^ 0x7FAEDE6E78DAEF99)
               - 0x6A08100258D88888
               + ((2 * (v3 - 0x1CAEFB3D54F94338)) & 0xFF5DBCDCF1B5DF32);
  uint64_t v4 = a1[88] - 0x43A08B1300141362;
  STACK[0x540] = (v4 ^ 0xB5B7FE7DF9DBE7F7) + 0x5FEECFEE26267F1ALL + ((2 * v4) & 0x6B6FFCFBF3B7CFEELL);
  uint64_t v5 = a1[86] - 0x604C1CD85C5D4F9BLL;
  STACK[0x530] = (v5 ^ 0xD7AFDF7E6F5A7F3FLL) + 0x3DF6EEEDB0A7E7D2 + ((2 * v5) & 0xAF5FBEFCDEB4FE7ELL);
  unint64_t v6 = STACK[0xA60];
  STACK[0x520] = ((STACK[0xA60] - 0x6F654FD9E3543B0ELL) ^ 0x7DBFDEFEBECFE759)
               - 0x681910929ECD8048
               + ((2 * (STACK[0xA60] - 0x6F654FD9E3543B0ELL)) & 0xFB7FBDFD7D9FCEB2);
  unint64_t v7 = STACK[0xA58];
  unint64_t v8 = STACK[0xA00] - 0x555194FDB6690FF7;
  STACK[0x510] = (v8 ^ 0x17FFEF6C681B6FB3) - 0x2592100481908A2 + ((2 * v8) & 0x2FFFDED8D036DF66);
  unint64_t v9 = STACK[0x9F0] - 0x4860F2874C89E0E4;
  STACK[0x500] = (v9 ^ 0x15AFFF7D309777B9) - 0x93111109510A8 + ((2 * v9) & 0x2B5FFEFA612EEF72);
  STACK[0x4D0] = ((v3 - 0x1CAEFB3D54F94336) ^ 0xFFFFDF77BFF5AFFDLL)
               + 0x1799FEEFC5FBD748
               + ((2 * (v3 - 0x1CAEFB3D54F94336)) & 0xFFFFBEEF7FEB5FFALL);
  STACK[0x4C0] = ((v4 + 2) ^ 0xB7F9FE6FA5FDA747) + 0x5F9FDFF7DFF3DFFELL + ((2 * (v4 + 2)) & 0x6FF3FCDF4BFB4E8ELL);
  STACK[0x4B0] = ((v5 + 2) ^ 0x57D9DF778DF9D7F5) - 0x40400110080850B0 + ((2 * (v5 + 2)) & 0xAFB3BEEF1BF3AFEALL);
  STACK[0x490] = ((v8 + 2) ^ 0x17DDDEF7AFFBF7C5) - 0x4400902A0A7080 + ((2 * (v8 + 2)) & 0x2FBBBDEF5FF7EF8ALL);
  STACK[0x480] = ((v6 - 0x6F654FD9E3543B0CLL) ^ 0x57DFDEFFF7F3D775)
               - 0x4046009872025030
               + ((2 * (v6 - 0x6F654FD9E3543B0CLL)) & 0xAFBFBDFFEFE7AEEALL);
  STACK[0x470] = ((v9 + 2) ^ 0xDFFBDF7FCDFBBF77) + 0x379DFEE7B7F5C7CELL + ((2 * (v9 + 2)) & 0xBFF7BEFF9BF77EEELL);
  STACK[0x440] = v3 - 0x1CAEFB3D54F94332;
  STACK[0x460] = ((v3 - 0x1CAEFB3D54F94332) ^ 0x3FFDDFF7A5FF8F7FLL)
               - 0x28640190200E083ALL
               + ((2 * (v3 - 0x1CAEFB3D54F94332)) & 0x7FFBBFEF4BFF1EFELL);
  STACK[0x450] = ((v6 - 0x6F654FD9E3543B08) ^ 0x179BDF67DFF3CFEDLL)
               - 0x201005A0248A8
               + ((2 * (v6 - 0x6F654FD9E3543B08)) & 0x2F37BECFBFE79FDALL);
  return (*(uint64_t (**)(unint64_t))(STACK[0x6C8] + 8 * (a2 - 183)))(v7 + 1504933370);
}

uint64_t sub_18DA21AA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = STACK[0x9F0] + (v4 ^ 0xBCA5ECF7) - 0x4860F286AD35ADBALL;
  BOOL v6 = v5 < 0x9F543324;
  BOOL v7 = v5 > STACK[0x9E8] + 2673095460u;
  if (STACK[0x9E8] > 0xFFFFFFFF60ABCCDBLL != v6) {
    BOOL v7 = v6;
  }
  return (*(uint64_t (**)(void))(a4 + 8 * (((8 * !v7) | (16 * !v7)) ^ (LODWORD(STACK[0x69C]) + 1697))))();
}

uint64_t sub_18DA21B70@<X0>(void *a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, char a16)
{
  unint64_t v21 = v16 + 10;
  int v22 = LOWORD(STACK[0x9C2]);
  if (v22 == 10427)
  {
LABEL_4:
    STACK[0x6E0] = v21;
    LODWORD(STACK[0x824]) = v17;
    int v18 = 1393700934;
    goto LABEL_6;
  }
  if (v22 != 64741)
  {
    if (v22 != 15177) {
      goto LABEL_6;
    }
    goto LABEL_4;
  }
  uint64_t v23 = a1[40];
  STACK[0x6E0] = v21;
  LODWORD(STACK[0x824]) = v17;
  a1[2] = v23 + a3 - 0x4860F2874C89E0DELL;
  int v18 = -1393729084;
LABEL_6:
  if (v18 == 1393700935) {
    return (*(uint64_t (**)(void))(a2
  }
                                + 8
                                * ((1302
                                  * (*(unsigned __int8 *)(a1[19] - 0x134F8A86844134CDLL) == (v19 ^ 0x4B ^ a16 & 0xAF ^ 0xE4))) ^ (v19 + 628))))();
  if (v18 == v20)
  {
    uint64_t v24 = a1[19];
    int v25 = *(_DWORD *)(v24 - 0x134F8A868441351ALL);
    if (v25 == 1710104186) {
      JUMPOUT(0x18DA21D6CLL);
    }
    int v26 = 1393700945;
    int v27 = v19;
    if (v25 == 1710104185)
    {
      if (*(unsigned char *)(v24 - 0x134F8A86844134CDLL) == 98) {
        int v26 = 1393700932;
      }
      else {
        int v26 = 1393700945;
      }
      int v27 = STACK[0x69C];
    }
    LODWORD(STACK[0x9BC]) = v26;
    uint64_t v29 = a1[19];
    a1[62] = v29;
    a1[36] = *(void *)(a2 + 8 * (int)((v27 + 1857379729) & 0x914AA1F6));
    a1[60] = &STACK[0x950];
    a1[8] = v29;
    return (*(uint64_t (**)(void))(a2
                                + 8
                                * (int)(((v29 == 0x134F8A868441352ELL) ^ (((v27 - 111) & 0xF6) - 55)) & 1 | (((v27 + 1857379729) & 0x914AA1F6) + 202))))();
  }
  else
  {
    LODWORD(STACK[0x9BC]) = v18;
    return (*(uint64_t (**)(void))(a2 + 8 * ((694 * (v18 == ((v20 + v19 + 648 - 1152) ^ (v19 - 120)))) | (v19 - 33))))();
  }
}

void sub_18DA21DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(_OWORD **)(a2 + 568);
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  JUMPOUT(0x18DA21E14);
}

uint64_t sub_18DA21E60@<X0>(void *a1@<X1>, uint64_t a2@<X3>, int a3@<W8>)
{
  int v10 = *v3;
  int v11 = 55633441 * ((v9 - 2076161836 - 2 * ((v9 - 232) & 0x844049BC)) ^ 0xBCC37203);
  a1[137] = v7;
  *(_DWORD *)(v9 - 188) = v11 + 144568323;
  *(_DWORD *)(v9 - 184) = v11 + (v6 & 0x99E731F3) - 129;
  *(_DWORD *)(v9 - 232) = -55633441 * ((v9 - 2076161836 - 2 * ((v9 - 232) & 0x844049BC)) ^ 0xBCC37203)
                        + 782002633 * v10
                        + 910896906;
  *(_DWORD *)(v9 - 208) = (a3 ^ 0xFFFF9E95 ^ ((v6 & 0x99E731F3) - 105)) - v11 + 2 * a3 + 905377144;
  a1[139] = v5;
  a1[136] = v4;
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(a2 + 8 * (int)(v6 & 0x99E731F3 ^ 0x967)))(v9 - 232);
  return v8(v12, &STACK[0x760]);
}

uint64_t sub_18DA21F50()
{
  return v0();
}

uint64_t sub_18DA21F60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8 * ((1586 * (v4 == v6 + LODWORD(STACK[0x4A8]) - 947)) ^ (v5 + 326))))();
}

uint64_t sub_18DA21F94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t))(a4 + 8 * ((81 * (((LODWORD(STACK[0x4A8]) - 18) ^ (LODWORD(STACK[0x824]) == ((2 * LODWORD(STACK[0x4A8])) ^ 0xBCA5EBB1))) & 1)) ^ LODWORD(STACK[0x4A8]))))(a1, a2, 0x8E85997BF8A3092DLL, 0x5AC09C033F8B2761, 0x100000000000000, 0x8C088CF9E492148DLL, 0xEE8230AB6DD9F3EFLL, 4017028851);
}

uint64_t sub_18DA22050(uint64_t a1, uint64_t a2)
{
  LOBYTE(STACK[0x817]) = 11;
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (int)(((*(_DWORD *)(*(void *)(a2 + 152) - 0x134F8A86844134D2) == 291866047)
                                     * (v2 - 73 + ((v2 + 359130373) & 0xEA9819D1) - 326)) ^ (v2 + 119))))();
}

uint64_t sub_18DA22410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, uint64_t))(v4
                                                                                  + 8
                                                                                  * ((1082
                                                                                    * (v3 == ((((LODWORD(STACK[0x69C])
                                                                                               - 329) | 0x100)
                                                                                             - 122) ^ 0x6F2ABE94))) ^ (LODWORD(STACK[0x69C]) + 77))))(a1, &STACK[0x760], a3, v4);
}

uint64_t sub_18DA2245C@<X0>(uint64_t a1@<X3>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(a1 + 8 * (((((a2 + 63) | 0xA) + 405) * (v2 == 12)) ^ a2)))();
}

void sub_18DA22498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a2 + 560) = *(void *)(a4 + 8 * v4);
  JUMPOUT(0x18DA26C18);
}

uint64_t sub_18DA224D0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36)
{
  if (v36 == 1393700935)
  {
    uint64_t v39 = a2[19];
    LODWORD(STACK[0x72C]) = *(_DWORD *)(v39 - 0x134F8A868441351ELL) - 1394714680;
  }
  else
  {
    if (v36 != v38)
    {
      LODWORD(STACK[0x9BC]) = v36;
      a2[62] = a2[19];
      JUMPOUT(0x18DA2670CLL);
    }
    uint64_t v39 = a2[19];
    int v37 = STACK[0x69C];
  }
  uint64_t v40 = *(void *)(v39 - 0x134F8A868441352ELL);
  a2[69] = 0x24CC9A478416F3DCLL;
  a2[52] = 0x555194FDB6690FFBLL;
  return (*(uint64_t (**)(void))(a4 + 8 * (((v40 != 0x66FBF218A8091D0CLL) * (a36 ^ 0x36E)) ^ (v37 + 1161))))();
}

void sub_18DA225BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  *(void *)(a2 + 368) = *(void *)(a4 + 8 * a36);
  JUMPOUT(0x18DA225DCLL);
}

uint64_t sub_18DA22614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8 * (((v5 - 23) * (v4 == v6)) ^ (v5 + 756))))();
}

uint64_t sub_18DA2263C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a2 + 552) - 0x24CC9A478416F3C4);
  *(void *)(a2 + 168) = v5;
  return (*(uint64_t (**)(void))(a4 + 8 * (((v5 == 0) * (((v4 + 680) | 0x4C) - 1091)) ^ (v4 + 1794))))();
}

uint64_t sub_18DA226A8@<X0>(void *a1@<X1>, uint64_t a2@<X3>, int a3@<W8>)
{
  uint64_t v4 = v3 - 1508655795 + ((a3 + 220558608) & 0xF2DA87FB) - 362;
  a1[83] = v4;
  uint64_t v5 = a1[52];
  a1[84] = v5;
  return (*(uint64_t (**)(void))(a2 + 8 * ((711 * ((unint64_t)(0x555194FDB6690FFBLL - v5 + v4) > 9)) ^ a3)))();
}

void sub_18DA22724()
{
}

void sub_18DA22740()
{
  LOWORD(STACK[0x9C2]) = v0;
  JUMPOUT(0x18DA22750);
}

uint64_t sub_18DA22FDC()
{
  return (*(uint64_t (**)(void))(STACK[0x6C8] + 8 * (LODWORD(STACK[0x69C]) - 302)))();
}

uint64_t sub_18DA23580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LOWORD(STACK[0x9C6]) = v4;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(STACK[0x6C8] + 8 * (v5 - 190)))(a1, a2, a3, STACK[0x6C8]);
}

uint64_t sub_18DA23598()
{
  int v3 = STACK[0x69C];
  LODWORD(STACK[0x9DC]) = v2;
  unint64_t v4 = (v2 ^ 0xBCA5ECF7) + v0;
  STACK[0x9E0] = v4 + 10;
  v4 -= 0x1CAEFB3CC2F440B0;
  BOOL v5 = v4 < 0x92050282;
  BOOL v6 = v4 > STACK[0x6B0];
  if (v1 > 0xFFFFFFFF6DFAFD7DLL != v5) {
    BOOL v7 = v5;
  }
  else {
    BOOL v7 = v6;
  }
  return (*(uint64_t (**)(void))(STACK[0x6C8] + 8 * ((v3 + 359) ^ (47 * v7))))();
}

uint64_t sub_18DA23648(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (v5 == 15177) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(STACK[0x6C8]
  }
                                                                                  + 8 * (LODWORD(STACK[0x69C]) - 146)))(a1, a2, a3, STACK[0x6C8]);
  int v8 = STACK[0x69C];
  if (v5 == 10427)
  {
    uint64_t v9 = v8 ^ 0x94Cu;
    int v10 = (unsigned __int8 *)(((v9 + 0x72D7DFFFDABD67D9) ^ STACK[0x440])
                            + ((2 * STACK[0x440]) & 0xE5AFBFFFB57ADFFELL)
                            + STACK[0x930]
                            - 0x72D7DFFFDABD6FFFLL);
    uint64_t v11 = __ROR8__(v10, 8);
    unint64_t v12 = (0x550C087CC469144DLL - (v11 & 0xF8FFFFFFFFFFFFFFLL)) & 0x6D58C0DD51B9DC83 | ((v11 & 0xF8FFFFFFFFFFFFFFLL)
                                                                                        + v7) & 0x90A73F22AE46237CLL;
    uint64_t v13 = __ROR8__(v12 ^ 0xD6D3C27800389A2FLL, 8);
    v12 ^= 0x814C7E61DC8FC7BALL;
    uint64_t v14 = (v13 + v12) ^ 0x50D4D0E13CBD7177;
    uint64_t v15 = v14 ^ __ROR8__(v12, 61);
    uint64_t v16 = __ROR8__(v14, 8);
    unint64_t v17 = (v16 + v15 - ((2 * (v16 + v15)) & 0xBF31C9DC1592A16CLL) - 0x20671B11F536AF4ALL) ^ 0x3A4F3E40E74CF3B6;
    unint64_t v18 = v17 ^ __ROR8__(v15, 61);
    unint64_t v19 = (__ROR8__(v17, 8) + v18) ^ 0x8E85997BF8A3092DLL;
    unint64_t v20 = v19 ^ __ROR8__(v18, 61);
    unint64_t v21 = (__ROR8__(v19, 8) + v20) ^ 0xCD091F17C02FDE51;
    unint64_t v22 = v21 ^ __ROR8__(v20, 61);
    uint64_t v23 = __ROR8__(v21, 8);
    uint64_t v24 = __ROR8__((-2 - ((~(v23 + v22) | 0x804285D7227EE46) + ((v23 + v22) | 0xF7FBD7A28DD811B9))) ^ 0x6A8E940FFB6C0924, 8);
    unint64_t v25 = (-2 - ((~(v23 + v22) | 0x804285D7227EE46) + ((v23 + v22) | 0xF7FBD7A28DD811B9))) ^ 0x6A8E940FFB6C0924 ^ __ROR8__(v22, 61);
    uint64_t v26 = (__ROR8__(v10 + 1, 8) & 0xF8FFFFFFFFFFFFFFLL) + v7;
    uint64_t v27 = __ROR8__(v26 ^ 0xB98B02A5518146ACLL, 8);
    v26 ^= 0xEE14BEBC8D361B39;
    uint64_t v28 = (v27 + v26) ^ 0x50D4D0E13CBD7177;
    uint64_t v29 = v28 ^ __ROR8__(v26, 61);
    uint64_t v30 = __ROR8__(v28, 8) + v29;
    unint64_t v31 = v30 ^ 0xE5D7DAAEED85A300 ^ __ROR8__(v29, 61);
    *((void *)&v32 + 1) = v30;
    *(void *)&long long v32 = v30 ^ 0xE5D7DAAEED85A300;
    uint64_t v33 = ((v32 >> 8) + v31) ^ 0x8E85997BF8A3092DLL;
    uint64_t v34 = v33 ^ __ROR8__(v31, 61);
    unint64_t v35 = (__ROR8__(v33, 8) + v34) ^ 0xCD091F17C02FDE51;
    uint64_t v36 = __ROR8__(v35, 8);
    unint64_t v37 = v35 ^ __ROR8__(v34, 61);
    unint64_t v38 = (((v36 + v37) | 0xF2D730B72DD0B633) - ((v36 + v37) | 0xD28CF48D22F49CCLL) + 0xD28CF48D22F49CCLL) ^ 0x905D8CE5A49B5151;
    unint64_t v39 = v38 ^ __ROR8__(v37, 61);
    uint64_t v40 = (((__ROR8__((v24 + v25) ^ 0x5AC09C033F8B2761, 8)
                         + ((v24 + v25) ^ 0x5AC09C033F8B2761 ^ __ROR8__(v25, 61))) ^ 0x1B0BD1982B59C071) >> (8 * (v10 & 7u))) ^ *v10;
    uint64_t v41 = (__ROR8__(v38, 8) + v39) ^ 0x5AC09C033F8B2761;
    uint64_t v42 = (((__ROR8__(v41, 8) + (v41 ^ __ROR8__(v39, 61))) ^ 0x1B0BD1982B59C071uLL) >> (8 * (((_BYTE)v10 + 1) & 7u))) ^ v10[1];
    unint64_t v43 = (v7 + ((unint64_t)(v10 + 2) >> 8) + ((unint64_t)(v10 + 2) >> 3 << 59)) & 0xF9FFFFFFFFFFFFFFLL;
    unint64_t v44 = v43 ^ 0xBB8B02A5518146ACLL;
    v43 ^= 0xEC14BEBC8D361B39;
    uint64_t v45 = (__ROR8__(v44, 8) + v43) ^ 0x50D4D0E13CBD7177;
    uint64_t v46 = v45 ^ __ROR8__(v43, 61);
    *(void *)&long long v32 = __ROR8__(v45, 8);
    unint64_t v47 = (-2 - ((~(v32 + v46) | 0x57E552689E69D8BALL) + ((v32 + v46) | 0xA81AAD9761962745))) ^ 0xB23288C673EC7BBALL;
    unint64_t v48 = v47 ^ __ROR8__(v46, 61);
    unint64_t v49 = (__ROR8__(v47, 8) + v48) ^ 0x8E85997BF8A3092DLL;
    unint64_t v50 = v49 ^ __ROR8__(v48, 61);
    unint64_t v51 = (__ROR8__(v49, 8) + v50) ^ 0xCD091F17C02FDE51;
    unint64_t v52 = v51 ^ __ROR8__(v50, 61);
    uint64_t v53 = (__ROR8__(v51, 8) + v52) ^ 0x628ABC52894BE762;
    uint64_t v54 = v53 ^ __ROR8__(v52, 61);
    uint64_t v55 = (__ROR8__(v53, 8) + v54) ^ 0x5AC09C033F8B2761;
    *(void *)&long long v32 = __ROR8__(v10 + 3, 8);
    unint64_t v56 = -2
        - (((0x50C087CC469144DLL - (v32 & 0xF8FFFFFFFFFFFFFFLL)) | 0xF6365F3F438ED2E7)
         + (((v32 & 0xF8FFFFFFFFFFFFFFLL) + v7) | 0x9C9A0C0BC712D18));
    uint64_t v57 = (__ROR8__(v56 ^ 0x4FBD5D9A120F944BLL, 8) + (v56 ^ 0x1822E183CEB8C9DELL)) ^ 0x50D4D0E13CBD7177;
    *((void *)&v32 + 1) = v56 ^ 0x1822E183CEB8C9DELL;
    *(void *)&long long v32 = v56;
    uint64_t v58 = v57 ^ (v32 >> 61);
    uint64_t v59 = __ROR8__(v57, 8) + v58;
    unint64_t v60 = v59 ^ 0xE5D7DAAEED85A300 ^ __ROR8__(v58, 61);
    *((void *)&v32 + 1) = v59;
    *(void *)&long long v32 = v59 ^ 0xE5D7DAAEED85A300;
    uint64_t v61 = ((((v32 >> 8) + v60) | 0x7B035412CF657581)
         - (((v32 >> 8) + v60) | 0x84FCABED309A8A7ELL)
         - 0x7B035412CF657582) ^ 0xF586CD6937C67CACLL;
    uint64_t v62 = v61 ^ __ROR8__(v60, 61);
    uint64_t v63 = (((__ROR8__(v55, 8) + (v55 ^ __ROR8__(v54, 61))) ^ 0x1B0BD1982B59C071uLL) >> (8 * (((((v8 ^ 0x4C) - 39) ^ LOBYTE(STACK[0x440])) + 2 * LOBYTE(STACK[0x440]) + LOBYTE(STACK[0x930]) + 1 + 2) & 7u))) ^ v10[2];
    unint64_t v64 = (__ROR8__(v61, 8) + v62) ^ 0xCD091F17C02FDE51;
    unint64_t v65 = v64 ^ __ROR8__(v62, 61);
    *(void *)&long long v32 = __ROR8__(v64, 8);
    unint64_t v66 = (v32 + v65 - ((2 * (v32 + v65)) & 0xF9C9A3A39E27D0B4) - 0x31B2E2E30EC17A6) ^ 0x9E6E6D8346580F38;
    unint64_t v67 = v66 ^ __ROR8__(v65, 61);
    uint64_t v68 = (__ROR8__(v66, 8) + v67) ^ 0x5AC09C033F8B2761;
    uint64_t v69 = v68 ^ __ROR8__(v67, 61);
    *(void *)&long long v32 = __ROR8__(v68, 8);
    uint64_t v70 = ((((void)v32
                            + v69
                            - ((2 * ((void)v32 + v69)) & 0xAB80E26214ED7F8ELL)
                            + 0x55C071310A76BFC7) ^ 0x4ECBA0A9212F7FB6) >> (8
                                                                              * (((((v8 ^ 0x4C) - 39) ^ LOBYTE(STACK[0x440]))
                                                                                + 2 * LOBYTE(STACK[0x440])
                                                                                + LOBYTE(STACK[0x930])
                                                                                + 1
                                                                                + 3) & 7u))) ^ v10[3];
    uint64_t v71 = (__ROR8__(v10 + 4, 8) & 0xF8FFFFFFFFFFFFFFLL) + v7;
    *(void *)&long long v32 = __ROR8__(v71 ^ 0xB98B02A5518146ACLL, 8);
    v71 ^= 0xEE14BEBC8D361B39;
    uint64_t v72 = (v32 + v71) ^ 0x50D4D0E13CBD7177;
    uint64_t v73 = v72 ^ __ROR8__(v71, 61);
    uint64_t v74 = __ROR8__(v72, 8) + v73;
    unint64_t v75 = v74 ^ 0xE5D7DAAEED85A300 ^ __ROR8__(v73, 61);
    *((void *)&v32 + 1) = v74;
    *(void *)&long long v32 = v74 ^ 0xE5D7DAAEED85A300;
    uint64_t v76 = ((v32 >> 8) + v75) ^ 0x8E85997BF8A3092DLL;
    uint64_t v77 = v76 ^ __ROR8__(v75, 61);
    unint64_t v78 = (__ROR8__(v76, 8) + v77) ^ 0xCD091F17C02FDE51;
    unint64_t v79 = v78 ^ __ROR8__(v77, 61);
    *(void *)&long long v32 = __ROR8__(v78, 8);
    unint64_t v80 = (v32 + v79 - ((2 * (v32 + v79)) & 0x45C2F047781F7AAALL) - 0x5D1E87DC43F042ABLL) ^ 0xC06BC47135445A37;
    unint64_t v81 = v80 ^ __ROR8__(v79, 61);
    *(void *)&long long v32 = __ROR8__(v80, 8);
    LOBYTE(v81) = (((__ROR8__((((2 * (v32 + v81)) | 0xF51FB2659BA320F0) - (v32 + v81) - 0x7A8FD932CDD19078) ^ 0x204F4531F25AB719, 8)+ ((((2 * ((void)v32 + v81)) | 0xF51FB2659BA320F0) - ((void)v32 + v81) - 0x7A8FD932CDD19078) ^ 0x204F4531F25AB719 ^ __ROR8__(v81, 61))) ^ 0x1B0BD1982B59C071) >> (8 * (((_BYTE)v10 + 4) & 7u))) ^ v10[4];
    unint64_t v82 = (v7 + ((unint64_t)(v10 + 5) >> 8) + ((unint64_t)(v10 + 5) >> 3 << 59)) ^ 0xBCD1C31E1563D42DLL;
    uint64_t v83 = ((2 * v82) & 0x4259928A4907A5C2) - v82 - 0x212CC9452483D2E2;
    unint64_t v84 = v83 ^ 0xDB89F7019F9EBF9FLL;
    v83 ^= 0x8C164B184329E20ALL;
    uint64_t v85 = (__ROR8__(v84, 8) + v83) ^ 0x50D4D0E13CBD7177;
    uint64_t v86 = v85 ^ __ROR8__(v83, 61);
    *((void *)&v32 + 1) = __ROR8__(v85, 8) + v86;
    *(void *)&long long v32 = *((void *)&v32 + 1) ^ 0xE5D7DAAEED85A300;
    uint64_t v87 = v32 >> 8;
    *(void *)&long long v32 = __ROR8__(v86, 61);
    unint64_t v88 = (v87 + (*((void *)&v32 + 1) ^ 0xE5D7DAAEED85A300 ^ v32)) ^ 0x8E85997BF8A3092DLL;
    unint64_t v89 = v88 ^ __ROR8__(*((void *)&v32 + 1) ^ 0xE5D7DAAEED85A300 ^ v32, 61);
    *(void *)&long long v32 = __ROR8__(v88, 8);
    unint64_t v90 = (v32 + v89 - ((2 * (v32 + v89)) & 0xBE1FB406A5DAE47ELL) + 0x5F0FDA0352ED723FLL) ^ 0x9206C51492C2AC6ELL;
    unint64_t v91 = v90 ^ __ROR8__(v89, 61);
    uint64_t v92 = (__ROR8__(v90, 8) + v91) ^ 0x628ABC52894BE762;
    uint64_t v93 = v92 ^ __ROR8__(v91, 61);
    uint64_t v94 = (__ROR8__(v92, 8) + v93) ^ 0x5AC09C033F8B2761;
    LOBYTE(v55) = (((__ROR8__(v94, 8) + (v94 ^ __ROR8__(v93, 61))) ^ 0x1B0BD1982B59C071uLL) >> (8
                                                                                              * (((_BYTE)v10 + 5) & 7u))) ^ v10[5];
    *(void *)&long long v32 = __ROR8__(v10 + 6, 8);
    unint64_t v95 = ((2 * (v32 & 0xF8FFFFFFFFFFFFFFLL) + 0x15E7EF06772DD764) & 0x368D032D488F29C8)
        - (v32 & 0xF8FFFFFFFFFFFFFFLL)
        + 0x39C586E620217F69;
    *(void *)&long long v32 = __ROR8__(v95 ^ 0x5D327CCC0A392DB7, 8);
    uint64_t v96 = (v32
         + (v95 ^ 0xAADC0D5D68E7022)
         - ((2 * (v32 + (v95 ^ 0xAADC0D5D68E7022))) & 0x125A433765E8101ALL)
         + 0x92D219BB2F4080DLL) ^ 0x59F9F17A8E49797ALL;
    *((void *)&v32 + 1) = v95 ^ 0xAADC0D5D68E7022;
    *(void *)&long long v32 = v95;
    uint64_t v97 = v96 ^ (v32 >> 61);
    uint64_t v98 = __ROR8__(v96, 8) + v97;
    unint64_t v99 = v98 ^ 0xE5D7DAAEED85A300 ^ __ROR8__(v97, 61);
    *((void *)&v32 + 1) = v98;
    *(void *)&long long v32 = v98 ^ 0xE5D7DAAEED85A300;
    uint64_t v100 = (-2 - ((~((v32 >> 8) + v99) | 0x9ADC11E2E4291B51) + (((v32 >> 8) + v99) | 0x6523EE1D1BD6E4AELL))) ^ 0x145988991C8A127CLL;
    uint64_t v101 = v100 ^ __ROR8__(v99, 61);
    *(void *)&long long v32 = __ROR8__(v100, 8);
    unint64_t v102 = (v32 + v101 - ((2 * (v32 + v101)) & 0xBD3B0579B2491BDCLL) + 0x5E9D82BCD9248DEELL) ^ 0x93949DAB190B53BFLL;
    unint64_t v103 = v102 ^ __ROR8__(v101, 61);
    *(void *)&long long v32 = __ROR8__(v102, 8);
    unint64_t v104 = (((2 * (v32 + v103)) | 0xE7D00DB1F414AA32) - (v32 + v103) - 0x73E806D8FA0A5519) ^ 0x1162BA8A7341B27BLL;
    unint64_t v105 = v104 ^ __ROR8__(v103, 61);
    *(void *)&long long v32 = __ROR8__(v104, 8);
    unint64_t v106 = (((v32 + v105) | 0x70440A8D7607DE20) - ((v32 + v105) | 0x8FBBF57289F821DFLL) - 0x70440A8D7607DE21) ^ 0x2A84968E498CF941;
    unint64_t v107 = v106 ^ __ROR8__(v105, 61);
    *(void *)&long long v32 = __ROR8__(v106, 8);
    LOBYTE(v69) = ((((void)v32 + v107 - ((2 * ((void)v32 + v107)) & 0x8C8E5FF84B6B23BALL) + 0x46472FFC25B591DDLL) ^ 0x5D4CFE640EEC51ACLL) >> (8 * (((_BYTE)v10 + 6) & 7u))) ^ v10[6];
    unsigned __int8 v108 = v10[7];
    v10 += 7;
    *(void *)&long long v32 = __ROR8__(v10, 8);
    unint64_t v109 = ((2 * (v32 & 0xF8FFFFFFFFFFFFFFLL) + 0x55E7EF06772DD764) & 0x47587F0B6C5A8D60)
         - (v32 & 0xF8FFFFFFFFFFFFFFLL)
         - 0x4EA03708F1C43263;
    *(void *)&long long v32 = __ROR8__(v109 ^ 0xE5D8C2DF1853FFE3, 8);
    v109 ^= 0xB2477EC6C4E4A276;
    unint64_t v110 = (-2 - ((~(v32 + v109) | 0x19395237254158A4) + ((v32 + v109) | 0xE6C6ADC8DABEA75BLL))) ^ 0x49ED82D619FC29D3;
    unint64_t v111 = v110 ^ __ROR8__(v109, 61);
    unint64_t v112 = __ROR8__(v110, 8) + v111;
    unint64_t v113 = v112 ^ 0xE5D7DAAEED85A300 ^ __ROR8__(v111, 61);
    *((void *)&v32 + 1) = v112;
    *(void *)&long long v32 = v112 ^ 0xE5D7DAAEED85A300;
    uint64_t v114 = (-2 - ((~((v32 >> 8) + v113) | 0xA773C67B5550DD47) + (((v32 >> 8) + v113) | 0x588C3984AAAF22B8))) ^ 0x29F65F00ADF3D46ALL;
    uint64_t v115 = v114 ^ __ROR8__(v113, 61);
    *(void *)&long long v32 = __ROR8__(v114, 8);
    unint64_t v116 = ((v32 + v115) | 0x1DE0D5E255628951) - ((v32 + v115) | 0xE21F2A1DAA9D76AELL) - 0x1DE0D5E255628952;
    a4 = STACK[0x6C8];
    unint64_t v117 = v116 ^ 0xD0E9CAF5954D5700 ^ __ROR8__(v115, 61);
    *((void *)&v32 + 1) = v116;
    *(void *)&long long v32 = v116 ^ 0xD0E9CAF5954D5700;
    uint64_t v118 = (((2 * ((v32 >> 8) + v117)) | 0x373D31C018B76C7ALL) - ((v32 >> 8) + v117) - 0x1B9E98E00C5BB63DLL) ^ 0x791424B28510515FLL;
    uint64_t v119 = v118 ^ __ROR8__(v117, 61);
    *(void *)&long long v32 = __ROR8__(v118, 8);
    unint64_t v120 = __ROR8__((v32 + v119 - ((2 * (v32 + v119)) & 0xAED1B05E025C741ALL) + 0x5768D82F012E3A0DLL) ^ 0xDA8442C3EA51D6CLL, 8)+ ((v32 + v119 - ((2 * (v32 + v119)) & 0xAED1B05E025C741ALL) + 0x5768D82F012E3A0DLL) ^ 0xDA8442C3EA51D6CLL ^ __ROR8__(v119, 61));
    unint64_t v121 = (v42 << 48) | (v40 << 56) | (v63 << 40) | (v70 << 32) | ((unint64_t)v81 << 24) | ((unint64_t)v55 << 16) | ((unint64_t)v69 << 8) | ((((-2 - ((~v120 | 0xED304401E107ADA2) + (v120 | 0x12CFBBFE1EF8525DLL))) ^ 0xF63B9599CA5E6DD3) >> (8 * (v10 & 7u))) ^ v108);
    STACK[0x798] = v121 - ((2 * v121) & 0x263EC2A8D33D6BB6) + 0x131F6154699EB5DBLL;
  }
  else
  {
    if (v5 != 64741)
    {
      LODWORD(STACK[0x830]) = v6;
      STACK[0x818] = STACK[0x720];
      STACK[0x7C8] = *(void *)(a4 + 8 * (v8 - 290));
      JUMPOUT(0x18DA26788);
    }
    LODWORD(v9) = (LODWORD(STACK[0x69C]) + 1686) | 0x26;
    STACK[0x978] = STACK[0x930] + STACK[0x440];
  }
  STACK[0x788] = STACK[0x9E0];
  BOOL v123 = LODWORD(STACK[0x9D4]) == -1129976585 && LOWORD(STACK[0x9DA]) == 64741;
  return (*(uint64_t (**)(void))(a4 + 8 * (int)((67 * ((((v9 ^ 0xBB) - 42) ^ v123) & 1)) ^ v9)))();
}

uint64_t sub_18DA23670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LOWORD(STACK[0x9C4]) = v4;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(STACK[0x6C8] + 8 * (v5 - 147)))(a1, a2, a3, STACK[0x6C8]);
}

uint64_t sub_18DA23684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LOWORD(STACK[0x9D0]) = v4;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(STACK[0x6C8] + 8 * (v5 - 250)))(a1, a2, a3, STACK[0x6C8]);
}

uint64_t sub_18DA23698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LOWORD(STACK[0x9D2]) = v4;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(STACK[0x6C8] + 8 * (v5 - 174)))(a1, a2, a3, STACK[0x6C8]);
}

uint64_t sub_18DA236AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LOWORD(STACK[0x9DA]) = v4;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(STACK[0x6C8] + 8 * (v5 - 144)))(a1, a2, a3, STACK[0x6C8]);
}

uint64_t sub_18DA23734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20)
{
  return (*(uint64_t (**)(void))(a4
                              + 8
                              * (((((LODWORD(STACK[0x69C]) - 74) | 0x610) + a20 - 3449) * (v20 == LODWORD(STACK[0xA6C]))) ^ (LODWORD(STACK[0x69C]) + 1796))))();
}

uint64_t sub_18DA237A4@<X0>(uint64_t a1@<X1>, int a2@<W8>)
{
  int v3 = a2 + 176;
  uint64_t v4 = *(void *)(v2 - 0x24CC9A478416F3DCLL);
  *(void *)(a1 + 32) = v4;
  return (*(uint64_t (**)(void))(STACK[0x6C8]
                              + 8
                              * ((((v3 ^ 0x23 ^ (v4 == 0x24CC9A478416F3DCLL)) & 1)
                                * ((v3 - 1669734569) & 0x63861FFB ^ 0x730)) ^ v3)))();
}

void sub_18DA237D0()
{
  LODWORD(STACK[0x834]) = v0;
  JUMPOUT(0x18DA237F4);
}

uint64_t sub_18DA23830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22)
{
  *(_DWORD *)(*(void *)(a7 + 384) - 0x36533D3AA39D2B8DLL) = (((a22 - 379) | 0x100) - 1129976947) ^ LODWORD(STACK[0x834]);
  return (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, unint64_t))(a7 + 560))(a1, &STACK[0x760], a3, STACK[0x6C8]);
}

uint64_t sub_18DA23878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = STACK[0xA00] + (v4 ^ 0xBCA5ECF7) - 0x555194FD339DC2E2;
  BOOL v6 = v5 < 0x82CB4D0F;
  BOOL v7 = v5 > STACK[0x9F8] + 2194361615u;
  if (STACK[0x9F8] > 0xFFFFFFFF7D34B2F0 != v6) {
    BOOL v7 = v6;
  }
  return (*(uint64_t (**)(void))(a4 + 8 * ((502 * !v7) ^ (LODWORD(STACK[0x69C]) + 911))))();
}

uint64_t sub_18DA23934@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v7 = v3 + 10;
  int v8 = LOWORD(STACK[0x9C4]);
  if (v8 == 10427) {
    goto LABEL_4;
  }
  if (v8 == 64741)
  {
    uint64_t v10 = *(void *)(a1 + 168);
    *(void *)(a1 + 416) = v7;
    LODWORD(STACK[0x8B8]) = v4;
    STACK[0x6F8] = v10 + a3 - 0x555194FDB6690FF1;
    int v9 = v6;
    int v5 = -1393729084;
    return (*(uint64_t (**)(void))(a2 + 8
                                     * ((1284 * (v5 == ((v9 + 667118995) & 0xD83C97D7) - 1393730833)) ^ (v9 + 168))))();
  }
  int v9 = v6;
  if (v8 == 15177)
  {
LABEL_4:
    *(void *)(a1 + 416) = v7;
    LODWORD(STACK[0x8B8]) = v4;
    int v5 = 1393700934;
    int v9 = v6;
  }
  return (*(uint64_t (**)(void))(a2 + 8 * ((1284 * (v5 == ((v9 + 667118995) & 0xD83C97D7) - 1393730833)) ^ (v9 + 168))))();
}

uint64_t sub_18DA23980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = STACK[0xA10] + (v4 ^ 0xBCA5ECF7) - 0x604C1CD8442CC219;
  BOOL v6 = v5 < 0x18308D7C;
  BOOL v7 = v5 > STACK[0xA08] + 405835132;
  if (STACK[0xA08] > 0xFFFFFFFFE7CF7283 != v6) {
    BOOL v7 = v6;
  }
  return (*(uint64_t (**)(void))(a4 + 8 * ((169 * v7) ^ (LODWORD(STACK[0x69C]) + 1280))))();
}

uint64_t sub_18DA23A48@<X0>(void *a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6 = v3 + 10;
  int v7 = LOWORD(STACK[0x9D0]);
  if (v7 == 10427) {
    goto LABEL_4;
  }
  if (v7 != 64741)
  {
    if (v7 != 15177)
    {
LABEL_6:
      LODWORD(STACK[0x9BC]) = v5;
      JUMPOUT(0x18DA225F0);
    }
LABEL_4:
    a1[74] = v6;
    int v5 = 1393700934;
    goto LABEL_6;
  }
  int v8 = STACK[0x69C];
  uint64_t v9 = a1[25];
  a1[74] = v6;
  uint64_t v10 = v9 + a3 - 0x604C1CD85C5D4F95;
  uint64_t v11 = *(void *)(a1[19] - 0x134F8A868441352ELL);
  a1[9] = v10;
  a1[47] = 0x24CC9A478416F3DCLL;
  a1[14] = 0x43A08B1300141366;
  return (*(uint64_t (**)(void))(a2 + 8 * (((v11 == v4) * (v8 - 352)) | (v8 + 1530))))();
}

void sub_18DA23B98()
{
  LODWORD(STACK[0x75C]) = v0;
  JUMPOUT(0x18DA248FCLL);
}

uint64_t sub_18DA24964(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  int v9 = STACK[0x9DC];
  STACK[0x730] = v4;
  LODWORD(STACK[0xA38]) = v7;
  LOWORD(STACK[0xA3E]) = v6;
  LODWORD(STACK[0x6B0]) = v9;
  LODWORD(STACK[0xA40]) = v9;
  int v10 = STACK[0x75C];
  LODWORD(STACK[0x540]) = STACK[0x75C];
  LODWORD(STACK[0xA44]) = v10;
  a2[93] = a2[7];
  a2[63] = a2[67];
  return (*(uint64_t (**)(void))(a4 + 8 * ((((v5 ^ 0x671) + 1019 + 181 * (v5 ^ 0x671) - 1178) * (v4 != v8)) ^ v5)))();
}

uint64_t sub_18DA249D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  LODWORD(STACK[0x6A0]) = v4;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(a4 + 8 * (v5 + 1188)))(32);
  unint64_t v7 = STACK[0x6C8];
  STACK[0x908] = v6 + 0x24CC9A478416F3DCLL;
  return (*(uint64_t (**)(void))(v7 + 8 * ((2028 * (((v5 + 109) ^ 0x8F ^ (v6 == 0)) & 1)) ^ v5)))();
}

uint64_t sub_18DA24A54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = 0x24CC9A478416F3DCLL;
  *(void *)(a1 + 8) = 0x24CC9A478416F3DCLL;
  unint64_t v6 = LODWORD(STACK[0x6B0]) ^ 0xBCA5ECF7;
  STACK[0xA50] = v6;
  LODWORD(v6) = ((2 * (v6 + 10)) & 0xFFDBA566)
              + 1509847040
              + (((v4 ^ 0x18F) - 1191844 + ((v4 - 157) | 0xA5)) ^ (v6 + 10));
  *(_DWORD *)(a1 + 16) = v6;
  uint64_t v7 = (*(uint64_t (**)(void))(a4 + 8 * (v4 ^ 0x844)))((v6 - 1508655795));
  unint64_t v8 = STACK[0x6C8];
  *(void *)(a1 + 24) = v7;
  return (*(uint64_t (**)(void))(v8 + 8 * ((466 * (v7 != 0)) ^ v4)))();
}

void sub_18DA24B30()
{
}

void sub_18DA24B50(uint64_t a1, uint64_t a2)
{
  LODWORD(STACK[0x830]) = -1393729084;
  **(void **)(a2 + 528) = v2;
  JUMPOUT(0x18DA2637CLL);
}

uint64_t sub_18DA24C18@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, int a3@<W8>)
{
  BOOL v4 = (((a3 + 1054707925) ^ ((a3 ^ 0xE91) + 103)) & *(unsigned __int8 *)(*(void *)(a1 + 152) - 0x134F8A86844134B2)) == 0
    && LODWORD(STACK[0x72C]) != 0;
  return (*(uint64_t (**)(void))(a2 + 8 * ((2 * v4) | (8 * v4) | a3)))();
}

uint64_t sub_18DA24C74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(v5 - 0x134F8A868441352ELL);
  *(void *)(a2 + 304) = 0x24CC9A478416F3DCLL;
  *(void *)(a2 + 592) = 0x604C1CD85C5D4F9FLL;
  return (*(uint64_t (**)(void))(a4
                              + 8
                              * (int)((7
                                     * (((((((v4 & 0xC1226FFF) - 1396239788) & 0x5338E76B) - 240) ^ (v7 == v6)) & 1) == 0)) ^ v4 & 0xC1226FFF)))();
}

uint64_t sub_18DA24D0C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  *(void *)(a1 + 368) = *(void *)(a2 + 8 * v12);
  LODWORD(STACK[0xA6C]) = 1167627719;
  *(void *)(a1 + 784) = a12;
  BOOL v14 = a12 == 0x1E34DA578D8F45CBLL || a3 == 0x66FBF218A8091D0CLL;
  return (*(uint64_t (**)(void))(a2
                              + 8
                              * ((v14 * ((((v12 + 1462) | 0x100) - 1558) ^ (2 * ((v12 + 1958) ^ 0x895)))) ^ (v12 + 1958))))();
}

uint64_t sub_18DA24D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v8 = (v5 & 1) == 0 || v6 == 0;
  return (*(uint64_t (**)(void))(a4 + 8 * (int)((v8 * (((v4 + 383712699) & 0xE920FEEE ^ 0xFFFFFFC3) + v4 - 854)) ^ v4)))();
}

uint64_t sub_18DA24D90(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  a2[66] = v5 - 0x134F8A8684413526;
  unint64_t v7 = STACK[0x6F8];
  LODWORD(STACK[0x6F4]) = STACK[0x8B8];
  STACK[0x748] = v7;
  a2[5] = 0x1CAEFB3D54F9433CLL;
  LODWORD(STACK[0x75C]) = -1129976585;
  a2[7] = 0x131F6154699EB5DBLL;
  a2[67] = 0;
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(a4 + 8 * (v4 + 947)))(16);
  STACK[0x720] = v9 + v6;
  return (*(uint64_t (**)(void))(a4 + 8 * (((v9 != 0) * (((v4 + 306) ^ 0x74A) + 138)) ^ v4)))();
}

uint64_t sub_18DA24E60(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7 = (v6 + 1107919322) & 0xBDF67BEF;
  *a1 = 0x24CC9A478416F3DCLL;
  a1[1] = 0x24CC9A478416F3DCLL;
  BOOL v9 = v5 - 0x1CAEFB3CE2526F9ELL > (v7 ^ 0x72A6D077uLL)
    && v5 - 0x1CAEFB3CE2526F9ELL < (unint64_t)((((v7 - 505) | 0x208) - 1129977602) ^ v4) + 1923535774;
  return (*(uint64_t (**)(void))(a4 + 8 * (int)((2011 * v9) ^ v7)))();
}

void sub_18DA24F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a2 + 368) = *(void *)(a4 + 8 * (LODWORD(STACK[0x69C]) - 256));
  JUMPOUT(0x18DA24D38);
}

uint64_t sub_18DA24FD0@<X0>(void *a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  int v11 = 228215629 * ((v10 - 1568108447 - 2 * ((v10 - 232) & 0xA2889149)) ^ 0x9A37E11C);
  *(_DWORD *)(v10 - 192) = v11 + (v7 ^ 0x77F38F7F) + ((2 * v7) & 0xEFE71EFE) - 1075841312;
  *(_DWORD *)(v10 - 216) = v11 + v8 + 643;
  *(_DWORD *)(v10 - 176) = v11
                         + (v5 ^ 0xC6421B54)
                         + ((v5 << ((v8 - 76) ^ 0xD4)) & ((v8 ^ 0x4B) - 170922532) ^ 0x714BC946)
                         - 1074167810;
  a1[138] = a3;
  a1[139] = v3;
  a1[141] = a3;
  a1[136] = v6 + v4 - 0x43A08B130014135CLL;
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(a2 + 8 * (v8 ^ 0x99C)))(v10 - 232);
  return (*(uint64_t (**)(uint64_t, unint64_t *))(STACK[0x6C8]
                                                                + 8 * ((1189 * (*(_DWORD *)(v10 - 232) == v9)) ^ v8)))(v12, &STACK[0x760]);
}

uint64_t sub_18DA2511C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7 = (*(unsigned char *)(v4 - 0x134F8A86844134B2) & 1) == 0 || LODWORD(STACK[0x72C]) == 0;
  return (*(uint64_t (**)(void))(a4
                              + 8
                              * (int)((v7
                                     * (((((v5 - 1685) | 0x804) + 383712699) & 0xE920FEEE ^ 0xFFFFFFC3)
                                      + ((v5 - 1685) | 0x804)
                                      - 854)) ^ ((v5 - 1685) | 0x804))))();
}

uint64_t sub_18DA25184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5 = *(uint64_t (**)(void))(a4
                           + 8
                           * (((((v4 + 17) ^ ((*(uint64_t (**)(uint64_t))(a4
                                                                                                  + 8 * (v4 ^ 0xC4F)))(16) == 0)) & 1)
                             * ((181 * (v4 ^ 0x4EC)) ^ 0x17B)) ^ v4));
  return v5();
}

void sub_18DA25204(void *a1, void *a2)
{
  *a1 = 0x24CC9A478416F3DCLL;
  a1[1] = 0x24CC9A478416F3DCLL;
  *(void *)(v2 - 0x134F8A8684413526) = (char *)a1 + v5;
  LODWORD(STACK[0x9BC]) = v4;
  uint64_t v6 = a2[19];
  a2[51] = v6;
  a2[1] += (202 * (v3 ^ 0x3F5u)) ^ 0xFFFFFFFFFFFFF804;
  LODWORD(STACK[0x844]) = STACK[0x73C];
  *(void *)STACK[0x3D8] = v6;
  JUMPOUT(0x18DA26490);
}

void sub_18DA25248(void *a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  int v8 = *(_DWORD *)(v6 - 0x134F8A86844134CALL) - 1044554143;
  int v9 = 1779465991 * (((v7 - 232) & 0xE511757 | ~((v7 - 232) | 0xE511757)) ^ 0xD76A6E66);
  int v10 = *(_DWORD *)(v6 - 0x134F8A86844134B6)
      - v9
      - 2
      * ((*(_DWORD *)(v6 - 0x134F8A86844134B6) + 20916812) & 0x2916813F ^ *(_DWORD *)(v6 - 0x134F8A86844134B6) & 3)
      + 710257544;
  *(_DWORD *)(v7 - 232) = ((v5 ^ 0xC05AA10C) - 73924608 + ((v5 << (((v4 + 127) | 0x28) - 105)) & 0xF9FE9BF6 ^ 0x794A99E6)) ^ v9;
  *(_DWORD *)(v7 - 228) = v9 + 1842385863;
  *(_DWORD *)(v7 - 208) = v4 - v9 + 1546667148;
  *(_DWORD *)(v7 - 204) = v10;
  a1[137] = a3;
  a1[140] = v6 + 0x30DDF0A613405420;
  a1[139] = v3;
  a1[136] = a3;
  *(_DWORD *)(v7 - 180) = v8 ^ v9;
  (*(void (**)(uint64_t))(a2 + 8 * (v4 + 447)))(v7 - 232);
  LODWORD(STACK[0x9BC]) = 1393700936;
  JUMPOUT(0x18DA225F0);
}

uint64_t sub_18DA253BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7 = v4 == (((v5 + 694) | 0xDB) ^ (v6 + 891));
  return (*(uint64_t (**)(void))(a4 + 8 * ((4 * v7) | (v7 << 10) | (v5 - 73))))();
}

uint64_t sub_18DA253F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a2 + 304) - 0x24CC9A478416F3C4);
  *(void *)(a2 + 200) = v5;
  return (*(uint64_t (**)(void))(a4 + 8 * (((v5 != 0) * ((2 * v4) ^ 0x89C ^ ((v4 ^ 0x238) - 1602))) ^ v4)))();
}

uint64_t sub_18DA25464@<X0>(void *a1@<X1>, uint64_t a2@<X3>, int a3@<W8>)
{
  uint64_t v4 = (v3 - 1508655795);
  a1[85] = v4;
  uint64_t v5 = a1[74];
  a1[86] = v5;
  return (*(uint64_t (**)(void))(a2
                              + 8
                              * ((269 * (v4 - v5 + 0x604C1CD85C5D4F9FLL > ((2 * a3) ^ 0xD8FuLL))) ^ a3)))();
}

void sub_18DA254D8()
{
}

uint64_t sub_18DA254F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8 * ((498 * (v4 == v6 + v5 + 1585 - 1947)) ^ (v5 + 168))))();
}

uint64_t sub_18DA25528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a2 + 376) - 0x24CC9A478416F3C4);
  *(void *)(a2 + 264) = v5;
  return (*(uint64_t (**)(void))(a4
                              + 8
                              * ((((v5 == 0) ^ (v4 - 83 + ((v4 - 83) ^ 0x69))) & 1 | (4 * (((v5 == 0) ^ (v4 - 83 + ((v4 - 83) ^ 0x69))) & 1))) ^ v4)))();
}

uint64_t sub_18DA2559C@<X0>(void *a1@<X1>, uint64_t a2@<X3>, int a3@<W8>)
{
  uint64_t v4 = (v3 - 1508655795);
  a1[87] = v4;
  uint64_t v5 = a1[14];
  a1[88] = v5;
  return (*(uint64_t (**)(void))(a2
                              + 8
                              * ((1444 * (v4 - v5 + 0x43A08B1300141366 > (((a3 - 225) | 0x12Au) ^ 0x163uLL))) ^ a3)))();
}

void sub_18DA2560C()
{
}

uint64_t sub_18DA256C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = STACK[0x748];
  *(void *)(a2 + 464) = STACK[0x748];
  return (*(uint64_t (**)(void))(a4
                              + 8
                              * (((((v5 == 0) ^ (-75 * (v4 ^ 0x65) + 1)) & 1)
                                * ((383 * (v4 ^ 0x465)) ^ 0x209)) ^ v4)))();
}

uint64_t sub_18DA2572C@<X0>(uint64_t a1@<X3>, unint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  STACK[0xA28] = a2;
  STACK[0xA30] = v8;
  return (*(uint64_t (**)(void))(a1 + 8
                                   * ((1637 * (a2 - v8 + (((v7 - 476) | 0x48u) ^ a7) < 0xFFFFFFFFFFFFFFF6)) ^ v7)))();
}

void sub_18DA25780()
{
  unint64_t v0 = STACK[0xA30];
  STACK[0x6B0] = STACK[0xA28] + 2449801858u;
  STACK[0x6A0] = ((v0 - 0x1CAEFB3D54F94338) ^ 0x7FAEDE6E78DAEF99)
               - 0x6A08100258D88888
               + ((2 * (v0 - 0x1CAEFB3D54F94338)) & 0xFF5DBCDCF1B5DF32);
  unint64_t v1 = STACK[0xA20] - 0x43A08B1300141362;
  STACK[0x540] = (v1 ^ 0xB5B7FE7DF9DBE7F7) + 0x5FEECFEE26267F1ALL + ((2 * v1) & 0x6B6FFCFBF3B7CFEELL);
  unint64_t v2 = STACK[0xA10] - 0x604C1CD85C5D4F9BLL;
  STACK[0x530] = (v2 ^ 0xD7AFDF7E6F5A7F3FLL) + 0x3DF6EEEDB0A7E7D2 + ((2 * v2) & 0xAF5FBEFCDEB4FE7ELL);
  unint64_t v3 = STACK[0xA60];
  STACK[0x520] = ((STACK[0xA60] - 0x6F654FD9E3543B0ELL) ^ 0x7DBFDEFEBECFE759)
               - 0x681910929ECD8048
               + ((2 * (STACK[0xA60] - 0x6F654FD9E3543B0ELL)) & 0xFB7FBDFD7D9FCEB2);
  unint64_t v4 = STACK[0xA00] - 0x555194FDB6690FF7;
  STACK[0x510] = (v4 ^ 0x17FFEF6C681B6FB3) - 0x2592100481908A2 + ((2 * v4) & 0x2FFFDED8D036DF66);
  unint64_t v5 = STACK[0x9F0] - 0x4860F2874C89E0E4;
  STACK[0x500] = (v5 ^ 0x15AFFF7D309777B9) - 0x93111109510A8 + ((2 * v5) & 0x2B5FFEFA612EEF72);
  STACK[0x4D0] = ((v0 - 0x1CAEFB3D54F94336) ^ 0xFFFFDF77BFF5AFFDLL)
               + 0x1799FEEFC5FBD748
               + ((2 * (v0 - 0x1CAEFB3D54F94336)) & 0xFFFFBEEF7FEB5FFALL);
  STACK[0x4C0] = ((v1 + 2) ^ 0xB7F9FE6FA5FDA747) + 0x5F9FDFF7DFF3DFFELL + ((2 * (v1 + 2)) & 0x6FF3FCDF4BFB4E8ELL);
  STACK[0x4B0] = ((v2 + 2) ^ 0x57D9DF778DF9D7F5) - 0x40400110080850B0 + ((2 * (v2 + 2)) & 0xAFB3BEEF1BF3AFEALL);
  STACK[0x490] = ((v4 + 2) ^ 0x17DDDEF7AFFBF7C5) - 0x4400902A0A7080 + ((2 * (v4 + 2)) & 0x2FBBBDEF5FF7EF8ALL);
  STACK[0x480] = ((v3 - 0x6F654FD9E3543B0CLL) ^ 0x57DFDEFFF7F3D775)
               - 0x4046009872025030
               + ((2 * (v3 - 0x6F654FD9E3543B0CLL)) & 0xAFBFBDFFEFE7AEEALL);
  STACK[0x470] = ((v5 + 2) ^ 0xDFFBDF7FCDFBBF77) + 0x379DFEE7B7F5C7CELL + ((2 * (v5 + 2)) & 0xBFF7BEFF9BF77EEELL);
  STACK[0x440] = v0 - 0x1CAEFB3D54F94332;
  STACK[0x460] = ((v0 - 0x1CAEFB3D54F94332) ^ 0x3FFDDFF7A5FF8F7FLL)
               - 0x28640190200E083ALL
               + ((2 * (v0 - 0x1CAEFB3D54F94332)) & 0x7FFBBFEF4BFF1EFELL);
  STACK[0x450] = ((v3 - 0x6F654FD9E3543B08) ^ 0x179BDF67DFF3CFEDLL)
               - 0x201005A0248A8
               + ((2 * (v3 - 0x6F654FD9E3543B08)) & 0x2F37BECFBFE79FDALL);
  JUMPOUT(0x18DA22750);
}

void sub_18DA257AC()
{
}

uint64_t sub_18DA25DC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4
                              + 8
                              * ((((((2 * v4) ^ 0x11FC) - 250230380) & 0xEEA37FE ^ 0x236) * (v5 == 0x24CC9A478416F3DCLL)) ^ v4)))();
}

uint64_t sub_18DA25E14@<X0>(uint64_t a1@<X3>, int a2@<W8>)
{
  int v4 = a2 ^ 0x90F;
  uint64_t v6 = (*(uint64_t (**)(void))(a1 + 8 * (a2 ^ 0x9E9)))();
  *unint64_t v2 = 0;
  return (*(uint64_t (**)(uint64_t))(a1
                                            + 8
                                            * ((((((2 * v4) ^ 0x11FC) - 250230380) & 0xEEA37FE ^ 0x236)
                                              * (v3 == 0x24CC9A478416F3DCLL)) ^ v4)))(v6);
}

void sub_18DA25E90(uint64_t a1@<X3>, int a2@<W8>)
{
  (*(void (**)(uint64_t))(a1 + 8 * (a2 + 1455)))(v2 - 0x24CC9A478416F3DCLL);
  JUMPOUT(0x18DA25EC0);
}

uint64_t sub_18DA263E4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  a2[19] = 0x134F8A868441352ELL;
  int v6 = STACK[0x9BC];
  a2[51] = 0x134F8A868441352ELL;
  a2[1] -= 32;
  return (*(uint64_t (**)(void))(a4 + 8 * ((515 * (v6 == ((v4 + 298) ^ (v5 + 396)))) ^ (v4 + 135))))();
}

void sub_18DA2643C()
{
}

uint64_t sub_18DA264D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(void))(a4 + 8 * (v5 + 577)))();
  STACK[0x858] = 0;
  return (*(uint64_t (**)(uint64_t))(a4
                                            + 8
                                            * (((((33 * ((v5 - 1065) ^ 0x261)) ^ 0x21) - 1084) * (v4 != 0)) ^ (33 * ((v5 - 1065) ^ 0x261)))))(v7);
}

uint64_t sub_18DA26554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = v4;
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(a4 + 8 * (v6 ^ 0xCE4)))(v7);
  return (*(uint64_t (**)(uint64_t))(a4 + 8 * (((v6 - 29 + v6 + 603 - 2812) * (v5 == 0)) ^ (v6 - 31))))(v9);
}

uint64_t sub_18DA265A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, unint64_t *))(a4
                                                                + 8
                                                                * (((v5 == v6 + ((2 * v4) ^ 0xC10) - 362)
                                                                  * ((101 * (v4 ^ 0x6BF)) ^ 0xAA)) ^ v4)))(a1, &STACK[0x760]);
}

uint64_t sub_18DA265FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8 * ((((v5 ^ 0x21) - 1084) * (v4 != 0)) ^ v5)))();
}

uint64_t sub_18DA26650@<X0>(uint64_t a1@<X3>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(a1 + 8 * (((a2 + 2 + a2 + 634 - 2812) * (v2 == 0)) ^ a2)))();
}

uint64_t sub_18DA2667C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = 25 * (v4 ^ 0x400);
  uint64_t v9 = v6;
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(a4 + 8 * (v4 ^ 0xCC3)))(v9);
  return (*(uint64_t (**)(uint64_t, unint64_t *))(a4
                                                                + 8
                                                                * (((v5 == v7 + ((2 * v8) ^ 0xC10) - 362)
                                                                  * ((101 * (v8 ^ 0x6BF)) ^ 0xAA)) ^ v8)))(v11, &STACK[0x760]);
}

void sub_18DA26700()
{
}

void sub_18DA26750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a2 + 104) = *(void *)(a4 + 8 * ((v4 ^ 0xD6) - 292));
  JUMPOUT(0x18DA26784);
}

uint64_t sub_18DA267CC@<X0>(uint64_t a1@<X3>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(a1
                              + 8
                              * (int)(((*(void *)(v2 - 0x53992AF8804337F1) == v3)
                                     * (((a2 - 911226416) & 0x3650359F)
                                      + ((a2 - 911226416) & 0x3650359F ^ 0xFFFFFB54)
                                      - 1068)) ^ (a2 - 911226416) & 0x3650359F)))();
}

uint64_t sub_18DA26828@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(a1
                              + 8
                              * (((*(void *)(a2 - 0x66FBF218A8091D0CLL) == 0x24CC9A478416F3DCLL)
                                * (v2 ^ 0x3F ^ ((v2 ^ 0x44A) + 1032635548) & 0x42733FFF)) ^ v2 ^ 0x44Au)))();
}

uint64_t sub_18DA268B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t))(a4 + 8 * (v7 ^ 0xFBC)))(v4);
  return (*(uint64_t (**)(uint64_t, unint64_t *))(v6
                                                                + 8
                                                                * (((((v7 - 1799) | 0x160) ^ 0x133)
                                                                  * (v5 != 0x53992AF8804337F1)) ^ v7)))(1, &STACK[0x760]);
}

uint64_t sub_18DA26954(uint64_t a1, uint64_t a2)
{
  *int v2 = v3;
  return (*(uint64_t (**)(void))(a2 + 104))();
}

void sub_18DA26964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a2 + 104) = *(void *)(a4 + 8 * (v4 - 304));
  JUMPOUT(0x18DA26794);
}

uint64_t sub_18DA26994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(a4 + 8 * ((v5 ^ 0x7A4) + 1745)))(v4);
  return (*(uint64_t (**)(uint64_t))(v6
                                            + 8
                                            * ((((v5 ^ 0x7A4) + 1180 + (v5 ^ 0x7A4) + 1333 - 2488)
                                              * (v7 == 0x24CC9A478416F3DCLL)) ^ v5 ^ 0x7A4)))(v8);
}

uint64_t sub_18DA26A08@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(a1
                              + 8
                              * (((*(void *)(a2 - 0x24CC9A478416F3C4) == 0) * (3 * (v2 ^ 0x6B2) - 359)) ^ v2)))();
}

void sub_18DA26A64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(void))(a4 + 8 * (v4 + 1615)))();
  *int v5 = 0;
  JUMPOUT(0x18DA2699CLL);
}

uint64_t sub_18DA26A90@<X0>(uint64_t (*a1)(void)@<X8>)
{
  return a1();
}

uint64_t sub_18DA26A9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4
                              + 8
                              * (int)((((((v4 - 105) | 0x244) ^ 0xFFFFF4F1) + ((v4 + 1703) | 0x48))
                                     * (LODWORD(STACK[0x7DC]) != v5)) ^ (v4 + 1227))))();
}

uint64_t sub_18DA26AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8 * (((LODWORD(STACK[0x844]) == v5) * (((v4 - 2124) ^ 0x348) - 775)) ^ v4)))();
}

void sub_18DA26B14()
{
}

uint64_t sub_18DA26B28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,int a30)
{
  uint64_t v32 = (*(uint64_t (**)(uint64_t))(a4 + 8 * (v30 + 1859)))(*(void *)(a2 + 64) - 0x134F8A868441352ELL);
  return (*(uint64_t (**)(uint64_t))(v31
                                            + 8
                                            * (((STACK[0x940] == 0) * (((v30 - 293) | 0x110) + 62 * a30 - 2204)) ^ (v30 + 1615))))(v32);
}

uint64_t sub_18DA26B9C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 288))();
}

uint64_t sub_18DA26BBC(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 312) = v2;
  *(void *)(*(void *)(a2 + 216) - 0x53992AF8804337F1) = 0x66FBF218A8091D0CLL;
  return (*(uint64_t (**)(void))(a2 + 256))();
}

uint64_t sub_18DA26BD8@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  *a2 = 0x134F8A868441352ELL;
  return (*(uint64_t (**)(void))(a1 + 288))();
}

void sub_18DA26CBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(a7 + 368) = *(void *)(STACK[0x6C8] + 8 * v7);
  JUMPOUT(0x18DA26D08);
}

uint64_t sub_18DA26D58()
{
  return v0();
}

void sub_18DA26D70()
{
}

void sub_18DA26E0C(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[90];
  STACK[0x6B0] = a2[89] + 2449801858;
  STACK[0x6A0] = ((v2 - 0x1CAEFB3D54F94338) ^ 0x7FAEDE6E78DAEF99)
               - 0x6A08100258D88888
               + ((2 * (v2 - 0x1CAEFB3D54F94338)) & 0xFF5DBCDCF1B5DF32);
  uint64_t v3 = a2[88] - 0x43A08B1300141362;
  STACK[0x540] = (v3 ^ 0xB5B7FE7DF9DBE7F7) + 0x5FEECFEE26267F1ALL + ((2 * v3) & 0x6B6FFCFBF3B7CFEELL);
  uint64_t v4 = a2[86] - 0x604C1CD85C5D4F9BLL;
  STACK[0x530] = (v4 ^ 0xD7AFDF7E6F5A7F3FLL) + 0x3DF6EEEDB0A7E7D2 + ((2 * v4) & 0xAF5FBEFCDEB4FE7ELL);
  unint64_t v5 = STACK[0xA60];
  STACK[0x520] = ((STACK[0xA60] - 0x6F654FD9E3543B0ELL) ^ 0x7DBFDEFEBECFE759)
               - 0x681910929ECD8048
               + ((2 * (STACK[0xA60] - 0x6F654FD9E3543B0ELL)) & 0xFB7FBDFD7D9FCEB2);
  unint64_t v6 = STACK[0xA00] - 0x555194FDB6690FF7;
  STACK[0x510] = (v6 ^ 0x17FFEF6C681B6FB3) - 0x2592100481908A2 + ((2 * v6) & 0x2FFFDED8D036DF66);
  unint64_t v7 = STACK[0x9F0] - 0x4860F2874C89E0E4;
  STACK[0x500] = (v7 ^ 0x15AFFF7D309777B9) - 0x93111109510A8 + ((2 * v7) & 0x2B5FFEFA612EEF72);
  STACK[0x4D0] = ((v2 - 0x1CAEFB3D54F94336) ^ 0xFFFFDF77BFF5AFFDLL)
               + 0x1799FEEFC5FBD748
               + ((2 * (v2 - 0x1CAEFB3D54F94336)) & 0xFFFFBEEF7FEB5FFALL);
  STACK[0x4C0] = ((v3 + 2) ^ 0xB7F9FE6FA5FDA747) + 0x5F9FDFF7DFF3DFFELL + ((2 * (v3 + 2)) & 0x6FF3FCDF4BFB4E8ELL);
  STACK[0x4B0] = ((v4 + 2) ^ 0x57D9DF778DF9D7F5) - 0x40400110080850B0 + ((2 * (v4 + 2)) & 0xAFB3BEEF1BF3AFEALL);
  STACK[0x490] = ((v6 + 2) ^ 0x17DDDEF7AFFBF7C5) - 0x4400902A0A7080 + ((2 * (v6 + 2)) & 0x2FBBBDEF5FF7EF8ALL);
  STACK[0x480] = ((v5 - 0x6F654FD9E3543B0CLL) ^ 0x57DFDEFFF7F3D775)
               - 0x4046009872025030
               + ((2 * (v5 - 0x6F654FD9E3543B0CLL)) & 0xAFBFBDFFEFE7AEEALL);
  STACK[0x470] = ((v7 + 2) ^ 0xDFFBDF7FCDFBBF77) + 0x379DFEE7B7F5C7CELL + ((2 * (v7 + 2)) & 0xBFF7BEFF9BF77EEELL);
  STACK[0x440] = v2 - 0x1CAEFB3D54F94332;
  STACK[0x460] = ((v2 - 0x1CAEFB3D54F94332) ^ 0x3FFDDFF7A5FF8F7FLL)
               - 0x28640190200E083ALL
               + ((2 * (v2 - 0x1CAEFB3D54F94332)) & 0x7FFBBFEF4BFF1EFELL);
  STACK[0x450] = ((v5 - 0x6F654FD9E3543B08) ^ 0x179BDF67DFF3CFEDLL)
               - 0x201005A0248A8
               + ((2 * (v5 - 0x6F654FD9E3543B08)) & 0x2F37BECFBFE79FDALL);
  JUMPOUT(0x18DA22750);
}

uint64_t sub_18DA26E34(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(a2 + 784) - 0x1E34DA578D8F45CBLL) = v2;
  return (*(uint64_t (**)(void))(a2 + 368))();
}

uint64_t sub_18DA26E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,int a48,int a49)
{
  return (*(uint64_t (**)(void))(a4 + 8 * (((a49 + 747) * (v49 == v51)) ^ (v50 + 467))))();
}

uint64_t sub_18DA26EB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,int a48,int a49)
{
  uint64_t v49 = *(void *)(*(void *)(a7 + 136) - 0x24CC9A478416F3C4);
  *(void *)(a7 + 520) = v49;
  return (*(uint64_t (**)(void))(STACK[0x6C8] + 8 * (((v49 != 0) * (a49 - 736)) ^ a49)))();
}

uint64_t sub_18DA26F10@<X0>(void *a1@<X6>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,int a43)
{
  uint64_t v43 = (a2 - 1508655795);
  a1[95] = v43;
  uint64_t v44 = a1[18];
  a1[96] = v44;
  return (*(uint64_t (**)(void))(STACK[0x6C8]
                              + 8
                              * ((2829
                                * (v43
                                 - v44
                                 + ((a43 - 763) | 0x128u)
                                 + ((a43 + 701186722) & 0xD634BAF0 ^ 0x6F654FD9E3543978uLL) > 9)) ^ a43)))();
}

void sub_18DA26FA0()
{
}

uint64_t sub_18DA26FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8 * ((((v5 - 216) ^ 0x156) * (v4 == v6)) ^ (v5 - 170))))();
}

uint64_t sub_18DA27024()
{
  return ((uint64_t (*)(void))STACK[0x718])();
}

uint64_t sub_18DA27030(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(STACK[0x3D0] - 0x134F8A868441352ELL);
  uint64_t v9 = *a2;
  a2[70] = *(void *)(a4 + 8 * v7);
  a2[48] = v9;
  LODWORD(STACK[0x834]) = -1129976585;
  a2[17] = 0x24CC9A478416F3DCLL;
  a2[18] = 0x6F654FD9E3543B12;
  BOOL v5 = v8 == 0x66FBF218A8091D0CLL || v9 == 0x36533D3AA39D2B8DLL;
  return (*(uint64_t (**)(void))(a4
                              + 8
                              * ((((((12 * (v7 ^ 0xEB) - 1304) ^ v5) & 1) == 0)
                                * (((12 * (v7 ^ 0xEB) - 1304) | 0x23) - 62)) ^ (12 * (v7 ^ 0xEB)))))();
}

uint64_t sub_18DA27160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(void))(a4 + 8 * ((v6 ^ 0x5D2) + 1013)))();
  *BOOL v5 = 0;
  return (*(uint64_t (**)(uint64_t, unint64_t *))(a4
                                                                + 8
                                                                * ((29 * (v4 != 0x24CC9A478416F3DCLL)) ^ ((v6 ^ 0x5D2) + 631))))(1, &STACK[0x760]);
}

uint64_t sub_18DA271F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, unint64_t *))(a4 + 8 * ((29 * (v5 != 0x24CC9A478416F3DCLL)) ^ v4)))(1, &STACK[0x760]);
}

uint64_t sub_18DA27268@<X0>(uint64_t a1@<X3>, int a2@<W8>)
{
  (*(void (**)(uint64_t))(a1 + 8 * (a2 + 1725)))(v2 - 0x24CC9A478416F3DCLL);
  return ((uint64_t (*)(uint64_t, unint64_t *))STACK[0x750])(1, &STACK[0x760]);
}

uint64_t sub_18DA272C8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t sub_18DA272D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4
                              + 8
                              * ((196 * (((v5 + 125) ^ (v4 == ((v5 - 14) ^ (v6 - 300)))) & 1)) ^ (v5 + 759))))();
}

void sub_18DA27310(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  LODWORD(STACK[0x8F4]) = v5;
  a2[10] = a2[39];
  a2[13] = *(void *)(a4 + 8 * (v4 - 275));
  JUMPOUT(0x18DA26788);
}

void sub_18DA2731C()
{
}

uint64_t sub_18DA273AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4
                              + 8
                              * ((((v4 ^ 0xD7C) + 181 * (v4 ^ 0x877) - 1424) * (*(void *)(a2 + 160) == 0)) ^ v4)))();
}

uint64_t sub_18DA273F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4
                              + 8
                              * (((v5 - v4 + ((181 * (v6 ^ 0x50Bu)) ^ 0x6C7FF723B0D6047BuLL) < 0xFFFFFFFFFFFFFFF6)
                                * ((v6 - 7) ^ 0x61C)) ^ v6)))();
}

uint64_t sub_18DA27458@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  unsigned int v5 = bswap32(*(_DWORD *)(((2 * (v2 - 0x6C7FF723B0D60515)) & 0xFF774CD3DFB77EF2)
                         + ((v2 - 0x6C7FF723B0D60515) ^ 0x7FBBA669EFDBBF79)
                         + a2
                         - 0x7FBBA669EFDBBF79));
  unint64_t v6 = ((v5 - 1129976585 - ((2 * v5) & 0x794BD9EE)) ^ 0xBCA5ECF7) + v2 - 0x6C7FF722B9DF486FLL;
  unint64_t v7 = v3 + 4143365282;
  BOOL v9 = v6 < 0xF6F6BCA2 || v6 > v7;
  return (*(uint64_t (**)(void))(a1 + 8 * ((11 * v9) ^ v4)))();
}

uint64_t sub_18DA27528@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v12 = (*(unsigned __int8 *)(a3 + v10 + 1) << (v9 ^ 0x7A)) | (*(unsigned __int8 *)(a3 + v10) << 24) | (*(unsigned __int8 *)(a3 + v10 + 2) << 8) | *(unsigned __int8 *)(a3 + v10 + 3);
  int v13 = v12 - 1129976585 - ((2 * v12) & 0x794BD9EE);
  __int16 v14 = *(unsigned __int8 *)(((2 * (v10 + 4)) & 0x6EBFD7FFBFDFFD9CLL)
                           + ((v10 + 4) ^ 0x375FEBFFDFEFFECELL)
                           + a3
                           - 0x375FEBFFDFEFFECELL);
  LOWORD(v12) = *(unsigned __int8 *)(((2 * (v10 + 4)) & 0x6EBFD7FFBFDFFD9CLL)
                                   + ((v10 + 4) ^ 0x375FEBFFDFEFFECELL)
                                   + a3
                                   - 0x375FEBFFDFEFFECDLL);
  LOWORD(v12) = (v12 | (v14 << 8)) - 2 * ((v12 | (v14 << 8)) & 0x111E ^ v12 & 8);
  uint64_t v15 = v10 + 10;
  uint64_t v16 = v7 + 10;
  int v17 = (unsigned __int16)(v12 + 4387);
  if (v17 != 16858)
  {
    if (v17 == 38304)
    {
      uint64_t v18 = (v11 - 286) | 0x1A2u;
      unint64_t v21 = (unsigned __int8 *)(((2 * v15) & 0xAB978F7DEDBEDDEELL) + (v15 ^ 0x55CBC7BEF6DF6EF7) + a3);
      unint64_t v22 = (unint64_t)v21[v18 ^ 0xAA343841092090E7] << 56;
      v21 -= 0x55CBC7BEF6DF6F19uLL;
      unint64_t v23 = v22 | ((unint64_t)v21[35] << 48) | ((unint64_t)v21[36] << 40) | ((unint64_t)v21[37] << 32) | ((unint64_t)v21[38] << 24) | ((unint64_t)v21[39] << 16) | ((unint64_t)v21[40] << 8) | v21[41];
      *(void *)(a1 + 432) = v23 + 0x10426474F9598483 - ((2 * v23) & 0x2084C8E9F2B30906);
    }
    else
    {
      if (v17 != 34414)
      {
        LODWORD(STACK[0x8F4]) = v8;
        JUMPOUT(0x18DA276E4);
      }
      uint64_t v18 = (v11 + 32) | 0x64u;
      uint64_t v19 = ((2 * v15) & 0x7FD7EE73BBEBFEF6) + (v15 ^ 0x3FEBF739DDF5FF7BLL) + a3;
      LODWORD(v19) = (*(unsigned __int8 *)(v19 - 0x3FEBF739DDF5FF7BLL) << 24) | (*(unsigned __int8 *)(v19 + (v18 ^ 0xC01408C6220A0168)) << 16) | (*(unsigned __int8 *)(v19 - 0x3FEBF739DDF5FF79) << 8) | *(unsigned __int8 *)(v19 - 0x3FEBF739DDF5FF78);
      LODWORD(STACK[0x6F0]) = v19 - 1129976585 - ((2 * v19) & 0x794BD9EE);
    }
    *(void *)(a1 + 328) = v16;
    STACK[0x750] = *(void *)(a2 + 8 * (int)(v18 ^ 0x187));
    JUMPOUT(0x18DA17260);
  }
  STACK[0x740] = a3 + v15;
  *(void *)(a1 + 328) = v16;
  return (*(uint64_t (**)(void))(a2
                              + 8 * ((655 * (v13 == ((15 * a7) ^ 0xBCA5E886) + ((v11 - 362) | 0x408))) ^ (v11 + 132))))();
}

void sub_18DA27BC4()
{
  LODWORD(STACK[0x8F4]) = v0;
  JUMPOUT(0x18DA27BD4);
}

uint64_t sub_18DA27D0C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, int a3@<W8>)
{
  return (*(uint64_t (**)(void))(a2
                              + 8
                              * (int)(((*(void *)(a1 + 232) == 0)
                                     * (((((883 * (a3 ^ 0x347)) ^ 0x6E4) + 360) ^ 0xFFFFFFF5)
                                      + 181 * ((883 * (a3 ^ 0x347)) ^ 0x6E4))) | (883 * (a3 ^ 0x347)))))();
}

uint64_t sub_18DA27E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (*(uint64_t (**)(void))(a4 + 8 * (v4 ^ 0x9EC)))();
  *(_DWORD *)(v7 + 8) = v5;
  return result;
}

void fsmklk123(uint64_t a1)
{
  __asm { BRAA            X8, X17 }
}

uint64_t sub_18DA27F08(int a1, unint64_t a2, int a3)
{
  STACK[0x268] = (unint64_t)&STACK[0x64FD43C0B3118499];
  STACK[0x2C0] = (unint64_t)&STACK[0x60DE7237762FB3E8];
  STACK[0x290] = (unint64_t)&STACK[0x64FD43C0B31184C1];
  STACK[0x2F8] = (unint64_t)&STACK[0x60DE7237762FB3D8];
  STACK[0x2F0] = (unint64_t)&STACK[0x60DE7237762FB3F0];
  unsigned int v8 = a1 - ((2 * a1) & 0xB0289B7A) + 1477725629;
  *(_DWORD *)(v5 - 192) = (248152243
                         * (((((v5 - 192) | 0x5123421A) ^ 0xFFFFFFFE) - (~(v5 - 192) | 0xAEDCBDE5)) ^ 0xB419F047)) ^ 0x56EDD32D;
  char v9 = *(void (**)(uint64_t))(v3 + 17296);
  STACK[0x338] = v3;
  v9(v5 - 192);
  STACK[0x378] = 0xBC62F68890669FALL;
  LODWORD(STACK[0x380]) = 63865149;
  STACK[0x388] = 0;
  STACK[0x390] = 0x181CF26A0;
  STACK[0x398] = 0x23F24650FLL;
  STACK[0x3A0] = 0xBC62F68890669FALL;
  LODWORD(STACK[0x3A8]) = v8;
  STACK[0x3B0] = 0;
  STACK[0x3B8] = 0x1368FCB64;
  STACK[0x3C0] = 0x23F24650FLL;
  STACK[0x3C8] = 0xBC62F68890669FALL;
  STACK[0x3D8] = a2;
  STACK[0x3E0] = 0x34F1AF3DDLL;
  LODWORD(STACK[0x3D0]) = 1477725629;
  LODWORD(STACK[0x3E8]) = ((2 * a3) & 0x7FCEFE96) + (a3 ^ 0x3FE77F4B) - 12786240;
  LODWORD(STACK[0x3EC]) = 2;
  STACK[0x2B8] = (unint64_t)&STACK[0x71CDC8F27FC3268E];
  LODWORD(STACK[0x344]) = 0;
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(STACK[0x338] + 17672))(128);
  unint64_t v11 = STACK[0x338];
  STACK[0x330] = v10 + v4;
  int v12 = *(uint64_t (**)(void))(v11 + 8 * ((4077 * (v10 == 0)) ^ 0x7D0u));
  LODWORD(STACK[0x29C]) = 1393700944;
  return v12();
}

uint64_t sub_18DA28118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v6
                                                                                + 8
                                                                                * ((1812
                                                                                  * (v4 == ((v5 - 97) ^ 0xE1)
                                                                                         - v5
                                                                                         - 1393729084)) ^ 0xE1)))(a1, a2, a3, a4, 1736397759);
}

uint64_t sub_18DA28178()
{
  BOOL v3 = (*(uint64_t (**)(uint64_t))(v2 + 17672))(112) != 0;
  return (*(uint64_t (**)(void))(STACK[0x338] + 8 * ((v3 * (((8 - v1) ^ (v0 + 732)) - 1218)) ^ 0x639)))();
}

uint64_t sub_18DA281DC(uint64_t a1)
{
  *(_WORD *)(a1 + 80) = 25175;
  *(void *)a1 = 0x65EE1E795321A838;
  memset((void *)(a1 + 8), 79, 64);
  *(void *)(a1 + 72) = 0x116585BF116585BFLL;
  *(_DWORD *)(a1 + 84) = 1095089643;
  *(_DWORD *)(a1 + 104) = 2126566836;
  memset((void *)(a1 + 88), 79, 16);
  *(unsigned char *)(a1 + 108) = 42;
  if (v1) {
    BOOL v5 = a1 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  int v6 = !v5;
  return (*(uint64_t (**)(void))(v4 + 8 * (int)((((v3 + ((v2 + 2013261531) & 0xEF7F5FBF) + 532) ^ 0x19A) * v6) ^ v2)))();
}

uint64_t sub_18DA28294(uint64_t a1)
{
  *(_DWORD *)(v2 + 16) = *(_DWORD *)a1;
  *(_DWORD *)(v2 + 88) = *(_DWORD *)(a1 + 72);
  *(_DWORD *)(v2 + 92) = *(_DWORD *)(a1 + 76);
  *(unsigned char *)(v2 + 96) = *(unsigned char *)(a1 + 80);
  *(unsigned char *)(v2 + 97) = *(unsigned char *)(a1 + 81);
  *(_DWORD *)(v2 + 120) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(v2 + 100) = *(_DWORD *)(a1 + 84);
  *(unsigned char *)(v2 + 124) = *(unsigned char *)(a1 + 108) & 1 | 0xAA;
  *(unsigned char *)(v2 + 55) = *((unsigned char *)*(&off_1E559D8D0 + v1 - 444) + 15) ^ 0x61 ^ (*(unsigned char *)(a1 + 39)
                                                                              + (*(unsigned char *)(a1 + 39) | 0x1B)
                                                                              + ((v1 - 84) ^ *(unsigned char *)(a1 + 39) ^ 0x3C | 0x1B)
                                                                              - 105) ^ *((unsigned char *)*(&off_1E559D8D0
                                                                                                  + v1
                                                                                                  - 538)
                                                                                       + 5) ^ *((unsigned char *)*(&off_1E559D8D0 + v1 - 494)
                                                                                              + 16);
  return (*(uint64_t (**)(void))(v3 + 8 * v1))();
}

void sub_18DA2839C()
{
}

uint64_t sub_18DA283A4(uint64_t a1)
{
  *(unsigned char *)(v5 + 87) = *(unsigned char *)(v3 + 17) ^ *(unsigned char *)(v2 + 15) ^ *(unsigned char *)(v4 + 16) ^ 0x61 ^ (*(unsigned char *)(a1 + 71)
                                                                                                + (*(unsigned char *)(a1 + 71) | 0x1B)
                                                                                                + ((-109 * (v1 ^ 0xCB)) ^ 0xA2 | ~*(unsigned char *)(a1 + 71))
                                                                                                - 105);
  return (*(uint64_t (**)(void))(v6 + 8 * v1))();
}

void sub_18DA2843C()
{
}

uint64_t sub_18DA28444@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  *(unsigned char *)(v3 + 119) = *(unsigned char *)(a1 + 103);
  *(unsigned char *)(v3 + 118) = *(unsigned char *)(a1 + 102);
  *(unsigned char *)(v3 + 117) = *(unsigned char *)(a1 + 101);
  *(unsigned char *)(v3 + 116) = *(unsigned char *)(a1 + 100);
  *(unsigned char *)(v3 + 115) = *(unsigned char *)(a1 + 99);
  *(unsigned char *)(v3 + 114) = *(unsigned char *)(a1 + 98);
  *(unsigned char *)(v3 + 113) = *(unsigned char *)(a1 + 97);
  *(unsigned char *)(v3 + 112) = *(unsigned char *)(a1 + 96);
  *(unsigned char *)(v3 + 111) = *(unsigned char *)(a1 + 95);
  *(unsigned char *)(v3 + 110) = *(unsigned char *)(a1 + 94);
  *(unsigned char *)(v3 + 109) = *(unsigned char *)(a1 + 93);
  *(unsigned char *)(v3 + 108) = *(unsigned char *)(a1 + 92);
  *(unsigned char *)(v3 + 107) = *(unsigned char *)(a1 + 91);
  *(unsigned char *)(v3 + 106) = *(unsigned char *)(a1 + 90);
  *(unsigned char *)(v3 + 105) = *(unsigned char *)(a1 + 89);
  *(unsigned char *)(v3 + 104) = *(unsigned char *)(a1 + 88);
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(a1 + 4);
  return (*(uint64_t (**)(void))(v4
                              + 8 * (((*(_DWORD *)(a1 + 4) == a2) * (((v2 - 1803516347) & 0x6B7F7DF7) - 289)) ^ v2)))();
}

uint64_t sub_18DA28508(uint64_t a1)
{
  return (*(uint64_t (**)(void))(v3 + 8 * ((105 * ((((v2 + 1085) ^ (*(_DWORD *)(a1 + 72) == v1)) & 1) == 0)) ^ v2)))();
}

uint64_t sub_18DA2853C@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  *(_DWORD *)(v3 + 20) = a2 + 1;
  return (*(uint64_t (**)(void))(v5
                              + 8
                              * (int)(((((((v2 + 1636576838) & 0x9E73D5F6) - v4 - 1518) ^ 0xFFFFFFF4)
                                      + ((v2 + 1636576838) & 0x9E73D5F6)
                                      + 1736396233)
                                     * (a1 != 0)) ^ (v2 + 1636576838) & 0x9E73D5F6)))();
}

uint64_t sub_18DA2859C()
{
  (*(void (**)(void))(v2 + 8 * (v1 + v0 + 2213)))();
  BOOL v3 = (*(uint64_t (**)(uint64_t))(STACK[0x338] + 8 * (v0 ^ 0x677F5B1E)))(16) == 0;
  return (*(uint64_t (**)(void))(STACK[0x338] + 8 * ((v3 * (((v1 + v0 + 284) | 0x400) - 1305)) ^ (v1 + v0 + 1294))))();
}

uint64_t sub_18DA28620(void *a1)
{
  *a1 = 0x24CC9A478416F3DCLL;
  a1[1] = 0x24CC9A478416F3DCLL;
  *(void *)(v1 + 8) = (char *)a1 + 0x66FBF218A8091D0CLL;
  BOOL v4 = (*(uint64_t (**)(uint64_t))(v3 + 8 * (v2 ^ 0xD85)))(16) != 0;
  return (*(uint64_t (**)(void))(STACK[0x338] + 8 * ((v4 * (((v2 - 290) | 0x2B8) - 1700)) ^ v2)))();
}

uint64_t sub_18DA286C0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *a1 = 0x24CC9A478416F3DCLL;
  a1[1] = 0x24CC9A478416F3DCLL;
  *char v9 = (char *)a1 + v11;
  return (*(uint64_t (**)(void))(v13
                              + 8
                              * (((v12 + ((41 * (v10 ^ 0x6BF) + 1715868093) | 0x1394135) + 83)
                                * (&a9 != (uint64_t *)-888)) ^ v10)))();
}

uint64_t sub_18DA28728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  LODWORD(STACK[0x24C]) = 366431948;
  STACK[0x200] = *v7;
  return (*(uint64_t (**)(void))(v9
                                           + 8
                                           * ((((v5 - a5 + 354) ^ 0x64F) * (&STACK[0x378] == 0)) ^ (v8 + v5 + 925))))(*(void *)(v9 + 8 * (v6 + 131)));
}

uint64_t sub_18DA28800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((1063
                                * ((((v5 - 92) | 0x90) ^ 0xA5CDEC40) + 1513230890 < ((v5 + 2004868701) & 0xEFFF73FF ^ (a5 - 3)))) ^ v5)))();
}

uint64_t sub_18DA2886C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  STACK[0x2D0] = a1;
  LODWORD(STACK[0x2E4]) = v5;
  return (*(uint64_t (**)(void))(v9 + 8 * ((((a5 ^ (a5 - 77)) + 132) * (v6 == v7)) ^ (v8 + a5 + 733))))();
}

uint64_t sub_18DA288B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W8>)
{
  LODWORD(STACK[0x2AC]) = 1372003554;
  STACK[0x330] = v8;
  unint64_t v10 = STACK[0x268];
  int v11 = a8 + 1827;
  uint64_t v12 = *(void *)(v8 - 0x134F8A8684413526);
  uint64_t v13 = *(void *)(v9 + 8 * a8);
  STACK[0x350] = 0x24CC9A478416F3DCLL;
  STACK[0x318] = v10;
  BOOL v15 = v10 != 0x64FD43C0B3118155 && v12 != 0x66FBF218A8091D0CLL;
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8 * ((4095 * v15) ^ v11));
  LODWORD(STACK[0x328]) = -1129976585;
  return v16(a1, a2, a3, a4, a5, a6, a7, v13);
}

uint64_t sub_18DA28CB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  STACK[0x270] = (unint64_t)&STACK[0x350];
  LODWORD(STACK[0x328]) = -1129976585;
  unint64_t v13 = *(void *)(STACK[0x338] + 8 * (v9 + 72));
  __int16 v14 = *(uint64_t (**)(unint64_t, uint64_t))(STACK[0x338]
                                                            + 8
                                                            * (((v8 != 0x66FBF218A8091D0CLL) * (v11 ^ (a5 + 992) ^ 0x423)) ^ (v12 + v11 + 748)));
  STACK[0x320] = a8;
  STACK[0x310] = v10;
  STACK[0x230] = v13;
  return v14(0x8E85997BF8A3092DLL, 0x628ABC52894BE762);
}

uint64_t sub_18DA28D74()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((((10 * (v1 ^ 0xEE) + 29) ^ (*(void *)(v0 - 0x66FBF218A8091D0CLL) == 0x24CC9A478416F3DCLL)) & 1)
                                * ((10 * (v1 ^ 0x4EE) - 1304) ^ 0x2EC)) ^ (10 * (v1 ^ 0x4EE)))))();
}

uint64_t sub_18DA28D9C()
{
  return v0();
}

uint64_t sub_18DA28DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  STACK[0x2D8] = v5;
  if (v6 == -1393729084)
  {
    unint64_t v10 = STACK[0x370];
    uint64_t v11 = *(void *)(STACK[0x370] - 0x24CC9A478416F3D4);
    unint64_t v12 = STACK[0x2A0];
    *(void *)(STACK[0x2A0] - 0x24CC9A478416F3D4) = v11;
    *(void *)(v12 - 0x24CC9A478416F3DCLL) = *(void *)(v10 - 0x24CC9A478416F3DCLL);
    return (*(uint64_t (**)(void))(v8
                                + 8
                                * (((v11 != 0x24CC9A478416F3DCLL) * ((11 * (a5 ^ (a5 - 734) ^ 0x33A)) ^ 0x437)) ^ (v7 + a5 + 1452))))();
  }
  else if (v6 == 1393700935)
  {
    return (*(uint64_t (**)(void))(v8
                                + 8
                                * (int)(((*(void *)(STACK[0x228] - 0x66FBF218A8091D04) == 0x24CC9A478416F3DCLL)
                                       * (((a5 - 1314558917) & 0xE6DB447F) - 1063)) ^ (v7 + a5 + 401))))();
  }
  else
  {
    return (*(uint64_t (**)(void))(v8
                                + 8
                                * ((18 * (*(void *)(STACK[0x2A0] - 0x24CC9A478416F3C4) == 0)) | (v7 + 1736399071))))();
  }
}

void sub_18DA28FD0(void *a1@<X8>)
{
  *(void *)(v1 - 0x24CC9A478416F3DCLL) = v2;
  *(void *)(v2 - 0x24CC9A478416F3D4) = *a1;
  *a1 = v2;
  JUMPOUT(0x18DA29000);
}

uint64_t sub_18DA29014()
{
  return (*(uint64_t (**)(void))(v3 + 8 * (((v1 != v2) * (((v0 - 1068) | 0x24B) ^ 0x27E)) ^ v0)))();
}

uint64_t sub_18DA29044()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (int)(((*v0 != 0x24CC9A478416F3DCLL) * (147 * (v1 ^ 0x263) + (v1 ^ 0xFFFFFE74))) ^ v1)))();
}

void sub_18DA29098()
{
  *(void *)(STACK[0x228] - 0x66FBF218A8091D0CLL) = STACK[0x2A0];
  JUMPOUT(0x18DA290B8);
}

uint64_t sub_18DA2911C()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (((*(void *)(STACK[0x370] - 0x24CC9A478416F3C4) == 0)
                                * ((v0 & 0x3A31E729 ^ 0x4D) - 511)) ^ v0 & 0x3A31E729)))();
}

uint64_t sub_18DA29170@<X0>(int a1@<W8>)
{
  int v4 = a1 ^ 0x636;
  uint64_t v5 = (*(uint64_t (**)(void))(v3 + 8 * (a1 ^ 0xAE1)))();
  unint64_t v6 = STACK[0x338];
  *uint64_t v2 = 0;
  return (*(uint64_t (**)(uint64_t))(v6
                                            + 8
                                            * ((253
                                              * (((v1 == 0x24CC9A478416F3DCLL) ^ ((v4 + 98) ^ (v4 - 1))) & 1)) ^ v4)))(v5);
}

uint64_t sub_18DA29204()
{
  *(void *)(STACK[0x228] - 0x66FBF218A8091D04) = v1;
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (int)(((*(void *)(STACK[0x370] - 0x24CC9A478416F3C4) == 0)
                                     * (((v0 + 1999786636) & 0x88CDAAB9 ^ 0x4D) - 511)) ^ (v0 + 1999786636) & 0x88CDAAB9)))();
}

uint64_t sub_18DA2927C()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((253 * (((v1 == 0x24CC9A478416F3DCLL) ^ ((v0 + 98) ^ (v0 - 1))) & 1)) ^ v0)))();
}

uint64_t sub_18DA292E4@<X0>(int a1@<W8>)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(v2 + 8 * (a1 + 1569)))(v1 - 0x24CC9A478416F3DCLL);
  int v4 = (uint64_t (*)(uint64_t))STACK[0x2C8];
  STACK[0x370] = 0x24CC9A478416F3DCLL;
  STACK[0x2C8] = (unint64_t)v4;
  return v4(v3);
}

void sub_18DA29334()
{
  LODWORD(STACK[0x2EC]) = v0;
  JUMPOUT(0x18DA29348);
}

uint64_t sub_18DA29408(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * (((((v2 - v5 + 1) ^ (*(void *)(v4 + v3) == a1)) & 1)
                                * ((v2 - 149) ^ a2)) ^ v2)))();
}

uint64_t sub_18DA29444@<X0>(unint64_t a1@<X3>, int a2@<W4>, unint64_t a3@<X5>, int a4@<W8>)
{
  STACK[0x310] = a3;
  STACK[0x318] = a1;
  STACK[0x320] = v5;
  STACK[0x328] = v4 - 0x134F8A868441352ELL;
  return (*(uint64_t (**)(void))(v8
                              + 8
                              * (int)(((v4 != 0x134F8A8684413526) * ((a4 + 2139050779) & 0xE7FFFFFF ^ (a2 + 741) ^ v6)) ^ (v7 + ((a4 + 2139050779) & 0xE7FFFFFF) + 922))))();
}

uint64_t sub_18DA294C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(v7 + 8 * (((*v4 == a3) * ((v3 + v5) & v6 ^ 0x537)) ^ v3)))();
}

uint64_t sub_18DA294F0@<X0>(int a1@<W8>)
{
  int v5 = (void *)(v1 - 0x66FBF218A8091D0CLL);
  STACK[0x330] = (unint64_t)v5;
  return (*(uint64_t (**)(void))(v4
                              + 8
                              * (int)(((*v5 + v2 == 0x388D1C01A2228CF7)
                                     * (((a1 + 1392614039) & 0xACFE6735 ^ v3) + ((a1 + 1049192067) & 0xC17697BA))) ^ a1)))();
}

uint64_t sub_18DA29574()
{
  (*(void (**)(unint64_t))(v3 + 8 * (v1 + 1291)))(STACK[0x330]);
  *int v0 = 0x66FBF218A8091D0CLL;
  return v2(STACK[0x328]);
}

void sub_18DA295D0()
{
}

uint64_t sub_18DA295E8()
{
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(v6 + 8 * (v5 + 841)))(v0);
  return (*(uint64_t (**)(uint64_t))(STACK[0x338]
                                            + 8
                                            * ((((((v5 ^ v4) + 667) ^ v3) + 7 * (v5 ^ v4))
                                              * (v1 + v2 == 0x388D1C01A2228CF7)) ^ v5)))(v7);
}

uint64_t sub_18DA2964C()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((*(void *)(v0 - 0x24CC9A478416F3C4) == 0) * ((20 * (v1 ^ 0x774)) ^ (v1 - 545))) ^ v1)))();
}

uint64_t sub_18DA296B0()
{
  (*(void (**)(void))(v2 + 8 * ((v0 + 20) ^ 0xFE8)))();
  *int v1 = 0;
  return sub_18DA295E8();
}

uint64_t sub_18DA296E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v7 = a5 + v5;
  (*(void (**)(void))(v6 + 8 * (a5 ^ (a5 + 1875))))();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(STACK[0x338]
                                                                                         + 8
                                                                                         * (((v7 + 38)
                                                                                           * (STACK[0x320] == 0x60DE7237762FB090)) ^ (v7 + 1790))))(0x134F8A868441352ELL, 162, 0x66FBF218A8091D0CLL, STACK[0x318], 1736397759);
}

uint64_t sub_18DA29790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  *int v4 = 0x134F8A868441352ELL;
  return a4();
}

void sub_18DA297BC()
{
}

uint64_t sub_18DA297D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void))(v6 + 8 * ((1007 * (LODWORD(STACK[0x2EC]) == -1393729084)) ^ (v5 + a5 + 1242))))();
}

uint64_t sub_18DA29808()
{
  return (v2 + v0 - ((2 * v2) & 0x59DAC388)) ^ v0;
}

uint64_t sub_18DA2988C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  STACK[0x2D8] = v5;
  return (*(uint64_t (**)(void))(v9 + 8
                                   * ((84 * (((v6 == v7) ^ (v8 + a5 + 3)) & 1)) ^ (v8 + a5 + 784))))();
}

uint64_t sub_18DA298C4@<X0>(int a1@<W8>)
{
  STACK[0x300] = 0;
  return (*(uint64_t (**)(void))(STACK[0x338]
                              + 8 * (((*(void *)(STACK[0x350] - 0x24CC9A478416F3C4) != 0) * (a1 - 988)) ^ a1)))();
}

uint64_t sub_18DA2990C@<X0>(unint64_t a1@<X3>, int a2@<W8>)
{
  unint64_t v4 = (((a2 - 1035) | 0x10) ^ 0xA613BD5D) + *(_DWORD *)(v2 - 0x24CC9A478416F3CCLL);
  STACK[0x288] = v4;
  unint64_t v5 = *(uint64_t (**)(void))(STACK[0x338]
                           + 8
                           * ((396
                             * (0x30BA82B20E28E46ALL - v3 + v4 - 10 < (unint64_t)((a2 + 1870656500) & 0xF7FF5BBF)
                                                                    - 1736397769)) ^ a2));
  STACK[0x300] = a1;
  STACK[0x2B0] = v3;
  return v5();
}

uint64_t sub_18DA299B4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  STACK[0x300] = a4;
  unint64_t v8 = STACK[0x288];
  STACK[0x2B0] = v7;
  STACK[0x288] = v8;
  STACK[0x250] = v8 + 587511036;
  STACK[0x210] = ((v7 - 0x30BA82B20E28E460) ^ 0x57BDFEE7BFFFFF75)
               - 0x402420803A0E7830
               + ((2 * (v7 - 0x30BA82B20E28E460)) & 0xAF7BFDCF7FFFFEEALL);
  return (*(uint64_t (**)(void))(STACK[0x338] + 8 * a7))();
}

void sub_18DA2A784(int a1@<W2>, unsigned char *a2@<X8>)
{
  int v4 = (*a2 ^ v3) | ((*v2 ^ a1) << 8);
  LODWORD(STACK[0x30C]) = v4 - 2 * (v4 & 0x2C3F ^ (*a2 ^ v3) & 1) - 21442;
  JUMPOUT(0x18DA29F84);
}

uint64_t sub_18DA2A7CC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v4 = (a4 ^ 0xBCA5ECF7) + STACK[0x2B0];
  STACK[0x260] = v4 + 10;
  unint64_t v5 = v4 - 0x30BA82B1EB242F64;
  BOOL v7 = v5 < 0x2304B4FC || v5 > STACK[0x250];
  return (*(uint64_t (**)(void))(STACK[0x338] + 8 * ((121 * v7) ^ 0x2B7)))();
}

uint64_t sub_18DA2A868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void))
{
  int v9 = (unsigned __int16)LODWORD(STACK[0x30C]);
  if (v9 == 15177)
  {
    LODWORD(STACK[0x30C]) = 15177;
    JUMPOUT(0x18DA29F7CLL);
  }
  if (v9 == 10427 || v9 == 64741) {
    return (*(uint64_t (**)(void))(STACK[0x338]
  }
                                + 8
                                * ((1726
                                  * ((unsigned __int16)LODWORD(STACK[0x30C]) == (unsigned __int16)(2 * (a5 ^ (a5 - 422))
                                                                                                 + 14333))) ^ (v8 + a5 + 836))))();
  else {
    return a8();
  }
}

uint64_t sub_18DA2A8A0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(STACK[0x338]
                              + 8 * ((28 * ((a4 ^ 0xBCA5ECF7) != LODWORD(STACK[0x2AC]) - 1529925284)) ^ 0x505)))();
}

void sub_18DA2A92C()
{
}

void sub_18DA2A9A8()
{
  STACK[0x2D8] = v0;
  JUMPOUT(0x18DA299E8);
}

uint64_t sub_18DA2A9F0()
{
  *(void *)STACK[0x270] = v0;
  return v1();
}

uint64_t sub_18DA2AA04(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v4 = *(uint64_t (**)(void))(STACK[0x338] + 8 * ((1726 * ((unsigned __int16)LODWORD(STACK[0x30C]) == 15177)) ^ 0x34C));
  LODWORD(STACK[0x328]) = a4;
  return v4();
}

void sub_18DA2AA80(int a1@<W8>)
{
  *(_DWORD *)(STACK[0x318] - 0x64FD43C0B3118155) = LODWORD(STACK[0x328]) ^ (a1 - v1 - 836) ^ 0xDBDABF48;
  LODWORD(STACK[0x30C]) = 15177;
  JUMPOUT(0x18DA2AAC8);
}

uint64_t sub_18DA2AB50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void))(v7
                              + 8
                              * ((1962
                                * (*(_DWORD *)(STACK[0x2B8]
                                             - 0x71CDC8F27FC32316
                                             + 40
                                             * (((v5 + 527) ^ (a5 - 933) ^ 0xFFFFFFFFC2B2BE69) + v6)
                                             + 36)
                                 - LODWORD(STACK[0x24C]) == -366431946)) ^ v5)))();
}

uint64_t sub_18DA2ABC4(uint64_t (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v10 = *(_DWORD *)(v6 + 40 * v5 + 28);
  if (v10 == 1)
  {
    STACK[0x2D0] = (unint64_t)a1;
    LODWORD(STACK[0x2E4]) = v7;
    LODWORD(STACK[0x2AC]) = *(_DWORD *)(v6 + 40 * v5 + 24);
    JUMPOUT(0x18DA2ACECLL);
  }
  if (v10 == 3) {
    return (*(uint64_t (**)(void))(v9 + 8 * ((165 * (*(void *)(v6 + 40 * v5 + 16) == 0)) ^ (v8 + a5 + 299))))();
  }
  if (v10 != 2) {
    return a1();
  }
  STACK[0x2D0] = (unint64_t)a1;
  LODWORD(STACK[0x2E4]) = v7;
  return (*(uint64_t (**)(void))(v9
                              + 8
                              * ((4 * (((STACK[0x200] == 0x66FBF218A8091D0CLL) ^ (a5 + 32)) & 1)) & 0xBF | ((((STACK[0x200] == 0x66FBF218A8091D0CLL) ^ (a5 + 1033201184)) & 1) << 6) | (v8 + a5 + 930))))();
}

void sub_18DA2AD4C()
{
}

uint64_t sub_18DA2ADD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  LODWORD(STACK[0x270]) = v64;
  STACK[0x2C8] = v63;
  STACK[0x330] = v65;
  uint64_t v68 = (*(uint64_t (**)(uint64_t))(v67 + 8 * (v66 ^ 0xD4D)))(32);
  STACK[0x2A0] = v68 + 0x24CC9A478416F3DCLL;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v67 + 8 * (int)(((v68 == 0) * (((v66 + 1129855918) | 0x24271225) ^ 0x677F550F ^ (v66 + 1640219150) & 0x9E3C3D57)) ^ v66)))(v68, v69, v70, v71, v72, v73, v74, v75, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61,
           a62,
           a63);
}

uint64_t sub_18DA2AE80(uint64_t a1)
{
  *(void *)a1 = 0x24CC9A478416F3DCLL;
  *(void *)(a1 + 8) = 0x24CC9A478416F3DCLL;
  *(_DWORD *)(a1 + 16) = v3 + 449306034;
  uint64_t v5 = (*(uint64_t (**)(void))(v2 + 8 * (v1 + 847)))(v3 + 1499219776 + (v1 ^ 0x677F56EDu));
  *(void *)(a1 + 24) = v5;
  return (*(uint64_t (**)(void))(v2 + 8 * (((v5 != 0) * (((v1 - 1298) | 2) - 14)) ^ v1)))();
}

uint64_t sub_18DA2AF08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  int v62 = LODWORD(STACK[0x2AC])
      - (((((v59 + 558567498) | 0x46344333) ^ 0x2EE13107) + 2 * LODWORD(STACK[0x2AC])) & 0x74FCEE56)
      + 1598924935;
  LODWORD(STACK[0x230]) = v61;
  LODWORD(STACK[0x250]) = v61 - ((2 * v61 + 28784106) & 0x74FCEE56) + 2069500448;
  LODWORD(STACK[0x210]) = v60 ^ 0xE26A3A96;
  unint64_t v63 = *(unsigned char **)(v58 + 24);
  uint64_t v64 = __ROR8__(v63, 8);
  unint64_t v65 = (0x150C087CC469144DLL - (v64 & 0xF8FFFFFFFFFFFFFFLL)) & 0x19A889ECFF1A1ED8 | ((v64 & 0xF8FFFFFFFFFFFFFFLL)
                                                                                      - 0x550C087CC469144ELL) & 0xE057761300E5E127;
  uint64_t v66 = __ROR8__(v65 ^ 0xA2238B49AE9B5874, 8);
  v65 ^= 0xF5BC3750722C05E1;
  uint64_t v67 = (v66 + v65) ^ 0x50D4D0E13CBD7177;
  uint64_t v68 = v67 ^ __ROR8__(v65, 61);
  *((void *)&v70 + 1) = __ROR8__(v67, 8) + v68;
  *(void *)&long long v70 = *((void *)&v70 + 1) ^ 0xE5D7DAAEED85A300;
  uint64_t v69 = v70 >> 8;
  *(void *)&long long v70 = __ROR8__(v68, 61);
  unint64_t v71 = (v69 + (*((void *)&v70 + 1) ^ 0xE5D7DAAEED85A300 ^ v70)) ^ 0x8E85997BF8A3092DLL;
  unint64_t v72 = v71 ^ __ROR8__(*((void *)&v70 + 1) ^ 0xE5D7DAAEED85A300 ^ v70, 61);
  uint64_t v73 = *(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(STACK[0x338] + 8 * v59);
  unint64_t v74 = (__ROR8__(v71, 8) + v72) ^ 0xCD091F17C02FDE51;
  uint64_t v75 = __ROR8__(v74, 8);
  unint64_t v76 = v74 ^ __ROR8__(v72, 61);
  uint64_t v77 = (v75 + v76) ^ 0x628ABC52894BE762;
  uint64_t v78 = v77 ^ __ROR8__(v76, 61);
  *(void *)&long long v70 = __ROR8__(v77, 8);
  unint64_t v79 = (((2 * (v70 + v78)) & 0xFCA17D98F44813EALL) - (v70 + v78) - 0x7E50BECC7A2409F6) ^ 0xDB6FDD30BA50D16BLL;
  *unint64_t v63 = (((__ROR8__(v79, 8) + (v79 ^ __ROR8__(v78, 61))) ^ 0x1B0BD1982B59C071) >> (8 * (v63 & 7u))) ^ HIBYTE(v62) ^ 0xBA;
  unint64_t v80 = (__ROR8__(v63 + 1, 8) & 0xF8FFFFFFFFFFFFFFLL) - 0x550C087CC469144ELL;
  *(void *)&long long v70 = __ROR8__(v80 ^ 0xB98B02A5518146ACLL, 8);
  v80 ^= 0xEE14BEBC8D361B39;
  uint64_t v81 = (v70 + v80) ^ 0x50D4D0E13CBD7177;
  uint64_t v82 = v81 ^ __ROR8__(v80, 61);
  *(void *)&long long v70 = __ROR8__(v81, 8);
  unint64_t v83 = (((2 * (v70 + v82)) & 0xA793A7F6AC829AE6) - (v70 + v82) - 0x53C9D3FB56414D74) ^ 0x49E1F6AA443B118CLL;
  unint64_t v84 = v83 ^ __ROR8__(v82, 61);
  unint64_t v85 = (__ROR8__(v83, 8) + v84) ^ 0x8E85997BF8A3092DLL;
  uint64_t v86 = __ROR8__(v85, 8);
  unint64_t v87 = v85 ^ __ROR8__(v84, 61);
  unint64_t v88 = (((2 * (v86 + v87)) & 0xF0BAF55B447DEC8ELL) - (v86 + v87) + 0x7A285525DC109B8) ^ 0xCAAB9A459DEED7E9;
  unint64_t v89 = v88 ^ __ROR8__(v87, 61);
  *(void *)&long long v70 = __ROR8__(v88, 8);
  unint64_t v90 = (-2 - ((~(v70 + v89) | 0x1FF46385B66E09DELL) + ((v70 + v89) | 0xE00B9C7A4991F621))) ^ 0x7D7EDFD73F25EEBCLL;
  unint64_t v91 = v90 ^ __ROR8__(v89, 61);
  *(void *)&long long v70 = __ROR8__(v90, 8);
  unint64_t v92 = (0xA4E31C196FB07E65 - ((v70 + v91) | 0xA4E31C196FB07E65) + ((v70 + v91) | 0x5B1CE3E6904F819ALL)) ^ 0x1DC7FE5AFC4A6FBLL;
  unint64_t v93 = v92 ^ __ROR8__(v91, 61);
  *(void *)&long long v70 = __ROR8__(v92, 8);
  v63[1] = (((-2 - ((~((void)v70 + v93) | 0x75B531B3FC4CDC6BLL) + (((void)v70 + v93) | 0x8A4ACE4C03B32394))) ^ 0x6EBEE02BD7151C1ALL) >> (8 * (((_BYTE)v63 + 1) & 7u))) ^ BYTE2(v62) ^ 0x7E;
  unint64_t v94 = (__ROR8__(v63 + 2, 8) & 0xF8FFFFFFFFFFFFFFLL) - 0x550C087CC469144ELL;
  unint64_t v95 = v94 ^ 0xB98B02A5518146ACLL;
  v94 ^= 0xEE14BEBC8D361B39;
  *(void *)&long long v70 = __ROR8__(v95, 8);
  unint64_t v96 = (((2 * (v70 + v94)) & 0x9D263FB38571CE96) - (v70 + v94) + 0x316CE0263D4718B4) ^ 0x61B830C701FA69C3;
  unint64_t v97 = v96 ^ __ROR8__(v94, 61);
  *((void *)&v70 + 1) = __ROR8__(v96, 8) + v97;
  *(void *)&long long v70 = *((void *)&v70 + 1) ^ 0xE5D7DAAEED85A300;
  uint64_t v98 = v70 >> 8;
  *(void *)&long long v70 = __ROR8__(v97, 61);
  unint64_t v99 = (0x8EEAB8D098054CA2
       - ((v98 + (*((void *)&v70 + 1) ^ 0xE5D7DAAEED85A300 ^ v70)) | 0x8EEAB8D098054CA2)
       + ((v98 + (*((void *)&v70 + 1) ^ 0xE5D7DAAEED85A300 ^ v70)) | 0x7115472F67FAB35DLL)) ^ 0xFF90DE549F59BA70;
  unint64_t v100 = v99 ^ __ROR8__(*((void *)&v70 + 1) ^ 0xE5D7DAAEED85A300 ^ v70, 61);
  *(void *)&long long v70 = __ROR8__(v99, 8);
  uint64_t v101 = __ROR8__((-2 - ((~(v70 + v100) | 0x978199C1D991797DLL) + ((v70 + v100) | 0x687E663E266E8682))) ^ 0x5A8886D619BEA72CLL, 8);
  unint64_t v102 = (-2 - ((~(v70 + v100) | 0x978199C1D991797DLL) + ((v70 + v100) | 0x687E663E266E8682))) ^ 0x5A8886D619BEA72CLL ^ __ROR8__(v100, 61);
  unint64_t v103 = (((2 * (v101 + v102)) & 0x9D3B31D97DA9F9B8) - (v101 + v102) - 0x4E9D98ECBED4FCDDLL) ^ 0xD3E8DB41C860E441;
  unint64_t v104 = v103 ^ __ROR8__(v102, 61);
  uint64_t v105 = (__ROR8__(v103, 8) + v104) ^ 0x5AC09C033F8B2761;
  *(void *)&long long v70 = __ROR8__(v63 + 3, 8);
  v63[2] = (((__ROR8__(v105, 8) + (v105 ^ __ROR8__(v104, 61))) ^ 0x1B0BD1982B59C071uLL) >> (8 * (((_BYTE)v63 + 2) & 7u))) ^ BYTE1(v62) ^ 0x77;
  unint64_t v106 = ((2 * ((v70 & 0xF8FFFFFFFFFFFFFFLL) - 0x550C087CC469144ELL)) | 0x20EB39D37CA90794)
       - ((v70 & 0xF8FFFFFFFFFFFFFFLL)
        - 0x550C087CC469144ELL)
       - 0x10759CE9BE5483CALL;
  unint64_t v107 = v106 ^ 0xA9FE9E4CEFD5C566;
  v106 ^= 0xFE612255336298F3;
  *(void *)&long long v70 = __ROR8__(v107, 8);
  uint64_t v108 = __ROR8__((-2 - ((~(v70 + v106) | 0x3D54A62DE74C24CLL) + ((v70 + v106) | 0xFC2AB59D218B3DB3))) ^ 0x53019A83E2C9B33BLL, 8);
  unint64_t v109 = (-2 - ((~(v70 + v106) | 0x3D54A62DE74C24CLL) + ((v70 + v106) | 0xFC2AB59D218B3DB3))) ^ 0x53019A83E2C9B33BLL ^ __ROR8__(v106, 61);
  unint64_t v110 = (-2 - ((~(v108 + v109) | 0x1730E72B835C4191) + ((v108 + v109) | 0xE8CF18D47CA3BE6ELL))) ^ 0xF2E73D856ED9E291;
  unint64_t v111 = v110 ^ __ROR8__(v109, 61);
  *(void *)&long long v70 = __ROR8__(v110, 8);
  unint64_t v112 = (v70 + v111 - ((2 * (v70 + v111)) & 0x9B516F8D43D1232ELL) - 0x325748395E176E69) ^ 0x432D2EBD594B98BALL;
  unint64_t v113 = v112 ^ __ROR8__(v111, 61);
  unint64_t v114 = (__ROR8__(v112, 8) + v113) ^ 0xCD091F17C02FDE51;
  unint64_t v115 = v114 ^ __ROR8__(v113, 61);
  *(void *)&long long v70 = __ROR8__(v114, 8);
  uint64_t v116 = __ROR8__((((2 * (v70 + v115)) | 0x70B9105F53F81A68) - (v70 + v115) + 0x47A377D05603F2CCLL) ^ 0xDAD6347D20B7EA56, 8);
  unint64_t v117 = (((2 * (v70 + v115)) | 0x70B9105F53F81A68) - (v70 + v115) + 0x47A377D05603F2CCLL) ^ 0xDAD6347D20B7EA56 ^ __ROR8__(v115, 61);
  uint64_t v118 = __ROR8__((v116 + v117) ^ 0x5AC09C033F8B2761, 8) + ((v116 + v117) ^ 0x5AC09C033F8B2761 ^ __ROR8__(v117, 61));
  v63[3] = v62 ^ 0x2B ^ (((v118 - ((2 * v118) & 0xCDE279B6265D5694) - 0x190EC324ECD154B6) ^ 0xFDFAED4338776B3BLL) >> (8 * (((_BYTE)v63 + 3) & 7u)));
  return v73(0x70B9105F53F81A68, 0xFDFAED4338776B3BLL, 0xB98B02A5518146ACLL, 43, 0xEE14BEBC8D361B39, 0xE5D7DAAEED85A300, 0xA4E31C196FB07E65, 0x8EEAB8D098054CA2, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58);
}

uint64_t sub_18DA2BCE8(unint64_t a1)
{
  STACK[0x2D0] = a1;
  LODWORD(STACK[0x2E4]) = v1;
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((109 * (((STACK[0x200] == 0x66FBF218A8091D0CLL) ^ (8 - v2)) & 1)) ^ 0x5ADu)))();
}

void sub_18DA2BD58()
{
  LODWORD(STACK[0x2AC]) = *(_DWORD *)(v1 + 40 * v0 + 24);
  JUMPOUT(0x18DA2BDA0);
}

uint64_t sub_18DA2E09C()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((((v1 == 0x24CC9A478416F3DCLL) ^ (v0 - 64)) & 1)
                                * ((v0 ^ 0x533) - 546)) ^ v0)))();
}

uint64_t sub_18DA2E104@<X0>(int a1@<W8>)
{
  int v4 = a1 + 645;
  uint64_t v5 = v1;
  uint64_t v6 = (*(uint64_t (**)(void))(v3 + 8 * (a1 ^ 0xD97)))();
  unint64_t v7 = STACK[0x338];
  *uint64_t v2 = 0;
  return (*(uint64_t (**)(uint64_t))(v7
                                            + 8
                                            * (((((v5 == 0x24CC9A478416F3DCLL) ^ (v4 - 64)) & 1)
                                              * ((v4 ^ 0x533) - 546)) ^ v4)))(v6);
}

void sub_18DA2E190(int a1@<W8>)
{
  (*(void (**)(unint64_t))(v1 + 8 * (a1 + 1569)))(STACK[0x2A0] - 0x24CC9A478416F3DCLL);
  JUMPOUT(0x18DA2E1CCLL);
}

uint64_t sub_18DA2E1E0()
{
  return (*(uint64_t (**)(unint64_t))(v4
                                                     + 8
                                                     * ((773 * (v1 == ((v0 + 1726850032) & 0x31930BF5 ^ (v2 + 157)))) | (v3 + v0 + 1152))))(STACK[0x2D0]);
}

uint64_t sub_18DA2E230()
{
  return ((uint64_t (*)(void))STACK[0x280])();
}

uint64_t sub_18DA2E23C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9 = *(uint64_t (**)(void))(v8 + 8 * ((v7 + a5 + 733) ^ (1838 * (v5 == v6))));
  LODWORD(STACK[0x2E8]) = -1393729084;
  return v9();
}

uint64_t sub_18DA2E27C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(unint64_t))(v8
                                                     + 8
                                                     * ((((v7 + a5 + 925) ^ 0x3B0) * (v5 == v6)) ^ (v7 + a5 + 346))))(STACK[0x2D0]);
}

uint64_t sub_18DA2E2B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(unint64_t))(v8
                                                     + 8
                                                     * (((v5 == v6) * ((a5 ^ (a5 - 933)) - 912)) | (v7 + a5 + 346))))(STACK[0x2D0]);
}

uint64_t sub_18DA2E2EC@<X0>(int a1@<W4>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((1063
                                * (v2
                                 + (((a2 - 675) | 0x60) ^ 0x163)
                                 + (((((a2 - 675) | 0x60) - 92) | 0x90) ^ 0xA5CDEC40) < ((((a2 - 675) | 0x60)
                                                                                        + 2004868701) & 0xEFFF73FF ^ (a1 - 3)))) ^ ((a2 - 675) | 0x60))))();
}

uint64_t sub_18DA2E36C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, unsigned int a10)
{
  return (*(uint64_t (**)(void, uint64_t))(STACK[0x338]
                                                    + 8
                                                    * (int)(((((v10 + 1334593867) & 0xB073B3E7) - 383) * (v11 == a7)) | v10)))(a10, 2149614620);
}

uint64_t sub_18DA2E3C4()
{
  return (*(uint64_t (**)(void))(STACK[0x338] + 8 * ((1324 * ((((v0 ^ 0x63B) - 1972) & v1) == 0)) ^ v0)))();
}

#error "18DA2ED00: call analysis failed (funcsize=512)"

void sub_18DA2ED04()
{
}

uint64_t sub_18DA2ED0C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  return (*(uint64_t (**)(void))(v66 + 8 * ((((a1 + 1736396564) ^ 0x677F5F3D) * (a65 == v65)) ^ a1)))();
}

uint64_t sub_18DA2F040(uint64_t a1)
{
  int v1 = *(_DWORD *)a1 + 4342687 * ((2 * (a1 & 0x1C8AB504) - a1 - 478852357) ^ 0xCAD75DB9);
  return (*(uint64_t (**)(void))((char *)*(&off_1E559D8D0 + (v1 ^ 0x52C))
                              + 8 * ((14 * (((*(void *)(a1 + 8) == 0) ^ v1) & 1)) ^ v1)
                              - 12))();
}

uint64_t sub_18DA2F0C0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 1011340354;
  *(_DWORD *)(result + 16) = -257308659;
  return result;
}

uint64_t sub_18DA2F0E0(uint64_t result)
{
  *(_DWORD *)(result + 16) = 257333659;
  return result;
}

void pspdoawubd0(uint64_t a1)
{
  __asm { BRAA            X8, X17 }
}

uint64_t sub_18DA2F138()
{
  return (*(uint64_t (**)(void))(v0 + 8 * ((2 * (*v1 == 0)) | 0x16Du)))(0);
}

uint64_t sub_18DA2F15C@<X0>(uint64_t a1@<X8>)
{
  (*(void (**)(uint64_t))(v1 + 17768))(a1);
  uint64_t result = 0;
  *int v2 = 0;
  return result;
}

uint64_t sub_18DA2F18C(uint64_t a1, uint64_t a2)
{
  int v2 = (uint64_t *)*(&off_1E559D8D0
                  + ((-105 * (dword_1E91BCC70 ^ 0x98 ^ dword_1E91BCC08)) ^ byte_18DDE8670[byte_18DDE7A30[(-105 * (dword_1E91BCC70 ^ 0x98 ^ dword_1E91BCC08))] ^ 0x11])
                  - 43);
  uint64_t v3 = (uint64_t)*(&off_1E559D8D0
                + ((-105 * ((dword_1E91BCC08 - *v2) ^ 0x98)) ^ byte_18DDE7830[byte_18DDE6DD0[(-105 * ((dword_1E91BCC08 - *v2) ^ 0x98))] ^ 0xAB])
                - 131);
  unint64_t v4 = (unint64_t)&v11[*v2 + *(void *)(v3 - 4)];
  uint64_t v5 = 178978711 * v4 + 0x65D966826B658768;
  unint64_t v6 = 178978711 * (v4 ^ 0x9A26997D949A7898);
  *int v2 = v5;
  *(void *)(v3 - 4) = v6;
  LOBYTE(v6) = -105 * ((v6 + *(_DWORD *)v2) ^ 0x98);
  int v7 = (char *)*(&off_1E559D8D0
               + ((-105 * ((dword_1E91BCC08 + dword_1E91BCC70) ^ 0x98)) ^ byte_18DDE7B30[byte_18DDE6FD0[(-105 * ((dword_1E91BCC08 + dword_1E91BCC70) ^ 0x98))] ^ 0x31])
               - 191)
     - 12;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))&v7[8
                                             * (byte_18DDE9844[(byte_18DDE847C[v6 - 12] ^ 0x80)
                                                                              - 4] ^ v6)
                                             + 16880])(a2);
  uint64_t v9 = *(uint64_t (**)(uint64_t))&v7[8
                                            * (byte_18DDE994C[(byte_18DDE8570[(-105 * ((*(_DWORD *)(v3 - 4) + *(_DWORD *)v2) ^ 0x98))] ^ 0x3B)
                                                                             - 12] ^ (-105
                                                                                    * ((*(_DWORD *)(v3 - 4)
                                                                                      + *(_DWORD *)v2) ^ 0x98)))
                                            + 16776];
  return v9(v8);
}

void sub_18DA2F388(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) + 1498267367 * ((a1 + 1641755986 - 2 * (a1 & 0x61DB3552)) ^ 0x4920095A);
  __asm { BRAA            X8, X17 }
}

uint64_t sub_18DA2F4FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,long long a39,long long a40)
{
  int v42 = v40 + 311;
  uint64_t v43 = (*(uint64_t (**)(long long *, void, uint64_t))(v41 + 8 * ((v40 + 311) ^ 0xE96)))(&a39, 0, 712);
  a39 = 0u;
  a40 = 0u;
  return (*(uint64_t (**)(uint64_t))(v41 + 8 * ((323 * (((v42 - 311) ^ 0x4DDLL) == 512)) | v42)))(v43);
}

uint64_t sub_18DA2F56C(unsigned char *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7, unsigned __int8 *a8)
{
  uint64_t v16 = *v9;
  int v17 = *a8;
  uint64_t v18 = *(void *)(a4 + 8 * (v8 - 1193));
  HIDWORD(v19) = ~v17;
  LODWORD(v19) = (v17 ^ 0x34) << 24;
  uint64_t v20 = v18 + 528;
  unint64_t v21 = (*v11 | ((*a2 ^ 0x35) << 8)) & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)((*(unsigned char *)(v18 + 528 + ((93 * *a1) ^ 0xDDLL)) ^ 0x9F) + 70) << 16) | ((*a6 ^ 0x12) << 24);
  char v22 = *(unsigned char *)(v18 + ((v19 >> 25) ^ 0xC9) + 257);
  char v23 = v22 & 0xA5 ^ ((v22 ^ 0x18 | 0xE6) - ((v22 ^ 0x18) & 0xB9) + ((v22 ^ 0x18) & 0x19)) ^ 0xFE;
  uint64_t v24 = *v10;
  unint64_t v25 = ((unint64_t)(v16[17] | ((*v10)[1] << 16) | ((*v270 ^ 0x12u) << 24)) << 33) | ((unint64_t)(*v14 ^ 0x12u) << 41) | ((((unint64_t)**v10 << 48) | ((unint64_t)(*v15 ^ 0x12u) << 40) | ((unint64_t)(103 * (v22 & 0xE3 ^ 0xC2 ^ ((((((v23 - ((2 * v23) & 0x2E) - 105) ^ 0x68) + 1) ^ (v23 - ((2 * v23) & 0x2E) - 105) ^ (((v23 - ((2 * v23) & 0x2E) - 105) ^ 0x78) - ((2 * ((v23 - ((2 * v23) & 0x2E) - 105) ^ 0x78) + 34) & 0x28) + 37)) & 0xFC) - 112))) << 32) | ((unint64_t)(*v270 ^ 0x12u) << 24)) >> 31);
  unint64_t v26 = ((unint64_t)(*v10)[3] << 8) | ((unint64_t)*v16 << 24) | ((unint64_t)v16[23] << 16) | *v273 | ((unint64_t)v16[19] << 32);
  unint64_t v27 = v26 ^ 0xFDEFDDE96F709A9FLL;
  uint64_t v28 = (2 * v26) & 0x1D2DEE1353ELL;
  unint64_t v29 = v25 ^ ((unint64_t)(*v10)[2] << 25) ^ 0x78CB9FFE33B27E2ELL;
  unint64_t v30 = v27 + 0x2102216908F6561 + v28;
  unint64_t v31 = ((unint64_t)v16[20] << 40)
      - (((unint64_t)v16[20] << 41) & 0xBE0000000000)
      - 0x1864A040272FE4D3;
  unint64_t v32 = (v30 - (v30 | v31 ^ 0xE79B5FBFD8D01B2DLL)) ^ ((v31 ^ 0x1864A040272FE4D2) + 1);
  unint64_t v33 = ((v32 - ((2 * v32) & 0xCF36BF7FB1A0365ALL) - 0x1864A040272FE4D3) ^ v31) + v30;
  uint64_t v34 = ((2 * *v13) & 0xEFFDDFFE) + (*v13 ^ 0x77FEEFFF) - 2013196287;
  char v35 = *(unsigned char *)(v18 + (((v16[8] >> 4) | (16 * v16[8])) ^ 0x7ELL));
  uint64_t v36 = v16[15];
  unint64_t v37 = (((unint64_t)v16[21] << 16) | ((unint64_t)v16[4] << 8) | ((unint64_t)v16[7] << 40) | ((unint64_t)v16[9] << 24) | ((unint64_t)v16[3] << 48) | ((unint64_t)v16[13] << 56) | v36)
      + ((unint64_t)(((((2 * v35) & 0x78) + (v35 ^ 0xBC)) ^ 0xF4) - 97) << 32);
  unint64_t v38 = (v21 | ((unint64_t)(*a3 ^ 0x12u) << 32)) ^ (((unint64_t)v16[14] << ((*v12 ^ 0x35) & 0x30) << ((*v12 ^ 0x35) & 0x30 ^ 0x30u)) | ((*v12 ^ 0x35) << 40) | ((unint64_t)(*v274 ^ 0x35u) << 56));
  uint64_t v39 = v34 ^ __ROR8__(v29, 33);
  unint64_t v40 = (((unint64_t)v16[10] << 48) | ((unint64_t)v16[6] << 56) | v16[22] | ((unint64_t)v16[11] << 32) | ((unint64_t)v16[5] << 24) | ((unint64_t)v16[2] << 8) | ((unint64_t)v16[18] << 16)) ^ ((unint64_t)v16[16] << 40);
  uint64_t v41 = v39 ^ 0x19D93F173C65CFFFLL;
  unint64_t v42 = (v33 + ((unint64_t)v16[1] << 48) - 2 * (v33 & ((unint64_t)v16[1] << 48))) ^ ((unint64_t)v16[12] << 56) ^ v39 ^ 0x19D93F173C65CFFFLL;
  unint64_t v43 = v38 ^ v37;
  uint64_t v44 = v40 ^ 0x401CB877269A8CACLL;
  uint64_t v45 = __ROR8__(v40 ^ 0x89AFF02163B0EF15 ^ (v37 - 2 * (v37 & 0x9AFF02163B0EF1DLL ^ v36 & 8) - 0x76500FDE9C4F10EBLL), 10);
  uint64_t v46 = (v42 ^ 0x5AEF8793EBB0E36) & (v39 ^ 0x23B7E0FCEEAB4DDALL);
  uint64_t v47 = __ROR8__(v45 ^ 0xBA668B1C6B75C483, 54);
  unint64_t v48 = v43 ^ 0x8856FC12B4940DDFLL;
  unint64_t v49 = ((((((v43 ^ 0x8856FC12B4940DDFLL) + (v43 ^ 0xE8950EE12279655BLL) + 1) ^ 1) + 1) ^ 0xFFFFFFFFFFFFFFFELL)
       + (v43 ^ 0xE8950EE12279655BLL)) & (v39 ^ 0xDC481F031154B225);
  uint64_t v50 = (v46 - ((2 * v46) & 0x4D7EAEFB286D883ELL) + 0x26BF577D9436C41FLL) ^ v43;
  unint64_t v51 = (v47 ^ 0x32A5C73BD3F1E71ELL) & (v40 ^ 0xBFE34788D9657353) ^ v42;
  unint64_t v52 = (v47 ^ 0xCD5A38C42C0E18E1) & v48;
  unint64_t v53 = (v42 ^ 0xFA510786C144F1C9) & (v40 ^ 0x401CB877269A8CACLL) ^ v41 ^ v50 ^ 0xCE2A599CB64FA144;
  unint64_t v54 = v49 ^ v47 ^ ((v50 ^ 0xCE2A599CB64FA144)
                   - 2 * ((v50 ^ 0xCE2A599CB64FA144) & 0x6D8F89AF383C6D63 ^ v50 & 1)
                   - 0x12707650C7C3929ELL);
  unint64_t v55 = ((v53 << 25) ^ 0x91C6A426DE000000) - ((2 * ((v53 << 25) ^ 0x91C6A426DE000000)) & 0x703AB0DDC4000000);
  unint64_t v56 = ((2 * (v49 ^ v47)) & 0x85C0310BF87BC8C8 ^ 0xFABFFFFC5F9C37F7)
      + (v49 ^ v47 ^ 0x32A5C73BD3F1E71ELL)
      - ((2 * (((2 * (v49 ^ v47)) & 0x85C0310BF87BC8C8 ^ 0xFABFFFFC5F9C37F7) + (v49 ^ v47 ^ 0x32A5C73BD3F1E71ELL))
        - 0x7A3FCEF407843736) & 0xA5DBD3D8D97C3FB8)
      + 0x15CE027268FC0441;
  *((void *)&v58 + 1) = v53 ^ 0xDC6FC8E352136FLL;
  *(void *)&long long v58 = v53 ^ 0x4000000000000000;
  uint64_t v57 = v58 >> 61;
  unint64_t v59 = (v52 ^ v44) - ((2 * (v52 ^ v44)) & 0xDE1EF7BD61850484) - 0x10F084214F3D7DBELL;
  *((void *)&v58 + 1) = v54 ^ 0x29F40;
  *(void *)&long long v58 = v54 ^ 0x743BF5703C980000;
  uint64_t v60 = v58 >> 19;
  unint64_t v61 = v53 ^ (v53 >> 39) ^ v57;
  v55 += 0x381D586EE25E759BLL;
  *((void *)&v58 + 1) = v56 ^ 0x5C;
  *(void *)&long long v58 = v56 ^ 0x52EDE9EC6CBE1F80;
  unint64_t v62 = ((v61 ^ 0x873EC859FE7221D4 ^ v55) + (v55 ^ 0x381D586EE25E759BLL) + 1) ^ ((v61 ^ 0xBF2390371C2C544FLL) + 1);
  unint64_t v63 = v54 ^ 0x9A102F3D87C9A3EFLL ^ ((v60 ^ (v54 >> 28) ^ (v54 << 36) ^ 0xC9A9F40743BF5703)
                                    - 2
                                    * ((v60 ^ (v54 >> 28) ^ (v54 << 36) ^ 0xC9A9F40743BF5703) & 0x6E2BDA4DBB533CBFLL ^ (v60 ^ (v54 >> 28)) & 0x10)
                                    - 0x11D425B244ACC351);
  unint64_t v64 = v59 ^ v51;
  uint64_t v65 = v56 ^ __ROR8__(v56, 41) ^ (v58 >> 7);
  uint64_t v66 = v61 ^ 0x69721455B3EE9861;
  *((void *)&v58 + 1) = v51;
  *(void *)&long long v58 = v51 ^ 0x944FC4CE0B1BE454;
  uint64_t v67 = v58 >> 1;
  uint64_t v68 = (v66 ^ (v62 - ((2 * v62) & 0x535CF73AA07A67A2) + 0x29AE7B9D503D33D1)) + (v55 ^ 0x381D586EE25E759BLL);
  *(void *)&long long v58 = __ROR8__(v51, 6);
  uint64_t v69 = ((v67 ^ v58 ^ 0x52513F13382C6F91)
       - ((2 * (v67 ^ v58 ^ 0x52513F13382C6F91)) & 0x7A1B63940D2CA7D8)
       + 0x3D0DB1CA069653ECLL) ^ v51;
  unint64_t v70 = v64 ^ (v64 << 47) ^ (v64 >> 10) ^ ((v64 >> 17) | (v64 << 54));
  unint64_t v71 = (v65 ^ 0xA4DBB6E382976928)
      + v63
      + 2 * ((v65 ^ 0xA4DBB6E382976928) & v63)
      - 4 * ((v65 ^ 0xA4DBB6E382976928) & v63);
  unint64_t v72 = (v65 ^ 0xA4DBB6E382976928) & (v70 ^ 0x7E4F73A3B0301945);
  uint64_t v73 = v71 - ((2 * v71) & 0x2477B50258E241B0) + 0x123BDA812C7120D8;
  *((void *)&v58 + 1) = v73 ^ 0x2C7120D8;
  *(void *)&long long v58 = v73 ^ 0x123BDA8100000000;
  uint64_t v74 = v58 >> 31;
  unint64_t v75 = v68 - ((2 * v68) & 0xF115C62C322786FCLL) - 0x7751CE9E6EC3C82;
  *(void *)&long long v58 = __ROR8__((v75 ^ 0x7751CE9E6EC3C81) & (v69 ^ 0xA94275040D8DB7B8), 31);
  unint64_t v76 = v65 ^ v70;
  unint64_t v77 = v70 ^ 0x7B08B206A11AD49 ^ (((v73 ^ 0x123BDA812C7120D8) & (v76 ^ 0xDA94C54032A7706DLL))
                                   - ((2 * ((v73 ^ 0x123BDA812C7120D8) & (v76 ^ 0xDA94C54032A7706DLL))) & 0xC000EF84BBC97E6)
                                   - 0x79FFF883DA21B40DLL);
  uint64_t v78 = v58 - ((2 * v58) & 0x31C1B15E14B21F2CLL) - 0x671F2750F5A6F06ALL;
  unint64_t v79 = v78 ^ 0xE88BD8AAAF7EDD49 ^ (v74 - ((2 * v74) & 0x31C1B15E14B21F2CLL) - 0x671F2750F5A6F06ALL);
  v74 ^= 0x17742755508122B6uLL;
  uint64_t v80 = (v74 + v79 + 1) ^ ((v78 ^ 0x671F2750F5A6F069) + 1);
  uint64_t v81 = (v73 ^ 0x123BDA812C7120D8 | v75 ^ 0x7751CE9E6EC3C81) ^ v76;
  unint64_t v82 = ((v69 ^ 0xA94275040D8DB7B8)
       - 2 * ((v69 ^ 0xA94275040D8DB7B8) & 0x788AE3161913C37FLL ^ v69 & 1)
       - 0x7751CE9E6EC3C82) ^ v75;
  unint64_t v83 = ((v70 ^ 0x81B08C5C4FCFE6BALL) & ~v82)
      - ((2 * ((v70 ^ 0x81B08C5C4FCFE6BALL) & ~v82)) & 0xF115C62C322786FCLL)
      - 0x7751CE9E6EC3C82;
  unint64_t v84 = v82 ^ v72;
  *(void *)&long long v58 = __ROR8__(((v80 - ((2 * v80) & 0x31C1B15E14B21F2CLL) - 0x671F2750F5A6F06ALL) ^ v78) + v74, 33);
  uint64_t v85 = v83 ^ v75 ^ v58;
  unint64_t v86 = (((v84 ^ 0xABFA444E8F9D8EEELL) + 0x5405BBB170627112) ^ -(uint64_t)v84)
      - ((2 * (((v84 ^ 0xABFA444E8F9D8EEELL) + 0x5405BBB170627112) ^ -(uint64_t)v84)) & 0x4964C53BCF9E0EC0);
  uint64_t v87 = v84 ^ 0x24B2629DE7CF0760;
  uint64_t v88 = (v77 - ((2 * v77) & 0x4964C53BCF9E0EC0) + 0x24B2629DE7CF0760) ^ v84 ^ 0x24B2629DE7CF0760;
  uint64_t v89 = (v86 + 0x24B2629DE7CF0760) ^ v87;
  uint64_t v90 = 2 * v89 + 0x280B7762E0C4E222;
  v89 += 0x6C628CB48A2DF0ABLL;
  *(void *)&long long v58 = __ROR8__(__ROR8__(v58 ^ 0x7BBE7F2A1BE4CC86, 8) ^ __ROR8__(v81 ^ 0xDA94C54032A7706DLL, 8), 56);
  unint64_t v91 = v58 - ((2 * v58) & 0xBB148BA01F49592CLL);
  *((void *)&v58 + 1) = v85 ^ 0x16C16512DF901776;
  *(void *)&long long v58 = v85 ^ 0x2000000000000000;
  uint64_t v92 = v58 >> 61;
  uint64_t v93 = v89 - (v90 & 0x30B9A2063396FF34);
  *((void *)&v58 + 1) = v89;
  *(void *)&long long v58 = v93 ^ 0x185CD10319CB7F9ALL;
  uint64_t v94 = v58 >> 1;
  *(void *)&long long v58 = __ROR8__(v93, 6);
  uint64_t v95 = ((v94 ^ v58 ^ 0x686173440C672DFELL)
       - ((2 * (v94 ^ v58 ^ 0x686173440C672DFELL)) & 0x30B9A2063396FF34)
       + 0x185CD10319CB7F9ALL) ^ v93;
  uint64_t v96 = v85 ^ __ROR8__(v85, 39) ^ v92;
  uint64_t v97 = v96 ^ 0x604247CDFEA2170DLL;
  uint64_t v98 = (v96 ^ 0x604247CDFEA2170DLL ^ (v95 + 0x733C02F1CD5F82B1 - ((2 * v95) & 0x667805E39ABF0562))) & 0x71B1ECC793809309;
  unint64_t v99 = v96 ^ 0x604247CDFEA2170DLL ^ (v95 + 0x733C02F1CD5F82B1 - ((2 * v95) & 0xE67805E39ABF0562));
  *((void *)&v58 + 1) = v88 ^ 0x108;
  *(void *)&long long v58 = v88 ^ 0x7C7C423D5555C00;
  uint64_t v100 = v58 >> 10;
  v91 += 0x5D8A45D00FA4AC96;
  *((void *)&v58 + 1) = v91 ^ 0x4AC96;
  *(void *)&long long v58 = v91 ^ 0x5D8A45D00FA00000;
  uint64_t v101 = v88 ^ __ROR8__(v88, 17) ^ v100;
  uint64_t v102 = ((v58 >> 19) ^ (v91 >> 28) ^ (v91 << 36) ^ 0xFA4AC965D8A45D00)
       - 2
       * (((v58 >> 19) ^ (v91 >> 28) ^ (v91 << 36) ^ 0xFA4AC965D8A45D00) & 0x5D8A45D00FA4AC9FLL ^ ((v58 >> 19) ^ (v91 >> 28)) & 9)
       + 0x5D8A45D00FA4AC96;
  unint64_t v103 = (v99 & 0x8E4E13386C7F6CF6 | v98)
       - ((2 * (v99 & 0x8E4E13386C7F6CF6 | v98)) & 0xFDE7764F983B270)
       + 0x7EF3BB27CC1D938;
  uint64_t v104 = v103 ^ 0x7EF3BB27CC1D938;
  unint64_t v105 = ((v103 & 0xFFFFFFFFFFFFDFFFLL | (((v99 >> 13) & 1) << 13)) ^ 0xF810C44D833E26C7) & (v101 ^ 0xA943C7C03744B7A2);
  *((void *)&v58 + 1) = v81 ^ 4;
  *(void *)&long long v58 = v81 ^ 0x8144DFC1D01B8200;
  uint64_t v106 = v81 ^ __ROR8__(v81, 41) ^ (v58 >> 7);
  uint64_t v107 = v91 ^ v106 ^ v102;
  unint64_t v108 = (v107 ^ 0x9E532DFF2DA4DF94) & (v96 ^ 0x137E453C33FD95BCLL);
  uint64_t v109 = (v101 ^ 0x56BC383FC8BB485DLL) & (v106 ^ 0x61ACD200D25B206BLL);
  unint64_t v110 = v107 ^ v104 & (v96 ^ 0xEC81BAC3CC026A43);
  unint64_t v111 = v110 & 0x800000000000 ^ 0xD64DFFAF79AD7F7BLL;
  uint64_t v112 = v104 + v109;
  unint64_t v113 = (v105 - ((2 * v105) & 0xE67805E39ABF0562) + 0x733C02F1CD5F82B1) ^ v97;
  uint64_t v114 = v101 ^ v106;
  unint64_t v115 = v108 ^ v101 ^ v106;
  uint64_t v116 = v114 ^ 0x3710EA3F1AE06836;
  uint64_t v117 = v113 - ((2 * v113) & 0x7A025A7B2DE4BC8CLL) + 0x3D012D3D96F25E46;
  unint64_t v118 = v111 + 0x7BFBC7D98E7EC2F7;
  if (((v111 + 0x29B2805086528085) & (v115 ^ 0xC8EF15C0E51F97C9)) != 0) {
    unint64_t v118 = 0x2896C73881D9C1EDLL - v111;
  }
  unint64_t v119 = ((v107 ^ 0x61ACD200D25B206BLL) & v116)
       - ((2 * ((v107 ^ 0x61ACD200D25B206BLL) & v116)) & 0xA4806652A336DC00)
       - 0x2DBFCCD6AE649200;
  unint64_t v120 = v117 ^ v110;
  unint64_t v121 = ((v115 ^ 0xC8EF15C0E51F97C9) - 0x52494789082C4272 + v118) ^ v110 & 0xFFFF7FFFFFFFFFFFLL;
  unint64_t v122 = v121 ^ 0x294E37599B5857F8 ^ (((v121 << 45) ^ 0x9DAD800000000000)
                                      - ((2 * ((v121 << 45) ^ 0x9DAD800000000000)) & 0xC5EE000000000000)
                                      - 0x1D08FD69282B456CLL);
  uint64_t v123 = v112 - 2 * (v104 & v109);
  unint64_t v124 = v123 ^ v101 ^ v119;
  uint64_t v125 = v122 + ((v121 >> 19) ^ 0x197726B9E991) - 2 * (v122 & ((v121 >> 19) ^ 0x197726B9E991));
  uint64_t v126 = (v120 >> 61) ^ 6;
  uint64_t v127 = ((v120 ^ 0x24454552CF9C236FLL ^ (v120 >> 61)) + v126 + 1) ^ ((v120 ^ 0x24454552CF9C2369) + 1);
  unint64_t v128 = (v120 ^ 0x1F33E80CC66B5995 ^ (v127 - ((2 * v127) & 0x8912A543EC110A06) - 0x3B76AD5E09F77AFDLL)) + v126;
  *((void *)&v130 + 1) = v123 ^ 0x16;
  *(void *)&long long v130 = v123 ^ 0x589DBFDD7823EE40;
  uint64_t v129 = v130 >> 6;
  *((void *)&v130 + 1) = v120 ^ 0x2D3063DC96;
  *(void *)&long long v130 = (v120 & 0xE3B31A03 ^ 0x20231802) + (v120 ^ 0xDBBABAADD3D0C695);
  unint64_t v131 = v125 ^ __ROR8__(v121, 28) ^ 0xC8CED6CCBB935CF4;
  uint64_t v132 = (v130 >> 39) ^ (8 * v120);
  *((void *)&v130 + 1) = v112;
  *(void *)&long long v130 = v123 ^ 0x589DBFDD7823EE56;
  uint64_t v133 = v130 >> 1;
  *((void *)&v130 + 1) = v115 ^ 0x46;
  *(void *)&long long v130 = v115 ^ 0x425672A150A4C580;
  unint64_t v134 = v132 ^ v128;
  uint64_t v135 = v115 ^ __ROR8__(v115, 41) ^ (v130 >> 7);
  uint64_t v136 = v123 ^ 0x430EB1BA97972E63 ^ ((v133 ^ v129)
                                      - ((2 * (v133 ^ v129)) & 0x37261CCFDF69806ALL)
                                      + 0x1B930E67EFB4C035);
  uint64_t v137 = v136 - ((2 * v136) & 0x10DF11EC37875916) + 0x86F88F61BC3AC8BLL;
  *((void *)&v130 + 1) = v124 ^ 0x52;
  *(void *)&long long v130 = v124 ^ 0x24D91A625E7F0400;
  unint64_t v138 = (v131 ^ v135 ^ 0xED01DF3C4C7A1100) & (v134 ^ 0xDDD5D569831EE4B0);
  uint64_t v139 = v124 ^ __ROR8__(v124, 17) ^ (v130 >> 10);
  uint64_t v140 = v134 ^ v137;
  uint64_t v141 = v139 ^ 0x4ABF789BD80B34B5 ^ v135;
  uint64_t v142 = v131 ^ v135 ^ (v134 ^ 0x222A2A967CE11B4FLL) & v136;
  unint64_t v143 = (v134 ^ v137 ^ 0x2A45A2606722B7C4) & (v139 ^ 0xA6F0080ED34E2B6DLL) ^ v134;
  unint64_t v144 = v138 ^ v141;
  unint64_t v145 = (v131 ^ v135 ^ 0x12FE20C3B385EEFFLL | v141 ^ 0x14EAFA9473F0ED8)
       + ((v131 - ((2 * v131) & 0xD89EE12A168A3FB0) - 0x13B08F6AF4BAE028) ^ v139 ^ 0x4ABF789BD80B34B5);
  unint64_t v146 = (v138 ^ v141 ^ 0xFEB15056B8C0F127)
       + (v142 ^ 0x12FE20C3B385EEFFLL)
       - 2 * ((v142 ^ 0x12FE20C3B385EEFFLL) & (v141 ^ 0x7EB15056B8C0F127));
  unint64_t v147 = ((v142 ^ 0xE486E0C1BB2BFEAELL) + (v142 ^ v143 ^ 0xC6ACCA57C7CAE5E1) + 1) ^ ((v143 ^ 0x222A2A967CE11B4FLL) + 1);
  unint64_t v148 = (v143 ^ 0xB7CC7A5F58220B6ALL ^ (v147 - ((2 * v147) & 0xD4335E6DB679DFB4) + 0x6A19AF36DB3CEFDALL))
       + (v142 ^ 0xE486E0C1BB2BFEAELL);
  unint64_t v149 = v140 ^ (v139 ^ 0x590FF7F12CB1D492) & (v135 ^ 0x12FE20C3B385EEFFLL);
  unint64_t v150 = v148 - ((2 * v148) & 0x71BFBB330C82F4B2) + 0x38DFDD9986417A59;
  *((void *)&v130 + 1) = v146 ^ 0xBB4B01C;
  *(void *)&long long v130 = v146 ^ 0x2DC88F52D0000000;
  uint64_t v152 = v130 >> 28;
  unint64_t v153 = v145 + 1;
  uint64_t v154 = 0x85ABF249EC1E2BF0 - (v139 & 0x8000000000 | 0x42D5F924F60F15F8);
  if ((v153 & v139 & 0x8000000000) == 0) {
    uint64_t v154 = v139 & 0x8000000000 | 0x42D5F924F60F15F8;
  }
  unint64_t v155 = v139 & 0xFFFFFF7FFFFFFFFFLL ^ 0xA6F0080ED34E2B6DLL ^ (v153 - 0x42D5F924F60F15F8 + v154);
  unint64_t v151 = (((v150 >> 61) ^ 1) + ((v150 >> 60) | 0xFFFFFFFFFFFFFFFDLL) + 0x38DFDD9986417A5ALL) ^ v150;
  unint64_t v156 = v151 & 0x6AFDE4CB806809B4 ^ ((8 * v150) ^ 0xC6FEECCC320BD2C8) & 0x6AFDE4CB806809B0 | v151 & 0x95021B347F97F64BLL ^ ((8 * v150) ^ 0xC6FEECCC320BD2C8) & 0x95021B347F97F648;
  *((void *)&v157 + 1) = v146;
  *(void *)&long long v157 = v146 ^ 0x2DC88F52DBB00000;
  uint64_t v158 = ((v157 >> 19) ^ v152) - ((2 * ((v157 >> 19) ^ v152)) & 0x4F26497141B6E6D0) - 0x586CDB475F248C98;
  uint64_t v159 = (v155 - ((2 * v155) & 0x12F6F0BE06C58F4CLL) - 0x768487A0FC9D385ALL) ^ v149;
  *((void *)&v157 + 1) = (v155 - ((2 * v155) & 0x6C58F4C) + 56805286) ^ v149 ^ 0x9F;
  *(void *)&long long v157 = v159 ^ 0x7B48A69D79348800;
  uint64_t v160 = v157 >> 10;
  *((void *)&v157 + 1) = ~v149;
  *(void *)&long long v157 = v149 ^ 0x7B1696201079081CLL;
  unint64_t v161 = v156 ^ __ROR8__(v150, 39);
  unint64_t v162 = (v144 >> 41) | (v144 << 57);
  unint64_t v163 = (16 * (v144 & 0x1FFFFFFFFFFLL)) ^ __ROR8__(v144 ^ 0xDFC253D1FD1FD170 ^ (((v144 >> 7) ^ 0x1672EEF82D7B2BDLL)- ((2 * ((v144 >> 7) ^ 0x1672EEF82D7B2BDLL)) & 0xAA48212D8D1FC4)+ 0x6C55241096C68FE2), 19) ^ 0xC6ED64C466A8CC27;
  unint64_t v164 = v159 ^ ((v159 ^ 0x5CC125C09BBF8F9DuLL) >> 17) ^ v160 ^ ((v159 ^ 0x5CC125C09BBF8F9DLL) << 47);
  uint64_t v165 = v149 ^ 0x8168270DC642AFF9 ^ (((v157 >> 1) ^ (v149 >> 6) ^ (v149 << 58) ^ 0x75EC5A588041E420)
                                      - 2
                                      * (((v157 >> 1) ^ (v149 >> 6) ^ (v149 << 58) ^ 0x75EC5A588041E420) & 0x7A7EB12DD63BA7F5 ^ ((v157 >> 1) ^ (v149 >> 6)) & 0x11)
                                      - 0x5814ED229C4581CLL);
  unint64_t v166 = v162 ^ __ROR8__(v163, 45);
  uint64_t v167 = v165 - ((2 * v165) & 0xABA117584F1DACBALL);
  unint64_t v168 = ((v158 ^ v146 ^ 0x8A5BABEA7B6FC374)
        - 2 * ((v158 ^ v146 ^ 0x8A5BABEA7B6FC374) & 0x74E61C46DDA1EEEFLL ^ (v158 ^ v146) & 8)
        - 0xB19E3B9225E1119) ^ v166;
  unint64_t v169 = v168 ^ 0x807345AFF5C61237;
  unint64_t v170 = v168 ^ 0xB18DFA21F1AA51D6 ^ (((v161 ^ 0xCCF37D0B4D8E4044) & v165)
                                      - ((2 * ((v161 ^ 0xCCF37D0B4D8E4044) & v165)) & 0x63FD7F1C08D887C2)
                                      + 0x31FEBF8E046C43E1);
  unint64_t v171 = (v164 ^ 0x7364AA647658625) & (v166 ^ 0xE296D9E92867FCD0);
  unint64_t v172 = v164 ^ v166;
  unint64_t v173 = ~(2 * v169) + v169;
  unint64_t v174 = v164 ^ 0x6126DB03C2C5D4DALL ^ (((v164 ^ v166 ^ 0xE5A0934F6F027AF5) & v169)
                                      - ((2 * ((v164 ^ v166 ^ 0xE5A0934F6F027AF5) & v169)) & 0x33DEDCB4F4BF5A00)
                                      - 0x661091A585A05300);
  uint64_t v175 = v161 ^ 0x66DC095895FF69E6;
  unint64_t v176 = (v161 ^ 0x330C82F4B271BFBBLL) & v173 ^ v172;
  *((void *)&v157 + 1) = v170 ^ v176 ^ 0x38226;
  *(void *)&long long v157 = v170 ^ v176 ^ 0xE4EBE7BA21480000;
  unint64_t v177 = v170 ^ v176 ^ 0x1A5F6CB090FD850ALL;
  uint64_t v178 = (v157 >> 19) ^ (v177 >> 28) ^ 0xFEB48B0ABLL;
  unint64_t v179 = v170 ^ v176 ^ 0xB0698348A4094D22 ^ (v178 - ((2 * v178) & 0xA904C9E50A859E08) + 0x548264F28542CF04);
  uint64_t v180 = v175 ^ (v167 + 0x55D08BAC278ED65DLL);
  unint64_t v181 = v180 ^ v171;
  uint64_t v182 = (v174 - ((2 * v174) & 0x6F225E1C7D98D1B0) + 0x37912F0E3ECC68D8) ^ v180 ^ v171;
  *((void *)&v157 + 1) = v182 ^ 0x30B;
  *(void *)&long long v157 = v182 ^ 0x48349AD358977000;
  uint64_t v183 = v179 + ((v177 << 36) ^ 0x1B6072C000000000) - 2 * (v179 & ((v177 << 36) ^ 0x1B6072C000000000));
  uint64_t v184 = v182 ^ __ROR8__(v182, 17) ^ (v157 >> 10);
  unint64_t v185 = v176 ^ (v176 >> 7);
  unint64_t v186 = ((v185 ^ 0x8AB50B1CBDF42788) + (v185 ^ 0x84FBCA2A57F50737 ^ v184) + 1) ^ ((v184 ^ 0xE4EC136EA0120BFLL) + 1);
  unint64_t v187 = (v184 ^ 0x67C10EC32E422F94 ^ (v186 - ((2 * v186) & 0x2CE060147779E1A8) - 0x698FCFF5C4430F2CLL))
       + (v185 ^ 0x8AB50B1CBDF42788);
  uint64_t v188 = v187 - ((2 * v187) & 0x5069819D29A21E42) + 0x2834C0CE94D10F21;
  unint64_t v189 = ((v188 ^ v183) & 0x400000000000000 | (((((v188 ^ v183) & 0x400000000000000uLL) >> 58) & 1) << 59)) ^ 0x54CEBE8DDB3FBFF9;
  BOOL v190 = ((v189 - 0x54CEBE8DDB3FBFF9) & (v188 ^ 0x2800000000000000)) == 0;
  unint64_t v191 = v189 - 0x104E180419030419;
  unint64_t v192 = 0x994F65179D7C7BD9 - v189;
  if (v190) {
    unint64_t v193 = v191;
  }
  else {
    unint64_t v193 = v192;
  }
  BOOL v190 = v75 == 0x7751CE9E6EC3C81;
  unint64_t v194 = (((v164 ^ 0xF8C9B559B89A79DALL) & ~v180)
        - ((2 * ((v164 ^ 0xF8C9B559B89A79DALL) & ~v180)) & 0xABA117584F1DACBALL)
        + 0x55D08BAC278ED65DLL) ^ v175;
  *((void *)&v195 + 1) = v194 ^ v170 ^ 0x1AEE2BF38C2AFA85;
  *(void *)&long long v195 = v194 ^ ~v170;
  uint64_t v196 = v194 ^ v170 ^ __ROR8__(v194 ^ v170, 39) ^ (v195 >> 61);
  unint64_t v197 = (v188 ^ v183) & 0xFBFFFFFFFFFFFFFFLL ^ 0x2834C0CE94D10F21 ^ ((v188 ^ 0x2834C0CE94D10F21)
                                                                      - 0x4480A689C23CBBE0
                                                                      + v193);
  unint64_t v198 = (((v181 << 58) ^ (v181 << 63)) & 0xFC00000000000000 | (v181 >> 6)) ^ (v181 >> 1) ^ 0x10FFB03654A7558BLL;
  unint64_t v199 = v181 ^ 0xA9E055D70C4304FDLL ^ (v198 - ((2 * v198) & 0x3339A333A7E06CFELL) - 0x66632E662C0FC981);
  unint64_t v200 = ((v176 >> 41) | (v176 << 57)) ^ 0x860000000045D127 ^ v197;
  unint64_t v201 = v200 - ((2 * v200) & 0x8D7FCA65ECF050BALL) + 0x46BFE532F678285DLL;
  uint64_t v202 = v188 ^ v185;
  unint64_t v203 = v183 ^ v185 ^ v201;
  unint64_t v204 = ((v176 << 23) ^ 0xC1DD4092E1800000)
       - ((2 * ((v176 << 23) ^ 0xC1DD4092E1800000)) & 0xC5FCD4C604000000)
       + 0x62FE6A63024C6845;
  uint64_t v205 = ((v204 ^ 0x510B7BB2B63F986FLL ^ v203) + (v204 ^ 0x62FE6A63024C6844)) ^ ((v203 ^ 0x33F511D1B473F02ALL) + 1);
  unint64_t v206 = v199 - ((2 * v199) & 0x57C656B2CEECB71CLL);
  unint64_t v207 = ((v196 ^ 0xE20981F97820D92DLL) & v199) - ((2 * ((v196 ^ 0xE20981F97820D92DLL) & v199)) & 0x14FFBDF0C6E6B3C8);
  unint64_t v208 = (v203 ^ 0x9C0934285B9BFFC4 ^ (v205 - ((2 * v205) & 0xA007B40C202FE022) + 0x5003DA061017F011))
       + (v204 ^ 0x62FE6A63024C6845);
  unint64_t v209 = v196 ^ 0xB615555FE0A97D5CLL;
  uint64_t v210 = v208 - ((2 * v208) & 0x18CD06A417F0B646) + 0xC6683520BF85B23;
  unint64_t v211 = v210 ^ v197;
  unint64_t v212 = v211 & 0x72B02C473389F41 ^ 0x403020412280801 ^ (v211 ^ 0xF3997CADF407A4DCLL) & (v196 ^ 0x1ADD7CC2F4E7B993);
  uint64_t v213 = ((2 * v212) & 0xCF34F3AE9A875A0) - v212 - 0x679A79D74D43AD1;
  unint64_t v214 = v210 ^ v202 ^ 0xCE97DAA59CACF21DLL;
  uint64_t v215 = ((v214 ^ 0x60709225BE718197) + (v214 ^ 0x61033738A88D3706 ^ v213) + 1) ^ ((v213 ^ 0x173A51D16FCB691) + 1);
  unint64_t v216 = (v213 ^ 0xD0E2573F32F3C019 ^ (v215 - ((2 * v215) & 0x5CDC1BBBB7E112EELL) + 0x2E6E0DDDDBF08977))
       + (v214 ^ 0x60709225BE718197);
  unint64_t v217 = v207 + 0xA7FDEF8637359E4;
  unint64_t v218 = v211 ^ 0xF3997CADF407A4DCLL ^ (v207 + 0xA7FDEF8637359E4);
  if (v190) {
    unint64_t v218 = v217;
  }
  uint64_t v219 = v218 ^ 0xA7FDEF8637359E4;
  uint64_t v220 = v217 ^ 0xA7FDEF8637359E4;
  uint64_t v221 = (v206 - 0x541CD4A69889A472) ^ v209;
  unint64_t v222 = (((v202 ^ 0xA281CBD2292528A9) & ~v221)
        - ((2 * ((v202 ^ 0xA281CBD2292528A9) & ~v221)) & 0x57C656B2CEECB71CLL)
        - 0x541CD4A69889A472) ^ v209;
  uint64_t v223 = v211 ^ 0xC6683520BF85B23;
  uint64_t v224 = v219 & (v211 ^ 0xC6683520BF85B23) ^ (v211 ^ 0xC6683520BF85B23 | v220);
  unint64_t v225 = v216 ^ v224;
  unint64_t v226 = v216 ^ v224 ^ 0xA0728460B3E26F5DLL ^ ((((v216 ^ v224) >> 19) ^ 0xFC25710291FLL)
                                             - ((2 * (((v216 ^ v224) >> 19) ^ 0xFC25710291FLL)) & 0x39C3F6374704)
                                             - 0x219FC31E04E45C7ELL);
  uint64_t v227 = v226
       + (((v216 ^ v224) << 45) ^ 0x399BE00000000000)
       - 2 * (v226 & (((v216 ^ v224) << 45) ^ 0x399BE00000000000));
  unint64_t v228 = v227 - 2 * (v227 & 0x818A2E447C7B57FLL ^ v226 & 4);
  unint64_t v229 = v222 ^ v224;
  unint64_t v230 = (v216 ^ v224) >> 28;
  unint64_t v231 = v230 ^ 0x8818A2E3A6EC3D6FLL;
  v230 ^= 0x7E12B8814uLL;
  v228 -= 0x77E75D1BB8384A85;
  uint64_t v232 = (v231 ^ v228) + v230 - 2 * (v231 ^ v228);
  unint64_t v233 = (((v228 ^ 0x77E75D1BB8384A84) + 1) ^ v228 ^ (v232 - ((2 * v232) & 0x103145C88F8F6AF6) - 0x77E75D1BB8384A85))
       + v230;
  uint64_t v234 = v233 - ((2 * v233) & 0x28DEA3FFE1CB11D2) + 0x146F51FFF0E588E9;
  uint64_t v235 = v234 ^ (v225 << 36);
  unint64_t v236 = (v235 ^ 0x9BF39C0FF0E588E9) >> (v202 & 8 ^ 8) >> (v202 & 8);
  uint64_t v237 = v18 + 787;
  LODWORD(v225) = *(unsigned __int8 *)(v18 + 787 + ((v229 >> 58) | 0x47));
  *unint64_t v265 = v236 - ((2 * v236) & 0x6A) + 53;
  unint64_t v238 = v229 ^ (65
                                * ((((((v225 >> 2) | ((_BYTE)v225 << 6)) ^ 0x62) >> 6) | (4 * (((v225 >> 2) | ((_BYTE)v225 << 6)) ^ 0x62))) ^ (v225 >> 3) & 6 ^ 0x30)) ^ (8 * v229) ^ (v229 >> 39) ^ (v229 << 25);
  v16[14] = BYTE6(v235) ^ 0xF3;
  v24[1] = BYTE2(v238) ^ 0x63;
  *uint64_t v266 = v234 ^ 0xE9;
  *unint64_t v267 = (BYTE4(v235) ^ 0xF) - ((2 * (BYTE4(v235) ^ 0xF)) & 0x24) + 18;
  *unint64_t v274 = (HIBYTE(v235) ^ 0x9B) - ((2 * (HIBYTE(v235) ^ 0x9B)) & 0x6A) + 53;
  *uint64_t v268 = BYTE2(v234) ^ 0xE5;
  v16[17] = v238 ^ 0xA3;
  *uint64_t v269 = (BYTE4(v238) ^ 0x42) - ((2 * BYTE4(v238)) & 0x6A) + 53;
  *char v271 = (BYTE3(v234) ^ 0xF0) - 2 * ((BYTE3(v234) ^ 0xF0) & 0x1A ^ BYTE3(v234) & 8) + 18;
  unint64_t v239 = (v210 ^ 0xC6683520BF85B23) & (v202 ^ 0x5D7E342DD6DAD756) ^ v221;
  unint64_t v240 = v239 ^ v202 ^ 0xCE97DAA59CACF21DLL ^ ((v223 & (v214 ^ 0x9F8F6DDA418E7E68))
                                             - ((2 * (v223 & (v214 ^ 0x9F8F6DDA418E7E68))) & 0xD82C22EF6B13B568)
                                             + 0x6C161177B589DAB4);
  *unint64_t v270 = (BYTE3(v238) ^ 0x95) - 2 * ((BYTE3(v238) ^ 0x95) & 0x1A ^ BYTE3(v238) & 8) + 18;
  unint64_t v242 = ((v239 << 58) ^ 0xF400000000000000)
       - ((2 * ((v239 << 58) ^ 0xF400000000000000)) & 0xEFFFFFFFFFFFFFFFLL)
       + 0x756AE755DF55BD2FLL;
  unint64_t v243 = (v242 ^ 0x8A9518AA20AA42D4) + (v242 ^ 0x756AE755DF55BD2FLL);
  unint64_t v244 = v239 ^ 0x86C1996640AAFB19 ^ (((v239 >> 1) ^ 0x4E857063C9B0329ELL)
                                      - ((2 * ((v239 >> 1) ^ 0x4E857063C9B0329ELL)) & 0x3796F343A7953C48)
                                      + 0x1BCB79A1D3CA9E24);
  unint64_t v245 = v244 & 0xFFFFFFBFFFFFFFFFLL ^ (v239 >> 6) ^ (v244 & 0x4000000000 | ((unint64_t)~v239 << 63)) ^ 0x2742B831E4D8194;
  unint64_t v246 = 0x50205662FAB5E881 - v243;
  BOOL v190 = (v245 & (v243 + 5)) == 0;
  unint64_t v247 = v243 + 0x50205662FAB5E88BLL;
  if (!v190) {
    unint64_t v247 = v246;
  }
  unint64_t v248 = v245
       - 0x50205662FAB5E886
       + v247
       - ((2 * (v245 - 0x50205662FAB5E886 + v247)) & 0x2C8761C302305D70)
       + 0x1643B0E181182EB8;
  *uint64_t v272 = (BYTE5(v235) ^ 0x9C) - ((2 * (BYTE5(v235) ^ 0x9C)) & 0x6A) + 53;
  *uint64_t v263 = (BYTE1(v238) ^ 0x96) - ((2 * (BYTE1(v238) ^ 0x96)) & 0x24) + 18;
  unsigned int v249 = *(unsigned __int8 *)(v237 + (((v238 >> 37) & 0xF8 | (v238 >> 45) & 7) ^ 0x54));
  *uint64_t v24 = BYTE6(v238) ^ 0xF8;
  *uint64_t v273 = v248 ^ 0xB8;
  uint64_t v241 = ((v240 << 54) ^ 0x4D00000000000000) - ((v240 << 55) & 0x6500000000000000);
  unint64_t v250 = (((((v241 + 0x32A58B17089B5C98) ^ 0x32A58B17089B5C98) & 0xFFFF800000000000 | (v240 >> 17)) ^ 0x75B1976648A8)
        + 2
        * (((v240 >> 17) ^ 0x75B1976648A8)
         + ((v240 >> 17) ^ 0x7FFF8A4E6899B757)
         + ((v241 + 0x32A58B17089B5C98) ^ 0x32A58B17089B5C98)
         + ((v241 + 0x32A58B17089B5C98) ^ 0x4D5A74E8F764A367))
        + 4) ^ (((v240 >> 10) ^ 0x3AD8CBB324540CLL)
              + (v240 ^ 0xEB632ECC91503134)
              - 2 * (((v240 >> 10) ^ 0x3AD8CBB324540CLL) & (v240 ^ 0x6B632ECC91503134)));
  unint64_t v251 = v216 ^ (v216 << 23) ^ ((v216 >> 7) ^ (v216 >> 41) | (v216 << 57));
  *uint64_t v262 = 65 * (v249 ^ 0xB9 ^ (v249 >> 3) & 6) + (~(2 * (v249 ^ 0xB9 ^ (v249 >> 3) & 6)) | 0xDB) + 19;
  v24[2] = HIBYTE(v238) ^ 0xB0;
  unsigned int v252 = *(unsigned __int8 *)(v237 + (((v248 >> 5) & 0xF8 | ((unsigned __int16)v248 >> 13)) ^ 0xE));
  v16[23] = BYTE2(v248) ^ 0x18;
  v16[1] = BYTE6(v248) ^ 0x43;
  v16[5] = BYTE3(v250);
  unint64_t v253 = v250 ^ (v240 << 47);
  v24[3] = 65 * (v252 ^ 0xB9 ^ (v252 >> 3) & 6);
  v16[19] = BYTE4(v248) ^ 0xE1;
  *uint64_t v16 = BYTE3(v248) ^ 0x81;
  v16[12] = ((v248 ^ v242) >> 56) ^ 0x63;
  v16[2] = BYTE1(v250);
  v16[18] = BYTE2(v250);
  v16[11] = BYTE4(v250);
  v16[15] = v251 ^ 0xA8;
  v16[22] = v250;
  v16[6] = HIBYTE(v253) ^ 0x18;
  v16[20] = BYTE5(v248) ^ 0xB0;
  v16[16] = BYTE5(v253);
  v16[10] = BYTE6(v253) ^ 0x9A;
  v16[4] = (*(unsigned char *)(v20 + ((93 * (BYTE1(v251) ^ 0x3F)) ^ 0xDDLL)) ^ 0x9F) + 70;
  v16[21] = BYTE2(v251) ^ 0x90;
  int v254 = ((((v251 >> 52) ^ 0x22A80E2E) & 0x2200E26) - ((2 * ((v251 >> 52) ^ 0x22A80E2E)) & 0x40084C) + 762164350) ^ ((v251 >> 52) ^ 0x22A80E2E) & 0x2200ED6;
  int v255 = (v254 & 0x16C4B5E ^ 0x10324900) + (v254 ^ 0x2F4DB65E) - ((v254 ^ 0x2F4DB65E) & 0x1604B5E);
  char v256 = *(unsigned char *)(v20
                  + (((93 * (BYTE3(v251) ^ 0x1D)) & 0xFC | (unint64_t)((BYTE3(v251) ^ 0x1D) & 3)) ^ 0xDD));
  v16[7] = BYTE5(v251) ^ 0xC5;
  v16[8] = BYTE4(v251) ^ 0x46;
  v16[9] = (v256 ^ 0x9F) + 70;
  BOOL v190 = v115 == 0x425672A150A4C5C6;
  uint64_t result = (93 * (BYTE6(v251) ^ 0x6B)) & 0x94;
  char v259 = *(unsigned char *)(v20
                  + ((result ^ ((93 * (BYTE6(v251) ^ 0x6B)) & 2 | 0x94) | ((93 * (BYTE6(v251) ^ 0x6B)) & 0x29 | 0x40) ^ (93 * (BYTE6(v251) ^ 0x6B)) & 0x40) ^ 9));
  char v260 = v259 ^ 0x80;
  if (v190) {
    char v260 = 70;
  }
  v16[3] = ((2 * (v259 & 0xC6 & v260)) ^ 0xC) + ((v259 & 0xC6 & v260 | v259 & 0xB9 ^ 0x99) ^ 0x40);
  int v257 = ((v251 >> 60) ^ 0xFDBFFFB3) + 37748802 + ((2 * (v251 >> 60)) & 0x1C ^ 0x18);
  v16[13] = ((*(unsigned char *)(v18
                       + (((v255 ^ 0xB979F6C6 ^ (((v257 - (v255 ^ 0x135E49CE | v257)) ^ ((v255 ^ 0xECA1B631) + 1))
                                               - ((2 * ((v257 - (v255 ^ 0x135E49CE | v257)) ^ ((v255 ^ 0xECA1B631) + 1))) & 0x544F7E10)
                                               - 1440235768))
                         + v257) ^ 0x7ELL))
            - 68) ^ 0xF4)
          - 97;
  *uint64_t v264 = v34 + 1;
  *unint64_t v261 = v235 ^ 0x9FFB9610D479B50DLL;
  return result;
}

uint64_t sub_18DA35178(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v2 = *(_DWORD *)(a1 + 12) + 1425831821 * (a1 ^ 0x502D9CD8);
  uint64_t v3 = *(void *)a1;
  LODWORD(v7) = (248152243 * ((&v7 + 638225892 - 2 * (&v7 & 0x260A8DE4)) ^ 0x3CCFC046)) ^ (v2 - 539734153);
  int v4 = v2 - 1998160811;
  uint64_t v5 = (char *)*(&off_1E559D8D0 + v2 - 1998160811) - 12;
  (*(void (**)(uint64_t *))&v5[8 * v2 - 0x3B8CBDA20])(&v7);
  unsigned int v8 = v4 + 55633441 * ((((2 * &v7) | 0x8F14EA0C) - &v7 + 947227386) ^ 0xFF094EB9) + 2033;
  uint64_t v7 = v3;
  uint64_t result = (*(uint64_t (**)(uint64_t *))&v5[8 * v4 + 17616])(&v7);
  *(_DWORD *)(a1 + 8) = 1741044849 * v9 + 753596823;
  return result;
}

void sub_18DA352E8(_DWORD *a1)
{
  unsigned int v1 = *a1 - 1779465991 * ((2 * (a1 & 0x1363FC2D) - a1 - 325319726) ^ 0xCA58851C);
  __asm { BRAA            X10, X17 }
}

uint64_t sub_18DA3539C@<X0>(int a1@<W8>)
{
  int v2 = a1 ^ 0x655;
  BOOL v3 = (*(uint64_t (**)(uint64_t))(v1 + 8 * ((a1 ^ 0x655) + 1486)))(24) != 0;
  return (*(uint64_t (**)(void))(v1 + 8 * ((v3 * (((v2 - 42324773) & 0x285D4D7) - 772)) ^ v2)))();
}

uint64_t sub_18DA353FC(uint64_t a1)
{
  int v7 = (v4 + v5) | 0x91;
  uint64_t v10 = a1;
  unsigned int v9 = v7 - 4342687 * ((&v9 & 0x93E249A5 | ~(&v9 | 0x93E249A5)) ^ 0x45BFA118) + 142;
  uint64_t result = (*(uint64_t (**)(unsigned int *))(v3 + 8 * (v7 ^ 0xC23)))(&v9);
  *int v2 = a1;
  *(_DWORD *)(v1 + 4) = 1749540472;
  return result;
}

void sub_18DA354B0(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) - 55633441 * (((a1 | 0xB175B66B) - (a1 & 0xB175B66B)) ^ 0x89F68DD4);
  __asm { BRAA            X10, X17 }
}

uint64_t sub_18DA35544@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((((((a1 - 414) ^ 0x65A) + 612) ^ 0x5A8 ^ (511 * ((a1 - 414) ^ 0x65A))) * (*v1 == 0)) ^ (a1 - 414))))();
}

uint64_t sub_18DA35590@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (((((31 * (a1 ^ 0x27E) - 682) | 0x30A) - 584) * (*(void *)(v1 + 8) == 0)) ^ a1)))();
}

uint64_t sub_18DA355D0()
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(v3 + 8 * (v4 ^ 0xBA7)))(v1);
  *uint64_t v2 = 0;
  *(_DWORD *)(v0 + 12) = 1167607161;
  return result;
}

void d2234hmbdf(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1) {
    BOOL v4 = a3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  int v6 = v4 || a4 == 0;
  __asm { BRAA            X8, X17 }
}

uint64_t sub_18DA3570C(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  STACK[0x228] = a1;
  STACK[0x230] = a3;
  STACK[0x238] = a4;
  STACK[0x208] = (unint64_t)&STACK[0x29FEF841D9125DD3];
  STACK[0x200] = (unint64_t)&STACK[0x29FEF841D9125D9B];
  STACK[0x240] = (unint64_t)&STACK[0x29FEF841D9125D23];
  STACK[0x218] = (unint64_t)&STACK[0x5E8A393E0ABD6D3];
  STACK[0x248] = (unint64_t)&STACK[0x60DE7237762FB418];
  STACK[0x210] = (unint64_t)&STACK[0x5E8A393E0ABD673];
  STACK[0x220] = (unint64_t)&STACK[0x5E8A393E0ABD6AB];
  STACK[0x250] = (unint64_t)&STACK[0x60DE7237762FB3E0];
  *(_DWORD *)(v5 - 192) = (248152243 * ((2 * ((v5 - 192) & 0x1FCBD8B0) - (v5 - 192) + 1614030664) ^ 0x7AF16AEA)) ^ 0x56EDD32D;
  int v7 = *(uint64_t (**)(uint64_t))(v4 + 17296);
  STACK[0x2D0] = v4;
  uint64_t v8 = v7(v5 - 192);
  unsigned int v9 = *(uint64_t (**)(uint64_t))(STACK[0x2D0] + 8 * ((211 * (a2 == 0)) ^ 0x56E));
  STACK[0x278] = (unint64_t)&STACK[0x60DE7237762FB3D8];
  return v9(v8);
}

uint64_t sub_18DA35884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v11 - 184) = &STACK[0x420];
  *(_DWORD *)(v11 - 176) = v8
                         - 2076429097 * ((v11 - 1583445168 - 2 * ((v11 - 192) & 0xA19E8C10)) ^ 0xE3AC74E8)
                         + 1379286416;
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(a8 + 8 * (v8 + 1522)))(v11 - 192);
  return (*(uint64_t (**)(uint64_t))(STACK[0x2D0]
                                            + 8
                                            * (((*(_DWORD *)(v11 - 192) != ((v8 - 443) ^ 0x12F))
                                              * ((v8 - v9 - 334) ^ (v10 - 298))) ^ v8)))(v12);
}

uint64_t sub_18DA35928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v13 = v9 ^ (v12 - 283);
  LOBYTE(STACK[0x3D7]) = 1;
  LODWORD(STACK[0x41C]) = v8 + v11 - ((v8 << (v10 + (v9 ^ (v12 - 27)) + 101)) & 0x59DAC388);
  unint64_t v14 = STACK[0x250];
  LODWORD(STACK[0x260]) = v12 - 661;
  STACK[0x320] = *(void *)(a8 + 8 * (v13 + 609839945));
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(a8
                                                                                + 8
                                                                                * ((2025
                                                                                  * ((((v12 + (v13 ^ (v12 + 25)) - 27) ^ (v12 + 107)) ^ (v14 == 0x60DE7237762FB090)) & 1)) ^ (v12 + (v13 ^ (v12 + 281)) + 609839917))))(294028549, 0x9F218DC889D04F70, 0x134F8A868441352ELL, 0x66FBF218A8091D0CLL);
}

uint64_t sub_18DA37004(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8 * (((*(void *)(a5 + a2) != a3) * (v10 + ((v8 + v9) | a1) - 403)) ^ v8)))();
}

uint64_t sub_18DA37038@<X0>(unint64_t a1@<X4>, unint64_t a2@<X5>, unint64_t a3@<X6>, uint64_t a4@<X7>, int a5@<W8>)
{
  STACK[0x280] = a3;
  STACK[0x290] = a2;
  STACK[0x2A0] = a1;
  STACK[0x2B0] = v7;
  return (*(uint64_t (**)(void))(a4 + 8 * (((v7 == 0x134F8A8684413526) * ((v5 + a5 + 610) ^ v6)) ^ (v5 + a5 + 1216))))();
}

uint64_t sub_18DA37090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8 * ((2029 * (((*v10 == a4) ^ ((v8 ^ v11) * v9)) & 1)) ^ v8)))();
}

uint64_t sub_18DA370C4@<X0>(uint64_t a1@<X7>, int a2@<W8>)
{
  unint64_t v4 = (void *)(v2 - 0x66FBF218A8091D0CLL);
  STACK[0x2C8] = (unint64_t)v4;
  return (*(uint64_t (**)(void))(a1
                              + 8
                              * (int)(((*v4 + v3 == 0x8007A9F53B5235EBLL) * (((a2 + 179434504) & 0xF54E0BFE) - 1009)) ^ a2)))();
}

uint64_t sub_18DA37130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = (*(uint64_t (**)(unint64_t))(a8 + 8 * (v10 ^ 0xB53)))(STACK[0x2C8]);
  *int v8 = 0x66FBF218A8091D0CLL;
  return v9(v11);
}

void sub_18DA37184()
{
}

uint64_t sub_18DA371A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(a8 + 8 * (v8 + 1206)))(v10);
  return (*(uint64_t (**)(uint64_t))(STACK[0x2D0]
                                            + 8
                                            * ((((((v8 - 1007) | 0x280) ^ v12) + v8 + 7)
                                              * (v11 + v9 == 0x8007A9F53B5235EBLL)) ^ v8)))(v13);
}

uint64_t sub_18DA3720C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * (((*(void *)(v8 - 0x24CC9A478416F3C4) == 0)
                                * (((v10 ^ 0x28F) * v9 - 367) ^ (v10 + 26))) ^ v10)))();
}

uint64_t sub_18DA37270@<X0>(uint64_t a1@<X7>, int a2@<W8>)
{
  uint64_t v3 = (*(uint64_t (**)(void))(a1 + 8 * (a2 ^ 0xA0F)))();
  uint64_t v4 = STACK[0x2D0];
  *uint64_t v2 = 0;
  return sub_18DA371A8(v3, v5, v6, v7, v8, v9, v10, v4);
}

uint64_t sub_18DA3729C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  (*(void (**)(uint64_t))(a8 + 8 * (v9 ^ (v9 + 1891))))(v10 - 0x134F8A868441352ELL);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(STACK[0x2D0]
                                                                                + 8
                                                                                * (((STACK[0x2A0] == 0x60DE7237762FB090) ^ (v8 + v9 - 1)) & 1 ^ (v8 + v9 + 218))))(294028549, 0x9F218DC889D04F70, 0x134F8A868441352ELL, 0x66FBF218A8091D0CLL);
}

uint64_t sub_18DA37374()
{
  *uint64_t v0 = 0x134F8A868441352ELL;
  return ((uint64_t (*)(void))STACK[0x320])();
}

void sub_18DA37394()
{
}

uint64_t sub_18DA373AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * (int)(((((v8 + v9 + 1092) ^ 0xFFFFFD37) + 103 * (v9 ^ (v9 + 18))) * LOBYTE(STACK[0x3D7])) | (v8 + v9 + 1092))))();
}

uint64_t sub_18DA373E8@<X0>(uint64_t a1@<X7>, int a2@<W8>)
{
  int v3 = (a2 - 1480) | 0x726;
  *(void *)(v2 - 192) = &STACK[0x420];
  *(_DWORD *)(v2 - 180) = a2
                        - 1425831821 * ((v2 - 1175474423 - 2 * ((v2 - 192) & 0xB9EFAFC9)) ^ 0xE9C23311)
                        + 1998159318;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(a1 + 8 * (a2 + 708)))(v2 - 192);
  unint64_t v5 = STACK[0x2D0];
  int v6 = STACK[0x41C];
  LODWORD(STACK[0x25C]) = STACK[0x41C];
  return (*(uint64_t (**)(uint64_t))(v5 + 8 * ((126 * (((v3 ^ (v6 == -1393729084)) & 1) == 0)) ^ v3)))(v4);
}

uint64_t sub_18DA374B8@<X0>(uint64_t a1@<X7>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(a1 + 8 * (((((a2 - 794526960) | 0xB021581) ^ (v2 - 11)) * (STACK[0x368] == 0)) ^ a2)))();
}

uint64_t sub_18DA374F8@<X0>(uint64_t a1@<X7>, int a2@<W8>)
{
  (*(void (**)(void))(a1 + 8 * ((a2 - 1056) ^ 0x859)))();
  return v4 ^ v2;
}

uint64_t sub_18DA375E0()
{
  return (*(uint64_t (**)(void))(STACK[0x2D0] + 8 * ((15 * (v1 == -1393729084)) ^ (v2 + v0 + 1271))))();
}

void sub_18DA37614()
{
  LODWORD(STACK[0x290]) = STACK[0x334];
  STACK[0x3E8] = *(void *)(STACK[0x2D0] + 1888);
  JUMPOUT(0x18DA37654);
}

void sub_18DA37700()
{
  STACK[0x2D8] = *(void *)(STACK[0x2D0] + 8 * v0);
  JUMPOUT(0x18DA37728);
}

uint64_t sub_18DA37794()
{
  return v0();
}

uint64_t sub_18DA377AC@<X0>(uint64_t a1@<X7>, uint64_t a2@<X8>)
{
  unint64_t v3 = *(void *)(a2 - 0x66FBF218A8091D0CLL);
  STACK[0x328] = v3;
  return (*(uint64_t (**)(void))(a1
                              + 8
                              * (((v3 != 0x24CC9A478416F3DCLL) * (((v2 - 779) | 0x580) + 3 * ((v2 - 275) ^ 0x23B) - 1249)) ^ (v2 - 275))))();
}

void sub_18DA387C4()
{
}

uint64_t sub_18DA38A94@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 0x29FEF841D9125A0BLL) = a1;
  return ((uint64_t (*)(void))STACK[0x2D8])();
}

uint64_t sub_18DA38ABC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (v8 == -1393729084)
  {
    unint64_t v11 = STACK[0x390];
    uint64_t v12 = *(void *)(STACK[0x390] - 0x24CC9A478416F3D4);
    unint64_t v13 = STACK[0x380];
    *(void *)(STACK[0x380] - 0x24CC9A478416F3D4) = v12;
    *(void *)(v13 - 0x24CC9A478416F3DCLL) = *(void *)(v11 - 0x24CC9A478416F3DCLL);
    return (*(uint64_t (**)(void))(a8
                                + 8
                                * (((v12 == 0x24CC9A478416F3DCLL) * (((a2 - 1099286326) & 0x65DF37FB) - 1640)) ^ (v9 + a2 + 249))))();
  }
  else if (v8 == 1393700935)
  {
    return (*(uint64_t (**)(void))(a8
                                + 8
                                * ((2 * (*(void *)(STACK[0x400] - 0x66FBF218A8091D04) == 0x24CC9A478416F3DCLL)) | 0x5ED)))();
  }
  else
  {
    return (*(uint64_t (**)(void))(a8
                                + 8
                                * ((150
                                  * ((((*(void *)(STACK[0x380] - 0x24CC9A478416F3C4) == 0) ^ 0x4B6) & 1) == 0)) ^ 0x610)))();
  }
}

uint64_t sub_18DA38B64@<X0>(void *a1@<X8>)
{
  *a1 = v2;
  *(void *)(v1 - 0x66FBF218A8091D0CLL) = v2;
  return ((uint64_t (*)(void))STACK[0x308])();
}

uint64_t sub_18DA38B80(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8 * ((905 * (v8 == v10 + (a2 ^ (a2 - 712)) - 1912)) ^ (v9 + a2 + 724))))();
}

uint64_t sub_18DA38BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10 = *(void *)(STACK[0x3C8] - 0x24CC9A478416F3C4);
  STACK[0x410] = v10;
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * (int)(((v10 == 0) * ((v8 - 5312955) & 0xDBF79FE7 ^ (v9 - 1179) ^ (568 * (v8 ^ 0x77A)))) ^ v8)))();
}

uint64_t sub_18DA38C44@<X0>(uint64_t a1@<X7>, int a2@<W8>)
{
  unint64_t v3 = ((a2 - 1109) ^ 0xA613BD56) + v2;
  STACK[0x450] = v3;
  unint64_t v4 = STACK[0x310];
  STACK[0x458] = STACK[0x310];
  return (*(uint64_t (**)(void))(a1
                              + 8
                              * ((869 * (v3 - v4 + ((a2 - 67178163) & 0xDFA79FE7) + 0x4856423695FA1A84 > 9)) ^ a2)))();
}

void sub_18DA38CC8()
{
  STACK[0x2B0] = ((STACK[0x458] - 0x4856423771A0B025) ^ 0x9DFEFEEDEBAE677BLL)
               + 0x77A7CF7E3453FF96
               + ((2 * (STACK[0x458] - 0x4856423771A0B025)) & 0x3BFDFDDBD75CCEF6);
  unint64_t v0 = STACK[0x448] - 0x4D25BF81502D6B09;
  STACK[0x2A0] = (v0 ^ 0xF7AFCEFE7EAAEF59) + 0x1DF6FF6DA15777B8 + ((2 * v0) & 0xEF5F9DFCFD55DEB2);
  STACK[0x260] = ((v0 + 2) ^ 0x57F9FEEF8FF9C76FLL) - 0x406020880A08402ALL + ((2 * (v0 + 2)) & 0xAFF3FDDF1FF38EDELL);
  STACK[0x2C8] = STACK[0x358];
  LODWORD(STACK[0x280]) = LOWORD(STACK[0x42E]);
  JUMPOUT(0x18DA37DB4);
}

uint64_t sub_18DA38CF8()
{
  int v1 = LOWORD(STACK[0x42E]);
  STACK[0x3D8] = STACK[0x430];
  return (*(uint64_t (**)(void))(STACK[0x2D0] + 8 * ((1440 * (v1 == 15177)) ^ (v0 - 609839420))))();
}

void sub_18DA38D5C(int a1@<W8>)
{
  *(_DWORD *)(STACK[0x340] - 0x5E8A393E0ABD2C7) = v2 ^ (v1 + a1 - 699) ^ 0x67037952;
  JUMPOUT(0x18DA38D94);
}

uint64_t sub_18DA38DA0()
{
  unint64_t v2 = STACK[0x458] + (v1 ^ 0xBCA5ECF7) - 0x4856423738DD2FADLL;
  BOOL v3 = v2 < 0x38C38072;
  BOOL v4 = v2 > STACK[0x450] + 952336498;
  if (STACK[0x450] > 0xFFFFFFFFC73C7F8DLL != v3) {
    BOOL v4 = v3;
  }
  return (*(uint64_t (**)(void))(STACK[0x2D0] + 8 * ((430 * !v4) ^ (v0 + 609839937))))();
}

uint64_t sub_18DA38E4C@<X0>(uint64_t a1@<X7>, uint64_t a2@<X8>)
{
  unint64_t v5 = v2 + 10;
  int v6 = LOWORD(STACK[0x43E]);
  if (v6 == 10427 || v6 == 15177) {
    goto LABEL_5;
  }
  if (v6 == 64741)
  {
    STACK[0x3C0] = STACK[0x410] + a2 - 0x4856423771A0B01FLL;
LABEL_5:
    STACK[0x310] = v5;
    LODWORD(STACK[0x338]) = v3;
    return (*(uint64_t (**)(void))(a1 + 8 * ((880 * (v6 == 64741)) | (v4 - 609839090))))();
  }
  STACK[0x368] = 0;
  LODWORD(STACK[0x338]) = -1129976585;
  return ((uint64_t (*)(void))STACK[0x300])();
}

uint64_t sub_18DA3A238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8 * (((v8 == v10) * ((v9 - 410) ^ v9 ^ 0x2BC)) ^ v9)))();
}

uint64_t sub_18DA3A268@<X0>(uint64_t a1@<X7>, uint64_t a2@<X8>)
{
  *(void *)(v3 - 0x24CC9A478416F3D4) = a2;
  return (*(uint64_t (**)(void))(a1
                              + 8
                              * (((*v2 == 0x24CC9A478416F3DCLL) * ((13 * ((v4 - 365) ^ 0x305)) ^ 0x3C2)) ^ (v4 - 365))))();
}

uint64_t sub_18DA3A2C8@<X0>(uint64_t a1@<X7>, uint64_t a2@<X8>)
{
  *(void *)(STACK[0x400] - 0x66FBF218A8091D0CLL) = a2;
  return (*(uint64_t (**)(void))(a1
                              + 8
                              * (((*v2 == 0x24CC9A478416F3DCLL) * ((113 * (((v3 - 458) | 0x403) ^ 0x5A7)) ^ 0x186)) ^ ((v3 - 458) | 0x403))))();
}

uint64_t sub_18DA3A334@<X0>(uint64_t a1@<X7>, uint64_t a2@<X8>)
{
  *(void *)(STACK[0x400] - 0x66FBF218A8091D04) = a2;
  return (*(uint64_t (**)(void))(a1
                              + 8
                              * (((*(void *)(STACK[0x390] - 0x24CC9A478416F3C4) != 0)
                                * ((((v2 - 1439) | 0x1C0) + 1577) ^ 0x7F0)) ^ ((v2 - 1439) | 0x1C0))))();
}

uint64_t sub_18DA3A390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = v8 ^ 0x629;
  uint64_t v10 = (*(uint64_t (**)(void))(a8 + 8 * (v8 + 1769)))();
  unint64_t v11 = STACK[0x2D0];
  *(void *)(STACK[0x390] - 0x24CC9A478416F3C4) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11
                                                     + 8
                                                     * (((STACK[0x390] != 0x24CC9A478416F3DCLL) * (v9 ^ 0x812)) ^ v9)))(v10, 3685127589);
}

void sub_18DA3A414(void *a1@<X8>)
{
  *(void *)(v2 - 0x24CC9A478416F3DCLL) = v1;
  *(void *)(v1 - 0x24CC9A478416F3D4) = *a1;
  *a1 = v1;
  JUMPOUT(0x18DA3A444);
}

uint64_t sub_18DA3A454@<X0>(uint64_t a1@<X7>, uint64_t a2@<X8>)
{
  *(void *)(v3 + v4) = a2;
  return (*(uint64_t (**)(void))(a1 + 8 * ((6 * (*v2 == v5)) ^ 0x66B)))();
}

uint64_t sub_18DA3A498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8 * (((*v8 == 0x24CC9A478416F3DCLL) * ((13 * (v9 ^ 0x305)) ^ 0x3C2)) ^ v9)))();
}

uint64_t sub_18DA3A4E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8 * (((*v8 == 0x24CC9A478416F3DCLL) * ((113 * (v9 ^ 0x5A7)) ^ 0x186)) ^ v9)))();
}

uint64_t sub_18DA3A528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * (((*(void *)(STACK[0x390] - 0x24CC9A478416F3C4) != 0) * ((v8 + 1577) ^ 0x7F0)) ^ v8)))();
}

uint64_t sub_18DA3A564@<X0>(uint64_t a1@<X7>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8 * (((a2 != 0x24CC9A478416F3DCLL) * (v2 ^ 0x812)) ^ v2)))();
}

uint64_t sub_18DA3A5A8@<X0>(uint64_t a1@<X7>, uint64_t a2@<X8>)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(a1 + 8 * (v2 ^ 0x9FB)))(a2 - 0x24CC9A478416F3DCLL);
  STACK[0x390] = 0x24CC9A478416F3DCLL;
  return ((uint64_t (*)(uint64_t, uint64_t))STACK[0x308])(v3, 3685127589);
}

uint64_t sub_18DA3A620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, int a9, unsigned int a10, int a11, int a12)
{
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, void, uint64_t))(STACK[0x2D0]
                                                                                                 + 8
                                                                                                 * ((((a8 + 607) ^ 0x28A) * (a12 == a9)) ^ a8)))(a1, 0xC266F8D17762409ALL, 0x7C3185684655E497, 0x5C571E88BAF69BF8, a10, 33554494);
}

uint64_t sub_18DA3A698@<X0>(uint64_t a1@<X7>, int a2@<W8>)
{
  return (*(uint64_t (**)(void))(a1
                              + 8
                              * ((3754 * ((((a2 ^ 0x676) - 1332) & v2) == (((a2 ^ 0x5E4) - 1578) | 0x109) - 397)) ^ a2 ^ 0x5E4)))();
}

#error "18DA3AFD4: call analysis failed (funcsize=508)"

void sub_18DA3AFD8()
{
}

uint64_t sub_18DA3B000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(a8
                                                                                + 8
                                                                                * (int)((((((a6 - 1480140023) & 0x5839235F)
                                                                                         + 301) ^ (a6 + 1246831325) & 0xB5AEDD7D)
                                                                                       * (a11 == v36)) ^ a6)))(a36, 0xC266F8D17762409ALL, 0x7C3185684655E497, 0x5C571E88BAF69BF8);
}

uint64_t sub_18DA3B09C(unint64_t a1)
{
  STACK[0x368] = a1;
  return ((uint64_t (*)(void))STACK[0x300])();
}

uint64_t sub_18DA3B0B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X7>, int a6@<W8>)
{
  uint64_t v9 = (a6 - 1969241659);
  unint64_t v10 = STACK[0x2C8] + v9;
  unint64_t v11 = ((v6 ^ 0xF80000000000053CLL) & (v10 << 56) & 0xFF00000000000000 | (v10 >> 8)) - 0x550C087CC469144ELL;
  unint64_t v12 = v11 ^ 0xB98B02A5518146ACLL;
  v11 ^= 0xEE14BEBC8D361B39;
  uint64_t v13 = __ROR8__(v12, 8);
  unint64_t v14 = (((2 * (v13 + v11)) | 0xB1594B094AC1844ELL) - (v13 + v11) - 0x58ACA584A560C227) ^ 0x878756599DDB350;
  unint64_t v15 = v14 ^ __ROR8__(v11, 61);
  uint64_t v16 = __ROR8__(v14, 8);
  uint64_t v17 = __ROR8__((a4 - ((v16 + v15) | a4) + ((v16 + v15) | 0xA3A8E17745096407)) ^ 0x467F3BD9A88CC707, 8);
  unint64_t v18 = (a4 - ((v16 + v15) | a4) + ((v16 + v15) | 0xA3A8E17745096407)) ^ 0x467F3BD9A88CC707 ^ __ROR8__(v15, 61);
  unint64_t v19 = (v17 + v18) ^ v8;
  unint64_t v20 = v19 ^ __ROR8__(v18, 61);
  unint64_t v21 = (__ROR8__(v19, 8) + v20) ^ 0xCD091F17C02FDE51;
  unint64_t v22 = v21 ^ __ROR8__(v20, 61);
  uint64_t v23 = __ROR8__(v21, 8);
  unint64_t v24 = (a3 - ((v23 + v22) | a3) + ((v23 + v22) | 0x83CE7A97B9AA1B68)) ^ 0xE144C6C530E1FC0ALL;
  unint64_t v25 = v24 ^ __ROR8__(v22, 61);
  uint64_t v26 = __ROR8__(v24, 8);
  unint64_t v27 = (((v26 + v25) & a2 ^ 0xC246D05015220090)
       + ((v26 + v25) ^ 0x31312E8DEADC702ELL)
       - (((v26 + v25) ^ 0x31312E8DEADC702ELL) & a2)) ^ 0xA9974A5FA23517D5;
  unint64_t v28 = v27 ^ __ROR8__(v25, 61);
  uint64_t v29 = __ROR8__(v27, 8);
  *(unsigned char *)(a1 + v9) = (((v29 + v28 - ((2 * (v29 + v28)) & 0xB5EE081F97C974D4) + 0x5AF7040FCBE4BA6ALL) ^ 0x41FCD597E0BD7A1BLL) >> (8 * (v10 & 7u))) ^ *(unsigned char *)v10;
  return (*(uint64_t (**)(void))(a5 + 8 * (int)((831 * (a6 - 1 == v7)) ^ v6)))();
}

uint64_t sub_18DA3B2F8@<X0>(uint64_t a1@<X7>, unsigned int a2@<W8>)
{
  return (*(uint64_t (**)(void))(a1
                              + 8
                              * (int)(((((v2 - 573) | 0x220)
                                      + *(_DWORD *)(STACK[0x378]
                                                  - 0x1F57A7B8F7CDA3B2
                                                  + 40
                                                  * ((a2 | ((unint64_t)(a2 < 0x31B03BA7) << 32)) - 833633191)
                                                  + 36)
                                      - LODWORD(STACK[0x3A8]) == -804430216)
                                     * (((v2 - 643820952) | 0x2068100) ^ 0xDBA69FC4)) ^ v2)))();
}

uint64_t sub_18DA3B3A4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11 = *(_DWORD *)(v9 + 40 * v8 + 28);
  switch(v11)
  {
    case 1:
      LODWORD(STACK[0x290]) = *(_DWORD *)(v9 + 40 * v8 + 24);
      JUMPOUT(0x18DA3B4B8);
    case 3:
      return (*(uint64_t (**)(void))(a8
                                  + 8
                                  * (((a2 ^ (a2 - 1230) ^ (v10 + a2 + 132) ^ 0x77C)
                                    * (*(void *)(v9 + 40 * v8 + 16) == 0)) ^ (v10 + a2 + 297))))();
    case 2:
      return (*(uint64_t (**)(void))(a8
                                  + 8
                                  * (((STACK[0x3B8] != 0x66FBF218A8091D0CLL) * (v10 + a2 - 232)) ^ (v10 + a2 + 1439))))();
  }
  return ((uint64_t (*)(void))STACK[0x3F0])();
}

void sub_18DA3B51C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  STACK[0x308] = *(void *)(a8 + 8 * (v8 & 0xFFFFFFFF8480D2FFLL));
  LODWORD(STACK[0x2C8]) = 41903;
  JUMPOUT(0x18DA3B56CLL);
}

uint64_t sub_18DA3B5D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  STACK[0x260] = v9;
  STACK[0x280] = v8;
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(a8 + 8 * (v10 ^ 0xEAC)))(32);
  STACK[0x380] = v12 + 0x24CC9A478416F3DCLL;
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * (((v12 == 0)
                                * (((v10 - 1545) | 0x6A0) + 609840119 + ((v10 - 2096887148) | 0x58A28504) - 2011)) ^ v10)))();
}

uint64_t sub_18DA3B670(uint64_t a1)
{
  *(void *)a1 = 0x24CC9A478416F3DCLL;
  *(void *)(a1 + 8) = 0x24CC9A478416F3DCLL;
  *(_DWORD *)(a1 + 16) = ((v1 - 451760294) & 0x1AED4AFD ^ 0xE6E0BB93) + v2;
  uint64_t v6 = (*(uint64_t (**)(void))(v4 + 8 * (v1 + 509)))((v2 - 1320295657 + v1 - v3 - 1288));
  *(void *)(a1 + 24) = v6;
  return (*(uint64_t (**)(void))(v4 + 8 * ((105 * (v6 == 0)) ^ v1)))();
}

uint64_t sub_18DA3B760@<X0>(uint64_t a1@<X7>, int a2@<W8>)
{
  int v5 = a2 + 410;
  int v6 = v5 + 384;
  uint64_t v7 = (*(uint64_t (**)(void))(a1 + 8 * (v5 + 1399)))();
  unint64_t v8 = STACK[0x2D0];
  *int v3 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8
                                                     + 8
                                                     * (int)(((((v6 - 5844177) & 0xDBFFBDBF ^ (v4 + 756))
                                                             + ((v6 + 592360255) & 0xDCB14CFF))
                                                            * (v2 == 0x24CC9A478416F3DCLL)) ^ v6)))(v7, 3685127589);
}

void sub_18DA3B7F0(uint64_t a1@<X7>, int a2@<W8>)
{
  (*(void (**)(uint64_t))(a1 + 8 * (a2 + 952)))(v2 - 0x24CC9A478416F3DCLL);
  JUMPOUT(0x18DA3B820);
}

uint64_t sub_18DA3B82C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8 * ((94 * (v8 == -1393729084)) ^ (a2 + v9))))();
}

uint64_t sub_18DA3B85C()
{
  return v0();
}

uint64_t sub_18DA3B86C()
{
  return ((uint64_t (*)(void))STACK[0x2E0])();
}

uint64_t sub_18DA3B880(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8 * ((((v9 + a2 + 161) ^ 0xD70) * (v8 == v10)) ^ (v9 + a2 + 1439))))();
}

uint64_t sub_18DA3B8B0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 8 * ((94 * (v8 == 3 * (a2 ^ (a2 - 139)) - 1393729657)) ^ (a2 + v9))))();
}

uint64_t sub_18DA3B8F0@<X0>(uint64_t a1@<X7>, int a2@<W8>)
{
  int v3 = a2 - 29;
  int v4 = (a2 - 29) ^ 0x3BC;
  int v5 = v4 + LODWORD(STACK[0x2FC]) - 411;
  LODWORD(STACK[0x2FC]) = v5;
  return (*(uint64_t (**)(void))(a1 + 8 * ((112 * (v4 - v2 + (v3 ^ 0x1Du) + v5 - 223794057 < 2)) ^ v4)))();
}

uint64_t sub_18DA3B960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a8
                                                     + 8
                                                     * (int)(((((v8 - 5844177) & 0xDBFFBDBF ^ (v10 + 756))
                                                             + ((v8 + 592360255) & 0xDCB14CFF))
                                                            * (v9 == 0x24CC9A478416F3DCLL)) ^ v8)))(a1, 3685127589);
}

uint64_t sub_18DA3B9D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  unsigned int v66 = LODWORD(STACK[0x290])
      - ((2 * LODWORD(STACK[0x290]) + 1338682696) & 0x74FCEE56)
      + (((v63 + 161742884) | 0xD2029485) ^ 0xB9C5586A);
  uint64_t v67 = LODWORD(STACK[0x2C8]) - 20277 + (~(2 * LODWORD(STACK[0x2C8]) + 26512) | 0xFFFF85FB);
  LODWORD(STACK[0x2B0]) = v65 - ((2 * v65 + 434696548) & 0x74FCEE56) + 1198714845;
  LODWORD(STACK[0x2A0]) = v62 ^ 0x75BA53A4;
  uint64_t v68 = *(unsigned char **)(v64 + 24);
  uint64_t v69 = __ROR8__(v68, 8);
  unint64_t v70 = (0x150C087CC469144DLL - (v69 & 0xF8FFFFFFFFFFFFFFLL)) & 0x19A889ECFF1A1ED8 | ((v69 & 0xF8FFFFFFFFFFFFFFLL)
                                                                                      - 0x550C087CC469144ELL) & 0xE057761300E5E127;
  uint64_t v71 = __ROR8__(v70 ^ 0xA2238B49AE9B5874, 8);
  v70 ^= 0xF5BC3750722C05E1;
  uint64_t v72 = (v71 + v70) ^ 0x50D4D0E13CBD7177;
  uint64_t v73 = v72 ^ __ROR8__(v70, 61);
  *((void *)&v75 + 1) = __ROR8__(v72, 8) + v73;
  *(void *)&long long v75 = *((void *)&v75 + 1) ^ 0xE5D7DAAEED85A300;
  uint64_t v74 = v75 >> 8;
  *(void *)&long long v75 = __ROR8__(v73, 61);
  unint64_t v76 = (v74 + (*((void *)&v75 + 1) ^ 0xE5D7DAAEED85A300 ^ v75)) ^ 0x8E85997BF8A3092DLL;
  unint64_t v77 = v76 ^ __ROR8__(*((void *)&v75 + 1) ^ 0xE5D7DAAEED85A300 ^ v75, 61);
  uint64_t v78 = *(uint64_t (**)(unint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(STACK[0x2D0] + 8 * v63);
  unint64_t v79 = (__ROR8__(v76, 8) + v77) ^ 0xCD091F17C02FDE51;
  unint64_t v80 = v79 ^ __ROR8__(v77, 61);
  uint64_t v81 = (__ROR8__(v79, 8) + v80) ^ 0x628ABC52894BE762;
  uint64_t v82 = v81 ^ __ROR8__(v80, 61);
  *(void *)&long long v75 = __ROR8__(v81, 8);
  unint64_t v83 = (((2 * (v75 + v82)) & 0xFCA17D98F44813EALL) - (v75 + v82) - 0x7E50BECC7A2409F6) ^ 0xDB6FDD30BA50D16BLL;
  *uint64_t v68 = (((__ROR8__(v83, 8) + (v83 ^ __ROR8__(v82, 61))) ^ 0x1B0BD1982B59C071) >> (8 * (v68 & 7u))) ^ HIBYTE(v66) ^ 0xBA;
  unint64_t v84 = (__ROR8__(v68 + 1, 8) & 0xF8FFFFFFFFFFFFFFLL) - 0x550C087CC469144ELL;
  *(void *)&long long v75 = __ROR8__(v84 ^ 0xB98B02A5518146ACLL, 8);
  v84 ^= 0xEE14BEBC8D361B39;
  uint64_t v85 = (v75 + v84) ^ 0x50D4D0E13CBD7177;
  uint64_t v86 = v85 ^ __ROR8__(v84, 61);
  *(void *)&long long v75 = __ROR8__(v85, 8);
  unint64_t v87 = (((2 * (v75 + v86)) & 0xA793A7F6AC829AE6) - (v75 + v86) - 0x53C9D3FB56414D74) ^ 0x49E1F6AA443B118CLL;
  unint64_t v88 = v87 ^ __ROR8__(v86, 61);
  unint64_t v89 = (__ROR8__(v87, 8) + v88) ^ 0x8E85997BF8A3092DLL;
  uint64_t v90 = __ROR8__(v89, 8);
  unint64_t v91 = v89 ^ __ROR8__(v88, 61);
  unint64_t v92 = (((2 * (v90 + v91)) & 0xF0BAF55B447DEC8ELL) - (v90 + v91) + 0x7A285525DC109B8) ^ 0xCAAB9A459DEED7E9;
  unint64_t v93 = v92 ^ __ROR8__(v91, 61);
  *(void *)&long long v75 = __ROR8__(v92, 8);
  unint64_t v94 = (-2 - ((~(v75 + v93) | 0x1FF46385B66E09DELL) + ((v75 + v93) | 0xE00B9C7A4991F621))) ^ 0x7D7EDFD73F25EEBCLL;
  unint64_t v95 = v94 ^ __ROR8__(v93, 61);
  *(void *)&long long v75 = __ROR8__(v94, 8);
  unint64_t v96 = (0xA4E31C196FB07E65 - ((v75 + v95) | 0xA4E31C196FB07E65) + ((v75 + v95) | 0x5B1CE3E6904F819ALL)) ^ 0x1DC7FE5AFC4A6FBLL;
  unint64_t v97 = v96 ^ __ROR8__(v95, 61);
  *(void *)&long long v75 = __ROR8__(v96, 8);
  v68[1] = (((-2 - ((~((void)v75 + v97) | 0x75B531B3FC4CDC6BLL) + (((void)v75 + v97) | 0x8A4ACE4C03B32394))) ^ 0x6EBEE02BD7151C1ALL) >> (8 * (((_BYTE)v68 + 1) & 7u))) ^ BYTE2(v66) ^ 0x7E;
  unint64_t v98 = (__ROR8__(v68 + 2, 8) & 0xF8FFFFFFFFFFFFFFLL) - 0x550C087CC469144ELL;
  unint64_t v99 = v98 ^ 0xB98B02A5518146ACLL;
  v98 ^= 0xEE14BEBC8D361B39;
  *(void *)&long long v75 = __ROR8__(v99, 8);
  unint64_t v100 = (((2 * (v75 + v98)) & 0x9D263FB38571CE96) - (v75 + v98) + 0x316CE0263D4718B4) ^ 0x61B830C701FA69C3;
  unint64_t v101 = v100 ^ __ROR8__(v98, 61);
  *((void *)&v75 + 1) = __ROR8__(v100, 8) + v101;
  *(void *)&long long v75 = *((void *)&v75 + 1) ^ 0xE5D7DAAEED85A300;
  uint64_t v102 = v75 >> 8;
  *(void *)&long long v75 = __ROR8__(v101, 61);
  unint64_t v103 = (0x8EEAB8D098054CA2
        - ((v102 + (*((void *)&v75 + 1) ^ 0xE5D7DAAEED85A300 ^ v75)) | 0x8EEAB8D098054CA2)
        + ((v102 + (*((void *)&v75 + 1) ^ 0xE5D7DAAEED85A300 ^ v75)) | 0x7115472F67FAB35DLL)) ^ 0xFF90DE549F59BA70;
  unint64_t v104 = v103 ^ __ROR8__(*((void *)&v75 + 1) ^ 0xE5D7DAAEED85A300 ^ v75, 61);
  *(void *)&long long v75 = __ROR8__(v103, 8);
  uint64_t v105 = __ROR8__((-2 - ((~(v75 + v104) | 0x978199C1D991797DLL) + ((v75 + v104) | 0x687E663E266E8682))) ^ 0x5A8886D619BEA72CLL, 8);
  unint64_t v106 = (-2 - ((~(v75 + v104) | 0x978199C1D991797DLL) + ((v75 + v104) | 0x687E663E266E8682))) ^ 0x5A8886D619BEA72CLL ^ __ROR8__(v104, 61);
  unint64_t v107 = (((2 * (v105 + v106)) & 0x9D3B31D97DA9F9B8) - (v105 + v106) - 0x4E9D98ECBED4FCDDLL) ^ 0xD3E8DB41C860E441;
  unint64_t v108 = v107 ^ __ROR8__(v106, 61);
  uint64_t v109 = (__ROR8__(v107, 8) + v108) ^ 0x5AC09C033F8B2761;
  *(void *)&long long v75 = __ROR8__(v68 + 3, 8);
  v68[2] = (((__ROR8__(v109, 8) + (v109 ^ __ROR8__(v108, 61))) ^ 0x1B0BD1982B59C071uLL) >> (8 * (((_BYTE)v68 + 2) & 7u))) ^ BYTE1(v66) ^ 0x77;
  unint64_t v110 = ((2 * ((v75 & 0xF8FFFFFFFFFFFFFFLL) - 0x550C087CC469144ELL)) | 0x20EB39D37CA90794)
       - ((v75 & 0xF8FFFFFFFFFFFFFFLL)
        - 0x550C087CC469144ELL)
       - 0x10759CE9BE5483CALL;
  unint64_t v111 = v110 ^ 0xA9FE9E4CEFD5C566;
  v110 ^= 0xFE612255336298F3;
  *(void *)&long long v75 = __ROR8__(v111, 8);
  uint64_t v112 = __ROR8__((-2 - ((~(v75 + v110) | 0x3D54A62DE74C24CLL) + ((v75 + v110) | 0xFC2AB59D218B3DB3))) ^ 0x53019A83E2C9B33BLL, 8);
  unint64_t v113 = (-2 - ((~(v75 + v110) | 0x3D54A62DE74C24CLL) + ((v75 + v110) | 0xFC2AB59D218B3DB3))) ^ 0x53019A83E2C9B33BLL ^ __ROR8__(v110, 61);
  unint64_t v114 = (-2 - ((~(v112 + v113) | 0x1730E72B835C4191) + ((v112 + v113) | 0xE8CF18D47CA3BE6ELL))) ^ 0xF2E73D856ED9E291;
  unint64_t v115 = v114 ^ __ROR8__(v113, 61);
  *(void *)&long long v75 = __ROR8__(v114, 8);
  unint64_t v116 = (v75 + v115 - ((2 * (v75 + v115)) & 0x9B516F8D43D1232ELL) - 0x325748395E176E69) ^ 0x432D2EBD594B98BALL;
  unint64_t v117 = v116 ^ __ROR8__(v115, 61);
  unint64_t v118 = (__ROR8__(v116, 8) + v117) ^ 0xCD091F17C02FDE51;
  unint64_t v119 = v118 ^ __ROR8__(v117, 61);
  *(void *)&long long v75 = __ROR8__(v118, 8);
  uint64_t v120 = __ROR8__((((2 * (v75 + v119)) | 0x70B9105F53F81A68) - (v75 + v119) + 0x47A377D05603F2CCLL) ^ 0xDAD6347D20B7EA56, 8);
  unint64_t v121 = (((2 * (v75 + v119)) | 0x70B9105F53F81A68) - (v75 + v119) + 0x47A377D05603F2CCLL) ^ 0xDAD6347D20B7EA56 ^ __ROR8__(v119, 61);
  uint64_t v122 = __ROR8__((v120 + v121) ^ 0x5AC09C033F8B2761, 8) + ((v120 + v121) ^ 0x5AC09C033F8B2761 ^ __ROR8__(v121, 61));
  v68[3] = v66 ^ 0x2B ^ (((v122 - ((2 * v122) & 0xCDE279B6265D5694) - 0x190EC324ECD154B6) ^ 0xFDFAED4338776B3BLL) >> (8 * (((_BYTE)v68 + 3) & 7u)));
  return v78(0xDAD6347D20B7EA56, 43, 0xEE14BEBC8D361B39, 0xCDE279B6265D5694, v67, -2, 0xA4E31C196FB07E65, 0x8EEAB8D098054CA2, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61,
           a62);
}

uint64_t sub_18DA3C6E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int v72 = (unsigned __int16)LODWORD(STACK[0x2C8]);
  if (v72 == 41903) {
    return (*(uint64_t (**)(void))(STACK[0x2D0] + 8 * ((979 * (v71 == 1930135378)) ^ 0x1E7)))();
  }
  if (v72 == 23827) {
    return (*(uint64_t (**)(void))(STACK[0x2D0]
  }
                                + 8
                                * ((98
                                  * (((2 * (v71 - (a71 & 0x9C147D78) - 620841106)) & 0xFFBEF7BA ^ 0x9C147538)
                                   + ((v71 - (a71 & 0x9C147D78) - 620841106) ^ 0x31D54561)
                                   - 1284854297 != 860498372)) ^ 0x538)))();
  unint64_t v74 = STACK[0x2D0];
  if (v72 == 37053) {
    return (*(uint64_t (**)(void))(v74 + 8 * ((42 * ((((v71 == 1930135382) ^ 0x538) & 1) == 0)) ^ 0x1CD)))();
  }
  else {
    return (*(uint64_t (**)(void))(v74
  }
                                + 8
                                * ((150
                                  * ((((*(void *)(STACK[0x380] - 0x24CC9A478416F3C4) == 0) ^ 0x4B6) & 1) == 0)) ^ 0x610)))();
}

void sub_18DA3C754()
{
}

uint64_t sub_18DA3C7C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8
                              + 8
                              * (((STACK[0x3B8] == 0x66FBF218A8091D0CLL) * (v10 + (v8 ^ v9) + ((v8 - 1232) | 1) - 334)) ^ v8)))();
}

uint64_t sub_18DA3C814@<X0>(uint64_t a1@<X7>, unint64_t a2@<X8>)
{
  LODWORD(STACK[0x290]) = *(_DWORD *)(v4 + 40 * v3 + 24);
  STACK[0x308] = *(void *)(a1 + 8 * v5);
  LODWORD(STACK[0x2C8]) = 23827;
  STACK[0x400] = a2;
  return (*(uint64_t (**)(void))(a1
                              + 8
                              * (int)((41
                                     * (((v6 + ((-62 * (v5 ^ 0xA0) - 97) & 0xBF) + 113) ^ (a2 == 0x66FBF218A8091D0CLL)) & 1)) ^ (706 * (v5 ^ 0xA0)))))();
}

uint64_t sub_18DA3C914@<X0>(uint64_t a1@<X2>, int a2@<W8>)
{
  uint64_t v8 = (a2 + 279215177) | 0xCB021424;
  int v9 = *(unsigned char **)(STACK[0x380] - 0x24CC9A478416F3C4);
  unint64_t v10 = STACK[0x260]
      - 2 * ((STACK[0x260] + 0x2039744B1708DFD0) & 0x7B582667B895C06CLL ^ STACK[0x260] & 0xC)
      + (v8 ^ 0x9B919AB214383595);
  uint64_t v11 = __ROR8__(v9 + 10, 8);
  unint64_t v12 = ((2 * (v11 & 0xF8FFFFFFFFFFFFFFLL) + 0x55E7EF06772DD764) & 0x90B16B7D1B79A6A2)
      - (v11 & 0xF8FFFFFFFFFFFFFFLL)
      + 0xCB352BE36AC40FCLL;
  uint64_t v13 = __ROR8__(v12 ^ 0xE2C48E423C26A02, 8);
  v12 ^= 0x59B3F4FDFF753797uLL;
  unint64_t v14 = (((2 * (v13 + v12)) | 0x17FE78BC45B94652) - (v13 + v12) + 0x7400C3A1DD235CD7) ^ 0xDB2BECBF1E61D25ELL;
  unint64_t v15 = v14 ^ __ROR8__(v12, 61);
  unint64_t v16 = __ROR8__(v14, 8) + v15;
  unint64_t v17 = v16 ^ 0xE5D7DAAEED85A300 ^ __ROR8__(v15, 61);
  *((void *)&v18 + 1) = v16;
  *(void *)&long long v18 = v16 ^ 0xE5D7DAAEED85A300;
  uint64_t v19 = (((2 * ((v18 >> 8) + v17)) | 0x706FEFFD119E6122) - ((v18 >> 8) + v17) - 0x3837F7FE88CF3091) ^ 0xB6B26E85706C39BCLL;
  uint64_t v20 = v19 ^ __ROR8__(v17, 61);
  *(void *)&long long v18 = __ROR8__(v19, 8);
  unint64_t v21 = (((v18 + v20) | 0xE7F54DC4843AFB99) - ((v18 + v20) | 0x180AB23B7BC50466) + 0x180AB23B7BC50466) ^ 0x2AFC52D3441525C8;
  unint64_t v22 = v21 ^ __ROR8__(v20, 61);
  uint64_t v23 = (__ROR8__(v21, 8) + v22) ^ 0x628ABC52894BE762;
  uint64_t v24 = v23 ^ __ROR8__(v22, 61);
  uint64_t v25 = (__ROR8__(v23, 8) + v24) ^ v6;
  uint64_t v26 = v25 ^ __ROR8__(v24, 61);
  *(void *)&long long v18 = __ROR8__(v25, 8);
  v9[10] = (((((2 * ((void)v18 + v26)) & 0x5BA874AF5D38F1CELL) - ((void)v18 + v26) + 0x522BC5A851638718) ^ 0x492014307A3A4769uLL) >> (8 * (((_BYTE)v9 + 10) & 7u))) ^ HIBYTE(v10) ^ 0xFB;
  *(void *)&long long v18 = __ROR8__(v9 + 11, 8);
  unint64_t v27 = (v18 & 0xF8FFFFFFFFFFFFFFLL)
      - ((2 * (v18 & 0xF8FFFFFFFFFFFFFFLL) + 0x15E7EF06772DD764) & 0x355AB94138DC40D0)
      + 0x45A15423D8050C1ALL;
  *(void *)&long long v18 = __ROR8__(v27 ^ 0x23265E05CDEF66C4, 8);
  unint64_t v28 = (-2
       - ((~(v18 + (v27 ^ 0x74B9E21C11583B51)) | 0xC11DED4DEE4C92CCLL)
        + ((v18 + (v27 ^ 0x74B9E21C11583B51)) | 0x3EE212B211B36D33))) ^ 0x91C93DACD2F1E3BBLL;
  unint64_t v29 = v28 ^ __ROR8__(v27 ^ 0x74B9E21C11583B51, 61);
  unint64_t v30 = __ROR8__(v28, 8) + v29;
  unint64_t v31 = v30 ^ 0xE5D7DAAEED85A300 ^ __ROR8__(v29, 61);
  *((void *)&v18 + 1) = v30;
  *(void *)&long long v18 = v30 ^ 0xE5D7DAAEED85A300;
  uint64_t v32 = (-2 - ((~((v18 >> 8) + v31) | 0x77956CCF89056578) + (((v18 >> 8) + v31) | 0x886A933076FA9A87))) ^ 0xF910F5B471A66C55;
  uint64_t v33 = v32 ^ __ROR8__(v31, 61);
  uint64_t v34 = (__ROR8__(v32, 8) + v33) ^ v5;
  uint64_t v35 = v34 ^ __ROR8__(v33, 61);
  *(void *)&long long v18 = __ROR8__(v34, 8);
  unint64_t v36 = (v18 + v35 - ((2 * (v18 + v35)) & 0xA9BB3F9CB54546FALL) - 0x2B226031A55D5C83) ^ 0xB657239CD3E9441FLL;
  unint64_t v37 = v36 ^ __ROR8__(v35, 61);
  *(void *)&long long v18 = __ROR8__(v36, 8);
  unint64_t v38 = (((2 * ((v18 + v37) ^ 0x42D0978BF5AB05F8)) & 0x28E8EE91FE510F3CLL)
       - ((v18 + v37) ^ 0x42D0978BF5AB05F8)
       - 0x14747748FF28879FLL) ^ 0xF39B833FCAF75AF8;
  unint64_t v39 = v38 ^ __ROR8__(v37, 61);
  *(void *)&long long v18 = __ROR8__(v38, 8);
  v9[11] = (((((2 * ((void)v18 + v39)) & 0x3AD738EFF2AEAA6ELL) - ((void)v18 + v39) - 0x1D6B9C77F9575538) ^ 0xF99FB2102DF16AB9) >> (8 * (((_BYTE)v9 + 11) & 7u))) ^ BYTE6(v10) ^ 0x58;
  unint64_t v40 = (((unint64_t)(v9 + 12) >> 8) - 0x550C087CC469144ELL + ((unint64_t)(v9 + 12) >> 3 << 59)) & 0xF9FFFFFFFFFFFFFFLL;
  unint64_t v41 = v40 ^ 0xBB8B02A5518146ACLL;
  v40 ^= 0xEC14BEBC8D361B39;
  *(void *)&long long v18 = __ROR8__(v41, 8);
  unint64_t v42 = (-2 - ((~(v18 + v40) | 0xD61356B240505818) + ((v18 + v40) | 0x29ECA94DBFAFA7E7))) ^ 0x86C786537CED296FLL;
  unint64_t v43 = v42 ^ __ROR8__(v40, 61);
  *(void *)&long long v18 = __ROR8__(v42, 8);
  unint64_t v44 = (v18 + v43 - ((2 * (v18 + v43)) & 0xA73BF08C7129AAFALL) - 0x2C6207B9C76B2A83) ^ 0x364A22E8D511767DLL;
  unint64_t v45 = v44 ^ __ROR8__(v43, 61);
  unint64_t v46 = (__ROR8__(v44, 8) + v45) ^ 0x8E85997BF8A3092DLL;
  unint64_t v47 = v46 ^ __ROR8__(v45, 61);
  unint64_t v48 = (__ROR8__(v46, 8) + v47) ^ v5;
  unint64_t v49 = v48 ^ __ROR8__(v47, 61);
  uint64_t v50 = (__ROR8__(v48, 8) + v49) ^ 0x628ABC52894BE762;
  uint64_t v51 = v50 ^ __ROR8__(v49, 61);
  uint64_t v52 = (__ROR8__(v50, 8) + v51) ^ v6;
  v9[12] = (((__ROR8__(v52, 8) + (v52 ^ __ROR8__(v51, 61))) ^ 0x1B0BD1982B59C071uLL) >> (8 * (((_BYTE)v9 + 12) & 7u))) ^ BYTE5(v10) ^ 0x26;
  *(void *)&long long v18 = __ROR8__(v9 + 13, 8);
  unint64_t v53 = ((0x150C087CC469144DLL - (v18 & 0xF8FFFFFFFFFFFFFFLL)) & 0x28C891185D033579)
      + (v18 & 0xF8FFFFFFFFFFFFFFLL)
      - 0x550C087CC469144ELL
      - (((v18 & 0xF8FFFFFFFFFFFFFFLL) - 0x550C087CC469144ELL) & 0x28C891185D033579);
  unint64_t v54 = v53 ^ 0x914393BD0C8273D5;
  v53 ^= 0xC6DC2FA4D0352E40;
  uint64_t v55 = (__ROR8__(v54, 8) + v53) ^ 0x50D4D0E13CBD7177;
  uint64_t v56 = v55 ^ __ROR8__(v53, 61);
  uint64_t v57 = __ROR8__(v55, 8) + v56;
  unint64_t v58 = v57 ^ 0xE5D7DAAEED85A300 ^ __ROR8__(v56, 61);
  *((void *)&v18 + 1) = v57;
  *(void *)&long long v18 = v57 ^ 0xE5D7DAAEED85A300;
  uint64_t v59 = __ROR8__(((v18 >> 8) + v58) ^ 0x8E85997BF8A3092DLL, 8);
  uint64_t v60 = ((v18 >> 8) + v58) ^ 0x8E85997BF8A3092DLL ^ __ROR8__(v58, 61);
  unint64_t v61 = (((v59 + v60) | 0x44E79080D479A43CLL) - ((v59 + v60) | 0xBB186F7F2B865BC3) - 0x44E79080D479A43DLL) ^ 0x89EE8F9714567A6DLL;
  uint64_t v62 = __ROR8__(v61, 8);
  unint64_t v63 = v61 ^ __ROR8__(v60, 61);
  unint64_t v64 = (v62 + v63 - ((2 * (v62 + v63)) & 0x52EBE49C49841E16) - 0x568A0DB1DB3DF0F5) ^ 0xCBFF4E1CAD89E869;
  unint64_t v65 = v64 ^ __ROR8__(v63, 61);
  *(void *)&long long v18 = __ROR8__(v64, 8);
  unint64_t v66 = (((2 * (v18 + v65)) & 0x2CE91245637A82CELL) - (v18 + v65) - 0x16748922B1BD4168) ^ 0xB34BEADE71C999F9;
  unint64_t v67 = v66 ^ __ROR8__(v65, 61);
  *(void *)&long long v18 = __ROR8__(v66, 8);
  v9[13] = ((((((void)v18 + v67) | 0x65D87B9400A7D7E8)
            - (((void)v18 + v67) | 0x9A27846BFF582817)
            - 0x65D87B9400A7D7E9) ^ 0x7ED3AA0C2BFE1799) >> (8 * (((_BYTE)v9 + 13) & 7u))) ^ BYTE4(v10) ^ 0x67;
  unint64_t v68 = (__ROR8__(v9 + 14, 8) & 0xF8FFFFFFFFFFFFFFLL) - 0x550C087CC469144ELL;
  unint64_t v69 = v68 ^ v7;
  unint64_t v70 = v68 ^ a1;
  *(void *)&long long v18 = __ROR8__(v69, 8);
  unint64_t v71 = (-2 - ((~(v18 + v70) | 0xE9A79F6B661C85EELL) + ((v18 + v70) | 0x1658609499E37A11))) ^ 0xB9734F8A5AA1F499;
  unint64_t v72 = v71 ^ __ROR8__(v70, 61);
  *(void *)&long long v18 = __ROR8__(v71, 8);
  unint64_t v73 = (-2 - ((~(v18 + v72) | 0x4D951D4085C79FFCLL) + ((v18 + v72) | 0xB26AE2BF7A386003))) ^ 0xA842C7EE68423CFCLL;
  unint64_t v74 = v73 ^ __ROR8__(v72, 61);
  *(void *)&long long v18 = __ROR8__(v73, 8);
  uint64_t v75 = (v18 + v74 - ((2 * (v18 + v74)) & 0x21DC1477A93D02AELL) - 0x6F11F5C42B617EA9) ^ 0x1E6B93402C3D887ALL;
  uint64_t v76 = v75 ^ __ROR8__(v74, 61);
  uint64_t v77 = (__ROR8__(v75, 8) + v76) ^ v5;
  uint64_t v78 = v77 ^ __ROR8__(v76, 61);
  uint64_t v79 = (__ROR8__(v77, 8) + v78) ^ 0x628ABC52894BE762;
  uint64_t v80 = v79 ^ __ROR8__(v78, 61);
  *(void *)&long long v18 = __ROR8__(v79, 8);
  unint64_t v81 = (((v18 + v80) ^ 0xDA4A082A2E95835ALL)
       - ((2 * ((v18 + v80) ^ 0xDA4A082A2E95835ALL)) & 0xC06B33C43F36BFCLL)
       + 0x603599E21F9B5FELL) ^ 0x8689CDB730E711C5;
  unint64_t v82 = v81 ^ __ROR8__(v80, 61);
  *(void *)&long long v18 = __ROR8__(v81, 8);
  v9[14] = ((((((void)v18 + v82) | 0x66A3B2E4FFC0348)
            - (((void)v18 + v82) | 0xF995C4D1B003FCB7)
            - 0x66A3B2E4FFC0349) ^ 0x1D61EAB664A5C339) >> (8 * (((_BYTE)v9 + 14) & 7u))) ^ BYTE3(v10) ^ 0xB8;
  unint64_t v83 = (((unint64_t)(v9 + 15) >> 8) - 0x550C087CC469144ELL + ((unint64_t)(v9 + 15) >> 3 << 59)) & 0xF9FFFFFFFFFFFFFFLL;
  *(void *)&long long v18 = __ROR8__(v83 ^ 0xBB8B02A5518146ACLL, 8);
  unint64_t v84 = (((2 * (v18 + (v83 ^ 0xEC14BEBC8D361B39))) & 0x816ACA45F412BB72)
       - (v18
        + (v83 ^ 0xEC14BEBC8D361B39))
       + 0x3F4A9ADD05F6A246) ^ 0x6F9E4A3C394BD331;
  unint64_t v85 = v84 ^ __ROR8__(v83 ^ 0xEC14BEBC8D361B39, 61);
  *(void *)&long long v18 = __ROR8__(v84, 8);
  unint64_t v86 = (((v18 + v85) ^ 0x2692AA20E73CE799 | 0x9DC1EBBF7BCB2010)
       - ((v18 + v85) ^ 0x2692AA20E73CE799 | 0x623E14408434DFEFLL)
       + 0x623E14408434DFEFLL) ^ 0x5E849B3171726489;
  unint64_t v87 = v86 ^ __ROR8__(v85, 61);
  *(void *)&long long v18 = __ROR8__(v86, 8);
  unint64_t v88 = (((v18 + v87) ^ 0x919E5F45A3B0DF24)
       - ((2 * ((v18 + v87) ^ 0x919E5F45A3B0DF24)) & 0x371B0A0EEE8C1D3ELL)
       - 0x64727AF888B9F161) ^ 0x849643392C55D896 ^ __ROR8__(v87, 61);
  unint64_t v89 = (__ROR8__((((v18 + v87) ^ 0x919E5F45A3B0DF24)- ((2 * ((v18 + v87) ^ 0x919E5F45A3B0DF24)) & 0x371B0A0EEE8C1D3ELL)- 0x64727AF888B9F161) ^ 0x849643392C55D896, 8)+ v88) ^ v5;
  unint64_t v90 = v89 ^ __ROR8__(v88, 61);
  uint64_t v91 = (__ROR8__(v89, 8) + v90) ^ 0x628ABC52894BE762;
  uint64_t v92 = v91 ^ __ROR8__(v90, 61);
  *(void *)&long long v18 = __ROR8__(v91, 8);
  unint64_t v93 = (-2 - ((~(v18 + v92) | 0xC967FA94AB04334ELL) + ((v18 + v92) | 0x3698056B54FBCCB1))) ^ 0x93A76697948F142FLL;
  unint64_t v94 = v93 ^ __ROR8__(v92, 61);
  *(void *)&long long v18 = __ROR8__(v93, 8);
  v9[15] = (((-2 - ((~((void)v18 + v94) | 0x87F6A9D2E02A807ELL) + (((void)v18 + v94) | 0x7809562D1FD57F81))) ^ 0x9CFD784ACB73400FLL) >> (8 * (((_BYTE)v9 + 15) & 7u))) ^ BYTE2(v10) ^ 0x95;
  *(void *)&long long v18 = __ROR8__(v9 + 16, 8);
  unint64_t v95 = -2
      - (((0x150C087CC469144DLL - (v18 & 0xF8FFFFFFFFFFFFFFLL)) | 0xD42E87D37243C3E6)
       + (((v18 & 0xF8FFFFFFFFFFFFFFLL) - 0x550C087CC469144ELL) | 0x2BD1782C8DBC3C19));
  uint64_t v96 = v95 ^ 0x6DA5857623C2854ALL;
  v95 ^= 0x3A3A396FFF75D8DFuLL;
  *(void *)&long long v18 = __ROR8__(v96, 8);
  unint64_t v97 = (((v18 + v95) | 0x96F726EF6CD2AD87) - ((v18 + v95) | 0x6908D910932D5278) + 0x6908D910932D5278) ^ 0xC623F60E506FDCF0;
  unint64_t v98 = v97 ^ __ROR8__(v95, 61);
  unint64_t v99 = __ROR8__(v97, 8) + v98;
  unint64_t v100 = v99 ^ 0xE5D7DAAEED85A300 ^ __ROR8__(v98, 61);
  *((void *)&v18 + 1) = v99;
  *(void *)&long long v18 = v99 ^ 0xE5D7DAAEED85A300;
  uint64_t v101 = (-2 - ((~((v18 >> 8) + v100) | 0x3BD37CAD8A56413ELL) + (((v18 >> 8) + v100) | 0xC42C835275A9BEC1))) ^ 0xB556E5D672F54813;
  uint64_t v102 = v101 ^ __ROR8__(v100, 61);
  uint64_t v103 = (__ROR8__(v101, 8) + v102) ^ v5;
  uint64_t v104 = __ROR8__(v103, 8);
  uint64_t v105 = v103 ^ __ROR8__(v102, 61);
  uint64_t v106 = (v104 + v105) ^ 0x628ABC52894BE762;
  uint64_t v107 = v106 ^ __ROR8__(v105, 61);
  uint64_t v108 = (__ROR8__(v106, 8) + v107) ^ v6;
  v9[16] = (((__ROR8__(v108, 8) + (v108 ^ __ROR8__(v107, 61))) ^ 0x1B0BD1982B59C071uLL) >> (8 * (((_BYTE)v9 + 16) & 7u))) ^ BYTE1(v10) ^ 0xC0;
  unint64_t v109 = (((unint64_t)(v9 + 17) >> 8) - 0x550C087CC469144ELL + ((unint64_t)(v9 + 17) >> 3 << 59)) ^ 0xF5E6268322329A2;
  uint64_t v110 = ((2 * v109) & 0xB425A4BB16C91CCLL) - v109 - 0x5A12D25D8B648E7;
  uint64_t v111 = (__ROR8__(v110 ^ 0x4C8BB21744EBD817, 8) + (v110 ^ 0x1B140E0E985C8582)) ^ 0x50D4D0E13CBD7177;
  *((void *)&v18 + 1) = v110 ^ 0x1B140E0E985C8582;
  *(void *)&long long v18 = v110;
  uint64_t v112 = v111 ^ (v18 >> 61);
  uint64_t v113 = __ROR8__(v111, 8) + v112;
  unint64_t v114 = v113 ^ 0xE5D7DAAEED85A300 ^ __ROR8__(v112, 61);
  *((void *)&v18 + 1) = v113;
  *(void *)&long long v18 = v113 ^ 0xE5D7DAAEED85A300;
  uint64_t v115 = ((v18 >> 8) + v114) ^ 0x8E85997BF8A3092DLL;
  uint64_t v116 = v115 ^ __ROR8__(v114, 61);
  *(void *)&long long v18 = __ROR8__(v115, 8);
  unint64_t v117 = (((2 * (v18 + v116)) | 0xC2F682CA4CC09A3CLL) - (v18 + v116) - 0x617B416526604D1ELL) ^ 0xAC725E72E64F934FLL;
  unint64_t v118 = v117 ^ __ROR8__(v116, 61);
  *(void *)&long long v18 = __ROR8__(v117, 8);
  unint64_t v119 = (((2 * (v18 + v118)) | 0xC157B57B1A348C68) - (v18 + v118) - 0x60ABDABD8D1A4634) ^ 0x22166EF0451A156;
  unint64_t v120 = v119 ^ __ROR8__(v118, 61);
  *(void *)&long long v18 = __ROR8__(v119, 8);
  unint64_t v121 = (((v18 + v120) | 0xD97D8D1C4B94792ALL) - ((v18 + v120) | 0x268272E3B46B86D5) + 0x268272E3B46B86D5) ^ 0x83BD111F741F5E4BLL;
  v9[17] = (((__ROR8__(v121, 8) + (v121 ^ __ROR8__(v120, 61))) ^ 0x1B0BD1982B59C071) >> (8 * (((_BYTE)v9 + 17) & 7u))) ^ v10 ^ 0x60;
  STACK[0x390] = 0x24CC9A478416F3DCLL;
  unint64_t v122 = STACK[0x400];
  unint64_t v123 = STACK[0x2D0];
  STACK[0x2D8] = *(void *)(STACK[0x2D0] + 8 * ((int)v8 + 609839759));
  BOOL v3 = v122 == 0x66FBF218A8091D0CLL || STACK[0x200] == 0x29FEF841D9125A0BLL;
  return (*(uint64_t (**)(void))(v123
                              + 8 * (int)((v3 * (v8 ^ 0xDBA696FA ^ (v8 - 49168808) & 0x2747AF46)) ^ (v8 + 609841670))))();
}

uint64_t sub_18DA3D904@<X0>(int a1@<W8>)
{
  STACK[0x2C8] = *(void *)(STACK[0x380] - 0x24CC9A478416F3C4);
  STACK[0x2B0] = STACK[0x280] - 0x2DD266C5A2519723;
  return (*(uint64_t (**)(void))(STACK[0x2D0]
                              + 8
                              * ((111
                                * ((((v2 + v1 - 2145352669) < 8) ^ (((a1 - 101) ^ 0x7F)
                                                                                                 + 11)) & 1)) ^ (a1 + 1691))))();
}

uint64_t sub_18DA3D98C()
{
  return (*(uint64_t (**)(void))(STACK[0x2D0]
                              + 8
                              * (((((STACK[0x280] - STACK[0x2C8] - 0x2DD266C5A251972DLL < 0x10) ^ (v0 + 1)) & 1)
                                * (v0 ^ 0x866)) ^ v0)))();
}

uint64_t sub_18DA3D9EC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(STACK[0x2D0]
                                                             + 8
                                                             * (((v3 >= (((v2 ^ 0xE90) + 2) ^ 0x6CAu))
                                                               * (76 * (v2 ^ 0x846) - 606)) ^ v2 ^ 0xE90)))(a1, a2, 0);
}

#error "18DA3EACC: call analysis failed (funcsize=996)"

void sub_18DA3EAD0()
{
}

uint64_t sub_18DA3EAD8(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(void))(STACK[0x2D0]
                              + 8
                              * (int)(((679 * ((v4 - 604047836) & 0xFFA797F7 ^ 0xDBA695A7) - 1327) * (v3 == a3)) ^ v4)))();
}

uint64_t sub_18DA3EB2C()
{
  return (*(uint64_t (**)(void))(STACK[0x2D0] + 8 * (int)((((v1 >> 3) & 1) * (369 * (v0 ^ 0x54D) - 958)) ^ v0)))();
}

#error "18DA3F44C: call analysis failed (funcsize=503)"

void sub_18DA3F450()
{
}

uint64_t sub_18DA3F458(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(void))(STACK[0x2D0]
                              + 8
                              * (int)(((((a3 - 1604310395) & 0x5F9FD47F ^ 0x24596909) + ((a3 + 293732147) | 0xCA249124))
                                     * (v4 == v3)) ^ a3)))();
}

uint64_t sub_18DA3F508@<X0>(int a1@<W8>)
{
  int v2 = v1 ^ 0x7B5;
  uint64_t v3 = (a1 - 860498373);
  uint64_t v4 = v3 + STACK[0x2C8];
  unint64_t v5 = (((v4 + 10) << (v2 ^ 0xDEu)) & 0xF800000000000000 | ((unint64_t)(v4 + 10) >> 8)) - 0x550C087CC469144ELL;
  unint64_t v6 = (v5 | 0x991A82D9727F8A1ELL) - (v5 | 0x66E57D268D8075E1) + 0x66E57D268D8075E1;
  uint64_t v7 = v6 ^ 0x2091807C23FECCB2;
  v6 ^= 0x770E3C65FF499127uLL;
  uint64_t v8 = (__ROR8__(v7, 8) + v6) ^ 0x50D4D0E13CBD7177;
  uint64_t v9 = v8 ^ __ROR8__(v6, 61);
  uint64_t v10 = __ROR8__(v8, 8);
  unint64_t v11 = (((2 * (v10 + v9)) & 0x8B37078EC418761ELL) - (v10 + v9) - 0x459B83C7620C3B10) ^ 0x5FB3A696707667F0;
  unint64_t v12 = v11 ^ __ROR8__(v9, 61);
  uint64_t v13 = __ROR8__(v11, 8);
  uint64_t v14 = __ROR8__((((2 * (v13 + v12)) | 0x909803455169E568) - (v13 + v12) - 0x484C01A2A8B4F2B4) ^ 0xC6C998D95017FB99, 8);
  unint64_t v15 = (((2 * (v13 + v12)) | 0x909803455169E568) - (v13 + v12) - 0x484C01A2A8B4F2B4) ^ 0xC6C998D95017FB99 ^ __ROR8__(v12, 61);
  unint64_t v16 = (((2 * (v14 + v15)) | 0x661703085D1D211ALL) - (v14 + v15) - 0x330B81842E8E908DLL) ^ 0xFE029E93EEA14EDCLL;
  unint64_t v17 = v16 ^ __ROR8__(v15, 61);
  uint64_t v18 = __ROR8__(v16, 8);
  unint64_t v19 = (((2 * (v18 + v17)) | 0x88D82846AB8C19D8) - (v18 + v17) - 0x446C142355C60CECLL) ^ 0x26E6A871DC8DEB8ELL;
  unint64_t v20 = v19 ^ __ROR8__(v17, 61);
  uint64_t v21 = __ROR8__(v19, 8);
  unint64_t v22 = (0x96EEEB3C2090953ELL - ((v21 + v20) | 0x96EEEB3C2090953ELL) + ((v21 + v20) | 0x691114C3DF6F6AC1)) ^ 0x33D188C0E0E44DA0;
  *(unsigned char *)(v4 + 10) = (((__ROR8__(v22, 8) + (v22 ^ __ROR8__(v20, 61))) ^ 0x1B0BD1982B59C071) >> (8 * ((v4 + 10) & 7))) ^ *(unsigned char *)(STACK[0x2B0] + v3);
  return (*(uint64_t (**)(void))(STACK[0x2D0] + 8 * ((1973 * (a1 != 860498373)) ^ v2)))();
}

void *sub_18DA3F7C0(unint64_t a1)
{
  int v1 = (uint64_t *)*(&off_1E559D8D0
                  + (byte_18DDE8670[byte_18DDE7A30[(-105
                                                                                                  * ((dword_1E91BCC08 - dword_1E91BCC38) ^ 0x98))] ^ 0x6A] ^ (-105 * ((dword_1E91BCC08 - dword_1E91BCC38) ^ 0x98)))
                  + 72);
  uint64_t v2 = (uint64_t)*(&off_1E559D8D0
                + (byte_18DDE9840[byte_18DDE8470[(-105
                                                                                  * ((dword_1E91BCC08 + *v1) ^ 0x98))] ^ 0x3F] ^ (-105 * ((dword_1E91BCC08 + *v1) ^ 0x98)))
                - 161);
  uint64_t v4 = *(void *)(v2 - 4);
  uint64_t v3 = (unint64_t *)(v2 - 4);
  unint64_t v5 = (v4 - *v1) ^ (unint64_t)&v271;
  uint64_t v6 = 178978711 * v5 + 0x65D966826B658768;
  unint64_t v7 = 178978711 * (v5 ^ 0x9A26997D949A7898);
  *int v1 = v6;
  *uint64_t v3 = v7;
  LOBYTE(v7) = -105 * ((v7 - *(_DWORD *)v1) ^ 0x98);
  uint64_t v8 = *(&off_1E559D8D0 + (v7 ^ byte_18DDE9840[byte_18DDE8470[v7] ^ 0x80]) - 49);
  LODWORD(v6) = (*v8)++;
  int64_t v9 = *((void *)*(&off_1E559D8D0
                   + (byte_18DDE7B30[byte_18DDE6FD0[(-105
                                                                                     * (*(_DWORD *)v1 ^ 0x98 ^ *(_DWORD *)v3))] ^ 0x1C] ^ (-105 * (*(_DWORD *)v1 ^ 0x98 ^ *(_DWORD *)v3)))
                   - 91)
       + (v6 & 1)
       - 1);
  if (!v9) {
    return 0;
  }
  uint64_t v268 = (char *)*(&off_1E559D8D0
                 + ((-105 * ((dword_1E91BCC08 - dword_1E91BCC38) ^ 0x98)) ^ byte_18DDE7B30[byte_18DDE6FD0[(-105 * ((dword_1E91BCC08 - dword_1E91BCC38) ^ 0x98))] ^ 0x1C])
                 - 161)
       - 12;
  if ((*(unsigned char *)(v9 + 880) & 2) != 0 && atomic_exchange((atomic_uint *volatile)(v9 + 884), 1u))
  {
    char v11 = 1;
    while (*(_DWORD *)(v9 + 884) || atomic_exchange((atomic_uint *volatile)(v9 + 884), 1u))
    {
      if ((v11 & 0x3F) == 0) {
        (*(void (**)(void))&v268[8
      }
                               * ((-105 * (*(_DWORD *)v1 ^ 0x98 ^ *(_DWORD *)v3)) ^ byte_18DDE7830[byte_18DDE6DD0[(-105 * (*(_DWORD *)v1 ^ 0x98 ^ *(_DWORD *)v3))] ^ 0xF5])
                               + 16832])();
      ++v11;
    }
  }
  unint64_t v12 = (uint64_t *)((char *)*(&off_1E559D8D0
                            + ((-105 * ((*(_DWORD *)v3 - *(_DWORD *)v1) ^ 0x98)) ^ byte_18DDE9840[byte_18DDE8470[(-105 * ((*(_DWORD *)v3 - *(_DWORD *)v1) ^ 0x98))] ^ 0x3F])
                            - 169)
                  - 12);
  if (a1 <= 0xE0)
  {
    unint64_t v13 = (a1 + 31) & 0xFFFFFFFFFFFFFFF0;
    if (a1 < 0xF) {
      unint64_t v13 = 32;
    }
    unint64_t v14 = v13 >> 3;
    unint64_t v15 = *(unsigned int *)v9;
    unint64_t v16 = v15 >> ((v13 >> 3) & 0xFE);
    if ((v16 & 3) != 0)
    {
      uint64_t v17 = ((v15 >> ((v13 >> 3) & 0xFE)) & 1 | v14) ^ 1;
      uint64_t v18 = (unsigned int *)(v9 + 16 * v17);
      unint64_t v19 = v18 + 18;
      uint64_t v20 = *((void *)v18 + 11);
      uint64_t result = (void *)(v20 + 16);
      uint64_t v22 = *(void *)(v20 + 16);
      if (v19 == (unsigned int *)v22)
      {
        *(_DWORD *)int64_t v9 = v15 & ~(1 << v17);
      }
      else
      {
        *(void *)(v22 + 24) = v19;
        *((void *)v19 + 2) = v22;
      }
      *(void *)(v20 + 8) = (8 * v17) | 3;
      unint64_t v39 = (unint64_t *)(v20 + 8 * v17);
LABEL_28:
      v39[1] |= 1uLL;
      *unint64_t v39 = *v12 ^ v9;
      goto LABEL_97;
    }
    if (v13 > *(void *)(v9 + 8))
    {
      if (v16)
      {
        int v26 = (v16 << v14) & ((2 << v14) | -(2 << v14));
        unsigned int v27 = (v26 - 1) & ~v26;
        int v28 = (v27 >> 12) & 0x10;
        unsigned int v29 = v27 >> v28;
        unsigned int v30 = v28 & 0xFFFFFFF0 | (v29 >> 5) & 0xF;
        unsigned int v31 = v29 >> ((v29 >> 5) & 8);
        unsigned int v32 = v30 & 0xFFFFFFF8 | (v31 >> 2) & 7;
        unsigned int v33 = v31 >> ((v31 >> 2) & 4);
        unsigned int v34 = (v32 & 0xFFFFFFFC | (v33 >> 1) & 2 | (v33 >> ((v33 >> 1) & 2) >> 1) & 1)
            + (v33 >> ((v33 >> 1) & 2) >> (((v33 >> ((v33 >> 1) & 2)) & 2) != 0));
        uint64_t v35 = (unsigned int *)(v9 + 16 * v34);
        unint64_t v36 = v35 + 18;
        uint64_t v37 = *((void *)v35 + 11);
        uint64_t result = (void *)(v37 + 16);
        uint64_t v38 = *(void *)(v37 + 16);
        if (v36 == (unsigned int *)v38)
        {
          *(_DWORD *)int64_t v9 = v15 & ~(1 << v34);
        }
        else
        {
          *(void *)(v38 + 24) = v36;
          *((void *)v36 + 2) = v38;
        }
        uint64_t v112 = 8 * v34;
        uint64_t v113 = v112 - v13;
        if (v112 - v13 > 0x1F)
        {
          *(void *)(v37 + 8) = v13 | 3;
          unint64_t v114 = (unint64_t *)(v37 + v13);
          *unint64_t v114 = *v12 ^ v9;
          v114[1] = v113 | 1;
          *(void *)(v37 + v112) = v113;
          unint64_t v115 = *(void *)(v9 + 8);
          if (v115)
          {
            uint64_t v116 = *(void *)(v9 + 32);
            unint64_t v117 = v115 >> 3;
            uint64_t v118 = v9 + ((2 * v115) & 0x7FFFFFFF0) + 72;
            int v119 = 1 << v117;
            if ((*(_DWORD *)v9 & v119) != 0)
            {
              uint64_t v120 = *(void *)(v118 + 16);
            }
            else
            {
              *(_DWORD *)v9 |= v119;
              uint64_t v120 = v118;
            }
            *(void *)(v118 + 16) = v116;
            *(void *)(v120 + 24) = v116;
            *(void *)(v116 + 16) = v120;
            *(void *)(v116 + 24) = v118;
          }
          *(void *)(v9 + 8) = v113;
          *(void *)(v9 + 32) = v114;
          goto LABEL_97;
        }
        *(void *)(v37 + 8) = v112 | 3;
        unint64_t v39 = (unint64_t *)(v37 + v112);
        goto LABEL_28;
      }
      unsigned int v62 = *(_DWORD *)(v9 + 4);
      if (v62)
      {
        unsigned int v63 = (v62 - 1) & ~v62;
        int v64 = (v63 >> 12) & 0x10;
        unsigned int v65 = v63 >> v64;
        unsigned int v66 = v64 & 0xFFFFFFF0 | (v65 >> 5) & 0xF;
        unsigned int v67 = v65 >> ((v65 >> 5) & 8);
        unsigned int v68 = v66 & 0xFFFFFFF8 | (v67 >> 2) & 7;
        unsigned int v69 = v67 >> ((v67 >> 2) & 4);
        uint64_t v70 = *(void *)(v9
                        + 8
                        * ((v68 & 0xFFFFFFFC | (v69 >> 1) & 2 | (v69 >> ((v69 >> 1) & 2) >> 1) & 1)
                         + (v69 >> ((v69 >> 1) & 2) >> (((v69 >> ((v69 >> 1) & 2)) & 2) != 0)))
                        + 600);
        unint64_t v71 = (*(void *)(v70 + 8) & 0xFFFFFFFFFFFFFFF8) - v13;
        uint64_t v72 = 32;
        if (!*(void *)(v70 + 32)) {
          uint64_t v72 = 40;
        }
        for (uint64_t i = *(void *)(v70 + v72); i; uint64_t i = *(void *)(i + v74))
        {
          if ((*(void *)(i + 8) & 0xFFFFFFFFFFFFFFF8) - v13 < v71)
          {
            unint64_t v71 = (*(void *)(i + 8) & 0xFFFFFFFFFFFFFFF8) - v13;
            uint64_t v70 = i;
          }
          if (*(void *)(i + 32)) {
            uint64_t v74 = 32;
          }
          else {
            uint64_t v74 = 40;
          }
        }
        uint64_t v75 = *(void *)(v70 + 48);
        uint64_t v76 = *(void **)(v70 + 24);
        if (v76 != (void *)v70)
        {
          uint64_t v77 = *(void *)(v70 + 16);
          *(void *)(v77 + 24) = v76;
          v76[2] = v77;
          if (!v75) {
            goto LABEL_225;
          }
LABEL_185:
          uint64_t v167 = (unsigned int *)(v9 + 8 * *(unsigned int *)(v70 + 56));
          if (v70 == *((void *)v167 + 75))
          {
            *((void *)v167 + 75) = v76;
            if (!v76)
            {
              *(_DWORD *)(v9 + 4) &= ~(1 << *(_DWORD *)(v70 + 56));
              goto LABEL_225;
            }
          }
          else
          {
            uint64_t v168 = 40;
            if (*(void *)(v75 + 32) == v70) {
              uint64_t v168 = 32;
            }
            *(void *)(v75 + v168) = v76;
            if (!v76) {
              goto LABEL_225;
            }
          }
          v76[6] = v75;
          uint64_t v169 = *(void *)(v70 + 32);
          if (v169)
          {
            v76[4] = v169;
            *(void *)(v169 + 48) = v76;
          }
          uint64_t v170 = *(void *)(v70 + 40);
          if (v170)
          {
            v76[5] = v170;
            *(void *)(v170 + 48) = v76;
          }
          goto LABEL_225;
        }
        unint64_t v164 = (void *)(v70 + 40);
        uint64_t v165 = *(void **)(v70 + 40);
        if (v165 || (unint64_t v164 = (void *)(v70 + 32), (v165 = *(void **)(v70 + 32)) != 0))
        {
          do
          {
            do
            {
              unint64_t v166 = v164;
              uint64_t v76 = v165;
              unint64_t v164 = v165 + 5;
              uint64_t v165 = (void *)v165[5];
            }
            while (v165);
            unint64_t v164 = v76 + 4;
            uint64_t v165 = (void *)v76[4];
          }
          while (v165);
          *unint64_t v166 = 0;
          if (v75) {
            goto LABEL_185;
          }
        }
        else
        {
          uint64_t v76 = 0;
          if (v75) {
            goto LABEL_185;
          }
        }
LABEL_225:
        if (v71 > 0x1F)
        {
          *(void *)(v70 + 8) = v13 | 3;
          *(void *)(v70 + v13) = *v12 ^ v9;
          uint64_t v201 = v70 + v13;
          *(void *)(v201 + 8) = v71 | 1;
          *(void *)(v201 + v71) = v71;
          unint64_t v202 = *(void *)(v9 + 8);
          if (v202)
          {
            uint64_t v203 = *(void *)(v9 + 32);
            unint64_t v204 = v202 >> 3;
            uint64_t v205 = v9 + ((2 * v202) & 0x7FFFFFFF0) + 72;
            int v206 = 1 << v204;
            if ((*(_DWORD *)v9 & v206) != 0)
            {
              uint64_t v207 = *(void *)(v205 + 16);
            }
            else
            {
              *(_DWORD *)v9 |= v206;
              uint64_t v207 = v205;
            }
            *(void *)(v205 + 16) = v203;
            *(void *)(v207 + 24) = v203;
            *(void *)(v203 + 16) = v207;
            *(void *)(v203 + 24) = v205;
          }
          *(void *)(v9 + 8) = v71;
          *(void *)(v9 + 32) = v201;
          uint64_t result = (void *)(v70 + 16);
        }
        else
        {
          unint64_t v199 = v71 + v13;
          *(void *)(v70 + 8) = v199 | 3;
          unint64_t v200 = (unint64_t *)(v70 + v199);
          v200[1] |= 1uLL;
          *unint64_t v200 = *v12 ^ v9;
          uint64_t result = (void *)(v70 + 16);
        }
        goto LABEL_97;
      }
    }
    goto LABEL_74;
  }
  if (a1 > 0xFFFFFFFFFFFFFF7FLL)
  {
    unint64_t v13 = -1;
    goto LABEL_74;
  }
  unint64_t v13 = (a1 + 31) & 0xFFFFFFFFFFFFFFF0;
  unsigned int v23 = *(_DWORD *)(v9 + 4);
  uint64_t v283 = (_DWORD *)(v9 + 4);
  if (v23)
  {
    unint64_t v24 = -(uint64_t)v13;
    if (v13 >= 0x100)
    {
      if (v13 >> 24)
      {
        unsigned int v25 = 31;
      }
      else
      {
        unint64_t v40 = (a1 + 31) >> 8;
        unsigned int v41 = ((v40 + 1048320) >> 16) & 8;
        LODWORD(v40) = v40 << v41;
        LODWORD(v40) = (v40 << (((v40 + 520192) >> 16) & 4) << ((((v40 << (((v40 + 520192) >> 16) & 4)) + 245760) >> 16) & 2) >> 15)
                     - (((v40 + 520192) >> 16) & 4 | v41 | (((v40 << (((v40 + 520192) >> 16) & 4))
                                                                                       + 245760) >> 16) & 2);
        unsigned int v25 = ((v13 >> (v40 + 21)) & 1 | (2 * v40)) + 28;
      }
    }
    else
    {
      unsigned int v25 = 0;
    }
    uint64_t v42 = *(void *)(v9 + 8 * v25 + 600);
    if (v42)
    {
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      int v45 = 57 - (v25 >> 1);
      if (v25 == 31) {
        LOBYTE(v45) = 0;
      }
      unint64_t v46 = v13 << v45;
      while (1)
      {
        unint64_t v49 = (*(void *)(v42 + 8) & 0xFFFFFFFFFFFFFFF8) - v13;
        if (v49 < v24)
        {
          unint64_t v24 = (*(void *)(v42 + 8) & 0xFFFFFFFFFFFFFFF8) - v13;
          uint64_t v44 = v42;
          if (!v49) {
            break;
          }
        }
        uint64_t v47 = *(void *)(v42 + 40);
        uint64_t v42 = *(void *)(v42 + 8 * (v46 >> 63) + 32);
        if (v47 != v42 && v47 != 0) {
          uint64_t v43 = v47;
        }
        v46 *= 2;
        if (!v42) {
          goto LABEL_46;
        }
      }
      uint64_t v43 = v42;
      uint64_t v44 = v42;
    }
    else
    {
      uint64_t v43 = 0;
      uint64_t v44 = 0;
LABEL_46:
      if (!(v43 | v44))
      {
        int v50 = ((2 << v25) | -(2 << v25)) & v23;
        if (!v50) {
          goto LABEL_74;
        }
        uint64_t v44 = 0;
        unsigned int v51 = (v50 - 1) & ~v50;
        int v52 = (v51 >> 12) & 0x10;
        unsigned int v53 = v51 >> v52;
        unsigned int v54 = v52 & 0xFFFFFFF0 | (v53 >> 5) & 0xF;
        unsigned int v55 = v53 >> ((v53 >> 5) & 8);
        unsigned int v56 = v54 & 0xFFFFFFF8 | (v55 >> 2) & 7;
        unsigned int v57 = v55 >> ((v55 >> 2) & 4);
        uint64_t v43 = *(void *)(v9
                        + 8
                        * ((v56 & 0xFFFFFFFC | (v57 >> 1) & 2 | (v57 >> ((v57 >> 1) & 2) >> 1) & 1)
                         + (v57 >> ((v57 >> 1) & 2) >> (((v57 >> ((v57 >> 1) & 2)) & 2) != 0)))
                        + 600);
      }
      if (!v43)
      {
LABEL_56:
        unint64_t v284 = v24;
        uint64_t v285 = v44;
        if (!v44 || v284 >= *(void *)(v9 + 8) - v13) {
          goto LABEL_74;
        }
        uint64_t v286 = v285 + v13;
        uint64_t v59 = *(void *)(v285 + 48);
        uint64_t v60 = *(void **)(v285 + 24);
        if (v60 == (void *)v285)
        {
          unint64_t v121 = (void *)(v285 + 40);
          unint64_t v122 = *(void **)(v285 + 40);
          if (v122 || (unint64_t v121 = (void *)(v285 + 32), (v122 = *(void **)(v285 + 32)) != 0))
          {
            do
            {
              do
              {
                unint64_t v123 = v121;
                uint64_t v60 = v122;
                unint64_t v121 = v122 + 5;
                unint64_t v122 = (void *)v122[5];
              }
              while (v122);
              unint64_t v121 = v60 + 4;
              unint64_t v122 = (void *)v60[4];
            }
            while (v122);
            *unint64_t v123 = 0;
            if (!v59) {
              goto LABEL_211;
            }
          }
          else
          {
            uint64_t v60 = 0;
            if (!v59) {
              goto LABEL_211;
            }
          }
        }
        else
        {
          uint64_t v61 = *(void *)(v285 + 16);
          *(void *)(v61 + 24) = v60;
          v60[2] = v61;
          if (!v59) {
            goto LABEL_211;
          }
        }
        uint64_t v124 = v285;
        uint64_t v125 = (unsigned int *)(v9 + 8 * *(unsigned int *)(v285 + 56));
        if (v285 == *((void *)v125 + 75))
        {
          *((void *)v125 + 75) = v60;
          if (!v60)
          {
            *v283 &= ~(1 << *(_DWORD *)(v124 + 56));
            goto LABEL_211;
          }
        }
        else
        {
          uint64_t v126 = 40;
          if (*(void *)(v59 + 32) == v285) {
            uint64_t v126 = 32;
          }
          *(void *)(v59 + v126) = v60;
          if (!v60)
          {
LABEL_211:
            if (v284 > 0x1F)
            {
              unint64_t v186 = (unint64_t *)v286;
              *(void *)(v285 + 8) = v13 | 3;
              unint64_t v187 = v284;
              uint64_t v188 = v284 | 1;
              *unint64_t v186 = *v12 ^ v9;
              v186[1] = v188;
              *(unint64_t *)((char *)v186 + v187) = v187;
              if (v187 > 0xFF)
              {
                unsigned int v272 = 31;
                if (!(v187 >> 24))
                {
                  unsigned int v193 = (((v284 >> 8) + 1048320) >> 16) & 8;
                  unsigned int v194 = (v284 >> 8) << v193;
                  unsigned int v195 = (v194 << (((v194 + 520192) >> 16) & 4) << ((((v194 << (((v194 + 520192) >> 16) & 4)) + 245760) >> 16) & 2) >> 15)
                       - (((v194 + 520192) >> 16) & 4 | v193 | (((v194 << (((v194 + 520192) >> 16) & 4)) + 245760) >> 16) & 2);
                  unsigned int v272 = ((v284 >> (v195 + 21)) & 1 | (2 * v195)) + 28;
                }
                unsigned int v273 = v272;
                uint64_t v274 = v9 + 8 * v272 + 600;
                uint64_t v196 = v286;
                *(_DWORD *)(v286 + 56) = v272;
                unint64_t v270 = (unsigned char *)(v196 + 32);
                unsigned int v197 = ((-105 * ((*(_DWORD *)v3 - *(_DWORD *)v1) ^ 0x98)) ^ byte_18DDE9940[byte_18DDE8570[(-105 * ((*(_DWORD *)v3 - *(_DWORD *)v1) ^ 0x98))] ^ 0x3B])
                     + 2049;
LABEL_219:
                uint64_t v269 = *(void *)&v268[8 * v197];
                goto LABEL_294;
              }
              unint64_t v189 = v187 >> 3;
              uint64_t v190 = v9 + ((2 * v187) & 0x7FFFFFFF0) + 72;
              int v191 = 1 << v189;
              if ((v191 & *(_DWORD *)v9) != 0)
              {
                uint64_t v192 = *(void *)(v190 + 16);
              }
              else
              {
                *(_DWORD *)v9 |= v191;
                uint64_t v192 = v190;
              }
              uint64_t v198 = v286;
              *(void *)(v190 + 16) = v286;
              *(void *)(v192 + 24) = v198;
              *(void *)(v198 + 16) = v192;
              *(void *)(v198 + 24) = v190;
            }
            else
            {
              uint64_t v183 = v285;
              unint64_t v184 = v284 + v13;
              *(void *)(v285 + 8) = v184 | 3;
              unint64_t v185 = (unint64_t *)(v183 + v184);
              v185[1] |= 1uLL;
              *unint64_t v185 = *v12 ^ v9;
            }
            unint64_t v85 = (uint64_t *)v285;
LABEL_96:
            uint64_t result = v85 + 2;
            goto LABEL_97;
          }
        }
        v60[6] = v59;
        uint64_t v154 = *(void *)(v285 + 32);
        if (v154)
        {
          v60[4] = v154;
          *(void *)(v154 + 48) = v60;
        }
        uint64_t v155 = *(void *)(v285 + 40);
        if (v155)
        {
          v60[5] = v155;
          *(void *)(v155 + 48) = v60;
        }
        goto LABEL_211;
      }
    }
    do
    {
      if ((*(void *)(v43 + 8) & 0xFFFFFFFFFFFFFFF8) - v13 < v24)
      {
        unint64_t v24 = (*(void *)(v43 + 8) & 0xFFFFFFFFFFFFFFF8) - v13;
        uint64_t v44 = v43;
      }
      if (*(void *)(v43 + 32)) {
        uint64_t v58 = 32;
      }
      else {
        uint64_t v58 = 40;
      }
      uint64_t v43 = *(void *)(v43 + v58);
    }
    while (v43);
    goto LABEL_56;
  }
LABEL_74:
  unint64_t v287 = v13;
  unint64_t v78 = *(void *)(v9 + 8);
  if (v13 <= v78)
  {
    unint64_t v84 = v78 - v287;
    unint64_t v85 = *(uint64_t **)(v9 + 32);
    if (v78 - v287 < 0x20)
    {
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 32) = 0;
      v85[1] = v78 | 3;
      unint64_t v87 = (unint64_t *)((char *)v85 + v78);
      *(uint64_t *)((char *)v85 + v78 + 8) |= 1uLL;
    }
    else
    {
      unint64_t v86 = v287;
      unint64_t v87 = (unint64_t *)((char *)v85 + v287);
      *(void *)(v9 + 32) = (char *)v85 + v287;
      *(void *)(v9 + 8) = v84;
      v87[1] = v84 | 1;
      *(uint64_t *)((char *)v85 + v78) = v84;
      v85[1] = v86 | 3;
    }
    *unint64_t v87 = *v12 ^ v9;
    goto LABEL_96;
  }
  unint64_t v79 = *(void *)(v9 + 16);
  uint64_t v288 = (uint64_t *)(v9 + 16);
  if (v287 < v79)
  {
    unint64_t v80 = v287;
    uint64_t v81 = v79 - v287;
    *uint64_t v288 = v81;
    uint64_t v82 = *(void *)(v9 + 40);
    unint64_t v83 = (unint64_t *)(v82 + v80);
    *(void *)(v9 + 40) = v82 + v80;
    v83[1] = v81 | 1;
    *(void *)(v82 + 8) = v80 | 3;
    *unint64_t v83 = *v12 ^ v9;
    uint64_t result = (void *)(v82 + 16);
    goto LABEL_97;
  }
  if (v79)
  {
    if ((*(_DWORD *)(v9 + 880) & 1) != 0 && v12[3] <= v287)
    {
      unint64_t v88 = (v12[1] + v287 + 62) & -v12[1];
      unint64_t v89 = *(void *)(v9 + 872);
      if (!v89 || (unint64_t v90 = *(void *)(v9 + 856), v90 + v88 > v90) && v90 + v88 <= v89)
      {
        if (v88 > v287)
        {
          unint64_t v91 = (*(uint64_t (**)(void, unint64_t, uint64_t, uint64_t, uint64_t, void))&v268[8 * ((-105 * ((*(_DWORD *)v3 + *(_DWORD *)v1) ^ 0x98)) ^ byte_18DDE9940[byte_18DDE8570[(-105 * ((*(_DWORD *)v3 + *(_DWORD *)v1) ^ 0x98))] ^ 0x82]) + 17576])(0, (v12[1] + v287 + 62) & -v12[1], 3, 4098, 0xFFFFFFFFLL, 0);
          if (v91 != -1)
          {
            uint64_t v92 = -(v91 + 16) & 0xFLL;
            if (((v91 + 16) & 0xF) == 0) {
              uint64_t v92 = 0;
            }
            unint64_t v85 = (uint64_t *)(v91 + v92);
            *unint64_t v85 = v92;
            v85[1] = v88 - v92 - 32;
            unint64_t v93 = v91 + v88 - 32;
            *(void *)unint64_t v93 = *v12 ^ v9;
            *(_OWORD *)(v93 + 8) = xmmword_18DDE9A50;
            unint64_t v94 = *(void *)(v9 + 24);
            if (!v94 || v91 < v94) {
              *(void *)(v9 + 24) = v91;
            }
            unint64_t v95 = *(void *)(v9 + 856) + v88;
            *(void *)(v9 + 856) = v95;
            if (v95 > *(void *)(v9 + 864)) {
              *(void *)(v9 + 864) = v95;
            }
            goto LABEL_96;
          }
        }
      }
    }
  }
  uint64_t result = 0;
  unint64_t v96 = (v12[2] + v287 + 95) & -v12[2];
  if (v96 > v287)
  {
    unint64_t v97 = *(void *)(v9 + 872);
    if (!v97 || (result = 0, unint64_t v98 = *(void *)(v9 + 856), v98 + v96 > v98) && v98 + v96 <= v97)
    {
      unint64_t v99 = (*(uint64_t (**)(void, unint64_t, uint64_t, uint64_t, uint64_t, void))&v268[8 * ((-105 * ((*(_DWORD *)v3 - *(_DWORD *)v1) ^ 0x98)) ^ byte_18DDE7830[byte_18DDE6DD0[(-105 * ((*(_DWORD *)v3 - *(_DWORD *)v1) ^ 0x98))] ^ 0xF5]) + 16912])(0, v96, 3, 4098, 0xFFFFFFFFLL, 0);
      BOOL v100 = v99 != -1;
      if (v99 == -1) {
        unint64_t v101 = 0;
      }
      else {
        unint64_t v101 = v96;
      }
      if (v99 == -1)
      {
LABEL_310:
        unint64_t v267 = (_DWORD *)(*(uint64_t (**)(void))&v268[8
                                                   * ((-105 * ((*(_DWORD *)v3 - *(_DWORD *)v1) ^ 0x98)) ^ byte_18DDE9940[byte_18DDE8570[(-105 * ((*(_DWORD *)v3 - *(_DWORD *)v1) ^ 0x98))] ^ 0x82])
                                                   + 17704])();
        uint64_t result = 0;
        *unint64_t v267 = 12;
        goto LABEL_97;
      }
      unint64_t v102 = *(void *)(v9 + 856) + v96;
      *(void *)(v9 + 856) = v102;
      if (v102 > *(void *)(v9 + 864)) {
        *(void *)(v9 + 864) = v102;
      }
      unint64_t v103 = *(void *)(v9 + 40);
      uint64_t v289 = (uint64_t *)(v9 + 40);
      unint64_t v290 = v103;
      if (!v103)
      {
        unint64_t v156 = *(void *)(v9 + 24);
        if (!v156 || v99 < v156) {
          *(void *)(v9 + 24) = v99;
        }
        *(void *)(v9 + 888) = v99;
        *(void *)(v9 + 896) = v96;
        *(_DWORD *)(v9 + 912) = v100;
        uint64_t v157 = *v12;
        *(void *)(v9 + 56) = 4095;
        *(void *)(v9 + 64) = v157;
        *(void *)(v9 + 88) = v9 + 72;
        *(void *)(v9 + 96) = v9 + 72;
        *(void *)(v9 + 112) = v9 + 88;
        *(void *)(v9 + 104) = v9 + 88;
        *(void *)(v9 + 128) = v9 + 104;
        *(void *)(v9 + 120) = v9 + 104;
        *(void *)(v9 + 136) = v9 + 120;
        *(void *)(v9 + 144) = v9 + 120;
        *(void *)(v9 + 160) = v9 + 136;
        *(void *)(v9 + 152) = v9 + 136;
        *(void *)(v9 + 176) = v9 + 152;
        *(void *)(v9 + 168) = v9 + 152;
        *(void *)(v9 + 184) = v9 + 168;
        *(void *)(v9 + 192) = v9 + 168;
        *(void *)(v9 + 208) = v9 + 184;
        *(void *)(v9 + 200) = v9 + 184;
        *(void *)(v9 + 224) = v9 + 200;
        *(void *)(v9 + 216) = v9 + 200;
        *(void *)(v9 + 232) = v9 + 216;
        *(void *)(v9 + 240) = v9 + 216;
        *(void *)(v9 + 248) = v9 + 232;
        *(void *)(v9 + 256) = v9 + 232;
        *(void *)(v9 + 264) = v9 + 248;
        *(void *)(v9 + 272) = v9 + 248;
        *(void *)(v9 + 280) = v9 + 264;
        *(void *)(v9 + 288) = v9 + 264;
        *(void *)(v9 + 296) = v9 + 280;
        *(void *)(v9 + 304) = v9 + 280;
        *(void *)(v9 + 312) = v9 + 296;
        *(void *)(v9 + 320) = v9 + 296;
        *(void *)(v9 + 328) = v9 + 312;
        *(void *)(v9 + 336) = v9 + 312;
        *(void *)(v9 + 344) = v9 + 328;
        *(void *)(v9 + 352) = v9 + 328;
        *(void *)(v9 + 360) = v9 + 344;
        *(void *)(v9 + 368) = v9 + 344;
        *(void *)(v9 + 376) = v9 + 360;
        *(void *)(v9 + 384) = v9 + 360;
        *(void *)(v9 + 392) = v9 + 376;
        *(void *)(v9 + 400) = v9 + 376;
        *(void *)(v9 + 408) = v9 + 392;
        *(void *)(v9 + 416) = v9 + 392;
        *(void *)(v9 + 424) = v9 + 408;
        *(void *)(v9 + 432) = v9 + 408;
        *(void *)(v9 + 440) = v9 + 424;
        *(void *)(v9 + 448) = v9 + 424;
        *(void *)(v9 + 456) = v9 + 440;
        *(void *)(v9 + 464) = v9 + 440;
        *(void *)(v9 + 472) = v9 + 456;
        *(void *)(v9 + 480) = v9 + 456;
        *(void *)(v9 + 488) = v9 + 472;
        *(void *)(v9 + 504) = v9 + 488;
        *(void *)(v9 + 512) = v9 + 488;
        *(void *)(v9 + 496) = v9 + 472;
        *(void *)(v9 + 528) = v9 + 504;
        *(void *)(v9 + 520) = v9 + 504;
        *(void *)(v9 + 544) = v9 + 520;
        *(void *)(v9 + 536) = v9 + 520;
        *(void *)(v9 + 560) = v9 + 536;
        *(void *)(v9 + 552) = v9 + 536;
        *(void *)(v9 + 576) = v9 + 552;
        *(void *)(v9 + 568) = v9 + 552;
        *(void *)(v9 + 592) = v9 + 568;
        *(void *)(v9 + 584) = v9 + 568;
        uint64_t v158 = (char *)(v9 + (*(void *)(v9 - 8) & 0xFFFFFFFFFFFFFFF8));
        uint64_t v159 = v158 - 16;
        uint64_t v160 = v99 + v96 - (void)(v158 - 16);
        if ((v158 & 0xF) != 0) {
          uint64_t v161 = -(int)v158 & 0xFLL;
        }
        else {
          uint64_t v161 = 0;
        }
        unint64_t v162 = &v159[v161];
        uint64_t v163 = v160 - v161 - 80;
        *uint64_t v289 = (uint64_t)v162;
        *uint64_t v288 = v163;
        *((void *)v162 + 1) = v163 | 1;
        *(void *)(v99 + v96 - 72) = 80;
        goto LABEL_179;
      }
      unint64_t v104 = *(void *)(v9 + 888);
      uint64_t v105 = *(void *)(v9 + 896);
      if (v99 == v104 + v105 && (*(_DWORD *)(v9 + 912) & 9) == 1 && v290 >= v104 && v290 < v99)
      {
        *(void *)(v9 + 896) = v105 + v96;
        uint64_t v106 = v288;
        unint64_t v107 = *v288 + v96;
        unint64_t v108 = v290;
        if (((v290 + 16) & 0xF) != 0) {
          uint64_t v109 = -(v290 + 16) & 0xFLL;
        }
        else {
          uint64_t v109 = 0;
        }
        unint64_t v110 = v290 + v109;
        unint64_t v111 = v107 - v109;
        *uint64_t v289 = v110;
        *uint64_t v106 = v111;
        *(void *)(v110 + 8) = v111 | 1;
        *(void *)(v108 + v107 + 8) = 80;
LABEL_179:
        *(void *)(v9 + 48) = v12[4];
        goto LABEL_308;
      }
      uint64_t v127 = (char *)(v9 + 888);
      if (v99 < *(void *)(v9 + 24)) {
        *(void *)(v9 + 24) = v99;
      }
      unint64_t v128 = v99 + v96;
      uint64_t v129 = (unint64_t *)(v9 + 888);
      if (*(void *)v127 != v99 + v96 || (uint64_t v129 = (unint64_t *)(v9 + 888), (*(_DWORD *)(v9 + 912) & 9) != 1))
      {
        while (1)
        {
          unint64_t v140 = *v129;
          if (*v129 <= v290)
          {
            unint64_t v141 = v129[1];
            unint64_t v142 = v140 + v141;
            if (v140 + v141 > v290) {
              break;
            }
          }
          uint64_t v129 = (unint64_t *)v129[2];
        }
        if (((v142 - 79) & 0xF) != 0) {
          uint64_t v143 = (79 - (int)v142) & 0xFLL;
        }
        else {
          uint64_t v143 = 0;
        }
        unint64_t v144 = v142 + v143 - 95;
        unint64_t v145 = (unsigned char *)(v290 + 32);
        if (v144 >= v290 + 32) {
          unint64_t v146 = (char *)v144;
        }
        else {
          unint64_t v146 = (char *)v290;
        }
        unint64_t v147 = v146 + 16;
        unint64_t v148 = v101 - 80;
        if (((v99 + 16) & 0xF) != 0) {
          uint64_t v149 = -(v99 + 16) & 0xFLL;
        }
        else {
          uint64_t v149 = 0;
        }
        unint64_t v150 = v99 + v149;
        uint64_t v151 = v148 - v149;
        *uint64_t v289 = v150;
        *uint64_t v288 = v151;
        *(void *)(v150 + 8) = v151 | 1;
        *(void *)(v99 + v148 + 8) = 80;
        *(void *)(v9 + 48) = v12[4];
        *((void *)v146 + 1) = 51;
        *((void *)v146 + 6) = *v12 ^ v9;
        if (((v147 ^ v127) & 7) != 0)
        {
          uint64_t v152 = 0;
          do
          {
            unint64_t v153 = &v147[v152];
            *unint64_t v153 = v127[v152];
            v153[1] = v127[v152 + 1];
            v153[2] = v127[v152 + 2];
            v153[3] = v127[v152 + 3];
            v153[4] = v127[v152 + 4];
            v153[5] = v127[v152 + 5];
            v153[6] = v127[v152 + 6];
            v153[7] = v127[v152 + 7];
            v152 += 8;
          }
          while (v152 != 32);
        }
        else
        {
          unint64_t v171 = -(int)v127 & 7;
          unint64_t v172 = v146 + 16;
          switch((int)v171)
          {
            case 1:
              goto LABEL_205;
            case 2:
              goto LABEL_204;
            case 3:
              goto LABEL_203;
            case 4:
              goto LABEL_202;
            case 5:
              goto LABEL_201;
            case 6:
              goto LABEL_200;
            case 7:
              char v173 = *v127;
              uint64_t v127 = (char *)(v9 + 889);
              *unint64_t v147 = v173;
              unint64_t v172 = v146 + 17;
LABEL_200:
              char v174 = *v127++;
              *v172++ = v174;
LABEL_201:
              char v175 = *v127++;
              *v172++ = v175;
LABEL_202:
              char v176 = *v127++;
              *v172++ = v176;
LABEL_203:
              char v177 = *v127++;
              *v172++ = v177;
LABEL_204:
              char v178 = *v127++;
              *v172++ = v178;
LABEL_205:
              char v179 = *v127++;
              *v172++ = v179;
              break;
            default:
              break;
          }
          BOOL v180 = v171 <= 0x20;
          unint64_t v181 = 32 - v171;
          if (!v180) {
            unint64_t v181 = 0;
          }
          if (v181 >= 8)
          {
            unint64_t v182 = ((v181 >> 3) + 7) >> 3;
            switch((v181 >> 3) & 7)
            {
              case 1uLL:
                goto LABEL_276;
              case 2uLL:
                goto LABEL_275;
              case 3uLL:
                goto LABEL_274;
              case 4uLL:
                goto LABEL_273;
              case 5uLL:
                goto LABEL_272;
              case 6uLL:
                goto LABEL_271;
              case 7uLL:
                goto LABEL_270;
              default:
                do
                {
                  uint64_t v233 = *(void *)v127;
                  v127 += 8;
                  *(void *)unint64_t v172 = v233;
                  v172 += 8;
LABEL_270:
                  uint64_t v234 = *(void *)v127;
                  v127 += 8;
                  *(void *)unint64_t v172 = v234;
                  v172 += 8;
LABEL_271:
                  uint64_t v235 = *(void *)v127;
                  v127 += 8;
                  *(void *)unint64_t v172 = v235;
                  v172 += 8;
LABEL_272:
                  uint64_t v236 = *(void *)v127;
                  v127 += 8;
                  *(void *)unint64_t v172 = v236;
                  v172 += 8;
LABEL_273:
                  uint64_t v237 = *(void *)v127;
                  v127 += 8;
                  *(void *)unint64_t v172 = v237;
                  v172 += 8;
LABEL_274:
                  uint64_t v238 = *(void *)v127;
                  v127 += 8;
                  *(void *)unint64_t v172 = v238;
                  v172 += 8;
LABEL_275:
                  uint64_t v239 = *(void *)v127;
                  v127 += 8;
                  *(void *)unint64_t v172 = v239;
                  v172 += 8;
LABEL_276:
                  uint64_t v240 = *(void *)v127;
                  v127 += 8;
                  *(void *)unint64_t v172 = v240;
                  v172 += 8;
                  --v182;
                }
                while (v182);
                break;
            }
          }
          switch(v181 & 7)
          {
            case 1uLL:
              goto LABEL_284;
            case 2uLL:
              goto LABEL_283;
            case 3uLL:
              goto LABEL_282;
            case 4uLL:
              goto LABEL_281;
            case 5uLL:
              goto LABEL_280;
            case 6uLL:
              goto LABEL_279;
            case 7uLL:
              char v241 = *v127++;
              *v172++ = v241;
LABEL_279:
              char v242 = *v127++;
              *v172++ = v242;
LABEL_280:
              char v243 = *v127++;
              *v172++ = v243;
LABEL_281:
              char v244 = *v127++;
              *v172++ = v244;
LABEL_282:
              char v245 = *v127++;
              *v172++ = v245;
LABEL_283:
              char v246 = *v127++;
              *v172++ = v246;
LABEL_284:
              *unint64_t v172 = *v127;
              break;
            default:
              break;
          }
        }
        *(void *)(v9 + 888) = v99;
        *(void *)(v9 + 896) = v101;
        *(_DWORD *)(v9 + 912) = v100;
        *(void *)(v9 + 904) = v147;
        unint64_t v247 = (char *)(v141 + v140);
        if (v141 + v140 <= (unint64_t)(v146 + 64)) {
          unint64_t v247 = v146 + 64;
        }
        (*(void (**)(void *, void, unint64_t))&v268[8
                                                                        * ((-105
                                                                                           * ((*(_DWORD *)v3
                                                                                             + *(_DWORD *)v1) ^ 0x98)) ^ byte_18DDE9840[byte_18DDE8470[(-105 * ((*(_DWORD *)v3 + *(_DWORD *)v1) ^ 0x98))] ^ 0x80])
                                                                        + 16784])((void *)v146 + 7, *(&off_1E559D8D0+ ((-105 * (*(unsigned char *)v1 ^ 0x98 ^ *(unsigned char *)v3)) ^ byte_18DDE7B30[byte_18DDE6FD0[(-105 * (*(unsigned char *)v1 ^ 0x98 ^ *(unsigned char *)v3))] ^ 0x1C])- 73), ((v247 - v146 - 57) & 0xFFFFFFFFFFFFFFF8) + 8);
        if (v146 != (char *)v290)
        {
          unint64_t v248 = v290;
          unint64_t v249 = (unint64_t)&v146[-v290];
          unint64_t v294 = (unint64_t)&v146[-v290];
          *((void *)v146 + 1) &= ~1uLL;
          *(void *)(v248 + 8) = (unint64_t)&v146[-v248] | 1;
          *(void *)unint64_t v146 = &v146[-v248];
          if ((unint64_t)&v146[-v248] > 0xFF)
          {
            unsigned int v279 = 31;
            if (!(v249 >> 24))
            {
              unsigned int v254 = (((v294 >> 8) + 1048320) >> 16) & 8;
              unsigned int v255 = (v294 >> 8) << v254;
              unsigned int v256 = (v255 << (((v255 + 520192) >> 16) & 4) << ((((v255 << (((v255 + 520192) >> 16) & 4)) + 245760) >> 16) & 2) >> 15)
                   - (((v255 + 520192) >> 16) & 4 | v254 | (((v255 << (((v255 + 520192) >> 16) & 4)) + 245760) >> 16) & 2);
              unsigned int v279 = ((v294 >> (v256 + 21)) & 1 | (2 * v256)) + 28;
            }
            unsigned int v280 = v279;
            uint64_t v257 = v9 + 8 * v279 + 600;
            *(_DWORD *)(v290 + 56) = v279;
            uint64_t v281 = v257;
            uint64_t v282 = (unsigned int *)(v9 + 4);
            unint64_t v270 = v145;
            uint64_t v269 = *(void *)&v268[8
                                  * ((-105 * (*(_DWORD *)v1 ^ 0x98 ^ *(_DWORD *)v3)) ^ byte_18DDE7B30[byte_18DDE6FD0[(-105 * (*(_DWORD *)v1 ^ 0x98 ^ *(_DWORD *)v3))] ^ 0x1C])
                                  + 15632];
LABEL_294:
            uint64_t v258 = v270;
            unint64_t v259 = -(int)v270 & 7;
            if (v259 > 0x10) {
              LODWORD(v259) = 16;
            }
            switch((int)v259)
            {
              case 1:
                goto LABEL_303;
              case 2:
                goto LABEL_302;
              case 3:
                goto LABEL_301;
              case 4:
                goto LABEL_300;
              case 5:
                goto LABEL_299;
              case 6:
                goto LABEL_298;
              case 7:
                *unint64_t v270 = 0;
                uint64_t v258 = v270 + 1;
LABEL_298:
                *v258++ = 0;
LABEL_299:
                *v258++ = 0;
LABEL_300:
                *v258++ = 0;
LABEL_301:
                *v258++ = 0;
LABEL_302:
                *v258++ = 0;
LABEL_303:
                *v258++ = 0;
                break;
              default:
                break;
            }
            unint64_t v260 = 16 - v259;
            if (v260 >= 8)
            {
              unint64_t v261 = ((v260 >> 3) + 7) >> 3;
              switch((v260 >> 3) & 7)
              {
                case 1uLL:
                  goto LABEL_318;
                case 2uLL:
                  goto LABEL_317;
                case 3uLL:
                  goto LABEL_316;
                case 4uLL:
                  goto LABEL_315;
                case 5uLL:
                  goto LABEL_314;
                case 6uLL:
                  goto LABEL_313;
                case 7uLL:
                  goto LABEL_312;
                default:
                  do
                  {
                    *(void *)uint64_t v258 = 0;
                    v258 += 8;
LABEL_312:
                    *(void *)uint64_t v258 = 0;
                    v258 += 8;
LABEL_313:
                    *(void *)uint64_t v258 = 0;
                    v258 += 8;
LABEL_314:
                    *(void *)uint64_t v258 = 0;
                    v258 += 8;
LABEL_315:
                    *(void *)uint64_t v258 = 0;
                    v258 += 8;
LABEL_316:
                    *(void *)uint64_t v258 = 0;
                    v258 += 8;
LABEL_317:
                    *(void *)uint64_t v258 = 0;
                    v258 += 8;
LABEL_318:
                    *(void *)uint64_t v258 = 0;
                    v258 += 8;
                    --v261;
                  }
                  while (v261);
                  break;
              }
            }
            switch(v260 & 7)
            {
              case 1uLL:
                goto LABEL_327;
              case 2uLL:
                goto LABEL_326;
              case 3uLL:
                goto LABEL_325;
              case 4uLL:
                goto LABEL_324;
              case 5uLL:
                goto LABEL_323;
              case 6uLL:
                goto LABEL_322;
              case 7uLL:
                *v258++ = 0;
LABEL_322:
                *v258++ = 0;
LABEL_323:
                *v258++ = 0;
LABEL_324:
                *v258++ = 0;
LABEL_325:
                *v258++ = 0;
LABEL_326:
                *v258++ = 0;
LABEL_327:
                *uint64_t v258 = 0;
                __asm { BRAA            X8, X17 }
                return result;
              default:
                __asm { BRAA            X8, X17 }
                return result;
            }
          }
          unint64_t v250 = v249 >> 3;
          uint64_t v251 = v9 + ((2 * v249) & 0x7FFFFFFF0) + 72;
          int v252 = 1 << v250;
          if ((v252 & *(_DWORD *)v9) != 0)
          {
            uint64_t v253 = *(void *)(v251 + 16);
          }
          else
          {
            *(_DWORD *)v9 |= v252;
            uint64_t v253 = v251;
          }
          unint64_t v262 = v290;
          *(void *)(v251 + 16) = v290;
          *(void *)(v253 + 24) = v262;
          *(void *)(v262 + 16) = v253;
          *(void *)(v262 + 24) = v251;
        }
LABEL_308:
        if (*v288 > v287)
        {
          unint64_t v263 = v287;
          uint64_t v264 = *v288 - v287;
          *uint64_t v288 = v264;
          uint64_t v265 = *v289;
          uint64_t v266 = (unint64_t *)(*v289 + v263);
          *uint64_t v289 = (uint64_t)v266;
          v266[1] = v264 | 1;
          *(void *)(v265 + 8) = v263 | 3;
          *uint64_t v266 = *v12 ^ v9;
          uint64_t result = (void *)(v265 + 16);
          goto LABEL_97;
        }
        goto LABEL_310;
      }
      *(void *)(v9 + 888) = v99;
      *(void *)(v9 + 896) += v96;
      if (((v99 + 16) & 0xF) != 0) {
        uint64_t v130 = -(v99 + 16) & 0xFLL;
      }
      else {
        uint64_t v130 = 0;
      }
      unint64_t v131 = v99 + v130;
      if (((v128 + 16) & 0xF) != 0) {
        uint64_t v132 = -(v128 + 16) & 0xFLL;
      }
      else {
        uint64_t v132 = 0;
      }
      unint64_t v133 = v128 + v132;
      unint64_t v134 = v287;
      unint64_t v291 = (uint64_t *)v131;
      unint64_t v292 = v131 + v287;
      unint64_t v135 = v133 - v131 - v287;
      *(void *)(v131 + 8) = v287 | 3;
      *(void *)(v131 + v134) = *v12 ^ v9;
      if (v133 == *v289)
      {
        unint64_t v208 = *v288 + v135;
        *uint64_t v288 = v208;
        unint64_t v209 = v292;
        *uint64_t v289 = v292;
        *(void *)(v209 + 8) = v208 | 1;
      }
      else
      {
        if (v133 != *(void *)(v9 + 32))
        {
          unint64_t v136 = *(void *)(v133 + 8);
          if ((v136 & 3) != 1)
          {
LABEL_258:
            unint64_t v293 = v135;
            *(void *)(v133 + 8) = v136 & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v222 = v292;
            *(void *)(v292 + 8) = v135 | 1;
            *(void *)(v222 + v135) = v135;
            if (v135 <= 0xFF)
            {
              unint64_t v223 = v135 >> 3;
              uint64_t v224 = v9 + ((2 * v135) & 0x7FFFFFFF0) + 72;
              int v225 = 1 << v223;
              if ((v225 & *(_DWORD *)v9) != 0)
              {
                uint64_t v226 = *(void *)(v224 + 16);
              }
              else
              {
                *(_DWORD *)v9 |= v225;
                uint64_t v226 = v224;
              }
              unint64_t v232 = v292;
              *(void *)(v224 + 16) = v292;
              *(void *)(v226 + 24) = v232;
              *(void *)(v232 + 16) = v226;
              *(void *)(v232 + 24) = v224;
              goto LABEL_268;
            }
            unsigned int v275 = 31;
            if (!(v135 >> 24))
            {
              unsigned int v227 = (((v293 >> 8) + 1048320) >> 16) & 8;
              unsigned int v228 = (v293 >> 8) << v227;
              unsigned int v229 = (v228 << (((v228 + 520192) >> 16) & 4) << ((((v228 << (((v228 + 520192) >> 16) & 4)) + 245760) >> 16) & 2) >> 15)
                   - (((v228 + 520192) >> 16) & 4 | v227 | (((v228 << (((v228 + 520192) >> 16) & 4)) + 245760) >> 16) & 2);
              unsigned int v275 = ((v293 >> (v229 + 21)) & 1 | (2 * v229)) + 28;
            }
            unsigned int v276 = v275;
            uint64_t v230 = v9 + 8 * v275 + 600;
            unint64_t v231 = v292;
            *(_DWORD *)(v292 + 56) = v275;
            uint64_t v277 = v230;
            unint64_t v278 = (unsigned int *)(v9 + 4);
            unint64_t v270 = (unsigned char *)(v231 + 32);
            unsigned int v197 = ((-105 * (*(_DWORD *)v1 ^ 0x98 ^ *(_DWORD *)v3)) ^ byte_18DDE8670[byte_18DDE7A30[(-105 * (*(_DWORD *)v1 ^ 0x98 ^ *(_DWORD *)v3))] ^ 0x6A])
                 + 2175;
            goto LABEL_219;
          }
          unint64_t v137 = v136 & 0xFFFFFFFFFFFFFFF8;
          if (v136 <= 0xFF)
          {
            uint64_t v138 = *(void *)(v133 + 16);
            uint64_t v139 = *(void *)(v133 + 24);
            if (v139 == v138)
            {
              *(_DWORD *)v9 &= ~(1 << (v136 >> 3));
            }
            else
            {
              *(void *)(v138 + 24) = v139;
              *(void *)(v139 + 16) = v138;
            }
            goto LABEL_257;
          }
          uint64_t v212 = *(void *)(v133 + 48);
          uint64_t v213 = *(void **)(v133 + 24);
          if (v213 == (void *)v133)
          {
            uint64_t v215 = (void *)(v133 + 40);
            unint64_t v216 = *(void **)(v133 + 40);
            if (v216 || (uint64_t v215 = (void *)(v133 + 32), (v216 = *(void **)(v133 + 32)) != 0))
            {
              do
              {
                do
                {
                  unint64_t v217 = v215;
                  uint64_t v213 = v216;
                  uint64_t v215 = v216 + 5;
                  unint64_t v216 = (void *)v216[5];
                }
                while (v216);
                uint64_t v215 = v213 + 4;
                unint64_t v216 = (void *)v213[4];
              }
              while (v216);
              *unint64_t v217 = 0;
            }
            else
            {
              uint64_t v213 = 0;
            }
          }
          else
          {
            uint64_t v214 = *(void *)(v133 + 16);
            *(void *)(v214 + 24) = v213;
            v213[2] = v214;
          }
          if (!v212) {
            goto LABEL_257;
          }
          unint64_t v218 = (unsigned int *)(v9 + 8 * *(unsigned int *)(v133 + 56));
          if (v133 == *((void *)v218 + 75))
          {
            *((void *)v218 + 75) = v213;
            if (!v213)
            {
              *(_DWORD *)(v9 + 4) &= ~(1 << *(_DWORD *)(v133 + 56));
LABEL_257:
              v133 += v137;
              v135 += v137;
              unint64_t v136 = *(void *)(v133 + 8);
              goto LABEL_258;
            }
          }
          else
          {
            uint64_t v219 = 40;
            if (*(void *)(v212 + 32) == v133) {
              uint64_t v219 = 32;
            }
            *(void *)(v212 + v219) = v213;
            if (!v213) {
              goto LABEL_257;
            }
          }
          v213[6] = v212;
          uint64_t v220 = *(void *)(v133 + 32);
          if (v220)
          {
            v213[4] = v220;
            *(void *)(v220 + 48) = v213;
          }
          uint64_t v221 = *(void *)(v133 + 40);
          if (v221)
          {
            v213[5] = v221;
            *(void *)(v221 + 48) = v213;
          }
          goto LABEL_257;
        }
        unint64_t v210 = *(void *)(v9 + 8) + v135;
        *(void *)(v9 + 8) = v210;
        unint64_t v211 = v292;
        *(void *)(v9 + 32) = v292;
        *(void *)(v211 + 8) = v210 | 1;
        *(void *)(v211 + v210) = v210;
      }
LABEL_268:
      unint64_t v85 = v291;
      goto LABEL_96;
    }
  }
LABEL_97:
  if ((*(unsigned char *)(v9 + 880) & 2) != 0) {
    atomic_store(0, (unsigned int *)(v9 + 884));
  }
  return result;
}

uint64_t sub_18DA41748(uint64_t result)
{
  uint64_t v2 = (unint64_t *)*(&off_1E559D8D0
                           + ((-105 * ((dword_1E91BCC08 + dword_1E91BCBB8) ^ 0x98)) ^ byte_18DDE9940[byte_18DDE8570[(-105 * ((dword_1E91BCC08 + dword_1E91BCBB8) ^ 0x98))] ^ 0x3B])
                           - 63);
  uint64_t v3 = (uint64_t)*(&off_1E559D8D0
                + (byte_18DDE8670[byte_18DDE7A30[(-105
                                                                                                * ((dword_1E91BCC08 + *v2) ^ 0x98))] ^ 0x11] ^ (-105 * ((dword_1E91BCC08 + *v2) ^ 0x98)))
                + 28);
  uint64_t v5 = *(void *)(v3 - 4);
  uint64_t v4 = (void *)(v3 - 4);
  unint64_t v6 = (v5 - *v2) ^ (unint64_t)&v121;
  *uint64_t v2 = (178978711 * v6) ^ 0x9A26997D949A7898;
  *uint64_t v4 = 178978711 * (v6 ^ 0x9A26997D949A7898);
  if (!result) {
    return result;
  }
  unint64_t v7 = (void *)result;
  uint64_t v8 = result - 16;
  uint64_t v118 = (void *)((char *)*(&off_1E559D8D0
                            + (byte_18DDE7830[byte_18DDE6DD0[(-105
                                                                                              * ((*(_DWORD *)v4
                                                                                                - *(_DWORD *)v2) ^ 0x98))] ^ 0xF5] ^ (-105 * ((*(_DWORD *)v4 - *(_DWORD *)v2) ^ 0x98)))
                            - 33)
                  - 12);
  uint64_t v9 = *v118 ^ *(void *)(result - 16 + (*(void *)(result - 8) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v120 = (char *)*(&off_1E559D8D0
                 + ((-105 * ((dword_1E91BCC08 - dword_1E91BCBB8) ^ 0x98)) ^ byte_18DDE7830[byte_18DDE6DD0[(-105 * ((dword_1E91BCC08 - dword_1E91BCBB8) ^ 0x98))] ^ 0xFD])
                 - 78)
       - 12;
  if ((*(unsigned char *)(v9 + 0x370) & 2) != 0)
  {
    unint64_t v1 = 1;
    if (atomic_exchange((atomic_uint *volatile)(v9 + 884), 1u))
    {
      char v10 = 1;
      while (*(_DWORD *)(v9 + 884) || atomic_exchange((atomic_uint *volatile)(v9 + 884), 1u))
      {
        if ((v10 & 0x3F) == 0) {
          uint64_t result = (*(uint64_t (**)(void))&v120[8
        }
                                             * ((-105 * ((*(_DWORD *)v4 - *(_DWORD *)v2) ^ 0x98)) ^ byte_18DDE7830[byte_18DDE6DD0[(-105 * ((*(_DWORD *)v4 - *(_DWORD *)v2) ^ 0x98))] ^ 0xF5])
                                             + 16832])();
        ++v10;
      }
    }
  }
  uint64_t v11 = *(v7 - 1);
  unint64_t v12 = v11 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = v8 + (v11 & 0xFFFFFFFFFFFFFFF8);
  if ((v11 & 1) == 0)
  {
    unint64_t v14 = *(void *)v8;
    if ((v11 & 3) == 0)
    {
      uint64_t v17 = v12 + v14 + 32;
      uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t))&v120[8
                                                                         * ((-105
                                                                                            * (*(_DWORD *)v2 ^ 0x98 ^ *(_DWORD *)v4)) ^ byte_18DDE8670[byte_18DDE7A30[(-105 * (*(_DWORD *)v2 ^ 0x98 ^ *(_DWORD *)v4))] ^ 0x6A])
                                                                         + 17704])(v8 - v14, v17);
      if (!result) {
        *(void *)(v9 + 856) -= v17;
      }
      goto LABEL_118;
    }
    v8 -= v14;
    v12 += v14;
    if (v8 != *(void *)(v9 + 32))
    {
      if (v14 <= 0xFF)
      {
        uint64_t v15 = *(void *)(v8 + 16);
        uint64_t v16 = *(void *)(v8 + 24);
        if (v16 == v15)
        {
          *(_DWORD *)v9 &= ~(1 << (v14 >> 3));
        }
        else
        {
          *(void *)(v15 + 24) = v16;
          *(void *)(v16 + 16) = v15;
        }
        goto LABEL_40;
      }
      uint64_t v18 = *(void *)(v8 + 48);
      unint64_t v19 = *(void **)(v8 + 24);
      if (v19 == (void *)v8)
      {
        uint64_t v21 = (void *)(v8 + 40);
        uint64_t v22 = *(void **)(v8 + 40);
        if (v22 || (uint64_t v21 = (void *)(v8 + 32), (v22 = *(void **)(v8 + 32)) != 0))
        {
          do
          {
            do
            {
              unsigned int v23 = v21;
              unint64_t v19 = v22;
              uint64_t v21 = v22 + 5;
              uint64_t v22 = (void *)v22[5];
            }
            while (v22);
            uint64_t v21 = v19 + 4;
            uint64_t v22 = (void *)v19[4];
          }
          while (v22);
          *unsigned int v23 = 0;
          if (!v18) {
            goto LABEL_40;
          }
        }
        else
        {
          unint64_t v19 = 0;
          if (!v18) {
            goto LABEL_40;
          }
        }
      }
      else
      {
        uint64_t v20 = *(void *)(v8 + 16);
        *(void *)(v20 + 24) = v19;
        v19[2] = v20;
        if (!v18) {
          goto LABEL_40;
        }
      }
      uint64_t v24 = v9 + 8 * *(unsigned int *)(v8 + 56);
      if (v8 == *(void *)(v24 + 600))
      {
        *(void *)(v24 + 600) = v19;
        if (!v19)
        {
          *(_DWORD *)(v9 + 4) &= ~(1 << *(_DWORD *)(v8 + 56));
          goto LABEL_40;
        }
      }
      else
      {
        uint64_t v25 = 40;
        if (*(void *)(v18 + 32) == v8) {
          uint64_t v25 = 32;
        }
        *(void *)(v18 + v25) = v19;
        if (!v19) {
          goto LABEL_40;
        }
      }
      v19[6] = v18;
      uint64_t v26 = *(void *)(v8 + 32);
      if (v26)
      {
        v19[4] = v26;
        *(void *)(v26 + 48) = v19;
      }
      uint64_t v27 = *(void *)(v8 + 40);
      if (v27)
      {
        v19[5] = v27;
        *(void *)(v27 + 48) = v19;
      }
      goto LABEL_40;
    }
    if ((~*(_DWORD *)(v13 + 8) & 3) == 0)
    {
      *(void *)(v9 + 8) = v12;
      *(void *)(v13 + 8) &= ~1uLL;
      *(void *)(v8 + 8) = v12 | 1;
      *(void *)unint64_t v13 = v12;
      goto LABEL_118;
    }
  }
LABEL_40:
  unint64_t v28 = *(void *)(v13 + 8);
  if ((v28 & 2) != 0)
  {
    *(void *)(v13 + 8) = v28 & 0xFFFFFFFFFFFFFFFELL;
    *(void *)(v8 + 8) = v12 | 1;
    *(void *)(v8 + v12) = v12;
    goto LABEL_47;
  }
  if (v13 == *(void *)(v9 + 40))
  {
    unint64_t v7 = (void *)(v9 + 16);
    unint64_t v36 = *(void *)(v9 + 16) + v12;
    *(void *)(v9 + 16) = v36;
    *(void *)(v9 + 40) = v8;
    *(void *)(v8 + 8) = v36 | 1;
    if (v8 == *(void *)(v9 + 32))
    {
      *(void *)(v9 + 32) = 0;
      *(void *)(v9 + 8) = 0;
    }
    if (v36 <= *(void *)(v9 + 48)) {
      goto LABEL_118;
    }
    unint64_t v37 = *(void *)(v9 + 40);
    if (!v37) {
      goto LABEL_118;
    }
    if (*v7 >= 0x51uLL)
    {
      unint64_t v1 = ((unint64_t)(*v7 + v118[2] - 81) / v118[2] - 1) * v118[2];
      unint64_t v38 = v9 + 888;
      unint64_t v39 = (unint64_t *)(v9 + 888);
      do
      {
        if (*v39 <= v37 && *v39 + v39[1] > v37) {
          break;
        }
        unint64_t v39 = (unint64_t *)v39[2];
      }
      while (v39);
      if ((v39[3] & 9) == 1)
      {
        unint64_t v40 = v39[1];
        uint64_t v41 = v40 - v1;
        if (v40 >= v1)
        {
          unint64_t v42 = *v39;
          unint64_t v43 = *v39 + v40;
          while (v38 < v42 || v38 >= v43)
          {
            unint64_t v38 = *(void *)(v38 + 16);
            if (!v38)
            {
              uint64_t result = (*(uint64_t (**)(unint64_t, unint64_t))&v120[8
                                                                                          * ((-105 * ((*(_DWORD *)v4 - *(_DWORD *)v2) ^ 0x98)) ^ byte_18DDE8670[byte_18DDE7A30[(-105 * ((*(_DWORD *)v4 - *(_DWORD *)v2) ^ 0x98))] ^ 0x11])
                                                                                          + 17408])(v42 + v41, ((unint64_t)(*v7 + v118[2] - 81) / v118[2] - 1) * v118[2]);
              char v53 = 1;
              if (v1)
              {
                if (result)
                {
                  unint64_t v1 = 0;
                }
                else
                {
                  v39[1] -= v1;
                  *(void *)(v9 + 856) -= v1;
                  uint64_t v64 = *(void *)(v9 + 40);
                  unint64_t v65 = *(void *)(v9 + 16) - v1;
                  if (((v64 + 16) & 0xF) != 0) {
                    uint64_t v66 = -(v64 + 16) & 0xFLL;
                  }
                  else {
                    uint64_t v66 = 0;
                  }
                  uint64_t v67 = v64 + v66;
                  unint64_t v68 = v65 - v66;
                  *(void *)(v9 + 40) = v67;
                  *(void *)(v9 + 16) = v68;
                  *(void *)(v67 + 8) = v68 | 1;
                  *(void *)(v64 + v65 + 8) = 80;
                  *(void *)(v9 + 48) = v118[4];
                }
              }
              goto LABEL_146;
            }
          }
        }
      }
    }
    unint64_t v1 = 0;
    char v53 = 1;
LABEL_146:
    uint64_t v79 = *(void *)(v9 + 904);
    if (!v79 || (*(_DWORD *)(v79 + 24) & 9) != 1)
    {
      uint64_t v80 = 0;
      goto LABEL_161;
    }
    uint64_t v80 = 0;
    uint64_t result = *(void *)v79;
    uint64_t v81 = *(void *)(v79 + 8);
    uint64_t v82 = *(void *)v79 + 16;
    if ((v82 & 0xF) != 0) {
      uint64_t v83 = -(int)v82 & 0xFLL;
    }
    else {
      uint64_t v83 = 0;
    }
    uint64_t v84 = result + v83;
    unint64_t v85 = *(void *)(result + v83 + 8);
    unint64_t v86 = v85 & 0xFFFFFFFFFFFFFFF8;
    if ((v85 & 3) != 1 || result + v83 + (v85 & 0xFFFFFFFFFFFFFFF8) < result + v81 - 80)
    {
LABEL_161:
      *(void *)(v9 + 56) = 4095;
      if (v1 + v80) {
        char v91 = 0;
      }
      else {
        char v91 = v53;
      }
      if ((v91 & 1) != 0 && *v7 > *(void *)(v9 + 48)) {
        *(void *)(v9 + 48) = -1;
      }
      goto LABEL_118;
    }
    uint64_t v119 = *(void *)(v79 + 16);
    if (v84 == *(void *)(v9 + 32))
    {
      *(void *)(v9 + 32) = 0;
      *(void *)(v9 + 8) = 0;
      goto LABEL_184;
    }
    uint64_t v88 = *(void *)(v84 + 48);
    unint64_t v89 = *(void **)(v84 + 24);
    if (v89 == (void *)v84)
    {
      uint64_t v92 = (void *)(v84 + 40);
      unint64_t v93 = *(void **)(v84 + 40);
      if (v93 || (uint64_t v92 = (void *)(v84 + 32), (v93 = *(void **)(v84 + 32)) != 0))
      {
        do
        {
          do
          {
            unint64_t v94 = v92;
            unint64_t v89 = v93;
            uint64_t v92 = v93 + 5;
            unint64_t v93 = (void *)v93[5];
          }
          while (v93);
          uint64_t v92 = v89 + 4;
          unint64_t v93 = (void *)v89[4];
        }
        while (v93);
        *unint64_t v94 = 0;
        if (!v88) {
          goto LABEL_184;
        }
      }
      else
      {
        unint64_t v89 = 0;
        if (!v88) {
          goto LABEL_184;
        }
      }
    }
    else
    {
      uint64_t v90 = *(void *)(v84 + 16);
      *(void *)(v90 + 24) = v89;
      v89[2] = v90;
      if (!v88) {
        goto LABEL_184;
      }
    }
    uint64_t v95 = v9 + 8 * *(unsigned int *)(v84 + 56);
    if (v84 == *(void *)(v95 + 600))
    {
      *(void *)(v95 + 600) = v89;
      if (!v89)
      {
        *(_DWORD *)(v9 + 4) &= ~(1 << *(_DWORD *)(v84 + 56));
        goto LABEL_184;
      }
    }
    else
    {
      uint64_t v96 = 40;
      if (*(void *)(v88 + 32) == v84) {
        uint64_t v96 = 32;
      }
      *(void *)(v88 + v96) = v89;
      if (!v89)
      {
LABEL_184:
        uint64_t result = (*(uint64_t (**)(void))&v120[8
                                           * (byte_18DDE994C[(byte_18DDE8570[(-105 * ((*(_DWORD *)v4 + *(_DWORD *)v2) ^ 0x98))] ^ 0x3B)
                                                                            - 12] ^ (-105
                                                                                   * ((*(_DWORD *)v4 + *(_DWORD *)v2) ^ 0x98)))
                                           + 16800])();
        if (result)
        {
          if (v85 >= 0x100)
          {
            if (v85 >> 24)
            {
              unsigned int v99 = 31;
            }
            else
            {
              unsigned int v100 = (((v85 >> 8) + 1048320) >> 16) & 8;
              unsigned int v101 = (v85 >> 8) << v100;
              unsigned int v102 = (v101 << (((v101 + 520192) >> 16) & 4) << ((((v101 << (((v101 + 520192) >> 16) & 4)) + 245760) >> 16) & 2) >> 15)
                   - (((v101 + 520192) >> 16) & 4 | v100 | (((v101 << (((v101 + 520192) >> 16) & 4)) + 245760) >> 16) & 2);
              unsigned int v99 = ((v86 >> (v102 + 21)) & 1 | (2 * v102)) + 28;
            }
          }
          else
          {
            unsigned int v99 = 0;
          }
          *(_DWORD *)(v84 + 56) = v99;
          unint64_t v103 = (unsigned char *)(v84 + 32);
          unsigned int v104 = -(v84 + 32) & 7;
          switch(v104)
          {
            case 1u:
              goto LABEL_198;
            case 2u:
              goto LABEL_197;
            case 3u:
              goto LABEL_196;
            case 4u:
              goto LABEL_195;
            case 5u:
              goto LABEL_194;
            case 6u:
              goto LABEL_193;
            case 7u:
              *unint64_t v103 = 0;
              unint64_t v103 = (unsigned char *)(v84 + 33);
LABEL_193:
              *v103++ = 0;
LABEL_194:
              *v103++ = 0;
LABEL_195:
              *v103++ = 0;
LABEL_196:
              *v103++ = 0;
LABEL_197:
              *v103++ = 0;
LABEL_198:
              *v103++ = 0;
              break;
            default:
              break;
          }
          uint64_t v105 = (uint64_t *)(v9 + 8 * v99 + 600);
          unint64_t v106 = 16 - v104;
          if (v106 >= 8)
          {
            unint64_t v107 = ((v106 >> 3) + 7) >> 3;
            switch(v106 >> 3)
            {
              case 1uLL:
                goto LABEL_204;
              case 2uLL:
                goto LABEL_203;
              case 3uLL:
                goto LABEL_202;
              default:
                do
                {
                  *(_OWORD *)unint64_t v103 = 0u;
                  *((_OWORD *)v103 + 1) = 0u;
                  *((void *)v103 + 4) = 0;
                  v103 += 40;
LABEL_202:
                  *(void *)unint64_t v103 = 0;
                  v103 += 8;
LABEL_203:
                  *(void *)unint64_t v103 = 0;
                  v103 += 8;
LABEL_204:
                  *(void *)unint64_t v103 = 0;
                  v103 += 8;
                  --v107;
                }
                while (v107);
                break;
            }
          }
          switch(v106 & 7)
          {
            case 1uLL:
              goto LABEL_212;
            case 2uLL:
              goto LABEL_211;
            case 3uLL:
              goto LABEL_210;
            case 4uLL:
              goto LABEL_209;
            case 5uLL:
              goto LABEL_208;
            case 6uLL:
              goto LABEL_207;
            case 7uLL:
              *v103++ = 0;
LABEL_207:
              *v103++ = 0;
LABEL_208:
              *v103++ = 0;
LABEL_209:
              *v103++ = 0;
LABEL_210:
              *v103++ = 0;
LABEL_211:
              *v103++ = 0;
LABEL_212:
              *unint64_t v103 = 0;
              break;
            default:
              break;
          }
          int v108 = *(_DWORD *)(v9 + 4);
          int v109 = 1 << v99;
          if ((v108 & (1 << v99)) != 0)
          {
            uint64_t v110 = *v105;
            if (v99 == 31) {
              LOBYTE(v111) = 0;
            }
            else {
              int v111 = 57 - (v99 >> 1);
            }
            unint64_t v112 = v86 << v111;
            while (1)
            {
              uint64_t v113 = v110;
              if ((*(void *)(v110 + 8) & 0xFFFFFFFFFFFFFFF8) == v86) {
                break;
              }
              unint64_t v114 = v110 + 8 * (v112 >> 63);
              uint64_t v116 = *(void *)(v114 + 32);
              unint64_t v115 = (uint64_t *)(v114 + 32);
              uint64_t v110 = v116;
              v112 *= 2;
              if (!v116)
              {
                uint64_t v80 = 0;
                *unint64_t v115 = v84;
                *(void *)(v84 + 48) = v113;
                goto LABEL_222;
              }
            }
            uint64_t v80 = 0;
            uint64_t v117 = *(void *)(v110 + 16);
            *(void *)(v117 + 24) = v84;
            *(void *)(v113 + 16) = v84;
            *(void *)(v84 + 16) = v117;
            *(void *)(v84 + 24) = v113;
            *(void *)(v84 + 48) = 0;
          }
          else
          {
            uint64_t v80 = 0;
            *(_DWORD *)(v9 + 4) = v108 | v109;
            *uint64_t v105 = v84;
            *(void *)(v84 + 48) = v105;
LABEL_222:
            *(void *)(v84 + 16) = v84;
            *(void *)(v84 + 24) = v84;
          }
        }
        else
        {
          *(void *)(v9 + 856) -= v81;
          *(void *)(v9 + 904) = v119;
          uint64_t v80 = v81;
        }
        goto LABEL_161;
      }
    }
    v89[6] = v88;
    uint64_t v97 = *(void *)(v84 + 32);
    if (v97)
    {
      v89[4] = v97;
      *(void *)(v97 + 48) = v89;
    }
    uint64_t v98 = *(void *)(v84 + 40);
    if (v98)
    {
      v89[5] = v98;
      *(void *)(v98 + 48) = v89;
    }
    goto LABEL_184;
  }
  if (v13 == *(void *)(v9 + 32))
  {
    unint64_t v52 = *(void *)(v9 + 8) + v12;
    *(void *)(v9 + 8) = v52;
    *(void *)(v9 + 32) = v8;
    *(void *)(v8 + 8) = v52 | 1;
    *(void *)(v8 + v52) = v52;
    goto LABEL_118;
  }
  v12 += v28 & 0xFFFFFFFFFFFFFFF8;
  if (v28 <= 0xFF)
  {
    uint64_t v30 = *(void *)(v13 + 16);
    uint64_t v29 = *(void *)(v13 + 24);
    if (v29 == v30)
    {
      *(_DWORD *)v9 &= ~(1 << (v28 >> 3));
    }
    else
    {
      *(void *)(v30 + 24) = v29;
      *(void *)(v29 + 16) = v30;
    }
    goto LABEL_102;
  }
  uint64_t v54 = *(void *)(v13 + 48);
  unsigned int v55 = *(void **)(v13 + 24);
  if (v55 == (void *)v13)
  {
    unsigned int v57 = (void *)(v13 + 40);
    uint64_t v58 = *(void **)(v13 + 40);
    if (v58 || (unsigned int v57 = (void *)(v13 + 32), (v58 = *(void **)(v13 + 32)) != 0))
    {
      do
      {
        do
        {
          uint64_t v59 = v57;
          unsigned int v55 = v58;
          unsigned int v57 = v58 + 5;
          uint64_t v58 = (void *)v58[5];
        }
        while (v58);
        unsigned int v57 = v55 + 4;
        uint64_t v58 = (void *)v55[4];
      }
      while (v58);
      *uint64_t v59 = 0;
      if (!v54) {
        goto LABEL_102;
      }
    }
    else
    {
      unsigned int v55 = 0;
      if (!v54) {
        goto LABEL_102;
      }
    }
  }
  else
  {
    uint64_t v56 = *(void *)(v13 + 16);
    *(void *)(v56 + 24) = v55;
    v55[2] = v56;
    if (!v54) {
      goto LABEL_102;
    }
  }
  uint64_t v60 = v9 + 8 * *(unsigned int *)(v13 + 56);
  if (v13 == *(void *)(v60 + 600))
  {
    *(void *)(v60 + 600) = v55;
    if (!v55)
    {
      *(_DWORD *)(v9 + 4) &= ~(1 << *(_DWORD *)(v13 + 56));
      goto LABEL_102;
    }
    goto LABEL_97;
  }
  uint64_t v61 = 40;
  if (*(void *)(v54 + 32) == v13) {
    uint64_t v61 = 32;
  }
  *(void *)(v54 + v61) = v55;
  if (v55)
  {
LABEL_97:
    v55[6] = v54;
    uint64_t v62 = *(void *)(v13 + 32);
    if (v62)
    {
      v55[4] = v62;
      *(void *)(v62 + 48) = v55;
    }
    uint64_t v63 = *(void *)(v13 + 40);
    if (v63)
    {
      v55[5] = v63;
      *(void *)(v63 + 48) = v55;
    }
  }
LABEL_102:
  *(void *)(v8 + 8) = v12 | 1;
  *(void *)(v8 + v12) = v12;
  if (v8 == *(void *)(v9 + 32))
  {
    *(void *)(v9 + 8) = v12;
    goto LABEL_118;
  }
LABEL_47:
  if (v12 > 0xFF)
  {
    if (v12 >> 24)
    {
      unsigned int v35 = 31;
    }
    else
    {
      unsigned int v44 = (((v12 >> 8) + 1048320) >> 16) & 8;
      unsigned int v45 = (v12 >> 8) << v44;
      unsigned int v46 = (v45 << (((v45 + 520192) >> 16) & 4) << ((((v45 << (((v45 + 520192) >> 16) & 4)) + 245760) >> 16) & 2) >> 15)
          - (((v45 + 520192) >> 16) & 4 | v44 | (((v45 << (((v45 + 520192) >> 16) & 4)) + 245760) >> 16) & 2);
      unsigned int v35 = ((v12 >> (v46 + 21)) & 1 | (2 * v46)) + 28;
    }
    *(_DWORD *)(v8 + 56) = v35;
    uint64_t v47 = (unsigned char *)(v8 + 32);
    unsigned int v48 = -(v8 + 32) & 7;
    switch(v48)
    {
      case 1u:
        goto LABEL_72;
      case 2u:
        goto LABEL_71;
      case 3u:
        goto LABEL_70;
      case 4u:
        goto LABEL_69;
      case 5u:
        goto LABEL_68;
      case 6u:
        goto LABEL_67;
      case 7u:
        *uint64_t v47 = 0;
        uint64_t v47 = (unsigned char *)(v8 + 33);
LABEL_67:
        *v47++ = 0;
LABEL_68:
        *v47++ = 0;
LABEL_69:
        *v47++ = 0;
LABEL_70:
        *v47++ = 0;
LABEL_71:
        *v47++ = 0;
LABEL_72:
        *v47++ = 0;
        break;
      default:
        break;
    }
    unint64_t v49 = (uint64_t *)(v9 + 8 * v35 + 600);
    unint64_t v50 = 16 - v48;
    if (v50 >= 8)
    {
      unint64_t v51 = ((v50 >> 3) + 7) >> 3;
      switch(v50 >> 3)
      {
        case 1uLL:
          goto LABEL_124;
        case 2uLL:
          goto LABEL_123;
        case 3uLL:
          goto LABEL_122;
        default:
          do
          {
            *(_OWORD *)uint64_t v47 = 0u;
            *((_OWORD *)v47 + 1) = 0u;
            *((void *)v47 + 4) = 0;
            v47 += 40;
LABEL_122:
            *(void *)uint64_t v47 = 0;
            v47 += 8;
LABEL_123:
            *(void *)uint64_t v47 = 0;
            v47 += 8;
LABEL_124:
            *(void *)uint64_t v47 = 0;
            v47 += 8;
            --v51;
          }
          while (v51);
          break;
      }
    }
    switch(v50 & 7)
    {
      case 1uLL:
        goto LABEL_132;
      case 2uLL:
        goto LABEL_131;
      case 3uLL:
        goto LABEL_130;
      case 4uLL:
        goto LABEL_129;
      case 5uLL:
        goto LABEL_128;
      case 6uLL:
        goto LABEL_127;
      case 7uLL:
        *v47++ = 0;
LABEL_127:
        *v47++ = 0;
LABEL_128:
        *v47++ = 0;
LABEL_129:
        *v47++ = 0;
LABEL_130:
        *v47++ = 0;
LABEL_131:
        *v47++ = 0;
LABEL_132:
        *uint64_t v47 = 0;
        break;
      default:
        break;
    }
    int v69 = *(_DWORD *)(v9 + 4);
    if ((v69 & (1 << v35)) != 0)
    {
      uint64_t v70 = *v49;
      if (v35 == 31) {
        LOBYTE(v71) = 0;
      }
      else {
        int v71 = 57 - (v35 >> 1);
      }
      unint64_t v72 = v12 << v71;
      while (1)
      {
        uint64_t v73 = v70;
        if ((*(void *)(v70 + 8) & 0xFFFFFFFFFFFFFFF8) == v12) {
          break;
        }
        unint64_t v74 = v70 + 8 * (v72 >> 63);
        uint64_t v76 = *(void *)(v74 + 32);
        uint64_t v75 = (uint64_t *)(v74 + 32);
        uint64_t v70 = v76;
        v72 *= 2;
        if (!v76)
        {
          *uint64_t v75 = v8;
          *(void *)(v8 + 48) = v73;
          goto LABEL_142;
        }
      }
      uint64_t v77 = *(void *)(v70 + 16);
      *(void *)(v77 + 24) = v8;
      *(void *)(v70 + 16) = v8;
      *(void *)(v8 + 16) = v77;
      *(void *)(v8 + 24) = v70;
      *(void *)(v8 + 48) = 0;
    }
    else
    {
      *(_DWORD *)(v9 + 4) = v69 | (1 << v35);
      *unint64_t v49 = v8;
      *(void *)(v8 + 48) = v49;
LABEL_142:
      *(void *)(v8 + 16) = v8;
      *(void *)(v8 + 24) = v8;
    }
    uint64_t v78 = *(void *)(v9 + 56) - 1;
    *(void *)(v9 + 56) = v78;
    if (v78) {
      goto LABEL_118;
    }
    char v53 = 0;
    goto LABEL_146;
  }
  unint64_t v31 = v12 >> 3;
  uint64_t v32 = v9 + ((2 * v12) & 0x7FFFFFFF0) + 72;
  int v33 = 1 << v31;
  if ((*(_DWORD *)v9 & v33) != 0)
  {
    uint64_t v34 = *(void *)(v32 + 16);
  }
  else
  {
    *(_DWORD *)v9 |= v33;
    uint64_t v34 = v32;
  }
  *(void *)(v32 + 16) = v8;
  *(void *)(v34 + 24) = v8;
  *(void *)(v8 + 16) = v34;
  *(void *)(v8 + 24) = v32;
LABEL_118:
  if ((*(unsigned char *)(v9 + 880) & 2) != 0) {
    atomic_store(0, (unsigned int *)(v9 + 884));
  }
  return result;
}

void *sub_18DA42684(void *result)
{
  uint64_t v1 = (uint64_t)*(&off_1E559D8D0
                + ((-105 * ((dword_1E91BCC08 + dword_1E91BCB50) ^ 0x98)) ^ byte_18DDE9940[byte_18DDE8570[(-105 * ((dword_1E91BCC08 + dword_1E91BCB50) ^ 0x98))] ^ 0xF5])
                - 146);
  uint64_t v4 = *(void *)(v1 - 4);
  uint64_t v3 = (void *)(v1 - 4);
  uint64_t v2 = v4;
  uint64_t v5 = (uint64_t)*(&off_1E559D8D0
                + (byte_18DDE8670[byte_18DDE7A30[(-105
                                                                                                * ((dword_1E91BCC08 - v4) ^ 0x98))] ^ 0x6A] ^ (-105 * ((dword_1E91BCC08 - v4) ^ 0x98)))
                + 65);
  uint64_t v7 = *(void *)(v5 - 4);
  unint64_t v6 = (void *)(v5 - 4);
  uint64_t v8 = v2 - (void)&v13 + v7;
  *uint64_t v3 = 178978711 * (v8 + 0x65D966826B658768);
  *unint64_t v6 = 178978711 * (v8 ^ 0x9A26997D949A7898);
  if (result)
  {
    uint64_t v9 = result;
    char v10 = (char *)*(&off_1E559D8D0
                  + ((-105 * ((dword_1E91BCC08 + dword_1E91BCB50) ^ 0x98)) ^ byte_18DDE8670[byte_18DDE7A30[(-105 * ((dword_1E91BCC08 + dword_1E91BCB50) ^ 0x98))] ^ 0x6A])
                  - 18)
        - 12;
    (*(void (**)(void))&v10[8
                                       * (byte_18DDE7930[byte_18DDE6ED0[(-105 * (*(_DWORD *)v3 ^ 0x98 ^ *(_DWORD *)v6))] ^ 0x7F] ^ (-105 * (*(_DWORD *)v3 ^ 0x98 ^ *(_DWORD *)v6)))
                                       + 16936])(*result);
    (*(void (**)(void))&v10[8
                                       * ((-105 * (*(_DWORD *)v3 ^ 0x98 ^ *(_DWORD *)v6)) ^ byte_18DDE7930[byte_18DDE6ED0[(-105 * (*(_DWORD *)v3 ^ 0x98 ^ *(_DWORD *)v6))] ^ 0x85])
                                       + 15976])(v9[2]);
    (*(void (**)(void))&v10[8
                                       * (byte_18DDE7830[byte_18DDE6DD0[(-105 * (*(_DWORD *)v3 ^ 0x98 ^ *(_DWORD *)v6))] ^ 0xFD] ^ (-105 * (*(_DWORD *)v3 ^ 0x98 ^ *(_DWORD *)v6)))
                                       + 17120])(v9[4]);
    (*(void (**)(void))&v10[8
                                       * ((-105 * (*(_DWORD *)v3 ^ 0x98 ^ *(_DWORD *)v6)) ^ byte_18DDE8670[byte_18DDE7A30[(-105 * (*(_DWORD *)v3 ^ 0x98 ^ *(_DWORD *)v6))] ^ 0x6A])
                                       + 17600])(v9[6]);
    (*(void (**)(void))&v10[8
                                       * ((-105 * ((*(_DWORD *)v6 + *(_DWORD *)v3) ^ 0x98)) ^ byte_18DDE7830[byte_18DDE6DD0[(-105 * ((*(_DWORD *)v6 + *(_DWORD *)v3) ^ 0x98))] ^ 0xF5])
                                       + 16880])(v9[8]);
    (*(void (**)(void))&v10[8
                                       * (byte_18DDE9940[byte_18DDE8570[(-105 * ((*(_DWORD *)v6 - *(_DWORD *)v3) ^ 0x98))] ^ 0x3B] ^ (-105 * ((*(_DWORD *)v6 - *(_DWORD *)v3) ^ 0x98)))
                                       + 16696])(v9[10]);
    (*(void (**)(void))&v10[8
                                       * ((-105 * ((*(_DWORD *)v6 + *(_DWORD *)v3) ^ 0x98)) ^ byte_18DDE7930[byte_18DDE6ED0[(-105 * ((*(_DWORD *)v6 + *(_DWORD *)v3) ^ 0x98))] ^ 0x7F])
                                       + 16936])(v9[12]);
    (*(void (**)(void))&v10[8
                                       * ((-105 * ((*(_DWORD *)v6 - *(_DWORD *)v3) ^ 0x98)) ^ byte_18DDE7930[byte_18DDE6ED0[(-105 * ((*(_DWORD *)v6 - *(_DWORD *)v3) ^ 0x98))] ^ 0x85])
                                       + 15976])(v9[14]);
    (*(void (**)(void))&v10[8
                                       * ((-105 * ((*(_DWORD *)v6 - *(_DWORD *)v3) ^ 0x98)) ^ byte_18DDE7830[byte_18DDE6DD0[(-105 * ((*(_DWORD *)v6 - *(_DWORD *)v3) ^ 0x98))] ^ 0xAB])
                                       + 16032])(v9[16]);
    (*(void (**)(void))&v10[8
                                       * ((-105 * ((*(_DWORD *)v6 - *(_DWORD *)v3) ^ 0x98)) ^ byte_18DDE7830[byte_18DDE6DD0[(-105 * ((*(_DWORD *)v6 - *(_DWORD *)v3) ^ 0x98))] ^ 0x5A])
                                       + 17360])(v9[18]);
    (*(void (**)(void))&v10[8
                                       * ((-105 * (*(_DWORD *)v3 ^ 0x98 ^ *(_DWORD *)v6)) ^ byte_18DDE7930[byte_18DDE6ED0[(-105 * (*(_DWORD *)v3 ^ 0x98 ^ *(_DWORD *)v6))] ^ 0x85])
                                       + 15976])(v9[20]);
    (*(void (**)(void))&v10[8
                                       * ((-105 * ((*(_DWORD *)v6 - *(_DWORD *)v3) ^ 0x98)) ^ byte_18DDE7930[byte_18DDE6ED0[(-105 * ((*(_DWORD *)v6 - *(_DWORD *)v3) ^ 0x98))] ^ 0xF8])
                                       + 16400])(v9[22]);
    unsigned __int8 v11 = -105 * ((*(_DWORD *)v6 - *(_DWORD *)v3) ^ 0x98);
    (*(void (**)(void))&v10[8
                                       * (byte_18DDE7B34[(byte_18DDE6FD4[v11 - 4] ^ 0x31) - 4] ^ v11)
                                       + 16216])(v9[24]);
    (*(void (**)(void))&v10[8
                                       * ((-105 * (*(_DWORD *)v3 ^ 0x98 ^ *(_DWORD *)v6)) ^ byte_18DDE7830[byte_18DDE6DD0[(-105 * (*(_DWORD *)v3 ^ 0x98 ^ *(_DWORD *)v6))] ^ 0xAB])
                                       + 16032])(v9[26]);
    (*(void (**)(void))&v10[8
                                       * (byte_18DDE9840[byte_18DDE8470[(-105 * ((*(_DWORD *)v6 + *(_DWORD *)v3) ^ 0x98))] ^ 0x80] ^ (-105 * ((*(_DWORD *)v6 + *(_DWORD *)v3) ^ 0x98)))
                                       + 16640])(v9[28]);
    (*(void (**)(void))&v10[8
                                       * ((-105 * ((*(_DWORD *)v6 + *(_DWORD *)v3) ^ 0x98)) ^ byte_18DDE9940[byte_18DDE8570[(-105 * ((*(_DWORD *)v6 + *(_DWORD *)v3) ^ 0x98))] ^ 0x82])
                                       + 17544])(v9[30]);
    unint64_t v12 = *(uint64_t (**)(void *))&v10[8
                                                 * ((-105 * ((*(_DWORD *)v6 + *(_DWORD *)v3) ^ 0x98)) ^ byte_18DDE9840[byte_18DDE8470[(-105 * ((*(_DWORD *)v6 + *(_DWORD *)v3) ^ 0x98))] ^ 0x80])
                                                 + 16640];
    return (void *)v12(v9);
  }
  return result;
}

uint64_t sub_18DA42D10(uint64_t result, unsigned __int8 *a2, int a3, char a4)
{
  uint64_t v4 = *(&off_1E559D8D0
       + ((-105 * (dword_1E91BCC48 ^ 0x98 ^ dword_1E91BCC08)) ^ byte_18DDE7930[byte_18DDE6ED0[(-105 * (dword_1E91BCC48 ^ 0x98 ^ dword_1E91BCC08))] ^ 0xE4])
       + 7);
  unsigned __int8 v5 = -105 * (*v4 ^ dword_1E91BCC08 ^ 0x98);
  uint64_t v6 = (uint64_t)*(&off_1E559D8D0 + (byte_18DDE7938[(byte_18DDE6EDC[v5 - 12] ^ 0x85) - 8] ^ v5) - 138);
  uint64_t v8 = *(void *)(v6 - 4);
  uint64_t v7 = (void *)(v6 - 4);
  uint64_t v9 = *v4 - (void)&v16 + v8;
  *uint64_t v4 = 178978711 * (v9 + 0x65D966826B658768);
  *uint64_t v7 = 178978711 * (v9 ^ 0x9A26997D949A7898);
  if (a3)
  {
    int v11 = a3;
    char v13 = (void *)result;
    do
    {
      unsigned int v14 = *a2++;
      uint64_t v15 = *v13 + 16 * (a4 & 0xF);
      uint64_t result = (*(uint64_t (**)(void, void, void, void))((char *)*(&off_1E559D8D0
                                                                                   + ((-105 * ((dword_1E91BCC08 - dword_1E91BCC48) ^ 0x98)) ^ byte_18DDE8670[byte_18DDE7A30[(-105 * ((dword_1E91BCC08 - dword_1E91BCC48) ^ 0x98))] ^ 0x6A])
                                                                                   - 18)
                                                                         + 8
                                                                         * (byte_18DDE994C[(byte_18DDE8570[(-105 * ((*(_DWORD *)v7 - *(_DWORD *)v4) ^ 0x98))] ^ 0x3B) - 12] ^ (-105 * ((*(_DWORD *)v7 - *(_DWORD *)v4) ^ 0x98)))
                                                                         + 16708))(*(void *)v15, 0, *(unsigned __int8 *)(v15 + 8), v14);
      ++a4;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_18DA42F28(uint64_t result, unsigned int a2, int a3, char a4)
{
  uint64_t v4 = result;
  unsigned __int8 v5 = *(&off_1E559D8D0
       + ((-105 * ((dword_1E91BCC08 + dword_1E91BCC18) ^ 0x98)) ^ byte_18DDE9940[byte_18DDE8570[(-105 * ((dword_1E91BCC08 + dword_1E91BCC18) ^ 0x98))] ^ 0x82])
       + 35);
  uint64_t v6 = (uint64_t)*(&off_1E559D8D0
                + ((-105 * (*v5 ^ dword_1E91BCC08 ^ 0x98)) ^ byte_18DDE7830[byte_18DDE6DD0[(-105 * (*v5 ^ dword_1E91BCC08 ^ 0x98))] ^ 0xF5])
                - 25);
  uint64_t v8 = *(void *)(v6 - 4);
  uint64_t v7 = (void *)(v6 - 4);
  unint64_t v9 = (v8 + *v5) ^ (unint64_t)&v20;
  *unsigned __int8 v5 = 178978711 * v9 - 0x65D966826B658768;
  *uint64_t v7 = 178978711 * (v9 ^ 0x9A26997D949A7898);
  if (a3)
  {
    char v10 = &v19 ^ a2;
    unsigned __int8 v11 = v10 ^ a4;
    unsigned __int8 v12 = v10 + a4;
    if (a4) {
      unsigned __int8 v13 = v11;
    }
    else {
      unsigned __int8 v13 = v12;
    }
    if (*(unsigned char *)(result + a2) == 1)
    {
      unsigned __int8 v14 = a4 - v13;
    }
    else if (*(unsigned char *)(result + a2))
    {
      unsigned __int8 v14 = 0;
      unsigned __int8 v13 = 0;
    }
    else
    {
      unsigned __int8 v14 = v13 ^ a4;
    }
    int v15 = 2 * a2;
    uint64_t v16 = (a3 - 1);
    unsigned __int8 v17 = -105 * (*(_DWORD *)v5 ^ 0x98 ^ *(_DWORD *)v7);
    uint64_t v18 = (char *)*(&off_1E559D8D0
                  + ((-105 * ((dword_1E91BCC08 - dword_1E91BCC18) ^ 0x98)) ^ byte_18DDE9840[byte_18DDE8470[(-105 * ((dword_1E91BCC08 - dword_1E91BCC18) ^ 0x98))] ^ 0x80])
                  - 138)
        - 12;
    (*(void (**)(uint64_t, void, uint64_t, void))&v18[8
                                                                 * (byte_18DDE7834[(byte_18DDE6DD4[v17 - 4] ^ 0xFD) - 4] ^ v17)
                                                                 + 17144])(result, (2 * a2) | 1, v16, v14);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, void))&v18[8
                                                                           * (byte_18DDE8670[byte_18DDE7A30[(-105 * (*(_DWORD *)v5 ^ 0x98 ^ *(_DWORD *)v7))] ^ 0x11] ^ (-105 * (*(_DWORD *)v5 ^ 0x98 ^ *(_DWORD *)v7)))
                                                                           + 17328])(v4, (v15 + 2), v16, v13);
  }
  else
  {
    *(unsigned char *)(result + a2) = a4;
  }
  return result;
}

uint64_t sub_18DA431A0(uint64_t result, unsigned char *a2, int a3, char a4)
{
  uint64_t v4 = *(&off_1E559D8D0
       + ((-105 * ((dword_1E91BCC08 + dword_1E91BCC88) ^ 0x98)) ^ byte_18DDE7930[byte_18DDE6ED0[(-105 * ((dword_1E91BCC08 + dword_1E91BCC88) ^ 0x98))] ^ 0x85])
       - 197);
  unsigned __int8 v5 = -105 * ((dword_1E91BCC08 + *v4) ^ 0x98);
  uint64_t v6 = (uint64_t)*(&off_1E559D8D0 + (byte_18DDE9844[(byte_18DDE847C[v5 - 12] ^ 0x3F) - 4] ^ v5) - 161);
  uint64_t v8 = *(void *)(v6 - 4);
  uint64_t v7 = (void *)(v6 - 4);
  uint64_t v9 = *v4 - (void)&v17 + v8;
  *uint64_t v4 = 178978711 * v9 + 0x65D966826B658768;
  *uint64_t v7 = 178978711 * (v9 ^ 0x9A26997D949A7898);
  if (a3)
  {
    int v11 = a3;
    uint64_t v13 = result;
    do
    {
      uint64_t v14 = v13 + 16 * (a4 & 0xF);
      uint64_t v15 = *(void *)v14;
      uint64_t v16 = *(unsigned __int8 *)(v14 + 8);
      LOBYTE(v14) = -105 * ((*(_DWORD *)v7 + *(_DWORD *)v4) ^ 0x98);
      uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))((char *)*(&off_1E559D8D0
                                                                             + ((-105
                                                                                                * ((dword_1E91BCC08
                                                                                                  + dword_1E91BCC88) ^ 0x98)) ^ byte_18DDE9840[byte_18DDE8470[(-105 * ((dword_1E91BCC08 + dword_1E91BCC88) ^ 0x98))] ^ 0x80])
                                                                             - 138)
                                                                   + 8
                                                                   * (byte_18DDE7834[(byte_18DDE6DD4[v14 - 4] ^ 0xAB) - 4] ^ v14)
                                                                   + 16204))(v15, 0, v16);
      *a2++ = result;
      ++a4;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_18DA433AC(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v5 = (uint64_t)*(&off_1E559D8D0
                + ((-105 * (dword_1E91BCC58 ^ 0x98 ^ dword_1E91BCC08)) ^ byte_18DDE7B30[byte_18DDE6FD0[(-105 * (dword_1E91BCC58 ^ 0x98 ^ dword_1E91BCC08))] ^ 0x31])
                - 148);
  uint64_t v8 = *(void *)(v5 - 4);
  uint64_t v7 = (unint64_t *)(v5 - 4);
  uint64_t v6 = v8;
  uint64_t v9 = (uint64_t)*(&off_1E559D8D0
                + (byte_18DDE994C[(byte_18DDE8570[(-105
                                                                                   * ((dword_1E91BCC08 - v8) ^ 0x98))] ^ 0x3B)
                                                 - 12] ^ (-105 * ((dword_1E91BCC08 - v8) ^ 0x98)))
                - 48);
  uint64_t v11 = *(void *)(v9 - 4);
  char v10 = (unint64_t *)(v9 - 4);
  unint64_t v12 = 178978711 * (((v11 ^ v6) - (void)&v22) ^ 0x9A26997D949A7898);
  *uint64_t v7 = v12;
  *char v10 = v12;
  if (a3)
  {
    int v21 = 2 * a2;
    uint64_t v13 = (a3 - 1);
    unsigned __int8 v14 = -105 * ((*(_DWORD *)v10 - *(_DWORD *)v7) ^ 0x98);
    uint64_t v15 = (char *)*(&off_1E559D8D0
                  + ((-105 * (dword_1E91BCC58 ^ 0x98 ^ dword_1E91BCC08)) ^ byte_18DDE9840[byte_18DDE8470[(-105 * (dword_1E91BCC58 ^ 0x98 ^ dword_1E91BCC08))] ^ 0x80])
                  - 138)
        - 12;
    char v16 = (*(uint64_t (**)(uint64_t, void, uint64_t))&v15[8
                                                                  * (byte_18DDE7B34[(byte_18DDE6FD4[v14 - 4] ^ 0x31) - 4] ^ v14)
                                                                  + 16400])(a1, (2 * a2) | 1, v13);
    unsigned __int8 v17 = -105 * ((*(_DWORD *)v10 + *(_DWORD *)v7) ^ 0x98);
    char v18 = (*(uint64_t (**)(uint64_t, void, uint64_t))&v15[8
                                                                  * (byte_18DDE7938[(byte_18DDE6EDC[v17 - 12] ^ 0xE4) - 8] ^ v17)
                                                                  + 17968])(a1, (v21 + 2), v13);
    if (*(unsigned char *)(a1 + a2) == 1)
    {
      return (v18 + v16);
    }
    else if (!*(unsigned char *)(a1 + a2))
    {
      return (v18 ^ v16);
    }
  }
  else
  {
    return *(unsigned __int8 *)(a1 + a2);
  }
  return v19;
}

uint64_t sub_18DA43600(uint64_t *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = (uint64_t)*(&off_1E559D8D0
                + ((-105 * ((dword_1E91BCC08 - dword_1E91BCBA8) ^ 0x98)) ^ byte_18DDE9940[byte_18DDE8570[(-105 * ((dword_1E91BCC08 - dword_1E91BCBA8) ^ 0x98))] ^ 0x82])
                + 57);
  uint64_t v5 = *(void *)(v2 - 4);
  uint64_t v4 = (void *)(v2 - 4);
  uint64_t v3 = v5;
  uint64_t v6 = (uint64_t)*(&off_1E559D8D0
                + (byte_18DDE8670[byte_18DDE7A30[(-105
                                                                                                * ((dword_1E91BCC08 - v5) ^ 0x98))] ^ 0x11] ^ (-105 * ((dword_1E91BCC08 - v5) ^ 0x98)))
                + 28);
  uint64_t v8 = *(void *)(v6 - 4);
  uint64_t v7 = (void *)(v6 - 4);
  unint64_t v9 = (unint64_t)&v33[1] + v8 - v3;
  *uint64_t v4 = 178978711 * v9 + 0x65D966826B658768;
  *uint64_t v7 = 178978711 * (v9 ^ 0x9A26997D949A7898);
  uint64_t v10 = (uint64_t)*(&off_1E559D8D0
                 + ((-105 * (dword_1E91BCBA8 ^ 0x98 ^ dword_1E91BCC08)) ^ byte_18DDE7830[byte_18DDE6DD0[(-105 * (dword_1E91BCBA8 ^ 0x98 ^ dword_1E91BCC08))] ^ 0xAB])
                 - 214);
  uint64_t v11 = v10 - 12;
  v33[0] = *(_DWORD *)(v10 + 17700) ^ a1;
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(v10
                                           - 12
                                           + 8
                                           * ((byte_18DDE7938[(byte_18DDE6EDC[(-105 * (*(unsigned char *)v4 ^ 0x98 ^ *(unsigned char *)v7)) - 12] ^ 0x85)
                                                                                           - 8] ^ (-105
                                                                                                 * (*(unsigned char *)v4 ^ 0x98 ^ *(unsigned char *)v7)))
                                            + 2009)))(256);
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = 0;
    uint64_t v30 = v1;
    *uint64_t v1 = v12;
    int v31 = v12 + 2;
    uint64_t v32 = v11;
    for (uint64_t i = 1; ; ++i)
    {
      v33[0] = v31 + v14 + v33[0] * v33;
      char v16 = (void *)(v13 + v14);
      *(unsigned char *)(v13 + v14 + 8) = v33[0] & 3;
      char v17 = v33[0];
      int v18 = ((_BYTE)v31 + (_BYTE)v14) & 3;
      unsigned __int8 v19 = -105 * (*(_DWORD *)v4 ^ 0x98 ^ *(_DWORD *)v7);
      char v20 = (unsigned char *)(*(uint64_t (**)(void))(v32
                                                       + 8
                                                       * ((byte_18DDE7834[(byte_18DDE6DD4[v19 - 4] ^ 0xFD) - 4] ^ v19)
                                                        + 2152)))(~(-2 << ((v31 + v14) & 3)));
      if (!v20) {
        break;
      }
      if ((((_BYTE)v31 + (_BYTE)v14) & 3) != 0)
      {
        int v21 = -1 << v18;
        if ((-1 << v18) >= 0xFFFFFFFE) {
          int v21 = -2;
        }
        *char v20 = ((v17 * v17) ^ 1) & 1;
        if (v18 != 1)
        {
          char v22 = (((v17 * v17) ^ 1) * ((v17 * v17) ^ 1)) ^ 1;
          v20[1] = v22 & 1;
          char v23 = (v22 * v22) ^ 1;
          v20[2] = v23 & 1;
          if (v21 != -4)
          {
            char v24 = (v23 * v23) ^ 1;
            v20[3] = v24 & 1;
            char v25 = (v24 * v24) ^ 1;
            v20[4] = v25 & 1;
            if (v21 != -6)
            {
              v20[5] = (v25 & 1) == 0;
              v20[6] = (v25 & 1) != 0;
            }
          }
        }
      }
      *(void *)(v13 + v14) = v20;
      v14 += 16;
      if (v14 == 256) {
        return 0;
      }
    }
    *char v16 = 0;
    do
    {
      if (*v16)
      {
        unsigned __int8 v29 = -105 * (*(_DWORD *)v4 ^ 0x98 ^ *(_DWORD *)v7);
        (*(void (**)(void))(v32
                          + 8
                          * ((byte_18DDE9844[(byte_18DDE847C[v29 - 12] ^ 0x80) - 4] ^ v29)
                           + 2080)))();
      }
      v16 -= 2;
    }
    while (i-- > 1);
    (*(void (**)(uint64_t))(v32
                                    + 8
                                    * (((-105 * ((*(_DWORD *)v7 + *(_DWORD *)v4) ^ 0x98)) ^ byte_18DDE8670[byte_18DDE7A30[(-105 * ((*(_DWORD *)v7 + *(_DWORD *)v4) ^ 0x98))] ^ 0x11])
                                     + 2163)))(v13);
    uint64_t v1 = v30;
  }
  else
  {
    unsigned __int8 v26 = -105 * (*(_DWORD *)v4 ^ 0x98 ^ *(_DWORD *)v7);
    (*(void (**)(void))(v11
                      + 8
                      * ((byte_18DDE7B34[(byte_18DDE6FD4[v26 - 4] ^ 0x31) - 4] ^ v26)
                       + 2027)))();
  }
  *uint64_t v1 = 0;
  return 0xFFFFFFFFLL;
}

uint64_t sub_18DA43A90(uint64_t result)
{
  uint64_t v1 = (unint64_t *)*(&off_1E559D8D0
                           + ((-105 * ((dword_1E91BCC08 - dword_1E91BCB60) ^ 0x98)) ^ byte_18DDE9940[byte_18DDE8570[(-105 * ((dword_1E91BCC08 - dword_1E91BCB60) ^ 0x98))] ^ 0xF5])
                           - 107);
  unsigned __int8 v2 = -105 * ((dword_1E91BCC08 - *v1) ^ 0x98);
  uint64_t v3 = (uint64_t)*(&off_1E559D8D0 + (byte_18DDE7B34[(byte_18DDE6FD4[v2 - 4] ^ 0x1C) - 4] ^ v2) - 78);
  uint64_t v5 = *(void *)(v3 - 4);
  uint64_t v4 = (unint64_t *)(v3 - 4);
  unint64_t v6 = 178978711 * ((unint64_t)&v8[*v1 + v5] ^ 0x9A26997D949A7898);
  *uint64_t v1 = v6;
  *uint64_t v4 = v6;
  if (result)
  {
    unsigned __int8 v7 = -105 * (*(_DWORD *)v1 ^ 0x98 ^ *(_DWORD *)v4);
    return (*(uint64_t (**)(void))((char *)*(&off_1E559D8D0
                                          + ((-105 * ((dword_1E91BCC08 + dword_1E91BCB60) ^ 0x98)) ^ byte_18DDE9840[byte_18DDE8470[(-105 * ((dword_1E91BCC08 + dword_1E91BCB60) ^ 0x98))] ^ 0x3F])
                                          - 244)
                                + 8
                                * (byte_18DDE7938[(byte_18DDE6EDC[v7 - 12] ^ 0xE4) - 8] ^ v7)
                                + 17772))();
  }
  return result;
}

void *sub_18DA43C04(void *result, char *a2, int a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v4 = *result | 1;
    uint64_t v5 = *result + v4 * a4;
    do
    {
      char v6 = *a2++;
      *(unsigned char *)(*result + (v5 & 0xF)) = v6;
      v5 += v4;
      --a3;
    }
    while (a3);
  }
  return result;
}

uint64_t sub_18DA43C34(uint64_t result, unsigned char *a2, int a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v4 = result + a4 * (result | 1);
    do
    {
      *a2++ = *(unsigned char *)(result + (v4 & 0xF));
      v4 += result | 1;
      --a3;
    }
    while (a3);
  }
  return result;
}

uint64_t sub_18DA43C5C(uint64_t *a1)
{
  unsigned __int8 v2 = (uint64_t *)*(&off_1E559D8D0
                  + ((-105 * ((dword_1E91BCC08 - dword_1E91BCBC0) ^ 0x98)) ^ byte_18DDE8670[byte_18DDE7A30[(-105 * ((dword_1E91BCC08 - dword_1E91BCBC0) ^ 0x98))] ^ 0x6A])
                  + 24);
  uint64_t v3 = (uint64_t)*(&off_1E559D8D0
                + (byte_18DDE994C[(byte_18DDE8570[(-105
                                                                                                 * ((dword_1E91BCC08 + *v2) ^ 0x98))] ^ 0x82)
                                                               - 12] ^ (-105 * ((dword_1E91BCC08 + *v2) ^ 0x98)))
                + 58);
  unint64_t v4 = (*(void *)(v3 - 4) + *v2) ^ (unint64_t)&v10;
  uint64_t v5 = 178978711 * (v4 + 0x65D966826B658768);
  unint64_t v6 = 178978711 * (v4 ^ 0x9A26997D949A7898);
  *unsigned __int8 v2 = v5;
  *(void *)(v3 - 4) = v6;
  LOBYTE(v3) = -105 * ((v6 + *(_DWORD *)v2) ^ 0x98);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))((char *)*(&off_1E559D8D0
                                                    + ((-105
                                                                                     * (dword_1E91BCBC0 ^ 0x98 ^ dword_1E91BCC08)) ^ byte_18DDE7930[byte_18DDE6ED0[(-105 * (dword_1E91BCBC0 ^ 0x98 ^ dword_1E91BCC08))] ^ 0xE4])
                                                    + 5)
                                          + 8
                                          * (byte_18DDE7938[(byte_18DDE6EDC[v3 - 12] ^ 0xF8)
                                                                                         - 8] ^ v3)
                                          + 16484))(16);
  if (v7) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = 0xFFFFFFFFLL;
  }
  *a1 = v7;
  return v8;
}

void *sub_18DA43E00(void *result)
{
  uint64_t v1 = (uint64_t)*(&off_1E559D8D0
                + ((-105 * ((dword_1E91BCC08 - dword_1E91BCC10) ^ 0x98)) ^ byte_18DDE7930[byte_18DDE6ED0[(-105 * ((dword_1E91BCC08 - dword_1E91BCC10) ^ 0x98))] ^ 0x85])
                - 142);
  uint64_t v4 = *(void *)(v1 - 4);
  uint64_t v3 = (void *)(v1 - 4);
  uint64_t v2 = v4;
  uint64_t v5 = (uint64_t)*(&off_1E559D8D0
                + (byte_18DDE7B34[(byte_18DDE6FD4[(-105
                                                                                   * ((dword_1E91BCC08 - v4) ^ 0x98))
                                                                 - 4] ^ 0x31)
                                                 - 4] ^ (-105 * ((dword_1E91BCC08 - v4) ^ 0x98)))
                - 108);
  uint64_t v7 = *(void *)(v5 - 4);
  unint64_t v6 = (void *)(v5 - 4);
  unint64_t v8 = (v7 + v2) ^ (unint64_t)&v11;
  *uint64_t v3 = 178978711 * (v8 + 0x65D966826B658768);
  *unint64_t v6 = 178978711 * (v8 ^ 0x9A26997D949A7898);
  if (result)
  {
    do
    {
      unint64_t v9 = (void *)*result;
      unsigned __int8 v10 = -105 * ((*(_DWORD *)v6 + *(_DWORD *)v3) ^ 0x98);
      (*(void (**)(void))((char *)*(&off_1E559D8D0
                                  + ((-105 * ((dword_1E91BCC08 - dword_1E91BCC10) ^ 0x98)) ^ byte_18DDE9940[byte_18DDE8570[(-105 * ((dword_1E91BCC08 - dword_1E91BCC10) ^ 0x98))] ^ 0xF5])
                                  - 198)
                        + 8
                        * (byte_18DDE7834[(byte_18DDE6DD4[v10 - 4] ^ 0xFD) - 4] ^ v10)
                        + 17108))();
      uint64_t result = v9;
    }
    while (v9);
  }
  return result;
}

uint64_t *sub_18DA43FD4(uint64_t *result, char *a2, int a3, uint64_t a4)
{
  for (; a3; --a3)
  {
    char v4 = *a2;
    uint64_t v5 = result;
    do
    {
      uint64_t v5 = (uint64_t *)*v5;
      uint64_t v6 = v5[1];
      if (v6) {
        BOOL v7 = v6 == a4;
      }
      else {
        BOOL v7 = 1;
      }
    }
    while (!v7);
    if (!v6) {
      v5[1] = a4;
    }
    *((unsigned char *)v5 + 16) = v4;
    ++a2;
    ++a4;
  }
  return result;
}

uint64_t *sub_18DA44018(uint64_t *result, unsigned char *a2, int a3, uint64_t a4)
{
  for (; a3; --a3)
  {
    uint64_t v4 = result[1];
    if (v4) {
      BOOL v5 = v4 == a4;
    }
    else {
      BOOL v5 = 1;
    }
    uint64_t v6 = result;
    if (!v5)
    {
      uint64_t v6 = result;
      do
      {
        uint64_t v6 = (uint64_t *)*v6;
        uint64_t v7 = v6[1];
        if (v7) {
          BOOL v8 = v7 == a4;
        }
        else {
          BOOL v8 = 1;
        }
      }
      while (!v8);
    }
    *a2++ = *((unsigned char *)v6 + 16);
    ++a4;
  }
  return result;
}

uint64_t sub_18DA44064(uint64_t *a1)
{
  uint64_t v1 = (uint64_t *)*(&off_1E559D8D0
                  + ((-105 * ((dword_1E91BCC08 - dword_1E91BCB48) ^ 0x98)) ^ byte_18DDE7B30[byte_18DDE6FD0[(-105 * ((dword_1E91BCC08 - dword_1E91BCB48) ^ 0x98))] ^ 0x31])
                  - 145);
  uint64_t v2 = (uint64_t)*(&off_1E559D8D0
                + ((-105 * (*v1 ^ dword_1E91BCC08 ^ 0x98)) ^ byte_18DDE7830[byte_18DDE6DD0[(-105 * (*v1 ^ dword_1E91BCC08 ^ 0x98))] ^ 0xF5])
                - 25);
  uint64_t v4 = *(void *)(v2 - 4);
  uint64_t v3 = (unint64_t *)(v2 - 4);
  uint64_t v5 = v4 - *v1 - (void)&v42;
  uint64_t v6 = 178978711 * v5 + 0x34DB57628A2C89A8;
  unint64_t v7 = 178978711 * (v5 ^ 0x9A26997D949A7898);
  *uint64_t v1 = v6;
  *uint64_t v3 = v7;
  LOBYTE(v7) = -105 * ((v7 - *(_DWORD *)v1) ^ 0x98);
  BOOL v8 = (char *)*(&off_1E559D8D0
               + ((-105 * ((dword_1E91BCC08 - dword_1E91BCB48) ^ 0x98)) ^ byte_18DDE9940[byte_18DDE8570[(-105 * ((dword_1E91BCC08 - dword_1E91BCB48) ^ 0x98))] ^ 0x3B])
               - 131)
     - 12;
  uint64_t v9 = (*(uint64_t (**)(uint64_t))&v8[8
                                             * (byte_18DDE7830[byte_18DDE6DD0[v7] ^ 0x5A] ^ v7)
                                             + 17456])(24);
  if (!v9) {
    goto LABEL_18;
  }
  unsigned __int8 v10 = (void *)v9;
  *a1 = v9;
  (*(void (**)(void))&v8[8
                       * ((-105 * ((*(_DWORD *)v3 + *(_DWORD *)v1) ^ 0x98)) ^ byte_18DDE7830[byte_18DDE6DD0[(-105 * ((*(_DWORD *)v3 + *(_DWORD *)v1) ^ 0x98))] ^ 0x5A])
                       + 17208])();
  uint64_t v11 = (*(uint64_t (**)(uint64_t))&v8[8
                                              * ((-105 * ((*(_DWORD *)v3 - *(_DWORD *)v1) ^ 0x98)) ^ byte_18DDE7830[byte_18DDE6DD0[(-105 * ((*(_DWORD *)v3 - *(_DWORD *)v1) ^ 0x98))] ^ 0x5A])
                                              + 17456])(24);
  if (!v11) {
    goto LABEL_18;
  }
  uint64_t v12 = (void *)v11;
  *unsigned __int8 v10 = v11;
  (*(void (**)(void))&v8[8
                       * ((-105 * (*(_DWORD *)v1 ^ 0x98 ^ *(_DWORD *)v3)) ^ byte_18DDE7830[byte_18DDE6DD0[(-105 * (*(_DWORD *)v1 ^ 0x98 ^ *(_DWORD *)v3))] ^ 0xF5])
                       + 16728])();
  uint64_t v13 = (*(uint64_t (**)(uint64_t))&v8[8
                                              * ((-105 * (*(_DWORD *)v1 ^ 0x98 ^ *(_DWORD *)v3)) ^ byte_18DDE9940[byte_18DDE8570[(-105 * (*(_DWORD *)v1 ^ 0x98 ^ *(_DWORD *)v3))] ^ 0x3B])
                                              + 16792])(24);
  if (!v13) {
    goto LABEL_18;
  }
  uint64_t v14 = (void *)v13;
  *uint64_t v12 = v13;
  (*(void (**)(void))&v8[8
                       * (byte_18DDE7B30[byte_18DDE6FD0[(-105
                                                                                         * ((*(_DWORD *)v3
                                                                                           - *(_DWORD *)v1) ^ 0x98))] ^ 0x31] ^ (-105 * ((*(_DWORD *)v3 - *(_DWORD *)v1) ^ 0x98)))
                       + 16064])();
  uint64_t v15 = (*(uint64_t (**)(uint64_t))&v8[8
                                              * ((-105 * ((*(_DWORD *)v3 - *(_DWORD *)v1) ^ 0x98)) ^ byte_18DDE7830[byte_18DDE6DD0[(-105 * ((*(_DWORD *)v3 - *(_DWORD *)v1) ^ 0x98))] ^ 0x5A])
                                              + 17456])(24);
  if (!v15) {
    goto LABEL_18;
  }
  char v16 = (void *)v15;
  *uint64_t v14 = v15;
  (*(void (**)(void))&v8[8
                       * (byte_18DDE9840[byte_18DDE8470[(-105
                                                                                         * ((*(_DWORD *)v3
                                                                                           + *(_DWORD *)v1) ^ 0x98))] ^ 0x80] ^ (-105 * ((*(_DWORD *)v3 + *(_DWORD *)v1) ^ 0x98)))
                       + 16488])();
  uint64_t v17 = (*(uint64_t (**)(uint64_t))&v8[8
                                              * ((-105 * ((*(_DWORD *)v3 - *(_DWORD *)v1) ^ 0x98)) ^ byte_18DDE7B30[byte_18DDE6FD0[(-105 * ((*(_DWORD *)v3 - *(_DWORD *)v1) ^ 0x98))] ^ 0x1C])
                                              + 16552])(24);
  if (!v17) {
    goto LABEL_18;
  }
  int v18 = (void *)v17;
  *char v16 = v17;
  (*(void (**)(void))&v8[8
                       * ((-105 * ((*(_DWORD *)v3 - *(_DWORD *)v1) ^ 0x98)) ^ byte_18DDE9840[byte_18DDE8470[(-105 * ((*(_DWORD *)v3 - *(_DWORD *)v1) ^ 0x98))] ^ 0x3F])
                       + 15640])();
  uint64_t v19 = (*(uint64_t (**)(uint64_t))&v8[8
                                              * (byte_18DDE8670[byte_18DDE7A30[(-105 * ((*(_DWORD *)v3 - *(_DWORD *)v1) ^ 0x98))] ^ 0x11] ^ (-105 * ((*(_DWORD *)v3 - *(_DWORD *)v1) ^ 0x98)))
                                              + 17400])(24);
  if (!v19) {
    goto LABEL_18;
  }
  char v20 = (void *)v19;
  *int v18 = v19;
  (*(void (**)(void))&v8[8
                       * (byte_18DDE7930[byte_18DDE6ED0[(-105
                                                                                         * ((*(_DWORD *)v3
                                                                                           - *(_DWORD *)v1) ^ 0x98))] ^ 0x85] ^ (-105 * ((*(_DWORD *)v3 - *(_DWORD *)v1) ^ 0x98)))
                       + 15824])();
  uint64_t v21 = (*(uint64_t (**)(uint64_t))&v8[8
                                              * ((-105 * ((*(_DWORD *)v3 - *(_DWORD *)v1) ^ 0x98)) ^ byte_18DDE7830[byte_18DDE6DD0[(-105 * ((*(_DWORD *)v3 - *(_DWORD *)v1) ^ 0x98))] ^ 0x5A])
                                              + 17456])(24);
  if (!v21) {
    goto LABEL_18;
  }
  char v22 = (void *)v21;
  *char v20 = v21;
  (*(void (**)(void))&v8[8
                       * ((-105 * ((*(_DWORD *)v3 + *(_DWORD *)v1) ^ 0x98)) ^ byte_18DDE7830[byte_18DDE6DD0[(-105 * ((*(_DWORD *)v3 + *(_DWORD *)v1) ^ 0x98))] ^ 0xF5])
                       + 16728])();
  uint64_t v23 = (*(uint64_t (**)(uint64_t))&v8[8
                                              * ((-105 * ((*(_DWORD *)v3 - *(_DWORD *)v1) ^ 0x98)) ^ byte_18DDE7930[byte_18DDE6ED0[(-105 * ((*(_DWORD *)v3 - *(_DWORD *)v1) ^ 0x98))] ^ 0xF8])
                                              + 16496])(24);
  if (!v23) {
    goto LABEL_18;
  }
  char v24 = (void *)v23;
  *char v22 = v23;
  (*(void (**)(void))&v8[8
                       * ((-105 * ((*(_DWORD *)v3 + *(_DWORD *)v1) ^ 0x98)) ^ byte_18DDE8670[byte_18DDE7A30[(-105 * ((*(_DWORD *)v3 + *(_DWORD *)v1) ^ 0x98))] ^ 0x11])
                       + 17152])();
  uint64_t v25 = (*(uint64_t (**)(uint64_t))&v8[8
                                              * ((-105 * ((*(_DWORD *)v3 + *(_DWORD *)v1) ^ 0x98)) ^ byte_18DDE7830[byte_18DDE6DD0[(-105 * ((*(_DWORD *)v3 + *(_DWORD *)v1) ^ 0x98))] ^ 0xFD])
                                              + 17216])(24);
  if (!v25) {
    goto LABEL_18;
  }
  unsigned __int8 v26 = (void *)v25;
  *char v24 = v25;
  (*(void (**)(void))&v8[8
                       * ((-105 * ((*(_DWORD *)v3 + *(_DWORD *)v1) ^ 0x98)) ^ byte_18DDE7830[byte_18DDE6DD0[(-105 * ((*(_DWORD *)v3 + *(_DWORD *)v1) ^ 0x98))] ^ 0xAB])
                       + 15880])();
  uint64_t v27 = (*(uint64_t (**)(uint64_t))&v8[8
                                              * ((-105 * ((*(_DWORD *)v3 + *(_DWORD *)v1) ^ 0x98)) ^ byte_18DDE9840[byte_18DDE8470[(-105 * ((*(_DWORD *)v3 + *(_DWORD *)v1) ^ 0x98))] ^ 0x3F])
                                              + 15888])(24);
  if (!v27) {
    goto LABEL_18;
  }
  unint64_t v28 = (void *)v27;
  *unsigned __int8 v26 = v27;
  (*(void (**)(void))&v8[8
                       * ((-105 * ((*(_DWORD *)v3 - *(_DWORD *)v1) ^ 0x98)) ^ byte_18DDE7930[byte_18DDE6ED0[(-105 * ((*(_DWORD *)v3 - *(_DWORD *)v1) ^ 0x98))] ^ 0x85])
                       + 15824])();
  uint64_t v29 = (*(uint64_t (**)(uint64_t))&v8[8
                                              * ((-105 * (*(_DWORD *)v1 ^ 0x98 ^ *(_DWORD *)v3)) ^ byte_18DDE9940[byte_18DDE8570[(-105 * (*(_DWORD *)v1 ^ 0x98 ^ *(_DWORD *)v3))] ^ 0x82])
                                              + 17640])(24);
  if (!v29) {
    goto LABEL_18;
  }
  uint64_t v30 = (void *)v29;
  *unint64_t v28 = v29;
  (*(void (**)(void))&v8[8
                       * ((-105 * ((*(_DWORD *)v3 - *(_DWORD *)v1) ^ 0x98)) ^ byte_18DDE7830[byte_18DDE6DD0[(-105 * ((*(_DWORD *)v3 - *(_DWORD *)v1) ^ 0x98))] ^ 0xAB])
                       + 15880])();
  uint64_t v31 = (*(uint64_t (**)(uint64_t))&v8[8
                                              * ((-105 * ((*(_DWORD *)v3 + *(_DWORD *)v1) ^ 0x98)) ^ byte_18DDE7930[byte_18DDE6ED0[(-105 * ((*(_DWORD *)v3 + *(_DWORD *)v1) ^ 0x98))] ^ 0xE4])
                                              + 17880])(24);
  if (!v31) {
    goto LABEL_18;
  }
  uint64_t v32 = (void *)v31;
  *uint64_t v30 = v31;
  (*(void (**)(void))&v8[8
                       * ((-105 * (*(_DWORD *)v1 ^ 0x98 ^ *(_DWORD *)v3)) ^ byte_18DDE9940[byte_18DDE8570[(-105 * (*(_DWORD *)v1 ^ 0x98 ^ *(_DWORD *)v3))] ^ 0x82])
                       + 17392])();
  uint64_t v33 = (*(uint64_t (**)(uint64_t))&v8[8
                                              * ((-105 * ((*(_DWORD *)v3 + *(_DWORD *)v1) ^ 0x98)) ^ byte_18DDE7B30[byte_18DDE6FD0[(-105 * ((*(_DWORD *)v3 + *(_DWORD *)v1) ^ 0x98))] ^ 0x31])
                                              + 16312])(24);
  if (!v33) {
    goto LABEL_18;
  }
  uint64_t v34 = (void *)v33;
  *uint64_t v32 = v33;
  (*(void (**)(void))&v8[8
                       * ((-105 * ((*(_DWORD *)v3 - *(_DWORD *)v1) ^ 0x98)) ^ byte_18DDE9940[byte_18DDE8570[(-105 * ((*(_DWORD *)v3 - *(_DWORD *)v1) ^ 0x98))] ^ 0x82])
                       + 17392])();
  uint64_t v35 = (*(uint64_t (**)(uint64_t))&v8[8
                                              * ((-105 * ((*(_DWORD *)v3 + *(_DWORD *)v1) ^ 0x98)) ^ byte_18DDE7B30[byte_18DDE6FD0[(-105 * ((*(_DWORD *)v3 + *(_DWORD *)v1) ^ 0x98))] ^ 0x31])
                                              + 16312])(24);
  if (!v35) {
    goto LABEL_18;
  }
  unint64_t v36 = (void *)v35;
  *uint64_t v34 = v35;
  (*(void (**)(void))&v8[8
                       * ((-105 * (*(_DWORD *)v1 ^ 0x98 ^ *(_DWORD *)v3)) ^ byte_18DDE9940[byte_18DDE8570[(-105 * (*(_DWORD *)v1 ^ 0x98 ^ *(_DWORD *)v3))] ^ 0x3B])
                       + 16544])();
  uint64_t v37 = (*(uint64_t (**)(uint64_t))&v8[8
                                              * ((-105 * ((*(_DWORD *)v3 + *(_DWORD *)v1) ^ 0x98)) ^ byte_18DDE7830[byte_18DDE6DD0[(-105 * ((*(_DWORD *)v3 + *(_DWORD *)v1) ^ 0x98))] ^ 0x5A])
                                              + 17456])(24);
  if (!v37) {
    goto LABEL_18;
  }
  unint64_t v38 = (void *)v37;
  *unint64_t v36 = v37;
  (*(void (**)(void))&v8[8
                       * ((-105 * (*(_DWORD *)v1 ^ 0x98 ^ *(_DWORD *)v3)) ^ byte_18DDE7830[byte_18DDE6DD0[(-105 * (*(_DWORD *)v1 ^ 0x98 ^ *(_DWORD *)v3))] ^ 0xAB])
                       + 15880])();
  uint64_t v39 = (*(uint64_t (**)(uint64_t))&v8[8
                                              * ((-105 * ((*(_DWORD *)v3 + *(_DWORD *)v1) ^ 0x98)) ^ byte_18DDE9840[byte_18DDE8470[(-105 * ((*(_DWORD *)v3 + *(_DWORD *)v1) ^ 0x98))] ^ 0x3F])
                                              + 15888])(24);
  if (v39)
  {
    *unint64_t v38 = v39;
    (*(void (**)(void))&v8[8
                         * ((-105 * ((*(_DWORD *)v3 + *(_DWORD *)v1) ^ 0x98)) ^ byte_18DDE7830[byte_18DDE6DD0[(-105 * ((*(_DWORD *)v3 + *(_DWORD *)v1) ^ 0x98))] ^ 0x5A])
                         + 17208])();
    return 0;
  }
  else
  {
LABEL_18:
    (*(void (**)(uint64_t))&v8[8
                                       * ((-105 * (*(_DWORD *)v1 ^ 0x98 ^ *(_DWORD *)v3)) ^ byte_18DDE9940[byte_18DDE8570[(-105 * (*(_DWORD *)v1 ^ 0x98 ^ *(_DWORD *)v3))] ^ 0x3B])
                                       + 16768])(*a1);
    *a1 = 0;
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_18DA44C84(uint64_t result)
{
  uint64_t v1 = (uint64_t)*(&off_1E559D8D0
                + ((-105 * ((dword_1E91BCC08 + dword_1E91BCBB0) ^ 0x98)) ^ byte_18DDE7830[byte_18DDE6DD0[(-105 * ((dword_1E91BCC08 + dword_1E91BCBB0) ^ 0x98))] ^ 0xAB])
                - 142);
  uint64_t v4 = *(void *)(v1 - 4);
  uint64_t v2 = (void *)(v1 - 4);
  uint64_t v3 = v4;
  uint64_t v5 = (uint64_t)*(&off_1E559D8D0
                + (byte_18DDE7938[(byte_18DDE6EDC[(-105
                                                                                   * ((dword_1E91BCC08 + v4) ^ 0x98))
                                                                 - 12] ^ 0xF8)
                                                 - 8] ^ (-105 * ((dword_1E91BCC08 + v4) ^ 0x98)))
                - 85);
  uint64_t v7 = *(void *)(v5 - 4);
  uint64_t v6 = (void *)(v5 - 4);
  uint64_t v8 = v3 - (void)&v10 + v7;
  *uint64_t v2 = 178978711 * v8 - 0x65D966826B658768;
  *uint64_t v6 = 178978711 * (v8 ^ 0x9A26997D949A7898);
  if (result)
  {
    unsigned __int8 v9 = -105 * ((*(_DWORD *)v6 - *(_DWORD *)v2) ^ 0x98);
    return (*(uint64_t (**)(void))((char *)*(&off_1E559D8D0
                                          + ((-105 * ((dword_1E91BCC08 - dword_1E91BCBB0) ^ 0x98)) ^ byte_18DDE7930[byte_18DDE6ED0[(-105 * ((dword_1E91BCC08 - dword_1E91BCBB0) ^ 0x98))] ^ 0x85])
                                          - 221)
                                + 8
                                * (byte_18DDE994C[(byte_18DDE8570[v9] ^ 0xF5) - 12] ^ v9)
                                + 16148))();
  }
  return result;
}

void *sub_18DA44E00(void *result, char *a2, int a3, uint64_t a4)
{
  for (; a3; --a3)
  {
    char v4 = *a2++;
    *(unsigned char *)(*result + (a4++ & 0xF)) = v4;
  }
  return result;
}

double sub_18DA44E24(uint64_t a1, long long *a2, unsigned int a3, uint64_t a4)
{
  if (a3)
  {
    if (a3 < 8
      || a3 - 1 > 0xF
      || (~a4 & 0xFu) < (((_BYTE)a3 - 1) & 0xFu)
      || (unint64_t)a2 - a1 - (a4 & 0xF) < 0x20)
    {
      uint64_t v4 = a4;
      uint64_t v5 = a2;
      goto LABEL_4;
    }
    uint64_t v6 = a3;
    if (a3 >= 0x20)
    {
      uint64_t v7 = a3 & 0xFFFFFFE0;
      uint64_t v8 = (long long *)(a1 + (a4 & 0xF));
      long long v9 = *v8;
      long long v10 = v8[1];
      *a2 = *v8;
      a2[1] = v10;
      if (v7 == a3) {
        return *(double *)&v9;
      }
      if ((a3 & 0x18) == 0)
      {
        a3 -= v7;
        uint64_t v5 = (long long *)((char *)a2 + v7);
        uint64_t v4 = a4 + v7;
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    uint64_t v4 = a4 + (a3 & 0xFFFFFFF8);
    uint64_t v5 = (long long *)((char *)a2 + (a3 & 0xFFFFFFF8));
    a3 -= a3 & 0xFFFFFFF8;
    uint64_t v11 = (void *)((char *)a2 + v7);
    uint64_t v12 = v7 + a4;
    uint64_t v13 = v7 - (v6 & 0xFFFFFFF8);
    do
    {
      *(void *)&long long v9 = *(void *)(a1 + (v12 & 0xF));
      *v11++ = v9;
      v12 += 8;
      v13 += 8;
    }
    while (v13);
    if ((v6 & 0xFFFFFFF8) == v6) {
      return *(double *)&v9;
    }
    do
    {
LABEL_4:
      *(unsigned char *)uint64_t v5 = *(unsigned char *)(a1 + (v4 & 0xF));
      uint64_t v5 = (long long *)((char *)v5 + 1);
      ++v4;
      --a3;
    }
    while (a3);
  }
  return *(double *)&v9;
}

uint64_t sub_18DA44F10(uint64_t *a1)
{
  uint64_t v2 = (uint64_t)*(&off_1E559D8D0
                + ((-105 * ((dword_1E91BCC08 - dword_1E91BCC78) ^ 0x98)) ^ byte_18DDE7830[byte_18DDE6DD0[(-105 * ((dword_1E91BCC08 - dword_1E91BCC78) ^ 0x98))] ^ 0x5A])
                - 28);
  uint64_t v3 = *(void *)(v2 - 4);
  uint64_t v4 = (uint64_t)*(&off_1E559D8D0
                + (byte_18DDE9844[(byte_18DDE847C[(-105
                                                                                   * ((dword_1E91BCC08 + v3) ^ 0x98))
                                                                 - 12] ^ 0x3F)
                                                 - 4] ^ (-105 * ((dword_1E91BCC08 + v3) ^ 0x98)))
                - 161);
  unint64_t v5 = v3 ^ (unint64_t)&v11 ^ *(void *)(v4 - 4);
  uint64_t v6 = 178978711 * v5 + 0x34DB57628A2C89A8;
  unint64_t v7 = 178978711 * (v5 ^ 0x9A26997D949A7898);
  *(void *)(v2 - 4) = v6;
  *(void *)(v4 - 4) = v7;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))((char *)*(&off_1E559D8D0
                                                    + ((-105
                                                                       * ((dword_1E91BCC08 + dword_1E91BCC78) ^ 0x98)) ^ byte_18DDE7B30[byte_18DDE6FD0[(-105 * ((dword_1E91BCC08 + dword_1E91BCC78) ^ 0x98))] ^ 0x1C])
                                                    - 161)
                                          + 8
                                          * (byte_18DDE994C[(byte_18DDE8570[(-105 * ((v7 + *(_DWORD *)(v2 - 4)) ^ 0x98))] ^ 0xF5)
                                                                                         - 12] ^ (-105
                                                                                                * ((v7
                                                                                                  + *(_DWORD *)(v2 - 4)) ^ 0x98)))
                                          + 16244))(16);
  if (v8) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = 0xFFFFFFFFLL;
  }
  *a1 = v8;
  return v9;
}

uint64_t sub_18DA450B0()
{
  int v0 = (uint64_t *)*(&off_1E559D8D0
                  + ((-105 * (dword_1E91BCC20 ^ 0x98 ^ dword_1E91BCC08)) ^ byte_18DDE7930[byte_18DDE6ED0[(-105 * (dword_1E91BCC20 ^ 0x98 ^ dword_1E91BCC08))] ^ 0xE4])
                  + 107);
  uint64_t v1 = (uint64_t)*(&off_1E559D8D0
                + (byte_18DDE9840[byte_18DDE8470[(-105 * (*v0 ^ dword_1E91BCC08 ^ 0x98))] ^ 0x80] ^ (-105 * (*v0 ^ dword_1E91BCC08 ^ 0x98)))
                - 55);
  unint64_t v2 = (unint64_t)&v6[*v0 + *(void *)(v1 - 4)];
  uint64_t v3 = 178978711 * v2 + 0x34DB57628A2C89A8;
  unint64_t v4 = 178978711 * (v2 ^ 0x9A26997D949A7898);
  *int v0 = v3;
  *(void *)(v1 - 4) = v4;
  return (*(uint64_t (**)(void))((char *)*(&off_1E559D8D0
                                        + ((-105 * (dword_1E91BCC20 ^ 0x98 ^ dword_1E91BCC08)) ^ byte_18DDE9940[byte_18DDE8570[(-105 * (dword_1E91BCC20 ^ 0x98 ^ dword_1E91BCC08))] ^ 0xF5])
                                        - 198)
                              + 8
                              * ((-105 * ((v4 + *(_DWORD *)v0) ^ 0x98)) ^ byte_18DDE9840[byte_18DDE8470[(-105 * ((v4 + *(_DWORD *)v0) ^ 0x98))] ^ 0x3F])
                              + 15876))();
}

uint64_t sub_18DA45214()
{
  uint64_t v0 = (uint64_t)*(&off_1E559D8D0
                + ((-105 * ((dword_1E91BCC08 - dword_1E91BCBC8) ^ 0x98)) ^ byte_18DDE7B30[byte_18DDE6FD0[(-105 * ((dword_1E91BCC08 - dword_1E91BCBC8) ^ 0x98))] ^ 0x1C])
                - 68);
  uint64_t v1 = *(void *)(v0 - 4);
  uint64_t v2 = (uint64_t)*(&off_1E559D8D0
                + (byte_18DDE7938[(byte_18DDE6EDC[(-105
                                                                                   * ((dword_1E91BCC08 + v1) ^ 0x98))
                                                                 - 12] ^ 0xF8)
                                                 - 8] ^ (-105 * ((dword_1E91BCC08 + v1) ^ 0x98)))
                - 85);
  unint64_t v3 = 178978711 * (((*(void *)(v2 - 4) ^ v1) - (void)&v5) ^ 0x9A26997D949A7898);
  *(void *)(v0 - 4) = v3;
  *(void *)(v2 - 4) = v3;
  return (*(uint64_t (**)(void))((char *)*(&off_1E559D8D0
                                        + ((-105 * ((dword_1E91BCC08 + dword_1E91BCBC8) ^ 0x98)) ^ byte_18DDE9940[byte_18DDE8570[(-105 * ((dword_1E91BCC08 + dword_1E91BCBC8) ^ 0x98))] ^ 0xF5])
                                        - 198)
                              + 8
                              * (byte_18DDE994C[(byte_18DDE8570[(-105 * (*(_DWORD *)(v0 - 4) ^ 0x98 ^ v3))] ^ 0xF5)
                                                                             - 12] ^ (-105
                                                                                    * (*(_DWORD *)(v0 - 4) ^ 0x98 ^ v3)))
                              + 16148))();
}

unsigned char *sub_18DA45374(unsigned char *result, unsigned int a2, unint64_t a3)
{
  unint64_t v3 = -(int)result & 7;
  if (v3 > a3) {
    LODWORD(v3) = a3;
  }
  switch((int)v3)
  {
    case 1:
      goto LABEL_10;
    case 2:
      goto LABEL_9;
    case 3:
      goto LABEL_8;
    case 4:
      goto LABEL_7;
    case 5:
      goto LABEL_6;
    case 6:
      goto LABEL_5;
    case 7:
      *result++ = a2;
LABEL_5:
      *result++ = a2;
LABEL_6:
      *result++ = a2;
LABEL_7:
      *result++ = a2;
LABEL_8:
      *result++ = a2;
LABEL_9:
      *result++ = a2;
LABEL_10:
      *result++ = a2;
      break;
    default:
      break;
  }
  unint64_t v4 = a3 - v3;
  if (v4 >= 8)
  {
    uint64_t v5 = 0x101010101010101 * a2;
    unint64_t v6 = ((v4 >> 3) + 7) >> 3;
    switch((v4 >> 3) & 7)
    {
      case 1uLL:
        goto LABEL_20;
      case 2uLL:
        goto LABEL_19;
      case 3uLL:
        goto LABEL_18;
      case 4uLL:
        goto LABEL_17;
      case 5uLL:
        goto LABEL_16;
      case 6uLL:
        goto LABEL_15;
      case 7uLL:
        goto LABEL_14;
      default:
        do
        {
          *(void *)uint64_t result = v5;
          result += 8;
LABEL_14:
          *(void *)uint64_t result = v5;
          result += 8;
LABEL_15:
          *(void *)uint64_t result = v5;
          result += 8;
LABEL_16:
          *(void *)uint64_t result = v5;
          result += 8;
LABEL_17:
          *(void *)uint64_t result = v5;
          result += 8;
LABEL_18:
          *(void *)uint64_t result = v5;
          result += 8;
LABEL_19:
          *(void *)uint64_t result = v5;
          result += 8;
LABEL_20:
          *(void *)uint64_t result = v5;
          result += 8;
          --v6;
        }
        while (v6);
        break;
    }
  }
  switch(v4 & 7)
  {
    case 1uLL:
      goto LABEL_28;
    case 2uLL:
      goto LABEL_27;
    case 3uLL:
      goto LABEL_26;
    case 4uLL:
      goto LABEL_25;
    case 5uLL:
      goto LABEL_24;
    case 6uLL:
      goto LABEL_23;
    case 7uLL:
      *result++ = a2;
LABEL_23:
      *result++ = a2;
LABEL_24:
      *result++ = a2;
LABEL_25:
      *result++ = a2;
LABEL_26:
      *result++ = a2;
LABEL_27:
      *result++ = a2;
LABEL_28:
      *uint64_t result = a2;
      break;
    default:
      return result;
  }
  return result;
}

void AMSCore::shutdown(AMSCore *this)
{
  AMSCore::ServiceProvider<AMSCore::IHTTPProvider>::getDefaultOrNull(&v37);
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 16))(v37);
  }
  uint64_t v1 = v38;
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  int v2 = atomic_load((unsigned int *)AMSCore::TaskCounter::getCount(void)::count);
  if (v2 >= 1)
  {
    do
    {
      v3.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      unsigned int v4 = 0;
      while (1)
      {
        unsigned int v5 = atomic_load((unsigned int *)AMSCore::TaskCounter::getCount(void)::count);
        if (v5 != v2) {
          break;
        }
        if (v4 <= 0x3F)
        {
          ++v4;
        }
        else
        {
          v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ - v3.__d_.__rep_;
          if (v6.__d_.__rep_ < 64001)
          {
            if (v6.__d_.__rep_ >= 4001) {
              sched_yield();
            }
          }
          else
          {
            std::__cxx_contention_t v7 = std::__libcpp_atomic_monitor(AMSCore::TaskCounter::getCount(void)::count);
            unsigned int v8 = atomic_load((unsigned int *)AMSCore::TaskCounter::getCount(void)::count);
            if (v8 != v2) {
              break;
            }
            std::__libcpp_atomic_wait(AMSCore::TaskCounter::getCount(void)::count, v7);
          }
        }
      }
      int v2 = atomic_load((unsigned int *)AMSCore::TaskCounter::getCount(void)::count);
    }
    while (v2 > 0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_19INotificationCenterEEERDavE9singleton, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_19INotificationCenterEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_19INotificationCenterEEERDavE9singleton);
    xmmword_1EB38CB08 = 0uLL;
    byte_1EB38CB18 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_19INotificationCenterEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_19INotificationCenterEEERDavE9singleton);
  long long v9 = xmmword_1EB38CB08;
  if (*((void *)&xmmword_1EB38CB08 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1EB38CB08 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  std::__shared_mutex_base::unlock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_19INotificationCenterEEERDavE9singleton);
  if ((void)v9) {
    (*(void (**)(void))(*(void *)v9 + 32))(v9);
  }
  if (*((void *)&v9 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v9 + 1) + 16))(*((void *)&v9 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v9 + 1));
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_19INotificationCenterEEERDavE9singleton, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_19INotificationCenterEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_19INotificationCenterEEERDavE9singleton);
    xmmword_1EB38CB08 = 0uLL;
    byte_1EB38CB18 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_19INotificationCenterEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_19INotificationCenterEEERDavE9singleton);
  long long v10 = (std::__shared_weak_count *)*((void *)&xmmword_1EB38CB08 + 1);
  xmmword_1EB38CB08 = 0uLL;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  byte_1EB38CB18 = 0;
  std::__shared_mutex_base::unlock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_19INotificationCenterEEERDavE9singleton);
  AMSCore::ServiceProvider<AMSCore::ISchedulingProvider>::getDefaultOrNull(&v37);
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 32))(v37);
  }
  char v11 = v38;
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_19ISchedulingProviderEEERDavE9singleton, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_19ISchedulingProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_19ISchedulingProviderEEERDavE9singleton);
    xmmword_1EB38CBC8 = 0uLL;
    byte_1EB38CBD8 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_19ISchedulingProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_19ISchedulingProviderEEERDavE9singleton);
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&xmmword_1EB38CBC8 + 1);
  xmmword_1EB38CBC8 = 0uLL;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  byte_1EB38CBD8 = 0;
  std::__shared_mutex_base::unlock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_19ISchedulingProviderEEERDavE9singleton);
  AMSCore::ServiceProvider<AMSCore::IHTTPProvider>::getDefaultOrNull(&v37);
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 16))(v37);
  }
  uint64_t v13 = v38;
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_13IHTTPProviderEEERDavE9singleton, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_13IHTTPProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_13IHTTPProviderEEERDavE9singleton);
    xmmword_1EB38C448 = 0uLL;
    byte_1EB38C458 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_13IHTTPProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_13IHTTPProviderEEERDavE9singleton);
  uint64_t v14 = (std::__shared_weak_count *)*((void *)&xmmword_1EB38C448 + 1);
  xmmword_1EB38C448 = 0uLL;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  byte_1EB38C458 = 0;
  std::__shared_mutex_base::unlock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_13IHTTPProviderEEERDavE9singleton);
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_18IHTTPCacheProviderEEERDavE9singleton, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_18IHTTPCacheProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_18IHTTPCacheProviderEEERDavE9singleton);
    qword_1EB38CA48 = 0;
    qword_1EB38CA50 = 0;
    byte_1EB38CA58 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_18IHTTPCacheProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_18IHTTPCacheProviderEEERDavE9singleton);
  uint64_t v16 = qword_1EB38CA48;
  uint64_t v15 = (std::__shared_weak_count *)qword_1EB38CA50;
  if (qword_1EB38CA50) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(qword_1EB38CA50 + 8), 1uLL, memory_order_relaxed);
  }
  std::__shared_mutex_base::unlock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_18IHTTPCacheProviderEEERDavE9singleton);
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 48))(v16);
  }
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_18IHTTPCacheProviderEEERDavE9singleton, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_18IHTTPCacheProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_18IHTTPCacheProviderEEERDavE9singleton);
    qword_1EB38CA48 = 0;
    qword_1EB38CA50 = 0;
    byte_1EB38CA58 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_18IHTTPCacheProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_18IHTTPCacheProviderEEERDavE9singleton);
  uint64_t v17 = (std::__shared_weak_count *)qword_1EB38CA50;
  qword_1EB38CA48 = 0;
  qword_1EB38CA50 = 0;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  byte_1EB38CA58 = 0;
  std::__shared_mutex_base::unlock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_18IHTTPCacheProviderEEERDavE9singleton);
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IAccountProviderEEERDavE9singleton, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IAccountProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_16IAccountProviderEEERDavE9singleton);
    qword_1EB38C0A8 = 0;
    qword_1EB38C0B0 = 0;
    byte_1EB38C0B8 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IAccountProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_16IAccountProviderEEERDavE9singleton);
  int v18 = (std::__shared_weak_count *)qword_1EB38C0B0;
  qword_1EB38C0A8 = 0;
  qword_1EB38C0B0 = 0;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  byte_1EB38C0B8 = 0;
  std::__shared_mutex_base::unlock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_16IAccountProviderEEERDavE9singleton);
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_17IAnisetteProviderEEERDavE9singleton, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_17IAnisetteProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_17IAnisetteProviderEEERDavE9singleton);
    xmmword_1EB38C988 = 0uLL;
    byte_1EB38C998 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_17IAnisetteProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_17IAnisetteProviderEEERDavE9singleton);
  uint64_t v19 = (std::__shared_weak_count *)*((void *)&xmmword_1EB38C988 + 1);
  xmmword_1EB38C988 = 0uLL;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  byte_1EB38C998 = 0;
  std::__shared_mutex_base::unlock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_17IAnisetteProviderEEERDavE9singleton);
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_13IDataProviderEEERDavE9singleton, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_13IDataProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_13IDataProviderEEERDavE9singleton);
    xmmword_1EB38C388 = 0uLL;
    byte_1EB38C398 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_13IDataProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_13IDataProviderEEERDavE9singleton);
  char v20 = (std::__shared_weak_count *)*((void *)&xmmword_1EB38C388 + 1);
  xmmword_1EB38C388 = 0uLL;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  byte_1EB38C398 = 0;
  std::__shared_mutex_base::unlock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_13IDataProviderEEERDavE9singleton);
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_11IDeviceInfoEEERDavE9singleton, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_11IDeviceInfoEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_11IDeviceInfoEEERDavE9singleton);
    xmmword_1EB38C168 = 0uLL;
    byte_1EB38C178 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_11IDeviceInfoEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_11IDeviceInfoEEERDavE9singleton);
  uint64_t v21 = (std::__shared_weak_count *)*((void *)&xmmword_1EB38C168 + 1);
  xmmword_1EB38C168 = 0uLL;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  byte_1EB38C178 = 0;
  std::__shared_mutex_base::unlock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_11IDeviceInfoEEERDavE9singleton);
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_15IKeybagProviderEEERDavE9singleton, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_15IKeybagProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_15IKeybagProviderEEERDavE9singleton);
    xmmword_1EB38C688 = 0uLL;
    byte_1EB38C698 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_15IKeybagProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_15IKeybagProviderEEERDavE9singleton);
  char v22 = (std::__shared_weak_count *)*((void *)&xmmword_1EB38C688 + 1);
  xmmword_1EB38C688 = 0uLL;
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  byte_1EB38C698 = 0;
  std::__shared_mutex_base::unlock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_15IKeybagProviderEEERDavE9singleton);
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_15IMescalProviderEEERDavE9singleton, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_15IMescalProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_15IMescalProviderEEERDavE9singleton);
    xmmword_1EB38C228 = 0uLL;
    byte_1EB38C238 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_15IMescalProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_15IMescalProviderEEERDavE9singleton);
  uint64_t v23 = (std::__shared_weak_count *)*((void *)&xmmword_1EB38C228 + 1);
  xmmword_1EB38C228 = 0uLL;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  byte_1EB38C238 = 0;
  std::__shared_mutex_base::unlock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_15IMescalProviderEEERDavE9singleton);
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_21IFairPlayCoreProviderEEERDavE9singleton, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_21IFairPlayCoreProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_21IFairPlayCoreProviderEEERDavE9singleton);
    xmmword_1EB38BA88 = 0uLL;
    byte_1EB38BA98 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_21IFairPlayCoreProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_21IFairPlayCoreProviderEEERDavE9singleton);
  char v24 = (std::__shared_weak_count *)*((void *)&xmmword_1EB38BA88 + 1);
  xmmword_1EB38BA88 = 0uLL;
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  byte_1EB38BA98 = 0;
  std::__shared_mutex_base::unlock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_21IFairPlayCoreProviderEEERDavE9singleton);
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_31IFairPlayDeviceIdentityProviderEEERDavE9singleton, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_31IFairPlayDeviceIdentityProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_31IFairPlayDeviceIdentityProviderEEERDavE9singleton);
    xmmword_1EB38BC30 = 0uLL;
    byte_1EB38BC40 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_31IFairPlayDeviceIdentityProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_31IFairPlayDeviceIdentityProviderEEERDavE9singleton);
  uint64_t v25 = (std::__shared_weak_count *)*((void *)&xmmword_1EB38BC30 + 1);
  xmmword_1EB38BC30 = 0uLL;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  byte_1EB38BC40 = 0;
  std::__shared_mutex_base::unlock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_31IFairPlayDeviceIdentityProviderEEERDavE9singleton);
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IMetricsProviderEEERDavE9singleton, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IMetricsProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_16IMetricsProviderEEERDavE9singleton);
    xmmword_1EB38C748 = 0uLL;
    byte_1EB38C758 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IMetricsProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_16IMetricsProviderEEERDavE9singleton);
  long long v26 = xmmword_1EB38C748;
  if (*((void *)&xmmword_1EB38C748 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1EB38C748 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  std::__shared_mutex_base::unlock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_16IMetricsProviderEEERDavE9singleton);
  if ((void)v26) {
    (*(void (**)(void))(*(void *)v26 + 56))(v26);
  }
  if (*((void *)&v26 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v26 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v26 + 1) + 16))(*((void *)&v26 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v26 + 1));
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IMetricsProviderEEERDavE9singleton, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IMetricsProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_16IMetricsProviderEEERDavE9singleton);
    xmmword_1EB38C748 = 0uLL;
    byte_1EB38C758 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IMetricsProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_16IMetricsProviderEEERDavE9singleton);
  uint64_t v27 = (std::__shared_weak_count *)*((void *)&xmmword_1EB38C748 + 1);
  xmmword_1EB38C748 = 0uLL;
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  byte_1EB38C758 = 0;
  std::__shared_mutex_base::unlock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_16IMetricsProviderEEERDavE9singleton);
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_25MetricsIdentifierProviderEEERDavE9singleton, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_25MetricsIdentifierProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_25MetricsIdentifierProviderEEERDavE9singleton);
    xmmword_1EB38CD48 = 0uLL;
    byte_1EB38CD58 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_25MetricsIdentifierProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_25MetricsIdentifierProviderEEERDavE9singleton);
  unint64_t v28 = (std::__shared_weak_count *)*((void *)&xmmword_1EB38CD48 + 1);
  xmmword_1EB38CD48 = 0uLL;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  byte_1EB38CD58 = 0;
  std::__shared_mutex_base::unlock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_25MetricsIdentifierProviderEEERDavE9singleton);
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_14StructuredData23IStructuredDataProviderEEERDavE9singleton, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_14StructuredData23IStructuredDataProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_14StructuredData23IStructuredDataProviderEEERDavE9singleton);
    xmmword_1EB38C5C8 = 0uLL;
    byte_1EB38C5D8 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_14StructuredData23IStructuredDataProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_14StructuredData23IStructuredDataProviderEEERDavE9singleton);
  uint64_t v29 = (std::__shared_weak_count *)*((void *)&xmmword_1EB38C5C8 + 1);
  xmmword_1EB38C5C8 = 0uLL;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  byte_1EB38C5D8 = 0;
  std::__shared_mutex_base::unlock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_14StructuredData23IStructuredDataProviderEEERDavE9singleton);
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_24IMetricsSamplingProviderEEERDavE9singleton, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_24IMetricsSamplingProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_24IMetricsSamplingProviderEEERDavE9singleton);
    xmmword_1EB38CC88 = 0uLL;
    byte_1EB38CC98 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_24IMetricsSamplingProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_24IMetricsSamplingProviderEEERDavE9singleton);
  uint64_t v30 = (std::__shared_weak_count *)*((void *)&xmmword_1EB38CC88 + 1);
  xmmword_1EB38CC88 = 0uLL;
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  byte_1EB38CC98 = 0;
  std::__shared_mutex_base::unlock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_24IMetricsSamplingProviderEEERDavE9singleton);
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IOpenURLProviderEEERDavE9singleton, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IOpenURLProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_16IOpenURLProviderEEERDavE9singleton);
    xmmword_1EB38C808 = 0uLL;
    byte_1EB38C818 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IOpenURLProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_16IOpenURLProviderEEERDavE9singleton);
  uint64_t v31 = (std::__shared_weak_count *)*((void *)&xmmword_1EB38C808 + 1);
  xmmword_1EB38C808 = 0uLL;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  byte_1EB38C818 = 0;
  std::__shared_mutex_base::unlock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_16IOpenURLProviderEEERDavE9singleton);
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IPrivacyProviderEEERDavE9singleton, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IPrivacyProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_16IPrivacyProviderEEERDavE9singleton);
    xmmword_1EB38C8C8 = 0uLL;
    byte_1EB38C8D8 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_16IPrivacyProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_16IPrivacyProviderEEERDavE9singleton);
  uint64_t v32 = (std::__shared_weak_count *)*((void *)&xmmword_1EB38C8C8 + 1);
  xmmword_1EB38C8C8 = 0uLL;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  byte_1EB38C8D8 = 0;
  std::__shared_mutex_base::unlock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_16IPrivacyProviderEEERDavE9singleton);
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_28ICancellationContextProviderEEERDavE9singleton, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_28ICancellationContextProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_28ICancellationContextProviderEEERDavE9singleton);
    xmmword_1EB38BFE0 = 0uLL;
    byte_1EB38BFF0 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_28ICancellationContextProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_28ICancellationContextProviderEEERDavE9singleton);
  uint64_t v33 = (std::__shared_weak_count *)*((void *)&xmmword_1EB38BFE0 + 1);
  xmmword_1EB38BFE0 = 0uLL;
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  byte_1EB38BFF0 = 0;
  std::__shared_mutex_base::unlock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_28ICancellationContextProviderEEERDavE9singleton);
  {
    qword_1EB38CF70 = 0;
    qword_1EB38CF68 = 0;
  }
  std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string,std::string,std::string>,std::shared_ptr<AMSCore::BagDataSource>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string,std::string,std::string>,std::shared_ptr<AMSCore::BagDataSource>>,std::less<std::tuple<std::string,std::string,std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string,std::string,std::string>,std::shared_ptr<AMSCore::BagDataSource>>>>::destroy((char *)qword_1EB38CF68);
  qword_1EB38CF70 = 0;
  qword_1EB38CF68 = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_14RandomProviderEEERDavE9singleton, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_14RandomProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_14RandomProviderEEERDavE9singleton);
    qword_1EB38C508 = 0;
    qword_1EB38C510 = 0;
    byte_1EB38C518 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_14RandomProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_14RandomProviderEEERDavE9singleton);
  uint64_t v34 = (std::__shared_weak_count *)qword_1EB38C510;
  qword_1EB38C508 = 0;
  qword_1EB38C510 = 0;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  byte_1EB38C518 = 0;
  std::__shared_mutex_base::unlock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_14RandomProviderEEERDavE9singleton);
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_5Trace6TracerEEERDavE9singleton, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_5Trace6TracerEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_5Trace6TracerEEERDavE9singleton);
    qword_1EB38CE08 = 0;
    qword_1EB38CE10 = 0;
    byte_1EB38CE18 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_5Trace6TracerEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_5Trace6TracerEEERDavE9singleton);
  uint64_t v35 = (std::__shared_weak_count *)qword_1EB38CE10;
  qword_1EB38CE08 = 0;
  qword_1EB38CE10 = 0;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  byte_1EB38CE18 = 0;
  std::__shared_mutex_base::unlock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_5Trace6TracerEEERDavE9singleton);
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_6LoggerEEERDavE9singleton, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_6LoggerEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_6LoggerEEERDavE9singleton);
    xmmword_1EB38CEC8 = 0uLL;
    byte_1EB38CED8 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_6LoggerEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_6LoggerEEERDavE9singleton);
  unint64_t v36 = (std::__shared_weak_count *)*((void *)&xmmword_1EB38CEC8 + 1);
  xmmword_1EB38CEC8 = 0uLL;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  byte_1EB38CED8 = 0;
  std::__shared_mutex_base::unlock(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_6LoggerEEERDavE9singleton);
}

void sub_18DA46A4C(void *a1)
{
}

uint64_t *std::expected<std::unique_ptr<AMSCore::RandomProvider>,AMSCore::Error>::~expected[abi:fe180100](uint64_t *a1)
{
  int v2 = *((unsigned __int8 *)a1 + 72);
  uint64_t v3 = *a1;
  if (v2)
  {
    *a1 = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  else
  {
    (*(void (**)(uint64_t *))v3)(a1);
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<AMSCore::RandomProvider  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN7AMSCore14RandomProviderEEE"
    || ((v3 & (unint64_t)"NSt3__114default_deleteIN7AMSCore14RandomProviderEEE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "NSt3__114default_deleteIN7AMSCore14RandomProviderEEE")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN7AMSCore14RandomProviderEEE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::RandomProvider  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::RandomProvider  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void AMSCore::RandomProvider::~RandomProvider(AMSCore::RandomProvider *this)
{
  *(void *)this = &unk_1EDC81CB0;
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  JUMPOUT(0x192FA4080);
}

{
  *(void *)this = &unk_1EDC81CB0;
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

void AMSCore::operator==(uint64_t a1, uint64_t a2)
{
  v18.__r_.__value_.__s.__data_[0] = 0;
  unsigned __int8 v19 = 0;
  if (!*(unsigned char *)(a1 + 24)) {
    return;
  }
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v18 = *(std::string *)a1;
  }
  unsigned __int8 v19 = 1;
  __p.__r_.__value_.__s.__data_[0] = 0;
  char v17 = 0;
  if (!*(unsigned char *)(a2 + 24))
  {
    int v3 = 1;
    goto LABEL_33;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    int v3 = v19;
    char v17 = 1;
    if (!v19)
    {
      __break(1u);
      return;
    }
  }
  else
  {
    std::string __p = *(std::string *)a2;
    int v3 = 1;
    char v17 = 1;
  }
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v18.__r_.__value_.__l.__size_;
  }
  std::string::size_type v5 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  int v6 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v5 = __p.__r_.__value_.__l.__size_;
  }
  if (size != v5)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((*((unsigned char *)&v18.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    memcmp(v18.__r_.__value_.__l.__data_, p_p, v18.__r_.__value_.__l.__size_);
    goto LABEL_31;
  }
  if (*((unsigned char *)&v18.__r_.__value_.__s + 23))
  {
    uint64_t v8 = HIBYTE(v18.__r_.__value_.__r.__words[2]) - 1;
    long long v9 = &v18;
    do
    {
      int v11 = v9->__r_.__value_.__s.__data_[0];
      long long v9 = (std::string *)((char *)v9 + 1);
      int v10 = v11;
      int v13 = p_p->__r_.__value_.__s.__data_[0];
      p_p = (std::string *)((char *)p_p + 1);
      int v12 = v13;
      BOOL v15 = v8-- != 0;
    }
    while (v10 == v12 && v15);
LABEL_31:
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_32:
    operator delete(__p.__r_.__value_.__l.__data_);
    int v3 = v19;
  }
LABEL_33:
  if (v3)
  {
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
  }
}

{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t vars8;

  unsigned int v4 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  std::string::size_type v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
  int v6 = v4[23];
  if ((v6 & 0x80u) == 0) {
    std::__cxx_contention_t v7 = v4[23];
  }
  else {
    std::__cxx_contention_t v7 = *((void *)v4 + 1);
  }
  uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  long long v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  if (v7 == v8)
  {
    if (v9 >= 0) {
      int v10 = (unsigned __int8 *)v5;
    }
    else {
      int v10 = *(unsigned __int8 **)v5;
    }
    if ((v6 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
        return;
      }
    }
    else
    {
      if (!v4[23]) {
        return;
      }
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6) {
          return;
        }
      }
    }
  }
  int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 72))(a2);
  AMSCore::operator==(v11, v12);
}

void sub_18DA4703C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 && a14 < 0) {
    operator delete(__p);
  }
  if (a22)
  {
    if (a21 < 0) {
      operator delete(a16);
    }
  }
  _Unwind_Resume(exception_object);
}

void *AMSCore::operator<<(void *a1, uint64_t a2)
{
  __p.__r_.__value_.__s.__data_[0] = 0;
  char v20 = 0;
  uint64_t v21 = -1;
  uint64_t v22 = 7824750;
  char v23 = 3;
  AMSCore::operator==(a2, (uint64_t)&__p);
  if (v4)
  {
    std::string::size_type v5 = "{AccountIdentity.new}";
    uint64_t v6 = 21;
    return std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)v5, v6);
  }
  __p.__r_.__value_.__s.__data_[0] = 0;
  char v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0x6C61636F6CLL;
  char v23 = 5;
  AMSCore::operator==(a2, (uint64_t)&__p);
  if (v7)
  {
    std::string::size_type v5 = "{AccountIdentity.local}";
    uint64_t v6 = 23;
    return std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)v5, v6);
  }
  __p.__r_.__value_.__s.__data_[0] = 123;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
  uint64_t v8 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)"\"altDSID: \"", 11);
  long long v9 = v8;
  if (!*(unsigned char *)(a2 + 24))
  {
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)"nullopt", 7);
    goto LABEL_27;
  }
  uint64_t v10 = *(void *)(*v8 - 24);
  {
    if (*(unsigned char *)(a2 + 24))
    {
      AMSCore::StringUtils::toHashedString<std::string>(&__p, a2);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v9, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_27;
    }
LABEL_29:
    __break(1u);
LABEL_30:
    {
    }
  }
  if (!*(unsigned char *)(a2 + 24)) {
    goto LABEL_29;
  }
  int v13 = *(char *)(a2 + 23);
  if (v13 >= 0) {
    uint64_t v14 = a2;
  }
  else {
    uint64_t v14 = *(void *)a2;
  }
  if (v13 >= 0) {
    uint64_t v15 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v15 = *(void *)(a2 + 8);
  }
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v9, v14, v15);
LABEL_27:
  uint64_t v16 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)"\", \"DSID\": \"", 12);
  AMSCore::Log::operator<<(v16, (uint64_t *)(a2 + 32));
  char v17 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)"\", \"username\": \"", 16);
  AMSCore::Log::operator<<(v17, a2 + 40);
  __p.__r_.__value_.__s.__data_[0] = 34;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
  __p.__r_.__value_.__s.__data_[0] = 125;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
  return a1;
}

{
  void *v3;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;

  int v3 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)"{", 1);
  char v4 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v3, (uint64_t)"\"identifier\": ", 14);
  std::string::size_type v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
  uint64_t v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    int v7 = v5;
  }
  else {
    int v7 = *(void *)v5;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 8);
  }
  long long v9 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v4, v7, v8);
  uint64_t v10 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v9, (uint64_t)", \"identity\": ", 14);
  int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 72))(a2);
  int v12 = AMSCore::operator<<(v10, v11);
  return std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v12, (uint64_t)"}", 1);
}

{
  uint64_t v4;
  uint64_t *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  size_t v10;
  void *v11;
  size_t v12;
  void *v13;

  if (*(void *)(a2 + 8))
  {
    char v4 = 0;
    std::string::size_type v5 = *(uint64_t **)a2;
    uint64_t v6 = "";
    do
    {
      uint64_t v10 = strlen(v6);
      int v11 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)v6, v10);
      int v12 = strlen(*(const char **)(a2 + 32));
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v11, *(void *)(a2 + 32), v12);
      if (*(unsigned char *)(a2 + 48))
      {
        int v13 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v13, (uint64_t)"_", 1);
      }
      int v7 = *v5;
      uint64_t v8 = v5[1];
      v5 += 3;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, v7, v8);
      long long v9 = strlen(*(const char **)(a2 + 40));
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, *(void *)(a2 + 40), v9);
      uint64_t v6 = *(const char **)(a2 + 24);
      ++v4;
    }
    while (v5 != (uint64_t *)(*(void *)a2 + 24 * *(void *)(a2 + 8)));
  }
  return a1;
}

{
  void *v4;
  void *v5;
  char v7;
  char v8;

  int v7 = 123;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&v7, 1);
  char v4 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)"\"url\": ", 7);
  std::string::size_type v5 = AMSCore::operator<<(v4, a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v5, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)"\"inferDestination\": ", 20);
  std::ostream::operator<<();
  uint64_t v8 = 125;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&v8, 1);
  return a1;
}

{
  void *v4;
  const char *v5;
  size_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  char *v15;
  char v16;
  char v17;
  char v18;

  char v4 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)"{\"category\":\"", 13);
  std::string::size_type v5 = (const char *)(*(uint64_t (**)(void))(**(void **)(a2 + 24) + 16))(*(void *)(a2 + 24));
  uint64_t v6 = strlen(v5);
  int v7 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  uint64_t v16 = 34;
  uint64_t v8 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v7, (uint64_t)&v16, 1);
  char v17 = 44;
  long long v9 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)&v17, 1);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v9, (uint64_t)"\"Code\":", 7);
  std::ostream::operator<<();
  if (*(void *)(a2 + 48))
  {
    uint64_t v10 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)", \"UserInfo\": ", 14);
  }
  int v11 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)", \"message\": \"", 14);
  uint64_t v15 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  int v12 = AMSCore::Log::operator<<(v11, &v15);
  std::string v18 = 34;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v12, (uint64_t)&v18, 1);
  if (*(void *)(a2 + 56))
  {
    int v13 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)", \"cause\": ", 11);
    AMSCore::operator<<(v13, *(void *)(a2 + 56));
  }
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)"}", 1);
  return a1;
}

{
  void *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void **v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *__p[2];
  unsigned __int8 v30;

  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)"{", 1);
  char v4 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)"\"name\": \"", 9);
  std::string::size_type v5 = *(char *)(a2 + 71);
  if (v5 >= 0) {
    uint64_t v6 = a2 + 48;
  }
  else {
    uint64_t v6 = *(void *)(a2 + 48);
  }
  if (v5 >= 0) {
    int v7 = *(unsigned __int8 *)(a2 + 71);
  }
  else {
    int v7 = *(void *)(a2 + 56);
  }
  uint64_t v8 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v4, v6, v7);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)"\",", 2);
  long long v9 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)"\"value\": \"", 10);
  uint64_t v10 = AMSCore::Log::operator<<(v9, a2 + 96);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v10, (uint64_t)"\",", 2);
  int v11 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)"\"domain\": \"", 11);
  int v12 = *(char *)(a2 + 39);
  if (v12 >= 0) {
    int v13 = a2 + 16;
  }
  else {
    int v13 = *(void *)(a2 + 16);
  }
  if (v12 >= 0) {
    uint64_t v14 = *(unsigned __int8 *)(a2 + 39);
  }
  else {
    uint64_t v14 = *(void *)(a2 + 24);
  }
  uint64_t v15 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v11, v13, v14);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v15, (uint64_t)"\",", 2);
  uint64_t v16 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)"\"path\": \"", 9);
  char v17 = *(char *)(a2 + 95);
  if (v17 >= 0) {
    std::string v18 = a2 + 72;
  }
  else {
    std::string v18 = *(void *)(a2 + 72);
  }
  if (v17 >= 0) {
    unsigned __int8 v19 = *(unsigned __int8 *)(a2 + 95);
  }
  else {
    unsigned __int8 v19 = *(void *)(a2 + 80);
  }
  char v20 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v16, v18, v19);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v20, (uint64_t)"\",", 2);
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v21 = *(void *)a2;
    uint64_t v22 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)"\"expiration\": \"", 15);
    AMSCore::stringify_time_s((uint64_t)__p, v21, 0);
    if ((v30 & 0x80u) == 0) {
      char v23 = __p;
    }
    else {
      char v23 = (void **)__p[0];
    }
    if ((v30 & 0x80u) == 0) {
      char v24 = v30;
    }
    else {
      char v24 = (uint64_t)__p[1];
    }
    uint64_t v25 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v25, (uint64_t)"\",", 2);
    if ((char)v30 < 0) {
      operator delete(__p[0]);
    }
  }
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)"\"isSecureOnly\": ", 16);
  long long v26 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v26, (uint64_t)",", 1);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)"\"isSessionOnly\": ", 17);
  uint64_t v27 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v27, (uint64_t)",", 1);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)"}", 1);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _OWORD *v18;
  std::string *v19;
  std::string::size_type v20;
  void *v21;
  unsigned __int8 v22;
  std::string::const_iterator v23;
  std::string *v24;
  int v25;
  std::string *p_p;
  std::string::size_type size;
  void *v28;
  std::string v30;
  std::string __p;

  char v4 = *(void *)(*a1 - 24);
  {
  }
  __p.__r_.__value_.__s.__data_[0] = 91;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
  uint64_t v6 = *(uint64_t **)(a2 + 16);
  if (v6)
  {
    int v7 = 0;
    while (1)
    {
      if (v7)
      {
        __p.__r_.__value_.__s.__data_[0] = 44;
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
      }
      __p.__r_.__value_.__s.__data_[0] = 123;
      uint64_t v8 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
      long long v9 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)"\"name\":", 7);
      __p.__r_.__value_.__s.__data_[0] = 34;
      uint64_t v10 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v9, (uint64_t)&__p, 1);
      int v11 = *((char *)v6 + 39);
      int v12 = v11 >= 0 ? (uint64_t)(v6 + 2) : v6[2];
      int v13 = v11 >= 0 ? *((unsigned __int8 *)v6 + 39) : v6[3];
      uint64_t v14 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v10, v12, v13);
      __p.__r_.__value_.__s.__data_[0] = 34;
      uint64_t v15 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v14, (uint64_t)&__p, 1);
      __p.__r_.__value_.__s.__data_[0] = 44;
      uint64_t v16 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v15, (uint64_t)&__p, 1);
      char v17 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v16, (uint64_t)"\"value\":", 8);
      __p.__r_.__value_.__s.__data_[0] = 34;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v17, (uint64_t)&__p, 1);
      std::string v18 = v6 + 5;
      if (v5 == 1) {
        break;
      }
      if (*((char *)v6 + 63) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, (const std::string::value_type *)v6[5], v6[6]);
      }
      else
      {
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *v18;
        v30.__r_.__value_.__r.__words[2] = v6[7];
      }
      uint64_t v22 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v30.__r_.__value_.__l.__size_)
        {
          for (v23.__i_ = (std::__wrap_iter<const char *>::iterator_type)v30.__r_.__value_.__r.__words[0]; ; ++v23.__i_)
          {
LABEL_31:
            if ((v22 & 0x80) != 0)
            {
              char v24 = (std::string *)v30.__r_.__value_.__r.__words[0];
              if (v23.__i_ == (std::__wrap_iter<const char *>::iterator_type)(v30.__r_.__value_.__r.__words[0]
                                                                             + v30.__r_.__value_.__l.__size_))
                break;
            }
            else
            {
              char v24 = &v30;
              if (v23.__i_ == (char *)&v30 + v22) {
                break;
              }
            }
            if ((std::string *)v23.__i_ == v24 || *((unsigned char *)v23.__i_ - 1) != 92)
            {
              uint64_t v25 = *v23.__i_;
              if (v25 == 92 || v25 == 34)
              {
                v23.__i_ = std::string::insert(&v30, v23, 92).__i_ + 1;
                uint64_t v22 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
              }
            }
          }
        }
      }
      else if (*((unsigned char *)&v30.__r_.__value_.__s + 23))
      {
        v23.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v30;
        goto LABEL_31;
      }
      std::string __p = v30;
      memset(&v30, 0, sizeof(v30));
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_50:
          uint64_t v21 = (void *)v30.__r_.__value_.__r.__words[0];
LABEL_51:
          operator delete(v21);
        }
      }
      else if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_50;
      }
LABEL_52:
      __p.__r_.__value_.__s.__data_[0] = 34;
      unint64_t v28 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
      __p.__r_.__value_.__s.__data_[0] = 125;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v28, (uint64_t)&__p, 1);
      ++v7;
      uint64_t v6 = (uint64_t *)*v6;
      if (!v6) {
        goto LABEL_53;
      }
    }
    AMSCore::StringUtils::toHashedString<std::string>(&__p, (uint64_t)v18);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned __int8 v19 = &__p;
    }
    else {
      unsigned __int8 v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      char v20 = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)v19, v20);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_52;
    }
    uint64_t v21 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_51;
  }
LABEL_53:
  __p.__r_.__value_.__s.__data_[0] = 93;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
  return a1;
}

{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;

  uint64_t v6 = *(unsigned __int8 *)(a2 + 151);
  int v7 = *(void *)(a2 + 136);
  if ((v6 & 0x80u) == 0) {
    uint64_t v8 = a2 + 128;
  }
  else {
    uint64_t v8 = *(void *)(a2 + 128);
  }
  if ((v6 & 0x80u) == 0) {
    long long v9 = v6;
  }
  else {
    long long v9 = v7;
  }
  uint64_t v10 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, v8, v9);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v10, (uint64_t)"://", 3);
  if (*(unsigned char *)(a2 + 56))
  {
    int v11 = *(char *)(a2 + 55);
    if (v11 >= 0) {
      int v12 = a2 + 32;
    }
    else {
      int v12 = *(void *)(a2 + 32);
    }
    if (v11 >= 0) {
      int v13 = *(unsigned __int8 *)(a2 + 55);
    }
    else {
      int v13 = *(void *)(a2 + 40);
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, v12, v13);
  }
  if (*(unsigned char *)(a2 + 98))
  {
    long long v26 = 58;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&v26, 1);
    if (!*(unsigned char *)(a2 + 98)) {
      goto LABEL_50;
    }
    std::ostream::operator<<();
  }
  int v2 = *(unsigned __int8 **)(*a1 - 24);
  int v3 = (unsigned __int8 *)&unk_1EB38B000;
  while (*std::ios_base::iword((std::ios_base *)&v2[(void)a1], *((_DWORD *)v3 + 562)) != 1)
  {
    if (*(unsigned char *)(a2 + 88))
    {
      uint64_t v14 = *(char *)(a2 + 87);
      if (v14 >= 0) {
        uint64_t v15 = a2 + 64;
      }
      else {
        uint64_t v15 = *(void *)(a2 + 64);
      }
      if (v14 >= 0) {
        uint64_t v16 = *(unsigned __int8 *)(a2 + 87);
      }
      else {
        uint64_t v16 = *(void *)(a2 + 72);
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, v15, v16);
    }
    if (*(void *)(a2 + 120))
    {
      uint64_t v27 = 63;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&v27, 1);
      int v2 = (unsigned __int8 *)(a2 + 104);
      int v3 = *(unsigned __int8 **)(a2 + 112);
      if (v3 != (unsigned __int8 *)(a2 + 104))
      {
        char v17 = 1;
        do
        {
          if ((char)v3[39] < 0)
          {
            std::string v18 = *((void *)v3 + 2);
            unsigned __int8 v19 = *((void *)v3 + 3);
          }
          else
          {
            std::string v18 = (uint64_t)(v3 + 16);
            unsigned __int8 v19 = v3[39];
          }
          AMSCore::URL::encode(a1, v18, v19);
          unint64_t v28 = 61;
          std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&v28, 1);
          if ((char)v3[63] < 0)
          {
            char v20 = *((void *)v3 + 5);
            uint64_t v21 = *((void *)v3 + 6);
          }
          else
          {
            char v20 = (uint64_t)(v3 + 40);
            uint64_t v21 = v3[63];
          }
          AMSCore::URL::encode(a1, v20, v21);
          if (v17 != *(void *)(a2 + 120))
          {
            uint64_t v29 = 38;
            std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&v29, 1);
          }
          int v3 = (unsigned __int8 *)*((void *)v3 + 1);
          ++v17;
        }
        while (v3 != v2);
      }
    }
    if (!*(unsigned char *)(a2 + 24)) {
      break;
    }
    uint64_t v30 = 35;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&v30, 1);
    if (*(unsigned char *)(a2 + 24))
    {
      uint64_t v22 = *(char *)(a2 + 23);
      if (v22 >= 0) {
        char v23 = a2;
      }
      else {
        char v23 = *(void *)a2;
      }
      if (v22 >= 0) {
        char v24 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        char v24 = *(void *)(a2 + 8);
      }
      AMSCore::URL::encode(a1, v23, v24);
      return a1;
    }
LABEL_50:
    __break(1u);
LABEL_51:
    {
      *((_DWORD *)v3 + 562) = std::ios_base::xalloc();
    }
  }
  return a1;
}

uint64_t AMSCore::Log::operator<<(void *a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(*a1 - 24);
  {
  }
  uint64_t v18 = *a2;
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v14);
  std::string::size_type v5 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v14, (uint64_t)"<H:", 3);
  AMSCore::StringUtils::toHexString(&__p, (uint64_t)&v18, 8);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v8 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, size);
  char v19 = 62;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)&v19, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::stringbuf::str[abi:fe180100]((uint64_t)v15, &__p);
  uint64_t v14 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v15[-1] + *(void *)(v14 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v15[0] = MEMORY[0x1E4FBA470] + 16;
  if (v16 < 0) {
    operator delete((void *)v15[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FA3FD0](&v17);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v9 = &__p;
  }
  else {
    long long v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v10 = __p.__r_.__value_.__l.__size_;
  }
  int v11 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)v9, v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return (uint64_t)v11;
}

void sub_18DA47554(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void *AMSCore::Log::operator<<(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*a1 - 24);
  {
  }
  {
    AMSCore::StringUtils::toHashedString<std::string>(&__p, a2);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    int v7 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    int v8 = *(char *)(a2 + 23);
    if (v8 >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *(void *)a2;
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    return std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, v9, v10);
  }
  return v7;
}

uint64_t AMSCore::StringUtils::toHashedString<std::string>(std::string *a1, uint64_t a2)
{
  int v3 = *(char *)(a2 + 23);
  if (v3 >= 0) {
    uint64_t v4 = (uint64_t *)a2;
  }
  else {
    uint64_t v4 = *(uint64_t **)a2;
  }
  if (v3 >= 0) {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v5 = *(void *)(a2 + 8);
  }
  unint64_t v16 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:fe180100](v4, v5);
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v12);
  uint64_t v6 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v12, (uint64_t)"<H:", 3);
  AMSCore::StringUtils::toHexString(&__p, (uint64_t)&v16, 8);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v9 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v6, (uint64_t)p_p, size);
  char v17 = 62;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v9, (uint64_t)&v17, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::stringbuf::str[abi:fe180100]((uint64_t)v13, a1);
  uint64_t v12 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v13[-1] + *(void *)(v12 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v13[0] = MEMORY[0x1E4FBA470] + 16;
  if (v14 < 0) {
    operator delete((void *)v13[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FA3FD0](&v15);
}

void sub_18DA47850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void AMSCore::AccountProperties::takeModifiedProperties(AMSCore::AccountProperties *this@<X0>, uint64_t **a2@<X8>)
{
  a2[1] = 0;
  a2[2] = 0;
  unsigned int v55 = (char **)(a2 + 1);
  *a2 = (uint64_t *)(a2 + 1);
  unint64_t v5 = (void *)*((void *)this + 3);
  uint64_t v4 = (char *)this + 24;
  int v8 = (void *)*((void *)this + 1);
  uint64_t v6 = (void *)((char *)this + 8);
  int v7 = v8;
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)unsigned int v57 = 0u;
  int v58 = 1065353216;
  unint64_t v9 = *((void *)v4 - 1);
  *((void *)v4 - 1) = 0;
  *uint64_t v6 = 0;
  uint64_t v59 = v8;
  unint64_t v60 = v9;
  uint64_t v10 = (void *)*((void *)v4 + 1);
  v61[0] = v5;
  v61[1] = v10;
  int v62 = *((_DWORD *)v4 + 4);
  if (v10)
  {
    unint64_t v11 = v5[1];
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v11 >= v9) {
        v11 %= v9;
      }
    }
    else
    {
      v11 &= v9 - 1;
    }
    v7[v11] = v61;
    *(void *)uint64_t v4 = 0;
    *((void *)v4 + 1) = 0;
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign((uint64_t)v6, (uint64_t *)__p);
  uint64_t v12 = (void **)v57[0];
  if (v57[0])
  {
    do
    {
      uint64_t v15 = (void **)*v12;
      if (*((char *)v12 + 39) < 0) {
        operator delete(v12[2]);
      }
      operator delete(v12);
      uint64_t v12 = v15;
    }
    while (v15);
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  int v13 = v61[0];
  if (v61[0])
  {
    char v14 = (void *)((char *)this + 56);
    uint64_t v54 = (char *)this + 56;
    while (1)
    {
      size_t v16 = *((unsigned __int8 *)v13 + 39);
      if (*((char *)v13 + 39) < 0)
      {
        char v17 = (const void *)v13[2];
        size_t v18 = v13[3];
        char v19 = (uint64_t *)*v14;
        if (!*v14) {
          goto LABEL_49;
        }
      }
      else
      {
        char v17 = v13 + 2;
        size_t v18 = *((unsigned __int8 *)v13 + 39);
        char v19 = (uint64_t *)*v14;
        if (!*v14)
        {
LABEL_49:
          uint64_t v31 = &AMSCore::Any::Null(void)::null;
          goto LABEL_52;
        }
      }
      char v20 = v14;
      do
      {
        while (1)
        {
          int v21 = *((char *)v19 + 55);
          uint64_t v22 = v21 >= 0 ? v19 + 4 : (uint64_t *)v19[4];
          size_t v23 = v21 >= 0 ? *((unsigned __int8 *)v19 + 55) : v19[5];
          size_t v24 = v23 >= v18 ? v18 : v23;
          int v25 = memcmp(v17, v22, v24);
          if (v25) {
            break;
          }
          if (v18 <= v23) {
            goto LABEL_36;
          }
LABEL_22:
          char v19 = (uint64_t *)v19[1];
          if (!v19) {
            goto LABEL_37;
          }
        }
        if ((v25 & 0x80000000) == 0) {
          goto LABEL_22;
        }
LABEL_36:
        char v20 = v19;
        char v19 = (uint64_t *)*v19;
      }
      while (v19);
LABEL_37:
      if (v20 == v14) {
        goto LABEL_49;
      }
      int v26 = *((char *)v20 + 55);
      if (v26 >= 0) {
        uint64_t v27 = v20 + 4;
      }
      else {
        uint64_t v27 = (const void *)v20[4];
      }
      if (v26 >= 0) {
        size_t v28 = *((unsigned __int8 *)v20 + 55);
      }
      else {
        size_t v28 = v20[5];
      }
      if (v28 >= v18) {
        size_t v29 = v18;
      }
      else {
        size_t v29 = v28;
      }
      int v30 = memcmp(v17, v27, v29);
      if (v30)
      {
        if (v30 < 0) {
          goto LABEL_49;
        }
LABEL_51:
        uint64_t v31 = v20 + 7;
      }
      else
      {
        uint64_t v31 = &AMSCore::Any::Null(void)::null;
        if (v18 >= v28) {
          goto LABEL_51;
        }
      }
LABEL_52:
      uint64_t v32 = v55;
      uint64_t v33 = *v55;
      uint64_t v34 = v55;
      if (*v55)
      {
        if ((v16 & 0x80u) == 0) {
          uint64_t v35 = v13 + 2;
        }
        else {
          uint64_t v35 = (const void *)v13[2];
        }
        if ((v16 & 0x80u) == 0) {
          size_t v36 = v16;
        }
        else {
          size_t v36 = v13[3];
        }
        while (1)
        {
          uint64_t v32 = (char **)v33;
          uint64_t v39 = (const void *)*((void *)v33 + 4);
          uint64_t v37 = v33 + 32;
          unint64_t v38 = v39;
          int v40 = *((char *)v37 + 23);
          if (v40 >= 0) {
            uint64_t v41 = v37;
          }
          else {
            uint64_t v41 = v38;
          }
          if (v40 >= 0) {
            size_t v42 = *((unsigned __int8 *)v37 + 23);
          }
          else {
            size_t v42 = v37[1];
          }
          if (v42 >= v36) {
            size_t v43 = v36;
          }
          else {
            size_t v43 = v42;
          }
          int v44 = memcmp(v35, v41, v43);
          if (v44)
          {
            if (v44 < 0) {
              goto LABEL_59;
            }
LABEL_73:
            int v45 = memcmp(v41, v35, v43);
            if (v45)
            {
              if ((v45 & 0x80000000) == 0) {
                goto LABEL_16;
              }
            }
            else if (v42 >= v36)
            {
              goto LABEL_16;
            }
            uint64_t v33 = v32[1];
            if (!v33)
            {
              uint64_t v34 = v32 + 1;
              break;
            }
          }
          else
          {
            if (v36 >= v42) {
              goto LABEL_73;
            }
LABEL_59:
            uint64_t v33 = *v32;
            uint64_t v34 = v32;
            if (!*v32) {
              break;
            }
          }
        }
      }
      unsigned int v46 = (char *)operator new(0x58uLL);
      uint64_t v47 = v46;
      if (*((char *)v13 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v46 + 32), (const std::string::value_type *)v13[2], v13[3]);
      }
      else
      {
        long long v48 = *((_OWORD *)v13 + 1);
        *((void *)v46 + 6) = v13[4];
        *((_OWORD *)v46 + 2) = v48;
      }
      v47[56] = 0;
      *((_DWORD *)v47 + 20) = -1;
      uint64_t v49 = *((unsigned int *)v31 + 6);
      if (v49 != -1)
      {
        ((void (*)(char *, char *, uint64_t *))off_1EDCA4D90[v49])(&v63, v47 + 56, v31);
        *((_DWORD *)v47 + 20) = v49;
      }
      *(void *)uint64_t v47 = 0;
      *((void *)v47 + 1) = 0;
      *((void *)v47 + 2) = v32;
      *uint64_t v34 = v47;
      unint64_t v50 = (uint64_t *)**a2;
      if (v50)
      {
        *a2 = v50;
        uint64_t v47 = *v34;
      }
      std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a2[1], (uint64_t *)v47);
      a2[2] = (uint64_t *)((char *)a2[2] + 1);
LABEL_16:
      int v13 = (void *)*v13;
      char v14 = v54;
      if (!v13)
      {
        unint64_t v51 = (void **)v61[0];
        if (v61[0])
        {
          do
          {
            char v53 = (void **)*v51;
            if (*((char *)v51 + 39) < 0) {
              operator delete(v51[2]);
            }
            operator delete(v51);
            unint64_t v51 = v53;
          }
          while (v53);
        }
        break;
      }
    }
  }
  unint64_t v52 = v59;
  uint64_t v59 = 0;
  if (v52) {
    operator delete(v52);
  }
}

void sub_18DA47C54(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  operator delete(v11);
  __clang_call_terminate(a1);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v4 = *(void ***)(a1 + 16);
    if (v4)
    {
      do
      {
        size_t v16 = (void **)*v4;
        if (*((char *)v4 + 39) < 0) {
          operator delete(v4[2]);
        }
        operator delete(v4);
        uint64_t v4 = v16;
      }
      while (v16);
    }
    *(void *)(a1 + 16) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v7 = *a2;
  *a2 = 0;
  int v8 = *(void **)a1;
  *(void *)a1 = v7;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v11 = a2[2];
  uint64_t v10 = a2 + 2;
  uint64_t v9 = v11;
  uint64_t v12 = *(v10 - 1);
  *(void *)(a1 + 16) = v11;
  *(void *)(a1 + 8) = v12;
  *(v10 - 1) = 0;
  uint64_t v13 = v10[1];
  *(void *)(a1 + 24) = v13;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v10 + 4);
  if (v13)
  {
    unint64_t v14 = *(void *)(v9 + 8);
    unint64_t v15 = *(void *)(a1 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15) {
        v14 %= v15;
      }
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v14) = a1 + 16;
    *uint64_t v10 = 0;
    v10[1] = 0;
  }
}

uint64_t *std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(uint64_t a1, const void **a2)
{
  int v2 = (uint64_t *)(a1 + 8);
  int v3 = *(uint64_t **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  uint64_t v7 = (uint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      int v8 = *((char *)v3 + 55);
      uint64_t v9 = v8 >= 0 ? v3 + 4 : (uint64_t *)v3[4];
      size_t v10 = v8 >= 0 ? *((unsigned __int8 *)v3 + 55) : v3[5];
      size_t v11 = v6 >= v10 ? v10 : v6;
      int v12 = memcmp(v9, v5, v11);
      if (v12) {
        break;
      }
      if (v10 >= v6) {
        goto LABEL_23;
      }
LABEL_9:
      int v3 = (uint64_t *)v3[1];
      if (!v3) {
        goto LABEL_24;
      }
    }
    if (v12 < 0) {
      goto LABEL_9;
    }
LABEL_23:
    uint64_t v7 = v3;
    int v3 = (uint64_t *)*v3;
  }
  while (v3);
LABEL_24:
  if (v7 == v2) {
    return v2;
  }
  int v13 = *((char *)v7 + 55);
  if (v13 >= 0) {
    unint64_t v14 = v7 + 4;
  }
  else {
    unint64_t v14 = (const void *)v7[4];
  }
  if (v13 >= 0) {
    size_t v15 = *((unsigned __int8 *)v7 + 55);
  }
  else {
    size_t v15 = v7[5];
  }
  if (v15 >= v6) {
    size_t v16 = v6;
  }
  else {
    size_t v16 = v15;
  }
  int v17 = memcmp(v5, v14, v16);
  if (!v17)
  {
    if (v6 >= v15) {
      return v7;
    }
    return v2;
  }
  if (v17 < 0) {
    return v2;
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase(void *a1, uint64_t a2)
{
  int v3 = *(void **)(a2 + 8);
  if (v3)
  {
    do
    {
      int v4 = v3;
      int v3 = (void *)*v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v5 = (void *)a2;
    do
    {
      int v4 = (void *)v5[2];
      BOOL v6 = *v4 == (void)v5;
      uint64_t v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2) {
    *a1 = v4;
  }
  uint64_t v7 = (uint64_t *)a1[1];
  --a1[2];
  std::__tree_remove[abi:fe180100]<std::__tree_node_base<void *> *>(v7, (uint64_t *)a2);
  uint64_t v8 = *(unsigned int *)(a2 + 80);
  if (v8 != -1) {
    ((void (*)(char *, uint64_t))off_1EDCA4D40[v8])(&v9, a2 + 56);
  }
  *(_DWORD *)(a2 + 80) = -1;
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  operator delete((void *)a2);
}

uint64_t *std::__tree_remove[abi:fe180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  int v3 = a2;
  if (*a2)
  {
    int v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      int v3 = a2;
      goto LABEL_7;
    }
    do
    {
      int v3 = v4;
      int v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  BOOL v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    *BOOL v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      uint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *int v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    unint64_t v14 = (uint64_t **)v7[2];
    if (*v14 != v7) {
      break;
    }
    if (*((unsigned char *)v7 + 24))
    {
      size_t v16 = (void *)*v7;
      if (*v7) {
        goto LABEL_50;
      }
    }
    else
    {
      *((unsigned char *)v7 + 24) = 1;
      *((unsigned char *)v14 + 24) = 0;
      char v20 = (uint64_t *)v7[1];
      *unint64_t v14 = v20;
      if (v20) {
        v20[2] = (uint64_t)v14;
      }
      v7[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (void)v14] = (uint64_t)v7;
      v7[1] = (uint64_t)v14;
      v14[2] = v7;
      if (result == (uint64_t *)v14) {
        uint64_t result = v7;
      }
      uint64_t v7 = *v14;
      size_t v16 = (void *)**v14;
      if (v16)
      {
LABEL_50:
        if (!*((unsigned char *)v16 + 24)) {
          goto LABEL_71;
        }
      }
    }
    int v21 = (uint64_t *)v7[1];
    if (v21 && !*((unsigned char *)v21 + 24))
    {
      if (v16 && !*((unsigned char *)v16 + 24))
      {
LABEL_71:
        int v21 = v7;
      }
      else
      {
        *((unsigned char *)v21 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = *v21;
        v7[1] = *v21;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v21[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v21;
        *int v21 = (uint64_t)v7;
        v7[2] = (uint64_t)v21;
        size_t v16 = v7;
      }
      uint64_t v27 = (uint64_t *)v21[2];
      *((unsigned char *)v21 + 24) = *((unsigned char *)v27 + 24);
      *((unsigned char *)v27 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      uint64_t v28 = *v27;
      uint64_t v29 = *(void *)(*v27 + 8);
      *uint64_t v27 = v29;
      if (v29) {
        *(void *)(v29 + 16) = v27;
      }
      *(void *)(v28 + 16) = v27[2];
      *(void *)(v27[2] + 8 * (*(void *)v27[2] != (void)v27)) = v28;
      *(void *)(v28 + 8) = v27;
      v27[2] = v28;
      return result;
    }
    *((unsigned char *)v7 + 24) = 0;
    int v12 = (uint64_t *)v7[2];
    if (*((unsigned char *)v12 + 24)) {
      BOOL v13 = v12 == result;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13) {
      goto LABEL_61;
    }
LABEL_26:
    uint64_t v7 = *(uint64_t **)(v12[2] + 8 * (*(void *)v12[2] == (void)v12));
  }
  if (*((unsigned char *)v7 + 24))
  {
    size_t v15 = (void *)*v7;
    if (!*v7)
    {
LABEL_40:
      char v19 = (uint64_t *)v7[1];
      if (v19 && !*((unsigned char *)v19 + 24)) {
        goto LABEL_67;
      }
      *((unsigned char *)v7 + 24) = 0;
      int v12 = (uint64_t *)v7[2];
      if (v12 == result)
      {
        int v12 = result;
LABEL_61:
        *((unsigned char *)v12 + 24) = 1;
        return result;
      }
      if (!*((unsigned char *)v12 + 24)) {
        goto LABEL_61;
      }
      goto LABEL_26;
    }
  }
  else
  {
    *((unsigned char *)v7 + 24) = 1;
    *((unsigned char *)v14 + 24) = 0;
    int v17 = v14[1];
    size_t v18 = (uint64_t *)*v17;
    v14[1] = (uint64_t *)*v17;
    if (v18) {
      v18[2] = (uint64_t)v14;
    }
    v17[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (void)v14] = (uint64_t)v17;
    *int v17 = (uint64_t)v14;
    v14[2] = v17;
    if (result == (uint64_t *)*v7) {
      uint64_t result = v7;
    }
    uint64_t v7 = *(uint64_t **)(*v7 + 8);
    size_t v15 = (void *)*v7;
    if (!*v7) {
      goto LABEL_40;
    }
  }
  if (*((unsigned char *)v15 + 24)) {
    goto LABEL_40;
  }
  char v19 = (uint64_t *)v7[1];
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_67:
    size_t v15 = v7;
  }
  else
  {
    *((unsigned char *)v15 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v23 = v15[1];
    *uint64_t v7 = v23;
    if (v23) {
      *(void *)(v23 + 16) = v7;
    }
    v15[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    char v19 = v7;
  }
  uint64_t v24 = v15[2];
  *((unsigned char *)v15 + 24) = *(unsigned char *)(v24 + 24);
  *(unsigned char *)(v24 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  int v25 = *(uint64_t **)(v24 + 8);
  uint64_t v26 = *v25;
  *(void *)(v24 + 8) = *v25;
  if (v26) {
    *(void *)(v26 + 16) = v24;
  }
  v25[2] = *(void *)(v24 + 16);
  *(void *)(*(void *)(v24 + 16) + 8 * (**(void **)(v24 + 16) != v24)) = v25;
  *int v25 = v24;
  *(void *)(v24 + 16) = v25;
  return result;
}

void AMSCore::AccountProperties::setValues(void *a1, void *a2)
{
  int v4 = a1 + 7;
  int v5 = a1 + 6;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)(a1 + 6), (unsigned int *)a1[7]);
  *(v4 - 1) = *a2;
  BOOL v6 = a2 + 1;
  uint64_t v7 = a2[1];
  *int v4 = v7;
  uint64_t v8 = a2[2];
  v4[1] = v8;
  if (v8)
  {
    *(void *)(v7 + 16) = v4;
    *a2 = v6;
    *BOOL v6 = 0;
    a2[2] = 0;
    if (!a1[4]) {
      return;
    }
  }
  else
  {
    *int v5 = v4;
    if (!a1[4]) {
      return;
    }
  }
  uint64_t v9 = (void **)a1[3];
  if (v9)
  {
    do
    {
      int v12 = (void **)*v9;
      if (*((char *)v9 + 39) < 0) {
        operator delete(v9[2]);
      }
      operator delete(v9);
      uint64_t v9 = v12;
    }
    while (v12);
  }
  a1[3] = 0;
  uint64_t v10 = a1[2];
  if (v10)
  {
    for (uint64_t i = 0; i != v10; ++i)
      *(void *)(a1[1] + 8 * i) = 0;
  }
  a1[4] = 0;
}

void AMSCore::AccountProperties::setModifiedProperties(uint64_t a1, void *a2)
{
  uint64_t v2 = a2 + 1;
  int v3 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    while (1)
    {
      if (*((char *)v3 + 55) < 0)
      {
        int v5 = (void *)v3[4];
        size_t v6 = v3[5];
      }
      else
      {
        int v5 = v3 + 4;
        size_t v6 = *((unsigned __int8 *)v3 + 55);
      }
      v12[0] = 0;
      int v13 = -1;
      uint64_t v7 = *((unsigned int *)v3 + 20);
      if (v7 == -1) {
        goto LABEL_11;
      }
      ((void (*)(char *, unsigned char *, void *))off_1EDCA5520[v7])(&v14, v12, v3 + 7);
      int v13 = v7;
      uint64_t v8 = *((unsigned int *)v3 + 20);
      if (v8 == -1) {
        goto LABEL_11;
      }
      if (v8) {
        break;
      }
LABEL_12:
      AMSCore::AccountProperties::setValue(a1, v5, v6, (uint64_t)v12);
      if (v13 != -1) {
        ((void (*)(char *, unsigned char *))off_1EDCA4D40[v13])(&v14, v12);
      }
      int v13 = -1;
      uint64_t v9 = (void *)v3[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (void *)v3[2];
          BOOL v11 = *v10 == (void)v3;
          int v3 = v10;
        }
        while (!v11);
      }
      int v3 = v10;
      if (v10 == v2) {
        return;
      }
    }
    ((void (*)(char *, void *))off_1EDCA54D0[v8])(&v14, v3 + 7);
LABEL_11:
    *((_DWORD *)v3 + 20) = 0;
    goto LABEL_12;
  }
}

void sub_18DA48568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  AMSCore::Any::~Any((AMSCore::Any *)va);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::AccountProperties::getStringValue(uint64_t a1, void *a2, unint64_t a3)
{
  AMSCore::getValueByKey<std::string,std::map<std::string,AMSCore::Any> const>((uint64_t)v4, a1 + 48, a2, a3);
  if (v5) {
    return v4[0];
  }
  (*(void (**)(void *))v4[0])(v4);
  return 0;
}

void AMSCore::getValueByKey<std::string,std::map<std::string,AMSCore::Any> const>(uint64_t a1, uint64_t a2, void *a3, unint64_t a4)
{
  v33[0] = (uint64_t)a3;
  v33[1] = a4;
  AMSCore::getValueByKey((uint64_t)&v26, a2, a3, a4);
  if (!v32)
  {
    std::runtime_error::runtime_error(&v19, &v26);
    long long v20 = v27;
    v19.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    int v21 = v28;
    uint64_t v22 = v29;
    uint64_t v23 = v30;
    if (v30)
    {
      *(void *)(v29 + 16) = &v22;
      uint64_t v28 = &v29;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
    }
    else
    {
      int v21 = &v22;
    }
    long long v24 = v31;
    long long v31 = 0uLL;
    char v25 = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v13, (uint64_t)&v19);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v13);
    *(_OWORD *)(a1 + 16) = v14;
    *(void *)a1 = &unk_1EDC827D8;
    uint64_t v9 = v16;
    *(void *)(a1 + 32) = v15;
    *(void *)(a1 + 40) = v9;
    uint64_t v10 = a1 + 40;
    uint64_t v11 = v17;
    *(void *)(a1 + 48) = v17;
    if (v11)
    {
      *(void *)(v9 + 16) = v10;
      size_t v15 = &v16;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v9 = 0;
    }
    else
    {
      *(void *)(a1 + 32) = v10;
    }
    *(_OWORD *)(a1 + 56) = v18;
    long long v18 = 0uLL;
    *(unsigned char *)(a1 + 72) = 0;
    v13.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v15, (unsigned int *)v9);
    MEMORY[0x192FA3C30](&v13);
    if (!v25) {
      goto LABEL_22;
    }
    v19.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    int v12 = (std::__shared_weak_count *)*((void *)&v24 + 1);
    if (*((void *)&v24 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v6 = v22;
LABEL_21:
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v21, (unsigned int *)v6);
    MEMORY[0x192FA3C30](&v19);
    goto LABEL_22;
  }
  char v5 = v26.__vftable;
  if (LODWORD(v26.__vftable[1].~runtime_error) != 5)
  {
    LOBYTE(v13.__vftable) = 34;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[32],std::string_view &,char>((uint64_t)&v19, 0xCu, "unable to find value with key \"", v33, (char *)&v13);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v19);
    *(_OWORD *)(a1 + 16) = v20;
    *(void *)a1 = &unk_1EDC827D8;
    uint64_t v6 = v22;
    *(void *)(a1 + 32) = v21;
    *(void *)(a1 + 40) = v6;
    uint64_t v7 = a1 + 40;
    uint64_t v8 = v23;
    *(void *)(a1 + 48) = v23;
    if (v8)
    {
      *(void *)(v6 + 16) = v7;
      int v21 = &v22;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v6 = 0;
    }
    else
    {
      *(void *)(a1 + 32) = v7;
    }
    *(_OWORD *)(a1 + 56) = v24;
    long long v24 = 0uLL;
    *(unsigned char *)(a1 + 72) = 0;
    v19.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    goto LABEL_21;
  }
  if (LODWORD(v26.__vftable[1].~runtime_error) != 5) {
    char v5 = 0;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 72) = 1;
LABEL_22:
  if (!v32) {
    ((void (*)(std::runtime_error *))v26.~runtime_error)(&v26);
  }
}

void sub_18DA48910(_Unwind_Exception *exception_object)
{
  if (!*(unsigned char *)(v1 - 72)) {
    (**(void (***)(uint64_t))(v1 - 144))(v1 - 144);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[32],std::string_view &,char>(uint64_t a1, unsigned int a2, const char *a3, uint64_t *a4, char *a5)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v16);
  size_t v10 = strlen(a3);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v16, (uint64_t)a3, v10);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v16, *a4, a4[1]);
  char v24 = *a5;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v16, (uint64_t)&v24, 1);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v16.__imp_, &__what_arg);
  v16.__vftable = (std::system_error_vtbl *)*MEMORY[0x1E4FBA418];
  *(std::system_error_vtbl **)((char *)&v16.__vftable + (unint64_t)v16.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
  v16.__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
  if (v22 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FA3FD0](&v23);
  *(void *)&v25.__val_ = a2;
  v25.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v16, v25, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  }
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  v16.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  uint64_t v17 = &v18;
  long long v20 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v16);
  *(std::error_code *)(a1 + 16) = v16.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v11 = v18;
  *(void *)(a1 + 32) = v17;
  *(void *)(a1 + 40) = v11;
  uint64_t v12 = a1 + 40;
  uint64_t v13 = v19;
  *(void *)(a1 + 48) = v19;
  if (v13)
  {
    *(void *)(v11 + 16) = v12;
    uint64_t v11 = 0;
    uint64_t v17 = &v18;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v12;
  }
  *(_OWORD *)(a1 + 56) = v20;
  long long v20 = 0uLL;
  v16.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v17, (unsigned int *)v11);
  return MEMORY[0x192FA3C30](&v16);
}

void sub_18DA48BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t AMSCore::AccountProperties::getMapValue(uint64_t a1, void *__s1, size_t a3)
{
  int v3 = (uint64_t *)(a1 + 56);
  int v4 = *(uint64_t **)(a1 + 56);
  if (!v4) {
    goto LABEL_34;
  }
  uint64_t v7 = (uint64_t *)(a1 + 56);
  do
  {
    while (1)
    {
      int v8 = *((char *)v4 + 55);
      uint64_t v9 = v8 >= 0 ? v4 + 4 : (uint64_t *)v4[4];
      size_t v10 = v8 >= 0 ? *((unsigned __int8 *)v4 + 55) : v4[5];
      size_t v11 = v10 >= a3 ? a3 : v10;
      int v12 = memcmp(__s1, v9, v11);
      if (v12) {
        break;
      }
      if (a3 <= v10) {
        goto LABEL_17;
      }
LABEL_3:
      int v4 = (uint64_t *)v4[1];
      if (!v4) {
        goto LABEL_18;
      }
    }
    if ((v12 & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_17:
    uint64_t v7 = v4;
    int v4 = (uint64_t *)*v4;
  }
  while (v4);
LABEL_18:
  if (v7 == v3) {
    goto LABEL_34;
  }
  int v13 = *((char *)v7 + 55);
  if (v13 >= 0) {
    long long v14 = v7 + 4;
  }
  else {
    long long v14 = (const void *)v7[4];
  }
  if (v13 >= 0) {
    size_t v15 = *((unsigned __int8 *)v7 + 55);
  }
  else {
    size_t v15 = v7[5];
  }
  if (v15 >= a3) {
    size_t v16 = a3;
  }
  else {
    size_t v16 = v15;
  }
  int v17 = memcmp(__s1, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_30;
    }
LABEL_34:
    uint64_t v18 = 0;
    unint64_t v19 = 0;
  }
  else
  {
    if (a3 < v15) {
      goto LABEL_34;
    }
LABEL_30:
    uint64_t v18 = v7 + 7;
    if (*((_DWORD *)v7 + 20) != 8) {
      uint64_t v18 = 0;
    }
    unint64_t v19 = (unint64_t)v18 & 0xFFFFFFFFFFFFFF00;
    uint64_t v18 = (uint64_t *)v18;
  }
  return v19 | (unint64_t)v18;
}

std::runtime_error_vtbl *AMSCore::AccountProperties::getUnsignedIntValue(uint64_t a1, void *__s1, unint64_t a3)
{
  v37[0] = (uint64_t)__s1;
  v37[1] = a3;
  AMSCore::getValueByKey((uint64_t)&v30, a1 + 48, __s1, a3);
  if (v36)
  {
    int v3 = (int)v30.__vftable[1].~runtime_error;
    if (v3 == -1) {
      LOBYTE(v3) = 0;
    }
    switch((char)v3)
    {
      case 1:
        unint64_t v8 = 0;
        LOBYTE(v4) = v30.~runtime_error;
        goto LABEL_20;
      case 2:
        int v4 = v30.~runtime_error;
        goto LABEL_19;
      case 3:
      case 4:
        int v4 = v30.~runtime_error;
LABEL_19:
        unint64_t v8 = (unint64_t)v4 & 0xFFFFFFFFFFFFFF00;
LABEL_20:
        v10.__vftable = (std::runtime_error_vtbl *)(v8 | v4);
        char v16 = 1;
        break;
      default:
        LOBYTE(v17.__vftable) = 34;
        AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[32],std::string_view &,char>((uint64_t)&v23, 0xCu, "unable to find value with key \"", v37, (char *)&v17);
        std::runtime_error::runtime_error(&v10, &v23);
        long long v11 = v24;
        uint64_t v7 = (unsigned int *)v26;
        v10.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        int v12 = v25;
        uint64_t v13 = v26;
        uint64_t v14 = v27;
        if (v27)
        {
          *(void *)(v26 + 16) = &v13;
          std::error_code v25 = &v26;
          uint64_t v26 = 0;
          uint64_t v27 = 0;
          uint64_t v7 = 0;
        }
        else
        {
          int v12 = &v13;
        }
        long long v15 = v28;
        long long v28 = 0uLL;
        char v16 = 0;
        v23.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        goto LABEL_28;
    }
LABEL_21:
    if (v36) {
      goto LABEL_22;
    }
LABEL_29:
    ((void (*)(std::runtime_error *))v30.~runtime_error)(&v30);
    if (v16) {
      return v10.__vftable;
    }
    goto LABEL_30;
  }
  std::runtime_error::runtime_error(&v23, &v30);
  long long v24 = v31;
  v23.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::error_code v25 = v32;
  uint64_t v26 = v33;
  uint64_t v27 = v34;
  if (v34)
  {
    *(void *)(v33 + 16) = &v26;
    char v32 = &v33;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
  }
  else
  {
    std::error_code v25 = &v26;
  }
  long long v28 = v35;
  long long v35 = 0uLL;
  char v29 = 1;
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v17, (uint64_t)&v23);
  std::runtime_error::runtime_error(&v10, &v17);
  long long v11 = v18;
  char v5 = (unsigned int *)v20;
  v10.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  int v12 = v19;
  uint64_t v13 = v20;
  uint64_t v14 = v21;
  if (v21)
  {
    *(void *)(v20 + 16) = &v13;
    unint64_t v19 = &v20;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    char v5 = 0;
  }
  else
  {
    int v12 = &v13;
  }
  long long v15 = v22;
  long long v22 = 0uLL;
  char v16 = 0;
  v17.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v19, v5);
  MEMORY[0x192FA3C30](&v17);
  if (!v29) {
    goto LABEL_21;
  }
  v23.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)&v28 + 1);
  if (*((void *)&v28 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = (unsigned int *)v26;
LABEL_28:
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v25, v7);
  MEMORY[0x192FA3C30](&v23);
  if (!v36) {
    goto LABEL_29;
  }
LABEL_22:
  if (v16) {
    return v10.__vftable;
  }
LABEL_30:
  ((void (*)(std::runtime_error *))v10.~runtime_error)(&v10);
  return 0;
}

void sub_18DA490C8(void *a1)
{
  if (!*(unsigned char *)(v1 - 72))
  {
    (**(void (***)(uint64_t))(v1 - 144))(v1 - 144);
    __clang_call_terminate(a1);
  }
  __clang_call_terminate(a1);
}

std::runtime_error_vtbl *AMSCore::AccountProperties::getSignedIntValue(uint64_t a1, void *__s1, unint64_t a3)
{
  v37[0] = (uint64_t)__s1;
  v37[1] = a3;
  AMSCore::getValueByKey((uint64_t)&v30, a1 + 48, __s1, a3);
  if (v36)
  {
    int v3 = (int)v30.__vftable[1].~runtime_error;
    if (v3 == -1) {
      LOBYTE(v3) = 0;
    }
    switch((char)v3)
    {
      case 1:
        unint64_t v8 = 0;
        LOBYTE(v4) = v30.~runtime_error;
        goto LABEL_23;
      case 2:
        uint64_t v4 = (uint64_t)v30.~runtime_error;
        goto LABEL_22;
      case 3:
      case 4:
        uint64_t v4 = (uint64_t)v30.~runtime_error;
        goto LABEL_22;
      case 7:
        uint64_t v4 = (uint64_t)v30.~runtime_error / 1000;
LABEL_22:
        unint64_t v8 = v4 & 0xFFFFFFFFFFFFFF00;
LABEL_23:
        v10.__vftable = (std::runtime_error_vtbl *)(v8 | v4);
        char v16 = 1;
        break;
      default:
        LOBYTE(v17.__vftable) = 34;
        AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[32],std::string_view &,char>((uint64_t)&v23, 0xCu, "unable to find value with key \"", v37, (char *)&v17);
        std::runtime_error::runtime_error(&v10, &v23);
        long long v11 = v24;
        uint64_t v7 = (unsigned int *)v26;
        v10.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        int v12 = v25;
        uint64_t v13 = v26;
        uint64_t v14 = v27;
        if (v27)
        {
          *(void *)(v26 + 16) = &v13;
          std::error_code v25 = &v26;
          uint64_t v26 = 0;
          uint64_t v27 = 0;
          uint64_t v7 = 0;
        }
        else
        {
          int v12 = &v13;
        }
        long long v15 = v28;
        long long v28 = 0uLL;
        char v16 = 0;
        v23.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        goto LABEL_29;
    }
LABEL_24:
    if (v36) {
      goto LABEL_25;
    }
LABEL_30:
    ((void (*)(std::runtime_error *))v30.~runtime_error)(&v30);
    if (v16) {
      return v10.__vftable;
    }
    goto LABEL_31;
  }
  std::runtime_error::runtime_error(&v23, &v30);
  long long v24 = v31;
  v23.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::error_code v25 = v32;
  uint64_t v26 = v33;
  uint64_t v27 = v34;
  if (v34)
  {
    *(void *)(v33 + 16) = &v26;
    char v32 = &v33;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
  }
  else
  {
    std::error_code v25 = &v26;
  }
  long long v28 = v35;
  long long v35 = 0uLL;
  char v29 = 1;
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v17, (uint64_t)&v23);
  std::runtime_error::runtime_error(&v10, &v17);
  long long v11 = v18;
  char v5 = (unsigned int *)v20;
  v10.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  int v12 = v19;
  uint64_t v13 = v20;
  uint64_t v14 = v21;
  if (v21)
  {
    *(void *)(v20 + 16) = &v13;
    unint64_t v19 = &v20;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    char v5 = 0;
  }
  else
  {
    int v12 = &v13;
  }
  long long v15 = v22;
  long long v22 = 0uLL;
  char v16 = 0;
  v17.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v19, v5);
  MEMORY[0x192FA3C30](&v17);
  if (!v29) {
    goto LABEL_24;
  }
  v23.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)&v28 + 1);
  if (*((void *)&v28 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = (unsigned int *)v26;
LABEL_29:
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v25, v7);
  MEMORY[0x192FA3C30](&v23);
  if (!v36) {
    goto LABEL_30;
  }
LABEL_25:
  if (v16) {
    return v10.__vftable;
  }
LABEL_31:
  ((void (*)(std::runtime_error *))v10.~runtime_error)(&v10);
  return 0;
}

void sub_18DA4950C(void *a1)
{
  if (!*(unsigned char *)(v1 - 72))
  {
    (**(void (***)(uint64_t))(v1 - 144))(v1 - 144);
    __clang_call_terminate(a1);
  }
  __clang_call_terminate(a1);
}

std::runtime_error_vtbl *AMSCore::AccountProperties::getDoubleValue(uint64_t a1, void *__s1, unint64_t a3)
{
  v36[0] = (uint64_t)__s1;
  v36[1] = a3;
  AMSCore::getValueByKey((uint64_t)&v29, a1 + 48, __s1, a3);
  if (v35)
  {
    int v3 = (int)v29.__vftable[1].~runtime_error;
    if (v3 == -1) {
      LOBYTE(v3) = 0;
    }
    switch((char)v3)
    {
      case 1:
        double v4 = 0.0;
        if (LOBYTE(v29.~runtime_error)) {
          double v4 = 1.0;
        }
        break;
      case 2:
        double v4 = *(double *)&v29.~runtime_error;
        break;
      case 3:
        double v4 = (double)(uint64_t)v29.~runtime_error;
        break;
      case 4:
        double v4 = (double)(unint64_t)v29.~runtime_error;
        break;
      default:
        LOBYTE(v16.__vftable) = 34;
        AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[32],std::string_view &,char>((uint64_t)&v22, 0xCu, "unable to find value with key \"", v36, (char *)&v16);
        std::runtime_error::runtime_error(&v9, &v22);
        long long v10 = v23;
        uint64_t v7 = (unsigned int *)v25;
        v9.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        long long v11 = v24;
        uint64_t v12 = v25;
        uint64_t v13 = v26;
        if (v26)
        {
          *(void *)(v25 + 16) = &v12;
          long long v24 = &v25;
          uint64_t v25 = 0;
          uint64_t v26 = 0;
          uint64_t v7 = 0;
        }
        else
        {
          long long v11 = &v12;
        }
        long long v14 = v27;
        long long v27 = 0uLL;
        char v15 = 0;
        v22.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        goto LABEL_30;
    }
    *(double *)&v9.__vftable = v4;
    char v15 = 1;
LABEL_23:
    if (v35) {
      goto LABEL_24;
    }
LABEL_31:
    ((void (*)(std::runtime_error *))v29.~runtime_error)(&v29);
    if (v15) {
      return v9.__vftable;
    }
    goto LABEL_32;
  }
  std::runtime_error::runtime_error(&v22, &v29);
  long long v23 = v30;
  v22.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  long long v24 = v31;
  uint64_t v25 = v32;
  uint64_t v26 = v33;
  if (v33)
  {
    *(void *)(v32 + 16) = &v25;
    long long v31 = &v32;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
  }
  else
  {
    long long v24 = &v25;
  }
  long long v27 = v34;
  long long v34 = 0uLL;
  char v28 = 1;
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v16, (uint64_t)&v22);
  std::runtime_error::runtime_error(&v9, &v16);
  long long v10 = v17;
  char v5 = (unsigned int *)v19;
  v9.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  long long v11 = v18;
  uint64_t v12 = v19;
  uint64_t v13 = v20;
  if (v20)
  {
    *(void *)(v19 + 16) = &v12;
    long long v18 = &v19;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    char v5 = 0;
  }
  else
  {
    long long v11 = &v12;
  }
  long long v14 = v21;
  long long v21 = 0uLL;
  char v15 = 0;
  v16.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v18, v5);
  MEMORY[0x192FA3C30](&v16);
  if (!v28) {
    goto LABEL_23;
  }
  v22.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)&v27 + 1);
  if (*((void *)&v27 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = (unsigned int *)v25;
LABEL_30:
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v24, v7);
  MEMORY[0x192FA3C30](&v22);
  if (!v35) {
    goto LABEL_31;
  }
LABEL_24:
  if (v15) {
    return v9.__vftable;
  }
LABEL_32:
  ((void (*)(std::runtime_error *))v9.~runtime_error)(&v9);
  return 0;
}

void sub_18DA49944(void *a1)
{
  if (!*(unsigned char *)(v1 - 72))
  {
    (**(void (***)(uint64_t))(v1 - 144))(v1 - 144);
    __clang_call_terminate(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMSCore::AccountProperties::getBoolValue(uint64_t a1, void *a2, unint64_t a3)
{
  AMSCore::getValueByKey<BOOL,std::map<std::string,AMSCore::Any> const>((uint64_t)v4, a1 + 48, a2, a3);
  if (v5) {
    return v4[0] | 0x100u;
  }
  (**(void (***)(unsigned __int8 *))v4)(v4);
  return 0;
}

void AMSCore::getValueByKey<BOOL,std::map<std::string,AMSCore::Any> const>(uint64_t a1, uint64_t a2, void *a3, unint64_t a4)
{
  v32[0] = (uint64_t)a3;
  v32[1] = a4;
  AMSCore::getValueByKey((uint64_t)&v25, a2, a3, a4);
  if (v31)
  {
    if (LOBYTE(v25.__vftable[1].~runtime_error) == 1)
    {
      *(unsigned char *)a1 = v25.~runtime_error;
      *(unsigned char *)(a1 + 72) = 1;
      goto LABEL_20;
    }
    LOBYTE(v12.__vftable) = 34;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[32],std::string_view &,char>((uint64_t)&v18, 0xCu, "unable to find value with key \"", v32, (char *)&v12);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v18);
    *(_OWORD *)(a1 + 16) = v19;
    *(void *)a1 = &unk_1EDC827D8;
    uint64_t v5 = v21;
    *(void *)(a1 + 32) = v20;
    *(void *)(a1 + 40) = v5;
    uint64_t v6 = a1 + 40;
    uint64_t v7 = v22;
    *(void *)(a1 + 48) = v22;
    if (v7)
    {
      *(void *)(v5 + 16) = v6;
      uint64_t v20 = &v21;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v5 = 0;
    }
    else
    {
      *(void *)(a1 + 32) = v6;
    }
    *(_OWORD *)(a1 + 56) = v23;
    long long v23 = 0uLL;
    *(unsigned char *)(a1 + 72) = 0;
    v18.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    goto LABEL_19;
  }
  std::runtime_error::runtime_error(&v18, &v25);
  long long v19 = v26;
  v18.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  uint64_t v20 = v27;
  uint64_t v21 = v28;
  uint64_t v22 = v29;
  if (v29)
  {
    *(void *)(v28 + 16) = &v21;
    long long v27 = &v28;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
  }
  else
  {
    uint64_t v20 = &v21;
  }
  long long v23 = v30;
  long long v30 = 0uLL;
  char v24 = 1;
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v12, (uint64_t)&v18);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v12);
  *(_OWORD *)(a1 + 16) = v13;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v8 = v15;
  *(void *)(a1 + 32) = v14;
  *(void *)(a1 + 40) = v8;
  uint64_t v9 = a1 + 40;
  uint64_t v10 = v16;
  *(void *)(a1 + 48) = v16;
  if (v10)
  {
    *(void *)(v8 + 16) = v9;
    long long v14 = &v15;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v9;
  }
  *(_OWORD *)(a1 + 56) = v17;
  long long v17 = 0uLL;
  *(unsigned char *)(a1 + 72) = 0;
  v12.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v14, (unsigned int *)v8);
  MEMORY[0x192FA3C30](&v12);
  if (v24)
  {
    v18.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    long long v11 = (std::__shared_weak_count *)*((void *)&v23 + 1);
    if (*((void *)&v23 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v23 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v5 = v21;
LABEL_19:
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v20, (unsigned int *)v5);
    MEMORY[0x192FA3C30](&v18);
  }
LABEL_20:
  if (!v31) {
    ((void (*)(std::runtime_error *))v25.~runtime_error)(&v25);
  }
}

void sub_18DA49D28(_Unwind_Exception *exception_object)
{
  if (!*(unsigned char *)(v1 - 72)) {
    (**(void (***)(uint64_t))(v1 - 144))(v1 - 144);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *AMSCore::AccountProperties::getValue(uint64_t a1, void *__s1, size_t a3)
{
  int v3 = (uint64_t *)(a1 + 56);
  double v4 = *(uint64_t **)(a1 + 56);
  if (!v4) {
    return &AMSCore::Any::Null(void)::null;
  }
  uint64_t v7 = (uint64_t *)(a1 + 56);
  do
  {
    while (1)
    {
      int v8 = *((char *)v4 + 55);
      uint64_t v9 = v8 >= 0 ? v4 + 4 : (uint64_t *)v4[4];
      size_t v10 = v8 >= 0 ? *((unsigned __int8 *)v4 + 55) : v4[5];
      size_t v11 = v10 >= a3 ? a3 : v10;
      int v12 = memcmp(__s1, v9, v11);
      if (v12) {
        break;
      }
      if (a3 <= v10) {
        goto LABEL_17;
      }
LABEL_3:
      double v4 = (uint64_t *)v4[1];
      if (!v4) {
        goto LABEL_18;
      }
    }
    if ((v12 & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_17:
    uint64_t v7 = v4;
    double v4 = (uint64_t *)*v4;
  }
  while (v4);
LABEL_18:
  if (v7 == v3) {
    return &AMSCore::Any::Null(void)::null;
  }
  int v13 = *((char *)v7 + 55);
  if (v13 >= 0) {
    long long v14 = v7 + 4;
  }
  else {
    long long v14 = (const void *)v7[4];
  }
  if (v13 >= 0) {
    size_t v15 = *((unsigned __int8 *)v7 + 55);
  }
  else {
    size_t v15 = v7[5];
  }
  if (v15 >= a3) {
    size_t v16 = a3;
  }
  else {
    size_t v16 = v15;
  }
  int v17 = memcmp(__s1, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0) {
      return v7 + 7;
    }
    return &AMSCore::Any::Null(void)::null;
  }
  else
  {
    if (a3 < v15) {
      return &AMSCore::Any::Null(void)::null;
    }
    return v7 + 7;
  }
}

uint64_t AMSCore::AccountProperties::getValues(AMSCore::AccountProperties *this)
{
  return (uint64_t)this + 48;
}

void AMSCore::AccountProperties::~AccountProperties(unsigned int **this)
{
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)(this + 6), this[7]);
  uint64_t v2 = (void **)this[3];
  if (v2)
  {
    do
    {
      double v4 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v4;
    }
    while (v4);
  }
  int v3 = this[1];
  this[1] = 0;
  if (v3) {
    operator delete(v3);
  }
  JUMPOUT(0x192FA4080);
}

{
  void **v2;
  unsigned int *v3;
  void **v4;

  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)(this + 6), this[7]);
  uint64_t v2 = (void **)this[3];
  if (v2)
  {
    do
    {
      double v4 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v4;
    }
    while (v4);
  }
  int v3 = this[1];
  this[1] = 0;
  if (v3) {
    operator delete(v3);
  }
}

uint64_t std::unordered_set<std::string>::~unordered_set[abi:fe180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  int v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::unique_ptr<AMSCore::IiCloudAccount>,AMSCore::Error>::Promise *,AMSCore::Task<std::unique_ptr<AMSCore::IiCloudAccount>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::unique_ptr<AMSCore::IiCloudAccount>,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINSt3__110unique_ptrINS_14IiCloudAccountENS1_14default_deleteIS3_EEEENS_5ErrorEE7Pro"
                     "mise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINSt3__110unique_ptrINS_14IiCloudAccountENS1_14default_deleteIS3_EEEENS_5"
                                "ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINSt3__110unique_ptrINS_14IiCloudAccountENS1_14default_deleteIS3_EEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINSt3__110unique_ptrINS_14IiCloudAccountENS1_14default_deleteIS3_EEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::unique_ptr<AMSCore::IiCloudAccount>,AMSCore::Error>::Promise *,AMSCore::Task<std::unique_ptr<AMSCore::IiCloudAccount>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::unique_ptr<AMSCore::IiCloudAccount>,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 96), 2uLL)) {
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::Task<std::unique_ptr<AMSCore::IiCloudAccount>,AMSCore::Error>::Promise *,AMSCore::Task<std::unique_ptr<AMSCore::IiCloudAccount>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::unique_ptr<AMSCore::IiCloudAccount>,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void AMSCore::AccountIdentity::~AccountIdentity(void **this)
{
  if (*((char *)this + 63) < 0)
  {
    operator delete(this[5]);
    if (!*((unsigned char *)this + 24)) {
      return;
    }
  }
  else if (!*((unsigned char *)this + 24))
  {
    return;
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void AMSCore::IAccountProvider::getActiveOrLocalMediaAccount(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = (char *)operator new(0x1C0uLL);
  *(void *)uint64_t v5 = AMSCore::IAccountProvider::getActiveOrLocalMediaAccount;
  *((void *)v5 + 1) = AMSCore::IAccountProvider::getActiveOrLocalMediaAccount;
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  *((void *)v5 + 47) = a2;
  *((void *)v5 + 48) = v6;
  *((void *)v5 + 49) = v7;
  *((_DWORD *)v5 + 108) = *((_DWORD *)a3 + 4);
  *(_DWORD *)(v5 + 435) = *(_DWORD *)((char *)a3 + 19);
  v5[440] = *((unsigned char *)a3 + 23);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  v5[24] = 0;
  v5[104] = 0;
  *((void *)v5 + 14) = 0;
  *((void *)v5 + 18) = 0;
  std::shared_ptr<AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise,AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v8, (uint64_t)(v5 + 16));
}

void sub_18DA4A76C(void *a1)
{
  std::expected<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](v1);
  __cxa_begin_catch(a1);
  AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DA4A798()
{
}

uint64_t AMSCore::IAccountProvider::getActiveOrLocalMediaAccount(uint64_t result)
{
  unint64_t v1 = result;
  uint64_t v2 = (std::runtime_error *)(result + 152);
  unint64_t v3 = (std::runtime_error_vtbl **)(result + 232);
  double v4 = (std::string *)(result + 336);
  uint64_t v5 = result + 16;
  if (*(unsigned char *)(result + 439)) {
    goto LABEL_2;
  }
  uint64_t v10 = *(void *)(result + 400);
  if (!*(unsigned char *)(v10 + 88)) {
    goto LABEL_61;
  }
  size_t v11 = (const std::runtime_error *)(v10 + 8);
  char v12 = *(unsigned char *)(v10 + 80);
  if (v12)
  {
    int v13 = v11->__vftable;
    v11->__vftable = 0;
    *unint64_t v3 = v13;
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(result + 232), v11);
    *(_OWORD *)(v1 + 248) = *(_OWORD *)(v10 + 24);
    *(void *)(v1 + 232) = &unk_1EDC827D8;
    std::runtime_error v18 = (void *)(v10 + 48);
    uint64_t v19 = *(void *)(v10 + 48);
    unint64_t v20 = v1 + 272;
    *(void *)(v1 + 264) = *(void *)(v10 + 40);
    *(void *)(v1 + 272) = v19;
    uint64_t v21 = *(void *)(v10 + 56);
    *(void *)(v1 + 280) = v21;
    if (v21)
    {
      *(void *)(v19 + 16) = v20;
      *(void *)(v10 + 40) = v18;
      *std::runtime_error v18 = 0;
      *(void *)(v10 + 56) = 0;
    }
    else
    {
      *(void *)(v1 + 264) = v20;
    }
    uint64_t v28 = *(void *)(v1 + 400);
    *(_OWORD *)(v1 + 288) = *(_OWORD *)(v28 + 64);
    *(void *)(v28 + 64) = 0;
    *(void *)(v28 + 72) = 0;
  }
  *(unsigned char *)(v1 + 304) = v12;
  uint64_t v29 = *(void *)(v1 + 408);
  if (v29 && !atomic_fetch_add((atomic_ullong *volatile)(v29 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    long long v30 = *(std::__shared_weak_count **)(v1 + 408);
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  char v31 = *(std::__shared_weak_count **)(v1 + 160);
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    if ((*(char *)(v1 + 335) & 0x80000000) == 0)
    {
LABEL_39:
      if (!*(unsigned char *)(v1 + 304)) {
        goto LABEL_48;
      }
      goto LABEL_43;
    }
  }
  else if ((*(char *)(v1 + 335) & 0x80000000) == 0)
  {
    goto LABEL_39;
  }
  operator delete(*(void **)(v1 + 312));
  if (!*(unsigned char *)(v1 + 304)) {
    goto LABEL_48;
  }
LABEL_43:
  if (*(void *)(v1 + 232))
  {
    if (*(unsigned char *)(v1 + 104))
    {
      uint64_t v32 = *(void *)(v1 + 24);
      if (*(unsigned char *)(v1 + 96))
      {
        *(void *)(v1 + 24) = 0;
        if (v32) {
          (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
        }
      }
      else
      {
        (*(void (**)(unint64_t))v32)(v1 + 24);
      }
    }
    uint64_t v37 = *(void *)(v1 + 232);
    *(void *)(v1 + 232) = 0;
    *(void *)(v1 + 24) = v37;
    *(unsigned char *)(v1 + 96) = 1;
    *(unsigned char *)(v1 + 104) = 1;
    if (*(unsigned char *)(v1 + 304)) {
      goto LABEL_58;
    }
    uint64_t v27 = 0;
    goto LABEL_57;
  }
LABEL_48:
  int v33 = *(char *)(v1 + 440);
  long long v34 = *(const std::string::value_type **)(v1 + 384);
  std::string::size_type v35 = *(void *)(v1 + 392);
  if (v33 < 0)
  {
    std::string::__init_copy_ctor_external(v4, v34, v35);
  }
  else
  {
    *(void *)(v1 + 336) = v34;
    *(void *)(v1 + 344) = v35;
    *(_DWORD *)(v1 + 352) = *(_DWORD *)(v1 + 432);
    *(_DWORD *)(v1 + 355) = *(_DWORD *)(v1 + 435);
    *(unsigned char *)(v1 + 359) = v33;
  }
  uint64_t result = (*(uint64_t (**)(void, std::string *))(**(void **)(v1 + 376) + 48))(*(void *)(v1 + 376), v4);
  long long v36 = *(_OWORD *)(v1 + 360);
  *(_OWORD *)(v1 + 416) = v36;
  *(void *)(v1 + 360) = 0;
  *(void *)(v1 + 368) = 0;
  if (atomic_load_explicit((atomic_ullong *volatile)(v36 + 96), memory_order_acquire)
    || (*(unsigned char *)(v1 + 439) = 1, atomic_exchange((atomic_ullong *volatile)(*(void *)(v1 + 416) + 96), v1)))
  {
LABEL_2:
    uint64_t v6 = *(void *)(v1 + 416);
    if (*(unsigned char *)(v6 + 88))
    {
      uint64_t v7 = (const std::runtime_error *)(v6 + 8);
      char v8 = *(unsigned char *)(v6 + 80);
      if (v8)
      {
        uint64_t v9 = v7->__vftable;
        v7->__vftable = 0;
        v2->__vftable = v9;
      }
      else
      {
        std::runtime_error::runtime_error(v2, v7);
        *(_OWORD *)(v1 + 168) = *(_OWORD *)(v6 + 24);
        long long v14 = (void *)(v6 + 48);
        uint64_t v15 = *(void *)(v6 + 48);
        *(void *)(v1 + 192) = v15;
        unint64_t v16 = v1 + 192;
        *(void *)(v1 + 152) = &unk_1EDC827D8;
        *(void *)(v1 + 184) = *(void *)(v6 + 40);
        uint64_t v17 = *(void *)(v6 + 56);
        *(void *)(v1 + 200) = v17;
        if (v17)
        {
          *(void *)(v15 + 16) = v16;
          *(void *)(v6 + 40) = v14;
          *long long v14 = 0;
          *(void *)(v6 + 56) = 0;
        }
        else
        {
          *(void *)(v1 + 184) = v16;
        }
        uint64_t v22 = *(void *)(v1 + 416);
        *(_OWORD *)(v1 + 208) = *(_OWORD *)(v22 + 64);
        *(void *)(v22 + 64) = 0;
        *(void *)(v22 + 72) = 0;
      }
      *(unsigned char *)(v1 + 224) = v8;
      std::optional<std::expected<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>,void>((std::runtime_error *)(v1 + 24), v2);
      uint64_t v23 = *(void *)(v1 + 152);
      if (*(unsigned char *)(v1 + 224))
      {
        v2->__vftable = 0;
        if (v23) {
          (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
        }
        uint64_t v24 = *(void *)(v1 + 424);
        if (!v24)
        {
LABEL_22:
          long long v26 = *(std::__shared_weak_count **)(v1 + 368);
          if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
            if ((*(char *)(v1 + 359) & 0x80000000) == 0)
            {
LABEL_26:
              uint64_t v27 = *(void *)(v1 + 232);
              if (*(unsigned char *)(v1 + 304))
              {
                *unint64_t v3 = 0;
                if (v27) {
                  (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
                }
                goto LABEL_58;
              }
LABEL_57:
              (*(void (**)(std::runtime_error_vtbl **))v27)(v3);
LABEL_58:
              *(void *)(v1 + 152) = v5;
              *(void *)unint64_t v1 = 0;
              return AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v2);
            }
          }
          else if ((*(char *)(v1 + 359) & 0x80000000) == 0)
          {
            goto LABEL_26;
          }
          operator delete(v4->__r_.__value_.__l.__data_);
          goto LABEL_26;
        }
      }
      else
      {
        (*(void (**)(std::runtime_error *))v23)(v2);
        uint64_t v24 = *(void *)(v1 + 424);
        if (!v24) {
          goto LABEL_22;
        }
      }
      if (!atomic_fetch_add((atomic_ullong *volatile)(v24 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        std::runtime_error v25 = *(std::__shared_weak_count **)(v1 + 424);
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
      goto LABEL_22;
    }
LABEL_61:
    __break(1u);
  }
  return result;
}

void sub_18DA4ACF4(void *a1)
{
  std::expected<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](v1);
  __cxa_begin_catch(a1);
  AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DA4AD10()
{
}

void AMSCore::IAccountProvider::getActiveOrLocalMediaAccount(char *__p)
{
  uint64_t v2 = __p + 232;
  if (!*(void *)__p) {
    goto LABEL_22;
  }
  if (__p[439])
  {
    uint64_t v3 = *((void *)__p + 53);
    if (v3 && !atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      double v4 = (std::__shared_weak_count *)*((void *)__p + 53);
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)*((void *)__p + 46);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if ((__p[359] & 0x80000000) == 0)
      {
LABEL_10:
        uint64_t v6 = *((void *)__p + 29);
        if (__p[304])
        {
          *uint64_t v2 = 0;
          if (v6) {
            (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
          }
        }
        else
        {
          (*(void (**)(void *))v6)(v2);
        }
        goto LABEL_22;
      }
    }
    else if ((__p[359] & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(*((void **)__p + 42));
    goto LABEL_10;
  }
  uint64_t v7 = *((void *)__p + 51);
  if (v7 && !atomic_fetch_add((atomic_ullong *volatile)(v7 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    char v8 = (std::__shared_weak_count *)*((void *)__p + 51);
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)__p + 20);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p[335] < 0) {
    operator delete(*((void **)__p + 39));
  }
LABEL_22:
  uint64_t v10 = (char *)*((void *)__p + 18);
  if (v10 == __p + 120)
  {
    (*(void (**)(char *))(*((void *)__p + 15) + 32))(__p + 120);
    if (!__p[104]) {
      goto LABEL_32;
    }
    goto LABEL_28;
  }
  if (v10) {
    (*(void (**)(char *))(*(void *)v10 + 40))(v10);
  }
  if (__p[104])
  {
LABEL_28:
    uint64_t v11 = *((void *)__p + 3);
    if (__p[96])
    {
      *((void *)__p + 3) = 0;
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
    }
    else
    {
      (*(void (**)(char *))v11)(__p + 24);
    }
  }
LABEL_32:
  int v12 = __p[440];
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v12 < 0) {
    operator delete(*((void **)__p + 48));
  }
  operator delete(__p);
}

void std::shared_ptr<AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise,AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_18DA4B0A8(void *a1)
{
  __cxa_begin_catch(a1);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 96), 2uLL)) {
    (*(void (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  __cxa_rethrow();
}

void sub_18DA4B0D4(_Unwind_Exception *a1)
{
}

uint64_t *std::expected<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](uint64_t *a1)
{
  int v2 = *((unsigned __int8 *)a1 + 72);
  uint64_t v3 = *a1;
  if (v2)
  {
    *a1 = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  else
  {
    (*(void (**)(uint64_t *))v3)(a1);
  }
  return a1;
}

std::runtime_error *std::optional<std::expected<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>,void>(std::runtime_error *this, std::runtime_error *a2)
{
  if (LOBYTE(this[5].__vftable))
  {
    double v4 = this->__vftable;
    if (LOBYTE(this[4].__imp_.__imp_))
    {
      this->__vftable = 0;
      if (v4) {
        (*((void (**)(std::runtime_error_vtbl *))v4->~runtime_error + 1))(v4);
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))v4->~runtime_error)(this);
    }
    LOBYTE(this[5].__vftable) = 0;
  }
  char imp = (char)a2[4].__imp_.__imp_;
  if (imp)
  {
    uint64_t v6 = a2->__vftable;
    a2->__vftable = 0;
    this->__vftable = v6;
  }
  else
  {
    std::runtime_error::runtime_error(this, a2);
    this[1] = a2[1];
    this->__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    p_char imp = (std::runtime_error_vtbl *)&a2[2].__imp_;
    char v8 = a2[2].__imp_.__imp_;
    this[2].__vftable = a2[2].__vftable;
    this[2].__imp_.__imp_ = v8;
    uint64_t v9 = (std::runtime_error_vtbl *)&this[2].__imp_;
    uint64_t v10 = a2[3].__vftable;
    this[3].__vftable = v10;
    if (v10)
    {
      *((void *)v8 + 2) = v9;
      a2[2].__vftable = p_imp;
      p_imp->~runtime_error = 0;
      a2[3].__vftable = 0;
    }
    else
    {
      this[2].__vftable = v9;
    }
    *(std::runtime_error *)((char *)this + 56) = *(std::runtime_error *)((char *)a2 + 56);
    a2[3].__imp_.__imp_ = 0;
    a2[4].__vftable = 0;
  }
  LOBYTE(this[4].__imp_.__imp_) = imp;
  LOBYTE(this[5].__vftable) = 1;
  return this;
}

void AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::unhandled_exception()
{
  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

uint64_t sub_18DA4B2D0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, long long a19, uint64_t a20,uint64_t a21,uint64_t a22,long long a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v42, (uint64_t)v39);
  if (*(unsigned char *)(v29 + 88))
  {
    uint64_t v31 = *(void *)(v29 + 8);
    if (*(unsigned char *)(v29 + 80))
    {
      v30->__vftable = 0;
      if (v31) {
        (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
      }
    }
    else
    {
      (*(void (**)(std::runtime_error *))v31)(v30);
    }
    *(unsigned char *)(v29 + 88) = 0;
  }
  std::runtime_error::runtime_error(v30, v42);
  std::runtime_error v32 = v42[1];
  long long v34 = v43;
  uint64_t v33 = v44;
  *(void *)(v29 + 48) = v44;
  uint64_t v35 = v29 + 48;
  *(std::runtime_error *)(v29 + 24) = v32;
  *(void *)(v29 + 8) = &unk_1EDC827D8;
  uint64_t v36 = v45;
  *(void *)(v29 + 40) = v34;
  *(void *)(v29 + 56) = v36;
  if (v36)
  {
    *(void *)(v33 + 16) = v35;
    size_t v43 = &v44;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v33 = 0;
  }
  else
  {
    *(void *)(v29 + 40) = v35;
  }
  *(_OWORD *)(v29 + 64) = v46;
  long long v46 = 0uLL;
  *(unsigned char *)(v29 + 80) = 0;
  *(unsigned char *)(v29 + 88) = 1;
  v42[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v43, (unsigned int *)v33);
  MEMORY[0x192FA3C30](v42);
  v39[0] = &unk_1EDC827D8;
  uint64_t v37 = v41;
  if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v40, v40[1]);
  return MEMORY[0x192FA3C30](v39);
}

uint64_t AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::Awaiter::await_suspend(uint64_t result)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void (**)(void))atomic_exchange((atomic_ullong *volatile)(*(void *)result + 96), 1uLL);
  if (v1)
  {
    uint64_t v2 = result;
    if (v1 == (void (**)(void))2) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result - 8))(*(void *)result - 16);
    }
    uint64_t v3 = (uint64_t *)(*(void *)result + 128);
    uint64_t result = *v3;
    if (*v3)
    {
      if (result == *(void *)v2 + 104)
      {
        unint64_t v20 = v19;
        uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 24))(result, v19);
      }
      else
      {
        unint64_t v20 = *(void **)(*(void *)v2 + 128);
        *uint64_t v3 = 0;
      }
    }
    else
    {
      unint64_t v20 = 0;
    }
    if (v20)
    {
      uint64_t v4 = *(void *)v2;
      if (!*(unsigned char *)(*(void *)v2 + 88))
      {
        __break(1u);
        return result;
      }
      uint64_t v5 = (const std::runtime_error *)(v4 + 8);
      char v6 = *(unsigned char *)(v4 + 80);
      if (v6)
      {
        uint64_t v7 = v5->__vftable;
        v5->__vftable = 0;
        v12.__vftable = v7;
      }
      else
      {
        std::runtime_error::runtime_error(&v12, v5);
        char v8 = (void *)(v4 + 48);
        uint64_t v9 = *(void *)(v4 + 48);
        long long v13 = *(_OWORD *)(v4 + 24);
        uint64_t v10 = *(uint64_t **)(v4 + 40);
        v12.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        long long v14 = v10;
        uint64_t v15 = v9;
        if (*(void *)(v4 + 56))
        {
          *(void *)(v9 + 16) = &v15;
          *(void *)(v4 + 40) = v8;
          *char v8 = 0;
          *(void *)(v4 + 56) = 0;
        }
        else
        {
          long long v14 = &v15;
        }
        long long v17 = *(_OWORD *)(v4 + 64);
        *(void *)(v4 + 64) = 0;
        *(void *)(v4 + 72) = 0;
      }
      char v18 = v6;
      if (!v20) {
        std::__throw_bad_function_call[abi:fe180100]();
      }
      (*(void (**)(void *, std::runtime_error *))(*v20 + 48))(v20, &v12);
      uint64_t v11 = v12.__vftable;
      if (v18)
      {
        v12.__vftable = 0;
        if (v11) {
          (*((void (**)(std::runtime_error_vtbl *))v11->~runtime_error + 1))(v11);
        }
      }
      else
      {
        ((void (*)(std::runtime_error *))v12.~runtime_error)(&v12);
      }
    }
    else
    {
      (*v1)(v1);
    }
    uint64_t result = (uint64_t)v20;
    if (v20 == v19)
    {
      return (*(uint64_t (**)(void *))(v19[0] + 32))(v19);
    }
    else if (v20)
    {
      return (*(uint64_t (**)(void))(*v20 + 40))();
    }
  }
  return result;
}

void sub_18DA4B738(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise *,AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINSt3__110unique_ptrINS_13IMediaAccountENS1_14default_deleteIS3_EEEENS_5ErrorEE7Prom"
                     "ise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINSt3__110unique_ptrINS_13IMediaAccountENS1_14default_deleteIS3_EEEENS_5E"
                                "rrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINSt3__110unique_ptrINS_13IMediaAccountENS1_14default_deleteIS3_EEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINSt3__110unique_ptrINS_13IMediaAccountENS1_14default_deleteIS3_EEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise *,AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 96), 2uLL)) {
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise *,AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void AMSCore::IAccountProvider::merge(void *a1, void *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)*a1 + 112))(*a1);
  (*(void (**)(unsigned int ***__return_ptr))(*(void *)v4 + 112))(&v18);
  if (*a2)
  {
    uint64_t v5 = (*(uint64_t (**)(void))(*(void *)*a2 + 112))(*a2);
    uint64_t v6 = v5;
    unint64_t v16 = v18;
    v17[0] = v19;
    v17[1] = v20;
    if (v20)
    {
      *((void *)v19 + 2) = v17;
      char v18 = &v19;
      uint64_t v19 = 0;
      unint64_t v20 = 0;
    }
    else
    {
      unint64_t v16 = v17;
    }
    (*(void (**)(uint64_t, unsigned int ***))(*(void *)v5 + 88))(v5, &v16);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v16, v17[0]);
    uint64_t v7 = (*(uint64_t (**)(void))(*(void *)*a1 + 112))();
    char v8 = (const void ***)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
    v15[0] = 0;
    v15[1] = 0;
    long long v14 = v15;
    uint64_t v9 = v8 + 1;
    uint64_t v10 = *v8;
    if (*v8 != (const void **)(v8 + 1))
    {
      do
      {
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v14, (uint64_t *)v15, v10 + 4, (long long *)v10 + 2);
        uint64_t v11 = (const void **)v10[1];
        if (v11)
        {
          do
          {
            std::runtime_error v12 = (const void ***)v11;
            uint64_t v11 = (const void **)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            std::runtime_error v12 = (const void ***)v10[2];
            BOOL v13 = *v12 == v10;
            uint64_t v10 = (const void **)v12;
          }
          while (!v13);
        }
        uint64_t v10 = (const void **)v12;
      }
      while (v12 != v9);
    }
    (*(void (**)(uint64_t, unsigned int ***))(*(void *)v7 + 96))(v7, &v14);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v14, v15[0]);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v18, v19);
}

void sub_18DA4BA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, unsigned int *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, unsigned int *a17)
{
}

void AMSCore::EphemeralAccountProvider::saveAccount(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = operator new(0x1B0uLL);
  *uint64_t v4 = AMSCore::EphemeralAccountProvider::saveAccount;
  v4[1] = AMSCore::EphemeralAccountProvider::saveAccount;
  v4[50] = a1;
  *((_OWORD *)v4 + 24) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *((unsigned char *)v4 + 24) = 0;
  *((unsigned char *)v4 + 104) = 0;
  v4[14] = 0;
  v4[18] = 0;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v5, (uint64_t)(v4 + 2));
}

void sub_18DA4CB60(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23,uint64_t *a24)
{
  uint64_t v27 = *(void *)(v25 - 176);
  *(void *)(v25 - 176) = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  std::expected<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](a24);
  if (*(char *)(v24 + 351) < 0) {
    operator delete(*a23);
  }
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](a21);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DA4CCA0()
{
}

void AMSCore::EphemeralAccountProvider::saveAccount(uint64_t a1)
{
  uint64_t v2 = (std::runtime_error *)(a1 + 152);
  unint64_t v3 = (std::string *)(a1 + 232);
  uint64_t v4 = (std::string *)(a1 + 328);
  std::runtime_error v5 = (std::mutex **)(a1 + 368);
  uint64_t v6 = (uint64_t *)(a1 + 384);
  uint64_t v7 = a1 + 16;
  if (!*(unsigned char *)(a1 + 424))
  {
    *(void *)(a1 + 368) = *(void *)(a1 + 400) + 192;
    *(unsigned char *)(a1 + 376) = 1;
    uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 384) + 64))(*(void *)(a1 + 384));
    if (*(char *)(v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v8, *(void *)(v8 + 8));
    }
    else
    {
      long long v9 = *(_OWORD *)v8;
      v4->__r_.__value_.__r.__words[2] = *(void *)(v8 + 16);
      *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v9;
    }
    uint64_t v10 = (*(uint64_t (**)(void))(*(void *)*v6 + 72))();
    uint64_t v11 = v10;
    *(unsigned char *)(a1 + 232) = 0;
    *(unsigned char *)(a1 + 256) = 0;
    if (*(unsigned char *)(v10 + 24))
    {
      if (*(char *)(v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)v10, *(void *)(v10 + 8));
      }
      else
      {
        long long v12 = *(_OWORD *)v10;
        v3->__r_.__value_.__r.__words[2] = *(void *)(v10 + 16);
        *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v12;
      }
      *(unsigned char *)(a1 + 256) = 1;
    }
    *(void *)(a1 + 264) = *(void *)(v11 + 32);
    BOOL v13 = (std::string *)(a1 + 272);
    if (*(char *)(v11 + 63) < 0)
    {
      std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)(v11 + 40), *(void *)(v11 + 48));
    }
    else
    {
      long long v14 = *(_OWORD *)(v11 + 40);
      *(void *)(a1 + 288) = *(void *)(v11 + 56);
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
    }
    AMSCore::EphemeralAccountProvider::getMediaAccountUnlocked(a1 + 352, *(void *)(a1 + 400), (uint64_t)v3);
  }
  uint64_t v15 = *(void *)(a1 + 408);
  if (!*(unsigned char *)(v15 + 88)) {
    goto LABEL_153;
  }
  unint64_t v16 = (const std::runtime_error *)(v15 + 8);
  char v17 = *(unsigned char *)(v15 + 80);
  if (v17)
  {
    char v18 = v16->__vftable;
    v16->__vftable = 0;
    v2->__vftable = v18;
  }
  else
  {
    std::runtime_error::runtime_error(v2, v16);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(v15 + 24);
    uint64_t v19 = (void *)(v15 + 48);
    uint64_t v20 = *(void *)(v15 + 48);
    *(void *)(a1 + 192) = v20;
    uint64_t v21 = a1 + 192;
    *(void *)(a1 + 152) = &unk_1EDC827D8;
    *(void *)(a1 + 184) = *(void *)(v15 + 40);
    uint64_t v22 = *(void *)(v15 + 56);
    *(void *)(a1 + 200) = v22;
    if (v22)
    {
      *(void *)(v20 + 16) = v21;
      *(void *)(v15 + 40) = v19;
      *uint64_t v19 = 0;
      *(void *)(v15 + 56) = 0;
    }
    else
    {
      *(void *)(a1 + 184) = v21;
    }
    uint64_t v23 = *(void *)(a1 + 408);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(v23 + 64);
    *(void *)(v23 + 64) = 0;
    *(void *)(v23 + 72) = 0;
  }
  *(unsigned char *)(a1 + 224) = v17;
  uint64_t v24 = *(void *)(a1 + 416);
  if (v24 && !atomic_fetch_add((atomic_ullong *volatile)(v24 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v29 = *(std::__shared_weak_count **)(a1 + 416);
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    uint64_t v25 = *(std::__shared_weak_count **)(a1 + 360);
    if (!v25) {
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v25 = *(std::__shared_weak_count **)(a1 + 360);
    if (!v25) {
      goto LABEL_25;
    }
  }
  if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    if ((*(char *)(a1 + 295) & 0x80000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
LABEL_25:
  if (*(char *)(a1 + 295) < 0) {
LABEL_26:
  }
    operator delete(*(void **)(a1 + 272));
LABEL_27:
  if (*(unsigned char *)(a1 + 256) && *(char *)(a1 + 255) < 0) {
    operator delete(v3->__r_.__value_.__l.__data_);
  }
  if (!*(unsigned char *)(a1 + 224))
  {
    std::runtime_error::runtime_error((std::runtime_error *)v89, v2);
    long long v26 = (void *)(a1 + 192);
    uint64_t v27 = *(void *)(a1 + 192);
    *(_OWORD *)&v89[16] = *(_OWORD *)(a1 + 168);
    uint64_t v28 = *(unsigned int ***)(a1 + 184);
    *(void *)unint64_t v89 = &unk_1EDC827D8;
    uint64_t v90 = v28;
    char v91 = (unsigned int *)v27;
    uint64_t v92 = *(void *)(a1 + 200);
    if (v92)
    {
      *(void *)(v27 + 16) = &v91;
      *(void *)(a1 + 184) = v26;
      *long long v26 = 0;
      *(void *)(a1 + 200) = 0;
    }
    else
    {
      uint64_t v90 = &v91;
    }
    long long v93 = *(_OWORD *)(a1 + 208);
    *(void *)(a1 + 208) = 0;
    *(void *)(a1 + 216) = 0;
    char v94 = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v82, (uint64_t)v89);
    if (*(unsigned char *)(a1 + 104))
    {
      if (!*(unsigned char *)(a1 + 96)) {
        (**(void (***)(void))(a1 + 24))();
      }
      *(unsigned char *)(a1 + 104) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v82);
    long long v48 = v83;
    unint64_t v50 = v84;
    uint64_t v49 = v85;
    *(void *)(a1 + 64) = v85;
    uint64_t v51 = a1 + 64;
    *(_OWORD *)(a1 + 40) = v48;
    *(void *)(a1 + 24) = &unk_1EDC827D8;
    uint64_t v52 = v86;
    *(void *)(a1 + 56) = v50;
    *(void *)(a1 + 72) = v52;
    if (v52)
    {
      *(void *)(v49 + 16) = v51;
      uint64_t v84 = (unsigned int **)&v85;
      uint64_t v85 = 0;
      uint64_t v86 = 0;
      uint64_t v49 = 0;
    }
    else
    {
      *(void *)(a1 + 56) = v51;
    }
    *(_OWORD *)(a1 + 80) = v87;
    long long v87 = 0uLL;
    *(unsigned char *)(a1 + 96) = 0;
    *(unsigned char *)(a1 + 104) = 1;
    v82.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v84, (unsigned int *)v49);
    MEMORY[0x192FA3C30](&v82);
    if (v94)
    {
      *(void *)unint64_t v89 = &unk_1EDC827D8;
      char v53 = (std::__shared_weak_count *)*((void *)&v93 + 1);
      if (*((void *)&v93 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v93 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v90, v91);
      MEMORY[0x192FA3C30](v89);
    }
    goto LABEL_142;
  }
  *(void *)unint64_t v89 = v2->__vftable;
  if (*(void *)v89) {
    operator new();
  }
  *(void *)&v89[8] = 0;
  v2->__vftable = 0;
  AMSCore::IAccountProvider::merge(v6, v89);
  if (!(*(unsigned int (**)(void))(*(void *)*v6 + 96))())
  {
    uint64_t v77 = v7;
    uint64_t v78 = v2;
    uint64_t v37 = *(void *)(a1 + 400);
    unint64_t v38 = *(uint64_t **)(v37 + 24);
    uint64_t v39 = *(uint64_t **)(v37 + 32);
    uint64_t v79 = v4;
    if (v38 != v39)
    {
      while (1)
      {
        AMSCore::operator==(*v38, *v6);
        if (v40) {
          break;
        }
        if (++v38 == v39)
        {
          unint64_t v38 = v39;
          break;
        }
      }
    }
    (*(void (**)(std::runtime_error *__return_ptr))(*(void *)*v6 + 56))(&v82);
    size_t v42 = v82.__vftable;
    char imp = v82.__imp_.__imp_;
    if (v82.__vftable != (std::runtime_error_vtbl *)v82.__imp_.__imp_)
    {
      size_t v43 = (void **)(a1 + 296);
      uint64_t v44 = *(void *)(a1 + 400);
      do
      {
        (*(void (**)(unsigned char *__return_ptr))(*(void *)*v6 + 128))(v89);
        if (v89[24])
        {
          uint64_t v45 = *(void *)(v44 + 160);
          *(_OWORD *)size_t v43 = *(_OWORD *)v89;
          *(void *)(a1 + 312) = *(void *)&v89[16];
          memset(v89, 0, 24);
          *(unsigned char *)(a1 + 320) = 1;
          (*(void (**)(uint64_t, uint64_t, std::runtime_error_vtbl *))(*(void *)v45 + 160))(v45, a1 + 296, v42);
          if (*(unsigned char *)(a1 + 320) && *(char *)(a1 + 319) < 0) {
            operator delete(*v43);
          }
          if (v89[24] && (v89[23] & 0x80000000) != 0) {
            operator delete(*(void **)v89);
          }
        }
        ++v42;
      }
      while (v42 != (std::runtime_error_vtbl *)imp);
      size_t v42 = v82.__vftable;
    }
    uint64_t v4 = v79;
    if (v42)
    {
      long long v46 = v82.__imp_.__imp_;
      uint64_t v47 = v42;
      if ((std::runtime_error_vtbl *)v82.__imp_.__imp_ != v42)
      {
        do
        {
          if (*(v46 - 1) < 0) {
            operator delete(*((void **)v46 - 3));
          }
          v46 -= 24;
        }
        while (v46 != (const char *)v42);
        uint64_t v47 = v82.__vftable;
      }
      v82.__imp_.__imp_ = (const char *)v42;
      operator delete(v47);
    }
    uint64_t v54 = *(uint64_t **)(v37 + 32);
    BOOL v76 = v38 != v54;
    if (v38 != v54)
    {
      unsigned int v55 = v38 + 1;
      if (v38 + 1 != v54)
      {
        do
        {
          unint64_t v38 = v55;
          uint64_t v56 = *(v55 - 1);
          *(v55 - 1) = *v55;
          *unsigned int v55 = 0;
          if (v56) {
            (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
          }
          unsigned int v55 = v38 + 1;
        }
        while (v38 + 1 != v54);
        uint64_t v54 = *(uint64_t **)(v37 + 32);
      }
      while (v54 != v38)
      {
        uint64_t v58 = *--v54;
        uint64_t v57 = v58;
        *uint64_t v54 = 0;
        if (v58) {
          (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
        }
      }
      *(void *)(v37 + 32) = v38;
    }
    (*(void (**)(void **__return_ptr))(*(void *)*v6 + 56))(&__p);
    uint64_t v59 = (void **)__p;
    unint64_t v60 = v81;
    if (__p == v81)
    {
      int v63 = 8;
      uint64_t v7 = v77;
      uint64_t v2 = v78;
      if (__p) {
        goto LABEL_124;
      }
    }
    else
    {
      uint64_t v75 = a1 + 64;
      while (1)
      {
        uint64_t v61 = *(void *)(v37 + 24);
        uint64_t v62 = *(void *)(v37 + 32);
        if (v61 != v62) {
          break;
        }
LABEL_100:
        v59 += 3;
        if (v59 == v60)
        {
          int v63 = 8;
          uint64_t v7 = v77;
          uint64_t v2 = v78;
          uint64_t v4 = v79;
          goto LABEL_123;
        }
      }
      while (1)
      {
        (*(void (**)(std::runtime_error *__return_ptr))(**(void **)v61 + 144))(&v82);
        if (!v88) {
          break;
        }
        v61 += 8;
        if (v61 == v62) {
          goto LABEL_100;
        }
      }
      std::runtime_error::runtime_error((std::runtime_error *)v89, &v82);
      *(_OWORD *)&v89[16] = v83;
      *(void *)unint64_t v89 = &unk_1EDC827D8;
      uint64_t v90 = v84;
      char v91 = (unsigned int *)v85;
      uint64_t v92 = v86;
      if (v86)
      {
        *(void *)(v85 + 16) = &v91;
        uint64_t v84 = (unsigned int **)&v85;
        uint64_t v85 = 0;
        uint64_t v86 = 0;
      }
      else
      {
        uint64_t v90 = &v91;
      }
      uint64_t v4 = v79;
      long long v93 = v87;
      long long v87 = 0uLL;
      char v94 = 1;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v95, (uint64_t)v89);
      uint64_t v7 = v77;
      uint64_t v2 = v78;
      if (*(unsigned char *)(a1 + 104))
      {
        if (!*(unsigned char *)(a1 + 96)) {
          (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
        }
        *(unsigned char *)(a1 + 104) = 0;
      }
      std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v95);
      *(_OWORD *)(a1 + 40) = v96;
      *(void *)(a1 + 24) = &unk_1EDC827D8;
      uint64_t v64 = v98;
      *(void *)(a1 + 56) = v97;
      *(void *)(a1 + 64) = v64;
      uint64_t v65 = v99;
      *(void *)(a1 + 72) = v99;
      if (v65)
      {
        *(void *)(v64 + 16) = v75;
        uint64_t v64 = 0;
        uint64_t v97 = &v98;
        uint64_t v98 = 0;
        uint64_t v99 = 0;
      }
      else
      {
        *(void *)(a1 + 56) = v75;
      }
      *(_OWORD *)(a1 + 80) = v100;
      long long v100 = 0uLL;
      *(unsigned char *)(a1 + 96) = 0;
      *(unsigned char *)(a1 + 104) = 1;
      v95.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v97, (unsigned int *)v64);
      MEMORY[0x192FA3C30](&v95);
      if (v94)
      {
        *(void *)unint64_t v89 = &unk_1EDC827D8;
        uint64_t v66 = (std::__shared_weak_count *)*((void *)&v93 + 1);
        if (*((void *)&v93 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v93 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v90, v91);
        MEMORY[0x192FA3C30](v89);
      }
      if (!v88) {
        ((void (*)(std::runtime_error *))v82.~runtime_error)(&v82);
      }
      int v63 = 3;
LABEL_123:
      uint64_t v59 = (void **)__p;
      if (__p)
      {
LABEL_124:
        uint64_t v67 = v81;
        unint64_t v68 = v59;
        if (v81 != v59)
        {
          do
          {
            if (*((char *)v67 - 1) < 0) {
              operator delete(*(v67 - 3));
            }
            v67 -= 3;
          }
          while (v67 != v59);
          unint64_t v68 = __p;
        }
        uint64_t v81 = v59;
        operator delete(v68);
        if (v63 == 8)
        {
LABEL_131:
          (*(void (**)(unsigned char *__return_ptr))(*(void *)*v6 + 48))(v89);
          int v69 = *(void **)(v37 + 32);
          if ((unint64_t)v69 >= *(void *)(*(void *)(a1 + 400) + 40))
          {
            int v71 = std::vector<std::unique_ptr<AMSCore::IMediaAccount>>::__emplace_back_slow_path<std::unique_ptr<AMSCore::IMediaAccount>>((void *)(v37 + 24), (uint64_t *)v89);
          }
          else
          {
            uint64_t v70 = *(void *)v89;
            *(void *)unint64_t v89 = 0;
            *int v69 = v70;
            int v71 = v69 + 1;
          }
          *(void *)(v37 + 32) = v71;
          uint64_t v72 = *(void *)v89;
          *(void *)unint64_t v89 = 0;
          if (v72) {
            (*(void (**)(uint64_t))(*(void *)v72 + 8))(v72);
          }
          BOOL v35 = v76;
          goto LABEL_137;
        }
LABEL_142:
        uint64_t v74 = *(void *)(a1 + 152);
        if (*(unsigned char *)(a1 + 224))
        {
          v2->__vftable = 0;
          if (v74) {
            (*(void (**)(uint64_t))(*(void *)v74 + 8))(v74);
          }
          if ((*(char *)(a1 + 351) & 0x80000000) == 0)
          {
LABEL_146:
            if (!*(unsigned char *)(a1 + 376)) {
              goto LABEL_151;
            }
            goto LABEL_150;
          }
        }
        else
        {
          (*(void (**)(std::runtime_error *))v74)(v2);
          if ((*(char *)(a1 + 351) & 0x80000000) == 0) {
            goto LABEL_146;
          }
        }
        operator delete(v4->__r_.__value_.__l.__data_);
        if (!*(unsigned char *)(a1 + 376))
        {
LABEL_151:
          *(void *)(a1 + 152) = v7;
          *(void *)a1 = 0;
          AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v2);
          return;
        }
LABEL_150:
        AMSCore::AwaitableMutex::unlock(*v5);
        goto LABEL_151;
      }
    }
    if (v63 != 8) {
      goto LABEL_142;
    }
    goto LABEL_131;
  }
  uint64_t v30 = *v6;
  *(void *)unint64_t v89 = operator new(0x40uLL);
  *(_OWORD *)&v89[8] = xmmword_18DDE9AF0;
  strcpy(*(char **)v89, "com.apple.AppleMediaServicesCore.IMediaAccount.appStoreSandbox");
  int v31 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v30 + 104))(v30, v89);
  if ((v89[23] & 0x80000000) != 0) {
    operator delete(*(void **)v89);
  }
  uint64_t v32 = *(void *)(a1 + 384);
  uint64_t v33 = *(void *)(a1 + 392);
  long long v34 = *(void **)(a1 + 400);
  if (v31)
  {
    BOOL v35 = v34[22] != 0;
    *uint64_t v6 = 0;
    v6[1] = 0;
    uint64_t v36 = (std::__shared_weak_count *)v34[23];
    v34[22] = v32;
    v34[23] = v33;
    if (!v36) {
      goto LABEL_137;
    }
LABEL_67:
    if (!atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
    goto LABEL_137;
  }
  BOOL v35 = v34[20] != 0;
  *uint64_t v6 = 0;
  v6[1] = 0;
  uint64_t v36 = (std::__shared_weak_count *)v34[21];
  v34[20] = v32;
  v34[21] = v33;
  if (v36) {
    goto LABEL_67;
  }
LABEL_137:
  if (*(unsigned char *)(a1 + 376))
  {
    AMSCore::AwaitableMutex::unlock(*v5);
    uint64_t v73 = *(void *)(a1 + 400);
    *(unsigned char *)(a1 + 376) = 0;
    AMSCore::Subject<std::string const&,AMSCore::AccountChangedMetadata>::notify(v73 + 48, (uint64_t)v4, v35);
    if (*(unsigned char *)(a1 + 104) && !*(unsigned char *)(a1 + 96)) {
      (**(void (***)(void))(a1 + 24))();
    }
    *(unsigned char *)(a1 + 96) = 1;
    *(unsigned char *)(a1 + 104) = 1;
    goto LABEL_142;
  }
  std::__throw_system_error(1, "unique_lock::unlock: not locked");
LABEL_153:
  __break(1u);
}

void sub_18DA4DC98(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t *a24,void **a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45)
{
  if (__p) {
    (*(void (**)(void *))(*(void *)__p + 8))(__p);
  }
  std::expected<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](a24);
  if (*(char *)(v45 + 351) < 0) {
    operator delete(*a25);
  }
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](a22);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DA4DDFC()
{
}

void AMSCore::EphemeralAccountProvider::saveAccount(char *__p)
{
  if (*(void *)__p) {
    BOOL v2 = __p[424] == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    uint64_t v3 = *((void *)__p + 52);
    if (v3 && !atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 52);
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    std::runtime_error v5 = (std::__shared_weak_count *)*((void *)__p + 45);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if ((__p[295] & 0x80000000) == 0) {
        goto LABEL_12;
      }
    }
    else if ((__p[295] & 0x80000000) == 0)
    {
LABEL_12:
      if (__p[256] && __p[255] < 0) {
        operator delete(*((void **)__p + 29));
      }
      if (__p[351] < 0)
      {
        operator delete(*((void **)__p + 41));
        if (!__p[376]) {
          goto LABEL_20;
        }
      }
      else if (!__p[376])
      {
        goto LABEL_20;
      }
      AMSCore::AwaitableMutex::unlock(*((std::mutex **)__p + 46));
      goto LABEL_20;
    }
    operator delete(*((void **)__p + 34));
    goto LABEL_12;
  }
LABEL_20:
  uint64_t v6 = (char *)*((void *)__p + 18);
  if (v6 == __p + 120)
  {
    (*(void (**)(char *))(*((void *)__p + 15) + 32))(__p + 120);
    if (!__p[104]) {
      goto LABEL_28;
    }
    goto LABEL_26;
  }
  if (v6) {
    (*(void (**)(char *))(*(void *)v6 + 40))(v6);
  }
  if (__p[104])
  {
LABEL_26:
    if (!__p[96]) {
      (**((void (***)(void))__p + 3))();
    }
  }
LABEL_28:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)__p + 49);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  operator delete(__p);
}

void std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_18DA4E0C8(void *a1)
{
  __cxa_begin_catch(a1);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 96), 2uLL)) {
    (*(void (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  __cxa_rethrow();
}

void sub_18DA4E0F4(_Unwind_Exception *a1)
{
}

void AMSCore::EphemeralAccountProvider::getMediaAccountUnlocked(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (char *)operator new(0xE8uLL);
  *(void *)uint64_t v4 = AMSCore::EphemeralAccountProvider::getMediaAccountUnlocked;
  *((void *)v4 + 1) = AMSCore::EphemeralAccountProvider::getMediaAccountUnlocked;
  v4[152] = 0;
  v4[176] = 0;
  if (*(unsigned char *)(a3 + 24))
  {
    *(_OWORD *)(v4 + 152) = *(_OWORD *)a3;
    *((void *)v4 + 21) = *(void *)(a3 + 16);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    v4[176] = 1;
  }
  *((void *)v4 + 23) = *(void *)(a3 + 32);
  *((_OWORD *)v4 + 12) = *(_OWORD *)(a3 + 40);
  *((void *)v4 + 26) = *(void *)(a3 + 56);
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  v4[24] = 0;
  v4[104] = 0;
  *((void *)v4 + 14) = 0;
  *((void *)v4 + 18) = 0;
  std::shared_ptr<AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise,AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v5, (uint64_t)(v4 + 16));
}

void sub_18DA4E3E4(void *a1)
{
}

void sub_18DA4E400()
{
}

void *std::vector<std::unique_ptr<AMSCore::IMediaAccount>>::__emplace_back_slow_path<std::unique_ptr<AMSCore::IMediaAccount>>(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1] - *a1;
  uint64_t v3 = v2 >> 3;
  unint64_t v4 = (v2 >> 3) + 1;
  if (v4 >> 61) {
    std::vector<std::string>::__throw_length_error[abi:fe180100]();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 2 > v4) {
    unint64_t v4 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v4;
  }
  if (v8)
  {
    if (v8 >> 61) {
      std::__throw_bad_array_new_length[abi:fe180100]();
    }
    long long v9 = (char *)operator new(8 * v8);
  }
  else
  {
    long long v9 = 0;
  }
  uint64_t v10 = &v9[8 * v3];
  uint64_t v11 = &v9[8 * v8];
  uint64_t v12 = *a2;
  *a2 = 0;
  *(void *)uint64_t v10 = v12;
  BOOL v13 = v10 + 8;
  long long v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    goto LABEL_25;
  }
  unint64_t v16 = (unint64_t)&v15[-*a1 - 8];
  if (v16 > 0x77
    && (&v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] >= v10 || &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] >= v15))
  {
    uint64_t v17 = (v16 >> 3) + 1;
    v10 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    char v18 = v15 - 32;
    uint64_t v19 = &v9[8 * v3 - 16];
    uint64_t v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v22 = *(_OWORD *)v18;
      long long v21 = *((_OWORD *)v18 + 1);
      *(_OWORD *)char v18 = 0uLL;
      *((_OWORD *)v18 + 1) = 0uLL;
      v18 -= 32;
      *((_OWORD *)v19 - 1) = v22;
      *(_OWORD *)uint64_t v19 = v21;
      v19 -= 32;
      v20 -= 4;
    }
    while (v20);
    if (v17 == (v17 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_20;
    }
    v15 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  }
  do
  {
    uint64_t v23 = *((void *)v15 - 1);
    v15 -= 8;
    *(void *)uint64_t v15 = 0;
    *((void *)v10 - 1) = v23;
    v10 -= 8;
  }
  while (v15 != v14);
LABEL_20:
  uint64_t v15 = (char *)*a1;
  uint64_t v24 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  while (v24 != v15)
  {
    uint64_t v26 = *((void *)v24 - 1);
    v24 -= 8;
    uint64_t v25 = v26;
    *(void *)uint64_t v24 = 0;
    if (v26) {
      (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
    }
  }
LABEL_25:
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

void AMSCore::AwaitableMutex::unlock(std::mutex *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  std::mutex::lock(this);
  uint64_t v2 = *(void *)&this[1].__m_.__opaque[16];
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)&this[1].__m_.__opaque[8];
    unint64_t v4 = (void (**)(void))v3[2];
    uint64_t v5 = *v3;
    *(void *)(v5 + 8) = v3[1];
    *(void *)v3[1] = v5;
    *(void *)&this[1].__m_.__opaque[16] = v2 - 1;
    operator delete(v3);
    std::mutex::unlock(this);
    AMSCore::ServiceProvider<AMSCore::ISchedulingProvider>::getDefaultOrNull(&v11);
    if (v11)
    {
      v13[0] = &unk_1EDC82948;
      v13[1] = v4;
      long long v14 = v13;
      (*(void (**)(void *__return_ptr))(*(void *)v11 + 16))(v9);
      int v6 = v10;
      if (!v10) {
        (*(void (**)(void *))v9[0])(v9);
      }
      if (v14 == v13)
      {
        (*(void (**)(void *))(v13[0] + 32))(v13);
        if (v6)
        {
LABEL_9:
          uint64_t v7 = v12;
          if (v12)
          {
            if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
          return;
        }
      }
      else
      {
        if (v14) {
          (*(void (**)(void *))(*v14 + 40))(v14);
        }
        if (v6) {
          goto LABEL_9;
        }
      }
    }
    unint64_t v8 = v12;
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    (*v4)(v4);
  }
  else
  {
    LOBYTE(this[1].__m_.__sig) = 0;
    std::mutex::unlock(this);
  }
}

void sub_18DA4E828(_Unwind_Exception *a1)
{
  std::function<void ()(void)>::~function((void *)(v1 - 56));
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v1 - 72);
  _Unwind_Resume(a1);
}

void AMSCore::Subject<std::string const&,AMSCore::AccountChangedMetadata>::notify(uint64_t a1, uint64_t a2, int a3)
{
  std::mutex::lock((std::mutex *)a1);
  uint64_t v7 = *(char **)(a1 + 64);
  int v6 = *(char **)(a1 + 72);
  if (v7 != v6)
  {
    unint64_t v8 = *(char **)(a1 + 64);
    while (1)
    {
      uint64_t v9 = *((void *)v8 + 1);
      if (!v9 || *(void *)(v9 + 8) == -1) {
        break;
      }
      v8 += 16;
      if (v8 == v6)
      {
        size_t v10 = v6 - v7;
        if (v6 == v7) {
          goto LABEL_47;
        }
LABEL_7:
        if ((v10 & 0x8000000000000000) != 0) {
          std::vector<std::string>::__throw_length_error[abi:fe180100]();
        }
        uint64_t v11 = (std::__shared_weak_count **)operator new(v10);
        uint64_t v12 = v11;
        uint64_t v13 = 0;
        do
        {
          long long v14 = &v7[v13];
          uint64_t v15 = (char *)&v11[(unint64_t)v13 / 8];
          uint64_t v16 = *(void *)&v7[v13 + 8];
          *(void *)uint64_t v15 = *(void *)&v7[v13];
          *((void *)v15 + 1) = v16;
          if (v16) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 16), 1uLL, memory_order_relaxed);
          }
          v13 += 16;
        }
        while (v14 + 16 != v6);
        uint64_t v21 = v13;
        unint64_t v22 = v13 & 0xFFFFFFFFFFFFFFF0;
        std::mutex::unlock((std::mutex *)a1);
        if (v22)
        {
          uint64_t v23 = (std::__shared_weak_count **)((char *)v12 + v22);
          uint64_t v24 = 2 * (v21 >> 4);
          uint64_t v25 = v12 + 1;
          uint64_t v26 = v24 * 8;
          do
          {
            if (*v25)
            {
              uint64_t v27 = std::__shared_weak_count::lock(*v25);
              if (v27)
              {
                uint64_t v28 = v27;
                uint64_t v29 = (uint64_t)*(v25 - 1);
                if (v29)
                {
                  int v34 = a3;
                  uint64_t v30 = *(void *)(v29 + 24);
                  if (!v30) {
                    std::__throw_bad_function_call[abi:fe180100]();
                  }
                  (*(void (**)(uint64_t, uint64_t, int *))(*(void *)v30 + 48))(v30, a2, &v34);
                }
                if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                  std::__shared_weak_count::__release_weak(v28);
                }
              }
            }
            v25 += 2;
            v26 -= 16;
          }
          while (v26);
          if (v12 != v23)
          {
            do
            {
              int v31 = v12[v24 - 1];
              if (v31) {
                std::__shared_weak_count::__release_weak(v31);
              }
              v24 -= 2;
            }
            while (v24 * 8);
          }
        }
        operator delete(v12);
        return;
      }
    }
    if (v8 != v6)
    {
      uint64_t v17 = v8 + 16;
      if (v8 + 16 != v6)
      {
        do
        {
          uint64_t v18 = *((void *)v17 + 1);
          if (v18 && *(void *)(v18 + 8) != -1)
          {
            uint64_t v19 = *(void *)v17;
            *(void *)uint64_t v17 = 0;
            *((void *)v17 + 1) = 0;
            uint64_t v20 = (std::__shared_weak_count *)*((void *)v8 + 1);
            *(void *)unint64_t v8 = v19;
            *((void *)v8 + 1) = v18;
            if (v20) {
              std::__shared_weak_count::__release_weak(v20);
            }
            v8 += 16;
          }
          v17 += 16;
        }
        while (v17 != v6);
        int v6 = *(char **)(a1 + 72);
      }
    }
    if (v6 < v8)
    {
      __break(1u);
      return;
    }
    if (v8 != v6)
    {
      uint64_t v32 = v6;
      int v6 = v8;
      while (v32 != v8)
      {
        uint64_t v33 = (std::__shared_weak_count *)*((void *)v32 - 1);
        if (v33) {
          std::__shared_weak_count::__release_weak(v33);
        }
        v32 -= 16;
      }
      *(void *)(a1 + 72) = v8;
    }
    uint64_t v7 = *(char **)(a1 + 64);
    size_t v10 = v6 - v7;
    if (v6 != v7) {
      goto LABEL_7;
    }
  }
LABEL_47:
  std::mutex::unlock((std::mutex *)a1);
}

uint64_t std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    AMSCore::AwaitableMutex::unlock(*(std::mutex **)a1);
  }
  return a1;
}

void AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception()
{
  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

uint64_t sub_18DA4EBC0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, long long a19, uint64_t a20,uint64_t a21,uint64_t a22,long long a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v41, (uint64_t)v38);
  if (*(unsigned char *)(v29 + 88))
  {
    if (!*(unsigned char *)(v29 + 80)) {
      ((void (*)(std::runtime_error *))v30->~runtime_error)(v30);
    }
    *(unsigned char *)(v29 + 88) = 0;
  }
  std::runtime_error::runtime_error(v30, v41);
  std::runtime_error v31 = v41[1];
  uint64_t v33 = v42;
  uint64_t v32 = v43;
  *(void *)(v29 + 48) = v43;
  uint64_t v34 = v29 + 48;
  *(std::runtime_error *)(v29 + 24) = v31;
  *(void *)(v29 + 8) = &unk_1EDC827D8;
  uint64_t v35 = v44;
  *(void *)(v29 + 40) = v33;
  *(void *)(v29 + 56) = v35;
  if (v35)
  {
    *(void *)(v32 + 16) = v34;
    size_t v42 = &v43;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v32 = 0;
  }
  else
  {
    *(void *)(v29 + 40) = v34;
  }
  *(_OWORD *)(v29 + 64) = v45;
  long long v45 = 0uLL;
  *(unsigned char *)(v29 + 80) = 0;
  *(unsigned char *)(v29 + 88) = 1;
  v41[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v42, (unsigned int *)v32);
  MEMORY[0x192FA3C30](v41);
  v38[0] = &unk_1EDC827D8;
  uint64_t v36 = v40;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v39, v39[1]);
  return MEMORY[0x192FA3C30](v38);
}

uint64_t AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(uint64_t result)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void (**)(void))atomic_exchange((atomic_ullong *volatile)(*(void *)result + 96), 1uLL);
  if (v1)
  {
    uint64_t v2 = result;
    if (v1 == (void (**)(void))2) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result - 8))(*(void *)result - 16);
    }
    unint64_t v4 = (uint64_t *)(*(void *)result + 128);
    uint64_t v3 = *v4;
    if (*v4)
    {
      if (v3 == *(void *)v2 + 104)
      {
        uint64_t v17 = v16;
        (*(void (**)(uint64_t, void *))(*(void *)v3 + 24))(v3, v16);
      }
      else
      {
        uint64_t v17 = *(void **)(*(void *)v2 + 128);
        *unint64_t v4 = 0;
      }
    }
    else
    {
      uint64_t v17 = 0;
    }
    uint64_t result = (uint64_t)v17;
    if (v17)
    {
      uint64_t v5 = *(void *)v2;
      if (!*(unsigned char *)(v5 + 88))
      {
        __break(1u);
        return result;
      }
      if (*(unsigned char *)(v5 + 80))
      {
        char v15 = 1;
      }
      else
      {
        std::runtime_error::runtime_error(&v9, (const std::runtime_error *)(v5 + 8));
        int v6 = (void *)(v5 + 48);
        uint64_t v7 = *(void *)(v5 + 48);
        long long v10 = *(_OWORD *)(v5 + 24);
        unint64_t v8 = *(uint64_t **)(v5 + 40);
        v9.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        uint64_t v11 = v8;
        uint64_t v12 = v7;
        if (*(void *)(v5 + 56))
        {
          *(void *)(v7 + 16) = &v12;
          *(void *)(v5 + 40) = v6;
          *int v6 = 0;
          *(void *)(v5 + 56) = 0;
        }
        else
        {
          uint64_t v11 = &v12;
        }
        long long v14 = *(_OWORD *)(v5 + 64);
        *(void *)(v5 + 64) = 0;
        *(void *)(v5 + 72) = 0;
        uint64_t result = (uint64_t)v17;
        char v15 = 0;
        if (!v17) {
          std::__throw_bad_function_call[abi:fe180100]();
        }
      }
      (*(void (**)(uint64_t, std::runtime_error *))(*(void *)result + 48))(result, &v9);
      if (!v15) {
        ((void (*)(std::runtime_error *))v9.~runtime_error)(&v9);
      }
    }
    else
    {
      (*v1)(v1);
    }
    uint64_t result = (uint64_t)v17;
    if (v17 == v16)
    {
      return (*(uint64_t (**)(void *))(v16[0] + 32))(v16);
    }
    else if (v17)
    {
      return (*(uint64_t (**)(void))(*v17 + 40))();
    }
  }
  return result;
}

void sub_18DA4EFB4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<std::coroutine_handle<void>,std::allocator<std::coroutine_handle<void>>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::coroutine_handle<void>,std::allocator<std::coroutine_handle<void>>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x800000018DDF22D9
    || ((v3 & 0x800000018DDF22D9 & 0x8000000000000000) != 0) != __OFSUB__(v3, 0x800000018DDF22D9)
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000018DDF22D9 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::coroutine_handle<void>,std::allocator<std::coroutine_handle<void>>,void ()(void)>::operator()(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 8))();
}

uint64_t std::__function::__func<std::coroutine_handle<void>,std::allocator<std::coroutine_handle<void>>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDC82948;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<std::coroutine_handle<void>,std::allocator<std::coroutine_handle<void>>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EDC82948;
  result[1] = v3;
  return result;
}

void std::__function::__func<std::coroutine_handle<void>,std::allocator<std::coroutine_handle<void>>,void ()(void)>::~__func()
{
}

uint64_t std::__shared_ptr_pointer<AMSCore::IMediaAccount  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN7AMSCore13IMediaAccountEEE"
    || ((v3 & (unint64_t)"NSt3__114default_deleteIN7AMSCore13IMediaAccountEEE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "NSt3__114default_deleteIN7AMSCore13IMediaAccountEEE")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN7AMSCore13IMediaAccountEEE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::IMediaAccount  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::IMediaAccount  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void AMSCore::EphemeralAccountProvider::getMediaAccountUnlocked(char *__p)
{
  uint64_t v2 = __p + 120;
  unint64_t v3 = (char *)*((void *)__p + 18);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    if (!__p[104]) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
  if (v3) {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  if (__p[104])
  {
LABEL_7:
    uint64_t v4 = *((void *)__p + 3);
    if (__p[96])
    {
      *((void *)__p + 3) = 0;
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
    }
    else
    {
      (*(void (**)(char *))v4)(__p + 24);
    }
  }
LABEL_11:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (__p[215] < 0) {
    operator delete(*((void **)__p + 24));
  }
  if (__p[176] && __p[175] < 0) {
    operator delete(*((void **)__p + 19));
  }
  operator delete(__p);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<void,AMSCore::Error>::Promise *,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<void,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskIvNS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskIvNS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskIvNS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskIvNS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<void,AMSCore::Error>::Promise *,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<void,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 96), 2uLL)) {
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::Task<void,AMSCore::Error>::Promise *,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<void,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void AMSCore::EphemeralAccountProvider::removeAccount(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (char *)operator new(0x158uLL);
  *(void *)uint64_t v4 = AMSCore::EphemeralAccountProvider::removeAccount;
  *((void *)v4 + 1) = AMSCore::EphemeralAccountProvider::removeAccount;
  *((void *)v4 + 36) = a1;
  *(_OWORD *)(v4 + 296) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  v4[24] = 0;
  v4[104] = 0;
  *((void *)v4 + 14) = 0;
  *((void *)v4 + 18) = 0;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v5, (uint64_t)(v4 + 16));
}

void sub_18DA4FEB8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void (***a10)(void), void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (!*(unsigned char *)(v26 + 224)) {
    (**a10)(a10);
  }
  if (*(char *)(v26 + 255) < 0) {
    operator delete(*v28);
  }
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](v27);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DA4FF68()
{
}

void AMSCore::EphemeralAccountProvider::removeAccount(char *a1)
{
  unint64_t v3 = (std::runtime_error *)(a1 + 152);
  uint64_t v4 = (void (__cdecl *)(std::runtime_error *__hidden))(a1 + 232);
  std::runtime_error v5 = (std::mutex **)(a1 + 256);
  int v6 = a1 + 16;
  if (a1[336]) {
    goto LABEL_2;
  }
  uint64_t v13 = *((void *)a1 + 36);
  *((void *)a1 + 32) = v13 + 192;
  a1[264] = 1;
  char v15 = *(uint64_t **)(v13 + 24);
  long long v14 = *(uint64_t **)(v13 + 32);
  if (v15 == v14) {
    goto LABEL_17;
  }
  uint64_t v1 = (uint64_t)(a1 + 272);
  while (1)
  {
    AMSCore::operator==(*v15, *((void *)a1 + 37));
    if (v16) {
      break;
    }
    if (++v15 == v14)
    {
      char v15 = v14;
      break;
    }
  }
  uint64_t v17 = *(uint64_t **)(v13 + 32);
  if (v15 == v17)
  {
LABEL_17:
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v55);
    uint64_t v4 = v55[0].__vftable[-1].~runtime_error;
    uint64_t v1 = (uint64_t)&unk_1EB38B000;
    uint64_t v7 = &v64;
    {
LABEL_18:
      *std::ios_base::iword((std::ios_base *)((char *)v55 + (void)v4), *(_DWORD *)(v1 + 2248)) = 1;
      uint64_t v20 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v55, (uint64_t)"Attempting to delete a non-existent account. account = ", 55);
      AMSCore::operator<<(v20, *((void *)a1 + 37));
      std::stringbuf::str[abi:fe180100]((uint64_t)&v55[0].__imp_, &v63);
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,std::string>((uint64_t)&v64, 7u, (uint64_t)&v63);
      if (a1[104])
      {
        if (!a1[96]) {
          (**((void (***)(uint64_t))a1 + 3))((uint64_t)(a1 + 24));
        }
        a1[104] = 0;
      }
      std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v64);
      long long v21 = v65;
      uint64_t v23 = v66;
      uint64_t v22 = v67;
      *((void *)a1 + 8) = v67;
      uint64_t v24 = a1 + 64;
      *(_OWORD *)(a1 + 40) = v21;
      *((void *)a1 + 3) = &unk_1EDC827D8;
      uint64_t v25 = v68;
      *((void *)a1 + 7) = v23;
      *((void *)a1 + 9) = v25;
      if (v25)
      {
        *(void *)(v22 + 16) = v24;
        uint64_t v66 = &v67;
        uint64_t v67 = 0;
        uint64_t v68 = 0;
        uint64_t v22 = 0;
      }
      else
      {
        *((void *)a1 + 7) = v24;
      }
      *((std::runtime_error *)a1 + 5) = *(std::runtime_error *)((char *)v7 + 56);
      long long v69 = 0uLL;
      a1[96] = 0;
      a1[104] = 1;
      v64.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v66, (unsigned int *)v22);
      MEMORY[0x192FA3C30](&v64);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v63.__r_.__value_.__l.__data_);
      }
      v55[0].__vftable = (std::runtime_error_vtbl *)*MEMORY[0x1E4FBA418];
      *(std::runtime_error_vtbl **)((char *)&v55[0].__vftable + (unint64_t)v55[0].__vftable[-1].~runtime_error) = *(std::runtime_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
      v55[0].__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
      if (v61 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x192FA3FD0](&v62);
      LODWORD(v1) = 3;
      goto LABEL_77;
    }
LABEL_96:
    {
      *(_DWORD *)(v1 + 2248) = std::ios_base::xalloc();
    }
    goto LABEL_18;
  }
  uint64_t v18 = v15 + 1;
  if (v15 + 1 != v17)
  {
    do
    {
      char v15 = v18;
      uint64_t v19 = *(v18 - 1);
      *(v18 - 1) = *v18;
      *uint64_t v18 = 0;
      if (v19) {
        (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
      }
      uint64_t v18 = v15 + 1;
    }
    while (v15 + 1 != v17);
    uint64_t v17 = *(uint64_t **)(v13 + 32);
  }
  while (v17 != v15)
  {
    uint64_t v47 = *--v17;
    uint64_t v46 = v47;
    *uint64_t v17 = 0;
    if (v47) {
      (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
    }
  }
  long long v48 = (const AMSCore::IMediaAccount *)*((void *)a1 + 37);
  *(void *)(v13 + 32) = v15;
  AMSCore::EphemeralAccountProvider::getCookieProviderKey((std::string *)v4, v48);
  uint64_t v49 = *((void *)a1 + 36);
  unint64_t v50 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(v49 + 136, (const void **)v4);
  *((void *)a1 + 39) = v50;
  if ((uint64_t *)(v49 + 144) != v50)
  {
    (*(void (**)(uint64_t))(*(void *)v50[7] + 32))(v50[7]);
    long long v51 = *((_OWORD *)a1 + 17);
    *((_OWORD *)a1 + 20) = v51;
    *(void *)uint64_t v1 = 0;
    *((void *)a1 + 35) = 0;
    if (!atomic_load_explicit((atomic_ullong *volatile)(v51 + 96), memory_order_acquire))
    {
      a1[336] = 1;
      if (!atomic_exchange((atomic_ullong *volatile)(*((void *)a1 + 40) + 96), (unint64_t)a1)) {
        return;
      }
    }
LABEL_2:
    uint64_t v7 = (std::runtime_error *)*((void *)a1 + 40);
    if (!LOBYTE(v7[5].__imp_.__imp_))
    {
LABEL_95:
      __break(1u);
      goto LABEL_96;
    }
    char v8 = (char)v7[5].__vftable;
    if (!v8)
    {
      std::runtime_error::runtime_error(v3, (const std::runtime_error *)&v7->__imp_);
      *(std::runtime_error *)(a1 + 168) = *(std::runtime_error *)((char *)v7 + 24);
      std::runtime_error v9 = (const char *)&v7[3];
      long long v10 = v7[3].__vftable;
      *((void *)a1 + 24) = v10;
      uint64_t v11 = (const char *(__cdecl *)(const std::runtime_error *__hidden))(a1 + 192);
      *((void *)a1 + 19) = &unk_1EDC827D8;
      *((void *)a1 + 23) = v7[2].__imp_.__imp_;
      char imp = v7[3].__imp_.__imp_;
      *((void *)a1 + 25) = imp;
      if (imp)
      {
        v10->what = v11;
        v7[2].__imp_.__imp_ = v9;
        *(void *)std::runtime_error v9 = 0;
        v7[3].__imp_.__imp_ = 0;
      }
      else
      {
        *((void *)a1 + 23) = v11;
      }
      uint64_t v26 = *((void *)a1 + 40);
      *((_OWORD *)a1 + 13) = *(_OWORD *)(v26 + 64);
      *(void *)(v26 + 64) = 0;
      *(void *)(v26 + 72) = 0;
    }
    a1[224] = v8;
    uint64_t v27 = *((void *)a1 + 41);
    if (v27 && !atomic_fetch_add((atomic_ullong *volatile)(v27 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v36 = (std::__shared_weak_count *)*((void *)a1 + 41);
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
      uint64_t v28 = (std::__shared_weak_count *)*((void *)a1 + 35);
      if (!v28) {
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v28 = (std::__shared_weak_count *)*((void *)a1 + 35);
      if (!v28) {
        goto LABEL_30;
      }
    }
    if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      int v29 = a1[224];
      if (a1[224])
      {
LABEL_31:
        std::__tree<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>>>::erase((void *)(*((void *)a1 + 36) + 136), *((void *)a1 + 39));
        uint64_t v1 = 0;
        if (a1[224]) {
          goto LABEL_32;
        }
        goto LABEL_59;
      }
LABEL_43:
      std::runtime_error::runtime_error(v55, v3);
      uint64_t v37 = a1 + 192;
      uint64_t v38 = *((void *)a1 + 24);
      v55[1] = *(std::runtime_error *)(a1 + 168);
      uint64_t v39 = (unsigned int **)*((void *)a1 + 23);
      v55[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v56 = v39;
      uint64_t v57 = (unsigned int *)v38;
      if (*((void *)a1 + 25))
      {
        *(void *)(v38 + 16) = &v57;
        *((void *)a1 + 23) = v37;
        *uint64_t v37 = 0;
        *((void *)a1 + 25) = 0;
      }
      else
      {
        uint64_t v56 = &v57;
      }
      long long v59 = *((_OWORD *)a1 + 13);
      *((void *)a1 + 26) = 0;
      *((void *)a1 + 27) = 0;
      LOBYTE(__p) = 1;
      uint64_t v7 = &v64;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v64, (uint64_t)v55);
      if (a1[104])
      {
        if (!a1[96]) {
          (**((void (***)(uint64_t))a1 + 3))((uint64_t)(a1 + 24));
        }
        a1[104] = 0;
      }
      std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v64);
      long long v40 = v65;
      size_t v42 = v66;
      uint64_t v41 = v67;
      *((void *)a1 + 8) = v67;
      uint64_t v43 = a1 + 64;
      *(_OWORD *)(a1 + 40) = v40;
      *((void *)a1 + 3) = &unk_1EDC827D8;
      uint64_t v44 = v68;
      *((void *)a1 + 7) = v42;
      *((void *)a1 + 9) = v44;
      if (v44)
      {
        *(void *)(v41 + 16) = v43;
        uint64_t v66 = &v67;
        uint64_t v67 = 0;
        uint64_t v68 = 0;
        uint64_t v41 = 0;
      }
      else
      {
        *((void *)a1 + 7) = v43;
      }
      *((_OWORD *)a1 + 5) = v69;
      long long v69 = 0uLL;
      a1[96] = 0;
      a1[104] = 1;
      v64.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v66, (unsigned int *)v41);
      MEMORY[0x192FA3C30](&v64);
      if ((_BYTE)__p)
      {
        uint64_t v7 = (std::runtime_error *)&v56;
        v55[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        long long v45 = (std::__shared_weak_count *)*((void *)&v59 + 1);
        if (*((void *)&v59 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v59 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v56, v57);
        MEMORY[0x192FA3C30](v55);
      }
      uint64_t v1 = 3;
      if (a1[224])
      {
LABEL_32:
        if (v29)
        {
LABEL_33:
          if (a1[264]) {
            goto LABEL_34;
          }
          std::__throw_system_error(1, "unique_lock::unlock: not locked");
          goto LABEL_95;
        }
LABEL_60:
        if (a1[255] < 0) {
          goto LABEL_38;
        }
        goto LABEL_61;
      }
LABEL_59:
      ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
      if (v29) {
        goto LABEL_33;
      }
      goto LABEL_60;
    }
LABEL_30:
    int v29 = a1[224];
    if (a1[224]) {
      goto LABEL_31;
    }
    goto LABEL_43;
  }
LABEL_34:
  AMSCore::AwaitableMutex::unlock(*v5);
  uint64_t v34 = *((void *)a1 + 37);
  a1[264] = 0;
  uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 64))(v34);
  AMSCore::Subject<std::string const&,AMSCore::AccountChangedMetadata>::notify(*((void *)a1 + 36) + 48, v35, 2);
  if (a1[104] && !a1[96]) {
    (**((void (***)(uint64_t))a1 + 3))((uint64_t)(a1 + 24));
  }
  a1[96] = 1;
  a1[104] = 1;
  LODWORD(v1) = 3;
  if (a1[255] < 0)
  {
LABEL_38:
    operator delete(*(void **)v4);
    if (!a1[264]) {
      goto LABEL_78;
    }
LABEL_77:
    AMSCore::AwaitableMutex::unlock(*v5);
    goto LABEL_78;
  }
LABEL_61:
  if (a1[264]) {
    goto LABEL_77;
  }
LABEL_78:
  if (v1 == 3)
  {
    *((void *)a1 + 19) = v6;
    *(void *)a1 = 0;
    AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v3);
    return;
  }
  uint64_t v52 = (char *)*((void *)a1 + 18);
  if (v52 != a1 + 120)
  {
    if (v52) {
      (*(void (**)(char *))(*(void *)v52 + 40))(v52);
    }
    if (!a1[104]) {
      goto LABEL_88;
    }
    goto LABEL_86;
  }
  (*(void (**)(char *))(*((void *)a1 + 15) + 32))(a1 + 120);
  if (a1[104])
  {
LABEL_86:
    if (!a1[96]) {
      (**((void (***)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a1 + 3))((uint64_t)(a1 + 24), v30, v31, v32, v33);
    }
  }
LABEL_88:
  uint64_t v53 = *((void *)a1 + 38);
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v53)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)a1 + 38) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v54 = (std::__shared_weak_count *)*((void *)a1 + 38);
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  operator delete(a1);
}

void sub_18DA50994(void *a1)
{
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](v1);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DA50A3C()
{
}

void AMSCore::EphemeralAccountProvider::removeAccount(char *__p)
{
  if (*(void *)__p) {
    BOOL v2 = __p[336] == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    uint64_t v3 = *((void *)__p + 41);
    if (v3 && !atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 41);
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    std::runtime_error v5 = (std::__shared_weak_count *)*((void *)__p + 35);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if ((__p[255] & 0x80000000) == 0)
      {
LABEL_11:
        if (!__p[264]) {
          goto LABEL_16;
        }
LABEL_15:
        AMSCore::AwaitableMutex::unlock(*((std::mutex **)__p + 32));
        goto LABEL_16;
      }
    }
    else if ((__p[255] & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(*((void **)__p + 29));
    if (!__p[264]) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_16:
  int v6 = (char *)*((void *)__p + 18);
  if (v6 == __p + 120)
  {
    (*(void (**)(char *))(*((void *)__p + 15) + 32))(__p + 120);
    if (!__p[104]) {
      goto LABEL_24;
    }
    goto LABEL_22;
  }
  if (v6) {
    (*(void (**)(char *))(*(void *)v6 + 40))(v6);
  }
  if (__p[104])
  {
LABEL_22:
    if (!__p[96]) {
      (**((void (***)(void))__p + 3))();
    }
  }
LABEL_24:
  uint64_t v7 = *((void *)__p + 38);
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v7 && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)__p + 38) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    char v8 = (std::__shared_weak_count *)*((void *)__p + 38);
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(__p);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,std::string>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = a2;
  AMSCore::StringUtils::join<std::string>(&__what_arg, a3);
  *(void *)&v15.__val_ = v4;
  v15.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v9, v15, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  v9.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  long long v10 = &v11;
  long long v13 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v9);
  *(std::error_code *)(a1 + 16) = v9.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v5 = v11;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = a1 + 40;
  uint64_t v7 = v12;
  *(void *)(a1 + 48) = v12;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    uint64_t v5 = 0;
    long long v10 = &v11;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v6;
  }
  *(_OWORD *)(a1 + 56) = v13;
  long long v13 = 0uLL;
  v9.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v5);
  return MEMORY[0x192FA3C30](&v9);
}

void sub_18DA50DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::EphemeralAccountProvider::getCookieProviderKey(std::string *this, const AMSCore::IMediaAccount *a2)
{
  uint64_t v4 = (*(uint64_t (**)(const AMSCore::IMediaAccount *))(*(void *)a2 + 72))(a2);
  std::to_string(this, *(void *)(v4 + 32));
  std::string __p = operator new(0x40uLL);
  long long v23 = xmmword_18DDE9AF0;
  strcpy((char *)__p, "com.apple.AppleMediaServicesCore.IMediaAccount.appStoreSandbox");
  int v5 = (*(uint64_t (**)(const AMSCore::IMediaAccount *, void **))(*(void *)a2 + 104))(a2, &__p);
  int v6 = v5;
  if (SHIBYTE(v23) < 0)
  {
    operator delete(__p);
    if (!v6) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  int v7 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  std::string::size_type v8 = this->__r_.__value_.__r.__words[2];
  if (v7 >= 0) {
    unint64_t v9 = 22;
  }
  else {
    unint64_t v9 = (v8 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  if (v7 >= 0) {
    size_t size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = this->__r_.__value_.__l.__size_;
  }
  if (v9 - size >= 8)
  {
    std::error_code v15 = (std::string *)this->__r_.__value_.__r.__words[0];
    if (v7 >= 0) {
      std::error_code v15 = this;
    }
    *(std::string::size_type *)((char *)v15->__r_.__value_.__r.__words + size) = 0x786F62646E61732DLL;
    std::string::size_type v16 = size + 8;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v16;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v16 & 0x7F;
    }
    uint64_t v17 = (char *)v15 + v16;
  }
  else
  {
    unint64_t v11 = size + 8;
    if (0x7FFFFFFFFFFFFFF6 - v9 < size + 8 - v9) {
      std::string::__throw_length_error[abi:fe180100]();
    }
    uint64_t v12 = this;
    if ((v8 & 0x8000000000000000) != 0) {
      uint64_t v12 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    if (v9 > 0x3FFFFFFFFFFFFFF2)
    {
      size_t v14 = 0x7FFFFFFFFFFFFFF7;
    }
    else
    {
      unint64_t v13 = 2 * v9;
      if (v11 > 2 * v9) {
        unint64_t v13 = size + 8;
      }
      if (v13 >= 0x17)
      {
        unint64_t v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        uint64_t v19 = v13 | 7;
        if (v19 == 23) {
          uint64_t v19 = v18;
        }
        size_t v14 = v19 + 1;
      }
      else
      {
        size_t v14 = 23;
      }
    }
    uint64_t v20 = (char *)operator new(v14);
    long long v21 = v20;
    if (size) {
      memmove(v20, v12, size);
    }
    *(void *)&v21[size] = 0x786F62646E61732DLL;
    if (v9 != 22) {
      operator delete(v12);
    }
    this->__r_.__value_.__l.__size_ = v11;
    this->__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
    this->__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
    uint64_t v17 = &v21[v11];
  }
  *uint64_t v17 = 0;
}

void sub_18DA51018(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>>>::erase(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 8);
  if (v3)
  {
    do
    {
      uint64_t v4 = v3;
      uint64_t v3 = (void *)*v3;
    }
    while (v3);
  }
  else
  {
    int v5 = (void *)a2;
    do
    {
      uint64_t v4 = (void *)v5[2];
      BOOL v6 = *v4 == (void)v5;
      int v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2) {
    *a1 = v4;
  }
  int v7 = (uint64_t *)a1[1];
  --a1[2];
  std::__tree_remove[abi:fe180100]<std::__tree_node_base<void *> *>(v7, (uint64_t *)a2);
  std::string::size_type v8 = *(std::__shared_weak_count **)(a2 + 64);
  if (!v8 || atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*(char *)(a2 + 55) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (*(char *)(a2 + 55) < 0) {
LABEL_12:
  }
    operator delete(*(void **)(a2 + 32));
LABEL_13:
  operator delete((void *)a2);
}

uint64_t AMSCore::StringUtils::join<std::string>(std::string *a1, uint64_t a2)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v8);
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(void *)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v8, v5, v6);
  std::stringbuf::str[abi:fe180100]((uint64_t)v9, a1);
  uint64_t v8 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v9[-1] + *(void *)(v8 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v9[0] = MEMORY[0x1E4FBA470] + 16;
  if (v10 < 0) {
    operator delete((void *)v9[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FA3FD0](&v11);
}

void *std::function<void ()(std::string const&,AMSCore::AccountChangedMetadata)>::~function(void *a1)
{
  BOOL v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<std::function<void ()(std::string const&,AMSCore::AccountChangedMetadata)>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = a1 + 24;
  uint64_t result = *(void *)(a1 + 48);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void std::__shared_ptr_emplace<std::function<void ()(std::string const&,AMSCore::AccountChangedMetadata)>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC843C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<std::function<void ()(std::string const&,AMSCore::AccountChangedMetadata)>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC843C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AMSCore::EphemeralAccountProvider::getMediaAccounts(AMSCore::EphemeralAccountProvider *this)
{
  BOOL v2 = operator new(0xB8uLL);
  *BOOL v2 = AMSCore::EphemeralAccountProvider::getMediaAccounts;
  v2[1] = AMSCore::EphemeralAccountProvider::getMediaAccounts;
  v2[21] = this;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *((unsigned char *)v2 + 24) = 0;
  *((unsigned char *)v2 + 104) = 0;
  v2[14] = 0;
  v2[18] = 0;
  operator new();
}

void sub_18DA51700(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::vector<std::unique_ptr<AMSCore::IMediaAccount>>::~vector[abi:fe180100]((uint64_t *)va);
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](v3);
  __cxa_begin_catch(a1);
  AMSCore::Task<std::vector<std::unique_ptr<AMSCore::IMediaAccount>>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DA517A4()
{
}

void sub_18DA517AC(_Unwind_Exception *a1)
{
  AMSCore::Task<std::vector<std::unique_ptr<AMSCore::IMediaAccount>>,AMSCore::Error>::Promise::~Promise(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::EphemeralAccountProvider::getMediaAccounts(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 168);
  *(void *)(a1 + 152) = v2 + 192;
  uint64_t v3 = a1 + 152;
  uint64_t v4 = a1 + 16;
  *(unsigned char *)(a1 + 160) = 1;
  long long v18 = 0uLL;
  unint64_t v19 = 0;
  std::vector<std::unique_ptr<AMSCore::IMediaAccount>>::reserve((uint64_t)&v18, (uint64_t)(*(void *)(v2 + 32) - *(void *)(v2 + 24)) >> 3);
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v6 = *(void *)(v2 + 32);
  while (v5 != v6)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)v5 + 48))(&v20);
    uint64_t v7 = *((void *)&v18 + 1);
    if (*((void *)&v18 + 1) >= v19)
    {
      unint64_t v9 = std::vector<std::unique_ptr<AMSCore::IMediaAccount>>::__emplace_back_slow_path<std::unique_ptr<AMSCore::IMediaAccount>>(&v18, &v20);
    }
    else
    {
      uint64_t v8 = v20;
      uint64_t v20 = 0;
      **((void **)&v18 + 1) = v8;
      unint64_t v9 = (void *)(v7 + 8);
    }
    *((void *)&v18 + 1) = v9;
    uint64_t v10 = v20;
    uint64_t v20 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    v5 += 8;
  }
  if (*(unsigned char *)(a1 + 104))
  {
    uint64_t v11 = *(void (***)(uint64_t))(a1 + 24);
    if (*(unsigned char *)(a1 + 96))
    {
      if (v11)
      {
        uint64_t v12 = *(void (***)(uint64_t))(a1 + 32);
        unint64_t v13 = *(void **)(a1 + 24);
        if (v12 != v11)
        {
          do
          {
            uint64_t v15 = (uint64_t)*--v12;
            uint64_t v14 = v15;
            *uint64_t v12 = 0;
            if (v15) {
              (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
            }
          }
          while (v12 != v11);
          unint64_t v13 = *(void **)(a1 + 24);
        }
        *(void *)(a1 + 32) = v11;
        operator delete(v13);
      }
    }
    else
    {
      (*v11)(a1 + 24);
    }
  }
  std::string::size_type v16 = (std::mutex *)(*(void *)(a1 + 168) + 192);
  *(_OWORD *)(a1 + 24) = v18;
  *(void *)(a1 + 40) = v19;
  *(unsigned char *)(a1 + 96) = 1;
  *(unsigned char *)(a1 + 104) = 1;
  AMSCore::AwaitableMutex::unlock(v16);
  *(void *)(a1 + 152) = v4;
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 176) = 1;
  return AMSCore::Task<std::vector<std::unique_ptr<AMSCore::IMediaAccount>>,AMSCore::Error>::Promise::Awaiter::await_suspend(v3);
}

void sub_18DA519C0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::vector<std::unique_ptr<AMSCore::IMediaAccount>>::~vector[abi:fe180100](&a9);
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](v9);
  __cxa_begin_catch(a1);
  AMSCore::Task<std::vector<std::unique_ptr<AMSCore::IMediaAccount>>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DA51A20()
{
}

void sub_18DA51A28(_Unwind_Exception *a1)
{
  *(void *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 176) = 1;
  _Unwind_Resume(a1);
}

void AMSCore::EphemeralAccountProvider::getMediaAccounts(void *a1)
{
  AMSCore::Task<std::vector<std::unique_ptr<AMSCore::IMediaAccount>>,AMSCore::Error>::Promise::~Promise((uint64_t)a1 + 16);
  operator delete(a1);
}

void std::vector<std::unique_ptr<AMSCore::IMediaAccount>>::reserve(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(char **)a1;
  if (a2 <= (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) {
    return;
  }
  if (a2 >> 61) {
    std::vector<std::string>::__throw_length_error[abi:fe180100]();
  }
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = 8 * a2;
  uint64_t v6 = (char *)operator new(8 * a2);
  uint64_t v7 = &v6[v5];
  uint64_t v8 = v4 - v2;
  unint64_t v9 = (unint64_t)&v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
  if (v4 == v2)
  {
    *(void *)a1 = v9;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v7;
    goto LABEL_7;
  }
  unint64_t v10 = v8 - 8;
  if ((unint64_t)(v8 - 8) > 0x77)
  {
    BOOL v12 = (unint64_t)&v4[-(v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v9
       || &v6[(v8 & 0xFFFFFFFFFFFFFFF8) - (v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v4;
    uint64_t v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
    if (v12)
    {
      uint64_t v13 = v8 >> 3;
      uint64_t v14 = (v10 >> 3) + 1;
      uint64_t v11 = (char *)(v9 - 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL));
      uint64_t v15 = v4 - 32;
      std::string::size_type v16 = &v6[8 * v13 - 16];
      uint64_t v17 = v14 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v19 = *(_OWORD *)v15;
        long long v18 = *((_OWORD *)v15 + 1);
        *(_OWORD *)uint64_t v15 = 0uLL;
        *((_OWORD *)v15 + 1) = 0uLL;
        v15 -= 32;
        *((_OWORD *)v16 - 1) = v19;
        *(_OWORD *)std::string::size_type v16 = v18;
        v16 -= 32;
        v17 -= 4;
      }
      while (v17);
      if (v14 == (v14 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_22;
      }
      v4 -= 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
    }
  }
  else
  {
    uint64_t v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
  }
  do
  {
    uint64_t v20 = *((void *)v4 - 1);
    v4 -= 8;
    *(void *)uint64_t v4 = 0;
    *((void *)v11 - 1) = v20;
    v11 -= 8;
  }
  while (v4 != v2);
LABEL_22:
  uint64_t v2 = *(char **)a1;
  long long v21 = *(char **)(a1 + 8);
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v7;
  while (v21 != v2)
  {
    uint64_t v23 = *((void *)v21 - 1);
    v21 -= 8;
    uint64_t v22 = v23;
    *(void *)long long v21 = 0;
    if (v23) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
  }
LABEL_7:
  if (v2)
  {
    operator delete(v2);
  }
}

void *std::vector<std::unique_ptr<AMSCore::IMediaAccount>>::~vector[abi:fe180100](void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = (void *)*a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        *uint64_t v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void AMSCore::Task<std::vector<std::unique_ptr<AMSCore::IMediaAccount>>,AMSCore::Error>::Promise::unhandled_exception()
{
  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)v0);
}

uint64_t AMSCore::Task<std::vector<std::unique_ptr<AMSCore::IMediaAccount>>,AMSCore::Error>::Promise::Awaiter::await_suspend(uint64_t result)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void (**)(void))atomic_exchange((atomic_ullong *volatile)(*(void *)result + 96), 1uLL);
  if (v1)
  {
    uint64_t v2 = result;
    if (v1 == (void (**)(void))2) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result - 8))(*(void *)result - 16);
    }
    uint64_t v3 = (uint64_t *)(*(void *)result + 128);
    uint64_t result = *v3;
    if (*v3)
    {
      if (result == *(void *)v2 + 104)
      {
        uint64_t v23 = v22;
        uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 24))(result, v22);
      }
      else
      {
        uint64_t v23 = *(void **)(*(void *)v2 + 128);
        *uint64_t v3 = 0;
      }
    }
    else
    {
      uint64_t v23 = 0;
    }
    if (v23)
    {
      uint64_t v4 = *(void *)v2;
      if (!*(unsigned char *)(*(void *)v2 + 88))
      {
        __break(1u);
        return result;
      }
      uint64_t v5 = (const std::runtime_error *)(v4 + 8);
      char v6 = *(unsigned char *)(v4 + 80);
      if (v6)
      {
        *(_OWORD *)std::string __p = *(_OWORD *)(v4 + 8);
        *(void *)&long long v16 = *(void *)(v4 + 24);
        *(void *)(v4 + 16) = 0;
        *(void *)(v4 + 24) = 0;
        v5->__vftable = 0;
      }
      else
      {
        std::runtime_error::runtime_error((std::runtime_error *)__p, v5);
        uint64_t v7 = (void *)(v4 + 48);
        uint64_t v8 = *(void *)(v4 + 48);
        long long v16 = *(_OWORD *)(v4 + 24);
        unint64_t v9 = *(uint64_t **)(v4 + 40);
        __p[0] = &unk_1EDC827D8;
        uint64_t v17 = v9;
        uint64_t v18 = v8;
        if (*(void *)(v4 + 56))
        {
          *(void *)(v8 + 16) = &v18;
          *(void *)(v4 + 40) = v7;
          *uint64_t v7 = 0;
          *(void *)(v4 + 56) = 0;
        }
        else
        {
          uint64_t v17 = &v18;
        }
        long long v20 = *(_OWORD *)(v4 + 64);
        *(void *)(v4 + 64) = 0;
        *(void *)(v4 + 72) = 0;
      }
      char v21 = v6;
      if (!v23) {
        std::__throw_bad_function_call[abi:fe180100]();
      }
      (*(void (**)(void *, void **))(*v23 + 48))(v23, __p);
      unint64_t v10 = __p[0];
      if (v21)
      {
        if (__p[0])
        {
          uint64_t v11 = __p[1];
          BOOL v12 = __p[0];
          if (__p[1] != __p[0])
          {
            do
            {
              uint64_t v14 = *--v11;
              uint64_t v13 = v14;
              *uint64_t v11 = 0;
              if (v14) {
                (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
              }
            }
            while (v11 != v10);
            BOOL v12 = __p[0];
          }
          __p[1] = v10;
          operator delete(v12);
        }
      }
      else
      {
        (*(void (**)(void **))__p[0])(__p);
      }
    }
    else
    {
      (*v1)(v1);
    }
    uint64_t result = (uint64_t)v23;
    if (v23 == v22)
    {
      return (*(uint64_t (**)(void *))(v22[0] + 32))(v22);
    }
    else if (v23)
    {
      return (*(uint64_t (**)(void))(*v23 + 40))();
    }
  }
  return result;
}

void sub_18DA5219C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AMSCore::Task<std::vector<std::unique_ptr<AMSCore::IMediaAccount>>,AMSCore::Error>::Promise::~Promise(uint64_t a1)
{
  uint64_t v2 = a1 + 104;
  uint64_t v3 = *(void *)(a1 + 128);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    if (!*(unsigned char *)(a1 + 88)) {
      goto LABEL_17;
    }
    goto LABEL_7;
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  if (*(unsigned char *)(a1 + 88))
  {
LABEL_7:
    uint64_t v4 = *(void (***)(uint64_t))(a1 + 8);
    if (*(unsigned char *)(a1 + 80))
    {
      if (v4)
      {
        uint64_t v5 = *(void (***)(uint64_t))(a1 + 16);
        char v6 = *(void **)(a1 + 8);
        if (v5 != v4)
        {
          do
          {
            uint64_t v8 = (uint64_t)*--v5;
            uint64_t v7 = v8;
            *uint64_t v5 = 0;
            if (v8) {
              (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
            }
          }
          while (v5 != v4);
          char v6 = *(void **)(a1 + 8);
        }
        *(void *)(a1 + 16) = v4;
        operator delete(v6);
      }
    }
    else
    {
      (*v4)(a1 + 8);
    }
  }
LABEL_17:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::IMediaAccount>>,AMSCore::Error>::Promise *,AMSCore::Task<std::vector<std::unique_ptr<AMSCore::IMediaAccount>>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::IMediaAccount>>,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINSt3__16vectorINS1_10unique_ptrINS_13IMediaAccountENS1_14default_deleteIS4_EEEENS1_"
                     "9allocatorIS7_EEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINSt3__16vectorINS1_10unique_ptrINS_13IMediaAccountENS1_14default_deleteI"
                                "S4_EEEENS1_9allocatorIS7_EEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINSt3__16vectorINS1_10unique_ptrINS_13IMediaAccountENS1_14default_deleteIS4_EEEENS1_9allocatorIS7_EEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINSt3__16vectorINS1_10unique_ptrINS_13IMediaAccountENS1_14default_deleteIS4_EEEENS1_9allocatorIS7_EEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::IMediaAccount>>,AMSCore::Error>::Promise *,AMSCore::Task<std::vector<std::unique_ptr<AMSCore::IMediaAccount>>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::IMediaAccount>>,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 96), 2uLL)) {
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::IMediaAccount>>,AMSCore::Error>::Promise *,AMSCore::Task<std::vector<std::unique_ptr<AMSCore::IMediaAccount>>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::IMediaAccount>>,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void AMSCore::EphemeralAccountProvider::getMediaAccount(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = operator new(0x198uLL);
  uint64_t v5 = AMSCore::EphemeralAccountProvider::getMediaAccount;
  *uint64_t v4 = AMSCore::EphemeralAccountProvider::getMediaAccount;
  v4[1] = AMSCore::EphemeralAccountProvider::getMediaAccount;
  v4[43] = a1;
  int v6 = *((unsigned __int8 *)a2 + 24);
  *((unsigned char *)v4 + 343) = v6;
  if (v6)
  {
    uint64_t v7 = *a2;
    v4[39] = a2[1];
    *(void *)((char *)v4 + 319) = *(uint64_t *)((char *)a2 + 15);
    LOBYTE(v5) = *((unsigned char *)a2 + 23);
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
  }
  else
  {
    uint64_t v7 = 0;
  }
  *((unsigned char *)v4 + 400) = (_BYTE)v5;
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  v4[44] = v7;
  v4[45] = v8;
  v4[46] = v9;
  v4[41] = a2[6];
  *(void *)((char *)v4 + 335) = *(uint64_t *)((char *)a2 + 55);
  *((unsigned char *)v4 + 401) = *((unsigned char *)a2 + 63);
  a2[6] = 0;
  a2[7] = 0;
  a2[5] = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *((unsigned char *)v4 + 24) = 0;
  *((unsigned char *)v4 + 104) = 0;
  v4[14] = 0;
  v4[18] = 0;
  std::shared_ptr<AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise,AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v10, (uint64_t)(v4 + 2));
}

uint64_t AMSCore::EphemeralAccountProvider::getMediaAccount(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void **)(result + 232);
  if (!*(unsigned char *)(result + 327))
  {
    unint64_t v3 = (void *)(result + 328);
    int v4 = *(unsigned __int8 *)(result + 343);
    *(unsigned char *)(result + 232) = 0;
    *(unsigned char *)(result + 256) = 0;
    uint64_t v5 = *(void *)(result + 352);
    char v6 = *(unsigned char *)(result + 400);
    if (v4)
    {
      uint64_t v7 = *(void *)(result + 312);
      *(void *)(result + 232) = v5;
      *(void *)(result + 240) = v7;
      *(void *)(result + 247) = *(void *)(result + 319);
      *(unsigned char *)(result + 255) = v6;
      *(void *)(result + 312) = 0;
      *(void *)(result + 319) = 0;
      *(unsigned char *)(result + 256) = 1;
      char v6 = 0;
      uint64_t v5 = 0;
    }
    *(void *)(result + 376) = v5;
    *(unsigned char *)(result + 402) = v6;
    char v8 = *(unsigned char *)(result + 401);
    uint64_t v9 = *(void *)(result + 368);
    uint64_t v10 = *(void *)(result + 344);
    *(void *)(result + 264) = *(void *)(result + 360);
    *(void *)(result + 272) = v9;
    *(void *)(result + 280) = *v3;
    *(void *)(result + 287) = *(void *)(result + 335);
    *(unsigned char *)(result + 295) = v8;
    *unint64_t v3 = 0;
    *(void *)(result + 335) = 0;
    AMSCore::EphemeralAccountProvider::getMediaAccountUnlocked(result + 296, v10, (uint64_t)v2);
  }
  uint64_t v11 = *(void *)(result + 384);
  if (!*(unsigned char *)(v11 + 88))
  {
    __break(1u);
    return result;
  }
  BOOL v12 = (std::runtime_error_vtbl **)(result + 152);
  uint64_t v13 = (const std::runtime_error *)(v11 + 8);
  char v14 = *(unsigned char *)(v11 + 80);
  if (v14)
  {
    uint64_t v15 = v13->__vftable;
    v13->__vftable = 0;
    *BOOL v12 = v15;
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(result + 152), v13);
    *(_OWORD *)(v1 + 168) = *(_OWORD *)(v11 + 24);
    long long v16 = (void *)(v11 + 48);
    uint64_t v17 = *(void *)(v11 + 48);
    *(void *)(v1 + 192) = v17;
    uint64_t v18 = v1 + 192;
    *(void *)(v1 + 152) = &unk_1EDC827D8;
    *(void *)(v1 + 184) = *(void *)(v11 + 40);
    uint64_t v19 = *(void *)(v11 + 56);
    *(void *)(v1 + 200) = v19;
    if (v19)
    {
      *(void *)(v17 + 16) = v18;
      *(void *)(v11 + 40) = v16;
      *long long v16 = 0;
      *(void *)(v11 + 56) = 0;
    }
    else
    {
      *(void *)(v1 + 184) = v18;
    }
    uint64_t v20 = *(void *)(v1 + 384);
    *(_OWORD *)(v1 + 208) = *(_OWORD *)(v20 + 64);
    *(void *)(v20 + 64) = 0;
    *(void *)(v20 + 72) = 0;
  }
  *(unsigned char *)(v1 + 224) = v14;
  std::optional<std::expected<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>,void>((std::runtime_error *)(v1 + 24), (std::runtime_error *)(v1 + 152));
  uint64_t v21 = *(void *)(v1 + 152);
  if (!*(unsigned char *)(v1 + 224))
  {
    (*(void (**)(uint64_t))v21)(v1 + 152);
    uint64_t v22 = *(void *)(v1 + 392);
    if (!v22) {
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  *BOOL v12 = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t v22 = *(void *)(v1 + 392);
  if (v22)
  {
LABEL_18:
    if (!atomic_fetch_add((atomic_ullong *volatile)(v22 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v23 = *(std::__shared_weak_count **)(v1 + 392);
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
LABEL_20:
  uint64_t v24 = *(std::__shared_weak_count **)(v1 + 304);
  if (!v24 || atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*(char *)(v1 + 295) & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  if (*(char *)(v1 + 295) < 0) {
LABEL_23:
  }
    operator delete(*(void **)(v1 + 272));
LABEL_24:
  if (*(unsigned char *)(v1 + 256) && *(char *)(v1 + 255) < 0) {
    operator delete(*v2);
  }
  AMSCore::AwaitableMutex::unlock((std::mutex *)(*(void *)(v1 + 344) + 192));
  *(void *)(v1 + 152) = v1 + 16;
  *(void *)uint64_t v1 = 0;
  return AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::Awaiter::await_suspend(v1 + 152);
}

void AMSCore::EphemeralAccountProvider::getMediaAccount(char *__p)
{
  if (!*(void *)__p)
  {
LABEL_14:
    uint64_t v5 = 0;
    char v6 = 0;
    uint64_t v7 = (void **)(__p + 376);
    char v8 = __p + 402;
    goto LABEL_16;
  }
  if (__p[327])
  {
    uint64_t v2 = *((void *)__p + 49);
    if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      unint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 49);
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    int v4 = (std::__shared_weak_count *)*((void *)__p + 38);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if ((__p[295] & 0x80000000) == 0)
      {
LABEL_10:
        if (__p[256] && __p[255] < 0) {
          operator delete(*((void **)__p + 29));
        }
        AMSCore::AwaitableMutex::unlock((std::mutex *)(*((void *)__p + 43) + 192));
        goto LABEL_14;
      }
    }
    else if ((__p[295] & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(*((void **)__p + 34));
    goto LABEL_10;
  }
  char v6 = __p[401];
  uint64_t v5 = (void *)*((void *)__p + 46);
  uint64_t v7 = (void **)(__p + 352);
  char v8 = __p + 400;
LABEL_16:
  int v9 = *v8;
  uint64_t v10 = *v7;
  uint64_t v11 = (char *)*((void *)__p + 18);
  if (v11 == __p + 120)
  {
    (*(void (**)(char *))(*((void *)__p + 15) + 32))(__p + 120);
    if (!__p[104]) {
      goto LABEL_26;
    }
    goto LABEL_22;
  }
  if (v11) {
    (*(void (**)(char *))(*(void *)v11 + 40))(v11);
  }
  if (__p[104])
  {
LABEL_22:
    uint64_t v12 = *((void *)__p + 3);
    if (__p[96])
    {
      *((void *)__p + 3) = 0;
      if (v12) {
        (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      }
    }
    else
    {
      (*(void (**)(char *))v12)(__p + 24);
    }
  }
LABEL_26:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v6 < 0) {
    operator delete(v5);
  }
  if (__p[343] && v9 < 0) {
    operator delete(v10);
  }
  operator delete(__p);
}

void AMSCore::EphemeralAccountProvider::getLocalMediaAccount(uint64_t a1, uint64_t a2)
{
  int v4 = (char *)operator new(0xD0uLL);
  *(void *)int v4 = AMSCore::EphemeralAccountProvider::getLocalMediaAccount;
  *((void *)v4 + 1) = AMSCore::EphemeralAccountProvider::getLocalMediaAccount;
  *((void *)v4 + 24) = a1;
  *(_OWORD *)(v4 + 152) = *(_OWORD *)a2;
  *((void *)v4 + 21) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  v4[24] = 0;
  v4[104] = 0;
  *((void *)v4 + 14) = 0;
  *((void *)v4 + 18) = 0;
  std::shared_ptr<AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise,AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v5, (uint64_t)(v4 + 16));
}

void sub_18DA53214(void *a1)
{
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](v1);
  __cxa_begin_catch(a1);
  AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DA53234()
{
}

uint64_t AMSCore::EphemeralAccountProvider::getLocalMediaAccount(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 192);
  *(void *)(a1 + 176) = v2 + 192;
  uint64_t v3 = a1 + 176;
  uint64_t v4 = a1 + 16;
  *(unsigned char *)(a1 + 184) = 1;
  long long v5 = (void *)(a1 + 152);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 175);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a1 + 160);
  }
  if (v6 == 59)
  {
    if (v7 < 0) {
      long long v5 = (void *)*v5;
    }
    uint64_t v23 = (void *)*v5;
    uint64_t v24 = v5[1];
    uint64_t v25 = v5[2];
    uint64_t v26 = v5[3];
    uint64_t v27 = v5[4];
    uint64_t v28 = v5[5];
    uint64_t v29 = v5[6];
    uint64_t v30 = *(void *)((char *)v5 + 51);
    if (v23 != (void *)0x6C7070612E6D6F63
      || v24 != 0x4D656C7070412E65
      || v25 != 0x7672655361696465
      || v26 != 0x65726F4373656369
      || v27 != 0x41616964654D492ELL
      || v28 != 0x612E746E756F6363
      || v29 != 0x4265726F74537070
      || v30 != 0x6174654265726F74)
    {
      goto LABEL_29;
    }
  }
  else
  {
    if (v6 != 62) {
      goto LABEL_29;
    }
    if (v7 < 0) {
      long long v5 = (void *)*v5;
    }
    char v8 = (void *)*v5;
    uint64_t v9 = v5[1];
    uint64_t v10 = v5[2];
    uint64_t v11 = v5[3];
    uint64_t v12 = v5[4];
    uint64_t v13 = v5[5];
    uint64_t v14 = v5[6];
    uint64_t v15 = *(void *)((char *)v5 + 54);
    BOOL v16 = v8 == (void *)0x6C7070612E6D6F63 && v9 == 0x4D656C7070412E65;
    BOOL v17 = v16 && v10 == 0x7672655361696465;
    BOOL v18 = v17 && v11 == 0x65726F4373656369;
    BOOL v19 = v18 && v12 == 0x41616964654D492ELL;
    BOOL v20 = v19 && v13 == 0x612E746E756F6363;
    BOOL v21 = v20 && v14 == 0x5365726F74537070;
    if (!v21 || v15 != 0x786F62646E615365)
    {
LABEL_29:
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(v2 + 160) + 48))(&v40);
      goto LABEL_56;
    }
  }
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v2 + 176) + 48))(&v40);
LABEL_56:
  if (*(unsigned char *)(a1 + 104))
  {
    uint64_t v38 = *(void *)(a1 + 24);
    if (*(unsigned char *)(a1 + 96))
    {
      *(void *)(a1 + 24) = 0;
      if (v38) {
        (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
      }
    }
    else
    {
      (*(void (**)(uint64_t))v38)(a1 + 24);
    }
  }
  *(void *)(a1 + 24) = v40;
  *(unsigned char *)(a1 + 96) = 1;
  *(unsigned char *)(a1 + 104) = 1;
  AMSCore::AwaitableMutex::unlock((std::mutex *)(*(void *)(a1 + 192) + 192));
  *(void *)(a1 + 176) = v4;
  *(void *)a1 = 0;
  return AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::Awaiter::await_suspend(v3);
}

void sub_18DA53544(void *a1)
{
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](v1);
  __cxa_begin_catch(a1);
  AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DA53564()
{
}

void AMSCore::EphemeralAccountProvider::getLocalMediaAccount(char *__p)
{
  uint64_t v2 = __p + 120;
  uint64_t v3 = (char *)*((void *)__p + 18);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    if (!__p[104]) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
  if (v3) {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  if (__p[104])
  {
LABEL_7:
    uint64_t v4 = *((void *)__p + 3);
    if (__p[96])
    {
      *((void *)__p + 3) = 0;
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
    }
    else
    {
      (*(void (**)(char *))v4)(__p + 24);
    }
  }
LABEL_11:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (__p[175] < 0) {
    operator delete(*((void **)__p + 19));
  }
  operator delete(__p);
}

void AMSCore::EphemeralAccountProvider::getCookieProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = operator new(0xC8uLL);
  *uint64_t v4 = AMSCore::EphemeralAccountProvider::getCookieProvider;
  v4[1] = AMSCore::EphemeralAccountProvider::getCookieProvider;
  v4[21] = a1;
  *((_OWORD *)v4 + 11) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *((unsigned char *)v4 + 24) = 0;
  *((unsigned char *)v4 + 104) = 0;
  v4[14] = 0;
  v4[18] = 0;
  operator new();
}

void sub_18DA53AA4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a9);
  if (a17 < 0) {
    operator delete(__p);
  }
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](v17);
  __cxa_begin_catch(a1);
  AMSCore::Task<std::shared_ptr<AMSCore::IHTTPCookieProvider>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DA53AEC()
{
}

void sub_18DA53AF8(void *a1)
{
  __cxa_begin_catch(a1);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 112), 2uLL)) {
    (*(void (**)(uint64_t))(v1 + 8))(v1);
  }
  __cxa_rethrow();
}

void sub_18DA53B24(void *a1)
{
}

uint64_t AMSCore::EphemeralAccountProvider::getCookieProvider(uint64_t a1)
{
  *(void *)(a1 + 152) = *(void *)(a1 + 168) + 192;
  uint64_t v2 = (std::mutex **)(a1 + 152);
  uint64_t v3 = a1 + 16;
  uint64_t v4 = *(const AMSCore::IMediaAccount **)(a1 + 176);
  *(unsigned char *)(a1 + 160) = 1;
  AMSCore::EphemeralAccountProvider::getCookieProviderKey(&__p, v4);
  uint64_t v5 = *(void *)(a1 + 168);
  uint64_t v6 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(v5 + 136, (const void **)&__p.__r_.__value_.__l.__data_);
  if ((uint64_t *)(v5 + 144) == v6)
  {
    uint64_t v9 = (char *)operator new(0x98uLL);
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = 0;
    *(void *)uint64_t v9 = &unk_1EDC84128;
    *((void *)v9 + 12) = 0;
    *((void *)v9 + 3) = &unk_1EDC826F8;
    *((void *)v9 + 4) = 850045863;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 81) = 0u;
    *((void *)v9 + 13) = v9 + 104;
    *((void *)v9 + 14) = v9 + 104;
    *((void *)v9 + 18) = 0;
    *((void *)v9 + 17) = 0;
    *((void *)v9 + 15) = 0;
    *((void *)v9 + 16) = v9 + 136;
    *(void *)&long long v14 = v9 + 24;
    *((void *)&v14 + 1) = v9;
    std::map<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>::insert_or_assign[abi:fe180100]<std::shared_ptr<AMSCore::EphemeralHTTPCookieProvider> &>((uint64_t ***)(v5 + 136), (uint64_t)&__p, (uint64_t *)&v14);
    if (*(unsigned char *)(a1 + 104))
    {
      if (*(unsigned char *)(a1 + 96))
      {
        uint64_t v10 = *(std::__shared_weak_count **)(a1 + 32);
        if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      else
      {
        (**(void (***)(void))(a1 + 24))();
      }
    }
    *(_OWORD *)(a1 + 24) = v14;
  }
  else
  {
    int v7 = v6;
    if (*(unsigned char *)(a1 + 104))
    {
      if (*(unsigned char *)(a1 + 96))
      {
        char v8 = *(std::__shared_weak_count **)(a1 + 32);
        if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      else
      {
        (**(void (***)(void))(a1 + 24))();
      }
      *(unsigned char *)(a1 + 104) = 0;
    }
    *(void *)(a1 + 24) = v7[7];
    uint64_t v11 = v7[8];
    *(void *)(a1 + 32) = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
  }
  *(unsigned char *)(a1 + 96) = 1;
  *(unsigned char *)(a1 + 104) = 1;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a1 + 160)) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (*(unsigned char *)(a1 + 160)) {
LABEL_22:
  }
    AMSCore::AwaitableMutex::unlock(*v2);
LABEL_23:
  *(void *)(a1 + 152) = v3;
  *(void *)a1 = 0;
  return AMSCore::Task<std::shared_ptr<AMSCore::IHTTPCookieProvider>,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v2);
}

void sub_18DA53DD4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](v16);
  __cxa_begin_catch(a1);
  AMSCore::Task<std::shared_ptr<AMSCore::IHTTPCookieProvider>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DA53E1C()
{
}

void AMSCore::EphemeralAccountProvider::getCookieProvider(void *__p)
{
  uint64_t v2 = __p[23];
  uint64_t v3 = (char *)(__p + 15);
  uint64_t v4 = (char *)__p[18];
  if (v4 == v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 32))(v3);
    if (!*((unsigned char *)__p + 104)) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  if (v4) {
    (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  }
  if (*((unsigned char *)__p + 104))
  {
LABEL_7:
    if (*((unsigned char *)__p + 96))
    {
      uint64_t v5 = (std::__shared_weak_count *)__p[4];
      if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      (*(void (**)(void))__p[3])();
    }
  }
LABEL_12:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(__p[23] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v6 = (std::__shared_weak_count *)__p[23];
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  operator delete(__p);
}

void std::map<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>::insert_or_assign[abi:fe180100]<std::shared_ptr<AMSCore::EphemeralHTTPCookieProvider> &>(uint64_t ***a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = (uint64_t **)(a1 + 1);
  uint64_t v6 = (uint64_t *)a1[1];
  int v7 = v6;
  char v8 = (uint64_t **)(a1 + 1);
  if (!v6) {
    goto LABEL_64;
  }
  char v9 = *(unsigned char *)(a2 + 23);
  if (v9 >= 0) {
    uint64_t v10 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v10 = *(const std::string::value_type **)a2;
  }
  if (v9 >= 0) {
    size_t v11 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v11 = *(void *)(a2 + 8);
  }
  uint64_t v12 = (uint64_t **)(a1 + 1);
  uint64_t v13 = (uint64_t *)a1[1];
  do
  {
    while (1)
    {
      int v14 = *((char *)v13 + 55);
      uint64_t v15 = v14 >= 0 ? v13 + 4 : (uint64_t *)v13[4];
      size_t v16 = v14 >= 0 ? *((unsigned __int8 *)v13 + 55) : v13[5];
      size_t v17 = v11 >= v16 ? v16 : v11;
      int v18 = memcmp(v15, v10, v17);
      if (v18) {
        break;
      }
      if (v16 < v11) {
        goto LABEL_11;
      }
LABEL_9:
      uint64_t v12 = (uint64_t **)v13;
      uint64_t v13 = (uint64_t *)*v13;
      if (!v13) {
        goto LABEL_26;
      }
    }
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_11:
    uint64_t v13 = (uint64_t *)v13[1];
  }
  while (v13);
LABEL_26:
  char v8 = v5;
  if (v12 == v5) {
    goto LABEL_63;
  }
  int v19 = *((char *)v12 + 55);
  if (v19 >= 0) {
    BOOL v20 = (uint64_t *)(v12 + 4);
  }
  else {
    BOOL v20 = v12[4];
  }
  if (v19 >= 0) {
    size_t v21 = *((unsigned __int8 *)v12 + 55);
  }
  else {
    size_t v21 = (size_t)v12[5];
  }
  if (v21 >= v11) {
    size_t v22 = v11;
  }
  else {
    size_t v22 = v21;
  }
  int v23 = memcmp(v10, v20, v22);
  if (!v23)
  {
    if (v11 < v21) {
      goto LABEL_46;
    }
LABEL_38:
    uint64_t v25 = *a3;
    uint64_t v24 = (uint64_t *)a3[1];
    if (v24) {
      atomic_fetch_add_explicit(v24 + 1, 1uLL, memory_order_relaxed);
    }
    uint64_t v26 = (std::__shared_weak_count *)v12[8];
    v12[7] = (uint64_t *)v25;
    v12[8] = v24;
    if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
    return;
  }
  if ((v23 & 0x80000000) == 0) {
    goto LABEL_38;
  }
LABEL_46:
  char v8 = v5;
  if (v5 == v12) {
    goto LABEL_63;
  }
  int v27 = *((char *)v12 + 55);
  if (v27 >= 0) {
    uint64_t v28 = (uint64_t *)(v12 + 4);
  }
  else {
    uint64_t v28 = v12[4];
  }
  if (v27 >= 0) {
    size_t v29 = *((unsigned __int8 *)v12 + 55);
  }
  else {
    size_t v29 = (size_t)v12[5];
  }
  if (v29 >= v11) {
    size_t v30 = v11;
  }
  else {
    size_t v30 = v29;
  }
  int v31 = memcmp(v10, v28, v30);
  if (v31)
  {
    if ((v31 & 0x80000000) == 0) {
      goto LABEL_58;
    }
LABEL_62:
    char v8 = v12;
LABEL_63:
    int v7 = *v8;
LABEL_64:
    uint64_t v12 = v8;
    if (*a1 == v8) {
      goto LABEL_112;
    }
    if (v7)
    {
      uint64_t v33 = v7;
      do
      {
        uint64_t v12 = (uint64_t **)v33;
        uint64_t v33 = (uint64_t *)v33[1];
      }
      while (v33);
    }
    else
    {
      uint64_t v34 = (uint64_t *)v8;
      do
      {
        uint64_t v12 = (uint64_t **)v34[2];
        BOOL v35 = *v12 == v34;
        uint64_t v34 = (uint64_t *)v12;
      }
      while (v35);
    }
    int v36 = *((char *)v12 + 55);
    if (v36 >= 0) {
      uint64_t v37 = (uint64_t *)(v12 + 4);
    }
    else {
      uint64_t v37 = v12[4];
    }
    if (v36 >= 0) {
      size_t v38 = *((unsigned __int8 *)v12 + 55);
    }
    else {
      size_t v38 = (size_t)v12[5];
    }
    int v39 = *(char *)(a2 + 23);
    if (v39 >= 0) {
      uint64_t v40 = (const void *)a2;
    }
    else {
      uint64_t v40 = *(const void **)a2;
    }
    if (v39 >= 0) {
      size_t v41 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v41 = *(void *)(a2 + 8);
    }
    if (v41 >= v38) {
      size_t v42 = v38;
    }
    else {
      size_t v42 = v41;
    }
    int v43 = memcmp(v37, v40, v42);
    if (v43)
    {
      if ((v43 & 0x80000000) == 0) {
        goto LABEL_88;
      }
LABEL_112:
      if (v7) {
        char v8 = v12 + 1;
      }
      else {
        uint64_t v12 = v8;
      }
      goto LABEL_115;
    }
    if (v38 < v41) {
      goto LABEL_112;
    }
LABEL_88:
    if (!v6)
    {
      uint64_t v12 = v5;
LABEL_90:
      char v8 = v5;
      goto LABEL_115;
    }
    while (1)
    {
      uint64_t v12 = (uint64_t **)v6;
      int v44 = *((char *)v6 + 55);
      if (v44 >= 0) {
        long long v45 = v6 + 4;
      }
      else {
        long long v45 = (const void *)v6[4];
      }
      if (v44 >= 0) {
        size_t v46 = *((unsigned __int8 *)v6 + 55);
      }
      else {
        size_t v46 = v6[5];
      }
      if (v46 >= v41) {
        size_t v47 = v41;
      }
      else {
        size_t v47 = v46;
      }
      int v48 = memcmp(v40, v45, v47);
      if (v48)
      {
        if (v48 < 0) {
          goto LABEL_91;
        }
      }
      else if (v41 < v46)
      {
LABEL_91:
        uint64_t v6 = *v12;
        uint64_t v5 = v12;
        if (!*v12) {
          goto LABEL_116;
        }
        continue;
      }
      int v49 = memcmp(v45, v40, v47);
      if (v49)
      {
        if ((v49 & 0x80000000) == 0) {
          goto LABEL_90;
        }
      }
      else if (v46 >= v41)
      {
        goto LABEL_90;
      }
      uint64_t v5 = v12 + 1;
      uint64_t v6 = v12[1];
      if (!v6) {
        goto LABEL_116;
      }
    }
  }
  if (v11 < v29) {
    goto LABEL_62;
  }
LABEL_58:
  int v32 = memcmp(v28, v10, v30);
  if (!v32)
  {
    if (v29 >= v11) {
      return;
    }
LABEL_126:
    char v8 = v12 + 1;
    uint64_t v54 = v12[1];
    if (v54)
    {
      do
      {
        char v8 = (uint64_t **)v54;
        uint64_t v54 = (uint64_t *)*v54;
        uint64_t v12 = v8;
        unsigned int v55 = v8;
      }
      while (v54);
    }
    else
    {
      unsigned int v55 = v12;
      do
      {
        uint64_t v56 = (uint64_t *)v55;
        unsigned int v55 = (uint64_t **)v55[2];
      }
      while (*v55 != v56);
    }
    if (v55 == v5) {
      goto LABEL_115;
    }
    long long v59 = v55[4];
    uint64_t v57 = (uint64_t *)(v55 + 4);
    uint64_t v58 = v59;
    int v60 = *((char *)v57 + 23);
    if (v60 >= 0) {
      char v61 = v57;
    }
    else {
      char v61 = v58;
    }
    if (v60 >= 0) {
      size_t v62 = *((unsigned __int8 *)v57 + 23);
    }
    else {
      size_t v62 = v57[1];
    }
    if (v62 >= v11) {
      size_t v63 = v11;
    }
    else {
      size_t v63 = v62;
    }
    int v64 = memcmp(v10, v61, v63);
    if (v64)
    {
      if ((v64 & 0x80000000) == 0) {
        goto LABEL_147;
      }
      goto LABEL_115;
    }
    if (v11 < v62)
    {
LABEL_115:
      uint64_t v5 = v8;
      if (!*v8)
      {
LABEL_116:
        unint64_t v50 = (uint64_t *)operator new(0x48uLL);
        long long v51 = (std::string *)(v50 + 4);
        if (*(char *)(a2 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v51, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)&v51->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
          v50[6] = *(void *)(a2 + 16);
        }
        uint64_t v52 = a3[1];
        v50[7] = *a3;
        v50[8] = v52;
        if (v52) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v52 + 8), 1uLL, memory_order_relaxed);
        }
        *unint64_t v50 = 0;
        v50[1] = 0;
        v50[2] = (uint64_t)v12;
        *uint64_t v5 = v50;
        uint64_t v53 = **a1;
        if (v53)
        {
          *a1 = (uint64_t **)v53;
          unint64_t v50 = *v5;
        }
        std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[1], v50);
        a1[2] = (uint64_t **)((char *)a1[2] + 1);
      }
      return;
    }
    while (1)
    {
LABEL_147:
      uint64_t v12 = (uint64_t **)v6;
      int v65 = *((char *)v6 + 55);
      if (v65 >= 0) {
        uint64_t v66 = v6 + 4;
      }
      else {
        uint64_t v66 = (const void *)v6[4];
      }
      if (v65 >= 0) {
        size_t v67 = *((unsigned __int8 *)v6 + 55);
      }
      else {
        size_t v67 = v6[5];
      }
      if (v67 >= v11) {
        size_t v68 = v11;
      }
      else {
        size_t v68 = v67;
      }
      int v69 = memcmp(v10, v66, v68);
      if (v69)
      {
        if (v69 < 0) {
          goto LABEL_146;
        }
LABEL_160:
        int v70 = memcmp(v66, v10, v68);
        if (v70)
        {
          if ((v70 & 0x80000000) == 0) {
            goto LABEL_90;
          }
        }
        else if (v67 >= v11)
        {
          goto LABEL_90;
        }
        uint64_t v5 = v12 + 1;
        uint64_t v6 = v12[1];
        if (!v6) {
          goto LABEL_116;
        }
      }
      else
      {
        if (v11 >= v67) {
          goto LABEL_160;
        }
LABEL_146:
        uint64_t v6 = *v12;
        uint64_t v5 = v12;
        if (!*v12) {
          goto LABEL_116;
        }
      }
    }
  }
  if (v32 < 0) {
    goto LABEL_126;
  }
}

void sub_18DA54508(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void AMSCore::Task<std::shared_ptr<AMSCore::IHTTPCookieProvider>,AMSCore::Error>::Promise::unhandled_exception()
{
  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

uint64_t sub_18DA54544(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, long long a19, uint64_t a20,uint64_t a21,uint64_t a22,long long a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v42, (uint64_t)v39);
  if (*(unsigned char *)(v29 + 88))
  {
    if (*(unsigned char *)(v29 + 80))
    {
      int v31 = *(std::__shared_weak_count **)(v29 + 16);
      if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))v30->~runtime_error)(v30);
    }
    *(unsigned char *)(v29 + 88) = 0;
  }
  std::runtime_error::runtime_error(v30, v42);
  std::runtime_error v32 = v42[1];
  uint64_t v34 = v43;
  uint64_t v33 = v44;
  *(void *)(v29 + 48) = v44;
  uint64_t v35 = v29 + 48;
  *(std::runtime_error *)(v29 + 24) = v32;
  *(void *)(v29 + 8) = &unk_1EDC827D8;
  uint64_t v36 = v45;
  *(void *)(v29 + 40) = v34;
  *(void *)(v29 + 56) = v36;
  if (v36)
  {
    *(void *)(v33 + 16) = v35;
    int v43 = &v44;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v33 = 0;
  }
  else
  {
    *(void *)(v29 + 40) = v35;
  }
  *(_OWORD *)(v29 + 64) = v46;
  long long v46 = 0uLL;
  *(unsigned char *)(v29 + 80) = 0;
  *(unsigned char *)(v29 + 88) = 1;
  v42[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v43, (unsigned int *)v33);
  MEMORY[0x192FA3C30](v42);
  v39[0] = &unk_1EDC827D8;
  uint64_t v37 = v41;
  if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v40, v40[1]);
  return MEMORY[0x192FA3C30](v39);
}

uint64_t AMSCore::Task<std::shared_ptr<AMSCore::IHTTPCookieProvider>,AMSCore::Error>::Promise::Awaiter::await_suspend(uint64_t result)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void (**)(void))atomic_exchange((atomic_ullong *volatile)(*(void *)result + 96), 1uLL);
  if (v1)
  {
    uint64_t v2 = result;
    if (v1 == (void (**)(void))2) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result - 8))(*(void *)result - 16);
    }
    uint64_t v3 = (uint64_t *)(*(void *)result + 128);
    uint64_t result = *v3;
    if (*v3)
    {
      if (result == *(void *)v2 + 104)
      {
        uint64_t v24 = v23;
        uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 24))(result, v23);
      }
      else
      {
        uint64_t v24 = *(void **)(*(void *)v2 + 128);
        *uint64_t v3 = 0;
      }
    }
    else
    {
      uint64_t v24 = 0;
    }
    if (v24)
    {
      uint64_t v4 = *(void *)v2;
      if (!*(unsigned char *)(*(void *)v2 + 88))
      {
        __break(1u);
        return result;
      }
      uint64_t v5 = (const std::runtime_error *)(v4 + 8);
      char v6 = *(unsigned char *)(v4 + 80);
      if (v6)
      {
        v15.__vftable = *(std::runtime_error_vtbl **)(v4 + 8);
        p_char imp = &v15.__imp_;
        char v8 = (const char **)(v4 + 16);
      }
      else
      {
        std::runtime_error::runtime_error(&v15, v5);
        char v9 = (void *)(v4 + 48);
        uint64_t v10 = *(void *)(v4 + 48);
        long long v16 = *(_OWORD *)(v4 + 24);
        size_t v11 = *(uint64_t **)(v4 + 40);
        v15.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        size_t v17 = v11;
        uint64_t v18 = v10;
        if (*(void *)(v4 + 56))
        {
          *(void *)(v10 + 16) = &v18;
          *(void *)(v4 + 40) = v9;
          *char v9 = 0;
          *(void *)(v4 + 56) = 0;
        }
        else
        {
          size_t v17 = &v18;
        }
        uint64_t v13 = *(void *)(v4 + 64);
        uint64_t v12 = (const std::runtime_error *)(v4 + 64);
        uint64_t v20 = v13;
        p_char imp = (std::__libcpp_refstring *)&v21;
        char v8 = &v12->__imp_.__imp_;
        uint64_t v5 = v12;
      }
      p_imp->__imp_ = *v8;
      v5->__vftable = 0;
      v5->__imp_.__imp_ = 0;
      char v22 = v6;
      if (!v24) {
        std::__throw_bad_function_call[abi:fe180100]();
      }
      (*(void (**)(void *, std::runtime_error *))(*v24 + 48))(v24, &v15);
      if (v22)
      {
        char imp = (std::__shared_weak_count *)v15.__imp_.__imp_;
        if (v15.__imp_.__imp_
          && !atomic_fetch_add((atomic_ullong *volatile)v15.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
          std::__shared_weak_count::__release_weak(imp);
        }
      }
      else
      {
        ((void (*)(std::runtime_error *))v15.~runtime_error)(&v15);
      }
    }
    else
    {
      (*v1)(v1);
    }
    uint64_t result = (uint64_t)v24;
    if (v24 == v23)
    {
      return (*(uint64_t (**)(void *))(v23[0] + 32))(v23);
    }
    else if (v24)
    {
      return (*(uint64_t (**)(void))(*v24 + 40))();
    }
  }
  return result;
}

void sub_18DA549FC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void AMSCore::EphemeralHTTPCookieProvider::getCookies(AMSCore::EphemeralHTTPCookieProvider *this)
{
  uint64_t v2 = operator new(0xB8uLL);
  *uint64_t v2 = AMSCore::EphemeralHTTPCookieProvider::getCookies;
  v2[1] = AMSCore::EphemeralHTTPCookieProvider::getCookies;
  v2[21] = this;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *((unsigned char *)v2 + 24) = 0;
  *((unsigned char *)v2 + 104) = 0;
  v2[14] = 0;
  v2[18] = 0;
  std::shared_ptr<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise,AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v3, (uint64_t)(v2 + 2));
}

void sub_18DA54CD8(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::vector<std::unique_ptr<AMSCore::HTTPCookie>>::~vector[abi:fe180100]((uint64_t **)va);
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](v3);
  __cxa_begin_catch(a1);
  AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DA54D1C()
{
}

uint64_t AMSCore::EphemeralHTTPCookieProvider::getCookies(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 168);
  *(void *)(a1 + 152) = v2 + 1;
  uint64_t v3 = (std::mutex **)(a1 + 152);
  uint64_t v4 = a1 + 16;
  *(unsigned char *)(a1 + 160) = 1;
  v2 += 13;
  *(std::chrono::system_clock::time_point *)&long long v11 = std::chrono::system_clock::now();
  std::__libcpp_erase_if_container[abi:fe180100]<std::map<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::EphemeralHTTPCookieProvider::removeExpiredCookies(void)::{lambda(std::map<std::string,std::unique_ptr<AMSCore::HTTPCookie>> &)#1}>(v2, &v11);
  uint64_t v5 = *(void *)(a1 + 168);
  long long v11 = 0uLL;
  uint64_t v12 = 0;
  std::vector<std::unique_ptr<AMSCore::HTTPCookie>>::reserve((uint64_t)&v11, *(void *)(v5 + 120));
  if (*v2 != *(void *)(a1 + 168) + 112) {
    AMSCore::HTTPCookie::clone((AMSCore::HTTPCookie *)&v13);
  }
  if (!*(unsigned char *)(a1 + 104)) {
    goto LABEL_10;
  }
  char v6 = *(void (***)(void))(a1 + 24);
  if (!*(unsigned char *)(a1 + 96))
  {
    (*v6)();
    goto LABEL_10;
  }
  if (!v6)
  {
LABEL_10:
    int v9 = 1;
    goto LABEL_13;
  }
  int v7 = *(uint64_t **)(a1 + 32);
  if (v7 == (uint64_t *)v6)
  {
    int v9 = 1;
    char v8 = *(void **)(a1 + 24);
  }
  else
  {
    do
      std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v7, 0);
    while (v7 != (uint64_t *)v6);
    char v8 = *(void **)(a1 + 24);
    int v9 = *(unsigned __int8 *)(a1 + 160);
  }
  *(void *)(a1 + 32) = v6;
  operator delete(v8);
LABEL_13:
  *(_OWORD *)(a1 + 24) = v11;
  *(void *)(a1 + 40) = v12;
  *(unsigned char *)(a1 + 96) = 1;
  *(unsigned char *)(a1 + 104) = 1;
  if (v9) {
    AMSCore::AwaitableMutex::unlock(*v3);
  }
  *(void *)(a1 + 152) = v4;
  *(void *)a1 = 0;
  return AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v3);
}

void sub_18DA54F04(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  std::vector<std::unique_ptr<AMSCore::HTTPCookie>>::~vector[abi:fe180100](&a9);
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](v9);
  __cxa_begin_catch(a1);
  AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DA54F40()
{
}

void AMSCore::EphemeralHTTPCookieProvider::getCookies(void *a1)
{
  AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::~Promise((uint64_t)a1 + 16);
  operator delete(a1);
}

void std::shared_ptr<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise,AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_18DA54FF0(void *a1)
{
  __cxa_begin_catch(a1);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 96), 2uLL)) {
    (*(void (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  __cxa_rethrow();
}

void sub_18DA5501C(_Unwind_Exception *a1)
{
}

void std::__libcpp_erase_if_container[abi:fe180100]<std::map<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::EphemeralHTTPCookieProvider::removeExpiredCookies(void)::{lambda(std::map<std::string,std::unique_ptr<AMSCore::HTTPCookie>> &)#1}>(void *a1, void *a2)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = (void *)*a1;
  if ((void *)*a1 != a1 + 1)
  {
    do
    {
      char v6 = (uint64_t *)v2[7];
      if (*((unsigned char *)v6 + 8))
      {
        uint64_t v7 = *v6;
        char v8 = (void *)v2[1];
        if (v7 <= *a2)
        {
          long long v11 = v2;
          if (v8)
          {
            do
            {
              uint64_t v9 = v8;
              char v8 = (void *)*v8;
            }
            while (v8);
          }
          else
          {
            do
            {
              uint64_t v9 = (void *)v11[2];
              BOOL v10 = *v9 == (void)v11;
              long long v11 = v9;
            }
            while (!v10);
          }
          if ((void *)*a1 == v2) {
            *a1 = v9;
          }
          uint64_t v12 = (uint64_t *)a1[1];
          --a1[2];
          std::__tree_remove[abi:fe180100]<std::__tree_node_base<void *> *>(v12, v2);
          std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](v2 + 7, 0);
          if (*((char *)v2 + 55) < 0) {
            operator delete((void *)v2[4]);
          }
          operator delete(v2);
          goto LABEL_4;
        }
        if (v8)
        {
          do
          {
LABEL_10:
            uint64_t v9 = v8;
            char v8 = (void *)*v8;
          }
          while (v8);
          goto LABEL_4;
        }
      }
      else
      {
        char v8 = (void *)v2[1];
        if (v8) {
          goto LABEL_10;
        }
      }
      do
      {
        uint64_t v9 = (void *)v2[2];
        BOOL v10 = *v9 == (void)v2;
        uint64_t v2 = v9;
      }
      while (!v10);
LABEL_4:
      uint64_t v2 = v9;
    }
    while (v9 != v3);
  }
}

void std::vector<std::unique_ptr<AMSCore::HTTPCookie>>::reserve(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(uint64_t **)a1;
  if (a2 <= (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) {
    return;
  }
  if (a2 >> 61) {
    std::vector<std::string>::__throw_length_error[abi:fe180100]();
  }
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = 8 * a2;
  char v6 = (char *)operator new(8 * a2);
  uint64_t v7 = &v6[v5];
  uint64_t v8 = v4 - (char *)v2;
  unint64_t v9 = (unint64_t)&v6[(v4 - (char *)v2) & 0xFFFFFFFFFFFFFFF8];
  if (v4 != (char *)v2)
  {
    unint64_t v10 = v8 - 8;
    if ((unint64_t)(v8 - 8) > 0x77)
    {
      BOOL v12 = (unint64_t)&v4[-(v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v9
         || &v6[(v8 & 0xFFFFFFFFFFFFFFF8) - (v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v4;
      long long v11 = &v6[(v4 - (char *)v2) & 0xFFFFFFFFFFFFFFF8];
      if (v12)
      {
        uint64_t v13 = v8 >> 3;
        uint64_t v14 = (v10 >> 3) + 1;
        long long v11 = (char *)(v9 - 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL));
        std::runtime_error v15 = v4 - 32;
        long long v16 = &v6[8 * v13 - 16];
        uint64_t v17 = v14 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v19 = *(_OWORD *)v15;
          long long v18 = *((_OWORD *)v15 + 1);
          *(_OWORD *)std::runtime_error v15 = 0uLL;
          *((_OWORD *)v15 + 1) = 0uLL;
          v15 -= 32;
          *((_OWORD *)v16 - 1) = v19;
          *(_OWORD *)long long v16 = v18;
          v16 -= 32;
          v17 -= 4;
        }
        while (v17);
        if (v14 == (v14 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_22:
          uint64_t v2 = *(uint64_t **)a1;
          uint64_t v21 = *(uint64_t **)(a1 + 8);
          *(void *)a1 = v11;
          *(void *)(a1 + 8) = v9;
          *(void *)(a1 + 16) = v7;
          while (v21 != v2)
            std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v21, 0);
          goto LABEL_7;
        }
        v4 -= 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
      }
    }
    else
    {
      long long v11 = &v6[(v4 - (char *)v2) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      uint64_t v20 = *((void *)v4 - 1);
      v4 -= 8;
      *(void *)uint64_t v4 = 0;
      *((void *)v11 - 1) = v20;
      v11 -= 8;
    }
    while (v4 != (char *)v2);
    goto LABEL_22;
  }
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v7;
LABEL_7:
  if (v2)
  {
    operator delete(v2);
  }
}

uint64_t *std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    if (*(char *)(v2 + 119) < 0)
    {
      operator delete(*(void **)(v2 + 96));
      if ((*(char *)(v2 + 95) & 0x80000000) == 0)
      {
LABEL_4:
        if ((*(char *)(v2 + 71) & 0x80000000) == 0) {
          goto LABEL_5;
        }
        goto LABEL_12;
      }
    }
    else if ((*(char *)(v2 + 95) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(*(void **)(v2 + 72));
    if ((*(char *)(v2 + 71) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(v2 + 39) & 0x80000000) == 0) {
        goto LABEL_6;
      }
LABEL_13:
      operator delete(*(void **)(v2 + 16));
LABEL_6:
      JUMPOUT(0x192FA4080);
    }
LABEL_12:
    operator delete(*(void **)(v2 + 48));
    if ((*(char *)(v2 + 39) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
  return result;
}

uint64_t *std::vector<std::unique_ptr<AMSCore::HTTPCookie>>::__emplace_back_slow_path<std::unique_ptr<AMSCore::HTTPCookie>>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (char *)a1[1] - (char *)*a1;
  uint64_t v3 = v2 >> 3;
  unint64_t v4 = (v2 >> 3) + 1;
  if (v4 >> 61) {
    std::vector<std::string>::__throw_length_error[abi:fe180100]();
  }
  uint64_t v7 = (char *)a1[2] - (char *)*a1;
  if (v7 >> 2 > v4) {
    unint64_t v4 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v4;
  }
  if (v8)
  {
    if (v8 >> 61) {
      std::__throw_bad_array_new_length[abi:fe180100]();
    }
    unint64_t v9 = (char *)operator new(8 * v8);
  }
  else
  {
    unint64_t v9 = 0;
  }
  unint64_t v10 = (uint64_t *)&v9[8 * v3];
  long long v11 = (uint64_t *)&v9[8 * v8];
  uint64_t v12 = *a2;
  *a2 = 0;
  *unint64_t v10 = v12;
  uint64_t v13 = v10 + 1;
  uint64_t v14 = *a1;
  std::runtime_error v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (!v15) {
      return v13;
    }
    goto LABEL_23;
  }
  unint64_t v16 = (char *)v15 - (char *)*a1 - 8;
  if (v16 <= 0x77
    || (uint64_t *)((char *)v15 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8) < v10
    && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v15)
  {
    goto LABEL_19;
  }
  uint64_t v17 = (v16 >> 3) + 1;
  v10 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
  long long v18 = v15 - 4;
  long long v19 = &v9[8 * v3 - 16];
  uint64_t v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v22 = *(_OWORD *)v18;
    long long v21 = *((_OWORD *)v18 + 1);
    *(_OWORD *)long long v18 = 0uLL;
    *((_OWORD *)v18 + 1) = 0uLL;
    v18 -= 4;
    *((_OWORD *)v19 - 1) = v22;
    *(_OWORD *)long long v19 = v21;
    v19 -= 32;
    v20 -= 4;
  }
  while (v20);
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v15 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
LABEL_19:
      uint64_t v23 = *--v15;
      *std::runtime_error v15 = 0;
      *--unint64_t v10 = v23;
    }
    while (v15 != v14);
  }
  std::runtime_error v15 = *a1;
  uint64_t v24 = a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  while (v24 != v15)
    std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v24, 0);
  if (v15) {
LABEL_23:
  }
    operator delete(v15);
  return v13;
}

uint64_t **std::vector<std::unique_ptr<AMSCore::HTTPCookie>>::~vector[abi:fe180100](uint64_t **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
        std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v3, 0);
      while (v3 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::unhandled_exception()
{
  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

uint64_t sub_18DA555A4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v36, (uint64_t)v33);
  std::optional<std::expected<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>(v29, v36);
  v36[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  size_t v30 = v38;
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v37, v37[1]);
  MEMORY[0x192FA3C30](v36);
  v33[0] = &unk_1EDC827D8;
  int v31 = v35;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v34, v34[1]);
  return MEMORY[0x192FA3C30](v33);
}

uint64_t AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::Awaiter::await_suspend(uint64_t result)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void (**)(void))atomic_exchange((atomic_ullong *volatile)(*(void *)result + 96), 1uLL);
  if (v1)
  {
    uint64_t v2 = result;
    if (v1 == (void (**)(void))2) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result - 8))(*(void *)result - 16);
    }
    uint64_t v3 = (uint64_t *)(*(void *)result + 128);
    uint64_t result = *v3;
    if (*v3)
    {
      if (result == *(void *)v2 + 104)
      {
        long long v21 = v20;
        uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 24))(result, v20);
      }
      else
      {
        long long v21 = *(void **)(*(void *)v2 + 128);
        *uint64_t v3 = 0;
      }
    }
    else
    {
      long long v21 = 0;
    }
    if (v21)
    {
      uint64_t v4 = *(void *)v2;
      if (!*(unsigned char *)(*(void *)v2 + 88))
      {
        __break(1u);
        return result;
      }
      uint64_t v5 = (const std::runtime_error *)(v4 + 8);
      char v6 = *(unsigned char *)(v4 + 80);
      if (v6)
      {
        *(_OWORD *)std::string __p = *(_OWORD *)(v4 + 8);
        *(void *)&long long v14 = *(void *)(v4 + 24);
        *(void *)(v4 + 16) = 0;
        *(void *)(v4 + 24) = 0;
        v5->__vftable = 0;
      }
      else
      {
        std::runtime_error::runtime_error((std::runtime_error *)__p, v5);
        uint64_t v7 = (void *)(v4 + 48);
        uint64_t v8 = *(void *)(v4 + 48);
        long long v14 = *(_OWORD *)(v4 + 24);
        unint64_t v9 = *(uint64_t **)(v4 + 40);
        __p[0] = &unk_1EDC827D8;
        std::runtime_error v15 = v9;
        uint64_t v16 = v8;
        if (*(void *)(v4 + 56))
        {
          *(void *)(v8 + 16) = &v16;
          *(void *)(v4 + 40) = v7;
          *uint64_t v7 = 0;
          *(void *)(v4 + 56) = 0;
        }
        else
        {
          std::runtime_error v15 = &v16;
        }
        long long v18 = *(_OWORD *)(v4 + 64);
        *(void *)(v4 + 64) = 0;
        *(void *)(v4 + 72) = 0;
      }
      char v19 = v6;
      if (!v21) {
        std::__throw_bad_function_call[abi:fe180100]();
      }
      (*(void (**)(void *, void **))(*v21 + 48))(v21, __p);
      unint64_t v10 = (uint64_t *)__p[0];
      if (v19)
      {
        if (__p[0])
        {
          long long v11 = (uint64_t *)__p[1];
          uint64_t v12 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v11, 0);
            while (v11 != v10);
            uint64_t v12 = __p[0];
          }
          __p[1] = v10;
          operator delete(v12);
        }
      }
      else
      {
        (*(void (**)(void **))__p[0])(__p);
      }
    }
    else
    {
      (*v1)(v1);
    }
    uint64_t result = (uint64_t)v21;
    if (v21 == v20)
    {
      return (*(uint64_t (**)(void *))(v20[0] + 32))(v20);
    }
    else if (v21)
    {
      return (*(uint64_t (**)(void))(*v21 + 40))();
    }
  }
  return result;
}

void sub_18DA5598C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

std::runtime_error *std::optional<std::expected<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>(std::runtime_error *this, std::runtime_error *a2)
{
  if (LOBYTE(this[5].__vftable))
  {
    uint64_t v4 = this->__vftable;
    if (LOBYTE(this[4].__imp_.__imp_))
    {
      if (v4)
      {
        char imp = (uint64_t *)this->__imp_.__imp_;
        char v6 = this->__vftable;
        if (imp != (uint64_t *)v4)
        {
          do
            std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--imp, 0);
          while (imp != (uint64_t *)v4);
          char v6 = this->__vftable;
        }
        this->__imp_.__imp_ = (const char *)v4;
        operator delete(v6);
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))v4->~runtime_error)(this);
    }
    LOBYTE(this[5].__vftable) = 0;
  }
  std::runtime_error::runtime_error(this, a2);
  this->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA448] + 16);
  this[1] = a2[1];
  this->__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  this[2].__vftable = a2[2].__vftable;
  p_char imp = (std::runtime_error_vtbl *)&a2[2].__imp_;
  uint64_t v8 = a2[2].__imp_.__imp_;
  this[2].__imp_.__imp_ = v8;
  unint64_t v9 = (std::runtime_error_vtbl *)&this[2].__imp_;
  unint64_t v10 = a2[3].__vftable;
  this[3].__vftable = v10;
  if (v10)
  {
    *((void *)v8 + 2) = v9;
    a2[2].__vftable = p_imp;
    p_imp->~runtime_error = 0;
    a2[3].__vftable = 0;
  }
  else
  {
    this[2].__vftable = v9;
  }
  *(std::runtime_error *)((char *)this + 56) = *(std::runtime_error *)((char *)a2 + 56);
  a2[3].__imp_.__imp_ = 0;
  a2[4].__vftable = 0;
  LOBYTE(this[4].__imp_.__imp_) = 0;
  LOBYTE(this[5].__vftable) = 1;
  return this;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise *,AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINSt3__16vectorINS1_10unique_ptrINS_10HTTPCookieENS1_14default_deleteIS4_EEEENS1_9al"
                     "locatorIS7_EEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINSt3__16vectorINS1_10unique_ptrINS_10HTTPCookieENS1_14default_deleteIS4_"
                                "EEEENS1_9allocatorIS7_EEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINSt3__16vectorINS1_10unique_ptrINS_10HTTPCookieENS1_14default_deleteIS4_EEEENS1_9allocatorIS7_EEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINSt3__16vectorINS1_10unique_ptrINS_10HTTPCookieENS1_14default_deleteIS4_EEEENS1_9allocatorIS7_EEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise *,AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 96), 2uLL)) {
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise *,AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

uint64_t AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::~Promise(uint64_t a1)
{
  uint64_t v2 = a1 + 104;
  uint64_t v3 = *(void *)(a1 + 128);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    if (!*(unsigned char *)(a1 + 88)) {
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  if (*(unsigned char *)(a1 + 88))
  {
LABEL_7:
    uint64_t v4 = *(uint64_t **)(a1 + 8);
    if (*(unsigned char *)(a1 + 80))
    {
      if (v4)
      {
        uint64_t v5 = *(uint64_t **)(a1 + 16);
        char v6 = *(void **)(a1 + 8);
        if (v5 != v4)
        {
          do
            std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v5, 0);
          while (v5 != v4);
          char v6 = *(void **)(a1 + 8);
        }
        *(void *)(a1 + 16) = v4;
        operator delete(v6);
      }
    }
    else
    {
      ((void (*)(uint64_t))*v4)(a1 + 8);
    }
  }
LABEL_14:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  return a1;
}

void AMSCore::EphemeralHTTPCookieProvider::clear(AMSCore::EphemeralHTTPCookieProvider *this)
{
  uint64_t v2 = operator new(0xB0uLL);
  *uint64_t v2 = AMSCore::EphemeralHTTPCookieProvider::clear;
  v2[1] = AMSCore::EphemeralHTTPCookieProvider::clear;
  v2[20] = this;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *((unsigned char *)v2 + 24) = 0;
  *((unsigned char *)v2 + 104) = 0;
  v2[14] = 0;
  v2[18] = 0;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v3, (uint64_t)(v2 + 2));
}

uint64_t AMSCore::EphemeralHTTPCookieProvider::clear(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 160);
  long long v3 = (char *)v2[14];
  v2 += 14;
  std::__tree<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>>>::destroy(v3);
  *(v2 - 1) = v2;
  *uint64_t v2 = 0;
  v2[1] = 0;
  if (*(unsigned char *)(a1 + 104)) {
    BOOL v4 = *(unsigned char *)(a1 + 96) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    (**(void (***)(void))(a1 + 24))();
  }
  uint64_t v5 = (std::mutex *)(*(void *)(a1 + 160) + 8);
  *(unsigned char *)(a1 + 96) = 1;
  *(unsigned char *)(a1 + 104) = 1;
  AMSCore::AwaitableMutex::unlock(v5);
  *(void *)a1 = 0;
  *(void *)(a1 + 152) = a1 + 16;
  return AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(a1 + 152);
}

void AMSCore::EphemeralHTTPCookieProvider::clear(void *__p)
{
  uint64_t v2 = (char *)(__p + 15);
  long long v3 = (char *)__p[18];
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  if (*((unsigned char *)__p + 104)) {
    BOOL v4 = *((unsigned char *)__p + 96) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    (*(void (**)(void))__p[3])();
  }
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  operator delete(__p);
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>>>::destroy(*((void *)a1 + 1));
    std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100]((uint64_t *)a1 + 7, 0);
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

void AMSCore::EphemeralHTTPCookieProvider::addCookies(uint64_t a1, uint64_t a2)
{
  BOOL v4 = operator new(0xC8uLL);
  *BOOL v4 = AMSCore::EphemeralHTTPCookieProvider::addCookies;
  v4[1] = AMSCore::EphemeralHTTPCookieProvider::addCookies;
  v4[21] = a1;
  *((_OWORD *)v4 + 11) = *(_OWORD *)a2;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *((unsigned char *)v4 + 24) = 0;
  *((unsigned char *)v4 + 104) = 0;
  v4[14] = 0;
  v4[18] = 0;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(__p, (uint64_t)(v4 + 2));
}

void sub_18DA56304(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](v14);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DA56330()
{
}

uint64_t AMSCore::EphemeralHTTPCookieProvider::addCookies(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 168);
  *(void *)(a1 + 152) = v2 + 8;
  uint64_t v3 = a1 + 152;
  uint64_t v4 = a1 + 16;
  char v6 = *(uint64_t **)(a1 + 176);
  uint64_t v5 = *(uint64_t **)(a1 + 184);
  *(unsigned char *)(a1 + 160) = 1;
  if (v6 != v5)
  {
    uint64_t v7 = (uint64_t *)(v2 + 104);
    do
    {
      uint64_t v8 = *v6;
      uint64_t v9 = *v6 + 16;
      char v13 = 124;
      char v14 = 124;
      AMSCore::StringUtils::join<std::string,char,std::string,char,std::string>(&__p, v9, &v13, v8 + 48, &v14, v8 + 72);
      std::map<std::string,std::unique_ptr<AMSCore::HTTPCookie>>::insert_or_assign[abi:fe180100]<std::unique_ptr<AMSCore::HTTPCookie>>(v7, (const void **)&__p.__r_.__value_.__l.__data_, v6);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v6;
    }
    while (v6 != *(uint64_t **)(a1 + 184));
    uint64_t v2 = *(void *)(a1 + 168);
  }
  __p.__r_.__value_.__l.__data_ = (std::string::pointer)std::chrono::system_clock::now().__d_.__rep_;
  std::__libcpp_erase_if_container[abi:fe180100]<std::map<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::EphemeralHTTPCookieProvider::removeExpiredCookies(void)::{lambda(std::map<std::string,std::unique_ptr<AMSCore::HTTPCookie>> &)#1}>((void *)(v2 + 104), &__p);
  if (*(unsigned char *)(a1 + 104)) {
    BOOL v10 = *(unsigned char *)(a1 + 96) == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10) {
    (**(void (***)(void))(a1 + 24))();
  }
  long long v11 = (std::mutex *)(*(void *)(a1 + 168) + 8);
  *(unsigned char *)(a1 + 96) = 1;
  *(unsigned char *)(a1 + 104) = 1;
  AMSCore::AwaitableMutex::unlock(v11);
  *(void *)(a1 + 152) = v4;
  *(void *)a1 = 0;
  return AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v3);
}

void sub_18DA56488(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](v15);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DA564B4()
{
}

void AMSCore::EphemeralHTTPCookieProvider::addCookies(void *__p)
{
  uint64_t v2 = (char *)(__p + 15);
  uint64_t v3 = (char *)__p[18];
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  if (*((unsigned char *)__p + 104)) {
    BOOL v4 = *((unsigned char *)__p + 96) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    (*(void (**)(void))__p[3])();
  }
  uint64_t v5 = __p[22];
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v5)
  {
    char v6 = (uint64_t *)__p[23];
    if (v6 != (uint64_t *)__p[22])
    {
      do
      {
        uint64_t v7 = (uint64_t *)__p[22];
        std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v6, 0);
      }
      while (v6 != v7);
      char v6 = (uint64_t *)__p[22];
    }
    operator delete(v6);
  }
  operator delete(__p);
}

uint64_t AMSCore::StringUtils::join<std::string,char,std::string,char,std::string>(std::string *a1, uint64_t a2, char *a3, uint64_t a4, char *a5, uint64_t a6)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v22);
  int v12 = *(char *)(a2 + 23);
  if (v12 >= 0) {
    uint64_t v13 = a2;
  }
  else {
    uint64_t v13 = *(void *)a2;
  }
  if (v12 >= 0) {
    uint64_t v14 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v14 = *(void *)(a2 + 8);
  }
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v22, v13, v14);
  char v26 = *a3;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v22, (uint64_t)&v26, 1);
  int v15 = *(char *)(a4 + 23);
  if (v15 >= 0) {
    uint64_t v16 = a4;
  }
  else {
    uint64_t v16 = *(void *)a4;
  }
  if (v15 >= 0) {
    uint64_t v17 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    uint64_t v17 = *(void *)(a4 + 8);
  }
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v22, v16, v17);
  char v26 = *a5;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v22, (uint64_t)&v26, 1);
  int v18 = *(char *)(a6 + 23);
  if (v18 >= 0) {
    uint64_t v19 = a6;
  }
  else {
    uint64_t v19 = *(void *)a6;
  }
  if (v18 >= 0) {
    uint64_t v20 = *(unsigned __int8 *)(a6 + 23);
  }
  else {
    uint64_t v20 = *(void *)(a6 + 8);
  }
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v22, v19, v20);
  std::stringbuf::str[abi:fe180100]((uint64_t)v23, a1);
  uint64_t v22 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v23[-1] + *(void *)(v22 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v23[0] = MEMORY[0x1E4FBA470] + 16;
  if (v24 < 0) {
    operator delete((void *)v23[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FA3FD0](&v25);
}

uint64_t *std::map<std::string,std::unique_ptr<AMSCore::HTTPCookie>>::insert_or_assign[abi:fe180100]<std::unique_ptr<AMSCore::HTTPCookie>>(uint64_t *result, const void **a2, uint64_t *a3)
{
  BOOL v4 = result;
  uint64_t v5 = result + 1;
  uint64_t v6 = result[1];
  uint64_t v7 = v6;
  uint64_t v8 = result + 1;
  if (!v6) {
    goto LABEL_58;
  }
  char v9 = *((unsigned char *)a2 + 23);
  if (v9 >= 0) {
    BOOL v10 = a2;
  }
  else {
    BOOL v10 = *a2;
  }
  if (v9 >= 0) {
    size_t v11 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v11 = (size_t)a2[1];
  }
  int v12 = result + 1;
  uint64_t v13 = result[1];
  do
  {
    while (1)
    {
      int v14 = *(char *)(v13 + 55);
      int v15 = v14 >= 0 ? (const void *)(v13 + 32) : *(const void **)(v13 + 32);
      size_t v16 = v14 >= 0 ? *(unsigned __int8 *)(v13 + 55) : *(void *)(v13 + 40);
      size_t v17 = v11 >= v16 ? v16 : v11;
      uint64_t result = (uint64_t *)memcmp(v15, v10, v17);
      if (result) {
        break;
      }
      if (v16 >= v11) {
        goto LABEL_23;
      }
LABEL_9:
      uint64_t v13 = *(void *)(v13 + 8);
      if (!v13) {
        goto LABEL_24;
      }
    }
    if ((result & 0x80000000) != 0) {
      goto LABEL_9;
    }
LABEL_23:
    int v12 = (uint64_t *)v13;
    uint64_t v13 = *(void *)v13;
  }
  while (v13);
LABEL_24:
  uint64_t v8 = v5;
  if (v12 == v5) {
    goto LABEL_57;
  }
  int v18 = *((char *)v12 + 55);
  if (v18 >= 0) {
    uint64_t v19 = v12 + 4;
  }
  else {
    uint64_t v19 = (const void *)v12[4];
  }
  if (v18 >= 0) {
    size_t v20 = *((unsigned __int8 *)v12 + 55);
  }
  else {
    size_t v20 = v12[5];
  }
  if (v20 >= v11) {
    size_t v21 = v11;
  }
  else {
    size_t v21 = v20;
  }
  uint64_t result = (uint64_t *)memcmp(v10, v19, v21);
  if (!result)
  {
    if (v11 < v20) {
      goto LABEL_40;
    }
LABEL_36:
    uint64_t v22 = *a3;
    *a3 = 0;
    return std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](v12 + 7, v22);
  }
  if ((result & 0x80000000) == 0) {
    goto LABEL_36;
  }
LABEL_40:
  uint64_t v8 = v5;
  if (v5 == v12) {
    goto LABEL_57;
  }
  int v23 = *((char *)v12 + 55);
  if (v23 >= 0) {
    char v24 = v12 + 4;
  }
  else {
    char v24 = (const void *)v12[4];
  }
  if (v23 >= 0) {
    size_t v25 = *((unsigned __int8 *)v12 + 55);
  }
  else {
    size_t v25 = v12[5];
  }
  if (v25 >= v11) {
    size_t v26 = v11;
  }
  else {
    size_t v26 = v25;
  }
  uint64_t result = (uint64_t *)memcmp(v10, v24, v26);
  if (result)
  {
    if ((result & 0x80000000) == 0) {
      goto LABEL_52;
    }
LABEL_56:
    uint64_t v8 = v12;
LABEL_57:
    uint64_t v7 = *v8;
LABEL_58:
    int v12 = v8;
    if ((uint64_t *)*v4 == v8) {
      goto LABEL_106;
    }
    if (v7)
    {
      int v27 = (uint64_t *)v7;
      do
      {
        int v12 = v27;
        int v27 = (uint64_t *)v27[1];
      }
      while (v27);
    }
    else
    {
      uint64_t v28 = v8;
      do
      {
        int v12 = (uint64_t *)v28[2];
        BOOL v29 = *v12 == (void)v28;
        uint64_t v28 = v12;
      }
      while (v29);
    }
    int v30 = *((char *)v12 + 55);
    if (v30 >= 0) {
      int v31 = v12 + 4;
    }
    else {
      int v31 = (const void *)v12[4];
    }
    if (v30 >= 0) {
      size_t v32 = *((unsigned __int8 *)v12 + 55);
    }
    else {
      size_t v32 = v12[5];
    }
    int v33 = *((char *)a2 + 23);
    if (v33 >= 0) {
      uint64_t v34 = a2;
    }
    else {
      uint64_t v34 = *a2;
    }
    if (v33 >= 0) {
      size_t v35 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v35 = (size_t)a2[1];
    }
    if (v35 >= v32) {
      size_t v36 = v32;
    }
    else {
      size_t v36 = v35;
    }
    uint64_t result = (uint64_t *)memcmp(v31, v34, v36);
    if (result)
    {
      if ((result & 0x80000000) == 0) {
        goto LABEL_82;
      }
LABEL_106:
      if (v7) {
        uint64_t v8 = v12 + 1;
      }
      else {
        int v12 = v8;
      }
      goto LABEL_109;
    }
    if (v32 < v35) {
      goto LABEL_106;
    }
LABEL_82:
    if (!v6)
    {
      int v12 = v5;
LABEL_84:
      uint64_t v8 = v5;
      goto LABEL_109;
    }
    while (1)
    {
      int v12 = (uint64_t *)v6;
      int v37 = *(char *)(v6 + 55);
      if (v37 >= 0) {
        size_t v38 = (const void *)(v6 + 32);
      }
      else {
        size_t v38 = *(const void **)(v6 + 32);
      }
      if (v37 >= 0) {
        size_t v39 = *(unsigned __int8 *)(v6 + 55);
      }
      else {
        size_t v39 = *(void *)(v6 + 40);
      }
      if (v39 >= v35) {
        size_t v40 = v35;
      }
      else {
        size_t v40 = v39;
      }
      int v41 = memcmp(v34, v38, v40);
      if (v41)
      {
        if (v41 < 0) {
          goto LABEL_85;
        }
      }
      else if (v35 < v39)
      {
LABEL_85:
        uint64_t v6 = *v12;
        uint64_t v5 = v12;
        if (!*v12) {
          goto LABEL_110;
        }
        continue;
      }
      uint64_t result = (uint64_t *)memcmp(v38, v34, v40);
      if (result)
      {
        if ((result & 0x80000000) == 0) {
          goto LABEL_84;
        }
      }
      else if (v39 >= v35)
      {
        goto LABEL_84;
      }
      uint64_t v5 = v12 + 1;
      uint64_t v6 = v12[1];
      if (!v6) {
        goto LABEL_110;
      }
    }
  }
  if (v11 < v25) {
    goto LABEL_56;
  }
LABEL_52:
  uint64_t result = (uint64_t *)memcmp(v24, v10, v26);
  if (!result)
  {
    if (v25 >= v11) {
      return result;
    }
LABEL_116:
    uint64_t v8 = v12 + 1;
    size_t v47 = (uint64_t *)v12[1];
    if (v47)
    {
      do
      {
        uint64_t v8 = v47;
        size_t v47 = (uint64_t *)*v47;
        int v12 = v8;
        int v48 = v8;
      }
      while (v47);
    }
    else
    {
      int v48 = v12;
      do
      {
        int v49 = v48;
        int v48 = (uint64_t *)v48[2];
      }
      while ((uint64_t *)*v48 != v49);
    }
    if (v48 == v5) {
      goto LABEL_109;
    }
    uint64_t v52 = (const void *)v48[4];
    unint64_t v50 = v48 + 4;
    long long v51 = v52;
    int v53 = *((char *)v50 + 23);
    if (v53 >= 0) {
      uint64_t v54 = v50;
    }
    else {
      uint64_t v54 = v51;
    }
    if (v53 >= 0) {
      size_t v55 = *((unsigned __int8 *)v50 + 23);
    }
    else {
      size_t v55 = v50[1];
    }
    if (v55 >= v11) {
      size_t v56 = v11;
    }
    else {
      size_t v56 = v55;
    }
    uint64_t result = (uint64_t *)memcmp(v10, v54, v56);
    if (result)
    {
      if ((result & 0x80000000) == 0) {
        goto LABEL_137;
      }
      goto LABEL_109;
    }
    if (v11 < v55)
    {
LABEL_109:
      uint64_t v5 = v8;
      if (!*v8)
      {
LABEL_110:
        size_t v42 = operator new(0x40uLL);
        std::runtime_error v42[2] = *(_OWORD *)a2;
        int v43 = a2[2];
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        uint64_t v44 = *a3;
        *a3 = 0;
        *((void *)v42 + 6) = v43;
        *((void *)v42 + 7) = v44;
        *(void *)size_t v42 = 0;
        *((void *)v42 + 1) = 0;
        *((void *)v42 + 2) = v12;
        *uint64_t v5 = (uint64_t)v42;
        uint64_t v45 = *(void *)*v4;
        if (v45)
        {
          *BOOL v4 = v45;
          long long v46 = (uint64_t *)*v5;
        }
        else
        {
          long long v46 = (uint64_t *)v42;
        }
        uint64_t result = std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[1], v46);
        ++v4[2];
      }
      return result;
    }
    while (1)
    {
LABEL_137:
      int v12 = (uint64_t *)v6;
      int v57 = *(char *)(v6 + 55);
      if (v57 >= 0) {
        uint64_t v58 = (const void *)(v6 + 32);
      }
      else {
        uint64_t v58 = *(const void **)(v6 + 32);
      }
      if (v57 >= 0) {
        size_t v59 = *(unsigned __int8 *)(v6 + 55);
      }
      else {
        size_t v59 = *(void *)(v6 + 40);
      }
      if (v59 >= v11) {
        size_t v60 = v11;
      }
      else {
        size_t v60 = v59;
      }
      int v61 = memcmp(v10, v58, v60);
      if (v61)
      {
        if (v61 < 0) {
          goto LABEL_136;
        }
LABEL_150:
        uint64_t result = (uint64_t *)memcmp(v58, v10, v60);
        if (result)
        {
          if ((result & 0x80000000) == 0) {
            goto LABEL_84;
          }
        }
        else if (v59 >= v11)
        {
          goto LABEL_84;
        }
        uint64_t v5 = v12 + 1;
        uint64_t v6 = v12[1];
        if (!v6) {
          goto LABEL_110;
        }
      }
      else
      {
        if (v11 >= v59) {
          goto LABEL_150;
        }
LABEL_136:
        uint64_t v6 = *v12;
        uint64_t v5 = v12;
        if (!*v12) {
          goto LABEL_110;
        }
      }
    }
  }
  if ((result & 0x80000000) != 0) {
    goto LABEL_116;
  }
  return result;
}

void AMSCore::EphemeralHTTPCookieProvider::addCookie(uint64_t a1, void *a2)
{
  BOOL v4 = operator new(0xC0uLL);
  *BOOL v4 = AMSCore::EphemeralHTTPCookieProvider::addCookie;
  v4[1] = AMSCore::EphemeralHTTPCookieProvider::addCookie;
  v4[22] = a1;
  v4[21] = *a2;
  *a2 = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *((unsigned char *)v4 + 24) = 0;
  *((unsigned char *)v4 + 104) = 0;
  v4[14] = 0;
  v4[18] = 0;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(__p, (uint64_t)(v4 + 2));
}

void sub_18DA56EBC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](v14);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DA56EE8()
{
}

uint64_t AMSCore::EphemeralHTTPCookieProvider::addCookie(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 176);
  *(void *)(a1 + 152) = v2 + 8;
  uint64_t v3 = a1 + 152;
  *(unsigned char *)(a1 + 160) = 1;
  uint64_t v5 = (uint64_t *)(a1 + 168);
  uint64_t v4 = *(void *)(a1 + 168);
  uint64_t v6 = a1 + 16;
  char v10 = 124;
  char v11 = 124;
  AMSCore::StringUtils::join<std::string,char,std::string,char,std::string>(&__p, v4 + 16, &v10, v4 + 48, &v11, v4 + 72);
  uint64_t v7 = (uint64_t *)(v2 + 104);
  std::map<std::string,std::unique_ptr<AMSCore::HTTPCookie>>::insert_or_assign[abi:fe180100]<std::unique_ptr<AMSCore::HTTPCookie>>(v7, (const void **)&__p.__r_.__value_.__l.__data_, v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__l.__data_ = (std::string::pointer)std::chrono::system_clock::now().__d_.__rep_;
  std::__libcpp_erase_if_container[abi:fe180100]<std::map<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::EphemeralHTTPCookieProvider::removeExpiredCookies(void)::{lambda(std::map<std::string,std::unique_ptr<AMSCore::HTTPCookie>> &)#1}>(v7, &__p);
  if (*(unsigned char *)(a1 + 104) && !*(unsigned char *)(a1 + 96)) {
    (**(void (***)(void))(a1 + 24))();
  }
  uint64_t v8 = (std::mutex *)(*(void *)(a1 + 176) + 8);
  *(unsigned char *)(a1 + 96) = 1;
  *(unsigned char *)(a1 + 104) = 1;
  AMSCore::AwaitableMutex::unlock(v8);
  *(void *)(a1 + 152) = v6;
  *(void *)a1 = 0;
  return AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend(v3);
}

void sub_18DA5701C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](v15);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DA57048()
{
}

void AMSCore::EphemeralHTTPCookieProvider::addCookie(uint64_t a1)
{
  uint64_t v2 = a1 + 120;
  uint64_t v3 = *(void *)(a1 + 144);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  if (*(unsigned char *)(a1 + 104)) {
    BOOL v4 = *(unsigned char *)(a1 + 96) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    (**(void (***)(void))(a1 + 24))();
  }
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100]((uint64_t *)(a1 + 168), 0);
  operator delete((void *)a1);
}

void AMSCore::EphemeralHTTPCookieProvider::~EphemeralHTTPCookieProvider(AMSCore::EphemeralHTTPCookieProvider *this)
{
  std::__tree<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>>>::destroy(*((char **)this + 14));
  if (*((void *)this + 12))
  {
    uint64_t v3 = *((void *)this + 10);
    uint64_t v2 = (AMSCore::EphemeralHTTPCookieProvider *)*((void *)this + 11);
    uint64_t v4 = *(void *)v2;
    *(void *)(v4 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v4;
    *((void *)this + 12) = 0;
    if (v2 != (AMSCore::EphemeralHTTPCookieProvider *)((char *)this + 80))
    {
      do
      {
        uint64_t v5 = (AMSCore::EphemeralHTTPCookieProvider *)*((void *)v2 + 1);
        operator delete(v2);
        uint64_t v2 = v5;
      }
      while (v5 != (AMSCore::EphemeralHTTPCookieProvider *)((char *)this + 80));
    }
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  JUMPOUT(0x192FA4080);
}

{
  AMSCore::EphemeralHTTPCookieProvider *v2;
  uint64_t v3;
  uint64_t v4;
  AMSCore::EphemeralHTTPCookieProvider *v5;

  std::__tree<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>>>::destroy(*((char **)this + 14));
  if (*((void *)this + 12))
  {
    uint64_t v3 = *((void *)this + 10);
    uint64_t v2 = (AMSCore::EphemeralHTTPCookieProvider *)*((void *)this + 11);
    uint64_t v4 = *(void *)v2;
    *(void *)(v4 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v4;
    *((void *)this + 12) = 0;
    if (v2 != (AMSCore::EphemeralHTTPCookieProvider *)((char *)this + 80))
    {
      do
      {
        uint64_t v5 = (AMSCore::EphemeralHTTPCookieProvider *)*((void *)v2 + 1);
        operator delete(v2);
        uint64_t v2 = v5;
      }
      while (v5 != (AMSCore::EphemeralHTTPCookieProvider *)((char *)this + 80));
    }
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

void std::__shared_ptr_emplace<AMSCore::EphemeralHTTPCookieProvider>::__on_zero_shared(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<AMSCore::HTTPCookie>>>>::destroy(*(char **)(a1 + 136));
  if (*(void *)(a1 + 120))
  {
    uint64_t v3 = *(void *)(a1 + 104);
    uint64_t v2 = *(uint64_t **)(a1 + 112);
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v4;
    *(void *)(a1 + 120) = 0;
    if (v2 != (uint64_t *)(a1 + 104))
    {
      do
      {
        uint64_t v5 = (uint64_t *)v2[1];
        operator delete(v2);
        uint64_t v2 = v5;
      }
      while (v5 != (uint64_t *)(a1 + 104));
    }
  }
  std::mutex::~mutex((std::mutex *)(a1 + 32));
}

void std::__shared_ptr_emplace<AMSCore::EphemeralHTTPCookieProvider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC84128;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::EphemeralHTTPCookieProvider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC84128;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<AMSCore::IHTTPCookieProvider>,AMSCore::Error>::Promise *,AMSCore::Task<std::shared_ptr<AMSCore::IHTTPCookieProvider>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::IHTTPCookieProvider>,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINSt3__110shared_ptrINS_19IHTTPCookieProviderEEENS_5ErrorEE7Promise17get_return_obje"
                     "ctEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINSt3__110shared_ptrINS_19IHTTPCookieProviderEEENS_5ErrorEE7Promise17get_"
                                "return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINSt3__110shared_ptrINS_19IHTTPCookieProviderEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINSt3__110shared_ptrINS_19IHTTPCookieProviderEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<AMSCore::IHTTPCookieProvider>,AMSCore::Error>::Promise *,AMSCore::Task<std::shared_ptr<AMSCore::IHTTPCookieProvider>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::IHTTPCookieProvider>,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 96), 2uLL)) {
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<AMSCore::IHTTPCookieProvider>,AMSCore::Error>::Promise *,AMSCore::Task<std::shared_ptr<AMSCore::IHTTPCookieProvider>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::IHTTPCookieProvider>,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void AMSCore::EphemeralAccountProvider::getActiveMediaAccount(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (char *)operator new(0xD0uLL);
  *(void *)uint64_t v4 = AMSCore::EphemeralAccountProvider::getActiveMediaAccount;
  *((void *)v4 + 1) = AMSCore::EphemeralAccountProvider::getActiveMediaAccount;
  *((void *)v4 + 24) = a1;
  *(_OWORD *)(v4 + 152) = *(_OWORD *)a2;
  *((void *)v4 + 21) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  v4[24] = 0;
  v4[104] = 0;
  *((void *)v4 + 14) = 0;
  *((void *)v4 + 18) = 0;
  std::shared_ptr<AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise,AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v5, (uint64_t)(v4 + 16));
}

void sub_18DA57734(void *a1)
{
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](v1);
  __cxa_begin_catch(a1);
  AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DA57750()
{
}

uint64_t AMSCore::EphemeralAccountProvider::getActiveMediaAccount(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 192);
  *(void *)(a1 + 176) = v2 + 192;
  uint64_t v3 = a1 + 176;
  uint64_t v4 = a1 + 16;
  *(unsigned char *)(a1 + 184) = 1;
  long long v5 = *(void **)(v2 + 24);
  uint64_t v6 = *(void **)(v2 + 32);
  if (v5 == v6)
  {
LABEL_4:
    if (*(unsigned char *)(a1 + 104))
    {
      uint64_t v7 = *(void *)(a1 + 24);
      if (*(unsigned char *)(a1 + 96))
      {
        *(void *)(a1 + 24) = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
      }
      else
      {
        (*(void (**)(uint64_t))v7)(a1 + 24);
      }
    }
    *(void *)(a1 + 24) = 0;
  }
  else
  {
    while (!(*(unsigned int (**)(void, uint64_t))(*(void *)*v5 + 80))(*v5, v3 - 24))
    {
      if (++v5 == v6) {
        goto LABEL_4;
      }
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*v5 + 48))(&v10);
    if (*(unsigned char *)(a1 + 104))
    {
      uint64_t v8 = *(void *)(a1 + 24);
      if (*(unsigned char *)(a1 + 96))
      {
        *(void *)(a1 + 24) = 0;
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
        }
      }
      else
      {
        (*(void (**)(uint64_t))v8)(a1 + 24);
      }
    }
    *(void *)(a1 + 24) = v10;
  }
  *(unsigned char *)(a1 + 96) = 1;
  *(unsigned char *)(a1 + 104) = 1;
  AMSCore::AwaitableMutex::unlock((std::mutex *)(*(void *)(a1 + 192) + 192));
  *(void *)(a1 + 176) = v4;
  *(void *)a1 = 0;
  return AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::Awaiter::await_suspend(v3);
}

void sub_18DA5794C(void *a1)
{
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](v1);
  __cxa_begin_catch(a1);
  AMSCore::Task<std::unique_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DA57968()
{
}

void AMSCore::EphemeralAccountProvider::getActiveMediaAccount(char *__p)
{
  uint64_t v2 = __p + 120;
  uint64_t v3 = (char *)*((void *)__p + 18);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    if (!__p[104]) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
  if (v3) {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  if (__p[104])
  {
LABEL_7:
    uint64_t v4 = *((void *)__p + 3);
    if (__p[96])
    {
      *((void *)__p + 3) = 0;
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
    }
    else
    {
      (*(void (**)(char *))v4)(__p + 24);
    }
  }
LABEL_11:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (__p[175] < 0) {
    operator delete(*((void **)__p + 19));
  }
  operator delete(__p);
}

void AMSCore::EphemeralAccountProvider::getActiveiCloudAccount(AMSCore::EphemeralAccountProvider *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = operator new(0xA8uLL);
  *uint64_t v1 = AMSCore::EphemeralAccountProvider::getActiveiCloudAccount;
  v1[1] = AMSCore::EphemeralAccountProvider::getActiveiCloudAccount;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *((unsigned char *)v1 + 24) = 0;
  *((unsigned char *)v1 + 104) = 0;
  v1[14] = 0;
  v1[18] = 0;
  operator new();
}

void sub_18DA57EB4(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    JUMPOUT(0x18DA57ED8);
  }
  JUMPOUT(0x18DA57ED0);
}

void sub_18DA57EC8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AMSCore::EphemeralAccountProvider::getActiveiCloudAccount(void *__p)
{
  uint64_t v2 = (char *)(__p + 15);
  uint64_t v3 = (char *)__p[18];
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    if (!*((unsigned char *)__p + 104)) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
  if (v3) {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  if (*((unsigned char *)__p + 104))
  {
LABEL_7:
    uint64_t v4 = __p[3];
    if (*((unsigned char *)__p + 96))
    {
      __p[3] = 0;
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
    }
    else
    {
      (*(void (**)(char *))v4)((char *)__p + 24);
    }
  }
LABEL_11:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  operator delete(__p);
}

void AMSCore::EphemeralAccountProvider::createMediaAccount()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_18DA58200(_Unwind_Exception *exception_object, int a2, ...)
{
  va_start(va, a2);
  if (a2)
  {
    operator delete(v3);
    AMSCore::AccountIdentity::~AccountIdentity((void **)va);
    MEMORY[0x192FA4080](v2, 0x10B3C40FF472039);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::EphemeralAccountProvider::~EphemeralAccountProvider(AMSCore::EphemeralAccountProvider *this)
{
  AMSCore::EphemeralAccountProvider::~EphemeralAccountProvider(this);
  JUMPOUT(0x192FA4080);
}

{
  std::mutex *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  *(void *)this = &unk_1EDC82548;
  uint64_t v2 = (std::mutex *)((char *)this + 192);
  if (*((void *)this + 35))
  {
    uint64_t v3 = (char *)this + 264;
    long long v5 = *((void *)this + 33);
    uint64_t v4 = (char *)*((void *)this + 34);
    uint64_t v6 = *(void *)v4;
    *(void *)(v6 + 8) = *(void *)(v5 + 8);
    **(void **)(v5 + 8) = v6;
    *((void *)this + 35) = 0;
    if (v4 != (char *)this + 264)
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v4 + 1);
        operator delete(v4);
        uint64_t v4 = v7;
      }
      while (v7 != v3);
    }
  }
  std::mutex::~mutex(v2);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    char v9 = (std::__shared_weak_count *)*((void *)this + 21);
    if (!v9) {
      goto LABEL_10;
    }
  }
  else
  {
    char v9 = (std::__shared_weak_count *)*((void *)this + 21);
    if (!v9) {
      goto LABEL_10;
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_10:
  std::__tree<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>>>::destroy(*((char **)this + 18));
  uint64_t v10 = *((void *)this + 14);
  if (v10)
  {
    char v11 = *((void *)this + 15);
    int v12 = (void *)*((void *)this + 14);
    if (v11 != v10)
    {
      do
      {
        uint64_t v13 = *(std::__shared_weak_count **)(v11 - 8);
        if (v13) {
          std::__shared_weak_count::__release_weak(v13);
        }
        v11 -= 16;
      }
      while (v11 != v10);
      int v12 = (void *)*((void *)this + 14);
    }
    *((void *)this + 15) = v10;
    operator delete(v12);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 48));
  uint64_t v14 = (void *)*((void *)this + 3);
  if (v14)
  {
    uint64_t v15 = (void *)*((void *)this + 4);
    size_t v16 = (void *)*((void *)this + 3);
    if (v15 != v14)
    {
      do
      {
        int v18 = *--v15;
        size_t v17 = v18;
        *uint64_t v15 = 0;
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
        }
      }
      while (v15 != v14);
      size_t v16 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v14;
    operator delete(v16);
  }
  uint64_t v19 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>>>::destroy(char *a1)
{
  if (!a1) {
    return;
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>>>::destroy(*(void *)a1);
  std::__tree<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMSCore::IHTTPCookieProvider>>>>::destroy(*((void *)a1 + 1));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)a1 + 8);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((a1[55] & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (a1[55] < 0) {
LABEL_5:
  }
    operator delete(*((void **)a1 + 4));
LABEL_6:
  operator delete(a1);
}

uint64_t std::__shared_ptr_pointer<AMSCore::EphemeralAccountProvider *,std::shared_ptr<AMSCore::IAccountProvider>::__shared_ptr_default_delete<AMSCore::IAccountProvider,AMSCore::EphemeralAccountProvider>,std::allocator<AMSCore::EphemeralAccountProvider>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN7AMSCore16IAccountProviderEE27__shared_ptr_default_deleteIS2_NS1_24EphemeralAc"
                     "countProviderEEE"
    || ((v3 & (unint64_t)"NSt3__110shared_ptrIN7AMSCore16IAccountProviderEE27__shared_ptr_default_deleteIS2_NS1_24"
                                "EphemeralAccountProviderEEE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "NSt3__110shared_ptrIN7AMSCore16IAccountProviderEE27__shared_ptr_default_deleteIS2_NS1_24EphemeralAccountProviderEEE")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN7AMSCore16IAccountProviderEE27__shared_ptr_default_deleteIS2_NS1_24EphemeralAccountProviderEEE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::EphemeralAccountProvider *,std::shared_ptr<AMSCore::IAccountProvider>::__shared_ptr_default_delete<AMSCore::IAccountProvider,AMSCore::EphemeralAccountProvider>,std::allocator<AMSCore::EphemeralAccountProvider>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::EphemeralAccountProvider *,std::shared_ptr<AMSCore::IAccountProvider>::__shared_ptr_default_delete<AMSCore::IAccountProvider,AMSCore::EphemeralAccountProvider>,std::allocator<AMSCore::EphemeralAccountProvider>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void AMSCore::AwaitableMutex::~AwaitableMutex(std::mutex *this)
{
  if (*(void *)&this[1].__m_.__opaque[16])
  {
    opaque = this[1].__m_.__opaque;
    uint64_t v4 = *(void *)this[1].__m_.__opaque;
    unint64_t v3 = *(std::mutex **)&this[1].__m_.__opaque[8];
    uint64_t sig = v3->__m_.__sig;
    *(void *)(sig + 8) = *(void *)(v4 + 8);
    **(void **)(v4 + 8) = sig;
    *(void *)&this[1].__m_.__opaque[16] = 0;
    if (v3 != (std::mutex *)this[1].__m_.__opaque)
    {
      do
      {
        uint64_t v6 = *(std::mutex **)v3->__m_.__opaque;
        operator delete(v3);
        unint64_t v3 = v6;
      }
      while (v6 != (std::mutex *)opaque);
    }
  }
  std::mutex::~mutex(this);
}

void AMSCore::Subject<std::string const&,AMSCore::AccountChangedMetadata>::~Subject(std::mutex *this)
{
  uint64_t sig = this[1].__m_.__sig;
  if (sig)
  {
    uint64_t v3 = *(void *)this[1].__m_.__opaque;
    uint64_t v4 = (void *)this[1].__m_.__sig;
    if (v3 != sig)
    {
      do
      {
        long long v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5) {
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != sig);
      uint64_t v4 = (void *)this[1].__m_.__sig;
    }
    *(void *)this[1].__m_.__opaque = sig;
    operator delete(v4);
  }
  std::mutex::~mutex(this);
}

uint64_t std::__shared_ptr_emplace<AMSCore::MediaAccount>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMSCore::MediaAccount>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83B40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::MediaAccount>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83B40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AMSCore::MediaAccount::setStorefront(uint64_t a1, uint64_t a2, const std::string::value_type **a3)
{
  size_t v17 = 0;
  uint64_t v18 = 0;
  size_t v16 = &v17;
  uint64_t v5 = a1 + 96;
  unint64_t MapValue = AMSCore::AccountProperties::getMapValue(a1 + 96, "storefronts", 0xBuLL);
  if (v7) {
    BOOL v8 = &v16 == (unsigned int ***)MapValue;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8) {
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,AMSCore::Any>,std::__tree_node<std::__value_type<std::string,AMSCore::Any>,void *> *,long>>((uint64_t)&v16, *(long long **)MapValue, (long long *)(MapValue + 8));
  }
  if (*(unsigned char *)(a2 + 24))
  {
    std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>(&v16, a3, (long long *)a2);
  }
  else
  {
    char v9 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)&v16, (const void **)a3);
    if (&v17 != (unsigned int **)v9) {
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase(&v16, (uint64_t)v9);
    }
  }
  if (v18)
  {
    uint64_t v13 = v16;
    v14[0] = v17;
    v14[1] = v18;
    *((void *)v17 + 2) = v14;
    size_t v16 = &v17;
    size_t v17 = 0;
    uint64_t v18 = 0;
    int v15 = 8;
    AMSCore::AccountProperties::setValue(v5, "storefronts", 0xBuLL, (uint64_t)&v13);
    uint64_t v10 = &v15;
    if (v15 != -1) {
      ((void (*)(char *, unsigned int ***))off_1EDCA4DE0[v15])(&v19, &v13);
    }
  }
  else
  {
    long long v11 = 0u;
    long long v12 = 0u;
    AMSCore::AccountProperties::setValue(v5, "storefronts", 0xBuLL, (uint64_t)&v11);
    uint64_t v10 = (int *)&v12 + 2;
    if (DWORD2(v12) != -1) {
      ((void (*)(char *, long long *))off_1EDCA4DE0[DWORD2(v12)])(&v19, &v11);
    }
  }
  *uint64_t v10 = -1;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v16, v17);
}

void sub_18DA5893C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  AMSCore::Any::~Any((AMSCore::Any *)&a9);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&a17, *(unsigned int **)(v17 + 8));
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,AMSCore::Any>,std::__tree_node<std::__value_type<std::string,AMSCore::Any>,void *> *,long>>(uint64_t a1, long long *a2, long long *a3)
{
  uint64_t v4 = a2;
  if (!*(void *)(a1 + 16)) {
    goto LABEL_82;
  }
  uint64_t v6 = *(uint64_t **)a1;
  BOOL v8 = (uint64_t **)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = a1 + 8;
  *(void *)(v7 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  char v9 = v6[1] ? (unsigned int *)v6[1] : (unsigned int *)v6;
  uint64_t v64 = a1;
  uint64_t v66 = (uint64_t *)v9;
  if (!v9) {
    goto LABEL_82;
  }
  uint64_t v10 = (unsigned int *)*((void *)v9 + 2);
  if (v10)
  {
    long long v11 = *(unsigned int **)v10;
    if (*(unsigned int **)v10 == v9)
    {
      *(void *)uint64_t v10 = 0;
      while (1)
      {
        size_t v62 = (unsigned int *)*((void *)v10 + 1);
        if (!v62) {
          break;
        }
        do
        {
          uint64_t v10 = v62;
          size_t v62 = *(unsigned int **)v62;
        }
        while (v62);
      }
    }
    else
    {
      for (*((void *)v10 + 1) = 0; v11; long long v11 = (unsigned int *)*((void *)v10 + 1))
      {
        do
        {
          uint64_t v10 = v11;
          long long v11 = *(unsigned int **)v11;
        }
        while (v11);
      }
    }
  }
  int v65 = v10;
  if (a2 == a3)
  {
    uint64_t v40 = a1;
    goto LABEL_77;
  }
  long long v12 = a2;
  do
  {
    if (v9 != (unsigned int *)v12)
    {
      uint64_t v13 = (void **)(v9 + 8);
      char v14 = *((unsigned char *)v12 + 55);
      if (*((char *)v9 + 55) < 0)
      {
        if (v14 >= 0) {
          size_t v16 = v12 + 2;
        }
        else {
          size_t v16 = (void *)*((void *)v12 + 4);
        }
        if (v14 >= 0) {
          size_t v17 = *((unsigned __int8 *)v12 + 55);
        }
        else {
          size_t v17 = *((void *)v12 + 5);
        }
        std::string::__assign_no_alias<false>(v13, v16, v17);
      }
      else if ((*((unsigned char *)v12 + 55) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v13, *((void **)v12 + 4), *((void *)v12 + 5));
      }
      else
      {
        long long v15 = v12[2];
        *((void *)v9 + 6) = *((void *)v12 + 6);
        *(_OWORD *)uint64_t v13 = v15;
      }
    }
    uint64_t v18 = v9[20];
    uint64_t v19 = *((unsigned int *)v12 + 20);
    if (v18 == -1)
    {
      if (v19 != -1)
      {
LABEL_29:
        size_t v63 = v9 + 14;
        ((void (*)(void **))off_1EDCA4E30[v19])(&v63);
      }
    }
    else
    {
      if (v19 != -1) {
        goto LABEL_29;
      }
      ((void (*)(void **, unsigned int *))off_1EDCA4DE0[v18])(&v63, v9 + 14);
      v9[20] = -1;
    }
    size_t v20 = v66;
    size_t v21 = *v8;
    uint64_t v22 = (uint64_t **)(a1 + 8);
    int v23 = (uint64_t **)(a1 + 8);
    if (!*v8) {
      goto LABEL_53;
    }
    int v24 = *((char *)v66 + 55);
    if (v24 >= 0) {
      size_t v25 = v66 + 4;
    }
    else {
      size_t v25 = (const void *)v66[4];
    }
    if (v24 >= 0) {
      unint64_t v26 = *((unsigned __int8 *)v66 + 55);
    }
    else {
      unint64_t v26 = v66[5];
    }
    do
    {
      while (1)
      {
        uint64_t v22 = (uint64_t **)v21;
        uint64_t v29 = v21[4];
        int v27 = v21 + 4;
        uint64_t v28 = (void *)v29;
        int v30 = *((char *)v27 + 23);
        int v31 = v30 >= 0 ? v27 : v28;
        unint64_t v32 = v30 >= 0 ? *((unsigned __int8 *)v27 + 23) : v27[1];
        size_t v33 = v32 >= v26 ? v26 : v32;
        int v34 = memcmp(v25, v31, v33);
        if (v34) {
          break;
        }
        if (v26 >= v32) {
          goto LABEL_51;
        }
LABEL_37:
        size_t v21 = *v22;
        int v23 = v22;
        if (!*v22) {
          goto LABEL_53;
        }
      }
      if (v34 < 0) {
        goto LABEL_37;
      }
LABEL_51:
      size_t v21 = v22[1];
    }
    while (v21);
    int v23 = v22 + 1;
LABEL_53:
    *size_t v20 = 0;
    v20[1] = 0;
    v20[2] = (uint64_t)v22;
    *int v23 = v20;
    uint64_t v35 = **(void **)a1;
    if (v35)
    {
      *(void *)a1 = v35;
      size_t v20 = *v23;
    }
    std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v20);
    ++*(void *)(a1 + 16);
    char v9 = v65;
    uint64_t v66 = (uint64_t *)v65;
    if (v65)
    {
      uint64_t v10 = (unsigned int *)*((void *)v65 + 2);
      if (v10)
      {
        size_t v36 = *(unsigned int **)v10;
        if (*(unsigned int **)v10 == v65)
        {
          *(void *)uint64_t v10 = 0;
          while (1)
          {
            size_t v39 = (unsigned int *)*((void *)v10 + 1);
            if (!v39) {
              break;
            }
            do
            {
              uint64_t v10 = v39;
              size_t v39 = *(unsigned int **)v39;
            }
            while (v39);
          }
        }
        else
        {
          for (*((void *)v10 + 1) = 0; v36; size_t v36 = (unsigned int *)*((void *)v10 + 1))
          {
            do
            {
              uint64_t v10 = v36;
              size_t v36 = *(unsigned int **)v36;
            }
            while (v36);
          }
        }
      }
      int v65 = v10;
      int v37 = (long long *)*((void *)v12 + 1);
      if (!v37)
      {
        do
        {
LABEL_66:
          uint64_t v4 = (long long *)*((void *)v12 + 2);
          BOOL v38 = *(void *)v4 == (void)v12;
          long long v12 = v4;
        }
        while (!v38);
        goto LABEL_68;
      }
    }
    else
    {
      uint64_t v10 = 0;
      int v37 = (long long *)*((void *)v12 + 1);
      if (!v37) {
        goto LABEL_66;
      }
    }
    do
    {
      uint64_t v4 = v37;
      int v37 = *(long long **)v37;
    }
    while (v37);
LABEL_68:
    if (!v9) {
      break;
    }
    long long v12 = v4;
  }
  while (v4 != a3);
  uint64_t v40 = v64;
LABEL_77:
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v40, v9);
  if (v10)
  {
    int v41 = (unsigned int *)*((void *)v10 + 2);
    if (v41)
    {
      do
      {
        uint64_t v10 = v41;
        int v41 = (unsigned int *)*((void *)v41 + 2);
      }
      while (v41);
      int v65 = v10;
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v40, v10);
  }
LABEL_82:
  if (v4 == a3) {
    return;
  }
  size_t v42 = (char **)(a1 + 8);
  while (2)
  {
    int v43 = (char *)operator new(0x58uLL);
    uint64_t v64 = (uint64_t)v43;
    int v65 = (unsigned int *)(a1 + 8);
    LOBYTE(v66) = 0;
    uint64_t v44 = std::pair<std::string const,AMSCore::Any>::pair[abi:fe180100]((std::string *)(v43 + 32), v4 + 2);
    uint64_t v45 = *v42;
    long long v46 = (char **)(a1 + 8);
    size_t v47 = (char **)(a1 + 8);
    if (!*v42) {
      goto LABEL_108;
    }
    int v48 = v43[55];
    if (v48 >= 0) {
      int v49 = v44;
    }
    else {
      int v49 = (std::string *)*((void *)v43 + 4);
    }
    if (v48 >= 0) {
      size_t v50 = v43[55];
    }
    else {
      size_t v50 = *((void *)v43 + 5);
    }
    while (2)
    {
      while (2)
      {
        long long v46 = (char **)v45;
        int v53 = (const void *)*((void *)v45 + 4);
        long long v51 = v45 + 32;
        uint64_t v52 = v53;
        int v54 = *((char *)v51 + 23);
        if (v54 >= 0) {
          size_t v55 = v51;
        }
        else {
          size_t v55 = v52;
        }
        if (v54 >= 0) {
          size_t v56 = *((unsigned __int8 *)v51 + 23);
        }
        else {
          size_t v56 = v51[1];
        }
        if (v56 >= v50) {
          size_t v57 = v50;
        }
        else {
          size_t v57 = v56;
        }
        int v58 = memcmp(v49, v55, v57);
        if (v58)
        {
          if ((v58 & 0x80000000) == 0) {
            break;
          }
          goto LABEL_92;
        }
        if (v50 < v56)
        {
LABEL_92:
          uint64_t v45 = *v46;
          size_t v47 = v46;
          if (!*v46) {
            goto LABEL_108;
          }
          continue;
        }
        break;
      }
      uint64_t v45 = v46[1];
      if (v45) {
        continue;
      }
      break;
    }
    size_t v47 = v46 + 1;
LABEL_108:
    *(void *)int v43 = 0;
    *((void *)v43 + 1) = 0;
    *((void *)v43 + 2) = v46;
    *size_t v47 = v43;
    uint64_t v59 = **(void **)a1;
    if (v59)
    {
      *(void *)a1 = v59;
      int v43 = *v47;
    }
    std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), (uint64_t *)v43);
    ++*(void *)(a1 + 16);
    size_t v60 = (long long *)*((void *)v4 + 1);
    if (v60)
    {
      do
      {
        int v61 = v60;
        size_t v60 = *(long long **)v60;
      }
      while (v60);
    }
    else
    {
      do
      {
        int v61 = (long long *)*((void *)v4 + 2);
        BOOL v38 = *(void *)v61 == (void)v4;
        uint64_t v4 = v61;
      }
      while (!v38);
    }
    uint64_t v4 = v61;
    if (v61 != a3) {
      continue;
    }
    break;
  }
}

void sub_18DA58E08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:fe180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18DA58E1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,AMSCore::Any>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,AMSCore::Any>,void *>>>>::~unique_ptr[abi:fe180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

char **std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<std::string>(void **a1, const std::string::value_type **a2, long long *a3)
{
  uint64_t v6 = (uint64_t *)(a1 + 1);
  uint64_t v7 = a1[1];
  if (!v7) {
    goto LABEL_42;
  }
  int v8 = *((char *)a2 + 23);
  if (v8 >= 0) {
    char v9 = (const std::string::value_type *)a2;
  }
  else {
    char v9 = *a2;
  }
  if (v8 >= 0) {
    size_t v10 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v10 = (size_t)a2[1];
  }
  long long v11 = (uint64_t *)(a1 + 1);
  do
  {
    while (1)
    {
      int v12 = *((char *)v7 + 55);
      uint64_t v13 = v12 >= 0 ? v7 + 4 : (uint64_t *)v7[4];
      size_t v14 = v12 >= 0 ? *((unsigned __int8 *)v7 + 55) : v7[5];
      size_t v15 = v10 >= v14 ? v14 : v10;
      int v16 = memcmp(v13, v9, v15);
      if (v16) {
        break;
      }
      if (v14 < v10) {
        goto LABEL_11;
      }
LABEL_9:
      long long v11 = v7;
      uint64_t v7 = (uint64_t *)*v7;
      if (!v7) {
        goto LABEL_26;
      }
    }
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_11:
    uint64_t v7 = (uint64_t *)v7[1];
  }
  while (v7);
LABEL_26:
  if (v11 != v6)
  {
    int v17 = *((char *)v11 + 55);
    if (v17 >= 0) {
      uint64_t v18 = v11 + 4;
    }
    else {
      uint64_t v18 = (void *)v11[4];
    }
    if (v17 >= 0) {
      size_t v19 = *((unsigned __int8 *)v11 + 55);
    }
    else {
      size_t v19 = v11[5];
    }
    if (v19 >= v10) {
      size_t v20 = v10;
    }
    else {
      size_t v20 = v19;
    }
    int v21 = memcmp(v9, v18, v20);
    if (v21)
    {
      if ((v21 & 0x80000000) == 0)
      {
LABEL_38:
        long long v28 = *a3;
        uint64_t v29 = *((void *)a3 + 2);
        *((void *)a3 + 1) = 0;
        *((void *)a3 + 2) = 0;
        *(void *)a3 = 0;
        int v30 = 5;
        uint64_t result = (char **)AMSCore::Any::operator=((uint64_t)(v11 + 7), (uint64_t)&v28);
        if (v30 != -1) {
          return (char **)((uint64_t (*)(uint64_t **, long long *))off_1EDCA4DE0[v30])(&v31, &v28);
        }
        return result;
      }
    }
    else if (v10 >= v19)
    {
      goto LABEL_38;
    }
    uint64_t v6 = v11;
  }
LABEL_42:
  uint64_t result = (char **)std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__find_equal<std::string>(a1, v6, (uint64_t **)&v28, &v31, (const void **)a2);
  if (!*result)
  {
    int v23 = result;
    int v24 = (char *)operator new(0x58uLL);
    size_t v25 = (std::string *)(v24 + 32);
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v25, *a2, (std::string::size_type)a2[1]);
    }
    else
    {
      *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      *((void *)v24 + 6) = a2[2];
    }
    *(_OWORD *)(v24 + 56) = *a3;
    *((void *)v24 + 9) = *((void *)a3 + 2);
    *((void *)a3 + 1) = 0;
    *((void *)a3 + 2) = 0;
    *(void *)a3 = 0;
    *((_DWORD *)v24 + 20) = 5;
    uint64_t v26 = v28;
    *(void *)int v24 = 0;
    *((void *)v24 + 1) = 0;
    *((void *)v24 + 2) = v26;
    *int v23 = v24;
    int v27 = (void *)**a1;
    if (v27)
    {
      *a1 = v27;
      int v24 = *v23;
    }
    uint64_t result = (char **)std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v24);
    a1[2] = (void *)((char *)a1[2] + 1);
  }
  return result;
}

void sub_18DA59064(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:fe180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(*(void *)a1, *(unsigned int **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(*(void *)a1, (unsigned int *)v2);
  }
  return a1;
}

uint64_t *std::unique_ptr<std::__tree_node<std::__value_type<std::string,AMSCore::Any>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,AMSCore::Any>,void *>>>>::~unique_ptr[abi:fe180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(unsigned int *)(v2 + 80);
      if (v3 != -1) {
        ((void (*)(char *, uint64_t))off_1EDCA4DE0[v3])(&v5, v2 + 56);
      }
      *(_DWORD *)(v2 + 80) = -1;
      if (*(char *)(v2 + 55) < 0) {
        operator delete(*(void **)(v2 + 32));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void *std::string::__assign_no_alias<true>(void *__dst, void *__src, size_t __len)
{
  if (__len > 0x16)
  {
    if (__len - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL) {
      std::string::__throw_length_error[abi:fe180100]();
    }
    size_t v7 = 44;
    if (__len > 0x2C) {
      size_t v7 = __len;
    }
    size_t v8 = (v7 | 7) + 1;
    uint64_t v6 = operator new(v8);
    memcpy(v6, __src, __len);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    uint64_t v6 = __dst;
    if (__len)
    {
      memmove(__dst, __src, __len);
      uint64_t v6 = __dst;
    }
  }
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void **std::string::__assign_no_alias<false>(void **a1, void *__src, size_t __len)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) <= __len)
  {
    size_t v9 = 0x7FFFFFFFFFFFFFF7;
    if (0x7FFFFFFFFFFFFFF7 - v7 < __len - v7 + 1) {
      std::string::__throw_length_error[abi:fe180100]();
    }
    unint64_t v10 = v7 - 1;
    long long v11 = a1;
    if ((v6 & 0x8000000000000000) != 0) {
      long long v11 = *a1;
    }
    if (v10 <= 0x3FFFFFFFFFFFFFF2)
    {
      unint64_t v12 = 2 * v10;
      if (__len > 2 * v10) {
        unint64_t v12 = __len;
      }
      uint64_t v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17) {
        uint64_t v13 = v12 | 7;
      }
      if (v12 >= 0x17) {
        size_t v9 = v13 + 1;
      }
      else {
        size_t v9 = 23;
      }
    }
    size_t v14 = operator new(v9);
    size_t v8 = v14;
    if (__len) {
      memcpy(v14, __src, __len);
    }
    if (v10 != 22) {
      operator delete(v11);
    }
    a1[1] = (void *)__len;
    a1[2] = (void *)(v9 | 0x8000000000000000);
    *a1 = v8;
  }
  else
  {
    size_t v8 = *a1;
    a1[1] = (void *)__len;
    if (__len) {
      memmove(v8, __src, __len);
    }
  }
  *((unsigned char *)v8 + __len) = 0;
  return a1;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100IRKNS0_17__copy_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS19_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEERKS1H_EEEDcS19_DpT0_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  if (*(_DWORD *)(*a1 + 24) == 9)
  {
    if (a2 != a3)
    {
      uint64_t v5 = *a3;
      uint64_t v4 = a3[1];
      std::vector<AMSCore::Any>::__assign_with_size[abi:fe180100]<AMSCore::Any*,AMSCore::Any*>(a2, v5, v4, (v4 - v5) >> 5);
    }
  }
  else
  {
    std::vector<AMSCore::Any>::vector(&v8, a3);
    uint64_t v7 = *(unsigned int *)(v3 + 24);
    if (v7 != -1) {
      ((void (*)(char *, uint64_t))off_1EDCA4DE0[v7])(&v10, v3);
    }
    double result = *(double *)&v8;
    *(_OWORD *)uint64_t v3 = v8;
    *(void *)(v3 + 16) = v9;
    *(_DWORD *)(v3 + 24) = 9;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100IRKNS0_17__copy_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS19_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEERKS1H_EEEDcS19_DpT0_(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 24);
  if (v4 != 8)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    int v16 = &v17;
    long long v8 = (long long *)(a3 + 1);
    uint64_t v9 = (long long *)*a3;
    if ((void *)*a3 == a3 + 1)
    {
      if (v4 == -1) {
        goto LABEL_18;
      }
    }
    else
    {
      do
      {
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>(&v16, &v17, (const void **)v9 + 4, v9 + 2);
        char v10 = (long long *)*((void *)v9 + 1);
        if (v10)
        {
          do
          {
            long long v11 = v10;
            char v10 = *(long long **)v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            long long v11 = (long long *)*((void *)v9 + 2);
            BOOL v12 = *(void *)v11 == (void)v9;
            uint64_t v9 = v11;
          }
          while (!v12);
        }
        uint64_t v9 = v11;
      }
      while (v11 != v8);
      int v4 = *(_DWORD *)(v3 + 24);
      if (v4 == -1) {
        goto LABEL_18;
      }
    }
    ((void (*)(char *, uint64_t))off_1EDCA4DE0[v4])(&v19, v3);
LABEL_18:
    *(void *)uint64_t v3 = v16;
    uint64_t v13 = v17;
    *(void *)(v3 + 8) = v17;
    uint64_t v14 = v3 + 8;
    *(_DWORD *)(v3 + 24) = -1;
    uint64_t v15 = v18;
    *(void *)(v3 + 16) = v18;
    if (v15)
    {
      *(void *)(v13 + 16) = v14;
      int v16 = &v17;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v13 = 0;
    }
    else
    {
      *(void *)uint64_t v3 = v14;
    }
    *(_DWORD *)(v3 + 24) = 8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v16, (unsigned int *)v13);
    return;
  }
  if ((void *)a2 != a3)
  {
    unint64_t v6 = (long long *)*a3;
    uint64_t v7 = (long long *)(a3 + 1);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,AMSCore::Any>,std::__tree_node<std::__value_type<std::string,AMSCore::Any>,void *> *,long>>(a2, v6, v7);
  }
}

void sub_18DA59570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int *a10)
{
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100IRKNS0_17__copy_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS19_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEERKS1H_EEEDcS19_DpT0_(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 24);
  if (v5 != -1)
  {
    if (v5 == 7)
    {
      *a2 = *a3;
      return result;
    }
    double result = ((uint64_t (*)(char *, uint64_t))off_1EDCA4DE0[v5])(&v6, v4);
  }
  *(void *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 24) = 7;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100IRKNS0_17__copy_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS19_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEERKS1H_EEEDcS19_DpT0_(uint64_t *a1, uint64_t a2, long long *a3)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 24);
  if (v4 != 6)
  {
    if (*((char *)a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a3, *((void *)a3 + 1));
      int v4 = *(_DWORD *)(v3 + 24);
      if (v4 == -1)
      {
LABEL_11:
        long long v7 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
        *(void *)(v3 + 16) = *((void *)&v12.__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v3 = v7;
        *(_DWORD *)(v3 + 24) = 6;
        return;
      }
    }
    else
    {
      std::string v12 = *(std::string *)a3;
      if (v4 == -1) {
        goto LABEL_11;
      }
    }
    ((void (*)(char *, uint64_t))off_1EDCA4DE0[v4])(&v13, v3);
    goto LABEL_11;
  }
  if ((long long *)a2 != a3)
  {
    char v5 = *((unsigned char *)a3 + 23);
    if (*(char *)(a2 + 23) < 0)
    {
      if (v5 >= 0) {
        long long v8 = (std::string::value_type *)a3;
      }
      else {
        long long v8 = *(std::string::value_type **)a3;
      }
      if (v5 >= 0) {
        size_t v9 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        size_t v9 = *((void *)a3 + 1);
      }
      std::string::__assign_no_alias<false>((void **)a2, v8, v9);
    }
    else if ((*((unsigned char *)a3 + 23) & 0x80) != 0)
    {
      long long v11 = *(std::string::value_type **)a3;
      size_t v10 = *((void *)a3 + 1);
      std::string::__assign_no_alias<true>((void *)a2, v11, v10);
    }
    else
    {
      long long v6 = *a3;
      *(void *)(a2 + 16) = *((void *)a3 + 2);
      *(_OWORD *)a2 = v6;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100IRKNS0_17__copy_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS19_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEERKS1H_EEEDcS19_DpT0_(uint64_t *a1, uint64_t a2, long long *a3)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 24);
  if (v4 != 5)
  {
    if (*((char *)a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a3, *((void *)a3 + 1));
      int v4 = *(_DWORD *)(v3 + 24);
      if (v4 == -1)
      {
LABEL_11:
        long long v7 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
        *(void *)(v3 + 16) = *((void *)&v12.__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v3 = v7;
        *(_DWORD *)(v3 + 24) = 5;
        return;
      }
    }
    else
    {
      std::string v12 = *(std::string *)a3;
      if (v4 == -1) {
        goto LABEL_11;
      }
    }
    ((void (*)(char *, uint64_t))off_1EDCA4DE0[v4])(&v13, v3);
    goto LABEL_11;
  }
  if ((long long *)a2 != a3)
  {
    char v5 = *((unsigned char *)a3 + 23);
    if (*(char *)(a2 + 23) < 0)
    {
      if (v5 >= 0) {
        long long v8 = (std::string::value_type *)a3;
      }
      else {
        long long v8 = *(std::string::value_type **)a3;
      }
      if (v5 >= 0) {
        size_t v9 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        size_t v9 = *((void *)a3 + 1);
      }
      std::string::__assign_no_alias<false>((void **)a2, v8, v9);
    }
    else if ((*((unsigned char *)a3 + 23) & 0x80) != 0)
    {
      long long v11 = *(std::string::value_type **)a3;
      size_t v10 = *((void *)a3 + 1);
      std::string::__assign_no_alias<true>((void *)a2, v11, v10);
    }
    else
    {
      long long v6 = *a3;
      *(void *)(a2 + 16) = *((void *)a3 + 2);
      *(_OWORD *)a2 = v6;
    }
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100IRKNS0_17__copy_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS19_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEERKS1H_EEEDcS19_DpT0_(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 24);
  if (v5 != -1)
  {
    if (v5 == 4)
    {
      *a2 = *a3;
      return result;
    }
    double result = ((uint64_t (*)(char *, uint64_t))off_1EDCA4DE0[v5])(&v6, v4);
  }
  *(void *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 24) = 4;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100IRKNS0_17__copy_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS19_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEERKS1H_EEEDcS19_DpT0_(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 24);
  if (v5 != -1)
  {
    if (v5 == 3)
    {
      *a2 = *a3;
      return result;
    }
    double result = ((uint64_t (*)(char *, uint64_t))off_1EDCA4DE0[v5])(&v6, v4);
  }
  *(void *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 24) = 3;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100IRKNS0_17__copy_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS19_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEERKS1H_EEEDcS19_DpT0_(uint64_t *a1, void *a2, double *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 24);
  if (v5 != -1)
  {
    if (v5 == 2)
    {
      double result = *a3;
      *a2 = *(void *)a3;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1EDCA4DE0[v5])(&v7, v4);
  }
  double result = *a3;
  *(double *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 24) = 2;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100IRKNS0_17__copy_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS19_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEERKS1H_EEEDcS19_DpT0_(uint64_t result, unsigned char *a2, unsigned char *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 24);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    double result = ((uint64_t (*)(char *, uint64_t))off_1EDCA4DE0[v5])(&v6, v4);
  }
  *(unsigned char *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 24) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100IRKNS0_17__copy_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS19_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEERKS1H_EEEDcS19_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 24);
  if (v2 != -1)
  {
    if (!v2) {
      return result;
    }
    double result = ((uint64_t (*)(char *, uint64_t))off_1EDCA4DE0[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

void AMSCore::MediaAccount::setIsActive(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a2 && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 96))(a1))
  {
    AMSCore::StringUtils::join<char [39]>((std::string *)__what_arg, "A local account cannot be made active.");
    v55.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
    *(void *)&v55.__val_ = 3;
    std::system_error::system_error(&v50, v55, (const std::string *)__what_arg);
    if ((__what_arg[23] & 0x80000000) != 0) {
      operator delete(*(void **)__what_arg);
    }
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    v50.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
    long long v51 = &v52;
    long long v54 = 0uLL;
    std::runtime_error::runtime_error((std::runtime_error *)__what_arg, &v50);
    *(std::error_code *)&__what_arg[16] = v50.__ec_;
    long long v8 = (unsigned int *)v52;
    *(void *)std::string __what_arg = &unk_1EDC827D8;
    long long v46 = v51;
    uint64_t v47 = v52;
    uint64_t v48 = v53;
    if (v53)
    {
      *(void *)(v52 + 16) = &v47;
      long long v8 = 0;
      long long v51 = &v52;
      uint64_t v52 = 0;
      uint64_t v53 = 0;
    }
    else
    {
      long long v46 = &v47;
    }
    long long v49 = v54;
    long long v54 = 0uLL;
    v50.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v51, v8);
    MEMORY[0x192FA3C30](&v50);
    std::runtime_error::runtime_error((std::runtime_error *)a4, (const std::runtime_error *)__what_arg);
    *(_OWORD *)(a4 + 16) = *(_OWORD *)&__what_arg[16];
    *(void *)a4 = &unk_1EDC827D8;
    uint64_t v31 = v47;
    *(void *)(a4 + 32) = v46;
    *(void *)(a4 + 40) = v31;
    uint64_t v32 = a4 + 40;
    uint64_t v33 = v48;
    *(void *)(a4 + 48) = v48;
    if (v33)
    {
      *(void *)(v31 + 16) = v32;
      uint64_t v31 = 0;
      long long v46 = &v47;
      uint64_t v47 = 0;
      uint64_t v48 = 0;
    }
    else
    {
      *(void *)(a4 + 32) = v32;
    }
    *(_OWORD *)(a4 + 56) = v49;
    long long v49 = 0uLL;
    *(unsigned char *)(a4 + 72) = 0;
    *(void *)std::string __what_arg = &unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v46, (unsigned int *)v31);
    MEMORY[0x192FA3C30](__what_arg);
    return;
  }
  memset(&v50, 0, 24);
  uint64_t v9 = a1 + 96;
  unint64_t VectorValue = AMSCore::AccountProperties::getVectorValue(v9, "activeIdentifiers", 0x11uLL);
  if (v11) {
    BOOL v12 = &v50 != (std::system_error *)VectorValue;
  }
  else {
    BOOL v12 = 0;
  }
  if (!v12)
  {
    char imp = 0;
    uint64_t v14 = 0;
    goto LABEL_12;
  }
  std::vector<AMSCore::Any>::__assign_with_size[abi:fe180100]<AMSCore::Any*,AMSCore::Any*>((uint64_t *)&v50, *(void *)VectorValue, *(void *)(VectorValue + 8), (uint64_t)(*(void *)(VectorValue + 8) - *(void *)VectorValue) >> 5);
  uint64_t v14 = v50.__vftable;
  char imp = (std::system_error_vtbl *)v50.__imp_.__imp_;
  if (v50.__vftable == (std::system_error_vtbl *)v50.__imp_.__imp_)
  {
    char imp = v50.__vftable;
    goto LABEL_12;
  }
  char v16 = *(unsigned char *)(a3 + 23);
  if (v16 >= 0) {
    uint64_t v17 = (void (__cdecl *)(std::system_error *__hidden))*(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v17 = *(void (__cdecl **)(std::system_error *__hidden))(a3 + 8);
  }
  if (v16 >= 0) {
    uint64_t v18 = (const std::string::value_type *)a3;
  }
  else {
    uint64_t v18 = *(const std::string::value_type **)a3;
  }
  char v19 = v50.__vftable;
  do
  {
    if (LODWORD(v19[1].~system_error) == 5)
    {
      size_t v20 = LODWORD(v19[1].~system_error) == 5 ? v19 : 0;
      uint64_t what_high = HIBYTE(v20->what);
      uint64_t v22 = (what_high & 0x80u) == 0
          ? (void (__cdecl *)(std::system_error *__hidden))HIBYTE(v20->what)
          : v20->~system_error_0;
      if (v22 == v17)
      {
        if ((what_high & 0x80) != 0)
        {
          if (!memcmp(v20->~system_error, v18, (size_t)v20->~system_error_0)) {
            goto LABEL_45;
          }
        }
        else
        {
          if (!HIBYTE(v20->what)) {
            goto LABEL_45;
          }
          uint64_t v23 = 0;
          uint64_t v24 = what_high - 1;
          do
          {
            int v25 = *((unsigned __int8 *)&v19->~system_error + v23);
            int v26 = v18[v23];
          }
          while (v25 == v26 && v24 != v23++);
          if (v25 == v26) {
            goto LABEL_45;
          }
        }
      }
    }
    char v19 = (std::system_error_vtbl *)((char *)v19 + 32);
  }
  while (v19 != imp);
  char v19 = imp;
LABEL_45:
  if (v19 == imp)
  {
LABEL_12:
    if (a2)
    {
      if ((unint64_t)imp >= *(void *)&v50.__ec_.__val_)
      {
        char imp = (std::system_error_vtbl *)std::vector<AMSCore::Any>::__emplace_back_slow_path<std::string const&>((char **)&v50, a3);
      }
      else
      {
        if (*(char *)(a3 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)imp, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
        }
        else
        {
          long long v15 = *(_OWORD *)a3;
          imp->what = *(const char *(__cdecl **)(const std::runtime_error *__hidden))(a3 + 16);
          *(_OWORD *)&imp->~system_error = v15;
        }
        LODWORD(imp[1].~system_error) = 5;
        char imp = (std::system_error_vtbl *)((char *)imp + 32);
      }
LABEL_65:
      v50.__imp_.__imp_ = (const char *)imp;
      uint64_t v14 = v50.__vftable;
      goto LABEL_66;
    }
    goto LABEL_66;
  }
  if ((a2 & 1) == 0)
  {
    if (&v19[1].~system_error_0 != (void (__cdecl **)(std::system_error *__hidden))imp)
    {
      do
      {
        uint64_t v28 = (uint64_t)v19;
        char v19 = (std::system_error_vtbl *)((char *)v19 + 32);
      }
      while ((std::system_error_vtbl *)(AMSCore::Any::operator=(v28, (uint64_t)v19) + 64) != imp);
      char imp = (std::system_error_vtbl *)v50.__imp_.__imp_;
    }
    if (imp != v19)
    {
      do
      {
        uint64_t v29 = (std::system_error_vtbl *)((char *)imp - 32);
        uint64_t what_low = LODWORD(imp[-1].what);
        if (what_low != -1) {
          ((void (*)(unsigned char *, const char *(__cdecl **)(const std::runtime_error *__hidden)))off_1EDCA4DE0[what_low])(__what_arg, &imp[-2].what);
        }
        LODWORD(imp[-1].what) = -1;
        char imp = (std::system_error_vtbl *)((char *)imp - 32);
      }
      while (v29 != v19);
      char imp = v19;
    }
    goto LABEL_65;
  }
LABEL_66:
  if (v14 == imp)
  {
    long long v40 = 0u;
    long long v41 = 0u;
    AMSCore::AccountProperties::setValue(v9, "activeIdentifiers", 0x11uLL, (uint64_t)&v40);
    int v34 = (int *)&v41 + 2;
    if (DWORD2(v41) != -1) {
      ((void (*)(unsigned char *, long long *))off_1EDCA4DE0[DWORD2(v41)])(__what_arg, &v40);
    }
  }
  else
  {
    std::runtime_error v42 = v50.std::runtime_error;
    uint64_t v43 = *(void *)&v50.__ec_.__val_;
    memset(&v50, 0, 24);
    int v44 = 9;
    AMSCore::AccountProperties::setValue(v9, "activeIdentifiers", 0x11uLL, (uint64_t)&v42);
    int v34 = &v44;
    if (v44 != -1) {
      ((void (*)(unsigned char *, std::runtime_error *))off_1EDCA4DE0[v44])(__what_arg, &v42);
    }
  }
  *int v34 = -1;
  *(unsigned char *)(a4 + 72) = 1;
  uint64_t v35 = v50.__vftable;
  if (v50.__vftable)
  {
    size_t v36 = v50.__imp_.__imp_;
    int v37 = v50.__vftable;
    if (v50.__imp_.__imp_ != (const char *)v50.__vftable)
    {
      do
      {
        BOOL v38 = (std::system_error_vtbl *)(v36 - 32);
        uint64_t v39 = *((unsigned int *)v36 - 2);
        if (v39 != -1) {
          ((void (*)(unsigned char *, const char *))off_1EDCA4DE0[v39])(__what_arg, v36 - 32);
        }
        *((_DWORD *)v36 - 2) = -1;
        v36 -= 32;
      }
      while (v38 != v35);
      int v37 = v50.__vftable;
    }
    v50.__imp_.__imp_ = (const char *)v35;
    operator delete(v37);
  }
}

void sub_18DA5A018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
}

uint64_t AMSCore::StringUtils::join<char [39]>(std::string *a1, const char *a2)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v6);
  size_t v4 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v6, (uint64_t)a2, v4);
  std::stringbuf::str[abi:fe180100]((uint64_t)v7, a1);
  uint64_t v6 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v7[-1] + *(void *)(v6 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v7[0] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FA3FD0](&v9);
}

__n128 AMSCore::MediaAccount::setIdentity(uint64_t a1, long long *a2)
{
  uint64_t v4 = a1 + 32;
  if (*(unsigned __int8 *)(a1 + 56) == *((unsigned __int8 *)a2 + 24))
  {
    if (*(unsigned char *)(a1 + 56))
    {
      if (*(char *)(a1 + 55) < 0) {
        operator delete(*(void **)v4);
      }
      long long v5 = *a2;
      *(void *)(v4 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v4 = v5;
      *((unsigned char *)a2 + 23) = 0;
      *(unsigned char *)a2 = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 56))
  {
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*(void **)v4);
    }
    *(unsigned char *)(a1 + 56) = 0;
  }
  else
  {
    long long v6 = *a2;
    *(void *)(a1 + 48) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v4 = v6;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(a1 + 56) = 1;
  }
  *(void *)(a1 + 64) = *((void *)a2 + 4);
  char v7 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*v7);
  }
  __n128 result = *(__n128 *)((char *)a2 + 40);
  *(void *)(a1 + 88) = *((void *)a2 + 7);
  *(__n128 *)char v7 = result;
  *((unsigned char *)a2 + 63) = 0;
  *((unsigned char *)a2 + 40) = 0;
  return result;
}

void AMSCore::MediaAccount::getStorefront(uint64_t a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  unint64_t MapValue = AMSCore::AccountProperties::getMapValue(a1 + 96, "storefronts", 0xBuLL);
  if (!v6) {
    goto LABEL_9;
  }
  unint64_t v7 = MapValue;
  char v8 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(MapValue, a2);
  if ((uint64_t *)(v7 + 8) == v8) {
    goto LABEL_9;
  }
  uint64_t v9 = v8 + 7;
  if (*((_DWORD *)v8 + 20) != 5) {
    uint64_t v9 = 0;
  }
  if (*((_DWORD *)v8 + 20) == 5)
  {
    if (*((char *)v9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)*v9, v9[1]);
    }
    else
    {
      long long v10 = *(_OWORD *)v9;
      a3->__r_.__value_.__r.__words[2] = v9[2];
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v10;
    }
    char v11 = 1;
  }
  else
  {
LABEL_9:
    char v11 = 0;
    a3->__r_.__value_.__s.__data_[0] = 0;
  }
  a3[1].__r_.__value_.__s.__data_[0] = v11;
}

uint64_t AMSCore::MediaAccount::getProperties(AMSCore::MediaAccount *this)
{
  return (uint64_t)this + 96;
}

{
  return (uint64_t)this + 96;
}

BOOL AMSCore::MediaAccount::getIsLocal(uint64_t a1, unsigned char *a2)
{
  unint64_t VectorValue = (uint64_t *)AMSCore::AccountProperties::getVectorValue(a1 + 96, "localIdentifiers", 0x10uLL);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *VectorValue;
  uint64_t v6 = VectorValue[1];
  if (*VectorValue == v6)
  {
    uint64_t v6 = *VectorValue;
  }
  else
  {
    char v7 = a2[23];
    if (v7 >= 0) {
      uint64_t v8 = a2[23];
    }
    else {
      uint64_t v8 = *((void *)a2 + 1);
    }
    if (v7 < 0) {
      a2 = *(unsigned char **)a2;
    }
    do
    {
      if (*(_DWORD *)(v5 + 24) == 5)
      {
        uint64_t v9 = *(_DWORD *)(v5 + 24) == 5 ? v5 : 0;
        uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
        uint64_t v11 = (v10 & 0x80u) == 0 ? *(unsigned __int8 *)(v9 + 23) : *(void *)(v9 + 8);
        if (v11 == v8)
        {
          if ((v10 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v9, a2, *(void *)(v9 + 8))) {
              return v5 != v6;
            }
          }
          else
          {
            if (!*(unsigned char *)(v9 + 23)) {
              return v5 != v6;
            }
            uint64_t v12 = 0;
            uint64_t v13 = v10 - 1;
            do
            {
              int v14 = *(unsigned __int8 *)(v5 + v12);
              int v15 = a2[v12];
            }
            while (v14 == v15 && v13 != v12++);
            if (v14 == v15) {
              return v5 != v6;
            }
          }
        }
      }
      v5 += 32;
    }
    while (v5 != v6);
    uint64_t v5 = v6;
  }
  return v5 != v6;
}

BOOL AMSCore::MediaAccount::getIsLocal(AMSCore::MediaAccount *this)
{
  unint64_t VectorValue = (void *)AMSCore::AccountProperties::getVectorValue((uint64_t)this + 96, "localIdentifiers", 0x10uLL);
  return v2 && *VectorValue != VectorValue[1];
}

void AMSCore::MediaAccount::getIsEmpty(AMSCore::MediaAccount *this)
{
  v1[0] = 0;
  v1[24] = 0;
  uint64_t v2 = -1;
  uint64_t v3 = 7824750;
  char v4 = 3;
  AMSCore::operator==((uint64_t)this + 32, (uint64_t)v1);
}

BOOL AMSCore::MediaAccount::getIsActive(uint64_t a1, unsigned char *a2)
{
  unint64_t VectorValue = (uint64_t *)AMSCore::AccountProperties::getVectorValue(a1 + 96, "activeIdentifiers", 0x11uLL);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *VectorValue;
  uint64_t v6 = VectorValue[1];
  if (*VectorValue == v6)
  {
    uint64_t v6 = *VectorValue;
  }
  else
  {
    char v7 = a2[23];
    if (v7 >= 0) {
      uint64_t v8 = a2[23];
    }
    else {
      uint64_t v8 = *((void *)a2 + 1);
    }
    if (v7 < 0) {
      a2 = *(unsigned char **)a2;
    }
    do
    {
      if (*(_DWORD *)(v5 + 24) == 5)
      {
        uint64_t v9 = *(_DWORD *)(v5 + 24) == 5 ? v5 : 0;
        uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
        uint64_t v11 = (v10 & 0x80u) == 0 ? *(unsigned __int8 *)(v9 + 23) : *(void *)(v9 + 8);
        if (v11 == v8)
        {
          if ((v10 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v9, a2, *(void *)(v9 + 8))) {
              return v5 != v6;
            }
          }
          else
          {
            if (!*(unsigned char *)(v9 + 23)) {
              return v5 != v6;
            }
            uint64_t v12 = 0;
            uint64_t v13 = v10 - 1;
            do
            {
              int v14 = *(unsigned __int8 *)(v5 + v12);
              int v15 = a2[v12];
            }
            while (v14 == v15 && v13 != v12++);
            if (v14 == v15) {
              return v5 != v6;
            }
          }
        }
      }
      v5 += 32;
    }
    while (v5 != v6);
    uint64_t v5 = v6;
  }
  return v5 != v6;
}

uint64_t AMSCore::MediaAccount::getIdentity(AMSCore::MediaAccount *this)
{
  return (uint64_t)this + 32;
}

uint64_t AMSCore::MediaAccount::getIdentifier(AMSCore::MediaAccount *this)
{
  return (uint64_t)this + 8;
}

void AMSCore::MediaAccount::getActiveClients(AMSCore::MediaAccount *this@<X0>, std::vector<std::string> *a2@<X8>)
{
  unint64_t VectorValue = (long long **)AMSCore::AccountProperties::getVectorValue((uint64_t)this + 96, "activeIdentifiers", 0x11uLL);
  if (v4)
  {
    AMSCore::toStringVector(a2, VectorValue);
  }
  else
  {
    a2->__begin_ = 0;
    a2->__end_ = 0;
    a2->__end_cap_.__value_ = 0;
  }
}

void AMSCore::MediaAccount::clone(AMSCore::MediaAccount *this)
{
}

void sub_18DA5A868(_Unwind_Exception *a1)
{
  if (v1[56] && v1[55] < 0) {
    operator delete(*v3);
  }
  if (v1[31] < 0) {
    operator delete(*v2);
  }
  MEMORY[0x192FA4080](v1, 0x10B3C40FF472039);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::IMediaAccount::setFlags(uint64_t a1, void *a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  char v4 = a2 + 1;
  uint64_t v5 = a2[1];
  char v7 = (uint64_t *)*a2;
  uint64_t v8 = v5;
  if (a2[2])
  {
    *(void *)(v5 + 16) = &v8;
    *a2 = v4;
    *char v4 = 0;
    a2[2] = 0;
  }
  else
  {
    char v7 = &v8;
  }
  int v10 = 8;
  uint64_t result = (*(uint64_t (**)(uint64_t, const char *, uint64_t, uint64_t **))(*(void *)v3 + 104))(v3, "accountFlags", 12, &v7);
  if (v10 != -1) {
    return ((uint64_t (*)(char *, uint64_t **))off_1EDCA4DE0[v10])(&v11, &v7);
  }
  return result;
}

void AMSCore::IMediaAccount::setFlag(uint64_t a1, const void *a2, size_t a3, uint64_t a4)
{
  uint64_t v8 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (AMSCore::operator==(v8, (unsigned __int8 *)a4)) {
    return;
  }
  if (a3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:fe180100]();
  }
  if (a3 >= 0x17)
  {
    uint64_t v10 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v10 = a3 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t v9 = (const void **)operator new(v10 + 1);
    __dst[1] = (const void *)a3;
    unint64_t v25 = v11 | 0x8000000000000000;
    __dst[0] = v9;
  }
  else
  {
    HIBYTE(v25) = a3;
    uint64_t v9 = __dst;
    if (!a3) {
      goto LABEL_10;
    }
  }
  memmove(v9, a2, a3);
LABEL_10:
  *((unsigned char *)v9 + a3) = 0;
  uint64_t v12 = (const void ***)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  int v21 = &v22;
  uint64_t v13 = v12 + 1;
  int v14 = *v12;
  if (*v12 != (const void **)(v12 + 1))
  {
    do
    {
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v21, (uint64_t *)&v22, v14 + 4, (long long *)v14 + 2);
      uint64_t v17 = (const void **)v14[1];
      if (v17)
      {
        do
        {
          uint64_t v18 = (const void ***)v17;
          uint64_t v17 = (const void **)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          uint64_t v18 = (const void ***)v14[2];
          BOOL v15 = *v18 == v14;
          int v14 = (const void **)v18;
        }
        while (!v15);
      }
      int v14 = (const void **)v18;
    }
    while (v18 != v13);
  }
  BOOL v15 = *(_DWORD *)(a4 + 24) == -1 || *(_DWORD *)(a4 + 24) == 0;
  if (v15)
  {
    char v16 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)&v21, __dst);
    if (&v22 != (unsigned int **)v16) {
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase(&v21, (uint64_t)v16);
    }
  }
  else
  {
    std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<AMSCore::Any>(&v21, __dst, a4);
  }
  char v19 = v21;
  v20[0] = v22;
  v20[1] = v23;
  if (v23)
  {
    *((void *)v22 + 2) = v20;
    int v21 = &v22;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
  }
  else
  {
    char v19 = v20;
  }
  (*(void (**)(uint64_t, unsigned int ***))(*(void *)a1 + 40))(a1, &v19);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v19, v20[0]);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v21, v22);
  if (SHIBYTE(v25) < 0) {
    operator delete((void *)__dst[0]);
  }
}

void sub_18DA5AC58(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, unsigned int *a14)
{
}

uint64_t *std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<AMSCore::Any>(void **a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)(a1 + 1);
  char v7 = a1[1];
  if (!v7) {
    goto LABEL_41;
  }
  int v8 = *((char *)a2 + 23);
  if (v8 >= 0) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = *a2;
  }
  if (v8 >= 0) {
    size_t v10 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v10 = (size_t)a2[1];
  }
  uint64_t v11 = (uint64_t *)(a1 + 1);
  do
  {
    while (1)
    {
      int v12 = *((char *)v7 + 55);
      uint64_t v13 = v12 >= 0 ? v7 + 4 : (uint64_t *)v7[4];
      size_t v14 = v12 >= 0 ? *((unsigned __int8 *)v7 + 55) : v7[5];
      size_t v15 = v10 >= v14 ? v14 : v10;
      int v16 = memcmp(v13, v9, v15);
      if (v16) {
        break;
      }
      if (v14 >= v10) {
        goto LABEL_23;
      }
LABEL_9:
      char v7 = (uint64_t *)v7[1];
      if (!v7) {
        goto LABEL_24;
      }
    }
    if (v16 < 0) {
      goto LABEL_9;
    }
LABEL_23:
    uint64_t v11 = v7;
    char v7 = (uint64_t *)*v7;
  }
  while (v7);
LABEL_24:
  if (v11 == v6) {
    goto LABEL_41;
  }
  int v17 = *((char *)v11 + 55);
  if (v17 >= 0) {
    uint64_t v18 = v11 + 4;
  }
  else {
    uint64_t v18 = (void *)v11[4];
  }
  if (v17 >= 0) {
    size_t v19 = *((unsigned __int8 *)v11 + 55);
  }
  else {
    size_t v19 = v11[5];
  }
  if (v19 >= v10) {
    size_t v20 = v10;
  }
  else {
    size_t v20 = v19;
  }
  int v21 = memcmp(v9, v18, v20);
  if (v21)
  {
    if ((v21 & 0x80000000) == 0) {
      goto LABEL_36;
    }
LABEL_40:
    uint64_t v6 = v11;
LABEL_41:
    uint64_t result = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__find_equal<std::string>(a1, v6, &v30, &v29, a2);
    if (!*result)
    {
      uint64_t v23 = result;
      uint64_t v24 = operator new(0x58uLL);
      v24[2] = *(_OWORD *)a2;
      *((void *)v24 + 6) = a2[2];
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      *((unsigned char *)v24 + 56) = 0;
      *((_DWORD *)v24 + 20) = -1;
      uint64_t v25 = *(unsigned int *)(a3 + 24);
      if (v25 == -1
        || (((void (*)(char *, char *, uint64_t))off_1EDCA5520[v25])(&v31, (char *)v24 + 56, a3),
            *((_DWORD *)v24 + 20) = v25,
            uint64_t v26 = *(unsigned int *)(a3 + 24),
            v26 == -1))
      {
LABEL_46:
        *(_DWORD *)(a3 + 24) = 0;
      }
      else if (v26)
      {
        ((void (*)(char *, uint64_t))off_1EDCA54D0[v26])(&v31, a3);
        goto LABEL_46;
      }
      int v27 = v30;
      *(void *)uint64_t v24 = 0;
      *((void *)v24 + 1) = 0;
      *((void *)v24 + 2) = v27;
      *uint64_t v23 = (uint64_t)v24;
      uint64_t v28 = (void *)**a1;
      if (v28)
      {
        *a1 = v28;
        uint64_t v24 = (_OWORD *)*v23;
      }
      uint64_t result = std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v24);
      a1[2] = (void *)((char *)a1[2] + 1);
    }
  }
  else
  {
    if (v10 < v19) {
      goto LABEL_40;
    }
LABEL_36:
    return (uint64_t *)AMSCore::Any::operator=((uint64_t)(v11 + 7), a3);
  }
  return result;
}

uint64_t *AMSCore::IMediaAccount::getFlags(AMSCore::IMediaAccount *this)
{
  uint64_t v1 = (*(uint64_t (**)(AMSCore::IMediaAccount *))(*(void *)this + 120))(this);
  uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t, const char *, uint64_t))(*(void *)v1 + 24))(v1, "accountFlags", 12);
  int v3 = *((_DWORD *)result + 6);
  if (*((_DWORD *)result + 6) != 8) {
    uint64_t result = 0;
  }
  if (v3 != 8)
  {
    {
      return &AMSCore::IMediaAccount::getFlags(void)const::emptyAny;
    }
    else
    {
      {
        qword_1E91C8A20 = 0;
        qword_1E91C8A18 = 0;
        AMSCore::IMediaAccount::getFlags(void)const::emptyAny = (uint64_t)&qword_1E91C8A18;
      }
      return &AMSCore::IMediaAccount::getFlags(void)const::emptyAny;
    }
  }
  return result;
}

uint64_t *AMSCore::IMediaAccount::getFlag(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  uint64_t v6 = v5 + 8;
  uint64_t v7 = *(void *)(v5 + 8);
  if (!v7) {
    return &AMSCore::Any::Null(void)::null;
  }
  uint64_t v8 = v5 + 8;
  do
  {
    while (1)
    {
      int v9 = *(char *)(v7 + 55);
      size_t v10 = v9 >= 0 ? (const void *)(v7 + 32) : *(const void **)(v7 + 32);
      size_t v11 = v9 >= 0 ? *(unsigned __int8 *)(v7 + 55) : *(void *)(v7 + 40);
      size_t v12 = v11 >= a3 ? a3 : v11;
      int v13 = memcmp(a2, v10, v12);
      if (v13) {
        break;
      }
      if (a3 <= v11) {
        goto LABEL_17;
      }
LABEL_3:
      uint64_t v7 = *(void *)(v7 + 8);
      if (!v7) {
        goto LABEL_18;
      }
    }
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_17:
    uint64_t v8 = v7;
    uint64_t v7 = *(void *)v7;
  }
  while (v7);
LABEL_18:
  if (v8 == v6) {
    return &AMSCore::Any::Null(void)::null;
  }
  int v14 = *(char *)(v8 + 55);
  if (v14 >= 0) {
    size_t v15 = (const void *)(v8 + 32);
  }
  else {
    size_t v15 = *(const void **)(v8 + 32);
  }
  if (v14 >= 0) {
    size_t v16 = *(unsigned __int8 *)(v8 + 55);
  }
  else {
    size_t v16 = *(void *)(v8 + 40);
  }
  if (v16 >= a3) {
    size_t v17 = a3;
  }
  else {
    size_t v17 = v16;
  }
  int v18 = memcmp(a2, v15, v17);
  if (v18)
  {
    if ((v18 & 0x80000000) == 0) {
      return (uint64_t *)(v8 + 56);
    }
    return &AMSCore::Any::Null(void)::null;
  }
  else
  {
    if (a3 < v16) {
      return &AMSCore::Any::Null(void)::null;
    }
    return (uint64_t *)(v8 + 56);
  }
}

void AMSCore::MediaAccount::~MediaAccount(AMSCore::MediaAccount *this)
{
  AMSCore::MediaAccount::~MediaAccount(this);
  JUMPOUT(0x192FA4080);
}

{
  void **v2;
  void *v3;
  void **v4;

  *(void *)this = &unk_1EDC81AE0;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this + 144, *((unsigned int **)this + 19));
  uint64_t v2 = (void **)*((void *)this + 15);
  if (v2)
  {
    do
    {
      char v4 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v4;
    }
    while (v4);
  }
  int v3 = (void *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v3) {
    operator delete(v3);
  }
  if (*((char *)this + 95) < 0)
  {
    operator delete(*((void **)this + 9));
    if (!*((unsigned char *)this + 56)) {
      goto LABEL_12;
    }
  }
  else if (!*((unsigned char *)this + 56))
  {
LABEL_12:
    if ((*((char *)this + 31) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_13;
  }
  if ((*((char *)this + 55) & 0x80000000) == 0) {
    goto LABEL_12;
  }
  operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0) {
LABEL_13:
  }
    operator delete(*((void **)this + 1));
}

void std::__destroy_at[abi:fe180100]<AMSCore::DialogAction,0>(uint64_t a1)
{
  if (*(char *)(a1 + 271) < 0) {
    operator delete(*(void **)(a1 + 248));
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 224, *(unsigned int **)(a1 + 232));
  if ((*(char *)(a1 + 223) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 191) & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    operator delete(*(void **)(a1 + 168));
    if (!*(unsigned char *)(a1 + 160)) {
      return;
    }
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 200));
  if (*(char *)(a1 + 191) < 0) {
    goto LABEL_10;
  }
LABEL_5:
  if (!*(unsigned char *)(a1 + 160)) {
    return;
  }
LABEL_6:
  AMSCore::URL::~URL((AMSCore::URL *)a1);
}

void AMSCore::UnavailableCancellationContextProvider::getStopToken(void *a1@<X8>)
{
  *a1 = 0;
}

void AMSCore::UnavailableCancellationContextProvider::~UnavailableCancellationContextProvider(AMSCore::UnavailableCancellationContextProvider *this)
{
}

void std::__shared_ptr_emplace<AMSCore::UnavailableCancellationContextProvider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC84198;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::UnavailableCancellationContextProvider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC84198;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AMSCore::LocalNotificationCenter::shutdown(AMSCore::LocalNotificationCenter *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  *((unsigned char *)this + 96) = 1;
  std::mutex::unlock(v2);
}

void AMSCore::LocalNotificationCenter::postNotification(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  if (*(unsigned char *)(a1 + 96))
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[48]>((uint64_t)&v26, 2u, "Notification posted after shutdown has started.");
    std::runtime_error::runtime_error((std::runtime_error *)a4, &v26);
    *(_OWORD *)(a4 + 16) = v27;
    *(void *)a4 = &unk_1EDC827D8;
    uint64_t v9 = v29;
    *(void *)(a4 + 32) = v28;
    *(void *)(a4 + 40) = v9;
    uint64_t v10 = a4 + 40;
    uint64_t v11 = v30;
    *(void *)(a4 + 48) = v30;
    if (v11)
    {
      *(void *)(v9 + 16) = v10;
      uint64_t v28 = &v29;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v9 = 0;
    }
    else
    {
      *(void *)(a4 + 32) = v10;
    }
    *(_OWORD *)(a4 + 56) = v31;
    long long v31 = 0uLL;
    *(unsigned char *)(a4 + 72) = 0;
    v26.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v28, (unsigned int *)v9);
    MEMORY[0x192FA3C30](&v26);
    goto LABEL_38;
  }
  int v14 = *(uint64_t **)(a1 + 80);
  size_t v12 = (uint64_t *)(a1 + 80);
  int v13 = v14;
  if (!v14) {
    goto LABEL_37;
  }
  size_t v15 = v12;
  do
  {
    while (1)
    {
      int v16 = *((char *)v13 + 55);
      size_t v17 = v16 >= 0 ? v13 + 4 : (uint64_t *)v13[4];
      size_t v18 = v16 >= 0 ? *((unsigned __int8 *)v13 + 55) : v13[5];
      size_t v19 = v18 >= a3 ? a3 : v18;
      int v20 = memcmp(a2, v17, v19);
      if (v20) {
        break;
      }
      if (a3 <= v18) {
        goto LABEL_20;
      }
LABEL_6:
      int v13 = (uint64_t *)v13[1];
      if (!v13) {
        goto LABEL_21;
      }
    }
    if ((v20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_20:
    size_t v15 = v13;
    int v13 = (uint64_t *)*v13;
  }
  while (v13);
LABEL_21:
  if (v15 == v12) {
    goto LABEL_37;
  }
  int v21 = *((char *)v15 + 55);
  if (v21 >= 0) {
    uint64_t v22 = v15 + 4;
  }
  else {
    uint64_t v22 = (const void *)v15[4];
  }
  if (v21 >= 0) {
    size_t v23 = *((unsigned __int8 *)v15 + 55);
  }
  else {
    size_t v23 = v15[5];
  }
  if (v23 >= a3) {
    size_t v24 = a3;
  }
  else {
    size_t v24 = v23;
  }
  int v25 = memcmp(a2, v22, v24);
  if (v25)
  {
    if ((v25 & 0x80000000) == 0) {
      goto LABEL_33;
    }
LABEL_37:
    *(unsigned char *)(a4 + 72) = 1;
LABEL_38:
    std::mutex::unlock(v8);
  }
  else
  {
    if (a3 < v23) {
      goto LABEL_37;
    }
LABEL_33:
    std::mutex::unlock(v8);
    AMSCore::Subject<>::notify((uint64_t)(v15 + 7));
    *(unsigned char *)(a4 + 72) = 1;
  }
}

void sub_18DA5B7B4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[48]>(uint64_t a1, unsigned int a2, const char *a3)
{
  uint64_t v4 = a2;
  AMSCore::StringUtils::join<char [48]>(&__what_arg, a3);
  *(void *)&v15.__val_ = v4;
  v15.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v9, v15, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  v9.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  uint64_t v10 = &v11;
  long long v13 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v9);
  *(std::error_code *)(a1 + 16) = v9.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v5 = v11;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = a1 + 40;
  uint64_t v7 = v12;
  *(void *)(a1 + 48) = v12;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    uint64_t v5 = 0;
    uint64_t v10 = &v11;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v6;
  }
  *(_OWORD *)(a1 + 56) = v13;
  long long v13 = 0uLL;
  v9.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v5);
  return MEMORY[0x192FA3C30](&v9);
}

void sub_18DA5B8FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::Subject<>::notify(uint64_t a1)
{
  std::mutex::lock((std::mutex *)a1);
  int v3 = *(char **)(a1 + 64);
  uint64_t v2 = *(char **)(a1 + 72);
  if (v3 != v2)
  {
    uint64_t v4 = *(char **)(a1 + 64);
    while (1)
    {
      uint64_t v5 = *((void *)v4 + 1);
      if (!v5 || *(void *)(v5 + 8) == -1) {
        break;
      }
      v4 += 16;
      if (v4 == v2)
      {
        size_t v6 = v2 - v3;
        if (v2 == v3) {
          goto LABEL_49;
        }
LABEL_7:
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::string>::__throw_length_error[abi:fe180100]();
        }
        uint64_t v7 = (std::__shared_weak_count **)operator new(v6);
        uint64_t v8 = v7;
        uint64_t v9 = 0;
        do
        {
          uint64_t v10 = &v3[v9];
          uint64_t v11 = (char *)&v7[(unint64_t)v9 / 8];
          uint64_t v12 = *(void *)&v3[v9 + 8];
          *(void *)uint64_t v11 = *(void *)&v3[v9];
          *((void *)v11 + 1) = v12;
          if (v12) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 16), 1uLL, memory_order_relaxed);
          }
          v9 += 16;
        }
        while (v10 + 16 != v2);
        uint64_t v17 = v9;
        unint64_t v18 = v9 & 0xFFFFFFFFFFFFFFF0;
        std::mutex::unlock((std::mutex *)a1);
        if (v18)
        {
          size_t v19 = (std::__shared_weak_count **)((char *)v8 + v18);
          uint64_t v20 = 2 * (v17 >> 4);
          int v21 = v8 + 1;
          uint64_t v22 = v20 * 8;
          do
          {
            if (*v21)
            {
              size_t v23 = std::__shared_weak_count::lock(*v21);
              if (v23)
              {
                size_t v24 = v23;
                uint64_t v25 = (uint64_t)*(v21 - 1);
                if (v25)
                {
                  uint64_t v26 = *(void *)(v25 + 24);
                  if (!v26) {
                    std::__throw_bad_function_call[abi:fe180100]();
                  }
                  (*(void (**)(uint64_t))(*(void *)v26 + 48))(v26);
                }
                if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
                  std::__shared_weak_count::__release_weak(v24);
                }
              }
            }
            v21 += 2;
            v22 -= 16;
          }
          while (v22);
          if (v8 != v19)
          {
            do
            {
              long long v27 = v8[v20 - 1];
              if (v27) {
                std::__shared_weak_count::__release_weak(v27);
              }
              v20 -= 2;
            }
            while (v20 * 8);
          }
        }
        operator delete(v8);
        return;
      }
    }
    if (v4 != v2)
    {
      long long v13 = v4 + 16;
      if (v4 + 16 != v2)
      {
        do
        {
          uint64_t v14 = *((void *)v13 + 1);
          if (v14 && *(void *)(v14 + 8) != -1)
          {
            uint64_t v15 = *(void *)v13;
            *(void *)long long v13 = 0;
            *((void *)v13 + 1) = 0;
            int v16 = (std::__shared_weak_count *)*((void *)v4 + 1);
            *(void *)uint64_t v4 = v15;
            *((void *)v4 + 1) = v14;
            if (v16) {
              std::__shared_weak_count::__release_weak(v16);
            }
            v4 += 16;
          }
          v13 += 16;
        }
        while (v13 != v2);
        uint64_t v2 = *(char **)(a1 + 72);
      }
    }
    if (v2 < v4)
    {
      __break(1u);
      return;
    }
    if (v4 != v2)
    {
      uint64_t v28 = v2;
      uint64_t v2 = v4;
      while (v28 != v4)
      {
        uint64_t v29 = (std::__shared_weak_count *)*((void *)v28 - 1);
        if (v29) {
          std::__shared_weak_count::__release_weak(v29);
        }
        v28 -= 16;
      }
      *(void *)(a1 + 72) = v4;
    }
    int v3 = *(char **)(a1 + 64);
    size_t v6 = v2 - v3;
    if (v2 != v3) {
      goto LABEL_7;
    }
  }
LABEL_49:
  std::mutex::unlock((std::mutex *)a1);
}

uint64_t AMSCore::StringUtils::join<char [48]>(std::string *a1, const char *a2)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v6);
  size_t v4 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v6, (uint64_t)a2, v4);
  std::stringbuf::str[abi:fe180100]((uint64_t)v7, a1);
  uint64_t v6 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v7[-1] + *(void *)(v6 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v7[0] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FA3FD0](&v9);
}

void AMSCore::LocalNotificationCenter::observe(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  if (*(unsigned char *)(a1 + 96))
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v111);
    AMSCore::Logger::log<char [69]>((uint64_t)v111.__r_.__value_.__l.__data_, 4u, (uint64_t)"default", 7, "Ignoring attempt to register an observer after shutdown has started.");
    size_t size = (std::__shared_weak_count *)v111.__r_.__value_.__l.__size_;
    if (v111.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v111.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    *a5 = 0;
    a5[1] = 0;
    goto LABEL_6;
  }
  int v109 = a4;
  uint64_t v12 = (char *)(a1 + 80);
  long long v13 = *(char **)(a1 + 80);
  uint64_t v14 = (char *)(a1 + 80);
  if (!v13) {
    goto LABEL_37;
  }
  uint64_t v15 = (char *)(a1 + 80);
  do
  {
    while (1)
    {
      int v16 = v13[55];
      uint64_t v17 = v16 >= 0 ? v13 + 32 : (char *)*((void *)v13 + 4);
      size_t v18 = v16 >= 0 ? v13[55] : *((void *)v13 + 5);
      size_t v19 = v18 >= a3 ? a3 : v18;
      int v20 = memcmp(a2, v17, v19);
      if (v20) {
        break;
      }
      if (a3 <= v18) {
        goto LABEL_23;
      }
LABEL_9:
      long long v13 = (char *)*((void *)v13 + 1);
      if (!v13) {
        goto LABEL_24;
      }
    }
    if ((v20 & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_23:
    uint64_t v15 = v13;
    long long v13 = *(char **)v13;
  }
  while (v13);
LABEL_24:
  uint64_t v14 = (char *)(a1 + 80);
  if (v15 != v12)
  {
    if (v15[55] < 0) {
      std::string::__init_copy_ctor_external(&v111, *((const std::string::value_type **)v15 + 4), *((void *)v15 + 5));
    }
    else {
      std::string v111 = *(std::string *)(v15 + 32);
    }
    int v112 = 5;
    std::string::size_type v21 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
    if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v21 = v111.__r_.__value_.__l.__size_;
    }
    if (v21 == a3)
    {
      uint64_t v22 = (v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v111
          : (std::string *)v111.__r_.__value_.__r.__words[0];
      BOOL v23 = memcmp(v22, a2, a3) != 0;
    }
    else
    {
      BOOL v23 = 1;
    }
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8fe180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8fe180100EvEUlRT_E_JRNS0_6__baseILS12_1EJS8_bdxySE_SG_SO_SX_S10_EEEEEEDcS14_DpT0_((uint64_t)&v113, (uint64_t)&v111);
    uint64_t v14 = v15;
    if (!v23) {
      goto LABEL_166;
    }
  }
LABEL_37:
  int v108 = v10;
  size_t v24 = (char *)operator new(0x90uLL);
  uint64_t v15 = v24;
  uint64_t v25 = v24 + 32;
  if (a3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:fe180100]();
  }
  unint64_t v107 = a5;
  if (a3 >= 0x17)
  {
    uint64_t v27 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v27 = a3 | 7;
    }
    uint64_t v28 = v27 + 1;
    uint64_t v26 = operator new(v27 + 1);
    *((void *)v15 + 5) = a3;
    *((void *)v15 + 6) = v28 | 0x8000000000000000;
    *((void *)v15 + 4) = v26;
    goto LABEL_44;
  }
  v24[55] = a3;
  uint64_t v26 = v24 + 32;
  if (a3) {
LABEL_44:
  }
    memmove(v26, a2, a3);
  *((unsigned char *)v26 + a3) = 0;
  *((void *)v15 + 7) = 850045863;
  *((_OWORD *)v15 + 4) = 0u;
  *((_OWORD *)v15 + 5) = 0u;
  *((_OWORD *)v15 + 6) = 0u;
  *((_OWORD *)v15 + 7) = 0u;
  *((_OWORD *)v15 + 8) = 0u;
  if (v12 == v14) {
    goto LABEL_67;
  }
  int v29 = v15[55];
  if (v29 >= 0) {
    uint64_t v30 = v25;
  }
  else {
    uint64_t v30 = (const void *)*((void *)v15 + 4);
  }
  if (v29 >= 0) {
    size_t v31 = v15[55];
  }
  else {
    size_t v31 = *((void *)v15 + 5);
  }
  int v32 = v14[55];
  if (v32 >= 0) {
    uint64_t v33 = v14 + 32;
  }
  else {
    uint64_t v33 = (const void *)*((void *)v14 + 4);
  }
  if (v32 >= 0) {
    size_t v34 = v14[55];
  }
  else {
    size_t v34 = *((void *)v14 + 5);
  }
  if (v34 >= v31) {
    size_t v35 = v31;
  }
  else {
    size_t v35 = v34;
  }
  int v36 = memcmp(v30, v33, v35);
  if (!v36)
  {
    if (v31 < v34) {
      goto LABEL_67;
    }
LABEL_63:
    int v37 = memcmp(v33, v30, v35);
    if (v37)
    {
      if ((v37 & 0x80000000) == 0)
      {
LABEL_65:
        BOOL v38 = v14;
        goto LABEL_120;
      }
    }
    else if (v34 >= v31)
    {
      goto LABEL_65;
    }
    size_t v62 = v14 + 8;
    size_t v63 = (char *)*((void *)v14 + 1);
    if (v63)
    {
      do
      {
        size_t v62 = v63;
        size_t v63 = *(char **)v63;
        uint64_t v14 = v62;
        uint64_t v64 = v62;
      }
      while (v63);
    }
    else
    {
      uint64_t v64 = v14;
      do
      {
        int v65 = v64;
        uint64_t v64 = (char *)*((void *)v64 + 2);
      }
      while (*(char **)v64 != v65);
    }
    if (v64 == v12) {
      goto LABEL_119;
    }
    size_t v68 = (const void *)*((void *)v64 + 4);
    uint64_t v66 = v64 + 32;
    size_t v67 = v68;
    int v69 = *((char *)v66 + 23);
    if (v69 >= 0) {
      int v70 = v66;
    }
    else {
      int v70 = v67;
    }
    if (v69 >= 0) {
      size_t v71 = *((unsigned __int8 *)v66 + 23);
    }
    else {
      size_t v71 = v66[1];
    }
    if (v71 >= v31) {
      size_t v72 = v31;
    }
    else {
      size_t v72 = v71;
    }
    int v73 = memcmp(v30, v70, v72);
    if (v73)
    {
      if (v73 < 0) {
        goto LABEL_119;
      }
    }
    else if (v31 < v71)
    {
      goto LABEL_119;
    }
    uint64_t v74 = *(uint64_t **)v12;
    if (!*(void *)v12) {
      goto LABEL_92;
    }
    while (1)
    {
      uint64_t v14 = (char *)v74;
      uint64_t v77 = (const void *)v74[4];
      uint64_t v75 = v74 + 4;
      BOOL v76 = v77;
      int v78 = *((char *)v75 + 23);
      if (v78 >= 0) {
        uint64_t v79 = v75;
      }
      else {
        uint64_t v79 = v76;
      }
      if (v78 >= 0) {
        size_t v80 = *((unsigned __int8 *)v75 + 23);
      }
      else {
        size_t v80 = v75[1];
      }
      if (v80 >= v31) {
        size_t v81 = v31;
      }
      else {
        size_t v81 = v80;
      }
      int v82 = memcmp(v30, v79, v81);
      if (v82)
      {
        if (v82 < 0) {
          goto LABEL_143;
        }
LABEL_157:
        int v83 = memcmp(v79, v30, v81);
        if (v83)
        {
          if ((v83 & 0x80000000) == 0) {
            goto LABEL_206;
          }
        }
        else if (v80 >= v31)
        {
          goto LABEL_206;
        }
        uint64_t v12 = v14 + 8;
        uint64_t v74 = (uint64_t *)*((void *)v14 + 1);
        if (!v74) {
          goto LABEL_162;
        }
      }
      else
      {
        if (v31 >= v80) {
          goto LABEL_157;
        }
LABEL_143:
        uint64_t v74 = *(uint64_t **)v14;
        uint64_t v12 = v14;
        if (!*(void *)v14) {
          goto LABEL_162;
        }
      }
    }
  }
  if ((v36 & 0x80000000) == 0) {
    goto LABEL_63;
  }
LABEL_67:
  uint64_t v39 = *(uint64_t **)v14;
  long long v40 = v14;
  if (*(char **)(a1 + 72) == v14) {
    goto LABEL_114;
  }
  if (v39)
  {
    long long v41 = *(uint64_t **)v14;
    do
    {
      long long v40 = (char *)v41;
      long long v41 = (uint64_t *)v41[1];
    }
    while (v41);
  }
  else
  {
    std::runtime_error v42 = v14;
    do
    {
      long long v40 = (char *)*((void *)v42 + 2);
      BOOL v61 = *(void *)v40 == (void)v42;
      std::runtime_error v42 = v40;
    }
    while (v61);
  }
  int v43 = v40[55];
  if (v43 >= 0) {
    int v44 = v40 + 32;
  }
  else {
    int v44 = (const void *)*((void *)v40 + 4);
  }
  if (v43 >= 0) {
    size_t v45 = v40[55];
  }
  else {
    size_t v45 = *((void *)v40 + 5);
  }
  int v46 = v15[55];
  if (v46 >= 0) {
    uint64_t v47 = v25;
  }
  else {
    uint64_t v47 = (const void *)*((void *)v15 + 4);
  }
  if (v46 >= 0) {
    size_t v48 = v15[55];
  }
  else {
    size_t v48 = *((void *)v15 + 5);
  }
  if (v48 >= v45) {
    size_t v49 = v45;
  }
  else {
    size_t v49 = v48;
  }
  int v50 = memcmp(v44, v47, v49);
  if (!v50)
  {
    if (v45 < v48) {
      goto LABEL_114;
    }
LABEL_91:
    long long v51 = *(uint64_t **)v12;
    if (!*(void *)v12)
    {
LABEL_92:
      uint64_t v14 = (char *)(a1 + 80);
      goto LABEL_162;
    }
    while (1)
    {
      uint64_t v14 = (char *)v51;
      long long v54 = (const void *)v51[4];
      uint64_t v52 = v51 + 4;
      uint64_t v53 = v54;
      int v55 = *((char *)v52 + 23);
      if (v55 >= 0) {
        size_t v56 = v52;
      }
      else {
        size_t v56 = v53;
      }
      if (v55 >= 0) {
        size_t v57 = *((unsigned __int8 *)v52 + 23);
      }
      else {
        size_t v57 = v52[1];
      }
      if (v57 >= v48) {
        size_t v58 = v48;
      }
      else {
        size_t v58 = v57;
      }
      int v59 = memcmp(v47, v56, v58);
      if (v59)
      {
        if (v59 < 0) {
          goto LABEL_93;
        }
LABEL_107:
        int v60 = memcmp(v56, v47, v58);
        if (v60)
        {
          if ((v60 & 0x80000000) == 0) {
            goto LABEL_206;
          }
        }
        else if (v57 >= v48)
        {
LABEL_206:
          size_t v62 = v12;
          goto LABEL_119;
        }
        uint64_t v12 = v14 + 8;
        long long v51 = (uint64_t *)*((void *)v14 + 1);
        if (!v51) {
          goto LABEL_162;
        }
      }
      else
      {
        if (v48 >= v57) {
          goto LABEL_107;
        }
LABEL_93:
        long long v51 = *(uint64_t **)v14;
        uint64_t v12 = v14;
        if (!*(void *)v14) {
          goto LABEL_162;
        }
      }
    }
  }
  if ((v50 & 0x80000000) == 0) {
    goto LABEL_91;
  }
LABEL_114:
  BOOL v61 = v39 == 0;
  if (v39) {
    size_t v62 = v40 + 8;
  }
  else {
    size_t v62 = v14;
  }
  if (!v61) {
    uint64_t v14 = v40;
  }
LABEL_119:
  BOOL v38 = *(char **)v62;
  uint64_t v12 = v62;
  if (*(void *)v62)
  {
LABEL_120:
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,AMSCore::Subject<>>,void *>>>::operator()[abi:fe180100](1, v15);
    uint64_t v15 = v38;
    goto LABEL_165;
  }
LABEL_162:
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = 0;
  *((void *)v15 + 2) = v14;
  *(void *)uint64_t v12 = v15;
  uint64_t v84 = **(void **)(a1 + 72);
  uint64_t v85 = (uint64_t *)v15;
  if (v84)
  {
    *(void *)(a1 + 72) = v84;
    uint64_t v85 = *(uint64_t **)v12;
  }
  std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 80), v85);
  ++*(void *)(a1 + 88);
LABEL_165:
  a5 = v107;
  uint64_t v10 = v108;
LABEL_166:
  uint64_t v86 = (void *)v109[3];
  if (v86)
  {
    if (v86 == v109)
    {
      unint64_t v115 = v114;
      (*(void (**)(void))(*v109 + 24))();
    }
    else
    {
      unint64_t v115 = (void *)v109[3];
      v109[3] = 0;
    }
  }
  else
  {
    unint64_t v115 = 0;
  }
  long long v87 = operator new(0x38uLL);
  std::string::size_type v88 = (std::string::size_type)v87;
  v87[1] = 0;
  v87[2] = 0;
  *long long v87 = &unk_1EDC84400;
  std::string::size_type v89 = (std::string::size_type)(v87 + 3);
  if (v115)
  {
    if (v115 == v114)
    {
      v87[6] = v89;
      (*(void (**)(void *, std::string::size_type))(v114[0] + 24))(v114, v89);
    }
    else
    {
      v87[6] = v115;
      unint64_t v115 = 0;
    }
  }
  else
  {
    v87[6] = 0;
  }
  v111.__r_.__value_.__r.__words[0] = v89;
  v111.__r_.__value_.__l.__size_ = v88;
  std::mutex::lock((std::mutex *)(v15 + 56));
  char v91 = (char *)*((void *)v15 + 16);
  unint64_t v90 = *((void *)v15 + 17);
  if ((unint64_t)v91 >= v90)
  {
    char v94 = (char *)*((void *)v15 + 15);
    uint64_t v95 = (v91 - v94) >> 4;
    unint64_t v96 = v95 + 1;
    if ((unint64_t)(v95 + 1) >> 60) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v97 = v90 - (void)v94;
    if (v97 >> 3 > v96) {
      unint64_t v96 = v97 >> 3;
    }
    if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v98 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v98 = v96;
    }
    if (v98 >> 60) {
      std::__throw_bad_array_new_length[abi:fe180100]();
    }
    uint64_t v99 = (char *)operator new(16 * v98);
    long long v100 = &v99[16 * v95];
    long long v101 = *(_OWORD *)&v111.__r_.__value_.__l.__data_;
    *(_OWORD *)long long v100 = *(_OWORD *)&v111.__r_.__value_.__l.__data_;
    long long v110 = v101;
    if (*((void *)&v101 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v101 + 1) + 16), 1uLL, memory_order_relaxed);
      char v94 = (char *)*((void *)v15 + 15);
      char v91 = (char *)*((void *)v15 + 16);
    }
    unsigned int v102 = &v99[16 * v98];
    long long v93 = v100 + 16;
    if (v91 == v94)
    {
      *((void *)v15 + 15) = v100;
      *((void *)v15 + 16) = v93;
      *((void *)v15 + 17) = v102;
    }
    else
    {
      do
      {
        long long v103 = *((_OWORD *)v91 - 1);
        v91 -= 16;
        *((_OWORD *)v100 - 1) = v103;
        v100 -= 16;
        *(void *)char v91 = 0;
        *((void *)v91 + 1) = 0;
      }
      while (v91 != v94);
      char v94 = (char *)*((void *)v15 + 15);
      unsigned int v104 = (char *)*((void *)v15 + 16);
      *((void *)v15 + 15) = v100;
      *((void *)v15 + 16) = v93;
      *((void *)v15 + 17) = v102;
      while (v104 != v94)
      {
        uint64_t v105 = (std::__shared_weak_count *)*((void *)v104 - 1);
        if (v105) {
          std::__shared_weak_count::__release_weak(v105);
        }
        v104 -= 16;
      }
    }
    if (v94)
    {
      operator delete(v94);
      long long v110 = *(_OWORD *)&v111.__r_.__value_.__l.__data_;
    }
  }
  else
  {
    long long v92 = *(_OWORD *)&v111.__r_.__value_.__l.__data_;
    *(_OWORD *)char v91 = *(_OWORD *)&v111.__r_.__value_.__l.__data_;
    long long v110 = v92;
    if (*((void *)&v92 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v92 + 1) + 16), 1uLL, memory_order_relaxed);
    }
    long long v93 = v91 + 16;
  }
  *((void *)v15 + 16) = v93;
  *(_OWORD *)&v111.__r_.__value_.__l.__data_ = 0uLL;
  *(_OWORD *)a5 = v110;
  std::mutex::unlock((std::mutex *)(v15 + 56));
  unint64_t v106 = (std::__shared_weak_count *)v111.__r_.__value_.__l.__size_;
  if (v111.__r_.__value_.__l.__size_
    && !atomic_fetch_add((atomic_ullong *volatile)(v111.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
    std::__shared_weak_count::__release_weak(v106);
  }
  if (v115 == v114)
  {
    (*(void (**)(void *))(v114[0] + 32))(v114);
  }
  else if (v115)
  {
    (*(void (**)(void))(*v115 + 40))();
  }
LABEL_6:
  std::mutex::unlock(v10);
}

void sub_18DA5C664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Logger::log<char [69]>(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= a2)
  {
    char v8 = a2;
    uint64_t v9 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v15);
    uint64_t v10 = *(void *)(v15[0] - 24);
    {
    }
    size_t v11 = strlen(a5);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v15, (uint64_t)a5, v11);
    uint64_t v12 = v15[6];
    long long v13 = (char *)v15 + *(void *)(v15[0] - 24);
    if ((v13[32] & 5) != 0)
    {
      uint64_t v14 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v13 + 5) + 32))(&rep);
      uint64_t v14 = v22;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v19 = v8;
    uint64_t v20 = v12;
    uint64_t v21 = v14;
    (*(void (**)(void, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v9 + 16) + 16))(*(void *)(v9 + 16), a3, a4, &rep);
    v15[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v15 + *(void *)(v15[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v15[1] = MEMORY[0x1E4FBA470] + 16;
    if (v16 < 0) {
      operator delete((void *)v15[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v17);
  }
  return result;
}

void sub_18DA5C9A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<std::function<void ()(void)>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = a1 + 24;
  uint64_t result = *(void *)(a1 + 48);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void std::__shared_ptr_emplace<std::function<void ()(void)>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC84400;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<std::function<void ()(void)>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC84400;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,AMSCore::Subject<>>,void *>>>::operator()[abi:fe180100](char a1, char *__p)
{
  if (a1)
  {
    uint64_t v3 = *((void *)__p + 15);
    if (v3)
    {
      uint64_t v4 = *((void *)__p + 16);
      uint64_t v5 = (void *)*((void *)__p + 15);
      if (v4 != v3)
      {
        do
        {
          uint64_t v6 = *(std::__shared_weak_count **)(v4 - 8);
          if (v6) {
            std::__shared_weak_count::__release_weak(v6);
          }
          v4 -= 16;
        }
        while (v4 != v3);
        uint64_t v5 = (void *)*((void *)__p + 15);
      }
      *((void *)__p + 16) = v3;
      operator delete(v5);
    }
    std::mutex::~mutex((std::mutex *)(__p + 56));
    if (__p[55] < 0) {
      operator delete(*((void **)__p + 4));
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void AMSCore::LocalNotificationCenter::~LocalNotificationCenter(AMSCore::LocalNotificationCenter *this)
{
  *(void *)this = &unk_1EDC824A8;
  std::__tree<std::__value_type<std::string,AMSCore::Subject<>>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Subject<>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Subject<>>>>::destroy(*((char **)this + 10));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  JUMPOUT(0x192FA4080);
}

{
  *(void *)this = &unk_1EDC824A8;
  std::__tree<std::__value_type<std::string,AMSCore::Subject<>>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Subject<>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Subject<>>>>::destroy(*((char **)this + 10));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

void std::__tree<std::__value_type<std::string,AMSCore::Subject<>>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Subject<>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Subject<>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,AMSCore::Subject<>>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Subject<>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Subject<>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,AMSCore::Subject<>>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Subject<>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Subject<>>>>::destroy(*((void *)a1 + 1));
    uint64_t v2 = *((void *)a1 + 15);
    if (v2)
    {
      uint64_t v3 = *((void *)a1 + 16);
      uint64_t v4 = (void *)*((void *)a1 + 15);
      if (v3 != v2)
      {
        do
        {
          uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
          if (v5) {
            std::__shared_weak_count::__release_weak(v5);
          }
          v3 -= 16;
        }
        while (v3 != v2);
        uint64_t v4 = (void *)*((void *)a1 + 15);
      }
      *((void *)a1 + 16) = v2;
      operator delete(v4);
    }
    std::mutex::~mutex((std::mutex *)(a1 + 56));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

uint64_t std::__shared_ptr_emplace<AMSCore::LocalNotificationCenter>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMSCore::LocalNotificationCenter>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC84080;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::LocalNotificationCenter>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC84080;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AMSCore::TaskCounter::TaskCounter(AMSCore::TaskCounter *this)
{
}

void AMSCore::TaskCounter::~TaskCounter(AMSCore::TaskCounter *this)
{
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
}

void std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string,std::string,std::string>,std::shared_ptr<AMSCore::BagDataSource>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string,std::string,std::string>,std::shared_ptr<AMSCore::BagDataSource>>,std::less<std::tuple<std::string,std::string,std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string,std::string,std::string>,std::shared_ptr<AMSCore::BagDataSource>>>>::destroy(char *a1)
{
  if (!a1) {
    return;
  }
  std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string,std::string,std::string>,std::shared_ptr<AMSCore::BagDataSource>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string,std::string,std::string>,std::shared_ptr<AMSCore::BagDataSource>>,std::less<std::tuple<std::string,std::string,std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string,std::string,std::string>,std::shared_ptr<AMSCore::BagDataSource>>>>::destroy(*(void *)a1);
  std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string,std::string,std::string>,std::shared_ptr<AMSCore::BagDataSource>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string,std::string,std::string>,std::shared_ptr<AMSCore::BagDataSource>>,std::less<std::tuple<std::string,std::string,std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string,std::string,std::string>,std::shared_ptr<AMSCore::BagDataSource>>>>::destroy(*((void *)a1 + 1));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)a1 + 20);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((a1[151] & 0x80000000) == 0)
    {
LABEL_5:
      if ((a1[127] & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  else if ((a1[151] & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*((void **)a1 + 16));
  if ((a1[127] & 0x80000000) == 0)
  {
LABEL_6:
    if ((a1[103] & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(*((void **)a1 + 13));
  if ((a1[103] & 0x80000000) == 0)
  {
LABEL_7:
    if ((a1[79] & 0x80000000) == 0) {
      goto LABEL_8;
    }
LABEL_17:
    operator delete(*((void **)a1 + 7));
    if ((a1[55] & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_18:
    operator delete(*((void **)a1 + 4));
    goto LABEL_9;
  }
LABEL_16:
  operator delete(*((void **)a1 + 10));
  if (a1[79] < 0) {
    goto LABEL_17;
  }
LABEL_8:
  if (a1[55] < 0) {
    goto LABEL_18;
  }
LABEL_9:
  operator delete(a1);
}

void std::__shared_ptr_emplace<AMSCore::BagService::MutableBagContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC839F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::BagService::MutableBagContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC839F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__tuple_compare_three_way[abi:fe180100]<std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string,0ul,1ul,2ul,3ul,4ul>(void *a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  size_t v4 = a1[1];
  if (*((char *)a1 + 23) >= 0)
  {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else
  {
    a1 = (void *)*a1;
    size_t v5 = v4;
  }
  size_t v6 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    size_t v7 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (void *)*a2;
    size_t v7 = v6;
  }
  if (v7 >= v5) {
    size_t v8 = v5;
  }
  else {
    size_t v8 = v7;
  }
  int v9 = memcmp(a1, a2, v8);
  if (v9) {
    goto LABEL_11;
  }
  BOOL v11 = v5 >= v7;
  if (v5 == v7)
  {
    int v12 = *((char *)v3 + 47);
    if (v12 >= 0) {
      long long v13 = v3 + 3;
    }
    else {
      long long v13 = (const void *)v3[3];
    }
    if (v12 >= 0) {
      size_t v14 = *((unsigned __int8 *)v3 + 47);
    }
    else {
      size_t v14 = v3[4];
    }
    int v15 = *((char *)v2 + 47);
    if (v15 >= 0) {
      char v16 = v2 + 3;
    }
    else {
      char v16 = (const void *)v2[3];
    }
    if (v15 >= 0) {
      size_t v17 = *((unsigned __int8 *)v2 + 47);
    }
    else {
      size_t v17 = v2[4];
    }
    if (v17 >= v14) {
      size_t v18 = v14;
    }
    else {
      size_t v18 = v17;
    }
    int v9 = memcmp(v13, v16, v18);
    if (v9) {
      goto LABEL_11;
    }
    BOOL v11 = v14 >= v17;
    if (v14 == v17)
    {
      int v19 = *((char *)v3 + 71);
      if (v19 >= 0) {
        uint64_t v20 = v3 + 6;
      }
      else {
        uint64_t v20 = (const void *)v3[6];
      }
      if (v19 >= 0) {
        size_t v21 = *((unsigned __int8 *)v3 + 71);
      }
      else {
        size_t v21 = v3[7];
      }
      int v22 = *((char *)v2 + 71);
      if (v22 >= 0) {
        uint64_t v23 = v2 + 6;
      }
      else {
        uint64_t v23 = (const void *)v2[6];
      }
      if (v22 >= 0) {
        size_t v24 = *((unsigned __int8 *)v2 + 71);
      }
      else {
        size_t v24 = v2[7];
      }
      if (v24 >= v21) {
        size_t v25 = v21;
      }
      else {
        size_t v25 = v24;
      }
      int v9 = memcmp(v20, v23, v25);
      if (v9) {
        goto LABEL_11;
      }
      BOOL v11 = v21 >= v24;
      if (v21 == v24)
      {
        int v26 = *((char *)v3 + 95);
        if (v26 >= 0) {
          uint64_t v27 = v3 + 9;
        }
        else {
          uint64_t v27 = (const void *)v3[9];
        }
        if (v26 >= 0) {
          size_t v28 = *((unsigned __int8 *)v3 + 95);
        }
        else {
          size_t v28 = v3[10];
        }
        int v29 = *((char *)v2 + 95);
        if (v29 >= 0) {
          uint64_t v30 = v2 + 9;
        }
        else {
          uint64_t v30 = (const void *)v2[9];
        }
        if (v29 >= 0) {
          size_t v31 = *((unsigned __int8 *)v2 + 95);
        }
        else {
          size_t v31 = v2[10];
        }
        if (v31 >= v28) {
          size_t v32 = v28;
        }
        else {
          size_t v32 = v31;
        }
        int v9 = memcmp(v27, v30, v32);
        if (v9) {
          goto LABEL_11;
        }
        BOOL v11 = v28 >= v31;
        if (v28 == v31)
        {
          size_t v35 = (const void *)v3[12];
          size_t v34 = v3 + 12;
          uint64_t v33 = v35;
          int v36 = *((char *)v34 + 23);
          if (v36 >= 0) {
            int v37 = v34;
          }
          else {
            int v37 = v33;
          }
          if (v36 >= 0) {
            size_t v38 = *((unsigned __int8 *)v34 + 23);
          }
          else {
            size_t v38 = v34[1];
          }
          long long v41 = (const void *)v2[12];
          long long v40 = v2 + 12;
          uint64_t v39 = v41;
          int v42 = *((char *)v40 + 23);
          if (v42 >= 0) {
            int v43 = v40;
          }
          else {
            int v43 = v39;
          }
          if (v42 >= 0) {
            size_t v44 = *((unsigned __int8 *)v40 + 23);
          }
          else {
            size_t v44 = v40[1];
          }
          if (v44 >= v38) {
            size_t v45 = v38;
          }
          else {
            size_t v45 = v44;
          }
          int v9 = memcmp(v37, v43, v45);
          if (!v9)
          {
            BOOL v11 = v38 >= v44;
            if (v38 == v44) {
              return 0;
            }
            goto LABEL_83;
          }
LABEL_11:
          if ((v9 & 0x80000000) == 0) {
            return 1;
          }
          return 255;
        }
      }
    }
  }
LABEL_83:
  if (v11) {
    return 1;
  }
  return 255;
}

void *_ZNKSt3__110__function6__funcIPDoFN7AMSCore4TaskINS2_20LoadNetworkBagResultENS2_5ErrorEEENS_5tupleIJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESD_EEENS_10shared_ptrIKNS2_13IMediaAccountEEENSF_INS2_11IBundleInfoEEENS_8expectedINS2_25LoadURLMetricsEventConfigES5_EENS2_18LoadNetworkBagTask10LoadPolicyEENSB_ISR_EEFS6_SE_SI_SK_SN_SP_EE11target_typeEv()
{
  return &_ZTIPDoFN7AMSCore4TaskINS_20LoadNetworkBagResultENS_5ErrorEEENSt3__15tupleIJNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESB_EEENS4_10shared_ptrIKNS_13IMediaAccountEEENSD_INS_11IBundleInfoEEENS4_8expectedINS_25LoadURLMetricsEventConfigES2_EENS_18LoadNetworkBagTask10LoadPolicyEE;
}

uint64_t _ZNKSt3__110__function6__funcIPDoFN7AMSCore4TaskINS2_20LoadNetworkBagResultENS2_5ErrorEEENS_5tupleIJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESD_EEENS_10shared_ptrIKNS2_13IMediaAccountEEENSF_INS2_11IBundleInfoEEENS_8expectedINS2_25LoadURLMetricsEventConfigES5_EENS2_18LoadNetworkBagTask10LoadPolicyEENSB_ISR_EEFS6_SE_SI_SK_SN_SP_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "PDoFN7AMSCore4TaskINS_20LoadNetworkBagResultENS_5ErrorEEENSt3__15tupleIJNS4_12basic_stringIcNS4_11c"
                     "har_traitsIcEENS4_9allocatorIcEEEESB_EEENS4_10shared_ptrIKNS_13IMediaAccountEEENSD_INS_11IBundleInf"
                     "oEEENS4_8expectedINS_25LoadURLMetricsEventConfigES2_EENS_18LoadNetworkBagTask10LoadPolicyEE"
    || ((v3 & (unint64_t)"PDoFN7AMSCore4TaskINS_20LoadNetworkBagResultENS_5ErrorEEENSt3__15tupleIJNS4_12basic_stri"
                                "ngIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESB_EEENS4_10shared_ptrIKNS_13IMediaAccountE"
                                "EENSD_INS_11IBundleInfoEEENS4_8expectedINS_25LoadURLMetricsEventConfigES2_EENS_18LoadNet"
                                "workBagTask10LoadPolicyEE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "PDoFN7AMSCore4TaskINS_20LoadNetworkBagResultENS_5ErrorEEENSt3__15tupleIJNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESB_EEENS4_10shared_ptrIKNS_13IMediaAccountEEENSD_INS_11IBundleInfoEEENS4_8expectedINS_25LoadURLMetricsEventConfigES2_EENS_18LoadNetworkBagTask10LoadPolicyEE")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PDoFN7AMSCore4TaskINS_20LoadNetworkBagResultENS_5ErrorEEENSt3__15tupleIJNS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESB_EEENS4_10shared_ptrIKNS_13IMediaAccountEEENSD_INS_11IBundleInfoEEENS4_8expectedINS_25LoadURLMetricsEventConfigES2_EENS_18LoadNetworkBagTask10LoadPolicyEE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIPDoFN7AMSCore4TaskINS2_20LoadNetworkBagResultENS2_5ErrorEEENS_5tupleIJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESD_EEENS_10shared_ptrIKNS2_13IMediaAccountEEENSF_INS2_11IBundleInfoEEENS_8expectedINS2_25LoadURLMetricsEventConfigES5_EENS2_18LoadNetworkBagTask10LoadPolicyEENSB_ISR_EEFS6_SE_SI_SK_SN_SP_EEclEOSE_OSI_OSK_OSN_OSP_(uint64_t a1, long long *a2, long long *a3, long long *a4, std::runtime_error *a5, unsigned __int8 *a6)
{
  size_t v7 = *(void (**)(long long *, long long *, long long *, std::runtime_error *, void, __n128))(a1 + 8);
  long long v8 = *a2;
  uint64_t v21 = *((void *)a2 + 2);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v22 = *(long long *)((char *)a2 + 24);
  uint64_t v23 = *((void *)a2 + 5);
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  long long v19 = *a3;
  long long v20 = v8;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  long long v18 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  unsigned __int8 imp = a5[7].__imp_.__imp_;
  __n128 v10 = std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__union_t>(v13, imp, a5);
  unsigned __int8 v17 = imp;
  v7(&v20, &v19, &v18, v13, *a6, v10);
  if (v17)
  {
    if (v16 < 0)
    {
      operator delete(__p);
      if (v14)
      {
LABEL_4:
        BOOL v11 = (std::__shared_weak_count *)*((void *)&v18 + 1);
        if (!*((void *)&v18 + 1)) {
          goto LABEL_9;
        }
        goto LABEL_8;
      }
    }
    else if (v14)
    {
      goto LABEL_4;
    }
  }
  ((void (*)(std::runtime_error *))v13[0].~runtime_error)(v13);
  BOOL v11 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (!*((void *)&v18 + 1)) {
    goto LABEL_9;
  }
LABEL_8:
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    int v12 = (std::__shared_weak_count *)*((void *)&v19 + 1);
    if (!*((void *)&v19 + 1)) {
      goto LABEL_13;
    }
    goto LABEL_10;
  }
LABEL_9:
  int v12 = (std::__shared_weak_count *)*((void *)&v19 + 1);
  if (!*((void *)&v19 + 1)) {
    goto LABEL_13;
  }
LABEL_10:
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_13:
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v21) & 0x80000000) == 0) {
      return;
    }
LABEL_17:
    operator delete((void *)v20);
    return;
  }
  operator delete((void *)v22);
  if (SHIBYTE(v21) < 0) {
    goto LABEL_17;
  }
}

__n128 std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__union_t>(std::runtime_error *a1, int a2, std::runtime_error *a3)
{
  if (a2)
  {
    char imp = (char)a3[4].__imp_.__imp_;
    if (imp)
    {
      a1->__vftable = a3->__vftable;
    }
    else
    {
      a1 = std::runtime_error::runtime_error(a1, a3);
      p_char imp = (std::runtime_error_vtbl *)&a3[2].__imp_;
      BOOL v11 = a3[2].__imp_.__imp_;
      a1[1] = a3[1];
      a1->__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      a1[2].__vftable = a3[2].__vftable;
      a1[2].__imp_.__imp_ = v11;
      int v12 = (std::runtime_error_vtbl *)&a1[2].__imp_;
      long long v13 = a3[3].__vftable;
      a1[3].__vftable = v13;
      if (v13)
      {
        *((void *)v11 + 2) = v12;
        a3[2].__vftable = p_imp;
        p_imp->~runtime_error = 0;
        a3[3].__vftable = 0;
      }
      else
      {
        a1[2].__vftable = v12;
      }
      *(std::runtime_error *)((char *)a1 + 56) = *(std::runtime_error *)((char *)a3 + 56);
      a3[3].__imp_.__imp_ = 0;
      a3[4].__vftable = 0;
    }
    LOBYTE(a1[4].__imp_.__imp_) = imp;
    __n128 result = (__n128)a3[5];
    std::runtime_error v15 = a3[6];
    a1[5] = (std::runtime_error)result;
    a1[6] = v15;
    a1[7].__vftable = a3[7].__vftable;
    a3[6].__vftable = 0;
    a3[6].__imp_.__imp_ = 0;
    a3[7].__vftable = 0;
  }
  else
  {
    size_t v5 = std::runtime_error::runtime_error(a1, a3);
    size_t v6 = (std::runtime_error_vtbl *)&a3[2].__imp_;
    size_t v7 = a3[2].__imp_.__imp_;
    v5[1] = a3[1];
    v5->__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    v5[2].__vftable = a3[2].__vftable;
    v5[2].__imp_.__imp_ = v7;
    long long v8 = (std::runtime_error_vtbl *)&v5[2].__imp_;
    int v9 = a3[3].__vftable;
    v5[3].__vftable = v9;
    if (v9)
    {
      *((void *)v7 + 2) = v8;
      a3[2].__vftable = v6;
      v6->~runtime_error = 0;
      a3[3].__vftable = 0;
    }
    else
    {
      v5[2].__vftable = v8;
    }
    __n128 result = *(__n128 *)&a3[3].__imp_.__imp_;
    *(__n128 *)((char *)v5 + 56) = result;
    a3[3].__imp_.__imp_ = 0;
    a3[4].__vftable = 0;
  }
  return result;
}

void *_ZNKSt3__110__function6__funcIPDoFN7AMSCore4TaskINS2_20LoadNetworkBagResultENS2_5ErrorEEENS_5tupleIJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESD_EEENS_10shared_ptrIKNS2_13IMediaAccountEEENSF_INS2_11IBundleInfoEEENS_8expectedINS2_25LoadURLMetricsEventConfigES5_EENS2_18LoadNetworkBagTask10LoadPolicyEENSB_ISR_EEFS6_SE_SI_SK_SN_SP_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EDCA4E90;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIPDoFN7AMSCore4TaskINS2_20LoadNetworkBagResultENS2_5ErrorEEENS_5tupleIJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESD_EEENS_10shared_ptrIKNS2_13IMediaAccountEEENSF_INS2_11IBundleInfoEEENS_8expectedINS2_25LoadURLMetricsEventConfigES5_EENS2_18LoadNetworkBagTask10LoadPolicyEENSB_ISR_EEFS6_SE_SI_SK_SN_SP_EED0Ev()
{
}

void AMSCore::ClockProvider::~ClockProvider(AMSCore::ClockProvider *this)
{
}

uint64_t AMSCore::BagService::configureMutableBagUpdateObservation(void *a1, uint64_t *a2, long long *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = a2[2];
  uint64_t v6 = a2[3];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
  long long v10 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  long long v8 = (char *)operator new(0x38uLL);
  *(void *)long long v8 = &unk_1EDC82C08;
  *((void *)v8 + 1) = v4;
  *((void *)v8 + 2) = v5;
  *((void *)v8 + 3) = v7;
  *((void *)v8 + 4) = v6;
  *(_OWORD *)(v8 + 40) = v10;
  int v12 = v8;
  AMSCore::BagDataSource::observeChanged(a1, v4, v11);
  uint64_t result = (uint64_t)v12;
  if (v12 == v11) {
    return (*(uint64_t (**)(void *))(v11[0] + 32))(v11);
  }
  if (v12) {
    return (*(uint64_t (**)(void))(*v12 + 40))();
  }
  return result;
}

void sub_18DA5D680(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__func<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0,std::allocator<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::target_type()
{
}

uint64_t std::__function::__func<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0,std::allocator<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore10BagService36configureMutableBagUpdateObservationENSt3__110shared_ptrIKNS_13ClockProviderEEEE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore10BagService36configureMutableBagUpdateObservationENSt3__110shared_ptrIKNS_13C"
                                "lockProviderEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore10BagService36configureMutableBagUpdateObservationENSt3__110shared_ptrIKNS_13ClockProviderEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore10BagService36configureMutableBagUpdateObservationENSt3__110shared_ptrIKNS_13ClockProviderEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0,std::allocator<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::operator()(void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v9);
  AMSCore::Logger::log<char [51]>(v9, 2u, (uint64_t)"bag", 3, "Mutable bag datasource change-observer was called.");
  uint64_t v2 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = a1[2];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a1[3];
  uint64_t v4 = a1[4];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[6];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  long long v8 = (char *)operator new(0x158uLL);
  *(void *)long long v8 = _ZZZN7AMSCore10BagService36configureMutableBagUpdateObservationENSt3__110shared_ptrIKNS_13ClockProviderEEEENK3__0clINS_8MapUtils10UpdateDiffINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEEEDaRKT_ENKUlNS1_8weak_ptrINS_13BagDataSourceEEENSL_INS0_17MutableBagContextEEES5_E_clESN_SP_S5__resume;
  *((void *)v8 + 1) = _ZZZN7AMSCore10BagService36configureMutableBagUpdateObservationENSt3__110shared_ptrIKNS_13ClockProviderEEEENK3__0clINS_8MapUtils10UpdateDiffINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEEEDaRKT_ENKUlNS1_8weak_ptrINS_13BagDataSourceEEENSL_INS0_17MutableBagContextEEES5_E_clESN_SP_S5__destroy;
  *((void *)v8 + 34) = v3;
  *((void *)v8 + 35) = v5;
  *((void *)v8 + 36) = v4;
  *((void *)v8 + 37) = v6;
  *((void *)v8 + 38) = v7;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *(_WORD *)(v8 + 17) = 0;
  *((void *)v8 + 3) = 0;
  *((void *)v8 + 7) = 0;
  std::shared_ptr<AMSCore::Task<void,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,void>::Promise,AMSCore::Task<void,void>::Promise::get_return_object(void)::DetachPromise,void>(&v9, (uint64_t)(v8 + 16));
}

void sub_18DA5E50C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Logger::log<char [51]>(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= a2)
  {
    char v8 = a2;
    uint64_t v9 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v15);
    uint64_t v10 = *(void *)(v15[0] - 24);
    {
    }
    size_t v11 = strlen(a5);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v15, (uint64_t)a5, v11);
    uint64_t v12 = v15[6];
    uint64_t v13 = (char *)v15 + *(void *)(v15[0] - 24);
    if ((v13[32] & 5) != 0)
    {
      uint64_t v14 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v13 + 5) + 32))(&rep);
      uint64_t v14 = v22;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v19 = v8;
    uint64_t v20 = v12;
    uint64_t v21 = v14;
    (*(void (**)(void, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v9 + 16) + 16))(*(void *)(v9 + 16), a3, a4, &rep);
    v15[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v15 + *(void *)(v15[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v15[1] = MEMORY[0x1E4FBA470] + 16;
    if (v16 < 0) {
      operator delete((void *)v15[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v17);
  }
  return result;
}

void sub_18DA5E954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void _ZZZN7AMSCore10BagService36configureMutableBagUpdateObservationENSt3__110shared_ptrIKNS_13ClockProviderEEEENK3__0clINS_8MapUtils10UpdateDiffINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEEEDaRKT_ENKUlNS1_8weak_ptrINS_13BagDataSourceEEENSL_INS0_17MutableBagContextEEES5_E_clESN_SP_S5__resume(unint64_t a1)
{
  if (*(unsigned char *)(a1 + 336)) {
    goto LABEL_4;
  }
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a1 + 296);
  unint64_t v2 = a1 + 144;
  *(void *)(a1 + 176) = *(void *)(a1 + 280) + 64;
  *(unsigned char *)(a1 + 184) = 1;
  uint64_t v3 = *(void *)(a1 + 224);
  *(_DWORD *)(a1 + 168) = 0;
  (*(void (**)(uint64_t, void, unint64_t, unint64_t))(*(void *)v3 + 24))(v3, 0, v2, a1 + 240);
  long long v4 = *(_OWORD *)(a1 + 208);
  *(_OWORD *)(a1 + 312) = v4;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  if (atomic_load_explicit((atomic_ullong *volatile)(v4 + 96), memory_order_acquire)
    || (*(unsigned char *)(a1 + 336) = 1, atomic_exchange((atomic_ullong *volatile)(*(void *)(a1 + 312) + 96), a1)))
  {
LABEL_4:
    uint64_t v5 = *(void *)(a1 + 312);
    if (*(unsigned char *)(v5 + 88))
    {
      uint64_t v6 = (const std::runtime_error *)(v5 + 8);
      char v7 = *(unsigned char *)(v5 + 80);
      char v8 = (_OWORD *)(a1 + 80);
      uint64_t v9 = (void *)(v5 + 24);
      if (v7)
      {
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(v5 + 8);
        v6->__vftable = 0;
        *(void *)(v5 + 16) = 0;
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(v5 + 24);
        *(void *)(a1 + 96) = *(void *)(v5 + 40);
        *(void *)(v5 + 32) = 0;
        *(void *)(v5 + 40) = 0;
        *uint64_t v9 = 0;
        *(void *)(a1 + 104) = *(void *)(v5 + 48);
      }
      else
      {
        std::runtime_error::runtime_error((std::runtime_error *)(a1 + 64), v6);
        *char v8 = *(_OWORD *)v9;
        uint64_t v10 = (void *)(v5 + 48);
        uint64_t v11 = *(void *)(v5 + 48);
        *(void *)(a1 + 104) = v11;
        unint64_t v12 = a1 + 104;
        *(void *)(a1 + 64) = &unk_1EDC827D8;
        *(void *)(a1 + 96) = *(void *)(v5 + 40);
        uint64_t v13 = *(void *)(v5 + 56);
        *(void *)(a1 + 112) = v13;
        if (v13)
        {
          *(void *)(v11 + 16) = v12;
          *(void *)(v5 + 40) = v10;
          *uint64_t v10 = 0;
          *(void *)(v5 + 56) = 0;
        }
        else
        {
          *(void *)(a1 + 96) = v12;
        }
        uint64_t v14 = *(void *)(a1 + 312);
        *(_OWORD *)(a1 + 120) = *(_OWORD *)(v14 + 64);
        *(void *)(v14 + 64) = 0;
        *(void *)(v14 + 72) = 0;
      }
      *(unsigned char *)(a1 + 136) = v7;
      uint64_t v15 = *(void *)(a1 + 320);
      if (v15 && !atomic_fetch_add((atomic_ullong *volatile)(v15 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        char v16 = *(std::__shared_weak_count **)(a1 + 320);
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      uint64_t v17 = *(std::__shared_weak_count **)(a1 + 216);
      if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      long long v18 = *(std::__shared_weak_count **)(a1 + 248);
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      if (*(unsigned char *)(a1 + 136))
      {
        char v19 = operator new(0x50uLL);
        v19[1] = 0;
        v19[2] = 0;
        *char v19 = &unk_1EDC83B08;
        long long v20 = *(_OWORD *)(a1 + 64);
        long long v21 = *(_OWORD *)(a1 + 80);
        *(void *)char v8 = 0;
        *(void *)(a1 + 88) = 0;
        uint64_t v22 = *(void *)(a1 + 96);
        uint64_t v23 = *(void *)(a1 + 104);
        *(void *)(a1 + 96) = 0;
        *(void *)(a1 + 64) = 0;
        *(void *)(a1 + 72) = 0;
        void v19[3] = &unk_1EDC81A58;
        *((_OWORD *)v19 + 2) = v20;
        *((_OWORD *)v19 + 3) = v21;
        v19[8] = v22;
        v19[9] = v23;
        int v36 = v19 + 3;
        int v37 = (std::__shared_weak_count *)v19;
        for (uint64_t i = *(void **)(*(void *)(a1 + 192) + 16); i; uint64_t i = (void *)*i)
        {
          uint64_t v25 = i[8];
          int v26 = v37;
          *(void *)(a1 + 256) = v36;
          *(void *)(a1 + 264) = v26;
          if (v26) {
            atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          AMSCore::MutableBag::setBag(v25, (long long *)(a1 + 256));
          uint64_t v27 = *(std::__shared_weak_count **)(a1 + 264);
          if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v34);
        AMSCore::Logger::log<char [57]>(v34);
        size_t v28 = v35;
        if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
        int v29 = v37;
        if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
        int v30 = 0;
      }
      else
      {
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v36);
        AMSCore::Logger::log<char [97]>((uint64_t)v36);
        size_t v31 = v37;
        if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
        *(unsigned char *)(a1 + 18) = 1;
        int v30 = 3;
      }
      std::__expected_base<AMSCore::SynchronousBagData,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100](a1 + 64);
      if (*(unsigned char *)(a1 + 184)) {
        AMSCore::AwaitableMutex::unlock(*(std::mutex **)(a1 + 176));
      }
      size_t v32 = *(std::__shared_weak_count **)(a1 + 200);
      if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
      *(void *)(a1 + 328) = 0;
      uint64_t v33 = *(std::__shared_weak_count **)(a1 + 232);
      if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
        if (v30 == 3) {
          goto LABEL_49;
        }
      }
      else if (v30 == 3)
      {
LABEL_49:
        *(void *)(a1 + 64) = a1 + 16;
        *(void *)a1 = 0;
        AMSCore::Task<void,void>::Promise::Awaiter::await_suspend(a1 + 64);
        return;
      }
      *(unsigned char *)(a1 + 18) = 1;
      goto LABEL_49;
    }
    __break(1u);
  }
}

void sub_18DA5EFF8(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)va);
  std::__expected_base<AMSCore::SynchronousBagData,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100](v4);
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](v5);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v3 + 192);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v3 + 224);
  __cxa_begin_catch(a1);
  std::terminate();
}

void _ZZZN7AMSCore10BagService36configureMutableBagUpdateObservationENSt3__110shared_ptrIKNS_13ClockProviderEEEENK3__0clINS_8MapUtils10UpdateDiffINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEEEDaRKT_ENKUlNS1_8weak_ptrINS_13BagDataSourceEEENSL_INS0_17MutableBagContextEEES5_E_clESN_SP_S5__destroy(char *__p)
{
  if (!*(void *)__p) {
    goto LABEL_21;
  }
  if (__p[336])
  {
    uint64_t v2 = *((void *)__p + 40);
    if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 40);
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 27);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)*((void *)__p + 31);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (!__p[184])
      {
LABEL_13:
        uint64_t v6 = 0;
        char v7 = (std::__shared_weak_count *)*((void *)__p + 25);
        if (!v7) {
          goto LABEL_18;
        }
LABEL_16:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        goto LABEL_18;
      }
    }
    else if (!__p[184])
    {
      goto LABEL_13;
    }
    AMSCore::AwaitableMutex::unlock(*((std::mutex **)__p + 22));
    goto LABEL_13;
  }
  uint64_t v6 = *((void *)__p + 38);
  char v7 = (std::__shared_weak_count *)*((void *)__p + 25);
  if (v7) {
    goto LABEL_16;
  }
LABEL_18:
  *((void *)__p + 41) = v6;
  char v8 = (std::__shared_weak_count *)*((void *)__p + 29);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_21:
  uint64_t v9 = (char *)*((void *)__p + 7);
  if (v9 == __p + 32)
  {
    (*(void (**)(char *))(*((void *)__p + 4) + 32))(__p + 32);
  }
  else if (v9)
  {
    (*(void (**)(char *))(*(void *)v9 + 40))(v9);
  }
  uint64_t v10 = *((void *)__p + 41);
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v10 && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)__p + 41) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v11 = (std::__shared_weak_count *)*((void *)__p + 41);
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unint64_t v12 = (std::__shared_weak_count *)*((void *)__p + 36);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v13 = (std::__shared_weak_count *)*((void *)__p + 34);
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  operator delete(__p);
}

void std::shared_ptr<AMSCore::Task<void,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,void>::Promise,AMSCore::Task<void,void>::Promise::get_return_object(void)::DetachPromise,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_18DA5F3B0(void *a1)
{
  __cxa_begin_catch(a1);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 8), 2uLL)) {
    (*(void (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  __cxa_rethrow();
}

void sub_18DA5F3DC(_Unwind_Exception *a1)
{
}

uint64_t AMSCore::Logger::log<char [97]>(uint64_t result)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= 4u)
  {
    uint64_t v1 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v6);
    uint64_t v2 = *(void *)(v6[0] - 24);
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v6, (uint64_t)"Failed to fetch synchronous bag data after data source update. No mutable bag update will occur.", 96);
    uint64_t v3 = v6[6];
    uint64_t v4 = (char *)v6 + *(void *)(v6[0] - 24);
    if ((v4[32] & 5) != 0)
    {
      uint64_t v5 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v4 + 5) + 32))(&rep);
      uint64_t v5 = v13;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v10 = 4;
    uint64_t v11 = v3;
    uint64_t v12 = v5;
    (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v1 + 16) + 16))(*(void *)(v1 + 16), "bag", 3, &rep);
    v6[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v6[1] = MEMORY[0x1E4FBA470] + 16;
    if (v7 < 0) {
      operator delete((void *)v6[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v8);
  }
  return result;
}

void sub_18DA5F67C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Logger::log<char [57]>(uint64_t result)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= 2u)
  {
    uint64_t v1 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v6);
    uint64_t v2 = *(void *)(v6[0] - 24);
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v6, (uint64_t)"Finished updating mutable bags after data source update.", 56);
    uint64_t v3 = v6[6];
    uint64_t v4 = (char *)v6 + *(void *)(v6[0] - 24);
    if ((v4[32] & 5) != 0)
    {
      uint64_t v5 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v4 + 5) + 32))(&rep);
      uint64_t v5 = v13;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v10 = 2;
    uint64_t v11 = v3;
    uint64_t v12 = v5;
    (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v1 + 16) + 16))(*(void *)(v1 + 16), "bag", 3, &rep);
    v6[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v6[1] = MEMORY[0x1E4FBA470] + 16;
    if (v7 < 0) {
      operator delete((void *)v6[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v8);
  }
  return result;
}

void sub_18DA5F93C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::__expected_base<AMSCore::SynchronousBagData,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(uint64_t **)(a1 + 16);
    if (v2)
    {
      uint64_t v3 = *(uint64_t **)(a1 + 24);
      uint64_t v4 = *(void **)(a1 + 16);
      if (v3 != v2)
      {
        do
          std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v3, 0);
        while (v3 != v2);
        uint64_t v4 = *(void **)(a1 + 16);
      }
      *(void *)(a1 + 24) = v2;
      operator delete(v4);
    }
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    uint64_t v6 = **(void (***)(void))a1;
    v6();
  }
}

uint64_t AMSCore::Task<void,void>::Promise::Awaiter::await_suspend(uint64_t result)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void (**)(void))atomic_exchange((atomic_ullong *volatile)(*(void *)result + 8), 1uLL);
  if (v1)
  {
    if (v1 == (void (**)(void))2)
    {
      return (*(uint64_t (**)(uint64_t))(*(void *)result - 8))(*(void *)result - 16);
    }
    else
    {
      uint64_t v2 = *(void *)result;
      uint64_t v4 = (void *)(*(void *)result + 40);
      uint64_t v3 = (void *)*v4;
      if (*v4)
      {
        if (v3 == (void *)(v2 + 16))
        {
          uint64_t v6 = v5;
          (*(void (**)(void *, void *))(*v3 + 24))(v3, v5);
        }
        else
        {
          uint64_t v6 = (void *)*v4;
          *uint64_t v4 = 0;
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      if (v6) {
        (*(void (**)(void *))(*v6 + 48))(v6);
      }
      else {
        (*v1)(v1);
      }
      uint64_t result = (uint64_t)v6;
      if (v6 == v5)
      {
        return (*(uint64_t (**)(void *))(v5[0] + 32))(v5);
      }
      else if (v6)
      {
        return (*(uint64_t (**)(void))(*v6 + 40))();
      }
    }
  }
  return result;
}

void sub_18DA5FC08(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<AMSCore::ImmutableBag>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 104))();
}

void std::__shared_ptr_emplace<AMSCore::ImmutableBag>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83B08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::ImmutableBag>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83B08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<void,void>::Promise *,AMSCore::Task<void,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<void,void>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskIvvE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskIvvE7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskIvvE7Promise17get_return_objectEvE13DetachPromise")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskIvvE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<void,void>::Promise *,AMSCore::Task<void,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<void,void>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 8), 2uLL)) {
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::Task<void,void>::Promise *,AMSCore::Task<void,void>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<void,void>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__function::__func<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0,std::allocator<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[6];
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    unint64_t v3 = (std::__shared_weak_count *)__p[4];
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  unint64_t v3 = (std::__shared_weak_count *)__p[4];
  if (v3) {
LABEL_4:
  }
    std::__shared_weak_count::__release_weak(v3);
LABEL_5:
  uint64_t v4 = (std::__shared_weak_count *)__p[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  operator delete(__p);
}

void std::__function::__func<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0,std::allocator<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::destroy(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    unint64_t v3 = (std::__shared_weak_count *)a1[4];
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  unint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
LABEL_4:
  }
    std::__shared_weak_count::__release_weak(v3);
LABEL_5:
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void *std::__function::__func<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0,std::allocator<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::__clone(void *result, void *a2)
{
  uint64_t v3 = result[1];
  uint64_t v2 = result[2];
  *a2 = &unk_1EDC82C08;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = result[4];
  a2[3] = result[3];
  a2[4] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = result[6];
  a2[5] = result[5];
  a2[6] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0,std::allocator<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::__clone(void *a1)
{
  uint64_t result = operator new(0x38uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  *uint64_t result = &unk_1EDC82C08;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a1[4];
  result[3] = a1[3];
  result[4] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = a1[6];
  result[5] = a1[5];
  result[6] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0,std::allocator<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::~__func(void *a1)
{
  *a1 = &unk_1EDC82C08;
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[4];
    if (!v3)
    {
LABEL_5:
      uint64_t v4 = (std::__shared_weak_count *)a1[2];
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      JUMPOUT(0x192FA4080);
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[4];
    if (!v3) {
      goto LABEL_5;
    }
  }
  std::__shared_weak_count::__release_weak(v3);
  goto LABEL_5;
}

void *std::__function::__func<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0,std::allocator<AMSCore::BagService::configureMutableBagUpdateObservation(std::shared_ptr<AMSCore::ClockProvider const>)::$_0>,void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>::~__func(void *a1)
{
  *a1 = &unk_1EDC82C08;
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[4];
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
LABEL_4:
  }
    std::__shared_weak_count::__release_weak(v3);
LABEL_5:
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void AMSCore::BagService::getSynchronousBag(uint64_t a1)
{
  uint64_t v2 = a1 + 280;
  uint64_t v3 = a1 + 152;
  uint64_t v4 = a1 + 16;
  if (*(unsigned char *)(a1 + 464))
  {
LABEL_2:
    uint64_t v5 = *(void **)(a1 + 448);
    *(void *)(a1 + 376) = v5 + 8;
    *(unsigned char *)(a1 + 384) = 1;
    uint64_t v6 = std::__hash_table<std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,std::__unordered_map_hasher<AMSCore::SynchronousBagPolicy,std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,AMSCore::SynchronousBagPolicy::Hasher,std::equal_to<AMSCore::SynchronousBagPolicy>,true>,std::__unordered_map_equal<AMSCore::SynchronousBagPolicy,std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,std::equal_to<AMSCore::SynchronousBagPolicy>,AMSCore::SynchronousBagPolicy::Hasher,true>,std::allocator<std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>>>::find<AMSCore::SynchronousBagPolicy>(v5, (unsigned __int8 *)(a1 + 232));
    uint64_t v7 = v6;
    if (v6)
    {
      if (*(unsigned char *)(a1 + 224))
      {
        uint64_t v8 = v6[8];
        long long v9 = *(_OWORD *)(a1 + 152);
        *(void *)uint64_t v3 = 0;
        *(void *)(v3 + 8) = 0;
        long long v10 = *(_OWORD *)(a1 + 168);
        *(_OWORD *)uint64_t v2 = v9;
        *(_OWORD *)(v2 + 16) = v10;
        *(void *)(a1 + 168) = 0;
        *(void *)(a1 + 176) = 0;
        uint64_t v11 = *(void *)(a1 + 184);
        uint64_t v12 = *(void *)(a1 + 192);
        *(void *)(a1 + 184) = 0;
        *(void *)(a1 + 312) = v11;
        *(void *)(a1 + 320) = v12;
        AMSCore::MutableBag::setBagData(v8, (long long *)v2);
        uint64_t v13 = *(uint64_t **)(a1 + 296);
        if (v13)
        {
          uint64_t v14 = *(uint64_t **)(a1 + 304);
          uint64_t v15 = *(void **)(a1 + 296);
          if (v14 != v13)
          {
            do
              std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v14, 0);
            while (v14 != v13);
            uint64_t v15 = *(void **)(v2 + 16);
          }
          *(void *)(a1 + 304) = v13;
          operator delete(v15);
        }
        char v16 = *(std::__shared_weak_count **)(a1 + 288);
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        if (*(unsigned char *)(a1 + 104))
        {
          if (*(unsigned char *)(a1 + 96))
          {
            uint64_t v17 = *(std::__shared_weak_count **)(a1 + 32);
            if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
          else
          {
            (**(void (***)(void))(a1 + 24))();
          }
          *(unsigned char *)(a1 + 104) = 0;
        }
        *(void *)(a1 + 24) = v7[8];
        uint64_t v36 = v7[9];
        *(void *)(a1 + 32) = v36;
        if (v36) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
        }
        *(unsigned char *)(a1 + 96) = 1;
        *(unsigned char *)(a1 + 104) = 1;
        uint64_t v27 = *(void *)(a1 + 424);
        if (!*(unsigned char *)(a1 + 384)) {
          goto LABEL_87;
        }
        goto LABEL_86;
      }
    }
    else if (*(unsigned char *)(a1 + 224))
    {
      uint64_t v23 = (char *)operator new(0xD8uLL);
      *((void *)v23 + 1) = 0;
      *((void *)v23 + 2) = 0;
      *(void *)uint64_t v23 = &unk_1EDC83A28;
      size_t v24 = (std::runtime_error_vtbl *)std::construct_at[abi:fe180100]<AMSCore::MutableBag,AMSCore::SynchronousBagData,AMSCore::MutableBag*>((uint64_t)(v23 + 24), (long long *)v3);
      uint64_t v25 = *(uint64_t **)(a1 + 448);
      v69.__vftable = v24;
      v69.__imp_.__imp_ = v23;
      std::__hash_table<std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,std::__unordered_map_hasher<AMSCore::SynchronousBagPolicy,std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,AMSCore::SynchronousBagPolicy::Hasher,std::equal_to<AMSCore::SynchronousBagPolicy>,true>,std::__unordered_map_equal<AMSCore::SynchronousBagPolicy,std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,std::equal_to<AMSCore::SynchronousBagPolicy>,AMSCore::SynchronousBagPolicy::Hasher,true>,std::allocator<std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>>>::__emplace_unique_key_args<AMSCore::SynchronousBagPolicy,AMSCore::SynchronousBagPolicy&,std::shared_ptr<AMSCore::MutableBag>&>(v25, (unsigned __int8 *)(a1 + 232), (_OWORD *)(a1 + 232), &v69);
      uint64_t v26 = *(void *)(a1 + 448);
      uint64_t v27 = *(void *)(a1 + 424);
      if (!*(unsigned char *)(v26 + 56))
      {
        size_t v28 = *(uint64_t **)(a1 + 408);
        *(void *)(a1 + 392) = *(void *)(a1 + 416);
        *(void *)(a1 + 400) = v27;
        AMSCore::BagService::configureMutableBagUpdateObservation(v63, v28, (long long *)(a1 + 392));
        int v29 = v63[0].__vftable;
        if (*(unsigned char *)(v26 + 56))
        {
          char imp = v63[0].__imp_.__imp_;
          v63[0].__vftable = 0;
          v63[0].__imp_.__imp_ = 0;
          size_t v31 = *(std::__shared_weak_count **)(v26 + 48);
          *(void *)(v26 + 40) = v29;
          *(void *)(v26 + 48) = imp;
          if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        else
        {
          size_t v56 = v63[0].__imp_.__imp_;
          *(void *)(v26 + 40) = v63[0].__vftable;
          *(void *)(v26 + 48) = v56;
          v63[0].__vftable = 0;
          v63[0].__imp_.__imp_ = 0;
          *(unsigned char *)(v26 + 56) = 1;
        }
        size_t v57 = (std::__shared_weak_count *)v63[0].__imp_.__imp_;
        if (v63[0].__imp_.__imp_
          && !atomic_fetch_add((atomic_ullong *volatile)v63[0].__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
        size_t v58 = *(std::__shared_weak_count **)(a1 + 400);
        if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
        uint64_t v27 = 0;
      }
      if (*(unsigned char *)(a1 + 104))
      {
        if (*(unsigned char *)(a1 + 96))
        {
          int v59 = *(std::__shared_weak_count **)(a1 + 32);
          if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        else
        {
          (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
        }
      }
      *(std::runtime_error *)(a1 + 24) = v69;
      *(unsigned char *)(a1 + 96) = 1;
      *(unsigned char *)(a1 + 104) = 1;
      if (!*(unsigned char *)(a1 + 384)) {
        goto LABEL_87;
      }
LABEL_86:
      AMSCore::AwaitableMutex::unlock(*(std::mutex **)(a1 + 376));
LABEL_87:
      std::__expected_base<AMSCore::SynchronousBagData,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100](v3);
      *(void *)(a1 + 456) = v27;
      *(void *)(a1 + 152) = v4;
      *(void *)a1 = 0;
      AMSCore::Task<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>::Promise::Awaiter::await_suspend(v3);
      return;
    }
    goto LABEL_94;
  }
  uint64_t v18 = *(void *)(a1 + 432);
  if (!*(unsigned char *)(v18 + 88))
  {
LABEL_94:
    __break(1u);
    return;
  }
  char v19 = (const std::runtime_error *)(v18 + 8);
  char v20 = *(unsigned char *)(v18 + 80);
  long long v21 = (std::runtime_error *)(a1 + 168);
  uint64_t v22 = (std::runtime_error *)(v18 + 24);
  if (v20)
  {
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(v18 + 8);
    v19->__vftable = 0;
    *(void *)(v18 + 16) = 0;
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(v18 + 24);
    *(void *)(a1 + 184) = *(void *)(v18 + 40);
    *(void *)(v18 + 32) = 0;
    *(void *)(v18 + 40) = 0;
    v22->__vftable = 0;
    *(void *)(a1 + 192) = *(void *)(v18 + 48);
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 152), v19);
    *long long v21 = *v22;
    size_t v32 = (void *)(v18 + 48);
    uint64_t v33 = *(void *)(v18 + 48);
    *(void *)(a1 + 192) = v33;
    uint64_t v34 = a1 + 192;
    *(void *)(a1 + 152) = &unk_1EDC827D8;
    *(void *)(a1 + 184) = *(void *)(v18 + 40);
    uint64_t v35 = *(void *)(v18 + 56);
    *(void *)(a1 + 200) = v35;
    if (v35)
    {
      *(void *)(v33 + 16) = v34;
      *(void *)(v18 + 40) = v32;
      *size_t v32 = 0;
      *(void *)(v18 + 56) = 0;
    }
    else
    {
      *(void *)(a1 + 184) = v34;
    }
    uint64_t v37 = *(void *)(a1 + 432);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(v37 + 64);
    *(void *)(v37 + 64) = 0;
    *(void *)(v37 + 72) = 0;
  }
  *(unsigned char *)(a1 + 224) = v20;
  uint64_t v38 = *(void *)(a1 + 440);
  if (v38 && !atomic_fetch_add((atomic_ullong *volatile)(v38 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v39 = *(std::__shared_weak_count **)(a1 + 440);
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  long long v40 = *(std::__shared_weak_count **)(a1 + 384);
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
    long long v41 = *(std::__shared_weak_count **)(a1 + 368);
    if (!v41)
    {
LABEL_43:
      if (*(unsigned char *)(a1 + 224)) {
        goto LABEL_44;
      }
LABEL_53:
      std::runtime_error::runtime_error(v63, (const std::runtime_error *)v3);
      v63[1] = *v21;
      size_t v45 = (void *)(a1 + 192);
      uint64_t v46 = *(void *)(a1 + 192);
      uint64_t v47 = *(unsigned int ***)(a1 + 184);
      v63[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v64 = v47;
      int v65 = (unsigned int *)v46;
      if (*(void *)(a1 + 200))
      {
        *(void *)(v46 + 16) = &v65;
        *(void *)(a1 + 184) = v45;
        *size_t v45 = 0;
        *(void *)(a1 + 200) = 0;
      }
      else
      {
        uint64_t v64 = &v65;
      }
      long long v67 = *(_OWORD *)(a1 + 208);
      *(void *)(a1 + 208) = 0;
      *(void *)(a1 + 216) = 0;
      char v68 = 1;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v69, (uint64_t)v63);
      std::optional<std::expected<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(a1 + 24), &v69);
      v69.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      long long v54 = v71;
      if (v71 && !atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v70, v70[1]);
      MEMORY[0x192FA3C30](&v69);
      if (v68)
      {
        v63[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        int v55 = (std::__shared_weak_count *)*((void *)&v67 + 1);
        if (*((void *)&v67 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v67 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v64, v65);
        MEMORY[0x192FA3C30](v63);
      }
      uint64_t v27 = *(void *)(a1 + 424);
      goto LABEL_87;
    }
  }
  else
  {
    long long v41 = *(std::__shared_weak_count **)(a1 + 368);
    if (!v41) {
      goto LABEL_43;
    }
  }
  if (atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_43;
  }
  ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
  std::__shared_weak_count::__release_weak(v41);
  if (!*(unsigned char *)(a1 + 224)) {
    goto LABEL_53;
  }
LABEL_44:
  int v42 = *(_DWORD *)(a1 + 272);
  if (!v42)
  {
    size_t v48 = operator new(0x50uLL);
    v48[1] = 0;
    v48[2] = 0;
    *size_t v48 = &unk_1EDC83B08;
    long long v49 = *(_OWORD *)(a1 + 168);
    uint64_t v50 = *(void *)(a1 + 184);
    uint64_t v51 = *(void *)(a1 + 192);
    *(void *)(a1 + 176) = 0;
    *(void *)(a1 + 184) = 0;
    v21->__vftable = 0;
    long long v52 = *(_OWORD *)(a1 + 152);
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    v48[3] = &unk_1EDC81A58;
    *((_OWORD *)v48 + 2) = v52;
    *((_OWORD *)v48 + 3) = v49;
    v48[8] = v50;
    v48[9] = v51;
    if (*(unsigned char *)(a1 + 104))
    {
      if (*(unsigned char *)(a1 + 96))
      {
        uint64_t v53 = *(std::__shared_weak_count **)(a1 + 32);
        if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      else
      {
        (**(void (***)(void))(a1 + 24))();
      }
    }
    *(void *)(a1 + 24) = v48 + 3;
    *(void *)(a1 + 32) = v48;
    *(unsigned char *)(a1 + 96) = 1;
    *(unsigned char *)(a1 + 104) = 1;
    goto LABEL_93;
  }
  if (v42 != 1)
  {
LABEL_93:
    uint64_t v27 = *(void *)(a1 + 424);
    goto LABEL_87;
  }
  uint64_t v43 = *(void *)(*(void *)(a1 + 408) + 16);
  *(void *)(a1 + 448) = v43;
  if ((atomic_exchange_explicit((atomic_uchar *volatile)(v43 + 128), 1u, memory_order_acquire) & 1) == 0) {
    goto LABEL_2;
  }
  *(unsigned char *)(v2 + 184) = 1;
  std::mutex::lock((std::mutex *)(*(void *)(a1 + 448) + 64));
  uint64_t v44 = *(void *)(a1 + 448);
  if (!*(void *)(v44 + 152)
    && (atomic_exchange_explicit((atomic_uchar *volatile)(v44 + 128), 1u, memory_order_release) & 1) == 0)
  {
    std::mutex::unlock((std::mutex *)(*(void *)(a1 + 448) + 64));
    goto LABEL_2;
  }
  int v60 = operator new(0x18uLL);
  BOOL v61 = (std::mutex *)(*(void *)(a1 + 448) + 64);
  v60[1] = v44 + 136;
  v60[2] = a1;
  uint64_t v62 = *(void *)(v44 + 136);
  *int v60 = v62;
  *(void *)(v62 + 8) = v60;
  *(void *)(v44 + 136) = v60;
  ++*(void *)(v44 + 152);
  std::mutex::unlock(v61);
}

void sub_18DA60B28(void *a1)
{
  std::__expected_base<AMSCore::SynchronousBagData,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100](v1);
  __cxa_begin_catch(a1);
  AMSCore::Task<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DA60B90()
{
}

void AMSCore::BagService::getSynchronousBag(void *a1)
{
  uint64_t v2 = (uint64_t)a1 + 16;
  if (*(void *)a1)
  {
    if (*((unsigned char *)a1 + 464))
    {
      uint64_t v3 = (std::__shared_weak_count *)*((void *)a1 + 53);
      std::__expected_base<AMSCore::SynchronousBagData,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100]((uint64_t)a1 + 152);
    }
    else
    {
      uint64_t v4 = *((void *)a1 + 55);
      if (v4 && !atomic_fetch_add((atomic_ullong *volatile)(v4 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v5 = (std::__shared_weak_count *)*((void *)a1 + 55);
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      uint64_t v6 = (std::__shared_weak_count *)*((void *)a1 + 48);
      if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      uint64_t v7 = (std::__shared_weak_count *)*((void *)a1 + 46);
      if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      uint64_t v3 = (std::__shared_weak_count *)*((void *)a1 + 53);
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)a1 + 57);
  }
  AMSCore::Task<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>::Promise::~Promise(v2);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  operator delete(a1);
}

std::runtime_error *std::optional<std::expected<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>(std::runtime_error *this, std::runtime_error *a2)
{
  if (LOBYTE(this[5].__vftable))
  {
    if (LOBYTE(this[4].__imp_.__imp_))
    {
      char imp = (std::__shared_weak_count *)this->__imp_.__imp_;
      if (imp && !atomic_fetch_add(&imp->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
        std::__shared_weak_count::__release_weak(imp);
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))this->~runtime_error)(this);
    }
    LOBYTE(this[5].__vftable) = 0;
  }
  std::runtime_error::runtime_error(this, a2);
  this->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA448] + 16);
  this[1] = a2[1];
  this->__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  this[2].__vftable = a2[2].__vftable;
  p_char imp = (std::runtime_error_vtbl *)&a2[2].__imp_;
  uint64_t v6 = a2[2].__imp_.__imp_;
  this[2].__imp_.__imp_ = v6;
  uint64_t v7 = (std::runtime_error_vtbl *)&this[2].__imp_;
  uint64_t v8 = a2[3].__vftable;
  this[3].__vftable = v8;
  if (v8)
  {
    *((void *)v6 + 2) = v7;
    a2[2].__vftable = p_imp;
    p_imp->~runtime_error = 0;
    a2[3].__vftable = 0;
  }
  else
  {
    this[2].__vftable = v7;
  }
  *(std::runtime_error *)((char *)this + 56) = *(std::runtime_error *)((char *)a2 + 56);
  a2[3].__imp_.__imp_ = 0;
  a2[4].__vftable = 0;
  LOBYTE(this[4].__imp_.__imp_) = 0;
  LOBYTE(this[5].__vftable) = 1;
  return this;
}

uint64_t *std::__hash_table<std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,std::__unordered_map_hasher<AMSCore::SynchronousBagPolicy,std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,AMSCore::SynchronousBagPolicy::Hasher,std::equal_to<AMSCore::SynchronousBagPolicy>,true>,std::__unordered_map_equal<AMSCore::SynchronousBagPolicy,std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,std::equal_to<AMSCore::SynchronousBagPolicy>,AMSCore::SynchronousBagPolicy::Hasher,true>,std::allocator<std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>>>::find<AMSCore::SynchronousBagPolicy>(void *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *((unsigned int *)a2 + 8);
  if (v2 == -1) {
    std::__throw_bad_variant_access[abi:fe180100]();
  }
  uint64_t v5 = *a2;
  uint64_t v6 = *((int *)a2 + 10);
  uint64_t v26 = &v25;
  uint64_t v7 = a2 + 16;
  uint64_t v8 = ((uint64_t (*)(char **, unsigned __int8 *))off_1EDCA54C0[v2])(&v26, a2 + 16);
  int8x8_t v9 = (int8x8_t)a1[1];
  if (!*(void *)&v9) {
    return 0;
  }
  unint64_t v10 = (v5 | (2 * v6)) ^ (2 * v8);
  uint8x8_t v11 = (uint8x8_t)vcnt_s8(v9);
  v11.i16[0] = vaddlv_u8(v11);
  unint64_t v12 = v11.u32[0];
  if (v11.u32[0] > 1uLL)
  {
    unint64_t v13 = v10;
    if (v10 >= *(void *)&v9) {
      unint64_t v13 = v10 % *(void *)&v9;
    }
  }
  else
  {
    unint64_t v13 = v10 & (*(void *)&v9 - 1);
  }
  uint64_t v14 = *(uint64_t ***)(*a1 + 8 * v13);
  if (!v14) {
    return 0;
  }
  for (uint64_t i = *v14; i; uint64_t i = (uint64_t *)*i)
  {
    unint64_t v16 = i[1];
    if (v16 == v10)
    {
      if (*((unsigned __int8 *)i + 16) == *a2 && *((_DWORD *)i + 14) == *((_DWORD *)a2 + 10))
      {
        uint64_t v17 = *((unsigned int *)i + 12);
        int v18 = *((_DWORD *)a2 + 8);
        BOOL v20 = v18 == v17 && v18 != -1;
        if (v17 == -1 || !v20)
        {
          BOOL v22 = v18 == -1;
          if (v17 == -1) {
            char v23 = v22;
          }
          else {
            char v23 = v20;
          }
          if (v23) {
            return i;
          }
        }
        else
        {
          uint64_t v26 = &v25;
          if (((uint64_t (*)(char **, uint64_t *, unsigned __int8 *))off_1EDCA54B0[v17])(&v26, i + 4, v7)) {
            return i;
          }
        }
      }
    }
    else
    {
      if (v12 <= 1)
      {
        v16 &= *(void *)&v9 - 1;
      }
      else if (v16 >= *(void *)&v9)
      {
        v16 %= *(void *)&v9;
      }
      if (v16 != v13) {
        return 0;
      }
    }
  }
  return i;
}

uint64_t std::construct_at[abi:fe180100]<AMSCore::MutableBag,AMSCore::SynchronousBagData,AMSCore::MutableBag*>(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  long long v4 = a2[1];
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v10 = v3;
  long long v9 = v4;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  uint64_t v5 = *((void *)a2 + 4);
  uint64_t v6 = *((void *)a2 + 5);
  *((void *)a2 + 4) = 0;
  *(void *)a1 = &unk_1EDC819D0;
  uint64_t v7 = operator new(0x50uLL);
  v7[1] = 0;
  v7[2] = 0;
  *uint64_t v7 = &unk_1EDC83B08;
  v7[3] = &unk_1EDC81A58;
  *((_OWORD *)v7 + 2) = v10;
  *((_OWORD *)v7 + 3) = v9;
  v7[8] = v5;
  v7[9] = v6;
  *(void *)(a1 + 8) = v7 + 3;
  *(void *)(a1 + 16) = v7;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)(a1 + 24));
  return a1;
}

void sub_18DA6112C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  uint64_t v7 = *(std::__shared_weak_count **)(v5 + 16);
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  AMSCore::SynchronousBagData::~SynchronousBagData((AMSCore::SynchronousBagData *)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,std::__unordered_map_hasher<AMSCore::SynchronousBagPolicy,std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,AMSCore::SynchronousBagPolicy::Hasher,std::equal_to<AMSCore::SynchronousBagPolicy>,true>,std::__unordered_map_equal<AMSCore::SynchronousBagPolicy,std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,std::equal_to<AMSCore::SynchronousBagPolicy>,AMSCore::SynchronousBagPolicy::Hasher,true>,std::allocator<std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>>>::__emplace_unique_key_args<AMSCore::SynchronousBagPolicy,AMSCore::SynchronousBagPolicy&,std::shared_ptr<AMSCore::MutableBag>&>(uint64_t *a1, unsigned __int8 *a2, _OWORD *a3, void *a4)
{
  uint64_t v5 = *((unsigned int *)a2 + 8);
  if (v5 == -1) {
    std::__throw_bad_variant_access[abi:fe180100]();
  }
  unint64_t v10 = *a2 | (unint64_t)(2 * *((int *)a2 + 10));
  v60[0] = &v62;
  uint8x8_t v11 = a2 + 16;
  unint64_t v12 = v10 ^ (2 * ((uint64_t (*)(void *, unsigned __int8 *))off_1EDCA54C0[v5])(v60, a2 + 16));
  unint64_t v13 = a1[1];
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    unint64_t v15 = v14.u32[0];
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v4 = v12;
      if (v12 >= v13) {
        unint64_t v4 = v12 % v13;
      }
    }
    else
    {
      unint64_t v4 = v12 & (v13 - 1);
    }
    unint64_t v16 = *(uint64_t ***)(*a1 + 8 * v4);
    if (v16)
    {
      uint64_t v17 = *v16;
      if (*v16)
      {
        unint64_t v18 = v13 - 1;
        int v59 = a3;
        do
        {
          unint64_t v19 = v17[1];
          if (v19 == v12)
          {
            if (*((unsigned __int8 *)v17 + 16) == *a2 && *((_DWORD *)v17 + 14) == *((_DWORD *)a2 + 10))
            {
              uint64_t v20 = *((unsigned int *)v17 + 12);
              int v21 = *((_DWORD *)a2 + 8);
              BOOL v23 = v21 == v20 && v21 != -1;
              if (v20 == -1 || !v23)
              {
                BOOL v25 = v21 == -1;
                if (v20 == -1) {
                  char v26 = v25;
                }
                else {
                  char v26 = v23;
                }
                if (v26) {
                  return;
                }
              }
              else
              {
                v60[0] = &v62;
                uint64_t v27 = v11;
                unint64_t v28 = v12;
                int v29 = v11;
                int v30 = a4;
                unint64_t v31 = v18;
                char v32 = ((uint64_t (*)(void *, uint64_t *, unsigned __int8 *))off_1EDCA54B0[v20])(v60, v17 + 4, v27);
                unint64_t v18 = v31;
                a4 = v30;
                uint8x8_t v11 = v29;
                unint64_t v12 = v28;
                a3 = v59;
                if (v32) {
                  return;
                }
              }
            }
          }
          else
          {
            if (v15 <= 1)
            {
              v19 &= v18;
            }
            else if (v19 >= v13)
            {
              v19 %= v13;
            }
            if (v19 != v4) {
              break;
            }
          }
          uint64_t v17 = (uint64_t *)*v17;
        }
        while (v17);
      }
    }
  }
  uint64_t v33 = a1 + 2;
  uint64_t v34 = operator new(0x50uLL);
  v60[0] = v34;
  v60[1] = a1 + 2;
  *uint64_t v34 = 0;
  v34[1] = v12;
  long long v35 = a3[1];
  *((_OWORD *)v34 + 1) = *a3;
  *((_OWORD *)v34 + 2) = v35;
  *((_OWORD *)v34 + 3) = a3[2];
  uint64_t v36 = a4[1];
  v34[8] = *a4;
  v34[9] = v36;
  if (v36) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
  }
  char v61 = 1;
  float v37 = (float)(unint64_t)(a1[3] + 1);
  float v38 = *((float *)a1 + 8);
  if (!v13 || (float)(v38 * (float)v13) < v37)
  {
    BOOL v39 = 1;
    if (v13 >= 3) {
      BOOL v39 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v40 = v39 | (2 * v13);
    unint64_t v41 = vcvtps_u32_f32(v37 / v38);
    if (v40 <= v41) {
      int8x8_t prime = (int8x8_t)v41;
    }
    else {
      int8x8_t prime = (int8x8_t)v40;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v13 = a1[1];
    if (*(void *)&prime > v13) {
      goto LABEL_52;
    }
    if (*(void *)&prime < v13)
    {
      unint64_t v49 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v13 < 3 || (uint8x8_t v50 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v50.i16[0] = vaddlv_u8(v50), v50.u32[0] > 1uLL))
      {
        unint64_t v49 = std::__next_prime(v49);
      }
      else
      {
        uint64_t v51 = 1 << -(char)__clz(v49 - 1);
        if (v49 >= 2) {
          unint64_t v49 = v51;
        }
      }
      if (*(void *)&prime <= v49) {
        int8x8_t prime = (int8x8_t)v49;
      }
      if (*(void *)&prime >= v13)
      {
        unint64_t v13 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_52:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:fe180100]();
          }
          uint64_t v43 = operator new(8 * *(void *)&prime);
          uint64_t v44 = (void *)*a1;
          *a1 = (uint64_t)v43;
          if (v44) {
            operator delete(v44);
          }
          uint64_t v45 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v45++) = 0;
          while (*(void *)&prime != v45);
          uint64_t v46 = (void *)*v33;
          if (*v33)
          {
            unint64_t v47 = v46[1];
            uint8x8_t v48 = (uint8x8_t)vcnt_s8(prime);
            v48.i16[0] = vaddlv_u8(v48);
            if (v48.u32[0] > 1uLL)
            {
              if (v47 >= *(void *)&prime) {
                v47 %= *(void *)&prime;
              }
            }
            else
            {
              v47 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v47) = v33;
            long long v52 = (void *)*v46;
            if (*v46)
            {
              do
              {
                unint64_t v54 = v52[1];
                if (v48.u32[0] > 1uLL)
                {
                  if (v54 >= *(void *)&prime) {
                    v54 %= *(void *)&prime;
                  }
                }
                else
                {
                  v54 &= *(void *)&prime - 1;
                }
                if (v54 != v47)
                {
                  if (!*(void *)(*a1 + 8 * v54))
                  {
                    *(void *)(*a1 + 8 * v54) = v46;
                    goto LABEL_72;
                  }
                  *uint64_t v46 = *v52;
                  uint64_t v53 = 8 * v54;
                  *long long v52 = **(void **)(*a1 + v53);
                  **(void **)(*a1 + v53) = v52;
                  long long v52 = v46;
                }
                unint64_t v54 = v47;
LABEL_72:
                uint64_t v46 = v52;
                long long v52 = (void *)*v52;
                unint64_t v47 = v54;
              }
              while (v52);
            }
          }
          unint64_t v13 = (unint64_t)prime;
          goto LABEL_81;
        }
        size_t v58 = (void *)*a1;
        *a1 = 0;
        if (v58) {
          operator delete(v58);
        }
        unint64_t v13 = 0;
        a1[1] = 0;
      }
    }
LABEL_81:
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13) {
        unint64_t v4 = v12 % v13;
      }
      else {
        unint64_t v4 = v12;
      }
    }
    else
    {
      unint64_t v4 = (v13 - 1) & v12;
    }
  }
  uint64_t v55 = *a1;
  size_t v56 = *(void **)(*a1 + 8 * v4);
  if (v56)
  {
    *uint64_t v34 = *v56;
LABEL_94:
    *size_t v56 = v34;
    goto LABEL_95;
  }
  *uint64_t v34 = *v33;
  void *v33 = v34;
  *(void *)(v55 + 8 * v4) = v33;
  if (*v34)
  {
    unint64_t v57 = *(void *)(*v34 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v57 >= v13) {
        v57 %= v13;
      }
    }
    else
    {
      v57 &= v13 - 1;
    }
    size_t v56 = (void *)(*a1 + 8 * v57);
    goto LABEL_94;
  }
LABEL_95:
  ++a1[3];
}

void sub_18DA61690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,void *>>>>::~unique_ptr[abi:fe180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::optional<AMSCore::Subject<AMSCore::MapUtils::UpdateDiff<std::string>>::ObserverToken>::operator=[abi:fe180100]<AMSCore::Subject<AMSCore::MapUtils::UpdateDiff<std::string>>::ObserverToken,void>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v4 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = v4;
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    uint64_t v6 = a2[1];
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = v6;
    *a2 = 0;
    a2[1] = 0;
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

void AMSCore::Task<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>::Promise::unhandled_exception()
{
  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

uint64_t sub_18DA61760(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v36, (uint64_t)v33);
  std::optional<std::expected<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>(v29, v36);
  v36[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  int v30 = v38;
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v37, v37[1]);
  MEMORY[0x192FA3C30](v36);
  v33[0] = &unk_1EDC827D8;
  unint64_t v31 = v35;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v34, v34[1]);
  return MEMORY[0x192FA3C30](v33);
}

uint64_t AMSCore::Task<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>::Promise::Awaiter::await_suspend(uint64_t result)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void (**)(void))atomic_exchange((atomic_ullong *volatile)(*(void *)result + 96), 1uLL);
  if (v1)
  {
    uint64_t v2 = result;
    if (v1 == (void (**)(void))2) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result - 8))(*(void *)result - 16);
    }
    uint64_t v3 = (uint64_t *)(*(void *)result + 128);
    uint64_t result = *v3;
    if (*v3)
    {
      if (result == *(void *)v2 + 104)
      {
        size_t v24 = v23;
        uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 24))(result, v23);
      }
      else
      {
        size_t v24 = *(void **)(*(void *)v2 + 128);
        *uint64_t v3 = 0;
      }
    }
    else
    {
      size_t v24 = 0;
    }
    if (v24)
    {
      uint64_t v4 = *(void *)v2;
      if (!*(unsigned char *)(*(void *)v2 + 88))
      {
        __break(1u);
        return result;
      }
      uint64_t v5 = (const std::runtime_error *)(v4 + 8);
      char v6 = *(unsigned char *)(v4 + 80);
      if (v6)
      {
        v15.__vftable = *(std::runtime_error_vtbl **)(v4 + 8);
        p_char imp = &v15.__imp_;
        uint64_t v8 = (const char **)(v4 + 16);
      }
      else
      {
        std::runtime_error::runtime_error(&v15, v5);
        long long v9 = (void *)(v4 + 48);
        uint64_t v10 = *(void *)(v4 + 48);
        long long v16 = *(_OWORD *)(v4 + 24);
        uint8x8_t v11 = *(uint64_t **)(v4 + 40);
        v15.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        uint64_t v17 = v11;
        uint64_t v18 = v10;
        if (*(void *)(v4 + 56))
        {
          *(void *)(v10 + 16) = &v18;
          *(void *)(v4 + 40) = v9;
          *long long v9 = 0;
          *(void *)(v4 + 56) = 0;
        }
        else
        {
          uint64_t v17 = &v18;
        }
        uint64_t v13 = *(void *)(v4 + 64);
        unint64_t v12 = (const std::runtime_error *)(v4 + 64);
        uint64_t v20 = v13;
        p_char imp = (std::__libcpp_refstring *)&v21;
        uint64_t v8 = &v12->__imp_.__imp_;
        uint64_t v5 = v12;
      }
      p_imp->__imp_ = *v8;
      v5->__vftable = 0;
      v5->__imp_.__imp_ = 0;
      char v22 = v6;
      if (!v24) {
        std::__throw_bad_function_call[abi:fe180100]();
      }
      (*(void (**)(void *, std::runtime_error *))(*v24 + 48))(v24, &v15);
      if (v22)
      {
        char imp = (std::__shared_weak_count *)v15.__imp_.__imp_;
        if (v15.__imp_.__imp_
          && !atomic_fetch_add((atomic_ullong *volatile)v15.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
          std::__shared_weak_count::__release_weak(imp);
        }
      }
      else
      {
        ((void (*)(std::runtime_error *))v15.~runtime_error)(&v15);
      }
    }
    else
    {
      (*v1)(v1);
    }
    uint64_t result = (uint64_t)v24;
    if (v24 == v23)
    {
      return (*(uint64_t (**)(void *))(v23[0] + 32))(v23);
    }
    else if (v24)
    {
      return (*(uint64_t (**)(void))(*v24 + 40))();
    }
  }
  return result;
}

void sub_18DA61B68(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AMSCore::Task<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>::Promise::~Promise(uint64_t a1)
{
  uint64_t v2 = a1 + 104;
  uint64_t v3 = *(void *)(a1 + 128);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    if (!*(unsigned char *)(a1 + 88)) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  if (*(unsigned char *)(a1 + 88))
  {
LABEL_7:
    if (*(unsigned char *)(a1 + 80))
    {
      uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
      if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    else
    {
      (**(void (***)(void))(a1 + 8))();
    }
  }
LABEL_12:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMSCore::SynchronousBagPolicy,std::shared_ptr<AMSCore::MutableBag>>,void *>>>>::~unique_ptr[abi:fe180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (std::__shared_weak_count *)v2[9];
      if (v3)
      {
        if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

void AMSCore::SynchronousBagData::~SynchronousBagData(AMSCore::SynchronousBagData *this)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = (uint64_t *)*((void *)this + 3);
    uint64_t v4 = (void *)*((void *)this + 2);
    if (v3 != v2)
    {
      do
        std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v3, 0);
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 2);
    }
    *((void *)this + 3) = v2;
    operator delete(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

uint64_t std::__shared_ptr_emplace<AMSCore::MutableBag>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 104))();
}

void std::__shared_ptr_emplace<AMSCore::MutableBag>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83A28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::MutableBag>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83A28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>::Promise *,AMSCore::Task<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINSt3__110shared_ptrINS_4IBagEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINSt3__110shared_ptrINS_4IBagEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINSt3__110shared_ptrINS_4IBagEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINSt3__110shared_ptrINS_4IBagEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>::Promise *,AMSCore::Task<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 96), 2uLL)) {
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>::Promise *,AMSCore::Task<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void *AMSCore::BagDataAccessor::getValue(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  int v7 = *((char *)a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *a2;
  }
  if (v7 >= 0) {
    unint64_t v9 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    unint64_t v9 = (unint64_t)a2[1];
  }
  AMSCore::getValueByKey((uint64_t)v29, a3, v8, v9);
  if (!v32)
  {
    if (v31 != &AMSCore::Error::Category::generic(void)::instance || v30 != 12)
    {
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v23, (uint64_t)v29);
      std::runtime_error::runtime_error((std::runtime_error *)a1, &v23);
      *(_OWORD *)(a1 + 16) = v24;
      *(void *)a1 = &unk_1EDC827D8;
      uint64_t v17 = v26;
      *(void *)(a1 + 32) = v25;
      *(void *)(a1 + 40) = v17;
      uint64_t v18 = a1 + 40;
      uint64_t v19 = v27;
      *(void *)(a1 + 48) = v27;
      if (v19)
      {
        *(void *)(v17 + 16) = v18;
        uint64_t v25 = &v26;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        uint64_t v17 = 0;
      }
      else
      {
        *(void *)(a1 + 32) = v18;
      }
      *(_OWORD *)(a1 + 56) = v28;
      long long v28 = 0uLL;
      *(unsigned char *)(a1 + 72) = 0;
      v23.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v25, (unsigned int *)v17);
      uint64_t result = (void *)MEMORY[0x192FA3C30](&v23);
      goto LABEL_35;
    }
    uint64_t v14 = *(void *)(a4 + 24);
    if (v14)
    {
      uint64_t result = (*(void *(**)(void *__return_ptr))(*(void *)v14 + 48))(v21);
      int v15 = v22;
      if (v22 != -1 && (_BYTE)v22)
      {
        LOBYTE(v23.__vftable) = 0;
        DWORD2(v24) = -1;
        ((void (*)(char *, std::runtime_error *, void *))off_1EDCA5520[v22])(&v33, &v23, v21);
        DWORD2(v24) = v15;
        if (v22)
        {
          if (v22 != -1)
          {
            ((void (*)(char *, void *))off_1EDCA54D0[v22])(&v33, v21);
            int v15 = DWORD2(v24);
            int v22 = 0;
            LOBYTE(v25) = 1;
            *(unsigned char *)a1 = 0;
            *(_DWORD *)(a1 + 24) = -1;
            long long v16 = (_DWORD *)(a1 + 24);
            if (v15 == -1) {
              goto LABEL_42;
            }
            goto LABEL_39;
          }
          int v22 = 0;
        }
        LOBYTE(v25) = 1;
        *(unsigned char *)a1 = 0;
        *(_DWORD *)(a1 + 24) = -1;
        long long v16 = (_DWORD *)(a1 + 24);
LABEL_39:
        ((void (*)(char *, uint64_t, std::runtime_error *))off_1EDCA5520[v15])(&v33, a1, &v23);
        *long long v16 = v15;
        if (DWORD2(v24) != -1)
        {
          if (!DWORD2(v24)) {
            goto LABEL_43;
          }
          ((void (*)(char *, std::runtime_error *))off_1EDCA54D0[DWORD2(v24)])(&v33, &v23);
        }
LABEL_42:
        DWORD2(v24) = 0;
LABEL_43:
        *(unsigned char *)(a1 + 32) = (_BYTE)v25;
        *(unsigned char *)(a1 + 72) = 1;
        uint64_t result = (void *)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8fe180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8fe180100EvEUlRT_E_JRNS0_6__baseILS12_1EJS8_bdxySE_SG_SO_SX_S10_EEEEEEDcS14_DpT0_(&v33, &v23, v20);
        if (v22 != -1) {
          uint64_t result = (void *)((uint64_t (*)(std::runtime_error *, void *))off_1EDCA4F30[v22])(&v23, v21);
        }
        goto LABEL_35;
      }
      if (v22 != -1) {
        uint64_t result = (void *)((uint64_t (*)(std::runtime_error *, void *))off_1EDCA4F30[v22])(&v23, v21);
      }
      if (v32)
      {
        __break(1u);
        return result;
      }
    }
    LODWORD(v21[0]) = 204;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error,AMSCore::BagErrorCode>((uint64_t)&v23, (uint64_t)v29, (unsigned int *)v21);
  }
  LOBYTE(v23.__vftable) = 0;
  DWORD2(v24) = -1;
  uint64_t v11 = *(unsigned int *)(v29[0] + 24);
  if (v11 == -1)
  {
    LOBYTE(v25) = 0;
    *(unsigned char *)a1 = 0;
    *(_DWORD *)(a1 + 24) = -1;
    goto LABEL_18;
  }
  ((void (*)(char *, std::runtime_error *))off_1EDCA4F80[v11])(&v33, &v23);
  DWORD2(v24) = v11;
  LOBYTE(v25) = 0;
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  ((void (*)(void *, uint64_t, std::runtime_error *))off_1EDCA5520[v11])(v21, a1, &v23);
  *(_DWORD *)(a1 + 24) = v11;
  if (DWORD2(v24) == -1)
  {
LABEL_18:
    DWORD2(v24) = 0;
    goto LABEL_19;
  }
  if (DWORD2(v24))
  {
    ((void (*)(void *, std::runtime_error *))off_1EDCA54D0[DWORD2(v24)])(v21, &v23);
    goto LABEL_18;
  }
LABEL_19:
  *(unsigned char *)(a1 + 32) = (_BYTE)v25;
  *(unsigned char *)(a1 + 72) = 1;
  uint64_t result = (void *)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8fe180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8fe180100EvEUlRT_E_JRNS0_6__baseILS12_1EJS8_bdxySE_SG_SO_SX_S10_EEEEEEDcS14_DpT0_(v21, &v23, v10);
LABEL_35:
  if (!v32) {
    return (void *)(*(uint64_t (**)(void *))v29[0])(v29);
  }
  return result;
}

void sub_18DA62378(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, int a16)
{
  if (a16 != -1) {
    ((void (*)(uint64_t *, char *))off_1EDCA4F30[a16])(&a9, &a13);
  }
  a16 = -1;
  __clang_call_terminate(a1);
}

uint64_t AMSCore::StringUtils::join<char [22]>(std::string *a1, const char *a2)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v6);
  size_t v4 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v6, (uint64_t)a2, v4);
  std::stringbuf::str[abi:fe180100]((uint64_t)v7, a1);
  uint64_t v6 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v7[-1] + *(void *)(v6 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v7[0] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FA3FD0](&v9);
}

void AMSCore::Unexpected<AMSCore::Error,AMSCore::Error,AMSCore::BagErrorCode>(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  std::runtime_error::runtime_error(v8, (const std::runtime_error *)a2);
  uint64_t v5 = (void *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 40);
  v8[1] = *(std::runtime_error *)(a2 + 16);
  int v7 = *(uint64_t **)(a2 + 32);
  v8[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  if (*(void *)(a2 + 48))
  {
    *(void *)(v6 + 16) = &v10;
    *(void *)(a2 + 32) = v5;
    *uint64_t v5 = 0;
    *(void *)(a2 + 48) = 0;
  }
  else
  {
    uint64_t v9 = &v10;
  }
  long long v12 = *(_OWORD *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  AMSCore::Error::Error<>((uint64_t)&v13, (uint64_t)v8, *a3, (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance);
}

void sub_18DA626D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void AMSCore::Error::Error<>(uint64_t a1, uint64_t a2, uint64_t a3, const std::error_category *a4)
{
  AMSCore::StringUtils::join<>(&__what_arg);
  *(void *)&v8.__val_ = a3;
  v8.__cat_ = a4;
  std::system_error::system_error((std::system_error *)a1, v8, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_1EDC827D8;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)(a1 + 48) = 0;
  operator new();
}

void sub_18DA62854(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v2, *(unsigned int **)(v1 + 40));
  MEMORY[0x192FA3C30](v1);
  _Unwind_Resume(a1);
}

void sub_18DA628A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::StringUtils::join<>(std::string *a1)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v3);
  std::stringbuf::str[abi:fe180100]((uint64_t)v4, a1);
  uint64_t v3 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v4[-1] + *(void *)(v3 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v4[0] = MEMORY[0x1E4FBA470] + 16;
  if (v5 < 0) {
    operator delete((void *)v4[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FA3FD0](&v6);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Error  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN7AMSCore5ErrorEEE"
    || ((v3 & (unint64_t)"NSt3__114default_deleteIN7AMSCore5ErrorEEE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "NSt3__114default_deleteIN7AMSCore5ErrorEEE")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN7AMSCore5ErrorEEE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::Error  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::Error  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::BagErrorCode,char const(&)[24]>(uint64_t a1, unsigned int a2, const char *a3)
{
  uint64_t v4 = a2;
  AMSCore::StringUtils::join<char [24]>(&__what_arg, a3);
  *(void *)&v15.__val_ = v4;
  v15.__cat_ = (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance;
  std::system_error::system_error(&v9, v15, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  v9.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  uint64_t v10 = &v11;
  long long v13 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v9);
  *(std::error_code *)(a1 + 16) = v9.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v5 = v11;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = a1 + 40;
  uint64_t v7 = v12;
  *(void *)(a1 + 48) = v12;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    uint64_t v5 = 0;
    uint64_t v10 = &v11;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v6;
  }
  *(_OWORD *)(a1 + 56) = v13;
  long long v13 = 0uLL;
  v9.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v5);
  return MEMORY[0x192FA3C30](&v9);
}

void sub_18DA62BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::StringUtils::join<char [24]>(std::string *a1, const char *a2)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v6);
  size_t v4 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v6, (uint64_t)a2, v4);
  std::stringbuf::str[abi:fe180100]((uint64_t)v7, a1);
  uint64_t v6 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v7[-1] + *(void *)(v6 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v7[0] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FA3FD0](&v9);
}

void AMSCore::BagDataAccessor::getMapValue(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  AMSCore::BagDataAccessor::getValue((uint64_t)&v35, a2, a3, a4);
  if (v41)
  {
    if (LOBYTE(v36.__cat_) == 8)
    {
      v29.__imp_.__imp_ = 0;
      *(void *)&v29.__ec_.__val_ = 0;
      v29.__vftable = (std::system_error_vtbl *)&v29.__imp_;
      uint64_t v5 = v35.__vftable;
      if (LODWORD(v36.__cat_) == 8) {
        p_char imp = (uint64_t)&v35.__imp_;
      }
      else {
        p_char imp = 8;
      }
      if (v35.__vftable != (std::runtime_error_vtbl *)p_imp)
      {
        do
        {
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v29, (uint64_t *)&v29.__imp_, (const void **)&v5[1].~runtime_error_0, (long long *)&v5[1].~runtime_error_0);
          uint64_t v7 = v5->~runtime_error_0;
          if (v7)
          {
            do
            {
              what = (std::runtime_error_vtbl **)v7;
              uint64_t v7 = *(void (__cdecl **)(std::runtime_error *__hidden))v7;
            }
            while (v7);
          }
          else
          {
            do
            {
              what = (std::runtime_error_vtbl **)v5->what;
              BOOL v9 = *what == v5;
              uint64_t v5 = (std::runtime_error_vtbl *)what;
            }
            while (!v9);
          }
          uint64_t v5 = (std::runtime_error_vtbl *)what;
        }
        while (what != (std::runtime_error_vtbl **)p_imp);
        if (!v41)
        {
          __break(1u);
          return;
        }
      }
      char v11 = (char)v37;
      LOBYTE(v29.__ec_.__cat_) = (_BYTE)v37;
      char imp = (char *)v29.__imp_.__imp_;
      *(void *)a1 = v29.__vftable;
      *(void *)(a1 + 8) = imp;
      uint64_t v13 = a1 + 8;
      uint64_t v14 = *(void *)&v29.__ec_.__val_;
      *(void *)(a1 + 16) = *(void *)&v29.__ec_.__val_;
      if (v14)
      {
        *((void *)imp + 2) = v13;
        v29.__vftable = (std::system_error_vtbl *)&v29.__imp_;
        v29.__imp_.__imp_ = 0;
        *(void *)&v29.__ec_.__val_ = 0;
        char imp = 0;
      }
      else
      {
        *(void *)a1 = v13;
      }
      *(unsigned char *)(a1 + 24) = v11;
      *(unsigned char *)(a1 + 72) = 1;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v29, (unsigned int *)imp);
      if (!v41) {
        goto LABEL_44;
      }
      goto LABEL_40;
    }
    AMSCore::StringUtils::join<char [23]>((std::string *)&__p, "Bag type is not a map.");
    v42.__cat_ = (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance;
    *(void *)&v42.__val_ = 202;
    std::system_error::system_error(&v29, v42, (const std::string *)&__p);
    if (*((char *)&ec.__val_ + 7) < 0) {
      operator delete(__p.__vftable);
    }
    unint64_t v31 = 0;
    uint64_t v32 = 0;
    v29.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
    int v30 = &v31;
    long long v33 = 0uLL;
    std::runtime_error::runtime_error(&__p, &v29);
    std::error_code ec = v29.__ec_;
    uint64_t v10 = v31;
    __p.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v25 = v30;
    uint64_t v26 = v31;
    uint64_t v27 = v32;
    if (v32)
    {
      *((void *)v31 + 2) = &v26;
      uint64_t v10 = 0;
      int v30 = &v31;
      unint64_t v31 = 0;
      uint64_t v32 = 0;
    }
    else
    {
      uint64_t v25 = &v26;
    }
    long long v28 = v33;
    long long v33 = 0uLL;
    v29.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v30, v10);
    MEMORY[0x192FA3C30](&v29);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &__p);
    *(std::error_code *)(a1 + 16) = ec;
    *(void *)a1 = &unk_1EDC827D8;
    __n128 v20 = v26;
    *(void *)(a1 + 32) = v25;
    *(void *)(a1 + 40) = v20;
    uint64_t v21 = a1 + 40;
    uint64_t v22 = v27;
    *(void *)(a1 + 48) = v27;
    if (v22)
    {
      *((void *)v20 + 2) = v21;
      __n128 v20 = 0;
      uint64_t v25 = &v26;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
    }
    else
    {
      *(void *)(a1 + 32) = v21;
    }
    *(_OWORD *)(a1 + 56) = v28;
    long long v28 = 0uLL;
    *(unsigned char *)(a1 + 72) = 0;
    __p.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v25, v20);
    p_p = (std::system_error *)&__p;
    goto LABEL_38;
  }
  std::runtime_error::runtime_error(&v29, &v35);
  v29.__ec_ = v36;
  v29.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  int v30 = v37;
  unint64_t v31 = (unsigned int *)v38;
  uint64_t v32 = v39;
  if (v39)
  {
    *(void *)(v38 + 16) = &v31;
    float v37 = (unsigned int **)&v38;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
  }
  else
  {
    int v30 = &v31;
  }
  long long v33 = v40;
  long long v40 = 0uLL;
  char v34 = 1;
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&__p, (uint64_t)&v29);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &__p);
  *(std::error_code *)(a1 + 16) = ec;
  *(void *)a1 = &unk_1EDC827D8;
  std::error_code v15 = v26;
  *(void *)(a1 + 32) = v25;
  *(void *)(a1 + 40) = v15;
  uint64_t v16 = a1 + 40;
  uint64_t v17 = v27;
  *(void *)(a1 + 48) = v27;
  if (v17)
  {
    *((void *)v15 + 2) = v16;
    uint64_t v25 = &v26;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    std::error_code v15 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v16;
  }
  *(_OWORD *)(a1 + 56) = v28;
  long long v28 = 0uLL;
  *(unsigned char *)(a1 + 72) = 0;
  __p.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v25, v15);
  MEMORY[0x192FA3C30](&__p);
  if (v34)
  {
    v29.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
    uint64_t v18 = (std::__shared_weak_count *)*((void *)&v33 + 1);
    if (*((void *)&v33 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v33 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v30, v31);
    p_p = &v29;
LABEL_38:
    MEMORY[0x192FA3C30](p_p);
  }
  if (!v41)
  {
LABEL_44:
    ((void (*)(std::runtime_error *))v35.~runtime_error)(&v35);
    return;
  }
LABEL_40:
  if (LODWORD(v36.__cat_) != -1) {
    ((void (*)(std::system_error *, std::runtime_error *))off_1EDCA4F30[LODWORD(v36.__cat_)])(&v29, &v35);
  }
}

void sub_18DA63228(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __clang_call_terminate(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMSCore::StringUtils::join<char [23]>(std::string *a1, const char *a2)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v6);
  size_t v4 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v6, (uint64_t)a2, v4);
  std::stringbuf::str[abi:fe180100]((uint64_t)v7, a1);
  uint64_t v6 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v7[-1] + *(void *)(v6 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v7[0] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FA3FD0](&v9);
}

void AMSCore::BagDataAccessor::getStringValue(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  AMSCore::BagDataAccessor::getValue((uint64_t)&v29, a2, a3, a4);
  if (v35)
  {
    if (DWORD2(v30) == 5) {
      uint64_t v5 = &v29;
    }
    else {
      uint64_t v5 = 0;
    }
    if (BYTE8(v30) == 5)
    {
      uint64_t v6 = (uint64_t)&v30 + 7;
      if (DWORD2(v30) != 5) {
        uint64_t v6 = 23;
      }
      if (*(char *)v6 < 0)
      {
        p_char imp = 8;
        if (DWORD2(v30) == 5) {
          p_char imp = (uint64_t)&v29.__imp_;
        }
        std::string::__init_copy_ctor_external((std::string *)&v22, (const std::string::value_type *)v5->__vftable, *(void *)p_imp);
        if (!v35)
        {
          __break(1u);
          return;
        }
      }
      else
      {
        std::runtime_error v22 = *v5;
        *(void *)&long long v23 = v5[1].__vftable;
      }
      char v15 = (char)v31;
      *(std::runtime_error *)a1 = v22;
      *(void *)(a1 + 16) = v23;
      *(unsigned char *)(a1 + 24) = v15;
      *(unsigned char *)(a1 + 72) = 1;
LABEL_27:
      if (v35) {
        goto LABEL_28;
      }
LABEL_33:
      ((void (*)(std::runtime_error *))v29.~runtime_error)(&v29);
      return;
    }
    AMSCore::Unexpected<AMSCore::Error,AMSCore::BagErrorCode,char const(&)[24]>((uint64_t)&v22, 0xCAu, "Bag type is not string.");
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v22);
    *(_OWORD *)(a1 + 16) = v23;
    *(void *)a1 = &unk_1EDC827D8;
    uint64_t v7 = v25;
    *(void *)(a1 + 32) = v24;
    *(void *)(a1 + 40) = v7;
    uint64_t v8 = a1 + 40;
    uint64_t v9 = v26;
    *(void *)(a1 + 48) = v26;
    if (v9)
    {
      *(void *)(v7 + 16) = v8;
      long long v24 = &v25;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v7 = 0;
    }
    else
    {
      *(void *)(a1 + 32) = v8;
    }
    *(_OWORD *)(a1 + 56) = v27;
    long long v27 = 0uLL;
    *(unsigned char *)(a1 + 72) = 0;
    v22.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  }
  else
  {
    std::runtime_error::runtime_error(&v22, &v29);
    long long v23 = v30;
    v22.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    long long v24 = v31;
    uint64_t v25 = v32;
    uint64_t v26 = v33;
    if (v33)
    {
      *(void *)(v32 + 16) = &v25;
      unint64_t v31 = &v32;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
    }
    else
    {
      long long v24 = &v25;
    }
    long long v27 = v34;
    long long v34 = 0uLL;
    char v28 = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v16, (uint64_t)&v22);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v16);
    *(_OWORD *)(a1 + 16) = v17;
    *(void *)a1 = &unk_1EDC827D8;
    uint64_t v10 = v19;
    *(void *)(a1 + 32) = v18;
    *(void *)(a1 + 40) = v10;
    uint64_t v11 = a1 + 40;
    uint64_t v12 = v20;
    *(void *)(a1 + 48) = v20;
    if (v12)
    {
      *(void *)(v10 + 16) = v11;
      uint64_t v18 = &v19;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v10 = 0;
    }
    else
    {
      *(void *)(a1 + 32) = v11;
    }
    *(_OWORD *)(a1 + 56) = v21;
    long long v21 = 0uLL;
    *(unsigned char *)(a1 + 72) = 0;
    v16.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v18, (unsigned int *)v10);
    MEMORY[0x192FA3C30](&v16);
    if (!v28) {
      goto LABEL_27;
    }
    v22.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v13 = (std::__shared_weak_count *)*((void *)&v27 + 1);
    if (*((void *)&v27 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v7 = v25;
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v24, (unsigned int *)v7);
  MEMORY[0x192FA3C30](&v22);
  if (!v35) {
    goto LABEL_33;
  }
LABEL_28:
  if (DWORD2(v30) != -1) {
    ((void (*)(std::runtime_error *, std::runtime_error *))off_1EDCA4F30[DWORD2(v30)])(&v22, &v29);
  }
}

void *std::vector<AMSCore::Any>::vector[abi:fe180100](void *a1, uint64_t a2, unint64_t a3)
{
  a1[2] = 0;
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    if (a3 >> 59) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v5 = 32 * a3;
    uint64_t v6 = (char *)operator new(32 * a3);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    uint64_t v10 = v6;
    uint64_t v7 = v6;
    do
    {
      *uint64_t v7 = 0;
      *((_DWORD *)v7 + 6) = -1;
      uint64_t v8 = *(unsigned int *)(a2 + 24);
      if (v8 != -1)
      {
        ((void (*)(unsigned char *, char *, uint64_t))off_1EDCA4F80[v8])(v11, v7, a2);
        *((_DWORD *)v7 + 6) = v8;
        uint64_t v7 = v10;
      }
      a2 += 32;
      v7 += 32;
      uint64_t v10 = v7;
      v5 -= 32;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_18DA63848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  long long v21 = (char *)*v19;
  if (*v19)
  {
    std::runtime_error v22 = (char *)v19[1];
    long long v23 = *v19;
    if (v22 != v21)
    {
      do
      {
        long long v24 = v22 - 32;
        uint64_t v25 = *((unsigned int *)v22 - 2);
        if (v25 != -1) {
          ((void (*)(char *, char *))off_1EDCA4F30[v25])(&a10, v22 - 32);
        }
        *((_DWORD *)v22 - 2) = -1;
        v22 -= 32;
      }
      while (v24 != v21);
      long long v23 = *v19;
    }
    v19[1] = v21;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *AMSCore::nestedError<std::expected<AMSCore::URL,AMSCore::Error> &>(unsigned char *result, uint64_t a2, uint64_t a3, const std::error_category *a4)
{
  if (!*(unsigned char *)(a2 + 152))
  {
    std::runtime_error::runtime_error(&v16, (const std::runtime_error *)a2);
    uint64_t v7 = (void *)(a2 + 40);
    uint64_t v8 = *(void *)(a2 + 40);
    long long v17 = *(_OWORD *)(a2 + 16);
    uint64_t v9 = *(uint64_t **)(a2 + 32);
    v16.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v18 = v9;
    uint64_t v19 = v8;
    uint64_t v20 = *(void *)(a2 + 48);
    if (v20)
    {
      *(void *)(v8 + 16) = &v19;
      *(void *)(a2 + 32) = v7;
      *uint64_t v7 = 0;
      *(void *)(a2 + 48) = 0;
    }
    else
    {
      uint64_t v18 = &v19;
    }
    long long v21 = *(_OWORD *)(a2 + 56);
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    char v22 = 1;
    std::runtime_error::runtime_error(&v10, &v16);
    long long v11 = v17;
    v10.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v12 = v18;
    v13[0] = v19;
    v13[1] = v20;
    if (v20)
    {
      *(void *)(v19 + 16) = v13;
      uint64_t v18 = &v19;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
    }
    else
    {
      uint64_t v12 = v13;
    }
    long long v14 = v21;
    long long v21 = 0uLL;
    AMSCore::Error::Error<>((uint64_t)&v15, (uint64_t)&v10, a3, a4);
  }
  *uint64_t result = 0;
  result[72] = 0;
  return result;
}

void sub_18DA63C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void AMSCore::IBag::getURLValueForKey(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (char *)operator new(0x210uLL);
  *(void *)uint64_t v6 = AMSCore::IBag::getURLValueForKey;
  *((void *)v6 + 1) = AMSCore::IBag::getURLValueForKey;
  *(_OWORD *)(v6 + 392) = *(_OWORD *)a2;
  *((void *)v6 + 51) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v7 = a3[1];
  *((void *)v6 + 59) = a1;
  *((void *)v6 + 60) = v7;
  *a3 = 0;
  a3[1] = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  v6[24] = 0;
  v6[184] = 0;
  *((void *)v6 + 24) = 0;
  *((void *)v6 + 28) = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v8, (uint64_t)(v6 + 16));
}

void AMSCore::IBag::getURLValueForKey(unint64_t a1)
{
  unint64_t v2 = a1 + 312;
  unint64_t v3 = (void *)(a1 + 232);
  size_t v4 = (uint64_t **)(a1 + 416);
  if (*(unsigned char *)(a1 + 520)) {
    goto LABEL_2;
  }
  uint64_t v8 = *(void *)(a1 + 488);
  if (!*(unsigned char *)(v8 + 88)) {
    goto LABEL_96;
  }
  uint64_t v9 = (const std::runtime_error *)(v8 + 8);
  char v10 = *(unsigned char *)(v8 + 80);
  if (v10)
  {
    *(void *)(a1 + 232) = *(void *)(v8 + 8);
    long long v11 = (const char **)(a1 + 240);
    p_char imp = (std::__libcpp_refstring *)(v8 + 16);
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 232), v9);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(v8 + 24);
    *(void *)(a1 + 232) = &unk_1EDC827D8;
    long long v17 = (void *)(v8 + 48);
    uint64_t v18 = *(void *)(v8 + 48);
    unint64_t v19 = a1 + 272;
    *(void *)(a1 + 264) = *(void *)(v8 + 40);
    *(void *)(a1 + 272) = v18;
    uint64_t v20 = *(void *)(v8 + 56);
    *(void *)(a1 + 280) = v20;
    if (v20)
    {
      *(void *)(v18 + 16) = v19;
      *(void *)(v8 + 40) = v17;
      *long long v17 = 0;
      *(void *)(v8 + 56) = 0;
    }
    else
    {
      *(void *)(a1 + 264) = v19;
    }
    std::error_code v42 = *(const std::runtime_error **)(a1 + 488);
    uint64_t v43 = v42[4].__vftable;
    uint64_t v9 = v42 + 4;
    *(void *)(a1 + 288) = v43;
    long long v11 = (const char **)(a1 + 296);
    p_char imp = &v9->__imp_;
  }
  *long long v11 = p_imp->__imp_;
  v9->__vftable = 0;
  v9->__imp_.__imp_ = 0;
  *(unsigned char *)(a1 + 304) = v10;
  uint64_t v44 = *(void *)(a1 + 496);
  if (v44 && !atomic_fetch_add((atomic_ullong *volatile)(v44 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v45 = *(std::__shared_weak_count **)(a1 + 496);
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  uint64_t v46 = *(std::__shared_weak_count **)(a1 + 464);
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
  unint64_t v47 = *(std::__shared_weak_count **)(a1 + 448);
  if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  uint8x8_t v48 = *(std::__shared_weak_count **)(a1 + 320);
  if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
    if (!*(unsigned char *)(a1 + 304)) {
      goto LABEL_75;
    }
  }
  else if (!*(unsigned char *)(a1 + 304))
  {
LABEL_75:
    int v32 = 0;
    goto LABEL_76;
  }
  if (!*v3) {
    goto LABEL_75;
  }
  (*(void (**)(void))(*(void *)*v3 + 40))(*v3);
  long long v49 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)(v2 + 192) = v49;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = 0;
  if (!atomic_load_explicit((atomic_ullong *volatile)(v49 + 96), memory_order_acquire))
  {
    *(unsigned char *)(v2 + 208) = 1;
    if (!atomic_exchange((atomic_ullong *volatile)(*(void *)(a1 + 504) + 96), a1)) {
      return;
    }
  }
LABEL_2:
  uint64_t v5 = *(void *)(a1 + 504);
  if (!*(unsigned char *)(v5 + 88))
  {
LABEL_96:
    __break(1u);
    return;
  }
  uint64_t v6 = (const std::runtime_error *)(v5 + 8);
  char v7 = *(unsigned char *)(v5 + 80);
  if (v7)
  {
    *(_OWORD *)unint64_t v2 = *(_OWORD *)(v5 + 8);
    *(void *)(a1 + 328) = *(void *)(v5 + 24);
    *(void *)(v5 + 16) = 0;
    *(void *)(v5 + 24) = 0;
    v6->__vftable = 0;
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)v2, v6);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(v5 + 24);
    *(void *)(a1 + 312) = &unk_1EDC827D8;
    uint64_t v13 = (void *)(v5 + 48);
    uint64_t v14 = *(void *)(v5 + 48);
    unint64_t v15 = a1 + 352;
    *(void *)(a1 + 344) = *(void *)(v5 + 40);
    *(void *)(a1 + 352) = v14;
    uint64_t v16 = *(void *)(v5 + 56);
    *(void *)(a1 + 360) = v16;
    if (v16)
    {
      *(void *)(v14 + 16) = v15;
      *(void *)(v5 + 40) = v13;
      *uint64_t v13 = 0;
      *(void *)(v5 + 56) = 0;
    }
    else
    {
      *(void *)(a1 + 344) = v15;
    }
    uint64_t v21 = *(void *)(a1 + 504);
    *(_OWORD *)(a1 + 368) = *(_OWORD *)(v21 + 64);
    *(void *)(v21 + 64) = 0;
    *(void *)(v21 + 72) = 0;
  }
  *(unsigned char *)(a1 + 384) = v7;
  uint64_t v22 = *(void *)(a1 + 512);
  if (v22 && !atomic_fetch_add((atomic_ullong *volatile)(v22 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    long long v23 = *(std::__shared_weak_count **)(a1 + 512);
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  long long v24 = *(std::__shared_weak_count **)(a1 + 464);
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    int v25 = *(unsigned __int8 *)(a1 + 384);
    if (*(unsigned char *)(a1 + 384))
    {
LABEL_20:
      uint64_t v26 = *v4;
      if (*v4)
      {
        long long v27 = *(uint64_t **)(a1 + 424);
        char v28 = *v4;
        if (v27 != v26)
        {
          do
            std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v27, 0);
          while (v27 != v26);
          char v28 = *v4;
        }
        *(void *)(a1 + 424) = v26;
        operator delete(v28);
        int v29 = *(unsigned __int8 *)(a1 + 384);
      }
      else
      {
        int v29 = 1;
      }
      int v32 = 0;
      *(_OWORD *)(a1 + 416) = *(_OWORD *)v2;
      *(void *)(a1 + 432) = *(void *)(a1 + 328);
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)unint64_t v2 = 0;
      if (!v29)
      {
        uint64_t v33 = 0;
LABEL_52:
        ((void (*)(unint64_t))*v33)(v2);
      }
LABEL_53:
      if (!v25) {
        goto LABEL_76;
      }
      goto LABEL_75;
    }
  }
  else
  {
    int v25 = *(unsigned __int8 *)(a1 + 384);
    if (*(unsigned char *)(a1 + 384)) {
      goto LABEL_20;
    }
  }
  std::runtime_error::runtime_error(&v62, (const std::runtime_error *)v2);
  long long v63 = *(_OWORD *)(a1 + 328);
  unint64_t v31 = *(unsigned int ***)(a1 + 344);
  uint64_t v30 = *(void *)(a1 + 352);
  v62.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  uint64_t v64 = v31;
  int v65 = (unsigned int *)v30;
  if (*(void *)(a1 + 360))
  {
    *(void *)(v30 + 16) = &v65;
    *(void *)(a1 + 344) = a1 + 352;
    *(void *)(a1 + 352) = 0;
    *(void *)(a1 + 360) = 0;
  }
  else
  {
    uint64_t v64 = &v65;
  }
  long long v67 = *(_OWORD *)(a1 + 368);
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  char v68 = 1;
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v56, (uint64_t)&v62);
  if (*(unsigned char *)(a1 + 184))
  {
    if (*(unsigned char *)(a1 + 176)) {
      AMSCore::URL::~URL((AMSCore::URL *)(a1 + 24));
    }
    else {
      (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
    }
    *(unsigned char *)(a1 + 184) = 0;
  }
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v56);
  long long v34 = v57;
  std::error_code v36 = v58;
  uint64_t v35 = v59;
  *(void *)(a1 + 64) = v59;
  unint64_t v37 = a1 + 64;
  *(_OWORD *)(a1 + 40) = v34;
  *(void *)(a1 + 24) = &unk_1EDC827D8;
  uint64_t v38 = v60;
  *(void *)(a1 + 56) = v36;
  *(void *)(a1 + 72) = v38;
  if (v38)
  {
    *(void *)(v35 + 16) = v37;
    size_t v58 = &v59;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    uint64_t v35 = 0;
  }
  else
  {
    *(void *)(a1 + 56) = v37;
  }
  *(_OWORD *)(a1 + 80) = v61;
  long long v61 = 0uLL;
  *(unsigned char *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + 184) = 1;
  v56.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v58, (unsigned int *)v35);
  MEMORY[0x192FA3C30](&v56);
  if (v68)
  {
    v62.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v39 = (std::__shared_weak_count *)*((void *)&v67 + 1);
    if (*((void *)&v67 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v67 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v64, v65);
    MEMORY[0x192FA3C30](&v62);
  }
  uint64_t v33 = *(uint64_t **)(a1 + 312);
  if (!*(unsigned char *)(a1 + 384))
  {
    int v32 = 3;
    goto LABEL_52;
  }
  if (v33)
  {
    long long v40 = *(uint64_t **)(a1 + 320);
    char v41 = *(void **)(a1 + 312);
    if (v40 != v33)
    {
      do
        std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v40, 0);
      while (v40 != v33);
      char v41 = *(void **)v2;
    }
    *(void *)(a1 + 320) = v33;
    operator delete(v41);
    int v32 = 3;
    goto LABEL_53;
  }
  int v32 = 3;
LABEL_76:
  if (*(unsigned char *)(a1 + 304))
  {
    uint8x8_t v50 = *(std::__shared_weak_count **)(a1 + 240);
    if (v50 && !atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  else
  {
    (*(void (**)(void *))*v3)(v3);
  }
  if (!v32)
  {
    (*(void (**)(std::runtime_error *__return_ptr))(**(void **)(a1 + 472) + 88))(&v62);
    if (*(unsigned char *)(a1 + 184))
    {
      uint64_t v51 = (AMSCore::URL *)(a1 + 24);
      if (*(unsigned char *)(a1 + 176)) {
        AMSCore::URL::~URL(v51);
      }
      else {
        (**(void (***)(AMSCore::URL *))v51)(v51);
      }
      *(unsigned char *)(a1 + 184) = 0;
    }
    char v52 = v69;
    std::__expected_base<AMSCore::URL,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::URL,AMSCore::Error>::__union_t>((std::runtime_error *)(a1 + 24), v69, &v62);
    *(unsigned char *)(a1 + 176) = v52;
    *(unsigned char *)(a1 + 184) = 1;
    if ((_BYTE)v69) {
      AMSCore::URL::~URL((AMSCore::URL *)&v62);
    }
    else {
      ((void (*)(std::runtime_error *))v62.~runtime_error)(&v62);
    }
  }
  uint64_t v53 = *v4;
  if (*v4)
  {
    unint64_t v54 = *(uint64_t **)(a1 + 424);
    uint64_t v55 = *v4;
    if (v54 != v53)
    {
      do
        std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v54, 0);
      while (v54 != v53);
      uint64_t v55 = *v4;
    }
    *(void *)(a1 + 424) = v53;
    operator delete(v55);
  }
  *(void *)(a1 + 232) = a1 + 16;
  *(void *)a1 = 0;
  AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v3);
}

void AMSCore::IBag::getURLValueForKey(char *__p)
{
  unint64_t v2 = (void (***)(void))(__p + 232);
  if (!*(void *)__p) {
    goto LABEL_28;
  }
  if (__p[520])
  {
    uint64_t v3 = *((void *)__p + 64);
    if (v3 && !atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      size_t v4 = (std::__shared_weak_count *)*((void *)__p + 64);
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)*((void *)__p + 58);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (__p[304])
      {
LABEL_9:
        uint64_t v6 = (std::__shared_weak_count *)*((void *)__p + 30);
        if (!v6) {
          goto LABEL_23;
        }
        goto LABEL_21;
      }
    }
    else if (__p[304])
    {
      goto LABEL_9;
    }
    (**v2)(v2);
    long long v11 = (uint64_t *)*((void *)__p + 52);
    if (!v11) {
      goto LABEL_28;
    }
    goto LABEL_24;
  }
  uint64_t v7 = *((void *)__p + 62);
  if (v7 && !atomic_fetch_add((atomic_ullong *volatile)(v7 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v8 = (std::__shared_weak_count *)*((void *)__p + 62);
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)__p + 58);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  char v10 = (std::__shared_weak_count *)*((void *)__p + 56);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)__p + 40);
  if (v6)
  {
LABEL_21:
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_23:
  long long v11 = (uint64_t *)*((void *)__p + 52);
  if (!v11) {
    goto LABEL_28;
  }
LABEL_24:
  uint64_t v12 = (uint64_t *)*((void *)__p + 53);
  uint64_t v13 = v11;
  if (v12 != v11)
  {
    do
      std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v12, 0);
    while (v12 != v11);
    uint64_t v13 = (uint64_t *)*((void *)__p + 52);
  }
  *((void *)__p + 53) = v11;
  operator delete(v13);
LABEL_28:
  uint64_t v14 = (char *)*((void *)__p + 28);
  if (v14 == __p + 200)
  {
    (*(void (**)(char *))(*((void *)__p + 25) + 32))(__p + 200);
    if (!__p[184]) {
      goto LABEL_37;
    }
    goto LABEL_34;
  }
  if (v14) {
    (*(void (**)(char *))(*(void *)v14 + 40))(v14);
  }
  if (__p[184])
  {
LABEL_34:
    unint64_t v15 = (AMSCore::URL *)(__p + 24);
    if (__p[176]) {
      AMSCore::URL::~URL(v15);
    }
    else {
      (**(void (***)(AMSCore::URL *))v15)(v15);
    }
  }
LABEL_37:
  uint64_t v16 = *((void *)__p + 60);
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (!v16 || atomic_fetch_add((atomic_ullong *volatile)(*((void *)__p + 60) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((__p[415] & 0x80000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  long long v17 = (std::__shared_weak_count *)*((void *)__p + 60);
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (__p[415] < 0) {
LABEL_42:
  }
    operator delete(*((void **)__p + 49));
LABEL_43:
  operator delete(__p);
}

void std::shared_ptr<AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_18DA65570(void *a1)
{
  __cxa_begin_catch(a1);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 176), 2uLL)) {
    (*(void (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  __cxa_rethrow();
}

void sub_18DA6559C(_Unwind_Exception *a1)
{
}

uint64_t AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise::Awaiter::await_suspend(uint64_t result)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void (**)(void))atomic_exchange((atomic_ullong *volatile)(*(void *)result + 176), 1uLL);
  if (v1)
  {
    uint64_t v2 = result;
    if (v1 == (void (**)(void))2) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result - 8))(*(void *)result - 16);
    }
    uint64_t v3 = (uint64_t *)(*(void *)result + 208);
    uint64_t result = *v3;
    if (*v3)
    {
      if (result == *(void *)v2 + 184)
      {
        uint64_t v9 = v8;
        uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 24))(result, v8);
      }
      else
      {
        uint64_t v9 = *(void **)(*(void *)v2 + 208);
        *uint64_t v3 = 0;
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    if (v9)
    {
      uint64_t v4 = *(void *)v2;
      if (!*(unsigned char *)(*(void *)v2 + 168))
      {
        __break(1u);
        return result;
      }
      unsigned __int8 v5 = *(unsigned char *)(v4 + 160);
      std::__expected_base<AMSCore::URL,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::URL,AMSCore::Error>::__union_t>(v6, v5, (std::runtime_error *)(v4 + 8));
      unsigned __int8 v7 = v5;
      if (!v9) {
        std::__throw_bad_function_call[abi:fe180100]();
      }
      (*(void (**)(void *, std::runtime_error *))(*v9 + 48))(v9, v6);
      if (v7) {
        AMSCore::URL::~URL((AMSCore::URL *)v6);
      }
      else {
        ((void (*)(std::runtime_error *))v6[0].~runtime_error)(v6);
      }
    }
    else
    {
      (*v1)(v1);
    }
    uint64_t result = (uint64_t)v9;
    if (v9 == v8)
    {
      return (*(uint64_t (**)(void *))(v8[0] + 32))(v8);
    }
    else if (v9)
    {
      return (*(uint64_t (**)(void))(*v9 + 40))();
    }
  }
  return result;
}

void sub_18DA657B0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

std::runtime_error *std::__expected_base<AMSCore::URL,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::URL,AMSCore::Error>::__union_t>(std::runtime_error *result, int a2, std::runtime_error *a3)
{
  if (a2)
  {
    LOBYTE(result->__vftable) = 0;
    LOBYTE(result[1].__imp_.__imp_) = 0;
    if (LOBYTE(a3[1].__imp_.__imp_))
    {
      *uint64_t result = *a3;
      result[1].__vftable = a3[1].__vftable;
      a3->__imp_.__imp_ = 0;
      a3[1].__vftable = 0;
      a3->__vftable = 0;
      LOBYTE(result[1].__imp_.__imp_) = 1;
    }
    LOBYTE(result[2].__vftable) = 0;
    LOBYTE(result[3].__imp_.__imp_) = 0;
    if (LOBYTE(a3[3].__imp_.__imp_))
    {
      result[2] = a3[2];
      result[3].__vftable = a3[3].__vftable;
      a3[2].__imp_.__imp_ = 0;
      a3[3].__vftable = 0;
      a3[2].__vftable = 0;
      LOBYTE(result[3].__imp_.__imp_) = 1;
    }
    LOBYTE(result[4].__vftable) = 0;
    LOBYTE(result[5].__imp_.__imp_) = 0;
    if (LOBYTE(a3[5].__imp_.__imp_))
    {
      result[4] = a3[4];
      result[5].__vftable = a3[5].__vftable;
      a3[4].__imp_.__imp_ = 0;
      a3[5].__vftable = 0;
      a3[4].__vftable = 0;
      LOBYTE(result[5].__imp_.__imp_) = 1;
    }
    LODWORD(result[6].__vftable) = a3[6].__vftable;
    result[6].__imp_.__imp_ = (const char *)&result[6].__imp_;
    result[7].__vftable = (std::runtime_error_vtbl *)&result[6].__imp_;
    result[7].__imp_.__imp_ = 0;
    if (result == a3)
    {
      __break(1u);
    }
    else
    {
      char imp = a3[7].__imp_.__imp_;
      if (imp)
      {
        uint64_t v6 = a3[6].__imp_.__imp_;
        unsigned __int8 v5 = a3[7].__vftable;
        unsigned __int8 v7 = v5->~runtime_error;
        *((void *)v7 + 1) = *((void *)v6 + 1);
        **((void **)v6 + 1) = v7;
        uint64_t v8 = (char *)result[6].__imp_.__imp_;
        *((void *)v8 + 1) = v5;
        v5->~runtime_error = (void (__cdecl *)(std::runtime_error *__hidden))v8;
        result[6].__imp_.__imp_ = v6;
        *((void *)v6 + 1) = (char *)result + 104;
        result[7].__imp_.__imp_ = imp;
        a3[7].__imp_.__imp_ = 0;
      }
      result[8] = a3[8];
      result[9].__vftable = a3[9].__vftable;
      a3[8].__imp_.__imp_ = 0;
      a3[9].__vftable = 0;
      a3[8].__vftable = 0;
    }
  }
  else
  {
    uint64_t result = std::runtime_error::runtime_error(result, a3);
    p_char imp = (std::runtime_error_vtbl *)&a3[2].__imp_;
    uint64_t v10 = a3[2].__imp_.__imp_;
    result[1] = a3[1];
    result->__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    result[2].__vftable = a3[2].__vftable;
    result[2].__imp_.__imp_ = v10;
    long long v11 = (std::runtime_error_vtbl *)&result[2].__imp_;
    uint64_t v12 = a3[3].__vftable;
    result[3].__vftable = v12;
    if (v12)
    {
      *((void *)v10 + 2) = v11;
      a3[2].__vftable = p_imp;
      p_imp->~runtime_error = 0;
      a3[3].__vftable = 0;
    }
    else
    {
      result[2].__vftable = v11;
    }
    *(std::runtime_error *)((char *)result + 56) = *(std::runtime_error *)((char *)a3 + 56);
    a3[3].__imp_.__imp_ = 0;
    a3[4].__vftable = 0;
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINS_3URLENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINS_3URLENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINS_3URLENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINS_3URLENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 176), 2uLL)) {
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::URL,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

uint64_t AMSCore::IBag::getIsExpired(AMSCore::IBag *this)
{
  uint64_t v2 = &unk_1EDC81C28;
  return (*(uint64_t (**)(AMSCore::IBag *, void **))(*(void *)this + 16))(this, &v2);
}

void AMSCore::ImmutableBag::~ImmutableBag(AMSCore::ImmutableBag *this)
{
  *(void *)this = &unk_1EDC81A58;
  uint64_t v2 = (uint64_t *)*((void *)this + 3);
  if (v2)
  {
    unint64_t v3 = (uint64_t *)*((void *)this + 4);
    uint64_t v4 = (void *)*((void *)this + 3);
    if (v3 != v2)
    {
      do
        std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v3, 0);
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v2;
    operator delete(v4);
  }
  unsigned __int8 v5 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  JUMPOUT(0x192FA4080);
}

{
  uint64_t *v2;
  uint64_t *v3;
  void *v4;
  std::__shared_weak_count *v5;

  *(void *)this = &unk_1EDC81A58;
  uint64_t v2 = (uint64_t *)*((void *)this + 3);
  if (v2)
  {
    unint64_t v3 = (uint64_t *)*((void *)this + 4);
    uint64_t v4 = (void *)*((void *)this + 3);
    if (v3 != v2)
    {
      do
        std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v3, 0);
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v2;
    operator delete(v4);
  }
  unsigned __int8 v5 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

uint64_t AMSCore::ImmutableBag::getURLValueForKey@<X0>(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned __int8 v5 = &v128;
  uint64_t v6 = &v106;
  uint64_t v153 = *MEMORY[0x1E4F143B8];
  v151[0] = &unk_1EDC82C60;
  v151[1] = a3;
  uint64_t v152 = v151;
  uint64_t v7 = *(void *)(a1 + 8);
  unint64_t v135 = 0;
  AMSCore::BagDataAccessor::getStringValue((uint64_t)&v128, a2, v7, (uint64_t)v134);
  if (!v133)
  {
    std::runtime_error::runtime_error(&v112, &v128);
    long long v113 = v129;
    v112.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    long long v114 = v130;
    uint64_t v115 = v131;
    if (v131)
    {
      *(void *)(*((void *)&v130 + 1) + 16) = (char *)&v114 + 8;
      *(void *)&long long v130 = (char *)&v130 + 8;
      *((void *)&v130 + 1) = 0;
      uint64_t v131 = 0;
    }
    else
    {
      *(void *)&long long v114 = (char *)&v114 + 8;
    }
    *(_OWORD *)uint64_t v116 = v132;
    long long v132 = 0uLL;
    v116[16] = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v92, (uint64_t)&v112);
    std::runtime_error::runtime_error(&v136, (const std::runtime_error *)v92);
    long long v137 = v93;
    int v29 = (unsigned int *)*((void *)&v94 + 1);
    v136.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    long long v138 = v94;
    uint64_t v139 = v95;
    if (v95)
    {
      *(void *)(*((void *)&v94 + 1) + 16) = (char *)&v138 + 8;
      *(void *)&long long v94 = (char *)&v94 + 8;
      *((void *)&v94 + 1) = 0;
      uint64_t v95 = 0;
      int v29 = 0;
    }
    else
    {
      *(void *)&long long v138 = (char *)&v138 + 8;
    }
    *(_OWORD *)unint64_t v140 = *(_OWORD *)v96;
    *(_OWORD *)unint64_t v96 = 0uLL;
    char v150 = 0;
    v92[0] = &unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v94, v29);
    MEMORY[0x192FA3C30](v92);
    if (v116[16])
    {
      v112.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v30 = *(std::__shared_weak_count **)&v116[8];
      if (*(void *)&v116[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v116[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v114, *((unsigned int **)&v114 + 1));
      MEMORY[0x192FA3C30](&v112);
    }
    goto LABEL_59;
  }
  v126.__r_.__value_.__r.__words[2] = v129;
  *(std::runtime_error *)&v126.__r_.__value_.__l.__data_ = v128;
  v128.__vftable = 0;
  v128.__imp_.__imp_ = 0;
  *(void *)&long long v129 = 0;
  if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v8 = &v126;
  }
  else {
    uint64_t v8 = (std::string *)v126.__r_.__value_.__r.__words[0];
  }
  if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v126.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v126.__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_14;
  }
  uint64_t v10 = (char *)memchr(v8, 123, size);
  if (!v10) {
    goto LABEL_14;
  }
  int64_t v11 = v10 - (char *)v8;
  unint64_t v12 = v10 - (char *)v8 + 1;
  if (v10 - (char *)v8 == -1 || size <= v12) {
    goto LABEL_14;
  }
  char v41 = memchr(v10 + 1, 125, size - v12);
  int64_t v42 = v41 - (unsigned char *)v8;
  BOOL v43 = !v41 || v42 == -1;
  if (v43
    || ((int64_t v44 = v42 - v11, size - v11 >= v44 + 1) ? (v45 = v44 + 1) : (v45 = size - v11),
        v92[0] = 0,
        v92[1] = 0,
        *(void *)&long long v93 = 0,
        !v45))
  {
LABEL_14:
    std::string __p = v126;
    memset(&v126, 0, sizeof(v126));
    goto LABEL_15;
  }
  uint64_t v46 = (char *)v8 + v11;
  unsigned __int8 v5 = (std::runtime_error *)v92;
  do
  {
    std::string::size_type v47 = 0;
    while (1)
    {
      int v48 = v46[v47];
      if (v48 != 125 && v48 != 123) {
        break;
      }
      if (v45 == ++v47) {
        goto LABEL_114;
      }
    }
    std::string::size_type v49 = v47;
    if (v47 == -1)
    {
LABEL_114:
      unint64_t v50 = 0;
      uint64_t v51 = 0;
      goto LABEL_115;
    }
    unint64_t v50 = v45 - v47;
    if (v45 < v49) {
      std::__throw_out_of_range[abi:fe180100]("string_view::substr");
    }
    uint64_t v51 = &v46[v49];
LABEL_115:
    char v52 = v51 - 1;
    for (unint64_t i = v50; ; --i)
    {
      if (!i)
      {
        std::string::size_type v57 = 0;
        size_t v58 = 0;
        goto LABEL_129;
      }
      unint64_t v54 = &v52[i];
      int v55 = v52[i];
      if (v55 != 125 && v55 != 123) {
        break;
      }
    }
    uint64_t v56 = v54 - v51;
    if (v50 >= v54 - v51 + 1) {
      unint64_t v50 = v56 + 1;
    }
    if (v56 == -1) {
      std::string::size_type v57 = 0;
    }
    else {
      std::string::size_type v57 = v50;
    }
    if (v56 == -1) {
      size_t v58 = 0;
    }
    else {
      size_t v58 = v51;
    }
LABEL_129:
    std::string::__assign_external((std::string *)v92, v58, v57);
    v136.__imp_.__imp_ = 0;
    v136.__vftable = 0;
    *(void *)&long long v137 = 0;
    if ((SBYTE7(v93) & 0x80u) == 0) {
      uint64_t v59 = v92;
    }
    else {
      uint64_t v59 = (void **)v92[0];
    }
    if ((SBYTE7(v93) & 0x80u) == 0) {
      size_t v60 = BYTE7(v93);
    }
    else {
      size_t v60 = (size_t)v92[1];
    }
    if (v60)
    {
      long long v61 = memchr(v59, 36, v60);
      int64_t v62 = v61 - (unsigned char *)v59;
      BOOL v63 = !v61 || v62 == -1;
      unint64_t v64 = v62 + 1;
      if (!v63 && v60 > v64)
      {
        BOOL v76 = memchr((char *)v59 + v64, 36, v60 - v64);
        int64_t v77 = v76 - (unsigned char *)v59;
        if (v76 && v77 != -1)
        {
          int64_t v79 = v77 - v62;
          std::string::size_type v80 = v60 - v62 >= v79 + 1 ? v79 + 1 : v60 - v62;
          if (v80)
          {
            size_t v81 = (char *)v59 + v62;
            int v82 = (const char *)v80;
            int v83 = v81;
            while (*v83 == 36)
            {
              ++v83;
              if (!--v82) {
                goto LABEL_191;
              }
            }
            uint64_t v84 = (unsigned char *)(v83 - v81);
            if (v84 == (unsigned char *)-1)
            {
              int v82 = 0;
LABEL_191:
              uint64_t v85 = 0;
              goto LABEL_192;
            }
            int v82 = (const char *)(v80 - (void)v84);
            if (v80 < (unint64_t)v84) {
              std::__throw_out_of_range[abi:fe180100]("string_view::substr");
            }
            uint64_t v85 = (std::runtime_error_vtbl *)&v84[(void)v81];
LABEL_192:
            uint64_t v86 = v82;
            do
            {
              if (!v86) {
                goto LABEL_199;
              }
              int v87 = (v86--)[(void)v85 - 1];
            }
            while (v87 == 36);
            if (v86 == (const char *)-1)
            {
LABEL_199:
              int v82 = 0;
              uint64_t v85 = 0;
              goto LABEL_200;
            }
            if (v82 >= v86 + 1) {
              int v82 = v86 + 1;
            }
LABEL_200:
            v106.__vftable = v85;
            v106.__imp_.__imp_ = v82;
            if (!v152) {
              std::__throw_bad_function_call[abi:fe180100]();
            }
            (*(void (**)(std::runtime_error *__return_ptr))(*v152 + 48))(&v112);
            if (BYTE8(v113))
            {
              if ((SBYTE7(v93) & 0x80u) == 0) {
                std::string::size_type v88 = v92;
              }
              else {
                std::string::size_type v88 = (void **)v92[0];
              }
              if ((SBYTE7(v113) & 0x80u) == 0) {
                std::string::size_type v89 = (const std::string::value_type *)&v112;
              }
              else {
                std::string::size_type v89 = (const std::string::value_type *)v112.__vftable;
              }
              if ((SBYTE7(v113) & 0x80u) == 0) {
                std::string::size_type imp = BYTE7(v113);
              }
              else {
                std::string::size_type imp = (std::string::size_type)v112.__imp_.__imp_;
              }
              std::string::replace((std::string *)v92, v81 - (unsigned char *)v88, v80, v89, imp);
              if (SBYTE7(v137) < 0) {
                operator delete(v136.__vftable);
              }
              std::runtime_error v136 = *(std::runtime_error *)v92;
              *(void *)&long long v137 = v93;
              BYTE7(v93) = 0;
              LOBYTE(v92[0]) = 0;
              if (BYTE8(v113) && SBYTE7(v113) < 0) {
                operator delete(v112.__vftable);
              }
            }
          }
        }
      }
    }
    if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v66 = &v126;
    }
    else {
      uint64_t v66 = (std::string *)v126.__r_.__value_.__r.__words[0];
    }
    if ((SBYTE7(v137) & 0x80u) == 0) {
      long long v67 = (const std::string::value_type *)&v136;
    }
    else {
      long long v67 = (const std::string::value_type *)v136.__vftable;
    }
    if ((SBYTE7(v137) & 0x80u) == 0) {
      std::string::size_type v68 = BYTE7(v137);
    }
    else {
      std::string::size_type v68 = (std::string::size_type)v136.__imp_.__imp_;
    }
    uint64_t v16 = std::string::replace(&v126, v46 - (char *)v66, v45, v67, v68);
    std::string::size_type v21 = BYTE7(v137);
    int v69 = SBYTE7(v137);
    if (SBYTE7(v137) < 0) {
      std::string::size_type v21 = (std::string::size_type)v136.__imp_.__imp_;
    }
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v126.__r_.__value_.__l.__size_ < v21) {
        goto LABEL_217;
      }
      int v70 = (std::string *)v126.__r_.__value_.__r.__words[0];
      size_t v71 = v126.__r_.__value_.__l.__size_ - v21;
      if (v126.__r_.__value_.__l.__size_ == v21) {
        goto LABEL_170;
      }
    }
    else
    {
      if (v21 > HIBYTE(v126.__r_.__value_.__r.__words[2])) {
        goto LABEL_217;
      }
      int v70 = &v126;
      size_t v71 = HIBYTE(v126.__r_.__value_.__r.__words[2]) - v21;
      if (HIBYTE(v126.__r_.__value_.__r.__words[2]) == v21) {
        goto LABEL_170;
      }
    }
    size_t v72 = (char *)v70 + v21;
    int v73 = (char *)memchr((char *)v70 + v21, 123, v71);
    std::string::size_type v45 = 0;
    if (!v73) {
      goto LABEL_185;
    }
    uint64_t v6 = (std::runtime_error *)(v73 - v72);
    uint64_t v46 = 0;
    if (v73 - v72 == -1) {
      goto LABEL_171;
    }
    if (v71 <= (unint64_t)&v6->__vftable + 1)
    {
LABEL_170:
      std::string::size_type v45 = 0;
      uint64_t v46 = 0;
LABEL_171:
      if ((v69 & 0x80000000) == 0) {
        continue;
      }
LABEL_172:
      operator delete(v136.__vftable);
      continue;
    }
    uint64_t v74 = (char *)memchr(v73 + 1, 125, v71 - (v73 - v72 + 1));
    std::string::size_type v45 = 0;
    if (v74)
    {
      uint64_t v46 = 0;
      if (v74 - v72 == -1) {
        goto LABEL_171;
      }
      int64_t v75 = v74 - v72 - (void)v6;
      uint64_t v46 = (char *)v6 + (void)v72;
      if (v71 - (unint64_t)v6 >= v75 + 1) {
        std::string::size_type v45 = v75 + 1;
      }
      else {
        std::string::size_type v45 = v71 - (void)v6;
      }
      if (v69 < 0) {
        goto LABEL_172;
      }
    }
    else
    {
LABEL_185:
      uint64_t v46 = 0;
      if (v69 < 0) {
        goto LABEL_172;
      }
    }
  }
  while (v45);
  std::string __p = v126;
  memset(&v126, 0, sizeof(v126));
  uint64_t v6 = &v106;
  unsigned __int8 v5 = &v128;
  if (SBYTE7(v93) < 0)
  {
    operator delete(v92[0]);
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v126.__r_.__value_.__l.__data_);
    }
  }
LABEL_15:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
  }
  AMSCore::URL::parse((uint64_t)p_p, v15, (uint64_t)&v112);
  if (!v125)
  {
    uint64_t v16 = (std::string *)AMSCore::nestedError<std::expected<AMSCore::URL,AMSCore::Error> &>(v92, (uint64_t)&v112, 200, (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance);
    if (v96[16])
    {
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v106, (uint64_t)v92);
      std::runtime_error::runtime_error(&v136, &v106);
      long long v137 = v107;
      uint64_t v16 = (std::string *)&v108;
      long long v17 = (std::string *)*((void *)&v108 + 1);
      v136.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      long long v138 = v108;
      std::string::size_type v21 = (std::string::size_type)&v138 + 8;
      uint64_t v139 = v109;
      if (v109)
      {
        *(void *)(*((void *)&v108 + 1) + 16) = (char *)&v138 + 8;
        *(void *)&long long v108 = (char *)&v108 + 8;
        *((void *)&v108 + 1) = 0;
        uint64_t v109 = 0;
        long long v17 = 0;
        goto LABEL_219;
      }
      goto LABEL_218;
    }
    std::string::size_type v21 = v125;
    if (!v125) {
      goto LABEL_217;
    }
  }
  LOBYTE(v92[0]) = 0;
  BYTE8(v93) = 0;
  int v18 = BYTE8(v113);
  if (BYTE8(v113))
  {
    *(std::runtime_error *)long long v92 = v112;
    *(void *)&long long v93 = v113;
    v112.__imp_.__imp_ = 0;
    *(void *)&long long v113 = 0;
    v112.__vftable = 0;
    BYTE8(v93) = 1;
  }
  LOBYTE(v94) = 0;
  v96[0] = 0;
  int v19 = v116[0];
  if (v116[0])
  {
    long long v94 = v114;
    uint64_t v95 = v115;
    uint64_t v115 = 0;
    long long v114 = 0uLL;
    v96[0] = 1;
  }
  v96[8] = 0;
  char v98 = 0;
  int v20 = v118;
  if (v118)
  {
    *(_OWORD *)&v96[8] = *(_OWORD *)&v116[8];
    uint64_t v97 = v117;
    uint64_t v117 = 0;
    *(_OWORD *)&v116[8] = 0uLL;
    char v98 = 1;
  }
  int v99 = v119;
  std::string::size_type v21 = (std::string::size_type)&v100;
  long long v100 = (std::string *)&v100;
  long long v101 = &v100;
  uint64_t v102 = 0;
  uint64_t v22 = v122;
  if (v122)
  {
    std::string::size_type v24 = v120;
    long long v23 = v121;
    long long v17 = *v121;
    v17->__r_.__value_.__l.__size_ = *(void *)(v120 + 8);
    **(void **)(v24 + 8) = v17;
    uint64_t v16 = v100;
    v100->__r_.__value_.__l.__size_ = (std::string::size_type)v23;
    *long long v23 = v16;
    long long v100 = (std::string *)v24;
    *(void *)(v24 + 8) = &v100;
    uint64_t v102 = v22;
    uint64_t v122 = 0;
    std::string::size_type v21 = v24;
  }
  long long v103 = v123;
  uint64_t v104 = v124;
  uint64_t v124 = 0;
  long long v123 = 0uLL;
  if (!v133) {
    goto LABEL_217;
  }
  char v25 = BYTE8(v129);
  char v105 = BYTE8(v129);
  LOBYTE(v136.__vftable) = 0;
  BYTE8(v137) = 0;
  if (v18)
  {
    std::runtime_error v136 = *(std::runtime_error *)v92;
    *(void *)&long long v137 = v93;
    v92[1] = 0;
    *(void *)&long long v93 = 0;
    v92[0] = 0;
    BYTE8(v137) = 1;
  }
  LOBYTE(v138) = 0;
  v140[0] = 0;
  if (v19)
  {
    long long v138 = v94;
    uint64_t v139 = v95;
    uint64_t v95 = 0;
    long long v94 = 0uLL;
    v140[0] = 1;
  }
  v140[8] = 0;
  char v142 = 0;
  if (v20)
  {
    *(_OWORD *)&v140[8] = *(_OWORD *)&v96[8];
    uint64_t v141 = v97;
    *(void *)&v96[16] = 0;
    uint64_t v97 = 0;
    *(void *)&v96[8] = 0;
    char v142 = 1;
  }
  int v143 = v99;
  std::string::size_type v144 = (std::string::size_type)&v144;
  unint64_t v145 = &v144;
  uint64_t v146 = 0;
  if (v22)
  {
    uint64_t v26 = v101;
    long long v27 = *v101;
    v27->__r_.__value_.__l.__size_ = *(void *)(v21 + 8);
    **(void **)(v21 + 8) = v27;
    std::string::size_type v28 = v144;
    *(void *)(v144 + 8) = v26;
    *uint64_t v26 = v28;
    std::string::size_type v144 = v21;
    *(void *)(v21 + 8) = &v144;
    uint64_t v146 = v22;
    uint64_t v102 = 0;
  }
  long long v147 = v103;
  uint64_t v148 = v104;
  uint64_t v104 = 0;
  long long v103 = 0uLL;
  char v149 = v25;
  char v150 = 1;
  AMSCore::URL::~URL((AMSCore::URL *)v92);
  while (2)
  {
    if (v125)
    {
      AMSCore::URL::~URL((AMSCore::URL *)&v112);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_49:
      }
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      ((void (*)(std::runtime_error *))v112.~runtime_error)(&v112);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_49;
      }
    }
LABEL_59:
    if (v133)
    {
      if (SBYTE7(v129) < 0) {
        operator delete(v128.__vftable);
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))v128.~runtime_error)(&v128);
    }
    uint64_t v16 = v135;
    if (v135 == (std::string *)v134)
    {
      uint64_t v16 = (std::string *)(*(uint64_t (**)(void *))(v134[0] + 32))(v134);
      if (!v150) {
        break;
      }
      goto LABEL_67;
    }
    if (v135) {
      uint64_t v16 = (std::string *)(*(uint64_t (**)(void))(v135->__r_.__value_.__r.__words[0] + 40))();
    }
    if (v150)
    {
LABEL_67:
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 24) = 0;
      if (BYTE8(v137))
      {
        *(std::runtime_error *)a4 = v136;
        *(void *)(a4 + 16) = v137;
        *(void *)&long long v137 = 0;
        v136.__vftable = 0;
        v136.__imp_.__imp_ = 0;
        *(unsigned char *)(a4 + 24) = 1;
      }
      *(unsigned char *)(a4 + 32) = 0;
      *(unsigned char *)(a4 + 56) = 0;
      if (v140[0])
      {
        *(_OWORD *)(a4 + 32) = v138;
        *(void *)(a4 + 48) = v139;
        uint64_t v139 = 0;
        long long v138 = 0uLL;
        *(unsigned char *)(a4 + 56) = 1;
      }
      *(unsigned char *)(a4 + 64) = 0;
      *(unsigned char *)(a4 + 88) = 0;
      if (v142)
      {
        *(_OWORD *)(a4 + 64) = *(_OWORD *)&v140[8];
        *(void *)(a4 + 80) = v141;
        uint64_t v141 = 0;
        *(_OWORD *)&v140[8] = 0uLL;
        *(unsigned char *)(a4 + 88) = 1;
      }
      *(_DWORD *)(a4 + 96) = v143;
      std::string::size_type v21 = a4 + 104;
      *(void *)(a4 + 104) = a4 + 104;
      *(void *)(a4 + 112) = a4 + 104;
      *(void *)(a4 + 120) = 0;
      if (&v136 != (std::runtime_error *)a4)
      {
        uint64_t v31 = v146;
        if (v146)
        {
          int v32 = v145;
          std::string::size_type v33 = v144;
          std::string::size_type v34 = *v145;
          *(void *)(v34 + 8) = *(void *)(v144 + 8);
          **(void **)(v33 + 8) = v34;
          std::string::size_type v35 = *(void *)(a4 + 104);
          *(void *)(v35 + 8) = v32;
          *int v32 = v35;
          *(void *)(a4 + 104) = v33;
          *(void *)(v33 + 8) = v21;
          *(void *)(a4 + 120) = v31;
          uint64_t v146 = 0;
        }
        *(_OWORD *)(a4 + 128) = v147;
        *(void *)(a4 + 144) = v148;
        uint64_t v148 = 0;
        long long v147 = 0uLL;
        *(unsigned char *)(a4 + 152) = 1;
        goto LABEL_89;
      }
LABEL_217:
      __break(1u);
LABEL_218:
      *(void *)&long long v138 = v21;
LABEL_219:
      *(std::runtime_error *)((char *)v5 + 168) = *(std::runtime_error *)((char *)v6 + 56);
      uint64_t v110 = 0;
      uint64_t v111 = 0;
      char v150 = 0;
      v106.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v16, (unsigned int *)v17);
      MEMORY[0x192FA3C30](&v106);
      if (v96[16])
      {
        v92[0] = &unk_1EDC827D8;
        char v91 = *(std::__shared_weak_count **)&v96[8];
        if (*(void *)&v96[8]
          && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v96[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
          std::__shared_weak_count::__release_weak(v91);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v94, *((unsigned int **)&v94 + 1));
        MEMORY[0x192FA3C30](v92);
      }
      continue;
    }
    break;
  }
  std::runtime_error::runtime_error(&v112, &v136);
  long long v113 = v137;
  v112.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  long long v114 = v138;
  uint64_t v115 = v139;
  if (v139)
  {
    *(void *)(*((void *)&v138 + 1) + 16) = (char *)&v114 + 8;
    *(void *)&long long v138 = (char *)&v138 + 8;
    *((void *)&v138 + 1) = 0;
    uint64_t v139 = 0;
  }
  else
  {
    *(void *)&long long v114 = (char *)&v114 + 8;
  }
  unsigned char v6[8] = *(std::runtime_error *)((char *)v5 + 168);
  *(void *)&v140[8] = 0;
  *(void *)unint64_t v140 = 0;
  v116[16] = 1;
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v92, (uint64_t)&v112);
  std::runtime_error::runtime_error((std::runtime_error *)a4, (const std::runtime_error *)v92);
  *(_OWORD *)(a4 + 16) = v93;
  *(void *)a4 = &unk_1EDC827D8;
  uint64_t v36 = *((void *)&v94 + 1);
  *(void *)(a4 + 32) = v94;
  *(void *)(a4 + 40) = v36;
  uint64_t v37 = a4 + 40;
  uint64_t v38 = v95;
  *(void *)(a4 + 48) = v95;
  if (v38)
  {
    *(void *)(v36 + 16) = v37;
    *(void *)&long long v94 = (char *)&v94 + 8;
    *((void *)&v94 + 1) = 0;
    uint64_t v95 = 0;
    uint64_t v36 = 0;
  }
  else
  {
    *(void *)(a4 + 32) = v37;
  }
  *(_OWORD *)(a4 + 56) = *(_OWORD *)v96;
  *(_OWORD *)unint64_t v96 = 0uLL;
  *(unsigned char *)(a4 + 152) = 0;
  v92[0] = &unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v94, (unsigned int *)v36);
  MEMORY[0x192FA3C30](v92);
  if (v116[16])
  {
    v112.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v39 = *(std::__shared_weak_count **)&v116[8];
    if (*(void *)&v116[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v116[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v114, *((unsigned int **)&v114 + 1));
    MEMORY[0x192FA3C30](&v112);
  }
LABEL_89:
  if (v150) {
    AMSCore::URL::~URL((AMSCore::URL *)&v136);
  }
  else {
    ((void (*)(std::runtime_error *))v136.~runtime_error)(&v136);
  }
  uint64_t result = (uint64_t)v152;
  if (v152 == v151) {
    return (*(uint64_t (**)(void *))(v151[0] + 32))(v151);
  }
  if (v152) {
    return (*(uint64_t (**)(void))(*v152 + 40))();
  }
  return result;
}

void sub_18DA66C08(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2)
  {
    if (SLOBYTE(STACK[0x257]) < 0) {
      operator delete((void *)STACK[0x240]);
    }
    if (a14 < 0) {
      operator delete(a9);
    }
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMSCore::ImmutableBag::getURLValueForKey(std::string const&,std::vector<std::unique_ptr<AMSCore::HTTPCookie>> const&)::$_0,std::allocator<AMSCore::ImmutableBag::getURLValueForKey(std::string const&,std::vector<std::unique_ptr<AMSCore::HTTPCookie>> const&)::$_0>,std::optional<std::string> ()(std::string_view)>::target_type()
{
}

uint64_t std::__function::__func<AMSCore::ImmutableBag::getURLValueForKey(std::string const&,std::vector<std::unique_ptr<AMSCore::HTTPCookie>> const&)::$_0,std::allocator<AMSCore::ImmutableBag::getURLValueForKey(std::string const&,std::vector<std::unique_ptr<AMSCore::HTTPCookie>> const&)::$_0>,std::optional<std::string> ()(std::string_view)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore12ImmutableBag17getURLValueForKeyERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allo"
                     "catorIcEEEERKNS1_6vectorINS1_10unique_ptrINS_10HTTPCookieENS1_14default_deleteISC_EEEENS5_ISF_EEEEE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore12ImmutableBag17getURLValueForKeyERKNSt3__112basic_stringIcNS1_11char_traitsIc"
                                "EENS1_9allocatorIcEEEERKNS1_6vectorINS1_10unique_ptrINS_10HTTPCookieENS1_14default_delet"
                                "eISC_EEEENS5_ISF_EEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore12ImmutableBag17getURLValueForKeyERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS1_6vectorINS1_10unique_ptrINS_10HTTPCookieENS1_14default_deleteISC_EEEENS5_ISF_EEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore12ImmutableBag17getURLValueForKeyERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS1_6vectorINS1_10unique_ptrINS_10HTTPCookieENS1_14default_deleteISC_EEEENS5_ISF_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMSCore::ImmutableBag::getURLValueForKey(std::string const&,std::vector<std::unique_ptr<AMSCore::HTTPCookie>> const&)::$_0,std::allocator<AMSCore::ImmutableBag::getURLValueForKey(std::string const&,std::vector<std::unique_ptr<AMSCore::HTTPCookie>> const&)::$_0>,std::optional<std::string> ()(std::string_view)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4 = *(uint64_t ***)(a1 + 8);
  unsigned __int8 v5 = *v4;
  uint64_t v6 = v4[1];
  if (*v4 == v6)
  {
LABEL_15:
    char v13 = 0;
    a3->__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v8 = *v5;
      if (*(char *)(*v5 + 71) < 0) {
        std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(v8 + 48), *(void *)(v8 + 56));
      }
      else {
        std::string v16 = *(std::string *)(v8 + 48);
      }
      int v17 = 5;
      size_t v9 = *(void *)(a2 + 8);
      std::string::size_type size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v16.__r_.__value_.__l.__size_;
      }
      if (size == v9)
      {
        int64_t v11 = (v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v16
            : (std::string *)v16.__r_.__value_.__r.__words[0];
        BOOL v12 = memcmp(v11, *(const void **)a2, v9) == 0;
      }
      else
      {
        BOOL v12 = 0;
      }
      _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8fe180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8fe180100EvEUlRT_E_JRNS0_6__baseILS12_1EJS8_bdxySE_SG_SO_SX_S10_EEEEEEDcS14_DpT0_((uint64_t)&v18, (uint64_t)&v16);
      if (v12) {
        break;
      }
      if (++v5 == v6) {
        goto LABEL_15;
      }
    }
    uint64_t v14 = *v5;
    if (*(char *)(*v5 + 119) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v14 + 96), *(void *)(v14 + 104));
    }
    else
    {
      long long v15 = *(_OWORD *)(v14 + 96);
      a3->__r_.__value_.__r.__words[2] = *(void *)(v14 + 112);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v15;
    }
    char v13 = 1;
  }
  a3[1].__r_.__value_.__s.__data_[0] = v13;
}

uint64_t std::__function::__func<AMSCore::ImmutableBag::getURLValueForKey(std::string const&,std::vector<std::unique_ptr<AMSCore::HTTPCookie>> const&)::$_0,std::allocator<AMSCore::ImmutableBag::getURLValueForKey(std::string const&,std::vector<std::unique_ptr<AMSCore::HTTPCookie>> const&)::$_0>,std::optional<std::string> ()(std::string_view)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDC82C60;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMSCore::ImmutableBag::getURLValueForKey(std::string const&,std::vector<std::unique_ptr<AMSCore::HTTPCookie>> const&)::$_0,std::allocator<AMSCore::ImmutableBag::getURLValueForKey(std::string const&,std::vector<std::unique_ptr<AMSCore::HTTPCookie>> const&)::$_0>,std::optional<std::string> ()(std::string_view)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EDC82C60;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMSCore::ImmutableBag::getURLValueForKey(std::string const&,std::vector<std::unique_ptr<AMSCore::HTTPCookie>> const&)::$_0,std::allocator<AMSCore::ImmutableBag::getURLValueForKey(std::string const&,std::vector<std::unique_ptr<AMSCore::HTTPCookie>> const&)::$_0>,std::optional<std::string> ()(std::string_view)>::~__func()
{
}

uint64_t AMSCore::ImmutableBag::getURLValueForKey(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 88))(a1, a2, a1 + 24);
}

void AMSCore::ImmutableBag::getVectorValueForKey(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 8);
  int64_t v44 = 0;
  AMSCore::BagDataAccessor::getValue((uint64_t)&v27, a2, v4, (uint64_t)v43);
  if (v33)
  {
    int cat = (int)v28.__cat_;
    if (LOBYTE(v28.__cat_) == 9)
    {
      if (LODWORD(v28.__cat_) == 9) {
        uint64_t v7 = (uint64_t *)&v27;
      }
      else {
        uint64_t v7 = 0;
      }
      std::vector<AMSCore::Any>::vector(&v35, v7);
      if (v33)
      {
        *(std::runtime_error *)int v20 = v35.std::runtime_error;
        *(void *)&v21.__val_ = *(void *)&v35.__ec_.__val_;
        LOBYTE(v21.__cat_) = (_BYTE)v29;
        char v26 = 1;
        goto LABEL_35;
      }
      goto LABEL_71;
    }
    if (LOBYTE(v28.__cat_) == 8)
    {
      std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v35);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v35, (uint64_t)"A vector was requested but the bag contains a map instead.", 58);
      std::stringbuf::str[abi:fe180100]((uint64_t)&v35.__imp_, (std::string *)v20);
      v35.__vftable = (std::system_error_vtbl *)*MEMORY[0x1E4FBA418];
      *(std::system_error_vtbl **)((char *)&v35.__vftable + (unint64_t)v35.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
      v35.__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
      if (v41 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x192FA3FD0](&v42);
      v52.__cat_ = (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance;
      *(void *)&v52.__val_ = 202;
      std::system_error::system_error(&v35, v52, (const std::string *)v20);
      if (*((char *)&v21.__val_ + 7) < 0) {
        operator delete(v20[0]);
      }
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      v35.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
      uint64_t v36 = &v37;
      long long v39 = 0uLL;
      std::runtime_error::runtime_error(&v45, &v35);
      std::error_code ec = v35.__ec_;
      uint64_t v6 = v37;
      v45.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::string::size_type v47 = v36;
      int v48 = v37;
      uint64_t v49 = v38;
      if (v38)
      {
        *((void *)v37 + 2) = &v48;
        uint64_t v6 = 0;
        uint64_t v36 = &v37;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
      }
      else
      {
        std::string::size_type v47 = &v48;
      }
      long long v50 = v39;
      long long v39 = 0uLL;
      v35.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v36, v6);
      MEMORY[0x192FA3C30](&v35);
      std::runtime_error::runtime_error((std::runtime_error *)v20, &v45);
      std::error_code v21 = ec;
      uint64_t v10 = v48;
      v20[0] = &unk_1EDC827D8;
      uint64_t v22 = v47;
      long long v23 = v48;
      uint64_t v24 = v49;
      if (v49)
      {
        *((void *)v48 + 2) = &v23;
        uint64_t v10 = 0;
        std::string::size_type v47 = &v48;
        int v48 = 0;
        uint64_t v49 = 0;
      }
      else
      {
        uint64_t v22 = &v23;
      }
      long long v25 = v50;
      long long v50 = 0uLL;
      char v26 = 0;
      v45.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v47, v10);
      MEMORY[0x192FA3C30](&v45);
      if (!v33) {
        goto LABEL_42;
      }
      goto LABEL_35;
    }
    LOBYTE(v45.__vftable) = 0;
    LODWORD(ec.__cat_) = -1;
    if (LODWORD(v28.__cat_) != -1)
    {
      ((void (*)(std::system_error *, std::runtime_error *, std::runtime_error *))off_1EDCA5520[LODWORD(v28.__cat_)])(&v35, &v45, &v27);
      LODWORD(ec.__cat_) = cat;
      if (LODWORD(v28.__cat_) != -1)
      {
        if (!LODWORD(v28.__cat_)) {
          goto LABEL_22;
        }
        ((void (*)(std::system_error *, std::runtime_error *))off_1EDCA54D0[LODWORD(v28.__cat_)])(&v35, &v27);
      }
    }
    LODWORD(v28.__cat_) = 0;
LABEL_22:
    std::vector<AMSCore::Any>::vector[abi:fe180100](&v35, (uint64_t)&v45, 1uLL);
    if (v33)
    {
      LOBYTE(v35.__ec_.__cat_) = (_BYTE)v29;
      *(std::runtime_error *)int v20 = v35.std::runtime_error;
      *(void *)&v21.__val_ = *(void *)&v35.__ec_.__val_;
      memset(&v35, 0, 24);
      LOBYTE(v21.__cat_) = (_BYTE)v29;
      char v26 = 1;
      if (LODWORD(ec.__cat_) != -1) {
        ((void (*)(char *, std::runtime_error *))off_1EDCA4F30[LODWORD(ec.__cat_)])(&v34, &v45);
      }
      goto LABEL_34;
    }
LABEL_71:
    __break(1u);
  }
  std::runtime_error::runtime_error(&v35, &v27);
  v35.__ec_ = v28;
  v35.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  uint64_t v36 = v29;
  uint64_t v37 = (unsigned int *)v30;
  uint64_t v38 = v31;
  if (v31)
  {
    *(void *)(v30 + 16) = &v37;
    int v29 = (unsigned int **)&v30;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
  }
  else
  {
    uint64_t v36 = &v37;
  }
  long long v39 = v32;
  long long v32 = 0uLL;
  LOBYTE(__p) = 1;
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v45, (uint64_t)&v35);
  std::runtime_error::runtime_error((std::runtime_error *)v20, &v45);
  std::error_code v21 = ec;
  uint64_t v8 = v48;
  v20[0] = &unk_1EDC827D8;
  uint64_t v22 = v47;
  long long v23 = v48;
  uint64_t v24 = v49;
  if (v49)
  {
    *((void *)v48 + 2) = &v23;
    std::string::size_type v47 = &v48;
    int v48 = 0;
    uint64_t v49 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v22 = &v23;
  }
  long long v25 = v50;
  long long v50 = 0uLL;
  char v26 = 0;
  v45.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v47, v8);
  MEMORY[0x192FA3C30](&v45);
  if ((_BYTE)__p)
  {
    v35.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
    size_t v9 = (std::__shared_weak_count *)*((void *)&v39 + 1);
    if (*((void *)&v39 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v39 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v36, v37);
    MEMORY[0x192FA3C30](&v35);
  }
LABEL_34:
  if (!v33)
  {
LABEL_42:
    ((void (*)(std::runtime_error *))v27.~runtime_error)(&v27);
    goto LABEL_43;
  }
LABEL_35:
  if (LODWORD(v28.__cat_) != -1) {
    ((void (*)(std::system_error *, std::runtime_error *))off_1EDCA4F30[LODWORD(v28.__cat_)])(&v35, &v27);
  }
LABEL_43:
  if (v44 == v43)
  {
    (*(void (**)(void *))(v43[0] + 32))(v43);
    if (v26)
    {
LABEL_47:
      *(_OWORD *)a3 = *(_OWORD *)v20;
      *(void *)(a3 + 16) = *(void *)&v21.__val_;
      *(unsigned char *)(a3 + 72) = 1;
      return;
    }
  }
  else
  {
    if (v44) {
      (*(void (**)(void *))(*v44 + 40))(v44);
    }
    if (v26) {
      goto LABEL_47;
    }
  }
  std::runtime_error::runtime_error(&v35, (const std::runtime_error *)v20);
  v35.__ec_ = v21;
  v35.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  uint64_t v36 = v22;
  uint64_t v37 = v23;
  uint64_t v38 = v24;
  if (v24)
  {
    *((void *)v23 + 2) = &v37;
    uint64_t v22 = &v23;
    long long v23 = 0;
    uint64_t v24 = 0;
  }
  else
  {
    uint64_t v36 = &v37;
  }
  long long v39 = v25;
  long long v25 = 0uLL;
  LOBYTE(__p) = 1;
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v27, (uint64_t)&v35);
  std::runtime_error::runtime_error((std::runtime_error *)a3, &v27);
  *(std::error_code *)(a3 + 16) = v28;
  *(void *)a3 = &unk_1EDC827D8;
  uint64_t v11 = v30;
  *(void *)(a3 + 32) = v29;
  *(void *)(a3 + 40) = v11;
  uint64_t v12 = a3 + 40;
  uint64_t v13 = v31;
  *(void *)(a3 + 48) = v31;
  if (v13)
  {
    *(void *)(v11 + 16) = v12;
    int v29 = (unsigned int **)&v30;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    *(void *)(a3 + 32) = v12;
  }
  *(_OWORD *)(a3 + 56) = v32;
  long long v32 = 0uLL;
  *(unsigned char *)(a3 + 72) = 0;
  v27.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v29, (unsigned int *)v11);
  MEMORY[0x192FA3C30](&v27);
  if ((_BYTE)__p)
  {
    v35.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
    uint64_t v14 = (std::__shared_weak_count *)*((void *)&v39 + 1);
    if (*((void *)&v39 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v39 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v36, v37);
    MEMORY[0x192FA3C30](&v35);
  }
  long long v15 = (char *)v20[0];
  if (v26)
  {
    if (v20[0])
    {
      std::string v16 = (char *)v20[1];
      int v17 = v20[0];
      if (v20[1] != v20[0])
      {
        do
        {
          char v18 = v16 - 32;
          uint64_t v19 = *((unsigned int *)v16 - 2);
          if (v19 != -1) {
            ((void (*)(std::system_error *, char *))off_1EDCA4FD0[v19])(&v35, v16 - 32);
          }
          *((_DWORD *)v16 - 2) = -1;
          v16 -= 32;
        }
        while (v18 != v15);
        int v17 = v20[0];
      }
      v20[1] = v15;
      operator delete(v17);
    }
  }
  else
  {
    (*(void (**)(void **))v20[0])(v20);
  }
}

void sub_18DA6780C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t AMSCore::ImmutableBag::getUnsignedIntValueForKey@<X0>(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 8);
  std::runtime_error v45 = 0;
  AMSCore::BagDataAccessor::getValue((uint64_t)&v37, a2, v4, (uint64_t)v44);
  if (v43)
  {
    char cat = (char)v38.__cat_;
    if (LODWORD(v38.__cat_) == -1) {
      char cat = 0;
    }
    switch(cat)
    {
      case 1:
        unint64_t v10 = 0;
        LOBYTE(v6) = v37.__vftable;
        goto LABEL_20;
      case 2:
        unint64_t v6 = (unint64_t)*(double *)&v37.__vftable;
        goto LABEL_19;
      case 3:
      case 4:
        unint64_t v6 = (unint64_t)v37.__vftable;
LABEL_19:
        unint64_t v10 = v6 & 0xFFFFFFFFFFFFFF00;
LABEL_20:
        v18.__vftable = (std::runtime_error_vtbl *)(v10 | v6);
        LOBYTE(v18.__imp_.__imp_) = (_BYTE)v39;
        char v24 = 1;
        break;
      default:
        AMSCore::StringUtils::join<char [48]>((std::string *)&v18, "Bag type is not convertible to an unsigned int.");
        v47.__cat_ = (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance;
        *(void *)&v47.__val_ = 202;
        std::system_error::system_error(&v31, v47, (const std::string *)&v18);
        if (*((char *)&v19.__val_ + 7) < 0) {
          operator delete(v18.__vftable);
        }
        char v33 = 0;
        uint64_t v34 = 0;
        v31.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
        long long v32 = &v33;
        long long v35 = 0uLL;
        std::runtime_error::runtime_error(&v25, &v31);
        std::error_code ec = v31.__ec_;
        uint64_t v11 = v33;
        v25.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        std::runtime_error v27 = v32;
        std::error_code v28 = v33;
        uint64_t v29 = v34;
        if (v34)
        {
          *((void *)v33 + 2) = &v28;
          uint64_t v11 = 0;
          long long v32 = &v33;
          char v33 = 0;
          uint64_t v34 = 0;
        }
        else
        {
          std::runtime_error v27 = &v28;
        }
        long long v30 = v35;
        long long v35 = 0uLL;
        v31.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v32, v11);
        MEMORY[0x192FA3C30](&v31);
        std::runtime_error::runtime_error(&v18, &v25);
        std::error_code v19 = ec;
        uint64_t v12 = v28;
        v18.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        int v20 = v27;
        std::error_code v21 = v28;
        uint64_t v22 = v29;
        if (v29)
        {
          *((void *)v28 + 2) = &v21;
          uint64_t v12 = 0;
          std::runtime_error v27 = &v28;
          std::error_code v28 = 0;
          uint64_t v29 = 0;
        }
        else
        {
          int v20 = &v21;
        }
        long long v23 = v30;
        long long v30 = 0uLL;
        char v24 = 0;
        v25.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v27, v12);
        size_t v9 = (std::system_error *)&v25;
        goto LABEL_33;
    }
  }
  else
  {
    std::runtime_error::runtime_error(&v31, &v37);
    v31.__ec_ = v38;
    v31.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
    long long v32 = v39;
    char v33 = v40;
    uint64_t v34 = v41;
    if (v41)
    {
      *((void *)v40 + 2) = &v33;
      long long v39 = &v40;
      long long v40 = 0;
      uint64_t v41 = 0;
    }
    else
    {
      long long v32 = &v33;
    }
    long long v35 = v42;
    long long v42 = 0uLL;
    char v36 = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v25, (uint64_t)&v31);
    std::runtime_error::runtime_error(&v18, &v25);
    std::error_code v19 = ec;
    uint64_t v7 = v28;
    v18.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    int v20 = v27;
    std::error_code v21 = v28;
    uint64_t v22 = v29;
    if (v29)
    {
      *((void *)v28 + 2) = &v21;
      std::runtime_error v27 = &v28;
      std::error_code v28 = 0;
      uint64_t v29 = 0;
      uint64_t v7 = 0;
    }
    else
    {
      int v20 = &v21;
    }
    long long v23 = v30;
    long long v30 = 0uLL;
    char v24 = 0;
    v25.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v27, v7);
    MEMORY[0x192FA3C30](&v25);
    if (v36)
    {
      v31.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
      uint64_t v8 = (std::__shared_weak_count *)*((void *)&v35 + 1);
      if (*((void *)&v35 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v32, v33);
      size_t v9 = &v31;
LABEL_33:
      MEMORY[0x192FA3C30](v9);
      if (v43) {
        goto LABEL_22;
      }
LABEL_34:
      ((void (*)(std::runtime_error *))v37.~runtime_error)(&v37);
      goto LABEL_35;
    }
  }
  if (!v43) {
    goto LABEL_34;
  }
LABEL_22:
  if (LODWORD(v38.__cat_) != -1) {
    ((void (*)(std::system_error *, std::runtime_error *))off_1EDCA4F30[LODWORD(v38.__cat_)])(&v31, &v37);
  }
LABEL_35:
  uint64_t result = (uint64_t)v45;
  if (v45 == v44)
  {
    uint64_t result = (*(uint64_t (**)(void *))(v44[0] + 32))(v44);
    if (v24)
    {
LABEL_39:
      *(void *)a3 = v18.__vftable;
      *(unsigned char *)(a3 + 72) = 1;
      return result;
    }
  }
  else
  {
    if (v45) {
      uint64_t result = (*(uint64_t (**)(void *))(*v45 + 40))(v45);
    }
    if (v24) {
      goto LABEL_39;
    }
  }
  std::runtime_error::runtime_error(&v37, &v18);
  std::error_code v38 = v19;
  v37.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  long long v39 = v20;
  long long v40 = v21;
  uint64_t v41 = v22;
  if (v22)
  {
    *((void *)v21 + 2) = &v40;
    int v20 = &v21;
    std::error_code v21 = 0;
    uint64_t v22 = 0;
  }
  else
  {
    long long v39 = &v40;
  }
  long long v42 = v23;
  long long v23 = 0uLL;
  char v43 = 1;
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v31, (uint64_t)&v37);
  std::runtime_error::runtime_error((std::runtime_error *)a3, &v31);
  *(std::error_code *)(a3 + 16) = v31.__ec_;
  *(void *)a3 = &unk_1EDC827D8;
  uint64_t v14 = v33;
  *(void *)(a3 + 32) = v32;
  *(void *)(a3 + 40) = v14;
  uint64_t v15 = a3 + 40;
  uint64_t v16 = v34;
  *(void *)(a3 + 48) = v34;
  if (v16)
  {
    *((void *)v14 + 2) = v15;
    long long v32 = &v33;
    char v33 = 0;
    uint64_t v34 = 0;
    uint64_t v14 = 0;
  }
  else
  {
    *(void *)(a3 + 32) = v15;
  }
  *(_OWORD *)(a3 + 56) = v35;
  long long v35 = 0uLL;
  *(unsigned char *)(a3 + 72) = 0;
  v31.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v32, v14);
  uint64_t result = MEMORY[0x192FA3C30](&v31);
  if (v43)
  {
    v37.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    int v17 = (std::__shared_weak_count *)*((void *)&v42 + 1);
    if (*((void *)&v42 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v42 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v39, v40);
    uint64_t result = MEMORY[0x192FA3C30](&v37);
  }
  if (!v24) {
    return ((uint64_t (*)(std::runtime_error *))v18.~runtime_error)(&v18);
  }
  return result;
}

void sub_18DA67F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2)
  {
    if (a15 < 0) {
      operator delete(__p);
    }
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::ImmutableBag::getStringValueForKey(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 8);
  *((void *)&v22 + 1) = 0;
  AMSCore::BagDataAccessor::getStringValue((uint64_t)&v14, a2, v4, (uint64_t)&v21);
  if (v20)
  {
    *(std::runtime_error *)a3 = v14;
    *(void *)(a3 + 16) = v15;
    v14.__vftable = 0;
    v14.__imp_.__imp_ = 0;
    *(void *)&long long v15 = 0;
    *(unsigned char *)(a3 + 72) = 1;
  }
  else
  {
    std::runtime_error::runtime_error(&v21, &v14);
    long long v22 = v15;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    long long v23 = v16;
    v24[0] = (unsigned int *)v17;
    v24[1] = v18;
    if (v18)
    {
      *(void *)(v17 + 16) = v24;
      uint64_t v16 = (unsigned int **)&v17;
      uint64_t v17 = 0;
      std::runtime_error v18 = 0;
    }
    else
    {
      long long v23 = v24;
    }
    long long v25 = v19;
    long long v19 = 0uLL;
    char v26 = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v9, (uint64_t)&v21);
    std::runtime_error::runtime_error((std::runtime_error *)a3, v9);
    *(std::runtime_error *)(a3 + 16) = v9[1];
    *(void *)a3 = &unk_1EDC827D8;
    uint64_t v5 = v11;
    *(void *)(a3 + 32) = v10;
    *(void *)(a3 + 40) = v5;
    uint64_t v6 = a3 + 40;
    uint64_t v7 = v12;
    *(void *)(a3 + 48) = v12;
    if (v7)
    {
      *(void *)(v5 + 16) = v6;
      unint64_t v10 = &v11;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v5 = 0;
    }
    else
    {
      *(void *)(a3 + 32) = v6;
    }
    *(_OWORD *)(a3 + 56) = v13;
    long long v13 = 0uLL;
    *(unsigned char *)(a3 + 72) = 0;
    v9[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v5);
    MEMORY[0x192FA3C30](v9);
    if (v26)
    {
      v21.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v8 = (std::__shared_weak_count *)*((void *)&v25 + 1);
      if (*((void *)&v25 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v25 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v23, v24[0]);
      MEMORY[0x192FA3C30](&v21);
    }
    if (v20)
    {
      if (SBYTE7(v15) < 0) {
        operator delete(v14.__vftable);
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))v14.~runtime_error)(&v14);
    }
  }
}

void AMSCore::ImmutableBag::getMapValueForKey(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 8);
  *((void *)&v25 + 1) = 0;
  AMSCore::BagDataAccessor::getMapValue((uint64_t)&v17, a2, v4, (uint64_t)&v24);
  if (v23)
  {
    std::string::size_type imp = v17.__imp_.__imp_;
    *(void *)a3 = v17.__vftable;
    *(void *)(a3 + 8) = imp;
    uint64_t v6 = a3 + 8;
    uint64_t v7 = v18;
    *(void *)(a3 + 16) = v18;
    if (v7)
    {
      *((void *)imp + 2) = v6;
      v17.__vftable = (std::runtime_error_vtbl *)&v17.__imp_;
      v17.__imp_.__imp_ = 0;
      *(void *)&long long v18 = 0;
    }
    else
    {
      *(void *)a3 = v6;
    }
    *(unsigned char *)(a3 + 72) = 1;
  }
  else
  {
    std::runtime_error::runtime_error(&v24, &v17);
    long long v25 = v18;
    v24.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    char v26 = v19;
    v27[0] = (unsigned int *)v20;
    v27[1] = v21;
    if (v21)
    {
      *(void *)(v20 + 16) = v27;
      long long v19 = (unsigned int **)&v20;
      uint64_t v20 = 0;
      std::runtime_error v21 = 0;
    }
    else
    {
      char v26 = v27;
    }
    long long v28 = v22;
    long long v22 = 0uLL;
    char v29 = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v12, (uint64_t)&v24);
    std::runtime_error::runtime_error((std::runtime_error *)a3, v12);
    *(std::runtime_error *)(a3 + 16) = v12[1];
    *(void *)a3 = &unk_1EDC827D8;
    uint64_t v8 = v14;
    *(void *)(a3 + 32) = v13;
    *(void *)(a3 + 40) = v8;
    uint64_t v9 = a3 + 40;
    uint64_t v10 = v15;
    *(void *)(a3 + 48) = v15;
    if (v10)
    {
      *(void *)(v8 + 16) = v9;
      long long v13 = &v14;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v8 = 0;
    }
    else
    {
      *(void *)(a3 + 32) = v9;
    }
    *(_OWORD *)(a3 + 56) = v16;
    long long v16 = 0uLL;
    *(unsigned char *)(a3 + 72) = 0;
    v12[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v13, (unsigned int *)v8);
    MEMORY[0x192FA3C30](v12);
    if (v29)
    {
      v24.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v11 = (std::__shared_weak_count *)*((void *)&v28 + 1);
      if (*((void *)&v28 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v26, v27[0]);
      MEMORY[0x192FA3C30](&v24);
    }
  }
  if (v23) {
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v17, (unsigned int *)v17.__imp_.__imp_);
  }
  else {
    ((void (*)(std::runtime_error *))v17.~runtime_error)(&v17);
  }
}

uint64_t AMSCore::ImmutableBag::getIntValueForKey@<X0>(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 8);
  std::error_code v47 = 0;
  AMSCore::BagDataAccessor::getValue((uint64_t)&v31, a2, v4, (uint64_t)v46);
  if (v37)
  {
    char cat = (char)v32.__cat_;
    if (LODWORD(v32.__cat_) == -1) {
      char cat = 0;
    }
    switch(cat)
    {
      case 1:
        unint64_t v11 = 0;
        LOBYTE(v6) = v31.__vftable;
        goto LABEL_27;
      case 2:
        uint64_t v6 = (uint64_t)*(double *)&v31.__vftable;
        goto LABEL_26;
      case 3:
      case 4:
        uint64_t v6 = (uint64_t)v31.__vftable;
        goto LABEL_26;
      case 7:
        uint64_t v6 = (uint64_t)v31.__vftable / 1000;
LABEL_26:
        unint64_t v11 = v6 & 0xFFFFFFFFFFFFFF00;
LABEL_27:
        v18.__vftable = (std::runtime_error_vtbl *)(v11 | v6);
        LOBYTE(v18.__imp_.__imp_) = (_BYTE)v33;
        char v24 = 1;
        break;
      default:
        std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v38);
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Bag type is not int.", 20);
        std::stringbuf::str[abi:fe180100]((uint64_t)&v38.__imp_, (std::string *)&v18);
        v38.__vftable = (std::system_error_vtbl *)*MEMORY[0x1E4FBA418];
        *(std::system_error_vtbl **)((char *)&v38.__vftable + (unint64_t)v38.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
        v38.__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
        if (v44 < 0) {
          operator delete(__p);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x192FA3FD0](&v45);
        v49.__cat_ = (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance;
        *(void *)&v49.__val_ = 202;
        std::system_error::system_error(&v38, v49, (const std::string *)&v18);
        if (*((char *)&v19.__val_ + 7) < 0) {
          operator delete(v18.__vftable);
        }
        long long v40 = 0;
        uint64_t v41 = 0;
        v38.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
        long long v39 = &v40;
        long long v42 = 0uLL;
        std::runtime_error::runtime_error(&v25, &v38);
        std::error_code ec = v38.__ec_;
        uint64_t v10 = v40;
        v25.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        uint64_t v27 = v39;
        long long v28 = v40;
        uint64_t v29 = v41;
        if (v41)
        {
          *((void *)v40 + 2) = &v28;
          uint64_t v10 = 0;
          long long v39 = &v40;
          long long v40 = 0;
          uint64_t v41 = 0;
        }
        else
        {
          uint64_t v27 = &v28;
        }
        long long v30 = v42;
        long long v42 = 0uLL;
        v38.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v39, v10);
        MEMORY[0x192FA3C30](&v38);
        std::runtime_error::runtime_error(&v18, &v25);
        std::error_code v19 = ec;
        uint64_t v12 = v28;
        v18.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        uint64_t v20 = v27;
        std::runtime_error v21 = v28;
        uint64_t v22 = v29;
        if (v29)
        {
          *((void *)v28 + 2) = &v21;
          uint64_t v12 = 0;
          uint64_t v27 = &v28;
          long long v28 = 0;
          uint64_t v29 = 0;
        }
        else
        {
          uint64_t v20 = &v21;
        }
        long long v23 = v30;
        long long v30 = 0uLL;
        char v24 = 0;
        v25.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v27, v12);
        uint64_t v9 = (std::system_error *)&v25;
        goto LABEL_36;
    }
  }
  else
  {
    std::runtime_error::runtime_error(&v38, &v31);
    v38.__ec_ = v32;
    v38.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
    long long v39 = v33;
    long long v40 = (unsigned int *)v34;
    uint64_t v41 = v35;
    if (v35)
    {
      *(void *)(v34 + 16) = &v40;
      char v33 = (unsigned int **)&v34;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
    }
    else
    {
      long long v39 = &v40;
    }
    long long v42 = v36;
    long long v36 = 0uLL;
    LOBYTE(__p) = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v25, (uint64_t)&v38);
    std::runtime_error::runtime_error(&v18, &v25);
    std::error_code v19 = ec;
    uint64_t v7 = v28;
    v18.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v20 = v27;
    std::runtime_error v21 = v28;
    uint64_t v22 = v29;
    if (v29)
    {
      *((void *)v28 + 2) = &v21;
      uint64_t v27 = &v28;
      long long v28 = 0;
      uint64_t v29 = 0;
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v20 = &v21;
    }
    long long v23 = v30;
    long long v30 = 0uLL;
    char v24 = 0;
    v25.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v27, v7);
    MEMORY[0x192FA3C30](&v25);
    if ((_BYTE)__p)
    {
      v38.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
      uint64_t v8 = (std::__shared_weak_count *)*((void *)&v42 + 1);
      if (*((void *)&v42 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v42 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v39, v40);
      uint64_t v9 = &v38;
LABEL_36:
      MEMORY[0x192FA3C30](v9);
      if (v37) {
        goto LABEL_29;
      }
LABEL_37:
      ((void (*)(std::runtime_error *))v31.~runtime_error)(&v31);
      goto LABEL_38;
    }
  }
  if (!v37) {
    goto LABEL_37;
  }
LABEL_29:
  if (LODWORD(v32.__cat_) != -1) {
    ((void (*)(std::system_error *, std::runtime_error *))off_1EDCA4F30[LODWORD(v32.__cat_)])(&v38, &v31);
  }
LABEL_38:
  uint64_t result = (uint64_t)v47;
  if (v47 == v46)
  {
    uint64_t result = (*(uint64_t (**)(void *))(v46[0] + 32))(v46);
    if (v24)
    {
LABEL_42:
      *(void *)a3 = v18.__vftable;
      *(unsigned char *)(a3 + 72) = 1;
      return result;
    }
  }
  else
  {
    if (v47) {
      uint64_t result = (*(uint64_t (**)(void *))(*v47 + 40))(v47);
    }
    if (v24) {
      goto LABEL_42;
    }
  }
  std::runtime_error::runtime_error(&v38, &v18);
  v38.__ec_ = v19;
  v38.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  long long v39 = v20;
  long long v40 = v21;
  uint64_t v41 = v22;
  if (v22)
  {
    *((void *)v21 + 2) = &v40;
    uint64_t v20 = &v21;
    std::runtime_error v21 = 0;
    uint64_t v22 = 0;
  }
  else
  {
    long long v39 = &v40;
  }
  long long v42 = v23;
  long long v23 = 0uLL;
  LOBYTE(__p) = 1;
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v31, (uint64_t)&v38);
  std::runtime_error::runtime_error((std::runtime_error *)a3, &v31);
  *(std::error_code *)(a3 + 16) = v32;
  *(void *)a3 = &unk_1EDC827D8;
  uint64_t v14 = v34;
  *(void *)(a3 + 32) = v33;
  *(void *)(a3 + 40) = v14;
  uint64_t v15 = a3 + 40;
  uint64_t v16 = v35;
  *(void *)(a3 + 48) = v35;
  if (v16)
  {
    *(void *)(v14 + 16) = v15;
    char v33 = (unsigned int **)&v34;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v14 = 0;
  }
  else
  {
    *(void *)(a3 + 32) = v15;
  }
  *(_OWORD *)(a3 + 56) = v36;
  long long v36 = 0uLL;
  *(unsigned char *)(a3 + 72) = 0;
  v31.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v33, (unsigned int *)v14);
  uint64_t result = MEMORY[0x192FA3C30](&v31);
  if ((_BYTE)__p)
  {
    v38.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
    std::runtime_error v17 = (std::__shared_weak_count *)*((void *)&v42 + 1);
    if (*((void *)&v42 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v42 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v39, v40);
    uint64_t result = MEMORY[0x192FA3C30](&v38);
  }
  if (!v24) {
    return ((uint64_t (*)(std::runtime_error *))v18.~runtime_error)(&v18);
  }
  return result;
}

void sub_18DA68D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::ImmutableBag::getDoubleValueForKey@<X0>(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 8);
  char v43 = 0;
  AMSCore::BagDataAccessor::getValue((uint64_t)&v35, a2, v4, (uint64_t)v42);
  if (v41)
  {
    char v5 = BYTE8(v36);
    if (DWORD2(v36) == -1) {
      char v5 = 0;
    }
    switch(v5)
    {
      case 1:
        double v6 = 0.0;
        if (LOBYTE(v35.__vftable)) {
          double v6 = 1.0;
        }
        break;
      case 2:
        double v6 = *(double *)&v35.__vftable;
        break;
      case 3:
        double v6 = (double)(uint64_t)v35.__vftable;
        break;
      case 4:
        double v6 = (double)(unint64_t)v35.__vftable;
        break;
      default:
        AMSCore::Unexpected<AMSCore::Error,AMSCore::BagErrorCode,char const(&)[24]>((uint64_t)&v28, 0xCAu, "Bag type is not double.");
        std::runtime_error::runtime_error(&v15, &v28);
        long long v16 = v29;
        uint64_t v9 = v31;
        v15.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        std::runtime_error v17 = v30;
        std::runtime_error v18 = v31;
        uint64_t v19 = v32;
        if (v32)
        {
          *((void *)v31 + 2) = &v18;
          long long v30 = &v31;
          std::runtime_error v31 = 0;
          uint64_t v32 = 0;
          uint64_t v9 = 0;
        }
        else
        {
          std::runtime_error v17 = &v18;
        }
        long long v20 = v33;
        long long v33 = 0uLL;
        char v21 = 0;
        v28.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        goto LABEL_30;
    }
    *(double *)&v15.__vftable = v6;
    LOBYTE(v15.__imp_.__imp_) = (_BYTE)v37;
    char v21 = 1;
  }
  else
  {
    std::runtime_error::runtime_error(&v28, &v35);
    long long v29 = v36;
    v28.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    long long v30 = v37;
    std::runtime_error v31 = v38;
    uint64_t v32 = v39;
    if (v39)
    {
      *((void *)v38 + 2) = &v31;
      char v37 = &v38;
      std::system_error v38 = 0;
      uint64_t v39 = 0;
    }
    else
    {
      long long v30 = &v31;
    }
    long long v33 = v40;
    long long v40 = 0uLL;
    char v34 = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v22, (uint64_t)&v28);
    std::runtime_error::runtime_error(&v15, &v22);
    long long v16 = v23;
    uint64_t v7 = (unsigned int *)v25;
    v15.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::runtime_error v17 = v24;
    std::runtime_error v18 = (unsigned int *)v25;
    uint64_t v19 = v26;
    if (v26)
    {
      *(void *)(v25 + 16) = &v18;
      char v24 = (unsigned int **)&v25;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v7 = 0;
    }
    else
    {
      std::runtime_error v17 = &v18;
    }
    long long v20 = v27;
    long long v27 = 0uLL;
    char v21 = 0;
    v22.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v24, v7);
    MEMORY[0x192FA3C30](&v22);
    if (v34)
    {
      v28.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v8 = (std::__shared_weak_count *)*((void *)&v33 + 1);
      if (*((void *)&v33 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v33 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      uint64_t v9 = v31;
LABEL_30:
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v30, v9);
      MEMORY[0x192FA3C30](&v28);
      if (v41) {
        goto LABEL_24;
      }
LABEL_31:
      ((void (*)(std::runtime_error *))v35.~runtime_error)(&v35);
      goto LABEL_32;
    }
  }
  if (!v41) {
    goto LABEL_31;
  }
LABEL_24:
  if (DWORD2(v36) != -1) {
    ((void (*)(std::runtime_error *, std::runtime_error *))off_1EDCA4F30[DWORD2(v36)])(&v28, &v35);
  }
LABEL_32:
  uint64_t result = (uint64_t)v43;
  if (v43 == v42)
  {
    uint64_t result = (*(uint64_t (**)(void *))(v42[0] + 32))(v42);
    if (v21)
    {
LABEL_36:
      *(void *)a3 = v15.__vftable;
      *(unsigned char *)(a3 + 72) = 1;
      return result;
    }
  }
  else
  {
    if (v43) {
      uint64_t result = (*(uint64_t (**)(void *))(*v43 + 40))(v43);
    }
    if (v21) {
      goto LABEL_36;
    }
  }
  std::runtime_error::runtime_error(&v35, &v15);
  long long v36 = v16;
  v35.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  char v37 = v17;
  std::system_error v38 = v18;
  uint64_t v39 = v19;
  if (v19)
  {
    *((void *)v18 + 2) = &v38;
    std::runtime_error v17 = &v18;
    std::runtime_error v18 = 0;
    uint64_t v19 = 0;
  }
  else
  {
    char v37 = &v38;
  }
  long long v40 = v20;
  long long v20 = 0uLL;
  char v41 = 1;
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v28, (uint64_t)&v35);
  std::runtime_error::runtime_error((std::runtime_error *)a3, &v28);
  *(_OWORD *)(a3 + 16) = v29;
  *(void *)a3 = &unk_1EDC827D8;
  unint64_t v11 = v31;
  *(void *)(a3 + 32) = v30;
  *(void *)(a3 + 40) = v11;
  uint64_t v12 = a3 + 40;
  uint64_t v13 = v32;
  *(void *)(a3 + 48) = v32;
  if (v13)
  {
    *((void *)v11 + 2) = v12;
    long long v30 = &v31;
    std::runtime_error v31 = 0;
    uint64_t v32 = 0;
    unint64_t v11 = 0;
  }
  else
  {
    *(void *)(a3 + 32) = v12;
  }
  *(_OWORD *)(a3 + 56) = v33;
  long long v33 = 0uLL;
  *(unsigned char *)(a3 + 72) = 0;
  v28.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v30, v11);
  uint64_t result = MEMORY[0x192FA3C30](&v28);
  if (v41)
  {
    v35.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v14 = (std::__shared_weak_count *)*((void *)&v40 + 1);
    if (*((void *)&v40 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v40 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v37, v38);
    uint64_t result = MEMORY[0x192FA3C30](&v35);
  }
  if (!v21) {
    return ((uint64_t (*)(std::runtime_error *))v15.~runtime_error)(&v15);
  }
  return result;
}

void sub_18DA69380(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AMSCore::ImmutableBag::getBoolValueForKey@<X0>(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v45 = 0;
  AMSCore::BagDataAccessor::getValue((uint64_t)&v37, a2, v4, (uint64_t)v44);
  if (v43)
  {
    char cat = (char)v38.__cat_;
    if (LODWORD(v38.__cat_) == -1) {
      char cat = 0;
    }
    switch(cat)
    {
      case 1:
        __int16 v10 = LOBYTE(v37.__vftable);
        goto LABEL_22;
      case 2:
        BOOL v6 = *(double *)&v37.__vftable == 0.0;
        goto LABEL_19;
      case 3:
      case 4:
        BOOL v6 = v37.__vftable == 0;
LABEL_19:
        __int16 v10 = !v6;
LABEL_22:
        LOWORD(v18.__vftable) = v10 | (v39 << 8);
        char v24 = 1;
        break;
      default:
        AMSCore::StringUtils::join<char [22]>((std::string *)&v18, "Bag type is not BOOL.");
        v47.__cat_ = (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance;
        *(void *)&v47.__val_ = 202;
        std::system_error::system_error(&v31, v47, (const std::string *)&v18);
        if (*((char *)&v19.__val_ + 7) < 0) {
          operator delete(v18.__vftable);
        }
        long long v33 = 0;
        uint64_t v34 = 0;
        v31.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
        uint64_t v32 = &v33;
        long long v35 = 0uLL;
        std::runtime_error::runtime_error(&v25, &v31);
        std::error_code ec = v31.__ec_;
        unint64_t v11 = v33;
        v25.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        long long v27 = v32;
        std::runtime_error v28 = v33;
        uint64_t v29 = v34;
        if (v34)
        {
          *((void *)v33 + 2) = &v28;
          unint64_t v11 = 0;
          uint64_t v32 = &v33;
          long long v33 = 0;
          uint64_t v34 = 0;
        }
        else
        {
          long long v27 = &v28;
        }
        long long v30 = v35;
        long long v35 = 0uLL;
        v31.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v32, v11);
        MEMORY[0x192FA3C30](&v31);
        std::runtime_error::runtime_error(&v18, &v25);
        std::error_code v19 = ec;
        uint64_t v12 = v28;
        v18.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        long long v20 = v27;
        char v21 = v28;
        uint64_t v22 = v29;
        if (v29)
        {
          *((void *)v28 + 2) = &v21;
          uint64_t v12 = 0;
          long long v27 = &v28;
          std::runtime_error v28 = 0;
          uint64_t v29 = 0;
        }
        else
        {
          long long v20 = &v21;
        }
        long long v23 = v30;
        long long v30 = 0uLL;
        char v24 = 0;
        v25.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v27, v12);
        uint64_t v9 = (std::system_error *)&v25;
        goto LABEL_35;
    }
  }
  else
  {
    std::runtime_error::runtime_error(&v31, &v37);
    v31.__ec_ = v38;
    v31.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
    uint64_t v32 = v39;
    long long v33 = v40;
    uint64_t v34 = v41;
    if (v41)
    {
      *((void *)v40 + 2) = &v33;
      uint64_t v39 = &v40;
      long long v40 = 0;
      uint64_t v41 = 0;
    }
    else
    {
      uint64_t v32 = &v33;
    }
    long long v35 = v42;
    long long v42 = 0uLL;
    char v36 = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v25, (uint64_t)&v31);
    std::runtime_error::runtime_error(&v18, &v25);
    std::error_code v19 = ec;
    uint64_t v7 = v28;
    v18.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    long long v20 = v27;
    char v21 = v28;
    uint64_t v22 = v29;
    if (v29)
    {
      *((void *)v28 + 2) = &v21;
      long long v27 = &v28;
      std::runtime_error v28 = 0;
      uint64_t v29 = 0;
      uint64_t v7 = 0;
    }
    else
    {
      long long v20 = &v21;
    }
    long long v23 = v30;
    long long v30 = 0uLL;
    char v24 = 0;
    v25.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v27, v7);
    MEMORY[0x192FA3C30](&v25);
    if (v36)
    {
      v31.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
      uint64_t v8 = (std::__shared_weak_count *)*((void *)&v35 + 1);
      if (*((void *)&v35 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v32, v33);
      uint64_t v9 = &v31;
LABEL_35:
      MEMORY[0x192FA3C30](v9);
      if (v43) {
        goto LABEL_24;
      }
LABEL_36:
      ((void (*)(std::runtime_error *))v37.~runtime_error)(&v37);
      goto LABEL_37;
    }
  }
  if (!v43) {
    goto LABEL_36;
  }
LABEL_24:
  if (LODWORD(v38.__cat_) != -1) {
    ((void (*)(std::system_error *, std::runtime_error *))off_1EDCA4F30[LODWORD(v38.__cat_)])(&v31, &v37);
  }
LABEL_37:
  uint64_t result = (uint64_t)v45;
  if (v45 == v44)
  {
    uint64_t result = (*(uint64_t (**)(void *))(v44[0] + 32))(v44);
    if (v24)
    {
LABEL_41:
      *(unsigned char *)a3 = v18.__vftable;
      *(unsigned char *)(a3 + 72) = 1;
      return result;
    }
  }
  else
  {
    if (v45) {
      uint64_t result = (*(uint64_t (**)(void *))(*v45 + 40))(v45);
    }
    if (v24) {
      goto LABEL_41;
    }
  }
  std::runtime_error::runtime_error(&v37, &v18);
  std::error_code v38 = v19;
  v37.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  uint64_t v39 = v20;
  long long v40 = v21;
  uint64_t v41 = v22;
  if (v22)
  {
    *((void *)v21 + 2) = &v40;
    long long v20 = &v21;
    char v21 = 0;
    uint64_t v22 = 0;
  }
  else
  {
    uint64_t v39 = &v40;
  }
  long long v42 = v23;
  long long v23 = 0uLL;
  char v43 = 1;
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v31, (uint64_t)&v37);
  std::runtime_error::runtime_error((std::runtime_error *)a3, &v31);
  *(std::error_code *)(a3 + 16) = v31.__ec_;
  *(void *)a3 = &unk_1EDC827D8;
  uint64_t v14 = v33;
  *(void *)(a3 + 32) = v32;
  *(void *)(a3 + 40) = v14;
  uint64_t v15 = a3 + 40;
  uint64_t v16 = v34;
  *(void *)(a3 + 48) = v34;
  if (v16)
  {
    *((void *)v14 + 2) = v15;
    uint64_t v32 = &v33;
    long long v33 = 0;
    uint64_t v34 = 0;
    uint64_t v14 = 0;
  }
  else
  {
    *(void *)(a3 + 32) = v15;
  }
  *(_OWORD *)(a3 + 56) = v35;
  long long v35 = 0uLL;
  *(unsigned char *)(a3 + 72) = 0;
  v31.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v32, v14);
  uint64_t result = MEMORY[0x192FA3C30](&v31);
  if (v43)
  {
    v37.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::runtime_error v17 = (std::__shared_weak_count *)*((void *)&v42 + 1);
    if (*((void *)&v42 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v42 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v39, v40);
    uint64_t result = MEMORY[0x192FA3C30](&v37);
  }
  if (!v24) {
    return ((uint64_t (*)(std::runtime_error *))v18.~runtime_error)(&v18);
  }
  return result;
}

void sub_18DA69A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2)
  {
    if (a15 < 0) {
      operator delete(__p);
    }
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL AMSCore::ImmutableBag::getIsExpired(AMSCore::ImmutableBag *this, const AMSCore::ClockProvider *a2)
{
  return *((void *)this + 6) <= (*(uint64_t (**)(const AMSCore::ClockProvider *))(*(void *)a2 + 16))(a2);
}

uint64_t AMSCore::ImmutableBag::getExpirationTimePoint(AMSCore::ImmutableBag *this)
{
  return *((void *)this + 6);
}

void AMSCore::MutableBag::~MutableBag(AMSCore::MutableBag *this)
{
  *(void *)this = &unk_1EDC819D0;
  uint64_t v2 = (std::mutex *)((char *)this + 24);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 136));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 88));
  std::mutex::~mutex(v2);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x192FA4080);
}

{
  std::mutex *v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_1EDC819D0;
  uint64_t v2 = (std::mutex *)((char *)this + 24);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 136));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 88));
  std::mutex::~mutex(v2);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void AMSCore::MutableBag::getURLValueForKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6 = (std::__shared_mutex_base *)(a1 + 24);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 24));
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 88))(*(void *)(a1 + 8), a2, a3);
  std::__shared_mutex_base::unlock_shared(v6);
}

void AMSCore::MutableBag::getURLValueForKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::__shared_mutex_base *)(a1 + 24);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 24));
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8), a2);
  std::__shared_mutex_base::unlock_shared(v4);
}

void AMSCore::MutableBag::getVectorValueForKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::__shared_mutex_base *)(a1 + 24);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 24));
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 72))(*(void *)(a1 + 8), a2);
  std::__shared_mutex_base::unlock_shared(v4);
}

void AMSCore::MutableBag::getUnsignedIntValueForKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::__shared_mutex_base *)(a1 + 24);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 24));
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 64))(*(void *)(a1 + 8), a2);
  std::__shared_mutex_base::unlock_shared(v4);
}

void AMSCore::MutableBag::getStringValueForKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::__shared_mutex_base *)(a1 + 24);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 24));
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8), a2);
  std::__shared_mutex_base::unlock_shared(v4);
}

void AMSCore::MutableBag::getMapValueForKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::__shared_mutex_base *)(a1 + 24);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 24));
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), a2);
  std::__shared_mutex_base::unlock_shared(v4);
}

void AMSCore::MutableBag::getIntValueForKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::__shared_mutex_base *)(a1 + 24);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 24));
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), a2);
  std::__shared_mutex_base::unlock_shared(v4);
}

void AMSCore::MutableBag::getDoubleValueForKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::__shared_mutex_base *)(a1 + 24);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 24));
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2);
  std::__shared_mutex_base::unlock_shared(v4);
}

void AMSCore::MutableBag::getBoolValueForKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::__shared_mutex_base *)(a1 + 24);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 24));
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), a2);
  std::__shared_mutex_base::unlock_shared(v4);
}

uint64_t AMSCore::MutableBag::getIsExpired(AMSCore::MutableBag *this, const AMSCore::ClockProvider *a2)
{
  uint64_t v4 = (std::__shared_mutex_base *)((char *)this + 24);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)((char *)this + 24));
  uint64_t v5 = (*(uint64_t (**)(void, const AMSCore::ClockProvider *))(**((void **)this + 1) + 16))(*((void *)this + 1), a2);
  std::__shared_mutex_base::unlock_shared(v4);
  return v5;
}

uint64_t AMSCore::MutableBag::getExpirationTimePoint(AMSCore::MutableBag *this)
{
  uint64_t v2 = (std::__shared_mutex_base *)((char *)this + 24);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)((char *)this + 24));
  uint64_t v3 = (***((uint64_t (****)(void))this + 1))(*((void *)this + 1));
  std::__shared_mutex_base::unlock_shared(v2);
  return v3;
}

void AMSCore::MutableBag::setBagData(uint64_t a1, long long *a2)
{
  uint64_t v4 = operator new(0x50uLL);
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = &unk_1EDC83B08;
  long long v5 = *a2;
  long long v6 = a2[1];
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v7 = *((void *)a2 + 4);
  uint64_t v8 = *((void *)a2 + 5);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 2) = 0;
  v4[3] = &unk_1EDC81A58;
  *((_OWORD *)v4 + 2) = v5;
  *((_OWORD *)v4 + 3) = v6;
  v4[8] = v7;
  void v4[9] = v8;
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 24));
  *(void *)&long long v9 = v4 + 3;
  *((void *)&v9 + 1) = v4;
  __int16 v10 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v9;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  std::__shared_mutex_base::unlock((std::__shared_mutex_base *)(a1 + 24));
}

void AMSCore::MutableBag::setBag(uint64_t a1, long long *a2)
{
  uint64_t v4 = (std::__shared_mutex_base *)(a1 + 24);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 24));
  long long v5 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v6 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v5;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  std::__shared_mutex_base::unlock(v4);
}

void AMSCore::BagDataSource::getSynchronousBagCookies(uint64_t a1, void *a2)
{
  uint64_t v3 = operator new(0x188uLL);
  *uint64_t v3 = AMSCore::BagDataSource::getSynchronousBagCookies;
  v3[1] = AMSCore::BagDataSource::getSynchronousBagCookies;
  v3[43] = a2[1];
  *a2 = 0;
  a2[1] = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *((unsigned char *)v3 + 24) = 0;
  *((unsigned char *)v3 + 104) = 0;
  v3[14] = 0;
  v3[18] = 0;
  std::shared_ptr<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise,AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v4, (uint64_t)(v3 + 2));
}

void sub_18DA6ACCC(void *a1)
{
}

void sub_18DA6ACD8()
{
}

void AMSCore::BagDataSource::getSynchronousBagCookies(unint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 152);
  if (!*(unsigned char *)(a1 + 384))
  {
    uint64_t v7 = *(void *)(a1 + 352);
    if (!*(unsigned char *)(v7 + 88)) {
      goto LABEL_83;
    }
    uint64_t v8 = (const std::runtime_error *)(v7 + 8);
    char v9 = *(unsigned char *)(v7 + 80);
    if (v9)
    {
      *(void *)(a1 + 152) = *(void *)(v7 + 8);
      __int16 v10 = (const char **)(a1 + 160);
      p_std::string::size_type imp = (std::__libcpp_refstring *)(v7 + 16);
    }
    else
    {
      std::runtime_error::runtime_error((std::runtime_error *)(a1 + 152), v8);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(v7 + 24);
      uint64_t v16 = (void *)(v7 + 48);
      uint64_t v17 = *(void *)(v7 + 48);
      *(void *)(a1 + 192) = v17;
      unint64_t v18 = a1 + 192;
      *(void *)(a1 + 152) = &unk_1EDC827D8;
      *(void *)(a1 + 184) = *(void *)(v7 + 40);
      uint64_t v19 = *(void *)(v7 + 56);
      *(void *)(a1 + 200) = v19;
      if (v19)
      {
        *(void *)(v17 + 16) = v18;
        *(void *)(v7 + 40) = v16;
        *uint64_t v16 = 0;
        *(void *)(v7 + 56) = 0;
      }
      else
      {
        *(void *)(a1 + 184) = v18;
      }
      std::runtime_error v37 = *(const std::runtime_error **)(a1 + 352);
      std::error_code v38 = v37[4].__vftable;
      uint64_t v8 = v37 + 4;
      *(void *)(a1 + 208) = v38;
      __int16 v10 = (const char **)(a1 + 216);
      p_std::string::size_type imp = &v8->__imp_;
    }
    *__int16 v10 = p_imp->__imp_;
    v8->__vftable = 0;
    v8->__imp_.__imp_ = 0;
    *(unsigned char *)(a1 + 224) = v9;
    uint64_t v39 = *(void *)(a1 + 360);
    if (v39 && !atomic_fetch_add((atomic_ullong *volatile)(v39 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      long long v40 = *(std::__shared_weak_count **)(a1 + 360);
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
    uint64_t v41 = *(std::__shared_weak_count **)(a1 + 336);
    if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
    long long v42 = *(std::__shared_weak_count **)(a1 + 320);
    if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
    char v43 = *(std::__shared_weak_count **)(a1 + 240);
    if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
    uint64_t v36 = *(void *)(a1 + 152);
    if (!*(unsigned char *)(a1 + 224))
    {
      int v34 = 0;
      goto LABEL_74;
    }
    if (!v36)
    {
      int v34 = 0;
      long long v35 = *(std::__shared_weak_count **)(a1 + 160);
      if (!v35) {
        goto LABEL_75;
      }
LABEL_50:
      if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
      goto LABEL_75;
    }
    (*(void (**)(uint64_t))(*(void *)v36 + 40))(v36);
    long long v44 = *(_OWORD *)(a1 + 328);
    *(_OWORD *)(a1 + 368) = v44;
    *(void *)(a1 + 328) = 0;
    *(void *)(a1 + 336) = 0;
    if (!atomic_load_explicit((atomic_ullong *volatile)(v44 + 96), memory_order_acquire))
    {
      *(unsigned char *)(a1 + 384) = 1;
      if (!atomic_exchange((atomic_ullong *volatile)(*(void *)(a1 + 368) + 96), a1)) {
        return;
      }
    }
  }
  uint64_t v3 = *(void *)(a1 + 368);
  if (!*(unsigned char *)(v3 + 88))
  {
LABEL_83:
    __break(1u);
    return;
  }
  std::runtime_error v4 = (void **)(a1 + 232);
  long long v5 = (const std::runtime_error *)(v3 + 8);
  char v6 = *(unsigned char *)(v3 + 80);
  if (v6)
  {
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(v3 + 8);
    *(void *)(a1 + 248) = *(void *)(v3 + 24);
    *(void *)(v3 + 16) = 0;
    *(void *)(v3 + 24) = 0;
    v5->__vftable = 0;
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 232), v5);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(v3 + 24);
    *(void *)(a1 + 232) = &unk_1EDC827D8;
    uint64_t v12 = (void *)(v3 + 48);
    uint64_t v13 = *(void *)(v3 + 48);
    unint64_t v14 = a1 + 272;
    *(void *)(a1 + 264) = *(void *)(v3 + 40);
    *(void *)(a1 + 272) = v13;
    uint64_t v15 = *(void *)(v3 + 56);
    *(void *)(a1 + 280) = v15;
    if (v15)
    {
      *(void *)(v13 + 16) = v14;
      *(void *)(v3 + 40) = v12;
      *uint64_t v12 = 0;
      *(void *)(v3 + 56) = 0;
    }
    else
    {
      *(void *)(a1 + 264) = v14;
    }
    uint64_t v20 = *(void *)(a1 + 368);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(v20 + 64);
    *(void *)(v20 + 64) = 0;
    *(void *)(v20 + 72) = 0;
  }
  *(unsigned char *)(a1 + 304) = v6;
  uint64_t v21 = *(void *)(a1 + 376);
  if (v21 && !atomic_fetch_add((atomic_ullong *volatile)(v21 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v22 = *(std::__shared_weak_count **)(a1 + 376);
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  long long v23 = *(std::__shared_weak_count **)(a1 + 336);
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    if (*(unsigned char *)(a1 + 304))
    {
LABEL_20:
      if (*(unsigned char *)(a1 + 104))
      {
        char v24 = *(uint64_t **)(a1 + 24);
        if (*(unsigned char *)(a1 + 96))
        {
          if (v24)
          {
            std::runtime_error v25 = *(uint64_t **)(a1 + 32);
            uint64_t v26 = *(void **)(a1 + 24);
            if (v25 != v24)
            {
              do
                std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v25, 0);
              while (v25 != v24);
              uint64_t v26 = *(void **)(a1 + 24);
            }
            *(void *)(a1 + 32) = v24;
            operator delete(v26);
          }
        }
        else
        {
          ((void (*)(unint64_t))*v24)(a1 + 24);
        }
      }
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 232);
      *(void *)(a1 + 40) = *(void *)(a1 + 248);
      *(void *)(a1 + 240) = 0;
      *(void *)(a1 + 248) = 0;
      *std::runtime_error v4 = 0;
      *(unsigned char *)(a1 + 96) = 1;
      *(unsigned char *)(a1 + 104) = 1;
      if (!*(unsigned char *)(a1 + 304))
      {
        uint64_t v29 = 0;
        goto LABEL_52;
      }
      goto LABEL_48;
    }
  }
  else if (*(unsigned char *)(a1 + 304))
  {
    goto LABEL_20;
  }
  std::runtime_error::runtime_error(&v46, (const std::runtime_error *)(a1 + 232));
  long long v47 = *(_OWORD *)(a1 + 248);
  std::runtime_error v28 = *(unsigned int ***)(a1 + 264);
  uint64_t v27 = *(void *)(a1 + 272);
  v46.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  uint64_t v48 = v28;
  std::error_code v49 = (unsigned int *)v27;
  if (*(void *)(a1 + 280))
  {
    *(void *)(v27 + 16) = &v49;
    *(void *)(a1 + 264) = a1 + 272;
    *(void *)(a1 + 272) = 0;
    *(void *)(a1 + 280) = 0;
  }
  else
  {
    uint64_t v48 = &v49;
  }
  long long v51 = *(_OWORD *)(a1 + 288);
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  char v52 = 1;
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v53, (uint64_t)&v46);
  std::optional<std::expected<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(a1 + 24), &v53);
  v53.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  long long v30 = v55;
  if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v54, v54[1]);
  MEMORY[0x192FA3C30](&v53);
  if (v52)
  {
    v46.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::system_error v31 = (std::__shared_weak_count *)*((void *)&v51 + 1);
    if (*((void *)&v51 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v51 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v48, v49);
    MEMORY[0x192FA3C30](&v46);
  }
  uint64_t v29 = *(uint64_t **)(a1 + 232);
  if (!*(unsigned char *)(a1 + 304))
  {
LABEL_52:
    ((void (*)(unint64_t))*v29)(a1 + 232);
    if (!*(unsigned char *)(a1 + 224)) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v29)
  {
    uint64_t v32 = *(uint64_t **)(a1 + 240);
    long long v33 = *(void **)(a1 + 232);
    if (v32 != v29)
    {
      do
        std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v32, 0);
      while (v32 != v29);
      long long v33 = *v4;
    }
    *(void *)(a1 + 240) = v29;
    operator delete(v33);
  }
LABEL_48:
  if (!*(unsigned char *)(a1 + 224))
  {
LABEL_53:
    uint64_t v36 = *v2;
    int v34 = 3;
LABEL_74:
    (*(void (**)(uint64_t *))v36)(v2);
    goto LABEL_75;
  }
LABEL_49:
  int v34 = 3;
  long long v35 = *(std::__shared_weak_count **)(a1 + 160);
  if (v35) {
    goto LABEL_50;
  }
LABEL_75:
  if (v34 != 3)
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::BagErrorCode,char const(&)[61]>((uint64_t)&v46, 0xCBu);
    std::optional<std::expected<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(a1 + 24), &v46);
    v46.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v45 = (std::__shared_weak_count *)*((void *)&v51 + 1);
    if (*((void *)&v51 + 1))
    {
      if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v51 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v48, v49);
    MEMORY[0x192FA3C30](&v46);
  }
  *(void *)(a1 + 152) = a1 + 16;
  *(void *)a1 = 0;
  AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v2);
}

void sub_18DA6B540(void *a1)
{
}

void sub_18DA6B54C()
{
}

void AMSCore::BagDataSource::getSynchronousBagCookies(void *a1)
{
  uint64_t v2 = (uint64_t)a1 + 16;
  if (!*(void *)a1) {
    goto LABEL_25;
  }
  if (*((unsigned char *)a1 + 384))
  {
    uint64_t v3 = *((void *)a1 + 47);
    if (v3 && !atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      std::runtime_error v4 = (std::__shared_weak_count *)*((void *)a1 + 47);
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    long long v5 = (std::__shared_weak_count *)*((void *)a1 + 42);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (*((unsigned char *)a1 + 224))
      {
LABEL_9:
        char v6 = (std::__shared_weak_count *)*((void *)a1 + 20);
        if (!v6) {
          goto LABEL_25;
        }
        goto LABEL_21;
      }
    }
    else if (*((unsigned char *)a1 + 224))
    {
      goto LABEL_9;
    }
    (**((void (***)(void))a1 + 19))();
    goto LABEL_25;
  }
  uint64_t v7 = *((void *)a1 + 45);
  if (v7 && !atomic_fetch_add((atomic_ullong *volatile)(v7 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v8 = (std::__shared_weak_count *)*((void *)a1 + 45);
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  char v9 = (std::__shared_weak_count *)*((void *)a1 + 42);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  __int16 v10 = (std::__shared_weak_count *)*((void *)a1 + 40);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  char v6 = (std::__shared_weak_count *)*((void *)a1 + 30);
  if (v6)
  {
LABEL_21:
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_25:
  uint64_t v11 = *((void *)a1 + 43);
  AMSCore::Task<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::Promise::~Promise(v2);
  if (v11 && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)a1 + 43) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v12 = (std::__shared_weak_count *)*((void *)a1 + 43);
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  operator delete(a1);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::BagErrorCode,char const(&)[61]>(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = a2;
  AMSCore::StringUtils::join<char [61]>(&__what_arg, "Couldn't fetch account cookies for synchronous bag creation.");
  *(void *)&v14.__val_ = v3;
  v14.__cat_ = (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance;
  std::system_error::system_error(&v8, v14, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  v8.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  char v9 = &v10;
  long long v12 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v8);
  *(std::error_code *)(a1 + 16) = v8.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v4 = v10;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = a1 + 40;
  uint64_t v6 = v11;
  *(void *)(a1 + 48) = v11;
  if (v6)
  {
    *(void *)(v4 + 16) = v5;
    uint64_t v4 = 0;
    char v9 = &v10;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v5;
  }
  *(_OWORD *)(a1 + 56) = v12;
  long long v12 = 0uLL;
  v8.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v9, (unsigned int *)v4);
  return MEMORY[0x192FA3C30](&v8);
}

void sub_18DA6B938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::StringUtils::join<char [61]>(std::string *a1, const char *a2)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v6);
  size_t v4 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v6, (uint64_t)a2, v4);
  std::stringbuf::str[abi:fe180100]((uint64_t)v7, a1);
  uint64_t v6 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v7[-1] + *(void *)(v6 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v7[0] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FA3FD0](&v9);
}

void AMSCore::BagDataSource::getSynchronousBagValues(uint64_t a1, char a2, _OWORD *a3, uint64_t a4)
{
  char v8 = (char *)operator new(0x1C8uLL);
  long long v9 = a3[1];
  *(_OWORD *)(v8 + 232) = *a3;
  *(void *)char v8 = AMSCore::BagDataSource::getSynchronousBagValues;
  *((void *)v8 + 1) = AMSCore::BagDataSource::getSynchronousBagValues;
  v8[449] = a2;
  *((void *)v8 + 49) = a1;
  *(_OWORD *)(v8 + 248) = v9;
  *((_OWORD *)v8 + 25) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  v8[24] = 0;
  v8[104] = 0;
  *((void *)v8 + 14) = 0;
  *((void *)v8 + 18) = 0;
  operator new();
}

void sub_18DA6C794(void *a1)
{
}

void sub_18DA6C7D8()
{
}

void AMSCore::BagDataSource::getSynchronousBagValues(unint64_t a1)
{
  unint64_t v2 = a1 + 328;
  uint64_t v3 = (std::runtime_error *)(a1 + 152);
  size_t v4 = (std::__shared_mutex_base **)(a1 + 360);
  uint64_t v5 = (std::mutex **)(a1 + 376);
  unint64_t v6 = a1 + 16;
  int v7 = *(unsigned __int8 *)(a1 + 448);
  if (v7 == 2)
  {
LABEL_33:
    uint64_t v28 = *(void *)(a1 + 432);
    if (*(unsigned char *)(v28 + 88))
    {
      char v29 = *(unsigned char *)(v28 + 80);
      if (!v29)
      {
        std::runtime_error::runtime_error(v3, (const std::runtime_error *)(v28 + 8));
        *(_OWORD *)(a1 + 168) = *(_OWORD *)(v28 + 24);
        long long v30 = (void *)(v28 + 48);
        uint64_t v31 = *(void *)(v28 + 48);
        *(void *)(a1 + 192) = v31;
        unint64_t v32 = a1 + 192;
        *(void *)(a1 + 152) = &unk_1EDC827D8;
        *(void *)(a1 + 184) = *(void *)(v28 + 40);
        uint64_t v33 = *(void *)(v28 + 56);
        *(void *)(a1 + 200) = v33;
        if (v33)
        {
          *(void *)(v31 + 16) = v32;
          *(void *)(v28 + 40) = v30;
          *long long v30 = 0;
          *(void *)(v28 + 56) = 0;
        }
        else
        {
          *(void *)(a1 + 184) = v32;
        }
        uint64_t v34 = *(void *)(a1 + 432);
        *(_OWORD *)(a1 + 208) = *(_OWORD *)(v34 + 64);
        *(void *)(v34 + 64) = 0;
        *(void *)(v34 + 72) = 0;
      }
      *(unsigned char *)(a1 + 224) = v29;
      uint64_t v35 = *(void *)(a1 + 440);
      if (v35 && !atomic_fetch_add((atomic_ullong *volatile)(v35 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v36 = *(std::__shared_weak_count **)(a1 + 440);
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
      std::runtime_error v37 = *(std::__shared_weak_count **)(a1 + 352);
      if (!v37 || atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (*(unsigned char *)(a1 + 224)) {
          goto LABEL_47;
        }
LABEL_71:
        std::runtime_error::runtime_error(&v60, v3);
        long long v51 = (void *)(a1 + 192);
        uint64_t v52 = *(void *)(a1 + 192);
        long long v61 = *(_OWORD *)(a1 + 168);
        std::runtime_error v53 = *(unsigned int ***)(a1 + 184);
        v60.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        int64_t v62 = v53;
        BOOL v63 = (unsigned int *)v52;
        if (*(void *)(a1 + 200))
        {
          *(void *)(v52 + 16) = &v63;
          *(void *)(a1 + 184) = v51;
          *long long v51 = 0;
          *(void *)(a1 + 200) = 0;
        }
        else
        {
          int64_t v62 = &v63;
        }
        long long v65 = *(_OWORD *)(a1 + 208);
        *(void *)(a1 + 208) = 0;
        *(void *)(a1 + 216) = 0;
        char v66 = 1;
        AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v67, (uint64_t)&v60);
        std::optional<std::expected<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(a1 + 24), &v67);
        v67.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        unint64_t v54 = v69;
        if (v69 && !atomic_fetch_add(&v69->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v68, v68[1]);
        MEMORY[0x192FA3C30](&v67);
        if (v66)
        {
          v60.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
          int v55 = (std::__shared_weak_count *)*((void *)&v65 + 1);
          if (*((void *)&v65 + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v65 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v62, v63);
          MEMORY[0x192FA3C30](&v60);
        }
        if (!*(unsigned char *)(a1 + 224)) {
          ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
        }
        if (!*(unsigned char *)(a1 + 384)) {
          goto LABEL_86;
        }
        goto LABEL_85;
      }
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
      if (!*(unsigned char *)(a1 + 224)) {
        goto LABEL_71;
      }
LABEL_47:
      if (*(unsigned char *)(a1 + 384))
      {
        AMSCore::AwaitableMutex::unlock(*v5);
        *(unsigned char *)(a1 + 384) = 0;
        std::error_code v38 = *(std::__shared_mutex_base **)(a1 + 360);
        if (v38)
        {
          if (*(unsigned char *)(a1 + 368))
          {
            std::string::size_type v57 = "shared_lock::lock: already locked";
            int v58 = 11;
LABEL_103:
            std::__throw_system_error(v58, v57);
            goto LABEL_104;
          }
          std::__shared_mutex_base::lock_shared(v38);
          uint64_t v39 = *(void *)(a1 + 392);
          *(unsigned char *)(a1 + 368) = 1;
          uint64_t v41 = *(void *)(v39 + 416);
          uint64_t v40 = *(void *)(v39 + 424);
          if (v40) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
          }
          long long v42 = *(std::__shared_weak_count **)(a1 + 336);
          *(void *)(a1 + 328) = v41;
          *(void *)(a1 + 336) = v40;
          if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
          if (*(unsigned char *)(a1 + 368))
          {
            uint64_t v43 = *(void *)(a1 + 392);
            uint64_t v44 = *(void *)(v43 + 456);
            int v45 = *(unsigned __int8 *)(v43 + 464);
            std::__shared_mutex_base::unlock_shared(*v4);
            *(unsigned char *)(a1 + 368) = 0;
            if (v45)
            {
              uint64_t v46 = *(void *)(a1 + 392);
              long long v47 = *(_OWORD *)(a1 + 248);
              *(_OWORD *)(a1 + 296) = *(_OWORD *)(a1 + 232);
              *(_OWORD *)(a1 + 312) = v47;
              if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v46 + 40))(v46, v44))
              {
                long long v48 = *(_OWORD *)v2;
                *(void *)unint64_t v2 = 0;
                *(void *)(v2 + 8) = 0;
                if (!*(unsigned char *)(a1 + 104)) {
                  goto LABEL_96;
                }
                if (*(unsigned char *)(a1 + 96))
                {
                  std::error_code v49 = *(std::__shared_weak_count **)(a1 + 32);
                  if (!v49 || atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
LABEL_96:
                    *(_OWORD *)(a1 + 24) = v48;
                    *(void *)(a1 + 40) = v44;
                    *(unsigned char *)(a1 + 96) = 1;
                    *(unsigned char *)(a1 + 104) = 1;
                    if (!*(unsigned char *)(a1 + 384)) {
                      goto LABEL_86;
                    }
                    goto LABEL_85;
                  }
                  long long v59 = v48;
                  ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                  std::__shared_weak_count::__release_weak(v49);
                }
                else
                {
                  long long v59 = v48;
                  (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
                }
                long long v48 = v59;
                goto LABEL_96;
              }
              AMSCore::Unexpected<AMSCore::Error,AMSCore::BagErrorCode,char const(&)[39]>((uint64_t)&v60, 0xCBu);
              std::optional<std::expected<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(a1 + 24), &v60);
            }
            else
            {
              AMSCore::Unexpected<AMSCore::Error,AMSCore::BagErrorCode,char const(&)[37]>((uint64_t)&v60, 0xCBu);
              std::optional<std::expected<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((std::runtime_error *)(a1 + 24), &v60);
            }
            v60.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
            long long v50 = (std::__shared_weak_count *)*((void *)&v65 + 1);
            if (*((void *)&v65 + 1)
              && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v65 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v62, v63);
            MEMORY[0x192FA3C30](&v60);
            if (!*(unsigned char *)(a1 + 384))
            {
LABEL_86:
              uint64_t v56 = *(std::__shared_weak_count **)(a1 + 336);
              if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
                if (!*(unsigned char *)(a1 + 368)) {
                  goto LABEL_90;
                }
              }
              else if (!*(unsigned char *)(a1 + 368))
              {
LABEL_90:
                *(void *)(a1 + 152) = v6;
                *(void *)a1 = 0;
                AMSCore::Task<std::pair<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>>,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v3);
                return;
              }
              std::__shared_mutex_base::unlock_shared(*v4);
              goto LABEL_90;
            }
LABEL_85:
            AMSCore::AwaitableMutex::unlock(*v5);
            goto LABEL_86;
          }
          std::string::size_type v57 = "shared_lock::unlock: not locked";
        }
        else
        {
          std::string::size_type v57 = "shared_lock::lock: references null mutex";
        }
      }
      else
      {
        std::string::size_type v57 = "unique_lock::unlock: not locked";
      }
      int v58 = 1;
      goto LABEL_103;
    }
LABEL_104:
    __break(1u);
    return;
  }
  char v8 = (long long *)(a1 + 344);
  if (v7 != 1)
  {
    uint64_t v15 = *(void *)(a1 + 392);
    *(void *)(a1 + 376) = v15 + 472;
    *(unsigned char *)(a1 + 384) = 1;
    std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v15 + 248));
    uint64_t v16 = *(void *)(a1 + 392);
    uint64_t v17 = *(void *)(*(void *)(v16 + 416) + 16);
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v16 + 248));
    if (v17)
    {
      std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(*(void *)(a1 + 392) + 248));
      uint64_t v18 = *(void *)(a1 + 392);
      if (*(unsigned char *)(v18 + 464))
      {
        BOOL v19 = *(void *)(v18 + 456) <= (*(uint64_t (**)(void))(**(void **)(a1 + 400) + 16))(*(void *)(a1 + 400));
        uint64_t v18 = *(void *)(a1 + 392);
      }
      else
      {
        BOOL v19 = 0;
      }
      std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v18 + 248));
      if (!v19) {
        goto LABEL_47;
      }
    }
    if (*(unsigned char *)(v2 + 121) != 1)
    {
      uint64_t v21 = 2;
      goto LABEL_31;
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 392) + 32))(*(void *)(a1 + 392), 1);
    long long v20 = *v8;
    *(_OWORD *)(a1 + 416) = *v8;
    *(void *)char v8 = 0;
    *(void *)(a1 + 352) = 0;
    if (!atomic_load_explicit((atomic_ullong *volatile)(v20 + 96), memory_order_acquire))
    {
      *(unsigned char *)(v2 + 120) = 1;
      if (!atomic_exchange((atomic_ullong *volatile)(*(void *)(a1 + 416) + 96), a1)) {
        return;
      }
    }
  }
  uint64_t v9 = *(void *)(a1 + 416);
  if (!*(unsigned char *)(v9 + 88)) {
    goto LABEL_104;
  }
  char v10 = *(unsigned char *)(v9 + 80);
  if (!v10)
  {
    std::runtime_error::runtime_error(v3, (const std::runtime_error *)(v9 + 8));
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(v9 + 24);
    uint64_t v11 = (void *)(v9 + 48);
    uint64_t v12 = *(void *)(v9 + 48);
    *(void *)(a1 + 192) = v12;
    unint64_t v13 = a1 + 192;
    *(void *)(a1 + 152) = &unk_1EDC827D8;
    *(void *)(a1 + 184) = *(void *)(v9 + 40);
    uint64_t v14 = *(void *)(v9 + 56);
    *(void *)(a1 + 200) = v14;
    if (v14)
    {
      *(void *)(v12 + 16) = v13;
      *(void *)(v9 + 40) = v11;
      *uint64_t v11 = 0;
      *(void *)(v9 + 56) = 0;
    }
    else
    {
      *(void *)(a1 + 184) = v13;
    }
    uint64_t v22 = *(void *)(a1 + 416);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(v22 + 64);
    *(void *)(v22 + 64) = 0;
    *(void *)(v22 + 72) = 0;
  }
  *(unsigned char *)(a1 + 224) = v10;
  uint64_t v23 = *(void *)(a1 + 424);
  if (v23 && !atomic_fetch_add((atomic_ullong *volatile)(v23 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    char v24 = *(std::__shared_weak_count **)(a1 + 424);
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  std::runtime_error v25 = *(std::__shared_weak_count **)(a1 + 352);
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    if (*(unsigned char *)(a1 + 224)) {
      goto LABEL_47;
    }
  }
  else if (*(unsigned char *)(a1 + 224))
  {
    goto LABEL_47;
  }
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v60);
  AMSCore::Logger::log<char [101]>((uint64_t)v60.__vftable);
  std::string::size_type imp = (std::__shared_weak_count *)v60.__imp_.__imp_;
  if (v60.__imp_.__imp_ && !atomic_fetch_add((atomic_ullong *volatile)v60.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
    std::__shared_weak_count::__release_weak(imp);
  }
  if (!*(unsigned char *)(a1 + 224)) {
    ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
  }
  uint64_t v21 = 0;
LABEL_31:
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 392) + 32))(*(void *)(a1 + 392), v21);
  long long v27 = *v8;
  *(_OWORD *)(a1 + 432) = *v8;
  *(void *)char v8 = 0;
  *(void *)(a1 + 352) = 0;
  if (atomic_load_explicit((atomic_ullong *volatile)(v27 + 96), memory_order_acquire)) {
    goto LABEL_33;
  }
  *(unsigned char *)(v2 + 120) = 2;
  if (atomic_exchange((atomic_ullong *volatile)(*(void *)(a1 + 432) + 96), a1)) {
    goto LABEL_33;
  }
}

void sub_18DA6D1B4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)va);
  if (!*(unsigned char *)(v5 + 224)) {
    (**v4)(v4);
  }
  std::unique_lock<AMSCore::AwaitableMutex>::~unique_lock[abi:fe180100](v7);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v8);
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:fe180100](v6);
  __cxa_begin_catch(a1);
  AMSCore::Task<std::pair<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DA6D24C()
{
}

void AMSCore::BagDataSource::getSynchronousBagValues(char *__p)
{
  if (!*(void *)__p) {
    goto LABEL_19;
  }
  if (!__p[448]) {
    goto LABEL_15;
  }
  if (__p[448] == 1)
  {
    uint64_t v2 = *((void *)__p + 53);
    if (!v2 || atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_11;
    }
    uint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 53);
  }
  else
  {
    uint64_t v4 = *((void *)__p + 55);
    if (!v4 || atomic_fetch_add((atomic_ullong *volatile)(v4 + 8), 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_11;
    }
    uint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 55);
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
LABEL_11:
  uint64_t v5 = (std::__shared_weak_count *)*((void *)__p + 44);
  if (!v5 || atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!__p[384]) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (__p[384]) {
LABEL_14:
  }
    AMSCore::AwaitableMutex::unlock(*((std::mutex **)__p + 47));
LABEL_15:
  uint64_t v6 = (std::__shared_weak_count *)*((void *)__p + 42);
  if (!v6 || atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!__p[368]) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (__p[368]) {
LABEL_18:
  }
    std::__shared_mutex_base::unlock_shared(*((std::__shared_mutex_base **)__p + 45));
LABEL_19:
  uint64_t v7 = *((void *)__p + 51);
  uint64_t v8 = (char *)*((void *)__p + 18);
  if (v8 == __p + 120)
  {
    (*(void (**)(char *))(*((void *)__p + 15) + 32))(__p + 120);
    if (!__p[104]) {
      goto LABEL_30;
    }
    goto LABEL_25;
  }
  if (v8) {
    (*(void (**)(char *))(*(void *)v8 + 40))(v8);
  }
  if (__p[104])
  {
LABEL_25:
    if (__p[96])
    {
      uint64_t v9 = (std::__shared_weak_count *)*((void *)__p + 4);
      if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    else
    {
      (**((void (***)(void))__p + 3))();
    }
  }
LABEL_30:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v7 && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)__p + 51) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    char v10 = (std::__shared_weak_count *)*((void *)__p + 51);
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  operator delete(__p);
}

uint64_t AMSCore::Logger::log<char [101]>(uint64_t result)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= 2u)
  {
    uint64_t v1 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v6);
    uint64_t v2 = *(void *)(v6[0] - 24);
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v6, (uint64_t)"Failed to load bag data from persistence. Will retry without limiting data source to persisted data.", 100);
    uint64_t v3 = v6[6];
    uint64_t v4 = (char *)v6 + *(void *)(v6[0] - 24);
    if ((v4[32] & 5) != 0)
    {
      uint64_t v5 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v4 + 5) + 32))(&rep);
      uint64_t v5 = v13;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v10 = 2;
    uint64_t v11 = v3;
    uint64_t v12 = v5;
    (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v1 + 16) + 16))(*(void *)(v1 + 16), "bag", 3, &rep);
    v6[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v6[1] = MEMORY[0x1E4FBA470] + 16;
    if (v7 < 0) {
      operator delete((void *)v6[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v8);
  }
  return result;
}

void sub_18DA6D7DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::BagErrorCode,char const(&)[37]>(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = a2;
  AMSCore::StringUtils::join<char [37]>(&__what_arg, "Bag expiration unexpectedly missing.");
  *(void *)&v14.__val_ = v3;
  v14.__cat_ = (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance;
  std::system_error::system_error(&v8, v14, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  v8.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  uint64_t v9 = &v10;
  long long v12 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v8);
  *(std::error_code *)(a1 + 16) = v8.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v4 = v10;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = a1 + 40;
  uint64_t v6 = v11;
  *(void *)(a1 + 48) = v11;
  if (v6)
  {
    *(void *)(v4 + 16) = v5;
    uint64_t v4 = 0;
    uint64_t v9 = &v10;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v5;
  }
  *(_OWORD *)(a1 + 56) = v12;
  long long v12 = 0uLL;
  v8.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v9, (unsigned int *)v4);
  return MEMORY[0x192FA3C30](&v8);
}

void sub_18DA6D948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::BagErrorCode,char const(&)[39]>(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = a2;
  AMSCore::StringUtils::join<char [39]>(&__what_arg, "Newly loaded data has already expired.");
  *(void *)&v14.__val_ = v3;
  v14.__cat_ = (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance;
  std::system_error::system_error(&v8, v14, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  v8.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  uint64_t v9 = &v10;
  long long v12 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v8);
  *(std::error_code *)(a1 + 16) = v8.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v4 = v10;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = a1 + 40;
  uint64_t v6 = v11;
  *(void *)(a1 + 48) = v11;
  if (v6)
  {
    *(void *)(v4 + 16) = v5;
    uint64_t v4 = 0;
    uint64_t v9 = &v10;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v5;
  }
  *(_OWORD *)(a1 + 56) = v12;
  long long v12 = 0uLL;
  v8.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v9, (unsigned int *)v4);
  return MEMORY[0x192FA3C30](&v8);
}

void sub_18DA6DA9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::shared_lock<std::shared_mutex>::~shared_lock[abi:fe180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    std::__shared_mutex_base::unlock_shared(*(std::__shared_mutex_base **)a1);
  }
  return a1;
}

void AMSCore::Task<std::pair<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>>,AMSCore::Error>::Promise::unhandled_exception()
{
  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

uint64_t sub_18DA6DB10(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v36, (uint64_t)v33);
  std::optional<std::expected<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>(v29, v36);
  v36[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  long long v30 = v38;
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v37, v37[1]);
  MEMORY[0x192FA3C30](v36);
  v33[0] = &unk_1EDC827D8;
  uint64_t v31 = v35;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v34, v34[1]);
  return MEMORY[0x192FA3C30](v33);
}

uint64_t AMSCore::Task<std::pair<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>>,AMSCore::Error>::Promise::Awaiter::await_suspend(uint64_t result)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void (**)(void))atomic_exchange((atomic_ullong *volatile)(*(void *)result + 96), 1uLL);
  if (v1)
  {
    uint64_t v2 = result;
    if (v1 == (void (**)(void))2) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result - 8))(*(void *)result - 16);
    }
    uint64_t v3 = (uint64_t *)(*(void *)result + 128);
    uint64_t result = *v3;
    if (*v3)
    {
      if (result == *(void *)v2 + 104)
      {
        long long v20 = v19;
        uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 24))(result, v19);
      }
      else
      {
        long long v20 = *(void **)(*(void *)v2 + 128);
        *uint64_t v3 = 0;
      }
    }
    else
    {
      long long v20 = 0;
    }
    if (v20)
    {
      uint64_t v4 = *(void *)v2;
      if (!*(unsigned char *)(*(void *)v2 + 88))
      {
        __break(1u);
        return result;
      }
      uint64_t v5 = (const std::runtime_error *)(v4 + 8);
      char v6 = *(unsigned char *)(v4 + 80);
      char v7 = (void *)(v4 + 24);
      if (v6)
      {
        std::runtime_error v12 = *v5;
        v5->__vftable = 0;
        *(void *)(v4 + 16) = 0;
        *(void *)&long long v13 = *v7;
      }
      else
      {
        std::runtime_error::runtime_error(&v12, v5);
        long long v13 = *(_OWORD *)v7;
        std::system_error v8 = (void *)(v4 + 48);
        uint64_t v9 = *(void *)(v4 + 48);
        uint64_t v10 = *(uint64_t **)(v4 + 40);
        v12.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        std::error_code v14 = v10;
        uint64_t v15 = v9;
        if (*(void *)(v4 + 56))
        {
          *(void *)(v9 + 16) = &v15;
          *(void *)(v4 + 40) = v8;
          *std::system_error v8 = 0;
          *(void *)(v4 + 56) = 0;
        }
        else
        {
          std::error_code v14 = &v15;
        }
        long long v17 = *(_OWORD *)(v4 + 64);
        *(void *)(v4 + 64) = 0;
        *(void *)(v4 + 72) = 0;
      }
      char v18 = v6;
      if (!v20) {
        std::__throw_bad_function_call[abi:fe180100]();
      }
      (*(void (**)(void *, std::runtime_error *))(*v20 + 48))(v20, &v12);
      if (v18)
      {
        std::string::size_type imp = (std::__shared_weak_count *)v12.__imp_.__imp_;
        if (v12.__imp_.__imp_
          && !atomic_fetch_add((atomic_ullong *volatile)v12.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
          std::__shared_weak_count::__release_weak(imp);
        }
      }
      else
      {
        ((void (*)(std::runtime_error *))v12.~runtime_error)(&v12);
      }
    }
    else
    {
      (*v1)(v1);
    }
    uint64_t result = (uint64_t)v20;
    if (v20 == v19)
    {
      return (*(uint64_t (**)(void *))(v19[0] + 32))(v19);
    }
    else if (v20)
    {
      return (*(uint64_t (**)(void))(*v20 + 40))();
    }
  }
  return result;
}

void sub_18DA6DF04(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AMSCore::StringUtils::join<char [37]>(std::string *a1, const char *a2)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v6);
  size_t v4 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v6, (uint64_t)a2, v4);
  std::stringbuf::str[abi:fe180100]((uint64_t)v7, a1);
  uint64_t v6 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v7[-1] + *(void *)(v6 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v7[0] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FA3FD0](&v9);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::pair<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>>,AMSCore::Error>::Promise *,AMSCore::Task<std::pair<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::pair<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>>,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINSt3__14pairINS1_10shared_ptrIKNS1_3mapINS1_12basic_stringIcNS1_11char_traitsIcEENS"
                     "1_9allocatorIcEEEENS_3AnyENS1_4lessIvEENS8_INS2_IKSA_SB_EEEEEEEENS1_6chrono10time_pointINSK_12syste"
                     "m_clockENSK_8durationIxNS1_5ratioILl1ELl1000000EEEEEEEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINSt3__14pairINS1_10shared_ptrIKNS1_3mapINS1_12basic_stringIcNS1_11char_t"
                                "raitsIcEENS1_9allocatorIcEEEENS_3AnyENS1_4lessIvEENS8_INS2_IKSA_SB_EEEEEEEENS1_6chrono10"
                                "time_pointINSK_12system_clockENSK_8durationIxNS1_5ratioILl1ELl1000000EEEEEEEEENS_5ErrorE"
                                "E7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINSt3__14pairINS1_10shared_ptrIKNS1_3mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_3AnyENS1_4lessIvEENS8_INS2_IKSA_SB_EEEEEEEENS1_6chrono10time_pointINSK_12system_clockENSK_8durationIxNS1_5ratioILl1ELl1000000EEEEEEEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINSt3__14pairINS1_10shared_ptrIKNS1_3mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_3AnyENS1_4lessIvEENS8_INS2_IKSA_SB_EEEEEEEENS1_6chrono10time_pointINSK_12system_clockENSK_8durationIxNS1_5ratioILl1ELl1000000EEEEEEEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::pair<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>>,AMSCore::Error>::Promise *,AMSCore::Task<std::pair<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::pair<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>>,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 96), 2uLL)) {
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::Task<std::pair<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>>,AMSCore::Error>::Promise *,AMSCore::Task<std::pair<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::pair<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<long long,std::ratio<1l,1000000l>>>>,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

uint64_t AMSCore::BagDataSource::shouldUseLoadedData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 16))(a4);
  uint64_t v7 = v6 - a2;
  if (v6 < a2) {
    return 1;
  }
  uint64_t v9 = *(unsigned int *)(a3 + 24);
  if (v9 == -1) {
    goto LABEL_9;
  }
  std::error_code v14 = &v13;
  uint64_t result = ((uint64_t (*)(char **, uint64_t))off_1EDCA5490[v9])(&v14, a3 + 8);
  if (!result) {
    return result;
  }
  uint64_t v10 = *(unsigned int *)(a3 + 24);
  if (v10 == -1) {
LABEL_9:
  }
    std::__throw_bad_variant_access[abi:fe180100]();
  std::error_code v14 = &v13;
  uint64_t v11 = ((uint64_t (*)(char **, uint64_t))*(&off_1EDCA54A0 + v10))(&v14, a3 + 8);
  if (!v12) {
    return 1;
  }
  return v7 < 1000000 * v11;
}

void AMSCore::BagDataSource::getSynchronousBagData(uint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  uint64_t v7 = (char *)operator new(0x268uLL);
  *(void *)uint64_t v7 = AMSCore::BagDataSource::getSynchronousBagData;
  *((void *)v7 + 1) = AMSCore::BagDataSource::getSynchronousBagData;
  *((void *)v7 + 70) = a1;
  long long v8 = a3[1];
  *(_OWORD *)(v7 + 392) = *a3;
  *(_OWORD *)(v7 + 408) = v8;
  *a4 = 0;
  a4[1] = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  v7[24] = 0;
  v7[104] = 0;
  *((void *)v7 + 14) = 0;
  *((void *)v7 + 18) = 0;
  operator new();
}

void sub_18DA6F318(void *a1)
{
}

void AMSCore::BagDataSource::getSynchronousBagData(void *a1)
{
  uint64_t v2 = (uint64_t **)(a1 + 57);
  unint64_t v3 = (std::runtime_error *)(a1 + 19);
  size_t v4 = (std::runtime_error *)(a1 + 29);
  uint64_t v5 = (std::runtime_error *)(a1 + 39);
  int v99 = a1 + 60;
  uint64_t v6 = a1 + 2;
  int v7 = *((unsigned __int8 *)a1 + 608);
  if (v7 == 2)
  {
LABEL_42:
    uint64_t v43 = a1[64];
    if (*(unsigned char *)(v43 + 88))
    {
      uint64_t v44 = (const std::runtime_error *)(v43 + 8);
      char v45 = *(unsigned char *)(v43 + 80);
      if (v45)
      {
        *(_OWORD *)(a1 + 29) = *(_OWORD *)(v43 + 8);
        a1[31] = *(void *)(v43 + 24);
        *(void *)(v43 + 16) = 0;
        *(void *)(v43 + 24) = 0;
        v44->__vftable = 0;
      }
      else
      {
        std::runtime_error::runtime_error(v4, v44);
        *(_OWORD *)(a1 + 31) = *(_OWORD *)(v43 + 24);
        a1[29] = &unk_1EDC827D8;
        uint64_t v46 = (void *)(v43 + 48);
        uint64_t v47 = *(void *)(v43 + 48);
        long long v48 = a1 + 34;
        a1[33] = *(void *)(v43 + 40);
        a1[34] = v47;
        uint64_t v49 = *(void *)(v43 + 56);
        a1[35] = v49;
        if (v49)
        {
          *(void *)(v47 + 16) = v48;
          *(void *)(v43 + 40) = v46;
          *uint64_t v46 = 0;
          *(void *)(v43 + 56) = 0;
        }
        else
        {
          a1[33] = v48;
        }
        *((_OWORD *)a1 + 18) = *(_OWORD *)(v43 + 64);
        *(void *)(v43 + 64) = 0;
        *(void *)(v43 + 72) = 0;
      }
      *((unsigned char *)a1 + 304) = v45;
      long long v61 = (std::__shared_weak_count *)a1[65];
      if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
      char v98 = v3;
      int64_t v62 = (std::__shared_weak_count *)a1[67];
      if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
      uint64_t v52 = v6;
      BOOL v63 = (std::__shared_weak_count *)a1[69];
      if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
        int v64 = *((unsigned __int8 *)a1 + 304);
        if (*((unsigned char *)a1 + 304)) {
          goto LABEL_77;
        }
      }
      else
      {
        int v64 = *((unsigned __int8 *)a1 + 304);
        if (*((unsigned char *)a1 + 304))
        {
LABEL_77:
          long long v65 = *v2;
          if (*v2)
          {
            char v66 = (uint64_t *)a1[58];
            std::runtime_error v67 = *v2;
            if (v66 != v65)
            {
              do
                std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v66, 0);
              while (v66 != v65);
              std::runtime_error v67 = *v2;
            }
            a1[58] = v65;
            operator delete(v67);
            int v68 = *((unsigned __int8 *)a1 + 304);
          }
          else
          {
            int v68 = 1;
          }
          int v60 = 0;
          *(_OWORD *)uint64_t v2 = *(_OWORD *)(a1 + 29);
          a1[59] = a1[31];
          v4->__imp_.__imp_ = 0;
          v4[1].__vftable = 0;
          v4->__vftable = 0;
          if (v68)
          {
            if (!v64) {
              goto LABEL_114;
            }
            goto LABEL_110;
          }
          size_t v71 = 0;
          goto LABEL_109;
        }
      }
      std::runtime_error::runtime_error(&v101, v4);
      long long v102 = *(_OWORD *)(a1 + 31);
      int v70 = (unsigned int **)a1[33];
      uint64_t v69 = a1[34];
      v101.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      long long v103 = v70;
      uint64_t v104 = (unsigned int *)v69;
      uint64_t v105 = a1[35];
      if (v105)
      {
        *(void *)(v69 + 16) = &v104;
        a1[33] = a1 + 34;
        a1[34] = 0;
        a1[35] = 0;
      }
      else
      {
        long long v103 = &v104;
      }
      long long v106 = *((_OWORD *)a1 + 18);
      a1[36] = 0;
      a1[37] = 0;
      char v107 = 1;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v108, (uint64_t)&v101);
      if (*((unsigned char *)a1 + 104))
      {
        std::__expected_base<AMSCore::SynchronousBagData,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100]((uint64_t)(a1 + 3));
        *((unsigned char *)a1 + 104) = 0;
      }
      std::runtime_error::runtime_error((std::runtime_error *)(a1 + 3), &v108);
      long long v72 = v109;
      uint64_t v74 = v110;
      uint64_t v73 = v111;
      a1[8] = v111;
      int64_t v75 = a1 + 8;
      *(_OWORD *)(a1 + 5) = v72;
      a1[3] = &unk_1EDC827D8;
      uint64_t v76 = v112;
      a1[7] = v74;
      a1[9] = v76;
      if (v76)
      {
        *(void *)(v73 + 16) = v75;
        uint64_t v110 = &v111;
        uint64_t v111 = 0;
        uint64_t v112 = 0;
        uint64_t v73 = 0;
      }
      else
      {
        a1[7] = v75;
      }
      *((_OWORD *)a1 + 5) = v113;
      long long v113 = 0uLL;
      *((unsigned char *)a1 + 96) = 0;
      *((unsigned char *)a1 + 104) = 1;
      v108.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v110, (unsigned int *)v73);
      MEMORY[0x192FA3C30](&v108);
      if (v107)
      {
        v101.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        int64_t v77 = (std::__shared_weak_count *)*((void *)&v106 + 1);
        if (*((void *)&v106 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v106 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v103, v104);
        MEMORY[0x192FA3C30](&v101);
      }
      size_t v71 = (uint64_t *)a1[29];
      if (!*((unsigned char *)a1 + 304))
      {
        int v60 = 3;
LABEL_109:
        ((void (*)(std::runtime_error *))*v71)(v4);
        if (!v64) {
          goto LABEL_114;
        }
        goto LABEL_110;
      }
      if (!v71)
      {
LABEL_113:
        int v60 = 3;
        goto LABEL_114;
      }
      int v78 = (uint64_t *)a1[30];
      int64_t v79 = (std::runtime_error_vtbl *)a1[29];
      if (v78 != v71)
      {
        do
          std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v78, 0);
        while (v78 != v71);
        int64_t v79 = v4->__vftable;
      }
      a1[30] = v71;
      operator delete(v79);
      int v60 = 3;
      if (!v64)
      {
LABEL_114:
        uint64_t v84 = *v2;
        if (*v2)
        {
          uint64_t v85 = (uint64_t *)a1[58];
          uint64_t v86 = *v2;
          if (v85 != v84)
          {
            do
              std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v85, 0);
            while (v85 != v84);
            uint64_t v86 = *v2;
          }
          a1[58] = v84;
          operator delete(v86);
        }
        uint64_t v6 = v52;
        unint64_t v3 = v98;
        if (*((unsigned char *)a1 + 384))
        {
LABEL_120:
          int v87 = (std::__shared_weak_count *)a1[40];
          if (v87 && !atomic_fetch_add(&v87->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v87);
          }
LABEL_123:
          std::string::size_type v88 = (std::__shared_weak_count *)a1[61];
          if (v88 && !atomic_fetch_add(&v88->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
          if (*((unsigned char *)a1 + 224)) {
            goto LABEL_127;
          }
          goto LABEL_144;
        }
LABEL_65:
        ((void (*)(std::runtime_error *))v5->~runtime_error)(v5);
        goto LABEL_123;
      }
LABEL_110:
      long long v80 = *((_OWORD *)a1 + 30);
      *int v99 = 0;
      v99[1] = 0;
      long long v81 = *(_OWORD *)v2;
      uint64_t v82 = a1[59];
      *uint64_t v2 = 0;
      v2[1] = 0;
      v2[2] = 0;
      if (*((unsigned char *)a1 + 104))
      {
        long long v100 = v80;
        long long v97 = v81;
        std::__expected_base<AMSCore::SynchronousBagData,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100]((uint64_t)(a1 + 3));
        long long v81 = v97;
        long long v80 = v100;
      }
      uint64_t v83 = a1[73];
      *(_OWORD *)(a1 + 3) = v80;
      *(_OWORD *)(a1 + 5) = v81;
      a1[7] = v82;
      a1[8] = v83;
      *((unsigned char *)a1 + 96) = 1;
      *((unsigned char *)a1 + 104) = 1;
      goto LABEL_113;
    }
LABEL_157:
    __break(1u);
    return;
  }
  if (v7 != 1)
  {
    uint64_t v8 = a1[71];
    if (!*(unsigned char *)(v8 + 88)) {
      goto LABEL_157;
    }
    uint64_t v9 = (const std::runtime_error *)(v8 + 8);
    char v10 = *(unsigned char *)(v8 + 80);
    uint64_t v11 = a1 + 21;
    char v12 = (void *)(v8 + 24);
    if (v10)
    {
      *unint64_t v3 = *v9;
      v9->__vftable = 0;
      *(void *)(v8 + 16) = 0;
      *uint64_t v11 = *v12;
    }
    else
    {
      std::runtime_error::runtime_error((std::runtime_error *)(a1 + 19), v9);
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
      char v13 = (void *)(v8 + 48);
      uint64_t v14 = *(void *)(v8 + 48);
      a1[24] = v14;
      uint64_t v15 = a1 + 24;
      a1[19] = &unk_1EDC827D8;
      a1[23] = *(void *)(v8 + 40);
      uint64_t v16 = *(void *)(v8 + 56);
      a1[25] = v16;
      if (v16)
      {
        *(void *)(v14 + 16) = v15;
        *(void *)(v8 + 40) = v13;
        *char v13 = 0;
        *(void *)(v8 + 56) = 0;
      }
      else
      {
        a1[23] = v15;
      }
      uint64_t v17 = a1[71];
      *((_OWORD *)a1 + 13) = *(_OWORD *)(v17 + 64);
      *(void *)(v17 + 64) = 0;
      *(void *)(v17 + 72) = 0;
    }
    *((unsigned char *)a1 + 224) = v10;
    uint64_t v18 = a1[72];
    if (v18 && !atomic_fetch_add((atomic_ullong *volatile)(v18 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      BOOL v19 = (std::__shared_weak_count *)a1[72];
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    long long v20 = (std::__shared_weak_count *)a1[30];
    if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    uint64_t v21 = (std::__shared_weak_count *)a1[63];
    if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      if (*((unsigned char *)a1 + 224)) {
        goto LABEL_19;
      }
    }
    else if (*((unsigned char *)a1 + 224))
    {
LABEL_19:
      uint64_t v22 = a1[70];
      *((_OWORD *)a1 + 30) = *(_OWORD *)(a1 + 19);
      v3->__vftable = 0;
      v3->__imp_.__imp_ = 0;
      a1[73] = a1[21];
      (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
      long long v23 = *(_OWORD *)(a1 + 29);
      *((_OWORD *)a1 + 37) = v23;
      v4->__vftable = 0;
      v4->__imp_.__imp_ = 0;
      if (!atomic_load_explicit((atomic_ullong *volatile)(v23 + 96), memory_order_acquire))
      {
        *((unsigned char *)v2 + 152) = 1;
        if (!atomic_exchange((atomic_ullong *volatile)(a1[74] + 96), (unint64_t)a1)) {
          return;
        }
      }
      goto LABEL_21;
    }
    std::runtime_error::runtime_error(&v101, v3);
    long long v102 = *(_OWORD *)v11;
    uint64_t v33 = a1 + 24;
    uint64_t v34 = a1[24];
    uint64_t v35 = (unsigned int **)a1[23];
    v101.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    long long v103 = v35;
    uint64_t v104 = (unsigned int *)v34;
    uint64_t v105 = a1[25];
    if (v105)
    {
      *(void *)(v34 + 16) = &v104;
      a1[23] = v33;
      void *v33 = 0;
      a1[25] = 0;
    }
    else
    {
      long long v103 = &v104;
    }
    long long v106 = *((_OWORD *)a1 + 13);
    a1[26] = 0;
    a1[27] = 0;
    char v107 = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v108, (uint64_t)&v101);
    if (*((unsigned char *)a1 + 104))
    {
      std::__expected_base<AMSCore::SynchronousBagData,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100]((uint64_t)(a1 + 3));
      *((unsigned char *)a1 + 104) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 3), &v108);
    long long v90 = v109;
    long long v92 = v110;
    uint64_t v91 = v111;
    a1[8] = v111;
    long long v93 = a1 + 8;
    *(_OWORD *)(a1 + 5) = v90;
    a1[3] = &unk_1EDC827D8;
    uint64_t v94 = v112;
    a1[7] = v92;
    a1[9] = v94;
    if (v94)
    {
      *(void *)(v91 + 16) = v93;
      uint64_t v110 = &v111;
      uint64_t v111 = 0;
      uint64_t v112 = 0;
      uint64_t v91 = 0;
    }
    else
    {
      a1[7] = v93;
    }
    *((_OWORD *)a1 + 5) = v113;
    long long v113 = 0uLL;
    *((unsigned char *)a1 + 96) = 0;
    *((unsigned char *)a1 + 104) = 1;
    v108.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v110, (unsigned int *)v91);
    MEMORY[0x192FA3C30](&v108);
    if (v107)
    {
      v101.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v95 = (std::__shared_weak_count *)*((void *)&v106 + 1);
      if (*((void *)&v106 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v106 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v103, v104);
      MEMORY[0x192FA3C30](&v101);
    }
    int v60 = 3;
    if (*((unsigned char *)a1 + 224))
    {
LABEL_127:
      std::string::size_type v89 = (std::__shared_weak_count *)a1[20];
      if (v89 && !atomic_fetch_add(&v89->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
      if (v60 != 3)
      {
LABEL_146:
        unint64_t v96 = (void *)a1[18];
        if (v96 == a1 + 15)
        {
          (*(void (**)(void *))(a1[15] + 32))(a1 + 15);
          if (!*((unsigned char *)a1 + 104))
          {
LABEL_153:
            if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
              MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
            }
            operator delete(a1);
            return;
          }
        }
        else
        {
          if (v96) {
            (*(void (**)(void *))(*v96 + 40))(v96);
          }
          if (!*((unsigned char *)a1 + 104)) {
            goto LABEL_153;
          }
        }
        std::__expected_base<AMSCore::SynchronousBagData,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100]((uint64_t)(a1 + 3));
        goto LABEL_153;
      }
LABEL_145:
      a1[19] = v6;
      *a1 = 0;
      AMSCore::Task<AMSCore::SynchronousBagData,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v3);
      return;
    }
LABEL_144:
    ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
    if (v60 != 3) {
      goto LABEL_146;
    }
    goto LABEL_145;
  }
LABEL_21:
  uint64_t v24 = a1[74];
  if (!*(unsigned char *)(v24 + 88)) {
    goto LABEL_157;
  }
  std::runtime_error v25 = (const std::runtime_error *)(v24 + 8);
  char v26 = *(unsigned char *)(v24 + 80);
  if (v26)
  {
    a1[39] = *(void *)(v24 + 8);
    long long v27 = (const char **)(a1 + 40);
    p_std::string::size_type imp = (std::__libcpp_refstring *)(v24 + 16);
  }
  else
  {
    std::runtime_error::runtime_error(v5, v25);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(v24 + 24);
    a1[39] = &unk_1EDC827D8;
    char v29 = (void *)(v24 + 48);
    uint64_t v30 = *(void *)(v24 + 48);
    uint64_t v31 = a1 + 44;
    a1[43] = *(void *)(v24 + 40);
    a1[44] = v30;
    uint64_t v32 = *(void *)(v24 + 56);
    a1[45] = v32;
    if (v32)
    {
      *(void *)(v30 + 16) = v31;
      *(void *)(v24 + 40) = v29;
      *char v29 = 0;
      *(void *)(v24 + 56) = 0;
    }
    else
    {
      a1[43] = v31;
    }
    uint64_t v36 = (const std::runtime_error *)a1[74];
    std::runtime_error v37 = v36[4].__vftable;
    std::runtime_error v25 = v36 + 4;
    a1[46] = v37;
    long long v27 = (const char **)(a1 + 47);
    p_std::string::size_type imp = &v25->__imp_;
  }
  *long long v27 = p_imp->__imp_;
  v25->__vftable = 0;
  v25->__imp_.__imp_ = 0;
  *((unsigned char *)a1 + 384) = v26;
  uint64_t v38 = a1[75];
  if (v38 && !atomic_fetch_add((atomic_ullong *volatile)(v38 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v39 = (std::__shared_weak_count *)a1[75];
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  uint64_t v40 = (std::__shared_weak_count *)a1[30];
  if (!v40 || atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (*((unsigned char *)a1 + 384)) {
      goto LABEL_37;
    }
LABEL_48:
    std::runtime_error::runtime_error(&v101, v5);
    long long v102 = *(_OWORD *)(a1 + 41);
    long long v51 = (unsigned int **)a1[43];
    uint64_t v50 = a1[44];
    v101.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    long long v103 = v51;
    uint64_t v104 = (unsigned int *)v50;
    uint64_t v105 = a1[45];
    if (v105)
    {
      *(void *)(v50 + 16) = &v104;
      a1[43] = a1 + 44;
      a1[44] = 0;
      a1[45] = 0;
    }
    else
    {
      long long v103 = &v104;
    }
    long long v106 = *((_OWORD *)a1 + 23);
    a1[46] = 0;
    a1[47] = 0;
    char v107 = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v108, (uint64_t)&v101);
    if (*((unsigned char *)a1 + 104))
    {
      std::__expected_base<AMSCore::SynchronousBagData,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100]((uint64_t)(a1 + 3));
      *((unsigned char *)a1 + 104) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 3), &v108);
    long long v54 = v109;
    uint64_t v56 = v110;
    uint64_t v55 = v111;
    a1[8] = v111;
    std::string::size_type v57 = a1 + 8;
    *(_OWORD *)(a1 + 5) = v54;
    a1[3] = &unk_1EDC827D8;
    uint64_t v58 = v112;
    a1[7] = v56;
    a1[9] = v58;
    if (v58)
    {
      *(void *)(v55 + 16) = v57;
      uint64_t v110 = &v111;
      uint64_t v111 = 0;
      uint64_t v112 = 0;
      uint64_t v55 = 0;
    }
    else
    {
      a1[7] = v57;
    }
    *((_OWORD *)a1 + 5) = v113;
    long long v113 = 0uLL;
    *((unsigned char *)a1 + 96) = 0;
    *((unsigned char *)a1 + 104) = 1;
    v108.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v110, (unsigned int *)v55);
    MEMORY[0x192FA3C30](&v108);
    if (v107)
    {
      v101.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      long long v59 = (std::__shared_weak_count *)*((void *)&v106 + 1);
      if (*((void *)&v106 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v106 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v103, v104);
      MEMORY[0x192FA3C30](&v101);
    }
    int v60 = 3;
    if (*((unsigned char *)a1 + 384)) {
      goto LABEL_120;
    }
    goto LABEL_65;
  }
  ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
  std::__shared_weak_count::__release_weak(v40);
  if (!*((unsigned char *)a1 + 384)) {
    goto LABEL_48;
  }
LABEL_37:
  *uint64_t v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  if (!v5->__vftable)
  {
    char v98 = v3;
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v101);
    AMSCore::Logger::log<char [69]>((uint64_t)v101.__vftable, 2u, (uint64_t)"bag", 3, "No account was found. Synchronous bag data will not contain cookies.");
    uint64_t v52 = v6;
    std::string::size_type imp = (std::__shared_weak_count *)v101.__imp_.__imp_;
    if (v101.__imp_.__imp_ && !atomic_fetch_add((atomic_ullong *volatile)v101.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
      std::__shared_weak_count::__release_weak(imp);
    }
    goto LABEL_110;
  }
  a1[68] = v5->__vftable;
  uint64_t v41 = a1[40];
  a1[69] = v41;
  if (v41) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void, void *))(*(void *)a1[70] + 56))(a1[70], a1 + 68);
  long long v42 = *((_OWORD *)a1 + 33);
  a1[66] = 0;
  a1[67] = 0;
  *((_OWORD *)a1 + 32) = v42;
  if (atomic_load_explicit((atomic_ullong *volatile)(v42 + 96), memory_order_acquire)) {
    goto LABEL_42;
  }
  *((unsigned char *)v2 + 152) = 2;
  if (atomic_exchange((atomic_ullong *volatile)(a1[64] + 96), (unint64_t)a1)) {
    goto LABEL_42;
  }
}

void sub_18DA702CC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)va);
  std::vector<std::unique_ptr<AMSCore::HTTPCookie>>::~vector[abi:fe180100](v8);
  std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](v7);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](a6);
  std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](a5);
  __cxa_begin_catch(a1);
  AMSCore::Task<AMSCore::SynchronousBagData,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DA7030C()
{
}

void AMSCore::BagDataSource::getSynchronousBagData(void *__p)
{
  uint64_t v2 = (void (***)(void))(__p + 19);
  if (!*__p) {
    goto LABEL_44;
  }
  if (*((unsigned char *)__p + 608))
  {
    if (*((unsigned char *)__p + 608) == 1)
    {
      uint64_t v3 = __p[75];
      if (v3 && !atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        size_t v4 = (std::__shared_weak_count *)__p[75];
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      uint64_t v5 = (std::__shared_weak_count *)__p[30];
      if (!v5) {
        goto LABEL_35;
      }
    }
    else
    {
      char v10 = (std::__shared_weak_count *)__p[65];
      if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
      uint64_t v11 = (std::__shared_weak_count *)__p[67];
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      char v12 = (std::__shared_weak_count *)__p[69];
      if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      char v13 = (uint64_t *)__p[57];
      if (v13)
      {
        uint64_t v14 = (uint64_t *)__p[58];
        uint64_t v15 = (void *)__p[57];
        if (v14 != v13)
        {
          do
            std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v14, 0);
          while (v14 != v13);
          uint64_t v15 = (void *)__p[57];
        }
        __p[58] = v13;
        operator delete(v15);
      }
      if (!*((unsigned char *)__p + 384))
      {
        (*(void (**)(void))__p[39])();
        uint64_t v16 = (std::__shared_weak_count *)__p[61];
        if (v16)
        {
LABEL_36:
          if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
LABEL_39:
        if (!*((unsigned char *)__p + 224))
        {
          (**v2)(v2);
          goto LABEL_44;
        }
        uint64_t v9 = (std::__shared_weak_count *)__p[20];
        if (!v9) {
          goto LABEL_44;
        }
        goto LABEL_41;
      }
      uint64_t v5 = (std::__shared_weak_count *)__p[40];
      if (!v5)
      {
LABEL_35:
        uint64_t v16 = (std::__shared_weak_count *)__p[61];
        if (v16) {
          goto LABEL_36;
        }
        goto LABEL_39;
      }
    }
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    goto LABEL_35;
  }
  uint64_t v6 = __p[72];
  if (v6 && !atomic_fetch_add((atomic_ullong *volatile)(v6 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v7 = (std::__shared_weak_count *)__p[72];
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)__p[30];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)__p[63];
  if (v9)
  {
LABEL_41:
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
LABEL_44:
  uint64_t v17 = (void *)__p[18];
  if (v17 == __p + 15)
  {
    (*(void (**)(char *))(__p[15] + 32))((char *)__p + 120);
    if (!*((unsigned char *)__p + 104)) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }
  if (v17) {
    (*(void (**)(void *))(*v17 + 40))(v17);
  }
  if (*((unsigned char *)__p + 104)) {
LABEL_50:
  }
    std::__expected_base<AMSCore::SynchronousBagData,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100]((uint64_t)(__p + 3));
LABEL_51:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  operator delete(__p);
}

void std::unexpected<AMSCore::Error>::~unexpected(uint64_t a1)
{
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 32, *(unsigned int **)(a1 + 40));
  JUMPOUT(0x192FA3C30);
}

uint64_t std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  else
  {
    (**(void (***)(uint64_t))a1)(a1);
  }
  return a1;
}

void AMSCore::Task<AMSCore::SynchronousBagData,AMSCore::Error>::Promise::unhandled_exception()
{
  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

uint64_t sub_18DA708E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, long long a19, uint64_t a20,uint64_t a21,uint64_t a22,long long a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v41, (uint64_t)v38);
  if (*(unsigned char *)(v29 + 88))
  {
    std::__expected_base<AMSCore::SynchronousBagData,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100]((uint64_t)v30);
    *(unsigned char *)(v29 + 88) = 0;
  }
  std::runtime_error::runtime_error(v30, v41);
  std::runtime_error v31 = v41[1];
  uint64_t v33 = v42;
  uint64_t v32 = v43;
  *(void *)(v29 + 48) = v43;
  uint64_t v34 = v29 + 48;
  *(std::runtime_error *)(v29 + 24) = v31;
  *(void *)(v29 + 8) = &unk_1EDC827D8;
  uint64_t v35 = v44;
  *(void *)(v29 + 40) = v33;
  *(void *)(v29 + 56) = v35;
  if (v35)
  {
    *(void *)(v32 + 16) = v34;
    long long v42 = &v43;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v32 = 0;
  }
  else
  {
    *(void *)(v29 + 40) = v34;
  }
  *(_OWORD *)(v29 + 64) = v45;
  long long v45 = 0uLL;
  *(unsigned char *)(v29 + 80) = 0;
  *(unsigned char *)(v29 + 88) = 1;
  v41[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v42, (unsigned int *)v32);
  MEMORY[0x192FA3C30](v41);
  v38[0] = &unk_1EDC827D8;
  uint64_t v36 = v40;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v39, v39[1]);
  return MEMORY[0x192FA3C30](v38);
}

uint64_t AMSCore::Task<AMSCore::SynchronousBagData,AMSCore::Error>::Promise::Awaiter::await_suspend(uint64_t result)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void (**)(void))atomic_exchange((atomic_ullong *volatile)(*(void *)result + 96), 1uLL);
  if (v1)
  {
    uint64_t v2 = result;
    if (v1 == (void (**)(void))2) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result - 8))(*(void *)result - 16);
    }
    uint64_t v3 = (uint64_t *)(*(void *)result + 128);
    uint64_t result = *v3;
    if (*v3)
    {
      if (result == *(void *)v2 + 104)
      {
        std::runtime_error v25 = v24;
        uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 24))(result, v24);
      }
      else
      {
        std::runtime_error v25 = *(void **)(*(void *)v2 + 128);
        *uint64_t v3 = 0;
      }
    }
    else
    {
      std::runtime_error v25 = 0;
    }
    if (v25)
    {
      uint64_t v4 = *(void *)v2;
      if (!*(unsigned char *)(v4 + 88))
      {
        __break(1u);
        return result;
      }
      uint64_t v5 = (const std::runtime_error *)(v4 + 8);
      char v6 = *(unsigned char *)(v4 + 80);
      uint64_t v7 = (void *)(v4 + 24);
      if (v6)
      {
        std::runtime_error v17 = *(std::runtime_error *)(v4 + 8);
        v5->__vftable = 0;
        *(void *)(v4 + 16) = 0;
        long long v18 = *(_OWORD *)(v4 + 24);
        uint64_t v8 = *(void *)(v4 + 48);
        BOOL v19 = *(uint64_t **)(v4 + 40);
        *(void *)(v4 + 32) = 0;
        *(void *)(v4 + 40) = 0;
        *uint64_t v7 = 0;
        uint64_t v20 = v8;
      }
      else
      {
        std::runtime_error::runtime_error(&v17, v5);
        long long v18 = *(_OWORD *)v7;
        uint64_t v14 = (void *)(v4 + 48);
        uint64_t v15 = *(void *)(v4 + 48);
        uint64_t v16 = *(uint64_t **)(v4 + 40);
        v17.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        BOOL v19 = v16;
        uint64_t v20 = v15;
        if (*(void *)(v4 + 56))
        {
          *(void *)(v15 + 16) = &v20;
          *(void *)(v4 + 40) = v14;
          *uint64_t v14 = 0;
          *(void *)(v4 + 56) = 0;
        }
        else
        {
          BOOL v19 = &v20;
        }
        long long v22 = *(_OWORD *)(v4 + 64);
        *(void *)(v4 + 64) = 0;
        *(void *)(v4 + 72) = 0;
      }
      char v23 = v6;
      if (!v25) {
        std::__throw_bad_function_call[abi:fe180100]();
      }
      (*(void (**)(void *, std::runtime_error *))(*v25 + 48))(v25, &v17);
      std::__expected_base<AMSCore::SynchronousBagData,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100]((uint64_t)&v17);
    }
    else
    {
      (*v1)(v1);
    }
    uint64_t result = (uint64_t)v25;
    if (v25 == v24)
    {
      return (*(uint64_t (**)(void *))(v24[0] + 32))(v24);
    }
    else if (v25)
    {
      return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v25 + 40))(v25, v9, v10, v11, v12, v13);
    }
  }
  return result;
}

void sub_18DA70CB4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::SynchronousBagData,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::SynchronousBagData,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::SynchronousBagData,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINS_18SynchronousBagDataENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINS_18SynchronousBagDataENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINS_18SynchronousBagDataENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINS_18SynchronousBagDataENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::SynchronousBagData,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::SynchronousBagData,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::SynchronousBagData,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 96), 2uLL)) {
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::Task<AMSCore::SynchronousBagData,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::SynchronousBagData,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::SynchronousBagData,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<std::map<std::string,AMSCore::Any>>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<std::map<std::string,AMSCore::Any>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC84358;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<std::map<std::string,AMSCore::Any>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC84358;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&,AMSCore::BagErrorCode>(uint64_t a1, const std::runtime_error *a2, unsigned int *a3)
{
  AMSCore::Error::Error(v4, a2);
  AMSCore::Error::Error<>((uint64_t)&v5, (uint64_t)v4, *a3, (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance);
}

void sub_18DA70FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::runtime_error *AMSCore::Error::Error(std::runtime_error *this, const std::runtime_error *a2)
{
  uint64_t v4 = std::runtime_error::runtime_error(this, a2);
  v4->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA448] + 16);
  v4[1] = a2[1];
  v4->__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  v4[2].__imp_.__imp_ = 0;
  p_std::string::size_type imp = (uint64_t *)&v4[2].__imp_;
  v4[2].__vftable = (std::runtime_error_vtbl *)&v4[2].__imp_;
  char v6 = (uint64_t **)&v4[2];
  v4[3].__vftable = 0;
  uint64_t v7 = (std::__libcpp_refstring *)a2[2].__vftable;
  if (v7 != &a2[2].__imp_)
  {
    do
    {
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>(v6, p_imp, (const void **)&v7[4].__imp_, (long long *)&v7[4]);
      std::string::size_type imp = (const AMSCore::Error *)v7[1].__imp_;
      if (imp)
      {
        do
        {
          uint64_t v11 = imp;
          std::string::size_type imp = *(const AMSCore::Error **)imp;
        }
        while (imp);
      }
      else
      {
        do
        {
          uint64_t v11 = (const AMSCore::Error *)v7[2].__imp_;
          BOOL v12 = *(void *)v11 == (void)v7;
          uint64_t v7 = (std::__libcpp_refstring *)v11;
        }
        while (!v12);
      }
      uint64_t v7 = (std::__libcpp_refstring *)v11;
    }
    while (v11 != (const AMSCore::Error *)&a2[2].__imp_);
  }
  uint64_t v8 = a2[4].__vftable;
  this[3].__imp_.__imp_ = a2[3].__imp_.__imp_;
  this[4].__vftable = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)&v8->~runtime_error_0, 1uLL, memory_order_relaxed);
  }
  return this;
}

void sub_18DA710C0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v2, *(unsigned int **)(v1 + 40));
  MEMORY[0x192FA3C30](v1);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::BagDataSource::sync(uint64_t result)
{
  unint64_t v1 = result;
  uint64_t v2 = (std::runtime_error *)(result + 152);
  if (!*(unsigned char *)(result + 272)) {
    goto LABEL_9;
  }
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(*(void *)(result + 248) + 248));
  uint64_t v3 = *(void *)(v1 + 248);
  uint64_t v4 = *(void *)(*(void *)(v3 + 416) + 16);
  std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v3 + 248));
  if (v4)
  {
    std::runtime_error v5 = (std::__shared_mutex_base *)(*(void *)(v1 + 248) + 248);
    uint64_t v24 = (uint64_t (**)(void **))&unk_1EDC81C28;
    std::__shared_mutex_base::lock_shared(v5);
    uint64_t v6 = *(void *)(v1 + 248);
    if (*(unsigned char *)(v6 + 464))
    {
      BOOL v7 = *(void *)(v6 + 456) <= v24[2]((void **)&v24);
      uint64_t v6 = *(void *)(v1 + 248);
    }
    else
    {
      BOOL v7 = 0;
    }
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v6 + 248));
    if (!v7)
    {
      if (*(unsigned char *)(v1 + 104) && !*(unsigned char *)(v1 + 96)) {
        (**(void (***)(void))(v1 + 24))();
      }
      *(unsigned char *)(v1 + 96) = 1;
      *(unsigned char *)(v1 + 104) = 1;
LABEL_36:
      AMSCore::AwaitableMutex::unlock((std::mutex *)(*(void *)(v1 + 248) + 472));
      *(void *)(v1 + 152) = v1 + 16;
      *(void *)unint64_t v1 = 0;
      return AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v2);
    }
  }
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v1 + 248) + 32))(*(void *)(v1 + 248), 0);
  long long v8 = *(_OWORD *)(v1 + 232);
  *(_OWORD *)(v1 + 256) = v8;
  *(void *)(v1 + 232) = 0;
  *(void *)(v1 + 240) = 0;
  if (atomic_load_explicit((atomic_ullong *volatile)(v8 + 96), memory_order_acquire)
    || (*(unsigned char *)(v1 + 272) = 0, atomic_exchange((atomic_ullong *volatile)(*(void *)(v1 + 256) + 96), v1)))
  {
LABEL_9:
    uint64_t v9 = *(void *)(v1 + 256);
    if (!*(unsigned char *)(v9 + 88))
    {
      __break(1u);
      return result;
    }
    int v10 = *(unsigned __int8 *)(v9 + 80);
    if (!*(unsigned char *)(v9 + 80))
    {
      std::runtime_error::runtime_error(v2, (const std::runtime_error *)(v9 + 8));
      *(_OWORD *)(v1 + 168) = *(_OWORD *)(v9 + 24);
      uint64_t v11 = (void *)(v9 + 48);
      uint64_t v12 = *(void *)(v9 + 48);
      *(void *)(v1 + 192) = v12;
      unint64_t v13 = v1 + 192;
      *(void *)(v1 + 152) = &unk_1EDC827D8;
      *(void *)(v1 + 184) = *(void *)(v9 + 40);
      uint64_t v14 = *(void *)(v9 + 56);
      *(void *)(v1 + 200) = v14;
      if (v14)
      {
        *(void *)(v12 + 16) = v13;
        *(void *)(v9 + 40) = v11;
        *uint64_t v11 = 0;
        *(void *)(v9 + 56) = 0;
      }
      else
      {
        *(void *)(v1 + 184) = v13;
      }
      uint64_t v15 = *(void *)(v1 + 256);
      *(_OWORD *)(v1 + 208) = *(_OWORD *)(v15 + 64);
      *(void *)(v15 + 64) = 0;
      *(void *)(v15 + 72) = 0;
    }
    *(unsigned char *)(v1 + 224) = v10;
    if (*(unsigned char *)(v1 + 104))
    {
      if (!*(unsigned char *)(v1 + 96))
      {
        (**(void (***)(uint64_t))(v1 + 24))(v1 + 24);
        int v10 = *(unsigned __int8 *)(v1 + 224);
      }
      *(unsigned char *)(v1 + 104) = 0;
    }
    if (v10)
    {
      *(unsigned char *)(v1 + 96) = v10;
      *(unsigned char *)(v1 + 104) = 1;
    }
    else
    {
      std::runtime_error::runtime_error((std::runtime_error *)(v1 + 24), v2);
      uint64_t v16 = (void *)(v1 + 192);
      uint64_t v17 = *(void *)(v1 + 192);
      *(void *)(v1 + 64) = v17;
      unint64_t v18 = v1 + 64;
      *(_OWORD *)(v1 + 40) = *(_OWORD *)(v1 + 168);
      *(void *)(v1 + 24) = &unk_1EDC827D8;
      *(void *)(v1 + 56) = *(void *)(v1 + 184);
      uint64_t v19 = *(void *)(v1 + 200);
      *(void *)(v1 + 72) = v19;
      if (v19)
      {
        *(void *)(v17 + 16) = v18;
        *(void *)(v1 + 184) = v16;
        *uint64_t v16 = 0;
        *(void *)(v1 + 200) = 0;
      }
      else
      {
        *(void *)(v1 + 56) = v18;
      }
      *(_OWORD *)(v1 + 80) = *(_OWORD *)(v1 + 208);
      *(void *)(v1 + 208) = 0;
      *(void *)(v1 + 216) = 0;
      int v20 = *(unsigned __int8 *)(v1 + 224);
      *(unsigned char *)(v1 + 96) = 0;
      *(unsigned char *)(v1 + 104) = 1;
      if (!v20) {
        ((void (*)(std::runtime_error *))v2->~runtime_error)(v2);
      }
    }
    uint64_t v21 = *(void *)(v1 + 264);
    if (v21 && !atomic_fetch_add((atomic_ullong *volatile)(v21 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      long long v22 = *(std::__shared_weak_count **)(v1 + 264);
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    char v23 = *(std::__shared_weak_count **)(v1 + 240);
    if (v23)
    {
      if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    goto LABEL_36;
  }
  return result;
}

void AMSCore::BagDataSource::sync(unsigned char *__p)
{
  if (*(void *)__p) {
    BOOL v2 = __p[272] == 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2)
  {
    uint64_t v3 = *((void *)__p + 33);
    if (v3 && !atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 33);
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    std::runtime_error v5 = (std::__shared_weak_count *)*((void *)__p + 30);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    AMSCore::AwaitableMutex::unlock((std::mutex *)(*((void *)__p + 31) + 472));
  }
  uint64_t v6 = (unsigned char *)*((void *)__p + 18);
  if (v6 == __p + 120)
  {
    (*(void (**)(unsigned char *))(*((void *)__p + 15) + 32))(__p + 120);
    if (!__p[104]) {
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  if (v6) {
    (*(void (**)(unsigned char *))(*(void *)v6 + 40))(v6);
  }
  if (__p[104])
  {
LABEL_19:
    if (!__p[96]) {
      (**((void (***)(void))__p + 3))();
    }
  }
LABEL_21:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  operator delete(__p);
}

uint64_t AMSCore::Logger::log<char [29]>(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= a2)
  {
    char v8 = a2;
    uint64_t v9 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v15);
    uint64_t v10 = *(void *)(v15[0] - 24);
    {
    }
    size_t v11 = strlen(a5);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v15, (uint64_t)a5, v11);
    uint64_t v12 = v15[6];
    unint64_t v13 = (char *)v15 + *(void *)(v15[0] - 24);
    if ((v13[32] & 5) != 0)
    {
      uint64_t v14 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v13 + 5) + 32))(&rep);
      uint64_t v14 = v22;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v19 = v8;
    uint64_t v20 = v12;
    uint64_t v21 = v14;
    (*(void (**)(void, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v9 + 16) + 16))(*(void *)(v9 + 16), a3, a4, &rep);
    v15[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v15 + *(void *)(v15[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v15[1] = MEMORY[0x1E4FBA470] + 16;
    if (v16 < 0) {
      operator delete((void *)v15[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v17);
  }
  return result;
}

void sub_18DA7193C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::BagDataSource::observeChanged(void *a1, uint64_t a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  std::runtime_error v5 = (void *)a3[3];
  if (v5)
  {
    if (v5 == a3)
    {
      uint64_t v26 = v25;
      (*(void (**)(void *, void *))(*a3 + 24))(a3, v25);
    }
    else
    {
      uint64_t v26 = (void *)a3[3];
      a3[3] = 0;
    }
  }
  else
  {
    uint64_t v26 = 0;
  }
  uint64_t v6 = operator new(0x38uLL);
  BOOL v7 = v6;
  v6[1] = 0;
  _DWORD v6[2] = 0;
  *uint64_t v6 = &unk_1EDC84390;
  char v8 = v6 + 3;
  if (v26)
  {
    if (v26 == v25)
    {
      v6[6] = v8;
      (*(void (**)(void *, void *))(v25[0] + 24))(v25, v8);
    }
    else
    {
      v6[6] = v26;
      uint64_t v26 = 0;
    }
  }
  else
  {
    v6[6] = 0;
  }
  *(void *)&long long v24 = v8;
  *((void *)&v24 + 1) = v7;
  std::mutex::lock((std::mutex *)(a2 + 72));
  uint64_t v10 = *(char **)(a2 + 144);
  unint64_t v9 = *(void *)(a2 + 152);
  if ((unint64_t)v10 >= v9)
  {
    uint64_t v12 = *(char **)(a2 + 136);
    uint64_t v13 = (v10 - v12) >> 4;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 60) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v15 = v9 - (void)v12;
    if (v15 >> 3 > v14) {
      unint64_t v14 = v15 >> 3;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16 >> 60) {
      std::__throw_bad_array_new_length[abi:fe180100]();
    }
    uint64_t v17 = (char *)operator new(16 * v16);
    unint64_t v18 = &v17[16 * v13];
    *(_OWORD *)unint64_t v18 = v24;
    BOOL v7 = (void *)*((void *)&v24 + 1);
    if (*((void *)&v24 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v24 + 1) + 16), 1uLL, memory_order_relaxed);
      uint64_t v12 = *(char **)(a2 + 136);
      uint64_t v10 = *(char **)(a2 + 144);
    }
    char v19 = &v17[16 * v16];
    size_t v11 = v18 + 16;
    if (v10 == v12)
    {
      *(void *)(a2 + 136) = v18;
      *(void *)(a2 + 144) = v11;
      *(void *)(a2 + 152) = v19;
    }
    else
    {
      do
      {
        long long v20 = *((_OWORD *)v10 - 1);
        v10 -= 16;
        *((_OWORD *)v18 - 1) = v20;
        v18 -= 16;
        *(void *)uint64_t v10 = 0;
        *((void *)v10 + 1) = 0;
      }
      while (v10 != v12);
      uint64_t v12 = *(char **)(a2 + 136);
      uint64_t v21 = *(char **)(a2 + 144);
      *(void *)(a2 + 136) = v18;
      *(void *)(a2 + 144) = v11;
      *(void *)(a2 + 152) = v19;
      while (v21 != v12)
      {
        uint64_t v22 = (std::__shared_weak_count *)*((void *)v21 - 1);
        if (v22) {
          std::__shared_weak_count::__release_weak(v22);
        }
        v21 -= 16;
      }
    }
    if (v12)
    {
      operator delete(v12);
      BOOL v7 = (void *)*((void *)&v24 + 1);
      char v8 = (void *)v24;
    }
    else
    {
      char v8 = (void *)v24;
    }
  }
  else
  {
    *(void *)uint64_t v10 = v8;
    *((void *)v10 + 1) = v7;
    atomic_fetch_add_explicit(v7 + 2, 1uLL, memory_order_relaxed);
    size_t v11 = v10 + 16;
  }
  *(void *)(a2 + 144) = v11;
  *a1 = v8;
  a1[1] = v7;
  std::mutex::unlock((std::mutex *)(a2 + 72));
  uint64_t result = (uint64_t)v26;
  if (v26 == v25) {
    return (*(uint64_t (**)(void *))(v25[0] + 32))(v25);
  }
  if (v26) {
    return (*(uint64_t (**)(void))(*v26 + 40))();
  }
  return result;
}

void sub_18DA71C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t std::__shared_ptr_emplace<std::function<void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = a1 + 24;
  uint64_t result = *(void *)(a1 + 48);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void std::__shared_ptr_emplace<std::function<void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC84390;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<std::function<void ()(AMSCore::MapUtils::UpdateDiff<std::string>)>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC84390;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AMSCore::MapUtils::UpdateDiff<std::string>::~UpdateDiff(uint64_t a1)
{
  BOOL v2 = *(void ***)(a1 + 96);
  if (v2)
  {
    do
    {
      unint64_t v9 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      BOOL v2 = v9;
    }
    while (v9);
  }
  uint64_t v3 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = *(void ***)(a1 + 56);
  if (v4)
  {
    do
    {
      uint64_t v10 = (void **)*v4;
      if (*((char *)v4 + 39) < 0) {
        operator delete(v4[2]);
      }
      operator delete(v4);
      uint64_t v4 = v10;
    }
    while (v10);
  }
  std::runtime_error v5 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = *(void ***)(a1 + 16);
  if (v6)
  {
    do
    {
      size_t v11 = (void **)*v6;
      if (*((char *)v6 + 39) < 0) {
        operator delete(v6[2]);
      }
      operator delete(v6);
      uint64_t v6 = v11;
    }
    while (v11);
  }
  BOOL v7 = *(void **)a1;
  *(void *)a1 = 0;
  if (v7) {
    operator delete(v7);
  }
  return a1;
}

uint64_t *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v5 = *(char *)(a3 + 23);
  if (v5 >= 0) {
    uint64_t v6 = (uint64_t *)a3;
  }
  else {
    uint64_t v6 = *(uint64_t **)a3;
  }
  if (v5 >= 0) {
    unint64_t v7 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    unint64_t v7 = *(void *)(a3 + 8);
  }
  unint64_t v8 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:fe180100](v6, v7);
  if (!a2) {
    return 0;
  }
  unint64_t v9 = v8;
  uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v10.i16[0] = vaddlv_u8(v10);
  unint64_t v11 = v10.u32[0];
  if (v10.u32[0] > 1uLL)
  {
    unint64_t v12 = v8;
    if (v8 >= a2) {
      unint64_t v12 = v8 % a2;
    }
  }
  else
  {
    unint64_t v12 = (a2 - 1) & v8;
  }
  uint64_t v13 = *(uint64_t ***)(a1 + 8 * v12);
  if (!v13) {
    return 0;
  }
  for (unint64_t i = *v13; i; unint64_t i = (uint64_t *)*i)
  {
    unint64_t v15 = i[1];
    if (v9 == v15)
    {
      uint64_t v16 = *((unsigned __int8 *)i + 39);
      if ((v16 & 0x80u) == 0) {
        uint64_t v17 = *((unsigned __int8 *)i + 39);
      }
      else {
        uint64_t v17 = i[3];
      }
      if (v17 == v7)
      {
        if ((v16 & 0x80) != 0)
        {
          if (!memcmp((const void *)i[2], v6, i[3])) {
            return i;
          }
        }
        else
        {
          if (!*((unsigned char *)i + 39)) {
            return i;
          }
          uint64_t v18 = 0;
          while (*((unsigned __int8 *)i + v18 + 16) == *((unsigned __int8 *)v6 + v18))
          {
            if (v16 == ++v18) {
              return i;
            }
          }
        }
      }
    }
    else
    {
      if (v11 <= 1)
      {
        v15 &= a2 - 1;
      }
      else if (v15 >= a2)
      {
        v15 %= a2;
      }
      if (v15 != v12) {
        return 0;
      }
    }
  }
  return i;
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::remove(uint64_t result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)a2[1];
  unint64_t v4 = a3[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint64_t v6 = *(void **)(*a2 + 8 * v4);
  do
  {
    unint64_t v7 = v6;
    uint64_t v6 = (void *)*v6;
  }
  while (v6 != a3);
  if (v7 == a2 + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a3) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a3 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*a2 + 8 * v4) = 0;
  }
  uint64_t v10 = *a3;
  if (*a3)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*a2 + 8 * v11) = v7;
      uint64_t v10 = *a3;
    }
  }
  *unint64_t v7 = v10;
  *a3 = 0;
  --a2[3];
  *(void *)uint64_t result = a3;
  *(void *)(result + 8) = a2 + 2;
  *(unsigned char *)(result + 16) = 1;
  return result;
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::string>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (unint64_t i = *(void **)(a2 + 16); i; unint64_t i = (void *)*i)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_18DA7222C(_Unwind_Exception *a1)
{
  std::unordered_set<std::string>::~unordered_set[abi:fe180100](v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    unint64_t v7 = (uint64_t *)a2;
  }
  else {
    unint64_t v7 = *(uint64_t **)a2;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:fe180100](v7, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    unint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v14)
    {
      for (unint64_t i = *v14; i; unint64_t i = (uint64_t *)*i)
      {
        unint64_t v16 = i[1];
        if (v16 == v10)
        {
          uint64_t v17 = *((unsigned __int8 *)i + 39);
          if ((v17 & 0x80u) == 0) {
            uint64_t v18 = *((unsigned __int8 *)i + 39);
          }
          else {
            uint64_t v18 = i[3];
          }
          if (v18 == v8)
          {
            char v19 = (const void **)(i + 2);
            if ((v17 & 0x80) != 0)
            {
              if (!memcmp(*v19, v7, i[3])) {
                return;
              }
            }
            else
            {
              if (!*((unsigned char *)i + 39)) {
                return;
              }
              for (j = v7; *(unsigned __int8 *)v19 == *(unsigned __int8 *)j; j = (uint64_t *)((char *)j + 1))
              {
                char v19 = (const void **)((char *)v19 + 1);
                if (!--v17) {
                  return;
                }
              }
            }
          }
        }
        else
        {
          if (v13 <= 1)
          {
            v16 &= v11 - 1;
          }
          else if (v16 >= v11)
          {
            v16 %= v11;
          }
          if (v16 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v34 = operator new(0x28uLL);
  *uint64_t v34 = 0;
  v34[1] = v10;
  uint64_t v21 = (std::string *)(v34 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v21->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v34[4] = *(void *)(a3 + 16);
  }
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v28 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v28) {
      goto LABEL_50;
    }
    if (prime < *(void *)&v28)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v28 < 3uLL || (uint8x8_t v30 = (uint8x8_t)vcnt_s8(v28), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < *(void *)&v28) {
LABEL_50:
      }
        std::__hash_table<std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::string>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  uint64_t v32 = *(void **)(*(void *)a1 + 8 * v3);
  if (v32)
  {
    *uint64_t v34 = *v32;
    *uint64_t v32 = v34;
  }
  else
  {
    *uint64_t v34 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v34;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*v34)
    {
      unint64_t v33 = *(void *)(*v34 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v33 >= v11) {
          v33 %= v11;
        }
      }
      else
      {
        v33 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v33) = v34;
    }
  }
  ++*(void *)(a1 + 24);
}

void sub_18DA725B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::string,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>>::~unique_ptr[abi:fe180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::BagDataSource::getAllValues(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 256);
  if (!*(unsigned char *)(v1 + 88))
  {
    __break(1u);
    return result;
  }
  uint64_t v2 = result;
  unint64_t v3 = (const std::runtime_error *)(result + 152);
  char v4 = *(unsigned char *)(v1 + 80);
  if (!v4)
  {
    std::runtime_error::runtime_error((std::runtime_error *)(result + 152), (const std::runtime_error *)(v1 + 8));
    *(_OWORD *)(v2 + 168) = *(_OWORD *)(v1 + 24);
    int8x8_t v5 = (void *)(v1 + 48);
    uint64_t v6 = *(void *)(v1 + 48);
    *(void *)(v2 + 192) = v6;
    uint64_t v7 = v2 + 192;
    *(void *)(v2 + 152) = &unk_1EDC827D8;
    *(void *)(v2 + 184) = *(void *)(v1 + 40);
    uint64_t v8 = *(void *)(v1 + 56);
    *(void *)(v2 + 200) = v8;
    if (v8)
    {
      *(void *)(v6 + 16) = v7;
      *(void *)(v1 + 40) = v5;
      *int8x8_t v5 = 0;
      *(void *)(v1 + 56) = 0;
    }
    else
    {
      *(void *)(v2 + 184) = v7;
    }
    uint64_t v9 = *(void *)(v2 + 256);
    *(_OWORD *)(v2 + 208) = *(_OWORD *)(v9 + 64);
    *(void *)(v9 + 64) = 0;
    *(void *)(v9 + 72) = 0;
  }
  *(unsigned char *)(v2 + 224) = v4;
  uint64_t v10 = *(void *)(v2 + 264);
  if (v10 && !atomic_fetch_add((atomic_ullong *volatile)(v10 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    unint64_t v11 = *(std::__shared_weak_count **)(v2 + 264);
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint8x8_t v12 = *(std::__shared_weak_count **)(v2 + 240);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (*(unsigned char *)(v2 + 224)) {
      goto LABEL_13;
    }
LABEL_19:
    unsigned int v19 = 204;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&,AMSCore::BagErrorCode>((uint64_t)v18, v3, &v19);
  }
  if (!*(unsigned char *)(v2 + 224)) {
    goto LABEL_19;
  }
LABEL_13:
  unint64_t v13 = (std::__shared_mutex_base *)(*(void *)(v2 + 248) + 248);
  std::__shared_mutex_base::lock_shared(v13);
  uint64_t v14 = *(void *)(v2 + 248);
  uint64_t v15 = v14;
  if (*(unsigned char *)(v2 + 104))
  {
    if (*(unsigned char *)(v2 + 96))
    {
      unint64_t v16 = *(std::__shared_weak_count **)(v2 + 32);
      if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    else
    {
      (**(void (***)(void))(v2 + 24))();
    }
    *(unsigned char *)(v2 + 104) = 0;
    uint64_t v15 = *(void *)(v2 + 248);
  }
  *(void *)(v2 + 24) = *(void *)(v14 + 416);
  uint64_t v17 = *(void *)(v15 + 424);
  *(void *)(v2 + 32) = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(v2 + 96) = 1;
  *(unsigned char *)(v2 + 104) = 1;
  std::__shared_mutex_base::unlock_shared(v13);
  if (!*(unsigned char *)(v2 + 224)) {
    ((void (*)(const std::runtime_error *))v3->~runtime_error)(v3);
  }
  *(void *)(v2 + 152) = v2 + 16;
  *(void *)uint64_t v2 = 0;
  return AMSCore::Task<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v3);
}

void sub_18DA72904(void *a1)
{
  if (!*(unsigned char *)(v1 + 224)) {
    (**v2)(v2);
  }
  __cxa_begin_catch(a1);
  AMSCore::Task<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DA72950()
{
}

void AMSCore::BagDataSource::getAllValues(char *__p)
{
  if (*(void *)__p)
  {
    uint64_t v2 = *((void *)__p + 33);
    if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      unint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 33);
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    char v4 = (std::__shared_weak_count *)*((void *)__p + 30);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  int8x8_t v5 = (char *)*((void *)__p + 18);
  if (v5 == __p + 120)
  {
    (*(void (**)(char *))(*((void *)__p + 15) + 32))(__p + 120);
    if (!__p[104]) {
      goto LABEL_19;
    }
    goto LABEL_14;
  }
  if (v5) {
    (*(void (**)(char *))(*(void *)v5 + 40))(v5);
  }
  if (__p[104])
  {
LABEL_14:
    if (__p[96])
    {
      uint64_t v6 = (std::__shared_weak_count *)*((void *)__p + 4);
      if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      (**((void (***)(void))__p + 3))();
    }
  }
LABEL_19:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  operator delete(__p);
}

void AMSCore::Task<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,AMSCore::Error>::Promise::unhandled_exception()
{
  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

uint64_t sub_18DA72B64(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v36, (uint64_t)v33);
  std::optional<std::expected<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>(v29, v36);
  v36[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  uint8x8_t v30 = v38;
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v37, v37[1]);
  MEMORY[0x192FA3C30](v36);
  v33[0] = &unk_1EDC827D8;
  uint64_t v31 = v35;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v34, v34[1]);
  return MEMORY[0x192FA3C30](v33);
}

uint64_t AMSCore::Task<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,AMSCore::Error>::Promise::Awaiter::await_suspend(uint64_t result)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void (**)(void))atomic_exchange((atomic_ullong *volatile)(*(void *)result + 96), 1uLL);
  if (v1)
  {
    uint64_t v2 = result;
    if (v1 == (void (**)(void))2) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result - 8))(*(void *)result - 16);
    }
    unint64_t v3 = (uint64_t *)(*(void *)result + 128);
    uint64_t result = *v3;
    if (*v3)
    {
      if (result == *(void *)v2 + 104)
      {
        BOOL v24 = v23;
        uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 24))(result, v23);
      }
      else
      {
        BOOL v24 = *(void **)(*(void *)v2 + 128);
        *unint64_t v3 = 0;
      }
    }
    else
    {
      BOOL v24 = 0;
    }
    if (v24)
    {
      uint64_t v4 = *(void *)v2;
      if (!*(unsigned char *)(*(void *)v2 + 88))
      {
        __break(1u);
        return result;
      }
      int8x8_t v5 = (const std::runtime_error *)(v4 + 8);
      char v6 = *(unsigned char *)(v4 + 80);
      if (v6)
      {
        v15.__vftable = *(std::runtime_error_vtbl **)(v4 + 8);
        p_std::string::size_type imp = &v15.__imp_;
        uint64_t v8 = (const char **)(v4 + 16);
      }
      else
      {
        std::runtime_error::runtime_error(&v15, v5);
        uint64_t v9 = (void *)(v4 + 48);
        uint64_t v10 = *(void *)(v4 + 48);
        long long v16 = *(_OWORD *)(v4 + 24);
        unint64_t v11 = *(uint64_t **)(v4 + 40);
        v15.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        uint64_t v17 = v11;
        uint64_t v18 = v10;
        if (*(void *)(v4 + 56))
        {
          *(void *)(v10 + 16) = &v18;
          *(void *)(v4 + 40) = v9;
          *uint64_t v9 = 0;
          *(void *)(v4 + 56) = 0;
        }
        else
        {
          uint64_t v17 = &v18;
        }
        uint64_t v13 = *(void *)(v4 + 64);
        uint8x8_t v12 = (const std::runtime_error *)(v4 + 64);
        uint64_t v20 = v13;
        p_std::string::size_type imp = (std::__libcpp_refstring *)&v21;
        uint64_t v8 = &v12->__imp_.__imp_;
        int8x8_t v5 = v12;
      }
      p_imp->__imp_ = *v8;
      v5->__vftable = 0;
      v5->__imp_.__imp_ = 0;
      char v22 = v6;
      if (!v24) {
        std::__throw_bad_function_call[abi:fe180100]();
      }
      (*(void (**)(void *, std::runtime_error *))(*v24 + 48))(v24, &v15);
      if (v22)
      {
        std::string::size_type imp = (std::__shared_weak_count *)v15.__imp_.__imp_;
        if (v15.__imp_.__imp_
          && !atomic_fetch_add((atomic_ullong *volatile)v15.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
          std::__shared_weak_count::__release_weak(imp);
        }
      }
      else
      {
        ((void (*)(std::runtime_error *))v15.~runtime_error)(&v15);
      }
    }
    else
    {
      (*v1)(v1);
    }
    uint64_t result = (uint64_t)v24;
    if (v24 == v23)
    {
      return (*(uint64_t (**)(void *))(v23[0] + 32))(v23);
    }
    else if (v24)
    {
      return (*(uint64_t (**)(void))(*v24 + 40))();
    }
  }
  return result;
}

void sub_18DA72F6C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,AMSCore::Error>::Promise *,AMSCore::Task<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINSt3__110shared_ptrIKNS1_3mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocat"
                     "orIcEEEENS_3AnyENS1_4lessIvEENS7_INS1_4pairIKS9_SA_EEEEEEEENS_5ErrorEE7Promise17get_return_objectEv"
                     "E13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINSt3__110shared_ptrIKNS1_3mapINS1_12basic_stringIcNS1_11char_traitsIcEEN"
                                "S1_9allocatorIcEEEENS_3AnyENS1_4lessIvEENS7_INS1_4pairIKS9_SA_EEEEEEEENS_5ErrorEE7Promis"
                                "e17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINSt3__110shared_ptrIKNS1_3mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_3AnyENS1_4lessIvEENS7_INS1_4pairIKS9_SA_EEEEEEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINSt3__110shared_ptrIKNS1_3mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_3AnyENS1_4lessIvEENS7_INS1_4pairIKS9_SA_EEEEEEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,AMSCore::Error>::Promise *,AMSCore::Task<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 96), 2uLL)) {
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,AMSCore::Error>::Promise *,AMSCore::Task<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<std::map<std::string,AMSCore::Any> const>,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void *std::__function::__func<AMSCore::setStorefrontSuffix(std::optional<std::string> const&,std::string const&)::$_0,std::allocator<AMSCore::setStorefrontSuffix(std::optional<std::string> const&,std::string const&)::$_0>,void ()(std::map<std::string,AMSCore::Any> &)>::target_type()
{
}

uint64_t std::__function::__func<AMSCore::setStorefrontSuffix(std::optional<std::string> const&,std::string const&)::$_0,std::allocator<AMSCore::setStorefrontSuffix(std::optional<std::string> const&,std::string const&)::$_0>,void ()(std::map<std::string,AMSCore::Any> &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore19setStorefrontSuffixERKNSt3__18optionalINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9al"
                     "locatorIcEEEEEERKS7_E3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore19setStorefrontSuffixERKNSt3__18optionalINS0_12basic_stringIcNS0_11char_traits"
                                "IcEENS0_9allocatorIcEEEEEERKS7_E3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore19setStorefrontSuffixERKNSt3__18optionalINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEEERKS7_E3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore19setStorefrontSuffixERKNSt3__18optionalINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEEERKS7_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMSCore::setStorefrontSuffix(std::optional<std::string> const&,std::string const&)::$_0,std::allocator<AMSCore::setStorefrontSuffix(std::optional<std::string> const&,std::string const&)::$_0>,void ()(std::map<std::string,AMSCore::Any> &)>::operator()(uint64_t a1, void **a2)
{
  unint64_t v3 = *(long long **)(a1 + 8);
  uint64_t v4 = *(long long **)(a1 + 16);
  if (!*((unsigned char *)v4 + 24))
  {
    char v22 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)a2, (const void **)v3);
    if (a2 + 1 != (void **)v22)
    {
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase(a2, (uint64_t)v22);
    }
    return;
  }
  int8x8_t v5 = (uint64_t *)(a2 + 1);
  char v6 = a2[1];
  if (!v6) {
    goto LABEL_45;
  }
  int v7 = *((char *)v3 + 23);
  if (v7 >= 0) {
    uint64_t v8 = *(const void **)(a1 + 8);
  }
  else {
    uint64_t v8 = *(const void **)v3;
  }
  if (v7 >= 0) {
    size_t v9 = *((unsigned __int8 *)v3 + 23);
  }
  else {
    size_t v9 = *((void *)v3 + 1);
  }
  uint64_t v10 = (uint64_t *)(a2 + 1);
  do
  {
    while (1)
    {
      int v11 = *((char *)v6 + 55);
      uint8x8_t v12 = v11 >= 0 ? v6 + 4 : (uint64_t *)v6[4];
      size_t v13 = v11 >= 0 ? *((unsigned __int8 *)v6 + 55) : v6[5];
      size_t v14 = v9 >= v13 ? v13 : v9;
      int v15 = memcmp(v12, v8, v14);
      if (v15) {
        break;
      }
      if (v13 >= v9) {
        goto LABEL_24;
      }
LABEL_10:
      char v6 = (uint64_t *)v6[1];
      if (!v6) {
        goto LABEL_25;
      }
    }
    if (v15 < 0) {
      goto LABEL_10;
    }
LABEL_24:
    uint64_t v10 = v6;
    char v6 = (uint64_t *)*v6;
  }
  while (v6);
LABEL_25:
  if (v10 == v5) {
    goto LABEL_45;
  }
  int v16 = *((char *)v10 + 55);
  if (v16 >= 0) {
    uint64_t v17 = v10 + 4;
  }
  else {
    uint64_t v17 = (void *)v10[4];
  }
  if (v16 >= 0) {
    size_t v18 = *((unsigned __int8 *)v10 + 55);
  }
  else {
    size_t v18 = v10[5];
  }
  if (v18 >= v9) {
    size_t v19 = v9;
  }
  else {
    size_t v19 = v18;
  }
  int v20 = memcmp(v8, v17, v19);
  if (v20)
  {
    if ((v20 & 0x80000000) == 0) {
      goto LABEL_37;
    }
LABEL_44:
    int8x8_t v5 = v10;
LABEL_45:
    float v23 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__find_equal<std::string>(a2, v5, (uint64_t **)&v32, &v34, (const void **)v3);
    if (!*v23)
    {
      BOOL v24 = v23;
      uint64_t v25 = (char *)operator new(0x58uLL);
      unint64_t v26 = (std::string *)(v25 + 32);
      if (*((char *)v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)v3, *((void *)v3 + 1));
      }
      else
      {
        long long v27 = *v3;
        *((void *)v25 + 6) = *((void *)v3 + 2);
        *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
      }
      int8x8_t v28 = (std::string *)(v25 + 56);
      if (*((char *)v4 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)v4, *((void *)v4 + 1));
      }
      else
      {
        long long v29 = *v4;
        *((void *)v25 + 9) = *((void *)v4 + 2);
        *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
      }
      *((_DWORD *)v25 + 20) = 5;
      std::string::size_type v30 = v32.__r_.__value_.__r.__words[0];
      *(void *)uint64_t v25 = 0;
      *((void *)v25 + 1) = 0;
      *((void *)v25 + 2) = v30;
      *BOOL v24 = (uint64_t)v25;
      uint64_t v31 = (void *)**a2;
      if (v31)
      {
        *a2 = v31;
        uint64_t v25 = (char *)*v24;
      }
      std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a2[1], (uint64_t *)v25);
      a2[2] = (void *)((char *)a2[2] + 1);
    }
  }
  else
  {
    if (v9 < v18) {
      goto LABEL_44;
    }
LABEL_37:
    if (*((char *)v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)v4, *((void *)v4 + 1));
    }
    else
    {
      long long v21 = *v4;
      v32.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v21;
    }
    int v33 = 5;
    AMSCore::Any::operator=((uint64_t)(v10 + 7), (uint64_t)&v32);
    if (v33 != -1) {
      ((void (*)(uint64_t **, std::string *))off_1EDCA50C0[v33])(&v34, &v32);
    }
  }
}

void sub_18DA73360(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<AMSCore::setStorefrontSuffix(std::optional<std::string> const&,std::string const&)::$_0,std::allocator<AMSCore::setStorefrontSuffix(std::optional<std::string> const&,std::string const&)::$_0>,void ()(std::map<std::string,AMSCore::Any> &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EDC83130;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMSCore::setStorefrontSuffix(std::optional<std::string> const&,std::string const&)::$_0,std::allocator<AMSCore::setStorefrontSuffix(std::optional<std::string> const&,std::string const&)::$_0>,void ()(std::map<std::string,AMSCore::Any> &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EDC83130;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AMSCore::setStorefrontSuffix(std::optional<std::string> const&,std::string const&)::$_0,std::allocator<AMSCore::setStorefrontSuffix(std::optional<std::string> const&,std::string const&)::$_0>,void ()(std::map<std::string,AMSCore::Any> &)>::~__func()
{
}

void *std::__function::__func<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0,std::allocator<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0>,void ()(std::map<std::string,AMSCore::Any> &)>::target_type()
{
}

uint64_t std::__function::__func<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0,std::allocator<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0>,void ()(std::map<std::string,AMSCore::Any> &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore20setCookiesForProfileERKNSt3__15tupleIJNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9all"
                     "ocatorIcEEEES7_EEENS0_6vectorIS7_NS5_IS7_EEEEE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore20setCookiesForProfileERKNSt3__15tupleIJNS0_12basic_stringIcNS0_11char_traitsI"
                                "cEENS0_9allocatorIcEEEES7_EEENS0_6vectorIS7_NS5_IS7_EEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore20setCookiesForProfileERKNSt3__15tupleIJNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES7_EEENS0_6vectorIS7_NS5_IS7_EEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore20setCookiesForProfileERKNSt3__15tupleIJNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES7_EEENS0_6vectorIS7_NS5_IS7_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0,std::allocator<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0>,void ()(std::map<std::string,AMSCore::Any> &)>::operator()(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v3 == v4) {
    goto LABEL_41;
  }
  if (v4 - v3 != 48) {
    goto LABEL_14;
  }
  uint64_t v5 = *(unsigned __int8 *)(v3 + 23);
  int v6 = (char)v5;
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(v3 + 8);
  }
  if (v5 != 4) {
    goto LABEL_14;
  }
  int v7 = v6 >= 0 ? *(_DWORD **)(a1 + 8) : *(_DWORD **)v3;
  BOOL v9 = *v7 == 1634563177;
  uint64_t v8 = (_DWORD *)(v3 + 24);
  BOOL v9 = !v9 || v8 == (_DWORD *)v4;
  if (v9) {
    goto LABEL_14;
  }
  uint64_t v22 = *(unsigned __int8 *)(v3 + 47);
  int v23 = (char)v22;
  if ((v22 & 0x80u) != 0) {
    uint64_t v22 = *(void *)(v3 + 32);
  }
  if (v22 != 4) {
    goto LABEL_14;
  }
  if (v23 < 0) {
    uint64_t v8 = *(_DWORD **)(v3 + 24);
  }
  if (*v8 == 1701213289 && v3 + 48 == v4)
  {
LABEL_41:
    uint64_t v25 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>((uint64_t)a2, *(const void ***)(a1 + 32));
    if (a2 + 1 != v25)
    {
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase(a2, (uint64_t)v25);
    }
  }
  else
  {
LABEL_14:
    uint64_t v10 = *(const std::string::value_type ***)(a1 + 32);
    long long v27 = 0;
    uint64_t v28 = 0;
    std::string __p = 0;
    std::vector<std::string>::__init_with_size[abi:fe180100]<std::string*,std::string*>(&__p, v3, v4, 0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 3));
    uint8x8_t v12 = (void **)__p;
    int v11 = v27;
    int v33 = 0;
    long long v32 = 0uLL;
    if (v27 == __p)
    {
      long long v29 = 0uLL;
      std::string::size_type v30 = 0;
      int v31 = 9;
    }
    else
    {
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v27 - (unsigned char *)__p) >> 3);
      if (v13 >> 59) {
        std::vector<std::string>::__throw_length_error[abi:fe180100]();
      }
      size_t v14 = 0x5555555555555560 * (((char *)v27 - (unsigned char *)__p) >> 3);
      int v15 = (char *)operator new(v14);
      int v16 = &v15[32 * v13];
      *(void *)&long long v32 = v15;
      int v33 = v16;
      bzero(v15, v14);
      *((void *)&v32 + 1) = &v15[v14];
      long long v29 = v32;
      std::string::size_type v30 = v16;
      int v31 = 9;
      uint64_t v17 = v32;
      do
      {
        long long v18 = *(_OWORD *)v12;
        int v33 = (char *)v12[2];
        long long v32 = v18;
        v12[1] = 0;
        std::runtime_error v12[2] = 0;
        *uint8x8_t v12 = 0;
        int v34 = 5;
        AMSCore::Any::operator=(v17, (uint64_t)&v32);
        if (v34 != -1) {
          ((void (*)(char *, long long *))off_1EDCA50C0[v34])(&v35, &v32);
        }
        v12 += 3;
        v17 += 32;
      }
      while (v12 != v11);
    }
    std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<AMSCore::Any>((void **)a2, v10, (uint64_t)&v29);
    if (v31 != -1) {
      ((void (*)(long long *, long long *))off_1EDCA50C0[v31])(&v32, &v29);
    }
    int v31 = -1;
    size_t v19 = (void **)__p;
    if (__p)
    {
      int v20 = v27;
      long long v21 = __p;
      if (v27 != __p)
      {
        do
        {
          if (*((char *)v20 - 1) < 0) {
            operator delete(*(v20 - 3));
          }
          v20 -= 3;
        }
        while (v20 != v19);
        long long v21 = __p;
      }
      long long v27 = v19;
      operator delete(v21);
    }
  }
}

void sub_18DA73730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, void **a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, unsigned int a16, int a17, char a18)
{
  if (a16 != -1) {
    (*(void (**)(char *, char *))(v18 + 8 * a16))(&a18, &a13);
  }
  a16 = -1;
  if (__p)
  {
    int v20 = a11;
    long long v21 = __p;
    if (a11 != __p)
    {
      do
      {
        if (*((char *)v20 - 1) < 0) {
          operator delete(*(v20 - 3));
        }
        v20 -= 3;
      }
      while (v20 != __p);
      long long v21 = __p;
    }
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

void sub_18DA737AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char *__p, char *a18)
{
  if (__p)
  {
    long long v21 = a18;
    uint64_t v22 = __p;
    if (a18 != __p)
    {
      do
      {
        int v23 = v21 - 32;
        uint64_t v24 = *((unsigned int *)v21 - 2);
        if (v24 != -1) {
          (*(void (**)(uint64_t, char *))(v18 + 8 * v24))(v19 - 65, v21 - 32);
        }
        *((_DWORD *)v21 - 2) = -1;
        v21 -= 32;
      }
      while (v23 != __p);
      uint64_t v22 = __p;
    }
    operator delete(v22);
  }
  __clang_call_terminate(a1);
}

void std::vector<std::string>::__init_with_size[abi:fe180100]<std::string*,std::string*>(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v8 = (char *)operator new(24 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[24 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = &v8[v9];
        uint64_t v11 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v8[v9], *(const std::string::value_type **)v11, *(void *)(v11 + 8));
        }
        else
        {
          *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
          *((void *)v10 + 2) = *(void *)(v11 + 16);
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_18DA73908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void ***std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:fe180100](void ***a1)
{
  if (!*((unsigned char *)a1 + 8))
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (void **)**a1;
    if (v3)
    {
      uint64_t v4 = (void **)v2[1];
      uint64_t v5 = **a1;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0) {
            operator delete(*(v4 - 3));
          }
          v4 -= 3;
        }
        while (v4 != v3);
        uint64_t v5 = **a1;
      }
      v2[1] = v3;
      operator delete(v5);
    }
  }
  return a1;
}

void std::__function::__func<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0,std::allocator<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0>,void ()(std::map<std::string,AMSCore::Any> &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = __p[1];
  if (v2)
  {
    uint64_t v3 = __p[2];
    uint64_t v4 = (void *)__p[1];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)__p[1];
    }
    __p[2] = v2;
    operator delete(v4);
  }
  operator delete(__p);
}

void std::__function::__func<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0,std::allocator<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0>,void ()(std::map<std::string,AMSCore::Any> &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    uint64_t v4 = *(void **)(a1 + 8);
    if (v3 != v1)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v1);
      uint64_t v4 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v1;
    operator delete(v4);
  }
}

void std::__function::__func<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0,std::allocator<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0>,void ()(std::map<std::string,AMSCore::Any> &)>::__clone(uint64_t *a1, void *a2)
{
  *a2 = &unk_1EDC83188;
  a2[2] = 0;
  a2[3] = 0;
  a2[1] = 0;
  std::vector<std::string>::__init_with_size[abi:fe180100]<std::string*,std::string*>(a2 + 1, a1[1], a1[2], 0xAAAAAAAAAAAAAAABLL * ((a1[2] - a1[1]) >> 3));
  a2[4] = a1[4];
}

void *std::__function::__func<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0,std::allocator<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0>,void ()(std::map<std::string,AMSCore::Any> &)>::__clone(uint64_t *a1)
{
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_1EDC83188;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  std::vector<std::string>::__init_with_size[abi:fe180100]<std::string*,std::string*>(v2 + 1, a1[1], a1[2], 0xAAAAAAAAAAAAAAABLL * ((a1[2] - a1[1]) >> 3));
  v2[4] = a1[4];
  return v2;
}

void sub_18DA73BCC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0,std::allocator<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0>,void ()(std::map<std::string,AMSCore::Any> &)>::~__func(void *a1)
{
  *a1 = &unk_1EDC83188;
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = a1[2];
    uint64_t v4 = (void *)a1[1];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }
  JUMPOUT(0x192FA4080);
}

void *std::__function::__func<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0,std::allocator<AMSCore::setCookiesForProfile(std::tuple<std::string,std::string> const&,std::vector<std::string>)::$_0>,void ()(std::map<std::string,AMSCore::Any> &)>::~__func(void *a1)
{
  *a1 = &unk_1EDC83188;
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = a1[2];
    uint64_t v4 = (void *)a1[1];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t AMSCore::cookiesUpdated(uint64_t a1, uint64_t a2, unsigned __int8 ***a3)
{
  uint64_t v4 = a1;
  if (*((unsigned char *)a3 + 24))
  {
    uint64_t v5 = *a3;
    if (a2 - a1 == (char *)a3[1] - (char *)*a3)
    {
      if (a1 == a2) {
        return 0;
      }
      while (1)
      {
        uint64_t v10 = *(unsigned __int8 *)(v4 + 23);
        if ((v10 & 0x80u) == 0) {
          uint64_t v11 = (unsigned __int8 *)*(unsigned __int8 *)(v4 + 23);
        }
        else {
          uint64_t v11 = *(unsigned __int8 **)(v4 + 8);
        }
        uint8x8_t v12 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
        int v13 = (char)v12;
        if ((char)v12 < 0) {
          uint8x8_t v12 = v5[1];
        }
        if (v11 != v12) {
          break;
        }
        if (v13 >= 0) {
          size_t v14 = (unsigned __int8 *)v5;
        }
        else {
          size_t v14 = *v5;
        }
        if ((v10 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v4, v14, *(void *)(v4 + 8))) {
            return 1;
          }
        }
        else if (*(unsigned char *)(v4 + 23))
        {
          uint64_t v15 = 0;
          while (*(unsigned __int8 *)(v4 + v15) == v14[v15])
          {
            if (v10 == ++v15) {
              goto LABEL_17;
            }
          }
          return 1;
        }
LABEL_17:
        uint64_t result = 0;
        v4 += 24;
        v5 += 3;
        if (v4 == a2) {
          return result;
        }
      }
    }
    return 1;
  }
  if (a2 - a1 != 48) {
    return 1;
  }
  if (a1 != a2)
  {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
    int v8 = (char)v7;
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *(void *)(a1 + 8);
    }
    if (v7 != 4) {
      return 1;
    }
    uint64_t v9 = v8 >= 0 ? (_DWORD *)a1 : *(_DWORD **)a1;
    if (*v9 != 1634563177) {
      return 1;
    }
    int v16 = (void *)(a1 + 24);
    if (a1 + 24 != a2)
    {
      uint64_t v17 = *(unsigned __int8 *)(a1 + 47);
      int v18 = (char)v17;
      if ((v17 & 0x80u) != 0) {
        uint64_t v17 = *(void *)(a1 + 32);
      }
      if (v17 == 4)
      {
        if (v18 < 0) {
          int v16 = (void *)*v16;
        }
        if (*(_DWORD *)v16 == 1701213289)
        {
          uint64_t v19 = a1 + 48;
          int v20 = 1;
          goto LABEL_42;
        }
      }
      return 1;
    }
  }
  int v20 = 0;
  uint64_t v19 = a2;
LABEL_42:
  unsigned int v21 = v20 ^ 1;
  if (v19 == a2) {
    return v21;
  }
  else {
    return 1;
  }
}

void AMSCore::getStorefrontSuffix(std::string *a1, uint64_t a2, void *__s1, size_t a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (uint64_t *)(a2 + 8);
  int v6 = *(uint64_t **)(a2 + 8);
  if (!v6)
  {
LABEL_50:
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
    return;
  }
  uint64_t v9 = (uint64_t *)(a2 + 8);
  do
  {
    while (1)
    {
      int v10 = *((char *)v6 + 55);
      uint64_t v11 = v10 >= 0 ? v6 + 4 : (uint64_t *)v6[4];
      size_t v12 = v10 >= 0 ? *((unsigned __int8 *)v6 + 55) : v6[5];
      size_t v13 = v12 >= a4 ? a4 : v12;
      int v14 = memcmp(__s1, v11, v13);
      if (v14) {
        break;
      }
      if (a4 <= v12) {
        goto LABEL_17;
      }
LABEL_3:
      int v6 = (uint64_t *)v6[1];
      if (!v6) {
        goto LABEL_18;
      }
    }
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_17:
    uint64_t v9 = v6;
    int v6 = (uint64_t *)*v6;
  }
  while (v6);
LABEL_18:
  if (v9 == v5) {
    goto LABEL_50;
  }
  int v15 = *((char *)v9 + 55);
  if (v15 >= 0) {
    int v16 = v9 + 4;
  }
  else {
    int v16 = (const void *)v9[4];
  }
  if (v15 >= 0) {
    size_t v17 = *((unsigned __int8 *)v9 + 55);
  }
  else {
    size_t v17 = v9[5];
  }
  if (v17 >= a4) {
    size_t v18 = a4;
  }
  else {
    size_t v18 = v17;
  }
  int v19 = memcmp(__s1, v16, v18);
  if (v19)
  {
    if (v19 < 0) {
      goto LABEL_50;
    }
  }
  else if (a4 < v17)
  {
    goto LABEL_50;
  }
  int v20 = (long long *)(v9 + 7);
  if (*((_DWORD *)v9 + 20) != 5) {
    int v20 = 0;
  }
  if (*((_DWORD *)v9 + 20) != 5)
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v28);
    uint64_t v22 = v28;
    if (*(unsigned __int8 *)(v28 + 8) <= 4u)
    {
      std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v30);
      uint64_t v23 = *(void *)(v30[0] - 24);
      {
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v30, (uint64_t)"The bag contained an invalid value. key = ", 42);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v30, (uint64_t)"storefront-header-suffix", 24);
      uint64_t v24 = v30[6];
      uint64_t v25 = (char *)v30 + *(void *)(v30[0] - 24);
      if ((v25[32] & 5) != 0)
      {
        uint64_t v26 = -1;
      }
      else
      {
        (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v25 + 5) + 32))(&rep);
        uint64_t v26 = v37;
      }
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
      char v34 = 4;
      uint64_t v35 = v24;
      uint64_t v36 = v26;
      (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v22 + 16) + 16))(*(void *)(v22 + 16), "bag", 3, &rep);
      v30[0] = *MEMORY[0x1E4FBA418];
      *(void *)((char *)v30 + *(void *)(v30[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v30[1] = MEMORY[0x1E4FBA470] + 16;
      if (v31 < 0) {
        operator delete((void *)v30[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x192FA3FD0](&v32);
    }
    long long v27 = v29;
    if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    goto LABEL_50;
  }
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  if (*((char *)v20 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)v20, *((void *)v20 + 1));
  }
  else
  {
    long long v21 = *v20;
    a1->__r_.__value_.__r.__words[2] = *((void *)v20 + 2);
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v21;
  }
  a1[1].__r_.__value_.__s.__data_[0] = 1;
}

void sub_18DA742E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::getValueByKey<std::vector<AMSCore::Any>,std::map<std::string,AMSCore::Any> const>(uint64_t a1, uint64_t a2, void *a3, unint64_t a4)
{
  v33[0] = (uint64_t)a3;
  v33[1] = a4;
  AMSCore::getValueByKey((uint64_t)&v26, a2, a3, a4);
  if (!v32)
  {
    std::runtime_error::runtime_error(&v19, &v26);
    long long v20 = v27;
    v19.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    long long v21 = v28;
    uint64_t v22 = v29;
    uint64_t v23 = v30;
    if (v30)
    {
      *(void *)(v29 + 16) = &v22;
      uint64_t v28 = &v29;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
    }
    else
    {
      long long v21 = &v22;
    }
    long long v24 = v31;
    long long v31 = 0uLL;
    char v25 = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v13, (uint64_t)&v19);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v13);
    *(_OWORD *)(a1 + 16) = v14;
    *(void *)a1 = &unk_1EDC827D8;
    uint64_t v9 = v16;
    *(void *)(a1 + 32) = v15;
    *(void *)(a1 + 40) = v9;
    uint64_t v10 = a1 + 40;
    uint64_t v11 = v17;
    *(void *)(a1 + 48) = v17;
    if (v11)
    {
      *(void *)(v9 + 16) = v10;
      int v15 = &v16;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v9 = 0;
    }
    else
    {
      *(void *)(a1 + 32) = v10;
    }
    *(_OWORD *)(a1 + 56) = v18;
    long long v18 = 0uLL;
    *(unsigned char *)(a1 + 72) = 0;
    v13.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v15, (unsigned int *)v9);
    MEMORY[0x192FA3C30](&v13);
    if (!v25) {
      goto LABEL_22;
    }
    v19.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    size_t v12 = (std::__shared_weak_count *)*((void *)&v24 + 1);
    if (*((void *)&v24 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    uint64_t v6 = v22;
LABEL_21:
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v21, (unsigned int *)v6);
    MEMORY[0x192FA3C30](&v19);
    goto LABEL_22;
  }
  uint64_t v5 = v26.__vftable;
  if (LODWORD(v26.__vftable[1].~runtime_error) != 9)
  {
    LOBYTE(v13.__vftable) = 34;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[32],std::string_view &,char>((uint64_t)&v19, 0xCu, "unable to find value with key \"", v33, (char *)&v13);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v19);
    *(_OWORD *)(a1 + 16) = v20;
    *(void *)a1 = &unk_1EDC827D8;
    uint64_t v6 = v22;
    *(void *)(a1 + 32) = v21;
    *(void *)(a1 + 40) = v6;
    uint64_t v7 = a1 + 40;
    uint64_t v8 = v23;
    *(void *)(a1 + 48) = v23;
    if (v8)
    {
      *(void *)(v6 + 16) = v7;
      long long v21 = &v22;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v6 = 0;
    }
    else
    {
      *(void *)(a1 + 32) = v7;
    }
    *(_OWORD *)(a1 + 56) = v24;
    long long v24 = 0uLL;
    *(unsigned char *)(a1 + 72) = 0;
    v19.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    goto LABEL_21;
  }
  if (LODWORD(v26.__vftable[1].~runtime_error) != 9) {
    uint64_t v5 = 0;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 72) = 1;
LABEL_22:
  if (!v32) {
    ((void (*)(std::runtime_error *))v26.~runtime_error)(&v26);
  }
}

void sub_18DA7466C(_Unwind_Exception *exception_object)
{
  if (!*(unsigned char *)(v1 - 72)) {
    (**(void (***)(uint64_t))(v1 - 144))(v1 - 144);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::string>::vector<std::string_view const*,0>(void *a1, uint64_t a2, uint64_t a3)
{
  a1[2] = 0;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = a3 - a2;
  if (a3 != a2)
  {
    if (v4 < 0) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v6 = a2;
    uint64_t v7 = v4 >> 4;
    uint64_t v8 = (char *)operator new(24 * (v4 >> 4));
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[24 * v7];
    uint64_t v16 = v8;
    uint64_t v9 = v8;
    while (1)
    {
      size_t v10 = *(void *)(v6 + 8);
      if (v10 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:fe180100]();
      }
      uint64_t v11 = *(const void **)v6;
      if (v10 >= 0x17) {
        break;
      }
      v9[23] = v10;
      if (v10) {
        goto LABEL_5;
      }
LABEL_6:
      v9[v10] = 0;
      uint64_t v9 = v16 + 24;
      v16 += 24;
      v6 += 16;
      if (v6 == a3)
      {
        a1[1] = v9;
        return a1;
      }
    }
    uint64_t v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v12 = v10 | 7;
    }
    uint64_t v13 = v12 + 1;
    long long v14 = operator new(v12 + 1);
    *((void *)v9 + 1) = v10;
    *((void *)v9 + 2) = v13 | 0x8000000000000000;
    *(void *)uint64_t v9 = v14;
    uint64_t v9 = v14;
LABEL_5:
    memmove(v9, v11, v10);
    goto LABEL_6;
  }
  return a1;
}

void sub_18DA747FC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (void **)*v1;
  if (*v1)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 3;
      }
      while (v4 != v3);
      uint64_t v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:fe180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0) {
        operator delete(*(void **)(v3 - 24));
      }
      v3 -= 24;
    }
  }
  return a1;
}

void std::shared_ptr<AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise,AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_18DA74934(void *a1)
{
  __cxa_begin_catch(a1);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 96), 2uLL)) {
    (*(void (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  __cxa_rethrow();
}

void sub_18DA74960(_Unwind_Exception *a1)
{
}

std::runtime_error *std::optional<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>,void>(std::runtime_error *this, std::runtime_error *a2)
{
  if (LOBYTE(this[5].__vftable))
  {
    if (LOBYTE(this[4].__imp_.__imp_))
    {
      std::string::size_type imp = (std::__shared_weak_count *)this->__imp_.__imp_;
      if (imp && !atomic_fetch_add(&imp->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
        std::__shared_weak_count::__release_weak(imp);
      }
    }
    else
    {
      ((void (*)(std::runtime_error *))this->~runtime_error)(this);
    }
    LOBYTE(this[5].__vftable) = 0;
  }
  char v5 = (char)a2[4].__imp_.__imp_;
  if (v5)
  {
    p_std::string::size_type imp = &a2->__imp_;
    this->__vftable = a2->__vftable;
    uint64_t v7 = &this->__imp_;
  }
  else
  {
    std::runtime_error::runtime_error(this, a2);
    this[1] = a2[1];
    this->__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v8 = (std::runtime_error_vtbl *)&a2[2].__imp_;
    uint64_t v9 = a2[2].__imp_.__imp_;
    this[2].__vftable = a2[2].__vftable;
    this[2].__imp_.__imp_ = v9;
    size_t v10 = (std::runtime_error_vtbl *)&this[2].__imp_;
    uint64_t v11 = a2[3].__vftable;
    this[3].__vftable = v11;
    if (v11)
    {
      *((void *)v9 + 2) = v10;
      a2[2].__vftable = v8;
      v8->~runtime_error = 0;
      a2[3].__vftable = 0;
    }
    else
    {
      this[2].__vftable = v10;
    }
    uint64_t v12 = a2[3].__imp_.__imp_;
    a2 = (std::runtime_error *)((char *)a2 + 56);
    this[3].__imp_.__imp_ = v12;
    uint64_t v7 = (std::__libcpp_refstring *)&this[4];
    p_std::string::size_type imp = &a2->__imp_;
  }
  v7->__imp_ = p_imp->__imp_;
  a2->__vftable = 0;
  a2->__imp_.__imp_ = 0;
  LOBYTE(this[4].__imp_.__imp_) = v5;
  LOBYTE(this[5].__vftable) = 1;
  return this;
}

uint64_t AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::Awaiter::await_suspend(uint64_t result)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void (**)(void))atomic_exchange((atomic_ullong *volatile)(*(void *)result + 96), 1uLL);
  if (v1)
  {
    uint64_t v2 = result;
    if (v1 == (void (**)(void))2) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result - 8))(*(void *)result - 16);
    }
    uint64_t v3 = (uint64_t *)(*(void *)result + 128);
    uint64_t result = *v3;
    if (*v3)
    {
      if (result == *(void *)v2 + 104)
      {
        long long v24 = v23;
        uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 24))(result, v23);
      }
      else
      {
        long long v24 = *(void **)(*(void *)v2 + 128);
        *uint64_t v3 = 0;
      }
    }
    else
    {
      long long v24 = 0;
    }
    if (v24)
    {
      uint64_t v4 = *(void *)v2;
      if (!*(unsigned char *)(*(void *)v2 + 88))
      {
        __break(1u);
        return result;
      }
      char v5 = (const std::runtime_error *)(v4 + 8);
      char v6 = *(unsigned char *)(v4 + 80);
      if (v6)
      {
        v15.__vftable = *(std::runtime_error_vtbl **)(v4 + 8);
        p_std::string::size_type imp = &v15.__imp_;
        uint64_t v8 = (const char **)(v4 + 16);
      }
      else
      {
        std::runtime_error::runtime_error(&v15, v5);
        uint64_t v9 = (void *)(v4 + 48);
        uint64_t v10 = *(void *)(v4 + 48);
        long long v16 = *(_OWORD *)(v4 + 24);
        uint64_t v11 = *(uint64_t **)(v4 + 40);
        v15.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        uint64_t v17 = v11;
        uint64_t v18 = v10;
        if (*(void *)(v4 + 56))
        {
          *(void *)(v10 + 16) = &v18;
          *(void *)(v4 + 40) = v9;
          *uint64_t v9 = 0;
          *(void *)(v4 + 56) = 0;
        }
        else
        {
          uint64_t v17 = &v18;
        }
        uint64_t v13 = *(void *)(v4 + 64);
        uint64_t v12 = (const std::runtime_error *)(v4 + 64);
        uint64_t v20 = v13;
        p_std::string::size_type imp = (std::__libcpp_refstring *)&v21;
        uint64_t v8 = &v12->__imp_.__imp_;
        char v5 = v12;
      }
      p_imp->__imp_ = *v8;
      v5->__vftable = 0;
      v5->__imp_.__imp_ = 0;
      char v22 = v6;
      if (!v24) {
        std::__throw_bad_function_call[abi:fe180100]();
      }
      (*(void (**)(void *, std::runtime_error *))(*v24 + 48))(v24, &v15);
      if (v22)
      {
        std::string::size_type imp = (std::__shared_weak_count *)v15.__imp_.__imp_;
        if (v15.__imp_.__imp_
          && !atomic_fetch_add((atomic_ullong *volatile)v15.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
          std::__shared_weak_count::__release_weak(imp);
        }
      }
      else
      {
        ((void (*)(std::runtime_error *))v15.~runtime_error)(&v15);
      }
    }
    else
    {
      (*v1)(v1);
    }
    uint64_t result = (uint64_t)v24;
    if (v24 == v23)
    {
      return (*(uint64_t (**)(void *))(v23[0] + 32))(v23);
    }
    else if (v24)
    {
      return (*(uint64_t (**)(void))(*v24 + 40))();
    }
  }
  return result;
}

void sub_18DA74DB8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise *,AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINSt3__110shared_ptrINS_13IMediaAccountEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINSt3__110shared_ptrINS_13IMediaAccountEEENS_5ErrorEE7Promise17get_return"
                                "_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINSt3__110shared_ptrINS_13IMediaAccountEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINSt3__110shared_ptrINS_13IMediaAccountEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise *,AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 96), 2uLL)) {
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise *,AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

uint64_t AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::~Promise(uint64_t a1)
{
  uint64_t v2 = a1 + 104;
  uint64_t v3 = *(void *)(a1 + 128);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    if (!*(unsigned char *)(a1 + 88)) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  if (*(unsigned char *)(a1 + 88))
  {
LABEL_7:
    if (*(unsigned char *)(a1 + 80))
    {
      uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
      if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    else
    {
      (**(void (***)(void))(a1 + 8))();
    }
  }
LABEL_12:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  return a1;
}

void AMSCore::BagDataSource::~BagDataSource(AMSCore::BagDataSource *this)
{
  *(void *)this = &unk_1EDC81BD8;
  uint64_t v2 = (std::mutex *)((char *)this + 472);
  if (*((void *)this + 70))
  {
    uint64_t v3 = (char *)this + 544;
    uint64_t v4 = (char *)*((void *)this + 69);
    uint64_t v5 = *((void *)this + 68);
    uint64_t v6 = *(void *)v4;
    *(void *)(v6 + 8) = *(void *)(v5 + 8);
    **(void **)(v5 + 8) = v6;
    *((void *)this + 70) = 0;
    if (v4 != (char *)this + 544)
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v4 + 1);
        operator delete(v4);
        uint64_t v4 = v7;
      }
      while (v7 != v3);
    }
  }
  std::mutex::~mutex(v2);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this + 432, *((unsigned int **)this + 55));
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 53);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 360));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 312));
  std::mutex::~mutex((std::mutex *)((char *)this + 248));
  uint64_t v9 = *((void *)this + 28);
  if (v9)
  {
    uint64_t v10 = *((void *)this + 29);
    uint64_t v11 = (void *)*((void *)this + 28);
    if (v10 != v9)
    {
      do
      {
        uint64_t v12 = *(std::__shared_weak_count **)(v10 - 8);
        if (v12) {
          std::__shared_weak_count::__release_weak(v12);
        }
        v10 -= 16;
      }
      while (v10 != v9);
      uint64_t v11 = (void *)*((void *)this + 28);
    }
    *((void *)this + 29) = v9;
    operator delete(v11);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 160));
  uint64_t v13 = *((void *)this + 17);
  if (v13)
  {
    uint64_t v14 = *((void *)this + 18);
    std::runtime_error v15 = (void *)*((void *)this + 17);
    if (v14 != v13)
    {
      do
      {
        long long v16 = *(std::__shared_weak_count **)(v14 - 8);
        if (v16) {
          std::__shared_weak_count::__release_weak(v16);
        }
        v14 -= 16;
      }
      while (v14 != v13);
      std::runtime_error v15 = (void *)*((void *)this + 17);
    }
    *((void *)this + 18) = v13;
    operator delete(v15);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 72));
  uint64_t v17 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if ((*((char *)this + 55) & 0x80000000) == 0)
    {
LABEL_26:
      if ((*((char *)this + 31) & 0x80000000) == 0) {
        return;
      }
LABEL_30:
      operator delete(*((void **)this + 1));
      return;
    }
  }
  else if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0) {
    goto LABEL_30;
  }
}

void AMSCore::BagNetworkDataSource::load(uint64_t a1, char a2)
{
  uint64_t v4 = operator new(0x3F0uLL);
  *uint64_t v4 = AMSCore::BagNetworkDataSource::load;
  v4[1] = AMSCore::BagNetworkDataSource::load;
  *((unsigned char *)v4 + 1001) = a2;
  v4[120] = a1;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *((unsigned char *)v4 + 24) = 0;
  *((unsigned char *)v4 + 104) = 0;
  v4[14] = 0;
  v4[18] = 0;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v5, (uint64_t)(v4 + 2));
}

void sub_18DA76274(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  AMSCore::Error::~Error((AMSCore::Error *)va);
  std::expected<AMSCore::LoadNetworkBagResult,AMSCore::Error>::~expected[abi:fe180100](v6);
  std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::~expected[abi:fe180100](a6);
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:fe180100](a2);
  std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](a3);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DA76338()
{
}

void AMSCore::BagNetworkDataSource::load(unint64_t a1)
{
  unint64_t v2 = a1 + 712;
  uint64_t v3 = (std::runtime_error *)(a1 + 152);
  uint64_t v4 = (AMSCore::LoadNetworkBagResult *)(a1 + 408);
  std::runtime_error v5 = (AMSCore::LoadNetworkBagResult *)(a1 + 536);
  uint64_t v6 = (std::runtime_error *)(a1 + 736);
  uint64_t v84 = (std::__shared_mutex_base **)(a1 + 896);
  uint64_t v85 = (std::runtime_error *)(a1 + 656);
  unint64_t v7 = a1 + 16;
  int v8 = *(unsigned __int8 *)(a1 + 1000);
  if (v8 == 2)
  {
    uint64_t v58 = *(void *)(a1 + 912);
    if (*(unsigned char *)(v58 + 88))
    {
      unint64_t v59 = a1 + 16;
      int v60 = *(unsigned __int8 *)(v58 + 80);
      if (!*(unsigned char *)(v58 + 80))
      {
        std::runtime_error::runtime_error(v6, (const std::runtime_error *)(v58 + 8));
        *(_OWORD *)(a1 + 752) = *(_OWORD *)(v58 + 24);
        *(void *)(a1 + 736) = &unk_1EDC827D8;
        long long v61 = (void *)(v58 + 48);
        uint64_t v62 = *(void *)(v58 + 48);
        *(void *)(a1 + 768) = *(void *)(v58 + 40);
        unint64_t v63 = a1 + 776;
        *(void *)(a1 + 776) = v62;
        uint64_t v64 = *(void *)(v58 + 56);
        *(void *)(a1 + 784) = v64;
        if (v64)
        {
          *(void *)(v62 + 16) = v63;
          *(void *)(v58 + 40) = v61;
          *long long v61 = 0;
          *(void *)(v58 + 56) = 0;
        }
        else
        {
          *(void *)(a1 + 768) = v63;
        }
        *(_OWORD *)(v2 + 80) = *(_OWORD *)(v58 + 64);
        *(void *)(v58 + 64) = 0;
        *(void *)(v58 + 72) = 0;
      }
      *(unsigned char *)(a1 + 808) = v60;
      if (*(unsigned char *)(a1 + 104))
      {
        if (!*(unsigned char *)(a1 + 96))
        {
          (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
          int v60 = *(unsigned __int8 *)(a1 + 808);
        }
        *(unsigned char *)(a1 + 104) = 0;
      }
      if (v60)
      {
        *(unsigned char *)(a1 + 96) = v60;
        *(unsigned char *)(a1 + 104) = 1;
        unint64_t v7 = v59;
      }
      else
      {
        std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), v6);
        uint64_t v66 = *(void *)(a1 + 776);
        *(void *)(a1 + 64) = v66;
        unint64_t v67 = a1 + 64;
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 752);
        *(void *)(a1 + 24) = &unk_1EDC827D8;
        *(void *)(a1 + 56) = *(void *)(a1 + 768);
        uint64_t v68 = *(void *)(a1 + 784);
        *(void *)(a1 + 72) = v68;
        if (v68)
        {
          *(void *)(v66 + 16) = v67;
          *(void *)(a1 + 768) = a1 + 776;
          *(void *)(a1 + 776) = 0;
          *(void *)(a1 + 784) = 0;
        }
        else
        {
          *(void *)(a1 + 56) = v67;
        }
        unint64_t v7 = v59;
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(v2 + 80);
        *(void *)(v2 + 80) = 0;
        *(void *)(v2 + 88) = 0;
        int v69 = *(unsigned __int8 *)(a1 + 808);
        *(unsigned char *)(a1 + 96) = 0;
        *(unsigned char *)(a1 + 104) = 1;
        if (!v69) {
          ((void (*)(std::runtime_error *))v6->~runtime_error)(v6);
        }
      }
      int v70 = *(std::__shared_weak_count **)(a1 + 920);
      if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
      size_t v71 = *(std::__shared_weak_count **)(a1 + 936);
      if (v71 && !atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
      long long v72 = *(std::__shared_weak_count **)(a1 + 952);
      if (v72 && !atomic_fetch_add(&v72->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
      AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult(v5);
      goto LABEL_110;
    }
LABEL_144:
    __break(1u);
    return;
  }
  uint64_t v83 = (unsigned char *)(a1 + 1000);
  uint64_t v9 = (void (***)(uint64_t, __n128))(a1 + 280);
  uint64_t v10 = (void **)(a1 + 816);
  if (v8 == 1)
  {
LABEL_34:
    uint64_t v43 = *(void *)(a1 + 984);
    if (!*(unsigned char *)(v43 + 136)) {
      goto LABEL_144;
    }
    unsigned __int8 v44 = *(unsigned char *)(v43 + 128);
    __n128 v45 = std::__expected_base<AMSCore::LoadNetworkBagResult,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::LoadNetworkBagResult,AMSCore::Error>::__union_t>((uint64_t)v4, v44, (std::runtime_error *)(v43 + 8));
    *(unsigned char *)(a1 + 528) = v44;
    uint64_t v46 = *(void *)(a1 + 992);
    if (v46 && !atomic_fetch_add((atomic_ullong *volatile)(v46 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v47 = *(std::__shared_weak_count **)(a1 + 992);
      ((void (*)(std::__shared_weak_count *, __n128))v47->__on_zero_shared)(v47, v45);
      std::__shared_weak_count::__release_weak(v47);
    }
    long long v48 = *(std::__shared_weak_count **)(a1 + 744);
    if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, __n128))v48->__on_zero_shared)(v48, v45);
      std::__shared_weak_count::__release_weak(v48);
      if (!*(unsigned char *)(a1 + 400)) {
        goto LABEL_48;
      }
    }
    else if (!*(unsigned char *)(a1 + 400))
    {
      goto LABEL_48;
    }
    if (*(char *)(a1 + 399) < 0)
    {
      operator delete(*(void **)(a1 + 376));
      if (*(unsigned char *)(a1 + 352))
      {
LABEL_43:
        uint64_t v49 = *(std::__shared_weak_count **)(a1 + 888);
        if (!v49) {
          goto LABEL_51;
        }
LABEL_49:
        if (!atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, __n128))v49->__on_zero_shared)(v49, v45);
          std::__shared_weak_count::__release_weak(v49);
        }
LABEL_51:
        uint64_t v50 = *(std::__shared_weak_count **)(a1 + 872);
        if (v50 && !atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, __n128))v50->__on_zero_shared)(v50, v45);
          std::__shared_weak_count::__release_weak(v50);
          if ((*(char *)(a1 + 863) & 0x80000000) == 0)
          {
LABEL_54:
            if ((*(char *)(a1 + 839) & 0x80000000) == 0)
            {
LABEL_55:
              AMSCore::nestedError<std::expected<AMSCore::LoadNetworkBagResult,AMSCore::Error> &,char const(&)[19]>(&v86, (uint64_t)v4, 203, (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance);
              if (v91)
              {
                AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v92, (uint64_t)&v86);
                if (*(unsigned char *)(a1 + 104))
                {
                  if (!*(unsigned char *)(a1 + 96)) {
                    (**(void (***)(void))(a1 + 24))();
                  }
                  *(unsigned char *)(a1 + 104) = 0;
                }
                std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v92);
                long long v51 = v93;
                std::runtime_error v53 = v94;
                uint64_t v52 = v95;
                *(void *)(a1 + 64) = v95;
                unint64_t v54 = a1 + 64;
                *(_OWORD *)(a1 + 40) = v51;
                *(void *)(a1 + 24) = &unk_1EDC827D8;
                uint64_t v55 = v96;
                *(void *)(a1 + 56) = v53;
                *(void *)(a1 + 72) = v55;
                if (v55)
                {
                  *(void *)(v52 + 16) = v54;
                  uint64_t v94 = &v95;
                  uint64_t v95 = 0;
                  uint64_t v96 = 0;
                  uint64_t v52 = 0;
                }
                else
                {
                  *(void *)(a1 + 56) = v54;
                }
                *(_OWORD *)(a1 + 80) = v97;
                long long v97 = 0uLL;
                *(unsigned char *)(a1 + 96) = 0;
                *(unsigned char *)(a1 + 104) = 1;
                v92.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
                std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v94, (unsigned int *)v52);
                MEMORY[0x192FA3C30](&v92);
                if (v91)
                {
                  v86.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
                  long long v65 = (std::__shared_weak_count *)*((void *)&v90 + 1);
                  if (*((void *)&v90 + 1)
                    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v90 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                    std::__shared_weak_count::__release_weak(v65);
                  }
                  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v87, v88);
                  MEMORY[0x192FA3C30](&v86);
                  if (!*(unsigned char *)(a1 + 528))
                  {
LABEL_127:
                    (**(void (***)(AMSCore::LoadNetworkBagResult *))v4)(v4);
                    if (!*(unsigned char *)(a1 + 272)) {
                      goto LABEL_133;
                    }
LABEL_128:
                    if (*(char *)(a1 + 271) < 0)
                    {
                      operator delete(*(void **)(a1 + 248));
                      if (*(unsigned char *)(a1 + 224))
                      {
LABEL_130:
                        if (!*(unsigned char *)(a1 + 904)) {
                          goto LABEL_135;
                        }
                        goto LABEL_134;
                      }
                    }
                    else if (*(unsigned char *)(a1 + 224))
                    {
                      goto LABEL_130;
                    }
LABEL_133:
                    ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
                    if (!*(unsigned char *)(a1 + 904))
                    {
LABEL_135:
                      if (*(unsigned char *)(a1 + 728))
                      {
                        int64_t v79 = *(std::__shared_weak_count **)(a1 + 664);
                        if (v79)
                        {
                          if (!atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                          {
                            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                            std::__shared_weak_count::__release_weak(v79);
                          }
                        }
                      }
                      else
                      {
                        ((void (*)(std::runtime_error *))v85->~runtime_error)(v85);
                      }
                      *(void *)(a1 + 152) = v7;
                      *(void *)a1 = 0;
                      AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v3);
                      return;
                    }
LABEL_134:
                    std::__shared_mutex_base::unlock_shared(*v84);
                    goto LABEL_135;
                  }
LABEL_111:
                  AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult(v4);
                  if (!*(unsigned char *)(a1 + 272)) {
                    goto LABEL_133;
                  }
                  goto LABEL_128;
                }
LABEL_110:
                if (!*(unsigned char *)(a1 + 528)) {
                  goto LABEL_127;
                }
                goto LABEL_111;
              }
              if (*(unsigned char *)(a1 + 528))
              {
                uint64_t v56 = *(void *)(a1 + 504);
                if (!*(void *)(v56 + 16))
                {
                  AMSCore::StringUtils::join<>(&__what_arg);
                  v99.__cat_ = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
                  *(void *)&v99.__val_ = 311;
                  std::system_error::system_error(&v86, v99, &__what_arg);
                  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__what_arg.__r_.__value_.__l.__data_);
                  }
                  std::string::size_type v88 = 0;
                  uint64_t v89 = 0;
                  v86.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
                  int v87 = &v88;
                  long long v90 = 0uLL;
                  LODWORD(__what_arg.__r_.__value_.__l.__data_) = 203;
                  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error,AMSCore::BagErrorCode>((uint64_t)&v92, (uint64_t)&v86, (unsigned int *)&__what_arg);
                }
                *(unsigned char *)(a1 + 536) = 0;
                *(unsigned char *)(a1 + 560) = 0;
                if (*(unsigned char *)(a1 + 432))
                {
                  *(_OWORD *)std::runtime_error v5 = *(_OWORD *)v4;
                  *((void *)v5 + 2) = *((void *)v4 + 2);
                  *((void *)v4 + 1) = 0;
                  *((void *)v4 + 2) = 0;
                  *(void *)uint64_t v4 = 0;
                  *(unsigned char *)(a1 + 560) = 1;
                }
                *(unsigned char *)(a1 + 568) = 0;
                *(unsigned char *)(a1 + 592) = 0;
                if (*(unsigned char *)(a1 + 464))
                {
                  *(void *)(a1 + 584) = *(void *)(a1 + 456);
                  *(_OWORD *)(a1 + 568) = *(_OWORD *)(a1 + 440);
                  *(void *)(a1 + 448) = 0;
                  *(void *)(a1 + 456) = 0;
                  *(void *)(a1 + 440) = 0;
                  *(unsigned char *)(a1 + 592) = 1;
                }
                *(void *)(a1 + 600) = *(void *)(a1 + 472);
                *(_OWORD *)(a1 + 608) = *(_OWORD *)(a1 + 480);
                *(void *)(a1 + 480) = 0;
                *(void *)(a1 + 488) = 0;
                *(void *)(a1 + 472) = 0;
                *(_WORD *)(a1 + 624) = *(_WORD *)(a1 + 496);
                *(unsigned char *)(a1 + 626) = *(unsigned char *)(a1 + 498);
                *(void *)(a1 + 632) = v56;
                *(void *)(a1 + 640) = *(void *)(a1 + 512);
                *(void *)(a1 + 504) = 0;
                *(void *)(a1 + 512) = 0;
                *(void *)(a1 + 648) = *(void *)(a1 + 520);
                if (*(unsigned char *)(a1 + 728))
                {
                  uint64_t v57 = *(void *)(a1 + 960);
                  *(_OWORD *)(a1 + 944) = *(_OWORD *)(a1 + 656);
                  v85->__vftable = 0;
                  v85->__imp_.__imp_ = 0;
                  AMSCore::BagNetworkDataSource::update(a1 + 928, v57, (uint64_t)v5, (void *)(a1 + 944));
                }
              }
              goto LABEL_144;
            }
LABEL_76:
            operator delete(*v10);
            goto LABEL_55;
          }
        }
        else if ((*(char *)(a1 + 863) & 0x80000000) == 0)
        {
          goto LABEL_54;
        }
        operator delete(*(void **)(a1 + 840));
        if ((*(char *)(a1 + 839) & 0x80000000) == 0) {
          goto LABEL_55;
        }
        goto LABEL_76;
      }
    }
    else if (*(unsigned char *)(a1 + 352))
    {
      goto LABEL_43;
    }
LABEL_48:
    (**v9)(a1 + 280, v45);
    uint64_t v49 = *(std::__shared_weak_count **)(a1 + 888);
    if (!v49) {
      goto LABEL_51;
    }
    goto LABEL_49;
  }
  long long v80 = (AMSCore::LoadNetworkBagResult *)(a1 + 536);
  unint64_t v81 = a1 + 864;
  uint64_t v11 = *(void *)(a1 + 968);
  if (!*(unsigned char *)(v11 + 88)) {
    goto LABEL_144;
  }
  unint64_t v82 = a1 + 16;
  uint64_t v12 = (const std::runtime_error *)(v11 + 8);
  char v13 = *(unsigned char *)(v11 + 80);
  if (v13)
  {
    *(void *)(a1 + 656) = *(void *)(v11 + 8);
    uint64_t v14 = (const char **)(a1 + 664);
    p_std::string::size_type imp = (std::__libcpp_refstring *)(v11 + 16);
  }
  else
  {
    std::runtime_error::runtime_error(v85, v12);
    *(_OWORD *)(a1 + 672) = *(_OWORD *)(v11 + 24);
    *(void *)(a1 + 656) = &unk_1EDC827D8;
    long long v16 = (void *)(v11 + 48);
    uint64_t v17 = *(void *)(v11 + 48);
    *(void *)(a1 + 688) = *(void *)(v11 + 40);
    unint64_t v18 = a1 + 696;
    *(void *)(a1 + 696) = v17;
    uint64_t v19 = *(void *)(v11 + 56);
    *(void *)(a1 + 704) = v19;
    if (v19)
    {
      *(void *)(v17 + 16) = v18;
      *(void *)(v11 + 40) = v16;
      *long long v16 = 0;
      *(void *)(v11 + 56) = 0;
    }
    else
    {
      *(void *)(a1 + 688) = v18;
    }
    uint64_t v20 = *(const std::runtime_error **)(a1 + 968);
    uint64_t v21 = v20[4].__vftable;
    uint64_t v12 = v20 + 4;
    *(void *)(a1 + 712) = v21;
    uint64_t v14 = (const char **)(a1 + 720);
    p_std::string::size_type imp = &v12->__imp_;
  }
  *uint64_t v14 = p_imp->__imp_;
  v12->__vftable = 0;
  v12->__imp_.__imp_ = 0;
  *(unsigned char *)(a1 + 728) = v13;
  uint64_t v22 = *(void *)(a1 + 976);
  if (v22 && !atomic_fetch_add((atomic_ullong *volatile)(v22 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v23 = *(std::__shared_weak_count **)(a1 + 976);
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  long long v24 = *(std::__shared_weak_count **)(a1 + 160);
  if (!v24 || atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (*(unsigned char *)(a1 + 728)) {
      goto LABEL_16;
    }
LABEL_20:
    std::runtime_error::runtime_error(&v86, v85);
    v86.__ec_ = *(std::error_code *)(a1 + 672);
    uint64_t v29 = *(unsigned int ***)(a1 + 688);
    v86.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
    uint64_t v30 = *(void *)(a1 + 696);
    uint64_t v31 = *(void *)(a1 + 704);
    int v87 = v29;
    std::string::size_type v88 = (unsigned int *)v30;
    uint64_t v89 = v31;
    if (v31)
    {
      *(void *)(v30 + 16) = &v88;
      *(void *)(a1 + 688) = a1 + 696;
      *(void *)(a1 + 696) = 0;
      *(void *)(a1 + 704) = 0;
    }
    else
    {
      int v87 = &v88;
    }
    long long v90 = *(_OWORD *)v2;
    *(void *)unint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    char v91 = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v92, (uint64_t)&v86);
    if (*(unsigned char *)(a1 + 104))
    {
      if (!*(unsigned char *)(a1 + 96)) {
        (**(void (***)(void))(a1 + 24))();
      }
      *(unsigned char *)(a1 + 104) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v92);
    long long v73 = v93;
    int64_t v75 = v94;
    uint64_t v74 = v95;
    *(void *)(a1 + 64) = v95;
    unint64_t v76 = a1 + 64;
    *(_OWORD *)(a1 + 40) = v73;
    *(void *)(a1 + 24) = &unk_1EDC827D8;
    uint64_t v77 = v96;
    *(void *)(a1 + 56) = v75;
    *(void *)(a1 + 72) = v77;
    if (v77)
    {
      *(void *)(v74 + 16) = v76;
      uint64_t v94 = &v95;
      uint64_t v95 = 0;
      uint64_t v96 = 0;
      uint64_t v74 = 0;
    }
    else
    {
      *(void *)(a1 + 56) = v76;
    }
    *(_OWORD *)(a1 + 80) = v97;
    long long v97 = 0uLL;
    *(unsigned char *)(a1 + 96) = 0;
    *(unsigned char *)(a1 + 104) = 1;
    v92.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v94, (unsigned int *)v74);
    MEMORY[0x192FA3C30](&v92);
    if (v91)
    {
      v86.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
      int v78 = (std::__shared_weak_count *)*((void *)&v90 + 1);
      if (*((void *)&v90 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v90 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v87, v88);
      MEMORY[0x192FA3C30](&v86);
    }
    unint64_t v7 = v82;
    goto LABEL_135;
  }
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  if (!*(unsigned char *)(a1 + 728)) {
    goto LABEL_20;
  }
LABEL_16:
  uint64_t v25 = (std::__shared_mutex_base *)(*(void *)(a1 + 960) + 248);
  *(void *)(a1 + 896) = v25;
  *(unsigned char *)(a1 + 904) = 1;
  std::__shared_mutex_base::lock_shared(v25);
  AMSCore::LoadURLMetricsEventConfig::fromAnyMap((uint64_t)v3, *(void *)(*(void *)(a1 + 960) + 416));
  std::__shared_mutex_base::unlock_shared(v25);
  unsigned int v26 = *(unsigned __int8 *)(a1 + 1001);
  *(unsigned char *)(a1 + 904) = 0;
  if (v26 >= 3) {
    std::terminate();
  }
  uint64_t v27 = *(void *)(a1 + 960);
  if (*(char *)(v27 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 816), *(const std::string::value_type **)(v27 + 8), *(void *)(v27 + 16));
    uint64_t v27 = *(void *)(a1 + 960);
  }
  else
  {
    long long v28 = *(_OWORD *)(v27 + 8);
    *(void *)(a1 + 832) = *(void *)(v27 + 24);
    *(_OWORD *)uint64_t v10 = v28;
  }
  char v32 = (std::string *)(a1 + 840);
  if (*(char *)(v27 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v32, *(const std::string::value_type **)(v27 + 32), *(void *)(v27 + 40));
  }
  else
  {
    long long v33 = *(_OWORD *)(v27 + 32);
    *(void *)(a1 + 856) = *(void *)(v27 + 48);
    *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v33;
  }
  if (!*(unsigned char *)(a1 + 728)) {
    goto LABEL_144;
  }
  *(void *)(a1 + 864) = *(void *)(a1 + 656);
  uint64_t v34 = *(void *)(a1 + 664);
  *(void *)(a1 + 872) = v34;
  if (v34) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v35 = 0x10200u >> (8 * v26);
  uint64_t v36 = *(void *)(a1 + 960);
  *(void *)(a1 + 880) = *(void *)(v36 + 56);
  uint64_t v37 = *(void *)(v36 + 64);
  *(void *)(a1 + 888) = v37;
  if (v37) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned __int8 v38 = *(unsigned char *)(a1 + 272);
  __n128 v39 = std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__union_t>((std::runtime_error *)(a1 + 280), v38, v3);
  uint64_t v40 = *(void *)(a1 + 960);
  *(unsigned char *)(a1 + 400) = v38;
  LOBYTE(v86.__vftable) = v35;
  uint64_t v41 = *(void *)(v40 + 648);
  if (!v41) {
    std::__throw_bad_function_call[abi:fe180100]();
  }
  unint64_t v7 = v82;
  (*(void (**)(uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, std::system_error *, __n128))(*(void *)v41 + 48))(v41, a1 + 816, v81, a1 + 880, a1 + 280, &v86, v39);
  long long v42 = *(_OWORD *)(a1 + 736);
  *(_OWORD *)(v2 + 272) = v42;
  v6->__vftable = 0;
  v6->__imp_.__imp_ = 0;
  std::runtime_error v5 = v80;
  if (atomic_load_explicit((atomic_ullong *volatile)(v42 + 144), memory_order_acquire)) {
    goto LABEL_34;
  }
  *uint64_t v83 = 1;
  if (atomic_exchange((atomic_ullong *volatile)(*(void *)(a1 + 984) + 144), a1)) {
    goto LABEL_34;
  }
}

void sub_18DA77344(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  AMSCore::Error::~Error((AMSCore::Error *)va);
  std::expected<AMSCore::LoadNetworkBagResult,AMSCore::Error>::~expected[abi:fe180100](v9);
  std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::~expected[abi:fe180100](v8);
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:fe180100](a7);
  std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](a8);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DA7740C()
{
}

void AMSCore::BagNetworkDataSource::load(char *__p)
{
  unint64_t v2 = (void (***)(void))(__p + 152);
  if (!*(void *)__p) {
    goto LABEL_60;
  }
  if (__p[1000])
  {
    if (__p[1000] != 1)
    {
      uint64_t v10 = (std::__shared_weak_count *)*((void *)__p + 115);
      if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
      uint64_t v11 = (std::__shared_weak_count *)*((void *)__p + 117);
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      uint64_t v12 = (std::__shared_weak_count *)*((void *)__p + 119);
      if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult((AMSCore::LoadNetworkBagResult *)(__p + 536));
      if (__p[528])
      {
        AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult((AMSCore::LoadNetworkBagResult *)(__p + 408));
        if (!__p[272]) {
          goto LABEL_53;
        }
      }
      else
      {
        (**((void (***)(char *))__p + 51))(__p + 408);
        if (!__p[272]) {
          goto LABEL_53;
        }
      }
LABEL_45:
      if (__p[271] < 0)
      {
        operator delete(*((void **)__p + 31));
        if (__p[224])
        {
LABEL_47:
          if (!__p[904]) {
            goto LABEL_55;
          }
          goto LABEL_54;
        }
      }
      else if (__p[224])
      {
        goto LABEL_47;
      }
LABEL_53:
      (**v2)(v2);
      if (!__p[904])
      {
LABEL_55:
        if (!__p[728])
        {
          (**((void (***)(void))__p + 82))();
          goto LABEL_60;
        }
        uint64_t v9 = (std::__shared_weak_count *)*((void *)__p + 83);
        if (!v9) {
          goto LABEL_60;
        }
        goto LABEL_57;
      }
LABEL_54:
      std::__shared_mutex_base::unlock_shared(*((std::__shared_mutex_base **)__p + 112));
      goto LABEL_55;
    }
    uint64_t v3 = *((void *)__p + 124);
    if (v3 && !atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 124);
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    std::runtime_error v5 = (std::__shared_weak_count *)*((void *)__p + 93);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (!__p[400]) {
        goto LABEL_36;
      }
    }
    else if (!__p[400])
    {
      goto LABEL_36;
    }
    if (__p[399] < 0)
    {
      operator delete(*((void **)__p + 47));
      if (__p[352])
      {
LABEL_12:
        uint64_t v6 = (std::__shared_weak_count *)*((void *)__p + 111);
        if (!v6) {
          goto LABEL_39;
        }
LABEL_37:
        if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
LABEL_39:
        char v13 = (std::__shared_weak_count *)*((void *)__p + 109);
        if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        if (__p[863] < 0)
        {
          operator delete(*((void **)__p + 105));
          if ((__p[839] & 0x80000000) == 0)
          {
LABEL_44:
            if (!__p[272]) {
              goto LABEL_53;
            }
            goto LABEL_45;
          }
        }
        else if ((__p[839] & 0x80000000) == 0)
        {
          goto LABEL_44;
        }
        operator delete(*((void **)__p + 102));
        if (!__p[272]) {
          goto LABEL_53;
        }
        goto LABEL_45;
      }
    }
    else if (__p[352])
    {
      goto LABEL_12;
    }
LABEL_36:
    (**((void (***)(void))__p + 35))();
    uint64_t v6 = (std::__shared_weak_count *)*((void *)__p + 111);
    if (!v6) {
      goto LABEL_39;
    }
    goto LABEL_37;
  }
  uint64_t v7 = *((void *)__p + 122);
  if (v7 && !atomic_fetch_add((atomic_ullong *volatile)(v7 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v8 = (std::__shared_weak_count *)*((void *)__p + 122);
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)__p + 20);
  if (v9)
  {
LABEL_57:
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
LABEL_60:
  uint64_t v14 = (char *)*((void *)__p + 18);
  if (v14 == __p + 120)
  {
    (*(void (**)(char *))(*((void *)__p + 15) + 32))(__p + 120);
    if (!__p[104]) {
      goto LABEL_68;
    }
    goto LABEL_66;
  }
  if (v14) {
    (*(void (**)(char *))(*(void *)v14 + 40))(v14);
  }
  if (__p[104])
  {
LABEL_66:
    if (!__p[96]) {
      (**((void (***)(void))__p + 3))();
    }
  }
LABEL_68:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  operator delete(__p);
}

void AMSCore::BagNetworkDataSource::getAccount(AMSCore::BagNetworkDataSource *this)
{
  uint64_t v1 = operator new(0x130uLL);
  *uint64_t v1 = AMSCore::BagNetworkDataSource::getAccount;
  v1[1] = AMSCore::BagNetworkDataSource::getAccount;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  *((unsigned char *)v1 + 24) = 0;
  *((unsigned char *)v1 + 104) = 0;
  v1[14] = 0;
  v1[18] = 0;
  std::shared_ptr<AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise,AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v2, (uint64_t)(v1 + 2));
}

void sub_18DA77F3C(void *a1)
{
}

void sub_18DA77F48()
{
}

uint64_t std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 120)) {
    goto LABEL_4;
  }
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if (*(unsigned char *)(a1 + 72)) {
      return a1;
    }
    goto LABEL_4;
  }
  if (!*(unsigned char *)(a1 + 72)) {
LABEL_4:
  }
    (**(void (***)(uint64_t))a1)(a1);
  return a1;
}

uint64_t std::tuple<std::string,std::string>::~tuple(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
LABEL_5:
    operator delete(*(void **)a1);
    return a1;
  }
  if (*(char *)(a1 + 23) < 0) {
    goto LABEL_5;
  }
  return a1;
}

__n128 std::__expected_base<AMSCore::LoadNetworkBagResult,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::LoadNetworkBagResult,AMSCore::Error>::__union_t>(uint64_t a1, int a2, std::runtime_error *a3)
{
  if (a2)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
    if (LOBYTE(a3[1].__imp_.__imp_))
    {
      *(std::runtime_error *)a1 = *a3;
      *(void *)(a1 + 16) = a3[1].__vftable;
      a3->__imp_.__imp_ = 0;
      a3[1].__vftable = 0;
      a3->__vftable = 0;
      *(unsigned char *)(a1 + 24) = 1;
    }
    *(unsigned char *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 56) = 0;
    if (LOBYTE(a3[3].__imp_.__imp_))
    {
      *(std::runtime_error *)(a1 + 32) = a3[2];
      *(void *)(a1 + 48) = a3[3].__vftable;
      a3[2].__imp_.__imp_ = 0;
      a3[3].__vftable = 0;
      a3[2].__vftable = 0;
      *(unsigned char *)(a1 + 56) = 1;
    }
    *(std::runtime_error *)(a1 + 64) = a3[4];
    *(void *)(a1 + 80) = a3[5].__vftable;
    a3[4].__imp_.__imp_ = 0;
    a3[5].__vftable = 0;
    a3[4].__vftable = 0;
    *(_WORD *)(a1 + 88) = a3[5].__imp_.__imp_;
    *(unsigned char *)(a1 + 90) = BYTE2(a3[5].__imp_.__imp_);
    __n128 result = (__n128)a3[6];
    *(__n128 *)(a1 + 96) = result;
    a3[6].__vftable = 0;
    a3[6].__imp_.__imp_ = 0;
    *(void *)(a1 + 112) = a3[7].__vftable;
  }
  else
  {
    std::runtime_error v5 = std::runtime_error::runtime_error((std::runtime_error *)a1, a3);
    p_std::string::size_type imp = (std::runtime_error_vtbl *)&a3[2].__imp_;
    std::string::size_type imp = a3[2].__imp_.__imp_;
    v5[1] = a3[1];
    v5->__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    v5[2].__vftable = a3[2].__vftable;
    v5[2].__imp_.__imp_ = imp;
    uint64_t v8 = (std::runtime_error_vtbl *)&v5[2].__imp_;
    uint64_t v9 = a3[3].__vftable;
    v5[3].__vftable = v9;
    if (v9)
    {
      *((void *)imp + 2) = v8;
      a3[2].__vftable = p_imp;
      p_imp->~runtime_error = 0;
      a3[3].__vftable = 0;
    }
    else
    {
      v5[2].__vftable = v8;
    }
    __n128 result = *(__n128 *)&a3[3].__imp_.__imp_;
    *(__n128 *)((char *)v5 + 56) = result;
    a3[3].__imp_.__imp_ = 0;
    a3[4].__vftable = 0;
  }
  return result;
}

unsigned char *AMSCore::nestedError<std::expected<AMSCore::LoadNetworkBagResult,AMSCore::Error> &,char const(&)[19]>(unsigned char *result, uint64_t a2, uint64_t a3, const std::error_category *a4)
{
  if (!*(unsigned char *)(a2 + 120))
  {
    std::runtime_error::runtime_error(&v18, (const std::runtime_error *)a2);
    uint64_t v7 = (void *)(a2 + 40);
    uint64_t v8 = *(void *)(a2 + 40);
    long long v19 = *(_OWORD *)(a2 + 16);
    uint64_t v9 = *(uint64_t **)(a2 + 32);
    v18.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v20 = v9;
    uint64_t v21 = v8;
    uint64_t v22 = *(void *)(a2 + 48);
    if (v22)
    {
      *(void *)(v8 + 16) = &v21;
      *(void *)(a2 + 32) = v7;
      *uint64_t v7 = 0;
      *(void *)(a2 + 48) = 0;
    }
    else
    {
      uint64_t v20 = &v21;
    }
    long long v23 = *(_OWORD *)(a2 + 56);
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    char v24 = 1;
    std::runtime_error::runtime_error(&v10, &v18);
    long long v11 = v19;
    v10.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v12 = v20;
    v13[0] = v21;
    v13[1] = v22;
    if (v22)
    {
      *(void *)(v21 + 16) = v13;
      uint64_t v20 = &v21;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
    }
    else
    {
      uint64_t v12 = v13;
    }
    long long v14 = v23;
    long long v23 = 0uLL;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v26);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v26, (uint64_t)"mDataSource failed", 18);
    std::stringbuf::str[abi:fe180100]((uint64_t)v27, &__what_arg);
    uint64_t v26 = *MEMORY[0x1E4FBA418];
    *(void *)((char *)&v27[-1] + *(void *)(v26 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v27[0] = MEMORY[0x1E4FBA470] + 16;
    if (v28 < 0) {
      operator delete((void *)v27[8]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x192FA3FD0](&v29);
    *(void *)&v30.__val_ = a3;
    v30.__cat_ = a4;
    std::system_error::system_error(&v15, v30, &__what_arg);
    if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__what_arg.__r_.__value_.__l.__data_);
    }
    v17[0] = 0;
    v17[1] = 0;
    v15.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
    long long v16 = v17;
    operator new();
  }
  *__n128 result = 0;
  result[72] = 0;
  return result;
}

void sub_18DA7865C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,unsigned int *a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v43, a24);
  MEMORY[0x192FA3C30](&a19);
  AMSCore::Error::~Error((AMSCore::Error *)&a10);
  std::optional<AMSCore::Error>::~optional((uint64_t)&a28);
  _Unwind_Resume(a1);
}

__n128 AMSCore::Task<void,AMSCore::Error>::ValuePromise::return_value<std::unexpected<AMSCore::Error>>(uint64_t a1, std::runtime_error *a2)
{
  uint64_t v4 = (std::runtime_error *)(a1 + 8);
  if (*(unsigned char *)(a1 + 88))
  {
    if (!*(unsigned char *)(a1 + 80)) {
      ((void (*)(uint64_t))v4->~runtime_error)(a1 + 8);
    }
    *(unsigned char *)(a1 + 88) = 0;
  }
  std::runtime_error::runtime_error(v4, a2);
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA448] + 16;
  *(std::runtime_error *)(a1 + 24) = a2[1];
  *(void *)(a1 + 8) = &unk_1EDC827D8;
  *(void *)(a1 + 40) = a2[2].__vftable;
  p_std::string::size_type imp = (std::runtime_error_vtbl *)&a2[2].__imp_;
  std::string::size_type imp = a2[2].__imp_.__imp_;
  *(void *)(a1 + 48) = imp;
  uint64_t v7 = a1 + 48;
  uint64_t v8 = a2[3].__vftable;
  *(void *)(a1 + 56) = v8;
  if (v8)
  {
    *((void *)imp + 2) = v7;
    a2[2].__vftable = p_imp;
    p_imp->~runtime_error = 0;
    a2[3].__vftable = 0;
  }
  else
  {
    *(void *)(a1 + 40) = v7;
  }
  __n128 result = *(__n128 *)&a2[3].__imp_.__imp_;
  *(__n128 *)(a1 + 64) = result;
  a2[3].__imp_.__imp_ = 0;
  a2[4].__vftable = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  return result;
}

void AMSCore::BagNetworkDataSource::update(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (char *)operator new(0x2E8uLL);
  *(void *)uint64_t v6 = AMSCore::BagNetworkDataSource::update;
  *((void *)v6 + 1) = AMSCore::BagNetworkDataSource::update;
  v6[152] = 0;
  v6[176] = 0;
  if (*(unsigned char *)(a3 + 24))
  {
    *(_OWORD *)(v6 + 152) = *(_OWORD *)a3;
    *((void *)v6 + 21) = *(void *)(a3 + 16);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    v6[176] = 1;
  }
  v6[184] = 0;
  v6[208] = 0;
  if (*(unsigned char *)(a3 + 56))
  {
    *(_OWORD *)(v6 + 184) = *(_OWORD *)(a3 + 32);
    *((void *)v6 + 25) = *(void *)(a3 + 48);
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 32) = 0;
    v6[208] = 1;
  }
  *(_OWORD *)(v6 + 216) = *(_OWORD *)(a3 + 64);
  *((void *)v6 + 29) = *(void *)(a3 + 80);
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 64) = 0;
  *((_WORD *)v6 + 120) = *(_WORD *)(a3 + 88);
  v6[242] = *(unsigned char *)(a3 + 90);
  *(_OWORD *)(v6 + 248) = *(_OWORD *)(a3 + 96);
  *(void *)(a3 + 96) = 0;
  *(void *)(a3 + 104) = 0;
  *((void *)v6 + 33) = *(void *)(a3 + 112);
  *((void *)v6 + 89) = a4[1];
  *a4 = 0;
  a4[1] = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  v6[24] = 0;
  v6[104] = 0;
  *((void *)v6 + 14) = 0;
  *((void *)v6 + 18) = 0;
  std::shared_ptr<AMSCore::Task<void,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,AMSCore::Error>::Promise,AMSCore::Task<void,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v7, (uint64_t)(v6 + 16));
}

void sub_18DA7A23C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,void *a51,uint64_t a52,char a53)
{
  if (a2)
  {
    if (*(unsigned char *)(v53 + 616))
    {
      if (*(char *)(v53 + 615) < 0) {
        operator delete(*v54);
      }
    }
    std::unique_lock<std::shared_mutex>::~unique_lock[abi:fe180100](v55);
    AMSCore::MapUtils::UpdateDiff<std::string>::~UpdateDiff(v56);
    __cxa_begin_catch(exception_object);
    AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult(AMSCore::LoadNetworkBagResult *this)
{
  long long v2 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (void **)*((void *)this + 8);
    if (!v3) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v3 = (void **)*((void *)this + 8);
    if (!v3) {
      goto LABEL_11;
    }
  }
  uint64_t v4 = (void **)*((void *)this + 9);
  std::runtime_error v5 = v3;
  if (v4 != v3)
  {
    do
    {
      if (*((char *)v4 - 1) < 0) {
        operator delete(*(v4 - 3));
      }
      v4 -= 3;
    }
    while (v4 != v3);
    std::runtime_error v5 = (void **)*((void *)this + 8);
  }
  *((void *)this + 9) = v3;
  operator delete(v5);
LABEL_11:
  if (*((unsigned char *)this + 56) && *((char *)this + 55) < 0)
  {
    operator delete(*((void **)this + 4));
    if (!*((unsigned char *)this + 24)) {
      return;
    }
  }
  else if (!*((unsigned char *)this + 24))
  {
    return;
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

AMSCore::LoadNetworkBagResult *std::expected<AMSCore::LoadNetworkBagResult,AMSCore::Error>::~expected[abi:fe180100](AMSCore::LoadNetworkBagResult *this)
{
  if (*((unsigned char *)this + 120)) {
    AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult(this);
  }
  else {
    (**(void (***)(AMSCore::LoadNetworkBagResult *))this)(this);
  }
  return this;
}

void AMSCore::BagNetworkDataSource::update(char *a1)
{
  uint64_t v1 = *((void *)a1 + 90);
  if (!*(unsigned char *)(v1 + 88))
  {
    __break(1u);
    return;
  }
  uint64_t v3 = (void (***)(void))(a1 + 512);
  char v4 = *(unsigned char *)(v1 + 80);
  if (!v4)
  {
    std::runtime_error::runtime_error((std::runtime_error *)a1 + 32, (const std::runtime_error *)(v1 + 8));
    *((_OWORD *)a1 + 33) = *(_OWORD *)(v1 + 24);
    *((void *)a1 + 64) = &unk_1EDC827D8;
    std::runtime_error v5 = (void *)(v1 + 48);
    uint64_t v6 = *(void *)(v1 + 48);
    *((void *)a1 + 68) = *(void *)(v1 + 40);
    std::runtime_error v7 = a1 + 552;
    *((void *)a1 + 69) = v6;
    uint64_t v8 = *(void *)(v1 + 56);
    *((void *)a1 + 70) = v8;
    if (v8)
    {
      *(void *)(v6 + 16) = v7;
      *(void *)(v1 + 40) = v5;
      *std::runtime_error v5 = 0;
      *(void *)(v1 + 56) = 0;
    }
    else
    {
      *((void *)a1 + 68) = v7;
    }
    uint64_t v9 = *((void *)a1 + 90);
    *(_OWORD *)(a1 + 568) = *(_OWORD *)(v9 + 64);
    *(void *)(v9 + 64) = 0;
    *(void *)(v9 + 72) = 0;
  }
  a1[584] = v4;
  uint64_t v10 = *((void *)a1 + 91);
  if (v10 && !atomic_fetch_add((atomic_ullong *volatile)(v10 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    long long v11 = (std::__shared_weak_count *)*((void *)a1 + 91);
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)a1 + 84);
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  char v13 = (std::__shared_weak_count *)*((void *)a1 + 88);
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  long long v14 = (std::__shared_weak_count *)*((void *)a1 + 86);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  AMSCore::nestedError<std::expected<void,AMSCore::Error> &>(v26, (uint64_t)v3, 203, (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance);
  int v15 = v29;
  if (!v29)
  {
    int v21 = 0;
    if (a1[584]) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v30, (uint64_t)v26);
  if (a1[104])
  {
    if (!a1[96]) {
      (**((void (***)(void))a1 + 3))();
    }
    a1[104] = 0;
  }
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v30);
  long long v16 = v31;
  std::runtime_error v18 = v32;
  uint64_t v17 = v33;
  *((void *)a1 + 8) = v33;
  long long v19 = a1 + 64;
  *(_OWORD *)(a1 + 40) = v16;
  *((void *)a1 + 3) = &unk_1EDC827D8;
  uint64_t v20 = v34;
  *((void *)a1 + 7) = v18;
  *((void *)a1 + 9) = v20;
  if (v20)
  {
    *(void *)(v17 + 16) = v19;
    char v32 = &v33;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v17 = 0;
  }
  else
  {
    *((void *)a1 + 7) = v19;
  }
  *((_OWORD *)a1 + 5) = v35;
  long long v35 = 0uLL;
  a1[96] = 0;
  a1[104] = 1;
  v30.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v32, (unsigned int *)v17);
  MEMORY[0x192FA3C30](&v30);
  if (v29)
  {
    v26[0] = &unk_1EDC827D8;
    uint64_t v22 = v28;
    if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v27, v27[1]);
    MEMORY[0x192FA3C30](v26);
  }
  int v21 = 3;
  if (!a1[584]) {
LABEL_35:
  }
    (**v3)(v3);
LABEL_36:
  if (v15)
  {
    if (!a1[656]) {
      goto LABEL_44;
    }
LABEL_43:
    std::__shared_mutex_base::unlock(*((std::__shared_mutex_base **)a1 + 81));
    goto LABEL_44;
  }
  if (a1[104] && !a1[96]) {
    (**((void (***)(void))a1 + 3))();
  }
  a1[96] = 1;
  a1[104] = 1;
  int v21 = 3;
  if (a1[656]) {
    goto LABEL_43;
  }
LABEL_44:
  AMSCore::MapUtils::UpdateDiff<std::string>::~UpdateDiff((uint64_t)(a1 + 272));
  if (v21 == 3)
  {
    *((void *)a1 + 34) = a1 + 16;
    *(void *)a1 = 0;
    AMSCore::Task<void,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)(a1 + 272));
    return;
  }
  long long v23 = (char *)*((void *)a1 + 18);
  if (v23 != a1 + 120)
  {
    if (v23) {
      (*(void (**)(char *))(*(void *)v23 + 40))(v23);
    }
    if (!a1[104]) {
      goto LABEL_54;
    }
    goto LABEL_52;
  }
  (*(void (**)(char *))(*((void *)a1 + 15) + 32))(a1 + 120);
  if (a1[104])
  {
LABEL_52:
    if (!a1[96]) {
      (**((void (***)(void))a1 + 3))();
    }
  }
LABEL_54:
  uint64_t v24 = *((void *)a1 + 89);
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v24)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)a1 + 89) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v25 = (std::__shared_weak_count *)*((void *)a1 + 89);
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult((AMSCore::LoadNetworkBagResult *)(a1 + 152));
  operator delete(a1);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  char *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t vars8;

  if (*(void *)a1)
  {
    long long v2 = *((void *)a1 + 91);
    if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v3 = (std::__shared_weak_count *)*((void *)a1 + 91);
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    char v4 = (std::__shared_weak_count *)*((void *)a1 + 84);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    std::runtime_error v5 = (std::__shared_weak_count *)*((void *)a1 + 88);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v6 = (std::__shared_weak_count *)*((void *)a1 + 86);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (!a1[656]) {
        goto LABEL_15;
      }
    }
    else if (!a1[656])
    {
LABEL_15:
      AMSCore::MapUtils::UpdateDiff<std::string>::~UpdateDiff((uint64_t)(a1 + 272));
      goto LABEL_16;
    }
    std::__shared_mutex_base::unlock(*((std::__shared_mutex_base **)a1 + 81));
    goto LABEL_15;
  }
LABEL_16:
  std::runtime_error v7 = (char *)*((void *)a1 + 18);
  if (v7 == a1 + 120)
  {
    (*(void (**)(char *))(*((void *)a1 + 15) + 32))(a1 + 120);
    if (!a1[104]) {
      goto LABEL_24;
    }
    goto LABEL_22;
  }
  if (v7) {
    (*(void (**)(char *))(*(void *)v7 + 40))(v7);
  }
  if (a1[104])
  {
LABEL_22:
    if (!a1[96]) {
      (**((void (***)(void))a1 + 3))();
    }
  }
LABEL_24:
  uint64_t v8 = *((void *)a1 + 89);
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v8 && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)a1 + 89) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v9 = (std::__shared_weak_count *)*((void *)a1 + 89);
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult((AMSCore::LoadNetworkBagResult *)(a1 + 152));
  operator delete(a1);
}

void sub_18DA7ABE0(void *a1)
{
  if (!*(unsigned char *)(v1 + 584)) {
    (**v2)(v2);
  }
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:fe180100](v4);
  AMSCore::MapUtils::UpdateDiff<std::string>::~UpdateDiff(v3);
  __cxa_begin_catch(a1);
  AMSCore::Task<void,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DA7AC34()
{
}

unsigned char *AMSCore::nestedError<std::expected<void,AMSCore::Error> &>(unsigned char *result, uint64_t a2, uint64_t a3, const std::error_category *a4)
{
  if (!*(unsigned char *)(a2 + 72))
  {
    std::runtime_error::runtime_error(&v16, (const std::runtime_error *)a2);
    std::runtime_error v7 = (void *)(a2 + 40);
    uint64_t v8 = *(void *)(a2 + 40);
    long long v17 = *(_OWORD *)(a2 + 16);
    uint64_t v9 = *(uint64_t **)(a2 + 32);
    v16.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::runtime_error v18 = v9;
    uint64_t v19 = v8;
    uint64_t v20 = *(void *)(a2 + 48);
    if (v20)
    {
      *(void *)(v8 + 16) = &v19;
      *(void *)(a2 + 32) = v7;
      *std::runtime_error v7 = 0;
      *(void *)(a2 + 48) = 0;
    }
    else
    {
      std::runtime_error v18 = &v19;
    }
    long long v21 = *(_OWORD *)(a2 + 56);
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    char v22 = 1;
    std::runtime_error::runtime_error(&v10, &v16);
    long long v11 = v17;
    v10.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v12 = v18;
    v13[0] = v19;
    v13[1] = v20;
    if (v20)
    {
      *(void *)(v19 + 16) = v13;
      std::runtime_error v18 = &v19;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
    }
    else
    {
      uint64_t v12 = v13;
    }
    long long v14 = v21;
    long long v21 = 0uLL;
    AMSCore::Error::Error<>((uint64_t)&v15, (uint64_t)&v10, a3, a4);
  }
  *__n128 result = 0;
  result[72] = 0;
  return result;
}

void sub_18DA7B1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

uint64_t std::unique_lock<std::shared_mutex>::~unique_lock[abi:fe180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    std::__shared_mutex_base::unlock(*(std::__shared_mutex_base **)a1);
  }
  return a1;
}

void AMSCore::MapUtils::getKeys<std::map<std::string,AMSCore::Any>>(uint64_t a1, void *a2)
{
  *(_OWORD *)std::string __p = 0u;
  long long v17 = 0u;
  int v3 = 1065353216;
  int v18 = 1065353216;
  uint64_t v4 = a2 + 1;
  std::runtime_error v5 = (void *)*a2;
  if ((void *)*a2 == a2 + 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, (uint64_t)(v5 + 4), (uint64_t)(v5 + 4));
      std::runtime_error v10 = (void *)v5[1];
      if (v10)
      {
        do
        {
          long long v11 = v10;
          std::runtime_error v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          long long v11 = (void *)v5[2];
          BOOL v12 = *v11 == (void)v5;
          std::runtime_error v5 = v11;
        }
        while (!v12);
      }
      std::runtime_error v5 = v11;
    }
    while (v11 != v4);
    uint64_t v9 = __p[0];
    unint64_t v8 = (unint64_t)__p[1];
    uint64_t v7 = *((void *)&v17 + 1);
    uint64_t v6 = (char *)v17;
    int v3 = v18;
  }
  __p[0] = 0;
  __p[1] = 0;
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(_DWORD *)(a1 + 32) = v3;
  if (v7)
  {
    unint64_t v13 = *((void *)v6 + 1);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v13 >= v8) {
        v13 %= v8;
      }
    }
    else
    {
      v13 &= v8 - 1;
    }
    v9[v13] = a1 + 16;
    long long v17 = 0uLL;
  }
  else if (v6)
  {
    do
    {
      long long v14 = *(char **)v6;
      if (v6[39] < 0) {
        operator delete(*((void **)v6 + 2));
      }
      operator delete(v6);
      uint64_t v6 = v14;
    }
    while (v14);
  }
  std::runtime_error v15 = __p[0];
  __p[0] = 0;
  if (v15) {
    operator delete(v15);
  }
}

void sub_18DA7B38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique(void *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned __int8 **)(a2 + 16);
  int v5 = *(char *)(a2 + 39);
  if (v5 >= 0) {
    uint64_t v6 = (uint64_t *)(a2 + 16);
  }
  else {
    uint64_t v6 = *(uint64_t **)(a2 + 16);
  }
  if (v5 >= 0) {
    unint64_t v7 = *(unsigned __int8 *)(a2 + 39);
  }
  else {
    unint64_t v7 = *(void *)(a2 + 24);
  }
  unint64_t v8 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:fe180100](v6, v7);
  *(v4 - 1) = (unsigned __int8 *)v8;
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique_prepare[abi:fe180100]((uint64_t)a1, v8, v4))
  {
    return 0;
  }
  int8x8_t v10 = (int8x8_t)a1[1];
  unint64_t v11 = *(void *)(a2 + 8);
  uint8x8_t v12 = (uint8x8_t)vcnt_s8(v10);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    if (v11 >= *(void *)&v10) {
      v11 %= *(void *)&v10;
    }
  }
  else
  {
    v11 &= *(void *)&v10 - 1;
  }
  unint64_t v13 = *(void **)(*a1 + 8 * v11);
  if (v13)
  {
    *(void *)a2 = *v13;
LABEL_21:
    *unint64_t v13 = a2;
    goto LABEL_22;
  }
  *(void *)a2 = a1[2];
  a1[2] = a2;
  *(void *)(*a1 + 8 * v11) = a1 + 2;
  if (*(void *)a2)
  {
    unint64_t v14 = *(void *)(*(void *)a2 + 8);
    if (v12.u32[0] > 1uLL)
    {
      if (v14 >= *(void *)&v10) {
        v14 %= *(void *)&v10;
      }
    }
    else
    {
      v14 &= *(void *)&v10 - 1;
    }
    unint64_t v13 = (void *)(*a1 + 8 * v14);
    goto LABEL_21;
  }
LABEL_22:
  ++a1[3];
  return 1;
}

void *std::__basic_node_handle<std::__hash_node<std::string,void *>,std::allocator<std::string>,std::__set_node_handle_specifics>::~__basic_node_handle[abi:fe180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = *result;
  if (!*result) {
    return v1;
  }
  if (*((unsigned char *)result + 9))
  {
    if (*(char *)(v2 + 39) < 0) {
      operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
    *uint64_t v1 = 0;
    return v1;
  }
  __break(1u);
  return result;
}

uint64_t *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique_prepare[abi:fe180100](uint64_t a1, unint64_t a2, unsigned __int8 **a3)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v6.i16[0] = vaddlv_u8(v6);
    unint64_t v7 = v6.u32[0];
    if (v6.u32[0] > 1uLL) {
      uint64_t v8 = v4 <= a2 ? a2 % v4 : a2;
    }
    else {
      uint64_t v8 = (v4 - 1) & a2;
    }
    uint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v8);
    if (v9)
    {
      int8x8_t v10 = *v9;
      if (*v9)
      {
        char v11 = *((unsigned char *)a3 + 23);
        if (v11 >= 0) {
          uint8x8_t v12 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
        }
        else {
          uint8x8_t v12 = a3[1];
        }
        if (v11 >= 0) {
          unint64_t v13 = (unsigned __int8 *)a3;
        }
        else {
          unint64_t v13 = *a3;
        }
        do
        {
          unint64_t v14 = v10[1];
          if (v14 == a2)
          {
            uint64_t v15 = *((unsigned __int8 *)v10 + 39);
            if ((v15 & 0x80u) == 0) {
              std::runtime_error v16 = (unsigned __int8 *)*((unsigned __int8 *)v10 + 39);
            }
            else {
              std::runtime_error v16 = (unsigned __int8 *)v10[3];
            }
            if (v16 == v12)
            {
              if ((v15 & 0x80) != 0)
              {
                if (!memcmp((const void *)v10[2], v13, v10[3])) {
                  return v10;
                }
              }
              else
              {
                if (!*((unsigned char *)v10 + 39)) {
                  return v10;
                }
                uint64_t v17 = 0;
                while (*((unsigned __int8 *)v10 + v17 + 16) == v13[v17])
                {
                  if (v15 == ++v17) {
                    return v10;
                  }
                }
              }
            }
          }
          else
          {
            if (v7 <= 1)
            {
              v14 &= v4 - 1;
            }
            else if (v14 >= v4)
            {
              v14 %= v4;
            }
            if (v14 != v8) {
              break;
            }
          }
          int8x8_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v4 || (float)(v19 * (float)v4) < v18)
  {
    BOOL v20 = 1;
    if (v4 >= 3) {
      BOOL v20 = (v4 & (v4 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v4);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t prime = v22;
    }
    else {
      size_t prime = v21;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v4 = *(void *)(a1 + 8);
    }
    if (prime > v4) {
      goto LABEL_56;
    }
    if (prime < v4)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v4 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v4), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (prime <= v24) {
        size_t prime = v24;
      }
      if (prime < v4) {
LABEL_56:
      }
        std::__hash_table<std::string,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,std::allocator<std::string>>::__do_rehash<true>(a1, prime);
    }
  }
  return 0;
}

uint64_t AMSCore::BagNetworkDataSource::getAccount(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 280);
  if (!*(unsigned char *)(v1 + 88))
  {
    __break(1u);
    return result;
  }
  uint64_t v2 = result;
  int v3 = (std::runtime_error *)(result + 152);
  unint64_t v4 = (const std::runtime_error *)(v1 + 8);
  int v5 = *(unsigned __int8 *)(v1 + 80);
  if (*(unsigned char *)(v1 + 80))
  {
    uint8x8_t v6 = v4->__vftable;
    v4->__vftable = 0;
    v3->__vftable = v6;
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(result + 152), v4);
    *(_OWORD *)(v2 + 168) = *(_OWORD *)(v1 + 24);
    unint64_t v7 = (void *)(v1 + 48);
    uint64_t v8 = *(void *)(v1 + 48);
    *(void *)(v2 + 192) = v8;
    uint64_t v9 = v2 + 192;
    *(void *)(v2 + 152) = &unk_1EDC827D8;
    *(void *)(v2 + 184) = *(void *)(v1 + 40);
    uint64_t v10 = *(void *)(v1 + 56);
    *(void *)(v2 + 200) = v10;
    if (v10)
    {
      *(void *)(v8 + 16) = v9;
      *(void *)(v1 + 40) = v7;
      *unint64_t v7 = 0;
      *(void *)(v1 + 56) = 0;
    }
    else
    {
      *(void *)(v2 + 184) = v9;
    }
    uint64_t v11 = *(void *)(v2 + 280);
    *(_OWORD *)(v2 + 208) = *(_OWORD *)(v11 + 64);
    *(void *)(v11 + 64) = 0;
    *(void *)(v11 + 72) = 0;
  }
  *(unsigned char *)(v2 + 224) = v5;
  if (*(unsigned char *)(v2 + 104))
  {
    if (*(unsigned char *)(v2 + 96))
    {
      uint8x8_t v12 = *(std::__shared_weak_count **)(v2 + 32);
      if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    else
    {
      (**(void (***)(void))(v2 + 24))();
    }
    *(unsigned char *)(v2 + 104) = 0;
    int v5 = *(unsigned __int8 *)(v2 + 224);
  }
  unint64_t v13 = (std::runtime_error *)(v2 + 24);
  if (v5)
  {
    unint64_t v14 = v3->__vftable;
    v13->__vftable = v3->__vftable;
    if (v14) {
      operator new();
    }
    *(void *)(v2 + 32) = 0;
    *(void *)(v2 + 152) = 0;
    *(unsigned char *)(v2 + 96) = v5;
    *(unsigned char *)(v2 + 104) = 1;
  }
  else
  {
    std::runtime_error::runtime_error(v13, v3);
    uint64_t v15 = (void *)(v2 + 192);
    uint64_t v16 = *(void *)(v2 + 192);
    *(void *)(v2 + 64) = v16;
    uint64_t v17 = v2 + 64;
    *(_OWORD *)(v2 + 40) = *(_OWORD *)(v2 + 168);
    *(void *)(v2 + 24) = &unk_1EDC827D8;
    *(void *)(v2 + 56) = *(void *)(v2 + 184);
    uint64_t v18 = *(void *)(v2 + 200);
    *(void *)(v2 + 72) = v18;
    if (v18)
    {
      *(void *)(v16 + 16) = v17;
      *(void *)(v2 + 184) = v15;
      *uint64_t v15 = 0;
      *(void *)(v2 + 200) = 0;
    }
    else
    {
      *(void *)(v2 + 56) = v17;
    }
    *(_OWORD *)(v2 + 80) = *(_OWORD *)(v2 + 208);
    *(void *)(v2 + 208) = 0;
    *(void *)(v2 + 216) = 0;
    uint64_t v19 = *(void *)(v2 + 152);
    *(unsigned char *)(v2 + 96) = 0;
    *(unsigned char *)(v2 + 104) = 1;
    if (*(unsigned char *)(v2 + 224))
    {
      v3->__vftable = 0;
      if (v19) {
        (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
      }
    }
    else
    {
      (*(void (**)(std::runtime_error *))v19)(v3);
    }
  }
  uint64_t v20 = *(void *)(v2 + 288);
  if (v20 && !atomic_fetch_add((atomic_ullong *volatile)(v20 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    unint64_t v21 = *(std::__shared_weak_count **)(v2 + 288);
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  unint64_t v22 = *(std::__shared_weak_count **)(v2 + 264);
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    if ((*(char *)(v2 + 255) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  if (*(char *)(v2 + 255) < 0) {
LABEL_32:
  }
    operator delete(*(void **)(v2 + 232));
LABEL_33:
  if (!atomic_fetch_add((atomic_ullong *volatile)(*(void *)(v2 + 272) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    long long v23 = *(std::__shared_weak_count **)(v2 + 272);
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  *(void *)(v2 + 152) = v2 + 16;
  *(void *)uint64_t v2 = 0;
  return AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v3);
}

void AMSCore::BagNetworkDataSource::getAccount(char *a1)
{
  if (!*(void *)a1) {
    goto LABEL_11;
  }
  uint64_t v2 = *((void *)a1 + 36);
  if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    int v3 = (std::__shared_weak_count *)*((void *)a1 + 36);
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)a1 + 33);
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((a1[255] & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (a1[255] < 0) {
LABEL_8:
  }
    operator delete(*((void **)a1 + 29));
LABEL_9:
  if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)a1 + 34) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    int v5 = (std::__shared_weak_count *)*((void *)a1 + 34);
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::~Promise((uint64_t)(a1 + 16));
  operator delete(a1);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[30]>(uint64_t a1, unsigned int a2, const char *a3)
{
  uint64_t v4 = a2;
  AMSCore::StringUtils::join<char [30]>(a3, &__what_arg);
  *(void *)&v15.__val_ = v4;
  v15.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v9, v15, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  v9.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  uint64_t v10 = &v11;
  long long v13 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v9);
  *(std::error_code *)(a1 + 16) = v9.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v5 = v11;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = a1 + 40;
  uint64_t v7 = v12;
  *(void *)(a1 + 48) = v12;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    uint64_t v5 = 0;
    uint64_t v10 = &v11;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v6;
  }
  *(_OWORD *)(a1 + 56) = v13;
  long long v13 = 0uLL;
  v9.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v5);
  return MEMORY[0x192FA3C30](&v9);
}

void sub_18DA7BDC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::Task<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::Promise::unhandled_exception()
{
  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

uint64_t sub_18DA7BE00(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v36, (uint64_t)v33);
  std::optional<std::expected<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>(v29, v36);
  v36[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::runtime_error v30 = v38;
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v37, v37[1]);
  MEMORY[0x192FA3C30](v36);
  v33[0] = &unk_1EDC827D8;
  long long v31 = v35;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v34, v34[1]);
  return MEMORY[0x192FA3C30](v33);
}

void AMSCore::BagNetworkDataSource::~BagNetworkDataSource(AMSCore::BagNetworkDataSource *this)
{
  uint64_t v2 = (char *)this + 624;
  int v3 = (char *)*((void *)this + 81);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    if ((*((char *)this + 623) & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    if ((*((char *)this + 623) & 0x80000000) == 0)
    {
LABEL_5:
      uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 74);
      if (!v4) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }
  operator delete(*((void **)this + 75));
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 74);
  if (!v4) {
    goto LABEL_10;
  }
LABEL_9:
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 72);
    if (!v5)
    {
LABEL_12:
      AMSCore::BagDataSource::~BagDataSource(this);
      JUMPOUT(0x192FA4080);
    }
LABEL_11:
    std::__shared_weak_count::__release_weak(v5);
    goto LABEL_12;
  }
LABEL_10:
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 72);
  if (!v5) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

{
  char *v2;
  char *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t vars8;

  uint64_t v2 = (char *)this + 624;
  int v3 = (char *)*((void *)this + 81);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    if ((*((char *)this + 623) & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_8:
    operator delete(*((void **)this + 75));
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 74);
    if (!v4) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (v3) {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  if (*((char *)this + 623) < 0) {
    goto LABEL_8;
  }
LABEL_5:
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 74);
  if (!v4)
  {
LABEL_10:
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 72);
    if (!v5) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_9:
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 72);
  if (v5) {
LABEL_11:
  }
    std::__shared_weak_count::__release_weak(v5);
LABEL_12:
  AMSCore::BagDataSource::~BagDataSource(this);
}

uint64_t std::default_delete<AMSCore::BagNetworkDataSource>::operator()[abi:fe180100](uint64_t this)
{
  if (this)
  {
    uint64_t v1 = this;
    uint64_t v2 = this + 624;
    uint64_t v3 = *(void *)(this + 648);
    if (v3 == v2)
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
      if ((*(char *)(v1 + 623) & 0x80000000) == 0) {
        goto LABEL_6;
      }
    }
    else
    {
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
      }
      if ((*(char *)(v1 + 623) & 0x80000000) == 0)
      {
LABEL_6:
        uint64_t v4 = *(std::__shared_weak_count **)(v1 + 592);
        if (!v4) {
          goto LABEL_13;
        }
        goto LABEL_11;
      }
    }
    operator delete(*(void **)(v1 + 600));
    uint64_t v4 = *(std::__shared_weak_count **)(v1 + 592);
    if (!v4) {
      goto LABEL_13;
    }
LABEL_11:
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
LABEL_13:
    uint64_t v5 = *(std::__shared_weak_count **)(v1 + 576);
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
    AMSCore::BagDataSource::~BagDataSource((AMSCore::BagDataSource *)v1);
    JUMPOUT(0x192FA4080);
  }
  return this;
}

void *std::__function::__func<AMSCore::BagNetworkDataSource::make(std::string,std::string,std::shared_ptr<AMSCore::IBundleInfo>,std::function<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error> ()(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy)>)::$_0,std::allocator<AMSCore::BagNetworkDataSource::make(std::string,std::string,std::shared_ptr<AMSCore::IBundleInfo>,std::function<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error> ()(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy)>)::$_0>,void ()(std::string const&,AMSCore::AccountChangedMetadata)>::target_type()
{
}

uint64_t std::__function::__func<AMSCore::BagNetworkDataSource::make(std::string,std::string,std::shared_ptr<AMSCore::IBundleInfo>,std::function<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error> ()(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy)>)::$_0,std::allocator<AMSCore::BagNetworkDataSource::make(std::string,std::string,std::shared_ptr<AMSCore::IBundleInfo>,std::function<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error> ()(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy)>)::$_0>,void ()(std::string const&,AMSCore::AccountChangedMetadata)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore20BagNetworkDataSource4makeENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcE"
                     "EEES7_NS1_10shared_ptrINS_11IBundleInfoEEENS1_8functionIFNS_4TaskINS_20LoadNetworkBagResultENS_5Err"
                     "orEEENS1_5tupleIJS7_S7_EEENS8_IKNS_13IMediaAccountEEESA_NS1_8expectedINS_25LoadURLMetricsEventConfi"
                     "gESE_EENS_18LoadNetworkBagTask10LoadPolicyEEEEE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore20BagNetworkDataSource4makeENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9a"
                                "llocatorIcEEEES7_NS1_10shared_ptrINS_11IBundleInfoEEENS1_8functionIFNS_4TaskINS_20LoadNe"
                                "tworkBagResultENS_5ErrorEEENS1_5tupleIJS7_S7_EEENS8_IKNS_13IMediaAccountEEESA_NS1_8expec"
                                "tedINS_25LoadURLMetricsEventConfigESE_EENS_18LoadNetworkBagTask10LoadPolicyEEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore20BagNetworkDataSource4makeENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_NS1_10shared_ptrINS_11IBundleInfoEEENS1_8functionIFNS_4TaskINS_20LoadNetworkBagResultENS_5ErrorEEENS1_5tupleIJS7_S7_EEENS8_IKNS_13IMediaAccountEEESA_NS1_8expectedINS_25LoadURLMetricsEventConfigESE_EENS_18LoadNetworkBagTask10LoadPolicyEEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore20BagNetworkDataSource4makeENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_NS1_10shared_ptrINS_11IBundleInfoEEENS1_8functionIFNS_4TaskINS_20LoadNetworkBagResultENS_5ErrorEEENS1_5tupleIJS7_S7_EEENS8_IKNS_13IMediaAccountEEESA_NS1_8expectedINS_25LoadURLMetricsEventConfigESE_EENS_18LoadNetworkBagTask10LoadPolicyEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMSCore::BagNetworkDataSource::make(std::string,std::string,std::shared_ptr<AMSCore::IBundleInfo>,std::function<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error> ()(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy)>)::$_0,std::allocator<AMSCore::BagNetworkDataSource::make(std::string,std::string,std::shared_ptr<AMSCore::IBundleInfo>,std::function<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error> ()(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy)>)::$_0>,void ()(std::string const&,AMSCore::AccountChangedMetadata)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v8 = *(std::string *)a2;
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3) {
    goto LABEL_9;
  }
  uint64_t v4 = std::__shared_weak_count::lock(v3);
  if (!v4) {
    goto LABEL_9;
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint64_t v7 = (char *)operator new(0xC0uLL);
    *(void *)uint64_t v7 = AMSCore::BagNetworkDataSource::onAccountChanged;
    *((void *)v7 + 1) = AMSCore::BagNetworkDataSource::onAccountChanged;
    *((void *)v7 + 20) = v6;
    atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
    *(_WORD *)(v7 + 17) = 0;
    *((void *)v7 + 3) = 0;
    *((void *)v7 + 7) = 0;
    std::shared_ptr<AMSCore::Task<void,void>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<void,void>::Promise,AMSCore::Task<void,void>::Promise::get_return_object(void)::DetachPromise,void>(v9, (uint64_t)(v7 + 16));
  }
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_9:
    if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v5);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
LABEL_10:
  }
    operator delete(v8.__r_.__value_.__l.__data_);
}

void sub_18DA7CF00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *std::__function::__func<AMSCore::Task<void,void>::then(std::function<void ()(void)> &&)::{lambda(void)#1},std::allocator<std::function<void ()(void)> &&>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMSCore::Task<void,void>::then(std::function<void ()(void)> &&)::{lambda(void)#1},std::allocator<std::function<void ()(void)> &&>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNO7AMSCore4TaskIvvE4thenEONSt3__18functionIFvvEEEEUlvE_"
    || ((v3 & (unint64_t)"ZNO7AMSCore4TaskIvvE4thenEONSt3__18functionIFvvEEEEUlvE_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNO7AMSCore4TaskIvvE4thenEONSt3__18functionIFvvEEEEUlvE_")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNO7AMSCore4TaskIvvE4thenEONSt3__18functionIFvvEEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMSCore::Task<void,void>::then(std::function<void ()(void)> &&)::{lambda(void)#1},std::allocator<std::function<void ()(void)> &&>,void ()(void)>::operator()(void *a1)
{
  uint64_t v2 = a1[6];
  if (!v2) {
    std::__throw_bad_function_call[abi:fe180100]();
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  unint64_t v3 = (std::__shared_weak_count *)a1[2];
  a1[1] = 0;
  a1[2] = 0;
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void std::__function::__func<AMSCore::Task<void,void>::then(std::function<void ()(void)> &&)::{lambda(void)#1},std::allocator<std::function<void ()(void)> &&>,void ()(void)>::destroy_deallocate(char *__p)
{
  uint64_t v2 = __p + 24;
  unint64_t v3 = (char *)*((void *)__p + 6);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 2);
    if (!v4) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  if (v3) {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 2);
  if (v4)
  {
LABEL_7:
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
LABEL_9:
  operator delete(__p);
}

void std::__function::__func<AMSCore::Task<void,void>::then(std::function<void ()(void)> &&)::{lambda(void)#1},std::allocator<std::function<void ()(void)> &&>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v4) {
      return;
    }
    goto LABEL_7;
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
LABEL_7:
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t std::__function::__func<AMSCore::Task<void,void>::then(std::function<void ()(void)> &&)::{lambda(void)#1},std::allocator<std::function<void ()(void)> &&>,void ()(void)>::__clone(void *a1, void *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  *a2 = &unk_1EDC833F0;
  a2[1] = v4;
  a2[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (void *)a1[6];
  if (v5)
  {
    if (v5 == a1 + 3)
    {
      a2[6] = a2 + 3;
      return (*(uint64_t (**)(void))(*(void *)a1[6] + 24))(a1[6]);
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(void))(*v5 + 16))(a1[6]);
      a2[6] = result;
    }
  }
  else
  {
    uint64_t result = 0;
    a2[6] = 0;
  }
  return result;
}

void sub_18DA7D39C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<AMSCore::Task<void,void>::then(std::function<void ()(void)> &&)::{lambda(void)#1},std::allocator<std::function<void ()(void)> &&>,void ()(void)>::__clone(void *a1)
{
  uint64_t v2 = operator new(0x38uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  *uint64_t v2 = &unk_1EDC833F0;
  v2[1] = v4;
  v2[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a1[6];
  if (v5)
  {
    if ((void *)v5 == a1 + 3)
    {
      v2[6] = v2 + 3;
      (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
      return v2;
    }
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  }
  v2[6] = v5;
  return v2;
}

void sub_18DA7D4C8(_Unwind_Exception *a1)
{
  uint64_t v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMSCore::Task<void,void>::then(std::function<void ()(void)> &&)::{lambda(void)#1},std::allocator<std::function<void ()(void)> &&>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EDC833F0;
  uint64_t v2 = a1 + 3;
  uint64_t v3 = (void *)a1[6];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    uint64_t v4 = (std::__shared_weak_count *)a1[2];
    if (!v4) {
      goto LABEL_9;
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(void *))(*v3 + 40))(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)a1[2];
    if (!v4)
    {
LABEL_9:
      JUMPOUT(0x192FA4080);
    }
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  goto LABEL_9;
}

void *std::__function::__func<AMSCore::Task<void,void>::then(std::function<void ()(void)> &&)::{lambda(void)#1},std::allocator<std::function<void ()(void)> &&>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EDC833F0;
  uint64_t v2 = a1 + 3;
  uint64_t v3 = (void *)a1[6];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    uint64_t v4 = (std::__shared_weak_count *)a1[2];
    if (!v4) {
      return a1;
    }
    goto LABEL_7;
  }
  if (v3) {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
LABEL_7:
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZZN7AMSCore20BagNetworkDataSource4makeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES9_NS_10shared_ptrINS2_11IBundleInfoEEENS_8functionIFNS2_4TaskINS2_20LoadNetworkBagResultENS2_5ErrorEEENS_5tupleIJS9_S9_EEENSA_IKNS2_13IMediaAccountEEESC_NS_8expectedINS2_25LoadURLMetricsEventConfigESG_EENS2_18LoadNetworkBagTask10LoadPolicyEEEEENK3__0clIS9_NS2_22AccountChangedMetadataEEEDaT_T0_EUlvE_NS7_IS10_EEFvvEE11target_typeEv()
{
  return &_ZTIZZN7AMSCore20BagNetworkDataSource4makeENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_NS1_10shared_ptrINS_11IBundleInfoEEENS1_8functionIFNS_4TaskINS_20LoadNetworkBagResultENS_5ErrorEEENS1_5tupleIJS7_S7_EEENS8_IKNS_13IMediaAccountEEESA_NS1_8expectedINS_25LoadURLMetricsEventConfigESE_EENS_18LoadNetworkBagTask10LoadPolicyEEEEENK3__0clIS7_NS_22AccountChangedMetadataEEEDaT_T0_EUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZZN7AMSCore20BagNetworkDataSource4makeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES9_NS_10shared_ptrINS2_11IBundleInfoEEENS_8functionIFNS2_4TaskINS2_20LoadNetworkBagResultENS2_5ErrorEEENS_5tupleIJS9_S9_EEENSA_IKNS2_13IMediaAccountEEESC_NS_8expectedINS2_25LoadURLMetricsEventConfigESG_EENS2_18LoadNetworkBagTask10LoadPolicyEEEEENK3__0clIS9_NS2_22AccountChangedMetadataEEEDaT_T0_EUlvE_NS7_IS10_EEFvvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZN7AMSCore20BagNetworkDataSource4makeENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIc"
                     "EEEES7_NS1_10shared_ptrINS_11IBundleInfoEEENS1_8functionIFNS_4TaskINS_20LoadNetworkBagResultENS_5Er"
                     "rorEEENS1_5tupleIJS7_S7_EEENS8_IKNS_13IMediaAccountEEESA_NS1_8expectedINS_25LoadURLMetricsEventConf"
                     "igESE_EENS_18LoadNetworkBagTask10LoadPolicyEEEEENK3$_0clIS7_NS_22AccountChangedMetadataEEEDaT_T0_EUlvE_"
    || ((v3 & (unint64_t)"ZZN7AMSCore20BagNetworkDataSource4makeENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9"
                                "allocatorIcEEEES7_NS1_10shared_ptrINS_11IBundleInfoEEENS1_8functionIFNS_4TaskINS_20LoadN"
                                "etworkBagResultENS_5ErrorEEENS1_5tupleIJS7_S7_EEENS8_IKNS_13IMediaAccountEEESA_NS1_8expe"
                                "ctedINS_25LoadURLMetricsEventConfigESE_EENS_18LoadNetworkBagTask10LoadPolicyEEEEENK3$_0c"
                                "lIS7_NS_22AccountChangedMetadataEEEDaT_T0_EUlvE_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZZN7AMSCore20BagNetworkDataSource4makeENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_NS1_10shared_ptrINS_11IBundleInfoEEENS1_8functionIFNS_4TaskINS_20LoadNetworkBagResultENS_5ErrorEEENS1_5tupleIJS7_S7_EEENS8_IKNS_13IMediaAccountEEESA_NS1_8expectedINS_25LoadURLMetricsEventConfigESE_EENS_18LoadNetworkBagTask10LoadPolicyEEEEENK3$_0clIS7_NS_22AccountChangedMetadataEEEDaT_T0_EUlvE_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN7AMSCore20BagNetworkDataSource4makeENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_NS1_10shared_ptrINS_11IBundleInfoEEENS1_8functionIFNS_4TaskINS_20LoadNetworkBagResultENS_5ErrorEEENS1_5tupleIJS7_S7_EEENS8_IKNS_13IMediaAccountEEESA_NS1_8expectedINS_25LoadURLMetricsEventConfigESE_EENS_18LoadNetworkBagTask10LoadPolicyEEEEENK3$_0clIS7_NS_22AccountChangedMetadataEEEDaT_T0_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZZN7AMSCore20BagNetworkDataSource4makeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES9_NS_10shared_ptrINS2_11IBundleInfoEEENS_8functionIFNS2_4TaskINS2_20LoadNetworkBagResultENS2_5ErrorEEENS_5tupleIJS9_S9_EEENSA_IKNS2_13IMediaAccountEEESC_NS_8expectedINS2_25LoadURLMetricsEventConfigESG_EENS2_18LoadNetworkBagTask10LoadPolicyEEEEENK3__0clIS9_NS2_22AccountChangedMetadataEEEDaT_T0_EUlvE_NS7_IS10_EEFvvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZZN7AMSCore20BagNetworkDataSource4makeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES9_NS_10shared_ptrINS2_11IBundleInfoEEENS_8functionIFNS2_4TaskINS2_20LoadNetworkBagResultENS2_5ErrorEEENS_5tupleIJS9_S9_EEENSA_IKNS2_13IMediaAccountEEESC_NS_8expectedINS2_25LoadURLMetricsEventConfigESG_EENS2_18LoadNetworkBagTask10LoadPolicyEEEEENK3__0clIS9_NS2_22AccountChangedMetadataEEEDaT_T0_EUlvE_NS7_IS10_EEFvvEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZZN7AMSCore20BagNetworkDataSource4makeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES9_NS_10shared_ptrINS2_11IBundleInfoEEENS_8functionIFNS2_4TaskINS2_20LoadNetworkBagResultENS2_5ErrorEEENS_5tupleIJS9_S9_EEENSA_IKNS2_13IMediaAccountEEESC_NS_8expectedINS2_25LoadURLMetricsEventConfigESG_EENS2_18LoadNetworkBagTask10LoadPolicyEEEEENK3__0clIS9_NS2_22AccountChangedMetadataEEEDaT_T0_EUlvE_NS7_IS10_EEFvvEE7__cloneEPNS0_6__baseIS12_EE(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1EDCA5190;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *_ZNKSt3__110__function6__funcIZZN7AMSCore20BagNetworkDataSource4makeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES9_NS_10shared_ptrINS2_11IBundleInfoEEENS_8functionIFNS2_4TaskINS2_20LoadNetworkBagResultENS2_5ErrorEEENS_5tupleIJS9_S9_EEENSA_IKNS2_13IMediaAccountEEESC_NS_8expectedINS2_25LoadURLMetricsEventConfigESG_EENS2_18LoadNetworkBagTask10LoadPolicyEEEEENK3__0clIS9_NS2_22AccountChangedMetadataEEEDaT_T0_EUlvE_NS7_IS10_EEFvvEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_1EDCA5190;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZZN7AMSCore20BagNetworkDataSource4makeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES9_NS_10shared_ptrINS2_11IBundleInfoEEENS_8functionIFNS2_4TaskINS2_20LoadNetworkBagResultENS2_5ErrorEEENS_5tupleIJS9_S9_EEENSA_IKNS2_13IMediaAccountEEESC_NS_8expectedINS2_25LoadURLMetricsEventConfigESG_EENS2_18LoadNetworkBagTask10LoadPolicyEEEEENK3__0clIS9_NS2_22AccountChangedMetadataEEEDaT_T0_EUlvE_NS7_IS10_EEFvvEED0Ev(void *a1)
{
  *a1 = &unk_1EDCA5190;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x192FA4080);
}

void *_ZNSt3__110__function6__funcIZZN7AMSCore20BagNetworkDataSource4makeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES9_NS_10shared_ptrINS2_11IBundleInfoEEENS_8functionIFNS2_4TaskINS2_20LoadNetworkBagResultENS2_5ErrorEEENS_5tupleIJS9_S9_EEENSA_IKNS2_13IMediaAccountEEESC_NS_8expectedINS2_25LoadURLMetricsEventConfigESG_EENS2_18LoadNetworkBagTask10LoadPolicyEEEEENK3__0clIS9_NS2_22AccountChangedMetadataEEEDaT_T0_EUlvE_NS7_IS10_EEFvvEED1Ev(void *a1)
{
  *a1 = &unk_1EDCA5190;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void AMSCore::BagNetworkDataSource::onAccountChanged(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 168);
  if (!*(unsigned char *)(v1 + 88)) {
    goto LABEL_69;
  }
  uint64_t v3 = (void (***)(void))(a1 + 64);
  uint64_t v4 = (const std::runtime_error *)(v1 + 8);
  char v5 = *(unsigned char *)(v1 + 80);
  if (v5)
  {
    *(void *)(a1 + 64) = *(void *)(v1 + 8);
    uint64_t v6 = (const char **)(a1 + 72);
    p_std::string::size_type imp = (std::__libcpp_refstring *)(v1 + 16);
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 64), v4);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(v1 + 24);
    std::string v8 = (void *)(v1 + 48);
    uint64_t v9 = *(void *)(v1 + 48);
    *(void *)(a1 + 104) = v9;
    uint64_t v10 = a1 + 104;
    *(void *)(a1 + 64) = &unk_1EDC827D8;
    *(void *)(a1 + 96) = *(void *)(v1 + 40);
    uint64_t v11 = *(void *)(v1 + 56);
    *(void *)(a1 + 112) = v11;
    if (v11)
    {
      *(void *)(v9 + 16) = v10;
      *(void *)(v1 + 40) = v8;
      *std::string v8 = 0;
      *(void *)(v1 + 56) = 0;
    }
    else
    {
      *(void *)(a1 + 96) = v10;
    }
    uint64_t v12 = *(const std::runtime_error **)(a1 + 168);
    long long v13 = v12[4].__vftable;
    uint64_t v4 = v12 + 4;
    *(void *)(a1 + 120) = v13;
    uint64_t v6 = (const char **)(a1 + 128);
    p_std::string::size_type imp = &v4->__imp_;
  }
  *uint64_t v6 = p_imp->__imp_;
  v4->__vftable = 0;
  v4->__imp_.__imp_ = 0;
  *(unsigned char *)(a1 + 136) = v5;
  uint64_t v14 = *(void *)(a1 + 176);
  if (v14 && !atomic_fetch_add((atomic_ullong *volatile)(v14 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    std::error_code v15 = *(std::__shared_weak_count **)(a1 + 176);
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = *(std::__shared_weak_count **)(a1 + 152);
  if (!v16 || atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (*(unsigned char *)(a1 + 136)) {
      goto LABEL_14;
    }
LABEL_34:
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v38);
    AMSCore::Logger::log<char [31],AMSCore::Error>((uint64_t)v38.__r_.__value_.__l.__data_, 4u, (uint64_t)"bag", 3, "Account could not be fetched. ", (uint64_t)v3);
    std::string::size_type size = (std::__shared_weak_count *)v38.__r_.__value_.__l.__size_;
    if (v38.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v38.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    *(unsigned char *)(a1 + 18) = 1;
    int v29 = 3;
LABEL_59:
    if (*(unsigned char *)(a1 + 136))
    {
      uint64_t v36 = *(std::__shared_weak_count **)(a1 + 72);
      if (v36)
      {
        if (!atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      if (v29 == 3) {
        goto LABEL_67;
      }
    }
    else
    {
      (**v3)(v3);
      if (v29 == 3)
      {
LABEL_67:
        *(void *)(a1 + 64) = a1 + 16;
        *(void *)a1 = 0;
        AMSCore::Task<void,void>::Promise::Awaiter::await_suspend((uint64_t)v3);
        return;
      }
    }
    *(unsigned char *)(a1 + 18) = 1;
    goto LABEL_67;
  }
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  if (!*(unsigned char *)(a1 + 136)) {
    goto LABEL_34;
  }
LABEL_14:
  uint64_t v17 = (std::__shared_mutex_base *)(*(void *)(a1 + 160) + 248);
  uint64_t v37 = v17;
  std::__shared_mutex_base::lock(v17);
  if (*(unsigned char *)(a1 + 136))
  {
    uint64_t v18 = *(void *)(a1 + 64);
    (*(void (**)(std::string *__return_ptr))(**(void **)(*(void *)(a1 + 160) + 56) + 16))(&__p);
    (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(void *)v18 + 128))(&v38, v18, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v19 = *(void *)(a1 + 160);
    uint64_t v20 = (const void **)(v19 + 600);
    if (!v39) {
      goto LABEL_39;
    }
    uint64_t v21 = *(unsigned __int8 *)(v19 + 623);
    size_t v22 = *(void *)(v19 + 608);
    if ((v21 & 0x80u) == 0) {
      uint64_t v23 = *(unsigned __int8 *)(v19 + 623);
    }
    else {
      uint64_t v23 = *(void *)(v19 + 608);
    }
    std::string::size_type v24 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    char v25 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v24 = v38.__r_.__value_.__l.__size_;
    }
    if (v23 != v24) {
      goto LABEL_39;
    }
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v26 = &v38;
    }
    else {
      uint64_t v26 = (std::string *)v38.__r_.__value_.__r.__words[0];
    }
    if ((v21 & 0x80) != 0)
    {
      if (memcmp(*v20, v26, v22)) {
        goto LABEL_39;
      }
    }
    else if (v21)
    {
      uint64_t v27 = v20;
      while (*(unsigned __int8 *)v27 == v26->__r_.__value_.__s.__data_[0])
      {
        uint64_t v27 = (const void **)((char *)v27 + 1);
        uint64_t v26 = (std::string *)((char *)v26 + 1);
        if (!--v21) {
          goto LABEL_68;
        }
      }
LABEL_39:
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&__p);
      AMSCore::Logger::log<char [37],std::string,char [20],std::optional<std::string>>((uint64_t)__p.__r_.__value_.__l.__data_, (uint64_t)v20, (uint64_t)&v38);
      std::runtime_error v30 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_
        && !atomic_fetch_add((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
      long long v31 = operator new(0x30uLL);
      uint64_t v32 = *(void *)(a1 + 160);
      v31[1] = 0;
      v31[2] = 0;
      void *v31 = &unk_1EDC84358;
      v31[5] = 0;
      v31[4] = 0;
      v31[3] = v31 + 4;
      uint64_t v33 = *(std::__shared_weak_count **)(v32 + 424);
      *(void *)(v32 + 416) = v31 + 3;
      *(void *)(v32 + 424) = v31;
      if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
      uint64_t v34 = *(void *)(a1 + 160);
      if (*(unsigned char *)(v34 + 464)) {
        *(unsigned char *)(v34 + 464) = 0;
      }
      if (v39)
      {
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&__p, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = v38;
        }
      }
      else
      {
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
        __p.__r_.__value_.__s.__data_[0] = 0;
      }
      if (*(char *)(*(void *)(a1 + 160) + 623) < 0) {
        operator delete((void *)*v20);
      }
      *(std::string *)uint64_t v20 = __p;
      uint64_t v17 = v37;
      std::__shared_mutex_base::unlock(v37);
      AMSCore::Subject<>::notify(*(void *)(a1 + 160) + 160);
      int v29 = 0;
      char v25 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      char v35 = 1;
      if (!v39) {
        goto LABEL_57;
      }
      goto LABEL_55;
    }
LABEL_68:
    char v35 = 0;
    *(unsigned char *)(a1 + 18) = 1;
    int v29 = 3;
LABEL_55:
    if (v25 < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
LABEL_57:
    if ((v35 & 1) == 0) {
      std::__shared_mutex_base::unlock(v17);
    }
    goto LABEL_59;
  }
LABEL_69:
  __break(1u);
}

void sub_18DA7E0AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17)
  {
    if (a16 < 0) {
      operator delete(__p);
    }
  }
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:fe180100]((uint64_t)&a9);
  std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](v23);
  __cxa_begin_catch(a1);
  std::terminate();
}

void AMSCore::BagNetworkDataSource::onAccountChanged(char *__p)
{
  if (*(void *)__p)
  {
    uint64_t v2 = *((void *)__p + 22);
    if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 22);
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 19);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  char v5 = (char *)*((void *)__p + 7);
  if (v5 == __p + 32)
  {
    (*(void (**)(char *))(*((void *)__p + 4) + 32))(__p + 32);
  }
  else if (v5)
  {
    (*(void (**)(char *))(*(void *)v5 + 40))(v5);
  }
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  operator delete(__p);
}

uint64_t AMSCore::Logger::log<char [31],AMSCore::Error>(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= a2)
  {
    char v10 = a2;
    uint64_t v11 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v17);
    uint64_t v12 = *(void *)(v17[0] - 24);
    {
    }
    size_t v13 = strlen(a5);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v17, (uint64_t)a5, v13);
    AMSCore::operator<<(v17, a6);
    uint64_t v14 = v17[6];
    std::error_code v15 = (char *)v17 + *(void *)(v17[0] - 24);
    if ((v15[32] & 5) != 0)
    {
      uint64_t v16 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v15 + 5) + 32))(&rep);
      uint64_t v16 = v24;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v21 = v10;
    uint64_t v22 = v14;
    uint64_t v23 = v16;
    (*(void (**)(void, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v11 + 16) + 16))(*(void *)(v11 + 16), a3, a4, &rep);
    v17[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v17[1] = MEMORY[0x1E4FBA470] + 16;
    if (v18 < 0) {
      operator delete((void *)v17[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v19);
  }
  return result;
}

void sub_18DA7E54C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Logger::log<char [37],std::string,char [20],std::optional<std::string>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= 2u)
  {
    uint64_t v5 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v16);
    uint64_t v6 = *(void *)(v16[0] - 24);
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v16, (uint64_t)"Storefront changed. oldStorefront = ", 36);
    int v7 = *(char *)(a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *(void *)a2;
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v16, v8, v9);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v16, (uint64_t)" | newStorefront = ", 19);
    if (*(unsigned char *)(a3 + 24))
    {
      int v10 = *(char *)(a3 + 23);
      if (v10 >= 0) {
        uint64_t v11 = a3;
      }
      else {
        uint64_t v11 = *(void *)a3;
      }
      if (v10 >= 0) {
        uint64_t v12 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v12 = *(void *)(a3 + 8);
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v16, v11, v12);
    }
    else
    {
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v16, (uint64_t)"nullopt", 7);
    }
    uint64_t v13 = v16[6];
    uint64_t v14 = (char *)v16 + *(void *)(v16[0] - 24);
    if ((v14[32] & 5) != 0)
    {
      uint64_t v15 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v14 + 5) + 32))(&rep);
      uint64_t v15 = v23;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v20 = 2;
    uint64_t v21 = v13;
    uint64_t v22 = v15;
    (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v5 + 16) + 16))(*(void *)(v5 + 16), "bag", 3, &rep);
    v16[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v16 + *(void *)(v16[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v16[1] = MEMORY[0x1E4FBA470] + 16;
    if (v17 < 0) {
      operator delete((void *)v16[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v18);
  }
  return result;
}

void sub_18DA7E890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMSCore::BagNetworkDataSource::make(std::string,std::string,std::shared_ptr<AMSCore::IBundleInfo>,std::function<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error> ()(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy)>)::$_0,std::allocator<AMSCore::BagNetworkDataSource::make(std::string,std::string,std::shared_ptr<AMSCore::IBundleInfo>,std::function<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error> ()(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy)>)::$_0>,void ()(std::string const&,AMSCore::AccountChangedMetadata)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void *std::__function::__func<AMSCore::BagNetworkDataSource::make(std::string,std::string,std::shared_ptr<AMSCore::IBundleInfo>,std::function<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error> ()(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy)>)::$_0,std::allocator<AMSCore::BagNetworkDataSource::make(std::string,std::string,std::shared_ptr<AMSCore::IBundleInfo>,std::function<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error> ()(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy)>)::$_0>,void ()(std::string const&,AMSCore::AccountChangedMetadata)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_1EDCA5120;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMSCore::BagNetworkDataSource::make(std::string,std::string,std::shared_ptr<AMSCore::IBundleInfo>,std::function<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error> ()(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy)>)::$_0,std::allocator<AMSCore::BagNetworkDataSource::make(std::string,std::string,std::shared_ptr<AMSCore::IBundleInfo>,std::function<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error> ()(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy)>)::$_0>,void ()(std::string const&,AMSCore::AccountChangedMetadata)>::~__func(void *a1)
{
  *a1 = &unk_1EDCA5120;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x192FA4080);
}

void *std::__function::__func<AMSCore::BagNetworkDataSource::make(std::string,std::string,std::shared_ptr<AMSCore::IBundleInfo>,std::function<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error> ()(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy)>)::$_0,std::allocator<AMSCore::BagNetworkDataSource::make(std::string,std::string,std::shared_ptr<AMSCore::IBundleInfo>,std::function<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error> ()(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy)>)::$_0>,void ()(std::string const&,AMSCore::AccountChangedMetadata)>::~__func(void *a1)
{
  *a1 = &unk_1EDCA5120;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<AMSCore::BagNetworkDataSource *,std::shared_ptr<AMSCore::BagNetworkDataSource>::__shared_ptr_default_delete<AMSCore::BagNetworkDataSource,AMSCore::BagNetworkDataSource>,std::allocator<AMSCore::BagNetworkDataSource>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN7AMSCore20BagNetworkDataSourceEE27__shared_ptr_default_deleteIS2_S2_EE"
    || ((v3 & (unint64_t)"NSt3__110shared_ptrIN7AMSCore20BagNetworkDataSourceEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "NSt3__110shared_ptrIN7AMSCore20BagNetworkDataSourceEE27__shared_ptr_default_deleteIS2_S2_EE")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN7AMSCore20BagNetworkDataSourceEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::BagNetworkDataSource *,std::shared_ptr<AMSCore::BagNetworkDataSource>::__shared_ptr_default_delete<AMSCore::BagNetworkDataSource,AMSCore::BagNetworkDataSource>,std::allocator<AMSCore::BagNetworkDataSource>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<AMSCore::BagNetworkDataSource>::operator()[abi:fe180100](*(void *)(a1 + 24));
}

void std::__shared_ptr_pointer<AMSCore::BagNetworkDataSource *,std::shared_ptr<AMSCore::BagNetworkDataSource>::__shared_ptr_default_delete<AMSCore::BagNetworkDataSource,AMSCore::BagNetworkDataSource>,std::allocator<AMSCore::BagNetworkDataSource>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void AMSCore::BagNetworkDataSource::loadNetworkBag(uint64_t *a1, int64x2_t *a2, int64x2_t *a3, std::runtime_error *a4)
{
  v21[19] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  v21[0] = a1[1];
  *(void *)((char *)v21 + 7) = *(uint64_t *)((char *)a1 + 15);
  char v5 = *((unsigned char *)a1 + 23);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v6 = a1[3];
  v20[0] = a1[4];
  *(void *)((char *)v20 + 7) = *(uint64_t *)((char *)a1 + 39);
  char v7 = *((unsigned char *)a1 + 47);
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  int64x2_t v8 = *a2;
  a2->i64[0] = 0;
  a2->i64[1] = 0;
  int64x2_t v13 = v8;
  int64x2_t v14 = *a3;
  a3->i64[0] = 0;
  a3->i64[1] = 0;
  unsigned __int8 imp = a4[7].__imp_.__imp_;
  std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__union_t>(&v15, imp, a4);
  LOBYTE(v16) = imp;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_18IHTTPCacheProviderEEERDavE9singleton, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_18IHTTPCacheProviderEEERDavE9singleton))
  {
    std::__shared_mutex_base::__shared_mutex_base(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_18IHTTPCacheProviderEEERDavE9singleton);
    qword_1EB38CA48 = 0;
    qword_1EB38CA50 = 0;
    byte_1EB38CA58 = 0;
    __cxa_guard_release(&_ZGVZN7AMSCore12_GLOBAL__N_18getStateINS_18IHTTPCacheProviderEEERDavE9singleton);
  }
  std::__shared_mutex_base::lock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_18IHTTPCacheProviderEEERDavE9singleton);
  if (byte_1EB38CA58)
  {
    if (qword_1EB38CA50) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(qword_1EB38CA50 + 8), 1uLL, memory_order_relaxed);
    }
    std::__shared_mutex_base::unlock_shared(&_ZZN7AMSCore12_GLOBAL__N_18getStateINS_18IHTTPCacheProviderEEERDavE9singleton);
    v18[0] = &unk_1EDCA5220;
    v18[1] = AMSCore::LoadNetworkBagTask::internal::callOnce;
    uint64_t v19 = v18;
    int v10 = (char *)operator new(0x358uLL);
    *(void *)int v10 = AMSCore::LoadNetworkBagTask::perform;
    *((void *)v10 + 1) = AMSCore::LoadNetworkBagTask::perform;
    *((void *)v10 + 79) = v4;
    *((void *)v10 + 80) = v21[0];
    *(void *)(v10 + 647) = *(void *)((char *)v21 + 7);
    v10[655] = v5;
    v21[0] = 0;
    *(void *)((char *)v21 + 7) = 0;
    *((void *)v10 + 82) = v6;
    *((void *)v10 + 83) = v20[0];
    *(void *)(v10 + 671) = *(void *)((char *)v20 + 7);
    v10[679] = v7;
    v20[0] = 0;
    *(void *)((char *)v20 + 7) = 0;
    *(int64x2_t *)(v10 + 808) = vzip2q_s64(v13, v14);
    char v11 = v16;
    __n128 v12 = std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__union_t>((std::runtime_error *)(v10 + 328), v16, &v15);
    v10[448] = v11;
    if (v19)
    {
      if (v19 == v18)
      {
        *((void *)v10 + 88) = v10 + 680;
        (*(void (**)(void *, __n128))(v18[0] + 24))(v18, v12);
      }
      else
      {
        *((void *)v10 + 88) = v19;
        uint64_t v19 = 0;
      }
    }
    else
    {
      *((void *)v10 + 88) = 0;
    }
    atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
    v10[24] = 0;
    v10[152] = 0;
    *((void *)v10 + 20) = 0;
    *((void *)v10 + 24) = 0;
    std::shared_ptr<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(v17, (uint64_t)(v10 + 16));
  }
  std::terminate();
}

void sub_18DA7F620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *_ZNKSt3__110__function6__funcIPDoFvRKNS_8functionIFvvEEEENS_9allocatorIS8_EEFvS6_EE11target_typeEv()
{
  return &_ZTIPDoFvRKNSt3__18functionIFvvEEEE;
}

uint64_t _ZNKSt3__110__function6__funcIPDoFvRKNS_8functionIFvvEEEENS_9allocatorIS8_EEFvS6_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x800000018DDEC3FCLL
    || ((v3 & 0x800000018DDEC3FCLL & 0x8000000000000000) != 0) != __OFSUB__(v3, 0x800000018DDEC3FCLL)
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000018DDEC3FCLL & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIPDoFvRKNS_8functionIFvvEEEENS_9allocatorIS8_EEFvS6_EEclES6_(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t _ZNKSt3__110__function6__funcIPDoFvRKNS_8functionIFvvEEEENS_9allocatorIS8_EEFvS6_EE7__cloneEPNS0_6__baseISB_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDCA5220;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIPDoFvRKNS_8functionIFvvEEEENS_9allocatorIS8_EEFvS6_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EDCA5220;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIPDoFvRKNS_8functionIFvvEEEENS_9allocatorIS8_EEFvS6_EED0Ev()
{
}

void AMSCore::LoadNetworkBagTask::internal::callOnce(uint64_t a1)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&AMSCore::LoadNetworkBagTask::internal::callOnce(std::function<void ()(void)> const&)::onceFlag, memory_order_acquire) != -1)
  {
    uint64_t v1 = &v2;
    uint64_t v2 = a1;
    std::__call_once(&AMSCore::LoadNetworkBagTask::internal::callOnce(std::function<void ()(void)> const&)::onceFlag, &v1, (void (__cdecl *)(void *))std::__call_once_proxy[abi:fe180100]<std::tuple<std::function<void ()(void)> const&>>);
  }
}

uint64_t std::__call_once_proxy[abi:fe180100]<std::tuple<std::function<void ()(void)> const&>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(**(void **)a1 + 24);
  if (!v1) {
    std::__throw_bad_function_call[abi:fe180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);
  return v2();
}

void AMSCore::LoadNetworkBagTask::encodeHTTPRequest(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, void *a5, uint64_t a6, char a7)
{
  int64x2_t v13 = (char *)operator new(0xC58uLL);
  *(void *)int64x2_t v13 = AMSCore::LoadNetworkBagTask::encodeHTTPRequest;
  *((void *)v13 + 1) = AMSCore::LoadNetworkBagTask::encodeHTTPRequest;
  v13[3143] = a7;
  *((void *)v13 + 377) = *(void *)a2;
  *((_DWORD *)v13 + 786) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(v13 + 3147) = *(_DWORD *)(a2 + 19);
  v13[3151] = *(unsigned char *)(a2 + 23);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *((void *)v13 + 378) = *(void *)(a2 + 24);
  int v14 = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(v13 + 3139) = *(_DWORD *)(a2 + 43);
  *((_DWORD *)v13 + 784) = v14;
  uint64_t v15 = *(char *)(a2 + 47);
  v13[3152] = *(unsigned char *)(a2 + 47);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  int v16 = *((unsigned __int8 *)a3 + 24);
  v13[3153] = v16;
  if (v16)
  {
    uint64_t v17 = *a3;
    uint64_t v15 = a3[1];
    *((_DWORD *)v13 + 782) = *((_DWORD *)a3 + 4);
    *(_DWORD *)(v13 + 3131) = *(_DWORD *)((char *)a3 + 19);
    LOBYTE(v16) = *((unsigned char *)a3 + 23);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
  }
  else
  {
    uint64_t v17 = 0;
  }
  *((void *)v13 + 380) = v17;
  v13[3154] = v16;
  *((void *)v13 + 379) = v15;
  uint64_t v18 = a4[1];
  *((void *)v13 + 381) = *a4;
  *((void *)v13 + 382) = v18;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  *a5 = 0;
  a5[1] = 0;
  *(_OWORD *)(v13 + 3064) = *(_OWORD *)a6;
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  v13[24] = 0;
  v13[416] = 0;
  *((void *)v13 + 53) = 0;
  *((void *)v13 + 57) = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(__p, (uint64_t)(v13 + 16));
}

void sub_18DA82514(void *a1)
{
}

void sub_18DA82614()
{
}

void sub_18DA8262C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (*(unsigned char *)(v70 + 1896))
  {
    unint64_t v72 = STACK[0x208];
    *(void *)(v72 + 1824) = &unk_1EDC827D8;
    long long v73 = *(std::__shared_weak_count **)(v72 + 1888);
    if (v73 && !atomic_fetch_add(&v73->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(STACK[0x208] + 1856, *(unsigned int **)(STACK[0x208] + 1864));
    MEMORY[0x192FA3C30](a70);
  }
  if (*(char *)(STACK[0x208] + 2911) < 0) {
    operator delete(*v71);
  }
  JUMPOUT(0x18DA825FCLL);
}

void AMSCore::LoadNetworkBagTask::encodeHTTPRequest(uint64_t a1)
{
  uint64_t v2 = (AMSCore::Error *)(a1 + 464);
  uint64_t v3 = (void **)(a1 + 856);
  uint64_t v4 = (void **)(a1 + 1224);
  char v5 = (AMSCore::Error *)(a1 + 1824);
  uint64_t v6 = a1 + 16;
  if (!*(unsigned char *)(a1 + 3135))
  {
    uint64_t v13 = *(void *)(a1 + 3088);
    if (!*(unsigned char *)(v13 + 248)) {
      goto LABEL_125;
    }
    int v14 = (std::runtime_error *)(v13 + 8);
    char v15 = *(unsigned char *)(v13 + 240);
    if (v15)
    {
      AMSCore::URLBuilder::URLBuilder((std::runtime_error *)(a1 + 464), v14);
    }
    else
    {
      std::runtime_error::runtime_error((std::runtime_error *)(a1 + 464), v14);
      *(_OWORD *)(a1 + 480) = *(_OWORD *)(v13 + 24);
      *(void *)(a1 + 464) = &unk_1EDC827D8;
      char v20 = (void *)(v13 + 48);
      uint64_t v21 = *(void *)(v13 + 48);
      uint64_t v22 = a1 + 504;
      *(void *)(a1 + 496) = *(void *)(v13 + 40);
      *(void *)(a1 + 504) = v21;
      uint64_t v23 = *(void *)(v13 + 56);
      *(void *)(a1 + 512) = v23;
      if (v23)
      {
        *(void *)(v21 + 16) = v22;
        *(void *)(v13 + 40) = v20;
        *char v20 = 0;
        *(void *)(v13 + 56) = 0;
      }
      else
      {
        *(void *)(a1 + 496) = v22;
      }
      uint64_t v38 = *(void *)(a1 + 3088);
      *(_OWORD *)(a1 + 520) = *(_OWORD *)(v38 + 64);
      *(void *)(v38 + 64) = 0;
      *(void *)(v38 + 72) = 0;
    }
    *(unsigned char *)(a1 + 696) = v15;
    uint64_t v39 = *(void *)(a1 + 3096);
    if (v39 && !atomic_fetch_add((atomic_ullong *volatile)(v39 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v40 = *(std::__shared_weak_count **)(a1 + 3096);
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
    uint64_t v41 = *(std::__shared_weak_count **)(a1 + 1232);
    if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
    long long v42 = *(std::__shared_weak_count **)(a1 + 2976);
    if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
    AMSCore::URL::~URL((AMSCore::URL *)(a1 + 1672));
    if (*(unsigned char *)(a1 + 1664))
    {
      *(void *)(a1 + 1592) = &unk_1EDC827D8;
      uint64_t v43 = *(std::__shared_weak_count **)(a1 + 1656);
      if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 1624, *(unsigned int **)(a1 + 1632));
      MEMORY[0x192FA3C30](a1 + 1592);
    }
    int v44 = *(unsigned __int8 *)(a1 + 696);
    if (*(unsigned char *)(a1 + 696))
    {
      AMSCore::URLBuilder::operator=(v5, v2);
      int v31 = 0;
    }
    else
    {
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&__p, (uint64_t)v2);
      std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>((AMSCore::EncodeHTTPRequestTask::Options *)(a1 + 24), (std::runtime_error *)&__p);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EDC827D8;
      __n128 v45 = v62;
      if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v61, v61[1]);
      MEMORY[0x192FA3C30](&__p);
      int v31 = 3;
    }
    std::__expected_base<AMSCore::URLBuilder,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100]((uint64_t)v2);
    if (!v44)
    {
LABEL_30:
      if (**(char **)(a1 + 3080) < 0)
      {
        operator delete(*(void **)(a1 + 2864));
        if ((*(char *)(a1 + 2935) & 0x80000000) == 0)
        {
LABEL_32:
          uint64_t v32 = *(std::__shared_weak_count **)(a1 + 2944);
          if (!v32) {
            goto LABEL_38;
          }
          goto LABEL_36;
        }
      }
      else if ((*(char *)(a1 + 2935) & 0x80000000) == 0)
      {
        goto LABEL_32;
      }
      operator delete(*(void **)(a1 + 2912));
      uint64_t v32 = *(std::__shared_weak_count **)(a1 + 2944);
      if (!v32) {
        goto LABEL_38;
      }
LABEL_36:
      if (!atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
LABEL_38:
      AMSCore::URL::~URL((AMSCore::URL *)(a1 + 1904));
      if (*(unsigned char *)(a1 + 1896))
      {
        *(void *)(a1 + 1824) = &unk_1EDC827D8;
        uint64_t v33 = *(std::__shared_weak_count **)(a1 + 1888);
        if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 1856, *(unsigned int **)(a1 + 1864));
        MEMORY[0x192FA3C30](v5);
      }
      if (v31 == 3)
      {
        *(void *)(a1 + 3120) = 0;
        *(void *)(a1 + 464) = v6;
        *(void *)a1 = 0;
        AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v2);
        return;
      }
      uint64_t v34 = *(void *)(a1 + 3072);
      AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::~Promise(v6);
      if (v34 && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)(a1 + 3072) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        char v35 = *(std::__shared_weak_count **)(a1 + 3072);
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
      uint64_t v36 = *(void ***)(a1 + 3048);
      if (v36)
      {
        uint64_t v37 = *(void ***)(a1 + 3056);
        if (v37 == v36)
        {
          uint64_t v37 = *(void ***)(a1 + 3048);
        }
        else
        {
          do
          {
            if (*((char *)v37 - 1) < 0)
            {
              operator delete(*(v37 - 3));
              uint64_t v36 = *(void ***)(a1 + 3048);
            }
            v37 -= 3;
          }
          while (v37 != v36);
        }
        operator delete(v37);
      }
      if (*(unsigned char *)(a1 + 3153))
      {
        if (*(char *)(a1 + 3154) < 0) {
          operator delete(*(void **)(a1 + 3040));
        }
      }
      if (*(char *)(a1 + 3152) < 0)
      {
        operator delete(*(void **)(a1 + 3024));
        if ((*(char *)(a1 + 3151) & 0x80000000) == 0) {
          goto LABEL_57;
        }
      }
      else if ((*(char *)(a1 + 3151) & 0x80000000) == 0)
      {
LABEL_57:
        operator delete((void *)a1);
        return;
      }
      operator delete(*(void **)(a1 + 3016));
      goto LABEL_57;
    }
    *(unsigned char *)(a1 + 2056) = 0;
    *(unsigned char *)(a1 + 2080) = 0;
    if (*(unsigned char *)(a1 + 1928))
    {
      *(_OWORD *)(a1 + 2056) = *(_OWORD *)(a1 + 1904);
      *(void *)(a1 + 2072) = *(void *)(a1 + 1920);
      *(void *)(a1 + 1904) = 0;
      *(void *)(a1 + 1920) = 0;
      *(void *)(a1 + 1912) = 0;
      *(unsigned char *)(a1 + 2080) = 1;
    }
    *(unsigned char *)(a1 + 2088) = 0;
    *(unsigned char *)(a1 + 2112) = 0;
    if (*(unsigned char *)(a1 + 1960))
    {
      *(_OWORD *)(a1 + 2088) = *(_OWORD *)(a1 + 1936);
      *(void *)(a1 + 2104) = *(void *)(a1 + 1952);
      *(void *)(a1 + 1936) = 0;
      *(void *)(a1 + 1952) = 0;
      *(void *)(a1 + 1944) = 0;
      *(unsigned char *)(a1 + 2112) = 1;
    }
    *(unsigned char *)(a1 + 2120) = 0;
    *(unsigned char *)(a1 + 2144) = 0;
    if (*(unsigned char *)(a1 + 1992))
    {
      *(_OWORD *)(a1 + 2120) = *(_OWORD *)(a1 + 1968);
      *(void *)(a1 + 2136) = *(void *)(a1 + 1984);
      *(void *)(a1 + 1968) = 0;
      *(void *)(a1 + 1984) = 0;
      *(void *)(a1 + 1976) = 0;
      *(unsigned char *)(a1 + 2144) = 1;
    }
    *(_DWORD *)(a1 + 2152) = *(_DWORD *)(a1 + 2000);
    *(void *)(a1 + 2160) = a1 + 2160;
    *(void *)(a1 + 2168) = a1 + 2160;
    *(void *)(a1 + 2176) = 0;
    uint64_t v46 = *(void *)(a1 + 2024);
    if (v46)
    {
      uint64_t v47 = *(uint64_t **)(a1 + 2016);
      uint64_t v48 = *(void *)(a1 + 2008);
      uint64_t v49 = *v47;
      *(void *)(v49 + 8) = *(void *)(v48 + 8);
      **(void **)(v48 + 8) = v49;
      uint64_t v50 = *(void *)(a1 + 2160);
      *(void *)(v50 + 8) = v47;
      *uint64_t v47 = v50;
      *(void *)(a1 + 2160) = v48;
      *(void *)(v48 + 8) = a1 + 2160;
      *(void *)(a1 + 2176) = v46;
      *(void *)(a1 + 2024) = 0;
    }
    uint64_t v51 = *(void *)(a1 + 3072);
    uint64_t v52 = *(void *)(a1 + 3064);
    *(_OWORD *)(a1 + 2184) = *(_OWORD *)(a1 + 2032);
    *(void *)(a1 + 2200) = *(void *)(a1 + 2048);
    *(void *)(a1 + 2040) = 0;
    *(void *)(a1 + 2032) = 0;
    *(void *)(a1 + 2048) = 0;
    *(void *)(a1 + 2952) = v52;
    *(void *)(a1 + 2960) = v51;
    if (v51) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v51 + 8), 1uLL, memory_order_relaxed);
    }
    AMSCore::EncodeHTTPRequestTask::internal::makeOptionsBuilder((uint64_t)v4, (long long *)(a1 + 2056), (long long *)(a1 + 2952));
    uint64_t v53 = *(std::__shared_weak_count **)(a1 + 2960);
    if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
    int v54 = *(unsigned __int8 *)(a1 + 3153);
    AMSCore::URL::~URL((AMSCore::URL *)(a1 + 2056));
    if (v54)
    {
      int v55 = *(char *)(a1 + 3154);
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 19;
      strcpy((char *)&__p, "X-Apple-Store-Front");
      *(unsigned char *)(a1 + 2240) = 0;
      *(unsigned char *)(a1 + 2264) = 0;
      uint64_t v56 = *(const std::string::value_type **)(a1 + 3040);
      std::string::size_type v57 = *(void *)(a1 + 3032);
      if (v55 < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a1 + 2240), v56, v57);
      }
      else
      {
        *(void *)(a1 + 2240) = v56;
        *(void *)(a1 + 2248) = v57;
        *(_DWORD *)(a1 + 2256) = *(_DWORD *)(a1 + 3128);
        *(_DWORD *)(a1 + 2259) = *(_DWORD *)(a1 + 3131);
        *(unsigned char *)(a1 + 2263) = v55;
      }
      *(unsigned char *)(a1 + 2264) = 1;
      AMSCore::EncodeHTTPRequestTask::OptionsBuilder::withHeader((uint64_t)v4, (uint64_t)&__p, a1 + 2240);
      if (*(unsigned char *)(a1 + 2264) && *(char *)(a1 + 2263) < 0) {
        operator delete(*(void **)(a1 + 2240));
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      int v58 = 2;
    }
    else
    {
      int v58 = 3;
    }
    *(_DWORD *)(a1 + 1396) = v58;
    AMSCore::ServiceProvider<AMSCore::IDeviceInfo>::getDefault((void *)(a1 + 2984));
    char v64 = 15;
    strcpy((char *)v63, "Accept-Language");
    (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 2984) + 64))(&__p);
    *(std::string *)(a1 + 2272) = __p;
    memset(&__p, 0, sizeof(__p));
    *(unsigned char *)(a1 + 2296) = 1;
    AMSCore::EncodeHTTPRequestTask::OptionsBuilder::withHeader((uint64_t)v4, (uint64_t)v63, a1 + 2272);
    if (*(unsigned char *)(a1 + 2296) && *(char *)(a1 + 2295) < 0) {
      operator delete(*(void **)(a1 + 2272));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v64 & 0x80000000) == 0) {
        goto LABEL_115;
      }
    }
    else if ((v64 & 0x80000000) == 0)
    {
LABEL_115:
      unint64_t v59 = *(AMSCore::UserAgent **)(a1 + 3064);
      char v64 = 10;
      strcpy((char *)v63, "User-Agent");
      AMSCore::UserAgent::create(v59, &__p);
      *(std::string *)(a1 + 2208) = __p;
      memset(&__p, 0, sizeof(__p));
      *(unsigned char *)(a1 + 2232) = 1;
      AMSCore::EncodeHTTPRequestTask::OptionsBuilder::withHeader((uint64_t)v4, (uint64_t)v63, a1 + 2208);
      if (*(unsigned char *)(a1 + 2232) && *(char *)(a1 + 2231) < 0) {
        operator delete(*(void **)(a1 + 2208));
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v64 < 0) {
        operator delete(v63[0]);
      }
      *(unsigned char *)(a1 + 1552) = *(unsigned char *)(a1 + 3143);
      AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v3, (uint64_t)v4);
      AMSCore::EncodeHTTPRequestTask::perform(a1 + 3000, (uint64_t)v3);
    }
    operator delete(v63[0]);
    goto LABEL_115;
  }
  uint64_t v7 = *(void *)(a1 + 3104);
  if (*(unsigned char *)(v7 + 400))
  {
    int64x2_t v8 = (const std::runtime_error *)(v7 + 8);
    char v9 = *(unsigned char *)(v7 + 392);
    if (v9)
    {
      AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v2, (uint64_t)v8);
      int v10 = (void *)(v7 + 376);
      *(void *)(a1 + 832) = *(void *)(v7 + 376);
      char v11 = (void *)(a1 + 840);
      __n128 v12 = (void *)(v7 + 384);
    }
    else
    {
      std::runtime_error::runtime_error((std::runtime_error *)v2, v8);
      *(_OWORD *)(a1 + 480) = *(_OWORD *)(v7 + 24);
      *(void *)(a1 + 464) = &unk_1EDC827D8;
      int v16 = (void *)(v7 + 48);
      uint64_t v17 = *(void *)(v7 + 48);
      uint64_t v18 = a1 + 504;
      *(void *)(a1 + 496) = *(void *)(v7 + 40);
      *(void *)(a1 + 504) = v17;
      uint64_t v19 = *(void *)(v7 + 56);
      *(void *)(a1 + 512) = v19;
      if (v19)
      {
        *(void *)(v17 + 16) = v18;
        *(void *)(v7 + 40) = v16;
        *int v16 = 0;
        *(void *)(v7 + 56) = 0;
      }
      else
      {
        *(void *)(a1 + 496) = v18;
      }
      uint64_t v24 = *(void *)(a1 + 3104);
      uint64_t v25 = *(void *)(v24 + 64);
      int v10 = (void *)(v24 + 64);
      *(void *)(a1 + 520) = v25;
      char v11 = (void *)(a1 + 528);
      __n128 v12 = v10 + 1;
    }
    *char v11 = *v12;
    *int v10 = 0;
    v10[1] = 0;
    *(unsigned char *)(a1 + 848) = v9;
    std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>,void>((std::runtime_error *)(a1 + 24), (std::runtime_error *)v2);
    if (*(unsigned char *)(a1 + 848))
    {
      uint64_t v26 = *(std::__shared_weak_count **)(a1 + 840);
      if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)v2);
      uint64_t v27 = *(void *)(a1 + 3112);
      if (!v27) {
        goto LABEL_23;
      }
    }
    else
    {
      (**(void (***)(AMSCore::Error *))v2)(v2);
      uint64_t v27 = *(void *)(a1 + 3112);
      if (!v27)
      {
LABEL_23:
        int v29 = *(std::__shared_weak_count **)(a1 + 3008);
        if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
        AMSCore::EncodeHTTPRequestTask::Options::~Options(v3);
        std::runtime_error v30 = *(std::__shared_weak_count **)(a1 + 2992);
        if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
        AMSCore::EncodeHTTPRequestTask::Options::~Options(v4);
        int v31 = 3;
        goto LABEL_30;
      }
    }
    if (!atomic_fetch_add((atomic_ullong *volatile)(v27 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      char v28 = *(std::__shared_weak_count **)(a1 + 3112);
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
    goto LABEL_23;
  }
LABEL_125:
  __break(1u);
}

void sub_18DA832AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(unsigned char *)(v26 + 2264) && *(char *)(v26 + 2263) < 0) {
    operator delete(*v29);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  AMSCore::EncodeHTTPRequestTask::Options::~Options(v28);
  if (**(char **)(v26 + 3080) < 0) {
    operator delete(*(void **)(v26 + 2864));
  }
  if (*(char *)(v26 + 2935) < 0) {
    operator delete(*(void **)(v26 + 2912));
  }
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v26 + 2936);
  AMSCore::URLBuilder::~URLBuilder(v27);
  __cxa_begin_catch(a1);
  AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DA8339C()
{
}

void sub_18DA833A8()
{
  std::__expected_base<AMSCore::URLBuilder,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100](v0);
  JUMPOUT(0x18DA83354);
}

void AMSCore::LoadNetworkBagTask::encodeHTTPRequest(char *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 16);
  if (!*(void *)a1)
  {
    uint64_t v7 = (std::__shared_weak_count *)*((void *)a1 + 390);
    goto LABEL_42;
  }
  if (a1[3135])
  {
    uint64_t v3 = *((void *)a1 + 389);
    if (v3 && !atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v4 = (std::__shared_weak_count *)*((void *)a1 + 389);
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    char v5 = (std::__shared_weak_count *)*((void *)a1 + 376);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)a1 + 107);
    uint64_t v6 = (std::__shared_weak_count *)*((void *)a1 + 374);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)a1 + 153);
  }
  else
  {
    uint64_t v8 = *((void *)a1 + 387);
    if (v8 && !atomic_fetch_add((atomic_ullong *volatile)(v8 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      char v9 = (std::__shared_weak_count *)*((void *)a1 + 387);
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    int v10 = (std::__shared_weak_count *)*((void *)a1 + 154);
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    char v11 = (std::__shared_weak_count *)*((void *)a1 + 372);
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    AMSCore::URL::~URL((AMSCore::URL *)(a1 + 1672));
    if (a1[1664])
    {
      *((void *)a1 + 199) = &unk_1EDC827D8;
      __n128 v12 = (std::__shared_weak_count *)*((void *)a1 + 207);
      if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)(a1 + 1624), *((unsigned int **)a1 + 204));
      MEMORY[0x192FA3C30](a1 + 1592);
    }
  }
  if (**((char **)a1 + 385) < 0)
  {
    operator delete(*((void **)a1 + 358));
    if ((a1[2935] & 0x80000000) == 0)
    {
LABEL_30:
      uint64_t v13 = (std::__shared_weak_count *)*((void *)a1 + 368);
      if (!v13) {
        goto LABEL_36;
      }
LABEL_34:
      if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      goto LABEL_36;
    }
  }
  else if ((a1[2935] & 0x80000000) == 0)
  {
    goto LABEL_30;
  }
  operator delete(*((void **)a1 + 364));
  uint64_t v13 = (std::__shared_weak_count *)*((void *)a1 + 368);
  if (v13) {
    goto LABEL_34;
  }
LABEL_36:
  AMSCore::URL::~URL((AMSCore::URL *)(a1 + 1904));
  if (a1[1896])
  {
    *((void *)a1 + 228) = &unk_1EDC827D8;
    int v14 = (std::__shared_weak_count *)*((void *)a1 + 236);
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)(a1 + 1856), *((unsigned int **)a1 + 233));
    MEMORY[0x192FA3C30](a1 + 1824);
  }
  uint64_t v7 = 0;
LABEL_42:
  uint64_t v15 = *((void *)a1 + 384);
  AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::~Promise(v2);
  if (v15 && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)a1 + 384) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    int v16 = (std::__shared_weak_count *)*((void *)a1 + 384);
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v17 = (void **)*((void *)a1 + 381);
  if (v17)
  {
    uint64_t v18 = (void **)*((void *)a1 + 382);
    if (v18 == v17)
    {
      uint64_t v18 = (void **)*((void *)a1 + 381);
    }
    else
    {
      do
      {
        if (*((char *)v18 - 1) < 0)
        {
          operator delete(*(v18 - 3));
          uint64_t v17 = (void **)*((void *)a1 + 381);
        }
        v18 -= 3;
      }
      while (v18 != v17);
    }
    operator delete(v18);
  }
  if (a1[3153] && a1[3154] < 0) {
    operator delete(*((void **)a1 + 380));
  }
  if (a1[3152] < 0)
  {
    operator delete(*((void **)a1 + 378));
    if ((a1[3151] & 0x80000000) == 0) {
      goto LABEL_57;
    }
  }
  else if ((a1[3151] & 0x80000000) == 0)
  {
    goto LABEL_57;
  }
  operator delete(*((void **)a1 + 377));
LABEL_57:
  operator delete(a1);
}

void std::shared_ptr<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_18DA83920(void *a1)
{
  __cxa_begin_catch(a1);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 408), 2uLL)) {
    (*(void (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  __cxa_rethrow();
}

void sub_18DA8394C(_Unwind_Exception *a1)
{
}

AMSCore::Error *std::__optional_move_base<AMSCore::Error,false>::__optional_move_base[abi:fe180100](AMSCore::Error *this, uint64_t a2)
{
  *(unsigned char *)this = 0;
  *((unsigned char *)this + 72) = 0;
  if (*(unsigned char *)(a2 + 72))
  {
    AMSCore::Error::Error((std::runtime_error *)this, (const std::runtime_error *)a2);
    *((unsigned char *)this + 72) = 1;
  }
  return this;
}

void sub_18DA839AC(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 72))
  {
    *(void *)uint64_t v1 = &unk_1EDC827D8;
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 64);
    if (v3)
    {
      if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v1 + 32, *(unsigned int **)(v1 + 40));
    MEMORY[0x192FA3C30](v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *AMSCore::URL::URL(std::string *this, const AMSCore::URL *a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__s.__data_[0] = 0;
  if (*((unsigned char *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v4 = *(_OWORD *)a2;
      this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  this[1].__r_.__value_.__s.__data_[8] = 0;
  this[2].__r_.__value_.__s.__data_[8] = 0;
  if (*((unsigned char *)a2 + 56))
  {
    if (*((char *)a2 + 55) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((void *)a2 + 5));
    }
    else
    {
      long long v5 = *((_OWORD *)a2 + 2);
      this[2].__r_.__value_.__r.__words[0] = *((void *)a2 + 6);
      *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v5;
    }
    this[2].__r_.__value_.__s.__data_[8] = 1;
  }
  this[2].__r_.__value_.__s.__data_[16] = 0;
  this[3].__r_.__value_.__s.__data_[16] = 0;
  if (*((unsigned char *)a2 + 88))
  {
    if (*((char *)a2 + 87) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)a2 + 8), *((void *)a2 + 9));
    }
    else
    {
      long long v6 = *((_OWORD *)a2 + 4);
      this[3].__r_.__value_.__l.__size_ = *((void *)a2 + 10);
      *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = v6;
    }
    this[3].__r_.__value_.__s.__data_[16] = 1;
  }
  LODWORD(this[4].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 24);
  this[4].__r_.__value_.__l.__size_ = (std::string::size_type)&this[4].__r_.__value_.__l.__size_;
  this[4].__r_.__value_.__r.__words[2] = (std::string::size_type)&this[4].__r_.__value_.__l.__size_;
  this[5].__r_.__value_.__r.__words[0] = 0;
  for (unint64_t i = (void *)*((void *)a2 + 14); i != (void *)((char *)a2 + 104); unint64_t i = (void *)i[1])
  {
    uint64_t v8 = std::__list_imp<std::pair<std::string,std::string>>::__create_node[abi:fe180100]<std::pair<std::string,std::string> const&>(0, (uint64_t)(i + 2));
    std::string::size_type size = this[4].__r_.__value_.__l.__size_;
    *(void *)uint64_t v8 = size;
    *((void *)v8 + 1) = (char *)this + 104;
    *(void *)(size + 8) = v8;
    this[4].__r_.__value_.__l.__size_ = (std::string::size_type)v8;
    ++this[5].__r_.__value_.__r.__words[0];
  }
  int v10 = (std::string *)((char *)this + 128);
  if (*((char *)a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)a2 + 16), *((void *)a2 + 17));
  }
  else
  {
    long long v11 = *((_OWORD *)a2 + 8);
    this[6].__r_.__value_.__r.__words[0] = *((void *)a2 + 18);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  return this;
}

void sub_18DA83BCC(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 88) && *(char *)(v1 + 87) < 0) {
    operator delete(*v3);
  }
  if (*(unsigned char *)(v1 + 56) && *(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  if (*(unsigned char *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::URLBuilder::~URLBuilder(AMSCore::URLBuilder *this)
{
  AMSCore::URL::~URL((AMSCore::URLBuilder *)((char *)this + 80));
  if (*((unsigned char *)this + 72))
  {
    *(void *)this = &unk_1EDC827D8;
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 8);
    if (v2)
    {
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this + 32, *((unsigned int **)this + 5));
    MEMORY[0x192FA3C30](this);
  }
}

std::runtime_error *AMSCore::URLBuilder::URLBuilder(std::runtime_error *result, std::runtime_error *a2)
{
  LOBYTE(result->__vftable) = 0;
  LOBYTE(result[4].__imp_.__imp_) = 0;
  if (LOBYTE(a2[4].__imp_.__imp_))
  {
    uint64_t result = std::runtime_error::runtime_error(result, a2);
    result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA448] + 16);
    result[1] = a2[1];
    result->__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    result[2].__vftable = a2[2].__vftable;
    p_unsigned __int8 imp = (std::runtime_error_vtbl *)&a2[2].__imp_;
    unsigned __int8 imp = a2[2].__imp_.__imp_;
    result[2].__imp_.__imp_ = imp;
    long long v5 = (std::runtime_error_vtbl *)&result[2].__imp_;
    long long v6 = a2[3].__vftable;
    result[3].__vftable = v6;
    if (v6)
    {
      *((void *)imp + 2) = v5;
      a2[2].__vftable = p_imp;
      p_imp->~runtime_error = 0;
      a2[3].__vftable = 0;
    }
    else
    {
      result[2].__vftable = v5;
    }
    *(std::runtime_error *)((char *)result + 56) = *(std::runtime_error *)((char *)a2 + 56);
    a2[3].__imp_.__imp_ = 0;
    a2[4].__vftable = 0;
    LOBYTE(result[4].__imp_.__imp_) = 1;
  }
  LOBYTE(result[5].__vftable) = 0;
  LOBYTE(result[6].__imp_.__imp_) = 0;
  if (LOBYTE(a2[6].__imp_.__imp_))
  {
    std::runtime_error v7 = a2[5];
    result[6].__vftable = a2[6].__vftable;
    result[5] = v7;
    a2[5].__imp_.__imp_ = 0;
    a2[6].__vftable = 0;
    a2[5].__vftable = 0;
    LOBYTE(result[6].__imp_.__imp_) = 1;
  }
  LOBYTE(result[7].__vftable) = 0;
  LOBYTE(result[8].__imp_.__imp_) = 0;
  if (LOBYTE(a2[8].__imp_.__imp_))
  {
    std::runtime_error v8 = a2[7];
    result[8].__vftable = a2[8].__vftable;
    result[7] = v8;
    a2[7].__imp_.__imp_ = 0;
    a2[8].__vftable = 0;
    a2[7].__vftable = 0;
    LOBYTE(result[8].__imp_.__imp_) = 1;
  }
  LOBYTE(result[9].__vftable) = 0;
  LOBYTE(result[10].__imp_.__imp_) = 0;
  if (LOBYTE(a2[10].__imp_.__imp_))
  {
    std::runtime_error v9 = a2[9];
    result[10].__vftable = a2[10].__vftable;
    result[9] = v9;
    a2[9].__imp_.__imp_ = 0;
    a2[10].__vftable = 0;
    a2[9].__vftable = 0;
    LOBYTE(result[10].__imp_.__imp_) = 1;
  }
  LODWORD(result[11].__vftable) = a2[11].__vftable;
  result[11].__imp_.__imp_ = (const char *)&result[11].__imp_;
  result[12].__vftable = (std::runtime_error_vtbl *)&result[11].__imp_;
  result[12].__imp_.__imp_ = 0;
  if (result == a2)
  {
    __break(1u);
  }
  else
  {
    int v10 = a2[12].__imp_.__imp_;
    if (v10)
    {
      __n128 v12 = a2[11].__imp_.__imp_;
      long long v11 = a2[12].__vftable;
      uint64_t v13 = v11->~runtime_error;
      *((void *)v13 + 1) = *((void *)v12 + 1);
      **((void **)v12 + 1) = v13;
      int v14 = (char *)result[11].__imp_.__imp_;
      *((void *)v14 + 1) = v11;
      v11->~runtime_error = (void (__cdecl *)(std::runtime_error *__hidden))v14;
      result[11].__imp_.__imp_ = v12;
      *((void *)v12 + 1) = (char *)result + 184;
      result[12].__imp_.__imp_ = v10;
      a2[12].__imp_.__imp_ = 0;
    }
    std::runtime_error v15 = a2[13];
    result[14].__vftable = a2[14].__vftable;
    result[13] = v15;
    a2[13].__imp_.__imp_ = 0;
    a2[14].__vftable = 0;
    a2[13].__vftable = 0;
  }
  return result;
}

AMSCore::Error *AMSCore::URLBuilder::operator=(AMSCore::Error *this, AMSCore::Error *a2)
{
  if (*((unsigned __int8 *)this + 72) == *((unsigned __int8 *)a2 + 72))
  {
    if (*((unsigned char *)this + 72))
    {
      std::runtime_error::operator=((std::runtime_error *)this, (const std::runtime_error *)a2);
      *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
      if (this != a2) {
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,AMSCore::Any>,std::__tree_node<std::__value_type<std::string,AMSCore::Any>,void *> *,long>>((uint64_t)this + 32, *((long long **)a2 + 4), (long long *)((char *)a2 + 40));
      }
      uint64_t v5 = *((void *)a2 + 7);
      uint64_t v4 = *((void *)a2 + 8);
      if (v4) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
      }
      long long v6 = (std::__shared_weak_count *)*((void *)this + 8);
      *((void *)this + 7) = v5;
      *((void *)this + 8) = v4;
      if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else if (*((unsigned char *)this + 72))
  {
    *(void *)this = &unk_1EDC827D8;
    std::runtime_error v7 = (std::__shared_weak_count *)*((void *)this + 8);
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this + 32, *((unsigned int **)this + 5));
    MEMORY[0x192FA3C30](this);
    *((unsigned char *)this + 72) = 0;
  }
  else
  {
    AMSCore::Error::Error((std::runtime_error *)this, (const std::runtime_error *)a2);
    *((unsigned char *)this + 72) = 1;
  }
  std::__optional_storage_base<std::string,false>::__assign_from[abi:fe180100]<std::__optional_copy_assign_base<std::string,false> const&>((uint64_t)this + 80, (std::string::value_type *)a2 + 80);
  std::__optional_storage_base<std::string,false>::__assign_from[abi:fe180100]<std::__optional_copy_assign_base<std::string,false> const&>((uint64_t)this + 112, (std::string::value_type *)a2 + 112);
  std::__optional_storage_base<std::string,false>::__assign_from[abi:fe180100]<std::__optional_copy_assign_base<std::string,false> const&>((uint64_t)this + 144, (std::string::value_type *)a2 + 144);
  __int16 v8 = *((_WORD *)a2 + 88);
  *((unsigned char *)this + 178) = *((unsigned char *)a2 + 178);
  *((_WORD *)this + 88) = v8;
  if (this != a2)
  {
    std::list<std::pair<std::string,std::string>>::__assign_with_sentinel[abi:fe180100]<std::__list_const_iterator<std::pair<std::string,std::string>,void *>,std::__list_const_iterator<std::pair<std::string,std::string>,void *>>((char **)this + 23, *((void *)a2 + 24), (uint64_t)a2 + 184);
    std::runtime_error v9 = (void **)((char *)this + 208);
    char v10 = *((unsigned char *)a2 + 231);
    if (*((char *)this + 231) < 0)
    {
      if (v10 >= 0) {
        __n128 v12 = (char *)a2 + 208;
      }
      else {
        __n128 v12 = (char *)*((void *)a2 + 26);
      }
      if (v10 >= 0) {
        size_t v13 = *((unsigned __int8 *)a2 + 231);
      }
      else {
        size_t v13 = *((void *)a2 + 27);
      }
      std::string::__assign_no_alias<false>(v9, v12, v13);
    }
    else if ((*((unsigned char *)a2 + 231) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v9, *((void **)a2 + 26), *((void *)a2 + 27));
    }
    else
    {
      long long v11 = *((_OWORD *)a2 + 13);
      *((void *)this + 28) = *((void *)a2 + 28);
      *(_OWORD *)std::runtime_error v9 = v11;
    }
  }
  return this;
}

void std::__expected_base<AMSCore::URLBuilder,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 232))
  {
    AMSCore::URL::~URL((AMSCore::URL *)(a1 + 80));
    if (*(unsigned char *)(a1 + 72))
    {
      *(void *)a1 = &unk_1EDC827D8;
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
      if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 32, *(unsigned int **)(a1 + 40));
      JUMPOUT(0x192FA3C30);
    }
  }
  else
  {
    uint64_t v3 = **(void (***)(void))a1;
    v3();
  }
}

AMSCore::EncodeHTTPRequestTask::Options *std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>(AMSCore::EncodeHTTPRequestTask::Options *this, std::runtime_error *a2)
{
  if (*((unsigned char *)this + 392))
  {
    if (*((unsigned char *)this + 384))
    {
      uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 47);
      if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)this);
    }
    else
    {
      (**(void (***)(AMSCore::EncodeHTTPRequestTask::Options *))this)(this);
    }
    *((unsigned char *)this + 392) = 0;
  }
  std::runtime_error::runtime_error((std::runtime_error *)this, a2);
  *(void *)this = MEMORY[0x1E4FBA448] + 16;
  *((std::runtime_error *)this + 1) = a2[1];
  *(void *)this = &unk_1EDC827D8;
  *((void *)this + 4) = a2[2].__vftable;
  p_unsigned __int8 imp = (std::runtime_error_vtbl *)&a2[2].__imp_;
  unsigned __int8 imp = a2[2].__imp_.__imp_;
  *((void *)this + 5) = imp;
  std::runtime_error v7 = (char *)this + 40;
  __int16 v8 = a2[3].__vftable;
  *((void *)this + 6) = v8;
  if (v8)
  {
    *((void *)imp + 2) = v7;
    a2[2].__vftable = p_imp;
    p_imp->~runtime_error = 0;
    a2[3].__vftable = 0;
  }
  else
  {
    *((void *)this + 4) = v7;
  }
  *(std::runtime_error *)((char *)this + 56) = *(std::runtime_error *)((char *)a2 + 56);
  a2[3].__imp_.__imp_ = 0;
  a2[4].__vftable = 0;
  *((unsigned char *)this + 384) = 0;
  *((unsigned char *)this + 392) = 1;
  return this;
}

uint64_t AMSCore::EncodeHTTPRequestTask::Options::Options(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  __int16 v4 = *(_WORD *)(a2 + 16);
  *(unsigned char *)(result + 18) = *(unsigned char *)(a2 + 18);
  *(_WORD *)(result + 16) = v4;
  *(_OWORD *)(result + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)(result + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(unsigned char *)(result + 56) = 0;
  *(_DWORD *)(result + 80) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 80);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *))off_1EDCA5520[v5])(&v25);
    *(_DWORD *)(v3 + 80) = v5;
    uint64_t v6 = *(unsigned int *)(a2 + 80);
    if (v6 != -1)
    {
      if (!v6) {
        goto LABEL_6;
      }
      uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EDCA54D0[v6])(&v26, a2 + 56);
    }
  }
  *(_DWORD *)(a2 + 80) = 0;
LABEL_6:
  char v7 = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(v3 + 96) = 0;
  *(unsigned char *)(v3 + 88) = v7;
  *(unsigned char *)(v3 + 120) = 0;
  if (*(unsigned char *)(a2 + 120))
  {
    long long v8 = *(_OWORD *)(a2 + 96);
    *(void *)(v3 + 112) = *(void *)(a2 + 112);
    *(_OWORD *)(v3 + 96) = v8;
    *(void *)(a2 + 104) = 0;
    *(void *)(a2 + 112) = 0;
    *(void *)(a2 + 96) = 0;
    *(unsigned char *)(v3 + 120) = 1;
  }
  uint64_t v9 = *(void *)(a2 + 128);
  *(void *)(a2 + 128) = 0;
  *(void *)(v3 + 128) = v9;
  *(void *)(v3 + 136) = *(void *)(a2 + 136);
  *(void *)(a2 + 136) = 0;
  uint64_t v10 = *(void *)(a2 + 144);
  *(void *)(v3 + 144) = v10;
  uint64_t v11 = *(void *)(a2 + 152);
  *(void *)(v3 + 152) = v11;
  *(_DWORD *)(v3 + 160) = *(_DWORD *)(a2 + 160);
  if (v11)
  {
    unint64_t v12 = *(void *)(v10 + 8);
    unint64_t v13 = *(void *)(v3 + 136);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13) {
        v12 %= v13;
      }
    }
    else
    {
      v12 &= v13 - 1;
    }
    *(void *)(v9 + 8 * v12) = v3 + 144;
    *(void *)(a2 + 144) = 0;
    *(void *)(a2 + 152) = 0;
  }
  uint64_t v14 = *(void *)(a2 + 168);
  *(unsigned char *)(v3 + 176) = 0;
  *(void *)(v3 + 168) = v14;
  *(unsigned char *)(v3 + 200) = 0;
  if (*(unsigned char *)(a2 + 200))
  {
    long long v15 = *(_OWORD *)(a2 + 176);
    *(void *)(v3 + 192) = *(void *)(a2 + 192);
    *(_OWORD *)(v3 + 176) = v15;
    *(void *)(a2 + 184) = 0;
    *(void *)(a2 + 192) = 0;
    *(void *)(a2 + 176) = 0;
    *(unsigned char *)(v3 + 200) = 1;
  }
  *(unsigned char *)(v3 + 208) = 0;
  *(unsigned char *)(v3 + 232) = 0;
  if (*(unsigned char *)(a2 + 232))
  {
    long long v16 = *(_OWORD *)(a2 + 208);
    *(void *)(v3 + 224) = *(void *)(a2 + 224);
    *(_OWORD *)(v3 + 208) = v16;
    *(void *)(a2 + 216) = 0;
    *(void *)(a2 + 224) = 0;
    *(void *)(a2 + 208) = 0;
    *(unsigned char *)(v3 + 232) = 1;
  }
  *(unsigned char *)(v3 + 240) = 0;
  *(unsigned char *)(v3 + 264) = 0;
  if (*(unsigned char *)(a2 + 264))
  {
    long long v17 = *(_OWORD *)(a2 + 240);
    *(void *)(v3 + 256) = *(void *)(a2 + 256);
    *(_OWORD *)(v3 + 240) = v17;
    *(void *)(a2 + 248) = 0;
    *(void *)(a2 + 256) = 0;
    *(void *)(a2 + 240) = 0;
    *(unsigned char *)(v3 + 264) = 1;
  }
  *(_DWORD *)(v3 + 272) = *(_DWORD *)(a2 + 272);
  *(void *)(v3 + 280) = v3 + 280;
  *(void *)(v3 + 288) = v3 + 280;
  *(void *)(v3 + 296) = 0;
  if (v3 == a2)
  {
    __break(1u);
  }
  else
  {
    uint64_t v18 = *(void *)(a2 + 296);
    if (v18)
    {
      uint64_t v20 = *(void *)(a2 + 280);
      uint64_t v19 = *(uint64_t **)(a2 + 288);
      uint64_t v21 = *v19;
      *(void *)(v21 + 8) = *(void *)(v20 + 8);
      **(void **)(v20 + 8) = v21;
      uint64_t v22 = *(void *)(v3 + 280);
      *(void *)(v22 + 8) = v19;
      *uint64_t v19 = v22;
      *(void *)(v3 + 280) = v20;
      *(void *)(v20 + 8) = v3 + 280;
      *(void *)(v3 + 296) = v18;
      *(void *)(a2 + 296) = 0;
    }
    long long v23 = *(_OWORD *)(a2 + 304);
    *(void *)(v3 + 320) = *(void *)(a2 + 320);
    *(_OWORD *)(v3 + 304) = v23;
    *(void *)(a2 + 312) = 0;
    *(void *)(a2 + 320) = 0;
    *(void *)(a2 + 304) = 0;
    *(unsigned char *)(v3 + 328) = *(unsigned char *)(a2 + 328);
    *(unsigned char *)(v3 + 336) = 0;
    *(unsigned char *)(v3 + 360) = 0;
    if (*(unsigned char *)(a2 + 360))
    {
      long long v24 = *(_OWORD *)(a2 + 336);
      *(void *)(v3 + 352) = *(void *)(a2 + 352);
      *(_OWORD *)(v3 + 336) = v24;
      *(void *)(a2 + 344) = 0;
      *(void *)(a2 + 352) = 0;
      *(void *)(a2 + 336) = 0;
      *(unsigned char *)(v3 + 360) = 1;
    }
    return v3;
  }
  return result;
}

std::runtime_error *std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>,void>(std::runtime_error *this, std::runtime_error *a2)
{
  if (LOBYTE(this[24].__imp_.__imp_))
  {
    if (LOBYTE(this[24].__vftable))
    {
      unsigned __int8 imp = (std::__shared_weak_count *)this[23].__imp_.__imp_;
      if (imp && !atomic_fetch_add(&imp->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
        std::__shared_weak_count::__release_weak(imp);
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&this->__vftable);
    }
    else
    {
      ((void (*)(std::runtime_error *))this->~runtime_error)(this);
    }
    LOBYTE(this[24].__imp_.__imp_) = 0;
  }
  char v5 = (char)a2[24].__vftable;
  if (v5)
  {
    AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)this, (uint64_t)a2);
    uint64_t v6 = a2[23].__vftable;
    p_unsigned __int8 imp = &a2[23].__imp_;
    long long v8 = a2 + 23;
    this[23].__vftable = v6;
    uint64_t v9 = &this[23].__imp_;
  }
  else
  {
    std::runtime_error::runtime_error(this, a2);
    this[1] = a2[1];
    this->__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v10 = (std::runtime_error_vtbl *)&a2[2].__imp_;
    uint64_t v11 = a2[2].__imp_.__imp_;
    this[2].__vftable = a2[2].__vftable;
    this[2].__imp_.__imp_ = v11;
    unint64_t v12 = &this[2].__imp_;
    unint64_t v13 = a2[3].__vftable;
    this[3].__vftable = v13;
    if (v13)
    {
      *((void *)v11 + 2) = v12;
      a2[2].__vftable = v10;
      v10->~runtime_error = 0;
      a2[3].__vftable = 0;
    }
    else
    {
      this[2].__vftable = (std::runtime_error_vtbl *)v12;
    }
    uint64_t v14 = a2[3].__imp_.__imp_;
    long long v8 = (std::runtime_error *)((char *)a2 + 56);
    this[3].__imp_.__imp_ = v14;
    uint64_t v9 = (std::__libcpp_refstring *)&this[4];
    p_unsigned __int8 imp = &v8->__imp_;
  }
  v9->__imp_ = p_imp->__imp_;
  v8->__vftable = 0;
  v8->__imp_.__imp_ = 0;
  LOBYTE(this[24].__vftable) = v5;
  LOBYTE(this[24].__imp_.__imp_) = 1;
  return this;
}

void AMSCore::EncodeHTTPRequestTask::Options::~Options(void **this)
{
  if (*((unsigned char *)this + 360) && *((char *)this + 359) < 0) {
    operator delete(this[42]);
  }
  AMSCore::URL::~URL((AMSCore::URL *)(this + 22));
  uint64_t v2 = (void **)this[18];
  if (v2)
  {
    do
    {
      long long v8 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0) {
LABEL_27:
        }
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_27;
      }
      operator delete(v2);
      uint64_t v2 = v8;
    }
    while (v8);
  }
  uint64_t v3 = this[16];
  this[16] = 0;
  if (v3) {
    operator delete(v3);
  }
  if (*((unsigned char *)this + 120) && *((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  uint64_t v4 = *((unsigned int *)this + 20);
  if (v4 != -1) {
    ((void (*)(char *, void **))off_1EDCA52C0[v4])(&v9, this + 7);
  }
  *((_DWORD *)this + 20) = -1;
  char v5 = (std::__shared_weak_count *)this[6];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)this[4];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  char v7 = (std::__shared_weak_count *)this[1];
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::unhandled_exception()
{
  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

uint64_t sub_18DA849F0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v36, (uint64_t)v33);
  std::optional<std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>(v29, v36);
  v36[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::runtime_error v30 = v38;
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v37, v37[1]);
  MEMORY[0x192FA3C30](v36);
  v33[0] = &unk_1EDC827D8;
  int v31 = v35;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v34, v34[1]);
  return MEMORY[0x192FA3C30](v33);
}

uint64_t AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::Awaiter::await_suspend(uint64_t result)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void (**)(void))atomic_exchange((atomic_ullong *volatile)(*(void *)result + 408), 1uLL);
  if (v1)
  {
    uint64_t v2 = (uint64_t *)result;
    if (v1 == (void (**)(void))2) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result - 8))(*(void *)result - 16);
    }
    uint64_t v3 = *(void *)result;
    uint64_t result = *(void *)(*(void *)result + 440);
    if (result)
    {
      if (result == v3 + 416)
      {
        char v25 = v24;
        uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 24))(result, v24);
      }
      else
      {
        char v25 = (void *)result;
        *(void *)(v3 + 440) = 0;
      }
    }
    else
    {
      char v25 = 0;
    }
    if (v25)
    {
      uint64_t v4 = *v2;
      if (!*(unsigned char *)(v4 + 400))
      {
        __break(1u);
        return result;
      }
      char v5 = (const std::runtime_error *)(v4 + 8);
      char v6 = *(unsigned char *)(v4 + 392);
      if (v6)
      {
        AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v16, (uint64_t)v5);
        uint64_t v7 = *(void *)(v4 + 376);
        long long v8 = (std::__shared_weak_count **)(v4 + 384);
        char v9 = (void *)(v4 + 376);
        v21[38] = v7;
        uint64_t v10 = &v22;
      }
      else
      {
        std::runtime_error::runtime_error(v16, v5);
        uint64_t v11 = (void *)(v4 + 48);
        uint64_t v12 = *(void *)(v4 + 48);
        v16[1] = *(std::runtime_error *)(v4 + 24);
        unint64_t v13 = *(uint64_t **)(v4 + 40);
        v16[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        long long v17 = v13;
        uint64_t v18 = v12;
        if (*(void *)(v4 + 56))
        {
          *(void *)(v12 + 16) = &v18;
          *(void *)(v4 + 40) = v11;
          *uint64_t v11 = 0;
          *(void *)(v4 + 56) = 0;
        }
        else
        {
          long long v17 = &v18;
        }
        uint64_t v14 = *(void *)(v4 + 64);
        char v9 = (void *)(v4 + 64);
        uint64_t v20 = v14;
        uint64_t v10 = (std::__shared_weak_count **)v21;
        long long v8 = (std::__shared_weak_count **)(v9 + 1);
      }
      *uint64_t v10 = *v8;
      *char v9 = 0;
      v9[1] = 0;
      char v23 = v6;
      if (!v25) {
        std::__throw_bad_function_call[abi:fe180100]();
      }
      (*(void (**)(void *, std::runtime_error *))(*v25 + 48))(v25, v16);
      if (v23)
      {
        long long v15 = v22;
        if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v16[0].__vftable);
      }
      else
      {
        ((void (*)(std::runtime_error *))v16[0].~runtime_error)(v16);
      }
    }
    else
    {
      (*v1)(v1);
    }
    uint64_t result = (uint64_t)v25;
    if (v25 == v24)
    {
      return (*(uint64_t (**)(void *))(v24[0] + 32))(v24);
    }
    else if (v25)
    {
      return (*(uint64_t (**)(void *))(*v25 + 40))(v25);
    }
  }
  return result;
}

void sub_18DA84E08(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::~Promise(uint64_t a1)
{
  uint64_t v2 = a1 + 416;
  uint64_t v3 = *(void *)(a1 + 440);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    if (!*(unsigned char *)(a1 + 400)) {
      goto LABEL_13;
    }
    goto LABEL_7;
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  if (*(unsigned char *)(a1 + 400))
  {
LABEL_7:
    if (*(unsigned char *)(a1 + 392))
    {
      uint64_t v4 = *(std::__shared_weak_count **)(a1 + 384);
      if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)(a1 + 8));
    }
    else
    {
      (**(void (***)(uint64_t))(a1 + 8))(a1 + 8);
    }
  }
LABEL_13:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  return a1;
}

void std::__optional_storage_base<std::string,false>::__assign_from[abi:fe180100]<std::__optional_copy_assign_base<std::string,false> const&>(uint64_t a1, std::string::value_type *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[24])
  {
    if ((std::string::value_type *)a1 != a2 && *(unsigned char *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0)
      {
        size_t v5 = *((void *)a2 + 1);
        if (a2[23] >= 0)
        {
          size_t v6 = a2[23];
        }
        else
        {
          a2 = *(std::string::value_type **)a2;
          size_t v6 = v5;
        }
        std::string::__assign_no_alias<false>((void **)a1, a2, v6);
      }
      else if (a2[23] < 0)
      {
        size_t v7 = *((void *)a2 + 1);
        long long v8 = *(std::string::value_type **)a2;
        std::string::__assign_no_alias<true>((void *)a1, v8, v7);
      }
      else
      {
        long long v3 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = *((void *)a2 + 2);
        *(_OWORD *)a1 = v3;
      }
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    if (a2[23] < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a1, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v4 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(_OWORD *)a1 = v4;
    }
    *(unsigned char *)(a1 + 24) = 1;
  }
}

void std::list<std::pair<std::string,std::string>>::__assign_with_sentinel[abi:fe180100]<std::__list_const_iterator<std::pair<std::string,std::string>,void *>,std::__list_const_iterator<std::pair<std::string,std::string>,void *>>(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  size_t v6 = a1[1];
  if (a2 != a3 && v6 != (char *)a1)
  {
    do
    {
      if (v6 != (char *)v4)
      {
        unint64_t v13 = (void **)(v6 + 16);
        char v14 = *(unsigned char *)(v4 + 39);
        if (v6[39] < 0)
        {
          if (v14 >= 0) {
            long long v16 = (void *)(v4 + 16);
          }
          else {
            long long v16 = *(void **)(v4 + 16);
          }
          if (v14 >= 0) {
            size_t v17 = *(unsigned __int8 *)(v4 + 39);
          }
          else {
            size_t v17 = *(void *)(v4 + 24);
          }
          std::string::__assign_no_alias<false>(v13, v16, v17);
        }
        else if ((*(unsigned char *)(v4 + 39) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v13, *(void **)(v4 + 16), *(void *)(v4 + 24));
        }
        else
        {
          long long v15 = *(_OWORD *)(v4 + 16);
          *((void *)v6 + 4) = *(void *)(v4 + 32);
          *(_OWORD *)unint64_t v13 = v15;
        }
        uint64_t v18 = (void **)(v6 + 40);
        char v19 = *(unsigned char *)(v4 + 63);
        if (v6[63] < 0)
        {
          if (v19 >= 0) {
            uint64_t v10 = (void *)(v4 + 40);
          }
          else {
            uint64_t v10 = *(void **)(v4 + 40);
          }
          if (v19 >= 0) {
            size_t v11 = *(unsigned __int8 *)(v4 + 63);
          }
          else {
            size_t v11 = *(void *)(v4 + 48);
          }
          std::string::__assign_no_alias<false>(v18, v10, v11);
        }
        else if ((*(unsigned char *)(v4 + 63) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v18, *(void **)(v4 + 40), *(void *)(v4 + 48));
        }
        else
        {
          long long v20 = *(_OWORD *)(v4 + 40);
          *((void *)v6 + 7) = *(void *)(v4 + 56);
          *(_OWORD *)uint64_t v18 = v20;
        }
      }
      uint64_t v4 = *(void *)(v4 + 8);
      size_t v6 = (char *)*((void *)v6 + 1);
    }
    while (v4 != a3 && v6 != (char *)a1);
  }
  if (v6 != (char *)a1)
  {
    size_t v7 = *a1;
    uint64_t v8 = *(void *)v6;
    *(void *)(v8 + 8) = *((void *)*a1 + 1);
    **((void **)v7 + 1) = v8;
    while (1)
    {
      char v9 = (char **)*((void *)v6 + 1);
      --a1[2];
      if (v6[63] < 0)
      {
        operator delete(*((void **)v6 + 5));
        if (v6[39] < 0) {
LABEL_10:
        }
          operator delete(*((void **)v6 + 2));
      }
      else if (v6[39] < 0)
      {
        goto LABEL_10;
      }
      operator delete(v6);
      size_t v6 = (char *)v9;
      if (v9 == a1) {
        return;
      }
    }
  }
  if (v4 != a3)
  {
    uint64_t v21 = std::__list_imp<std::pair<std::string,std::string>>::__create_node[abi:fe180100]<std::pair<std::string,std::string> const&>(0, v4 + 16);
    uint64_t v22 = v21;
    uint64_t v23 = *(void *)(v4 + 8);
    uint64_t v24 = 1;
    if (v23 != a3)
    {
      uint64_t v25 = (uint64_t)v21;
      do
      {
        uint64_t v21 = std::__list_imp<std::pair<std::string,std::string>>::__create_node[abi:fe180100]<std::pair<std::string,std::string> const&>(v25, v23 + 16);
        *(void *)(v25 + 8) = v21;
        ++v24;
        uint64_t v23 = *(void *)(v23 + 8);
        uint64_t v25 = (uint64_t)v21;
      }
      while (v23 != a3);
    }
    uint64_t v26 = *a1;
    *((void *)v26 + 1) = v22;
    *(void *)uint64_t v22 = v26;
    *a1 = v21;
    *((void *)v21 + 1) = a1;
    a1[2] += v24;
  }
}

void sub_18DA85274(void *a1)
{
  __cxa_begin_catch(a1);
  while (1)
  {
    uint64_t v2 = (void **)*v1;
    if (*((char *)v1 + 63) < 0)
    {
      operator delete(v1[5]);
      if (*((char *)v1 + 39) < 0) {
LABEL_7:
      }
        operator delete(v1[2]);
    }
    else if (*((char *)v1 + 39) < 0)
    {
      goto LABEL_7;
    }
    operator delete(v1);
    uint64_t v1 = v2;
    if (!v2) {
      __cxa_rethrow();
    }
  }
}

void sub_18DA852C8(_Unwind_Exception *a1)
{
}

char *std::__list_imp<std::pair<std::string,std::string>>::__create_node[abi:fe180100]<std::pair<std::string,std::string> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (char *)operator new(0x40uLL);
  size_t v5 = v4;
  *(void *)uint64_t v4 = a1;
  *((void *)v4 + 1) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v4 + 16), *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *((_OWORD *)v4 + 1) = *(_OWORD *)a2;
    *((void *)v4 + 4) = *(void *)(a2 + 16);
  }
  size_t v6 = (std::string *)(v5 + 40);
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 24);
    *((void *)v5 + 7) = *(void *)(a2 + 40);
  }
  return v5;
}

void sub_18DA85374(_Unwind_Exception *a1)
{
  if (v1[39] < 0) {
    operator delete(*v2);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::LoadNetworkBagTask::anonymous namespace'::addCookieToUrl(uint64_t result)
{
  unint64_t v1 = result;
  uint64_t v2 = result + 600;
  long long v3 = (const std::runtime_error *)(result + 544);
  uint64_t v4 = result + 16;
  if (*(unsigned char *)(result + 840)) {
    goto LABEL_2;
  }
  uint64_t v9 = *(void *)(result + 808);
  if (!*(unsigned char *)(v9 + 88)) {
    goto LABEL_115;
  }
  uint64_t v10 = (const std::runtime_error *)(v9 + 8);
  char v11 = *(unsigned char *)(v9 + 80);
  if (v11)
  {
    *(void *)(result + 544) = *(void *)(v9 + 8);
    uint64_t v12 = (const char **)(result + 552);
    p_unsigned __int8 imp = (std::__libcpp_refstring *)(v9 + 16);
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(result + 544), v10);
    *(_OWORD *)(v1 + 560) = *(_OWORD *)(v9 + 24);
    *(void *)(v1 + 544) = &unk_1EDC827D8;
    uint64_t v18 = (void *)(v9 + 48);
    uint64_t v19 = *(void *)(v9 + 48);
    *(void *)(v1 + 576) = *(void *)(v9 + 40);
    unint64_t v20 = v1 + 584;
    *(void *)(v1 + 584) = v19;
    uint64_t v21 = *(void *)(v9 + 56);
    *(void *)(v1 + 592) = v21;
    if (v21)
    {
      *(void *)(v19 + 16) = v20;
      *(void *)(v9 + 40) = v18;
      *uint64_t v18 = 0;
      *(void *)(v9 + 56) = 0;
    }
    else
    {
      *(void *)(v1 + 576) = v20;
    }
    int v55 = *(const std::runtime_error **)(v1 + 808);
    uint64_t v56 = v55[4].__vftable;
    uint64_t v10 = v55 + 4;
    *(void *)(v1 + 600) = v56;
    uint64_t v12 = (const char **)(v1 + 608);
    p_unsigned __int8 imp = &v10->__imp_;
  }
  *uint64_t v12 = p_imp->__imp_;
  v10->__vftable = 0;
  v10->__imp_.__imp_ = 0;
  *(unsigned char *)(v1 + 616) = v11;
  uint64_t v57 = *(void *)(v1 + 816);
  if (v57 && !atomic_fetch_add((atomic_ullong *volatile)(v57 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    int v58 = *(std::__shared_weak_count **)(v1 + 816);
    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
    std::__shared_weak_count::__release_weak(v58);
  }
  unint64_t v59 = *(std::__shared_weak_count **)(v1 + 632);
  if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
    std::__shared_weak_count::__release_weak(v59);
  }
  int v60 = *(std::__shared_weak_count **)(v1 + 776);
  if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  long long v61 = *(std::__shared_weak_count **)(v1 + 760);
  if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
    std::__shared_weak_count::__release_weak(v61);
    if (*(unsigned char *)(v1 + 616)) {
      goto LABEL_92;
    }
LABEL_96:
    std::runtime_error::runtime_error(&v81, v3);
    long long v82 = *(_OWORD *)(v1 + 560);
    unint64_t v63 = *(unsigned int ***)(v1 + 576);
    v81.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v64 = *(void *)(v1 + 584);
    uint64_t v65 = *(void *)(v1 + 592);
    uint64_t v83 = v63;
    uint64_t v84 = (unsigned int *)v64;
    uint64_t v85 = v65;
    if (v65)
    {
      *(void *)(v64 + 16) = &v84;
      *(void *)(v1 + 576) = v1 + 584;
      *(void *)(v1 + 584) = 0;
      *(void *)(v1 + 592) = 0;
    }
    else
    {
      uint64_t v83 = &v84;
    }
    long long v86 = *(_OWORD *)v2;
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    char v87 = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v88, (uint64_t)&v81);
    if (*(unsigned char *)(v1 + 264))
    {
      std::__expected_base<AMSCore::URLBuilder,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100](v1 + 24);
      *(unsigned char *)(v1 + 264) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(v1 + 24), &v88);
    long long v66 = v89;
    uint64_t v68 = v90;
    uint64_t v67 = v91;
    *(void *)(v1 + 64) = v91;
    unint64_t v69 = v1 + 64;
    *(_OWORD *)(v1 + 40) = v66;
    *(void *)(v1 + 24) = &unk_1EDC827D8;
    uint64_t v70 = v92;
    *(void *)(v1 + 56) = v68;
    *(void *)(v1 + 72) = v70;
    if (v70)
    {
      *(void *)(v67 + 16) = v69;
      long long v90 = &v91;
      uint64_t v91 = 0;
      uint64_t v92 = 0;
      uint64_t v67 = 0;
    }
    else
    {
      *(void *)(v1 + 56) = v69;
    }
    *(_OWORD *)(v1 + 80) = v93;
    long long v93 = 0uLL;
    *(unsigned char *)(v1 + 256) = 0;
    *(unsigned char *)(v1 + 264) = 1;
    v88.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v90, (unsigned int *)v67);
    MEMORY[0x192FA3C30](&v88);
    if (v87)
    {
      v81.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      size_t v71 = (std::__shared_weak_count *)*((void *)&v86 + 1);
      if (*((void *)&v86 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v86 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v83, v84);
      MEMORY[0x192FA3C30](&v81);
    }
    goto LABEL_109;
  }
  if (!*(unsigned char *)(v1 + 616)) {
    goto LABEL_96;
  }
LABEL_92:
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 544) + 40))(*(void *)(v1 + 544));
  long long v62 = *(_OWORD *)(v1 + 752);
  *(_OWORD *)(v2 + 224) = v62;
  *(void *)(v1 + 752) = 0;
  *(void *)(v1 + 760) = 0;
  if (!atomic_load_explicit((atomic_ullong *volatile)(v62 + 96), memory_order_acquire))
  {
    *(unsigned char *)(v2 + 240) = 1;
    if (!atomic_exchange((atomic_ullong *volatile)(*(void *)(v1 + 824) + 96), v1)) {
      return result;
    }
  }
LABEL_2:
  uint64_t v5 = *(void *)(v1 + 824);
  if (!*(unsigned char *)(v5 + 88))
  {
LABEL_115:
    __break(1u);
    return result;
  }
  size_t v6 = (void **)(v1 + 624);
  size_t v7 = (const std::runtime_error *)(v5 + 8);
  char v8 = *(unsigned char *)(v5 + 80);
  if (v8)
  {
    *(_OWORD *)(v1 + 624) = *(_OWORD *)(v5 + 8);
    *(void *)(v1 + 640) = *(void *)(v5 + 24);
    *(void *)(v5 + 16) = 0;
    *(void *)(v5 + 24) = 0;
    v7->__vftable = 0;
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(v1 + 624), v7);
    *(_OWORD *)(v1 + 640) = *(_OWORD *)(v5 + 24);
    *(void *)(v1 + 624) = &unk_1EDC827D8;
    char v14 = (void *)(v5 + 48);
    uint64_t v15 = *(void *)(v5 + 48);
    *(void *)(v1 + 656) = *(void *)(v5 + 40);
    unint64_t v16 = v1 + 664;
    *(void *)(v1 + 664) = v15;
    uint64_t v17 = *(void *)(v5 + 56);
    *(void *)(v1 + 672) = v17;
    if (v17)
    {
      *(void *)(v15 + 16) = v16;
      *(void *)(v5 + 40) = v14;
      *char v14 = 0;
      *(void *)(v5 + 56) = 0;
    }
    else
    {
      *(void *)(v1 + 656) = v16;
    }
    uint64_t v22 = *(void *)(v1 + 824);
    *(_OWORD *)(v2 + 80) = *(_OWORD *)(v22 + 64);
    *(void *)(v22 + 64) = 0;
    *(void *)(v22 + 72) = 0;
  }
  *(unsigned char *)(v1 + 696) = v8;
  uint64_t v23 = *(void *)(v1 + 832);
  if (v23 && !atomic_fetch_add((atomic_ullong *volatile)(v23 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v24 = *(std::__shared_weak_count **)(v1 + 832);
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v1 + 760);
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    if (*(unsigned char *)(v1 + 696)) {
      goto LABEL_20;
    }
  }
  else if (*(unsigned char *)(v1 + 696))
  {
LABEL_20:
    long long v73 = (void **)(v1 + 624);
    uint64_t v74 = v4;
    int64_t v75 = v3;
    uint64_t v77 = (std::runtime_error *)(v1 + 312);
    uint64_t v26 = *(uint64_t **)(v1 + 624);
    int64_t v79 = *(uint64_t **)(v1 + 632);
    if (v26 != v79)
    {
      long long v80 = (std::string *)(v1 + 704);
      unint64_t v76 = (std::string *)(v1 + 728);
      uint64_t v27 = *(void *)(v1 + 784) + 24 * *(void *)(v1 + 792);
      unint64_t v78 = v1;
      do
      {
        uint64_t v28 = *v26 + 48;
        int v29 = *(const std::string::value_type **)v28;
        int v30 = *(char *)(*v26 + 71);
        std::string::size_type v31 = *(void *)(*v26 + 56);
        if (v30 >= 0) {
          uint64_t v32 = *(unsigned __int8 *)(*v26 + 71);
        }
        else {
          uint64_t v32 = *(void *)(*v26 + 56);
        }
        unint64_t v33 = v1;
        if (v30 >= 0) {
          uint64_t v34 = (unsigned __int8 *)(*v26 + 48);
        }
        else {
          uint64_t v34 = *(unsigned __int8 **)(*v26 + 48);
        }
        uint64_t v35 = *(void *)(v33 + 784);
        uint64_t v36 = v35;
        do
        {
          uint64_t v37 = *(unsigned __int8 *)(v36 + 23);
          if ((v37 & 0x80u) == 0) {
            uint64_t v38 = *(unsigned __int8 *)(v36 + 23);
          }
          else {
            uint64_t v38 = *(void *)(v36 + 8);
          }
          if (v38 == v32)
          {
            if ((v37 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v36, v34, *(void *)(v36 + 8))) {
                goto LABEL_41;
              }
            }
            else
            {
              if (!*(unsigned char *)(v36 + 23)) {
                goto LABEL_41;
              }
              uint64_t v39 = 0;
              while (*(unsigned __int8 *)(v36 + v39) == v34[v39])
              {
                if (v37 == ++v39) {
                  goto LABEL_41;
                }
              }
            }
          }
          v36 += 24;
        }
        while (v36 != v27);
        uint64_t v36 = v27;
LABEL_41:
        unint64_t v1 = v78;
        if (0xAAAAAAAAAAAAAAABLL * ((v36 - v35) >> 3) == *(void *)(v78 + 792)) {
          goto LABEL_22;
        }
        if (v30 < 0)
        {
          std::string::__init_copy_ctor_external(v80, v29, v31);
        }
        else
        {
          long long v40 = *(_OWORD *)v28;
          v80->__r_.__value_.__r.__words[2] = *(void *)(v28 + 16);
          *(_OWORD *)&v80->__r_.__value_.__l.__data_ = v40;
        }
        uint64_t v41 = *v26;
        if (*(char *)(*v26 + 119) < 0)
        {
          std::string::__init_copy_ctor_external(v76, *(const std::string::value_type **)(v41 + 96), *(void *)(v41 + 104));
        }
        else
        {
          long long v42 = *(_OWORD *)(v41 + 96);
          v76->__r_.__value_.__r.__words[2] = *(void *)(v41 + 112);
          *(_OWORD *)&v76->__r_.__value_.__l.__data_ = v42;
        }
        AMSCore::URLBuilder::withQueryParameter((uint64_t)v77, (uint64_t)v80, (uint64_t)v76);
        if (*(char *)(v78 + 751) < 0)
        {
          operator delete(v76->__r_.__value_.__l.__data_);
          if (*(char *)(v78 + 727) < 0) {
LABEL_52:
          }
            operator delete(v80->__r_.__value_.__l.__data_);
        }
        else if (*(char *)(v78 + 727) < 0)
        {
          goto LABEL_52;
        }
LABEL_22:
        ++v26;
      }
      while (v26 != v79);
    }
    uint64_t v4 = v74;
    long long v3 = v75;
    if (*(unsigned char *)(v1 + 264))
    {
      std::__expected_base<AMSCore::URLBuilder,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100](v1 + 24);
      *(unsigned char *)(v1 + 264) = 0;
    }
    AMSCore::URLBuilder::URLBuilder((std::runtime_error *)(v1 + 24), v77);
    *(unsigned char *)(v1 + 256) = 1;
    *(unsigned char *)(v1 + 264) = 1;
    size_t v6 = v73;
    goto LABEL_71;
  }
  std::runtime_error::runtime_error(&v81, (const std::runtime_error *)(v1 + 624));
  long long v82 = *(_OWORD *)(v1 + 640);
  uint64_t v43 = *(unsigned int ***)(v1 + 656);
  v81.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  uint64_t v44 = *(void *)(v1 + 664);
  uint64_t v45 = *(void *)(v1 + 672);
  uint64_t v83 = v43;
  uint64_t v84 = (unsigned int *)v44;
  uint64_t v85 = v45;
  if (v45)
  {
    *(void *)(v44 + 16) = &v84;
    *(void *)(v1 + 656) = v1 + 664;
    *(void *)(v1 + 664) = 0;
    *(void *)(v1 + 672) = 0;
  }
  else
  {
    uint64_t v83 = &v84;
  }
  long long v86 = *(_OWORD *)(v2 + 80);
  *(void *)(v2 + 80) = 0;
  *(void *)(v2 + 88) = 0;
  char v87 = 1;
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v88, (uint64_t)&v81);
  if (*(unsigned char *)(v1 + 264))
  {
    std::__expected_base<AMSCore::URLBuilder,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100](v1 + 24);
    *(unsigned char *)(v1 + 264) = 0;
  }
  std::runtime_error::runtime_error((std::runtime_error *)(v1 + 24), &v88);
  long long v46 = v89;
  uint64_t v48 = v90;
  uint64_t v47 = v91;
  *(void *)(v1 + 64) = v91;
  unint64_t v49 = v1 + 64;
  *(_OWORD *)(v1 + 40) = v46;
  *(void *)(v1 + 24) = &unk_1EDC827D8;
  uint64_t v50 = v92;
  *(void *)(v1 + 56) = v48;
  *(void *)(v1 + 72) = v50;
  if (v50)
  {
    *(void *)(v47 + 16) = v49;
    long long v90 = &v91;
    uint64_t v91 = 0;
    uint64_t v92 = 0;
    uint64_t v47 = 0;
  }
  else
  {
    *(void *)(v1 + 56) = v49;
  }
  *(_OWORD *)(v1 + 80) = v93;
  long long v93 = 0uLL;
  *(unsigned char *)(v1 + 256) = 0;
  *(unsigned char *)(v1 + 264) = 1;
  v88.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v90, (unsigned int *)v47);
  MEMORY[0x192FA3C30](&v88);
  if (v87)
  {
    v81.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v51 = (std::__shared_weak_count *)*((void *)&v86 + 1);
    if (*((void *)&v86 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v86 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v83, v84);
    MEMORY[0x192FA3C30](&v81);
  }
LABEL_71:
  uint64_t v52 = *(uint64_t **)(v1 + 624);
  if (*(unsigned char *)(v1 + 696))
  {
    if (v52)
    {
      uint64_t v53 = *(uint64_t **)(v1 + 632);
      int v54 = *(void **)(v1 + 624);
      if (v53 != v52)
      {
        do
          std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v53, 0);
        while (v53 != v52);
        int v54 = *v6;
      }
      *(void *)(v1 + 632) = v52;
      operator delete(v54);
    }
  }
  else
  {
    ((void (*)(void **))*v52)(v6);
  }
LABEL_109:
  if (*(unsigned char *)(v1 + 616))
  {
    unint64_t v72 = *(std::__shared_weak_count **)(v1 + 552);
    if (v72)
    {
      if (!atomic_fetch_add(&v72->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
  }
  else
  {
    ((void (*)(const std::runtime_error *))v3->~runtime_error)(v3);
  }
  *(void *)(v1 + 544) = v4;
  *(void *)unint64_t v1 = 0;
  return AMSCore::Task<AMSCore::URLBuilder,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v3);
}

void sub_18DA85E30(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  if (*(char *)(v16 + 727) < 0) {
    operator delete(*a16);
  }
  std::expected<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::~expected[abi:fe180100](a9);
  std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::~expected[abi:fe180100](a11);
  __cxa_begin_catch(a1);
  AMSCore::Task<AMSCore::URLBuilder,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DA85E78()
{
}

void AMSCore::LoadNetworkBagTask::anonymous namespace'::addCookieToUrl(char *a1)
{
  if (!*(void *)a1) {
    goto LABEL_25;
  }
  if (a1[840])
  {
    uint64_t v2 = *((void *)a1 + 104);
    if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      long long v3 = (std::__shared_weak_count *)*((void *)a1 + 104);
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)*((void *)a1 + 95);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (a1[616])
      {
LABEL_9:
        uint64_t v5 = (std::__shared_weak_count *)*((void *)a1 + 69);
        if (!v5) {
          goto LABEL_25;
        }
        goto LABEL_21;
      }
    }
    else if (a1[616])
    {
      goto LABEL_9;
    }
    (**((void (***)(void))a1 + 68))();
    goto LABEL_25;
  }
  uint64_t v6 = *((void *)a1 + 102);
  if (v6 && !atomic_fetch_add((atomic_ullong *volatile)(v6 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    size_t v7 = (std::__shared_weak_count *)*((void *)a1 + 102);
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  char v8 = (std::__shared_weak_count *)*((void *)a1 + 79);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)a1 + 97);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)a1 + 95);
  if (v5)
  {
LABEL_21:
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
LABEL_25:
  uint64_t v10 = (char *)*((void *)a1 + 38);
  if (v10 == a1 + 280)
  {
    (*(void (**)(char *))(*((void *)a1 + 35) + 32))(a1 + 280);
    if (!a1[264]) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v10) {
    (*(void (**)(char *))(*(void *)v10 + 40))(v10);
  }
  if (a1[264]) {
LABEL_31:
  }
    std::__expected_base<AMSCore::URLBuilder,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100]((uint64_t)(a1 + 24));
LABEL_32:
  uint64_t v11 = *((void *)a1 + 100);
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  if (v11 && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)a1 + 100) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v12 = (std::__shared_weak_count *)*((void *)a1 + 100);
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  AMSCore::URL::~URL((AMSCore::URL *)(a1 + 392));
  if (a1[384])
  {
    *((void *)a1 + 39) = &unk_1EDC827D8;
    unint64_t v13 = (std::__shared_weak_count *)*((void *)a1 + 47);
    if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)(a1 + 344), *((unsigned int **)a1 + 44));
    MEMORY[0x192FA3C30](a1 + 312);
  }
  operator delete(a1);
}

uint64_t std::expected<std::vector<std::unique_ptr<AMSCore::HTTPCookie>>,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  if (*(unsigned char *)(a1 + 72))
  {
    if (v2)
    {
      long long v3 = *(uint64_t **)(a1 + 8);
      uint64_t v4 = *(uint64_t **)a1;
      if (v3 != v2)
      {
        do
          std::unique_ptr<AMSCore::HTTPCookie>::reset[abi:fe180100](--v3, 0);
        while (v3 != v2);
        uint64_t v4 = *(uint64_t **)a1;
      }
      *(void *)(a1 + 8) = v2;
      operator delete(v4);
    }
  }
  else
  {
    ((void (*)(uint64_t))*v2)(a1);
  }
  return a1;
}

void AMSCore::Task<AMSCore::URLBuilder,AMSCore::Error>::Promise::unhandled_exception()
{
  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

uint64_t sub_18DA8631C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, long long a19, uint64_t a20,uint64_t a21,uint64_t a22,long long a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v41, (uint64_t)v38);
  if (*(unsigned char *)(v29 + 248))
  {
    std::__expected_base<AMSCore::URLBuilder,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100]((uint64_t)v30);
    *(unsigned char *)(v29 + 248) = 0;
  }
  std::runtime_error::runtime_error(v30, v41);
  std::runtime_error v31 = v41[1];
  unint64_t v33 = v42;
  uint64_t v32 = v43;
  *(void *)(v29 + 48) = v43;
  uint64_t v34 = v29 + 48;
  *(std::runtime_error *)(v29 + 24) = v31;
  *(void *)(v29 + 8) = &unk_1EDC827D8;
  uint64_t v35 = v44;
  *(void *)(v29 + 40) = v33;
  *(void *)(v29 + 56) = v35;
  if (v35)
  {
    *(void *)(v32 + 16) = v34;
    long long v42 = &v43;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v32 = 0;
  }
  else
  {
    *(void *)(v29 + 40) = v34;
  }
  *(_OWORD *)(v29 + 64) = v45;
  long long v45 = 0uLL;
  *(unsigned char *)(v29 + 240) = 0;
  *(unsigned char *)(v29 + 248) = 1;
  v41[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v42, (unsigned int *)v32);
  MEMORY[0x192FA3C30](v41);
  v38[0] = &unk_1EDC827D8;
  uint64_t v36 = v40;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v39, v39[1]);
  return MEMORY[0x192FA3C30](v38);
}

uint64_t AMSCore::Task<AMSCore::URLBuilder,AMSCore::Error>::Promise::Awaiter::await_suspend(uint64_t result)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unint64_t v1 = (void (**)(void))atomic_exchange((atomic_ullong *volatile)(*(void *)result + 256), 1uLL);
  if (v1)
  {
    uint64_t v2 = result;
    if (v1 == (void (**)(void))2) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result - 8))(*(void *)result - 16);
    }
    uint64_t v3 = *(void *)result;
    uint64_t result = *(void *)(*(void *)result + 288);
    if (result)
    {
      if (result == v3 + 264)
      {
        uint64_t v18 = v17;
        uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 24))(result, v17);
      }
      else
      {
        uint64_t v18 = (void *)result;
        *(void *)(v3 + 288) = 0;
      }
    }
    else
    {
      uint64_t v18 = 0;
    }
    if (v18)
    {
      uint64_t v4 = *(void *)v2;
      if (!*(unsigned char *)(*(void *)v2 + 248))
      {
        __break(1u);
        return result;
      }
      uint64_t v5 = (std::runtime_error *)(v4 + 8);
      char v6 = *(unsigned char *)(v4 + 240);
      if (v6)
      {
        AMSCore::URLBuilder::URLBuilder(&v10, v5);
      }
      else
      {
        std::runtime_error::runtime_error(&v10, v5);
        size_t v7 = (void *)(v4 + 48);
        uint64_t v8 = *(void *)(v4 + 48);
        long long v11 = *(_OWORD *)(v4 + 24);
        uint64_t v9 = *(uint64_t **)(v4 + 40);
        v10.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        uint64_t v12 = v9;
        uint64_t v13 = v8;
        if (*(void *)(v4 + 56))
        {
          *(void *)(v8 + 16) = &v13;
          *(void *)(v4 + 40) = v7;
          *size_t v7 = 0;
          *(void *)(v4 + 56) = 0;
        }
        else
        {
          uint64_t v12 = &v13;
        }
        long long v15 = *(_OWORD *)(v4 + 64);
        *(void *)(v4 + 64) = 0;
        *(void *)(v4 + 72) = 0;
      }
      char v16 = v6;
      if (!v18) {
        std::__throw_bad_function_call[abi:fe180100]();
      }
      (*(void (**)(void *, std::runtime_error *))(*v18 + 48))(v18, &v10);
      std::__expected_base<AMSCore::URLBuilder,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100]((uint64_t)&v10);
    }
    else
    {
      (*v1)(v1);
    }
    uint64_t result = (uint64_t)v18;
    if (v18 == v17)
    {
      return (*(uint64_t (**)(void *))(v17[0] + 32))(v17);
    }
    else if (v18)
    {
      return (*(uint64_t (**)(void *))(*v18 + 40))(v18);
    }
  }
  return result;
}

void sub_18DA866C8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::URLBuilder,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::URLBuilder,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::URLBuilder,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINS_10URLBuilderENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINS_10URLBuilderENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINS_10URLBuilderENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINS_10URLBuilderENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::URLBuilder,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::URLBuilder,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::URLBuilder,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 256), 2uLL)) {
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::Task<AMSCore::URLBuilder,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::URLBuilder,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::URLBuilder,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

char *AMSCore::OrderedMap<std::string,std::string>::~OrderedMap(char *a1)
{
  if (*((void *)a1 + 2))
  {
    uint64_t v2 = *(void *)a1;
    unint64_t v3 = (char *)*((void *)a1 + 1);
    uint64_t v4 = *(void *)v3;
    *(void *)(v4 + 8) = *(void *)(*(void *)a1 + 8);
    **(void **)(v2 + 8) = v4;
    *((void *)a1 + 2) = 0;
    if (v3 != a1)
    {
      do
      {
        char v6 = (char *)*((void *)v3 + 1);
        if (v3[63] < 0)
        {
          operator delete(*((void **)v3 + 5));
          if (v3[39] < 0) {
LABEL_9:
          }
            operator delete(*((void **)v3 + 2));
        }
        else if (v3[39] < 0)
        {
          goto LABEL_9;
        }
        operator delete(v3);
        unint64_t v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINS_21EncodeHTTPRequestTask6ResultENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINS_21EncodeHTTPRequestTask6ResultENS_5ErrorEE7Promise17get_return_object"
                                "EvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINS_21EncodeHTTPRequestTask6ResultENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINS_21EncodeHTTPRequestTask6ResultENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 408), 2uLL)) {
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void AMSCore::LoadNetworkBagTask::buildStorefront(std::string *this, uint64_t a2, char *a3)
{
  int v5 = *(unsigned __int8 *)(a2 + 24);
  if (a3[24]) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
LABEL_6:
    this->__r_.__value_.__s.__data_[0] = 0;
    this[1].__r_.__value_.__s.__data_[0] = 0;
    size_t v7 = this + 1;
    if (!v5) {
      return;
    }
    if ((*(unsigned char *)(a2 + 23) & 0x80) != 0) {
      goto LABEL_28;
    }
    goto LABEL_8;
  }
  char v9 = *(unsigned char *)(a2 + 23);
  if (v9 >= 0) {
    std::runtime_error v10 = (const std::string::value_type *)a2;
  }
  else {
    std::runtime_error v10 = *(const std::string::value_type **)a2;
  }
  int v11 = a3[23];
  if (v11 >= 0) {
    uint64_t v12 = a3;
  }
  else {
    uint64_t v12 = *(char **)a3;
  }
  if (v11 >= 0) {
    int64_t v13 = a3[23];
  }
  else {
    int64_t v13 = *((void *)a3 + 1);
  }
  if (!v13)
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    this[1].__r_.__value_.__s.__data_[0] = 0;
    size_t v7 = this + 1;
    if (v9 < 0)
    {
LABEL_28:
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      goto LABEL_29;
    }
LABEL_8:
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
LABEL_29:
    v7->__r_.__value_.__s.__data_[0] = 1;
    return;
  }
  __s = v10;
  if (v9 >= 0) {
    int64_t v14 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    int64_t v14 = *(void *)(a2 + 8);
  }
  if (v14 >= v13)
  {
    uint64_t v17 = (std::string::value_type *)v10;
    uint64_t v18 = &v10[v14];
    int v19 = *v12;
    int64_t v20 = v14;
    do
    {
      int64_t v21 = v20 - v13;
      if (v21 == -1) {
        break;
      }
      uint64_t v22 = (const std::string::value_type *)memchr(v17, v19, v21 + 1);
      if (!v22) {
        break;
      }
      uint64_t v23 = v22;
      if (!memcmp(v22, v12, v13))
      {
        if (v23 != v18 && v23 - __s != -1) {
          goto LABEL_6;
        }
        break;
      }
      uint64_t v17 = (std::string::value_type *)(v23 + 1);
      int64_t v20 = v18 - (v23 + 1);
    }
    while (v20 >= v13);
  }
  unint64_t v15 = v14 + 1;
  if ((unint64_t)(v14 + 1) >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:fe180100]();
  }
  if (v15 >= 0x17)
  {
    uint64_t v24 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v24 = v15 | 7;
    }
    uint64_t v25 = v24 + 1;
    p_dst = (std::string *)operator new(v24 + 1);
    __dst.__r_.__value_.__l.__size_ = v14 + 1;
    __dst.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_39;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = &__dst;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v14 + 1;
  if (v14) {
LABEL_39:
  }
    memmove(p_dst, __s, v14);
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v14) = 32;
  if (a3[24])
  {
    int v26 = a3[23];
    if (v26 >= 0) {
      uint64_t v27 = a3;
    }
    else {
      uint64_t v27 = *(const void **)a3;
    }
    if (v26 >= 0) {
      size_t v28 = a3[23];
    }
    else {
      size_t v28 = *((void *)a3 + 1);
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v29 = 22;
    }
    else {
      std::string::size_type v29 = (__dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    }
    if (v29 - size >= v28)
    {
      if (v28)
      {
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::runtime_error v31 = &__dst;
        }
        else {
          std::runtime_error v31 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        memmove((char *)v31 + size, v27, v28);
        std::string::size_type v32 = size + v28;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          __dst.__r_.__value_.__l.__size_ = size + v28;
        }
        else {
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v32 & 0x7F;
        }
        v31->__r_.__value_.__s.__data_[v32] = 0;
      }
    }
    else
    {
      std::string::__grow_by_and_replace(&__dst, v29, size + v28 - v29, size, size, 0, v28, (const std::string::value_type *)v27);
    }
    char v33 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    std::string::size_type v34 = __dst.__r_.__value_.__l.__size_;
    this->__r_.__value_.__r.__words[0] = __dst.__r_.__value_.__r.__words[0];
    this->__r_.__value_.__l.__size_ = v34;
    *(std::string::size_type *)((char *)&this->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7);
    *((unsigned char *)&this->__r_.__value_.__s + 23) = v33;
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  else
  {
    __break(1u);
  }
}

void sub_18DA86BF8(void *a1)
{
  if (*(unsigned char *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
    {
      operator delete(*(void **)v1);
      __clang_call_terminate(a1);
    }
  }
  __clang_call_terminate(a1);
}

uint64_t AMSCore::LoadNetworkBagTask::perform(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 824);
  if (!*(unsigned char *)(v1 + 136))
  {
    __break(1u);
    return result;
  }
  uint64_t v2 = result;
  unint64_t v3 = (std::runtime_error *)(result + 200);
  int v4 = *(unsigned __int8 *)(v1 + 128);
  __n128 v5 = std::__expected_base<AMSCore::LoadNetworkBagResult,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::LoadNetworkBagResult,AMSCore::Error>::__union_t>(result + 200, v4, (std::runtime_error *)(v1 + 8));
  *(unsigned char *)(v2 + 320) = v4;
  if (*(unsigned char *)(v2 + 152))
  {
    BOOL v6 = (AMSCore::LoadNetworkBagResult *)(v2 + 24);
    if (*(unsigned char *)(v2 + 144)) {
      AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult(v6);
    }
    else {
      (**(void (***)(AMSCore::LoadNetworkBagResult *, __n128))v6)(v6, v5);
    }
    *(unsigned char *)(v2 + 152) = 0;
    int v4 = *(unsigned __int8 *)(v2 + 320);
  }
  __n128 v7 = std::__expected_base<AMSCore::LoadNetworkBagResult,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::LoadNetworkBagResult,AMSCore::Error>::__union_t>(v2 + 24, v4 != 0, v3);
  *(unsigned char *)(v2 + 144) = v4;
  *(unsigned char *)(v2 + 152) = 1;
  if (*(unsigned char *)(v2 + 320))
  {
    AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult((AMSCore::LoadNetworkBagResult *)v3);
    uint64_t v8 = *(void *)(v2 + 832);
    if (!v8) {
      goto LABEL_13;
    }
  }
  else
  {
    ((void (*)(std::runtime_error *, __n128))v3->~runtime_error)(v3, v7);
    uint64_t v8 = *(void *)(v2 + 832);
    if (!v8) {
      goto LABEL_13;
    }
  }
  if (!atomic_fetch_add((atomic_ullong *volatile)(v8 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    char v9 = *(std::__shared_weak_count **)(v2 + 832);
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_13:
  uint64_t v10 = v2 + 712;
  int v11 = *(std::__shared_weak_count **)(v2 + 800);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = *(void *)(v2 + 736);
  if (v12 == v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 32))(v2 + 712);
    int64_t v13 = *(std::__shared_weak_count **)(v2 + 784);
    if (!v13) {
      goto LABEL_23;
    }
  }
  else
  {
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 40))(v12);
    }
    int64_t v13 = *(std::__shared_weak_count **)(v2 + 784);
    if (!v13)
    {
LABEL_23:
      if (!*(unsigned char *)(v2 + 576)) {
        goto LABEL_31;
      }
      goto LABEL_24;
    }
  }
  if (atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_23;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (!*(unsigned char *)(v2 + 576)) {
    goto LABEL_31;
  }
LABEL_24:
  if ((*(char *)(v2 + 575) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(v2 + 528)) {
      goto LABEL_26;
    }
LABEL_31:
    (**(void (***)(void))(v2 + 456))();
    int64_t v14 = *(std::__shared_weak_count **)(v2 + 752);
    if (!v14) {
      goto LABEL_34;
    }
    goto LABEL_32;
  }
  operator delete(*(void **)(v2 + 552));
  if (!*(unsigned char *)(v2 + 528)) {
    goto LABEL_31;
  }
LABEL_26:
  int64_t v14 = *(std::__shared_weak_count **)(v2 + 752);
  if (!v14) {
    goto LABEL_34;
  }
LABEL_32:
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_34:
  unint64_t v15 = *(std::__shared_weak_count **)(v2 + 768);
  if (!v15 || atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*(char *)(v2 + 631) & 0x80000000) == 0) {
      goto LABEL_37;
    }
LABEL_42:
    operator delete(*(void **)(v2 + 608));
    if ((*(char *)(v2 + 607) & 0x80000000) == 0) {
      goto LABEL_38;
    }
LABEL_43:
    operator delete(*(void **)(v2 + 584));
    goto LABEL_38;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  if (*(char *)(v2 + 631) < 0) {
    goto LABEL_42;
  }
LABEL_37:
  if (*(char *)(v2 + 607) < 0) {
    goto LABEL_43;
  }
LABEL_38:
  *(void *)(v2 + 840) = 0;
  *(void *)(v2 + 200) = v2 + 16;
  *(void *)uint64_t v2 = 0;
  return AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v3);
}

void AMSCore::LoadNetworkBagTask::perform(char *__p)
{
  if (!*(void *)__p)
  {
    uint64_t v8 = (std::__shared_weak_count *)*((void *)__p + 105);
    goto LABEL_32;
  }
  uint64_t v2 = *((void *)__p + 104);
  if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    unint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 104);
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  int v4 = __p + 712;
  __n128 v5 = (std::__shared_weak_count *)*((void *)__p + 100);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  BOOL v6 = (char *)*((void *)__p + 92);
  if (v6 == v4)
  {
    (*(void (**)(char *))(*(void *)v4 + 32))(__p + 712);
    __n128 v7 = (std::__shared_weak_count *)*((void *)__p + 98);
    if (!v7) {
      goto LABEL_16;
    }
  }
  else
  {
    if (v6) {
      (*(void (**)(char *))(*(void *)v6 + 40))(v6);
    }
    __n128 v7 = (std::__shared_weak_count *)*((void *)__p + 98);
    if (!v7)
    {
LABEL_16:
      if (!__p[576]) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
  }
  if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (!__p[576])
  {
LABEL_25:
    (**((void (***)(void))__p + 57))();
    char v9 = (std::__shared_weak_count *)*((void *)__p + 94);
    if (!v9) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
LABEL_17:
  if (__p[575] < 0)
  {
    operator delete(*((void **)__p + 69));
    if (!__p[528]) {
      goto LABEL_25;
    }
  }
  else if (!__p[528])
  {
    goto LABEL_25;
  }
  char v9 = (std::__shared_weak_count *)*((void *)__p + 94);
  if (!v9)
  {
LABEL_27:
    uint64_t v10 = (std::__shared_weak_count *)*((void *)__p + 96);
    if (!v10) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
LABEL_26:
  if (atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_27;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  uint64_t v10 = (std::__shared_weak_count *)*((void *)__p + 96);
  if (!v10)
  {
LABEL_29:
    if ((__p[631] & 0x80000000) == 0) {
      goto LABEL_30;
    }
LABEL_76:
    operator delete(*((void **)__p + 76));
    if ((__p[607] & 0x80000000) == 0) {
      goto LABEL_31;
    }
LABEL_77:
    operator delete(*((void **)__p + 73));
    goto LABEL_31;
  }
LABEL_28:
  if (atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_29;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (__p[631] < 0) {
    goto LABEL_76;
  }
LABEL_30:
  if (__p[607] < 0) {
    goto LABEL_77;
  }
LABEL_31:
  uint64_t v8 = 0;
LABEL_32:
  int v11 = (char *)*((void *)__p + 24);
  if (v11 == __p + 168)
  {
    (*(void (**)(char *))(*((void *)__p + 21) + 32))(__p + 168);
    if (!__p[152]) {
      goto LABEL_41;
    }
    goto LABEL_38;
  }
  if (v11) {
    (*(void (**)(char *))(*(void *)v11 + 40))(v11);
  }
  if (__p[152])
  {
LABEL_38:
    uint64_t v12 = (AMSCore::LoadNetworkBagResult *)(__p + 24);
    if (__p[144]) {
      AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult(v12);
    }
    else {
      (**(void (***)(AMSCore::LoadNetworkBagResult *))v12)(v12);
    }
  }
LABEL_41:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  int64_t v13 = (char *)*((void *)__p + 88);
  if (v13 == __p + 680)
  {
    (*(void (**)(char *))(*((void *)__p + 85) + 32))(__p + 680);
    if (!v8) {
      goto LABEL_50;
    }
  }
  else
  {
    if (v13) {
      (*(void (**)(char *))(*(void *)v13 + 40))(v13);
    }
    if (!v8)
    {
LABEL_50:
      if (!__p[448]) {
        goto LABEL_59;
      }
      goto LABEL_51;
    }
  }
  if (atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_50;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (!__p[448])
  {
LABEL_59:
    (**((void (***)(void))__p + 41))();
    uint64_t v14 = *((void *)__p + 102);
    if (!v14) {
      goto LABEL_61;
    }
    goto LABEL_60;
  }
LABEL_51:
  if (__p[447] < 0)
  {
    operator delete(*((void **)__p + 53));
    if (!__p[400]) {
      goto LABEL_59;
    }
  }
  else if (!__p[400])
  {
    goto LABEL_59;
  }
  uint64_t v14 = *((void *)__p + 102);
  if (!v14)
  {
LABEL_61:
    uint64_t v15 = *((void *)__p + 101);
    if (!v15) {
      goto LABEL_63;
    }
    goto LABEL_62;
  }
LABEL_60:
  if (atomic_fetch_add((atomic_ullong *volatile)(v14 + 8), 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_61;
  }
  char v16 = (std::__shared_weak_count *)*((void *)__p + 102);
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  uint64_t v15 = *((void *)__p + 101);
  if (!v15)
  {
LABEL_63:
    if ((__p[679] & 0x80000000) == 0) {
      goto LABEL_64;
    }
LABEL_71:
    operator delete(*((void **)__p + 82));
    if ((__p[655] & 0x80000000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_72;
  }
LABEL_62:
  if (atomic_fetch_add((atomic_ullong *volatile)(v15 + 8), 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_63;
  }
  uint64_t v17 = (std::__shared_weak_count *)*((void *)__p + 101);
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (__p[679] < 0) {
    goto LABEL_71;
  }
LABEL_64:
  if ((__p[655] & 0x80000000) == 0) {
    goto LABEL_65;
  }
LABEL_72:
  operator delete(*((void **)__p + 79));
LABEL_65:
  operator delete(__p);
}

void std::shared_ptr<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_18DA875C0(void *a1)
{
  __cxa_begin_catch(a1);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 144), 2uLL)) {
    (*(void (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  __cxa_rethrow();
}

void sub_18DA875EC(_Unwind_Exception *a1)
{
}

void AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise::unhandled_exception()
{
  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

uint64_t sub_18DA87628(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, long long a19, uint64_t a20,uint64_t a21,uint64_t a22,long long a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v41, (uint64_t)v38);
  if (*(unsigned char *)(v29 + 136))
  {
    if (*(unsigned char *)(v29 + 128)) {
      AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult(v30);
    }
    else {
      (**(void (***)(AMSCore::LoadNetworkBagResult *))v30)(v30);
    }
    *(unsigned char *)(v29 + 136) = 0;
  }
  std::runtime_error::runtime_error((std::runtime_error *)v30, v41);
  std::runtime_error v31 = v41[1];
  char v33 = v42;
  uint64_t v32 = v43;
  *(void *)(v29 + 48) = v43;
  uint64_t v34 = v29 + 48;
  *(std::runtime_error *)(v29 + 24) = v31;
  *(void *)(v29 + 8) = &unk_1EDC827D8;
  uint64_t v35 = v44;
  *(void *)(v29 + 40) = v33;
  *(void *)(v29 + 56) = v35;
  if (v35)
  {
    *(void *)(v32 + 16) = v34;
    long long v42 = &v43;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v32 = 0;
  }
  else
  {
    *(void *)(v29 + 40) = v34;
  }
  *(_OWORD *)(v29 + 64) = v45;
  long long v45 = 0uLL;
  *(unsigned char *)(v29 + 128) = 0;
  *(unsigned char *)(v29 + 136) = 1;
  v41[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v42, (unsigned int *)v32);
  MEMORY[0x192FA3C30](v41);
  v38[0] = &unk_1EDC827D8;
  uint64_t v36 = v40;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v39, v39[1]);
  return MEMORY[0x192FA3C30](v38);
}

void AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(uint64_t a1, uint64_t a2, long long *a3, long long *a4, uint64_t a5, char a6, uint64_t a7, void *a8)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = (char *)operator new(0xA88uLL);
  v15[2693] = a6;
  *(_OWORD *)(v15 + 2056) = *(_OWORD *)a2;
  *((void *)v15 + 259) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *((_OWORD *)v15 + 130) = *(_OWORD *)(a2 + 24);
  *((void *)v15 + 262) = *(void *)(a2 + 40);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  long long v16 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  long long v17 = *a4;
  *(_OWORD *)(v15 + 2616) = v16;
  *(_OWORD *)(v15 + 2632) = v17;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  LOBYTE(a4) = *(unsigned char *)(a5 + 120);
  std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__union_t>((std::runtime_error *)(v15 + 1608), a4, (std::runtime_error *)a5);
  v15[1728] = (char)a4;
  *((_OWORD *)v15 + 162) = *(_OWORD *)a7;
  *(void *)a7 = 0;
  *(void *)(a7 + 8) = 0;
  uint64_t v18 = (void *)a8[3];
  if (v18)
  {
    if (v18 == a8)
    {
      *((void *)v15 + 278) = v15 + 2200;
      (*(void (**)(void *, char *))(*a8 + 24))(a8, v15 + 2200);
    }
    else
    {
      *((void *)v15 + 278) = v18;
      a8[3] = 0;
    }
  }
  else
  {
    *((void *)v15 + 278) = 0;
  }
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  v15[24] = 0;
  v15[152] = 0;
  *((void *)v15 + 20) = 0;
  *((void *)v15 + 24) = 0;
  std::shared_ptr<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise,AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v19, (uint64_t)(v15 + 16));
}

void sub_18DA8A198(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,AMSCore::ExecuteHTTPRequestTask::HandlerType *a63)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult(a67);
  if (*(char *)(v67 + 2415) < 0) {
    operator delete(*a9);
  }
  __cxa_begin_catch(a1);
  AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DA8A4E4()
{
}

void sub_18DA8A4EC(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x18DA8A4F4);
  }
  JUMPOUT(0x18DA8A408);
}

uint64_t AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise::Awaiter::await_suspend(uint64_t result)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void (**)(void))atomic_exchange((atomic_ullong *volatile)(*(void *)result + 144), 1uLL);
  if (v1)
  {
    uint64_t v2 = result;
    if (v1 == (void (**)(void))2) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result - 8))(*(void *)result - 16);
    }
    unint64_t v3 = (uint64_t *)(*(void *)result + 176);
    uint64_t result = *v3;
    if (*v3)
    {
      if (result == *(void *)v2 + 152)
      {
        uint64_t v10 = v9;
        uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 24))(result, v9);
      }
      else
      {
        uint64_t v10 = *(void **)(*(void *)v2 + 176);
        *unint64_t v3 = 0;
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    if (v10)
    {
      uint64_t v4 = *(void *)v2;
      if (!*(unsigned char *)(*(void *)v2 + 136))
      {
        __break(1u);
        return result;
      }
      unsigned __int8 v5 = *(unsigned char *)(v4 + 128);
      __n128 v6 = std::__expected_base<AMSCore::LoadNetworkBagResult,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::LoadNetworkBagResult,AMSCore::Error>::__union_t>((uint64_t)v7, v5, (std::runtime_error *)(v4 + 8));
      unsigned __int8 v8 = v5;
      if (!v10) {
        std::__throw_bad_function_call[abi:fe180100]();
      }
      (*(void (**)(void *, void *, __n128))(*v10 + 48))(v10, v7, v6);
      if (v8) {
        AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult((AMSCore::LoadNetworkBagResult *)v7);
      }
      else {
        (*(void (**)(void *))v7[0])(v7);
      }
    }
    else
    {
      (*v1)(v1);
    }
    uint64_t result = (uint64_t)v10;
    if (v10 == v9)
    {
      return (*(uint64_t (**)(void *))(v9[0] + 32))(v9);
    }
    else if (v10)
    {
      return (*(uint64_t (**)(void))(*v10 + 40))();
    }
  }
  return result;
}

void sub_18DA8A6FC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(uint64_t a1)
{
  uint64_t v2 = a1 + 1800;
  uint64_t v151 = a1 + 1368;
  uint64_t v161 = a1 + 1032;
  uint64_t v153 = a1 + 568;
  unint64_t v3 = (std::runtime_error *)(a1 + 200);
  uint64_t v4 = (unsigned int ***)(a1 + 976);
  uint64_t v167 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 1144);
  uint64_t v168 = (void **)(a1 + 592);
  char v174 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 1312);
  uint64_t v155 = (std::runtime_error *)(a1 + 1480);
  uint64_t v157 = (AMSCore::Error *)(a1 + 1608);
  unint64_t v166 = (AMSCore::LoadNetworkBagResult *)(a1 + 1736);
  uint64_t v169 = (std::runtime_error *)(a1 + 1856);
  unsigned __int8 v5 = (std::string *)(a1 + 1936);
  __n128 v6 = (void **)(a1 + 2008);
  uint64_t v158 = a1 + 2056;
  uint64_t v170 = (std::string *)(a1 + 2104);
  unint64_t v171 = (std::string *)(a1 + 2168);
  __n128 v7 = (void **)(a1 + 2296);
  uint64_t v147 = a1 + 2320;
  uint64_t v148 = (void *)(a1 + 2416);
  uint64_t v146 = (void *)(a1 + 2440);
  char v149 = (std::string *)(a1 + 2344);
  char v150 = (std::string *)(a1 + 2464);
  uint64_t v159 = a1 + 2232;
  uint64_t v160 = (__n128 *)(a1 + 2488);
  uint64_t v154 = a1 + 2528;
  unint64_t v156 = (long long *)(a1 + 2544);
  uint64_t v164 = a1 + 2560;
  unint64_t v162 = (uint64_t *)(a1 + 2512);
  uint64_t v163 = (void *)(a1 + 2576);
  uint64_t v152 = (uint64_t *)(a1 + 2608);
  unint64_t v172 = (int *)(a1 + 2688);
  uint64_t v145 = a1 + 16;
  char v173 = (const std::runtime_error *)(a1 + 1936);
  uint64_t v165 = (std::string *)(a1 + 2008);
  if (!*(unsigned char *)(a1 + 2692))
  {
    uint64_t v8 = *(void *)(a1 + 2648);
    if (*(unsigned char *)(v8 + 400))
    {
      char v9 = (const std::runtime_error *)(v8 + 8);
      char v10 = *(unsigned char *)(v8 + 392);
      if (v10)
      {
        AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v3, (uint64_t)v9);
        uint64_t v11 = (void *)(v8 + 376);
        *(void *)(a1 + 568) = *(void *)(v8 + 376);
        uint64_t v12 = (void *)(v8 + 384);
        int64_t v13 = (void *)(a1 + 576);
      }
      else
      {
        std::runtime_error::runtime_error(v3, v9);
        *(_OWORD *)(a1 + 216) = *(_OWORD *)(v8 + 24);
        uint64_t v14 = (void *)(v8 + 48);
        uint64_t v15 = *(void *)(v8 + 48);
        *(void *)(a1 + 240) = v15;
        uint64_t v16 = a1 + 240;
        *(void *)(a1 + 200) = &unk_1EDC827D8;
        *(void *)(a1 + 232) = *(void *)(v8 + 40);
        uint64_t v17 = *(void *)(v8 + 56);
        *(void *)(a1 + 248) = v17;
        if (v17)
        {
          *(void *)(v15 + 16) = v16;
          *(void *)(v8 + 40) = v14;
          *uint64_t v14 = 0;
          *(void *)(v8 + 56) = 0;
        }
        else
        {
          *(void *)(a1 + 232) = v16;
        }
        uint64_t v18 = *(void *)(a1 + 2648);
        uint64_t v19 = *(void *)(v18 + 64);
        uint64_t v11 = (void *)(v18 + 64);
        *(void *)(a1 + 256) = v19;
        uint64_t v12 = v11 + 1;
        int64_t v13 = (void *)(a1 + 264);
      }
      *int64_t v13 = *v12;
      *uint64_t v11 = 0;
      v11[1] = 0;
      *(unsigned char *)(a1 + 584) = v10;
      uint64_t v20 = *(void *)(a1 + 2656);
      if (v20 && !atomic_fetch_add((atomic_ullong *volatile)(v20 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v22 = *(std::__shared_weak_count **)(a1 + 2656);
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
        int64_t v21 = *(std::__shared_weak_count **)(a1 + 984);
        if (!v21) {
          goto LABEL_15;
        }
      }
      else
      {
        int64_t v21 = *(std::__shared_weak_count **)(a1 + 984);
        if (!v21) {
          goto LABEL_15;
        }
      }
      if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
LABEL_15:
      uint64_t v23 = *(std::__shared_weak_count **)(a1 + 2568);
      if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        uint64_t v24 = *(std::__shared_weak_count **)(a1 + 2584);
        if (!v24) {
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v24 = *(std::__shared_weak_count **)(a1 + 2584);
        if (!v24) {
          goto LABEL_21;
        }
      }
      if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
LABEL_21:
      uint64_t v25 = (void **)*v7;
      if (*v7)
      {
        int v26 = *(void ***)(a1 + 2304);
        uint64_t v27 = *v7;
        if (v26 != v25)
        {
          do
          {
            if (*((char *)v26 - 1) < 0) {
              operator delete(*(v26 - 3));
            }
            v26 -= 3;
          }
          while (v26 != v25);
          uint64_t v27 = *v7;
        }
        *(void *)(a1 + 2304) = v25;
        operator delete(v27);
      }
      if (*(unsigned char *)(a1 + 2192) && *(char *)(a1 + 2191) < 0) {
        operator delete(v171->__r_.__value_.__l.__data_);
      }
      if (*(char *)(a1 + 2055) < 0)
      {
        operator delete(*(void **)(a1 + 2032));
        if ((*(char *)(a1 + 2031) & 0x80000000) == 0)
        {
LABEL_34:
          if (*(unsigned char *)(a1 + 584)) {
            goto LABEL_35;
          }
          goto LABEL_44;
        }
      }
      else if ((*(char *)(a1 + 2031) & 0x80000000) == 0)
      {
        goto LABEL_34;
      }
      operator delete(*v6);
      if (*(unsigned char *)(a1 + 584))
      {
LABEL_35:
        uint64_t v28 = *(void *)(a1 + 2640);
        *(void *)(a1 + 2544) = *(void *)(a1 + 2632);
        *(void *)(a1 + 2552) = v28;
        if (v28) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
        }
        AMSCore::ExecuteHTTPRequestTask::internal::makeOptionsBuilder((AMSCore::ExecuteHTTPRequestTask::Options *)v4, v156);
        uint64_t v29 = operator new(0x20uLL);
        v29[1] = 0;
        void v29[2] = 0;
        *uint64_t v29 = &unk_1EDC83FD8;
        v29[3] = &unk_1EDC823E0;
        *(void *)(a1 + 2488) = v29 + 3;
        *(void *)(a1 + 2496) = v29;
        v169->__vftable = 0;
        v169->__imp_.__imp_ = 0;
        *(_DWORD *)(a1 + 2504) = 1;
        v175.__vftable = (std::runtime_error_vtbl *)(a1 + 1064);
        _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_10shared_ptrIN7AMSCore22ExecuteHTTPRequestTask8IHandlerEEENS8_INSA_16AnonymousHandlerEEEEEEE16__generic_assignB8fe180100INS0_17__move_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOST_EEEDcSL_DpT0_((__n128 **)&v175, (__n128 *)(a1 + 1064), v160);
        char v30 = *(unsigned char *)(a1 + 1728);
        *(unsigned char *)(a1 + 2512) = v30;
        *(void *)(a1 + 1936) = v162;
        *(void *)(a1 + 1944) = v157;
        std::invoke[abi:fe180100]<std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__repr::__repr[abi:fe180100]<std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__union_t const&>(BOOL,std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__union_t const&)::{lambda(void)#1}>(v155, v30, v157);
        int v31 = *(unsigned __int8 *)(a1 + 2512);
        *(unsigned char *)(a1 + 1600) = v31;
        *(void *)(a1 + 2256) = 0;
        uint64_t v32 = (char *)operator new(0x88uLL);
        char v33 = (uint64_t *)(a1 + 2256);
        *(void *)uint64_t v32 = &unk_1EDCA53A0;
        __n128 v34 = std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__repr::__make_union[abi:fe180100]<std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__union_t>((std::runtime_error *)(v32 + 8), v31 != 0, v155);
        v32[128] = v31;
        *(void *)(a1 + 2256) = v32;
        uint64_t v35 = a1 + 1112;
        uint64_t v36 = (void *)(a1 + 1136);
        uint64_t v37 = *(void *)(a1 + 1136);
        *(void *)(a1 + 1136) = 0;
        if (v37 == a1 + 1112)
        {
          (*(void (**)(uint64_t, __n128))(*(void *)v35 + 32))(a1 + 1112, v34);
          uint64_t v38 = *v33;
          if (!*v33) {
            goto LABEL_49;
          }
        }
        else
        {
          if (v37) {
            (*(void (**)(uint64_t, __n128))(*(void *)v37 + 40))(v37, v34);
          }
          uint64_t v38 = *v33;
          if (!*v33) {
            goto LABEL_49;
          }
        }
        if (v38 == v159)
        {
          *uint64_t v36 = v35;
          (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)v159 + 24))(v159, a1 + 1112, v34);
LABEL_51:
          AMSCore::ExecuteHTTPRequestTask::Options::Options(v174, (const AMSCore::ExecuteHTTPRequestTask::Options *)v4);
          uint64_t v43 = *v33;
          if (*v33 == v159)
          {
            (*(void (**)(uint64_t))(*(void *)v159 + 32))(v159);
            if (!*(unsigned char *)(a1 + 1600)) {
              goto LABEL_59;
            }
          }
          else
          {
            if (v43) {
              (*(void (**)(uint64_t))(*(void *)v43 + 40))(v43);
            }
            if (!*(unsigned char *)(a1 + 1600)) {
              goto LABEL_59;
            }
          }
          if (*(char *)(a1 + 1599) < 0)
          {
            operator delete(*(void **)(a1 + 1576));
            if (*(unsigned char *)(a1 + 1552)) {
              goto LABEL_60;
            }
          }
          else if (*(unsigned char *)(a1 + 1552))
          {
LABEL_60:
            uint64_t v44 = *(unsigned int *)(a1 + 2504);
            if (v44 != -1) {
              ((void (*)(std::string *, __n128 *))off_1EDCA5410[v44])(v5, v160);
            }
            *(_DWORD *)(a1 + 2504) = -1;
            long long v45 = *(std::__shared_weak_count **)(a1 + 1864);
            if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
            AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)v4);
            long long v46 = *(std::__shared_weak_count **)(a1 + 2552);
            if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
            if (*(unsigned char *)(a1 + 584))
            {
              AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)v168, (uint64_t)v3);
              *(_OWORD *)(a1 + 960) = *(_OWORD *)v153;
              *(void *)uint64_t v153 = 0;
              *(void *)(v153 + 8) = 0;
              AMSCore::ExecuteHTTPRequestTask::Options::Options((uint64_t)v167, (uint64_t)v174);
              *(void *)(a1 + 2528) = *(void *)(a1 + 2592);
              uint64_t v47 = *(void *)(a1 + 2600);
              *(void *)(a1 + 2536) = v47;
              if (v47) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v47 + 8), 1uLL, memory_order_relaxed);
              }
            }
            goto LABEL_338;
          }
LABEL_59:
          ((void (*)(std::runtime_error *))v155->~runtime_error)(v155);
          goto LABEL_60;
        }
        *uint64_t v36 = v38;
        uint64_t v36 = (void *)(a1 + 2256);
LABEL_49:
        *uint64_t v36 = 0;
        goto LABEL_51;
      }
LABEL_44:
      std::runtime_error::runtime_error((std::runtime_error *)v4, v3);
      uint64_t v39 = (void *)(a1 + 240);
      uint64_t v40 = *(void *)(a1 + 240);
      uint64_t v41 = (unsigned int **)(a1 + 1016);
      *(_OWORD *)(a1 + 992) = *(_OWORD *)(a1 + 216);
      *(void *)(a1 + 976) = &unk_1EDC827D8;
      *(void *)(a1 + 1008) = *(void *)(a1 + 232);
      *(void *)(a1 + 1016) = v40;
      uint64_t v42 = *(void *)(a1 + 248);
      *(void *)(a1 + 1024) = v42;
      if (v42)
      {
        *(void *)(v40 + 16) = v41;
        *(void *)(a1 + 232) = v39;
        *uint64_t v39 = 0;
        *(void *)(a1 + 248) = 0;
      }
      else
      {
        *(void *)(a1 + 1008) = v41;
      }
      *(_OWORD *)uint64_t v161 = *(_OWORD *)(a1 + 256);
      *(void *)(a1 + 256) = 0;
      *(void *)(a1 + 264) = 0;
      *(unsigned char *)(a1 + 1048) = 1;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v174, (uint64_t)v4);
      if (*(unsigned char *)(a1 + 152))
      {
        if (*(unsigned char *)(a1 + 144)) {
          AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult((AMSCore::LoadNetworkBagResult *)(a1 + 24));
        }
        else {
          (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
        }
        *(unsigned char *)(a1 + 152) = 0;
      }
      std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), (const std::runtime_error *)v174);
      uint64_t v79 = *(void *)(a1 + 1352);
      *(void *)(a1 + 64) = v79;
      uint64_t v80 = a1 + 64;
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 1328);
      *(void *)(a1 + 24) = &unk_1EDC827D8;
      std::runtime_error v81 = (void *)(a1 + 1344);
      *(void *)(a1 + 56) = *(void *)(a1 + 1344);
      uint64_t v82 = *(void *)(a1 + 1360);
      *(void *)(a1 + 72) = v82;
      if (v82)
      {
        *(void *)(v79 + 16) = v80;
        *std::runtime_error v81 = a1 + 1352;
        *(void *)(a1 + 1352) = 0;
        *(void *)(a1 + 1360) = 0;
        uint64_t v79 = 0;
      }
      else
      {
        *(void *)(a1 + 56) = v80;
      }
      *(_OWORD *)(a1 + 80) = *(_OWORD *)v151;
      *(void *)uint64_t v151 = 0;
      *(void *)(v151 + 8) = 0;
      *(unsigned char *)(a1 + 144) = 0;
      *(unsigned char *)(a1 + 152) = 1;
      *(void *)(a1 + 1312) = &unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v81, (unsigned int *)v79);
      MEMORY[0x192FA3C30](v174);
      int v67 = 0;
      int v83 = 3;
      if (*(unsigned char *)(a1 + 1048))
      {
        *(void *)(a1 + 976) = &unk_1EDC827D8;
        uint64_t v84 = *(std::__shared_weak_count **)(a1 + 1040);
        if (v84 && !atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 1008, *v41);
        MEMORY[0x192FA3C30](v4);
        int v67 = 0;
        int v83 = 3;
      }
      if (*(unsigned char *)(a1 + 584)) {
        goto LABEL_130;
      }
LABEL_283:
      ((void (*)(std::runtime_error *))v3->~runtime_error)(v3);
      long long v86 = v165;
      if (!*(unsigned char *)(a1 + 2128)) {
        goto LABEL_286;
      }
      goto LABEL_284;
    }
LABEL_338:
    __break(1u);
    goto LABEL_339;
  }
  uint64_t v48 = *(void *)(a1 + 2664);
  if (!*(unsigned char *)(v48 + 88)) {
    goto LABEL_338;
  }
  unint64_t v49 = (const std::runtime_error *)(v48 + 8);
  char v50 = *(unsigned char *)(v48 + 80);
  if (v50)
  {
    *(void *)(a1 + 1856) = *(void *)(v48 + 8);
    p_unsigned __int8 imp = (std::__libcpp_refstring *)(v48 + 16);
    uint64_t v52 = (const char **)(a1 + 1864);
  }
  else
  {
    uint64_t v53 = a1 + 1896;
    std::runtime_error::runtime_error(v169, v49);
    *(_OWORD *)(a1 + 1872) = *(_OWORD *)(v48 + 24);
    *(void *)(a1 + 1856) = &unk_1EDC827D8;
    int v54 = (void *)(v48 + 48);
    uint64_t v55 = *(void *)(v48 + 48);
    *(void *)(a1 + 1888) = *(void *)(v48 + 40);
    *(void *)(a1 + 1896) = v55;
    uint64_t v56 = *(void *)(v48 + 56);
    *(void *)(a1 + 1904) = v56;
    if (v56)
    {
      *(void *)(v55 + 16) = v53;
      *(void *)(v48 + 40) = v54;
      *int v54 = 0;
      *(void *)(v48 + 56) = 0;
    }
    else
    {
      *(void *)(a1 + 1888) = v53;
    }
    uint64_t v57 = *(const std::runtime_error **)(a1 + 2664);
    int v58 = v57[4].__vftable;
    unint64_t v49 = v57 + 4;
    *(void *)(a1 + 1912) = v58;
    p_unsigned __int8 imp = &v49->__imp_;
    uint64_t v52 = (const char **)(a1 + 1920);
  }
  *uint64_t v52 = p_imp->__imp_;
  v49->__vftable = 0;
  v49->__imp_.__imp_ = 0;
  *(unsigned char *)(a1 + 1928) = v50;
  uint64_t v59 = *(void *)(a1 + 2672);
  if (v59 && !atomic_fetch_add((atomic_ullong *volatile)(v59 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    int v60 = *(std::__shared_weak_count **)(a1 + 2672);
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  long long v61 = (unsigned int **)(a1 + 984);
  long long v62 = *(std::__shared_weak_count **)(a1 + 984);
  if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
    std::__shared_weak_count::__release_weak(v62);
    unint64_t v63 = *(std::__shared_weak_count **)(a1 + 2536);
    if (!v63) {
      goto LABEL_94;
    }
  }
  else
  {
    unint64_t v63 = *(std::__shared_weak_count **)(a1 + 2536);
    if (!v63) {
      goto LABEL_94;
    }
  }
  if (!atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
    std::__shared_weak_count::__release_weak(v63);
  }
LABEL_94:
  AMSCore::ExecuteHTTPRequestTask::Options::~Options(v167);
  uint64_t v64 = *(std::__shared_weak_count **)(a1 + 968);
  if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
  }
  AMSCore::EncodeHTTPRequestTask::Options::~Options(v168);
  if (*(unsigned char *)(a1 + 1928))
  {
    uint64_t v65 = (uint64_t)v169->__vftable;
    int v66 = LOWORD(v169->__vftable[6].~runtime_error_0);
    if ((v66 - 200) < 0x64)
    {
      int v67 = 0;
      if (!*(unsigned char *)(a1 + 2128)) {
        goto LABEL_203;
      }
      AMSCore::HTTPResponse::getDecodedObject((AMSCore::HTTPResponse *)v169->__vftable);
      char v69 = *(unsigned char *)(v68 + 72);
      if (!v69)
      {
        AMSCore::Error::Error((std::runtime_error *)v4, (const std::runtime_error *)v68);
        *(unsigned char *)(a1 + 1048) = 0;
        goto LABEL_164;
      }
      *long long v61 = 0;
      *(void *)(a1 + 992) = 0;
      *uint64_t v4 = v61;
      uint64_t v70 = (const void ***)(v68 + 8);
      size_t v71 = *(const void ***)v68;
      if (*(void *)v68 == v68 + 8)
      {
        uint64_t v72 = 0;
        *(unsigned char *)(a1 + 1048) = v69;
        *(void *)(a1 + 2336) = 0;
        *(void *)(a1 + 2328) = 0;
      }
      else
      {
        do
        {
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)v4, (uint64_t *)(a1 + 984), v71 + 4, (long long *)v71 + 2);
          long long v73 = (const void **)v71[1];
          if (v73)
          {
            do
            {
              uint64_t v74 = (const void ***)v73;
              long long v73 = (const void **)*v73;
            }
            while (v73);
          }
          else
          {
            do
            {
              uint64_t v74 = (const void ***)v71[2];
              BOOL v75 = *v74 == v71;
              size_t v71 = (const void **)v74;
            }
            while (!v75);
          }
          size_t v71 = (const void **)v74;
        }
        while (v74 != v70);
        *(unsigned char *)(a1 + 1048) = v69;
        uint64_t v92 = *(void *)(a1 + 976);
        uint64_t v72 = *(void *)(a1 + 984);
        uint64_t v93 = *(void *)(a1 + 992);
        *(void *)(a1 + 2320) = v92;
        *(void *)(a1 + 2328) = v72;
        *(void *)(a1 + 2336) = v93;
        if (v93)
        {
          *(void *)(v72 + 16) = a1 + 2328;
          *uint64_t v4 = v61;
          *long long v61 = 0;
          *(void *)(a1 + 992) = 0;
          unsigned __int8 v5 = (std::string *)v173;
          goto LABEL_148;
        }
      }
      unsigned __int8 v5 = (std::string *)v173;
      uint64_t v92 = a1 + 2328;
      *(void *)(a1 + 2320) = a1 + 2328;
LABEL_148:
      uint64_t v94 = operator new(0x30uLL);
      v94[1] = 0;
      v94[2] = 0;
      v94[3] = v92;
      uint64_t v95 = v94 + 3;
      *uint64_t v94 = &unk_1EDC84358;
      v94[4] = v72;
      uint64_t v96 = v94 + 4;
      uint64_t v97 = *(void *)(a1 + 2336);
      v94[5] = v97;
      if (v97)
      {
        *(void *)(v72 + 16) = v96;
        *(void *)(a1 + 2320) = a1 + 2328;
        *(void *)(a1 + 2336) = 0;
        *(void *)(a1 + 2328) = 0;
      }
      else
      {
        *uint64_t v95 = v96;
      }
      *(void *)(a1 + 1832) = v95;
      long long v102 = *(std::__shared_weak_count **)(a1 + 1840);
      *(void *)(a1 + 1840) = v94;
      if (v102 && !atomic_fetch_add(&v102->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v147, *(unsigned int **)(a1 + 2328));
      if (*(unsigned char *)(a1 + 1048))
      {
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v4, *v61);
        goto LABEL_165;
      }
LABEL_164:
      ((void (*)(unsigned int ***))**v4)(v4);
LABEL_165:
      AMSCore::getValueByKey<std::vector<AMSCore::Any>,std::map<std::string,AMSCore::Any> const>((uint64_t)&v175, *(void *)(a1 + 1832), "urlCookies", 0xAuLL);
      if (v181)
      {
        AMSCore::toStringVector((std::vector<std::string> *)v4, (long long **)v175.__vftable);
        int v103 = v181;
        *(unsigned char *)(a1 + 1000) = 1;
        if (v103) {
          goto LABEL_170;
        }
      }
      else
      {
        *(unsigned char *)(a1 + 976) = 0;
        *(unsigned char *)(a1 + 1000) = 0;
      }
      ((void (*)(std::runtime_error *))v175.~runtime_error)(&v175);
LABEL_170:
      int v67 = 0;
      if (!AMSCore::cookiesUpdated(*(void *)(a1 + 1800), *(void *)(a1 + 1808), (unsigned __int8 ***)v4))
      {
LABEL_194:
        if (*(unsigned char *)(a1 + 1000))
        {
          long long v114 = (unsigned int *)*v4;
          if (*v4)
          {
            uint64_t v115 = *v61;
            uint64_t v116 = *v4;
            if (*v61 != v114)
            {
              do
              {
                if (*((char *)v115 - 1) < 0) {
                  operator delete(*((void **)v115 - 3));
                }
                v115 -= 6;
              }
              while (v115 != v114);
              uint64_t v116 = *v4;
            }
            *long long v61 = v114;
            operator delete(v116);
            unsigned __int8 v5 = (std::string *)v173;
          }
        }
LABEL_203:
        uint64_t v117 = (char *)operator new(0x19uLL);
        *(void *)(a1 + 976) = v117;
        *(void *)(a1 + 992) = 0x8000000000000019;
        *(void *)(a1 + 984) = 23;
        strcpy(v117, "X-Set-Apple-Store-Front");
        AMSCore::IHTTPHeaderMap::getSingleValueOrNone(v5, (void *)(v65 + 160), (char *)v4);
        if (*(char *)(a1 + 999) < 0)
        {
          operator delete(*v4);
          if (!*(unsigned char *)(a1 + 1960)) {
            goto LABEL_237;
          }
        }
        else if (!*(unsigned char *)(a1 + 1960))
        {
          goto LABEL_237;
        }
        if (*(unsigned char *)(a1 + 1760))
        {
          uint64_t v118 = *(unsigned __int8 *)(a1 + 1759);
          if ((v118 & 0x80u) == 0) {
            uint64_t v119 = *(unsigned __int8 *)(a1 + 1759);
          }
          else {
            uint64_t v119 = *(void *)(a1 + 1744);
          }
          uint64_t v120 = *(unsigned __int8 *)(a1 + 1959);
          int v121 = (char)v120;
          if ((v120 & 0x80u) != 0) {
            uint64_t v120 = *(void *)(a1 + 1944);
          }
          if (v119 == v120)
          {
            if (v121 >= 0) {
              uint64_t v122 = v5;
            }
            else {
              uint64_t v122 = (std::string *)v5->__r_.__value_.__r.__words[0];
            }
            if ((v118 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v166, v122, *(void *)(a1 + 1744))) {
                goto LABEL_237;
              }
            }
            else
            {
              if (!*(unsigned char *)(a1 + 1759)) {
                goto LABEL_237;
              }
              long long v123 = v166;
              while (*(unsigned __int8 *)v123 == v122->__r_.__value_.__s.__data_[0])
              {
                long long v123 = (AMSCore::LoadNetworkBagResult *)((char *)v123 + 1);
                uint64_t v122 = (std::string *)((char *)v122 + 1);
                if (!--v118) {
                  goto LABEL_237;
                }
              }
            }
          }
        }
        *unint64_t v162 = (uint64_t)v5;
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v4);
        AMSCore::Logger::log<char [65],AMSCore::Log::Redact<std::string>>((uint64_t)*v4, v162);
        uint64_t v124 = *v61;
        if (*v61 && !atomic_fetch_add((atomic_ullong *volatile)v124 + 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          (*(void (**)(unsigned int *))(*(void *)v124 + 16))(v124);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v124);
        }
        if (!*(unsigned char *)(a1 + 1960)) {
          goto LABEL_338;
        }
        if (*(char *)(a1 + 1959) < 0)
        {
          std::string::__init_copy_ctor_external(v150, *(const std::string::value_type **)(a1 + 1936), *(void *)(a1 + 1944));
        }
        else
        {
          *(_OWORD *)&v150->__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
          v150->__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
        }
        if (*(unsigned char *)(a1 + 1760))
        {
          if (*(char *)(a1 + 1759) < 0) {
            operator delete(*(void **)v166);
          }
          *(_OWORD *)unint64_t v166 = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
          *((void *)v166 + 2) = *((void *)&v150->__r_.__value_.__l + 2);
          *(unsigned char *)(a1 + 2487) = 0;
          *(unsigned char *)(a1 + 2464) = 0;
        }
        else
        {
          *(_OWORD *)unint64_t v166 = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
          *((void *)v166 + 2) = *((void *)&v150->__r_.__value_.__l + 2);
          v150->__r_.__value_.__l.__size_ = 0;
          v150->__r_.__value_.__r.__words[2] = 0;
          v150->__r_.__value_.__r.__words[0] = 0;
          *(unsigned char *)(a1 + 1760) = 1;
        }
        int v67 = 1;
        *(unsigned char *)(a1 + 1824) = 1;
LABEL_237:
        AMSCore::getStorefrontSuffix((std::string *)v4, *(void *)(a1 + 1832), "storefront-header-suffix", 0x18uLL);
        if (!*(unsigned char *)(a1 + 1000)) {
          goto LABEL_268;
        }
        if (*(unsigned char *)(a1 + 1792))
        {
          uint64_t v125 = *(unsigned __int8 *)(a1 + 1791);
          if ((v125 & 0x80u) == 0) {
            uint64_t v126 = *(unsigned __int8 *)(a1 + 1791);
          }
          else {
            uint64_t v126 = *(void *)(a1 + 1776);
          }
          uint64_t v127 = *(unsigned __int8 *)(a1 + 999);
          int v128 = (char)v127;
          if ((v127 & 0x80u) != 0) {
            uint64_t v127 = *(void *)(a1 + 984);
          }
          if (v126 == v127)
          {
            if (v128 >= 0) {
              long long v129 = (unsigned __int8 *)v4;
            }
            else {
              long long v129 = (unsigned __int8 *)*v4;
            }
            if ((v125 & 0x80) == 0)
            {
              if (*(unsigned char *)(a1 + 1791))
              {
                long long v130 = (unsigned __int8 *)(a1 + 1768);
                while (*v130 == *v129)
                {
                  ++v130;
                  ++v129;
                  if (!--v125) {
                    goto LABEL_268;
                  }
                }
                goto LABEL_255;
              }
LABEL_268:
              v132.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
              AMSCore::HTTPResponse::getCacheControlTimePointIfDefined((uint64_t)&v175, v65, v132.__d_.__rep_, 1);
              if (v181) {
                v132.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v175.__vftable;
              }
              else {
                ((void (*)(std::runtime_error *))v175.~runtime_error)(&v175);
              }
              *(std::chrono::system_clock::time_point *)(a1 + 1848) = v132;
              if (*(unsigned char *)(a1 + 1000) && *(char *)(a1 + 999) < 0) {
                operator delete(*v4);
              }
              int v83 = 0;
              if (*(unsigned char *)(a1 + 1960) && *(char *)(a1 + 1959) < 0)
              {
                operator delete(v173->__vftable);
                int v83 = 0;
              }
              goto LABEL_277;
            }
            if (!memcmp(*(const void **)(a1 + 1768), v129, *(void *)(a1 + 1776))) {
              goto LABEL_268;
            }
          }
        }
LABEL_255:
        *uint64_t v152 = (uint64_t)v4;
        AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v162);
        AMSCore::Logger::log<char [78],AMSCore::Log::Redact<std::string>>(*v162, v152);
        uint64_t v131 = *(std::__shared_weak_count **)(a1 + 2520);
        if (v131 && !atomic_fetch_add(&v131->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
          std::__shared_weak_count::__release_weak(v131);
        }
        if (!*(unsigned char *)(a1 + 1000)) {
          goto LABEL_338;
        }
        if (*(char *)(a1 + 999) < 0)
        {
          std::string::__init_copy_ctor_external(v149, (const std::string::value_type *)*v4, (std::string::size_type)*v61);
        }
        else
        {
          *(_OWORD *)&v149->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
          v149->__r_.__value_.__r.__words[2] = (std::string::size_type)v4[2];
        }
        if (*(unsigned char *)(a1 + 1792))
        {
          if (*(char *)(a1 + 1791) < 0) {
            operator delete(*(void **)(a1 + 1768));
          }
          *(_OWORD *)(a1 + 1768) = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
          *(void *)(a1 + 1784) = *((void *)&v149->__r_.__value_.__l + 2);
          *(unsigned char *)(a1 + 2367) = 0;
          *(unsigned char *)(a1 + 2344) = 0;
        }
        else
        {
          *(_OWORD *)(a1 + 1768) = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
          *(void *)(a1 + 1784) = *((void *)&v149->__r_.__value_.__l + 2);
          v149->__r_.__value_.__l.__size_ = 0;
          v149->__r_.__value_.__r.__words[2] = 0;
          v149->__r_.__value_.__r.__words[0] = 0;
          *(unsigned char *)(a1 + 1792) = 1;
        }
        int v67 = 1;
        *(unsigned char *)(a1 + 1825) = 1;
        goto LABEL_268;
      }
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v5);
      AMSCore::Logger::log<char [42]>(v5->__r_.__value_.__r.__words[0]);
      uint64_t v104 = *(std::__shared_weak_count **)(a1 + 1944);
      if (v104 && !atomic_fetch_add(&v104->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
        if (*(unsigned char *)(a1 + 1000)) {
          goto LABEL_174;
        }
      }
      else if (*(unsigned char *)(a1 + 1000))
      {
LABEL_174:
        *uint64_t v148 = 0;
        v148[1] = 0;
        v148[2] = 0;
        std::vector<std::string>::__init_with_size[abi:fe180100]<std::string*,std::string*>(v148, (uint64_t)*v4, (uint64_t)*v61, 0xAAAAAAAAAAAAAAABLL * (((char *)*v61 - (char *)*v4) >> 3));
        uint64_t v105 = *(void *)(a1 + 1800);
        if (v105)
        {
          uint64_t v106 = *(void *)(a1 + 1808);
          char v107 = *(void **)(a1 + 1800);
          if (v106 != v105)
          {
            do
            {
              if (*(char *)(v106 - 1) < 0) {
                operator delete(*(void **)(v106 - 24));
              }
              v106 -= 24;
            }
            while (v106 != v105);
            char v107 = *(void **)(a1 + 1800);
          }
          *(void *)(a1 + 1808) = v105;
          operator delete(v107);
        }
        std::runtime_error v108 = (void *)(a1 + 2432);
        long long v109 = (void *)(a1 + 2424);
        uint64_t v110 = v148;
LABEL_193:
        *(void *)(a1 + 1800) = *v110;
        *(void *)(a1 + 1808) = *v109;
        *(void *)(a1 + 1816) = *v108;
        *uint64_t v110 = 0;
        v110[1] = 0;
        v110[2] = 0;
        int v67 = 1;
        *(unsigned char *)(a1 + 1826) = 1;
        goto LABEL_194;
      }
      uint64_t v111 = *(void *)(a1 + 1800);
      if (v111)
      {
        uint64_t v112 = *(void *)(a1 + 1808);
        long long v113 = *(void **)(a1 + 1800);
        if (v112 != v111)
        {
          do
          {
            if (*(char *)(v112 - 1) < 0) {
              operator delete(*(void **)(v112 - 24));
            }
            v112 -= 24;
          }
          while (v112 != v111);
          long long v113 = *(void **)(a1 + 1800);
        }
        *(void *)(a1 + 1808) = v111;
        operator delete(v113);
      }
      std::runtime_error v108 = (void *)(a1 + 2456);
      long long v109 = (void *)(a1 + 2448);
      uint64_t v110 = v146;
      goto LABEL_193;
    }
    *(void *)(a1 + 1952) = 0;
    *(void *)(a1 + 1944) = 0;
    *(void *)(a1 + 1936) = a1 + 1944;
    *(_WORD *)(a1 + 976) = v66;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_unique_impl<char const* const&,AMSCore::HTTPResponse::StatusCode>((uint64_t **)v5, v66);
    *(_DWORD *)unint64_t v162 = 301;
    *(_WORD *)uint64_t v152 = *(_WORD *)(v65 + 152);
    AMSCore::Unexpected<AMSCore::Error,AMSCore::NetworkErrorCode,std::map<std::string,AMSCore::Any>,char const(&)[33],AMSCore::HTTPResponse::StatusCode>((uint64_t)v4, 0x12Du, v5);
    if (*(unsigned char *)(a1 + 152))
    {
      if (*(unsigned char *)(a1 + 144)) {
        AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult((AMSCore::LoadNetworkBagResult *)(a1 + 24));
      }
      else {
        (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
      }
      *(unsigned char *)(a1 + 152) = 0;
    }
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), (const std::runtime_error *)v4);
    uint64_t v98 = *(void *)(a1 + 1016);
    *(void *)(a1 + 64) = v98;
    uint64_t v99 = a1 + 64;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 992);
    *(void *)(a1 + 24) = &unk_1EDC827D8;
    long long v100 = (void *)(a1 + 1008);
    *(void *)(a1 + 56) = *(void *)(a1 + 1008);
    uint64_t v101 = *(void *)(a1 + 1024);
    *(void *)(a1 + 72) = v101;
    if (v101)
    {
      *(void *)(v98 + 16) = v99;
      *long long v100 = a1 + 1016;
      *(void *)(a1 + 1016) = 0;
      *(void *)(a1 + 1024) = 0;
      uint64_t v98 = 0;
    }
    else
    {
      *(void *)(a1 + 56) = v99;
    }
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v161;
    *(void *)uint64_t v161 = 0;
    *(void *)(v161 + 8) = 0;
    *(unsigned char *)(a1 + 144) = 0;
    *(unsigned char *)(a1 + 152) = 1;
    *(void *)(a1 + 976) = &unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v100, (unsigned int *)v98);
    MEMORY[0x192FA3C30](v4);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v5, *(unsigned int **)(a1 + 1944));
LABEL_157:
    int v67 = 0;
    int v83 = 3;
    goto LABEL_277;
  }
  unint64_t v76 = (unsigned int **)(a1 + 1016);
  std::runtime_error::runtime_error((std::runtime_error *)v4, v169);
  *(_OWORD *)(a1 + 992) = *(_OWORD *)(a1 + 1872);
  *(void *)(a1 + 976) = &unk_1EDC827D8;
  *(void *)(a1 + 1008) = *(void *)(a1 + 1888);
  uint64_t v77 = *(void *)(a1 + 1896);
  *(void *)(a1 + 1016) = v77;
  uint64_t v78 = *(void *)(a1 + 1904);
  *(void *)(a1 + 1024) = v78;
  if (v78)
  {
    *(void *)(v77 + 16) = v76;
    *(void *)(a1 + 1888) = a1 + 1896;
    *(void *)(a1 + 1896) = 0;
    *(void *)(a1 + 1904) = 0;
  }
  else
  {
    *(void *)(a1 + 1008) = v76;
  }
  *(_OWORD *)uint64_t v161 = *(_OWORD *)(v2 + 112);
  *(void *)(v2 + 112) = 0;
  *(void *)(v2 + 120) = 0;
  *(unsigned char *)(a1 + 1048) = 1;
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v173, (uint64_t)v4);
  if (*(unsigned char *)(a1 + 152))
  {
    if (*(unsigned char *)(a1 + 144)) {
      AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult((AMSCore::LoadNetworkBagResult *)(a1 + 24));
    }
    else {
      (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
    }
    *(unsigned char *)(a1 + 152) = 0;
  }
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), v173);
  uint64_t v87 = *(void *)(a1 + 1976);
  *(void *)(a1 + 64) = v87;
  uint64_t v88 = a1 + 64;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 1952);
  *(void *)(a1 + 24) = &unk_1EDC827D8;
  long long v89 = (void *)(a1 + 1968);
  *(void *)(a1 + 56) = *(void *)(a1 + 1968);
  uint64_t v90 = *(void *)(a1 + 1984);
  *(void *)(a1 + 72) = v90;
  if (v90)
  {
    *(void *)(v87 + 16) = v88;
    *long long v89 = a1 + 1976;
    *(void *)(a1 + 1976) = 0;
    *(void *)(a1 + 1984) = 0;
    uint64_t v87 = 0;
  }
  else
  {
    *(void *)(a1 + 56) = v88;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(v2 + 192);
  *(void *)(v2 + 192) = 0;
  *(void *)(v2 + 200) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 152) = 1;
  *(void *)(a1 + 1936) = &unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v89, (unsigned int *)v87);
  MEMORY[0x192FA3C30](v173);
  int v67 = 0;
  int v83 = 3;
  if (*(unsigned char *)(a1 + 1048))
  {
    *(void *)(a1 + 976) = &unk_1EDC827D8;
    uint64_t v91 = *(std::__shared_weak_count **)(a1 + 1040);
    if (v91 && !atomic_fetch_add(&v91->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 1008, *v76);
    MEMORY[0x192FA3C30](v4);
    goto LABEL_157;
  }
LABEL_277:
  if (*(unsigned char *)(a1 + 1928))
  {
    char v133 = *(std::__shared_weak_count **)(a1 + 1864);
    if (v133 && !atomic_fetch_add(&v133->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  else
  {
    ((void (*)(std::runtime_error *))v169->~runtime_error)(v169);
  }
  AMSCore::ExecuteHTTPRequestTask::Options::~Options(v174);
  if (!*(unsigned char *)(a1 + 584)) {
    goto LABEL_283;
  }
LABEL_130:
  uint64_t v85 = *(std::__shared_weak_count **)(a1 + 576);
  long long v86 = v165;
  if (v85 && !atomic_fetch_add(&v85->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
    std::__shared_weak_count::__release_weak(v85);
  }
  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)&v3->__vftable);
  if (*(unsigned char *)(a1 + 2128))
  {
LABEL_284:
    if (*(char *)(a1 + 2127) < 0) {
      operator delete(v170->__r_.__value_.__l.__data_);
    }
  }
LABEL_286:
  if (v83) {
    goto LABEL_335;
  }
  if (*v172 <= 2 && v67)
  {
    ++*v172;
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v3);
    AMSCore::Logger::log<char [28],int>((uint64_t)v3->__vftable);
    unint64_t v134 = *(std::__shared_weak_count **)(a1 + 208);
    if (v134 && !atomic_fetch_add(&v134->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
    unsigned int v135 = *(unsigned __int8 *)(a1 + 2693);
    AMSCore::LoadNetworkBagTask::buildStorefront(v170, (uint64_t)v166, (char *)(a1 + 1768));
    if (v135 < 3)
    {
      if (*(char *)(a1 + 2079) < 0)
      {
        std::string::__init_copy_ctor_external(v86, *(const std::string::value_type **)(a1 + 2056), *(void *)(a1 + 2064));
      }
      else
      {
        *(_OWORD *)&v86->__r_.__value_.__l.__data_ = *(_OWORD *)v158;
        v86->__r_.__value_.__r.__words[2] = *(void *)(v158 + 16);
      }
      if (*(char *)(a1 + 2103) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a1 + 2032), *(const std::string::value_type **)(a1 + 2080), *(void *)(a1 + 2088));
      }
      else
      {
        *(_OWORD *)(a1 + 2032) = *(_OWORD *)(a1 + 2080);
        *(void *)(a1 + 2048) = *(void *)(a1 + 2096);
      }
      *(unsigned char *)(a1 + 2168) = 0;
      *(unsigned char *)(a1 + 2192) = 0;
      if (*(unsigned char *)(a1 + 2128))
      {
        if (*(char *)(a1 + 2127) < 0)
        {
          std::string::__init_copy_ctor_external(v171, *(const std::string::value_type **)(a1 + 2104), *(void *)(a1 + 2112));
        }
        else
        {
          *(_OWORD *)&v171->__r_.__value_.__l.__data_ = *(_OWORD *)&v170->__r_.__value_.__l.__data_;
          v171->__r_.__value_.__r.__words[2] = v170->__r_.__value_.__r.__words[2];
        }
        *(unsigned char *)(a1 + 2192) = 1;
      }
      *__n128 v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
      std::vector<std::string>::__init_with_size[abi:fe180100]<std::string*,std::string*>(v7, *(void *)(a1 + 1800), *(void *)(a1 + 1808), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 1808) - *(void *)(a1 + 1800)) >> 3));
      uint64_t v136 = *(void *)(a1 + 2624);
      *(void *)(a1 + 2576) = *(void *)(a1 + 2616);
      *(void *)(a1 + 2584) = v136;
      if (v136) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v136 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v137 = *(void *)(a1 + 2640);
      *(void *)(a1 + 2560) = *(void *)(a1 + 2632);
      *(void *)(a1 + 2568) = v137;
      if (v137) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v137 + 8), 1uLL, memory_order_relaxed);
      }
      AMSCore::LoadNetworkBagTask::encodeHTTPRequest((uint64_t)v4, (uint64_t)v86, (uint64_t *)v171, v7, v163, v164, (v135 & 7) == 2);
    }
LABEL_339:
    std::terminate();
  }
  if (*(unsigned char *)(a1 + 1760))
  {
    if (*(void *)(*(void *)(v2 + 32) + 16))
    {
      AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v175);
      AMSCore::Logger::log<char [30],std::tuple<std::string,std::string>>((uint64_t)v175.__vftable, v158);
      unsigned __int8 imp = (std::__shared_weak_count *)v175.__imp_.__imp_;
      if (v175.__imp_.__imp_
        && !atomic_fetch_add((atomic_ullong *volatile)v175.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
        std::__shared_weak_count::__release_weak(imp);
      }
      if (*(unsigned char *)(a1 + 152))
      {
        uint64_t v139 = (AMSCore::LoadNetworkBagResult *)(a1 + 24);
        if (*(unsigned char *)(a1 + 144)) {
          AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult(v139);
        }
        else {
          (**(void (***)(AMSCore::LoadNetworkBagResult *))v139)(v139);
        }
        *(unsigned char *)(a1 + 152) = 0;
      }
      *(unsigned char *)(a1 + 24) = 0;
      *(unsigned char *)(a1 + 48) = 0;
      if (*(unsigned char *)(a1 + 1760))
      {
        *(_OWORD *)(a1 + 24) = *(_OWORD *)v166;
        *(void *)(a1 + 40) = *((void *)v166 + 2);
        *((void *)v166 + 1) = 0;
        *((void *)v166 + 2) = 0;
        *(void *)unint64_t v166 = 0;
        *(unsigned char *)(a1 + 48) = 1;
      }
      *(unsigned char *)(a1 + 56) = 0;
      *(unsigned char *)(a1 + 80) = 0;
      if (*(unsigned char *)(a1 + 1792))
      {
        *(void *)(a1 + 72) = *(void *)(a1 + 1784);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a1 + 1768);
        *(void *)(a1 + 1784) = 0;
        *(void *)(a1 + 1768) = 0;
        *(void *)(a1 + 1776) = 0;
        *(unsigned char *)(a1 + 80) = 1;
      }
      *(_OWORD *)(a1 + 88) = *(_OWORD *)v2;
      *(void *)(a1 + 104) = *(void *)(a1 + 1816);
      *(void *)(v2 + 8) = 0;
      *(void *)(v2 + 16) = 0;
      *(void *)uint64_t v2 = 0;
      *(_WORD *)(a1 + 112) = *(_WORD *)(a1 + 1824);
      *(unsigned char *)(a1 + 114) = *(unsigned char *)(a1 + 1826);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(v2 + 32);
      *(void *)(v2 + 32) = 0;
      *(void *)(v2 + 40) = 0;
      *(void *)(a1 + 136) = *(void *)(a1 + 1848);
      *(unsigned char *)(a1 + 144) = 1;
      *(unsigned char *)(a1 + 152) = 1;
      goto LABEL_335;
    }
    AMSCore::Unexpected<AMSCore::Error,AMSCore::NetworkErrorCode>((uint64_t)&v175, 0x137u);
  }
  else
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::BagErrorCode>((uint64_t)&v175, 0xCEu);
  }
  if (*(unsigned char *)(a1 + 152))
  {
    if (*(unsigned char *)(a1 + 144)) {
      AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult((AMSCore::LoadNetworkBagResult *)(a1 + 24));
    }
    else {
      (**(void (***)(uint64_t))(a1 + 24))(a1 + 24);
    }
    *(unsigned char *)(a1 + 152) = 0;
  }
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 24), &v175);
  long long v140 = v176;
  char v142 = v177;
  uint64_t v141 = v178;
  *(void *)(a1 + 64) = v178;
  uint64_t v143 = a1 + 64;
  *(_OWORD *)(a1 + 40) = v140;
  *(void *)(a1 + 24) = &unk_1EDC827D8;
  uint64_t v144 = v179;
  *(void *)(a1 + 56) = v142;
  *(void *)(a1 + 72) = v144;
  if (v144)
  {
    *(void *)(v141 + 16) = v143;
    char v177 = &v178;
    uint64_t v178 = 0;
    uint64_t v179 = 0;
    uint64_t v141 = 0;
  }
  else
  {
    *(void *)(a1 + 56) = v143;
  }
  *(_OWORD *)(a1 + 80) = v180;
  long long v180 = 0uLL;
  *(unsigned char *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 152) = 1;
  v175.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v177, (unsigned int *)v141);
  MEMORY[0x192FA3C30](&v175);
LABEL_335:
  AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult(v166);
  if (*(char *)(a1 + 2415) < 0) {
    operator delete(*(void **)(a1 + 2392));
  }
  *(void *)(a1 + 2680) = a1;
  *(void *)(a1 + 200) = v145;
  *(void *)a1 = 0;
  AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v3);
}

void sub_18DA8C820(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,AMSCore::ExecuteHTTPRequestTask::HandlerType *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,AMSCore::LoadNetworkBagResult *a33,AMSCore::ExecuteHTTPRequestTask::Options *a34,AMSCore::EncodeHTTPRequestTask::Result *a35,uint64_t a36)
{
  AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult(a33);
  if (*(char *)(v36 + 2415) < 0) {
    operator delete(*(void **)(v36 + 2392));
  }
  __cxa_begin_catch(a1);
  AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DA8CA50()
{
}

void AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(char *__p)
{
  uint64_t v2 = (void **)(__p + 200);
  if (!*(void *)__p) {
    goto LABEL_53;
  }
  if (!__p[2692])
  {
    uint64_t v9 = *((void *)__p + 332);
    if (v9 && !atomic_fetch_add((atomic_ullong *volatile)(v9 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      char v10 = (std::__shared_weak_count *)*((void *)__p + 332);
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    uint64_t v11 = (std::__shared_weak_count *)*((void *)__p + 123);
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = (std::__shared_weak_count *)*((void *)__p + 321);
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    int64_t v13 = (std::__shared_weak_count *)*((void *)__p + 323);
    if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v14 = *((void *)__p + 287);
    if (v14)
    {
      uint64_t v15 = *((void *)__p + 288);
      uint64_t v16 = (void *)*((void *)__p + 287);
      if (v15 != v14)
      {
        do
        {
          if (*(char *)(v15 - 1) < 0) {
            operator delete(*(void **)(v15 - 24));
          }
          v15 -= 24;
        }
        while (v15 != v14);
        uint64_t v16 = (void *)*((void *)__p + 287);
      }
      *((void *)__p + 288) = v14;
      operator delete(v16);
    }
    if (__p[2192] && __p[2191] < 0) {
      operator delete(*((void **)__p + 271));
    }
    if (__p[2055] < 0)
    {
      operator delete(*((void **)__p + 254));
      if ((__p[2031] & 0x80000000) == 0)
      {
LABEL_48:
        if (!__p[2128]) {
          goto LABEL_51;
        }
        goto LABEL_49;
      }
    }
    else if ((__p[2031] & 0x80000000) == 0)
    {
      goto LABEL_48;
    }
    operator delete(*((void **)__p + 251));
    if (!__p[2128]) {
      goto LABEL_51;
    }
LABEL_49:
    if (__p[2127] < 0) {
      operator delete(*((void **)__p + 263));
    }
    goto LABEL_51;
  }
  uint64_t v3 = *((void *)__p + 334);
  if (v3 && !atomic_fetch_add((atomic_ullong *volatile)(v3 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 334);
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  unsigned __int8 v5 = (std::__shared_weak_count *)*((void *)__p + 123);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  __n128 v6 = (std::__shared_weak_count *)*((void *)__p + 317);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(__p + 1144));
  __n128 v7 = (std::__shared_weak_count *)*((void *)__p + 121);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)__p + 74);
  AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(__p + 1312));
  if (__p[584])
  {
    uint64_t v8 = (std::__shared_weak_count *)*((void *)__p + 72);
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options(v2);
    if (!__p[2128]) {
      goto LABEL_51;
    }
    goto LABEL_49;
  }
  (*(void (**)(void **))*v2)(v2);
  if (__p[2128]) {
    goto LABEL_49;
  }
LABEL_51:
  AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult((AMSCore::LoadNetworkBagResult *)(__p + 1736));
  if (__p[2415] < 0) {
    operator delete(*((void **)__p + 299));
  }
LABEL_53:
  uint64_t v17 = (char *)*((void *)__p + 24);
  if (v17 == __p + 168)
  {
    (*(void (**)(char *))(*((void *)__p + 21) + 32))(__p + 168);
    if (!__p[152]) {
      goto LABEL_62;
    }
    goto LABEL_59;
  }
  if (v17) {
    (*(void (**)(char *))(*(void *)v17 + 40))(v17);
  }
  if (__p[152])
  {
LABEL_59:
    uint64_t v18 = (AMSCore::LoadNetworkBagResult *)(__p + 24);
    if (__p[144]) {
      AMSCore::LoadNetworkBagResult::~LoadNetworkBagResult(v18);
    }
    else {
      (**(void (***)(AMSCore::LoadNetworkBagResult *))v18)(v18);
    }
  }
LABEL_62:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  uint64_t v19 = (char *)*((void *)__p + 278);
  if (v19 == __p + 2200)
  {
    (*(void (**)(char *))(*((void *)__p + 275) + 32))(__p + 2200);
    uint64_t v20 = (std::__shared_weak_count *)*((void *)__p + 325);
    if (!v20) {
      goto LABEL_71;
    }
  }
  else
  {
    if (v19) {
      (*(void (**)(char *))(*(void *)v19 + 40))(v19);
    }
    uint64_t v20 = (std::__shared_weak_count *)*((void *)__p + 325);
    if (!v20)
    {
LABEL_71:
      if (!__p[1728]) {
        goto LABEL_79;
      }
      goto LABEL_72;
    }
  }
  if (atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_71;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (!__p[1728]) {
    goto LABEL_79;
  }
LABEL_72:
  if ((__p[1727] & 0x80000000) == 0)
  {
    if (__p[1680]) {
      goto LABEL_74;
    }
LABEL_79:
    (**((void (***)(void))__p + 201))();
    uint64_t v21 = *((void *)__p + 330);
    if (!v21) {
      goto LABEL_82;
    }
    goto LABEL_80;
  }
  operator delete(*((void **)__p + 213));
  if (!__p[1680]) {
    goto LABEL_79;
  }
LABEL_74:
  uint64_t v21 = *((void *)__p + 330);
  if (!v21) {
    goto LABEL_82;
  }
LABEL_80:
  if (!atomic_fetch_add((atomic_ullong *volatile)(v21 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v22 = (std::__shared_weak_count *)*((void *)__p + 330);
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_82:
  uint64_t v23 = *((void *)__p + 328);
  if (!v23 || atomic_fetch_add((atomic_ullong *volatile)(v23 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((__p[2103] & 0x80000000) == 0) {
      goto LABEL_85;
    }
LABEL_90:
    operator delete(*((void **)__p + 260));
    if ((__p[2079] & 0x80000000) == 0) {
      goto LABEL_86;
    }
    goto LABEL_91;
  }
  uint64_t v24 = (std::__shared_weak_count *)*((void *)__p + 328);
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  if (__p[2103] < 0) {
    goto LABEL_90;
  }
LABEL_85:
  if ((__p[2079] & 0x80000000) == 0) {
    goto LABEL_86;
  }
LABEL_91:
  operator delete(*((void **)__p + 257));
LABEL_86:
  operator delete(__p);
}

uint64_t AMSCore::Logger::log<char [28],int>(uint64_t result)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= 2u)
  {
    uint64_t v1 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v6);
    uint64_t v2 = *(void *)(v6[0] - 24);
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v6, (uint64_t)"Loading the bag. attempt = ", 27);
    std::ostream::operator<<();
    uint64_t v3 = v6[6];
    uint64_t v4 = (char *)v6 + *(void *)(v6[0] - 24);
    if ((v4[32] & 5) != 0)
    {
      uint64_t v5 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v4 + 5) + 32))(&rep);
      uint64_t v5 = v13;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v10 = 2;
    uint64_t v11 = v3;
    uint64_t v12 = v5;
    (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v1 + 16) + 16))(*(void *)(v1 + 16), "bag", 3, &rep);
    v6[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v6[1] = MEMORY[0x1E4FBA470] + 16;
    if (v7 < 0) {
      operator delete((void *)v6[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v8);
  }
  return result;
}

void sub_18DA8D3E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::invoke[abi:fe180100]<std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__repr::__repr[abi:fe180100]<std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__union_t const&>(BOOL,std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__union_t const&)::{lambda(void)#1}>(std::runtime_error *this, char a2, AMSCore::Error *a3)
{
  if (a2)
  {
    char v5 = *((unsigned char *)a3 + 72);
    if (v5) {
      this->__vftable = *(std::runtime_error_vtbl **)a3;
    }
    else {
      AMSCore::Error::Error(this, (const std::runtime_error *)a3);
    }
    LOBYTE(this[4].__imp_.__imp_) = v5;
    this[5] = *((std::runtime_error *)a3 + 5);
    __n128 v6 = (std::string *)&this[6];
    if (*((char *)a3 + 119) < 0)
    {
      std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a3 + 12), *((void *)a3 + 13));
    }
    else
    {
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *((_OWORD *)a3 + 6);
      this[7].__vftable = (std::runtime_error_vtbl *)*((void *)a3 + 14);
    }
  }
  else
  {
    AMSCore::Error::Error(this, (const std::runtime_error *)a3);
  }
}

void sub_18DA8D4D0(_Unwind_Exception *exception_object)
{
  if (!*(unsigned char *)(v1 + 72)) {
    (**(void (***)(uint64_t))v1)(v1);
  }
  _Unwind_Resume(exception_object);
}

AMSCore::ExecuteHTTPRequestTask::Options *AMSCore::ExecuteHTTPRequestTask::Options::Options(AMSCore::ExecuteHTTPRequestTask::Options *this, const AMSCore::ExecuteHTTPRequestTask::Options *a2)
{
  *((void *)this + 1) = 0;
  uint64_t v4 = (uint64_t *)((char *)this + 8);
  *((void *)this + 2) = 0;
  *(void *)this = (char *)this + 8;
  char v5 = (const AMSCore::ExecuteHTTPRequestTask::Options **)((char *)a2 + 8);
  __n128 v6 = *(const AMSCore::ExecuteHTTPRequestTask::Options **)a2;
  if (*(const AMSCore::ExecuteHTTPRequestTask::Options **)a2 != (const AMSCore::ExecuteHTTPRequestTask::Options *)((char *)a2 + 8))
  {
    do
    {
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)this, v4, (const void **)v6 + 4, (long long *)v6 + 2);
      char v10 = (const AMSCore::ExecuteHTTPRequestTask::Options *)*((void *)v6 + 1);
      if (v10)
      {
        do
        {
          uint64_t v11 = (const AMSCore::ExecuteHTTPRequestTask::Options **)v10;
          char v10 = *(const AMSCore::ExecuteHTTPRequestTask::Options **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (const AMSCore::ExecuteHTTPRequestTask::Options **)*((void *)v6 + 2);
          BOOL v12 = *v11 == v6;
          __n128 v6 = (const AMSCore::ExecuteHTTPRequestTask::Options *)v11;
        }
        while (!v12);
      }
      __n128 v6 = (const AMSCore::ExecuteHTTPRequestTask::Options *)v11;
    }
    while (v11 != v5);
  }
  uint64_t v7 = *((void *)a2 + 4);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)this + 4) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *((void *)a2 + 6);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)this + 6) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *((unsigned char *)this + 56) = 0;
  *((unsigned char *)this + 80) = 0;
  if (*((unsigned char *)a2 + 80))
  {
    if (*((char *)a2 + 79) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)((char *)this + 56), *((const std::string::value_type **)a2 + 7), *((void *)a2 + 8));
    }
    else
    {
      long long v9 = *(_OWORD *)((char *)a2 + 56);
      *((void *)this + 9) = *((void *)a2 + 9);
      *(_OWORD *)((char *)this + 56) = v9;
    }
    *((unsigned char *)this + 80) = 1;
  }
  *((unsigned char *)this + 88) = 0;
  *((_DWORD *)this + 26) = -1;
  uint64_t v13 = *((unsigned int *)a2 + 26);
  if (v13 != -1)
  {
    ((void (*)(char *, char *, char *))off_1EDCA5420[v13])(v17, (char *)this + 88, (char *)a2 + 88);
    *((_DWORD *)this + 26) = v13;
  }
  long long v14 = *((_OWORD *)a2 + 7);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_OWORD *)this + 7) = v14;
  uint64_t v15 = (const AMSCore::ExecuteHTTPRequestTask::Options *)*((void *)a2 + 20);
  if (v15)
  {
    if (v15 == (const AMSCore::ExecuteHTTPRequestTask::Options *)((char *)a2 + 136))
    {
      *((void *)this + 20) = (char *)this + 136;
      (*(void (**)(void))(**((void **)a2 + 20) + 24))(*((void *)a2 + 20));
      return this;
    }
    uint64_t v15 = (const AMSCore::ExecuteHTTPRequestTask::Options *)(*(uint64_t (**)(const AMSCore::ExecuteHTTPRequestTask::Options *))(*(void *)v15 + 16))(v15);
  }
  *((void *)this + 20) = v15;
  return this;
}

void sub_18DA8D700(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 80))
  {
    if (*(char *)(v1 + 79) < 0) {
      operator delete(*v4);
    }
  }
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v3);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v2);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v1, *(unsigned int **)(v1 + 8));
  _Unwind_Resume(a1);
}

void AMSCore::ExecuteHTTPRequestTask::Options::~Options(AMSCore::ExecuteHTTPRequestTask::Options *this)
{
  uint64_t v2 = (char *)this + 136;
  uint64_t v3 = (char *)*((void *)this + 20);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = *((unsigned int *)this + 26);
  if (v4 != -1) {
    ((void (*)(char *, char *))off_1EDCA5410[v4])(&v7, (char *)this + 88);
  }
  *((_DWORD *)this + 26) = -1;
  if (*((unsigned char *)this + 80) && *((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  char v5 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  __n128 v6 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this, *((unsigned int **)this + 1));
}

uint64_t AMSCore::ExecuteHTTPRequestTask::Options::Options(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = (void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = a1 + 8;
  uint64_t v7 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    *(void *)a2 = v4;
    *uint64_t v4 = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
    *(void *)a1 = v6;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  if (*(unsigned char *)(a2 + 80))
  {
    long long v8 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v8;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 56) = 0;
    *(unsigned char *)(a1 + 80) = 1;
  }
  *(unsigned char *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 104) = -1;
  uint64_t v9 = *(unsigned int *)(a2 + 104);
  if (v9 != -1)
  {
    ((void (*)(char *))off_1EDCA5430[v9])(&v14);
    *(_DWORD *)(a1 + 104) = v9;
  }
  long long v10 = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = v10;
  uint64_t v11 = a2 + 160;
  uint64_t v12 = *(void *)(a2 + 160);
  if (v12)
  {
    if (v12 == a2 + 136)
    {
      *(void *)(a1 + 160) = a1 + 136;
      (*(void (**)(void))(**(void **)v11 + 24))();
      return a1;
    }
    *(void *)(a1 + 160) = v12;
  }
  else
  {
    uint64_t v11 = a1 + 160;
  }
  *(void *)uint64_t v11 = 0;
  return a1;
}

void AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy,std::shared_ptr<AMSCore::IHTTPCacheProvider>,std::function<void ()(std::function<void ()(void)> const&)>)::$_3::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v8 = (char *)operator new(0x7E8uLL);
  AMSCore::EncodeHTTPRequestTask::Options::Options((uint64_t)(v8 + 152), a2);
  *(_OWORD *)(v8 + 520) = *(_OWORD *)(a2 + 368);
  *(void *)(a2 + 368) = 0;
  *(void *)(a2 + 376) = 0;
  AMSCore::ExecuteHTTPRequestTask::Options::Options((uint64_t)(v8 + 1640), a3);
  *((_OWORD *)v8 + 124) = *(_OWORD *)a5;
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 1u);
  v8[24] = 0;
  v8[104] = 0;
  *((void *)v8 + 14) = 0;
  *((void *)v8 + 18) = 0;
  std::shared_ptr<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(&v9, (uint64_t)(v8 + 16));
}

void sub_18DA8E374(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, AMSCore::ExecuteHTTPRequestTask::Options *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v24);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v26);
  if (*(char *)(v22 + 1911) < 0) {
    operator delete(*v25);
  }
  AMSCore::ExecuteHTTPRequestTask::Options::~Options(a10);
  AMSCore::EncodeHTTPRequestTask::Result::~Result(v23);
  __cxa_begin_catch(a1);
  AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::unhandled_exception();
}

void sub_18DA8E400()
{
}

void sub_18DA8E40C(_Unwind_Exception *a1)
{
  AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::~Promise(v5);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v2);
  AMSCore::ExecuteHTTPRequestTask::Options::~Options(v4);
  AMSCore::EncodeHTTPRequestTask::Result::~Result(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::function<std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error> ()(AMSCore::ExecuteHTTPRequestTask::Options const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void AMSCore::ExecuteHTTPRequestTask::HandlerType::~HandlerType(AMSCore::ExecuteHTTPRequestTask::HandlerType *this)
{
  uint64_t v2 = *((unsigned int *)this + 4);
  if (v2 != -1) {
    ((void (*)(char *, AMSCore::ExecuteHTTPRequestTask::HandlerType *))off_1EDCA5410[v2])(&v3, this);
  }
  *((_DWORD *)this + 4) = -1;
}

void AMSCore::EncodeHTTPRequestTask::Result::~Result(AMSCore::EncodeHTTPRequestTask::Result *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 47);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)this);
}

void std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_unique_impl<char const* const&,AMSCore::HTTPResponse::StatusCode>(uint64_t **a1, unsigned __int16 a2)
{
  uint64_t v4 = operator new(0x58uLL);
  uint64_t v5 = (uint64_t *)(a1 + 1);
  uint64_t v6 = a1[1];
  v4[4] = 0x65646F4370747468;
  uint64_t v7 = (void **)(v4 + 4);
  *((unsigned char *)v4 + 55) = 8;
  *((unsigned char *)v4 + 40) = 0;
  v4[7] = a2;
  *((_DWORD *)v4 + 20) = 3;
  if (v6)
  {
    while (1)
    {
      long long v8 = v6;
      std::runtime_error v9 = v6 + 4;
      long long v10 = (const void *)v6[4];
      int v11 = *((char *)v9 + 23);
      if (v11 >= 0) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = v10;
      }
      if (v11 >= 0) {
        unint64_t v13 = *((unsigned __int8 *)v9 + 23);
      }
      else {
        unint64_t v13 = v9[1];
      }
      if (v13 >= 8) {
        size_t v14 = 8;
      }
      else {
        size_t v14 = v13;
      }
      int v15 = memcmp(v7, v12, v14);
      if (v15)
      {
        if (v15 < 0) {
          goto LABEL_3;
        }
LABEL_17:
        int v16 = memcmp(v12, v7, v14);
        if (v16)
        {
          if ((v16 & 0x80000000) == 0) {
            goto LABEL_27;
          }
        }
        else if (v13 >= 8)
        {
LABEL_27:
          _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8fe180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8fe180100EvEUlRT_E_JRNS0_6__baseILS12_1EJS8_bdxySE_SG_SO_SX_S10_EEEEEEDcS14_DpT0_(&v19, v4 + 7);
          int v18 = *((char *)v4 + 55);
          *((_DWORD *)v4 + 20) = -1;
          if (v18 < 0) {
            operator delete(*v7);
          }
          operator delete(v4);
          return;
        }
        uint64_t v6 = (uint64_t *)v8[1];
        if (!v6)
        {
          uint64_t v5 = v8 + 1;
          goto LABEL_24;
        }
      }
      else
      {
        if (v13 <= 8) {
          goto LABEL_17;
        }
LABEL_3:
        uint64_t v6 = (uint64_t *)*v8;
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_24;
        }
      }
    }
  }
  long long v8 = (uint64_t *)(a1 + 1);
LABEL_24:
  *uint64_t v4 = 0;
  v4[1] = 0;
  std::runtime_error v4[2] = v8;
  *uint64_t v5 = (uint64_t)v4;
  uint64_t v17 = (uint64_t *)**a1;
  if (v17)
  {
    *a1 = v17;
    uint64_t v4 = (void *)*v5;
  }
  std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], v4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
}

void AMSCore::Unexpected<AMSCore::Error,AMSCore::NetworkErrorCode,std::map<std::string,AMSCore::Any>,char const(&)[33],AMSCore::HTTPResponse::StatusCode>(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v5 = a3 + 1;
  uint64_t v6 = a3[1];
  long long v10 = (unsigned int **)*a3;
  int v11 = (unsigned int *)v6;
  uint64_t v12 = a3[2];
  if (v12)
  {
    *(void *)(v6 + 16) = &v11;
    *a3 = v5;
    *uint64_t v5 = 0;
    a3[2] = 0;
  }
  else
  {
    long long v10 = &v11;
  }
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v19);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Bag request failed with status: ", 32);
  std::ostream::operator<<();
  std::stringbuf::str[abi:fe180100]((uint64_t)v20, &__what_arg);
  uint64_t v19 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v20[-1] + *(void *)(v19 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v20[0] = MEMORY[0x1E4FBA470] + 16;
  if (v21 < 0) {
    operator delete((void *)v20[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FA3FD0](&v22);
  *(void *)&v23.__val_ = a2;
  v23.__cat_ = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
  std::system_error::system_error(&v13, v23, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  }
  v13.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  size_t v14 = v10;
  int v15 = v11;
  uint64_t v16 = v12;
  if (v12)
  {
    *((void *)v11 + 2) = &v15;
    long long v10 = &v11;
    int v11 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    size_t v14 = &v15;
  }
  long long v17 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v13);
  *(std::error_code *)(a1 + 16) = v13.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v7 = v15;
  *(void *)(a1 + 32) = v14;
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = a1 + 40;
  uint64_t v9 = v16;
  *(void *)(a1 + 48) = v16;
  if (v9)
  {
    *((void *)v7 + 2) = v8;
    uint64_t v7 = 0;
    size_t v14 = &v15;
    int v15 = 0;
    uint64_t v16 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v8;
  }
  *(_OWORD *)(a1 + 56) = v17;
  long long v17 = 0uLL;
  v13.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v14, v7);
  MEMORY[0x192FA3C30](&v13);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, v11);
}

void sub_18DA8E9F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::Logger::log<char [42]>(uint64_t result)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= 2u)
  {
    uint64_t v1 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v6);
    uint64_t v2 = *(void *)(v6[0] - 24);
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v6, (uint64_t)"The bag load resulted in updated cookies.", 41);
    uint64_t v3 = v6[6];
    uint64_t v4 = (char *)v6 + *(void *)(v6[0] - 24);
    if ((v4[32] & 5) != 0)
    {
      uint64_t v5 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v4 + 5) + 32))(&rep);
      uint64_t v5 = v13;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v10 = 2;
    uint64_t v11 = v3;
    uint64_t v12 = v5;
    (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v1 + 16) + 16))(*(void *)(v1 + 16), "bag", 3, &rep);
    v6[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v6[1] = MEMORY[0x1E4FBA470] + 16;
    if (v7 < 0) {
      operator delete((void *)v6[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v8);
  }
  return result;
}

void sub_18DA8ECB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::optional<std::vector<std::string>>::~optional(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = *(void ***)a1;
    if (*(void *)a1)
    {
      uint64_t v3 = *(void ***)(a1 + 8);
      uint64_t v4 = *(void ***)a1;
      if (v3 != v2)
      {
        do
        {
          if (*((char *)v3 - 1) < 0) {
            operator delete(*(v3 - 3));
          }
          v3 -= 3;
        }
        while (v3 != v2);
        uint64_t v4 = *(void ***)a1;
      }
      *(void *)(a1 + 8) = v2;
      operator delete(v4);
    }
  }
  return a1;
}

uint64_t AMSCore::Logger::log<char [65],AMSCore::Log::Redact<std::string>>(uint64_t result, uint64_t *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= 2u)
  {
    uint64_t v3 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v8);
    uint64_t v4 = *(void *)(v8[0] - 24);
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)"The bag load resulted in an updated storefront. newStorefront = ", 64);
    AMSCore::Log::operator<<(v8, *a2);
    uint64_t v5 = v8[6];
    uint64_t v6 = (char *)v8 + *(void *)(v8[0] - 24);
    if ((v6[32] & 5) != 0)
    {
      uint64_t v7 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v6 + 5) + 32))(&rep);
      uint64_t v7 = v15;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v12 = 2;
    uint64_t v13 = v5;
    uint64_t v14 = v7;
    (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v3 + 16) + 16))(*(void *)(v3 + 16), "bag", 3, &rep);
    v8[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v8[1] = MEMORY[0x1E4FBA470] + 16;
    if (v9 < 0) {
      operator delete((void *)v8[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v10);
  }
  return result;
}

void sub_18DA8F004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Logger::log<char [78],AMSCore::Log::Redact<std::string>>(uint64_t result, uint64_t *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= 2u)
  {
    uint64_t v3 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v8);
    uint64_t v4 = *(void *)(v8[0] - 24);
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)"The bag load resulted in an updated storefront suffix. newStorefrontSuffix = ", 77);
    AMSCore::Log::operator<<(v8, *a2);
    uint64_t v5 = v8[6];
    uint64_t v6 = (char *)v8 + *(void *)(v8[0] - 24);
    if ((v6[32] & 5) != 0)
    {
      uint64_t v7 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v6 + 5) + 32))(&rep);
      uint64_t v7 = v15;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v12 = 2;
    uint64_t v13 = v5;
    uint64_t v14 = v7;
    (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v3 + 16) + 16))(*(void *)(v3 + 16), "bag", 3, &rep);
    v8[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v8[1] = MEMORY[0x1E4FBA470] + 16;
    if (v9 < 0) {
      operator delete((void *)v8[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v10);
  }
  return result;
}

void sub_18DA8F2DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

AMSCore::EncodeHTTPRequestTask::Options *std::expected<AMSCore::EncodeHTTPRequestTask::Result,AMSCore::Error>::~expected[abi:fe180100](AMSCore::EncodeHTTPRequestTask::Options *this)
{
  if (*((unsigned char *)this + 384))
  {
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 47);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)this);
  }
  else
  {
    (**(void (***)(AMSCore::EncodeHTTPRequestTask::Options *))this)(this);
  }
  return this;
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::BagErrorCode>(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = a2;
  AMSCore::StringUtils::join<>(&__what_arg);
  *(void *)&v14.__val_ = v3;
  v14.__cat_ = (const std::error_category *)&AMSCore::Error::Category::bag(void)::instance;
  std::system_error::system_error(&v8, v14, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  v8.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  char v9 = &v10;
  long long v12 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v8);
  *(std::error_code *)(a1 + 16) = v8.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v4 = v10;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = a1 + 40;
  uint64_t v6 = v11;
  *(void *)(a1 + 48) = v11;
  if (v6)
  {
    *(void *)(v4 + 16) = v5;
    uint64_t v4 = 0;
    char v9 = &v10;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v5;
  }
  *(_OWORD *)(a1 + 56) = v12;
  long long v12 = 0uLL;
  v8.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v9, (unsigned int *)v4);
  return MEMORY[0x192FA3C30](&v8);
}

void sub_18DA8F4E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::NetworkErrorCode>(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = a2;
  AMSCore::StringUtils::join<>(&__what_arg);
  *(void *)&v14.__val_ = v3;
  v14.__cat_ = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
  std::system_error::system_error(&v8, v14, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  v8.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  char v9 = &v10;
  long long v12 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v8);
  *(std::error_code *)(a1 + 16) = v8.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v4 = v10;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = a1 + 40;
  uint64_t v6 = v11;
  *(void *)(a1 + 48) = v11;
  if (v6)
  {
    *(void *)(v4 + 16) = v5;
    uint64_t v4 = 0;
    char v9 = &v10;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v5;
  }
  *(_OWORD *)(a1 + 56) = v12;
  long long v12 = 0uLL;
  v8.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v9, (unsigned int *)v4);
  return MEMORY[0x192FA3C30](&v8);
}

void sub_18DA8F634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Logger::log<char [30],std::tuple<std::string,std::string>>(uint64_t result, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= 2u)
  {
    uint64_t v3 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v19);
    uint64_t v4 = *(void *)(v19[0] - 24);
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v19, (uint64_t)"Successfully loaded the bag: ", 29);
    uint64_t v5 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v19, (uint64_t)"", 0);
    int v6 = *(char *)(a2 + 23);
    if (v6 >= 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = *(void *)a2;
    }
    if (v6 >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v8 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v5, v7, v8);
    char v9 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v19, (uint64_t)", ", 2);
    uint64_t v12 = *(void *)(a2 + 24);
    uint64_t v11 = a2 + 24;
    uint64_t v10 = v12;
    int v13 = *(char *)(v11 + 23);
    if (v13 >= 0) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = v10;
    }
    if (v13 >= 0) {
      uint64_t v15 = *(unsigned __int8 *)(v11 + 23);
    }
    else {
      uint64_t v15 = *(void *)(v11 + 8);
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v9, v14, v15);
    uint64_t v16 = v19[6];
    long long v17 = (char *)v19 + *(void *)(v19[0] - 24);
    if ((v17[32] & 5) != 0)
    {
      uint64_t v18 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v17 + 5) + 32))(&rep);
      uint64_t v18 = v26;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v23 = 2;
    uint64_t v24 = v16;
    uint64_t v25 = v18;
    (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v3 + 16) + 16))(*(void *)(v3 + 16), "bag", 3, &rep);
    v19[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v19 + *(void *)(v19[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v19[1] = MEMORY[0x1E4FBA470] + 16;
    if (v20 < 0) {
      operator delete((void *)v19[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v21);
  }
  return result;
}

void sub_18DA8F94C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy,std::shared_ptr<AMSCore::IHTTPCacheProvider>,std::function<void ()(std::function<void ()(void)> const&)>)::$_3::operator()(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = (std::runtime_error *)(result + 1808);
  if (*(unsigned char *)(result + 2016))
  {
    uint64_t v3 = *(void *)(result + 1936);
    if (*(unsigned char *)(v3 + 88))
    {
      uint64_t v4 = (const std::runtime_error *)(v3 + 8);
      char v5 = *(unsigned char *)(v3 + 80);
      if (v5)
      {
        *(void *)(result + 1808) = *(void *)(v3 + 8);
        int v6 = (const char **)(result + 1816);
        p_unsigned __int8 imp = (std::__libcpp_refstring *)(v3 + 16);
      }
      else
      {
        std::runtime_error::runtime_error((std::runtime_error *)(result + 1808), v4);
        *(_OWORD *)(v1 + 1824) = *(_OWORD *)(v3 + 24);
        *(void *)(v1 + 1808) = &unk_1EDC827D8;
        int v13 = (void *)(v3 + 48);
        uint64_t v14 = *(void *)(v3 + 48);
        *(void *)(v1 + 1840) = *(void *)(v3 + 40);
        uint64_t v15 = v1 + 1848;
        *(void *)(v1 + 1848) = v14;
        uint64_t v16 = *(void *)(v3 + 56);
        *(void *)(v1 + 1856) = v16;
        if (v16)
        {
          *(void *)(v14 + 16) = v15;
          *(void *)(v3 + 40) = v13;
          *int v13 = 0;
          *(void *)(v3 + 56) = 0;
        }
        else
        {
          *(void *)(v1 + 1840) = v15;
        }
        uint64_t v22 = *(void *)(v3 + 64);
        uint64_t v21 = (const std::runtime_error *)(v3 + 64);
        *(void *)(v1 + 1864) = v22;
        int v6 = (const char **)(v1 + 1872);
        p_unsigned __int8 imp = &v21->__imp_;
        uint64_t v4 = v21;
      }
      *int v6 = p_imp->__imp_;
      v4->__vftable = 0;
      v4->__imp_.__imp_ = 0;
      *(unsigned char *)(v1 + 1880) = v5;
      std::optional<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>,void>((std::runtime_error *)(v1 + 24), v2);
      if (*(unsigned char *)(v1 + 1880))
      {
        char v23 = *(std::__shared_weak_count **)(v1 + 1816);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      else
      {
        ((void (*)(std::runtime_error *))v2->~runtime_error)(v2);
      }
      uint64_t v24 = *(std::__shared_weak_count **)(v1 + 1944);
      if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
      uint64_t v25 = *(std::__shared_weak_count **)(v1 + 1960);
      if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
      uint64_t v26 = (void **)(v1 + 536);
      if (*(char *)(v1 + 1935) < 0) {
        operator delete(*(void **)(v1 + 1912));
      }
      AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(v1 + 1472));
      uint64_t v27 = *(std::__shared_weak_count **)(v1 + 912);
      if (!v27) {
        goto LABEL_53;
      }
      goto LABEL_51;
    }
LABEL_56:
    __break(1u);
    return result;
  }
  uint64_t v8 = *(void *)(result + 2000);
  if (!*(unsigned char *)(v8 + 88)) {
    goto LABEL_56;
  }
  char v9 = (const std::runtime_error *)(v8 + 8);
  char v10 = *(unsigned char *)(v8 + 80);
  if (v10)
  {
    *(void *)(result + 1808) = *(void *)(v8 + 8);
    uint64_t v11 = (const char **)(result + 1816);
    uint64_t v12 = (std::__libcpp_refstring *)(v8 + 16);
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(result + 1808), v9);
    *(_OWORD *)(v1 + 1824) = *(_OWORD *)(v8 + 24);
    *(void *)(v1 + 1808) = &unk_1EDC827D8;
    long long v17 = (void *)(v8 + 48);
    uint64_t v18 = *(void *)(v8 + 48);
    *(void *)(v1 + 1840) = *(void *)(v8 + 40);
    uint64_t v19 = v1 + 1848;
    *(void *)(v1 + 1848) = v18;
    uint64_t v20 = *(void *)(v8 + 56);
    *(void *)(v1 + 1856) = v20;
    if (v20)
    {
      *(void *)(v18 + 16) = v19;
      *(void *)(v8 + 40) = v17;
      *long long v17 = 0;
      *(void *)(v8 + 56) = 0;
    }
    else
    {
      *(void *)(v1 + 1840) = v19;
    }
    uint64_t v28 = *(const std::runtime_error **)(v1 + 2000);
    uint64_t v29 = v28[4].__vftable;
    char v9 = v28 + 4;
    *(void *)(v1 + 1864) = v29;
    uint64_t v11 = (const char **)(v1 + 1872);
    uint64_t v12 = &v9->__imp_;
  }
  *uint64_t v11 = v12->__imp_;
  v9->__vftable = 0;
  v9->__imp_.__imp_ = 0;
  *(unsigned char *)(v1 + 1880) = v10;
  std::optional<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>,void>((std::runtime_error *)(v1 + 24), v2);
  if (*(unsigned char *)(v1 + 1880))
  {
    char v30 = *(std::__shared_weak_count **)(v1 + 1816);
    if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  else
  {
    ((void (*)(std::runtime_error *))v2->~runtime_error)(v2);
  }
  uint64_t v31 = *(void *)(v1 + 2008);
  if (v31 && !atomic_fetch_add((atomic_ullong *volatile)(v31 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v32 = *(std::__shared_weak_count **)(v1 + 2008);
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  char v33 = *(std::__shared_weak_count **)(v1 + 1960);
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  __n128 v34 = *(std::__shared_weak_count **)(v1 + 1976);
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  uint64_t v35 = *(std::__shared_weak_count **)(v1 + 1944);
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  uint64_t v26 = (void **)(v1 + 920);
  if (*(char *)(v1 + 1911) < 0) {
    operator delete(*(void **)(v1 + 1888));
  }
  AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(v1 + 1304));
  uint64_t v27 = *(std::__shared_weak_count **)(v1 + 1296);
  if (!v27) {
    goto LABEL_53;
  }
LABEL_51:
  if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
LABEL_53:
  AMSCore::EncodeHTTPRequestTask::Options::~Options(v26);
  *(void *)(v1 + 1808) = v1 + 16;
  *(void *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 2016) = 2;
  return AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v2);
}

void AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy,std::shared_ptr<AMSCore::IHTTPCacheProvider>,std::function<void ()(std::function<void ()(void)> const&)>)::$_3::operator()(uint64_t a1)
{
  uint64_t v2 = (AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 1640);
  uint64_t v3 = a1 + 16;
  int v4 = *(unsigned __int8 *)(a1 + 2016);
  if (v4 != 2)
  {
    if (v4 == 1)
    {
      char v5 = *(std::__shared_weak_count **)(a1 + 1944);
      if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      int v6 = *(std::__shared_weak_count **)(a1 + 1960);
      if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      uint64_t v7 = (void **)(a1 + 536);
      if (*(char *)(a1 + 1935) < 0) {
        operator delete(*(void **)(a1 + 1912));
      }
      AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 1472));
      uint64_t v8 = *(std::__shared_weak_count **)(a1 + 912);
      if (!v8) {
        goto LABEL_29;
      }
      goto LABEL_27;
    }
    uint64_t v7 = (void **)(a1 + 920);
    uint64_t v9 = *(void *)(a1 + 2008);
    if (v9 && !atomic_fetch_add((atomic_ullong *volatile)(v9 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      char v10 = *(std::__shared_weak_count **)(a1 + 2008);
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 1960);
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = *(std::__shared_weak_count **)(a1 + 1976);
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    int v13 = *(std::__shared_weak_count **)(a1 + 1944);
    if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if ((*(char *)(a1 + 1911) & 0x80000000) == 0)
      {
LABEL_26:
        AMSCore::ExecuteHTTPRequestTask::Options::~Options((AMSCore::ExecuteHTTPRequestTask::Options *)(a1 + 1304));
        uint64_t v8 = *(std::__shared_weak_count **)(a1 + 1296);
        if (!v8)
        {
LABEL_29:
          AMSCore::EncodeHTTPRequestTask::Options::~Options(v7);
          goto LABEL_30;
        }
LABEL_27:
        if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        goto LABEL_29;
      }
    }
    else if ((*(char *)(a1 + 1911) & 0x80000000) == 0)
    {
      goto LABEL_26;
    }
    operator delete(*(void **)(a1 + 1888));
    goto LABEL_26;
  }
LABEL_30:
  AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::~Promise(v3);
  uint64_t v14 = *(std::__shared_weak_count **)(a1 + 1992);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  AMSCore::ExecuteHTTPRequestTask::Options::~Options(v2);
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 528);
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  AMSCore::EncodeHTTPRequestTask::Options::~Options((void **)(a1 + 152));
  operator delete((void *)a1);
}

void std::shared_ptr<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise>::shared_ptr[abi:fe180100]<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_18DA90280(void *a1)
{
  __cxa_begin_catch(a1);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 96), 2uLL)) {
    (*(void (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  __cxa_rethrow();
}

void sub_18DA902AC(_Unwind_Exception *a1)
{
}

void AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::unhandled_exception()
{
  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

uint64_t sub_18DA902E0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v36, (uint64_t)v33);
  std::optional<std::expected<std::shared_ptr<AMSCore::IBag>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>(v29, v36);
  v36[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  char v30 = v38;
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v37, v37[1]);
  MEMORY[0x192FA3C30](v36);
  v33[0] = &unk_1EDC827D8;
  uint64_t v31 = v35;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v34, v34[1]);
  return MEMORY[0x192FA3C30](v33);
}

uint64_t AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::Awaiter::await_suspend(uint64_t result)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void (**)(void))atomic_exchange((atomic_ullong *volatile)(*(void *)result + 96), 1uLL);
  if (v1)
  {
    uint64_t v2 = result;
    if (v1 == (void (**)(void))2) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result - 8))(*(void *)result - 16);
    }
    uint64_t v3 = (uint64_t *)(*(void *)result + 128);
    uint64_t result = *v3;
    if (*v3)
    {
      if (result == *(void *)v2 + 104)
      {
        uint64_t v24 = v23;
        uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 24))(result, v23);
      }
      else
      {
        uint64_t v24 = *(void **)(*(void *)v2 + 128);
        *uint64_t v3 = 0;
      }
    }
    else
    {
      uint64_t v24 = 0;
    }
    if (v24)
    {
      uint64_t v4 = *(void *)v2;
      if (!*(unsigned char *)(*(void *)v2 + 88))
      {
        __break(1u);
        return result;
      }
      char v5 = (const std::runtime_error *)(v4 + 8);
      char v6 = *(unsigned char *)(v4 + 80);
      if (v6)
      {
        v15.__vftable = *(std::runtime_error_vtbl **)(v4 + 8);
        p_unsigned __int8 imp = &v15.__imp_;
        uint64_t v8 = (const char **)(v4 + 16);
      }
      else
      {
        std::runtime_error::runtime_error(&v15, v5);
        uint64_t v9 = (void *)(v4 + 48);
        uint64_t v10 = *(void *)(v4 + 48);
        long long v16 = *(_OWORD *)(v4 + 24);
        uint64_t v11 = *(uint64_t **)(v4 + 40);
        v15.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        long long v17 = v11;
        uint64_t v18 = v10;
        if (*(void *)(v4 + 56))
        {
          *(void *)(v10 + 16) = &v18;
          *(void *)(v4 + 40) = v9;
          *uint64_t v9 = 0;
          *(void *)(v4 + 56) = 0;
        }
        else
        {
          long long v17 = &v18;
        }
        uint64_t v13 = *(void *)(v4 + 64);
        uint64_t v12 = (const std::runtime_error *)(v4 + 64);
        uint64_t v20 = v13;
        p_unsigned __int8 imp = (std::__libcpp_refstring *)&v21;
        uint64_t v8 = &v12->__imp_.__imp_;
        char v5 = v12;
      }
      p_imp->__imp_ = *v8;
      v5->__vftable = 0;
      v5->__imp_.__imp_ = 0;
      char v22 = v6;
      if (!v24) {
        std::__throw_bad_function_call[abi:fe180100]();
      }
      (*(void (**)(void *, std::runtime_error *))(*v24 + 48))(v24, &v15);
      if (v22)
      {
        unsigned __int8 imp = (std::__shared_weak_count *)v15.__imp_.__imp_;
        if (v15.__imp_.__imp_
          && !atomic_fetch_add((atomic_ullong *volatile)v15.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
          std::__shared_weak_count::__release_weak(imp);
        }
      }
      else
      {
        ((void (*)(std::runtime_error *))v15.~runtime_error)(&v15);
      }
    }
    else
    {
      (*v1)(v1);
    }
    uint64_t result = (uint64_t)v24;
    if (v24 == v23)
    {
      return (*(uint64_t (**)(void *))(v23[0] + 32))(v23);
    }
    else if (v24)
    {
      return (*(uint64_t (**)(void))(*v24 + 40))();
    }
  }
  return result;
}

void sub_18DA906E8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::~Promise(uint64_t a1)
{
  uint64_t v2 = a1 + 104;
  uint64_t v3 = *(void *)(a1 + 128);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    if (!*(unsigned char *)(a1 + 88)) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  if (*(unsigned char *)(a1 + 88))
  {
LABEL_7:
    if (*(unsigned char *)(a1 + 80))
    {
      uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
      if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    else
    {
      (**(void (***)(void))(a1 + 8))();
    }
  }
LABEL_12:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<AMSCore::ClockProvider>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMSCore::ClockProvider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83B78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::ClockProvider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83B78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise *,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINSt3__110shared_ptrIKNS_12HTTPResponseEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINSt3__110shared_ptrIKNS_12HTTPResponseEEENS_5ErrorEE7Promise17get_return"
                                "_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINSt3__110shared_ptrIKNS_12HTTPResponseEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINSt3__110shared_ptrIKNS_12HTTPResponseEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise *,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 96), 2uLL)) {
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise *,AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<std::shared_ptr<AMSCore::HTTPResponse const>,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8fe180100IOZNS0_6__ctorINS0_8__traitsIJNS_10shared_ptrIN7AMSCore22ExecuteHTTPRequestTask8IHandlerEEENS8_INSA_16AnonymousHandlerEEEEEEE19__generic_constructB8fe180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8fe180100IOZNS0_6__ctorINS0_8__traitsIJNS_10shared_ptrIN7AMSCore22ExecuteHTTPRequestTask8IHandlerEEENS8_INSA_16AnonymousHandlerEEEEEEE19__generic_constructB8fe180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8fe180100IOZNS0_6__dtorINS0_8__traitsIJNS_10shared_ptrIN7AMSCore22ExecuteHTTPRequestTask8IHandlerEEENS8_INSA_16AnonymousHandlerEEEEEELNS0_6_TraitE1EE9__destroyB8fe180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8fe180100IOZNS0_6__dtorINS0_8__traitsIJNS_10shared_ptrIN7AMSCore22ExecuteHTTPRequestTask8IHandlerEEENS8_INSA_16AnonymousHandlerEEEEEELNS0_6_TraitE1EE9__destroyB8fe180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8fe180100IOZNS0_6__ctorINS0_8__traitsIJNS_10shared_ptrIN7AMSCore22ExecuteHTTPRequestTask8IHandlerEEENS8_INSA_16AnonymousHandlerEEEEEEE19__generic_constructB8fe180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a3[1];
  *a2 = *a3;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8fe180100IOZNS0_6__ctorINS0_8__traitsIJNS_10shared_ptrIN7AMSCore22ExecuteHTTPRequestTask8IHandlerEEENS8_INSA_16AnonymousHandlerEEEEEEE19__generic_constructB8fe180100IRKNS0_18__copy_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSO_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEERKSW_EEEDcSO_DpT0_(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a3[1];
  *a2 = *a3;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
}

void *std::__function::__func<AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy,std::shared_ptr<AMSCore::IHTTPCacheProvider>,std::function<void ()(std::function<void ()(void)> const&)>)::$_1,std::allocator<AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy,std::shared_ptr<AMSCore::IHTTPCacheProvider>,std::function<void ()(std::function<void ()(void)> const&)>)::$_1>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error> ()(AMSCore::ExecuteHTTPRequestTask::Options const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&)>::target_type()
{
}

uint64_t std::__function::__func<AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy,std::shared_ptr<AMSCore::IHTTPCacheProvider>,std::function<void ()(std::function<void ()(void)> const&)>)::$_1,std::allocator<AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy,std::shared_ptr<AMSCore::IHTTPCacheProvider>,std::function<void ()(std::function<void ()(void)> const&)>)::$_1>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error> ()(AMSCore::ExecuteHTTPRequestTask::Options const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore18LoadNetworkBagTask12_GLOBAL__N_115performInternalENSt3__15tupleIJNS2_12basic_stringIcNS"
                     "2_11char_traitsIcEENS2_9allocatorIcEEEES9_EEENS2_10shared_ptrIKNS_13IMediaAccountEEENSB_INS_11IBund"
                     "leInfoEEENS2_8expectedINS_25LoadURLMetricsEventConfigENS_5ErrorEEENS0_10LoadPolicyENSB_INS_18IHTTPC"
                     "acheProviderEEENS2_8functionIFvRKNSO_IFvvEEEEEEE3$_1"
    || ((v3 & (unint64_t)"ZN7AMSCore18LoadNetworkBagTask12_GLOBAL__N_115performInternalENSt3__15tupleIJNS2_12basic"
                                "_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES9_EEENS2_10shared_ptrIKNS_13IMediaAcc"
                                "ountEEENSB_INS_11IBundleInfoEEENS2_8expectedINS_25LoadURLMetricsEventConfigENS_5ErrorEEE"
                                "NS0_10LoadPolicyENSB_INS_18IHTTPCacheProviderEEENS2_8functionIFvRKNSO_IFvvEEEEEEE3$_1" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore18LoadNetworkBagTask12_GLOBAL__N_115performInternalENSt3__15tupleIJNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES9_EEENS2_10shared_ptrIKNS_13IMediaAccountEEENSB_INS_11IBundleInfoEEENS2_8expectedINS_25LoadURLMetricsEventConfigENS_5ErrorEEENS0_10LoadPolicyENSB_INS_18IHTTPCacheProviderEEENS2_8functionIFvRKNSO_IFvvEEEEEEE3$_1")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore18LoadNetworkBagTask12_GLOBAL__N_115performInternalENSt3__15tupleIJNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES9_EEENS2_10shared_ptrIKNS_13IMediaAccountEEENSB_INS_11IBundleInfoEEENS2_8expectedINS_25LoadURLMetricsEventConfigENS_5ErrorEEENS0_10LoadPolicyENSB_INS_18IHTTPCacheProviderEEENS2_8functionIFvRKNSO_IFvvEEEEEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy,std::shared_ptr<AMSCore::IHTTPCacheProvider>,std::function<void ()(std::function<void ()(void)> const&)>)::$_1,std::allocator<AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy,std::shared_ptr<AMSCore::IHTTPCacheProvider>,std::function<void ()(std::function<void ()(void)> const&)>)::$_1>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error> ()(AMSCore::ExecuteHTTPRequestTask::Options const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&)>::operator()(uint64_t a1@<X0>, AMSCore::HTTPResponse *a2@<X2>, uint64_t a3@<X8>)
{
  if (*((unsigned char *)a2 + 656))
  {
    AMSCore::HTTPResponse::getDecodedObject(a2);
    if (*(unsigned char *)(v4 + 72))
    {
      v27.__imp_.__imp_ = 0;
      *(void *)&long long v28 = 0;
      v27.__vftable = (std::runtime_error_vtbl *)&v27.__imp_;
      char v5 = (const void ***)(v4 + 8);
      char v6 = *(const void ***)v4;
      if (*(void *)v4 != v4 + 8)
      {
        do
        {
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v27, (uint64_t *)&v27.__imp_, v6 + 4, (long long *)v6 + 2);
          uint64_t v7 = (const void **)v6[1];
          if (v7)
          {
            do
            {
              uint64_t v8 = (const void ***)v7;
              uint64_t v7 = (const void **)*v7;
            }
            while (v7);
          }
          else
          {
            do
            {
              uint64_t v8 = (const void ***)v6[2];
              BOOL v9 = *v8 == v6;
              char v6 = (const void **)v8;
            }
            while (!v9);
          }
          char v6 = (const void **)v8;
        }
        while (v8 != v5);
      }
      char v33 = 1;
      AMSCore::LoadURLMetricsEventConfig::fromAnyMap(a3, (uint64_t)&v27);
    }
    else
    {
      AMSCore::Error::Error(&v27, (const std::runtime_error *)v4);
      char v33 = 0;
      std::runtime_error::runtime_error(&v21, &v27);
      long long v22 = v28;
      v21.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      char v23 = v29;
      v24[0] = (unsigned int *)v30;
      v24[1] = v31;
      if (v31)
      {
        *(void *)(v30 + 16) = v24;
        uint64_t v29 = (unsigned int **)&v30;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
      }
      else
      {
        char v23 = v24;
      }
      long long v25 = v32;
      long long v32 = 0uLL;
      char v26 = 1;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v15, (uint64_t)&v21);
      std::runtime_error::runtime_error((std::runtime_error *)a3, &v15);
      *(_OWORD *)(a3 + 16) = v16;
      *(void *)a3 = &unk_1EDC827D8;
      uint64_t v11 = v18;
      *(void *)(a3 + 32) = v17;
      *(void *)(a3 + 40) = v11;
      uint64_t v12 = a3 + 40;
      uint64_t v13 = v19;
      *(void *)(a3 + 48) = v19;
      if (v13)
      {
        *(void *)(v11 + 16) = v12;
        long long v17 = &v18;
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        uint64_t v11 = 0;
      }
      else
      {
        *(void *)(a3 + 32) = v12;
      }
      *(_OWORD *)(a3 + 56) = v20;
      long long v20 = 0uLL;
      *(unsigned char *)(a3 + 120) = 0;
      v15.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v17, (unsigned int *)v11);
      MEMORY[0x192FA3C30](&v15);
      if (v26)
      {
        v21.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        uint64_t v14 = (std::__shared_weak_count *)*((void *)&v25 + 1);
        if (*((void *)&v25 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v25 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v23, v24[0]);
        MEMORY[0x192FA3C30](&v21);
      }
    }
    if (v33) {
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v27, (unsigned int *)v27.__imp_.__imp_);
    }
    else {
      ((void (*)(std::runtime_error *))v27.~runtime_error)(&v27);
    }
  }
  else
  {
    char v10 = *(unsigned char *)(a1 + 128);
    std::invoke[abi:fe180100]<std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__repr::__repr[abi:fe180100]<std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__union_t const&>(BOOL,std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__union_t const&)::{lambda(void)#1}>((std::runtime_error *)a3, v10, (AMSCore::Error *)(a1 + 8));
    *(unsigned char *)(a3 + 120) = v10;
  }
}

void sub_18DA90E4C(_Unwind_Exception *a1)
{
  if (!*(unsigned char *)(v1 - 56))
  {
    (**(void (***)(uint64_t))(v1 - 128))(v1 - 128);
    _Unwind_Resume(a1);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v1 - 128, *(unsigned int **)(v1 - 120));
  _Unwind_Resume(a1);
}

void std::__function::__func<AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy,std::shared_ptr<AMSCore::IHTTPCacheProvider>,std::function<void ()(std::function<void ()(void)> const&)>)::$_1,std::allocator<AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy,std::shared_ptr<AMSCore::IHTTPCacheProvider>,std::function<void ()(std::function<void ()(void)> const&)>)::$_1>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error> ()(AMSCore::ExecuteHTTPRequestTask::Options const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&)>::destroy_deallocate(void **__p)
{
  if (!*((unsigned char *)__p + 128)) {
    goto LABEL_4;
  }
  if ((*((char *)__p + 127) & 0x80000000) == 0)
  {
    if (*((unsigned char *)__p + 80)) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  operator delete(__p[13]);
  if (!*((unsigned char *)__p + 80)) {
LABEL_4:
  }
    (*(void (**)(void))__p[1])();
LABEL_5:
  operator delete(__p);
}

void std::__function::__func<AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy,std::shared_ptr<AMSCore::IHTTPCacheProvider>,std::function<void ()(std::function<void ()(void)> const&)>)::$_1,std::allocator<AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy,std::shared_ptr<AMSCore::IHTTPCacheProvider>,std::function<void ()(std::function<void ()(void)> const&)>)::$_1>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error> ()(AMSCore::ExecuteHTTPRequestTask::Options const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&)>::destroy(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 128))
  {
    if (*(char *)(a1 + 127) < 0)
    {
      operator delete(*(void **)(a1 + 104));
      if (*(unsigned char *)(a1 + 80)) {
        return;
      }
    }
    else if (*(unsigned char *)(a1 + 80))
    {
      return;
    }
  }
  uint64_t v2 = **(void (***)(void))(a1 + 8);
  v2();
}

void std::__function::__func<AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy,std::shared_ptr<AMSCore::IHTTPCacheProvider>,std::function<void ()(std::function<void ()(void)> const&)>)::$_1,std::allocator<AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy,std::shared_ptr<AMSCore::IHTTPCacheProvider>,std::function<void ()(std::function<void ()(void)> const&)>)::$_1>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error> ()(AMSCore::ExecuteHTTPRequestTask::Options const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EDCA53A0;
  char v3 = *(unsigned char *)(a1 + 128);
  std::invoke[abi:fe180100]<std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__repr::__repr[abi:fe180100]<std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__union_t const&>(BOOL,std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__union_t const&)::{lambda(void)#1}>((std::runtime_error *)(a2 + 8), v3, (AMSCore::Error *)(a1 + 8));
  *(unsigned char *)(a2 + 128) = v3;
}

char *std::__function::__func<AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy,std::shared_ptr<AMSCore::IHTTPCacheProvider>,std::function<void ()(std::function<void ()(void)> const&)>)::$_1,std::allocator<AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy,std::shared_ptr<AMSCore::IHTTPCacheProvider>,std::function<void ()(std::function<void ()(void)> const&)>)::$_1>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error> ()(AMSCore::ExecuteHTTPRequestTask::Options const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = (AMSCore::Error *)(a1 + 8);
  char v3 = (char *)operator new(0x88uLL);
  *(void *)char v3 = &unk_1EDCA53A0;
  LOBYTE(v1) = *(unsigned char *)(v1 + 128);
  std::invoke[abi:fe180100]<std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__repr::__repr[abi:fe180100]<std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__union_t const&>(BOOL,std::__expected_base<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>::__union_t const&)::{lambda(void)#1}>((std::runtime_error *)(v3 + 8), v1, v2);
  v3[128] = v1;
  return v3;
}

void sub_18DA91078(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy,std::shared_ptr<AMSCore::IHTTPCacheProvider>,std::function<void ()(std::function<void ()(void)> const&)>)::$_1,std::allocator<AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy,std::shared_ptr<AMSCore::IHTTPCacheProvider>,std::function<void ()(std::function<void ()(void)> const&)>)::$_1>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error> ()(AMSCore::ExecuteHTTPRequestTask::Options const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EDCA53A0;
  if (*(unsigned char *)(a1 + 128))
  {
    if (*(char *)(a1 + 127) < 0)
    {
      operator delete(*(void **)(a1 + 104));
      if (*(unsigned char *)(a1 + 80))
      {
LABEL_5:
        JUMPOUT(0x192FA4080);
      }
    }
    else if (*(unsigned char *)(a1 + 80))
    {
      goto LABEL_5;
    }
  }
  (**(void (***)(void))(a1 + 8))();
  goto LABEL_5;
}

uint64_t std::__function::__func<AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy,std::shared_ptr<AMSCore::IHTTPCacheProvider>,std::function<void ()(std::function<void ()(void)> const&)>)::$_1,std::allocator<AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy,std::shared_ptr<AMSCore::IHTTPCacheProvider>,std::function<void ()(std::function<void ()(void)> const&)>)::$_1>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error> ()(AMSCore::ExecuteHTTPRequestTask::Options const&,std::expected<AMSCore::HTTPResponse,AMSCore::HTTPError> const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EDCA53A0;
  if (!*(unsigned char *)(a1 + 128)) {
    goto LABEL_4;
  }
  if (*(char *)(a1 + 127) < 0)
  {
    operator delete(*(void **)(a1 + 104));
    if (*(unsigned char *)(a1 + 80)) {
      return a1;
    }
    goto LABEL_4;
  }
  if (!*(unsigned char *)(a1 + 80)) {
LABEL_4:
  }
    (**(void (***)(void))(a1 + 8))();
  return a1;
}

uint64_t std::__shared_ptr_emplace<AMSCore::ExecuteHTTPRequestTask::AnonymousHandler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMSCore::ExecuteHTTPRequestTask::AnonymousHandler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83FD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::ExecuteHTTPRequestTask::AnonymousHandler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83FD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__function::__func<AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy,std::shared_ptr<AMSCore::IHTTPCacheProvider>,std::function<void ()(std::function<void ()(void)> const&)>)::$_0,std::allocator<AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy,std::shared_ptr<AMSCore::IHTTPCacheProvider>,std::function<void ()(std::function<void ()(void)> const&)>)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy,std::shared_ptr<AMSCore::IHTTPCacheProvider>,std::function<void ()(std::function<void ()(void)> const&)>)::$_0,std::allocator<AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy,std::shared_ptr<AMSCore::IHTTPCacheProvider>,std::function<void ()(std::function<void ()(void)> const&)>)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore18LoadNetworkBagTask12_GLOBAL__N_115performInternalENSt3__15tupleIJNS2_12basic_stringIcNS"
                     "2_11char_traitsIcEENS2_9allocatorIcEEEES9_EEENS2_10shared_ptrIKNS_13IMediaAccountEEENSB_INS_11IBund"
                     "leInfoEEENS2_8expectedINS_25LoadURLMetricsEventConfigENS_5ErrorEEENS0_10LoadPolicyENSB_INS_18IHTTPC"
                     "acheProviderEEENS2_8functionIFvRKNSO_IFvvEEEEEEE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore18LoadNetworkBagTask12_GLOBAL__N_115performInternalENSt3__15tupleIJNS2_12basic"
                                "_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES9_EEENS2_10shared_ptrIKNS_13IMediaAcc"
                                "ountEEENSB_INS_11IBundleInfoEEENS2_8expectedINS_25LoadURLMetricsEventConfigENS_5ErrorEEE"
                                "NS0_10LoadPolicyENSB_INS_18IHTTPCacheProviderEEENS2_8functionIFvRKNSO_IFvvEEEEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore18LoadNetworkBagTask12_GLOBAL__N_115performInternalENSt3__15tupleIJNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES9_EEENS2_10shared_ptrIKNS_13IMediaAccountEEENSB_INS_11IBundleInfoEEENS2_8expectedINS_25LoadURLMetricsEventConfigENS_5ErrorEEENS0_10LoadPolicyENSB_INS_18IHTTPCacheProviderEEENS2_8functionIFvRKNSO_IFvvEEEEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore18LoadNetworkBagTask12_GLOBAL__N_115performInternalENSt3__15tupleIJNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES9_EEENS2_10shared_ptrIKNS_13IMediaAccountEEENSB_INS_11IBundleInfoEEENS2_8expectedINS_25LoadURLMetricsEventConfigENS_5ErrorEEENS0_10LoadPolicyENSB_INS_18IHTTPCacheProviderEEENS2_8functionIFvRKNSO_IFvvEEEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy,std::shared_ptr<AMSCore::IHTTPCacheProvider>,std::function<void ()(std::function<void ()(void)> const&)>)::$_0,std::allocator<AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy,std::shared_ptr<AMSCore::IHTTPCacheProvider>,std::function<void ()(std::function<void ()(void)> const&)>)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  v45[17] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v1 = **(void **)(a1 + 8);
  AMSCore::ServiceProvider<AMSCore::IDataProvider>::getDefault(&v35);
  (*(void (**)(void **__return_ptr))(*(void *)v35 + 32))(&__s1);
  AMSCore::ServiceProvider<AMSCore::IDeviceInfo>::getDefault(&v39);
  (*(void (**)(std::string *__return_ptr))(*(void *)v39 + 96))(&v30);
  uint64_t v2 = (std::__shared_weak_count *)v40;
  if (v40 && !atomic_fetch_add((atomic_ullong *volatile)(v40 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  if ((AMSCore::operator==((unsigned __int8 *)&__s1, (unsigned __int8 *)&AMSCore::Any::Null(void)::null) & 1) == 0)
  {
    if (v34 == 5)
    {
      uint64_t v3 = 23;
      if (v34 == 5) {
        uint64_t v3 = (uint64_t)&v33;
      }
      size_t v4 = *(unsigned __int8 *)v3;
      uint64_t v5 = (uint64_t)&v32;
      if (v34 != 5) {
        uint64_t v5 = 8;
      }
      if ((v4 & 0x80u) == 0) {
        size_t v6 = v4;
      }
      else {
        size_t v6 = *(void *)v5;
      }
      std::string::size_type size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v30.__r_.__value_.__l.__size_;
      }
      if (v6 == size)
      {
        if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v8 = &v30;
        }
        else {
          uint64_t v8 = (std::string *)v30.__r_.__value_.__r.__words[0];
        }
        if ((v4 & 0x80) != 0)
        {
          if (!memcmp(__s1, v8, *(void *)v5)) {
            goto LABEL_32;
          }
        }
        else
        {
          if (!v4) {
            goto LABEL_32;
          }
          size_t v9 = v4 - 1;
          p_s1 = &__s1;
          do
          {
            int v12 = *(unsigned __int8 *)p_s1;
            p_s1 = (void **)((char *)p_s1 + 1);
            int v11 = v12;
            int v14 = v8->__r_.__value_.__s.__data_[0];
            uint64_t v8 = (std::string *)((char *)v8 + 1);
            int v13 = v14;
          }
          while (v11 == v14 && v9-- != 0);
          if (v11 == v13) {
            goto LABEL_32;
          }
        }
      }
    }
    HIBYTE(v45[2]) = 21;
    strcpy((char *)v45, "bag-anonymous-account");
    (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(void *)v1 + 40))(&v39, v1, v45);
    if (SHIBYTE(v45[2]) < 0)
    {
      operator delete(v45[0]);
      if ((_BYTE)__p) {
        goto LABEL_32;
      }
    }
    else if ((_BYTE)__p)
    {
      goto LABEL_32;
    }
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(v45);
    AMSCore::Logger::log<char [40],AMSCore::Error>((uint64_t)v45[0], (uint64_t)"bag", 3, "Failed to delete cached bag responses: ", (uint64_t)&v39);
    long long v22 = (std::__shared_weak_count *)v45[1];
    if (v45[1] && !atomic_fetch_add((atomic_ullong *volatile)v45[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    if (!(_BYTE)__p) {
      (*(void (**)(uint64_t *))v39)(&v39);
    }
    goto LABEL_60;
  }
LABEL_32:
  uint64_t v16 = v35;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v25, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  }
  else {
    std::string v25 = v30;
  }
  int v26 = 5;
  char v27 = 1;
  (*(void (**)(void *__return_ptr, uint64_t, const char *, uint64_t, std::string *))(*(void *)v16 + 48))(v28, v16, "AMSBagCacheProviderCurrentPlatformVersion", 41, &v25);
  if (v27)
  {
    if (v26 != -1) {
      ((void (*)(uint64_t *, std::string *))off_1EDCA52C0[v26])(&v39, &v25);
    }
    int v26 = -1;
  }
  if (!v29)
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v37);
    uint64_t v17 = v37;
    if (*(unsigned __int8 *)(v37 + 8) <= 4u)
    {
      std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v39);
      uint64_t v18 = *(void *)(v39 - 24);
      {
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Failed to set bag cache current platform version: ", 50);
      AMSCore::operator<<(&v39, (uint64_t)v28);
      uint64_t v19 = v41;
      long long v20 = (char *)&v39 + *(void *)(v39 - 24);
      if ((v20[32] & 5) != 0)
      {
        uint64_t v21 = -1;
      }
      else
      {
        (*(void (**)(void **__return_ptr))(**((void **)v20 + 5) + 32))(v45);
        uint64_t v21 = (uint64_t)v45[16];
      }
      v45[0] = (void *)std::chrono::system_clock::now().__d_.__rep_;
      LOBYTE(v45[1]) = 4;
      v45[2] = v19;
      v45[3] = (void *)v21;
      (*(void (**)(void, const char *, uint64_t, void **))(**(void **)(v17 + 16) + 16))(*(void *)(v17 + 16), "bag", 3, v45);
      uint64_t v39 = *MEMORY[0x1E4FBA418];
      *(uint64_t *)((char *)&v39 + *(void *)(v39 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      uint64_t v40 = MEMORY[0x1E4FBA470] + 16;
      if (v43 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x192FA3FD0](&v44);
    }
    char v23 = v38;
    if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      if (v29) {
        goto LABEL_60;
      }
    }
    else if (v29)
    {
      goto LABEL_60;
    }
    (*(void (**)(void *))v28[0])(v28);
  }
LABEL_60:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (v34 != -1) {
    ((void (*)(uint64_t *, void **))off_1EDCA52C0[v34])(&v39, &__s1);
  }
  uint64_t v24 = v36;
  if (v36)
  {
    if (!atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_18DA919C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t AMSCore::Logger::log<char [40],AMSCore::Error>(uint64_t result, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= 4u)
  {
    uint64_t v9 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v15);
    uint64_t v10 = *(void *)(v15[0] - 24);
    {
    }
    size_t v11 = strlen(a4);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v15, (uint64_t)a4, v11);
    AMSCore::operator<<(v15, a5);
    uint64_t v12 = v15[6];
    int v13 = (char *)v15 + *(void *)(v15[0] - 24);
    if ((v13[32] & 5) != 0)
    {
      uint64_t v14 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v13 + 5) + 32))(&rep);
      uint64_t v14 = v22;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v19 = 4;
    uint64_t v20 = v12;
    uint64_t v21 = v14;
    (*(void (**)(void, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v9 + 16) + 16))(*(void *)(v9 + 16), a2, a3, &rep);
    v15[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v15 + *(void *)(v15[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v15[1] = MEMORY[0x1E4FBA470] + 16;
    if (v16 < 0) {
      operator delete((void *)v15[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v17);
  }
  return result;
}

void sub_18DA91D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy,std::shared_ptr<AMSCore::IHTTPCacheProvider>,std::function<void ()(std::function<void ()(void)> const&)>)::$_0,std::allocator<AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy,std::shared_ptr<AMSCore::IHTTPCacheProvider>,std::function<void ()(std::function<void ()(void)> const&)>)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDCA5320;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy,std::shared_ptr<AMSCore::IHTTPCacheProvider>,std::function<void ()(std::function<void ()(void)> const&)>)::$_0,std::allocator<AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy,std::shared_ptr<AMSCore::IHTTPCacheProvider>,std::function<void ()(std::function<void ()(void)> const&)>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EDCA5320;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy,std::shared_ptr<AMSCore::IHTTPCacheProvider>,std::function<void ()(std::function<void ()(void)> const&)>)::$_0,std::allocator<AMSCore::LoadNetworkBagTask::anonymous namespace'::performInternal(std::tuple<std::string,std::string>,std::shared_ptr<AMSCore::IMediaAccount const>,std::shared_ptr<AMSCore::IBundleInfo>,std::expected<AMSCore::LoadURLMetricsEventConfig,AMSCore::Error>,AMSCore::LoadNetworkBagTask::LoadPolicy,std::shared_ptr<AMSCore::IHTTPCacheProvider>,std::function<void ()(std::function<void ()(void)> const&)>)::$_0>,void ()(void)>::~__func()
{
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINS_20LoadNetworkBagResultENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINS_20LoadNetworkBagResultENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINS_20LoadNetworkBagResultENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINS_20LoadNetworkBagResultENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 144), 2uLL)) {
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::LoadNetworkBagResult,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

uint64_t std::pair<std::string const,AMSCore::Any>::~pair(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 48);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1EDCA5440[v2])(&v4, a1 + 24);
  }
  *(_DWORD *)(a1 + 48) = -1;
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZNK7AMSCore8BagValue18defaultValueGetterEvEUlRKT_E_NS_9allocatorIS7_EEFNS2_3AnyERKNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEEEE11target_typeEv()
{
  return &_ZTIZNK7AMSCore8BagValue18defaultValueGetterEvEUlRKT_E_;
}

uint64_t _ZNKSt3__110__function6__funcIZNK7AMSCore8BagValue18defaultValueGetterEvEUlRKT_E_NS_9allocatorIS7_EEFNS2_3AnyERKNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK7AMSCore8BagValue18defaultValueGetterEvEUlRKT_E_"
    || ((v3 & (unint64_t)"ZNK7AMSCore8BagValue18defaultValueGetterEvEUlRKT_E_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNK7AMSCore8BagValue18defaultValueGetterEvEUlRKT_E_")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK7AMSCore8BagValue18defaultValueGetterEvEUlRKT_E_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZNK7AMSCore8BagValue18defaultValueGetterEvEUlRKT_E_NS_9allocatorIS7_EEFNS2_3AnyERKNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEEEEclESH_(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 24);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v5 + 248));
  size_t v6 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(v5 + 432, a2);
  if ((uint64_t *)(v5 + 440) == v6)
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(_DWORD *)(a3 + 24) = -1;
    uint64_t v7 = *((unsigned int *)v6 + 20);
    if (v7 != -1)
    {
      ((void (*)(unsigned char *, uint64_t, uint64_t *))off_1EDCA5070[v7])(v8, a3, v6 + 7);
      *(_DWORD *)(a3 + 24) = v7;
    }
  }
  std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(v5 + 248));
}

void sub_18DA92030(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 24);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))off_1EDCA5020[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + 24) = -1;
  __clang_call_terminate(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZNK7AMSCore8BagValue18defaultValueGetterEvEUlRKT_E_NS_9allocatorIS7_EEFNS2_3AnyERKNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEEEE7__cloneEPNS0_6__baseISI_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDC83340;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZNK7AMSCore8BagValue18defaultValueGetterEvEUlRKT_E_NS_9allocatorIS7_EEFNS2_3AnyERKNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEEEE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EDC83340;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZNK7AMSCore8BagValue18defaultValueGetterEvEUlRKT_E_NS_9allocatorIS7_EEFNS2_3AnyERKNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEEEED0Ev()
{
}

void AMSCore::BagValue::getValueWithWrappedError<std::map<std::string,AMSCore::Any>,AMSCore::BagValue::getMapValue(void)::$_0>(char *a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)a1 + 32);
  if (!*(unsigned char *)(v1 + 88)) {
    goto LABEL_58;
  }
  uint64_t v3 = (void (***)(void))(a1 + 152);
  char v4 = (const std::runtime_error *)(v1 + 8);
  char v5 = *(unsigned char *)(v1 + 80);
  if (v5)
  {
    *((void *)a1 + 19) = *(void *)(v1 + 8);
    size_t v6 = (const char **)(a1 + 160);
    p_unsigned __int8 imp = (std::__libcpp_refstring *)(v1 + 16);
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)(a1 + 152), v4);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(v1 + 24);
    uint64_t v8 = (void *)(v1 + 48);
    uint64_t v9 = *(void *)(v1 + 48);
    *((void *)a1 + 24) = v9;
    uint64_t v10 = a1 + 192;
    *((void *)a1 + 19) = &unk_1EDC827D8;
    *((void *)a1 + 23) = *(void *)(v1 + 40);
    uint64_t v11 = *(void *)(v1 + 56);
    *((void *)a1 + 25) = v11;
    if (v11)
    {
      *(void *)(v9 + 16) = v10;
      *(void *)(v1 + 40) = v8;
      *uint64_t v8 = 0;
      *(void *)(v1 + 56) = 0;
    }
    else
    {
      *((void *)a1 + 23) = v10;
    }
    uint64_t v12 = (const std::runtime_error *)*((void *)a1 + 32);
    uint64_t v13 = v12[4].__vftable;
    char v4 = v12 + 4;
    *((void *)a1 + 26) = v13;
    size_t v6 = (const char **)(a1 + 216);
    p_unsigned __int8 imp = &v4->__imp_;
  }
  *size_t v6 = p_imp->__imp_;
  v4->__vftable = 0;
  v4->__imp_.__imp_ = 0;
  a1[224] = v5;
  uint64_t v14 = *((void *)a1 + 33);
  if (v14 && !atomic_fetch_add((atomic_ullong *volatile)(v14 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v15 = (std::__shared_weak_count *)*((void *)a1 + 33);
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  char v16 = (std::__shared_weak_count *)*((void *)a1 + 30);
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (a1[224])
    {
LABEL_14:
      uint64_t v17 = (void **)*((void *)a1 + 31);
      uint64_t v18 = *((void *)a1 + 19);
      *(void *)&v31[0] = &unk_1EDC83340;
      *((void *)&v31[0] + 1) = v17;
      *((void *)&v31[1] + 1) = v31;
      AMSCore::BagDataAccessor::getMapValue((uint64_t)&v25, v17, v18, (uint64_t)v31);
      if (*((long long **)&v31[1] + 1) == v31)
      {
        (*(void (**)(long long *))(*(void *)&v31[0] + 32))(v31);
      }
      else if (*((void *)&v31[1] + 1))
      {
        (*(void (**)(void))(**((void **)&v31[1] + 1) + 40))(*((void *)&v31[1] + 1));
      }
      std::optional<std::expected<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>,void>((std::runtime_error *)(a1 + 24), &v25);
      if (!v26)
      {
        ((void (*)(std::runtime_error *))v25.~runtime_error)(&v25);
LABEL_31:
        int v21 = 3;
        goto LABEL_32;
      }
LABEL_30:
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v25, (unsigned int *)v25.__imp_.__imp_);
      goto LABEL_31;
    }
  }
  else if (a1[224])
  {
    goto LABEL_14;
  }
  uint64_t v32 = 0;
  memset(v31, 0, sizeof(v31));
  v28[0] = 0;
  v28[1] = 0;
  char v27 = v28;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v27, (uint64_t *)v28, (const void **)v31, v31);
  char v19 = (void **)*((void *)a1 + 31);
  v29[0] = &unk_1EDC83340;
  v29[1] = v19;
  std::string v30 = v29;
  AMSCore::BagDataAccessor::getMapValue((uint64_t)&v25, v19, (uint64_t)&v27, (uint64_t)v29);
  if (v30 == v29)
  {
    (*(void (**)(void *))(v29[0] + 32))(v29);
  }
  else if (v30)
  {
    (*(void (**)(void))(*v30 + 40))();
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v27, v28[0]);
  if (v32 != -1) {
    ((void (*)(void *, char *))off_1EDCA5440[v32])(v29, (char *)&v31[1] + 8);
  }
  LODWORD(v32) = -1;
  if (SBYTE7(v31[1]) < 0)
  {
    operator delete(*(void **)&v31[0]);
    int v20 = v26;
    if (v26) {
      goto LABEL_29;
    }
LABEL_49:
    int v21 = 0;
    goto LABEL_55;
  }
  int v20 = v26;
  if (!v26) {
    goto LABEL_49;
  }
LABEL_29:
  std::optional<std::expected<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>,void>((std::runtime_error *)(a1 + 24), &v25);
  if (v26) {
    goto LABEL_30;
  }
  int v21 = 3;
LABEL_55:
  ((void (*)(std::runtime_error *))v25.~runtime_error)(&v25);
  if (!v20)
  {
    if (!a1[224])
    {
      LODWORD(v31[0]) = 204;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error,AMSCore::BagErrorCode>((uint64_t)&v25, (uint64_t)v3, (unsigned int *)v31);
    }
LABEL_58:
    __break(1u);
  }
LABEL_32:
  if (!a1[224])
  {
    (**v3)(v3);
    if (v21 != 3) {
      goto LABEL_40;
    }
LABEL_39:
    *((void *)a1 + 19) = a1 + 16;
    *(void *)a1 = 0;
    AMSCore::Task<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>::Promise::Awaiter::await_suspend((uint64_t)v3);
    return;
  }
  uint64_t v22 = (std::__shared_weak_count *)*((void *)a1 + 20);
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  if (v21 == 3) {
    goto LABEL_39;
  }
LABEL_40:
  uint64_t v23 = (char *)*((void *)a1 + 18);
  if (v23 == a1 + 120)
  {
    (*(void (**)(char *))(*((void *)a1 + 15) + 32))(a1 + 120);
    if (!a1[104]) {
      goto LABEL_51;
    }
  }
  else
  {
    if (v23) {
      (*(void (**)(char *))(*(void *)v23 + 40))(v23);
    }
    if (!a1[104]) {
      goto LABEL_51;
    }
  }
  uint64_t v24 = (void (***)(void))(a1 + 24);
  if (a1[96]) {
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v24, *((unsigned int **)a1 + 4));
  }
  else {
    (**v24)(v24);
  }
LABEL_51:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  operator delete(a1);
}

void sub_18DA92758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AMSCore::BagValue::getValueWithWrappedError<std::map<std::string,AMSCore::Any>,AMSCore::BagValue::getMapValue(void)::$_0>(char *__p)
{
  if (*(void *)__p)
  {
    uint64_t v2 = *((void *)__p + 33);
    if (v2 && !atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 33);
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    char v4 = (std::__shared_weak_count *)*((void *)__p + 30);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  char v5 = (char *)*((void *)__p + 18);
  if (v5 == __p + 120)
  {
    (*(void (**)(char *))(*((void *)__p + 15) + 32))(__p + 120);
    if (!__p[104]) {
      goto LABEL_17;
    }
    goto LABEL_14;
  }
  if (v5) {
    (*(void (**)(char *))(*(void *)v5 + 40))(v5);
  }
  if (__p[104])
  {
LABEL_14:
    size_t v6 = (void (***)(void))(__p + 24);
    if (__p[96]) {
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v6, *((unsigned int **)__p + 4));
    }
    else {
      (**v6)(v6);
    }
  }
LABEL_17:
  if (atomic_fetch_add(AMSCore::TaskCounter::getCount(void)::count, 0xFFFFFFFF) == 1) {
    MEMORY[0x192FA3E80](AMSCore::TaskCounter::getCount(void)::count);
  }
  operator delete(__p);
}

std::runtime_error *std::optional<std::expected<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>>::emplace[abi:fe180100]<std::expected<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>,void>(std::runtime_error *this, std::runtime_error *a2)
{
  if (LOBYTE(this[5].__vftable))
  {
    if (LOBYTE(this[4].__imp_.__imp_)) {
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this, (unsigned int *)this->__imp_.__imp_);
    }
    else {
      ((void (*)(std::runtime_error *))this->~runtime_error)(this);
    }
    LOBYTE(this[5].__vftable) = 0;
  }
  char imp = (char)a2[4].__imp_.__imp_;
  if (imp)
  {
    p_char imp = &a2->__imp_;
    size_t v6 = a2->__imp_.__imp_;
    this->__vftable = a2->__vftable;
    this->__imp_.__imp_ = v6;
    uint64_t v7 = &this->__imp_;
    uint64_t v8 = a2[1].__vftable;
    this[1].__vftable = v8;
    if (v8)
    {
      *((void *)v6 + 2) = v7;
      a2->__vftable = (std::runtime_error_vtbl *)p_imp;
      p_imp->__imp_ = 0;
      a2[1].__vftable = 0;
    }
    else
    {
      this->__vftable = (std::runtime_error_vtbl *)v7;
    }
    LOBYTE(this[1].__imp_.__imp_) = a2[1].__imp_.__imp_;
  }
  else
  {
    std::runtime_error::runtime_error(this, a2);
    this[1] = a2[1];
    this->__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v9 = (std::runtime_error_vtbl *)&a2[2].__imp_;
    uint64_t v10 = a2[2].__imp_.__imp_;
    this[2].__vftable = a2[2].__vftable;
    this[2].__imp_.__imp_ = v10;
    uint64_t v11 = (std::runtime_error_vtbl *)&this[2].__imp_;
    uint64_t v12 = a2[3].__vftable;
    this[3].__vftable = v12;
    if (v12)
    {
      *((void *)v10 + 2) = v11;
      a2[2].__vftable = v9;
      v9->~runtime_error = 0;
      a2[3].__vftable = 0;
    }
    else
    {
      this[2].__vftable = v11;
    }
    *(std::runtime_error *)((char *)this + 56) = *(std::runtime_error *)((char *)a2 + 56);
    a2[3].__imp_.__imp_ = 0;
    a2[4].__vftable = 0;
  }
  LOBYTE(this[4].__imp_.__imp_) = imp;
  LOBYTE(this[5].__vftable) = 1;
  return this;
}

std::runtime_error *std::optional<std::expected<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>(std::runtime_error *this, std::runtime_error *a2)
{
  if (LOBYTE(this[5].__vftable))
  {
    if (LOBYTE(this[4].__imp_.__imp_)) {
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)this, (unsigned int *)this->__imp_.__imp_);
    }
    else {
      ((void (*)(std::runtime_error *))this->~runtime_error)(this);
    }
    LOBYTE(this[5].__vftable) = 0;
  }
  std::runtime_error::runtime_error(this, a2);
  this->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA448] + 16);
  this[1] = a2[1];
  this->__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  this[2].__vftable = a2[2].__vftable;
  p_char imp = (std::runtime_error_vtbl *)&a2[2].__imp_;
  char imp = a2[2].__imp_.__imp_;
  this[2].__imp_.__imp_ = imp;
  size_t v6 = (std::runtime_error_vtbl *)&this[2].__imp_;
  uint64_t v7 = a2[3].__vftable;
  this[3].__vftable = v7;
  if (v7)
  {
    *((void *)imp + 2) = v6;
    a2[2].__vftable = p_imp;
    p_imp->~runtime_error = 0;
    a2[3].__vftable = 0;
  }
  else
  {
    this[2].__vftable = v6;
  }
  *(std::runtime_error *)((char *)this + 56) = *(std::runtime_error *)((char *)a2 + 56);
  a2[3].__imp_.__imp_ = 0;
  a2[4].__vftable = 0;
  LOBYTE(this[4].__imp_.__imp_) = 0;
  LOBYTE(this[5].__vftable) = 1;
  return this;
}

void AMSCore::Task<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>::Promise::unhandled_exception()
{
  AMSCore::Error::makeFromCurrentException((AMSCore::Error *)&v0);
}

uint64_t sub_18DA92BEC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v36, (uint64_t)v33);
  std::optional<std::expected<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>>::emplace[abi:fe180100]<std::unexpected<AMSCore::Error>,void>(v29, v36);
  v36[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::string v30 = v38;
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v37, v37[1]);
  MEMORY[0x192FA3C30](v36);
  v33[0] = &unk_1EDC827D8;
  uint64_t v31 = v35;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v34, v34[1]);
  return MEMORY[0x192FA3C30](v33);
}

uint64_t AMSCore::Task<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>::Promise::Awaiter::await_suspend(uint64_t result)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void (**)(void))atomic_exchange((atomic_ullong *volatile)(*(void *)result + 96), 1uLL);
  if (v1)
  {
    uint64_t v2 = result;
    if (v1 == (void (**)(void))2) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result - 8))(*(void *)result - 16);
    }
    uint64_t v3 = (uint64_t *)(*(void *)result + 128);
    __n128 result = *v3;
    if (*v3)
    {
      if (result == *(void *)v2 + 104)
      {
        int v20 = v19;
        __n128 result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 24))(result, v19);
      }
      else
      {
        int v20 = *(void **)(*(void *)v2 + 128);
        *uint64_t v3 = 0;
      }
    }
    else
    {
      int v20 = 0;
    }
    if (v20)
    {
      uint64_t v4 = *(void *)v2;
      if (!*(unsigned char *)(v4 + 88))
      {
        __break(1u);
        return result;
      }
      char v5 = (std::runtime_error *)(v4 + 8);
      char v6 = *(unsigned char *)(v4 + 80);
      if (v6)
      {
        uint64_t v7 = (std::runtime_error_vtbl *)(v4 + 16);
        uint64_t v8 = *(void *)(v4 + 16);
        v12.__vftable = *(std::runtime_error_vtbl **)(v4 + 8);
        v12.__imp_.__imp_ = (const char *)v8;
        *(void *)&long long v13 = *(void *)(v4 + 24);
        if ((void)v13)
        {
          *(void *)(v8 + 16) = &v12.__imp_;
          v5->__vftable = v7;
          v7->~runtime_error = 0;
          *(void *)(v4 + 24) = 0;
        }
        else
        {
          v12.__vftable = (std::runtime_error_vtbl *)&v12.__imp_;
        }
        BYTE8(v13) = *(unsigned char *)(v4 + 32);
      }
      else
      {
        std::runtime_error::runtime_error(&v12, v5);
        uint64_t v9 = (void *)(v4 + 48);
        uint64_t v10 = *(void *)(v4 + 48);
        long long v13 = *(_OWORD *)(v4 + 24);
        uint64_t v11 = *(uint64_t **)(v4 + 40);
        v12.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        uint64_t v14 = v11;
        uint64_t v15 = v10;
        if (*(void *)(v4 + 56))
        {
          *(void *)(v10 + 16) = &v15;
          *(void *)(v4 + 40) = v9;
          *uint64_t v9 = 0;
          *(void *)(v4 + 56) = 0;
        }
        else
        {
          uint64_t v14 = &v15;
        }
        long long v17 = *(_OWORD *)(v4 + 64);
        *(void *)(v4 + 64) = 0;
        *(void *)(v4 + 72) = 0;
      }
      char v18 = v6;
      if (!v20) {
        std::__throw_bad_function_call[abi:fe180100]();
      }
      (*(void (**)(void *, std::runtime_error *))(*v20 + 48))(v20, &v12);
      if (v18) {
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v12, (unsigned int *)v12.__imp_.__imp_);
      }
      else {
        ((void (*)(std::runtime_error *))v12.~runtime_error)(&v12);
      }
    }
    else
    {
      (*v1)(v1);
    }
    __n128 result = (uint64_t)v20;
    if (v20 == v19)
    {
      return (*(uint64_t (**)(void *))(v19[0] + 32))(v19);
    }
    else if (v20)
    {
      return (*(uint64_t (**)(void))(*v20 + 40))();
    }
  }
  return result;
}

void sub_18DA92FCC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>::Promise>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore4TaskINS_8BagValue4ItemINSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocat"
                     "orIcEEEENS_3AnyENS3_4lessIvEENS8_INS3_4pairIKSA_SB_EEEEEEEENS_5ErrorEE7Promise17get_return_objectEv"
                     "E13DetachPromise"
    || ((v3 & (unint64_t)"ZN7AMSCore4TaskINS_8BagValue4ItemINSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEEN"
                                "S3_9allocatorIcEEEENS_3AnyENS3_4lessIvEENS8_INS3_4pairIKSA_SB_EEEEEEEENS_5ErrorEE7Promis"
                                "e17get_return_objectEvE13DetachPromise" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore4TaskINS_8BagValue4ItemINSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_3AnyENS3_4lessIvEENS8_INS3_4pairIKSA_SB_EEEEEEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore4TaskINS_8BagValue4ItemINSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS_3AnyENS3_4lessIvEENS8_INS3_4pairIKSA_SB_EEEEEEEENS_5ErrorEE7Promise17get_return_objectEvE13DetachPromise" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMSCore::Task<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>::Promise>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (atomic_exchange((atomic_ullong *volatile)(v1 + 96), 2uLL)) {
    return (*(uint64_t (**)(uint64_t))(v1 - 8))(v1 - 16);
  }
  return result;
}

void std::__shared_ptr_pointer<AMSCore::Task<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>::Promise *,AMSCore::Task<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>::Promise::get_return_object(void)::DetachPromise,std::allocator<AMSCore::Task<AMSCore::BagValue::Item<std::map<std::string,AMSCore::Any>>,AMSCore::Error>::Promise>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

std::runtime_error *std::expected<std::shared_ptr<AMSCore::IMediaAccount>,AMSCore::Error>::operator=[abi:fe180100](std::runtime_error *this, std::runtime_error *a2)
{
  if (LOBYTE(this[4].__imp_.__imp_))
  {
    if (LOBYTE(a2[4].__imp_.__imp_))
    {
      std::runtime_error v4 = *a2;
      a2->__vftable = 0;
      a2->__imp_.__imp_ = 0;
      char imp = (std::__shared_weak_count *)this->__imp_.__imp_;
      *this = v4;
      if (imp && !atomic_fetch_add(&imp->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
        std::__shared_weak_count::__release_weak(imp);
      }
    }
    else
    {
      char v6 = (std::__shared_weak_count *)this->__imp_.__imp_;
      if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      std::runtime_error::runtime_error(this, a2);
      this->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA448] + 16);
      this[1] = a2[1];
      this->__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      this[2].__vftable = a2[2].__vftable;
      p_char imp = (std::runtime_error_vtbl *)&a2[2].__imp_;
      uint64_t v8 = a2[2].__imp_.__imp_;
      this[2].__imp_.__imp_ = v8;
      uint64_t v9 = (std::runtime_error_vtbl *)&this[2].__imp_;
      uint64_t v10 = a2[3].__vftable;
      this[3].__vftable = v10;
      if (v10)
      {
        *((void *)v8 + 2) = v9;
        a2[2].__vftable = p_imp;
        p_imp->~runtime_error = 0;
        a2[3].__vftable = 0;
      }
      else
      {
        this[2].__vftable = v9;
      }
      *(std::runtime_error *)((char *)this + 56) = *(std::runtime_error *)((char *)a2 + 56);
      a2[3].__imp_.__imp_ = 0;
      a2[4].__vftable = 0;
      LOBYTE(this[4].__imp_.__imp_) = 0;
    }
  }
  else if (LOBYTE(a2[4].__imp_.__imp_))
  {
    ((void (*)(std::runtime_error *))this->~runtime_error)(this);
    *this = *a2;
    a2->__vftable = 0;
    a2->__imp_.__imp_ = 0;
    LOBYTE(this[4].__imp_.__imp_) = 1;
  }
  else
  {
    AMSCore::Error::operator=((uint64_t)this, (uint64_t)a2);
  }
  return this;
}

uint64_t AMSCore::Error::operator=(uint64_t a1, uint64_t a2)
{
  std::runtime_error::operator=((std::runtime_error *)a1, (const std::runtime_error *)a2);
  uint64_t v5 = a1 + 40;
  std::runtime_error v4 = *(unsigned int **)(a1 + 40);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1 + 32, v4);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  char v6 = (void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 48) = v8;
  if (v8)
  {
    *(void *)(v7 + 16) = v5;
    *(void *)(a2 + 32) = v6;
    *char v6 = 0;
    *(void *)(a2 + 48) = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v5;
  }
  long long v9 = *(_OWORD *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v9;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return a1;
}

void std::__throw_bad_variant_access[abi:fe180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA4F0] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA340], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:fe180100]<std::__variant_detail::__visitation::__variant::__value_visitor<AMSCore::overloaded<AMSCore::SynchronousBagPolicy::ExpiredDataPermission::getIsExpiredDataPermitted(void)::$_0,AMSCore::SynchronousBagPolicy::ExpiredDataPermission::getIsExpiredDataPermitted(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,std::optional<std::chrono::duration<long long,std::ratio<1l,1l>>>> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:fe180100]<std::__variant_detail::__visitation::__variant::__value_visitor<AMSCore::overloaded<AMSCore::SynchronousBagPolicy::ExpiredDataPermission::getIsExpiredDataPermitted(void)::$_0,AMSCore::SynchronousBagPolicy::ExpiredDataPermission::getIsExpiredDataPermitted(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,std::optional<std::chrono::duration<long long,std::ratio<1l,1l>>>> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:fe180100]<std::__variant_detail::__visitation::__variant::__value_visitor<AMSCore::overloaded<AMSCore::SynchronousBagPolicy::ExpiredDataPermission::getMaxExpirationDuration(void)::$_0,AMSCore::SynchronousBagPolicy::ExpiredDataPermission::getMaxExpirationDuration(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,std::optional<std::chrono::duration<long long,std::ratio<1l,1l>>>> const&>(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:fe180100]<std::__variant_detail::__visitation::__variant::__value_visitor<AMSCore::overloaded<AMSCore::SynchronousBagPolicy::ExpiredDataPermission::getMaxExpirationDuration(void)::$_0,AMSCore::SynchronousBagPolicy::ExpiredDataPermission::getMaxExpirationDuration(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,std::optional<std::chrono::duration<long long,std::ratio<1l,1l>>>> const&>()
{
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:fe180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,std::optional<std::chrono::duration<long long,std::ratio<1l,1l>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,std::optional<std::chrono::duration<long long,std::ratio<1l,1l>>>> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 8)) {
    BOOL v3 = *(unsigned char *)(a3 + 8) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return (*(unsigned char *)(a2 + 8) != 0) == (*(unsigned char *)(a3 + 8) != 0);
  }
  else {
    return *(void *)a2 == *(void *)a3;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:fe180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,std::optional<std::chrono::duration<long long,std::ratio<1l,1l>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,std::optional<std::chrono::duration<long long,std::ratio<1l,1l>>>> const>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:fe180100]<std::__variant_detail::__visitation::__variant::__value_visitor<AMSCore::overloaded<AMSCore::SynchronousBagPolicy::ExpiredDataPermission::hash(void)::$_0,AMSCore::SynchronousBagPolicy::ExpiredDataPermission::hash(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,std::optional<std::chrono::duration<long long,std::ratio<1l,1l>>>> const&>(uint64_t a1, unsigned char *a2)
{
  if (a2[8]) {
    return *(void *)a2;
  }
  else {
    return 0;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:fe180100]<std::__variant_detail::__visitation::__variant::__value_visitor<AMSCore::overloaded<AMSCore::SynchronousBagPolicy::ExpiredDataPermission::hash(void)::$_0,AMSCore::SynchronousBagPolicy::ExpiredDataPermission::hash(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,std::optional<std::chrono::duration<long long,std::ratio<1l,1l>>>> const&>()
{
  return 66740831;
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[51]>(uint64_t a1, unsigned int a2, const char *a3)
{
  uint64_t v4 = a2;
  AMSCore::StringUtils::join<char [51]>(&__what_arg, a3);
  *(void *)&v15.__val_ = v4;
  v15.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v9, v15, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  v9.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  uint64_t v10 = &v11;
  long long v13 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v9);
  *(std::error_code *)(a1 + 16) = v9.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v5 = v11;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = a1 + 40;
  uint64_t v7 = v12;
  *(void *)(a1 + 48) = v12;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    uint64_t v5 = 0;
    uint64_t v10 = &v11;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v6;
  }
  *(_OWORD *)(a1 + 56) = v13;
  long long v13 = 0uLL;
  v9.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v5);
  return MEMORY[0x192FA3C30](&v9);
}

void sub_18DA9356C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::StringUtils::join<char [51]>(std::string *a1, const char *a2)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v6);
  size_t v4 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v6, (uint64_t)a2, v4);
  std::stringbuf::str[abi:fe180100]((uint64_t)v7, a1);
  uint64_t v6 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v7[-1] + *(void *)(v6 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v7[0] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FA3FD0](&v9);
}

uint64_t AMSCore::GZip::decompress(uint64_t a1)
{
  AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[51]>((uint64_t)&v6, 8u, "Gzip compression is not supported on this platform");
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v6);
  *(_OWORD *)(a1 + 16) = v7;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v2 = v9;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v2;
  uint64_t v3 = a1 + 40;
  uint64_t v4 = v10;
  *(void *)(a1 + 48) = v10;
  if (v4)
  {
    *(void *)(v2 + 16) = v3;
    char v8 = &v9;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v2 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v3;
  }
  *(_OWORD *)(a1 + 56) = v11;
  long long v11 = 0uLL;
  *(unsigned char *)(a1 + 72) = 0;
  v6.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v8, (unsigned int *)v2);
  return MEMORY[0x192FA3C30](&v6);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8fe180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE19__generic_constructB8fe180100INS0_18__move_constructorIS11_LNS0_6_TraitE1EEEEEvRS12_OT_EUlRS18_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1G_EEEDcS18_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  uint64_t v3 = a3 + 1;
  uint64_t v4 = a3[1];
  a2[1] = v4;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = a3[2];
  a2[2] = v6;
  if (v6)
  {
    *(void *)(v4 + 16) = v5;
    *a3 = v3;
    *uint64_t v3 = 0;
    a3[2] = 0;
  }
  else
  {
    *a2 = v5;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8fe180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE19__generic_constructB8fe180100INS0_18__move_constructorIS11_LNS0_6_TraitE1EEEEEvRS12_OT_EUlRS18_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1G_EEEDcS18_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8fe180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE19__generic_constructB8fe180100INS0_18__move_constructorIS11_LNS0_6_TraitE1EEEEEvRS12_OT_EUlRS18_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1G_EEEDcS18_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8fe180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE19__generic_constructB8fe180100INS0_18__move_constructorIS11_LNS0_6_TraitE1EEEEEvRS12_OT_EUlRS18_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1G_EEEDcS18_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8fe180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE19__generic_constructB8fe180100INS0_18__move_constructorIS11_LNS0_6_TraitE1EEEEEvRS12_OT_EUlRS18_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1G_EEEDcS18_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8fe180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE19__generic_constructB8fe180100INS0_18__move_constructorIS11_LNS0_6_TraitE1EEEEEvRS12_OT_EUlRS18_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1G_EEEDcS18_DpT0_(uint64_t a1, void *a2, double *a3)
{
  double result = *a3;
  *a2 = *(void *)a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8fe180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE19__generic_constructB8fe180100INS0_18__move_constructorIS11_LNS0_6_TraitE1EEEEEvRS12_OT_EUlRS18_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1G_EEEDcS18_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100INS0_17__move_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS17_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1F_EEEDcS17_DpT0_(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 24);
  if (v5 != -1)
  {
    if (v5 == 8)
    {
      long long v7 = (void *)(a2 + 8);
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a2, *(unsigned int **)(a2 + 8));
      *(void *)a2 = *a3;
      char v8 = a3 + 1;
      uint64_t v9 = a3[1];
      *long long v7 = v9;
      uint64_t v10 = a3[2];
      *(void *)(a2 + 16) = v10;
      if (v10)
      {
        *(void *)(v9 + 16) = v7;
        *a3 = v8;
        *char v8 = 0;
        a3[2] = 0;
      }
      else
      {
        *(void *)a2 = v7;
      }
      return;
    }
    ((void (*)(char *, uint64_t))off_1EDCA54D0[v5])(&v15, v4);
  }
  *(_DWORD *)(v4 + 24) = -1;
  *(void *)uint64_t v4 = *a3;
  long long v11 = a3 + 1;
  uint64_t v12 = a3[1];
  *(void *)(v4 + 8) = v12;
  uint64_t v13 = v4 + 8;
  uint64_t v14 = a3[2];
  *(void *)(v4 + 16) = v14;
  if (v14)
  {
    *(void *)(v12 + 16) = v13;
    *a3 = v11;
    *long long v11 = 0;
    a3[2] = 0;
  }
  else
  {
    *(void *)uint64_t v4 = v13;
  }
  *(_DWORD *)(v4 + 24) = 8;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100INS0_17__move_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS17_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1F_EEEDcS17_DpT0_(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 24);
  if (v5 != -1)
  {
    if (v5 == 7)
    {
      *a2 = *a3;
      return result;
    }
    double result = ((uint64_t (*)(char *, uint64_t))off_1EDCA54D0[v5])(&v6, v4);
  }
  *(void *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 24) = 7;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100INS0_17__move_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS17_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1F_EEEDcS17_DpT0_(__n128 **a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (*a1)[1].n128_u32[2];
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 6)
  {
    ((void (*)(char *, __n128 *))off_1EDCA54D0[v5])(&v8, v4);
LABEL_7:
    v4[1].n128_u32[2] = -1;
    __n128 result = *a3;
    v4[1].n128_u64[0] = a3[1].n128_u64[0];
    *uint64_t v4 = result;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a3->n128_u64[0] = 0;
    v4[1].n128_u32[2] = 6;
    return result;
  }
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  __n128 result = *a3;
  *(void *)(a2 + 16) = a3[1].n128_u64[0];
  *(__n128 *)a2 = result;
  a3[1].n128_u8[7] = 0;
  a3->n128_u8[0] = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100INS0_17__move_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS17_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1F_EEEDcS17_DpT0_(__n128 **a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (*a1)[1].n128_u32[2];
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 5)
  {
    ((void (*)(char *, __n128 *))off_1EDCA54D0[v5])(&v8, v4);
LABEL_7:
    v4[1].n128_u32[2] = -1;
    __n128 result = *a3;
    v4[1].n128_u64[0] = a3[1].n128_u64[0];
    *uint64_t v4 = result;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a3->n128_u64[0] = 0;
    v4[1].n128_u32[2] = 5;
    return result;
  }
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  __n128 result = *a3;
  *(void *)(a2 + 16) = a3[1].n128_u64[0];
  *(__n128 *)a2 = result;
  a3[1].n128_u8[7] = 0;
  a3->n128_u8[0] = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100INS0_17__move_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS17_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1F_EEEDcS17_DpT0_(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 24);
  if (v5 != -1)
  {
    if (v5 == 4)
    {
      *a2 = *a3;
      return result;
    }
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EDCA54D0[v5])(&v6, v4);
  }
  *(void *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 24) = 4;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100INS0_17__move_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS17_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1F_EEEDcS17_DpT0_(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 24);
  if (v5 != -1)
  {
    if (v5 == 3)
    {
      *a2 = *a3;
      return result;
    }
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_1EDCA54D0[v5])(&v6, v4);
  }
  *(void *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 24) = 3;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100INS0_17__move_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS17_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1F_EEEDcS17_DpT0_(uint64_t *a1, void *a2, double *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 24);
  if (v5 != -1)
  {
    if (v5 == 2)
    {
      double result = *a3;
      *a2 = *(void *)a3;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1EDCA54D0[v5])(&v7, v4);
  }
  double result = *a3;
  *(double *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 24) = 2;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100INS0_17__move_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS17_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1F_EEEDcS17_DpT0_(uint64_t result, unsigned char *a2, unsigned char *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 24);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    double result = ((uint64_t (*)(char *, uint64_t))off_1EDCA54D0[v5])(&v6, v4);
  }
  *(unsigned char *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 24) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8fe180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE16__generic_assignB8fe180100INS0_17__move_assignmentIS11_LNS0_6_TraitE1EEEEEvOT_EUlRS17_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1F_EEEDcS17_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 24);
  if (v2 != -1)
  {
    if (!v2) {
      return result;
    }
    double result = ((uint64_t (*)(char *, uint64_t))off_1EDCA54D0[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t AMSCore::Any::Any(uint64_t result, void *a2)
{
  *(void *)double result = *a2;
  uint64_t v2 = a2 + 1;
  uint64_t v3 = a2[1];
  *(void *)(result + 8) = v3;
  uint64_t v4 = result + 8;
  uint64_t v5 = a2[2];
  *(void *)(result + 16) = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    *a2 = v2;
    *uint64_t v2 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)double result = v4;
  }
  *(_DWORD *)(result + 24) = 8;
  return result;
}

__n128 AMSCore::Any::Any(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  a1[1].n128_u32[2] = 5;
  return result;
}

{
  __n128 result;

  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  a1[1].n128_u32[2] = 6;
  return result;
}

__n128 AMSCore::Any::Any(uint64_t a1, __n128 *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  *(_DWORD *)(a1 + 24) = 9;
  return result;
}

uint64_t AMSCore::Any::BOOLean(uint64_t a1, void *__s1, size_t a3)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (!v4) {
    goto LABEL_32;
  }
  char v7 = (uint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      int v8 = *((char *)v4 + 55);
      uint64_t v9 = v8 >= 0 ? v4 + 4 : (uint64_t *)v4[4];
      size_t v10 = v8 >= 0 ? *((unsigned __int8 *)v4 + 55) : v4[5];
      size_t v11 = v10 >= a3 ? a3 : v10;
      int v12 = memcmp(__s1, v9, v11);
      if (v12) {
        break;
      }
      if (a3 <= v10) {
        goto LABEL_17;
      }
LABEL_3:
      uint64_t v4 = (uint64_t *)v4[1];
      if (!v4) {
        goto LABEL_18;
      }
    }
    if ((v12 & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_17:
    char v7 = v4;
    uint64_t v4 = (uint64_t *)*v4;
  }
  while (v4);
LABEL_18:
  if (v7 == v3) {
    goto LABEL_32;
  }
  int v13 = *((char *)v7 + 55);
  if (v13 >= 0) {
    uint64_t v14 = v7 + 4;
  }
  else {
    uint64_t v14 = (const void *)v7[4];
  }
  if (v13 >= 0) {
    size_t v15 = *((unsigned __int8 *)v7 + 55);
  }
  else {
    size_t v15 = v7[5];
  }
  if (v15 >= a3) {
    size_t v16 = a3;
  }
  else {
    size_t v16 = v15;
  }
  int v17 = memcmp(__s1, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_30;
    }
LABEL_32:
    char v18 = &AMSCore::Any::Null(void)::null;
  }
  else
  {
    if (a3 < v15) {
      goto LABEL_32;
    }
LABEL_30:
    char v18 = v7 + 7;
  }
  LOBYTE(v24[0]) = 0;
  int v25 = -1;
  uint64_t v19 = *((unsigned int *)v18 + 6);
  if (v19 == -1) {
    return 0;
  }
  ((void (*)(char *, double *))off_1EDCA55C0[v19])(&v26, v24);
  int v25 = v19;
  switch((char)v19)
  {
    case 1:
      BOOL v21 = LOBYTE(v24[0]) == 0;
      goto LABEL_39;
    case 2:
      v20.n128_f64[0] = v24[0];
      BOOL v21 = v24[0] == 0.0;
      goto LABEL_39;
    case 3:
    case 4:
      BOOL v21 = *(void *)&v24[0] == 0;
LABEL_39:
      uint64_t v22 = !v21;
      break;
    default:
      uint64_t v22 = 0;
      break;
  }
  ((void (*)(char *, double *, __n128))off_1EDCA54D0[v19])(&v27, v24, v20);
  return v22;
}

void sub_18DA94088(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13, int a14, int a15, __int16 a16, char a17, char a18)
{
  if (a13 != -1) {
    ((void (*)(char *, char *))off_1EDCA54D0[a13])(&a18, &a10);
  }
  a13 = -1;
  __clang_call_terminate(a1);
}

uint64_t *AMSCore::Any::Null(AMSCore::Any *this)
{
  return &AMSCore::Any::Null(void)::null;
}

void AMSCore::Any::string(uint64_t a1, uint64_t a2, const void **a3)
{
  int v4 = *((char *)a3 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a3;
  }
  else {
    uint64_t v5 = *a3;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v6 = (size_t)a3[1];
  }
  char v7 = (uint64_t *)(a2 + 8);
  int v8 = *(uint64_t **)(a2 + 8);
  if (!v8) {
    goto LABEL_40;
  }
  uint64_t v9 = (uint64_t *)(a2 + 8);
  do
  {
    while (1)
    {
      int v10 = *((char *)v8 + 55);
      size_t v11 = v10 >= 0 ? v8 + 4 : (uint64_t *)v8[4];
      size_t v12 = v10 >= 0 ? *((unsigned __int8 *)v8 + 55) : v8[5];
      size_t v13 = v12 >= v6 ? v6 : v12;
      int v14 = memcmp(v5, v11, v13);
      if (!v14) {
        break;
      }
      if ((v14 & 0x80000000) == 0) {
        goto LABEL_11;
      }
LABEL_9:
      uint64_t v9 = v8;
      int v8 = (uint64_t *)*v8;
      if (!v8) {
        goto LABEL_26;
      }
    }
    if (v6 <= v12) {
      goto LABEL_9;
    }
LABEL_11:
    int v8 = (uint64_t *)v8[1];
  }
  while (v8);
LABEL_26:
  if (v9 == v7) {
    goto LABEL_40;
  }
  int v15 = *((char *)v9 + 55);
  if (v15 >= 0) {
    size_t v16 = v9 + 4;
  }
  else {
    size_t v16 = (const void *)v9[4];
  }
  if (v15 >= 0) {
    size_t v17 = *((unsigned __int8 *)v9 + 55);
  }
  else {
    size_t v17 = v9[5];
  }
  if (v17 >= v6) {
    size_t v18 = v6;
  }
  else {
    size_t v18 = v17;
  }
  int v19 = memcmp(v5, v16, v18);
  if (v19)
  {
    if ((v19 & 0x80000000) == 0) {
      goto LABEL_38;
    }
LABEL_40:
    __n128 v20 = &AMSCore::Any::Null(void)::null;
  }
  else
  {
    if (v6 < v17) {
      goto LABEL_40;
    }
LABEL_38:
    __n128 v20 = v9 + 7;
  }
  v26[0] = 0;
  int v29 = -1;
  uint64_t v21 = *((unsigned int *)v20 + 6);
  if (v21 == -1
    || ((((void (*)(char *, char *))off_1EDCA55C0[v21])(&v30, v26), int v29 = v21, v21 != 5)
      ? (uint64_t v22 = 0)
      : (uint64_t v22 = v26),
        v21 != 5))
  {
    *(unsigned char *)(a1 + 23) = 0;
    *(unsigned char *)a1 = 0;
    if (v21 == -1) {
      return;
    }
    goto LABEL_51;
  }
  uint64_t v23 = (uint64_t)&v28;
  if (v21 != 5) {
    uint64_t v23 = 23;
  }
  if ((*(char *)v23 & 0x80000000) == 0)
  {
    *(_OWORD *)a1 = *(_OWORD *)v22;
    *(void *)(a1 + 16) = *((void *)v22 + 2);
    goto LABEL_52;
  }
  uint64_t v24 = *(const std::string::value_type **)v22;
  uint64_t v25 = (uint64_t)&v27;
  if (v21 != 5) {
    uint64_t v25 = 8;
  }
  std::string::__init_copy_ctor_external((std::string *)a1, v24, *(void *)v25);
  LODWORD(v21) = v29;
  if (v29 != -1)
  {
LABEL_51:
    uint64_t v21 = v21;
LABEL_52:
    ((void (*)(char *, char *))off_1EDCA54D0[v21])(&v31, v26);
  }
}

void sub_18DA942E4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13, int a14, int a15, __int16 a16, char a17, char a18)
{
  if (a13 != -1) {
    ((void (*)(char *, char *))off_1EDCA54D0[a13])(&a18, &a10);
  }
  a13 = -1;
  __clang_call_terminate(a1);
}

void AMSCore::Log::error<char const(&)[21],std::string_view &>(uint64_t *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v8);
  uint64_t v2 = v8;
  if (*(unsigned __int8 *)(v8 + 8) <= 4u)
  {
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v10);
    uint64_t v3 = *(void *)(v10[0] - 24);
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v10, (uint64_t)"Unexpected charset: ", 20);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v10, *a1, a1[1]);
    uint64_t v4 = v10[6];
    uint64_t v5 = (char *)v10 + *(void *)(v10[0] - 24);
    if ((v5[32] & 5) != 0)
    {
      uint64_t v6 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v5 + 5) + 32))(&rep);
      uint64_t v6 = v17;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v14 = 4;
    uint64_t v15 = v4;
    uint64_t v16 = v6;
    (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v2 + 16) + 16))(*(void *)(v2 + 16), "data", 4, &rep);
    v10[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v10[1] = MEMORY[0x1E4FBA470] + 16;
    if (v11 < 0) {
      operator delete((void *)v10[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x192FA3FD0](&v12);
  }
  char v7 = v9;
  if (v9)
  {
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_18DA94698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[19],AMSCore::IData::Encoding &>(uint64_t a1, unsigned int a2, char *a3)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v11);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v11, (uint64_t)"Unknown encoding: ", 18);
  AMSCore::IData::operator<<(&v11, *a3);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v11.__imp_, &v10);
  v11.__vftable = (std::system_error_vtbl *)*MEMORY[0x1E4FBA418];
  *(std::system_error_vtbl **)((char *)&v11.__vftable + (unint64_t)v11.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
  v11.__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
  if (v17 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FA3FD0](&v18);
  *(void *)&v19.__val_ = a2;
  v19.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v11, v19, &v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  v11.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  uint64_t v12 = &v13;
  long long v15 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v11);
  *(std::error_code *)(a1 + 16) = v11.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v6 = v13;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = a1 + 40;
  uint64_t v8 = v14;
  *(void *)(a1 + 48) = v14;
  if (v8)
  {
    *(void *)(v6 + 16) = v7;
    uint64_t v6 = 0;
    uint64_t v12 = &v13;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v7;
  }
  *(_OWORD *)(a1 + 56) = v15;
  long long v15 = 0uLL;
  v11.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v12, (unsigned int *)v6);
  return MEMORY[0x192FA3C30](&v11);
}

void sub_18DA9491C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::IData::operator<<(void *a1, char a2)
{
  switch(a2)
  {
    case 1:
      uint64_t v3 = 16;
      HIBYTE(__p[2]) = 16;
      strcpy((char *)__p, "application/json");
      goto LABEL_8;
    case 2:
      uint64_t v4 = operator new(0x20uLL);
      __p[0] = v4;
      *(_OWORD *)&__p[1] = xmmword_18DDE9B30;
      strcpy((char *)v4, "application/x-apple-plist");
      uint64_t v3 = 25;
      goto LABEL_9;
    case 3:
      uint64_t v3 = 4;
      HIBYTE(__p[2]) = 4;
      strcpy((char *)__p, "data");
      goto LABEL_8;
    case 4:
      uint64_t v3 = 10;
      HIBYTE(__p[2]) = 10;
      strcpy((char *)__p, "utf8String");
      goto LABEL_8;
    case 5:
      uint64_t v3 = 21;
      HIBYTE(__p[2]) = 21;
      strcpy((char *)__p, "x-www-form-urlencoded");
      goto LABEL_8;
    default:
      uint64_t v3 = 7;
      HIBYTE(__p[2]) = 7;
      strcpy((char *)__p, "UNKNOWN");
LABEL_8:
      uint64_t v4 = __p;
LABEL_9:
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)v4, v3);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      return;
  }
}

void sub_18DA94A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 AMSCore::serialize(std::string *a1, void *a2)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v7);
  std::stringbuf::str[abi:fe180100]((uint64_t)v8, &v6);
  std::string v5 = v6;
  uint64_t v7 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v8[-1] + *(void *)(v7 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v8[0] = MEMORY[0x1E4FBA470] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FA3FD0](&v10);
  __n128 result = *(__n128 *)&v5.__r_.__value_.__l.__data_;
  *a1 = v5;
  a1[3].__r_.__value_.__s.__data_[0] = 1;
  return result;
}

void AMSCore::deserialize(uint64_t a1, uint64_t a2, int a3)
{
  char v63 = a3;
  switch(a3)
  {
    case 1:
      AMSCore::JsonData::decode((uint64_t *)a2, a1);
      return;
    case 2:
      int v4 = *(char *)(a2 + 23);
      if (v4 >= 0) {
        uint64_t v5 = a2;
      }
      else {
        uint64_t v5 = *(void *)a2;
      }
      if (v4 >= 0) {
        uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v6 = *(void *)(a2 + 8);
      }
      AMSCore::PListData::decode(v5, v6, a1);
      return;
    case 3:
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__what_arg, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)std::string __what_arg = *(_OWORD *)a2;
        *(void *)&__what_arg[16] = *(void *)(a2 + 16);
      }
      v76.std::runtime_error = *(std::runtime_error *)__what_arg;
      *(void *)&v76.__ec_.__val_ = *(void *)&__what_arg[16];
      memset(__what_arg, 0, 24);
      LODWORD(v76.__ec_.__cat_) = 6;
      *(unsigned char *)a1 = 0;
      *(_DWORD *)(a1 + 24) = -1;
      __n128 v52 = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8fe180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE19__generic_constructB8fe180100INS0_18__move_constructorIS11_LNS0_6_TraitE1EEEEEvRS12_OT_EUlRS18_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1G_EEEDcS18_DpT0_((uint64_t)&v73, (__n128 *)a1, (__n128 *)&v76);
      *(_DWORD *)(a1 + 24) = 6;
      if (LODWORD(v76.__ec_.__cat_) == -1) {
        goto LABEL_104;
      }
      if (LODWORD(v76.__ec_.__cat_))
      {
        ((void (*)(uint64_t ***, std::system_error *, __n128))off_1EDCA54D0[LODWORD(v76.__ec_.__cat_)])(&v73, &v76, v52);
LABEL_104:
        LODWORD(v76.__ec_.__cat_) = 0;
      }
      *(unsigned char *)(a1 + 72) = 1;
      _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8fe180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8fe180100EvEUlRT_E_JRNS0_6__baseILS12_1EJS8_bdxySE_SG_SO_SX_S10_EEEEEEDcS14_DpT0_(&v73, &v76, v52);
      LODWORD(v76.__ec_.__cat_) = -1;
      if ((__what_arg[23] & 0x80000000) != 0) {
        operator delete(*(void **)__what_arg);
      }
      return;
    case 4:
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v76, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else
      {
        v76.std::runtime_error = *(std::runtime_error *)a2;
        *(void *)&v76.__ec_.__val_ = *(void *)(a2 + 16);
      }
      LODWORD(v76.__ec_.__cat_) = 6;
      *(unsigned char *)a1 = 0;
      *(_DWORD *)(a1 + 24) = -1;
      __n128 v53 = _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8fe180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEEE19__generic_constructB8fe180100INS0_18__move_constructorIS11_LNS0_6_TraitE1EEEEEvRS12_OT_EUlRS18_OT0_E_JRNS0_6__baseILS15_1EJS8_bdxySE_SG_SO_SX_S10_EEEOS1G_EEEDcS18_DpT0_((uint64_t)__what_arg, (__n128 *)a1, (__n128 *)&v76);
      *(_DWORD *)(a1 + 24) = 6;
      if (LODWORD(v76.__ec_.__cat_) == -1) {
        goto LABEL_111;
      }
      if (LODWORD(v76.__ec_.__cat_))
      {
        ((void (*)(unsigned char *, std::system_error *, __n128))off_1EDCA54D0[LODWORD(v76.__ec_.__cat_)])(__what_arg, &v76, v53);
LABEL_111:
        LODWORD(v76.__ec_.__cat_) = 0;
      }
      *(unsigned char *)(a1 + 72) = 1;
      _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8fe180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8fe180100EvEUlRT_E_JRNS0_6__baseILS12_1EJS8_bdxySE_SG_SO_SX_S10_EEEEEEDcS14_DpT0_(__what_arg, &v76, v53);
      return;
    case 5:
      unint64_t v7 = *(void *)(a2 + 8);
      if (*(char *)(a2 + 23) >= 0)
      {
        unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
      }
      else
      {
        a2 = *(void *)a2;
        unint64_t v8 = v7;
      }
      char v9 = (uint64_t *)&v74;
      uint64_t v74 = 0;
      uint64_t v75 = 0;
      long long v73 = &v74;
      uint64_t v59 = v8;
      uint64_t v60 = a2;
      AMSCore::StringUtils::split((char **)&v71, a2, v8, "&", 1, 0xFFFFFFFFFFFFFFFFLL);
      std::system_error v11 = (char *)v71;
      uint64_t v10 = v72;
      if (v71 == v72) {
        goto LABEL_98;
      }
      long long v62 = v72;
      break;
    default:
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[19],AMSCore::IData::Encoding &>((uint64_t)&v76, 4u, &v63);
      std::runtime_error::runtime_error((std::runtime_error *)a1, &v76);
      *(std::error_code *)(a1 + 16) = v76.__ec_;
      *(void *)a1 = &unk_1EDC827D8;
      uint64_t v46 = v78;
      *(void *)(a1 + 32) = v77;
      *(void *)(a1 + 40) = v46;
      uint64_t v47 = a1 + 40;
      uint64_t v48 = v79;
      *(void *)(a1 + 48) = v79;
      if (v48)
      {
        *(void *)(v46 + 16) = v47;
        uint64_t v77 = (std::runtime_error_vtbl *)&v78;
        uint64_t v78 = 0;
        uint64_t v79 = 0;
        uint64_t v46 = 0;
      }
      else
      {
        *(void *)(a1 + 32) = v47;
      }
      *(_OWORD *)(a1 + 56) = v80;
      long long v80 = 0uLL;
      *(unsigned char *)(a1 + 72) = 0;
      v76.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v77, (unsigned int *)v46);
      MEMORY[0x192FA3C30](&v76);
      return;
  }
  while (1)
  {
    AMSCore::StringUtils::split((char **)&__p, *(void *)v11, *((void *)v11 + 1), "=", 1, 1uLL);
    uint64_t v12 = __p;
    if (__p == v70)
    {
      __n128 v20 = (char *)operator new(0x58uLL);
      uint64_t v21 = (uint64_t *)v20;
      *(_WORD *)(v20 + 55) = 0;
      v20[32] = 0;
      v20[79] = 0;
      *((_DWORD *)v20 + 20) = 5;
      uint64_t v22 = (uint64_t **)v9;
      uint64_t v23 = v74;
      if (!v74)
      {
LABEL_43:
        *(void *)__n128 v20 = 0;
        *((void *)v20 + 1) = 0;
        *((void *)v20 + 2) = v22;
        *uint64_t v22 = (uint64_t *)v20;
        if (*v73)
        {
          long long v73 = (uint64_t **)*v73;
          uint64_t v21 = *v22;
        }
        std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(v74, v21);
        ++v75;
        goto LABEL_92;
      }
      while (1)
      {
        uint64_t v22 = (uint64_t **)v23;
        uint64_t v24 = (uint64_t *)*((unsigned __int8 *)v23 + 55);
        if ((char)v24 < 0) {
          uint64_t v24 = v22[5];
        }
        if (!v24) {
          break;
        }
        uint64_t v23 = *v22;
        if (!*v22) {
          goto LABEL_43;
        }
      }
      _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8fe180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8fe180100EvEUlRT_E_JRNS0_6__baseILS12_1EJS8_bdxySE_SG_SO_SX_S10_EEEEEEDcS14_DpT0_((uint64_t)&v76, (uint64_t)(v20 + 56));
      int v42 = *((char *)v21 + 55);
      *((_DWORD *)v21 + 20) = -1;
      if (v42 < 0) {
        operator delete((void *)v21[4]);
      }
      char v43 = (std::system_error_vtbl *)v21;
      goto LABEL_91;
    }
    unint64_t v13 = v70 - (unsigned char *)__p;
    uint64_t v14 = (v70 - (unsigned char *)__p) >> 4;
    if (v14 == 2) {
      break;
    }
    if (v14 != 1)
    {
      std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v76);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v76, (uint64_t)"Received invalid query parameters. encoded = ", 45);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v76, v60, v59);
      std::stringbuf::str[abi:fe180100]((uint64_t)&v76.__imp_, (std::string *)__what_arg);
      v76.__vftable = (std::system_error_vtbl *)*MEMORY[0x1E4FBA418];
      *(std::system_error_vtbl **)((char *)&v76.__vftable + (unint64_t)v76.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
      v76.__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
      if (v82 < 0) {
        operator delete(v81);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x192FA3FD0](&v83);
      v85.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
      *(void *)&v85.__val_ = 3;
      std::system_error::system_error(&v76, v85, (const std::string *)__what_arg);
      if ((__what_arg[23] & 0x80000000) != 0) {
        operator delete(*(void **)__what_arg);
      }
      v76.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
      uint64_t v77 = (std::runtime_error_vtbl *)&v78;
      uint64_t v78 = 0;
      long long v80 = 0uLL;
      uint64_t v79 = 0;
      std::runtime_error::runtime_error((std::runtime_error *)__what_arg, &v76);
      *(std::error_code *)&__what_arg[16] = v76.__ec_;
      int v54 = (unsigned int *)v78;
      *(void *)std::string __what_arg = &unk_1EDC827D8;
      uint64_t v65 = v77;
      uint64_t v66 = v78;
      int v67 = v79;
      if (v79)
      {
        *(void *)(v78 + 16) = &v66;
        int v54 = 0;
        uint64_t v77 = (std::runtime_error_vtbl *)&v78;
        uint64_t v78 = 0;
        uint64_t v79 = 0;
      }
      else
      {
        uint64_t v65 = (std::runtime_error_vtbl *)&v66;
      }
      long long v68 = v80;
      long long v80 = 0uLL;
      v76.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v77, v54);
      MEMORY[0x192FA3C30](&v76);
      uint64_t v55 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)__what_arg);
      v55[1] = *(std::runtime_error *)&__what_arg[16];
      v55->__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v56 = v66;
      v55[2].__vftable = v65;
      v55[2].__imp_.__imp_ = (const char *)v56;
      p_char imp = (std::runtime_error_vtbl *)&v55[2].__imp_;
      int v58 = v67;
      v55[3].__vftable = v67;
      if (v58)
      {
        *(void *)(v56 + 16) = p_imp;
        uint64_t v56 = 0;
        uint64_t v65 = (std::runtime_error_vtbl *)&v66;
        uint64_t v66 = 0;
        int v67 = 0;
      }
      else
      {
        v55[2].__vftable = p_imp;
      }
      *(_OWORD *)&v55[3].__imp_.__imp_ = v68;
      long long v68 = 0uLL;
      LOBYTE(v55[4].__imp_.__imp_) = 0;
      *(void *)std::string __what_arg = &unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v65, (unsigned int *)v56);
      MEMORY[0x192FA3C30](__what_arg);
      if (v12) {
        operator delete(v12);
      }
      goto LABEL_117;
    }
    if (!*((void *)v11 + 1)) {
      goto LABEL_133;
    }
    if (**(unsigned char **)v11 == 61)
    {
      AMSCore::URL::decode((std::string *)&v76, *(void *)__p, *((void *)__p + 1));
      long long v15 = (char *)operator new(0x58uLL);
      uint64_t v16 = (uint64_t *)v15;
      v15[55] = 0;
      v15[32] = 0;
      *(std::runtime_error *)(v15 + 56) = v76.std::runtime_error;
      *((void *)v15 + 9) = *(void *)&v76.__ec_.__val_;
      memset(&v76, 0, 24);
      *((_DWORD *)v15 + 20) = 5;
      char v17 = v9;
      uint64_t v18 = v74;
      if (v74)
      {
        while (1)
        {
          char v17 = v18;
          uint64_t v19 = *((unsigned __int8 *)v18 + 55);
          if ((v19 & 0x80u) != 0) {
            uint64_t v19 = v17[5];
          }
          if (!v19) {
            break;
          }
          uint64_t v18 = (uint64_t *)*v17;
          if (!*v17) {
            goto LABEL_34;
          }
        }
        _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8fe180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEbdxyNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN7AMSCore10DataBufferENS_6chrono10time_pointINSH_12system_clockENSH_8durationIxNS_5ratioILl1ELl1000000EEEEEEENS_3mapISE_NSF_3AnyENS_4lessIvEENSC_INS_4pairIKSE_SQ_EEEEEENS_6vectorISQ_NSC_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8fe180100EvEUlRT_E_JRNS0_6__baseILS12_1EJS8_bdxySE_SG_SO_SX_S10_EEEEEEDcS14_DpT0_((uint64_t)__what_arg, (uint64_t)(v15 + 56));
        int v45 = *((char *)v16 + 55);
        *((_DWORD *)v16 + 20) = -1;
        if (v45 < 0) {
          operator delete((void *)v16[4]);
        }
        uint64_t v44 = v16;
        goto LABEL_89;
      }
LABEL_34:
      *(void *)long long v15 = 0;
      *((void *)v15 + 1) = 0;
      *((void *)v15 + 2) = v17;
      *char v17 = (uint64_t)v15;
      if (*v73)
      {
        long long v73 = (uint64_t **)*v73;
        uint64_t v16 = (uint64_t *)*v17;
      }
      std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(v74, v16);
      ++v75;
      if ((*((char *)&v76.__ec_.__val_ + 7) & 0x80000000) == 0) {
        goto LABEL_92;
      }
LABEL_90:
      char v43 = v76.__vftable;
LABEL_91:
      operator delete(v43);
      goto LABEL_92;
    }
    AMSCore::URL::decode((std::string *)&v76, *(void *)__p, *((void *)__p + 1));
    uint64_t v25 = v74;
    char v26 = v9;
    uint64_t v27 = v9;
    char v28 = v9;
    if (v74)
    {
      char v29 = *((unsigned char *)&v76.__ec_.__val_ + 7);
      if (*((char *)&v76.__ec_.__val_ + 7) >= 0) {
        char v30 = &v76;
      }
      else {
        char v30 = v76.__vftable;
      }
      if (*((char *)&v76.__ec_.__val_ + 7) >= 0) {
        char imp = (const char *)*((unsigned __int8 *)&v76.__ec_.__val_ + 7);
      }
      else {
        char imp = v76.__imp_.__imp_;
      }
      while (1)
      {
        char v28 = v25;
        uint64_t v34 = v25[4];
        uint64_t v32 = v25 + 4;
        uint64_t v33 = (uint64_t *)v34;
        int v35 = *((char *)v32 + 23);
        if (v35 >= 0) {
          uint64_t v36 = v32;
        }
        else {
          uint64_t v36 = v33;
        }
        if (v35 >= 0) {
          size_t v37 = *((unsigned __int8 *)v32 + 23);
        }
        else {
          size_t v37 = v32[1];
        }
        if (v37 >= (unint64_t)imp) {
          size_t v38 = (size_t)imp;
        }
        else {
          size_t v38 = v37;
        }
        int v39 = memcmp(v30, v36, v38);
        if (v39)
        {
          if (v39 < 0) {
            goto LABEL_57;
          }
LABEL_71:
          int v40 = memcmp(v36, v30, v38);
          if (v40)
          {
            if ((v40 & 0x80000000) == 0) {
              goto LABEL_94;
            }
          }
          else if (v37 >= (unint64_t)imp)
          {
LABEL_94:
            char v9 = v27;
            uint64_t v10 = v62;
            if (v29 < 0) {
              goto LABEL_80;
            }
            goto LABEL_92;
          }
          uint64_t v25 = (uint64_t *)v28[1];
          if (!v25)
          {
            char v26 = v28 + 1;
            break;
          }
        }
        else
        {
          if ((unint64_t)imp >= v37) {
            goto LABEL_71;
          }
LABEL_57:
          uint64_t v25 = (uint64_t *)*v28;
          char v26 = v28;
          if (!*v28) {
            break;
          }
        }
      }
    }
    uint64_t v41 = operator new(0x58uLL);
    char v9 = v27;
    uint64_t v10 = v62;
    std::runtime_error v41[2] = v76.std::runtime_error;
    *((void *)v41 + 6) = *(void *)&v76.__ec_.__val_;
    memset(&v76, 0, 24);
    *((unsigned char *)v41 + 56) = 0;
    *((unsigned char *)v41 + 79) = 0;
    *((_DWORD *)v41 + 20) = 5;
    *(void *)uint64_t v41 = 0;
    *((void *)v41 + 1) = 0;
    *((void *)v41 + 2) = v28;
    *char v26 = (uint64_t)v41;
    if (*v73)
    {
      long long v73 = (uint64_t **)*v73;
      uint64_t v41 = (_OWORD *)*v26;
    }
    std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(v74, (uint64_t *)v41);
    ++v75;
    if ((*((unsigned char *)&v76.__ec_.__val_ + 7) & 0x80) != 0) {
LABEL_80:
    }
      operator delete(v76.__vftable);
LABEL_92:
    if (__p) {
      operator delete(__p);
    }
    v11 += 16;
    if (v11 == v10)
    {
LABEL_98:
      *(void *)a1 = v73;
      unint64_t v49 = v74;
      uint64_t v50 = v75;
      *(void *)(a1 + 8) = v74;
      uint64_t v51 = a1 + 8;
      *(void *)(a1 + 16) = v50;
      if (v50)
      {
        v49[2] = v51;
        long long v73 = (uint64_t **)v9;
        *char v9 = 0;
        v9[1] = 0;
      }
      else
      {
        *(void *)a1 = v51;
      }
      *(_DWORD *)(a1 + 24) = 8;
      *(unsigned char *)(a1 + 72) = 1;
LABEL_117:
      if (v71) {
        operator delete(v71);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v73, (unsigned int *)v74);
      return;
    }
  }
  AMSCore::URL::decode((std::string *)&v76, *(void *)__p, *((void *)__p + 1));
  if (v13 > 0x10)
  {
    AMSCore::URL::decode((std::string *)__what_arg, *((void *)v12 + 2), *((void *)v12 + 3));
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_unique_key_args<std::string,std::string,std::string>((uint64_t **)&v73, (const void **)&v76.__vftable, (uint64_t)&v76, (uint64_t)__what_arg);
    if ((__what_arg[23] & 0x80000000) != 0)
    {
      uint64_t v44 = *(uint64_t **)__what_arg;
LABEL_89:
      operator delete(v44);
      if ((*((char *)&v76.__ec_.__val_ + 7) & 0x80000000) == 0) {
        goto LABEL_92;
      }
    }
    else if ((*((char *)&v76.__ec_.__val_ + 7) & 0x80000000) == 0)
    {
      goto LABEL_92;
    }
    goto LABEL_90;
  }
LABEL_133:
  __break(1u);
}

void sub_18DA95690(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    __clang_call_terminate(a1);
  }
  __clang_call_terminate(a1);
}

void AMSCore::HTTPCacheDataAccessObject::deleteItemsForAccount(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  char v10 = 18;
  strcpy(__p, ":accountIdentifier");
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v11 = *(std::string *)a2;
  }
  int v12 = 5;
  v6[0] = 0;
  v6[1] = 0;
  uint64_t v5 = v6;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v5, (uint64_t *)v6, (const void **)__p, (long long *)__p);
  uint64_t v8 = 0;
  AMSCore::SQLiteStatement::exec(a3, (sqlite3 **)(a1 + 360), &v5, (uint64_t)v7);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v5, v6[0]);
  if (v12 != -1) {
    ((void (*)(unsigned char *, std::string *))off_1EDCA5610[v12])(v7, &v11);
  }
  int v12 = -1;
  if (v10 < 0) {
    operator delete(*(void **)__p);
  }
}

void sub_18DA95834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::HTTPCacheDataAccessObject::setHTTPCacheItem(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, AMSCore::URL *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v72[2] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 440);
  if (!v7) {
    std::__throw_bad_function_call[abi:fe180100]();
  }
  uint64_t v30 = a1;
  (*(void (**)(std::string *__return_ptr))(*(void *)v7 + 48))(&v34);
  memset(&v35, 0, sizeof(v35));
  char v31 = a4;
  for (unint64_t i = (uint64_t *)*((void *)a4 + 22); i; unint64_t i = (uint64_t *)*i)
  {
    v38[23] = 4;
    strcpy(v38, "name");
    if (*((char *)i + 39) < 0)
    {
      std::string::__init_copy_ctor_external(&v39, (const std::string::value_type *)i[2], i[3]);
    }
    else
    {
      long long v10 = *((_OWORD *)i + 1);
      v39.__r_.__value_.__r.__words[2] = i[4];
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v10;
    }
    int v40 = 5;
    HIBYTE(v42) = 5;
    strcpy((char *)&__p, "value");
    if (*((char *)i + 63) < 0)
    {
      std::string::__init_copy_ctor_external(&v43, (const std::string::value_type *)i[5], i[6]);
    }
    else
    {
      long long v11 = *(_OWORD *)(i + 5);
      v43.__r_.__value_.__r.__words[2] = i[7];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v11;
    }
    int v44 = 5;
    *(_OWORD *)&v36.__r_.__value_.__r.__words[1] = 0uLL;
    v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36.__r_.__value_.__l.__size_;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v36, (uint64_t *)&v36.__r_.__value_.__l.__size_, (const void **)v38, (long long *)v38);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v36, (uint64_t *)&v36.__r_.__value_.__l.__size_, (const void **)&__p, &__p);
    std::string::size_type size = v35.__r_.__value_.__l.__size_;
    if (v35.__r_.__value_.__l.__size_ >= v35.__r_.__value_.__r.__words[2])
    {
      uint64_t v16 = std::vector<AMSCore::Any>::__emplace_back_slow_path<std::map<std::string,AMSCore::Any>>(&v35.__r_.__value_.__l.__data_, &v36);
    }
    else
    {
      *(void *)v35.__r_.__value_.__l.__size_ = v36.__r_.__value_.__r.__words[0];
      std::string::size_type v13 = v36.__r_.__value_.__l.__size_;
      *(void *)(size + 8) = v36.__r_.__value_.__l.__size_;
      std::string::size_type v14 = size + 8;
      std::string::size_type v15 = v36.__r_.__value_.__r.__words[2];
      *(void *)(size + 16) = *((void *)&v36.__r_.__value_.__l + 2);
      if (v15)
      {
        *(void *)(v13 + 16) = v14;
        v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36.__r_.__value_.__l.__size_;
        *(_OWORD *)&v36.__r_.__value_.__r.__words[1] = 0uLL;
      }
      else
      {
        *(void *)std::string::size_type size = v14;
      }
      *(_DWORD *)(size + 24) = 8;
      uint64_t v16 = (char *)(size + 32);
    }
    v35.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v36, (unsigned int *)v36.__r_.__value_.__l.__size_);
    if (v44 != -1) {
      ((void (*)(unsigned int ***, std::string *))off_1EDCA5610[v44])(&v32, &v43);
    }
    int v44 = -1;
    if (SHIBYTE(v42) < 0) {
      operator delete((void *)__p);
    }
    if (v40 != -1) {
      ((void (*)(unsigned int ***, std::string *))off_1EDCA5610[v40])(&v32, &v39);
    }
    int v40 = -1;
    if ((v38[23] & 0x80000000) != 0) {
      operator delete(*(void **)v38);
    }
  }
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v38);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v38[8], &v36);
  v72[0] = v36.__r_.__value_.__l.__size_;
  std::string::size_type v17 = v36.__r_.__value_.__r.__words[0];
  *(void *)((char *)v72 + 7) = *(std::string::size_type *)((char *)&v36.__r_.__value_.__r.__words[1] + 7);
  char v18 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  *(void *)size_t v38 = *MEMORY[0x1E4FBA418];
  *(void *)&v38[*(void *)(*(void *)v38 - 24)] = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *(void *)&v38[8] = MEMORY[0x1E4FBA470] + 16;
  if (v43.__r_.__value_.__s.__data_[15] < 0) {
    operator delete(v42);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FA3FD0](v45);
  std::string::size_type v19 = v35.__r_.__value_.__r.__words[0];
  if (v35.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v20 = v35.__r_.__value_.__l.__size_;
    uint64_t v21 = (void *)v35.__r_.__value_.__r.__words[0];
    if (v35.__r_.__value_.__l.__size_ != v35.__r_.__value_.__r.__words[0])
    {
      do
      {
        std::string::size_type v22 = v20 - 32;
        uint64_t v23 = *(unsigned int *)(v20 - 8);
        if (v23 != -1) {
          ((void (*)(unsigned char *, std::string::size_type))off_1EDCA5610[v23])(v38, v20 - 32);
        }
        *(_DWORD *)(v20 - 8) = -1;
        v20 -= 32;
      }
      while (v22 != v19);
      uint64_t v21 = (void *)v35.__r_.__value_.__r.__words[0];
    }
    v35.__r_.__value_.__l.__size_ = v19;
    operator delete(v21);
  }
  AMSCore::URL::getStringRepresentation(v31, &v35);
  v38[23] = 18;
  strcpy(v38, ":accountIdentifier");
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v39 = *(std::string *)a2;
  }
  HIBYTE(v42) = 4;
  int v40 = 5;
  strcpy((char *)&__p, ":key");
  std::string v43 = v34;
  memset(&v34, 0, sizeof(v34));
  char v46 = 4;
  int v44 = 5;
  strcpy((char *)v45, ":url");
  std::string v47 = v35;
  memset(&v35, 0, sizeof(v35));
  int v48 = 5;
  char v24 = 7;
  uint64_t v25 = 0x5443454E4E4F43;
  switch(*(_DWORD *)(a3 + 152))
  {
    case 1:
      char v24 = 6;
      uint64_t v25 = 0x4554454C4544;
      break;
    case 2:
      char v24 = 3;
      uint64_t v25 = 5522759;
      break;
    case 3:
      char v24 = 4;
      uint64_t v25 = 1145128264;
      break;
    case 4:
      uint64_t v25 = 0x534E4F4954504FLL;
      break;
    case 5:
      char v24 = 5;
      uint64_t v25 = 0x4843544150;
      break;
    case 6:
      char v24 = 4;
      uint64_t v25 = 1414745936;
      break;
    case 7:
      char v24 = 3;
      uint64_t v25 = 5526864;
      break;
    case 8:
      char v24 = 5;
      uint64_t v25 = 0x4543415254;
      break;
    default:
      break;
  }
  char v50 = 7;
  strcpy((char *)v49, ":method");
  uint64_t v51 = v25;
  char v52 = v24;
  int v53 = 5;
  char v55 = 12;
  strcpy((char *)&v54, ":requestBody");
  if (*(char *)(a3 + 223) < 0) {
    std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)(a3 + 200), *(void *)(a3 + 208));
  }
  else {
    std::string v56 = *(std::string *)(a3 + 200);
  }
  int v57 = 6;
  char v59 = 8;
  strcpy((char *)&v58, ":headers");
  *(void *)&v61[7] = *(void *)((char *)v72 + 7);
  std::string::size_type v60 = v17;
  *(void *)long long v61 = v72[0];
  char v62 = v18;
  v72[0] = 0;
  *(void *)((char *)v72 + 7) = 0;
  int v63 = 6;
  char v65 = 13;
  strcpy((char *)&v64, ":responseBody");
  if (*((char *)v31 + 223) < 0) {
    std::string::__init_copy_ctor_external(&v66, *((const std::string::value_type **)v31 + 25), *((void *)v31 + 26));
  }
  else {
    std::string v66 = *(std::string *)((char *)v31 + 200);
  }
  int v67 = 6;
  char v69 = 10;
  strcpy((char *)&v68, ":createdAt");
  v70[0] = a5 / 1000;
  int v71 = 3;
  v33[0] = 0;
  v33[1] = 0;
  uint64_t v32 = v33;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v32, (uint64_t *)v33, (const void **)v38, (long long *)v38);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v32, (uint64_t *)v33, (const void **)&__p, &__p);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v32, (uint64_t *)v33, (const void **)v45, (long long *)v45);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v32, (uint64_t *)v33, (const void **)v49, (long long *)v49);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v32, (uint64_t *)v33, (const void **)&v54, &v54);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v32, (uint64_t *)v33, (const void **)&v58, &v58);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v32, (uint64_t *)v33, (const void **)&v64, &v64);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v32, (uint64_t *)v33, (const void **)&v68, &v68);
  size_t v37 = 0;
  AMSCore::SQLiteStatement::exec(a6, (sqlite3 **)(v30 + 304), &v32, (uint64_t)&v36);
  if (v37 == &v36)
  {
    (*(void (**)(std::string *))(v36.__r_.__value_.__r.__words[0] + 32))(&v36);
  }
  else if (v37)
  {
    (*(void (**)(void))(v37->__r_.__value_.__r.__words[0] + 40))();
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v32, v33[0]);
  if (v71 != -1) {
    ((void (*)(std::string *, uint64_t *))off_1EDCA5610[v71])(&v36, v70);
  }
  int v71 = -1;
  if (v69 < 0) {
    operator delete((void *)v68);
  }
  if (v67 != -1) {
    ((void (*)(std::string *, std::string *))off_1EDCA5610[v67])(&v36, &v66);
  }
  int v67 = -1;
  if (v65 < 0) {
    operator delete((void *)v64);
  }
  if (v63 != -1) {
    ((void (*)(std::string *, std::string::size_type *))off_1EDCA5610[v63])(&v36, &v60);
  }
  int v63 = -1;
  if (v59 < 0) {
    operator delete((void *)v58);
  }
  if (v57 != -1) {
    ((void (*)(std::string *, std::string *))off_1EDCA5610[v57])(&v36, &v56);
  }
  int v57 = -1;
  if (v55 < 0) {
    operator delete((void *)v54);
  }
  if (v53 != -1) {
    ((void (*)(std::string *, uint64_t *))off_1EDCA5610[v53])(&v36, &v51);
  }
  int v53 = -1;
  if (v50 < 0) {
    operator delete(v49[0]);
  }
  if (v48 != -1) {
    ((void (*)(std::string *, std::string *))off_1EDCA5610[v48])(&v36, &v47);
  }
  int v48 = -1;
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  if (v44 != -1) {
    ((void (*)(std::string *, std::string *))off_1EDCA5610[v44])(&v36, &v43);
  }
  int v44 = -1;
  if (SHIBYTE(v42) < 0) {
    operator delete((void *)__p);
  }
  if (v40 != -1) {
    ((void (*)(std::string *, std::string *))off_1EDCA5610[v40])(&v36, &v39);
  }
  int v40 = -1;
  if ((v38[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v38);
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_89:
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_93:
      operator delete(v34.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_89;
  }
  operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_93;
  }
}

void sub_18DA96340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

char *std::vector<AMSCore::Any>::__emplace_back_slow_path<std::map<std::string,AMSCore::Any>>(char **a1, void *a2)
{
  uint64_t v3 = *a1;
  int v4 = a1[1];
  uint64_t v5 = (v4 - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    std::vector<std::string>::__throw_length_error[abi:fe180100]();
  }
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v6) {
    unint64_t v6 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9)
  {
    if (v9 >> 59) {
      std::__throw_bad_array_new_length[abi:fe180100]();
    }
    long long v10 = (char *)operator new(32 * v9);
  }
  else
  {
    long long v10 = 0;
  }
  long long v11 = &v10[32 * v5];
  int v12 = a2 + 1;
  uint64_t v13 = a2[1];
  *(void *)long long v11 = *a2;
  *((void *)v11 + 1) = v13;
  std::string::size_type v14 = v11 + 8;
  uint64_t v15 = a2[2];
  *((void *)v11 + 2) = v15;
  if (v15)
  {
    *(void *)(v13 + 16) = v14;
    *a2 = v12;
    *int v12 = 0;
    a2[2] = 0;
    uint64_t v3 = *a1;
    int v4 = a1[1];
  }
  else
  {
    *(void *)long long v11 = v14;
  }
  *((_DWORD *)v11 + 6) = 8;
  uint64_t v16 = v11 + 32;
  if (v4 == v3)
  {
    *a1 = v11;
    a1[1] = v16;
    a1[2] = &v10[32 * v9];
    goto LABEL_28;
  }
  uint64_t v25 = &v10[32 * v9];
  char v26 = a1;
  uint64_t v17 = 0;
  do
  {
    v11[v17 - 32] = 0;
    char v18 = &v4[v17];
    *(_DWORD *)&v11[v17 - 8] = -1;
    uint64_t v19 = *(unsigned int *)&v4[v17 - 8];
    if (v19 == -1) {
      goto LABEL_16;
    }
    ((void (*)(char *, char *, char *))off_1EDCA5520[v19])(&v28, &v11[v17 - 32], v18 - 32);
    *(_DWORD *)&v11[v17 - 8] = v19;
    uint64_t v20 = *((unsigned int *)v18 - 2);
    if (v20 == -1) {
      goto LABEL_16;
    }
    if (v20)
    {
      ((void (*)(char *, char *))off_1EDCA54D0[v20])(&v29, v18 - 32);
LABEL_16:
      *((_DWORD *)v18 - 2) = 0;
    }
    v17 -= 32;
  }
  while (&v4[v17] != v3);
  uint64_t v16 = v11 + 32;
  uint64_t v3 = *v26;
  uint64_t v21 = v26[1];
  *char v26 = &v11[v17];
  v26[1] = v11 + 32;
  v26[2] = v25;
  if (v21 != v3)
  {
    do
    {
      std::string::size_type v22 = v21 - 32;
      uint64_t v23 = *((unsigned int *)v21 - 2);
      if (v23 != -1) {
        ((void (*)(char *, char *))off_1EDCA5610[v23])(&v27, v21 - 32);
      }
      *((_DWORD *)v21 - 2) = -1;
      v21 -= 32;
    }
    while (v22 != v3);
  }
LABEL_28:
  if (v3) {
    operator delete(v3);
  }
  return v16;
}

void AMSCore::HTTPCacheDataAccessObject::getCachedReponse(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  AMSCore::StringUtils::join<>((std::string *)__what_arg);
  v65.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  *(void *)&v65.__val_ = 7;
  std::system_error::system_error(&v37, v65, (const std::string *)__what_arg);
  if ((__what_arg[23] & 0x80000000) != 0) {
    operator delete(*(void **)__what_arg);
  }
  std::string v39 = 0;
  uint64_t v40 = 0;
  v37.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  size_t v38 = &v39;
  long long v41 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)__what_arg, &v37);
  *(std::error_code *)&__what_arg[16] = v37.__ec_;
  uint64_t v7 = v39;
  *(void *)std::string __what_arg = &unk_1EDC827D8;
  *(void *)&unsigned char __what_arg[32] = v38;
  std::string v56 = v39;
  uint64_t v57 = v40;
  if (v40)
  {
    *((void *)v39 + 2) = &v56;
    uint64_t v7 = 0;
    size_t v38 = &v39;
    std::string v39 = 0;
    uint64_t v40 = 0;
  }
  else
  {
    *(void *)&unsigned char __what_arg[32] = &v56;
  }
  long long v58 = v41;
  long long v41 = 0uLL;
  v37.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v38, v7);
  MEMORY[0x192FA3C30](&v37);
  std::runtime_error::runtime_error(&v37, (const std::runtime_error *)__what_arg);
  v37.__ec_ = *(std::error_code *)&__what_arg[16];
  uint64_t v8 = v56;
  v37.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  size_t v38 = *(unsigned int ***)&__what_arg[32];
  std::string v39 = v56;
  uint64_t v40 = v57;
  if (v57)
  {
    *((void *)v56 + 2) = &v39;
    uint64_t v8 = 0;
    *(void *)&unsigned char __what_arg[32] = &v56;
    std::string v56 = 0;
    uint64_t v57 = 0;
  }
  else
  {
    size_t v38 = &v39;
  }
  uint64_t v9 = a4;
  long long v41 = v58;
  long long v58 = 0uLL;
  char v48 = 0;
  *(void *)std::string __what_arg = &unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&__what_arg[32], v8);
  MEMORY[0x192FA3C30](__what_arg);
  uint64_t v10 = *(void *)(a1 + 440);
  if (!v10) {
    std::__throw_bad_function_call[abi:fe180100]();
  }
  (*(void (**)(void **__return_ptr))(*(void *)v10 + 48))(__p);
  __what_arg[23] = 18;
  strcpy(__what_arg, ":accountIdentifier");
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__what_arg[24], *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&__what_arg[24] = *(_OWORD *)a2;
    std::string v56 = *(unsigned int **)(a2 + 16);
  }
  char v60 = 4;
  LODWORD(v57) = 5;
  strcpy((char *)&v58, ":key");
  long long v61 = *(_OWORD *)__p;
  uint64_t v62 = v36;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v36 = 0;
  int v63 = 5;
  v27[0] = 0;
  v27[1] = 0;
  char v26 = v27;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v26, (uint64_t *)v27, (const void **)__what_arg, (long long *)__what_arg);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,AMSCore::Any> const&>((uint64_t **)&v26, (uint64_t *)v27, (const void **)&v58, &v58);
  v49.__vftable = (std::runtime_error_vtbl *)&unk_1EDCA5670;
  v49.__imp_.__imp_ = (const char *)&v37;
  *((void *)&v50 + 1) = &v49;
  AMSCore::SQLiteStatement::exec((uint64_t)&v28, (sqlite3 **)(a1 + 248), &v26, (uint64_t)&v49);
  if (*((std::runtime_error **)&v50 + 1) == &v49)
  {
    ((void (*)(std::runtime_error *))v49.__vftable[1].~runtime_error_0)(&v49);
  }
  else if (*((void *)&v50 + 1))
  {
    (*(void (**)(void))(**((void **)&v50 + 1) + 40))();
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v26, v27[0]);
  if (v63 != -1) {
    ((void (*)(std::runtime_error *, long long *))off_1EDCA5610[v63])(&v49, &v61);
  }
  int v63 = -1;
  if (v60 < 0) {
    operator delete((void *)v58);
  }
  if (v57 != -1) {
    ((void (*)(std::runtime_error *, unsigned char *))off_1EDCA5610[v57])(&v49, &__what_arg[24]);
  }
  LODWORD(v57) = -1;
  if ((__what_arg[23] & 0x80000000) == 0)
  {
    if (v34) {
      goto LABEL_25;
    }
LABEL_43:
    std::runtime_error::runtime_error((std::runtime_error *)__what_arg, &v28);
    *(_OWORD *)&__what_arg[16] = v29;
    *(void *)std::string __what_arg = &unk_1EDC827D8;
    *(void *)&unsigned char __what_arg[32] = v30;
    std::string v56 = (unsigned int *)v31;
    uint64_t v57 = v32;
    if (v32)
    {
      *(void *)(v31 + 16) = &v56;
      uint64_t v30 = &v31;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
    }
    else
    {
      *(void *)&unsigned char __what_arg[32] = &v56;
    }
    long long v58 = v33;
    long long v33 = 0uLL;
    goto LABEL_62;
  }
  operator delete(*(void **)__what_arg);
  if (!v34) {
    goto LABEL_43;
  }
LABEL_25:
  char v11 = v48;
  if (!v48)
  {
    std::runtime_error::runtime_error((std::runtime_error *)__what_arg, &v37);
    *(std::error_code *)&__what_arg[16] = v37.__ec_;
    *(void *)std::string __what_arg = &unk_1EDC827D8;
    *(void *)&unsigned char __what_arg[32] = v38;
    std::string v56 = v39;
    uint64_t v57 = v40;
    if (v40)
    {
      *((void *)v39 + 2) = &v56;
      size_t v38 = &v39;
      std::string v39 = 0;
      uint64_t v40 = 0;
    }
    else
    {
      *(void *)&unsigned char __what_arg[32] = &v56;
    }
    long long v58 = v41;
    long long v41 = 0uLL;
LABEL_62:
    char v59 = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v49, (uint64_t)__what_arg);
    std::runtime_error::runtime_error((std::runtime_error *)v9, &v49);
    *(_OWORD *)(v9 + 16) = v50;
    *(void *)uint64_t v9 = &unk_1EDC827D8;
    uint64_t v21 = v52;
    *(void *)(v9 + 32) = v51;
    *(void *)(v9 + 40) = v21;
    uint64_t v22 = v9 + 40;
    uint64_t v23 = v53;
    *(void *)(v9 + 48) = v53;
    if (v23)
    {
      *((void *)v21 + 2) = v22;
      uint64_t v51 = &v52;
      char v52 = 0;
      uint64_t v53 = 0;
      uint64_t v21 = 0;
    }
    else
    {
      *(void *)(v9 + 32) = v22;
    }
    *(_OWORD *)(v9 + 56) = v54;
    long long v54 = 0uLL;
    *(unsigned char *)(v9 + 696) = 0;
    v49.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v51, v21);
    MEMORY[0x192FA3C30](&v49);
    if (!v59) {
      goto LABEL_73;
    }
    *(void *)std::string __what_arg = &unk_1EDC827D8;
    char v24 = (std::__shared_weak_count *)*((void *)&v58 + 1);
    if (*((void *)&v58 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v58 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&__what_arg[32], v56);
    MEMORY[0x192FA3C30](__what_arg);
    if (!v34) {
      goto LABEL_70;
    }
    goto LABEL_74;
  }
  *(void *)std::string __what_arg = a3 + 128;
  *(void *)&__what_arg[8] = a3 + 32;
  *(void *)&__what_arg[16] = a3 + 64;
  *(void *)&__what_arg[24] = a3 + 96;
  *(void *)&unsigned char __what_arg[32] = a3 + 104;
  v49.__vftable = (std::runtime_error_vtbl *)v44;
  v49.__imp_.__imp_ = (const char *)&v38;
  *(void *)&long long v50 = (char *)&v41 + 8;
  *((void *)&v50 + 1) = &v42;
  uint64_t v51 = (unsigned int **)&v43;
  if (!std::__tuple_equal<5ul>::operator()[abi:fe180100]<std::tuple<std::string const&,std::optional<std::string> const&,std::optional<std::string> const&,std::optional<unsigned short> const&,AMSCore::OrderedMap<std::string,std::string> const&>,std::tuple<std::string const&,std::optional<std::string> const&,std::optional<std::string> const&,std::optional<unsigned short> const&,AMSCore::OrderedMap<std::string,std::string> const&>>((const void ***)__what_arg, (unsigned __int8 ***)&v49))
  {
    AMSCore::StringUtils::join<char [33]>((std::string *)&v49, "URL mismatch in cached response.");
    v67.__cat_ = (const std::error_category *)&AMSCore::Error::Category::data(void)::instance;
    *(void *)&v67.__val_ = 901;
    std::system_error::system_error((std::system_error *)__what_arg, v67, (const std::string *)&v49);
    goto LABEL_51;
  }
  if (*(_DWORD *)(a3 + 152) != v45)
  {
    AMSCore::StringUtils::join<char [41]>((std::string *)&v49, "HTTP method mismatch in cached response.");
    v68.__cat_ = (const std::error_category *)&AMSCore::Error::Category::data(void)::instance;
    *(void *)&v68.__val_ = 901;
    std::system_error::system_error((std::system_error *)__what_arg, v68, (const std::string *)&v49);
    goto LABEL_51;
  }
  int v12 = *(char *)(a3 + 223);
  if (v12 >= 0) {
    size_t v13 = *(unsigned __int8 *)(a3 + 223);
  }
  else {
    size_t v13 = *(void *)(a3 + 208);
  }
  uint64_t v14 = HIBYTE(v47);
  if (v47 < 0) {
    uint64_t v14 = *((void *)&v46 + 1);
  }
  if (v13 != v14
    || (v47 >= 0 ? (uint64_t v15 = &v46) : (uint64_t v15 = (long long *)v46),
        v12 >= 0 ? (uint64_t v16 = (const void *)(a3 + 200)) : (uint64_t v16 = *(const void **)(a3 + 200)),
        memcmp(v16, v15, v13)))
  {
    AMSCore::StringUtils::join<char [42]>((std::string *)&v49, "Request body mismatch in cached response.");
    v66.__cat_ = (const std::error_category *)&AMSCore::Error::Category::data(void)::instance;
    *(void *)&v66.__val_ = 901;
    std::system_error::system_error((std::system_error *)__what_arg, v66, (const std::string *)&v49);
LABEL_51:
    if (SBYTE7(v50) < 0) {
      operator delete(v49.__vftable);
    }
    std::string v56 = 0;
    uint64_t v57 = 0;
    *(void *)std::string __what_arg = &unk_1EDC827D8;
    *(void *)&unsigned char __what_arg[32] = &v56;
    long long v58 = 0uLL;
    std::runtime_error::runtime_error(&v49, (const std::runtime_error *)__what_arg);
    long long v50 = *(_OWORD *)&__what_arg[16];
    uint64_t v17 = v56;
    v49.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v51 = *(unsigned int ***)&__what_arg[32];
    char v52 = v56;
    uint64_t v53 = v57;
    if (v57)
    {
      *((void *)v56 + 2) = &v52;
      uint64_t v17 = 0;
      *(void *)&unsigned char __what_arg[32] = &v56;
      std::string v56 = 0;
      uint64_t v57 = 0;
    }
    else
    {
      uint64_t v51 = &v52;
    }
    long long v54 = v58;
    long long v58 = 0uLL;
    *(void *)std::string __what_arg = &unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&__what_arg[32], v17);
    MEMORY[0x192FA3C30](__what_arg);
    std::runtime_error::runtime_error((std::runtime_error *)v9, &v49);
    *(_OWORD *)(v9 + 16) = v50;
    *(void *)uint64_t v9 = &unk_1EDC827D8;
    char v18 = v52;
    *(void *)(v9 + 32) = v51;
    *(void *)(v9 + 40) = v18;
    uint64_t v19 = v9 + 40;
    uint64_t v20 = v53;
    *(void *)(v9 + 48) = v53;
    if (v20)
    {
      *((void *)v18 + 2) = v19;
      char v18 = 0;
      uint64_t v51 = &v52;
      char v52 = 0;
      uint64_t v53 = 0;
    }
    else
    {
      *(void *)(v9 + 32) = v19;
    }
    *(_OWORD *)(v9 + 56) = v54;
    long long v54 = 0uLL;
    *(unsigned char *)(v9 + 696) = 0;
    v49.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v51, v18);
    MEMORY[0x192FA3C30](&v49);
LABEL_73:
    if (v34) {
      goto LABEL_74;
    }
LABEL_70:
    ((void (*)(std::runtime_error *))v28.~runtime_error)(&v28);
    if ((SHIBYTE(v36) & 0x80000000) == 0) {
      goto LABEL_75;
    }
    goto LABEL_71;
  }
  AMSCore::HTTPResponse::HTTPResponse(v9, (long long *)&v37);
  *(void *)(v9 + 656) = v44[66];
  *(_DWORD *)(v9 + 664) = v45;
  *(_OWORD *)(v9 + 672) = v46;
  *(void *)(v9 + 688) = v47;
  long long v46 = 0uLL;
  uint64_t v47 = 0;
  *(unsigned char *)(v9 + 696) = v11;
  if (!v34) {
    goto LABEL_70;
  }
LABEL_74:
  if ((SHIBYTE(v36) & 0x80000000) == 0)
  {
LABEL_75:
    if (v48) {
      goto LABEL_76;
    }
LABEL_72:
    ((void (*)(std::system_error *))v37.~system_error)(&v37);
    return;
  }
LABEL_71:
  operator delete(__p[0]);
  if (!v48) {
    goto LABEL_72;
  }
LABEL_76:
  if (SHIBYTE(v47) < 0) {
    operator delete((void *)v46);
  }
  AMSCore::HTTPResponse::~HTTPResponse((AMSCore::HTTPResponse *)&v37);
}

void sub_18DA97064(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    if (SLOBYTE(STACK[0x36F]) < 0)
    {
      operator delete((void *)STACK[0x358]);
      __clang_call_terminate(a1);
    }
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

BOOL std::__tuple_equal<5ul>::operator()[abi:fe180100]<std::tuple<std::string const&,std::optional<std::string> const&,std::optional<std::string> const&,std::optional<unsigned short> const&,AMSCore::OrderedMap<std::string,std::string> const&>,std::tuple<std::string const&,std::optional<std::string> const&,std::optional<std::string> const&,std::optional<unsigned short> const&,AMSCore::OrderedMap<std::string,std::string> const&>>(const void ***a1, unsigned __int8 ***a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t v4 = *((unsigned __int8 *)*a1 + 23);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = (unsigned __int8 *)*((unsigned __int8 *)*a1 + 23);
  }
  else {
    uint64_t v5 = (unsigned __int8 *)(*a1)[1];
  }
  unint64_t v6 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  int v7 = (char)v6;
  if ((char)v6 < 0) {
    unint64_t v6 = v3[1];
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 >= 0) {
    uint64_t v10 = *a2;
  }
  else {
    uint64_t v10 = (unsigned __int8 **)*v3;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v2, v10, (size_t)(*a1)[1])) {
      return 0;
    }
  }
  else if (*((unsigned char *)*a1 + 23))
  {
    while (*(unsigned __int8 *)v2 == *(unsigned __int8 *)v10)
    {
      uint64_t v2 = (const void **)((char *)v2 + 1);
      uint64_t v10 = (unsigned __int8 **)((char *)v10 + 1);
      if (!--v4) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  char v11 = a1[1];
  int v12 = a2[1];
  if (*((unsigned char *)v11 + 24)) {
    BOOL v13 = *((unsigned char *)v12 + 24) == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    BOOL v14 = (*((unsigned char *)v11 + 24) != 0) == (*((unsigned char *)v12 + 24) != 0);
  }
  else
  {
    uint64_t v23 = *((unsigned __int8 *)v11 + 23);
    if ((v23 & 0x80u) == 0) {
      char v24 = (unsigned __int8 *)*((unsigned __int8 *)v11 + 23);
    }
    else {
      char v24 = (unsigned __int8 *)v11[1];
    }
    uint64_t v25 = (unsigned __int8 *)*((unsigned __int8 *)v12 + 23);
    int v26 = (char)v25;
    if ((char)v25 < 0) {
      uint64_t v25 = v12[1];
    }
    if (v24 != v25) {
      return 0;
    }
    if (v26 >= 0) {
      char v27 = a2[1];
    }
    else {
      char v27 = (unsigned __int8 **)*v12;
    }
    if ((v23 & 0x80) != 0)
    {
      if (memcmp(*v11, v27, (size_t)v11[1])) {
        return 0;
      }
      goto LABEL_23;
    }
    if (!*((unsigned char *)v11 + 23)) {
      goto LABEL_23;
    }
    uint64_t v28 = v23 - 1;
    do
    {
      int v30 = *(unsigned __int8 *)v11;
      char v11 = (const void **)((char *)v11 + 1);
      int v29 = v30;
      int v32 = *(unsigned __int8 *)v27;
      char v27 = (unsigned __int8 **)((char *)v27 + 1);
      int v31 = v32;
      BOOL v33 = v28-- != 0;
      char v34 = v33;
      BOOL v13 = v29 == v31;
      BOOL v14 = v29 == v31;
    }
    while (v13 && (v34 & 1) != 0);
  }
  if (!v14) {
    return 0;
  }
LABEL_23:
  uint64_t v15 = a1[2];
  uint64_t v16 = a2[2];
  if (*((unsigned char *)v15 + 24)) {
    BOOL v17 = *((unsigned char *)v16 + 24) == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17)
  {
    BOOL v18 = (*((unsigned char *)v15 + 24) != 0) == (*((unsigned char *)v16 + 24) != 0);
    goto LABEL_29;
  }
  uint64_t v35 = *((unsigned __int8 *)v15 + 23);
  if ((v35 & 0x80u) == 0) {
    uint64_t v36 = (unsigned __int8 *)*((unsigned __int8 *)v15 + 23);
  }
  else {
    uint64_t v36 = (unsigned __int8 *)v15[1];
  }
  std::system_error v37 = (unsigned __int8 *)*((unsigned __int8 *)v16 + 23);
  int v38 = (char)v37;
  if ((char)v37 < 0) {
    std::system_error v37 = v16[1];
  }
  if (v36 != v37) {
    return 0;
  }
  if (v38 >= 0) {
    std::string v39 = a2[2];
  }
  else {
    std::string v39 = (unsigned __int8 **)*v16;
  }
  if ((v35 & 0x80) != 0)
  {
    if (memcmp(*v15, v39, (size_t)v15[1])) {
      return 0;
    }
  }
  else if (*((unsigned char *)v15 + 23))
  {
    uint64_t v40 = v35 - 1;
    do
    {
      int v42 = *(unsigned __int8 *)v15;
      uint64_t v15 = (const void **)((char *)v15 + 1);
      int v41 = v42;
      int v44 = *(unsigned __int8 *)v39;
      std::string v39 = (unsigned __int8 **)((char *)v39 + 1);
      int v43 = v44;
      BOOL v33 = v40-- != 0;
      char v45 = v33;
      BOOL v13 = v41 == v43;
      BOOL v18 = v41 == v43;
    }
    while (v13 && (v45 & 1) != 0);
LABEL_29:
    if (!v18) {
      return 0;
    }
  }
  uint64_t v19 = a1[3];
  uint64_t v20 = a2[3];
  int v21 = *((unsigned __int8 *)v20 + 2);
  if (*((unsigned char *)v19 + 2)) {
    BOOL v22 = v21 == 0;
  }
  else {
    BOOL v22 = 1;
  }
  if (v22)
  {
    if ((*((unsigned char *)v19 + 2) != 0) != (v21 != 0)) {
      return 0;
    }
  }
  else if (*(unsigned __int16 *)v19 != *(unsigned __int16 *)v20)
  {
    return 0;
  }
  long long v46 = a1[4];
  uint64_t v47 = a2[4];
  if (v46[2] == v47[2])
  {
    char v48 = (const void **)v46[1];
    for (unint64_t i = (unsigned __int8 **)v47[1]; ; unint64_t i = (unsigned __int8 **)i[1])
    {
      if (v48 == v46 || i == v47) {
        return v48 == v46 && i == v47;
      }
      uint64_t v51 = *((unsigned __int8 *)v48 + 39);
      if ((v51 & 0x80u) == 0) {
        char v52 = (unsigned __int8 *)*((unsigned __int8 *)v48 + 39);
      }
      else {
        char v52 = (unsigned __int8 *)v48[3];
      }
      uint64_t v53 = (unsigned __int8 *)*((unsigned __int8 *)i + 39);
      int v54 = (char)v53;
      if ((char)v53 < 0) {
        uint64_t v53 = i[3];
      }
      if (v52 != v53) {
        return 0;
      }
      char v55 = v48 + 2;
      if (v54 >= 0) {
        std::string v56 = (unsigned __int8 *)(i + 2);
      }
      else {
        std::string v56 = i[2];
      }
      if ((v51 & 0x80) != 0)
      {
        if (memcmp(*v55, v56, (size_t)v48[3])) {
          return 0;
        }
      }
      else if (*((unsigned char *)v48 + 39))
      {
        while (*(unsigned __int8 *)v55 == *v56)
        {
          char v55 = (const void **)((char *)v55 + 1);
          ++v56;
          if (!--v51) {
            goto LABEL_99;
          }
        }
        return 0;
      }
LABEL_99:
      uint64_t v57 = *((unsigned __int8 *)v48 + 63);
      if ((v57 & 0x80u) == 0) {
        long long v58 = (unsigned __int8 *)*((unsigned __int8 *)v48 + 63);
      }
      else {
        long long v58 = (unsigned __int8 *)v48[6];
      }
      char v59 = (unsigned __int8 *)*((unsigned __int8 *)i + 63);
      int v60 = (char)v59;
      if ((char)v59 < 0) {
        char v59 = i[6];
      }
      if (v58 != v59) {
        return 0;
      }
      long long v61 = v48 + 5;
      if (v60 >= 0) {
        uint64_t v62 = (unsigned __int8 *)(i + 5);
      }
      else {
        uint64_t v62 = i[5];
      }
      if ((v57 & 0x80) != 0)
      {
        if (memcmp(*v61, v62, (size_t)v48[6])) {
          return 0;
        }
      }
      else if (*((unsigned char *)v48 + 63))
      {
        uint64_t v63 = v57 - 1;
        do
        {
          int v65 = *(unsigned __int8 *)v61;
          long long v61 = (const void **)((char *)v61 + 1);
          int v64 = v65;
          int v67 = *v62++;
          int v66 = v67;
          BOOL v33 = v63-- != 0;
          char v68 = v33;
        }
        while (v64 == v66 && (v68 & 1) != 0);
        if (v64 != v66) {
          return 0;
        }
      }
      char v48 = (const void **)v48[1];
    }
  }
  return 0;
}

uint64_t AMSCore::StringUtils::join<char [42]>(std::string *a1, const char *a2)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v6);
  size_t v4 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v6, (uint64_t)a2, v4);
  std::stringbuf::str[abi:fe180100]((uint64_t)v7, a1);
  uint64_t v6 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v7[-1] + *(void *)(v6 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v7[0] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FA3FD0](&v9);
}

uint64_t AMSCore::StringUtils::join<char [41]>(std::string *a1, const char *a2)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v6);
  size_t v4 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v6, (uint64_t)a2, v4);
  std::stringbuf::str[abi:fe180100]((uint64_t)v7, a1);
  uint64_t v6 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v7[-1] + *(void *)(v6 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v7[0] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FA3FD0](&v9);
}

uint64_t AMSCore::StringUtils::join<char [33]>(std::string *a1, const char *a2)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v6);
  size_t v4 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v6, (uint64_t)a2, v4);
  std::stringbuf::str[abi:fe180100]((uint64_t)v7, a1);
  uint64_t v6 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v7[-1] + *(void *)(v6 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v7[0] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FA3FD0](&v9);
}

void *std::__function::__func<AMSCore::HTTPCacheDataAccessObject::getCachedReponse(std::string const&,AMSCore::HTTPRequest const&)::$_0,std::allocator<AMSCore::HTTPCacheDataAccessObject::getCachedReponse(std::string const&,AMSCore::HTTPRequest const&)::$_0>,BOOL ()(std::map<std::string,AMSCore::Any> &&)>::target_type()
{
}

uint64_t std::__function::__func<AMSCore::HTTPCacheDataAccessObject::getCachedReponse(std::string const&,AMSCore::HTTPRequest const&)::$_0,std::allocator<AMSCore::HTTPCacheDataAccessObject::getCachedReponse(std::string const&,AMSCore::HTTPRequest const&)::$_0>,BOOL ()(std::map<std::string,AMSCore::Any> &&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore25HTTPCacheDataAccessObject16getCachedReponseERKNSt3__112basic_stringIcNS1_11char_traitsI"
                     "cEENS1_9allocatorIcEEEERKNS_11HTTPRequestEE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore25HTTPCacheDataAccessObject16getCachedReponseERKNSt3__112basic_stringIcNS1_11c"
                                "har_traitsIcEENS1_9allocatorIcEEEERKNS_11HTTPRequestEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore25HTTPCacheDataAccessObject16getCachedReponseERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_11HTTPRequestEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore25HTTPCacheDataAccessObject16getCachedReponseERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_11HTTPRequestEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMSCore::HTTPCacheDataAccessObject::getCachedReponse(std::string const&,AMSCore::HTTPRequest const&)::$_0,std::allocator<AMSCore::HTTPCacheDataAccessObject::getCachedReponse(std::string const&,AMSCore::HTTPRequest const&)::$_0>,BOOL ()(std::map<std::string,AMSCore::Any> &&)>::operator()(uint64_t a1, void *a2)
{
  unint64_t v3 = a2 + 1;
  uint64_t v4 = a2[1];
  uint64_t v98 = (unsigned int **)*a2;
  uint64_t v99 = (unsigned int *)v4;
  if (a2[2])
  {
    *(void *)(v4 + 16) = &v99;
    *a2 = v3;
    *unint64_t v3 = 0;
    a2[2] = 0;
  }
  else
  {
    uint64_t v98 = &v99;
  }
  AMSCore::getValueAs<AMSCore::DataBuffer,std::map<std::string,AMSCore::Any>>((uint64_t)&v231, (uint64_t)&v98, "responseBody", 0xCuLL);
  if (!v237)
  {
    std::runtime_error::runtime_error(&v113, &v231);
    long long v114 = v232;
    v113.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v115 = v233;
    uint64_t v116 = (unsigned int *)v234;
    uint64_t v117 = v235;
    if (v235)
    {
      *(void *)(v234 + 16) = &v116;
      uint64_t v233 = (unsigned int **)&v234;
      uint64_t v234 = 0;
      uint64_t v235 = 0;
    }
    else
    {
      uint64_t v115 = &v116;
    }
    long long v118 = v236;
    long long v236 = 0uLL;
    char v119 = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v174, (uint64_t)&v113);
    std::runtime_error::runtime_error(&v101, &v174);
    long long v102 = v175;
    uint64_t v6 = v177;
    v101.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    int v103 = v176;
    uint64_t v104 = v177;
    uint64_t v105 = v178;
    if (v178)
    {
      *((void *)v177 + 2) = &v104;
      long long v176 = &v177;
      char v177 = 0;
      uint64_t v178 = 0;
      uint64_t v6 = 0;
    }
    else
    {
      int v103 = &v104;
    }
    long long v106 = v179;
    long long v179 = 0uLL;
    char v112 = 0;
    v174.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v176, v6);
    MEMORY[0x192FA3C30](&v174);
    if (!v119) {
      goto LABEL_301;
    }
    v113.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    int v7 = (std::__shared_weak_count *)*((void *)&v118 + 1);
    if (*((void *)&v118 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v118 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v115, v116);
    MEMORY[0x192FA3C30](&v113);
    if (v237) {
      goto LABEL_303;
    }
LABEL_302:
    ((void (*)(std::runtime_error *))v231.~runtime_error)(&v231);
    goto LABEL_303;
  }
  AMSCore::getValueAs<AMSCore::DataBuffer,std::map<std::string,AMSCore::Any>>((uint64_t)&v224, (uint64_t)&v98, "headers", 7uLL);
  if (!v230)
  {
    std::runtime_error::runtime_error(&v113, &v224);
    long long v114 = v225;
    v113.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v115 = v226;
    uint64_t v116 = (unsigned int *)v227;
    uint64_t v117 = v228;
    if (v228)
    {
      *(void *)(v227 + 16) = &v116;
      uint64_t v226 = (unsigned int **)&v227;
      uint64_t v227 = 0;
      uint64_t v228 = 0;
    }
    else
    {
      uint64_t v115 = &v116;
    }
    long long v118 = v229;
    long long v229 = 0uLL;
    char v119 = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v174, (uint64_t)&v113);
    std::runtime_error::runtime_error(&v101, &v174);
    long long v102 = v175;
    uint64_t v9 = v177;
    v101.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    int v103 = v176;
    uint64_t v104 = v177;
    uint64_t v105 = v178;
    if (v178)
    {
      *((void *)v177 + 2) = &v104;
      long long v176 = &v177;
      char v177 = 0;
      uint64_t v178 = 0;
      uint64_t v9 = 0;
    }
    else
    {
      int v103 = &v104;
    }
    long long v106 = v179;
    long long v179 = 0uLL;
    char v112 = 0;
    v174.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v176, v9);
    MEMORY[0x192FA3C30](&v174);
    if (v119)
    {
      v113.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v10 = (std::__shared_weak_count *)*((void *)&v118 + 1);
      if (*((void *)&v118 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v118 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v115, v116);
      MEMORY[0x192FA3C30](&v113);
    }
    goto LABEL_300;
  }
  AMSCore::JsonData::decode((uint64_t *)v224.__vftable, (uint64_t)&v101);
  if (!v107)
  {
    std::runtime_error::runtime_error(&v113, &v101);
    long long v114 = v102;
    v113.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v115 = v103;
    uint64_t v116 = v104;
    uint64_t v117 = v105;
    if (v105)
    {
      *((void *)v104 + 2) = &v116;
      int v103 = &v104;
      uint64_t v104 = 0;
      uint64_t v105 = 0;
    }
    else
    {
      uint64_t v115 = &v116;
    }
    long long v118 = v106;
    long long v106 = 0uLL;
    char v119 = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v174, (uint64_t)&v113);
    std::runtime_error::runtime_error(&v217, &v174);
    long long v218 = v175;
    char v11 = v177;
    v217.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v219 = v176;
    uint64_t v220 = v177;
    uint64_t v221 = v178;
    if (v178)
    {
      *((void *)v177 + 2) = &v220;
      long long v176 = &v177;
      char v177 = 0;
      uint64_t v178 = 0;
      char v11 = 0;
    }
    else
    {
      uint64_t v219 = &v220;
    }
    long long v222 = v179;
    long long v179 = 0uLL;
    char v223 = 0;
    v174.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v176, v11);
    MEMORY[0x192FA3C30](&v174);
    if (!v119) {
      goto LABEL_119;
    }
    v113.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    int v12 = (std::__shared_weak_count *)*((void *)&v118 + 1);
    if (*((void *)&v118 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v118 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v115, v116);
    MEMORY[0x192FA3C30](&v113);
    if (!v107) {
      goto LABEL_136;
    }
LABEL_120:
    if (DWORD2(v102) != -1) {
      ((void (*)(std::runtime_error *, std::runtime_error *))off_1EDCA5610[DWORD2(v102)])(&v113, &v101);
    }
    if (!v223) {
      goto LABEL_137;
    }
    goto LABEL_123;
  }
  uint64_t v97 = a1;
  if (BYTE8(v102) == 9)
  {
    uint64_t v5 = &v101;
    if (DWORD2(v102) != 9) {
      uint64_t v5 = 0;
    }
    v113.__vftable = (std::runtime_error_vtbl *)v5;
    char v119 = 1;
  }
  else
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[34]>((uint64_t)&v174, 4u, "any doesn't contain expected type");
    std::runtime_error::runtime_error(&v113, &v174);
    long long v114 = v175;
    char v8 = v177;
    v113.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v115 = v176;
    uint64_t v116 = v177;
    uint64_t v117 = v178;
    if (v178)
    {
      *((void *)v177 + 2) = &v116;
      long long v176 = &v177;
      char v177 = 0;
      uint64_t v178 = 0;
      char v8 = 0;
    }
    else
    {
      uint64_t v115 = &v116;
    }
    long long v118 = v179;
    long long v179 = 0uLL;
    char v119 = 0;
    v174.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v176, v8);
    MEMORY[0x192FA3C30](&v174);
    if (!v119)
    {
      std::runtime_error::runtime_error(&v174, &v113);
      long long v175 = v114;
      v174.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      long long v176 = v115;
      char v177 = v116;
      uint64_t v178 = v117;
      if (v117)
      {
        *((void *)v116 + 2) = &v177;
        uint64_t v115 = &v116;
        uint64_t v116 = 0;
        uint64_t v117 = 0;
      }
      else
      {
        long long v176 = &v177;
      }
      long long v179 = v118;
      long long v118 = 0uLL;
      char v180 = 1;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v124, (uint64_t)&v174);
      std::runtime_error::runtime_error(&v217, &v124);
      long long v218 = v125;
      char v52 = v127;
      v217.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v219 = v126;
      uint64_t v220 = v127;
      uint64_t v221 = v128;
      if (v128)
      {
        *((void *)v127 + 2) = &v220;
        uint64_t v126 = &v127;
        uint64_t v127 = 0;
        uint64_t v128 = 0;
        char v52 = 0;
      }
      else
      {
        uint64_t v219 = &v220;
      }
      long long v222 = v129;
      long long v129 = 0uLL;
      char v223 = 0;
      v124.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v126, v52);
      MEMORY[0x192FA3C30](&v124);
      if (v180)
      {
        v174.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        uint64_t v53 = (std::__shared_weak_count *)*((void *)&v179 + 1);
        if (*((void *)&v179 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v179 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v176, v177);
        MEMORY[0x192FA3C30](&v174);
      }
      goto LABEL_118;
    }
  }
  unsigned long long __p = 0u;
  long long v211 = 0u;
  int v13 = 1065353216;
  LODWORD(v212) = 1065353216;
  BOOL v14 = v113.~runtime_error;
  uint64_t v15 = v113.~runtime_error_0;
  if (v113.~runtime_error == v15)
  {
    int v38 = 0;
    uint64_t v37 = 0;
    uint64_t v36 = 0;
    uint64_t v35 = 0;
LABEL_105:
    *((void *)&__p + 1) = 0;
    *(void *)&unsigned long long __p = 0;
    v217.__vftable = v35;
    v217.__imp_.__imp_ = v36;
    *(void *)&long long v218 = v38;
    *((void *)&v218 + 1) = v37;
    LODWORD(v219) = v13;
    a1 = v97;
    if (v37)
    {
      unint64_t v39 = *((void *)v38 + 1);
      if (((unint64_t)v36 & (unint64_t)(v36 - 1)) != 0)
      {
        if (v39 >= (unint64_t)v36) {
          v39 %= (unint64_t)v36;
        }
      }
      else
      {
        v39 &= (unint64_t)(v36 - 1);
      }
      int v38 = 0;
      *((void *)&v35->~runtime_error + v39) = &v218;
      long long v211 = 0uLL;
    }
    char v223 = 1;
    if (!v38) {
      goto LABEL_116;
    }
    while (1)
    {
LABEL_128:
      int v43 = *(char **)v38;
      if (v38[63] < 0)
      {
        operator delete(*((void **)v38 + 5));
        if (v38[39] < 0) {
LABEL_132:
        }
          operator delete(*((void **)v38 + 2));
      }
      else if (v38[39] < 0)
      {
        goto LABEL_132;
      }
      operator delete(v38);
      int v38 = v43;
      if (!v43) {
        goto LABEL_116;
      }
    }
  }
  uint64_t v16 = "name";
  while (1)
  {
    AMSCore::getValueAs<std::string,AMSCore::Any>((uint64_t)&v174, (uint64_t)v14, v16, 4uLL);
    if (v180)
    {
      AMSCore::getValueAs<std::string,AMSCore::Any>((uint64_t)&v124, (uint64_t)v14, "value", 5uLL);
      if (v130)
      {
        if (!v180) {
          goto LABEL_332;
        }
        BOOL v17 = (char *)operator new(0x40uLL);
        uint64_t v18 = (uint64_t)v17;
        v195.__vftable = (std::runtime_error_vtbl *)v17;
        v195.__imp_.__imp_ = (const char *)&v211;
        LOBYTE(v196) = 0;
        uint64_t v19 = v17 + 16;
        *(void *)BOOL v17 = 0;
        *((void *)v17 + 1) = 0;
        if (SHIBYTE(v174.what) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v17 + 16), (const std::string::value_type *)v174.~runtime_error, (std::string::size_type)v174.~runtime_error_0);
        }
        else
        {
          long long v20 = *(_OWORD *)&v174.~runtime_error;
          *((void *)v17 + 4) = v174.what;
          *(_OWORD *)uint64_t v19 = v20;
        }
        if (SHIBYTE(v124.what) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v18 + 40), (const std::string::value_type *)v124.~runtime_error, (std::string::size_type)v124.~runtime_error_0);
        }
        else
        {
          long long v21 = *(_OWORD *)&v124.~runtime_error;
          *(void *)(v18 + 56) = v124.what;
          *(_OWORD *)(v18 + 40) = v21;
        }
        LOBYTE(v196) = 1;
        int v22 = *(char *)(v18 + 39);
        if (v22 >= 0) {
          uint64_t v23 = v19;
        }
        else {
          uint64_t v23 = *(char **)(v18 + 16);
        }
        if (v22 >= 0) {
          uint64_t v24 = *(unsigned __int8 *)(v18 + 39);
        }
        else {
          uint64_t v24 = *(void *)(v18 + 24);
        }
        uint64_t v25 = std::locale::classic();
        int v26 = std::locale::use_facet(v25, MEMORY[0x1E4FBA258]);
        char v27 = v16;
        if (v24)
        {
          uint64_t v28 = v26;
          uint64_t v29 = 0;
          do
          {
            v29 ^= 2
                 * ((int (*)(const std::locale::facet *, void))v28->__vftable[1].__on_zero_shared)(v28, *v23++);
            --v24;
          }
          while (v24);
        }
        else
        {
          uint64_t v29 = 0;
        }
        *(void *)(v18 + 8) = v29;
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveHash,AMSCore::StringUtils::CaseInsensitiveEqualTo,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,AMSCore::StringUtils::CaseInsensitiveEqualTo,AMSCore::StringUtils::CaseInsensitiveHash,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi(&__p, v18);
        int v30 = 0;
        uint64_t v16 = v27;
        if (!v130) {
LABEL_98:
        }
          ((void (*)(std::runtime_error *))v124.~runtime_error)(&v124);
      }
      else
      {
        std::runtime_error::runtime_error(&v195, &v124);
        long long v196 = v125;
        v195.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        unsigned int v197 = v126;
        uint64_t v198 = v127;
        uint64_t v199 = v128;
        if (v128)
        {
          *((void *)v127 + 2) = &v198;
          uint64_t v126 = &v127;
          uint64_t v127 = 0;
          uint64_t v128 = 0;
        }
        else
        {
          unsigned int v197 = &v198;
        }
        long long v200 = v129;
        long long v129 = 0uLL;
        char v201 = 1;
        AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v168, (uint64_t)&v195);
        std::runtime_error::runtime_error(&v217, &v168);
        long long v218 = v169;
        BOOL v33 = (unsigned int *)v171;
        v217.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        uint64_t v219 = v170;
        uint64_t v220 = (unsigned int *)v171;
        uint64_t v221 = v172;
        if (v172)
        {
          *(void *)(v171 + 16) = &v220;
          BOOL v33 = 0;
          uint64_t v170 = (unsigned int **)&v171;
          uint64_t v171 = 0;
          uint64_t v172 = 0;
        }
        else
        {
          uint64_t v219 = &v220;
        }
        long long v222 = v173;
        long long v173 = 0uLL;
        char v223 = 0;
        v168.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v170, v33);
        MEMORY[0x192FA3C30](&v168);
        if (v201)
        {
          v195.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
          char v34 = (std::__shared_weak_count *)*((void *)&v200 + 1);
          if (*((void *)&v200 + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v200 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v197, v198);
          MEMORY[0x192FA3C30](&v195);
        }
        int v30 = 1;
        if (!v130) {
          goto LABEL_98;
        }
      }
    }
    else
    {
      std::runtime_error::runtime_error(&v124, &v174);
      long long v125 = v175;
      v124.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v126 = v176;
      uint64_t v127 = v177;
      uint64_t v128 = v178;
      if (v178)
      {
        *((void *)v177 + 2) = &v127;
        long long v176 = &v177;
        char v177 = 0;
        uint64_t v178 = 0;
      }
      else
      {
        uint64_t v126 = &v127;
      }
      long long v129 = v179;
      long long v179 = 0uLL;
      char v130 = 1;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v195, (uint64_t)&v124);
      std::runtime_error::runtime_error(&v217, &v195);
      long long v218 = v196;
      int v31 = v198;
      v217.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v219 = v197;
      uint64_t v220 = v198;
      uint64_t v221 = v199;
      if (v199)
      {
        *((void *)v198 + 2) = &v220;
        int v31 = 0;
        unsigned int v197 = &v198;
        uint64_t v198 = 0;
        uint64_t v199 = 0;
      }
      else
      {
        uint64_t v219 = &v220;
      }
      long long v222 = v200;
      long long v200 = 0uLL;
      char v223 = 0;
      v195.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v197, v31);
      MEMORY[0x192FA3C30](&v195);
      if (v130)
      {
        v124.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        int v32 = (std::__shared_weak_count *)*((void *)&v129 + 1);
        if (*((void *)&v129 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v129 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v126, v127);
        MEMORY[0x192FA3C30](&v124);
      }
      int v30 = 1;
    }
    if (!v180) {
      ((void (*)(std::runtime_error *))v174.~runtime_error)(&v174);
    }
    if (v30) {
      break;
    }
    BOOL v14 = (void (__cdecl *)(std::runtime_error *__hidden))((char *)v14 + 32);
    if (v14 == v15)
    {
      uint64_t v35 = (std::runtime_error_vtbl *)__p;
      uint64_t v36 = (const char *)*((void *)&__p + 1);
      uint64_t v37 = *((void *)&v211 + 1);
      int v38 = (char *)v211;
      int v13 = (int)v212;
      goto LABEL_105;
    }
  }
  int v38 = (char *)v211;
  a1 = v97;
  if ((void)v211) {
    goto LABEL_128;
  }
LABEL_116:
  uint64_t v40 = (std::runtime_error_vtbl *)__p;
  *(void *)&unsigned long long __p = 0;
  if (v40) {
    operator delete(v40);
  }
LABEL_118:
  if (!v119)
  {
    ((void (*)(std::runtime_error *))v113.~runtime_error)(&v113);
    if (!v107) {
      goto LABEL_136;
    }
    goto LABEL_120;
  }
LABEL_119:
  if (v107) {
    goto LABEL_120;
  }
LABEL_136:
  ((void (*)(std::runtime_error *))v101.~runtime_error)(&v101);
  if (v223)
  {
LABEL_123:
    AMSCore::getValueAs<long long,std::map<std::string,AMSCore::Any>>((uint64_t)&__p, (uint64_t)&v98, "createdAt", 9uLL);
    if (!v216)
    {
      std::runtime_error::runtime_error(&v113, (const std::runtime_error *)&__p);
      long long v114 = v211;
      v113.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v115 = v212;
      uint64_t v116 = (unsigned int *)v213;
      uint64_t v117 = v214;
      if (v214)
      {
        *(void *)(v213 + 16) = &v116;
        uint64_t v212 = (unsigned int **)&v213;
        uint64_t v213 = 0;
        uint64_t v214 = 0;
      }
      else
      {
        uint64_t v115 = &v116;
      }
      long long v118 = v215;
      long long v215 = 0uLL;
      char v119 = 1;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v174, (uint64_t)&v113);
      std::runtime_error::runtime_error(&v101, &v174);
      long long v102 = v175;
      char v48 = v177;
      v101.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      int v103 = v176;
      uint64_t v104 = v177;
      uint64_t v105 = v178;
      if (v178)
      {
        *((void *)v177 + 2) = &v104;
        long long v176 = &v177;
        char v177 = 0;
        uint64_t v178 = 0;
        char v48 = 0;
      }
      else
      {
        int v103 = &v104;
      }
      long long v106 = v179;
      long long v179 = 0uLL;
      char v112 = 0;
      v174.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v176, v48);
      MEMORY[0x192FA3C30](&v174);
      if (v119)
      {
        v113.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        std::runtime_error v49 = (std::__shared_weak_count *)*((void *)&v118 + 1);
        if (*((void *)&v118 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v118 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v115, v116);
        MEMORY[0x192FA3C30](&v113);
      }
      goto LABEL_297;
    }
    AMSCore::getValueAs<std::string,std::map<std::string,AMSCore::Any>>((uint64_t)&v203, (uint64_t)&v98, "url", 3uLL);
    if (!v209)
    {
      std::runtime_error::runtime_error(&v113, &v203);
      long long v114 = v204;
      v113.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v115 = v205;
      uint64_t v116 = (unsigned int *)v206;
      uint64_t v117 = v207;
      if (v207)
      {
        *(void *)(v206 + 16) = &v116;
        uint64_t v205 = (unsigned int **)&v206;
        uint64_t v206 = 0;
        uint64_t v207 = 0;
      }
      else
      {
        uint64_t v115 = &v116;
      }
      long long v118 = v208;
      long long v208 = 0uLL;
      char v119 = 1;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v174, (uint64_t)&v113);
      std::runtime_error::runtime_error(&v101, &v174);
      long long v102 = v175;
      long long v50 = v177;
      v101.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      int v103 = v176;
      uint64_t v104 = v177;
      uint64_t v105 = v178;
      if (v178)
      {
        *((void *)v177 + 2) = &v104;
        long long v176 = &v177;
        char v177 = 0;
        uint64_t v178 = 0;
        long long v50 = 0;
      }
      else
      {
        int v103 = &v104;
      }
      long long v106 = v179;
      long long v179 = 0uLL;
      char v112 = 0;
      v174.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v176, v50);
      MEMORY[0x192FA3C30](&v174);
      if (!v119)
      {
LABEL_295:
        if (v209) {
          goto LABEL_297;
        }
        goto LABEL_296;
      }
      v113.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v51 = (std::__shared_weak_count *)*((void *)&v118 + 1);
      if (*((void *)&v118 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v118 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v115, v116);
      MEMORY[0x192FA3C30](&v113);
      if (v209) {
        goto LABEL_297;
      }
LABEL_296:
      ((void (*)(std::runtime_error *))v203.~runtime_error)(&v203);
      goto LABEL_297;
    }
    int v41 = v203.__vftable;
    if (SHIBYTE(v203.what) < 0)
    {
      int v41 = (std::runtime_error_vtbl *)v203.~runtime_error;
      unint64_t what_high = (unint64_t)v203.~runtime_error_0;
    }
    else
    {
      unint64_t what_high = HIBYTE(v203.what);
    }
    AMSCore::URL::parse((uint64_t)v41, what_high, (uint64_t)&v195);
    if (!v202)
    {
      std::runtime_error::runtime_error(&v113, &v195);
      long long v114 = v196;
      v113.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v115 = v197;
      uint64_t v116 = v198;
      uint64_t v117 = v199;
      if (v199)
      {
        *((void *)v198 + 2) = &v116;
        unsigned int v197 = &v198;
        uint64_t v198 = 0;
        uint64_t v199 = 0;
      }
      else
      {
        uint64_t v115 = &v116;
      }
      long long v118 = v200;
      long long v200 = 0uLL;
      char v119 = 1;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v174, (uint64_t)&v113);
      std::runtime_error::runtime_error(&v101, &v174);
      long long v102 = v175;
      char v59 = v177;
      v101.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      int v103 = v176;
      uint64_t v104 = v177;
      uint64_t v105 = v178;
      if (v178)
      {
        *((void *)v177 + 2) = &v104;
        long long v176 = &v177;
        char v177 = 0;
        uint64_t v178 = 0;
        char v59 = 0;
      }
      else
      {
        int v103 = &v104;
      }
      long long v106 = v179;
      long long v179 = 0uLL;
      char v112 = 0;
      v174.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v176, v59);
      MEMORY[0x192FA3C30](&v174);
      if (v119)
      {
        v113.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        int v60 = (std::__shared_weak_count *)*((void *)&v118 + 1);
        if (*((void *)&v118 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v118 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v115, v116);
        MEMORY[0x192FA3C30](&v113);
      }
      goto LABEL_293;
    }
    AMSCore::getValueAs<std::string,std::map<std::string,AMSCore::Any>>((uint64_t)&v188, (uint64_t)&v98, "method", 6uLL);
    if (!v194)
    {
      std::runtime_error::runtime_error(&v113, &v188);
      long long v114 = v189;
      v113.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v115 = v190;
      uint64_t v116 = (unsigned int *)v191;
      uint64_t v117 = v192;
      if (v192)
      {
        *(void *)(v191 + 16) = &v116;
        uint64_t v190 = (unsigned int **)&v191;
        uint64_t v191 = 0;
        uint64_t v192 = 0;
      }
      else
      {
        uint64_t v115 = &v116;
      }
      long long v118 = v193;
      long long v193 = 0uLL;
      char v119 = 1;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v174, (uint64_t)&v113);
      std::runtime_error::runtime_error(&v101, &v174);
      long long v102 = v175;
      long long v61 = v177;
      v101.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      int v103 = v176;
      uint64_t v104 = v177;
      uint64_t v105 = v178;
      if (v178)
      {
        *((void *)v177 + 2) = &v104;
        long long v176 = &v177;
        char v177 = 0;
        uint64_t v178 = 0;
        long long v61 = 0;
      }
      else
      {
        int v103 = &v104;
      }
      long long v106 = v179;
      long long v179 = 0uLL;
      char v112 = 0;
      v174.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v176, v61);
      MEMORY[0x192FA3C30](&v174);
      if (v119)
      {
        v113.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        uint64_t v62 = (std::__shared_weak_count *)*((void *)&v118 + 1);
        if (*((void *)&v118 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v118 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v115, v116);
        MEMORY[0x192FA3C30](&v113);
      }
      goto LABEL_291;
    }
    long long v46 = v188.__vftable;
    if (SHIBYTE(v188.what) < 0)
    {
      long long v46 = (std::runtime_error_vtbl *)v188.~runtime_error;
      uint64_t v47 = v188.~runtime_error_0;
    }
    else
    {
      uint64_t v47 = (void (__cdecl *)(std::runtime_error *__hidden))HIBYTE(v188.what);
    }
    switch((unint64_t)v47)
    {
      case 3uLL:
        if (LOWORD(v46->~runtime_error) == 17735 && BYTE2(v46->~runtime_error) == 84)
        {
          int v58 = 2;
        }
        else
        {
          int v55 = LOWORD(v46->~runtime_error);
          int v56 = BYTE2(v46->~runtime_error);
          if (v55 != 21840 || v56 != 84) {
            goto LABEL_240;
          }
          int v58 = 7;
        }
        break;
      case 4uLL:
        if (LODWORD(v46->~runtime_error) == 1145128264)
        {
          int v58 = 3;
        }
        else
        {
          if (LODWORD(v46->~runtime_error) != 1414745936) {
            goto LABEL_240;
          }
          int v58 = 6;
        }
        break;
      case 5uLL:
        int v63 = (int)v46->~runtime_error;
        int v64 = BYTE4(v46->~runtime_error);
        if (v63 != 1129595216 || v64 != 72) {
          goto LABEL_240;
        }
        int v58 = 5;
        break;
      case 6uLL:
        int v66 = (int)v46->~runtime_error;
        int v67 = WORD2(v46->~runtime_error);
        if (v66 != 1162626372 || v67 != 17748) {
          goto LABEL_240;
        }
        int v58 = 1;
        break;
      case 7uLL:
        if (LODWORD(v46->~runtime_error) == 1313754947 && *(_DWORD *)((char *)&v46->~runtime_error + 3) == 1413694798)
        {
          int v58 = 0;
        }
        else
        {
          int v70 = (int)v46->~runtime_error;
          int v71 = *(_DWORD *)((char *)&v46->~runtime_error + 3);
          if (v70 != 1230262351 || v71 != 1397641033) {
            goto LABEL_240;
          }
          int v58 = 4;
        }
        break;
      default:
LABEL_240:
        int v58 = 8;
        break;
    }
    AMSCore::getValueAs<AMSCore::DataBuffer,std::map<std::string,AMSCore::Any>>((uint64_t)&v181, (uint64_t)&v98, "requestBody", 0xBuLL);
    if (!v187)
    {
      std::runtime_error::runtime_error(&v113, &v181);
      long long v114 = v182;
      v113.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v115 = v183;
      uint64_t v116 = (unsigned int *)v184;
      uint64_t v117 = v185;
      if (v185)
      {
        *(void *)(v184 + 16) = &v116;
        uint64_t v183 = (unsigned int **)&v184;
        uint64_t v184 = 0;
        uint64_t v185 = 0;
      }
      else
      {
        uint64_t v115 = &v116;
      }
      long long v118 = v186;
      long long v186 = 0uLL;
      char v119 = 1;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v174, (uint64_t)&v113);
      std::runtime_error::runtime_error(&v101, &v174);
      long long v102 = v175;
      std::error_code v85 = v177;
      v101.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      int v103 = v176;
      uint64_t v104 = v177;
      uint64_t v105 = v178;
      if (v178)
      {
        *((void *)v177 + 2) = &v104;
        long long v176 = &v177;
        char v177 = 0;
        uint64_t v178 = 0;
        std::error_code v85 = 0;
      }
      else
      {
        int v103 = &v104;
      }
      long long v106 = v179;
      long long v179 = 0uLL;
      char v112 = 0;
      v174.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v176, v85);
      MEMORY[0x192FA3C30](&v174);
      if (v119)
      {
        v113.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        long long v86 = (std::__shared_weak_count *)*((void *)&v118 + 1);
        if (*((void *)&v118 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v118 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v115, v116);
        MEMORY[0x192FA3C30](&v113);
      }
      goto LABEL_289;
    }
    if (!v202) {
      goto LABEL_332;
    }
    AMSCore::URL::URL((std::string *)&v168, (const AMSCore::URL *)&v195);
    if (!v223) {
      goto LABEL_332;
    }
    long long v73 = v217.__vftable;
    char imp = v217.__imp_.__imp_;
    v217.__imp_.__imp_ = 0;
    v217.__vftable = 0;
    v165[0] = v73;
    v165[1] = (void *)imp;
    long long v166 = v218;
    int v167 = (int)v219;
    if (*((void *)&v218 + 1))
    {
      unint64_t v75 = *(void *)(v218 + 8);
      if (((unint64_t)imp & (unint64_t)(imp - 1)) != 0)
      {
        if (v75 >= (unint64_t)imp) {
          v75 %= (unint64_t)imp;
        }
      }
      else
      {
        v75 &= (unint64_t)(imp - 1);
      }
      *((void *)&v73->~runtime_error + v75) = &v166;
      long long v218 = 0uLL;
    }
    if (!v237)
    {
LABEL_332:
      __break(1u);
      return;
    }
    std::system_error v76 = v231.__vftable;
    long long v163 = *(_OWORD *)&v231.~runtime_error;
    what = v231.what;
    v231.~runtime_error_0 = 0;
    v76->what = 0;
    v76->~runtime_error = 0;
    LOBYTE(v124.__vftable) = 0;
    BYTE8(v125) = 0;
    LOBYTE(v126) = 0;
    LOBYTE(v127) = 0;
    LOBYTE(v128) = 0;
    LOBYTE(v129) = 0;
    BYTE8(v129) = 0;
    char v130 = 0;
    char v131 = 0;
    char v132 = 0;
    char v133 = 0;
    char v134 = 0;
    char v135 = 0;
    char v136 = 0;
    char v141 = 0;
    char v142 = 0;
    char v143 = 0;
    char v144 = 0;
    char v145 = 0;
    char v146 = 0;
    char v147 = 0;
    char v148 = 0;
    char v149 = 0;
    char v150 = 0;
    char v151 = 0;
    char v152 = 0;
    char v153 = 0;
    char v154 = 0;
    char v155 = 0;
    char v157 = 0;
    char v158 = 0;
    __int16 v159 = 0;
    LOBYTE(v160) = 0;
    char v162 = 0;
    long long v138 = 0;
    uint64_t v137 = 0;
    char v140 = 0;
    uint64_t v139 = 0;
    int v156 = 0;
    AMSCore::HTTPResponse::HTTPResponse((uint64_t)&v174, (long long *)&v168, 200, (uint64_t *)v165, &v163, (long long *)&v124);
    if (v162 && v161 < 0) {
      operator delete(v160);
    }
    uint64_t v77 = (void **)v137;
    if (v137)
    {
      for (unint64_t i = v138; i != v77; i -= 3)
      {
        if (*((char *)i - 1) < 0) {
          operator delete(*(i - 3));
        }
      }
      long long v138 = v77;
      operator delete(v77);
    }
    if (BYTE8(v125) && SBYTE7(v125) < 0) {
      operator delete(v124.__vftable);
    }
    if (SHIBYTE(what) < 0) {
      operator delete((void *)v163);
    }
    uint64_t v79 = (void **)v166;
    if (!(void)v166)
    {
LABEL_269:
      long long v80 = v165[0];
      v165[0] = 0;
      if (v80) {
        operator delete(v80);
      }
      AMSCore::URL::~URL((AMSCore::URL *)&v168);
      if (v216)
      {
        uint64_t v81 = 1000 * __p;
        AMSCore::HTTPResponse::HTTPResponse((uint64_t)&v113, (long long *)&v174);
        uint64_t v120 = v81;
        int v121 = v58;
        if (v187)
        {
          char v82 = v181.__vftable;
          uint64_t v83 = v181.what;
          long long v122 = *(_OWORD *)&v181.~runtime_error;
          long long v123 = v83;
          *(_OWORD *)&v181.~runtime_error_0 = 0u;
          v82->~runtime_error = 0;
          AMSCore::HTTPResponse::HTTPResponse((uint64_t)&v101, (long long *)&v113);
          uint64_t v108 = v120;
          int v109 = v121;
          long long v110 = v122;
          uint64_t v111 = v123;
          long long v122 = 0u;
          long long v123 = 0;
          char v112 = 1;
          AMSCore::HTTPResponse::~HTTPResponse((AMSCore::HTTPResponse *)&v113);
          AMSCore::HTTPResponse::~HTTPResponse((AMSCore::HTTPResponse *)&v174);
LABEL_289:
          if (!v187) {
            ((void (*)(std::runtime_error *))v181.~runtime_error)(&v181);
          }
LABEL_291:
          if (!v194) {
            ((void (*)(std::runtime_error *))v188.~runtime_error)(&v188);
          }
LABEL_293:
          if (v202)
          {
            AMSCore::URL::~URL((AMSCore::URL *)&v195);
            goto LABEL_295;
          }
          ((void (*)(std::runtime_error *))v195.~runtime_error)(&v195);
          if (v209)
          {
LABEL_297:
            if (!v216) {
              (*(void (**)(unsigned long long *))__p)(&__p);
            }
            goto LABEL_299;
          }
          goto LABEL_296;
        }
      }
      goto LABEL_332;
    }
    while (1)
    {
      uint64_t v84 = (void **)*v79;
      if (*((char *)v79 + 63) < 0)
      {
        operator delete(v79[5]);
        if (*((char *)v79 + 39) < 0) {
LABEL_279:
        }
          operator delete(v79[2]);
      }
      else if (*((char *)v79 + 39) < 0)
      {
        goto LABEL_279;
      }
      operator delete(v79);
      uint64_t v79 = v84;
      if (!v84) {
        goto LABEL_269;
      }
    }
  }
LABEL_137:
  std::runtime_error::runtime_error(&v113, &v217);
  long long v114 = v218;
  v113.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  uint64_t v115 = v219;
  uint64_t v116 = v220;
  uint64_t v117 = v221;
  if (v221)
  {
    *((void *)v220 + 2) = &v116;
    uint64_t v219 = &v220;
    uint64_t v220 = 0;
    uint64_t v221 = 0;
  }
  else
  {
    uint64_t v115 = &v116;
  }
  long long v118 = v222;
  long long v222 = 0uLL;
  char v119 = 1;
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v174, (uint64_t)&v113);
  std::runtime_error::runtime_error(&v101, &v174);
  long long v102 = v175;
  int v44 = v177;
  v101.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  int v103 = v176;
  uint64_t v104 = v177;
  uint64_t v105 = v178;
  if (v178)
  {
    *((void *)v177 + 2) = &v104;
    long long v176 = &v177;
    char v177 = 0;
    uint64_t v178 = 0;
    int v44 = 0;
  }
  else
  {
    int v103 = &v104;
  }
  long long v106 = v179;
  long long v179 = 0uLL;
  char v112 = 0;
  v174.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v176, v44);
  MEMORY[0x192FA3C30](&v174);
  if (v119)
  {
    v113.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    char v45 = (std::__shared_weak_count *)*((void *)&v118 + 1);
    if (*((void *)&v118 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v118 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v115, v116);
    MEMORY[0x192FA3C30](&v113);
  }
LABEL_299:
  std::__expected_base<AMSCore::IHTTPHeaderMap,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100]((uint64_t)&v217);
LABEL_300:
  if (!v230)
  {
    ((void (*)(std::runtime_error *))v224.~runtime_error)(&v224);
    if (v237) {
      goto LABEL_303;
    }
    goto LABEL_302;
  }
LABEL_301:
  if (!v237) {
    goto LABEL_302;
  }
LABEL_303:
  uint64_t v87 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v87 + 696))
  {
    if (v112)
    {
      (**(void (***)(void))v87)(*(void *)(a1 + 8));
      AMSCore::HTTPResponse::HTTPResponse(v87, (long long *)&v101);
      uint64_t v91 = v108;
      *(_DWORD *)(v87 + 664) = v109;
      *(void *)(v87 + 656) = v91;
      uint64_t v92 = v111;
      *(_OWORD *)(v87 + 672) = v110;
      *(void *)(v87 + 688) = v92;
      long long v110 = 0uLL;
      uint64_t v111 = 0;
      *(unsigned char *)(v87 + 696) = 1;
      if (!v112) {
        goto LABEL_319;
      }
    }
    else
    {
      AMSCore::Error::operator=(*(void *)(a1 + 8), (uint64_t)&v101);
      if (!v112) {
        goto LABEL_319;
      }
    }
    goto LABEL_322;
  }
  if (v112)
  {
    AMSCore::HTTPResponse::operator=(*(void *)(a1 + 8), (uint64_t)&v101);
    uint64_t v88 = v108;
    *(_DWORD *)(v87 + 664) = v109;
    *(void *)(v87 + 656) = v88;
    long long v89 = (void **)(v87 + 672);
    if (*(char *)(v87 + 695) < 0) {
      operator delete(*v89);
    }
    long long v90 = v110;
    *(void *)(v87 + 688) = v111;
    *(_OWORD *)long long v89 = v90;
    HIBYTE(v111) = 0;
    LOBYTE(v110) = 0;
    if (!v112) {
      goto LABEL_319;
    }
LABEL_322:
    if (SHIBYTE(v111) < 0) {
      operator delete((void *)v110);
    }
    AMSCore::HTTPResponse::~HTTPResponse((AMSCore::HTTPResponse *)&v101);
  }
  else
  {
    if (*(char *)(v87 + 695) < 0) {
      operator delete(*(void **)(v87 + 672));
    }
    AMSCore::HTTPResponse::~HTTPResponse((AMSCore::HTTPResponse *)v87);
    std::runtime_error::runtime_error(v93, &v101);
    *(void *)uint64_t v87 = MEMORY[0x1E4FBA448] + 16;
    *(_OWORD *)(v87 + 16) = v102;
    *(void *)uint64_t v87 = &unk_1EDC827D8;
    *(void *)(v87 + 32) = v103;
    uint64_t v94 = v104;
    *(void *)(v87 + 40) = v104;
    uint64_t v95 = v87 + 40;
    uint64_t v96 = v105;
    *(void *)(v87 + 48) = v105;
    if (v96)
    {
      *((void *)v94 + 2) = v95;
      int v103 = &v104;
      uint64_t v104 = 0;
      uint64_t v105 = 0;
    }
    else
    {
      *(void *)(v87 + 32) = v95;
    }
    *(_OWORD *)(v87 + 56) = v106;
    long long v106 = 0uLL;
    *(unsigned char *)(v87 + 696) = 0;
    if (v112) {
      goto LABEL_322;
    }
LABEL_319:
    ((void (*)(std::runtime_error *))v101.~runtime_error)(&v101);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v98, v99);
}

void sub_18DA99CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,unsigned int *a29)
{
  if (LOBYTE(STACK[0xB38]))
  {
    if (LOBYTE(STACK[0xB88])) {
      goto LABEL_3;
    }
  }
  else
  {
    (*(void (**)(unint64_t *))STACK[0xAF0])(&STACK[0xAF0]);
    if (LOBYTE(STACK[0xB88]))
    {
LABEL_3:
      if (!LOBYTE(STACK[0xC28]))
      {
LABEL_4:
        (*(void (**)(unint64_t *))STACK[0xB90])(&STACK[0xB90]);
        goto LABEL_8;
      }
LABEL_7:
      AMSCore::URL::~URL((AMSCore::URL *)&STACK[0xB90]);
LABEL_8:
      if (!LOBYTE(STACK[0xC78])) {
        (*(void (**)(unint64_t *))STACK[0xC30])(&STACK[0xC30]);
      }
      if (!LOBYTE(STACK[0xCC8])) {
        (*(void (**)(unint64_t *))STACK[0xC80])(&STACK[0xC80]);
      }
      std::__expected_base<AMSCore::IHTTPHeaderMap,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100]((uint64_t)&STACK[0xCD0]);
      if (!*(unsigned char *)(v29 - 184)) {
        (**(void (***)(uint64_t))(v29 - 256))(v29 - 256);
      }
      if (!*(unsigned char *)(v29 - 104)) {
        (**(void (***)(uint64_t))(v29 - 176))(v29 - 176);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&a28, a29);
      _Unwind_Resume(a1);
    }
  }
  (*(void (**)(unint64_t *))STACK[0xB40])(&STACK[0xB40]);
  if (!LOBYTE(STACK[0xC28])) {
    goto LABEL_4;
  }
  goto LABEL_7;
}

uint64_t AMSCore::getValueAs<AMSCore::DataBuffer,std::map<std::string,AMSCore::Any>>(uint64_t a1, uint64_t a2, void *__s1, size_t a4)
{
  uint64_t v5 = (uint64_t *)(a2 + 8);
  uint64_t v6 = *(uint64_t **)(a2 + 8);
  if (!v6) {
    goto LABEL_41;
  }
  uint64_t v9 = (uint64_t *)(a2 + 8);
  do
  {
    while (1)
    {
      int v10 = *((char *)v6 + 55);
      char v11 = v10 >= 0 ? v6 + 4 : (uint64_t *)v6[4];
      size_t v12 = v10 >= 0 ? *((unsigned __int8 *)v6 + 55) : v6[5];
      size_t v13 = v12 >= a4 ? a4 : v12;
      int v14 = memcmp(__s1, v11, v13);
      if (v14) {
        break;
      }
      if (a4 <= v12) {
        goto LABEL_17;
      }
LABEL_3:
      uint64_t v6 = (uint64_t *)v6[1];
      if (!v6) {
        goto LABEL_18;
      }
    }
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_17:
    uint64_t v9 = v6;
    uint64_t v6 = (uint64_t *)*v6;
  }
  while (v6);
LABEL_18:
  if (v9 == v5) {
    goto LABEL_41;
  }
  int v15 = *((char *)v9 + 55);
  if (v15 >= 0) {
    uint64_t v16 = v9 + 4;
  }
  else {
    uint64_t v16 = (const void *)v9[4];
  }
  if (v15 >= 0) {
    size_t v17 = *((unsigned __int8 *)v9 + 55);
  }
  else {
    size_t v17 = v9[5];
  }
  if (v17 >= a4) {
    size_t v18 = a4;
  }
  else {
    size_t v18 = v17;
  }
  uint64_t result = memcmp(__s1, v16, v18);
  if (result)
  {
    if ((result & 0x80000000) != 0) {
      goto LABEL_41;
    }
  }
  else if (a4 < v17)
  {
    goto LABEL_41;
  }
  int v20 = *((_DWORD *)v9 + 20);
  if (v20 == -1) {
    unsigned __int8 v21 = 0;
  }
  else {
    unsigned __int8 v21 = *((_DWORD *)v9 + 20);
  }
  if (v21 == 6 || v21 == 5)
  {
    if (v20 == v21) {
      int v22 = v9 + 7;
    }
    else {
      int v22 = 0;
    }
    *(void *)a1 = v22;
    *(unsigned char *)(a1 + 72) = 1;
  }
  else
  {
LABEL_41:
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[34]>((uint64_t)&v26, 4u, "any doesn't contain expected type");
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v26);
    *(_OWORD *)(a1 + 16) = v27;
    *(void *)a1 = &unk_1EDC827D8;
    uint64_t v23 = v29;
    *(void *)(a1 + 32) = v28;
    *(void *)(a1 + 40) = v23;
    uint64_t v24 = a1 + 40;
    uint64_t v25 = v30;
    *(void *)(a1 + 48) = v30;
    if (v25)
    {
      *(void *)(v23 + 16) = v24;
      uint64_t v28 = &v29;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v23 = 0;
    }
    else
    {
      *(void *)(a1 + 32) = v24;
    }
    *(_OWORD *)(a1 + 56) = v31;
    long long v31 = 0uLL;
    *(unsigned char *)(a1 + 72) = 0;
    v26.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v28, (unsigned int *)v23);
    return MEMORY[0x192FA3C30](&v26);
  }
  return result;
}

uint64_t AMSCore::getValueAs<std::string,AMSCore::Any>(uint64_t a1, uint64_t a2, void *a3, size_t a4)
{
  v16[0] = (uint64_t)a3;
  v16[1] = a4;
  if (*(_DWORD *)(a2 + 24) == 8)
  {
    if (*(_DWORD *)(a2 + 24) != 8) {
      a2 = 0;
    }
    return AMSCore::getValueAs<std::string,std::map<std::string,AMSCore::Any>>(a1, a2, a3, a4);
  }
  else
  {
    char v9 = 34;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[32],std::string_view &,char>((uint64_t)&v10, 0xCu, "unable to find value with key \"", v16, &v9);
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v10);
    *(_OWORD *)(a1 + 16) = v11;
    *(void *)a1 = &unk_1EDC827D8;
    uint64_t v6 = v13;
    *(void *)(a1 + 32) = v12;
    *(void *)(a1 + 40) = v6;
    uint64_t v7 = a1 + 40;
    uint64_t v8 = v14;
    *(void *)(a1 + 48) = v14;
    if (v8)
    {
      *(void *)(v6 + 16) = v7;
      size_t v12 = &v13;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v6 = 0;
    }
    else
    {
      *(void *)(a1 + 32) = v7;
    }
    *(_OWORD *)(a1 + 56) = v15;
    long long v15 = 0uLL;
    *(unsigned char *)(a1 + 72) = 0;
    v10.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v12, (unsigned int *)v6);
    return MEMORY[0x192FA3C30](&v10);
  }
}

uint64_t AMSCore::getValueAs<long long,std::map<std::string,AMSCore::Any>>(uint64_t a1, uint64_t a2, void *__s1, size_t a4)
{
  uint64_t v5 = (uint64_t *)(a2 + 8);
  uint64_t v6 = *(uint64_t **)(a2 + 8);
  if (!v6) {
    goto LABEL_32;
  }
  char v9 = (uint64_t *)(a2 + 8);
  do
  {
    while (1)
    {
      int v10 = *((char *)v6 + 55);
      long long v11 = v10 >= 0 ? v6 + 4 : (uint64_t *)v6[4];
      size_t v12 = v10 >= 0 ? *((unsigned __int8 *)v6 + 55) : v6[5];
      size_t v13 = v12 >= a4 ? a4 : v12;
      int v14 = memcmp(__s1, v11, v13);
      if (v14) {
        break;
      }
      if (a4 <= v12) {
        goto LABEL_17;
      }
LABEL_3:
      uint64_t v6 = (uint64_t *)v6[1];
      if (!v6) {
        goto LABEL_18;
      }
    }
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_17:
    char v9 = v6;
    uint64_t v6 = (uint64_t *)*v6;
  }
  while (v6);
LABEL_18:
  if (v9 == v5) {
    goto LABEL_32;
  }
  int v15 = *((char *)v9 + 55);
  if (v15 >= 0) {
    uint64_t v16 = v9 + 4;
  }
  else {
    uint64_t v16 = (const void *)v9[4];
  }
  if (v15 >= 0) {
    size_t v17 = *((unsigned __int8 *)v9 + 55);
  }
  else {
    size_t v17 = v9[5];
  }
  if (v17 >= a4) {
    size_t v18 = a4;
  }
  else {
    size_t v18 = v17;
  }
  uint64_t result = memcmp(__s1, v16, v18);
  if (result)
  {
    if ((result & 0x80000000) != 0)
    {
LABEL_32:
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[34]>((uint64_t)&v26, 4u, "any doesn't contain expected type");
      std::runtime_error::runtime_error((std::runtime_error *)a1, &v26);
      *(_OWORD *)(a1 + 16) = v27;
      *(void *)a1 = &unk_1EDC827D8;
      uint64_t v20 = v29;
      *(void *)(a1 + 32) = v28;
      *(void *)(a1 + 40) = v20;
      uint64_t v21 = a1 + 40;
      uint64_t v22 = v30;
      *(void *)(a1 + 48) = v30;
      if (v22)
      {
        *(void *)(v20 + 16) = v21;
        uint64_t v28 = &v29;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v20 = 0;
      }
      else
      {
        *(void *)(a1 + 32) = v21;
      }
      *(_OWORD *)(a1 + 56) = v31;
      long long v31 = 0uLL;
      *(unsigned char *)(a1 + 72) = 0;
      v26.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v28, (unsigned int *)v20);
      return MEMORY[0x192FA3C30](&v26);
    }
  }
  else if (a4 < v17)
  {
    goto LABEL_32;
  }
  int v23 = *((_DWORD *)v9 + 20);
  if (v23 == -1) {
    LOBYTE(v23) = 0;
  }
  switch((char)v23)
  {
    case 1:
      unint64_t v25 = 0;
      LOBYTE(v24) = *((unsigned char *)v9 + 56);
      goto LABEL_45;
    case 2:
      uint64_t v24 = (uint64_t)*((double *)v9 + 7);
      goto LABEL_44;
    case 3:
    case 4:
      uint64_t v24 = v9[7];
      goto LABEL_44;
    case 7:
      uint64_t v24 = v9[7] / 1000;
LABEL_44:
      unint64_t v25 = v24 & 0xFFFFFFFFFFFFFF00;
LABEL_45:
      *(void *)a1 = v25 | v24;
      *(unsigned char *)(a1 + 72) = 1;
      break;
    default:
      goto LABEL_32;
  }
  return result;
}

uint64_t AMSCore::getValueAs<std::string,std::map<std::string,AMSCore::Any>>(uint64_t a1, uint64_t a2, void *__s1, size_t a4)
{
  uint64_t v5 = (uint64_t *)(a2 + 8);
  uint64_t v6 = *(uint64_t **)(a2 + 8);
  if (!v6) {
    goto LABEL_37;
  }
  char v9 = (uint64_t *)(a2 + 8);
  do
  {
    while (1)
    {
      int v10 = *((char *)v6 + 55);
      long long v11 = v10 >= 0 ? v6 + 4 : (uint64_t *)v6[4];
      size_t v12 = v10 >= 0 ? *((unsigned __int8 *)v6 + 55) : v6[5];
      size_t v13 = v12 >= a4 ? a4 : v12;
      int v14 = memcmp(__s1, v11, v13);
      if (v14) {
        break;
      }
      if (a4 <= v12) {
        goto LABEL_17;
      }
LABEL_3:
      uint64_t v6 = (uint64_t *)v6[1];
      if (!v6) {
        goto LABEL_18;
      }
    }
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_17:
    char v9 = v6;
    uint64_t v6 = (uint64_t *)*v6;
  }
  while (v6);
LABEL_18:
  if (v9 == v5) {
    goto LABEL_37;
  }
  int v15 = *((char *)v9 + 55);
  if (v15 >= 0) {
    uint64_t v16 = v9 + 4;
  }
  else {
    uint64_t v16 = (const void *)v9[4];
  }
  if (v15 >= 0) {
    size_t v17 = *((unsigned __int8 *)v9 + 55);
  }
  else {
    size_t v17 = v9[5];
  }
  if (v17 >= a4) {
    size_t v18 = a4;
  }
  else {
    size_t v18 = v17;
  }
  uint64_t result = memcmp(__s1, v16, v18);
  if (result)
  {
    if ((result & 0x80000000) != 0)
    {
LABEL_37:
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[34]>((uint64_t)&v24, 4u, "any doesn't contain expected type");
      std::runtime_error::runtime_error((std::runtime_error *)a1, &v24);
      *(_OWORD *)(a1 + 16) = v25;
      *(void *)a1 = &unk_1EDC827D8;
      uint64_t v21 = v27;
      *(void *)(a1 + 32) = v26;
      *(void *)(a1 + 40) = v21;
      uint64_t v22 = a1 + 40;
      uint64_t v23 = v28;
      *(void *)(a1 + 48) = v28;
      if (v23)
      {
        *(void *)(v21 + 16) = v22;
        std::runtime_error v26 = &v27;
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        uint64_t v21 = 0;
      }
      else
      {
        *(void *)(a1 + 32) = v22;
      }
      *(_OWORD *)(a1 + 56) = v29;
      long long v29 = 0uLL;
      *(unsigned char *)(a1 + 72) = 0;
      v24.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v26, (unsigned int *)v21);
      return MEMORY[0x192FA3C30](&v24);
    }
  }
  else if (a4 < v17)
  {
    goto LABEL_37;
  }
  if (*((_DWORD *)v9 + 20) != 5) {
    goto LABEL_37;
  }
  if (*((_DWORD *)v9 + 20) == 5) {
    uint64_t v20 = v9 + 7;
  }
  else {
    uint64_t v20 = 0;
  }
  *(void *)a1 = v20;
  *(unsigned char *)(a1 + 72) = 1;
  return result;
}

void std::__expected_base<AMSCore::IHTTPHeaderMap,AMSCore::Error>::__repr::__destroy_union_member[abi:fe180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(void ***)(a1 + 16);
    if (!v2)
    {
LABEL_3:
      unint64_t v3 = *(void (***)(void))a1;
      *(void *)a1 = 0;
      if (v3)
      {
        operator delete(v3);
      }
      return;
    }
    while (1)
    {
      uint64_t v4 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0) {
LABEL_12:
        }
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_12;
      }
      operator delete(v2);
      uint64_t v2 = v4;
      if (!v4) {
        goto LABEL_3;
      }
    }
  }
  uint64_t v5 = **(void (***)(void))a1;
  v5();
}

uint64_t AMSCore::HTTPResponse::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = AMSCore::URL::operator=(a1, (long long *)a2);
  *(_WORD *)(v4 + 152) = *(_WORD *)(a2 + 152);
  if (!*(void *)(v4 + 184)) {
    goto LABEL_7;
  }
  uint64_t v5 = *(void ***)(a1 + 176);
  if (v5)
  {
    do
    {
      int v15 = (void **)*v5;
      if (*((char *)v5 + 63) < 0)
      {
        operator delete(v5[5]);
        if (*((char *)v5 + 39) < 0) {
LABEL_17:
        }
          operator delete(v5[2]);
      }
      else if (*((char *)v5 + 39) < 0)
      {
        goto LABEL_17;
      }
      operator delete(v5);
      uint64_t v5 = v15;
    }
    while (v15);
  }
  *(void *)(a1 + 176) = 0;
  uint64_t v6 = *(void *)(a1 + 168);
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*(void *)(a1 + 160) + 8 * i) = 0;
  }
  *(void *)(a1 + 184) = 0;
LABEL_7:
  uint64_t v8 = *(void *)(a2 + 160);
  *(void *)(a2 + 160) = 0;
  char v9 = *(void **)(a1 + 160);
  *(void *)(a1 + 160) = v8;
  if (v9) {
    operator delete(v9);
  }
  uint64_t v10 = *(void *)(a2 + 176);
  uint64_t v11 = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v10;
  *(void *)(a1 + 168) = v11;
  *(void *)(a2 + 168) = 0;
  uint64_t v12 = *(void *)(a2 + 184);
  *(void *)(a1 + 184) = v12;
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  if (v12)
  {
    unint64_t v13 = *(void *)(v10 + 8);
    unint64_t v14 = *(void *)(a1 + 168);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14) {
        v13 %= v14;
      }
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(void *)(*(void *)(a1 + 160) + 8 * v13) = a1 + 176;
    *(void *)(a2 + 176) = 0;
    *(void *)(a2 + 184) = 0;
  }
  uint64_t v16 = (void **)(a1 + 200);
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*v16);
  }
  long long v17 = *(_OWORD *)(a2 + 200);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(_OWORD *)uint64_t v16 = v17;
  *(unsigned char *)(a2 + 223) = 0;
  *(unsigned char *)(a2 + 200) = 0;
  size_t v18 = (void **)(a1 + 224);
  uint64_t v19 = (long long *)(a2 + 224);
  if (*(unsigned __int8 *)(a1 + 248) == *(unsigned __int8 *)(a2 + 248))
  {
    if (*(unsigned char *)(a1 + 248))
    {
      if (*(char *)(a1 + 247) < 0) {
        operator delete(*v18);
      }
      long long v20 = *v19;
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      *(_OWORD *)size_t v18 = v20;
      *(unsigned char *)(a2 + 247) = 0;
      *(unsigned char *)(a2 + 224) = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 248))
  {
    if (*(char *)(a1 + 247) < 0) {
      operator delete(*v18);
    }
    *(unsigned char *)(a1 + 248) = 0;
  }
  else
  {
    long long v21 = *v19;
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    *(_OWORD *)size_t v18 = v21;
    *(void *)(a2 + 232) = 0;
    *(void *)(a2 + 240) = 0;
    *(void *)uint64_t v19 = 0;
    *(unsigned char *)(a1 + 248) = 1;
  }
  long long v22 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v22;
  long long v23 = *(_OWORD *)(a2 + 288);
  long long v24 = *(_OWORD *)(a2 + 304);
  long long v25 = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 329) = *(_OWORD *)(a2 + 329);
  *(_OWORD *)(a1 + 304) = v24;
  *(_OWORD *)(a1 + 320) = v25;
  *(_OWORD *)(a1 + 288) = v23;
  uint64_t v26 = *(void *)(a1 + 352);
  if (v26)
  {
    uint64_t v27 = (void **)(a1 + 352);
    uint64_t v28 = *(void *)(a1 + 360);
    long long v29 = *(void **)(a1 + 352);
    if (v28 != v26)
    {
      do
      {
        if (*(char *)(v28 - 1) < 0) {
          operator delete(*(void **)(v28 - 24));
        }
        v28 -= 24;
      }
      while (v28 != v26);
      long long v29 = *v27;
    }
    *(void *)(a1 + 360) = v26;
    operator delete(v29);
    *uint64_t v27 = 0;
    *(void *)(a1 + 360) = 0;
    *(void *)(a1 + 368) = 0;
  }
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a2 + 360) = 0;
  *(void *)(a2 + 368) = 0;
  *(void *)(a2 + 352) = 0;
  long long v30 = *(_OWORD *)(a2 + 424);
  long long v31 = *(_OWORD *)(a2 + 440);
  long long v32 = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 456) = v32;
  *(_OWORD *)(a1 + 440) = v31;
  *(_OWORD *)(a1 + 424) = v30;
  long long v33 = *(_OWORD *)(a2 + 488);
  long long v34 = *(_OWORD *)(a2 + 504);
  long long v35 = *(_OWORD *)(a2 + 514);
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
  *(_OWORD *)(a1 + 514) = v35;
  *(_OWORD *)(a1 + 488) = v33;
  *(_OWORD *)(a1 + 504) = v34;
  long long v36 = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 376) = v36;
  uint64_t v37 = (void **)(a1 + 536);
  int v38 = (long long *)(a2 + 536);
  if (*(unsigned __int8 *)(a1 + 560) == *(unsigned __int8 *)(a2 + 560))
  {
    if (*(unsigned char *)(a1 + 560))
    {
      if (*(char *)(a1 + 559) < 0) {
        operator delete(*v37);
      }
      long long v39 = *v38;
      *(void *)(a1 + 552) = *(void *)(a2 + 552);
      *(_OWORD *)uint64_t v37 = v39;
      *(unsigned char *)(a2 + 559) = 0;
      *(unsigned char *)(a2 + 536) = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 560))
  {
    if (*(char *)(a1 + 559) < 0) {
      operator delete(*v37);
    }
    *(unsigned char *)(a1 + 560) = 0;
  }
  else
  {
    long long v40 = *v38;
    *(void *)(a1 + 552) = *(void *)(a2 + 552);
    *(_OWORD *)uint64_t v37 = v40;
    *(void *)(a2 + 544) = 0;
    *(void *)(a2 + 552) = 0;
    *(void *)int v38 = 0;
    *(unsigned char *)(a1 + 560) = 1;
  }
  int v41 = (std::runtime_error *)(a1 + 568);
  int v42 = (std::runtime_error *)(a2 + 568);
  if (*(unsigned __int8 *)(a1 + 648) == *(unsigned __int8 *)(a2 + 648))
  {
    if (*(unsigned char *)(a1 + 648)) {
      std::expected<std::map<std::string,AMSCore::Any>,AMSCore::Error>::operator=[abi:fe180100]((uint64_t)v41, (uint64_t)v42);
    }
  }
  else if (*(unsigned char *)(a1 + 648))
  {
    if (*(unsigned char *)(a1 + 640)) {
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v41, *(unsigned int **)(a1 + 576));
    }
    else {
      ((void (*)(std::runtime_error *, std::runtime_error *))v41->~runtime_error)(v41, v42);
    }
    *(unsigned char *)(a1 + 648) = 0;
  }
  else
  {
    char v43 = *(unsigned char *)(a2 + 640);
    if (v43)
    {
      *(void *)(a1 + 568) = *(void *)(a2 + 568);
      int v44 = (std::runtime_error_vtbl *)(a1 + 576);
      uint64_t v45 = *(void *)(a2 + 576);
      *(void *)(a1 + 576) = v45;
      uint64_t v46 = *(void *)(a2 + 584);
      *(void *)(a1 + 584) = v46;
      if (v46)
      {
        *(void *)(v45 + 16) = v44;
        v42->__vftable = (std::runtime_error_vtbl *)(a2 + 576);
        *(void *)(a2 + 576) = 0;
        *(void *)(a2 + 584) = 0;
      }
      else
      {
        v41->__vftable = v44;
      }
    }
    else
    {
      std::runtime_error::runtime_error(v41, v42);
      *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
      *(void *)(a1 + 568) = &unk_1EDC827D8;
      *(void *)(a1 + 600) = *(void *)(a2 + 600);
      uint64_t v47 = a1 + 608;
      uint64_t v48 = *(void *)(a2 + 608);
      *(void *)(a1 + 608) = v48;
      uint64_t v49 = *(void *)(a2 + 616);
      *(void *)(a1 + 616) = v49;
      if (v49)
      {
        *(void *)(v48 + 16) = v47;
        *(void *)(a2 + 600) = a2 + 608;
        *(void *)(a2 + 608) = 0;
        *(void *)(a2 + 616) = 0;
      }
      else
      {
        *(void *)(a1 + 600) = v47;
      }
      *(_OWORD *)(a1 + 624) = *(_OWORD *)(a2 + 624);
      *(void *)(a2 + 632) = 0;
      *(void *)(a2 + 624) = 0;
    }
    *(unsigned char *)(a1 + 640) = v43;
    *(unsigned char *)(a1 + 648) = 1;
  }
  return a1;
}

uint64_t AMSCore::URL::operator=(uint64_t a1, long long *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == *((unsigned __int8 *)a2 + 24))
  {
    if (*(unsigned char *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      long long v4 = *a2;
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(_OWORD *)a1 = v4;
      *((unsigned char *)a2 + 23) = 0;
      *(unsigned char *)a2 = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v5;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  uint64_t v6 = (void **)(a1 + 32);
  uint64_t v7 = a2 + 2;
  if (*(unsigned __int8 *)(a1 + 56) == *((unsigned __int8 *)a2 + 56))
  {
    if (*(unsigned char *)(a1 + 56))
    {
      if (*(char *)(a1 + 55) < 0) {
        operator delete(*v6);
      }
      long long v8 = *v7;
      *(void *)(a1 + 48) = *((void *)a2 + 6);
      *(_OWORD *)uint64_t v6 = v8;
      *((unsigned char *)a2 + 55) = 0;
      *((unsigned char *)a2 + 32) = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 56))
  {
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*v6);
    }
    *(unsigned char *)(a1 + 56) = 0;
  }
  else
  {
    long long v9 = *v7;
    *(void *)(a1 + 48) = *((void *)a2 + 6);
    *(_OWORD *)uint64_t v6 = v9;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 6) = 0;
    *(void *)uint64_t v7 = 0;
    *(unsigned char *)(a1 + 56) = 1;
  }
  uint64_t v10 = (void **)(a1 + 64);
  uint64_t v11 = a2 + 4;
  if (*(unsigned __int8 *)(a1 + 88) == *((unsigned __int8 *)a2 + 88))
  {
    if (*(unsigned char *)(a1 + 88))
    {
      if (*(char *)(a1 + 87) < 0) {
        operator delete(*v10);
      }
      long long v12 = *v11;
      *(void *)(a1 + 80) = *((void *)a2 + 10);
      *(_OWORD *)uint64_t v10 = v12;
      *((unsigned char *)a2 + 87) = 0;
      *((unsigned char *)a2 + 64) = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 88))
  {
    if (*(char *)(a1 + 87) < 0) {
      operator delete(*v10);
    }
    *(unsigned char *)(a1 + 88) = 0;
  }
  else
  {
    long long v13 = *v11;
    *(void *)(a1 + 80) = *((void *)a2 + 10);
    *(_OWORD *)uint64_t v10 = v13;
    *((void *)a2 + 9) = 0;
    *((void *)a2 + 10) = 0;
    *(void *)uint64_t v11 = 0;
    *(unsigned char *)(a1 + 88) = 1;
  }
  __int16 v14 = *((_WORD *)a2 + 48);
  *(unsigned char *)(a1 + 98) = *((unsigned char *)a2 + 98);
  *(_WORD *)(a1 + 96) = v14;
  std::list<std::pair<std::string,std::string>>::__move_assign((char *)(a1 + 104), (char *)a2 + 104);
  int v15 = (void **)(a1 + 128);
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*v15);
  }
  long long v16 = a2[8];
  *(void *)(a1 + 144) = *((void *)a2 + 18);
  *(_OWORD *)int v15 = v16;
  *((unsigned char *)a2 + 151) = 0;
  *((unsigned char *)a2 + 128) = 0;
  return a1;
}

uint64_t std::expected<std::map<std::string,AMSCore::Any>,AMSCore::Error>::operator=[abi:fe180100](uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 72);
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v5 = a1 + 8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a1, *(unsigned int **)(a1 + 8));
    if (v4)
    {
      *(void *)a1 = *(void *)a2;
      uint64_t v6 = (void *)(a2 + 8);
      uint64_t v7 = *(void *)(a2 + 8);
      *(void *)(a1 + 8) = v7;
      uint64_t v8 = *(void *)(a2 + 16);
      *(void *)(a1 + 16) = v8;
      if (v8)
      {
        *(void *)(v7 + 16) = v5;
        *(void *)a2 = v6;
        *uint64_t v6 = 0;
        *(void *)(a2 + 16) = 0;
      }
      else
      {
        *(void *)a1 = v5;
      }
    }
    else
    {
      std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
      *(void *)a1 = MEMORY[0x1E4FBA448] + 16;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(void *)a1 = &unk_1EDC827D8;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      long long v13 = (void *)(a2 + 40);
      uint64_t v14 = *(void *)(a2 + 40);
      *(void *)(a1 + 40) = v14;
      uint64_t v15 = a1 + 40;
      uint64_t v16 = *(void *)(a2 + 48);
      *(void *)(a1 + 48) = v16;
      if (v16)
      {
        *(void *)(v14 + 16) = v15;
        *(void *)(a2 + 32) = v13;
        *long long v13 = 0;
        *(void *)(a2 + 48) = 0;
      }
      else
      {
        *(void *)(a1 + 32) = v15;
      }
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(void *)(a2 + 56) = 0;
      *(void *)(a2 + 64) = 0;
      *(unsigned char *)(a1 + 72) = 0;
    }
  }
  else if (*(unsigned char *)(a2 + 72))
  {
    (**(void (***)(uint64_t))a1)(a1);
    *(void *)a1 = *(void *)a2;
    long long v9 = (void *)(a2 + 8);
    uint64_t v10 = *(void *)(a2 + 8);
    *(void *)(a1 + 8) = v10;
    uint64_t v11 = a1 + 8;
    uint64_t v12 = *(void *)(a2 + 16);
    *(void *)(a1 + 16) = v12;
    if (v12)
    {
      *(void *)(v10 + 16) = v11;
      *(void *)a2 = v9;
      *long long v9 = 0;
      *(void *)(a2 + 16) = 0;
    }
    else
    {
      *(void *)a1 = v11;
    }
    *(unsigned char *)(a1 + 72) = 1;
  }
  else
  {
    AMSCore::Error::operator=(a1, a2);
  }
  return a1;
}

void std::list<std::pair<std::string,std::string>>::__move_assign(char *a1, char *a2)
{
  if (*((void *)a1 + 2))
  {
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = (char *)*((void *)a1 + 1);
    uint64_t v6 = *(void *)v5;
    *(void *)(v6 + 8) = *(void *)(*(void *)a1 + 8);
    **(void **)(v4 + 8) = v6;
    *((void *)a1 + 2) = 0;
    if (v5 != a1)
    {
      do
      {
        uint64_t v12 = (char *)*((void *)v5 + 1);
        if (v5[63] < 0)
        {
          operator delete(*((void **)v5 + 5));
          if (v5[39] < 0) {
LABEL_12:
          }
            operator delete(*((void **)v5 + 2));
        }
        else if (v5[39] < 0)
        {
          goto LABEL_12;
        }
        operator delete(v5);
        uint64_t v5 = v12;
      }
      while (v12 != a1);
    }
  }
  if (a1 == a2)
  {
    __break(1u);
  }
  else
  {
    uint64_t v7 = *((void *)a2 + 2);
    if (v7)
    {
      uint64_t v9 = *(void *)a2;
      uint64_t v8 = (uint64_t *)*((void *)a2 + 1);
      uint64_t v10 = *v8;
      *(void *)(v10 + 8) = *(void *)(*(void *)a2 + 8);
      **(void **)(v9 + 8) = v10;
      uint64_t v11 = *(void *)a1;
      *(void *)(v11 + 8) = v8;
      *uint64_t v8 = v11;
      *(void *)a1 = v9;
      *(void *)(v9 + 8) = a1;
      *((void *)a1 + 2) += v7;
      *((void *)a2 + 2) = 0;
    }
  }
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[34]>(uint64_t a1, unsigned int a2, const char *a3)
{
  uint64_t v4 = a2;
  AMSCore::StringUtils::join<char [34]>(&__what_arg, a3);
  *(void *)&v15.__val_ = v4;
  v15.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v9, v15, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  v9.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  uint64_t v10 = &v11;
  long long v13 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v9);
  *(std::error_code *)(a1 + 16) = v9.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v5 = v11;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = a1 + 40;
  uint64_t v7 = v12;
  *(void *)(a1 + 48) = v12;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    uint64_t v5 = 0;
    uint64_t v10 = &v11;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v6;
  }
  *(_OWORD *)(a1 + 56) = v13;
  long long v13 = 0uLL;
  v9.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v5);
  return MEMORY[0x192FA3C30](&v9);
}

void sub_18DA9B3CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::StringUtils::join<char [34]>(std::string *a1, const char *a2)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v6);
  size_t v4 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v6, (uint64_t)a2, v4);
  std::stringbuf::str[abi:fe180100]((uint64_t)v7, a1);
  uint64_t v6 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v7[-1] + *(void *)(v6 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v7[0] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FA3FD0](&v9);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:fe180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      if (*(char *)(v2 + 63) < 0)
      {
        operator delete(*(void **)(v2 + 40));
        if ((*(char *)(v2 + 39) & 0x80000000) == 0) {
          goto LABEL_5;
        }
      }
      else if ((*(char *)(v2 + 39) & 0x80000000) == 0)
      {
        goto LABEL_5;
      }
      operator delete(*(void **)(v2 + 16));
    }
LABEL_5:
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t std::__function::__func<AMSCore::HTTPCacheDataAccessObject::getCachedReponse(std::string const&,AMSCore::HTTPRequest const&)::$_0,std::allocator<AMSCore::HTTPCacheDataAccessObject::getCachedReponse(std::string const&,AMSCore::HTTPRequest const&)::$_0>,BOOL ()(std::map<std::string,AMSCore::Any> &&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDCA5670;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMSCore::HTTPCacheDataAccessObject::getCachedReponse(std::string const&,AMSCore::HTTPRequest const&)::$_0,std::allocator<AMSCore::HTTPCacheDataAccessObject::getCachedReponse(std::string const&,AMSCore::HTTPRequest const&)::$_0>,BOOL ()(std::map<std::string,AMSCore::Any> &&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EDCA5670;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMSCore::HTTPCacheDataAccessObject::getCachedReponse(std::string const&,AMSCore::HTTPRequest const&)::$_0,std::allocator<AMSCore::HTTPCacheDataAccessObject::getCachedReponse(std::string const&,AMSCore::HTTPRequest const&)::$_0>,BOOL ()(std::map<std::string,AMSCore::Any> &&)>::~__func()
{
}

void AMSCore::HTTPCacheDataAccessObject::~HTTPCacheDataAccessObject(AMSCore::HTTPCacheDataAccessObject *this)
{
  AMSCore::HTTPCacheDataAccessObject::~HTTPCacheDataAccessObject(this);
  JUMPOUT(0x192FA4080);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  AMSCore::HTTPCacheDataAccessObject *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  AMSCore::HTTPCacheDataAccessObject *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  uint64_t v13;
  AMSCore::HTTPCacheDataAccessObject *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;

  *(void *)this = &unk_1EDC826A0;
  uint64_t v2 = (char *)this + 416;
  uint64_t v3 = (char *)*((void *)this + 55);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  size_t v4 = *((void *)this + 47);
  *((void *)this + 47) = 0;
  if (v4)
  {
    uint64_t v16 = v4;
    uint64_t v5 = *((void *)this + 51);
    if (!v5) {
      std::__throw_bad_function_call[abi:fe180100]();
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 48))(v5, &v16);
  }
  uint64_t v6 = (AMSCore::HTTPCacheDataAccessObject *)*((void *)this + 51);
  if (v6 == (AMSCore::HTTPCacheDataAccessObject *)((char *)this + 384))
  {
    (*(void (**)(char *))(*((void *)this + 48) + 32))((char *)this + 384);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 46);
    if (!v7) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  if (v6) {
    (*(void (**)(AMSCore::HTTPCacheDataAccessObject *))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v7)
  {
LABEL_14:
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
LABEL_16:
  char v8 = *((void *)this + 40);
  *((void *)this + 40) = 0;
  if (v8)
  {
    uint64_t v16 = v8;
    uint64_t v9 = *((void *)this + 44);
    if (!v9) {
      std::__throw_bad_function_call[abi:fe180100]();
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 48))(v9, &v16);
  }
  uint64_t v10 = (AMSCore::HTTPCacheDataAccessObject *)*((void *)this + 44);
  if (v10 == (AMSCore::HTTPCacheDataAccessObject *)((char *)this + 328))
  {
    (*(void (**)(char *))(*((void *)this + 41) + 32))((char *)this + 328);
    uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 39);
    if (!v11) {
      goto LABEL_27;
    }
    goto LABEL_25;
  }
  if (v10) {
    (*(void (**)(AMSCore::HTTPCacheDataAccessObject *))(*(void *)v10 + 40))(v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v11)
  {
LABEL_25:
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
LABEL_27:
  uint64_t v12 = *((void *)this + 33);
  *((void *)this + 33) = 0;
  if (v12)
  {
    uint64_t v16 = v12;
    long long v13 = *((void *)this + 37);
    if (!v13) {
      std::__throw_bad_function_call[abi:fe180100]();
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v13 + 48))(v13, &v16);
  }
  uint64_t v14 = (AMSCore::HTTPCacheDataAccessObject *)*((void *)this + 37);
  if (v14 == (AMSCore::HTTPCacheDataAccessObject *)((char *)this + 272))
  {
    (*(void (**)(char *))(*((void *)this + 34) + 32))((char *)this + 272);
    std::error_code v15 = (std::__shared_weak_count *)*((void *)this + 32);
    if (!v15) {
      goto LABEL_38;
    }
    goto LABEL_36;
  }
  if (v14) {
    (*(void (**)(AMSCore::HTTPCacheDataAccessObject *))(*(void *)v14 + 40))(v14);
  }
  std::error_code v15 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v15)
  {
LABEL_36:
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
LABEL_38:
  AMSCore::SQLiteDatabase::~SQLiteDatabase((AMSCore::HTTPCacheDataAccessObject *)((char *)this + 8));
}

void AMSCore::Log::error<char const(&)[49],char const*>(const char **a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v10);
  uint64_t v2 = v10;
  if (*(unsigned __int8 *)(v10 + 8) <= 4u)
  {
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v12);
    uint64_t v3 = *(void *)(v12[0] - 24);
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v12, (uint64_t)"Failed to delete legacy HTTPCache file. error = ", 48);
    size_t v4 = *a1;
    size_t v5 = strlen(v4);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v12, (uint64_t)v4, v5);
    uint64_t v6 = v12[6];
    uint64_t v7 = (char *)v12 + *(void *)(v12[0] - 24);
    if ((v7[32] & 5) != 0)
    {
      uint64_t v8 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v7 + 5) + 32))(&rep);
      uint64_t v8 = v19;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v16 = 4;
    uint64_t v17 = v6;
    uint64_t v18 = v8;
    (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v2 + 16) + 16))(*(void *)(v2 + 16), "data", 4, &rep);
    v12[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v12[1] = MEMORY[0x1E4FBA470] + 16;
    if (v13 < 0) {
      operator delete((void *)v12[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x192FA3FD0](&v14);
  }
  uint64_t v9 = v11;
  if (v11)
  {
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_18DA9BD18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::expected<std::unique_ptr<AMSCore::IHTTPCacheDataAccessObject>,AMSCore::Error>::expected[abi:fe180100]<AMSCore::Error>(std::runtime_error *a1, uint64_t a2)
{
  uint64_t v3 = std::runtime_error::runtime_error(a1, (const std::runtime_error *)a2);
  v3->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA448] + 16);
  v3[1] = *(std::runtime_error *)(a2 + 16);
  v3->__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  v3[2].__vftable = *(std::runtime_error_vtbl **)(a2 + 32);
  size_t v4 = (void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 40);
  v3[2].__imp_.__imp_ = (const char *)v5;
  p_char imp = (std::runtime_error_vtbl *)&v3[2].__imp_;
  uint64_t v7 = *(std::runtime_error_vtbl **)(a2 + 48);
  v3[3].__vftable = v7;
  if (v7)
  {
    *(void *)(v5 + 16) = p_imp;
    *(void *)(a2 + 32) = v4;
    *size_t v4 = 0;
    *(void *)(a2 + 48) = 0;
  }
  else
  {
    v3[2].__vftable = p_imp;
  }
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)((char *)v3 + 56) = result;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  LOBYTE(v3[4].__imp_.__imp_) = 0;
  return result;
}

void AMSCore::Error::Error<char [32]>(uint64_t a1, uint64_t a2, uint64_t a3, const std::error_category *a4, const char *a5)
{
  AMSCore::StringUtils::join<char [32]>(&__what_arg, a5);
  *(void *)&v9.__val_ = a3;
  v9.__cat_ = a4;
  std::system_error::system_error((std::system_error *)a1, v9, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_1EDC827D8;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)(a1 + 48) = 0;
  operator new();
}

void sub_18DA9BF68(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v2, *(unsigned int **)(v1 + 40));
  MEMORY[0x192FA3C30](v1);
  _Unwind_Resume(a1);
}

void sub_18DA9BFB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::StringUtils::join<char [32]>(std::string *a1, const char *a2)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v6);
  size_t v4 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v6, (uint64_t)a2, v4);
  std::stringbuf::str[abi:fe180100]((uint64_t)v7, a1);
  uint64_t v6 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v7[-1] + *(void *)(v6 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v7[0] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FA3FD0](&v9);
}

void AMSCore::Error::Error<char [18]>(uint64_t a1, uint64_t a2, uint64_t a3, const std::error_category *a4)
{
  AMSCore::StringUtils::join<char [18]>(&__what_arg, "error creating db");
  *(void *)&v8.__val_ = a3;
  v8.__cat_ = a4;
  std::system_error::system_error((std::system_error *)a1, v8, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_1EDC827D8;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)(a1 + 48) = 0;
  operator new();
}

void sub_18DA9C288(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(v2, *(unsigned int **)(v1 + 40));
  MEMORY[0x192FA3C30](v1);
  _Unwind_Resume(a1);
}

void sub_18DA9C2D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::StringUtils::join<char [18]>(std::string *a1, const char *a2)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v6);
  size_t v4 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v6, (uint64_t)a2, v4);
  std::stringbuf::str[abi:fe180100]((uint64_t)v7, a1);
  uint64_t v6 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v7[-1] + *(void *)(v6 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v7[0] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FA3FD0](&v9);
}

std::string *AMSCore::HTTPCacheDataAccessObject::defaultHasher@<X0>(AMSCore::HTTPCacheDataAccessObject *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v4 = AMSCore::HTTPRequest::CacheKey::Hasher::hash((uint64_t)this + 200, *((_DWORD *)this + 38), this);
  return std::to_string(a2, v4);
}

void AMSCore::MetricsDataAccessObject::lockEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  LOBYTE(v34[0]) = 0;
  char v35 = 0;
  int v36 = 5;
  v37[0] = (v6 + 1000 * a3) / 1000000;
  int v38 = 3;
  std::vector<AMSCore::Any>::vector[abi:fe180100](&v29, (uint64_t)v34, 2uLL);
  long long v42 = *(_OWORD *)a2;
  uint64_t v43 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  LODWORD(v44) = 5;
  std::vector<AMSCore::Any>::vector[abi:fe180100](&__p, (uint64_t)&v42, 1uLL);
  int64x2_t v33 = vdupq_n_s64(1uLL);
  uint64_t v7 = *(void *)(a1 + 368);
  if (!v7) {
    std::__throw_bad_function_call[abi:fe180100]();
  }
  (*(void (**)(void *__return_ptr))(*(void *)v7 + 48))(v31);
  char v8 = (char *)__p;
  if (__p)
  {
    uint64_t v9 = v28;
    uint64_t v10 = __p;
    if (v28 != __p)
    {
      do
      {
        uint64_t v11 = v9 - 32;
        uint64_t v12 = *((unsigned int *)v9 - 2);
        if (v12 != -1) {
          ((void (*)(int64x2_t *, char *))off_1EDCA56E0[v12])(&v33, v9 - 32);
        }
        *((_DWORD *)v9 - 2) = -1;
        v9 -= 32;
      }
      while (v11 != v8);
      uint64_t v10 = __p;
    }
    uint64_t v28 = v8;
    operator delete(v10);
  }
  if (v44 != -1) {
    ((void (*)(int64x2_t *, long long *))off_1EDCA56E0[v44])(&v33, &v42);
  }
  char v13 = (atomic_ullong *)v29;
  if (v29)
  {
    uint64_t v14 = v30;
    std::error_code v15 = v29;
    if (v30 != v29)
    {
      do
      {
        char v16 = v14 - 4;
        uint64_t v17 = *((unsigned int *)v14 - 2);
        if (v17 != -1) {
          ((void (*)(long long *, atomic_ullong *))off_1EDCA56E0[v17])(&v42, v14 - 4);
        }
        *((_DWORD *)v14 - 2) = -1;
        v14 -= 4;
      }
      while (v16 != v13);
      std::error_code v15 = v29;
    }
    long long v30 = v13;
    operator delete(v15);
  }
  if (v38 != -1) {
    ((void (*)(long long *, void *))off_1EDCA56E0[v38])(&v42, v37);
  }
  int v38 = -1;
  if (v36 != -1) {
    ((void (*)(long long *, void *))off_1EDCA56E0[v36])(&v42, v34);
  }
  if (!v32)
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v29);
    uint64_t v18 = (void **)v29;
    if (*((unsigned __int8 *)v29 + 8) <= 4u)
    {
      std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v34);
      uint64_t v19 = *(void *)(v34[0] - 24);
      {
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v34, (uint64_t)"Failed to lock event '", 22);
      int v20 = *(char *)(a2 + 23);
      if (v20 >= 0) {
        uint64_t v21 = a2;
      }
      else {
        uint64_t v21 = *(void *)a2;
      }
      if (v20 >= 0) {
        uint64_t v22 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v22 = *(void *)(a2 + 8);
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v34, v21, v22);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v34, (uint64_t)"': ", 3);
      AMSCore::operator<<(v34, (uint64_t)v31);
      uint64_t v23 = v37[2];
      long long v24 = (char *)v34 + *(void *)(v34[0] - 24);
      if ((v24[32] & 5) != 0)
      {
        uint64_t v25 = -1;
      }
      else
      {
        (*(void (**)(long long *__return_ptr))(**((void **)v24 + 5) + 32))(&v42);
        uint64_t v25 = v45;
      }
      *(std::chrono::system_clock::time_point *)&long long v42 = std::chrono::system_clock::now();
      BYTE8(v42) = 4;
      uint64_t v43 = v23;
      uint64_t v44 = v25;
      (*(void (**)(void *, const char *, uint64_t, long long *))(*v18[2] + 16))(v18[2], "metrics", 7, &v42);
      v34[0] = *MEMORY[0x1E4FBA418];
      *(void *)((char *)v34 + *(void *)(v34[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v34[1] = MEMORY[0x1E4FBA470] + 16;
      if (v40 < 0) {
        operator delete(v39);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x192FA3FD0](&v41);
    }
    uint64_t v26 = (std::__shared_weak_count *)v30;
    if (!v30 || atomic_fetch_add(v30 + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      if (v32) {
        return;
      }
      goto LABEL_42;
    }
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    if (!v32) {
LABEL_42:
    }
      (*(void (**)(void *))v31[0])(v31);
  }
}

void sub_18DA9CA14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AMSCore::MetricsDataAccessObject::getAccountsByTopic(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v49, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v49 = *(_OWORD *)a2;
    *(void *)&v49[16] = *(void *)(a2 + 16);
  }
  *(_DWORD *)&v49[24] = 5;
  std::vector<AMSCore::Any>::vector[abi:fe180100](&__p, (uint64_t)v49, 1uLL);
  uint64_t v5 = *(void *)(a1 + 208);
  if (!v5) {
    std::__throw_bad_function_call[abi:fe180100]();
  }
  (*(void (**)(std::runtime_error *__return_ptr))(*(void *)v5 + 48))(v44);
  uint64_t v6 = (char *)__p;
  if (__p)
  {
    uint64_t v7 = v47;
    char v8 = __p;
    if (v47 != __p)
    {
      do
      {
        uint64_t v9 = v7 - 32;
        uint64_t v10 = *((unsigned int *)v7 - 2);
        if (v10 != -1) {
          ((void (*)(char *, char *))off_1EDCA56E0[v10])(&v48, v7 - 32);
        }
        *((_DWORD *)v7 - 2) = -1;
        v7 -= 32;
      }
      while (v9 != v6);
      char v8 = __p;
    }
    uint64_t v47 = v6;
    operator delete(v8);
  }
  if (*(_DWORD *)&v49[24] != -1) {
    ((void (*)(char *, unsigned char *))off_1EDCA56E0[*(unsigned int *)&v49[24]])(&v48, v49);
  }
  if (v45)
  {
    uint64_t v12 = v44[0].__vftable;
    char imp = v44[0].__imp_.__imp_;
    if (v44[0].__imp_.__imp_ == (const char *)v44[0].__vftable)
    {
      char v16 = 0;
      uint64_t v17 = 0;
      uint64_t v14 = 0;
LABEL_68:
      *(void *)a3 = v14;
      *(void *)(a3 + 8) = v17;
      *(void *)(a3 + 16) = v16;
      *(unsigned char *)(a3 + 72) = 1;
    }
    else
    {
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v44[0].__imp_.__imp_ - (const char *)v44[0].__vftable) >> 3);
      if (v13 >> 60) {
        std::vector<std::string>::__throw_length_error[abi:fe180100]();
      }
      uint64_t v14 = (char *)operator new(0xAAAAAAAAAAAAAAB0 * ((v44[0].__imp_.__imp_ - (const char *)v44[0].__vftable) >> 3));
      std::error_code v15 = v14;
      char v16 = &v14[16 * v13];
      while (1)
      {
        uint64_t v18 = v12->~runtime_error;
        if ((void (__cdecl *)(std::runtime_error *__hidden))((char *)v12->~runtime_error_0 - (char *)v12->~runtime_error) != (void (__cdecl *)(std::runtime_error *__hidden))32) {
          break;
        }
        if (*((_DWORD *)v18 + 6) != -1 && *((_DWORD *)v18 + 6) != 0)
        {
          switch(*((_DWORD *)v18 + 6))
          {
            case 1u:
              unint64_t v25 = 0;
              uint64_t v26 = *(unsigned __int8 *)v18;
              goto LABEL_43;
            case 2u:
              *(void *)&double v24 = (unint64_t)*(double *)v18;
              goto LABEL_42;
            case 3u:
            case 4u:
              double v24 = *(double *)v18;
LABEL_42:
              uint64_t v26 = LOBYTE(v24);
              unint64_t v25 = *(void *)&v24 & 0xFFFFFFFFFFFFFF00;
LABEL_43:
              unint64_t v27 = v25 | v26;
              if (v15 < v16)
              {
                *(void *)std::error_code v15 = v27;
                *((void *)v15 + 1) = 1;
                goto LABEL_20;
              }
              uint64_t v28 = (v15 - v14) >> 4;
              unint64_t v29 = v28 + 1;
              if ((unint64_t)(v28 + 1) >> 60) {
                std::vector<std::string>::__throw_length_error[abi:fe180100]();
              }
              if ((v16 - v14) >> 3 > v29) {
                unint64_t v29 = (v16 - v14) >> 3;
              }
              if ((unint64_t)(v16 - v14) >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v30 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v30 = v29;
              }
              if (v30)
              {
                if (v30 >> 60) {
                  std::__throw_bad_array_new_length[abi:fe180100]();
                }
                long long v31 = (char *)operator new(16 * v30);
              }
              else
              {
                long long v31 = 0;
              }
              char v35 = (unint64_t *)&v31[16 * v28];
              *char v35 = v27;
              v35[1] = 1;
              for (uint64_t i = (char *)v35; v15 != v14; i[8] = v37)
              {
                uint64_t v36 = *((void *)v15 - 2);
                v15 -= 16;
                char v37 = v15[8];
                *((void *)i - 2) = v36;
                i -= 16;
              }
              char v16 = &v31[16 * v30];
              uint64_t v17 = (char *)(v35 + 2);
              if (v14) {
                goto LABEL_63;
              }
              goto LABEL_64;
            default:
              AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[17]>((uint64_t)v49, 2u, "Invalid row type");
              goto LABEL_70;
          }
        }
        if (v15 < v16)
        {
          *std::error_code v15 = 0;
          v15[8] = 0;
LABEL_20:
          uint64_t v17 = v15 + 16;
        }
        else
        {
          uint64_t v20 = (v15 - v14) >> 4;
          unint64_t v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 60) {
            std::vector<std::string>::__throw_length_error[abi:fe180100]();
          }
          if ((v16 - v14) >> 3 > v21) {
            unint64_t v21 = (v16 - v14) >> 3;
          }
          if ((unint64_t)(v16 - v14) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v21;
          }
          if (v22)
          {
            if (v22 >> 60) {
              std::__throw_bad_array_new_length[abi:fe180100]();
            }
            uint64_t v23 = (char *)operator new(16 * v22);
          }
          else
          {
            uint64_t v23 = 0;
          }
          uint64_t i = &v23[16 * v20];
          char v16 = &v23[16 * v22];
          *uint64_t i = 0;
          i[8] = 0;
          uint64_t v17 = i + 16;
          if (v15 == v14) {
            goto LABEL_63;
          }
          do
          {
            uint64_t v33 = *((void *)v15 - 2);
            v15 -= 16;
            char v34 = v15[8];
            *((void *)i - 2) = v33;
            i -= 16;
            i[8] = v34;
          }
          while (v15 != v14);
          if (v14) {
LABEL_63:
          }
            operator delete(v14);
LABEL_64:
          uint64_t v14 = i;
        }
        ++v12;
        std::error_code v15 = v17;
        if (v12 == (std::runtime_error_vtbl *)imp) {
          goto LABEL_68;
        }
      }
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[17]>((uint64_t)v49, 2u, "Invalid row size");
LABEL_70:
      std::runtime_error::runtime_error((std::runtime_error *)a3, (const std::runtime_error *)v49);
      *(_OWORD *)(a3 + 16) = *(_OWORD *)&v49[16];
      *(void *)a3 = &unk_1EDC827D8;
      uint64_t v41 = v51;
      *(void *)(a3 + 32) = v50;
      *(void *)(a3 + 40) = v41;
      uint64_t v42 = a3 + 40;
      uint64_t v43 = v52;
      *(void *)(a3 + 48) = v52;
      if (v43)
      {
        *(void *)(v41 + 16) = v42;
        long long v50 = &v51;
        uint64_t v51 = 0;
        uint64_t v52 = 0;
        uint64_t v41 = 0;
      }
      else
      {
        *(void *)(a3 + 32) = v42;
      }
      *(_OWORD *)(a3 + 56) = v53;
      long long v53 = 0uLL;
      *(unsigned char *)(a3 + 72) = 0;
      *(void *)uint64_t v49 = &unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v50, (unsigned int *)v41);
      MEMORY[0x192FA3C30](v49);
      if (v14) {
        operator delete(v14);
      }
    }
  }
  else
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&>((uint64_t)v49, v44);
    std::runtime_error::runtime_error((std::runtime_error *)a3, (const std::runtime_error *)v49);
    *(_OWORD *)(a3 + 16) = *(_OWORD *)&v49[16];
    *(void *)a3 = &unk_1EDC827D8;
    uint64_t v38 = v51;
    *(void *)(a3 + 32) = v50;
    *(void *)(a3 + 40) = v38;
    uint64_t v39 = a3 + 40;
    uint64_t v40 = v52;
    *(void *)(a3 + 48) = v52;
    if (v40)
    {
      *(void *)(v38 + 16) = v39;
      long long v50 = &v51;
      uint64_t v51 = 0;
      uint64_t v52 = 0;
      uint64_t v38 = 0;
    }
    else
    {
      *(void *)(a3 + 32) = v39;
    }
    *(_OWORD *)(a3 + 56) = v53;
    long long v53 = 0uLL;
    *(unsigned char *)(a3 + 72) = 0;
    *(void *)uint64_t v49 = &unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v50, (unsigned int *)v38);
    MEMORY[0x192FA3C30](v49);
  }
  if (v45)
  {
    *(void *)uint64_t v49 = v44;
    std::vector<std::vector<AMSCore::Any>>::__destroy_vector::operator()[abi:fe180100]((void ***)v49);
  }
  else
  {
    ((void (*)(std::runtime_error *))v44[0].~runtime_error)(v44);
  }
}

void sub_18DA9D0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (v23) {
    operator delete(v23);
  }
  std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&>(uint64_t a1, const std::runtime_error *a2)
{
  AMSCore::Error::Error(&v7, a2);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v7);
  *(_OWORD *)(a1 + 16) = v8;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v3 = v10;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v3;
  uint64_t v4 = a1 + 40;
  uint64_t v5 = v11;
  *(void *)(a1 + 48) = v11;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    uint64_t v9 = &v10;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v3 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v4;
  }
  *(_OWORD *)(a1 + 56) = v12;
  long long v12 = 0uLL;
  v7.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v9, (unsigned int *)v3);
  return MEMORY[0x192FA3C30](&v7);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[17]>(uint64_t a1, unsigned int a2, const char *a3)
{
  uint64_t v4 = a2;
  AMSCore::StringUtils::join<char [17]>(&__what_arg, a3);
  *(void *)&v15.__val_ = v4;
  v15.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v9, v15, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  v9.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  uint64_t v10 = &v11;
  long long v13 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v9);
  *(std::error_code *)(a1 + 16) = v9.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v5 = v11;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = a1 + 40;
  uint64_t v7 = v12;
  *(void *)(a1 + 48) = v12;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    uint64_t v5 = 0;
    uint64_t v10 = &v11;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v6;
  }
  *(_OWORD *)(a1 + 56) = v13;
  long long v13 = 0uLL;
  v9.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v5);
  return MEMORY[0x192FA3C30](&v9);
}

void sub_18DA9D34C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<AMSCore::Any>>::__destroy_vector::operator()[abi:fe180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = (void **)v1[1];
      do
      {
        std::system_error v9 = (char *)*(v6 - 3);
        v6 -= 3;
        long long v8 = v9;
        if (v9)
        {
          uint64_t v10 = (char *)*(v4 - 2);
          uint64_t v7 = v8;
          if (v10 != v8)
          {
            do
            {
              uint64_t v11 = v10 - 32;
              uint64_t v12 = *((unsigned int *)v10 - 2);
              if (v12 != -1) {
                ((void (*)(char *, char *))off_1EDCA56E0[v12])(&v13, v10 - 32);
              }
              *((_DWORD *)v10 - 2) = -1;
              v10 -= 32;
            }
            while (v11 != v8);
            uint64_t v7 = *v6;
          }
          *(v4 - 2) = v8;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v3 = (void **)a1;
    std::vector<std::vector<AMSCore::Any>>::__destroy_vector::operator()[abi:fe180100](&v3);
  }
  else
  {
    (**(void (***)(uint64_t))a1)(a1);
  }
  return a1;
}

uint64_t AMSCore::StringUtils::join<char [17]>(std::string *a1, const char *a2)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v6);
  size_t v4 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v6, (uint64_t)a2, v4);
  std::stringbuf::str[abi:fe180100]((uint64_t)v7, a1);
  uint64_t v6 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v7[-1] + *(void *)(v6 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v7[0] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FA3FD0](&v9);
}

void AMSCore::MetricsDataAccessObject::countEvents(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v14 = *(std::string *)a2;
  }
  int v15 = 5;
  v16[0] = (v4 - 300000000) / 1000000;
  int v17 = 3;
  std::vector<AMSCore::Any>::vector[abi:fe180100](&__p, (uint64_t)&v14, 2uLL);
  uint64_t v5 = *(void *)(a1 + 336);
  if (!v5) {
    std::__throw_bad_function_call[abi:fe180100]();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v5 + 48))(v5, &__p);
  uint64_t v6 = (char *)__p;
  if (__p)
  {
    uint64_t v7 = v12;
    char v8 = __p;
    if (v12 != __p)
    {
      do
      {
        uint64_t v9 = v7 - 32;
        uint64_t v10 = *((unsigned int *)v7 - 2);
        if (v10 != -1) {
          ((void (*)(char *, char *))off_1EDCA56E0[v10])(&v13, v7 - 32);
        }
        *((_DWORD *)v7 - 2) = -1;
        v7 -= 32;
      }
      while (v9 != v6);
      char v8 = __p;
    }
    uint64_t v12 = v6;
    operator delete(v8);
  }
  if (v17 != -1) {
    ((void (*)(char *, uint64_t *))off_1EDCA56E0[v17])(&v13, v16);
  }
  int v17 = -1;
  if (v15 != -1) {
    ((void (*)(char *, std::string *))off_1EDCA56E0[v15])(&v13, &v14);
  }
}

void sub_18DA9D804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AMSCore::MetricsDataAccessObject::lockAndGetEvents(uint64_t a1@<X0>, uint64_t a2@<X1>, std::runtime_error_vtbl *a3@<X2>, char a4@<W3>, std::runtime_error_vtbl *a5@<X4>, uint64_t a6@<X8>)
{
  v119[19] = *MEMORY[0x1E4F143B8];
  memset(out, 0, sizeof(out));
  uuid_generate_random(out);
  uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  char v13 = (char *)operator new(0x28uLL);
  *(void *)(v13 + 31) = 0;
  *(_OWORD *)char v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  uuid_unparse_lower(out, v13 + 1);
  *char v13 = 123;
  v13[37] = 125;
  v106.__vftable = (std::system_error_vtbl *)v13;
  *(_OWORD *)&v106.__imp_.__imp_ = xmmword_18DDE9B00;
  LODWORD(v106.__ec_.__cat_) = 5;
  uint64_t v107 = v12 / 1000000;
  LODWORD(v110) = 3;
  std::vector<AMSCore::Any>::vector[abi:fe180100](&__what_arg, (uint64_t)&v106, 2uLL);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v111, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v111 = *(_OWORD *)a2;
    *(void *)&v111[16] = *(void *)(a2 + 16);
  }
  *(_DWORD *)&v111[24] = 5;
  LODWORD(v115) = 0;
  if (a4)
  {
    v100.__vftable = a3;
    LODWORD(v101.__cat_) = 4;
    AMSCore::Any::operator=((uint64_t)&v112, (uint64_t)&v100);
    if (LODWORD(v101.__cat_) != -1) {
      ((void (*)(char *, std::runtime_error *))off_1EDCA56E0[LODWORD(v101.__cat_)])(&v97, &v100);
    }
  }
  *((void *)&v115 + 1) = (v12 - 300000000) / 1000000;
  int v117 = 3;
  std::vector<AMSCore::Any>::vector[abi:fe180100](__p, (uint64_t)v111, 3uLL);
  v100.__vftable = a5;
  v100.__imp_.__imp_ = (const char *)1;
  uint64_t v14 = *(void *)(a1 + 272);
  if (!v14) {
    std::__throw_bad_function_call[abi:fe180100]();
  }
  (*(void (**)(void *__return_ptr))(*(void *)v14 + 48))(v85);
  int v15 = (char *)__p[0];
  if (__p[0])
  {
    char v16 = (char *)__p[1];
    int v17 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        uint64_t v18 = v16 - 32;
        uint64_t v19 = *((unsigned int *)v16 - 2);
        if (v19 != -1) {
          ((void (*)(std::runtime_error *, char *))off_1EDCA56E0[v19])(&v100, v16 - 32);
        }
        *((_DWORD *)v16 - 2) = -1;
        v16 -= 32;
      }
      while (v18 != v15);
      int v17 = __p[0];
    }
    __p[1] = v15;
    operator delete(v17);
  }
  if (v117 != -1) {
    ((void (*)(std::runtime_error *, char *))off_1EDCA56E0[v117])(&v100, (char *)&v115 + 8);
  }
  int v117 = -1;
  if (v115 != -1) {
    ((void (*)(std::runtime_error *, unsigned int ***))off_1EDCA56E0[v115])(&v100, &v112);
  }
  LODWORD(v115) = -1;
  if (*(_DWORD *)&v111[24] != -1) {
    ((void (*)(std::runtime_error *, unsigned char *))off_1EDCA56E0[*(unsigned int *)&v111[24]])(&v100, v111);
  }
  std::string::size_type v20 = __what_arg.__r_.__value_.__r.__words[0];
  if (__what_arg.__r_.__value_.__r.__words[0])
  {
    std::string::size_type size = __what_arg.__r_.__value_.__l.__size_;
    unint64_t v22 = (void *)__what_arg.__r_.__value_.__r.__words[0];
    if (__what_arg.__r_.__value_.__l.__size_ != __what_arg.__r_.__value_.__r.__words[0])
    {
      do
      {
        std::string::size_type v23 = size - 32;
        uint64_t v24 = *(unsigned int *)(size - 8);
        if (v24 != -1) {
          ((void (*)(unsigned char *, std::string::size_type))off_1EDCA56E0[v24])(v111, size - 32);
        }
        *(_DWORD *)(size - 8) = -1;
        size -= 32;
      }
      while (v23 != v20);
      unint64_t v22 = (void *)__what_arg.__r_.__value_.__r.__words[0];
    }
    __what_arg.__r_.__value_.__l.__size_ = v20;
    operator delete(v22);
  }
  if (v110 != -1) {
    ((void (*)(unsigned char *, uint64_t *))off_1EDCA56E0[v110])(v111, &v107);
  }
  LODWORD(v110) = -1;
  if (LODWORD(v106.__ec_.__cat_) != -1) {
    ((void (*)(unsigned char *, std::system_error *))off_1EDCA56E0[LODWORD(v106.__ec_.__cat_)])(v111, &v106);
  }
  if ((_BYTE)v86)
  {
    unint64_t v25 = (char *)operator new(0x28uLL);
    *(void *)(v25 + 31) = 0;
    *(_OWORD *)unint64_t v25 = 0u;
    *((_OWORD *)v25 + 1) = 0u;
    uuid_unparse_lower(out, v25 + 1);
    *unint64_t v25 = 123;
    v25[37] = 125;
    *(void *)uint64_t v111 = v25;
    *(_OWORD *)&v111[8] = xmmword_18DDE9B00;
    *(_DWORD *)&v111[24] = 5;
    std::vector<AMSCore::Any>::vector[abi:fe180100](&v106, (uint64_t)v111, 1uLL);
    v100.__vftable = 0;
    v100.__imp_.__imp_ = 0;
    uint64_t v26 = *(void *)(a1 + 240);
    if (!v26) {
      std::__throw_bad_function_call[abi:fe180100]();
    }
    (*(void (**)(std::runtime_error *__return_ptr))(*(void *)v26 + 48))(&v88);
    unint64_t v27 = v106.__vftable;
    if (v106.__vftable)
    {
      char imp = v106.__imp_.__imp_;
      unint64_t v29 = v106.__vftable;
      if (v106.__imp_.__imp_ != (const char *)v106.__vftable)
      {
        do
        {
          unint64_t v30 = (std::system_error_vtbl *)(imp - 32);
          uint64_t v31 = *((unsigned int *)imp - 2);
          if (v31 != -1) {
            ((void (*)(std::runtime_error *, const char *))off_1EDCA56E0[v31])(&v100, imp - 32);
          }
          *((_DWORD *)imp - 2) = -1;
          imp -= 32;
        }
        while (v30 != v27);
        unint64_t v29 = v106.__vftable;
      }
      v106.__imp_.__imp_ = (const char *)v27;
      operator delete(v29);
    }
    if (*(_DWORD *)&v111[24] != -1) {
      ((void (*)(std::runtime_error *, unsigned char *))off_1EDCA56E0[*(unsigned int *)&v111[24]])(&v100, v111);
    }
  }
  else
  {
    std::runtime_error::runtime_error((std::runtime_error *)v111, (const std::runtime_error *)v85);
    *(_OWORD *)&v111[16] = *(_OWORD *)&v85[2];
    *(void *)uint64_t v111 = &unk_1EDC827D8;
    char v112 = (unsigned int **)v85[4];
    std::runtime_error v113 = (unsigned int *)v85[5];
    uint64_t v114 = v85[6];
    if (v85[6])
    {
      *(void *)(v85[5] + 16) = &v113;
      v85[4] = &v85[5];
      v85[5] = 0;
      v85[6] = 0;
    }
    else
    {
      char v112 = &v113;
    }
    long long v115 = *(_OWORD *)&v85[7];
    v85[7] = 0;
    v85[8] = 0;
    LOBYTE(v116) = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v106, (uint64_t)v111);
    std::runtime_error::runtime_error(&v88, &v106);
    std::error_code ec = v106.__ec_;
    char v32 = (unsigned int *)v108;
    v88.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    long long v90 = (unsigned int **)v107;
    uint64_t v91 = v108;
    uint64_t v92 = v109;
    if (v109)
    {
      *(void *)(v108 + 16) = &v91;
      uint64_t v107 = (uint64_t)&v108;
      uint64_t v108 = 0;
      uint64_t v109 = 0;
      char v32 = 0;
    }
    else
    {
      long long v90 = (unsigned int **)&v91;
    }
    long long v93 = v110;
    long long v110 = 0uLL;
    char v94 = 0;
    v106.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v107, v32);
    MEMORY[0x192FA3C30](&v106);
    if ((_BYTE)v116)
    {
      *(void *)uint64_t v111 = &unk_1EDC827D8;
      uint64_t v33 = (std::__shared_weak_count *)*((void *)&v115 + 1);
      if (*((void *)&v115 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v115 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v112, v113);
      MEMORY[0x192FA3C30](v111);
    }
  }
  if (!(_BYTE)v86)
  {
    (*(void (**)(void *))v85[0])(v85);
    if (v94) {
      goto LABEL_59;
    }
LABEL_143:
    std::runtime_error::runtime_error((std::runtime_error *)v111, &v88);
    *(std::error_code *)&v111[16] = ec;
    *(void *)uint64_t v111 = &unk_1EDC827D8;
    char v112 = v90;
    std::runtime_error v113 = (unsigned int *)v91;
    uint64_t v114 = v92;
    if (v92)
    {
      *(void *)(v91 + 16) = &v113;
      long long v90 = (unsigned int **)&v91;
      uint64_t v91 = 0;
      uint64_t v92 = 0;
    }
    else
    {
      char v112 = &v113;
    }
    long long v115 = v93;
    long long v93 = 0uLL;
    LOBYTE(v116) = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v85, (uint64_t)v111);
    std::runtime_error::runtime_error((std::runtime_error *)a6, (const std::runtime_error *)v85);
    *(_OWORD *)(a6 + 16) = *(_OWORD *)&v85[2];
    *(void *)a6 = &unk_1EDC827D8;
    uint64_t v74 = v85[5];
    *(void *)(a6 + 32) = v85[4];
    *(void *)(a6 + 40) = v74;
    uint64_t v75 = a6 + 40;
    uint64_t v76 = v85[6];
    *(void *)(a6 + 48) = v85[6];
    if (v76)
    {
      *(void *)(v74 + 16) = v75;
      v85[4] = &v85[5];
      v85[5] = 0;
      v85[6] = 0;
      uint64_t v74 = 0;
    }
    else
    {
      *(void *)(a6 + 32) = v75;
    }
    *(_OWORD *)(a6 + 56) = *(_OWORD *)&v85[7];
    v85[7] = 0;
    v85[8] = 0;
    *(unsigned char *)(a6 + 72) = 0;
    v85[0] = &unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v85[4], (unsigned int *)v74);
    MEMORY[0x192FA3C30](v85);
    if ((_BYTE)v116)
    {
      *(void *)uint64_t v111 = &unk_1EDC827D8;
      uint64_t v77 = (std::__shared_weak_count *)*((void *)&v115 + 1);
      if (*((void *)&v115 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v115 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v112, v113);
      MEMORY[0x192FA3C30](v111);
    }
LABEL_165:
    if (!v94) {
      goto LABEL_141;
    }
    goto LABEL_166;
  }
  if (!v94) {
    goto LABEL_143;
  }
LABEL_59:
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v96 = 0;
  std::vector<AMSCore::IMetricsDataAccessObject::Event>::reserve((uint64_t)__p, 0xAAAAAAAAAAAAAAABLL * ((v88.__imp_.__imp_ - (const char *)v88.__vftable) >> 3));
  if (!v94)
  {
LABEL_171:
    __break(1u);
    return;
  }
  char v34 = v88.__vftable;
  char v82 = v88.__imp_.__imp_;
  if (v88.__vftable == (std::runtime_error_vtbl *)v88.__imp_.__imp_)
  {
LABEL_140:
    int v70 = v96;
    long long v71 = *(_OWORD *)__p;
    *(_OWORD *)a6 = *(_OWORD *)out;
    *(_OWORD *)(a6 + 16) = v71;
    *(void *)(a6 + 32) = v70;
    *(unsigned char *)(a6 + 72) = 1;
    if (!v94) {
      goto LABEL_141;
    }
    goto LABEL_166;
  }
  uint64_t v78 = a6 + 40;
  uint64_t v79 = (_OWORD *)(a6 + 16);
  uint64_t v80 = *(void *)(MEMORY[0x1E4FBA418] + 24);
  uint64_t v81 = *MEMORY[0x1E4FBA418];
  while (1)
  {
    uint64_t v35 = a6;
    long long v83 = *(_OWORD *)&v34->~runtime_error;
    long long v36 = v83;
    what = v34->what;
    v34->~runtime_error = 0;
    v34->~runtime_error_0 = 0;
    v34->what = 0;
    char v37 = (unsigned __int8 *)*((void *)&v36 + 1);
    uint64_t v38 = (unsigned __int8 *)v36;
    if (*((void *)&v36 + 1) - (void)v36 != 128)
    {
      std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v111);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v111, (uint64_t)"Invalid row size: ", 18);
      std::stringbuf::str[abi:fe180100]((uint64_t)&v111[8], &__what_arg);
      *(void *)uint64_t v111 = v81;
      *(void *)&v111[*(void *)(v81 - 24)] = v80;
      *(void *)&v111[8] = MEMORY[0x1E4FBA470] + 16;
      if (v118 < 0) {
        operator delete(v116);
      }
LABEL_89:
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x192FA3FD0](v119);
      *(void *)&v120.__val_ = 2;
      v120.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
      std::system_error::system_error(&v106, v120, &__what_arg);
      if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__what_arg.__r_.__value_.__l.__data_);
      }
      uint64_t v108 = 0;
      uint64_t v109 = 0;
      v106.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
      uint64_t v107 = (uint64_t)&v108;
      long long v110 = 0uLL;
      std::runtime_error::runtime_error(&v100, &v106);
      std::error_code v101 = v106.__ec_;
      uint64_t v46 = (unsigned int *)v108;
      v100.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      long long v102 = (uint64_t *)v107;
      uint64_t v103 = v108;
      uint64_t v104 = v109;
      if (v109)
      {
        *(void *)(v108 + 16) = &v103;
        uint64_t v46 = 0;
        uint64_t v107 = (uint64_t)&v108;
        uint64_t v108 = 0;
        uint64_t v109 = 0;
      }
      else
      {
        long long v102 = &v103;
      }
      long long v105 = v110;
      long long v110 = 0uLL;
      v106.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v107, v46);
      MEMORY[0x192FA3C30](&v106);
      std::runtime_error::runtime_error((std::runtime_error *)v85, &v100);
      *(std::error_code *)&v85[2] = v101;
      uint64_t v47 = (unsigned int *)v103;
      v85[0] = &unk_1EDC827D8;
      v85[4] = v102;
      v85[5] = v103;
      v85[6] = v104;
      if (v104)
      {
        *(void *)(v103 + 16) = &v85[5];
        uint64_t v47 = 0;
        long long v102 = &v103;
        uint64_t v103 = 0;
        uint64_t v104 = 0;
      }
      else
      {
        v85[4] = &v85[5];
      }
      *(_OWORD *)&v85[7] = v105;
      long long v105 = 0uLL;
      unsigned __int8 v87 = 0;
      v100.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v102, v47);
      char v48 = &v100;
LABEL_98:
      MEMORY[0x192FA3C30](v48);
      if (!v38) {
        goto LABEL_106;
      }
LABEL_99:
      if (v37 != v38)
      {
        do
        {
          uint64_t v49 = v37 - 32;
          uint64_t v50 = *((unsigned int *)v37 - 2);
          if (v50 != -1) {
            ((void (*)(unsigned char *, unsigned __int8 *))off_1EDCA56E0[v50])(v111, v37 - 32);
          }
          *((_DWORD *)v37 - 2) = -1;
          v37 -= 32;
        }
        while (v49 != v38);
        char v37 = (unsigned __int8 *)v83;
      }
      *((void *)&v83 + 1) = v38;
      operator delete(v37);
      goto LABEL_106;
    }
    if (*(_DWORD *)(v36 + 24) == 5) {
      uint64_t v39 = (uint64_t *)v36;
    }
    else {
      uint64_t v39 = 0;
    }
    if (*(_DWORD *)(v36 + 24) != 5)
    {
      if (*((void *)&v36 + 1) == (void)v36) {
        goto LABEL_171;
      }
      std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v111);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v111, (uint64_t)"Db contained invalid identifier: ", 33);
      std::stringbuf::str[abi:fe180100]((uint64_t)&v111[8], &__what_arg);
      *(void *)uint64_t v111 = v81;
      *(void *)&v111[*(void *)(v81 - 24)] = v80;
      *(void *)&v111[8] = MEMORY[0x1E4FBA470] + 16;
      if (v118 < 0) {
        operator delete(v116);
      }
      goto LABEL_89;
    }
    if (*(_DWORD *)(v36 + 56) == 5) {
      uint64_t v40 = (uint64_t *)(v36 + 32);
    }
    else {
      uint64_t v40 = 0;
    }
    if (*(_DWORD *)(v36 + 56) != 5)
    {
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[40],AMSCore::Any &>((uint64_t)v111, 2u, "Db contained invalid or missing topic: ", (unsigned __int8 *)(v36 + 32));
LABEL_129:
      std::runtime_error::runtime_error((std::runtime_error *)v85, (const std::runtime_error *)v111);
      *(_OWORD *)&v85[2] = *(_OWORD *)&v111[16];
      char v59 = v113;
      v85[0] = &unk_1EDC827D8;
      v85[4] = v112;
      v85[5] = v113;
      v85[6] = v114;
      if (v114)
      {
        *((void *)v113 + 2) = &v85[5];
        char v59 = 0;
        char v112 = &v113;
        std::runtime_error v113 = 0;
        uint64_t v114 = 0;
      }
      else
      {
        v85[4] = &v85[5];
      }
      *(_OWORD *)&v85[7] = v115;
      long long v115 = 0uLL;
      unsigned __int8 v87 = 0;
      *(void *)uint64_t v111 = &unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v112, v59);
      char v48 = (std::runtime_error *)v111;
      goto LABEL_98;
    }
    int v41 = *(_DWORD *)(v36 + 88);
    if (v41 == -1) {
      unsigned __int8 v42 = 0;
    }
    else {
      unsigned __int8 v42 = *(_DWORD *)(v36 + 88);
    }
    if (v42 != 6 && v42 != 5)
    {
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[40],AMSCore::Any &>((uint64_t)v111, 2u, "Db contained invalid or missing event: ", (unsigned __int8 *)(v36 + 64));
      goto LABEL_129;
    }
    if (v41 == v42) {
      uint64_t v43 = (uint64_t *)(v36 + 64);
    }
    else {
      uint64_t v43 = 0;
    }
    int v44 = *(_DWORD *)(v36 + 120);
    if (v44 == -1) {
      LOBYTE(v44) = 0;
    }
    switch((char)v44)
    {
      case 1:
        unint64_t v62 = 0;
        uint64_t v60 = *(unsigned __int8 *)(v36 + 96);
        goto LABEL_137;
      case 2:
        unint64_t v45 = (unint64_t)*(double *)(v36 + 96);
        goto LABEL_136;
      case 3:
      case 4:
        unint64_t v45 = *(void *)(v36 + 96);
LABEL_136:
        uint64_t v60 = v45;
        unint64_t v62 = v45 & 0xFFFFFFFFFFFFFF00;
LABEL_137:
        char v61 = 1;
        break;
      default:
        uint64_t v60 = 0;
        char v61 = 0;
        unint64_t v62 = 0;
        break;
    }
    unint64_t v63 = v62 | v60;
    uint64_t v64 = *v40;
    *(void *)uint64_t v111 = v40[1];
    *(void *)&v111[7] = *(uint64_t *)((char *)v40 + 15);
    char v65 = *((unsigned char *)v40 + 23);
    v40[1] = 0;
    v40[2] = 0;
    *uint64_t v40 = 0;
    uint64_t v66 = *v39;
    v106.__vftable = (std::system_error_vtbl *)v39[1];
    *(std::system_error_vtbl **)((char *)&v106.__vftable + 7) = *(std::system_error_vtbl **)((char *)v39 + 15);
    char v67 = *((unsigned char *)v39 + 23);
    v39[1] = 0;
    v39[2] = 0;
    *uint64_t v39 = 0;
    uint64_t v68 = *v43;
    char v69 = (std::runtime_error_vtbl *)v43[1];
    *(std::runtime_error_vtbl **)((char *)&v100.__vftable + 7) = *(std::runtime_error_vtbl **)((char *)v43 + 15);
    v100.__vftable = v69;
    LOBYTE(v69) = *((unsigned char *)v43 + 23);
    v43[1] = 0;
    v43[2] = 0;
    *uint64_t v43 = 0;
    v85[0] = v64;
    *(void *)((char *)&v85[1] + 7) = *(void *)&v111[7];
    v85[1] = *(void *)v111;
    HIBYTE(v85[2]) = v65;
    v85[3] = v66;
    *(void *)((char *)&v85[4] + 7) = *(std::system_error_vtbl **)((char *)&v106.__vftable + 7);
    v85[4] = v106.__vftable;
    HIBYTE(v85[5]) = v67;
    v85[6] = v68;
    *(void *)((char *)&v85[7] + 7) = *(std::runtime_error_vtbl **)((char *)&v100.__vftable + 7);
    v85[7] = v100.__vftable;
    HIBYTE(v85[8]) = (_BYTE)v69;
    *(void *)&long long v86 = v63;
    BYTE8(v86) = v61;
    unsigned __int8 v87 = 1;
    if ((void)v36) {
      goto LABEL_99;
    }
LABEL_106:
    int v51 = v87;
    if (v87)
    {
      uint64_t v52 = (char *)__p[1];
      a6 = v35;
      if (__p[1] >= v96)
      {
        int v56 = std::vector<AMSCore::IMetricsDataAccessObject::Event>::__emplace_back_slow_path<AMSCore::IMetricsDataAccessObject::Event>(__p, (uint64_t)v85);
      }
      else
      {
        long long v53 = *(_OWORD *)v85;
        *((void *)__p[1] + 2) = v85[2];
        *(_OWORD *)uint64_t v52 = v53;
        memset(v85, 0, 24);
        uint64_t v54 = v85[5];
        *(_OWORD *)(v52 + 24) = *(_OWORD *)&v85[3];
        *((void *)v52 + 5) = v54;
        memset(&v85[3], 0, 24);
        long long v55 = *(_OWORD *)&v85[6];
        *((void *)v52 + 8) = v85[8];
        *((_OWORD *)v52 + 3) = v55;
        memset(&v85[6], 0, 24);
        *(_OWORD *)(v52 + 72) = v86;
        int v56 = v52 + 88;
      }
      __p[1] = v56;
      if (v87) {
        goto LABEL_113;
      }
    }
    else
    {
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&>((uint64_t)v111, (const std::runtime_error *)v85);
      a6 = v35;
      std::runtime_error::runtime_error((std::runtime_error *)v35, (const std::runtime_error *)v111);
      *uint64_t v79 = *(_OWORD *)&v111[16];
      *(void *)uint64_t v35 = &unk_1EDC827D8;
      uint64_t v57 = v113;
      *(void *)(v35 + 32) = v112;
      *(void *)(v35 + 40) = v57;
      uint64_t v58 = v114;
      *(void *)(v35 + 48) = v114;
      if (v58)
      {
        *((void *)v57 + 2) = v78;
        uint64_t v57 = 0;
        char v112 = &v113;
        std::runtime_error v113 = 0;
        uint64_t v114 = 0;
      }
      else
      {
        *(void *)(v35 + 32) = v78;
      }
      *(_OWORD *)(v35 + 56) = v115;
      long long v115 = 0uLL;
      *(unsigned char *)(v35 + 72) = 0;
      *(void *)uint64_t v111 = &unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v112, v57);
      MEMORY[0x192FA3C30](v111);
      if (v87)
      {
LABEL_113:
        if (SHIBYTE(v85[8]) < 0)
        {
          operator delete((void *)v85[6]);
          if ((SHIBYTE(v85[5]) & 0x80000000) == 0) {
            goto LABEL_115;
          }
        }
        else if ((SHIBYTE(v85[5]) & 0x80000000) == 0)
        {
LABEL_115:
          if (SHIBYTE(v85[2]) < 0) {
            goto LABEL_120;
          }
LABEL_116:
          if (!v51) {
            break;
          }
          goto LABEL_125;
        }
        operator delete((void *)v85[3]);
        if (SHIBYTE(v85[2]) < 0)
        {
LABEL_120:
          operator delete((void *)v85[0]);
          if (!v51) {
            break;
          }
          goto LABEL_125;
        }
        goto LABEL_116;
      }
    }
    (*(void (**)(void *))v85[0])(v85);
    if (!v51) {
      break;
    }
LABEL_125:
    if (++v34 == (std::runtime_error_vtbl *)v82) {
      goto LABEL_140;
    }
  }
  uint64_t v72 = (void **)__p[0];
  if (!__p[0]) {
    goto LABEL_165;
  }
  for (uint64_t i = (void **)__p[1]; i != v72; i -= 11)
  {
    if (*((char *)i - 17) < 0)
    {
      operator delete(*(i - 5));
      if ((*((char *)i - 41) & 0x80000000) == 0)
      {
LABEL_154:
        if ((*((char *)i - 65) & 0x80000000) == 0) {
          continue;
        }
        goto LABEL_155;
      }
    }
    else if ((*((char *)i - 41) & 0x80000000) == 0)
    {
      goto LABEL_154;
    }
    operator delete(*(i - 8));
    if ((*((char *)i - 65) & 0x80000000) == 0) {
      continue;
    }
LABEL_155:
    operator delete(*(i - 11));
  }
  operator delete(v72);
  if (!v94)
  {
LABEL_141:
    ((void (*)(std::runtime_error *))v88.~runtime_error)(&v88);
    return;
  }
LABEL_166:
  *(void *)uint64_t v111 = &v88;
  std::vector<std::vector<AMSCore::Any>>::__destroy_vector::operator()[abi:fe180100]((void ***)v111);
}

void sub_18DA9EBB0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::vector<AMSCore::IMetricsDataAccessObject::Event>::reserve(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void ***)a1;
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a2)
  {
    if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v4 = *(void ***)(a1 + 8);
    uint64_t v5 = 88 * a2;
    uint64_t v6 = (char *)operator new(88 * a2);
    uint64_t v7 = &v6[v5];
    char v8 = &v6[(char *)v4 - (char *)v2];
    if (v4 != v2)
    {
      uint64_t v9 = &v6[(char *)v4 - (char *)v2];
      do
      {
        long long v10 = *(_OWORD *)(v4 - 11);
        *((void *)v9 - 9) = *(v4 - 9);
        *(_OWORD *)(v9 - 88) = v10;
        *(v4 - 10) = 0;
        *(v4 - 9) = 0;
        *(v4 - 11) = 0;
        long long v11 = *((_OWORD *)v4 - 4);
        *((void *)v9 - 6) = *(v4 - 6);
        *((_OWORD *)v9 - 4) = v11;
        *(v4 - 7) = 0;
        *(v4 - 6) = 0;
        *(v4 - 8) = 0;
        long long v12 = *(_OWORD *)(v4 - 5);
        *((void *)v9 - 3) = *(v4 - 3);
        *(_OWORD *)(v9 - 40) = v12;
        *(v4 - 4) = 0;
        *(v4 - 3) = 0;
        *(v4 - 5) = 0;
        *((_OWORD *)v9 - 1) = *((_OWORD *)v4 - 1);
        v9 -= 88;
        v4 -= 11;
      }
      while (v4 != v2);
      uint64_t v2 = *(void ***)a1;
      char v13 = *(void ***)(a1 + 8);
      *(void *)a1 = v9;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v7;
      while (1)
      {
        if (v13 == v2) {
          goto LABEL_17;
        }
        if (*((char *)v13 - 17) < 0)
        {
          operator delete(*(v13 - 5));
          if (*((char *)v13 - 41) < 0)
          {
LABEL_14:
            operator delete(*(v13 - 8));
            if ((*((char *)v13 - 65) & 0x80000000) == 0) {
              goto LABEL_7;
            }
            goto LABEL_15;
          }
        }
        else if (*((char *)v13 - 41) < 0)
        {
          goto LABEL_14;
        }
        if ((*((char *)v13 - 65) & 0x80000000) == 0) {
          goto LABEL_7;
        }
LABEL_15:
        operator delete(*(v13 - 11));
LABEL_7:
        v13 -= 11;
      }
    }
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
LABEL_17:
    if (v2)
    {
      operator delete(v2);
    }
  }
}

char *std::vector<AMSCore::IMetricsDataAccessObject::Event>::__emplace_back_slow_path<AMSCore::IMetricsDataAccessObject::Event>(void **a1, uint64_t a2)
{
  uint64_t v2 = 0x2E8BA2E8BA2E8BA3 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x2E8BA2E8BA2E8BALL) {
    std::vector<std::string>::__throw_length_error[abi:fe180100]();
  }
  if (0x5D1745D1745D1746 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v3) {
    unint64_t v3 = 0x5D1745D1745D1746 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)) >= 0x1745D1745D1745DLL) {
    unint64_t v6 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x2E8BA2E8BA2E8BALL) {
      std::__throw_bad_array_new_length[abi:fe180100]();
    }
    uint64_t v7 = (char *)operator new(88 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  char v8 = &v7[88 * v2];
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(_OWORD *)char v8 = *(_OWORD *)a2;
  uint64_t v9 = &v7[88 * v6];
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  long long v10 = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((void *)v8 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *((void *)v8 + 8) = *(void *)(a2 + 64);
  *((_OWORD *)v8 + 3) = *(_OWORD *)(a2 + 48);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(v8 + 72) = *(_OWORD *)(a2 + 72);
  long long v11 = v8 + 88;
  long long v12 = (void **)*a1;
  char v13 = (void **)a1[1];
  if (v13 != *a1)
  {
    do
    {
      long long v14 = *(_OWORD *)(v13 - 11);
      *((void *)v8 - 9) = *(v13 - 9);
      *(_OWORD *)(v8 - 88) = v14;
      *(v13 - 10) = 0;
      *(v13 - 9) = 0;
      *(v13 - 11) = 0;
      long long v15 = *((_OWORD *)v13 - 4);
      *((void *)v8 - 6) = *(v13 - 6);
      *((_OWORD *)v8 - 4) = v15;
      *(v13 - 7) = 0;
      *(v13 - 6) = 0;
      *(v13 - 8) = 0;
      long long v16 = *(_OWORD *)(v13 - 5);
      *((void *)v8 - 3) = *(v13 - 3);
      *(_OWORD *)(v8 - 40) = v16;
      *(v13 - 4) = 0;
      *(v13 - 3) = 0;
      *(v13 - 5) = 0;
      *((_OWORD *)v8 - 1) = *((_OWORD *)v13 - 1);
      v8 -= 88;
      v13 -= 11;
    }
    while (v13 != v12);
    char v13 = (void **)*a1;
    int v17 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    while (1)
    {
      if (v17 == v13) {
        goto LABEL_24;
      }
      if (*((char *)v17 - 17) < 0)
      {
        operator delete(*(v17 - 5));
        if (*((char *)v17 - 41) < 0)
        {
LABEL_21:
          operator delete(*(v17 - 8));
          if ((*((char *)v17 - 65) & 0x80000000) == 0) {
            goto LABEL_14;
          }
          goto LABEL_22;
        }
      }
      else if (*((char *)v17 - 41) < 0)
      {
        goto LABEL_21;
      }
      if ((*((char *)v17 - 65) & 0x80000000) == 0) {
        goto LABEL_14;
      }
LABEL_22:
      operator delete(*(v17 - 11));
LABEL_14:
      v17 -= 11;
    }
  }
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
LABEL_24:
  if (v13) {
    operator delete(v13);
  }
  return v11;
}

uint64_t std::expected<AMSCore::IMetricsDataAccessObject::Event,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 88))
  {
    (**(void (***)(uint64_t))a1)(a1);
    return a1;
  }
  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
    {
LABEL_4:
      if (*(char *)(a1 + 23) < 0) {
        goto LABEL_9;
      }
      return a1;
    }
  }
  else if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0) {
LABEL_9:
  }
    operator delete(*(void **)a1);
  return a1;
}

void **std::vector<AMSCore::IMetricsDataAccessObject::Event>::~vector[abi:fe180100](void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    unint64_t v3 = (void **)a1[1];
    uint64_t v4 = *a1;
    if (v3 == v2)
    {
LABEL_13:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 17) < 0)
      {
        operator delete(*(v3 - 5));
        if ((*((char *)v3 - 41) & 0x80000000) == 0)
        {
LABEL_7:
          if (*((char *)v3 - 65) < 0) {
            goto LABEL_11;
          }
          goto LABEL_4;
        }
      }
      else if ((*((char *)v3 - 41) & 0x80000000) == 0)
      {
        goto LABEL_7;
      }
      operator delete(*(v3 - 8));
      if (*((char *)v3 - 65) < 0) {
LABEL_11:
      }
        operator delete(*(v3 - 11));
LABEL_4:
      v3 -= 11;
      if (v3 == v2)
      {
        uint64_t v4 = *a1;
        goto LABEL_13;
      }
    }
  }
  return a1;
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[40],AMSCore::Any &>(uint64_t a1, unsigned int a2, const char *a3, unsigned __int8 *a4)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v14);
  size_t v8 = strlen(a3);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v14, (uint64_t)a3, v8);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v14.__imp_, &v13);
  v14.__vftable = (std::system_error_vtbl *)*MEMORY[0x1E4FBA418];
  *(std::system_error_vtbl **)((char *)&v14.__vftable + (unint64_t)v14.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
  v14.__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
  if (v20 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FA3FD0](&v21);
  *(void *)&v22.__val_ = a2;
  v22.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v14, v22, &v13);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  v14.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  long long v15 = &v16;
  long long v18 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v14);
  *(std::error_code *)(a1 + 16) = v14.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v9 = v16;
  *(void *)(a1 + 32) = v15;
  *(void *)(a1 + 40) = v9;
  uint64_t v10 = a1 + 40;
  uint64_t v11 = v17;
  *(void *)(a1 + 48) = v17;
  if (v11)
  {
    *(void *)(v9 + 16) = v10;
    uint64_t v9 = 0;
    long long v15 = &v16;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v10;
  }
  *(_OWORD *)(a1 + 56) = v18;
  long long v18 = 0uLL;
  v14.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v15, (unsigned int *)v9);
  return MEMORY[0x192FA3C30](&v14);
}

void sub_18DA9F47C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::MetricsDataAccessObject::getTopics(AMSCore::MetricsDataAccessObject *this@<X0>, uint64_t a2@<X8>)
{
  __p.__vftable = 0;
  __p.__imp_.__imp_ = 0;
  *(void *)&long long v23 = 0;
  uint64_t v2 = *((void *)this + 22);
  if (!v2) {
    std::__throw_bad_function_call[abi:fe180100]();
  }
  (*(void (**)(std::runtime_error *__return_ptr))(*(void *)v2 + 48))(v28);
  if (v29)
  {
    memset(&v21, 0, sizeof(v21));
    std::vector<std::string>::reserve(&v21, 0xAAAAAAAAAAAAAAABLL * ((v28[0].__imp_.__imp_ - (const char *)v28[0].__vftable) >> 3));
    if (!v29)
    {
      __break(1u);
      return;
    }
    uint64_t v4 = v28[0].__vftable;
    char imp = v28[0].__imp_.__imp_;
    if (v28[0].__vftable == (std::runtime_error_vtbl *)v28[0].__imp_.__imp_)
    {
      end = v21.__end_;
LABEL_6:
      value = v21.__end_cap_.__value_;
      *(void *)a2 = v21.__begin_;
      *(void *)(a2 + 8) = end;
      *(void *)(a2 + 16) = value;
      *(unsigned char *)(a2 + 72) = 1;
    }
    else
    {
      while (1)
      {
        uint64_t v9 = v4->~runtime_error;
        if ((void (__cdecl *)(std::runtime_error *__hidden))((char *)v4->~runtime_error_0 - (char *)v4->~runtime_error) != (void (__cdecl *)(std::runtime_error *__hidden))32)
        {
          AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[17]>((uint64_t)&__p, 2u, "Invalid row size");
          goto LABEL_22;
        }
        uint64_t v10 = *((_DWORD *)v9 + 6) == 5 ? (uint64_t)v4->~runtime_error : 0;
        if (*((_DWORD *)v9 + 6) != 5) {
          break;
        }
        std::vector<std::string>::pointer v11 = v21.__end_;
        if (v21.__end_ < v21.__end_cap_.__value_)
        {
          long long v8 = *(_OWORD *)v10;
          v21.__end_->__r_.__value_.__r.__words[2] = *(void *)(v10 + 16);
          *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v8;
          *(void *)(v10 + 8) = 0;
          *(void *)(v10 + 16) = 0;
          *(void *)uint64_t v10 = 0;
          end = v11 + 1;
        }
        else
        {
          end = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string>((void **)&v21.__begin_, v10);
        }
        v21.__end_ = end;
        if (++v4 == (std::runtime_error_vtbl *)imp) {
          goto LABEL_6;
        }
      }
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[17]>((uint64_t)&__p, 2u, "Invalid row type");
LABEL_22:
      std::runtime_error::runtime_error((std::runtime_error *)a2, &__p);
      *(_OWORD *)(a2 + 16) = v23;
      *(void *)a2 = &unk_1EDC827D8;
      uint64_t v15 = v25;
      *(void *)(a2 + 32) = v24;
      *(void *)(a2 + 40) = v15;
      uint64_t v16 = a2 + 40;
      uint64_t v17 = v26;
      *(void *)(a2 + 48) = v26;
      if (v17)
      {
        *(void *)(v15 + 16) = v16;
        uint64_t v24 = &v25;
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v15 = 0;
      }
      else
      {
        *(void *)(a2 + 32) = v16;
      }
      *(_OWORD *)(a2 + 56) = v27;
      long long v27 = 0uLL;
      *(unsigned char *)(a2 + 72) = 0;
      __p.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v24, (unsigned int *)v15);
      MEMORY[0x192FA3C30](&__p);
      begin = v21.__begin_;
      if (v21.__begin_)
      {
        std::vector<std::string>::pointer v19 = v21.__end_;
        std::vector<std::string>::pointer v20 = v21.__begin_;
        if (v21.__end_ != v21.__begin_)
        {
          do
          {
            if (SHIBYTE(v19[-1].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v19[-1].__r_.__value_.__l.__data_);
            }
            --v19;
          }
          while (v19 != begin);
          std::vector<std::string>::pointer v20 = v21.__begin_;
        }
        v21.__end_ = begin;
        operator delete(v20);
      }
    }
  }
  else
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&>((uint64_t)&__p, v28);
    std::runtime_error::runtime_error((std::runtime_error *)a2, &__p);
    *(_OWORD *)(a2 + 16) = v23;
    *(void *)a2 = &unk_1EDC827D8;
    uint64_t v12 = v25;
    *(void *)(a2 + 32) = v24;
    *(void *)(a2 + 40) = v12;
    uint64_t v13 = a2 + 40;
    uint64_t v14 = v26;
    *(void *)(a2 + 48) = v26;
    if (v14)
    {
      *(void *)(v12 + 16) = v13;
      uint64_t v24 = &v25;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v12 = 0;
    }
    else
    {
      *(void *)(a2 + 32) = v13;
    }
    *(_OWORD *)(a2 + 56) = v27;
    long long v27 = 0uLL;
    *(unsigned char *)(a2 + 72) = 0;
    __p.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v24, (unsigned int *)v12);
    MEMORY[0x192FA3C30](&__p);
  }
  if (v29)
  {
    __p.__vftable = (std::runtime_error_vtbl *)v28;
    std::vector<std::vector<AMSCore::Any>>::__destroy_vector::operator()[abi:fe180100]((void ***)&__p);
  }
  else
  {
    ((void (*)(std::runtime_error *))v28[0].~runtime_error)(v28);
  }
}

void sub_18DA9F878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
}

char *std::vector<std::string>::__emplace_back_slow_path<std::string>(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:fe180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:fe180100]();
    }
    uint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  long long v8 = &v7[24 * v3];
  uint64_t v9 = &v7[24 * v6];
  *(_OWORD *)long long v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v10 = v8 + 24;
  std::vector<std::string>::pointer v11 = (void **)*a1;
  uint64_t v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      long long v13 = *(_OWORD *)(v12 - 3);
      *((void *)v8 - 1) = *(v12 - 1);
      *(_OWORD *)(v8 - 24) = v13;
      v8 -= 24;
      *(v12 - 2) = 0;
      *(v12 - 1) = 0;
      *(v12 - 3) = 0;
      v12 -= 3;
    }
    while (v12 != v11);
    uint64_t v12 = (void **)*a1;
    uint64_t v14 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v14 != v12)
    {
      if (*((char *)v14 - 1) < 0) {
        operator delete(*(v14 - 3));
      }
      v14 -= 3;
    }
  }
  if (v12) {
    operator delete(v12);
  }
  return v10;
}

void AMSCore::MetricsDataAccessObject::unlockEvents(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  v24[0] = 0;
  v24[23] = 0;
  int v25 = 5;
  v26[0] = 0;
  int v27 = 3;
  std::vector<AMSCore::Any>::vector[abi:fe180100](&v18, (uint64_t)v24, 2uLL);
  unint64_t v4 = (char *)operator new(0x28uLL);
  *(void *)(v4 + 31) = 0;
  *(_OWORD *)unint64_t v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  uuid_unparse_lower(a2, v4 + 1);
  *unint64_t v4 = 123;
  v4[37] = 125;
  std::vector<std::string> v21 = v4;
  long long v22 = xmmword_18DDE9B00;
  int v23 = 5;
  std::vector<AMSCore::Any>::vector[abi:fe180100](&__p, (uint64_t)&v21, 1uLL);
  v20[0] = 0;
  v20[1] = 0;
  uint64_t v5 = *(void *)(a1 + 304);
  if (!v5) {
    std::__throw_bad_function_call[abi:fe180100]();
  }
  (*(void (**)(uint64_t, void **, void **, void *))(*(void *)v5 + 48))(v5, &v18, &__p, v20);
  unint64_t v6 = (char *)__p;
  if (__p)
  {
    uint64_t v7 = v17;
    long long v8 = __p;
    if (v17 != __p)
    {
      do
      {
        uint64_t v9 = v7 - 32;
        uint64_t v10 = *((unsigned int *)v7 - 2);
        if (v10 != -1) {
          ((void (*)(void *, char *))off_1EDCA56E0[v10])(v20, v7 - 32);
        }
        *((_DWORD *)v7 - 2) = -1;
        v7 -= 32;
      }
      while (v9 != v6);
      long long v8 = __p;
    }
    uint64_t v17 = v6;
    operator delete(v8);
  }
  if (v23 != -1) {
    ((void (*)(void *, char **))off_1EDCA56E0[v23])(v20, &v21);
  }
  std::vector<std::string>::pointer v11 = (char *)v18;
  if (v18)
  {
    uint64_t v12 = v19;
    long long v13 = v18;
    if (v19 != v18)
    {
      do
      {
        uint64_t v14 = v12 - 32;
        uint64_t v15 = *((unsigned int *)v12 - 2);
        if (v15 != -1) {
          ((void (*)(char **, char *))off_1EDCA56E0[v15])(&v21, v12 - 32);
        }
        *((_DWORD *)v12 - 2) = -1;
        v12 -= 32;
      }
      while (v14 != v11);
      long long v13 = v18;
    }
    std::vector<std::string>::pointer v19 = v11;
    operator delete(v13);
  }
  if (v27 != -1) {
    ((void (*)(char **, uint64_t *))off_1EDCA56E0[v27])(&v21, v26);
  }
  int v27 = -1;
  if (v25 != -1) {
    ((void (*)(char **, unsigned char *))off_1EDCA56E0[v25])(&v21, v24);
  }
}

void sub_18DA9FC80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AMSCore::MetricsDataAccessObject::deleteEventsByTopic(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 16))
  {
    size_t v3 = *(void *)(a2 + 8);
    if (v3 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:fe180100]();
    }
    unint64_t v4 = *(const void **)a2;
    if (v3 >= 0x17)
    {
      uint64_t v12 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17) {
        uint64_t v12 = v3 | 7;
      }
      uint64_t v13 = v12 + 1;
      p_dst = (long long *)operator new(v12 + 1);
      *((void *)&__dst + 1) = v3;
      unint64_t v23 = v13 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v23) = *(void *)(a2 + 8);
      p_dst = &__dst;
      if (!v3) {
        goto LABEL_17;
      }
    }
    memmove(p_dst, v4, v3);
LABEL_17:
    *((unsigned char *)p_dst + v3) = 0;
    *(_OWORD *)uint64_t v24 = __dst;
    unint64_t v25 = v23;
    int v26 = 5;
    std::vector<AMSCore::Any>::vector[abi:fe180100](&__p, (uint64_t)v24, 1uLL);
    uint64_t v14 = *(void *)(a1 + 112);
    if (!v14) {
      std::__throw_bad_function_call[abi:fe180100]();
    }
    (*(void (**)(uint64_t, void **))(*(void *)v14 + 48))(v14, &__p);
    uint64_t v15 = (char *)__p;
    if (__p)
    {
      uint64_t v16 = v21;
      uint64_t v17 = __p;
      if (v21 != __p)
      {
        do
        {
          long long v18 = v16 - 32;
          uint64_t v19 = *((unsigned int *)v16 - 2);
          if (v19 != -1) {
            ((void (*)(long long *, char *))off_1EDCA56E0[v19])(&__dst, v16 - 32);
          }
          *((_DWORD *)v16 - 2) = -1;
          v16 -= 32;
        }
        while (v18 != v15);
        uint64_t v17 = __p;
      }
      std::vector<std::string> v21 = v15;
      operator delete(v17);
    }
    if (v26 != -1) {
      ((void (*)(long long *, void **))off_1EDCA56E0[v26])(&__dst, v24);
    }
    return;
  }
  v24[0] = 0;
  v24[1] = 0;
  unint64_t v25 = 0;
  uint64_t v6 = *(void *)(a1 + 144);
  if (!v6) {
    std::__throw_bad_function_call[abi:fe180100]();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v6 + 48))(v6, v24);
  uint64_t v7 = (char *)v24[0];
  if (v24[0])
  {
    long long v8 = (char *)v24[1];
    uint64_t v9 = v24[0];
    if (v24[1] != v24[0])
    {
      do
      {
        uint64_t v10 = v8 - 32;
        uint64_t v11 = *((unsigned int *)v8 - 2);
        if (v11 != -1) {
          ((void (*)(long long *, char *))off_1EDCA56E0[v11])(&__dst, v8 - 32);
        }
        *((_DWORD *)v8 - 2) = -1;
        v8 -= 32;
      }
      while (v10 != v7);
      uint64_t v9 = v24[0];
    }
    v24[1] = v7;
    operator delete(v9);
  }
}

void sub_18DA9FF84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AMSCore::MetricsDataAccessObject::deleteEvents(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (char *)operator new(0x28uLL);
  *(_OWORD *)unint64_t v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *(void *)(v4 + 31) = 0;
  uuid_unparse_lower(a2, v4 + 1);
  *unint64_t v4 = 123;
  v4[37] = 125;
  uint64_t v14 = v4;
  long long v15 = xmmword_18DDE9B00;
  int v16 = 5;
  std::vector<AMSCore::Any>::vector[abi:fe180100](&__p, (uint64_t)&v14, 1uLL);
  uint64_t v5 = *(void *)(a1 + 80);
  if (!v5) {
    std::__throw_bad_function_call[abi:fe180100]();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v5 + 48))(v5, &__p);
  uint64_t v6 = (char *)__p;
  if (__p)
  {
    uint64_t v7 = v12;
    long long v8 = __p;
    if (v12 != __p)
    {
      do
      {
        uint64_t v9 = v7 - 32;
        uint64_t v10 = *((unsigned int *)v7 - 2);
        if (v10 != -1) {
          ((void (*)(char *, char *))off_1EDCA56E0[v10])(&v13, v7 - 32);
        }
        *((_DWORD *)v7 - 2) = -1;
        v7 -= 32;
      }
      while (v9 != v6);
      long long v8 = __p;
    }
    uint64_t v12 = v6;
    operator delete(v8);
  }
  if (v16 != -1) {
    ((void (*)(char *, char **))off_1EDCA56E0[v16])(&v13, &v14);
  }
}

void sub_18DAA0168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AMSCore::MetricsDataAccessObject::addEvents(uint64_t a1, long long **a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  long long v22 = 0;
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  size_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2 != *a2)
  {
    unint64_t v4 = 0x2E8BA2E8BA2E8BA3 * (((char *)v2 - (char *)*a2) >> 3);
    if (v4 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    long long v22 = (void **)operator new(0x5D1745D1745D1748 * (((char *)v2 - (char *)*a2) >> 3));
    unint64_t v23 = v22;
    uint64_t v24 = &v22[3 * v4];
    uint64_t v5 = &v39;
    uint64_t v19 = v2;
    do
    {
      long long v26 = *(long long *)((char *)v3 + 24);
      uint64_t v27 = *((void *)v3 + 5);
      *((void *)v3 + 4) = 0;
      *((void *)v3 + 5) = 0;
      *((void *)v3 + 3) = 0;
      int v28 = 5;
      long long v6 = *v3;
      uint64_t v30 = *((void *)v3 + 2);
      long long v29 = v6;
      *((void *)v3 + 1) = 0;
      *((void *)v3 + 2) = 0;
      *(void *)size_t v3 = 0;
      int v31 = 5;
      long long v7 = v3[3];
      uint64_t v33 = *((void *)v3 + 8);
      long long v32 = v7;
      *((void *)v3 + 7) = 0;
      *((void *)v3 + 8) = 0;
      *((void *)v3 + 6) = 0;
      int v34 = 6;
      int v8 = *((unsigned __int8 *)v3 + 80);
      if (*((unsigned char *)v3 + 80))
      {
        v35[0] = *((void *)v3 + 9);
        int v8 = 4;
      }
      else
      {
        LOBYTE(v35[0]) = 0;
      }
      int v36 = v8;
      v37[0] = 0;
      v37[23] = 0;
      int v38 = 5;
      uint64_t v39 = 0;
      int v40 = 3;
      std::vector<AMSCore::Any>::vector[abi:fe180100](__p, (uint64_t)&v26, 6uLL);
      if (v40 != -1) {
        ((void (*)(char *, uint64_t *))off_1EDCA56E0[v40])(&v25, v5);
      }
      int v40 = -1;
      if (v38 != -1) {
        ((void (*)(char *, unsigned char *))off_1EDCA56E0[v38])(&v25, v37);
      }
      int v38 = -1;
      if (v36 != -1) {
        ((void (*)(char *, uint64_t *))off_1EDCA56E0[v36])(&v25, v35);
      }
      int v36 = -1;
      if (v34 != -1) {
        ((void (*)(char *, long long *))off_1EDCA56E0[v34])(&v25, &v32);
      }
      int v34 = -1;
      if (v31 != -1) {
        ((void (*)(char *, long long *))off_1EDCA56E0[v31])(&v25, &v29);
      }
      int v31 = -1;
      if (v28 != -1) {
        ((void (*)(char *, long long *))off_1EDCA56E0[v28])(&v25, &v26);
      }
      uint64_t v9 = v23;
      if (v23 < v24)
      {
        *unint64_t v23 = 0;
        v9[1] = 0;
        std::runtime_error v9[2] = 0;
        *(_OWORD *)uint64_t v9 = *(_OWORD *)__p;
        std::runtime_error v9[2] = v21;
        unint64_t v23 = v9 + 3;
      }
      else
      {
        uint64_t v10 = std::vector<std::vector<AMSCore::Any>>::__emplace_back_slow_path<std::vector<AMSCore::Any>>(&v22, (uint64_t)__p);
        uint64_t v11 = (char *)__p[0];
        unint64_t v23 = v10;
        if (__p[0])
        {
          uint64_t v12 = v5;
          char v13 = (char *)__p[1];
          uint64_t v14 = __p[0];
          if (__p[1] != __p[0])
          {
            do
            {
              long long v15 = v13 - 32;
              uint64_t v16 = *((unsigned int *)v13 - 2);
              if (v16 != -1) {
                ((void (*)(long long *, char *))off_1EDCA56E0[v16])(&v26, v13 - 32);
              }
              *((_DWORD *)v13 - 2) = -1;
              v13 -= 32;
            }
            while (v15 != v11);
            uint64_t v14 = __p[0];
            uint64_t v2 = v19;
          }
          __p[1] = v11;
          operator delete(v14);
          uint64_t v5 = v12;
        }
      }
      size_t v3 = (long long *)((char *)v3 + 88);
    }
    while (v3 != v2);
  }
  uint64_t v17 = *(void *)(a1 + 48);
  if (!v17) {
    std::__throw_bad_function_call[abi:fe180100]();
  }
  (*(void (**)(uint64_t, void ***))(*(void *)v17 + 48))(v17, &v22);
  *(void *)&long long v26 = &v22;
  std::vector<std::vector<AMSCore::Any>>::__destroy_vector::operator()[abi:fe180100]((void ***)&v26);
}

void sub_18DAA0530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, AMSCore::Any *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char *a23)
{
  a23 = &a19;
  std::vector<std::vector<AMSCore::Any>>::__destroy_vector::operator()[abi:fe180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

void sub_18DAA0594(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void **std::vector<std::vector<AMSCore::Any>>::__emplace_back_slow_path<std::vector<AMSCore::Any>>(void ***a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:fe180100]();
  }
  if (0x5555555555555556 * (a1[2] - *a1) > v3) {
    unint64_t v3 = 0x5555555555555556 * (a1[2] - *a1);
  }
  if (0xAAAAAAAAAAAAAAABLL * (a1[2] - *a1) >= 0x555555555555555) {
    unint64_t v5 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v5 = v3;
  }
  if (v5 > 0xAAAAAAAAAAAAAAALL) {
    std::__throw_bad_array_new_length[abi:fe180100]();
  }
  uint64_t v7 = 24 * v5;
  int v8 = (char *)operator new(24 * v5);
  uint64_t v9 = &v8[24 * v2];
  uint64_t v10 = (void **)&v8[v7];
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
  *((void *)v9 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v11 = (void **)(v9 + 24);
  uint64_t v12 = *a1;
  char v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = (void **)v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      long long v14 = *(_OWORD *)(v13 - 3);
      v13 -= 3;
      *(_OWORD *)(v9 - 24) = v14;
      v9 -= 24;
      *((void *)v9 + 2) = v13[2];
      *char v13 = 0;
      v13[1] = 0;
      void v13[2] = 0;
    }
    while (v13 != v12);
    char v13 = *a1;
    long long v15 = a1[1];
    *a1 = (void **)v9;
    a1[1] = v11;
    a1[2] = v10;
    if (v15 != v13)
    {
      uint64_t v16 = v15;
      do
      {
        uint64_t v19 = (char *)*(v16 - 3);
        v16 -= 3;
        long long v18 = v19;
        if (v19)
        {
          std::vector<std::string>::pointer v20 = (char *)*(v15 - 2);
          uint64_t v17 = v18;
          if (v20 != v18)
          {
            do
            {
              std::vector<std::string> v21 = v20 - 32;
              uint64_t v22 = *((unsigned int *)v20 - 2);
              if (v22 != -1) {
                ((void (*)(char *, char *))off_1EDCA56E0[v22])(&v24, v20 - 32);
              }
              *((_DWORD *)v20 - 2) = -1;
              v20 -= 32;
            }
            while (v21 != v18);
            uint64_t v17 = *v16;
          }
          *(v15 - 2) = v18;
          operator delete(v17);
        }
        long long v15 = v16;
      }
      while (v16 != v13);
    }
  }
  if (v13) {
    operator delete(v13);
  }
  return v11;
}

void AMSCore::MetricsDataAccessObject::~MetricsDataAccessObject(AMSCore::MetricsDataAccessObject *this)
{
  AMSCore::MetricsDataAccessObject::~MetricsDataAccessObject(this);
  JUMPOUT(0x192FA4080);
}

{
  char *v2;
  char *v3;
  AMSCore::MetricsDataAccessObject *v4;
  AMSCore::MetricsDataAccessObject *v5;
  AMSCore::MetricsDataAccessObject *v6;
  AMSCore::MetricsDataAccessObject *v7;
  AMSCore::MetricsDataAccessObject *v8;
  AMSCore::MetricsDataAccessObject *v9;
  AMSCore::MetricsDataAccessObject *v10;
  AMSCore::MetricsDataAccessObject *v11;
  AMSCore::MetricsDataAccessObject *v12;
  AMSCore::MetricsDataAccessObject *v13;
  uint64_t v14;
  uint64_t v15;

  *(void *)this = &unk_1EDC824E0;
  unint64_t v2 = (char *)this + 344;
  unint64_t v3 = (char *)*((void *)this + 46);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  unint64_t v4 = (AMSCore::MetricsDataAccessObject *)*((void *)this + 42);
  if (v4 == (AMSCore::MetricsDataAccessObject *)((char *)this + 312))
  {
    (*(void (**)(char *))(*((void *)this + 39) + 32))((char *)this + 312);
  }
  else if (v4)
  {
    (*(void (**)(AMSCore::MetricsDataAccessObject *))(*(void *)v4 + 40))(v4);
  }
  unint64_t v5 = (AMSCore::MetricsDataAccessObject *)*((void *)this + 38);
  if (v5 == (AMSCore::MetricsDataAccessObject *)((char *)this + 280))
  {
    (*(void (**)(char *))(*((void *)this + 35) + 32))((char *)this + 280);
  }
  else if (v5)
  {
    (*(void (**)(AMSCore::MetricsDataAccessObject *))(*(void *)v5 + 40))(v5);
  }
  long long v6 = (AMSCore::MetricsDataAccessObject *)*((void *)this + 34);
  if (v6 == (AMSCore::MetricsDataAccessObject *)((char *)this + 248))
  {
    (*(void (**)(char *))(*((void *)this + 31) + 32))((char *)this + 248);
  }
  else if (v6)
  {
    (*(void (**)(AMSCore::MetricsDataAccessObject *))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = (AMSCore::MetricsDataAccessObject *)*((void *)this + 30);
  if (v7 == (AMSCore::MetricsDataAccessObject *)((char *)this + 216))
  {
    (*(void (**)(char *))(*((void *)this + 27) + 32))((char *)this + 216);
  }
  else if (v7)
  {
    (*(void (**)(AMSCore::MetricsDataAccessObject *))(*(void *)v7 + 40))(v7);
  }
  int v8 = (AMSCore::MetricsDataAccessObject *)*((void *)this + 26);
  if (v8 == (AMSCore::MetricsDataAccessObject *)((char *)this + 184))
  {
    (*(void (**)(char *))(*((void *)this + 23) + 32))((char *)this + 184);
  }
  else if (v8)
  {
    (*(void (**)(AMSCore::MetricsDataAccessObject *))(*(void *)v8 + 40))(v8);
  }
  uint64_t v9 = (AMSCore::MetricsDataAccessObject *)*((void *)this + 22);
  if (v9 == (AMSCore::MetricsDataAccessObject *)((char *)this + 152))
  {
    (*(void (**)(char *))(*((void *)this + 19) + 32))((char *)this + 152);
  }
  else if (v9)
  {
    (*(void (**)(AMSCore::MetricsDataAccessObject *))(*(void *)v9 + 40))(v9);
  }
  uint64_t v10 = (AMSCore::MetricsDataAccessObject *)*((void *)this + 18);
  if (v10 == (AMSCore::MetricsDataAccessObject *)((char *)this + 120))
  {
    (*(void (**)(char *))(*((void *)this + 15) + 32))((char *)this + 120);
  }
  else if (v10)
  {
    (*(void (**)(AMSCore::MetricsDataAccessObject *))(*(void *)v10 + 40))(v10);
  }
  uint64_t v11 = (AMSCore::MetricsDataAccessObject *)*((void *)this + 14);
  if (v11 == (AMSCore::MetricsDataAccessObject *)((char *)this + 88))
  {
    (*(void (**)(char *))(*((void *)this + 11) + 32))((char *)this + 88);
  }
  else if (v11)
  {
    (*(void (**)(AMSCore::MetricsDataAccessObject *))(*(void *)v11 + 40))(v11);
  }
  uint64_t v12 = (AMSCore::MetricsDataAccessObject *)*((void *)this + 10);
  if (v12 == (AMSCore::MetricsDataAccessObject *)((char *)this + 56))
  {
    (*(void (**)(char *))(*((void *)this + 7) + 32))((char *)this + 56);
  }
  else if (v12)
  {
    (*(void (**)(AMSCore::MetricsDataAccessObject *))(*(void *)v12 + 40))(v12);
  }
  char v13 = (AMSCore::MetricsDataAccessObject *)*((void *)this + 6);
  if (v13 == (AMSCore::MetricsDataAccessObject *)((char *)this + 24))
  {
    (*(void (**)(char *))(*((void *)this + 3) + 32))((char *)this + 24);
  }
  else if (v13)
  {
    (*(void (**)(AMSCore::MetricsDataAccessObject *))(*(void *)v13 + 40))(v13);
  }
  long long v14 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  long long v15 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
}

void *std::vector<AMSCore::StructuredData::ColumnDesc>::vector[abi:fe180100](void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v5 = 24 * a3;
    long long v6 = (char *)operator new(24 * a3);
    *a1 = v6;
    a1[1] = v6;
    uint64_t v7 = &v6[v5];
    a1[2] = &v6[v5];
    memmove(v6, a2, v5 - 6);
    a1[1] = v7;
  }
  return a1;
}

void sub_18DAA0D20(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<AMSCore::StructuredData::Condition>::vector[abi:fe180100](void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v5 = 24 * a3;
    long long v6 = (char *)operator new(24 * a3);
    *a1 = v6;
    a1[1] = v6;
    uint64_t v7 = &v6[v5];
    a1[2] = &v6[v5];
    memmove(v6, a2, v5 - 5);
    a1[1] = v7;
  }
  return a1;
}

void sub_18DAA0DC0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *AMSCore::MetricsDataAccessObject::MetricsDataAccessObject(void *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v19 = *a2;
  *a2 = 0;
  *a1 = &unk_1EDC824E0;
  a1[1] = v19;
  uint64_t v20 = *a3;
  *a3 = 0;
  a1[2] = v20;
  std::vector<std::string> v21 = (void *)(a4 + 24);
  uint64_t v22 = *(void *)(a4 + 24);
  if (!v22)
  {
    std::vector<std::string> v21 = a1 + 6;
    goto LABEL_5;
  }
  if (v22 != a4)
  {
    a1[6] = v22;
LABEL_5:
    *std::vector<std::string> v21 = 0;
    goto LABEL_7;
  }
  a1[6] = a1 + 3;
  (*(void (**)(void))(*(void *)*v21 + 24))();
LABEL_7:
  unint64_t v23 = (void *)(a5 + 24);
  uint64_t v24 = *(void *)(a5 + 24);
  if (!v24)
  {
    unint64_t v23 = a1 + 10;
    goto LABEL_11;
  }
  if (v24 != a5)
  {
    a1[10] = v24;
LABEL_11:
    *unint64_t v23 = 0;
    goto LABEL_13;
  }
  a1[10] = a1 + 7;
  (*(void (**)(void))(*(void *)*v23 + 24))();
LABEL_13:
  char v25 = (void *)(a6 + 24);
  uint64_t v26 = *(void *)(a6 + 24);
  if (!v26)
  {
    char v25 = a1 + 14;
    goto LABEL_17;
  }
  if (v26 != a6)
  {
    a1[14] = v26;
LABEL_17:
    *char v25 = 0;
    goto LABEL_19;
  }
  a1[14] = a1 + 11;
  (*(void (**)(void))(*(void *)*v25 + 24))();
LABEL_19:
  uint64_t v27 = (void *)(a7 + 24);
  uint64_t v28 = *(void *)(a7 + 24);
  if (!v28)
  {
    uint64_t v27 = a1 + 18;
    goto LABEL_23;
  }
  if (v28 != a7)
  {
    a1[18] = v28;
LABEL_23:
    *uint64_t v27 = 0;
    goto LABEL_25;
  }
  a1[18] = a1 + 15;
  (*(void (**)(void))(*(void *)*v27 + 24))();
LABEL_25:
  long long v29 = (void *)(a8 + 24);
  uint64_t v30 = *(void *)(a8 + 24);
  if (!v30)
  {
    long long v29 = a1 + 22;
    goto LABEL_29;
  }
  if (v30 != a8)
  {
    a1[22] = v30;
LABEL_29:
    *long long v29 = 0;
    goto LABEL_31;
  }
  a1[22] = a1 + 19;
  (*(void (**)(void))(*(void *)*v29 + 24))();
LABEL_31:
  int v31 = (void *)(a9 + 24);
  uint64_t v32 = *(void *)(a9 + 24);
  if (!v32)
  {
    int v31 = a1 + 26;
    goto LABEL_35;
  }
  if (v32 != a9)
  {
    a1[26] = v32;
LABEL_35:
    void *v31 = 0;
    goto LABEL_37;
  }
  a1[26] = a1 + 23;
  (*(void (**)(void))(*(void *)*v31 + 24))();
LABEL_37:
  uint64_t v33 = (void *)(a10 + 24);
  uint64_t v34 = *(void *)(a10 + 24);
  if (!v34)
  {
    uint64_t v33 = a1 + 30;
    goto LABEL_41;
  }
  if (v34 != a10)
  {
    a1[30] = v34;
LABEL_41:
    void *v33 = 0;
    goto LABEL_43;
  }
  a1[30] = a1 + 27;
  (*(void (**)(void))(*(void *)*v33 + 24))();
LABEL_43:
  uint64_t v35 = (void *)(a11 + 24);
  uint64_t v36 = *(void *)(a11 + 24);
  if (!v36)
  {
    uint64_t v35 = a1 + 34;
    goto LABEL_47;
  }
  if (v36 != a11)
  {
    a1[34] = v36;
LABEL_47:
    *uint64_t v35 = 0;
    goto LABEL_49;
  }
  a1[34] = a1 + 31;
  (*(void (**)(void))(*(void *)*v35 + 24))();
LABEL_49:
  char v37 = (void *)(a12 + 24);
  uint64_t v38 = *(void *)(a12 + 24);
  if (!v38)
  {
    char v37 = a1 + 38;
    goto LABEL_53;
  }
  if (v38 != a12)
  {
    a1[38] = v38;
LABEL_53:
    *char v37 = 0;
    goto LABEL_55;
  }
  a1[38] = a1 + 35;
  (*(void (**)(void))(*(void *)*v37 + 24))();
LABEL_55:
  uint64_t v39 = (void *)(a13 + 24);
  uint64_t v40 = *(void *)(a13 + 24);
  if (!v40)
  {
    uint64_t v39 = a1 + 42;
    goto LABEL_59;
  }
  if (v40 != a13)
  {
    a1[42] = v40;
LABEL_59:
    *uint64_t v39 = 0;
    goto LABEL_61;
  }
  a1[42] = a1 + 39;
  (*(void (**)(void))(*(void *)*v39 + 24))();
LABEL_61:
  uint64_t v41 = (void *)(a14 + 24);
  uint64_t v42 = *(void *)(a14 + 24);
  if (v42)
  {
    if (v42 == a14)
    {
      a1[46] = a1 + 43;
      (*(void (**)(void))(*(void *)*v41 + 24))();
      return a1;
    }
    a1[46] = v42;
  }
  else
  {
    uint64_t v41 = a1 + 46;
  }
  *uint64_t v41 = 0;
  return a1;
}

uint64_t std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> &&,std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2 == a1)
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    }
    else if (v2)
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
    }
  }
  else
  {
    (**(void (***)(uint64_t))a1)(a1);
  }
  return a1;
}

uint64_t std::expected<std::function<std::expected<unsigned long,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2 == a1)
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    }
    else if (v2)
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
    }
  }
  else
  {
    (**(void (***)(uint64_t))a1)(a1);
  }
  return a1;
}

uint64_t std::expected<std::function<std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2 == a1)
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    }
    else if (v2)
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
    }
  }
  else
  {
    (**(void (***)(uint64_t))a1)(a1);
  }
  return a1;
}

uint64_t std::expected<std::function<std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2 == a1)
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    }
    else if (v2)
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
    }
  }
  else
  {
    (**(void (***)(uint64_t))a1)(a1);
  }
  return a1;
}

uint64_t std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2 == a1)
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    }
    else if (v2)
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
    }
  }
  else
  {
    (**(void (***)(uint64_t))a1)(a1);
  }
  return a1;
}

uint64_t std::expected<std::function<std::expected<void,AMSCore::Error> ()(std::vector<std::vector<AMSCore::Any>> &&)>,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2 == a1)
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    }
    else if (v2)
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
    }
  }
  else
  {
    (**(void (***)(uint64_t))a1)(a1);
  }
  return a1;
}

uint64_t *std::expected<std::unique_ptr<AMSCore::StructuredData::IStructuredDataProvider::TableBuilder>,AMSCore::Error>::~expected[abi:fe180100](uint64_t *a1)
{
  int v2 = *((unsigned __int8 *)a1 + 72);
  uint64_t v3 = *a1;
  if (v2)
  {
    *a1 = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  else
  {
    (*(void (**)(uint64_t *))v3)(a1);
  }
  return a1;
}

uint64_t std::expected<std::vector<AMSCore::Any>,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  int v2 = *(void (***)(uint64_t))a1;
  if (*(unsigned char *)(a1 + 72))
  {
    if (v2)
    {
      uint64_t v3 = *(void (***)(uint64_t))(a1 + 8);
      unint64_t v4 = *(void (***)(uint64_t))a1;
      if (v3 != v2)
      {
        do
        {
          uint64_t v5 = v3 - 4;
          uint64_t v6 = *((unsigned int *)v3 - 2);
          if (v6 != -1) {
            ((void (*)(char *, void (**)(uint64_t)))off_1EDCA5730[v6])(&v8, v3 - 4);
          }
          *((_DWORD *)v3 - 2) = -1;
          v3 -= 4;
        }
        while (v5 != v2);
        unint64_t v4 = *(void (***)(uint64_t))a1;
      }
      *(void *)(a1 + 8) = v2;
      operator delete(v4);
    }
  }
  else
  {
    (*v2)(a1);
  }
  return a1;
}

uint64_t AMSCore::StringUtils::join<char [35]>(std::string *a1, const char *a2)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v6);
  size_t v4 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v6, (uint64_t)a2, v4);
  std::stringbuf::str[abi:fe180100]((uint64_t)v7, a1);
  uint64_t v6 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v7[-1] + *(void *)(v6 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v7[0] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FA3FD0](&v9);
}

uint64_t std::__shared_ptr_emplace<AMSCore::EphemeralDataProvider>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMSCore::EphemeralDataProvider>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83F30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

{
  uint64_t vars8;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83F68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::EphemeralDataProvider>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83F30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83F68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AMSCore::EphemeralDataProvider::updateValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, const char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, "com.apple.AppleMediaServicesCore.EphemeralDataProvider.default", 62, a2, a3, a4);
}

{
  return (*(uint64_t (**)(uint64_t, const char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 56))(a1, "com.apple.AppleMediaServicesCore.EphemeralDataProvider.default", 62, a2, a3, a4);
}

void AMSCore::EphemeralDataProvider::updateValues(uint64_t a1@<X0>, const void *a2@<X1>, unint64_t a3@<X2>, const void *a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  long long v14 = (std::__shared_mutex_base *)(a1 + 8);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 8));
  AMSCore::EphemeralDataProvider::unsafe_getValue((uint64_t)&v29, a1, a2, a3, a4, a5);
  if (!v31)
  {
    unsigned int v22 = 900;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&,AMSCore::DataErrorCode>((uint64_t)&v23, &v29, &v22);
  }
  v23.__vftable = 0;
  v23.__imp_.__imp_ = 0;
  *(void *)&long long v24 = 0;
  if (v30 == 9)
  {
    p_char imp = 8;
    if (v30 == 9) {
      p_char imp = (uint64_t)&v29.__imp_;
    }
    std::vector<AMSCore::Any>::__assign_with_size[abi:fe180100]<AMSCore::Any*,AMSCore::Any*>((uint64_t *)&v23, (uint64_t)v29.__vftable, *(void *)p_imp, (uint64_t)(*(void *)p_imp - (unint64_t)v29.__vftable) >> 5);
  }
  uint64_t v16 = *(void *)(a6 + 24);
  if (!v16) {
    std::__throw_bad_function_call[abi:fe180100]();
  }
  (*(void (**)(uint64_t, std::runtime_error *))(*(void *)v16 + 48))(v16, &v23);
  std::runtime_error v25 = v23;
  uint64_t v26 = v24;
  v23.__imp_.__imp_ = 0;
  *(void *)&long long v24 = 0;
  v23.__vftable = 0;
  int v27 = 9;
  char v28 = 1;
  AMSCore::EphemeralDataProvider::unsafe_setValue(a7, a1, a2, a3, a4, a5, (uint64_t)&v25);
  if (v28)
  {
    if (v27 != -1) {
      ((void (*)(unsigned int *, std::runtime_error *))off_1EDCA5780[v27])(&v22, &v25);
    }
    int v27 = -1;
  }
  uint64_t v17 = v23.__vftable;
  if (v23.__vftable)
  {
    char imp = v23.__imp_.__imp_;
    uint64_t v19 = v23.__vftable;
    if (v23.__imp_.__imp_ != (const char *)v23.__vftable)
    {
      do
      {
        uint64_t v20 = (std::runtime_error_vtbl *)(imp - 32);
        uint64_t v21 = *((unsigned int *)imp - 2);
        if (v21 != -1) {
          ((void (*)(unsigned int *, const char *))off_1EDCA5780[v21])(&v22, imp - 32);
        }
        *((_DWORD *)imp - 2) = -1;
        imp -= 32;
      }
      while (v20 != v17);
      uint64_t v19 = v23.__vftable;
    }
    v23.__imp_.__imp_ = (const char *)v17;
    operator delete(v19);
  }
  if (v31)
  {
    if (v30 != -1) {
      ((void (*)(std::runtime_error *, std::runtime_error *))off_1EDCA5780[v30])(&v23, &v29);
    }
  }
  else
  {
    ((void (*)(std::runtime_error *))v29.~runtime_error)(&v29);
  }
  std::__shared_mutex_base::unlock(v14);
}

{
  std::__shared_mutex_base *v14;
  uint64_t p_imp;
  uint64_t v16;
  unsigned int v17;
  std::runtime_error v18;
  long long v19;
  std::runtime_error_vtbl *v20;
  void v21[2];
  int v22;
  char v23;
  std::runtime_error v24;
  int v25;
  char v26;

  long long v14 = (std::__shared_mutex_base *)(a1 + 8);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 8));
  AMSCore::EphemeralDataProvider::unsafe_getValue((uint64_t)&v24, a1, a2, a3, a4, a5);
  if (!v26)
  {
    uint64_t v17 = 900;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&,AMSCore::DataErrorCode>((uint64_t)&v18, &v24, &v17);
  }
  v18.__imp_.__imp_ = 0;
  *(void *)&uint64_t v19 = 0;
  v18.__vftable = (std::runtime_error_vtbl *)&v18.__imp_;
  if (v25 == 8)
  {
    if (v25 == 8) {
      p_char imp = (uint64_t)&v24.__imp_;
    }
    else {
      p_char imp = 8;
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,AMSCore::Any>,std::__tree_node<std::__value_type<std::string,AMSCore::Any>,void *> *,long>>((uint64_t)&v18, (long long *)v24.__vftable, (long long *)p_imp);
  }
  uint64_t v16 = *(void *)(a6 + 24);
  if (!v16) {
    std::__throw_bad_function_call[abi:fe180100]();
  }
  (*(void (**)(uint64_t, std::runtime_error *))(*(void *)v16 + 48))(v16, &v18);
  uint64_t v20 = v18.__vftable;
  v21[0] = v18.__imp_.__imp_;
  v21[1] = v19;
  if ((void)v19)
  {
    *((void *)v18.__imp_.__imp_ + 2) = v21;
    v18.__vftable = (std::runtime_error_vtbl *)&v18.__imp_;
    v18.__imp_.__imp_ = 0;
    *(void *)&uint64_t v19 = 0;
  }
  else
  {
    uint64_t v20 = (std::runtime_error_vtbl *)v21;
  }
  unsigned int v22 = 8;
  std::runtime_error v23 = 1;
  AMSCore::EphemeralDataProvider::unsafe_setValue(a7, a1, a2, a3, a4, a5, (uint64_t)&v20);
  if (v23)
  {
    if (v22 != -1) {
      ((void (*)(unsigned int *, std::runtime_error_vtbl **))off_1EDCA5780[v22])(&v17, &v20);
    }
    unsigned int v22 = -1;
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v18, (unsigned int *)v18.__imp_.__imp_);
  if (v26)
  {
    if (v25 != -1) {
      ((void (*)(std::runtime_error *, std::runtime_error *))off_1EDCA5780[v25])(&v18, &v24);
    }
  }
  else
  {
    ((void (*)(std::runtime_error *))v24.~runtime_error)(&v24);
  }
  std::__shared_mutex_base::unlock(v14);
}

uint64_t AMSCore::EphemeralDataProvider::unsafe_getValue(uint64_t a1, uint64_t a2, const void *a3, unint64_t a4, const void *a5, unint64_t a6)
{
  if (!v41)
  {
    unsigned int v38 = 901;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&,AMSCore::DataErrorCode>((uint64_t)&v39, v40, &v38);
  }
  long long v15 = *(uint64_t **)(a2 + 184);
  char v13 = (uint64_t *)(a2 + 184);
  long long v14 = v15;
  if (!v15) {
    goto LABEL_66;
  }
  uint64_t v16 = v13;
  do
  {
    while (1)
    {
      int v17 = *((char *)v14 + 55);
      long long v18 = v17 >= 0 ? v14 + 4 : (uint64_t *)v14[4];
      unint64_t v19 = v17 >= 0 ? *((unsigned __int8 *)v14 + 55) : v14[5];
      size_t v20 = v19 >= a4 ? a4 : v19;
      uint64_t result = memcmp(a3, v18, v20);
      if (result) {
        break;
      }
      if (a4 <= v19) {
        goto LABEL_18;
      }
LABEL_4:
      long long v14 = (uint64_t *)v14[1];
      if (!v14) {
        goto LABEL_19;
      }
    }
    if ((result & 0x80000000) == 0) {
      goto LABEL_4;
    }
LABEL_18:
    uint64_t v16 = v14;
    long long v14 = (uint64_t *)*v14;
  }
  while (v14);
LABEL_19:
  if (v16 == v13) {
    goto LABEL_66;
  }
  int v21 = *((char *)v16 + 55);
  if (v21 >= 0) {
    unsigned int v22 = v16 + 4;
  }
  else {
    unsigned int v22 = (const void *)v16[4];
  }
  if (v21 >= 0) {
    size_t v23 = *((unsigned __int8 *)v16 + 55);
  }
  else {
    size_t v23 = v16[5];
  }
  if (v23 >= a4) {
    size_t v24 = a4;
  }
  else {
    size_t v24 = v23;
  }
  uint64_t result = memcmp(a3, v22, v24);
  if (!result)
  {
    if (a4 >= v23) {
      goto LABEL_34;
    }
    goto LABEL_66;
  }
  if ((result & 0x80000000) != 0) {
    goto LABEL_66;
  }
LABEL_34:
  int v27 = (uint64_t *)v16[8];
  uint64_t v26 = v16 + 8;
  std::runtime_error v25 = v27;
  if (!v27)
  {
LABEL_66:
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    goto LABEL_67;
  }
  char v28 = v26;
  do
  {
    while (1)
    {
      int v29 = *((char *)v25 + 55);
      int v30 = v29 >= 0 ? v25 + 4 : (uint64_t *)v25[4];
      unint64_t v31 = v29 >= 0 ? *((unsigned __int8 *)v25 + 55) : v25[5];
      size_t v32 = v31 >= a6 ? a6 : v31;
      uint64_t result = memcmp(a5, v30, v32);
      if (result) {
        break;
      }
      if (a6 <= v31) {
        goto LABEL_50;
      }
LABEL_36:
      std::runtime_error v25 = (uint64_t *)v25[1];
      if (!v25) {
        goto LABEL_51;
      }
    }
    if ((result & 0x80000000) == 0) {
      goto LABEL_36;
    }
LABEL_50:
    char v28 = v25;
    std::runtime_error v25 = (uint64_t *)*v25;
  }
  while (v25);
LABEL_51:
  if (v28 == v26) {
    goto LABEL_66;
  }
  int v33 = *((char *)v28 + 55);
  if (v33 >= 0) {
    uint64_t v34 = v28 + 4;
  }
  else {
    uint64_t v34 = (const void *)v28[4];
  }
  if (v33 >= 0) {
    size_t v35 = *((unsigned __int8 *)v28 + 55);
  }
  else {
    size_t v35 = v28[5];
  }
  if (v35 >= a6) {
    size_t v36 = a6;
  }
  else {
    size_t v36 = v35;
  }
  uint64_t result = memcmp(a5, v34, v36);
  if (!result)
  {
    if (a6 >= v35) {
      goto LABEL_63;
    }
    goto LABEL_66;
  }
  if ((result & 0x80000000) != 0) {
    goto LABEL_66;
  }
LABEL_63:
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  uint64_t v37 = *((unsigned int *)v28 + 20);
  if (v37 != -1)
  {
    uint64_t result = ((uint64_t (*)(std::runtime_error *, uint64_t, uint64_t *))off_1EDCA57D0[v37])(&v39, a1, v28 + 7);
    *(_DWORD *)(a1 + 24) = v37;
  }
LABEL_67:
  *(unsigned char *)(a1 + 72) = 1;
  return result;
}

void sub_18DAA20D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v21 = *(unsigned int *)(v19 + 24);
  if (v21 != -1) {
    ((void (*)(char *, uint64_t))off_1EDCA5780[v21])(&a19, v19);
  }
  *(_DWORD *)(v19 + 24) = -1;
  _Unwind_Resume(exception_object);
}

void sub_18DAA210C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void (**a19)(void), uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (!a28) {
    (*a19)(&a19);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::EphemeralDataProvider::unsafe_setValue(uint64_t a1, uint64_t a2, const void *a3, size_t a4, const void *a5, size_t a6, uint64_t a7)
{
  if (!v123)
  {
    unsigned int v118 = 900;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&,AMSCore::DataErrorCode>((uint64_t)&v119, (const std::runtime_error *)&__dst, &v118);
  }
  uint64_t v12 = (void **)(a2 + 184);
  char v13 = *(void ***)(a2 + 184);
  if (!v13) {
    goto LABEL_34;
  }
  long long v14 = (void **)(a2 + 184);
  do
  {
    while (1)
    {
      int v15 = *((char *)v13 + 55);
      uint64_t v16 = v15 >= 0 ? v13 + 4 : (void **)v13[4];
      size_t v17 = v15 >= 0 ? *((unsigned __int8 *)v13 + 55) : (size_t)v13[5];
      size_t v18 = v17 >= a4 ? a4 : v17;
      int v19 = memcmp(a3, v16, v18);
      if (v19) {
        break;
      }
      if (a4 <= v17) {
        goto LABEL_18;
      }
LABEL_4:
      char v13 = (void **)v13[1];
      if (!v13) {
        goto LABEL_19;
      }
    }
    if ((v19 & 0x80000000) == 0) {
      goto LABEL_4;
    }
LABEL_18:
    long long v14 = v13;
    char v13 = (void **)*v13;
  }
  while (v13);
LABEL_19:
  if (v14 != v12)
  {
    int v20 = *((char *)v14 + 55);
    if (v20 >= 0) {
      uint64_t v21 = v14 + 4;
    }
    else {
      uint64_t v21 = v14[4];
    }
    if (v20 >= 0) {
      size_t v22 = *((unsigned __int8 *)v14 + 55);
    }
    else {
      size_t v22 = (size_t)v14[5];
    }
    if (v22 >= a4) {
      size_t v23 = a4;
    }
    else {
      size_t v23 = v22;
    }
    int v24 = memcmp(a3, v21, v23);
    if (v24)
    {
      if ((v24 & 0x80000000) == 0) {
        goto LABEL_202;
      }
    }
    else if (a4 >= v22)
    {
      goto LABEL_202;
    }
  }
LABEL_34:
  if (a4 > 0x7FFFFFFFFFFFFFF7) {
LABEL_260:
  }
    std::string::__throw_length_error[abi:fe180100]();
  uint64_t v115 = a1;
  if (a4 >= 0x17)
  {
    uint64_t v26 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v26 = a4 | 7;
    }
    uint64_t v27 = v26 + 1;
    p_dst = (std::runtime_error_vtbl *)operator new(v26 + 1);
    *((void *)&__dst + 1) = a4;
    int64_t v122 = v27 | 0x8000000000000000;
    *(void *)&unsigned long long __dst = p_dst;
    goto LABEL_41;
  }
  HIBYTE(v122) = a4;
  p_dst = (std::runtime_error_vtbl *)&__dst;
  if (a4) {
LABEL_41:
  }
    memmove(p_dst, a3, a4);
  *((unsigned char *)&p_dst->~runtime_error + a4) = 0;
  v119.__imp_.__imp_ = 0;
  *(void *)&long long v120 = 0;
  v119.__vftable = (std::runtime_error_vtbl *)&v119.__imp_;
  char v28 = (void **)*v12;
  int v29 = (void **)*v12;
  int v30 = (void **)(a2 + 184);
  if (!*v12) {
    goto LABEL_99;
  }
  if (v122 >= 0) {
    unint64_t v31 = (std::runtime_error_vtbl *)&__dst;
  }
  else {
    unint64_t v31 = (std::runtime_error_vtbl *)__dst;
  }
  if (v122 >= 0) {
    size_t v32 = (const char *)HIBYTE(v122);
  }
  else {
    size_t v32 = (const char *)*((void *)&__dst + 1);
  }
  long long v14 = (void **)(a2 + 184);
  int v33 = (void **)*v12;
  while (2)
  {
    while (2)
    {
      int v34 = *((char *)v33 + 55);
      if (v34 >= 0) {
        size_t v35 = v33 + 4;
      }
      else {
        size_t v35 = v33[4];
      }
      if (v34 >= 0) {
        size_t v36 = *((unsigned __int8 *)v33 + 55);
      }
      else {
        size_t v36 = (size_t)v33[5];
      }
      if ((unint64_t)v32 >= v36) {
        size_t v37 = v36;
      }
      else {
        size_t v37 = (size_t)v32;
      }
      int v38 = memcmp(v35, v31, v37);
      if (v38)
      {
        if ((v38 & 0x80000000) == 0) {
          break;
        }
        goto LABEL_50;
      }
      if (v36 < (unint64_t)v32)
      {
LABEL_50:
        int v33 = (void **)v33[1];
        if (!v33) {
          goto LABEL_65;
        }
        continue;
      }
      break;
    }
    long long v14 = v33;
    int v33 = (void **)*v33;
    if (v33) {
      continue;
    }
    break;
  }
LABEL_65:
  int v30 = (void **)(a2 + 184);
  if (v14 == v12) {
    goto LABEL_98;
  }
  int v39 = *((char *)v14 + 55);
  uint64_t v40 = v39 >= 0 ? (char *)(v14 + 4) : (char *)v14[4];
  char v41 = v39 >= 0 ? (const char *)*((unsigned __int8 *)v14 + 55) : (const char *)v14[5];
  size_t v42 = (size_t)(v41 >= v32 ? v32 : v41);
  int v43 = memcmp(v31, v40, v42);
  if (v43)
  {
    a1 = v115;
    if ((v43 & 0x80000000) == 0)
    {
LABEL_77:
      int v44 = (char *)(v14 + 8);
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)(v14 + 7), (unsigned int *)v14[8]);
      char imp = (char *)v119.__imp_.__imp_;
      v14[7] = v119.__vftable;
      v14[8] = imp;
      uint64_t v46 = v120;
      v14[9] = (void *)v120;
      if (v46)
      {
        *((void *)imp + 2) = v44;
        v119.__vftable = (std::runtime_error_vtbl *)&v119.__imp_;
        v119.__imp_.__imp_ = 0;
        *(void *)&long long v120 = 0;
        char imp = 0;
      }
      else
      {
        v14[7] = v44;
      }
      goto LABEL_200;
    }
  }
  else
  {
    a1 = v115;
    if (v32 >= v41) {
      goto LABEL_77;
    }
  }
  int v30 = (void **)(a2 + 184);
  if (v12 == v14) {
    goto LABEL_98;
  }
  int v47 = *((char *)v14 + 55);
  if (v47 >= 0) {
    char v48 = v14 + 4;
  }
  else {
    char v48 = v14[4];
  }
  if (v47 >= 0) {
    size_t v49 = *((unsigned __int8 *)v14 + 55);
  }
  else {
    size_t v49 = (size_t)v14[5];
  }
  if (v49 >= (unint64_t)v32) {
    size_t v50 = (size_t)v32;
  }
  else {
    size_t v50 = v49;
  }
  int v51 = memcmp(v31, v48, v50);
  if (v51)
  {
    if ((v51 & 0x80000000) == 0) {
      goto LABEL_92;
    }
LABEL_97:
    int v30 = v14;
LABEL_98:
    int v29 = (void **)*v30;
LABEL_99:
    long long v53 = v30;
    if (*(void ***)(a2 + 176) != v30)
    {
      if (v29)
      {
        uint64_t v54 = v29;
        do
        {
          long long v53 = v54;
          uint64_t v54 = (void **)v54[1];
        }
        while (v54);
      }
      else
      {
        long long v55 = v30;
        do
        {
          long long v53 = (void **)v55[2];
          BOOL v56 = *v53 == v55;
          long long v55 = v53;
        }
        while (v56);
      }
      int v57 = *((char *)v53 + 55);
      if (v57 >= 0) {
        uint64_t v58 = v53 + 4;
      }
      else {
        uint64_t v58 = v53[4];
      }
      if (v57 >= 0) {
        size_t v59 = *((unsigned __int8 *)v53 + 55);
      }
      else {
        size_t v59 = (size_t)v53[5];
      }
      if (v122 >= 0) {
        uint64_t v60 = (std::runtime_error_vtbl *)&__dst;
      }
      else {
        uint64_t v60 = (std::runtime_error_vtbl *)__dst;
      }
      if (v122 >= 0) {
        char v61 = (const char *)HIBYTE(v122);
      }
      else {
        char v61 = (const char *)*((void *)&__dst + 1);
      }
      if ((unint64_t)v61 >= v59) {
        size_t v62 = v59;
      }
      else {
        size_t v62 = (size_t)v61;
      }
      int v63 = memcmp(v58, v60, v62);
      if (v63)
      {
        if ((v63 & 0x80000000) == 0)
        {
LABEL_123:
          if (!v28)
          {
            long long v14 = (void **)(a2 + 184);
            goto LABEL_194;
          }
          while (1)
          {
            uint64_t v64 = v28;
            int v65 = *((char *)v28 + 55);
            if (v65 >= 0) {
              uint64_t v66 = v28 + 4;
            }
            else {
              uint64_t v66 = v28[4];
            }
            if (v65 >= 0) {
              size_t v67 = *((unsigned __int8 *)v28 + 55);
            }
            else {
              size_t v67 = (size_t)v28[5];
            }
            if (v67 >= (unint64_t)v61) {
              size_t v68 = (size_t)v61;
            }
            else {
              size_t v68 = v67;
            }
            int v69 = memcmp(v60, v66, v68);
            if (v69)
            {
              if (v69 < 0) {
                goto LABEL_125;
              }
            }
            else if ((unint64_t)v61 < v67)
            {
LABEL_125:
              char v28 = (void **)*v64;
              uint64_t v12 = v64;
              if (!*v64) {
                goto LABEL_197;
              }
              continue;
            }
            int v70 = memcmp(v66, v60, v68);
            if (v70)
            {
              if ((v70 & 0x80000000) == 0) {
                goto LABEL_193;
              }
            }
            else if (v67 >= (unint64_t)v61)
            {
LABEL_193:
              long long v14 = v64;
LABEL_194:
              long long v71 = v12;
              goto LABEL_195;
            }
            uint64_t v12 = v64 + 1;
            char v28 = (void **)v64[1];
            if (!v28) {
              goto LABEL_197;
            }
          }
        }
      }
      else if (v59 >= (unint64_t)v61)
      {
        goto LABEL_123;
      }
    }
    if (v29) {
      long long v14 = v53;
    }
    else {
      long long v14 = v30;
    }
    if (v29) {
      long long v71 = v53 + 1;
    }
    else {
      long long v71 = v30;
    }
    goto LABEL_195;
  }
  if ((unint64_t)v32 < v49) {
    goto LABEL_97;
  }
LABEL_92:
  int v52 = memcmp(v48, v31, v50);
  if (v52)
  {
    a1 = v115;
    if ((v52 & 0x80000000) == 0) {
      goto LABEL_94;
    }
LABEL_153:
    long long v71 = v14 + 1;
    long long v73 = (void **)v14[1];
    if (v73)
    {
      do
      {
        long long v71 = v73;
        long long v73 = (void **)*v73;
        long long v14 = v71;
        uint64_t v74 = v71;
      }
      while (v73);
    }
    else
    {
      uint64_t v74 = v14;
      do
      {
        uint64_t v75 = v74;
        uint64_t v74 = (void **)v74[2];
      }
      while (*v74 != v75);
    }
    if (v74 == v12) {
      goto LABEL_195;
    }
    uint64_t v78 = v74[4];
    uint64_t v76 = v74 + 4;
    uint64_t v77 = v78;
    int v79 = *((char *)v76 + 23);
    if (v79 >= 0) {
      uint64_t v80 = v76;
    }
    else {
      uint64_t v80 = v77;
    }
    if (v79 >= 0) {
      size_t v81 = *((unsigned __int8 *)v76 + 23);
    }
    else {
      size_t v81 = v76[1];
    }
    if (v81 >= (unint64_t)v32) {
      size_t v82 = (size_t)v32;
    }
    else {
      size_t v82 = v81;
    }
    int v83 = memcmp(v31, v80, v82);
    if (v83)
    {
      if ((v83 & 0x80000000) == 0) {
        goto LABEL_174;
      }
      goto LABEL_195;
    }
    if ((unint64_t)v32 < v81)
    {
LABEL_195:
      long long v90 = (void **)*v71;
      uint64_t v12 = v71;
      uint64_t v64 = v14;
      if (v90)
      {
        char imp = 0;
        long long v14 = v90;
        a1 = v115;
      }
      else
      {
LABEL_197:
        a1 = v115;
        long long v14 = (void **)operator new(0x50uLL);
        *((_OWORD *)v14 + 2) = __dst;
        int64_t v91 = v122;
        int64_t v122 = 0;
        unsigned long long __dst = 0uLL;
        v14[9] = 0;
        v14[8] = 0;
        v14[6] = (void *)v91;
        v14[7] = v14 + 8;
        *long long v14 = 0;
        v14[1] = 0;
        void v14[2] = v64;
        *uint64_t v12 = v14;
        uint64_t v92 = **(void **)(a2 + 176);
        long long v93 = (uint64_t *)v14;
        if (v92)
        {
          *(void *)(a2 + 176) = v92;
          long long v93 = (uint64_t *)*v12;
        }
        std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 184), v93);
        ++*(void *)(a2 + 192);
        char imp = (char *)v119.__imp_.__imp_;
      }
      goto LABEL_200;
    }
    while (1)
    {
LABEL_174:
      uint64_t v64 = v28;
      int v84 = *((char *)v28 + 55);
      if (v84 >= 0) {
        std::error_code v85 = v28 + 4;
      }
      else {
        std::error_code v85 = v28[4];
      }
      if (v84 >= 0) {
        size_t v86 = *((unsigned __int8 *)v28 + 55);
      }
      else {
        size_t v86 = (size_t)v28[5];
      }
      if (v86 >= (unint64_t)v32) {
        size_t v87 = (size_t)v32;
      }
      else {
        size_t v87 = v86;
      }
      int v88 = memcmp(v31, v85, v87);
      if (v88)
      {
        if (v88 < 0) {
          goto LABEL_173;
        }
      }
      else if ((unint64_t)v32 < v86)
      {
LABEL_173:
        char v28 = (void **)*v64;
        uint64_t v12 = v64;
        if (!*v64) {
          goto LABEL_197;
        }
        continue;
      }
      int v89 = memcmp(v85, v31, v87);
      if (v89)
      {
        if ((v89 & 0x80000000) == 0) {
          goto LABEL_193;
        }
      }
      else if (v86 >= (unint64_t)v32)
      {
        goto LABEL_193;
      }
      uint64_t v12 = v64 + 1;
      char v28 = (void **)v64[1];
      if (!v28) {
        goto LABEL_197;
      }
    }
  }
  BOOL v72 = v49 >= (unint64_t)v32;
  a1 = v115;
  if (!v72) {
    goto LABEL_153;
  }
LABEL_94:
  char imp = 0;
LABEL_200:
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v119, (unsigned int *)imp);
  if (SHIBYTE(v122) < 0) {
    operator delete((void *)__dst);
  }
LABEL_202:
  uint64_t v94 = a7;
  if (!*(unsigned char *)(a7 + 32))
  {
    uint64_t v96 = (uint64_t)v14[8];
    if (!v96) {
      goto LABEL_246;
    }
    uint64_t v97 = (uint64_t)(v14 + 8);
    while (1)
    {
      int v98 = *(char *)(v96 + 55);
      if (v98 >= 0) {
        uint64_t v99 = (const void *)(v96 + 32);
      }
      else {
        uint64_t v99 = *(const void **)(v96 + 32);
      }
      if (v98 >= 0) {
        size_t v100 = *(unsigned __int8 *)(v96 + 55);
      }
      else {
        size_t v100 = *(void *)(v96 + 40);
      }
      if (v100 >= a6) {
        size_t v101 = a6;
      }
      else {
        size_t v101 = v100;
      }
      int v102 = memcmp(a5, v99, v101);
      if (v102)
      {
        if (v102 < 0) {
          goto LABEL_223;
        }
LABEL_209:
        uint64_t v96 = *(void *)(v96 + 8);
        if (!v96) {
          goto LABEL_224;
        }
      }
      else
      {
        if (a6 > v100) {
          goto LABEL_209;
        }
LABEL_223:
        uint64_t v97 = v96;
        uint64_t v96 = *(void *)v96;
        if (!v96)
        {
LABEL_224:
          if ((void **)v97 == v14 + 8) {
            goto LABEL_246;
          }
          int v103 = *(char *)(v97 + 55);
          if (v103 >= 0) {
            uint64_t v104 = (const void *)(v97 + 32);
          }
          else {
            uint64_t v104 = *(const void **)(v97 + 32);
          }
          if (v103 >= 0) {
            size_t v105 = *(unsigned __int8 *)(v97 + 55);
          }
          else {
            size_t v105 = *(void *)(v97 + 40);
          }
          if (v105 >= a6) {
            size_t v106 = a6;
          }
          else {
            size_t v106 = v105;
          }
          int v107 = memcmp(a5, v104, v106);
          if (v107)
          {
            if (v107 < 0) {
              goto LABEL_246;
            }
          }
          else if (a6 < v105)
          {
            goto LABEL_246;
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::erase(v14 + 7, v97);
          goto LABEL_246;
        }
      }
    }
  }
  if (a6 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_260;
  }
  if (a6 >= 0x17)
  {
    uint64_t v108 = (a6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a6 | 7) != 0x17) {
      uint64_t v108 = a6 | 7;
    }
    uint64_t v109 = v108 + 1;
    uint64_t v95 = (std::runtime_error_vtbl *)operator new(v108 + 1);
    *((void *)&__dst + 1) = a6;
    int64_t v122 = v109 | 0x8000000000000000;
    *(void *)&unsigned long long __dst = v95;
    uint64_t v94 = a7;
    goto LABEL_240;
  }
  HIBYTE(v122) = a6;
  uint64_t v95 = (std::runtime_error_vtbl *)&__dst;
  if (a6) {
LABEL_240:
  }
    memmove(v95, a5, a6);
  *((unsigned char *)&v95->~runtime_error + a6) = 0;
  if (*(unsigned char *)(v94 + 32))
  {
    std::map<std::string,AMSCore::Any>::insert_or_assign[abi:fe180100]<AMSCore::Any>((void **)v14 + 7, (const void **)&__dst, v94);
    if (SHIBYTE(v122) < 0) {
      operator delete((void *)__dst);
    }
LABEL_246:
    if (!v14[9])
    {
      long long v110 = (void **)v14[1];
      if (v110)
      {
        uint64_t v111 = (void *)a2;
        do
        {
          char v112 = v110;
          long long v110 = (void **)*v110;
        }
        while (v110);
      }
      else
      {
        std::runtime_error v113 = v14;
        uint64_t v111 = (void *)a2;
        do
        {
          char v112 = (void **)v113[2];
          BOOL v56 = *v112 == v113;
          std::runtime_error v113 = v112;
        }
        while (!v56);
      }
      if ((void **)v111[22] == v14) {
        v111[22] = v112;
      }
      uint64_t v114 = (uint64_t *)v111[23];
      --v111[24];
      std::__tree_remove[abi:fe180100]<std::__tree_node_base<void *> *>(v114, (uint64_t *)v14);
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)(v14 + 7), (unsigned int *)v14[8]);
      if (*((char *)v14 + 55) < 0) {
        operator delete(v14[4]);
      }
      operator delete(v14);
    }
    *(unsigned char *)(a1 + 72) = 1;
  }
  else
  {
    __break(1u);
  }
}

void AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&,AMSCore::DataErrorCode>(uint64_t a1, const std::runtime_error *a2, unsigned int *a3)
{
  AMSCore::Error::Error(v4, a2);
  AMSCore::Error::Error<>((uint64_t)&v5, (uint64_t)v4, *a3, (const std::error_category *)&AMSCore::Error::Category::data(void)::instance);
}

void sub_18DAA2C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t AMSCore::anonymous namespace'::areValidValues(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = result;
  if (a3)
  {
    if (a5)
    {
      *(unsigned char *)(result + 72) = 1;
      return result;
    }
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[23]>((uint64_t)&v9, 3u, "Key must not be empty.");
  }
  else
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[26]>((uint64_t)&v9, 3u, "Domain must not be empty.");
  }
  std::runtime_error::runtime_error((std::runtime_error *)v5, &v9);
  *(_OWORD *)(v5 + 16) = v10;
  *(void *)uint64_t v5 = &unk_1EDC827D8;
  uint64_t v6 = v12;
  *(void *)(v5 + 32) = v11;
  *(void *)(v5 + 40) = v6;
  uint64_t v7 = v5 + 40;
  uint64_t v8 = v13;
  *(void *)(v5 + 48) = v13;
  if (v8)
  {
    *(void *)(v6 + 16) = v7;
    uint64_t v11 = &v12;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    *(void *)(v5 + 32) = v7;
  }
  *(_OWORD *)(v5 + 56) = v14;
  long long v14 = 0uLL;
  *(unsigned char *)(v5 + 72) = 0;
  v9.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v11, (unsigned int *)v6);
  return MEMORY[0x192FA3C30](&v9);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[26]>(uint64_t a1, unsigned int a2, const char *a3)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v12);
  size_t v6 = strlen(a3);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v12, (uint64_t)a3, v6);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v12.__imp_, &v11);
  v12.__vftable = (std::system_error_vtbl *)*MEMORY[0x1E4FBA418];
  *(std::system_error_vtbl **)((char *)&v12.__vftable + (unint64_t)v12.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
  v12.__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
  if (v18 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FA3FD0](&v19);
  *(void *)&v20.__val_ = a2;
  v20.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v12, v20, &v11);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  v12.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  uint64_t v13 = &v14;
  long long v16 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v12);
  *(std::error_code *)(a1 + 16) = v12.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v7 = v14;
  *(void *)(a1 + 32) = v13;
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = a1 + 40;
  uint64_t v9 = v15;
  *(void *)(a1 + 48) = v15;
  if (v9)
  {
    *(void *)(v7 + 16) = v8;
    uint64_t v7 = 0;
    uint64_t v13 = &v14;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v8;
  }
  *(_OWORD *)(a1 + 56) = v16;
  long long v16 = 0uLL;
  v12.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v13, (unsigned int *)v7);
  return MEMORY[0x192FA3C30](&v12);
}

void sub_18DAA2FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[23]>(uint64_t a1, unsigned int a2, const char *a3)
{
  uint64_t v4 = a2;
  AMSCore::StringUtils::join<char [23]>(&__what_arg, a3);
  *(void *)&v15.__val_ = v4;
  v15.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v9, v15, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  v9.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  long long v10 = &v11;
  long long v13 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v9);
  *(std::error_code *)(a1 + 16) = v9.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v5 = v11;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = a1 + 40;
  uint64_t v7 = v12;
  *(void *)(a1 + 48) = v12;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    uint64_t v5 = 0;
    long long v10 = &v11;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v6;
  }
  *(_OWORD *)(a1 + 56) = v13;
  long long v13 = 0uLL;
  v9.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v5);
  return MEMORY[0x192FA3C30](&v9);
}

void sub_18DAA311C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::EphemeralDataProvider::setValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v11[0] = 0;
  char v13 = 0;
  if (*(unsigned char *)(a4 + 32))
  {
    int v12 = -1;
    uint64_t v8 = *(unsigned int *)(a4 + 24);
    if (v8 != -1)
    {
      ((void (*)(char *, unsigned char *, uint64_t))off_1EDCA5520[v8])(&v14, v11, a4);
      int v12 = v8;
      uint64_t v9 = *(unsigned int *)(a4 + 24);
      if (v9 != -1)
      {
        if (!v9)
        {
LABEL_7:
          char v13 = 1;
          goto LABEL_8;
        }
        ((void (*)(char *, uint64_t))off_1EDCA54D0[v9])(&v14, a4);
      }
    }
    *(_DWORD *)(a4 + 24) = 0;
    goto LABEL_7;
  }
LABEL_8:
  uint64_t result = (*(uint64_t (**)(uint64_t, const char *, uint64_t, uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 40))(a1, "com.apple.AppleMediaServicesCore.EphemeralDataProvider.default", 62, a2, a3, v11);
  if (v13)
  {
    if (v12 != -1) {
      return ((uint64_t (*)(char *, unsigned char *))off_1EDCA5780[v12])(&v14, v11);
    }
  }
  return result;
}

void AMSCore::EphemeralDataProvider::setValue(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, const void *a4@<X3>, size_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v14 = (std::__shared_mutex_base *)(a1 + 8);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 8));
  v17[0] = 0;
  char v19 = 0;
  if (*(unsigned char *)(a6 + 32))
  {
    int v18 = -1;
    uint64_t v15 = *(unsigned int *)(a6 + 24);
    if (v15 != -1)
    {
      ((void (*)(char *, unsigned char *, uint64_t))off_1EDCA5520[v15])(&v20, v17, a6);
      int v18 = v15;
      uint64_t v16 = *(unsigned int *)(a6 + 24);
      if (v16 != -1)
      {
        if (!v16)
        {
LABEL_7:
          char v19 = 1;
          goto LABEL_8;
        }
        ((void (*)(char *, uint64_t))off_1EDCA54D0[v16])(&v20, a6);
      }
    }
    *(_DWORD *)(a6 + 24) = 0;
    goto LABEL_7;
  }
LABEL_8:
  AMSCore::EphemeralDataProvider::unsafe_setValue(a7, a1, a2, a3, a4, a5, (uint64_t)v17);
  if (v19)
  {
    if (v18 != -1) {
      ((void (*)(char *, unsigned char *))off_1EDCA5780[v18])(&v20, v17);
    }
    int v18 = -1;
  }
  std::__shared_mutex_base::unlock(v14);
}

uint64_t AMSCore::EphemeralDataProvider::getValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, const char *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, "com.apple.AppleMediaServicesCore.EphemeralDataProvider.default", 62, a2, a3);
}

void AMSCore::EphemeralDataProvider::getValue(uint64_t a1@<X0>, const void *a2@<X1>, unint64_t a3@<X2>, const void *a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  size_t v17 = (std::__shared_mutex_base *)(a1 + 8);
  char v18 = 1;
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 8));
  AMSCore::EphemeralDataProvider::unsafe_getValue((uint64_t)v14, a1, a2, a3, a4, a5);
  if (v16)
  {
    *(unsigned char *)a6 = 0;
    *(_DWORD *)(a6 + 24) = -1;
    int v12 = v15;
    if (v15 != -1)
    {
      ((void (*)(char *, uint64_t, void *))off_1EDCA57D0[v15])(&v19, a6, v14);
      *(_DWORD *)(a6 + 24) = v12;
    }
    if (v16) {
      goto LABEL_5;
    }
LABEL_13:
    (*(void (**)(void *))v14[0])(v14);
    if (!v18) {
      return;
    }
    goto LABEL_14;
  }
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v20);
  AMSCore::Logger::log<AMSCore::Error>(v20, (uint64_t)"data", 4, (uint64_t)v14);
  char v13 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  if (!v16) {
    goto LABEL_13;
  }
LABEL_5:
  if (v15 != -1) {
    ((void (*)(uint64_t *, void *))off_1EDCA5780[v15])(&v20, v14);
  }
  if (v18) {
LABEL_14:
  }
    std::__shared_mutex_base::unlock_shared(v17);
}

void sub_18DAA3890(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v2 - 64);
  std::expected<AMSCore::Any,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)va);
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:fe180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t std::expected<AMSCore::Any,AMSCore::Error>::~expected[abi:fe180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2 != -1) {
      ((void (*)(char *, uint64_t))off_1EDCA5780[v2])(&v4, a1);
    }
    *(_DWORD *)(a1 + 24) = -1;
  }
  else
  {
    (**(void (***)(uint64_t))a1)(a1);
  }
  return a1;
}

uint64_t AMSCore::Logger::log<AMSCore::Error>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= 4u)
  {
    uint64_t v7 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v12);
    uint64_t v8 = *(void *)(v12[0] - 24);
    {
    }
    AMSCore::operator<<(v12, a4);
    uint64_t v9 = v12[6];
    uint64_t v10 = (char *)v12 + *(void *)(v12[0] - 24);
    if ((v10[32] & 5) != 0)
    {
      uint64_t v11 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v10 + 5) + 32))(&rep);
      uint64_t v11 = v19;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v16 = 4;
    uint64_t v17 = v9;
    uint64_t v18 = v11;
    (*(void (**)(void, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v7 + 16) + 16))(*(void *)(v7 + 16), a2, a3, &rep);
    v12[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v12[1] = MEMORY[0x1E4FBA470] + 16;
    if (v13 < 0) {
      operator delete((void *)v12[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v14);
  }
  return result;
}

void sub_18DAA3C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::EphemeralDataProvider::~EphemeralDataProvider(AMSCore::EphemeralDataProvider *this)
{
  *(void *)this = &unk_1EDC82330;
  std::__tree<std::__value_type<std::string,std::map<std::string,AMSCore::Any>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,AMSCore::Any>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,AMSCore::Any>>>>::destroy(*((char **)this + 23));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 120));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 72));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  JUMPOUT(0x192FA4080);
}

{
  *(void *)this = &unk_1EDC82330;
  std::__tree<std::__value_type<std::string,std::map<std::string,AMSCore::Any>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,AMSCore::Any>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,AMSCore::Any>>>>::destroy(*((char **)this + 23));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 120));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 72));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

void std::__tree<std::__value_type<std::string,std::map<std::string,AMSCore::Any>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,AMSCore::Any>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,AMSCore::Any>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,AMSCore::Any>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,AMSCore::Any>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,AMSCore::Any>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,std::map<std::string,AMSCore::Any>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,AMSCore::Any>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,AMSCore::Any>>>>::destroy(*((void *)a1 + 1));
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)(a1 + 56), *((unsigned int **)a1 + 8));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

void *AMSCore::JsonData::anonymous namespace'::encodeAny(void *a1, unsigned __int8 *a2)
{
  int v2 = *((_DWORD *)a2 + 6);
  if (v2 == -1) {
    char v3 = 0;
  }
  else {
    char v3 = *((_DWORD *)a2 + 6);
  }
  switch(v3)
  {
    case 1:
      int v31 = *a2;
      if (*a2) {
        size_t v32 = "true";
      }
      else {
        size_t v32 = "false";
      }
      int v43 = v32;
      uint64_t v33 = *(void *)(*a1 - 24);
      {
      }
      {
        __p.__r_.__value_.__s.__data_[0] = 34;
        int v34 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
        size_t v35 = AMSCore::Log::operator<<(v34, (char **)&v43);
        __p.__r_.__value_.__s.__data_[0] = 34;
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v35, (uint64_t)&__p, 1);
      }
      else
      {
        if (v31) {
          uint64_t v40 = 4;
        }
        else {
          uint64_t v40 = 5;
        }
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)v32, v40);
      }
      break;
    case 2:
      if (v2 == 2) {
        uint64_t v9 = (double *)a2;
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t v10 = *(void *)(*a1 - 24);
      {
      }
      {
        LOBYTE(v43) = 34;
        uint64_t v11 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&v43, 1);
        uint64_t v12 = *(void *)(*v11 - 24);
        {
        }
        {
          uint64_t v20 = (void *)std::ostream::operator<<();
          goto LABEL_99;
        }
        double v13 = *v9;
        if (*v9 == 0.0) {
          double v13 = 0.0;
        }
        double v49 = v13;
        std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v43);
        uint64_t v14 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v43, (uint64_t)"<H:", 3);
        AMSCore::StringUtils::toHexString(&__p, (uint64_t)&v49, 8);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        uint64_t v17 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v14, (uint64_t)p_p, size);
        char v50 = 62;
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v17, (uint64_t)&v50, 1);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::stringbuf::str[abi:fe180100]((uint64_t)&v44, &__p);
        int v43 = (void *)*MEMORY[0x1E4FBA418];
        *(void **)((char *)&v43 + *((void *)v43 - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
        uint64_t v44 = MEMORY[0x1E4FBA470] + 16;
        if (v47 < 0) {
          operator delete(v46);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x192FA3FD0](v48);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v18 = &__p;
        }
        else {
          uint64_t v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v19 = __p.__r_.__value_.__l.__size_;
        }
        uint64_t v20 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v11, (uint64_t)v18, v19);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_99;
        }
        goto LABEL_66;
      }
      int v38 = (char *)a1 + *(void *)(*a1 - 24);
      uint64_t v39 = *((void *)v38 + 2);
      *((void *)v38 + 2) = 17;
      std::ostream::operator<<();
      *(void *)((char *)a1 + *(void *)(*a1 - 24) + 16) = v39;
      break;
    case 3:
      if (v2 == 3) {
        uint64_t v21 = (double *)a2;
      }
      else {
        uint64_t v21 = 0;
      }
      uint64_t v22 = *(void *)(*a1 - 24);
      {
      }
      {
        LOBYTE(v43) = 34;
        size_t v23 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&v43, 1);
        uint64_t v24 = *(void *)(*v23 - 24);
        {
        }
        {
          double v49 = *v21;
          std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v43);
          std::runtime_error v25 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v43, (uint64_t)"<H:", 3);
          AMSCore::StringUtils::toHexString(&__p, (uint64_t)&v49, 8);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v26 = &__p;
          }
          else {
            uint64_t v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v27 = __p.__r_.__value_.__l.__size_;
          }
          char v28 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
          char v50 = 62;
          std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v28, (uint64_t)&v50, 1);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::stringbuf::str[abi:fe180100]((uint64_t)&v44, &__p);
          int v43 = (void *)*MEMORY[0x1E4FBA418];
          *(void **)((char *)&v43 + *((void *)v43 - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
          uint64_t v44 = MEMORY[0x1E4FBA470] + 16;
          if (v47 < 0) {
            operator delete(v46);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x192FA3FD0](v48);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v29 = &__p;
          }
          else {
            int v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v30 = __p.__r_.__value_.__l.__size_;
          }
          uint64_t v20 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v23, (uint64_t)v29, v30);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_66:
          }
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        else
        {
          uint64_t v20 = (void *)std::ostream::operator<<();
        }
LABEL_99:
        LOBYTE(v43) = 34;
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v20, (uint64_t)&v43, 1);
      }
      else
      {
        std::ostream::operator<<();
      }
      break;
    case 4:
      if (v2 == 4) {
        uint64_t v5 = (uint64_t *)a2;
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(void *)(*a1 - 24);
      {
      }
      {
        LOBYTE(v43) = 34;
        uint64_t v7 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&v43, 1);
        uint64_t v8 = (void *)AMSCore::Log::operator<<(v7, v5);
        LOBYTE(v43) = 34;
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)&v43, 1);
      }
      else
      {
        std::ostream::operator<<();
      }
      break;
    case 5:
      if (v2 != 5) {
        a2 = 0;
      }
      break;
    case 6:
      if (v2 == 6) {
        size_t v36 = (unsigned __int8 **)a2;
      }
      else {
        size_t v36 = 0;
      }
      if (*((char *)v36 + 23) < 0)
      {
        a2 = *v36;
        uint64_t v37 = (uint64_t)v36[1];
      }
      else
      {
        uint64_t v37 = *((unsigned __int8 *)v36 + 23);
      }
      AMSCore::Base64::encode((uint64_t)a2, v37, &v43);
      goto LABEL_94;
    case 7:
      AMSCore::stringify_time_s((uint64_t)&v43, *(void *)a2, 0);
LABEL_94:
      if (v45 < 0) {
        operator delete(v43);
      }
      break;
    case 8:
      if (v2 != 8) {
        a2 = 0;
      }
      break;
    case 9:
      if (v2 != 9) {
        a2 = 0;
      }
      break;
    default:
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)"null", 4);
      break;
  }
  return a1;
}

void sub_18DAA4660(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void *AMSCore::Log::operator<<(void *a1, char **a2)
{
  uint64_t v4 = *(void *)(*a1 - 24);
  {
  }
  {
    uint64_t v5 = *a2;
    size_t v6 = strlen(v5);
    unint64_t v22 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:fe180100]((uint64_t *)v5, v6);
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v18);
    uint64_t v7 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v18, (uint64_t)"<H:", 3);
    AMSCore::StringUtils::toHexString(&__p, (uint64_t)&v22, 8);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v10 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v7, (uint64_t)p_p, size);
    char v23 = 62;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v10, (uint64_t)&v23, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::stringbuf::str[abi:fe180100]((uint64_t)v19, &__p);
    uint64_t v18 = *MEMORY[0x1E4FBA418];
    *(void *)((char *)&v19[-1] + *(void *)(v18 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v19[0] = MEMORY[0x1E4FBA470] + 16;
    if (v20 < 0) {
      operator delete((void *)v19[8]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x192FA3FD0](&v21);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &__p;
    }
    else {
      uint64_t v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v12 = __p.__r_.__value_.__l.__size_;
    }
    double v13 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)v11, v12);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v14 = *a2;
    size_t v15 = strlen(v14);
    return std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)v14, v15);
  }
  return v13;
}

void sub_18DAA4968(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void *AMSCore::JsonData::anonymous namespace'::encodeMap(void *a1, void *a2)
{
  char v17 = 123;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&v17, 1);
  size_t v6 = (unsigned __int8 *)*a2;
  uint64_t v4 = (unsigned __int8 *)(a2 + 1);
  uint64_t v5 = v6;
  if (v6 != v4)
  {
    uint64_t v7 = 0;
    do
    {
      if (v7)
      {
        char v19 = 44;
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&v19, 1);
      }
      char v20 = 34;
      uint64_t v8 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&v20, 1);
      int v9 = (char)v5[55];
      if (v9 >= 0) {
        uint64_t v10 = (uint64_t)(v5 + 32);
      }
      else {
        uint64_t v10 = *((void *)v5 + 4);
      }
      if (v9 >= 0) {
        uint64_t v11 = v5[55];
      }
      else {
        uint64_t v11 = *((void *)v5 + 5);
      }
      std::string::size_type v12 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, v10, v11);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v12, (uint64_t)"\":", 2);
      double v13 = (unsigned __int8 *)*((void *)v5 + 1);
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          double v13 = *(unsigned __int8 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (unsigned __int8 *)*((void *)v5 + 2);
          BOOL v15 = *(void *)v14 == (void)v5;
          uint64_t v5 = v14;
        }
        while (!v15);
      }
      ++v7;
      uint64_t v5 = v14;
    }
    while (v14 != v4);
  }
  char v18 = 125;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&v18, 1);
  return a1;
}

void *AMSCore::JsonData::anonymous namespace'::encodeValue(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*a1 - 24);
  {
  }
  {
    LOBYTE(v10[0]) = 34;
    uint64_t v5 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)v10, 1);
    size_t v6 = AMSCore::Log::operator<<(v5, a2);
    LOBYTE(v10[0]) = 34;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v6, (uint64_t)v10, 1);
  }
  else
  {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *(void *)a2;
    }
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *(void *)(a2 + 8);
    }
    v10[0] = v8;
    v10[1] = v7;
    AMSCore::JsonData::operator<<(a1, (uint64_t)v10);
  }
  return a1;
}

void *AMSCore::JsonData::anonymous namespace'::encodeVector(void *a1, uint64_t *a2)
{
  char v8 = 91;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&v8, 1);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (v4 != v5)
  {
    uint64_t v6 = 0;
    do
    {
      if (v6)
      {
        char v9 = 44;
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&v9, 1);
      }
      v4 += 32;
      --v6;
    }
    while (v4 != v5);
  }
  char v10 = 93;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&v10, 1);
  return a1;
}

void *AMSCore::JsonData::operator<<(void *a1, uint64_t a2)
{
  char v11 = 34;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&v11, 1);
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(unsigned char **)a2;
    while (2)
    {
      int v6 = *v5;
      switch(*v5)
      {
        case 8:
          char v8 = a1;
          uint64_t v7 = "\\b";
          uint64_t v9 = 2;
          goto LABEL_5;
        case 9:
          char v8 = a1;
          uint64_t v7 = "\\t";
          uint64_t v9 = 2;
          goto LABEL_5;
        case 0xA:
          char v8 = a1;
          uint64_t v7 = "\\n";
          uint64_t v9 = 2;
          goto LABEL_5;
        case 0xB:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
        case 0x1F:
        case 0x20:
        case 0x21:
        case 0x23:
        case 0x24:
        case 0x25:
        case 0x26:
        case 0x27:
        case 0x28:
        case 0x29:
        case 0x2A:
        case 0x2B:
        case 0x2C:
        case 0x2D:
        case 0x2E:
          goto LABEL_4;
        case 0xC:
          char v8 = a1;
          uint64_t v7 = "\\f";
          uint64_t v9 = 2;
          goto LABEL_5;
        case 0xD:
          char v8 = a1;
          uint64_t v7 = "\\r";
          uint64_t v9 = 2;
          goto LABEL_5;
        case 0x22:
        case 0x2F:
          goto LABEL_3;
        default:
          if (v6 != 92) {
            goto LABEL_4;
          }
LABEL_3:
          char v13 = 92;
          std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&v13, 1);
          LOBYTE(v6) = *v5;
LABEL_4:
          char v14 = v6;
          uint64_t v7 = &v14;
          char v8 = a1;
          uint64_t v9 = 1;
LABEL_5:
          std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v8, (uint64_t)v7, v9);
          ++v5;
          if (--v4) {
            continue;
          }
          goto LABEL_14;
      }
    }
  }
LABEL_14:
  char v12 = 34;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)&v12, 1);
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_unique_key_args<std::string,std::string,std::string>(uint64_t **a1, const void **a2, uint64_t a3, uint64_t a4)
{
  char v8 = a1 + 1;
  uint64_t v7 = a1[1];
  if (!v7)
  {
    char v12 = a1 + 1;
    goto LABEL_29;
  }
  int v9 = *((char *)a2 + 23);
  if (v9 >= 0) {
    char v10 = a2;
  }
  else {
    char v10 = *a2;
  }
  if (v9 >= 0) {
    char v11 = (const void *)*((unsigned __int8 *)a2 + 23);
  }
  else {
    char v11 = a2[1];
  }
  do
  {
    while (1)
    {
      char v12 = (uint64_t **)v7;
      uint64_t v15 = v7[4];
      char v13 = v7 + 4;
      char v14 = (void *)v15;
      int v16 = *((char *)v13 + 23);
      char v17 = v16 >= 0 ? v13 : v14;
      char v18 = v16 >= 0 ? (const void *)*((unsigned __int8 *)v13 + 23) : (const void *)v13[1];
      size_t v19 = (size_t)(v18 >= v11 ? v11 : v18);
      int v20 = memcmp(v10, v17, v19);
      if (v20) {
        break;
      }
      if (v11 >= v18) {
        goto LABEL_22;
      }
LABEL_8:
      uint64_t v7 = *v12;
      char v8 = v12;
      if (!*v12) {
        goto LABEL_29;
      }
    }
    if (v20 < 0) {
      goto LABEL_8;
    }
LABEL_22:
    uint64_t result = (uint64_t *)memcmp(v17, v10, v19);
    if (result)
    {
      if ((result & 0x80000000) == 0) {
        return result;
      }
    }
    else if (v18 >= v11)
    {
      return result;
    }
    uint64_t v7 = v12[1];
  }
  while (v7);
  char v8 = v12 + 1;
LABEL_29:
  unint64_t v22 = operator new(0x58uLL);
  v22[2] = *(_OWORD *)a3;
  *((void *)v22 + 6) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(_OWORD *)((char *)v22 + 56) = *(_OWORD *)a4;
  *((void *)v22 + 9) = *(void *)(a4 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *((_DWORD *)v22 + 20) = 5;
  *(void *)unint64_t v22 = 0;
  *((void *)v22 + 1) = 0;
  *((void *)v22 + 2) = v12;
  *char v8 = (uint64_t *)v22;
  char v23 = (uint64_t *)**a1;
  if (v23)
  {
    *a1 = v23;
    uint64_t v24 = *v8;
  }
  else
  {
    uint64_t v24 = (uint64_t *)v22;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], v24);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void AMSCore::PercentData::anonymous namespace'::toURLString(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = a3 + 1;
  uint64_t v5 = (void *)*a3;
  if ((void *)*a3 == a3 + 1)
  {
LABEL_26:
    *(unsigned char *)(a1 + 72) = 1;
    return;
  }
  char v7 = 0;
  while (1)
  {
    if (v7)
    {
      LOBYTE(v28.__vftable) = 38;
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a2, (uint64_t)&v28, 1);
    }
    uint64_t v8 = (uint64_t)(v5 + 4);
    int v9 = *((_DWORD *)v5 + 20);
    if (v9 == 9) {
      break;
    }
    if (v9 == 8)
    {
      AMSCore::StringUtils::join<char [42]>((std::string *)__what_arg, "Nested Maps not supported by URL encoding");
      v34.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
      *(void *)&v34.__val_ = 8;
      std::system_error::system_error(&v28, v34, (const std::string *)__what_arg);
      if ((__what_arg[23] & 0x80000000) != 0) {
        operator delete(*(void **)__what_arg);
      }
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      v28.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
      int v29 = &v30;
      long long v32 = 0uLL;
      std::runtime_error::runtime_error((std::runtime_error *)__what_arg, &v28);
      *(std::error_code *)&__what_arg[16] = v28.__ec_;
      int v16 = (unsigned int *)v30;
      *(void *)std::string __what_arg = &unk_1EDC827D8;
      uint64_t v24 = v29;
      uint64_t v25 = v30;
      uint64_t v26 = v31;
      if (v31)
      {
        *(void *)(v30 + 16) = &v25;
        int v16 = 0;
        int v29 = &v30;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
      }
      else
      {
        uint64_t v24 = &v25;
      }
      long long v27 = v32;
      long long v32 = 0uLL;
      v28.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v29, v16);
      MEMORY[0x192FA3C30](&v28);
      std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)__what_arg);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)&__what_arg[16];
      *(void *)a1 = &unk_1EDC827D8;
      uint64_t v20 = v25;
      *(void *)(a1 + 32) = v24;
      *(void *)(a1 + 40) = v20;
      uint64_t v21 = a1 + 40;
      uint64_t v22 = v26;
      *(void *)(a1 + 48) = v26;
      if (v22)
      {
        *(void *)(v20 + 16) = v21;
        uint64_t v20 = 0;
        uint64_t v24 = &v25;
        uint64_t v25 = 0;
        uint64_t v26 = 0;
      }
      else
      {
        *(void *)(a1 + 32) = v21;
      }
      *(_OWORD *)(a1 + 56) = v27;
      long long v27 = 0uLL;
      *(unsigned char *)(a1 + 72) = 0;
      *(void *)std::string __what_arg = &unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v24, (unsigned int *)v20);
      MEMORY[0x192FA3C30](__what_arg);
      return;
    }
    if (*((char *)v5 + 55) < 0)
    {
      uint64_t v8 = v5[4];
      uint64_t v10 = v5[5];
    }
    else
    {
      uint64_t v10 = *((unsigned __int8 *)v5 + 55);
    }
    AMSCore::URL::encode(a2, v8, v10);
    LOBYTE(v28.__vftable) = 61;
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a2, (uint64_t)&v28, 1);
    if (!*(unsigned char *)(a1 + 72)) {
      return;
    }
LABEL_20:
    char v13 = (void *)v5[1];
    if (v13)
    {
      do
      {
        char v14 = v13;
        char v13 = (void *)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        char v14 = (void *)v5[2];
        BOOL v15 = *v14 == (void)v5;
        uint64_t v5 = v14;
      }
      while (!v15);
    }
    char v7 = 1;
    uint64_t v5 = v14;
    if (v14 == v4) {
      goto LABEL_26;
    }
  }
  if (*((_DWORD *)v5 + 20) == 9) {
    char v11 = v5 + 7;
  }
  else {
    char v11 = 0;
  }
  if (*((char *)v5 + 55) < 0)
  {
    uint64_t v8 = v5[4];
    uint64_t v12 = v5[5];
  }
  else
  {
    uint64_t v12 = *((unsigned __int8 *)v5 + 55);
  }
  if (v33) {
    goto LABEL_20;
  }
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&>((uint64_t)__what_arg, &v28);
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)__what_arg);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)&__what_arg[16];
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v17 = v25;
  *(void *)(a1 + 32) = v24;
  *(void *)(a1 + 40) = v17;
  uint64_t v18 = a1 + 40;
  uint64_t v19 = v26;
  *(void *)(a1 + 48) = v26;
  if (v19)
  {
    *(void *)(v17 + 16) = v18;
    uint64_t v24 = &v25;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v17 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v18;
  }
  *(_OWORD *)(a1 + 56) = v27;
  long long v27 = 0uLL;
  *(unsigned char *)(a1 + 72) = 0;
  *(void *)std::string __what_arg = &unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v24, (unsigned int *)v17);
  MEMORY[0x192FA3C30](__what_arg);
  if (!v33) {
    ((void (*)(std::system_error *))v28.~system_error)(&v28);
  }
}

void sub_18DAA5430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void (**a22)(void),uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (!a31)
  {
    (*a22)(&a22);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::PercentData::anonymous namespace'::fromVector(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  if (a3[1] == *a3) {
    goto LABEL_9;
  }
  AMSCore::URL::encode(a2, a4, a5);
  LOBYTE(v21[0].__vftable) = 61;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a2, (uint64_t)v21, 1);
  if (a3[1] == *a3)
  {
LABEL_16:
    __break(1u);
    return;
  }
  if (v22)
  {
    if ((unint64_t)(a3[1] - *a3) >= 0x21)
    {
      unint64_t v10 = 1;
      uint64_t v11 = 32;
      do
      {
        LOBYTE(v21[0].__vftable) = 38;
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a2, (uint64_t)v21, 1);
        AMSCore::URL::encode(a2, a4, a5);
        LOBYTE(v21[0].__vftable) = 61;
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a2, (uint64_t)v21, 1);
        if (v10 >= (a3[1] - *a3) >> 5) {
          goto LABEL_16;
        }
        if (!v22) {
          goto LABEL_10;
        }
        ++v10;
        v11 += 32;
      }
      while (v10 < (a3[1] - *a3) >> 5);
    }
LABEL_9:
    *(unsigned char *)(a1 + 72) = 1;
    return;
  }
LABEL_10:
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error&>((uint64_t)&v15, v21);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v15);
  *(_OWORD *)(a1 + 16) = v16;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v12 = v18;
  *(void *)(a1 + 32) = v17;
  *(void *)(a1 + 40) = v12;
  uint64_t v13 = a1 + 40;
  uint64_t v14 = v19;
  *(void *)(a1 + 48) = v19;
  if (v14)
  {
    *(void *)(v12 + 16) = v13;
    uint64_t v17 = &v18;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v13;
  }
  *(_OWORD *)(a1 + 56) = v20;
  long long v20 = 0uLL;
  *(unsigned char *)(a1 + 72) = 0;
  v15.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v17, (unsigned int *)v12);
  MEMORY[0x192FA3C30](&v15);
  if (!v22) {
    ((void (*)(std::runtime_error *))v21[0].~runtime_error)(v21);
  }
}

void sub_18DAA56CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void (**a19)(void), uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (!a28) {
    (*a19)(&a19);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::PercentData::anonymous namespace'::toURLString(uint64_t a1, void *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(a3 + 24);
  if (v4 == -1) {
    char v5 = 0;
  }
  else {
    char v5 = *(_DWORD *)(a3 + 24);
  }
  switch(v5)
  {
    case 0:
      goto LABEL_48;
    case 1:
      if (*(unsigned char *)a3) {
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a2, (uint64_t)"true", 4);
      }
      else {
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a2, (uint64_t)"false", 5);
      }
      goto LABEL_48;
    case 2:
      std::ostream::operator<<();
      goto LABEL_48;
    case 3:
      std::ostream::operator<<();
      goto LABEL_48;
    case 4:
      std::ostream::operator<<();
      goto LABEL_48;
    case 5:
      if (v4 == 5) {
        uint64_t v10 = a3;
      }
      else {
        uint64_t v10 = 0;
      }
      if (*(char *)(v10 + 23) < 0)
      {
        a3 = *(void *)v10;
        uint64_t v11 = *(void *)(v10 + 8);
      }
      else
      {
        uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
      }
      AMSCore::URL::encode(a2, a3, v11);
      goto LABEL_48;
    case 6:
      if (v4 == 6) {
        uint64_t v12 = a3;
      }
      else {
        uint64_t v12 = 0;
      }
      if (*(char *)(v12 + 23) < 0)
      {
        a3 = *(void *)v12;
        uint64_t v13 = *(void *)(v12 + 8);
      }
      else
      {
        uint64_t v13 = *(unsigned __int8 *)(v12 + 23);
      }
      AMSCore::Base64::encode(a3, v13, &v16);
      goto LABEL_40;
    case 7:
      AMSCore::stringify_time_s((uint64_t)&v16, *(void *)a3, 0);
LABEL_40:
      if ((SBYTE7(v17) & 0x80u) == 0) {
        uint64_t v14 = &v16;
      }
      else {
        uint64_t v14 = v16.__vftable;
      }
      if ((SBYTE7(v17) & 0x80u) == 0) {
        uint64_t imp = BYTE7(v17);
      }
      else {
        uint64_t imp = (uint64_t)v16.__imp_.__imp_;
      }
      AMSCore::URL::encode(a2, (uint64_t)v14, imp);
      if (SBYTE7(v17) < 0) {
        operator delete(v16.__vftable);
      }
LABEL_48:
      *(unsigned char *)(a1 + 72) = 1;
      break;
    case 8:
      if (v4 != 8) {
        a3 = 0;
      }
      break;
    case 9:
      if (v4 != 9) {
        a3 = 0;
      }
      break;
    default:
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[18]>((uint64_t)&v16, 8u, "Unknown Any type.");
      std::runtime_error::runtime_error((std::runtime_error *)a1, &v16);
      *(_OWORD *)(a1 + 16) = v17;
      *(void *)a1 = &unk_1EDC827D8;
      uint64_t v7 = v19;
      *(void *)(a1 + 32) = v18;
      *(void *)(a1 + 40) = v7;
      uint64_t v8 = a1 + 40;
      uint64_t v9 = v20;
      *(void *)(a1 + 48) = v20;
      if (v9)
      {
        *(void *)(v7 + 16) = v8;
        uint64_t v18 = &v19;
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v7 = 0;
      }
      else
      {
        *(void *)(a1 + 32) = v8;
      }
      *(_OWORD *)(a1 + 56) = v21;
      long long v21 = 0uLL;
      *(unsigned char *)(a1 + 72) = 0;
      v16.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v18, (unsigned int *)v7);
      MEMORY[0x192FA3C30](&v16);
      break;
  }
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[18]>(uint64_t a1, unsigned int a2, const char *a3)
{
  uint64_t v4 = a2;
  AMSCore::StringUtils::join<char [18]>(&__what_arg, a3);
  *(void *)&v15.__val_ = v4;
  v15.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v9, v15, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  v9.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  uint64_t v10 = &v11;
  long long v13 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v9);
  *(std::error_code *)(a1 + 16) = v9.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v5 = v11;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = a1 + 40;
  uint64_t v7 = v12;
  *(void *)(a1 + 48) = v12;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    uint64_t v5 = 0;
    uint64_t v10 = &v11;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v6;
  }
  *(_OWORD *)(a1 + 56) = v13;
  long long v13 = 0uLL;
  v9.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v5);
  return MEMORY[0x192FA3C30](&v9);
}

void sub_18DAA5B24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[29]>(uint64_t a1, unsigned int a2, const char *a3)
{
  uint64_t v4 = a2;
  AMSCore::StringUtils::join<char [29]>(&__what_arg, a3);
  *(void *)&v15.__val_ = v4;
  v15.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v9, v15, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  v9.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  uint64_t v10 = &v11;
  long long v13 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v9);
  *(std::error_code *)(a1 + 16) = v9.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v5 = v11;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = a1 + 40;
  uint64_t v7 = v12;
  *(void *)(a1 + 48) = v12;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    uint64_t v5 = 0;
    uint64_t v10 = &v11;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v6;
  }
  *(_OWORD *)(a1 + 56) = v13;
  long long v13 = 0uLL;
  v9.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v5);
  return MEMORY[0x192FA3C30](&v9);
}

void sub_18DAA5C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::StringUtils::join<char [29]>(std::string *a1, const char *a2)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v6);
  size_t v4 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v6, (uint64_t)a2, v4);
  std::stringbuf::str[abi:fe180100]((uint64_t)v7, a1);
  uint64_t v6 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v7[-1] + *(void *)(v6 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v7[0] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FA3FD0](&v9);
}

void AMSCore::PListData::anonymous namespace'::toXmlString(uint64_t a1, void *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a3 + 24);
  if (v3 == -1) {
    char v4 = 0;
  }
  else {
    char v4 = *(_DWORD *)(a3 + 24);
  }
  uint64_t v5 = a3;
  switch(v4)
  {
    case 1:
      if (*(unsigned char *)a3)
      {
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a2, (uint64_t)"<true/>", 7);
        goto LABEL_108;
      }
      char v33 = "<false/>";
      goto LABEL_64;
    case 2:
      uint64_t v8 = *(void *)((char *)a2 + *(void *)(*a2 - 24) + 16);
      uint64_t v9 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a2, (uint64_t)"<real>", 6);
      *(void *)((char *)v9 + *(void *)(*v9 - 24) + 16) = 17;
      uint64_t v10 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v10, (uint64_t)"</real>", 7);
      *(void *)((char *)a2 + *(void *)(*a2 - 24) + 16) = v8;
      goto LABEL_108;
    case 3:
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a2, (uint64_t)"<integer>", 9);
      uint64_t v11 = (void *)std::ostream::operator<<();
      goto LABEL_10;
    case 4:
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a2, (uint64_t)"<integer>", 9);
      uint64_t v11 = (void *)std::ostream::operator<<();
LABEL_10:
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v11, (uint64_t)"</integer>", 10);
      goto LABEL_108;
    case 5:
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a2, (uint64_t)"<string>", 8);
      if (*(_DWORD *)(v5 + 24) == 5) {
        uint64_t v12 = v5;
      }
      else {
        uint64_t v12 = 0;
      }
      if (*(char *)(v12 + 23) < 0)
      {
        uint64_t v5 = *(void *)v12;
        std::string::size_type v13 = *(void *)(v12 + 8);
      }
      else
      {
        std::string::size_type v13 = *(unsigned __int8 *)(v12 + 23);
      }
      int v34 = v78;
      if (v78)
      {
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a2, (uint64_t)"</string>", 9);
      }
      else
      {
        std::runtime_error::runtime_error(&v65, &v72);
        long long v66 = v73;
        v65.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        size_t v67 = v74;
        size_t v68 = v75;
        uint64_t v69 = v76;
        if (v76)
        {
          *((void *)v75 + 2) = &v68;
          uint64_t v74 = &v75;
          uint64_t v75 = 0;
          uint64_t v76 = 0;
        }
        else
        {
          size_t v67 = &v68;
        }
        long long v70 = v77;
        long long v77 = 0uLL;
        char v71 = 1;
        AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v52, (uint64_t)&v65);
        std::runtime_error::runtime_error((std::runtime_error *)a1, &v52);
        *(_OWORD *)(a1 + 16) = v53;
        *(void *)a1 = &unk_1EDC827D8;
        uint64_t v40 = v55;
        *(void *)(a1 + 32) = v54;
        *(void *)(a1 + 40) = v40;
        uint64_t v41 = a1 + 40;
        uint64_t v42 = v56;
        *(void *)(a1 + 48) = v56;
        if (v42)
        {
          *(void *)(v40 + 16) = v41;
          uint64_t v54 = (unsigned int **)&v55;
          uint64_t v55 = 0;
          uint64_t v56 = 0;
          uint64_t v40 = 0;
        }
        else
        {
          *(void *)(a1 + 32) = v41;
        }
        *(_OWORD *)(a1 + 56) = v57;
        long long v57 = 0uLL;
        *(unsigned char *)(a1 + 72) = 0;
        v52.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v54, (unsigned int *)v40);
        MEMORY[0x192FA3C30](&v52);
        if (v71)
        {
          v65.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
          int v43 = (std::__shared_weak_count *)*((void *)&v70 + 1);
          if (*((void *)&v70 + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v70 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v67, v68);
          MEMORY[0x192FA3C30](&v65);
        }
      }
      if (!v78) {
        ((void (*)(std::runtime_error *))v72.~runtime_error)(&v72);
      }
      if (v34) {
        goto LABEL_108;
      }
      return;
    case 6:
      uint64_t v14 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a2, (uint64_t)"<data>", 6);
      if (*(_DWORD *)(v5 + 24) == 6) {
        uint64_t v15 = v5;
      }
      else {
        uint64_t v15 = 0;
      }
      if (*(char *)(v15 + 23) < 0)
      {
        uint64_t v5 = *(void *)v15;
        uint64_t v16 = *(void *)(v15 + 8);
      }
      else
      {
        uint64_t v16 = *(unsigned __int8 *)(v15 + 23);
      }
      AMSCore::Base64::encode(v5, v16, &v72);
      if ((SBYTE7(v73) & 0x80u) == 0) {
        size_t v35 = &v72;
      }
      else {
        size_t v35 = v72.__vftable;
      }
      if ((SBYTE7(v73) & 0x80u) == 0) {
        uint64_t imp = BYTE7(v73);
      }
      else {
        uint64_t imp = (uint64_t)v72.__imp_.__imp_;
      }
      uint64_t v37 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v14, (uint64_t)v35, imp);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v37, (uint64_t)"</data>", 7);
      goto LABEL_76;
    case 7:
      long long v17 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a2, (uint64_t)"<date>", 6);
      AMSCore::stringify_time_s((uint64_t)&v72, *(void *)v5, 0);
      if ((SBYTE7(v73) & 0x80u) == 0) {
        uint64_t v18 = &v72;
      }
      else {
        uint64_t v18 = v72.__vftable;
      }
      if ((SBYTE7(v73) & 0x80u) == 0) {
        uint64_t v19 = BYTE7(v73);
      }
      else {
        uint64_t v19 = (uint64_t)v72.__imp_.__imp_;
      }
      uint64_t v20 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v20, (uint64_t)"</date>", 7);
LABEL_76:
      if (SBYTE7(v73) < 0) {
        operator delete(v72.__vftable);
      }
      goto LABEL_108;
    case 8:
      if (v3 == 8) {
        long long v21 = (void *)a3;
      }
      else {
        long long v21 = 0;
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a2, (uint64_t)"<dict>\n", 7);
      uint64_t v24 = (void *)*v21;
      char v22 = v21 + 1;
      char v23 = v24;
      if (v24 == v22) {
        goto LABEL_60;
      }
      while (2)
      {
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a2, (uint64_t)"<key>", 5);
        if (*((char *)v23 + 55) < 0)
        {
          uint64_t v25 = v23[4];
          std::string::size_type v26 = v23[5];
        }
        else
        {
          uint64_t v25 = (uint64_t)(v23 + 4);
          std::string::size_type v26 = *((unsigned __int8 *)v23 + 55);
        }
        if (v78)
        {
          std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a2, (uint64_t)"</key>\n", 7);
          std::expected<void,AMSCore::Error>::operator=[abi:fe180100](&v72, &v65);
          if (!v71) {
            ((void (*)(std::runtime_error *))v65.~runtime_error)(&v65);
          }
          if (v78)
          {
            LOBYTE(v65.__vftable) = 10;
            std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a2, (uint64_t)&v65, 1);
            if (v78)
            {
              long long v27 = (void *)v23[1];
              if (!v27)
              {
                do
                {
LABEL_47:
                  std::system_error v28 = (void *)v23[2];
                  BOOL v29 = *v28 == (void)v23;
                  char v23 = v28;
                }
                while (!v29);
                goto LABEL_33;
              }
            }
            else
            {
              ((void (*)(std::runtime_error *))v72.~runtime_error)(&v72);
              long long v27 = (void *)v23[1];
              if (!v27) {
                goto LABEL_47;
              }
            }
            do
            {
              std::system_error v28 = v27;
              long long v27 = (void *)*v27;
            }
            while (v27);
LABEL_33:
            char v23 = v28;
            if (v28 == v22)
            {
LABEL_60:
              std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a2, (uint64_t)"</dict>", 7);
              char v58 = 1;
              goto LABEL_108;
            }
            continue;
          }
        }
        break;
      }
      std::runtime_error::runtime_error(&v65, &v72);
      long long v66 = v73;
      v65.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      size_t v67 = v74;
      size_t v68 = v75;
      uint64_t v69 = v76;
      if (v76)
      {
        *((void *)v75 + 2) = &v68;
        uint64_t v74 = &v75;
        uint64_t v75 = 0;
        uint64_t v76 = 0;
      }
      else
      {
        size_t v67 = &v68;
      }
      long long v70 = v77;
      long long v77 = 0uLL;
      char v71 = 1;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v59, (uint64_t)&v65);
      std::runtime_error::runtime_error(&v52, &v59);
      long long v53 = v60;
      int v38 = (unsigned int *)v62;
      v52.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v54 = v61;
      uint64_t v55 = v62;
      uint64_t v56 = v63;
      if (v63)
      {
        *(void *)(v62 + 16) = &v55;
        char v61 = (unsigned int **)&v62;
        uint64_t v62 = 0;
        uint64_t v63 = 0;
        int v38 = 0;
      }
      else
      {
        uint64_t v54 = (unsigned int **)&v55;
      }
      long long v57 = v64;
      long long v64 = 0uLL;
      char v58 = 0;
      v59.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v61, v38);
      MEMORY[0x192FA3C30](&v59);
      if (v71)
      {
        v65.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        uint64_t v39 = (std::__shared_weak_count *)*((void *)&v70 + 1);
        if (*((void *)&v70 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v70 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v67, v68);
        MEMORY[0x192FA3C30](&v65);
      }
      if (!v78) {
        ((void (*)(std::runtime_error *))v72.~runtime_error)(&v72);
      }
      if (v58)
      {
LABEL_108:
        *(unsigned char *)(a1 + 72) = 1;
      }
      else
      {
        std::runtime_error::runtime_error(&v72, &v52);
        long long v73 = v53;
        v72.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        uint64_t v74 = v54;
        uint64_t v75 = (unsigned int *)v55;
        uint64_t v76 = v56;
        if (v56)
        {
          *(void *)(v55 + 16) = &v75;
          uint64_t v54 = (unsigned int **)&v55;
          uint64_t v55 = 0;
          uint64_t v56 = 0;
        }
        else
        {
          uint64_t v74 = &v75;
        }
        long long v77 = v57;
        long long v57 = 0uLL;
        unsigned __int8 v78 = 1;
        AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v65, (uint64_t)&v72);
        std::runtime_error::runtime_error((std::runtime_error *)a1, &v65);
        *(_OWORD *)(a1 + 16) = v66;
        *(void *)a1 = &unk_1EDC827D8;
        char v48 = v68;
        *(void *)(a1 + 32) = v67;
        *(void *)(a1 + 40) = v48;
        uint64_t v49 = a1 + 40;
        uint64_t v50 = v69;
        *(void *)(a1 + 48) = v69;
        if (v50)
        {
          *((void *)v48 + 2) = v49;
          size_t v67 = &v68;
          size_t v68 = 0;
          uint64_t v69 = 0;
          char v48 = 0;
        }
        else
        {
          *(void *)(a1 + 32) = v49;
        }
        *(_OWORD *)(a1 + 56) = v70;
        long long v70 = 0uLL;
        *(unsigned char *)(a1 + 72) = 0;
        v65.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v67, v48);
        MEMORY[0x192FA3C30](&v65);
        if (v78)
        {
          v72.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
          int v51 = (std::__shared_weak_count *)*((void *)&v77 + 1);
          if (*((void *)&v77 + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v77 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v74, v75);
          MEMORY[0x192FA3C30](&v72);
        }
        if (!v58) {
          ((void (*)(std::runtime_error *))v52.~runtime_error)(&v52);
        }
      }
      return;
    case 9:
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a2, (uint64_t)"<array>\n", 8);
      if (*(_DWORD *)(v5 + 24) == 9) {
        uint64_t v30 = (uint64_t *)v5;
      }
      else {
        uint64_t v30 = 0;
      }
      uint64_t v31 = *v30;
      uint64_t v32 = v30[1];
      if (*v30 == v32) {
        goto LABEL_59;
      }
      do
      {
        if (!v78)
        {
          std::runtime_error::runtime_error(&v65, &v72);
          long long v66 = v73;
          v65.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
          size_t v67 = v74;
          size_t v68 = v75;
          uint64_t v69 = v76;
          if (v76)
          {
            *((void *)v75 + 2) = &v68;
            uint64_t v74 = &v75;
            uint64_t v75 = 0;
            uint64_t v76 = 0;
          }
          else
          {
            size_t v67 = &v68;
          }
          long long v70 = v77;
          long long v77 = 0uLL;
          char v71 = 1;
          AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v52, (uint64_t)&v65);
          std::runtime_error::runtime_error((std::runtime_error *)a1, &v52);
          *(_OWORD *)(a1 + 16) = v53;
          *(void *)a1 = &unk_1EDC827D8;
          uint64_t v44 = v55;
          *(void *)(a1 + 32) = v54;
          *(void *)(a1 + 40) = v44;
          uint64_t v45 = a1 + 40;
          uint64_t v46 = v56;
          *(void *)(a1 + 48) = v56;
          if (v46)
          {
            *(void *)(v44 + 16) = v45;
            uint64_t v54 = (unsigned int **)&v55;
            uint64_t v55 = 0;
            uint64_t v56 = 0;
            uint64_t v44 = 0;
          }
          else
          {
            *(void *)(a1 + 32) = v45;
          }
          *(_OWORD *)(a1 + 56) = v57;
          long long v57 = 0uLL;
          *(unsigned char *)(a1 + 72) = 0;
          v52.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
          std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v54, (unsigned int *)v44);
          MEMORY[0x192FA3C30](&v52);
          if (v71)
          {
            v65.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
            char v47 = (std::__shared_weak_count *)*((void *)&v70 + 1);
            if (*((void *)&v70 + 1)
              && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v70 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v67, v68);
            MEMORY[0x192FA3C30](&v65);
          }
          if (!v78) {
            ((void (*)(std::runtime_error *))v72.~runtime_error)(&v72);
          }
          return;
        }
        LOBYTE(v65.__vftable) = 10;
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a2, (uint64_t)&v65, 1);
        if (!v78) {
          ((void (*)(std::runtime_error *))v72.~runtime_error)(&v72);
        }
        v31 += 32;
      }
      while (v31 != v32);
LABEL_59:
      char v33 = "</array>";
LABEL_64:
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a2, (uint64_t)v33, 8);
      goto LABEL_108;
    default:
      goto LABEL_108;
  }
}

void sub_18DAA6A78(_Unwind_Exception *exception_object)
{
  if (!*(unsigned char *)(v1 - 96)) {
    (**(void (***)(uint64_t))(v1 - 168))(v1 - 168);
  }
  _Unwind_Resume(exception_object);
}

std::error_code *AMSCore::PListData::anonymous namespace'::xmlEncode(std::error_code *result, void *a2, uint64_t a3, std::string::size_type a4)
{
  uint64_t v6 = result;
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  long long v27 = result + 1;
  p_char cat = &result[2].__cat_;
  uint64_t v24 = *(std::runtime_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
  uint64_t v25 = (std::runtime_error_vtbl *)*MEMORY[0x1E4FBA418];
  while (a4)
  {
    if ((a4 & 0x8000000000000000) != 0) {
      goto LABEL_67;
    }
    uint64_t v7 = std::locale::classic();
    uint64_t v8 = std::locale::use_facet(v7, MEMORY[0x1E4FBA270]);
    long long v50 = 0u;
    v51[0] = 0u;
    long long v49 = 0u;
    memset(v48, 0, sizeof(v48));
    std::runtime_error v46 = (std::runtime_error)0;
    std::error_code v47 = (std::error_code)0;
    __what_arg.__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v30.__val_ + 7) = 1;
    __p.__vftable = (std::runtime_error_vtbl *)32;
    uint64_t v40 = 0;
    if (((unsigned int (*)(const std::locale::facet *, std::runtime_error *, uint64_t, std::string::size_type, std::string *, std::runtime_error *, char *, uint64_t *))v8->__vftable[1].~facet_0)(v8, &v46, a3, a3 + a4, &__what_arg, &__p, (char *)&__p.__vftable + 4, &v40) < 2)
    {
      if (*((char *)&v30.__val_ + 7) < 0)
      {
        if (!__p.__imp_.__imp_) {
LABEL_67:
        }
          __break(1u);
        p_p = __p.__vftable;
      }
      else
      {
        if (!*((unsigned char *)&v30.__val_ + 7)) {
          goto LABEL_67;
        }
        p_p = (std::runtime_error_vtbl *)&__p;
      }
      std::string::size_type v11 = a4 - (__what_arg.__r_.__value_.__r.__words[0] - a3);
      if (a4 < __what_arg.__r_.__value_.__r.__words[0] - a3) {
        std::__throw_out_of_range[abi:fe180100]("string_view::substr");
      }
      LODWORD(v34.__vftable) = p_p->~runtime_error;
      char v39 = 1;
      if ((*((unsigned char *)&v30.__val_ + 7) & 0x80) != 0)
      {
LABEL_16:
        operator delete(__p.__vftable);
        if (!v39) {
          goto LABEL_17;
        }
        goto LABEL_22;
      }
    }
    else
    {
      AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[46]>((uint64_t)&v41, 3u, "Failed to decode UTF-8 character from string.");
      std::runtime_error::runtime_error(&v34, &v41);
      std::error_code ec = v41.__ec_;
      uint64_t v9 = (unsigned int *)*((void *)&v42 + 1);
      v34.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      long long v36 = v42;
      uint64_t v37 = v43;
      if (v43)
      {
        *(void *)(*((void *)&v42 + 1) + 16) = (char *)&v36 + 8;
        uint64_t v9 = 0;
        *(void *)&long long v42 = (char *)&v42 + 8;
        *((void *)&v42 + 1) = 0;
        uint64_t v43 = 0;
      }
      else
      {
        *(void *)&long long v36 = (char *)&v36 + 8;
      }
      long long v38 = v44;
      long long v44 = 0uLL;
      char v39 = 0;
      v41.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v42, v9);
      MEMORY[0x192FA3C30](&v41);
      std::string::size_type v11 = a4;
      if ((*((unsigned char *)&v30.__val_ + 7) & 0x80) != 0) {
        goto LABEL_16;
      }
    }
    if (!v39)
    {
LABEL_17:
      std::runtime_error::runtime_error(&v46, &v34);
      std::error_code v47 = ec;
      v46.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      v48[0] = v36;
      *(void *)&v48[1] = v37;
      if (v37)
      {
        *(void *)(*((void *)&v36 + 1) + 16) = (char *)v48 + 8;
        *(void *)&long long v36 = (char *)&v36 + 8;
        *((void *)&v36 + 1) = 0;
        uint64_t v37 = 0;
      }
      else
      {
        *(void *)&v48[0] = (char *)v48 + 8;
      }
      *(_OWORD *)((char *)&v48[1] + 8) = v38;
      long long v38 = 0uLL;
      BYTE8(v48[2]) = 1;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v41, (uint64_t)&v46);
      std::runtime_error::runtime_error((std::runtime_error *)v6, &v41);
      *long long v27 = v41.__ec_;
      *(void *)&v6->__val_ = &unk_1EDC827D8;
      uint64_t v16 = (std::error_category *)*((void *)&v42 + 1);
      *(void *)&v6[2].__val_ = v42;
      v6[2].__cat_ = v16;
      uint64_t v17 = v43;
      *(void *)&v6[3].__val_ = v43;
      if (v17)
      {
        v16[2].__vftable = (std::error_category_vtbl *)p_cat;
        uint64_t v16 = 0;
        *(void *)&long long v42 = (char *)&v42 + 8;
        *((void *)&v42 + 1) = 0;
        uint64_t v43 = 0;
      }
      else
      {
        *(void *)&v6[2].__val_ = p_cat;
      }
      *(_OWORD *)&v6[3].__cat_ = v44;
      long long v44 = 0uLL;
      LOBYTE(v6[4].__cat_) = 0;
      v41.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v42, (unsigned int *)v16);
      uint64_t result = (std::error_code *)MEMORY[0x192FA3C30](&v41);
      if (BYTE8(v48[2]))
      {
        v46.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        uint64_t v18 = *(std::__shared_weak_count **)&v48[2];
        if (*(void *)&v48[2]
          && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v48[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v48, *((unsigned int **)&v48[0] + 1));
        uint64_t v19 = &v46;
LABEL_60:
        uint64_t result = (std::error_code *)MEMORY[0x192FA3C30](v19);
      }
      char v21 = 0;
      if (v39) {
        goto LABEL_3;
      }
      goto LABEL_2;
    }
LABEL_22:
    if ((LODWORD(v34.__vftable) > 0xD || ((1 << SLOBYTE(v34.__vftable)) & 0x2600) == 0)
      && (LODWORD(v34.__vftable) - 0x10000) >= 0x100000
      && (LODWORD(v34.__vftable) - 32) >> 5 >= 0x6BF
      && (LODWORD(v34.__vftable) - 57344) >> 1 >= 0xFFF)
    {
      std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v46);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v46, (uint64_t)"Failed to encode character with value: ", 39);
      std::ostream::operator<<();
      std::stringbuf::str[abi:fe180100]((uint64_t)&v46.__imp_, &__what_arg);
      v46.__vftable = v25;
      *(std::runtime_error_vtbl **)((char *)&v46.__vftable + (unint64_t)v25[-1].~runtime_error) = v24;
      v46.__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
      if (SHIBYTE(v49) < 0) {
        operator delete(*((void **)&v48[2] + 1));
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x192FA3FD0](v51);
      *(void *)&v53.__val_ = 3;
      v53.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
      std::system_error::system_error(&v41, v53, &__what_arg);
      if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__what_arg.__r_.__value_.__l.__data_);
      }
      *((void *)&v42 + 1) = 0;
      uint64_t v43 = 0;
      v41.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
      *(void *)&long long v42 = (char *)&v42 + 8;
      long long v44 = 0uLL;
      std::runtime_error::runtime_error(&__p, &v41);
      std::error_code v30 = v41.__ec_;
      uint64_t v15 = (unsigned int *)*((void *)&v42 + 1);
      __p.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      long long v31 = v42;
      uint64_t v32 = v43;
      if (v43)
      {
        *(void *)(*((void *)&v42 + 1) + 16) = (char *)&v31 + 8;
        uint64_t v15 = 0;
        *(void *)&long long v42 = (char *)&v42 + 8;
        *((void *)&v42 + 1) = 0;
        uint64_t v43 = 0;
      }
      else
      {
        *(void *)&long long v31 = (char *)&v31 + 8;
      }
      long long v33 = v44;
      long long v44 = 0uLL;
      v41.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v42, v15);
      MEMORY[0x192FA3C30](&v41);
      std::runtime_error::runtime_error((std::runtime_error *)v6, &__p);
      *long long v27 = v30;
      *(void *)&v6->__val_ = &unk_1EDC827D8;
      char v22 = (std::error_category *)*((void *)&v31 + 1);
      *(void *)&v6[2].__val_ = v31;
      v6[2].__cat_ = v22;
      uint64_t v23 = v32;
      *(void *)&v6[3].__val_ = v32;
      if (v23)
      {
        v22[2].__vftable = (std::error_category_vtbl *)p_cat;
        char v22 = 0;
        *(void *)&long long v31 = (char *)&v31 + 8;
        *((void *)&v31 + 1) = 0;
        uint64_t v32 = 0;
      }
      else
      {
        *(void *)&v6[2].__val_ = p_cat;
      }
      *(_OWORD *)&v6[3].__cat_ = v33;
      long long v33 = 0uLL;
      LOBYTE(v6[4].__cat_) = 0;
      __p.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v31, (unsigned int *)v22);
      uint64_t v19 = &__p;
      goto LABEL_60;
    }
    std::string::size_type v12 = a4 - v11;
    std::string::size_type v13 = "&lt;";
    uint64_t v14 = 4;
    switch(LODWORD(v34.__vftable))
    {
      case '""':
        std::string::size_type v13 = "&quot;";
        uint64_t v14 = 6;
        goto LABEL_51;
      case '&':
        std::string::size_type v13 = "&amp;";
        uint64_t v14 = 5;
        goto LABEL_51;
      case '\'':
        std::string::size_type v13 = "&apos;";
        uint64_t v14 = 6;
        goto LABEL_51;
      case '<':
        goto LABEL_51;
      case '>':
        std::string::size_type v13 = "&gt;";
        uint64_t v14 = 4;
LABEL_51:
        uint64_t result = (std::error_code *)std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a2, (uint64_t)v13, v14);
        break;
      default:
        if (a4 >= v12) {
          uint64_t v20 = a4 - v11;
        }
        else {
          uint64_t v20 = a4;
        }
        uint64_t result = (std::error_code *)std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a2, a3, v20);
        break;
    }
    if (a4 < v11) {
      std::__throw_out_of_range[abi:fe180100]("string_view::substr");
    }
    a3 += v12;
    char v21 = 1;
    a4 = v11;
    if (v39) {
      goto LABEL_3;
    }
LABEL_2:
    uint64_t result = (std::error_code *)((uint64_t (*)(std::runtime_error *))v34.~runtime_error)(&v34);
LABEL_3:
    if ((v21 & 1) == 0) {
      return result;
    }
  }
  LOBYTE(v6[4].__cat_) = 1;
  return result;
}

void sub_18DAA738C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a2)
  {
    if (a63 < 0) {
      operator delete(__p);
    }
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[46]>(uint64_t a1, unsigned int a2, const char *a3)
{
  uint64_t v4 = a2;
  AMSCore::StringUtils::join<char [46]>(a3, &__what_arg);
  *(void *)&v15.__val_ = v4;
  v15.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v9, v15, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  v9.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  uint64_t v10 = &v11;
  long long v13 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v9);
  *(std::error_code *)(a1 + 16) = v9.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v5 = v11;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = a1 + 40;
  uint64_t v7 = v12;
  *(void *)(a1 + 48) = v12;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    uint64_t v5 = 0;
    uint64_t v10 = &v11;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v6;
  }
  *(_OWORD *)(a1 + 56) = v13;
  long long v13 = 0uLL;
  v9.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v5);
  return MEMORY[0x192FA3C30](&v9);
}

void sub_18DAA7590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::runtime_error *std::expected<void,AMSCore::Error>::operator=[abi:fe180100](std::runtime_error *this, std::runtime_error *a2)
{
  if (LOBYTE(this[4].__imp_.__imp_))
  {
    if (!LOBYTE(a2[4].__imp_.__imp_))
    {
      std::runtime_error::runtime_error(this, a2);
      this->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA448] + 16);
      this[1] = a2[1];
      this->__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      this[2].__vftable = a2[2].__vftable;
      p_uint64_t imp = (std::runtime_error_vtbl *)&a2[2].__imp_;
      uint64_t imp = a2[2].__imp_.__imp_;
      this[2].__imp_.__imp_ = imp;
      uint64_t v6 = (std::runtime_error_vtbl *)&this[2].__imp_;
      uint64_t v7 = a2[3].__vftable;
      this[3].__vftable = v7;
      if (v7)
      {
        *((void *)imp + 2) = v6;
        a2[2].__vftable = p_imp;
        p_imp->~runtime_error = 0;
        a2[3].__vftable = 0;
      }
      else
      {
        this[2].__vftable = v6;
      }
      *(std::runtime_error *)((char *)this + 56) = *(std::runtime_error *)((char *)a2 + 56);
      a2[3].__imp_.__imp_ = 0;
      a2[4].__vftable = 0;
      LOBYTE(this[4].__imp_.__imp_) = 0;
    }
  }
  else if (LOBYTE(a2[4].__imp_.__imp_))
  {
    ((void (*)(std::runtime_error *))this->~runtime_error)(this);
    LOBYTE(this[4].__imp_.__imp_) = 1;
  }
  else
  {
    AMSCore::Error::operator=((uint64_t)this, (uint64_t)a2);
  }
  return this;
}

void AMSCore::SQLiteDatabase::Transaction::commit(atomic_ullong *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = atomic_exchange(this + 1, 0);
  if (v3)
  {
    v8[0] = 0;
    v8[1] = 0;
    uint64_t v7 = v8;
    *((void *)&v10 + 1) = 0;
    AMSCore::SQLiteStatement::exec(a2, (sqlite3 **)(v3 + 184), &v7, (uint64_t)&v9);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v7, v8[0]);
  }
  else
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[58]>((uint64_t)&v9, 2u, "Transaction was already committed or has been moved from.");
    std::runtime_error::runtime_error((std::runtime_error *)a2, &v9);
    *(_OWORD *)(a2 + 16) = v10;
    *(void *)a2 = &unk_1EDC827D8;
    uint64_t v4 = v12;
    *(void *)(a2 + 32) = v11;
    *(void *)(a2 + 40) = v4;
    uint64_t v5 = a2 + 40;
    uint64_t v6 = v13;
    *(void *)(a2 + 48) = v13;
    if (v6)
    {
      *(void *)(v4 + 16) = v5;
      uint64_t v11 = &v12;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v4 = 0;
    }
    else
    {
      *(void *)(a2 + 32) = v5;
    }
    *(_OWORD *)(a2 + 56) = v14;
    long long v14 = 0uLL;
    *(unsigned char *)(a2 + 72) = 0;
    v9.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v11, (unsigned int *)v4);
    MEMORY[0x192FA3C30](&v9);
  }
}

void sub_18DAA7818(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[58]>(uint64_t a1, unsigned int a2, const char *a3)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v12);
  size_t v6 = strlen(a3);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v12, (uint64_t)a3, v6);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v12.__imp_, &v11);
  v12.__vftable = (std::system_error_vtbl *)*MEMORY[0x1E4FBA418];
  *(std::system_error_vtbl **)((char *)&v12.__vftable + (unint64_t)v12.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
  v12.__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
  if (v18 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FA3FD0](&v19);
  *(void *)&v20.__val_ = a2;
  v20.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v12, v20, &v11);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  v12.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  uint64_t v13 = &v14;
  long long v16 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v12);
  *(std::error_code *)(a1 + 16) = v12.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v7 = v14;
  *(void *)(a1 + 32) = v13;
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = a1 + 40;
  uint64_t v9 = v15;
  *(void *)(a1 + 48) = v15;
  if (v9)
  {
    *(void *)(v7 + 16) = v8;
    uint64_t v7 = 0;
    uint64_t v13 = &v14;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v8;
  }
  *(_OWORD *)(a1 + 56) = v16;
  long long v16 = 0uLL;
  v12.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v13, (unsigned int *)v7);
  return MEMORY[0x192FA3C30](&v12);
}

void sub_18DAA7A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::SQLiteDatabase::Transaction::~Transaction(AMSCore::SQLiteDatabase::Transaction *this)
{
  AMSCore::SQLiteDatabase::Transaction::~Transaction(this);
  JUMPOUT(0x192FA4080);
}

{
  unint64_t v2;
  std::__shared_weak_count *v3;
  sqlite3_mutex *v4;
  unsigned int **v5;
  unsigned int *v6[2];
  void v7[9];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t v12;

  std::system_error v12 = *MEMORY[0x1E4F143B8];
  int v2 = atomic_exchange((atomic_ullong *volatile)this + 1, 0);
  if (!v2) {
    goto LABEL_7;
  }
  v6[0] = 0;
  v6[1] = 0;
  uint64_t v5 = v6;
  std::string v11 = 0;
  AMSCore::SQLiteStatement::exec((uint64_t)v7, (sqlite3 **)(v2 + 128), &v5, (uint64_t)&v9);
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v5, v6[0]);
  if (v8) {
    goto LABEL_7;
  }
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v9);
  AMSCore::Logger::log<char [30],AMSCore::Error>(v9, 4u, (uint64_t)"data", 4, "Transaction rollback failed: ", (uint64_t)v7);
  unint64_t v3 = v10;
  if (v10)
  {
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v8)
  {
LABEL_7:
    if (!*((unsigned char *)this + 24)) {
      return;
    }
  }
  else
  {
    (*(void (**)(void *))v7[0])(v7);
    if (!*((unsigned char *)this + 24)) {
      return;
    }
  }
  uint64_t v4 = sqlite3_db_mutex(**((sqlite3 ***)this + 2));
  sqlite3_mutex_leave(v4);
}

void sub_18DAA7C2C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100](v2 - 56);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Logger::log<char [30],AMSCore::Error>(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= a2)
  {
    char v10 = a2;
    uint64_t v11 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v17);
    uint64_t v12 = *(void *)(v17[0] - 24);
    {
    }
    size_t v13 = strlen(a5);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v17, (uint64_t)a5, v13);
    AMSCore::operator<<(v17, a6);
    uint64_t v14 = v17[6];
    uint64_t v15 = (char *)v17 + *(void *)(v17[0] - 24);
    if ((v15[32] & 5) != 0)
    {
      uint64_t v16 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v15 + 5) + 32))(&rep);
      uint64_t v16 = v24;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v21 = v10;
    uint64_t v22 = v14;
    uint64_t v23 = v16;
    (*(void (**)(void, uint64_t, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v11 + 16) + 16))(*(void *)(v11 + 16), a3, a4, &rep);
    v17[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v17[1] = MEMORY[0x1E4FBA470] + 16;
    if (v18 < 0) {
      operator delete((void *)v17[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v19);
  }
  return result;
}

void sub_18DAA7F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::expected<AMSCore::SQLiteDatabase,AMSCore::Error>::expected[abi:fe180100]<AMSCore::Error>(std::runtime_error *a1, uint64_t a2)
{
  unint64_t v3 = std::runtime_error::runtime_error(a1, (const std::runtime_error *)a2);
  v3->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA448] + 16);
  v3[1] = *(std::runtime_error *)(a2 + 16);
  v3->__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  v3[2].__vftable = *(std::runtime_error_vtbl **)(a2 + 32);
  uint64_t v4 = (void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 40);
  v3[2].__imp_.__imp_ = (const char *)v5;
  p_uint64_t imp = (std::runtime_error_vtbl *)&v3[2].__imp_;
  uint64_t v7 = *(std::runtime_error_vtbl **)(a2 + 48);
  v3[3].__vftable = v7;
  if (v7)
  {
    *(void *)(v5 + 16) = p_imp;
    *(void *)(a2 + 32) = v4;
    *uint64_t v4 = 0;
    *(void *)(a2 + 48) = 0;
  }
  else
  {
    v3[2].__vftable = p_imp;
  }
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)((char *)v3 + 56) = result;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  LOBYTE(v3[15].__vftable) = 0;
  return result;
}

void AMSCore::Log::warn<char const(&)[70]>()
{
  AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v1);
  AMSCore::Logger::log<char [70]>(v1);
  uint64_t v0 = v2;
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
      std::__shared_weak_count::__release_weak(v0);
    }
  }
}

void sub_18DAA807C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t AMSCore::Logger::log<char [70]>(uint64_t result)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)(result + 8) <= 3u)
  {
    uint64_t v1 = result;
    std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v6);
    uint64_t v2 = *(void *)(v6[0] - 24);
    {
    }
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v6, (uint64_t)"Skipping integrity check because SQLite was compiled without support.", 69);
    uint64_t v3 = v6[6];
    uint64_t v4 = (char *)v6 + *(void *)(v6[0] - 24);
    if ((v4[32] & 5) != 0)
    {
      uint64_t v5 = -1;
    }
    else
    {
      (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v4 + 5) + 32))(&rep);
      uint64_t v5 = v13;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
    char v10 = 3;
    uint64_t v11 = v3;
    uint64_t v12 = v5;
    (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v1 + 16) + 16))(*(void *)(v1 + 16), "data", 4, &rep);
    v6[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v6[1] = MEMORY[0x1E4FBA470] + 16;
    if (v7 < 0) {
      operator delete((void *)v6[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x192FA3FD0](&v8);
  }
  return result;
}

void sub_18DAA831C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[25]>(uint64_t a1, unsigned int a2, const char *a3)
{
  uint64_t v4 = a2;
  AMSCore::StringUtils::join<char [25]>(&__what_arg, a3);
  *(void *)&v15.__val_ = v4;
  v15.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v9, v15, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  v9.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  char v10 = &v11;
  long long v13 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v9);
  *(std::error_code *)(a1 + 16) = v9.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v5 = v11;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = a1 + 40;
  uint64_t v7 = v12;
  *(void *)(a1 + 48) = v12;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    uint64_t v5 = 0;
    char v10 = &v11;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v6;
  }
  *(_OWORD *)(a1 + 56) = v13;
  long long v13 = 0uLL;
  v9.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v5);
  return MEMORY[0x192FA3C30](&v9);
}

void sub_18DAA8484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::StringUtils::join<char [25]>(std::string *a1, const char *a2)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v6);
  size_t v4 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v6, (uint64_t)a2, v4);
  std::stringbuf::str[abi:fe180100]((uint64_t)v7, a1);
  uint64_t v6 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v7[-1] + *(void *)(v6 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v7[0] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FA3FD0](&v9);
}

uint64_t *std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string_view>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string_view>,void *>>>>::~unique_ptr[abi:fe180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16) && *(char *)(v2 + 55) < 0) {
      operator delete(*(void **)(v2 + 32));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void *std::__function::__func<AMSCore::SQLiteDatabase::verifyIntegrity(void)::$_0,std::allocator<AMSCore::SQLiteDatabase::verifyIntegrity(void)::$_0>,BOOL ()(std::map<std::string,std::string_view> &&)>::target_type()
{
}

uint64_t std::__function::__func<AMSCore::SQLiteDatabase::verifyIntegrity(void)::$_0,std::allocator<AMSCore::SQLiteDatabase::verifyIntegrity(void)::$_0>,BOOL ()(std::map<std::string,std::string_view> &&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore14SQLiteDatabase15verifyIntegrityEvE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore14SQLiteDatabase15verifyIntegrityEvE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore14SQLiteDatabase15verifyIntegrityEvE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore14SQLiteDatabase15verifyIntegrityEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMSCore::SQLiteDatabase::verifyIntegrity(void)::$_0,std::allocator<AMSCore::SQLiteDatabase::verifyIntegrity(void)::$_0>,BOOL ()(std::map<std::string,std::string_view> &&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDC82D10;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMSCore::SQLiteDatabase::verifyIntegrity(void)::$_0,std::allocator<AMSCore::SQLiteDatabase::verifyIntegrity(void)::$_0>,BOOL ()(std::map<std::string,std::string_view> &&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EDC82D10;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMSCore::SQLiteDatabase::verifyIntegrity(void)::$_0,std::allocator<AMSCore::SQLiteDatabase::verifyIntegrity(void)::$_0>,BOOL ()(std::map<std::string,std::string_view> &&)>::~__func()
{
}

uint64_t AMSCore::SQLiteDatabase::close(AMSCore::SQLiteDatabase *this, sqlite3 *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  sqlite3_busy_timeout(this, 0);
  {
  }
    && sqlite3_exec(this, "PRAGMA optimize", 0, 0, 0))
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v16);
    uint64_t v3 = v16;
    if (*(unsigned __int8 *)(v16 + 8) <= 3u)
    {
      std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v18);
      uint64_t v4 = *(void *)(v18 - 24);
      {
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v18, (uint64_t)"Unable to optimize the database right now. Will try again next time. __n128 result = ", 78);
      std::ostream::operator<<();
      uint64_t v5 = v20;
      uint64_t v6 = (char *)&v18 + *(void *)(v18 - 24);
      if ((v6[32] & 5) != 0)
      {
        uint64_t v7 = -1;
      }
      else
      {
        (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v6 + 5) + 32))(&rep);
        uint64_t v7 = v28;
      }
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
      char v25 = 3;
      uint64_t v26 = v5;
      uint64_t v27 = v7;
      (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v3 + 16) + 16))(*(void *)(v3 + 16), "data", 4, &rep);
      uint64_t v18 = *MEMORY[0x1E4FBA418];
      *(uint64_t *)((char *)&v18 + *(void *)(v18 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      uint64_t v19 = MEMORY[0x1E4FBA470] + 16;
      if (v22 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x192FA3FD0](v23);
    }
    char v8 = v17;
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (sqlite3_exec(this, "VACUUM", 0, 0, 0))
  {
    AMSCore::ServiceProvider<AMSCore::Logger>::getDefault(&v16);
    uint64_t v9 = v16;
    if (*(unsigned __int8 *)(v16 + 8) <= 3u)
    {
      std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v18);
      uint64_t v10 = *(void *)(v18 - 24);
      {
      }
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v18, (uint64_t)"Unable to vacuum the database right now. Will try again next time. __n128 result = ", 76);
      std::ostream::operator<<();
      uint64_t v11 = v20;
      uint64_t v12 = (char *)&v18 + *(void *)(v18 - 24);
      if ((v12[32] & 5) != 0)
      {
        uint64_t v13 = -1;
      }
      else
      {
        (*(void (**)(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *__return_ptr))(**((void **)v12 + 5) + 32))(&rep);
        uint64_t v13 = v28;
      }
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = std::chrono::system_clock::now().__d_.__rep_;
      char v25 = 3;
      uint64_t v26 = v11;
      uint64_t v27 = v13;
      (*(void (**)(void, const char *, uint64_t, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *))(**(void **)(v9 + 16) + 16))(*(void *)(v9 + 16), "data", 4, &rep);
      uint64_t v18 = *MEMORY[0x1E4FBA418];
      *(uint64_t *)((char *)&v18 + *(void *)(v18 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      uint64_t v19 = MEMORY[0x1E4FBA470] + 16;
      if (v22 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x192FA3FD0](v23);
    }
    uint64_t v14 = v17;
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return sqlite3_close(this);
}

void sub_18DAA8D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t _ZNKSt3__120__shared_ptr_pointerIP7sqlite3PDoFvS2_ENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "PDoFvP7sqlite3E"
    || ((v3 & (unint64_t)"PDoFvP7sqlite3E" & 0x8000000000000000) != 0) != __OFSUB__(v3, "PDoFvP7sqlite3E")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PDoFvP7sqlite3E" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__120__shared_ptr_pointerIP7sqlite3PDoFvS2_ENS_9allocatorIS1_EEE16__on_zero_sharedEv(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void _ZNSt3__120__shared_ptr_pointerIP7sqlite3PDoFvS2_ENS_9allocatorIS1_EEED0Ev(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

uint64_t AMSCore::StringUtils::join<char [31],std::string>(std::string *a1, const char *a2, uint64_t a3)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v11);
  size_t v6 = strlen(a2);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v11, (uint64_t)a2, v6);
  int v7 = *(char *)(a3 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = *(void *)a3;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a3 + 8);
  }
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v11, v8, v9);
  std::stringbuf::str[abi:fe180100]((uint64_t)v12, a1);
  uint64_t v11 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v12[-1] + *(void *)(v11 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v12[0] = MEMORY[0x1E4FBA470] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FA3FD0](&v14);
}

void AMSCore::SQLiteMutex::makeError(uint64_t a1, sqlite3 **a2, int a3, uint64_t a4, uint64_t a5)
{
  std::system_category();
  uint64_t v10 = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  uint64_t v11 = 3;
  switch((char)a3)
  {
    case 1:
    case 11:
    case 17:
    case 26:
      goto LABEL_2;
    case 3:
    case 23:
      uint64_t v10 = (const std::error_category *)&AMSCore::Error::Category::network(void)::instance;
      uint64_t v11 = 309;
      break;
    case 4:
    case 9:
      uint64_t v11 = 1;
      break;
    case 5:
      uint64_t v11 = 14;
      break;
    case 6:
      uint64_t v11 = 9;
      break;
    case 10:
      uint64_t v11 = 16;
      break;
    case 12:
      uint64_t v11 = 7;
      break;
    case 19:
      if (a3 == 1555) {
        uint64_t v11 = 15;
      }
      else {
LABEL_2:
      }
        uint64_t v11 = 2;
      break;
    case 20:
      uint64_t v11 = 4;
      break;
    case 21:
    case 25:
      break;
    default:
      uint64_t v10 = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
      uint64_t v11 = 999;
      break;
  }
  uint64_t v12 = sqlite3_errstr(a3);
  if (v12) {
    char v13 = v12;
  }
  else {
    char v13 = "null";
  }
  uint64_t v14 = sqlite3_errmsg(*a2);
  if (v14) {
    std::error_code v15 = v14;
  }
  else {
    std::error_code v15 = "null";
  }
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v19);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v19, a4, a5);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v19, (uint64_t)" | __n128 result = ", 12);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v19, (uint64_t)" | description = ", 17);
  size_t v16 = strlen(v13);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v19, (uint64_t)v13, v16);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v19, (uint64_t)" | message = ", 13);
  size_t v17 = strlen(v15);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v19, (uint64_t)v15, v17);
  std::stringbuf::str[abi:fe180100]((uint64_t)v20, &v18);
  uint64_t v19 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v20[-1] + *(void *)(v19 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v20[0] = MEMORY[0x1E4FBA470] + 16;
  if (v21 < 0) {
    operator delete((void *)v20[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FA3FD0](&v22);
  *(void *)&v23.__val_ = v11;
  v23.__cat_ = v10;
  std::system_error::system_error((std::system_error *)a1, v23, &v18);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_1EDC827D8;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
}

void sub_18DAA92B8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __clang_call_terminate(a1);
  }
  __clang_call_terminate(a1);
}

void *_ZNKSt3__110__function6__funcIPDoFvP12sqlite3_stmtENS_9allocatorIS5_EEFvS3_EE11target_typeEv()
{
  return &_ZTIPDoFvP12sqlite3_stmtE;
}

uint64_t _ZNKSt3__110__function6__funcIPDoFvP12sqlite3_stmtENS_9allocatorIS5_EEFvS3_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "PDoFvP12sqlite3_stmtE"
    || ((v3 & (unint64_t)"PDoFvP12sqlite3_stmtE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "PDoFvP12sqlite3_stmtE")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PDoFvP12sqlite3_stmtE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIPDoFvP12sqlite3_stmtENS_9allocatorIS5_EEFvS3_EEclEOS3_(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

void *_ZNKSt3__110__function6__funcIPDoFvP12sqlite3_stmtENS_9allocatorIS5_EEFvS3_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EDC82B00;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIPDoFvP12sqlite3_stmtENS_9allocatorIS5_EEFvS3_EED0Ev()
{
}

uint64_t AMSCore::SQLiteStatement::finalize(AMSCore::SQLiteStatement *this, sqlite3_stmt *a2)
{
  return sqlite3_finalize(this);
}

void AMSCore::SQLiteStatement::exec(uint64_t a1, sqlite3 **a2, void *a3, uint64_t a4)
{
  uint64_t v5 = sqlite3_db_mutex(*a2);
  sqlite3_mutex_enter(v5);
  uint64_t v8 = (void *)*a3;
  int v7 = a3 + 1;
  size_t v6 = v8;
  if (v8 == v7)
  {
LABEL_65:
    uint64_t v44 = a1;
    *(unsigned char *)(a1 + 72) = 1;
    uint64_t v45 = a2;
    goto LABEL_77;
  }
  while (2)
  {
    LOBYTE(__p) = 1;
    int v9 = *((_DWORD *)v6 + 20);
    if (v9 == -1) {
      char v10 = 0;
    }
    else {
      char v10 = *((_DWORD *)v6 + 20);
    }
    uint64_t v11 = (const char *)(v6 + 7);
    switch(v10)
    {
      case 0:
        if (*((char *)v6 + 55) >= 0) {
          uint64_t v12 = (const char *)(v6 + 4);
        }
        else {
          uint64_t v12 = (const char *)v6[4];
        }
        int v13 = sqlite3_bind_parameter_index(a2[2], v12);
        int v14 = sqlite3_bind_null(a2[2], v13);
        std::error_code v15 = a2;
        size_t v16 = "Failed to bind statement parameter to null.";
        goto LABEL_49;
      case 1:
        sqlite3_int64 v17 = *((unsigned __int8 *)v6 + 56);
        std::string v18 = a2;
        uint64_t v19 = a2[2];
        if (*((char *)v6 + 55) >= 0) {
          uint64_t v20 = (const char *)(v6 + 4);
        }
        else {
          uint64_t v20 = (const char *)v6[4];
        }
        goto LABEL_29;
      case 2:
        double v21 = *((double *)v6 + 7);
        if (*((char *)v6 + 55) >= 0) {
          uint64_t v22 = (const char *)(v6 + 4);
        }
        else {
          uint64_t v22 = (const char *)v6[4];
        }
        int v23 = sqlite3_bind_parameter_index(a2[2], v22);
        int v14 = sqlite3_bind_double(a2[2], v23, v21);
        std::error_code v15 = a2;
        size_t v16 = "Failed to bind statement parameter to double.";
        goto LABEL_55;
      case 3:
        sqlite3_int64 v17 = v6[7];
        std::string v18 = a2;
        uint64_t v19 = a2[2];
        if (*((char *)v6 + 55) >= 0) {
          uint64_t v20 = (const char *)(v6 + 4);
        }
        else {
          uint64_t v20 = (const char *)v6[4];
        }
        goto LABEL_29;
      case 4:
        sqlite3_int64 v17 = v6[7];
        std::string v18 = a2;
        uint64_t v19 = a2[2];
        if (*((char *)v6 + 55) >= 0) {
          uint64_t v20 = (const char *)(v6 + 4);
        }
        else {
          uint64_t v20 = (const char *)v6[4];
        }
LABEL_29:
        int v27 = sqlite3_bind_parameter_index(v19, v20);
        int v14 = sqlite3_bind_int64(v18[2], v27, v17);
        std::error_code v15 = v18;
        goto LABEL_30;
      case 5:
        if (v9 == 5) {
          uint64_t v29 = (const char **)(v6 + 7);
        }
        else {
          uint64_t v29 = 0;
        }
        if (*((char *)v29 + 23) < 0)
        {
          uint64_t v11 = *v29;
          sqlite3_uint64 v30 = (sqlite3_uint64)v29[1];
        }
        else
        {
          sqlite3_uint64 v30 = *((unsigned __int8 *)v29 + 23);
        }
        if (*((char *)v6 + 55) >= 0) {
          char v39 = (const char *)(v6 + 4);
        }
        else {
          char v39 = (const char *)v6[4];
        }
        int v40 = sqlite3_bind_parameter_index(a2[2], v39);
        int v14 = sqlite3_bind_text64(a2[2], v40, v11, v30, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL, 1u);
        std::error_code v15 = a2;
        size_t v16 = "Failed to bind statement parameter to string.";
LABEL_55:
        uint64_t v28 = 45;
        goto LABEL_56;
      case 6:
        if (v9 == 6) {
          long long v31 = (const void **)(v6 + 7);
        }
        else {
          long long v31 = 0;
        }
        sqlite3_uint64 v32 = *((unsigned __int8 *)v31 + 23);
        std::runtime_error v34 = (const void **)*v31;
        sqlite3_uint64 v33 = (sqlite3_uint64)v31[1];
        if (*((char *)v6 + 55) >= 0) {
          size_t v35 = (const char *)(v6 + 4);
        }
        else {
          size_t v35 = (const char *)v6[4];
        }
        int v36 = sqlite3_bind_parameter_index(a2[2], v35);
        if ((v32 & 0x80u) == 0) {
          sqlite3_uint64 v37 = v32;
        }
        else {
          sqlite3_uint64 v37 = v33;
        }
        if ((v32 & 0x80u) == 0) {
          long long v38 = v31;
        }
        else {
          long long v38 = v34;
        }
        int v14 = sqlite3_bind_blob64(a2[2], v36, v38, v37, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
        std::error_code v15 = a2;
        size_t v16 = "Failed to bind statement parameter to data.";
LABEL_49:
        uint64_t v28 = 43;
        goto LABEL_56;
      case 7:
        uint64_t v24 = v6[7];
        if (*((char *)v6 + 55) >= 0) {
          char v25 = (const char *)(v6 + 4);
        }
        else {
          char v25 = (const char *)v6[4];
        }
        int v26 = sqlite3_bind_parameter_index(a2[2], v25);
        int v14 = sqlite3_bind_int64(a2[2], v26, v24 / 1000);
        std::error_code v15 = a2;
LABEL_30:
        size_t v16 = "Failed to bind statement parameter to std::int64_t.";
        uint64_t v28 = 51;
LABEL_56:
        AMSCore::SQLiteMutex::makeExpected((uint64_t)&v127, v15, v14, (uint64_t)v16, v28);
        std::expected<void,AMSCore::Error>::operator=[abi:fe180100](&v151, &v127);
        if (!v133) {
          ((void (*)(std::runtime_error *))v127.~runtime_error)(&v127);
        }
        if ((_BYTE)__p)
        {
          std::system_error v41 = (void *)v6[1];
          if (v41)
          {
            do
            {
              long long v42 = v41;
              std::system_error v41 = (void *)*v41;
            }
            while (v41);
          }
          else
          {
            do
            {
              long long v42 = (void *)v6[2];
              BOOL v43 = *v42 == (void)v6;
              size_t v6 = v42;
            }
            while (!v43);
          }
          size_t v6 = v42;
          if (v42 == v7) {
            goto LABEL_65;
          }
          continue;
        }
        uint64_t v44 = a1;
        std::runtime_error::runtime_error((std::runtime_error *)a1, &v151);
        *(_OWORD *)(a1 + 16) = v152;
        *(void *)a1 = &unk_1EDC827D8;
        std::runtime_error v46 = v154;
        *(void *)(a1 + 32) = v153;
        *(void *)(a1 + 40) = v46;
        uint64_t v47 = a1 + 40;
        uint64_t v48 = v155;
        *(void *)(a1 + 48) = v155;
        if (v48)
        {
          *((void *)v46 + 2) = v47;
          char v153 = &v154;
          char v154 = 0;
          uint64_t v155 = 0;
        }
        else
        {
          *(void *)(a1 + 32) = v47;
        }
        uint64_t v45 = a2;
        *(_OWORD *)(a1 + 56) = v156;
        long long v156 = 0uLL;
        *(unsigned char *)(a1 + 72) = 0;
        if ((_BYTE)__p)
        {
LABEL_70:
          if (!*(unsigned char *)(v44 + 72)) {
            goto LABEL_246;
          }
LABEL_77:
          int64_t v122 = (_OWORD *)(v44 + 16);
          uint64_t v121 = v44 + 40;
          std::runtime_error v119 = *(std::runtime_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
          long long v120 = (std::runtime_error_vtbl *)*MEMORY[0x1E4FBA418];
          while (2)
          {
            int v52 = sqlite3_step(v45[2]);
            if (v52 == 100)
            {
              v143.__imp_.__imp_ = 0;
              uint64_t v144 = 0;
              v143.__vftable = (std::runtime_error_vtbl *)&v143.__imp_;
              int v53 = sqlite3_column_count(v45[2]);
              if (v53 >= 1)
              {
                int v54 = 0;
                int v125 = v53;
                do
                {
                  long long v141 = 0u;
                  long long v142 = 0u;
                  int v55 = sqlite3_column_type(v45[2], v54);
                  switch(v55)
                  {
                    case 1:
                      v151.__vftable = (std::runtime_error_vtbl *)sqlite3_column_int64(v45[2], v54);
                      DWORD2(v152) = 3;
                      AMSCore::Any::operator=((uint64_t)&v141, (uint64_t)&v151);
                      if (DWORD2(v152) == -1) {
                        goto LABEL_112;
                      }
                      goto LABEL_111;
                    case 2:
                      v151.__vftable = COERCE_STD_RUNTIME_ERROR_VTBL_(sqlite3_column_double(v45[2], v54));
                      DWORD2(v152) = 2;
                      AMSCore::Any::operator=((uint64_t)&v141, (uint64_t)&v151);
                      if (DWORD2(v152) != -1) {
                        goto LABEL_111;
                      }
                      goto LABEL_112;
                    case 3:
                      uint64_t v56 = sqlite3_column_text(v45[2], v54);
                      int v57 = sqlite3_column_bytes(v45[2], v54);
                      if (v57 < 0) {
                        std::string::__throw_length_error[abi:fe180100]();
                      }
                      size_t v58 = v57;
                      if (v57 >= 0x17)
                      {
                        uint64_t v64 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v57 | 7) != 0x17) {
                          uint64_t v64 = v57 | 7;
                        }
                        uint64_t v65 = v64 + 1;
                        p_dst = (std::system_error_vtbl *)operator new(v64 + 1);
                        __dst.__imp_.__imp_ = (const char *)v58;
                        *(void *)&__dst.__ec_.__val_ = v65 | 0x8000000000000000;
                        __dst.__vftable = p_dst;
                      }
                      else
                      {
                        *((unsigned char *)&__dst.__ec_.__val_ + 7) = v57;
                        p_dst = (std::system_error_vtbl *)&__dst;
                        if (!v57) {
                          goto LABEL_104;
                        }
                      }
                      memmove(p_dst, v56, v58);
LABEL_104:
                      *((unsigned char *)&p_dst->~system_error + v58) = 0;
                      std::runtime_error v151 = __dst.std::runtime_error;
                      *(void *)&long long v152 = *(void *)&__dst.__ec_.__val_;
                      memset(&__dst, 0, 24);
                      DWORD2(v152) = 5;
                      AMSCore::Any::operator=((uint64_t)&v141, (uint64_t)&v151);
                      if (DWORD2(v152) != -1) {
                        ((void (*)(std::runtime_error *, std::runtime_error *))off_1EDCA5820[DWORD2(v152)])(&v135, &v151);
                      }
                      goto LABEL_112;
                    case 4:
                      long long v60 = sqlite3_column_blob(v45[2], v54);
                      int v61 = sqlite3_column_bytes(v45[2], v54);
                      if (v61 < 0) {
                        std::string::__throw_length_error[abi:fe180100]();
                      }
                      size_t v62 = v61;
                      if (v61 >= 0x17)
                      {
                        uint64_t v66 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v61 | 7) != 0x17) {
                          uint64_t v66 = v61 | 7;
                        }
                        uint64_t v67 = v66 + 1;
                        uint64_t v63 = (std::system_error_vtbl *)operator new(v66 + 1);
                        __dst.__imp_.__imp_ = (const char *)v62;
                        *(void *)&__dst.__ec_.__val_ = v67 | 0x8000000000000000;
                        __dst.__vftable = v63;
                      }
                      else
                      {
                        *((unsigned char *)&__dst.__ec_.__val_ + 7) = v61;
                        uint64_t v63 = (std::system_error_vtbl *)&__dst;
                        if (!v61) {
                          goto LABEL_110;
                        }
                      }
                      memmove(v63, v60, v62);
LABEL_110:
                      *((unsigned char *)&v63->~system_error + v62) = 0;
                      std::runtime_error v151 = __dst.std::runtime_error;
                      *(void *)&long long v152 = *(void *)&__dst.__ec_.__val_;
                      DWORD2(v152) = 6;
                      AMSCore::Any::operator=((uint64_t)&v141, (uint64_t)&v151);
                      if (DWORD2(v152) != -1) {
LABEL_111:
                      }
                        ((void (*)(std::system_error *, std::runtime_error *))off_1EDCA5820[DWORD2(v152)])(&__dst, &v151);
LABEL_112:
                      size_t v68 = sqlite3_column_name(v45[2], v54);
                      uint64_t v69 = (std::runtime_error_vtbl *)operator new(0x58uLL);
                      v151.__vftable = v69;
                      v151.__imp_.__imp_ = (const char *)&v143.__imp_;
                      long long v70 = (void (__cdecl *)(std::runtime_error *__hidden))&v69[1].~runtime_error_0;
                      LOBYTE(v152) = 0;
                      size_t v71 = strlen(v68);
                      if (v71 >= 0x7FFFFFFFFFFFFFF8) {
                        std::string::__throw_length_error[abi:fe180100]();
                      }
                      size_t v72 = v71;
                      if (v71 >= 0x17)
                      {
                        uint64_t v73 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v71 | 7) != 0x17) {
                          uint64_t v73 = v71 | 7;
                        }
                        uint64_t v74 = v73 + 1;
                        long long v70 = (void (__cdecl *)(std::runtime_error *__hidden))operator new(v73 + 1);
                        v69[1].what = (const char *(__cdecl *)(const std::runtime_error *__hidden))v72;
                        v69[2].~runtime_error = (void (__cdecl *)(std::runtime_error *__hidden))(v74 | 0x8000000000000000);
                        v69[1].~runtime_error_0 = v70;
                      }
                      else
                      {
                        HIBYTE(v69[2].~runtime_error) = v71;
                        if (!v71) {
                          goto LABEL_120;
                        }
                      }
                      memmove(v70, v68, v72);
LABEL_120:
                      *((unsigned char *)v70 + v72) = 0;
                      LOBYTE(v69[2].~runtime_error_0) = 0;
                      LODWORD(v69[3].~runtime_error_0) = -1;
                      int v75 = DWORD2(v142);
                      if (DWORD2(v142) == -1) {
                        goto LABEL_124;
                      }
                      ((void (*)(std::system_error *))off_1EDCA5520[DWORD2(v142)])(&__dst);
                      LODWORD(v69[3].~runtime_error_0) = v75;
                      if (DWORD2(v142) == -1) {
                        goto LABEL_124;
                      }
                      if (DWORD2(v142))
                      {
                        ((void (*)(std::system_error *, long long *))off_1EDCA54D0[DWORD2(v142)])(&__dst, &v141);
LABEL_124:
                        DWORD2(v142) = 0;
                      }
                      LOBYTE(v152) = 1;
                      uint64_t v76 = v151.__vftable;
                      p_uint64_t imp = &v143.__imp_;
                      unsigned __int8 v78 = &v143.__imp_;
                      uint64_t imp = v143.__imp_.__imp_;
                      if (!v143.__imp_.__imp_) {
                        goto LABEL_152;
                      }
                      uint64_t v80 = (void **)&v151.__vftable[1].~runtime_error_0;
                      int v81 = SHIBYTE(v151.__vftable[2].~runtime_error);
                      if (v81 >= 0) {
                        size_t v82 = (void (__cdecl *)(std::runtime_error *__hidden))&v151.__vftable[1].~runtime_error_0;
                      }
                      else {
                        size_t v82 = v151.__vftable[1].~runtime_error_0;
                      }
                      if (v81 >= 0) {
                        what = (const char *(__cdecl *)(const std::runtime_error *__hidden))HIBYTE(v151.__vftable[2].~runtime_error);
                      }
                      else {
                        what = v151.__vftable[1].what;
                      }
                      break;
                    case 5:
                      if (DWORD2(v142) == -1) {
                        goto LABEL_89;
                      }
                      if (DWORD2(v142))
                      {
                        ((void (*)(std::runtime_error *, long long *))off_1EDCA54D0[DWORD2(v142)])(&v151, &v141);
LABEL_89:
                        DWORD2(v142) = 0;
                      }
                      goto LABEL_112;
                    default:
                      std::to_string(&v134, v55);
                      std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v151);
                      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v151, (uint64_t)"Unknown type. type = ", 21);
                      if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        size_t v100 = &v134;
                      }
                      else {
                        size_t v100 = (std::string *)v134.__r_.__value_.__r.__words[0];
                      }
                      if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type size = HIBYTE(v134.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        std::string::size_type size = v134.__r_.__value_.__l.__size_;
                      }
                      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v151, (uint64_t)v100, size);
                      std::stringbuf::str[abi:fe180100]((uint64_t)&v151.__imp_, &__what_arg);
                      v151.__vftable = v120;
                      *(std::runtime_error_vtbl **)((char *)&v151.__vftable + (unint64_t)v120[-1].~runtime_error) = v119;
                      v151.__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
                      if (v158 < 0) {
                        operator delete(__p);
                      }
                      std::streambuf::~streambuf();
                      std::ostream::~ostream();
                      MEMORY[0x192FA3FD0](&v159);
                      *(void *)&v160.__val_ = 4;
                      v160.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
                      std::system_error::system_error(&__dst, v160, &__what_arg);
                      if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__what_arg.__r_.__value_.__l.__data_);
                      }
                      uint64_t v147 = 0;
                      uint64_t v148 = 0;
                      __dst.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
                      char v146 = (unsigned int **)&v147;
                      long long v149 = 0uLL;
                      std::runtime_error::runtime_error(&v135, &__dst);
                      std::error_code ec = __dst.__ec_;
                      int v102 = (unsigned int *)v147;
                      v135.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
                      uint64_t v137 = v146;
                      uint64_t v138 = v147;
                      uint64_t v139 = v148;
                      if (v148)
                      {
                        *(void *)(v147 + 16) = &v138;
                        int v102 = 0;
                        char v146 = (unsigned int **)&v147;
                        uint64_t v147 = 0;
                        uint64_t v148 = 0;
                      }
                      else
                      {
                        uint64_t v137 = (unsigned int **)&v138;
                      }
                      long long v140 = v149;
                      long long v149 = 0uLL;
                      __dst.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
                      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v146, v102);
                      MEMORY[0x192FA3C30](&__dst);
                      std::runtime_error::runtime_error(&v127, &v135);
                      std::error_code v128 = ec;
                      int v103 = (unsigned int *)v138;
                      v127.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
                      long long v129 = v137;
                      char v130 = (unsigned int *)v138;
                      uint64_t v131 = v139;
                      if (v139)
                      {
                        *(void *)(v138 + 16) = &v130;
                        int v103 = 0;
                        uint64_t v137 = (unsigned int **)&v138;
                        uint64_t v138 = 0;
                        uint64_t v139 = 0;
                      }
                      else
                      {
                        long long v129 = &v130;
                      }
                      uint64_t v44 = a1;
                      long long v132 = v140;
                      long long v140 = 0uLL;
                      char v133 = 0;
                      v135.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
                      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v137, v103);
                      MEMORY[0x192FA3C30](&v135);
                      if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v134.__r_.__value_.__l.__data_);
                      }
                      if (DWORD2(v142) != -1) {
                        ((void (*)(std::runtime_error *, long long *))off_1EDCA5820[DWORD2(v142)])(&v151, &v141);
                      }
                      uint64_t v94 = (unsigned int *)v143.__imp_.__imp_;
                      goto LABEL_167;
                  }
                  while (1)
                  {
                    while (1)
                    {
                      unsigned __int8 v78 = (std::__libcpp_refstring *)imp;
                      size_t v86 = (const char *)*((void *)imp + 4);
                      int v84 = imp + 32;
                      std::error_code v85 = v86;
                      int v87 = v84[23];
                      int v88 = v87 >= 0 ? v84 : v85;
                      int v89 = v87 >= 0
                          ? (const char *(__cdecl *)(const std::runtime_error *__hidden))*((unsigned __int8 *)v84 + 23)
                          : (const char *(__cdecl *)(const std::runtime_error *__hidden))*((void *)v84 + 1);
                      size_t v90 = (size_t)((unint64_t)v89 >= (unint64_t)what ? what : v89);
                      int v91 = memcmp(v82, v88, v90);
                      if (v91) {
                        break;
                      }
                      if ((unint64_t)what >= (unint64_t)v89) {
                        goto LABEL_146;
                      }
LABEL_132:
                      uint64_t imp = v78->__imp_;
                      p_uint64_t imp = v78;
                      if (!v78->__imp_) {
                        goto LABEL_152;
                      }
                    }
                    if (v91 < 0) {
                      goto LABEL_132;
                    }
LABEL_146:
                    int v92 = memcmp(v88, v82, v90);
                    if (!v92) {
                      break;
                    }
                    if ((v92 & 0x80000000) == 0) {
                      goto LABEL_157;
                    }
LABEL_150:
                    uint64_t imp = v78[1].__imp_;
                    if (!imp)
                    {
                      p_uint64_t imp = v78 + 1;
LABEL_152:
                      v76->~runtime_error = 0;
                      v76->~runtime_error_0 = 0;
                      v76->what = (const char *(__cdecl *)(const std::runtime_error *__hidden))v78;
                      p_imp->__imp_ = (const char *)v76;
                      if (v143.~runtime_error)
                      {
                        v143.__vftable = (std::runtime_error_vtbl *)v143.~runtime_error;
                        uint64_t v76 = (std::runtime_error_vtbl *)p_imp->__imp_;
                      }
                      std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>((uint64_t *)v143.__imp_.__imp_, (uint64_t *)v76);
                      ++v144;
                      uint64_t v45 = a2;
                      goto LABEL_155;
                    }
                  }
                  if ((unint64_t)v89 < (unint64_t)what) {
                    goto LABEL_150;
                  }
LABEL_157:
                  v151.__vftable = 0;
                  uint64_t v45 = a2;
                  if (v76)
                  {
                    uint64_t v93 = LODWORD(v76[3].~runtime_error_0);
                    if (v93 != -1)
                    {
                      ((void (*)(std::system_error *, void (__cdecl **)(std::runtime_error *__hidden)))off_1EDCA5820[v93])(&__dst, &v76[2].~runtime_error_0);
                      LOBYTE(v81) = HIBYTE(v76[2].~runtime_error);
                    }
                    LODWORD(v76[3].~runtime_error_0) = -1;
                    if ((v81 & 0x80) != 0) {
                      operator delete(*v80);
                    }
                    operator delete(v76);
                  }
LABEL_155:
                  if (DWORD2(v142) != -1) {
                    ((void (*)(std::runtime_error *, long long *))off_1EDCA5820[DWORD2(v142)])(&v151, &v141);
                  }
                  ++v54;
                }
                while (v54 != v125);
              }
              uint64_t v94 = (unsigned int *)v143.__imp_.__imp_;
              std::runtime_error v127 = v143;
              *(void *)&v128.__val_ = v144;
              if (v144)
              {
                *((void *)v143.__imp_.__imp_ + 2) = &v127.__imp_;
                v143.__vftable = (std::runtime_error_vtbl *)&v143.__imp_;
                v143.__imp_.__imp_ = 0;
                uint64_t v144 = 0;
                uint64_t v94 = 0;
              }
              else
              {
                v127.__vftable = (std::runtime_error_vtbl *)&v127.__imp_;
              }
              uint64_t v44 = a1;
              char v133 = 1;
LABEL_167:
              std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v143, v94);
              if (v133)
              {
                uint64_t v95 = *(void *)(a4 + 24);
                if (!v95
                  || (*(unsigned int (**)(uint64_t, std::runtime_error *))(*(void *)v95 + 48))(v95, &v127))
                {
                  char v96 = 1;
                  if (!v133) {
                    goto LABEL_78;
                  }
LABEL_194:
                  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v127, (unsigned int *)v127.__imp_.__imp_);
                  if ((v96 & 1) == 0) {
                    goto LABEL_218;
                  }
                  continue;
                }
              }
              else
              {
                AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v151, (uint64_t)&v127);
                if (*(unsigned char *)(v44 + 72))
                {
                  std::runtime_error::runtime_error((std::runtime_error *)v44, &v151);
                  *int64_t v122 = v152;
                  *(void *)uint64_t v44 = &unk_1EDC827D8;
                  uint64_t v97 = v154;
                  *(void *)(v44 + 32) = v153;
                  *(void *)(v44 + 40) = v97;
                  uint64_t v98 = v155;
                  *(void *)(v44 + 48) = v155;
                  if (v98)
                  {
                    *((void *)v97 + 2) = v121;
                    char v153 = &v154;
                    char v154 = 0;
                    uint64_t v155 = 0;
                  }
                  else
                  {
                    *(void *)(v44 + 32) = v121;
                  }
                  *(_OWORD *)(v44 + 56) = v156;
                  long long v156 = 0uLL;
                  *(unsigned char *)(v44 + 72) = 0;
                  v151.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
                }
                else
                {
                  AMSCore::Error::operator=(v44, (uint64_t)&v151);
                  uint64_t v99 = (std::__shared_weak_count *)*((void *)&v156 + 1);
                  v151.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
                  if (*((void *)&v156 + 1)
                    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v156 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                    std::__shared_weak_count::__release_weak(v99);
                  }
                }
                std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v153, v154);
                MEMORY[0x192FA3C30](&v151);
              }
              char v96 = 0;
              if (!v133)
              {
LABEL_78:
                ((void (*)(std::runtime_error *))v127.~runtime_error)(&v127);
                if ((v96 & 1) == 0) {
                  goto LABEL_218;
                }
                continue;
              }
              goto LABEL_194;
            }
            break;
          }
          if (v52 != 101)
          {
            AMSCore::SQLiteMutex::makeError((uint64_t)&v127, v45, v52, (uint64_t)"SQLite query failed.", 20);
            AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v151, (uint64_t)&v127);
            if (*(unsigned char *)(v44 + 72))
            {
              std::runtime_error::runtime_error((std::runtime_error *)v44, &v151);
              *int64_t v122 = v152;
              *(void *)uint64_t v44 = &unk_1EDC827D8;
              uint64_t v104 = v154;
              *(void *)(v44 + 32) = v153;
              *(void *)(v44 + 40) = v104;
              uint64_t v105 = v155;
              *(void *)(v44 + 48) = v155;
              if (v105)
              {
                *((void *)v104 + 2) = v121;
                char v153 = &v154;
                char v154 = 0;
                uint64_t v155 = 0;
              }
              else
              {
                *(void *)(v44 + 32) = v121;
              }
              *(_OWORD *)(v44 + 56) = v156;
              long long v156 = 0uLL;
              *(unsigned char *)(v44 + 72) = 0;
              v151.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
            }
            else
            {
              AMSCore::Error::operator=(v44, (uint64_t)&v151);
              size_t v106 = (std::__shared_weak_count *)*((void *)&v156 + 1);
              v151.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
              if (*((void *)&v156 + 1)
                && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v156 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                std::__shared_weak_count::__release_weak(v106);
              }
            }
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v153, v154);
            MEMORY[0x192FA3C30](&v151);
            v127.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
            int v107 = (std::__shared_weak_count *)*((void *)&v132 + 1);
            if (*((void *)&v132 + 1)
              && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v132 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
              std::__shared_weak_count::__release_weak(v107);
            }
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v129, v130);
            MEMORY[0x192FA3C30](&v127);
          }
LABEL_218:
          int v108 = sqlite3_reset(v45[2]);
          if (*(unsigned char *)(v44 + 72) && v108)
          {
            AMSCore::SQLiteMutex::makeError((uint64_t)&v127, v45, v108, (uint64_t)"SQLite reset failed.", 20);
            AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v151, (uint64_t)&v127);
            if (*(unsigned char *)(v44 + 72))
            {
              std::runtime_error::runtime_error((std::runtime_error *)v44, &v151);
              *int64_t v122 = v152;
              *(void *)uint64_t v44 = &unk_1EDC827D8;
              uint64_t v109 = v154;
              *(void *)(v44 + 32) = v153;
              *(void *)(v44 + 40) = v109;
              uint64_t v110 = v155;
              *(void *)(v44 + 48) = v155;
              if (v110)
              {
                *((void *)v109 + 2) = v121;
                char v153 = &v154;
                char v154 = 0;
                uint64_t v155 = 0;
              }
              else
              {
                *(void *)(v44 + 32) = v121;
              }
              *(_OWORD *)(v44 + 56) = v156;
              long long v156 = 0uLL;
              *(unsigned char *)(v44 + 72) = 0;
              v151.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
            }
            else
            {
              AMSCore::Error::operator=(v44, (uint64_t)&v151);
              uint64_t v111 = (std::__shared_weak_count *)*((void *)&v156 + 1);
              v151.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
              if (*((void *)&v156 + 1)
                && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v156 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                std::__shared_weak_count::__release_weak(v111);
              }
            }
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v153, v154);
            MEMORY[0x192FA3C30](&v151);
            v127.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
            char v112 = (std::__shared_weak_count *)*((void *)&v132 + 1);
            if (*((void *)&v132 + 1)
              && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v132 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
              std::__shared_weak_count::__release_weak(v112);
            }
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v129, v130);
            MEMORY[0x192FA3C30](&v127);
          }
          int v113 = sqlite3_clear_bindings(v45[2]);
          if (*(unsigned char *)(v44 + 72) && v113)
          {
            AMSCore::SQLiteMutex::makeError((uint64_t)&v127, v45, v113, (uint64_t)"SQLite clear bindings failed.", 29);
            AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v151, (uint64_t)&v127);
            if (*(unsigned char *)(v44 + 72))
            {
              std::runtime_error::runtime_error((std::runtime_error *)v44, &v151);
              *int64_t v122 = v152;
              *(void *)uint64_t v44 = &unk_1EDC827D8;
              uint64_t v114 = v154;
              *(void *)(v44 + 32) = v153;
              *(void *)(v44 + 40) = v114;
              uint64_t v115 = v155;
              *(void *)(v44 + 48) = v155;
              if (v115)
              {
                *((void *)v114 + 2) = v121;
                char v153 = &v154;
                char v154 = 0;
                uint64_t v155 = 0;
              }
              else
              {
                *(void *)(v44 + 32) = v121;
              }
              *(_OWORD *)(v44 + 56) = v156;
              long long v156 = 0uLL;
              *(unsigned char *)(v44 + 72) = 0;
              v151.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
            }
            else
            {
              AMSCore::Error::operator=(v44, (uint64_t)&v151);
              uint64_t v116 = (std::__shared_weak_count *)*((void *)&v156 + 1);
              v151.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
              if (*((void *)&v156 + 1)
                && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v156 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                std::__shared_weak_count::__release_weak(v116);
              }
            }
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v153, v154);
            MEMORY[0x192FA3C30](&v151);
            v127.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
            int v117 = (std::__shared_weak_count *)*((void *)&v132 + 1);
            if (*((void *)&v132 + 1)
              && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v132 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
              std::__shared_weak_count::__release_weak(v117);
            }
            std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v129, v130);
            MEMORY[0x192FA3C30](&v127);
          }
        }
        else
        {
LABEL_76:
          ((void (*)(std::runtime_error *))v151.~runtime_error)(&v151);
          if (*(unsigned char *)(v44 + 72)) {
            goto LABEL_77;
          }
        }
LABEL_246:
        unsigned int v118 = sqlite3_db_mutex(*v45);
        sqlite3_mutex_leave(v118);
        return;
      default:
        AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[18]>((uint64_t)&v127, 8u, "Unsupported type.");
        uint64_t v44 = a1;
        std::runtime_error::runtime_error((std::runtime_error *)a1, &v127);
        *(std::error_code *)(a1 + 16) = v128;
        *(void *)a1 = &unk_1EDC827D8;
        long long v49 = v130;
        *(void *)(a1 + 32) = v129;
        *(void *)(a1 + 40) = v49;
        uint64_t v50 = a1 + 40;
        uint64_t v51 = v131;
        *(void *)(a1 + 48) = v131;
        uint64_t v45 = a2;
        if (v51)
        {
          *((void *)v49 + 2) = v50;
          long long v129 = &v130;
          char v130 = 0;
          uint64_t v131 = 0;
          long long v49 = 0;
        }
        else
        {
          *(void *)(a1 + 32) = v50;
        }
        *(_OWORD *)(a1 + 56) = v132;
        long long v132 = 0uLL;
        *(unsigned char *)(a1 + 72) = 0;
        v127.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v129, v49);
        MEMORY[0x192FA3C30](&v127);
        if (!(_BYTE)__p) {
          goto LABEL_76;
        }
        goto LABEL_70;
    }
  }
}

void sub_18DAAAB20(void *a1)
{
  if (SLOBYTE(STACK[0x21F]) < 0)
  {
    operator delete((void *)STACK[0x208]);
    __clang_call_terminate(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  AMSCore::StructuredData::IsColumnInTable<std::vector<AMSCore::StructuredData::Condition>>((uint64_t)&v50, *(void *)(*(void *)(a1 + 8) + 16), *(void *)(*(void *)(a1 + 8) + 24), *a2, a2[1]);
  AMSCore::firstError<void,AMSCore::Error>(v44, (uint64_t)&v50);
  if (!v56) {
    ((void (*)(std::runtime_error *))v50.~runtime_error)(&v50);
  }
  if ((_BYTE)v47)
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v50, (uint64_t)v44);
    std::runtime_error::runtime_error((std::runtime_error *)a3, &v50);
    *(_OWORD *)(a3 + 16) = v51;
    *(void *)a3 = &unk_1EDC827D8;
    uint64_t v6 = v53;
    *(void *)(a3 + 32) = v52;
    *(void *)(a3 + 40) = v6;
    uint64_t v7 = a3 + 40;
    uint64_t v8 = v54;
    *(void *)(a3 + 48) = v54;
    if (v8)
    {
      *(void *)(v6 + 16) = v7;
      int v52 = (unsigned int **)&v53;
      uint64_t v53 = 0;
      int v54 = 0;
      uint64_t v6 = 0;
    }
    else
    {
      *(void *)(a3 + 32) = v7;
    }
    *(_OWORD *)(a3 + 56) = v55;
    long long v55 = 0uLL;
    *(unsigned char *)(a3 + 72) = 0;
    v50.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v52, (unsigned int *)v6);
    uint64_t result = MEMORY[0x192FA3C30](&v50);
    if ((_BYTE)v47)
    {
      v44[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      double v21 = v46;
      if (v46)
      {
        if (!atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v45, v45[1]);
      return MEMORY[0x192FA3C30](v44);
    }
    return result;
  }
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v44);
  int v9 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v44, (uint64_t)"SELECT COUNT(*) FROM \"", 22);
  char v10 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v9, **(void **)(a1 + 8), *(void *)(*(void *)(a1 + 8) + 8));
  uint64_t v11 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v10, (uint64_t)"\"\n", 2);
  v50.__vftable = (std::runtime_error_vtbl *)a2;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v12, (uint64_t)"\n", 1);
  uint64_t v13 = *(void *)(a1 + 16);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v44[0].__imp_, (std::string *)__p);
  uint64_t v14 = *(void *)(v13 + 8);
  v32.__vftable = *(std::runtime_error_vtbl **)v13;
  v32.__imp_.__imp_ = (const char *)v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  AMSCore::SQLiteStatement::make((uint64_t)&v50, (uint64_t)&v32, (uint64_t)__p);
  uint64_t imp = (std::__shared_weak_count *)v32.__imp_.__imp_;
  if (v32.__imp_.__imp_ && !atomic_fetch_add((atomic_ullong *volatile)v32.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
    std::__shared_weak_count::__release_weak(imp);
    if ((SBYTE7(v39) & 0x80000000) == 0)
    {
LABEL_11:
      if (v56) {
        goto LABEL_12;
      }
LABEL_23:
      std::runtime_error::runtime_error((std::runtime_error *)__p, &v50);
      long long v39 = v51;
      __p[0] = &unk_1EDC827D8;
      int v40 = v52;
      v41[0] = (unsigned int *)v53;
      v41[1] = v54;
      if (v54)
      {
        *(void *)(v53 + 16) = v41;
        int v52 = (unsigned int **)&v53;
        uint64_t v53 = 0;
        int v54 = 0;
      }
      else
      {
        int v40 = v41;
      }
      long long v42 = v55;
      long long v55 = 0uLL;
      char v43 = 1;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v32, (uint64_t)__p);
      std::runtime_error::runtime_error((std::runtime_error *)a3, &v32);
      *(_OWORD *)(a3 + 16) = v33;
      *(void *)a3 = &unk_1EDC827D8;
      uint64_t v28 = v35;
      *(void *)(a3 + 32) = v34;
      *(void *)(a3 + 40) = v28;
      uint64_t v29 = a3 + 40;
      uint64_t v30 = v36;
      *(void *)(a3 + 48) = v36;
      if (v30)
      {
        *(void *)(v28 + 16) = v29;
        std::runtime_error v34 = &v35;
        uint64_t v35 = 0;
        uint64_t v36 = 0;
        uint64_t v28 = 0;
      }
      else
      {
        *(void *)(a3 + 32) = v29;
      }
      *(_OWORD *)(a3 + 56) = v37;
      long long v37 = 0uLL;
      *(unsigned char *)(a3 + 72) = 0;
      v32.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v34, (unsigned int *)v28);
      MEMORY[0x192FA3C30](&v32);
      if (v43)
      {
        __p[0] = &unk_1EDC827D8;
        long long v31 = (std::__shared_weak_count *)*((void *)&v42 + 1);
        if (*((void *)&v42 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v42 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v40, v41[0]);
        MEMORY[0x192FA3C30](__p);
      }
      goto LABEL_43;
    }
  }
  else if ((SBYTE7(v39) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(__p[0]);
  if (!v56) {
    goto LABEL_23;
  }
LABEL_12:
  size_t v16 = (char *)operator new(0x50uLL);
  *((void *)v16 + 1) = 0;
  *((void *)v16 + 2) = 0;
  *(void *)size_t v16 = &unk_1EDC83D00;
  *(std::runtime_error *)(v16 + 24) = v50;
  v50.__vftable = 0;
  v50.__imp_.__imp_ = 0;
  uint64_t v17 = v51;
  std::string v18 = v54;
  *(void *)&long long v51 = 0;
  *((void *)v16 + 5) = v17;
  if (v18)
  {
    if (v18 == (unsigned int *)((char *)&v51 + 8))
    {
      *((void *)v16 + 9) = v16 + 48;
      (*(void (**)(unsigned int *))(*(void *)v18 + 24))(v18);
      goto LABEL_28;
    }
    uint64_t v19 = &v54;
    *((void *)v16 + 9) = v18;
  }
  else
  {
    uint64_t v19 = (unsigned int **)(v16 + 72);
  }
  *uint64_t v19 = 0;
LABEL_28:
  v32.__vftable = (std::runtime_error_vtbl *)(v16 + 24);
  v32.__imp_.__imp_ = v16;
  __p[0] = v16 + 24;
  __p[1] = v16;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v16 + 1, 1uLL, memory_order_relaxed);
  long long v39 = 0uLL;
  int v40 = 0;
  int v23 = (const void *)*a2;
  uint64_t v22 = a2[1];
  int64_t v24 = v22 - *a2;
  if (v22 == *a2)
  {
    int v26 = 0;
    char v25 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v24 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    char v25 = (char *)operator new(v24);
    int v26 = &v25[8 * (v24 >> 3)];
    memcpy(v25, v23, v24 - 5);
  }
  int v40 = 0;
  *(_OWORD *)std::runtime_error __p = 0u;
  long long v39 = 0u;
  *(void *)(a3 + 24) = 0;
  int v27 = operator new(0x30uLL);
  *int v27 = &unk_1EDC83028;
  v27[1] = v16 + 24;
  v27[2] = v16;
  v27[3] = v25;
  v27[4] = v26;
  v27[5] = v26;
  *(void *)(a3 + 24) = v27;
  *(unsigned char *)(a3 + 72) = 1;
  if (!atomic_fetch_add((atomic_ullong *volatile)v16 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(char *))(*(void *)v16 + 16))(v16);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v16);
  }
LABEL_43:
  if (v56) {
    std::__destroy_at[abi:fe180100]<AMSCore::SQLiteStatement,0>(&v50);
  }
  else {
    ((void (*)(std::runtime_error *))v50.~runtime_error)(&v50);
  }
  v44[0].__vftable = (std::runtime_error_vtbl *)*MEMORY[0x1E4FBA418];
  *(std::runtime_error_vtbl **)((char *)&v44[0].__vftable + (unint64_t)v44[0].__vftable[-1].~runtime_error) = *(std::runtime_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
  v44[0].__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
  if (v48 < 0) {
    operator delete(v47);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FA3FD0](&v49);
}

void sub_18DAAB36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (v30) {
    operator delete(v30);
  }
  if (!atomic_fetch_add(v32, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0::~$_0(&a19);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a10);
  std::expected<AMSCore::SQLiteStatement,AMSCore::Error>::~expected[abi:fe180100](v33 - 160);
  std::ostringstream::~ostringstream((uint64_t)&a30);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::StructuredData::IsColumnInTable<std::vector<AMSCore::StructuredData::Condition>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::string v18 = (std::runtime_error *)result;
  if (a4 == a5)
  {
LABEL_15:
    LOBYTE(v18[4].__imp_.__imp_) = 1;
  }
  else
  {
    uint64_t v6 = a4;
    uint64_t v20 = 24 * a3;
    uint64_t v19 = a2 + 24 * a3;
    while (1)
    {
      if (a3)
      {
        char v10 = *(const void **)v6;
        size_t v9 = *(void *)(v6 + 8);
        int v11 = *(unsigned __int8 *)(v6 + 16);
        uint64_t v12 = v20;
        uint64_t v13 = a2;
        int v14 = *(unsigned __int8 *)(v6 + 17);
        while (1)
        {
          if (*(void *)(v13 + 8) == v9)
          {
            uint64_t result = memcmp(*(const void **)v13, v10, v9);
            if (!result && *(unsigned __int8 *)(v13 + 16) == v11 && *(unsigned __int8 *)(v13 + 17) == v14) {
              break;
            }
          }
          v13 += 24;
          v12 -= 24;
          if (!v12)
          {
            uint64_t v13 = v19;
            break;
          }
        }
      }
      else
      {
        uint64_t v13 = a2;
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v13 - a2) >> 3) == a3) {
        break;
      }
      v6 += 24;
      if (v6 == a5) {
        goto LABEL_15;
      }
    }
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[31],std::string_view const&>((uint64_t)&v21, 3u, (uint64_t *)v6);
    std::runtime_error::runtime_error(v18, &v21);
    v18[1] = v22;
    v18->__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v15 = v24;
    v18[2].__vftable = v23;
    v18[2].__imp_.__imp_ = (const char *)v15;
    p_uint64_t imp = (std::runtime_error_vtbl *)&v18[2].__imp_;
    uint64_t v17 = v25;
    v18[3].__vftable = v25;
    if (v17)
    {
      *(void *)(v15 + 16) = p_imp;
      int v23 = (std::runtime_error_vtbl *)&v24;
      uint64_t v24 = 0;
      char v25 = 0;
      uint64_t v15 = 0;
    }
    else
    {
      v18[2].__vftable = p_imp;
    }
    *(_OWORD *)&v18[3].__imp_.__imp_ = v26;
    long long v26 = 0uLL;
    LOBYTE(v18[4].__imp_.__imp_) = 0;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v23, (unsigned int *)v15);
    return MEMORY[0x192FA3C30](&v21);
  }
  return result;
}

void *AMSCore::StructuredData::anonymous namespace'::operator<<(void *a1, const void ***a2)
{
  uint64_t v2 = a1;
  if ((*a2)[1] != **a2)
  {
    uint64_t v2 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(a1, (uint64_t)"WHERE ", 6);
    uint64_t v4 = *a2;
    uint64_t v6 = **a2;
    uint64_t v5 = v4[1];
    int64_t v7 = v5 - v6;
    if (v5 != v6)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v7 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
        std::vector<std::string>::__throw_length_error[abi:fe180100]();
      }
      uint64_t v8 = operator new(v7);
      memcpy(v8, v6, v7 - 5);
      std::runtime_error __p = v8;
      size_t v9 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v2, (uint64_t)"", 0);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v9, (uint64_t)"", 0);
      char v10 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v2, (uint64_t)"(", 1);
      int v11 = &v8[v7 >> 3];
      uint64_t v12 = " > ";
      uint64_t v13 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v10, *v8, v8[1]);
      switch(*((unsigned char *)v8 + 18))
      {
        case 1:
          int v14 = *((unsigned __int8 *)v8 + 17);
          uint64_t v15 = " <> ";
          size_t v16 = " IS NOT ";
          goto LABEL_7;
        case 2:
          break;
        case 3:
          uint64_t v12 = " < ";
          break;
        case 4:
          uint64_t v12 = " >= ";
          break;
        case 5:
          uint64_t v12 = " <= ";
          break;
        default:
          int v14 = *((unsigned __int8 *)v8 + 17);
          uint64_t v15 = " = ";
          size_t v16 = " IS ";
LABEL_7:
          if (v14 == 2) {
            uint64_t v12 = v16;
          }
          else {
            uint64_t v12 = v15;
          }
          break;
      }
      size_t v17 = strlen(v12);
      std::string v18 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v13, (uint64_t)v12, v17);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v18, (uint64_t)":", 1);
      uint64_t v19 = (void *)std::ostream::operator<<();
      uint64_t v20 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v19, (uint64_t)"_", 1);
      std::runtime_error v21 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v20, *v8, v8[1]);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v21, (uint64_t)")", 1);
      std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v2, (uint64_t)"", 0);
      if (v7 != 24)
      {
        std::runtime_error v22 = (char *)v8 + 41;
        uint64_t v23 = 1;
        do
        {
          uint64_t v24 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v2, (uint64_t)" AND ", 5);
          std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v24, (uint64_t)"", 0);
          char v25 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v2, (uint64_t)"(", 1);
          long long v26 = (uint64_t *)(v22 - 17);
          int v27 = " > ";
          uint64_t v28 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v25, *(void *)(v22 - 17), *(void *)(v22 - 9));
          switch(v22[1])
          {
            case 1:
              if (*v22 == 2) {
                int v27 = " IS NOT ";
              }
              else {
                int v27 = " <> ";
              }
              break;
            case 2:
              break;
            case 3:
              int v27 = " < ";
              break;
            case 4:
              int v27 = " >= ";
              break;
            case 5:
              int v27 = " <= ";
              break;
            default:
              if (*v22 == 2) {
                int v27 = " IS ";
              }
              else {
                int v27 = " = ";
              }
              break;
          }
          size_t v29 = strlen(v27);
          uint64_t v30 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v28, (uint64_t)v27, v29);
          std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v30, (uint64_t)":", 1);
          long long v31 = (void *)std::ostream::operator<<();
          std::runtime_error v32 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v31, (uint64_t)"_", 1);
          uint64_t v33 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v32, *v26, *(void *)(v22 - 9));
          std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v33, (uint64_t)")", 1);
          std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v2, (uint64_t)"", 0);
          v22 += 24;
          ++v23;
        }
        while (v26 + 3 != v11);
      }
      operator delete(__p);
    }
  }
  return v2;
}

void sub_18DAAB9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
}

void *AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0::~$_0(void *a1)
{
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<unsigned long,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::target_type()
{
}

uint64_t std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<unsigned long,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder9withCountERKNSt3__16vecto"
                     "rINS0_9ConditionENS3_9allocatorIS5_EEEEE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder9withCountERKNS"
                                "t3__16vectorINS0_9ConditionENS3_9allocatorIS5_EEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder9withCountERKNSt3__16vectorINS0_9ConditionENS3_9allocatorIS5_EEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder9withCountERKNSt3__16vectorINS0_9ConditionENS3_9allocatorIS5_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<unsigned long,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::operator()(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1 + 3;
  AMSCore::StructuredData::IsValidValuesFromColumnTypes<std::vector<AMSCore::StructuredData::Condition>,std::vector<AMSCore::Any>>((uint64_t)&v30, a1[3], a1[4], *a2, a2[1]);
  AMSCore::firstError<void,AMSCore::Error>(&v23, (uint64_t)&v30);
  if (!v36) {
    ((void (*)(std::runtime_error *))v30.~runtime_error)(&v30);
  }
  if (!v29)
  {
    uint64_t v21 = 0;
    char v10 = (sqlite3 **)a1[1];
    v30.__vftable = (std::runtime_error_vtbl *)&unk_1EDC834F8;
    v30.__imp_.__imp_ = (const char *)&v21;
    *((void *)&v31 + 1) = &v30;
    AMSCore::SQLiteStatement::exec((uint64_t)&v23, v10, v22, (uint64_t)&v30);
    if (*((std::runtime_error **)&v31 + 1) == &v30)
    {
      ((void (*)(std::runtime_error *))v30.__vftable[1].~runtime_error_0)(&v30);
      if (v29)
      {
LABEL_10:
        *(void *)a3 = v21;
        *(unsigned char *)(a3 + 72) = 1;
LABEL_31:
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v22, (unsigned int *)v22[1]);
        return;
      }
    }
    else
    {
      if (*((void *)&v31 + 1)) {
        (*(void (**)(void))(**((void **)&v31 + 1) + 40))(*((void *)&v31 + 1));
      }
      if (v29) {
        goto LABEL_10;
      }
    }
    std::runtime_error::runtime_error(&v30, &v23);
    long long v31 = v24;
    v30.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::runtime_error v32 = v25;
    uint64_t v33 = v26;
    uint64_t v34 = v27;
    if (v27)
    {
      *((void *)v26 + 2) = &v33;
      char v25 = &v26;
      long long v26 = 0;
      uint64_t v27 = 0;
    }
    else
    {
      std::runtime_error v32 = &v33;
    }
    long long v35 = v28;
    long long v28 = 0uLL;
    char v36 = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)v16, (uint64_t)&v30);
    std::runtime_error::runtime_error((std::runtime_error *)a3, v16);
    *(std::runtime_error *)(a3 + 16) = v16[1];
    *(void *)a3 = &unk_1EDC827D8;
    uint64_t v12 = v18;
    *(void *)(a3 + 32) = v17;
    *(void *)(a3 + 40) = v12;
    uint64_t v13 = a3 + 40;
    uint64_t v14 = v19;
    *(void *)(a3 + 48) = v19;
    if (v14)
    {
      *(void *)(v12 + 16) = v13;
      size_t v17 = &v18;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v12 = 0;
    }
    else
    {
      *(void *)(a3 + 32) = v13;
    }
    *(_OWORD *)(a3 + 56) = v20;
    long long v20 = 0uLL;
    *(unsigned char *)(a3 + 72) = 0;
    v16[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v17, (unsigned int *)v12);
    MEMORY[0x192FA3C30](v16);
    if (v36)
    {
      v30.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v15 = (std::__shared_weak_count *)*((void *)&v35 + 1);
      if (*((void *)&v35 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v32, v33);
      MEMORY[0x192FA3C30](&v30);
    }
    if (!v29) {
      ((void (*)(std::runtime_error *))v23.~runtime_error)(&v23);
    }
    goto LABEL_31;
  }
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v30, (uint64_t)&v23);
  std::runtime_error::runtime_error((std::runtime_error *)a3, &v30);
  *(_OWORD *)(a3 + 16) = v31;
  *(void *)a3 = &unk_1EDC827D8;
  int64_t v7 = v33;
  *(void *)(a3 + 32) = v32;
  *(void *)(a3 + 40) = v7;
  uint64_t v8 = a3 + 40;
  uint64_t v9 = v34;
  *(void *)(a3 + 48) = v34;
  if (v9)
  {
    *((void *)v7 + 2) = v8;
    std::runtime_error v32 = &v33;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    int64_t v7 = 0;
  }
  else
  {
    *(void *)(a3 + 32) = v8;
  }
  *(_OWORD *)(a3 + 56) = v35;
  long long v35 = 0uLL;
  *(unsigned char *)(a3 + 72) = 0;
  v30.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v32, v7);
  MEMORY[0x192FA3C30](&v30);
  if (v29)
  {
    v23.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    int v11 = (std::__shared_weak_count *)*((void *)&v28 + 1);
    if (*((void *)&v28 + 1))
    {
      if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v25, v26);
    MEMORY[0x192FA3C30](&v23);
  }
}

void sub_18DAABF9C(_Unwind_Exception *exception_object)
{
  if (!*(unsigned char *)(v1 - 64))
  {
    (**(void (***)(uint64_t))(v1 - 136))(v1 - 136);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::StructuredData::IsValidValuesFromColumnTypes<std::vector<AMSCore::StructuredData::Condition>,std::vector<AMSCore::Any>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = result;
  if (0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 3) == (a5 - a4) >> 5)
  {
    if (a2 == a3 || a4 == a5)
    {
LABEL_17:
      *(unsigned char *)(result + 72) = 1;
      return result;
    }
    uint64_t v6 = a2 + 24;
    uint64_t v7 = a4 + 32;
    while (1)
    {
      if (*(unsigned char *)(v6 - 7) != 2)
      {
        int v8 = *(_DWORD *)(v7 - 8);
        if (v8 == -1) {
          unsigned __int8 v9 = 0;
        }
        else {
          unsigned __int8 v9 = *(_DWORD *)(v7 - 8);
        }
        if (*(unsigned __int8 *)(v6 - 8) != v9) {
          goto LABEL_18;
        }
        BOOL v10 = v8 == -1 || *(_DWORD *)(v7 - 8) == 0;
        if (v10) {
          break;
        }
      }
      if (v6 != a3)
      {
        v6 += 24;
        BOOL v10 = v7 == a5;
        v7 += 32;
        if (!v10) {
          continue;
        }
      }
      goto LABEL_17;
    }
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[41]>((uint64_t)&v14, 3u);
  }
  else
  {
LABEL_18:
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[40]>((uint64_t)&v14, 3u);
  }
  std::runtime_error::runtime_error((std::runtime_error *)v5, &v14);
  *(_OWORD *)(v5 + 16) = v15;
  *(void *)uint64_t v5 = &unk_1EDC827D8;
  uint64_t v11 = v17;
  *(void *)(v5 + 32) = v16;
  *(void *)(v5 + 40) = v11;
  uint64_t v12 = v5 + 40;
  uint64_t v13 = v18;
  *(void *)(v5 + 48) = v18;
  if (v13)
  {
    *(void *)(v11 + 16) = v12;
    size_t v16 = &v17;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    *(void *)(v5 + 32) = v12;
  }
  *(_OWORD *)(v5 + 56) = v19;
  long long v19 = 0uLL;
  *(unsigned char *)(v5 + 72) = 0;
  v14.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v16, (unsigned int *)v11);
  return MEMORY[0x192FA3C30](&v14);
}

void AMSCore::StructuredData::anonymous namespace'::buildBindings<std::vector<AMSCore::StructuredData::Condition>>(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  BOOL v5 = *a2 == a2[1] || v4 == a3[1];
  if (!v5)
  {
    uint64_t v6 = a1;
    int v7 = 0;
    uint64_t v8 = v4 + 32;
    while (1)
    {
      std::to_string(&v35, v7);
      unsigned __int8 v9 = std::string::insert(&v35, 0, ":", 1uLL);
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      *(void *)&v36[16] = *((void *)&v9->__r_.__value_.__l + 2);
      *(_OWORD *)char v36 = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      uint64_t v11 = v36[23];
      if (v36[23] >= 0) {
        size_t v12 = 22;
      }
      else {
        size_t v12 = (*(void *)&v36[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      }
      if (v36[23] < 0) {
        uint64_t v11 = *(void *)&v36[8];
      }
      if (v12 == v11) {
        break;
      }
      size_t v16 = v36;
      if (v36[23] < 0) {
        size_t v16 = *(unsigned char **)v36;
      }
      v16[v11] = 95;
      uint64_t v17 = v11 + 1;
      if ((v36[23] & 0x80000000) != 0) {
        *(void *)&v36[8] = v17;
      }
      else {
        v36[23] = v17 & 0x7F;
      }
      v16[v17] = 0;
      std::string::size_type v19 = *(void *)v36;
      unint64_t v20 = v36[23];
LABEL_38:
      v37.__r_.__value_.__l.__size_ = *(void *)&v36[8];
      *(std::string::size_type *)((char *)&v37.__r_.__value_.__r.__words[1] + 7) = *(void *)&v36[15];
      memset(v36, 0, sizeof(v36));
      v37.__r_.__value_.__r.__words[0] = v19;
      *((unsigned char *)&v37.__r_.__value_.__s + 23) = v20;
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v35.__r_.__value_.__l.__data_);
        unint64_t v20 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      }
      std::string::size_type v23 = *(void *)(v3 + 8);
      if ((v20 & 0x80u) == 0) {
        std::string::size_type v24 = 22;
      }
      else {
        std::string::size_type v24 = (v37.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      }
      if ((v20 & 0x80u) == 0) {
        std::string::size_type size = v20;
      }
      else {
        std::string::size_type size = v37.__r_.__value_.__l.__size_;
      }
      if (v24 - size >= v23)
      {
        if (v23)
        {
          if ((v20 & 0x80u) == 0) {
            long long v26 = &v37;
          }
          else {
            long long v26 = (std::string *)v37.__r_.__value_.__r.__words[0];
          }
          memmove((char *)v26 + size, *(const void **)v3, *(void *)(v3 + 8));
          std::string::size_type v27 = size + v23;
          if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
            v37.__r_.__value_.__l.__size_ = size + v23;
          }
          else {
            *((unsigned char *)&v37.__r_.__value_.__s + 23) = v27 & 0x7F;
          }
          v26->__r_.__value_.__s.__data_[v27] = 0;
        }
      }
      else
      {
        std::string::__grow_by_and_replace(&v37, v24, size + v23 - v24, size, size, 0, *(void *)(v3 + 8), *(const std::string::value_type **)v3);
      }
      long long v28 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (const void **)&v37.__r_.__value_.__l.__data_, (uint64_t)&v37);
      char v29 = v28;
      uint64_t v30 = *((unsigned int *)v28 + 20);
      uint64_t v31 = *(unsigned int *)(v8 - 8);
      if (v30 == -1)
      {
        if (v31 != -1)
        {
LABEL_60:
          *(void *)char v36 = v28 + 56;
          ((void (*)(unsigned char *))off_1EDCA58C0[v31])(v36);
        }
      }
      else
      {
        if (v31 != -1) {
          goto LABEL_60;
        }
        ((void (*)(unsigned char *, char *))off_1EDCA5870[v30])(v36, v28 + 56);
        *((_DWORD *)v29 + 20) = -1;
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      v3 += 24;
      if (v3 != a2[1])
      {
        ++v7;
        BOOL v5 = v8 == a3[1];
        v8 += 32;
        if (!v5) {
          continue;
        }
      }
      return;
    }
    if (v12 == 0x7FFFFFFFFFFFFFF6) {
      std::string::__throw_length_error[abi:fe180100]();
    }
    if (v36[23] >= 0) {
      uint64_t v13 = v36;
    }
    else {
      uint64_t v13 = *(unsigned char **)v36;
    }
    if (v12 > 0x3FFFFFFFFFFFFFF2)
    {
      uint64_t v18 = 0x7FFFFFFFFFFFFFF6;
    }
    else
    {
      if (v12 + 1 > 2 * v12) {
        unint64_t v14 = v12 + 1;
      }
      else {
        unint64_t v14 = 2 * v12;
      }
      if (v14 < 0x17)
      {
        size_t v15 = 23;
        goto LABEL_32;
      }
      unint64_t v21 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      uint64_t v18 = v14 | 7;
      if (v18 == 23) {
        uint64_t v18 = v21;
      }
    }
    size_t v15 = v18 + 1;
LABEL_32:
    std::runtime_error v22 = operator new(v15);
    std::string::size_type v19 = (std::string::size_type)v22;
    if (v12)
    {
      memmove(v22, v13, v12);
      *(unsigned char *)(v19 + v12) = 95;
      if (v12 == 22) {
        goto LABEL_37;
      }
    }
    else
    {
      *std::runtime_error v22 = 95;
    }
    operator delete(v13);
LABEL_37:
    *(void *)char v36 = v19;
    *(void *)&v36[8] = v12 + 1;
    *(void *)&v36[16] = v15 | 0x8000000000000000;
    *(unsigned char *)(v19 + v12 + 1) = 0;
    unint64_t v20 = (v15 | 0x8000000000000000) >> 56;
    uint64_t v6 = a1;
    goto LABEL_38;
  }
}

void sub_18DAAC50C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (v29 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy(a9, *(unsigned int **)(a9 + 8));
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> const&)#1},std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> const&)#1}>,BOOL ()(std::map<std::string,AMSCore::Any>&&)>::target_type()
{
}

uint64_t std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> const&)#1},std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> const&)#1}>,BOOL ()(std::map<std::string,AMSCore::Any>&&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder9withCountERKNSt3__16vect"
                     "orINS0_9ConditionENS3_9allocatorIS5_EEEEENK3$_0clERKNS4_INS_3AnyENS6_ISC_EEEEEUlRKNS3_3mapINS3_12ba"
                     "sic_stringIcNS3_11char_traitsIcEENS6_IcEEEESC_NS3_4lessIvEENS6_INS3_4pairIKSM_SC_EEEEEEE_"
    || ((v3 & (unint64_t)"ZZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder9withCountERKN"
                                "St3__16vectorINS0_9ConditionENS3_9allocatorIS5_EEEEENK3$_0clERKNS4_INS_3AnyENS6_ISC_EEEE"
                                "EUlRKNS3_3mapINS3_12basic_stringIcNS3_11char_traitsIcEENS6_IcEEEESC_NS3_4lessIvEENS6_INS"
                                "3_4pairIKSM_SC_EEEEEEE_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder9withCountERKNSt3__16vectorINS0_9ConditionENS3_9allocatorIS5_EEEEENK3$_0clERKNS4_INS_3AnyENS6_ISC_EEEEEUlRKNS3_3mapINS3_12basic_stringIcNS3_11char_traitsIcEENS6_IcEEEESC_NS3_4lessIvEENS6_INS3_4pairIKSM_SC_EEEEEEE_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder9withCountERKNSt3__16vectorINS0_9ConditionENS3_9allocatorIS5_EEEEENK3$_0clERKNS4_INS_3AnyENS6_ISC_EEEEEUlRKNS3_3mapINS3_12basic_stringIcNS3_11char_traitsIcEENS6_IcEEEESC_NS3_4lessIvEENS6_INS3_4pairIKSM_SC_EEEEEEE_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> const&)#1},std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> const&)#1}>,BOOL ()(std::map<std::string,AMSCore::Any>&&)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2[2];
  if (v2)
  {
    uint64_t v2 = 0;
    uint64_t v3 = *a2;
    int v4 = *(_DWORD *)(*a2 + 80);
    if (v4 == -1) {
      LOBYTE(v4) = 0;
    }
    switch((char)v4)
    {
      case 1:
        unint64_t v5 = 0;
        LOBYTE(v3) = *(unsigned char *)(v3 + 56);
        goto LABEL_10;
      case 2:
        uint64_t v3 = (uint64_t)*(double *)(v3 + 56);
        goto LABEL_9;
      case 3:
      case 4:
        uint64_t v3 = *(void *)(v3 + 56);
        goto LABEL_9;
      case 7:
        uint64_t v3 = *(void *)(v3 + 56) / 1000;
LABEL_9:
        unint64_t v5 = v3 & 0xFFFFFFFFFFFFFF00;
LABEL_10:
        **(void **)(a1 + 8) = v5 | v3;
        uint64_t v2 = 1;
        break;
      default:
        return v2;
    }
  }
  return v2;
}

uint64_t std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> const&)#1},std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> const&)#1}>,BOOL ()(std::map<std::string,AMSCore::Any>&&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EDC834F8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> const&)#1},std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> const&)#1}>,BOOL ()(std::map<std::string,AMSCore::Any>&&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EDC834F8;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> const&)#1},std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> const&)#1}>,BOOL ()(std::map<std::string,AMSCore::Any>&&)>::~__func()
{
}

char *std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (!v5)
  {
    long long v10 = (char *)(a1 + 1);
    goto LABEL_29;
  }
  int v7 = *((char *)a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *a2;
  }
  if (v7 >= 0) {
    unsigned __int8 v9 = (const void *)*((unsigned __int8 *)a2 + 23);
  }
  else {
    unsigned __int8 v9 = a2[1];
  }
  do
  {
    while (1)
    {
      long long v10 = (char *)v5;
      uint64_t v13 = (void *)v5[4];
      uint64_t v11 = v5 + 4;
      size_t v12 = v13;
      int v14 = *((char *)v11 + 23);
      size_t v15 = v14 >= 0 ? v11 : v12;
      size_t v16 = v14 >= 0 ? (const void *)*((unsigned __int8 *)v11 + 23) : (const void *)v11[1];
      size_t v17 = (size_t)(v16 >= v9 ? v9 : v16);
      int v18 = memcmp(v8, v15, v17);
      if (v18) {
        break;
      }
      if (v9 >= v16) {
        goto LABEL_22;
      }
LABEL_8:
      unint64_t v5 = *(uint64_t **)v10;
      uint64_t v6 = (uint64_t **)v10;
      if (!*(void *)v10) {
        goto LABEL_29;
      }
    }
    if (v18 < 0) {
      goto LABEL_8;
    }
LABEL_22:
    int v19 = memcmp(v15, v8, v17);
    if (v19)
    {
      if ((v19 & 0x80000000) == 0) {
        return v10;
      }
    }
    else if (v16 >= v9)
    {
      return v10;
    }
    unint64_t v5 = (uint64_t *)*((void *)v10 + 1);
  }
  while (v5);
  uint64_t v6 = (uint64_t **)(v10 + 8);
LABEL_29:
  unint64_t v20 = v10;
  long long v10 = (char *)operator new(0x58uLL);
  *((_OWORD *)v10 + 2) = *(_OWORD *)a3;
  *((void *)v10 + 6) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *(void *)long long v10 = 0;
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = v20;
  *uint64_t v6 = (uint64_t *)v10;
  unint64_t v21 = (uint64_t *)**a1;
  std::runtime_error v22 = (uint64_t *)v10;
  if (v21)
  {
    *a1 = v21;
    std::runtime_error v22 = *v6;
  }
  std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], v22);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v10;
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[40]>(uint64_t a1, unsigned int a2)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v9);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Arguments and where clause do not match", 39);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v9.__imp_, &v8);
  v9.__vftable = (std::system_error_vtbl *)*MEMORY[0x1E4FBA418];
  *(std::system_error_vtbl **)((char *)&v9.__vftable + (unint64_t)v9.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
  v9.__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
  if (v15 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FA3FD0](&v16);
  *(void *)&v17.__val_ = a2;
  v17.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v9, v17, &v8);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  v9.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  long long v10 = &v11;
  long long v13 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v9);
  *(std::error_code *)(a1 + 16) = v9.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v4 = v11;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = a1 + 40;
  uint64_t v6 = v12;
  *(void *)(a1 + 48) = v12;
  if (v6)
  {
    *(void *)(v4 + 16) = v5;
    uint64_t v4 = 0;
    long long v10 = &v11;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v5;
  }
  *(_OWORD *)(a1 + 56) = v13;
  long long v13 = 0uLL;
  v9.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v10, (unsigned int *)v4);
  return MEMORY[0x192FA3C30](&v9);
}

void sub_18DAACACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[41]>(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = a2;
  AMSCore::StringUtils::join<char [41]>(&__what_arg, "Arguments was null for a non null column");
  *(void *)&v14.__val_ = v3;
  v14.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v8, v14, &__what_arg);
  if (SHIBYTE(__what_arg.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__what_arg.__r_.__value_.__l.__data_);
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  v8.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::system_error v9 = &v10;
  long long v12 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v8);
  *(std::error_code *)(a1 + 16) = v8.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v4 = v10;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = a1 + 40;
  uint64_t v6 = v11;
  *(void *)(a1 + 48) = v11;
  if (v6)
  {
    *(void *)(v4 + 16) = v5;
    uint64_t v4 = 0;
    std::system_error v9 = &v10;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v5;
  }
  *(_OWORD *)(a1 + 56) = v12;
  long long v12 = 0uLL;
  v8.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v9, (unsigned int *)v4);
  return MEMORY[0x192FA3C30](&v8);
}

void sub_18DAACC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<unsigned long,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[3];
  if (v2)
  {
    __p[4] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)__p[2];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  operator delete(__p);
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<unsigned long,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::destroy(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<unsigned long,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDC83028;
  return std::__compressed_pair_elem<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,0,false>::__compressed_pair_elem[abi:fe180100]<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0 const&,0ul>(a2 + 1, (void *)(a1 + 8));
}

void *std::__compressed_pair_elem<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,0,false>::__compressed_pair_elem[abi:fe180100]<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0 const&,0ul>(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  uint64_t v5 = (unsigned char *)a2[2];
  uint64_t v4 = (unsigned char *)a2[3];
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v6 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    int v7 = (char *)operator new(v6);
    a1[2] = v7;
    a1[3] = v7;
    std::system_error v8 = &v7[8 * (v6 >> 3)];
    a1[4] = v8;
    memcpy(v7, v5, v6 - 5);
    a1[3] = v8;
  }
  return a1;
}

void sub_18DAACE40(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 8);
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<unsigned long,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t v2 = operator new(0x30uLL);
  *uint64_t v2 = &unk_1EDC83028;
  std::__compressed_pair_elem<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,0,false>::__compressed_pair_elem[abi:fe180100]<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_18DAACEF8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<unsigned long,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::~__func(void *a1)
{
  *a1 = &unk_1EDC83028;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x192FA4080);
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withCount(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<unsigned long,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::~__func(void *a1)
{
  *a1 = &unk_1EDC83028;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void std::__shared_ptr_emplace<AMSCore::SQLiteStatement>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<AMSCore::SQLiteStatement>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83D00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x192FA4080);
}

void std::__shared_ptr_emplace<AMSCore::SQLiteStatement>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDC83D00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[31],std::string_view const&>(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v11);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v11, (uint64_t)"Table doesn't contain column: ", 30);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v11, *a3, a3[1]);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v11.__imp_, &v10);
  v11.__vftable = (std::system_error_vtbl *)*MEMORY[0x1E4FBA418];
  *(std::system_error_vtbl **)((char *)&v11.__vftable + (unint64_t)v11.__vftable[-1].~system_error) = *(std::system_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
  v11.__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
  if (v17 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FA3FD0](&v18);
  *(void *)&v19.__val_ = a2;
  v19.__cat_ = (const std::error_category *)&AMSCore::Error::Category::generic(void)::instance;
  std::system_error::system_error(&v11, v19, &v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  v11.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  long long v12 = &v13;
  long long v15 = 0uLL;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v11);
  *(std::error_code *)(a1 + 16) = v11.__ec_;
  *(void *)a1 = &unk_1EDC827D8;
  uint64_t v6 = v13;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = a1 + 40;
  uint64_t v8 = v14;
  *(void *)(a1 + 48) = v14;
  if (v8)
  {
    *(void *)(v6 + 16) = v7;
    uint64_t v6 = 0;
    long long v12 = &v13;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v7;
  }
  *(_OWORD *)(a1 + 56) = v15;
  long long v15 = 0uLL;
  v11.__vftable = (std::system_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v12, (unsigned int *)v6);
  return MEMORY[0x192FA3C30](&v11);
}

void sub_18DAAD328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  AMSCore::StructuredData::IsColumnInTable<std::vector<AMSCore::StructuredData::Condition>>((uint64_t)&v69, *(void *)(*(void *)(a1 + 8) + 16), *(void *)(*(void *)(a1 + 8) + 24), *a2, a2[1]);
  AMSCore::firstError<void,AMSCore::Error>(v63, (uint64_t)&v69);
  if (!v75) {
    ((void (*)(std::runtime_error *))v69.~runtime_error)(&v69);
  }
  if ((_BYTE)v66) {
    goto LABEL_6;
  }
  AMSCore::StructuredData::IsColumnInTable<std::vector<AMSCore::StructuredData::Condition>>((uint64_t)&v69, *(void *)(*(void *)(a1 + 8) + 16), *(void *)(*(void *)(a1 + 8) + 24), *a3, a3[1]);
  AMSCore::firstError<void,AMSCore::Error>(v63, (uint64_t)&v69);
  if (v75)
  {
    if ((_BYTE)v66) {
      goto LABEL_6;
    }
  }
  else
  {
    ((void (*)(std::runtime_error *))v69.~runtime_error)(&v69);
    if ((_BYTE)v66)
    {
LABEL_6:
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v69, (uint64_t)v63);
      std::runtime_error::runtime_error((std::runtime_error *)a4, &v69);
      *(_OWORD *)(a4 + 16) = v70;
      *(void *)a4 = &unk_1EDC827D8;
      uint64_t v8 = v72;
      *(void *)(a4 + 32) = v71;
      *(void *)(a4 + 40) = v8;
      uint64_t v9 = a4 + 40;
      std::string v10 = v73;
      *(void *)(a4 + 48) = v73;
      if (v10)
      {
        *((void *)v8 + 2) = v9;
        size_t v71 = (void **)&v72;
        size_t v72 = 0;
        uint64_t v73 = 0;
        uint64_t v8 = 0;
      }
      else
      {
        *(void *)(a4 + 32) = v9;
      }
      *(_OWORD *)(a4 + 56) = v74;
      long long v74 = 0uLL;
      *(unsigned char *)(a4 + 72) = 0;
      v69.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v71, v8);
      uint64_t result = MEMORY[0x192FA3C30](&v69);
      if ((_BYTE)v66)
      {
        v63[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        long long v12 = v65;
        if (v65)
        {
          if (!atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v64, v64[1]);
        return MEMORY[0x192FA3C30](v63);
      }
      return result;
    }
  }
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v63);
  uint64_t v13 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v63, (uint64_t)"SELECT DISTINCT ", 16);
  long long v15 = (const void *)*a2;
  uint64_t v14 = a2[1];
  int64_t v16 = v14 - *a2;
  if (v14 == *a2)
  {
    char v17 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v16 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    char v17 = (uint64_t *)operator new(v16);
    memcpy(v17, v15, v16 - 6);
    uint64_t v18 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v13, (uint64_t)"", 0);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v18, (uint64_t)"", 0);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v13, *v17, v17[1]);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v13, (uint64_t)"", 0);
    if (v16 != 24)
    {
      char v48 = a3;
      uint64_t v19 = 3;
      do
      {
        unint64_t v20 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v13, (uint64_t)",", 1);
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v20, (uint64_t)"", 0);
        unint64_t v21 = &v17[v19];
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v13, v17[v19], v17[v19 + 1]);
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v13, (uint64_t)"", 0);
        v19 += 3;
      }
      while (v21 + 3 != &v17[v16 >> 3]);
      a3 = v48;
    }
  }
  std::runtime_error v22 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n", 1);
  std::string::size_type v23 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v22, (uint64_t)"FROM ", 5);
  std::string::size_type v24 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v23, **(void **)(a1 + 8), *(void *)(*(void *)(a1 + 8) + 8));
  LOBYTE(v69.__vftable) = 10;
  char v25 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v24, (uint64_t)&v69, 1);
  v69.__vftable = (std::runtime_error_vtbl *)a3;
  long long v26 = a3;
  if (v17) {
    operator delete(v17);
  }
  uint64_t v27 = *(void *)(a1 + 16);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v63[0].__imp_, (std::string *)&__p);
  uint64_t v28 = *(void *)(v27 + 8);
  v50.__vftable = *(std::runtime_error_vtbl **)v27;
  v50.__imp_.__imp_ = (const char *)v28;
  if (v28) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
  }
  AMSCore::SQLiteStatement::make((uint64_t)&v69, (uint64_t)&v50, (uint64_t)&__p);
  uint64_t imp = (std::__shared_weak_count *)v50.__imp_.__imp_;
  uint64_t v30 = v26;
  if (v50.__imp_.__imp_ && !atomic_fetch_add((atomic_ullong *volatile)v50.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
    std::__shared_weak_count::__release_weak(imp);
  }
  if ((SBYTE7(v57) & 0x80000000) == 0)
  {
    if (v75) {
      goto LABEL_31;
    }
LABEL_35:
    std::runtime_error::runtime_error(&__p, &v69);
    long long v57 = v70;
    __p.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    size_t v58 = v71;
    std::runtime_error v59 = v72;
    long long v60 = v73;
    if (v73)
    {
      *((void *)v72 + 2) = &v59;
      size_t v71 = (void **)&v72;
      size_t v72 = 0;
      uint64_t v73 = 0;
    }
    else
    {
      size_t v58 = &v59;
    }
    long long v61 = v74;
    long long v74 = 0uLL;
    char v62 = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v50, (uint64_t)&__p);
    std::runtime_error::runtime_error((std::runtime_error *)a4, &v50);
    *(_OWORD *)(a4 + 16) = *(_OWORD *)v51;
    *(void *)a4 = &unk_1EDC827D8;
    uint64_t v44 = (unsigned int *)v53;
    *(void *)(a4 + 32) = v52;
    *(void *)(a4 + 40) = v44;
    uint64_t v45 = a4 + 40;
    std::runtime_error v46 = v54;
    *(void *)(a4 + 48) = v54;
    if (v46)
    {
      *((void *)v44 + 2) = v45;
      int v52 = &v53;
      uint64_t v53 = 0;
      int v54 = 0;
      uint64_t v44 = 0;
    }
    else
    {
      *(void *)(a4 + 32) = v45;
    }
    *(_OWORD *)(a4 + 56) = v55;
    long long v55 = 0uLL;
    *(unsigned char *)(a4 + 72) = 0;
    v50.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v52, v44);
    MEMORY[0x192FA3C30](&v50);
    if (v62)
    {
      __p.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v47 = (std::__shared_weak_count *)*((void *)&v61 + 1);
      if (*((void *)&v61 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v61 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v58, (unsigned int *)v59);
      MEMORY[0x192FA3C30](&__p);
    }
    goto LABEL_72;
  }
  operator delete(__p.__vftable);
  if (!v75) {
    goto LABEL_35;
  }
LABEL_31:
  uint64_t v31 = (char *)operator new(0x50uLL);
  *((void *)v31 + 1) = 0;
  *((void *)v31 + 2) = 0;
  *(void *)uint64_t v31 = &unk_1EDC83D00;
  *(std::runtime_error *)(v31 + 24) = v69;
  v69.__vftable = 0;
  v69.__imp_.__imp_ = 0;
  uint64_t v32 = v70;
  uint64_t v33 = v73;
  *(void *)&long long v70 = 0;
  *((void *)v31 + 5) = v32;
  if (v33)
  {
    if (v33 == (long long *)((char *)&v70 + 8))
    {
      *((void *)v31 + 9) = v31 + 48;
      (*(void (**)(_OWORD *))(*(void *)v33 + 24))(v33);
      goto LABEL_40;
    }
    uint64_t v34 = &v73;
    *((void *)v31 + 9) = v33;
  }
  else
  {
    uint64_t v34 = (void **)(v31 + 72);
  }
  *uint64_t v34 = 0;
LABEL_40:
  uint64_t v49 = (std::__shared_weak_count *)v31;
  v50.__vftable = (std::runtime_error_vtbl *)(v31 + 24);
  v50.__imp_.__imp_ = v31;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v31 + 1, 1uLL, memory_order_relaxed);
  v51[0] = 0;
  v51[1] = 0;
  int v52 = 0;
  std::string v35 = (const void *)*a2;
  int64_t v36 = a2[1] - *a2;
  if (v36)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v36 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    v51[0] = operator new(v36);
    v51[1] = v51[0];
    std::string v37 = (void **)((char *)v51[0] + 8 * (v36 >> 3));
    int v52 = v37;
    memcpy(v51[0], v35, v36 - 6);
    v51[1] = v37;
    uint64_t v30 = v26;
  }
  uint64_t v53 = 0;
  int v54 = 0;
  *(void *)&long long v55 = 0;
  long long v38 = (const void *)*v30;
  int64_t v39 = v30[1] - *v30;
  if (v39)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v39 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v53 = operator new(v39);
    int v54 = v53;
    int v40 = (char *)v53 + 8 * (v39 >> 3);
    *(void *)&long long v55 = v40;
    memcpy(v53, v38, v39 - 5);
    int v54 = v40;
  }
  AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0::$_0((uint64_t)&__p, (uint64_t)&v50);
  *(void *)(a4 + 24) = 0;
  std::system_error v41 = operator new(0x48uLL);
  *std::system_error v41 = &unk_1EDC82F78;
  AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0::$_0((uint64_t)(v41 + 1), (uint64_t)&__p);
  *(void *)(a4 + 24) = v41;
  if (v59)
  {
    long long v60 = v59;
    operator delete(v59);
  }
  if ((void)v57)
  {
    *((void *)&v57 + 1) = v57;
    operator delete((void *)v57);
  }
  long long v42 = (std::__shared_weak_count *)__p.__imp_.__imp_;
  if (__p.__imp_.__imp_ && !atomic_fetch_add((atomic_ullong *volatile)__p.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
  *(unsigned char *)(a4 + 72) = 1;
  if (v53)
  {
    int v54 = v53;
    operator delete(v53);
  }
  if (v51[0])
  {
    v51[1] = v51[0];
    operator delete(v51[0]);
  }
  char v43 = (std::__shared_weak_count *)v50.__imp_.__imp_;
  if (v50.__imp_.__imp_ && !atomic_fetch_add((atomic_ullong *volatile)v50.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
  }
  if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
  }
LABEL_72:
  if (v75) {
    std::__destroy_at[abi:fe180100]<AMSCore::SQLiteStatement,0>(&v69);
  }
  else {
    ((void (*)(std::runtime_error *))v69.~runtime_error)(&v69);
  }
  v63[0].__vftable = (std::runtime_error_vtbl *)*MEMORY[0x1E4FBA418];
  *(std::runtime_error_vtbl **)((char *)&v63[0].__vftable + (unint64_t)v63[0].__vftable[-1].~runtime_error) = *(std::runtime_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
  v63[0].__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
  if (v67 < 0) {
    operator delete(v66);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FA3FD0](&v68);
}

void sub_18DAADD84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  operator delete(v32);
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
    std::string v35 = a24;
    if (!a24)
    {
LABEL_3:
      int64_t v36 = a23;
      if (!a23) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
  }
  else
  {
    std::string v35 = a24;
    if (!a24) {
      goto LABEL_3;
    }
  }
  a25 = (uint64_t)v35;
  operator delete(v35);
  int64_t v36 = a23;
  if (!a23) {
    goto LABEL_9;
  }
LABEL_7:
  if (!atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
LABEL_9:
  AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0::~$_0(&a13);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a11);
  std::expected<AMSCore::SQLiteStatement,AMSCore::Error>::~expected[abi:fe180100](v33 - 176);
  std::ostringstream::~ostringstream((uint64_t)&a32);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0::$_0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v5 = *(unsigned char **)(a2 + 16);
  uint64_t v4 = *(unsigned char **)(a2 + 24);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v6 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v7 = (char *)operator new(v6);
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v7;
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a1 + 32) = v8;
    memcpy(v7, v5, v6 - 6);
    *(void *)(a1 + 24) = v8;
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  std::string v10 = *(unsigned char **)(a2 + 40);
  uint64_t v9 = *(unsigned char **)(a2 + 48);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v11 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    long long v12 = (char *)operator new(v11);
    *(void *)(a1 + 40) = v12;
    *(void *)(a1 + 48) = v12;
    uint64_t v13 = &v12[8 * (v11 >> 3)];
    *(void *)(a1 + 56) = v13;
    memcpy(v12, v10, v11 - 5);
    *(void *)(a1 + 48) = v13;
  }
  return a1;
}

void sub_18DAAE008(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v2;
  if (*v2)
  {
    v1[6] = v5;
    operator delete(v5);
    int64_t v6 = *v3;
    if (!*v3)
    {
LABEL_3:
      uint64_t v7 = (std::__shared_weak_count *)v1[1];
      if (!v7) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
  }
  else
  {
    int64_t v6 = *v3;
    if (!*v3) {
      goto LABEL_3;
    }
  }
  v1[3] = v6;
  operator delete(v6);
  uint64_t v7 = (std::__shared_weak_count *)v1[1];
  if (!v7) {
    goto LABEL_9;
  }
LABEL_7:
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_9:
  _Unwind_Resume(exception_object);
}

void *AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0::~$_0(void *a1)
{
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::target_type()
{
}

uint64_t std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder12withDistinctERKNSt3__16v"
                     "ectorINS0_10ColumnDescENS3_9allocatorIS5_EEEERKNS4_INS0_9ConditionENS6_ISB_EEEEE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder12withDistinctE"
                                "RKNSt3__16vectorINS0_10ColumnDescENS3_9allocatorIS5_EEEERKNS4_INS0_9ConditionENS6_ISB_EEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder12withDistinctERKNSt3__16vectorINS0_10ColumnDescENS3_9allocatorIS5_EEEERKNS4_INS0_9ConditionENS6_ISB_EEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder12withDistinctERKNSt3__16vectorINS0_10ColumnDescENS3_9allocatorIS5_EEEERKNS4_INS0_9ConditionENS6_ISB_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  int64_t v6 = (uint64_t *)(a1 + 48);
  AMSCore::StructuredData::IsValidValuesFromColumnTypes<std::vector<AMSCore::StructuredData::Condition>,std::vector<AMSCore::Any>>((uint64_t)&v32, *(void *)(a1 + 48), *(void *)(a1 + 56), *a2, a2[1]);
  AMSCore::firstError<void,AMSCore::Error>(&v25, (uint64_t)&v32);
  if (!v38) {
    ((void (*)(std::runtime_error *))v32.~runtime_error)(&v32);
  }
  if (!v31)
  {
    long long v22 = 0uLL;
    uint64_t v23 = 0;
    std::string v10 = *(sqlite3 ***)(a1 + 8);
    v32.__vftable = (std::runtime_error_vtbl *)&unk_1EDC834A0;
    v32.__imp_.__imp_ = (const char *)(a1 + 24);
    *(void *)&long long v33 = &v22;
    *((void *)&v33 + 1) = &v32;
    AMSCore::SQLiteStatement::exec((uint64_t)&v25, v10, v24, (uint64_t)&v32);
    if (*((std::runtime_error **)&v33 + 1) == &v32)
    {
      ((void (*)(std::runtime_error *))v32.__vftable[1].~runtime_error_0)(&v32);
      if (v31)
      {
LABEL_10:
        *(_OWORD *)a3 = v22;
        *(void *)(a3 + 16) = v23;
        long long v22 = 0uLL;
        uint64_t v23 = 0;
        *(unsigned char *)(a3 + 72) = 1;
LABEL_31:
        v25.__vftable = (std::runtime_error_vtbl *)&v22;
        std::vector<std::vector<AMSCore::Any>>::__destroy_vector::operator()[abi:fe180100]((void ***)&v25);
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v24, (unsigned int *)v24[1]);
        return;
      }
    }
    else
    {
      if (*((void *)&v33 + 1)) {
        (*(void (**)(void))(**((void **)&v33 + 1) + 40))(*((void *)&v33 + 1));
      }
      if (v31) {
        goto LABEL_10;
      }
    }
    std::runtime_error::runtime_error(&v32, &v25);
    long long v33 = v26;
    v32.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v34 = v27;
    std::string v35 = v28;
    uint64_t v36 = v29;
    if (v29)
    {
      *((void *)v28 + 2) = &v35;
      uint64_t v27 = &v28;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
    }
    else
    {
      uint64_t v34 = &v35;
    }
    long long v37 = v30;
    long long v30 = 0uLL;
    char v38 = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v16, (uint64_t)&v32);
    std::runtime_error::runtime_error((std::runtime_error *)a3, &v16);
    *(_OWORD *)(a3 + 16) = v17;
    *(void *)a3 = &unk_1EDC827D8;
    uint64_t v12 = v19;
    *(void *)(a3 + 32) = v18;
    *(void *)(a3 + 40) = v12;
    uint64_t v13 = a3 + 40;
    uint64_t v14 = v20;
    *(void *)(a3 + 48) = v20;
    if (v14)
    {
      *(void *)(v12 + 16) = v13;
      uint64_t v18 = &v19;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v12 = 0;
    }
    else
    {
      *(void *)(a3 + 32) = v13;
    }
    *(_OWORD *)(a3 + 56) = v21;
    long long v21 = 0uLL;
    *(unsigned char *)(a3 + 72) = 0;
    v16.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v18, (unsigned int *)v12);
    MEMORY[0x192FA3C30](&v16);
    if (v38)
    {
      v32.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      long long v15 = (std::__shared_weak_count *)*((void *)&v37 + 1);
      if (*((void *)&v37 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v37 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v34, v35);
      MEMORY[0x192FA3C30](&v32);
    }
    if (!v31) {
      ((void (*)(std::runtime_error *))v25.~runtime_error)(&v25);
    }
    goto LABEL_31;
  }
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v32, (uint64_t)&v25);
  std::runtime_error::runtime_error((std::runtime_error *)a3, &v32);
  *(_OWORD *)(a3 + 16) = v33;
  *(void *)a3 = &unk_1EDC827D8;
  uint64_t v7 = v35;
  *(void *)(a3 + 32) = v34;
  *(void *)(a3 + 40) = v7;
  uint64_t v8 = a3 + 40;
  uint64_t v9 = v36;
  *(void *)(a3 + 48) = v36;
  if (v9)
  {
    *((void *)v7 + 2) = v8;
    uint64_t v34 = &v35;
    std::string v35 = 0;
    uint64_t v36 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    *(void *)(a3 + 32) = v8;
  }
  *(_OWORD *)(a3 + 56) = v37;
  long long v37 = 0uLL;
  *(unsigned char *)(a3 + 72) = 0;
  v32.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v34, v7);
  MEMORY[0x192FA3C30](&v32);
  if (v31)
  {
    v25.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    int64_t v11 = (std::__shared_weak_count *)*((void *)&v30 + 1);
    if (*((void *)&v30 + 1))
    {
      if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v27, v28);
    MEMORY[0x192FA3C30](&v25);
  }
}

void sub_18DAAE678(_Unwind_Exception *exception_object)
{
  if (!*(unsigned char *)(v1 - 64))
  {
    (**(void (***)(uint64_t))(v1 - 136))(v1 - 136);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> &&)#1},std::allocator<std::map<std::string,AMSCore::Any> &&>,BOOL ()(std::map<std::string,AMSCore::Any> &)>::target_type()
{
}

uint64_t std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> &&)#1},std::allocator<std::map<std::string,AMSCore::Any> &&>,BOOL ()(std::map<std::string,AMSCore::Any> &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder12withDistinctERKNSt3__16"
                     "vectorINS0_10ColumnDescENS3_9allocatorIS5_EEEERKNS4_INS0_9ConditionENS6_ISB_EEEEENK3$_0clERKNS4_INS"
                     "_3AnyENS6_ISH_EEEEEUlONS3_3mapINS3_12basic_stringIcNS3_11char_traitsIcEENS6_IcEEEESH_NS3_4lessIvEEN"
                     "S6_INS3_4pairIKSR_SH_EEEEEEE_"
    || ((v3 & (unint64_t)"ZZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder12withDistinct"
                                "ERKNSt3__16vectorINS0_10ColumnDescENS3_9allocatorIS5_EEEERKNS4_INS0_9ConditionENS6_ISB_E"
                                "EEEENK3$_0clERKNS4_INS_3AnyENS6_ISH_EEEEEUlONS3_3mapINS3_12basic_stringIcNS3_11char_trai"
                                "tsIcEENS6_IcEEEESH_NS3_4lessIvEENS6_INS3_4pairIKSR_SH_EEEEEEE_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder12withDistinctERKNSt3__16vectorINS0_10ColumnDescENS3_9allocatorIS5_EEEERKNS4_INS0_9ConditionENS6_ISB_EEEEENK3$_0clERKNS4_INS_3AnyENS6_ISH_EEEEEUlONS3_3mapINS3_12basic_stringIcNS3_11char_traitsIcEENS6_IcEEEESH_NS3_4lessIvEENS6_INS3_4pairIKSR_SH_EEEEEEE_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder12withDistinctERKNSt3__16vectorINS0_10ColumnDescENS3_9allocatorIS5_EEEERKNS4_INS0_9ConditionENS6_ISB_EEEEENK3$_0clERKNS4_INS_3AnyENS6_ISH_EEEEEUlONS3_3mapINS3_12basic_stringIcNS3_11char_traitsIcEENS6_IcEEEESH_NS3_4lessIvEENS6_INS3_4pairIKSR_SH_EEEEEEE_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> &&)#1},std::allocator<std::map<std::string,AMSCore::Any> &&>,BOOL ()(std::map<std::string,AMSCore::Any> &)>::operator()(uint64_t a1, void *a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = a2 + 1;
  uint64_t v6 = a2[1];
  long long v17 = (unsigned int **)*a2;
  uint64_t v18 = (unsigned int *)v6;
  if (a2[2])
  {
    *(void *)(v6 + 16) = &v18;
    *a2 = v5;
    *uint64_t v5 = 0;
    a2[2] = 0;
  }
  else
  {
    long long v17 = &v18;
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v17, v18);
  int v7 = v22;
  if (!v22)
  {
    std::string v10 = (void (**)(void **))__p[0];
    goto LABEL_16;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void **)(v8 + 8);
  if ((unint64_t)v9 >= *(void *)(v8 + 16))
  {
    int64_t v11 = std::vector<std::vector<AMSCore::Any>>::__emplace_back_slow_path<std::vector<AMSCore::Any>>(*(void ****)(a1 + 16), (uint64_t)__p);
    std::string v10 = (void (**)(void **))__p[0];
    *(void *)(v8 + 8) = v11;
    if (!v22) {
      goto LABEL_16;
    }
    if (v10)
    {
      uint64_t v12 = (char *)__p[1];
      uint64_t v13 = v10;
      if (__p[1] != v10)
      {
        do
        {
          uint64_t v14 = (void (**)(void **))(v12 - 32);
          uint64_t v15 = *((unsigned int *)v12 - 2);
          if (v15 != -1) {
            ((void (*)(char *, char *))off_1EDCA5870[v15])(&v23, v12 - 32);
          }
          *((_DWORD *)v12 - 2) = -1;
          v12 -= 32;
        }
        while (v14 != v10);
        uint64_t v13 = (void (**)(void **))__p[0];
      }
      __p[1] = v10;
      operator delete(v13);
    }
  }
  else
  {
    *uint64_t v9 = 0;
    v9[1] = 0;
    std::runtime_error v9[2] = 0;
    *(_OWORD *)uint64_t v9 = *(_OWORD *)__p;
    std::runtime_error v9[2] = v21;
    __p[1] = 0;
    uint64_t v21 = 0;
    __p[0] = 0;
    *(void *)(v8 + 8) = v9 + 3;
    if (!v22)
    {
      std::string v10 = 0;
LABEL_16:
      (*v10)(__p);
    }
  }
  return v7 != 0;
}

void sub_18DAAE8C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  std::string::size_type v24 = __p;
  if (!a22)
  {
    (*(void (**)(char **))__p)(&__p);
    _Unwind_Resume(exception_object);
  }
  if (__p)
  {
    std::runtime_error v25 = a14;
    long long v26 = __p;
    if (a14 != __p)
    {
      do
      {
        uint64_t v27 = v25 - 32;
        uint64_t v28 = *((unsigned int *)v25 - 2);
        if (v28 != -1) {
          ((void (*)(uint64_t, char *))off_1EDCA5870[v28])(v22 - 49, v25 - 32);
        }
        *((_DWORD *)v25 - 2) = -1;
        v25 -= 32;
      }
      while (v27 != v24);
      long long v26 = __p;
    }
    a14 = v24;
    operator delete(v26);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMSCore::StructuredData::anonymous namespace'::mapToRow(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  long long v36 = 0uLL;
  unint64_t v37 = 0;
  std::vector<AMSCore::Any>::reserve((char **)&v36, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 == v7)
  {
LABEL_30:
    *(_OWORD *)a1 = v36;
    *(void *)(a1 + 16) = v37;
    *(unsigned char *)(a1 + 72) = 1;
    return;
  }
  uint64_t v8 = (uint64_t *)(a3 + 8);
  uint64_t v27 = a1 + 40;
  while (1)
  {
    size_t v9 = *(void *)(v6 + 8);
    if (v9 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:fe180100]();
    }
    std::string v10 = *(const void **)v6;
    if (v9 >= 0x17)
    {
      uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17) {
        uint64_t v12 = v9 | 7;
      }
      uint64_t v13 = v12 + 1;
      int64_t v11 = (const void **)operator new(v12 + 1);
      __dst[1] = (const void *)v9;
      unint64_t v35 = v13 | 0x8000000000000000;
      __dst[0] = v11;
LABEL_10:
      memmove(v11, v10, v9);
      goto LABEL_11;
    }
    HIBYTE(v35) = *(void *)(v6 + 8);
    int64_t v11 = __dst;
    if (v9) {
      goto LABEL_10;
    }
LABEL_11:
    *((unsigned char *)v11 + v9) = 0;
    uint64_t v14 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::find<std::string>(a3, __dst);
    uint64_t v15 = v14;
    if (v8 != v14)
    {
      uint64_t v16 = *((void *)&v36 + 1);
      if (*((void *)&v36 + 1) >= v37)
      {
        uint64_t v19 = std::vector<AMSCore::Any>::__emplace_back_slow_path<AMSCore::Any>((uint64_t *)&v36, (uint64_t)(v14 + 7));
LABEL_22:
        *((void *)&v36 + 1) = v19;
        if ((SHIBYTE(v35) & 0x80000000) == 0) {
          goto LABEL_24;
        }
LABEL_23:
        operator delete((void *)__dst[0]);
        goto LABEL_24;
      }
      **((unsigned char **)&v36 + 1) = 0;
      *(_DWORD *)(v16 + 24) = -1;
      uint64_t v17 = *((unsigned int *)v14 + 20);
      if (v17 != -1)
      {
        ((void (*)(std::runtime_error *, uint64_t, uint64_t *))off_1EDCA5520[v17])(&v28, v16, v14 + 7);
        *(_DWORD *)(v16 + 24) = v17;
        uint64_t v18 = *((unsigned int *)v15 + 20);
        if (v18 != -1)
        {
          if (!v18)
          {
LABEL_18:
            uint64_t v19 = v16 + 32;
            goto LABEL_22;
          }
          ((void (*)(std::runtime_error *, uint64_t *))off_1EDCA54D0[v18])(&v28, v15 + 7);
        }
      }
      *((_DWORD *)v15 + 20) = 0;
      goto LABEL_18;
    }
    AMSCore::Unexpected<AMSCore::Error,AMSCore::ErrorCode,char const(&)[17]>((uint64_t)&v28, 0x3E7u, "Column not found");
    std::runtime_error::runtime_error((std::runtime_error *)a1, &v28);
    *(_OWORD *)(a1 + 16) = v29;
    *(void *)a1 = &unk_1EDC827D8;
    uint64_t v20 = v31;
    *(void *)(a1 + 32) = v30;
    *(void *)(a1 + 40) = v20;
    uint64_t v21 = v32;
    *(void *)(a1 + 48) = v32;
    if (v21)
    {
      *(void *)(v20 + 16) = v27;
      uint64_t v20 = 0;
      long long v30 = &v31;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
    }
    else
    {
      *(void *)(a1 + 32) = v27;
    }
    *(_OWORD *)(a1 + 56) = v33;
    long long v33 = 0uLL;
    *(unsigned char *)(a1 + 72) = 0;
    v28.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v30, (unsigned int *)v20);
    MEMORY[0x192FA3C30](&v28);
    if (SHIBYTE(v35) < 0) {
      goto LABEL_23;
    }
LABEL_24:
    if (v8 == v15) {
      break;
    }
    v6 += 24;
    if (v6 == v7) {
      goto LABEL_30;
    }
  }
  uint64_t v22 = v36;
  if ((void)v36)
  {
    uint64_t v23 = *((void *)&v36 + 1);
    std::string::size_type v24 = (void *)v36;
    if (*((void *)&v36 + 1) != (void)v36)
    {
      do
      {
        uint64_t v25 = v23 - 32;
        uint64_t v26 = *(unsigned int *)(v23 - 8);
        if (v26 != -1) {
          ((void (*)(std::runtime_error *, uint64_t))off_1EDCA5870[v26])(&v28, v23 - 32);
        }
        *(_DWORD *)(v23 - 8) = -1;
        v23 -= 32;
      }
      while (v25 != v22);
      std::string::size_type v24 = (void *)v36;
    }
    *((void *)&v36 + 1) = v22;
    operator delete(v24);
  }
}

void sub_18DAAECE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  std::vector<AMSCore::Any>::~vector[abi:fe180100]((void **)(v29 - 112));
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> &&)#1},std::allocator<std::map<std::string,AMSCore::Any> &&>,BOOL ()(std::map<std::string,AMSCore::Any> &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EDC834A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> &&)#1},std::allocator<std::map<std::string,AMSCore::Any> &&>,BOOL ()(std::map<std::string,AMSCore::Any> &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EDC834A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&)::{lambda(std::map<std::string,AMSCore::Any> &&)#1},std::allocator<std::map<std::string,AMSCore::Any> &&>,BOOL ()(std::map<std::string,AMSCore::Any> &)>::~__func()
{
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[6];
  if (v2)
  {
    __p[7] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)__p[3];
  if (v3)
  {
    __p[4] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)__p[2];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  operator delete(__p);
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::destroy(void *a1)
{
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDC82F78;
  return std::__compressed_pair_elem<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,0,false>::__compressed_pair_elem[abi:fe180100]<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0 const&,0ul>(a2 + 1, (void *)(a1 + 8));
}

void *std::__compressed_pair_elem<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,0,false>::__compressed_pair_elem[abi:fe180100]<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0 const&,0ul>(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  uint64_t v6 = (unsigned char *)a2[2];
  uint64_t v5 = (unsigned char *)a2[3];
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v8 = (char *)operator new(v7);
    a1[2] = v8;
    a1[3] = v8;
    size_t v9 = &v8[8 * (v7 >> 3)];
    a1[4] = v9;
    memcpy(v8, v6, v7 - 6);
    a1[3] = v9;
  }
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  int64_t v11 = (unsigned char *)a2[5];
  std::string v10 = (unsigned char *)a2[6];
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v12 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v13 = (char *)operator new(v12);
    a1[5] = v13;
    a1[6] = v13;
    uint64_t v14 = &v13[8 * (v12 >> 3)];
    a1[7] = v14;
    memcpy(v13, v11, v12 - 5);
    a1[6] = v14;
  }
  return a1;
}

void sub_18DAAF03C(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v2;
  if (*v2)
  {
    v1[6] = v5;
    operator delete(v5);
    uint64_t v6 = *v3;
    if (!*v3)
    {
LABEL_3:
      int64_t v7 = (std::__shared_weak_count *)v1[1];
      if (!v7) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v6 = *v3;
    if (!*v3) {
      goto LABEL_3;
    }
  }
  v1[3] = v6;
  operator delete(v6);
  int64_t v7 = (std::__shared_weak_count *)v1[1];
  if (!v7) {
    goto LABEL_9;
  }
LABEL_7:
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_9:
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t v2 = operator new(0x48uLL);
  *uint64_t v2 = &unk_1EDC82F78;
  std::__compressed_pair_elem<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,0,false>::__compressed_pair_elem[abi:fe180100]<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_18DAAF128(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::~__func(void *a1)
{
  *a1 = &unk_1EDC82F78;
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x192FA4080);
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDistinct(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::~__func(void *a1)
{
  *a1 = &unk_1EDC82F78;
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

uint64_t AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  AMSCore::StructuredData::IsColumnInTable<std::vector<AMSCore::StructuredData::Condition>>((uint64_t)&v55, *(void *)(*(void *)(a1 + 8) + 16), *(void *)(*(void *)(a1 + 8) + 24), *a2, a2[1]);
  AMSCore::firstError<void,AMSCore::Error>(v49, (uint64_t)&v55);
  if (!v61) {
    ((void (*)(std::runtime_error *))v55.~runtime_error)(&v55);
  }
  if ((_BYTE)v52)
  {
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v55, (uint64_t)v49);
    std::runtime_error::runtime_error((std::runtime_error *)a3, &v55);
    *(_OWORD *)(a3 + 16) = v56;
    *(void *)a3 = &unk_1EDC827D8;
    uint64_t v6 = v58;
    *(void *)(a3 + 32) = v57;
    *(void *)(a3 + 40) = v6;
    uint64_t v7 = a3 + 40;
    uint64_t v8 = v59;
    *(void *)(a3 + 48) = v59;
    if (v8)
    {
      *(void *)(v6 + 16) = v7;
      long long v57 = (unsigned int **)&v58;
      uint64_t v58 = 0;
      std::runtime_error v59 = 0;
      uint64_t v6 = 0;
    }
    else
    {
      *(void *)(a3 + 32) = v7;
    }
    *(_OWORD *)(a3 + 56) = v60;
    long long v60 = 0uLL;
    *(unsigned char *)(a3 + 72) = 0;
    v55.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v57, (unsigned int *)v6);
    uint64_t result = MEMORY[0x192FA3C30](&v55);
    if ((_BYTE)v52)
    {
      v49[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v21 = v51;
      if (v51)
      {
        if (!atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v50, v50[1]);
      return MEMORY[0x192FA3C30](v49);
    }
    return result;
  }
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v49);
  size_t v9 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v49, (uint64_t)"DELETE FROM \"", 13);
  std::string v10 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v9, **(void **)(a1 + 8), *(void *)(*(void *)(a1 + 8) + 8));
  int64_t v11 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v10, (uint64_t)"\"\n", 2);
  v55.__vftable = (std::runtime_error_vtbl *)a2;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v12, (uint64_t)"\n", 1);
  uint64_t v13 = *(void *)(a1 + 16);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v49[0].__imp_, (std::string *)&__p);
  uint64_t v14 = *(void *)(v13 + 8);
  v37.__vftable = *(std::runtime_error_vtbl **)v13;
  v37.__imp_.__imp_ = (const char *)v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  AMSCore::SQLiteStatement::make((uint64_t)&v55, (uint64_t)&v37, (uint64_t)&__p);
  uint64_t imp = (std::__shared_weak_count *)v37.__imp_.__imp_;
  if (v37.__imp_.__imp_ && !atomic_fetch_add((atomic_ullong *volatile)v37.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
    std::__shared_weak_count::__release_weak(imp);
    if ((SBYTE7(v44) & 0x80000000) == 0)
    {
LABEL_11:
      if (v61) {
        goto LABEL_12;
      }
LABEL_23:
      std::runtime_error::runtime_error(&__p, &v55);
      long long v44 = v56;
      __p.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v45 = v57;
      v46[0] = (unsigned int *)v58;
      v46[1] = v59;
      if (v59)
      {
        *(void *)(v58 + 16) = v46;
        long long v57 = (unsigned int **)&v58;
        uint64_t v58 = 0;
        std::runtime_error v59 = 0;
      }
      else
      {
        uint64_t v45 = v46;
      }
      long long v47 = v60;
      long long v60 = 0uLL;
      char v48 = 1;
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v37, (uint64_t)&__p);
      std::runtime_error::runtime_error((std::runtime_error *)a3, &v37);
      *(_OWORD *)(a3 + 16) = v38;
      *(void *)a3 = &unk_1EDC827D8;
      uint64_t v33 = v40;
      *(void *)(a3 + 32) = v39;
      *(void *)(a3 + 40) = v33;
      uint64_t v34 = a3 + 40;
      uint64_t v35 = v41;
      *(void *)(a3 + 48) = v41;
      if (v35)
      {
        *(void *)(v33 + 16) = v34;
        uint64_t v39 = &v40;
        uint64_t v40 = 0;
        uint64_t v41 = 0;
        uint64_t v33 = 0;
      }
      else
      {
        *(void *)(a3 + 32) = v34;
      }
      *(_OWORD *)(a3 + 56) = v42;
      long long v42 = 0uLL;
      *(unsigned char *)(a3 + 72) = 0;
      v37.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v39, (unsigned int *)v33);
      MEMORY[0x192FA3C30](&v37);
      if (v48)
      {
        __p.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        long long v36 = (std::__shared_weak_count *)*((void *)&v47 + 1);
        if (*((void *)&v47 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v47 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v45, v46[0]);
        MEMORY[0x192FA3C30](&__p);
      }
      goto LABEL_53;
    }
  }
  else if ((SBYTE7(v44) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(__p.__vftable);
  if (!v61) {
    goto LABEL_23;
  }
LABEL_12:
  uint64_t v16 = (char *)operator new(0x50uLL);
  *((void *)v16 + 1) = 0;
  *((void *)v16 + 2) = 0;
  *(void *)uint64_t v16 = &unk_1EDC83D00;
  std::runtime_error v17 = v55;
  uint64_t v18 = v59;
  *((void *)v16 + 5) = v56;
  *(std::runtime_error *)(v16 + 24) = v17;
  v55.__vftable = 0;
  v55.__imp_.__imp_ = 0;
  *(void *)&long long v56 = 0;
  if (v18)
  {
    if (v18 == (unsigned int *)((char *)&v56 + 8))
    {
      *((void *)v16 + 9) = v16 + 48;
      (*(void (**)(unsigned int *))(*(void *)v18 + 24))(v18);
      goto LABEL_28;
    }
    uint64_t v19 = &v59;
    *((void *)v16 + 9) = v18;
  }
  else
  {
    uint64_t v19 = (unsigned int **)(v16 + 72);
  }
  *uint64_t v19 = 0;
LABEL_28:
  v37.__vftable = (std::runtime_error_vtbl *)(v16 + 24);
  v37.__imp_.__imp_ = v16;
  __p.__vftable = 0;
  __p.__imp_.__imp_ = 0;
  *(void *)&long long v44 = 0;
  uint64_t v23 = (const void *)*a2;
  uint64_t v22 = a2[1];
  int64_t v24 = v22 - *a2;
  if (v22 == *a2)
  {
    uint64_t v25 = 0;
    uint64_t v27 = 0;
    std::runtime_error v28 = 0;
    *((void *)&v44 + 1) = v16 + 24;
    uint64_t v45 = (unsigned int **)v16;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v16 + 1, 1uLL, memory_order_relaxed);
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v24 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v25 = (std::runtime_error_vtbl *)operator new(v24);
    size_t v26 = 8 * (v24 >> 3);
    __p.__vftable = v25;
    *(void *)&long long v44 = (char *)v25 + v26;
    memcpy(v25, v23, v24 - 5);
    __p.__imp_.__imp_ = (char *)v25 + v26;
    *((void *)&v44 + 1) = v16 + 24;
    uint64_t v45 = (unsigned int **)v16;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v16 + 1, 1uLL, memory_order_relaxed);
    if (v26)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((8 * (v24 >> 3)) >> 3) > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:fe180100]();
      }
      uint64_t v27 = (char *)operator new(v26);
      std::runtime_error v28 = &v27[8 * ((8 * (v24 >> 3)) >> 3)];
      memcpy(v27, v25, v26 - 5);
    }
    else
    {
      uint64_t v27 = 0;
      std::runtime_error v28 = 0;
    }
  }
  *((void *)&v44 + 1) = 0;
  uint64_t v45 = 0;
  *(void *)(a3 + 24) = 0;
  uint64_t v29 = operator new(0x30uLL);
  *uint64_t v29 = &unk_1EDC82DC0;
  v29[1] = 0;
  void v29[2] = 0;
  void v29[3] = 0;
  int64_t v30 = v28 - v27;
  if (v28 != v27)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v30 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v31 = (char *)operator new(v30);
    v29[1] = v31;
    uint64_t v32 = &v31[8 * (v30 >> 3)];
    void v29[3] = v32;
    memcpy(v31, v27, v30 - 5);
    void v29[2] = v32;
  }
  v29[4] = v16 + 24;
  v29[5] = v16;
  *(void *)(a3 + 24) = v29;
  if (v27) {
    operator delete(v27);
  }
  *(unsigned char *)(a3 + 72) = 1;
  if (v25) {
    operator delete(v25);
  }
  if (!atomic_fetch_add((atomic_ullong *volatile)v16 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(char *))(*(void *)v16 + 16))(v16);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v16);
  }
LABEL_53:
  if (v61) {
    std::__destroy_at[abi:fe180100]<AMSCore::SQLiteStatement,0>(&v55);
  }
  else {
    ((void (*)(std::runtime_error *))v55.~runtime_error)(&v55);
  }
  v49[0].__vftable = (std::runtime_error_vtbl *)*MEMORY[0x1E4FBA418];
  *(std::runtime_error_vtbl **)((char *)&v49[0].__vftable + (unint64_t)v49[0].__vftable[-1].~runtime_error) = *(std::runtime_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
  v49[0].__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
  if (v53 < 0) {
    operator delete(v52);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FA3FD0](&v54);
}

void sub_18DAAFB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0::~$_0((uint64_t)&a20);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a11);
  std::expected<AMSCore::SQLiteStatement,AMSCore::Error>::~expected[abi:fe180100](v30 - 176);
  std::ostringstream::~ostringstream((uint64_t)&a30);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    unint64_t v3 = *(void **)a1;
    if (!*(void *)a1) {
      return a1;
    }
    goto LABEL_4;
  }
  unint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
LABEL_4:
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::target_type()
{
}

uint64_t std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withDeleteERKNSt3__16vec"
                     "torINS0_9ConditionENS3_9allocatorIS5_EEEEE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withDeleteERK"
                                "NSt3__16vectorINS0_9ConditionENS3_9allocatorIS5_EEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withDeleteERKNSt3__16vectorINS0_9ConditionENS3_9allocatorIS5_EEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withDeleteERKNSt3__16vectorINS0_9ConditionENS3_9allocatorIS5_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::operator()(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1 + 1;
  AMSCore::StructuredData::IsValidValuesFromColumnTypes<std::vector<AMSCore::StructuredData::Condition>,std::vector<AMSCore::Any>>((uint64_t)&v12, a1[1], a1[2], *a2, a2[1]);
  AMSCore::firstError<void,AMSCore::Error>(&v19, (uint64_t)&v12);
  if (v18)
  {
    if (v23) {
      goto LABEL_3;
    }
LABEL_6:
    std::string v10 = (sqlite3 **)a1[4];
    uint64_t v20 = 0;
    AMSCore::SQLiteStatement::exec(a3, v10, &v12, (uint64_t)&v19);
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v12, (unsigned int *)v12.__imp_.__imp_);
    return;
  }
  ((void (*)(std::runtime_error *))v12.~runtime_error)(&v12);
  if (!v23) {
    goto LABEL_6;
  }
LABEL_3:
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v12, (uint64_t)&v19);
  std::runtime_error::runtime_error((std::runtime_error *)a3, &v12);
  *(_OWORD *)(a3 + 16) = v13;
  *(void *)a3 = &unk_1EDC827D8;
  uint64_t v7 = v15;
  *(void *)(a3 + 32) = v14;
  *(void *)(a3 + 40) = v7;
  uint64_t v8 = a3 + 40;
  uint64_t v9 = v16;
  *(void *)(a3 + 48) = v16;
  if (v9)
  {
    *(void *)(v7 + 16) = v8;
    uint64_t v14 = &v15;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    *(void *)(a3 + 32) = v8;
  }
  *(_OWORD *)(a3 + 56) = v17;
  long long v17 = 0uLL;
  *(unsigned char *)(a3 + 72) = 0;
  v12.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v14, (unsigned int *)v7);
  MEMORY[0x192FA3C30](&v12);
  if (v23)
  {
    v19.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    int64_t v11 = v22;
    if (v22)
    {
      if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v21, v21[1]);
    MEMORY[0x192FA3C30](&v19);
  }
}

void sub_18DAAFF48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void (**a10)(void), uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (!a19)
  {
    (*a10)(&a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[5];
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    unint64_t v3 = (void *)__p[1];
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  unint64_t v3 = (void *)__p[1];
  if (v3)
  {
LABEL_4:
    __p[2] = v3;
    operator delete(v3);
  }
LABEL_5:
  operator delete(__p);
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::destroy(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    unint64_t v3 = (void *)a1[1];
    if (!v3) {
      return;
    }
  }
  else
  {
    unint64_t v3 = (void *)a1[1];
    if (!v3) {
      return;
    }
  }
  a1[2] = v3;
  operator delete(v3);
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::__clone(void *result, void *a2)
{
  unint64_t v3 = result;
  a2[1] = 0;
  *a2 = &unk_1EDC82DC0;
  a2[2] = 0;
  a2[3] = 0;
  uint64_t v5 = (unsigned char *)result[1];
  uint64_t v4 = (unsigned char *)result[2];
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v6 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v7 = (char *)operator new(v6);
    a2[1] = v7;
    a2[2] = v7;
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    a2[3] = v8;
    uint64_t result = memcpy(v7, v5, v6 - 5);
    a2[2] = v8;
  }
  uint64_t v9 = v3[5];
  a2[4] = v3[4];
  a2[5] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_18DAB0198(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::__clone(void *a1)
{
  uint64_t v2 = operator new(0x30uLL);
  v2[1] = 0;
  *uint64_t v2 = &unk_1EDC82DC0;
  v2[2] = 0;
  v2[3] = 0;
  uint64_t v4 = (unsigned char *)a1[1];
  unint64_t v3 = (unsigned char *)a1[2];
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v5 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    int64_t v6 = (char *)operator new(v5);
    v2[1] = v6;
    v2[2] = v6;
    uint64_t v7 = &v6[8 * (v5 >> 3)];
    v2[3] = v7;
    memcpy(v6, v4, v5 - 5);
    v2[2] = v7;
  }
  uint64_t v8 = a1[5];
  v2[4] = a1[4];
  v2[5] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  return v2;
}

void sub_18DAB0294(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::~__func(void *a1)
{
  *a1 = &unk_1EDC82DC0;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    unint64_t v3 = (void *)a1[1];
    if (!v3)
    {
LABEL_5:
      JUMPOUT(0x192FA4080);
    }
  }
  else
  {
    unint64_t v3 = (void *)a1[1];
    if (!v3) {
      goto LABEL_5;
    }
  }
  a1[2] = v3;
  operator delete(v3);
  goto LABEL_5;
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withDelete(std::vector<AMSCore::StructuredData::Condition> const&)::$_0>,std::expected<void,AMSCore::Error> ()(std::vector<AMSCore::Any> const&)>::~__func(void *a1)
{
  *a1 = &unk_1EDC82DC0;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    unint64_t v3 = (void *)a1[1];
    if (!v3) {
      return a1;
    }
    goto LABEL_4;
  }
  unint64_t v3 = (void *)a1[1];
  if (v3)
  {
LABEL_4:
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  AMSCore::StructuredData::IsColumnInTable<std::vector<AMSCore::StructuredData::Condition>>((uint64_t)&__dst, *(void *)(*(void *)(a1 + 8) + 16), *(void *)(*(void *)(a1 + 8) + 24), *a2, a2[1]);
  AMSCore::firstError<void,AMSCore::Error>(&v94, (uint64_t)&__dst);
  if (!v112) {
    ((void (*)(std::runtime_error *))__dst.~runtime_error)(&__dst);
  }
  if ((_BYTE)v101) {
    goto LABEL_6;
  }
  AMSCore::StructuredData::IsColumnInTable<std::vector<AMSCore::StructuredData::Condition>>((uint64_t)&__dst, *(void *)(*(void *)(a1 + 8) + 16), *(void *)(*(void *)(a1 + 8) + 24), *a3, a3[1]);
  AMSCore::firstError<void,AMSCore::Error>(&v94, (uint64_t)&__dst);
  if (v112)
  {
    if ((_BYTE)v101) {
      goto LABEL_6;
    }
  }
  else
  {
    ((void (*)(std::runtime_error *))__dst.~runtime_error)(&__dst);
    if ((_BYTE)v101)
    {
LABEL_6:
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&__dst, (uint64_t)&v94);
      std::runtime_error::runtime_error((std::runtime_error *)a4, &__dst);
      *(_OWORD *)(a4 + 16) = v107;
      *(void *)a4 = &unk_1EDC827D8;
      uint64_t v8 = v109;
      *(void *)(a4 + 32) = v108;
      *(void *)(a4 + 40) = v8;
      uint64_t v9 = a4 + 40;
      std::string v10 = v110;
      *(void *)(a4 + 48) = v110;
      if (v10)
      {
        *((void *)v8 + 2) = v9;
        int v108 = (unsigned int *)&v109;
        uint64_t v109 = 0;
        uint64_t v110 = 0;
        uint64_t v8 = 0;
      }
      else
      {
        *(void *)(a4 + 32) = v9;
      }
      *(_OWORD *)(a4 + 56) = v111;
      long long v111 = 0uLL;
      *(unsigned char *)(a4 + 72) = 0;
      __dst.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v108, v8);
      MEMORY[0x192FA3C30](&__dst);
      if ((_BYTE)v101)
      {
        v94.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        int64_t v11 = v100;
        if (v100)
        {
          if (!atomic_fetch_add(&v100->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v96, v97);
        MEMORY[0x192FA3C30](&v94);
      }
      return;
    }
  }
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)&v94);
  std::runtime_error v12 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v94, (uint64_t)"SELECT ", 7);
  uint64_t v14 = (const void *)*a3;
  uint64_t v13 = a3[1];
  uint64_t v68 = a3;
  int64_t v15 = v13 - *a3;
  if (v13 == *a3)
  {
    uint64_t v16 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v15 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v16 = (uint64_t *)operator new(v15);
    memcpy(v16, v14, v15 - 6);
    long long v17 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v12, (uint64_t)"", 0);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v17, (uint64_t)"", 0);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v12, *v16, v16[1]);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v12, (uint64_t)"", 0);
    if (v15 != 24)
    {
      uint64_t v18 = 3;
      do
      {
        std::runtime_error v19 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v12, (uint64_t)",", 1);
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v19, (uint64_t)"", 0);
        uint64_t v20 = &v16[v18];
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v12, v16[v18], v16[v18 + 1]);
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v12, (uint64_t)"", 0);
        v18 += 3;
      }
      while (v20 + 3 != &v16[v15 >> 3]);
    }
  }
  uint64_t v21 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v12, (uint64_t)"\n", 1);
  uint64_t v22 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v21, (uint64_t)"FROM \"", 6);
  char v23 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v22, **(void **)(a1 + 8), *(void *)(*(void *)(a1 + 8) + 8));
  uint64_t v24 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v23, (uint64_t)"\"\n", 2);
  __dst.__vftable = (std::runtime_error_vtbl *)a2;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v25, (uint64_t)"\n", 1);
  if (v16) {
    operator delete(v16);
  }
  uint64_t v26 = *(void *)(a1 + 16);
  if ((v104 & 0x10) != 0)
  {
    unint64_t v29 = v103;
    if (v103 < v99)
    {
      unint64_t v103 = v99;
      unint64_t v29 = v99;
    }
    uint64_t v30 = __src;
    size_t v27 = v29 - (void)__src;
    if ((uint64_t)(v29 - (void)__src) >= 0) {
      goto LABEL_32;
    }
LABEL_136:
    __break(1u);
    return;
  }
  if ((v104 & 8) == 0)
  {
    size_t v27 = 0;
    BYTE7(v107) = 0;
    p_dst = (std::runtime_error_vtbl *)&__dst;
    goto LABEL_40;
  }
  uint64_t v30 = v95;
  size_t v27 = (char *)v97 - (unsigned char *)v95;
  if ((char *)v97 - (unsigned char *)v95 < 0) {
    goto LABEL_136;
  }
LABEL_32:
  if (v27 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:fe180100]();
  }
  if (v27 >= 0x17)
  {
    uint64_t v31 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17) {
      uint64_t v31 = v27 | 7;
    }
    uint64_t v32 = v31 + 1;
    p_dst = (std::runtime_error_vtbl *)operator new(v31 + 1);
    __dst.__imp_.__imp_ = (const char *)v27;
    *(void *)&long long v107 = v32 | 0x8000000000000000;
    __dst.__vftable = p_dst;
    goto LABEL_39;
  }
  BYTE7(v107) = v27;
  p_dst = (std::runtime_error_vtbl *)&__dst;
  if (v27) {
LABEL_39:
  }
    memmove(p_dst, v30, v27);
LABEL_40:
  *((unsigned char *)&p_dst->~runtime_error + v27) = 0;
  uint64_t v33 = *(void *)(v26 + 8);
  v78.__vftable = *(std::runtime_error_vtbl **)v26;
  v78.__imp_.__imp_ = (const char *)v33;
  if (v33) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
  }
  AMSCore::SQLiteStatement::make((uint64_t)&v87, (uint64_t)&v78, (uint64_t)&__dst);
  uint64_t imp = (std::__shared_weak_count *)v78.__imp_.__imp_;
  if (v78.__imp_.__imp_ && !atomic_fetch_add((atomic_ullong *volatile)v78.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
    std::__shared_weak_count::__release_weak(imp);
  }
  if (SBYTE7(v107) < 0) {
    operator delete(__dst.__vftable);
  }
  if (!v93)
  {
    std::runtime_error::runtime_error(&__dst, &v87);
    long long v107 = v88;
    __dst.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    int v108 = v89;
    uint64_t v109 = (unsigned int *)v90;
    uint64_t v110 = v91;
    if (v91)
    {
      *(void *)(v90 + 16) = &v109;
      int v89 = (unsigned int *)&v90;
      uint64_t v90 = 0;
      int v91 = 0;
    }
    else
    {
      int v108 = (unsigned int *)&v109;
    }
    long long v111 = v92;
    long long v92 = 0uLL;
    char v112 = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v78, (uint64_t)&__dst);
    std::runtime_error::runtime_error((std::runtime_error *)a4, &v78);
    *(_OWORD *)(a4 + 16) = v79;
    *(void *)a4 = &unk_1EDC827D8;
    uint64_t v46 = v81;
    *(void *)(a4 + 32) = v80;
    *(void *)(a4 + 40) = v46;
    uint64_t v47 = a4 + 40;
    char v48 = v82;
    *(void *)(a4 + 48) = v82;
    if (v48)
    {
      *(void *)(v46 + 16) = v47;
      uint64_t v80 = (unsigned int *)&v81;
      uint64_t v81 = 0;
      size_t v82 = 0;
      uint64_t v46 = 0;
    }
    else
    {
      *(void *)(a4 + 32) = v47;
    }
    *(_OWORD *)(a4 + 56) = v83;
    long long v83 = 0uLL;
    *(unsigned char *)(a4 + 72) = 0;
    v78.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v80, (unsigned int *)v46);
    MEMORY[0x192FA3C30](&v78);
    if (v112)
    {
      __dst.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v49 = (std::__shared_weak_count *)*((void *)&v111 + 1);
      if (*((void *)&v111 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v111 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v108, v109);
      MEMORY[0x192FA3C30](&__dst);
    }
    goto LABEL_125;
  }
  uint64_t v35 = (char *)operator new(0x50uLL);
  *((void *)v35 + 1) = 0;
  *((void *)v35 + 2) = 0;
  *(void *)uint64_t v35 = &unk_1EDC83D00;
  *(std::runtime_error *)(v35 + 24) = v87;
  v87.__vftable = 0;
  v87.__imp_.__imp_ = 0;
  uint64_t v36 = v88;
  std::runtime_error v37 = v91;
  *(void *)&long long v88 = 0;
  *((void *)v35 + 5) = v36;
  if (!v37)
  {
    long long v38 = v35 + 72;
    goto LABEL_54;
  }
  if (v37 != (long long *)((char *)&v88 + 8))
  {
    long long v38 = &v91;
    *((void *)v35 + 9) = v37;
LABEL_54:
    *long long v38 = 0;
    goto LABEL_56;
  }
  *((void *)v35 + 9) = v35 + 48;
  (*(void (**)(_OWORD *))(*(void *)v37 + 24))(v37);
LABEL_56:
  std::error_code v85 = v35 + 24;
  size_t v86 = (std::__shared_weak_count *)v35;
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(&v94, (uint64_t)" LIMIT :limit", 13);
  uint64_t v39 = *(void *)(a1 + 16);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v94.__imp_, (std::string *)&__dst);
  uint64_t v40 = *(void *)(v39 + 8);
  v69.__vftable = *(std::runtime_error_vtbl **)v39;
  v69.__imp_.__imp_ = (const char *)v40;
  if (v40) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
  }
  AMSCore::SQLiteStatement::make((uint64_t)&v78, (uint64_t)&v69, (uint64_t)&__dst);
  uint64_t v41 = (std::__shared_weak_count *)v69.__imp_.__imp_;
  if (v69.__imp_.__imp_ && !atomic_fetch_add((atomic_ullong *volatile)v69.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  if (SBYTE7(v107) < 0) {
    operator delete(__dst.__vftable);
  }
  if (v84)
  {
    long long v42 = (char *)operator new(0x50uLL);
    *((void *)v42 + 1) = 0;
    *((void *)v42 + 2) = 0;
    *(void *)long long v42 = &unk_1EDC83D00;
    *(std::runtime_error *)(v42 + 24) = v78;
    v78.__vftable = 0;
    v78.__imp_.__imp_ = 0;
    uint64_t v43 = v79;
    long long v44 = v82;
    *(void *)&long long v79 = 0;
    *((void *)v42 + 5) = v43;
    if (v44)
    {
      if (v44 == (long long *)((char *)&v79 + 8))
      {
        *((void *)v42 + 9) = v42 + 48;
        (*(void (**)(_OWORD *))(*(void *)v44 + 24))(v44);
        goto LABEL_81;
      }
      uint64_t v45 = &v82;
      *((void *)v42 + 9) = v44;
    }
    else
    {
      uint64_t v45 = v42 + 72;
    }
    *uint64_t v45 = 0;
LABEL_81:
    uint64_t v76 = v42 + 24;
    long long v77 = (std::__shared_weak_count *)v42;
    v69.__vftable = (std::runtime_error_vtbl *)(v35 + 24);
    v69.__imp_.__imp_ = v35;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v35 + 1, 1uLL, memory_order_relaxed);
    *(void *)&long long v70 = v42 + 24;
    *((void *)&v70 + 1) = v42;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v42 + 1, 1uLL, memory_order_relaxed);
    size_t v71 = 0;
    size_t v72 = 0;
    uint64_t v73 = 0;
    std::runtime_error v50 = (const void *)*a2;
    int64_t v51 = a2[1] - *a2;
    if (v51)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v51 >> 3) > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:fe180100]();
      }
      size_t v71 = operator new(v51);
      size_t v72 = (unsigned int *)v71;
      int v52 = (char *)v71 + 8 * (v51 >> 3);
      uint64_t v73 = v52;
      memcpy(v71, v50, v51 - 5);
      size_t v72 = (unsigned int *)v52;
    }
    __p[0] = 0;
    __p[1] = 0;
    char v75 = 0;
    uint64_t v54 = (const void *)*v68;
    uint64_t v53 = v68[1];
    int64_t v55 = v53 - *v68;
    if (v53 != *v68)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v55 >> 3) > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:fe180100]();
      }
      __p[0] = operator new(v55);
      __p[1] = __p[0];
      long long v56 = (char *)__p[0] + 8 * (v55 >> 3);
      char v75 = v56;
      memcpy(__p[0], v54, v55 - 6);
      __p[1] = v56;
    }
    AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0::$_0((uint64_t)&__dst, (uint64_t)&v69);
    *(void *)(a4 + 24) = 0;
    long long v57 = operator new(0x58uLL);
    *long long v57 = &unk_1EDC82E70;
    AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0::$_0((uint64_t)(v57 + 1), (uint64_t)&__dst);
    *(void *)(a4 + 24) = v57;
    if ((void)v111)
    {
      *((void *)&v111 + 1) = v111;
      operator delete((void *)v111);
    }
    if (v108)
    {
      uint64_t v109 = v108;
      operator delete(v108);
    }
    uint64_t v58 = (std::__shared_weak_count *)*((void *)&v107 + 1);
    if (*((void *)&v107 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v107 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
    std::runtime_error v59 = (std::__shared_weak_count *)__dst.__imp_.__imp_;
    if (__dst.__imp_.__imp_
      && !atomic_fetch_add((atomic_ullong *volatile)__dst.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
    *(unsigned char *)(a4 + 72) = 1;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v71)
    {
      size_t v72 = (unsigned int *)v71;
      operator delete(v71);
    }
    long long v60 = (std::__shared_weak_count *)*((void *)&v70 + 1);
    if (*((void *)&v70 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v70 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
    char v61 = (std::__shared_weak_count *)v69.__imp_.__imp_;
    if (v69.__imp_.__imp_ && !atomic_fetch_add((atomic_ullong *volatile)v69.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
    char v62 = v77;
    if (v77 && !atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
    goto LABEL_119;
  }
  std::runtime_error::runtime_error(&__dst, &v78);
  long long v107 = v79;
  __dst.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  int v108 = v80;
  uint64_t v109 = (unsigned int *)v81;
  uint64_t v110 = v82;
  if (v82)
  {
    *(void *)(v81 + 16) = &v109;
    uint64_t v80 = (unsigned int *)&v81;
    uint64_t v81 = 0;
    size_t v82 = 0;
  }
  else
  {
    int v108 = (unsigned int *)&v109;
  }
  long long v111 = v83;
  long long v83 = 0uLL;
  char v112 = 1;
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v69, (uint64_t)&__dst);
  std::runtime_error::runtime_error((std::runtime_error *)a4, &v69);
  *(_OWORD *)(a4 + 16) = v70;
  *(void *)a4 = &unk_1EDC827D8;
  uint64_t v63 = v72;
  *(void *)(a4 + 32) = v71;
  *(void *)(a4 + 40) = v63;
  uint64_t v64 = a4 + 40;
  uint64_t v65 = v73;
  *(void *)(a4 + 48) = v73;
  if (v65)
  {
    *((void *)v63 + 2) = v64;
    size_t v71 = &v72;
    size_t v72 = 0;
    uint64_t v73 = 0;
    uint64_t v63 = 0;
  }
  else
  {
    *(void *)(a4 + 32) = v64;
  }
  *(_OWORD *)(a4 + 56) = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  *(unsigned char *)(a4 + 72) = 0;
  v69.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v71, v63);
  MEMORY[0x192FA3C30](&v69);
  if (v112)
  {
    __dst.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v66 = (std::__shared_weak_count *)*((void *)&v111 + 1);
    if (*((void *)&v111 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v111 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v108, v109);
    MEMORY[0x192FA3C30](&__dst);
  }
LABEL_119:
  if (v84)
  {
    std::__destroy_at[abi:fe180100]<AMSCore::SQLiteStatement,0>(&v78);
    char v67 = v86;
    if (!v86) {
      goto LABEL_125;
    }
LABEL_123:
    if (!atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
    goto LABEL_125;
  }
  ((void (*)(std::runtime_error *))v78.~runtime_error)(&v78);
  char v67 = v86;
  if (v86) {
    goto LABEL_123;
  }
LABEL_125:
  if (v93) {
    std::__destroy_at[abi:fe180100]<AMSCore::SQLiteStatement,0>(&v87);
  }
  else {
    ((void (*)(std::runtime_error *))v87.~runtime_error)(&v87);
  }
  v94.__vftable = (std::runtime_error_vtbl *)*MEMORY[0x1E4FBA418];
  *(std::runtime_error_vtbl **)((char *)&v94.__vftable + (unint64_t)v94.__vftable[-1].~runtime_error) = *(std::runtime_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
  v94.__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
  if (v102 < 0) {
    operator delete(v101);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FA3FD0](&v105);
}

void sub_18DAB133C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  operator delete(v46);
  uint64_t v49 = *(void **)(v47 - 120);
  if (v49)
  {
    *(void *)(v47 - 112) = v49;
    operator delete(v49);
    std::runtime_error v50 = *(void **)(v47 - 144);
    if (!v50)
    {
LABEL_3:
      int64_t v51 = *(std::__shared_weak_count **)(v47 - 152);
      if (!v51) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
  }
  else
  {
    std::runtime_error v50 = *(void **)(v47 - 144);
    if (!v50) {
      goto LABEL_3;
    }
  }
  *(void *)(v47 - 136) = v50;
  operator delete(v50);
  int64_t v51 = *(std::__shared_weak_count **)(v47 - 152);
  if (!v51) {
    goto LABEL_9;
  }
LABEL_7:
  if (!atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
  }
LABEL_9:
  int v52 = *(std::__shared_weak_count **)(v47 - 168);
  if (v52)
  {
    if (!atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0::~$_0(&a11);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a21);
  std::expected<AMSCore::SQLiteStatement,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&a23);
  std::shared_ptr<AMSCore::AppleSchedulingProvider>::~shared_ptr[abi:fe180100]((uint64_t)&a33);
  std::expected<AMSCore::SQLiteStatement,AMSCore::Error>::~expected[abi:fe180100]((uint64_t)&a35);
  std::ostringstream::~ostringstream((uint64_t)&a46);
  _Unwind_Resume(a1);
}

uint64_t AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0::$_0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  int64_t v5 = *(unsigned char **)(a2 + 32);
  uint64_t v4 = *(unsigned char **)(a2 + 40);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v6 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v7 = (char *)operator new(v6);
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = v7;
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a1 + 48) = v8;
    memcpy(v7, v5, v6 - 5);
    *(void *)(a1 + 40) = v8;
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::string v10 = *(unsigned char **)(a2 + 56);
  uint64_t v9 = *(unsigned char **)(a2 + 64);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v11 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    std::runtime_error v12 = (char *)operator new(v11);
    *(void *)(a1 + 56) = v12;
    *(void *)(a1 + 64) = v12;
    uint64_t v13 = &v12[8 * (v11 >> 3)];
    *(void *)(a1 + 72) = v13;
    memcpy(v12, v10, v11 - 6);
    *(void *)(a1 + 64) = v13;
  }
  return a1;
}

void sub_18DAB1644(_Unwind_Exception *exception_object)
{
  int64_t v5 = *v2;
  if (*v2)
  {
    v1[8] = v5;
    operator delete(v5);
    int64_t v6 = *v3;
    if (!*v3)
    {
LABEL_3:
      uint64_t v7 = (std::__shared_weak_count *)v1[3];
      if (!v7) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
  }
  else
  {
    int64_t v6 = *v3;
    if (!*v3) {
      goto LABEL_3;
    }
  }
  v1[5] = v6;
  operator delete(v6);
  uint64_t v7 = (std::__shared_weak_count *)v1[3];
  if (!v7) {
    goto LABEL_9;
  }
LABEL_7:
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_9:
  uint64_t v8 = (std::__shared_weak_count *)v1[1];
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  _Unwind_Resume(exception_object);
}

void *AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0::~$_0(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[3];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    int64_t v5 = (std::__shared_weak_count *)a1[1];
    if (!v5) {
      return a1;
    }
  }
  else
  {
    int64_t v5 = (std::__shared_weak_count *)a1[1];
    if (!v5) {
      return a1;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::target_type()
{
}

uint64_t std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withSelectERKNSt3__16vec"
                     "torINS0_9ConditionENS3_9allocatorIS5_EEEERKNS4_INS0_10ColumnDescENS6_ISB_EEEEE3$_0"
    || ((v3 & (unint64_t)"ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withSelectERK"
                                "NSt3__16vectorINS0_9ConditionENS3_9allocatorIS5_EEEERKNS4_INS0_10ColumnDescENS6_ISB_EEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withSelectERKNSt3__16vectorINS0_9ConditionENS3_9allocatorIS5_EEEERKNS4_INS0_10ColumnDescENS6_ISB_EEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withSelectERKNSt3__16vectorINS0_9ConditionENS3_9allocatorIS5_EEEERKNS4_INS0_10ColumnDescENS6_ISB_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(std::runtime_error_vtbl **)a3;
  uint64_t v8 = *(unsigned __int8 *)(a3 + 8);
  uint64_t v9 = (uint64_t *)(a1 + 40);
  AMSCore::StructuredData::IsValidValuesFromColumnTypes<std::vector<AMSCore::StructuredData::Condition>,std::vector<AMSCore::Any>>((uint64_t)&v37, *(void *)(a1 + 40), *(void *)(a1 + 48), *a2, a2[1]);
  AMSCore::firstError<void,AMSCore::Error>(&v30, (uint64_t)&v37);
  if (!v43) {
    ((void (*)(std::runtime_error *))v37.~runtime_error)(&v37);
  }
  if (!v36)
  {
    if (v8)
    {
      v30.__vftable = v7;
      DWORD2(v31) = 4;
      BYTE7(v38) = 6;
      strcpy((char *)&v37, ":limit");
      uint64_t v13 = std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v29, (const void **)&v37.__vftable, (uint64_t)&v37);
      AMSCore::Any::operator=((uint64_t)(v13 + 56), (uint64_t)&v30);
      if (SBYTE7(v38) < 0) {
        operator delete(v37.__vftable);
      }
      if (DWORD2(v31) != -1) {
        ((void (*)(std::runtime_error *, std::runtime_error *))off_1EDCA5870[DWORD2(v31)])(&v37, &v30);
      }
    }
    long long v27 = 0uLL;
    uint64_t v28 = 0;
    uint64_t v14 = (sqlite3 ***)(a1 + 24);
    if (!v8) {
      uint64_t v14 = (sqlite3 ***)(a1 + 8);
    }
    int64_t v15 = *v14;
    v37.__vftable = (std::runtime_error_vtbl *)&unk_1EDC83448;
    v37.__imp_.__imp_ = (const char *)(a1 + 64);
    *(void *)&long long v38 = &v27;
    *((void *)&v38 + 1) = &v37;
    AMSCore::SQLiteStatement::exec((uint64_t)&v30, v15, v29, (uint64_t)&v37);
    if (*((std::runtime_error **)&v38 + 1) == &v37)
    {
      ((void (*)(std::runtime_error *))v37.__vftable[1].~runtime_error_0)(&v37);
      if (v36)
      {
LABEL_17:
        *(_OWORD *)a4 = v27;
        *(void *)(a4 + 16) = v28;
        long long v27 = 0uLL;
        uint64_t v28 = 0;
        *(unsigned char *)(a4 + 72) = 1;
LABEL_38:
        v30.__vftable = (std::runtime_error_vtbl *)&v27;
        std::vector<std::vector<AMSCore::Any>>::__destroy_vector::operator()[abi:fe180100]((void ***)&v30);
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v29, (unsigned int *)v29[1]);
        return;
      }
    }
    else
    {
      if (*((void *)&v38 + 1)) {
        (*(void (**)(void))(**((void **)&v38 + 1) + 40))();
      }
      if (v36) {
        goto LABEL_17;
      }
    }
    std::runtime_error::runtime_error(&v37, &v30);
    long long v38 = v31;
    v37.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v39 = v32;
    uint64_t v40 = v33;
    uint64_t v41 = v34;
    if (v34)
    {
      *((void *)v33 + 2) = &v40;
      uint64_t v32 = &v33;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
    }
    else
    {
      uint64_t v39 = &v40;
    }
    long long v42 = v35;
    long long v35 = 0uLL;
    char v43 = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v21, (uint64_t)&v37);
    std::runtime_error::runtime_error((std::runtime_error *)a4, &v21);
    *(_OWORD *)(a4 + 16) = v22;
    *(void *)a4 = &unk_1EDC827D8;
    uint64_t v17 = v24;
    *(void *)(a4 + 32) = v23;
    *(void *)(a4 + 40) = v17;
    uint64_t v18 = a4 + 40;
    uint64_t v19 = v25;
    *(void *)(a4 + 48) = v25;
    if (v19)
    {
      *(void *)(v17 + 16) = v18;
      char v23 = &v24;
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      uint64_t v17 = 0;
    }
    else
    {
      *(void *)(a4 + 32) = v18;
    }
    *(_OWORD *)(a4 + 56) = v26;
    long long v26 = 0uLL;
    *(unsigned char *)(a4 + 72) = 0;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v23, (unsigned int *)v17);
    MEMORY[0x192FA3C30](&v21);
    if (v43)
    {
      v37.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      uint64_t v20 = (std::__shared_weak_count *)*((void *)&v42 + 1);
      if (*((void *)&v42 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v42 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v39, v40);
      MEMORY[0x192FA3C30](&v37);
    }
    if (!v36) {
      ((void (*)(std::runtime_error *))v30.~runtime_error)(&v30);
    }
    goto LABEL_38;
  }
  AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v37, (uint64_t)&v30);
  std::runtime_error::runtime_error((std::runtime_error *)a4, &v37);
  *(_OWORD *)(a4 + 16) = v38;
  *(void *)a4 = &unk_1EDC827D8;
  std::string v10 = v40;
  *(void *)(a4 + 32) = v39;
  *(void *)(a4 + 40) = v10;
  uint64_t v11 = a4 + 40;
  uint64_t v12 = v41;
  *(void *)(a4 + 48) = v41;
  if (v12)
  {
    *((void *)v10 + 2) = v11;
    uint64_t v39 = &v40;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    std::string v10 = 0;
  }
  else
  {
    *(void *)(a4 + 32) = v11;
  }
  *(_OWORD *)(a4 + 56) = v42;
  long long v42 = 0uLL;
  *(unsigned char *)(a4 + 72) = 0;
  v37.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v39, v10);
  MEMORY[0x192FA3C30](&v37);
  if (v36)
  {
    v30.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v16 = (std::__shared_weak_count *)*((void *)&v35 + 1);
    if (*((void *)&v35 + 1))
    {
      if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v32, v33);
    MEMORY[0x192FA3C30](&v30);
  }
}

void sub_18DAB1DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,int a29)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)::{lambda(std::map<std::string,AMSCore::Any> &&)#1},std::allocator<std::map<std::string,AMSCore::Any> &&>,BOOL ()(std::map<std::string,AMSCore::Any> &)>::target_type()
{
}

uint64_t std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)::{lambda(std::map<std::string,AMSCore::Any> &&)#1},std::allocator<std::map<std::string,AMSCore::Any> &&>,BOOL ()(std::map<std::string,AMSCore::Any> &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withSelectERKNSt3__16ve"
                     "ctorINS0_9ConditionENS3_9allocatorIS5_EEEERKNS4_INS0_10ColumnDescENS6_ISB_EEEEENK3$_0clERKNS4_INS_3"
                     "AnyENS6_ISH_EEEENS3_8optionalImEEEUlONS3_3mapINS3_12basic_stringIcNS3_11char_traitsIcEENS6_IcEEEESH"
                     "_NS3_4lessIvEENS6_INS3_4pairIKST_SH_EEEEEEE_"
    || ((v3 & (unint64_t)"ZZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withSelectER"
                                "KNSt3__16vectorINS0_9ConditionENS3_9allocatorIS5_EEEERKNS4_INS0_10ColumnDescENS6_ISB_EEE"
                                "EENK3$_0clERKNS4_INS_3AnyENS6_ISH_EEEENS3_8optionalImEEEUlONS3_3mapINS3_12basic_stringIc"
                                "NS3_11char_traitsIcEENS6_IcEEEESH_NS3_4lessIvEENS6_INS3_4pairIKST_SH_EEEEEEE_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withSelectERKNSt3__16vectorINS0_9ConditionENS3_9allocatorIS5_EEEERKNS4_INS0_10ColumnDescENS6_ISB_EEEEENK3$_0clERKNS4_INS_3AnyENS6_ISH_EEEENS3_8optionalImEEEUlONS3_3mapINS3_12basic_stringIcNS3_11char_traitsIcEENS6_IcEEEESH_NS3_4lessIvEENS6_INS3_4pairIKST_SH_EEEEEEE_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN7AMSCore14StructuredData28SQLiteStructuredDataProvider15SqlTableBuilder10withSelectERKNSt3__16vectorINS0_9ConditionENS3_9allocatorIS5_EEEERKNS4_INS0_10ColumnDescENS6_ISB_EEEEENK3$_0clERKNS4_INS_3AnyENS6_ISH_EEEENS3_8optionalImEEEUlONS3_3mapINS3_12basic_stringIcNS3_11char_traitsIcEENS6_IcEEEESH_NS3_4lessIvEENS6_INS3_4pairIKST_SH_EEEEEEE_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)::{lambda(std::map<std::string,AMSCore::Any> &&)#1},std::allocator<std::map<std::string,AMSCore::Any> &&>,BOOL ()(std::map<std::string,AMSCore::Any> &)>::operator()(uint64_t a1, void *a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  int64_t v5 = a2 + 1;
  uint64_t v6 = a2[1];
  uint64_t v17 = (unsigned int **)*a2;
  uint64_t v18 = (unsigned int *)v6;
  if (a2[2])
  {
    *(void *)(v6 + 16) = &v18;
    *a2 = v5;
    *int64_t v5 = 0;
    a2[2] = 0;
  }
  else
  {
    uint64_t v17 = &v18;
  }
  std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v17, v18);
  int v7 = v22;
  if (!v22)
  {
    std::string v10 = (void (**)(void **))__p[0];
    goto LABEL_16;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void **)(v8 + 8);
  if ((unint64_t)v9 >= *(void *)(v8 + 16))
  {
    uint64_t v11 = std::vector<std::vector<AMSCore::Any>>::__emplace_back_slow_path<std::vector<AMSCore::Any>>(*(void ****)(a1 + 16), (uint64_t)__p);
    std::string v10 = (void (**)(void **))__p[0];
    *(void *)(v8 + 8) = v11;
    if (!v22) {
      goto LABEL_16;
    }
    if (v10)
    {
      uint64_t v12 = (char *)__p[1];
      uint64_t v13 = v10;
      if (__p[1] != v10)
      {
        do
        {
          uint64_t v14 = (void (**)(void **))(v12 - 32);
          uint64_t v15 = *((unsigned int *)v12 - 2);
          if (v15 != -1) {
            ((void (*)(char *, char *))off_1EDCA5870[v15])(&v23, v12 - 32);
          }
          *((_DWORD *)v12 - 2) = -1;
          v12 -= 32;
        }
        while (v14 != v10);
        uint64_t v13 = (void (**)(void **))__p[0];
      }
      __p[1] = v10;
      operator delete(v13);
    }
  }
  else
  {
    *uint64_t v9 = 0;
    v9[1] = 0;
    std::runtime_error v9[2] = 0;
    *(_OWORD *)uint64_t v9 = *(_OWORD *)__p;
    std::runtime_error v9[2] = v21;
    __p[1] = 0;
    uint64_t v21 = 0;
    __p[0] = 0;
    *(void *)(v8 + 8) = v9 + 3;
    if (!v22)
    {
      std::string v10 = 0;
LABEL_16:
      (*v10)(__p);
    }
  }
  return v7 != 0;
}

void sub_18DAB20A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v24 = __p;
  if (!a22)
  {
    (*(void (**)(char **))__p)(&__p);
    _Unwind_Resume(exception_object);
  }
  if (__p)
  {
    uint64_t v25 = a14;
    long long v26 = __p;
    if (a14 != __p)
    {
      do
      {
        long long v27 = v25 - 32;
        uint64_t v28 = *((unsigned int *)v25 - 2);
        if (v28 != -1) {
          ((void (*)(uint64_t, char *))off_1EDCA5870[v28])(v22 - 49, v25 - 32);
        }
        *((_DWORD *)v25 - 2) = -1;
        v25 -= 32;
      }
      while (v27 != v24);
      long long v26 = __p;
    }
    a14 = v24;
    operator delete(v26);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)::{lambda(std::map<std::string,AMSCore::Any> &&)#1},std::allocator<std::map<std::string,AMSCore::Any> &&>,BOOL ()(std::map<std::string,AMSCore::Any> &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EDC83448;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)::{lambda(std::map<std::string,AMSCore::Any> &&)#1},std::allocator<std::map<std::string,AMSCore::Any> &&>,BOOL ()(std::map<std::string,AMSCore::Any> &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EDC83448;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0::operator() const(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)::{lambda(std::map<std::string,AMSCore::Any> &&)#1},std::allocator<std::map<std::string,AMSCore::Any> &&>,BOOL ()(std::map<std::string,AMSCore::Any> &)>::~__func()
{
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::destroy[abi:fe180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__alloc_func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::destroy[abi:fe180100](void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[3];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    int64_t v5 = (std::__shared_weak_count *)a1[1];
    if (!v5) {
      return;
    }
  }
  else
  {
    int64_t v5 = (std::__shared_weak_count *)a1[1];
    if (!v5) {
      return;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::destroy(uint64_t a1)
{
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDC82E70;
  return std::__compressed_pair_elem<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,0,false>::__compressed_pair_elem[abi:fe180100]<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0 const&,0ul>(a2 + 1, (void *)(a1 + 8));
}

void *std::__compressed_pair_elem<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,0,false>::__compressed_pair_elem[abi:fe180100]<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0 const&,0ul>(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  int v7 = (unsigned char *)a2[4];
  uint64_t v6 = (unsigned char *)a2[5];
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v9 = (char *)operator new(v8);
    a1[4] = v9;
    a1[5] = v9;
    std::string v10 = &v9[8 * (v8 >> 3)];
    a1[6] = v10;
    memcpy(v9, v7, v8 - 5);
    a1[5] = v10;
  }
  a1[7] = 0;
  a1[8] = 0;
  a1[9] = 0;
  uint64_t v12 = (unsigned char *)a2[7];
  uint64_t v11 = (unsigned char *)a2[8];
  int64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v13 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v14 = (char *)operator new(v13);
    a1[7] = v14;
    a1[8] = v14;
    uint64_t v15 = &v14[8 * (v13 >> 3)];
    a1[9] = v15;
    memcpy(v14, v12, v13 - 6);
    a1[8] = v15;
  }
  return a1;
}

void sub_18DAB2494(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v2;
  if (*v2)
  {
    v1[8] = v5;
    operator delete(v5);
    uint64_t v6 = *v3;
    if (!*v3)
    {
LABEL_3:
      int v7 = (std::__shared_weak_count *)v1[3];
      if (!v7) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v6 = *v3;
    if (!*v3) {
      goto LABEL_3;
    }
  }
  v1[5] = v6;
  operator delete(v6);
  int v7 = (std::__shared_weak_count *)v1[3];
  if (!v7) {
    goto LABEL_9;
  }
LABEL_7:
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_9:
  int64_t v8 = (std::__shared_weak_count *)v1[1];
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::__clone(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t v2 = operator new(0x58uLL);
  *uint64_t v2 = &unk_1EDC82E70;
  std::__compressed_pair_elem<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,0,false>::__compressed_pair_elem[abi:fe180100]<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_18DAB25C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::~__func(void *a1)
{
  *a1 = &unk_1EDC82E70;
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[4];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (std::__shared_weak_count *)a1[2];
    if (!v5) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v5 = (std::__shared_weak_count *)a1[2];
    if (!v5) {
      goto LABEL_11;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  JUMPOUT(0x192FA4080);
}

void *std::__function::__func<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0,std::allocator<AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withSelect(std::vector<AMSCore::StructuredData::Condition> const&,std::vector<AMSCore::StructuredData::ColumnDesc> const&)::$_0>,std::expected<std::vector<std::vector<AMSCore::Any>>,AMSCore::Error> ()(std::vector<AMSCore::Any> const&,std::optional<unsigned long>)>::~__func(void *a1)
{
  *a1 = &unk_1EDC82E70;
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[4];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (std::__shared_weak_count *)a1[2];
    if (!v5) {
      return a1;
    }
  }
  else
  {
    uint64_t v5 = (std::__shared_weak_count *)a1[2];
    if (!v5) {
      return a1;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

uint64_t AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  AMSCore::StructuredData::IsColumnInTable<std::vector<AMSCore::StructuredData::Condition>>((uint64_t)&v91, *(void *)(*(void *)(a1 + 8) + 16), *(void *)(*(void *)(a1 + 8) + 24), *a2, a2[1]);
  AMSCore::firstError<void,AMSCore::Error>(v85, (uint64_t)&v91);
  if (!v97) {
    ((void (*)(std::runtime_error *))v91.~runtime_error)(&v91);
  }
  if ((_BYTE)v88) {
    goto LABEL_6;
  }
  AMSCore::StructuredData::IsColumnInTable<std::vector<AMSCore::StructuredData::Condition>>((uint64_t)&v91, *(void *)(*(void *)(a1 + 8) + 16), *(void *)(*(void *)(a1 + 8) + 24), *a3, a3[1]);
  AMSCore::firstError<void,AMSCore::Error>(v85, (uint64_t)&v91);
  if (v97)
  {
    if ((_BYTE)v88) {
      goto LABEL_6;
    }
  }
  else
  {
    ((void (*)(std::runtime_error *))v91.~runtime_error)(&v91);
    if ((_BYTE)v88)
    {
LABEL_6:
      AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v91, (uint64_t)v85);
      std::runtime_error::runtime_error((std::runtime_error *)a4, &v91);
      *(_OWORD *)(a4 + 16) = v92;
      *(void *)a4 = &unk_1EDC827D8;
      int64_t v8 = v94;
      *(void *)(a4 + 32) = v93;
      *(void *)(a4 + 40) = v8;
      uint64_t v9 = a4 + 40;
      std::string v10 = v95;
      *(void *)(a4 + 48) = v95;
      if (v10)
      {
        *((void *)v8 + 2) = v9;
        char v93 = (void **)&v94;
        std::runtime_error v94 = 0;
        uint64_t v95 = 0;
        int64_t v8 = 0;
      }
      else
      {
        *(void *)(a4 + 32) = v9;
      }
      *(_OWORD *)(a4 + 56) = v96;
      long long v96 = 0uLL;
      *(unsigned char *)(a4 + 72) = 0;
      v91.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v93, v8);
      uint64_t result = MEMORY[0x192FA3C30](&v91);
      if ((_BYTE)v88)
      {
        v85[0].__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
        uint64_t v12 = v87;
        if (v87)
        {
          if (!atomic_fetch_add(&v87->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)v86, v86[1]);
        return MEMORY[0x192FA3C30](v85);
      }
      return result;
    }
  }
  long long v70 = (std::runtime_error_vtbl *)a3;
  std::ostringstream::basic_ostringstream[abi:fe180100]((uint64_t)v85);
  int64_t v13 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v85, (uint64_t)"UPDATE ", 7);
  uint64_t v14 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v13, **(void **)(a1 + 8), *(void *)(*(void *)(a1 + 8) + 8));
  uint64_t v15 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v14, (uint64_t)"\n", 1);
  uint64_t v16 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v15, (uint64_t)"SET ", 4);
  uint64_t v18 = (const void *)*a2;
  uint64_t v17 = a2[1];
  std::runtime_error v69 = a2;
  int64_t v19 = v17 - *a2;
  if (v17 != *a2)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v19 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v20 = (uint64_t *)operator new(v19);
    memcpy(v20, v18, v19 - 6);
    std::runtime_error __p = v20;
    uint64_t v21 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v16, (uint64_t)"", 0);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v21, (uint64_t)"", 0);
    uint64_t v22 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v16, *v20, v20[1]);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v22, (uint64_t)" = :", 4);
    char v23 = (void *)std::ostream::operator<<();
    uint64_t v24 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v23, (uint64_t)"_set_", 5);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v24, *v20, v20[1]);
    std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v16, (uint64_t)"", 0);
    if (v19 != 24)
    {
      uint64_t v25 = &v20[v19 >> 3];
      long long v26 = v20 + 3;
      int v27 = 1;
      do
      {
        uint64_t v28 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v16, (uint64_t)",", 1);
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v28, (uint64_t)"", 0);
        unint64_t v29 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v16, *v26, v26[1]);
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v29, (uint64_t)" = :", 4);
        std::runtime_error v30 = (void *)std::ostream::operator<<();
        long long v31 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v30, (uint64_t)"_set_", 5);
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v31, *v26, v26[1]);
        std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v16, (uint64_t)"", 0);
        v26 += 3;
        ++v27;
      }
      while (v26 != v25);
    }
    operator delete(__p);
  }
  uint64_t v32 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v16, (uint64_t)"\n", 1);
  uint64_t v33 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v32, (uint64_t)"WHERE (", 7);
  uint64_t v34 = AMSCore::operator<<(v33, *(long long **)(*(void *)(a1 + 8) + 16), *(void *)(*(void *)(a1 + 8) + 24));
  long long v35 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v34, (uint64_t)") in (\n", 7);
  char v36 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v35, (uint64_t)"SELECT ", 7);
  std::runtime_error v37 = AMSCore::operator<<(v36, *(long long **)(*(void *)(a1 + 8) + 16), *(void *)(*(void *)(a1 + 8) + 24));
  long long v38 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v37, (uint64_t)"\n", 1);
  uint64_t v39 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v38, (uint64_t)"FROM ", 5);
  uint64_t v40 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v39, **(void **)(a1 + 8), *(void *)(*(void *)(a1 + 8) + 8));
  uint64_t v41 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v40, (uint64_t)"\n", 1);
  v91.__vftable = v70;
  char v43 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v42, (uint64_t)"\n", 1);
  uint64_t v44 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v43, (uint64_t)"LIMIT :limit", 12);
  uint64_t v45 = std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v44, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:fe180100]<char,std::char_traits<char>>(v45, (uint64_t)")", 1);
  uint64_t v46 = *(void *)(a1 + 16);
  std::stringbuf::str[abi:fe180100]((uint64_t)&v85[0].__imp_, (std::string *)&v78);
  uint64_t v47 = *(void *)(v46 + 8);
  v72.__vftable = *(std::runtime_error_vtbl **)v46;
  v72.__imp_.__imp_ = (const char *)v47;
  if (v47) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v47 + 8), 1uLL, memory_order_relaxed);
  }
  AMSCore::SQLiteStatement::make((uint64_t)&v91, (uint64_t)&v72, (uint64_t)&v78);
  uint64_t imp = (std::__shared_weak_count *)v72.__imp_.__imp_;
  if (v72.__imp_.__imp_ && !atomic_fetch_add((atomic_ullong *volatile)v72.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))imp->__on_zero_shared)(imp);
    std::__shared_weak_count::__release_weak(imp);
  }
  if ((SBYTE7(v79) & 0x80000000) == 0)
  {
    if (v97) {
      goto LABEL_28;
    }
LABEL_32:
    std::runtime_error::runtime_error(&v78, &v91);
    long long v79 = v92;
    v78.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    uint64_t v80 = v93;
    uint64_t v81 = v94;
    size_t v82 = v95;
    if (v95)
    {
      *((void *)v94 + 2) = &v81;
      char v93 = (void **)&v94;
      std::runtime_error v94 = 0;
      uint64_t v95 = 0;
    }
    else
    {
      uint64_t v80 = &v81;
    }
    long long v83 = v96;
    long long v96 = 0uLL;
    char v84 = 1;
    AMSCore::Unexpected<AMSCore::Error,AMSCore::Error>((uint64_t)&v72, (uint64_t)&v78);
    std::runtime_error::runtime_error((std::runtime_error *)a4, &v72);
    *(_OWORD *)(a4 + 16) = *(_OWORD *)v73;
    *(void *)a4 = &unk_1EDC827D8;
    uint64_t v64 = (unsigned int *)v75;
    *(void *)(a4 + 32) = v74;
    *(void *)(a4 + 40) = v64;
    uint64_t v65 = a4 + 40;
    uint64_t v66 = v76;
    *(void *)(a4 + 48) = v76;
    if (v66)
    {
      *((void *)v64 + 2) = v65;
      long long v74 = &v75;
      char v75 = 0;
      uint64_t v76 = 0;
      uint64_t v64 = 0;
    }
    else
    {
      *(void *)(a4 + 32) = v65;
    }
    *(_OWORD *)(a4 + 56) = v77;
    long long v77 = 0uLL;
    *(unsigned char *)(a4 + 72) = 0;
    v72.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
    std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v74, v64);
    MEMORY[0x192FA3C30](&v72);
    if (v84)
    {
      v78.__vftable = (std::runtime_error_vtbl *)&unk_1EDC827D8;
      char v67 = (std::__shared_weak_count *)*((void *)&v83 + 1);
      if (*((void *)&v83 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v83 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
      std::__tree<std::__value_type<std::string,AMSCore::Any>,std::__map_value_compare<std::string,std::__value_type<std::string,AMSCore::Any>,std::less<void>,true>,std::allocator<std::__value_type<std::string,AMSCore::Any>>>::destroy((uint64_t)&v80, (unsigned int *)v81);
      MEMORY[0x192FA3C30](&v78);
    }
    goto LABEL_69;
  }
  operator delete(v78.__vftable);
  if (!v97) {
    goto LABEL_32;
  }
LABEL_28:
  uint64_t v49 = (char *)operator new(0x50uLL);
  *((void *)v49 + 1) = 0;
  *((void *)v49 + 2) = 0;
  *(void *)uint64_t v49 = &unk_1EDC83D00;
  *(std::runtime_error *)(v49 + 24) = v91;
  v91.__vftable = 0;
  v91.__imp_.__imp_ = 0;
  uint64_t v50 = v92;
  int64_t v51 = v95;
  *(void *)&long long v92 = 0;
  *((void *)v49 + 5) = v50;
  if (v51)
  {
    if (v51 == (long long *)((char *)&v92 + 8))
    {
      *((void *)v49 + 9) = v49 + 48;
      (*(void (**)(_OWORD *))(*(void *)v51 + 24))(v51);
      goto LABEL_37;
    }
    int v52 = &v95;
    *((void *)v49 + 9) = v51;
  }
  else
  {
    int v52 = (void **)(v49 + 72);
  }
  *int v52 = 0;
LABEL_37:
  size_t v71 = (std::__shared_weak_count *)v49;
  v72.__vftable = (std::runtime_error_vtbl *)(v49 + 24);
  v72.__imp_.__imp_ = v49;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v49 + 1, 1uLL, memory_order_relaxed);
  v73[0] = 0;
  v73[1] = 0;
  long long v74 = 0;
  uint64_t v54 = (const void *)*v69;
  uint64_t v53 = v69[1];
  int64_t v55 = v53 - *v69;
  if (v53 != *v69)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v55 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    v73[0] = operator new(v55);
    v73[1] = v73[0];
    long long v56 = (void **)((char *)v73[0] + 8 * (v55 >> 3));
    long long v74 = v56;
    memcpy(v73[0], v54, v55 - 6);
    v73[1] = v56;
  }
  char v75 = 0;
  uint64_t v76 = 0;
  *(void *)&long long v77 = 0;
  uint64_t v58 = v70->~runtime_error;
  long long v57 = v70->~runtime_error_0;
  int64_t v59 = (char *)v57 - (char *)v70->~runtime_error;
  if (v57 != v70->~runtime_error)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v59 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:fe180100]();
    }
    char v75 = operator new(v59);
    uint64_t v76 = v75;
    long long v60 = (char *)v75 + 8 * (v59 >> 3);
    *(void *)&long long v77 = v60;
    memcpy(v75, v58, v59 - 5);
    uint64_t v76 = v60;
  }
  AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0::$_0((uint64_t)&v78, (uint64_t)&v72);
  *(void *)(a4 + 24) = 0;
  char v61 = operator new(0x48uLL);
  *char v61 = &unk_1EDC82EC8;
  AMSCore::StructuredData::SQLiteStructuredDataProvider::SqlTableBuilder::withUpdate(std::vector<AMSCore::StructuredData::ColumnDesc> const&,std::vector<AMSCore::StructuredData::Condition> const&)::$_0::$_0((uint64_t)(v61 + 1), (uint64_t)&v78);
  *(void *)(a4 + 24) = v61;
  if (v81)
  {
    size_t v82 = v81;
    operator delete(v81);
  }
  if ((void)v79)
  {
    *((void *)&v79 + 1) = v79;
    operator delete((void *)v79);
  }
  char v62 = (std::__shared_weak_count *)v78.__imp_.__imp_;
  if (v78.__imp_.__imp_ && !atomic_fetch_add((atomic_ullong *volatile)v78.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
    std::__shared_weak_count::__release_weak(v62);
  }
  *(unsigned char *)(a4 + 72) = 1;
  if (v75)
  {
    uint64_t v76 = v75;
    operator delete(v75);
  }
  if (v73[0])
  {
    v73[1] = v73[0];
    operator delete(v73[0]);
  }
  uint64_t v63 = (std::__shared_weak_count *)v72.__imp_.__imp_;
  if (v72.__imp_.__imp_ && !atomic_fetch_add((atomic_ullong *volatile)v72.__imp_.__imp_ + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
    std::__shared_weak_count::__release_weak(v63);
  }
  if (v71 && !atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
    std::__shared_weak_count::__release_weak(v71);
  }
LABEL_69:
  if (v97) {
    std::__destroy_at[abi:fe180100]<AMSCore::SQLiteStatement,0>(&v91);
  }
  else {
    ((void (*)(std::runtime_error *))v91.~runtime_error)(&v91);
  }
  v85[0].__vftable = (std::runtime_error_vtbl *)*MEMORY[0x1E4FBA418];
  *(std::runtime_error_vtbl **)((char *)&v85[0].__vftable + (unint64_t)v85[0].__vftable[-1].~runtime_error) = *(std::runtime_error_vtbl **)(MEMORY[0x1E4FBA418] + 24);
  v85[0].__imp_.__imp_ = (const char *)(MEMORY[0x1E4FBA470] + 16);
  if (v89 < 0) {
    operator delete(v88);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FA3FD0](&v90);
}