void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>::Link>::~MemoryArena(void *a1)
{
  uint64_t vars8;

  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>::Link>::~MemoryArena(a1);

  operator delete();
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_261E58;
  v2 = a1 + 3;
  for (i = (void *)a1[4]; i != v2; i = (void *)i[1])
  {
    if (i[2]) {
      operator delete[]();
    }
  }
  std::__list_imp<char *>::clear(v2);

  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x807)
  {
    uint64_t v4 = 0;
    std::vector<fst::MemoryPoolBase *>::resize(a1 + 16, 0x101uLL, &v4);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 2048)) {
    operator new();
  }
  return *(void *)(v1 + 2048);
}

void sub_8CC44()
{
}

void fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = off_261E98;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_8CCB0(_Unwind_Exception *a1)
{
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>::~MemoryPool(void *a1)
{
  *a1 = off_261E98;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>::Link>::~MemoryArena(a1 + 1);

  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);
}

void fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>::~MemoryPool(void *a1)
{
  *a1 = off_261E98;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>::Link>::~MemoryArena(a1 + 1);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);

  operator delete();
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = off_261ED8;
  a1[1] = 264 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_8CE14(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>::Link>::~MemoryArena(a1);

  operator delete();
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_261ED8;
  v2 = a1 + 3;
  for (i = (void *)a1[4]; i != v2; i = (void *)i[1])
  {
    if (i[2]) {
      operator delete[]();
    }
  }
  std::__list_imp<char *>::clear(v2);

  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x200)
  {
    uint64_t v4 = 0;
    std::vector<fst::MemoryPoolBase *>::resize(a1 + 16, 0x201uLL, &v4);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 4096)) {
    operator new();
  }
  return *(void *)(v1 + 4096);
}

void sub_8CF98()
{
}

void fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = off_261F18;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_8D004(_Unwind_Exception *a1)
{
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>::~MemoryPool(void *a1)
{
  *a1 = off_261F18;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>::Link>::~MemoryArena(a1 + 1);

  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);
}

void fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>::~MemoryPool(void *a1)
{
  *a1 = off_261F18;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>::Link>::~MemoryArena(a1 + 1);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);

  operator delete();
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = off_261F58;
  a1[1] = 520 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_8D168(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>::Link>::~MemoryArena(a1);

  operator delete();
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_261F58;
  v2 = a1 + 3;
  for (i = (void *)a1[4]; i != v2; i = (void *)i[1])
  {
    if (i[2]) {
      operator delete[]();
    }
  }
  std::__list_imp<char *>::clear(v2);

  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x400)
  {
    uint64_t v4 = 0;
    std::vector<fst::MemoryPoolBase *>::resize(a1 + 16, 0x401uLL, &v4);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 0x2000)) {
    operator new();
  }
  return *(void *)(v1 + 0x2000);
}

void sub_8D2EC()
{
}

void fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = off_261F98;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_8D358(_Unwind_Exception *a1)
{
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::~MemoryPool(void *a1)
{
  *a1 = off_261F98;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::Link>::~MemoryArena(a1 + 1);

  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);
}

void fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::~MemoryPool(void *a1)
{
  *a1 = off_261F98;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::Link>::~MemoryArena(a1 + 1);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);

  operator delete();
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = off_261FD8;
  a1[1] = 1032 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_8D4BC(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::Link>::~MemoryArena(a1);

  operator delete();
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_261FD8;
  v2 = a1 + 3;
  for (i = (void *)a1[4]; i != v2; i = (void *)i[1])
  {
    if (i[2]) {
      operator delete[]();
    }
  }
  std::__list_imp<char *>::clear(v2);

  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x207)
  {
    uint64_t v4 = 0;
    std::vector<fst::MemoryPoolBase *>::resize(a1 + 16, 0x41uLL, &v4);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 512)) {
    operator new();
  }
  return *(void *)(v1 + 512);
}

void sub_8D63C()
{
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = off_262018;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_8D6A8(_Unwind_Exception *a1)
{
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>::~MemoryPool(void *a1)
{
  *a1 = off_262018;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>::Link>::~MemoryArena(a1 + 1);

  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>::~MemoryPool(void *a1)
{
  *a1 = off_262018;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>::Link>::~MemoryArena(a1 + 1);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);

  operator delete();
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = off_262058;
  a1[1] = 72 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_8D80C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>::Link>::~MemoryArena(a1);

  operator delete();
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_262058;
  v2 = a1 + 3;
  for (i = (void *)a1[4]; i != v2; i = (void *)i[1])
  {
    if (i[2]) {
      operator delete[]();
    }
  }
  std::__list_imp<char *>::clear(v2);

  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<2>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x407)
  {
    uint64_t v4 = 0;
    std::vector<fst::MemoryPoolBase *>::resize(a1 + 16, 0x81uLL, &v4);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 1024)) {
    operator new();
  }
  return *(void *)(v1 + 1024);
}

void sub_8D98C()
{
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<2>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = off_262098;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<2>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_8D9F8(_Unwind_Exception *a1)
{
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<2>>::~MemoryPool(void *a1)
{
  *a1 = off_262098;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<2>>::Link>::~MemoryArena(a1 + 1);

  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<2>>::~MemoryPool(void *a1)
{
  *a1 = off_262098;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<2>>::Link>::~MemoryArena(a1 + 1);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);

  operator delete();
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<2>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = off_2620D8;
  a1[1] = 136 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_8DB5C(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<2>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<2>>::Link>::~MemoryArena(a1);

  operator delete();
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<2>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_2620D8;
  v2 = a1 + 3;
  for (i = (void *)a1[4]; i != v2; i = (void *)i[1])
  {
    if (i[2]) {
      operator delete[]();
    }
  }
  std::__list_imp<char *>::clear(v2);

  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<4>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x807)
  {
    uint64_t v4 = 0;
    std::vector<fst::MemoryPoolBase *>::resize(a1 + 16, 0x101uLL, &v4);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 2048)) {
    operator new();
  }
  return *(void *)(v1 + 2048);
}

void sub_8DCDC()
{
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<4>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = off_262118;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<4>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_8DD48(_Unwind_Exception *a1)
{
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<4>>::~MemoryPool(void *a1)
{
  *a1 = off_262118;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<4>>::Link>::~MemoryArena(a1 + 1);

  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<4>>::~MemoryPool(void *a1)
{
  *a1 = off_262118;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<4>>::Link>::~MemoryArena(a1 + 1);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);

  operator delete();
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<4>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = off_262158;
  a1[1] = 264 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_8DEAC(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<4>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<4>>::Link>::~MemoryArena(a1);

  operator delete();
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<4>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_262158;
  v2 = a1 + 3;
  for (i = (void *)a1[4]; i != v2; i = (void *)i[1])
  {
    if (i[2]) {
      operator delete[]();
    }
  }
  std::__list_imp<char *>::clear(v2);

  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<8>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x200)
  {
    uint64_t v4 = 0;
    std::vector<fst::MemoryPoolBase *>::resize(a1 + 16, 0x201uLL, &v4);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 4096)) {
    operator new();
  }
  return *(void *)(v1 + 4096);
}

void sub_8E030()
{
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<8>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = off_262198;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<8>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_8E09C(_Unwind_Exception *a1)
{
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<8>>::~MemoryPool(void *a1)
{
  *a1 = off_262198;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<8>>::Link>::~MemoryArena(a1 + 1);

  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<8>>::~MemoryPool(void *a1)
{
  *a1 = off_262198;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<8>>::Link>::~MemoryArena(a1 + 1);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);

  operator delete();
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<8>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = off_2621D8;
  a1[1] = 520 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_8E200(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<8>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<8>>::Link>::~MemoryArena(a1);

  operator delete();
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<8>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_2621D8;
  v2 = a1 + 3;
  for (i = (void *)a1[4]; i != v2; i = (void *)i[1])
  {
    if (i[2]) {
      operator delete[]();
    }
  }
  std::__list_imp<char *>::clear(v2);

  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<16>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x400)
  {
    uint64_t v4 = 0;
    std::vector<fst::MemoryPoolBase *>::resize(a1 + 16, 0x401uLL, &v4);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 0x2000)) {
    operator new();
  }
  return *(void *)(v1 + 0x2000);
}

void sub_8E384()
{
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<16>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = off_262218;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<16>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_8E3F0(_Unwind_Exception *a1)
{
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<16>>::~MemoryPool(void *a1)
{
  *a1 = off_262218;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<16>>::Link>::~MemoryArena(a1 + 1);

  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<16>>::~MemoryPool(void *a1)
{
  *a1 = off_262218;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<16>>::Link>::~MemoryArena(a1 + 1);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);

  operator delete();
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<16>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = off_262258;
  a1[1] = 1032 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_8E554(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<16>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<16>>::Link>::~MemoryArena(a1);

  operator delete();
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<16>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_262258;
  v2 = a1 + 3;
  for (i = (void *)a1[4]; i != v2; i = (void *)i[1])
  {
    if (i[2]) {
      operator delete[]();
    }
  }
  std::__list_imp<char *>::clear(v2);

  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<32>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) >> 3 <= 0x800)
  {
    uint64_t v4 = 0;
    std::vector<fst::MemoryPoolBase *>::resize(a1 + 16, 0x801uLL, &v4);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 0x4000)) {
    operator new();
  }
  return *(void *)(v1 + 0x4000);
}

void sub_8E6D8()
{
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<32>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = off_262298;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<32>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_8E744(_Unwind_Exception *a1)
{
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<32>>::~MemoryPool(void *a1)
{
  *a1 = off_262298;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<32>>::Link>::~MemoryArena(a1 + 1);

  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<32>>::~MemoryPool(void *a1)
{
  *a1 = off_262298;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<32>>::Link>::~MemoryArena(a1 + 1);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);

  operator delete();
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<32>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = off_2622D8;
  a1[1] = 2056 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_8E8A8(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<32>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<32>>::Link>::~MemoryArena(a1);

  operator delete();
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<32>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_2622D8;
  v2 = a1 + 3;
  for (i = (void *)a1[4]; i != v2; i = (void *)i[1])
  {
    if (i[2]) {
      operator delete[]();
    }
  }
  std::__list_imp<char *>::clear(v2);

  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);
}

uint64_t fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<64>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  v2 = (uint64_t *)(a1 + 16);
  if ((unint64_t)(*(void *)(a1 + 24) - v1) <= 0x8007)
  {
    uint64_t v4 = 0;
    std::vector<fst::MemoryPoolBase *>::resize(a1 + 16, 0x1001uLL, &v4);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 0x8000)) {
    operator new();
  }
  return *(void *)(v1 + 0x8000);
}

void sub_8EA34()
{
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<64>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = off_262318;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<64>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_8EAA0(_Unwind_Exception *a1)
{
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<64>>::~MemoryPool(void *a1)
{
  *a1 = off_262318;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<64>>::Link>::~MemoryArena(a1 + 1);

  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);
}

void fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<64>>::~MemoryPool(void *a1)
{
  *a1 = off_262318;
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<64>>::Link>::~MemoryArena(a1 + 1);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);

  operator delete();
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<64>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = off_262358;
  a1[1] = 4104 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_8EC04(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<64>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<64>>::Link>::~MemoryArena(a1);

  operator delete();
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<64>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_262358;
  v2 = a1 + 3;
  for (i = (void *)a1[4]; i != v2; i = (void *)i[1])
  {
    if (i[2]) {
      operator delete[]();
    }
  }
  std::__list_imp<char *>::clear(v2);

  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(void *a1)
{
  *a1 = off_261C60;
  uint64_t v2 = a1[15];
  if (v2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorCacheStore(v2);
    operator delete();
  }
  v3 = (void *)a1[9];
  if (v3) {
    operator delete(v3);
  }

  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~FstImpl((uint64_t)a1);
}

uint64_t fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorCacheStore(uint64_t a1)
{
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Clear((void *)a1);
  fst::PoolAllocator<fst::ArcTpl<fst::LogWeightTpl<float>>>::~PoolAllocator((fst::MemoryPoolCollection **)(a1 + 80));
  fst::PoolAllocator<fst::ArcTpl<fst::LogWeightTpl<float>>>::~PoolAllocator((fst::MemoryPoolCollection **)(a1 + 72));
  std::__list_imp<int,fst::PoolAllocator<int>>::clear((void *)(a1 + 32));
  fst::PoolAllocator<fst::ArcTpl<fst::LogWeightTpl<float>>>::~PoolAllocator((fst::MemoryPoolCollection **)(a1 + 56));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::find<std::vector<int>>(void *a1, int **a2)
{
  v3 = *a2;
  uint64_t v2 = a2[1];
  if (*a2 == v2)
  {
    unint64_t v4 = 0;
  }
  else
  {
    unint64_t v4 = 0;
    v5 = *a2;
    do
    {
      uint64_t v6 = *v5++;
      unint64_t v4 = v6 + 7853 * v4;
    }
    while (v5 != v2);
  }
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v10 = v4;
    if (v4 >= *(void *)&v7) {
      unint64_t v10 = v4 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v4;
  }
  v11 = *(void **)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  v12 = (void *)*v11;
  if (*v11)
  {
    size_t v13 = (char *)v2 - (char *)v3;
    do
    {
      unint64_t v14 = v12[1];
      if (v14 == v4)
      {
        v15 = (const void *)v12[2];
        if (v12[3] - (void)v15 == v13 && !memcmp(v15, v3, v13)) {
          return v12;
        }
      }
      else
      {
        if (v9 > 1)
        {
          if (v14 >= *(void *)&v7) {
            v14 %= *(void *)&v7;
          }
        }
        else
        {
          v14 &= *(void *)&v7 - 1;
        }
        if (v14 != v10) {
          return 0;
        }
      }
      v12 = (void *)*v12;
    }
    while (v12);
  }
  return v12;
}

void *std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(uint64_t a1, int **a2, uint64_t a3, uint64_t *a4)
{
  int8x8_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 == v6)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = *a2;
    do
    {
      uint64_t v10 = *v9++;
      unint64_t v8 = v10 + 7853 * v8;
    }
    while (v9 != v6);
  }
  unint64_t v11 = *(void *)(a1 + 8);
  if (!v11) {
    goto LABEL_26;
  }
  uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  unint64_t v13 = v12.u32[0];
  if (v12.u32[0] > 1uLL)
  {
    unint64_t v4 = v8;
    if (v8 >= v11) {
      unint64_t v4 = v8 % v11;
    }
  }
  else
  {
    unint64_t v4 = (v11 - 1) & v8;
  }
  unint64_t v14 = *(void **)(*(void *)a1 + 8 * v4);
  if (!v14) {
    goto LABEL_26;
  }
  v15 = (void *)*v14;
  if (!*v14) {
    goto LABEL_26;
  }
  v28 = a4;
  size_t v16 = (char *)v6 - (char *)v7;
  do
  {
    unint64_t v17 = v15[1];
    if (v17 == v8)
    {
      v18 = (const void *)v15[2];
      if (v15[3] - (void)v18 == v16 && !memcmp(v18, v7, v16)) {
        return v15;
      }
      goto LABEL_24;
    }
    if (v13 > 1)
    {
      if (v17 >= v11) {
        v17 %= v11;
      }
    }
    else
    {
      v17 &= v11 - 1;
    }
    if (v17 != v4) {
      break;
    }
LABEL_24:
    v15 = (void *)*v15;
  }
  while (v15);
  a4 = v28;
LABEL_26:
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(a1, v8, a4, (uint64_t)&v29);
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    BOOL v21 = 1;
    if (v11 >= 3) {
      BOOL v21 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v11);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>,std::__unordered_map_hasher<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementKey,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementEqual,true>,std::__unordered_map_equal<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementEqual,fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::ElementKey,true>,std::allocator<std::__hash_value_type<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element,int>>>::__rehash<true>(a1, v24);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v8 >= v11) {
        unint64_t v4 = v8 % v11;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v8;
    }
  }
  v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    void *v29 = *v25;
    void *v25 = v29;
  }
  else
  {
    void *v29 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v29)
    {
      unint64_t v26 = *(void *)(*v29 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v26 >= v11) {
          v26 %= v11;
        }
      }
      else
      {
        v26 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v29;
    }
  }
  v15 = v29;
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_8F178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,int>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  uint64_t v9 = *a3;
  v8[3] = 0;
  v8[4] = 0;
  v8[2] = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v8 + 2, *(const void **)v9, *(void *)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 2);
  *((_DWORD *)v8 + 10) = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_8F220(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,int>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,int>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = (void *)__p[2];
    if (v3)
    {
      __p[3] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      unint64_t v4 = (void *)v2[2];
      if (v4)
      {
        v2[3] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::~ContextFstImpl(uint64_t a1)
{
  *(void *)a1 = off_261BE0;
  if (*(char *)(a1 + 431) < 0) {
    operator delete(*(void **)(a1 + 408));
  }
  uint64_t v2 = *(void **)(a1 + 368);
  if (v2)
  {
    *(void *)(a1 + 376) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 344);
  if (v3) {
    operator delete(v3);
  }
  unint64_t v4 = *(void **)(a1 + 304);
  if (v4)
  {
    *(void *)(a1 + 312) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 280);
  if (v5) {
    operator delete(v5);
  }
  uint64_t v7 = (void **)(a1 + 240);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v7);
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table(a1 + 200);
  uint64_t v7 = (void **)(a1 + 176);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v7);
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table(a1 + 136);
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl((void *)a1);
}

uint64_t fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::Start(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 60))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
    {
      *(unsigned char *)(a1 + 60) = 1;
    }
    else if (!*(unsigned char *)(a1 + 60))
    {
      std::vector<int>::size_type v2 = *(int *)(a1 + 396) - 1;
      std::vector<int>::value_type __x = 0;
      std::vector<int>::vector(&v5, v2, &__x);
      if (fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::FindState(a1, (uint64_t)&v5))__assert_rtn("Start", "context-fst-inl.h", 80, "s == 0"); {
      *(_DWORD *)(a1 + 64) = 0;
      }
      *(unsigned char *)(a1 + 60) = 1;
      if (*(int *)(a1 + 68) <= 0) {
        *(_DWORD *)(a1 + 68) = 1;
      }
      if (v5.__begin_)
      {
        v5.__end_ = v5.__begin_;
        operator delete(v5.__begin_);
      }
    }
  }
  return *(unsigned int *)(a1 + 64);
}

void sub_8F4D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::FindState(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 396) - 1 != ((*(void *)(a2 + 8) - *(void *)a2) >> 2)) {
    fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::FindState();
  }
  uint64_t v4 = a1 + 136;
  std::vector<int> v5 = std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::find<std::vector<int>>((void *)(a1 + 136), (int **)a2);
  if (v5) {
    return *((unsigned int *)v5 + 10);
  }
  unint64_t v8 = *(void *)(a1 + 184);
  uint64_t v7 = (uint64_t *)(a1 + 176);
  uint64_t v6 = -1431655765 * ((v8 - *(void *)(a1 + 176)) >> 3);
  if (v8 >= *(void *)(a1 + 192))
  {
    uint64_t v9 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(v7, a2);
  }
  else
  {
    std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)v7, a2);
    uint64_t v9 = v8 + 24;
  }
  *(void *)(a1 + 184) = v9;
  uint64_t v11 = a2;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(v4, (int **)a2, (uint64_t)&std::piecewise_construct, &v11)+ 10) = v6;
  return v6;
}

float fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::Final(uint64_t a1, int a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 184) - *(void *)(a1 + 176)) >> 3) <= a2) {
    fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::Final();
  }
  uint64_t v4 = a2;
  if (fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::LogWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>>>>::HasFinal(a1, a2))
  {
    uint64_t v5 = *(void *)(a1 + 120);
    if (*(_DWORD *)(v5 + 92) == a2) {
      uint64_t v6 = (_DWORD **)(v5 + 96);
    }
    else {
      uint64_t v6 = (_DWORD **)(*(void *)(v5 + 8) + 8 * v4 + 8);
    }
    return *(float *)*v6;
  }
  else
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 176) + 24 * (int)v4);
    unint64_t v8 = (unint64_t)(*(void *)(*(void *)(a1 + 176) + 24 * (int)v4 + 8) - v7) >> 2;
    if (*(_DWORD *)(a1 + 396) - 1 != v8) {
      fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::Final();
    }
    uint64_t v9 = *(int *)(a1 + 400);
    float v10 = 0.0;
    if ((int)v9 < (int)v8)
    {
      if (*(_DWORD *)(v7 + 4 * v9) == *(_DWORD *)(a1 + 392)) {
        float v10 = 0.0;
      }
      else {
        float v10 = INFINITY;
      }
    }
    MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
    *(float *)MutableState = v10;
    *((_DWORD *)MutableState + 14) |= 9u;
  }
  return v10;
}

void *fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::GetMutableState(a1, a2);
  uint64_t v4 = MutableState;
  if (*(unsigned char *)(a1 + 104))
  {
    int v5 = *((_DWORD *)MutableState + 14);
    if ((v5 & 4) == 0)
    {
      *((_DWORD *)MutableState + 14) = v5 | 4;
      unint64_t v6 = MutableState[4] - MutableState[3] + *(void *)(a1 + 128) + 64;
      *(void *)(a1 + 128) = v6;
      *(unsigned char *)(a1 + 120) = 1;
      if (v6 > *(void *)(a1 + 112)) {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GC(a1, MutableState, 0, 0.666);
      }
    }
  }
  return v4;
}

void *fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 92);
  if (v3 == a2) {
    return *(void **)(a1 + 96);
  }
  if (*(unsigned char *)(a1 + 88))
  {
    if (v3 == -1)
    {
      *(_DWORD *)(a1 + 92) = a2;
      MutableState = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::GetMutableState(a1, 0);
      *(void *)(a1 + 96) = MutableState;
      *((_DWORD *)MutableState + 14) |= 4u;
      std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::reserve((int64x2_t *)(MutableState + 3), 0x80uLL);
      return *(void **)(a1 + 96);
    }
    uint64_t v5 = *(void *)(a1 + 96);
    if (!*(_DWORD *)(v5 + 60))
    {
      *(_DWORD *)(a1 + 92) = a2;
      *(_DWORD *)uint64_t v5 = 2139095040;
      *(void *)(v5 + 56) = 0;
      *(void *)(v5 + 8) = 0;
      *(void *)(v5 + 16) = 0;
      *(void *)(v5 + 32) = *(void *)(v5 + 24);
      result = *(void **)(a1 + 96);
      *((_DWORD *)result + 14) |= 4u;
      return result;
    }
    *(_DWORD *)(v5 + 56) &= ~4u;
    *(unsigned char *)(a1 + 88) = 0;
  }
  int v6 = a2 + 1;

  return fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::GetMutableState(a1, v6);
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GC(uint64_t a1, void *a2, char a3, float a4)
{
  if (*(unsigned char *)(a1 + 120))
  {
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      unint64_t v8 = fst::LogMessage::LogMessage((fst *)v37, (uint64_t)__p);
      uint64_t v9 = fst::cerr(v8);
      float v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      uint64_t v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"), free recently cached = ", 26);
      uint8x8_t v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", cache size = ", 15);
      unint64_t v13 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", cache frac = ", 15);
      unint64_t v14 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", cache limit = ", 16);
      v15 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v37);
      if (v42 < 0) {
        operator delete(__p[0]);
      }
    }
    unint64_t v16 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 112) * a4);
    uint64_t v17 = *(void *)(a1 + 40);
    *(void *)(a1 + 64) = v17;
    while (v17 != a1 + 32)
    {
      int v18 = *(_DWORD *)(v17 + 16);
      if (v18) {
        int v19 = v18 - 1;
      }
      else {
        int v19 = *(_DWORD *)(a1 + 92);
      }
      MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::GetMutableState(a1, v19);
      unint64_t v21 = *(void *)(a1 + 128);
      if (v21 > v16 && !*((_DWORD *)MutableState + 15))
      {
        if (a3)
        {
          if (MutableState != a2)
          {
            int v22 = *((_DWORD *)MutableState + 14);
LABEL_19:
            if ((v22 & 4) != 0)
            {
              unint64_t v23 = MutableState[4] - MutableState[3] + 64;
              FstCheck(v23 <= v21, "(size) <= (cache_size_)", "../subproject/libquasar/libkaldi/tools/openfst/src/include/fst/cache.h");
              *(void *)(a1 + 128) -= v23;
            }
            fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Delete((void *)a1);
            uint64_t v17 = *(void *)(a1 + 64);
            continue;
          }
        }
        else
        {
          int v22 = *((_DWORD *)MutableState + 14);
          if ((v22 & 8) == 0 && MutableState != a2) {
            goto LABEL_19;
          }
        }
      }
      *((_DWORD *)MutableState + 14) &= ~8u;
      uint64_t v17 = *(void *)(*(void *)(a1 + 64) + 8);
      *(void *)(a1 + 64) = v17;
    }
    if ((a3 & 1) != 0 || *(void *)(a1 + 128) <= v16)
    {
      unint64_t v24 = *(void *)(a1 + 128);
      if (v16)
      {
        if (v24 > v16)
        {
          uint64_t v25 = *(void *)(a1 + 112);
          do
          {
            v25 *= 2;
            BOOL v26 = v24 > 2 * v16;
            v16 *= 2;
          }
          while (v26);
          *(void *)(a1 + 112) = v25;
        }
      }
      else if (v24)
      {
        if (FLAGS_fst_error_fatal) {
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        }
        else {
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        }
        v27 = fst::LogMessage::LogMessage((fst *)&v40, (uint64_t)__p);
        v28 = fst::cerr(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v40);
        if (v42 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GC(a1, a2, 1, a4);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v37, "INFO");
      v29 = fst::LogMessage::LogMessage((fst *)&v39, (uint64_t)v37);
      v30 = fst::cerr(v29);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
      v32 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"), free recently cached = ", 26);
      v33 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", cache size = ", 15);
      v34 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", cache frac = ", 15);
      v35 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", cache limit = ", 16);
      v36 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v39);
      if (v38 < 0) {
        operator delete(v37[0]);
      }
    }
  }
}

void sub_8FC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v13 = a2;
  uint64_t v3 = a2;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v4 = a1 + 8;
  if (a2 >= (unint64_t)((v6 - v5) >> 3))
  {
    uint64_t v12 = 0;
    std::vector<fst::MemoryPoolBase *>::resize(v4, a2 + 1, &v12);
  }
  else
  {
    uint64_t v7 = *(void **)(v5 + 8 * a2);
    if (v7) {
      return v7;
    }
  }
  uint64_t v7 = fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::allocate((uint64_t *)(a1 + 72), 1uLL);
  *(_DWORD *)uint64_t v7 = 2139095040;
  *(_OWORD *)(v7 + 1) = 0u;
  *(_OWORD *)(v7 + 3) = 0u;
  v7[5] = 0;
  uint64_t v8 = *(void *)(a1 + 80);
  v7[6] = v8;
  ++*(void *)(v8 + 8);
  v7[7] = 0;
  *(void *)(*(void *)(a1 + 8) + 8 * v3) = v7;
  if (*(unsigned char *)a1)
  {
    uint64_t v9 = std::__list_imp<int,fst::PoolAllocator<int>>::__create_node[abi:ne180100]<int const&>(a1 + 32, 0, 0, &v13);
    uint64_t v10 = *(void *)(a1 + 32);
    *uint64_t v9 = v10;
    v9[1] = a1 + 32;
    *(void *)(v10 + 8) = v9;
    *(void *)(a1 + 32) = v9;
    ++*(void *)(a1 + 48);
  }
  return v7;
}

void *fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::allocate(uint64_t *a1, unint64_t a2)
{
  if (a2 == 2)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<2>>(*a1);
    result = *(void **)(v2 + 56);
    if (!result)
    {
      result = (void *)fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::LogWeightTpl<float>>>>>::TN<2>>::Link>::Allocate((void *)(v2 + 8), 1);
      result[16] = 0;
      return result;
    }
    uint64_t v4 = result[16];
    goto LABEL_26;
  }
  if (a2 == 1)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<1>>(*a1);
    result = *(void **)(v2 + 56);
    if (!result)
    {
      result = (void *)fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::LogWeightTpl<float>>>>>::TN<1>>::Link>::Allocate((void *)(v2 + 8), 1);
      result[8] = 0;
      return result;
    }
    uint64_t v4 = result[8];
LABEL_26:
    *(void *)(v2 + 56) = v4;
    return result;
  }
  if (a2 <= 4)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<4>>(*a1);
    result = *(void **)(v2 + 56);
    if (!result)
    {
      result = (void *)fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::LogWeightTpl<float>>>>>::TN<4>>::Link>::Allocate((void *)(v2 + 8), 1);
      result[32] = 0;
      return result;
    }
    uint64_t v4 = result[32];
    goto LABEL_26;
  }
  if (a2 <= 8)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<8>>(*a1);
    result = *(void **)(v2 + 56);
    if (!result)
    {
      result = (void *)fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::LogWeightTpl<float>>>>>::TN<8>>::Link>::Allocate((void *)(v2 + 8), 1);
      result[64] = 0;
      return result;
    }
    uint64_t v4 = result[64];
    goto LABEL_26;
  }
  if (a2 <= 0x10)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<16>>(*a1);
    result = *(void **)(v2 + 56);
    if (!result)
    {
      result = (void *)fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::LogWeightTpl<float>>>>>::TN<16>>::Link>::Allocate((void *)(v2 + 8), 1);
      result[128] = 0;
      return result;
    }
    uint64_t v4 = result[128];
    goto LABEL_26;
  }
  if (a2 <= 0x20)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<32>>(*a1);
    result = *(void **)(v2 + 56);
    if (!result)
    {
      result = (void *)fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::LogWeightTpl<float>>>>>::TN<32>>::Link>::Allocate((void *)(v2 + 8), 1);
      result[256] = 0;
      return result;
    }
    uint64_t v4 = result[256];
    goto LABEL_26;
  }
  if (a2 <= 0x40)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TN<64>>(*a1);
    result = *(void **)(v2 + 56);
    if (!result)
    {
      result = (void *)fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::LogWeightTpl<float>>>>>::TN<64>>::Link>::Allocate((void *)(v2 + 8), 1);
      result[512] = 0;
      return result;
    }
    uint64_t v4 = result[512];
    goto LABEL_26;
  }
  if (a2 >> 58) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }

  return operator new(a2 << 6);
}

int64x2_t *std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::reserve(int64x2_t *result, unint64_t a2)
{
  if (a2 > (result[1].i64[0] - result->i64[0]) >> 4)
  {
    uint64_t v3 = result;
    if (a2 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = result->i64[1] - result->i64[0];
    unint64_t v14 = &result[1].i64[1];
    uint64_t v5 = fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::allocate(&result[1].i64[1], a2);
    uint64_t v6 = v3->i64[0];
    unint64_t v7 = v3->u64[1];
    if (v7 == v3->i64[0])
    {
      int64x2_t v9 = vdupq_n_s64(v7);
      uint64_t v8 = (char *)v5 + (v4 & 0xFFFFFFFFFFFFFFF0);
    }
    else
    {
      uint64_t v8 = (char *)v5 + (v4 & 0xFFFFFFFFFFFFFFF0);
      do
      {
        *((_OWORD *)v8 - 1) = *(_OWORD *)(v7 - 16);
        v8 -= 16;
        v7 -= 16;
      }
      while (v7 != v6);
      int64x2_t v9 = *v3;
    }
    v3->i64[0] = (uint64_t)v8;
    v3->i64[1] = (uint64_t)v5 + (v4 & 0xFFFFFFFFFFFFFFF0);
    int64x2_t v12 = v9;
    uint64_t v10 = v3[1].i64[0];
    v3[1].i64[0] = (uint64_t)&v5[2 * a2];
    uint64_t v13 = v10;
    uint64_t v11 = v9.i64[0];
    return (int64x2_t *)std::__split_buffer<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>::~__split_buffer((uint64_t)&v11);
  }
  return result;
}

void *fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::allocate(uint64_t *a1, unint64_t a2)
{
  if (a2 == 2)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<2>>(*a1);
    result = *(void **)(v2 + 56);
    if (!result)
    {
      result = (void *)fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::LogWeightTpl<float>>>::TN<2>>::Link>::Allocate((void *)(v2 + 8), 1);
      result[4] = 0;
      return result;
    }
    uint64_t v4 = result[4];
    goto LABEL_26;
  }
  if (a2 == 1)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<1>>(*a1);
    result = *(void **)(v2 + 56);
    if (!result)
    {
      result = (void *)fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::ArcTpl<fst::LogWeightTpl<float>>>::TN<1>>::Link>::Allocate((void *)(v2 + 8), 1);
      result[2] = 0;
      return result;
    }
    uint64_t v4 = result[2];
LABEL_26:
    *(void *)(v2 + 56) = v4;
    return result;
  }
  if (a2 <= 4)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<4>>(*a1);
    result = *(void **)(v2 + 56);
    if (!result)
    {
      result = (void *)fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::LogWeightTpl<float>>>>>::TN<1>>::Link>::Allocate((void *)(v2 + 8), 1);
      result[8] = 0;
      return result;
    }
    uint64_t v4 = result[8];
    goto LABEL_26;
  }
  if (a2 <= 8)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<8>>(*a1);
    result = *(void **)(v2 + 56);
    if (!result)
    {
      result = (void *)fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::LogWeightTpl<float>>>>>::TN<2>>::Link>::Allocate((void *)(v2 + 8), 1);
      result[16] = 0;
      return result;
    }
    uint64_t v4 = result[16];
    goto LABEL_26;
  }
  if (a2 <= 0x10)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<16>>(*a1);
    result = *(void **)(v2 + 56);
    if (!result)
    {
      result = (void *)fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::LogWeightTpl<float>>>>>::TN<4>>::Link>::Allocate((void *)(v2 + 8), 1);
      result[32] = 0;
      return result;
    }
    uint64_t v4 = result[32];
    goto LABEL_26;
  }
  if (a2 <= 0x20)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<32>>(*a1);
    result = *(void **)(v2 + 56);
    if (!result)
    {
      result = (void *)fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::LogWeightTpl<float>>>>>::TN<8>>::Link>::Allocate((void *)(v2 + 8), 1);
      result[64] = 0;
      return result;
    }
    uint64_t v4 = result[64];
    goto LABEL_26;
  }
  if (a2 <= 0x40)
  {
    uint64_t v2 = fst::MemoryPoolCollection::Pool<fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::TN<64>>(*a1);
    result = *(void **)(v2 + 56);
    if (!result)
    {
      result = (void *)fst::MemoryArena<fst::MemoryPool<fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::LogWeightTpl<float>>>>>::TN<16>>::Link>::Allocate((void *)(v2 + 8), 1);
      result[128] = 0;
      return result;
    }
    uint64_t v4 = result[128];
    goto LABEL_26;
  }
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }

  return operator new(16 * a2);
}

uint64_t std::__split_buffer<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  }
  if (*(void *)a1) {
    fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::deallocate(*(uint64_t **)(a1 + 32), *(void **)a1, (uint64_t)(*(void *)(a1 + 24) - *(void *)a1) >> 4);
  }
  return a1;
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Delete(void *a1)
{
  int v1 = *(_DWORD *)(a1[8] + 16);
  if (!v1 || v1 - 1 == *((_DWORD *)a1 + 23))
  {
    *((_DWORD *)a1 + 23) = -1;
    a1[12] = 0;
  }
  return fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Delete(a1);
}

uint64_t fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Delete(void *a1)
{
  fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(*(void *)(a1[1] + 8 * *(int *)(a1[8] + 16)), a1 + 9);
  *(void *)(a1[1] + 8 * *(int *)(a1[8] + 16)) = 0;
  uint64_t v2 = (uint64_t *)a1[8];
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  a1[8] = v3;
  *(void *)(v4 + 8) = v3;
  *(void *)v2[1] = v4;
  --a1[6];

  return std::__list_imp<int,fst::PoolAllocator<int>>::__delete_node[abi:ne180100]<>((uint64_t)(a1 + 4), (uint64_t)v2);
}

uint64_t fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::NumArcs(uint64_t a1, unsigned int a2)
{
  if (fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::LogWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>>>>::HasArcs(a1, a2))
  {
    uint64_t v5 = *(void *)(a1 + 120);
    if (*(_DWORD *)(v5 + 92) == a2) {
      uint64_t v6 = v5 + 96;
    }
    else {
      uint64_t v6 = *(void *)(v5 + 8) + 8 * (int)(a2 + 1);
    }
    return (uint64_t)(*(void *)(*(void *)v6 + 32) - *(void *)(*(void *)v6 + 24)) >> 4;
  }
  else
  {
    if ((a2 & 0x80000000) != 0
      || (uint64_t v7 = *(void *)(a1 + 176), 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 184) - v7) >> 3) <= a2))
    {
      kaldi::KaldiAssertFailure_((kaldi *)"NumArcs", "../subproject/libquasar/libkaldi/src/fstext/context-fst-inl.h", &stru_B8.sectname[2], "s >= 0 && s < state_seqs_.size()", v4);
    }
    uint64_t v10 = (uint64_t *)(v7 + 24 * a2);
    uint64_t v8 = *v10;
    uint64_t v9 = v10[1];
    uint64_t v11 = *(int *)(a1 + 396) - 1;
    if (v11 != (v9 - *v10) >> 2) {
      kaldi::KaldiAssertFailure_((kaldi *)"NumArcs", "../subproject/libquasar/libkaldi/src/fstext/context-fst-inl.h", &stru_B8.sectname[4], "seq.size() == N_ - 1", v4);
    }
    if (v8 == v9 || (int v12 = *(_DWORD *)(v9 - 4), v12 != *(_DWORD *)(a1 + 392)))
    {
      uint64_t v15 = ((uint64_t)(*(void *)(a1 + 312) - *(void *)(a1 + 304)) >> 2)
          + ((uint64_t)(*(void *)(a1 + 376) - *(void *)(a1 + 368)) >> 2);
    }
    else
    {
      uint64_t v13 = *(int *)(a1 + 400);
      if (v13 == v11 || *(_DWORD *)(v8 + 4 * v13) == v12) {
        return (uint64_t)(*(void *)(a1 + 376) - *(void *)(a1 + 368)) >> 2;
      }
      uint64_t v15 = (uint64_t)(*(void *)(a1 + 376) - *(void *)(a1 + 368)) >> 2;
    }
    return v15 + 1;
  }
}

uint64_t fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::NumInputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::LogWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>>>>::HasArcs(a1, a2) & 1) == 0)fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 92) == a2) {
    uint64_t v5 = v4 + 96;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 8);
}

void fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::Expand(uint64_t a1, int a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 184) - *(void *)(a1 + 176)) >> 3) <= a2) {
    fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::Expand();
  }
  if (fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::CreateArc(a1, a2, *(_DWORD *)(a1 + 392), &v9))
  {
    MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
    fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::PushArc(MutableState, &v9);
  }
  for (i = *(int **)(a1 + 304); i != *(int **)(a1 + 312); ++i)
  {
    if (fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::CreateArc(a1, a2, *i, &v9))
    {
      uint64_t v6 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
      fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::PushArc(v6, &v9);
    }
  }
  for (j = *(int **)(a1 + 368); j != *(int **)(a1 + 376); ++j)
  {
    if (fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::CreateArc(a1, a2, *j, &v9))
    {
      uint64_t v8 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
      fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::PushArc(v8, &v9);
    }
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArcs(a1, a2);
}

uint64_t fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::CreateArc(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  if (!a3) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 176);
  if (kaldi::ConstIntegerSet<int>::count(a1 + 328, a3))
  {
    long long v9 = (int *)operator new(4uLL);
    *long long v9 = -a3;
    __p[0].__end_ = v9 + 1;
    __p[0].__end_cap_.__value_ = v9 + 1;
    __p[0].__begin_ = v9;
    *a4 = fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::FindLabel((void *)a1, &__p[0].__begin_);
    a4[1] = a3;
    a4[2] = 0;
    a4[3] = a2;
    goto LABEL_4;
  }
  int v11 = a2;
  int v12 = (const void **)(v8 + 24 * a2);
  BOOL v13 = kaldi::ConstIntegerSet<int>::count(a1 + 264, a3);
  int v14 = *(_DWORD *)(a1 + 392);
  if (!v13)
  {
    if (v14 != a3)
    {
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p, "CreateArc", "../subproject/libquasar/libkaldi/src/fstext/context-fst-inl.h", 315);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ContextFst: CreateArc, invalid olabel supplied [confusion about phone list or disambig symbols?]: ", 98);
        std::ostream::operator<<();
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      }
      exit(1);
    }
LABEL_13:
    uint64_t v16 = *(int *)(a1 + 400);
    if (v16 != *(_DWORD *)(a1 + 396) - 1 && *((_DWORD *)*v12 + v16) != a3) {
      goto LABEL_16;
    }
    return 0;
  }
  if (v14 == a3) {
    goto LABEL_13;
  }
  uint64_t v15 = *(_DWORD **)(v8 + 24 * v11 + 8);
  if (*v12 != v15 && *(v15 - 1) == v14) {
    return 0;
  }
LABEL_16:
  std::vector<int>::vector(__p, *(int *)(a1 + 396) - 1);
  LODWORD(v17) = *(_DWORD *)(a1 + 396);
  int v18 = v17 - 2;
  if ((int)v17 > 2)
  {
    uint64_t v19 = 0;
    std::vector<int>::pointer begin = __p[0].__begin_;
    uint64_t v21 = (uint64_t)*v12 + 4;
    do
    {
      begin[v19] = *(_DWORD *)(v21 + 4 * v19);
      uint64_t v17 = *(int *)(a1 + 396);
      int v18 = v17 - 2;
      ++v19;
    }
    while (v19 < v17 - 2);
  }
  if ((int)v17 >= 2) {
    __p[0].__begin_[v18] = a3;
  }
  v41 = 0;
  char v42 = 0;
  unint64_t v43 = 0;
  uint64_t v22 = *(void *)(v8 + 24 * v11 + 8);
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v41, *v12, v22, (v22 - (uint64_t)*v12) >> 2);
  int State = fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::FindState(a1, (uint64_t)__p);
  unint64_t v24 = v42;
  if ((unint64_t)v42 >= v43)
  {
    BOOL v26 = v41;
    uint64_t v27 = v42 - v41;
    unint64_t v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v29 = v43 - (void)v41;
    if ((uint64_t)(v43 - (void)v41) >> 1 > v28) {
      unint64_t v28 = v29 >> 1;
    }
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v30 = v28;
    }
    if (v30)
    {
      v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v43, v30);
      BOOL v26 = v41;
      unint64_t v24 = v42;
    }
    else
    {
      v31 = 0;
    }
    v32 = (int *)&v31[4 * v27];
    v33 = &v31[4 * v30];
    int *v32 = a3;
    uint64_t v25 = v32 + 1;
    while (v24 != v26)
    {
      int v34 = *--v24;
      *--v32 = v34;
    }
    v41 = v32;
    char v42 = v25;
    unint64_t v43 = (unint64_t)v33;
    if (v26) {
      operator delete(v26);
    }
  }
  else
  {
    *char v42 = a3;
    uint64_t v25 = v24 + 1;
  }
  char v42 = v25;
  int v35 = *(_DWORD *)(a1 + 396);
  v36 = v41;
  if (v35 >= 2)
  {
    for (uint64_t i = 1; i < v35; ++i)
    {
      if (v36[i] == *(_DWORD *)(a1 + 392))
      {
        v36[i] = 0;
        int v35 = *(_DWORD *)(a1 + 396);
      }
    }
    v36 = v41;
  }
  int v38 = v36[*(int *)(a1 + 400)];
  if (v38 == *(_DWORD *)(a1 + 392)) {
    __assert_rtn("CreatePhoneOrEpsArc", "context-fst-inl.h", 249, "phone_seq[P_] != subsequential_symbol_");
  }
  if (v38)
  {
    int Label = fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::FindLabel((void *)a1, &v41);
    v36 = v41;
    *a4 = Label;
    a4[1] = a3;
    a4[2] = 0;
    a4[3] = State;
    if (!v36) {
      goto LABEL_4;
    }
  }
  else
  {
    *a4 = *(_DWORD *)(a1 + 404);
    a4[1] = a3;
    a4[2] = 0;
    a4[3] = State;
  }
  char v42 = v36;
  operator delete(v36);
LABEL_4:
  if (__p[0].__begin_)
  {
    __p[0].__end_ = __p[0].__begin_;
    operator delete(__p[0].__begin_);
  }
  return 1;
}

void sub_90948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
}

void fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArcs(uint64_t a1, int a2)
{
  Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::SetArcs(*(void *)(a1 + 120), (uint64_t)MutableState);
  uint64_t v5 = MutableState[3];
  uint64_t v6 = MutableState[4] - v5;
  if (v6)
  {
    unint64_t v7 = v6 >> 4;
    int v8 = *(_DWORD *)(a1 + 68);
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    long long v9 = (int *)(v5 + 12);
    do
    {
      int v11 = *v9;
      v9 += 4;
      int v10 = v11;
      if (v11 >= v8)
      {
        int v8 = v10 + 1;
        *(_DWORD *)(a1 + 68) = v10 + 1;
      }
      --v7;
    }
    while (v7);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::LogWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>>>>::SetExpandedState(a1, a2);
  *((_DWORD *)MutableState + 14) |= 0xAu;
}

void *fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::PushArc(void *result, _OWORD *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = (_OWORD *)result[4];
  unint64_t v4 = result[5];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = (int64x2_t *)(result + 3);
    uint64_t v8 = result[3];
    uint64_t v9 = ((uint64_t)v5 - v8) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    int v11 = result + 6;
    uint64_t v12 = v4 - v8;
    if (v12 >> 3 > v10) {
      unint64_t v10 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    unint64_t v24 = v3 + 6;
    if (v13) {
      int v14 = fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::allocate(v11, v13);
    }
    else {
      int v14 = 0;
    }
    uint64_t v15 = &v14[2 * v9];
    _OWORD *v15 = *a2;
    uint64_t v16 = v3[3];
    unint64_t v17 = v3[4];
    if (v17 == v16)
    {
      int64x2_t v19 = vdupq_n_s64(v17);
      int v18 = &v14[2 * v9];
    }
    else
    {
      int v18 = &v14[2 * v9];
      do
      {
        *((_OWORD *)v18 - 1) = *(_OWORD *)(v17 - 16);
        v18 -= 2;
        v17 -= 16;
      }
      while (v17 != v16);
      int64x2_t v19 = *v7;
    }
    uint64_t v6 = v15 + 1;
    v3[3] = v18;
    v3[4] = v15 + 1;
    int64x2_t v22 = v19;
    uint64_t v20 = v3[5];
    v3[5] = &v14[2 * v13];
    uint64_t v23 = v20;
    uint64_t v21 = v19.i64[0];
    result = (void *)std::__split_buffer<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    _OWORD *v5 = *a2;
    uint64_t v6 = v5 + 1;
  }
  v3[4] = v6;
  return result;
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::SetArcs(uint64_t a1, uint64_t a2)
{
  fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::LogWeightTpl<float>>>>::SetArcs((void *)a2);
  if (*(unsigned char *)(a1 + 120))
  {
    if ((*(unsigned char *)(a2 + 56) & 4) != 0)
    {
      unint64_t v4 = *(void *)(a2 + 32) - *(void *)(a2 + 24) + *(void *)(a1 + 128);
      *(void *)(a1 + 128) = v4;
      if (v4 > *(void *)(a1 + 112))
      {
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GC(a1, (void *)a2, 0, 0.666);
      }
    }
  }
}

void *fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::ContextFst(void *result, uint64_t a2, int a3)
{
  void *result = off_261B28;
  if (a3) {
    operator new();
  }
  uint64_t v3 = *(void *)(a2 + 8);
  result[1] = v3;
  ++*(_DWORD *)(v3 + 56);
  return result;
}

void sub_90C80()
{
}

void sub_90D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  if (*(char *)(v9 + 431) < 0) {
    operator delete(*(void **)(v9 + 408));
  }
  uint64_t v12 = *(void **)(v9 + 368);
  if (v12)
  {
    *(void *)(v9 + 376) = v12;
    operator delete(v12);
  }
  unint64_t v13 = *(void **)(v9 + 344);
  if (v13) {
    operator delete(v13);
  }
  int v14 = *(void **)(v9 + 304);
  if (v14)
  {
    *(void *)(v9 + 312) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void **)(v9 + 280);
  if (v15) {
    operator delete(v15);
  }
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table(v9 + 200);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table(v10);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl((void *)v9);
  _Unwind_Resume(a1);
}

uint64_t fst::CacheStateIterator<fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>::Done(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68)) {
    return 0;
  }
  int v5 = fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::PoolAllocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>>>::MinUnexpandedState(v3);
  if (v5 >= *(_DWORD *)(*(void *)(a1 + 16) + 68)) {
    return 1;
  }
  int v6 = v5;
  do
  {
    fst::ArcIterator<fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>::ArcIterator(&v20, *(void *)(a1 + 8), v6);
    unint64_t v7 = v21;
    uint64_t v8 = *(void *)(v20 + 24);
    uint64_t v9 = *(void *)(v20 + 32) - v8;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v21 < v9 >> 4)
    {
      uint64_t v11 = v9 >> 4;
      int v12 = *(_DWORD *)(v10 + 68);
      unint64_t v13 = (int *)(v8 + 16 * v21 + 12);
      do
      {
        int v15 = *v13;
        v13 += 4;
        int v14 = v15;
        if (v12 <= v15)
        {
          int v12 = v14 + 1;
          *(_DWORD *)(v10 + 68) = v14 + 1;
        }
        ++v7;
      }
      while (v11 != v7);
      unint64_t v21 = v11;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::LogWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>>>>::SetExpandedState(v10, v6);
    int v16 = *(_DWORD *)(a1 + 24);
    uint64_t v17 = *(void *)(a1 + 16);
    int v18 = *(_DWORD *)(v17 + 68);
    --*(_DWORD *)(v20 + 60);
    BOOL v4 = v16 >= v18;
    if (v16 < v18) {
      break;
    }
    int v6 = fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::PoolAllocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>>>::MinUnexpandedState(v17);
  }
  while (v6 < *(_DWORD *)(*(void *)(a1 + 16) + 68));
  return v4;
}

void sub_90F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *fst::ArcIterator<fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>::ArcIterator(void *a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  a1[1] = 0;
  Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(*(void *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 15);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::LogWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>>>>::HasArcs(*(void *)(a2 + 8), a3) & 1) == 0)fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::Expand(*(void *)(a2 + 8), a3); {
  return a1;
  }
}

void sub_90FF0(_Unwind_Exception *a1)
{
  --*(_DWORD *)(*(void *)v1 + 60);
  _Unwind_Resume(a1);
}

uint64_t fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::LogWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>>>>::HasArcs(a1, a2) & 1) == 0)fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::Expand(a1, a2); {

  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::LogWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>>>>::InitArcIterator(a1, a2, a3);
}

void fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ComposeFst(void *a1)
{
  fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ImplToFst(a1);

  operator delete();
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Start(uint64_t a1)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Start(*(void *)(a1 + 8));
}

float fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Final(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Final(*(uint64_t **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumArcs(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumInputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumInputEpsilons(*(void **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumOutputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumOutputEpsilons(*(void **)(a1 + 8), a2);
}

void fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy()
{
}

void sub_91120()
{
}

void fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitStateIterator()
{
}

void sub_911FC()
{
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitArcIterator(uint64_t a1, uint64_t a2, void *a3)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitMatcher(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8), a1, a2);
}

void fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::CreateBase2<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>()
{
}

void sub_912B8()
{
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComposeFstImplBase(a1, a2, a3, a4) = off_262518;
  uint64_t v8 = *(__n128 **)(a4 + 40);
  if (!v8) {
    operator new();
  }
  *(void *)(a1 + 136) = v8;
  __n128 v9 = *v8;
  *(__n128 *)(a1 + 144) = *v8;
  *(void *)(a1 + 1--*(_DWORD *)(a9 + 60) = (*(uint64_t (**)(unint64_t, __n128))(*(void *)v9.n128_u64[0] + 32))(v9.n128_u64[0], v9);
  *(void *)(a1 + 168) = (*(uint64_t (**)(void))(**(void **)(a1 + 152) + 32))(*(void *)(a1 + 152));
  uint64_t v10 = *(void *)(a4 + 48);
  if (!v10) {
    operator new();
  }
  *(void *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3) {
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  unint64_t v13 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 144) + 40))(*(void *)(a1 + 144), v11);
  uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 152) + 40))(*(void *)(a1 + 152), v12);
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_9152C()
{
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComposeFstImplBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = (void *)fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::CacheBaseImpl(a1, a4);
  *unint64_t v7 = off_2625A8;
  fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitBase((uint64_t)v7, a2, a3);
  return a1;
}

void sub_915F4(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(uint64_t a1)
{
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 144) + 48))(*(void *)(a1 + 144)) & 1) != 0
    && (*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 144) + 24))(*(void *)(a1 + 144), 1) != 1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    unint64_t v13 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    uint64_t v14 = fst::cerr(v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"ComposeFst: 1st argument requires matching but cannot.", 54);
  }
  else if (((*(uint64_t (**)(void))(**(void **)(a1 + 152) + 48))(*(void *)(a1 + 152)) & 1) != 0 {
         && (*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), 1))
  }
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    int v2 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    uint64_t v3 = fst::cerr(v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ComposeFst: 2nd argument requires matching but cannot.", 54);
  }
  else
  {
    int v4 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 144) + 24))(*(void *)(a1 + 144), 0);
    int v5 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), 0);
    if (v5) {
      BOOL v6 = 0;
    }
    else {
      BOOL v6 = v4 == 1;
    }
    if (v6) {
      int v7 = 2;
    }
    else {
      int v7 = 1;
    }
    BOOL v8 = v4 == 1;
    if (v4 == 1) {
      int v9 = v7;
    }
    else {
      int v9 = 0;
    }
    if (v8 || v5 == 0) {
      goto LABEL_36;
    }
    int v9 = 1;
    if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 144) + 24))(*(void *)(a1 + 144), 1) == 1) {
      goto LABEL_36;
    }
    if (!(*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), 1))
    {
      int v9 = 0;
      goto LABEL_36;
    }
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v11 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    uint64_t v12 = fst::cerr(v11);
    int v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: 1st argument cannot match on output labels ", 55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"and 2nd argument cannot match on input labels (sort?).", 54);
  }
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v18);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  int v9 = 3;
LABEL_36:
  *(_DWORD *)(a1 + 184) = v9;
}

void sub_9193C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);

  operator delete();
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 64))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 64))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(**(void **)(a1 + 144) + 40))(*(void *)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(void, void))(**(void **)(a1 + 152) + 40))(*(void *)(a1 + 152), 0) & 4) != 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_91B50()
{
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(void *a1, int a2)
{
  int v4 = (unsigned int *)(*(void *)(a1[22] + 96) + 12 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  uint64_t v7 = a1[17];
  char v16 = *((unsigned char *)v4 + 8);
  fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>::SetState(v7, v5, v6, &v16);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    uint64_t v9 = a1[20];
    uint64_t v8 = a1[21];
    uint64_t v10 = a1[19];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    int v13 = v6;
    uint64_t v14 = v5;
    int v15 = 1;
  }
  else
  {
    uint64_t v8 = a1[20];
    uint64_t v9 = a1[21];
    uint64_t v10 = a1[18];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    int v13 = v5;
    uint64_t v14 = v6;
    int v15 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>(v11, v12, v8, v13, v9, v14, v10, v15);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(**(void **)(a1 + 144) + 24))(*(void *)(a1 + 144), 0) == a3
    && (*(unsigned int (**)(void, void))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), 0) == a3)
  {
    operator new();
  }
  return 0;
}

void sub_91CFC()
{
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 24))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    uint64_t result = (*(uint64_t (**)(void *))(*a1[21] + 24))(a1[21]);
    if (result != -1)
    {
      unint64_t v4 = __PAIR64__(result, v3);
      char v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 176) + 96);
  char v5 = (unsigned int *)(v4 + 12 * a2);
  uint64_t v6 = *v5;
  float v10 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 144) + 96))(*(void *)(a1 + 144), v6);
  if (v10 != INFINITY)
  {
    uint64_t v7 = v5[1];
    float v8 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 152) + 96))(*(void *)(a1 + 152), v7);
    float v10 = v8;
    if (v8 != INFINITY)
    {
      uint64_t v9 = *(void *)(a1 + 136);
      LOBYTE(v10) = *(unsigned char *)(v4 + 12 * a2 + 8);
      fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>::SetState(v9, v6, v7, &v10);
    }
  }
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_25D080;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = off_261C60;
  *(unsigned char *)(a1 + --*(_DWORD *)(a9 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)a2;
  *(void *)(a1 + 112) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  if (!v4) {
    operator new();
  }
  *(void *)(a1 + 120) = v4;
  *(unsigned char *)(a1 + 128) = v4 == 0;
  return a1;
}

void sub_9207C()
{
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitBase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__str, "compose");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (fst *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 104))(a3);
  uint64_t v7 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  if (!fst::CompatSymbols(v6, v7, (const fst::SymbolTable *)((char *)&def_5A5E8 + 1)))
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(&__str, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(&__str, "ERROR");
    }
    float v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)&__str);
    uint64_t v9 = fst::cerr(v8);
    float v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ComposeFst: output symbol table of 1st argument ", 48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"does not match input symbol table of 2nd argument", 49);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 104))(a2);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetInputSymbols(a1, v11);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 112))(a3);
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetOutputSymbols(a1, v12);
}

void sub_92288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>::SequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    operator new();
  }
  *(void *)a1 = a4;
  if (!a5) {
    operator new();
  }
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + 16) = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 32))(a4);
  *(void *)(a1 + 24) = -1;
  *(unsigned char *)(a1 + 32) = -1;
  return a1;
}

void sub_923F8()
{
}

uint64_t fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::ContextMatcher(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = off_262608;
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 80))(a2, 0);
  *(void *)(a1 + 20) = -1;
  *(unsigned char *)(a1 + 44) = 0;
  if (a3 != 1) {
    goto LABEL_28;
  }
  uint64_t v6 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 72))(a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "context");
  uint64_t v7 = v6[23];
  if ((v7 & 0x80u) == 0) {
    float v8 = (void *)v6[23];
  }
  else {
    float v8 = (void *)*((void *)v6 + 1);
  }
  unint64_t v9 = v23;
  int v10 = (char)v23;
  if ((v23 & 0x80u) != 0) {
    unint64_t v9 = (unint64_t)__p[1];
  }
  if (v8 != (void *)v9)
  {
    BOOL v19 = 0;
    if (((char)v23 & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_27;
  }
  if ((v23 & 0x80u) == 0) {
    uint64_t v11 = __p;
  }
  else {
    uint64_t v11 = (void **)__p[0];
  }
  if ((v7 & 0x80) != 0)
  {
    BOOL v19 = memcmp(*(const void **)v6, v11, *((void *)v6 + 1)) == 0;
    goto LABEL_23;
  }
  if (v6[23])
  {
    uint64_t v12 = v7 - 1;
    do
    {
      int v14 = *v6++;
      int v13 = v14;
      int v16 = *(unsigned __int8 *)v11;
      uint64_t v11 = (void **)((char *)v11 + 1);
      int v15 = v16;
      BOOL v18 = v12-- != 0;
      BOOL v19 = v13 == v15;
    }
    while (v13 == v15 && v18);
LABEL_23:
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_24;
    }
LABEL_27:
    operator delete(__p[0]);
    if (v19) {
      goto LABEL_25;
    }
LABEL_28:
    int v20 = 3;
    goto LABEL_29;
  }
  BOOL v19 = 1;
  if ((char)v23 < 0) {
    goto LABEL_27;
  }
LABEL_24:
  if (!v19) {
    goto LABEL_28;
  }
LABEL_25:
  int v20 = 1;
LABEL_29:
  *(_DWORD *)(a1 + 16) = v20;
  return a1;
}

void *fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::~ContextMatcher(void *a1)
{
  *a1 = off_262608;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::~ContextMatcher(void *a1)
{
  *a1 = off_262608;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  operator delete();
}

void fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::Copy()
{
}

void sub_9275C()
{
}

uint64_t fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::Properties(uint64_t a1, uint64_t a2)
{
  return a2;
}

BOOL fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::Done_(uint64_t a1)
{
  return *(unsigned char *)(a1 + 44) == 0;
}

uint64_t fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::Value_(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 44)) {
    fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::Value_();
  }
  return a1 + 28;
}

uint64_t fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::Next_(uint64_t result)
{
  if (!*(unsigned char *)(result + 44)) {
    fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::Next_();
  }
  *(unsigned char *)(result + 44) = 0;
  return result;
}

uint64_t fst::MatcherBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Final_(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1) + 32);

  return v1();
}

uint64_t fst::MatcherBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Priority_(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1) + 40);

  return v1();
}

void fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::SetState(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 16) == 3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    uint64_t v4 = fst::LogMessage::LogMessage((fst *)&v8, (uint64_t)__p);
    char v5 = fst::cerr(v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"ContextMatcher: bad match type", 30);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v8);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  *(_DWORD *)(a1 + 24) = a2;
}

void sub_9295C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::Find(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 24);
  if (v3 == -1) {
    fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::Find();
  }
  if (a2)
  {
    if (a2 == -1)
    {
      uint64_t result = 0;
      *(unsigned char *)(a1 + 44) = 0;
      return result;
    }
    uint64_t result = fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::CreateArc(*(void *)(*(void *)(a1 + 8) + 8), v3, a2, (_DWORD *)(a1 + 28));
  }
  else
  {
    *(void *)(a1 + 28) = 0xFFFFFFFF00000000;
    *(_DWORD *)(a1 + 36) = 0;
    *(_DWORD *)(a1 + 40) = v3;
    uint64_t result = 1;
  }
  *(unsigned char *)(a1 + 44) = result;
  return result;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  *a1 = off_262518;
  uint64_t v2 = (uint64_t *)a1[17];
  if (v2)
  {
    fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>::~SequenceComposeFilter(v2);
    operator delete();
  }
  uint64_t v3 = a1[22];
  if (v3)
  {
    uint64_t v4 = *(void **)(v3 + 96);
    if (v4)
    {
      *(void *)(v3 + 104) = v4;
      operator delete(v4);
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(v3 + 24);
    operator delete();
  }

  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(a1);
}

uint64_t *fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>::~SequenceComposeFilter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_92C2C()
{
}

void fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComposeFstImplBase(uint64_t a1, uint64_t a2)
{
}

void sub_92D28(_Unwind_Exception *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_25D080;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = off_261C60;
  *(unsigned char *)(a1 + --*(_DWORD *)(a9 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  operator new();
}

void sub_92ED0()
{
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::CopyStates((void *)a1, a2);
    *(void *)(a1 + 64) = *(void *)(a1 + 40);
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
    *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
    if (*(_DWORD *)(a2 + 92) == -1) {
      Mutableint State = 0;
    }
    else {
      Mutableint State = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::GetMutableState(a1, 0);
    }
    *(void *)(a1 + 96) = MutableState;
  }
  return a1;
}

void fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::CopyStates(void *a1, uint64_t a2)
{
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Clear(a1);
  uint64_t v4 = (char **)(a1 + 1);
  std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::reserve((void **)a1 + 1, (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  int v23 = 0;
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a2 + 16) != v5)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(v5 + 8 * v6);
      if (v7)
      {
        char v8 = fst::PoolAllocator<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::allocate(a1 + 9, 1uLL);
        *(_DWORD *)char v8 = *(_DWORD *)v7;
        *(_OWORD *)(v8 + 1) = *(_OWORD *)(v7 + 8);
        std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::vector<std::__wrap_iter<fst::ArcTpl<fst::TropicalWeightTpl<float>> const*>,0>(v8 + 3, *(const void **)(v7 + 24), *(void *)(v7 + 32), a1 + 10);
        *((_DWORD *)v8 + 14) = *(_DWORD *)(v7 + 56);
        *((_DWORD *)v8 + 15) = 0;
        if (*(unsigned char *)a1)
        {
          unint64_t v9 = std::__list_imp<int,fst::PoolAllocator<int>>::__create_node[abi:ne180100]<int const&>((uint64_t)(a1 + 4), 0, 0, &v23);
          uint64_t v10 = a1[4];
          *unint64_t v9 = v10;
          v9[1] = a1 + 4;
          *(void *)(v10 + 8) = v9;
          a1[4] = v9;
          ++a1[6];
        }
      }
      else
      {
        char v8 = 0;
      }
      uint64_t v12 = (void *)a1[2];
      unint64_t v11 = a1[3];
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v11 - (void)*v4;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          BOOL v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v17);
        }
        else {
          BOOL v18 = 0;
        }
        BOOL v19 = &v18[8 * v14];
        *(void *)BOOL v19 = v8;
        int v13 = v19 + 8;
        unint64_t v21 = (char *)a1[1];
        int v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 8;
            *((void *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          int v20 = *v4;
        }
        a1[1] = v19;
        a1[2] = v13;
        a1[3] = &v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        void *v12 = v8;
        int v13 = v12 + 1;
      }
      a1[2] = v13;
      unint64_t v6 = ++v23;
      uint64_t v5 = *(void *)(a2 + 8);
    }
    while (v6 < (*(void *)(a2 + 16) - v5) >> 3);
  }
}

void *std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::vector<std::__wrap_iter<fst::ArcTpl<fst::TropicalWeightTpl<float>> const*>,0>(void *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v5 = *a4;
  a1[3] = *a4;
  ++*(void *)(v5 + 8);
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ArcTpl<fst::TropicalWeightTpl<float>> const*>,std::__wrap_iter<fst::ArcTpl<fst::TropicalWeightTpl<float>> const*>>(a1, a2, a3, (a3 - (uint64_t)a2) >> 4);
  return a1;
}

void sub_931AC(_Unwind_Exception *a1)
{
  fst::PoolAllocator<fst::ArcTpl<fst::LogWeightTpl<float>>>::~PoolAllocator(v1);
  _Unwind_Resume(a1);
}

void *std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ArcTpl<fst::TropicalWeightTpl<float>> const*>,std::__wrap_iter<fst::ArcTpl<fst::TropicalWeightTpl<float>> const*>>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_93230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

void *std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::allocate(a1 + 3, a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * a2];
  return result;
}

uint64_t fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>::SequenceComposeFilter(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 16))(*a2, a3);
  *(void *)(a1 + 8) = (*(uint64_t (**)(void, uint64_t))(*(void *)a2[1] + 16))(a2[1], a3);
  *(void *)(a1 + 16) = (*(uint64_t (**)(void))(**(void **)a1 + 32))();
  *(void *)(a1 + 24) = -1;
  *(unsigned char *)(a1 + 32) = -1;
  return a1;
}

void fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>::SetState(uint64_t a1, uint64_t a2, int a3, unsigned char *a4)
{
  if (*(_DWORD *)(a1 + 24) != a2 || *(_DWORD *)(a1 + 28) != a3 || *a4 != *(unsigned char *)(a1 + 32))
  {
    *(_DWORD *)(a1 + 24) = a2;
    *(_DWORD *)(a1 + 28) = a3;
    *(unsigned char *)(a1 + 32) = *a4;
    uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16), a2);
    uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16), a2);
    BOOL v9 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a2) == INFINITY
      && v6 == v7;
    *(unsigned char *)(a1 + 33) = v9;
    *(unsigned char *)(a1 + 34) = v7 == 0;
  }
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 184);
  if (!v3) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 144) + 104))(*(void *)(a1 + 144));
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 152) + 104))(*(void *)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    unint64_t v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    uint64_t v12 = fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1) {
    return 0;
  }
  return v8 == -1 || v7 <= v8;
}

void sub_935D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::SetState(a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>(a1, a2, a7, v18, a8);
  unint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a5 + 128))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2]) {
        goto LABEL_13;
      }
LABEL_7:
      char v14 = (int *)(v15[1] + 16 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(void))(*(void *)v15[0] + 24))(v15[0])) {
      break;
    }
    if (!v15[0]) {
      goto LABEL_7;
    }
    char v14 = (int *)(*(uint64_t (**)(void))(*(void *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>(a1, a2, a7, v14, a8);
    if (v15[0]) {
      (*(void (**)(void))(*(void *)v15[0] + 40))(v15[0]);
    }
    else {
      ++v17;
    }
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(void *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16) {
    --*v16;
  }
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArcs(a1, a2);
}

void sub_937E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::Reverse<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ArcTpl<fst::TropicalWeightTpl<float>>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>(uint64_t a1, int a2, uint64_t a3, int *a4, int a5)
{
  uint64_t v10 = a4 + 1;
  if (!a5) {
    uint64_t v10 = a4;
  }
  uint64_t result = fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::Find(a3, *v10);
  if (result && *(unsigned char *)(a3 + 44))
  {
    long long v12 = *(_OWORD *)(a3 + 28);
    long long v24 = *(_OWORD *)a4;
    long long v25 = v12;
    if (a5)
    {
      int v13 = *(unsigned __int8 **)(a1 + 136);
      if (DWORD1(v24) != -1)
      {
        if (v25 == -1)
        {
          int v17 = v13[32];
          if (v17) {
            char v18 = -1;
          }
          else {
            char v18 = 0;
          }
          char v23 = v18;
          if (v17) {
            goto LABEL_35;
          }
        }
        else
        {
          if (DWORD1(v24)) {
            char v14 = 0;
          }
          else {
            char v14 = -1;
          }
          char v23 = v14;
          if (!DWORD1(v24)) {
            goto LABEL_35;
          }
        }
        goto LABEL_28;
      }
      if (!v13[33])
      {
        char v23 = v13[34] ^ 1;
LABEL_28:
        BOOL v19 = (unsigned int *)&v24;
        int v20 = &v25;
LABEL_34:
        uint64_t result = (uint64_t)fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v19, (uint64_t)v20, &v23);
      }
LABEL_35:
      if (!*(unsigned char *)(a3 + 44)) {
        fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::Next_();
      }
      *(unsigned char *)(a3 + 44) = 0;
      return result;
    }
    char v15 = *(unsigned __int8 **)(a1 + 136);
    if (DWORD1(v25) == -1)
    {
      if (v15[33]) {
        goto LABEL_35;
      }
      char v23 = v15[34] ^ 1;
    }
    else if (v24 == -1)
    {
      int v21 = v15[32];
      if (v21) {
        char v22 = -1;
      }
      else {
        char v22 = 0;
      }
      char v23 = v22;
      if (v21) {
        goto LABEL_35;
      }
    }
    else
    {
      if (DWORD1(v25)) {
        char v16 = 0;
      }
      else {
        char v16 = -1;
      }
      char v23 = v16;
      if (!DWORD1(v25)) {
        goto LABEL_35;
      }
    }
    BOOL v19 = (unsigned int *)&v25;
    int v20 = &v24;
    goto LABEL_34;
  }
  return result;
}

void *fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(uint64_t a1, int a2, unsigned int *a3, uint64_t a4, char *a5)
{
  int v7 = *(_DWORD *)(a4 + 12);
  LODWORD(v18) = a3[3];
  HIDWORD(v18) = v7;
  char v19 = *a5;
  unsigned int v8 = *a3;
  unsigned int v9 = *(_DWORD *)(a4 + 4);
  float v10 = *((float *)a3 + 2);
  float v11 = NAN;
  if (v10 != -INFINITY)
  {
    float v12 = *(float *)(a4 + 8);
    if (v12 != -INFINITY)
    {
      if (v12 == INFINITY || v10 == INFINITY) {
        float v11 = INFINITY;
      }
      else {
        float v11 = v10 + v12;
      }
    }
  }
  unsigned int Id = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(void **)(a1 + 176), &v18, 1);
  *(void *)&long long v17 = __PAIR64__(v9, v8);
  *((void *)&v17 + 1) = __PAIR64__(Id, LODWORD(v11));
  Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
  return fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::PushArc(MutableState, &v17);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = off_2626B0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  *(void *)(a1 + 32) = (*(uint64_t (**)(void, void))(**(void **)(a3 + 144) + 16))(*(void *)(a3 + 144), 0);
  *(void *)(a1 + 40) = (*(uint64_t (**)(void, void))(**(void **)(a3 + 152) + 16))(*(void *)(a3 + 152), 0);
  *(unsigned char *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 52) = xmmword_209A50;
  *(unsigned char *)(a1 + 84) = 0;
  if (a4 == 1) {
    *(void *)(a1 + 52) = 0xFFFFFFFF00000000;
  }
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);

  operator delete();
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_93BB4()
{
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
  if (result != 3)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2);
    if (result != 3)
    {
      if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), a2) != 4
        || (uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2), result != 4))
      {
        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), a2) == 4
          && (*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2), result != 4))
        {
          if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3; {
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2);
          }
          if (result != *(_DWORD *)(a1 + 28)) {
            return 3;
          }
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 84)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 24) != a2)
  {
    *(_DWORD *)(a1 + 24) = a2;
    int v3 = (int *)(*(void *)(*(void *)(*(void *)(a1 + 16) + 176) + 96) + 12 * a2);
    int v4 = v3[1];
    fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::SetState(*(void *)(a1 + 32), *v3);
    fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::SetState(*(void *)(a1 + 40), v4);
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a1 + 24);
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 48) = a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if (a2)
    {
      uint64_t v2 = (uint64_t *)(a1 + 40);
      int v3 = (uint64_t *)(a1 + 32);
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>(a1, a2, *v2, *v3);
    }
  }
  else if (a2)
  {
    uint64_t v2 = (uint64_t *)(a1 + 32);
    int v3 = (uint64_t *)(a1 + 40);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>(a1, a2, *v2, *v3);
  }
  return 1;
}

BOOL fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  return !*(unsigned char *)(a1 + 48)
      && !*(unsigned char *)(*(void *)(a1 + 32) + 44)
      && *(unsigned char *)(*(void *)(a1 + 40) + 44) == 0;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    return a1 + 52;
  }
  else {
    return a1 + 68;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  if (*(unsigned char *)(result + 48))
  {
    *(unsigned char *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      uint64_t v2 = *(void *)(result + 32);
      uint64_t v1 = *(void *)(result + 40);
    }
    else
    {
      uint64_t v1 = *(void *)(result + 32);
      uint64_t v2 = *(void *)(result + 40);
    }
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>(result, v1, v2);
  }
  return result;
}

void *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  *a1 = off_2626B0;
  uint64_t v2 = a1[4];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[5];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = off_2626B0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 32) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 32) + 16))(*(void *)(a2 + 32), a3);
  *(void *)(a1 + 40) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 40) + 16))(*(void *)(a2 + 40), a3);
  *(unsigned char *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 52) = xmmword_209A50;
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  if (a3)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v6 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    int v7 = fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    *(unsigned char *)(a1 + 84) = 1;
  }
  if (*(_DWORD *)(a1 + 28) == 1) {
    *(int32x2_t *)(a1 + 52) = vrev64_s32(*(int32x2_t *)(a1 + 52));
  }
  return a1;
}

void sub_94170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::Find(a3, a2);
  if (result)
  {
    if (*(_DWORD *)(a1 + 28))
    {
      if (!*(unsigned char *)(a3 + 44)) {
        fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::Value_();
      }
      unsigned int v8 = (int *)(a3 + 28);
    }
    else
    {
      if (!*(unsigned char *)(a3 + 44)) {
        fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::Value_();
      }
      unsigned int v8 = (int *)(a3 + 32);
    }
    fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::Find(a4, *v8);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)(a2 + 28);
  int v7 = (uint64_t *)(a3 + 28);
  while (*(unsigned char *)(a2 + 44))
  {
    if (!*(unsigned char *)(a3 + 44)) {
      *(unsigned char *)(a2 + 44) = 0;
    }
LABEL_6:
    while (*(unsigned char *)(a3 + 44))
    {
      if (!*(unsigned char *)(a2 + 44)) {
        fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::Value_();
      }
      *(unsigned char *)(a3 + 44) = 0;
      int v8 = *(_DWORD *)(a1 + 28);
      BOOL v9 = v8 == 0;
      if (v8) {
        char v10 = v7;
      }
      else {
        char v10 = v6;
      }
      uint64_t v11 = *v10;
      uint64_t v12 = v10[1];
      if (v9) {
        int v13 = v7;
      }
      else {
        int v13 = v6;
      }
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, *(unsigned int *)(a1 + 24), v11, v12, *v13, v13[1]))return 1; {
    }
      }
  }
  if (*(unsigned char *)(a3 + 44)) {
    goto LABEL_6;
  }
  return 0;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a1 + 16);
  int v7 = *(unsigned __int8 **)(v6 + 136);
  if (HIDWORD(a3) == -1)
  {
    if (!v7[33])
    {
      LOBYTE(v7) = v7[34] ^ 1;
      goto LABEL_8;
    }
    return 0;
  }
  if (a5 == -1)
  {
    uint64_t v8 = 0;
    LODWORD(v7) = v7[32];
    if (v7) {
      return v8;
    }
    goto LABEL_8;
  }
  LOBYTE(v7) = 0;
  if (!HIDWORD(a3)) {
    return 0;
  }
LABEL_8:
  unint64_t v12 = __PAIR64__(HIDWORD(a6), HIDWORD(a4));
  char v13 = (char)v7;
  *(_DWORD *)(a1 + 68) = a3;
  *(_DWORD *)(a1 + 72) = HIDWORD(a5);
  float v9 = NAN;
  if (*(float *)&a4 != -INFINITY && *(float *)&a6 != -INFINITY)
  {
    float v9 = INFINITY;
    if (*(float *)&a6 != INFINITY && *(float *)&a4 != INFINITY) {
      float v9 = *(float *)&a4 + *(float *)&a6;
    }
  }
  *(float *)(a1 + 76) = v9;
  uint64_t v8 = 1;
  *(_DWORD *)(a1 + 80) = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(void **)(v6 + 176), (uint64_t *)&v12, 1);
  return v8;
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Start(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 60))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
    {
      *(unsigned char *)(a1 + --*(_DWORD *)(a9 + 60) = 1;
    }
    else if (!*(unsigned char *)(a1 + 60))
    {
      int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
      if (v3 != -1)
      {
        *(_DWORD *)(a1 + 64) = v3;
        *(unsigned char *)(a1 + --*(_DWORD *)(a9 + 60) = 1;
        if (*(_DWORD *)(a1 + 68) <= v3) {
          *(_DWORD *)(a1 + 68) = v3 + 1;
        }
      }
    }
  }
  return *(unsigned int *)(a1 + 64);
}

float fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Final(uint64_t *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::LogWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>>>>::HasFinal((uint64_t)a1, a2) & 1) == 0)
  {
    float v4 = (*(float (**)(uint64_t *, uint64_t))(*a1 + 72))(a1, a2);
    Mutableint State = (float *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(a1[15], a2);
    float *MutableState = v4;
    *((_DWORD *)MutableState + 14) |= 9u;
  }
  uint64_t v6 = a1[15];
  if (*(_DWORD *)(v6 + 92) == a2) {
    uint64_t v7 = v6 + 96;
  }
  else {
    uint64_t v7 = *(void *)(v6 + 8) + 8 * ((int)a2 + 1);
  }
  return **(float **)v7;
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumArcs(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::LogWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 92) == a2) {
    uint64_t v5 = v4 + 96;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return (uint64_t)(*(void *)(*(void *)v5 + 32) - *(void *)(*(void *)v5 + 24)) >> 4;
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumInputEpsilons(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::LogWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 92) == a2) {
    uint64_t v5 = v4 + 96;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 8);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumOutputEpsilons(void *a1, uint64_t a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::LogWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(void *, uint64_t))(*a1 + 48))(a1, a2); {
  uint64_t v4 = a1[15];
  }
  if (*(_DWORD *)(v4 + 92) == a2) {
    uint64_t v5 = v4 + 96;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * ((int)a2 + 1);
  }
  return *(void *)(*(void *)v5 + 16);
}

void *fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComposeFst(void *a1, uint64_t a2, int a3)
{
  *a1 = off_262448;
  a1[1] = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (a3)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    uint64_t v6 = (_DWORD *)a1[1];
    if (v6)
    {
      int v7 = v6[14] - 1;
      v6[14] = v7;
      if (!v7) {
        (*(void (**)(_DWORD *))(*(void *)v6 + 8))(v6);
      }
    }
    a1[1] = v5;
  }
  else
  {
    fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetImpl((uint64_t)a1, v4, 0);
  }
  return a1;
}

void sub_947B4(_Unwind_Exception *a1)
{
  fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ImplToFst(v1);
  _Unwind_Resume(a1);
}

void *fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ImplToFst(void *a1)
{
  *a1 = off_262748;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Done(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68)) {
    return 0;
  }
  uint64_t v5 = fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::PoolAllocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>>>::MinUnexpandedState(v3);
  if ((int)v5 >= *(_DWORD *)(*(void *)(a1 + 16) + 68)) {
    return 1;
  }
  uint64_t v6 = v5;
  do
  {
    fst::ArcIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::ArcIterator(&v20, *(void *)(a1 + 8), v6);
    unint64_t v7 = v21;
    uint64_t v8 = *(void *)(v20 + 24);
    uint64_t v9 = *(void *)(v20 + 32) - v8;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v21 < v9 >> 4)
    {
      uint64_t v11 = v9 >> 4;
      int v12 = *(_DWORD *)(v10 + 68);
      char v13 = (int *)(v8 + 16 * v21 + 12);
      do
      {
        int v15 = *v13;
        v13 += 4;
        int v14 = v15;
        if (v12 <= v15)
        {
          int v12 = v14 + 1;
          *(_DWORD *)(v10 + 68) = v14 + 1;
        }
        ++v7;
      }
      while (v11 != v7);
      unint64_t v21 = v11;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::LogWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>>>>::SetExpandedState(v10, v6);
    int v16 = *(_DWORD *)(a1 + 24);
    uint64_t v17 = *(void *)(a1 + 16);
    int v18 = *(_DWORD *)(v17 + 68);
    --*(_DWORD *)(v20 + 60);
    BOOL v4 = v16 >= v18;
    if (v16 < v18) {
      break;
    }
    uint64_t v6 = fst::CacheBaseImpl<fst::CacheState<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::PoolAllocator<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>>>,fst::DefaultCacheStore<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>>>::MinUnexpandedState(v17);
  }
  while ((int)v6 < *(_DWORD *)(*(void *)(a1 + 16) + 68));
  return v4;
}

void sub_9495C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *fst::ArcIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::ArcIterator(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  a1[1] = 0;
  Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>>::GetMutableState(*(void *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 15);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::LogWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>>>>::HasArcs(*(void *)(a2 + 8), a3) & 1) == 0)(*(void (**)(void, uint64_t))(**(void **)(a2 + 8) + 48))(*(void *)(a2 + 8), a3); {
  return a1;
  }
}

void sub_94A04(_Unwind_Exception *a1)
{
  --*(_DWORD *)(*(void *)v1 + 60);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InitArcIterator(uint64_t a1, uint64_t a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::LogWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>>>>::HasArcs(a1, a2) & 1) == 0)(*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2); {

  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::LogWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::LogWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::LogWeightTpl<float>>>>::InitArcIterator(a1, a2, a3);
}

uint64_t fst::StateMap<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, void **a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    unint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)*a2 + 24))();
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 160))(a1, v6);
    if ((*(int (**)(uint64_t))(*(void *)a1 + 144))(a1) >= 1)
    {
      uint64_t v7 = 0;
      do
      {
        fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState(a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 224))(a1, v7);
        for (unint64_t i = (unint64_t)a2[5]; ; a2[5] = (void *)i)
        {
          uint64_t v9 = a2[2];
          if (i >= ((unsigned char *)a2[3] - v9) >> 4) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 192))(a1, v7, &v9[16 * i]);
          unint64_t i = (unint64_t)a2[5] + 1;
        }
        (*(void (**)(void *, uint64_t))(*(void *)*a2 + 32))(*a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 168))(a1, v7);
        uint64_t v7 = (v7 + 1);
      }
      while ((int)v7 < (*(int (**)(uint64_t))(*(void *)a1 + 144))(a1));
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 176);
    return v10(a1, v5 & 0x3FFF0FFF0007 | (((v5 >> 16) & 1) << 28) | 0x40000000, 0x3FFFFFFF0007);
  }
  return result;
}

void fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState(void **a1, uint64_t a2)
{
  a1[5] = 0;
  BOOL v4 = a1 + 2;
  a1[3] = a1[2];
  unint64_t v5 = (*(uint64_t (**)(void *))(*(void *)*a1 + 40))(*a1);
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::reserve(v4, v5);
  uint64_t v6 = *a1;
  unint64_t v26 = 0;
  (*(void (**)(void *, uint64_t, void *))(*(void *)v6 + 128))(v6, a2, v24);
  while (1)
  {
    if (!v24[0])
    {
      if (v26 >= v24[2]) {
        goto LABEL_29;
      }
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(void))(*(void *)v24[0] + 24))(v24[0])) {
      break;
    }
    if (v24[0])
    {
      uint64_t v7 = (_OWORD *)(*(uint64_t (**)(void))(*(void *)v24[0] + 32))();
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v7 = (_OWORD *)(v24[1] + 16 * v26);
LABEL_8:
    uint64_t v9 = (char *)a1[3];
    unint64_t v8 = (unint64_t)a1[4];
    if ((unint64_t)v9 >= v8)
    {
      uint64_t v11 = (v9 - (unsigned char *)*v4) >> 4;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 60) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v13 = v8 - (void)*v4;
      if (v13 >> 3 > v12) {
        unint64_t v12 = v13 >> 3;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14) {
        int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::TransitionModel::Tuple>>((uint64_t)(a1 + 4), v14);
      }
      else {
        int v15 = 0;
      }
      int v16 = &v15[16 * v11];
      *(_OWORD *)int v16 = *v7;
      int v18 = (char *)a1[2];
      uint64_t v17 = (char *)a1[3];
      char v19 = v16;
      if (v17 != v18)
      {
        do
        {
          *((_OWORD *)v19 - 1) = *((_OWORD *)v17 - 1);
          v19 -= 16;
          v17 -= 16;
        }
        while (v17 != v18);
        uint64_t v17 = (char *)*v4;
      }
      uint64_t v10 = v16 + 16;
      a1[2] = v19;
      a1[3] = v16 + 16;
      a1[4] = &v15[16 * v14];
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *(_OWORD *)uint64_t v9 = *v7;
      uint64_t v10 = v9 + 16;
    }
    a1[3] = v10;
    if (v24[0]) {
      (*(void (**)(void))(*(void *)v24[0] + 40))(v24[0]);
    }
    else {
      ++v26;
    }
  }
  if (v24[0])
  {
    (*(void (**)(void))(*(void *)v24[0] + 8))();
    goto LABEL_31;
  }
LABEL_29:
  if (v25) {
    --*v25;
  }
LABEL_31:
  unint64_t v20 = (unint64_t)a1[2];
  unint64_t v21 = (int *)a1[3];
  unint64_t v22 = 126 - 2 * __clz((uint64_t)((uint64_t)v21 - v20) >> 4);
  if (v21 == (int *)v20) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = v22;
  }
  std::__introsort<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*,false>(v20, v21, (uint64_t)v24, v23, 1);
}

void sub_94FF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*,false>(unint64_t a1, int *a2, uint64_t a3, uint64_t a4, char a5)
{
uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t result, _DWORD *a2)
{
  if ((_DWORD *)result != a2)
  {
    int v2 = (_DWORD *)(result + 16);
    if ((_DWORD *)(result + 16) != a2)
    {
      uint64_t v3 = 0;
      BOOL v4 = (_DWORD *)result;
      do
      {
        char v5 = v2;
        int v6 = v4[5];
        if (v6 < v4[1])
        {
          int v7 = *v5;
          uint64_t v8 = *((void *)v4 + 3);
          uint64_t v9 = v3;
          while (1)
          {
            *(_OWORD *)(result + v9 + 16) = *(_OWORD *)(result + v9);
            if (!v9) {
              break;
            }
            int v10 = *(_DWORD *)(result + v9 - 12);
            v9 -= 16;
            if (v6 >= v10)
            {
              uint64_t v11 = result + v9 + 16;
              goto LABEL_10;
            }
          }
          uint64_t v11 = result;
LABEL_10:
          *(_DWORD *)uint64_t v11 = v7;
          *(_DWORD *)(v11 + 4) = v6;
          *(void *)(v11 + 8) = v8;
        }
        int v2 = v5 + 4;
        v3 += 16;
        BOOL v4 = v5;
      }
      while (v5 + 4 != a2);
    }
  }
  return result;
}

_DWORD *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(_DWORD *result, _DWORD *a2)
{
  if (result != a2)
  {
    int v2 = result + 4;
    while (v2 != a2)
    {
      uint64_t v3 = v2;
      int v4 = result[5];
      if (v4 < result[1])
      {
        int v5 = *v3;
        uint64_t v6 = *((void *)result + 3);
        int v7 = v3;
        do
        {
          *(_OWORD *)int v7 = *((_OWORD *)v7 - 1);
          int v8 = *(v7 - 7);
          v7 -= 4;
        }
        while (v4 < v8);
        *int v7 = v5;
        v7[1] = v4;
        *((void *)v7 + 1) = v6;
      }
      int v2 = v3 + 4;
      uint64_t result = v3;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(long long *a1, long long *a2, long long *a3)
{
  int v3 = *((_DWORD *)a2 + 1);
  int v4 = *((_DWORD *)a3 + 1);
  if (v3 < *((_DWORD *)a1 + 1))
  {
    if (v4 < v3)
    {
      long long v5 = *a1;
      *a1 = *a3;
      *a3 = v5;
      return 1;
    }
    long long v8 = *a1;
    *a1 = *a2;
    *a2 = v8;
    if (*((_DWORD *)a3 + 1) >= *((_DWORD *)a2 + 1)) {
      return 1;
    }
    long long v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    return 2;
  }
  if (v4 < v3)
  {
    long long v6 = *a2;
    *a2 = *a3;
    *a3 = v6;
    if (*((_DWORD *)a2 + 1) >= *((_DWORD *)a1 + 1)) {
      return 1;
    }
    long long v7 = *a1;
    *a1 = *a2;
    *a2 = v7;
    return 2;
  }
  return 0;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>> *,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>(int *a1, _OWORD *a2)
{
  int v2 = a1[1];
  if (v2 >= *((_DWORD *)a2 - 3))
  {
    unint64_t v6 = (unint64_t)(a1 + 4);
    do
    {
      unint64_t v4 = v6;
      if (v6 >= (unint64_t)a2) {
        break;
      }
      int v7 = *(_DWORD *)(v6 + 4);
      v6 += 16;
    }
    while (v2 >= v7);
  }
  else
  {
    int v3 = a1;
    do
    {
      unint64_t v4 = (unint64_t)(v3 + 4);
      int v5 = v3[5];
      v3 += 4;
    }
    while (v2 >= v5);
  }
  if (v4 >= (unint64_t)a2)
  {
    long long v8 = a2;
  }
  else
  {
    do
    {
      long long v8 = a2 - 1;
      int v9 = *((_DWORD *)a2-- - 3);
    }
    while (v2 < v9);
  }
  int v10 = *a1;
  uint64_t v11 = *((void *)a1 + 1);
  while (v4 < (unint64_t)v8)
  {
    long long v15 = *(_OWORD *)v4;
    *(_OWORD *)unint64_t v4 = *v8;
    *long long v8 = v15;
    do
    {
      int v12 = *(_DWORD *)(v4 + 20);
      v4 += 16;
    }
    while (v2 >= v12);
    do
      int v13 = *((_DWORD *)v8-- - 3);
    while (v2 < v13);
  }
  if ((int *)(v4 - 16) != a1) {
    *(_OWORD *)a1 = *(_OWORD *)(v4 - 16);
  }
  *(_DWORD *)(v4 - 16) = v10;
  *(_DWORD *)(v4 - 12) = v2;
  *(void *)(v4 - 8) = v11;
  return v4;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>> *,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &>(int *a1, _OWORD *a2)
{
  uint64_t v2 = 0;
  int v3 = *a1;
  int v4 = a1[1];
  uint64_t v5 = *((void *)a1 + 1);
  do
  {
    int v6 = a1[v2 + 5];
    v2 += 4;
  }
  while (v6 < v4);
  unint64_t v7 = (unint64_t)&a1[v2];
  if (v2 == 4)
  {
    while (v7 < (unint64_t)a2)
    {
      long long v8 = a2 - 1;
      int v10 = *((_DWORD *)a2-- - 3);
      if (v10 < v4) {
        goto LABEL_9;
      }
    }
    long long v8 = a2;
  }
  else
  {
    do
    {
      long long v8 = a2 - 1;
      int v9 = *((_DWORD *)a2-- - 3);
    }
    while (v9 >= v4);
  }
LABEL_9:
  unint64_t v11 = v7;
  if (v7 < (unint64_t)v8)
  {
    int v12 = v8;
    do
    {
      long long v13 = *(_OWORD *)v11;
      *(_OWORD *)unint64_t v11 = *v12;
      _OWORD *v12 = v13;
      do
      {
        int v14 = *(_DWORD *)(v11 + 20);
        v11 += 16;
      }
      while (v14 < v4);
      do
        int v15 = *((_DWORD *)v12-- - 3);
      while (v15 >= v4);
    }
    while (v11 < (unint64_t)v12);
  }
  if ((int *)(v11 - 16) != a1) {
    *(_OWORD *)a1 = *(_OWORD *)(v11 - 16);
  }
  *(_DWORD *)(v11 - 16) = v3;
  *(_DWORD *)(v11 - 12) = v4;
  *(void *)(v11 - 8) = v5;
  return v11 - 16;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 12) < *(_DWORD *)(a1 + 4))
      {
        long long v6 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)(a2 - 16) = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((long long *)a1, (long long *)(a1 + 16), (long long *)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((__n128 *)a1, (__n128 *)(a1 + 16), (__n128 *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)(a2 - 16));
      return 1;
    default:
      uint64_t v7 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((long long *)a1, (long long *)(a1 + 16), (long long *)(a1 + 32));
      uint64_t v8 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    int v11 = *(_DWORD *)(v8 + 4);
    if (v11 < *(_DWORD *)(v7 + 4))
    {
      int v12 = *(_DWORD *)v8;
      uint64_t v13 = *(void *)(v8 + 8);
      uint64_t v14 = v9;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        int v15 = *(_DWORD *)(a1 + v14 + 20);
        v14 -= 16;
        if (v11 >= v15)
        {
          uint64_t v16 = a1 + v14 + 48;
          goto LABEL_12;
        }
      }
      uint64_t v16 = a1;
LABEL_12:
      *(_DWORD *)uint64_t v16 = v12;
      *(_DWORD *)(v16 + 4) = v11;
      *(void *)(v16 + 8) = v13;
      if (++v10 == 8) {
        return v8 + 16 == a2;
      }
    }
    uint64_t v7 = v8;
    v9 += 16;
    v8 += 16;
    if (v8 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((long long *)a1, (long long *)a2, (long long *)a3);
  if (*(_DWORD *)(a4 + 4) < *(_DWORD *)(a3 + 4))
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    if (*(_DWORD *)(a3 + 4) < *(_DWORD *)(a2 + 4))
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*(_DWORD *)(a2 + 4) < *(_DWORD *)(a1 + 4))
      {
        __n128 result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4).n128_u64[0];
  if ((signed __int32)a5->n128_u32[1] < (signed __int32)a4->n128_u32[1])
  {
    __n128 result = *a4;
    *a4 = *a5;
    *a5 = result;
    if ((signed __int32)a4->n128_u32[1] < (signed __int32)a3->n128_u32[1])
    {
      __n128 result = *a3;
      *a3 = *a4;
      *a4 = result;
      if ((signed __int32)a3->n128_u32[1] < (signed __int32)a2->n128_u32[1])
      {
        __n128 result = *a2;
        *a2 = *a3;
        *a3 = result;
        if ((signed __int32)a2->n128_u32[1] < (signed __int32)a1->n128_u32[1])
        {
          __n128 result = *a1;
          *a1 = *a2;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(int *a1, int *a2, int *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    long long v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = &a1[4 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        if (v14[1] < a1[1])
        {
          long long v15 = *(_OWORD *)v14;
          *(_OWORD *)uint64_t v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 4;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v16 = (unint64_t)v8 >> 4;
      do
      {
        uint64_t v17 = 0;
        long long v26 = *(_OWORD *)a1;
        unint64_t v18 = a1;
        do
        {
          char v19 = &v18[4 * v17 + 4];
          uint64_t v20 = (2 * v17) | 1;
          uint64_t v21 = 2 * v17 + 2;
          if (v21 < v16)
          {
            int v22 = v19[1];
            int v23 = v19[5];
            v19 += 4 * (v22 < v23);
            if (v22 < v23) {
              uint64_t v20 = v21;
            }
          }
          *(_OWORD *)unint64_t v18 = *(_OWORD *)v19;
          unint64_t v18 = v19;
          uint64_t v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 4;
        if (v19 == v6)
        {
          *(_OWORD *)char v19 = v26;
        }
        else
        {
          *(_OWORD *)char v19 = *(_OWORD *)v6;
          *(_OWORD *)long long v6 = v26;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>((uint64_t)a1, (uint64_t)(v19 + 4), a4, ((char *)(v19 + 4) - (char *)a1) >> 4);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (int *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        int v10 = v8[1];
        int v11 = v8[5];
        v8 += 4 * (v10 < v11);
        if (v10 < v11) {
          uint64_t v7 = v9;
        }
      }
      int v12 = a4[1];
      if (v8[1] >= v12)
      {
        int v13 = *a4;
        uint64_t v14 = *((void *)a4 + 1);
        do
        {
          long long v15 = a4;
          a4 = v8;
          _OWORD *v15 = *(_OWORD *)v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v16 = (2 * v7) | 1;
          uint64_t v8 = (int *)(result + 16 * v16);
          uint64_t v17 = 2 * v7 + 2;
          if (v17 < a3)
          {
            int v18 = v8[1];
            int v19 = v8[5];
            v8 += 4 * (v18 < v19);
            if (v18 < v19) {
              uint64_t v16 = v17;
            }
          }
          uint64_t v7 = v16;
        }
        while (v8[1] >= v12);
        *a4 = v13;
        a4[1] = v12;
        *((void *)a4 + 1) = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    int v6 = *(_DWORD *)(result + 16 * (v4 >> 1) + 4);
    int v7 = *(_DWORD *)(a2 - 12);
    if (v6 < v7)
    {
      int v10 = *(_DWORD *)(a2 - 16);
      uint64_t v8 = a2 - 16;
      int v9 = v10;
      uint64_t v11 = *(void *)(v8 + 8);
      do
      {
        int v12 = (_OWORD *)v8;
        uint64_t v8 = result + 16 * v5;
        _OWORD *v12 = *(_OWORD *)v8;
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
      }
      while (*(_DWORD *)(result + 16 * v5 + 4) < v7);
      *(_DWORD *)uint64_t v8 = v9;
      *(_DWORD *)(v8 + 4) = v7;
      *(void *)(v8 + 8) = v11;
    }
  }
  return result;
}

void fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TableMatcher(void *a1)
{
  *a1 = off_262898;
  operator new();
}

void sub_95DE0()
{
}

void *fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~TableMatcher(void *a1)
{
  *a1 = off_262898;
  uint64_t v2 = (_DWORD *)a1[1];
  int v3 = v2[2] - 1;
  v2[2] = v3;
  if (!v3) {
    (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~TableMatcher(void *a1)
{
  *a1 = off_262898;
  uint64_t v1 = (_DWORD *)a1[1];
  int v2 = v1[2] - 1;
  v1[2] = v2;
  if (!v2) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }

  operator delete();
}

void fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Copy()
{
}

uint64_t fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Type(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))();
}

uint64_t fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::GetFst(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

uint64_t fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

void *fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetState_(uint64_t a1, uint64_t a2)
{
  return fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetState(*(void *)(a1 + 8), a2);
}

uint64_t fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Find_(uint64_t a1, int a2)
{
  return fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Find(*(void *)(a1 + 8), a2);
}

BOOL fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Done_(uint64_t a1)
{
  return fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Done(*(void *)(a1 + 8));
}

uint64_t fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Value_(uint64_t a1)
{
  return fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Value(*(void *)(a1 + 8));
}

uint64_t fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Next_(uint64_t a1)
{
  return fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Next(*(void *)(a1 + 8));
}

void fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::TableMatcherImpl(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  *(void *)a1 = off_262930;
  *(_DWORD *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 12) = a3;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 80))(a2, 0);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 16) = v8;
  if (a3) {
    int v9 = 0;
  }
  else {
    int v9 = -1;
  }
  if (a3) {
    int v10 = -1;
  }
  else {
    int v10 = 0;
  }
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v10;
  *(void *)(a1 + 40) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = *a4;
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SortedMatcher(a1 + 96, a2, a3, 1);
}

void sub_961E0(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 72) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~TableMatcherImpl(uint64_t a1)
{
  fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~TableMatcherImpl(a1);

  operator delete();
}

uint64_t fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SortedMatcher(uint64_t a1, uint64_t a2, int a3, int a4)
{
  *(void *)a1 = off_2629C8;
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 80))(a2, 0);
  *(_DWORD *)(a1 + 16) = -1;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = a3;
  *(_DWORD *)(a1 + 36) = a4;
  *(_DWORD *)(a1 + 40) = -1;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_209A50;
  *(unsigned char *)(a1 + 74) = 0;
  fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MemoryPool((void *)(a1 + 80), 1);
}

void sub_963DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MemoryPool(v18);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MemoryPool(void *a1)
{
  *a1 = off_262A60;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::~MemoryArena(a1 + 1);

  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~SortedMatcher(void *a1)
{
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~SortedMatcher(a1);

  operator delete();
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Copy()
{
}

void sub_9650C()
{
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Type(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 32);
  if (v2 == 3) {
    return 3;
  }
  if (v2) {
    uint64_t v6 = 0x40000000;
  }
  else {
    uint64_t v6 = 0x10000000;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if (v2) {
    uint64_t v8 = 3221225472;
  }
  else {
    uint64_t v8 = 805306368;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 64))(v7, v8, a2);
  if ((v9 & v6) != 0) {
    return *(unsigned int *)(a1 + 32);
  }
  uint64_t v10 = 0x80000000;
  if (!v2) {
    uint64_t v10 = 0x20000000;
  }
  if ((v9 & v10) != 0) {
    return 3;
  }
  else {
    return 4;
  }
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 74)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

void fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = off_262A60;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_96650(_Unwind_Exception *a1)
{
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~MemoryPool(void *a1)
{
  *a1 = off_262A60;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::~MemoryArena(a1 + 1);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);

  operator delete();
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = off_262AA0;
  a1[1] = 48 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_96760(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::~MemoryArena(a1);

  operator delete();
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::~MemoryArena(void *a1)
{
  *a1 = off_262AA0;
  int v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    if (i[2]) {
      operator delete[]();
    }
  }
  std::__list_imp<char *>::clear(v2);

  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SortedMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = off_2629C8;
  *(void *)(a1 + 8) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 8) + 80))(*(void *)(a2 + 8), a3);
  *(_DWORD *)(a1 + 16) = -1;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = -1;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::MemoryPool((void *)(a1 + 80), 1);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 16) != a2)
  {
    uint64_t v3 = result;
    *(_DWORD *)(result + 16) = a2;
    if (*(_DWORD *)(result + 32) == 3)
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      unint64_t v4 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
      unint64_t v5 = fst::cerr(v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"SortedMatcher: bad match type", 29);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      *(unsigned char *)(v3 + 74) = 1;
    }
    uint64_t v6 = *(void **)(v3 + 24);
    if (v6)
    {
      fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Reinit(v6, *(void *)(v3 + 8), a2);
      uint64_t v7 = *(void **)(v3 + 24);
    }
    else
    {
      uint64_t v7 = *(void **)(v3 + 136);
      if (v7)
      {
        *(void *)(v3 + 136) = v7[5];
      }
      else
      {
        uint64_t v7 = (void *)fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::Allocate((void *)(v3 + 88), 1);
        v7[5] = 0;
      }
      uint64_t v8 = *(void *)(v3 + 8);
      v7[4] = 0;
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v8 + 128))(v8, a2, v7);
      *(void *)(v3 + 24) = v7;
    }
    if (*v7) {
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v7 + 80))(*v7, 16, 16);
    }
    __n128 result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 8) + 40))(*(void *)(v3 + 8), a2);
    *(void *)(v3 + 48) = result;
    *(_DWORD *)(v3 + 68) = a2;
  }
  return result;
}

void sub_96AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Reinit(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (!v6) {
    goto LABEL_5;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, a3);
  if (result) {
    return result;
  }
  if (*a1)
  {
    (*(void (**)(void))(*(void *)*a1 + 8))(*a1);
  }
  else
  {
LABEL_5:
    uint64_t v8 = (_DWORD *)a1[3];
    if (v8) {
      --*v8;
    }
  }
  a1[4] = 0;
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 128);

  return v9(a2, a3, a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::Allocate(void *a1, uint64_t a2)
{
  uint64_t v3 = 48 * a2;
  unint64_t v4 = a1[1];
  if (192 * a2 > v4) {
    operator new[]();
  }
  uint64_t v5 = a1[2];
  if (v5 + v3 > v4) {
    operator new[]();
  }
  uint64_t v6 = *(void *)(a1[4] + 16) + v5;
  a1[2] = v5 + v3;
  return v6;
}

BOOL fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Find(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 73) = 1;
  if (*(unsigned char *)(a1 + 74))
  {
    BOOL result = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 40) = -1;
  }
  else
  {
    *(unsigned char *)(a1 + 72) = a2 == 0;
    if (a2 == -1) {
      int v4 = 0;
    }
    else {
      int v4 = a2;
    }
    *(_DWORD *)(a1 + 40) = v4;
    return (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Search(a1) & 1) != 0
        || *(unsigned char *)(a1 + 72) != 0;
  }
  return result;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Search(uint64_t a1)
{
  uint64_t v2 = **(void **)(a1 + 24);
  if (v2)
  {
    if (*(_DWORD *)(a1 + 32)) {
      uint64_t v3 = 2;
    }
    else {
      uint64_t v3 = 1;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 80))(v2, v3, 15);
  }
  if (*(_DWORD *)(a1 + 40) < *(_DWORD *)(a1 + 36))
  {
    int v4 = *(void **)(a1 + 24);
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 56))(*v4);
    }
    else {
      v4[4] = 0;
    }
    while (1)
    {
      int v19 = *(void **)(a1 + 24);
      if (*v19)
      {
        if ((*(uint64_t (**)(void))(*(void *)*v19 + 24))(*v19)) {
          return 0;
        }
      }
      else if (v19[4] >= v19[2])
      {
        return 0;
      }
      uint64_t v20 = *(uint64_t **)(a1 + 24);
      uint64_t v21 = *v20;
      if (*(_DWORD *)(a1 + 32))
      {
        uint64_t v22 = v21 ? (*(uint64_t (**)(uint64_t))(*(void *)v21 + 32))(v21) : v20[1] + 16 * v20[4];
        int v23 = (_DWORD *)(v22 + 4);
      }
      else
      {
        int v23 = (_DWORD *)(v21 ? (*(uint64_t (**)(uint64_t))(*(void *)v21 + 32))(v21) : v20[1] + 16 * v20[4]);
      }
      int v24 = *(_DWORD *)(a1 + 40);
      int v25 = *v23 <= v24 ? 0 : 7;
      if (*v23 == v24) {
        int v25 = 1;
      }
      if (v25) {
        break;
      }
      long long v26 = *(void **)(a1 + 24);
      if (*v26) {
        (*(void (**)(void))(*(void *)*v26 + 40))(*v26);
      }
      else {
        ++v26[4];
      }
    }
    uint64_t result = 0;
    if (v25 == 1) {
      return 1;
    }
    return result;
  }
  unint64_t v5 = *(void *)(a1 + 48);
  if (!v5)
  {
    unint64_t v6 = 0;
LABEL_68:
    unint64_t v28 = *(uint64_t **)(a1 + 24);
    uint64_t result = *v28;
    if (*v28)
    {
      (*(void (**)(uint64_t, unint64_t))(*(void *)result + 64))(result, v6);
      return 0;
    }
    else
    {
      v28[4] = v6;
    }
    return result;
  }
  unint64_t v6 = 0;
  while (1)
  {
    unint64_t v7 = (v5 + v6) >> 1;
    uint64_t v8 = *(void **)(a1 + 24);
    if (*v8) {
      (*(void (**)(void, unint64_t))(*(void *)*v8 + 64))(*v8, (v5 + v6) >> 1);
    }
    else {
      v8[4] = v7;
    }
    uint64_t v9 = *(uint64_t **)(a1 + 24);
    uint64_t v10 = *v9;
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v11 = v10 ? (*(uint64_t (**)(uint64_t))(*(void *)v10 + 32))(v10) : v9[1] + 16 * v9[4];
      int v12 = (_DWORD *)(v11 + 4);
    }
    else
    {
      int v12 = (_DWORD *)(v10 ? (*(uint64_t (**)(uint64_t))(*(void *)v10 + 32))(v10) : v9[1] + 16 * v9[4]);
    }
    int v13 = *(_DWORD *)(a1 + 40);
    if (*v12 <= v13) {
      break;
    }
    unint64_t v5 = (v5 + v6) >> 1;
LABEL_25:
    if (v6 >= v5) {
      goto LABEL_68;
    }
  }
  if (*v12 < v13)
  {
    unint64_t v6 = v7 + 1;
    goto LABEL_25;
  }
  while (v7 > v6)
  {
    uint64_t v14 = *(void **)(a1 + 24);
    --v7;
    if (*v14) {
      (*(void (**)(void, unint64_t))(*(void *)*v14 + 64))(*v14, v7);
    }
    else {
      v14[4] = v7;
    }
    long long v15 = *(uint64_t **)(a1 + 24);
    uint64_t v16 = *v15;
    if (*(_DWORD *)(a1 + 32))
    {
      if (v16) {
        uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 32))(v16);
      }
      else {
        uint64_t v17 = v15[1] + 16 * v15[4];
      }
      int v18 = (_DWORD *)(v17 + 4);
    }
    else if (v16)
    {
      int v18 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 32))(v16);
    }
    else
    {
      int v18 = (_DWORD *)(v15[1] + 16 * v15[4]);
    }
    if (*v18 != *(_DWORD *)(a1 + 40))
    {
      uint64_t v29 = *(void **)(a1 + 24);
      unint64_t v30 = v7 + 1;
      if (*v29) {
        (*(void (**)(void, unint64_t))(*(void *)*v29 + 64))(*v29, v30);
      }
      else {
        v29[4] = v30;
      }
      return 1;
    }
  }
  return 1;
}

BOOL fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72)) {
    return 0;
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (*v3)
  {
    if ((*(uint64_t (**)(void))(*(void *)*v3 + 24))(*v3)) {
      return 1;
    }
  }
  else if (v3[4] >= v3[2])
  {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 73)) {
    return 0;
  }
  int v4 = *(_DWORD *)(a1 + 32);
  uint64_t v5 = **(void **)(a1 + 24);
  if (v5)
  {
    if (v4) {
      uint64_t v6 = 2;
    }
    else {
      uint64_t v6 = 1;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 80))(v5, v6, 15);
    int v4 = *(_DWORD *)(a1 + 32);
  }
  unint64_t v7 = *(uint64_t **)(a1 + 24);
  uint64_t v8 = *v7;
  if (v4)
  {
    if (v8) {
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 32))(v8);
    }
    else {
      uint64_t v9 = v7[1] + 16 * v7[4];
    }
    uint64_t v10 = (_DWORD *)(v9 + 4);
  }
  else if (v8)
  {
    uint64_t v10 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 32))(v8);
  }
  else
  {
    uint64_t v10 = (_DWORD *)(v7[1] + 16 * v7[4]);
  }
  return *v10 != *(_DWORD *)(a1 + 40);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Value(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72)) {
    return a1 + 56;
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (!*v3) {
    return v3[1] + 16 * v3[4];
  }
  (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v3 + 80))(*v3, 15, 15);
  uint64_t v3 = *(void **)(a1 + 24);
  if (!*v3) {
    return v3[1] + 16 * v3[4];
  }
  int v4 = *(uint64_t (**)(void))(*(void *)*v3 + 32);

  return v4();
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Next(uint64_t result)
{
  if (*(unsigned char *)(result + 72))
  {
    *(unsigned char *)(result + 72) = 0;
  }
  else
  {
    uint64_t v1 = *(uint64_t **)(result + 24);
    uint64_t result = *v1;
    if (*v1) {
      return (*(uint64_t (**)(void))(*(void *)result + 40))();
    }
    else {
      ++v1[4];
    }
  }
  return result;
}

void *fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~SortedMatcher(void *a1)
{
  *a1 = off_2629C8;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    if (*v2)
    {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    else
    {
      uint64_t v3 = (_DWORD *)v2[3];
      if (v3) {
        --*v3;
      }
    }
    v2[5] = a1[17];
    a1[17] = v2;
  }
  uint64_t v4 = a1[1];
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  a1[10] = off_262A60;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Link>::~MemoryArena(a1 + 11);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1 + 10);
  return a1;
}

uint64_t fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~TableMatcherImpl(uint64_t a1)
{
  *(void *)a1 = off_262930;
  if (*(_DWORD *)(a1 + 8)) {
    __assert_rtn("~TableMatcherImpl", "table-matcher.h", 89, "RefCount() == 0");
  }
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 != v3)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v3 + 8 * v4);
      if (v5) {
        BOOL v6 = v5 == 24;
      }
      else {
        BOOL v6 = 1;
      }
      if (!v6)
      {
        unint64_t v7 = *(void **)v5;
        if (*(void *)v5)
        {
          *(void *)(v5 + 8) = v7;
          operator delete(v7);
        }
        operator delete();
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  uint64_t v8 = *(void **)(a1 + 48);
  if (v8)
  {
    if (*v8)
    {
      (*(void (**)(void))(*(void *)*v8 + 8))(*v8);
    }
    else
    {
      uint64_t v9 = (_DWORD *)v8[3];
      if (v9) {
        --*v9;
      }
    }
    operator delete();
  }
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~SortedMatcher((void *)(a1 + 96));
  uint64_t v11 = *(void **)(a1 + 64);
  if (v11)
  {
    *(void *)(a1 + 72) = v11;
    operator delete(v11);
  }
  return a1;
}

void *fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetState(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)(a1 + 48);
  if (v4)
  {
    if (*v4)
    {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    else
    {
      uint64_t v5 = (_DWORD *)v4[3];
      if (v5) {
        --*v5;
      }
    }
    operator delete();
  }
  if (*(_DWORD *)(a1 + 12) == 3)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    BOOL v6 = fst::LogMessage::LogMessage((fst *)&v23, (uint64_t)&__p);
    unint64_t v7 = fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"TableMatcher: bad match type", 28);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v23);
    if (v20 < 0) {
      operator delete(__p);
    }
  }
  uint64_t v8 = *(void *)(a1 + 64);
  *(_DWORD *)(a1 + 56) = a2;
  if ((int)a2 >= (unint64_t)((*(void *)(a1 + 72) - v8) >> 3))
  {
    if ((a2 & 0x80000000) != 0) {
      fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetState();
    }
    __p = 0;
    std::vector<fst::MemoryPoolBase *>::resize(a1 + 64, (a2 + 1), &__p);
    uint64_t v8 = *(void *)(a1 + 64);
  }
  uint64_t v9 = *(void *)(v8 + 8 * (int)a2);
  if (v9)
  {
    if (v9 != 24) {
      goto LABEL_15;
    }
    return (void *)fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState(a1 + 96, a2);
  }
  int v10 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16), a2);
  int v11 = v10;
  if (!v10 || *(_DWORD *)(a1 + 92) > v10)
  {
    *(void *)(v8 + 8 * (int)a2) = 24;
    return (void *)fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState(a1 + 96, a2);
  }
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v22 = 0;
  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v13 + 128))(v13, a2, &__p);
  if (__p)
  {
    (*(void (**)(void))(*(void *)__p + 80))();
    uint64_t v14 = v11 - 1;
    if (__p)
    {
      (*(void (**)(void *, uint64_t))(*(void *)__p + 64))(__p, v14);
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v14 = v11 - 1;
  }
  uint64_t v22 = v14;
LABEL_25:
  if (*(_DWORD *)(a1 + 12) == 1)
  {
    if (__p) {
      uint64_t v15 = (*(uint64_t (**)(void))(*(void *)__p + 32))();
    }
    else {
      uint64_t v15 = v19 + 16 * v22;
    }
    uint64_t v16 = (_DWORD *)(v15 + 4);
  }
  else if (__p)
  {
    uint64_t v16 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)__p + 32))();
  }
  else
  {
    uint64_t v16 = (_DWORD *)(v19 + 16 * v22);
  }
  float v17 = *(float *)(a1 + 88) * (float)(*v16 + 1);
  if (v17 <= (float)v11) {
    operator new();
  }
  *(void *)(v8 + 8 * (int)a2) = 24;
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState(a1 + 96, a2);
  uint64_t result = __p;
  if (__p)
  {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*(void *)__p + 8))(__p);
  }
  else if (v21)
  {
    --*v21;
  }
  if (v17 <= (float)v11) {
LABEL_15:
  }
    operator new();
  return result;
}

void sub_97C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, _DWORD *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p)
  {
    (*(void (**)(void *))(*(void *)__p + 8))(__p);
  }
  else if (a15)
  {
    --*a15;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Find(uint64_t a1, int a2)
{
  uint64_t v3 = *(void **)(a1 + 48);
  if (v3)
  {
    uint64_t result = a2 == 0;
    *(unsigned char *)(a1 + 24) = result;
    if (a2 == -1) {
      int v5 = 0;
    }
    else {
      int v5 = a2;
    }
    *(_DWORD *)(a1 + 28) = v5;
    unint64_t v7 = *(uint64_t **)(*(void *)(a1 + 64) + 8 * *(int *)(a1 + 56));
    uint64_t v6 = *v7;
    if (v5 < (unint64_t)((v7[1] - *v7) >> 2))
    {
      uint64_t v8 = *(int *)(v6 + 4 * v5);
      if (v8 != -1)
      {
        if (*v3) {
          (*(void (**)(void))(*(void *)*v3 + 64))(*v3);
        }
        else {
          v3[4] = v8;
        }
        return 1;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 96;
    return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Find(v9, a2);
  }
  return result;
}

BOOL fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Done(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    if (*(unsigned char *)(a1 + 24)) {
      return 0;
    }
    if (*v2)
    {
      if ((*(uint64_t (**)(void))(*(void *)*v2 + 24))(*v2)) {
        return 1;
      }
    }
    else if (v2[4] >= v2[2])
    {
      return 1;
    }
    int v5 = *(uint64_t **)(a1 + 48);
    uint64_t v6 = *v5;
    if (*(_DWORD *)(a1 + 12) == 1)
    {
      if (v6) {
        uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
      }
      else {
        uint64_t v7 = v5[1] + 16 * v5[4];
      }
      uint64_t v8 = (_DWORD *)(v7 + 4);
    }
    else if (v6)
    {
      uint64_t v8 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
    }
    else
    {
      uint64_t v8 = (_DWORD *)(v5[1] + 16 * v5[4]);
    }
    return *v8 != *(_DWORD *)(a1 + 28);
  }
  else
  {
    uint64_t v4 = a1 + 96;
    return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(v4);
  }
}

uint64_t fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Value(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 48);
  if (!v1) {
    return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Value(a1 + 96);
  }
  if (*(unsigned char *)(a1 + 24)) {
    return a1 + 32;
  }
  if (*v1) {
    return (*(uint64_t (**)(void))(*(void *)*v1 + 32))();
  }
  return v1[1] + 16 * v1[4];
}

uint64_t fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Next(uint64_t result)
{
  uint64_t v1 = *(uint64_t **)(result + 48);
  if (!v1) {
    return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Next(result + 96);
  }
  if (*(unsigned char *)(result + 24))
  {
    *(unsigned char *)(result + 24) = 0;
  }
  else
  {
    uint64_t result = *v1;
    if (*v1) {
      return (*(uint64_t (**)(void))(*(void *)result + 40))();
    }
    else {
      ++v1[4];
    }
  }
  return result;
}

void fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::CreateBase2<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>()
{
}

void sub_9802C()
{
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComposeFstImplBase(a1, a2, a3, a4) = off_262AE0;
  uint64_t v8 = *(__n128 **)(a4 + 40);
  if (!v8) {
    operator new();
  }
  *(void *)(a1 + 136) = v8;
  __n128 v9 = *v8;
  *(__n128 *)(a1 + 144) = *v8;
  *(void *)(a1 + 1--*(_DWORD *)(a9 + 60) = (*(uint64_t (**)(unint64_t, __n128))(*(void *)v9.n128_u64[0] + 32))(v9.n128_u64[0], v9);
  *(void *)(a1 + 168) = (*(uint64_t (**)(void))(**(void **)(a1 + 152) + 32))(*(void *)(a1 + 152));
  uint64_t v10 = *(void *)(a4 + 48);
  if (!v10) {
    operator new();
  }
  *(void *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3) {
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  unint64_t v13 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 144) + 40))(*(void *)(a1 + 144), v11);
  uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 152) + 40))(*(void *)(a1 + 152), v12);
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_982A0()
{
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);

  operator delete();
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_98388()
{
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(void *a1, int a2)
{
  uint64_t v4 = (unsigned int *)(*(void *)(a1[22] + 96) + 12 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  uint64_t v7 = a1[17];
  char v8 = *((unsigned char *)v4 + 8);
  fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>::SetState(v7, v5, v6, &v8);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>((uint64_t)a1, a2, a1[21], v6, a1[20], v5, a1[19], 1);
  }
  else
  {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>((uint64_t)a1, a2, a1[20], v5, a1[21], v6, a1[18], 0);
  }
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(**(void **)(a1 + 144) + 24))(*(void *)(a1 + 144), 0) == a3
    && (*(unsigned int (**)(void, void))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), 0) == a3)
  {
    operator new();
  }
  return 0;
}

void sub_98538()
{
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 176) + 96);
  uint64_t v5 = (unsigned int *)(v4 + 12 * a2);
  uint64_t v6 = *v5;
  float v10 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 144) + 96))(*(void *)(a1 + 144), v6);
  if (v10 != INFINITY)
  {
    uint64_t v7 = v5[1];
    float v8 = (*(float (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 152) + 8) + 32))(*(void *)(*(void *)(a1 + 152) + 8), v7);
    float v10 = v8;
    if (v8 != INFINITY)
    {
      uint64_t v9 = *(void *)(a1 + 136);
      LOBYTE(v10) = *(unsigned char *)(v4 + 12 * a2 + 8);
      fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>::SetState(v9, v6, v7, &v10);
    }
  }
}

uint64_t fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    operator new();
  }
  *(void *)a1 = a4;
  if (!a5) {
    operator new();
  }
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + 16) = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 32))(a4);
  *(void *)(a1 + 24) = -1;
  *(unsigned char *)(a1 + 32) = -1;
  return a1;
}

void sub_987CC()
{
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  *a1 = off_262AE0;
  uint64_t v2 = (uint64_t *)a1[17];
  if (v2)
  {
    fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>::~SequenceComposeFilter(v2);
    operator delete();
  }
  uint64_t v3 = a1[22];
  if (v3)
  {
    uint64_t v4 = *(void **)(v3 + 96);
    if (v4)
    {
      *(void *)(v3 + 104) = v4;
      operator delete(v4);
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(v3 + 24);
    operator delete();
  }

  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_989C0()
{
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 184);
  if (!v3) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 144) + 104))(*(void *)(a1 + 144));
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 152) + 8) + 40))(*(void *)(*(void *)(a1 + 152) + 8), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    uint64_t v12 = fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1) {
    return 0;
  }
  return v8 == -1 || v7 <= v8;
}

void sub_98B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState(a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, a7, v18, a8);
  unint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a5 + 128))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2]) {
        goto LABEL_13;
      }
LABEL_7:
      char v14 = (int *)(v15[1] + 16 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(void))(*(void *)v15[0] + 24))(v15[0])) {
      break;
    }
    if (!v15[0]) {
      goto LABEL_7;
    }
    char v14 = (int *)(*(uint64_t (**)(void))(*(void *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, a7, v14, a8);
    if (v15[0]) {
      (*(void (**)(void))(*(void *)v15[0] + 40))(v15[0]);
    }
    else {
      ++v17;
    }
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(void *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16) {
    --*v16;
  }
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArcs(a1, a2);
}

void sub_98D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::Reverse<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ArcTpl<fst::TropicalWeightTpl<float>>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetState(*(void *)(a7 + 8), a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(a1, a2, a7, v18, a8);
  unint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a5 + 128))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2]) {
        goto LABEL_13;
      }
LABEL_7:
      char v14 = (int *)(v15[1] + 16 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(void))(*(void *)v15[0] + 24))(v15[0])) {
      break;
    }
    if (!v15[0]) {
      goto LABEL_7;
    }
    char v14 = (int *)(*(uint64_t (**)(void))(*(void *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(a1, a2, a7, v14, a8);
    if (v15[0]) {
      (*(void (**)(void))(*(void *)v15[0] + 40))(v15[0]);
    }
    else {
      ++v17;
    }
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(void *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16) {
    --*v16;
  }
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArcs(a1, a2);
}

void sub_98F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::Reverse<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ArcTpl<fst::TropicalWeightTpl<float>>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, int a2, uint64_t a3, int *a4, int a5)
{
  float v10 = a4 + 1;
  if (!a5) {
    float v10 = a4;
  }
  BOOL result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Find(a3, *v10);
  if (result)
  {
    for (BOOL result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(a3);
          !result;
          BOOL result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(a3))
    {
      long long v12 = *(_OWORD *)fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Value(a3);
      long long v24 = *(_OWORD *)a4;
      long long v25 = v12;
      if (a5)
      {
        unint64_t v13 = *(unsigned __int8 **)(a1 + 136);
        if (DWORD1(v24) != -1)
        {
          if (v25 == -1)
          {
            int v17 = v13[32];
            if (v17) {
              char v18 = -1;
            }
            else {
              char v18 = 0;
            }
            char v23 = v18;
            if (v17) {
              goto LABEL_35;
            }
          }
          else
          {
            if (DWORD1(v24)) {
              char v14 = 0;
            }
            else {
              char v14 = -1;
            }
            char v23 = v14;
            if (!DWORD1(v24)) {
              goto LABEL_35;
            }
          }
LABEL_28:
          uint64_t v19 = (unsigned int *)&v24;
          char v20 = &v25;
LABEL_34:
          fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v19, (uint64_t)v20, &v23);
          goto LABEL_35;
        }
        if (!v13[33])
        {
          char v23 = v13[34] ^ 1;
          goto LABEL_28;
        }
      }
      else
      {
        char v15 = *(unsigned __int8 **)(a1 + 136);
        if (DWORD1(v25) != -1)
        {
          if (v24 == -1)
          {
            int v21 = v15[32];
            if (v21) {
              char v22 = -1;
            }
            else {
              char v22 = 0;
            }
            char v23 = v22;
            if (v21) {
              goto LABEL_35;
            }
          }
          else
          {
            if (DWORD1(v25)) {
              char v16 = 0;
            }
            else {
              char v16 = -1;
            }
            char v23 = v16;
            if (!DWORD1(v25)) {
              goto LABEL_35;
            }
          }
LABEL_33:
          uint64_t v19 = (unsigned int *)&v25;
          char v20 = &v24;
          goto LABEL_34;
        }
        if (!v15[33])
        {
          char v23 = v15[34] ^ 1;
          goto LABEL_33;
        }
      }
LABEL_35:
      fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Next(a3);
    }
  }
  return result;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(uint64_t a1, int a2, uint64_t a3, int *a4, int a5)
{
  float v10 = a4 + 1;
  if (!a5) {
    float v10 = a4;
  }
  uint64_t result = fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Find(*(void *)(a3 + 8), *v10);
  if (result)
  {
    uint64_t result = fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Done(*(void *)(a3 + 8));
    if ((result & 1) == 0)
    {
      do
      {
        long long v12 = *(_OWORD *)fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Value(*(void *)(a3 + 8));
        long long v24 = *(_OWORD *)a4;
        long long v25 = v12;
        if (a5)
        {
          unint64_t v13 = *(unsigned __int8 **)(a1 + 136);
          if (DWORD1(v24) != -1)
          {
            if (v25 == -1)
            {
              int v17 = v13[32];
              if (v17) {
                char v18 = -1;
              }
              else {
                char v18 = 0;
              }
              char v23 = v18;
              if (v17) {
                goto LABEL_35;
              }
            }
            else
            {
              if (DWORD1(v24)) {
                char v14 = 0;
              }
              else {
                char v14 = -1;
              }
              char v23 = v14;
              if (!DWORD1(v24)) {
                goto LABEL_35;
              }
            }
LABEL_28:
            uint64_t v19 = (unsigned int *)&v24;
            char v20 = &v25;
LABEL_34:
            fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v19, (uint64_t)v20, &v23);
            goto LABEL_35;
          }
          if (!v13[33])
          {
            char v23 = v13[34] ^ 1;
            goto LABEL_28;
          }
        }
        else
        {
          char v15 = *(unsigned __int8 **)(a1 + 136);
          if (DWORD1(v25) != -1)
          {
            if (v24 == -1)
            {
              int v21 = v15[32];
              if (v21) {
                char v22 = -1;
              }
              else {
                char v22 = 0;
              }
              char v23 = v22;
              if (v21) {
                goto LABEL_35;
              }
            }
            else
            {
              if (DWORD1(v25)) {
                char v16 = 0;
              }
              else {
                char v16 = -1;
              }
              char v23 = v16;
              if (!DWORD1(v25)) {
                goto LABEL_35;
              }
            }
LABEL_33:
            uint64_t v19 = (unsigned int *)&v25;
            char v20 = &v24;
            goto LABEL_34;
          }
          if (!v15[33])
          {
            char v23 = v15[34] ^ 1;
            goto LABEL_33;
          }
        }
LABEL_35:
        fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Next(*(void *)(a3 + 8));
        uint64_t result = fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Done(*(void *)(a3 + 8));
      }
      while (!result);
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = off_262B58;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  *(void *)(a1 + 32) = (*(uint64_t (**)(void, void))(**(void **)(a3 + 144) + 16))(*(void *)(a3 + 144), 0);
  *(void *)(a1 + 40) = (*(uint64_t (**)(void, void))(**(void **)(a3 + 152) + 16))(*(void *)(a3 + 152), 0);
  *(unsigned char *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 52) = xmmword_209A50;
  *(unsigned char *)(a1 + 84) = 0;
  if (a4 == 1) {
    *(void *)(a1 + 52) = 0xFFFFFFFF00000000;
  }
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);

  operator delete();
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_993FC()
{
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 24) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + 24) = a2;
    int v3 = (unsigned int *)(*(void *)(*(void *)(*(void *)(result + 16) + 176) + 96) + 12 * a2);
    uint64_t v4 = v3[1];
    fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetState(*(void *)(*(void *)(result + 32) + 8), *v3);
    uint64_t result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState(*(void *)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 48) = a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if (a2) {
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(a1, a2, *(void *)(a1 + 40), *(void *)(a1 + 32));
    }
  }
  else if (a2)
  {
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, *(void *)(a1 + 32), *(void *)(a1 + 40));
  }
  return 1;
}

BOOL fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)
    || !fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Done(*(void *)(*(void *)(a1 + 32) + 8)))
  {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 40);

  return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(v2);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  if (*(unsigned char *)(result + 48))
  {
    *(unsigned char *)(result + 48) = 0;
  }
  else if (*(_DWORD *)(result + 28))
  {
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(result, *(void *)(result + 40), *(void *)(result + 32));
  }
  else
  {
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(result, *(void *)(result + 32), *(void *)(result + 40));
  }
  return result;
}

void *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  *a1 = off_262B58;
  uint64_t v2 = a1[4];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[5];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = off_262B58;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 32) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 32) + 16))(*(void *)(a2 + 32), a3);
  *(void *)(a1 + 40) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 40) + 16))(*(void *)(a2 + 40), a3);
  *(unsigned char *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 52) = xmmword_209A50;
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  if (a3)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v6 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    uint64_t v7 = fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    *(unsigned char *)(a1 + 84) = 1;
  }
  if (*(_DWORD *)(a1 + 28) == 1) {
    *(int32x2_t *)(a1 + 52) = vrev64_s32(*(int32x2_t *)(a1 + 52));
  }
  return a1;
}

void sub_99768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Find(*(void *)(a3 + 8), a2);
  if (result)
  {
    int v8 = *(_DWORD *)(a1 + 28);
    uint64_t v9 = fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Value(*(void *)(a3 + 8));
    char v10 = (int *)(v9 + 4);
    if (v8) {
      char v10 = (int *)v9;
    }
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Find(a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Find(a3, a2);
  if (result)
  {
    int v8 = *(_DWORD *)(a1 + 28);
    uint64_t v9 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Value(a3);
    char v10 = (int *)(v9 + 4);
    if (v8) {
      char v10 = (int *)v9;
    }
    fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Find(*(void *)(a4 + 8), *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  while (!fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Done(*(void *)(a2 + 8))
       || !fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(a3))
  {
    if (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(a3))
    {
      fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Next(*(void *)(a2 + 8));
      while (!fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Done(*(void *)(a2 + 8)))
      {
        int v6 = *(_DWORD *)(a1 + 28);
        uint64_t v7 = fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Value(*(void *)(a2 + 8));
        int v8 = (int *)(v7 + 4);
        if (v6) {
          int v8 = (int *)v7;
        }
        if (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Find(a3, *v8)) {
          break;
        }
        fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Next(*(void *)(a2 + 8));
      }
    }
    while (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(a3))
    {
      uint64_t v9 = fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Value(*(void *)(a2 + 8));
      uint64_t v10 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Value(a3);
      fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Next(a3);
      int v11 = *(_DWORD *)(a1 + 28);
      BOOL v12 = v11 == 0;
      if (v11) {
        unint64_t v13 = (uint64_t *)v10;
      }
      else {
        unint64_t v13 = (uint64_t *)v9;
      }
      uint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      if (v12) {
        char v16 = (uint64_t *)v10;
      }
      else {
        char v16 = (uint64_t *)v9;
      }
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, *(unsigned int *)(a1 + 24), v14, v15, *v16, v16[1]))return 1; {
    }
      }
  }
  return 0;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  while (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(a2)
       || !fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Done(*(void *)(a3 + 8)))
  {
    if (fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Done(*(void *)(a3 + 8)))
    {
      fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Next(a2);
      while (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(a2))
      {
        int v6 = *(_DWORD *)(a1 + 28);
        uint64_t v7 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Value(a2);
        int v8 = (int *)(v7 + 4);
        if (v6) {
          int v8 = (int *)v7;
        }
        if (fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Find(*(void *)(a3 + 8), *v8))break; {
        fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Next(a2);
        }
      }
    }
    while (!fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Done(*(void *)(a3 + 8)))
    {
      uint64_t v9 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Value(a2);
      uint64_t v10 = fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Value(*(void *)(a3 + 8));
      fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Next(*(void *)(a3 + 8));
      int v11 = *(_DWORD *)(a1 + 28);
      BOOL v12 = v11 == 0;
      if (v11) {
        unint64_t v13 = (uint64_t *)v10;
      }
      else {
        unint64_t v13 = (uint64_t *)v9;
      }
      uint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      if (v12) {
        char v16 = (uint64_t *)v10;
      }
      else {
        char v16 = (uint64_t *)v9;
      }
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, *(unsigned int *)(a1 + 24), v14, v15, *v16, v16[1]))return 1; {
    }
      }
  }
  return 0;
}

void fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::CreateBase2<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>()
{
}

void sub_99B30()
{
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::ComposeFstImplBase(a1, a2, a3, a4) = off_262BF0;
  int v8 = *(__n128 **)(a4 + 40);
  if (!v8) {
    operator new();
  }
  *(void *)(a1 + 136) = v8;
  __n128 v9 = *v8;
  *(__n128 *)(a1 + 144) = *v8;
  *(void *)(a1 + 1--*(_DWORD *)(a9 + 60) = (*(uint64_t (**)(unint64_t, __n128))(*(void *)v9.n128_u64[0] + 32))(v9.n128_u64[0], v9);
  *(void *)(a1 + 168) = (*(uint64_t (**)(void))(**(void **)(a1 + 152) + 32))(*(void *)(a1 + 152));
  uint64_t v10 = *(void *)(a4 + 48);
  if (!v10) {
    operator new();
  }
  *(void *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3) {
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  unint64_t v13 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 144) + 40))(*(void *)(a1 + 144), v11);
  uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 152) + 40))(*(void *)(a1 + 152), v12);
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_99DA4()
{
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);

  operator delete();
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_99E8C()
{
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(void *a1, int a2)
{
  uint64_t v4 = (unsigned int *)(*(void *)(a1[22] + 96) + 12 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  uint64_t v7 = a1[17];
  char v8 = *((unsigned char *)v4 + 8);
  fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>::SetState(v7, v5, v6, &v8);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>((uint64_t)a1, a2, a1[21], v6, a1[20], v5, a1[19], 1);
  }
  else
  {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>((uint64_t)a1, a2, a1[20], v5, a1[21], v6, a1[18], 0);
  }
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(**(void **)(a1 + 144) + 24))(*(void *)(a1 + 144), 0) == a3
    && (*(unsigned int (**)(void, void))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), 0) == a3)
  {
    operator new();
  }
  return 0;
}

void sub_9A03C()
{
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 176) + 96);
  uint64_t v5 = (unsigned int *)(v4 + 12 * a2);
  uint64_t v6 = *v5;
  float v10 = (*(float (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 144) + 8) + 32))(*(void *)(*(void *)(a1 + 144) + 8), v6);
  if (v10 != INFINITY)
  {
    uint64_t v7 = v5[1];
    float v8 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 152) + 96))(*(void *)(a1 + 152), v7);
    float v10 = v8;
    if (v8 != INFINITY)
    {
      uint64_t v9 = *(void *)(a1 + 136);
      LOBYTE(v10) = *(unsigned char *)(v4 + 12 * a2 + 8);
      fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>::SetState(v9, v6, v7, &v10);
    }
  }
}

uint64_t fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    operator new();
  }
  *(void *)a1 = a4;
  if (!a5) {
    operator new();
  }
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + 16) = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 32))(a4);
  *(void *)(a1 + 24) = -1;
  *(unsigned char *)(a1 + 32) = -1;
  return a1;
}

void sub_9A2D0()
{
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  *a1 = off_262BF0;
  uint64_t v2 = (uint64_t *)a1[17];
  if (v2)
  {
    fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>::~SequenceComposeFilter(v2);
    operator delete();
  }
  uint64_t v3 = a1[22];
  if (v3)
  {
    uint64_t v4 = *(void **)(v3 + 96);
    if (v4)
    {
      *(void *)(v3 + 104) = v4;
      operator delete(v4);
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,fst::PoolAllocator<int>>::~__hash_table(v3 + 24);
    operator delete();
  }

  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::PoolAllocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~CacheBaseImpl(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_9A4C4()
{
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 184);
  if (!v3) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 144) + 8) + 40))(*(void *)(*(void *)(a1 + 144) + 8));
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 152) + 104))(*(void *)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    uint64_t v12 = fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1) {
    return 0;
  }
  return v8 == -1 || v7 <= v8;
}

void sub_9A66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = off_262C68;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  *(void *)(a1 + 32) = (*(uint64_t (**)(void, void))(**(void **)(a3 + 144) + 16))(*(void *)(a3 + 144), 0);
  *(void *)(a1 + 40) = (*(uint64_t (**)(void, void))(**(void **)(a3 + 152) + 16))(*(void *)(a3 + 152), 0);
  *(unsigned char *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 52) = xmmword_209A50;
  *(unsigned char *)(a1 + 84) = 0;
  if (a4 == 1) {
    *(void *)(a1 + 52) = 0xFFFFFFFF00000000;
  }
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);

  operator delete();
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_9A818()
{
}

uint64_t *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t *result, int a2)
{
  if (*((_DWORD *)result + 6) != a2)
  {
    uint64_t v2 = result;
    *((_DWORD *)result + 6) = a2;
    int v3 = (unsigned int *)(*(void *)(*(void *)(result[2] + 176) + 96) + 12 * a2);
    uint64_t v4 = v3[1];
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState(result[4], *v3);
    uint64_t result = (uint64_t *)fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetState(*(void *)(v2[5] + 8), v4);
    *((_DWORD *)v2 + 16) = *((_DWORD *)v2 + 6);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 48) = a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if (a2) {
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(a1, a2, *(void *)(a1 + 40), *(void *)(a1 + 32));
    }
  }
  else if (a2)
  {
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(a1, a2, *(void *)(a1 + 32), *(void *)(a1 + 40));
  }
  return 1;
}

BOOL fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)
    || !fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Done(*(void *)(a1 + 32)))
  {
    return 0;
  }
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8);

  return fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Done(v2);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  if (*(unsigned char *)(result + 48))
  {
    *(unsigned char *)(result + 48) = 0;
  }
  else if (*(_DWORD *)(result + 28))
  {
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>(result, *(void *)(result + 40), *(void *)(result + 32));
  }
  else
  {
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(result, *(void *)(result + 32), *(void *)(result + 40));
  }
  return result;
}

void *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  *a1 = off_262C68;
  uint64_t v2 = a1[4];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[5];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = off_262C68;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 32) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 32) + 16))(*(void *)(a2 + 32), a3);
  *(void *)(a1 + 40) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 40) + 16))(*(void *)(a2 + 40), a3);
  *(unsigned char *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 52) = xmmword_209A50;
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  if (a3)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v6 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    uint64_t v7 = fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    *(unsigned char *)(a1 + 84) = 1;
  }
  if (*(_DWORD *)(a1 + 28) == 1) {
    *(int32x2_t *)(a1 + 52) = vrev64_s32(*(int32x2_t *)(a1 + 52));
  }
  return a1;
}

void sub_9AB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::Map<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::RemoveSomeInputSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>(uint64_t a1, uint64_t a2)
{
  kaldi::ConstIntegerSet<int>::ConstIntegerSet((uint64_t)v3, a2);
  fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::RemoveSomeInputSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>(a1, (uint64_t)v3);
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
  if (v4) {
    operator delete(v4);
  }
}

void sub_9AC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t fst::RemoveSomeInputSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::RemoveSomeInputSymbolsMapper(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = kaldi::ConstIntegerSet<int>::ConstIntegerSet(a1, a2);
  if (kaldi::ConstIntegerSet<int>::count(v3, 0)) {
    __assert_rtn("RemoveSomeInputSymbolsMapper", "factor-inl.h", 245, "to_remove_set_.count(0) == 0");
  }
  return a1;
}

void sub_9AC88(_Unwind_Exception *a1)
{
  kaldi::ConstIntegerSet<int>::~ConstIntegerSet(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::RemoveSomeInputSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, void))(*(void *)a1 + 264))(a1, 0);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    if ((*(int (**)(uint64_t))(*(void *)a1 + 144))(a1) >= 1)
    {
      uint64_t v6 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 280))(a1, v6, &v14);
        while (!(*(unsigned int (**)(uint64_t))(*(void *)v14 + 24))(v14))
        {
          uint64_t v7 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 32))(v14);
          uint64_t v8 = *v7;
          uint64_t v9 = v7[1];
          BOOL v10 = kaldi::ConstIntegerSet<int>::count(a2, *v7);
          uint64_t v11 = v8;
          if (v10) {
            uint64_t v11 = 0;
          }
          v13[0] = v11 | v8 & 0xFFFFFFFF00000000;
          v13[1] = v9;
          (*(void (**)(uint64_t, void *))(*(void *)v14 + 88))(v14, v13);
          (*(void (**)(uint64_t))(*(void *)v14 + 40))(v14);
        }
        if (v14) {
          (*(void (**)(void))(*(void *)v14 + 8))();
        }
        float v12 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v6);
        kaldi::ConstIntegerSet<int>::count(a2, 0);
        (*(void (**)(uint64_t, uint64_t, float))(*(void *)a1 + 168))(a1, v6, v12);
        uint64_t v6 = (v6 + 1);
      }
      while ((int)v6 < (*(int (**)(uint64_t))(*(void *)a1 + 144))(a1));
    }
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 176))(a1, v5 & 0xFFFFFFFFCD70FFFFLL, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_9AFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

void OUTLINED_FUNCTION_1_1(_DWORD *a1@<X8>)
{
}

uint64_t OUTLINED_FUNCTION_2_0(uint64_t a1)
{
  return *(void *)a1;
}

void fst::TableCompose<fst::ArcTpl<fst::TropicalWeightTpl<float>>>()
{
  __assert_rtn("TableCompose", "table-matcher.h", 367, "cache != NULL");
}

{
  __assert_rtn("TableCompose", "table-matcher.h", 378, "cache->opts.table_match_type == MATCH_INPUT");
}

{
  __assert_rtn("TableCompose", "table-matcher.h", 342, "opts.table_match_type == MATCH_INPUT");
}

void fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetState(uint64_t a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_2_0(a1);
  if (v1)
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  else
  {
    uint64_t v3 = *(_DWORD **)(v2 + 24);
    if (v3) {
      OUTLINED_FUNCTION_1_1(v3);
    }
  }
}

void fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>>>::Determinize()
{
}

void fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>>>::Output()
{
}

{
  __assert_rtn("Output", "determinize-star-inl.h", 228, "news == s");
}

void fst::StringRepository<int,int>::SeqOfId()
{
  __assert_rtn("SeqOfId", "determinize-star-inl.h", 91, "id >= string_start && id < static_cast<StringId>(vec_.size())");
}

void fst::StringRepository<int,int>::IdOfSeqInternal()
{
}

void fst::StringRepository<int,int>::VectorKey::operator()()
{
  __assert_rtn("operator()", "determinize-star-inl.h", 47, "vec != NULL");
}

uint64_t fst::CountStates<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>()
{
  OUTLINED_FUNCTION_0_1();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void fst::ArcSortMapper<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetState(uint64_t a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_2_0(a1);
  if (v1)
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  else
  {
    uint64_t v3 = *(_DWORD **)(v2 + 24);
    if (v3) {
      OUTLINED_FUNCTION_1_1(v3);
    }
  }
}

void fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::FindState()
{
  __assert_rtn("FindState", "context-fst-inl.h", 42, "static_cast<int32>(seq.size()) == N_-1");
}

void fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::Final()
{
  __assert_rtn("Final", "context-fst-inl.h", 156, "static_cast<int32>(seq.size()) == N_-1");
}

{
  __assert_rtn("Final", "context-fst-inl.h", 151, "static_cast<size_t>(s) < state_seqs_.size()");
}

void fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::Expand()
{
}

void fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::Value_()
{
}

void fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::Next_()
{
}

void fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>::Find()
{
  __assert_rtn("Find", "context-fst-inl.h", 363, "s_ != kNoStateId");
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>>,int>>(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 24);
  if (v1) {
    OUTLINED_FUNCTION_1_1(v1);
  }
}

void fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetState()
{
  __assert_rtn("SetState", "table-matcher.h", 114, "s>=0");
}

uint64_t kaldi::FasterDecoder::FasterDecoder(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, const char *a5)
{
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_20C900;
  *(void *)(a1 + 80) = a2;
  long long v6 = *a3;
  int v7 = *((_DWORD *)a3 + 4);
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 1--*(_DWORD *)(a9 + 60) = -1;
  if (*(float *)(a1 + 104) < 1.0)
  {
    BOOL v10 = "config_.hash_ratio >= 1.0";
    uint64_t v11 = (unsigned char *)(&stru_20 + 9);
    goto LABEL_8;
  }
  int v8 = *(_DWORD *)(a1 + 92);
  if (v8 < 2)
  {
    BOOL v10 = "config_.max_active > 1";
    uint64_t v11 = &stru_20.segname[2];
    goto LABEL_8;
  }
  int v9 = *(_DWORD *)(a1 + 96);
  BOOL v10 = "config_.min_active >= 0 && config_.min_active < config_.max_active";
  uint64_t v11 = (unsigned char *)(&stru_20 + 11);
  if (v9 < 0 || v9 >= v8) {
LABEL_8:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"FasterDecoder", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/decoder/faster-decoder.cc", v11, v10, a5);
  kaldi::HashList<int,kaldi::FasterDecoder::Token *>::SetSize((void *)a1, 0x3E8uLL, 43, (uint64_t)"config_.min_active >= 0 && config_.min_active < config_.max_active", a5);
  return a1;
}

void sub_9B4E0(_Unwind_Exception *a1)
{
  uint64_t v4 = (void *)v1[17];
  if (v4)
  {
    v1[18] = v4;
    operator delete(v4);
  }
  uint64_t v5 = *v2;
  if (*v2)
  {
    v1[15] = v5;
    operator delete(v5);
  }
  kaldi::HashList<int,kaldi::FasterDecoder::Token *>::~HashList(v1);
  _Unwind_Resume(a1);
}

void kaldi::HashList<int,kaldi::FasterDecoder::Token *>::SetSize(void *a1, unint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  a1[2] = a2;
  if (*a1 || a1[1] != -1) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetSize", "../subproject/libquasar/libkaldi/src/util/hash-list-inl.h", stru_20.segname, "list_head_ == NULL && bucket_list_tail_ == static_cast<size_t>(-1)", a5);
  }
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v5 = (uint64_t)(a1 + 3);
  if (a2 > (v7 - v6) >> 4)
  {
    long long v8 = 0uLL;
    std::vector<kaldi::HashList<int,kaldi::FasterDecoder::Token *>::HashBucket,std::allocator<kaldi::HashList<int,kaldi::FasterDecoder::Token *>::HashBucket>>::resize(v5, a2, &v8);
  }
}

void kaldi::FasterDecoder::InitDecoding(kaldi::FasterDecoder *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = *((void *)this + 1);
  if (v6 != -1)
  {
    uint64_t v7 = *((void *)this + 3);
    do
    {
      long long v8 = (uint64_t *)(v7 + 16 * v6);
      v8[1] = 0;
      uint64_t v6 = *v8;
    }
    while (v6 != -1);
  }
  uint64_t v9 = *(void *)this;
  *(void *)this = 0;
  *((void *)this + 1) = -1;
  kaldi::FasterDecoder::ClearToks((uint64_t)this, v9, a3, a4, a5);
  if ((*(unsigned int (**)(void))(**((void **)this + 10) + 24))(*((void *)this + 10)) != -1) {
    operator new();
  }
  kaldi::KaldiAssertFailure_((kaldi *)"InitDecoding", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/decoder/faster-decoder.cc", &stru_20.segname[12], "start_state != fst::kNoStateId", v10);
}

uint64_t kaldi::FasterDecoder::ClearToks(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (a2)
  {
    uint64_t v5 = a2;
    uint64_t v6 = result;
    do
    {
      uint64_t result = *(void *)(v5 + 8);
      int v7 = *(_DWORD *)(result + 24);
      BOOL v8 = __OFSUB__(v7, 1);
      int v9 = v7 - 1;
      *(_DWORD *)(result + 24) = v9;
      if (!v9) {
        operator delete();
      }
      if ((v9 < 0) ^ v8 | (v9 == 0)) {
        kaldi::KaldiAssertFailure_((kaldi *)"TokenDelete", "../subproject/libquasar/libkaldi/src/decoder/faster-decoder.h", (const char *)&stru_68.reloff + 3, "tok->ref_count_ > 0", a5);
      }
      uint64_t v10 = *(void *)(v5 + 16);
      *(void *)(v5 + 16) = *(void *)(v6 + 48);
      *(void *)(v6 + 48) = v5;
      uint64_t v5 = v10;
    }
    while (v10);
  }
  return result;
}

void kaldi::FasterDecoder::ProcessNonemitting(kaldi::FasterDecoder *this, double a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v6 = (char *)*((void *)this + 14);
  v32 = (void **)((char *)this + 112);
  if (v6 != *((char **)this + 15)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ProcessNonemitting", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/decoder/faster-decoder.cc", stru_108.sectname, "queue_.empty()", a6);
  }
  uint64_t v8 = *(void *)this;
  if (!*(void *)this) {
    return;
  }
  uint64_t v10 = (void *)((char *)this + 128);
  do
  {
    if ((unint64_t)v6 >= *v10)
    {
      uint64_t v11 = (char *)*v32;
      uint64_t v12 = (v6 - (unsigned char *)*v32) >> 2;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 62) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = *v10 - (void)v11;
      if (v14 >> 1 > v13) {
        unint64_t v13 = v14 >> 1;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15)
      {
        char v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)this + 128, v15);
        uint64_t v11 = (char *)*((void *)this + 14);
        uint64_t v6 = (char *)*((void *)this + 15);
      }
      else
      {
        char v16 = 0;
      }
      int v17 = &v16[4 * v12];
      *(_DWORD *)int v17 = *(_DWORD *)v8;
      char v18 = v17 + 4;
      while (v6 != v11)
      {
        int v19 = *((_DWORD *)v6 - 1);
        v6 -= 4;
        *((_DWORD *)v17 - 1) = v19;
        v17 -= 4;
      }
      *((void *)this + 14) = v17;
      *((void *)this + 15) = v18;
      *((void *)this + 16) = &v16[4 * v15];
      if (v11) {
        operator delete(v11);
      }
      uint64_t v6 = v18;
    }
    else
    {
      *(_DWORD *)uint64_t v6 = *(_DWORD *)v8;
      v6 += 4;
    }
    *((void *)this + 15) = v6;
    uint64_t v8 = *(void *)(v8 + 16);
  }
  while (v8);
  char v20 = (char *)*v32;
  if (*v32 == v6) {
    return;
  }
  do
  {
    unint64_t v22 = *((int *)v6 - 1);
    v6 -= 4;
    int v21 = v22;
    *((void *)this + 15) = v6;
    uint64_t v23 = *((void *)this + 3);
    uint64_t v24 = *(void *)(v23 + 16 * (v22 % *((void *)this + 2)));
    long long v25 = this;
    if (v24 != -1) {
      long long v25 = (kaldi::FasterDecoder *)(*(void *)(v23 + 16 * v24 + 8) + 16);
    }
    for (uint64_t i = *(void *)v25; *(_DWORD *)i != v21; uint64_t i = *(void *)(i + 16))
      ;
    uint64_t v27 = *(void *)(i + 8);
    if (*(double *)(v27 + 32) > a2) {
      continue;
    }
    if (v21 != *(_DWORD *)(v27 + 12)) {
      kaldi::KaldiAssertFailure_((kaldi *)"ProcessNonemitting", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/decoder/faster-decoder.cc", &stru_108.sectname[11], "tok != NULL && state == tok->arc_.nextstate", a6);
    }
    unint64_t v37 = 0;
    (*(void (**)(void))(**((void **)this + 10) + 128))(*((void *)this + 10));
    while (v33)
    {
      if ((*(unsigned int (**)())(*(void *)v33 + 24))())
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v33 + 8))(v33, v28, v29, v30);
        goto LABEL_44;
      }
      v31 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, v28, v29, v30);
LABEL_36:
      if (!*v31) {
        operator new();
      }
      if (v33) {
        (*(void (**)())(*(void *)v33 + 40))();
      }
      else {
        ++v37;
      }
    }
    if (v37 < v35)
    {
      v31 = (_DWORD *)(v34 + 16 * v37);
      goto LABEL_36;
    }
    if (v36) {
      --*v36;
    }
LABEL_44:
    char v20 = (char *)*((void *)this + 14);
    uint64_t v6 = (char *)*((void *)this + 15);
  }
  while (v20 != v6);
}

void sub_9BED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _DWORD *a17)
{
  if (a14)
  {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  else if (a17)
  {
    --*a17;
  }
  _Unwind_Resume(exception_object);
}

void kaldi::FasterDecoder::Decode(kaldi::FasterDecoder *this, kaldi::DecodableInterface *a2, uint64_t a3, uint64_t a4, const char *a5)
{
}

double kaldi::FasterDecoder::ProcessEmitting(kaldi::FasterDecoder *this, kaldi::DecodableInterface *a2, double a3)
{
  uint64_t v5 = *((unsigned int *)this + 40);
  uint64_t v6 = *((void *)this + 1);
  if (v6 != -1)
  {
    uint64_t v7 = *((void *)this + 3);
    do
    {
      uint64_t v8 = (uint64_t *)(v7 + 16 * v6);
      v8[1] = 0;
      uint64_t v6 = *v8;
    }
    while (v6 != -1);
  }
  uint64_t v9 = *(void *)this;
  *(void *)this = 0;
  *((void *)this + 1) = -1;
  unint64_t v46 = 0;
  float v45 = 0.0;
  v44 = 0;
  uint64_t v10 = v9;
  float v14 = kaldi::GetCutoffHelper<kaldi::FasterDecoder,kaldi::FasterDecoderOptions,kaldi::HashList<int,kaldi::FasterDecoder::Token *>::Elem>(this, (uint64_t)this + 88, v9, &v46, &v45, &v44, 1, a3);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v39, "ProcessEmitting", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/decoder/faster-decoder.cc", 188, 3);
    unint64_t v15 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" tokens active.", 15);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v39);
  }
  unint64_t v16 = (unint64_t)(float)(*((float *)this + 26) * (float)v46);
  if (*((void *)this + 2) < v16) {
    kaldi::HashList<int,kaldi::FasterDecoder::Token *>::SetSize(this, v16, v11, v12, v13);
  }
  if (!v44)
  {
    double v20 = INFINITY;
    if (!v10) {
      goto LABEL_55;
    }
    goto LABEL_30;
  }
  uint64_t v17 = *v44;
  uint64_t v18 = *((void *)v44 + 1);
  uint64_t v19 = *((void *)this + 10);
  unint64_t v43 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v19 + 128))(v19, v17, &v39);
  double v20 = INFINITY;
  while (1)
  {
    if (!v39)
    {
      if (v43 >= v41) {
        goto LABEL_25;
      }
LABEL_15:
      uint64_t v21 = v40 + 16 * v43;
      goto LABEL_16;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v39 + 24))(v39)) {
      break;
    }
    if (!v39) {
      goto LABEL_15;
    }
    uint64_t v21 = (*(uint64_t (**)(void))(*(void *)v39 + 32))();
LABEL_16:
    if (*(_DWORD *)v21)
    {
      float v22 = (**(float (***)(kaldi::DecodableInterface *, uint64_t))a2)(a2, v5);
      double v23 = *(double *)(v18 + 32) + *(float *)(v21 + 8) - v22 + v45;
      if (v23 < v20) {
        double v20 = v23;
      }
    }
    if (v39) {
      (*(void (**)(uint64_t))(*(void *)v39 + 40))(v39);
    }
    else {
      ++v43;
    }
  }
  if (v39)
  {
    (*(void (**)(void))(*(void *)v39 + 8))();
    if (!v10) {
      goto LABEL_55;
    }
    goto LABEL_30;
  }
LABEL_25:
  if (v42) {
    --*v42;
  }
  if (!v10) {
    goto LABEL_55;
  }
LABEL_30:
  uint64_t v24 = v10;
  double v25 = v14;
  while (2)
  {
    uint64_t v26 = *(void *)(v24 + 8);
    if (*(double *)(v26 + 32) >= v25) {
      goto LABEL_51;
    }
    uint64_t v38 = v24;
    if (*(_DWORD *)v24 != *(_DWORD *)(v26 + 12)) {
      kaldi::KaldiAssertFailure_((kaldi *)"ProcessEmitting", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/decoder/faster-decoder.cc", (const char *)&stru_B8.size + 2, "state == tok->arc_.nextstate", v13);
    }
    uint64_t v27 = *((void *)this + 10);
    unint64_t v43 = 0;
    (*(void (**)(uint64_t))(*(void *)v27 + 128))(v27);
    while (2)
    {
      if (!v39)
      {
        if (v43 >= v41) {
          goto LABEL_48;
        }
        goto LABEL_39;
      }
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v39 + 24))(v39))
      {
        if (v39)
        {
          uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v39 + 32))(v39, v28, v29);
          goto LABEL_40;
        }
LABEL_39:
        uint64_t v30 = v40 + 16 * v43;
LABEL_40:
        if (*(void *)v30)
        {
          float v31 = *(float *)(v30 + 8);
          if (*(double *)(v26 + 32)
             + v31
             + (float)-(**(float (***)(kaldi::DecodableInterface *, uint64_t))a2)(a2, v5) < v20)
            operator new();
        }
        if (v39) {
          (*(void (**)(uint64_t))(*(void *)v39 + 40))(v39);
        }
        else {
          ++v43;
        }
        continue;
      }
      break;
    }
    if (v39)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v39 + 8))(v39, v28, v29);
      goto LABEL_50;
    }
LABEL_48:
    if (v42) {
      --*v42;
    }
LABEL_50:
    uint64_t v24 = v38;
    uint64_t v26 = *(void *)(v38 + 8);
LABEL_51:
    uint64_t v32 = v24;
    uint64_t v33 = *(void *)(v24 + 16);
    int v34 = *(_DWORD *)(v26 + 24);
    BOOL v35 = __OFSUB__(v34, 1);
    int v36 = v34 - 1;
    *(_DWORD *)(v26 + 24) = v36;
    if (!v36) {
      operator delete();
    }
    if ((v36 < 0) ^ v35 | (v36 == 0)) {
      kaldi::KaldiAssertFailure_((kaldi *)"TokenDelete", "../subproject/libquasar/libkaldi/src/decoder/faster-decoder.h", (const char *)&stru_68.reloff + 3, "tok->ref_count_ > 0", v13);
    }
    *(void *)(v32 + 16) = *((void *)this + 6);
    *((void *)this + 6) = v32;
    uint64_t v24 = v33;
    if (v33) {
      continue;
    }
    break;
  }
LABEL_55:
  ++*((_DWORD *)this + 40);
  return v20;
}

void sub_9C794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::FasterDecoder::ReachedFinal(kaldi::FasterDecoder *this)
{
  uint64_t v1 = *(void **)this;
  if (!*(void *)this) {
    return 0;
  }
  while (*(double *)(v1[1] + 32) == INFINITY
       || (*(float (**)(void, void))(**((void **)this + 10) + 32))(*((void *)this + 10), *(unsigned int *)v1) == INFINITY)
  {
    uint64_t v1 = (void *)v1[2];
    if (!v1) {
      return 0;
    }
  }
  return 1;
}

uint64_t kaldi::FasterDecoder::GetBestPath(kaldi::FasterDecoder *a1, uint64_t a2, int a3)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 208))(a2);
  int v6 = kaldi::FasterDecoder::ReachedFinal(a1);
  uint64_t v7 = *(unsigned int **)a1;
  if (v6)
  {
    if (v7)
    {
      uint64_t v8 = 0;
      double v9 = INFINITY;
      do
      {
        double v10 = *(double *)(*((void *)v7 + 1) + 32);
        double v11 = v10
            + (*(float (**)(void *, void))(**((void **)a1 + 10) + 32))(*((void **)a1 + 10), *v7);
        if (v11 < v9 && v11 != INFINITY)
        {
          uint64_t v8 = (double *)*((void *)v7 + 1);
          double v9 = v11;
        }
        uint64_t v7 = (unsigned int *)*((void *)v7 + 2);
      }
      while (v7);
      goto LABEL_17;
    }
    return 0;
  }
  if (!v7) {
    return 0;
  }
  uint64_t v8 = 0;
  do
  {
    if (!v8 || v8[4] > *(double *)(*((void *)v7 + 1) + 32)) {
      uint64_t v8 = (double *)*((void *)v7 + 1);
    }
    uint64_t v7 = (unsigned int *)*((void *)v7 + 2);
  }
  while (v7);
LABEL_17:
  if (!v8) {
    return 0;
  }
  unint64_t v13 = 0;
  __p = 0;
  uint64_t v32 = 0;
  float v14 = v8;
  unint64_t v33 = 0;
  do
  {
    uint64_t v15 = *((void *)v14 + 2);
    if (v15) {
      double v16 = *(double *)(v15 + 32);
    }
    else {
      double v16 = 0.0;
    }
    float v17 = v14[4] - v16;
    float v18 = *((float *)v14 + 2);
    unsigned int v19 = *((_DWORD *)v14 + 3);
    double v28 = *v14;
    *(float *)&uint64_t v29 = v18;
    *((float *)&v29 + 1) = v17 - v18;
    unsigned int v30 = v19;
    if (v13 >= v33)
    {
      unint64_t v13 = std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>>>::__push_back_slow_path<fst::ArcTpl<fst::LatticeWeightTpl<float>> const&>((uint64_t *)&__p, (uint64_t)&v28);
    }
    else
    {
      *(double *)unint64_t v13 = v28;
      *(void *)(v13 + 8) = v29;
      *(_DWORD *)(v13 + 16) = v30;
      v13 += 20;
    }
    uint64_t v32 = (unsigned char *)v13;
    float v14 = (double *)*((void *)v14 + 2);
  }
  while (v14);
  int v20 = *(_DWORD *)(v13 - 4);
  if (v20 != (*(unsigned int (**)(void *))(**((void **)a1 + 10) + 24))(*((void **)a1 + 10))) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetBestPath", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/decoder/faster-decoder.cc", (const char *)&stru_68.addr + 4, "arcs_reverse.back().nextstate == fst_.Start()", v21);
  }
  v32 -= 20;
  uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 184))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 160))(a2, v22);
  if (v32 - (unsigned char *)__p >= 1)
  {
    unint64_t v23 = (v32 - (unsigned char *)__p) / 0x14uLL + 1;
    unint64_t v24 = 20 * ((v32 - (unsigned char *)__p) / 0x14uLL);
    do
    {
      double v28 = *(double *)((char *)__p + v24 - 20);
      uint64_t v29 = *(void *)((char *)__p + v24 - 12);
      unsigned int v30 = *(_DWORD *)((char *)__p + v24 - 4);
      unsigned int v30 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 184))(a2);
      (*(void (**)(uint64_t, uint64_t, double *))(*(void *)a2 + 192))(a2, v22, &v28);
      uint64_t v22 = v30;
      --v23;
      v24 -= 20;
    }
    while (v23 > 1);
  }
  if (v6 & a3)
  {
    v27[0] = (*(float (**)(void *, void))(**((void **)a1 + 10) + 32))(*((void **)a1 + 10), *((unsigned int *)v8 + 3));
    v27[1] = 0;
    (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)a2 + 168))(a2, v22, v27);
  }
  else
  {
    uint64_t v26 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 168))(a2, v22, &v26);
  }
  fst::RemoveEpsLocal<fst::ArcTpl<fst::LatticeWeightTpl<float>>>(a2);
  if (__p)
  {
    uint64_t v32 = __p;
    operator delete(__p);
  }
  return 1;
}

void sub_9CCC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float kaldi::GetCutoffHelper<kaldi::FasterDecoder,kaldi::FasterDecoderOptions,kaldi::HashList<int,kaldi::FasterDecoder::Token *>::Elem>(void *a1, uint64_t a2, uint64_t a3, void *a4, float *a5, void *a6, int a7, double a8)
{
  uint64_t v9 = a3;
  if (a7) {
    int v10 = *(_DWORD *)(a2 + 8);
  }
  else {
    int v10 = 0;
  }
  if (*(_DWORD *)(a2 + 4) == 0x7FFFFFFF && v10 == 0)
  {
    uint64_t v29 = 0;
    float v30 = INFINITY;
    if (a3)
    {
      do
      {
        float v31 = *(double *)(*(void *)(v9 + 8) + 32);
        if (v30 <= v31)
        {
          BOOL v32 = 1;
        }
        else
        {
          float v30 = *(double *)(*(void *)(v9 + 8) + 32);
          BOOL v32 = a6 == 0;
        }
        if (!v32)
        {
          *a6 = v9;
          float v30 = v31;
        }
        uint64_t v9 = *(void *)(v9 + 16);
        ++v29;
      }
      while (v9);
    }
    if (a4) {
      *a4 = v29;
    }
    if (a5) {
      *a5 = *(float *)a2;
    }
    return v30 + *(float *)a2;
  }
  else
  {
    unint64_t v44 = *(int *)(a2 + 4);
    unint64_t v13 = (void **)(a1 + 17);
    a1[18] = a1[17];
    uint64_t v14 = 0;
    if (a3)
    {
      float v15 = INFINITY;
      do
      {
        a8 = *(double *)(*(void *)(v9 + 8) + 32);
        float v16 = a8;
        float v18 = (float *)a1[18];
        unint64_t v17 = a1[19];
        if ((unint64_t)v18 >= v17)
        {
          int v20 = (float *)*v13;
          uint64_t v21 = ((char *)v18 - (unsigned char *)*v13) >> 2;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v23 = v17 - (void)v20;
          if (v23 >> 1 > v22) {
            unint64_t v22 = v23 >> 1;
          }
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v22;
          }
          if (v24)
          {
            double v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 19), v24);
            int v20 = (float *)a1[17];
            float v18 = (float *)a1[18];
          }
          else
          {
            double v25 = 0;
          }
          uint64_t v26 = (float *)&v25[4 * v21];
          *uint64_t v26 = v16;
          unsigned int v19 = v26 + 1;
          while (v18 != v20)
          {
            int v27 = *((_DWORD *)v18-- - 1);
            LODWORD(a8) = v27;
            *((_DWORD *)v26-- - 1) = v27;
          }
          a1[17] = v26;
          a1[18] = v19;
          a1[19] = &v25[4 * v24];
          if (v20) {
            operator delete(v20);
          }
        }
        else
        {
          float *v18 = v16;
          unsigned int v19 = v18 + 1;
        }
        a1[18] = v19;
        if (v15 <= v16)
        {
          BOOL v28 = 1;
        }
        else
        {
          float v15 = v16;
          BOOL v28 = a6 == 0;
        }
        if (!v28)
        {
          *a6 = v9;
          float v15 = v16;
        }
        uint64_t v9 = *(void *)(v9 + 16);
        ++v14;
      }
      while (v9);
    }
    else
    {
      float v15 = INFINITY;
    }
    if (a4) {
      *a4 = v14;
    }
    float v34 = *(float *)a2;
    BOOL v35 = (float *)a1[17];
    int v36 = (float *)a1[18];
    unint64_t v37 = v36 - v35;
    if (v37 <= v44)
    {
      float v33 = INFINITY;
    }
    else
    {
      uint64_t v38 = &v35[v44];
      if (v38 != v36)
      {
        std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(v35, v38, v36, *(float *)&a8);
        BOOL v35 = (float *)a1[17];
        int v36 = (float *)a1[18];
        unint64_t v37 = v36 - v35;
      }
      float v33 = v35[v44];
    }
    float v39 = v15 + v34;
    float v40 = INFINITY;
    if (v37 > v10) {
      float v40 = v15;
    }
    if (v10 && v37 > v10)
    {
      unint64_t v41 = &v35[v10];
      if (v37 > v44) {
        int v36 = &v35[v44];
      }
      if (v41 != v36)
      {
        std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(v35, v41, v36, v40);
        BOOL v35 = (float *)*v13;
      }
      float v40 = v35[v10];
    }
    if (v33 >= v39)
    {
      if (v40 <= v39)
      {
        *a5 = *(float *)a2;
        return v39;
      }
      else
      {
        if (a5) {
          *a5 = (float)(v40 - v15) + *(float *)(a2 + 12);
        }
        return v40;
      }
    }
    else if (a5)
    {
      *a5 = (float)(v33 - v15) + *(float *)(a2 + 12);
    }
  }
  return v33;
}

void *kaldi::HashList<int,kaldi::FasterDecoder::Token *>::~HashList(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      ++v3;
      uint64_t v2 = *(void *)(v2 + 16);
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = (void *)a1[7];
  uint64_t v5 = (unsigned char *)a1[8];
  if (v5 == (unsigned char *)v4)
  {
    uint64_t v7 = 0;
    uint64_t v4 = (void *)a1[8];
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    do
    {
      if (v4[v6]) {
        operator delete[]();
      }
      ++v6;
      v7 += 1024;
    }
    while (v6 < (v5 - (unsigned char *)v4) >> 3);
  }
  if (v3 != v7 && kaldi::g_kaldi_verbose_level > -2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13, "~HashList", "../subproject/libquasar/libkaldi/src/util/hash-list-inl.h", 122);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Possible memory leak: ", 22);
    uint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" != ", 4);
    uint64_t v9 = (void *)std::ostream::operator<<();
    int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": you might have forgotten to call Delete on ", 45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"some Elems", 10);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    uint64_t v4 = (void *)a1[7];
  }
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  double v11 = (void *)a1[3];
  if (v11)
  {
    a1[4] = v11;
    operator delete(v11);
  }
  return a1;
}

void std::vector<kaldi::HashList<int,kaldi::FasterDecoder::Token *>::HashBucket,std::allocator<kaldi::HashList<int,kaldi::FasterDecoder::Token *>::HashBucket>>::resize(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<kaldi::HashList<int,kaldi::FasterDecoder::Token *>::HashBucket,std::allocator<kaldi::HashList<int,kaldi::FasterDecoder::Token *>::HashBucket>>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<kaldi::HashList<int,kaldi::FasterDecoder::Token *>::HashBucket,std::allocator<kaldi::HashList<int,kaldi::FasterDecoder::Token *>::HashBucket>>::__append(void **a1, unint64_t a2, _OWORD *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  uint64_t v9 = *(_OWORD **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 4)
  {
    if (a2)
    {
      uint64_t v16 = 16 * a2;
      unint64_t v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 16;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 4);
    if (v11 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 4;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 3 > v11) {
      unint64_t v11 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      float v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::TransitionModel::Tuple>>(v6, v14);
    }
    else {
      float v15 = 0;
    }
    float v18 = &v15[16 * v12];
    unsigned int v19 = &v18[16 * a2];
    uint64_t v20 = 16 * a2;
    uint64_t v21 = v18;
    do
    {
      *(_OWORD *)uint64_t v21 = *a3;
      v21 += 16;
      v20 -= 16;
    }
    while (v20);
    unint64_t v22 = &v15[16 * v14];
    unint64_t v24 = (char *)*a1;
    uint64_t v23 = (char *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v23 - 1);
        v18 -= 16;
        v23 -= 16;
      }
      while (v23 != v24);
      uint64_t v23 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

uint64_t kaldi::HashList<int,kaldi::FasterDecoder::Token *>::New(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (!result) {
    operator new[]();
  }
  *(void *)(a1 + 48) = *(void *)(result + 16);
  return result;
}

float std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(float *a1, float *a2, float *a3, float result)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    do
    {
      unint64_t v7 = v4 - a1;
      if (v7 < 2) {
        break;
      }
      if (v7 == 3)
      {
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(a1, a1 + 1, v4 - 1);
        return result;
      }
      if (v7 == 2)
      {
        uint64_t result = *(v4 - 1);
        float v30 = *a1;
        if (result < *a1)
        {
          *a1 = result;
          *(v4 - 1) = v30;
        }
        return result;
      }
      if ((char *)v4 - (char *)a1 <= 31)
      {
        return std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(a1, v4, result);
      }
      uint64_t v8 = &a1[v7 >> 1];
      uint64_t v9 = v4 - 1;
      int v10 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(a1, v8, v4 - 1);
      uint64_t result = *a1;
      if (*a1 >= *v8)
      {
        unint64_t v11 = v4 - 1;
        while (--v11 != a1)
        {
          if (*v11 < *v8)
          {
            *a1 = *v11;
            float *v11 = result;
            ++v10;
            goto LABEL_13;
          }
        }
        uint64_t v21 = a1 + 1;
        if (result >= *v9)
        {
          while (v21 != v9)
          {
            float v22 = *v21;
            if (result < *v21)
            {
              *v21++ = *v9;
              *uint64_t v9 = v22;
              goto LABEL_45;
            }
            ++v21;
          }
          return result;
        }
LABEL_45:
        if (v21 == v9) {
          return result;
        }
        while (1)
        {
          float v25 = *a1;
          do
          {
            float v26 = *v21++;
            uint64_t result = v26;
          }
          while (v25 >= v26);
          int v27 = v21 - 1;
          do
          {
            float v28 = *--v9;
            float v29 = v28;
          }
          while (v25 < v28);
          if (v27 >= v9) {
            break;
          }
          float *v27 = v29;
          *uint64_t v9 = result;
        }
        a1 = v21 - 1;
        if (v27 > a2) {
          return result;
        }
      }
      else
      {
        unint64_t v11 = v4 - 1;
LABEL_13:
        uint64_t v12 = a1 + 1;
        if (a1 + 1 >= v11)
        {
          uint64_t v16 = a1 + 1;
        }
        else
        {
          uint64_t v13 = a1 + 1;
          while (1)
          {
            float v14 = *v8;
            do
            {
              float v15 = *v13++;
              uint64_t result = v15;
            }
            while (v15 < v14);
            uint64_t v16 = v13 - 1;
            do
            {
              float v17 = *--v11;
              float v18 = v17;
            }
            while (v17 >= v14);
            if (v16 >= v11) {
              break;
            }
            *uint64_t v16 = v18;
            float *v11 = result;
            ++v10;
            if (v16 == v8) {
              uint64_t v8 = v11;
            }
          }
        }
        if (v16 != v8)
        {
          uint64_t result = *v8;
          float v19 = *v16;
          if (*v8 < *v16)
          {
            *uint64_t v16 = result;
            *uint64_t v8 = v19;
            ++v10;
          }
        }
        if (v16 == a2) {
          return result;
        }
        if (!v10)
        {
          if (v16 <= a2)
          {
            uint64_t v23 = v16 + 1;
            while (v23 != v4)
            {
              float v24 = *(v23 - 1);
              uint64_t result = *v23++;
              if (result < v24) {
                goto LABEL_29;
              }
            }
          }
          else
          {
            while (v12 != v16)
            {
              float v20 = *(v12 - 1);
              uint64_t result = *v12++;
              if (result < v20) {
                goto LABEL_29;
              }
            }
          }
          return result;
        }
LABEL_29:
        if (v16 <= a2) {
          a1 = v16 + 1;
        }
        else {
          uint64_t v4 = v16;
        }
      }
    }
    while (v4 != a2);
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(float *a1, float *a2, float *a3)
{
  float v3 = *a2;
  float v4 = *a1;
  float v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    float v6 = *a1;
    if (*a2 >= *a1) {
      return 1;
    }
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

float std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(float *a1, float *a2, float result)
{
  while (a1 != a2 - 1)
  {
    float v3 = a1++;
    if (v3 != a2 && a1 != a2)
    {
      uint64_t result = *v3;
      float v4 = a1;
      float v5 = v3;
      float v6 = a1;
      do
      {
        float v7 = *v6++;
        float v8 = v7;
        if (v7 < result)
        {
          uint64_t result = v8;
          float v5 = v4;
        }
        float v4 = v6;
      }
      while (v6 != a2);
      if (v5 != v3)
      {
        uint64_t result = *v3;
        float *v3 = *v5;
        float *v5 = result;
      }
    }
  }
  return result;
}

uint64_t kaldi::DecodableMatrixScaledMapped::DecodableMatrixScaledMapped(uint64_t a1, uint64_t a2, kaldi::ContextDependency *this, float a4)
{
  *(void *)a1 = &off_262D00;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = this;
  *(float *)(a1 + 24) = a4;
  *(unsigned char *)(a1 + 28) = 0;
  if (kaldi::ContextDependency::ContextWidth(this) != *(_DWORD *)(a2 + 240))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "DecodableMatrixScaledMapped", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/decoder/decodable-matrix.cc", 119);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"DecodableMatrixScaledMapped: mismatch, matrix has ", 50);
    kaldi::ContextDependency::ContextWidth(this);
    float v7 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" rows but transition-model has ", 31);
    float v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" pdf-ids.", 9);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  return a1;
}

void sub_9D8B0(_Unwind_Exception *a1)
{
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::DecodableMatrixScaledMapped::NumFrames(kaldi::ContextDependency **this)
{
  return kaldi::ContextDependency::CentralPosition(this[2]);
}

BOOL kaldi::DecodableMatrixScaledMapped::IsLastFrame(kaldi::DecodableMatrixScaledMapped *this, int a2)
{
  if ((*(int (**)(kaldi::DecodableMatrixScaledMapped *))(*(void *)this + 80))(this) <= a2) {
    kaldi::KaldiAssertFailure_((kaldi *)"IsLastFrame", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/decoder/decodable-matrix.cc", (const char *)&stru_68.addr + 2, "frame < NumFrames()", v4);
  }
  return (*(unsigned int (**)(kaldi::DecodableMatrixScaledMapped *))(*(void *)this + 80))(this) - 1 == a2;
}

float kaldi::DecodableMatrixScaledMapped::LogLikelihood(kaldi::DecodableMatrixScaledMapped *this, unsigned int a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *((void *)this + 1);
  uint64_t v6 = *(void *)(v5 + 96);
  if (a3 >= (unint64_t)((*(void *)(v5 + 104) - v6) >> 2)) {
    kaldi::KaldiAssertFailure_((kaldi *)"TransitionIdToPdf", "../subproject/libquasar/libkaldi/src/hmm/transition-model.h", stru_158.sectname, "static_cast<size_t>(trans_id) < tid2pdf_.size()", a5);
  }
  float v7 = *((float *)this + 6);
  return v7 * kaldi::MatrixBase<float>::operator()(*((void *)this + 2), a2, *(_DWORD *)(v6 + 4 * a3), a4, a5);
}

uint64_t kaldi::DecodableMatrixScaledMapped::NumIndices(kaldi::DecodableMatrixScaledMapped *this)
{
  return ((*(void *)(*((void *)this + 1) + 152) - *(void *)(*((void *)this + 1) + 144)) >> 2)
       - 1;
}

void kaldi::DecodableMatrixScaledMapped::~DecodableMatrixScaledMapped(kaldi::DecodableMatrixScaledMapped *this)
{
  *(void *)this = &off_262D00;
  if (*((unsigned char *)this + 28))
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2)
    {
      kaldi::Matrix<float>::~Matrix(v2);
      operator delete();
    }
  }

  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(this);
}

{
  uint64_t vars8;

  kaldi::DecodableMatrixScaledMapped::~DecodableMatrixScaledMapped(this);

  operator delete();
}

void kaldi::DecodableInterface::NumFramesReady(kaldi::DecodableInterface *this)
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "NumFramesReady", "../subproject/libquasar/libkaldi/src/itf/decodable-itf.h", 108);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "NumFramesReady() not implemented for this decodable type.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

double kaldi::DecodableInterface::GetSilencePosterior(kaldi::DecodableInterface *this)
{
  return 0.0;
}

uint64_t kaldi::CuSubMatrix<float>::~CuSubMatrix(uint64_t a1)
{
  *(void *)a1 = off_262D80;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);
}

uint64_t *std::vector<kaldi::CuMatrix<float>>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = result[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *result) >> 4);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    return (uint64_t *)std::vector<kaldi::CuMatrix<float>>::__append(result, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *result + 48 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = v3 - 48;
      uint64_t v9 = (void *)(v3 - 48);
      int v10 = (void *)(v3 - 48);
      do
      {
        uint64_t v11 = *v10;
        v10 -= 6;
        uint64_t result = (uint64_t *)(*(uint64_t (**)(void *))(v11 + 16))(v9);
        v8 -= 48;
        BOOL v12 = v9 == (void *)v7;
        uint64_t v9 = v10;
      }
      while (!v12);
    }
    v2[1] = v7;
  }
  return result;
}

void kaldi::CuSubMatrix<float>::Read()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "Read", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", 1029);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Function not implemented for this class");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::CuSubMatrix<float>::~CuSubMatrix(uint64_t a1)
{
  *(void *)a1 = off_262D80;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a1);

  operator delete();
}

void std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    BOOL v5 = **a1;
    if (v4 != v2)
    {
      unint64_t v6 = v4 - 48;
      uint64_t v7 = v4 - 48;
      uint64_t v8 = v4 - 48;
      do
      {
        uint64_t v9 = *(void *)v8;
        v8 -= 48;
        (*(void (**)(char *))(v9 + 16))(v7);
        v6 -= 48;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<kaldi::CuMatrix<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 48 * a2;
      uint64_t v14 = 48 * a2;
      uint64_t v15 = *(void *)(result - 8);
      do
      {
        *(_OWORD *)(v7 + 24) = 0uLL;
        *(_OWORD *)(v7 + 8) = 0uLL;
        *(void *)uint64_t v7 = off_262DC8;
        *(unsigned char *)(v7 + 40) = 0;
        v7 += 48;
        v15 += 48;
        v14 -= 48;
      }
      while (v14);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 4);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    v20[4] = result;
    if (v11) {
      BOOL v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element>>(result, v11);
    }
    else {
      BOOL v12 = 0;
    }
    uint64_t v16 = &v12[48 * v8];
    v20[0] = v12;
    v20[1] = v16;
    v20[3] = &v12[48 * v11];
    float v17 = &v16[48 * a2];
    uint64_t v18 = 48 * a2;
    float v19 = v16;
    do
    {
      *(_OWORD *)(v19 + 24) = 0uLL;
      *(_OWORD *)(v19 + 8) = 0uLL;
      *(void *)float v19 = off_262DC8;
      v19[40] = 0;
      v19 += 48;
      v16 += 48;
      v18 -= 48;
    }
    while (v18);
    v20[2] = v17;
    std::vector<kaldi::CuMatrix<float>>::__swap_out_circular_buffer(a1, v20);
    return std::__split_buffer<kaldi::CuMatrix<float>>::~__split_buffer((uint64_t)v20);
  }
  return result;
}

void sub_9DF24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::CuMatrix<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::CuMatrix<float>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>,std::reverse_iterator<kaldi::CuMatrix<float>*>,std::reverse_iterator<kaldi::CuMatrix<float>*>,std::reverse_iterator<kaldi::CuMatrix<float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>,std::reverse_iterator<kaldi::CuMatrix<float>*>,std::reverse_iterator<kaldi::CuMatrix<float>*>,std::reverse_iterator<kaldi::CuMatrix<float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 0; a3 + i != a5; kaldi::CuMatrix<float>::CuMatrix(i + a7, i + a3, 111))
    i -= 48;
  return a6;
}

uint64_t std::__split_buffer<kaldi::CuMatrix<float>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(i - 48);
    *(void *)(a1 + 16) = i - 48;
    (*(void (**)(void))(v4 + 16))();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t kaldi::CuSubMatrix<float>::CuSubMatrix(uint64_t result, uint64_t a2, int a3, int a4, const char *a5, int a6)
{
  int v6 = *(_DWORD *)(a2 + 24);
  int v7 = *(_DWORD *)(a2 + 28) - a5;
  *(void *)(result + 8) = *(void *)(a2 + 8) + 4 * v6 * a3 + 4 * (int)a5;
  uint64_t v8 = *(void *)(a2 + 32);
  *(_DWORD *)(result + 16) = a6;
  *(_DWORD *)(result + 20) = a4;
  *(_DWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 28) = v7 - v6 * a3;
  *(void *)(result + 32) = v8;
  *(void *)uint64_t result = off_262D80;
  if (((a5 | a3) & 0x80000000) != 0
    || a4 + a3 > *(_DWORD *)(a2 + 20)
    || a6 + (int)a5 > *(_DWORD *)(a2 + 16))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"CuSubMatrix", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", &stru_388.segname[3], "(row_offset >= 0) && (col_offset >= 0) && (row_offset + num_rows <= mat.num_rows_) && (col_offset + num_cols <= mat.num_cols_)", a5);
  }
  return result;
}

void sub_9E168(_Unwind_Exception *a1)
{
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v1);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>,std::reverse_iterator<kaldi::CuMatrix<float>*>,std::reverse_iterator<kaldi::CuMatrix<float>*>,std::reverse_iterator<kaldi::CuMatrix<float>*>>(void *a1, void *a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = a1;
  do
  {
    uint64_t v5 = *v4;
    v4 += 6;
    (*(void (**)(void))(v5 + 16))();
    v3 += 6;
    uint64_t result = v4;
  }
  while (v4 != a2);
  return result;
}

uint64_t kaldi::cu::RegularizeL1<float>(_DWORD *a1, uint64_t a2, float a3, float a4, uint64_t a5, uint64_t a6, const char *a7)
{
  if (a1[5] != *(_DWORD *)(a2 + 20) || a1[4] != *(_DWORD *)(a2 + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"RegularizeL1", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-math.cc", &stru_20.segname[7], "SameDim(*weight, *grad)", a7);
  }
  unint64_t v11 = (kaldi::ContextDependency *)(a1 + 2);
  uint64_t result = kaldi::ContextDependency::CentralPosition((kaldi::ContextDependency *)(a1 + 2));
  if ((int)result >= 1)
  {
    signed int v13 = 0;
    uint64_t v14 = a2 + 8;
    float v15 = -a4;
    do
    {
      if ((int)kaldi::ContextDependency::ContextWidth(v11) >= 1)
      {
        signed int v18 = 0;
        do
        {
          if (*(float *)kaldi::MatrixBase<float>::operator()((uint64_t)v11, v13, v18, v16, v17) != 0.0)
          {
            if (*(float *)kaldi::MatrixBase<float>::operator()((uint64_t)v11, v13, v18, v19, v20) >= 0.0) {
              float v23 = a3;
            }
            else {
              float v23 = -a3;
            }
            float v24 = *(float *)kaldi::MatrixBase<float>::operator()((uint64_t)v11, v13, v18, v21, v22);
            float v27 = *(float *)kaldi::MatrixBase<float>::operator()((uint64_t)v11, v13, v18, v25, v26);
            BOOL v30 = (float)((float)(v27
                                + (float)(v15 * *(float *)kaldi::MatrixBase<float>::operator()(v14, v13, v18, v28, v29)))
                        - v23) > 0.0;
            float v33 = (float *)kaldi::MatrixBase<float>::operator()((uint64_t)v11, v13, v18, v31, v32);
            if (v24 > 0.0 == v30)
            {
              float *v33 = *v33 - v23;
            }
            else
            {
              float *v33 = 0.0;
              *(_DWORD *)kaldi::MatrixBase<float>::operator()(v14, v13, v18, v34, v35) = 0;
            }
          }
          ++v18;
        }
        while (v18 < (int)kaldi::ContextDependency::ContextWidth(v11));
      }
      ++v13;
      uint64_t result = kaldi::ContextDependency::CentralPosition(v11);
    }
    while (v13 < (int)result);
  }
  return result;
}

uint64_t kaldi::cu::Splice<float>(_DWORD *a1, unsigned int *a2, _DWORD *a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *a2;
  if (v5 * a1[4] != a3[4]) {
    kaldi::KaldiAssertFailure_((kaldi *)"Splice", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-math.cc", &stru_68.segname[7], "src.NumCols()*frame_offsets.Dim() == tgt->NumCols()", a5);
  }
  if (a1[5] != a3[5]) {
    kaldi::KaldiAssertFailure_((kaldi *)"Splice", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-math.cc", &stru_68.segname[8], "src.NumRows() == tgt->NumRows()", a5);
  }
  uint64_t v7 = *((void *)a2 + 1);
  uint64_t v8 = (kaldi::ContextDependency *)(a3 + 2);
  uint64_t result = kaldi::ContextDependency::CentralPosition((kaldi::ContextDependency *)(a3 + 2));
  if ((int)result >= 1)
  {
    int v10 = 0;
    unint64_t v11 = (kaldi::ContextDependency *)(a1 + 2);
    do
    {
      if ((int)v5 >= 1)
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          int v13 = (*(_DWORD *)(v7 + 4 * i) + v10) & ~((*(_DWORD *)(v7 + 4 * i) + v10) >> 31);
          if (v13 >= (int)kaldi::ContextDependency::CentralPosition(v11)) {
            int v13 = kaldi::ContextDependency::CentralPosition(v11) - 1;
          }
          if (*((_DWORD *)v8 + 3) <= v10) {
            kaldi::KaldiAssertFailure_((kaldi *)"RowData", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", &stru_68.sectname[15], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v14);
          }
          uint64_t v15 = *(void *)v8;
          int v16 = *((_DWORD *)v8 + 4);
          int v17 = kaldi::ContextDependency::ContextWidth(v11);
          if (*((_DWORD *)v11 + 3) <= v13) {
            kaldi::KaldiAssertFailure_((kaldi *)"RowData", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", &stru_68.segname[6], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v18);
          }
          uint64_t v19 = (void *)(v15 + 4 * v16 * v10 + 4 * v17 * (int)i);
          float v20 = (const void *)(*(void *)v11 + 4 * *((_DWORD *)v11 + 4) * v13);
          int v21 = kaldi::ContextDependency::ContextWidth(v11);
          memcpy(v19, v20, 4 * v21);
        }
      }
      ++v10;
      uint64_t result = kaldi::ContextDependency::CentralPosition(v8);
    }
    while (v10 < (int)result);
  }
  return result;
}

uint64_t kaldi::cu::Copy<float>(uint64_t a1, unsigned int *a2, _DWORD *a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *a2;
  if (v5 != a3[4]) {
    kaldi::KaldiAssertFailure_((kaldi *)"Copy", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-math.cc", (const char *)&stru_68.align + 3, "copy_from_indices.Dim() == tgt->NumCols()", a5);
  }
  if (*(_DWORD *)(a1 + 20) != a3[5]) {
    kaldi::KaldiAssertFailure_((kaldi *)"Copy", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-math.cc", (const char *)&stru_68.reloff, "src.NumRows() == tgt->NumRows()", a5);
  }
  uint64_t v7 = *((void *)a2 + 1);
  uint64_t v8 = (kaldi::ContextDependency *)(a3 + 2);
  uint64_t result = kaldi::ContextDependency::CentralPosition((kaldi::ContextDependency *)(a3 + 2));
  if ((int)result >= 1)
  {
    signed int v12 = 0;
    uint64_t v13 = a1 + 8;
    do
    {
      if ((int)v5 >= 1)
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          float v15 = kaldi::MatrixBase<float>::operator()(v13, v12, *(_DWORD *)(v7 + 4 * i), v10, v11);
          *(float *)kaldi::MatrixBase<float>::operator()((uint64_t)v8, v12, i, v16, v17) = v15;
        }
      }
      ++v12;
      uint64_t result = kaldi::ContextDependency::CentralPosition(v8);
    }
    while (v12 < (int)result);
  }
  return result;
}

unsigned int *kaldi::CuMatrixBase<float>::CopyFromMat<float>(unsigned int *result, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a2 + 20)) {
    return kaldi::MatrixBase<float>::CopyFromMat<float>(result + 2, a2 + 8, a3, a4, a5);
  }
  return result;
}

uint64_t kaldi::CuMatrix<float>::CuMatrix<float>(uint64_t a1, kaldi::ContextDependency *this, int a3, uint64_t a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a4;
  *(void *)a1 = off_262DC8;
  *(unsigned char *)(a1 + 40) = 0;
  if (a3 == 111)
  {
    uint64_t v7 = kaldi::ContextDependency::CentralPosition(this);
    uint64_t v8 = kaldi::ContextDependency::ContextWidth(this);
  }
  else
  {
    uint64_t v7 = kaldi::ContextDependency::ContextWidth(this);
    uint64_t v8 = kaldi::ContextDependency::CentralPosition(this);
  }
  kaldi::CuMatrix<float>::Resize(a1, v7, v8, 1u, 0);
  kaldi::MatrixBase<float>::CopyFromMat<float>((unsigned int *)(a1 + 8), (uint64_t)this, a3, v9, v10);
  return a1;
}

void kaldi::CuMatrix<float>::Resize(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, const char *a5)
{
  if (a4 >= 4) {
    kaldi::KaldiAssertFailure_((kaldi *)"Resize", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)&stru_20.fileoff + 1, "resize_type == kSetZero || resize_type == kUndefined || resize_type == kSetZeroIfNewMemory || resize_type == kCopyData", a5);
  }
  if (a3 * a2)
  {
    int v9 = a4;
    if (a5) {
      int v10 = *(_DWORD *)(a1 + 24) != a3;
    }
    else {
      int v10 = 0;
    }
    if (a4 == 3)
    {
      if (*(_DWORD *)(a1 + 20) == a2 && ((*(_DWORD *)(a1 + 16) == a3) & ~v10) != 0) {
        return;
      }
      int v9 = 0;
    }
    int v11 = *(_DWORD *)(a1 + 24);
    if (v11 < 1) {
      unint64_t v12 = 0;
    }
    else {
      unint64_t v12 = *(_DWORD *)(a1 + 28) / v11;
    }
    if (v11 < (int)a3) {
      goto LABEL_19;
    }
    if (v12 < (int)a2) {
      LOBYTE(v10) = 1;
    }
    if (v10)
    {
LABEL_19:
      if (v9 == 2)
      {
        int v14 = *(_DWORD *)(a1 + 16);
        int v13 = *(_DWORD *)(a1 + 20);
        if (v13 >= (int)a2) {
          uint64_t v15 = a2;
        }
        else {
          uint64_t v15 = v13;
        }
        if (v14 >= (int)a3) {
          uint64_t v16 = a3;
        }
        else {
          uint64_t v16 = v14;
        }
        kaldi::Matrix<float>::Matrix((uint64_t)&v27, a2, a3, 0, a5);
        kaldi::SubMatrix<float>::SubMatrix(v26, &v27, 0, v15, 0, v16);
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v24, a1, 0, v15, 0, v16);
        kaldi::MatrixBase<float>::CopyFromMat<float>(v26, (uint64_t)&v25, 111, v17, v18);
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v26);
      }
      else
      {
        float v20 = (void *)(a1 + 8);
        uint64_t v19 = *(void **)(a1 + 8);
        if (v19 && !*(unsigned char *)(a1 + 40)) {
          free(v19);
        }
        *float v20 = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        kaldi::Matrix<float>::Matrix((uint64_t)&v27, a2, a3, v9, a5);
      }
      uint64_t v21 = v27;
      uint64_t v27 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = v21;
      long long v22 = v28;
      long long v28 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)(a1 + 16) = v22;
      LOBYTE(v21) = v29;
      char v29 = *(unsigned char *)(a1 + 40);
      *(unsigned char *)(a1 + 40) = v21;
      kaldi::Matrix<float>::~Matrix((uint64_t)&v27);
    }
    else
    {
      *(_DWORD *)(a1 + 16) = a3;
      *(_DWORD *)(a1 + 20) = a2;
      if (!v9)
      {
        uint64_t v23 = a1 + 8;
        kaldi::MatrixBase<float>::SetZero(v23);
      }
    }
  }
  else
  {
    if (a3 | a2) {
      kaldi::KaldiAssertFailure_((kaldi *)"Resize", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)&stru_20.fileoff + 7, "rows == 0 && cols == 0", a5);
    }
    *(void *)(a1 + 16) = 0;
  }
}

void sub_9E97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator((uint64_t *)va);
  kaldi::Matrix<float>::~Matrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

unsigned int *kaldi::CuMatrixBase<float>::CopyFromMat(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  return kaldi::MatrixBase<float>::CopyFromMat<float>((unsigned int *)(a1 + 8), a2, a3, a4, a5);
}

unsigned int *kaldi::CuMatrixBase<float>::CopyToMat<float>(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, const char *a5)
{
  return kaldi::MatrixBase<float>::CopyFromMat<float>(a2, a1 + 8, a3, a4, a5);
}

void *kaldi::VectorBase<float>::CopyRowsFromMat(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 8) != a2[5] * a2[4]) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyRowsFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)&stru_798.nsects + 1, "dim_ == mat.NumCols() * mat.NumRows()", a5);
  }
  uint64_t v5 = (kaldi::ContextDependency *)(a2 + 2);

  return kaldi::VectorBase<float>::CopyRowsFromMat((char **)a1, v5);
}

uint64_t kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(a1, a2[5], a2[4]);
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(v4, (kaldi::ContextDependency *)(a2 + 2));
  return a1;
}

void sub_9EA54(_Unwind_Exception *a1)
{
  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::QuantizedMatrix<short>::QuantizedMatrix(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = kaldi::QuantizedMatrix<short>::QuantizedMatrix(a1, a2[5], a2[4]);
  kaldi::QuantizedMatrixBase<short>::CopyFromMat(v4, (kaldi::ContextDependency *)(a2 + 2));
  return a1;
}

void sub_9EAA4(_Unwind_Exception *a1)
{
  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

void kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(uint64_t a1, uint64_t a2)
{
}

void sub_9EAF4(_Unwind_Exception *a1)
{
  kaldi::VectorwiseQuantizedMatrix<signed char>::~VectorwiseQuantizedMatrix(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::VectorwiseQuantizedMatrix<signed char>::~VectorwiseQuantizedMatrix(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    operator delete();
  }
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    operator delete();
  }
  return a1;
}

uint64_t kaldi::VectorwiseQuantizedMatrix<short>::~VectorwiseQuantizedMatrix(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    operator delete();
  }
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    operator delete();
  }
  return a1;
}

void kaldi::QuantizedMatrixBase<signed char>::AddMat()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "AddMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", 2422);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::QuantizedMatrixBase<short>::AddMat()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "AddMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", 2422);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::CuMatrix<float>::CuMatrix(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, const char *a6)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a5;
  *(void *)a1 = off_262DC8;
  *(unsigned char *)(a1 + 40) = 0;
  kaldi::CuMatrix<float>::Resize(a1, a2, a3, a4, a6);
  return a1;
}

uint64_t kaldi::CuMatrix<float>::CuMatrix(uint64_t a1, uint64_t a2, int a3)
{
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = off_262DC8;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  if (a3 == 111)
  {
    uint64_t v7 = *(unsigned int *)(a2 + 16);
    uint64_t v6 = *(unsigned int *)(a2 + 20);
    BOOL v8 = *(_DWORD *)(a2 + 24) == v7;
  }
  else
  {
    uint64_t v6 = *(unsigned int *)(a2 + 16);
    uint64_t v7 = *(unsigned int *)(a2 + 20);
    BOOL v8 = 0;
  }
  kaldi::CuMatrix<float>::Resize(a1, v6, v7, 1u, (const char *)v8);
  if (*(_DWORD *)(a2 + 20)) {
    kaldi::MatrixBase<float>::CopyFromMat<float>((unsigned int *)(a1 + 8), a2 + 8, a3, v9, v10);
  }
  return a1;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;

  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = off_262DC8;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  if (a3 == 111)
  {
    uint64_t v7 = *(unsigned int *)(a2 + 16);
    uint64_t v6 = *(unsigned int *)(a2 + 20);
  }
  else
  {
    uint64_t v6 = *(unsigned int *)(a2 + 16);
    uint64_t v7 = *(unsigned int *)(a2 + 20);
  }
  kaldi::CuMatrix<float>::Resize(a1, v6, v7, 1u, 0);
  if (*(_DWORD *)(a2 + 20)) {
    kaldi::MatrixBase<float>::CopyFromMat<float>((unsigned int *)(a1 + 8), a2 + 8, a3, v8, v9);
  }
  return a1;
}

uint64_t kaldi::CuMatrix<float>::operator=(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 32)) {
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  kaldi::CuMatrix<float>::Resize(a1, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 1u, 0);
  if (*(_DWORD *)(a2 + 20)) {
    kaldi::MatrixBase<float>::CopyFromMat<float>((unsigned int *)(a1 + 8), a2 + 8, 111, v4, v5);
  }
  return a1;
}

uint64_t kaldi::CuMatrix<float>::operator=(uint64_t a1, kaldi::ContextDependency *this)
{
  uint64_t v4 = kaldi::ContextDependency::CentralPosition(this);
  uint64_t v5 = kaldi::ContextDependency::ContextWidth(this);
  kaldi::CuMatrix<float>::Resize(a1, v4, v5, 1u, 0);
  kaldi::MatrixBase<float>::CopyFromMat<float>((unsigned int *)(a1 + 8), (uint64_t)this, 111, v6, v7);
  return a1;
}

uint64_t kaldi::CuMatrix<float>::Swap(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = *(void *)(result + 8);
  *(void *)(result + 8) = v2;
  LODWORD(v2) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = v2;
  LODWORD(v2) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(result + 20);
  *(_DWORD *)(result + 20) = v2;
  LODWORD(v2) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 24) = v2;
  LODWORD(v2) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(result + 28);
  *(_DWORD *)(result + 28) = v2;
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = *(void *)(result + 32);
  *(void *)(result + 32) = v3;
  LOBYTE(v3) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(result + 40);
  *(unsigned char *)(result + 40) = v3;
  return result;
}

void kaldi::CuMatrixBase<float>::SetZero(uint64_t a1)
{
}

uint64_t kaldi::CuMatrix<float>::Read(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::Matrix<float>::Matrix((uint64_t)&v12, *(unsigned int *)(a1 + 20), *(unsigned int *)(a1 + 16), 1, (const char *)(*(_DWORD *)(a1 + 24) == *(_DWORD *)(a1 + 16)));
  kaldi::Matrix<float>::Read((uint64_t)&v12, a2, a3, 0, a4);
  BOOL v8 = *(void **)(a1 + 8);
  if (v8 && !*(unsigned char *)(a1 + 40)) {
    free(v8);
  }
  *(void *)(a1 + 8) = v12;
  long long v9 = v13;
  uint64_t v12 = 0;
  long long v13 = 0uLL;
  *(_OWORD *)(a1 + 16) = v9;
  char v10 = v14;
  char v14 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v10;
  return kaldi::Matrix<float>::~Matrix((uint64_t)&v12);
}

void sub_9F038(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::CuMatrix<float>::~CuMatrix(uint64_t a1)
{
  *(void *)a1 = off_262DC8;
  uint64_t v3 = (void *)(a1 + 8);
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2 && !*(unsigned char *)(a1 + 40)) {
    free(v2);
  }
  void *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  return a1;
}

void kaldi::CuMatrix<float>::~CuMatrix(uint64_t a1)
{
  kaldi::CuMatrix<float>::~CuMatrix(a1);

  operator delete();
}

uint64_t kaldi::CuMatrix<float>::DataUnowned(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t kaldi::CuMatrixBase<float>::CopyCols(uint64_t a1, uint64_t a2, unsigned int **a3, uint64_t a4, const char *a5)
{
  return kaldi::MatrixBase<float>::CopyCols(a1 + 8, (uint64_t *)(a2 + 8), a3, a4, a5);
}

void *kaldi::CuArray<int>::CopyToVec(int *a1, std::vector<int> *this)
{
  std::vector<int>::pointer begin = this->__begin_;
  unint64_t v5 = (unint64_t)((char *)this->__end_ - (char *)this->__begin_) >> 2;
  std::vector<int>::size_type v6 = *a1;
  if (v6 != v5)
  {
    std::vector<int>::resize(this, v6);
    std::vector<int>::pointer begin = this->__begin_;
    LODWORD(v5) = *a1;
  }
  uint64_t v7 = (const void *)*((void *)a1 + 1);

  return memcpy(begin, v7, 4 * (int)v5);
}

uint64_t kaldi::CuMatrixBase<float>::CopyIndexedItems(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int a5)
{
  std::vector<int>::size_type v6 = (const char *)*a3;
  if (v6 != *(_DWORD *)a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyIndexedItems", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)&stru_7E0.flags, "row_index.Dim() == col_index.Dim()", v6);
  }
  uint64_t v7 = a1 + 8;
  BOOL v8 = (uint64_t *)(a2 + 8);
  uint64_t v9 = *((void *)a3 + 1);
  uint64_t v10 = *(void *)(a4 + 8);

  return kaldi::MatrixBase<float>::CopyIndexedItems(v7, v8, v9, v10, v6, a5);
}

void kaldi::CuMatrixBase<float>::CopyRows(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, const char *a5)
{
}

void kaldi::CuMatrixBase<float>::CopySelectedRows(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  int v5 = *(_DWORD *)(a2 + 20);
  if (*(_DWORD *)(a1 + 20) < v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopySelectedRows", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", &stru_830.segname[7], "num_rows_ >= src.NumRows()", a5);
  }
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopySelectedRows", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", &stru_830.segname[8], "num_cols_ == src.NumCols()", a5);
  }
  if (*(_DWORD *)(a3 + 16) != v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopySelectedRows", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", &stru_830.segname[9], "selection.Dim() == src.NumRows()", a5);
  }
  uint64_t v6 = a1 + 8;
  uint64_t v7 = a2 + 8;
  uint64_t v8 = a3 + 8;

  kaldi::MatrixBase<float>::CopySelectedRows(v6, v7, v8, a4, a5);
}

uint64_t kaldi::CuMatrixBase<float>::AddToDiag(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, float a6, float a7)
{
  return kaldi::MatrixBase<float>::AddToDiag(a1 + 8, a2 + 8, a6, a7, a3, a4, a5);
}

uint64_t kaldi::CuMatrixBase<float>::SetStride(uint64_t result, int a2)
{
  int v2 = *(_DWORD *)(result + 24);
  if (v2 != a2)
  {
    if (v2 > a2)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "SetStride", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", 531);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"New stride (", 12);
      uint64_t v3 = (void *)std::ostream::operator<<();
      uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") must not be smaller than", 26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" the current stride (", 21);
      int v5 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, ").");
      goto LABEL_8;
    }
    if (a2 % v2)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "SetStride", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", 536);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"New stride (", 12);
      uint64_t v6 = (void *)std::ostream::operator<<();
      uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)") must be a multiple of ", 24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"current stride (", 16);
      uint64_t v8 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, ").");
LABEL_8:
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
    }
    *(_DWORD *)(result + 20) = (*(_DWORD *)(result + 20) - 1) / (a2 / v2) + 1;
    *(_DWORD *)(result + 24) = a2;
  }
  return result;
}

void kaldi::CuMatrixBase<float>::AddMat(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5, float a6, float a7)
{
}

int *kaldi::CuMatrixBase<float>::CopyRowsFromVec(uint64_t a1, uint64_t a2)
{
  return kaldi::MatrixBase<float>::CopyRowsFromVec((int *)(a1 + 8), (char **)(a2 + 8));
}

int *kaldi::CuMatrixBase<float>::CopyRowsFromVec(uint64_t a1, char **a2)
{
  return kaldi::MatrixBase<float>::CopyRowsFromVec((int *)(a1 + 8), a2);
}

void kaldi::CuMatrixBase<float>::Sigmoid(_DWORD *a1, _DWORD *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (a1[5] != a2[5] || a1[4] != a2[4]) {
    kaldi::KaldiAssertFailure_((kaldi *)"Sigmoid", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)&stru_4C8.addr + 5, "SameDim(*this, src)", a5);
  }
  uint64_t v6 = (kaldi::ContextDependency *)(a1 + 2);
  uint64_t v7 = (kaldi::ContextDependency *)(a2 + 2);

  kaldi::MatrixBase<float>::Sigmoid(v6, v7, a3, a4, a5);
}

float *kaldi::CuMatrixBase<float>::GroupPnorm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  if (*(_DWORD *)(a2 + 16) % *(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
    kaldi::KaldiAssertFailure_((kaldi *)"GroupPnorm", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)&stru_518.addr, "src.NumCols() == this->NumCols() * group_size && this->NumRows() == src.NumRows()", a5);
  }
  uint64_t v6 = (float *)(a1 + 8);
  uint64_t v7 = a2 + 8;

  return kaldi::MatrixBase<float>::GroupPnorm(v6, v7, a6, a3, a4, a5);
}

uint64_t kaldi::CuMatrixBase<float>::GroupPnormDeriv(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  int v6 = *(_DWORD *)(a3 + 16);
  if (v6 <= 0) {
    kaldi::KaldiAssertFailure_((kaldi *)"GroupPnormDeriv", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)&stru_2E8.size, "src2.NumCols() > 0", a5);
  }
  if (*(_DWORD *)(a1 + 16) % v6) {
    kaldi::KaldiAssertFailure_((kaldi *)"GroupPnormDeriv", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)&stru_2E8.size + 2, "this->NumCols() == src2.NumCols() * group_size", a5);
  }
  uint64_t v7 = a1 + 8;
  uint64_t v8 = a2 + 8;
  uint64_t v9 = a3 + 8;

  return kaldi::MatrixBase<float>::GroupPnormDeriv(v7, v8, v9, a4, a5, a6);
}

void kaldi::CuMatrixBase<float>::Tanh(_DWORD *a1, _DWORD *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (a1[5] != a2[5] || a1[4] != a2[4]) {
    kaldi::KaldiAssertFailure_((kaldi *)"Tanh", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", &stru_5B8.sectname[10], "SameDim(*this, src)", a5);
  }
  int v6 = (kaldi::ContextDependency *)(a1 + 2);
  uint64_t v7 = (kaldi::ContextDependency *)(a2 + 2);

  kaldi::MatrixBase<float>::Tanh(v6, v7, a3, a4, a5);
}

void kaldi::CuMatrixBase<float>::ApplyTanh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
}

uint64_t *kaldi::CuMatrixBase<float>::DiffSigmoid(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6 = *(_DWORD *)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 20);
  BOOL v7 = v5 == *(_DWORD *)(a2 + 20) && v6 == *(_DWORD *)(a2 + 16);
  if (!v7 || (v5 == *(_DWORD *)(a3 + 20) ? (BOOL v8 = v6 == *(_DWORD *)(a3 + 16)) : (BOOL v8 = 0), !v8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"DiffSigmoid", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)&stru_568.offset + 3, "SameDim(*this, value) && SameDim(*this, diff)", a5);
  }
  uint64_t v9 = (uint64_t *)(a1 + 8);
  uint64_t v10 = (uint64_t *)(a2 + 8);
  uint64_t v11 = (uint64_t *)(a3 + 8);

  return kaldi::MatrixBase<float>::DiffSigmoid(v9, v10, v11, a4, a5);
}

uint64_t kaldi::CuMatrixBase<float>::DiffRelu(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = *(unsigned int *)(result + 16);
  int v5 = *(_DWORD *)(result + 20);
  if (v5 != *(_DWORD *)(a2 + 20) || v6 != *(_DWORD *)(a2 + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"DiffRelu", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)&stru_568.flags + 1, "SameDim(*this, value)", a5);
  }
  if (v5 != *(_DWORD *)(a3 + 20) || v6 != *(_DWORD *)(a3 + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"DiffRelu", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)&stru_568.flags + 2, "SameDim(*this, diff)", a5);
  }
  if (v5 >= 1)
  {
    int v9 = 0;
    uint64_t v10 = *(void *)(a3 + 8);
    uint64_t v11 = *(void *)(a2 + 8);
    uint64_t v12 = *(void *)(result + 8);
    uint64_t v13 = 4 * *(int *)(result + 24);
    uint64_t v14 = 4 * *(int *)(a3 + 24);
    uint64_t v15 = 4 * *(int *)(a2 + 24);
    do
    {
      if ((int)v6 >= 1)
      {
        uint64_t result = 0;
        do
        {
          int v16 = 0;
          if (*(float *)(v11 + result) > 0.0) {
            int v16 = *(_DWORD *)(v10 + result);
          }
          *(_DWORD *)(v12 + result) = v16;
          result += 4;
        }
        while (4 * v6 != result);
      }
      ++v9;
      v12 += v13;
      v10 += v14;
      v11 += v15;
    }
    while (v9 != v5);
  }
  return result;
}

uint64_t *kaldi::CuMatrixBase<float>::DiffTanh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::MatrixBase<float>::DiffTanh((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8), (uint64_t *)(a3 + 8), a4, a5);
}

void kaldi::CuMatrixBase<float>::AddMatMat(uint64_t a1, uint64_t a2, CBLAS_TRANSPOSE a3, uint64_t a4, const char *a5, float a6, float a7)
{
  int v7 = *(_DWORD *)(a4 + 20);
  if (a5 == 112) {
    int v8 = *(_DWORD *)(a4 + 20);
  }
  else {
    int v8 = *(_DWORD *)(a4 + 16);
  }
  if (a5 == 112) {
    int v7 = *(_DWORD *)(a4 + 16);
  }
  int v9 = *(_DWORD *)(a2 + 20);
  if (a3 == CblasTrans) {
    int v10 = *(_DWORD *)(a2 + 20);
  }
  else {
    int v10 = *(_DWORD *)(a2 + 16);
  }
  if (v8 != *(_DWORD *)(a1 + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)&stru_428.align, "m == NumCols()", a5);
  }
  if (a3 == CblasTrans) {
    int v9 = *(_DWORD *)(a2 + 16);
  }
  if (v9 != *(_DWORD *)(a1 + 20)) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)&stru_428.align + 1, "n == NumRows()", a5);
  }
  if (v7 != v10) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)&stru_428.align + 2, "k == k1", a5);
  }
  if (v8)
  {
    uint64_t v11 = a1 + 8;
    uint64_t v12 = a2 + 8;
    uint64_t v13 = a4 + 8;
    kaldi::MatrixBase<float>::AddMatMat(v11, v12, a3, v13, a5, a6, a7);
  }
}

_DWORD *kaldi::CuMatrixBase<float>::MaxoutForward(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a2 + 16) % a1[4] || a1[5] != *(_DWORD *)(a2 + 20)) {
    kaldi::KaldiAssertFailure_((kaldi *)"MaxoutForward", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)&stru_A60.flags + 3, "input.NumCols() % this->NumCols() == 0 && this->NumRows() == input.NumRows()", a5);
  }
  int v5 = a1 + 2;
  uint64_t v6 = a2 + 8;

  return kaldi::MatrixBase<float>::MaxoutForward(v5, v6, a3, a4, a5);
}

uint64_t kaldi::CuMatrixBase<float>::MaxoutDerivative(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5 = *(_DWORD *)(a1 + 16);
  if (v5 % *(_DWORD *)(a3 + 16) || (int v6 = *(_DWORD *)(a1 + 20), v6 != *(_DWORD *)(a3 + 20))) {
    kaldi::KaldiAssertFailure_((kaldi *)"MaxoutDerivative", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", &stru_AA8.sectname[15], "this->NumCols() % output.NumCols() == 0 && this->NumRows() == output.NumRows()", a5);
  }
  if (v5 != *(_DWORD *)(a2 + 16) || v6 != *(_DWORD *)(a2 + 20)) {
    kaldi::KaldiAssertFailure_((kaldi *)"MaxoutDerivative", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", &stru_AA8.segname[1], "this->NumCols() == input.NumCols() && this->NumRows() == input.NumRows()", a5);
  }
  uint64_t v7 = a1 + 8;
  uint64_t v8 = a2 + 8;
  uint64_t v9 = a3 + 8;

  return kaldi::MatrixBase<float>::MaxoutDerivative(v7, v8, v9, a4, a5);
}

void kaldi::CuMatrixBase<float>::ApplyPow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
}

uint64_t kaldi::CuMatrixBase<float>::ApplyHeaviside(uint64_t a1)
{
  return kaldi::MatrixBase<float>::ApplyHeaviside(a1 + 8);
}

uint64_t kaldi::CuMatrixBase<float>::ApplyFloor(uint64_t a1, float a2)
{
  return kaldi::MatrixBase<float>::ApplyFloor(a1 + 8, a2);
}

uint64_t kaldi::CuMatrixBase<float>::ApplyCeiling(uint64_t a1, float a2)
{
  return kaldi::MatrixBase<float>::ApplyCeiling(a1 + 8, a2);
}

void kaldi::CuMatrixBase<float>::ApplyExp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
}

uint64_t kaldi::CuMatrixBase<float>::ApplySoftMaxPerRow(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (a1[5] != *(_DWORD *)(a2 + 20) || a1[4] != *(_DWORD *)(a2 + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ApplySoftMaxPerRow", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)&stru_568.addr, "SameDim(*this, src)", a5);
  }
  int v6 = (kaldi::ContextDependency *)(a1 + 2);
  kaldi::MatrixBase<float>::CopyFromMat<float>(a1 + 2, a2 + 8, 111, a4, a5);
  uint64_t result = kaldi::ContextDependency::CentralPosition(v6);
  if ((int)result >= 1)
  {
    signed int v9 = 0;
    do
    {
      kaldi::MatrixBase<float>::Row((uint64_t)v6, v9, v8, v10);
      kaldi::VectorBase<float>::ApplySoftMax((uint64_t)v10);
      ++v9;
      uint64_t result = kaldi::ContextDependency::CentralPosition(v6);
    }
    while (v9 < (int)result);
  }
  return result;
}

uint64_t kaldi::CuMatrixBase<float>::ApplyMaxNorm(uint64_t a1, int a2, float a3)
{
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)&v31, a1, 111);
  uint64_t v6 = a1 + 8;
  kaldi::MatrixBase<float>::MulElements((uint64_t)&v32, a1 + 8, v7, v8, v9);
  if (a2)
  {
    uint64_t v12 = *(unsigned int *)(a1 + 20);
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v27 = off_262E60;
    uint64_t v28 = 0;
    kaldi::CuVector<float>::Resize((uint64_t)&v27, v12, 0, v10, v11);
    uint64_t v30 = *(void *)(a1 + 32);
    kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)&v27, &v31, 1.0, 0.0, v13, v14, v15);
    kaldi::CuVectorBase<float>::ApplyPow((uint64_t)&v27, 0.5);
    kaldi::CuVectorBase<float>::Scale((uint64_t)&v27, 1.0 / a3);
    kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)&v27, 1.0);
    kaldi::CuVectorBase<float>::InvertElements((uint64_t)&v27);
    kaldi::MatrixBase<float>::MulRowsVec(v6, (uint64_t)&v28, v16, v17, v18);
  }
  else
  {
    uint64_t v19 = *(unsigned int *)(a1 + 16);
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v27 = off_262E60;
    uint64_t v28 = 0;
    kaldi::CuVector<float>::Resize((uint64_t)&v27, v19, 0, v10, v11);
    uint64_t v30 = *(void *)(a1 + 32);
    kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)&v27, &v31, 1.0, 0.0, v20, v21, v22);
    kaldi::CuVectorBase<float>::ApplyPow((uint64_t)&v27, 0.5);
    kaldi::CuVectorBase<float>::Scale((uint64_t)&v27, 1.0 / a3);
    kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)&v27, 1.0);
    kaldi::CuVectorBase<float>::InvertElements((uint64_t)&v27);
    kaldi::MatrixBase<float>::MulColsVec(v6, (uint64_t)&v28, v23, v24, v25);
  }
  kaldi::CuVector<float>::~CuVector(&v27);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v31);
}

void sub_9FBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

float32_t kaldi::CuMatrixBase<float>::MulElements(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::MatrixBase<float>::MulElements(a1 + 8, a2 + 8, a3, a4, a5);
}

uint64_t kaldi::CuMatrixBase<float>::MulRowsVec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::MatrixBase<float>::MulRowsVec(a1 + 8, a2 + 8, a3, a4, a5);
}

uint64_t kaldi::CuMatrixBase<float>::MulColsVec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::MatrixBase<float>::MulColsVec(a1 + 8, a2 + 8, a3, a4, a5);
}

void kaldi::CuMatrixBase<float>::FindRowMaxId(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (!a2) {
    kaldi::KaldiAssertFailure_((kaldi *)"FindRowMaxId", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)&stru_5B8.offset + 1, "id", a5);
  }
  kaldi::CuArray<int>::Resize((uint64_t)a2, *(_DWORD *)(a1 + 20), 0, a4, a5);
  if (*a2 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *((void *)a2 + 1);
    do
      *(_DWORD *)(v9 + 4 * v8++) = -1;
    while (v8 < *a2);
  }
  uint64_t v10 = *(unsigned int *)(a1 + 20);
  if ((int)v10 >= 1)
  {
    unint64_t v11 = 0;
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    do
    {
      if (v11 >= *(unsigned int *)(a1 + 20)) {
        kaldi::KaldiAssertFailure_((kaldi *)"RowData", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", &stru_68.segname[6], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v7);
      }
      if ((int)v12 < 1)
      {
        int v15 = -1;
      }
      else
      {
        uint64_t v13 = 0;
        int v15 = -1;
        float v16 = -1.0e21;
        do
        {
          uint64_t v14 = *(void *)(a1 + 8) + 4 * *(_DWORD *)(a1 + 24) * (int)v11;
          if (v16 < *(float *)(v14 + 4 * v13))
          {
            float v16 = *(float *)(v14 + 4 * v13);
            int v15 = v13;
          }
          ++v13;
        }
        while (v12 != v13);
      }
      *(_DWORD *)(*((void *)a2 + 1) + 4 * v11++) = v15;
    }
    while (v11 != v10);
  }
}

void kaldi::CuArray<int>::Resize(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, const char *a5)
{
  BOOL v6 = a3 < 2 || a3 == 3;
  if ((a2 & 0x80000000) != 0 || !v6) {
    kaldi::KaldiAssertFailure_((kaldi *)"Resize", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-array-inl.h", &stru_20.segname[4], "(resize_type == kSetZero || resize_type == kUndefined || resize_type == kSetZeroIfNewMemory) && dim >= 0", a5);
  }
  BOOL v7 = a3;
  if (a3 == 3) {
    BOOL v7 = *(_DWORD *)a1 >= (int)a2;
  }
  if (*(_DWORD *)(a1 + 4) >= (signed int)a2)
  {
    *(_DWORD *)a1 = a2;
    if (!a2 || v7) {
      return;
    }
    uint64_t v12 = *(void **)(a1 + 8);
    size_t v13 = 4 * a2;
    goto LABEL_21;
  }
  uint64_t v10 = *(void **)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  if (v10) {
    free(v10);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v11;
  if (a2)
  {
    uint64_t v12 = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
    *(void *)(a1 + 8) = v12;
    if (!v12)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16, "Resize", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-array-inl.h", 76);
      uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Memory allocation failed when initializing CuVector ", 52);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"with dimension ", 15);
      int v15 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" object size in bytes: ", 23);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
    }
    *(_DWORD *)a1 = a2;
    *(_DWORD *)(a1 + 4) = a2;
    if (!v7)
    {
      size_t v13 = 4 * a2;
LABEL_21:
      bzero(v12, v13);
    }
  }
}

uint64_t kaldi::CuMatrixBase<float>::Set(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  return kaldi::MatrixBase<float>::Set(a1 + 8, a6, a2, a3, a4, a5);
}

uint64_t kaldi::CuMatrixBase<float>::Add(uint64_t a1, float a2)
{
  return kaldi::MatrixBase<float>::Add(a1 + 8, a2);
}

void kaldi::CuMatrixBase<float>::Scale(uint64_t a1, float a2)
{
}

void kaldi::CuMatrixBase<float>::ApplyLog(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
}

uint64_t kaldi::CuMatrixBase<float>::DivElements(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::MatrixBase<float>::DivElements(a1 + 8, a2 + 8, a3, a4, a5);
}

uint64_t kaldi::CuMatrixBase<float>::Max(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::MatrixBase<float>::Max(a1 + 8, a2 + 8, a3, a4, a5);
}

void kaldi::CuMatrixBase<float>::MulRowsGroupMat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(int *)(a2 + 16) <= 0) {
    kaldi::KaldiAssertFailure_((kaldi *)"MulRowsGroupMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", &stru_2E8.segname[7], "src.NumCols() > 0", a5);
  }
  uint64_t v5 = a1 + 8;
  uint64_t v6 = a2 + 8;

  kaldi::MatrixBase<float>::MulRowsGroupMat(v5, v6, a3, a4, a5);
}

uint64_t *kaldi::CuMatrixBase<float>::AddVecToCols(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, float a6, float a7)
{
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 20))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12, "AddVecToCols", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", 1062);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Non matching dimensions: Rows:", 30);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" VectorDim:", 11);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  uint64_t v9 = (uint64_t *)(a1 + 8);
  if (a7 != 1.0) {
    kaldi::MatrixBase<float>::Scale(a1 + 8, a7);
  }

  return kaldi::MatrixBase<float>::AddVecToCols<float>(v9, (uint64_t *)(a2 + 8), a6, a3, a4, a5);
}

uint64_t *kaldi::CuMatrixBase<float>::AddVecToRows(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, float a6, float a7)
{
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12, "AddVecToRows", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", 1084);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Non matching dimensions: Cols:", 30);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" VectorDim:", 11);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  uint64_t v9 = (uint64_t *)(a1 + 8);
  if (a7 != 1.0) {
    kaldi::MatrixBase<float>::Scale(a1 + 8, a7);
  }

  return kaldi::MatrixBase<float>::AddVecToRows<float>(v9, (uint64_t *)(a2 + 8), a6, a3, a4, a5);
}

void kaldi::CuMatrixBase<float>::AddVecVec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, float a6, float a7)
{
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 20)) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddVecVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)&stru_3D8.nreloc, "vecA.Dim() == num_rows_", a5);
  }
  if (*(_DWORD *)(a3 + 16) != *(_DWORD *)(a1 + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddVecVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)&stru_3D8.nreloc + 1, "vecB.Dim() == num_cols_", a5);
  }
  uint64_t v10 = a1 + 8;
  if (a7 != 1.0) {
    kaldi::MatrixBase<float>::Scale(a1 + 8, a7);
  }

  kaldi::MatrixBase<float>::AddVecVec<float>(v10, a2 + 8, a3 + 8, a6, a4, a5);
}

void kaldi::CuMatrixBase<float>::AddMatMatMasked(uint64_t a1, uint64_t a2, CBLAS_TRANSPOSE a3, uint64_t a4, const char *a5, uint64_t a6, float a7)
{
  int v7 = *(_DWORD *)(a2 + 20);
  if (v7 != *(_DWORD *)(a6 + 20)) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMatMasked", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", &stru_388.segname[5], "A.num_rows_ == M.num_rows_", a5);
  }
  if (a3 == CblasTrans && a5 == 112)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14, "AddMatMatMasked", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", 927);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "matrix A and B can not be transposed at the same time, not implemented yet");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
  }
  int v8 = *(_DWORD *)(a1 + 20);
  if (a3 == CblasTrans)
  {
    if (v8 != *(_DWORD *)(a2 + 16) || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a4 + 16)) {
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMatMasked", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", &stru_388.segname[9], "num_rows_ == A.num_cols_ && num_cols_ == B.num_cols_", a5);
    }
    if (v7 != *(_DWORD *)(a4 + 20)) {
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMatMasked", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", &stru_388.segname[10], "A.num_rows_ == B.num_rows_", a5);
    }
    if (v8 <= *(_DWORD *)(a6 + 16)) {
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMatMasked", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", &stru_388.segname[11], "A.num_cols_ > M.num_cols_", a5);
    }
  }
  else if (a5 == 112)
  {
    if (v8 != v7 || (int v9 = *(_DWORD *)(a1 + 16), v9 != *(_DWORD *)(a4 + 20))) {
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMatMasked", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", &stru_388.segname[13], "num_rows_ == A.num_rows_ && num_cols_ == B.num_rows_", a5);
    }
    if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a4 + 16)) {
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMatMasked", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", &stru_388.segname[14], "A.num_cols_ == B.num_cols_", a5);
    }
    if (v9 <= *(_DWORD *)(a6 + 16)) {
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMatMasked", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", &stru_388.segname[15], "B.num_rows_ > M.num_cols_", a5);
    }
  }
  else
  {
    if (v8 != v7 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a4 + 16)) {
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMatMasked", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)&stru_388.addr + 1, "num_rows_ == A.num_rows_ && num_cols_ == B.num_cols_", a5);
    }
    int v10 = *(_DWORD *)(a2 + 16);
    if (v10 != *(_DWORD *)(a4 + 20)) {
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMatMasked", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)&stru_388.addr + 2, "A.num_cols_ == B.num_rows_", a5);
    }
    if (v10 <= *(_DWORD *)(a6 + 16)) {
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMatMasked", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)&stru_388.addr + 3, "A.num_cols_ > M.num_cols_", a5);
    }
  }
  uint64_t v11 = a1 + 8;
  uint64_t v12 = a2 + 8;
  uint64_t v13 = a4 + 8;

  kaldi::MatrixBase<float>::AddMatMat(v11, v12, a3, v13, a5, a7, 1.0);
}

void sub_A04A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::CuMatrixBase<float>::AddMatEwpMat(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5, float a6, float a7)
{
  return kaldi::MatrixBase<float>::AddMatEwpMat(a1 + 8, a2 + 8, a3, a4 + 8, a5, a6, a7);
}

void kaldi::CuMatrixBase<float>::AddDiagVecMat(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5, float a6, float a7)
{
}

void kaldi::CuMatrixBase<float>::AddMatDiagVec(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5, float a6, float a7)
{
}

void kaldi::CuMatrixBase<float>::AddIndexedRows(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
}

float kaldi::CuMatrixBase<float>::Sum(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 32);
  v14[1] = 0;
  v14[2] = 0;
  v14[0] = off_262E60;
  v14[3] = v7;
  kaldi::CuVector<float>::Resize((uint64_t)v14, v6, 0, a4, a5);
  kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)v14, (_DWORD *)a1, 1.0, 0.0, v8, v9, v10);
  double v11 = kaldi::CuVectorBase<float>::Sum((uint64_t)v14);
  float v12 = *(float *)&v11;
  kaldi::CuVector<float>::~CuVector(v14);
  return v12;
}

void sub_A0588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::CuMatrixBase<float>::CountZeros(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::MatrixBase<float>::CountZeros(a1 + 8, a2, a3, a4, a5);
}

void kaldi::CuMatrixBase<float>::SetRandn(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 20)) {
    kaldi::MatrixBase<float>::SetRandn(a1 + 8);
  }
}

uint64_t kaldi::CuMatrixBase<float>::Write(uint64_t a1, void *a2, int a3, int a4)
{
  kaldi::Matrix<float>::Matrix((uint64_t)v11, *(unsigned int *)(a1 + 20), *(unsigned int *)(a1 + 16), 1, 0);
  kaldi::MatrixBase<float>::CopyFromMat<float>(v11, a1 + 8, 111, v8, v9);
  kaldi::MatrixBase<float>::Write(v11, a2, a3, a4);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v11);
}

void sub_A0634(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::CuMatrixBase<float>::EqualElementColMask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = *(unsigned int *)(a2 + 16);
  if (v6 != *(_DWORD *)(a1 + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"EqualElementColMask", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", &stru_A60.segname[15], "vec.Dim() == NumCols()", a5);
  }
  if (!a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"EqualElementColMask", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)&stru_A60.vmaddr, "mask != NULL", a5);
  }
  kaldi::CuMatrix<float>::Resize(a3, *(unsigned int *)(a1 + 20), v6, 0, 0);
  int v10 = *(_DWORD *)(a1 + 20);
  if (v10 >= 1)
  {
    unsigned int v11 = 0;
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    uint64_t v13 = *(unsigned int *)(a2 + 16);
    do
    {
      if ((int)v12 >= 1)
      {
        unint64_t v14 = 0;
        uint64_t v15 = *(void *)(a2 + 8);
        do
        {
          if (v13 == v14) {
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.h", &stru_108.sectname[6], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v9);
          }
          if (*(float *)(*(void *)(a1 + 8) + 4 * (int)(v11 * *(_DWORD *)(a1 + 24)) + 4 * v14) == *(float *)(v15 + 4 * v14)) {
            float v16 = 1.0;
          }
          else {
            float v16 = 0.0;
          }
          if (*(_DWORD *)(a3 + 20) <= v11 || v14 >= *(unsigned int *)(a3 + 16)) {
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.size + 1, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v9);
          }
          *(float *)(*(void *)(a3 + 8) + 4 * (int)(v11 * *(_DWORD *)(a3 + 24)) + 4 * v14++) = v16;
        }
        while (v12 != v14);
      }
      ++v11;
    }
    while (v11 != v10);
  }
}

void kaldi::CuMatrixBase<float>::EqualElementMask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = *(unsigned int *)(a2 + 20);
  if (v6 != *(_DWORD *)(a1 + 20) || (uint64_t v9 = *(unsigned int *)(a2 + 16), v9 != *(_DWORD *)(a1 + 16))) {
    kaldi::KaldiAssertFailure_((kaldi *)"EqualElementMask", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)&stru_A60.fileoff + 7, "mat.NumRows() == NumRows() && mat.NumCols() == NumCols()", a5);
  }
  if (!a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"EqualElementMask", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)&stru_A60.filesize, "mask != NULL", a5);
  }
  kaldi::CuMatrix<float>::Resize(a3, v6, v9, 0, 0);
  int v11 = *(_DWORD *)(a1 + 20);
  if (v11 >= 1)
  {
    unsigned int v12 = 0;
    unsigned int v13 = *(_DWORD *)(a2 + 20);
    int v14 = v11 & ~(v11 >> 31);
    uint64_t v15 = *(unsigned int *)(a1 + 16);
    do
    {
      if ((int)v15 >= 1)
      {
        if (v13 > v12)
        {
          unint64_t v16 = 0;
          uint64_t v17 = *(void *)(a2 + 8) + 4 * (int)(*(_DWORD *)(a2 + 24) * v12);
          while (v16 < *(unsigned int *)(a2 + 16))
          {
            if (*(float *)(*(void *)(a1 + 8) + 4 * (int)(v12 * *(_DWORD *)(a1 + 24)) + 4 * v16) == *(float *)(v17 + 4 * v16)) {
              float v18 = 1.0;
            }
            else {
              float v18 = 0.0;
            }
            if (*(_DWORD *)(a3 + 20) <= v12 || v16 >= *(unsigned int *)(a3 + 16)) {
              kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.size + 1, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v10);
            }
            *(float *)(*(void *)(a3 + 8) + 4 * (int)(v12 * *(_DWORD *)(a3 + 24)) + 4 * v16++) = v18;
            if (v15 == v16) {
              goto LABEL_16;
            }
          }
        }
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.size + 7, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v10);
      }
LABEL_16:
      ++v12;
    }
    while (v12 != v14);
  }
}

float *kaldi::CuMatrixBase<float>::ConcatenateVec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 20) != *(_DWORD *)(a3 + 20)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ConcatenateVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", &stru_338.sectname[7], "num_rows_ == index.NumRows()", a5);
  }
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16) * *(_DWORD *)(a3 + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ConcatenateVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", &stru_338.sectname[8], "num_cols_ == index.NumCols() * vec_table.NumCols()", a5);
  }
  uint64_t v5 = a1 + 8;
  uint64_t v6 = a2 + 8;
  uint64_t v7 = a3 + 8;

  return kaldi::MatrixBase<float>::ConcatenateVec(v5, v6, v7, a4, a5);
}

uint64_t kaldi::CuMatrixBase<float>::ConcatenateVec(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 20) != *(_DWORD *)(a3 + 20)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ConcatenateVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", &stru_338.segname[10], "num_rows_ == index.NumRows()", a5);
  }
  uint64_t v5 = *a2;
  if (*a2) {
    LODWORD(v5) = *(_DWORD *)(v5 + 12);
  }
  if (*(_DWORD *)(a1 + 16) != v5 * *(_DWORD *)(a3 + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ConcatenateVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", &stru_338.segname[11], "num_cols_ == index.NumCols() * vec_table.NumCols()", a5);
  }
  uint64_t v6 = a1 + 8;
  uint64_t v7 = a3 + 8;

  return kaldi::MatrixBase<float>::ConcatenateVec(v6, a2, v7, a4, a5);
}

void kaldi::CuMatrixBase<float>::SummarizeVec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 20) != *(_DWORD *)(a3 + 20)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SummarizeVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)&stru_338.size + 5, "num_rows_ == index.NumRows()", a5);
  }
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SummarizeVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)&stru_338.size + 6, "num_cols_ == vec_table.NumCols()", a5);
  }
  uint64_t v5 = a1 + 8;
  uint64_t v6 = a2 + 8;
  uint64_t v7 = a3 + 8;

  kaldi::MatrixBase<float>::SummarizeVec(v5, v6, v7, a4, a5);
}

void kaldi::CuMatrixBase<float>::SummarizeVec(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
}

void kaldi::CuMatrixBase<float>::DataUnowned()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "DataUnowned", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", 219);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Function not implemented for this class");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

kaldi::ContextDependency *kaldi::CuMatrixBase<float>::AddMatMat<signed char>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, const char *a5, float a6, float a7)
{
  return kaldi::MatrixBase<float>::AddMatMat<signed char>((kaldi::ContextDependency *)(a1 + 8), (kaldi::ContextDependency *)(a2 + 8), a3, a4, a5, a6, a7);
}

kaldi::ContextDependency *kaldi::CuMatrixBase<float>::AddMatMat<short>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, const char *a5, float a6, float a7)
{
  return kaldi::MatrixBase<float>::AddMatMat<short>((kaldi::ContextDependency *)(a1 + 8), (kaldi::ContextDependency *)(a2 + 8), a3, a4, a5, a6, a7);
}

kaldi::ContextDependency *kaldi::CuMatrixBase<float>::AddMatMat<signed char>(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, const char *a5, float a6, float a7)
{
  return kaldi::MatrixBase<float>::AddMatMat<signed char>((kaldi::ContextDependency *)(a1 + 8), a2 + 8, a3, a4, a5, a6, a7);
}

kaldi::ContextDependency *kaldi::CuMatrixBase<float>::AddMatMat<short>(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, const char *a5, float a6, float a7)
{
  return kaldi::MatrixBase<float>::AddMatMat<short>((kaldi::ContextDependency *)(a1 + 8), a2 + 8, a3, a4, a5, a6, a7);
}

float *kaldi::Quant3Levels<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  if (a6 <= 0.0) {
    kaldi::KaldiAssertFailure_((kaldi *)"Quant3Levels", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)&stru_AA8.offset + 3, "value > 0.0", a5);
  }
  uint64_t v7 = (float *)(a1 + 8);
  uint64_t v8 = a2 + 8;
  return kaldi::Quant3Levels<float>(v7, v8, a6, a3, a4, a5);
}

_DWORD *kaldi::ZeroSmallValues<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  if (a6 <= 0.0) {
    kaldi::KaldiAssertFailure_((kaldi *)"ZeroSmallValues", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.cc", (const char *)&stru_AA8.flags + 2, "threshold > 0.0", a5);
  }
  uint64_t v7 = (_DWORD *)(a1 + 8);
  uint64_t v8 = a2 + 8;
  return kaldi::ZeroSmallValues<float>(v7, v8, a6, a3, a4, a5);
}

void kaldi::CuSubVector<float>::Read()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "Read", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.h", 517);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Function is not implemented for this class");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::CuSubVector<float>::~CuSubVector(uint64_t result)
{
  *(void *)uint64_t result = &off_262E20;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

void kaldi::CuSubVector<float>::~CuSubVector(uint64_t a1)
{
  *(void *)a1 = &off_262E20;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  operator delete();
}

uint64_t kaldi::Matrix<float>::Matrix<float>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  *(unsigned char *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  int v8 = *(_DWORD *)(a2 + 16);
  int v9 = *(_DWORD *)(a2 + 20);
  if (a3 == 111) {
    int v10 = *(_DWORD *)(a2 + 20);
  }
  else {
    int v10 = *(_DWORD *)(a2 + 16);
  }
  if (a3 == 111) {
    int v11 = v8;
  }
  else {
    int v11 = v9;
  }
  kaldi::Matrix<float>::Init(a1, v10, v11, 0, a5);
  kaldi::MatrixBase<float>::CopyFromMat<float>((unsigned int *)a1, a2 + 8, a3, v12, v13);
  return a1;
}

void sub_A0D68(_Unwind_Exception *a1)
{
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v1);
  _Unwind_Resume(a1);
}

void kaldi::CuRandom::RandGauss<float>(int *a1, uint64_t a2, float a3, float a4)
{
  int v4 = *(_DWORD *)(a2 + 16);
  if (v4)
  {
    if (!*((unsigned char *)a1 + 4))
    {
      unsigned int v5 = *a1;
      a1[2] = *a1;
      uint64_t v6 = 1;
      for (uint64_t i = 3; i != 626; ++i)
      {
        int v8 = 1812433253 * (v5 ^ (v5 >> 30));
        unsigned int v5 = v8 + v6;
        a1[i] = i + v8 - 2;
        ++v6;
      }
      *((void *)a1 + 313) = 0;
      *((unsigned char *)a1 + 4) = 1;
      int v4 = *(_DWORD *)(a2 + 16);
    }
    int v9 = *(float **)(a2 + 8);
    unint64_t v11 = __PAIR64__(LODWORD(a4), LODWORD(a3));
    char v12 = 0;
    if (v4 >= 1)
    {
      int v10 = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)(a1 + 2);
      do
      {
        *v9++ = std::normal_distribution<float>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v11, v10, (float *)&v11);
        --v4;
      }
      while (v4);
    }
  }
  else if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11, "RandGauss", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-rand.cc", 72);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"cannot write data to zero size vector", 37);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
  }
}

void sub_A0E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::CuRand<float>::~CuRand(uint64_t a1)
{
  return a1;
}

void kaldi::CuRand<float>::RandGaussian(uint64_t a1, uint64_t a2)
{
}

void kaldi::CuRand<float>::BinarizeProbs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a3 + 20);
  if (v3 >= 1)
  {
    signed int v5 = 0;
    uint64_t v6 = a2 + 8;
    uint64_t v7 = a3 + 8;
    int v8 = *(_DWORD *)(a3 + 16);
    do
    {
      if (v8 >= 1)
      {
        for (signed int i = 0; i < v8; ++i)
        {
          float v10 = ((double)(int)kaldi::Rand(0) + 1.0) / 2147483650.0;
          if (kaldi::MatrixBase<float>::operator()(v6, v5, i, v11, v12) <= v10) {
            float v15 = 0.0;
          }
          else {
            float v15 = 1.0;
          }
          *(float *)kaldi::MatrixBase<float>::operator()(v7, v5, i, v13, v14) = v15;
          int v8 = *(_DWORD *)(a3 + 16);
        }
        int v3 = *(_DWORD *)(a3 + 20);
      }
      ++v5;
    }
    while (v5 < v3);
  }
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  size_t i = this->__i_;
  size_t v2 = (i + 1) % 0x270;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = this->__x_[(i + 397) % 0x270] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0x80000000) >> 1) ^ ((int)(this->__x_[v2] << 31) >> 31) & 0x9908B0DF;
  this->__x_[i] = v3;
  this->__i_ = v2;
  LODWORD(i) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return (i << 15) & 0xEFC60000 ^ i ^ (((i << 15) & 0xEFC60000 ^ i) >> 18);
}

float std::normal_distribution<float>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(uint64_t a1, std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this, float *a3)
{
  if (*(unsigned char *)(a1 + 12))
  {
    *(unsigned char *)(a1 + 12) = 0;
    float v5 = *(float *)(a1 + 8);
  }
  else
  {
    do
    {
      do
      {
        float v7 = (float)((float)((float)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this)
                           * 2.3283e-10)
                   * 2.0)
           + -1.0;
        float v8 = (float)((float)((float)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this)
                           * 2.3283e-10)
                   * 2.0)
           + -1.0;
        float v9 = (float)(v8 * v8) + (float)(v7 * v7);
      }
      while (v9 > 1.0);
    }
    while (v9 == 0.0);
    float v10 = sqrtf((float)(logf((float)(v8 * v8) + (float)(v7 * v7)) * -2.0) / v9);
    *(float *)(a1 + 8) = v8 * v10;
    *(unsigned char *)(a1 + 12) = 1;
    float v5 = v7 * v10;
  }
  return *a3 + (float)(v5 * a3[1]);
}

float kaldi::VecVec<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"VecVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)&stru_20.cmd + 3, "a.Dim() == b.Dim()", a5);
  }
  uint64_t v5 = a1 + 8;
  uint64_t v6 = a2 + 8;

  return kaldi::VecVec<float>(v5, v6, a3, a4, a5);
}

{
  int v6;
  const float *v7;
  const float *v8;
  uint64_t vars8;

  uint64_t v6 = *(_DWORD *)(a1 + 8);
  if (v6 != *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"VecVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)&stru_20.vmsize + 1, "adim == b.Dim()", a5);
  }
  float v7 = *(const float **)a2;
  float v8 = *(const float **)a1;

  return cblas_sdot(v6, v8, 1, v7, (int)&def_5A5E8 + 1);
}

void *kaldi::CuVector<float>::~CuVector(void *a1)
{
  *a1 = off_262E60;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = a1 + 1;
  size_t v2 = (void *)a1[1];
  if (v2) {
    free(v2);
  }
  void *v3 = 0;
  v3[1] = 0;
  return a1;
}

{
  void *v2;
  void *v3;

  *a1 = off_262E60;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = a1 + 1;
  size_t v2 = (void *)a1[1];
  if (v2) {
    free(v2);
  }
  void *v3 = 0;
  v3[1] = 0;
  return a1;
}

float kaldi::VecVec<float,signed char>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"VecVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)&stru_20.vmsize + 2, "a.Dim() == b.Dim()", a5);
  }
  uint64_t v5 = a1 + 8;

  return kaldi::VecVec<signed char>(v5, a2, a3, a4, a5);
}

float kaldi::VecVec<float,short>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"VecVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)&stru_20.vmsize + 2, "a.Dim() == b.Dim()", a5);
  }
  uint64_t v5 = a1 + 8;

  return kaldi::VecVec<short>(v5, a2, a3, a4, a5);
}

_DWORD *kaldi::CuVectorBase<float>::CopyFromVec<float>(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5 != result[4]) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyFromVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)&stru_2E8.size, "src.Dim() == dim_", a5);
  }
  if (v5)
  {
    uint64_t v6 = (uint64_t)(result + 2);
    return kaldi::VectorBase<float>::CopyFromVec(v6, a2, a3, a4, a5);
  }
  return result;
}

_DWORD *kaldi::CuVectorBase<float>::CopyToVec<float>(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5 = result[4];
  if (v5 != *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyToVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)&stru_2E8.reserved1, "dim_ == dst->Dim()", a5);
  }
  if (v5)
  {
    return kaldi::VectorBase<float>::CopyFromVec(a2, (uint64_t)(result + 2), a3, a4, a5);
  }
  return result;
}

void kaldi::CuVectorBase<float>::AddVec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, float a6, float a7)
{
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)&stru_428.reserved2, "vec.Dim() == Dim()", a5);
  }
  uint64_t v9 = a1 + 8;
  if (a7 != 1.0) {
    kaldi::VectorBase<float>::Scale(a1 + 8, a7);
  }

  kaldi::VectorBase<float>::AddVec<float>(v9, a2 + 8, a6, a3, a4, a5);
}

_DWORD *kaldi::CuVectorBase<float>::CopyFromVec(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(int *)(a2 + 16);
  if (v5 != result[4]) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyFromVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)&stru_388.addr + 5, "src.Dim() == dim_", a5);
  }
  if (v5)
  {
    uint64_t result = (_DWORD *)*((void *)result + 1);
    if (result)
    {
      uint64_t v6 = *(const void **)(a2 + 8);
      return memcpy(result, v6, 4 * v5);
    }
  }
  return result;
}

float kaldi::CuVectorBase<float>::ReverseCopyFromVec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5 = *(_DWORD *)(a2 + 16);
  if (v5 != *(_DWORD *)(a1 + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReverseCopyFromVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)&stru_388.offset + 3, "src.Dim() == dim_", a5);
  }
  if (v5)
  {
    uint64_t v6 = a1 + 8;
    float v7 = (uint64_t *)(a2 + 8);
    return kaldi::VectorBase<float>::ReverseCopyFromVec(v6, v7, a3, a4, a5);
  }
  return result;
}

void *kaldi::CuVectorBase<float>::CopyRowsFromMat(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 16) != a2[5] * a2[4]) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyRowsFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", &stru_68.segname[12], "dim_ == mat.NumCols() * mat.NumRows()", a5);
  }
  int v5 = (char **)(a1 + 8);
  uint64_t v6 = (kaldi::ContextDependency *)(a2 + 2);

  return kaldi::VectorBase<float>::CopyRowsFromMat(v5, v6);
}

void kaldi::CuVectorBase<float>::SetZero(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 16))
  {
    if (*(void *)(a1 + 8)) {
      kaldi::VectorBase<float>::SetZero(a1 + 8);
    }
  }
}

uint64_t kaldi::CuVectorBase<float>::Set(uint64_t a1, float a2)
{
  return kaldi::VectorBase<float>::Set(a1 + 8, a2);
}

uint64_t kaldi::CuVectorBase<float>::Add(uint64_t a1, float a2)
{
  return kaldi::VectorBase<float>::Add(a1 + 8, a2);
}

void kaldi::CuVectorBase<float>::Scale(uint64_t a1, float a2)
{
}

void kaldi::CuVectorBase<float>::AddRowSumMat(uint64_t a1, _DWORD *a2, float a3, float a4, uint64_t a5, uint64_t a6, const char *a7)
{
  if (a2[4] != *(_DWORD *)(a1 + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddRowSumMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", &stru_478.segname[12], "mat.NumCols() == Dim()", a7);
  }
  uint64_t v11 = a2[5];
  memset(v13, 0, sizeof(v13));
  kaldi::Vector<float>::Resize(v13, v11, 1, a6, a7);
  kaldi::VectorBase<float>::Set((uint64_t)v13, 1.0);
  kaldi::VectorBase<float>::AddMatVec(a1 + 8, (kaldi::ContextDependency *)(a2 + 2), CblasTrans, (uint64_t)v13, v12, a3, a4);
  kaldi::Vector<float>::Destroy((uint64_t)v13);
}

void sub_A162C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::CuVectorBase<float>::AddColSumMat(uint64_t a1, unsigned int *a2, float a3, float a4, uint64_t a5, uint64_t a6, const char *a7)
{
  if (a2[5] != *(_DWORD *)(a1 + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddColSumMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)&stru_478.size + 4, "mat.NumRows() == Dim()", a7);
  }
  uint64_t v11 = a2[4];
  memset(v13, 0, sizeof(v13));
  kaldi::Vector<float>::Resize(v13, v11, 1, a6, a7);
  kaldi::VectorBase<float>::Set((uint64_t)v13, 1.0);
  kaldi::VectorBase<float>::AddMatVec(a1 + 8, (kaldi::ContextDependency *)(a2 + 2), CblasNoTrans, (uint64_t)v13, v12, a3, a4);
  kaldi::Vector<float>::Destroy((uint64_t)v13);
}

void sub_A16FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::CuVectorBase<float>::InvertElements(uint64_t a1)
{
  return kaldi::VectorBase<float>::InvertElements(a1 + 8);
}

float kaldi::CuVectorBase<float>::ApplySoftMax(uint64_t a1)
{
  return kaldi::VectorBase<float>::ApplySoftMax(a1 + 8);
}

void kaldi::CuVectorBase<float>::ApplyExp(uint64_t a1)
{
}

void kaldi::CuVectorBase<float>::ApplyLog(uint64_t a1)
{
}

uint64_t kaldi::CuVectorBase<float>::ApplyFloor(uint64_t a1, float a2)
{
  return kaldi::VectorBase<float>::ApplyFloor(a1 + 8, a2);
}

uint64_t kaldi::CuVectorBase<float>::ApplyCeiling(uint64_t a1, float a2)
{
  return kaldi::VectorBase<float>::ApplyCeiling(a1 + 8, a2);
}

void kaldi::CuVectorBase<float>::ApplyMaxNorm(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  kaldi::CuVector<float>::CuVector((uint64_t)&v12, a1, a4, a5, a6);
  kaldi::CuVectorBase<float>::MulElements((uint64_t)&v12, a1, v8, v9, v10);
  float v11 = sqrtf(COERCE_FLOAT(COERCE_UNSIGNED_INT64(kaldi::VectorBase<float>::Sum((uint64_t)&v13))));
  if (v11 > a2) {
    kaldi::VectorBase<float>::Scale(a1 + 8, a2 / v11);
  }
  char v12 = off_262E60;
  if (v13) {
    free(v13);
  }
}

void sub_A17E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10) {
    free(a10);
  }
  _Unwind_Resume(exception_object);
}

float kaldi::CuVectorBase<float>::MulElements(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"MulElements", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)&stru_298.reloff + 2, "dim_ == v.dim_", a5);
  }
  uint64_t v5 = a1 + 8;
  uint64_t v6 = a2 + 8;

  return kaldi::VectorBase<float>::MulElements(v5, v6, a3, a4, a5);
}

double kaldi::CuVectorBase<float>::Sum(uint64_t a1)
{
  return kaldi::VectorBase<float>::Sum(a1 + 8);
}

void kaldi::CuVectorBase<float>::ApplyPow(uint64_t a1, float a2)
{
}

uint64_t kaldi::CuVectorBase<float>::CountZeros(uint64_t a1)
{
  return kaldi::VectorBase<float>::CountZeros(a1 + 8);
}

uint64_t kaldi::CuVectorBase<float>::SetRandn(uint64_t result)
{
  if (*(_DWORD *)(result + 16))
  {
    long long v4 = 0u;
    long long v5 = 0u;
    memset(v1, 0, sizeof(v1));
    int v2 = 0;
    std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = off_262DC8;
    char v6 = 0;
    uint64_t v7 = 0;
    kaldi::CuRand<float>::RandGaussian((uint64_t)v1, result);
    return kaldi::CuRand<float>::~CuRand((uint64_t)v1);
  }
  return result;
}

void sub_A1910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::CuVectorBase<float>::Tanh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"Tanh", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)&stru_158.reserved3, "this->Dim() == src.Dim()", a5);
  }
  uint64_t v5 = a1 + 8;
  uint64_t v6 = a2 + 8;

  kaldi::VectorBase<float>::Tanh(v5, v6, a3, a4, a5);
}

void kaldi::CuVectorBase<float>::Sigmoid(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"Sigmoid", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)&stru_158.nreloc + 3, "this->Dim() == src.Dim()", a5);
  }
  uint64_t v5 = a1 + 8;
  uint64_t v6 = a2 + 8;

  kaldi::VectorBase<float>::Sigmoid(v5, v6, a3, a4, a5);
}

void kaldi::CuVectorBase<float>::ApplyTanh(uint64_t a1)
{
}

void kaldi::CuVectorBase<float>::CopyColFromMat(uint64_t a1, _DWORD *a2, signed int a3, uint64_t a4, const char *a5)
{
  if (a2[4] <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyColFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)&stru_20.filesize + 2, "col < mat.NumCols()", a5);
  }
  if (*(_DWORD *)(a1 + 16) != a2[5]) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyColFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)&stru_20.filesize + 3, "dim_ == mat.NumRows()", a5);
  }
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (kaldi::ContextDependency *)(a2 + 2);

  kaldi::VectorBase<float>::CopyColFromMat<float>(v5, v6, a3);
}

void kaldi::CuVectorBase<float>::AddMatVec(uint64_t a1, _DWORD *a2, CBLAS_TRANSPOSE a3, uint64_t a4, const char *a5, float a6, float a7)
{
  if (a3 == CblasTrans)
  {
    if (a2[5] != *(_DWORD *)(a4 + 16)) {
      goto LABEL_12;
    }
    int v7 = a2[4];
  }
  else
  {
    if (a3 != CblasNoTrans || a2[4] != *(_DWORD *)(a4 + 16)) {
LABEL_12:
    }
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)&stru_1A8.align, "(trans == kNoTrans && M.NumCols() == v.dim_ && M.NumRows() == dim_) || (trans == kTrans && M.NumRows() == v.dim_ && M.NumCols() == dim_)", a5);
    int v7 = a2[5];
  }
  if (v7 != *(_DWORD *)(a1 + 16)) {
    goto LABEL_12;
  }
  if (a4 == a1) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)&stru_1A8.align + 1, "&v != this", a5);
  }
  uint64_t v8 = a1 + 8;
  uint64_t v9 = (kaldi::ContextDependency *)(a2 + 2);
  uint64_t v10 = a4 + 8;

  kaldi::VectorBase<float>::AddMatVec(v8, v9, a3, v10, a5, a6, a7);
}

void kaldi::CuVectorBase<float>::AddVecVec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, float a6, float a7)
{
  int v7 = *(_DWORD *)(a1 + 16);
  if (v7 != *(_DWORD *)(a2 + 16) || v7 != *(_DWORD *)(a3 + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddVecVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)&stru_1F8.size + 3, "(dim_ == v.dim_ && dim_ == r.dim_)", a5);
  }
  if (a1 == a2 || a1 == a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddVecVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)&stru_1F8.size + 4, "this != &v && this != &r", a5);
  }
  uint64_t v9 = a1 + 8;
  uint64_t v10 = a2 + 8;
  uint64_t v11 = a3 + 8;

  kaldi::VectorBase<float>::AddVecVec(v9, v10, v11, a6, a7, a4, a5);
}

void kaldi::CuVectorBase<float>::AddDiagMat2(uint64_t a1, uint64_t a2, int a3, float a4, float a5)
{
}

void kaldi::CuVectorBase<float>::AddDiagMatMat(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, float a6, float a7)
{
}

uint64_t kaldi::CuVectorBase<float>::ReplaceValue(uint64_t a1, float a2, float a3)
{
  return kaldi::VectorBase<float>::ReplaceValue(a1 + 8, a2, a3);
}

float kaldi::CuVectorBase<float>::DivElements(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"DivElements", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)&stru_298.reserved1 + 3, "dim_ == v.dim_", a5);
  }
  uint64_t v5 = a1 + 8;
  uint64_t v6 = a2 + 8;

  return kaldi::VectorBase<float>::DivElements(v5, v6, a3, a4, a5);
}

void kaldi::CuVectorBase<float>::Write(_DWORD *a1, void *a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v8 = a1[4];
  memset(v12, 0, sizeof(v12));
  kaldi::Vector<float>::Resize(v12, v8, 1, a4, a5);
  kaldi::CuVectorBase<float>::CopyToVec<float>(a1, (uint64_t)v12, v9, v10, v11);
  kaldi::VectorBase<float>::Write((uint64_t)v12, a2, a3);
  kaldi::Vector<float>::Destroy((uint64_t)v12);
}

void sub_A1CBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::CuVector<float>::Resize(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, const char *a5)
{
  if (a3 >= 2)
  {
    if (a3 != 3) {
      kaldi::KaldiAssertFailure_((kaldi *)"Resize", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", (const char *)&stru_338.addr + 6, "t == kSetZero || t == kUndefined || t == kSetZeroIfNewMemory", a5);
    }
    a3 = *(_DWORD *)(a1 + 16) >= (int)a2;
  }
  if (*(_DWORD *)(a1 + 20) >= (int)a2)
  {
    *(_DWORD *)(a1 + 16) = a2;
    if (a2 && !a3 && *(void *)(a1 + 8))
    {
      uint64_t v11 = a1 + 8;
      kaldi::VectorBase<float>::SetZero(v11);
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 16))
    {
      uint64_t v8 = (void *)(a1 + 8);
      int v7 = *(void **)(a1 + 8);
      if (v7) {
        free(v7);
      }
      *uint64_t v8 = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a2)
    {
      char v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      kaldi::Vector<float>::Resize(&v12, a2, 0, a4, a5);
      uint64_t v9 = v12;
      char v12 = *(void **)(a1 + 8);
      *(void *)(a1 + 8) = v9;
      uint64_t v10 = v13;
      uint64_t v13 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v10;
      kaldi::Vector<float>::Destroy((uint64_t)&v12);
    }
  }
}

uint64_t kaldi::CuVector<float>::CuVector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = off_262E60;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  kaldi::CuVector<float>::Resize(a1, *(unsigned int *)(a2 + 16), 1u, a4, a5);
  kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)a1, a2, v7, v8, v9);
  return a1;
}

{
  uint64_t v7;
  uint64_t v8;
  const char *v9;

  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_262E60;
  *(void *)(a1 + 24) = a3;
  kaldi::CuVector<float>::Resize(a1, *(unsigned int *)(a2 + 8), 1u, a4, a5);
  kaldi::CuVectorBase<float>::CopyFromVec<float>((_DWORD *)a1, a2, v7, v8, v9);
  return a1;
}

void kaldi::CuVector<float>::~CuVector(void *a1)
{
  *a1 = off_262E60;
  int v2 = a1 + 1;
  uint64_t v1 = (void *)a1[1];
  if (v1) {
    free(v1);
  }
  void *v2 = 0;
  v2[1] = 0;

  operator delete();
}

uint64_t kaldi::CuVector<float>::operator=(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (!*(void *)(a1 + 24)) {
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
  }
  kaldi::CuVector<float>::Resize(a1, *(unsigned int *)(a2 + 16), 1u, a4, a5);
  kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)a1, a2, v7, v8, v9);
  return a1;
}

double kaldi::CuVector<float>::Read(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  kaldi::Vector<float>::Read((uint64_t)&v9, a2, a3, 0, a5);
  uint64_t v6 = *(void **)(a1 + 8);
  if (v6) {
    free(v6);
  }
  *(void *)(a1 + 8) = v9;
  uint64_t v7 = v10;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  *(void *)(a1 + 16) = v7;
  kaldi::Vector<float>::Destroy((uint64_t)&v9);
  return result;
}

void sub_A2048(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::CuVectorBase<float>::AddMatVec<signed char>()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "AddMatVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", 506);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "not implemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::CuVectorBase<float>::AddMatVec<short>()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "AddMatVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", 506);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "not implemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::CuVectorBase<float>::AddMatVec<signed char>(uint64_t a1, _DWORD *a2, int a3, uint64_t a4, const char *a5, float a6, float a7)
{
  if (a3 == 112)
  {
    if (a2[5] != *(_DWORD *)(a4 + 8)) {
      goto LABEL_11;
    }
    int v7 = a2[4];
  }
  else
  {
    if (a3 != 111 || a2[4] != *(_DWORD *)(a4 + 8)) {
LABEL_11:
    }
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", &stru_1F8.sectname[10], "(trans == kNoTrans && M.NumCols() == v.Dim() && M.NumRows() == dim_) || (trans == kTrans && M.NumRows() == v.Dim() && M.NumCols() == dim_)", a5);
    int v7 = a2[5];
  }
  if (v7 != *(_DWORD *)(a1 + 16)) {
    goto LABEL_11;
  }
  uint64_t v8 = a1 + 8;
  uint64_t v9 = (kaldi::ContextDependency *)(a2 + 2);

  kaldi::VectorBase<float>::AddMatVec<signed char>(v8, v9, a3, a4, a5, a6, a7);
}

void kaldi::CuVectorBase<float>::AddMatVec<short>(uint64_t a1, _DWORD *a2, int a3, uint64_t a4, const char *a5, float a6, float a7)
{
  if (a3 == 112)
  {
    if (a2[5] != *(_DWORD *)(a4 + 8)) {
      goto LABEL_11;
    }
    int v7 = a2[4];
  }
  else
  {
    if (a3 != 111 || a2[4] != *(_DWORD *)(a4 + 8)) {
LABEL_11:
    }
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.cc", &stru_1F8.sectname[10], "(trans == kNoTrans && M.NumCols() == v.Dim() && M.NumRows() == dim_) || (trans == kTrans && M.NumRows() == v.Dim() && M.NumCols() == dim_)", a5);
    int v7 = a2[5];
  }
  if (v7 != *(_DWORD *)(a1 + 16)) {
    goto LABEL_11;
  }
  uint64_t v8 = a1 + 8;
  uint64_t v9 = (kaldi::ContextDependency *)(a2 + 2);

  kaldi::VectorBase<float>::AddMatVec<short>(v8, v9, a3, a4, a5, a6, a7);
}

void *kaldi::CuSubVector<float>::CuSubVector(void *result, uint64_t a2, int a3, int a4, const char *a5)
{
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  void *result = &off_262E20;
  if ((a4 + a3) > *(_DWORD *)(a2 + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)&stru_1A8.size + 4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", a5);
  }
  result[1] = *(void *)(a2 + 8) + 4 * a3;
  *((_DWORD *)result + 4) = a4;
  result[3] = *(void *)(a2 + 24);
  return result;
}

uint64_t kaldi::CuWorkspace::GetMatrix<float>@<X0>(void *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v7 = a3 * a2;
  if (a1[8] < (unint64_t)(4 * v7))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12, "GetMatrix", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-workspace.cc", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Failed to create a ", 19);
    uint64_t v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" by ", 4);
    uint64_t v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" matrix with only ", 18);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, " bytes available in the workspace");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  kaldi::CuWorkspace::GetVector<float>(a1, v7, a4, v12);
  return kaldi::CuSubMatrix<float>::CuSubMatrix(a5, (uint64_t)v12, a2);
}

void kaldi::CuWorkspace::GetVector<float>(void *a1@<X0>, int a2@<W1>, int a3@<W2>, void *a4@<X8>)
{
  unint64_t v6 = 4 * a2;
  if (v6 > a1[8])
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10, "GetVector", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-workspace.cc", 72);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Failed to create a vector of ", 29);
    uint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" elements with only ", 20);
    uint64_t v9 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, " bytes available in the workspace");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  uint64_t v7 = a1[1];
  a4[2] = 0;
  a4[3] = 0;
  *a4 = &off_262E20;
  a4[1] = v7;
  *((_DWORD *)a4 + 4) = a2;
  if (a3 == 3 || !a3) {
    kaldi::CuVectorBase<float>::SetZero((uint64_t)a4);
  }
  std::deque<char *>::push_back(a1 + 2, a1 + 1);
  a1[1] += v6;
  a1[8] -= v6;
}

void sub_A24D8(_Unwind_Exception *a1)
{
  *(void *)uint64_t v1 = v2;
  *(void *)(v1 + 8) = 0;
  *(_DWORD *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = 0;
  _Unwind_Resume(a1);
}

void kaldi::CuWorkspace::Destroy(kaldi::CuWorkspace *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v6 = (void *)*((void *)this + 9);
  if (v6)
  {
    uint64_t v7 = v6[7] - 1;
    uint64_t v8 = *(void *)(*(void *)(v6[3] + (((unint64_t)(v7 + v6[6]) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * ((v7 + v6[6]) & 0x1FF));
    if (v8 != *(void *)this) {
      kaldi::KaldiAssertFailure_((kaldi *)"Destroy", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-workspace.cc", (const char *)&dword_18 + 3, "parent_->used_mem_.top() == base_ptr_", a5);
    }
    uint64_t v9 = v6[1] - v8 + v6[8];
    v6[1] = v8;
    v6[7] = v7;
    v6[8] = v9;
    std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::__maybe_remove_back_spare[abi:ne180100](v6 + 2, 1);
  }
  else
  {
    uint64_t v10 = *(void **)this;
    if (*(void *)this) {
      free(v10);
    }
  }
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
}

void kaldi::CuWorkspace::GetChildWorkspace(kaldi::CuWorkspace *this, uint64_t a2)
{
  uint64_t v2 = a2;
  if (a2 == -1) {
    uint64_t v2 = *((void *)this + 8);
  }
  if (v2 < 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5, "GetChildWorkspace", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-workspace.cc", 123);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "mem_size_bytes >= 0");
  }
  else
  {
    if (v2 <= *((void *)this + 8)) {
      operator new();
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5, "GetChildWorkspace", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/cudamatrix/cu-workspace.cc", 125);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Can't create a child workspace of ", 34);
    std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)". Only have ", 12);
    long long v4 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, " bytes");
  }
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
}

void sub_A26D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::CuWorkspace::~CuWorkspace(kaldi::CuWorkspace *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
}

void std::deque<char *>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<char *>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<char *>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      BOOL v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> **>>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      BOOL v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> **> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> **> &>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_A2A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::CuSubMatrix<float>::CuSubMatrix(uint64_t result, uint64_t a2, int a3)
{
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 8) = 0u;
  *(void *)double result = off_262D80;
  int v3 = *(_DWORD *)(a2 + 16);
  int v4 = v3 / a3;
  if (v3 % a3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6, "CuSubMatrix", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", 975);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"the vector cannot be represented as a matrix with rows ", 55);
    uint64_t v5 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" , while it has dimension ", 26);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 16) = v4;
  *(_DWORD *)(result + 20) = a3;
  *(_DWORD *)(result + 24) = v4;
  *(_DWORD *)(result + 28) = v3;
  *(void *)(result + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(void *)(a2 + 24);
  return result;
}

void sub_A2BBC(_Unwind_Exception *a1)
{
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::CompressedMatrix::CopyFromMat<float>(uint64_t a1, kaldi::ContextDependency *this)
{
  if (*(void *)a1)
  {
    if (!*(unsigned char *)(a1 + 8)) {
      operator delete[]();
    }
    *(unsigned char *)(a1 + 8) = 0;
    *(void *)a1 = 0;
  }
  uint64_t result = kaldi::ContextDependency::CentralPosition(this);
  if (result)
  {
    kaldi::MatrixBase<float>::Min((uint64_t)this, v4, v5, v6, v7);
    float v9 = v8;
    kaldi::MatrixBase<float>::Max((uint64_t)this, v10, v11, v12, v13);
    if (v15 == v9) {
      float v15 = fabsf(v9) + 1.0 + v9;
    }
    float v16 = v15 - v9;
    if ((LODWORD(v9) & 0x7FFFFFFFu) <= 0x7F7FFFFF && (LODWORD(v16) & 0x7FFFFFFFu) < 0x7F800000)
    {
      int v21 = kaldi::ContextDependency::CentralPosition(this);
      int v22 = kaldi::ContextDependency::ContextWidth(this);
      kaldi::CompressedMatrix::AllocateData((kaldi::CompressedMatrix *)((v21 + 8) * v22 + 16), v17, v18, v19, v20);
    }
    kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/compressed-matrix.cc", (const char *)&stru_20.vmsize + 6, "KALDI_ISFINITE(global_header.min_value) && KALDI_ISFINITE(global_header.range)", v14);
  }
  return result;
}

uint64_t kaldi::CompressedMatrix::Destroy(kaldi::CompressedMatrix *this)
{
  uint64_t result = *(void *)this;
  if (result)
  {
    if (!*((unsigned char *)this + 8)) {
      operator delete[]();
    }
    *((unsigned char *)this + 8) = 0;
    *(void *)this = 0;
  }
  return result;
}

void kaldi::CompressedMatrix::AllocateData(kaldi::CompressedMatrix *this, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if ((int)this > 0)
  {
    operator new[]();
  }
  kaldi::KaldiAssertFailure_((kaldi *)"AllocateData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/compressed-matrix.cc", &stru_108.segname[1], "num_bytes > 0", a5);
}

void kaldi::CompressedMatrix::CompressColumn<float>(float *a1, float *a2, int a3, int a4, _WORD *a5, unsigned char *a6)
{
  uint64_t v10 = a2;
  kaldi::CompressedMatrix::ComputeColHeader<float>(a1, a2, a3, a4, (uint64_t)a5);
  if (a4 >= 1)
  {
    double v14 = *a1;
    *(double *)&unint64_t v15 = a1[1];
    unint64_t v16 = 0x3EF000100010000ALL;
    double v17 = *(double *)&v15 * 0.0000152590219;
    LOWORD(v15) = *a5;
    float v18 = v14 + v17 * (double)v15;
    LOWORD(v16) = a5[1];
    float v19 = v14 + v17 * (double)v16;
    LOWORD(v1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a5[2];
    *(float *)&unint64_t v12 = v14 + v17 * (double)v12;
    LOWORD(v13) = a5[3];
    *(float *)&double v14 = v14 + v17 * (double)v13;
    float v20 = *(float *)&v14 - *(float *)&v12;
    uint64_t v21 = a4;
    do
    {
      float v22 = *v10;
      if (*v10 >= v19)
      {
        double v25 = (float)((float)((float)(v22 - *(float *)&v12) / v20) * 63.0) + 0.5;
        unsigned int v24 = (int)v25 & ~((int)v25 >> 31);
        if (v24 >= 0x3F) {
          LOBYTE(v24) = 63;
        }
        LOBYTE(v24) = v24 | 0xC0;
        double v26 = (float)((float)((float)(v22 - v19) / (float)(*(float *)&v12 - v19)) * 128.0) + 0.5;
        unsigned int v27 = (int)v26 & ~((int)v26 >> 31);
        if (v27 >= 0x80) {
          LOBYTE(v27) = 0x80;
        }
        char v28 = v27 + 64;
        if (v22 < *(float *)&v12) {
          LOBYTE(v24) = v28;
        }
      }
      else
      {
        double v23 = (float)((float)((float)(v22 - v18) / (float)(v19 - v18)) * 64.0) + 0.5;
        unsigned int v24 = (int)v23 & ~((int)v23 >> 31);
        if (v24 >= 0x40) {
          LOBYTE(v24) = 64;
        }
      }
      *a6++ = v24;
      v10 += a3;
      --v21;
    }
    while (v21);
  }
}

float *kaldi::CompressedMatrix::CopyToMat<float>(uint64_t *a1, kaldi::ContextDependency *this)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    int v4 = *(_DWORD *)(v3 + 8);
    uint64_t v5 = *(int *)(v3 + 12);
    if (kaldi::ContextDependency::CentralPosition(this) != v4) {
      kaldi::KaldiAssertFailure_((kaldi *)"CopyToMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/compressed-matrix.cc", (const char *)&stru_1A8.addr + 6, "mat->NumRows() == num_rows", v6);
    }
    uint64_t result = (float *)kaldi::ContextDependency::ContextWidth(this);
    if (result != v5) {
      kaldi::KaldiAssertFailure_((kaldi *)"CopyToMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/compressed-matrix.cc", (const char *)&stru_1A8.addr + 7, "mat->NumCols() == num_cols", v9);
    }
    if ((int)v5 >= 1)
    {
      unsigned int v13 = 0;
      double v14 = (_WORD *)(v3 + 16);
      uint64_t v15 = v3 + 16 + 8 * v5;
      do
      {
        if (v4 >= 1)
        {
          uint64_t v16 = 0;
          unint64_t v17 = 0x3EF000100010000ALL;
          double v18 = *(float *)(v3 + 4) * 0.0000152590219;
          LOWORD(v17) = v14[3];
          double v19 = *(float *)v3;
          *(float *)&unint64_t v17 = v19 + v18 * (double)v17;
          LOWORD(v10) = v14[2];
          float v20 = v19 + v18 * (double)v10;
          LOWORD(v11) = v14[1];
          float v21 = v19 + v18 * (double)v11;
          LOWORD(v1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = *v14;
          *(float *)&double v18 = v19 + v18 * (double)v12;
          double v22 = v20;
          float v23 = *(float *)&v17 - v20;
          double v24 = v21;
          float v25 = v20 - v21;
          double v26 = *(float *)&v18;
          float v27 = v21 - *(float *)&v18;
          do
          {
            unsigned int v28 = *(unsigned __int8 *)(v15 + v16);
            int v29 = v28 - 64;
            if (v28 > 0x40)
            {
              BOOL v31 = v28 >= 0xC0;
              int v32 = v28 - 192;
              if (v32 != 0 && v31) {
                double v30 = v22 + (float)(v23 * (float)v32) * 0.0158730159;
              }
              else {
                double v30 = v24 + (float)(v25 * (float)v29) * 0.0078125;
              }
            }
            else
            {
              double v30 = v26 + (float)(v27 * (float)v28) * 0.015625;
            }
            float v33 = v30;
            uint64_t result = (float *)kaldi::MatrixBase<float>::operator()((uint64_t)this, v16, v13, v8, v9);
            float *result = v33;
            ++v16;
          }
          while (v4 != v16);
          v15 += v16;
        }
        ++v13;
        v14 += 4;
      }
      while (v13 != v5);
    }
  }
  else
  {
    if (kaldi::ContextDependency::CentralPosition(this)) {
      kaldi::KaldiAssertFailure_((kaldi *)"CopyToMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/compressed-matrix.cc", &stru_1A8.segname[14], "mat->NumRows() == 0", v34);
    }
    uint64_t result = (float *)kaldi::ContextDependency::ContextWidth(this);
    if (result) {
      kaldi::KaldiAssertFailure_((kaldi *)"CopyToMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/compressed-matrix.cc", &stru_1A8.segname[15], "mat->NumCols() == 0", v35);
    }
  }
  return result;
}

double *kaldi::CompressedMatrix::CopyToMat<double>(uint64_t *a1, kaldi::ContextDependency *this)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    int v4 = *(_DWORD *)(v3 + 8);
    uint64_t v5 = *(int *)(v3 + 12);
    if (kaldi::ContextDependency::CentralPosition(this) != v4) {
      kaldi::KaldiAssertFailure_((kaldi *)"CopyToMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/compressed-matrix.cc", (const char *)&stru_1A8.addr + 6, "mat->NumRows() == num_rows", v6);
    }
    uint64_t result = (double *)kaldi::ContextDependency::ContextWidth(this);
    if (result != v5) {
      kaldi::KaldiAssertFailure_((kaldi *)"CopyToMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/compressed-matrix.cc", (const char *)&stru_1A8.addr + 7, "mat->NumCols() == num_cols", v9);
    }
    if ((int)v5 >= 1)
    {
      unsigned int v13 = 0;
      double v14 = (_WORD *)(v3 + 16);
      uint64_t v15 = v3 + 16 + 8 * v5;
      do
      {
        if (v4 >= 1)
        {
          uint64_t v16 = 0;
          unint64_t v17 = 0x3EF000100010000ALL;
          double v18 = *(float *)(v3 + 4) * 0.0000152590219;
          LOWORD(v17) = v14[3];
          double v19 = *(float *)v3;
          *(float *)&unint64_t v17 = v19 + v18 * (double)v17;
          LOWORD(v10) = v14[2];
          float v20 = v19 + v18 * (double)v10;
          LOWORD(v11) = v14[1];
          float v21 = v19 + v18 * (double)v11;
          LOWORD(v1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = *v14;
          *(float *)&double v18 = v19 + v18 * (double)v12;
          double v22 = v20;
          float v23 = *(float *)&v17 - v20;
          double v24 = v21;
          float v25 = v20 - v21;
          double v26 = *(float *)&v18;
          float v27 = v21 - *(float *)&v18;
          do
          {
            unsigned int v28 = *(unsigned __int8 *)(v15 + v16);
            int v29 = v28 - 64;
            if (v28 > 0x40)
            {
              BOOL v31 = v28 >= 0xC0;
              int v32 = v28 - 192;
              if (v32 != 0 && v31) {
                double v30 = v22 + (float)(v23 * (float)v32) * 0.0158730159;
              }
              else {
                double v30 = v24 + (float)(v25 * (float)v29) * 0.0078125;
              }
            }
            else
            {
              double v30 = v26 + (float)(v27 * (float)v28) * 0.015625;
            }
            float v33 = v30;
            double v34 = v33;
            uint64_t result = (double *)kaldi::MatrixBase<double>::operator()((uint64_t)this, v16, v13, v8, v9);
            double *result = v34;
            ++v16;
          }
          while (v4 != v16);
          v15 += v16;
        }
        ++v13;
        v14 += 4;
      }
      while (v13 != v5);
    }
  }
  else
  {
    if (kaldi::ContextDependency::CentralPosition(this)) {
      kaldi::KaldiAssertFailure_((kaldi *)"CopyToMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/compressed-matrix.cc", &stru_1A8.segname[14], "mat->NumRows() == 0", v35);
    }
    uint64_t result = (double *)kaldi::ContextDependency::ContextWidth(this);
    if (result) {
      kaldi::KaldiAssertFailure_((kaldi *)"CopyToMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/compressed-matrix.cc", &stru_1A8.segname[15], "mat->NumCols() == 0", v36);
    }
  }
  return result;
}

uint64_t kaldi::CompressedMatrix::CopyRowsFromVec<float>(uint64_t *a1, char **a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = *(unsigned int *)(v4 + 8);
    uint64_t v6 = *(unsigned int *)(v4 + 12);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  kaldi::Matrix<float>::Matrix((uint64_t)v8, v5, v6, 0, 0);
  kaldi::MatrixBase<float>::CopyRowsFromVec(v8, a2);
  kaldi::CompressedMatrix::CopyFromMat<float>((uint64_t)a1, (kaldi::ContextDependency *)v8);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v8);
}

void sub_A3500(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

float kaldi::CompressedMatrix::CopyColToVec<float>(uint64_t *a1, unsigned int a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, const char *a10)
{
  uint64_t v10 = *a1;
  if (*a1) {
    int v11 = *(_DWORD *)(v10 + 12);
  }
  else {
    int v11 = 0;
  }
  if (v11 <= (int)a2) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyColToVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/compressed-matrix.cc", (const char *)&stru_1F8.addr + 4, "col < this->NumCols()", a10);
  }
  if ((a2 & 0x80000000) != 0) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyColToVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/compressed-matrix.cc", (const char *)&stru_1F8.addr + 5, "col >= 0", a10);
  }
  uint64_t v12 = *(unsigned int *)(a3 + 8);
  if (v10) {
    int v13 = *(_DWORD *)(v10 + 8);
  }
  else {
    int v13 = 0;
  }
  if (v12 != v13) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyColToVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/compressed-matrix.cc", (const char *)&stru_1F8.addr + 6, "v->Dim() == this->NumRows()", a10);
  }
  uint64_t v14 = *(unsigned int *)(v10 + 8);
  if ((int)v14 >= 1)
  {
    uint64_t v15 = 0;
    uint64_t v16 = (_WORD *)(v10 + 16 + 8 * a2);
    LOWORD(a5) = v16[3];
    LOWORD(a6) = v16[2];
    LOWORD(a7) = v16[1];
    LOWORD(a8) = *v16;
    double v17 = *(float *)(v10 + 4) * 0.0000152590219;
    double v18 = *(float *)v10;
    float v19 = v18 + v17 * (double)*(unint64_t *)&a5;
    float v20 = v18 + v17 * (double)*(unint64_t *)&a6;
    float v21 = v18 + v17 * (double)*(unint64_t *)&a7;
    *(float *)&double v18 = v18 + v17 * (double)*(unint64_t *)&a8;
    uint64_t v22 = v10 + 16 + 8 * *(int *)(v10 + 12) + (int)(v14 * a2);
    a4 = v20;
    *(float *)&a5 = v19 - v20;
    double v23 = v21;
    float v24 = v20 - v21;
    double v25 = *(float *)&v18;
    float v26 = v21 - *(float *)&v18;
    do
    {
      unsigned int v27 = *(unsigned __int8 *)(v22 + v15);
      int v28 = v27 - 64;
      if (v27 > 0x40)
      {
        BOOL v30 = v27 >= 0xC0;
        int v31 = v27 - 192;
        if (v31 != 0 && v30) {
          double v29 = a4 + (float)(*(float *)&a5 * (float)v31) * 0.0158730159;
        }
        else {
          double v29 = v23 + (float)(v24 * (float)v28) * 0.0078125;
        }
      }
      else
      {
        double v29 = v25 + (float)(v26 * (float)v27) * 0.015625;
      }
      if (v12 == v15) {
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", stru_68.sectname, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a10);
      }
      float v32 = v29;
      *(float *)(*(void *)a3 + 4 * v15++) = v32;
    }
    while (v14 != v15);
  }
  return *(float *)&a4;
}

uint64_t *kaldi::CompressedMatrix::CopyRowToVec<float>(uint64_t *result, unsigned int a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9, uint64_t a10, const char *a11)
{
  uint64_t v11 = *result;
  if (*result) {
    int v12 = *(_DWORD *)(v11 + 8);
  }
  else {
    int v12 = 0;
  }
  if (v12 <= (int)a2) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyRowToVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/compressed-matrix.cc", &stru_1F8.sectname[14], "row < this->NumRows()", a11);
  }
  if ((a2 & 0x80000000) != 0) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyRowToVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/compressed-matrix.cc", &stru_1F8.sectname[15], "row >= 0", a11);
  }
  uint64_t v13 = *(unsigned int *)(a3 + 8);
  if (v11) {
    int v14 = *(_DWORD *)(v11 + 12);
  }
  else {
    int v14 = 0;
  }
  if (v13 != v14) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyRowToVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/compressed-matrix.cc", stru_1F8.segname, "v->Dim() == this->NumCols()", a11);
  }
  uint64_t v15 = *(unsigned int *)(v11 + 12);
  if ((int)v15 >= 1)
  {
    uint64_t v16 = 0;
    double v17 = (unsigned __int8 *)(v11 + 8 * v15 + a2 + 16);
    uint64_t v18 = 4 * v13;
    uint64_t v19 = 4 * v15;
    float v20 = (_WORD *)(v11 + 22);
    do
    {
      double v21 = *(float *)v11;
      double v22 = *(float *)(v11 + 4) * 0.0000152590219;
      LOWORD(a8) = *(v20 - 2);
      double v23 = v21 + v22 * (double)*(unint64_t *)&a8;
      *(float *)&double v23 = v23;
      unsigned int v24 = *v17;
      int v25 = v24 - 64;
      if (v24 > 0x40)
      {
        LOWORD(a9) = *(v20 - 1);
        a9 = v21 + v22 * (double)*(unint64_t *)&a9;
        *(float *)&a9 = a9;
        BOOL v30 = v24 >= 0xC0;
        int v31 = v24 - 192;
        if (v31 != 0 && v30)
        {
          LOWORD(v23) = *v20;
          a8 = (double)*(unint64_t *)&v23;
          float v34 = v21 + v22 * a8;
          *(float *)&a8 = (float)v31;
          double v29 = *(float *)&a9 + (float)((float)(v34 - *(float *)&a9) * (float)v31) * 0.0158730159;
        }
        else
        {
          double v32 = *(float *)&v23;
          double v33 = (float)((float)(*(float *)&a9 - *(float *)&v23) * (float)v25);
          a8 = 0.0078125;
          double v29 = v32 + v33 * 0.0078125;
        }
      }
      else
      {
        LOWORD(a9) = *(v20 - 3);
        a9 = (double)*(unint64_t *)&a9;
        float v26 = v21 + v22 * a9;
        double v27 = v26;
        double v28 = (float)((float)(*(float *)&v23 - v26) * (float)v24);
        a8 = 0.015625;
        double v29 = v27 + v28 * 0.015625;
      }
      if (v18 == v16) {
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", stru_68.sectname, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a11);
      }
      v20 += 4;
      float v35 = v29;
      *(float *)(*(void *)a3 + v16) = v35;
      v17 += *(int *)(v11 + 8);
      v16 += 4;
    }
    while (v19 != v16);
  }
  return result;
}

uint64_t kaldi::CompressedMatrix::Write(uint64_t *a1, void *a2, int a3, uint64_t a4, const char *a5)
{
  if (a3)
  {
    int v7 = a4;
    if (a4) {
      uint64_t v8 = "CN";
    }
    else {
      uint64_t v8 = "CM";
    }
    kaldi::WriteToken(a2, (unsigned char *)&def_5A5E8 + 1, (kaldi *)v8, a4, a5);
    if (v7 && (fst::AlignOutput(a2) & 1) == 0)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13, "Write", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/compressed-matrix.cc", 295);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "Could not align output");
LABEL_18:
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
    }
    if (!*a1)
    {
      v13[0] = 0;
      v13[1] = 0;
    }
    uint64_t result = std::ostream::write();
  }
  else
  {
    uint64_t v9 = *a1;
    if (*a1)
    {
      uint64_t v10 = *(unsigned int *)(v9 + 8);
      uint64_t v11 = *(unsigned int *)(v9 + 12);
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
    }
    kaldi::Matrix<float>::Matrix((uint64_t)v13, v10, v11, 1, 0);
    kaldi::CompressedMatrix::CopyToMat<float>(a1, (kaldi::ContextDependency *)v13);
    kaldi::MatrixBase<float>::Write(v13, a2, 0, 0);
    uint64_t result = kaldi::Matrix<float>::~Matrix((uint64_t)v13);
  }
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13, "Write", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/compressed-matrix.cc", 341);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "Error writing compressed matrix to stream.");
    goto LABEL_18;
  }
  return result;
}

void sub_A3A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::CompressedMatrix::Read(uint64_t a1, void *a2, int a3, uint64_t a4)
{
  if (*(void *)a1)
  {
    if (!*(unsigned char *)(a1 + 8)) {
      operator delete[]();
    }
    *(unsigned char *)(a1 + 8) = 0;
    *(void *)a1 = 0;
  }
  if (!a3)
  {
    double v18 = kaldi::Matrix<float>::Matrix((uint64_t)v44);
    kaldi::Matrix<float>::Read(v44, a2, 0, 0, 0, v18);
    kaldi::CompressedMatrix::CopyFromMat<float>(a1, (kaldi::ContextDependency *)v44);
LABEL_27:
    kaldi::Matrix<float>::~Matrix((uint64_t)v44);
LABEL_28:
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v44, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/compressed-matrix.cc", 448);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v44, "Failed to read data.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v44);
    }
    return;
  }
  if (kaldi::Peek(a2, 1) != 67)
  {
    double v19 = kaldi::Matrix<float>::Matrix((uint64_t)v44);
    kaldi::Matrix<float>::Read(v44, a2, 1, a4 != 0, 0, v19);
    kaldi::CompressedMatrix::CopyFromMat<float>(a1, (kaldi::ContextDependency *)v44);
    goto LABEL_27;
  }
  if (a4) {
    int v7 = "CN";
  }
  else {
    int v7 = "CM";
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, v7);
  __s1 = 0;
  size_t __n = 0;
  uint64_t v40 = 0;
  kaldi::ReadToken(a2, 1, (uint64_t)&__s1, v8, v9);
  int v10 = SHIBYTE(v40);
  size_t v11 = __n;
  if (v40 >= 0) {
    size_t v12 = HIBYTE(v40);
  }
  else {
    size_t v12 = __n;
  }
  uint64_t v13 = v43;
  int v14 = (char)v43;
  if ((v43 & 0x80u) != 0) {
    uint64_t v13 = v42;
  }
  if (v12 != v13) {
    goto LABEL_30;
  }
  if ((v43 & 0x80u) == 0) {
    p_p = (unsigned __int8 *)&__p;
  }
  else {
    p_p = (unsigned __int8 *)__p;
  }
  if (v40 < 0)
  {
    if (memcmp(__s1, p_p, __n)) {
      goto LABEL_34;
    }
LABEL_44:
    if (!a4) {
      goto LABEL_48;
    }
    goto LABEL_45;
  }
  if (!HIBYTE(v40)) {
    goto LABEL_44;
  }
  p_s1 = &__s1;
  uint64_t v17 = HIBYTE(v40);
  while (*(unsigned __int8 *)p_s1 == *p_p)
  {
    p_s1 = (void **)((char *)p_s1 + 1);
    ++p_p;
    if (!--v17) {
      goto LABEL_44;
    }
  }
LABEL_30:
  if ((v40 & 0x8000000000000000) == 0)
  {
    if (HIBYTE(v40) != 2) {
      goto LABEL_60;
    }
    float v20 = (unsigned __int8 *)&__s1;
    goto LABEL_36;
  }
LABEL_34:
  if (v11 != 2) {
    goto LABEL_60;
  }
  float v20 = (unsigned __int8 *)__s1;
LABEL_36:
  int v21 = *v20;
  double v22 = (unsigned __int8 *)__p;
  if (v14 >= 0) {
    double v22 = (unsigned __int8 *)&__p;
  }
  if (v21 != *v22) {
    goto LABEL_60;
  }
  double v23 = __s1;
  if (v10 >= 0) {
    double v23 = &__s1;
  }
  if (v23[1] != 78)
  {
LABEL_60:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v44, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/compressed-matrix.cc", 361);
    double v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Expected token ", 15);
    if ((v43 & 0x80u) == 0) {
      double v29 = &__p;
    }
    else {
      double v29 = __p;
    }
    if ((v43 & 0x80u) == 0) {
      uint64_t v30 = v43;
    }
    else {
      uint64_t v30 = v42;
    }
    int v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
    double v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)", got ", 6);
    if (v40 >= 0) {
      double v33 = &__s1;
    }
    else {
      double v33 = __s1;
    }
    if (v40 >= 0) {
      size_t v34 = HIBYTE(v40);
    }
    else {
      size_t v34 = __n;
    }
    float v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v33, v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)". This could mean that you're trying to memory map an unaligned file.", 69);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v44);
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v44, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/compressed-matrix.cc", 358);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Reading aligned matrix as a stream", 34);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v44);
  }
LABEL_45:
  fst::AlignInput();
  if (a4)
  {
    std::istream::tellg();
    *(void *)a1 = a4 + v44[16];
    *(unsigned char *)(a1 + 8) = 1;
    std::istream::seekg();
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v44, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/compressed-matrix.cc", 379);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Seeking for aligned data failed", 31);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v44);
    }
    if (SHIBYTE(v40) < 0) {
      operator delete(__s1);
    }
    if ((char)v43 < 0) {
      operator delete(__p);
    }
    goto LABEL_28;
  }
LABEL_48:
  std::istream::read();
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v44, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/compressed-matrix.cc", 387);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Failed to read header", 21);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v44);
  }
  if (v37) {
    kaldi::CompressedMatrix::AllocateData((kaldi::CompressedMatrix *)((v36 + 8) * v37 + 16), v24, v25, v26, v27);
  }
  if (SHIBYTE(v40) < 0) {
    operator delete(__s1);
  }
  if ((char)v43 < 0) {
    operator delete(__p);
  }
}

void sub_A4054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

float kaldi::CompressedMatrix::Sum(kaldi::CompressedMatrix *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(void *)this) {
    uint64_t v6 = *(unsigned int *)(*(void *)this + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  memset(v18, 0, sizeof(v18));
  kaldi::Vector<float>::Resize(v18, v6, 0, a4, a5);
  signed int v14 = 0;
  float v15 = 0.0;
  while (1)
  {
    uint64_t v16 = *(void *)this;
    if (*(void *)this) {
      LODWORD(v16) = *(_DWORD *)(v16 + 12);
    }
    if (v14 >= (int)v16) {
      break;
    }
    kaldi::CompressedMatrix::CopyColToVec<float>((uint64_t *)this, v14, (uint64_t)v18, v9, v10, v11, v12, v13, v7, v8);
    double v9 = kaldi::VectorBase<float>::Sum((uint64_t)v18);
    float v15 = v15 + *(float *)&v9;
    ++v14;
  }
  kaldi::Vector<float>::Destroy((uint64_t)v18);
  return v15;
}

void sub_A412C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::CompressedMatrix::operator=(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(void *)result)
  {
    if (!*(unsigned char *)(result + 8)) {
      operator delete[]();
    }
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = 0;
  }
  if (*(void *)a2) {
    kaldi::CompressedMatrix::AllocateData((kaldi::CompressedMatrix *)((*(_DWORD *)(*(void *)a2 + 8) + 8)* *(_DWORD *)(*(void *)a2 + 12)+ 16), a2, a3, a4, a5);
  }
  return result;
}

uint64_t kaldi::CompressedMatrix::CompressedMatrix(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  *(void *)this = 0;
  *(unsigned char *)(this + 8) = 0;
  return kaldi::CompressedMatrix::operator=(this, a2, a3, a4, a5);
}

void kaldi::CompressedMatrix::ComputeColHeader<float>(float *a1, float *a2, int a3, int a4, uint64_t a5)
{
  if (a4 <= 0) {
    kaldi::KaldiAssertFailure_((kaldi *)"ComputeColHeader", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/compressed-matrix.cc", (const char *)&stru_68.size + 5, "num_rows > 0", (const char *)a5);
  }
  std::vector<float>::vector(&__p, a4);
  double v11 = (float *)__p;
  double v12 = v48;
  if (v48 != __p)
  {
    unint64_t v13 = ((char *)v48 - (unsigned char *)__p) >> 2;
    if (v13 <= 1) {
      unint64_t v13 = 1;
    }
    signed int v14 = __p;
    do
    {
      float v10 = *a2;
      *v14++ = *(_DWORD *)a2;
      a2 += a3;
      --v13;
    }
    while (v13);
  }
  if (a4 <= 4)
  {
    std::__sort<std::__less<float,float> &,float *>();
    int v21 = (float *)__p;
    float v37 = *a1;
    float v38 = a1[1];
    float v39 = 1.0;
    if ((float)((float)(*(float *)__p - *a1) / v38) <= 1.0) {
      float v40 = (float)(*(float *)__p - *a1) / v38;
    }
    else {
      float v40 = 1.0;
    }
    if (v40 >= 0.0) {
      float v41 = v40 * 65535.0;
    }
    else {
      float v41 = 0.0;
    }
    unsigned int v34 = (int)(v41 + 0.499);
    *(_WORD *)a5 = v34;
    if (a4 <= 1)
    {
      LOWORD(v34) = v34 + 1;
      *(_WORD *)(a5 + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v34;
    }
    else
    {
      if ((float)((float)(v21[1] - v37) / v38) <= 1.0) {
        float v39 = (float)(v21[1] - v37) / v38;
      }
      if (v39 >= 0.0) {
        float v42 = v39 * 65535.0;
      }
      else {
        float v42 = 0.0;
      }
      unsigned int v34 = (unsigned __int16)(v34 + 1);
      if (v34 <= (unsigned __int16)(int)(v42 + 0.499)) {
        LOWORD(v34) = (int)(v42 + 0.499);
      }
      *(_WORD *)(a5 + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v34;
      if (a4 != 2)
      {
        float v43 = (float)(v21[2] - v37) / v38;
        if (v43 > 1.0) {
          float v43 = 1.0;
        }
        float v44 = v43 * 65535.0;
        if (v43 < 0.0) {
          float v44 = 0.0;
        }
        unsigned int v34 = (unsigned __int16)(v34 + 1);
        if (v34 <= (unsigned __int16)(int)(v44 + 0.499)) {
          LOWORD(v34) = (int)(v44 + 0.499);
        }
        *(_WORD *)(a5 + 4) = v34;
        if (a4 >= 4)
        {
          float v45 = (float)(v21[3] - v37) / v38;
          if (v45 > 1.0) {
            float v45 = 1.0;
          }
          if (v45 >= 0.0) {
            float v46 = v45 * 65535.0;
          }
          else {
            float v46 = 0.0;
          }
          double v36 = v46 + 0.499;
          goto LABEL_35;
        }
LABEL_67:
        LOWORD(v34) = v34 + 1;
        goto LABEL_68;
      }
    }
    LOWORD(v34) = v34 + 1;
    *(_WORD *)(a5 + 4) = v34;
    goto LABEL_67;
  }
  uint64_t v15 = a4 >> 2;
  uint64_t v16 = &v11[v15];
  if (v16 != v12)
  {
    float v10 = std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(v11, v16, v12, v10);
    double v11 = (float *)__p;
  }
  float v17 = std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(v11, v11, &v11[v15], v10);
  uint64_t v18 = (3 * v15);
  double v19 = (float *)__p;
  float v20 = (float *)((char *)__p + 4 * v18);
  if (v20 != v48)
  {
    float v17 = std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>((float *)__p + v15 + 1, (float *)__p + v18, v48, v17);
    double v19 = (float *)__p;
    float v20 = v48;
  }
  std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(&v19[v18 + 1], v20 - 1, v20, v17);
  int v21 = (float *)__p;
  float v22 = *a1;
  float v23 = a1[1];
  float v24 = (float)(*(float *)__p - *a1) / v23;
  if (v24 > 1.0) {
    float v24 = 1.0;
  }
  float v25 = v24 * 65535.0;
  BOOL v26 = v24 < 0.0;
  float v27 = 0.0;
  if (v26) {
    float v25 = 0.0;
  }
  int v28 = (int)(v25 + 0.499);
  *(_WORD *)a5 = v28;
  float v29 = (float)(v21[v15] - v22) / v23;
  if (v29 > 1.0) {
    float v29 = 1.0;
  }
  if (v29 >= 0.0) {
    float v30 = v29 * 65535.0;
  }
  else {
    float v30 = 0.0;
  }
  unsigned int v31 = (unsigned __int16)(v28 + 1);
  if (v31 <= (unsigned __int16)(int)(v30 + 0.499)) {
    LOWORD(v31) = (int)(v30 + 0.499);
  }
  *(_WORD *)(a5 + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v31;
  float v32 = (float)(v21[v18] - v22) / v23;
  if (v32 > 1.0) {
    float v32 = 1.0;
  }
  if (v32 >= 0.0) {
    float v33 = v32 * 65535.0;
  }
  else {
    float v33 = 0.0;
  }
  unsigned int v34 = (unsigned __int16)(v31 + 1);
  if (v34 <= (unsigned __int16)(int)(v33 + 0.499)) {
    LOWORD(v34) = (int)(v33 + 0.499);
  }
  *(_WORD *)(a5 + 4) = v34;
  float v35 = (float)(v21[a4 - 1] - v22) / v23;
  if (v35 > 1.0) {
    float v35 = 1.0;
  }
  if (v35 >= 0.0) {
    float v27 = v35 * 65535.0;
  }
  double v36 = v27 + 0.499;
LABEL_35:
  unsigned int v34 = (unsigned __int16)(v34 + 1);
  if (v34 <= (unsigned __int16)(int)v36) {
    LOWORD(v34) = (int)v36;
  }
LABEL_68:
  *(_WORD *)(a5 + 6) = v34;
  v48 = v21;
  operator delete(v21);
}

void sub_A4580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<double>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::pair<int,float>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_A4608(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<double *>>(double *a1, double *a2, double *a3, double result)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    do
    {
      unint64_t v7 = v4 - a1;
      if (v7 < 2) {
        break;
      }
      if (v7 == 3)
      {
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<double *>>(a1, a1 + 1, v4 - 1);
        return result;
      }
      if (v7 == 2)
      {
        uint64_t result = *(v4 - 1);
        double v30 = *a1;
        if (result < *a1)
        {
          *a1 = result;
          *(v4 - 1) = v30;
        }
        return result;
      }
      if ((char *)v4 - (char *)a1 <= 63)
      {
        return std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<double *>>(a1, v4, result);
      }
      uint64_t v8 = &a1[v7 >> 1];
      double v9 = v4 - 1;
      int v10 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<double *>>(a1, v8, v4 - 1);
      uint64_t result = *a1;
      if (*a1 >= *v8)
      {
        double v11 = v4 - 1;
        while (--v11 != a1)
        {
          if (*v11 < *v8)
          {
            *a1 = *v11;
            double *v11 = result;
            ++v10;
            goto LABEL_13;
          }
        }
        int v21 = a1 + 1;
        if (result >= *v9)
        {
          while (v21 != v9)
          {
            double v22 = *v21;
            if (result < *v21)
            {
              *v21++ = *v9;
              *double v9 = v22;
              goto LABEL_45;
            }
            ++v21;
          }
          return result;
        }
LABEL_45:
        if (v21 == v9) {
          return result;
        }
        while (1)
        {
          double v25 = *a1;
          do
          {
            double v26 = *v21++;
            uint64_t result = v26;
          }
          while (v25 >= v26);
          float v27 = v21 - 1;
          do
          {
            double v28 = *--v9;
            double v29 = v28;
          }
          while (v25 < v28);
          if (v27 >= v9) {
            break;
          }
          double *v27 = v29;
          *double v9 = result;
        }
        a1 = v21 - 1;
        if (v27 > a2) {
          return result;
        }
      }
      else
      {
        double v11 = v4 - 1;
LABEL_13:
        double v12 = a1 + 1;
        if (a1 + 1 >= v11)
        {
          uint64_t v16 = a1 + 1;
        }
        else
        {
          unint64_t v13 = a1 + 1;
          while (1)
          {
            double v14 = *v8;
            do
            {
              double v15 = *v13++;
              uint64_t result = v15;
            }
            while (v15 < v14);
            uint64_t v16 = v13 - 1;
            do
            {
              double v17 = *--v11;
              double v18 = v17;
            }
            while (v17 >= v14);
            if (v16 >= v11) {
              break;
            }
            *uint64_t v16 = v18;
            double *v11 = result;
            ++v10;
            if (v16 == v8) {
              uint64_t v8 = v11;
            }
          }
        }
        if (v16 != v8)
        {
          uint64_t result = *v8;
          double v19 = *v16;
          if (*v8 < *v16)
          {
            *uint64_t v16 = result;
            *uint64_t v8 = v19;
            ++v10;
          }
        }
        if (v16 == a2) {
          return result;
        }
        if (!v10)
        {
          if (v16 <= a2)
          {
            float v23 = v16 + 1;
            while (v23 != v4)
            {
              double v24 = *(v23 - 1);
              uint64_t result = *v23++;
              if (result < v24) {
                goto LABEL_29;
              }
            }
          }
          else
          {
            while (v12 != v16)
            {
              double v20 = *(v12 - 1);
              uint64_t result = *v12++;
              if (result < v20) {
                goto LABEL_29;
              }
            }
          }
          return result;
        }
LABEL_29:
        if (v16 <= a2) {
          a1 = v16 + 1;
        }
        else {
          uint64_t v4 = v16;
        }
      }
    }
    while (v4 != a2);
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<double *>>(double *a1, double *a2, double *a3)
{
  double v3 = *a2;
  double v4 = *a1;
  double v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    double v6 = *a1;
    if (*a2 >= *a1) {
      return 1;
    }
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

double std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<double *>>(double *a1, double *a2, double result)
{
  while (a1 != a2 - 1)
  {
    double v3 = a1++;
    if (v3 != a2 && a1 != a2)
    {
      uint64_t result = *v3;
      double v4 = a1;
      double v5 = v3;
      double v6 = a1;
      do
      {
        double v7 = *v6++;
        double v8 = v7;
        if (v7 < result)
        {
          uint64_t result = v8;
          double v5 = v4;
        }
        double v4 = v6;
      }
      while (v6 != a2);
      if (v5 != v3)
      {
        uint64_t result = *v3;
        double *v3 = *v5;
        double *v5 = result;
      }
    }
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::operator()(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 12) <= a2 || *(_DWORD *)(a1 + 8) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)&stru_68.addr, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", a5);
  }
  return *(void *)a1 + 4 * (int)(*(_DWORD *)(a1 + 16) * a2) + 4 * (int)a3;
}

uint64_t kaldi::MatrixBase<double>::operator()(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 12) <= a2 || *(_DWORD *)(a1 + 8) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)&stru_68.addr, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", a5);
  }
  return *(void *)a1 + 8 * (int)(*(_DWORD *)(a1 + 16) * a2) + 8 * (int)a3;
}

uint64_t kaldi::Matrix<float>::Matrix<double>(uint64_t a1, uint64_t a2, int a3)
{
  *(unsigned char *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (a3 == 111)
  {
    kaldi::Matrix<float>::Resize(a1, *(unsigned int *)(a2 + 12), *(unsigned int *)(a2 + 8), 0, 0);
    int v7 = 111;
  }
  else
  {
    kaldi::Matrix<float>::Resize(a1, *(unsigned int *)(a2 + 8), *(unsigned int *)(a2 + 12), 0, 0);
    int v7 = 112;
  }
  kaldi::MatrixBase<float>::CopyFromMat<double>(a1, a2, v7, v5, v6);
  return a1;
}

void kaldi::Matrix<float>::Resize(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  int v5 = (int)a5;
  int v6 = a4;
  signed int v7 = a3;
  int v8 = a2;
  int v10 = *(_DWORD *)(a1 + 16);
  if (v10 < 1) {
    unsigned int v11 = 0;
  }
  else {
    unsigned int v11 = *(_DWORD *)(a1 + 20) / v10;
  }
  if (v10 == a3) {
    char v12 = 0;
  }
  else {
    char v12 = (char)a5;
  }
  if (a4 == 2)
  {
    int v6 = 0;
    unint64_t v13 = *(void **)a1;
    if (a2 && v13)
    {
      if (v10 < (int)a3 || v11 < a2) {
        char v12 = 1;
      }
      unsigned int v16 = *(_DWORD *)(a1 + 12);
      if (v12)
      {
        BOOL v17 = (int)a2 <= (int)v16 && *(_DWORD *)(a1 + 8) >= (int)a3;
        char v40 = 0;
        memset(v39, 0, sizeof(v39));
        kaldi::Matrix<float>::Resize(v39, a2, a3, v17, a5);
        if (*(_DWORD *)(a1 + 12) >= v8) {
          unsigned int v22 = v8;
        }
        else {
          unsigned int v22 = *(_DWORD *)(a1 + 12);
        }
        if (*(_DWORD *)(a1 + 8) >= v7) {
          unsigned int v23 = v7;
        }
        else {
          unsigned int v23 = *(_DWORD *)(a1 + 8);
        }
        uint64_t v38 = 0;
        if (!HIDWORD(v39[1]) || !LODWORD(v39[1]) || HIDWORD(v39[1]) < v22 || LODWORD(v39[1]) < v23) {
          kaldi::KaldiAssertFailure_((kaldi *)"SubMatrix", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_748.reloff + 1, "static_cast<UnsignedMatrixIndexT>(ro) < static_cast<UnsignedMatrixIndexT>(M.num_rows_) && static_cast<UnsignedMatrixIndexT>(co) < static_cast<UnsignedMatrixIndexT>(M.num_cols_) && static_cast<UnsignedMatrixIndexT>(r) <= static_cast<UnsignedMatrixIndexT>(M.num_rows_ - ro) && static_cast<UnsignedMatrixIndexT>(c) <= static_cast<UnsignedMatrixIndexT>(M.num_cols_ - co)", v21);
        }
        unsigned int v35 = v23;
        unsigned int v36 = v22;
        unsigned int v34 = v39[0];
        float v37 = v39[2];
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)v33, a1, 0, v22, 0, v23);
        kaldi::MatrixBase<float>::CopyFromMat<float>((unsigned int *)&v34, (uint64_t)v33, 111, v24, v25);
        double v26 = v39[0];
        v39[0] = *(void **)a1;
        float v27 = v39[0];
        *(void *)a1 = v26;
        long long v28 = *(_OWORD *)&v39[1];
        *(_OWORD *)&v39[1] = *(_OWORD *)(a1 + 8);
        *(_OWORD *)(a1 + 8) = v28;
        char v29 = v40;
        int v30 = *(unsigned __int8 *)(a1 + 32);
        char v40 = *(unsigned char *)(a1 + 32);
        *(unsigned char *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v29;
        if (v27 && !v30) {
          free(v27);
        }
      }
      else
      {
        double v20 = (const char *)*(unsigned int *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = v10;
        *(_DWORD *)(a1 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v11;
        if (a3 > v20)
        {
          kaldi::SubMatrix<float>::SubMatrix((uint64_t)v39, a1, 0, a2, v20, a3 - v20);
          if (LODWORD(v39[1]) == LODWORD(v39[2]))
          {
            bzero(v39[0], 4 * SLODWORD(v39[1]) * (uint64_t)SHIDWORD(v39[1]));
          }
          else if (SHIDWORD(v39[1]) >= 1)
          {
            int v31 = 0;
            do
              bzero((char *)v39[0] + 4 * LODWORD(v39[2]) * v31++, 4 * SLODWORD(v39[1]));
            while (v31 < SHIDWORD(v39[1]));
          }
        }
        if (v8 > v16)
        {
          kaldi::SubMatrix<float>::SubMatrix((uint64_t)v39, a1, v16, v8 - v16, 0, v7);
          if (LODWORD(v39[1]) == LODWORD(v39[2]))
          {
            bzero(v39[0], 4 * SLODWORD(v39[1]) * (uint64_t)SHIDWORD(v39[1]));
          }
          else if (SHIDWORD(v39[1]) >= 1)
          {
            int v32 = 0;
            do
              bzero((char *)v39[0] + 4 * LODWORD(v39[2]) * v32++, 4 * SLODWORD(v39[1]));
            while (v32 < SHIDWORD(v39[1]));
          }
        }
        *(_DWORD *)(a1 + 8) = v7;
        *(_DWORD *)(a1 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v8;
      }
      return;
    }
LABEL_27:
    if (!v13)
    {
LABEL_38:
      kaldi::Matrix<float>::Init(a1, v8, v7, v5, a5);
      if (v6) {
        return;
      }
      goto LABEL_43;
    }
LABEL_28:
    if (v10 >= (int)a3 && v11 >= a2) {
      char v19 = v12;
    }
    else {
      char v19 = 1;
    }
    if ((v19 & 1) == 0)
    {
      *(_DWORD *)(a1 + 8) = a3;
      *(_DWORD *)(a1 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
      if (v6) {
        return;
      }
      goto LABEL_43;
    }
    if (!*(unsigned char *)(a1 + 32)) {
      free(v13);
    }
    *(unsigned char *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    goto LABEL_38;
  }
  if (a4 != 3)
  {
    unint64_t v13 = *(void **)a1;
    goto LABEL_27;
  }
  unint64_t v13 = *(void **)a1;
  if (!*(void *)a1)
  {
    kaldi::Matrix<float>::Init(a1, a2, a3, (int)a5, a5);
LABEL_43:
    kaldi::MatrixBase<float>::SetZero(a1);
    return;
  }
  if (*(_DWORD *)(a1 + 12) != a2
    || (*(_DWORD *)(a1 + 8) != a3 ? (char v14 = 1) : (char v14 = v12), (v14 & 1) != 0))
  {
    int v6 = 0;
    goto LABEL_28;
  }
}

void sub_A4E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a17)
  {
    if (!a21) {
      free(a17);
    }
  }
  _Unwind_Resume(exception_object);
}

void kaldi::MatrixBase<float>::CopyFromMat<double>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  int v7 = *(_DWORD *)(a2 + 12);
  if (a3 == 111)
  {
    int v8 = *(_DWORD *)(a1 + 12);
    if (v8 != v7 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)) {
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_338.reserved2, "num_rows_ == M.NumRows() && num_cols_ == M.NumCols()", a5);
    }
    if (v8 >= 1)
    {
      unsigned int v9 = 0;
      do
      {
        kaldi::MatrixBase<float>::Row(a1, v9, a5, v30);
        if (*(_DWORD *)(a2 + 12) <= v9) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)&stru_B8.offset + 3, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v12);
        }
        uint64_t v13 = *(void *)a2 + 8 * (int)(*(_DWORD *)(a2 + 16) * v9);
        int v14 = *(_DWORD *)(a2 + 8);
        int v28 = 0;
        uint64_t v29 = 0;
        uint64_t v26 = v13;
        int v27 = v14;
        kaldi::VectorBase<float>::CopyFromVec<double>((uint64_t)v30, (uint64_t)&v26, v10, v11, v12);
        ++v9;
      }
      while ((signed int)v9 < *(_DWORD *)(a1 + 12));
    }
  }
  else
  {
    uint64_t v15 = *(unsigned int *)(a1 + 8);
    if (v15 != v7 || (uint64_t v16 = *(unsigned int *)(a1 + 12), v16 != *(_DWORD *)(a2 + 8))) {
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_338.reserved3, "num_cols_ == M.NumRows() && num_rows_ == M.NumCols()", a5);
    }
    if ((int)v16 >= 1)
    {
      uint64_t v17 = 0;
      double v18 = *(float **)a1;
      char v19 = *(double **)a2;
      uint64_t v20 = 4 * *(int *)(a1 + 16);
      uint64_t v21 = 8 * *(int *)(a2 + 16);
      do
      {
        uint64_t v22 = v15;
        unsigned int v23 = v19;
        uint64_t v24 = v18;
        if ((int)v15 >= 1)
        {
          do
          {
            float v25 = *v23;
            *v24++ = v25;
            unsigned int v23 = (double *)((char *)v23 + v21);
            --v22;
          }
          while (v22);
        }
        ++v17;
        double v18 = (float *)((char *)v18 + v20);
        ++v19;
      }
      while (v17 != v16);
    }
  }
}

void kaldi::Matrix<double>::Resize(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  int v5 = (int)a5;
  int v6 = a4;
  signed int v7 = a3;
  int v8 = a2;
  int v10 = *(_DWORD *)(a1 + 16);
  if (v10 < 1) {
    unsigned int v11 = 0;
  }
  else {
    unsigned int v11 = *(_DWORD *)(a1 + 20) / v10;
  }
  if (v10 == a3) {
    char v12 = 0;
  }
  else {
    char v12 = (char)a5;
  }
  if (a4 == 2)
  {
    int v6 = 0;
    uint64_t v13 = *(void **)a1;
    if (a2 && v13)
    {
      if (v10 < (int)a3 || v11 < a2) {
        char v12 = 1;
      }
      unsigned int v16 = *(_DWORD *)(a1 + 12);
      if (v12)
      {
        BOOL v17 = (int)a2 <= (int)v16 && *(_DWORD *)(a1 + 8) >= (int)a3;
        char v40 = 0;
        memset(v39, 0, sizeof(v39));
        kaldi::Matrix<double>::Resize(v39, a2, a3, v17, a5);
        if (*(_DWORD *)(a1 + 12) >= v8) {
          unsigned int v22 = v8;
        }
        else {
          unsigned int v22 = *(_DWORD *)(a1 + 12);
        }
        if (*(_DWORD *)(a1 + 8) >= v7) {
          unsigned int v23 = v7;
        }
        else {
          unsigned int v23 = *(_DWORD *)(a1 + 8);
        }
        uint64_t v38 = 0;
        if (!HIDWORD(v39[1]) || !LODWORD(v39[1]) || HIDWORD(v39[1]) < v22 || LODWORD(v39[1]) < v23) {
          kaldi::KaldiAssertFailure_((kaldi *)"SubMatrix", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_748.reloff + 1, "static_cast<UnsignedMatrixIndexT>(ro) < static_cast<UnsignedMatrixIndexT>(M.num_rows_) && static_cast<UnsignedMatrixIndexT>(co) < static_cast<UnsignedMatrixIndexT>(M.num_cols_) && static_cast<UnsignedMatrixIndexT>(r) <= static_cast<UnsignedMatrixIndexT>(M.num_rows_ - ro) && static_cast<UnsignedMatrixIndexT>(c) <= static_cast<UnsignedMatrixIndexT>(M.num_cols_ - co)", v21);
        }
        unsigned int v35 = v23;
        unsigned int v36 = v22;
        unsigned int v34 = v39[0];
        float v37 = v39[2];
        kaldi::SubMatrix<double>::SubMatrix((uint64_t)v33, a1, 0, v22, 0, v23);
        kaldi::MatrixBase<double>::CopyFromMat<double>((unsigned int *)&v34, v33, 111, v24, v25);
        uint64_t v26 = v39[0];
        v39[0] = *(void **)a1;
        int v27 = v39[0];
        *(void *)a1 = v26;
        long long v28 = *(_OWORD *)&v39[1];
        *(_OWORD *)&v39[1] = *(_OWORD *)(a1 + 8);
        *(_OWORD *)(a1 + 8) = v28;
        char v29 = v40;
        int v30 = *(unsigned __int8 *)(a1 + 32);
        char v40 = *(unsigned char *)(a1 + 32);
        *(unsigned char *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v29;
        if (v27 && !v30) {
          free(v27);
        }
      }
      else
      {
        uint64_t v20 = (const char *)*(unsigned int *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = v10;
        *(_DWORD *)(a1 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v11;
        if (a3 > v20)
        {
          kaldi::SubMatrix<double>::SubMatrix((uint64_t)v39, a1, 0, a2, v20, a3 - v20);
          if (LODWORD(v39[1]) == LODWORD(v39[2]))
          {
            bzero(v39[0], 8 * SLODWORD(v39[1]) * (uint64_t)SHIDWORD(v39[1]));
          }
          else if (SHIDWORD(v39[1]) >= 1)
          {
            int v31 = 0;
            do
              bzero((char *)v39[0] + 8 * LODWORD(v39[2]) * v31++, 8 * SLODWORD(v39[1]));
            while (v31 < SHIDWORD(v39[1]));
          }
        }
        if (v8 > v16)
        {
          kaldi::SubMatrix<double>::SubMatrix((uint64_t)v39, a1, v16, v8 - v16, 0, v7);
          if (LODWORD(v39[1]) == LODWORD(v39[2]))
          {
            bzero(v39[0], 8 * SLODWORD(v39[1]) * (uint64_t)SHIDWORD(v39[1]));
          }
          else if (SHIDWORD(v39[1]) >= 1)
          {
            int v32 = 0;
            do
              bzero((char *)v39[0] + 8 * LODWORD(v39[2]) * v32++, 8 * SLODWORD(v39[1]));
            while (v32 < SHIDWORD(v39[1]));
          }
        }
        *(_DWORD *)(a1 + 8) = v7;
        *(_DWORD *)(a1 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v8;
      }
      return;
    }
LABEL_27:
    if (!v13)
    {
LABEL_38:
      kaldi::Matrix<double>::Init(a1, v8, v7, v5, a5);
      if (v6) {
        return;
      }
      goto LABEL_43;
    }
LABEL_28:
    if (v10 >= (int)a3 && v11 >= a2) {
      char v19 = v12;
    }
    else {
      char v19 = 1;
    }
    if ((v19 & 1) == 0)
    {
      *(_DWORD *)(a1 + 8) = a3;
      *(_DWORD *)(a1 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
      if (v6) {
        return;
      }
      goto LABEL_43;
    }
    if (!*(unsigned char *)(a1 + 32)) {
      free(v13);
    }
    *(unsigned char *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    goto LABEL_38;
  }
  if (a4 != 3)
  {
    uint64_t v13 = *(void **)a1;
    goto LABEL_27;
  }
  uint64_t v13 = *(void **)a1;
  if (!*(void *)a1)
  {
    kaldi::Matrix<double>::Init(a1, a2, a3, (int)a5, a5);
LABEL_43:
    kaldi::MatrixBase<double>::SetZero(a1);
    return;
  }
  if (*(_DWORD *)(a1 + 12) != a2
    || (*(_DWORD *)(a1 + 8) != a3 ? (char v14 = 1) : (char v14 = v12), (v14 & 1) != 0))
  {
    int v6 = 0;
    goto LABEL_28;
  }
}

void sub_A53E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a17)
  {
    if (!a21) {
      free(a17);
    }
  }
  _Unwind_Resume(exception_object);
}

void kaldi::MatrixBase<double>::CopyFromMat<float>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  int v7 = *(_DWORD *)(a2 + 12);
  if (a3 == 111)
  {
    int v8 = *(_DWORD *)(a1 + 12);
    if (v8 != v7 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)) {
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_338.reserved2, "num_rows_ == M.NumRows() && num_cols_ == M.NumCols()", a5);
    }
    if (v8 >= 1)
    {
      signed int v9 = 0;
      do
      {
        uint64_t v10 = *(void *)a1 + 8 * *(_DWORD *)(a1 + 16) * v9;
        int v11 = *(_DWORD *)(a1 + 8);
        int v28 = 0;
        uint64_t v29 = 0;
        uint64_t v26 = v10;
        int v27 = v11;
        kaldi::MatrixBase<float>::Row(a2, v9, a5, v25);
        kaldi::VectorBase<double>::CopyFromVec<float>((uint64_t)&v26, (uint64_t)v25, v12, v13, v14);
        ++v9;
      }
      while (v9 < *(_DWORD *)(a1 + 12));
    }
  }
  else
  {
    uint64_t v15 = *(unsigned int *)(a1 + 8);
    if (v15 != v7 || (uint64_t v16 = *(unsigned int *)(a1 + 12), v16 != *(_DWORD *)(a2 + 8))) {
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_338.reserved3, "num_cols_ == M.NumRows() && num_rows_ == M.NumCols()", a5);
    }
    if ((int)v16 >= 1)
    {
      uint64_t v17 = 0;
      double v18 = *(double **)a1;
      char v19 = *(float **)a2;
      uint64_t v20 = 8 * *(int *)(a1 + 16);
      uint64_t v21 = 4 * *(int *)(a2 + 16);
      do
      {
        uint64_t v22 = v15;
        unsigned int v23 = v19;
        uint64_t v24 = v18;
        if ((int)v15 >= 1)
        {
          do
          {
            *v24++ = *v23;
            unsigned int v23 = (float *)((char *)v23 + v21);
            --v22;
          }
          while (v22);
        }
        ++v17;
        double v18 = (double *)((char *)v18 + v20);
        ++v19;
      }
      while (v17 != v16);
    }
  }
}

uint64_t kaldi::MatrixBase<float>::Row@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, const char *a3@<X4>, uint64_t *a4@<X8>)
{
  if (*(_DWORD *)(result + 12) <= a2) {
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)&stru_B8.reloff + 2, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", a3);
  }
  uint64_t v4 = *(void *)result + 4 * (int)(*(_DWORD *)(result + 16) * a2);
  int v5 = *(_DWORD *)(result + 8);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = v4;
  *((_DWORD *)a4 + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v5;
  return result;
}

{
  uint64_t v4;
  int v5;

  if (*(_DWORD *)(result + 12) <= a2) {
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)&stru_B8.offset + 3, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", a3);
  }
  uint64_t v4 = *(void *)result + 4 * (int)(*(_DWORD *)(result + 16) * a2);
  int v5 = *(_DWORD *)(result + 8);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = v4;
  *((_DWORD *)a4 + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v5;
  return result;
}

unsigned int *kaldi::MatrixBase<float>::CopyFromMat<float>(unsigned int *result, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  if ((unsigned int *)a2 != result)
  {
    uint64_t v6 = (uint64_t)result;
    int v7 = *(_DWORD *)(a2 + 12);
    if (a3 == 111)
    {
      int v8 = result[3];
      if (v8 != v7 || result[2] != *(_DWORD *)(a2 + 8)) {
        kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_338.reserved2, "num_rows_ == M.NumRows() && num_cols_ == M.NumCols()", a5);
      }
      if (v8 >= 1)
      {
        signed int v9 = 0;
        do
        {
          kaldi::MatrixBase<float>::Row(v6, v9, a5, v25);
          kaldi::MatrixBase<float>::Row(a2, v9, v10, v24);
          uint64_t result = (unsigned int *)kaldi::VectorBase<float>::CopyFromVec((uint64_t)v25, (uint64_t)v24, v11, v12, v13);
          ++v9;
        }
        while (v9 < *(_DWORD *)(v6 + 12));
      }
    }
    else
    {
      uint64_t v14 = result[2];
      if (v14 != v7 || (uint64_t v15 = result[3], v15 != *(_DWORD *)(a2 + 8))) {
        kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_338.reserved3, "num_cols_ == M.NumRows() && num_rows_ == M.NumCols()", a5);
      }
      if ((int)v15 >= 1)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *(_DWORD **)result;
        double v18 = *(_DWORD **)a2;
        uint64_t v19 = 4 * (int)result[4];
        uint64_t v20 = 4 * *(int *)(a2 + 16);
        do
        {
          uint64_t v21 = v14;
          uint64_t v22 = v18;
          unsigned int v23 = v17;
          if ((int)v14 >= 1)
          {
            do
            {
              *v23++ = *v22;
              uint64_t v22 = (_DWORD *)((char *)v22 + v20);
              --v21;
            }
            while (v21);
          }
          ++v16;
          uint64_t v17 = (_DWORD *)((char *)v17 + v19);
          ++v18;
        }
        while (v16 != v15);
      }
    }
  }
  return result;
}

unsigned int *kaldi::MatrixBase<double>::CopyFromMat<double>(unsigned int *result, unsigned int *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (a2 != result)
  {
    uint64_t v6 = result;
    unsigned int v7 = a2[3];
    if (a3 == 111)
    {
      int v8 = result[3];
      if (v8 != v7 || result[2] != a2[2]) {
        kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_338.reserved2, "num_rows_ == M.NumRows() && num_cols_ == M.NumCols()", a5);
      }
      if (v8 >= 1)
      {
        signed int v9 = 0;
        do
        {
          uint64_t v10 = *(void *)v6 + 8 * (int)(v6[4] * v9);
          unsigned int v11 = v6[2];
          int v30 = 0;
          uint64_t v31 = 0;
          uint64_t v28 = v10;
          unsigned int v29 = v11;
          if (a2[3] <= v9) {
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)&stru_B8.offset + 3, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", a5);
          }
          uint64_t v12 = *(void *)a2 + 8 * (int)(a2[4] * v9);
          unsigned int v13 = a2[2];
          int v26 = 0;
          uint64_t v27 = 0;
          uint64_t v24 = v12;
          unsigned int v25 = v13;
          uint64_t result = (unsigned int *)kaldi::VectorBase<double>::CopyFromVec((uint64_t)&v28, (uint64_t)&v24, a3, a4, a5);
          ++v9;
        }
        while (v9 < (int)v6[3]);
      }
    }
    else
    {
      uint64_t v14 = result[2];
      if (v14 != v7 || (uint64_t v15 = result[3], v15 != a2[2])) {
        kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_338.reserved3, "num_cols_ == M.NumRows() && num_rows_ == M.NumCols()", a5);
      }
      if ((int)v15 >= 1)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *(void **)result;
        double v18 = *(void **)a2;
        uint64_t v19 = 8 * (int)result[4];
        uint64_t v20 = 8 * (int)a2[4];
        do
        {
          uint64_t v21 = v14;
          uint64_t v22 = v18;
          unsigned int v23 = v17;
          if ((int)v14 >= 1)
          {
            do
            {
              *v23++ = *v22;
              uint64_t v22 = (void *)((char *)v22 + v20);
              --v21;
            }
            while (v21);
          }
          ++v16;
          uint64_t v17 = (void *)((char *)v17 + v19);
          ++v18;
        }
        while (v16 != v15);
      }
    }
  }
  return result;
}

void kaldi::MatrixBase<float>::SetZero(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 == *(_DWORD *)(a1 + 16))
  {
    double v3 = *(void **)a1;
    size_t v4 = 4 * v2 * (uint64_t)*(int *)(a1 + 12);
    bzero(v3, v4);
  }
  else if (*(int *)(a1 + 12) >= 1)
  {
    int v5 = 0;
    do
      bzero((void *)(*(void *)a1 + 4 * *(_DWORD *)(a1 + 16) * v5++), 4 * *(int *)(a1 + 8));
    while (v5 < *(_DWORD *)(a1 + 12));
  }
}

void kaldi::MatrixBase<double>::SetZero(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 == *(_DWORD *)(a1 + 16))
  {
    double v3 = *(void **)a1;
    size_t v4 = 8 * v2 * (uint64_t)*(int *)(a1 + 12);
    bzero(v3, v4);
  }
  else if (*(int *)(a1 + 12) >= 1)
  {
    int v5 = 0;
    do
      bzero((void *)(*(void *)a1 + 8 * *(_DWORD *)(a1 + 16) * v5++), 8 * *(int *)(a1 + 8));
    while (v5 < *(_DWORD *)(a1 + 12));
  }
}

uint64_t kaldi::MatrixBase<float>::CopyFromMat<signed char>(uint64_t a1, unsigned int *a2, int a3)
{
  int v6 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2);
  if (a3 == 111)
  {
    if (v6 != *(_DWORD *)(a1 + 8)) {
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_970.segname[1], "qm.NumCols() == num_cols_", v7);
    }
    uint64_t result = kaldi::QuantizedMatrixBase<short>::NumRows(a2);
    if (result != *(_DWORD *)(a1 + 12)) {
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_970.segname[2], "qm.NumRows() == num_rows_", v10);
    }
    int v11 = *(_DWORD *)(a1 + 8);
    if (v11 >= 1)
    {
      for (signed int i = 0; i < v11; ++i)
      {
        if ((int)result >= 1)
        {
          int v13 = 0;
          do
          {
            float v14 = kaldi::QuantizedMatrixBase<signed char>::operator()((uint64_t)a2, v13, i, v9, v10);
            *(float *)kaldi::MatrixBase<float>::operator()(a1, v13++, i, v15, v16) = v14;
            uint64_t result = *(unsigned int *)(a1 + 12);
          }
          while (v13 < (int)result);
          int v11 = *(_DWORD *)(a1 + 8);
        }
      }
    }
  }
  else
  {
    if (v6 != *(_DWORD *)(a1 + 12)) {
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_970.segname[9], "qm.NumCols() == num_rows_", v7);
    }
    uint64_t result = kaldi::QuantizedMatrixBase<short>::NumRows(a2);
    if (result != *(_DWORD *)(a1 + 8)) {
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_970.segname[10], "qm.NumRows() == num_cols_", v18);
    }
    if ((int)result >= 1)
    {
      signed int v19 = 0;
      int v20 = *(_DWORD *)(a1 + 12);
      do
      {
        if (v20 >= 1)
        {
          for (signed int j = 0; j < v20; ++j)
          {
            float v22 = kaldi::QuantizedMatrixBase<signed char>::operator()((uint64_t)a2, v19, j, v17, v18);
            *(float *)kaldi::MatrixBase<float>::operator()(a1, j, v19, v23, v24) = v22;
            int v20 = *(_DWORD *)(a1 + 12);
          }
          uint64_t result = *(unsigned int *)(a1 + 8);
        }
        ++v19;
      }
      while (v19 < (int)result);
    }
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::CopyFromMat<short>(uint64_t a1, unsigned int *a2, int a3)
{
  int v6 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2);
  if (a3 == 111)
  {
    if (v6 != *(_DWORD *)(a1 + 8)) {
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_970.segname[1], "qm.NumCols() == num_cols_", v7);
    }
    uint64_t result = kaldi::QuantizedMatrixBase<short>::NumRows(a2);
    if (result != *(_DWORD *)(a1 + 12)) {
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_970.segname[2], "qm.NumRows() == num_rows_", v10);
    }
    int v11 = *(_DWORD *)(a1 + 8);
    if (v11 >= 1)
    {
      for (signed int i = 0; i < v11; ++i)
      {
        if ((int)result >= 1)
        {
          int v13 = 0;
          do
          {
            float v14 = kaldi::QuantizedMatrixBase<short>::operator()((uint64_t)a2, v13, i, v9, v10);
            *(float *)kaldi::MatrixBase<float>::operator()(a1, v13++, i, v15, v16) = v14;
            uint64_t result = *(unsigned int *)(a1 + 12);
          }
          while (v13 < (int)result);
          int v11 = *(_DWORD *)(a1 + 8);
        }
      }
    }
  }
  else
  {
    if (v6 != *(_DWORD *)(a1 + 12)) {
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_970.segname[9], "qm.NumCols() == num_rows_", v7);
    }
    uint64_t result = kaldi::QuantizedMatrixBase<short>::NumRows(a2);
    if (result != *(_DWORD *)(a1 + 8)) {
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_970.segname[10], "qm.NumRows() == num_cols_", v18);
    }
    if ((int)result >= 1)
    {
      signed int v19 = 0;
      int v20 = *(_DWORD *)(a1 + 12);
      do
      {
        if (v20 >= 1)
        {
          for (signed int j = 0; j < v20; ++j)
          {
            float v22 = kaldi::QuantizedMatrixBase<short>::operator()((uint64_t)a2, v19, j, v17, v18);
            *(float *)kaldi::MatrixBase<float>::operator()(a1, j, v19, v23, v24) = v22;
            int v20 = *(_DWORD *)(a1 + 12);
          }
          uint64_t result = *(unsigned int *)(a1 + 8);
        }
        ++v19;
      }
      while (v19 < (int)result);
    }
  }
  return result;
}

uint64_t kaldi::Matrix<float>::Matrix(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  *(unsigned char *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  kaldi::Matrix<float>::Resize(a1, a2, a3, a4, a5);
  return a1;
}

uint64_t kaldi::Matrix<float>::Matrix<signed char>(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = kaldi::QuantizedMatrixBase<short>::NumRows(a2);
  uint64_t v5 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  kaldi::Matrix<float>::Resize(a1, v4, v5, 0, 0);
  kaldi::MatrixBase<float>::CopyFromMat<signed char>(a1, a2, 111);
  return a1;
}

void sub_A5F10(_Unwind_Exception *exception_object)
{
  if (*(void *)v1)
  {
    if (!*(unsigned char *)(v1 + 32)) {
      free(*(void **)v1);
    }
  }
  *(unsigned char *)(v1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(v1 + 8) = 0;
  *(void *)(v1 + 16) = 0;
  *(void *)uint64_t v1 = 0;
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::Matrix<float>::~Matrix(uint64_t a1)
{
  int v2 = *(void **)a1;
  if (v2 && !*(unsigned char *)(a1 + 32)) {
    free(v2);
  }
  *(unsigned char *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  return a1;
}

uint64_t kaldi::Matrix<float>::Matrix<short>(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = kaldi::QuantizedMatrixBase<short>::NumRows(a2);
  uint64_t v5 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  kaldi::Matrix<float>::Resize(a1, v4, v5, 0, 0);
  kaldi::MatrixBase<float>::CopyFromMat<short>(a1, a2, 111);
  return a1;
}

void sub_A5FF8(_Unwind_Exception *exception_object)
{
  if (*(void *)v1)
  {
    if (!*(unsigned char *)(v1 + 32)) {
      free(*(void **)v1);
    }
  }
  *(unsigned char *)(v1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(v1 + 8) = 0;
  *(void *)(v1 + 16) = 0;
  *(void *)uint64_t v1 = 0;
  _Unwind_Resume(exception_object);
}

void kaldi::MatrixBase<float>::AddMatMat(uint64_t a1, uint64_t a2, CBLAS_TRANSPOSE __TransA, uint64_t a4, const char *__TransB, float a6, float a7)
{
  if (__TransA != CblasNoTrans || __TransB != 111)
  {
    if (__TransA == CblasTrans && __TransB == 111)
    {
      int v8 = *(_DWORD *)(a2 + 12);
      if (v8 != *(_DWORD *)(a4 + 12)) {
        goto LABEL_33;
      }
      int v7 = *(_DWORD *)(a2 + 8);
      if (v7 != *(_DWORD *)(a1 + 12)) {
        goto LABEL_33;
      }
      int v9 = *(_DWORD *)(a4 + 8);
    }
    else
    {
      BOOL v11 = __TransB == 112;
      if (__TransA == CblasNoTrans && __TransB == 112)
      {
        int v7 = *(_DWORD *)(a2 + 8);
        if (v7 == *(_DWORD *)(a4 + 8))
        {
          int v8 = *(_DWORD *)(a2 + 12);
          if (v8 == *(_DWORD *)(a1 + 12))
          {
            int v9 = *(_DWORD *)(a4 + 12);
            if (v9 == *(_DWORD *)(a1 + 8)) {
              goto LABEL_6;
            }
          }
        }
        BOOL v11 = 1;
      }
      if (!v11
        || __TransA != CblasTrans
        || (int v8 = *(_DWORD *)(a2 + 12), v8 != *(_DWORD *)(a4 + 8))
        || (int v7 = *(_DWORD *)(a2 + 8), v7 != *(_DWORD *)(a1 + 12)))
      {
LABEL_33:
        kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_B8.sectname[10], "(transA == kNoTrans && transB == kNoTrans && A.num_cols_ == B.num_rows_ && A.num_rows_ == num_rows_ && B.num_cols_ == num_cols_) || (transA == kTrans && transB == kNoTrans && A.num_rows_ == B.num_rows_ && A.num_cols_ == num_rows_ && B.num_cols_ == num_cols_) || (transA == kNoTrans && transB == kTrans && A.num_cols_ == B.num_cols_ && A.num_rows_ == num_rows_ && B.num_rows_ == num_cols_) || (transA == kTrans && transB == kTrans && A.num_rows_ == B.num_cols_ && A.num_cols_ == num_rows_ && B.num_rows_ == num_cols_)", __TransB);
      }
      int v9 = *(_DWORD *)(a4 + 12);
    }
    if (v9 == *(_DWORD *)(a1 + 8))
    {
      int v10 = v7;
      goto LABEL_25;
    }
    goto LABEL_33;
  }
  int v7 = *(_DWORD *)(a2 + 8);
  if (v7 != *(_DWORD *)(a4 + 12)) {
    goto LABEL_33;
  }
  int v8 = *(_DWORD *)(a2 + 12);
  if (v8 != *(_DWORD *)(a1 + 12)) {
    goto LABEL_33;
  }
  int v9 = *(_DWORD *)(a4 + 8);
  if (v9 != *(_DWORD *)(a1 + 8)) {
    goto LABEL_33;
  }
LABEL_6:
  int v10 = v8;
LABEL_25:
  if (a2 == a1 || a4 == a1) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_B8.sectname[11], "&A != this && &B != this", __TransB);
  }
  if (v10)
  {
    if (__TransA == CblasNoTrans) {
      int v12 = v7;
    }
    else {
      int v12 = v8;
    }
    cblas_sgemm(CblasRowMajor, __TransA, (const CBLAS_TRANSPOSE)__TransB, v10, v9, v12, a6, *(const float **)a2, *(_DWORD *)(a2 + 16), *(const float **)a4, *(_DWORD *)(a4 + 16), a7, *(float **)a1, *(_DWORD *)(a1 + 16));
  }
}

uint64_t *kaldi::MatrixBase<float>::AddVecToRows<float>(uint64_t *result, uint64_t *a2, float a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v6 = *((unsigned int *)result + 2);
  if (*((_DWORD *)a2 + 2) != v6) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddVecToRows", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_D20.filesize + 6, "v.Dim() == num_cols", a6);
  }
  int v7 = *((_DWORD *)result + 3);
  if (v7 >= 1)
  {
    int v8 = 0;
    uint64_t v9 = *a2;
    uint64_t v10 = *result;
    uint64_t v11 = 4 * *((int *)result + 4);
    do
    {
      if ((int)v6 >= 1)
      {
        uint64_t v12 = 0;
        do
        {
          *(float *)(v10 + v1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(float *)(v10 + v12) + (float)(a3 * *(float *)(v9 + v12));
          v12 += 4;
        }
        while (4 * v6 != v12);
      }
      ++v8;
      v10 += v11;
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t *kaldi::MatrixBase<float>::AddVecToCols<float>(uint64_t *result, uint64_t *a2, float a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v6 = *((unsigned int *)result + 3);
  if (*((_DWORD *)a2 + 2) != v6) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddVecToCols", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_D68.sectname[7], "v.Dim() == num_rows", a6);
  }
  if ((int)v6 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *((unsigned int *)result + 2);
    uint64_t v9 = *a2;
    uint64_t v10 = *result;
    uint64_t v11 = 4 * *((int *)result + 4);
    do
    {
      if ((int)v8 >= 1)
      {
        uint64_t v12 = 0;
        float v13 = *(float *)(v9 + 4 * v7) * a3;
        do
        {
          *(float *)(v10 + v1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v13 + *(float *)(v10 + v12);
          v12 += 4;
        }
        while (4 * v8 != v12);
      }
      ++v7;
      v10 += v11;
    }
    while (v7 != v6);
  }
  return result;
}

double kaldi::Matrix<float>::Matrix(uint64_t a1)
{
  *(unsigned char *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t kaldi::Matrix<float>::Matrix(uint64_t a1, uint64_t a2, int a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (a3 == 111)
  {
    kaldi::Matrix<float>::Resize(a1, *(unsigned int *)(a2 + 12), *(unsigned int *)(a2 + 8), 0, 0);
    int v7 = 111;
  }
  else
  {
    kaldi::Matrix<float>::Resize(a1, *(unsigned int *)(a2 + 8), *(unsigned int *)(a2 + 12), 0, 0);
    int v7 = 112;
  }
  kaldi::MatrixBase<float>::CopyFromMat<float>((unsigned int *)a1, a2, v7, v5, v6);
  return a1;
}

uint64_t kaldi::Matrix<float>::Matrix(uint64_t a1, unsigned int *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  kaldi::Matrix<float>::Resize(a1, a2[3], a2[2], 1, (const char *)(a2[2] == a2[4]));
  kaldi::MatrixBase<float>::CopyFromMat<float>((unsigned int *)a1, (uint64_t)a2, 111, v4, v5);
  return a1;
}

uint64_t kaldi::Matrix<float>::Matrix(uint64_t a1, uint64_t *a2)
{
  *(unsigned char *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v4 = *a2;
  if (*a2)
  {
    uint64_t v5 = *(unsigned int *)(v4 + 8);
    uint64_t v6 = *(unsigned int *)(v4 + 12);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  kaldi::Matrix<float>::Resize(a1, v5, v6, 1, 0);
  kaldi::CompressedMatrix::CopyToMat<float>(a2, (kaldi::ContextDependency *)a1);
  return a1;
}

void kaldi::Matrix<float>::Read(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5)
{
  int v6 = a3;
  if (a4)
  {
    char v86 = 0;
    *(_OWORD *)v84 = 0u;
    long long v85 = 0u;
    kaldi::Matrix<float>::Read(v84, a2, a3, 0, a5, 0.0);
    if (*(_DWORD *)(a1 + 12))
    {
      if (*(void **)(a1 + 8) != v84[1])
      {
        if (HIDWORD(v84[1]))
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v90, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1662);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v90, (uint64_t)"Matrix::Read, size mismatch ", 28);
          uint64_t v11 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
          uint64_t v12 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" vs. ", 5);
          float v13 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
          std::ostream::operator<<();
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v90);
        }
        goto LABEL_15;
      }
    }
    else
    {
      kaldi::Matrix<float>::Resize(a1, HIDWORD(v84[1]), LODWORD(v84[1]), 0, 0);
    }
    kaldi::MatrixBase<float>::AddMat(a1, (uint64_t)v84, 111, 1.0, 1.0, v9, v10);
LABEL_15:
    if (v84[0])
    {
      if (!v86) {
        free(v84[0]);
      }
    }
    return;
  }
  std::istream::tellg();
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v84);
  if (!v6)
  {
    memset(&v89, 0, sizeof(v89));
    std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v89);
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)": Expected \"[\", got EOF", 23);
LABEL_65:
      int v45 = 2;
      goto LABEL_66;
    }
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v89.__r_.__value_.__l.__size_ != 1)
      {
        if (v89.__r_.__value_.__l.__size_ == 2 && *(_WORD *)v89.__r_.__value_.__l.__data_ == 23899) {
          goto LABEL_122;
        }
        goto LABEL_58;
      }
      unsigned int v36 = (std::string *)v89.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (HIBYTE(v89.__r_.__value_.__r.__words[2]) != 1)
      {
        if (HIBYTE(v89.__r_.__value_.__r.__words[2]) == 2 && LOWORD(v89.__r_.__value_.__l.__data_) == 23899)
        {
LABEL_122:
          kaldi::Matrix<float>::Resize(a1, 0, 0, 0, 0);
          int v45 = 1;
LABEL_66:
          if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v89.__r_.__value_.__l.__data_);
          }
          if ((v45 | 2) != 2) {
            goto LABEL_69;
          }
          goto LABEL_106;
        }
LABEL_58:
        float v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)": Expected \"[\", got \"", 21);
        if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          float v42 = &v89;
        }
        else {
          float v42 = (std::string *)v89.__r_.__value_.__r.__words[0];
        }
        if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v89.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v89.__r_.__value_.__l.__size_;
        }
        float v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v42, size);
        LOBYTE(v90) = 34;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)&v90, 1);
        goto LABEL_65;
      }
      unsigned int v36 = &v89;
    }
    if (v36->__r_.__value_.__s.__data_[0] == 91)
    {
      __s1 = 0;
      size_t __n = 0;
      uint64_t v83 = 0;
      operator new();
    }
    goto LABEL_58;
  }
  int v14 = kaldi::Peek(a2, 1);
  if (v14 == 68)
  {
    if (a5)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v90, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1691);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v90, (uint64_t)"Can not map into the wrong matrix data type", 43);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v90);
    }
    uint64_t v18 = *(unsigned int *)(a1 + 8);
    uint64_t v17 = *(unsigned int *)(a1 + 12);
    long long v90 = 0u;
    long long v91 = 0u;
    char v92 = 0;
    kaldi::Matrix<double>::Resize((uint64_t)&v90, v17, v18, 0, 0);
    kaldi::Matrix<double>::Read((uint64_t)&v90, a2, 1, 0, 0);
    kaldi::Matrix<float>::Resize(a1, HIDWORD(v90), DWORD2(v90), 0, 0);
    kaldi::MatrixBase<float>::CopyFromMat<double>(a1, (uint64_t)&v90, 111, v19, v20);
    if ((void)v90 && !v92) {
      free((void *)v90);
    }
    goto LABEL_69;
  }
  if (v14 != 67)
  {
    memset(&v89, 0, sizeof(v89));
    std::string::append(&v89, "F");
    BOOL v21 = a5 != 0;
    if (a5) {
      float v22 = "N";
    }
    else {
      float v22 = "M";
    }
    std::string::append(&v89, v22);
    __s1 = 0;
    size_t __n = 0;
    uint64_t v83 = 0;
    kaldi::ReadToken(a2, 1, (uint64_t)&__s1, v23, v24);
    int v27 = SHIBYTE(v83);
    size_t v28 = __n;
    if (v83 >= 0) {
      size_t v29 = HIBYTE(v83);
    }
    else {
      size_t v29 = __n;
    }
    std::string::size_type v30 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
    int v31 = SHIBYTE(v89.__r_.__value_.__r.__words[2]);
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v30 = v89.__r_.__value_.__l.__size_;
    }
    if (v29 == v30)
    {
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v32 = &v89;
      }
      else {
        int v32 = (std::string *)v89.__r_.__value_.__r.__words[0];
      }
      if (v83 < 0)
      {
        if (!memcmp(__s1, v32, __n)) {
          goto LABEL_85;
        }
        goto LABEL_74;
      }
      if (!HIBYTE(v83)) {
        goto LABEL_85;
      }
      p_s1 = &__s1;
      uint64_t v34 = HIBYTE(v83);
      while (*(unsigned __int8 *)p_s1 == v32->__r_.__value_.__s.__data_[0])
      {
        p_s1 = (void **)((char *)p_s1 + 1);
        int v32 = (std::string *)((char *)v32 + 1);
        if (!--v34) {
          goto LABEL_85;
        }
      }
    }
    if ((v83 & 0x8000000000000000) == 0)
    {
      if (HIBYTE(v83) != 2) {
        goto LABEL_87;
      }
      unsigned int v35 = (unsigned __int8 *)&__s1;
LABEL_76:
      int v46 = *v35;
      uint64_t v47 = (std::string *)v89.__r_.__value_.__r.__words[0];
      if (v31 >= 0) {
        uint64_t v47 = &v89;
      }
      if (v46 == v47->__r_.__value_.__s.__data_[0])
      {
        v48 = __s1;
        if (v27 >= 0) {
          v48 = &__s1;
        }
        if (v48[1] == 78)
        {
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v90, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1708);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v90, (uint64_t)"Reading aligned matrix as a stream", 34);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v90);
          }
          BOOL v21 = 1;
LABEL_85:
          LODWORD(v79) = 0;
          uint64_t v80 = 0;
          kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v79, v25, v26);
          kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v80 + 4, v49, v50);
          if (v21)
          {
            kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v80, v52, v53);
            fst::AlignInput();
          }
          else
          {
            LODWORD(v80) = HIDWORD(v80);
          }
          uint64_t v68 = v79;
          if (a5)
          {
            *(_DWORD *)(a1 + 8) = HIDWORD(v80);
            *(_DWORD *)(a1 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v68;
            *(_DWORD *)(a1 + 16) = v80;
            if (*(void *)a1 && !*(unsigned char *)(a1 + 32)) {
              free(*(void **)a1);
            }
            std::istream::tellg();
            *(void *)a1 = a5 + v93;
            *(unsigned char *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 1;
            std::istream::seekg();
            if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)": Seeking failed", 16);
LABEL_100:
              int v62 = 2;
              goto LABEL_101;
            }
          }
          else
          {
            int v69 = HIDWORD(v80);
            if (__PAIR64__(v79, HIDWORD(v80)) == *(void *)(a1 + 8))
            {
              int v70 = HIDWORD(v80);
            }
            else
            {
              kaldi::Matrix<float>::Resize(a1, v79, HIDWORD(v80), 1, 0);
              int v70 = *(_DWORD *)(a1 + 8);
              int v69 = HIDWORD(v80);
              uint64_t v68 = v79;
            }
            int v71 = *(_DWORD *)(a1 + 16);
            int v72 = v80;
            if (v71 == v70 && v71 == v80 && v69 * v68)
            {
              std::istream::read();
              if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)": Reading whole matrix failed", 29);
                goto LABEL_100;
              }
            }
            else if ((int)v68 >= 1)
            {
              unsigned int v73 = 0;
              v74 = a2 + 4;
              uint64_t v75 = 29;
              while (1)
              {
                if (*(_DWORD *)(a1 + 12) <= v73) {
                  kaldi::KaldiAssertFailure_((kaldi *)"RowData", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", &stru_68.sectname[15], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v53);
                }
                std::istream::read();
                if ((*((unsigned char *)v74 + *(void *)(*a2 - 24)) & 5) != 0)
                {
                  v77 = v84;
                  v78 = ": Reading a matrix row failed";
                  goto LABEL_144;
                }
                if (v72 != v69)
                {
                  std::istream::seekg();
                  if ((*((unsigned char *)v74 + *(void *)(*a2 - 24)) & 5) != 0) {
                    break;
                  }
                }
                if ((int)++v73 >= (int)v79) {
                  goto LABEL_138;
                }
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)": Seek for padding ", 19);
              v77 = (void *)std::ostream::operator<<();
              v78 = " failed";
              uint64_t v75 = 7;
LABEL_144:
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)v78, v75);
              goto LABEL_100;
            }
          }
LABEL_138:
          kaldi::WarnOnZeros<float>(a1, v68, v51, v52, v53);
          int v76 = *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32);
          int v62 = 1;
          if ((v76 & 2) == 0)
          {
            if ((v76 & 5) != 0) {
              int v62 = 2;
            }
            else {
              int v62 = 1;
            }
          }
LABEL_101:
          if (SHIBYTE(v83) < 0) {
            operator delete(__s1);
          }
          if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v89.__r_.__value_.__l.__data_);
          }
          if (v62 != 2) {
            goto LABEL_69;
          }
LABEL_106:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v90, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1899);
          v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v90, (uint64_t)"Failed to read matrix from stream.  ", 36);
          std::stringbuf::str();
          if (v83 >= 0) {
            v64 = &__s1;
          }
          else {
            v64 = __s1;
          }
          if (v83 >= 0) {
            size_t v65 = HIBYTE(v83);
          }
          else {
            size_t v65 = __n;
          }
          v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)v64, v65);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)" File position at start is ", 27);
          v67 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)", currently ", 12);
          std::istream::tellg();
          std::ostream::operator<<();
          if (SHIBYTE(v83) < 0) {
            operator delete(__s1);
          }
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v90);
        }
      }
LABEL_87:
      long long v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)": Expected token ", 17);
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v55 = &v89;
      }
      else {
        long long v55 = (std::string *)v89.__r_.__value_.__r.__words[0];
      }
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v56 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v56 = v89.__r_.__value_.__l.__size_;
      }
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)v55, v56);
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)", got ", 6);
      if (v83 >= 0) {
        v59 = &__s1;
      }
      else {
        v59 = __s1;
      }
      if (v83 >= 0) {
        size_t v60 = HIBYTE(v83);
      }
      else {
        size_t v60 = __n;
      }
      v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)v59, v60);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)". This could mean that you're trying to memory map an unaligned file.", 69);
      goto LABEL_100;
    }
LABEL_74:
    if (v28 != 2) {
      goto LABEL_87;
    }
    unsigned int v35 = (unsigned __int8 *)__s1;
    goto LABEL_76;
  }
  *(void *)&long long v90 = 0;
  BYTE8(v90) = 0;
  kaldi::CompressedMatrix::Read((uint64_t)&v90, a2, 1, a5);
  if ((void)v90)
  {
    uint64_t v15 = *(unsigned int *)(v90 + 8);
    uint64_t v16 = *(unsigned int *)(v90 + 12);
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
  }
  kaldi::Matrix<float>::Resize(a1, v15, v16, 0, 0);
  kaldi::CompressedMatrix::CopyToMat<float>((uint64_t *)&v90, (kaldi::ContextDependency *)a1);
  kaldi::WarnOnZeros<float>(a1, v37, v38, v39, v40);
  kaldi::CompressedMatrix::Destroy((kaldi::CompressedMatrix *)&v90);
LABEL_69:
  if (v88 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
}

void sub_A7B18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a67)
  {
    if (!a71) {
      free(a67);
    }
  }
  JUMPOUT(0xA7BA4);
}

void sub_A7B4C()
{
}

void sub_A7B54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  kaldi::CompressedMatrix::Destroy((kaldi::CompressedMatrix *)&a67);
  JUMPOUT(0xA7BA4);
}

void sub_A7B64(uint64_t a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0xA7BD0);
}

void sub_A7B78(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (v16 < 0) {
    operator delete(v15[33]);
  }
  std::ostringstream::~ostringstream((uint64_t)v15);
  JUMPOUT(0xA7BD0);
}

void kaldi::MatrixBase<float>::AddMat(uint64_t a1, uint64_t a2, int a3, float a4, float a5, uint64_t a6, const char *a7)
{
  if (a2 == a1)
  {
    if (a3 == 111)
    {
      float v20 = a4 + a5;
      kaldi::MatrixBase<float>::Scale(a2, v20);
    }
    else
    {
      uint64_t v24 = *(unsigned int *)(a2 + 12);
      if (v24 != *(_DWORD *)(a2 + 8)) {
        kaldi::KaldiAssertFailure_((kaldi *)"AddMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_1A8.addr + 3, "num_rows_ == num_cols_ && \"AddMat: adding to self (transposed): not symmetric.\"", a7);
      }
      uint64_t v25 = *(const float **)a2;
      if (a4 == 1.0 && a5 == 1.0)
      {
        if ((int)v24 >= 1)
        {
          uint64_t v36 = 0;
          uint64_t v37 = *(int *)(a2 + 16);
          uint64_t v38 = 4 * v37;
          uint64_t v39 = *(const float **)a2;
          char v40 = *(float **)a2;
          do
          {
            if (v36)
            {
              uint64_t v41 = 0;
              uint64_t v42 = v36 * v37;
              float v43 = v40;
              do
              {
                float v44 = v39[v41] + *v43;
                *float v43 = v44;
                v39[v41++] = v44;
                float v43 = (float *)((char *)v43 + v38);
              }
              while (v36 != v41);
            }
            else
            {
              uint64_t v42 = 0;
            }
            v25[v42 + v36] = v25[v42 + v36] + v25[v42 + v36];
            ++v36;
            ++v40;
            uint64_t v39 = (const float *)((char *)v39 + v38);
          }
          while (v36 != v24);
        }
      }
      else if ((int)v24 >= 1)
      {
        uint64_t v27 = 0;
        uint64_t v28 = *(int *)(a2 + 16);
        uint64_t v29 = 4 * v28;
        std::string::size_type v30 = *(const float **)a2;
        int v31 = *(float **)a2;
        do
        {
          if (v27)
          {
            uint64_t v32 = 0;
            uint64_t v33 = v27 * v28;
            uint64_t v34 = v31;
            do
            {
              float v35 = v30[v32];
              v30[v32] = (float)(v35 * a5) + (float)(a4 * *v34);
              float *v34 = (float)(*v34 * a5) + (float)(a4 * v35);
              ++v32;
              uint64_t v34 = (float *)((char *)v34 + v29);
            }
            while (v27 != v32);
          }
          else
          {
            uint64_t v33 = 0;
          }
          v25[v33 + v27] = (float)(a4 + a5) * v25[v33 + v27];
          ++v27;
          ++v31;
          std::string::size_type v30 = (const float *)((char *)v30 + v29);
        }
        while (v27 != v24);
      }
    }
  }
  else
  {
    if (a5 != 1.0) {
      kaldi::MatrixBase<float>::Scale(a1, a5);
    }
    uint64_t v11 = *(int *)(a2 + 16);
    uint64_t v12 = *(const float **)a2;
    float v13 = *(float **)a1;
    int v14 = *(_DWORD *)(a1 + 12);
    uint64_t v15 = *(int *)(a1 + 16);
    if (a3 == 111)
    {
      int v16 = *(_DWORD *)(a2 + 12);
      if (v16 != v14 || *(_DWORD *)(a2 + 8) != *(_DWORD *)(a1 + 8)) {
        kaldi::KaldiAssertFailure_((kaldi *)"AddMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_1A8.flags + 1, "A.num_rows_ == num_rows_ && A.num_cols_ == num_cols_", a7);
      }
      if (v16 >= 1)
      {
        int v17 = 0;
        uint64_t v18 = 4 * v15;
        uint64_t v19 = 4 * v11;
        do
        {
          cblas_saxpy(*(_DWORD *)(a1 + 8), a4, v12, 1, v13, 1);
          ++v17;
          float v13 = (float *)((char *)v13 + v18);
          uint64_t v12 = (const float *)((char *)v12 + v19);
        }
        while (v17 < *(_DWORD *)(a1 + 12));
      }
    }
    else
    {
      int v21 = *(_DWORD *)(a2 + 8);
      if (v21 != v14 || *(_DWORD *)(a2 + 12) != *(_DWORD *)(a1 + 8)) {
        kaldi::KaldiAssertFailure_((kaldi *)"AddMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_1A8.reserved2, "A.num_cols_ == num_rows_ && A.num_rows_ == num_cols_", a7);
      }
      if (v21 >= 1)
      {
        int v22 = 0;
        uint64_t v23 = 4 * v15;
        do
        {
          cblas_saxpy(*(_DWORD *)(a1 + 8), a4, v12, v11, v13, 1);
          ++v22;
          ++v12;
          float v13 = (float *)((char *)v13 + v23);
        }
        while (v22 < *(_DWORD *)(a1 + 12));
      }
    }
  }
}

void kaldi::WarnOnZeros<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (kaldi::MatrixBase<float>::IsZero(a1, 0.0, a2, a3, a4, a5))
  {
    if (kaldi::g_kaldi_verbose_level < -1) {
      return;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11, "WarnOnZeros", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1639);
    int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"The matrix is entirely 0. If this is unexpected, ", 49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"this could be a sign of data corruption.", 40);
    goto LABEL_11;
  }
  if (*(int *)(a1 + 12) >= 1)
  {
    unsigned int v8 = 0;
    while (1)
    {
      kaldi::MatrixBase<float>::Row(a1, v8, v6, v11);
      if (kaldi::VectorBase<float>::IsZero((uint64_t)v11, 0.0)) {
        break;
      }
      if ((signed int)++v8 >= *(_DWORD *)(a1 + 12)) {
        return;
      }
    }
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11, "WarnOnZeros", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1645);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Row ", 4);
      uint64_t v9 = (void *)std::ostream::operator<<();
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" of the matrix is entirely 0. If this is ", 41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"unexpected, this could be a sign of data corruption.", 52);
LABEL_11:
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    }
  }
}

void sub_A8038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::Matrix<double>::Read(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5)
{
  int v6 = a3;
  if (a4)
  {
    char v87 = 0;
    *(_OWORD *)long long v85 = 0u;
    long long v86 = 0u;
    kaldi::Matrix<double>::Read(v85, a2, a3, 0, a5);
    if (*(_DWORD *)(a1 + 12))
    {
      if (*(void **)(a1 + 8) != v85[1])
      {
        if (HIDWORD(v85[1]))
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v91, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1662);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v91, (uint64_t)"Matrix::Read, size mismatch ", 28);
          uint64_t v11 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
          uint64_t v12 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" vs. ", 5);
          float v13 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
          std::ostream::operator<<();
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v91);
        }
        goto LABEL_15;
      }
    }
    else
    {
      kaldi::Matrix<double>::Resize(a1, HIDWORD(v85[1]), LODWORD(v85[1]), 0, 0);
    }
    kaldi::MatrixBase<double>::AddMat(a1, (uint64_t)v85, 111, 1.0, 1.0, v9, v10);
LABEL_15:
    if (v85[0])
    {
      if (!v87) {
        free(v85[0]);
      }
    }
    return;
  }
  std::istream::tellg();
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v85);
  if (!v6)
  {
    memset(&v90, 0, sizeof(v90));
    std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v90);
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)": Expected \"[\", got EOF", 23);
LABEL_65:
      int v46 = 2;
      goto LABEL_66;
    }
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v90.__r_.__value_.__l.__size_ != 1)
      {
        if (v90.__r_.__value_.__l.__size_ == 2 && *(_WORD *)v90.__r_.__value_.__l.__data_ == 23899) {
          goto LABEL_122;
        }
        goto LABEL_58;
      }
      uint64_t v37 = (std::string *)v90.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (HIBYTE(v90.__r_.__value_.__r.__words[2]) != 1)
      {
        if (HIBYTE(v90.__r_.__value_.__r.__words[2]) == 2 && LOWORD(v90.__r_.__value_.__l.__data_) == 23899)
        {
LABEL_122:
          kaldi::Matrix<double>::Resize(a1, 0, 0, 0, 0);
          int v46 = 1;
LABEL_66:
          if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v90.__r_.__value_.__l.__data_);
          }
          if ((v46 | 2) != 2) {
            goto LABEL_69;
          }
          goto LABEL_106;
        }
LABEL_58:
        uint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)": Expected \"[\", got \"", 21);
        if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          float v43 = &v90;
        }
        else {
          float v43 = (std::string *)v90.__r_.__value_.__r.__words[0];
        }
        if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v90.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v90.__r_.__value_.__l.__size_;
        }
        int v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v43, size);
        LOBYTE(v91) = 34;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)&v91, 1);
        goto LABEL_65;
      }
      uint64_t v37 = &v90;
    }
    if (v37->__r_.__value_.__s.__data_[0] == 91)
    {
      __s1 = 0;
      size_t __n = 0;
      uint64_t v84 = 0;
      operator new();
    }
    goto LABEL_58;
  }
  int v14 = kaldi::Peek(a2, 1);
  if (v14 == 70)
  {
    if (a5)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v91, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1691);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v91, (uint64_t)"Can not map into the wrong matrix data type", 43);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v91);
    }
    uint64_t v18 = *(unsigned int *)(a1 + 8);
    uint64_t v17 = *(unsigned int *)(a1 + 12);
    long long v91 = 0u;
    long long v92 = 0u;
    char v93 = 0;
    kaldi::Matrix<float>::Resize((uint64_t)&v91, v17, v18, 0, 0);
    kaldi::Matrix<float>::Read(&v91, a2, 1, 0, 0, v19);
    kaldi::Matrix<double>::Resize(a1, HIDWORD(v91), DWORD2(v91), 0, 0);
    kaldi::MatrixBase<double>::CopyFromMat<float>(a1, (uint64_t)&v91, 111, v20, v21);
    if ((void)v91 && !v93) {
      free((void *)v91);
    }
    goto LABEL_69;
  }
  if (v14 != 67)
  {
    memset(&v90, 0, sizeof(v90));
    std::string::append(&v90, "D");
    BOOL v22 = a5 != 0;
    if (a5) {
      uint64_t v23 = "N";
    }
    else {
      uint64_t v23 = "M";
    }
    std::string::append(&v90, v23);
    __s1 = 0;
    size_t __n = 0;
    uint64_t v84 = 0;
    kaldi::ReadToken(a2, 1, (uint64_t)&__s1, v24, v25);
    int v28 = SHIBYTE(v84);
    size_t v29 = __n;
    if (v84 >= 0) {
      size_t v30 = HIBYTE(v84);
    }
    else {
      size_t v30 = __n;
    }
    std::string::size_type v31 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
    int v32 = SHIBYTE(v90.__r_.__value_.__r.__words[2]);
    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v31 = v90.__r_.__value_.__l.__size_;
    }
    if (v30 == v31)
    {
      if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v33 = &v90;
      }
      else {
        uint64_t v33 = (std::string *)v90.__r_.__value_.__r.__words[0];
      }
      if (v84 < 0)
      {
        if (!memcmp(__s1, v33, __n)) {
          goto LABEL_85;
        }
        goto LABEL_74;
      }
      if (!HIBYTE(v84)) {
        goto LABEL_85;
      }
      p_s1 = &__s1;
      uint64_t v35 = HIBYTE(v84);
      while (*(unsigned __int8 *)p_s1 == v33->__r_.__value_.__s.__data_[0])
      {
        p_s1 = (void **)((char *)p_s1 + 1);
        uint64_t v33 = (std::string *)((char *)v33 + 1);
        if (!--v35) {
          goto LABEL_85;
        }
      }
    }
    if ((v84 & 0x8000000000000000) == 0)
    {
      if (HIBYTE(v84) != 2) {
        goto LABEL_87;
      }
      uint64_t v36 = (unsigned __int8 *)&__s1;
LABEL_76:
      int v47 = *v36;
      v48 = (std::string *)v90.__r_.__value_.__r.__words[0];
      if (v32 >= 0) {
        v48 = &v90;
      }
      if (v47 == v48->__r_.__value_.__s.__data_[0])
      {
        uint64_t v49 = __s1;
        if (v28 >= 0) {
          uint64_t v49 = &__s1;
        }
        if (v49[1] == 78)
        {
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v91, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1708);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v91, (uint64_t)"Reading aligned matrix as a stream", 34);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v91);
          }
          BOOL v22 = 1;
LABEL_85:
          LODWORD(v80) = 0;
          uint64_t v81 = 0;
          kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v80, v26, v27);
          kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v81 + 4, v50, v51);
          if (v22)
          {
            kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v81, v53, v54);
            fst::AlignInput();
          }
          else
          {
            LODWORD(v81) = HIDWORD(v81);
          }
          uint64_t v69 = v80;
          if (a5)
          {
            *(_DWORD *)(a1 + 8) = HIDWORD(v81);
            *(_DWORD *)(a1 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v69;
            *(_DWORD *)(a1 + 16) = v81;
            if (*(void *)a1 && !*(unsigned char *)(a1 + 32)) {
              free(*(void **)a1);
            }
            std::istream::tellg();
            *(void *)a1 = a5 + v94;
            *(unsigned char *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 1;
            std::istream::seekg();
            if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)": Seeking failed", 16);
LABEL_100:
              int v63 = 2;
              goto LABEL_101;
            }
          }
          else
          {
            int v70 = HIDWORD(v81);
            if (__PAIR64__(v80, HIDWORD(v81)) == *(void *)(a1 + 8))
            {
              int v71 = HIDWORD(v81);
            }
            else
            {
              kaldi::Matrix<double>::Resize(a1, v80, HIDWORD(v81), 1, 0);
              int v71 = *(_DWORD *)(a1 + 8);
              int v70 = HIDWORD(v81);
              uint64_t v69 = v80;
            }
            int v72 = *(_DWORD *)(a1 + 16);
            int v73 = v81;
            if (v72 == v71 && v72 == v81 && v70 * v69)
            {
              std::istream::read();
              if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)": Reading whole matrix failed", 29);
                goto LABEL_100;
              }
            }
            else if ((int)v69 >= 1)
            {
              unsigned int v74 = 0;
              uint64_t v75 = a2 + 4;
              uint64_t v76 = 29;
              while (1)
              {
                if (*(_DWORD *)(a1 + 12) <= v74) {
                  kaldi::KaldiAssertFailure_((kaldi *)"RowData", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", &stru_68.sectname[15], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v54);
                }
                std::istream::read();
                if ((*((unsigned char *)v75 + *(void *)(*a2 - 24)) & 5) != 0)
                {
                  v78 = v85;
                  v79 = ": Reading a matrix row failed";
                  goto LABEL_144;
                }
                if (v73 != v70)
                {
                  std::istream::seekg();
                  if ((*((unsigned char *)v75 + *(void *)(*a2 - 24)) & 5) != 0) {
                    break;
                  }
                }
                if ((int)++v74 >= (int)v80) {
                  goto LABEL_138;
                }
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)": Seek for padding ", 19);
              v78 = (void *)std::ostream::operator<<();
              v79 = " failed";
              uint64_t v76 = 7;
LABEL_144:
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)v79, v76);
              goto LABEL_100;
            }
          }
LABEL_138:
          kaldi::WarnOnZeros<double>(a1, v69, v52, v53, v54);
          int v77 = *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32);
          int v63 = 1;
          if ((v77 & 2) == 0)
          {
            if ((v77 & 5) != 0) {
              int v63 = 2;
            }
            else {
              int v63 = 1;
            }
          }
LABEL_101:
          if (SHIBYTE(v84) < 0) {
            operator delete(__s1);
          }
          if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v90.__r_.__value_.__l.__data_);
          }
          if (v63 != 2) {
            goto LABEL_69;
          }
LABEL_106:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v91, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1899);
          v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v91, (uint64_t)"Failed to read matrix from stream.  ", 36);
          std::stringbuf::str();
          if (v84 >= 0) {
            size_t v65 = &__s1;
          }
          else {
            size_t v65 = __s1;
          }
          if (v84 >= 0) {
            size_t v66 = HIBYTE(v84);
          }
          else {
            size_t v66 = __n;
          }
          v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)v65, v66);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)" File position at start is ", 27);
          uint64_t v68 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)", currently ", 12);
          std::istream::tellg();
          std::ostream::operator<<();
          if (SHIBYTE(v84) < 0) {
            operator delete(__s1);
          }
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v91);
        }
      }
LABEL_87:
      long long v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)": Expected token ", 17);
      if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v56 = &v90;
      }
      else {
        std::string::size_type v56 = (std::string *)v90.__r_.__value_.__r.__words[0];
      }
      if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v57 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v57 = v90.__r_.__value_.__l.__size_;
      }
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v56, v57);
      v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)", got ", 6);
      if (v84 >= 0) {
        size_t v60 = &__s1;
      }
      else {
        size_t v60 = __s1;
      }
      if (v84 >= 0) {
        size_t v61 = HIBYTE(v84);
      }
      else {
        size_t v61 = __n;
      }
      int v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v60, v61);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)". This could mean that you're trying to memory map an unaligned file.", 69);
      goto LABEL_100;
    }
LABEL_74:
    if (v29 != 2) {
      goto LABEL_87;
    }
    uint64_t v36 = (unsigned __int8 *)__s1;
    goto LABEL_76;
  }
  *(void *)&long long v91 = 0;
  BYTE8(v91) = 0;
  kaldi::CompressedMatrix::Read((uint64_t)&v91, a2, 1, a5);
  if ((void)v91)
  {
    uint64_t v15 = *(unsigned int *)(v91 + 8);
    uint64_t v16 = *(unsigned int *)(v91 + 12);
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
  }
  kaldi::Matrix<double>::Resize(a1, v15, v16, 0, 0);
  kaldi::CompressedMatrix::CopyToMat<double>((uint64_t *)&v91, (kaldi::ContextDependency *)a1);
  kaldi::WarnOnZeros<double>(a1, v38, v39, v40, v41);
  kaldi::CompressedMatrix::Destroy((kaldi::CompressedMatrix *)&v91);
LABEL_69:
  if (v89 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
}

void sub_A96F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a67)
  {
    if (!a71) {
      free(a67);
    }
  }
  JUMPOUT(0xA9780);
}

void sub_A9728()
{
}

void sub_A9730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  kaldi::CompressedMatrix::Destroy((kaldi::CompressedMatrix *)&a67);
  JUMPOUT(0xA9780);
}

void sub_A9740(uint64_t a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0xA97ACLL);
}

void sub_A9754(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (v16 < 0) {
    operator delete(v15[33]);
  }
  std::ostringstream::~ostringstream((uint64_t)v15);
  JUMPOUT(0xA97ACLL);
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    int v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v3, a2);
    int v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v9 = &v6[4 * v8];
    uint64_t v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void std::vector<float>::push_back[abi:ne180100](uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  int v6 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *(_DWORD **)a1;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a1) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v12);
      uint64_t v8 = *(_DWORD **)a1;
      int v6 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      int v13 = 0;
    }
    int v14 = &v13[4 * v9];
    uint64_t v15 = &v13[4 * v12];
    *(_DWORD *)int v14 = *a2;
    int v7 = v14 + 4;
    while (v6 != v8)
    {
      int v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *int v6 = *a2;
    int v7 = v6 + 1;
  }
  *(void *)(a1 + 8) = v7;
}

uint64_t kaldi::Matrix<float>::Init(uint64_t result, int a2, int a3, int a4, const char *a5)
{
  uint64_t v7 = result;
  if (a3 * a2)
  {
    if (a2 < 1 || a3 <= 0) {
      kaldi::KaldiAssertFailure_((kaldi *)"Init", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_2E8.segname[12], "rows > 0 && cols > 0", a5);
    }
    memptr = 0;
    int v8 = -a3 & 3;
    if (a4) {
      int v8 = 0;
    }
    int v9 = v8 + a3;
    double result = malloc_type_posix_memalign(&memptr, 0x10uLL, 4 * a2 * (unint64_t)(v8 + a3), 0x92865B52uLL);
    if (result) {
      BOOL v10 = 1;
    }
    else {
      BOOL v10 = memptr == 0;
    }
    if (v10)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      unint64_t v12 = std::bad_alloc::bad_alloc(exception);
    }
    *(void *)uint64_t v7 = memptr;
    *(unsigned char *)(v7 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
    *(_DWORD *)(v7 + 8) = a3;
    *(_DWORD *)(v7 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
    *(_DWORD *)(v7 + 16) = v9;
    *(_DWORD *)(v7 + 20) = v9 * a2;
  }
  else
  {
    if (a3 | a2) {
      kaldi::KaldiAssertFailure_((kaldi *)"Init", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_2E8.segname[3], "rows == 0 && cols == 0", a5);
    }
    *(unsigned char *)(result + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)double result = 0;
  }
  return result;
}

uint64_t kaldi::Matrix<double>::Matrix(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  *(unsigned char *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  kaldi::Matrix<double>::Resize(a1, a2, a3, a4, a5);
  return a1;
}

uint64_t kaldi::Matrix<double>::Matrix(uint64_t a1, unsigned int *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  kaldi::Matrix<double>::Resize(a1, a2[3], a2[2], 1, (const char *)(a2[2] == a2[4]));
  kaldi::MatrixBase<double>::CopyFromMat<double>((unsigned int *)a1, a2, 111, v4, v5);
  return a1;
}

void kaldi::MatrixBase<double>::AddMat(uint64_t a1, uint64_t a2, int a3, double a4, double a5, uint64_t a6, const char *a7)
{
  if (a2 == a1)
  {
    if (a3 == 111)
    {
      double v20 = a4 + a5;
      kaldi::MatrixBase<double>::Scale(a2, v20);
    }
    else
    {
      uint64_t v24 = *(unsigned int *)(a2 + 12);
      if (v24 != *(_DWORD *)(a2 + 8)) {
        kaldi::KaldiAssertFailure_((kaldi *)"AddMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_1A8.addr + 3, "num_rows_ == num_cols_ && \"AddMat: adding to self (transposed): not symmetric.\"", a7);
      }
      uint64_t v25 = *(const double **)a2;
      if (a4 == 1.0 && a5 == 1.0)
      {
        if ((int)v24 >= 1)
        {
          uint64_t v36 = 0;
          uint64_t v37 = *(int *)(a2 + 16);
          uint64_t v38 = 8 * v37;
          uint64_t v39 = *(const double **)a2;
          uint64_t v40 = *(double **)a2;
          do
          {
            if (v36)
            {
              uint64_t v41 = 0;
              uint64_t v42 = v36 * v37;
              float v43 = v40;
              do
              {
                double v44 = v39[v41] + *v43;
                *float v43 = v44;
                v39[v41++] = v44;
                float v43 = (double *)((char *)v43 + v38);
              }
              while (v36 != v41);
            }
            else
            {
              uint64_t v42 = 0;
            }
            v25[v42 + v36] = v25[v42 + v36] + v25[v42 + v36];
            ++v36;
            ++v40;
            uint64_t v39 = (const double *)((char *)v39 + v38);
          }
          while (v36 != v24);
        }
      }
      else if ((int)v24 >= 1)
      {
        uint64_t v27 = 0;
        uint64_t v28 = *(int *)(a2 + 16);
        uint64_t v29 = 8 * v28;
        size_t v30 = *(const double **)a2;
        std::string::size_type v31 = *(double **)a2;
        do
        {
          if (v27)
          {
            uint64_t v32 = 0;
            uint64_t v33 = v27 * v28;
            uint64_t v34 = v31;
            do
            {
              double v35 = v30[v32];
              v30[v32] = v35 * a5 + a4 * *v34;
              double *v34 = *v34 * a5 + a4 * v35;
              ++v32;
              uint64_t v34 = (double *)((char *)v34 + v29);
            }
            while (v27 != v32);
          }
          else
          {
            uint64_t v33 = 0;
          }
          v25[v33 + v27] = (a4 + a5) * v25[v33 + v27];
          ++v27;
          ++v31;
          size_t v30 = (const double *)((char *)v30 + v29);
        }
        while (v27 != v24);
      }
    }
  }
  else
  {
    if (a5 != 1.0) {
      kaldi::MatrixBase<double>::Scale(a1, a5);
    }
    uint64_t v11 = *(int *)(a2 + 16);
    unint64_t v12 = *(const double **)a2;
    int v13 = *(double **)a1;
    int v14 = *(_DWORD *)(a1 + 12);
    uint64_t v15 = *(int *)(a1 + 16);
    if (a3 == 111)
    {
      int v16 = *(_DWORD *)(a2 + 12);
      if (v16 != v14 || *(_DWORD *)(a2 + 8) != *(_DWORD *)(a1 + 8)) {
        kaldi::KaldiAssertFailure_((kaldi *)"AddMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_1A8.flags + 1, "A.num_rows_ == num_rows_ && A.num_cols_ == num_cols_", a7);
      }
      if (v16 >= 1)
      {
        int v17 = 0;
        uint64_t v18 = 8 * v15;
        uint64_t v19 = 8 * v11;
        do
        {
          cblas_daxpy(*(_DWORD *)(a1 + 8), a4, v12, 1, v13, 1);
          ++v17;
          int v13 = (double *)((char *)v13 + v18);
          unint64_t v12 = (const double *)((char *)v12 + v19);
        }
        while (v17 < *(_DWORD *)(a1 + 12));
      }
    }
    else
    {
      int v21 = *(_DWORD *)(a2 + 8);
      if (v21 != v14 || *(_DWORD *)(a2 + 12) != *(_DWORD *)(a1 + 8)) {
        kaldi::KaldiAssertFailure_((kaldi *)"AddMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_1A8.reserved2, "A.num_cols_ == num_rows_ && A.num_rows_ == num_cols_", a7);
      }
      if (v21 >= 1)
      {
        int v22 = 0;
        uint64_t v23 = 8 * v15;
        do
        {
          cblas_daxpy(*(_DWORD *)(a1 + 8), a4, v12, v11, v13, 1);
          ++v22;
          ++v12;
          int v13 = (double *)((char *)v13 + v23);
        }
        while (v22 < *(_DWORD *)(a1 + 12));
      }
    }
  }
}

void kaldi::WarnOnZeros<double>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (kaldi::MatrixBase<double>::IsZero(a1, 0.0, a2, a3, a4, a5))
  {
    if (kaldi::g_kaldi_verbose_level < -1) {
      return;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12, "WarnOnZeros", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1639);
    int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"The matrix is entirely 0. If this is unexpected, ", 49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"this could be a sign of data corruption.", 40);
    goto LABEL_11;
  }
  if (*(int *)(a1 + 12) >= 1)
  {
    int v7 = 0;
    while (1)
    {
      uint64_t v8 = *(void *)a1 + 8 * *(_DWORD *)(a1 + 16) * v7;
      int v9 = *(_DWORD *)(a1 + 8);
      int v14 = 0;
      uint64_t v15 = 0;
      uint64_t v12 = v8;
      int v13 = v9;
      if (kaldi::VectorBase<double>::IsZero((uint64_t)&v12, 0.0)) {
        break;
      }
      if (++v7 >= *(_DWORD *)(a1 + 12)) {
        return;
      }
    }
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12, "WarnOnZeros", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1645);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Row ", 4);
      BOOL v10 = (void *)std::ostream::operator<<();
      uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" of the matrix is entirely 0. If this is ", 41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"unexpected, this could be a sign of data corruption.", 52);
LABEL_11:
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
    }
  }
}

void sub_A9F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::vector<double>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    int v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    int v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    int v9 = &v6[8 * v8];
    BOOL v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void std::vector<double>::push_back[abi:ne180100](uint64_t a1, void *a2)
{
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  int v6 = *(void **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *(void **)a1;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a1) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v12);
      uint64_t v8 = *(void **)a1;
      int v6 = *(void **)(a1 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    int v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)int v14 = *a2;
    int v7 = v14 + 8;
    while (v6 != v8)
    {
      uint64_t v16 = *--v6;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *int v6 = *a2;
    int v7 = v6 + 1;
  }
  *(void *)(a1 + 8) = v7;
}

uint64_t kaldi::Matrix<double>::Init(uint64_t result, int a2, int a3, int a4, const char *a5)
{
  uint64_t v7 = result;
  if (a3 * a2)
  {
    if (a2 < 1 || a3 <= 0) {
      kaldi::KaldiAssertFailure_((kaldi *)"Init", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_2E8.segname[12], "rows > 0 && cols > 0", a5);
    }
    memptr = 0;
    int v8 = a3 & 1;
    if (a4) {
      int v8 = 0;
    }
    int v9 = v8 + a3;
    double result = malloc_type_posix_memalign(&memptr, 0x10uLL, 8 * a2 * (unint64_t)(v8 + a3), 0x92865B52uLL);
    if (result) {
      BOOL v10 = 1;
    }
    else {
      BOOL v10 = memptr == 0;
    }
    if (v10)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      unint64_t v12 = std::bad_alloc::bad_alloc(exception);
    }
    *(void *)uint64_t v7 = memptr;
    *(unsigned char *)(v7 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
    *(_DWORD *)(v7 + 8) = a3;
    *(_DWORD *)(v7 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
    *(_DWORD *)(v7 + 16) = v9;
    *(_DWORD *)(v7 + 20) = v9 * a2;
  }
  else
  {
    if (a3 | a2) {
      kaldi::KaldiAssertFailure_((kaldi *)"Init", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_2E8.segname[3], "rows == 0 && cols == 0", a5);
    }
    *(unsigned char *)(result + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)double result = 0;
  }
  return result;
}

float kaldi::MatrixBase<float>::operator()(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 12) <= a2 || *(_DWORD *)(a1 + 8) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)&stru_68.size + 5, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", a5);
  }
  return *(float *)(*(void *)a1 + 4 * (int)(*(_DWORD *)(a1 + 16) * a2) + 4 * (int)a3);
}

uint64_t kaldi::MatrixBase<float>::Set(uint64_t result, float a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  int v6 = *(_DWORD *)(result + 12);
  if (v6 >= 1)
  {
    uint64_t v8 = result;
    signed int v9 = 0;
    int v10 = *(_DWORD *)(result + 8);
    do
    {
      if (v10 >= 1)
      {
        for (signed int i = 0; i < v10; ++i)
        {
          double result = kaldi::MatrixBase<float>::operator()(v8, v9, i, a5, a6);
          *(float *)double result = a2;
          int v10 = *(_DWORD *)(v8 + 8);
        }
        int v6 = *(_DWORD *)(v8 + 12);
      }
      ++v9;
    }
    while (v9 < v6);
  }
  return result;
}

void kaldi::MatrixBase<float>::SetRandn(uint64_t a1)
{
  unsigned int v11 = kaldi::Rand(0);
  int v2 = *(_DWORD *)(a1 + 12);
  if (v2 >= 1)
  {
    int v3 = 0;
    int v4 = *(_DWORD *)(a1 + 8);
    do
    {
      if (v4 >= 1)
      {
        uint64_t v5 = 0;
        uint64_t v6 = *(void *)a1 + 4 * *(_DWORD *)(a1 + 16) * v3;
        do
        {
          float v7 = ((double)(int)kaldi::Rand(&v11) + 1.0) / 2147483650.0;
          float v8 = sqrtf(logf(v7) * -2.0);
          float v9 = ((double)(int)kaldi::Rand(&v11) + 1.0) / 2147483650.0;
          float v10 = v9 * 6.28318531;
          *(float *)(v6 + 4 * v5) = v8 * cosf(v10);
          int v4 = *(_DWORD *)(a1 + 8);
          ++v5;
        }
        while ((int)v5 < v4);
        int v2 = *(_DWORD *)(a1 + 12);
      }
      ++v3;
    }
    while (v3 < v2);
  }
}

int *kaldi::MatrixBase<float>::CopyRowsFromVec(int *result, char **a2)
{
  int v2 = result;
  int v3 = *((_DWORD *)a2 + 2);
  uint64_t v4 = result[2];
  int v5 = result[3];
  if (v3 == v4 * v5)
  {
    uint64_t v6 = result[4];
    if (v6 == v4)
    {
      float v7 = *a2;
      float v8 = *(void **)result;
      return (int *)memcpy(v8, v7, 4 * v5 * (uint64_t)(int)v4);
    }
    else
    {
      uint64_t v11 = result[3];
      if ((int)v11 >= 1)
      {
        uint64_t v12 = 0;
        uint64_t v13 = *a2;
        uint64_t v14 = *(void *)result;
        uint64_t v15 = 4 * v6;
        do
        {
          if ((int)v4 >= 1)
          {
            uint64_t v16 = 0;
            do
            {
              *(_DWORD *)(v14 + v16) = *(_DWORD *)&v13[v16];
              v16 += 4;
            }
            while (4 * v4 != v16);
          }
          ++v12;
          v14 += v15;
          v13 += 4 * v4;
        }
        while (v12 != v11);
      }
    }
  }
  else
  {
    if (v3 != v4)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "CopyRowsFromVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1041);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "Wrong sized arguments");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
    }
    if (v5 >= 1)
    {
      int v9 = 0;
      float v10 = *a2;
      do
        double result = (int *)memcpy((void *)(*(void *)v2 + 4 * v2[4] * v9++), v10, 4 * v2[2]);
      while (v9 < v2[3]);
    }
  }
  return result;
}

float *kaldi::MatrixBase<float>::ConcatenateVec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 12) != *(_DWORD *)(a3 + 12)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ConcatenateVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_428.reserved2 + 3, "num_rows_ == index.NumRows()", a5);
  }
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8) * *(_DWORD *)(a3 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ConcatenateVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_428.reserved3, "num_cols_ == index.NumCols() * vec_table.NumCols()", a5);
  }
  kaldi::MatrixBase<float>::Min(a3, a2, a3, a4, a5);
  if (v12 < 0.0) {
    kaldi::KaldiAssertFailure_((kaldi *)"ConcatenateVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_428.reserved3 + 1, "index.Min() >= 0", v11);
  }
  double result = (float *)kaldi::MatrixBase<float>::Max(a3, v8, v9, v10, v11);
  if (v16 >= (float)*(int *)(a2 + 12)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ConcatenateVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_428.reserved3 + 2, "index.Max() < vec_table.NumRows()", v15);
  }
  int v17 = *(_DWORD *)(a1 + 12);
  if (v17 >= 1)
  {
    signed int v18 = 0;
    int v19 = *(_DWORD *)(a1 + 8);
    do
    {
      if (v19 >= 1)
      {
        for (signed int i = 0; i < v19; ++i)
        {
          unsigned int v21 = i / *(_DWORD *)(a2 + 8);
          float v22 = kaldi::MatrixBase<float>::operator()(a3, v18, v21, v14, v15);
          float v25 = kaldi::MatrixBase<float>::operator()(a2, (int)v22, i - *(_DWORD *)(a2 + 8) * v21, v23, v24);
          double result = (float *)kaldi::MatrixBase<float>::operator()(a1, v18, i, v26, v27);
          float *result = v25;
          int v19 = *(_DWORD *)(a1 + 8);
        }
        int v17 = *(_DWORD *)(a1 + 12);
      }
      ++v18;
    }
    while (v18 < v17);
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::Min(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5 = *(_DWORD *)(result + 12);
  if (v5 < 1 || *(int *)(result + 8) <= 0) {
    kaldi::KaldiAssertFailure_((kaldi *)"Min", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_798.nsects + 2, "num_rows_ > 0 && num_cols_ > 0", a5);
  }
  int v6 = 0;
  float v7 = *(float **)result;
  float v8 = **(float **)result;
  do
  {
    uint64_t v9 = *(unsigned int *)(result + 8);
    uint64_t v10 = v7;
    do
    {
      float v11 = *v10++;
      float v12 = v11;
      if (v11 < v8) {
        float v8 = v12;
      }
      --v9;
    }
    while (v9);
    ++v6;
    v7 += *(int *)(result + 16);
  }
  while (v6 != v5);
  return result;
}

uint64_t kaldi::MatrixBase<float>::Max(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5 = *(_DWORD *)(result + 12);
  if (v5 < 1 || *(int *)(result + 8) <= 0) {
    kaldi::KaldiAssertFailure_((kaldi *)"Max", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_798.filesize + 7, "num_rows_ > 0 && num_cols_ > 0", a5);
  }
  int v6 = 0;
  float v7 = *(float **)result;
  float v8 = **(float **)result;
  do
  {
    uint64_t v9 = *(unsigned int *)(result + 8);
    uint64_t v10 = v7;
    do
    {
      float v11 = *v10++;
      float v12 = v11;
      if (v11 > v8) {
        float v8 = v12;
      }
      --v9;
    }
    while (v9);
    ++v6;
    v7 += *(int *)(result + 16);
  }
  while (v6 != v5);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  float *v14;
  float v15;
  float v16;

  int v5 = *(unsigned int *)(a2 + 12);
  if (v5 != *(_DWORD *)(result + 12) || (int v6 = *(unsigned int *)(a2 + 8), v6 != *(_DWORD *)(result + 8))) {
    kaldi::KaldiAssertFailure_((kaldi *)"Max", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_4C8.reserved2 + 1, "A.NumRows() == NumRows() && A.NumCols() == NumCols()", a5);
  }
  if ((int)v5 >= 1)
  {
    float v7 = 0;
    float v8 = *(float **)result;
    uint64_t v9 = *(float **)a2;
    uint64_t v10 = 4 * *(int *)(a2 + 16);
    float v11 = 4 * *(int *)(result + 16);
    do
    {
      float v12 = v6;
      uint64_t v13 = v8;
      uint64_t v14 = v9;
      if ((int)v6 >= 1)
      {
        do
        {
          uint64_t v15 = *v14++;
          float v16 = v15;
          if (*v13 >= v15) {
            float v16 = *v13;
          }
          *v13++ = v16;
          --v12;
        }
        while (v12);
      }
      ++v7;
      uint64_t v9 = (float *)((char *)v9 + v10);
      float v8 = (float *)((char *)v8 + v11);
    }
    while (v7 != v5);
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::ConcatenateVec(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 12) != *(_DWORD *)(a3 + 12)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ConcatenateVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_478.sectname[11], "num_rows_ == index.NumRows()", a5);
  }
  uint64_t v8 = *a2;
  if (*a2) {
    LODWORD(v8) = *(_DWORD *)(v8 + 12);
  }
  if (*(_DWORD *)(a1 + 8) != v8 * *(_DWORD *)(a3 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ConcatenateVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_478.sectname[12], "num_cols_ == index.NumCols() * vec_table.NumCols()", a5);
  }
  kaldi::MatrixBase<float>::Min(a3, (uint64_t)a2, a3, a4, a5);
  if (v13 < 0.0) {
    kaldi::KaldiAssertFailure_((kaldi *)"ConcatenateVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_478.sectname[13], "index.Min() >= 0", v12);
  }
  uint64_t result = kaldi::MatrixBase<float>::Max(a3, v9, v10, v11, v12);
  uint64_t v17 = *a2;
  if (*a2)
  {
    if (v16 < (float)*(int *)(v17 + 8))
    {
      int v18 = *(_DWORD *)(v17 + 12);
      goto LABEL_11;
    }
LABEL_24:
    kaldi::KaldiAssertFailure_((kaldi *)"ConcatenateVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_478.sectname[14], "index.Max() < vec_table.NumRows()", v15);
  }
  if (v16 >= 0.0) {
    goto LABEL_24;
  }
  int v18 = 0;
LABEL_11:
  int v19 = *(_DWORD *)(a3 + 12);
  if (v19 >= 1)
  {
    signed int v20 = 0;
    LODWORD(v21) = *(_DWORD *)(a3 + 8);
    do
    {
      if ((int)v21 >= 1)
      {
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        do
        {
          kaldi::MatrixBase<float>::Row(a1, v20, v15, &v35);
          uint64_t v37 = 0;
          uint64_t v38 = 0;
          uint64_t v39 = 0;
          v22 += v18;
          if (v22 > v36) {
            kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v26);
          }
          uint64_t v37 = v35 + v23;
          LODWORD(v38) = v18;
          *(float *)&double v27 = kaldi::MatrixBase<float>::operator()(a3, v20, v24, v25, v26);
          uint64_t result = (uint64_t)kaldi::CompressedMatrix::CopyRowToVec<float>(a2, (int)*(float *)&v27, (uint64_t)&v37, v27, v30, v31, v32, v33, v34, v28, v29);
          uint64_t v21 = *(int *)(a3 + 8);
          v23 += 4 * v18;
          ++v24;
        }
        while (v24 < v21);
        int v19 = *(_DWORD *)(a3 + 12);
      }
      ++v20;
    }
    while (v20 < v19);
  }
  return result;
}

void kaldi::MatrixBase<float>::SummarizeVec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5 = *(_DWORD *)(a1 + 12);
  if (v5 != *(_DWORD *)(a3 + 12)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SummarizeVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_478.segname[12], "num_rows_ == index.NumRows()", a5);
  }
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SummarizeVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_478.segname[13], "num_cols_ == vec_table.NumCols()", a5);
  }
  if (v5 >= 1)
  {
    signed int v9 = 0;
    signed int v10 = *(_DWORD *)(a2 + 12);
    int v11 = *(_DWORD *)(a3 + 8);
    do
    {
      if (v11 >= 1)
      {
        for (signed int i = 0; i < v11; ++i)
        {
          signed int v13 = (int)kaldi::MatrixBase<float>::operator()(a3, v9, i, a4, a5);
          if ((v13 & 0x80000000) == 0)
          {
            if (v10 <= v13)
            {
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "SummarizeVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1182);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"index item is bigger than the voc size ", 39);
              std::ostream::operator<<();
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
            }
            if (*(int *)(a1 + 8) >= 1)
            {
              signed int v14 = 0;
              do
              {
                float v15 = kaldi::MatrixBase<float>::operator()(a2, v13, v14, a4, a5);
                int v18 = (float *)kaldi::MatrixBase<float>::operator()(a1, v9, v14, v16, v17);
                float *v18 = v15 + *v18;
                ++v14;
              }
              while (v14 < *(_DWORD *)(a1 + 8));
            }
          }
          int v11 = *(_DWORD *)(a3 + 8);
        }
        int v5 = *(_DWORD *)(a1 + 12);
      }
      ++v9;
    }
    while (v9 < v5);
  }
}

void sub_AAC30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::MatrixBase<float>::SummarizeVec(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5 = *(_DWORD *)(a1 + 12);
  if (v5 != *(_DWORD *)(a3 + 12)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SummarizeVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_478.offset, "num_rows_ == index.NumRows()", a5);
  }
  int v9 = *(_DWORD *)(a1 + 8);
  uint64_t v10 = *a2;
  if (*a2)
  {
    if (v9 == *(_DWORD *)(v10 + 12))
    {
      signed int v11 = *(_DWORD *)(v10 + 8);
      goto LABEL_7;
    }
LABEL_25:
    kaldi::KaldiAssertFailure_((kaldi *)"SummarizeVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_478.offset + 1, "num_cols_ == vec_table.NumCols()", a5);
  }
  if (v9) {
    goto LABEL_25;
  }
  signed int v11 = 0;
LABEL_7:
  if (v5 >= 1)
  {
    signed int v12 = 0;
    int v13 = *(_DWORD *)(a3 + 8);
    do
    {
      if (v13 >= 1)
      {
        for (signed int i = 0; i < v13; ++i)
        {
          signed int v15 = (int)kaldi::MatrixBase<float>::operator()(a3, v12, i, a4, a5);
          if ((v15 & 0x80000000) == 0)
          {
            if (v11 <= v15)
            {
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v30, "SummarizeVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1202);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"index item is bigger than the voc size ", 39);
              std::ostream::operator<<();
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v30);
            }
            uint64_t v16 = *(unsigned int *)(a1 + 8);
            uint64_t v31 = 0;
            uint64_t v32 = 0;
            double v30 = 0;
            kaldi::Vector<float>::Resize((void **)&v30, v16, 0, a4, a5);
            kaldi::CompressedMatrix::CopyRowToVec<float>(a2, v15, (uint64_t)&v30, v19, v20, v21, v22, v23, v24, v17, v18);
            if (*(int *)(a1 + 8) >= 1)
            {
              unint64_t v27 = 0;
              do
              {
                if (v27 >= v31) {
                  kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", stru_68.sectname, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v26);
                }
                float v28 = v30[v27];
                uint64_t v29 = (float *)kaldi::MatrixBase<float>::operator()(a1, v12, v27, v25, v26);
                float *v29 = v28 + *v29;
                ++v27;
              }
              while ((uint64_t)v27 < *(int *)(a1 + 8));
            }
            kaldi::Vector<float>::Destroy((uint64_t)&v30);
          }
          int v13 = *(_DWORD *)(a3 + 8);
        }
        int v5 = *(_DWORD *)(a1 + 12);
      }
      ++v12;
    }
    while (v12 < v5);
  }
}

void sub_AAE48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_AAE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::MatrixBase<float>::CountZeros(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5 = *(_DWORD *)(a1 + 12);
  if (v5 < 1) {
    return 0;
  }
  signed int v7 = 0;
  uint64_t v8 = 0;
  int v9 = *(_DWORD *)(a1 + 8);
  do
  {
    if (v9 >= 1)
    {
      for (signed int i = 0; i < v9; ++i)
      {
        if (kaldi::MatrixBase<float>::operator()(a1, v7, i, a4, a5) == 0.0) {
          uint64_t v8 = (v8 + 1);
        }
        else {
          uint64_t v8 = v8;
        }
        int v9 = *(_DWORD *)(a1 + 8);
      }
      int v5 = *(_DWORD *)(a1 + 12);
    }
    ++v7;
  }
  while (v7 < v5);
  return v8;
}

float kaldi::MatrixBase<float>::AbsMax(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(int *)(a1 + 12) < 1 || *(int *)(a1 + 8) <= 0) {
    kaldi::KaldiAssertFailure_((kaldi *)"AbsMax", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_7E0.sectname[5], "num_rows_ > 0 && num_cols_ > 0", a5);
  }
  int v6 = 0;
  signed int v7 = *(float **)a1;
  float v8 = **(float **)a1;
  int v9 = *(_DWORD *)(a1 + 16);
  do
  {
    int v10 = cblas_isamax(*(_DWORD *)(a1 + 8), &v7[v9 * v6], 1);
    signed int v7 = *(float **)a1;
    int v9 = *(_DWORD *)(a1 + 16);
    float v11 = fabsf(*(float *)(*(void *)a1 + 4 * (v10 + v9 * v6)));
    if (v11 > v8) {
      float v8 = v11;
    }
    ++v6;
  }
  while (v6 < *(_DWORD *)(a1 + 12));
  return v8;
}

float32_t kaldi::MatrixBase<float>::MulElements(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5 = *(_DWORD *)(a2 + 12);
  if (v5 != *(_DWORD *)(a1 + 12) || (unint64_t v6 = *(unsigned int *)(a2 + 8), v6 != *(_DWORD *)(a1 + 8))) {
    kaldi::KaldiAssertFailure_((kaldi *)"MulElements", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_4C8.segname[4], "a.NumRows() == num_rows_ && a.NumCols() == num_cols_", a5);
  }
  uint64_t v7 = *(int *)(a1 + 16);
  int v8 = *(_DWORD *)(a2 + 16);
  if (v6 == v7 && v6 == v8)
  {
    unint64_t v21 = (v6 * v5);
    double v22 = *(float32x4_t **)a2;
    double v23 = *(float32x4_t **)a1;
    if ((int)v21 >= 4)
    {
      unint64_t v25 = 4;
      uint64_t v26 = *(float32x4_t **)a2;
      unint64_t v27 = *(float32x4_t **)a1;
      do
      {
        float32x4_t v28 = *v26++;
        float32x4_t v19 = vmulq_f32(v28, *v27);
        *v27++ = v19;
        v25 += 4;
      }
      while (v25 <= v21);
      int v24 = v21 & 0x7FFFFFFC;
    }
    else
    {
      int v24 = 0;
    }
    if (v24 < (int)v21)
    {
      uint64_t v29 = &v23->f32[v24];
      double v30 = &v22->f32[v24];
      do
      {
        float v31 = *v30++;
        v19.f32[0] = v31 * *v29;
        *v29++ = v19.f32[0];
        ++v24;
      }
      while ((int)v21 > v24);
    }
  }
  else if (v5 >= 1)
  {
    int v10 = 0;
    uint64_t v11 = v8;
    signed int v12 = *(float32x4_t **)a2;
    int v13 = *(float32x4_t **)a1;
    uint64_t v14 = 4 * v7;
    uint64_t v15 = 4 * v11;
    do
    {
      if ((int)v6 >= 4)
      {
        uint64_t v17 = 0;
        for (unint64_t i = 4; i <= v6; i += 4)
        {
          float32x4_t v19 = vmulq_f32(v12[v17], v13[v17]);
          v13[v17++] = v19;
        }
        int v16 = v6 & 0x7FFFFFFC;
      }
      else
      {
        int v16 = 0;
      }
      if (v16 < (int)v6)
      {
        uint64_t v20 = v16;
        do
        {
          v19.f32[0] = v12->f32[v20] * v13->f32[v20];
          v13->i32[v20] = v19.i32[0];
          ++v16;
          ++v20;
        }
        while ((int)v6 > v16);
      }
      ++v10;
      int v13 = (float32x4_t *)((char *)v13 + v14);
      signed int v12 = (float32x4_t *)((char *)v12 + v15);
    }
    while (v10 != v5);
  }
  return v19.f32[0];
}

uint64_t kaldi::MatrixBase<float>::DivElements(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5 = *(_DWORD *)(a2 + 12);
  if (v5 != *(_DWORD *)(result + 12) || (uint64_t v7 = result, v8 = *(_DWORD *)(a2 + 8), v8 != *(_DWORD *)(result + 8))) {
    kaldi::KaldiAssertFailure_((kaldi *)"DivElements", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_4C8.addr + 5, "a.NumRows() == num_rows_ && a.NumCols() == num_cols_", a5);
  }
  if (v5 >= 1)
  {
    for (signed int i = 0; i < v5; ++i)
    {
      if (v8 >= 1)
      {
        for (signed int j = 0; j < v8; ++j)
        {
          float v11 = kaldi::MatrixBase<float>::operator()(a2, i, j, a4, a5);
          uint64_t result = kaldi::MatrixBase<float>::operator()(v7, i, j, v12, v13);
          *(float *)uint64_t result = *(float *)result / v11;
          int v8 = *(_DWORD *)(v7 + 8);
        }
        int v5 = *(_DWORD *)(v7 + 12);
      }
    }
  }
  return result;
}

void kaldi::MatrixBase<float>::Scale(uint64_t a1, float a2)
{
  if (a2 != 1.0)
  {
    int v4 = *(_DWORD *)(a1 + 12);
    if (v4)
    {
      int v5 = *(_DWORD *)(a1 + 8);
      if (v5 == *(_DWORD *)(a1 + 16))
      {
        unint64_t v6 = *(float **)a1;
        cblas_sscal(v5 * v4, a2, v6, 1);
      }
      else if (v4 >= 1)
      {
        int v7 = 0;
        int v8 = *(float **)a1;
        do
        {
          cblas_sscal(*(_DWORD *)(a1 + 8), a2, v8, 1);
          ++v7;
          v8 += *(int *)(a1 + 16);
        }
        while (v7 < *(_DWORD *)(a1 + 12));
      }
    }
  }
}

uint64_t kaldi::MatrixBase<float>::MulColsVec(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  LODWORD(v5) = *(_DWORD *)(a2 + 8);
  if (v5 != *(_DWORD *)(result + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"MulColsVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_568.sectname[6], "scale.Dim() == num_cols_", a5);
  }
  uint64_t v6 = result;
  int v7 = *(_DWORD *)(result + 12);
  if (v7 >= 1)
  {
    for (signed int i = 0; i < v7; ++i)
    {
      if ((int)v5 >= 1)
      {
        unint64_t v10 = 0;
        do
        {
          if (v10 >= *(unsigned int *)(a2 + 8)) {
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_20.nsects + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a5);
          }
          float v11 = *(float *)(*(void *)a2 + 4 * v10);
          uint64_t result = kaldi::MatrixBase<float>::operator()(v6, i, v10, a4, a5);
          *(float *)uint64_t result = v11 * *(float *)result;
          ++v10;
          int64_t v5 = *(int *)(v6 + 8);
        }
        while ((uint64_t)v10 < v5);
        int v7 = *(_DWORD *)(v6 + 12);
      }
    }
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::MulRowsVec(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5 != *(_DWORD *)(result + 12)) {
    kaldi::KaldiAssertFailure_((kaldi *)"MulRowsVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_518.segname[6], "scale.Dim() == num_rows_", a5);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v7 = result;
    unint64_t v8 = 0;
    int v9 = *(_DWORD *)(result + 8);
    do
    {
      if (v8 >= *(unsigned int *)(a2 + 8)) {
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_20.nsects + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a5);
      }
      if (v9 >= 1)
      {
        unsigned int v10 = 0;
        float v11 = *(float *)(*(void *)a2 + 4 * v8);
        do
        {
          uint64_t result = kaldi::MatrixBase<float>::operator()(v7, v8, v10, a4, a5);
          *(float *)uint64_t result = v11 * *(float *)result;
          ++v10;
        }
        while (v9 != v10);
      }
      ++v8;
    }
    while (v8 != v5);
  }
  return result;
}

void kaldi::MatrixBase<float>::MulRowsGroupMat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5 = *(_DWORD *)(a2 + 12);
  if (v5 != *(_DWORD *)(a1 + 12) || (int v8 = *(_DWORD *)(a1 + 8), v9 = *(_DWORD *)(a2 + 8), v10 = v8 / v9, v8 % v9)) {
    kaldi::KaldiAssertFailure_((kaldi *)"MulRowsGroupMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_518.addr + 5, "src.NumRows() == this->NumRows() && this->NumCols() % src.NumCols() == 0", a5);
  }
  if (v5 >= 1)
  {
    unsigned int v11 = 0;
    int v12 = v8 / v10;
    do
    {
      if (*(_DWORD *)(a1 + 12) <= v11) {
        kaldi::KaldiAssertFailure_((kaldi *)"RowData", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", &stru_68.sectname[15], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", a5);
      }
      if (v12 >= 1)
      {
        unsigned int v13 = 0;
        uint64_t v14 = (float *)(*(void *)a1 + 4 * (int)(*(_DWORD *)(a1 + 16) * v11));
        do
        {
          float v15 = kaldi::MatrixBase<float>::operator()(a2, v11, v13, a4, a5);
          cblas_sscal(v10, v15, v14, 1);
          ++v13;
          v14 += v10;
        }
        while (v12 != v13);
      }
      ++v11;
    }
    while (v11 != v5);
  }
}

uint64_t kaldi::MatrixBase<float>::InvertElements(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5 = *(_DWORD *)(result + 12);
  if (v5 >= 1)
  {
    uint64_t v6 = result;
    signed int v7 = 0;
    int v8 = *(_DWORD *)(result + 8);
    do
    {
      if (v8 >= 1)
      {
        for (signed int i = 0; i < v8; ++i)
        {
          float v10 = 1.0 / *(float *)kaldi::MatrixBase<float>::operator()(v6, v7, i, a4, a5);
          uint64_t result = kaldi::MatrixBase<float>::operator()(v6, v7, i, v11, v12);
          *(float *)uint64_t result = v10;
          int v8 = *(_DWORD *)(v6 + 8);
        }
        int v5 = *(_DWORD *)(v6 + 12);
      }
      ++v7;
    }
    while (v7 < v5);
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::CopyCols(uint64_t result, uint64_t *a2, unsigned int **a3, uint64_t a4, const char *a5)
{
  int v5 = *(_DWORD *)(result + 12);
  if (v5 != *((_DWORD *)a2 + 3)) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyCols", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_C38.nsects + 2, "NumRows() == src.NumRows()", a5);
  }
  uint64_t v6 = *(unsigned int *)(result + 8);
  signed int v7 = *a3;
  int v8 = a3[1];
  if (v6 != ((unint64_t)((char *)v8 - (char *)*a3) >> 2)) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyCols", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_C38.nsects + 3, "NumCols() == static_cast<MatrixIndexT>(indices.size())", a5);
  }
  uint64_t v9 = *(int *)(result + 16);
  uint64_t v10 = *((int *)a2 + 4);
  uint64_t v11 = *(void *)result;
  uint64_t v12 = *a2;
  if (v7 != v8)
  {
    unsigned int v13 = *a3;
    do
    {
      uint64_t result = *v13;
      if ((int)result < -1 || (int)result >= *((_DWORD *)a2 + 2)) {
        kaldi::KaldiAssertFailure_((kaldi *)"CopyCols", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_C80.sectname[4], "*iter >= -1 && *iter < src_cols", a5);
      }
      ++v13;
    }
    while (v13 != v8);
  }
  if (v5 >= 1)
  {
    int v15 = 0;
    uint64_t v16 = 4 * v9;
    do
    {
      if ((int)v6 >= 1)
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          uint64_t result = v7[i];
          if ((result & 0x80000000) != 0) {
            int v18 = 0;
          }
          else {
            int v18 = *(_DWORD *)(v12 + 4 * result);
          }
          *(_DWORD *)(v11 + i * 4) = v18;
        }
      }
      ++v15;
      v12 += 4 * v10;
      v11 += v16;
    }
    while (v15 != v5);
  }
  return result;
}

void kaldi::MatrixBase<float>::CopyRows(char **a1, uint64_t a2, void *a3, uint64_t a4, const char *a5)
{
  int v5 = *((_DWORD *)a1 + 2);
  if (v5 != *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyRows", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_C80.segname[5], "NumCols() == src.NumCols()", a5);
  }
  uint64_t v8 = *((unsigned int *)a1 + 3);
  if (v8 != ((a3[1] - *a3) >> 2)) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyRows", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_C80.segname[6], "NumRows() == static_cast<MatrixIndexT>(indices.size())", a5);
  }
  if ((int)v8 >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a1;
    uint64_t v12 = 4 * v8;
    uint64_t v13 = 4 * *((int *)a1 + 4);
    do
    {
      unsigned int v14 = *(_DWORD *)(*a3 + v10);
      if ((v14 & 0x80000000) != 0)
      {
        bzero(v11, 4 * *((int *)a1 + 2));
      }
      else
      {
        if (*(_DWORD *)(a2 + 12) <= v14) {
          kaldi::KaldiAssertFailure_((kaldi *)"RowData", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", &stru_68.segname[6], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", a5);
        }
        cblas_scopy(v5, (const float *)(*(void *)a2 + 4 * (int)(*(_DWORD *)(a2 + 16) * v14)), 1, (float *)v11, 1);
      }
      v10 += 4;
      v11 += v13;
    }
    while (v12 != v10);
  }
}

uint64_t kaldi::MatrixBase<float>::CopyIndexedItems(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5, int a6)
{
  uint64_t v6 = *(unsigned int *)(result + 12);
  if ((int)v6 >= 1)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = *a2;
    int v10 = *((_DWORD *)a2 + 4);
    int v11 = v10 * *((_DWORD *)a2 + 3);
    uint64_t v12 = *(unsigned int *)(result + 8);
    uint64_t v13 = *(_DWORD **)result;
    uint64_t v14 = *(_DWORD *)(result + 16) - (int)v12;
    int v15 = *(_DWORD *)(result + 8);
    do
    {
      uint64_t result = v12;
      unint64_t v16 = v7;
      if (v15 >= 1)
      {
        do
        {
          int v17 = *(_DWORD *)(a4 + 4 * (int)(v16 % (unint64_t)a5))
              + *(_DWORD *)(a3 + 4 * (int)(v16 % (unint64_t)a5)) * v10;
          int v18 = v17 + v16 / (unint64_t)a5 * a6;
          if (v18 >= v11) {
            kaldi::KaldiAssertFailure_((kaldi *)"CopyIndexedItems", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_C80.nreloc + 1, "src_index + shift < max_index", a5);
          }
          if (v17 < 0) {
            int v19 = 0;
          }
          else {
            int v19 = *(_DWORD *)(v9 + 4 * v18);
          }
          *v13++ = v19;
          ++v16;
          --result;
        }
        while (result);
      }
      ++v8;
      v13 += v14;
      v7 += (int)v12;
    }
    while (v8 != v6);
  }
  return result;
}

void kaldi::MatrixBase<float>::CopySelectedRows(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  int v5 = *(_DWORD *)(a1 + 8);
  if (v5 != *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopySelectedRows", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_C80.reserved2 + 1, "NumCols() == src.NumCols()", a5);
  }
  uint64_t v7 = *(unsigned int *)(a3 + 8);
  if (*(_DWORD *)(a1 + 12) < (int)v7) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopySelectedRows", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_C80.reserved2 + 2, "NumRows() >= selection.Dim()", a5);
  }
  if (*(_DWORD *)(a2 + 12) != v7) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopySelectedRows", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_C80.reserved2 + 3, "src.NumRows() == selection.Dim()", a5);
  }
  if ((int)v7 >= 1)
  {
    unint64_t v10 = 0;
    int v11 = *(float **)a1;
    uint64_t v12 = 4 * *(int *)(a1 + 16);
    do
    {
      if (v10 >= *(unsigned int *)(a3 + 8)) {
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_20.nsects + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a5);
      }
      if (((int)*(float *)(*(void *)a3 + 4 * v10) == 1) != a4)
      {
        if (v10 >= *(unsigned int *)(a2 + 12)) {
          kaldi::KaldiAssertFailure_((kaldi *)"RowData", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", &stru_68.segname[6], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", a5);
        }
        cblas_scopy(v5, (const float *)(*(void *)a2 + 4 * *(_DWORD *)(a2 + 16) * (int)v10), 1, v11, 1);
      }
      ++v10;
      int v11 = (float *)((char *)v11 + v12);
    }
    while (v7 != v10);
  }
}

uint64_t kaldi::MatrixBase<float>::ApplyFloor(uint64_t a1, float a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 12);
  if ((int)v2 < 1) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t result = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  uint64_t v7 = *(float **)a1;
  uint64_t v8 = 4 * *(int *)(a1 + 16);
  do
  {
    uint64_t v9 = v6;
    unint64_t v10 = v7;
    if ((int)v6 >= 1)
    {
      do
      {
        if (*v10 < a2)
        {
          *unint64_t v10 = a2;
          uint64_t result = (result + 1);
        }
        ++v10;
        --v9;
      }
      while (v9);
    }
    ++v4;
    uint64_t v7 = (float *)((char *)v7 + v8);
  }
  while (v4 != v2);
  return result;
}

uint64_t kaldi::MatrixBase<float>::ApplyCeiling(uint64_t a1, float a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 12);
  if ((int)v2 < 1) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t result = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  uint64_t v7 = *(float **)a1;
  uint64_t v8 = 4 * *(int *)(a1 + 16);
  do
  {
    uint64_t v9 = v6;
    unint64_t v10 = v7;
    if ((int)v6 >= 1)
    {
      do
      {
        if (*v10 > a2)
        {
          *unint64_t v10 = a2;
          uint64_t result = (result + 1);
        }
        ++v10;
        --v9;
      }
      while (v9);
    }
    ++v4;
    uint64_t v7 = (float *)((char *)v7 + v8);
  }
  while (v4 != v2);
  return result;
}

void kaldi::MatrixBase<float>::ApplyLog(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(int *)(a1 + 12) >= 1)
  {
    signed int v6 = 0;
    do
    {
      kaldi::MatrixBase<float>::Row(a1, v6, a5, v7);
      kaldi::VectorBase<float>::ApplyLog((uint64_t)v7);
      ++v6;
    }
    while (v6 < *(_DWORD *)(a1 + 12));
  }
}

void kaldi::MatrixBase<float>::ApplyExp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(int *)(a1 + 12) >= 1)
  {
    signed int v6 = 0;
    do
    {
      kaldi::MatrixBase<float>::Row(a1, v6, a5, v7);
      kaldi::VectorBase<float>::ApplyExp((uint64_t)v7);
      ++v6;
    }
    while (v6 < *(_DWORD *)(a1 + 12));
  }
}

void kaldi::MatrixBase<float>::ApplyPow(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  if (*(int *)(a1 + 12) >= 1)
  {
    signed int v8 = 0;
    do
    {
      kaldi::MatrixBase<float>::Row(a1, v8, a6, v9);
      kaldi::VectorBase<float>::ApplyPow((uint64_t)v9, a2);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 12));
  }
}

uint64_t kaldi::MatrixBase<float>::ApplyHeaviside(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 12);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = *(unsigned int *)(result + 8);
    uint64_t v4 = *(float **)result;
    uint64_t v5 = 4 * *(int *)(result + 16);
    do
    {
      uint64_t v6 = v3;
      uint64_t v7 = v4;
      if ((int)v3 >= 1)
      {
        do
        {
          if (*v7 <= 0.0) {
            float v8 = 0.0;
          }
          else {
            float v8 = 1.0;
          }
          *v7++ = v8;
          --v6;
        }
        while (v6);
      }
      ++v2;
      uint64_t v4 = (float *)((char *)v4 + v5);
    }
    while (v2 != v1);
  }
  return result;
}

BOOL kaldi::MatrixBase<float>::IsZero(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  int v7 = *(_DWORD *)(a1 + 12);
  if (v7 < 1)
  {
    float v11 = 0.0;
  }
  else
  {
    unsigned int v9 = 0;
    int v10 = *(_DWORD *)(a1 + 8);
    float v11 = 0.0;
    do
    {
      if (v10 >= 1)
      {
        for (unsigned int i = 0; i != v10; ++i)
        {
          float v13 = fabsf(kaldi::MatrixBase<float>::operator()(a1, v9, i, a5, a6));
          if (v11 < v13) {
            float v11 = v13;
          }
        }
      }
      ++v9;
    }
    while (v9 != v7);
  }
  return v11 <= a2;
}

uint64_t kaldi::MatrixBase<float>::Add(uint64_t result, float a2)
{
  uint64_t v2 = *(unsigned int *)(result + 12);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(float **)result;
    uint64_t v5 = *(unsigned int *)(result + 8);
    uint64_t v6 = 4 * *(int *)(result + 16);
    do
    {
      uint64_t v7 = v5;
      float v8 = v4;
      if ((int)v5 >= 1)
      {
        do
        {
          *float v8 = *v8 + a2;
          ++v8;
          --v7;
        }
        while (v7);
      }
      ++v3;
      uint64_t v4 = (float *)((char *)v4 + v6);
    }
    while (v3 != v2);
  }
  return result;
}

void kaldi::MatrixBase<float>::Sigmoid(kaldi::ContextDependency *a1, kaldi::ContextDependency *this, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6 = *((_DWORD *)a1 + 2);
  int v5 = *((_DWORD *)a1 + 3);
  if (v5 != *((_DWORD *)this + 3) || v6 != *((_DWORD *)this + 2)) {
    kaldi::KaldiAssertFailure_((kaldi *)"Sigmoid", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_D20, "SameDim(*this, src)", a5);
  }
  if (v6 == *((_DWORD *)a1 + 4) && v6 == *((_DWORD *)this + 4))
  {
    uint64_t v17 = *(void *)this;
    uint64_t v21 = 0;
    v18[2] = 0;
    uint64_t v19 = v17;
    uint64_t v20 = (v6 * v5);
    v18[0] = *(void *)a1;
    v18[1] = v20;
    kaldi::VectorBase<float>::Sigmoid((uint64_t)v18, (uint64_t)&v19, a3, a4, a5);
  }
  else if (v5 >= 1)
  {
    signed int v11 = 0;
    do
    {
      kaldi::SubVector<float>::SubVector(&v19, this, v11, a4, a5);
      kaldi::SubVector<float>::SubVector(v18, a1, v11, v12, v13);
      kaldi::VectorBase<float>::Sigmoid((uint64_t)v18, (uint64_t)&v19, v14, v15, v16);
      ++v11;
    }
    while (v11 < *((_DWORD *)a1 + 3));
  }
}

float *kaldi::MatrixBase<float>::GroupPnorm(float *result, uint64_t a2, float a3, uint64_t a4, uint64_t a5, const char *a6)
{
  int v6 = *(_DWORD *)(a2 + 8);
  signed int v7 = *((_DWORD *)result + 2);
  int v8 = v6 / v7;
  uint64_t v25 = v7;
  if (v6 % v7 || (int v10 = *(_DWORD *)(a2 + 12), v10 != *((_DWORD *)result + 3))) {
    kaldi::KaldiAssertFailure_((kaldi *)"GroupPnorm", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_C38.filesize + 7, "src.NumCols() % this->NumCols() == 0 && src.NumRows() == this->NumRows()", a6);
  }
  if (v10 >= 1)
  {
    uint64_t v12 = (uint64_t)result;
    unsigned int v13 = 0;
    int v24 = *(_DWORD *)(a2 + 12);
    do
    {
      if ((int)v25 >= 1)
      {
        unsigned int v14 = 0;
        uint64_t v15 = 0;
        for (uint64_t i = 0; i != v25; ++i)
        {
          kaldi::MatrixBase<float>::Row(a2, v13, a6, &v26);
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          v14 += v8;
          if (v14 > v27) {
            kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v20);
          }
          uint64_t v28 = v26 + v15;
          LODWORD(v29) = v8;
          float v21 = kaldi::VectorBase<float>::Norm((uint64_t)&v28, a3, v17, v18, v19, v20);
          uint64_t result = (float *)kaldi::MatrixBase<float>::operator()(v12, v13, i, v22, v23);
          float *result = v21;
          v15 += 4 * v8;
        }
      }
      ++v13;
    }
    while (v13 != v24);
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::GroupPnormDeriv(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  int v6 = *(_DWORD *)(a2 + 8);
  if (v6 != *(_DWORD *)(result + 8) || (uint64_t v8 = result, v9 = *(_DWORD *)(a2 + 12), v9 != *(_DWORD *)(result + 12))) {
    kaldi::KaldiAssertFailure_((kaldi *)"GroupPnormDeriv", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_518.align + 3, "input.NumCols() == this->NumCols() && input.NumRows() == this->NumRows()", a5);
  }
  int v11 = *(_DWORD *)(a3 + 8);
  int v12 = v6 / v11;
  if (v6 % v11) {
    BOOL v13 = 0;
  }
  else {
    BOOL v13 = v9 == *(_DWORD *)(a3 + 12);
  }
  if (!v13) {
    kaldi::KaldiAssertFailure_((kaldi *)"GroupPnormDeriv", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_518.reloff + 1, "this->NumCols() % output.NumCols() == 0 && this->NumRows() == output.NumRows()", a5);
  }
  if (a6 == 1.0)
  {
    if (v9 >= 1)
    {
      for (unsigned int i = 0; i != v9; ++i)
      {
        if (v6 >= 1)
        {
          for (unsigned int j = 0; j != v6; ++j)
          {
            float v18 = kaldi::MatrixBase<float>::operator()(a2, i, j, a4, a5);
            BOOL v19 = v18 == 0.0;
            if (v18 <= 0.0) {
              float v20 = -1.0;
            }
            else {
              float v20 = 1.0;
            }
            if (v19) {
              float v21 = 0.0;
            }
            else {
              float v21 = v20;
            }
            uint64_t result = kaldi::MatrixBase<float>::operator()(v8, i, j, v16, v17);
            *(float *)uint64_t result = v21;
          }
        }
      }
    }
  }
  else if (v9 >= 1)
  {
    unsigned int v22 = 0;
    float v23 = a6 + -1.0;
    float v24 = 1.0 - a6;
    do
    {
      if (v6 >= 1)
      {
        for (signed int k = 0; k != v6; ++k)
        {
          float v26 = kaldi::MatrixBase<float>::operator()(a3, v22, k / v12, a4, a5);
          float v31 = kaldi::MatrixBase<float>::operator()(a2, v22, k, v27, v28);
          float v32 = 0.0;
          if (v26 != 0.0)
          {
            float v33 = v31;
            float v34 = powf(fabsf(v31), v23);
            float v35 = powf(v26, v24) * v34;
            if (v33 < 0.0) {
              float v32 = -v35;
            }
            else {
              float v32 = v35;
            }
          }
          uint64_t result = kaldi::MatrixBase<float>::operator()(v8, v22, k, v29, v30);
          *(float *)uint64_t result = v32;
        }
      }
      ++v22;
    }
    while (v22 != v9);
  }
  return result;
}

void kaldi::MatrixBase<float>::Tanh(kaldi::ContextDependency *a1, kaldi::ContextDependency *this, uint64_t a3, uint64_t a4, const char *a5)
{
  int v6 = *((_DWORD *)a1 + 2);
  int v5 = *((_DWORD *)a1 + 3);
  if (v5 != *((_DWORD *)this + 3) || v6 != *((_DWORD *)this + 2)) {
    kaldi::KaldiAssertFailure_((kaldi *)"Tanh", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_C38.segname[6], "SameDim(*this, src)", a5);
  }
  if (v6 == *((_DWORD *)a1 + 4) && v6 == *((_DWORD *)this + 4))
  {
    uint64_t v17 = *(void *)this;
    uint64_t v21 = 0;
    v18[2] = 0;
    uint64_t v19 = v17;
    uint64_t v20 = (v6 * v5);
    v18[0] = *(void *)a1;
    v18[1] = v20;
    kaldi::VectorBase<float>::Tanh((uint64_t)v18, (uint64_t)&v19, a3, a4, a5);
  }
  else if (v5 >= 1)
  {
    signed int v11 = 0;
    do
    {
      kaldi::SubVector<float>::SubVector(&v19, this, v11, a4, a5);
      kaldi::SubVector<float>::SubVector(v18, a1, v11, v12, v13);
      kaldi::VectorBase<float>::Tanh((uint64_t)v18, (uint64_t)&v19, v14, v15, v16);
      ++v11;
    }
    while (v11 < *((_DWORD *)a1 + 3));
  }
}

void kaldi::MatrixBase<float>::ApplyTanh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(int *)(a1 + 12) >= 1)
  {
    signed int v6 = 0;
    do
    {
      kaldi::MatrixBase<float>::Row(a1, v6, a5, v7);
      kaldi::VectorBase<float>::ApplyTanh((uint64_t)v7);
      ++v6;
    }
    while (v6 < *(_DWORD *)(a1 + 12));
  }
}

uint64_t *kaldi::MatrixBase<float>::DiffSigmoid(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = *((unsigned int *)result + 2);
  int v5 = *((_DWORD *)result + 3);
  BOOL v7 = v5 == *((_DWORD *)a2 + 3) && v6 == *((_DWORD *)a2 + 2);
  if (!v7 || (v5 == *((_DWORD *)a3 + 3) ? (BOOL v8 = v6 == *((_DWORD *)a3 + 2)) : (BOOL v8 = 0), !v8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"DiffSigmoid", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_D20.segname[9], "SameDim(*this, value) && SameDim(*this, diff)", a5);
  }
  if (v5 >= 1)
  {
    int v9 = 0;
    uint64_t v10 = *a3;
    uint64_t v11 = *a2;
    uint64_t v12 = *result;
    uint64_t v13 = 4 * *((int *)result + 4);
    uint64_t v14 = 4 * *((int *)a2 + 4);
    uint64_t v15 = 4 * *((int *)a3 + 4);
    do
    {
      if ((int)v6 >= 1)
      {
        uint64_t result = 0;
        do
        {
          float v16 = (1.0 - *(float *)((char *)result + v11))
              * (float)(*(float *)((char *)result + v10) * *(float *)((char *)result + v11));
          *(float *)((char *)result + v1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v16;
          uint64_t result = (uint64_t *)((char *)result + 4);
        }
        while ((uint64_t *)(4 * v6) != result);
      }
      ++v9;
      v12 += v13;
      v11 += v14;
      v10 += v15;
    }
    while (v9 != v5);
  }
  return result;
}

uint64_t *kaldi::MatrixBase<float>::DiffTanh(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = *((unsigned int *)result + 2);
  int v5 = *((_DWORD *)result + 3);
  BOOL v7 = v5 == *((_DWORD *)a2 + 3) && v6 == *((_DWORD *)a2 + 2);
  if (!v7 || (v5 == *((_DWORD *)a3 + 3) ? (BOOL v8 = v6 == *((_DWORD *)a3 + 2)) : (BOOL v8 = 0), !v8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"DiffTanh", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_D20.vmsize + 2, "SameDim(*this, value) && SameDim(*this, diff)", a5);
  }
  if (v5 >= 1)
  {
    int v9 = 0;
    uint64_t v10 = *a3;
    uint64_t v11 = *a2;
    uint64_t v12 = *result;
    uint64_t v13 = 4 * *((int *)result + 4);
    uint64_t v14 = 4 * *((int *)a2 + 4);
    uint64_t v15 = 4 * *((int *)a3 + 4);
    do
    {
      if ((int)v6 >= 1)
      {
        uint64_t result = 0;
        do
        {
          float v16 = (1.0 - (float)(*(float *)((char *)result + v11) * *(float *)((char *)result + v11)))
              * *(float *)((char *)result + v10);
          *(float *)((char *)result + v1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v16;
          uint64_t result = (uint64_t *)((char *)result + 4);
        }
        while ((uint64_t *)(4 * v6) != result);
      }
      ++v9;
      v12 += v13;
      v11 += v14;
      v10 += v15;
    }
    while (v9 != v5);
  }
  return result;
}

_DWORD *kaldi::MatrixBase<float>::MaxoutForward(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5 = *(_DWORD *)(a2 + 8);
  LODWORD(v6) = result[2];
  int v7 = v5 / (int)v6;
  if (v5 % (int)v6 || (uint64_t v9 = (uint64_t)result, v10 = *(_DWORD *)(a2 + 12), v10 != result[3])) {
    kaldi::KaldiAssertFailure_((kaldi *)"MaxoutForward", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_D68.segname[15], "input.NumCols() % this->NumCols() == 0 && input.NumRows() == this->NumRows()", a5);
  }
  if (v10 >= 1)
  {
    for (signed int i = 0; i < v10; ++i)
    {
      if ((int)v6 >= 1)
      {
        unsigned int v12 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        do
        {
          kaldi::MatrixBase<float>::Row(a2, i, a5, &v20);
          uint64_t v22 = 0;
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          v12 += v7;
          if (v12 > v21) {
            kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v15);
          }
          uint64_t v22 = v20 + v13;
          LODWORD(v23) = v7;
          kaldi::VectorBase<float>::Max(&v22);
          int v17 = v16;
          uint64_t result = (_DWORD *)kaldi::MatrixBase<float>::operator()(v9, i, v14, v18, v19);
          float *result = v17;
          uint64_t v6 = *(int *)(v9 + 8);
          v13 += 4 * v7;
          ++v14;
        }
        while (v14 < v6);
        int v10 = *(_DWORD *)(v9 + 12);
      }
    }
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::MaxoutDerivative(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5 = *(_DWORD *)(result + 8);
  if (*(_DWORD *)(a2 + 8) % v5 || (uint64_t v7 = result, v8 = *(_DWORD *)(a2 + 12), v8 != *(_DWORD *)(result + 12))) {
    kaldi::KaldiAssertFailure_((kaldi *)"MaxoutDerivative", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_D68.size + 3, "input.NumCols() % this->NumCols() == 0 && input.NumRows() == this->NumRows()", a5);
  }
  if (v8 >= 1)
  {
    signed int v10 = 0;
    int v11 = v5 / *(_DWORD *)(a3 + 8);
    do
    {
      if (v5 >= 1)
      {
        for (signed int i = 0; i < v5; ++i)
        {
          float v13 = kaldi::MatrixBase<float>::operator()(a2, v10, i, a4, a5);
          float v16 = kaldi::MatrixBase<float>::operator()(a3, v10, i / v11, v14, v15);
          uint64_t result = kaldi::MatrixBase<float>::operator()(v7, v10, i, v17, v18);
          if (v13 == v16) {
            float v19 = 1.0;
          }
          else {
            float v19 = 0.0;
          }
          *(float *)uint64_t result = v19;
          int v5 = *(_DWORD *)(v7 + 8);
        }
        int v8 = *(_DWORD *)(v7 + 12);
      }
      ++v10;
    }
    while (v10 < v8);
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::AddToDiag(uint64_t result, float a2)
{
  LODWORD(vstd::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(_DWORD *)(result + 8);
  int v3 = *(_DWORD *)(result + 12);
  if ((int)v2 >= v3) {
    uint64_t v2 = v3;
  }
  else {
    uint64_t v2 = v2;
  }
  if ((int)v2 >= 1)
  {
    uint64_t v4 = *(float **)result;
    uint64_t v5 = 4 * *(int *)(result + 16) + 4;
    do
    {
      *uint64_t v4 = *v4 + a2;
      uint64_t v4 = (float *)((char *)v4 + v5);
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t kaldi::MatrixBase<float>::AddToDiag(uint64_t result, uint64_t a2, float a3, float a4, uint64_t a5, uint64_t a6, const char *a7)
{
  LODWORD(v7) = *(_DWORD *)(result + 8);
  int v8 = *(_DWORD *)(result + 12);
  if ((int)v7 >= v8) {
    uint64_t v7 = v8;
  }
  else {
    uint64_t v7 = v7;
  }
  if (*(_DWORD *)(a2 + 8) != v7) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddToDiag", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_798.vmaddr + 4, "src.Dim() == num_to_add", a7);
  }
  if ((int)v7 >= 1)
  {
    uint64_t v9 = *(float **)a2;
    signed int v10 = *(float **)result;
    uint64_t v11 = 4 * (*(int *)(result + 16) + 1);
    do
    {
      float v12 = *v9++;
      *signed int v10 = (float)(*v10 * a4) + (float)(a3 * v12);
      signed int v10 = (float *)((char *)v10 + v11);
      --v7;
    }
    while (v7);
  }
  return result;
}

void kaldi::MatrixBase<float>::AddIndexedRows(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  int v6 = *(_DWORD *)(a2 + 8);
  if (*(_DWORD *)(a1 + 8) * v6 != *(_DWORD *)(a3 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddIndexedRows", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_CD0.size + 7, "indices.NumCols() * NumCols() == src.NumCols()", a5);
  }
  int v9 = *(_DWORD *)(a2 + 12);
  if (v9 != *(_DWORD *)(a3 + 12)) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddIndexedRows", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_CD0.offset, "indices.NumRows() == src.NumRows()", a5);
  }
  if (v9 >= 1)
  {
    for (signed int i = 0; i < v9; ++i)
    {
      if (v6 >= 1)
      {
        for (signed int j = 0; j < v6; ++j)
        {
          signed int v14 = (int)kaldi::MatrixBase<float>::operator()(a2, i, j, a4, a5);
          if ((v14 & 0x80000000) == 0)
          {
            if (*(_DWORD *)(a1 + 12) <= v14)
            {
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22, "AddIndexedRows", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 3336);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"index ", 6);
              unsigned int v21 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" is too big for matrix that has rows = ", 39);
              std::ostream::operator<<();
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
            }
            int v15 = *(_DWORD *)(a1 + 8);
            if (v15 >= 1)
            {
              for (signed int k = 0; k < v15; ++k)
              {
                float v17 = kaldi::MatrixBase<float>::operator()(a3, i, k + j * v15, a4, a5);
                uint64_t v20 = (float *)kaldi::MatrixBase<float>::operator()(a1, v14, k, v18, v19);
                *uint64_t v20 = *v20 + (float)(a6 * v17);
                int v15 = *(_DWORD *)(a1 + 8);
              }
            }
          }
          int v6 = *(_DWORD *)(a2 + 8);
        }
        int v9 = *(_DWORD *)(a2 + 12);
      }
    }
  }
}

void sub_ACC1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::MatrixBase<float>::AddDiagVecMat(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5, float a6, float a7)
{
  if (a7 != 1.0) {
    kaldi::MatrixBase<float>::Scale(a1, a7);
  }
  if (a4 == 111)
  {
    int v12 = *(_DWORD *)(a1 + 8);
    int v13 = *(_DWORD *)(a1 + 12);
    if (v13 != *(_DWORD *)(a3 + 12) || v12 != *(_DWORD *)(a3 + 8)) {
      kaldi::KaldiAssertFailure_((kaldi *)"AddDiagVecMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_1F8.addr + 3, "SameDim(*this, M)", a5);
    }
  }
  else
  {
    int v12 = *(_DWORD *)(a3 + 12);
    if (v12 != *(_DWORD *)(a1 + 8) || (int v13 = *(_DWORD *)(a3 + 8), v13 != *(_DWORD *)(a1 + 12))) {
      kaldi::KaldiAssertFailure_((kaldi *)"AddDiagVecMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_1F8.addr + 5, "M.NumRows() == NumCols() && M.NumCols() == NumRows()", a5);
    }
  }
  if (*(_DWORD *)(a2 + 8) != v13) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddDiagVecMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_1F8.addr + 7, "v.Dim() == this->NumRows()", a5);
  }
  int v15 = *(_DWORD *)(a3 + 16);
  if (a4 == 112) {
    int v16 = *(_DWORD *)(a3 + 16);
  }
  else {
    int v16 = 1;
  }
  if (v13 >= 1)
  {
    float v17 = *(float **)a2;
    uint64_t v18 = *(const float **)a3;
    float v19 = *(float **)a1;
    if (a4 == 112) {
      int v15 = 1;
    }
    uint64_t v20 = 4 * v15;
    uint64_t v21 = 4 * *(int *)(a1 + 16);
    do
    {
      float v22 = *v17++;
      cblas_saxpy(v12, v22 * a6, v18, v16, v19, 1);
      uint64_t v18 = (const float *)((char *)v18 + v20);
      float v19 = (float *)((char *)v19 + v21);
      --v13;
    }
    while (v13);
  }
}

void kaldi::MatrixBase<float>::AddMatDiagVec(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5, float a6, float a7)
{
  if (a7 != 1.0) {
    kaldi::MatrixBase<float>::Scale(a1, a7);
  }
  if (a3 == 111)
  {
    int v13 = *(_DWORD *)(a1 + 8);
    int v12 = *(_DWORD *)(a1 + 12);
    if (v12 != *(_DWORD *)(a2 + 12) || v13 != *(_DWORD *)(a2 + 8)) {
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatDiagVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_1F8.nreloc + 1, "SameDim(*this, M)", a5);
    }
  }
  else
  {
    int v13 = *(_DWORD *)(a2 + 12);
    if (v13 != *(_DWORD *)(a1 + 8) || (int v12 = *(_DWORD *)(a2 + 8), v12 != *(_DWORD *)(a1 + 12))) {
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatDiagVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_1F8.nreloc + 3, "M.NumRows() == NumCols() && M.NumCols() == NumRows()", a5);
    }
  }
  if (*(_DWORD *)(a4 + 8) != v13) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatDiagVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_1F8.flags + 1, "v.Dim() == this->NumCols()", a5);
  }
  int v15 = *(_DWORD *)(a2 + 16);
  if (a3 == 112) {
    int v16 = 1;
  }
  else {
    int v16 = *(_DWORD *)(a2 + 16);
  }
  if (v12 && v13 >= 1)
  {
    int v17 = *(_DWORD *)(a1 + 16);
    uint64_t v18 = *(float **)a4;
    float v19 = *(const float **)a2;
    uint64_t v20 = *(float **)a1;
    if (a3 != 112) {
      int v15 = 1;
    }
    uint64_t v21 = 4 * v15;
    do
    {
      float v22 = *v18++;
      cblas_saxpy(v12, v22 * a6, v19, v16, v20++, v17);
      float v19 = (const float *)((char *)v19 + v21);
      --v13;
    }
    while (v13);
  }
}

uint64_t kaldi::MatrixBase<float>::AddMatEwpMat(uint64_t result, uint64_t a2, int a3, uint64_t a4, const char *a5, float a6, float a7)
{
  uint64_t v7 = *(unsigned int *)(result + 12);
  if (a3 == 111)
  {
    if (v7 != *(_DWORD *)(a2 + 12) || (int v8 = *(_DWORD *)(result + 8), v8 != *(_DWORD *)(a2 + 8))) {
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatEwpMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_7E0.reserved3 + 3, "num_rows_ == A.num_rows_ && num_cols_ == A.num_cols_", a5);
    }
  }
  else if (v7 != *(_DWORD *)(a2 + 8) || (int v8 = *(_DWORD *)(result + 8), v8 != *(_DWORD *)(a2 + 12)))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatEwpMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_830.sectname[1], "num_rows_ == A.num_cols_ && num_cols_ == A.num_rows_", a5);
  }
  if (a5 == 111)
  {
    if (__PAIR64__(v7, v8) != *(void *)(a4 + 8)) {
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatEwpMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_830.sectname[5], "num_rows_ == B.num_rows_ && num_cols_ == B.num_cols_", a5);
    }
  }
  else if (__PAIR64__(v8, v7) != *(void *)(a4 + 8))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatEwpMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_830.sectname[7], "num_rows_ == B.num_cols_ && num_cols_ == B.num_rows_", a5);
  }
  if ((int)v7 >= 1)
  {
    uint64_t v9 = 0;
    if (a5 == 112) {
      int v10 = 1;
    }
    else {
      int v10 = *(_DWORD *)(a4 + 16);
    }
    if (a5 == 112) {
      int v11 = *(_DWORD *)(a4 + 16);
    }
    else {
      int v11 = 1;
    }
    if (a3 == 112) {
      int v12 = 1;
    }
    else {
      int v12 = *(_DWORD *)(a2 + 16);
    }
    if (a3 == 112) {
      int v13 = *(_DWORD *)(a2 + 16);
    }
    else {
      int v13 = 1;
    }
    uint64_t v14 = *(void *)result;
    uint64_t v15 = *(int *)(result + 16);
    int v16 = *(float **)a2;
    uint64_t v17 = 4 * v10;
    uint64_t v18 = 4 * v11;
    float v19 = *(float **)a4;
    uint64_t v20 = 4 * v12;
    uint64_t result = 4 * v13;
    do
    {
      if (v8 >= 1)
      {
        uint64_t v21 = (float *)(v14 + 4 * v9 * v15);
        float v22 = v16;
        uint64_t v23 = v19;
        int v24 = v8;
        do
        {
          *uint64_t v21 = (float)((float)(*v22 * a6) * *v23) + (float)(a7 * *v21);
          ++v21;
          uint64_t v23 = (float *)((char *)v23 + v18);
          float v22 = (float *)((char *)v22 + result);
          --v24;
        }
        while (v24);
      }
      ++v9;
      float v19 = (float *)((char *)v19 + v17);
      int v16 = (float *)((char *)v16 + v20);
    }
    while (v9 != v7);
  }
  return result;
}

void kaldi::MatrixBase<float>::Write(_DWORD *a1, void *a2, int a3, int a4)
{
  if (*(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Write", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1554);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, "Failed to write matrix to stream: stream not good");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
  }
  if (a3)
  {
    memset(&v19, 0, sizeof(v19));
    std::string::append(&v19, "F");
    if (a4) {
      uint64_t v7 = "N";
    }
    else {
      uint64_t v7 = "M";
    }
    std::string::append(&v19, v7);
    kaldi::WriteToken(a2, 1, (char *)&v19, v8, v9);
    kaldi::WriteBasicType<int>(a2, 1);
    kaldi::WriteBasicType<int>(a2, 1);
    if (a4)
    {
      kaldi::WriteBasicType<int>(a2, 1);
      if ((fst::AlignOutput(a2) & 1) == 0)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Write", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1576);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Could not align output", 22);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
      }
    }
    else if (a1[4] != a1[2])
    {
      if ((int)a1[3] >= 1)
      {
        int v18 = 0;
        do
        {
          std::ostream::write();
          ++v18;
        }
        while (v18 < a1[3]);
      }
      goto LABEL_26;
    }
    std::ostream::write();
LABEL_26:
    if (*(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Write", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1591);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Failed to write matrix to stream", 32);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    return;
  }
  if (a1[2])
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" [", 2);
    if ((int)a1[3] >= 1)
    {
      signed int v10 = 0;
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n  ", 3);
        if ((int)a1[2] >= 1)
        {
          signed int v13 = 0;
          do
          {
            kaldi::MatrixBase<float>::operator()((uint64_t)a1, v10, v13, v11, v12);
            uint64_t v14 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" ", 1);
            ++v13;
          }
          while (v13 < a1[2]);
        }
        ++v10;
      }
      while (v10 < a1[3]);
    }
    uint64_t v15 = "]\n";
    int v16 = a2;
    uint64_t v17 = 2;
  }
  else
  {
    uint64_t v15 = " [ ]\n";
    int v16 = a2;
    uint64_t v17 = 5;
  }

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v15, v17);
}

void sub_AD440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double kaldi::MatrixBase<double>::operator()(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 12) <= a2 || *(_DWORD *)(a1 + 8) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)&stru_68.size + 5, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", a5);
  }
  return *(double *)(*(void *)a1 + 8 * (int)(*(_DWORD *)(a1 + 16) * a2) + 8 * (int)a3);
}

void kaldi::MatrixBase<double>::Scale(uint64_t a1, double a2)
{
  if (a2 != 1.0)
  {
    int v4 = *(_DWORD *)(a1 + 12);
    if (v4)
    {
      int v5 = *(_DWORD *)(a1 + 8);
      if (v5 == *(_DWORD *)(a1 + 16))
      {
        int v6 = *(double **)a1;
        cblas_dscal(v5 * v4, a2, v6, 1);
      }
      else if (v4 >= 1)
      {
        int v7 = 0;
        uint64_t v8 = *(double **)a1;
        do
        {
          cblas_dscal(*(_DWORD *)(a1 + 8), a2, v8, 1);
          ++v7;
          v8 += *(int *)(a1 + 16);
        }
        while (v7 < *(_DWORD *)(a1 + 12));
      }
    }
  }
}

BOOL kaldi::MatrixBase<double>::IsZero(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  int v7 = *(_DWORD *)(a1 + 12);
  if (v7 < 1)
  {
    double v11 = 0.0;
  }
  else
  {
    unsigned int v9 = 0;
    int v10 = *(_DWORD *)(a1 + 8);
    double v11 = 0.0;
    do
    {
      if (v10 >= 1)
      {
        for (unsigned int i = 0; i != v10; ++i)
        {
          double v13 = fabs(kaldi::MatrixBase<double>::operator()(a1, v9, i, a5, a6));
          if (v11 < v13) {
            double v11 = v13;
          }
        }
      }
      ++v9;
    }
    while (v9 != v7);
  }
  return v11 <= a2;
}

void kaldi::MatrixBase<double>::Write(_DWORD *a1, void *a2, int a3, int a4)
{
  if (*(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Write", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1554);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, "Failed to write matrix to stream: stream not good");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
  }
  if (a3)
  {
    memset(&v19, 0, sizeof(v19));
    std::string::append(&v19, "D");
    if (a4) {
      int v7 = "N";
    }
    else {
      int v7 = "M";
    }
    std::string::append(&v19, v7);
    kaldi::WriteToken(a2, 1, (char *)&v19, v8, v9);
    kaldi::WriteBasicType<int>(a2, 1);
    kaldi::WriteBasicType<int>(a2, 1);
    if (a4)
    {
      kaldi::WriteBasicType<int>(a2, 1);
      if ((fst::AlignOutput(a2) & 1) == 0)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Write", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1576);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Could not align output", 22);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
      }
    }
    else if (a1[4] != a1[2])
    {
      if ((int)a1[3] >= 1)
      {
        int v18 = 0;
        do
        {
          std::ostream::write();
          ++v18;
        }
        while (v18 < a1[3]);
      }
      goto LABEL_26;
    }
    std::ostream::write();
LABEL_26:
    if (*(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Write", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 1591);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Failed to write matrix to stream", 32);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    return;
  }
  if (a1[2])
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" [", 2);
    if ((int)a1[3] >= 1)
    {
      signed int v10 = 0;
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n  ", 3);
        if ((int)a1[2] >= 1)
        {
          signed int v13 = 0;
          do
          {
            kaldi::MatrixBase<double>::operator()((uint64_t)a1, v10, v13, v11, v12);
            uint64_t v14 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" ", 1);
            ++v13;
          }
          while (v13 < a1[2]);
        }
        ++v10;
      }
      while (v10 < a1[3]);
    }
    uint64_t v15 = "]\n";
    int v16 = a2;
    uint64_t v17 = 2;
  }
  else
  {
    uint64_t v15 = " [ ]\n";
    int v16 = a2;
    uint64_t v17 = 5;
  }

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v15, v17);
}

void sub_AD9A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::SubMatrix<float>::SubMatrix(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, const char *a5, unsigned int a6)
{
  *(_OWORD *)uint64_t result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  unsigned int v6 = *(_DWORD *)(a2 + 12);
  BOOL v10 = v6 >= a3;
  unsigned int v7 = v6 - a3;
  if (v7 == 0
    || !v10
    || ((unsigned int v8 = *(_DWORD *)(a2 + 8), v10 = v8 >= a5, v9 = v8 - a5, v9 != 0 && v10)
      ? (BOOL v10 = v7 >= a4)
      : (BOOL v10 = 0),
        v10 ? (BOOL v11 = v9 >= a6) : (BOOL v11 = 0),
        !v11))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"SubMatrix", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_748.reloff + 1, "static_cast<UnsignedMatrixIndexT>(ro) < static_cast<UnsignedMatrixIndexT>(M.num_rows_) && static_cast<UnsignedMatrixIndexT>(co) < static_cast<UnsignedMatrixIndexT>(M.num_cols_) && static_cast<UnsignedMatrixIndexT>(r) <= static_cast<UnsignedMatrixIndexT>(M.num_rows_ - ro) && static_cast<UnsignedMatrixIndexT>(c) <= static_cast<UnsignedMatrixIndexT>(M.num_cols_ - co)", a5);
  }
  *(_DWORD *)(result + 8) = a6;
  *(_DWORD *)(result + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a4;
  int v12 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  int v13 = *(_DWORD *)(a2 + 16) * a3;
  *(void *)uint64_t result = *(void *)a2 + 4 * (int)a5 + 4 * v13;
  *(_DWORD *)(result + 20) = v12 - a5 - v13;
  return result;
}

uint64_t kaldi::SubMatrix<float>::SubMatrix(uint64_t result, uint64_t a2, int a3, int a4, const char *a5)
{
  *(_DWORD *)(result + 8) = a4;
  *(void *)uint64_t result = a2;
  *(_DWORD *)(result + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a3;
  *(_DWORD *)(result + 16) = a5;
  *(_DWORD *)(result + 20) = a5 * a3;
  *(void *)(result + 24) = 0;
  if (a2)
  {
    if ((int)a5 < a4) {
      kaldi::KaldiAssertFailure_((kaldi *)"SubMatrix", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_798, "this->stride_ >= this->num_cols_", a5);
    }
  }
  else
  {
    if (a4 * a3) {
      kaldi::KaldiAssertFailure_((kaldi *)"SubMatrix", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_748.reserved2 + 2, "num_rows * num_cols == 0", a5);
    }
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
  }
  return result;
}

uint64_t kaldi::SubMatrix<double>::SubMatrix(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, const char *a5, unsigned int a6)
{
  *(_OWORD *)uint64_t result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  unsigned int v6 = *(_DWORD *)(a2 + 12);
  BOOL v10 = v6 >= a3;
  unsigned int v7 = v6 - a3;
  if (v7 == 0
    || !v10
    || ((unsigned int v8 = *(_DWORD *)(a2 + 8), v10 = v8 >= a5, v9 = v8 - a5, v9 != 0 && v10)
      ? (BOOL v10 = v7 >= a4)
      : (BOOL v10 = 0),
        v10 ? (BOOL v11 = v9 >= a6) : (BOOL v11 = 0),
        !v11))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"SubMatrix", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_748.reloff + 1, "static_cast<UnsignedMatrixIndexT>(ro) < static_cast<UnsignedMatrixIndexT>(M.num_rows_) && static_cast<UnsignedMatrixIndexT>(co) < static_cast<UnsignedMatrixIndexT>(M.num_cols_) && static_cast<UnsignedMatrixIndexT>(r) <= static_cast<UnsignedMatrixIndexT>(M.num_rows_ - ro) && static_cast<UnsignedMatrixIndexT>(c) <= static_cast<UnsignedMatrixIndexT>(M.num_cols_ - co)", a5);
  }
  *(_DWORD *)(result + 8) = a6;
  *(_DWORD *)(result + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a4;
  int v12 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  int v13 = *(_DWORD *)(a2 + 16) * a3;
  *(void *)uint64_t result = *(void *)a2 + 8 * (int)a5 + 8 * v13;
  *(_DWORD *)(result + 20) = v12 - a5 - v13;
  return result;
}

float *kaldi::Quant3Levels<float>(float *result, uint64_t a2, float a3, uint64_t a4, uint64_t a5, const char *a6)
{
  if (a3 <= 0.0) {
    kaldi::KaldiAssertFailure_((kaldi *)"Quant3Levels", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_D68.reloff + 2, "value > 0.0", a6);
  }
  uint64_t v6 = (uint64_t)result;
  int v7 = *((_DWORD *)result + 3);
  if (v7 >= 1)
  {
    signed int v10 = 0;
    float v11 = -a3;
    int v12 = *((_DWORD *)result + 2);
    do
    {
      if (v12 >= 1)
      {
        for (signed int i = 0; i < v12; ++i)
        {
          float v14 = *(float *)kaldi::MatrixBase<float>::operator()(v6, v10, i, a5, a6);
          uint64_t v17 = (float *)kaldi::MatrixBase<float>::operator()(v6, v10, i, v15, v16);
          float v20 = *v17;
          if (v14 >= a3)
          {
            *uint64_t v17 = v20 - a3;
            float v21 = a3;
          }
          else
          {
            float v21 = 0.0;
            if (v20 <= v11)
            {
              float v22 = (float *)kaldi::MatrixBase<float>::operator()(v6, v10, i, v18, v19);
              *float v22 = *v22 + a3;
              float v21 = v11;
            }
          }
          uint64_t result = (float *)kaldi::MatrixBase<float>::operator()(a2, v10, i, v18, v19);
          float *result = v21;
          int v12 = *(_DWORD *)(v6 + 8);
        }
        int v7 = *(_DWORD *)(v6 + 12);
      }
      ++v10;
    }
    while (v10 < v7);
  }
  return result;
}

_DWORD *kaldi::ZeroSmallValues<float>(_DWORD *result, uint64_t a2, float a3, uint64_t a4, uint64_t a5, const char *a6)
{
  if (a3 <= 0.0) {
    kaldi::KaldiAssertFailure_((kaldi *)"ZeroSmallValues", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_D68.reserved3, "threshold > 0.0", a6);
  }
  uint64_t v6 = (uint64_t)result;
  int v7 = result[3];
  if (v7 < 1) {
    return result;
  }
  signed int v10 = 0;
  float v11 = -a3;
  int v12 = result[2];
  do
  {
    if (v12 < 1) {
      goto LABEL_12;
    }
    for (signed int i = 0; i < v12; ++i)
    {
      float v14 = *(float *)kaldi::MatrixBase<float>::operator()(v6, v10, i, a5, a6);
      float v19 = *(float *)kaldi::MatrixBase<float>::operator()(v6, v10, i, v15, v16);
      if (v14 < a3)
      {
        uint64_t v20 = a2;
        if (v19 > v11) {
          goto LABEL_10;
        }
        float v19 = *(float *)kaldi::MatrixBase<float>::operator()(v6, v10, i, v17, v18);
      }
      *(float *)kaldi::MatrixBase<float>::operator()(a2, v10, i, v17, v18) = v19;
      uint64_t v20 = v6;
LABEL_10:
      uint64_t result = (_DWORD *)kaldi::MatrixBase<float>::operator()(v20, v10, i, v17, v18);
      float *result = 0;
      int v12 = *(_DWORD *)(v6 + 8);
    }
    int v7 = *(_DWORD *)(v6 + 12);
LABEL_12:
    ++v10;
  }
  while (v10 < v7);
  return result;
}

kaldi::ContextDependency *kaldi::MatrixBase<float>::AddMatMat<signed char>(kaldi::ContextDependency *result, kaldi::ContextDependency *a2, uint64_t a3, unsigned int *a4, const char *a5, float a6, float a7)
{
  int v12 = result;
  if (a5 == 111)
  {
    uint64_t v13 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a4);
    uint64_t v14 = kaldi::QuantizedMatrixBase<short>::NumRows(a4);
    kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v18, v13, v14);
    kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(v18, (uint64_t)a4, 112, v15, v16);
    kaldi::MatrixBase<float>::AddMatMat<signed char>(v12, a2, a3, v18, 112, a6, a7);
    return (kaldi::ContextDependency *)kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase((uint64_t)v18);
  }
  else
  {
    if (a3 != 111) {
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_B8.align + 1, "transA == kNoTrans", a5);
    }
    if (a5 != 112) {
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_B8.align + 2, "transB == kTrans", a5);
    }
    if (*((_DWORD *)a2 + 2) != a4[1]) {
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_B8.align + 3, "A.num_cols_ == B.num_cols_", a5);
    }
    int v17 = *((_DWORD *)a2 + 3);
    if (v17 != *((_DWORD *)result + 3)) {
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_B8.reloff, "A.num_rows_ == num_rows_", a5);
    }
    if (*a4 != *((_DWORD *)result + 2)) {
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_B8.reloff + 1, "B.num_rows_ == num_cols_", a5);
    }
    if (a6 != 1.0) {
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_B8.reloff + 3, "alpha == 1.0", a5);
    }
    if (a2 == result) {
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_B8.nreloc, "&A != this", a5);
    }
    if (v17)
    {
      return (kaldi::ContextDependency *)kaldi::QuantizedMatrixBase<signed char>::AddMatMat((uint64_t)a4, a2, result, (uint64_t)a4, a5, a7);
    }
  }
  return result;
}

void sub_ADFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

kaldi::ContextDependency *kaldi::MatrixBase<float>::AddMatMat<short>(kaldi::ContextDependency *result, kaldi::ContextDependency *a2, uint64_t a3, unsigned int *a4, const char *a5, float a6, float a7)
{
  int v12 = result;
  if (a5 == 111)
  {
    uint64_t v13 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a4);
    uint64_t v14 = kaldi::QuantizedMatrixBase<short>::NumRows(a4);
    kaldi::QuantizedMatrix<short>::QuantizedMatrix(v18, v13, v14);
    kaldi::QuantizedMatrixBase<short>::CopyFromMat(v18, (uint64_t)a4, 112, v15, v16);
    kaldi::MatrixBase<float>::AddMatMat<short>(v12, a2, a3, v18, 112, a6, a7);
    return (kaldi::ContextDependency *)kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase((uint64_t)v18);
  }
  else
  {
    if (a3 != 111) {
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_B8.align + 1, "transA == kNoTrans", a5);
    }
    if (a5 != 112) {
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_B8.align + 2, "transB == kTrans", a5);
    }
    if (*((_DWORD *)a2 + 2) != a4[1]) {
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_B8.align + 3, "A.num_cols_ == B.num_cols_", a5);
    }
    int v17 = *((_DWORD *)a2 + 3);
    if (v17 != *((_DWORD *)result + 3)) {
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_B8.reloff, "A.num_rows_ == num_rows_", a5);
    }
    if (*a4 != *((_DWORD *)result + 2)) {
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_B8.reloff + 1, "B.num_rows_ == num_cols_", a5);
    }
    if (a6 != 1.0) {
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_B8.reloff + 3, "alpha == 1.0", a5);
    }
    if (a2 == result) {
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_B8.nreloc, "&A != this", a5);
    }
    if (v17)
    {
      return (kaldi::ContextDependency *)kaldi::QuantizedMatrixBase<short>::AddMatMat((uint64_t)a4, a2, result, (uint64_t)a4, a5, a7);
    }
  }
  return result;
}

void sub_AE224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

kaldi::ContextDependency *kaldi::MatrixBase<float>::AddMatMat<signed char>(kaldi::ContextDependency *this, uint64_t a2, int a3, _DWORD *a4, const char *a5, float a6, float a7)
{
  if (a5 == 111)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8, "AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 258);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, "Unimplemented");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  if (a3 != 111) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_B8.reserved3 + 1, "transA == kNoTrans", a5);
  }
  if (a5 != 112) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_B8.reserved3 + 2, "transB == kTrans", a5);
  }
  if (*(_DWORD *)(a2 + 8) != a4[1]) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_B8.reserved3 + 3, "A.num_cols_ == B.num_cols_", a5);
  }
  int v7 = *(_DWORD *)(a2 + 12);
  if (v7 != *((_DWORD *)this + 3)) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", stru_108.sectname, "A.num_rows_ == num_rows_", a5);
  }
  if (*a4 != *((_DWORD *)this + 2)) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_108.sectname[1], "B.num_rows_ == num_cols_", a5);
  }
  if (a6 != 1.0) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_108.sectname[3], "alpha == 1.0", a5);
  }
  if ((kaldi::ContextDependency *)a2 == this) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_108.sectname[4], "&A != this", a5);
  }
  if (v7)
  {
    return (kaldi::ContextDependency *)kaldi::VectorwiseQuantizedMatrix<signed char>::AddMatMat((uint64_t)a4, a2, this, a7);
  }
  return this;
}

void sub_AE400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

kaldi::ContextDependency *kaldi::MatrixBase<float>::AddMatMat<short>(kaldi::ContextDependency *this, uint64_t a2, int a3, _DWORD *a4, const char *a5, float a6, float a7)
{
  if (a5 == 111)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8, "AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", 258);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, "Unimplemented");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  if (a3 != 111) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_B8.reserved3 + 1, "transA == kNoTrans", a5);
  }
  if (a5 != 112) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_B8.reserved3 + 2, "transB == kTrans", a5);
  }
  if (*(_DWORD *)(a2 + 8) != a4[1]) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_B8.reserved3 + 3, "A.num_cols_ == B.num_cols_", a5);
  }
  int v7 = *(_DWORD *)(a2 + 12);
  if (v7 != *((_DWORD *)this + 3)) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", stru_108.sectname, "A.num_rows_ == num_rows_", a5);
  }
  if (*a4 != *((_DWORD *)this + 2)) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_108.sectname[1], "B.num_rows_ == num_cols_", a5);
  }
  if (a6 != 1.0) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_108.sectname[3], "alpha == 1.0", a5);
  }
  if ((kaldi::ContextDependency *)a2 == this) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", &stru_108.sectname[4], "&A != this", a5);
  }
  if (v7)
  {
    return (kaldi::ContextDependency *)kaldi::VectorwiseQuantizedMatrix<short>::AddMatMat((uint64_t)a4, a2, this, a7);
  }
  return this;
}

void sub_AE5D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::MatrixBase<float>::AddVecVec<float>(uint64_t a1, uint64_t a2, uint64_t a3, float a4, uint64_t a5, const char *a6)
{
  int v7 = *(_DWORD *)(a2 + 8);
  if (v7 != *(_DWORD *)(a1 + 12) || (int v8 = *(_DWORD *)(a3 + 8), v8 != *(_DWORD *)(a1 + 8))) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddVecVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.cc", (const char *)&stru_68.addr, "a.Dim() == num_rows_ && rb.Dim() == num_cols_", a6);
  }
  cblas_sger(CblasRowMajor, v7, v8, a4, *(const float **)a2, 1, *(const float **)a3, 1, *(float **)a1, *(_DWORD *)(a1 + 16));
}

uint64_t kaldi::QuantizedMatrixBase<short>::NumRows(unsigned int *a1)
{
  return *a1;
}

uint64_t kaldi::QuantizedMatrixBase<short>::NumCols(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(uint64_t a1, int a2, int a3)
{
  kaldi::QuantizedMatrixBase<signed char>::QuantizedMatrixBase(a1, a2, a3);
  memptr = 0;
  int v6 = malloc_type_posix_memalign(&memptr, 0x20uLL, a3 * a2, 0x100004077774924uLL);
  int v7 = memptr;
  if (v6) {
    int v7 = 0;
  }
  memptr = v7;
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v7;
  if (v8) {
    (*(void (**)(void))(a1 + 24))();
  }
  kaldi::QuantizedMatrixBase<signed char>::UpdateFilter((int *)a1);
  return a1;
}

void sub_AE718(_Unwind_Exception *a1)
{
  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

void kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(uint64_t a1, kaldi::ContextDependency *this)
{
  if (kaldi::ContextDependency::CentralPosition(this) != *(_DWORD *)a1) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", (const char *)&stru_68.addr + 6, "M.NumRows() == NumRows()", v4);
  }
  if (kaldi::ContextDependency::ContextWidth(this) != *(_DWORD *)(a1 + 4)) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", (const char *)&stru_68.addr + 7, "M.NumCols() == NumCols()", v5);
  }
  int v6 = kaldi::ContextDependency::CentralPosition(this);
  unsigned int v7 = kaldi::ContextDependency::ContextWidth(this);
  if (v6)
  {
    unsigned int v10 = v7;
    uint64_t v11 = 0;
    uint64_t v12 = v6;
    if (v7 <= 1) {
      int v13 = 1;
    }
    else {
      int v13 = v7;
    }
    uint64_t v14 = v13;
    float v15 = -INFINITY;
    float v16 = INFINITY;
    do
    {
      if (v10)
      {
        uint64_t v17 = 0;
        do
        {
          float v18 = kaldi::MatrixBase<float>::operator()((uint64_t)this, v11, v17, v8, v9);
          if (v18 < v16) {
            float v16 = v18;
          }
          if (v15 < v18) {
            float v15 = v18;
          }
          ++v17;
        }
        while (v14 != v17);
      }
      ++v11;
    }
    while (v11 != v12);
  }
  else
  {
    float v16 = INFINITY;
    float v15 = -INFINITY;
  }
  if ((float)((float)*(int *)(a1 + 4) * 16129.0) > 2147500000.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22, "CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", 170);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v22, "Too many rows*cols for 8-bit Matrix");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
  }
  float v19 = fabsf(v15);
  float v20 = fabsf(v16);
  if (v19 < v20) {
    float v19 = v20;
  }
  *(_DWORD *)(a1 + 8) = 1123942400;
  *(float *)(a1 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 127.0 / v19;
  uint64_t v21 = kaldi::QuantizedMatrixBase<signed char>::MutableData(a1);
  kaldi::ComputeQuantizedData<signed char>(v21, this, *(float *)(a1 + 12));

  kaldi::QuantizedMatrixBase<signed char>::UpdateFilter((int *)a1);
}

uint64_t kaldi::QuantizedMatrix<signed char>::QuantizedMatrix<short>(uint64_t a1, int *a2)
{
  kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(a1, *a2, a2[1]);
  kaldi::Matrix<float>::Matrix<short>((uint64_t)v5, (unsigned int *)a2);
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(a1, (kaldi::ContextDependency *)v5);
  kaldi::Matrix<float>::~Matrix((uint64_t)v5);
  return a1;
}

void sub_AE980(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::QuantizedMatrix<short>::QuantizedMatrix(uint64_t a1, int a2, int a3)
{
  kaldi::QuantizedMatrixBase<short>::QuantizedMatrixBase(a1, a2, a3);
  memptr = 0;
  int v6 = malloc_type_posix_memalign(&memptr, 0x20uLL, 2 * a3 * a2, 0x1000040BDFB0063uLL);
  unsigned int v7 = memptr;
  if (v6) {
    unsigned int v7 = 0;
  }
  memptr = v7;
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v7;
  if (v8) {
    (*(void (**)(void))(a1 + 24))();
  }
  kaldi::QuantizedMatrixBase<short>::UpdateFilter((int *)a1);
  return a1;
}

void sub_AEA40(_Unwind_Exception *a1)
{
  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

void kaldi::QuantizedMatrixBase<short>::CopyFromMat(uint64_t a1, kaldi::ContextDependency *this)
{
  if (kaldi::ContextDependency::CentralPosition(this) != *(_DWORD *)a1) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", (const char *)&stru_68.addr + 6, "M.NumRows() == NumRows()", v4);
  }
  if (kaldi::ContextDependency::ContextWidth(this) != *(_DWORD *)(a1 + 4)) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", (const char *)&stru_68.addr + 7, "M.NumCols() == NumCols()", v5);
  }
  int v6 = kaldi::ContextDependency::CentralPosition(this);
  unsigned int v7 = kaldi::ContextDependency::ContextWidth(this);
  unsigned int v10 = v7;
  uint64_t v11 = v6;
  if (v6)
  {
    uint64_t v12 = 0;
    if (v7 <= 1) {
      int v13 = 1;
    }
    else {
      int v13 = v7;
    }
    uint64_t v14 = v13;
    float v15 = -INFINITY;
    float v16 = INFINITY;
    do
    {
      if (v10)
      {
        uint64_t v17 = 0;
        do
        {
          float v18 = kaldi::MatrixBase<float>::operator()((uint64_t)this, v12, v17, v8, v9);
          if (v18 < v16) {
            float v16 = v18;
          }
          if (v15 < v18) {
            float v15 = v18;
          }
          ++v17;
        }
        while (v14 != v17);
      }
      ++v12;
    }
    while (v12 != v11);
  }
  else
  {
    float v16 = INFINITY;
    float v15 = -INFINITY;
  }
  float v19 = fabsf(v15);
  float v20 = fabsf(v16);
  if (v19 < v20) {
    float v19 = v20;
  }
  float v21 = 2147500000.0 / (float)(int)(v10 * v11);
  if (v21 > 32767.0) {
    float v21 = 32767.0;
  }
  *(float *)(a1 + 8) = v21;
  *(float *)(a1 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v21 / v19;
  uint64_t v22 = kaldi::QuantizedMatrixBase<short>::MutableData(a1);
  kaldi::ComputeQuantizedData<short>(v22, this, *(float *)(a1 + 12));

  kaldi::QuantizedMatrixBase<short>::UpdateFilter((int *)a1);
}

uint64_t kaldi::QuantizedMatrix<short>::QuantizedMatrix<signed char>(uint64_t a1, int *a2)
{
  kaldi::QuantizedMatrix<short>::QuantizedMatrix(a1, *a2, a2[1]);
  kaldi::Matrix<float>::Matrix<signed char>((uint64_t)v5, (unsigned int *)a2);
  kaldi::QuantizedMatrixBase<short>::CopyFromMat(a1, (kaldi::ContextDependency *)v5);
  kaldi::Matrix<float>::~Matrix((uint64_t)v5);
  return a1;
}

void sub_AEC50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2) {
    BNNSFilterDestroy(v2);
  }
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3) {
    (*(void (**)(void))(a1 + 24))();
  }
  return a1;
}

uint64_t kaldi::QuantizedMatrixBase<signed char>::AddMatMat(uint64_t a1, kaldi::ContextDependency *a2, kaldi::ContextDependency *a3, uint64_t a4, const char *a5, float a6)
{
  uint64_t v27 = 0;
  uint64_t v28 = (uint64_t (*)(void))kaldi::kaldi_memalign_free;
  int v30 = 0;
  uint64_t v29 = 0;
  uint64_t v31 = 0;
  kaldi::QuantizedMatrixBase<signed char>::PrepareMatMat((float *)a1, a2, (uint64_t)&v27, a4, a5);
  uint64_t v9 = kaldi::ContextDependency::CentralPosition(a3);
  uint64_t v10 = kaldi::ContextDependency::ContextWidth(a3);
  float v11 = 1.0 / (float)(*(float *)(a1 + 12) * *(float *)&v29);
  if (a6 == 0.0)
  {
    uint64_t v12 = *(void **)(a1 + 40);
    int v13 = v27;
    size_t v14 = *(int *)(a1 + 4);
    float v15 = *(void **)a3;
    int v16 = fst::StateOrderQueue<int>::Head_((uint64_t)a3);
    BNNSFilterApplyBatch(v12, (int)v9, v13, v14, v15, v16);
    kaldi::MatrixBase<float>::Scale((uint64_t)a3, v11);
  }
  else
  {
    kaldi::Matrix<float>::Matrix((uint64_t)v26, v9, v10, 0, 0);
    uint64_t v17 = *(void **)(a1 + 40);
    int v18 = kaldi::ContextDependency::CentralPosition((kaldi::ContextDependency *)v26);
    float v19 = v27;
    size_t v20 = *(int *)(a1 + 4);
    float v21 = (void *)v26[0];
    int v22 = fst::StateOrderQueue<int>::Head_((uint64_t)v26);
    BNNSFilterApplyBatch(v17, v18, v19, v20, v21, v22);
    kaldi::MatrixBase<float>::AddMat((uint64_t)a3, (uint64_t)v26, 111, v11, a6, v23, v24);
    kaldi::Matrix<float>::~Matrix((uint64_t)v26);
  }
  uint64_t result = (uint64_t)v27;
  uint64_t v27 = 0;
  if (result) {
    return v28();
  }
  return result;
}

void sub_AEE30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(void))
{
  if (a14) {
    a15();
  }
  _Unwind_Resume(exception_object);
}

void kaldi::QuantizedMatrixBase<signed char>::PrepareMatMat(float *a1, kaldi::ContextDependency *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  float v8 = kaldi::MatrixBase<float>::AbsMax((uint64_t)a2, (uint64_t)a2, a3, a4, a5);
  if (v8 == 0.0) {
    float v9 = 1.0;
  }
  else {
    float v9 = v8;
  }
  int v10 = kaldi::ContextDependency::CentralPosition(a2);
  int v11 = kaldi::ContextDependency::ContextWidth(a2);
  float v12 = a1[2];
  float v13 = 2147500000.0 / (float)(v12 * (float)v11);
  float v14 = v12 / v9;
  if (v14 >= v13) {
    float v15 = v13;
  }
  else {
    float v15 = v14;
  }
  memptr = 0;
  if (malloc_type_posix_memalign(&memptr, 0x20uLL, v11 * v10, 0x100004077774924uLL)) {
    int v16 = 0;
  }
  else {
    int v16 = memptr;
  }
  memptr = v16;
  uint64_t v17 = *(void **)a3;
  *(void *)a3 = v16;
  if (v17)
  {
    (*(void (**)(void *))(a3 + 8))(v17);
    int v16 = *(void **)a3;
  }
  kaldi::ComputeQuantizedData<signed char>((uint64_t)v16, a2, v15);
  *(float *)(a3 + 16) = v15;
  float v18 = *a1;
  uint64_t v19 = *((void *)a1 + 4);
  if (!v19) {
    uint64_t v19 = *((void *)a1 + 2);
  }
  int v20 = *((_DWORD *)a1 + 1);
  if (*(_DWORD *)(a3 + 20) != LODWORD(v18) || *(_DWORD *)(a3 + 24) != v20 || *(void *)(a3 + 32) != v19)
  {
    *(float *)(a3 + 20) = v18;
    *(_DWORD *)(a3 + 24) = v20;
    *(void *)(a3 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v19;
  }
}

uint64_t kaldi::QuantizedMatrixBase<signed char>::CopyRowsFromVec(unsigned int *a1, char **a2)
{
  kaldi::Matrix<float>::Matrix((uint64_t)v5, *a1, a1[1], 0, 0);
  kaldi::MatrixBase<float>::CopyRowsFromVec(v5, a2);
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat((uint64_t)a1, (kaldi::ContextDependency *)v5);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v5);
}

void sub_AF008(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(int *a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  *((void *)a1 + 1) = *(void *)(a2 + 8);
  if (a3 == 111)
  {
    if (*a1 != *(_DWORD *)a2) {
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", &stru_108.segname[2], "num_rows_ == M.NumRows()", a5);
    }
    if (a1[1] != *(_DWORD *)(a2 + 4)) {
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", &stru_108.segname[3], "num_cols_ == M.NumCols()", a5);
    }
    unsigned int v7 = (void *)kaldi::QuantizedMatrixBase<signed char>::MutableData((uint64_t)a1);
    if (*(void *)(a2 + 32)) {
      float v8 = *(const void **)(a2 + 32);
    }
    else {
      float v8 = *(const void **)(a2 + 16);
    }
    memmove(v7, v8, *a1 * (uint64_t)a1[1]);
  }
  else
  {
    uint64_t v9 = a1[1];
    if (v9 != *(_DWORD *)a2) {
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", &stru_108.segname[6], "num_cols_ == M.NumRows()", a5);
    }
    uint64_t v10 = *a1;
    if (v10 != *(_DWORD *)(a2 + 4)) {
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", &stru_108.segname[7], "num_rows_ == M.NumCols()", a5);
    }
    uint64_t v11 = kaldi::QuantizedMatrixBase<signed char>::MutableData((uint64_t)a1);
    float v12 = *(unsigned char **)(a2 + 32);
    if (!v12) {
      float v12 = *(unsigned char **)(a2 + 16);
    }
    int v13 = *a1;
    if (*a1 >= 1)
    {
      uint64_t v14 = 0;
      LODWORD(v15) = a1[1];
      do
      {
        if ((int)v15 >= 1)
        {
          uint64_t v16 = 0;
          uint64_t v17 = v12;
          do
          {
            *(unsigned char *)(v11 + v16++) = *v17;
            uint64_t v15 = a1[1];
            v17 += v10;
          }
          while (v16 < v15);
          int v13 = *a1;
        }
        ++v14;
        v11 += v9;
        ++v12;
      }
      while (v14 < v13);
    }
  }

  kaldi::QuantizedMatrixBase<signed char>::UpdateFilter(a1);
}

uint64_t kaldi::QuantizedMatrixBase<signed char>::MutableData(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "MutableData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", 271);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Attempt to write into immutable matrix");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return *(void *)(a1 + 16);
}

uint64_t kaldi::QuantizedMatrixBase<signed char>::Data(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (!result) {
    return *(void *)(a1 + 16);
  }
  return result;
}

void kaldi::QuantizedMatrixBase<signed char>::UpdateFilter(int *a1)
{
  uint64_t v2 = (void *)*((void *)a1 + 5);
  if (v2)
  {
    BNNSFilterDestroy(v2);
    *((void *)a1 + 5) = 0;
  }
  uint64_t v3 = (const void *)*((void *)a1 + 4);
  if (v3 || *((void *)a1 + 2))
  {
    size_t v5 = *a1;
    size_t v4 = a1[1];
    *(void *)&out_desc.data_bias = 0;
    in_desc.std::string::size_type size = v4;
    *(void *)&in_desc.data_type = 0x3F80000000020008;
    *(void *)&in_desc.data_bias = 0;
    out_desc.std::string::size_type size = v5;
    *(void *)&out_desc.data_type = 65568;
    if (!v3) {
      uint64_t v3 = (const void *)*((void *)a1 + 2);
    }
    *(void *)&filter_params.flags = 1;
    *(_OWORD *)&filter_params.alloc_memory = 0u;
    filter_params.n_threads = 1;
    v6.in_std::string::size_type size = v4;
    v6.out_std::string::size_type size = v5;
    v6.weights.data = v3;
    v6.weights.data_type = BNNSDataTypeInt8;
    v6.weights.data_scale = 1.0;
    *(void *)&v6.weights.data_bias = 0;
    v6.weights.data_table = 0;
    v6.bias = *(BNNSLayerData *)ymmword_20C9D8;
    memset(&v6.activation, 0, sizeof(v6.activation));
    *((void *)a1 + 5) = BNNSFilterCreateFullyConnectedLayer(&in_desc, &out_desc, &v6, &filter_params);
  }
}

float kaldi::QuantizedMatrixBase<signed char>::Sum(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5 = *a1;
  if (!*a1) {
    return 0.0;
  }
  unint64_t v7 = 0;
  LODWORD(v8) = a1[1];
  float v9 = 0.0;
  do
  {
    if (v8)
    {
      unint64_t v10 = 0;
      do
      {
        float v9 = v9 + kaldi::QuantizedMatrixBase<signed char>::operator()((uint64_t)a1, v7, v10++, a4, a5);
        unint64_t v8 = a1[1];
      }
      while (v10 < v8);
      int v5 = *a1;
    }
    ++v7;
  }
  while (v7 < v5);
  return v9;
}

float kaldi::QuantizedMatrixBase<signed char>::operator()(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)a1 <= a2 || (unsigned int v5 = *(_DWORD *)(a1 + 4), v5 <= a3)) {
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.h", (const char *)&stru_20.initprot + 3, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", a5);
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (!v6) {
    uint64_t v6 = *(void *)(a1 + 16);
  }
  return (float)*(char *)(v6 + (int)(v5 * a2) + (int)a3) / *(float *)(a1 + 12);
}

float kaldi::QuantizedMatrixBase<signed char>::Row@<S0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (!v5) {
    uint64_t v5 = *(void *)(a1 + 16);
  }
  return kaldi::QuantizedSubVector<signed char>::QuantizedSubVector(a3, v5 + *(_DWORD *)(a1 + 4) * a2, *(_DWORD *)(a1 + 4), *(float *)(a1 + 12));
}

uint64_t kaldi::QuantizedMatrixBase<signed char>::Range@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  LODWORD(v8) = a3;
  LODWORD(v9) = a2;
  uint64_t result = kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(a6, a3, a5);
  *(void *)(a6 + 8) = *(void *)(a1 + 8);
  if (v8)
  {
    uint64_t v13 = 0;
    uint64_t v8 = (int)v8;
    uint64_t v9 = (int)v9;
    do
    {
      uint64_t v14 = kaldi::QuantizedMatrixBase<signed char>::MutableData(a6);
      uint64_t v15 = *(void *)(a1 + 32);
      if (!v15) {
        uint64_t v15 = *(void *)(a1 + 16);
      }
      uint64_t result = (uint64_t)memcpy((void *)(v14 + v13), (const void *)(v15 + v9 * *(int *)(a1 + 4) + a4), a5);
      ++v9;
      v13 += a5;
      --v8;
    }
    while (v8);
  }
  return result;
}

void sub_AF500(_Unwind_Exception *a1)
{
  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

void kaldi::ComputeQuantizedData<signed char>(uint64_t a1, kaldi::ContextDependency *this, float a3)
{
  int v6 = kaldi::ContextDependency::CentralPosition(this);
  int v7 = kaldi::ContextDependency::ContextWidth(this);
  if (v6)
  {
    int v10 = v7;
    uint64_t v11 = 0;
    uint64_t v12 = v6;
    uint64_t v13 = v7;
    if ((unint64_t)v7 <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = v7;
    }
    do
    {
      if (v10)
      {
        uint64_t v15 = 0;
        do
        {
          *(unsigned char *)(a1 + v15) = llroundf(kaldi::MatrixBase<float>::operator()((uint64_t)this, v11, v15, v8, v9) * a3);
          ++v15;
        }
        while (v14 != v15);
      }
      ++v11;
      a1 += v13;
    }
    while (v11 != v12);
  }
}

uint64_t kaldi::QuantizedMatrixBase<signed char>::QuantizedMatrixBase(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = kaldi::kaldi_memalign_free;
  kaldi::QuantizedMatrixBase<signed char>::UpdateFilter((int *)a1);
  return a1;
}

void sub_AF610(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v3) {
    (*(void (**)(void))(v1 + 24))();
  }
  _Unwind_Resume(exception_object);
}

int *kaldi::QuantizedMatrixBase<signed char>::QuantizedMatrixBase(int *a1, int *a2)
{
  int v3 = *a2;
  int v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  *((void *)a1 + 1) = *((void *)a2 + 1);
  *((void *)a1 + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  uint64_t v5 = *((void *)a2 + 4);
  *((void *)a1 + 3) = kaldi::kaldi_memalign_free;
  *((void *)a1 + 4) = v5;
  *((void *)a1 + 5) = 0;
  if (*((void *)a2 + 2))
  {
    memptr = 0;
    if (malloc_type_posix_memalign(&memptr, 0x20uLL, v4 * v3, 0x100004077774924uLL)) {
      int v7 = 0;
    }
    else {
      int v7 = memptr;
    }
    memptr = v7;
    uint64_t v8 = *((void *)a1 + 2);
    *((void *)a1 + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v7;
    if (v8)
    {
      (*((void (**)(uint64_t))a1 + 3))(v8);
      int v7 = (void *)*((void *)a1 + 2);
    }
    memcpy(v7, *((const void **)a2 + 2), a1[1] * (uint64_t)*a1);
  }
  kaldi::QuantizedMatrixBase<signed char>::UpdateFilter(a1);
  return a1;
}

void sub_AF708(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v3) {
    (*(void (**)(void))(v1 + 24))();
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2) {
    BNNSFilterDestroy(v2);
  }
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3) {
    (*(void (**)(void))(a1 + 24))();
  }
  return a1;
}

uint64_t kaldi::QuantizedMatrixBase<short>::AddMatMat(uint64_t a1, kaldi::ContextDependency *a2, kaldi::ContextDependency *a3, uint64_t a4, const char *a5, float a6)
{
  uint64_t v27 = 0;
  uint64_t v28 = (uint64_t (*)(void))kaldi::kaldi_memalign_free;
  int v30 = 0;
  uint64_t v29 = 0;
  uint64_t v31 = 0;
  kaldi::QuantizedMatrixBase<short>::PrepareMatMat((float *)a1, a2, (uint64_t)&v27, a4, a5);
  uint64_t v9 = kaldi::ContextDependency::CentralPosition(a3);
  uint64_t v10 = kaldi::ContextDependency::ContextWidth(a3);
  float v11 = 1.0 / (float)(*(float *)(a1 + 12) * *(float *)&v29);
  if (a6 == 0.0)
  {
    uint64_t v12 = *(void **)(a1 + 40);
    uint64_t v13 = v27;
    size_t v14 = *(int *)(a1 + 4);
    uint64_t v15 = *(void **)a3;
    int v16 = fst::StateOrderQueue<int>::Head_((uint64_t)a3);
    BNNSFilterApplyBatch(v12, (int)v9, v13, v14, v15, v16);
    kaldi::MatrixBase<float>::Scale((uint64_t)a3, v11);
  }
  else
  {
    kaldi::Matrix<float>::Matrix((uint64_t)v26, v9, v10, 0, 0);
    uint64_t v17 = *(void **)(a1 + 40);
    int v18 = kaldi::ContextDependency::CentralPosition((kaldi::ContextDependency *)v26);
    uint64_t v19 = v27;
    size_t v20 = *(int *)(a1 + 4);
    float v21 = (void *)v26[0];
    int v22 = fst::StateOrderQueue<int>::Head_((uint64_t)v26);
    BNNSFilterApplyBatch(v17, v18, v19, v20, v21, v22);
    kaldi::MatrixBase<float>::AddMat((uint64_t)a3, (uint64_t)v26, 111, v11, a6, v23, v24);
    kaldi::Matrix<float>::~Matrix((uint64_t)v26);
  }
  uint64_t result = (uint64_t)v27;
  uint64_t v27 = 0;
  if (result) {
    return v28();
  }
  return result;
}

void sub_AF8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(void))
{
  if (a14) {
    a15();
  }
  _Unwind_Resume(exception_object);
}

void kaldi::QuantizedMatrixBase<short>::PrepareMatMat(float *a1, kaldi::ContextDependency *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  float v8 = kaldi::MatrixBase<float>::AbsMax((uint64_t)a2, (uint64_t)a2, a3, a4, a5);
  if (v8 == 0.0) {
    float v9 = 1.0;
  }
  else {
    float v9 = v8;
  }
  int v10 = kaldi::ContextDependency::CentralPosition(a2);
  int v11 = kaldi::ContextDependency::ContextWidth(a2);
  float v12 = a1[2];
  float v13 = 2147500000.0 / (float)(v12 * (float)v11);
  float v14 = v12 / v9;
  if (v14 >= v13) {
    float v15 = v13;
  }
  else {
    float v15 = v14;
  }
  memptr = 0;
  if (malloc_type_posix_memalign(&memptr, 0x20uLL, 2 * v11 * v10, 0x1000040BDFB0063uLL)) {
    int v16 = 0;
  }
  else {
    int v16 = memptr;
  }
  memptr = v16;
  uint64_t v17 = *(void **)a3;
  *(void *)a3 = v16;
  if (v17)
  {
    (*(void (**)(void *))(a3 + 8))(v17);
    int v16 = *(void **)a3;
  }
  kaldi::ComputeQuantizedData<short>((uint64_t)v16, a2, v15);
  *(float *)(a3 + 16) = v15;
  float v18 = *a1;
  uint64_t v19 = *((void *)a1 + 4);
  if (!v19) {
    uint64_t v19 = *((void *)a1 + 2);
  }
  int v20 = *((_DWORD *)a1 + 1);
  if (*(_DWORD *)(a3 + 20) != LODWORD(v18) || *(_DWORD *)(a3 + 24) != v20 || *(void *)(a3 + 32) != v19)
  {
    *(float *)(a3 + 20) = v18;
    *(_DWORD *)(a3 + 24) = v20;
    *(void *)(a3 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v19;
  }
}

uint64_t kaldi::QuantizedMatrixBase<short>::CopyRowsFromVec(unsigned int *a1, char **a2)
{
  kaldi::Matrix<float>::Matrix((uint64_t)v5, *a1, a1[1], 0, 0);
  kaldi::MatrixBase<float>::CopyRowsFromVec(v5, a2);
  kaldi::QuantizedMatrixBase<short>::CopyFromMat((uint64_t)a1, (kaldi::ContextDependency *)v5);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v5);
}

void sub_AFAC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::QuantizedMatrixBase<short>::CopyFromMat(int *a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  *((void *)a1 + 1) = *(void *)(a2 + 8);
  if (a3 == 111)
  {
    if (*a1 != *(_DWORD *)a2) {
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", &stru_108.segname[2], "num_rows_ == M.NumRows()", a5);
    }
    if (a1[1] != *(_DWORD *)(a2 + 4)) {
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", &stru_108.segname[3], "num_cols_ == M.NumCols()", a5);
    }
    int v7 = (void *)kaldi::QuantizedMatrixBase<short>::MutableData((uint64_t)a1);
    if (*(void *)(a2 + 32)) {
      float v8 = *(const void **)(a2 + 32);
    }
    else {
      float v8 = *(const void **)(a2 + 16);
    }
    memmove(v7, v8, 2 * *a1 * a1[1]);
  }
  else
  {
    uint64_t v9 = a1[1];
    if (v9 != *(_DWORD *)a2) {
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", &stru_108.segname[6], "num_cols_ == M.NumRows()", a5);
    }
    uint64_t v10 = *a1;
    if (v10 != *(_DWORD *)(a2 + 4)) {
      kaldi::KaldiAssertFailure_((kaldi *)"CopyFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", &stru_108.segname[7], "num_rows_ == M.NumCols()", a5);
    }
    uint64_t v11 = kaldi::QuantizedMatrixBase<short>::MutableData((uint64_t)a1);
    float v12 = *(_WORD **)(a2 + 32);
    if (!v12) {
      float v12 = *(_WORD **)(a2 + 16);
    }
    uint64_t v13 = *a1;
    if ((int)v13 >= 1)
    {
      uint64_t v14 = 0;
      uint64_t v15 = a1[1];
      do
      {
        uint64_t v16 = v15;
        uint64_t v17 = v12;
        float v18 = (_WORD *)v11;
        if ((int)v15 >= 1)
        {
          do
          {
            *v18++ = *v17;
            v17 += v10;
            --v16;
          }
          while (v16);
        }
        ++v14;
        v11 += 2 * v9;
        ++v12;
      }
      while (v14 != v13);
    }
  }

  kaldi::QuantizedMatrixBase<short>::UpdateFilter(a1);
}

uint64_t kaldi::QuantizedMatrixBase<short>::MutableData(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "MutableData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", 271);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Attempt to write into immutable matrix");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return *(void *)(a1 + 16);
}

void kaldi::QuantizedMatrixBase<short>::UpdateFilter(int *a1)
{
  uint64_t v2 = (void *)*((void *)a1 + 5);
  if (v2)
  {
    BNNSFilterDestroy(v2);
    *((void *)a1 + 5) = 0;
  }
  uint64_t v3 = (const void *)*((void *)a1 + 4);
  if (v3 || *((void *)a1 + 2))
  {
    size_t v5 = *a1;
    size_t v4 = a1[1];
    *(void *)&out_desc.data_bias = 0;
    in_desc.std::string::size_type size = v4;
    *(void *)&in_desc.data_type = 0x3F80000000020010;
    *(void *)&in_desc.data_bias = 0;
    out_desc.std::string::size_type size = v5;
    *(void *)&out_desc.data_type = 65568;
    if (!v3) {
      uint64_t v3 = (const void *)*((void *)a1 + 2);
    }
    *(void *)&filter_params.flags = 1;
    *(_OWORD *)&filter_params.alloc_memory = 0u;
    filter_params.n_threads = 1;
    v6.in_std::string::size_type size = v4;
    v6.out_std::string::size_type size = v5;
    v6.weights.data = v3;
    v6.weights.data_type = BNNSDataTypeInt16;
    v6.weights.data_scale = 1.0;
    *(void *)&v6.weights.data_bias = 0;
    v6.weights.data_table = 0;
    v6.bias = *(BNNSLayerData *)ymmword_20C9D8;
    memset(&v6.activation, 0, sizeof(v6.activation));
    *((void *)a1 + 5) = BNNSFilterCreateFullyConnectedLayer(&in_desc, &out_desc, &v6, &filter_params);
  }
}

float kaldi::QuantizedMatrixBase<short>::Sum(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5 = *a1;
  if (!*a1) {
    return 0.0;
  }
  unint64_t v7 = 0;
  LODWORD(v8) = a1[1];
  float v9 = 0.0;
  do
  {
    if (v8)
    {
      unint64_t v10 = 0;
      do
      {
        float v9 = v9 + kaldi::QuantizedMatrixBase<short>::operator()((uint64_t)a1, v7, v10++, a4, a5);
        unint64_t v8 = a1[1];
      }
      while (v10 < v8);
      int v5 = *a1;
    }
    ++v7;
  }
  while (v7 < v5);
  return v9;
}

float kaldi::QuantizedMatrixBase<short>::operator()(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)a1 <= a2 || (unsigned int v5 = *(_DWORD *)(a1 + 4), v5 <= a3)) {
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.h", (const char *)&stru_20.initprot + 3, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", a5);
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (!v6) {
    uint64_t v6 = *(void *)(a1 + 16);
  }
  return (float)*(__int16 *)(v6 + 2 * (int)(v5 * a2) + 2 * (int)a3) / *(float *)(a1 + 12);
}

float kaldi::QuantizedMatrixBase<short>::Row@<S0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (!v5) {
    uint64_t v5 = *(void *)(a1 + 16);
  }
  return kaldi::QuantizedSubVector<signed char>::QuantizedSubVector(a3, v5 + 2 * *(_DWORD *)(a1 + 4) * a2, *(_DWORD *)(a1 + 4), *(float *)(a1 + 12));
}

uint64_t kaldi::QuantizedMatrixBase<short>::Range@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  LODWORD(v8) = a3;
  LODWORD(v9) = a2;
  uint64_t result = kaldi::QuantizedMatrix<short>::QuantizedMatrix(a6, a3, a5);
  *(void *)(a6 + 8) = *(void *)(a1 + 8);
  if (v8)
  {
    uint64_t v13 = 0;
    uint64_t v8 = (int)v8;
    uint64_t v9 = (int)v9;
    size_t v14 = 2 * a5;
    do
    {
      uint64_t v15 = kaldi::QuantizedMatrixBase<short>::MutableData(a6);
      uint64_t v16 = *(void *)(a1 + 32);
      if (!v16) {
        uint64_t v16 = *(void *)(a1 + 16);
      }
      uint64_t result = (uint64_t)memcpy((void *)(v15 + v13), (const void *)(v16 + 2 * v9 * *(int *)(a1 + 4) + 2 * a4), v14);
      ++v9;
      v13 += v14;
      --v8;
    }
    while (v8);
  }
  return result;
}

void sub_AFFA8(_Unwind_Exception *a1)
{
  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

void kaldi::ComputeQuantizedData<short>(uint64_t a1, kaldi::ContextDependency *this, float a3)
{
  int v6 = kaldi::ContextDependency::CentralPosition(this);
  int v7 = kaldi::ContextDependency::ContextWidth(this);
  if (v6)
  {
    int v10 = v7;
    uint64_t v11 = 0;
    uint64_t v12 = v6;
    if ((unint64_t)v7 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v7;
    }
    do
    {
      if (v10)
      {
        uint64_t v14 = 0;
        do
        {
          *(_WORD *)(a1 + 2 * v14) = llroundf(kaldi::MatrixBase<float>::operator()((uint64_t)this, v11, v14, v8, v9) * a3);
          ++v14;
        }
        while (v13 != v14);
      }
      ++v11;
      a1 += 2 * v10;
    }
    while (v11 != v12);
  }
}

uint64_t kaldi::QuantizedMatrixBase<short>::QuantizedMatrixBase(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = kaldi::kaldi_memalign_free;
  kaldi::QuantizedMatrixBase<short>::UpdateFilter((int *)a1);
  return a1;
}

void sub_B00BC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v3) {
    (*(void (**)(void))(v1 + 24))();
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::QuantizedMatrixBase<short>::QuantizedMatrixBase(uint64_t a1, int *a2)
{
  int v3 = *a2;
  int v4 = a2[1];
  *(_DWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 4) = v4;
  *(void *)(a1 + 8) = *((void *)a2 + 1);
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = *((void *)a2 + 4);
  *(void *)(a1 + 24) = kaldi::kaldi_memalign_free;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v5;
  *(void *)(a1 + 40) = 0;
  if (*((void *)a2 + 2))
  {
    memptr = 0;
    if (malloc_type_posix_memalign(&memptr, 0x20uLL, 2 * v4 * v3, 0x1000040BDFB0063uLL)) {
      int v7 = 0;
    }
    else {
      int v7 = memptr;
    }
    memptr = v7;
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v7;
    if (v8)
    {
      (*(void (**)(uint64_t))(a1 + 24))(v8);
      int v7 = *(void **)(a1 + 16);
    }
    memcpy(v7, *((const void **)a2 + 2), 2 * *(_DWORD *)(a1 + 4) * *(_DWORD *)a1);
  }
  kaldi::QuantizedMatrixBase<short>::UpdateFilter((int *)a1);
  return a1;
}

void sub_B01B8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v3) {
    (*(void (**)(void))(v1 + 24))();
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(uint64_t a1, int *a2)
{
  int v4 = (int *)kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(a1, *a2, a2[1]);
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(v4, (uint64_t)a2, 111, v5, v6);
  return a1;
}

void sub_B0220(_Unwind_Exception *a1)
{
  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(uint64_t a1, kaldi::ContextDependency *this)
{
  int v4 = kaldi::ContextDependency::CentralPosition(this);
  int v5 = kaldi::ContextDependency::ContextWidth(this);
  kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(a1, v4, v5);
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(a1, this);
  return a1;
}

void sub_B0294(_Unwind_Exception *a1)
{
  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

void kaldi::QuantizedMatrix<signed char>::Read(int *a1, void *a2, int a3, uint64_t a4, const char *a5)
{
  kaldi::ReadBasicType<float>(a2, a3, (float *)a1 + 3, a4, a5);
  a1[2] = 1123942400;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  kaldi::ReadIntegerVector<signed char>(a2, a3, (unint64_t *)&v13, a4, (char *)a1 + 32, 0, 0);
  if (*((void *)a1 + 4))
  {
    uint64_t v9 = *((void *)a1 + 2);
    *((void *)a1 + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
    if (v9) {
      (*((void (**)(void))a1 + 3))();
    }
  }
  else
  {
    if (v14 - v13 != a1[1] * (uint64_t)*a1)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)memptr, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", 498);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(memptr, (uint64_t)"Quantized matrix improperly serialized", 38);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)memptr);
    }
    memptr[0] = 0;
    if (malloc_type_posix_memalign(memptr, 0x20uLL, v14 - v13, 0x100004077774924uLL)) {
      int v10 = 0;
    }
    else {
      int v10 = memptr[0];
    }
    memptr[0] = v10;
    uint64_t v11 = *((void *)a1 + 2);
    *((void *)a1 + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v10;
    if (v11)
    {
      (*((void (**)(uint64_t))a1 + 3))(v11);
      int v10 = (void *)*((void *)a1 + 2);
    }
    memcpy(v10, v13, v14 - v13);
  }
  kaldi::QuantizedMatrixBase<signed char>::UpdateFilter(a1);
  if (v13)
  {
    uint64_t v14 = v13;
    operator delete(v13);
  }
}

void sub_B0428(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 72);
  if (v3)
  {
    *(void *)(v1 - 64) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::ReadIntegerVector<signed char>(void *a1, int a2, unint64_t *a3, uint64_t a4, char *a5, void *a6, void *a7)
{
  if (!a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadIntegerVector", "../subproject/libquasar/libkaldi/src/base/io-funcs-inl.h", (const char *)&stru_B8.flags + 3, "v != NULL", a5);
  }
  if (a5) {
    *(void *)a5 = 0;
  }
  if (a2)
  {
    if (std::istream::peek() != 1)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40, "ReadIntegerVector", "../subproject/libquasar/libkaldi/src/base/io-funcs-inl.h", 260);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"ReadIntegerVector: expected to see type of size ", 48);
      float v32 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", saw instead ", 14);
      float v33 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", at file position ", 19);
      std::istream::tellg();
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
    }
    std::istream::get();
    signed int v39 = 0;
    std::istream::read();
    if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) == 0)
    {
      int v13 = v39;
      unsigned int v14 = v39;
      if (a7) {
        *a7 = v39;
      }
      if (a4 && (a5 ? (v15 = v13 < 0) : (v15 = 0), !v15 ? (int v16 = 0) : (int v16 = 1), a6 || v16))
      {
        if (v16)
        {
          std::istream::tellg();
          *(void *)a5 = a4 + v41;
        }
        else if (a6)
        {
          std::istream::tellg();
          *a6 = a4 + v41;
        }
        std::istream::seekg();
        a3[1] = *a3;
        std::vector<signed char>::shrink_to_fit(a3);
      }
      else
      {
        unint64_t v17 = a3[1] - *a3;
        if (v14 <= v17)
        {
          if (v14 < v17) {
            a3[1] = *a3 + v14;
          }
        }
        else
        {
          std::vector<signed char>::__append(a3, v14 - v17);
          unsigned int v14 = v39;
        }
        if ((int)v14 >= 1) {
          std::istream::read();
        }
      }
      goto LABEL_59;
    }
LABEL_62:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40, "ReadIntegerVector", "../subproject/libquasar/libkaldi/src/base/io-funcs-inl.h", 327);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"ReadIntegerVector: read failure at file position ", 49);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
  }
  __p = 0;
  uint64_t v37 = 0;
  unint64_t v38 = 0;
  std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  if (std::istream::peek() != 91)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40, "ReadIntegerVector", "../subproject/libquasar/libkaldi/src/base/io-funcs-inl.h", 298);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"ReadIntegerVector: expected to see [, saw ", 42);
    std::istream::peek();
    float v34 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", at file position ", 19);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
  }
  std::istream::get();
  std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  float v35 = a3;
  while (1)
  {
    int v18 = std::istream::peek();
    if (v18 == 93) {
      break;
    }
    LOWORD(v40[0]) = 0;
    uint64_t v19 = (void *)std::istream::operator>>();
    std::ws[abi:ne180100]<char,std::char_traits<char>>(v19);
    if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0) {
      goto LABEL_46;
    }
    int v20 = v37;
    if ((unint64_t)v37 >= v38)
    {
      int v22 = (char *)__p;
      uint64_t v23 = v37 - (unsigned char *)__p;
      int64_t v24 = v37 - (unsigned char *)__p + 1;
      if (v24 < 0) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = v38 - (void)__p;
      if (2 * (v38 - (unint64_t)__p) > v24) {
        int64_t v24 = 2 * v25;
      }
      if (v25 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v26 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v26 = v24;
      }
      if (v26) {
        uint64_t v27 = (char *)operator new(v26);
      }
      else {
        uint64_t v27 = 0;
      }
      uint64_t v28 = &v27[v23];
      uint64_t v29 = &v27[v23];
      char *v29 = v40[0];
      float v21 = v29 + 1;
      if (v20 != v22)
      {
        int v30 = &v20[~(unint64_t)v22];
        do
        {
          char v31 = *--v20;
          (v30--)[(void)v27] = v31;
        }
        while (v20 != v22);
        int v20 = (char *)__p;
        uint64_t v28 = v27;
      }
      __p = v28;
      uint64_t v37 = v21;
      unint64_t v38 = (unint64_t)&v27[v26];
      if (v20) {
        operator delete(v20);
      }
    }
    else
    {
      *uint64_t v37 = v40[0];
      float v21 = v20 + 1;
    }
    uint64_t v37 = v21;
  }
  std::istream::get();
  if (&__p != (void **)v35) {
    std::vector<signed char>::__assign_with_size[abi:ne180100]<signed char *,signed char *>(v35, (char *)__p, v37, v37 - (unsigned char *)__p);
  }
  if (a7) {
    *a7 = v35[1] - *v35;
  }
LABEL_46:
  if (__p)
  {
    uint64_t v37 = (char *)__p;
    operator delete(__p);
  }
  if (v18 != 93) {
    goto LABEL_62;
  }
LABEL_59:
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0) {
    goto LABEL_62;
  }
}

void sub_B0998(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0xB09D4);
}

void sub_B09B0()
{
}

void sub_B09C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::QuantizedMatrix<signed char>::Write(int *a1, void *a2, int a3, int a4)
{
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  int v8 = *a1;
  int v9 = a1[1];
  uint64_t v10 = *((void *)a1 + 4);
  if (!v10) {
    uint64_t v10 = *((void *)a1 + 2);
  }

  return kaldi::WriteIntegerByteArray<signed char>(a2, a3, a4, v9 * (uint64_t)v8, v10);
}

uint64_t kaldi::QuantizedMatrix<short>::QuantizedMatrix(uint64_t a1, int *a2)
{
  int v4 = (int *)kaldi::QuantizedMatrix<short>::QuantizedMatrix(a1, *a2, a2[1]);
  kaldi::QuantizedMatrixBase<short>::CopyFromMat(v4, (uint64_t)a2, 111, v5, v6);
  return a1;
}

void sub_B0A90(_Unwind_Exception *a1)
{
  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::QuantizedMatrix<short>::QuantizedMatrix(uint64_t a1, kaldi::ContextDependency *this)
{
  int v4 = kaldi::ContextDependency::CentralPosition(this);
  int v5 = kaldi::ContextDependency::ContextWidth(this);
  kaldi::QuantizedMatrix<short>::QuantizedMatrix(a1, v4, v5);
  kaldi::QuantizedMatrixBase<short>::CopyFromMat(a1, this);
  return a1;
}

void sub_B0B04(_Unwind_Exception *a1)
{
  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

void kaldi::QuantizedMatrix<short>::Read(int *a1, void *a2, int a3, uint64_t a4, const char *a5)
{
  kaldi::ReadBasicType<float>(a2, a3, (float *)a1 + 3, a4, a5);
  kaldi::ReadBasicType<float>(a2, a3, (float *)a1 + 2, v9, v10);
  BOOL v15 = 0;
  int v16 = 0;
  uint64_t v17 = 0;
  kaldi::ReadIntegerVector<short>(a2, a3, (uint64_t)&v15, a4, (char *)a1 + 32, 0, 0);
  if (*((void *)a1 + 4))
  {
    uint64_t v11 = *((void *)a1 + 2);
    *((void *)a1 + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
    if (v11) {
      (*((void (**)(void))a1 + 3))();
    }
  }
  else
  {
    if (a1[1] * (uint64_t)*a1 != (v16 - v15) >> 1)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)memptr, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", 498);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(memptr, (uint64_t)"Quantized matrix improperly serialized", 38);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)memptr);
    }
    memptr[0] = 0;
    if (malloc_type_posix_memalign(memptr, 0x20uLL, v16 - v15, 0x1000040BDFB0063uLL)) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = memptr[0];
    }
    memptr[0] = v12;
    uint64_t v13 = *((void *)a1 + 2);
    *((void *)a1 + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v12;
    if (v13)
    {
      (*((void (**)(uint64_t))a1 + 3))(v13);
      uint64_t v12 = (void *)*((void *)a1 + 2);
    }
    memcpy(v12, v15, v16 - v15);
  }
  kaldi::QuantizedMatrixBase<short>::UpdateFilter(a1);
  if (v15)
  {
    int v16 = v15;
    operator delete(v15);
  }
}

void sub_B0CA0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 72);
  if (v3)
  {
    *(void *)(v1 - 64) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::ReadIntegerVector<short>(void *a1, int a2, uint64_t a3, uint64_t a4, char *a5, void *a6, uint64_t *a7)
{
  if (!a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadIntegerVector", "../subproject/libquasar/libkaldi/src/base/io-funcs-inl.h", (const char *)&stru_B8.flags + 3, "v != NULL", a5);
  }
  if (a5) {
    *(void *)a5 = 0;
  }
  if (a2)
  {
    if (std::istream::peek() != 2)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36, "ReadIntegerVector", "../subproject/libquasar/libkaldi/src/base/io-funcs-inl.h", 260);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"ReadIntegerVector: expected to see type of size ", 48);
      uint64_t v29 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", saw instead ", 14);
      int v30 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)", at file position ", 19);
      std::istream::tellg();
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36);
    }
    std::istream::get();
    int v35 = 0;
    std::istream::read();
    if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) == 0)
    {
      int v13 = v35;
      unsigned int v14 = v35;
      if (a7) {
        *a7 = v35;
      }
      if (a4 && (a5 ? (v15 = v13 < 0) : (v15 = 0), !v15 ? (int v16 = 0) : (int v16 = 1), a6 || v16))
      {
        if (v16)
        {
          std::istream::tellg();
          *(void *)a5 = a4 + v37;
        }
        else if (a6)
        {
          std::istream::tellg();
          *a6 = a4 + v37;
        }
        std::istream::seekg();
        *(void *)(a3 + 8) = *(void *)a3;
        std::vector<short>::shrink_to_fit(a3);
      }
      else
      {
        std::vector<short>::resize(a3, v14);
        if (v35 >= 1) {
          std::istream::read();
        }
      }
      goto LABEL_55;
    }
LABEL_58:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36, "ReadIntegerVector", "../subproject/libquasar/libkaldi/src/base/io-funcs-inl.h", 327);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"ReadIntegerVector: read failure at file position ", 49);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36);
  }
  __p = 0;
  float v33 = 0;
  unint64_t v34 = 0;
  std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  if (std::istream::peek() != 91)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36, "ReadIntegerVector", "../subproject/libquasar/libkaldi/src/base/io-funcs-inl.h", 298);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"ReadIntegerVector: expected to see [, saw ", 42);
    std::istream::peek();
    char v31 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)", at file position ", 19);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36);
  }
  std::istream::get();
  std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  while (1)
  {
    int v17 = std::istream::peek();
    if (v17 == 93) {
      break;
    }
    LOWORD(v36[0]) = 0;
    int v18 = (void *)std::istream::operator>>();
    std::ws[abi:ne180100]<char,std::char_traits<char>>(v18);
    if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0) {
      goto LABEL_46;
    }
    uint64_t v19 = v33;
    if ((unint64_t)v33 >= v34)
    {
      float v21 = __p;
      uint64_t v22 = (char *)v33 - (unsigned char *)__p;
      if ((char *)v33 - (unsigned char *)__p <= -3) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v23 = v22 >> 1;
      if (v34 - (unint64_t)__p <= (v22 >> 1) + 1) {
        uint64_t v24 = v23 + 1;
      }
      else {
        uint64_t v24 = v34 - (void)__p;
      }
      if (v34 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v25 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v25 = v24;
      }
      if (v25)
      {
        size_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<short>>((uint64_t)&v34, v25);
        float v21 = __p;
        uint64_t v19 = v33;
      }
      else
      {
        size_t v26 = 0;
      }
      uint64_t v27 = &v26[2 * v23];
      *(_WORD *)uint64_t v27 = v36[0];
      int v20 = v27 + 2;
      while (v19 != v21)
      {
        __int16 v28 = *--v19;
        *((_WORD *)v27 - 1) = v28;
        v27 -= 2;
      }
      __p = v27;
      float v33 = v20;
      unint64_t v34 = (unint64_t)&v26[2 * v25];
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      _WORD *v33 = v36[0];
      int v20 = v19 + 1;
    }
    float v33 = v20;
  }
  std::istream::get();
  if (&__p != (void **)a3) {
    std::vector<short>::__assign_with_size[abi:ne180100]<short *,short *>((char *)a3, (char *)__p, (uint64_t)v33, ((char *)v33 - (unsigned char *)__p) >> 1);
  }
  if (a7) {
    *a7 = (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 1;
  }
LABEL_46:
  if (__p)
  {
    float v33 = __p;
    operator delete(__p);
  }
  if (v17 != 93) {
    goto LABEL_58;
  }
LABEL_55:
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0) {
    goto LABEL_58;
  }
}

void sub_B11F0(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0xB1228);
}

void sub_B1204()
{
}

void sub_B1214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::QuantizedMatrix<short>::Write(int *a1, void *a2, int a3, int a4)
{
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  int v8 = *a1;
  int v9 = a1[1];
  uint64_t v10 = *((void *)a1 + 4);
  if (!v10) {
    uint64_t v10 = *((void *)a1 + 2);
  }

  return kaldi::WriteIntegerByteArray<short>(a2, a3, a4, v9 * (uint64_t)v8, v10);
}

double kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

void kaldi::VectorwiseQuantizedMatrix<signed char>::CopyFromMat()
{
}

void sub_B1404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(uint64_t result, void *a2)
{
  *(void *)double result = *a2;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  uint64_t v2 = a2[2];
  if (!v2) {
    operator new[]();
  }
  *(void *)(result + 16) = v2;
  uint64_t v3 = a2[4];
  if (!v3) {
    operator new[]();
  }
  *(void *)(result + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v3;
  return result;
}

void sub_B152C(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 24);
  *(void *)(v1 + 24) = 0;
  if (v4) {
    operator delete();
  }
  kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::VectorwiseQuantizedMatrix<signed char>::Read(unsigned int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = kaldi::Matrix<float>::Matrix((uint64_t)v17, 1, *a1, 0, 0);
  kaldi::Matrix<float>::Read(v8, a2, a3, 0, a4);
  if (!v18)
  {
    *((void *)a1 + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
    operator new[]();
  }
  uint64_t v9 = v17[0];
  uint64_t v10 = *((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  *((void *)a1 + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v9;
  if (v10) {
    operator delete();
  }
  unsigned int v14 = 0;
  BOOL v15 = 0;
  uint64_t v16 = 0;
  kaldi::ReadIntegerVector<signed char>(a2, a3, (unint64_t *)&v14, a4, (char *)a1 + 32, 0, 0);
  if (!*((void *)a1 + 4))
  {
    if (v15 - v14 == (int)a1[1] * (uint64_t)(int)*a1) {
      operator new[]();
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", 611);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Quantized matrix improperly serialized", 38);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  uint64_t v11 = *((void *)a1 + 3);
  *((void *)a1 + 3) = 0;
  if (v11) {
    operator delete();
  }
  if (v14)
  {
    BOOL v15 = v14;
    operator delete(v14);
  }
  return kaldi::Matrix<float>::~Matrix((uint64_t)v17);
}

void sub_B1780(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 - 112);
  if (v3)
  {
    *(void *)(v1 - 104) = v3;
    operator delete(v3);
  }
  kaldi::Matrix<float>::~Matrix(v1 - 88);
  _Unwind_Resume(a1);
}

uint64_t kaldi::VectorwiseQuantizedMatrix<signed char>::Write(unsigned int *a1, void *a2, int a3)
{
  uint64_t v6 = *((void *)a1 + 2);
  if (!v6) {
    uint64_t v6 = *((void *)a1 + 1);
  }
  kaldi::SubMatrix<float>::SubMatrix(v9, v6, 1, *a1, *a1);
  kaldi::MatrixBase<float>::Write(v9, a2, a3, a3);
  uint64_t v7 = *((void *)a1 + 4);
  if (!v7) {
    uint64_t v7 = *((void *)a1 + 3);
  }
  kaldi::WriteIntegerByteArray<signed char>(a2, a3, a3, (int)a1[1] * (uint64_t)(int)*a1, v7);
  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v9);
}

void sub_B1848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float kaldi::VectorwiseQuantizedMatrix<signed char>::Row@<S0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (!v5) {
    uint64_t v5 = *(void *)(a1 + 24);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6) {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  return kaldi::QuantizedSubVector<signed char>::QuantizedSubVector(a3, v5 + *(int *)(a1 + 4) * (uint64_t)a2, *(_DWORD *)(a1 + 4), *(float *)(v6 + 4 * a2));
}

uint64_t kaldi::VectorwiseQuantizedMatrix<signed char>::AddMatMat(uint64_t a1, uint64_t a2, kaldi::ContextDependency *this, float a4)
{
  int v8 = kaldi::ContextDependency::ContextWidth(this);
  kaldi::Matrix<float>::Matrix(v17, this, 112);
  if (v8)
  {
    for (uint64_t i = 0; i != v8; ++i)
    {
      kaldi::MatrixBase<float>::Row((uint64_t)v17, i, v10, v16);
      kaldi::VectorwiseQuantizedMatrix<signed char>::Row(a1, i, (uint64_t)v15);
      kaldi::QuantizedVectorBase<signed char>::AddMatVec((uint64_t)v15, a2, (uint64_t)v16, a4, v12, v13);
    }
  }
  kaldi::MatrixBase<float>::CopyFromMat<float>((unsigned int *)this, (uint64_t)v17, 112, v9, v10);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v17);
}

void sub_B1960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::VectorwiseQuantizedMatrix<short>::VectorwiseQuantizedMatrix(uint64_t result, void *a2)
{
  *(void *)double result = *a2;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  uint64_t v2 = a2[2];
  if (!v2) {
    operator new[]();
  }
  *(void *)(result + 16) = v2;
  uint64_t v3 = a2[4];
  if (!v3) {
    operator new[]();
  }
  *(void *)(result + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v3;
  return result;
}

void sub_B1AA4(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 24);
  *(void *)(v1 + 24) = 0;
  if (v4) {
    operator delete();
  }
  kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::VectorwiseQuantizedMatrix<short>::Read(unsigned int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = kaldi::Matrix<float>::Matrix((uint64_t)v17, 1, *a1, 0, 0);
  kaldi::Matrix<float>::Read(v8, a2, a3, 0, a4);
  if (!v18)
  {
    *((void *)a1 + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
    operator new[]();
  }
  uint64_t v9 = v17[0];
  uint64_t v10 = *((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  *((void *)a1 + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v9;
  if (v10) {
    operator delete();
  }
  unsigned int v14 = 0;
  BOOL v15 = 0;
  uint64_t v16 = 0;
  kaldi::ReadIntegerVector<short>(a2, a3, (uint64_t)&v14, a4, (char *)a1 + 32, 0, 0);
  if (!*((void *)a1 + 4))
  {
    if ((int)a1[1] * (uint64_t)(int)*a1 == (v15 - v14) >> 1) {
      operator new[]();
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-quantized-matrix.cc", 611);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Quantized matrix improperly serialized", 38);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  uint64_t v11 = *((void *)a1 + 3);
  *((void *)a1 + 3) = 0;
  if (v11) {
    operator delete();
  }
  if (v14)
  {
    BOOL v15 = v14;
    operator delete(v14);
  }
  return kaldi::Matrix<float>::~Matrix((uint64_t)v17);
}

void sub_B1D00(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 - 112);
  if (v3)
  {
    *(void *)(v1 - 104) = v3;
    operator delete(v3);
  }
  kaldi::Matrix<float>::~Matrix(v1 - 88);
  _Unwind_Resume(a1);
}

uint64_t kaldi::VectorwiseQuantizedMatrix<short>::Write(unsigned int *a1, void *a2, int a3)
{
  uint64_t v6 = *((void *)a1 + 2);
  if (!v6) {
    uint64_t v6 = *((void *)a1 + 1);
  }
  kaldi::SubMatrix<float>::SubMatrix(v9, v6, 1, *a1, *a1);
  kaldi::MatrixBase<float>::Write(v9, a2, a3, a3);
  uint64_t v7 = *((void *)a1 + 4);
  if (!v7) {
    uint64_t v7 = *((void *)a1 + 3);
  }
  kaldi::WriteIntegerByteArray<short>(a2, a3, a3, (int)a1[1] * (uint64_t)(int)*a1, v7);
  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v9);
}

void sub_B1DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float kaldi::VectorwiseQuantizedMatrix<short>::Row@<S0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (!v5) {
    uint64_t v5 = *(void *)(a1 + 24);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6) {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  return kaldi::QuantizedSubVector<signed char>::QuantizedSubVector(a3, v5 + 2 * *(_DWORD *)(a1 + 4) * a2, *(_DWORD *)(a1 + 4), *(float *)(v6 + 4 * a2));
}

uint64_t kaldi::VectorwiseQuantizedMatrix<short>::AddMatMat(uint64_t a1, uint64_t a2, kaldi::ContextDependency *this, float a4)
{
  int v8 = kaldi::ContextDependency::ContextWidth(this);
  kaldi::Matrix<float>::Matrix(v17, this, 112);
  if (v8)
  {
    for (uint64_t i = 0; i != v8; ++i)
    {
      kaldi::MatrixBase<float>::Row((uint64_t)v17, i, v10, v16);
      kaldi::VectorwiseQuantizedMatrix<short>::Row(a1, i, (uint64_t)v15);
      kaldi::QuantizedVectorBase<short>::AddMatVec((uint64_t)v15, a2, (uint64_t)v16, a4, v12, v13);
    }
  }
  kaldi::MatrixBase<float>::CopyFromMat<float>((unsigned int *)this, (uint64_t)v17, 112, v9, v10);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v17);
}

void sub_B1EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<signed char>::shrink_to_fit(unint64_t *a1)
{
  uint64_t v1 = (char *)a1[1];
  unint64_t v2 = *a1;
  uint64_t v3 = &v1[-*a1];
  if (a1[2] - *a1 > (unint64_t)v3)
  {
    if (v1 == (char *)v2)
    {
      unint64_t v5 = (unint64_t)&v1[-*a1];
    }
    else
    {
      unint64_t v5 = (unint64_t)operator new((size_t)&v1[-*a1]);
      v3 += v5;
      uint64_t v6 = &v1[~v2];
      do
      {
        char v7 = *--v1;
        (v6--)[v5] = v7;
      }
      while (v1 != (char *)v2);
      unint64_t v2 = *a1;
    }
    *a1 = v5;
    a1[1] = (unint64_t)v3;
    a1[2] = (unint64_t)v3;
    if (v2)
    {
      operator delete((void *)v2);
    }
  }
}

void std::vector<signed char>::__append(unint64_t *a1, size_t a2)
{
  unint64_t v5 = (char *)a1[1];
  uint64_t v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    char v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    uint64_t v12 = &v7[v11];
    int v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      unsigned int v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      unint64_t v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void *std::vector<signed char>::__assign_with_size[abi:ne180100]<signed char *,signed char *>(void *result, char *__src, char *a3, unint64_t a4)
{
  char v7 = result;
  unint64_t v8 = result[2];
  unint64_t v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *char v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    double result = std::vector<signed char>::__vallocate[abi:ne180100](v7, v11);
    unint64_t v9 = (char *)v7[1];
    goto LABEL_17;
  }
  uint64_t v12 = (unsigned char *)result[1];
  size_t v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    size_t v16 = a3 - __src;
    if (v16) {
      double result = memmove(v9, __src, v16);
    }
    char v15 = &v9[v16];
    goto LABEL_20;
  }
  unsigned int v14 = &__src[v13];
  if (v12 != v9)
  {
    double result = memmove((void *)*result, __src, v13);
    unint64_t v9 = (char *)v7[1];
  }
  if (a3 != v14) {
    double result = memmove(v9, v14, a3 - v14);
  }
  char v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

char *std::vector<signed char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

uint64_t kaldi::WriteIntegerByteArray<signed char>(void *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    char v16 = 1;
    std::ostream::write();
    if (a4 != (int)a4) {
      kaldi::KaldiAssertFailure_((kaldi *)"WriteIntegerByteArray", "../subproject/libquasar/libkaldi/src/base/io-funcs-inl.h", &stru_B8.sectname[6], "static_cast<size_t>(vecsz) == count", v9);
    }
    if (a3) {
      int v10 = -(int)a4;
    }
    else {
      int v10 = a4;
    }
    int v15 = v10;
    uint64_t result = std::ostream::write();
    if (a4)
    {
      if (a3 && (fst::AlignOutput(a1) & 1) == 0)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14, "WriteIntegerByteArray", "../subproject/libquasar/libkaldi/src/base/io-funcs-inl.h", 196);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "Could not align output");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
      }
      uint64_t result = std::ostream::write();
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[ ", 2);
    for (; a4; --a4)
    {
      ++a5;
      uint64_t v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" ", 1);
    }
    uint64_t result = (uint64_t)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"]\n", 2);
  }
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Write failure in WriteIntegerType.");
  }
  return result;
}

void sub_B2410(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<short>::shrink_to_fit(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(char **)a1;
  unint64_t v5 = *(unsigned char **)(a1 + 8);
  unint64_t v6 = (v5 - v4) >> 1;
  if (v6 >= (v3 - (uint64_t)v4) >> 1) {
    return;
  }
  if (v5 == v4)
  {
    size_t v11 = 0;
    uint64_t v9 = 2 * v6;
    goto LABEL_8;
  }
  char v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<short>>(v2, v6);
  uint64_t v4 = *(char **)a1;
  unint64_t v8 = *(char **)(a1 + 8);
  uint64_t v9 = (uint64_t)&v7[2 * v6];
  size_t v11 = &v7[2 * v10];
  if (v8 == *(char **)a1)
  {
LABEL_8:
    uint64_t v12 = v9;
    goto LABEL_9;
  }
  uint64_t v12 = v9;
  do
  {
    __int16 v13 = *((_WORD *)v8 - 1);
    v8 -= 2;
    *(_WORD *)(v12 - std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v13;
    v12 -= 2;
  }
  while (v8 != v4);
LABEL_9:
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v11;
  if (v4)
  {
    operator delete(v4);
  }
}

void std::vector<short>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 2 * a2;
    }
  }
  else
  {
    std::vector<short>::__append((char **)a1, a2 - v2);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a2);
}

void std::vector<short>::__append(char **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  char v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    uint64_t v10 = a2 + (v9 >> 1);
    if (v10 < 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 1;
    unint64_t v12 = v5 - v8;
    if (v12 > v10) {
      uint64_t v10 = v12;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v10;
    }
    if (v13)
    {
      unsigned int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<short>>(v4, v13);
      unint64_t v8 = *a1;
      char v7 = a1[1];
    }
    else
    {
      unsigned int v14 = 0;
    }
    int v15 = &v14[2 * v11];
    char v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    int v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      __int16 v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

char *std::vector<short>::__assign_with_size[abi:ne180100]<short *,short *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  char v7 = result;
  unint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (uint64_t)(v8 - *(void *)result) >> 1)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *char v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    if (v8 <= a4) {
      unint64_t v10 = a4;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v8 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v11 = v10;
    }
    uint64_t result = std::vector<short>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_17:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      __int16 v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  unint64_t v12 = (void **)(result + 8);
  unsigned int v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 1;
  if (v15 >= a4) {
    goto LABEL_17;
  }
  char v16 = &__src[2 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    __int16 v18 = v9;
    uint64_t v19 = v16;
LABEL_19:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_20:
  void *v12 = &v9[v17];
  return result;
}

char *std::vector<short>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<short>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

uint64_t kaldi::WriteIntegerByteArray<short>(void *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    char v16 = 2;
    std::ostream::write();
    if (a4 != (int)a4) {
      kaldi::KaldiAssertFailure_((kaldi *)"WriteIntegerByteArray", "../subproject/libquasar/libkaldi/src/base/io-funcs-inl.h", &stru_B8.sectname[6], "static_cast<size_t>(vecsz) == count", v9);
    }
    if (a3) {
      int v10 = -(int)a4;
    }
    else {
      int v10 = a4;
    }
    int v15 = v10;
    uint64_t result = std::ostream::write();
    if (a4)
    {
      if (a3 && (fst::AlignOutput(a1) & 1) == 0)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14, "WriteIntegerByteArray", "../subproject/libquasar/libkaldi/src/base/io-funcs-inl.h", 196);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "Could not align output");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
      }
      uint64_t result = std::ostream::write();
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[ ", 2);
    for (; a4; --a4)
    {
      a5 += 2;
      unint64_t v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" ", 1);
    }
    uint64_t result = (uint64_t)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"]\n", 2);
  }
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Write failure in WriteIntegerType.");
  }
  return result;
}

void sub_B2970(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_2()
{
}

uint64_t kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result) {
    OUTLINED_FUNCTION_0_2();
  }
  return result;
}

float kaldi::QuantizedSubVector<signed char>::QuantizedSubVector(uint64_t a1, uint64_t a2, int a3, float a4)
{
  *(_DWORD *)(a1 + 8) = a3;
  *(void *)a1 = a2;
  float result = 1.0 / a4;
  *(float *)(a1 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = result;
  return result;
}

void kaldi::QuantizedVectorBase<signed char>::AddMatVec(uint64_t a1, uint64_t a2, uint64_t a3, float a4, uint64_t a5, const char *a6)
{
  if (a4 != 1.0) {
    kaldi::VectorBase<float>::Scale(a3, a4);
  }
  unint64_t v41 = *(int *)(a3 + 8);
  unint64_t v9 = 0;
  if ((v41 & 0xFFFFFFFFFFFFFFFCLL) != 0)
  {
    do
    {
      if (*(_DWORD *)(a2 + 12) <= v9) {
        kaldi::KaldiAssertFailure_((kaldi *)"RowData", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", &stru_68.segname[6], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", a6);
      }
      int v10 = (float32x4_t *)(*(void *)a2 + 4 * *(_DWORD *)(a2 + 16) * (int)v9);
      int v11 = fst::StateOrderQueue<int>::Head_(a2);
      unint64_t v12 = *(char **)a1;
      unint64_t v13 = *(int *)(a1 + 8);
      unint64_t v14 = v13 & 0xFFFFFFFFFFFFFFF8;
      if ((v13 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        unint64_t v15 = 0;
        float32x4_t v16 = 0uLL;
        float32x4_t v17 = 0uLL;
        float32x4_t v18 = 0uLL;
        float32x4_t v19 = 0uLL;
        float32x4_t v20 = 0uLL;
        float32x4_t v21 = 0uLL;
        float32x4_t v22 = 0uLL;
        float32x4_t v23 = 0uLL;
        do
        {
          int8x8_t v24 = *(int8x8_t *)&v12[v15];
          float32x4_t v25 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v24, *(int8x8_t *)v22.f32), 8uLL), 8uLL)));
          float32x4_t v26 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v24, *(int8x8_t *)v22.f32), 8uLL), 8uLL)));
          float32x4_t v23 = vmlaq_f32(v23, v26, v10[1]);
          float32x4_t v22 = vmlaq_f32(v22, v25, *v10);
          float32x4_t v21 = vmlaq_f32(v21, v26, *(float32x4_t *)((char *)v10 + 4 * v11 + 16));
          float32x4_t v20 = vmlaq_f32(v20, v25, *(float32x4_t *)((char *)v10 + 4 * v11));
          float32x4_t v19 = vmlaq_f32(v19, v26, *(float32x4_t *)((char *)v10 + 8 * v11 + 16));
          float32x4_t v18 = vmlaq_f32(v18, v25, *(float32x4_t *)((char *)v10 + 8 * v11));
          float32x4_t v17 = vmlaq_f32(v17, v26, *(float32x4_t *)((char *)v10 + 12 * v11 + 16));
          float32x4_t v16 = vmlaq_f32(v16, v25, *(float32x4_t *)((char *)v10 + 12 * v11));
          v10 += 2;
          v15 += 8;
        }
        while (v15 < v14);
        unint64_t v14 = ((v14 - 1) & 0xFFFFFFFFFFFFFFF8) + 8;
        v12 += v15;
      }
      else
      {
        float32x4_t v22 = 0uLL;
        float32x4_t v23 = 0uLL;
        float32x4_t v20 = 0uLL;
        float32x4_t v21 = 0uLL;
        float32x4_t v18 = 0uLL;
        float32x4_t v19 = 0uLL;
        float32x4_t v16 = 0uLL;
        float32x4_t v17 = 0uLL;
      }
      uint64_t v27 = 0;
      __int16 v28 = (float *)(*(void *)a3 + 4 * v9);
      float v29 = *(float *)(a1 + 12);
      float v30 = 0.0;
      float v31 = 0.0;
      float v32 = 0.0;
      float v33 = 0.0;
      do
      {
        v45[0] = v22;
        v45[1] = v23;
        uint64_t v34 = 4 * (v27 & 7);
        float v33 = *(float *)((char *)v45 + v34) + v33;
        v44[0] = v20;
        v44[1] = v21;
        float v32 = *(float *)((char *)v44 + v34) + v32;
        v43[0] = v18;
        v43[1] = v19;
        float v31 = *(float *)((char *)v43 + v34) + v31;
        v42[0] = v16;
        v42[1] = v17;
        float v30 = v30 + *(float *)((char *)v42 + v34);
        ++v27;
      }
      while (v27 != 8);
      BOOL v35 = v13 > v14;
      unint64_t v36 = v13 - v14;
      if (v35)
      {
        do
        {
          int v37 = *v12++;
          float v33 = v33 + (float)(v10->f32[0] * (float)v37);
          float v32 = v32 + (float)(v10->f32[v11] * (float)v37);
          float v31 = v31 + (float)(v10->f32[2 * v11] * (float)v37);
          float v30 = v30 + (float)(v10->f32[3 * v11] * (float)v37);
          int v10 = (float32x4_t *)((char *)v10 + 4);
          --v36;
        }
        while (v36);
      }
      float v38 = v28[1] + (float)(v32 * v29);
      float *v28 = *v28 + (float)(v33 * v29);
      v28[1] = v38;
      float v39 = v28[3] + (float)(v30 * v29);
      v28[2] = v28[2] + (float)(v31 * v29);
      v28[3] = v39;
      v9 += 4;
    }
    while (v9 < (v41 & 0xFFFFFFFFFFFFFFFCLL));
  }
  if (v9 < v41)
  {
    uint64_t v40 = 4 * v9;
    do
    {
      kaldi::MatrixBase<float>::Row(a2, v9, a6, (uint64_t *)&v46);
      kaldi::VecVecOne<signed char>(v46, *(char **)a1, (float *)(*(void *)a3 + v40), *(int *)(a1 + 8), *(float *)(a1 + 12));
      ++v9;
      v40 += 4;
    }
    while (v41 != v9);
  }
}

float kaldi::VecVecOne<signed char>(float32x4_t *a1, char *a2, float *a3, unint64_t a4, float a5)
{
  unint64_t v5 = a4 & 0xFFFFFFFFFFFFFFF0;
  if ((a4 & 0xFFFFFFFFFFFFFFF0) != 0)
  {
    unint64_t v6 = 0;
    float32x4_t v7 = 0uLL;
    float32x4_t v8 = 0uLL;
    float32x4_t v9 = 0uLL;
    float32x4_t v10 = 0uLL;
    do
    {
      int8x16_t v11 = *(int8x16_t *)&a2[v6];
      int16x8_t v12 = vmovl_s8(*(int8x8_t *)v11.i8);
      int16x8_t v13 = vmovl_high_s8(v11);
      float32x4_t v7 = vmlaq_f32(v7, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v12.i8)), *a1);
      float32x4_t v8 = vmlaq_f32(v8, vcvtq_f32_s32(vmovl_high_s16(v12)), a1[1]);
      float32x4_t v9 = vmlaq_f32(v9, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v13.i8)), a1[2]);
      float32x4_t v10 = vmlaq_f32(v10, vcvtq_f32_s32(vmovl_high_s16(v13)), a1[3]);
      a1 += 4;
      v6 += 16;
    }
    while (v6 < v5);
    unint64_t v5 = ((v5 - 1) & 0xFFFFFFFFFFFFFFF0) + 16;
    a2 += v6;
  }
  else
  {
    float32x4_t v10 = 0uLL;
    float32x4_t v9 = 0uLL;
    float32x4_t v8 = 0uLL;
    float32x4_t v7 = 0uLL;
  }
  float v14 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1), vaddq_f32(v10, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1), vaddq_f32(v9, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2),
                            vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1), vaddq_f32(v8, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1)))))))))))))))).f32[0]+ 0.0;
  uint64_t v15 = a4 - v5;
  if (a4 > v5)
  {
    do
    {
      float v16 = a1->f32[0];
      a1 = (float32x4_t *)((char *)a1 + 4);
      float v17 = v16;
      int v18 = *a2++;
      float v14 = v14 + (float)(v17 * (float)v18);
      --v15;
    }
    while (v15);
  }
  float result = *a3 + (float)(v14 * a5);
  *a3 = result;
  return result;
}

float kaldi::QuantizedVectorBase<signed char>::VecVec(uint64_t a1, float32x4_t **a2)
{
  float v3 = 0.0;
  kaldi::VecVecOne<signed char>(*a2, *(char **)a1, &v3, *(int *)(a1 + 8), *(float *)(a1 + 12));
  return v3;
}

void kaldi::QuantizedVectorBase<short>::AddMatVec(uint64_t a1, uint64_t a2, uint64_t a3, float a4, uint64_t a5, const char *a6)
{
  if (a4 != 1.0) {
    kaldi::VectorBase<float>::Scale(a3, a4);
  }
  unint64_t v9 = *(int *)(a3 + 8);
  unint64_t v10 = 0;
  if ((v9 & 0xFFFFFFFFFFFFFFFCLL) != 0)
  {
    do
    {
      if (*(_DWORD *)(a2 + 12) <= v10) {
        kaldi::KaldiAssertFailure_((kaldi *)"RowData", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", &stru_68.segname[6], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", a6);
      }
      int8x16_t v11 = (_OWORD *)(*(void *)a2 + 4 * *(_DWORD *)(a2 + 16) * (int)v10);
      int v12 = fst::StateOrderQueue<int>::Head_(a2);
      int16x8_t v13 = *(int16x8_t **)a1;
      unint64_t v14 = *(int *)(a1 + 8);
      unint64_t v15 = v14 & 0xFFFFFFFFFFFFFFF8;
      if ((v14 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        unint64_t v16 = 0;
        uint64_t v17 = v12;
        uint64_t v18 = 4 * v12;
        uint64_t v19 = 12 * v12;
        uint64_t v20 = 8 * v12;
        float32x4_t v21 = 0uLL;
        float32x4_t v22 = 0uLL;
        float32x4_t v23 = 0uLL;
        float32x4_t v24 = 0uLL;
        do
        {
          float32x4_t v25 = (float32x4_t *)((char *)v11 + v18);
          float32x4_t v26 = (float32x4_t *)((char *)v11 + v19);
          int16x8_t v27 = *v13++;
          __int16 v28 = (float32x4_t *)((char *)v11 + v20);
          float32x4_t v29 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v27.i8));
          float32x4_t v30 = vcvtq_f32_s32(vmovl_high_s16(v27));
          float32x4_t v31 = *(float32x4_t *)v11;
          float32x4_t v32 = *((float32x4_t *)v11 + 1);
          v11 += 2;
          float32x4_t v21 = vmlaq_f32(vmlaq_f32(v21, v29, v31), v30, v32);
          float32x4_t v22 = vmlaq_f32(vmlaq_f32(v22, v29, *v25), v30, v25[1]);
          float32x4_t v23 = vmlaq_f32(vmlaq_f32(v23, v29, *v28), v30, v28[1]);
          float32x4_t v24 = vmlaq_f32(vmlaq_f32(v24, v29, *v26), v30, v26[1]);
          v16 += 8;
        }
        while (v16 < v15);
        unint64_t v33 = ((v15 - 1) & 0xFFFFFFFFFFFFFFF8) + 8;
        uint64_t v34 = (__int32 *)v11 + v17;
        BOOL v35 = (__int32 *)v11 + 2 * v17;
        unint64_t v36 = (__int32 *)v11 + 3 * (int)v17;
      }
      else
      {
        unint64_t v33 = 0;
        uint64_t v34 = (__int32 *)v11 + v12;
        unint64_t v36 = (__int32 *)v11 + 3 * v12;
        float32x4_t v24 = 0uLL;
        float32x4_t v23 = 0uLL;
        float32x4_t v22 = 0uLL;
        float32x4_t v21 = 0uLL;
        BOOL v35 = (__int32 *)v11 + 2 * v12;
      }
      int32x4_t v37 = vzip1q_s32((int32x4_t)v21, (int32x4_t)v22);
      int32x4_t v38 = vzip2q_s32((int32x4_t)v21, (int32x4_t)v22);
      int32x4_t v39 = vzip1q_s32((int32x4_t)v23, (int32x4_t)v24);
      int32x4_t v40 = vzip2q_s32((int32x4_t)v23, (int32x4_t)v24);
      int32x4_t v41 = (int32x4_t)vaddq_f32(vaddq_f32((float32x4_t)vzip1q_s32(v37, v39), (float32x4_t)vzip2q_s32(v37, v39)), vaddq_f32((float32x4_t)vzip1q_s32(v38, v40), (float32x4_t)vzip2q_s32(v38, v40)));
      float32x4_t v42 = (float32x4_t)vuzp1q_s32(v41, vrev64q_s32(v41));
      BOOL v43 = v14 > v33;
      unint64_t v44 = v14 - v33;
      if (v43)
      {
        do
        {
          int v46 = v13->i16[0];
          int16x8_t v13 = (int16x8_t *)((char *)v13 + 2);
          int v45 = v46;
          __int32 v47 = *(_DWORD *)v11;
          int8x16_t v11 = (_OWORD *)((char *)v11 + 4);
          v48.i32[0] = v47;
          __int32 v49 = *v36++;
          v48.i32[1] = *v34++;
          v48.i32[2] = *v35++;
          v48.i32[3] = v49;
          float32x4_t v42 = vmlaq_n_f32(v42, v48, (float)v45);
          --v44;
        }
        while (v44);
      }
      *(float32x4_t *)(*(void *)a3 + 4 * v10) = vmlaq_n_f32(*(float32x4_t *)(*(void *)a3 + 4 * v10), v42, *(float *)(a1 + 12));
      v10 += 4;
    }
    while (v10 < (v9 & 0xFFFFFFFFFFFFFFFCLL));
  }
  if (v10 < v9)
  {
    uint64_t v50 = 4 * v10;
    do
    {
      kaldi::MatrixBase<float>::Row(a2, v10, a6, v51);
      kaldi::VecVecOne<short>((_OWORD *)v51[0], *(int16x8_t **)a1, (float *)(*(void *)a3 + v50), *(int *)(a1 + 8), *(float *)(a1 + 12));
      ++v10;
      v50 += 4;
    }
    while (v9 != v10);
  }
}

float kaldi::VecVecOne<short>(_OWORD *a1, int16x8_t *a2, float *a3, unint64_t a4, float a5)
{
  unint64_t v5 = a4 & 0xFFFFFFFFFFFFFFF8;
  if ((a4 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    unint64_t v6 = 0;
    float32x4_t v7 = 0uLL;
    do
    {
      float32x4_t v8 = *(float32x4_t *)a1;
      float32x4_t v9 = *((float32x4_t *)a1 + 1);
      a1 += 2;
      int16x8_t v10 = *a2++;
      float32x4_t v7 = vmlaq_f32(vmlaq_f32(v7, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v10.i8)), v8), vcvtq_f32_s32(vmovl_high_s16(v10)), v9);
      v6 += 8;
    }
    while (v6 < v5);
    unint64_t v5 = ((v5 - 1) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  else
  {
    float32x4_t v7 = 0uLL;
  }
  LODWORD(v11) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1)))).u32[0];
  BOOL v12 = a4 >= v5;
  unint64_t v13 = a4 - v5;
  if (v13 != 0 && v12)
  {
    do
    {
      float v14 = *(float *)a1;
      a1 = (_OWORD *)((char *)a1 + 4);
      float v15 = v14;
      int v16 = a2->i16[0];
      a2 = (int16x8_t *)((char *)a2 + 2);
      float v11 = v11 + (float)(v15 * (float)v16);
      --v13;
    }
    while (v13);
  }
  float result = *a3 + (float)(v11 * a5);
  *a3 = result;
  return result;
}

float kaldi::QuantizedVectorBase<short>::VecVec(uint64_t a1, _OWORD **a2)
{
  float v3 = 0.0;
  kaldi::VecVecOne<short>(*a2, *(int16x8_t **)a1, &v3, *(int *)(a1 + 8), *(float *)(a1 + 12));
  return v3;
}

float kaldi::VecVec<signed char>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"VecVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)&stru_20.nsects + 3, "a.Dim() == b.Dim()", a5);
  }

  return kaldi::QuantizedVectorBase<signed char>::VecVec(a2, (float32x4_t **)a1);
}

float kaldi::VecVec<short>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"VecVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)&stru_20.nsects + 3, "a.Dim() == b.Dim()", a5);
  }

  return kaldi::QuantizedVectorBase<short>::VecVec(a2, (_OWORD **)a1);
}

float kaldi::VectorBase<float>::CopyFromVec<double>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  if (v5 != *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyFromVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)&stru_108.reserved2 + 1, "dim_ == other.Dim()", a5);
  }
  if ((int)v5 >= 1)
  {
    unint64_t v6 = *(float **)a1;
    float32x4_t v7 = *(double **)a2;
    do
    {
      double v8 = *v7++;
      float result = v8;
      *v6++ = result;
      --v5;
    }
    while (v5);
  }
  return result;
}

void *kaldi::VectorBase<float>::CopyFromVec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(int *)(a1 + 8);
  if (v5 != *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyFromVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)&stru_108.addr + 2, "Dim() == v.Dim()", a5);
  }
  float result = *(void **)a1;
  float32x4_t v7 = *(const void **)a2;
  if (result != v7)
  {
    return memcpy(result, v7, 4 * v5);
  }
  return result;
}

void *kaldi::VectorBase<double>::CopyFromVec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(int *)(a1 + 8);
  if (v5 != *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyFromVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)&stru_108.addr + 2, "Dim() == v.Dim()", a5);
  }
  float result = *(void **)a1;
  float32x4_t v7 = *(const void **)a2;
  if (result != v7)
  {
    return memcpy(result, v7, 8 * v5);
  }
  return result;
}

double kaldi::VectorBase<double>::CopyFromVec<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  if (v5 != *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyFromVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)&stru_108.reserved2 + 1, "dim_ == other.Dim()", a5);
  }
  if ((int)v5 >= 1)
  {
    unint64_t v6 = *(double **)a1;
    float32x4_t v7 = *(float **)a2;
    do
    {
      float v8 = *v7++;
      double result = v8;
      *v6++ = v8;
      --v5;
    }
    while (v5);
  }
  return result;
}

void kaldi::VectorBase<float>::CopyRowsFromMat<signed char>(uint64_t *a1, unsigned int *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2);
  if (v4 != kaldi::QuantizedMatrixBase<short>::NumRows(a2) * v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyRowsFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)&stru_1A8.addr + 3, "dim_ == mat.NumCols() * mat.NumRows()", v6);
  }
  uint64_t v7 = *a1;
  int v8 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2);
  int v9 = kaldi::QuantizedMatrixBase<short>::NumRows(a2);
  if (v9 >= 1)
  {
    int v12 = v9;
    for (unsigned int i = 0; i != v12; ++i)
    {
      if (v8 >= 1)
      {
        for (uint64_t j = 0; j != v8; ++j)
          *(float *)(v7 + 4 * j) = kaldi::QuantizedMatrixBase<signed char>::operator()((uint64_t)a2, i, j, v10, v11);
      }
      v7 += 4 * v8;
    }
  }
}

void kaldi::VectorBase<float>::CopyRowsFromMat<short>(uint64_t *a1, unsigned int *a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2);
  if (v4 != kaldi::QuantizedMatrixBase<short>::NumRows(a2) * v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyRowsFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)&stru_1A8.addr + 3, "dim_ == mat.NumCols() * mat.NumRows()", v6);
  }
  uint64_t v7 = *a1;
  int v8 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2);
  int v9 = kaldi::QuantizedMatrixBase<short>::NumRows(a2);
  if (v9 >= 1)
  {
    int v12 = v9;
    for (unsigned int i = 0; i != v12; ++i)
    {
      if (v8 >= 1)
      {
        for (uint64_t j = 0; j != v8; ++j)
          *(float *)(v7 + 4 * j) = kaldi::QuantizedMatrixBase<short>::operator()((uint64_t)a2, i, j, v10, v11);
      }
      v7 += 4 * v8;
    }
  }
}

void kaldi::VectorBase<float>::CopyColFromMat<float>(uint64_t a1, kaldi::ContextDependency *this, signed int a3)
{
  if ((int)kaldi::ContextDependency::ContextWidth(this) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyColFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)&stru_2E8.size + 2, "col < mat.NumCols()", v6);
  }
  int v7 = *(_DWORD *)(a1 + 8);
  if (v7 != kaldi::ContextDependency::CentralPosition(this)) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyColFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)&stru_2E8.size + 3, "dim_ == mat.NumRows()", v9);
  }
  if (*(int *)(a1 + 8) >= 1)
  {
    uint64_t v10 = 0;
    do
    {
      *(float *)(*(void *)a1 + 4 * v10) = kaldi::MatrixBase<float>::operator()((uint64_t)this, v10, a3, v8, v9);
      ++v10;
    }
    while (v10 < *(int *)(a1 + 8));
  }
}

void kaldi::VectorBase<float>::AddMatVec(uint64_t a1, kaldi::ContextDependency *this, CBLAS_TRANSPOSE a3, uint64_t a4, const char *a5, float a6, float a7)
{
  if (a3 == CblasTrans)
  {
    if (kaldi::ContextDependency::CentralPosition(this) != *(_DWORD *)(a4 + 8)) {
      goto LABEL_10;
    }
    int v13 = kaldi::ContextDependency::ContextWidth(this);
  }
  else
  {
    if (a3 != CblasNoTrans || kaldi::ContextDependency::ContextWidth(this) != *(_DWORD *)(a4 + 8)) {
LABEL_10:
    }
      kaldi::KaldiAssertFailure_((kaldi *)"AddMatVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)&stru_68.addr + 1, "(trans == kNoTrans && M.NumCols() == v.dim_ && M.NumRows() == dim_) || (trans == kTrans && M.NumRows() == v.dim_ && M.NumCols() == dim_)", a5);
    int v13 = kaldi::ContextDependency::CentralPosition(this);
  }
  if (v13 != *(_DWORD *)(a1 + 8)) {
    goto LABEL_10;
  }
  if (a4 == a1) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)&stru_68.addr + 2, "&v != this", a5);
  }
  int v14 = kaldi::ContextDependency::CentralPosition(this);
  int v15 = kaldi::ContextDependency::ContextWidth(this);
  int v16 = *(const float **)this;
  int v17 = fst::StateOrderQueue<int>::Head_((uint64_t)this);
  cblas_sgemv(CblasRowMajor, a3, v14, v15, a6, v16, v17, *(const float **)a4, 1, a7, *(float **)a1, 1);
}

void kaldi::Vector<float>::Resize(void **a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  int v5 = a2;
  if (a3 == 2)
  {
    int v7 = 0;
    uint64_t v8 = (char *)*a1;
    if (a2 && v8)
    {
      if (*((_DWORD *)a1 + 3) >= (int)a2)
      {
        uint64_t v14 = *((int *)a1 + 2);
        if ((int)a2 > (int)v14) {
          bzero(&v8[4 * v14], 4 * ((int)a2 - (int)v14));
        }
        *((_DWORD *)a1 + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v5;
      }
      else
      {
        __dst = 0;
        float32x4_t v21 = 0;
        uint64_t v22 = 0;
        kaldi::Vector<float>::Resize(&__dst, a2, 1);
        uint64_t v9 = *((int *)a1 + 2);
        uint64_t v10 = (char *)*a1;
        if ((int)v9 >= v5)
        {
          memcpy(__dst, v10, 4 * v5);
        }
        else
        {
          memcpy(__dst, v10, 4 * v9);
          bzero((char *)__dst + 4 * *((int *)a1 + 2), 4 * (v5 - *((_DWORD *)a1 + 2)));
        }
        int v15 = (char *)__dst;
        __dst = *a1;
        int v16 = __dst;
        *a1 = v15;
        int v17 = v21;
        float32x4_t v21 = (char *)a1[1];
        a1[1] = v17;
        if (v16) {
          free(v16);
        }
      }
      return;
    }
LABEL_12:
    if (!v8) {
      goto LABEL_22;
    }
LABEL_13:
    if (*((_DWORD *)a1 + 3) >= (int)a2)
    {
      *((_DWORD *)a1 + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
    }
    else if (*((_DWORD *)a1 + 2) != a2)
    {
      free(v8);
      *a1 = 0;
      a1[1] = 0;
      goto LABEL_22;
    }
    if (!v7)
    {
      size_t v11 = 4 * (int)a2;
      bzero(v8, v11);
    }
    return;
  }
  int v7 = a3;
  if (a3 != 3)
  {
    uint64_t v8 = (char *)*a1;
    goto LABEL_12;
  }
  uint64_t v8 = (char *)*a1;
  if (*a1)
  {
    if (*((_DWORD *)a1 + 2) == a2) {
      return;
    }
    int v7 = 0;
    goto LABEL_13;
  }
  int v7 = 0;
LABEL_22:
  if (v5 < 0) {
    kaldi::KaldiAssertFailure_((kaldi *)"Init", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)&stru_B8.addr + 4, "dim >= 0", a5);
  }
  if (v5)
  {
    __dst = 0;
    if (malloc_type_posix_memalign(&__dst, 0x10uLL, 4 * v5, 0x12C09453uLL) || (int v12 = __dst) == 0)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      uint64_t v19 = std::bad_alloc::bad_alloc(exception);
    }
    *a1 = __dst;
    *((_DWORD *)a1 + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v5;
    *((_DWORD *)a1 + 3) = v5;
    size_t v13 = 4 * v5;
    if (!v7) {
      goto LABEL_29;
    }
  }
  else
  {
    size_t v13 = 0;
    int v12 = 0;
    *a1 = 0;
    a1[1] = 0;
    if (!v7) {
LABEL_29:
    }
      bzero(v12, v13);
  }
}

void kaldi::Vector<float>::Destroy(uint64_t a1)
{
  unint64_t v2 = *(void **)a1;
  if (v2) {
    free(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
}

void kaldi::Vector<float>::Read(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (a4)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 8);
    uint64_t v94 = 0;
    uint64_t v95 = 0;
    char v93 = 0;
    kaldi::Vector<float>::Resize(&v93, v8, 0, a4, a5);
    kaldi::Vector<float>::Read(&v93, a2, a3, 0);
    int v12 = *(_DWORD *)(a1 + 8);
    if (!v12)
    {
      kaldi::Vector<float>::Resize((void **)a1, v94, 0, v10, v11);
      int v12 = *(_DWORD *)(a1 + 8);
    }
    if (v12 != v94)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v99, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 1375);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v99, (uint64_t)"Vector<Real>::Read, adding but dimensions mismatch ", 51);
      uint64_t v81 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)" vs. ", 5);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v99);
    }
    kaldi::VectorBase<float>::AddVec<float>(a1, (uint64_t)&v93, 1.0, v9, v10, v11);
    if (v93) {
      free(v93);
    }
    return;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v93);
  std::istream::tellg();
  if (a3)
  {
    if (kaldi::Peek(a2, 1) == 68)
    {
      uint64_t v15 = *(unsigned int *)(a1 + 8);
      uint64_t v100 = 0;
      uint64_t v101 = 0;
      v99 = 0;
      kaldi::Vector<double>::Resize(&v99, v15, 0, v13, v14);
      kaldi::Vector<double>::Read((uint64_t)&v99, a2, 1, 0, v16);
      if (*(_DWORD *)(a1 + 8) != v100) {
        kaldi::Vector<float>::Resize((void **)a1, v100, 0, v18, v19);
      }
      kaldi::VectorBase<float>::CopyFromVec<double>(a1, (uint64_t)&v99, v17, v18, v19);
      if (v99) {
        free(v99);
      }
      goto LABEL_45;
    }
    v99 = 0;
    uint64_t v100 = 0;
    uint64_t v101 = 0;
    kaldi::ReadToken(a2, 1, (uint64_t)&v99, v13, v14);
    if (SHIBYTE(v101) < 0)
    {
      if (v100 != 2) {
        goto LABEL_33;
      }
      float32x4_t v24 = (void **)v99;
    }
    else
    {
      if (SHIBYTE(v101) != 2) {
        goto LABEL_33;
      }
      float32x4_t v24 = &v99;
    }
    if (*(_WORD *)v24 == 22086)
    {
      LODWORD(v98.__r_.__value_.__l.__data_) = 0;
      kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v98, v22, v23);
      int data = (int)v98.__r_.__value_.__l.__data_;
      if (LODWORD(v98.__r_.__value_.__l.__data_) != *(_DWORD *)(a1 + 8))
      {
        kaldi::Vector<float>::Resize((void **)a1, LODWORD(v98.__r_.__value_.__l.__data_), 0, v35, v36);
        int data = (int)v98.__r_.__value_.__l.__data_;
      }
      if (data >= 1) {
        std::istream::read();
      }
      if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) == 0)
      {
        int v20 = 1;
LABEL_41:
        if (SHIBYTE(v101) < 0)
        {
          float32x4_t v21 = v99;
LABEL_43:
          operator delete(v21);
        }
        goto LABEL_44;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93, (uint64_t)"Error reading vector data (binary mode); truncated stream? (std::string::size_type size = ",
        67);
      int32x4_t v38 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)")", 1);
LABEL_40:
      int v20 = 2;
      goto LABEL_41;
    }
LABEL_33:
    float32x4_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93, (uint64_t)": Expected token ", 17);
    float32x4_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"FV", 2);
    float32x4_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)", got ", 6);
    if (v101 >= 0) {
      unint64_t v33 = &v99;
    }
    else {
      unint64_t v33 = (void **)v99;
    }
    if (v101 >= 0) {
      uint64_t v34 = HIBYTE(v101);
    }
    else {
      uint64_t v34 = v100;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v33, v34);
    goto LABEL_40;
  }
  memset(&v98, 0, sizeof(v98));
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v98);
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93, (uint64_t)"EOF while trying to read vector.", 32);
LABEL_15:
    int v20 = 2;
    goto LABEL_16;
  }
  if (!std::string::compare(&v98, "[]"))
  {
    kaldi::Vector<float>::Resize((void **)a1, 0, 0, v25, v26);
    int v20 = 1;
    goto LABEL_16;
  }
  if (std::string::compare(&v98, "["))
  {
    int16x8_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93, (uint64_t)"Expected \"[\" but got ", 21);
    if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v28 = &v98;
    }
    else {
      __int16 v28 = (std::string *)v98.__r_.__value_.__r.__words[0];
    }
    if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v98.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v98.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, size);
    goto LABEL_15;
  }
  int32x4_t v39 = a2 + 4;
  std::string v90 = 0;
  long long v91 = 0;
  uint64_t v87 = 22;
  char v88 = "Failed to read number.";
  long long v92 = 0;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        int v40 = std::istream::peek();
        if ((v40 - 48) > 9) {
          break;
        }
        LODWORD(v99) = 0;
        std::istream::operator>>();
        if ((*((unsigned char *)v39 + *(void *)(*a2 - 24)) & 5) != 0) {
          goto LABEL_142;
        }
        unsigned int v41 = std::istream::peek();
        if (v41 <= 0x7F)
        {
          if ((_DefaultRuneLocale.__runetype[v41] & 0x4000) != 0) {
            goto LABEL_71;
          }
        }
        else if (__maskrune(v41, 0x4000uLL))
        {
          goto LABEL_71;
        }
        if (std::istream::peek() != 93)
        {
          uint64_t v87 = 33;
          char v88 = "Expected whitespace after number.";
          goto LABEL_142;
        }
LABEL_71:
        unint64_t v44 = v91;
        if (v91 >= v92)
        {
          int v46 = (char *)v90;
          uint64_t v47 = (v91 - (unsigned char *)v90) >> 2;
          unint64_t v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v49 = v92 - (unsigned char *)v90;
          if ((v92 - (unsigned char *)v90) >> 1 > v48) {
            unint64_t v48 = v49 >> 1;
          }
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v50 = v48;
          }
          if (v50)
          {
            uint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v92, v50);
            int v46 = (char *)v90;
            unint64_t v44 = v91;
          }
          else
          {
            uint64_t v51 = 0;
          }
          uint64_t v52 = &v51[4 * v47];
          *(_DWORD *)uint64_t v52 = v99;
          int v45 = v52 + 4;
          while (v44 != v46)
          {
            int v53 = *((_DWORD *)v44 - 1);
            v44 -= 4;
            *((_DWORD *)v52 - 1) = v53;
            v52 -= 4;
          }
          std::string v90 = v52;
          long long v91 = v45;
          long long v92 = &v51[4 * v50];
          if (v46) {
            operator delete(v46);
          }
        }
        else
        {
          *(_DWORD *)long long v91 = v99;
          int v45 = v44 + 4;
        }
        long long v91 = v45;
      }
      if (v40 > 31) {
        break;
      }
      if (v40 > 9)
      {
        if (v40 == 10 || v40 == 13)
        {
          uint64_t v68 = "Newline found while reading vector (maybe it's a matrix?)";
          uint64_t v69 = 57;
LABEL_158:
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93, (uint64_t)v68, v69);
          goto LABEL_159;
        }
LABEL_100:
        std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v98);
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type v56 = (std::string *)v98.__r_.__value_.__r.__words[0];
          if (!strcasecmp(v98.__r_.__value_.__l.__data_, "inf")) {
            goto LABEL_109;
          }
          std::string::size_type v57 = v56;
        }
        else
        {
          if (!strcasecmp((const char *)&v98, "inf")) {
            goto LABEL_109;
          }
          std::string::size_type v56 = &v98;
          std::string::size_type v57 = &v98;
        }
        if (!strcasecmp((const char *)v57, "infinity"))
        {
LABEL_109:
          v58 = v91;
          if (v91 >= v92)
          {
            size_t v60 = (char *)v90;
            uint64_t v61 = (v91 - (unsigned char *)v90) >> 2;
            unint64_t v62 = v61 + 1;
            if ((unint64_t)(v61 + 1) >> 62) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v63 = v92 - (unsigned char *)v90;
            if ((v92 - (unsigned char *)v90) >> 1 > v62) {
              unint64_t v62 = v63 >> 1;
            }
            if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v64 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v64 = v62;
            }
            if (v64)
            {
              size_t v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v92, v64);
              size_t v60 = (char *)v90;
              v58 = v91;
            }
            else
            {
              size_t v65 = 0;
            }
            size_t v66 = &v65[4 * v61];
            *(_DWORD *)size_t v66 = 2139095040;
            v59 = v66 + 4;
            while (v58 != v60)
            {
              int v67 = *((_DWORD *)v58 - 1);
              v58 -= 4;
              *((_DWORD *)v66 - 1) = v67;
              v66 -= 4;
            }
            std::string v90 = v66;
            long long v91 = v59;
            long long v92 = &v65[4 * v64];
            if (v60) {
              operator delete(v60);
            }
          }
          else
          {
            *(_DWORD *)long long v91 = 2139095040;
            v59 = v58 + 4;
          }
          long long v91 = v59;
          if (kaldi::g_kaldi_verbose_level >= -1)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v99, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 1493);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v99, (uint64_t)"Reading infinite value into vector.", 35);
            kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v99);
          }
        }
        else
        {
          if (strcasecmp((const char *)v56, "nan")) {
            goto LABEL_162;
          }
          LODWORD(v99) = 2143289344;
          std::vector<float>::push_back[abi:ne180100]((uint64_t)&v90, &v99);
          if (kaldi::g_kaldi_verbose_level >= -1)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v99, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 1496);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v99, (uint64_t)"Reading NaN value into vector.", 30);
            kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v99);
          }
        }
      }
      else
      {
        if (v40 != 9)
        {
          if (v40 == -1)
          {
            uint64_t v68 = "EOF while reading vector data.";
            uint64_t v69 = 30;
            goto LABEL_158;
          }
          goto LABEL_100;
        }
LABEL_83:
        std::istream::get();
      }
    }
    if (v40 == 32) {
      goto LABEL_83;
    }
    if (v40 != 45) {
      break;
    }
    std::istream::get();
    if (std::istream::peek() - 48 > 9)
    {
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v98);
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      {
        long long v54 = (std::string *)v98.__r_.__value_.__r.__words[0];
        if (!strcasecmp(v98.__r_.__value_.__l.__data_, "inf")) {
          goto LABEL_129;
        }
        long long v55 = v54;
LABEL_125:
        if (!strcasecmp((const char *)v55, "infinity")) {
          goto LABEL_129;
        }
        if (strcasecmp((const char *)v54, "nan"))
        {
LABEL_162:
          v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93, (uint64_t)"Expecting numeric vector data, got ", 35);
          if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v79 = &v98;
          }
          else {
            v79 = (std::string *)v98.__r_.__value_.__r.__words[0];
          }
          if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v80 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v80 = v98.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)v79, v80);
          goto LABEL_159;
        }
        LODWORD(v99) = -4194304;
        std::vector<float>::push_back[abi:ne180100]((uint64_t)&v90, &v99);
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v99, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 1459);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v99, (uint64_t)"Reading negative NaN value into vector.", 39);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v99);
        }
      }
      else
      {
        if (strcasecmp((const char *)&v98, "inf"))
        {
          long long v54 = &v98;
          long long v55 = &v98;
          goto LABEL_125;
        }
LABEL_129:
        LODWORD(v99) = -8388608;
        std::vector<float>::push_back[abi:ne180100]((uint64_t)&v90, &v99);
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v99, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 1456);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v99, (uint64_t)"Reading negative infinite value into vector.", 44);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v99);
        }
      }
    }
    else
    {
      LODWORD(v99) = 0;
      std::istream::operator>>();
      if ((*((unsigned char *)v39 + *(void *)(*a2 - 24)) & 5) != 0) {
        goto LABEL_142;
      }
      unsigned int v42 = std::istream::peek();
      if (v42 <= 0x7F) {
        __uint32_t v43 = _DefaultRuneLocale.__runetype[v42] & 0x4000;
      }
      else {
        __uint32_t v43 = __maskrune(v42, 0x4000uLL);
      }
      if (!v43 && std::istream::peek() != 93)
      {
        uint64_t v87 = 33;
        char v88 = "Expected whitespace after number.";
LABEL_142:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93, (uint64_t)v88, v87);
LABEL_159:
        int v20 = 2;
        goto LABEL_160;
      }
      float v89 = -*(float *)&v99;
      std::vector<float>::push_back[abi:ne180100]((uint64_t)&v90, &v89);
    }
  }
  if (v40 != 93) {
    goto LABEL_100;
  }
  std::istream::get();
  kaldi::Vector<float>::Resize((void **)a1, (unint64_t)(v91 - (unsigned char *)v90) >> 2, 0, v70, v71);
  int v72 = (int *)v90;
  if (v91 != v90)
  {
    unint64_t v73 = (v91 - (unsigned char *)v90) >> 2;
    unsigned int v74 = *(_DWORD **)a1;
    if (v73 <= 1) {
      unint64_t v73 = 1;
    }
    do
    {
      int v75 = *v72++;
      *v74++ = v75;
      --v73;
    }
    while (v73);
  }
  unsigned int v76 = std::istream::peek() << 24;
  if (v76 == 167772160)
  {
LABEL_150:
    std::istream::get();
  }
  else if (v76 == 218103808)
  {
    std::istream::get();
    goto LABEL_150;
  }
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0 && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v99, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 1478);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v99, (uint64_t)"After end of vector data, read error.", 37);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v99);
  }
  int v20 = 1;
LABEL_160:
  if (v90)
  {
    long long v91 = (char *)v90;
    operator delete(v90);
  }
LABEL_16:
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
  {
    float32x4_t v21 = (void *)v98.__r_.__value_.__r.__words[0];
    goto LABEL_43;
  }
LABEL_44:
  if (v20 == 2)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v99, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 1506);
    v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v99, (uint64_t)"Failed to read vector from stream.  ", 36);
    std::stringbuf::str();
    if (SHIBYTE(v92) >= 0) {
      uint64_t v83 = &v90;
    }
    else {
      uint64_t v83 = v90;
    }
    if (SHIBYTE(v92) >= 0) {
      uint64_t v84 = HIBYTE(v92);
    }
    else {
      uint64_t v84 = (uint64_t)v91;
    }
    long long v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)v83, v84);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)" File position at start is ", 27);
    long long v86 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)", currently ", 12);
    std::istream::tellg();
    std::ostream::operator<<();
    if (SHIBYTE(v92) < 0) {
      operator delete(v90);
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v99);
  }
LABEL_45:
  if (v97 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
}

void sub_B4878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  uint64_t v9 = *(void **)(v7 + 136);
  if (v9) {
    free(v9);
  }
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_B488C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0xB48F0);
}

void sub_B489C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_B48A4()
{
}

void sub_B48C0()
{
  if (v1) {
    operator delete(v1);
  }
  if (v2 < 0) {
    operator delete(*v0);
  }
  JUMPOUT(0xB48E8);
}

void sub_B48F8()
{
}

void sub_B4900(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  if (a15) {
    free(a15);
  }
  JUMPOUT(0xB48F0);
}

void kaldi::VectorBase<float>::AddVec<float>(uint64_t a1, uint64_t a2, float a3, uint64_t a4, uint64_t a5, const char *a6)
{
  int v7 = *(_DWORD *)(a1 + 8);
  if (v7 != *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", &stru_68.sectname[12], "dim_ == v.dim_", a6);
  }
  if (a2 == a1) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", &stru_68.sectname[13], "&v != this", a6);
  }
  uint64_t v8 = *(const float **)a2;
  uint64_t v9 = *(float **)a1;

  cblas_saxpy(v7, a3, v8, 1, v9, (int)&def_5A5E8 + 1);
}

void kaldi::Vector<double>::Read(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (a4)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 8);
    char v93 = 0;
    uint64_t v94 = 0;
    long long v92 = 0;
    kaldi::Vector<double>::Resize(&v92, v8, 0, a4, a5);
    kaldi::Vector<double>::Read(&v92, a2, a3, 0);
    int v12 = *(_DWORD *)(a1 + 8);
    if (!v12)
    {
      kaldi::Vector<double>::Resize((void **)a1, v93, 0, v10, v11);
      int v12 = *(_DWORD *)(a1 + 8);
    }
    if (v12 != v93)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 1375);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Vector<Real>::Read, adding but dimensions mismatch ", 51);
      std::string::size_type v80 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)" vs. ", 5);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
    kaldi::VectorBase<double>::AddVec<double>(a1, (uint64_t)&v92, 1.0, v9, v10, v11);
    if (v92) {
      free(v92);
    }
    return;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v92);
  std::istream::tellg();
  if (a3)
  {
    if (kaldi::Peek(a2, 1) == 70)
    {
      uint64_t v15 = *(unsigned int *)(a1 + 8);
      uint64_t v99 = 0;
      uint64_t v100 = 0;
      *(double *)&__p = 0.0;
      kaldi::Vector<float>::Resize(&__p, v15, 0, v13, v14);
      kaldi::Vector<float>::Read(&__p, a2, 1, 0);
      if (*(_DWORD *)(a1 + 8) != v99) {
        kaldi::Vector<double>::Resize((void **)a1, v99, 0, v17, v18);
      }
      kaldi::VectorBase<double>::CopyFromVec<float>(a1, (uint64_t)&__p, v16, v17, v18);
      if (*(double *)&__p != 0.0) {
        free(__p);
      }
      goto LABEL_45;
    }
    *(double *)&__p = 0.0;
    uint64_t v99 = 0;
    uint64_t v100 = 0;
    kaldi::ReadToken(a2, 1, (uint64_t)&__p, v13, v14);
    if (SHIBYTE(v100) < 0)
    {
      if (v99 != 2) {
        goto LABEL_33;
      }
      p_p = __p;
    }
    else
    {
      if (SHIBYTE(v100) != 2) {
        goto LABEL_33;
      }
      p_p = &__p;
    }
    if (*p_p == 22084)
    {
      LODWORD(v97.__r_.__value_.__l.__data_) = 0;
      kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v97, v21, v22);
      int data = (int)v97.__r_.__value_.__l.__data_;
      if (LODWORD(v97.__r_.__value_.__l.__data_) != *(_DWORD *)(a1 + 8))
      {
        kaldi::Vector<double>::Resize((void **)a1, LODWORD(v97.__r_.__value_.__l.__data_), 0, v34, v35);
        int data = (int)v97.__r_.__value_.__l.__data_;
      }
      if (data >= 1) {
        std::istream::read();
      }
      if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) == 0)
      {
        int v19 = 1;
LABEL_41:
        if (SHIBYTE(v100) < 0)
        {
          int v20 = __p;
LABEL_43:
          operator delete(v20);
        }
        goto LABEL_44;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v92, (uint64_t)"Error reading vector data (binary mode); truncated stream? (std::string::size_type size = ",
        67);
      int32x4_t v37 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)")", 1);
LABEL_40:
      int v19 = 2;
      goto LABEL_41;
    }
LABEL_33:
    float32x4_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v92, (uint64_t)": Expected token ", 17);
    float32x4_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"DV", 2);
    float32x4_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)", got ", 6);
    if (v100 >= 0) {
      float32x4_t v32 = &__p;
    }
    else {
      float32x4_t v32 = __p;
    }
    if (v100 >= 0) {
      uint64_t v33 = HIBYTE(v100);
    }
    else {
      uint64_t v33 = v99;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
    goto LABEL_40;
  }
  memset(&v97, 0, sizeof(v97));
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v97);
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v92, (uint64_t)"EOF while trying to read vector.", 32);
LABEL_15:
    int v19 = 2;
    goto LABEL_16;
  }
  if (!std::string::compare(&v97, "[]"))
  {
    kaldi::Vector<double>::Resize((void **)a1, 0, 0, v24, v25);
    int v19 = 1;
    goto LABEL_16;
  }
  if (std::string::compare(&v97, "["))
  {
    float32x4_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v92, (uint64_t)"Expected \"[\" but got ", 21);
    if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int16x8_t v27 = &v97;
    }
    else {
      int16x8_t v27 = (std::string *)v97.__r_.__value_.__r.__words[0];
    }
    if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v97.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v97.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, size);
    goto LABEL_15;
  }
  int32x4_t v38 = a2 + 4;
  float v89 = 0;
  std::string v90 = 0;
  uint64_t v86 = 22;
  uint64_t v87 = "Failed to read number.";
  long long v91 = 0;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        int v39 = std::istream::peek();
        if ((v39 - 48) > 9) {
          break;
        }
        *(double *)&__p = 0.0;
        std::istream::operator>>();
        if ((*((unsigned char *)v38 + *(void *)(*a2 - 24)) & 5) != 0) {
          goto LABEL_142;
        }
        unsigned int v40 = std::istream::peek();
        if (v40 <= 0x7F)
        {
          if ((_DefaultRuneLocale.__runetype[v40] & 0x4000) != 0) {
            goto LABEL_71;
          }
        }
        else if (__maskrune(v40, 0x4000uLL))
        {
          goto LABEL_71;
        }
        if (std::istream::peek() != 93)
        {
          uint64_t v86 = 33;
          uint64_t v87 = "Expected whitespace after number.";
          goto LABEL_142;
        }
LABEL_71:
        __uint32_t v43 = v90;
        if (v90 >= (double *)v91)
        {
          int v45 = (double *)v89;
          uint64_t v46 = ((char *)v90 - (unsigned char *)v89) >> 3;
          unint64_t v47 = v46 + 1;
          if ((unint64_t)(v46 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v48 = v91 - (unsigned char *)v89;
          if ((v91 - (unsigned char *)v89) >> 2 > v47) {
            unint64_t v47 = v48 >> 2;
          }
          if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v49 = v47;
          }
          if (v49)
          {
            unint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v91, v49);
            int v45 = (double *)v89;
            __uint32_t v43 = v90;
          }
          else
          {
            unint64_t v50 = 0;
          }
          uint64_t v51 = (double *)&v50[8 * v46];
          double *v51 = *(double *)&__p;
          unint64_t v44 = v51 + 1;
          while (v43 != v45)
          {
            uint64_t v52 = *((void *)v43-- - 1);
            *((void *)v51-- - 1) = v52;
          }
          float v89 = v51;
          std::string v90 = v44;
          long long v91 = &v50[8 * v49];
          if (v45) {
            operator delete(v45);
          }
        }
        else
        {
          *std::string v90 = *(double *)&__p;
          unint64_t v44 = v43 + 1;
        }
        std::string v90 = v44;
      }
      if (v39 > 31) {
        break;
      }
      if (v39 > 9)
      {
        if (v39 == 10 || v39 == 13)
        {
          int v67 = "Newline found while reading vector (maybe it's a matrix?)";
          uint64_t v68 = 57;
LABEL_158:
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v92, (uint64_t)v67, v68);
          goto LABEL_159;
        }
LABEL_100:
        std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v97);
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
        {
          long long v55 = (std::string *)v97.__r_.__value_.__r.__words[0];
          if (!strcasecmp(v97.__r_.__value_.__l.__data_, "inf")) {
            goto LABEL_109;
          }
          std::string::size_type v56 = v55;
        }
        else
        {
          if (!strcasecmp((const char *)&v97, "inf")) {
            goto LABEL_109;
          }
          long long v55 = &v97;
          std::string::size_type v56 = &v97;
        }
        if (!strcasecmp((const char *)v56, "infinity"))
        {
LABEL_109:
          std::string::size_type v57 = v90;
          if (v90 >= (double *)v91)
          {
            v59 = (double *)v89;
            uint64_t v60 = ((char *)v90 - (unsigned char *)v89) >> 3;
            unint64_t v61 = v60 + 1;
            if ((unint64_t)(v60 + 1) >> 61) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v62 = v91 - (unsigned char *)v89;
            if ((v91 - (unsigned char *)v89) >> 2 > v61) {
              unint64_t v61 = v62 >> 2;
            }
            if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v63 = v61;
            }
            if (v63)
            {
              unint64_t v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v91, v63);
              v59 = (double *)v89;
              std::string::size_type v57 = v90;
            }
            else
            {
              unint64_t v64 = 0;
            }
            size_t v65 = (double *)&v64[8 * v60];
            *size_t v65 = INFINITY;
            v58 = v65 + 1;
            while (v57 != v59)
            {
              uint64_t v66 = *((void *)v57-- - 1);
              *((void *)v65-- - 1) = v66;
            }
            float v89 = v65;
            std::string v90 = v58;
            long long v91 = &v64[8 * v63];
            if (v59) {
              operator delete(v59);
            }
          }
          else
          {
            *std::string v90 = INFINITY;
            v58 = v57 + 1;
          }
          std::string v90 = v58;
          if (kaldi::g_kaldi_verbose_level >= -1)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 1493);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Reading infinite value into vector.", 35);
            kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          }
        }
        else
        {
          if (strcasecmp((const char *)v55, "nan")) {
            goto LABEL_162;
          }
          *(double *)&__p = NAN;
          std::vector<double>::push_back[abi:ne180100]((uint64_t)&v89, &__p);
          if (kaldi::g_kaldi_verbose_level >= -1)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 1496);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Reading NaN value into vector.", 30);
            kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          }
        }
      }
      else
      {
        if (v39 != 9)
        {
          if (v39 == -1)
          {
            int v67 = "EOF while reading vector data.";
            uint64_t v68 = 30;
            goto LABEL_158;
          }
          goto LABEL_100;
        }
LABEL_83:
        std::istream::get();
      }
    }
    if (v39 == 32) {
      goto LABEL_83;
    }
    if (v39 != 45) {
      break;
    }
    std::istream::get();
    if (std::istream::peek() - 48 > 9)
    {
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v97);
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
      {
        int v53 = (std::string *)v97.__r_.__value_.__r.__words[0];
        if (!strcasecmp(v97.__r_.__value_.__l.__data_, "inf")) {
          goto LABEL_129;
        }
        long long v54 = v53;
LABEL_125:
        if (!strcasecmp((const char *)v54, "infinity")) {
          goto LABEL_129;
        }
        if (strcasecmp((const char *)v53, "nan"))
        {
LABEL_162:
          int v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v92, (uint64_t)"Expecting numeric vector data, got ", 35);
          if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v78 = &v97;
          }
          else {
            v78 = (std::string *)v97.__r_.__value_.__r.__words[0];
          }
          if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v79 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v79 = v97.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)v78, v79);
          goto LABEL_159;
        }
        *(double *)&__p = NAN;
        std::vector<double>::push_back[abi:ne180100]((uint64_t)&v89, &__p);
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 1459);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Reading negative NaN value into vector.", 39);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        }
      }
      else
      {
        if (strcasecmp((const char *)&v97, "inf"))
        {
          int v53 = &v97;
          long long v54 = &v97;
          goto LABEL_125;
        }
LABEL_129:
        *(double *)&__p = -INFINITY;
        std::vector<double>::push_back[abi:ne180100]((uint64_t)&v89, &__p);
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 1456);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Reading negative infinite value into vector.", 44);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        }
      }
    }
    else
    {
      *(double *)&__p = 0.0;
      std::istream::operator>>();
      if ((*((unsigned char *)v38 + *(void *)(*a2 - 24)) & 5) != 0) {
        goto LABEL_142;
      }
      unsigned int v41 = std::istream::peek();
      if (v41 <= 0x7F) {
        __uint32_t v42 = _DefaultRuneLocale.__runetype[v41] & 0x4000;
      }
      else {
        __uint32_t v42 = __maskrune(v41, 0x4000uLL);
      }
      if (!v42 && std::istream::peek() != 93)
      {
        uint64_t v86 = 33;
        uint64_t v87 = "Expected whitespace after number.";
LABEL_142:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v92, (uint64_t)v87, v86);
LABEL_159:
        int v19 = 2;
        goto LABEL_160;
      }
      double v88 = -*(double *)&__p;
      std::vector<double>::push_back[abi:ne180100]((uint64_t)&v89, &v88);
    }
  }
  if (v39 != 93) {
    goto LABEL_100;
  }
  std::istream::get();
  kaldi::Vector<double>::Resize((void **)a1, (unint64_t)((char *)v90 - (unsigned char *)v89) >> 3, 0, v69, v70);
  int v71 = (uint64_t *)v89;
  if (v90 != v89)
  {
    unint64_t v72 = ((char *)v90 - (unsigned char *)v89) >> 3;
    unint64_t v73 = *(void **)a1;
    if (v72 <= 1) {
      unint64_t v72 = 1;
    }
    do
    {
      uint64_t v74 = *v71++;
      *v73++ = v74;
      --v72;
    }
    while (v72);
  }
  unsigned int v75 = std::istream::peek() << 24;
  if (v75 == 167772160)
  {
LABEL_150:
    std::istream::get();
  }
  else if (v75 == 218103808)
  {
    std::istream::get();
    goto LABEL_150;
  }
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0 && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 1478);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"After end of vector data, read error.", 37);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
  }
  int v19 = 1;
LABEL_160:
  if (v89)
  {
    std::string v90 = (double *)v89;
    operator delete(v89);
  }
LABEL_16:
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    int v20 = (void *)v97.__r_.__value_.__r.__words[0];
    goto LABEL_43;
  }
LABEL_44:
  if (v19 == 2)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 1506);
    uint64_t v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Failed to read vector from stream.  ", 36);
    std::stringbuf::str();
    if (SHIBYTE(v91) >= 0) {
      v82 = &v89;
    }
    else {
      v82 = v89;
    }
    if (SHIBYTE(v91) >= 0) {
      uint64_t v83 = HIBYTE(v91);
    }
    else {
      uint64_t v83 = (uint64_t)v90;
    }
    uint64_t v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)v82, v83);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)" File position at start is ", 27);
    long long v85 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)", currently ", 12);
    std::istream::tellg();
    std::ostream::operator<<();
    if (SHIBYTE(v91) < 0) {
      operator delete(v89);
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
LABEL_45:
  if (v96 < 0) {
    operator delete(v95);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
}

void sub_B578C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a65) {
    free(a65);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_B57A0(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0xB5804);
}

void sub_B57B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_B57B8()
{
}

void sub_B57D4()
{
  if (v0) {
    operator delete(v0);
  }
  if (v2 < 0) {
    operator delete(v1);
  }
  JUMPOUT(0xB57FCLL);
}

void sub_B580C()
{
}

void sub_B5814(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  if (a15) {
    free(a15);
  }
  JUMPOUT(0xB5804);
}

void kaldi::VectorBase<float>::SetZero(uint64_t a1)
{
}

void **kaldi::Vector<float>::Init(void **result, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (a2 < 0) {
    kaldi::KaldiAssertFailure_((kaldi *)"Init", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)&stru_B8.addr + 4, "dim >= 0", a5);
  }
  unint64_t v6 = result;
  if (a2)
  {
    memptr = 0;
    double result = (void **)malloc_type_posix_memalign(&memptr, 0x10uLL, 4 * a2, 0x12C09453uLL);
    if (result || !memptr)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      uint64_t v8 = std::bad_alloc::bad_alloc(exception);
    }
    *unint64_t v6 = memptr;
    *((_DWORD *)v6 + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
    *((_DWORD *)v6 + 3) = a2;
  }
  else
  {
    void *result = 0;
    result[1] = 0;
  }
  return result;
}

void kaldi::Vector<double>::Resize(void **a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  int v5 = a2;
  if (a3 == 2)
  {
    int v7 = 0;
    uint64_t v8 = (char *)*a1;
    if (a2 && v8)
    {
      if (*((_DWORD *)a1 + 3) >= (int)a2)
      {
        uint64_t v14 = *((int *)a1 + 2);
        if ((int)a2 > (int)v14) {
          bzero(&v8[8 * v14], 8 * ((int)a2 - (int)v14));
        }
        *((_DWORD *)a1 + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v5;
      }
      else
      {
        __dst = 0;
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        kaldi::Vector<double>::Resize(&__dst, a2, 1);
        uint64_t v9 = *((int *)a1 + 2);
        uint64_t v10 = (char *)*a1;
        if ((int)v9 >= v5)
        {
          memcpy(__dst, v10, 8 * v5);
        }
        else
        {
          memcpy(__dst, v10, 8 * v9);
          bzero((char *)__dst + 8 * *((int *)a1 + 2), 8 * (v5 - *((_DWORD *)a1 + 2)));
        }
        uint64_t v15 = (char *)__dst;
        __dst = *a1;
        uint64_t v16 = __dst;
        *a1 = v15;
        uint64_t v17 = v21;
        uint64_t v21 = (char *)a1[1];
        a1[1] = v17;
        if (v16) {
          free(v16);
        }
      }
      return;
    }
LABEL_12:
    if (!v8) {
      goto LABEL_22;
    }
LABEL_13:
    if (*((_DWORD *)a1 + 3) >= (int)a2)
    {
      *((_DWORD *)a1 + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
    }
    else if (*((_DWORD *)a1 + 2) != a2)
    {
      free(v8);
      *a1 = 0;
      a1[1] = 0;
      goto LABEL_22;
    }
    if (!v7)
    {
      size_t v11 = 8 * (int)a2;
      bzero(v8, v11);
    }
    return;
  }
  int v7 = a3;
  if (a3 != 3)
  {
    uint64_t v8 = (char *)*a1;
    goto LABEL_12;
  }
  uint64_t v8 = (char *)*a1;
  if (*a1)
  {
    if (*((_DWORD *)a1 + 2) == a2) {
      return;
    }
    int v7 = 0;
    goto LABEL_13;
  }
  int v7 = 0;
LABEL_22:
  if (v5 < 0) {
    kaldi::KaldiAssertFailure_((kaldi *)"Init", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)&stru_B8.addr + 4, "dim >= 0", a5);
  }
  if (v5)
  {
    __dst = 0;
    if (malloc_type_posix_memalign(&__dst, 0x10uLL, 8 * v5, 0x12C09453uLL) || (int v12 = __dst) == 0)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      int v19 = std::bad_alloc::bad_alloc(exception);
    }
    *a1 = __dst;
    *((_DWORD *)a1 + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v5;
    *((_DWORD *)a1 + 3) = v5;
    size_t v13 = 8 * v5;
    if (!v7) {
      goto LABEL_29;
    }
  }
  else
  {
    size_t v13 = 0;
    int v12 = 0;
    *a1 = 0;
    a1[1] = 0;
    if (!v7) {
LABEL_29:
    }
      bzero(v12, v13);
  }
}

void kaldi::VectorBase<double>::AddVec<double>(uint64_t a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5, const char *a6)
{
  int v7 = *(_DWORD *)(a1 + 8);
  if (v7 != *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", &stru_68.segname[5], "dim_ == v.dim_", a6);
  }
  if (a2 == a1) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", &stru_68.segname[6], "&v != this", a6);
  }
  uint64_t v8 = *(const double **)a2;
  uint64_t v9 = *(double **)a1;

  cblas_daxpy(v7, a3, v8, 1, v9, (int)&def_5A5E8 + 1);
}

BOOL kaldi::VectorBase<float>::IsZero(uint64_t a1, float a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 < 1)
  {
    float v4 = 0.0;
  }
  else
  {
    float v3 = *(float **)a1;
    float v4 = 0.0;
    do
    {
      float v5 = *v3++;
      float v6 = fabsf(v5);
      if (v6 >= v4) {
        float v4 = v6;
      }
      --v2;
    }
    while (v2);
  }
  return v4 <= a2;
}

uint64_t kaldi::VectorBase<float>::Set(uint64_t result, float a2)
{
  uint64_t v2 = *(unsigned int *)(result + 8);
  if ((int)v2 >= 1)
  {
    float v3 = *(float **)result;
    do
    {
      *v3++ = a2;
      --v2;
    }
    while (v2);
  }
  return result;
}

void kaldi::VectorBase<float>::SetRandn(uint64_t a1)
{
  unsigned int v7 = kaldi::Rand(0);
  if (*(int *)(a1 + 8) >= 1)
  {
    uint64_t v2 = 0;
    do
    {
      float v3 = ((double)(int)kaldi::Rand(&v7) + 1.0) / 2147483650.0;
      float v4 = sqrtf(logf(v3) * -2.0);
      float v5 = ((double)(int)kaldi::Rand(&v7) + 1.0) / 2147483650.0;
      float v6 = v5 * 6.28318531;
      *(float *)(*(void *)a1 + 4 * v2++) = v4 * cosf(v6);
    }
    while (v2 < *(int *)(a1 + 8));
  }
}

double kaldi::VectorBase<float>::Sum(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((int)v1 < 1) {
    return 0.0;
  }
  uint64_t v2 = *(float **)a1;
  double result = 0.0;
  do
  {
    float v4 = *v2++;
    double result = result + v4;
    --v1;
  }
  while (v1);
  *(float *)&double result = result;
  return result;
}

uint64_t *kaldi::VectorBase<float>::Min(uint64_t *result)
{
  unint64_t v1 = *((unsigned int *)result + 2);
  if (!v1)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "Min", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 742);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "Empty vector");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  uint64_t v2 = *result;
  if ((int)v1 >= 4)
  {
    uint64_t v5 = 0;
    int v3 = v1 & 0xFFFFFFFC;
    float v4 = INFINITY;
    do
    {
      float v6 = (float *)(v2 + 4 * v5);
      float v7 = *v6;
      float v8 = v6[1];
      float v9 = v6[2];
      float v10 = v6[3];
      if (*v6 < v4 || v8 < v4 || v9 < v4 || v10 < v4)
      {
        if (v7 >= v8) {
          float v7 = v6[1];
        }
        if (v9 >= v10) {
          float v9 = v6[3];
        }
        if (v7 < v4) {
          float v4 = v7;
        }
        if (v9 < v4) {
          float v4 = v9;
        }
      }
      v5 += 4;
    }
    while (v5 + 4 <= v1);
  }
  else
  {
    int v3 = 0;
    float v4 = INFINITY;
  }
  if (v3 < (int)v1)
  {
    uint64_t v14 = (float *)(v2 + 4 * v3);
    do
    {
      float v15 = *v14++;
      float v16 = v15;
      if (v15 < v4) {
        float v4 = v16;
      }
      ++v3;
    }
    while ((int)v1 > v3);
  }
  return result;
}

float kaldi::VectorBase<float>::ReverseCopyFromVec(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  if (v5 != *((_DWORD *)a2 + 2) || (float v6 = *(float **)a1, v7 = *a2, *(void *)a1 == *a2)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReverseCopyFromVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)&stru_108.size + 3, "Dim() == v.Dim() && data_ != v.data_", a5);
  }
  if ((int)v5 >= 1)
  {
    do
    {
      float result = *(float *)(v7 + 4 * (int)--v5);
      *v6++ = result;
    }
    while (v5);
  }
  return result;
}

uint64_t kaldi::VectorBase<float>::ApplyFloor(uint64_t a1, float a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 < 1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v5 = *(float **)a1;
  do
  {
    if (*v5 < a2)
    {
      float *v5 = a2;
      uint64_t result = (result + 1);
    }
    ++v5;
    --v2;
  }
  while (v2);
  return result;
}

uint64_t kaldi::VectorBase<float>::ApplyCeiling(uint64_t a1, float a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 < 1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v5 = *(float **)a1;
  do
  {
    if (*v5 > a2)
    {
      float *v5 = a2;
      uint64_t result = (result + 1);
    }
    ++v5;
    --v2;
  }
  while (v2);
  return result;
}

float kaldi::VectorBase<float>::MulElements(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  if (v5 != *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"MulElements", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", &stru_4C8.sectname[5], "dim_ == v.dim_", a5);
  }
  if ((int)v5 >= 1)
  {
    float v6 = *(float **)a2;
    uint64_t v7 = *(float **)a1;
    do
    {
      float v8 = *v6++;
      float result = v8 * *v7;
      *v7++ = result;
      --v5;
    }
    while (v5);
  }
  return result;
}

void kaldi::VectorBase<float>::Scale(uint64_t a1, float a2)
{
}

float kaldi::VectorBase<float>::ApplySoftMax(uint64_t a1)
{
  kaldi::VectorBase<float>::Max((uint64_t *)a1);
  float v3 = v2;
  int v4 = *(_DWORD *)(a1 + 8);
  uint64_t v5 = *(float **)a1;
  if (v4 >= 1)
  {
    float v6 = *(float **)a1;
    uint64_t v7 = *(unsigned int *)(a1 + 8);
    do
    {
      *float v6 = *v6 - v2;
      ++v6;
      --v7;
    }
    while (v7);
  }
  LODWORD(v14[0]) = v4;
  vvexpf(v5, v5, (const int *)v14);
  uint64_t v8 = *(unsigned int *)(a1 + 8);
  if ((int)v8 < 1) {
    goto LABEL_9;
  }
  uint64_t v9 = 0;
  float v10 = *(float **)a1;
  double v11 = 0.0;
  do
    double v11 = v11 + v10[v9++];
  while (v8 != v9);
  float v12 = v11;
  if (v12 == 0.0)
  {
LABEL_9:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14, "ApplySoftMax", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 1063);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "SoftMax produced NaN on vector");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
  }
  cblas_sscal(v8, 1.0 / v12, v10, 1);
  return v3 + logf(v12);
}

uint64_t *kaldi::VectorBase<float>::Max(uint64_t *result)
{
  unint64_t v1 = *((unsigned int *)result + 2);
  if (!v1)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Max", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 700);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, "Empty vector");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
  }
  uint64_t v2 = *result;
  if ((int)v1 >= 4)
  {
    uint64_t v5 = 0;
    int v3 = v1 & 0xFFFFFFFC;
    float v4 = -INFINITY;
    do
    {
      float v6 = (float *)(v2 + 4 * v5);
      float v7 = *v6;
      float v8 = v6[1];
      float v9 = v6[2];
      float v10 = v6[3];
      if (*v6 <= v4)
      {
        BOOL v11 = v8 == v4;
        BOOL v12 = v8 < v4;
      }
      else
      {
        BOOL v11 = 0;
        BOOL v12 = 0;
      }
      if (v12 || v11)
      {
        BOOL v13 = v9 == v4;
        BOOL v14 = v9 < v4;
      }
      else
      {
        BOOL v13 = 0;
        BOOL v14 = 0;
      }
      if (v14 || v13)
      {
        BOOL v15 = v10 == v4;
        BOOL v16 = v10 < v4;
      }
      else
      {
        BOOL v15 = 0;
        BOOL v16 = 0;
      }
      if (!v16 && !v15)
      {
        if (v7 <= v8) {
          float v7 = v6[1];
        }
        if (v9 <= v10) {
          float v9 = v6[3];
        }
        if (v7 > v4) {
          float v4 = v7;
        }
        if (v9 > v4) {
          float v4 = v9;
        }
      }
      v5 += 4;
    }
    while (v5 + 4 <= v1);
  }
  else
  {
    int v3 = 0;
    float v4 = -INFINITY;
  }
  if (v3 < (int)v1)
  {
    uint64_t v17 = (float *)(v2 + 4 * v3);
    do
    {
      float v18 = *v17++;
      float v19 = v18;
      if (v18 > v4) {
        float v4 = v19;
      }
      ++v3;
    }
    while ((int)v1 > v3);
  }
  return result;
}

uint64_t kaldi::VectorBase<float>::Add(uint64_t result, float a2)
{
  uint64_t v2 = *(unsigned int *)(result + 8);
  if ((int)v2 >= 1)
  {
    int v3 = *(float **)result;
    do
    {
      float *v3 = *v3 + a2;
      ++v3;
      --v2;
    }
    while (v2);
  }
  return result;
}

void kaldi::VectorBase<float>::ApplyExp(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  vvexpf(*(float **)a1, *(const float **)a1, &v1);
}

void kaldi::VectorBase<float>::Sigmoid(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"Sigmoid", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", &stru_478.segname[7], "dim_ == src.dim_", a5);
  }
  kaldi::VectorBase<float>::CopyFromVec(a1, a2, a3, a4, a5);
  cblas_sscal(*(_DWORD *)(a1 + 8), 0.5, *(float **)a1, 1);
  int v10 = *(_DWORD *)(a1 + 8);
  vvtanhf(*(float **)a1, *(const float **)a1, &v10);
  int v6 = *(_DWORD *)(a1 + 8);
  float v7 = *(float **)a1;
  if (v6 >= 1)
  {
    float v8 = *(float **)a1;
    uint64_t v9 = *(unsigned int *)(a1 + 8);
    do
    {
      *float v8 = *v8 + 1.0;
      ++v8;
      --v9;
    }
    while (v9);
  }
  cblas_sscal(v6, 0.5, v7, 1);
}

void kaldi::VectorBase<float>::ApplyTanh(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  vvtanhf(*(float **)a1, *(const float **)a1, &v1);
}

float kaldi::VectorBase<float>::Norm(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  if (a2 < 0.0) {
    kaldi::KaldiAssertFailure_((kaldi *)"Norm", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)&stru_248.nreloc + 2, "p >= 0.0", a6);
  }
  if (a2 == 0.0)
  {
    uint64_t v7 = *(unsigned int *)(a1 + 8);
    if ((int)v7 < 1) {
      return 0.0;
    }
    float v8 = *(float **)a1;
    float result = 0.0;
    do
    {
      float v10 = *v8++;
      if (v10 != 0.0) {
        float result = result + 1.0;
      }
      --v7;
    }
    while (v7);
    return result;
  }
  if (a2 == 1.0)
  {
    int v12 = *(_DWORD *)(a1 + 8);
    BOOL v13 = *(const float **)a1;
    return cblas_sasum(v12, v13, 1);
  }
  uint64_t v14 = *(unsigned int *)(a1 + 8);
  if (a2 == 2.0)
  {
    BOOL v15 = *(const float **)a1;
    int v16 = *(_DWORD *)(a1 + 8);
    return cblas_snrm2(v16, v15, 1);
  }
  if ((int)v14 < 1)
  {
    float result = powf(0.0, 1.0 / a2);
    if (result != INFINITY) {
      return result;
    }
LABEL_31:
    kaldi::KaldiAssertFailure_((kaldi *)"Norm", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", &stru_298.sectname[2], "tmp != HUGE_VAL", v22);
  }
  uint64_t v17 = *(float **)a1;
  char v18 = 1;
  float v19 = 0.0;
  do
  {
    float v20 = *v17++;
    float v21 = powf(fabsf(v20), a2);
    v18 &= v21 != INFINITY;
    float v19 = v19 + v21;
    --v14;
  }
  while (v14);
  float result = powf(v19, 1.0 / a2);
  if (result == INFINITY) {
    goto LABEL_31;
  }
  if ((v18 & 1) == 0)
  {
    kaldi::VectorBase<float>::Max((uint64_t *)a1);
    float v24 = v23;
    kaldi::VectorBase<float>::Min((uint64_t *)a1);
    float v28 = -v27;
    if (v24 < v28) {
      float v24 = v28;
    }
    if (v24 <= 0.0) {
      kaldi::KaldiAssertFailure_((kaldi *)"Norm", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", &stru_298.sectname[8], "max_abs > 0", v26);
    }
    __X = 0;
    *(void *)__N = 0;
    uint64_t v35 = 0;
    kaldi::Vector<float>::Resize((void **)&__X, *(unsigned int *)(a1 + 8), 1, v25, v26);
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&__X, a1, v29, v30, v31);
    cblas_sscal(__N[0], 1.0 / v24, __X, 1);
    float v32 = kaldi::VectorBase<float>::Norm(&__X, a2);
    if (__X) {
      free(__X);
    }
    return v24 * v32;
  }
  return result;
}

void sub_B65A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10) {
    free(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::VectorBase<float>::InvertElements(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 8);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = *(float **)result;
    do
    {
      float *v2 = 1.0 / *v2;
      ++v2;
      --v1;
    }
    while (v1);
  }
  return result;
}

uint64_t kaldi::VectorBase<float>::ReplaceValue(uint64_t result, float a2, float a3)
{
  uint64_t v3 = *(unsigned int *)(result + 8);
  if ((int)v3 >= 1)
  {
    float v4 = *(float **)result;
    do
    {
      if (*v4 == a2) {
        *float v4 = a3;
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

float kaldi::VectorBase<float>::DivElements(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  if (v5 != *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"DivElements", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)&stru_4C8.offset, "dim_ == v.dim_", a5);
  }
  if ((int)v5 >= 1)
  {
    int v6 = *(float **)a2;
    uint64_t v7 = *(float **)a1;
    do
    {
      float v8 = *v6++;
      float result = *v7 / v8;
      *v7++ = result;
      --v5;
    }
    while (v5);
  }
  return result;
}

void kaldi::VectorBase<float>::AddVecVec(uint64_t a1, uint64_t a2, uint64_t a3, float a4, float a5, uint64_t a6, const char *a7)
{
  __Y = *(float **)a1;
  if (*(void *)a2 == *(void *)a1 || (__X = *(const float **)a3, *(float **)a3 == __Y)) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddVecVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)&stru_4C8.addr + 6, "v.data_ != this->data_ && r.data_ != this->data_", a7);
  }
  int v10 = *(_DWORD *)(a1 + 8);
  int v11 = *(_DWORD *)(a3 + 8);
  if (v10 != *(_DWORD *)(a2 + 8) || v10 != v11) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddVecVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)&stru_4C8.size, "dim_ == v.dim_ && dim_ == r.dim_", a7);
  }
  cblas_sgbmv(CblasRowMajor, CblasNoTrans, v10, v10, 0, 0, a4, *(const float **)a2, 1, __X, 1, a5, __Y, 1);
}

void *kaldi::VectorBase<float>::CopyRowsFromMat(char **a1, kaldi::ContextDependency *this)
{
  int v4 = *((_DWORD *)a1 + 2);
  int v5 = kaldi::ContextDependency::ContextWidth(this);
  if (v4 != kaldi::ContextDependency::CentralPosition(this) * v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyRowsFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", &stru_1A8.sectname[8], "dim_ == mat.NumCols() * mat.NumRows()", v6);
  }
  uint64_t v7 = *a1;
  int v8 = kaldi::ContextDependency::ContextWidth(this);
  int v9 = kaldi::ContextDependency::CentralPosition(this);
  int v10 = fst::StateOrderQueue<int>::Head_((uint64_t)this);
  float result = (void *)kaldi::ContextDependency::ContextWidth(this);
  if (v10 == result)
  {
    BOOL v13 = *(const void **)this;
    return memcpy(v7, v13, 4 * v9 * v8);
  }
  else if (v9 >= 1)
  {
    unsigned int v14 = 0;
    size_t v15 = 4 * v8;
    do
    {
      if (*((_DWORD *)this + 3) <= v14) {
        kaldi::KaldiAssertFailure_((kaldi *)"RowData", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", &stru_68.segname[6], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v12);
      }
      float result = memcpy(v7, (const void *)(*(void *)this + 4 * (int)(*((_DWORD *)this + 4) * v14++)), v15);
      v7 += v15;
    }
    while (v9 != v14);
  }
  return result;
}

double kaldi::VectorBase<float>::CopyRowsFromMat(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  uint64_t v7 = *a2;
  if (*a2) {
    LODWORD(v7) = *(_DWORD *)(v7 + 8) * *(_DWORD *)(v7 + 12);
  }
  if (v6 != v7) {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyRowsFromMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", &stru_1A8.segname[11], "dim_ == mat.NumCols() * mat.NumRows()", a5);
  }
  kaldi::SubMatrix<float>::SubMatrix(v9, *(void *)a1, 1, v6, v6);
  kaldi::CompressedMatrix::CopyToMat<float>(a2, (kaldi::ContextDependency *)v9);
  *(void *)&double result = fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v9).n128_u64[0];
  return result;
}

void sub_B6920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::VectorBase<float>::CountZeros(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((int)v1 < 1) {
    return 0;
  }
  uint64_t v2 = *(float **)a1;
  double v3 = 0.0;
  do
  {
    float v4 = *v2++;
    if (v4 == 0.0) {
      double v3 = v3 + 1.0;
    }
    --v1;
  }
  while (v1);
  return (int)v3;
}

uint64_t kaldi::VectorBase<float>::AddColSumMat(uint64_t a1, kaldi::ContextDependency *this, float a3, float a4)
{
  int v8 = *(_DWORD *)(a1 + 8);
  if (v8 != kaldi::ContextDependency::CentralPosition(this)) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddColSumMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)&stru_338.size + 2, "dim_ == M.NumRows()", v9);
  }
  uint64_t result = kaldi::ContextDependency::ContextWidth(this);
  uint64_t v12 = *(unsigned int *)(a1 + 8);
  if ((int)v12 >= 1)
  {
    uint64_t v13 = 0;
    unsigned int v14 = *(float **)this;
    uint64_t v15 = *((unsigned int *)this + 3);
    uint64_t v16 = 4 * *((int *)this + 4);
    do
    {
      if (v13 == v15) {
        kaldi::KaldiAssertFailure_((kaldi *)"RowData", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", &stru_68.segname[6], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v11);
      }
      double v17 = 0.0;
      if ((int)result >= 1)
      {
        uint64_t v18 = result;
        float v19 = v14;
        do
        {
          float v20 = *v19++;
          double v17 = v17 + v20;
          --v18;
        }
        while (v18);
      }
      float v21 = (float)(*(float *)(*(void *)a1 + 4 * v13) * a4) + a3 * v17;
      *(float *)(*(void *)a1 + 4 * v13++) = v21;
      unsigned int v14 = (float *)((char *)v14 + v16);
    }
    while (v13 != v12);
  }
  return result;
}

void kaldi::VectorBase<float>::AddDiagMat2(uint64_t a1, kaldi::ContextDependency *this, int a3, float a4, float a5)
{
  int v9 = *(_DWORD *)(a1 + 8);
  if (a3 == 111)
  {
    if (v9 != kaldi::ContextDependency::CentralPosition(this)) {
      kaldi::KaldiAssertFailure_((kaldi *)"AddDiagMat2", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)&stru_608.size + 7, "this->dim_ == M.NumRows()", v10);
    }
    int v11 = *(_DWORD *)(a1 + 8);
    int v12 = kaldi::ContextDependency::ContextWidth(this);
    int v13 = fst::StateOrderQueue<int>::Head_((uint64_t)this);
    if (v11 >= 1)
    {
      unsigned int v14 = *(const float **)this;
      uint64_t v15 = *(float **)a1;
      uint64_t v16 = 4 * v13;
      do
      {
        float v17 = *v15;
        *v15++ = (float)(cblas_sdot(v12, v14, 1, v14, 1) * a4) + (float)(a5 * v17);
        unsigned int v14 = (const float *)((char *)v14 + v16);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    if (v9 != kaldi::ContextDependency::ContextWidth(this)) {
      kaldi::KaldiAssertFailure_((kaldi *)"AddDiagMat2", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)&stru_608.align + 3, "this->dim_ == M.NumCols()", v18);
    }
    int v19 = kaldi::ContextDependency::CentralPosition(this);
    int v20 = *(_DWORD *)(a1 + 8);
    int v21 = fst::StateOrderQueue<int>::Head_((uint64_t)this);
    if (v20 >= 1)
    {
      int v22 = v21;
      float v23 = *(const float **)this;
      float v24 = *(float **)a1;
      do
      {
        float v25 = *v24;
        *v24++ = (float)(cblas_sdot(v19, v23, v22, v23, v22) * a4) + (float)(a5 * v25);
        ++v23;
        --v20;
      }
      while (v20);
    }
  }
}

void kaldi::VectorBase<float>::AddDiagMatMat(uint64_t a1, kaldi::ContextDependency *this, int a3, kaldi::ContextDependency *a4, int a5, float a6, float a7)
{
  int v14 = *(_DWORD *)(a1 + 8);
  if (a3 == 112) {
    int v15 = kaldi::ContextDependency::CentralPosition(this);
  }
  else {
    int v15 = kaldi::ContextDependency::ContextWidth(this);
  }
  int v16 = v15;
  if (a5 == 112) {
    int v17 = kaldi::ContextDependency::ContextWidth(a4);
  }
  else {
    int v17 = kaldi::ContextDependency::CentralPosition(a4);
  }
  if (v16 != v17) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddDiagMatMat", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)&stru_608.reserved2 + 3, "M_col_dim == N_row_dim", v18);
  }
  int v19 = fst::StateOrderQueue<int>::Head_((uint64_t)this);
  int v20 = v19;
  if (a3 == 112) {
    int v21 = v19;
  }
  else {
    int v21 = 1;
  }
  int v22 = fst::StateOrderQueue<int>::Head_((uint64_t)a4);
  if (a5 == 112) {
    int v23 = 1;
  }
  else {
    int v23 = v22;
  }
  if (v14 >= 1)
  {
    float v24 = *(const float **)a4;
    float v25 = *(const float **)this;
    float32x4_t v26 = *(float **)a1;
    if (a5 == 112) {
      int v27 = v22;
    }
    else {
      int v27 = 1;
    }
    if (a3 == 112) {
      int v28 = 1;
    }
    else {
      int v28 = v20;
    }
    uint64_t v29 = 4 * v27;
    uint64_t v30 = 4 * v28;
    do
    {
      float v31 = *v26;
      *v26++ = (float)(cblas_sdot(v16, v25, v21, v24, v23) * a6) + (float)(a7 * v31);
      float v24 = (const float *)((char *)v24 + v29);
      float v25 = (const float *)((char *)v25 + v30);
      --v14;
    }
    while (v14);
  }
}

void kaldi::VectorBase<float>::Write(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "Write", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 1515);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Failed to write vector to stream: stream not good");
    goto LABEL_13;
  }
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FV");
    kaldi::WriteToken(a2, 1, (char *)__p, v5, v6);
    kaldi::WriteBasicType<int>(a2, 1);
    std::ostream::write();
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" [ ", 3);
    if (*(int *)(a1 + 8) >= 1)
    {
      uint64_t v7 = 0;
      do
      {
        int v8 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
        ++v7;
      }
      while (v7 < *(int *)(a1 + 8));
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"]\n", 2);
  }
  if (*(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "Write", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", 1532);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Failed to write vector to stream");
LABEL_13:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
}

BOOL kaldi::VectorBase<double>::IsZero(uint64_t a1, double a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 < 1)
  {
    double v4 = 0.0;
  }
  else
  {
    double v3 = *(double **)a1;
    double v4 = 0.0;
    do
    {
      double v5 = *v3++;
      double v6 = fabs(v5);
      if (v6 >= v4) {
        double v4 = v6;
      }
      --v2;
    }
    while (v2);
  }
  return v4 <= a2;
}

double kaldi::VectorBase<double>::Sum(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((int)v1 < 1) {
    return 0.0;
  }
  uint64_t v2 = *(double **)a1;
  double result = 0.0;
  do
  {
    double v4 = *v2++;
    double result = result + v4;
    --v1;
  }
  while (v1);
  return result;
}

void kaldi::VectorBase<double>::Scale(uint64_t a1, double a2)
{
}

void kaldi::VectorBase<float>::AddMatVec<signed char>(uint64_t a1, kaldi::ContextDependency *this, int a3, uint64_t a4, const char *a5, float a6, float a7)
{
  if (a3 != 111
    || kaldi::ContextDependency::ContextWidth(this) != *(_DWORD *)(a4 + 8)
    || kaldi::ContextDependency::CentralPosition(this) != *(_DWORD *)(a1 + 8))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)&stru_68.size + 6, "trans == kNoTrans && M.NumCols() == v.Dim() && M.NumRows() == dim_", a5);
  }
  if (a6 != 1.0) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)&stru_68.offset, "alpha == 1.0", a5);
  }

  kaldi::QuantizedVectorBase<signed char>::AddMatVec(a4, (uint64_t)this, a1, a7, v12, a5);
}

void kaldi::VectorBase<float>::AddMatVec<short>(uint64_t a1, kaldi::ContextDependency *this, int a3, uint64_t a4, const char *a5, float a6, float a7)
{
  if (a3 != 111
    || kaldi::ContextDependency::ContextWidth(this) != *(_DWORD *)(a4 + 8)
    || kaldi::ContextDependency::CentralPosition(this) != *(_DWORD *)(a1 + 8))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)&stru_68.size + 6, "trans == kNoTrans && M.NumCols() == v.Dim() && M.NumRows() == dim_", a5);
  }
  if (a6 != 1.0) {
    kaldi::KaldiAssertFailure_((kaldi *)"AddMatVec", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)&stru_68.offset, "alpha == 1.0", a5);
  }

  kaldi::QuantizedVectorBase<short>::AddMatVec(a4, (uint64_t)this, a1, a7, v12, a5);
}

void kaldi::VectorBase<float>::ApplyPow(uint64_t a1, float a2)
{
  float v3 = a2;
  int v2 = *(_DWORD *)(a1 + 8);
  vvpowsf(*(float **)a1, &v3, *(const float **)a1, &v2);
}

void kaldi::VectorBase<float>::ApplyLog(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  vvlogf(*(float **)a1, *(const float **)a1, &v1);
}

void kaldi::VectorBase<double>::ApplyLog(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  vvlog(*(double **)a1, *(const double **)a1, &v1);
}

void kaldi::VectorBase<float>::Tanh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"Tanh", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/kaldi-vector.cc", (const char *)&stru_428.size + 2, "dim_ == src.dim_", a5);
  }
  int v5 = *(_DWORD *)(a1 + 8);
  vvtanhf(*(float **)a1, *(const float **)a2, &v5);
}

void kaldi::ComplexFft<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (!a1) {
    kaldi::KaldiAssertFailure_((kaldi *)"ComplexFft", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/matrix-functions.cc", stru_158.sectname, "v != NULL", a5);
  }
  int v6 = *(_DWORD *)(a1 + 8);
  if (v6 >= 2)
  {
    if (v6) {
      kaldi::KaldiAssertFailure_((kaldi *)"ComplexFft", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/matrix-functions.cc", &stru_158.sectname[3], "v->Dim() % 2 == 0", a5);
    }
    uint64_t v9 = v6 >> 1;
    __p = 0;
    int v14 = 0;
    uint64_t v15 = 0;
    kaldi::Factorize<int>(v6 >> 1, (uint64_t)&__p, a3, a4, a5);
    if (v14 == __p) {
      char v10 = 0;
    }
    else {
      char v10 = (const char *)__p;
    }
    memset(v12, 0, sizeof(v12));
    if (a3) {
      int v11 = (void **)a3;
    }
    else {
      int v11 = v12;
    }
    kaldi::ComplexFftRecursive<float>(*(void *)a1, 1, v9, v10, &v10[v14 - (unsigned char *)__p], a2, (uint64_t)v11);
    kaldi::Vector<float>::Destroy((uint64_t)v12);
    if (__p)
    {
      int v14 = __p;
      operator delete(__p);
    }
  }
}

void sub_B7370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void kaldi::Factorize<int>(int a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (!a2) {
    kaldi::KaldiAssertFailure_((kaldi *)"Factorize", "../subproject/libquasar/libkaldi/src/base/kaldi-math.h", &stru_158.segname[1], "factors != NULL", a5);
  }
  int v5 = a1;
  if (a1 <= 0) {
    kaldi::KaldiAssertFailure_((kaldi *)"Factorize", "../subproject/libquasar/libkaldi/src/base/kaldi-math.h", &stru_158.segname[2], "m >= 1", a5);
  }
  uint64_t v7 = 0;
  int v8 = *(int **)a2;
  *(void *)(a2 + 8) = *(void *)a2;
  uint64_t v9 = (void *)(a2 + 16);
  while (v5 != 1)
  {
    int v10 = dword_20CA08[v7];
    if (!(v5 % v10))
    {
      int v11 = v8;
      do
      {
        if ((unint64_t)v11 >= *v9)
        {
          uint64_t v12 = *(int **)a2;
          uint64_t v13 = ((uint64_t)v11 - *(void *)a2) >> 2;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 62) {
LABEL_48:
          }
            std::vector<float>::__throw_length_error[abi:ne180100]();
          uint64_t v15 = *v9 - (void)v12;
          if (v15 >> 1 > v14) {
            unint64_t v14 = v15 >> 1;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16)
          {
            int v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v9, v16);
            uint64_t v12 = *(int **)a2;
            int v11 = *(int **)(a2 + 8);
          }
          else
          {
            int v17 = 0;
          }
          uint64_t v18 = (int *)&v17[4 * v13];
          int *v18 = v10;
          int v8 = v18 + 1;
          while (v11 != v12)
          {
            int v19 = *--v11;
            *--uint64_t v18 = v19;
          }
          *(void *)a2 = v18;
          *(void *)(a2 + 8) = v8;
          *(void *)(a2 + 16) = &v17[4 * v16];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          int *v11 = v10;
          int v8 = v11 + 1;
        }
        v5 /= v10;
        *(void *)(a2 + 8) = v8;
        int v11 = v8;
      }
      while (!(v5 % v10));
    }
    if (++v7 == 10)
    {
      if (v5 != 1)
      {
        int v20 = 31;
        do
        {
          if (v5 % v20)
          {
            int v21 = v8;
          }
          else
          {
            do
            {
              if ((unint64_t)v8 >= *v9)
              {
                int v22 = *(int **)a2;
                uint64_t v23 = ((uint64_t)v8 - *(void *)a2) >> 2;
                unint64_t v24 = v23 + 1;
                if ((unint64_t)(v23 + 1) >> 62) {
                  goto LABEL_48;
                }
                uint64_t v25 = *v9 - (void)v22;
                if (v25 >> 1 > v24) {
                  unint64_t v24 = v25 >> 1;
                }
                if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v26 = v24;
                }
                if (v26)
                {
                  int v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v9, v26);
                  int v22 = *(int **)a2;
                  int v8 = *(int **)(a2 + 8);
                }
                else
                {
                  int v27 = 0;
                }
                int v28 = (int *)&v27[4 * v23];
                int *v28 = v20;
                int v21 = v28 + 1;
                while (v8 != v22)
                {
                  int v29 = *--v8;
                  *--int v28 = v29;
                }
                *(void *)a2 = v28;
                *(void *)(a2 + 8) = v21;
                *(void *)(a2 + 16) = &v27[4 * v26];
                if (v22) {
                  operator delete(v22);
                }
              }
              else
              {
                *int v8 = v20;
                int v21 = v8 + 1;
              }
              v5 /= v20;
              *(void *)(a2 + 8) = v21;
              int v8 = v21;
            }
            while (!(v5 % v20));
          }
          v20 += 2;
          int v8 = v21;
        }
        while (v5 != 1);
      }
      return;
    }
  }
}

void kaldi::ComplexFftRecursive<float>(uint64_t a1, int a2, uint64_t a3, const char *a4, const char *a5, uint64_t a6, uint64_t a7)
{
  if (a4 == a5)
  {
    if (a3 != 1) {
      kaldi::KaldiAssertFailure_((kaldi *)"ComplexFftRecursive", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/matrix-functions.cc", &stru_68.sectname[7], "N == 1", a5);
    }
  }
  else
  {
    int v12 = a2;
    uint64_t v14 = 2 * (int)a3;
    if (a2 < 2
      || 8 * (int)a3 * a2 <= 0x2000
      || ((0x2000 / (8 * (int)a3)) <= 1 ? (int v15 = 1) : (int v15 = 0x2000 / (8 * (int)a3)), v15 >= a2))
    {
      uint64_t v18 = *(unsigned int *)a4;
      if ((int)v18 <= 1) {
        kaldi::KaldiAssertFailure_((kaldi *)"ComplexFftRecursive", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/matrix-functions.cc", (const char *)&stru_68.addr + 1, "P > 1", a5);
      }
      uint64_t v19 = ((int)a3 / (int)v18);
      if ((int)v19 >= 2)
      {
        if (*(_DWORD *)(a7 + 8) < (int)a3) {
          kaldi::Vector<float>::Resize((void **)a7, a3, 0, (uint64_t)a4, a5);
        }
        if (v12 >= 1)
        {
          int v20 = 0;
          int v21 = *(_DWORD **)a7;
          uint64_t v22 = a1;
          do
          {
            uint64_t v23 = 0;
            char v24 = 1;
            do
            {
              int v25 = 0;
              uint64_t v26 = 0;
              char v27 = v24;
              int v28 = v21;
              do
              {
                uint64_t v29 = ((int)a3 / (int)v18);
                uint64_t v30 = v28;
                int v31 = v25;
                do
                {
                  *v30++ = *(_DWORD *)(v22 + 4 * (v23 | v31));
                  v31 += 2 * v18;
                  --v29;
                }
                while (v29);
                ++v26;
                v25 += 2;
                v28 += v19;
              }
              while (v26 != v18);
              if ((int)v19 * (int)v18 >= 1)
              {
                uint64_t v32 = 4 * v23;
                uint64_t v33 = (v19 * v18);
                uint64_t v34 = v21;
                do
                {
                  int v35 = *v34++;
                  *(_DWORD *)(v22 + v3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v35;
                  v32 += 8;
                  --v33;
                }
                while (v33);
              }
              char v24 = 0;
              uint64_t v23 = 1;
            }
            while ((v27 & 1) != 0);
            ++v20;
            v22 += 4 * v14;
          }
          while (v20 != v12);
        }
      }
      kaldi::ComplexFftRecursive<float>(a1, (v18 * v12), ((int)a3 / (int)v18), a4 + 4, a5, a6, a7);
      if (a6) {
        double v36 = -6.28318531;
      }
      else {
        double v36 = 6.28318531;
      }
      float v37 = v36 / (double)(int)a3;
      __float2 v38 = __sincosf_stret(v37);
      float v39 = v36 / (double)(int)v18;
      __float2 v42 = __sincosf_stret(v39);
      if (*(_DWORD *)(a7 + 8) < 2 * (int)v18) {
        kaldi::Vector<float>::Resize((void **)a7, (2 * v18), 0, *(void *)&v40, v41);
      }
      if (v14 * v12)
      {
        uint64_t v43 = a1 + 4 * (int)v14 * v12;
        unint64_t v44 = *(float **)a7;
        int v45 = 2 * v19;
        uint64_t v46 = *(void *)a7 + 4;
        do
        {
          if ((int)v19 >= 1)
          {
            uint64_t v47 = 0;
            float v48 = 1.0;
            float v49 = 0.0;
            int v50 = 1;
            int v51 = 4 * v19;
            do
            {
              uint64_t v52 = 0;
              uint64_t v53 = 2 * ((int)v19 + (int)v47);
              uint64_t v54 = (2 * ((int)v19 + (int)v47)) | 1;
              float v55 = v49;
              float v56 = v48;
              do
              {
                float v57 = *(float *)(a1 + 8 * v47);
                uint64_t v58 = 2 * v52;
                v44[v58] = v57;
                float v59 = *(float *)(a1 + 4 * ((2 * v47) | 1));
                uint64_t v60 = (2 * v52) | 1;
                v44[v60] = v59;
                float v61 = v57 + (float)((float)(*(float *)(a1 + 4 * v53) * v56) - (float)(*(float *)(a1 + 4 * v54) * v55));
                v44[v58] = v61;
                float v62 = v59 + (float)((float)(v56 * *(float *)(a1 + 4 * v54)) + (float)(*(float *)(a1 + 4 * v53) * v55));
                v44[v60] = v62;
                if ((int)v18 >= 3)
                {
                  uint64_t v63 = v18 - 2;
                  int v64 = v51;
                  float v65 = v55;
                  float v66 = v56;
                  do
                  {
                    float v67 = -(float)(v65 * v55);
                    float v65 = (float)(v56 * v65) + (float)(v66 * v55);
                    float v66 = v67 + (float)(v66 * v56);
                    float v61 = v61
                        + (float)((float)(*(float *)(a1 + 4 * v64) * v66)
                                - (float)(*(float *)(a1 + 4 * (v64 + 1)) * v65));
                    v44[2 * v52] = v61;
                    float v62 = v62
                        + (float)((float)(v66 * *(float *)(a1 + 4 * (v64 + 1)))
                                + (float)(*(float *)(a1 + 4 * v64) * v65));
                    v44[v60] = v62;
                    v64 += v45;
                    --v63;
                  }
                  while (v63);
                }
                if (v52 != v18 - 1)
                {
                  float v68 = -(float)(v55 * v42.__sinval);
                  float v55 = (float)(v42.__cosval * v55) + (float)(v56 * v42.__sinval);
                  float v56 = v68 + (float)(v56 * v42.__cosval);
                }
                ++v52;
              }
              while (v52 != v18);
              uint64_t v69 = v18;
              uint64_t v70 = (int *)v46;
              int v71 = v50;
              do
              {
                *(_DWORD *)(a1 + 4 * (v71 - 1)) = *(v70 - 1);
                int v72 = *v70;
                v70 += 2;
                *(_DWORD *)(a1 + 4 * v71) = v72;
                v71 += v45;
                --v69;
              }
              while (v69);
              float v73 = -(float)(v49 * v38.__sinval);
              float v49 = (float)(v38.__cosval * v49) + (float)(v48 * v38.__sinval);
              ++v47;
              float v48 = v73 + (float)(v48 * v38.__cosval);
              v51 += 2;
              v50 += 2;
            }
            while (v47 != v19);
          }
          a1 += 4 * v14;
        }
        while (a1 != v43);
      }
    }
    else
    {
      do
      {
        if (v15 >= v12) {
          uint64_t v16 = v12;
        }
        else {
          uint64_t v16 = v15;
        }
        kaldi::ComplexFftRecursive<float>(a1, v16, a3, a4, a5, a6, a7);
        a1 += 4 * (int)v14 * (int)v16;
        BOOL v17 = __OFSUB__(v12, v16);
        v12 -= v16;
      }
      while (!((v12 < 0) ^ v17 | (v12 == 0)));
    }
  }
}

void kaldi::RealFft<float>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (!a1) {
    kaldi::KaldiAssertFailure_((kaldi *)"RealFft", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/matrix-functions.cc", (const char *)&stru_158.reloff + 1, "v != NULL", a5);
  }
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if ((int)v6 >= 0) {
    int v7 = *(_DWORD *)(a1 + 8);
  }
  else {
    int v7 = v6 + 1;
  }
  if (v6) {
    kaldi::KaldiAssertFailure_((kaldi *)"RealFft", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/matrix-functions.cc", (const char *)&stru_158.reloff + 3, "N%2 == 0", a5);
  }
  if (v6)
  {
    char v8 = a2;
    if (a2)
    {
      kaldi::ComplexFft<float>(a1, 1, 0, a4, a5);
      int v9 = -1;
    }
    else
    {
      int v9 = 1;
    }
    int v10 = *(float **)a1;
    float v11 = 6.28318531 / (double)(int)v6 * (double)v9;
    __float2 v14 = __sincosf_stret(v11);
    if ((int)v6 >= 4)
    {
      float v15 = (float)-v9;
      int v16 = (v7 >> 1) - 1;
      int v17 = 2 * (v7 >> 1) - 1;
      uint64_t v18 = v10 + 3;
      uint64_t v19 = &v10[v6 - 1];
      float v20 = 0.0;
      uint64_t v21 = 2;
      uint64_t v22 = 1;
      do
      {
        float v23 = -(float)(v20 * v14.__sinval);
        float v20 = (float)(v14.__cosval * v20) + (float)(v15 * v14.__sinval);
        float v15 = v23 + (float)(v15 * v14.__cosval);
        float v24 = *(v18 - 1);
        float v25 = *(v19 - 1);
        float v26 = (float)(v24 + v25) * 0.5;
        float v27 = (float)(*v18 - *v19) * 0.5;
        float v28 = (float)(*v18 + *v19) * 0.5;
        float v29 = (float)(v24 - v25) * -0.5;
        float v30 = (float)(v20 * v28) + (float)(v15 * v29);
        *(v18 - 1) = v26 + (float)((float)(v15 * v28) - (float)(v20 * v29));
        float *v18 = v27 + v30;
        if (v22 != v16)
        {
          v10[v17 - 1] = v26 + (float)((float)(v20 * v29) - (float)(v15 * v28));
          v10[v17] = v30 - v27;
        }
        ++v22;
        v21 += 2;
        --v16;
        v17 -= 2;
        v18 += 2;
        v19 -= 2;
      }
      while (v21 <= v7 >> 1);
    }
    float v31 = v10[1];
    float v32 = *v10 + v31;
    float v33 = *v10 - v31;
    *int v10 = v32;
    v10[1] = v33;
    if ((v8 & 1) == 0)
    {
      *int v10 = v32 * 0.5;
      v10[1] = v33 * 0.5;
      kaldi::ComplexFft<float>(a1, 0, 0, *(void *)&v12, v13);
      kaldi::VectorBase<float>::Scale(a1, 2.0);
    }
  }
}

uint64_t std::vector<kaldi::Matrix<float>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::Matrix<float>>,std::reverse_iterator<kaldi::Matrix<float>*>,std::reverse_iterator<kaldi::Matrix<float>*>,std::reverse_iterator<kaldi::Matrix<float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::Matrix<float>>,std::reverse_iterator<kaldi::Matrix<float>*>,std::reverse_iterator<kaldi::Matrix<float>*>,std::reverse_iterator<kaldi::Matrix<float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 40;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = v11 + v10;
    v10 -= 40;
    kaldi::Matrix<float>::Matrix(v12, v10 + a3);
  }
  return a6;
}

uint64_t std::__split_buffer<kaldi::Matrix<float>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    kaldi::Matrix<float>::~Matrix(i - 40);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = kaldi::Matrix<float>::~Matrix(v4 - 40);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void kaldi::SplitRadixComplexFft<float>::SplitRadixComplexFft(uint64_t a1, int a2, int8x8_t a3)
{
  unsigned int v3 = a2;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (a2 >= 2)
  {
    a3.i32[0] = a2;
    uint8x8_t v4 = (uint8x8_t)vcnt_s8(a3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.i32[0] < 2u)
    {
      int v5 = 0;
      *(_DWORD *)(a1 + 24) = a2;
      do
      {
        ++v5;
        BOOL v6 = v3 >= 3;
        BOOL v7 = v3 == 3;
        v3 >>= 1;
      }
      while (!v7 && v6);
      *(_DWORD *)(a1 + 28) = v5;
      kaldi::SplitRadixComplexFft<float>::ComputeTables();
    }
  }
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8, "SplitRadixComplexFft", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/srfft.cc", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"SplitRadixComplexFft called with invalid number of points ", 58);
  std::ostream::operator<<();
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
}

void sub_B7F2C(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::SplitRadixComplexFft<float>::ComputeTables()
{
}

uint64_t kaldi::SplitRadixComplexFft<float>::Compute(uint64_t a1, float *a2, float *a3, int a4)
{
  if (a4) {
    int v5 = a3;
  }
  else {
    int v5 = a2;
  }
  if (a4) {
    BOOL v6 = a2;
  }
  else {
    BOOL v6 = a3;
  }
  uint64_t result = kaldi::SplitRadixComplexFft<float>::ComputeRecursive(a1, v6, v5, *(_DWORD *)(a1 + 28));
  int v8 = *(_DWORD *)(a1 + 28);
  if (v8 >= 2)
  {
    kaldi::SplitRadixComplexFft<float>::BitReversePermute(a1, (uint64_t)v6, v8);
    int v9 = *(_DWORD *)(a1 + 28);
    return kaldi::SplitRadixComplexFft<float>::BitReversePermute(a1, (uint64_t)v5, v9);
  }
  return result;
}

uint64_t kaldi::SplitRadixComplexFft<float>::ComputeRecursive(uint64_t result, float *a2, float *a3, unsigned int a4)
{
  if ((a4 & 0x80000000) != 0)
  {
LABEL_30:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v84, "ComputeRecursive", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/srfft.cc", 202);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v84, "Error: logn is out of bounds in SRFFT");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v84);
  }
  uint64_t v6 = result;
  uint64_t v7 = a4;
  while ((unint64_t)v7 > 2)
  {
    int v8 = 1 << v7;
    if (1 << v7 >= 0) {
      int v9 = 1 << v7;
    }
    else {
      int v9 = v8 + 1;
    }
    int v10 = v9 >> 1;
    int v11 = v8 / 4;
    uint64_t v12 = (uint64_t)v9 >> 1;
    if (v8 >= 0) {
      int v13 = 1 << v7;
    }
    else {
      int v13 = v8 + 7;
    }
    __float2 v14 = &a2[v10];
    float v15 = &a3[v10];
    if (v8 >= 2)
    {
      int v16 = a3;
      int v17 = a2;
      do
      {
        float v18 = v17[v12];
        float v19 = *v17 + v18;
        v17[v12] = *v17 - v18;
        *v17++ = v19;
        float v20 = *v16;
        float v21 = v16[v12];
        v16[v12] = *v16 - v21;
        *v16++ = v20 + v21;
        --v10;
      }
      while (v10);
      if (v8 >= 4)
      {
        int v22 = v8 / 4;
        float v23 = v15;
        float v24 = v14;
        do
        {
          float v25 = *v24 + v23[v11];
          float v26 = v24[v11];
          float v27 = *v23 + v26;
          *float v23 = *v23 - v26;
          v24[v11] = *v24 - v23[v11];
          *v24++ = v25;
          v23[v11] = v27;
          ++v23;
          --v22;
        }
        while (v22);
      }
    }
    if (v7 < 4)
    {
      float v28 = 0;
      float v30 = 0;
      float v31 = 0;
      float v32 = 0;
      float v33 = 0;
      uint64_t v34 = 0;
    }
    else
    {
      float v28 = *(float **)(*(void *)(v6 + 40) + 8 * (v7 - 4));
      uint64_t v29 = 4 * v11 - 8;
      float v30 = (float *)((char *)v28 + v29);
      float v31 = (float *)((char *)v28 + v29 + v29);
      float v32 = (float *)((char *)v31 + v29);
      float v33 = (float *)((char *)v31 + v29 + v29);
      uint64_t v34 = (float *)((char *)v33 + v29);
    }
    if (v8 >= 8)
    {
      uint64_t v35 = 0;
      int v36 = v13 >> 3;
      if (v11 <= 2) {
        int v37 = 2;
      }
      else {
        int v37 = v11;
      }
      uint64_t v38 = (uint64_t)&a2[v12 + 1];
      uint64_t v39 = (uint64_t)&v14[v11 + 1];
      uint64_t v40 = (uint64_t)&a3[v12 + 1];
      uint64_t v41 = (uint64_t)&v15[v11 + 1];
      int v42 = v37 - 1;
      int v43 = v36 - 1;
      do
      {
        if (v43 == v35)
        {
          float v44 = *(float *)(v38 + 4 * v35);
          float v45 = *(float *)(v40 + 4 * v35);
          *(float *)(v40 + 4 * v35) = (float)(v45 - v44) * 0.70711;
          *(float *)(v38 + 4 * v35) = (float)(v44 + v45) * 0.70711;
          float v46 = *(float *)(v41 + 4 * v35);
          float v47 = *(float *)(v39 + 4 * v35);
          *(float *)(v41 + 4 * v35) = (float)(v46 + v47) * -0.70711;
          *(float *)(v39 + 4 * v35) = (float)(v46 - v47) * 0.70711;
        }
        else
        {
          float v48 = *v28++;
          float v49 = *(float *)(v38 + 4 * v35);
          float v50 = *(float *)(v40 + 4 * v35);
          float v51 = v48 * (float)(v49 + v50);
          float v52 = *v30++;
          float v53 = v52;
          float v54 = *v31++;
          *(float *)(v38 + 4 * v35) = v51 + (float)(v54 * v50);
          *(float *)(v40 + 4 * v35) = v51 + (float)(v53 * v49);
          float v55 = *v32++;
          float v56 = *(float *)(v39 + 4 * v35);
          float v57 = *(float *)(v41 + 4 * v35);
          float v58 = v55 * (float)(v56 + v57);
          float v59 = *v33++;
          float v60 = v59;
          float v61 = *v34++;
          *(float *)(v39 + 4 * v35) = v58 + (float)(v61 * v57);
          *(float *)(v41 + 4 * v35) = v58 + (float)(v60 * v56);
        }
        ++v35;
      }
      while (v42 != v35);
    }
    kaldi::SplitRadixComplexFft<float>::ComputeRecursive(v6, a2, a3, (v7 - 1));
    uint64_t result = kaldi::SplitRadixComplexFft<float>::ComputeRecursive(v6, v14, v15, v7 - 2);
    a2 += 3 * v11;
    a3 += 3 * v11;
    BOOL v62 = v7 < 2;
    v7 -= 2;
    if (v62) {
      goto LABEL_30;
    }
  }
  if (v7 == 1)
  {
    float v80 = a2[1];
    float v81 = *a2 - v80;
    *a2 = *a2 + v80;
    a2[1] = v81;
    float v82 = a3[1];
    float v83 = *a3 - v82;
    *a3 = *a3 + v82;
    a3[1] = v83;
  }
  else if (v7 == 2)
  {
    float v63 = a2[2];
    float v64 = *a2 + v63;
    a2[2] = *a2 - v63;
    *a2 = v64;
    float v65 = a3[2];
    float v66 = *a3 + v65;
    a3[2] = *a3 - v65;
    *a3 = v66;
    float v67 = a2[1];
    float v68 = a2[3];
    a2[3] = v67 - v68;
    a2[1] = v67 + v68;
    float v69 = a3[1];
    float v70 = a3[3];
    a3[3] = v69 - v70;
    a3[1] = v69 + v70;
    float v71 = a2[1];
    float v72 = *a2 - v71;
    *a2 = *a2 + v71;
    a2[1] = v72;
    float v73 = a3[1];
    float v74 = *a3 - v73;
    *a3 = *a3 + v73;
    a3[1] = v74;
    float v76 = a3[2];
    float v75 = a3[3];
    float v77 = a2[3];
    float v78 = a2[2] + v75;
    a3[2] = v76 - v77;
    float v79 = a2[2] - v75;
    a2[2] = v78;
    a2[3] = v79;
    a3[3] = v76 + v77;
  }
  return result;
}

void sub_B8620(uint64_t a1, ...)
{
  va_start(va, a1);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::SplitRadixComplexFft<float>::BitReversePermute(uint64_t result, uint64_t a2, int a3)
{
  int v3 = a3 >> 1;
  uint64_t v4 = (1 << (a3 >> 1));
  if ((int)v4 >= 2)
  {
    uint64_t v5 = *(void *)(result + 32);
    uint64_t v6 = a2 + 4 * v4 + 4;
    for (uint64_t i = 1; i != v4; ++i)
    {
      int v8 = *(_DWORD *)(v5 + 4 * i);
      int v9 = v8 << v3;
      int v10 = *(_DWORD *)(a2 + 4 * i);
      *(_DWORD *)(a2 + 4 * i) = *(_DWORD *)(a2 + 4 * (v8 << v3));
      *(_DWORD *)(a2 + 4 * (v8 << v3)) = v10;
      if (v8 >= 2)
      {
        int v11 = v8 - 1;
        uint64_t v12 = (int *)(v5 + 4);
        uint64_t result = v6;
        do
        {
          int v13 = *v12++;
          int v14 = *(_DWORD *)result;
          *(_DWORD *)uint64_t result = *(_DWORD *)(a2 + 4 * (v13 + v9));
          *(_DWORD *)(a2 + 4 * (v13 + v9)) = v14;
          result += 4 * (1 << (a3 >> 1));
          --v11;
        }
        while (v11);
      }
      v6 += 4;
    }
  }
  return result;
}

float kaldi::SplitRadixComplexFft<float>::Compute(uint64_t a1, _DWORD *a2, int a3, float **a4, const char *a5)
{
  if (!a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"Compute", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/srfft.cc", &stru_68.segname[13], "temp_buffer != NULL", a5);
  }
  int v9 = *a4;
  int v10 = *(_DWORD *)(a1 + 24);
  if (v10 != a4[1] - *a4)
  {
    std::vector<float>::resize((uint64_t)a4, v10);
    int v9 = *a4;
    int v10 = *(_DWORD *)(a1 + 24);
  }
  if (v10 >= 1)
  {
    int v11 = a2 + 1;
    uint64_t v12 = a2;
    int v13 = v9;
    uint64_t v14 = v10;
    do
    {
      *v12++ = *(v11 - 1);
      int v15 = *v11;
      v11 += 2;
      *(_DWORD *)v13++ = v15;
      --v14;
    }
    while (v14);
  }
  memcpy(&a2[v10], v9, 4 * v10);
  kaldi::SplitRadixComplexFft<float>::Compute(a1, (float *)a2, (float *)&a2[*(int *)(a1 + 24)], a3);
  memcpy(v9, &a2[*(int *)(a1 + 24)], 4 * *(int *)(a1 + 24));
  uint64_t v16 = *(unsigned int *)(a1 + 24);
  if ((int)v16 > 1)
  {
    unint64_t v17 = v16 + 1;
    int v18 = 2 * v16 - 1;
    do
    {
      a2[v18 - 1] = a2[(v17 - 2)];
      a2[v18] = LODWORD(v9[(v17-- - 2)]);
      v18 -= 2;
    }
    while (v17 > 2);
  }
  float result = *v9;
  a2[1] = *(_DWORD *)v9;
  return result;
}

uint64_t kaldi::SplitRadixComplexFft<float>::~SplitRadixComplexFft(uint64_t a1)
{
  if (*(void *)(a1 + 32)) {
    operator delete[]();
  }
  if (*(void *)(a1 + 40))
  {
    int v2 = *(_DWORD *)(a1 + 28);
    if (v2 < 4) {
      goto LABEL_10;
    }
    uint64_t v3 = 0;
    do
    {
      if (*(void *)(*(void *)(a1 + 40) + 8 * v3)) {
        operator delete[]();
      }
      ++v3;
    }
    while (v3 < v2 - 3);
    if (*(void *)(a1 + 40)) {
LABEL_10:
    }
      operator delete[]();
  }
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

float kaldi::SplitRadixRealFft<float>::Compute(uint64_t a1, float *a2, int a3, float **a4, const char *a5)
{
  uint64_t v5 = *(unsigned int *)(a1 + 48);
  if ((int)v5 >= 0) {
    int v6 = *(_DWORD *)(a1 + 48);
  }
  else {
    int v6 = v5 + 1;
  }
  if (v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"Compute", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/matrix/srfft.cc", &stru_158.sectname[3], "N%2 == 0", a5);
  }
  char v8 = a3;
  int v9 = a2;
  if (a3)
  {
    kaldi::SplitRadixComplexFft<float>::Compute(a1, a2, 1, a4, a5);
    int v11 = -1;
  }
  else
  {
    int v11 = 1;
  }
  float v12 = 6.28318531 / (double)(int)v5 * (double)v11;
  __float2 v14 = __sincosf_stret(v12);
  if ((int)v5 >= 4)
  {
    float v15 = (float)-v11;
    int v16 = (v6 >> 1) - 1;
    int v17 = 2 * (v6 >> 1) - 1;
    int v18 = v9 + 3;
    float v19 = &v9[v5 - 1];
    float v20 = 0.0;
    uint64_t v21 = 2;
    uint64_t v22 = 1;
    do
    {
      float v23 = -(float)(v20 * v14.__sinval);
      float v20 = (float)(v14.__cosval * v20) + (float)(v15 * v14.__sinval);
      float v15 = v23 + (float)(v15 * v14.__cosval);
      float v24 = *(v18 - 1);
      float v25 = *(v19 - 1);
      float v26 = (float)(v24 + v25) * 0.5;
      float v27 = (float)(*v18 - *v19) * 0.5;
      float v28 = (float)(*v18 + *v19) * 0.5;
      float v29 = (float)(v24 - v25) * -0.5;
      float v30 = (float)(v20 * v28) + (float)(v15 * v29);
      *(v18 - 1) = v26 + (float)((float)(v15 * v28) - (float)(v20 * v29));
      float *v18 = v27 + v30;
      if (v22 != v16)
      {
        v9[v17 - 1] = v26 + (float)((float)(v20 * v29) - (float)(v15 * v28));
        v9[v17] = v30 - v27;
      }
      ++v22;
      v21 += 2;
      --v16;
      v17 -= 2;
      v18 += 2;
      v19 -= 2;
    }
    while (v21 <= v6 >> 1);
  }
  float v31 = v9[1];
  float v32 = *v9 + v31;
  float result = *v9 - v31;
  *int v9 = v32;
  v9[1] = result;
  if ((v8 & 1) == 0)
  {
    *int v9 = v32 * 0.5;
    v9[1] = result * 0.5;
    float result = kaldi::SplitRadixComplexFft<float>::Compute(a1, v9, 0, a4, v13);
    if ((int)v5 >= 1)
    {
      do
      {
        float result = *v9 + *v9;
        *v9++ = result;
        --v5;
      }
      while (v5);
    }
  }
  return result;
}

void sub_B8BDC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  std::ostream::sentry::~sentry();
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0xB8BBCLL);
}

void sub_B8C30(_Unwind_Exception *a1)
{
}

void sub_B8DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_B8ED8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFst()
{
}

void sub_B8F4C()
{
}

void fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Copy()
{
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    operator new();
  }
  return result;
}

void sub_B9074()
{
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::WriteFst<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(void *a1, void *a2, uint64_t a3)
{
  long long v35 = 0u;
  long long v36 = 0u;
  *(_OWORD *)float v33 = 0u;
  *(_OWORD *)uint64_t v34 = 0u;
  uint64_t v6 = -1;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v37 = -1;
  uint64_t v37 = (*(int (**)(void *))(*a1 + 24))(a1);
  uint64_t v38 = -1;
  if ((*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 1, 0))
  {
    uint64_t v6 = 0;
LABEL_3:
    int v7 = 0;
    uint64_t v38 = (int)fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>>>((uint64_t)a1);
    goto LABEL_6;
  }
  char v8 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr))(**((void **)v8 + 5) + 32))(__p);
    uint64_t v6 = v41;
    if (v41 != -1) {
      goto LABEL_3;
    }
  }
  int v7 = 1;
LABEL_6:
  uint64_t v9 = (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  uint64_t v10 = v9 | 3;
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (unsigned char *)a3, 2, __p, v10, (uint64_t)v32);
  uint64_t v30 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  unint64_t v11 = *(void *)(a1[1] + 72) - *(void *)(a1[1] + 64);
  unint64_t v12 = v11 >> 3;
  if ((int)(v11 >> 3) < 1)
  {
    LODWORD(v1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = (v11 >> 3);
    do
    {
      LODWORD(__p[0].__r_.__value_.__l.__data_) = (*(float (**)(void *, uint64_t))(*a1 + 32))(a1, v13);
      std::ostream::write();
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(void *, uint64_t))(*a1 + 40))(a1, v13);
      std::ostream::write();
      uint64_t v15 = *(void *)(*(void *)(*(void *)(a1[1] + 64) + 8 * v13) + 24);
      uint64_t v16 = *(void *)(*(void *)(*(void *)(a1[1] + 64) + 8 * v13) + 32) - v15;
      if (v16)
      {
        unint64_t v17 = v16 >> 4;
        if (v17 <= 1) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = v17;
        }
        float v19 = (_DWORD *)(v15 + 8);
        do
        {
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(v19 - 2);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(v19 - 1);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *v19;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v19[1];
          std::ostream::write();
          v19 += 4;
          --v18;
        }
        while (v18);
      }
      ++v13;
    }
    while (v13 != v14);
  }
  std::ostream::flush();
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    float v20 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)__p);
    uint64_t v21 = fst::cerr(v20);
    uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"VectorFst::Write: write failed: ", 32);
    int v23 = *(char *)(a3 + 23);
    if (v23 >= 0) {
      uint64_t v24 = a3;
    }
    else {
      uint64_t v24 = *(void *)a3;
    }
    if (v23 >= 0) {
      uint64_t v25 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v25 = *(void *)(a3 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
LABEL_27:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v31);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    uint64_t updated = 0;
    goto LABEL_30;
  }
  if (!v7)
  {
    if (v38 == v12)
    {
      uint64_t updated = 1;
      goto LABEL_30;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    float v28 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)__p);
    float v29 = fst::cerr(v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_27;
  }
  uint64_t v38 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  uint64_t updated = fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v10, (uint64_t)v32, v30);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
LABEL_30:
  if (SHIBYTE(v35) < 0) {
    operator delete(v34[1]);
  }
  if (SHIBYTE(v34[0]) < 0) {
    operator delete(v33[0]);
  }
  return updated;
}

void sub_B954C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a15);
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::WriteFile(fst *a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(void *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream((void (__cdecl ***)(std::ofstream *__hidden))&v20);
      if ((v24[*(void *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        uint64_t v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        uint64_t v5 = fst::cerr(v4);
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        int v7 = *(char *)(a2 + 23);
        if (v7 >= 0) {
          char v8 = (const std::string::value_type *)a2;
        }
        else {
          char v8 = *(const std::string::value_type **)a2;
        }
        if (v7 >= 0) {
          uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v9 = *(void *)(a2 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v10 = 0;
      }
      else
      {
        char v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string __p = *(std::string *)a2;
        }
        __int16 v16 = 257;
        char v17 = 1;
        char v18 = v13;
        uint64_t v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(void *)a1 + 88))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      std::filebuf::~filebuf();
      std::ostream::~ostream();
      std::ios::~ios();
      return v10;
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    goto LABEL_5;
  }
  unint64_t v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  char v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v20 = __p;
  }
  __int16 v21 = 257;
  char v22 = 1;
  char v23 = v12;
  uint64_t v10 = (*(uint64_t (**)(fst *, std::ostream *, std::string *))(*(void *)a1 + 88))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_B98E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

void fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  uint64_t v4 = (void **)(*(void *)(a1 + 8) + 64);

  std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::reserve(v4, a2);
}

void fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  uint64_t v6 = (void **)(*(void *)(*(void *)(*(void *)(a1 + 8) + 64) + 8 * a2) + 24);

  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::reserve(v6, a3);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(void *)(v2 + 72) - *(void *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::InitArcIterator(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 8);
  *a3 = 0;
  uint64_t v5 = (uint64_t *)(*(void *)(*(void *)(v3 + 64) + 8 * a2) + 24);
  uint64_t v4 = *v5;
  uint64_t v6 = (v5[1] - *v5) >> 4;
  if (v5[1] == *v5) {
    uint64_t v4 = 0;
  }
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

void fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::InitMutableArcIterator()
{
}

void sub_B9ACC()
{
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Done_(uint64_t a1)
{
  return *(void *)(a1 + 24) >= (unint64_t)((uint64_t)(*(void *)(*(void *)(a1 + 8) + 32)
                                                            - *(void *)(*(void *)(a1 + 8) + 24)) >> 4);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Value_(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 24) + 16 * *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Position_(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Reset_(uint64_t result)
{
  *(void *)(result + ++*(void *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(void *)(result + ++*(void *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Flags_()
{
  return 15;
}

void fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorFst(void *a1)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::~ImplToFst(a1);

  operator delete();
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetStart(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  *(void *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(void *)(v4 + 8) & 4;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetFinal(uint64_t a1, int a2, float a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);

  return fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetFinal(v6, a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 & 4;
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), v6);
  if (result != (v6 & a2)) {
    uint64_t result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  }
  *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::AddState(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(void *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

void fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::AddArc(uint64_t a1, int a2, float *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);

  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddArc(v6, a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteStates(uint64_t a1, char **a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteStates((uint64_t)v4, a2);
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteStates(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  uint64_t v2 = *(void **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>>>>>>::DeleteStates((uint64_t)v2);
  uint64_t result = (*(uint64_t (**)(void *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  uint64_t v6 = *(void **)(a1 + 8);
  fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>>>>>::DeleteArcs(*(void **)(v6[8] + 8 * a2), a3);
  uint64_t result = (*(uint64_t (**)(void *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteArcs(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = *(void **)(v4[8] + 8 * a2);
  v5[1] = 0;
  v5[2] = 0;
  v5[4] = v5[3];
  uint64_t result = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutableInputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutableOutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);

  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetInputSymbols(v4, a2);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);

  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetOutputSymbols(v4, a2);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFstImpl(uint64_t a1)
{
  *(void *)a1 = off_25D080;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 7std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(void *)a1 = off_25CFD0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_BA18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

void std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]()
{
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::WriteFstHeader(uint64_t a1, uint64_t a2, unsigned char *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    char v13 = (const std::string *)fst::ArcTpl<fst::TropicalWeightTpl<float>>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(void *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
      BOOL v14 = a3[25] == 0;
    }
    else {
      BOOL v14 = 1;
    }
    int v15 = !v14;
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
    if (a3[26]) {
      BOOL v17 = v16 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    int v18 = v15 | 2;
    if (v17) {
      int v18 = v15;
    }
    if (a3[27]) {
      v18 |= 4u;
    }
    *(_DWORD *)(a7 + --*(_DWORD *)(a9 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    BOOL v19 = a3[25] == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 72))(v20, a2);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  if (result && a3[26])
  {
    char v22 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1) + 72);
    return v22();
  }
  return result;
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::UpdateFstHeader(uint64_t a1, void *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::ostream::sentry::sentry();
  uint64_t v16 = (char *)a2 + *(void *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    uint64_t v17 = *((void *)v16 + 5);
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long __p = 0u;
    long long v34 = 0u;
    uint64_t v41 = a8;
    (*(void (**)(void *__return_ptr))(*(void *)v17 + 40))(v32);
    if (v32[16] == -1) {
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
    }
  }
  std::ostream::sentry::~sentry();
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    int v18 = fst::LogMessage::LogMessage((fst *)v32, (uint64_t)&__p);
    BOOL v19 = fst::cerr(v18);
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    int v21 = *(char *)(a3 + 23);
    if (v21 >= 0) {
      uint64_t v22 = a3;
    }
    else {
      uint64_t v22 = *(void *)a3;
    }
    if (v21 >= 0) {
      uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v23 = *(void *)(a3 + 8);
    }
  }
  else
  {
    fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::WriteFstHeader(a1, (uint64_t)a2, (unsigned char *)a3, a4, a5, a6, a7);
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      uint64_t v24 = fst::LogMessage::LogMessage((fst *)v32, (uint64_t)&__p);
      uint64_t v25 = fst::cerr(v24);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v26 = *(char *)(a3 + 23);
      if (v26 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v26 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
    else
    {
      std::ostream::sentry::sentry();
      float v27 = (char *)a2 + *(void *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(long long *__return_ptr))(**((void **)v27 + 5) + 32))(&__p);
        if (v41 == -1) {
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32) | 4);
        }
      }
      std::ostream::sentry::~sentry();
      if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) == 0) {
        return 1;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      float v28 = fst::LogMessage::LogMessage((fst *)v32, (uint64_t)&__p);
      float v29 = fst::cerr(v28);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      int v30 = *(char *)(a3 + 23);
      if (v30 >= 0) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = *(void *)a3;
      }
      if (v30 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a3 + 8);
      }
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v32);
  if (SBYTE7(v34) < 0) {
    operator delete((void *)__p);
  }
  return 0;
}

void sub_BA784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

void sub_BA974(_Unwind_Exception *a1)
{
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::SetFinal(void *a1, int a2, float a3)
{
  uint64_t v5 = *(float **)(a1[8] + 8 * a2);
  float v6 = *v5;
  float *v5 = a3;
  unint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  uint64_t result = fst::SetFinalProperties<fst::LogWeightTpl<float>>(v7, v6, a3);
  a1[1] = a1[1] & 4 | result;
  return result;
}

void fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddArc(void *a1, int a2, float *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1[8] + 8 * a2) + 32);
  if (v6 == *(void *)(*(void *)(a1[8] + 8 * a2) + 24)) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = (_DWORD *)(v6 - 16);
  }
  unint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>>>>(v8, a2, a3, v7);
  uint64_t v9 = *(void **)(a1[8] + 8 * a2);

  fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::AddArc(v9, a3);
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteStates(uint64_t a1, char **a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 64);
  std::vector<int>::size_type v5 = (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3;
  std::vector<int>::value_type __x = 0;
  std::vector<int>::vector(&v32, v5, &__x);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1] - *a2;
  if (v7)
  {
    unint64_t v8 = v7 >> 2;
    std::vector<int>::pointer begin = v32.__begin_;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      uint64_t v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  uint64_t v11 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v11)
  {
    int v13 = 0;
  }
  else
  {
    unint64_t v12 = 0;
    int v13 = 0;
    do
    {
      if (v32.__begin_[v12] == -1)
      {
        fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(*(void **)(v11 + 8 * v12));
      }
      else
      {
        v32.__begin_[v12] = v13;
        if (v12 != v13) {
          *(void *)(v11 + 8 * v13) = *(void *)(v11 + 8 * v12);
        }
        ++v13;
      }
      ++v12;
      uint64_t v11 = *(void *)(a1 + 64);
    }
    while (v12 < (*(void *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::resize((uint64_t)v4, v13);
  uint64_t v14 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) != v14)
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(void *)(v14 + 8 * v15);
      uint64_t v18 = *(void *)(v16 + 24);
      uint64_t v17 = *(void *)(v16 + 32);
      int64x2_t v19 = *(int64x2_t *)(v16 + 8);
      uint64_t v20 = v17 - v18;
      if (v17 == v18)
      {
        int64x2_t v30 = *(int64x2_t *)(v16 + 8);
        uint64_t v26 = 0;
        uint64_t v27 = v20 >> 4;
      }
      else
      {
        unint64_t v21 = 0;
        uint64_t v26 = 0;
        uint64_t v22 = *(void *)(v16 + 24);
        do
        {
          int v23 = v32.__begin_[*(int *)(v22 + 12)];
          if (v23 == -1)
          {
            v24.i64[0] = *(void *)v22;
            v24.i64[1] = HIDWORD(*(void *)v22);
            int64x2_t v19 = vaddq_s64(v19, vceqzq_s64(v24));
          }
          else
          {
            *(_DWORD *)(v22 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v23;
            if (v21 != v26)
            {
              *(_OWORD *)(v18 + 16 * v26) = *(_OWORD *)v22;
              uint64_t v14 = *v4;
            }
            ++v26;
          }
          uint64_t v16 = *(void *)(v14 + 8 * v15);
          ++v21;
          uint64_t v25 = *(void *)(v16 + 32) - *(void *)(v16 + 24);
          v22 += 16;
        }
        while (v21 < v25 >> 4);
        int64x2_t v30 = v19;
        uint64_t v27 = v25 >> 4;
      }
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>>>>>::DeleteArcs((void *)v16, v27 - v26);
      uint64_t v14 = *(void *)(a1 + 64);
      *(int64x2_t *)(*(void *)(v14 + 8 * v15++) + 8) = v30;
    }
    while (v15 < (*(void *)(a1 + 72) - v14) >> 3);
  }
  uint64_t v28 = *(int *)(a1 + 88);
  if (v28 == -1)
  {
    float v29 = v32.__begin_;
    if (!v32.__begin_) {
      return;
    }
  }
  else
  {
    float v29 = v32.__begin_;
    *(_DWORD *)(a1 + 88) = v32.__begin_[v28];
  }
  v32.__end_ = v29;
  operator delete(v29);
}

void sub_BAE34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__append((void **)a1, a2 - v2);
  }
}

void sub_BAEEC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  std::vector<int>::size_type v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v12);
    }
    else {
      int v13 = 0;
    }
    uint64_t v14 = &v13[8 * v10];
    unint64_t v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    uint64_t v16 = &v14[8 * a2];
    uint64_t v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

unint64_t fst::ComposeProperties(unint64_t this, uint64_t a2)
{
  uint64_t v2 = (a2 | this) & 4;
  unint64_t v3 = a2 & this;
  unint64_t v4 = a2 & this & 0x2802010000 | v2 | 0x10000000000;
  if ((a2 & this & 0x2000000) != 0) {
    v4 |= a2 & this & 0x40000;
  }
  uint64_t v5 = v3 & 0x280A800000 | v2 | 0x10000010000;
  if ((v3 & 0x2000000) != 0) {
    v5 |= v3 & 0x140000;
  }
  if ((v3 & 0x10000) != 0) {
    return v5;
  }
  else {
    return v4;
  }
}

unint64_t fst::FactorWeightProperties(unint64_t this)
{
  uint64_t v1 = 0x50CA56B0007;
  if ((this & 0x10000000000) == 0) {
    uint64_t v1 = 0x50800010007;
  }
  return v1 & this;
}

unint64_t fst::ProjectProperties(unint64_t this, int a2)
{
  unint64_t v2 = this & 0x3FFF00000007 | 0x10000;
  unint64_t v3 = (this >> 2) & 0xC0000 | this & 0xCC300000 | v2;
  if ((this & 0x4000000) != 0) {
    v3 |= 0x1400000uLL;
  }
  if ((this & 0x8000000) != 0) {
    v3 |= 0x2800000uLL;
  }
  unint64_t v4 = (this >> 2) & 0x30000000 | v3;
  unint64_t v5 = this & 0x330C0000 | (((this >> 18) & 3) << 20) | v2;
  if ((this & 0x1000000) != 0) {
    v5 |= 0x4400000uLL;
  }
  if ((this & 0x2000000) != 0) {
    v5 |= 0x8800000uLL;
  }
  unint64_t v6 = (4 * this) & 0xC0000000 | v5;
  if (a2) {
    return v6;
  }
  else {
    return v4;
  }
}

unint64_t fst::ReverseProperties(unint64_t this, int a2)
{
  uint64_t v2 = 0xE05430007;
  if (a2) {
    uint64_t v2 = 0xF05430007;
  }
  return v2 & this;
}

unint64_t fst::ReweightProperties(unint64_t this)
{
  return this & 0x3BFCFFFF0007;
}

std::string *fst::SymbolTableImpl::SymbolTableImpl(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  fst::internal::DenseSymbolMap::DenseSymbolMap((fst::internal::DenseSymbolMap *)&this[1].__r_.__value_.__r.__words[2]);
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  this[6].__r_.__value_.__r.__words[2] = 0;
  this[6].__r_.__value_.__l.__size_ = 0;
  this[5].__r_.__value_.__r.__words[2] = 0;
  this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)&this[6].__r_.__value_.__l.__size_;
  LODWORD(this[7].__r_.__value_.__l.__data_) = 1;
  this[7].__r_.__value_.__s.__data_[4] = 0;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[8].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[8].__r_.__value_.__r.__words[2] = 0u;
  return this;
}

void sub_BB250(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::SymbolTableImpl::AddSymbol(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v35 = a3;
  if (a3 == -1) {
    return -1;
  }
  unint64_t v6 = fst::internal::DenseSymbolMap::InsertOrFind((fst::internal::DenseSymbolMap *)(a1 + 40), a2);
  if (v7)
  {
    if (((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3) - 1 == a3 && *(void *)(a1 + 32) == a3)
    {
      *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a3 + 1;
      uint64_t v9 = a3;
    }
    else
    {
      unint64_t v10 = *(void *)(a1 + 136);
      uint64_t v11 = *(uint64_t **)(a1 + 128);
      if ((unint64_t)v11 >= v10)
      {
        uint64_t v22 = *(uint64_t **)(a1 + 120);
        uint64_t v23 = v11 - v22;
        if ((unint64_t)(v23 + 1) >> 61) {
          std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v24 = v10 - (void)v22;
        unint64_t v25 = (uint64_t)(v10 - (void)v22) >> 2;
        if (v25 <= v23 + 1) {
          unint64_t v25 = v23 + 1;
        }
        if (v24 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v25;
        }
        if (v26)
        {
          uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 136, v26);
          uint64_t v22 = *(uint64_t **)(a1 + 120);
          uint64_t v11 = *(uint64_t **)(a1 + 128);
        }
        else
        {
          uint64_t v27 = 0;
        }
        uint64_t v28 = (uint64_t *)&v27[8 * v23];
        float v29 = &v27[8 * v26];
        uint64_t *v28 = a3;
        unint64_t v12 = v28 + 1;
        while (v11 != v22)
        {
          uint64_t v30 = *--v11;
          *--uint64_t v28 = v30;
        }
        *(void *)(a1 + 120) = v28;
        *(void *)(a1 + 128) = v12;
        *(void *)(a1 + 136) = v29;
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        uint64_t *v11 = a3;
        unint64_t v12 = v11 + 1;
      }
      *(void *)(a1 + 128) = v12;
      uint64_t v31 = ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3) - 1;
      __p[0] = &v35;
      std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 144), &v35, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)[5] = v31;
      uint64_t v9 = v35;
    }
    if (v9 >= *(void *)(a1 + 24)) {
      *(void *)(a1 + ++*(void *)(result + 24) = v9 + 1;
    }
    *(unsigned char *)(a1 + 17std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  }
  else
  {
    unint64_t NthKey = fst::SymbolTableImpl::GetNthKey((fst::SymbolTableImpl *)a1, v6);
    if (NthKey == a3)
    {
      return a3;
    }
    else
    {
      uint64_t v9 = NthKey;
      if (FLAGS_v >= 1)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        int v13 = fst::LogMessage::LogMessage((fst *)&v36, (uint64_t)__p);
        uint64_t v14 = fst::cerr(v13);
        unint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"SymbolTable::AddSymbol: symbol = ", 33);
        int v16 = *(char *)(a2 + 23);
        if (v16 >= 0) {
          uint64_t v17 = a2;
        }
        else {
          uint64_t v17 = *(void *)a2;
        }
        if (v16 >= 0) {
          uint64_t v18 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v18 = *(void *)(a2 + 8);
        }
        uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" already in symbol_map_ with key = ", 35);
        uint64_t v20 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" but supplied new key = ", 24);
        unint64_t v21 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" (ignoring new key)", 19);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v36);
        if (v34 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return v9;
}

void sub_BB4E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::SymbolTableImpl::MaybeRecomputeCheckSum(fst::SymbolTableImpl *this)
{
  if (!*((unsigned char *)this + 172))
  {
    fst::CheckSummer::CheckSummer((fst::CheckSummer *)&v67);
    uint64_t v2 = *((void *)this + 6);
    if (*((void *)this + 7) != v2)
    {
      unint64_t v3 = 0;
      do
      {
        unint64_t v4 = *(char **)(v2 + 8 * v3);
        size_t v5 = strlen(v4);
        std::string::basic_string[abi:ne180100](__p, v4, v5);
        int v6 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        char v7 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        uint64_t v8 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int v6 = __p[0].__r_.__value_.__r.__words[1];
        }
        else {
          uint64_t v8 = __p;
        }
        if (v6 >= 1)
        {
          uint64_t v9 = v6;
          do
          {
            std::string::value_type v11 = v8->__r_.__value_.__s.__data_[0];
            uint64_t v8 = (std::string *)((char *)v8 + 1);
            std::string::value_type v10 = v11;
            int v12 = v67++;
            BOOL v13 = -v12 < 0;
            int v14 = -v12 & 0x1F;
            int v15 = v12 & 0x1F;
            if (!v13) {
              int v15 = -v14;
            }
            if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v16 = &v68;
            }
            else {
              int v16 = (std::string *)v68.__r_.__value_.__r.__words[0];
            }
            v16->__r_.__value_.__s.__data_[v15] ^= v10;
            --v9;
          }
          while (v9);
          char v7 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        }
        ++v67;
        if (v7 < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
        ++v3;
        uint64_t v2 = *((void *)this + 6);
      }
      while (v3 < (*((void *)this + 7) - v2) >> 3);
    }
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(__p, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
    }
    else {
      __p[0] = v68;
    }
    uint64_t v17 = (void **)((char *)this + 176);
    if (*((char *)this + 199) < 0) {
      operator delete(*v17);
    }
    *(_OWORD *)uint64_t v17 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
    *((void *)this + ++*(void *)(result + 24) = *((void *)&__p[0].__r_.__value_.__l + 2);
    fst::CheckSummer::CheckSummer((fst::CheckSummer *)&v65);
    if (*((uint64_t *)this + 4) >= 1)
    {
      uint64_t v18 = 0;
      do
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
        size_t v21 = strlen(*(const char **)(*((void *)this + 6) + 8 * v18));
        std::string::basic_string[abi:ne180100](&__dst, *(void **)(*((void *)this + 6) + 8 * v18), v21);
        if ((v61 & 0x80u) == 0) {
          p_dst = &__dst;
        }
        else {
          p_dst = __dst;
        }
        if ((v61 & 0x80u) == 0) {
          uint64_t v23 = v61;
        }
        else {
          uint64_t v23 = v60;
        }
        unint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)p_dst, v23);
        LOBYTE(v56) = 9;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)&v56, 1);
        std::ostream::operator<<();
        if ((char)v61 < 0) {
          operator delete(__dst);
        }
        std::stringbuf::str();
        if ((v61 & 0x80u) == 0) {
          unint64_t v25 = (char *)&__dst;
        }
        else {
          unint64_t v25 = (char *)__dst;
        }
        std::stringbuf::str();
        int v26 = v58;
        unsigned __int8 v27 = v58;
        if ((v58 & 0x80u) != 0) {
          int v26 = v57;
        }
        if (v26 >= 1)
        {
          uint64_t v28 = v26;
          do
          {
            char v30 = *v25++;
            char v29 = v30;
            int v31 = v65++;
            BOOL v13 = -v31 < 0;
            int v32 = -v31 & 0x1F;
            int v33 = v31 & 0x1F;
            if (!v13) {
              int v33 = -v32;
            }
            if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              char v34 = &v66;
            }
            else {
              char v34 = (std::string *)v66.__r_.__value_.__r.__words[0];
            }
            v34->__r_.__value_.__s.__data_[v33] ^= v29;
            --v28;
          }
          while (v28);
          unsigned __int8 v27 = v58;
        }
        if ((v27 & 0x80) != 0) {
          operator delete(v56);
        }
        if ((char)v61 < 0) {
          operator delete(__dst);
        }
        __p[0].__r_.__value_.__r.__words[0] = v19;
        *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + *(void *)(v19 - 24)) = v20;
        if (v64 < 0) {
          operator delete(v63);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
        ++v18;
      }
      while (v18 < *((void *)this + 4));
    }
    uint64_t v35 = (fst::SymbolTableImpl *)*((void *)this + 18);
    if (v35 != (fst::SymbolTableImpl *)((char *)this + 152))
    {
      do
      {
        if (*((void *)v35 + 4) >= *((void *)this + 4))
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
          size_t v38 = strlen(*(const char **)(*((void *)this + 6) + 8 * *((void *)v35 + 5)));
          std::string::basic_string[abi:ne180100](&__dst, *(void **)(*((void *)this + 6) + 8 * *((void *)v35 + 5)), v38);
          if ((v61 & 0x80u) == 0) {
            long long v39 = &__dst;
          }
          else {
            long long v39 = __dst;
          }
          if ((v61 & 0x80u) == 0) {
            uint64_t v40 = v61;
          }
          else {
            uint64_t v40 = v60;
          }
          uint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v39, v40);
          LOBYTE(v56) = 9;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)&v56, 1);
          std::ostream::operator<<();
          if ((char)v61 < 0) {
            operator delete(__dst);
          }
          std::stringbuf::str();
          if ((v61 & 0x80u) == 0) {
            int v42 = (char *)&__dst;
          }
          else {
            int v42 = (char *)__dst;
          }
          std::stringbuf::str();
          int v43 = v58;
          unsigned __int8 v44 = v58;
          if ((v58 & 0x80u) != 0) {
            int v43 = v57;
          }
          if (v43 >= 1)
          {
            uint64_t v45 = v43;
            do
            {
              char v47 = *v42++;
              char v46 = v47;
              int v48 = v65++;
              BOOL v13 = -v48 < 0;
              int v49 = -v48 & 0x1F;
              int v50 = v48 & 0x1F;
              if (!v13) {
                int v50 = -v49;
              }
              if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                float v51 = &v66;
              }
              else {
                float v51 = (std::string *)v66.__r_.__value_.__r.__words[0];
              }
              v51->__r_.__value_.__s.__data_[v50] ^= v46;
              --v45;
            }
            while (v45);
            unsigned __int8 v44 = v58;
          }
          if ((v44 & 0x80) != 0) {
            operator delete(v56);
          }
          if ((char)v61 < 0) {
            operator delete(__dst);
          }
          __p[0].__r_.__value_.__r.__words[0] = v36;
          *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + *(void *)(v36 - 24)) = v37;
          if (v64 < 0) {
            operator delete(v63);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        float v52 = (fst::SymbolTableImpl *)*((void *)v35 + 1);
        if (v52)
        {
          do
          {
            float v53 = v52;
            float v52 = *(fst::SymbolTableImpl **)v52;
          }
          while (v52);
        }
        else
        {
          do
          {
            float v53 = (fst::SymbolTableImpl *)*((void *)v35 + 2);
            BOOL v54 = *(void *)v53 == (void)v35;
            uint64_t v35 = v53;
          }
          while (!v54);
        }
        uint64_t v35 = v53;
      }
      while (v53 != (fst::SymbolTableImpl *)((char *)this + 152));
    }
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(__p, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
    }
    else {
      __p[0] = v66;
    }
    float v55 = (void **)((char *)this + 200);
    if (*((char *)this + 223) < 0) {
      operator delete(*v55);
    }
    *(_OWORD *)float v55 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
    *((void *)this + 27) = *((void *)&__p[0].__r_.__value_.__l + 2);
    *((unsigned char *)this + 17std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 1;
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
  }
}

void sub_BBBC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (*(char *)(v18 - 121) < 0) {
    operator delete(*(void **)(v18 - 144));
  }
  if (*(char *)(v18 - 89) < 0) {
    operator delete(*(void **)(v18 - 112));
  }
  _Unwind_Resume(exception_object);
}

void sub_BBDBC(_Unwind_Exception *a1)
{
}

uint64_t fst::internal::DenseSymbolMap::InsertOrFind(fst::internal::DenseSymbolMap *this, uint64_t a2)
{
  if ((float)((float)(unint64_t)((uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 3) * 0.75) <= (float)(unint64_t)((uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 3)) {
    fst::internal::DenseSymbolMap::Rehash(this);
  }
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)this + 32, a2);
  uint64_t v5 = *((void *)this + 8);
  uint64_t v6 = *((void *)this + 5);
  uint64_t v7 = v4 & v5;
  uint64_t v8 = *(void *)(v6 + 8 * (v4 & v5));
  uint64_t v10 = *(void *)this;
  uint64_t v9 = *((void *)this + 1);
  if (v8 == *(void *)this)
  {
LABEL_9:
    *(void *)(v6 + 8 * v7) = (*((void *)this + 2) - v9) >> 3;
    operator new[]();
  }
  if (*(char *)(a2 + 23) >= 0) {
    std::string::value_type v11 = (const char *)a2;
  }
  else {
    std::string::value_type v11 = *(const char **)a2;
  }
  while (strcmp(*(const char **)(v9 + 8 * v8), v11))
  {
    uint64_t v7 = (v7 + 1) & v5;
    uint64_t v8 = *(void *)(v6 + 8 * v7);
    if (v8 == v10) {
      goto LABEL_9;
    }
  }
  return v8;
}

unint64_t fst::SymbolTableImpl::GetNthKey(fst::SymbolTableImpl *this, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0) {
    return -1;
  }
  unint64_t v2 = a2;
  uint64_t v4 = *((void *)this + 6);
  if (a2 >= (*((void *)this + 7) - v4) >> 3) {
    return -1;
  }
  if (*((void *)this + 4) <= (int64_t)a2)
  {
    uint64_t v5 = *(char **)(v4 + 8 * a2);
    size_t v6 = strlen(v5);
    std::string::basic_string[abi:ne180100](__p, v5, v6);
    uint64_t v7 = fst::internal::DenseSymbolMap::Find((uint64_t *)this + 5, (uint64_t)__p);
    unint64_t v2 = v7;
    if (v7 != -1)
    {
      uint64_t v8 = *((void *)this + 4);
      BOOL v9 = __OFSUB__(v7, v8);
      uint64_t v10 = v7 - v8;
      if (v10 < 0 == v9) {
        unint64_t v2 = *(void *)(*((void *)this + 15) + 8 * v10);
      }
    }
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  return v2;
}

BOOL fst::SymbolTableImpl::Write(uint64_t a1, void *a2)
{
  LODWORD(__p) = 2125658996;
  std::ostream::write();
  LODWORD(v4) = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  LODWORD(__p) = v4;
  std::ostream::write();
  std::ostream::write();
  long long __p = *(void **)(a1 + 24);
  std::ostream::write();
  long long __p = (void *)((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3);
  std::ostream::write();
  uint64_t v5 = *(void *)(a1 + 48);
  if (*(void *)(a1 + 56) != v5)
  {
    unint64_t v6 = 0;
    do
    {
      int64_t v7 = *(void *)(a1 + 32);
      uint64_t v8 = (void *)v6;
      if ((uint64_t)v6 >= v7) {
        uint64_t v8 = *(void **)(*(void *)(a1 + 120) - 8 * v7 + 8 * v6);
      }
      BOOL v9 = *(char **)(v5 + 8 * v6);
      size_t v10 = strlen(v9);
      std::string::basic_string[abi:ne180100](&__p, v9, v10);
      int v11 = v18;
      if ((v18 & 0x80u) != 0) {
        int v11 = v17;
      }
      int v19 = v11;
      std::ostream::write();
      std::ostream::write();
      if ((char)v18 < 0) {
        operator delete(__p);
      }
      long long __p = v8;
      std::ostream::write();
      ++v6;
      uint64_t v5 = *(void *)(a1 + 48);
    }
    while (v6 < (*(void *)(a1 + 56) - v5) >> 3);
  }
  std::ostream::flush();
  int v12 = *(_DWORD *)((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5;
  if (v12)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    char v13 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
    int v14 = fst::cerr(v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"SymbolTable::Write: write failed", 32);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
    if ((char)v18 < 0) {
      operator delete(__p);
    }
  }
  return v12 == 0;
}

void sub_BC2B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::SymbolTable::AddTable(fst::SymbolTable *this, const fst::SymbolTable *a2)
{
  fst::SymbolTable::MutateCheck((uint64_t)this);
  unint64_t v4 = (*(uint64_t (**)(const fst::SymbolTable *))(*(void *)a2 + 120))(a2);
  uint64_t v5 = (*(uint64_t (**)(const fst::SymbolTable *, void))(*(void *)a2 + 128))(a2, 0);
  if (v4)
  {
    uint64_t v6 = v5;
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *((void *)this + 1);
      (*(void (**)(void **__return_ptr, const fst::SymbolTable *, uint64_t))(*(void *)a2 + 88))(__p, a2, v6);
      fst::SymbolTableImpl::AddSymbol(v8, (uint64_t)__p, *(void *)(v8 + 24));
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      if (++v7 < v4) {
        uint64_t v6 = (*(uint64_t (**)(const fst::SymbolTable *, uint64_t))(*(void *)a2 + 128))(a2, v7);
      }
    }
    while (v4 != v7);
  }
}

void sub_BC420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::SymbolTable::MutateCheck(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 8);
  int v2 = *(_DWORD *)(v1 + 168);
  if (v2 >= 2)
  {
    *(_DWORD *)(v1 + 168) = v2 - 1;
    operator new();
  }
  return this;
}

void sub_BC49C()
{
}

BOOL fst::SymbolTable::WriteText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a3 + 31);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a3 + 16);
  }
  uint64_t v23 = v3;
  if (v3)
  {
    unint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 128))(a1, 0);
    if (v6)
    {
      uint64_t v8 = v7;
      int v9 = 0;
      uint64_t v10 = 0;
      do
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v30);
        BOOL v12 = v8 >= 0 || *(unsigned char *)a3 != 0;
        if (((v12 | v9) & 1) == 0)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "WARNING");
          char v13 = fst::LogMessage::LogMessage((fst *)&v26, (uint64_t)__p);
          int v14 = fst::cerr(v13);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Negative symbol table entry when not allowed", 44);
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v26);
          if ((char)v29 < 0) {
            operator delete(__p[0]);
          }
          int v9 = 1;
        }
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 88))(__p, a1, v8);
        if ((v29 & 0x80u) == 0) {
          int v15 = __p;
        }
        else {
          int v15 = (void **)__p[0];
        }
        if ((v29 & 0x80u) == 0) {
          uint64_t v16 = v29;
        }
        else {
          uint64_t v16 = (uint64_t)__p[1];
        }
        uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v15, v16);
        unsigned __int8 v18 = (unsigned char *)(a3 + 8);
        if (*(char *)(a3 + 31) < 0) {
          unsigned __int8 v18 = *(unsigned char **)(a3 + 8);
        }
        LOBYTE(v26) = *v18;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v26, 1);
        int v19 = (void *)std::ostream::operator<<();
        LOBYTE(v26) = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)&v26, 1);
        if ((char)v29 < 0) {
          operator delete(__p[0]);
        }
        std::stringbuf::str();
        std::stringbuf::str();
        std::ostream::write();
        if (v27 < 0) {
          operator delete(v26);
        }
        if ((char)v29 < 0) {
          operator delete(__p[0]);
        }
        v30[0] = v25;
        *(void **)((char *)v30 + *((void *)v25 - 3)) = v24;
        if (v33 < 0) {
          operator delete(v32);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
        if (++v10 < v6) {
          uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v10);
        }
      }
      while (v6 != v10);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v30, "ERROR");
    std::string::size_type v20 = fst::LogMessage::LogMessage((fst *)__p, (uint64_t)v30);
    size_t v21 = fst::cerr(v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Missing required field separator", 32);
    fst::LogMessage::~LogMessage((fst::LogMessage *)__p);
    if (v31 < 0) {
      operator delete(v30[0]);
    }
  }
  return v23 != 0;
}

void sub_BC8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

fst::internal::DenseSymbolMap *fst::internal::DenseSymbolMap::DenseSymbolMap(fst::internal::DenseSymbolMap *this)
{
  *(void *)this = -1;
  *((void *)this + 1) = 0;
  *((void *)this + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  std::vector<long long>::vector((void *)this + 5, 0x10uLL);
  uint64_t v3 = (void *)*((void *)this + 5);
  int v2 = (void *)*((void *)this + 6);
  for (*((void *)this + 8) = v2 - v3 - 1; v3 != v2; ++v3)
    void *v3 = *(void *)this;
  return this;
}

void sub_BC9B0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

fst::internal::DenseSymbolMap *fst::internal::DenseSymbolMap::DenseSymbolMap(fst::internal::DenseSymbolMap *this, const fst::internal::DenseSymbolMap *a2)
{
  *(void *)this = -1;
  std::vector<char const*>::vector((void *)this + 1, (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)this + 5, *((const void **)a2 + 5), *((void *)a2 + 6), (uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  if (*((void *)this + 2) != *((void *)this + 1))
  {
    strlen(**((const char ***)a2 + 1));
    operator new[]();
  }
  return this;
}

void sub_BCACC(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void fst::internal::DenseSymbolMap::~DenseSymbolMap(fst::internal::DenseSymbolMap *this)
{
  unint64_t v4 = (char *)this + 8;
  int v2 = (void *)*((void *)this + 1);
  uint64_t v3 = (void *)*((void *)v4 + 1);
  if (v3 == v2)
  {
    int v2 = v3;
  }
  else
  {
    unint64_t v5 = 0;
    do
    {
      if (v2[v5]) {
        operator delete[]();
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  unint64_t v6 = (void *)*((void *)this + 5);
  if (v6)
  {
    *((void *)this + 6) = v6;
    operator delete(v6);
    int v2 = (void *)*((void *)this + 1);
  }
  if (v2)
  {
    *((void *)this + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v2;
    operator delete(v2);
  }
}

void fst::internal::DenseSymbolMap::Rehash(fst::internal::DenseSymbolMap *this)
{
  int v2 = (char *)this + 40;
  std::vector<long long>::resize((uint64_t)this + 40, (uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 2);
  unint64_t v4 = *(void **)v2;
  uint64_t v3 = (void *)*((void *)v2 + 1);
  for (*((void *)v2 + 3) = (((uint64_t)v3 - *(void *)v2) >> 3) - 1; v4 != v3; ++v4)
    *unint64_t v4 = *(void *)this;
  uint64_t v5 = *((void *)this + 1);
  if (*((void *)this + 2) != v5)
  {
    unint64_t v6 = 0;
    do
    {
      std::string::basic_string[abi:ne180100]<0>(__p, *(char **)(v5 + 8 * v6));
      unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)this + 32, (uint64_t)__p);
      uint64_t v8 = *((void *)this + 8);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v9 = v8 & v7;
      uint64_t v10 = *((void *)this + 5);
      if (*(void *)(v10 + 8 * (v8 & v7)) != *(void *)this)
      {
        do
          uint64_t v9 = *((void *)this + 8) & (v9 + 1);
        while (*(void *)(v10 + 8 * v9) != *(void *)this);
      }
      *(void *)(v10 + 8 * v9) = v6++;
      uint64_t v5 = *((void *)this + 1);
    }
    while (v6 < (*((void *)this + 2) - v5) >> 3);
  }
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

{
  unint64_t v2;
  unint64_t v3;
  char v5;

  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

uint64_t fst::internal::DenseSymbolMap::Find(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 4), a2);
  uint64_t v5 = a1[8];
  uint64_t v6 = a1[5];
  uint64_t v7 = *a1;
  uint64_t v8 = v4 & v5;
  uint64_t v9 = *(void *)(v6 + 8 * (v4 & v5));
  if (v9 == *a1) {
    return v7;
  }
  uint64_t v10 = a1[1];
  if (*(char *)(v2 + 23) < 0) {
    uint64_t v2 = *(void *)v2;
  }
  while (strcmp(*(const char **)(v10 + 8 * v9), (const char *)v2))
  {
    uint64_t v8 = (v8 + 1) & v5;
    uint64_t v9 = *(void *)(v6 + 8 * v8);
    if (v9 == v7) {
      return v7;
    }
  }
  return v9;
}

void std::vector<long long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<long long>::__append((char **)a1, a2 - v2);
  }
}

void fst::SymbolTable::~SymbolTable(fst::SymbolTable *this)
{
  fst::SymbolTable::~SymbolTable(this);

  operator delete();
}

{
  uint64_t v1;
  int v2;
  void *v3;

  *(void *)this = off_263150;
  uint64_t v1 = *((void *)this + 1);
  unint64_t v2 = *(_DWORD *)(v1 + 168) - 1;
  *(_DWORD *)(v1 + 168) = v2;
  if (!v2)
  {
    if (*(char *)(v1 + 223) < 0) {
      operator delete(*(void **)(v1 + 200));
    }
    if (*(char *)(v1 + 199) < 0) {
      operator delete(*(void **)(v1 + 176));
    }
    std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::destroy(v1 + 144, *(void **)(v1 + 152));
    unint64_t v3 = *(void **)(v1 + 120);
    if (v3)
    {
      *(void *)(v1 + 128) = v3;
      operator delete(v3);
    }
    fst::internal::DenseSymbolMap::~DenseSymbolMap((fst::internal::DenseSymbolMap *)(v1 + 40));
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    operator delete();
  }
}

void fst::SymbolTable::Copy(fst::SymbolTable *this)
{
}

uint64_t fst::SymbolTable::AddSymbol(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst::SymbolTable::MutateCheck(a1);
  uint64_t v6 = *(void *)(a1 + 8);

  return fst::SymbolTableImpl::AddSymbol(v6, a2, a3);
}

uint64_t fst::SymbolTable::AddSymbol(uint64_t a1, uint64_t a2)
{
  fst::SymbolTable::MutateCheck(a1);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(v4 + 24);

  return fst::SymbolTableImpl::AddSymbol(v4, a2, v5);
}

void fst::SymbolTable::CheckSum(fst::SymbolTableImpl **this@<X0>, std::string *a2@<X8>)
{
}

void fst::SymbolTable::LabeledCheckSum(fst::SymbolTableImpl **this@<X0>, std::string *a2@<X8>)
{
}

BOOL fst::SymbolTable::Write(uint64_t a1, void *a2)
{
  return fst::SymbolTableImpl::Write(*(void *)(a1 + 8), a2);
}

void *fst::SymbolTable::Find@<X0>(fst::SymbolTableImpl **this@<X0>, int64_t a2@<X1>, void *a3@<X8>)
{
  return fst::SymbolTableImpl::Find(this[1], a2, a3);
}

uint64_t fst::SymbolTable::Find(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)(a1 + 8);
  uint64_t result = fst::internal::DenseSymbolMap::Find(v2 + 5, a2);
  if (result != -1)
  {
    uint64_t v4 = v2[4];
    BOOL v5 = __OFSUB__(result, v4);
    uint64_t v6 = result - v4;
    if (v6 < 0 == v5) {
      return *(void *)(v2[15] + 8 * v6);
    }
  }
  return result;
}

uint64_t fst::SymbolTable::Find(fst::SymbolTableImpl **this, char *a2)
{
  return fst::SymbolTableImpl::Find(this[1], a2);
}

uint64_t fst::SymbolTable::AvailableKey(fst::SymbolTable *this)
{
  return *(void *)(*((void *)this + 1) + 24);
}

uint64_t fst::SymbolTable::NumSymbols(fst::SymbolTable *this)
{
  return (uint64_t)(*(void *)(*((void *)this + 1) + 56) - *(void *)(*((void *)this + 1) + 48)) >> 3;
}

unint64_t fst::SymbolTable::GetNthKey(fst::SymbolTableImpl **this, unint64_t a2)
{
  return fst::SymbolTableImpl::GetNthKey(this[1], a2);
}

void *fst::SymbolTable::GetNthSymbol@<X0>(fst::SymbolTableImpl **this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  return fst::SymbolTableImpl::GetNthSymbol(this[1], a2, a3);
}

fst::CheckSummer *fst::CheckSummer::CheckSummer(fst::CheckSummer *this)
{
  *(_DWORD *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  std::string::resize((std::string *)((char *)this + 8), 0x20uLL, 0);
  return this;
}

void sub_BCFC8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    void *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    uint64_t v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    void *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    uint64_t v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

std::string *fst::SymbolTableImpl::SymbolTableImpl(std::string *this, const fst::SymbolTableImpl *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(_OWORD *)((char *)a2 + 24);
  fst::internal::DenseSymbolMap::DenseSymbolMap((fst::internal::DenseSymbolMap *)&this[1].__r_.__value_.__r.__words[2], (const fst::SymbolTableImpl *)((char *)a2 + 40));
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  this[5].__r_.__value_.__r.__words[2] = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(this[5].__r_.__value_.__r.__words, *((const void **)a2 + 15), *((void *)a2 + 16), (uint64_t)(*((void *)a2 + 16) - *((void *)a2 + 15)) >> 3);
  std::map<long long,long long>::map[abi:ne180100]((uint64_t *)&this[6], (uint64_t)a2 + 144);
  LODWORD(this[7].__r_.__value_.__l.__data_) = 1;
  this[7].__r_.__value_.__s.__data_[4] = 0;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[8].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[8].__r_.__value_.__r.__words[2] = 0u;
  return this;
}

void sub_BD144(_Unwind_Exception *a1)
{
  BOOL v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 128) = v5;
    operator delete(v5);
  }
  fst::internal::DenseSymbolMap::~DenseSymbolMap(v2);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::map<long long,long long>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<long long,long long>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<long long,long long>,std::__tree_node<std::__value_type<long long,long long>,void *> *,long>>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_BD1C8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<long long,long long>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<long long,long long>,std::__tree_node<std::__value_type<long long,long long>,void *> *,long>>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    long long v4 = a2;
    BOOL v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__emplace_hint_unique_key_args<long long,std::pair<long long const,long long> const&>(v5, v6, v4 + 4, (_OWORD *)v4 + 2);
      size_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          size_t v8 = v7;
          size_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          size_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          long long v4 = v8;
        }
        while (!v9);
      }
      long long v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__emplace_hint_unique_key_args<long long,std::pair<long long const,long long> const&>(uint64_t **a1, void *a2, uint64_t *a3, _OWORD *a4)
{
  uint64_t v6 = (void **)std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__find_equal<long long>(a1, a2, &v11, &v10, a3);
  size_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    size_t v8 = (uint64_t **)v6;
    size_t v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = *a4;
    std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

void *std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__find_equal<long long>(void *a1, void *a2, void *a3, void *a4, uint64_t *a5)
{
  BOOL v5 = a1 + 1;
  if (a1 + 1 == a2 || (uint64_t v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      char v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        char v13 = v10;
      }
      while (v14);
    }
    uint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = v16;
          uint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = (void *)*v17;
          BOOL v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        BOOL v5 = v17 + 1;
        uint64_t v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    char v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      char v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    int v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      int v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    std::string::size_type v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          size_t v21 = v20;
          uint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          std::string::size_type v20 = (void *)*v21;
          BOOL v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        BOOL v5 = v21 + 1;
        std::string::size_type v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      size_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void fst::SymbolTableImpl::CheckSum(fst::SymbolTableImpl *this@<X0>, std::string *a2@<X8>)
{
  fst::SymbolTableImpl::MaybeRecomputeCheckSum(this);
  if (*((char *)this + 199) < 0)
  {
    long long v4 = (const std::string::value_type *)*((void *)this + 22);
    std::string::size_type v5 = *((void *)this + 23);
    std::string::__init_copy_ctor_external(a2, v4, v5);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 11);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 24);
  }
}

void fst::SymbolTableImpl::LabeledCheckSum(fst::SymbolTableImpl *this@<X0>, std::string *a2@<X8>)
{
  fst::SymbolTableImpl::MaybeRecomputeCheckSum(this);
  if (*((char *)this + 223) < 0)
  {
    long long v4 = (const std::string::value_type *)*((void *)this + 25);
    std::string::size_type v5 = *((void *)this + 26);
    std::string::__init_copy_ctor_external(a2, v4, v5);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 200);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 27);
  }
}

void *fst::SymbolTableImpl::Find@<X0>(fst::SymbolTableImpl *this@<X0>, int64_t a2@<X1>, void *a3@<X8>)
{
  if (a2 < 0 || *((void *)this + 4) <= a2)
  {
    long long v4 = (void *)*((void *)this + 19);
    if (!v4) {
      goto LABEL_18;
    }
    std::string::size_type v5 = (void *)((char *)this + 152);
    do
    {
      int64_t v6 = v4[4];
      BOOL v7 = v6 < a2;
      if (v6 >= a2) {
        uint64_t v8 = v4;
      }
      else {
        uint64_t v8 = v4 + 1;
      }
      if (!v7) {
        std::string::size_type v5 = v4;
      }
      long long v4 = (void *)*v8;
    }
    while (*v8);
    if (v5 == (void *)((char *)this + 152)) {
      goto LABEL_18;
    }
    if (v5[4] > a2) {
      goto LABEL_18;
    }
    a2 = v5[5];
    if (a2 < 0) {
      goto LABEL_18;
    }
  }
  uint64_t v9 = *((void *)this + 6);
  if (a2 >= (unint64_t)((*((void *)this + 7) - v9) >> 3))
  {
LABEL_18:
    return std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  else
  {
    uint64_t v10 = *(char **)(v9 + 8 * a2);
    size_t v11 = strlen(v10);
    return std::string::basic_string[abi:ne180100](a3, v10, v11);
  }
}

uint64_t fst::SymbolTableImpl::Find(fst::SymbolTableImpl *this, char *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  uint64_t v3 = fst::internal::DenseSymbolMap::Find((uint64_t *)this + 5, (uint64_t)__p);
  uint64_t v4 = v3;
  if (v3 != -1)
  {
    uint64_t v5 = *((void *)this + 4);
    BOOL v6 = __OFSUB__(v3, v5);
    uint64_t v7 = v3 - v5;
    if (v7 < 0 == v6) {
      uint64_t v4 = *(void *)(*((void *)this + 15) + 8 * v7);
    }
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return v4;
}

void *fst::SymbolTableImpl::GetNthSymbol@<X0>(fst::SymbolTableImpl *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  if ((a2 & 0x8000000000000000) != 0
    || (uint64_t v4 = *((void *)this + 6), a2 >= (*((void *)this + 7) - v4) >> 3)
    || *((void *)this + 4) > (int64_t)a2)
  {
    return std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  else
  {
    BOOL v6 = *(char **)(v4 + 8 * a2);
    size_t v7 = strlen(v6);
    return std::string::basic_string[abi:ne180100](a3, v6, v7);
  }
}

void *std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    BOOL v6 = result;
    uint64_t result = std::vector<long long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_BD864(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<long long>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t *std::__tree<std::__value_type<long long,long long>,std::__map_value_compare<long long,std::__value_type<long long,long long>,std::less<long long>,true>,std::allocator<std::__value_type<long long,long long>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  BOOL v6 = a1[1];
  if (v6)
  {
    uint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        uint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        BOOL v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      BOOL v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    size_t v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void *std::vector<long long>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<long long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_BD9E0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<char const*>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<long long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_BDA58(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      uint64_t v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

void std::vector<long long>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      unint64_t v14 = 0;
    }
    uint64_t v15 = &v14[8 * v11];
    unint64_t v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    uint64_t v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void fst::SplitToVector(char *__s1, char *__s2, void **a3, int a4)
{
  if (__s1)
  {
    uint64_t v7 = __s1;
    uint64_t v8 = (uint64_t)(a3 + 2);
    do
    {
      uint64_t v9 = strpbrk(v7, __s2);
      unint64_t v10 = v9;
      if (v9) {
        *uint64_t v9 = 0;
      }
      if (!a4 || *v7)
      {
        uint64_t v12 = (char **)a3[1];
        unint64_t v11 = (unint64_t)a3[2];
        if ((unint64_t)v12 >= v11)
        {
          uint64_t v14 = ((char *)v12 - (unsigned char *)*a3) >> 3;
          if ((unint64_t)(v14 + 1) >> 61) {
            std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v15 = v11 - (void)*a3;
          uint64_t v16 = v15 >> 2;
          if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
            uint64_t v16 = v14 + 1;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17) {
            uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v8, v17);
          }
          else {
            uint64_t v18 = 0;
          }
          uint64_t v19 = (char **)&v18[8 * v14];
          *uint64_t v19 = v7;
          unint64_t v13 = v19 + 1;
          uint64_t v21 = (char *)*a3;
          uint64_t v20 = (char *)a3[1];
          if (v20 != *a3)
          {
            do
            {
              uint64_t v22 = (char *)*((void *)v20 - 1);
              v20 -= 8;
              *--uint64_t v19 = v22;
            }
            while (v20 != v21);
            uint64_t v20 = (char *)*a3;
          }
          *a3 = v19;
          a3[1] = v13;
          a3[2] = &v18[8 * v17];
          if (v20) {
            operator delete(v20);
          }
        }
        else
        {
          void *v12 = v7;
          unint64_t v13 = v12 + 1;
        }
        a3[1] = v13;
      }
      uint64_t v7 = v10 + 1;
    }
    while (v10);
  }
}

uint64_t fst::AlignInput()
{
  v2[1] = 0;
  int v0 = 16;
  while (1)
  {
    std::istream::tellg();
    if (v5 < 0) {
      break;
    }
    if (v5 % 16)
    {
      std::istream::read();
      if (--v0) {
        continue;
      }
    }
    return 1;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  fst::LogMessage::LogMessage((fst *)v2, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"AlignInput: can't determine stream position", 43);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_BE238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::AlignOutput(void *a1)
{
  int v2 = 16;
  while (1)
  {
    uint64_t v3 = (char *)a1 + *(void *)(*a1 - 24);
    if ((v3[32] & 5) != 0) {
      break;
    }
    (*(void (**)(void **__return_ptr))(**((void **)v3 + 5) + 32))(__p);
    if (v8 < 0) {
      break;
    }
    if (v8 % 16)
    {
      std::ostream::write();
      if (--v2) {
        continue;
      }
    }
    return 1;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  fst::LogMessage::LogMessage((fst *)&v5, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"AlignOutput: can't determine stream position", 44);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v5);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_BE3D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::FstHeader::Write()
{
  return 1;
}

std::ostream *fst::cout(fst *this)
{
  return &std::cout;
}

std::ostream *fst::cerr(fst *this)
{
  return &std::cerr;
}

std::istream *fst::cin(fst *this)
{
  return &std::cin;
}

void boost::filesystem::path::append_v3(std::string *this, std::string *a2)
{
  std::string::size_type v2 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  char v3 = v2;
  std::string::size_type size = a2->__r_.__value_.__l.__size_;
  if ((v2 & 0x80u) == 0) {
    std::string::size_type v5 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v5 = a2->__r_.__value_.__l.__size_;
  }
  if (v5)
  {
    if (this == a2)
    {
      if ((char)v2 < 0) {
        std::string::__init_copy_ctor_external(&__p, a2->__r_.__value_.__l.__data_, size);
      }
      else {
        std::string __p = *a2;
      }
      boost::filesystem::path::append_v3((boost::filesystem::path *)a2, (const boost::filesystem::path *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      uint64_t v8 = (const std::string::value_type *)a2->__r_.__value_.__r.__words[0];
      if ((v2 & 0x80u) == 0) {
        uint64_t v9 = (const boost::filesystem::path *)a2;
      }
      else {
        uint64_t v9 = (const boost::filesystem::path *)a2->__r_.__value_.__r.__words[0];
      }
      if (*(unsigned char *)v9 != 47)
      {
        boost::filesystem::path::append_separator_if_needed(this);
        std::string::size_type v2 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        uint64_t v8 = (const std::string::value_type *)a2->__r_.__value_.__r.__words[0];
        std::string::size_type size = a2->__r_.__value_.__l.__size_;
        char v3 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      }
      if (v3 >= 0) {
        unint64_t v10 = (const std::string::value_type *)a2;
      }
      else {
        unint64_t v10 = v8;
      }
      if (v3 >= 0) {
        std::string::size_type size = v2;
      }
      std::string::append(this, v10, size);
    }
  }
}

void sub_BE684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string::size_type boost::filesystem::path::append_separator_if_needed(std::string *this)
{
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (!*((unsigned char *)&this->__r_.__value_.__s + 23)) {
      return 0;
    }
    std::string::size_type v2 = (char *)this + size;
LABEL_6:
    if (*(v2 - 1) != 47)
    {
      std::string::push_back(this, 47);
      return size;
    }
    return 0;
  }
  std::string::size_type size = this->__r_.__value_.__l.__size_;
  if (size)
  {
    std::string::size_type v2 = (char *)(this->__r_.__value_.__r.__words[0] + size);
    goto LABEL_6;
  }
  return size;
}

void boost::filesystem::path::~path(void **this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, char *a2, char *a3)
{
  char v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    unint64_t v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    unint64_t v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    uint64_t v14 = this;
    if ((v6 & 0x80) != 0) {
      uint64_t v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    for (uint64_t i = (char *)v14 + size; v4 != a3; ++i)
    {
      char v16 = *v4++;
      unsigned char *i = v16;
    }
    unsigned char *i = 0;
    std::string::size_type v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v17;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v13 = v20;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  return this;
}

void sub_BE894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const char *anonymous namespace'::find_root_directory_start(_anonymous_namespace_ *this, const char *a2, void *a3, unint64_t *a4)
{
  *a3 = 0;
  if (a2 && *(unsigned char *)this == 47)
  {
    if ((unint64_t)a2 < 2 || *((unsigned char *)this + 1) != 47) {
      return 0;
    }
    std::string::size_type v5 = a2 - 2;
    if (a2 != (unsigned char *)&def_5A5E8 + 2)
    {
      unint64_t v6 = (char *)this + 2;
      if (*((unsigned char *)this + 2) == 47) {
        return 0;
      }
      uint64_t v8 = memchr(v6, 47, (size_t)v5);
      std::string::size_type v9 = (const char *)(v8 - v6);
      if (!v8) {
        std::string::size_type v9 = v5;
      }
      a2 = v9 + 2;
    }
    *a3 = a2;
  }
  return a2;
}

const char *boost::filesystem::path::find_parent_path_size(boost::filesystem::path *this, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  char v4 = this;
  if (*((char *)this + 23) < 0)
  {
    this = *(boost::filesystem::path **)this;
    std::string::size_type v5 = (const char *)*((void *)v4 + 1);
  }
  else
  {
    std::string::size_type v5 = (const char *)*((unsigned __int8 *)this + 23);
  }
  unint64_t v19 = 0;
  int v7 = *((char *)v4 + 23);
  if ((unint64_t)v5 >= v19) {
    uint64_t v8 = (const char *)v19;
  }
  else {
    uint64_t v8 = v5;
  }
  if (v7 >= 0) {
    std::string::size_type v9 = v4;
  }
  else {
    std::string::size_type v9 = *(boost::filesystem::path **)v4;
  }
  unint64_t v10 = (char *)v9 - 1;
  unint64_t v11 = v5;
  while ((unint64_t)v11 > v19)
  {
    uint64_t v12 = v11 - 1;
    int v13 = (v11--)[(void)v10];
    if (v13 == 47)
    {
      uint64_t v8 = v12 + 1;
      break;
    }
  }
  if ((unint64_t)v8 >= v19) {
    unint64_t v14 = v19;
  }
  else {
    unint64_t v14 = (unint64_t)v8;
  }
  if (v7 >= 0) {
    uint64_t v15 = v4;
  }
  else {
    uint64_t v15 = *(boost::filesystem::path **)v4;
  }
  char v16 = (char *)v15 - 1;
  std::string::size_type v17 = v8;
  while ((unint64_t)v17 > v19)
  {
    if (v17[(void)v16] != 47) {
      return v17;
    }
    if (root_directory_start == --v17)
    {
      if (v5 == v8) {
        return root_directory_start;
      }
      else {
        return root_directory_start + 1;
      }
    }
  }
  if (v5 == v8) {
    return 0;
  }
  else {
    return (const char *)v14;
  }
}

void anonymous namespace'::path_locale_deleter::~path_locale_deleter(_anonymous_namespace_::path_locale_deleter *this)
{
  {
    operator delete(v1);
  }
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string::size_type v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    std::string::size_type v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

void *std::string::__init_with_size[abi:ne180100]<char const*,char const*>(void *result, char *a2, char *a3, unint64_t a4)
{
  char v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    unint64_t result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *char v4 = result;
    char v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)char v4 = v10;
    char v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)char v4 = 0;
  return result;
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    std::string::size_type v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    std::string::size_type v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

uint64_t global constructor keyed to'_032768()
{
}

void *kaldi::WriteBasicType<BOOL>(void *a1, char a2, int a3)
{
  if (a3) {
    size_t v5 = "T";
  }
  else {
    size_t v5 = "F";
  }
  unint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v5, 1);
  if ((a2 & 1) == 0) {
    unint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  }
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7, "WriteBasicType", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/base/io-funcs.cc", 38);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "Write failure in WriteBasicType<BOOL>");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  return result;
}

uint64_t kaldi::ReadBasicType<BOOL>(void *a1, char a2, char *a3, uint64_t a4, const char *a5)
{
  if (!a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadBasicType", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/base/io-funcs.cc", &stru_20.segname[3], "b != NULL", a5);
  }
  if ((a2 & 1) == 0) {
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  }
  int v6 = std::istream::peek();
  char v13 = v6;
  if (v6 << 24 == 1409286144)
  {
    char v7 = 1;
  }
  else
  {
    if (v6 << 24 != 1174405120)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12, "ReadBasicType", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/base/io-funcs.cc", 53);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Read failure in ReadBasicType<BOOL>, file position is ", 54);
      std::istream::tellg();
      uint64_t v9 = (void *)std::ostream::operator<<();
      char v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", next char is ", 15);
      kaldi::CharToString((kaldi *)&v13, &__p);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, (uint64_t)&__p);
      std::string::~string(&__p);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
    }
    char v7 = 0;
  }
  *a3 = v7;

  return std::istream::get();
}

void sub_BEF84(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *kaldi::WriteBasicType<float>(uint64_t a1, int a2)
{
  if (a2)
  {
    std::ostream::put();
    return (void *)std::ostream::write();
  }
  else
  {
    char v3 = (void *)std::ostream::operator<<();
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" ", 1);
  }
}

float kaldi::ReadBasicType<float>(void *a1, int a2, float *a3, uint64_t a4, const char *a5)
{
  if (!a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadBasicType", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/base/io-funcs.cc", (const char *)&stru_20.filesize + 2, "f != NULL", a5);
  }
  if (a2)
  {
    double v13 = 0.0;
    int v7 = std::istream::peek();
    if (v7 == 8)
    {
      kaldi::ReadBasicType<double>(a1, 1, &v13, v8, v9);
      float result = v13;
      *a3 = result;
    }
    else
    {
      if (v7 != 4)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12, "ReadBasicType", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/base/io-funcs.cc", 93);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ReadBasicType: expected float, saw ", 35);
        std::istream::peek();
        unint64_t v11 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", at file position ", 19);
        std::istream::tellg();
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
      }
      std::istream::get();
      std::istream::read();
    }
  }
  else
  {
    std::istream::operator>>();
  }
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12, "ReadBasicType", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/base/io-funcs.cc", 100);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ReadBasicType: failed to read, at file position ", 48);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  return result;
}

void sub_BF214(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

double kaldi::ReadBasicType<double>(void *a1, int a2, double *a3, uint64_t a4, const char *a5)
{
  if (!a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadBasicType", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/base/io-funcs.cc", &stru_68.sectname[3], "d != NULL", a5);
  }
  if (a2)
  {
    float v11 = 0.0;
    int v7 = std::istream::peek();
    if (v7 == 4)
    {
      kaldi::ReadBasicType<float>(a1, 1, &v11);
      double result = v11;
      *a3 = v11;
    }
    else
    {
      if (v7 != 8)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10, "ReadBasicType", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/base/io-funcs.cc", 118);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"ReadBasicType: expected float, saw ", 35);
        std::istream::peek();
        uint64_t v9 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", at file position ", 19);
        std::istream::tellg();
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
      }
      std::istream::get();
      std::istream::read();
    }
  }
  else
  {
    std::istream::operator>>();
  }
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10, "ReadBasicType", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/base/io-funcs.cc", 125);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"ReadBasicType: failed to read, at file position ", 48);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  return result;
}

void sub_BF424(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::CheckToken(kaldi *this, const char *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  char v5 = *(unsigned char *)this;
  if (!*(unsigned char *)this) {
    kaldi::KaldiAssertFailure_((kaldi *)"CheckToken", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/base/io-funcs.cc", (const char *)&stru_68.nreloc + 2, "*token != '\\0'", a5);
  }
  int v6 = (unsigned __int8 *)this + 1;
  do
  {
    if (v5 < 0)
    {
      uint64_t result = __maskrune(v5, 0x4000uLL);
      if (result) {
LABEL_9:
      }
        kaldi::KaldiAssertFailure_((kaldi *)"CheckToken", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/base/io-funcs.cc", (const char *)&stru_68.flags, "!::isspace(*token)", a5);
    }
    else
    {
      uint64_t result = _DefaultRuneLocale.__runetype[v5] & 0x4000;
      if (result) {
        goto LABEL_9;
      }
    }
    int v8 = *v6++;
    char v5 = v8;
  }
  while (v8);
  return result;
}

void *kaldi::WriteToken(void *a1, const char *a2, kaldi *this, uint64_t a4, const char *a5)
{
  if (!this) {
    kaldi::KaldiAssertFailure_((kaldi *)"WriteToken", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/base/io-funcs.cc", (const char *)&stru_68.reserved2, "token != NULL", a5);
  }
  kaldi::CheckToken(this, a2, (uint64_t)this, a4, a5);
  size_t v7 = strlen((const char *)this);
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)this, v7);
  uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Write failure in WriteToken.");
  }
  return result;
}

void sub_BF5A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::Peek(void *a1, char a2)
{
  if ((a2 & 1) == 0) {
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  }

  return std::istream::peek();
}

void *kaldi::WriteToken(void *a1, uint64_t a2, char *a3, uint64_t a4, const char *a5)
{
  if (a3[23] < 0) {
    a3 = *(char **)a3;
  }
  return kaldi::WriteToken(a1, 0, (kaldi *)a3, a4, a5);
}

uint64_t kaldi::ReadToken(uint64_t *a1, char a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (!a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadToken", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/base/io-funcs.cc", &stru_B8.sectname[10], "str != NULL", a5);
  }
  if ((a2 & 1) == 0) {
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  }
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, a3);
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12, "ReadToken", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/base/io-funcs.cc", 198);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ReadToken, failed to read token at file position ", 49);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  unsigned int v7 = std::istream::peek();
  if (v7 <= 0x7F) {
    __uint32_t v8 = _DefaultRuneLocale.__runetype[v7] & 0x4000;
  }
  else {
    __uint32_t v8 = __maskrune(v7, 0x4000uLL);
  }
  if (!v8)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12, "ReadToken", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/base/io-funcs.cc", 202);
    char v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ReadToken, expected space after token, saw instead ", 51);
    v13[0] = std::istream::peek();
    float v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v13, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", at file position ", 19);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }

  return std::istream::get();
}

void sub_BF818(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::PeekToken(void *a1, char a2)
{
  if ((a2 & 1) == 0) {
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  }
  if (std::istream::peek() == 60)
  {
    std::istream::get();
    uint64_t v2 = std::istream::peek();
    char v3 = (void *)std::istream::unget();
    if ((*((unsigned char *)v3 + *(void *)(*v3 - 24) + 32) & 5) != 0 && kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6, "PeekToken", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/base/io-funcs.cc", 221);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Error ungetting '<' in PeekToken", 32);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    }
    return v2;
  }
  else
  {
    return std::istream::peek();
  }
}

void sub_BF930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::ExpectToken(uint64_t *a1, char a2, kaldi *a3)
{
  std::istream::tellg();
  if (!a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"ExpectToken", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/base/io-funcs.cc", (const char *)&stru_B8.size + 5, "token != NULL", v9);
  }
  kaldi::CheckToken(a3, v6, v7, v8, v9);
  if ((a2 & 1) == 0) {
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  }
  __s1 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, (uint64_t)&__s1);
  std::istream::get();
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24, "ExpectToken", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/base/io-funcs.cc", 236);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Failed to read token [started at file position ", 47);
    float v11 = (void *)std::ostream::operator<<();
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"], expected ", 12);
    size_t v13 = strlen((const char *)a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)a3, v13);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24);
  }
  if (SHIBYTE(v23) < 0)
  {
    char v10 = __s1;
    if (strcmp(__s1, (const char *)a3)) {
      goto LABEL_13;
    }
    operator delete(v10);
  }
  else if (strcmp((const char *)&__s1, (const char *)a3))
  {
LABEL_13:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24, "ExpectToken", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/base/io-funcs.cc", 240);
    unint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Expected token \"", 16);
    size_t v15 = strlen((const char *)a3);
    char v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)a3, v15);
    std::string::size_type v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\", got instead \"", 16);
    if (v23 >= 0) {
      p_s1 = &__s1;
    }
    else {
      p_s1 = __s1;
    }
    if (v23 >= 0) {
      uint64_t v19 = HIBYTE(v23);
    }
    else {
      uint64_t v19 = v22;
    }
    unsigned __int8 v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)p_s1, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\".", 2);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24);
  }
}

void sub_BFB90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::StandardErrorLogger(uint64_t a1)
{
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v1 = (const char *)a1;
  }
  else {
    uint64_t v1 = *(const char **)a1;
  }
  return fprintf(__stderrp, "%s\n", v1);
}

uint64_t kaldi::StandardErrorVLogger(uint64_t a1)
{
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v1 = (const char *)a1;
  }
  else {
    uint64_t v1 = *(const char **)a1;
  }
  return fprintf(__stderrp, "%s\n", v1);
}

void kaldi::KaldiGetStackTrace(std::string *a1@<X8>)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  memset(v10, 0, sizeof(v10));
  signed int v3 = backtrace((void **)v10, 50);
  size_t v4 = backtrace_symbols((void *const *)v10, v3);
  char v5 = v4;
  uint64_t v6 = v3;
  if (v3 >= 0x33)
  {
    for (uint64_t i = 0; i != 25; ++i)
    {
      kaldi::KALDI_APPEND_POSSIBLY_DEMANGLED_STRING(a1, v5[i]);
      std::string::append(a1, "\n");
    }
    std::string::append(a1, ".\n.\n.\n");
    unint64_t v9 = v3 - 25;
    do
    {
      kaldi::KALDI_APPEND_POSSIBLY_DEMANGLED_STRING(a1, v5[v9]);
      std::string::append(a1, "\n");
      ++v9;
    }
    while (v9 < v3);
  }
  else if (v3)
  {
    uint64_t v7 = v4;
    do
    {
      kaldi::KALDI_APPEND_POSSIBLY_DEMANGLED_STRING(a1, *v7);
      std::string::append(a1, "\n");
      ++v7;
      --v6;
    }
    while (v6);
  }
  free(v5);
}

void sub_BFE04(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::KALDI_APPEND_POSSIBLY_DEMANGLED_STRING(std::string *a1, char *__s)
{
  size_t v4 = strchr(__s, 40);
  if (v4 && (v5 = v4, (uint64_t v6 = strchr(v4, 43)) != 0))
  {
    int status = 0;
    std::string::basic_string[abi:ne180100](__p, v5 + 1, v6 - (v5 + 1));
    if (v10 >= 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    uint64_t v8 = __cxa_demangle((const char *)v7, 0, 0, &status);
    if (v8)
    {
      std::string::append(a1, v8);
      free(v8);
    }
    else
    {
      std::string::append(a1, __s);
    }
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    std::string::append(a1, __s);
  }
}

void sub_BFF24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::KaldiAssertFailure_(kaldi *this, char *a2, const char *a3, const char *a4, const char *a5)
{
  uint64_t v8 = fst::cerr(this);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"KALDI_ASSERT: at ", 17);
  if (kaldi::g_program_name) {
    char v10 = (const char *)kaldi::g_program_name;
  }
  else {
    char v10 = "";
  }
  size_t v11 = strlen(v10);
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
  size_t v13 = strlen((const char *)this);
  unint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)this, v13);
  v28.__r_.__value_.__s.__data_[0] = 58;
  size_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v28, 1);
  char v16 = strrchr(a2, 47);
  if (v16)
  {
    do
    {
      std::string::size_type v17 = v16;
      if (v16 <= a2) {
        break;
      }
      --v16;
    }
    while (*(v17 - 1) != 47);
  }
  else
  {
    std::string::size_type v17 = a2;
  }
  size_t v18 = strlen(v17);
  uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, v18);
  v28.__r_.__value_.__s.__data_[0] = 58;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)&v28, 1);
  unsigned __int8 v20 = (void *)std::ostream::operator<<();
  uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", failed: ", 10);
  size_t v22 = strlen(a4);
  uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)a4, v22);
  v28.__r_.__value_.__s.__data_[0] = 10;
  unint64_t v24 = (fst *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)&v28, 1);
  uint64_t v25 = fst::cerr(v24);
  uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Stack trace is:\n", 16);
  kaldi::KaldiGetStackTrace(&v28);
  std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v26, (uint64_t)&v28);
  std::string::~string(&v28);
  fst::cerr(v27);
  std::ostream::flush();
  abort();
}

void sub_C00CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

kaldi::KaldiWarnMessage *kaldi::KaldiWarnMessage::KaldiWarnMessage(kaldi::KaldiWarnMessage *this, const char *a2, char *a3)
{
  uint64_t v7 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)this);
  v7[33] = v3;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"WARNING (", 9);
  if (kaldi::g_program_name) {
    unint64_t v9 = (const char *)kaldi::g_program_name;
  }
  else {
    unint64_t v9 = "";
  }
  size_t v10 = strlen(v9);
  size_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
  size_t v12 = strlen(a2);
  size_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)a2, v12);
  unint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"():", 3);
  size_t v15 = strrchr(a3, 47);
  if (v15)
  {
    do
    {
      char v16 = v15;
      if (v15 <= a3) {
        break;
      }
      --v15;
    }
    while (*(v16 - 1) != 47);
  }
  else
  {
    char v16 = a3;
  }
  size_t v17 = strlen(v16);
  size_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v16, v17);
  char v21 = 58;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&v21, 1);
  uint64_t v19 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)") ", 2);
  return this;
}

void sub_C0230(_Unwind_Exception *a1)
{
  std::ostringstream::~ostringstream(v1);
  _Unwind_Resume(a1);
}

void kaldi::KaldiWarnMessage::~KaldiWarnMessage(kaldi::KaldiWarnMessage *this)
{
  uint64_t v2 = (void (*)(uint64_t))kaldi::KaldiWarnMessage::g_logger[0];
  std::stringbuf::str();
  v2((uint64_t)&v17);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (getenv("QSR_CRASH_ON_WARN"))
  {
    if (std::uncaught_exception()) {
      abort();
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    char v5 = std::string::append(&v14, "\n\n[stack trace: ]\n");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    kaldi::KaldiGetStackTrace(&v13);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v7 = &v13;
    }
    else {
      uint64_t v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v13.__r_.__value_.__l.__size_;
    }
    unint64_t v9 = std::string::append(&v15, (const std::string::value_type *)v7, size);
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    size_t v11 = std::string::append(&v16, "\n");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v17);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
}

void sub_C0488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v36 - 41) < 0) {
    operator delete(*(void **)(v36 - 64));
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v35 & 1) == 0)
    {
LABEL_14:
      std::ostringstream::~ostringstream(v33);
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v34);
  goto LABEL_14;
}

kaldi::KaldiLogMessage *kaldi::KaldiLogMessage::KaldiLogMessage(kaldi::KaldiLogMessage *this, const char *a2, char *a3)
{
  uint64_t v7 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)this);
  v7[33] = v3;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"LOG (", 5);
  if (kaldi::g_program_name) {
    unint64_t v9 = (const char *)kaldi::g_program_name;
  }
  else {
    unint64_t v9 = "";
  }
  size_t v10 = strlen(v9);
  size_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
  size_t v12 = strlen(a2);
  std::string v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)a2, v12);
  std::string v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"():", 3);
  std::string v15 = strrchr(a3, 47);
  if (v15)
  {
    do
    {
      std::string v16 = v15;
      if (v15 <= a3) {
        break;
      }
      --v15;
    }
    while (*(v16 - 1) != 47);
  }
  else
  {
    std::string v16 = a3;
  }
  size_t v17 = strlen(v16);
  size_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v16, v17);
  char v21 = 58;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&v21, 1);
  uint64_t v19 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)") ", 2);
  return this;
}

void sub_C06B4(_Unwind_Exception *a1)
{
  std::ostringstream::~ostringstream(v1);
  _Unwind_Resume(a1);
}

kaldi::KaldiVlogMessage *kaldi::KaldiVlogMessage::KaldiVlogMessage(kaldi::KaldiVlogMessage *this, const char *a2, char *a3, int a4, int a5)
{
  uint64_t v10 = std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)this);
  *(_DWORD *)(v10 + 264) = a5;
  *(void *)(v10 + 27std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v5;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)v10, (uint64_t)"VLOG[", 5);
  size_t v11 = (void *)std::ostream::operator<<();
  size_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"] (", 3);
  if (kaldi::g_program_name) {
    std::string v13 = (const char *)kaldi::g_program_name;
  }
  else {
    std::string v13 = "";
  }
  size_t v14 = strlen(v13);
  std::string v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
  size_t v16 = strlen(a2);
  size_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)a2, v16);
  size_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"():", 3);
  uint64_t v19 = strrchr(a3, 47);
  if (v19)
  {
    do
    {
      unsigned __int8 v20 = v19;
      if (v19 <= a3) {
        break;
      }
      --v19;
    }
    while (*(v20 - 1) != 47);
  }
  else
  {
    unsigned __int8 v20 = a3;
  }
  size_t v21 = strlen(v20);
  size_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v20, v21);
  char v25 = 58;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)&v25, 1);
  uint64_t v23 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)") ", 2);
  return this;
}

void sub_C0834(_Unwind_Exception *a1)
{
  std::ostringstream::~ostringstream(v1);
  _Unwind_Resume(a1);
}

kaldi::KaldiErrorMessage *kaldi::KaldiErrorMessage::KaldiErrorMessage(kaldi::KaldiErrorMessage *this, const char *a2, char *a3)
{
  uint64_t v7 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)this);
  v7[33] = v3;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ERROR (", 7);
  if (kaldi::g_program_name) {
    unint64_t v9 = (const char *)kaldi::g_program_name;
  }
  else {
    unint64_t v9 = "";
  }
  size_t v10 = strlen(v9);
  size_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
  size_t v12 = strlen(a2);
  std::string v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)a2, v12);
  size_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"():", 3);
  std::string v15 = strrchr(a3, 47);
  if (v15)
  {
    do
    {
      size_t v16 = v15;
      if (v15 <= a3) {
        break;
      }
      --v15;
    }
    while (*(v16 - 1) != 47);
  }
  else
  {
    size_t v16 = a3;
  }
  size_t v17 = strlen(v16);
  size_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v16, v17);
  char v21 = 58;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&v21, 1);
  uint64_t v19 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)") ", 2);
  return this;
}

void sub_C0994(_Unwind_Exception *a1)
{
  std::ostringstream::~ostringstream(v1);
  _Unwind_Resume(a1);
}

void kaldi::KaldiErrorMessage::~KaldiErrorMessage(kaldi::KaldiErrorMessage *this)
{
  uint64_t v1 = (void (*)(uint64_t))kaldi::KaldiErrorMessage::g_logger[0];
  std::stringbuf::str();
  v1((uint64_t)&v15);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (std::uncaught_exception()) {
    abort();
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::stringbuf::str();
  uint64_t v3 = std::string::append(&v12, "\n\n[stack trace: ]\n");
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  kaldi::KaldiGetStackTrace(&v11);
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v5 = &v11;
  }
  else {
    uint64_t v5 = (std::string *)v11.__r_.__value_.__r.__words[0];
  }
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v11.__r_.__value_.__l.__size_;
  }
  uint64_t v7 = std::string::append(&v13, (const std::string::value_type *)v5, size);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  unint64_t v9 = std::string::append(&v14, "\n");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  std::runtime_error::runtime_error(exception, &v15);
}

{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage(this);
}

void sub_C0AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v36 - 57) < 0) {
    operator delete(*(void **)(v36 - 80));
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v35 & 1) == 0)
    {
LABEL_14:
      if (*(char *)(v33 + 95) < 0) {
        operator delete(*(void **)(v33 + 72));
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v34);
  goto LABEL_14;
}

uint64_t kaldi::RoundUpToNearestPowerOfTwo(kaldi *this, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if ((int)this <= 0) {
    kaldi::KaldiAssertFailure_((kaldi *)"RoundUpToNearestPowerOfTwo", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/base/kaldi-math.cc", (const char *)&dword_1C + 2, "n > 0", a5);
  }
  unsigned int v5 = (this - 1) | ((this - 1) >> 1) | (((this - 1) | ((this - 1) >> 1)) >> 2);
  unsigned int v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  return (v6 | HIWORD(v6)) + 1;
}

uint64_t kaldi::Rand(unsigned int *a1)
{
  if (a1)
  {
    return rand_r(a1);
  }
  else
  {
    if (pthread_mutex_lock(&kaldi::_RandMutex)) {
      kaldi::KaldiAssertFailure_((kaldi *)"Rand", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/base/kaldi-math.cc", (const char *)&stru_20.nsects + 3, "rs == 0", v2);
    }
    if ((kaldi::_SrandCalled & 1) == 0)
    {
      kaldi::_RandSeed = 1;
      srand(1u);
      kaldi::_SrandCalled = 1;
    }
    uint64_t v3 = rand_r((unsigned int *)&kaldi::_RandSeed);
    if (pthread_mutex_unlock(&kaldi::_RandMutex)) {
      kaldi::KaldiAssertFailure_((kaldi *)"Rand", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/base/kaldi-math.cc", &stru_68.sectname[5], "rs == 0", v4);
    }
    return v3;
  }
}

void *kaldi::CharToString@<X0>(kaldi *this@<X0>, void *a2@<X8>)
{
  __darwin_ct_rune_t v4 = *(char *)this;
  if (v4 < 0) {
    __uint32_t v5 = __maskrune(v4, 0x40000uLL);
  }
  else {
    __uint32_t v5 = _DefaultRuneLocale.__runetype[v4] & 0x40000;
  }
  if (v5) {
    snprintf(__str, 0x14uLL, "'%c'");
  }
  else {
    snprintf(__str, 0x14uLL, "[character %d]");
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, __str);
}

void kaldi::UniformRandomNumber::SetRandomSeeds(kaldi::UniformRandomNumber *this, int a2)
{
  unint64_t v6 = *((void *)this + 5);
  __darwin_ct_rune_t v4 = (char *)this + 40;
  unint64_t v5 = v6;
  uint64_t v7 = (_DWORD *)*((void *)v4 - 2);
  *((void *)v4 - 1) = v7;
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = v5 - (void)v7;
    uint64_t v10 = v9 >> 1;
    if ((unint64_t)(v9 >> 1) <= 1) {
      uint64_t v10 = 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::string v12 = std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v4, v11);
    std::string v13 = (char *)*((void *)this + 3);
    std::string v14 = (char *)*((void *)this + 4);
    size_t v16 = &v12[v15];
    _DWORD *v12 = a2;
    long long v8 = v12 + 1;
    while (v14 != v13)
    {
      int v17 = *((_DWORD *)v14 - 1);
      v14 -= 4;
      *--std::string v12 = v17;
    }
    *((void *)this + 3) = v12;
    *((void *)this + 4) = v8;
    *((void *)this + 5) = v16;
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    *uint64_t v7 = a2;
    long long v8 = v7 + 1;
  }
  *((void *)this + 4) = v8;
  *(void *)this = 1;
}

float kaldi::UniformRandomNumber::RandUniform(kaldi::UniformRandomNumber *this, unint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(void *)this <= a2) {
    kaldi::KaldiAssertFailure_((kaldi *)"RandUniform", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/base/random-number.cc", (const char *)&stru_68.reserved1 + 2, "sequence_id < num_sequences_", a5);
  }
  return (float)rand_r((unsigned int *)(*((void *)this + 3) + 4 * a2)) * 4.6566e-10;
}

kaldi::GaussRandomNumber *kaldi::GaussRandomNumber::GaussRandomNumber(kaldi::GaussRandomNumber *this, const kaldi::UniformRandomNumber *a2)
{
  unint64_t v4 = *(void *)a2;
  *(void *)this = a2;
  *((void *)this + 1) = v4;
  unint64_t v5 = (void *)((char *)this + 16);
  std::vector<std::vector<float>>::vector((void *)this + 2, v4);
  std::vector<short>::vector((void *)this + 5, *(void *)a2);
  *((_DWORD *)this + 16) = 2;
  if (*((void *)this + 1))
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    int v8 = 2;
    do
    {
      std::vector<float>::resize(*v5 + v6, v8);
      int v8 = *((_DWORD *)this + 16);
      *(_WORD *)(*((void *)this + 5) + 2 * v7++) = v8;
      v6 += 24;
    }
    while (*((void *)this + 1) > v7);
  }
  return this;
}

void sub_C10F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void kaldi::GaussRandomNumber::Rand(kaldi::GaussRandomNumber *this, unsigned int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if ((a2 & 0x80000000) != 0 || *((void *)this + 1) <= (unint64_t)a2) {
    kaldi::KaldiAssertFailure_((kaldi *)"Rand", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/base/random-number.cc", &stru_B8.segname[1], "sequence_id >= 0 && sequence_id < num_sequences_", a5);
  }
  unint64_t v6 = a2;
  uint64_t v7 = *((void *)this + 5);
  int v8 = *(__int16 *)(v7 + 2 * a2);
  if (*((_DWORD *)this + 16) <= v8)
  {
    do
    {
      float v9 = kaldi::UniformRandomNumber::RandUniform(*(kaldi::UniformRandomNumber **)this, v6, a3, a4, a5) * 2.0 + -1.0;
      float v13 = kaldi::UniformRandomNumber::RandUniform(*(kaldi::UniformRandomNumber **)this, v6, v10, v11, v12) * 2.0
          + -1.0;
      float v14 = (float)(v13 * v13) + (float)(v9 * v9);
    }
    while (v14 >= 1.0);
    float v15 = logf(v14) * -2.0 / v14;
    float v16 = sqrtf(v15);
    int v17 = *(float **)(*((void *)this + 2) + 24 * v6);
    *int v17 = v16 * v9;
    v17[1] = v16 * v13;
    *(_WORD *)(*((void *)this + 5) + 2 * v6) = 1;
  }
  else
  {
    *(_WORD *)(v7 + 2 * astd::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v8 + 1;
  }
}

void *std::vector<std::vector<float>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<int>>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_C12F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::vector<short>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<short>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_C1364(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::SimplerSimpleRecurrentUnit::SimplerSimpleRecurrentUnit(kaldi::nnet1::SimplerSimpleRecurrentUnit *this, const kaldi::nnet1::SimplerSimpleRecurrentUnit *a2)
{
  *((void *)this + 7) = *(void *)((char *)a2 + *(void *)(*(void *)a2 - 40) + 8);
  *((_WORD *)this + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = off_26E7D8;
  *((_DWORD *)this + 36) = 1;
  *((void *)this + 6) = off_2633A0;
  *(void *)this = off_263250;
  *((void *)this + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = off_263470;
  *((void *)this + 13) = off_2634F0;
  *((void *)this + 14) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = off_262E60;
  *((void *)this + 3) = 0;
  operator new();
}

void sub_C1500(_Unwind_Exception *a1)
{
  kaldi::CuVector<float>::~CuVector(v6);
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100](v5, 0);
  kaldi::nnet1::HistoricalComponent::~HistoricalComponent(v4);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v3);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v2);
  kaldi::nnet1::Component::~Component(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SimplerSimpleRecurrentUnit::PropagateFnc(uint64_t **a1, uint64_t a2, unsigned int *a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(unsigned int *)(a2 + 20);
  unint64_t v6 = *a1;
  if (v5 != *(_DWORD *)((char *)a1 + *(*a1 - 8) + 40)) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-ssru.cc", (const char *)&dword_14 + 1, "batch_size == num_utts", a5);
  }
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v44, "PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-ssru.cc", 23, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Running forward propagation for batch std::string::size_type size = ", 45);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    std::string v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    float v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v44);
    unint64_t v6 = *a1;
  }
  ((void (*)(uint64_t **))v6[18])(a1);
  uint64_t v15 = (uint64_t)&(*(uint64_t **)((char *)a1 + *(*a1 - 8) + 8))[6 * (int)a4];
  if (!*(_DWORD *)(v15 + 20))
  {
    uint64_t v16 = ((uint64_t (*)(uint64_t **))(*a1)[9])(a1);
    kaldi::CuMatrix<float>::Resize(v15, v5, v16, 0, 0);
    kaldi::CuMatrixBase<float>::CopyRowsFromVec(v15, (uint64_t)(a1 + 2));
  }
  long long v46 = 0u;
  long long v45 = 0u;
  unsigned __int8 v44 = off_262DC8;
  char v47 = 0;
  kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>(a1[1], a2, (uint64_t)&v44, a4, v14);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v43, v5, *(unsigned int *)((char *)a1 + *(*a1 - 5) + 12), 1u, 0, 0);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v37, (uint64_t)&v44, 0, SHIDWORD(v45), 0, *(_DWORD *)((char *)a1 + *(*a1 - 5) + 12));
  kaldi::CuMatrixBase<float>::Sigmoid(v43, &v37, v17, v18, v19);
  uint64_t v37 = off_262D80;
  long long v38 = 0u;
  long long v39 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v37);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v40, (uint64_t)&v44, 0, SHIDWORD(v45), (const char *)*(unsigned int *)((char *)a1 + *(*a1 - 5) + 12), *(_DWORD *)((char *)a1 + *(*a1 - 5) + 12));
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)&v37, v5, *(unsigned int *)((char *)a1 + *(*a1 - 5) + 12), 1u, 0, 0);
  kaldi::CuMatrixBase<float>::Set((uint64_t)&v37, v20, v21, v22, v23, 1.0);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v37, (uint64_t)v43, 111, v24, v25, -1.0, 1.0);
  kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v37, (uint64_t)&v40, v26, v27, v28);
  kaldi::CuMatrixBase<float>::MulElements(v15, (uint64_t)v43, v29, v30, v31);
  kaldi::CuMatrixBase<float>::AddMat(v15, (uint64_t)&v37, 111, v32, v33, 1.0, 1.0);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a3, v15, 111, v34, v35);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v37);
  unint64_t v40 = off_262D80;
  long long v41 = 0u;
  long long v42 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v40);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v43);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v44);
}

void sub_C1958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (**a15)(), long long a16, long long a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  a15 = off_262D80;
  a16 = 0u;
  a17 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a15);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a18);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a24);
  _Unwind_Resume(a1);
}

unsigned int *kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (!a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"Propagate", "../subproject/libquasar/libkaldi/src/nnet/nnet-nnet.h", (const char *)&stru_68.size + 7, "NULL != out", a5);
  }
  if (((a1[1] - *a1) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v6 = (uint64_t *)(a1[9] + 24 * (int)a4);
    uint64_t v7 = *v6;
    uint64_t v8 = v6[1];
    while (v7 != v8)
    {
      *(void *)(v7 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(void *)(a3 + 32);
      v7 += 48;
    }
    uint64_t v9 = kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>(a1, a2, a4, a4, a5);
    kaldi::CuMatrix<float>::Resize(a3, *(unsigned int *)(v9 + 20), *(unsigned int *)(v9 + 16), 1u, 0);
    return kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)a3, v9, 111, v10, v11);
  }
  else
  {
    return (unsigned int *)kaldi::CuMatrix<float>::operator=(a3, a2);
  }
}

uint64_t virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::PropagateFnc(void *a1, uint64_t a2, unsigned int *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::SimplerSimpleRecurrentUnit::PropagateFnc((uint64_t **)((char *)a1 + *(void *)(*a1 - 128)), a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::SimplerSimpleRecurrentUnit::Info(kaldi::nnet1::Nnet **this)
{
  return kaldi::nnet1::Nnet::Info(this[1]);
}

uint64_t virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::Info(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
  return kaldi::nnet1::Nnet::Info(*(kaldi::nnet1::Nnet **)((char *)this + *(void *)(*(void *)this - 80) + 8));
}

void kaldi::nnet1::SimplerSimpleRecurrentUnit::CopyQuantized8Bit(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
}

void sub_C1B94()
{
}

void kaldi::nnet1::SimplerSimpleRecurrentUnit::CopyQuantized16Bit(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
}

void sub_C1C1C()
{
}

void virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::CopyQuantized16Bit(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
}

void kaldi::nnet1::SimplerSimpleRecurrentUnit::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v42, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-ssru.cc", 70, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Reading SimplerSimpleRecurrentUnit component", 44);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v42);
  }
  std::string __p = 0;
  uint64_t v40 = 0;
  unint64_t v6 = (kaldi::nnet1::Nnet **)(a1 + 8);
  uint64_t v41 = 0;
  while (1)
  {
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_47;
    }
    kaldi::ReadToken(a2, a3, (uint64_t)&__p, v7, v8);
    if (SHIBYTE(v41) < 0) {
      break;
    }
    if (HIBYTE(v41) != 5)
    {
      if (HIBYTE(v41) != 16)
      {
        if (HIBYTE(v41) == 29)
        {
          p_p = (uint64_t *)&__p;
          goto LABEL_36;
        }
        goto LABEL_59;
      }
      if (__p != (void *)0x72547475706E493CLL || v40 != 0x3E6D726F66736E61) {
        goto LABEL_59;
      }
LABEL_13:
      operator new();
    }
    if (__p != 811557692 || BYTE4(__p) != 62) {
      goto LABEL_59;
    }
LABEL_31:
    kaldi::CuVector<float>::Read(a1 + 16, a2, a3, v9, v8);
  }
  uint64_t v11 = v40;
  if (v40 == 5)
  {
    if (*(_DWORD *)__p != 811557692 || *((unsigned char *)__p + 4) != 62)
    {
      uint64_t v11 = v40;
      goto LABEL_34;
    }
    goto LABEL_31;
  }
  if (v40 == 16 && *(void *)__p == 0x72547475706E493CLL && *((void *)__p + 1) == 0x3E6D726F66736E61) {
    goto LABEL_13;
  }
LABEL_34:
  if (v11 != 29) {
    goto LABEL_59;
  }
  p_p = (uint64_t *)__p;
LABEL_36:
  uint64_t v16 = *p_p;
  uint64_t v17 = p_p[1];
  uint64_t v18 = p_p[2];
  uint64_t v19 = *(uint64_t *)((char *)p_p + 21);
  BOOL v20 = v16 == 0x656C706D69532F3CLL && v17 == 0x52656C706D695372;
  BOOL v21 = v20 && v18 == 0x746E657272756365;
  if (!v21 || v19 != 0x3E74696E55746E65)
  {
LABEL_59:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v42, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-ssru.cc", 87);
    uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Unrecognized token ", 19);
    if (v41 >= 0) {
      int v35 = &__p;
    }
    else {
      int v35 = __p;
    }
    if (v41 >= 0) {
      uint64_t v36 = HIBYTE(v41);
    }
    else {
      uint64_t v36 = v40;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v35, v36);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v42);
  }
LABEL_47:
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v42, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-ssru.cc", 90, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"done", 4);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v42);
  }
  if (!*v6)
  {
    uint64_t v37 = "input_transform_";
    long long v38 = (unsigned char *)(&stru_20 + 60);
    goto LABEL_71;
  }
  kaldi::nnet1::Nnet::GetHistoricalComponents(*v6, &v42);
  uint64_t v27 = v42;
  std::string v28 = v43;
  if (v42)
  {
    int v43 = v42;
    operator delete(v42);
  }
  if (v27 != v28)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v42, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-ssru.cc", 94);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Another recurrent neural networks are not supported inside SSRU component.", 74);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v42);
  }
  int v29 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 40) + 12);
  if (kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 8), v23, v24, v25, v26) != 2 * v29)
  {
    uint64_t v37 = "OutputDim()*2 == input_transform_->OutputDim()";
    long long v38 = (unsigned char *)(&stru_20 + 65);
    goto LABEL_71;
  }
  int v33 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 40) + 8);
  if (v33 != kaldi::nnet1::Nnet::InputDim(*(kaldi::nnet1::Nnet **)(a1 + 8), v30, v31, v32, v8))
  {
    uint64_t v37 = "InputDim() == input_transform_->InputDim()";
    long long v38 = (unsigned char *)(&stru_20 + 66);
    goto LABEL_71;
  }
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 40) + 12))
  {
    uint64_t v37 = "hidden_init_.Dim() == OutputDim()";
    long long v38 = (char *)&stru_20.nsects + 3;
LABEL_71:
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-ssru.cc", v38, v37, v8);
  }
  if (SHIBYTE(v41) < 0) {
    operator delete(__p);
  }
}

void sub_C21A8()
{
}

void sub_C21D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::ReadData(void *a1, uint64_t *a2, uint64_t a3)
{
}

void *kaldi::nnet1::SimplerSimpleRecurrentUnit::WriteData(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  if (!*(void *)(a1 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"WriteData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-ssru.cc", (const char *)&stru_20.flags + 3, "input_transform_", a5);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<InputTransform>", a4, a5);
  kaldi::nnet1::Nnet::Write(*(uint64_t **)(a1 + 8), a2, (uint64_t)a3, a4, v9);
  kaldi::WriteToken(a2, a3, (kaldi *)"<c_0>", v10, v11);
  kaldi::CuVectorBase<float>::Write((_DWORD *)(a1 + 16), a2, (int)a3, v12, v13);

  return kaldi::WriteToken(a2, a3, (kaldi *)"</SimplerSimpleRecurrentUnit>", v14, v15);
}

void *virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::WriteData(void *a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::SimplerSimpleRecurrentUnit::WriteData((uint64_t)a1 + *(void *)(*a1 - 120), a2, a3, a4, a5);
}

uint64_t *kaldi::nnet1::SimplerSimpleRecurrentUnit::EnsureBuffers(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
  return std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)((char *)this + *(void *)(*(void *)this - 64) + 8), 1uLL);
}

uint64_t *virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::EnsureBuffers(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
  return std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)((char *)this+ *(void *)(*(void *)this - 104)+ *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 104)) - 64)+ 8), 1uLL);
}

uint64_t kaldi::nnet1::SimplerSimpleRecurrentUnit::HistoryStateSize(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
  return *(unsigned int *)((char *)this + *(void *)(*(void *)this - 40) + 12);
}

uint64_t virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::HistoryStateSize(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
  return *(unsigned int *)((char *)this
                         + *(void *)(*(void *)this - 32)
                         + *(void *)(*(void *)((char *)this + *(void *)(*(void *)this - 32)) - 40)
                         + 12);
}

uint64_t kaldi::nnet1::SimplerSimpleRecurrentUnit::ResetHistoryState(uint64_t *a1, void *a2, uint64_t a3, int a4)
{
  (*(void (**)(uint64_t *))(*a1 + 144))(a1);
  if (a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-ssru.cc", &stru_68.sectname[13], "batch_idx == 0", v8);
  }
  uint64_t v9 = a2[1];
  uint64_t v10 = *a1;
  uint64_t v11 = (uint64_t)a1 + *(void *)(*a1 - 64);
  if (v9 != *(_DWORD *)(v11 + 40)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-ssru.cc", &stru_68.sectname[14], "sequence_idx.size() == hopts_.num_sequences", v8);
  }
  *(void *)(*(void *)(v11 + 8) + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a3;
  if (v9)
  {
    for (unint64_t i = 0; i != v9; ++i)
    {
      if (((*(void *)(*a2 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) == 0)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v14, "ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-ssru.cc", 123);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v14, "ResetHistoryState for SimplerSimpleRecurrentUnit makes only sense if all utterances get reset at the same time");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v14);
      }
    }
  }
  long long v16 = 0u;
  long long v15 = 0u;
  uint64_t v14 = off_262DC8;
  char v17 = 0;
  kaldi::CuMatrix<float>::operator=(*(uint64_t *)((char *)a1 + *(void *)(v10 - 64) + 8), (uint64_t)&v14);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v14);
}

void sub_C255C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_C2570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::ResetHistoryState(void *a1, void *a2, uint64_t a3, int a4)
{
  return kaldi::nnet1::SimplerSimpleRecurrentUnit::ResetHistoryState((void *)((char *)a1 + *(void *)(*a1 - 40)), a2, a3, a4);
}

uint64_t kaldi::nnet1::SimplerSimpleRecurrentUnit::ResetHistoryState(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
  uint64_t v2 = *(void *)this;
  uint64_t v3 = (char *)this + *(void *)(*(void *)this - 64);
  uint64_t v5 = (void *)*((void *)v3 + 1);
  unint64_t v4 = (void *)*((void *)v3 + 2);
  if (v4 != v5)
  {
    unint64_t v6 = v4 - 6;
    uint64_t v7 = v4 - 6;
    uint64_t v8 = v4 - 6;
    do
    {
      uint64_t v9 = *v8;
      v8 -= 6;
      (*(void (**)(void *))(v9 + 16))(v7);
      v6 -= 6;
      BOOL v10 = v7 == v5;
      uint64_t v7 = v8;
    }
    while (!v10);
    uint64_t v2 = *(void *)this;
  }
  *((void *)v3 + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v5;
  uint64_t v11 = *(uint64_t (**)(kaldi::nnet1::SimplerSimpleRecurrentUnit *))(v2 + 144);

  return v11(this);
}

uint64_t virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::ResetHistoryState(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
  return kaldi::nnet1::SimplerSimpleRecurrentUnit::ResetHistoryState((kaldi::nnet1::SimplerSimpleRecurrentUnit *)((char *)this + *(void *)(*(void *)this - 48)));
}

unsigned int *kaldi::nnet1::SimplerSimpleRecurrentUnit::GetHistoryState(void *a1, unsigned int *a2, int a3, uint64_t a4, const char *a5)
{
  if (a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-ssru.cc", (const char *)&stru_68.addr, "batch_idx == 0", a5);
  }
  uint64_t v7 = *(void *)((char *)a1 + *(void *)(*a1 - 64) + 8);
  kaldi::CuMatrix<float>::Resize((uint64_t)a2, *(unsigned int *)(v7 + 20), *(unsigned int *)(v7 + 16), 0, 0);
  uint64_t v10 = *(void *)((char *)a1 + *(void *)(*a1 - 64) + 8);

  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, v10, 111, v8, v9);
}

unsigned int *virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::GetHistoryState(void *a1, unsigned int *a2, int a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::SimplerSimpleRecurrentUnit::GetHistoryState((void *)((char *)a1 + *(void *)(*a1 - 56)), a2, a3, a4, a5);
}

_DWORD *kaldi::nnet1::SimplerSimpleRecurrentUnit::GetHistoryState(uint64_t a1, _DWORD *a2, unsigned int a3, int a4, const char *a5)
{
  if (a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-ssru.cc", (const char *)&stru_68.addr + 6, "batch_idx == 0", a5);
  }
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 64) + 40) <= (signed int)a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-ssru.cc", (const char *)&stru_68.addr + 7, "sequence_idx >= 0 && sequence_idx < hopts_.num_sequences", a5);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  kaldi::CuVector<float>::Resize((uint64_t)a2, v8, 0, v9, v10);
  uint64_t v14 = *(void *)(a1 + *(void *)(*(void *)a1 - 64) + 8);
  int v15 = *(_DWORD *)(v14 + 20);
  if (v15 < 1)
  {
    return kaldi::CuVectorBase<float>::CopyFromVec(a2, a1 + 16, v11, v12, v13);
  }
  else
  {
    if (v15 <= a3) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", &stru_1F8.segname[11], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v13);
    }
    uint64_t v16 = *(void *)(v14 + 8) + 4 * (int)(*(_DWORD *)(v14 + 24) * a3);
    unsigned int v17 = *(_DWORD *)(v14 + 16);
    uint64_t v18 = *(void *)(v14 + 32);
    v20[1] = v16;
    v20[0] = &off_262E20;
    v20[2] = v17;
    v20[3] = v18;
    return kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v20, v11, v12, v13);
  }
}

_DWORD *virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::GetHistoryState(void *a1, _DWORD *a2, unsigned int a3, int a4, const char *a5)
{
  return kaldi::nnet1::SimplerSimpleRecurrentUnit::GetHistoryState((uint64_t)a1 + *(void *)(*a1 - 64), a2, a3, a4, a5);
}

unsigned int *kaldi::nnet1::SimplerSimpleRecurrentUnit::SetHistoryState(uint64_t a1, uint64_t a2, int a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 144))(a1);
  if (a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-ssru.cc", (const char *)&stru_68.offset + 2, "batch_idx == 0", v6);
  }
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + *(void *)(*(void *)a1 - 64) + 8), *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0);
  uint64_t v9 = *(unsigned int **)(a1 + *(void *)(*(void *)a1 - 64) + 8);

  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(v9, a2, 111, v7, v8);
}

unsigned int *virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::SetHistoryState(void *a1, uint64_t a2, int a3)
{
  return kaldi::nnet1::SimplerSimpleRecurrentUnit::SetHistoryState((uint64_t)a1 + *(void *)(*a1 - 72), a2, a3);
}

void kaldi::nnet1::SimplerSimpleRecurrentUnit::SetHistoryState(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 144))(a1);
  if (a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-ssru.cc", (const char *)&stru_68.reloff + 1, "batch_idx == 0", v8);
  }
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 64) + 40) <= (signed int)a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-ssru.cc", (const char *)&stru_68.reloff + 2, "sequence_idx >= 0 && sequence_idx < hopts_.num_sequences", v8);
  }
  int v9 = *(_DWORD *)(a2 + 16);
  if (v9 != (*(unsigned int (**)(uint64_t))(*(void *)a1 + 72))(a1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-ssru.cc", (const char *)&stru_68.reloff + 3, "history.Dim() == HistoryStateSize()", v10);
  }
  uint64_t v11 = *(unsigned int *)(a2 + 16);
  uint64_t v12 = a1 + *(void *)(*(void *)a1 - 64);
  uint64_t v13 = *(void *)(v12 + 8);
  if ((int)v11 < 1)
  {
    kaldi::CuMatrix<float>::Resize(v13, 0, 0, 0, 0);
  }
  else
  {
    kaldi::CuMatrix<float>::Resize(v13, *(unsigned int *)(v12 + 40), v11, 2u, 0);
    uint64_t v17 = *(void *)(a1 + *(void *)(*(void *)a1 - 64) + 8);
    if (*(_DWORD *)(v17 + 20) <= a3) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v16);
    }
    uint64_t v18 = *(void *)(v17 + 8) + 4 * (int)(*(_DWORD *)(v17 + 24) * a3);
    unsigned int v19 = *(_DWORD *)(v17 + 16);
    uint64_t v20 = *(void *)(v17 + 32);
    v21[1] = v18;
    v21[0] = &off_262E20;
    v21[2] = v19;
    v21[3] = v20;
    kaldi::CuVectorBase<float>::CopyFromVec(v21, a2, v14, v15, v16);
  }
}

void virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::SetHistoryState(void *a1, uint64_t a2, unsigned int a3, int a4)
{
}

void kaldi::nnet1::SimplerSimpleRecurrentUnit::~SimplerSimpleRecurrentUnit(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
  kaldi::nnet1::HistoricalComponent::~HistoricalComponent((kaldi::nnet1::HistoricalComponent *)(v2 + 104));
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator((char *)this + 96);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(this);
  kaldi::nnet1::Component::~Component((kaldi::nnet1::SimplerSimpleRecurrentUnit *)((char *)this + 48));
}

{
  uint64_t vars8;

  kaldi::nnet1::SimplerSimpleRecurrentUnit::~SimplerSimpleRecurrentUnit(this);

  operator delete();
}

void kaldi::nnet1::SimplerSimpleRecurrentUnit::Copy(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
}

void sub_C2D64()
{
}

uint64_t kaldi::nnet1::SimplerSimpleRecurrentUnit::GetType(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
  return 278;
}

void kaldi::nnet1::SimplerSimpleRecurrentUnit::BackpropagateFnc()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "BackpropagateFnc", "../subproject/libquasar/libkaldi/src/nnet/nnet-ssru.h", 54);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::~SimplerSimpleRecurrentUnit(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
}

{
  uint64_t vars8;

  kaldi::nnet1::SimplerSimpleRecurrentUnit::~SimplerSimpleRecurrentUnit((kaldi::nnet1::SimplerSimpleRecurrentUnit *)((char *)this + *(void *)(*(void *)this - 24)));

  operator delete();
}

void virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::Copy(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
  kaldi::nnet1::SimplerSimpleRecurrentUnit::Copy((kaldi::nnet1::SimplerSimpleRecurrentUnit *)((char *)this
                                                                                            + *(void *)(*(void *)this - 32)));
}

void kaldi::nnet1::Component::CountZeroCorr(kaldi::nnet1::Component *this, int *a2, int *a3)
{
  *a2 = 0;
  *a3 = 0;
}

void kaldi::nnet1::Component::VectorizeWeightsCorrs(uint64_t a1)
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "VectorizeWeightsCorrs", "../subproject/libquasar/libkaldi/src/nnet/nnet-component.h", 274);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"VectorizeWeightsCorrs", 21);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" is not implemented for ", 24);
  unint64_t v4 = (kaldi::nnet1::Component *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  kaldi::nnet1::Component::TypeToMarker(v4, &v8);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v5 = &v8;
  }
  else {
    uint64_t v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
  }
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v8.__r_.__value_.__l.__size_;
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, size);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, " component.");
  std::string::~string(&v8);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
}

void *kaldi::nnet1::Component::InfoGradient@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t kaldi::nnet1::Component::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v11 = off_262D80;
  *(void *)&long long v12 = v4;
  *((void *)&v12 + 1) = v3 | 0x100000000;
  LODWORD(v13) = v3;
  DWORD1(v13) = v3;
  *((void *)&v13 + 1) = *(void *)(a2 + 24);
  unsigned int v5 = *(_DWORD *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 8);
  std::string v8 = off_262D80;
  *(void *)&long long v9 = v6;
  *((void *)&v9 + 1) = v5 | 0x100000000;
  LODWORD(v10) = v5;
  DWORD1(v10) = v5;
  *((void *)&v10 + 1) = *(void *)(a3 + 24);
  (*(void (**)(uint64_t, void (***)(), void (***)(), void))(*(void *)a1 + 112))(a1, &v11, &v8, 0);
  std::string v8 = off_262D80;
  long long v9 = 0u;
  long long v10 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v8);
  uint64_t v11 = off_262D80;
  long long v12 = 0u;
  long long v13 = 0u;
  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v11);
}

void sub_C3094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16 = v14;
  _OWORD *v15 = 0u;
  v15[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a9);
  *uint64_t v16 = 0u;
  v16[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a14);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::BackpropagateFnc()
{
}

char *kaldi::nnet1::Component::SetWorkspace(uint64_t a1, uint64_t a2)
{
  uint64_t result = (char *)(a1 + 24);
  if (result != (char *)a2) {
    return std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  return result;
}

void kaldi::nnet1::Component::GetUnitOutputFnc(uint64_t a1)
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "GetUnitOutputFnc", "../subproject/libquasar/libkaldi/src/nnet/nnet-component.h", 359);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GetUnitOutputFnc", 16);
  unsigned int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" is not implemented for ", 24);
  uint64_t v4 = (kaldi::nnet1::Component *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  kaldi::nnet1::Component::TypeToMarker(v4, &v8);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v5 = &v8;
  }
  else {
    unsigned int v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
  }
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v8.__r_.__value_.__l.__size_;
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, size);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, " component.");
  std::string::~string(&v8);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
}

{
  void *v2;
  void *v3;
  kaldi::nnet1::Component *v4;
  std::string *v5;
  std::string::size_type size;
  void *v7;
  std::string v8;
  void v9[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "GetUnitOutputFnc", "../subproject/libquasar/libkaldi/src/nnet/nnet-component.h", 363);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GetUnitOutputFnc", 16);
  unsigned int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" is not implemented for ", 24);
  uint64_t v4 = (kaldi::nnet1::Component *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  kaldi::nnet1::Component::TypeToMarker(v4, &v8);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v5 = &v8;
  }
  else {
    unsigned int v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
  }
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v8.__r_.__value_.__l.__size_;
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, size);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, " component.");
  std::string::~string(&v8);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
}

void virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::~SimplerSimpleRecurrentUnit(void *a1)
{
}

{
  uint64_t vars8;

  kaldi::nnet1::SimplerSimpleRecurrentUnit::~SimplerSimpleRecurrentUnit((kaldi::nnet1::SimplerSimpleRecurrentUnit *)((char *)a1 + *(void *)(*a1 - 24)));

  operator delete();
}

{
  kaldi::nnet1::SimplerSimpleRecurrentUnit::~SimplerSimpleRecurrentUnit((kaldi::nnet1::SimplerSimpleRecurrentUnit *)((char *)a1 + *(void *)(*a1 - 24)));
}

{
  uint64_t vars8;

  kaldi::nnet1::SimplerSimpleRecurrentUnit::~SimplerSimpleRecurrentUnit((kaldi::nnet1::SimplerSimpleRecurrentUnit *)((char *)a1 + *(void *)(*a1 - 24)));

  operator delete();
}

uint64_t kaldi::nnet1::HistoricalComponent::GetHistoryOptions(kaldi::nnet1::HistoricalComponent *this)
{
  return (uint64_t)this + 32;
}

uint64_t kaldi::nnet1::HistoricalComponent::SetHistoryOptions(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 8);
  return result;
}

void kaldi::nnet1::Nnet::Nnet(kaldi::nnet1::Nnet *this)
{
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  operator new();
}

void sub_C3518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v14 = v11;
  uint64_t v16 = *v14;
  if (*v14)
  {
    *(void *)(v10 + 3--*(_DWORD *)(a9 + 60) = v16;
    operator delete(v16);
  }
  kaldi::nnet1::Nnet::Nnet((void *)v10);
  uint64_t v17 = *(void **)(v10 + 280);
  if (v17)
  {
    *(void *)(v10 + 288) = v17;
    operator delete(v17);
  }
  a10 = (void **)(v10 + 256);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  kaldi::CuVector<float>::~CuVector(v13);
  kaldi::CuVector<float>::~CuVector(v12);
  uint64_t v18 = *(void **)(v10 + 168);
  if (v18) {
    operator delete(v18);
  }
  a10 = (void **)(v10 + 120);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 72);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  unsigned int v19 = *(void **)(v10 + 48);
  if (v19)
  {
    *(void *)(v10 + 56) = v19;
    operator delete(v19);
  }
  uint64_t v20 = *(void **)(v10 + 24);
  if (v20)
  {
    *(void *)(v10 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v20;
    operator delete(v20);
  }
  BOOL v21 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(a1);
}

void std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unsigned int v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 32;
      uint64_t v7 = v4 - 32;
      std::string v8 = v4 - 32;
      do
      {
        uint64_t v9 = *(void *)v8;
        v8 -= 32;
        (*(void (**)(char *))(v9 + 8))(v7);
        v6 -= 32;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      unsigned int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    unsigned int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      unsigned int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void kaldi::nnet1::SimplerSimpleRecurrentUnit::~SimplerSimpleRecurrentUnit(kaldi::nnet1::SimplerSimpleRecurrentUnit *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 40)) = a2[1];
  *(void *)((char *)this + *(void *)(*(void *)this - 48)) = a2[2];
  *(void *)((char *)this + *(void *)(*(void *)this - 56)) = a2[3];
  *(void *)((char *)this + *(void *)(*(void *)this - 64)) = a2[4];
  kaldi::CuVector<float>::~CuVector((void *)this + 2);
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)this + 1, 0);
}

char *std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<std::pair<int,float>>::__vallocate[abi:ne180100](v7, v11);
    long long v13 = (char *)v7[1];
    long long v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      unsigned int v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  long long v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    unsigned int v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  void *v12 = &v9[v17];
  return result;
}

kaldi::nnet1::Nnet *std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100](kaldi::nnet1::Nnet **a1, kaldi::nnet1::Nnet *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::nnet1::Nnet::~Nnet(result);
    operator delete();
  }
  return result;
}

uint64_t kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5 = (unint64_t)(a1[1] - *a1) >> 3;
  if ((int)v5 <= 0) {
    kaldi::KaldiAssertFailure_((kaldi *)"Propagate", "../subproject/libquasar/libkaldi/src/nnet/nnet-nnet.h", (const char *)&stru_68.reserved1 + 3, "NumComponents() > 0", a5);
  }
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1[18] + 32) <= (int)a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"Propagate", "../subproject/libquasar/libkaldi/src/nnet/nnet-nnet.h", (const char *)&stru_68.reserved2, "batch_idx >= 0 && batch_idx < opts_->num_subbatches", a5);
  }
  uint64_t v8 = (uint64_t *)(a1[9] + 24 * a3);
  if ((int)v5 >= (int)(-1431655765 * ((unint64_t)(v8[1] - *v8) >> 4))) {
    kaldi::KaldiAssertFailure_((kaldi *)"Propagate", "../subproject/libquasar/libkaldi/src/nnet/nnet-nnet.h", (const char *)&stru_68.reserved2 + 3, "(int32)propagate_buf_[batch_idx].size() >= NumComponents() + 1", a5);
  }
  unsigned int v10 = a3;
  kaldi::CuMatrix<float>::Resize(*v8, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 1u, 0);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(*(unsigned int **)(a1[9] + 24 * v10), a2, 111, v11, v12);
  uint64_t v13 = *a1;
  uint64_t v14 = (a1[1] - *a1) >> 3;
  if ((int)v14 >= 1)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    do
    {
      size_t v17 = *(_DWORD **)(v13 + 8 * v16++);
      uint64_t v18 = *(void *)(a1[9] + 24 * v10) + v15;
      kaldi::nnet1::Component::Propagate(v17, v18, v18 + 48, a3);
      uint64_t v13 = *a1;
      uint64_t v19 = a1[1] - *a1;
      v15 += 48;
    }
    while (v16 < (int)((unint64_t)v19 >> 3));
    uint64_t v14 = v19 >> 3;
  }
  return *(void *)(a1[9] + 24 * v10) + 48 * v14;
}

uint64_t kaldi::nnet1::Component::Propagate(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1[2] != *(_DWORD *)(a2 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v18, "Propagate", "../subproject/libquasar/libkaldi/src/nnet/nnet-component.h", 683);
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Non-matching dims! ", 19);
    long long v12 = (kaldi::nnet1::Component *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 24))(a1);
    kaldi::nnet1::Component::TypeToMarker(v12, &v17);
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v13 = &v17;
    }
    else {
      uint64_t v13 = (std::string *)v17.__r_.__value_.__r.__words[0];
    }
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v17.__r_.__value_.__l.__size_;
    }
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" input-dim : ", 13);
    uint64_t v16 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" data : ", 8);
    std::ostream::operator<<();
    std::string::~string(&v17);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v18);
  }
  uint64_t v8 = (*(uint64_t (**)(_DWORD *, void))(*(void *)a1 + 56))(a1, *(unsigned int *)(a2 + 20));
  kaldi::CuMatrix<float>::Resize(a3, v8, a1[3], 0, 0);
  uint64_t v9 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 112);

  return v9(a1, a2, a3, a4);
}

void kaldi::nnet1::Nnet::Nnet(void *a1)
{
  uint64_t v2 = (void *)a1[40];
  if (v2) {
    free(v2);
  }
  a1[39] = 0;
  a1[40] = 0;
  a1[41] = 0;
}

void kaldi::nnet1::AffineTransform::CopyQuantized8Bit(kaldi::nnet1::AffineTransform *this)
{
}

void sub_C3DF4()
{
}

void non-virtual thunk to'kaldi::nnet1::AffineTransform::CopyQuantized8Bit(kaldi::nnet1::AffineTransform *this)
{
}

void kaldi::nnet1::AffineTransform::CopyQuantized16Bit(kaldi::nnet1::AffineTransform *this)
{
}

void sub_C3E68()
{
}

void non-virtual thunk to'kaldi::nnet1::AffineTransform::CopyQuantized16Bit(kaldi::nnet1::AffineTransform *this)
{
}

void kaldi::nnet1::AffineTransform::CopyVectorwiseQuantized8Bit(kaldi::nnet1::AffineTransform *this)
{
}

void sub_C3EDC()
{
}

void non-virtual thunk to'kaldi::nnet1::AffineTransform::CopyVectorwiseQuantized8Bit(kaldi::nnet1::AffineTransform *this)
{
}

void kaldi::nnet1::AffineTransform::PropagateFnc(uint64_t a1, uint64_t a2, unsigned int *a3, int a4)
{
  uint64_t v8 = kaldi::nnet1::AffineTransform::Bias((kaldi::nnet1::AffineTransform *)a1);
  kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)a3, v8, v9, v10, v11, 1.0, 0.0);
  uint64_t v12 = *(void *)(a1 + 352);
  if (v12 == *(void *)(a1 + 360) || !*(_DWORD *)(v12 + 48 * a4 + 20))
  {
    uint64_t v17 = kaldi::nnet1::AffineTransform::Linearity((kaldi::nnet1::AffineTransform *)a1);
    kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)a3, a2, CblasNoTrans, v17, &stru_68.sectname[8], 1.0, 1.0);
  }
  else
  {
    uint64_t v13 = kaldi::nnet1::AffineTransform::Linearity((kaldi::nnet1::AffineTransform *)a1);
    kaldi::CuMatrixBase<float>::AddMatMatMasked((uint64_t)a3, a2, CblasNoTrans, v13, &stru_68.sectname[8], *(void *)(a1 + 352) + 48 * a4, 1.0);
  }
  if (*(unsigned char *)(a1 + 128))
  {
    kaldi::CuMatrixBase<float>::ApplySoftMaxPerRow(a3, (uint64_t)a3, v14, v15, v16);
  }
}

uint64_t kaldi::nnet1::AffineTransform::Bias(kaldi::nnet1::AffineTransform *this)
{
  uint64_t result = *((void *)this + 15);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 712);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "bias_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::AffineTransform::Linearity(kaldi::nnet1::AffineTransform *this)
{
  uint64_t result = *((void *)this + 14);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 708);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "linearity_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

float kaldi::nnet1::AffineTransform::PropagateFnc(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6 = kaldi::nnet1::AffineTransform::Bias((kaldi::nnet1::AffineTransform *)a1);
  kaldi::CuVectorBase<float>::CopyFromVec(a3, v6, v7, v8, v9);
  uint64_t v10 = *(void *)(a1 + 352);
  if (v10 == *(void *)(a1 + 360) || !*(_DWORD *)(v10 + 20))
  {
    uint64_t v12 = (_DWORD *)kaldi::nnet1::AffineTransform::Linearity((kaldi::nnet1::AffineTransform *)a1);
    kaldi::CuVectorBase<float>::AddMatVec((uint64_t)a3, v12, CblasNoTrans, a2, v13, 1.0, 1.0);
  }
  else
  {
    kaldi::nnet1::Component::PropagateFnc(a1, a2, (uint64_t)a3);
  }
  if (*(unsigned char *)(a1 + 128))
  {
    return kaldi::CuVectorBase<float>::ApplySoftMax((uint64_t)a3);
  }
  return result;
}

void kaldi::nnet1::AffineTransform::~AffineTransform(kaldi::nnet1::AffineTransform *this)
{
  kaldi::nnet1::AffineTransform::~AffineTransform(this);

  operator delete();
}

{
  char *v2;
  char *v3;
  char *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(void *)this = off_2635E0;
  uint64_t v2 = (char *)this + 88;
  *((void *)this + 11) = off_263720;
  uint64_t v3 = (char *)this + 96;
  *((void *)this + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = off_263748;
  uint64_t v4 = (char *)this + 104;
  *((void *)this + 13) = off_263770;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)this + 47);
  uint64_t v9 = (void **)((char *)this + 352);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 304);
  unint64_t v5 = (void *)*((void *)this + 35);
  if (v5)
  {
    *((void *)this + 36) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 32);
  if (v6)
  {
    *((void *)this + 33) = v6;
    operator delete(v6);
  }
  uint64_t v9 = (void **)((char *)this + 208);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)((char *)this + 184);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)((char *)this + 160);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)((char *)this + 136);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v7 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
  }
  uint64_t v8 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
  }
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v4);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v3);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);
}

void kaldi::nnet1::AffineTransform::Copy(kaldi::nnet1::AffineTransform *this)
{
}

void sub_C421C()
{
}

uint64_t kaldi::nnet1::AffineTransform::GetType(kaldi::nnet1::AffineTransform *this)
{
  return 257;
}

uint64_t kaldi::nnet1::AffineTransform::CountZeroCorr(kaldi::nnet1::AffineTransform *this, int *a2, int *a3)
{
  kaldi::nnet1::AffineTransform::EnsureCorrs(this);
  int v6 = *(_DWORD *)(kaldi::nnet1::AffineTransform::Bias(this) + 16);
  int v7 = *(_DWORD *)(kaldi::nnet1::AffineTransform::Linearity(this) + 20);
  uint64_t result = kaldi::nnet1::AffineTransform::Linearity(this);
  *a3 = v6 + *(_DWORD *)(result + 16) * v7;
  uint64_t v9 = *((void *)this + 18) - *((void *)this + 17);
  if (v9)
  {
    uint64_t v10 = *((void *)this + 21) - *((void *)this + 20);
    if (v10)
    {
      uint64_t v11 = v9 >> 3;
      uint64_t v12 = v10 >> 3;
      if (*((_DWORD *)this + 20) == 1) {
        int v13 = 0;
      }
      else {
        int v13 = *((_DWORD *)this + 20);
      }
      uint64_t v14 = v12 - 1;
      if (v11 - 1 != v13 || v14 != v13)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25, "CountZeroCorr", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 646);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Unexpected mismatch in indexes: ", 32);
        uint64_t v23 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"  ", 2);
        uint64_t v24 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"  ", 2);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
      }
      uint64_t v16 = kaldi::nnet1::AffineTransform::LinearityCorr(this, v13);
      int v21 = kaldi::CuMatrixBase<float>::CountZeros(v16, v17, v18, v19, v20);
      uint64_t v22 = kaldi::nnet1::AffineTransform::BiasCorr(this, v13);
      uint64_t result = kaldi::CuVectorBase<float>::CountZeros(v22);
      LODWORD(v9) = result + v21;
    }
    else
    {
      LODWORD(v9) = 0;
    }
  }
  *a2 = v9;
  return result;
}

void kaldi::nnet1::AffineTransform::VectorizeWeightsCorrs(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3, "VectorizeWeightsCorrs", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 541);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "Weights are already vectorized");
  }
  else
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v3, "VectorizeWeightsCorrs", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 544);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Performing vectorization of affine transform component", 54);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v3);
    }
    int v2 = *(_DWORD *)(*(void *)(a1 + 120) + 16)
       + *(_DWORD *)(*(void *)(a1 + 112) + 16) * *(_DWORD *)(*(void *)(a1 + 112) + 20);
    if (v2 == (*(unsigned int (**)(uint64_t))(*(void *)a1 + 176))(a1)) {
      kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub();
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3, "VectorizeWeightsCorrs", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 547);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "(nlinparams + bias_->Dim()) == NumParams()");
  }
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
}

void sub_C4914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::AffineTransform::Info(kaldi::nnet1::AffineTransform *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
  (*(void (**)(kaldi::nnet1::AffineTransform *, void *, void))(*(void *)this + 168))(this, v21, 0);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\n linearity", 11);
  uint64_t v4 = *((void *)this + 14);
  if (!v4) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", &stru_248.sectname[9], "linearity_", v2);
  }
  kaldi::nnet1::MomentStatistics<float>(v4);
  if ((v20 & 0x80u) == 0) {
    unint64_t v5 = v19;
  }
  else {
    unint64_t v5 = (void **)v19[0];
  }
  if ((v20 & 0x80u) == 0) {
    uint64_t v6 = v20;
  }
  else {
    uint64_t v6 = (uint64_t)v19[1];
  }
  int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, v6);
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\n bias", 6);
  int v13 = (_DWORD *)*((void *)this + 15);
  if (!v13) {
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", &stru_248.sectname[13], "bias_", v11);
  }
  kaldi::nnet1::MomentStatistics<float>(v13, v8, v9, v10, v11);
  if ((v18 & 0x80u) == 0) {
    uint64_t v14 = __p;
  }
  else {
    uint64_t v14 = (void **)__p[0];
  }
  if ((v18 & 0x80u) == 0) {
    uint64_t v15 = v18;
  }
  else {
    uint64_t v15 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);
  if ((char)v18 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v20 < 0) {
    operator delete(v19[0]);
  }
  std::stringbuf::str();
  if (v22 < 0) {
    operator delete((void *)v21[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_C4BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AffineTransform::InfoGradient(kaldi::nnet1::AffineTransform *this@<X0>, void *a2@<X8>)
{
  if (*((unsigned char *)this + 232))
  {
    std::string::basic_string[abi:ne180100]<0>(&v50, "\n  linearity_grad");
    kaldi::nnet1::MomentStatistics<float>((void *)this + 17, v4, v5, v6, v7);
    if ((v49 & 0x80u) == 0) {
      uint64_t v8 = v48;
    }
    else {
      uint64_t v8 = (void **)v48[0];
    }
    if ((v49 & 0x80u) == 0) {
      std::string::size_type v9 = v49;
    }
    else {
      std::string::size_type v9 = (std::string::size_type)v48[1];
    }
    uint64_t v10 = std::string::append(&v50, (const std::string::value_type *)v8, v9);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    uint64_t v12 = std::string::append(&v51, ", lr-coef ");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    kaldi::nnet1::ToString<float>();
    if ((v47 & 0x80u) == 0) {
      uint64_t v14 = v46;
    }
    else {
      uint64_t v14 = (void **)v46[0];
    }
    if ((v47 & 0x80u) == 0) {
      std::string::size_type v15 = v47;
    }
    else {
      std::string::size_type v15 = (std::string::size_type)v46[1];
    }
    uint64_t v16 = std::string::append(&v52, (const std::string::value_type *)v14, v15);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    unsigned __int8 v18 = std::string::append(&v53, ", max-norm ");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    kaldi::nnet1::ToString<float>();
    if ((v45 & 0x80u) == 0) {
      unsigned __int8 v20 = v44;
    }
    else {
      unsigned __int8 v20 = (void **)v44[0];
    }
    if ((v45 & 0x80u) == 0) {
      std::string::size_type v21 = v45;
    }
    else {
      std::string::size_type v21 = (std::string::size_type)v44[1];
    }
    char v22 = std::string::append(&v54, (const std::string::value_type *)v20, v21);
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    uint64_t v24 = std::string::append(&v55, "\n  bias_grad");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    kaldi::nnet1::MomentStatistics<float>((void *)this + 20, v26, v27, v28, v29);
    if ((v43 & 0x80u) == 0) {
      uint64_t v30 = v42;
    }
    else {
      uint64_t v30 = (void **)v42[0];
    }
    if ((v43 & 0x80u) == 0) {
      std::string::size_type v31 = v43;
    }
    else {
      std::string::size_type v31 = (std::string::size_type)v42[1];
    }
    uint64_t v32 = std::string::append(&v56, (const std::string::value_type *)v30, v31);
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    uint64_t v34 = std::string::append(&v57, ", lr-coef ");
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    kaldi::nnet1::ToString<float>();
    if ((v41 & 0x80u) == 0) {
      uint64_t v36 = __p;
    }
    else {
      uint64_t v36 = (void **)__p[0];
    }
    if ((v41 & 0x80u) == 0) {
      std::string::size_type v37 = v41;
    }
    else {
      std::string::size_type v37 = (std::string::size_type)__p[1];
    }
    long long v38 = std::string::append(&v58, (const std::string::value_type *)v36, v37);
    long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    a2[2] = *((void *)&v38->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    if ((char)v41 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    if ((char)v43 < 0) {
      operator delete(v42[0]);
    }
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
    if ((char)v45 < 0) {
      operator delete(v44[0]);
    }
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v54.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v53.__r_.__value_.__l.__data_);
    }
    if ((char)v47 < 0) {
      operator delete(v46[0]);
    }
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
    if ((char)v49 < 0) {
      operator delete(v48[0]);
    }
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "\n  linearity_grad is uninitialized\n  bias_grad is uninitialized");
  }
}

void sub_C4F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v64 - 41) < 0) {
    operator delete(*(void **)(v64 - 64));
  }
  if (*(char *)(v64 - 73) < 0) {
    operator delete(*(void **)(v64 - 96));
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(char *)(v64 - 105) < 0) {
    operator delete(*(void **)(v64 - 128));
  }
  if (*(char *)(v64 - 137) < 0) {
    operator delete(*(void **)(v64 - 160));
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (*(char *)(v64 - 169) < 0) {
    operator delete(*(void **)(v64 - 192));
  }
  if (a64 < 0) {
    operator delete(a59);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  _Unwind_Resume(a1);
}

void sub_C5080()
{
}

void sub_C5088()
{
}

void sub_C5090()
{
}

void sub_C5098()
{
}

void sub_C50A0()
{
}

void kaldi::nnet1::AffineTransform::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  float v103 = 2.0;
  int v104 = -1073741824;
  int v102 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)((char *)&def_5A5E8 + 2), &v101);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 244), &v100);
  int v99 = -1;
  memset(v98, 0, sizeof(v98));
  while (2)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_147;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v98, v6, v7);
    if ((SHIBYTE(v98[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v98[2]))
      {
        case 9:
          BOOL v10 = v98[0] == (void *)0x6D726F4E78614D3CLL && LOBYTE(v98[1]) == 62;
          long long v11 = (float *)(a1 + 252);
          if (v10) {
            goto LABEL_107;
          }
          BOOL v12 = v98[0] == (void *)0x6461724778614D3CLL && LOBYTE(v98[1]) == 62;
          long long v11 = (float *)(a1 + 248);
          if (v12) {
            goto LABEL_107;
          }
          if (v98[0] != (void *)0x78616D74666F533CLL || LOBYTE(v98[1]) != 62) {
            goto LABEL_193;
          }
          goto LABEL_32;
        case 0xA:
          if (v98[0] != (void *)0x61654D736169423CLL || LOWORD(v98[1]) != 15982) {
            goto LABEL_193;
          }
          goto LABEL_100;
        case 0xB:
          if (v98[0] != (void *)0x6E6152736169423CLL || *(void **)((char *)v98 + 3) != (void *)0x3E65676E61527361) {
            goto LABEL_193;
          }
          goto LABEL_86;
        case 0xC:
          if (v98[0] == (void *)0x536D6F646E61523CLL && LODWORD(v98[1]) == 1046766949) {
            goto LABEL_136;
          }
          unsigned __int8 v41 = v98;
          goto LABEL_142;
        case 0xD:
          if (v98[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v98 + 5) != (void *)0x3E7665646474536DLL) {
            goto LABEL_193;
          }
          goto LABEL_106;
        case 0xF:
          BOOL v19 = v98[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v98 + 7) == (void *)0x3E66656F43657461;
          long long v11 = (float *)(a1 + 236);
          if (!v19) {
            goto LABEL_193;
          }
          goto LABEL_107;
        case 0x12:
          if (v98[0] != (void *)0x6E6569646172473CLL
            || v98[1] != (void *)0x7079546D726F4E74
            || LOWORD(v98[2]) != 15973)
          {
            goto LABEL_193;
          }
          goto LABEL_135;
        case 0x13:
          BOOL v22 = v98[0] == (void *)0x61654C736169423CLL
             && v98[1] == (void *)0x6F43657461526E72
             && *(void **)((char *)&v98[1] + 3) == (void *)0x3E66656F43657461;
          long long v11 = (float *)(a1 + 240);
          if (v22) {
            goto LABEL_107;
          }
          if (v98[0] != (void *)0x61725474696E493CLL
            || v98[1] != (void *)0x79546D726F66736ELL
            || *(void **)((char *)&v98[1] + 3) != (void *)0x3E657079546D726FLL)
          {
            goto LABEL_193;
          }
          goto LABEL_137;
        default:
          goto LABEL_193;
      }
    }
    char v14 = 0;
    switch((unint64_t)v98[1])
    {
      case 9uLL:
        BOOL v15 = *(void *)v98[0] == 0x6D726F4E78614D3CLL && *((unsigned char *)v98[0] + 8) == 62;
        long long v11 = (float *)(a1 + 252);
        if (v15) {
          goto LABEL_107;
        }
        BOOL v16 = *(void *)v98[0] == 0x6461724778614D3CLL && *((unsigned char *)v98[0] + 8) == 62;
        long long v11 = (float *)(a1 + 248);
        if (v16) {
          goto LABEL_107;
        }
        if (*(void *)v98[0] != 0x78616D74666F533CLL || *((unsigned char *)v98[0] + 8) != 62) {
          goto LABEL_140;
        }
LABEL_32:
        *(unsigned char *)(a1 + 128) = 1;
        goto LABEL_139;
      case 0xAuLL:
        if (*(void *)v98[0] != 0x61654D736169423CLL || *((_WORD *)v98[0] + 4) != 15982) {
          goto LABEL_112;
        }
LABEL_100:
        long long v11 = (float *)&v104;
        goto LABEL_107;
      case 0xBuLL:
        if (*(void *)v98[0] != 0x6E6152736169423CLL || *(void *)((char *)v98[0] + 3) != 0x3E65676E61527361) {
          goto LABEL_112;
        }
LABEL_86:
        long long v11 = &v103;
        goto LABEL_107;
      case 0xDuLL:
        if (*(void *)v98[0] != 0x74536D617261503CLL || *(void *)((char *)v98[0] + 5) != 0x3E7665646474536DLL) {
          goto LABEL_193;
        }
LABEL_106:
        long long v11 = (float *)&v102;
        goto LABEL_107;
      case 0xFuLL:
        BOOL v34 = *(void *)v98[0] == 0x61526E7261654C3CLL && *(void *)((char *)v98[0] + 7) == 0x3E66656F43657461;
        long long v11 = (float *)(a1 + 236);
        if (v34) {
          goto LABEL_107;
        }
LABEL_112:
        char v14 = 0;
        goto LABEL_113;
      case 0x13uLL:
        BOOL v31 = *(void *)v98[0] == 0x61654C736169423CLL
           && *((void *)v98[0] + 1) == 0x6F43657461526E72
           && *(void *)((char *)v98[0] + 11) == 0x3E66656F43657461;
        long long v11 = (float *)(a1 + 240);
        if (v31)
        {
LABEL_107:
          kaldi::ReadBasicType<float>(a2, 0, v11, v8, v9);
          goto LABEL_139;
        }
        char v14 = 1;
LABEL_113:
        if (v98[1] == &dword_C && *(void *)v98[0] == 0x536D6F646E61523CLL && *((_DWORD *)v98[0] + 2) == 1046766949)
        {
LABEL_136:
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v99, v8, v9);
          goto LABEL_139;
        }
        if (v14)
        {
          BOOL v36 = *(void *)v98[0] == 0x61725474696E493CLL && *((void *)v98[0] + 1) == 0x79546D726F66736ELL;
          if (v36 && *(void *)((char *)v98[0] + 11) == 0x3E657079546D726FLL)
          {
LABEL_137:
            uint64_t v40 = &v101;
            goto LABEL_138;
          }
        }
        if (v98[1] == (char *)&dword_10 + 2)
        {
          BOOL v38 = *(void *)v98[0] == 0x6E6569646172473CLL && *((void *)v98[0] + 1) == 0x7079546D726F4E74;
          if (v38 && *((_WORD *)v98[0] + 8) == 15973)
          {
LABEL_135:
            uint64_t v40 = &v100;
LABEL_138:
            kaldi::ReadToken(a2, 0, (uint64_t)v40, v8, v9);
LABEL_139:
            std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
            continue;
          }
        }
LABEL_140:
        if (v98[1] != &dword_C) {
          goto LABEL_193;
        }
        unsigned __int8 v41 = (void **)v98[0];
LABEL_142:
        long long v42 = *v41;
        int v43 = *((_DWORD *)v41 + 2);
        if (v42 != (void *)0x6E6F706D6F432F3CLL || v43 != 1047817829)
        {
LABEL_193:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v97, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 171);
          float v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"Unknown token ", 14);
          if (SHIBYTE(v98[2]) >= 0) {
            float v82 = v98;
          }
          else {
            float v82 = (void **)v98[0];
          }
          if (SHIBYTE(v98[2]) >= 0) {
            uint64_t v83 = HIBYTE(v98[2]);
          }
          else {
            uint64_t v83 = (uint64_t)v98[1];
          }
          uint64_t v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)v82, v83);
          long long v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)", a typo in config?", 19);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)" (ParamStddev|BiasMean|BiasRange|LearnRateCoef|BiasLearnRateCoef|MaxNorm|InitTransformType|GradientNormType|MaxGrad|RandomSeed)", 127);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v97);
        }
LABEL_147:
        int inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v101);
        *(_DWORD *)(a1 + 244) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v100);
        if (v99 >= 1) {
          kaldi::UniformRandomNumber::SetRandomSeeds(a3, v99);
        }
        kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v93, a3);
        kaldi::Matrix<float>::Matrix((uint64_t)&v89, *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 8), 0, 0);
        int v49 = *(_DWORD *)(a1 + 12);
        if (v49 < 1) {
          goto LABEL_175;
        }
        unint64_t v50 = 0;
        LODWORD(v51) = *(_DWORD *)(a1 + 8);
        while (2)
        {
          if ((int)v51 < 1) {
            goto LABEL_174;
          }
          unint64_t v52 = 0;
          while (2)
          {
            switch(inited)
            {
              case 0:
                if (v50 >= v91 || v52 >= v90) {
LABEL_191:
                }
                  kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)&stru_68.addr, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v48);
                uint64_t v55 = v89 + 4 * (int)v50 * v92;
                if (v50 == v52) {
                  float v56 = 1.0;
                }
                else {
                  float v56 = 0.0;
                }
                goto LABEL_171;
              case 2:
                float v57 = *(float *)&v102;
                kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v93, 0, v46, v47, v48);
                if (v50 >= v91 || v52 >= v90) {
                  goto LABEL_191;
                }
                uint64_t v55 = v89 + 4 * (int)v50 * v92;
                float v56 = v57 * v58;
LABEL_171:
                *(float *)(v55 + 4 * v5std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v56;
                break;
              case 1:
                float v53 = *(float *)&v102;
                float v54 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v46, v47, v48);
                if (v50 >= v91 || v52 >= v90) {
                  goto LABEL_191;
                }
                uint64_t v55 = v89 + 4 * (int)v50 * v92;
                float v56 = (v54 + -0.5) * (float)(v53 + v53);
                goto LABEL_171;
            }
            ++v52;
            int64_t v51 = *(int *)(a1 + 8);
            if ((uint64_t)v52 < v51) {
              continue;
            }
            break;
          }
          int v49 = *(_DWORD *)(a1 + 12);
LABEL_174:
          if ((uint64_t)++v50 < v49) {
            continue;
          }
          break;
        }
LABEL_175:
        int v61 = *(_DWORD *)(kaldi::nnet1::AffineTransform::Linearity((kaldi::nnet1::AffineTransform *)a1) + 20);
        if (v61 != kaldi::ContextDependency::CentralPosition((kaldi::ContextDependency *)&v89)
          || (int v62 = *(_DWORD *)(kaldi::nnet1::AffineTransform::Linearity((kaldi::nnet1::AffineTransform *)a1) + 16),
              v62 != kaldi::ContextDependency::ContextWidth((kaldi::ContextDependency *)&v89)))
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v97, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 197);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"Linearity().NumRows() == mat.NumRows() && Linearity().NumCols() == mat.NumCols()", 80);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v97);
        }
        uint64_t v63 = kaldi::nnet1::AffineTransform::Linearity((kaldi::nnet1::AffineTransform *)a1);
        kaldi::CuMatrixBase<float>::CopyFromMat(v63, (uint64_t)&v89, 111, v64, v65);
        uint64_t v66 = *(unsigned int *)(a1 + 12);
        uint64_t v87 = 0;
        uint64_t v88 = 0;
        uint64_t v86 = 0;
        kaldi::Vector<float>::Resize((void **)&v86, v66, 0, v67, v68);
        if (*(int *)(a1 + 12) >= 1)
        {
          unint64_t v72 = 0;
          do
          {
            float v73 = *(float *)&v104;
            float v74 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v69, v70, v71);
            if (v72 >= v87) {
              kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", stru_68.sectname, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v71);
            }
            float v75 = v73 + (v74 + -0.5) * v103;
            v86[v72++] = v75;
          }
          while ((uint64_t)v72 < *(int *)(a1 + 12));
        }
        uint64_t v76 = kaldi::nnet1::AffineTransform::Bias((kaldi::nnet1::AffineTransform *)a1);
        if (*(_DWORD *)(v76 + 16) != v87)
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v97, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 207);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"Bias().Dim() == vec.Dim()", 25);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v97);
        }
        float v77 = (_DWORD *)kaldi::nnet1::AffineTransform::Bias((kaldi::nnet1::AffineTransform *)a1);
        kaldi::CuVectorBase<float>::CopyFromVec<float>(v77, (uint64_t)&v86, v78, v79, v80);
        kaldi::Vector<float>::Destroy((uint64_t)&v86);
        kaldi::Matrix<float>::~Matrix((uint64_t)&v89);
        if (__p)
        {
          char v96 = __p;
          operator delete(__p);
        }
        v97[0] = (void **)&v94;
        std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](v97);
        if (SHIBYTE(v98[2]) < 0) {
          operator delete(v98[0]);
        }
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v100.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v101.__r_.__value_.__l.__data_);
        }
        return;
      default:
        goto LABEL_113;
    }
  }
}

void sub_C5B8C()
{
  kaldi::Vector<float>::Destroy(&v0);
  JUMPOUT(0xC5BB4);
}

void sub_C5BA4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 193) < 0) {
    operator delete(*(void **)(v1 - 216));
  }
  if (*(char *)(v1 - 161) < 0) {
    operator delete(*(void **)(v1 - 184));
  }
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  _Unwind_Resume(exception_object);
}

void sub_C5BAC()
{
  kaldi::Matrix<float>::~Matrix(&v0);
  kaldi::GaussRandomNumber::~GaussRandomNumber((kaldi::GaussRandomNumber *)&v1);
  JUMPOUT(0xC5BC4);
}

void kaldi::nnet1::AffineTransform::WriteData(void *a1, void *a2, int a3, int a4)
{
  (*(void (**)(void *))(*a1 + 168))(a1);
  uint64_t v9 = a1[14];
  if (!v9) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", &stru_248.sectname[9], "linearity_", v8);
  }
  kaldi::CuMatrixBase<float>::Write(v9, a2, a3, a4);
  BOOL v12 = (_DWORD *)a1[15];
  if (!v12) {
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", &stru_248.sectname[13], "bias_", v11);
  }

  kaldi::CuVectorBase<float>::Write(v12, a2, a3, v10, v11);
}

void kaldi::nnet1::AffineTransform::BackpropagateFnc(kaldi::nnet1::AffineTransform *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v9 = *((void *)this + 44);
  if (v9 == *((void *)this + 45) || !*(_DWORD *)(v9 + 48 * a6 + 20))
  {
    uint64_t v13 = kaldi::nnet1::AffineTransform::Linearity(this);
    kaldi::CuMatrixBase<float>::AddMatMat(a5, a4, CblasNoTrans, v13, &stru_68.sectname[7], 1.0, 0.0);
  }
  else
  {
    uint64_t v11 = kaldi::nnet1::AffineTransform::Linearity(this);
    uint64_t v12 = *((void *)this + 44) + 48 * a6;
    kaldi::CuMatrixBase<float>::AddMatMatMasked(a5, a4, CblasNoTrans, v11, &stru_68.sectname[7], v12, 1.0);
  }
}

void kaldi::nnet1::AffineTransform::GetUnitOutputFnc(uint64_t a1, _DWORD *a2, unsigned int a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(void *)(a1 + 120);
  if (!v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", &stru_248.sectname[13], "bias_", a5);
  }
  if (*(_DWORD *)(v5 + 16) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.h", &stru_108.sectname[6], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a5);
  }
  kaldi::CuVectorBase<float>::Set(a4, *(float *)(*(void *)(v5 + 8) + 4 * (int)a3));
  uint64_t v11 = *(void *)(a1 + 112);
  if (!v11) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", &stru_248.sectname[9], "linearity_", v10);
  }
  if (*(_DWORD *)(v11 + 20) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", &stru_1F8.segname[11], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v10);
  }
  uint64_t v12 = *(void *)(v11 + 8) + 4 * (int)(*(_DWORD *)(v11 + 24) * a3);
  unsigned int v13 = *(_DWORD *)(v11 + 16);
  uint64_t v14 = *(void *)(v11 + 32);
  v15[1] = v12;
  v15[0] = &off_262E20;
  v15[2] = v13;
  void v15[3] = v14;
  kaldi::CuVectorBase<float>::AddMatVec(a4, a2, CblasNoTrans, (uint64_t)v15, v10, 1.0, 1.0);
}

float kaldi::nnet1::AffineTransform::GetUnitOutputFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(void *)(a1 + 120);
  if (!v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", &stru_248.sectname[13], "bias_", a5);
  }
  if (*(_DWORD *)(v5 + 16) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.h", &stru_108.sectname[6], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a5);
  }
  uint64_t v6 = *(void *)(a1 + 112);
  if (!v6) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", &stru_248.sectname[9], "linearity_", a5);
  }
  if (*(_DWORD *)(v6 + 20) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", &stru_1F8.segname[11], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", a5);
  }
  float v7 = *(float *)(*(void *)(v5 + 8) + 4 * (int)a3);
  uint64_t v8 = *(void *)(v6 + 8) + 4 * *(_DWORD *)(v6 + 24) * (int)a3;
  unsigned int v9 = *(_DWORD *)(v6 + 16);
  uint64_t v10 = *(void *)(v6 + 32);
  v12[1] = v8;
  v12[0] = &off_262E20;
  v12[2] = v9;
  v12[3] = v10;
  return v7 + kaldi::VecVec<float>(a2, (uint64_t)v12, a3, a4, a5);
}

uint64_t kaldi::nnet1::AffineTransform::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  while (kaldi::Peek(a2, a3) == 60)
  {
    memset(v41, 0, 24);
    kaldi::ReadToken(a2, a3, (uint64_t)v41, v7, v8);
    if (SHIBYTE(v41[2]) < 0)
    {
      unsigned int v13 = (char *)v41[1];
      if (v41[1] == (char *)&dword_C + 3)
      {
        BOOL v14 = *(void *)v41[0] == 0x61526E7261654C3CLL && *(void *)((char *)v41[0] + 7) == 0x3E66656F43657461;
        uint64_t v12 = (float *)(a1 + 236);
        if (v14) {
          goto LABEL_82;
        }
      }
      if (v41[1] == (char *)&dword_10 + 3)
      {
        BOOL v16 = *(void *)v41[0] == 0x61654C736169423CLL
           && *((void *)v41[0] + 1) == 0x6F43657461526E72
           && *(void *)((char *)v41[0] + 11) == 0x3E66656F43657461;
        uint64_t v12 = (float *)(a1 + 240);
        if (v16) {
          goto LABEL_82;
        }
        unsigned int v13 = (char *)v41[1];
      }
      if (v13 == (unsigned char *)&dword_8 + 1)
      {
        BOOL v17 = *(void *)v41[0] == 0x6D726F4E78614D3CLL && *((unsigned char *)v41[0] + 8) == 62;
        uint64_t v12 = (float *)(a1 + 252);
        if (v17) {
          goto LABEL_82;
        }
        unsigned int v13 = (char *)v41[1];
      }
      if (v13 == (unsigned char *)&dword_10 + 2)
      {
        if (*(void *)v41[0] == 0x6E6569646172473CLL
          && *((void *)v41[0] + 1) == 0x7079546D726F4E74
          && *((_WORD *)v41[0] + 8) == 15973)
        {
LABEL_87:
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v40 = 0;
          kaldi::ReadToken(a2, a3, (uint64_t)__p, v9, v10);
          *(_DWORD *)(a1 + 244) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
          if (SHIBYTE(v40) < 0) {
            operator delete(__p[0]);
          }
          goto LABEL_83;
        }
        unsigned int v13 = (char *)v41[1];
      }
      if (v13 != (unsigned char *)&dword_8 + 1) {
        goto LABEL_93;
      }
      BOOL v20 = *(void *)v41[0] == 0x6461724778614D3CLL && *((unsigned char *)v41[0] + 8) == 62;
      uint64_t v12 = (float *)(a1 + 248);
      if (!v20)
      {
        if (v41[1] != (char *)&dword_8 + 1) {
          goto LABEL_93;
        }
        std::string::size_type v21 = (void **)v41[0];
        goto LABEL_76;
      }
    }
    else if (HIBYTE(v41[2]) > 0x11u)
    {
      if (HIBYTE(v41[2]) == 18)
      {
        if (v41[0] == (void *)0x6E6569646172473CLL && v41[1] == (void *)0x7079546D726F4E74 && LOWORD(v41[2]) == 15973) {
          goto LABEL_87;
        }
LABEL_70:
        if (HIBYTE(v41[2]) != 9) {
          goto LABEL_93;
        }
        BOOL v27 = v41[0] == (void *)0x6461724778614D3CLL && LOBYTE(v41[1]) == 62;
        uint64_t v12 = (float *)(a1 + 248);
        if (!v27)
        {
          std::string::size_type v21 = v41;
LABEL_76:
          uint64_t v28 = *v21;
          int v29 = *((unsigned __int8 *)v21 + 8);
          if (v28 != (void *)0x78616D74666F533CLL || v29 != 62) {
            goto LABEL_93;
          }
          *(unsigned char *)(a1 + 128) = 1;
          goto LABEL_83;
        }
        goto LABEL_82;
      }
      if (HIBYTE(v41[2]) != 19
        || (v41[0] == (void *)0x61654C736169423CLL ? (BOOL v22 = v41[1] == (void *)0x6F43657461526E72) : (BOOL v22 = 0),
            v22 ? (BOOL v23 = *(void **)((char *)&v41[1] + 3) == (void *)0x3E66656F43657461) : (BOOL v23 = 0),
            uint64_t v12 = (float *)(a1 + 240),
            !v23))
      {
LABEL_93:
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 231);
        long long v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
        if (SHIBYTE(v41[2]) >= 0) {
          BOOL v36 = v41;
        }
        else {
          BOOL v36 = (void **)v41[0];
        }
        if (SHIBYTE(v41[2]) >= 0) {
          uint64_t v37 = HIBYTE(v41[2]);
        }
        else {
          uint64_t v37 = (uint64_t)v41[1];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v36, v37);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
    }
    else if (HIBYTE(v41[2]) == 9)
    {
      BOOL v24 = v41[0] == (void *)0x6D726F4E78614D3CLL && LOBYTE(v41[1]) == 62;
      uint64_t v12 = (float *)(a1 + 252);
      if (!v24) {
        goto LABEL_70;
      }
    }
    else
    {
      if (HIBYTE(v41[2]) != 15) {
        goto LABEL_93;
      }
      BOOL v11 = v41[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v41 + 7) == (void *)0x3E66656F43657461;
      uint64_t v12 = (float *)(a1 + 236);
      if (!v11) {
        goto LABEL_93;
      }
    }
LABEL_82:
    kaldi::ReadBasicType<float>(a2, a3, v12, v9, v10);
LABEL_83:
    if (SHIBYTE(v41[2]) < 0) {
      operator delete(v41[0]);
    }
  }
  (***(void (****)(void, uint64_t *, uint64_t, uint64_t))(a1 + 112))(*(void *)(a1 + 112), a2, a3, a4);
  (***(void (****)(void))(a1 + 120))();
  *(unsigned char *)(a1 + 16) = 0;
  if (*(_DWORD *)(kaldi::nnet1::AffineTransform::Linearity((kaldi::nnet1::AffineTransform *)a1) + 20) != *(_DWORD *)(a1 + 12)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)&stru_B8.reloff + 2, "Linearity().NumRows() == output_dim_", v31);
  }
  if (*(_DWORD *)(kaldi::nnet1::AffineTransform::Linearity((kaldi::nnet1::AffineTransform *)a1) + 16) != *(_DWORD *)(a1 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)&stru_B8.reloff + 3, "Linearity().NumCols() == input_dim_", v32);
  }
  uint64_t result = kaldi::nnet1::AffineTransform::Bias((kaldi::nnet1::AffineTransform *)a1);
  if (*(_DWORD *)(result + 16) != *(_DWORD *)(a1 + 12)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)&stru_B8.nreloc, "Bias().Dim() == output_dim_", v34);
  }
  return result;
}

void sub_C65F4()
{
}

void *kaldi::nnet1::AffineTransform::WriteConfig(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", a4, a5);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<BiasLearnRateCoef>", v8, v9);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxNorm>", v10, v11);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v12, v13);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 244), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v14, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v16, v17);
  uint64_t result = kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  if (*(unsigned char *)(a1 + 128)) {
    return kaldi::WriteToken(a2, a3, (kaldi *)"<Softmax>", v19, v20);
  }
  return result;
}

void sub_C6738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::AffineTransform::NumParams(kaldi::nnet1::AffineTransform *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *((void *)this + 14);
  if (!v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", &stru_248.sectname[9], "linearity_", a5);
  }
  uint64_t v6 = *((void *)this + 15);
  if (!v6) {
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", &stru_248.sectname[13], "bias_", a5);
  }
  return (*(_DWORD *)(v6 + 16) + *(_DWORD *)(v5 + 16) * *(_DWORD *)(v5 + 20));
}

_DWORD *kaldi::nnet1::AffineTransform::GetParams(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  uint64_t v10 = (_DWORD *)a1[14];
  if (!v10) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", &stru_248.sectname[9], "linearity_", v9);
  }
  int v11 = v10[4] * v10[5];
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  if (v11 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_6;
  }
  BOOL v17 = *(void **)a2;
  LODWORD(v18) = v11;
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v17, v10, v7, v8, v9);
  uint64_t v14 = (_DWORD *)a1[15];
  if (!v14) {
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", &stru_248.sectname[13], "bias_", v9);
  }
  int v15 = v14[4];
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  if ((v15 + v11) > *(_DWORD *)(a2 + 8)) {
LABEL_6:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v9);
  BOOL v17 = (void *)(*(void *)a2 + 4 * v11);
  LODWORD(v18) = v15;
  return kaldi::CuVectorBase<float>::CopyToVec<float>(v14, (uint64_t)&v17, v12, v13, v9);
}

_DWORD *kaldi::nnet1::AffineTransform::SetParams(kaldi::nnet1::AffineTransform *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(kaldi::nnet1::AffineTransform *))(*(void *)a1 + 176))(a1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)&stru_108.addr + 1, "wei_src.Dim() == NumParams()", v5);
  }
  int v6 = *(_DWORD *)(kaldi::nnet1::AffineTransform::Linearity(a1) + 20);
  int v7 = *(_DWORD *)(kaldi::nnet1::AffineTransform::Linearity(a1) + 16) * v6;
  uint64_t v8 = kaldi::nnet1::AffineTransform::Linearity(a1);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  if (v7 > *(_DWORD *)(a2 + 8)
    || (int v15 = *(char **)a2,
        LODWORD(v16) = v7,
        kaldi::CuMatrixBase<float>::CopyRowsFromVec(v8, &v15),
        uint64_t v10 = (_DWORD *)kaldi::nnet1::AffineTransform::Bias(a1),
        int v13 = *(_DWORD *)(kaldi::nnet1::AffineTransform::Bias(a1) + 16),
        uint64_t v16 = 0,
        uint64_t v17 = 0,
        (v13 + v7) > *(_DWORD *)(a2 + 8)))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v9);
  }
  int v15 = (char *)(*(void *)a2 + 4 * v7);
  LODWORD(v16) = v13;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v10, (uint64_t)&v15, v11, v12, v9);
}

float kaldi::nnet1::AffineTransform::GetNormalizedLearningRate(kaldi::nnet1::AffineTransform *this, int a2)
{
  if (!*((unsigned char *)this + 84)) {
    return *((float *)this + 14);
  }
  uint64_t v2 = *((void *)this + 35);
  unint64_t v3 = *((void *)this + 36) - v2;
  if (!v3) {
    return NAN;
  }
  unint64_t v4 = v3 >> 2;
  if ((int)v4 <= a2) {
    return NAN;
  }
  int v5 = v4 - 1;
  if (a2 >= 0) {
    int v5 = a2;
  }
  return *(float *)(v2 + 4 * v5);
}

float kaldi::nnet1::AffineTransform::SumParams(kaldi::nnet1::AffineTransform *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = *((void *)this + 14);
  if (!v6) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", &stru_248.sectname[9], "linearity_", a5);
  }
  float v8 = kaldi::CuMatrixBase<float>::Sum(v6, a2, a3, a4, a5);
  uint64_t v9 = *((void *)this + 15);
  if (!v9) {
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", &stru_248.sectname[13], "bias_", v7);
  }
  float v10 = v8;
  double v11 = kaldi::CuVectorBase<float>::Sum(v9);
  return v10 + *(float *)&v11;
}

uint64_t kaldi::nnet1::AffineTransform::PerturbParams(kaldi::nnet1::AffineTransform *this, float a2)
{
  uint64_t v4 = *(unsigned int *)(kaldi::nnet1::AffineTransform::Linearity(this) + 20);
  uint64_t v5 = kaldi::nnet1::AffineTransform::Linearity(this);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v18, v4, *(unsigned int *)(v5 + 16), 1u, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v18);
  uint64_t v6 = kaldi::nnet1::AffineTransform::Linearity(this);
  kaldi::CuMatrixBase<float>::AddMat(v6, (uint64_t)v18, 111, v7, v8, a2, 1.0);
  uint64_t v9 = *(unsigned int *)(kaldi::nnet1::AffineTransform::Bias(this) + 16);
  memset(&v17[1], 0, 24);
  v17[0] = off_262E60;
  kaldi::CuVector<float>::Resize((uint64_t)v17, v9, 1u, v10, v11);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v17);
  uint64_t v12 = kaldi::nnet1::AffineTransform::Bias(this);
  kaldi::CuVectorBase<float>::AddVec(v12, (uint64_t)v17, v13, v14, v15, a2, 1.0);
  kaldi::CuVector<float>::~CuVector(v17);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v18);
}

void sub_C6BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::AffineTransform::GetGradient(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float v8 = (kaldi::nnet1::AffineTransform *)(*(uint64_t (**)(void *))(*a1 + 16))(a1);
  (*(void (**)(kaldi::nnet1::AffineTransform *, uint64_t, uint64_t, void, void))(*(void *)v8 + 232))(v8, a2, a3, 0, 0);
  uint64_t v10 = a1[14];
  if (!v10) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", &stru_248.sectname[9], "linearity_", v9);
  }
  int v11 = *(_DWORD *)(v10 + 16) * *(_DWORD *)(v10 + 20);
  uint64_t v12 = (*(uint64_t (**)(void *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a4, v12, 0, v13, v14);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  if (v11 > *(_DWORD *)(a4 + 8)) {
    goto LABEL_6;
  }
  BOOL v27 = *(void **)a4;
  LODWORD(v28) = v11;
  uint64_t v16 = (_DWORD *)kaldi::nnet1::AffineTransform::LinearityCorr(v8, 0);
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v27, v16, v17, v18, v19);
  uint64_t v20 = a1[15];
  if (!v20) {
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", &stru_248.sectname[13], "bias_", v15);
  }
  int v21 = *(_DWORD *)(v20 + 16);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  if ((v21 + v11) > *(_DWORD *)(a4 + 8)) {
LABEL_6:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v15);
  BOOL v27 = (void *)(*(void *)a4 + 4 * v11);
  LODWORD(v28) = v21;
  BOOL v22 = (_DWORD *)kaldi::nnet1::AffineTransform::BiasCorr(v8, 0);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v22, (uint64_t)&v27, v23, v24, v25);
  return (*(uint64_t (**)(kaldi::nnet1::AffineTransform *))(*(void *)v8 + 8))(v8);
}

void kaldi::nnet1::AffineTransform::AccumGradients(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, int a5)
{
  kaldi::nnet1::AffineTransform::EnsureCorrs((kaldi::nnet1::AffineTransform *)a1);
  *(void *)(kaldi::nnet1::AffineTransform::LinearityCorr((kaldi::nnet1::AffineTransform *)a1, a5) + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a4;
  *(void *)(kaldi::nnet1::AffineTransform::BiasCorr((kaldi::nnet1::AffineTransform *)a1, a5) + ++*(void *)(result + 24) = a4;
  float v10 = *(float *)(a1 + 60);
  *(_DWORD *)(*(void *)(a1 + 256) + 4 * a5) = *(_DWORD *)(a2 + 20);
  uint64_t v11 = *(void *)(a1 + 352);
  if (v11 == *(void *)(a1 + 360) || !*(_DWORD *)(v11 + 48 * a5 + 20))
  {
    uint64_t v13 = kaldi::nnet1::AffineTransform::LinearityCorr((kaldi::nnet1::AffineTransform *)a1, a5);
    kaldi::CuMatrixBase<float>::AddMatMat(v13, (uint64_t)a3, CblasTrans, a2, &stru_68.sectname[7], 1.0, v10);
  }
  else
  {
    uint64_t v12 = kaldi::nnet1::AffineTransform::LinearityCorr((kaldi::nnet1::AffineTransform *)a1, a5);
    if (v10 == 0.0) {
      kaldi::CuMatrixBase<float>::SetZero(v12);
    }
    else {
      kaldi::CuMatrixBase<float>::Scale(v12, v10);
    }
    uint64_t v14 = kaldi::nnet1::AffineTransform::LinearityCorr((kaldi::nnet1::AffineTransform *)a1, a5);
    kaldi::CuMatrixBase<float>::AddMatMatMasked(v14, (uint64_t)a3, CblasTrans, a2, &stru_68.sectname[7], *(void *)(a1 + 352) + 48 * a5, 1.0);
  }
  uint64_t v15 = kaldi::nnet1::AffineTransform::BiasCorr((kaldi::nnet1::AffineTransform *)a1, a5);

  kaldi::CuVectorBase<float>::AddRowSumMat(v15, a3, 1.0, v10, v16, v17, v18);
}

uint64_t kaldi::nnet1::AffineTransform::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 248) = a3;
  *(_DWORD *)(result + 244) = a2;
  *(unsigned char *)(result + 23std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  return result;
}

void kaldi::nnet1::AffineTransform::NormalizeGradients(kaldi::nnet1::AffineTransform *this, float a2, int a3)
{
  float v4 = a2;
  int v6 = *((_DWORD *)this + 61);
  if (v6 == 3)
  {
    if (a2 >= 0.0 && a2 <= 1.0)
    {
      uint64_t v10 = kaldi::nnet1::AffineTransform::LinearityCorr(this, a3);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v10, *((void *)this + 23) + 48 * a3, v4);
      uint64_t v11 = kaldi::nnet1::AffineTransform::BiasCorr(this, a3);
      uint64_t v15 = *((void *)this + 26) + 32 * a3;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v11, v15, v4, v12, v13, v14);
    }
  }
  else if (v6 == 2)
  {
    if (a2 > 0.0)
    {
      uint64_t v16 = a3;
      if (*((unsigned char *)this + 84)) {
        float v4 = (float)*(int *)(*((void *)this + 32) + 4 * a3) * a2;
      }
      uint64_t v17 = kaldi::nnet1::AffineTransform::LinearityCorr(this, a3);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v17, (unsigned int *)(*((void *)this + 23) + 48 * (int)v16), v4, v18, v19, v20);
      uint64_t v21 = kaldi::nnet1::AffineTransform::BiasCorr(this, a3);
      long long v25 = (_DWORD *)(*((void *)this + 26) + 32 * v16);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v21, v25, v22, v23, v24, v4);
    }
  }
  else if (v6 == 1 && a2 > 0.0)
  {
    if (*((unsigned char *)this + 84)) {
      float v4 = (float)*(int *)(*((void *)this + 32) + 4 * a3) * a2;
    }
    uint64_t v7 = kaldi::nnet1::AffineTransform::LinearityCorr(this, a3);
    kaldi::nnet1::UpdatableComponent::ClipGradient(v7, v4);
    uint64_t v8 = kaldi::nnet1::AffineTransform::BiasCorr(this, a3);
    kaldi::nnet1::UpdatableComponent::ClipGradient(v8, v4);
  }
}

void kaldi::nnet1::AffineTransform::UpdateWeights(kaldi::nnet1::AffineTransform *this, void *a2, int a3)
{
  kaldi::nnet1::AffineTransform::EnsureCorrs(this);
  float v6 = *((float *)this + 16);
  float v7 = *((float *)this + 17);
  float v8 = *((float *)this + 18);
  int v9 = *((_DWORD *)this + 19);
  *(void *)(kaldi::nnet1::AffineTransform::Linearity(this) + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
  *(void *)(kaldi::nnet1::AffineTransform::Bias(this) + ++*(void *)(result + 24) = a2;
  int v11 = *((_DWORD *)this + 20);
  if (a3 >= 0) {
    unsigned int v12 = a3;
  }
  else {
    unsigned int v12 = *((_DWORD *)this + 20);
  }
  if (v11 == 1) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v12;
  }
  if ((int)v13 > v11) {
    kaldi::KaldiAssertFailure_((kaldi *)"UpdateWeights", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", &stru_1A8.segname[1], "batch_idx <= opts_.num_subbatches", v10);
  }
  *(void *)(kaldi::nnet1::AffineTransform::LinearityCorr(this, v13) + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
  *(void *)(kaldi::nnet1::AffineTransform::BiasCorr(this, v13) + ++*(void *)(result + 24) = a2;
  *(void *)(*((void *)this + 23) + 48 * (int)v13 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
  *(void *)(*((void *)this + 26) + 32 * (int)v13 + ++*(void *)(result + 24) = a2;
  if (v13 == *((_DWORD *)this + 20))
  {
    uint64_t v17 = kaldi::nnet1::AffineTransform::LinearityCorr(this, v13);
    uint64_t v18 = kaldi::nnet1::AffineTransform::LinearityCorr(this, 0);
    kaldi::CuMatrixBase<float>::AddMat(v17, v18, 111, v19, v20, 1.0, 0.0);
    uint64_t v21 = kaldi::nnet1::AffineTransform::BiasCorr(this, v13);
    uint64_t v22 = kaldi::nnet1::AffineTransform::BiasCorr(this, 0);
    kaldi::CuVectorBase<float>::AddVec(v21, v22, v23, v24, v25, 1.0, 0.0);
    if (*((int *)this + 20) > 1)
    {
      int v26 = 1;
      do
      {
        uint64_t v27 = kaldi::nnet1::AffineTransform::LinearityCorr(this, v13);
        uint64_t v28 = kaldi::nnet1::AffineTransform::LinearityCorr(this, v26);
        kaldi::CuMatrixBase<float>::AddMat(v27, v28, 111, v29, v30, 1.0, 1.0);
        uint64_t v31 = kaldi::nnet1::AffineTransform::BiasCorr(this, v13);
        uint64_t v32 = kaldi::nnet1::AffineTransform::BiasCorr(this, v26);
        kaldi::CuVectorBase<float>::AddVec(v31, v32, v33, v34, v35, 1.0, 1.0);
        ++v26;
      }
      while (v26 < *((_DWORD *)this + 20));
    }
    BOOL v36 = (int *)*((void *)this + 32);
    v36[(int)v13] = 0;
    if ((int)v13 >= 1)
    {
      int v37 = 0;
      uint64_t v38 = v13;
      long long v39 = v36;
      do
      {
        int v40 = *v39++;
        v37 += v40;
        v36[(int)v13] = v37;
        --v38;
      }
      while (v38);
    }
  }
  float v41 = *((float *)this + 14);
  if (*((unsigned char *)this + 84)) {
    float v41 = v41 / (float)*(int *)(*((void *)this + 32) + 4 * (int)v13);
  }
  uint64_t v42 = *((void *)this + 35);
  if ((int)v13 >= (unint64_t)((*((void *)this + 36) - v42) >> 2))
  {
    LODWORD(v81[0]) = 2143289344;
    std::vector<float>::resize((uint64_t)this + 280, (int)v13 + 1, v81);
    uint64_t v42 = *((void *)this + 35);
  }
  *(float *)(v42 + 4 * (int)v13) = v41;
  if (*((float *)this + 62) >= 0.0) {
    (*(void (**)(kaldi::nnet1::AffineTransform *, uint64_t))(*(void *)this + 248))(this, v13);
  }
  if (v6 != 0.0)
  {
    uint64_t v43 = kaldi::nnet1::AffineTransform::Linearity(this);
    float v44 = (float)-(float)(v41 * v6) * (float)*(int *)(*((void *)this + 32) + 4 * (int)v13);
    uint64_t v45 = kaldi::nnet1::AffineTransform::Linearity(this);
    kaldi::CuMatrixBase<float>::AddMat(v43, v45, 111, v46, v47, v44, 1.0);
  }
  if (v7 != 0.0)
  {
    int v48 = (_DWORD *)kaldi::nnet1::AffineTransform::Linearity(this);
    uint64_t v49 = kaldi::nnet1::AffineTransform::LinearityCorr(this, v13);
    kaldi::cu::RegularizeL1<float>(v48, v49, (float)(v7 * v41) * (float)*(int *)(*((void *)this + 32) + 4 * (int)v13), v41, v50, v51, v52);
  }
  if (v8 > 0.0)
  {
    if (*((int *)this + 20) >= 2)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v81, "UpdateWeights", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 480);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v81, "the multi batch gradient quantization does not work yet");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v81);
    }
    if (*((void *)this + 48) == *((void *)this + 47)) {
      kaldi::nnet1::AffineTransform::InitResidualAggregator(this, (kaldi::nnet1::AffineTransform *)((char *)this + 376));
    }
    kaldi::nnet1::QuantizerResidualAggregator::Quantize((kaldi::nnet1::AffineTransform *)((char *)this + 376), v9, v8, v14, v15, v16);
  }
  kaldi::nnet1::AffineTransform::ApplyCorr(this, v41, v13);
  if (*((float *)this + 63) > 0.0)
  {
    *((void *)this + 4std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
    uint64_t v53 = kaldi::nnet1::AffineTransform::Linearity(this);
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)this + 76, v53, 111, v54, v55);
    uint64_t v56 = kaldi::nnet1::AffineTransform::Linearity(this);
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)this + 304, v56, v57, v58, v59);
    uint64_t v60 = *((unsigned int *)this + 3);
    v81[2] = 0;
    float v82 = 0;
    v81[0] = off_262E60;
    v81[1] = 0;
    kaldi::CuVector<float>::Resize((uint64_t)v81, v60, 0, v61, v62);
    float v82 = a2;
    kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)v81, (unsigned int *)this + 76, 1.0, 0.0, v63, v64, v65);
    kaldi::CuVectorBase<float>::ApplyPow((uint64_t)v81, 0.5);
    kaldi::CuVector<float>::CuVector((uint64_t)v80, (uint64_t)v81, v66, v67, v68);
    kaldi::CuVectorBase<float>::Scale((uint64_t)v80, 1.0 / *((float *)this + 63));
    kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)v80, 1.0);
    kaldi::CuVectorBase<float>::InvertElements((uint64_t)v80);
    uint64_t v69 = kaldi::nnet1::AffineTransform::Linearity(this);
    kaldi::CuMatrixBase<float>::MulRowsVec(v69, (uint64_t)v80, v70, v71, v72);
    uint64_t v73 = kaldi::nnet1::AffineTransform::Bias(this);
    kaldi::CuVectorBase<float>::ApplyMaxNorm(v73, *((float *)this + 63), v74, v75, v76, v77);
    kaldi::CuVector<float>::~CuVector(v80);
    kaldi::CuVector<float>::~CuVector(v81);
  }
  uint64_t v78 = (unsigned char *)*((void *)this + 32);
  if (v13 == *((_DWORD *)this + 20))
  {
    uint64_t v79 = (unsigned char *)*((void *)this + 33);
    if (v78 != v79) {
      bzero(v78, ((v79 - v78 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    }
  }
  else
  {
    *(_DWORD *)&v78[4 * (int)v13] = 0;
  }
}

void sub_C7610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

__n128 kaldi::nnet1::UpdatableComponent::SetTrainOptions(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 8);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 23);
  *(__n128 *)(a1 + 56) = result;
  return result;
}

uint64_t kaldi::nnet1::UpdatableComponent::GetTrainOptions(kaldi::nnet1::UpdatableComponent *this)
{
  return (uint64_t)this + 48;
}

void non-virtual thunk to'kaldi::nnet1::AffineTransform::~AffineTransform(kaldi::nnet1::AffineTransform *this)
{
}

{
  uint64_t vars8;

  kaldi::nnet1::AffineTransform::~AffineTransform((kaldi::nnet1::AffineTransform *)((char *)this - 88));

  operator delete();
}

{
  kaldi::nnet1::AffineTransform::~AffineTransform((kaldi::nnet1::AffineTransform *)((char *)this - 96));
}

{
  uint64_t vars8;

  kaldi::nnet1::AffineTransform::~AffineTransform((kaldi::nnet1::AffineTransform *)((char *)this - 96));

  operator delete();
}

{
  kaldi::nnet1::AffineTransform::~AffineTransform((kaldi::nnet1::AffineTransform *)((char *)this - 104));
}

{
  uint64_t vars8;

  kaldi::nnet1::AffineTransform::~AffineTransform((kaldi::nnet1::AffineTransform *)((char *)this - 104));

  operator delete();
}

void kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(void **this)
{
  uint64_t v2 = this + 6;
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 3;
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    float v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      float v6 = v4 - 40;
      float v7 = v4 - 40;
      float v8 = v4 - 40;
      do
      {
        uint64_t v9 = *(void *)v8;
        v8 -= 40;
        (*(void (**)(char *))(v9 + 16))(v7);
        v6 -= 40;
        BOOL v10 = v7 == v2;
        float v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__clear[abi:ne180100](v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  unint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    float v4 = (void *)*--v3;
    __n128 result = v4;
    void *v3 = 0;
    if (v4) {
      __n128 result = (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__clear[abi:ne180100](v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  unint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    float v4 = (void *)*--v3;
    __n128 result = v4;
    void *v3 = 0;
    if (v4) {
      __n128 result = (void *)(*(uint64_t (**)(void *))(*result + 24))(result);
    }
  }
  v1[1] = v2;
  return result;
}

kaldi::nnet1::AffineTransform *kaldi::nnet1::AffineTransform::AffineTransform(kaldi::nnet1::AffineTransform *this, const kaldi::nnet1::AffineTransform *a2)
{
  *(void *)this = off_264E70;
  uint64_t v4 = *((void *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((void *)this + 1) = v4;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)this + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3);
  *(void *)this = off_266498;
  *((void *)this + 6) = off_26E7B8;
  long long v5 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)((char *)a2 + 71);
  *(_OWORD *)((char *)this + 56) = v5;
  *(void *)this = off_2635E0;
  *((void *)this + 11) = off_263720;
  *((void *)this + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = off_263748;
  *((void *)this + 13) = off_263770;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((unsigned char *)this + 128) = *((unsigned char *)a2 + 128);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)this + 17, (uint64_t)(*((void *)a2 + 18) - *((void *)a2 + 17)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)this + 20, (uint64_t)(*((void *)a2 + 21) - *((void *)a2 + 20)) >> 3);
  *((void *)this + 23) = 0;
  *((void *)this + ++*(void *)(result + 24) = 0;
  *((void *)this + 25) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 23, *((void *)a2 + 23), *((void *)a2 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 24) - *((void *)a2 + 23)) >> 4));
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 28) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)this + 26, *((void *)a2 + 26), *((void *)a2 + 27), (uint64_t)(*((void *)a2 + 27) - *((void *)a2 + 26)) >> 5);
  *((unsigned char *)this + 23std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = *((unsigned char *)a2 + 232);
  *(void *)((char *)this + 236) = *(void *)((char *)a2 + 236);
  *((_DWORD *)this + 61) = *((_DWORD *)a2 + 61);
  *((void *)this + 31) = *((void *)a2 + 31);
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  *((void *)this + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 32, *((const void **)a2 + 32), *((void *)a2 + 33), (uint64_t)(*((void *)a2 + 33) - *((void *)a2 + 32)) >> 2);
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 35, *((const void **)a2 + 35), *((void *)a2 + 36), (uint64_t)(*((void *)a2 + 36) - *((void *)a2 + 35)) >> 2);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 304, (char *)a2 + 304, 111);
  *((void *)this + 44) = 0;
  *((void *)this + 45) = 0;
  *((void *)this + 46) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 44, *((void *)a2 + 44), *((void *)a2 + 45), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 45) - *((void *)a2 + 44)) >> 4));
  *((void *)this + 55) = 0;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 4++*(void *)(result + 24) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 39std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  if (*((unsigned char *)this + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15, "AffineTransform", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 106);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  uint64_t v6 = *((void *)a2 + 14);
  if (v6) {
    kaldi::NewCuSubOrMat<float>(v6, 0);
  }
  if (*((void *)a2 + 15)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v8 = *((void *)this + 17);
  uint64_t v7 = *((void *)this + 18);
  if (v7 != v8)
  {
    unint64_t v9 = 0;
    do
    {
      if (*(void *)(*((void *)a2 + 17) + 8 * v9))
      {
        uint64_t v10 = kaldi::nnet1::AffineTransform::LinearityCorr(a2, v9);
        kaldi::NewCuSubOrMat<float>(v10, *((unsigned __int8 *)this + 16));
      }
      ++v9;
    }
    while (v9 < (v7 - v8) >> 3);
  }
  uint64_t v12 = *((void *)this + 20);
  uint64_t v11 = *((void *)this + 21);
  if (v11 != v12)
  {
    unint64_t v13 = 0;
    do
    {
      if (*(void *)(*((void *)a2 + 20) + 8 * v13))
      {
        kaldi::nnet1::AffineTransform::BiasCorr(a2, v13);
        kaldi::NewCuSubOrVec<float>();
      }
      ++v13;
    }
    while (v13 < (v11 - v12) >> 3);
  }
  if (*((void *)a2 + 48) != *((void *)a2 + 47)) {
    kaldi::nnet1::AffineTransform::InitResidualAggregator(this, (kaldi::nnet1::AffineTransform *)((char *)this + 376));
  }
  return this;
}

void sub_C80DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v18);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  kaldi::CuMatrix<float>::~CuMatrix(a10);
  uint64_t v20 = *a11;
  if (*a11)
  {
    *((void *)v16 + 36) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *a12;
  if (*a12)
  {
    *((void *)v16 + 33) = v21;
    operator delete(v21);
  }
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  uint64_t v22 = *((void *)v16 + 15);
  *((void *)v16 + 15) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  uint64_t v23 = *v17;
  *uint64_t v17 = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 24))(v23);
  }
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a13);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a14);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a15);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v16);
  _Unwind_Resume(a1);
}

void kaldi::NewCuSubOrMat<float>(uint64_t a1, int a2)
{
  if (a2) {
    operator new();
  }
  operator new();
}

void sub_C82DC()
{
}

void kaldi::NewCuSubOrVec<float>()
{
}

void sub_C8394()
{
}

uint64_t kaldi::nnet1::AffineTransform::LinearityCorr(kaldi::nnet1::AffineTransform *this, int a2)
{
  uint64_t v2 = *((void *)this + 17);
  if (a2 >= (unint64_t)((*((void *)this + 18) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "LinearityCorr", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 717);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "linearity_corr_.size() > batch_idx");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "LinearityCorr", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 718);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "linearity_corr_[batch_idx]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  uint64_t v2 = *((void *)this + 17);
  if (a2 >= (unint64_t)((*((void *)this + 18) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "LinearityCorr", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 722);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "linearity_corr_.size() > batch_idx");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "LinearityCorr", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 723);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "linearity_corr_[batch_idx]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::AffineTransform::BiasCorr(kaldi::nnet1::AffineTransform *this, int a2)
{
  uint64_t v2 = *((void *)this + 20);
  if (a2 >= (unint64_t)((*((void *)this + 21) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasCorr", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 727);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_corr_.size() > batch_idx");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasCorr", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 728);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_corr_[batch_idx]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  uint64_t v2 = *((void *)this + 20);
  if (a2 >= (unint64_t)((*((void *)this + 21) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasCorr", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 732);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_corr_.size() > batch_idx");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasCorr", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", 733);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_corr_[batch_idx]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::AffineTransform::InitResidualAggregator(kaldi::nnet1::AffineTransform *this, kaldi::nnet1::QuantizerResidualAggregator *a2)
{
  kaldi::nnet1::AffineTransform::EnsureCorrs(this);
  uint64_t v4 = kaldi::nnet1::AffineTransform::LinearityCorr(this, ((*((void *)this + 18) - *((void *)this + 17)) >> 3) - 1);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup((uint64_t *)a2, v4);
  uint64_t v5 = kaldi::nnet1::AffineTransform::BiasCorr(this, ((*((void *)this + 21) - *((void *)this + 20)) >> 3) - 1);

  return kaldi::nnet1::QuantizerResidualAggregator::PushSetup((uint64_t *)a2, v5);
}

void *std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::pair<int,float>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_C8610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::pair<int,float>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_C8690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<kaldi::CuMatrix<float>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_C870C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<kaldi::CuMatrix<float>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      kaldi::CuMatrix<float>::CuMatrix(a4 + v7, a2 + v7, 111);
      v7 += 48;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_C87F0(_Unwind_Exception *exception_object)
{
  if (v3) {
    std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(v2, v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<kaldi::HmmTopology::HmmState>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::CuVector<float>>,kaldi::CuVector<float>*,kaldi::CuVector<float>*,kaldi::CuVector<float>*>((uint64_t)(v6 + 2), a2, a3, v6[1], v7);
    v6[1] = result;
  }
  return result;
}

void sub_C8874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::CuVector<float>>,kaldi::CuVector<float>*,kaldi::CuVector<float>*,kaldi::CuVector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = a4;
  if (a2 != a3)
  {
    uint64_t v8 = 0;
    do
    {
      kaldi::CuVector<float>::CuVector(v5 + v8, a2 + v8, a3, a4, a5);
      v8 += 32;
    }
    while (a2 + v8 != a3);
    v5 += v8;
  }
  return v5;
}

void sub_C8900(_Unwind_Exception *exception_object)
{
  if (v3) {
    std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::CuVector<float>>,kaldi::CuVector<float>*,kaldi::CuVector<float>*,kaldi::CuVector<float>*>(v2, v1);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::AffineTransform::EnsureCorrs(kaldi::nnet1::AffineTransform *this)
{
  if (!*((unsigned char *)this + 232))
  {
    int v2 = *((_DWORD *)this + 20);
    if (v2 > 1) {
      int v3 = v2 + 1;
    }
    else {
      int v3 = 1;
    }
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)this + 17, v3);
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize((uint64_t *)this + 20, v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 23, v3);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 26, v3);
    if (v3 >= 1) {
      operator new();
    }
    std::vector<int>::resize((std::vector<int> *)((char *)this + 256), v3);
    if (*((float *)this + 63) > 0.0)
    {
      uint64_t v4 = *(unsigned int *)(kaldi::nnet1::AffineTransform::Linearity(this) + 20);
      uint64_t v5 = kaldi::nnet1::AffineTransform::Linearity(this);
      kaldi::CuMatrix<float>::Resize((uint64_t)this + 304, v4, *(unsigned int *)(v5 + 16), 1u, 0);
    }
    *((unsigned char *)this + 23std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 1;
  }
}

void sub_C8BD8()
{
}

uint64_t kaldi::nnet1::QuantizerResidualAggregator::PushSetup(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = *a1;
  unint64_t v4 = a1[1];
  memset(v15, 0, sizeof(v15));
  uint64_t v14 = (void (**)())off_262DC8;
  char v16 = 0;
  if (v4 >= a1[2])
  {
    uint64_t v6 = std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float>>(a1, (uint64_t)&v14);
  }
  else
  {
    kaldi::CuMatrix<float>::CuMatrix(v4, &v14, 111);
    uint64_t v6 = v4 + 48;
    a1[1] = v4 + 48;
  }
  a1[1] = v6;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v14);
  kaldi::CuMatrix<float>::Resize(*a1 + 16 * ((uint64_t)(v4 - v5) >> 4), *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v14, a2, 0, *(_DWORD *)(a2 + 20), 0, *(_DWORD *)(a2 + 16));
  unint64_t v7 = a1[4];
  if (v7 >= a1[5])
  {
    uint64_t v9 = std::vector<kaldi::CuSubMatrix<float>>::__push_back_slow_path<kaldi::CuSubMatrix<float>>(a1 + 3, (uint64_t)&v14);
  }
  else
  {
    uint64_t v8 = *((void *)&v15[1] + 1);
    *(void *)(v7 + 8) = *(void *)&v15[0];
    *(_OWORD *)(v7 + 16) = *(_OWORD *)((char *)v15 + 8);
    *(void *)(v7 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v8;
    *(void *)unint64_t v7 = off_262D80;
    uint64_t v9 = v7 + 40;
  }
  a1[4] = v9;
  uint64_t v14 = off_262D80;
  memset(v15, 0, sizeof(v15));
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v14);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v14, a2, 0, *(_DWORD *)(a2 + 20), 0, *(_DWORD *)(a2 + 16));
  unint64_t v10 = a1[7];
  if (v10 >= a1[8])
  {
    uint64_t v12 = std::vector<kaldi::CuSubMatrix<float>>::__push_back_slow_path<kaldi::CuSubMatrix<float>>(a1 + 6, (uint64_t)&v14);
  }
  else
  {
    uint64_t v11 = *((void *)&v15[1] + 1);
    *(void *)(v10 + 8) = *(void *)&v15[0];
    *(_OWORD *)(v10 + 16) = *(_OWORD *)((char *)v15 + 8);
    *(void *)(v10 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v11;
    *(void *)unint64_t v10 = off_262D80;
    uint64_t v12 = v10 + 40;
  }
  a1[7] = v12;
  uint64_t v14 = off_262D80;
  memset(v15, 0, sizeof(v15));
  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v14);
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (**v18)();
  long long v19;
  long long v20;
  char v21;

  uint64_t v5 = *a1;
  unint64_t v4 = a1[1];
  uint64_t v20 = 0u;
  uint64_t v19 = 0u;
  uint64_t v18 = (void (**)())off_262DC8;
  uint64_t v21 = 0;
  if (v4 >= a1[2])
  {
    uint64_t v6 = std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float>>(a1, (uint64_t)&v18);
  }
  else
  {
    kaldi::CuMatrix<float>::CuMatrix(v4, &v18, 111);
    uint64_t v6 = v4 + 48;
    a1[1] = v4 + 48;
  }
  a1[1] = v6;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v18);
  kaldi::CuMatrix<float>::Resize(*a1 + 16 * ((uint64_t)(v4 - v5) >> 4), 1, *(unsigned int *)(a2 + 16), 0, 0);
  unint64_t v7 = *(_DWORD *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v18 = off_262D80;
  *(void *)&uint64_t v19 = v8;
  *((void *)&v19 + 1) = v7 | 0x100000000;
  LODWORD(v20) = v7;
  DWORD1(v20) = v7;
  uint64_t v9 = *(void *)(a2 + 24);
  *((void *)&v20 + 1) = v9;
  unint64_t v10 = a1[4];
  if (v10 >= a1[5])
  {
    uint64_t v11 = std::vector<kaldi::CuSubMatrix<float>>::__push_back_slow_path<kaldi::CuSubMatrix<float>>(a1 + 3, (uint64_t)&v18);
  }
  else
  {
    *(_DWORD *)(v10 + 16) = v7;
    *(_DWORD *)(v10 + 20) = 1;
    *(_DWORD *)(v10 + ++*(void *)(result + 24) = v7;
    *(_DWORD *)(v10 + 28) = v7;
    *(void *)(v10 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v9;
    uint64_t v11 = v10 + 40;
    *(void *)unint64_t v10 = off_262D80;
    *(void *)(v10 + 8) = v8;
  }
  a1[4] = v11;
  uint64_t v18 = off_262D80;
  uint64_t v19 = 0u;
  uint64_t v20 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v18);
  uint64_t v12 = *(_DWORD *)(a2 + 16);
  unint64_t v13 = *(void *)(a2 + 8);
  uint64_t v18 = off_262D80;
  *(void *)&uint64_t v19 = v13;
  *((void *)&v19 + 1) = v12 | 0x100000000;
  LODWORD(v20) = v12;
  DWORD1(v20) = v12;
  uint64_t v14 = *(void *)(a2 + 24);
  *((void *)&v20 + 1) = v14;
  uint64_t v15 = a1[7];
  if (v15 >= a1[8])
  {
    char v16 = std::vector<kaldi::CuSubMatrix<float>>::__push_back_slow_path<kaldi::CuSubMatrix<float>>(a1 + 6, (uint64_t)&v18);
  }
  else
  {
    *(_DWORD *)(v15 + 16) = v12;
    *(_DWORD *)(v15 + 20) = 1;
    *(_DWORD *)(v15 + ++*(void *)(result + 24) = v12;
    *(_DWORD *)(v15 + 28) = v12;
    *(void *)(v15 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v14;
    char v16 = v15 + 40;
    *(void *)uint64_t v15 = off_262D80;
    *(void *)(v15 + 8) = v13;
  }
  a1[7] = v16;
  uint64_t v18 = off_262D80;
  uint64_t v19 = 0u;
  uint64_t v20 = 0u;
  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v18);
}

void sub_C8E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (**a9)(), long long a10, long long a11)
{
  a9 = off_262D80;
  a10 = 0u;
  a11 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a9);
  _Unwind_Resume(a1);
}

void sub_C9178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *uint64_t v9 = 0u;
  v9[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(uint64_t *a1, unint64_t a2)
{
  int v3 = (void *)a1[1];
  unint64_t v4 = ((uint64_t)v3 - *a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 8 * a2;
      while (v3 != (void *)v6)
      {
        uint64_t v8 = *--v3;
        uint64_t v7 = v8;
        void *v3 = 0;
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
        }
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__append(a1, v5);
  }
}

void std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize(uint64_t *a1, unint64_t a2)
{
  int v3 = (void *)a1[1];
  unint64_t v4 = ((uint64_t)v3 - *a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 8 * a2;
      while (v3 != (void *)v6)
      {
        uint64_t v8 = *--v3;
        uint64_t v7 = v8;
        void *v3 = 0;
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
        }
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__append(a1, v5);
  }
}

uint64_t *std::vector<kaldi::CuVector<float>>::resize(uint64_t *result, unint64_t a2)
{
  int v2 = result;
  uint64_t v3 = result[1];
  unint64_t v4 = (v3 - *result) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *result + 32 * a2;
      if (v3 != v6)
      {
        uint64_t v7 = v3 - 32;
        uint64_t v8 = (void *)(v3 - 32);
        uint64_t v9 = (void *)(v3 - 32);
        do
        {
          uint64_t v10 = *v9;
          v9 -= 4;
          uint64_t result = (uint64_t *)(*(uint64_t (**)(void *))(v10 + 8))(v8);
          v7 -= 32;
          BOOL v11 = v8 == (void *)v6;
          uint64_t v8 = v9;
        }
        while (!v11);
      }
      v2[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    return (uint64_t *)std::vector<kaldi::CuVector<float>>::__append(result, v5);
  }
  return result;
}

void std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t v14 = v13;
    uint64_t v15 = &v13[8 * v10];
    uint64_t v17 = &v13[8 * v12];
    bzero(v15, 8 * a2);
    char v16 = &v15[8 * a2];
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<std::unique_ptr<kaldi::CuMatrixBase<float>>>::~__split_buffer(&v14);
  }
}

void sub_C958C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<kaldi::CuMatrixBase<float>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<kaldi::CuMatrixBase<float>>>,std::reverse_iterator<std::unique_ptr<kaldi::CuMatrixBase<float>>*>,std::reverse_iterator<std::unique_ptr<kaldi::CuMatrixBase<float>>*>,std::reverse_iterator<std::unique_ptr<kaldi::CuMatrixBase<float>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<kaldi::CuMatrixBase<float>>>,std::reverse_iterator<std::unique_ptr<kaldi::CuMatrixBase<float>>*>,std::reverse_iterator<std::unique_ptr<kaldi::CuMatrixBase<float>>*>,std::reverse_iterator<std::unique_ptr<kaldi::CuMatrixBase<float>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CuMatrixBase<float>>>,std::reverse_iterator<std::unique_ptr<kaldi::CuMatrixBase<float>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CuMatrixBase<float>>>,std::reverse_iterator<std::unique_ptr<kaldi::CuMatrixBase<float>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CuMatrixBase<float>>>,std::reverse_iterator<std::unique_ptr<kaldi::CuMatrixBase<float>>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CuMatrixBase<float>>>,std::reverse_iterator<std::unique_ptr<kaldi::CuMatrixBase<float>>*>>::operator()[abi:ne180100](void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  int v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    *uint64_t v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 24))(result);
    }
    ++v1;
  }
  return result;
}

void **std::__split_buffer<std::unique_ptr<kaldi::CuMatrixBase<float>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 24))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    char v14 = v13;
    long long v15 = &v13[8 * v10];
    uint64_t v17 = &v13[8 * v12];
    bzero(v15, 8 * a2);
    long long v16 = &v15[8 * a2];
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<std::unique_ptr<kaldi::CuVectorBase<float>>>::~__split_buffer(&v14);
  }
}

void sub_C98EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<kaldi::CuVectorBase<float>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<kaldi::CuVectorBase<float>>>,std::reverse_iterator<std::unique_ptr<kaldi::CuVectorBase<float>>*>,std::reverse_iterator<std::unique_ptr<kaldi::CuVectorBase<float>>*>,std::reverse_iterator<std::unique_ptr<kaldi::CuVectorBase<float>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<kaldi::CuVectorBase<float>>>,std::reverse_iterator<std::unique_ptr<kaldi::CuVectorBase<float>>*>,std::reverse_iterator<std::unique_ptr<kaldi::CuVectorBase<float>>*>,std::reverse_iterator<std::unique_ptr<kaldi::CuVectorBase<float>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CuVectorBase<float>>>,std::reverse_iterator<std::unique_ptr<kaldi::CuVectorBase<float>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CuVectorBase<float>>>,std::reverse_iterator<std::unique_ptr<kaldi::CuVectorBase<float>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CuVectorBase<float>>>,std::reverse_iterator<std::unique_ptr<kaldi::CuVectorBase<float>>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CuVectorBase<float>>>,std::reverse_iterator<std::unique_ptr<kaldi::CuVectorBase<float>>*>>::operator()[abi:ne180100](void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  uint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    *uint64_t v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
    }
    ++v1;
  }
  return result;
}

void **std::__split_buffer<std::unique_ptr<kaldi::CuVectorBase<float>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t std::vector<kaldi::CuVector<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      uint64_t v14 = 32 * a2;
      long long v15 = (void *)(v7 + 8);
      uint64_t v16 = v7 + 32 * a2;
      do
      {
        void *v15 = 0;
        v15[1] = 0;
        _OWORD v15[2] = 0;
        *(v15 - 1) = off_262E60;
        v15 += 4;
        v7 += 32;
        v14 -= 32;
      }
      while (v14);
      uint64_t v7 = v16;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    void v21[4] = result;
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,kaldi::Vector<float>>>>(result, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t v17 = &v13[32 * v10];
    v21[0] = v13;
    v21[1] = v17;
    v21[3] = &v13[32 * v12];
    uint64_t v18 = 32 * a2;
    uint64_t v19 = v17 + 8;
    uint64_t v20 = &v17[32 * a2];
    do
    {
      *uint64_t v19 = 0;
      v19[1] = 0;
      v19[2] = 0;
      *(v19 - 1) = off_262E60;
      v19 += 4;
      v17 += 32;
      v18 -= 32;
    }
    while (v18);
    v21[2] = v20;
    std::vector<kaldi::CuVector<float>>::__swap_out_circular_buffer(a1, v21);
    return std::__split_buffer<kaldi::CuVector<float>>::~__split_buffer((uint64_t)v21);
  }
  return result;
}

void sub_C9CB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::CuVector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::CuVector<float>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::CuVector<float>>,std::reverse_iterator<kaldi::CuVector<float>*>,std::reverse_iterator<kaldi::CuVector<float>*>,std::reverse_iterator<kaldi::CuVector<float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, (const char *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::CuVector<float>>,std::reverse_iterator<kaldi::CuVector<float>*>,std::reverse_iterator<kaldi::CuVector<float>*>,std::reverse_iterator<kaldi::CuVector<float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 0; (const char *)(a3 + i) != a5; kaldi::CuVector<float>::CuVector(i + a7, i + a3, a3, a4, a5))
    i -= 32;
  return a6;
}

uint64_t std::__split_buffer<kaldi::CuVector<float>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(i - 32);
    *(void *)(a1 + 16) = i - 32;
    (*(void (**)(void))(v4 + 8))();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::FactorWeightFstImpl<fst::GallicArc<fst::ArcTpl<fst::LogWeightTpl<float>>,(fst::GallicType)0>,fst::GallicFactor<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>::Element>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v13 = v10;
  uint64_t v14 = &v10[48 * v4];
  uint64_t v16 = &v10[48 * v9];
  kaldi::CuMatrix<float>::CuMatrix(v14, a2, 111);
  long long v15 = v14 + 48;
  std::vector<kaldi::CuMatrix<float>>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<kaldi::CuMatrix<float>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_C9F2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::CuMatrix<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::CuSubMatrix<float>>::__push_back_slow_path<kaldi::CuSubMatrix<float>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  void v15[4] = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[40 * v4];
  v15[0] = v10;
  v15[1] = v11;
  void v15[3] = &v10[40 * v9];
  uint64_t v12 = *(void *)(a2 + 32);
  *((void *)v11 + 1) = *(void *)(a2 + 8);
  *((_OWORD *)v11 + 1) = *(_OWORD *)(a2 + 16);
  *((void *)v11 + 4) = v12;
  *(void *)uint64_t v11 = off_262D80;
  _OWORD v15[2] = v11 + 40;
  std::vector<kaldi::CuSubMatrix<float>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<kaldi::CuSubMatrix<float>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_CA058(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::CuSubMatrix<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<kaldi::CuSubMatrix<float>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::CuSubMatrix<float>>,std::reverse_iterator<kaldi::CuSubMatrix<float>*>,std::reverse_iterator<kaldi::CuSubMatrix<float>*>,std::reverse_iterator<kaldi::CuSubMatrix<float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  uint64_t v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::CuSubMatrix<float>>,std::reverse_iterator<kaldi::CuSubMatrix<float>*>,std::reverse_iterator<kaldi::CuSubMatrix<float>*>,std::reverse_iterator<kaldi::CuSubMatrix<float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      uint64_t v9 = *(void *)(a3 + v7 - 8);
      *(void *)(v8 - 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(void *)(a3 + v7 - 32);
      __n128 result = *(__n128 *)(a3 + v7 - 24);
      *(__n128 *)(v8 - ++*(void *)(result + 24) = result;
      *(void *)(v8 - 8) = v9;
      *(void *)(v8 - 40) = off_262D80;
      v7 -= 40;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

uint64_t std::__split_buffer<kaldi::CuSubMatrix<float>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(i - 40);
    *(void *)(a1 + 16) = i - 40;
    (*(void (**)(void))(v4 + 16))();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub()
{
}

void sub_CA274()
{
}

void kaldi::CuSubVector<float>::CopyDataAndReplaceWithCuSub()
{
}

void sub_CA340()
{
}

uint64_t kaldi::CuSubMatrix<float>::CuSubMatrix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  *(_OWORD *)(a1 + ++*(void *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = off_262D80;
  int v7 = *(_DWORD *)(a2 + 16) * *(_DWORD *)(a2 + 20);
  if (*(_DWORD *)(a3 + 16) < v7)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15, "CuSubMatrix", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", 1006);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Insufficient storage area: ", 27);
    uint64_t v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" needed: ", 9);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  kaldi::CuSubVector<float>::CuSubVector(v14, a3, 0, v7, a5);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)v15, (uint64_t)v14, *(_DWORD *)(a2 + 20));
  if (v15 != (_OWORD *)a1)
  {
    *(void *)(a1 + 8) = *((void *)&v15[0] + 1);
    *(_OWORD *)(a1 + 16) = v15[1];
    *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(void *)&v15[2];
  }
  *(void *)&v15[0] = off_262D80;
  memset((char *)v15 + 8, 0, 32);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v15);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)a1, a2, 111, v9, v10);
  int v11 = *(_DWORD *)(a3 + 16) - v7;
  *(void *)(a3 + 8) += 4 * v7;
  *(_DWORD *)(a3 + 16) = v11;
  *(void *)(a3 + ++*(void *)(result + 24) = 0;
  return a1;
}

void sub_CA4F8(_Unwind_Exception *a1)
{
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v1);
  _Unwind_Resume(a1);
}

void *kaldi::CuSubVector<float>::CuSubVector(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  *a1 = &off_262E20;
  int v7 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a3 + 16) < v7)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16, "CuSubVector", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.h", 524);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Insufficient storage area: ", 27);
    long long v15 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" needed: ", 9);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  kaldi::CuSubVector<float>::CuSubVector(v16, a3, 0, v7, a5);
  if (v16 != a1)
  {
    a1[1] = v16[1];
    *((_DWORD *)a1 + 4) = v17;
    a1[3] = v18;
  }
  kaldi::CuVectorBase<float>::CopyFromVec(a1, a2, v9, v10, v11);
  uint64_t v12 = *(int *)(a2 + 16);
  int v13 = *(_DWORD *)(a3 + 16) - v12;
  *(void *)(a3 + 8) += 4 * v12;
  *(_DWORD *)(a3 + 16) = v13;
  *(void *)(a3 + ++*(void *)(result + 24) = 0;
  return a1;
}

uint64_t kaldi::nnet1::MomentStatistics<float>(uint64_t a1)
{
  kaldi::Matrix<float>::Matrix((uint64_t)v5, *(unsigned int *)(a1 + 20), *(unsigned int *)(a1 + 16), 0, 0);
  kaldi::CuMatrixBase<float>::CopyToMat<float>(a1, v5, 111, v2, v3);
  kaldi::nnet1::MomentStatistics<float>((kaldi::ContextDependency *)v5);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v5);
}

void sub_CA6BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MomentStatistics<float>(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = a1[4];
  memset(v14, 0, sizeof(v14));
  kaldi::Vector<float>::Resize(v14, v6, 0, a4, a5);
  kaldi::CuVectorBase<float>::CopyToVec<float>(a1, (uint64_t)v14, v7, v8, v9);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v14, v10, v11, v12, v13);
  kaldi::Vector<float>::Destroy((uint64_t)v14);
}

void sub_CA738(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MomentStatistics<float>(kaldi::ContextDependency *a1)
{
  int v2 = kaldi::ContextDependency::CentralPosition(a1);
  int v3 = kaldi::ContextDependency::ContextWidth(a1);
  memset(v10, 0, sizeof(v10));
  kaldi::Vector<float>::Resize((void **)v10, (v3 * v2), 0, v4, v5);
  kaldi::VectorBase<float>::CopyRowsFromMat(v10, a1);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v10, v6, v7, v8, v9);
  kaldi::Vector<float>::Destroy((uint64_t)v10);
}

void sub_CA7D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MomentStatistics<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  float v41 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  kaldi::Vector<float>::Resize(&v41, *(unsigned int *)(a1 + 8), 1, a4, a5);
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v41, a1, v6, v7, v8);
  memset(v40, 0, sizeof(v40));
  kaldi::Vector<float>::Resize(v40, *(unsigned int *)(a1 + 8), 1, v9, v10);
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)v40, a1, v11, v12, v13);
  double v14 = kaldi::VectorBase<float>::Sum(a1);
  kaldi::VectorBase<float>::Add((uint64_t)&v41, -(float)(*(float *)&v14 / (float)*(int *)(a1 + 8)));
  kaldi::Vector<float>::Resize(v40, v42, 1, v15, v16);
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)v40, (uint64_t)&v41, v17, v18, v19);
  kaldi::VectorBase<float>::MulElements((uint64_t)&v41, (uint64_t)v40, v20, v21, v22);
  double v23 = kaldi::VectorBase<float>::Sum((uint64_t)&v41);
  float v24 = *(float *)&v23;
  int v25 = *(_DWORD *)(a1 + 8);
  kaldi::VectorBase<float>::MulElements((uint64_t)&v41, (uint64_t)v40, v26, v27, v28);
  kaldi::VectorBase<float>::Sum((uint64_t)&v41);
  pow((float)(v24 / (float)v25), 1.5);
  kaldi::VectorBase<float>::MulElements((uint64_t)&v41, (uint64_t)v40, v29, v30, v31);
  kaldi::VectorBase<float>::Sum((uint64_t)&v41);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v38);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"(min ", 7);
  kaldi::VectorBase<float>::Min((uint64_t *)a1);
  uint64_t v32 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", max ", 6);
  kaldi::VectorBase<float>::Max((uint64_t *)a1);
  uint64_t v33 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", mean ", 7);
  uint64_t v34 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", variance ", 11);
  long long v35 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", skewness ", 11);
  BOOL v36 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)", kurtosis ", 11);
  int v37 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)") ", 3);
  std::stringbuf::str();
  if (v39 < 0) {
    operator delete((void *)v38[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  kaldi::Vector<float>::Destroy((uint64_t)v40);
  kaldi::Vector<float>::Destroy((uint64_t)&v41);
}

void sub_CAB18(_Unwind_Exception *a1)
{
  kaldi::Vector<float>::Destroy(v1 - 144);
  kaldi::Vector<float>::Destroy(v1 - 120);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MomentStatistics<float>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (a1[1] == *a1) {
    kaldi::KaldiAssertFailure_((kaldi *)"MomentStatistics", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", &stru_B8.sectname[12], "mats.size() > 0", a5);
  }
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v13, *(unsigned int *)(*(void *)*a1 + 20), *(unsigned int *)(*(void *)*a1 + 16), 0, 0, 0);
  uint64_t v8 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = *(void *)(v8 + 8 * v9);
      if (*(_DWORD *)(v10 + 20) != v15 || *(_DWORD *)(v10 + 16) != v14) {
        kaldi::KaldiAssertFailure_((kaldi *)"MomentStatistics", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", &stru_B8.sectname[15], "mats[i]->NumRows() == mat.NumRows() && mats[i]->NumCols() == mat.NumCols()", v7);
      }
      kaldi::CuMatrixBase<float>::AddMat((uint64_t)v13, v10, 111, v6, v7, 1.0, 1.0);
      ++v9;
      uint64_t v8 = *a1;
    }
    while (v9 < (uint64_t)(a1[1] - *a1) >> 3);
  }
  kaldi::Matrix<float>::Matrix<float>((uint64_t)v12, (uint64_t)v13, 111, v6, v7);
  kaldi::nnet1::MomentStatistics<float>((kaldi::ContextDependency *)v12);
  kaldi::Matrix<float>::~Matrix((uint64_t)v12);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v13);
}

{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned char v13[40];
  unsigned char v14[16];
  int v15;
  int v16;

  if (a1[1] == *a1) {
    kaldi::KaldiAssertFailure_((kaldi *)"MomentStatistics", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)&stru_68.reserved2 + 3, "mats.size() > 0", a5);
  }
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v14, *(unsigned int *)(*a1 + 20), *(unsigned int *)(*a1 + 16), 0, 0, 0);
  uint64_t v8 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = v8 + v9;
      if (*(_DWORD *)(v8 + v9 + 20) != v16 || *(_DWORD *)(v11 + 16) != v15) {
        kaldi::KaldiAssertFailure_((kaldi *)"MomentStatistics", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)&stru_68.reserved3 + 3, "mats[i].NumRows() == mat.NumRows() && mats[i].NumCols() == mat.NumCols()", v7);
      }
      kaldi::CuMatrixBase<float>::AddMat((uint64_t)v14, v11, 111, v6, v7, 1.0, 1.0);
      ++v10;
      uint64_t v8 = *a1;
      v9 += 48;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 4) > v10);
  }
  kaldi::Matrix<float>::Matrix<float>((uint64_t)v13, (uint64_t)v14, 111, v6, v7);
  kaldi::nnet1::MomentStatistics<float>((kaldi::ContextDependency *)v13);
  kaldi::Matrix<float>::~Matrix((uint64_t)v13);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v14);
}

void sub_CAC8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ToString<float>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  if (v2 < 0) {
    operator delete((void *)v1[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_CADEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::MomentStatistics<float>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (a1[1] == *a1) {
    kaldi::KaldiAssertFailure_((kaldi *)"MomentStatistics", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)&stru_68.reloff + 3, "vecs.size() > 0", a5);
  }
  uint64_t v6 = *(unsigned int *)(*(void *)*a1 + 16);
  v22[1] = 0;
  uint64_t v23 = 0;
  v22[0] = off_262E60;
  uint64_t v24 = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v22, v6, 0, a4, a5);
  uint64_t v10 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v11 = 0;
    do
    {
      uint64_t v12 = *(void *)(v10 + 8 * v11);
      if (*(_DWORD *)(v12 + 16) != v23) {
        kaldi::KaldiAssertFailure_((kaldi *)"MomentStatistics", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)&stru_68.nreloc + 2, "vecs[i]->Dim() == vec.Dim()", v9);
      }
      kaldi::CuVectorBase<float>::AddVec((uint64_t)v22, v12, v7, v8, v9, 1.0, 1.0);
      ++v11;
      uint64_t v10 = *a1;
    }
    while (v11 < (uint64_t)(a1[1] - *a1) >> 3);
  }
  memset(v21, 0, sizeof(v21));
  kaldi::Vector<float>::Init(v21, v23, v7, v8, v9);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v22, (uint64_t)v21, v13, v14, v15);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v21, v16, v17, v18, v19);
  kaldi::Vector<float>::Destroy((uint64_t)v21);
  return kaldi::CuVector<float>::~CuVector(v22);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  void *v21[3];
  void v22[2];
  uint64_t v23;
  uint64_t v24;

  if (a1[1] == *a1) {
    kaldi::KaldiAssertFailure_((kaldi *)"MomentStatistics", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)&stru_68.size + 2, "vecs.size() > 0", a5);
  }
  uint64_t v6 = *(unsigned int *)(*a1 + 16);
  v22[1] = 0;
  uint64_t v23 = 0;
  v22[0] = off_262E60;
  uint64_t v24 = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v22, v6, 0, a4, a5);
  uint64_t v10 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      if (*(_DWORD *)(v10 + v11 + 16) != v23) {
        kaldi::KaldiAssertFailure_((kaldi *)"MomentStatistics", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)&stru_68.size + 5, "vecs[i].Dim() == vec.Dim()", v9);
      }
      kaldi::CuVectorBase<float>::AddVec((uint64_t)v22, v10 + v11, v7, v8, v9, 1.0, 1.0);
      ++v12;
      uint64_t v10 = *a1;
      v11 += 32;
    }
    while (v12 < (uint64_t)(a1[1] - *a1) >> 5);
  }
  memset(v21, 0, sizeof(v21));
  kaldi::Vector<float>::Init(v21, v23, v7, v8, v9);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v22, (uint64_t)v21, v13, v14, v15);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v21, v16, v17, v18, v19);
  kaldi::Vector<float>::Destroy((uint64_t)v21);
  return kaldi::CuVector<float>::~CuVector(v22);
}

void sub_CAF48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void kaldi::GaussRandomNumber::~GaussRandomNumber(kaldi::GaussRandomNumber *this)
{
  char v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)((char *)this + 16);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    std::vector<float>::__append((void **)a1, a2 - v3, a3);
  }
}

float *kaldi::nnet1::QuantizerResidualAggregator::Quantize(kaldi::nnet1::QuantizerResidualAggregator *this, int a2, float a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v6 = *(void *)this;
  uint64_t v7 = *((void *)this + 1) - *(void *)this;
  if (!v7
    || (unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 4),
        v9 != 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 4) - *((void *)this + 3)) >> 3))
    || v9 != 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 7) - *((void *)this + 6)) >> 3))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"Quantize", "../subproject/libquasar/libkaldi/src/nnet/nnet-component.h", (const char *)&stru_20.vmsize + 4, "residuals_.size() != 0 && residuals_.size() == orig_corrs_.size() && residuals_.size() == dest_corrs_.size()", a6);
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    __n128 result = kaldi::nnet1::QuantizerResidualAggregator::AddCorrectionToResidualAndQuantize(a2, *((void *)this + 3) + v13, v6 + v12, *((void *)this + 6) + v13, a6, a3);
    ++v14;
    uint64_t v6 = *(void *)this;
    v13 += 40;
    v12 += 48;
  }
  while (v14 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 4));
  return result;
}

void kaldi::nnet1::AffineTransform::ApplyCorr(kaldi::nnet1::AffineTransform *this, float a2, int a3)
{
  kaldi::nnet1::AffineTransform::EnsureCorrs(this);
  uint64_t v6 = kaldi::nnet1::AffineTransform::Linearity(this);
  float v7 = -(float)(a2 * *((float *)this + 59));
  uint64_t v8 = kaldi::nnet1::AffineTransform::LinearityCorr(this, a3);
  kaldi::CuMatrixBase<float>::AddMat(v6, v8, 111, v9, v10, v7, 1.0);
  uint64_t v11 = kaldi::nnet1::AffineTransform::Bias(this);
  float v12 = -(float)(a2 * *((float *)this + 60));
  uint64_t v13 = kaldi::nnet1::AffineTransform::BiasCorr(this, a3);

  kaldi::CuVectorBase<float>::AddVec(v11, v13, v14, v15, v16, v12, 1.0);
}

void std::vector<float>::__append(void **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  float v7 = v8;
  uint64_t v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 2)
  {
    if (a2)
    {
      uint64_t v16 = 4 * a2;
      uint64_t v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 2);
    if (v11 >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 2;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 1 > v11) {
      unint64_t v11 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v6, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v18 = &v15[4 * v12];
    uint64_t v19 = &v18[4 * a2];
    uint64_t v20 = 4 * a2;
    uint64_t v21 = v18;
    do
    {
      *(_DWORD *)uint64_t v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    uint64_t v22 = &v15[4 * v14];
    uint64_t v23 = (char *)*a1;
    for (uint64_t i = (char *)a1[1]; i != v23; i -= 4)
    {
      int v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

float *kaldi::nnet1::QuantizerResidualAggregator::AddCorrectionToResidualAndQuantize(int a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  kaldi::CuMatrixBase<float>::AddMat(a3, a2, 111, a4, a5, 1.0, 1.0);
  if (a1)
  {
    if (a1 != 3)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16, "AddCorrectionToResidualAndQuantize", "../subproject/libquasar/libkaldi/src/nnet/nnet-component.h", 117);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Wrong quantizer type (neither ", 30);
      unint64_t v14 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" nor ", 5);
      uint64_t v15 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"): ", 4);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
    }
    return kaldi::Quant3Levels<float>(a3, a4, v10, v11, v12, a6);
  }
  else
  {
    return (float *)kaldi::ZeroSmallValues<float>(a3, a4, v10, v11, v12, a6);
  }
}

uint64_t kaldi::nnet1::QuantizedAffineTransform<signed char>::QuantizedAffineTransform(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  *(void *)(a1 + 8) = a2[1];
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  *(void *)a1 = off_2637F0;
  float v7 = (unsigned int *)a2[14];
  if (!v7) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", &stru_248.sectname[9], "linearity_", a5);
  }
  kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(a1 + 48, v7);
  if (!a2[15]) {
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", &stru_248.sectname[13], "bias_", v8);
  }
  kaldi::CuVector<float>::CuVector(a1 + 96);
  return a1;
}

void sub_CB4D8(_Unwind_Exception *a1)
{
  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v2);
  kaldi::nnet1::Component::~Component(v1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::QuantizedAffineTransform<signed char>::~QuantizedAffineTransform(kaldi::nnet1::Component *a1)
{
  kaldi::nnet1::QuantizedAffineTransform<signed char>::~QuantizedAffineTransform(a1);

  operator delete();
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)a1 = off_2637F0;
  uint64_t v2 = (uint64_t)a1 + 48;
  kaldi::CuVector<float>::~CuVector((void *)a1 + 12);
  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v2);

  kaldi::nnet1::Component::~Component(a1);
}

void kaldi::nnet1::QuantizedAffineTransform<signed char>::Copy()
{
}

void sub_CB5F8()
{
  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v1);
  kaldi::nnet1::Component::~Component(v0);
  operator delete();
}

uint64_t kaldi::nnet1::QuantizedAffineTransform<signed char>::GetType()
{
  return 1033;
}

void kaldi::nnet1::QuantizedAffineTransform<signed char>::Info(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v15, "\n  linearity is quantized");
  uint64_t v4 = std::string::append(&v15, "\n  bias");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((_DWORD *)(a1 + 96), v6, v7, v8, v9);
  if ((v14 & 0x80u) == 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if ((v14 & 0x80u) == 0) {
    std::string::size_type v11 = v14;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  uint64_t v12 = std::string::append(&v16, (const std::string::value_type *)v10, v11);
  *a2 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((char)v14 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_CB720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::QuantizedAffineTransform<signed char>::WriteData(uint64_t a1, void *a2, int a3, int a4)
{
  kaldi::QuantizedMatrix<signed char>::Write((int *)(a1 + 48), a2, a3, a4);

  kaldi::CuVectorBase<float>::Write((_DWORD *)(a1 + 96), a2, a3, v7, v8);
}

uint64_t *kaldi::nnet1::QuantizedAffineTransform<signed char>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::CuMatrixBase<float>::AddMatMat<signed char>(a3, a2, 111, (unsigned int *)(a1 + 48), &stru_68.sectname[8], 1.0, 0.0);

  return kaldi::CuMatrixBase<float>::AddVecToRows(a3, a1 + 96, v5, v6, v7, 1.0, 1.0);
}

void kaldi::nnet1::QuantizedAffineTransform<signed char>::BackpropagateFnc()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "BackpropagateFnc", "../subproject/libquasar/libkaldi/src/nnet/nnet-quantized-affine-transform.h", 71);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"BackpropagateFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void kaldi::nnet1::QuantizedAffineTransform<signed char>::GetUnitOutputFnc(uint64_t a1, _DWORD *a2, int a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 112) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.h", &stru_108.sectname[6], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a5);
  }
  kaldi::CuVectorBase<float>::Set(a4, *(float *)(*(void *)(a1 + 104) + 4 * a3));
  kaldi::QuantizedMatrixBase<signed char>::Row(a1 + 48, a3, (uint64_t)v10);
  kaldi::CuVectorBase<float>::AddMatVec<signed char>(a4, a2, 111, (uint64_t)v10, v9, 1.0, 1.0);
}

float kaldi::nnet1::QuantizedAffineTransform<signed char>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 112) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.h", &stru_108.sectname[6], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a5);
  }
  float v6 = *(float *)(*(void *)(a1 + 104) + 4 * a3);
  kaldi::QuantizedMatrixBase<signed char>::Row(a1 + 48, a3, (uint64_t)v11);
  return v6 + kaldi::VecVec<float,signed char>(a2, (uint64_t)v11, v7, v8, v9);
}

double kaldi::nnet1::QuantizedAffineTransform<signed char>::ReadData(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::QuantizedMatrix<signed char>::Read(a1 + 12, a2, a3, a4, a5);
  double result = kaldi::CuVector<float>::Read((uint64_t)(a1 + 24), a2, a3, v8, v9);
  if (a1[28] != a1[3]) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-quantized-affine-transform.h", &stru_20.segname[4], "bias_.Dim() == output_dim_", v10);
  }
  return result;
}

uint64_t kaldi::nnet1::QuantizedAffineTransform<short>::QuantizedAffineTransform(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  *(void *)(a1 + 8) = a2[1];
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  *(void *)a1 = off_2638C8;
  uint64_t v7 = (unsigned int *)a2[14];
  if (!v7) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", &stru_248.sectname[9], "linearity_", a5);
  }
  kaldi::QuantizedMatrix<short>::QuantizedMatrix(a1 + 48, v7);
  if (!a2[15]) {
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", &stru_248.sectname[13], "bias_", v8);
  }
  kaldi::CuVector<float>::CuVector(a1 + 96);
  return a1;
}

void sub_CBB58(_Unwind_Exception *a1)
{
  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v2);
  kaldi::nnet1::Component::~Component(v1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::QuantizedAffineTransform<short>::~QuantizedAffineTransform(kaldi::nnet1::Component *a1)
{
  kaldi::nnet1::QuantizedAffineTransform<short>::~QuantizedAffineTransform(a1);

  operator delete();
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)a1 = off_2638C8;
  uint64_t v2 = (uint64_t)a1 + 48;
  kaldi::CuVector<float>::~CuVector((void *)a1 + 12);
  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v2);

  kaldi::nnet1::Component::~Component(a1);
}

void kaldi::nnet1::QuantizedAffineTransform<short>::Copy()
{
}

void sub_CBC78()
{
  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v1);
  kaldi::nnet1::Component::~Component(v0);
  operator delete();
}

uint64_t kaldi::nnet1::QuantizedAffineTransform<short>::GetType()
{
  return 1035;
}

void kaldi::nnet1::QuantizedAffineTransform<short>::WriteData(uint64_t a1, void *a2, int a3, int a4)
{
  kaldi::QuantizedMatrix<short>::Write((int *)(a1 + 48), a2, a3, a4);

  kaldi::CuVectorBase<float>::Write((_DWORD *)(a1 + 96), a2, a3, v7, v8);
}

uint64_t *kaldi::nnet1::QuantizedAffineTransform<short>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::CuMatrixBase<float>::AddMatMat<short>(a3, a2, 111, (unsigned int *)(a1 + 48), &stru_68.sectname[8], 1.0, 0.0);

  return kaldi::CuMatrixBase<float>::AddVecToRows(a3, a1 + 96, v5, v6, v7, 1.0, 1.0);
}

void kaldi::nnet1::QuantizedAffineTransform<short>::GetUnitOutputFnc(uint64_t a1, _DWORD *a2, int a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 112) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.h", &stru_108.sectname[6], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a5);
  }
  kaldi::CuVectorBase<float>::Set(a4, *(float *)(*(void *)(a1 + 104) + 4 * a3));
  kaldi::QuantizedMatrixBase<short>::Row(a1 + 48, a3, (uint64_t)v10);
  kaldi::CuVectorBase<float>::AddMatVec<short>(a4, a2, 111, (uint64_t)v10, v9, 1.0, 1.0);
}

float kaldi::nnet1::QuantizedAffineTransform<short>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 112) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.h", &stru_108.sectname[6], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a5);
  }
  float v6 = *(float *)(*(void *)(a1 + 104) + 4 * a3);
  kaldi::QuantizedMatrixBase<short>::Row(a1 + 48, a3, (uint64_t)v11);
  return v6 + kaldi::VecVec<float,short>(a2, (uint64_t)v11, v7, v8, v9);
}

double kaldi::nnet1::QuantizedAffineTransform<short>::ReadData(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::QuantizedMatrix<short>::Read(a1 + 12, a2, a3, a4, a5);
  double result = kaldi::CuVector<float>::Read((uint64_t)(a1 + 24), a2, a3, v8, v9);
  if (a1[28] != a1[3]) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-quantized-affine-transform.h", &stru_20.segname[4], "bias_.Dim() == output_dim_", v10);
  }
  return result;
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::VectorwiseQuantizedAffineTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  *(void *)a1 = off_2639A0;
  uint64_t v5 = *(void *)(a2 + 112);
  if (v5) {
    kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(a1 + 48, v5);
  }
  kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", &stru_248.sectname[9], "linearity_", a5);
}

void sub_CC048(_Unwind_Exception *a1)
{
  kaldi::VectorwiseQuantizedMatrix<signed char>::~VectorwiseQuantizedMatrix(v2);
  kaldi::nnet1::Component::~Component(v1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::~VectorwiseQuantizedAffineTransform(kaldi::nnet1::Component *a1)
{
  kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::~VectorwiseQuantizedAffineTransform(a1);

  operator delete();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)a1 = off_2639A0;
  kaldi::CuVector<float>::~CuVector((void *)a1 + 11);
  uint64_t v2 = *((void *)a1 + 9);
  *((void *)a1 + 9) = 0;
  if (v2) {
    operator delete();
  }
  unint64_t v3 = *((void *)a1 + 7);
  *((void *)a1 + 7) = 0;
  if (v3) {
    operator delete();
  }

  kaldi::nnet1::Component::~Component(a1);
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::Copy()
{
}

void sub_CC0F0()
{
}

uint64_t kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::GetType()
{
  return 1041;
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::Info(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v15, "\n  linearity is vectorwise quantized");
  uint64_t v4 = std::string::append(&v15, "\n  bias");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((_DWORD *)(a1 + 88), v6, v7, v8, v9);
  if ((v14 & 0x80u) == 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if ((v14 & 0x80u) == 0) {
    std::string::size_type v11 = v14;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  uint64_t v12 = std::string::append(&v16, (const std::string::value_type *)v10, v11);
  *a2 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((char)v14 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_CC1F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::WriteData(uint64_t a1, void *a2, int a3)
{
  kaldi::VectorwiseQuantizedMatrix<signed char>::Write((unsigned int *)(a1 + 48), a2, a3);

  kaldi::CuVectorBase<float>::Write((_DWORD *)(a1 + 88), a2, a3, v6, v7);
}

uint64_t *kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::CuMatrixBase<float>::AddMatMat<signed char>(a3, a2, 111, (_DWORD *)(a1 + 48), &stru_68.sectname[8], 1.0, 0.0);

  return kaldi::CuMatrixBase<float>::AddVecToRows(a3, a1 + 88, v5, v6, v7, 1.0, 1.0);
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::BackpropagateFnc()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "BackpropagateFnc", "../subproject/libquasar/libkaldi/src/nnet/nnet-vectorwise-quantized-affine-transform.h", 74);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"BackpropagateFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 104) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.h", &stru_108.sectname[6], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a5);
  }
  kaldi::CuVectorBase<float>::Set(a4, *(float *)(*(void *)(a1 + 96) + 4 * a3));
  kaldi::VectorwiseQuantizedMatrix<signed char>::Row(a1 + 48, a3, (uint64_t)v11);
  kaldi::QuantizedVectorBase<signed char>::AddMatVec((uint64_t)v11, a2 + 8, a4 + 8, 1.0, v9, v10);
}

float kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 104) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.h", &stru_108.sectname[6], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a5);
  }
  float v6 = *(float *)(*(void *)(a1 + 96) + 4 * a3);
  kaldi::VectorwiseQuantizedMatrix<signed char>::Row(a1 + 48, a3, (uint64_t)v11);
  return v6 + kaldi::VecVec<float,signed char>(a2, (uint64_t)v11, v7, v8, v9);
}

double kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::ReadData(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::VectorwiseQuantizedMatrix<signed char>::Read(a1 + 12, a2, a3, a4);
  double result = kaldi::CuVector<float>::Read((uint64_t)(a1 + 22), a2, a3, v7, v8);
  if (a1[26] != a1[3]) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-vectorwise-quantized-affine-transform.h", &stru_20.segname[7], "bias_.Dim() == output_dim_", v9);
  }
  return result;
}

uint64_t kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::VectorwiseQuantizedAffineTransform(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_264E70;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = off_2639A0;
  kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(a1 + 48, a2 + 48);
  kaldi::CuVector<float>::CuVector(a1 + 88, a2 + 88, v5, v6, v7);
  return a1;
}

void sub_CC63C(_Unwind_Exception *a1)
{
  kaldi::VectorwiseQuantizedMatrix<signed char>::~VectorwiseQuantizedMatrix(v2);
  kaldi::nnet1::Component::~Component(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(uint64_t a1, void *a2)
{
  uint64_t v3 = a1 - 48;
  uint64_t v4 = (void *)(a1 - 48);
  uint64_t v5 = (void *)(a1 - 48);
  do
  {
    uint64_t v6 = *v5;
    v5 -= 6;
    uint64_t result = (*(uint64_t (**)(void *))(v6 + 16))(v4);
    v3 -= 48;
    BOOL v8 = v4 == a2;
    uint64_t v4 = v5;
  }
  while (!v8);
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::CuVector<float>>,kaldi::CuVector<float>*,kaldi::CuVector<float>*,kaldi::CuVector<float>*>(uint64_t a1, void *a2)
{
  uint64_t v3 = a1 - 32;
  uint64_t v4 = (void *)(a1 - 32);
  uint64_t v5 = (void *)(a1 - 32);
  do
  {
    uint64_t v6 = *v5;
    v5 -= 4;
    uint64_t result = (*(uint64_t (**)(void *))(v6 + 8))(v4);
    v3 -= 32;
    BOOL v8 = v4 == a2;
    uint64_t v4 = v5;
  }
  while (!v8);
  return result;
}

void *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::CuVector<float>>,std::reverse_iterator<kaldi::CuVector<float>*>,std::reverse_iterator<kaldi::CuVector<float>*>,std::reverse_iterator<kaldi::CuVector<float>*>>(void *a1, void *a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = a1;
  do
  {
    uint64_t v5 = *v4;
    v4 += 4;
    (*(void (**)(void))(v5 + 8))();
    v3 += 4;
    uint64_t result = v4;
  }
  while (v4 != a2);
  return result;
}

double kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent(kaldi::nnet1::RecurrentBaseComponent *this, uint64_t *a2)
{
  *(void *)this = off_2655D8;
  *((void *)this + 1) = 0;
  *((void *)this + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = off_26E7D8;
  *((_DWORD *)this + 10) = 1;
  uint64_t v2 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v2 - 24)) = a2[1];
  *(_OWORD *)((char *)this + 56) = xmmword_20CEC0;
  *((_DWORD *)this + 18) = -1082130432;
  *(void *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 4std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((unsigned char *)this + 86) = 0;
  *((void *)this + 6) = off_26E7F8;
  *((void *)this + 11) = off_26E818;
  *((void *)this + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0x100000001;
  double result = 0.0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((void *)this + 19) = 0;
  return result;
}

double kaldi::nnet1::BidirectionalRecurrentComponent::BidirectionalRecurrentComponent(kaldi::nnet1::BidirectionalRecurrentComponent *this, int a2, int a3)
{
  *((_DWORD *)this + 94) = a2;
  *((_DWORD *)this + 95) = a3;
  *((_WORD *)this + 19std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((void *)this + 50) = 0;
  *((void *)this + 51) = 0;
  *((void *)this + 49) = 0;
  *((void *)this + 46) = off_266498;
  *((void *)this + 5std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = off_26E7B8;
  *(_OWORD *)((char *)this + 4++*(void *)(result + 24) = xmmword_20CEC0;
  *((void *)this + 55) = 0x3BF800000;
  *((_DWORD *)this + 11std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 1;
  *((_WORD *)this + 226) = 0;
  *((unsigned char *)this + 454) = 0;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent(this, (uint64_t *)off_263E60);
  *(void *)uint64_t v3 = off_263A80;
  *(void *)(v3 + 368) = off_263D40;
  *(void *)(v3 + 1--*(_DWORD *)(a9 + 60) = off_263BE0;
  *(void *)(v3 + 168) = off_263C08;
  double result = 0.0;
  *(_OWORD *)(v3 + 19std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 2++*(void *)(result + 24) = 0u;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 27std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(v3 + 288) = 0u;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_OWORD *)(v3 + 320) = 0u;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 345) = 0u;
  return result;
}

void sub_CCA3C(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

kaldi::nnet1::BidirectionalRecurrentComponent *kaldi::nnet1::BidirectionalRecurrentComponent::BidirectionalRecurrentComponent(kaldi::nnet1::BidirectionalRecurrentComponent *this, const std::string *a2)
{
  *((void *)this + 47) = *(std::string::size_type *)((char *)&a2->__r_.__value_.__l.__size_
                                                     + *(void *)(a2->__r_.__value_.__r.__words[0] - 24));
  *((_WORD *)this + 19std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((void *)this + 50) = 0;
  *((void *)this + 51) = 0;
  *((void *)this + 49) = 0;
  *((void *)this + 46) = off_266498;
  *((void *)this + 5std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = off_26E7B8;
  *(_OWORD *)((char *)this + 4++*(void *)(result + 24) = xmmword_20CEC0;
  *((_DWORD *)this + 110) = -1082130432;
  *(void *)((char *)this + 444) = 0x100000003;
  *((_WORD *)this + 226) = 0;
  *((unsigned char *)this + 454) = 0;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent(this, (uint64_t *)off_263E60);
  *(void *)this = off_263A80;
  *((void *)this + 46) = off_263D40;
  *((void *)this + 20) = off_263BE0;
  *((void *)this + 21) = off_263C08;
  *((_OWORD *)this + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((void *)this + 44) = 0;
  std::string::operator=((std::string *)this + 8, a2 + 8);
  std::string::size_type size = (char *)a2[7].__r_.__value_.__l.__size_;
  if (!size)
  {
    uint64_t v10 = "src.forward_rnn_";
    std::string::size_type v11 = (unsigned char *)(&stru_20 + 2);
    goto LABEL_10;
  }
  if (!a2[7].__r_.__value_.__r.__words[2])
  {
    uint64_t v10 = "src.backward_rnn_";
    std::string::size_type v11 = (char *)&stru_20.cmd + 3;
LABEL_10:
    kaldi::KaldiAssertFailure_((kaldi *)"BidirectionalRecurrentComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-birnn.cc", v11, v10, v4);
  }
  uint64_t v6 = (void *)(*(uint64_t (**)(char *))(*(void *)&size[*(void *)(*(void *)size - 24)] + 16))(&size[*(void *)(*(void *)size - 24)]);
  if (v6) {
  *((void *)this + 2std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v6;
  }
  std::string::size_type v7 = a2[7].__r_.__value_.__r.__words[2] + *(void *)(*(void *)a2[7].__r_.__value_.__r.__words[2] - 24);
  BOOL v8 = (void *)(*(uint64_t (**)(std::string::size_type))(*(void *)v7 + 16))(v7);
  if (v8) {
  *((void *)this + 23) = v8;
  }
  *((unsigned char *)this + 3--*(_DWORD *)(a9 + 60) = 0;
  return this;
}

void sub_CCD7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v12);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized<kaldi::nnet1::Quantizable8BitComponentItf>(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 176);
  if (v2)
  {
    uint64_t v4 = *(const void **)(a1 + 184);
    if (!v4)
    {
      if (v3)
      {
LABEL_11:
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v6, "CopyQuantized", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 63);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v6, "Backward RNN is not quantizable");
LABEL_12:
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v6);
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v4 = *(const void **)(a1 + 184);
    if (!v4) {
      goto LABEL_10;
    }
    uint64_t v3 = 0;
  }
  if (v3)
  {
    if (v5) {
      operator new();
    }
    goto LABEL_11;
  }
LABEL_10:
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v6, "CopyQuantized", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 60);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(&v6, "Forward RNN is not quantizable");
  goto LABEL_12;
}

void sub_CD15C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_CD16C()
{
}

void non-virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized8Bit(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
}

void kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized<kaldi::nnet1::Quantizable16BitComponentItf>(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 176);
  if (v2)
  {
    uint64_t v4 = *(const void **)(a1 + 184);
    if (!v4)
    {
      if (v3)
      {
LABEL_11:
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v6, "CopyQuantized", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 63);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v6, "Backward RNN is not quantizable");
LABEL_12:
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v6);
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v4 = *(const void **)(a1 + 184);
    if (!v4) {
      goto LABEL_10;
    }
    uint64_t v3 = 0;
  }
  if (v3)
  {
    if (v5) {
      operator new();
    }
    goto LABEL_11;
  }
LABEL_10:
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v6, "CopyQuantized", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 60);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(&v6, "Forward RNN is not quantizable");
  goto LABEL_12;
}

void sub_CD4E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_CD4F0()
{
}

void non-virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized16Bit(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
}

void kaldi::nnet1::BidirectionalRecurrentComponent::InitData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v83 = 0;
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  BOOL v8 = a2 + 4;
  uint64_t v9 = (std::string::size_type *)(a1 + 192);
  while (1)
  {
    if ((*((unsigned char *)v8 + *(void *)(*a2 - 24)) & 2) != 0) {
      goto LABEL_32;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)&v83, a4, a5);
    if ((SHIBYTE(v85) & 0x80000000) == 0) {
      break;
    }
    if (v84 != 24
      || (*v83 == 0x657272756365523CLL ? (BOOL v14 = v83[1] == 0x6E6F706D6F43746ELL) : (BOOL v14 = 0),
          v14 ? (BOOL v15 = v83[2] == 0x3E65707954746E65) : (BOOL v15 = 0),
          !v15))
    {
      if (v84 == 12)
      {
        std::string v16 = (void **)v83;
        goto LABEL_27;
      }
LABEL_73:
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v82, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 94);
      uint64_t v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"Unknown token ", 14);
      if (v85 >= 0) {
        uint64_t v50 = &v83;
      }
      else {
        uint64_t v50 = (void **)v83;
      }
      if (v85 >= 0) {
        uint64_t v51 = HIBYTE(v85);
      }
      else {
        uint64_t v51 = v84;
      }
      unint64_t v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)v50, v51);
      uint64_t v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)", a typo in config?", 19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" (RecurrentComponentType)", 25);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v82);
    }
LABEL_22:
    kaldi::ReadToken(a2, 0, (uint64_t)v9, v10, v11);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  if (HIBYTE(v85) == 24)
  {
    if (v83 != (void *)0x657272756365523CLL || v84 != 0x6E6F706D6F43746ELL || v85 != 0x3E65707954746E65) {
      goto LABEL_73;
    }
    goto LABEL_22;
  }
  if (HIBYTE(v85) != 12) {
    goto LABEL_73;
  }
  std::string v16 = &v83;
LABEL_27:
  uint64_t v17 = (uint64_t)*v16;
  int v18 = *((_DWORD *)v16 + 2);
  if (v17 != 0x6E6F706D6F432F3CLL || v18 != 1047817829) {
    goto LABEL_73;
  }
LABEL_32:
  uint64_t v20 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType(v9);
  __s1 = 0;
  size_t __n = 0;
  uint64_t v81 = 0;
  kaldi::ReadToken(a2, 0, (uint64_t)&__s1, v21, v22);
  uint64_t v78 = 0;
  uint64_t v23 = HIBYTE(v81);
  if (v81 >= 0) {
    size_t v24 = HIBYTE(v81);
  }
  else {
    size_t v24 = __n;
  }
  uint64_t v25 = *(unsigned __int8 *)(a1 + 215);
  int v26 = (char)v25;
  if ((v25 & 0x80u) != 0) {
    uint64_t v25 = *(void *)(a1 + 200);
  }
  if (v24 != v25)
  {
LABEL_80:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v82, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 106);
    uint64_t v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"you defined two different recurrent component types ", 52);
    int v55 = *(char *)(a1 + 215);
    if (v55 >= 0) {
      uint64_t v56 = (uint64_t)v9;
    }
    else {
      uint64_t v56 = *(void *)(a1 + 192);
    }
    if (v55 >= 0) {
      uint64_t v57 = *(unsigned __int8 *)(a1 + 215);
    }
    else {
      uint64_t v57 = *(void *)(a1 + 200);
    }
    uint64_t v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, v56, v57);
    float v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" vs ", 4);
    if (v81 >= 0) {
      p_s1 = &__s1;
    }
    else {
      p_s1 = __s1;
    }
    if (v81 >= 0) {
      size_t v61 = HIBYTE(v81);
    }
    else {
      size_t v61 = __n;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)p_s1, v61);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v82);
  }
  if (v26 >= 0) {
    uint64_t v27 = (unsigned __int8 *)v9;
  }
  else {
    uint64_t v27 = (unsigned __int8 *)*v9;
  }
  if (v81 < 0)
  {
    if (memcmp(__s1, v27, __n)) {
      goto LABEL_80;
    }
  }
  else if (HIBYTE(v81))
  {
    uint64_t v28 = &__s1;
    while (*(unsigned __int8 *)v28 == *v27)
    {
      uint64_t v28 = (void **)((char *)v28 + 1);
      ++v27;
      if (!--v23) {
        goto LABEL_48;
      }
    }
    goto LABEL_80;
  }
LABEL_48:
  kaldi::ExpectToken(a2, 0, (kaldi *)"<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v78 + 4, v29, v30);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v78, v31, v32);
  kaldi::nnet1::Component::NewComponentOfType(v20);
  if (!v33)
  {
    *(void *)(a1 + 176) = 0;
LABEL_107:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v82, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 117);
    uint64_t v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"this is not a recurrent component, initialization failed, you used ", 67);
    int v71 = *(char *)(a1 + 215);
    if (v71 >= 0) {
      uint64_t v72 = (uint64_t)v9;
    }
    else {
      uint64_t v72 = *(void *)(a1 + 192);
    }
    if (v71 >= 0) {
      uint64_t v73 = *(unsigned __int8 *)(a1 + 215);
    }
    else {
      uint64_t v73 = *(void *)(a1 + 200);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, v72, v73);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v82);
  }
  *(void *)(a1 + 176) = v34;
  if (!v34) {
    goto LABEL_107;
  }
  (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)&v34[*(void *)(*(void *)v34 - 24)] + 96))(&v34[*(void *)(*(void *)v34 - 24)], a2, a3);
  kaldi::ReadToken(a2, 0, (uint64_t)&__s1, v35, v36);
  uint64_t v37 = HIBYTE(v81);
  if (v81 >= 0) {
    size_t v38 = HIBYTE(v81);
  }
  else {
    size_t v38 = __n;
  }
  uint64_t v39 = *(unsigned __int8 *)(a1 + 215);
  int v40 = (char)v39;
  if ((v39 & 0x80u) != 0) {
    uint64_t v39 = *(void *)(a1 + 200);
  }
  if (v38 != v39) {
    goto LABEL_93;
  }
  if (v40 >= 0) {
    float v41 = (unsigned __int8 *)v9;
  }
  else {
    float v41 = (unsigned __int8 *)*v9;
  }
  if (v81 < 0)
  {
    if (memcmp(__s1, v41, __n)) {
      goto LABEL_93;
    }
  }
  else if (HIBYTE(v81))
  {
    uint64_t v42 = &__s1;
    while (*(unsigned __int8 *)v42 == *v41)
    {
      uint64_t v42 = (void **)((char *)v42 + 1);
      ++v41;
      if (!--v37) {
        goto LABEL_66;
      }
    }
LABEL_93:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v82, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 124);
    int v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"you defined two different recurrent component types ", 52);
    int v63 = *(char *)(a1 + 215);
    if (v63 >= 0) {
      uint64_t v64 = (uint64_t)v9;
    }
    else {
      uint64_t v64 = *(void *)(a1 + 192);
    }
    if (v63 >= 0) {
      uint64_t v65 = *(unsigned __int8 *)(a1 + 215);
    }
    else {
      uint64_t v65 = *(void *)(a1 + 200);
    }
    uint64_t v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, v64, v65);
    uint64_t v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)" vs ", 4);
    if (v81 >= 0) {
      std::string v68 = &__s1;
    }
    else {
      std::string v68 = __s1;
    }
    if (v81 >= 0) {
      size_t v69 = HIBYTE(v81);
    }
    else {
      size_t v69 = __n;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v68, v69);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v82);
  }
LABEL_66:
  kaldi::ExpectToken(a2, 0, (kaldi *)"<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v78 + 4, v43, v44);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v78, v45, v46);
  kaldi::nnet1::Component::NewComponentOfType(v20);
  if (!v47)
  {
    *(void *)(a1 + 184) = 0;
LABEL_115:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v82, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 135);
    uint64_t v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"this is not a recurrent component, initialization failed, you used ", 67);
    int v75 = *(char *)(a1 + 215);
    if (v75 >= 0) {
      uint64_t v76 = (uint64_t)v9;
    }
    else {
      uint64_t v76 = *(void *)(a1 + 192);
    }
    if (v75 >= 0) {
      uint64_t v77 = *(unsigned __int8 *)(a1 + 215);
    }
    else {
      uint64_t v77 = *(void *)(a1 + 200);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, v76, v77);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v82);
  }
  *(void *)(a1 + 184) = v48;
  if (!v48) {
    goto LABEL_115;
  }
  (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)&v48[*(void *)(*(void *)v48 - 24)] + 96))(&v48[*(void *)(*(void *)v48 - 24)], a2, a3);
  (*(void (**)(uint64_t))(*(void *)a1 + 128))(a1);
  if (SHIBYTE(v81) < 0) {
    operator delete(__s1);
  }
  if (SHIBYTE(v85) < 0) {
    operator delete(v83);
  }
}

void sub_CDC68(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 81) < 0) {
    operator delete(*(void **)(v1 - 104));
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::InitData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
}

void kaldi::nnet1::BidirectionalRecurrentComponent::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  for (uint64_t i = (uint64_t)(a1 + 24); ; kaldi::ReadToken(a2, a3, i, v11, v12))
  {
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_32;
    }
    kaldi::ReadToken(a2, a3, (uint64_t)&v29, v9, v10);
    if ((SHIBYTE(v31) & 0x80000000) == 0) {
      break;
    }
    if (v30 != 24
      || (*v29 == 0x657272756365523CLL ? (BOOL v15 = v29[1] == 0x6E6F706D6F43746ELL) : (BOOL v15 = 0),
          v15 ? (BOOL v16 = v29[2] == 0x3E65707954746E65) : (BOOL v16 = 0),
          !v16))
    {
      if (v30 == 12)
      {
        uint64_t v17 = (void **)v29;
        goto LABEL_27;
      }
LABEL_39:
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 150);
      uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Unrecognized token ", 19);
      if (v31 >= 0) {
        int v26 = &v29;
      }
      else {
        int v26 = (void **)v29;
      }
      if (v31 >= 0) {
        uint64_t v27 = HIBYTE(v31);
      }
      else {
        uint64_t v27 = v30;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28);
    }
LABEL_22:
    ;
  }
  if (HIBYTE(v31) == 24)
  {
    if (v29 != (void *)0x657272756365523CLL || v30 != 0x6E6F706D6F43746ELL || v31 != 0x3E65707954746E65) {
      goto LABEL_39;
    }
    goto LABEL_22;
  }
  if (HIBYTE(v31) != 12) {
    goto LABEL_39;
  }
  uint64_t v17 = &v29;
LABEL_27:
  uint64_t v18 = (uint64_t)*v17;
  int v19 = *((_DWORD *)v17 + 2);
  if (v18 != 0x6E6F706D6F432F3CLL || v19 != 1047817829) {
    goto LABEL_39;
  }
LABEL_32:
  uint64_t v21 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (!v21)
  {
    a1[22] = 0;
LABEL_47:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 153);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"forward component is not an RNN", 31);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28);
  }
  a1[22] = v22;
  if (!v22) {
    goto LABEL_47;
  }
  kaldi::ExpectToken(a2, a3, (kaldi *)"</Component>");
  uint64_t v23 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (!v23)
  {
    a1[23] = 0;
LABEL_49:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 156);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"backward component is not an RNN", 32);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28);
  }
  a1[23] = v24;
  if (!v24) {
    goto LABEL_49;
  }
  (*(void (**)(void *))(*a1 + 128))(a1);
  if (SHIBYTE(v31) < 0) {
    operator delete(v29);
  }
}

void sub_CE00C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 81) < 0) {
    operator delete(*(void **)(v1 - 104));
  }
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
}

void *kaldi::nnet1::BidirectionalRecurrentComponent::WriteConfig(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<RecurrentComponentType>", a4, a5);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)(a1 + 192), v8, v9);

  return kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v10, v11);
}

void *virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::WriteConfig(void *a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::WriteConfig((uint64_t)a1 + *(void *)(*a1 - 184), a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::WriteData(void *a1, void *a2, const char *a3, uint64_t a4)
{
  (*(void (**)(void *))(*a1 + 184))(a1);
  kaldi::nnet1::Component::Write(a1[22] + *(void *)(*(void *)a1[22] - 24), a2, (uint64_t)a3, a4);
  kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v8, v9);
  uint64_t v10 = a1[23] + *(void *)(*(void *)a1[23] - 24);

  return kaldi::nnet1::Component::Write(v10, a2, (uint64_t)a3, a4);
}

uint64_t virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::WriteData(void *a1, void *a2, const char *a3, uint64_t a4)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::WriteData((void *)((char *)a1 + *(void *)(*a1 - 120)), a2, a3, a4);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::NumParams(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  uint64_t v2 = *((void *)this + 22) + *(void *)(**((void **)this + 22) - 24);
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 176))(v2);
  uint64_t v4 = *((void *)this + 23) + *(void *)(**((void **)this + 23) - 24);
  return (*(unsigned int (**)(uint64_t))(*(void *)v4 + 176))(v4) + v3;
}

uint64_t virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::NumParams(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::NumParams((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + *(void *)(*(void *)this - 192)));
}

void kaldi::nnet1::BidirectionalRecurrentComponent::GetParams(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 176) + *(void *)(**(void **)(a1 + 176) - 24);
  unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 176))(v4);
  uint64_t v6 = *(void *)(a1 + 184) + *(void *)(**(void **)(a1 + 184) - 24);
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 176))(v6);
  uint64_t v8 = v7 + v5;
  kaldi::Vector<float>::Resize((void **)a2, v8, 1, v9, v10);
  memset(v22, 0, sizeof(v22));
  uint64_t v11 = *(void *)(a1 + 176) + *(void *)(**(void **)(a1 + 176) - 24);
  (*(void (**)(uint64_t, void *))(*(void *)v11 + 184))(v11, v22);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  if (v5 > *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v14);
  }
  int v19 = *(void **)a2;
  LODWORD(v20) = v5;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v19, (uint64_t)v22, v12, v13, v14);
  uint64_t v15 = *(void *)(a1 + 184) + *(void *)(**(void **)(a1 + 184) - 24);
  (*(void (**)(uint64_t, void *))(*(void *)v15 + 184))(v15, v22);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  if (v8 > *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v18);
  }
  int v19 = (void *)(*(void *)a2 + 4 * (int)v5);
  LODWORD(v20) = v7;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v19, (uint64_t)v22, v16, v17, v18);
  kaldi::Vector<float>::Destroy((uint64_t)v22);
}

void sub_CE498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::GetParams(void *a1, uint64_t a2)
{
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::SetParams(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 176) + *(void *)(**(void **)(a1 + 176) - 24);
  unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 176))(v4);
  uint64_t v6 = *(void *)(a1 + 184) + *(void *)(**(void **)(a1 + 184) - 24);
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 176))(v6);
  unsigned int v9 = *(_DWORD *)(a2 + 8);
  if (v9 != v7 + v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-birnn.cc", &stru_B8.sectname[5], "wei_src.Dim() == forward_params + backward_params", v8);
  }
  uint64_t v10 = *(char **)(a1 + 176);
  uint64_t v11 = *(void *)(*(void *)v10 - 24);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  if (v5 > v9) {
    goto LABEL_5;
  }
  int v12 = v7;
  uint64_t v16 = *(void *)a2;
  LODWORD(v17) = v5;
  (*(void (**)(char *, uint64_t *))(*(void *)&v10[v11] + 192))(&v10[v11], &v16);
  uint64_t v13 = *(char **)(a1 + 184);
  uint64_t v14 = *(void *)(*(void *)v13 - 24);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  if (v9 > *(_DWORD *)(a2 + 8)) {
LABEL_5:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v8);
  uint64_t v16 = *(void *)a2 + 4 * (int)v5;
  LODWORD(v17) = v12;
  return (*(uint64_t (**)(char *, uint64_t *))(*(void *)&v13[v14] + 192))(&v13[v14], &v16);
}

uint64_t virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::SetParams(void *a1, uint64_t a2)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::SetParams((uint64_t)a1 + *(void *)(*a1 - 208), a2);
}

float kaldi::nnet1::BidirectionalRecurrentComponent::SumParams(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  uint64_t v2 = *((void *)this + 22) + *(void *)(**((void **)this + 22) - 24);
  float v3 = (*(float (**)(uint64_t))(*(void *)v2 + 208))(v2);
  uint64_t v4 = *((void *)this + 23) + *(void *)(**((void **)this + 23) - 24);
  return v3 + (*(float (**)(uint64_t))(*(void *)v4 + 208))(v4);
}

float virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::SumParams(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::SumParams((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + *(void *)(*(void *)this - 224)));
}

void kaldi::nnet1::BidirectionalRecurrentComponent::GetGradient(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (const void *)(*(uint64_t (**)(void *))(*a1 + 136))(a1);
  if (v8) {
  else
  }
    unsigned int v9 = 0;
  uint64_t v10 = a1[22] + *(void *)(*(void *)a1[22] - 24);
  unsigned int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 176))(v10);
  uint64_t v12 = a1[23] + *(void *)(*(void *)a1[23] - 24);
  int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 176))(v12);
  std::vector<int>::size_type v14 = *(int *)(a2 + 20);
  uint64_t v15 = v13 + v11;
  kaldi::Vector<float>::Resize((void **)a4, v15, 1, v16, v17);
  memset(v38, 0, sizeof(v38));
  ((void (*)(std::vector<int> **))(*v9)[3].__end_cap_.__value_)(v9);
  std::vector<int>::resize(v9[27], v14);
  if ((int)v14 >= 1)
  {
    uint64_t v18 = 0;
    std::vector<int>::pointer begin = v9[27]->__begin_;
    uint64x2_t v20 = (uint64x2_t)vdupq_n_s64((unint64_t)v14 - 1);
    int64x2_t v21 = (int64x2_t)xmmword_204A30;
    int v22 = v14 - 1;
    int64x2_t v23 = vdupq_n_s64(2uLL);
    do
    {
      int32x2_t v24 = vmovn_s64((int64x2_t)vcgeq_u64(v20, (uint64x2_t)v21));
      if (v24.i8[0]) {
        begin[v18] = v22;
      }
      if (v24.i8[4]) {
        begin[v18 + 1] = v14 + (v18 ^ 0xFFFFFFFE);
      }
      v18 += 2;
      int64x2_t v21 = vaddq_s64(v21, v23);
      v22 -= 2;
    }
    while (((v14 + 1) & 0x1FFFFFFFELL) != v18);
  }
  kaldi::CuMatrix<float>::Resize((uint64_t)v9[30], v14, *(unsigned int *)(a2 + 16), 1u, 0);
  kaldi::CuMatrixBase<float>::CopyRows((uint64_t)v9[30], a2, v9[27], v25, v26);
  uint64_t v27 = (char *)v9[22] + *((void *)v9[22]->__begin_ - 3);
  (*(void (**)(char *, uint64_t, uint64_t, void *))(*(void *)v27 + 224))(v27, a2, a3, v38);
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  if (v11 > *(_DWORD *)(a4 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v30);
  }
  uint64_t v35 = *(void **)a4;
  LODWORD(v36) = v11;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v35, (uint64_t)v38, v28, v29, v30);
  uint64_t v31 = (char *)v9[23] + *((void *)v9[23]->__begin_ - 3);
  (*(void (**)(char *, std::vector<int> *, uint64_t, void *))(*(void *)v31 + 224))(v31, v9[30], a3, v38);
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  if (v15 > *(_DWORD *)(a4 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v34);
  }
  uint64_t v35 = (void *)(*(void *)a4 + 4 * (int)v11);
  LODWORD(v36) = v13;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v35, (uint64_t)v38, v32, v33, v34);
  ((void (*)(std::vector<int> **))(*v9)->__end_)(v9);
  kaldi::Vector<float>::Destroy((uint64_t)v38);
}

void sub_CEB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::GetGradient(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::PerturbParams(kaldi::nnet1::BidirectionalRecurrentComponent *this, float a2)
{
  uint64_t v4 = *((void *)this + 22) + *(void *)(**((void **)this + 22) - 24);
  (*(void (**)(uint64_t))(*(void *)v4 + 216))(v4);
  unsigned int v5 = *(uint64_t (**)(__n128))(*(void *)(*((void *)this + 23)
                                                    + *(void *)(**((void **)this + 23) - 24))
                                        + 216);
  v6.n128_f32[0] = a2;

  return v5(v6);
}

uint64_t virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::PerturbParams(kaldi::nnet1::BidirectionalRecurrentComponent *this, float a2)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::PerturbParams((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + *(void *)(*(void *)this - 232)), a2);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::Info(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  (*(void (**)(kaldi::nnet1::BidirectionalRecurrentComponent *, void *, void))(*(void *)this + 184))(this, v18, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n## Forward RNN: input-dim ", 27);
  uint64_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", output-dim ", 13);
  float v3 = (void *)std::ostream::operator<<();
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"\n", 1);
  (*(void (**)(void **__return_ptr))(*(void *)(*((void *)this + 22)
                                                          + *(void *)(**((void **)this + 22) - 24))
                                              + 64))(v16);
  if ((v17 & 0x80u) == 0) {
    unsigned int v5 = v16;
  }
  else {
    unsigned int v5 = (void **)v16[0];
  }
  if ((v17 & 0x80u) == 0) {
    uint64_t v6 = v17;
  }
  else {
    uint64_t v6 = (uint64_t)v16[1];
  }
  int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\n## Backward RNN: input-dim ", 28);
  uint64_t v8 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", output-dim ", 13);
  unsigned int v9 = (void *)std::ostream::operator<<();
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
  (*(void (**)(void **__return_ptr))(*(void *)(*((void *)this + 23)
                                                          + *(void *)(**((void **)this + 23) - 24))
                                              + 64))(__p);
  if ((v15 & 0x80u) == 0) {
    unsigned int v11 = __p;
  }
  else {
    unsigned int v11 = (void **)__p[0];
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v12 = v15;
  }
  else {
    uint64_t v12 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
  if ((char)v15 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v17 < 0) {
    operator delete(v16[0]);
  }
  std::stringbuf::str();
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_CEFA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::Info(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::Info((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + *(void *)(*(void *)this - 80)));
}

void kaldi::nnet1::BidirectionalRecurrentComponent::InfoGradient(kaldi::nnet1::BidirectionalRecurrentComponent *this@<X0>, std::string *a2@<X8>)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)(*((void *)this + 22)
                                                                + *(void *)(**((void **)this + 22) - 24))
                                                    + 72))(&v13);
  (*(void (**)(void **__return_ptr))(*(void *)(*((void *)this + 23)
                                                          + *(void *)(**((void **)this + 23) - 24))
                                              + 72))(__p);
  if ((v12 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v5 = v12;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  uint64_t v6 = std::string::append(&v13, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v15 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::vector<int>::size_type v14 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v13, "\n");
  if (v15 >= 0) {
    uint64_t v8 = v14;
  }
  else {
    uint64_t v8 = (void **)v14[0];
  }
  if (v15 >= 0) {
    std::string::size_type v9 = HIBYTE(v15);
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v14[1];
  }
  uint64_t v10 = std::string::insert(&v13, 0, (const std::string::value_type *)v8, v9);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[0]);
  }
}

void sub_CF190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::InfoGradient(kaldi::nnet1::BidirectionalRecurrentComponent *this@<X0>, std::string *a2@<X8>)
{
}

void kaldi::nnet1::BidirectionalRecurrentComponent::InfoPropagate(kaldi::nnet1::BidirectionalRecurrentComponent *this@<X0>, std::string *a2@<X8>)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)(*((void *)this + 22)
                                                                + *(void *)(**((void **)this + 22) - 24))
                                                    + 80))(&v13);
  (*(void (**)(void **__return_ptr))(*(void *)(*((void *)this + 23)
                                                          + *(void *)(**((void **)this + 23) - 24))
                                              + 80))(__p);
  if ((v12 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v5 = v12;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  uint64_t v6 = std::string::append(&v13, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v15 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::vector<int>::size_type v14 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v13, "\n");
  if (v15 >= 0) {
    uint64_t v8 = v14;
  }
  else {
    uint64_t v8 = (void **)v14[0];
  }
  if (v15 >= 0) {
    std::string::size_type v9 = HIBYTE(v15);
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v14[1];
  }
  uint64_t v10 = std::string::insert(&v13, 0, (const std::string::value_type *)v8, v9);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[0]);
  }
}

void sub_CF38C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::InfoPropagate(kaldi::nnet1::BidirectionalRecurrentComponent *this@<X0>, std::string *a2@<X8>)
{
}

void kaldi::nnet1::BidirectionalRecurrentComponent::InfoBackPropagate(kaldi::nnet1::BidirectionalRecurrentComponent *this@<X0>, std::string *a2@<X8>)
{
  (*(void (**)(std::string *__return_ptr))(*(void *)(*((void *)this + 22)
                                                                + *(void *)(**((void **)this + 22) - 24))
                                                    + 88))(&v13);
  (*(void (**)(void **__return_ptr))(*(void *)(*((void *)this + 23)
                                                          + *(void *)(**((void **)this + 23) - 24))
                                              + 88))(__p);
  if ((v12 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v5 = v12;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  uint64_t v6 = std::string::append(&v13, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v15 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::vector<int>::size_type v14 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v13, "\n");
  if (v15 >= 0) {
    uint64_t v8 = v14;
  }
  else {
    uint64_t v8 = (void **)v14[0];
  }
  if (v15 >= 0) {
    std::string::size_type v9 = HIBYTE(v15);
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v14[1];
  }
  uint64_t v10 = std::string::insert(&v13, 0, (const std::string::value_type *)v8, v9);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[0]);
  }
}

void sub_CF588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::InfoBackPropagate(kaldi::nnet1::BidirectionalRecurrentComponent *this@<X0>, std::string *a2@<X8>)
{
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::GetInternalMemory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v20, a2, 0, *(_DWORD *)(a2 + 20), 0, *(_DWORD *)(*(void *)(a1 + 176) + *(void *)(**(void **)(a1 + 176) - 24) + 12));
  (*(void (**)(void, void (***)(), uint64_t))(**(void **)(a1 + 176) + 112))(*(void *)(a1 + 176), &v20, a3);
  int v6 = *(_DWORD *)(a2 + 20);
  std::vector<int>::resize((std::vector<int> *)(*(void *)(a1 + 216) + 24 * (int)a3), v6);
  if (v6 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(*(void *)(a1 + 216) + 24 * (int)a3);
    uint64x2_t v9 = (uint64x2_t)vdupq_n_s64((unint64_t)v6 - 1);
    int64x2_t v10 = (int64x2_t)xmmword_204A30;
    int v11 = v6 - 1;
    int64x2_t v12 = vdupq_n_s64(2uLL);
    do
    {
      int32x2_t v13 = vmovn_s64((int64x2_t)vcgeq_u64(v9, (uint64x2_t)v10));
      if (v13.i8[0]) {
        *(_DWORD *)(v8 + 4 * v7) = v11;
      }
      if (v13.i8[4]) {
        *(_DWORD *)(v8 + 4 * v7 + 4) = v6 + (v7 ^ 0xFFFFFFFE);
      }
      v7 += 2;
      int64x2_t v10 = vaddq_s64(v10, v12);
      v11 -= 2;
    }
    while (((v6 + 1) & 0x1FFFFFFFELL) != v7);
  }
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 184) + 112))(*(void *)(a1 + 184), *(void *)(a1 + 264) + 48 * (int)a3, a3);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v17, a2, 0, *(_DWORD *)(a2 + 20), (const char *)*(unsigned int *)(*(void *)(a1 + 176) + *(void *)(**(void **)(a1 + 176) - 24) + 12), *(_DWORD *)(*(void *)(a1 + 184) + *(void *)(**(void **)(a1 + 184) - 24) + 12));
  kaldi::CuMatrixBase<float>::CopyRows((uint64_t)&v17, *(void *)(a1 + 264) + 48 * (int)a3, (void *)(*(void *)(a1 + 216) + 24 * (int)a3), v14, v15);
  unsigned __int8 v17 = off_262D80;
  long long v18 = 0u;
  long long v19 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v17);
  uint64x2_t v20 = off_262D80;
  long long v21 = 0u;
  long long v22 = 0u;
  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v20);
}

void sub_CF850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (**a9)(), long long a10, long long a11, void (**a12)(), long long a13, long long a14)
{
  a9 = off_262D80;
  a10 = 0u;
  a11 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a9);
  a12 = off_262D80;
  a13 = 0u;
  a14 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a12);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  std::vector<int>::size_type v9 = *(int *)(a2 + 20);
  if ((int)v9 % *(_DWORD *)(a1 + 96)) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-birnn.cc", &stru_108.sectname[8], "batch_size % num_utts == 0", v8);
  }
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v30, "PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 274, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"Running forward propagation for batch std::string::size_type size = ", 45);
    int64x2_t v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", which contains ", 17);
    int v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" frames each from ", 18);
    int64x2_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v30);
  }
  std::vector<int>::resize((std::vector<int> *)(*(void *)(a1 + 216) + 24 * (int)a4), v9);
  if ((int)v9 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *(void *)(*(void *)(a1 + 216) + 24 * (int)a4);
    uint64x2_t v15 = (uint64x2_t)vdupq_n_s64((unint64_t)v9 - 1);
    int64x2_t v16 = (int64x2_t)xmmword_204A30;
    int v17 = v9 - 1;
    int64x2_t v18 = vdupq_n_s64(2uLL);
    do
    {
      int32x2_t v19 = vmovn_s64((int64x2_t)vcgeq_u64(v15, (uint64x2_t)v16));
      if (v19.i8[0]) {
        *(_DWORD *)(v14 + 4 * v13) = v17;
      }
      if (v19.i8[4]) {
        *(_DWORD *)(v14 + 4 * v13 + 4) = v9 + (v13 ^ 0xFFFFFFFE);
      }
      v13 += 2;
      int64x2_t v16 = vaddq_s64(v16, v18);
      v17 -= 2;
    }
    while (((v9 + 1) & 0x1FFFFFFFELL) != v13);
  }
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 240) + 48 * (int)a4, v9, *(unsigned int *)(a2 + 16), 1u, 0);
  kaldi::CuMatrixBase<float>::CopyRows(*(void *)(a1 + 240) + 48 * (int)a4, a2, (void *)(*(void *)(a1 + 216) + 24 * (int)a4), v20, v21);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 264) + 48 * (int)a4, v9, *(unsigned int *)(*(void *)(a1 + 184) + *(void *)(**(void **)(a1 + 184) - 24) + 12), 1u, 0);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v30, a3, 0, *(_DWORD *)(a3 + 20), 0, *(_DWORD *)(*(void *)(a1 + 176) + *(void *)(**(void **)(a1 + 176) - 24) + 12));
  uint64_t v22 = *(void *)(a1 + 176) + *(void *)(**(void **)(a1 + 176) - 24);
  (*(void (**)(uint64_t, uint64_t, void (***)(), uint64_t))(*(void *)v22 + 112))(v22, a2, &v30, a4);
  uint64_t v23 = *(void *)(a1 + 184) + *(void *)(**(void **)(a1 + 184) - 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v23 + 112))(v23, *(void *)(a1 + 240) + 48 * (int)a4, *(void *)(a1 + 264) + 48 * (int)a4, a4);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v27, a3, 0, *(_DWORD *)(a3 + 20), (const char *)*(unsigned int *)(*(void *)(a1 + 176) + *(void *)(**(void **)(a1 + 176) - 24) + 12), *(_DWORD *)(*(void *)(a1 + 184) + *(void *)(**(void **)(a1 + 184) - 24) + 12));
  kaldi::CuMatrixBase<float>::CopyRows((uint64_t)&v27, *(void *)(a1 + 264) + 48 * (int)a4, (void *)(*(void *)(a1 + 216) + 24 * (int)a4), v24, v25);
  uint64_t v27 = off_262D80;
  long long v28 = 0u;
  long long v29 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v27);
  uint64_t v30 = off_262D80;
  long long v31 = 0u;
  long long v32 = 0u;
  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v30);
}

void sub_CFCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (**a9)(), long long a10, long long a11, void (**a12)(), long long a13, long long a14)
{
  a9 = off_262D80;
  a10 = 0u;
  a11 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a9);
  a12 = off_262D80;
  a13 = 0u;
  a14 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a12);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::PropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::PropagateFnc((uint64_t)a1 + *(void *)(*a1 - 128), a2, a3, a4);
}

void kaldi::nnet1::BidirectionalRecurrentComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  uint64_t v12 = *(int *)(a2 + 20);
  int v13 = *(_DWORD *)(a1 + 96);
  uint64_t v14 = (const char *)*(unsigned int *)(*(void *)(a1 + 176) + *(void *)(**(void **)(a1 + 176) - 24) + 12);
  if ((int)v12 % v13) {
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-birnn.cc", (const char *)&stru_108.addr + 5, "batch_size % num_utts == 0", v11);
  }
  uint64_t v15 = *(unsigned int *)(*(void *)(a1 + 184) + *(void *)(**(void **)(a1 + 184) - 24) + 12);
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v38, "BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 303, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Running backward propagation for batch std::string::size_type size = ", 46);
    int64x2_t v16 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", which contains ", 17);
    int v17 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" frames each from ", 18);
    int64x2_t v18 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v38);
  }
  if ((int)v12 / v13 < 2) {
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-birnn.cc", (const char *)&stru_108.size + 2, "frames_in_batch > 1 && \"Bidirectional recurrent component backprop will not work with batches of single frames.\"", v11);
  }
  if (v12 != (uint64_t)(*(void *)(*(void *)(a1 + 216) + 24 * (int)a6 + 8)
                      - *(void *)(*(void *)(a1 + 216) + 24 * (int)a6)) >> 2)
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-birnn.cc", (const char *)&stru_108.size + 3, "reversed_indices_[batch_index].size() == batch_size", v11);
  uint64_t v33 = a5;
  uint64_t v19 = *(void *)(a1 + 240) + 48 * (int)a6;
  if (*(_DWORD *)(v19 + 20) != v12 || *(_DWORD *)(v19 + 16) != *(_DWORD *)(a2 + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-birnn.cc", (const char *)&stru_108.size + 5, "reversed_input_[batch_index].NumRows() == batch_size && reversed_input_[batch_index].NumCols() == in.NumCols()", v11);
  }
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 288) + 48 * (int)a6, v12, *(unsigned int *)(a1 + *(void *)(*(void *)a1 - 24) + 8), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 312) + 48 * (int)a6, v12, *(unsigned int *)(a1 + *(void *)(*(void *)a1 - 24) + 8), 0, 0);
  uint64_t v20 = *(char **)(a1 + 176);
  uint64_t v21 = *(void *)(*(void *)v20 - 24);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v38, a3, 0, *(_DWORD *)(a3 + 20), 0, (int)v14);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v35, a4, 0, *(_DWORD *)(a4 + 20), 0, (int)v14);
  (*(void (**)(char *, uint64_t, void (***)(), void (***)(), uint64_t, uint64_t))(*(void *)&v20[v21] + 128))(&v20[v21], a2, &v38, &v35, *(void *)(a1 + 288) + 48 * (int)a6, a6);
  uint64_t v35 = off_262D80;
  long long v36 = 0u;
  long long v37 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v35);
  size_t v38 = off_262D80;
  long long v39 = 0u;
  long long v40 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v38);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 336) + 48 * (int)a6, v12, v15, 1u, 0);
  uint64_t v22 = *(void *)(a1 + 336) + 48 * (int)a6;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v38, a4, 0, *(_DWORD *)(a4 + 20), v14, v15);
  kaldi::CuMatrixBase<float>::CopyRows(v22, (uint64_t)&v38, (void *)(*(void *)(a1 + 216) + 24 * (int)a6), v23, v24);
  size_t v38 = off_262D80;
  long long v39 = 0u;
  long long v40 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v38);
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 264) + 48 * (int)a6, v12, v15, 1u, 0);
  uint64_t v25 = *(void *)(a1 + 264) + 48 * (int)a6;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v38, a3, 0, *(_DWORD *)(a3 + 20), v14, v15);
  kaldi::CuMatrixBase<float>::CopyRows(v25, (uint64_t)&v38, (void *)(*(void *)(a1 + 216) + 24 * (int)a6), v26, v27);
  size_t v38 = off_262D80;
  long long v39 = 0u;
  long long v40 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v38);
  uint64_t v28 = *(void *)(a1 + 184) + *(void *)(**(void **)(a1 + 184) - 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v28 + 128))(v28, *(void *)(a1 + 240) + 48 * (int)a6, *(void *)(a1 + 264) + 48 * (int)a6, *(void *)(a1 + 336) + 48 * (int)a6, *(void *)(a1 + 312) + 48 * (int)a6, a6);
  if (v33)
  {
    kaldi::CuMatrixBase<float>::CopyRows(v33, *(void *)(a1 + 312) + 48 * (int)a6, (void *)(*(void *)(a1 + 216) + 24 * (int)a6), v29, v30);
    kaldi::CuMatrixBase<float>::AddMat(v33, *(void *)(a1 + 288) + 48 * (int)a6, 111, v31, v32, 1.0, 1.0);
  }
}

void sub_D02E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void (**a17)(), long long a18, long long a19)
{
  a17 = off_262D80;
  a18 = 0u;
  a19 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a17);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::BackpropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::AccumGradients(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 176) + *(void *)(**(void **)(a1 + 176) - 24);
  (*(void (**)(uint64_t))(*(void *)v2 + 232))(v2);
  float v3 = *(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 184) + *(void *)(**(void **)(a1 + 184) - 24)) + 232);

  return v3();
}

uint64_t virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::AccumGradients(void *a1)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::AccumGradients((uint64_t)a1 + *(void *)(*a1 - 248));
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::UpdateWeights(kaldi::nnet1::BidirectionalRecurrentComponent *this, void *a2)
{
  uint64_t v3 = *((void *)this + 22) + *(void *)(**((void **)this + 22) - 24);
  (*(void (**)(uint64_t))(*(void *)v3 + 256))(v3);
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)(*((void *)this + 23) + *(void *)(**((void **)this + 23) - 24)) + 256);

  return v4();
}

uint64_t virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::UpdateWeights(kaldi::nnet1::BidirectionalRecurrentComponent *this, void *a2)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::UpdateWeights((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + *(void *)(*(void *)this - 272)), a2);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::SetGradientNormalization(uint64_t a1, float a2)
{
  uint64_t v4 = *(void *)(a1 + 176) + *(void *)(**(void **)(a1 + 176) - 24);
  (*(void (**)(uint64_t))(*(void *)v4 + 240))(v4);
  std::string::size_type v5 = *(uint64_t (**)(__n128))(*(void *)(*(void *)(a1 + 184) + *(void *)(**(void **)(a1 + 184) - 24))
                                        + 240);
  v6.n128_f32[0] = a2;

  return v5(v6);
}

uint64_t virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::SetGradientNormalization(void *a1, float a2)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::SetGradientNormalization((uint64_t)a1 + *(void *)(*a1 - 256), a2);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::NormalizeGradients(kaldi::nnet1::BidirectionalRecurrentComponent *this, float a2)
{
  uint64_t v4 = *((void *)this + 22) + *(void *)(**((void **)this + 22) - 24);
  (*(void (**)(uint64_t))(*(void *)v4 + 248))(v4);
  std::string::size_type v5 = *(uint64_t (**)(__n128))(*(void *)(*((void *)this + 23)
                                                    + *(void *)(**((void **)this + 23) - 24))
                                        + 248);
  v6.n128_f32[0] = a2;

  return v5(v6);
}

uint64_t virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::NormalizeGradients(kaldi::nnet1::BidirectionalRecurrentComponent *this, float a2)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::NormalizeGradients((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + *(void *)(*(void *)this - 264)), a2);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::Check(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  uint64_t v2 = *((void *)this + 22) + *(void *)(**((void **)this + 22) - 24);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 24))(v2) == 280
    || (uint64_t v3 = *((void *)this + 23) + *(void *)(**((void **)this + 23) - 24),
        (*(unsigned int (**)(uint64_t))(*(void *)v3 + 24))(v3) == 280))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 368);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, "no recursive recurrent definition");
    goto LABEL_10;
  }
  uint64_t v4 = *((void *)this + 22);
  uint64_t v5 = v4 + *(void *)(*(void *)v4 - 24);
  int v6 = *(_DWORD *)(v5 + 8);
  uint64_t v7 = (char *)this + *(void *)(*(void *)this - 24);
  if (v6 != *((_DWORD *)v7 + 2))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 371);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"the forward RNN's input dimension does not match the component's input dimension ", 81);
    int v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" vs ", 4);
    std::ostream::operator<<();
    goto LABEL_10;
  }
  uint64_t v8 = *((void *)this + 23) + *(void *)(**((void **)this + 23) - 24);
  if (*(_DWORD *)(v8 + 8) != v6)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 375);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"the backward RNN's input dimension does not match the component's input dimension ", 82);
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" vs ", 4);
    std::ostream::operator<<();
    goto LABEL_10;
  }
  if (*(_DWORD *)(v8 + 12) + *(_DWORD *)(v5 + 12) != *((_DWORD *)v7 + 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 379);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"the component has output dimension ", 35);
    int v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" , doesn't equal the sum of individual RNN ", 43);
    uint64_t v14 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" and ", 5);
    std::ostream::operator<<();
LABEL_10:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  (*(void (**)(void))(*(void *)v4 + 128))();
  std::vector<int>::size_type v9 = *(uint64_t (**)(void))(**((void **)this + 23) + 128);

  return v9();
}

void sub_D0B08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::GetHistoryState(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  if (a3 < 0 || *(_DWORD *)(a1 + 80) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-birnn.cc", (const char *)&stru_158.size + 7, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a5);
  }
  uint64_t v7 = *(void *)(*(void *)(a1 + 176) + 8) + 48 * a3;
  uint64_t v8 = *(unsigned int *)(v7 + 20);
  uint64_t v9 = *(void *)(*(void *)(a1 + 184) + 8) + 48 * a3;
  if (*(_DWORD *)(v9 + 20) != v8) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-birnn.cc", (const char *)&stru_158.offset, "backward_rnn_->history_state_[batch_index].NumRows() == history_num_seqs", a5);
  }
  int v11 = (const char *)*(unsigned int *)(v7 + 16);
  int v12 = *(_DWORD *)(v9 + 16);
  kaldi::CuMatrix<float>::Resize(a2, v8, (v12 + v11), 1u, 0);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v18, a2, 0, *(_DWORD *)(a2 + 20), 0, (int)v11);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v18, *(void *)(*(void *)(a1 + 176) + 8) + 48 * a3, 111, v13, v14);
  int64x2_t v18 = off_262D80;
  long long v19 = 0u;
  long long v20 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v18);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v18, a2, 0, *(_DWORD *)(a2 + 20), v11, v12);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v18, *(void *)(*(void *)(a1 + 184) + 8) + 48 * a3, 111, v15, v16);
  int64x2_t v18 = off_262D80;
  long long v19 = 0u;
  long long v20 = 0u;
  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v18);
}

void sub_D0CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (**a10)(), long long a11, long long a12)
{
  a10 = off_262D80;
  a11 = 0u;
  a12 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a10);
  _Unwind_Resume(a1);
}

_DWORD *kaldi::nnet1::BidirectionalRecurrentComponent::GetHistoryState(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, const char *a5)
{
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (int)a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-birnn.cc", (const char *)&stru_158.nreloc + 1, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a5);
  }
  if ((a3 & 0x80000000) != 0
    || (uint64_t v7 = *(void *)(*(void *)(a1 + 176) + 8) + 48 * (int)a4, v8 = *(_DWORD *)(v7 + 20), v8 <= (int)a3))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-birnn.cc", (const char *)&stru_158.nreloc + 2, "sequence_idx >= 0 && sequence_idx < history_num_seqs", a5);
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 184) + 8) + 48 * (int)a4;
  if (*(_DWORD *)(v9 + 20) != v8) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-birnn.cc", (const char *)&stru_158.nreloc + 3, "backward_rnn_->history_state_[batch_index].NumRows() == history_num_seqs", a5);
  }
  int v11 = a4;
  int v12 = *(_DWORD *)(v7 + 16);
  int v13 = *(_DWORD *)(v9 + 16);
  kaldi::CuVector<float>::Resize(a2, (v13 + v12), 1u, a4, a5);
  kaldi::CuSubVector<float>::CuSubVector(v35, a2, 0, v12, v14);
  uint64_t v18 = *(void *)(*(void *)(a1 + 176) + 8) + 48 * v11;
  if (*(_DWORD *)(v18 + 20) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v17);
  }
  uint64_t v19 = *(void *)(v18 + 8) + 4 * (int)(*(_DWORD *)(v18 + 24) * a3);
  unsigned int v20 = *(_DWORD *)(v18 + 16);
  uint64_t v21 = *(void *)(v18 + 32);
  uint64_t v32 = v19;
  uint64_t v31 = &off_262E20;
  uint64_t v33 = v20;
  uint64_t v34 = v21;
  kaldi::CuVectorBase<float>::CopyFromVec(v35, (uint64_t)&v31, v15, v16, v17);
  kaldi::CuSubVector<float>::CuSubVector(v35, a2, v12, v13, v22);
  uint64_t v26 = *(void *)(*(void *)(a1 + 184) + 8) + 48 * v11;
  if (*(_DWORD *)(v26 + 20) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v25);
  }
  uint64_t v27 = *(void *)(v26 + 8) + 4 * (int)(*(_DWORD *)(v26 + 24) * a3);
  unsigned int v28 = *(_DWORD *)(v26 + 16);
  uint64_t v29 = *(void *)(v26 + 32);
  uint64_t v32 = v27;
  uint64_t v31 = &off_262E20;
  uint64_t v33 = v28;
  uint64_t v34 = v29;
  return kaldi::CuVectorBase<float>::CopyFromVec(v35, (uint64_t)&v31, v23, v24, v25);
}

float kaldi::nnet1::BidirectionalRecurrentComponent::SetInternalBoundary(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v8 = *(void *)(a1 + 176);
  uint64_t v10 = *(void *)(v8 + 104);
  uint64_t v11 = *(void *)(v8 + 112);
  uint64_t v9 = (uint64_t *)(v8 + 104);
  if (v10 == v11)
  {
    std::vector<kaldi::CuVector<float>>::resize(v9, *(int *)(a1 + 80));
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(*(void *)(a1 + 176) + 128), *(int *)(a1 + 80));
  }
  uint64_t v12 = *(void *)(a1 + 184);
  uint64_t v14 = *(void *)(v12 + 104);
  uint64_t v15 = *(void *)(v12 + 112);
  int v13 = (uint64_t *)(v12 + 104);
  if (v14 == v15)
  {
    std::vector<kaldi::CuVector<float>>::resize(v13, *(int *)(a1 + 80));
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(*(void *)(a1 + 184) + 128), *(int *)(a1 + 80));
  }
  int v16 = *(_DWORD *)(a2 + 16);
  if (v16)
  {
    if (v16 >= 0) {
      int v17 = *(_DWORD *)(a2 + 16);
    }
    else {
      int v17 = v16 + 1;
    }
    if ((v17 & 0xFFFFFFFE) != v16) {
      kaldi::KaldiAssertFailure_((kaldi *)"SetInternalBoundary", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-birnn.cc", &stru_1A8.sectname[8], "actual_boundary_dim * 2 == boundary.Dim()", a5);
    }
    uint64_t v18 = (v17 >> 1);
    kaldi::CuSubVector<float>::CuSubVector(v37, a2, 0, v17 >> 1, a5);
    kaldi::CuSubVector<float>::CuSubVector(v36, a2, v18, v18, v19);
    double v22 = kaldi::CuVectorBase<float>::Sum((uint64_t)v37);
    uint64_t v23 = *(void *)(*(void *)(a1 + 176) + 104) + 32 * a3;
    if (*(float *)&v22 <= 0.0)
    {
      kaldi::CuVector<float>::Resize(v23, 0, 1u, v20, v21);
    }
    else
    {
      kaldi::CuVector<float>::Resize(v23, v18, 1u, v20, v21);
      kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)(*(void *)(*(void *)(a1 + 176) + 104) + 32 * a3), (uint64_t)v37, v24, v25, v26);
    }
    kaldi::CuVector<float>::Resize(*(void *)(*(void *)(a1 + 184) + 104) + 32 * a3, v18, 1u, v27, v28);
    return kaldi::CuVectorBase<float>::ReverseCopyFromVec(*(void *)(*(void *)(a1 + 184) + 104) + 32 * a3, (uint64_t)v36, v33, v34, v35);
  }
  else
  {
    kaldi::CuVector<float>::Resize(*(void *)(*(void *)(a1 + 176) + 104) + 32 * a3, 0, 1u, a4, a5);
    uint64_t v31 = *(void *)(*(void *)(a1 + 184) + 104) + 32 * a3;
    kaldi::CuVector<float>::Resize(v31, 0, 1u, v29, v30);
  }
  return result;
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::SetTrainOptions(kaldi::nnet1::BidirectionalRecurrentComponent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(this, a2);
  (*(void (**)(void, const kaldi::nnet1::NnetTrainOptions *))(**((void **)this + 22) + 104))(*((void *)this + 22), a2);
  uint64_t v4 = *(uint64_t (**)(void))(**((void **)this + 23) + 104);

  return v4();
}

void kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(kaldi::nnet1::RecurrentBaseComponent *this, const kaldi::nnet1::NnetTrainOptions *lpsrc)
{
  if (v4)
  {
    long long v5 = *(_OWORD *)(v4 + 8);
    *(_OWORD *)((char *)this + 71) = *(_OWORD *)(v4 + 23);
    *(_OWORD *)((char *)this + 56) = v5;
    *((void *)this + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = *((void *)v4 + 6);
    int v6 = (char *)this + *(void *)(*(void *)this - 24);
    long long v7 = *(_OWORD *)((char *)lpsrc + 8);
    *(_OWORD *)(v6 + 71) = *(_OWORD *)((char *)lpsrc + 23);
    *(_OWORD *)(v6 + 56) = v7;
  }
  else if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v8, "SetTrainOptions", "../subproject/libquasar/libkaldi/src/nnet/nnet-component.h", 572);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"need RecurrentNnetTrainOptions in recurrent style component, ignoring SetTrainOptions", 85);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v8);
  }
}

void sub_D12BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::SetTrainOptions(kaldi::nnet1::BidirectionalRecurrentComponent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::SetTrainOptions((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + *(void *)(*(void *)this - 280)), a2);
}

void kaldi::nnet1::BidirectionalRecurrentComponent::SetHistoryState()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 457);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "This function is probably not meaningful for bidirectional RNNs.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

{
  void v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 463);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "This function is probably not meaningful for bidirectional RNNs.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::BidirectionalRecurrentComponent::ResetHistoryState()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-birnn.cc", 469);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "This function is probably not meaningful for bidirectional RNNs.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::HistoryStateSize(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  int v2 = (*(uint64_t (**)(void))(**((void **)this + 22) + 16))(*((void *)this + 22));
  return (*(unsigned int (**)(void))(**((void **)this + 23) + 16))(*((void *)this + 23)) + v2;
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::ResetHistoryState(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  (*(void (**)(void))(**((void **)this + 22) + 32))(*((void *)this + 22));
  int v2 = *(uint64_t (**)(void))(**((void **)this + 23) + 32);

  return v2();
}

uint64_t *kaldi::nnet1::BidirectionalRecurrentComponent::EnsureBuffers(uint64_t *this)
{
  if (!*((unsigned char *)this + 360))
  {
    uint64_t v1 = this;
    (*(void (**)(uint64_t *))(*this + 128))(this);
    unint64_t v2 = *((int *)v1 + 20);
    std::vector<std::vector<int>>::resize(v1 + 27, v2);
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 30, v2);
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 33, v2);
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 36, v2);
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 39, v2);
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 42, v2);
    (*(void (**)(uint64_t))(*(void *)v1[22] + 88))(v1[22]);
    this = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v1[23] + 88))(v1[23]);
    *((unsigned char *)v1 + 3--*(_DWORD *)(a9 + 60) = 1;
  }
  return this;
}

uint64_t kaldi::nnet1::RecurrentBaseComponent::GetHistoryOptions(kaldi::nnet1::RecurrentBaseComponent *this)
{
  return (uint64_t)this + 88;
}

void kaldi::nnet1::RecurrentBaseComponent::SetHistoryOptions(kaldi::nnet1::RecurrentBaseComponent *this, const kaldi::nnet1::HistoryOptions *a2)
{
  uint64_t v4 = (const void *)(*(uint64_t (**)(kaldi::nnet1::RecurrentBaseComponent *))(*(void *)this + 120))(this);
  if (v5)
  {
    long long v6 = *(_OWORD *)(v5 + 8);
    *(_OWORD *)&v9[15] = *(_OWORD *)(v5 + 23);
    *(_OWORD *)uint64_t v9 = v6;
    uint64_t v8 = off_26E7F8;
    uint64_t v10 = off_26E818;
    int v7 = *((_DWORD *)v5 + 13);
    int v11 = *((_DWORD *)a2 + 2);
    int v12 = v7;
    (*(void (**)(kaldi::nnet1::RecurrentBaseComponent *, void (***)(kaldi::nnet1::RecurrentNnetTrainOptions *__hidden)))(*(void *)this + 104))(this, &v8);
    kaldi::nnet1::RecurrentNnetTrainOptions::~RecurrentNnetTrainOptions((kaldi::nnet1::RecurrentNnetTrainOptions *)&v8);
  }
  else if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8, "SetHistoryOptions", "../subproject/libquasar/libkaldi/src/nnet/nnet-component.h", 591);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"Inconsistent return type: RecurrentBaseComponent::GetTrainOptions() can not be cast to RecurrentNnetTrainOptions", 112);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
  }
}

void sub_D1760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::nnet1::UpdatableComponent::GetNormalizedLearningRate(kaldi::nnet1::UpdatableComponent *this)
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "GetNormalizedLearningRate", "../subproject/libquasar/libkaldi/src/nnet/nnet-component.h", 417);
  unint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GetNormalizedLearningRate", 25);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" is not implemented for ", 24);
  uint64_t v4 = (kaldi::nnet1::Component *)(*(uint64_t (**)(kaldi::nnet1::UpdatableComponent *))(*(void *)this + 24))(this);
  kaldi::nnet1::Component::TypeToMarker(v4, &v8);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v5 = &v8;
  }
  else {
    long long v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
  }
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v8.__r_.__value_.__l.__size_;
  }
  int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, size);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, " component.");
  std::string::~string(&v8);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
}

void kaldi::nnet1::UpdatableComponent::PerturbParams(kaldi::nnet1::UpdatableComponent *this, float a2)
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10, "PerturbParams", "../subproject/libquasar/libkaldi/src/nnet/nnet-component.h", 437);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"PerturbParams", 13);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" is not implemented for ", 24);
  long long v5 = (kaldi::nnet1::Component *)(*(uint64_t (**)(kaldi::nnet1::UpdatableComponent *))(*(void *)this + 24))(this);
  kaldi::nnet1::Component::TypeToMarker(v5, &v9);
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v6 = &v9;
  }
  else {
    long long v6 = (std::string *)v9.__r_.__value_.__r.__words[0];
  }
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v9.__r_.__value_.__l.__size_;
  }
  std::string v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, size);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, " component.");
  std::string::~string(&v9);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
}

void kaldi::nnet1::UpdatableComponent::GetGradient(uint64_t a1)
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "GetGradient", "../subproject/libquasar/libkaldi/src/nnet/nnet-component.h", 448);
  unint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GetGradient", 11);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" is not implemented for ", 24);
  uint64_t v4 = (kaldi::nnet1::Component *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  kaldi::nnet1::Component::TypeToMarker(v4, &v8);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v5 = &v8;
  }
  else {
    long long v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
  }
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v8.__r_.__value_.__l.__size_;
  }
  int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, size);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, " component.");
  std::string::~string(&v8);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
}

void virtual thunk to'kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(kaldi::nnet1::RecurrentBaseComponent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
}

uint64_t virtual thunk to'kaldi::nnet1::RecurrentBaseComponent::GetTrainOptions(kaldi::nnet1::RecurrentBaseComponent *this)
{
  return (uint64_t)this + *(void *)(*(void *)this - 288) + 48;
}

void kaldi::nnet1::BidirectionalRecurrentComponent::~BidirectionalRecurrentComponent(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 368));
}

{
  uint64_t v1;
  uint64_t vars8;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 368));

  operator delete();
}

void kaldi::nnet1::BidirectionalRecurrentComponent::Copy(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
}

void sub_D1BA0()
{
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::GetType(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  return 280;
}

void kaldi::nnet1::BidirectionalRecurrentComponent::PropagateFnc()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "PropagateFnc", "../subproject/libquasar/libkaldi/src/nnet/nnet-birnn.h", 78);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Running on single input doesn't make sense for bidirectional RNNs, since history state is not saved.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void non-virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::~BidirectionalRecurrentComponent(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + 208));
}

{
  kaldi::nnet1::BidirectionalRecurrentComponent::~BidirectionalRecurrentComponent((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this - 160));
}

{
  uint64_t vars8;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + 200));
}

{
  kaldi::nnet1::BidirectionalRecurrentComponent::~BidirectionalRecurrentComponent((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this - 168));
}

void virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::~BidirectionalRecurrentComponent(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  unint64_t v2 = (kaldi::nnet1::UpdatableComponent *)(v1 + 368);

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
}

{
  kaldi::nnet1::BidirectionalRecurrentComponent::~BidirectionalRecurrentComponent((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + *(void *)(*(void *)this - 24)));
}

void virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::Copy(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
}

void virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::PropagateFnc()
{
}

void kaldi::nnet1::BidirectionalRecurrentComponent::~BidirectionalRecurrentComponent(kaldi::nnet1::BidirectionalRecurrentComponent *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[3];
  *((void *)this + 20) = off_263BE0;
  *((void *)this + 21) = off_263C08;
  uint64_t v5 = *((void *)this + 22);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 23);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  int v7 = (void **)((char *)this + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  int v7 = (void **)((char *)this + 312);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  int v7 = (void **)((char *)this + 288);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  int v7 = (void **)((char *)this + 264);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  int v7 = (void **)((char *)this + 240);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  int v7 = (void **)((char *)this + 216);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (*((char *)this + 215) < 0) {
    operator delete(*((void **)this + 24));
  }
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator((char *)this + 168);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator((char *)this + 160);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(this, a2 + 1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearTransform(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_264E70;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = off_266498;
  *(void *)(a1 + 48) = off_26E7B8;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = off_2641A8;
  *(void *)(a1 + 88) = off_2642E0;
  *(void *)(a1 + 96) = off_264308;
  *(void *)(a1 + 104) = 0;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 112), (uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 3);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 136), *(void *)(a2 + 136), *(void *)(a2 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 4));
  int v6 = *(_DWORD *)(a2 + 160);
  uint64_t v7 = *(void *)(a2 + 164);
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 1--*(_DWORD *)(a9 + 60) = v6;
  *(void *)(a1 + 164) = v7;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 19std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 176), *(const void **)(a2 + 176), *(void *)(a2 + 184), (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 2);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 200), *(const void **)(a2 + 200), *(void *)(a2 + 208), (uint64_t)(*(void *)(a2 + 208) - *(void *)(a2 + 200)) >> 2);
  char v11 = *(unsigned char *)(a2 + 224);
  *(_OWORD *)(a1 + 23std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(unsigned char *)(a1 + 2++*(void *)(result + 24) = v11;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(void *)(a1 + 296) = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v18, "LinearTransform", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 79);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v18);
  }
  uint64_t v12 = *(void *)(a2 + 104);
  if (v12) {
    kaldi::NewCuSubOrMat<float>(v12, 0);
  }
  uint64_t v14 = *(void *)(a1 + 112);
  uint64_t v13 = *(void *)(a1 + 120);
  if (v13 != v14)
  {
    unint64_t v15 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 112) + 8 * v15))
      {
        uint64_t v16 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a2, v15, v8, v9, v10);
        kaldi::NewCuSubOrMat<float>(v16, *(unsigned __int8 *)(a1 + 16));
      }
      ++v15;
    }
    while (v15 < (v13 - v14) >> 3);
  }
  if (*(void *)(a2 + 240) != *(void *)(a2 + 232)) {
    kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 232));
  }
  return a1;
}

void sub_D22C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v15);
  int v17 = *v14;
  if (*v14)
  {
    *((void *)v10 + 26) = v17;
    operator delete(v17);
  }
  uint64_t v18 = *v13;
  if (*v13)
  {
    *((void *)v10 + 23) = v18;
    operator delete(v18);
  }
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  uint64_t v19 = *((void *)v10 + 13);
  *((void *)v10 + 13) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 24))(v19);
  }
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v12);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v10);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(void *)(a1 + 112);
  if (a2 >= (unint64_t)((*(void *)(a1 + 120) - v5) >> 3)) {
    kaldi::KaldiAssertFailure_((kaldi *)"LinearityCorr", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_158.reserved2 + 1, "linearity_corr_.size() > batch_idx", a5);
  }
  uint64_t result = *(void *)(v5 + 8 * a2);
  if (!result) {
    kaldi::KaldiAssertFailure_((kaldi *)"LinearityCorr", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_158.reserved2 + 2, "linearity_corr_[batch_idx]", a5);
  }
  return result;
}

{
  uint64_t v5;
  uint64_t result;

  uint64_t v5 = *(void *)(a1 + 112);
  if (a2 >= (unint64_t)((*(void *)(a1 + 120) - v5) >> 3)) {
    kaldi::KaldiAssertFailure_((kaldi *)"LinearityCorr", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_158.reserved3 + 2, "linearity_corr_.size() > batch_idx", a5);
  }
  uint64_t result = *(void *)(v5 + 8 * a2);
  if (!result) {
    kaldi::KaldiAssertFailure_((kaldi *)"LinearityCorr", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_158.reserved3 + 3, "linearity_corr_[batch_idx]", a5);
  }
  return result;
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  uint64_t v7 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, ((*(void *)(a1 + 120) - *(void *)(a1 + 112)) >> 3) - 1, v4, v5, v6);

  return kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v7);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::~LinearTransform(uint64_t a1)
{
  *(void *)a1 = off_2641A8;
  uint64_t v2 = a1 + 88;
  *(void *)(a1 + 88) = off_2642E0;
  uint64_t v3 = a1 + 96;
  *(void *)(a1 + 96) = off_264308;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 232));
  uint64_t v4 = *(void **)(a1 + 200);
  if (v4)
  {
    *(void *)(a1 + 208) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 176);
  if (v5)
  {
    *(void *)(a1 + 184) = v5;
    operator delete(v5);
  }
  uint64_t v7 = (void **)(a1 + 136);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v7 = (void **)(a1 + 112);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v6 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v3);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  uint64_t vars8;

  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::~LinearTransform(a1);

  operator delete();
}

void non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::~LinearTransform(uint64_t a1)
{
}

{
  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::~LinearTransform(a1 - 96);
}

{
  uint64_t vars8;

  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::~LinearTransform(a1 - 88);

  operator delete();
}

{
  uint64_t vars8;

  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::~LinearTransform(a1 - 96);

  operator delete();
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit()
{
}

void sub_D2678()
{
}

void non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit()
{
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit()
{
}

void sub_D26EC()
{
}

void non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit()
{
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::Copy()
{
}

void sub_D2760()
{
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int v71 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)((char *)&def_5A5E8 + 2), &v70);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 160), &v69);
  int v68 = -1;
  memset(v67, 0, sizeof(v67));
  uint64_t v57 = v67;
  while (1)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_106;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v67, v6, v7);
    if ((SHIBYTE(v67[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v67[2]))
      {
        case 9:
          goto LABEL_81;
        case 0xC:
          goto LABEL_76;
        case 0xD:
          if (v67[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v67 + 5) != (void *)0x3E7665646474536DLL) {
            goto LABEL_92;
          }
          goto LABEL_51;
        case 0xF:
          BOOL v26 = v67[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v67 + 7) == (void *)0x3E66656F43657461;
          uint64_t v14 = (float *)(a1 + 168);
          if (v26) {
            goto LABEL_86;
          }
          if (HIBYTE(v67[2]) == 9) {
            goto LABEL_81;
          }
          if (HIBYTE(v67[2]) != 12) {
            goto LABEL_92;
          }
LABEL_76:
          if (v67[0] != (void *)0x536D6F646E61523CLL || LODWORD(v67[1]) != 1046766949) {
            goto LABEL_80;
          }
          goto LABEL_88;
        case 0x12:
          goto LABEL_61;
        case 0x13:
          if (v67[0] == (void *)0x61725474696E493CLL
            && v67[1] == (void *)0x79546D726F66736ELL
            && *(void **)((char *)&v67[1] + 3) == (void *)0x3E657079546D726FLL)
          {
            goto LABEL_89;
          }
          if (HIBYTE(v67[2]) == 9) {
            goto LABEL_81;
          }
          if (HIBYTE(v67[2]) != 18) {
            goto LABEL_91;
          }
LABEL_61:
          if (v67[0] == (void *)0x6E6569646172473CLL
            && v67[1] == (void *)0x7079546D726F4E74
            && LOWORD(v67[2]) == 15973)
          {
            goto LABEL_69;
          }
LABEL_80:
          if (HIBYTE(v67[2]) != 9)
          {
LABEL_91:
            if (HIBYTE(v67[2]) == 12) {
              goto LABEL_101;
            }
            goto LABEL_92;
          }
LABEL_81:
          BOOL v28 = v67[0] == (void *)0x6461724778614D3CLL && LOBYTE(v67[1]) == 62;
          uint64_t v14 = (float *)(a1 + 164);
          if (!v28) {
            goto LABEL_92;
          }
          break;
        default:
          goto LABEL_92;
      }
      goto LABEL_86;
    }
    uint64_t v11 = (int *)v67[1];
    if (v67[1] == (char *)&dword_C + 1
      && *(void *)v67[0] == 0x74536D617261503CLL
      && *(void *)((char *)v67[0] + 5) == 0x3E7665646474536DLL)
    {
LABEL_51:
      uint64_t v14 = (float *)&v71;
      goto LABEL_86;
    }
    if (v67[1] == (char *)&dword_C + 3)
    {
      BOOL v13 = *(void *)v67[0] == 0x61526E7261654C3CLL && *(void *)((char *)v67[0] + 7) == 0x3E66656F43657461;
      uint64_t v14 = (float *)(a1 + 168);
      if (v13) {
        goto LABEL_86;
      }
      uint64_t v11 = (int *)v67[1];
    }
    if (v11 == &dword_C)
    {
      if (*(void *)v67[0] == 0x536D6F646E61523CLL && *((_DWORD *)v67[0] + 2) == 1046766949)
      {
LABEL_88:
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v68, v8, v9);
        goto LABEL_87;
      }
      uint64_t v11 = (int *)v67[1];
    }
    if (v11 == (int *)((char *)&dword_10 + 3))
    {
      if (*(void *)v67[0] == 0x61725474696E493CLL
        && *((void *)v67[0] + 1) == 0x79546D726F66736ELL
        && *(void *)((char *)v67[0] + 11) == 0x3E657079546D726FLL)
      {
LABEL_89:
        uint64_t v25 = &v70;
        goto LABEL_90;
      }
      uint64_t v11 = (int *)v67[1];
    }
    if (v11 != (int *)((char *)&dword_10 + 2)) {
      goto LABEL_45;
    }
    BOOL v18 = *(void *)v67[0] == 0x6E6569646172473CLL && *((void *)v67[0] + 1) == 0x7079546D726F4E74;
    if (!v18 || *((_WORD *)v67[0] + 8) != 15973) {
      break;
    }
LABEL_69:
    uint64_t v25 = &v69;
LABEL_90:
    kaldi::ReadToken(a2, 0, (uint64_t)v25, v8, v9);
LABEL_87:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  uint64_t v11 = (int *)v67[1];
LABEL_45:
  if (v11 != (int *)((char *)&dword_8 + 1)) {
    goto LABEL_99;
  }
  BOOL v20 = *(void *)v67[0] == 0x6461724778614D3CLL && *((unsigned char *)v67[0] + 8) == 62;
  uint64_t v14 = (float *)(a1 + 164);
  if (v20)
  {
LABEL_86:
    kaldi::ReadBasicType<float>(a2, 0, v14, v8, v9);
    goto LABEL_87;
  }
  uint64_t v11 = (int *)v67[1];
LABEL_99:
  if (v11 != &dword_C) {
    goto LABEL_92;
  }
  uint64_t v57 = (void **)v67[0];
LABEL_101:
  if (*v57 != (void *)0x6E6F706D6F432F3CLL || *((_DWORD *)v57 + 2) != 1047817829)
  {
LABEL_92:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v66, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 140);
    uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Unknown token ", 14);
    if (SHIBYTE(v67[2]) >= 0) {
      uint64_t v30 = v67;
    }
    else {
      uint64_t v30 = (void **)v67[0];
    }
    if (SHIBYTE(v67[2]) >= 0) {
      uint64_t v31 = HIBYTE(v67[2]);
    }
    else {
      uint64_t v31 = (uint64_t)v67[1];
    }
    uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
    uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" (ParamStddev|LearnRateCoef|InitTransformType|RandomSeed|GradientNormType|MaxGrad)", 82);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v66);
  }
LABEL_106:
  int inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v70);
  *(_DWORD *)(a1 + 1--*(_DWORD *)(a9 + 60) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v69);
  if (v68 >= 1) {
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v68);
  }
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v62, a3);
  kaldi::Matrix<float>::Matrix((uint64_t)&v58, *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 8), 0, 0);
  int v39 = *(_DWORD *)(a1 + 12);
  if (v39 < 1) {
    goto LABEL_134;
  }
  unint64_t v40 = 0;
  LODWORD(v41) = *(_DWORD *)(a1 + 8);
  while (2)
  {
    if ((int)v41 < 1) {
      goto LABEL_133;
    }
    unint64_t v42 = 0;
    while (2)
    {
      switch(inited)
      {
        case 0:
          if (v40 >= v60 || v42 >= v59) {
LABEL_148:
          }
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)&stru_68.addr, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v38);
          uint64_t v45 = v58 + 4 * (int)v40 * v61;
          if (v40 == v42) {
            float v46 = 1.0;
          }
          else {
            float v46 = 0.0;
          }
          goto LABEL_130;
        case 2:
          float v47 = *(float *)&v71;
          kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v62, 0, v36, v37, v38);
          if (v40 >= v60 || v42 >= v59) {
            goto LABEL_148;
          }
          uint64_t v45 = v58 + 4 * (int)v40 * v61;
          float v46 = v47 * v48;
LABEL_130:
          *(float *)(v45 + 4 * v4std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v46;
          break;
        case 1:
          float v43 = *(float *)&v71;
          float v44 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v36, v37, v38);
          if (v40 >= v60 || v42 >= v59) {
            goto LABEL_148;
          }
          uint64_t v45 = v58 + 4 * (int)v40 * v61;
          float v46 = (v44 + -0.5) * (float)(v43 + v43);
          goto LABEL_130;
      }
      ++v42;
      int64_t v41 = *(int *)(a1 + 8);
      if ((uint64_t)v42 < v41) {
        continue;
      }
      break;
    }
    int v39 = *(_DWORD *)(a1 + 12);
LABEL_133:
    if ((uint64_t)++v40 < v39) {
      continue;
    }
    break;
  }
LABEL_134:
  uint64_t v51 = *(void *)(a1 + 104);
  if (!v51) {
    goto LABEL_149;
  }
  int v52 = *(_DWORD *)(v51 + 20);
  if (v52 != kaldi::ContextDependency::CentralPosition((kaldi::ContextDependency *)&v58)) {
    goto LABEL_150;
  }
  uint64_t v53 = *(void *)(a1 + 104);
  if (!v53) {
    goto LABEL_149;
  }
  int v54 = *(_DWORD *)(v53 + 16);
  if (v54 != kaldi::ContextDependency::ContextWidth((kaldi::ContextDependency *)&v58))
  {
LABEL_150:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v66, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 163);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Linearity().NumRows() == mat.NumRows() && Linearity().NumCols() == mat.NumCols()", 80);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v66);
  }
  uint64_t v56 = *(void *)(a1 + 104);
  if (!v56) {
LABEL_149:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved3 + 3, "linearity_", v38);
  kaldi::CuMatrixBase<float>::CopyFromMat(v56, (uint64_t)&v58, 111, v55, v38);
  kaldi::Matrix<float>::~Matrix((uint64_t)&v58);
  if (__p)
  {
    uint64_t v65 = __p;
    operator delete(__p);
  }
  v66[0] = (void **)&v63;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](v66);
  if (SHIBYTE(v67[2]) < 0) {
    operator delete(v67[0]);
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v70.__r_.__value_.__l.__data_);
  }
}

void sub_D2F70()
{
}

void sub_D2F7C(_Unwind_Exception *a1)
{
  kaldi::Matrix<float>::~Matrix(&v3);
  kaldi::GaussRandomNumber::~GaussRandomNumber((kaldi::GaussRandomNumber *)&v4);
  if (*(char *)(v1 - 185) < 0) {
    operator delete(*(void **)(v1 - 208));
  }
  if (*(char *)(v1 - 153) < 0) {
    operator delete(*(void **)(v1 - 176));
  }
  if (*(char *)(v1 - 129) < 0) {
    operator delete(*(void **)(v1 - 152));
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  while (kaldi::Peek(a2, a3) == 60)
  {
    long long v32 = 0uLL;
    uint64_t v33 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v32, v7, v8);
    if (SHIBYTE(v33) < 0)
    {
      uint64_t v14 = *((void *)&v32 + 1);
      if (*((void *)&v32 + 1) != 15
        || (*(void *)v32 == 0x61526E7261654C3CLL ? (BOOL v15 = *(void *)(v32 + 7) == 0x3E66656F43657461) : (BOOL v15 = 0),
            uint64_t v16 = (float *)(a1 + 168),
            !v15))
      {
        if (*((void *)&v32 + 1) == 18)
        {
          if (*(void *)v32 == 0x6E6569646172473CLL
            && *(void *)(v32 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v32 + 16) == 15973)
          {
            goto LABEL_46;
          }
          uint64_t v14 = *((void *)&v32 + 1);
        }
        if (v14 != 9) {
          goto LABEL_53;
        }
        BOOL v13 = (long long *)v32;
        goto LABEL_31;
      }
    }
    else
    {
      if (HIBYTE(v33) == 9)
      {
        BOOL v13 = &v32;
LABEL_31:
        uint64_t v19 = *(void *)v13;
        int v20 = *((unsigned __int8 *)v13 + 8);
        BOOL v21 = v19 == 0x6461724778614D3CLL && v20 == 62;
        uint64_t v16 = (float *)(a1 + 164);
        if (!v21)
        {
LABEL_53:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 181);
          BOOL v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
          if (v33 >= 0) {
            uint64_t v27 = &v32;
          }
          else {
            uint64_t v27 = (long long *)v32;
          }
          if (v33 >= 0) {
            uint64_t v28 = HIBYTE(v33);
          }
          else {
            uint64_t v28 = *((void *)&v32 + 1);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        goto LABEL_41;
      }
      if (HIBYTE(v33) != 15)
      {
        if (HIBYTE(v33) != 18) {
          goto LABEL_53;
        }
        BOOL v11 = (void)v32 == 0x6E6569646172473CLL && *((void *)&v32 + 1) == 0x7079546D726F4E74;
        if (!v11 || (unsigned __int16)v33 != 15973) {
          goto LABEL_53;
        }
LABEL_46:
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v31 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p, v9, v10);
        *(_DWORD *)(a1 + 1--*(_DWORD *)(a9 + 60) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v31) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_42;
      }
      BOOL v22 = (void)v32 == 0x61526E7261654C3CLL && *(void *)((char *)&v32 + 7) == 0x3E66656F43657461;
      uint64_t v16 = (float *)(a1 + 168);
      if (!v22) {
        goto LABEL_53;
      }
    }
LABEL_41:
    kaldi::ReadBasicType<float>(a2, a3, v16, v9, v10);
LABEL_42:
    if (SHIBYTE(v33) < 0) {
      operator delete((void *)v32);
    }
  }
  uint64_t v23 = *(uint64_t (****)(void, uint64_t *, uint64_t, uint64_t))(a1 + 104);
  if (!v23 || (result = (**v23)(v23, a2, a3, a4), *(unsigned char *)(a1 + 16) = 0, (uint64_t v25 = *(void *)(a1 + 104)) == 0)) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved3 + 3, "linearity_", v8);
  }
  if (*(_DWORD *)(v25 + 20) != *(_DWORD *)(a1 + 12)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", &stru_B8.sectname[7], "Linearity().NumRows() == output_dim_", v8);
  }
  if (*(_DWORD *)(v25 + 16) != *(_DWORD *)(a1 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", &stru_B8.sectname[8], "Linearity().NumCols() == input_dim_", v8);
  }
  return result;
}

void sub_D3388()
{
}

void *kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::WriteConfig(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", a4, a5);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v8, v9);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 160), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v10, v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v12, v13);
  return kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
}

void sub_D3468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::WriteData(void *a1, void *a2, int a3, int a4)
{
  (*(void (**)(void *))(*a1 + 168))(a1);
  uint64_t v9 = a1[13];
  if (!v9) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved2 + 3, "linearity_", v8);
  }

  return kaldi::CuMatrixBase<float>::Write(v9, a2, a3, a4);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::NumParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(void *)(a1 + 104);
  if (!v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved2 + 3, "linearity_", a5);
  }
  return (*(_DWORD *)(v5 + 16) * *(_DWORD *)(v5 + 20));
}

void *kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::GetParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(void *)(a1 + 104);
  if (!v5) {
    goto LABEL_5;
  }
  unsigned int v8 = *(_DWORD *)(v5 + 16) * *(_DWORD *)(v5 + 20);
  kaldi::Vector<float>::Resize((void **)a2, v8, 0, a4, a5);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  if (v8 > *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", a5);
  }
  BOOL v13 = *(void **)a2;
  LODWORD(v14) = v8;
  BOOL v11 = *(_DWORD **)(a1 + 104);
  if (!v11) {
LABEL_5:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved2 + 3, "linearity_", a5);
  return kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v13, v11, v9, v10, a5);
}

int *kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::SetParams(void *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(void *))(*a1 + 176))(a1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_B8.addr + 2, "wei_src.Dim() == NumParams()", v5);
  }
  uint64_t v6 = a1[13];
  if (!v6) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved3 + 3, "linearity_", v5);
  }

  return kaldi::CuMatrixBase<float>::CopyRowsFromVec(v6, (char **)a2);
}

float kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::SumParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(void *)(a1 + 104);
  if (!v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved2 + 3, "linearity_", a5);
  }

  return kaldi::CuMatrixBase<float>::Sum(v5, a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::PerturbParams(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v6 = *(void *)(a1 + 104);
  if (!v6) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved3 + 3, "linearity_", a6);
  }
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v13, *(unsigned int *)(v6 + 20), *(unsigned int *)(v6 + 16), 1u, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v13);
  uint64_t v11 = *(void *)(a1 + 104);
  if (!v11) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved3 + 3, "linearity_", v10);
  }
  kaldi::CuMatrixBase<float>::AddMat(v11, (uint64_t)v13, 111, v9, v10, a2, 1.0);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v13);
}

void sub_D37EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::Info(void *a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  (*(void (**)(void *, void *, void))(*a1 + 168))(a1, v10, 0);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n linearity", 11);
  uint64_t v4 = a1[13];
  if (!v4) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved2 + 3, "linearity_", v2);
  }
  kaldi::nnet1::MomentStatistics<float>(v4);
  if ((v9 & 0x80u) == 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    uint64_t v6 = v9;
  }
  else {
    uint64_t v6 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, v6);
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_D39D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v21, "\n  linearity_grad");
  kaldi::nnet1::MomentStatistics<float>((void *)(a1 + 112), v4, v5, v6, v7);
  if ((v20 & 0x80u) == 0) {
    unsigned int v8 = v19;
  }
  else {
    unsigned int v8 = (void **)v19[0];
  }
  if ((v20 & 0x80u) == 0) {
    std::string::size_type v9 = v20;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v19[1];
  }
  uint64_t v10 = std::string::append(&v21, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  uint64_t v12 = std::string::append(&v22, ", lr-coef ");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v18 & 0x80u) == 0) {
    uint64_t v14 = __p;
  }
  else {
    uint64_t v14 = (void **)__p[0];
  }
  if ((v18 & 0x80u) == 0) {
    std::string::size_type v15 = v18;
  }
  else {
    std::string::size_type v15 = (std::string::size_type)__p[1];
  }
  uint64_t v16 = std::string::append(&v23, (const std::string::value_type *)v14, v15);
  *a2 = *v16;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if ((char)v18 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if ((char)v20 < 0) {
    operator delete(v19[0]);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
}

void sub_D3B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(void *)(a1 + 104);
  if (!v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved3 + 3, "linearity_", a5);
  }

  kaldi::CuMatrixBase<float>::AddMatMat(a3, a2, CblasNoTrans, v5, &stru_68.sectname[8], 1.0, 0.0);
}

{
  _DWORD *v6;
  uint64_t vars8;

  uint64_t v6 = *(_DWORD **)(a1 + 104);
  if (!v6) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved3 + 3, "linearity_", a5);
  }

  kaldi::CuVectorBase<float>::AddMatVec(a3, v6, CblasNoTrans, a2, a5, 1.0, 0.0);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(void *)(a1 + 104);
  if (!v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved3 + 3, "linearity_", a5);
  }

  kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)a5, a4, CblasNoTrans, v5, &stru_68.sectname[7], 1.0, 0.0);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::GetUnitOutputFnc(uint64_t a1, _DWORD *a2, unsigned int a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(void *)(a1 + 104);
  if (!v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved2 + 3, "linearity_", a5);
  }
  if (*(_DWORD *)(v5 + 20) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", &stru_1F8.segname[11], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", a5);
  }
  uint64_t v6 = *(void *)(v5 + 8) + 4 * (int)(*(_DWORD *)(v5 + 24) * a3);
  unsigned int v7 = *(_DWORD *)(v5 + 16);
  uint64_t v8 = *(void *)(v5 + 32);
  v9[1] = v6;
  v9[0] = &off_262E20;
  v9[2] = v7;
  uint64_t v9[3] = v8;
  kaldi::CuVectorBase<float>::AddMatVec(a4, a2, CblasNoTrans, (uint64_t)v9, a5, 1.0, 0.0);
}

float kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(void *)(a1 + 104);
  if (!v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved2 + 3, "linearity_", a5);
  }
  if (*(_DWORD *)(v5 + 20) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", &stru_1F8.segname[11], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", a5);
  }
  uint64_t v6 = *(void *)(v5 + 8) + 4 * *(_DWORD *)(v5 + 24) * (int)a3;
  unsigned int v7 = *(_DWORD *)(v5 + 16);
  uint64_t v8 = *(void *)(v5 + 32);
  v10[1] = v6;
  v10[0] = &off_262E20;
  v10[2] = v7;
  uint64_t v10[3] = v8;
  return kaldi::VecVec<float>(a2, (uint64_t)v10, a3, a4, a5);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  float v10 = *(float *)(a1 + 60);
  *(_DWORD *)(*(void *)(a1 + 176) + 4 * a5) = *(_DWORD *)(a2 + 20);
  *(void *)(kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, a5, v11, v12, v13) + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a4;
  uint64_t v17 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, a5, v14, v15, v16);

  kaldi::CuMatrixBase<float>::AddMatMat(v17, a3, CblasTrans, a2, &stru_68.sectname[7], 1.0, v10);
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::EnsureCorrs(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 224))
  {
    int v2 = *(_DWORD *)(a1 + 80);
    if (v2 > 1) {
      int v3 = v2 + 1;
    }
    else {
      int v3 = 1;
    }
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 112), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 136), v3);
    if (v3 >= 1) {
      operator new();
    }
    std::vector<int>::resize((std::vector<int> *)(a1 + 176), v3);
    *(unsigned char *)(a1 + 2++*(void *)(result + 24) = 1;
  }
}

void sub_D40D8()
{
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 164) = a3;
  *(_DWORD *)(result + 1--*(_DWORD *)(a9 + 60) = a2;
  *(unsigned char *)(result + 2++*(void *)(result + 24) = 0;
  return result;
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::NormalizeGradients(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  float v7 = a6;
  int v9 = *(_DWORD *)(a1 + 160);
  if (v9 == 3)
  {
    if (a6 >= 0.0 && a6 <= 1.0)
    {
      uint64_t v12 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, a2, a3, a4, a5);
      uint64_t v13 = *(void *)(a1 + 136) + 48 * a2;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v12, v13, v7);
    }
  }
  else if (v9 == 2)
  {
    if (a6 > 0.0)
    {
      if (*(unsigned char *)(a1 + 84)) {
        float v7 = (float)*(int *)(*(void *)(a1 + 176) + 4 * a2) * a6;
      }
      uint64_t v15 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, a2, a3, a4, a5);
      uint64_t v19 = (unsigned int *)(*(void *)(a1 + 136) + 48 * a2);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v15, v19, v7, v16, v17, v18);
    }
  }
  else if (v9 == 1 && a6 > 0.0)
  {
    if (*(unsigned char *)(a1 + 84)) {
      float v7 = (float)*(int *)(*(void *)(a1 + 176) + 4 * a2) * a6;
    }
    uint64_t v10 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, a2, a3, a4, a5);
    kaldi::nnet1::UpdatableComponent::ClipGradient(v10, v7);
  }
}

float kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 84)) {
    return *(float *)(a1 + 56);
  }
  uint64_t v2 = *(void *)(a1 + 200);
  unint64_t v3 = *(void *)(a1 + 208) - v2;
  if (!v3) {
    return NAN;
  }
  unint64_t v4 = v3 >> 2;
  if ((int)v4 <= a2) {
    return NAN;
  }
  int v5 = v4 - 1;
  if (a2 >= 0) {
    int v5 = a2;
  }
  return *(float *)(v2 + 4 * v5);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)v8 + 232))(v8, a2, a3, 0, 0);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a4, v9, 1, v10, v11);
  uint64_t v15 = (_DWORD *)kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(v8, 0, v12, v13, v14);
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)a4, v15, v16, v17, v18);
  uint64_t v19 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);

  return v19(v8);
}

unsigned int *kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::SetLinearity(uint64_t a1, kaldi::ContextDependency *this)
{
  int v4 = kaldi::ContextDependency::CentralPosition(this);
  uint64_t v6 = *(void *)(a1 + 104);
  if (!v6) {
    goto LABEL_8;
  }
  if (v4 != *(_DWORD *)(v6 + 20)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetLinearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", &stru_158.sectname[10], "linearity.NumRows() == Linearity().NumRows()", v5);
  }
  int v8 = kaldi::ContextDependency::ContextWidth(this);
  uint64_t v9 = *(void *)(a1 + 104);
  if (!v9) {
LABEL_8:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved3 + 3, "linearity_", v5);
  if (v8 != *(_DWORD *)(v9 + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetLinearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", &stru_158.sectname[11], "linearity.NumCols() == Linearity().NumCols()", v5);
  }

  return kaldi::CuMatrixBase<float>::CopyFromMat(v9, (uint64_t)this, 111, v7, v5);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  uint64_t v9 = *(void *)(a1 + 104);
  if (!v9) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved3 + 3, "linearity_", v8);
  }
  *a3 = *(_DWORD *)(v9 + 16) * *(_DWORD *)(v9 + 20);
  uint64_t v10 = *(void *)(a1 + 120) - *(void *)(a1 + 112);
  if (v10)
  {
    uint64_t v11 = v10 >> 3;
    if (*(_DWORD *)(a1 + 80) == 1) {
      int v12 = 0;
    }
    else {
      int v12 = *(_DWORD *)(a1 + 80);
    }
    if (v11 - 1 != v12)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "CountZeroCorr", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 372);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Unexpected mismatch in indexes: ", 32);
      uint64_t v19 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"  ", 2);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
    }
    uint64_t v13 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, v12, v6, v7, v8);
    uint64_t result = kaldi::CuMatrixBase<float>::CountZeros(v13, v14, v15, v16, v17);
  }
  else
  {
    uint64_t result = 0;
  }
  *a2 = result;
  return result;
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::ApplyCorr(uint64_t a1, int a2, float a3)
{
  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  uint64_t v9 = *(void *)(a1 + 104);
  if (!v9) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved3 + 3, "linearity_", v8);
  }
  float v10 = -(float)(a3 * *(float *)(a1 + 168));
  uint64_t v11 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, a2, v6, v7, v8);

  kaldi::CuMatrixBase<float>::AddMat(v9, v11, 111, v12, v13, v10, 1.0);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::LinearTransform(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  *(void *)(a1 + 48) = off_26E7B8;
  *(_OWORD *)(a1 + 56) = xmmword_20CEC0;
  *(_DWORD *)(a1 + 7std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = -1082130432;
  *(void *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 86) = 0;
  *(void *)a1 = off_264330;
  *(void *)(a1 + 88) = off_264468;
  *(void *)(a1 + 96) = off_264490;
  operator new();
}

void sub_D483C()
{
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::LinearTransform(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_264E70;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = off_266498;
  *(void *)(a1 + 48) = off_26E7B8;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = off_264330;
  *(void *)(a1 + 88) = off_264468;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 96) = off_264490;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 112), (uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 3);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 136), *(void *)(a2 + 136), *(void *)(a2 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 4));
  int v6 = *(_DWORD *)(a2 + 160);
  uint64_t v7 = *(void *)(a2 + 164);
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 1--*(_DWORD *)(a9 + 60) = v6;
  *(void *)(a1 + 164) = v7;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 19std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 176), *(const void **)(a2 + 176), *(void *)(a2 + 184), (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 2);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 200), *(const void **)(a2 + 200), *(void *)(a2 + 208), (uint64_t)(*(void *)(a2 + 208) - *(void *)(a2 + 200)) >> 2);
  char v11 = *(unsigned char *)(a2 + 224);
  *(_OWORD *)(a1 + 23std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(unsigned char *)(a1 + 2++*(void *)(result + 24) = v11;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(void *)(a1 + 296) = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "LinearTransform", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 79);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  if (*(void *)(a2 + 104)) {
    kaldi::NewCuSubOrMat<signed char>();
  }
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v12 = *(void *)(a1 + 120);
  if (v12 != v13)
  {
    unint64_t v14 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 112) + 8 * v14))
      {
        uint64_t v15 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a2, v14, v8, v9, v10);
        kaldi::NewCuSubOrMat<float>(v15, *(unsigned __int8 *)(a1 + 16));
      }
      ++v14;
    }
    while (v14 < (v12 - v13) >> 3);
  }
  if (*(void *)(a2 + 240) != *(void *)(a2 + 232)) {
    kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 232));
  }
  return a1;
}

void sub_D4BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v15);
  uint64_t v17 = *v14;
  if (*v14)
  {
    *((void *)v10 + 26) = v17;
    operator delete(v17);
  }
  unsigned __int8 v18 = *v13;
  if (*v13)
  {
    *((void *)v10 + 23) = v18;
    operator delete(v18);
  }
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](v12, 0);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v11);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a9);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v10);
  _Unwind_Resume(a1);
}

void kaldi::NewCuSubOrMat<signed char>()
{
}

void sub_D4CDC()
{
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(a1);
  uint64_t v7 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, ((*(void *)(a1 + 120) - *(void *)(a1 + 112)) >> 3) - 1, v4, v5, v6);

  return kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v7);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::~LinearTransform(uint64_t a1)
{
  *(void *)a1 = off_264330;
  uint64_t v2 = a1 + 88;
  *(void *)(a1 + 88) = off_264468;
  uint64_t v3 = a1 + 96;
  *(void *)(a1 + 96) = off_264490;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 232));
  uint64_t v4 = *(void **)(a1 + 200);
  if (v4)
  {
    *(void *)(a1 + 208) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 176);
  if (v5)
  {
    *(void *)(a1 + 184) = v5;
    operator delete(v5);
  }
  int v6 = (void **)(a1 + 136);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  int v6 = (void **)(a1 + 112);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 104), 0);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v3);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  uint64_t vars8;

  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::~LinearTransform(a1);

  operator delete();
}

void non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::~LinearTransform(uint64_t a1)
{
}

{
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::~LinearTransform(a1 - 96);
}

{
  uint64_t vars8;

  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::~LinearTransform(a1 - 88);

  operator delete();
}

{
  uint64_t vars8;

  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::~LinearTransform(a1 - 96);

  operator delete();
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit()
{
}

void sub_D4F5C()
{
}

void non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit()
{
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit()
{
}

void sub_D4FD0()
{
}

void non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit()
{
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::Copy()
{
}

void sub_D5044()
{
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int v70 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)((char *)&def_5A5E8 + 2), &v69);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 160), &v68);
  int v67 = -1;
  memset(v66, 0, sizeof(v66));
  uint64_t v56 = v66;
  while (1)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_106;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v66, v6, v7);
    if ((SHIBYTE(v66[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v66[2]))
      {
        case 9:
          goto LABEL_81;
        case 0xC:
          goto LABEL_76;
        case 0xD:
          if (v66[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v66 + 5) != (void *)0x3E7665646474536DLL) {
            goto LABEL_92;
          }
          goto LABEL_51;
        case 0xF:
          BOOL v26 = v66[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v66 + 7) == (void *)0x3E66656F43657461;
          unint64_t v14 = (float *)(a1 + 168);
          if (v26) {
            goto LABEL_86;
          }
          if (HIBYTE(v66[2]) == 9) {
            goto LABEL_81;
          }
          if (HIBYTE(v66[2]) != 12) {
            goto LABEL_92;
          }
LABEL_76:
          if (v66[0] != (void *)0x536D6F646E61523CLL || LODWORD(v66[1]) != 1046766949) {
            goto LABEL_80;
          }
          goto LABEL_88;
        case 0x12:
          goto LABEL_61;
        case 0x13:
          if (v66[0] == (void *)0x61725474696E493CLL
            && v66[1] == (void *)0x79546D726F66736ELL
            && *(void **)((char *)&v66[1] + 3) == (void *)0x3E657079546D726FLL)
          {
            goto LABEL_89;
          }
          if (HIBYTE(v66[2]) == 9) {
            goto LABEL_81;
          }
          if (HIBYTE(v66[2]) != 18) {
            goto LABEL_91;
          }
LABEL_61:
          if (v66[0] == (void *)0x6E6569646172473CLL
            && v66[1] == (void *)0x7079546D726F4E74
            && LOWORD(v66[2]) == 15973)
          {
            goto LABEL_69;
          }
LABEL_80:
          if (HIBYTE(v66[2]) != 9)
          {
LABEL_91:
            if (HIBYTE(v66[2]) == 12) {
              goto LABEL_101;
            }
            goto LABEL_92;
          }
LABEL_81:
          BOOL v28 = v66[0] == (void *)0x6461724778614D3CLL && LOBYTE(v66[1]) == 62;
          unint64_t v14 = (float *)(a1 + 164);
          if (!v28) {
            goto LABEL_92;
          }
          break;
        default:
          goto LABEL_92;
      }
      goto LABEL_86;
    }
    uint64_t v11 = (int *)v66[1];
    if (v66[1] == (char *)&dword_C + 1
      && *(void *)v66[0] == 0x74536D617261503CLL
      && *(void *)((char *)v66[0] + 5) == 0x3E7665646474536DLL)
    {
LABEL_51:
      unint64_t v14 = (float *)&v70;
      goto LABEL_86;
    }
    if (v66[1] == (char *)&dword_C + 3)
    {
      BOOL v13 = *(void *)v66[0] == 0x61526E7261654C3CLL && *(void *)((char *)v66[0] + 7) == 0x3E66656F43657461;
      unint64_t v14 = (float *)(a1 + 168);
      if (v13) {
        goto LABEL_86;
      }
      uint64_t v11 = (int *)v66[1];
    }
    if (v11 == &dword_C)
    {
      if (*(void *)v66[0] == 0x536D6F646E61523CLL && *((_DWORD *)v66[0] + 2) == 1046766949)
      {
LABEL_88:
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v67, v8, v9);
        goto LABEL_87;
      }
      uint64_t v11 = (int *)v66[1];
    }
    if (v11 == (int *)((char *)&dword_10 + 3))
    {
      if (*(void *)v66[0] == 0x61725474696E493CLL
        && *((void *)v66[0] + 1) == 0x79546D726F66736ELL
        && *(void *)((char *)v66[0] + 11) == 0x3E657079546D726FLL)
      {
LABEL_89:
        uint64_t v25 = &v69;
        goto LABEL_90;
      }
      uint64_t v11 = (int *)v66[1];
    }
    if (v11 != (int *)((char *)&dword_10 + 2)) {
      goto LABEL_45;
    }
    BOOL v18 = *(void *)v66[0] == 0x6E6569646172473CLL && *((void *)v66[0] + 1) == 0x7079546D726F4E74;
    if (!v18 || *((_WORD *)v66[0] + 8) != 15973) {
      break;
    }
LABEL_69:
    uint64_t v25 = &v68;
LABEL_90:
    kaldi::ReadToken(a2, 0, (uint64_t)v25, v8, v9);
LABEL_87:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  uint64_t v11 = (int *)v66[1];
LABEL_45:
  if (v11 != (int *)((char *)&dword_8 + 1)) {
    goto LABEL_99;
  }
  BOOL v20 = *(void *)v66[0] == 0x6461724778614D3CLL && *((unsigned char *)v66[0] + 8) == 62;
  unint64_t v14 = (float *)(a1 + 164);
  if (v20)
  {
LABEL_86:
    kaldi::ReadBasicType<float>(a2, 0, v14, v8, v9);
    goto LABEL_87;
  }
  uint64_t v11 = (int *)v66[1];
LABEL_99:
  if (v11 != &dword_C) {
    goto LABEL_92;
  }
  uint64_t v56 = (void **)v66[0];
LABEL_101:
  if (*v56 != (void *)0x6E6F706D6F432F3CLL || *((_DWORD *)v56 + 2) != 1047817829)
  {
LABEL_92:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v65, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 140);
    uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Unknown token ", 14);
    if (SHIBYTE(v66[2]) >= 0) {
      uint64_t v30 = v66;
    }
    else {
      uint64_t v30 = (void **)v66[0];
    }
    if (SHIBYTE(v66[2]) >= 0) {
      uint64_t v31 = HIBYTE(v66[2]);
    }
    else {
      uint64_t v31 = (uint64_t)v66[1];
    }
    long long v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
    uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" (ParamStddev|LearnRateCoef|InitTransformType|RandomSeed|GradientNormType|MaxGrad)", 82);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v65);
  }
LABEL_106:
  int inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v69);
  *(_DWORD *)(a1 + 1--*(_DWORD *)(a9 + 60) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v68);
  if (v67 >= 1) {
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v67);
  }
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v61, a3);
  kaldi::Matrix<float>::Matrix((uint64_t)&v57, *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 8), 0, 0);
  int v39 = *(_DWORD *)(a1 + 12);
  if (v39 < 1) {
    goto LABEL_134;
  }
  unint64_t v40 = 0;
  LODWORD(v41) = *(_DWORD *)(a1 + 8);
  while (2)
  {
    if ((int)v41 < 1) {
      goto LABEL_133;
    }
    unint64_t v42 = 0;
    while (2)
    {
      switch(inited)
      {
        case 0:
          if (v40 >= v59 || v42 >= v58) {
LABEL_148:
          }
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)&stru_68.addr, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v38);
          uint64_t v45 = v57 + 4 * (int)v40 * v60;
          if (v40 == v42) {
            float v46 = 1.0;
          }
          else {
            float v46 = 0.0;
          }
          goto LABEL_130;
        case 2:
          float v47 = *(float *)&v70;
          kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v61, 0, v36, v37, v38);
          if (v40 >= v59 || v42 >= v58) {
            goto LABEL_148;
          }
          uint64_t v45 = v57 + 4 * (int)v40 * v60;
          float v46 = v47 * v48;
LABEL_130:
          *(float *)(v45 + 4 * v4std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v46;
          break;
        case 1:
          float v43 = *(float *)&v70;
          float v44 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v36, v37, v38);
          if (v40 >= v59 || v42 >= v58) {
            goto LABEL_148;
          }
          uint64_t v45 = v57 + 4 * (int)v40 * v60;
          float v46 = (v44 + -0.5) * (float)(v43 + v43);
          goto LABEL_130;
      }
      ++v42;
      int64_t v41 = *(int *)(a1 + 8);
      if ((uint64_t)v42 < v41) {
        continue;
      }
      break;
    }
    int v39 = *(_DWORD *)(a1 + 12);
LABEL_133:
    if ((uint64_t)++v40 < v39) {
      continue;
    }
    break;
  }
LABEL_134:
  uint64_t v51 = *(unsigned int **)(a1 + 104);
  if (!v51) {
    goto LABEL_149;
  }
  int v52 = kaldi::QuantizedMatrixBase<short>::NumRows(v51);
  if (v52 != kaldi::ContextDependency::CentralPosition((kaldi::ContextDependency *)&v57)) {
    goto LABEL_150;
  }
  uint64_t v53 = *(void *)(a1 + 104);
  if (!v53) {
    goto LABEL_149;
  }
  int v54 = kaldi::QuantizedMatrixBase<short>::NumCols(v53);
  if (v54 != kaldi::ContextDependency::ContextWidth((kaldi::ContextDependency *)&v57))
  {
LABEL_150:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v65, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 163);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Linearity().NumRows() == mat.NumRows() && Linearity().NumCols() == mat.NumCols()", 80);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v65);
  }
  uint64_t v55 = *(void *)(a1 + 104);
  if (!v55) {
LABEL_149:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved3 + 3, "linearity_", v38);
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(v55, (kaldi::ContextDependency *)&v57);
  kaldi::Matrix<float>::~Matrix((uint64_t)&v57);
  if (__p)
  {
    uint64_t v64 = __p;
    operator delete(__p);
  }
  v65[0] = (void **)&v62;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](v65);
  if (SHIBYTE(v66[2]) < 0) {
    operator delete(v66[0]);
  }
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
}

void sub_D5858()
{
}

void sub_D5868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::GaussRandomNumber::~GaussRandomNumber((kaldi::GaussRandomNumber *)va1);
  if (*(char *)(v3 - 185) < 0) {
    operator delete(*(void **)(v3 - 208));
  }
  if (*(char *)(v3 - 153) < 0) {
    operator delete(*(void **)(v3 - 176));
  }
  if (*(char *)(v3 - 129) < 0) {
    operator delete(*(void **)(v3 - 152));
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::ReadData(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  while (kaldi::Peek(a2, a3) == 60)
  {
    long long v34 = 0uLL;
    uint64_t v35 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v34, v7, v8);
    if (SHIBYTE(v35) < 0)
    {
      uint64_t v14 = *((void *)&v34 + 1);
      if (*((void *)&v34 + 1) != 15
        || (*(void *)v34 == 0x61526E7261654C3CLL ? (BOOL v15 = *(void *)(v34 + 7) == 0x3E66656F43657461) : (BOOL v15 = 0),
            uint64_t v16 = (float *)(a1 + 168),
            !v15))
      {
        if (*((void *)&v34 + 1) == 18)
        {
          if (*(void *)v34 == 0x6E6569646172473CLL
            && *(void *)(v34 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v34 + 16) == 15973)
          {
            goto LABEL_46;
          }
          uint64_t v14 = *((void *)&v34 + 1);
        }
        if (v14 != 9) {
          goto LABEL_54;
        }
        BOOL v13 = (long long *)v34;
        goto LABEL_31;
      }
    }
    else
    {
      if (HIBYTE(v35) == 9)
      {
        BOOL v13 = &v34;
LABEL_31:
        uint64_t v19 = *(void *)v13;
        int v20 = *((unsigned __int8 *)v13 + 8);
        BOOL v21 = v19 == 0x6461724778614D3CLL && v20 == 62;
        uint64_t v16 = (float *)(a1 + 164);
        if (!v21)
        {
LABEL_54:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 181);
          BOOL v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
          if (v35 >= 0) {
            uint64_t v29 = &v34;
          }
          else {
            uint64_t v29 = (long long *)v34;
          }
          if (v35 >= 0) {
            uint64_t v30 = HIBYTE(v35);
          }
          else {
            uint64_t v30 = *((void *)&v34 + 1);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        goto LABEL_41;
      }
      if (HIBYTE(v35) != 15)
      {
        if (HIBYTE(v35) != 18) {
          goto LABEL_54;
        }
        BOOL v11 = (void)v34 == 0x6E6569646172473CLL && *((void *)&v34 + 1) == 0x7079546D726F4E74;
        if (!v11 || (unsigned __int16)v35 != 15973) {
          goto LABEL_54;
        }
LABEL_46:
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v33 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p, v9, v10);
        *(_DWORD *)(a1 + 1--*(_DWORD *)(a9 + 60) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v33) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_42;
      }
      BOOL v22 = (void)v34 == 0x61526E7261654C3CLL && *(void *)((char *)&v34 + 7) == 0x3E66656F43657461;
      uint64_t v16 = (float *)(a1 + 168);
      if (!v22) {
        goto LABEL_54;
      }
    }
LABEL_41:
    kaldi::ReadBasicType<float>(a2, a3, v16, v9, v10);
LABEL_42:
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
  }
  std::string v23 = *(int **)(a1 + 104);
  if (!v23) {
    goto LABEL_61;
  }
  kaldi::QuantizedMatrix<signed char>::Read(v23, a2, a3, a4, v8);
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v24 = *(unsigned int **)(a1 + 104);
  if (!v24) {
    goto LABEL_61;
  }
  if (kaldi::QuantizedMatrixBase<short>::NumRows(v24) != *(_DWORD *)(a1 + 12)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", &stru_B8.sectname[7], "Linearity().NumRows() == output_dim_", v8);
  }
  uint64_t v25 = *(void *)(a1 + 104);
  if (!v25) {
LABEL_61:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved3 + 3, "linearity_", v8);
  uint64_t result = kaldi::QuantizedMatrixBase<short>::NumCols(v25);
  if (result != *(_DWORD *)(a1 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", &stru_B8.sectname[8], "Linearity().NumCols() == input_dim_", v27);
  }
  return result;
}

void sub_D5C58()
{
}

void *kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::WriteConfig(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", a4, a5);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v8, v9);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 160), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v10, v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v12, v13);
  return kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
}

void sub_D5D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::WriteData(void *a1, void *a2, int a3, int a4)
{
  (*(void (**)(void *))(*a1 + 168))(a1);
  uint64_t v9 = (int *)a1[13];
  if (!v9) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved2 + 3, "linearity_", v8);
  }

  return kaldi::QuantizedMatrix<signed char>::Write(v9, a2, a3, a4);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::NumParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = *(unsigned int **)(a1 + 104);
  if (!v6 || (int v7 = kaldi::QuantizedMatrixBase<short>::NumRows(v6), (v8 = *(void *)(a1 + 104)) == 0)) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved2 + 3, "linearity_", a5);
  }
  return kaldi::QuantizedMatrixBase<short>::NumCols(v8) * v7;
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::GetParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = *(unsigned int **)(a1 + 104);
  if (!v6) {
    goto LABEL_6;
  }
  int v8 = kaldi::QuantizedMatrixBase<short>::NumRows(v6);
  uint64_t v9 = *(void *)(a1 + 104);
  if (!v9) {
    goto LABEL_6;
  }
  uint64_t v10 = kaldi::QuantizedMatrixBase<short>::NumCols(v9) * v8;
  kaldi::Vector<float>::Resize((void **)a2, v10, 0, v11, v12);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  if (v10 > *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", a5);
  }
  uint64_t v14 = *(void **)a2;
  LODWORD(v15) = v10;
  BOOL v13 = *(unsigned int **)(a1 + 104);
  if (!v13) {
LABEL_6:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved2 + 3, "linearity_", a5);
  kaldi::VectorBase<float>::CopyRowsFromMat<signed char>((uint64_t *)&v14, v13);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::SetParams(void *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(void *))(*a1 + 176))(a1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_B8.addr + 2, "wei_src.Dim() == NumParams()", v5);
  }
  uint64_t v6 = (unsigned int *)a1[13];
  if (!v6) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved3 + 3, "linearity_", v5);
  }

  return kaldi::QuantizedMatrixBase<signed char>::CopyRowsFromVec(v6, (char **)a2);
}

float kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::SumParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(int **)(a1 + 104);
  if (!v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved2 + 3, "linearity_", a5);
  }

  return kaldi::QuantizedMatrixBase<signed char>::Sum(v5, a2, a3, a4, a5);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::PerturbParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = *(unsigned int **)(a1 + 104);
  if (v6)
  {
    uint64_t v7 = kaldi::QuantizedMatrixBase<short>::NumRows(v6);
    uint64_t v8 = *(void *)(a1 + 104);
    if (v8)
    {
      uint64_t v9 = kaldi::QuantizedMatrixBase<short>::NumCols(v8);
      kaldi::CuMatrix<float>::CuMatrix((uint64_t)v11, v7, v9, 1u, 0, 0);
      kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v11);
      if (*(void *)(a1 + 104)) {
        kaldi::QuantizedMatrixBase<signed char>::AddMat();
      }
      kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved3 + 3, "linearity_", v10);
    }
  }
  kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved3 + 3, "linearity_", a5);
}

void sub_D6100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::Info(void *a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  (*(void (**)(void *, void *, void))(*a1 + 168))(a1, v10, 0);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n linearity", 11);
  int v4 = (unsigned int *)a1[13];
  if (!v4) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved2 + 3, "linearity_", v2);
  }
  kaldi::nnet1::MomentStatistics<signed char>(v4);
  if ((v9 & 0x80u) == 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    uint64_t v6 = v9;
  }
  else {
    uint64_t v6 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, v6);
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_D62EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MomentStatistics<signed char>(unsigned int *a1)
{
  int v2 = kaldi::QuantizedMatrixBase<short>::NumRows(a1);
  int v3 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a1);
  memset(v10, 0, sizeof(v10));
  kaldi::Vector<float>::Resize(v10, (v3 * v2), 0, v4, v5);
  kaldi::VectorBase<float>::CopyRowsFromMat<signed char>((uint64_t *)v10, a1);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v10, v6, v7, v8, v9);
  kaldi::Vector<float>::Destroy((uint64_t)v10);
}

void sub_D639C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v21, "\n  linearity_grad");
  kaldi::nnet1::MomentStatistics<float>((void *)(a1 + 112), v4, v5, v6, v7);
  if ((v20 & 0x80u) == 0) {
    uint64_t v8 = v19;
  }
  else {
    uint64_t v8 = (void **)v19[0];
  }
  if ((v20 & 0x80u) == 0) {
    std::string::size_type v9 = v20;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v19[1];
  }
  uint64_t v10 = std::string::append(&v21, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  uint64_t v12 = std::string::append(&v22, ", lr-coef ");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v18 & 0x80u) == 0) {
    uint64_t v14 = __p;
  }
  else {
    uint64_t v14 = (void **)__p[0];
  }
  if ((v18 & 0x80u) == 0) {
    std::string::size_type v15 = v18;
  }
  else {
    std::string::size_type v15 = (std::string::size_type)__p[1];
  }
  uint64_t v16 = std::string::append(&v23, (const std::string::value_type *)v14, v15);
  *a2 = *v16;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if ((char)v18 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if ((char)v20 < 0) {
    operator delete(v19[0]);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
}

void sub_D6500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

kaldi::ContextDependency *kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(unsigned int **)(a1 + 104);
  if (!v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved3 + 3, "linearity_", a5);
  }

  return kaldi::CuMatrixBase<float>::AddMatMat<signed char>(a3, a2, 111, v5, &stru_68.sectname[8], 1.0, 0.0);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(void *)(a1 + 104))
  {
    kaldi::CuVectorBase<float>::AddMatVec<signed char>();
  }
  kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved3 + 3, "linearity_", a5);
}

kaldi::ContextDependency *kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(unsigned int **)(a1 + 104);
  if (!v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved3 + 3, "linearity_", a5);
  }

  return kaldi::CuMatrixBase<float>::AddMatMat<signed char>((uint64_t)a5, a4, 111, v5, &stru_68.sectname[7], 1.0, 0.0);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::GetUnitOutputFnc(uint64_t a1, _DWORD *a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(void *)(a1 + 104);
  if (!v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved2 + 3, "linearity_", a5);
  }
  kaldi::QuantizedMatrixBase<signed char>::Row(v5, a3, (uint64_t)v9);
  kaldi::CuVectorBase<float>::AddMatVec<signed char>(a4, a2, 111, (uint64_t)v9, v8, 1.0, 0.0);
}

float kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(void *)(a1 + 104);
  if (!v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved2 + 3, "linearity_", a5);
  }
  kaldi::QuantizedMatrixBase<signed char>::Row(v5, a3, (uint64_t)v11);
  return kaldi::VecVec<float,signed char>(a2, (uint64_t)v11, v7, v8, v9);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(a1);
  float v10 = *(float *)(a1 + 60);
  *(_DWORD *)(*(void *)(a1 + 176) + 4 * a5) = *(_DWORD *)(a2 + 20);
  *(void *)(kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, a5, v11, v12, v13) + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a4;
  uint64_t v17 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, a5, v14, v15, v16);

  kaldi::CuMatrixBase<float>::AddMatMat(v17, a3, CblasTrans, a2, &stru_68.sectname[7], 1.0, v10);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 224))
  {
    int v2 = *(_DWORD *)(a1 + 80);
    if (v2 > 1) {
      int v3 = v2 + 1;
    }
    else {
      int v3 = 1;
    }
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 112), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 136), v3);
    if (v3 >= 1) {
      operator new();
    }
    std::vector<int>::resize((std::vector<int> *)(a1 + 176), v3);
    *(unsigned char *)(a1 + 2++*(void *)(result + 24) = 1;
  }
}

void sub_D6A0C()
{
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 164) = a3;
  *(_DWORD *)(result + 1--*(_DWORD *)(a9 + 60) = a2;
  *(unsigned char *)(result + 2++*(void *)(result + 24) = 0;
  return result;
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::NormalizeGradients(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  float v7 = a6;
  int v9 = *(_DWORD *)(a1 + 160);
  if (v9 == 3)
  {
    if (a6 >= 0.0 && a6 <= 1.0)
    {
      uint64_t v12 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, a2, a3, a4, a5);
      uint64_t v13 = *(void *)(a1 + 136) + 48 * a2;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v12, v13, v7);
    }
  }
  else if (v9 == 2)
  {
    if (a6 > 0.0)
    {
      if (*(unsigned char *)(a1 + 84)) {
        float v7 = (float)*(int *)(*(void *)(a1 + 176) + 4 * a2) * a6;
      }
      uint64_t v15 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, a2, a3, a4, a5);
      uint64_t v19 = (unsigned int *)(*(void *)(a1 + 136) + 48 * a2);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v15, v19, v7, v16, v17, v18);
    }
  }
  else if (v9 == 1 && a6 > 0.0)
  {
    if (*(unsigned char *)(a1 + 84)) {
      float v7 = (float)*(int *)(*(void *)(a1 + 176) + 4 * a2) * a6;
    }
    uint64_t v10 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, a2, a3, a4, a5);
    kaldi::nnet1::UpdatableComponent::ClipGradient(v10, v7);
  }
}

float kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 84)) {
    return *(float *)(a1 + 56);
  }
  uint64_t v2 = *(void *)(a1 + 200);
  unint64_t v3 = *(void *)(a1 + 208) - v2;
  if (!v3) {
    return NAN;
  }
  unint64_t v4 = v3 >> 2;
  if ((int)v4 <= a2) {
    return NAN;
  }
  int v5 = v4 - 1;
  if (a2 >= 0) {
    int v5 = a2;
  }
  return *(float *)(v2 + 4 * v5);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::UpdateWeights()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "UpdateWeights", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 314);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)v8 + 232))(v8, a2, a3, 0, 0);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a4, v9, 1, v10, v11);
  uint64_t v15 = (_DWORD *)kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(v8, 0, v12, v13, v14);
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)a4, v15, v16, v17, v18);
  uint64_t v19 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);

  return v19(v8);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::VectorizeWeightsCorrs()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "VectorizeWeightsCorrs", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 334);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(a1);
  float v7 = *(unsigned int **)(a1 + 104);
  if (!v7 || (int v8 = kaldi::QuantizedMatrixBase<short>::NumRows(v7), (v9 = *(void *)(a1 + 104)) == 0)) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved3 + 3, "linearity_", v6);
  }
  *a3 = kaldi::QuantizedMatrixBase<short>::NumCols(v9) * v8;
  uint64_t v13 = *(void *)(a1 + 120) - *(void *)(a1 + 112);
  if (v13)
  {
    uint64_t v14 = v13 >> 3;
    if (*(_DWORD *)(a1 + 80) == 1) {
      int v15 = 0;
    }
    else {
      int v15 = *(_DWORD *)(a1 + 80);
    }
    if (v14 - 1 != v15)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "CountZeroCorr", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 372);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Unexpected mismatch in indexes: ", 32);
      std::string v22 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"  ", 2);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
    }
    uint64_t v16 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, v15, v10, v11, v12);
    uint64_t result = kaldi::CuMatrixBase<float>::CountZeros(v16, v17, v18, v19, v20);
  }
  else
  {
    uint64_t result = 0;
  }
  *a2 = result;
  return result;
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::LinearTransform(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  *(void *)(a1 + 48) = off_26E7B8;
  *(_OWORD *)(a1 + 56) = xmmword_20CEC0;
  *(_DWORD *)(a1 + 7std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = -1082130432;
  *(void *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 86) = 0;
  *(void *)a1 = off_2644B8;
  *(void *)(a1 + 88) = off_2645F0;
  *(void *)(a1 + 96) = off_264618;
  operator new();
}

void sub_D7054()
{
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::LinearTransform(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_264E70;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = off_266498;
  *(void *)(a1 + 48) = off_26E7B8;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = off_2644B8;
  *(void *)(a1 + 88) = off_2645F0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 96) = off_264618;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 112), (uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 3);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 136), *(void *)(a2 + 136), *(void *)(a2 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 4));
  int v6 = *(_DWORD *)(a2 + 160);
  uint64_t v7 = *(void *)(a2 + 164);
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 1--*(_DWORD *)(a9 + 60) = v6;
  *(void *)(a1 + 164) = v7;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 19std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 176), *(const void **)(a2 + 176), *(void *)(a2 + 184), (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 2);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 200), *(const void **)(a2 + 200), *(void *)(a2 + 208), (uint64_t)(*(void *)(a2 + 208) - *(void *)(a2 + 200)) >> 2);
  char v11 = *(unsigned char *)(a2 + 224);
  *(_OWORD *)(a1 + 23std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(unsigned char *)(a1 + 2++*(void *)(result + 24) = v11;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(void *)(a1 + 296) = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "LinearTransform", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 79);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  if (*(void *)(a2 + 104)) {
    kaldi::NewCuSubOrMat<short>();
  }
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v12 = *(void *)(a1 + 120);
  if (v12 != v13)
  {
    unint64_t v14 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 112) + 8 * v14))
      {
        uint64_t v15 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a2, v14, v8, v9, v10);
        kaldi::NewCuSubOrMat<float>(v15, *(unsigned __int8 *)(a1 + 16));
      }
      ++v14;
    }
    while (v14 < (v12 - v13) >> 3);
  }
  if (*(void *)(a2 + 240) != *(void *)(a2 + 232)) {
    kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 232));
  }
  return a1;
}

void sub_D7404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v15);
  uint64_t v17 = *v14;
  if (*v14)
  {
    *((void *)v10 + 26) = v17;
    operator delete(v17);
  }
  uint64_t v18 = *v13;
  if (*v13)
  {
    *((void *)v10 + 23) = v18;
    operator delete(v18);
  }
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](v12, 0);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v11);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a9);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v10);
  _Unwind_Resume(a1);
}

void kaldi::NewCuSubOrMat<short>()
{
}

void sub_D74F4()
{
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::EnsureCorrs(a1);
  uint64_t v7 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, ((*(void *)(a1 + 120) - *(void *)(a1 + 112)) >> 3) - 1, v4, v5, v6);

  return kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v7);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::~LinearTransform(uint64_t a1)
{
  *(void *)a1 = off_2644B8;
  uint64_t v2 = a1 + 88;
  *(void *)(a1 + 88) = off_2645F0;
  uint64_t v3 = a1 + 96;
  *(void *)(a1 + 96) = off_264618;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 232));
  uint64_t v4 = *(void **)(a1 + 200);
  if (v4)
  {
    *(void *)(a1 + 208) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 176);
  if (v5)
  {
    *(void *)(a1 + 184) = v5;
    operator delete(v5);
  }
  int v6 = (void **)(a1 + 136);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  int v6 = (void **)(a1 + 112);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 104), 0);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v3);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  uint64_t vars8;

  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::~LinearTransform(a1);

  operator delete();
}

void non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::~LinearTransform(uint64_t a1)
{
}

{
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::~LinearTransform(a1 - 96);
}

{
  uint64_t vars8;

  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::~LinearTransform(a1 - 88);

  operator delete();
}

{
  uint64_t vars8;

  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::~LinearTransform(a1 - 96);

  operator delete();
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit()
{
}

void sub_D7774()
{
}

void non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit()
{
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit()
{
}

void sub_D77E8()
{
}

void non-virtual thunk to'kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit()
{
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::Copy()
{
}

void sub_D785C()
{
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int v70 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)((char *)&def_5A5E8 + 2), &v69);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 160), &v68);
  int v67 = -1;
  memset(v66, 0, sizeof(v66));
  uint64_t v56 = v66;
  while (1)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_106;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v66, v6, v7);
    if ((SHIBYTE(v66[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v66[2]))
      {
        case 9:
          goto LABEL_81;
        case 0xC:
          goto LABEL_76;
        case 0xD:
          if (v66[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v66 + 5) != (void *)0x3E7665646474536DLL) {
            goto LABEL_92;
          }
          goto LABEL_51;
        case 0xF:
          BOOL v26 = v66[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v66 + 7) == (void *)0x3E66656F43657461;
          unint64_t v14 = (float *)(a1 + 168);
          if (v26) {
            goto LABEL_86;
          }
          if (HIBYTE(v66[2]) == 9) {
            goto LABEL_81;
          }
          if (HIBYTE(v66[2]) != 12) {
            goto LABEL_92;
          }
LABEL_76:
          if (v66[0] != (void *)0x536D6F646E61523CLL || LODWORD(v66[1]) != 1046766949) {
            goto LABEL_80;
          }
          goto LABEL_88;
        case 0x12:
          goto LABEL_61;
        case 0x13:
          if (v66[0] == (void *)0x61725474696E493CLL
            && v66[1] == (void *)0x79546D726F66736ELL
            && *(void **)((char *)&v66[1] + 3) == (void *)0x3E657079546D726FLL)
          {
            goto LABEL_89;
          }
          if (HIBYTE(v66[2]) == 9) {
            goto LABEL_81;
          }
          if (HIBYTE(v66[2]) != 18) {
            goto LABEL_91;
          }
LABEL_61:
          if (v66[0] == (void *)0x6E6569646172473CLL
            && v66[1] == (void *)0x7079546D726F4E74
            && LOWORD(v66[2]) == 15973)
          {
            goto LABEL_69;
          }
LABEL_80:
          if (HIBYTE(v66[2]) != 9)
          {
LABEL_91:
            if (HIBYTE(v66[2]) == 12) {
              goto LABEL_101;
            }
            goto LABEL_92;
          }
LABEL_81:
          BOOL v28 = v66[0] == (void *)0x6461724778614D3CLL && LOBYTE(v66[1]) == 62;
          unint64_t v14 = (float *)(a1 + 164);
          if (!v28) {
            goto LABEL_92;
          }
          break;
        default:
          goto LABEL_92;
      }
      goto LABEL_86;
    }
    uint64_t v11 = (int *)v66[1];
    if (v66[1] == (char *)&dword_C + 1
      && *(void *)v66[0] == 0x74536D617261503CLL
      && *(void *)((char *)v66[0] + 5) == 0x3E7665646474536DLL)
    {
LABEL_51:
      unint64_t v14 = (float *)&v70;
      goto LABEL_86;
    }
    if (v66[1] == (char *)&dword_C + 3)
    {
      BOOL v13 = *(void *)v66[0] == 0x61526E7261654C3CLL && *(void *)((char *)v66[0] + 7) == 0x3E66656F43657461;
      unint64_t v14 = (float *)(a1 + 168);
      if (v13) {
        goto LABEL_86;
      }
      uint64_t v11 = (int *)v66[1];
    }
    if (v11 == &dword_C)
    {
      if (*(void *)v66[0] == 0x536D6F646E61523CLL && *((_DWORD *)v66[0] + 2) == 1046766949)
      {
LABEL_88:
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v67, v8, v9);
        goto LABEL_87;
      }
      uint64_t v11 = (int *)v66[1];
    }
    if (v11 == (int *)((char *)&dword_10 + 3))
    {
      if (*(void *)v66[0] == 0x61725474696E493CLL
        && *((void *)v66[0] + 1) == 0x79546D726F66736ELL
        && *(void *)((char *)v66[0] + 11) == 0x3E657079546D726FLL)
      {
LABEL_89:
        uint64_t v25 = &v69;
        goto LABEL_90;
      }
      uint64_t v11 = (int *)v66[1];
    }
    if (v11 != (int *)((char *)&dword_10 + 2)) {
      goto LABEL_45;
    }
    BOOL v18 = *(void *)v66[0] == 0x6E6569646172473CLL && *((void *)v66[0] + 1) == 0x7079546D726F4E74;
    if (!v18 || *((_WORD *)v66[0] + 8) != 15973) {
      break;
    }
LABEL_69:
    uint64_t v25 = &v68;
LABEL_90:
    kaldi::ReadToken(a2, 0, (uint64_t)v25, v8, v9);
LABEL_87:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  uint64_t v11 = (int *)v66[1];
LABEL_45:
  if (v11 != (int *)((char *)&dword_8 + 1)) {
    goto LABEL_99;
  }
  BOOL v20 = *(void *)v66[0] == 0x6461724778614D3CLL && *((unsigned char *)v66[0] + 8) == 62;
  unint64_t v14 = (float *)(a1 + 164);
  if (v20)
  {
LABEL_86:
    kaldi::ReadBasicType<float>(a2, 0, v14, v8, v9);
    goto LABEL_87;
  }
  uint64_t v11 = (int *)v66[1];
LABEL_99:
  if (v11 != &dword_C) {
    goto LABEL_92;
  }
  uint64_t v56 = (void **)v66[0];
LABEL_101:
  if (*v56 != (void *)0x6E6F706D6F432F3CLL || *((_DWORD *)v56 + 2) != 1047817829)
  {
LABEL_92:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v65, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 140);
    uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Unknown token ", 14);
    if (SHIBYTE(v66[2]) >= 0) {
      uint64_t v30 = v66;
    }
    else {
      uint64_t v30 = (void **)v66[0];
    }
    if (SHIBYTE(v66[2]) >= 0) {
      uint64_t v31 = HIBYTE(v66[2]);
    }
    else {
      uint64_t v31 = (uint64_t)v66[1];
    }
    long long v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
    uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" (ParamStddev|LearnRateCoef|InitTransformType|RandomSeed|GradientNormType|MaxGrad)", 82);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v65);
  }
LABEL_106:
  int inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v69);
  *(_DWORD *)(a1 + 1--*(_DWORD *)(a9 + 60) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v68);
  if (v67 >= 1) {
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v67);
  }
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v61, a3);
  kaldi::Matrix<float>::Matrix((uint64_t)&v57, *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 8), 0, 0);
  int v39 = *(_DWORD *)(a1 + 12);
  if (v39 < 1) {
    goto LABEL_134;
  }
  unint64_t v40 = 0;
  LODWORD(v41) = *(_DWORD *)(a1 + 8);
  while (2)
  {
    if ((int)v41 < 1) {
      goto LABEL_133;
    }
    unint64_t v42 = 0;
    while (2)
    {
      switch(inited)
      {
        case 0:
          if (v40 >= v59 || v42 >= v58) {
LABEL_148:
          }
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)&stru_68.addr, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v38);
          uint64_t v45 = v57 + 4 * (int)v40 * v60;
          if (v40 == v42) {
            float v46 = 1.0;
          }
          else {
            float v46 = 0.0;
          }
          goto LABEL_130;
        case 2:
          float v47 = *(float *)&v70;
          kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v61, 0, v36, v37, v38);
          if (v40 >= v59 || v42 >= v58) {
            goto LABEL_148;
          }
          uint64_t v45 = v57 + 4 * (int)v40 * v60;
          float v46 = v47 * v48;
LABEL_130:
          *(float *)(v45 + 4 * v4std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v46;
          break;
        case 1:
          float v43 = *(float *)&v70;
          float v44 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v36, v37, v38);
          if (v40 >= v59 || v42 >= v58) {
            goto LABEL_148;
          }
          uint64_t v45 = v57 + 4 * (int)v40 * v60;
          float v46 = (v44 + -0.5) * (float)(v43 + v43);
          goto LABEL_130;
      }
      ++v42;
      int64_t v41 = *(int *)(a1 + 8);
      if ((uint64_t)v42 < v41) {
        continue;
      }
      break;
    }
    int v39 = *(_DWORD *)(a1 + 12);
LABEL_133:
    if ((uint64_t)++v40 < v39) {
      continue;
    }
    break;
  }
LABEL_134:
  uint64_t v51 = *(unsigned int **)(a1 + 104);
  if (!v51) {
    goto LABEL_149;
  }
  int v52 = kaldi::QuantizedMatrixBase<short>::NumRows(v51);
  if (v52 != kaldi::ContextDependency::CentralPosition((kaldi::ContextDependency *)&v57)) {
    goto LABEL_150;
  }
  uint64_t v53 = *(void *)(a1 + 104);
  if (!v53) {
    goto LABEL_149;
  }
  int v54 = kaldi::QuantizedMatrixBase<short>::NumCols(v53);
  if (v54 != kaldi::ContextDependency::ContextWidth((kaldi::ContextDependency *)&v57))
  {
LABEL_150:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v65, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 163);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"Linearity().NumRows() == mat.NumRows() && Linearity().NumCols() == mat.NumCols()", 80);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v65);
  }
  uint64_t v55 = *(void *)(a1 + 104);
  if (!v55) {
LABEL_149:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved3 + 3, "linearity_", v38);
  kaldi::QuantizedMatrixBase<short>::CopyFromMat(v55, (kaldi::ContextDependency *)&v57);
  kaldi::Matrix<float>::~Matrix((uint64_t)&v57);
  if (__p)
  {
    uint64_t v64 = __p;
    operator delete(__p);
  }
  v65[0] = (void **)&v62;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](v65);
  if (SHIBYTE(v66[2]) < 0) {
    operator delete(v66[0]);
  }
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
}

void sub_D8070()
{
}

void sub_D8080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::GaussRandomNumber::~GaussRandomNumber((kaldi::GaussRandomNumber *)va1);
  if (*(char *)(v3 - 185) < 0) {
    operator delete(*(void **)(v3 - 208));
  }
  if (*(char *)(v3 - 153) < 0) {
    operator delete(*(void **)(v3 - 176));
  }
  if (*(char *)(v3 - 129) < 0) {
    operator delete(*(void **)(v3 - 152));
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::ReadData(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  while (kaldi::Peek(a2, a3) == 60)
  {
    long long v34 = 0uLL;
    uint64_t v35 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v34, v7, v8);
    if (SHIBYTE(v35) < 0)
    {
      uint64_t v14 = *((void *)&v34 + 1);
      if (*((void *)&v34 + 1) != 15
        || (*(void *)v34 == 0x61526E7261654C3CLL ? (BOOL v15 = *(void *)(v34 + 7) == 0x3E66656F43657461) : (BOOL v15 = 0),
            uint64_t v16 = (float *)(a1 + 168),
            !v15))
      {
        if (*((void *)&v34 + 1) == 18)
        {
          if (*(void *)v34 == 0x6E6569646172473CLL
            && *(void *)(v34 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v34 + 16) == 15973)
          {
            goto LABEL_46;
          }
          uint64_t v14 = *((void *)&v34 + 1);
        }
        if (v14 != 9) {
          goto LABEL_54;
        }
        BOOL v13 = (long long *)v34;
        goto LABEL_31;
      }
    }
    else
    {
      if (HIBYTE(v35) == 9)
      {
        BOOL v13 = &v34;
LABEL_31:
        uint64_t v19 = *(void *)v13;
        int v20 = *((unsigned __int8 *)v13 + 8);
        BOOL v21 = v19 == 0x6461724778614D3CLL && v20 == 62;
        uint64_t v16 = (float *)(a1 + 164);
        if (!v21)
        {
LABEL_54:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 181);
          BOOL v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
          if (v35 >= 0) {
            uint64_t v29 = &v34;
          }
          else {
            uint64_t v29 = (long long *)v34;
          }
          if (v35 >= 0) {
            uint64_t v30 = HIBYTE(v35);
          }
          else {
            uint64_t v30 = *((void *)&v34 + 1);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        goto LABEL_41;
      }
      if (HIBYTE(v35) != 15)
      {
        if (HIBYTE(v35) != 18) {
          goto LABEL_54;
        }
        BOOL v11 = (void)v34 == 0x6E6569646172473CLL && *((void *)&v34 + 1) == 0x7079546D726F4E74;
        if (!v11 || (unsigned __int16)v35 != 15973) {
          goto LABEL_54;
        }
LABEL_46:
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v33 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p, v9, v10);
        *(_DWORD *)(a1 + 1--*(_DWORD *)(a9 + 60) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v33) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_42;
      }
      BOOL v22 = (void)v34 == 0x61526E7261654C3CLL && *(void *)((char *)&v34 + 7) == 0x3E66656F43657461;
      uint64_t v16 = (float *)(a1 + 168);
      if (!v22) {
        goto LABEL_54;
      }
    }
LABEL_41:
    kaldi::ReadBasicType<float>(a2, a3, v16, v9, v10);
LABEL_42:
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
  }
  std::string v23 = *(int **)(a1 + 104);
  if (!v23) {
    goto LABEL_61;
  }
  kaldi::QuantizedMatrix<short>::Read(v23, a2, a3, a4, v8);
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v24 = *(unsigned int **)(a1 + 104);
  if (!v24) {
    goto LABEL_61;
  }
  if (kaldi::QuantizedMatrixBase<short>::NumRows(v24) != *(_DWORD *)(a1 + 12)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", &stru_B8.sectname[7], "Linearity().NumRows() == output_dim_", v8);
  }
  uint64_t v25 = *(void *)(a1 + 104);
  if (!v25) {
LABEL_61:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved3 + 3, "linearity_", v8);
  uint64_t result = kaldi::QuantizedMatrixBase<short>::NumCols(v25);
  if (result != *(_DWORD *)(a1 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", &stru_B8.sectname[8], "Linearity().NumCols() == input_dim_", v27);
  }
  return result;
}

void sub_D8470()
{
}

void *kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::WriteConfig(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", a4, a5);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v8, v9);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 160), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v10, v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v12, v13);
  return kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
}

void sub_D8550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::WriteData(void *a1, void *a2, int a3, int a4)
{
  (*(void (**)(void *))(*a1 + 168))(a1);
  uint64_t v9 = (int *)a1[13];
  if (!v9) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved2 + 3, "linearity_", v8);
  }

  return kaldi::QuantizedMatrix<short>::Write(v9, a2, a3, a4);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::NumParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = *(unsigned int **)(a1 + 104);
  if (!v6 || (int v7 = kaldi::QuantizedMatrixBase<short>::NumRows(v6), (v8 = *(void *)(a1 + 104)) == 0)) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved2 + 3, "linearity_", a5);
  }
  return kaldi::QuantizedMatrixBase<short>::NumCols(v8) * v7;
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::GetParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = *(unsigned int **)(a1 + 104);
  if (!v6) {
    goto LABEL_6;
  }
  int v8 = kaldi::QuantizedMatrixBase<short>::NumRows(v6);
  uint64_t v9 = *(void *)(a1 + 104);
  if (!v9) {
    goto LABEL_6;
  }
  uint64_t v10 = kaldi::QuantizedMatrixBase<short>::NumCols(v9) * v8;
  kaldi::Vector<float>::Resize((void **)a2, v10, 0, v11, v12);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  if (v10 > *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", a5);
  }
  uint64_t v14 = *(void **)a2;
  LODWORD(v15) = v10;
  BOOL v13 = *(unsigned int **)(a1 + 104);
  if (!v13) {
LABEL_6:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved2 + 3, "linearity_", a5);
  kaldi::VectorBase<float>::CopyRowsFromMat<short>((uint64_t *)&v14, v13);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::SetParams(void *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(void *))(*a1 + 176))(a1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_B8.addr + 2, "wei_src.Dim() == NumParams()", v5);
  }
  uint64_t v6 = (unsigned int *)a1[13];
  if (!v6) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved3 + 3, "linearity_", v5);
  }

  return kaldi::QuantizedMatrixBase<short>::CopyRowsFromVec(v6, (char **)a2);
}

float kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::SumParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(int **)(a1 + 104);
  if (!v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved2 + 3, "linearity_", a5);
  }

  return kaldi::QuantizedMatrixBase<short>::Sum(v5, a2, a3, a4, a5);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::PerturbParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = *(unsigned int **)(a1 + 104);
  if (v6)
  {
    uint64_t v7 = kaldi::QuantizedMatrixBase<short>::NumRows(v6);
    uint64_t v8 = *(void *)(a1 + 104);
    if (v8)
    {
      uint64_t v9 = kaldi::QuantizedMatrixBase<short>::NumCols(v8);
      kaldi::CuMatrix<float>::CuMatrix((uint64_t)v11, v7, v9, 1u, 0, 0);
      kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v11);
      if (*(void *)(a1 + 104)) {
        kaldi::QuantizedMatrixBase<short>::AddMat();
      }
      kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved3 + 3, "linearity_", v10);
    }
  }
  kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved3 + 3, "linearity_", a5);
}

void sub_D8918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::Info(void *a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  (*(void (**)(void *, void *, void))(*a1 + 168))(a1, v10, 0);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n linearity", 11);
  int v4 = (unsigned int *)a1[13];
  if (!v4) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved2 + 3, "linearity_", v2);
  }
  kaldi::nnet1::MomentStatistics<short>(v4);
  if ((v9 & 0x80u) == 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    uint64_t v6 = v9;
  }
  else {
    uint64_t v6 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, v6);
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_D8B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MomentStatistics<short>(unsigned int *a1)
{
  int v2 = kaldi::QuantizedMatrixBase<short>::NumRows(a1);
  int v3 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a1);
  memset(v10, 0, sizeof(v10));
  kaldi::Vector<float>::Resize(v10, (v3 * v2), 0, v4, v5);
  kaldi::VectorBase<float>::CopyRowsFromMat<short>((uint64_t *)v10, a1);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v10, v6, v7, v8, v9);
  kaldi::Vector<float>::Destroy((uint64_t)v10);
}

void sub_D8BB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v21, "\n  linearity_grad");
  kaldi::nnet1::MomentStatistics<float>((void *)(a1 + 112), v4, v5, v6, v7);
  if ((v20 & 0x80u) == 0) {
    uint64_t v8 = v19;
  }
  else {
    uint64_t v8 = (void **)v19[0];
  }
  if ((v20 & 0x80u) == 0) {
    std::string::size_type v9 = v20;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v19[1];
  }
  uint64_t v10 = std::string::append(&v21, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  uint64_t v12 = std::string::append(&v22, ", lr-coef ");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v18 & 0x80u) == 0) {
    uint64_t v14 = __p;
  }
  else {
    uint64_t v14 = (void **)__p[0];
  }
  if ((v18 & 0x80u) == 0) {
    std::string::size_type v15 = v18;
  }
  else {
    std::string::size_type v15 = (std::string::size_type)__p[1];
  }
  uint64_t v16 = std::string::append(&v23, (const std::string::value_type *)v14, v15);
  *a2 = *v16;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if ((char)v18 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if ((char)v20 < 0) {
    operator delete(v19[0]);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
}

void sub_D8D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

kaldi::ContextDependency *kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(unsigned int **)(a1 + 104);
  if (!v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved3 + 3, "linearity_", a5);
  }

  return kaldi::CuMatrixBase<float>::AddMatMat<short>(a3, a2, 111, v5, &stru_68.sectname[8], 1.0, 0.0);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(void *)(a1 + 104))
  {
    kaldi::CuVectorBase<float>::AddMatVec<short>();
  }
  kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved3 + 3, "linearity_", a5);
}

kaldi::ContextDependency *kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(unsigned int **)(a1 + 104);
  if (!v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved3 + 3, "linearity_", a5);
  }

  return kaldi::CuMatrixBase<float>::AddMatMat<short>((uint64_t)a5, a4, 111, v5, &stru_68.sectname[7], 1.0, 0.0);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::GetUnitOutputFnc(uint64_t a1, _DWORD *a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(void *)(a1 + 104);
  if (!v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved2 + 3, "linearity_", a5);
  }
  kaldi::QuantizedMatrixBase<short>::Row(v5, a3, (uint64_t)v9);
  kaldi::CuVectorBase<float>::AddMatVec<short>(a4, a2, 111, (uint64_t)v9, v8, 1.0, 0.0);
}

float kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(void *)(a1 + 104);
  if (!v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved2 + 3, "linearity_", a5);
  }
  kaldi::QuantizedMatrixBase<short>::Row(v5, a3, (uint64_t)v11);
  return kaldi::VecVec<float,short>(a2, (uint64_t)v11, v7, v8, v9);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::EnsureCorrs(a1);
  float v10 = *(float *)(a1 + 60);
  *(_DWORD *)(*(void *)(a1 + 176) + 4 * a5) = *(_DWORD *)(a2 + 20);
  *(void *)(kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, a5, v11, v12, v13) + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a4;
  uint64_t v17 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, a5, v14, v15, v16);

  kaldi::CuMatrixBase<float>::AddMatMat(v17, a3, CblasTrans, a2, &stru_68.sectname[7], 1.0, v10);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::EnsureCorrs(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 224))
  {
    int v2 = *(_DWORD *)(a1 + 80);
    if (v2 > 1) {
      int v3 = v2 + 1;
    }
    else {
      int v3 = 1;
    }
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 112), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 136), v3);
    if (v3 >= 1) {
      operator new();
    }
    std::vector<int>::resize((std::vector<int> *)(a1 + 176), v3);
    *(unsigned char *)(a1 + 2++*(void *)(result + 24) = 1;
  }
}

void sub_D9224()
{
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 164) = a3;
  *(_DWORD *)(result + 1--*(_DWORD *)(a9 + 60) = a2;
  *(unsigned char *)(result + 2++*(void *)(result + 24) = 0;
  return result;
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::NormalizeGradients(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  float v7 = a6;
  int v9 = *(_DWORD *)(a1 + 160);
  if (v9 == 3)
  {
    if (a6 >= 0.0 && a6 <= 1.0)
    {
      uint64_t v12 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, a2, a3, a4, a5);
      uint64_t v13 = *(void *)(a1 + 136) + 48 * a2;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v12, v13, v7);
    }
  }
  else if (v9 == 2)
  {
    if (a6 > 0.0)
    {
      if (*(unsigned char *)(a1 + 84)) {
        float v7 = (float)*(int *)(*(void *)(a1 + 176) + 4 * a2) * a6;
      }
      uint64_t v15 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, a2, a3, a4, a5);
      uint64_t v19 = (unsigned int *)(*(void *)(a1 + 136) + 48 * a2);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v15, v19, v7, v16, v17, v18);
    }
  }
  else if (v9 == 1 && a6 > 0.0)
  {
    if (*(unsigned char *)(a1 + 84)) {
      float v7 = (float)*(int *)(*(void *)(a1 + 176) + 4 * a2) * a6;
    }
    uint64_t v10 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, a2, a3, a4, a5);
    kaldi::nnet1::UpdatableComponent::ClipGradient(v10, v7);
  }
}

float kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 84)) {
    return *(float *)(a1 + 56);
  }
  uint64_t v2 = *(void *)(a1 + 200);
  unint64_t v3 = *(void *)(a1 + 208) - v2;
  if (!v3) {
    return NAN;
  }
  unint64_t v4 = v3 >> 2;
  if ((int)v4 <= a2) {
    return NAN;
  }
  int v5 = v4 - 1;
  if (a2 >= 0) {
    int v5 = a2;
  }
  return *(float *)(v2 + 4 * v5);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::UpdateWeights()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "UpdateWeights", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 314);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)v8 + 232))(v8, a2, a3, 0, 0);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a4, v9, 1, v10, v11);
  uint64_t v15 = (_DWORD *)kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(v8, 0, v12, v13, v14);
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)a4, v15, v16, v17, v18);
  uint64_t v19 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);

  return v19(v8);
}

void kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::VectorizeWeightsCorrs()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "VectorizeWeightsCorrs", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 334);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::EnsureCorrs(a1);
  float v7 = *(unsigned int **)(a1 + 104);
  if (!v7 || (int v8 = kaldi::QuantizedMatrixBase<short>::NumRows(v7), (v9 = *(void *)(a1 + 104)) == 0)) {
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved3 + 3, "linearity_", v6);
  }
  *a3 = kaldi::QuantizedMatrixBase<short>::NumCols(v9) * v8;
  uint64_t v13 = *(void *)(a1 + 120) - *(void *)(a1 + 112);
  if (v13)
  {
    uint64_t v14 = v13 >> 3;
    if (*(_DWORD *)(a1 + 80) == 1) {
      int v15 = 0;
    }
    else {
      int v15 = *(_DWORD *)(a1 + 80);
    }
    if (v14 - 1 != v15)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "CountZeroCorr", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", 372);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Unexpected mismatch in indexes: ", 32);
      std::string v22 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"  ", 2);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
    }
    uint64_t v16 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, v15, v10, v11, v12);
    uint64_t result = kaldi::CuMatrixBase<float>::CountZeros(v16, v17, v18, v19, v20);
  }
  else
  {
    uint64_t result = 0;
  }
  *a2 = result;
  return result;
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearTransform(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  *(void *)(a1 + 48) = off_26E7B8;
  *(_OWORD *)(a1 + 56) = xmmword_20CEC0;
  *(_DWORD *)(a1 + 7std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = -1082130432;
  *(void *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 86) = 0;
  *(void *)a1 = off_2641A8;
  *(void *)(a1 + 88) = off_2642E0;
  *(void *)(a1 + 96) = off_264308;
  operator new();
}

void sub_D9878()
{
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::VectorizeWeightsCorrs(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v1, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.cc", 91);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"Performing  vectorization of linear component", 45);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v1);
    }
    kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub();
  }
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.cc", 88);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "Weights are already vectorized");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void sub_D9C34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::UpdateWeights(uint64_t a1, uint64_t a2, int a3)
{
  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  uint64_t v9 = *(void *)(a1 + 104);
  if (!v9) {
    goto LABEL_38;
  }
  float v11 = *(float *)(a1 + 64);
  float v10 = *(float *)(a1 + 68);
  float v12 = *(float *)(a1 + 72);
  int v13 = *(_DWORD *)(a1 + 76);
  *(void *)(v9 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
  int v14 = *(_DWORD *)(a1 + 80);
  if (a3 >= 0) {
    unsigned int v15 = a3;
  }
  else {
    unsigned int v15 = *(_DWORD *)(a1 + 80);
  }
  if (v14 == 1) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v15;
  }
  if ((int)v16 > v14) {
    kaldi::KaldiAssertFailure_((kaldi *)"UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.cc", (const char *)&stru_68.size + 4, "batch_idx <= opts_.num_subbatches", v8);
  }
  *(void *)(kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, v16, v6, v7, v8) + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
  *(void *)(*(void *)(a1 + 136) + 48 * (int)v16 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
  if (v16 == *(_DWORD *)(a1 + 80))
  {
    uint64_t v19 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, v16, v17, v18, v8);
    uint64_t v23 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, 0, v20, v21, v22);
    kaldi::CuMatrixBase<float>::AddMat(v19, v23, 111, v24, v25, 1.0, 0.0);
    if (*(int *)(a1 + 80) > 1)
    {
      int v26 = 1;
      do
      {
        uint64_t v27 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, v16, v17, v18, v8);
        uint64_t v31 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, v26, v28, v29, v30);
        kaldi::CuMatrixBase<float>::AddMat(v27, v31, 111, v32, v33, 1.0, 1.0);
        ++v26;
      }
      while (v26 < *(_DWORD *)(a1 + 80));
    }
    long long v34 = *(int **)(a1 + 176);
    v34[(int)v16] = 0;
    if ((int)v16 >= 1)
    {
      int v35 = 0;
      uint64_t v36 = v16;
      uint64_t v37 = v34;
      do
      {
        int v38 = *v37++;
        v35 += v38;
        v34[(int)v16] = v35;
        --v36;
      }
      while (v36);
    }
  }
  float v39 = *(float *)(a1 + 56);
  if (*(unsigned char *)(a1 + 84)) {
    float v39 = v39 / (float)*(int *)(*(void *)(a1 + 176) + 4 * (int)v16);
  }
  uint64_t v40 = *(void *)(a1 + 200);
  if ((int)v16 >= (unint64_t)((*(void *)(a1 + 208) - v40) >> 2))
  {
    LODWORD(v49[0]) = 2143289344;
    std::vector<float>::resize(a1 + 200, (int)v16 + 1, v49);
    uint64_t v40 = *(void *)(a1 + 200);
  }
  *(float *)(v40 + 4 * (int)v16) = v39;
  if (*(float *)(a1 + 164) >= 0.0) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 248))(a1, v16);
  }
  if (v11 != 0.0)
  {
    uint64_t v41 = *(void *)(a1 + 104);
    if (!v41) {
      goto LABEL_38;
    }
    kaldi::CuMatrixBase<float>::AddMat(v41, *(void *)(a1 + 104), 111, v18, v8, (float)-(float)(v39 * v11) * (float)*(int *)(*(void *)(a1 + 176) + 4 * (int)v16), 1.0);
  }
  if (v10 == 0.0) {
    goto LABEL_28;
  }
  unint64_t v42 = *(_DWORD **)(a1 + 104);
  if (!v42) {
LABEL_38:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)&stru_108.reserved3 + 3, "linearity_", v8);
  uint64_t v43 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a1, v16, v17, v18, v8);
  kaldi::cu::RegularizeL1<float>(v42, v43, (float)(v10 * v39) * (float)*(int *)(*(void *)(a1 + 176) + 4 * (int)v16), v39, v44, v45, v46);
LABEL_28:
  if (v12 > 0.0)
  {
    if (*(int *)(a1 + 80) >= 2)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49, "UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.cc", 185);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v49, "the multi batch gradient quantization does not work yet");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49);
    }
    if (*(void *)(a1 + 240) == *(void *)(a1 + 232)) {
      kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 232));
    }
    kaldi::nnet1::QuantizerResidualAggregator::Quantize((kaldi::nnet1::QuantizerResidualAggregator *)(a1 + 232), v13, v12, v17, v18, v8);
  }
  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::ApplyCorr(a1, v16, v39);
  float v47 = *(unsigned char **)(a1 + 176);
  if (v16 == *(_DWORD *)(a1 + 80))
  {
    float v48 = *(unsigned char **)(a1 + 184);
    if (v47 != v48) {
      bzero(v47, ((v48 - v47 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    }
  }
  else
  {
    *(_DWORD *)&v47[4 * (int)v16] = 0;
  }
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::GetType()
{
  return 258;
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::GetType()
{
  return 259;
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::GetType()
{
  return 260;
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::LinearTransform<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_264E70;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = off_266498;
  *(void *)(a1 + 48) = off_26E7B8;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = off_264330;
  *(void *)(a1 + 88) = off_264468;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 96) = off_264490;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 112), (uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 3);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 136), *(void *)(a2 + 136), *(void *)(a2 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 4));
  int v6 = *(_DWORD *)(a2 + 160);
  uint64_t v7 = *(void *)(a2 + 164);
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 1--*(_DWORD *)(a9 + 60) = v6;
  *(void *)(a1 + 164) = v7;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 19std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 176), *(const void **)(a2 + 176), *(void *)(a2 + 184), (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 2);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 200), *(const void **)(a2 + 200), *(void *)(a2 + 208), (uint64_t)(*(void *)(a2 + 208) - *(void *)(a2 + 200)) >> 2);
  char v11 = *(unsigned char *)(a2 + 224);
  *(_OWORD *)(a1 + 23std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(unsigned char *)(a1 + 2++*(void *)(result + 24) = v11;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(void *)(a1 + 296) = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "LinearTransform", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.cc", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  if (*(void *)(a2 + 104)) {
    operator new();
  }
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v12 = *(void *)(a1 + 120);
  if (v12 != v13)
  {
    unint64_t v14 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 112) + 8 * v14))
      {
        uint64_t v15 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a2, v14, v8, v9, v10);
        kaldi::NewCuSubOrMat<float>(v15, *(unsigned __int8 *)(a1 + 16));
      }
      ++v14;
    }
    while (v14 < (v12 - v13) >> 3);
  }
  if (*(void *)(a2 + 240) != *(void *)(a2 + 232)) {
    kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 232));
  }
  return a1;
}

void sub_DA358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v8);
  float v10 = *v7;
  if (*v7)
  {
    *((void *)v4 + 26) = v10;
    operator delete(v10);
  }
  char v11 = *v6;
  if (*v6)
  {
    *((void *)v4 + 23) = v11;
    operator delete(v11);
  }
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](v5, 0);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a3);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a4);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v4);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::LinearTransform<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_264E70;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = off_266498;
  *(void *)(a1 + 48) = off_26E7B8;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = off_2644B8;
  *(void *)(a1 + 88) = off_2645F0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 96) = off_264618;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 112), (uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 3);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 136), *(void *)(a2 + 136), *(void *)(a2 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 4));
  int v6 = *(_DWORD *)(a2 + 160);
  uint64_t v7 = *(void *)(a2 + 164);
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 1--*(_DWORD *)(a9 + 60) = v6;
  *(void *)(a1 + 164) = v7;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 19std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 176), *(const void **)(a2 + 176), *(void *)(a2 + 184), (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 2);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 200), *(const void **)(a2 + 200), *(void *)(a2 + 208), (uint64_t)(*(void *)(a2 + 208) - *(void *)(a2 + 200)) >> 2);
  char v11 = *(unsigned char *)(a2 + 224);
  *(_OWORD *)(a1 + 23std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(unsigned char *)(a1 + 2++*(void *)(result + 24) = v11;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(void *)(a1 + 296) = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "LinearTransform", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.cc", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  if (*(void *)(a2 + 104)) {
    operator new();
  }
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v12 = *(void *)(a1 + 120);
  if (v12 != v13)
  {
    unint64_t v14 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 112) + 8 * v14))
      {
        uint64_t v15 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a2, v14, v8, v9, v10);
        kaldi::NewCuSubOrMat<float>(v15, *(unsigned __int8 *)(a1 + 16));
      }
      ++v14;
    }
    while (v14 < (v12 - v13) >> 3);
  }
  if (*(void *)(a2 + 240) != *(void *)(a2 + 232)) {
    kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 232));
  }
  return a1;
}

void sub_DA76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v8);
  float v10 = *v7;
  if (*v7)
  {
    *((void *)v4 + 26) = v10;
    operator delete(v10);
  }
  char v11 = *v6;
  if (*v6)
  {
    *((void *)v4 + 23) = v11;
    operator delete(v11);
  }
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](v5, 0);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a3);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a4);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v4);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(result);
    operator delete();
  }
  return result;
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::LinearTransform<kaldi::QuantizedMatrix<signed char>>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_264E70;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = off_266498;
  *(void *)(a1 + 48) = off_26E7B8;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = off_2644B8;
  *(void *)(a1 + 88) = off_2645F0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 96) = off_264618;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 112), (uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 3);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 136), *(void *)(a2 + 136), *(void *)(a2 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 4));
  int v6 = *(_DWORD *)(a2 + 160);
  uint64_t v7 = *(void *)(a2 + 164);
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 1--*(_DWORD *)(a9 + 60) = v6;
  *(void *)(a1 + 164) = v7;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 19std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 176), *(const void **)(a2 + 176), *(void *)(a2 + 184), (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 2);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 200), *(const void **)(a2 + 200), *(void *)(a2 + 208), (uint64_t)(*(void *)(a2 + 208) - *(void *)(a2 + 200)) >> 2);
  char v11 = *(unsigned char *)(a2 + 224);
  *(_OWORD *)(a1 + 23std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(unsigned char *)(a1 + 2++*(void *)(result + 24) = v11;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(void *)(a1 + 296) = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "LinearTransform", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.cc", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  if (*(void *)(a2 + 104)) {
    operator new();
  }
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v12 = *(void *)(a1 + 120);
  if (v12 != v13)
  {
    unint64_t v14 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 112) + 8 * v14))
      {
        uint64_t v15 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a2, v14, v8, v9, v10);
        kaldi::NewCuSubOrMat<float>(v15, *(unsigned __int8 *)(a1 + 16));
      }
      ++v14;
    }
    while (v14 < (v12 - v13) >> 3);
  }
  if (*(void *)(a2 + 240) != *(void *)(a2 + 232)) {
    kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 232));
  }
  return a1;
}

void sub_DABD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v8);
  float v10 = *v7;
  if (*v7)
  {
    *((void *)v4 + 26) = v10;
    operator delete(v10);
  }
  char v11 = *v6;
  if (*v6)
  {
    *((void *)v4 + 23) = v11;
    operator delete(v11);
  }
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](v5, 0);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a3);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a4);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v4);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(result);
    operator delete();
  }
  return result;
}

uint64_t kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::LinearTransform<kaldi::QuantizedMatrix<short>>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_264E70;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = off_266498;
  *(void *)(a1 + 48) = off_26E7B8;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = off_264330;
  *(void *)(a1 + 88) = off_264468;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 96) = off_264490;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 112), (uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 3);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 136), *(void *)(a2 + 136), *(void *)(a2 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 4));
  int v6 = *(_DWORD *)(a2 + 160);
  uint64_t v7 = *(void *)(a2 + 164);
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 1--*(_DWORD *)(a9 + 60) = v6;
  *(void *)(a1 + 164) = v7;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 19std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 176), *(const void **)(a2 + 176), *(void *)(a2 + 184), (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 2);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 200), *(const void **)(a2 + 200), *(void *)(a2 + 208), (uint64_t)(*(void *)(a2 + 208) - *(void *)(a2 + 200)) >> 2);
  char v11 = *(unsigned char *)(a2 + 224);
  *(_OWORD *)(a1 + 23std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(unsigned char *)(a1 + 2++*(void *)(result + 24) = v11;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(void *)(a1 + 296) = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "LinearTransform", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-linear-transform.cc", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  if (*(void *)(a2 + 104)) {
    operator new();
  }
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v12 = *(void *)(a1 + 120);
  if (v12 != v13)
  {
    unint64_t v14 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 112) + 8 * v14))
      {
        uint64_t v15 = kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearityCorr(a2, v14, v8, v9, v10);
        kaldi::NewCuSubOrMat<float>(v15, *(unsigned __int8 *)(a1 + 16));
      }
      ++v14;
    }
    while (v14 < (v12 - v13) >> 3);
  }
  if (*(void *)(a2 + 240) != *(void *)(a2 + 232)) {
    kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 232));
  }
  return a1;
}

void sub_DB034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v8);
  float v10 = *v7;
  if (*v7)
  {
    *((void *)v4 + 26) = v10;
    operator delete(v10);
  }
  char v11 = *v6;
  if (*v6)
  {
    *((void *)v4 + 23) = v11;
    operator delete(v11);
  }
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](v5, 0);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a3);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a4);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v4);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Component::GetComponentTypeMap(kaldi::nnet1::Component *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&kaldi::nnet1::Component::GetComponentTypeMap(void)::flag, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    unint64_t v3 = &v4;
    std::__call_once(&kaldi::nnet1::Component::GetComponentTypeMap(void)::flag, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<kaldi::nnet1::Component::GetComponentTypeMap(void)::$_0 &&>>);
  }
  return kaldi::nnet1::Component::GetComponentTypeMap(void)::init_map_heap;
}

uint64_t kaldi::nnet1::Component::GetGradientNormTypeMap(kaldi::nnet1::Component *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&kaldi::nnet1::Component::GetGradientNormTypeMap(void)::flag, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    unint64_t v3 = &v4;
    std::__call_once(&kaldi::nnet1::Component::GetGradientNormTypeMap(void)::flag, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<kaldi::nnet1::Component::GetGradientNormTypeMap(void)::$_0 &&>>);
  }
  return kaldi::nnet1::Component::GetGradientNormTypeMap(void)::init_map_heap;
}

uint64_t kaldi::nnet1::Component::GetMatrixInitTypeMap(kaldi::nnet1::Component *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&kaldi::nnet1::Component::GetMatrixInitTypeMap(void)::flag, memory_order_acquire) != -1)
  {
    uint64_t v4 = &v2;
    unint64_t v3 = &v4;
    std::__call_once(&kaldi::nnet1::Component::GetMatrixInitTypeMap(void)::flag, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<kaldi::nnet1::Component::GetMatrixInitTypeMap(void)::$_0 &&>>);
  }
  return kaldi::nnet1::Component::GetMatrixInitTypeMap(void)::init_map_heap;
}

void kaldi::nnet1::Component::TypeToMarker(kaldi::nnet1::Component *a1@<X0>, std::string *a2@<X8>)
{
  int v2 = (int)a1;
  ComponentTypeMap = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetComponentTypeMap(a1);
  long long v5 = *(void **)ComponentTypeMap;
  int v6 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetComponentTypeMap(ComponentTypeMap);
  if (v5 == (void *)((char *)v6 + 8))
  {
LABEL_9:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13, "TypeToMarker", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-component.cc", 202);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Unknown component type: ", 24);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  while (*((_DWORD *)v5 + 14) != v2)
  {
    uint64_t v7 = (void *)v5[1];
    if (v7)
    {
      do
      {
        uint64_t v8 = v7;
        uint64_t v7 = (void *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        uint64_t v8 = (void *)v5[2];
        BOOL v9 = *v8 == (void)v5;
        long long v5 = v8;
      }
      while (!v9);
    }
    int v6 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetComponentTypeMap(v6);
    long long v5 = v8;
    if (v8 == (void *)((char *)v6 + 8)) {
      goto LABEL_9;
    }
  }
  if (*((char *)v5 + 55) < 0)
  {
    char v11 = (const std::string::value_type *)v5[4];
    std::string::size_type v12 = v5[5];
    std::string::__init_copy_ctor_external(a2, v11, v12);
  }
  else
  {
    long long v10 = *((_OWORD *)v5 + 2);
    a2->__r_.__value_.__r.__words[2] = v5[6];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v10;
  }
}

{
  int v2;
  kaldi::nnet1::Component *GradientNormTypeMap;
  void *v5;
  kaldi::nnet1::Component *v6;
  void *v7;
  void *v8;
  BOOL v9;
  long long v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  void v13[34];
  uint64_t vars8;

  int v2 = (int)a1;
  GradientNormTypeMap = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetGradientNormTypeMap(a1);
  long long v5 = *(void **)GradientNormTypeMap;
  int v6 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetGradientNormTypeMap(GradientNormTypeMap);
  if (v5 == (void *)((char *)v6 + 8))
  {
LABEL_9:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13, "TypeToMarker", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-component.cc", 210);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Unknown gradient normalizaiton type: ", 37);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  while (*((_DWORD *)v5 + 14) != v2)
  {
    uint64_t v7 = (void *)v5[1];
    if (v7)
    {
      do
      {
        uint64_t v8 = v7;
        uint64_t v7 = (void *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        uint64_t v8 = (void *)v5[2];
        BOOL v9 = *v8 == (void)v5;
        long long v5 = v8;
      }
      while (!v9);
    }
    int v6 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetGradientNormTypeMap(v6);
    long long v5 = v8;
    if (v8 == (void *)((char *)v6 + 8)) {
      goto LABEL_9;
    }
  }
  if (*((char *)v5 + 55) < 0)
  {
    char v11 = (const std::string::value_type *)v5[4];
    std::string::size_type v12 = v5[5];
    std::string::__init_copy_ctor_external(a2, v11, v12);
  }
  else
  {
    long long v10 = *((_OWORD *)v5 + 2);
    a2->__r_.__value_.__r.__words[2] = v5[6];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v10;
  }
}

{
  int v2;
  kaldi::nnet1::Component *MatrixInitTypeMap;
  void *v5;
  kaldi::nnet1::Component *v6;
  void *v7;
  void *v8;
  BOOL v9;
  long long v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  void v13[34];
  uint64_t vars8;

  int v2 = (int)a1;
  MatrixInitTypeMap = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetMatrixInitTypeMap(a1);
  long long v5 = *(void **)MatrixInitTypeMap;
  int v6 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetMatrixInitTypeMap(MatrixInitTypeMap);
  if (v5 == (void *)((char *)v6 + 8))
  {
LABEL_9:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13, "TypeToMarker", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-component.cc", 218);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Unknown matrix initialization type: ", 36);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  while (*((_DWORD *)v5 + 14) != v2)
  {
    uint64_t v7 = (void *)v5[1];
    if (v7)
    {
      do
      {
        uint64_t v8 = v7;
        uint64_t v7 = (void *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        uint64_t v8 = (void *)v5[2];
        BOOL v9 = *v8 == (void)v5;
        long long v5 = v8;
      }
      while (!v9);
    }
    int v6 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::GetMatrixInitTypeMap(v6);
    long long v5 = v8;
    if (v8 == (void *)((char *)v6 + 8)) {
      goto LABEL_9;
    }
  }
  if (*((char *)v5 + 55) < 0)
  {
    char v11 = (const std::string::value_type *)v5[4];
    std::string::size_type v12 = v5[5];
    std::string::__init_copy_ctor_external(a2, v11, v12);
  }
  else
  {
    long long v10 = *((_OWORD *)v5 + 2);
    a2->__r_.__value_.__r.__words[2] = v5[6];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v10;
  }
}

void sub_DB354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_DB490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_DB5CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::Component::MarkerToComponentType(std::string::size_type *a1)
{
  uint64_t ComponentTypeMap = kaldi::nnet1::Component::GetComponentTypeMap((kaldi::nnet1::Component *)a1);
  uint64_t v4 = (unsigned int *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(ComponentTypeMap, (const void **)a1);
  uint64_t v5 = kaldi::nnet1::Component::GetComponentTypeMap((kaldi::nnet1::Component *)v4);
  if ((unsigned int *)(v5 + 8) != v4) {
    return v4[14];
  }
  int v6 = *((char *)a1 + 23);
  if (v6 < 0)
  {
    std::string::__init_copy_ctor_external(&v40, (const std::string::value_type *)*a1, a1[1]);
    int v6 = *((char *)a1 + 23);
    if (v6 < 0)
    {
      uint64_t v8 = (char *)*a1;
      std::string::size_type v7 = a1[1];
      if (v7) {
        goto LABEL_7;
      }
      goto LABEL_11;
    }
  }
  else
  {
    std::string v40 = *(std::string *)a1;
  }
  std::string::size_type v7 = v6;
  uint64_t v8 = (char *)a1;
  if ((_BYTE)v6)
  {
LABEL_7:
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v9 = &v40;
    }
    else {
      BOOL v9 = (std::string *)v40.__r_.__value_.__r.__words[0];
    }
    do
    {
      uint64_t v5 = __tolower(*v8);
      v9->__r_.__value_.__s.__data_[0] = v5;
      BOOL v9 = (std::string *)((char *)v9 + 1);
      ++v8;
      --v7;
    }
    while (v7);
  }
LABEL_11:
  uint64_t v10 = kaldi::nnet1::Component::GetComponentTypeMap((kaldi::nnet1::Component *)v5);
  char v11 = *(void **)v10;
  while (1)
  {
    uint64_t v10 = kaldi::nnet1::Component::GetComponentTypeMap((kaldi::nnet1::Component *)v10);
    if (v11 == (void *)(v10 + 8))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v38, "MarkerToComponentType", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-component.cc", 237);
      long long v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Unknown component type marker: ", 31);
      int v35 = *((char *)a1 + 23);
      if (v35 >= 0) {
        uint64_t v36 = (uint64_t)a1;
      }
      else {
        uint64_t v36 = *a1;
      }
      if (v35 >= 0) {
        uint64_t v37 = *((unsigned __int8 *)a1 + 23);
      }
      else {
        uint64_t v37 = a1[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, v36, v37);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v38);
    }
    if ((*((char *)v11 + 55) & 0x80000000) == 0)
    {
      uint64_t v12 = *((unsigned __int8 *)v11 + 55);
      std::string v39 = *(std::string *)(v11 + 4);
LABEL_17:
      uint64_t v13 = (char *)(v11 + 4);
      goto LABEL_18;
    }
    std::string::__init_copy_ctor_external(&v39, (const std::string::value_type *)v11[4], v11[5]);
    if ((*((char *)v11 + 55) & 0x80000000) == 0)
    {
      uint64_t v12 = *((unsigned __int8 *)v11 + 55);
      goto LABEL_17;
    }
    uint64_t v13 = (char *)v11[4];
    uint64_t v12 = v11[5];
LABEL_18:
    std::string::size_type v14 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    if (v12)
    {
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v15 = &v39;
      }
      else {
        uint64_t v15 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      do
      {
        uint64_t v10 = __tolower(*v13);
        v15->__r_.__value_.__s.__data_[0] = v10;
        uint64_t v15 = (std::string *)((char *)v15 + 1);
        ++v13;
        --v12;
      }
      while (v12);
      std::string::size_type v14 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    }
    uint64_t v16 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v40.__r_.__value_.__l.__size_;
    }
    std::string::size_type v18 = v39.__r_.__value_.__l.__size_;
    if ((v14 & 0x80u) == 0) {
      std::string::size_type v18 = v14;
    }
    if (size != v18) {
      goto LABEL_40;
    }
    uint64_t v19 = (v14 & 0x80u) == 0 ? &v39 : (std::string *)v39.__r_.__value_.__r.__words[0];
    if ((*((unsigned char *)&v40.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      uint64_t v10 = memcmp(v40.__r_.__value_.__l.__data_, v19, v40.__r_.__value_.__l.__size_);
      if (v10) {
        goto LABEL_40;
      }
    }
    else if (*((unsigned char *)&v40.__r_.__value_.__s + 23))
    {
      uint64_t v20 = &v40;
      while (v20->__r_.__value_.__s.__data_[0] == v19->__r_.__value_.__s.__data_[0])
      {
        uint64_t v20 = (std::string *)((char *)v20 + 1);
        uint64_t v19 = (std::string *)((char *)v19 + 1);
        if (!--v16) {
          goto LABEL_48;
        }
      }
LABEL_40:
      char v21 = 0;
      if ((v14 & 0x80) == 0) {
        goto LABEL_42;
      }
LABEL_41:
      operator delete(v39.__r_.__value_.__l.__data_);
      goto LABEL_42;
    }
LABEL_48:
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v38, "MarkerToComponentType", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-component.cc", 233);
      uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"please update to formatted name ", 32);
      int v25 = *((char *)v11 + 55);
      if (v25 >= 0) {
        uint64_t v26 = (uint64_t)(v11 + 4);
      }
      else {
        uint64_t v26 = v11[4];
      }
      if (v25 >= 0) {
        uint64_t v27 = *((unsigned __int8 *)v11 + 55);
      }
      else {
        uint64_t v27 = v11[5];
      }
      uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v26, v27);
      uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" ASAP, you used ", 16);
      int v30 = *((char *)a1 + 23);
      if (v30 >= 0) {
        uint64_t v31 = (uint64_t)a1;
      }
      else {
        uint64_t v31 = *a1;
      }
      if (v30 >= 0) {
        uint64_t v32 = *((unsigned __int8 *)a1 + 23);
      }
      else {
        uint64_t v32 = a1[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v38);
      LOBYTE(v14) = *((unsigned char *)&v39.__r_.__value_.__s + 23);
    }
    uint64_t v1 = *((unsigned int *)v11 + 14);
    char v21 = 1;
    if ((v14 & 0x80) != 0) {
      goto LABEL_41;
    }
LABEL_42:
    if (v21) {
      break;
    }
    std::string v22 = (void *)v11[1];
    if (v22)
    {
      do
      {
        char v11 = v22;
        std::string v22 = (void *)*v22;
      }
      while (v22);
    }
    else
    {
      do
      {
        uint64_t v23 = v11;
        char v11 = (void *)v11[2];
      }
      while ((void *)*v11 != v23);
    }
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  return v1;
}

void sub_DB948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_DB958(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::Component::MarkerToGradientNormType(kaldi::nnet1::Component *a1)
{
  uint64_t GradientNormTypeMap = kaldi::nnet1::Component::GetGradientNormTypeMap(a1);
  unint64_t v3 = (unsigned int *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(GradientNormTypeMap, (const void **)a1);
  if ((unsigned int *)(kaldi::nnet1::Component::GetGradientNormTypeMap((kaldi::nnet1::Component *)v3) + 8) == v3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6, "MarkerToGradientNormType", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-component.cc", 244);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Unknown gradient normalization marker: ", 39);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, (uint64_t)a1);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  return v3[14];
}

uint64_t kaldi::nnet1::Component::MarkerToMatrixInitType(kaldi::nnet1::Component *a1)
{
  uint64_t MatrixInitTypeMap = kaldi::nnet1::Component::GetMatrixInitTypeMap(a1);
  unint64_t v3 = (unsigned int *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(MatrixInitTypeMap, (const void **)a1);
  if ((unsigned int *)(kaldi::nnet1::Component::GetMatrixInitTypeMap((kaldi::nnet1::Component *)v3) + 8) == v3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6, "MarkerToMatrixInitType", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-component.cc", 251);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Unknown matrix initialization marker: ", 38);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, (uint64_t)a1);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  return v3[14];
}

void kaldi::nnet1::Component::NewComponentOfType(kaldi::nnet1::Component *a1)
{
  if ((int)a1 <= 512)
  {
    switch((int)a1)
    {
      case 257:
        operator new();
      case 258:
        operator new();
      case 259:
        operator new();
      case 260:
        operator new();
      case 261:
        operator new();
      case 262:
        operator new();
      case 263:
        operator new();
      case 264:
        operator new();
      case 265:
        operator new();
      case 266:
        operator new();
      case 267:
        operator new();
      case 268:
        operator new();
      case 269:
        operator new();
      case 270:
        operator new();
      case 271:
        operator new();
      case 272:
        operator new();
      case 273:
        operator new();
      case 274:
        operator new();
      case 275:
        operator new();
      case 276:
        operator new();
      case 277:
        operator new();
      case 278:
        operator new();
      case 279:
        operator new();
      case 280:
        operator new();
      case 281:
        operator new();
      case 282:
        operator new();
      case 283:
        operator new();
      case 284:
        operator new();
      case 285:
        operator new();
      case 286:
        operator new();
      case 287:
        operator new();
      case 288:
        operator new();
      case 289:
        operator new();
      case 290:
        operator new();
      default:
        break;
    }
  }
  else
  {
    switch((int)a1)
    {
      case 513:
        operator new();
      case 514:
        operator new();
      case 515:
        operator new();
      case 516:
        operator new();
      case 517:
        operator new();
      case 518:
        operator new();
      case 519:
        operator new();
      case 520:
        operator new();
      case 521:
        operator new();
      case 522:
        operator new();
      case 523:
        operator new();
      case 524:
        operator new();
      case 525:
        operator new();
      default:
        switch((int)a1)
        {
          case 2048:
            operator new();
          case 2049:
            operator new();
          case 2050:
            operator new();
          case 2051:
            operator new();
          case 2052:
            operator new();
          case 2053:
            operator new();
          case 2054:
            operator new();
          case 2055:
            operator new();
          case 2056:
            operator new();
          case 2057:
            operator new();
          case 2058:
            operator new();
          default:
            goto LABEL_63;
        }
    }
  }
LABEL_63:
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "NewComponentOfType", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-component.cc", 483);
  int v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Missing type: ", 14);
  kaldi::nnet1::Component::TypeToMarker(a1, &v3);
  std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, (uint64_t)&v3);
  std::string::~string(&v3);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
}

void sub_DCC30()
{
}

double kaldi::nnet1::GatedRecurrentUnit::GatedRecurrentUnit(kaldi::nnet1::GatedRecurrentUnit *this, int a2, int a3)
{
  *((_DWORD *)this + 2++*(void *)(result + 24) = a2;
  *((_DWORD *)this + 225) = a3;
  *((_WORD *)this + 45std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((void *)this + 114) = 0;
  *((void *)this + 116) = 0;
  *((void *)this + 115) = 0;
  *((void *)this + 111) = off_266498;
  *((void *)this + 117) = off_26E7B8;
  *((_OWORD *)this + 59) = xmmword_20CEC0;
  *((void *)this + 120) = 0x3BF800000;
  *((_DWORD *)this + 24std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 1;
  *((_WORD *)this + 486) = 0;
  *((unsigned char *)this + 974) = 0;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent(this, (uint64_t *)off_26C768);
  *(void *)uint64_t v3 = off_26C3E0;
  *(void *)(v3 + 888) = off_26C648;
  double result = 0.0;
  *(_OWORD *)(v3 + kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized<kaldi::nnet1::Quantizable16BitComponentItf>((uint64_t)this - 168) = 0u;
  *(_OWORD *)(v3 + 184) = 0u;
  *(void *)(v3 + 1--*(_DWORD *)(a9 + 60) = off_262DC8;
  *(unsigned char *)(v3 + 200) = 0;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_OWORD *)(v3 + 23std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(void *)(v3 + 208) = off_262DC8;
  *(unsigned char *)(v3 + 248) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_OWORD *)(v3 + 280) = 0u;
  *(void *)(v3 + 256) = off_262DC8;
  *(unsigned char *)(v3 + 296) = 0;
  *(void *)(v3 + 320) = 0;
  *(void *)(v3 + 328) = 0;
  *(void *)(v3 + 304) = off_262E60;
  *(void *)(v3 + 31std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(_WORD *)(v3 + 336) = 0;
  *(void *)(v3 + 600) = 0;
  *(_OWORD *)(v3 + 568) = 0u;
  *(_OWORD *)(v3 + 584) = 0u;
  *(_OWORD *)(v3 + 536) = 0u;
  *(_OWORD *)(v3 + 55std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(v3 + 504) = 0u;
  *(_OWORD *)(v3 + 520) = 0u;
  *(_OWORD *)(v3 + 47std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(v3 + 488) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_OWORD *)(v3 + 456) = 0u;
  *(_OWORD *)(v3 + 408) = 0u;
  *(_OWORD *)(v3 + 4++*(void *)(result + 24) = 0u;
  *(_OWORD *)(v3 + 376) = 0u;
  *(_OWORD *)(v3 + 39std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(v3 + 344) = 0u;
  *(_OWORD *)(v3 + 3--*(_DWORD *)(a9 + 60) = 0u;
  *(_DWORD *)(v3 + 608) = 1065353216;
  *(void *)(v3 + 620) = 0;
  *(void *)(v3 + 628) = 0;
  *(void *)(v3 + 61std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(v3 + 633) = 0;
  *(_OWORD *)(v3 + 648) = 0u;
  *(_OWORD *)(v3 + 664) = 0u;
  *(_OWORD *)(v3 + 680) = 0u;
  *(_OWORD *)(v3 + 696) = 0u;
  *(_OWORD *)(v3 + 71std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(v3 + 728) = 0u;
  *(_OWORD *)(v3 + 744) = 0u;
  *(_OWORD *)(v3 + 7--*(_DWORD *)(a9 + 60) = 0u;
  *(_OWORD *)(v3 + 776) = 0u;
  *(_OWORD *)(v3 + 79std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(v3 + 808) = 0u;
  *(_OWORD *)(v3 + 8++*(void *)(result + 24) = 0u;
  *(_OWORD *)(v3 + 840) = 0u;
  *(_OWORD *)(v3 + 856) = 0u;
  *(_OWORD *)(v3 + 87std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  return result;
}

void sub_DD308(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SimplerSimpleRecurrentUnit::SimplerSimpleRecurrentUnit(uint64_t this, int a2, int a3)
{
  *(_DWORD *)(this + 56) = a2;
  *(_DWORD *)(this + --*(_DWORD *)(a9 + 60) = a3;
  *(_WORD *)(this + 64) = 0;
  *(void *)(this + 80) = 0;
  *(void *)(this + 88) = 0;
  *(void *)(this + 7std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(this + 120) = 0;
  *(void *)(this + 128) = 0;
  *(void *)(this + 136) = off_26E7D8;
  *(_DWORD *)(this + 144) = 1;
  *(void *)(this + 40) = 0;
  *(void *)(this + 48) = off_2633A0;
  *(void *)this = off_263250;
  *(void *)(this + 8) = 0;
  *(void *)(this + 96) = off_263470;
  *(void *)(this + 104) = off_2634F0;
  *(void *)(this + 11std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(this + ++*(void *)(result + 24) = 0;
  *(void *)(this + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(this + 16) = off_262E60;
  return this;
}

double kaldi::nnet1::Dropout::Dropout(kaldi::nnet1::Dropout *this, int a2, int a3)
{
  *((_DWORD *)this + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *(void *)this = off_265298;
  double result = 0.0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 0;
  *((void *)this + 11) = off_262DC8;
  *((unsigned char *)this + 128) = 0;
  *(_OWORD *)((char *)this + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)((char *)this + kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized<kaldi::nnet1::Quantizable16BitComponentItf>((uint64_t)this - 168) = 0u;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = off_262DC8;
  *((unsigned char *)this + 184) = 0;
  *((_DWORD *)this + 48) = 1056964608;
  return result;
}

void kaldi::nnet1::ParallelComponent::ParallelComponent(kaldi::nnet1::ParallelComponent *this, int a2, int a3)
{
  *((_DWORD *)this + 54) = a2;
  *((_DWORD *)this + 55) = a3;
  *((_WORD *)this + 11std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((void *)this + 30) = 0;
  *((void *)this + 31) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 26) = off_266498;
  *((void *)this + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = off_26E7B8;
  *(_OWORD *)((char *)this + 264) = xmmword_20CEC0;
  *((void *)this + 35) = 0x3BF800000;
  *((_DWORD *)this + 7std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 1;
  *((_WORD *)this + 146) = 0;
  *((unsigned char *)this + 294) = 0;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent(this, (uint64_t *)off_265BB0);
  *(void *)uint64_t v3 = off_2657D8;
  *(void *)(v3 + 200) = 0;
  *(void *)(v3 + 208) = off_265A90;
  *(void *)(v3 + 1--*(_DWORD *)(a9 + 60) = off_265930;
  *(void *)(v3 + kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized<kaldi::nnet1::Quantizable16BitComponentItf>((uint64_t)this - 168) = off_265958;
  *(_WORD *)(v3 + 176) = 0;
  *(void *)(v3 + 184) = 0;
  *(void *)(v3 + 19std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
}

void sub_DD5C4(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

kaldi::nnet1::Recurrent *kaldi::nnet1::Recurrent::Recurrent(kaldi::nnet1::Recurrent *this, uint64_t a2, uint64_t a3)
{
  *((_DWORD *)this + 134) = a2;
  *((_DWORD *)this + 135) = a3;
  *((_WORD *)this + 27std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((void *)this + 69) = 0;
  *((void *)this + 71) = 0;
  *((void *)this + 70) = 0;
  *((void *)this + 66) = off_266498;
  *((void *)this + 7std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = off_26E7B8;
  *(_OWORD *)((char *)this + 584) = xmmword_20CEC0;
  *((void *)this + 75) = 0x3BF800000;
  *((_DWORD *)this + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 1;
  *((_WORD *)this + 306) = 0;
  *((unsigned char *)this + 614) = 0;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent(this, (uint64_t *)off_266038);
  *(void *)this = off_265CC8;
  *((void *)this + 66) = off_265F18;
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)this + 160, a3, a2, 1u, 0, 0);
  *((void *)this + 27) = 0;
  *((void *)this + 28) = 0;
  *((void *)this + 26) = off_262E60;
  *((void *)this + 29) = 0;
  kaldi::CuVector<float>::Resize((uint64_t)this + 208, a3, 1u, v6, v7);
  *((_OWORD *)this + 2std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_DWORD *)this + 96) = 516;
  *((_WORD *)this + 194) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *((void *)this + 49) = _D1;
  *((_DWORD *)this + 100) = 0;
  *((void *)this + 5std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((void *)this + 53) = 0;
  *((void *)this + 51) = 0;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *((void *)this + 54) = off_262DC8;
  *((unsigned char *)this + 47std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  return this;
}

void sub_DD7A4(_Unwind_Exception *a1)
{
  kaldi::CuMatrix<float>::~CuMatrix(v3);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(v1, (uint64_t *)off_266038);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this, int a2, int a3)
{
  *((void *)this + 18) = off_264E70;
  *((_DWORD *)this + 38) = a2;
  *((_DWORD *)this + 39) = a3;
  *((_WORD *)this + 80) = 0;
  *((void *)this + 2std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 21) = 0;
  *(void *)this = off_267180;
  *((void *)this + ++*(void *)(result + 24) = off_2671A8;
  uint64_t v3 = kaldi::nnet1::AttentionBaseInferenceComponent::AttentionBaseInferenceComponent((uint64_t *)this, (uint64_t *)off_2698A8);
  v3[18] = (uint64_t)off_2697B8;
  uint64_t *v3 = (uint64_t)off_269688;
  v3[24] = (uint64_t)off_269888;
  double result = 0.0;
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  v3[1] = (uint64_t)off_262DC8;
  *((unsigned char *)v3 + 48) = 0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  v3[7] = (uint64_t)off_262DC8;
  *((unsigned char *)v3 + 96) = 0;
  *((unsigned char *)v3 + 104) = 0;
  *((_DWORD *)v3 + 27) = 1065353216;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  return result;
}

kaldi::nnet1::MultiHeadAttention *kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(kaldi::nnet1::MultiHeadAttention *this, int a2, int a3)
{
  *((void *)this + 19) = off_264E70;
  *((_DWORD *)this + 40) = a2;
  *((_DWORD *)this + 41) = a3;
  *((_WORD *)this + 84) = 0;
  *((void *)this + 2std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + ++*(void *)(result + 24) = 0;
  *(void *)this = off_267180;
  *((void *)this + 25) = off_2671A8;
  kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(this, (uint64_t *)&off_269B38);
  *((void *)this + 19) = off_269A48;
  *(void *)this = off_269918;
  *((void *)this + 25) = off_269B18;
  *((_DWORD *)this + 36) = -1;
  return this;
}

void sub_DDA5C(_Unwind_Exception *exception_object)
{
  uint64_t v5 = v3;
  void *v5 = v2;
  std::string::size_type v7 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 184) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *kaldi::nnet1::SelfAttention::SelfAttention(kaldi::nnet1::SelfAttention *this, int a2, int a3)
{
  *((void *)this + 10) = off_264E70;
  *((_DWORD *)this + 2std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
  *((_DWORD *)this + 23) = a3;
  *((_WORD *)this + 48) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 13) = 0;
  *(void *)this = off_267180;
  *((void *)this + 16) = off_2671A8;
  double result = kaldi::nnet1::AttentionBaseInferenceComponent::AttentionBaseInferenceComponent((uint64_t *)this, (uint64_t *)off_26A158);
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  result[5] = (uint64_t)off_26E7D8;
  *((_DWORD *)result + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 1;
  result[9] = 0;
  result[10] = (uint64_t)off_26A068;
  result[16] = (uint64_t)off_26A138;
  uint64_t *result = (uint64_t)off_269E98;
  result[1] = (uint64_t)off_269F50;
  result[7] = 0;
  result[8] = 0;
  return result;
}

kaldi::nnet1::SupervisedMultiHeadAttention *kaldi::nnet1::SupervisedMultiHeadAttention::SupervisedMultiHeadAttention(kaldi::nnet1::SupervisedMultiHeadAttention *this, int a2, int a3)
{
  *((void *)this + 25) = off_264E70;
  *((_DWORD *)this + 5std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
  *((_DWORD *)this + 53) = a3;
  *((_WORD *)this + 108) = 0;
  *((void *)this + 28) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  *(void *)this = off_267180;
  *((void *)this + 31) = off_2671A8;
  kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(this, (uint64_t *)off_269DE8);
  *((void *)this + 25) = off_269CF8;
  *(void *)this = off_269BC8;
  *((void *)this + 31) = off_269DC8;
  *((_DWORD *)this + 37) = -1;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((void *)this + 19) = off_262DC8;
  *((unsigned char *)this + 19std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  return this;
}

void sub_DDD10(_Unwind_Exception *exception_object)
{
  uint64_t v5 = v3;
  void *v5 = v2;
  std::string::size_type v7 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 23std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *kaldi::nnet1::AverageAttention::AverageAttention(kaldi::nnet1::AverageAttention *this, int a2, int a3)
{
  *((void *)this + 9) = off_264E70;
  *((_DWORD *)this + 20) = a2;
  *((_DWORD *)this + 21) = a3;
  *((_WORD *)this + 44) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)this = off_267180;
  *((void *)this + 15) = off_2671A8;
  double result = kaldi::nnet1::AttentionBaseInferenceComponent::AttentionBaseInferenceComponent((uint64_t *)this, (uint64_t *)off_26A488);
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  result[5] = (uint64_t)off_26E7D8;
  *((_DWORD *)result + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 1;
  result[8] = 0;
  result[9] = (uint64_t)off_26A398;
  result[15] = (uint64_t)off_26A468;
  uint64_t *result = (uint64_t)off_26A1C8;
  result[1] = (uint64_t)off_26A280;
  result[7] = 0;
  return result;
}

uint64_t kaldi::nnet1::LayerNorm::LayerNorm(uint64_t this, int a2, int a3)
{
  *(_DWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a3;
  *(_WORD *)(this + 16) = 0;
  *(void *)(this + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(this + 40) = 0;
  *(void *)(this + ++*(void *)(result + 24) = 0;
  *(void *)this = off_26CA68;
  *(_DWORD *)(this + 48) = 730643660;
  *(unsigned char *)(this + 5std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 1;
  *(void *)(this + 7std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(this + 80) = 0;
  *(void *)(this + 56) = off_262E60;
  *(void *)(this + 64) = 0;
  *(void *)(this + 104) = 0;
  *(void *)(this + 11std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(this + 88) = off_262E60;
  *(void *)(this + 96) = 0;
  return this;
}

void *kaldi::nnet1::Component::Delete(void *this, kaldi::nnet1::Component *a2)
{
  if (this)
  {
    int v2 = (int)a2;
    uint64_t v3 = this;
    uint64_t v4 = (*(uint64_t (**)(void *))(*(void *)this + 24))(this);
    uint64_t v5 = (kaldi::nnet1::Component *)v4;
    if ((int)v4 <= 512)
    {
      switch((int)v4)
      {
        case 257:
          goto LABEL_88;
        case 258:
          goto LABEL_88;
        case 259:
          goto LABEL_88;
        case 260:
          goto LABEL_88;
        case 261:
          goto LABEL_88;
        case 262:
          goto LABEL_88;
        case 263:
          goto LABEL_88;
        case 264:
          goto LABEL_88;
        case 265:
          goto LABEL_88;
        case 266:
          goto LABEL_88;
        case 267:
          goto LABEL_88;
        case 268:
          goto LABEL_88;
        case 269:
          goto LABEL_88;
        case 270:
          goto LABEL_88;
        case 271:
          goto LABEL_88;
        case 272:
          goto LABEL_88;
        case 273:
          goto LABEL_71;
        case 274:
          goto LABEL_71;
        case 275:
          goto LABEL_71;
        case 276:
          goto LABEL_71;
        case 277:
          goto LABEL_71;
        case 278:
          goto LABEL_53;
        case 279:
          goto LABEL_58;
        case 280:
LABEL_71:
          if (!this) {
            return this;
          }
          uint64_t v13 = *(uint64_t (**)(void))(*(void *)this + 8);
          return (void *)v13();
        case 281:
          goto LABEL_58;
        case 282:
          goto LABEL_58;
        case 283:
LABEL_58:
          if (!this) {
            return this;
          }
          uint64_t v13 = *(uint64_t (**)(void))(*(void *)this + 8);
          return (void *)v13();
        case 284:
          goto LABEL_88;
        case 285:
          goto LABEL_53;
        case 286:
          goto LABEL_53;
        case 287:
          goto LABEL_53;
        case 288:
          goto LABEL_53;
        case 289:
LABEL_53:
          if (!this) {
            return this;
          }
          uint64_t v13 = *(uint64_t (**)(void))(*(void *)this + 8);
          break;
        case 290:
          goto LABEL_88;
        default:
LABEL_9:
          if (!v2)
          {
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "Delete", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-component.cc", 723);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Missing type: ", 14);
            std::string::size_type v14 = (void *)std::ostream::operator<<();
            uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" ", 1);
            kaldi::nnet1::Component::TypeToMarker(v5, &__p);
            std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v15, (uint64_t)&__p);
            std::string::~string(&__p);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
          }
          if (kaldi::g_kaldi_verbose_level >= -1)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17, "Delete", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-component.cc", 720);
            std::string::size_type v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Missing type: ", 14);
            kaldi::nnet1::Component::TypeToMarker(v5, &__p);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = __p.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)p_p, size);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
          }
          return (void *)(*(uint64_t (**)(const void *))(*(void *)v3 + 8))(v3);
      }
      return (void *)v13();
    }
    switch((int)v4)
    {
      case 513:
        break;
      case 514:
        break;
      case 515:
        break;
      case 516:
        break;
      case 517:
        break;
      case 518:
        break;
      case 519:
        break;
      case 520:
        break;
      case 521:
        break;
      case 522:
        break;
      case 523:
        break;
      case 524:
        break;
      case 525:
        break;
      default:
        switch((int)v4)
        {
          case 2048:
            goto LABEL_88;
          case 2049:
            goto LABEL_88;
          case 2050:
            goto LABEL_88;
          case 2051:
            goto LABEL_88;
          case 2052:
            goto LABEL_88;
          case 2053:
            goto LABEL_88;
          case 2054:
            goto LABEL_88;
          case 2055:
            goto LABEL_71;
          case 2056:
            goto LABEL_88;
          case 2057:
            goto LABEL_88;
          case 2058:
            goto LABEL_88;
          default:
            goto LABEL_9;
        }
    }
LABEL_88:
    if (this)
    {
      uint64_t v13 = *(uint64_t (**)(void))(*(void *)this + 8);
      return (void *)v13();
    }
  }
  return this;
}

uint64_t kaldi::nnet1::Component::Init(const std::string *a1, uint64_t a2)
{
  std::istringstream::basic_istringstream[abi:ne180100](v21, a1, 8);
  std::string __p = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v17 = 0;
  kaldi::ReadToken((uint64_t *)v21, 0, (uint64_t)&__p, v3, v4);
  uint64_t v5 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&__p);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v16, "Init", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-component.cc", 736, 3);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Initializing component of type ", 31);
    if (v20 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if (v20 >= 0) {
      uint64_t v8 = HIBYTE(v20);
    }
    else {
      uint64_t v8 = v19;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)p_p, v8);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v16);
  }
  kaldi::ExpectToken((uint64_t *)v21, 0, (kaldi *)"<InputDim>");
  kaldi::ReadBasicType<int>(v21, 0, (uint64_t)&v17 + 4, v9, v10);
  kaldi::ExpectToken((uint64_t *)v21, 0, (kaldi *)"<OutputDim>");
  kaldi::ReadBasicType<int>(v21, 0, (uint64_t)&v17, v11, v12);
  kaldi::nnet1::Component::NewComponentOfType(v5);
  uint64_t v14 = v13;
  (*(void (**)(uint64_t, void (__cdecl ***)(std::istringstream *__hidden), uint64_t))(*(void *)v13 + 96))(v13, v21, a2);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
  if (v22 < 0) {
    operator delete(v21[10]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  std::ios::~ios();
  return v14;
}

void sub_DF7E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52)
{
  if (a51 < 0) {
    operator delete(__p);
  }
  std::istringstream::~istringstream((uint64_t)&a52);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Component::Read(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  std::string __p = 0;
  uint64_t v26 = 0;
  if (kaldi::Peek(a1, a2) == -1) {
    return 0;
  }
  kaldi::ReadToken(a1, a2, (uint64_t)&__p, v6, v7);
  int v10 = HIBYTE(v27);
  if (SHIBYTE(v27) < 0)
  {
    if (v26 != 6) {
      goto LABEL_16;
    }
    p_p = (unsigned __int16 *)__p;
  }
  else
  {
    if (HIBYTE(v27) != 6) {
      goto LABEL_13;
    }
    p_p = (unsigned __int16 *)&__p;
  }
  int v13 = *(_DWORD *)p_p;
  int v14 = p_p[2];
  if (v13 == 1701727804 && v14 == 15988)
  {
    kaldi::ReadToken(a1, a2, (uint64_t)&__p, v8, v9);
    int v10 = HIBYTE(v27);
    if ((v27 & 0x8000000000000000) == 0)
    {
LABEL_13:
      if (v10 == 7)
      {
        uint64_t v16 = (int *)&__p;
        goto LABEL_18;
      }
      goto LABEL_22;
    }
  }
  else if ((v27 & 0x8000000000000000) == 0)
  {
    goto LABEL_13;
  }
LABEL_16:
  if (v26 == 7)
  {
    uint64_t v16 = (int *)__p;
LABEL_18:
    int v17 = *v16;
    int v18 = *(int *)((char *)v16 + 3);
    if (v17 == 1850617660 && v18 == 1047815534)
    {
      uint64_t v12 = 0;
      if ((v10 & 0x80) == 0) {
        return v12;
      }
      goto LABEL_23;
    }
  }
LABEL_22:
  kaldi::ReadBasicType<int>(a1, a2, (uint64_t)&v28 + 4, v8, v9);
  kaldi::ReadBasicType<int>(a1, a2, (uint64_t)&v28, v20, v21);
  char v22 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&__p);
  kaldi::nnet1::Component::NewComponentOfType(v22);
  uint64_t v12 = v23;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v23 + 160))(v23, a1, a2, a3);
  if (v27 < 0) {
LABEL_23:
  }
    operator delete(__p);
  return v12;
}

void sub_DF9B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::Component::Write(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (kaldi::nnet1::Component *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  kaldi::nnet1::Component::TypeToMarker(v8, &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p, v9, v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteBasicType<int>(a2, a3);
  if ((a3 & 1) == 0) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
  }
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 104))(a1, a2, a3, a4);
}

void sub_DFAC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(uint64_t a1, unsigned int *a2, float a3, uint64_t a4, uint64_t a5, const char *a6)
{
  if (a3 <= 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "LimitL2NormGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-component.cc", 794);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"the L2 Norm clipping value must be greater than 0, you set ", 59);
    std::ostream::operator<<();
    goto LABEL_11;
  }
  if (!a1 || !a2)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "LimitL2NormGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-component.cc", 795);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, "either the gradient or the gradient norm data is not initialized");
LABEL_11:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
  }
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, a1, 111, a5, a6);
  kaldi::CuMatrixBase<float>::ApplyPow((uint64_t)a2, v9, v10, v11, v12, 2.0);
  float v17 = sqrtf(kaldi::CuMatrixBase<float>::Sum((uint64_t)a2, v13, v14, v15, v16));
  if (v17 > a3)
  {
    float v18 = a3 / v17;
    kaldi::CuMatrixBase<float>::Scale(a1, v18);
  }
}

void kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  if (a6 <= 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11, "LimitL2NormGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-component.cc", 809);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"the L2 Norm clipping value must be greater than 0, you set ", 59);
    std::ostream::operator<<();
    goto LABEL_11;
  }
  if (!a1 || !a2)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11, "LimitL2NormGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-component.cc", 810);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "either the gradient or the gradient norm data is not initialized");
LABEL_11:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  kaldi::CuVectorBase<float>::CopyFromVec(a2, a1, a3, a4, a5);
  kaldi::CuVectorBase<float>::ApplyPow((uint64_t)a2, 2.0);
  float v9 = sqrtf(COERCE_FLOAT(COERCE_UNSIGNED_INT64(kaldi::CuVectorBase<float>::Sum((uint64_t)a2))));
  if (v9 > a6)
  {
    float v10 = a6 / v9;
    kaldi::CuVectorBase<float>::Scale(a1, v10);
  }
}

uint64_t kaldi::nnet1::UpdatableComponent::ClipGradient(uint64_t a1, float a2)
{
  if (a2 <= 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5, "ClipGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-component.cc", 822);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"the gradient clipping value must be greater than 0, you set ", 60);
    std::ostream::operator<<();
    goto LABEL_8;
  }
  if (!a1)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5, "ClipGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-component.cc", 823);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "the gradient data is not initialized");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  kaldi::CuMatrixBase<float>::ApplyCeiling(a1, a2);

  return kaldi::CuMatrixBase<float>::ApplyFloor(a1, -a2);
}

{
  void v5[34];
  uint64_t vars8;

  if (a2 <= 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5, "ClipGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-component.cc", 829);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"the gradient clipping value must be greater than 0, you set ", 60);
    std::ostream::operator<<();
    goto LABEL_8;
  }
  if (!a1)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5, "ClipGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-component.cc", 830);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "the gradient data is not initialized");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  kaldi::CuVectorBase<float>::ApplyCeiling(a1, a2);

  return kaldi::CuVectorBase<float>::ApplyFloor(a1, -a2);
}

void kaldi::nnet1::UpdatableComponent::RmspropGradient(uint64_t a1, uint64_t a2, float a3)
{
  if (a3 < 0.0 || a3 > 1.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "RmspropGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-component.cc", 838);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"the factor in RMSPROP must be [0, 1], you set ", 46);
    std::ostream::operator<<();
    goto LABEL_12;
  }
  if (!a1 || !a2)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "RmspropGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-component.cc", 839);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "either the gradient or the gradient norm data is not initialized");
LABEL_12:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  kaldi::CuMatrixBase<float>::AddMatEwpMat(a2, a1, 111, a1, &stru_68.sectname[7], 1.0 - a3, a3);
  kaldi::CuMatrixBase<float>::ApplyPow(a2, v6, v7, v8, v9, 0.5);
  kaldi::CuMatrixBase<float>::DivElements(a1, a2, v10, v11, v12);

  kaldi::CuMatrixBase<float>::ApplyPow(a2, v13, v14, v15, v16, 2.0);
}

void kaldi::nnet1::UpdatableComponent::RmspropGradient(uint64_t a1, uint64_t a2, float a3, uint64_t a4, uint64_t a5, const char *a6)
{
  if (a3 < 0.0 || a3 > 1.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12, "RmspropGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-component.cc", 849);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"the factor in RMSPROP must be [0, 1], you set ", 46);
    std::ostream::operator<<();
    goto LABEL_12;
  }
  if (!a1 || !a2)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12, "RmspropGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-component.cc", 850);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "either the gradient or the gradient norm data is not initialized");
LABEL_12:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  kaldi::CuVectorBase<float>::AddVecVec(a2, a1, a1, a5, a6, 1.0 - a3, a3);
  kaldi::CuVectorBase<float>::ApplyPow(a2, 0.5);
  kaldi::CuVectorBase<float>::DivElements(a1, a2, v9, v10, v11);

  kaldi::CuVectorBase<float>::ApplyPow(a2, 2.0);
}

uint64_t kaldi::nnet1::Quantizable8BitComponentItf::CopyQuantized(kaldi::nnet1::Quantizable8BitComponentItf *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 16))();
}

uint64_t kaldi::nnet1::Quantizable16BitComponentItf::CopyQuantized(kaldi::nnet1::Quantizable16BitComponentItf *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 16))();
}

void kaldi::nnet1::Component::~Component(kaldi::nnet1::Component *this)
{
  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

void kaldi::nnet1::MaxPooling2DComponent::~MaxPooling2DComponent(kaldi::nnet1::MaxPooling2DComponent *this)
{
  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }

  operator delete();
}

void kaldi::nnet1::AddShift::~AddShift(kaldi::nnet1::AddShift *this)
{
  *(void *)this = off_264C88;
  int v2 = (void *)*((void *)this + 23);
  if (v2)
  {
    *((void *)this + ++*(void *)(result + 24) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)((char *)this + 144);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 120);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  kaldi::CuVector<float>::~CuVector((void *)this + 11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);
}

{
  uint64_t vars8;

  kaldi::nnet1::AddShift::~AddShift(this);

  operator delete();
}

void kaldi::nnet1::UpdatableComponent::~UpdatableComponent(kaldi::nnet1::UpdatableComponent *this)
{
  *(void *)this = off_266498;
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::UpdatableComponent *)((char *)this + 48));
  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

void kaldi::nnet1::AveragePooling2DComponent::~AveragePooling2DComponent(kaldi::nnet1::AveragePooling2DComponent *this)
{
  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }

  operator delete();
}

void kaldi::nnet1::AveragePoolingComponent::~AveragePoolingComponent(kaldi::nnet1::AveragePoolingComponent *this)
{
  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }

  operator delete();
}

void kaldi::nnet1::BlockSoftmax::~BlockSoftmax(kaldi::nnet1::BlockSoftmax *this)
{
  *(void *)this = off_264DB0;
  int v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 6);
  if (v3)
  {
    *((void *)this + 7) = v3;
    operator delete(v3);
  }
  *(void *)this = off_264E70;
  uint64_t v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 4) = v4;
    operator delete(v4);
  }
}

{
  uint64_t vars8;

  kaldi::nnet1::BlockSoftmax::~BlockSoftmax(this);

  operator delete();
}

void kaldi::nnet1::CompressedWordVecComponent::~CompressedWordVecComponent(kaldi::nnet1::CompressedWordVecComponent *this)
{
  *(void *)this = off_264F30;
  kaldi::CompressedMatrix::Destroy((kaldi::nnet1::CompressedWordVecComponent *)((char *)this + 48));
  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  kaldi::nnet1::CompressedWordVecComponent::~CompressedWordVecComponent(this);

  operator delete();
}

void kaldi::nnet1::ConvolutionalComponent::~ConvolutionalComponent(kaldi::nnet1::ConvolutionalComponent *this)
{
  *(void *)this = off_264FF0;
  int v2 = (void *)*((void *)this + 44);
  if (v2)
  {
    *((void *)this + 45) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)((char *)this + 328);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 304);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 264);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 240);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 216);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 192);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  kaldi::CuVector<float>::~CuVector((void *)this + 19);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 104);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);
}

{
  uint64_t vars8;

  kaldi::nnet1::ConvolutionalComponent::~ConvolutionalComponent(this);

  operator delete();
}

void kaldi::nnet1::CopyComponent::~CopyComponent(kaldi::nnet1::CopyComponent *this)
{
  *(void *)this = off_265118;
  int v2 = (void *)((char *)this + 48);
  uint64_t v3 = (void *)*((void *)this + 7);
  if (v3) {
    free(v3);
  }
  void *v2 = 0;
  v2[1] = 0;
  unsigned char v2[2] = 0;
  *(void *)this = off_264E70;
  uint64_t v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 4) = v4;
    operator delete(v4);
  }
}

{
  uint64_t vars8;

  kaldi::nnet1::CopyComponent::~CopyComponent(this);

  operator delete();
}

void kaldi::nnet1::Desplice::~Desplice(kaldi::nnet1::Desplice *this)
{
  *(void *)this = off_2651D8;
  int v2 = (void *)((char *)this + 136);
  uint64_t v3 = (void *)*((void *)this + 18);
  if (v3) {
    free(v3);
  }
  void *v2 = 0;
  v2[1] = 0;
  unsigned char v2[2] = 0;
  uint64_t v4 = (void *)*((void *)this + 15);
  if (v4) {
    free(v4);
  }
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  uint64_t v5 = (void *)*((void *)this + 12);
  if (v5) {
    free(v5);
  }
  *((void *)this + 11) = 0;
  *((void *)this + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((void *)this + 13) = 0;
  uint64_t v6 = (void *)*((void *)this + 9);
  if (v6) {
    free(v6);
  }
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *(void *)this = off_264E70;
  uint64_t v7 = (void *)*((void *)this + 3);
  if (v7)
  {
    *((void *)this + 4) = v7;
    operator delete(v7);
  }
}

{
  uint64_t vars8;

  kaldi::nnet1::Desplice::~Desplice(this);

  operator delete();
}

void kaldi::nnet1::Dropout::~Dropout(kaldi::nnet1::Dropout *this)
{
  *(void *)this = off_265298;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 144);
  kaldi::CuRand<float>::~CuRand((uint64_t)this + 48);
  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  kaldi::nnet1::Dropout::~Dropout(this);

  operator delete();
}

void kaldi::nnet1::DuplicateComponent::~DuplicateComponent(kaldi::nnet1::DuplicateComponent *this)
{
  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }

  operator delete();
}

void kaldi::nnet1::FofeWordVecComponent::~FofeWordVecComponent(kaldi::nnet1::FofeWordVecComponent *this)
{
  *(void *)this = off_265358;
  *((void *)this + 11) = off_265488;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 440);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 392);

  kaldi::nnet1::WordVecComponent::~WordVecComponent(this);
}

{
  uint64_t vars8;

  kaldi::nnet1::FofeWordVecComponent::~FofeWordVecComponent(this);

  operator delete();
}

void kaldi::nnet1::WordVecComponent::~WordVecComponent(kaldi::nnet1::WordVecComponent *this)
{
  *(void *)this = off_2665C0;
  *((void *)this + 11) = off_2666F0;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)this + 39);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 264);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 192);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 144);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 96);

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);
}

{
  uint64_t vars8;

  kaldi::nnet1::WordVecComponent::~WordVecComponent(this);

  operator delete();
}

void non-virtual thunk to'kaldi::nnet1::FofeWordVecComponent::~FofeWordVecComponent(kaldi::nnet1::FofeWordVecComponent *this)
{
}

{
  uint64_t vars8;

  kaldi::nnet1::FofeWordVecComponent::~FofeWordVecComponent((kaldi::nnet1::FofeWordVecComponent *)((char *)this - 88));

  operator delete();
}

void kaldi::nnet1::FramePoolingComponent::~FramePoolingComponent(kaldi::nnet1::FramePoolingComponent *this)
{
  *(void *)this = off_2654B0;
  uint64_t v3 = (void **)((char *)this + 144);
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 120);
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  int v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    *((void *)this + 13) = v2;
    operator delete(v2);
  }
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);
}

{
  uint64_t vars8;

  kaldi::nnet1::FramePoolingComponent::~FramePoolingComponent(this);

  operator delete();
}

void kaldi::nnet1::HistoricalComponent::~HistoricalComponent(kaldi::nnet1::HistoricalComponent *this)
{
  *(void *)this = off_2655D8;
  uint64_t v1 = (void **)((char *)this + 8);
  kaldi::nnet1::HistoryOptions::~HistoryOptions((kaldi::nnet1::HistoricalComponent *)((char *)this + 32));
  int v2 = v1;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void kaldi::nnet1::IdentityComponent::~IdentityComponent(kaldi::nnet1::IdentityComponent *this)
{
  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }

  operator delete();
}

void kaldi::nnet1::InterpolationComponent::~InterpolationComponent(kaldi::nnet1::InterpolationComponent *this)
{
  *(void *)this = off_265648;
  int v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  *(void *)this = off_264E70;
  uint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
}

{
  uint64_t vars8;

  kaldi::nnet1::InterpolationComponent::~InterpolationComponent(this);

  operator delete();
}

void kaldi::nnet1::KlHmm::~KlHmm(kaldi::nnet1::KlHmm *this)
{
  *(void *)this = off_265710;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 88);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 48);
  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  kaldi::nnet1::KlHmm::~KlHmm(this);

  operator delete();
}

void kaldi::nnet1::LogSoftmax::~LogSoftmax(kaldi::nnet1::LogSoftmax *this)
{
  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }

  operator delete();
}

void kaldi::nnet1::MaxoutComponent::~MaxoutComponent(kaldi::nnet1::MaxoutComponent *this)
{
  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }

  operator delete();
}

void kaldi::nnet1::MaxPoolingComponent::~MaxPoolingComponent(kaldi::nnet1::MaxPoolingComponent *this)
{
  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }

  operator delete();
}

void kaldi::nnet1::MultiSoftmax::~MultiSoftmax(kaldi::nnet1::MultiSoftmax *this)
{
  kaldi::nnet1::BlockSoftmax::~BlockSoftmax(this);

  operator delete();
}

void kaldi::nnet1::ParallelComponent::~ParallelComponent(kaldi::nnet1::ParallelComponent *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[3];
  *((void *)this + 20) = off_265930;
  *((void *)this + 21) = off_265958;
  uint64_t v5 = (void **)((char *)this + 184);
  std::vector<kaldi::nnet1::Nnet>::__destroy_vector::operator()[abi:ne180100](&v5);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(this, a2 + 1);
}

void kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(kaldi::nnet1::RecurrentBaseComponent *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 24)) = a2[1];
  uint64_t v4 = (void **)((char *)this + 128);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)((char *)this + 104);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  kaldi::nnet1::RecurrentNnetTrainOptions::~RecurrentNnetTrainOptions((kaldi::nnet1::RecurrentBaseComponent *)((char *)this + 48));
  *(void *)this = off_2655D8;
  kaldi::nnet1::HistoryOptions::~HistoryOptions((kaldi::nnet1::RecurrentBaseComponent *)((char *)this + 32));
  uint64_t v4 = (void **)((char *)this + 8);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void kaldi::nnet1::ParallelComponent::~ParallelComponent(kaldi::nnet1::ParallelComponent *this)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 208));
}

{
  uint64_t v1;
  uint64_t vars8;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 208));

  operator delete();
}

void non-virtual thunk to'kaldi::nnet1::ParallelComponent::~ParallelComponent(kaldi::nnet1::ParallelComponent *this)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::ParallelComponent *)((char *)this + 48));
}

{
  uint64_t vars8;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::ParallelComponent *)((char *)this + 40));
}

{
  kaldi::nnet1::ParallelComponent::~ParallelComponent((kaldi::nnet1::ParallelComponent *)((char *)this - 160));
}

{
  kaldi::nnet1::ParallelComponent::~ParallelComponent((kaldi::nnet1::ParallelComponent *)((char *)this - 168));
}

void virtual thunk to'kaldi::nnet1::ParallelComponent::~ParallelComponent(kaldi::nnet1::ParallelComponent *this)
{
  int v2 = (kaldi::nnet1::UpdatableComponent *)(v1 + 208);

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
}

{
  kaldi::nnet1::ParallelComponent::~ParallelComponent((kaldi::nnet1::ParallelComponent *)((char *)this
                                                                                        + *(void *)(*(void *)this - 24)));
}

void kaldi::nnet1::PNormComponent::~PNormComponent(kaldi::nnet1::PNormComponent *this)
{
  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }

  operator delete();
}

void kaldi::nnet1::Rbm::~Rbm(kaldi::nnet1::Rbm *this)
{
  *(void *)this = off_265BD8;
  kaldi::CuVector<float>::~CuVector((void *)this + 33);
  kaldi::CuVector<float>::~CuVector((void *)this + 29);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 184);
  kaldi::CuVector<float>::~CuVector((void *)this + 19);
  kaldi::CuVector<float>::~CuVector((void *)this + 15);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 72);
  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  kaldi::nnet1::Rbm::~Rbm(this);

  operator delete();
}

void kaldi::nnet1::RectifiedLinearComponent::~RectifiedLinearComponent(kaldi::nnet1::RectifiedLinearComponent *this)
{
  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }

  operator delete();
}

void kaldi::nnet1::ExponentialLinearComponent::~ExponentialLinearComponent(kaldi::nnet1::ExponentialLinearComponent *this)
{
  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }

  operator delete();
}

void kaldi::nnet1::ScaledExponentialLinearComponent::~ScaledExponentialLinearComponent(kaldi::nnet1::ScaledExponentialLinearComponent *this)
{
  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }

  operator delete();
}

void kaldi::nnet1::Recurrent::~Recurrent(kaldi::nnet1::Recurrent *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[3];
  uint64_t v6 = (void **)((char *)this + 504);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 480);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 432);
  uint64_t v5 = (void *)*((void *)this + 51);
  if (v5)
  {
    *((void *)this + 5std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void **)((char *)this + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 312);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 288);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 264);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 240);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  kaldi::CuVector<float>::~CuVector((void *)this + 26);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 160);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(this, a2 + 1);
}

void kaldi::nnet1::Recurrent::~Recurrent(kaldi::nnet1::Recurrent *this)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 528));
}

{
  uint64_t v1;
  uint64_t vars8;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 528));

  operator delete();
}

void virtual thunk to'kaldi::nnet1::Recurrent::~Recurrent(kaldi::nnet1::Recurrent *this)
{
  int v2 = (kaldi::nnet1::UpdatableComponent *)(v1 + 528);

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
}

{
  kaldi::nnet1::Recurrent::~Recurrent((kaldi::nnet1::Recurrent *)((char *)this + *(void *)(*(void *)this - 24)));
}

void kaldi::nnet1::RecurrentAttentionBaseComponent::~RecurrentAttentionBaseComponent(kaldi::nnet1::RecurrentAttentionBaseComponent *this, uint64_t a2)
{
}

void kaldi::nnet1::RelaxedSoftmax::~RelaxedSoftmax(kaldi::nnet1::RelaxedSoftmax *this)
{
  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }

  operator delete();
}

void kaldi::nnet1::Rescale::~Rescale(kaldi::nnet1::Rescale *this)
{
  *(void *)this = off_266060;
  int v2 = (void *)*((void *)this + 29);
  if (v2)
  {
    *((void *)this + 30) = v2;
    operator delete(v2);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 168);
  uint64_t v3 = (void **)((char *)this + 144);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 120);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  kaldi::CuVector<float>::~CuVector((void *)this + 11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);
}

{
  uint64_t vars8;

  kaldi::nnet1::Rescale::~Rescale(this);

  operator delete();
}

void kaldi::nnet1::SentenceAveragingComponent::~SentenceAveragingComponent(kaldi::nnet1::SentenceAveragingComponent *this)
{
  *(void *)this = off_266188;
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 88));

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);
}

{
  uint64_t vars8;

  *(void *)this = off_266188;
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 88));
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);

  operator delete();
}

void kaldi::nnet1::SharedNceComponent::~SharedNceComponent(kaldi::nnet1::SharedNceComponent *this)
{
  *(void *)this = off_2662B0;
  int v2 = (char *)this + 88;
  kaldi::CuVector<float>::~CuVector((void *)this + 47);
  kaldi::CuVector<float>::~CuVector((void *)this + 43);
  kaldi::CuVector<float>::~CuVector((void *)this + 39);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 264);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 216);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 168);
  kaldi::CuVector<float>::~CuVector((void *)this + 17);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v2);

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);
}

{
  uint64_t vars8;

  kaldi::nnet1::SharedNceComponent::~SharedNceComponent(this);

  operator delete();
}

void kaldi::nnet1::Sigmoid::~Sigmoid(kaldi::nnet1::Sigmoid *this)
{
  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }

  operator delete();
}

void kaldi::nnet1::Softmax::~Softmax(kaldi::nnet1::Softmax *this)
{
  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }

  operator delete();
}

void kaldi::nnet1::Splice::~Splice(kaldi::nnet1::Splice *this)
{
  *(void *)this = off_2663D8;
  int v2 = (void *)((char *)this + 48);
  uint64_t v3 = (void *)*((void *)this + 7);
  if (v3) {
    free(v3);
  }
  void *v2 = 0;
  v2[1] = 0;
  unsigned char v2[2] = 0;
  *(void *)this = off_264E70;
  uint64_t v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 4) = v4;
    operator delete(v4);
  }
}

{
  uint64_t vars8;

  kaldi::nnet1::Splice::~Splice(this);

  operator delete();
}

void kaldi::nnet1::Tanh::~Tanh(kaldi::nnet1::Tanh *this)
{
  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }

  operator delete();
}

void kaldi::nnet1::TemporalMaxPoolingComponent::~TemporalMaxPoolingComponent(kaldi::nnet1::TemporalMaxPoolingComponent *this)
{
  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }

  operator delete();
}

void non-virtual thunk to'kaldi::nnet1::WordVecComponent::~WordVecComponent(kaldi::nnet1::WordVecComponent *this)
{
}

{
  uint64_t vars8;

  kaldi::nnet1::WordVecComponent::~WordVecComponent((kaldi::nnet1::WordVecComponent *)((char *)this - 88));

  operator delete();
}

void kaldi::nnet1::CompressedWordTransComponent::~CompressedWordTransComponent(kaldi::nnet1::CompressedWordTransComponent *this)
{
  *(void *)this = off_266718;
  kaldi::CompressedMatrix::Destroy((kaldi::nnet1::CompressedWordTransComponent *)((char *)this + 80));
  kaldi::CuVector<float>::~CuVector((void *)this + 6);
  *(void *)this = off_264E70;
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  kaldi::nnet1::CompressedWordTransComponent::~CompressedWordTransComponent(this);

  operator delete();
}

uint64_t kaldi::nnet1::AttentionBaseComponent::SetSourceVectorDimension(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8) = a2;
  return this;
}

uint64_t kaldi::nnet1::AttentionBaseComponent::SetMaxAttentions(uint64_t this, int a2)
{
  *(_DWORD *)(this + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
  return this;
}

void kaldi::nnet1::RelaxedSoftmax::Copy(kaldi::nnet1::RelaxedSoftmax *this)
{
}

void sub_E2568()
{
}

uint64_t kaldi::nnet1::RelaxedSoftmax::GetType(kaldi::nnet1::RelaxedSoftmax *this)
{
  return 523;
}

float kaldi::nnet1::RelaxedSoftmax::InitData(uint64_t a1, uint64_t *a2)
{
  kaldi::ExpectToken(a2, 0, (kaldi *)"<RelaxFactor>");
  kaldi::ReadBasicType<float>(a2, 0, (float *)(a1 + 48), v4, v5);
  float result = *(float *)(a1 + 48);
  if (result <= 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-activation.h", 98);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Relaxation factor must be positive; found: ",
      43);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  return result;
}

void *kaldi::nnet1::RelaxedSoftmax::WriteData(int a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  int v5 = (int)a3;
  kaldi::WriteToken(a2, a3, (kaldi *)"<RelaxFactor>", a4, a5);

  return kaldi::WriteBasicType<float>((uint64_t)a2, v5);
}

uint64_t kaldi::nnet1::RelaxedSoftmax::PropagateFnc(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, const char *a5)
{
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)a3, a2, 111, a4, a5, *(float *)(a1 + 48), 0.0);

  return kaldi::CuMatrixBase<float>::ApplySoftMaxPerRow(a3, (uint64_t)a3, v6, v7, v8);
}

float kaldi::nnet1::RelaxedSoftmax::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::CuVectorBase<float>::AddVec(a3, a2, a3, a4, a5, *(float *)(a1 + 48), 0.0);

  return kaldi::CuVectorBase<float>::ApplySoftMax(a3);
}

void kaldi::nnet1::RelaxedSoftmax::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
}

float kaldi::nnet1::RelaxedSoftmax::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  kaldi::ExpectToken(a2, a3, (kaldi *)"<RelaxFactor>");
  kaldi::ReadBasicType<float>(a2, a3, (float *)(a1 + 48), v6, v7);
  float result = *(float *)(a1 + 48);
  if (result <= 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-activation.h", 105);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Relaxation factor must be positive; found: ",
      43);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  return result;
}

void kaldi::nnet1::LogSoftmax::Copy(kaldi::nnet1::LogSoftmax *this)
{
}

void sub_E28B4()
{
}

uint64_t kaldi::nnet1::LogSoftmax::GetType(kaldi::nnet1::LogSoftmax *this)
{
  return 514;
}

void kaldi::nnet1::LogSoftmax::PropagateFnc(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, const char *a5)
{
  kaldi::CuMatrixBase<float>::ApplySoftMaxPerRow(a3, a2, (uint64_t)a3, a4, a5);
  kaldi::CuMatrixBase<float>::ApplyFloor((uint64_t)a3, 1.0e-20);

  kaldi::CuMatrixBase<float>::ApplyLog((uint64_t)a3, v6, v7, v8, v9);
}

void kaldi::nnet1::LogSoftmax::PropagateFnc(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, const char *a5)
{
  kaldi::CuVectorBase<float>::CopyFromVec(a3, a2, (uint64_t)a3, a4, a5);
  kaldi::CuVectorBase<float>::ApplySoftMax((uint64_t)a3);
  kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)a3, 1.0e-20);

  kaldi::CuVectorBase<float>::ApplyLog((uint64_t)a3);
}

unsigned int *kaldi::nnet1::LogSoftmax::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a5, a4, 111, a4, (const char *)a5);
}

void kaldi::nnet1::Softmax::Copy(kaldi::nnet1::Softmax *this)
{
}

void sub_E2A2C()
{
}

uint64_t kaldi::nnet1::Softmax::GetType(kaldi::nnet1::Softmax *this)
{
  return 513;
}

uint64_t kaldi::nnet1::Softmax::PropagateFnc(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, const char *a5)
{
  return kaldi::CuMatrixBase<float>::ApplySoftMaxPerRow(a3, a2, (uint64_t)a3, a4, a5);
}

float kaldi::nnet1::Softmax::PropagateFnc(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, const char *a5)
{
  kaldi::CuVectorBase<float>::CopyFromVec(a3, a2, (uint64_t)a3, a4, a5);

  return kaldi::CuVectorBase<float>::ApplySoftMax((uint64_t)a3);
}

void kaldi::nnet1::BlockSoftmax::Copy(kaldi::nnet1::BlockSoftmax *this)
{
}

void sub_E2AE4()
{
}

uint64_t kaldi::nnet1::BlockSoftmax::GetType(kaldi::nnet1::BlockSoftmax *this)
{
  return 515;
}

void kaldi::nnet1::BlockSoftmax::InitData(std::vector<int> *this, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  long long v21 = 0uLL;
  uint64_t v22 = 0;
  uint64_t v7 = a2 + 4;
  uint64_t v8 = this + 2;
  while (1)
  {
    if ((*((unsigned char *)v7 + *(void *)(*a2 - 24)) & 2) != 0) {
      goto LABEL_26;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)&v21, a4, a5);
    if ((SHIBYTE(v22) & 0x80000000) == 0) {
      break;
    }
    if (*((void *)&v21 + 1) != 11
      || (*(void *)v21 == 0x69446B636F6C423CLL ? (BOOL v10 = *(void *)(v21 + 3) == 0x3E736D69446B636FLL) : (BOOL v10 = 0), !v10))
    {
      if (*((void *)&v21 + 1) == 12)
      {
        uint64_t v11 = (long long *)v21;
        goto LABEL_21;
      }
LABEL_29:
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-activation.h", 210);
      uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Unknown token ", 14);
      if (v22 >= 0) {
        uint64_t v16 = &v21;
      }
      else {
        uint64_t v16 = (long long *)v21;
      }
      if (v22 >= 0) {
        uint64_t v17 = HIBYTE(v22);
      }
      else {
        uint64_t v17 = *((void *)&v21 + 1);
      }
      float v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
      uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", a typo in config?", 19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" (BlockDims)", 12);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
    }
LABEL_16:
    kaldi::ReadIntegerVector<int>(a2, 0, v8, 0, 0, 0, 0);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  if (HIBYTE(v22) == 11)
  {
    if ((void)v21 != 0x69446B636F6C423CLL || *(void *)((char *)&v21 + 3) != 0x3E736D69446B636FLL) {
      goto LABEL_29;
    }
    goto LABEL_16;
  }
  if (HIBYTE(v22) != 12) {
    goto LABEL_29;
  }
  uint64_t v11 = &v21;
LABEL_21:
  uint64_t v12 = *(void *)v11;
  int v13 = *((_DWORD *)v11 + 2);
  if (v12 != 0x6E6F706D6F432F3CLL || v13 != 1047817829) {
    goto LABEL_29;
  }
LABEL_26:
  kaldi::nnet1::BlockSoftmax::InitOffset(this);
  if (SHIBYTE(v22) < 0) {
    operator delete((void *)v21);
  }
}

void sub_E2D1C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 65) < 0) {
    operator delete(*(void **)(v1 - 88));
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::BlockSoftmax::WriteData(uint64_t a1, void *a2, int a3)
{
  return kaldi::WriteIntegerByteArray<int>(a2, a3, 0, (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 2, *(void *)(a1 + 48));
}

uint64_t kaldi::nnet1::BlockSoftmax::PropagateFnc(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 48);
  if (*(void *)(result + 56) != v3)
  {
    uint64_t v6 = (void *)result;
    unint64_t v7 = 0;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v14, a2, 0, *(_DWORD *)(a2 + 20), (const char *)*(unsigned int *)(v6[9] + 4 * v7), *(_DWORD *)(v3 + 4 * v7));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v11, a3, 0, *(_DWORD *)(a3 + 20), (const char *)*(unsigned int *)(v6[9] + 4 * v7), *(_DWORD *)(v6[6] + 4 * v7));
      kaldi::CuMatrixBase<float>::ApplySoftMaxPerRow((unsigned int *)&v11, (uint64_t)&v14, v8, v9, v10);
      uint64_t v11 = off_262D80;
      long long v12 = 0u;
      long long v13 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v11);
      uint64_t v14 = off_262D80;
      long long v15 = 0u;
      long long v16 = 0u;
      float result = fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v14);
      ++v7;
      uint64_t v3 = v6[6];
    }
    while (v7 < (v6[7] - v3) >> 2);
  }
  return result;
}

void sub_E2E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (**a9)(), uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void (**a14)())
{
  a9 = off_262D80;
  _OWORD *v15 = 0u;
  v15[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a9);
  a14 = off_262D80;
  *uint64_t v14 = 0u;
  v14[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a14);
  _Unwind_Resume(a1);
}

unsigned int *kaldi::nnet1::BlockSoftmax::BackpropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float result = kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)a5, a4, 111, a4, (const char *)a5);
  uint64_t v8 = a1[6];
  if (a1[7] != v8)
  {
    unint64_t v9 = 0;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v23, a5, 0, *(_DWORD *)(a5 + 20), (const char *)*(unsigned int *)(a1[9] + 4 * v9), *(_DWORD *)(v8 + 4 * v9));
      memset(&v22[1], 0, 24);
      v22[0] = off_262E60;
      kaldi::CuVector<float>::Resize((uint64_t)v22, HIDWORD(v24), 0, v10, v11);
      kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)v22, &v23, 1.0, 0.0, v12, v13, v14);
      kaldi::CuVector<float>::CuVector((uint64_t)v21, (uint64_t)v22, v15, v16, v17);
      kaldi::CuVectorBase<float>::Scale((uint64_t)v21, -1.0);
      kaldi::CuVectorBase<float>::Add((uint64_t)v21, 1.0);
      kaldi::CuMatrixBase<float>::MulRowsVec((uint64_t)&v23, (uint64_t)v21, v18, v19, v20);
      kaldi::CuVector<float>::~CuVector(v21);
      kaldi::CuVector<float>::~CuVector(v22);
      uint64_t v23 = off_262D80;
      long long v24 = 0u;
      long long v25 = 0u;
      float result = (unsigned int *)fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v23);
      ++v9;
      uint64_t v8 = a1[6];
    }
    while (v9 < (a1[7] - v8) >> 2);
  }
  return result;
}

void sub_E304C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void (**a18)())
{
  kaldi::CuVector<float>::~CuVector(&a14);
  a18 = off_262D80;
  _OWORD *v18 = 0u;
  v18[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a18);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::BlockSoftmax::ReadData(std::vector<int> *a1, void *a2, int a3)
{
  kaldi::ReadIntegerVector<int>(a2, a3, a1 + 2, 0, 0, 0, 0);

  kaldi::nnet1::BlockSoftmax::InitOffset(a1);
}

void kaldi::nnet1::Sigmoid::Copy(kaldi::nnet1::Sigmoid *this)
{
}

void sub_E31A0()
{
}

uint64_t kaldi::nnet1::Sigmoid::GetType(kaldi::nnet1::Sigmoid *this)
{
  return 516;
}

void kaldi::nnet1::Sigmoid::PropagateFnc(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4, const char *a5)
{
}

void kaldi::nnet1::Sigmoid::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
}

uint64_t *kaldi::nnet1::Sigmoid::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)a5, a3, a4, a4, a5);
}

void kaldi::nnet1::Tanh::Copy(kaldi::nnet1::Tanh *this)
{
}

void sub_E3288()
{
}

uint64_t kaldi::nnet1::Tanh::GetType(kaldi::nnet1::Tanh *this)
{
  return 517;
}

void kaldi::nnet1::Tanh::PropagateFnc(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4, const char *a5)
{
}

void kaldi::nnet1::Tanh::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
}

uint64_t *kaldi::nnet1::Tanh::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::CuMatrixBase<float>::DiffTanh((uint64_t)a5, a3, a4, a4, a5);
}

void kaldi::nnet1::Dropout::Copy(kaldi::nnet1::Dropout *this)
{
}

void sub_E33C0()
{
  kaldi::CuRand<float>::~CuRand(v2);
  *uint64_t v0 = v1;
  uint64_t v3 = (void *)v0[3];
  if (v3)
  {
    v0[4] = v3;
    operator delete(v3);
  }
  operator delete();
}

uint64_t kaldi::nnet1::Dropout::GetType(kaldi::nnet1::Dropout *this)
{
  return 518;
}

void kaldi::nnet1::Dropout::InitData(uint64_t a1, void *a2)
{
  std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v6 = (float *)(a1 + 192);
  uint64_t v25 = 0;
  while (1)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_32;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)&v23, v4, v5);
    if ((SHIBYTE(v25) & 0x80000000) == 0) {
      break;
    }
    if (v24 != 18
      || (*v23 == 0x74756F706F72443CLL ? (BOOL v10 = v23[1] == 0x6F69746E65746552) : (BOOL v10 = 0),
          v10 ? (BOOL v11 = *((unsigned __int16 *)v23 + 8) == 15982) : (BOOL v11 = 0),
          !v11))
    {
      if (v24 == 12)
      {
        uint64_t v12 = (void **)v23;
        goto LABEL_27;
      }
LABEL_39:
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-activation.h", 358);
      uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Unknown token ", 14);
      if (v25 >= 0) {
        uint64_t v18 = &v23;
      }
      else {
        uint64_t v18 = (void **)v23;
      }
      if (v25 >= 0) {
        uint64_t v19 = HIBYTE(v25);
      }
      else {
        uint64_t v19 = v24;
      }
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
      long long v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", a typo in config?", 19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" (DropoutRetention)", 19);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
    }
LABEL_22:
    kaldi::ReadBasicType<float>(a2, 0, v6, v7, v5);
  }
  if (HIBYTE(v25) == 18)
  {
    if (v23 != (void *)0x74756F706F72443CLL || v24 != 0x6F69746E65746552 || (unsigned __int16)v25 != 15982) {
      goto LABEL_39;
    }
    goto LABEL_22;
  }
  if (HIBYTE(v25) != 12) {
    goto LABEL_39;
  }
  uint64_t v12 = &v23;
LABEL_27:
  uint64_t v13 = (uint64_t)*v12;
  int v14 = *((_DWORD *)v12 + 2);
  if (v13 != 0x6E6F706D6F432F3CLL || v14 != 1047817829) {
    goto LABEL_39;
  }
LABEL_32:
  if (*v6 <= 0.0 || *v6 > 1.0) {
    kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-activation.h", &stru_158.segname[1], "dropout_retention_ > 0.0 && dropout_retention_ <= 1.0", v5);
  }
  if (SHIBYTE(v25) < 0) {
    operator delete(v23);
  }
}

void sub_E3650(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 65) < 0) {
    operator delete(*(void **)(v1 - 88));
  }
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::Dropout::WriteData(int a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  int v5 = (int)a3;
  kaldi::WriteToken(a2, a3, (kaldi *)"<DropoutRetention>", a4, a5);

  return kaldi::WriteBasicType<float>((uint64_t)a2, v5);
}

void kaldi::nnet1::Dropout::PropagateFnc(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, const char *a5)
{
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a3, a2, 111, a4, a5);
  kaldi::CuMatrix<float>::Resize(a1 + 144, a3[5], a3[4], 0, 0);
  kaldi::CuMatrixBase<float>::Set(a1 + 144, v7, v8, v9, v10, *(float *)(a1 + 192));
  kaldi::CuRand<float>::BinarizeProbs(a1 + 48, a1 + 144, a1 + 144);
  kaldi::CuMatrixBase<float>::MulElements((uint64_t)a3, a1 + 144, v11, v12, v13);
  float v14 = 1.0 / *(float *)(a1 + 192);

  kaldi::CuMatrixBase<float>::Scale((uint64_t)a3, v14);
}

void kaldi::nnet1::Dropout::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a5, a4, 111, a4, (const char *)a5);
  kaldi::CuMatrixBase<float>::MulElements((uint64_t)a5, a1 + 144, v7, v8, v9);
  float v10 = 1.0 / *(float *)(a1 + 192);

  kaldi::CuMatrixBase<float>::Scale((uint64_t)a5, v10);
}

void kaldi::nnet1::Dropout::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  if (kaldi::Peek(a2, a3) == 60)
  {
    kaldi::ExpectToken(a2, a3, (kaldi *)"<DropoutRetention>");
    kaldi::ReadBasicType<float>(a2, a3, (float *)(a1 + 192), v7, v8);
  }
  float v9 = *(float *)(a1 + 192);
  if (v9 <= 0.0 || v9 > 1.0) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-activation.h", &stru_158.segname[9], "dropout_retention_ > 0.0 && dropout_retention_ <= 1.0", v6);
  }
}

void kaldi::nnet1::MaxoutComponent::Copy(kaldi::nnet1::MaxoutComponent *this)
{
}

uint64_t kaldi::nnet1::MaxoutComponent::GetType(kaldi::nnet1::MaxoutComponent *this)
{
  return 519;
}

_DWORD *kaldi::nnet1::MaxoutComponent::PropagateFnc(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, const char *a5)
{
  return kaldi::CuMatrixBase<float>::MaxoutForward(a3, a2, (uint64_t)a3, a4, a5);
}

void kaldi::nnet1::MaxoutComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::CuMatrixBase<float>::MaxoutDerivative((uint64_t)a5, a2, a3, a4, a5);

  kaldi::CuMatrixBase<float>::MulRowsGroupMat((uint64_t)a5, a4, v7, v8, v9);
}

void kaldi::nnet1::PNormComponent::Copy(kaldi::nnet1::PNormComponent *this)
{
}

uint64_t kaldi::nnet1::PNormComponent::GetType(kaldi::nnet1::PNormComponent *this)
{
  return 521;
}

void kaldi::nnet1::PNormComponent::InitData(uint64_t a1, uint64_t *a2)
{
  kaldi::ExpectToken(a2, 0, (kaldi *)"<P>");
  kaldi::ReadBasicType<float>(a2, 0, (float *)(a1 + 48), v4, v5);
  int v7 = *(_DWORD *)(a1 + 8);
  int v8 = *(_DWORD *)(a1 + 12);
  if (v7 < v8 || v8 <= 0) {
    kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-activation.h", (const char *)&stru_1A8.align + 3, "(input_dim_ >= output_dim_) && (output_dim_ > 0)", v6);
  }
  if (v7 % v8) {
    kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-activation.h", (const char *)&stru_1A8.reloff, "input_dim_ % output_dim_ == 0", v6);
  }
}

void *kaldi::nnet1::PNormComponent::WriteData(int a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  int v5 = (int)a3;
  kaldi::WriteToken(a2, a3, (kaldi *)"<P>", a4, a5);

  return kaldi::WriteBasicType<float>((uint64_t)a2, v5);
}

float *kaldi::nnet1::PNormComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::CuMatrixBase<float>::GroupPnorm(a3, a2, a3, a4, a5, *(float *)(a1 + 48));
}

void kaldi::nnet1::PNormComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::CuMatrixBase<float>::GroupPnormDeriv((uint64_t)a5, a2, a3, a4, a5, *(float *)(a1 + 48));

  kaldi::CuMatrixBase<float>::MulRowsGroupMat((uint64_t)a5, a4, v7, v8, v9);
}

void kaldi::nnet1::PNormComponent::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  kaldi::ExpectToken(a2, a3, (kaldi *)"<P>");
  kaldi::ReadBasicType<float>(a2, a3, (float *)(a1 + 48), v6, v7);
  int v9 = *(_DWORD *)(a1 + 8);
  int v10 = *(_DWORD *)(a1 + 12);
  if (v9 < v10 || v10 <= 0) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-activation.h", (const char *)&stru_1A8.nreloc + 2, "(input_dim_ >= output_dim_) && (output_dim_ > 0)", v8);
  }
  if (v9 % v10) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-activation.h", (const char *)&stru_1A8.nreloc + 3, "input_dim_ % output_dim_ == 0", v8);
  }
}

void kaldi::nnet1::RectifiedLinearComponent::Copy(kaldi::nnet1::RectifiedLinearComponent *this)
{
}

void sub_E3C3C()
{
}

uint64_t kaldi::nnet1::RectifiedLinearComponent::PropagateFnc(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, const char *a5)
{
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a3, a2, 111, a4, a5);

  return kaldi::CuMatrixBase<float>::ApplyFloor((uint64_t)a3, 0.0);
}

uint64_t kaldi::nnet1::RectifiedLinearComponent::PropagateFnc(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, const char *a5)
{
  kaldi::CuVectorBase<float>::CopyFromVec(a3, a2, (uint64_t)a3, a4, a5);

  return kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)a3, 0.0);
}

uint64_t kaldi::nnet1::RectifiedLinearComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::CuMatrixBase<float>::DiffRelu((uint64_t)a5, a3, a4, a4, a5);
}

void kaldi::nnet1::ExponentialLinearComponent::Copy(kaldi::nnet1::ExponentialLinearComponent *this)
{
}

void sub_E3D98()
{
}

uint64_t kaldi::nnet1::ExponentialLinearComponent::GetType(kaldi::nnet1::ExponentialLinearComponent *this)
{
  return 524;
}

float kaldi::nnet1::ExponentialLinearComponent::InitData(uint64_t a1, uint64_t *a2)
{
  kaldi::ExpectToken(a2, 0, (kaldi *)"<Alpha>");

  return kaldi::ReadBasicType<float>(a2, 0, (float *)(a1 + 48), v4, v5);
}

void *kaldi::nnet1::ExponentialLinearComponent::WriteData(int a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  int v5 = (int)a3;
  kaldi::WriteToken(a2, a3, (kaldi *)"<Alpha>", a4, a5);

  return kaldi::WriteBasicType<float>((uint64_t)a2, v5);
}

uint64_t kaldi::nnet1::ExponentialLinearComponent::PropagateFnc(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v17, a3[5], a3[4], 0, 0, 0);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v17, a2, 111, v6, v7);
  kaldi::CuMatrixBase<float>::ApplyCeiling((uint64_t)v17, 0.0);
  kaldi::CuMatrixBase<float>::ApplyExp((uint64_t)v17, v8, v9, v10, v11);
  kaldi::CuMatrixBase<float>::Add((uint64_t)v17, -1.0);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)v17, *(float *)(a1 + 48));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a3, a2, 111, v12, v13);
  kaldi::CuMatrixBase<float>::ApplyFloor((uint64_t)a3, 0.0);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)a3, (uint64_t)v17, 111, v14, v15, 1.0, 1.0);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v17);
}

void sub_E3F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *kaldi::nnet1::ExponentialLinearComponent::PropagateFnc(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, const char *a5)
{
  uint64_t v8 = a3[4];
  v19[0] = off_262E60;
  memset(&v19[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v19, v8, 0, a4, a5);
  kaldi::CuVectorBase<float>::CopyFromVec(v19, a2, v9, v10, v11);
  kaldi::CuVectorBase<float>::ApplyCeiling((uint64_t)v19, 0.0);
  kaldi::CuVectorBase<float>::ApplyExp((uint64_t)v19);
  kaldi::CuVectorBase<float>::Add((uint64_t)v19, -1.0);
  kaldi::CuVectorBase<float>::Scale((uint64_t)v19, *(float *)(a1 + 48));
  kaldi::CuVectorBase<float>::CopyFromVec(a3, a2, v12, v13, v14);
  kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)a3, 0.0);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)a3, (uint64_t)v19, v15, v16, v17, 1.0, 1.0);
  return kaldi::CuVector<float>::~CuVector(v19);
}

void sub_E402C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::ExponentialLinearComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v28, a5[5], a5[4], 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v27, a5[5], a5[4], 0, 0, 0);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v28, a2, 111, v9, v10);
  kaldi::CuMatrixBase<float>::ApplyCeiling((uint64_t)v28, 0.0);
  kaldi::CuMatrixBase<float>::ApplyExp((uint64_t)v28, v11, v12, v13, v14);
  kaldi::CuMatrixBase<float>::Add((uint64_t)v28, -1.0);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)v28, *(float *)(a1 + 48));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v27, a2, 111, v15, v16);
  kaldi::CuMatrixBase<float>::ApplyHeaviside((uint64_t)v27);
  kaldi::CuMatrixBase<float>::Add((uint64_t)v27, -1.0);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)v27, -*(float *)(a1 + 48));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a5, a2, 111, v17, v18);
  kaldi::CuMatrixBase<float>::ApplyHeaviside((uint64_t)a5);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)a5, (uint64_t)v28, 111, v19, v20, 1.0, 1.0);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)a5, (uint64_t)v27, 111, v21, v22, 1.0, 1.0);
  kaldi::CuMatrixBase<float>::MulElements((uint64_t)a5, a4, v23, v24, v25);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v27);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v28);
}

void sub_E4180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

float kaldi::nnet1::ExponentialLinearComponent::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  kaldi::ExpectToken(a2, a3, (kaldi *)"<Alpha>");

  return kaldi::ReadBasicType<float>(a2, a3, (float *)(a1 + 48), v6, v7);
}

void kaldi::nnet1::ScaledExponentialLinearComponent::Copy(kaldi::nnet1::ScaledExponentialLinearComponent *this)
{
}

void sub_E42A8()
{
}

uint64_t kaldi::nnet1::ScaledExponentialLinearComponent::GetType(kaldi::nnet1::ScaledExponentialLinearComponent *this)
{
  return 525;
}

uint64_t kaldi::nnet1::ScaledExponentialLinearComponent::PropagateFnc(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v17, a3[5], a3[4], 0, 0, 0);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v17, a2, 111, v6, v7);
  kaldi::CuMatrixBase<float>::ApplyCeiling((uint64_t)v17, 0.0);
  kaldi::CuMatrixBase<float>::ApplyExp((uint64_t)v17, v8, v9, v10, v11);
  kaldi::CuMatrixBase<float>::Add((uint64_t)v17, -1.0);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)v17, *(float *)(a1 + 48));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a3, a2, 111, v12, v13);
  kaldi::CuMatrixBase<float>::ApplyFloor((uint64_t)a3, 0.0);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)a3, (uint64_t)v17, 111, v14, v15, 1.0, 1.0);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)a3, *(float *)(a1 + 52));
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v17);
}

void sub_E43A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *kaldi::nnet1::ScaledExponentialLinearComponent::PropagateFnc(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, const char *a5)
{
  uint64_t v8 = a3[4];
  v19[0] = off_262E60;
  memset(&v19[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v19, v8, 0, a4, a5);
  kaldi::CuVectorBase<float>::CopyFromVec(v19, a2, v9, v10, v11);
  kaldi::CuVectorBase<float>::ApplyCeiling((uint64_t)v19, 0.0);
  kaldi::CuVectorBase<float>::ApplyExp((uint64_t)v19);
  kaldi::CuVectorBase<float>::Add((uint64_t)v19, -1.0);
  kaldi::CuVectorBase<float>::Scale((uint64_t)v19, *(float *)(a1 + 48));
  kaldi::CuVectorBase<float>::CopyFromVec(a3, a2, v12, v13, v14);
  kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)a3, 0.0);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)a3, (uint64_t)v19, v15, v16, v17, 1.0, 1.0);
  kaldi::CuVectorBase<float>::Scale((uint64_t)a3, *(float *)(a1 + 52));
  return kaldi::CuVector<float>::~CuVector(v19);
}

void sub_E44A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::ScaledExponentialLinearComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v28, a5[5], a5[4], 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v27, a5[5], a5[4], 0, 0, 0);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v28, a2, 111, v9, v10);
  kaldi::CuMatrixBase<float>::ApplyCeiling((uint64_t)v28, 0.0);
  kaldi::CuMatrixBase<float>::ApplyExp((uint64_t)v28, v11, v12, v13, v14);
  kaldi::CuMatrixBase<float>::Add((uint64_t)v28, -1.0);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)v28, *(float *)(a1 + 48));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v27, a2, 111, v15, v16);
  kaldi::CuMatrixBase<float>::ApplyHeaviside((uint64_t)v27);
  kaldi::CuMatrixBase<float>::Add((uint64_t)v27, -1.0);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)v27, -*(float *)(a1 + 48));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a5, a2, 111, v17, v18);
  kaldi::CuMatrixBase<float>::ApplyHeaviside((uint64_t)a5);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)a5, (uint64_t)v28, 111, v19, v20, 1.0, 1.0);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)a5, (uint64_t)v27, 111, v21, v22, 1.0, 1.0);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)a5, *(float *)(a1 + 52));
  kaldi::CuMatrixBase<float>::MulElements((uint64_t)a5, a4, v23, v24, v25);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v27);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v28);
}

void sub_E4600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::KlHmm::Copy(kaldi::nnet1::KlHmm *this)
{
}

void sub_E46EC()
{
  kaldi::Matrix<float>::~Matrix(v2);
  *uint64_t v0 = v1;
  uint64_t v3 = (void *)v0[3];
  if (v3)
  {
    v0[4] = v3;
    operator delete(v3);
  }
  operator delete();
}

void kaldi::nnet1::KlHmm::WriteData(uint64_t a1, void *a2, int a3)
{
}

uint64_t kaldi::nnet1::KlHmm::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 88;
  if (!*(_DWORD *)(a1 + 108))
  {
    kaldi::Matrix<float>::Matrix((uint64_t)v54, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0);
    kaldi::CuMatrixBase<float>::CopyToMat<float>(a2, v54, 111, v7, v8);
    kaldi::MatrixBase<float>::Row((uint64_t)v54, 0, v9, v53);
    double v11 = kaldi::VectorBase<float>::Sum((uint64_t)v53);
    if (*(float *)&v11 != 1.0
      && (COERCE_INT(fabs(*(float *)&v11 + -1.0)) > 2139095039
       || fabsf(*(float *)&v11 + -1.0) > (float)((float)(fabsf(*(float *)&v11) + 1.0) * 0.001)))
    {
      kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "../subproject/libquasar/libkaldi/src/nnet/nnet-kl-hmm.h", &stru_20.segname[14], "ApproxEqual(post_sum, 1.0)", v10);
    }
    uint64_t v12 = (kaldi::ContextDependency *)(a1 + 48);
    kaldi::Matrix<float>::Matrix<double>(v53, v12, 111);
    uint64_t v13 = kaldi::ContextDependency::CentralPosition(v12);
    memset(v55, 0, 24);
    kaldi::Vector<float>::Resize(v55, v13, 0, v14, v15);
    kaldi::VectorBase<float>::AddColSumMat((uint64_t)v55, (kaldi::ContextDependency *)v53, 1.0, 1.0);
    kaldi::VectorBase<float>::ApplyFloor((uint64_t)v55, 1.0e-20);
    kaldi::VectorBase<float>::InvertElements((uint64_t)v55);
    kaldi::MatrixBase<float>::MulRowsVec((uint64_t)v53, (uint64_t)v55, v16, v17, v18);
    kaldi::MatrixBase<float>::ApplyFloor((uint64_t)v53, 1.0e-20);
    kaldi::MatrixBase<float>::InvertElements((uint64_t)v53, v19, v20, v21, v22);
    kaldi::MatrixBase<float>::ApplyLog((uint64_t)v53, v23, v24, v25, v26);
    uint64_t v27 = kaldi::ContextDependency::CentralPosition(v12);
    uint64_t v28 = kaldi::ContextDependency::ContextWidth(v12);
    kaldi::CuMatrix<float>::Resize(v5, v27, v28, 0, 0);
    kaldi::CuMatrixBase<float>::CopyFromMat(v5, (uint64_t)v53, 111, v29, v30);
    kaldi::Vector<float>::Destroy((uint64_t)v55);
    kaldi::Matrix<float>::~Matrix((uint64_t)v53);
    kaldi::Matrix<float>::~Matrix((uint64_t)v54);
  }
  kaldi::Matrix<float>::Matrix((uint64_t)v55, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0);
  kaldi::CuMatrixBase<float>::CopyToMat<float>(a2, (unsigned int *)v55, 111, v31, v32);
  kaldi::MatrixBase<float>::ApplyFloor((uint64_t)v55, 1.0e-20);
  kaldi::MatrixBase<float>::ApplyLog((uint64_t)v55, v33, v34, v35, v36);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v54, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0, 0);
  kaldi::CuMatrixBase<float>::CopyFromMat((uint64_t)v54, (uint64_t)v55, 111, v37, v38);
  kaldi::CuMatrix<float>::CuMatrix(v53, a2, 111);
  kaldi::CuMatrixBase<float>::MulElements((uint64_t)v53, (uint64_t)v54, v39, v40, v41);
  uint64_t v42 = *(unsigned int *)(a2 + 20);
  v52[0] = off_262E60;
  memset(&v52[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v52, v42, 0, v43, v44);
  kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)v52, (unsigned int *)v53, 1.0, 1.0, v45, v46, v47);
  kaldi::CuMatrixBase<float>::AddMatMat(a3, a2, CblasNoTrans, v5, &stru_68.sectname[8], 1.0, 0.0);
  kaldi::CuMatrixBase<float>::AddVecToCols(a3, (uint64_t)v52, v48, v49, v50, 1.0, 1.0);
  kaldi::CuMatrixBase<float>::Scale(a3, -1.0);
  kaldi::CuVector<float>::~CuVector(v52);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v53);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v54);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v55);
}

void sub_E4A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::KlHmm::BackpropagateFnc()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "BackpropagateFnc", "../subproject/libquasar/libkaldi/src/nnet/nnet-kl-hmm.h", 106);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::KlHmm::ReadData(_DWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (kaldi::ContextDependency *)(a1 + 12);
  kaldi::Matrix<double>::Read((uint64_t)(a1 + 12), a2, a3, 0, 0);
  if (kaldi::ContextDependency::CentralPosition(v4) != a1[3]) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-kl-hmm.h", &stru_68.sectname[8], "kl_stats_.NumRows() == output_dim_", v5);
  }
  uint64_t result = kaldi::ContextDependency::ContextWidth(v4);
  if (result != a1[2]) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-kl-hmm.h", &stru_68.sectname[9], "kl_stats_.NumCols() == input_dim_", v7);
  }
  return result;
}

void kaldi::nnet1::Splice::Copy(kaldi::nnet1::Splice *this)
{
}

void sub_E4C90()
{
  *uint64_t v0 = v1;
  uint64_t v2 = (void *)v0[3];
  if (v2)
  {
    v0[4] = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t kaldi::nnet1::Splice::GetType(kaldi::nnet1::Splice *this)
{
  return 1026;
}

uint64_t kaldi::nnet1::Splice::Info@<X0>(kaldi::nnet1::Splice *this@<X0>, std::string *a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n  frame_offsets ", 17);
  kaldi::operator<<<int>(v4, (int *)this + 12);
  std::stringbuf::str();
  uint64_t v5 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  int v6 = (char)v5;
  std::string::size_type v7 = (std::string::size_type)a2 + v5;
  if (v6 >= 0)
  {
    std::string::size_type v8 = (std::string::size_type)a2;
  }
  else
  {
    std::string::size_type v7 = a2->__r_.__value_.__r.__words[0] + a2->__r_.__value_.__l.__size_;
    std::string::size_type v8 = a2->__r_.__value_.__r.__words[0];
  }
  std::string::erase(a2, ~v8 + v7, 1uLL);
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_E4E50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Splice::InitData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  memset(&v80, 0, sizeof(v80));
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  unint64_t v79 = 0;
  int v6 = a2 + 4;
  long long v75 = 0uLL;
  uint64_t v76 = 0;
  while (1)
  {
    if ((*((unsigned char *)v6 + *(void *)(*a2 - 24)) & 2) != 0) {
      goto LABEL_57;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)&v75, a4, a5);
    if (SHIBYTE(v76) < 0) {
      break;
    }
    if (HIBYTE(v76) != 12)
    {
      if (HIBYTE(v76) == 13)
      {
        BOOL v7 = (void)v75 == 0x6556646C6975423CLL && *(void *)((char *)&v75 + 5) == 0x3E726F7463655664;
        if (v7) {
          goto LABEL_22;
        }
      }
      goto LABEL_138;
    }
    if ((void)v75 != 0x636556646165523CLL || DWORD2(v75) != 1047687028)
    {
      uint64_t v19 = &v75;
      goto LABEL_52;
    }
LABEL_48:
    kaldi::ReadIntegerVector<int>(a2, 0, &v80, 0, 0, 0, 0);
LABEL_49:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  uint64_t v8 = *((void *)&v75 + 1);
  if (*((void *)&v75 + 1) == 12 && *(void *)v75 == 0x636556646165523CLL && *(_DWORD *)(v75 + 8) == 1047687028) {
    goto LABEL_48;
  }
  if (*((void *)&v75 + 1) != 13) {
    goto LABEL_50;
  }
  if (*(void *)v75 == 0x6556646C6975423CLL && *(void *)(v75 + 5) == 0x3E726F7463655664)
  {
    while (1)
    {
LABEL_22:
      if ((*((unsigned char *)v6 + *(void *)(*a2 - 24)) & 2) != 0) {
        goto LABEL_49;
      }
      std::string __p = 0;
      uint64_t v72 = 0;
      uint64_t v73 = 0;
      kaldi::ReadToken(a2, 0, (uint64_t)&__p, a4, a5);
      if (SHIBYTE(v73) < 0)
      {
        if (v72 != 14) {
          goto LABEL_32;
        }
        p_p = (uint64_t *)__p;
      }
      else
      {
        if (SHIBYTE(v73) != 14) {
          goto LABEL_32;
        }
        p_p = (uint64_t *)&__p;
      }
      uint64_t v12 = *p_p;
      uint64_t v13 = *(uint64_t *)((char *)p_p + 6);
      if (v12 == 0x56646C6975422F3CLL && v13 == 0x3E726F7463655664)
      {
        char v17 = 0;
        if (v73 < 0) {
          goto LABEL_41;
        }
LABEL_38:
        if ((v17 & 1) == 0) {
          goto LABEL_49;
        }
      }
      else
      {
LABEL_32:
        memset(&v74, 0, sizeof(v74));
        kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ":", 0, &v74, a5);
        uint64_t v15 = v78;
        if ((unint64_t)v78 >= v79)
        {
          uint64_t v16 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>((uint64_t *)&v77, (uint64_t)&v74);
        }
        else
        {
          void *v78 = 0;
          v15[1] = 0;
          _OWORD v15[2] = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v15, v74.__begin_, (uint64_t)v74.__end_, v74.__end_ - v74.__begin_);
          uint64_t v16 = (uint64_t)(v15 + 3);
        }
        uint64_t v78 = (void *)v16;
        if (v74.__begin_)
        {
          v74.__end_ = v74.__begin_;
          operator delete(v74.__begin_);
        }
        char v17 = 1;
        if ((v73 & 0x8000000000000000) == 0) {
          goto LABEL_38;
        }
LABEL_41:
        operator delete(__p);
        if ((v17 & 1) == 0) {
          goto LABEL_49;
        }
      }
    }
  }
  uint64_t v8 = *((void *)&v75 + 1);
LABEL_50:
  if (v8 != 12) {
    goto LABEL_138;
  }
  uint64_t v19 = (long long *)v75;
LABEL_52:
  uint64_t v20 = *(void *)v19;
  int v21 = *((_DWORD *)v19 + 2);
  if (v20 != 0x6E6F706D6F432F3CLL || v21 != 1047817829)
  {
LABEL_138:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", 293);
    uint64_t v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
    if (v76 >= 0) {
      uint64_t v66 = &v75;
    }
    else {
      uint64_t v66 = (long long *)v75;
    }
    if (v76 >= 0) {
      uint64_t v67 = HIBYTE(v76);
    }
    else {
      uint64_t v67 = *((void *)&v75 + 1);
    }
    std::string v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)v66, v67);
    std::string v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)" (ReadVector|BuildVector)", 25);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
LABEL_57:
  uint64_t v23 = (uint64_t)v77;
  if (v78 != v77)
  {
    unint64_t v24 = 0;
    do
    {
      unint64_t v25 = v23 + 24 * v24;
      uint64_t v26 = *(int **)v25;
      uint64_t v27 = (uint64_t)(*(void *)(v25 + 8) - *(void *)v25) >> 2;
      switch(v27)
      {
        case 3:
          int v42 = *v26;
          int v43 = v26[1];
          int v44 = v26[2];
          BOOL v45 = v42 > v44 || v43 <= 0;
          if (v45 && (v42 < v44 || (v43 & 0x80000000) == 0)) {
            kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)&stru_108.offset + 3, "(min <= max && step > 0) || (min >= max && step < 0)", a5);
          }
          if (v42 <= v44)
          {
            std::vector<int>::pointer end = v80.__end_;
            do
            {
              if (end >= v80.__end_cap_.__value_)
              {
                std::vector<int>::pointer begin = v80.__begin_;
                uint64_t v49 = end - v80.__begin_;
                unint64_t v50 = v49 + 1;
                if ((unint64_t)(v49 + 1) >> 62) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                int64_t v51 = (char *)v80.__end_cap_.__value_ - (char *)v80.__begin_;
                if (((char *)v80.__end_cap_.__value_ - (char *)v80.__begin_) >> 1 > v50) {
                  unint64_t v50 = v51 >> 1;
                }
                if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v52 = v50;
                }
                if (v52)
                {
                  uint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v80.__end_cap_, v52);
                  std::vector<int>::pointer begin = v80.__begin_;
                  std::vector<int>::pointer end = v80.__end_;
                }
                else
                {
                  uint64_t v53 = 0;
                }
                int v54 = (int *)&v53[4 * v49];
                *int v54 = v42;
                float v47 = v54 + 1;
                while (end != begin)
                {
                  int v55 = *--end;
                  *--int v54 = v55;
                }
                v80.__begin_ = v54;
                v80.__end_ = v47;
                v80.__end_cap_.__value_ = (int *)&v53[4 * v52];
                if (begin) {
                  operator delete(begin);
                }
              }
              else
              {
                *std::vector<int>::pointer end = v42;
                float v47 = end + 1;
              }
              v80.__end_ = v47;
              v42 += v43;
              std::vector<int>::pointer end = v47;
            }
            while (v42 <= v44);
          }
          break;
        case 2:
          int v30 = *v26;
          int v31 = v26[1];
          if (*v26 > v31) {
            kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)&stru_108.size + 4, "min <= max", a5);
          }
          std::vector<int>::pointer v32 = v80.__end_;
          do
          {
            if (v32 >= v80.__end_cap_.__value_)
            {
              std::vector<int>::pointer v34 = v80.__begin_;
              uint64_t v35 = v32 - v80.__begin_;
              unint64_t v36 = v35 + 1;
              if ((unint64_t)(v35 + 1) >> 62) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              int64_t v37 = (char *)v80.__end_cap_.__value_ - (char *)v80.__begin_;
              if (((char *)v80.__end_cap_.__value_ - (char *)v80.__begin_) >> 1 > v36) {
                unint64_t v36 = v37 >> 1;
              }
              if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v38 = v36;
              }
              if (v38)
              {
                uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v80.__end_cap_, v38);
                std::vector<int>::pointer v34 = v80.__begin_;
                std::vector<int>::pointer v32 = v80.__end_;
              }
              else
              {
                uint64_t v39 = 0;
              }
              uint64_t v40 = (int *)&v39[4 * v35];
              *uint64_t v40 = v30;
              uint64_t v33 = v40 + 1;
              while (v32 != v34)
              {
                int v41 = *--v32;
                *--uint64_t v40 = v41;
              }
              v80.__begin_ = v40;
              v80.__end_ = v33;
              v80.__end_cap_.__value_ = (int *)&v39[4 * v38];
              if (v34) {
                operator delete(v34);
              }
            }
            else
            {
              const char *v32 = v30;
              uint64_t v33 = v32 + 1;
            }
            v80.__end_ = v33;
            std::vector<int>::pointer v32 = v33;
            BOOL v7 = v30++ == v31;
          }
          while (!v7);
          break;
        case 1:
          std::vector<int>::pointer v28 = v80.__end_;
          if (v80.__end_ >= v80.__end_cap_.__value_)
          {
            std::vector<int>::pointer v56 = v80.__begin_;
            int64_t v57 = v80.__end_ - v80.__begin_;
            unint64_t v58 = v57 + 1;
            if ((unint64_t)(v57 + 1) >> 62) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            int64_t v59 = (char *)v80.__end_cap_.__value_ - (char *)v80.__begin_;
            if (((char *)v80.__end_cap_.__value_ - (char *)v80.__begin_) >> 1 > v58) {
              unint64_t v58 = v59 >> 1;
            }
            if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v60 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v60 = v58;
            }
            if (v60)
            {
              int v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v80.__end_cap_, v60);
              std::vector<int>::pointer v56 = v80.__begin_;
              std::vector<int>::pointer v28 = v80.__end_;
            }
            else
            {
              int v61 = 0;
            }
            uint64_t v62 = (int *)&v61[4 * v57];
            *uint64_t v62 = *v26;
            uint64_t v29 = v62 + 1;
            while (v28 != v56)
            {
              int v63 = *--v28;
              *--uint64_t v62 = v63;
            }
            v80.__begin_ = v62;
            v80.__end_ = v29;
            v80.__end_cap_.__value_ = (int *)&v61[4 * v60];
            if (v56) {
              operator delete(v56);
            }
          }
          else
          {
            *v80.__end_ = *v26;
            uint64_t v29 = v28 + 1;
          }
          v80.__end_ = v29;
          break;
        default:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", 322);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Error parsing <BuildVector>", 27);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      ++v24;
      uint64_t v23 = (uint64_t)v77;
    }
    while (0xAAAAAAAAAAAAAAABLL * (v78 - v77) > v24);
  }
  kaldi::CuArray<int>::Resize(a1 + 48, (unint64_t)((char *)v80.__end_ - (char *)v80.__begin_) >> 2, 1u, a4, a5);
  memcpy(*(void **)(a1 + 56), v80.__begin_, (char *)v80.__end_ - (char *)v80.__begin_);
  if (*(_DWORD *)(a1 + 8) * *(_DWORD *)(a1 + 48) != *(_DWORD *)(a1 + 12)) {
    kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)&stru_108.flags + 3, "frame_offsets_.Dim()*InputDim() == OutputDim()", v64);
  }
  if (SHIBYTE(v76) < 0) {
    operator delete((void *)v75);
  }
  std::string __p = &v77;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v80.__begin_)
  {
    v80.__end_ = v80.__begin_;
    operator delete(v80.__begin_);
  }
}

void sub_E5614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v16 - 128) = v15;
  uint64_t v18 = *(void **)(v16 - 184);
  if (v18)
  {
    *(void *)(v16 - 176) = v18;
    operator delete(v18);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v16 - 137) < 0) {
    operator delete(*(void **)(v16 - 160));
  }
  std::string __p = (void *)(v16 - 136);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  uint64_t v19 = *(void **)(v16 - 112);
  if (v19)
  {
    *(void *)(v16 - 104) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

void sub_E5624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  if (*(char *)(v10 - 137) < 0) {
    operator delete(*(void **)(v10 - 160));
  }
  a10 = (void **)(v10 - 136);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v12 = *(void **)(v10 - 112);
  if (v12)
  {
    *(void *)(v10 - 104) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

void sub_E562C()
{
}

void kaldi::nnet1::Splice::WriteData(uint64_t a1, void *a2, int a3)
{
  uint64_t v5 = (int *)(a1 + 48);
  std::vector<int>::vector(&v6, *(int *)(a1 + 48));
  kaldi::CuArray<int>::CopyToVec(v5, &v6);
  kaldi::WriteIntegerByteArray<int>(a2, a3, 0, v6.__end_ - v6.__begin_, (uint64_t)v6.__begin_);
  if (v6.__begin_)
  {
    v6.__end_ = v6.__begin_;
    operator delete(v6.__begin_);
  }
}

void sub_E570C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::Splice::PropagateFnc(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4, const char *a5)
{
  return kaldi::cu::Splice<float>(a2, (unsigned int *)(a1 + 48), a3, a4, a5);
}

void kaldi::nnet1::Splice::BackpropagateFnc()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "BackpropagateFnc", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", 365);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"BackpropagateFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void kaldi::nnet1::Splice::ReadData(uint64_t a1, void *a2, int a3)
{
  memset(&__p, 0, sizeof(__p));
  kaldi::ReadIntegerVector<int>(a2, a3, &__p, 0, 0, 0, 0);
  kaldi::CuArray<int>::Resize(a1 + 48, (unint64_t)((char *)__p.__end_ - (char *)__p.__begin_) >> 2, 1u, v4, v5);
  memcpy(*(void **)(a1 + 56), __p.__begin_, (char *)__p.__end_ - (char *)__p.__begin_);
  if (*(_DWORD *)(a1 + 8) * *(_DWORD *)(a1 + 48) != *(_DWORD *)(a1 + 12)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)&stru_108.reserved2 + 3, "frame_offsets_.Dim() * InputDim() == OutputDim()", v6);
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_E5864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::CopyComponent::Copy(kaldi::nnet1::CopyComponent *this)
{
}

void sub_E5934()
{
  *uint64_t v0 = v1;
  uint64_t v2 = (void *)v0[3];
  if (v2)
  {
    v0[4] = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t kaldi::nnet1::CopyComponent::GetType(kaldi::nnet1::CopyComponent *this)
{
  return 1028;
}

void kaldi::nnet1::CopyComponent::InitData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  memset(&v88, 0, sizeof(v88));
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  unint64_t v87 = 0;
  BOOL v7 = a2 + 4;
  long long v83 = 0uLL;
  uint64_t v84 = 0;
  while (1)
  {
    if ((*((unsigned char *)v7 + *(void *)(*a2 - 24)) & 2) != 0) {
      goto LABEL_56;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)&v83, a4, a5);
    if (SHIBYTE(v84) < 0)
    {
      if (*((void *)&v83 + 1) == 12)
      {
        uint64_t v19 = (long long *)v83;
        if (*(void *)v83 != 0x636556646165523CLL || *(_DWORD *)(v83 + 8) != 1047687028) {
          goto LABEL_51;
        }
        goto LABEL_49;
      }
      if (*((void *)&v83 + 1) != 13) {
        goto LABEL_148;
      }
      if (*(void *)v83 != 0x6556646C6975423CLL || *(void *)(v83 + 5) != 0x3E726F7463655664) {
        goto LABEL_148;
      }
      while (1)
      {
LABEL_18:
        if ((*((unsigned char *)v7 + *(void *)(*a2 - 24)) & 2) != 0) {
          goto LABEL_50;
        }
        std::vector<int> __p = 0;
        uint64_t v80 = 0;
        uint64_t v81 = 0;
        kaldi::ReadToken(a2, 0, (uint64_t)&__p, a4, a5);
        if (SHIBYTE(v81) < 0)
        {
          if (v80 != 14) {
            goto LABEL_28;
          }
          p_p = (uint64_t *)__p;
        }
        else
        {
          if (SHIBYTE(v81) != 14) {
            goto LABEL_28;
          }
          p_p = (uint64_t *)&__p;
        }
        uint64_t v11 = *p_p;
        uint64_t v12 = *(uint64_t *)((char *)p_p + 6);
        if (v11 == 0x56646C6975422F3CLL && v12 == 0x3E726F7463655664)
        {
          char v16 = 0;
          if (v81 < 0) {
            goto LABEL_37;
          }
LABEL_34:
          if ((v16 & 1) == 0) {
            goto LABEL_50;
          }
        }
        else
        {
LABEL_28:
          memset(&v82, 0, sizeof(v82));
          kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ":", 0, &v82, a5);
          uint64_t v14 = v86;
          if ((unint64_t)v86 >= v87)
          {
            uint64_t v15 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>((uint64_t *)&v85, (uint64_t)&v82);
          }
          else
          {
            *uint64_t v86 = 0;
            v14[1] = 0;
            v14[2] = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v14, v82.__begin_, (uint64_t)v82.__end_, v82.__end_ - v82.__begin_);
            uint64_t v15 = (uint64_t)(v14 + 3);
          }
          uint64_t v86 = (void *)v15;
          if (v82.__begin_)
          {
            v82.__end_ = v82.__begin_;
            operator delete(v82.__begin_);
          }
          char v16 = 1;
          if ((v81 & 0x8000000000000000) == 0) {
            goto LABEL_34;
          }
LABEL_37:
          operator delete(__p);
          if ((v16 & 1) == 0) {
            goto LABEL_50;
          }
        }
      }
    }
    if (HIBYTE(v84) != 12)
    {
      if (HIBYTE(v84) == 13)
      {
        BOOL v8 = (void)v83 == 0x6556646C6975423CLL && *(void *)((char *)&v83 + 5) == 0x3E726F7463655664;
        if (v8) {
          goto LABEL_18;
        }
      }
      goto LABEL_148;
    }
    if ((void)v83 != 0x636556646165523CLL || DWORD2(v83) != 1047687028) {
      break;
    }
LABEL_49:
    kaldi::ReadIntegerVector<int>(a2, 0, &v88, 0, 0, 0, 0);
LABEL_50:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  uint64_t v19 = &v83;
LABEL_51:
  uint64_t v20 = *(void *)v19;
  int v21 = *((_DWORD *)v19 + 2);
  if (v20 != 0x6E6F706D6F432F3CLL || v21 != 1047817829)
  {
LABEL_148:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", 411);
    uint64_t v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
    if (v84 >= 0) {
      std::vector<int> v74 = &v83;
    }
    else {
      std::vector<int> v74 = (long long *)v83;
    }
    if (v84 >= 0) {
      uint64_t v75 = HIBYTE(v84);
    }
    else {
      uint64_t v75 = *((void *)&v83 + 1);
    }
    uint64_t v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)v74, v75);
    uint64_t v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)" (ReadVector|BuildVector)", 25);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
LABEL_56:
  uint64_t v23 = (uint64_t)v85;
  if (v86 != v85)
  {
    unint64_t v24 = 0;
    do
    {
      unint64_t v25 = v23 + 24 * v24;
      uint64_t v26 = *(int **)v25;
      uint64_t v27 = (uint64_t)(*(void *)(v25 + 8) - *(void *)v25) >> 2;
      switch(v27)
      {
        case 3:
          int v42 = *v26;
          int v43 = v26[1];
          int v44 = v26[2];
          BOOL v45 = v42 > v44 || v43 <= 0;
          if (v45 && (v42 < v44 || (v43 & 0x80000000) == 0)) {
            kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", &stru_1A8.sectname[9], "(min <= max && step > 0) || (min >= max && step < 0)", a5);
          }
          if (v42 <= v44)
          {
            std::vector<int>::pointer end = v88.__end_;
            do
            {
              if (end >= v88.__end_cap_.__value_)
              {
                std::vector<int>::pointer begin = v88.__begin_;
                uint64_t v49 = end - v88.__begin_;
                unint64_t v50 = v49 + 1;
                if ((unint64_t)(v49 + 1) >> 62) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                int64_t v51 = (char *)v88.__end_cap_.__value_ - (char *)v88.__begin_;
                if (((char *)v88.__end_cap_.__value_ - (char *)v88.__begin_) >> 1 > v50) {
                  unint64_t v50 = v51 >> 1;
                }
                if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v52 = v50;
                }
                if (v52)
                {
                  uint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v88.__end_cap_, v52);
                  std::vector<int>::pointer begin = v88.__begin_;
                  std::vector<int>::pointer end = v88.__end_;
                }
                else
                {
                  uint64_t v53 = 0;
                }
                int v54 = (int *)&v53[4 * v49];
                *int v54 = v42;
                float v47 = v54 + 1;
                while (end != begin)
                {
                  int v55 = *--end;
                  *--int v54 = v55;
                }
                v88.__begin_ = v54;
                v88.__end_ = v47;
                v88.__end_cap_.__value_ = (int *)&v53[4 * v52];
                if (begin) {
                  operator delete(begin);
                }
              }
              else
              {
                *std::vector<int>::pointer end = v42;
                float v47 = end + 1;
              }
              v88.__end_ = v47;
              v42 += v43;
              std::vector<int>::pointer end = v47;
            }
            while (v42 <= v44);
          }
          break;
        case 2:
          int v30 = *v26;
          int v31 = v26[1];
          if (*v26 > v31) {
            kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", &stru_1A8.sectname[2], "min <= max", a5);
          }
          std::vector<int>::pointer v32 = v88.__end_;
          do
          {
            if (v32 >= v88.__end_cap_.__value_)
            {
              std::vector<int>::pointer v34 = v88.__begin_;
              uint64_t v35 = v32 - v88.__begin_;
              unint64_t v36 = v35 + 1;
              if ((unint64_t)(v35 + 1) >> 62) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              int64_t v37 = (char *)v88.__end_cap_.__value_ - (char *)v88.__begin_;
              if (((char *)v88.__end_cap_.__value_ - (char *)v88.__begin_) >> 1 > v36) {
                unint64_t v36 = v37 >> 1;
              }
              if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v38 = v36;
              }
              if (v38)
              {
                uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v88.__end_cap_, v38);
                std::vector<int>::pointer v34 = v88.__begin_;
                std::vector<int>::pointer v32 = v88.__end_;
              }
              else
              {
                uint64_t v39 = 0;
              }
              uint64_t v40 = (int *)&v39[4 * v35];
              *uint64_t v40 = v30;
              uint64_t v33 = v40 + 1;
              while (v32 != v34)
              {
                int v41 = *--v32;
                *--uint64_t v40 = v41;
              }
              v88.__begin_ = v40;
              v88.__end_ = v33;
              v88.__end_cap_.__value_ = (int *)&v39[4 * v38];
              if (v34) {
                operator delete(v34);
              }
            }
            else
            {
              const char *v32 = v30;
              uint64_t v33 = v32 + 1;
            }
            v88.__end_ = v33;
            std::vector<int>::pointer v32 = v33;
            BOOL v8 = v30++ == v31;
          }
          while (!v8);
          break;
        case 1:
          std::vector<int>::pointer v28 = v88.__end_;
          if (v88.__end_ >= v88.__end_cap_.__value_)
          {
            std::vector<int>::pointer v56 = v88.__begin_;
            int64_t v57 = v88.__end_ - v88.__begin_;
            unint64_t v58 = v57 + 1;
            if ((unint64_t)(v57 + 1) >> 62) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            int64_t v59 = (char *)v88.__end_cap_.__value_ - (char *)v88.__begin_;
            if (((char *)v88.__end_cap_.__value_ - (char *)v88.__begin_) >> 1 > v58) {
              unint64_t v58 = v59 >> 1;
            }
            if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v60 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v60 = v58;
            }
            if (v60)
            {
              int v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v88.__end_cap_, v60);
              std::vector<int>::pointer v56 = v88.__begin_;
              std::vector<int>::pointer v28 = v88.__end_;
            }
            else
            {
              int v61 = 0;
            }
            uint64_t v62 = (int *)&v61[4 * v57];
            *uint64_t v62 = *v26;
            uint64_t v29 = v62 + 1;
            while (v28 != v56)
            {
              int v63 = *--v28;
              *--uint64_t v62 = v63;
            }
            v88.__begin_ = v62;
            v88.__end_ = v29;
            v88.__end_cap_.__value_ = (int *)&v61[4 * v60];
            if (v56) {
              operator delete(v56);
            }
          }
          else
          {
            *v88.__end_ = *v26;
            uint64_t v29 = v28 + 1;
          }
          v88.__end_ = v29;
          break;
        default:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", 440);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Error parsing <BuildVector>", 27);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      ++v24;
      uint64_t v23 = (uint64_t)v85;
    }
    while (0xAAAAAAAAAAAAAAABLL * (v86 - v85) > v24);
  }
  std::vector<int>::pointer v64 = v88.__begin_;
  std::vector<int>::pointer v65 = v88.__end_;
  if (v88.__begin_ == v88.__end_)
  {
    std::vector<int>::pointer v65 = v88.__begin_;
  }
  else
  {
    std::vector<int>::pointer v66 = v88.__begin_;
    do
      --*v66++;
    while (v66 != v65);
  }
  kaldi::CuArray<int>::Resize(a1 + 48, (unint64_t)((char *)v65 - (char *)v64) >> 2, 1u, a4, a5);
  memcpy(*(void **)(a1 + 56), v88.__begin_, (char *)v88.__end_ - (char *)v88.__begin_);
  std::vector<int>::pointer v68 = v88.__begin_;
  if (v88.__end_ != v88.__begin_)
  {
    if ((unint64_t)(v88.__end_ - v88.__begin_) <= 1) {
      int64_t v69 = 1;
    }
    else {
      int64_t v69 = v88.__end_ - v88.__begin_;
    }
    int v70 = "copy_from_indices[i] >= 0";
    while (1)
    {
      int v72 = *v68++;
      int v71 = v72;
      if (v72 < 0) {
        break;
      }
      if (v71 >= *(_DWORD *)(a1 + 8))
      {
        uint64_t v78 = (unsigned char *)(&stru_1A8 + 30);
        int v70 = "copy_from_indices[i] < InputDim()";
        goto LABEL_157;
      }
      if (!--v69) {
        goto LABEL_140;
      }
    }
    uint64_t v78 = &stru_1A8.segname[13];
LABEL_157:
    kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", v78, v70, v67);
  }
LABEL_140:
  if (*(_DWORD *)(a1 + 48) != *(_DWORD *)(a1 + 12)) {
    kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)&stru_1A8.addr + 1, "copy_from_indices_.Dim() == OutputDim()", v67);
  }
  if (SHIBYTE(v84) < 0) {
    operator delete((void *)v83);
  }
  std::vector<int> __p = &v85;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v88.__begin_)
  {
    v88.__end_ = v88.__begin_;
    operator delete(v88.__begin_);
  }
}

void sub_E6190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v16 - 128) = v15;
  uint64_t v18 = *(void **)(v16 - 184);
  if (v18)
  {
    *(void *)(v16 - 176) = v18;
    operator delete(v18);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v16 - 137) < 0) {
    operator delete(*(void **)(v16 - 160));
  }
  std::vector<int> __p = (void *)(v16 - 136);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  uint64_t v19 = *(void **)(v16 - 112);
  if (v19)
  {
    *(void *)(v16 - 104) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

void sub_E619C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  if (*(char *)(v10 - 137) < 0) {
    operator delete(*(void **)(v10 - 160));
  }
  a10 = (void **)(v10 - 136);
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v12 = *(void **)(v10 - 112);
  if (v12)
  {
    *(void *)(v10 - 104) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

void sub_E61A4()
{
}

void kaldi::nnet1::CopyComponent::WriteData(uint64_t a1, void *a2, int a3)
{
  uint64_t v5 = (int *)(a1 + 48);
  std::vector<int>::vector(&v10, *(int *)(a1 + 48));
  kaldi::CuArray<int>::CopyToVec(v5, &v10);
  std::vector<int>::pointer begin = v10.__begin_;
  std::vector<int>::pointer end = v10.__end_;
  std::vector<int>::pointer v8 = v10.__begin_;
  if (v10.__begin_ != v10.__end_)
  {
    std::vector<int>::pointer v9 = v10.__begin_;
    do
      ++*v9++;
    while (v9 != end);
    std::vector<int>::pointer v8 = end;
  }
  kaldi::WriteIntegerByteArray<int>(a2, a3, 0, v8 - begin, (uint64_t)begin);
  if (v10.__begin_)
  {
    v10.__end_ = v10.__begin_;
    operator delete(v10.__begin_);
  }
}

void sub_E62AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::CopyComponent::PropagateFnc(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, const char *a5)
{
  return kaldi::cu::Copy<float>(a2, (unsigned int *)(a1 + 48), a3, a4, a5);
}

void kaldi::nnet1::CopyComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!kaldi::nnet1::CopyComponent::BackpropagateFnc(kaldi::CuMatrixBase<float> const&,kaldi::CuMatrixBase<float> const&,kaldi::CuMatrixBase<float> const&,kaldi::CuMatrixBase<float>*,int)::warning_displayed)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7, "BackpropagateFnc", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", 503);
      std::vector<int> v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"BackpropagateFnc", 16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Not implemented!", 16);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    }
    kaldi::nnet1::CopyComponent::BackpropagateFnc(kaldi::CuMatrixBase<float> const&,kaldi::CuMatrixBase<float> const&,kaldi::CuMatrixBase<float> const&,kaldi::CuMatrixBase<float>*,int)::warning_displayed = 1;
  }
  kaldi::CuMatrixBase<float>::SetZero(a5);
}

void sub_E6388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::nnet1::CopyComponent::ReadData(uint64_t a1, void *a2, int a3)
{
  memset(&__p, 0, sizeof(__p));
  kaldi::ReadIntegerVector<int>(a2, a3, &__p, 0, 0, 0, 0);
  std::vector<int>::pointer begin = __p.__begin_;
  std::vector<int>::pointer end = __p.__end_;
  if (__p.__begin_ == __p.__end_)
  {
    std::vector<int>::pointer end = __p.__begin_;
  }
  else
  {
    std::vector<int>::pointer v8 = __p.__begin_;
    do
      --*v8++;
    while (v8 != end);
  }
  kaldi::CuArray<int>::Resize(a1 + 48, (unint64_t)((char *)end - (char *)begin) >> 2, 1u, v4, v5);
  memcpy(*(void **)(a1 + 56), __p.__begin_, (char *)__p.__end_ - (char *)__p.__begin_);
  if (*(_DWORD *)(a1 + 48) != *(_DWORD *)(a1 + 12)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)&stru_1A8.size + 4, "copy_from_indices_.Dim() == OutputDim()", v9);
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_E6488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::IdentityComponent::Copy(kaldi::nnet1::IdentityComponent *this)
{
}

void sub_E6544()
{
}

uint64_t kaldi::nnet1::IdentityComponent::GetType(kaldi::nnet1::IdentityComponent *this)
{
  return 2057;
}

void *kaldi::nnet1::IdentityComponent::InitData(uint64_t a1, void *a2)
{
  uint64_t result = std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) == 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", 537);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "Unity component doesn't expect any tokens");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

unsigned int *kaldi::nnet1::IdentityComponent::PropagateFnc(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, const char *a5)
{
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a3, a2, 111, a4, a5);
}

void kaldi::nnet1::IdentityComponent::GetUnitOutputFnc(uint64_t a1, _DWORD *a2, signed int a3, uint64_t a4, const char *a5)
{
}

void kaldi::nnet1::DuplicateComponent::Copy(kaldi::nnet1::DuplicateComponent *this)
{
}

void sub_E66C4()
{
}

void kaldi::nnet1::DuplicateComponent::InitData(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  BOOL v7 = &v31;
  a1[14] = 1;
  std::vector<int>::pointer v8 = a1 + 14;
  long long v31 = 0uLL;
  uint64_t v32 = 0;
  std::vector<int>::pointer v9 = a2 + 4;
  std::vector<int> v10 = a1 + 13;
  while (1)
  {
    if ((*((unsigned char *)v9 + *(void *)(*a2 - 24)) & 2) != 0) {
      goto LABEL_57;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)&v31, a4, a5);
    if ((SHIBYTE(v32) & 0x80000000) == 0)
    {
      if (HIBYTE(v32) != 15)
      {
        if (HIBYTE(v32) != 16)
        {
          if (HIBYTE(v32) == 12) {
            goto LABEL_52;
          }
          goto LABEL_40;
        }
        if ((void)v31 != 0x6163696C7075443CLL || *((void *)&v31 + 1) != 0x3E74726174536574) {
          goto LABEL_40;
        }
        goto LABEL_11;
      }
      BOOL v19 = (void)v31 == 0x6163696C7075443CLL && *(void *)((char *)&v31 + 7) == 0x3E657A6953657461;
      uint64_t v17 = (uint64_t)v10;
      if (!v19)
      {
        BOOL v20 = (void)v31 == 0x6C7075446D754E3CLL && *(void *)((char *)&v31 + 7) == 0x3E7365746163696CLL;
        uint64_t v17 = (uint64_t)v8;
        if (!v20) {
          goto LABEL_40;
        }
      }
      goto LABEL_37;
    }
    uint64_t v14 = *((void *)&v31 + 1);
    if (*((void *)&v31 + 1) != 15)
    {
      if (*((void *)&v31 + 1) != 16) {
        goto LABEL_50;
      }
      if (*(void *)v31 != 0x6163696C7075443CLL || *(void *)(v31 + 8) != 0x3E74726174536574) {
        goto LABEL_50;
      }
LABEL_11:
      LODWORD(v30[0]) = 0;
      kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v30, v11, v12);
      a1[12] = v30[0];
      goto LABEL_38;
    }
    BOOL v16 = *(void *)v31 == 0x6163696C7075443CLL && *(void *)(v31 + 7) == 0x3E657A6953657461;
    uint64_t v17 = (uint64_t)v10;
    if (!v16)
    {
      uint64_t v14 = *((void *)&v31 + 1);
      BOOL v18 = *(void *)v31 == 0x6C7075446D754E3CLL && *(void *)(v31 + 7) == 0x3E7365746163696CLL;
      uint64_t v17 = (uint64_t)v8;
      if (!v18) {
        break;
      }
    }
LABEL_37:
    kaldi::ReadBasicType<int>(a2, 0, v17, v11, v12);
LABEL_38:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  if ((v32 & 0x8000000000000000) == 0)
  {
    if (HIBYTE(v32) == 12)
    {
      BOOL v7 = &v31;
      goto LABEL_52;
    }
    goto LABEL_40;
  }
LABEL_50:
  if (v14 != 12) {
    goto LABEL_40;
  }
  BOOL v7 = (long long *)v31;
LABEL_52:
  if (*(void *)v7 != 0x6E6F706D6F432F3CLL || *((_DWORD *)v7 + 2) != 1047817829)
  {
LABEL_40:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v30, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", 609);
    int v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Unknown token ", 14);
    if (v32 >= 0) {
      uint64_t v22 = &v31;
    }
    else {
      uint64_t v22 = (long long *)v31;
    }
    if (v32 >= 0) {
      uint64_t v23 = HIBYTE(v32);
    }
    else {
      uint64_t v23 = *((void *)&v31 + 1);
    }
    unint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    unint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" (DuplicateStart|DuplicateSize|NumDuplicates)", 45);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v30);
  }
LABEL_57:
  int v27 = a1[13];
  int v28 = a1[2];
  if (v28 + a1[14] * v27 != a1[3])
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v30, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", 616);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Requested duplication doesn't match the output and input sizes", 62);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v30);
  }
  if (v27 < 0 || (int v29 = a1[12], v29 < 0) || v29 + v27 > v28)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v30, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", 620);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Duplication parameters out of range", 35);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v30);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete((void *)v31);
  }
}

void sub_E6A9C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::DuplicateComponent::WriteData(uint64_t a1, void *a2, int a3)
{
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteBasicType<int>(a2, a3);

  return kaldi::WriteBasicType<int>(a2, a3);
}

uint64_t kaldi::nnet1::DuplicateComponent::PropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v20, a3, 0, *(_DWORD *)(a3 + 20), 0, a1[2]);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v20, a2, 111, v6, v7);
  int v8 = a1[13];
  if (v8 >= 1)
  {
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v17, a2, 0, *(_DWORD *)(a2 + 20), (const char *)a1[12], v8);
    if ((int)a1[14] >= 1)
    {
      int v9 = 0;
      unint64_t v10 = a1[2];
      do
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v14, a3, 0, *(_DWORD *)(a3 + 20), (const char *)v10, a1[13]);
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v14, (uint64_t)&v17, 111, v11, v12);
        unint64_t v10 = (a1[13] + v10);
        uint64_t v14 = off_262D80;
        long long v15 = 0u;
        long long v16 = 0u;
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v14);
        ++v9;
      }
      while (v9 < a1[14]);
    }
    uint64_t v17 = off_262D80;
    long long v18 = 0u;
    long long v19 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v17);
  }
  BOOL v20 = off_262D80;
  long long v21 = 0u;
  long long v22 = 0u;
  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v20);
}

void sub_E6CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void (**a20)(),long long a21,long long a22)
{
  a20 = off_262D80;
  a21 = 0u;
  a22 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a20);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::DuplicateComponent::BackpropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v19, a4, 0, *(_DWORD *)(a4 + 20), 0, a1[2]);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)a5, (uint64_t)&v19, 111, v8, v9);
  long long v19 = off_262D80;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t result = fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v19);
  int v11 = a1[13];
  if (v11 >= 1)
  {
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v19, a5, 0, *(_DWORD *)(a5 + 20), (const char *)a1[12], v11);
    if ((int)a1[14] >= 1)
    {
      int v12 = 0;
      unint64_t v13 = a1[2];
      do
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v16, a4, 0, *(_DWORD *)(a4 + 20), (const char *)v13, a1[13]);
        kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v19, (uint64_t)&v16, 111, v14, v15, 1.0, 1.0);
        unint64_t v13 = (a1[13] + v13);
        long long v16 = off_262D80;
        long long v17 = 0u;
        long long v18 = 0u;
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v16);
        ++v12;
      }
      while (v12 < a1[14]);
    }
    long long v19 = off_262D80;
    long long v20 = 0u;
    long long v21 = 0u;
    return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v19);
  }
  return result;
}

void sub_E6EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void (**a14)(), long long a15, long long a16)
{
  a14 = off_262D80;
  a15 = 0u;
  a16 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a14);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::DuplicateComponent::ReadData(_DWORD *a1, void *a2, int a3, uint64_t a4, const char *a5)
{
  int v13 = 0;
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v13, a4, a5);
  a1[12] = v13;
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v13, v8, v9);
  a1[13] = v13;
  uint64_t result = kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v13, v10, v11);
  a1[14] = v13;
  return result;
}

void kaldi::nnet1::AddShift::Copy(kaldi::nnet1::AddShift *this)
{
}

void sub_E7048()
{
}

uint64_t kaldi::nnet1::AddShift::GetType(kaldi::nnet1::AddShift *this)
{
  return 1031;
}

uint64_t kaldi::nnet1::AddShift::Info(kaldi::nnet1::AddShift *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  (*(void (**)(kaldi::nnet1::AddShift *, void *, void))(*(void *)this + 168))(this, v12, 0);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\n shift_data", 12);
  kaldi::nnet1::MomentStatistics<float>((_DWORD *)this + 22, v3, v4, v5, v6);
  if ((v11 & 0x80u) == 0) {
    BOOL v7 = __p;
  }
  else {
    BOOL v7 = (void **)__p[0];
  }
  if ((v11 & 0x80u) == 0) {
    uint64_t v8 = v11;
  }
  else {
    uint64_t v8 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v7, v8);
  if ((char)v11 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_E7224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AddShift::InfoGradient(kaldi::nnet1::AddShift *this@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v21, "\n  shift_data_grad");
  kaldi::nnet1::MomentStatistics<float>((void *)this + 15, v4, v5, v6, v7);
  if ((v20 & 0x80u) == 0) {
    uint64_t v8 = v19;
  }
  else {
    uint64_t v8 = (void **)v19[0];
  }
  if ((v20 & 0x80u) == 0) {
    std::string::size_type v9 = v20;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v19[1];
  }
  uint64_t v10 = std::string::append(&v21, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  int v12 = std::string::append(&v22, ", lr-coef ");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v18 & 0x80u) == 0) {
    uint64_t v14 = __p;
  }
  else {
    uint64_t v14 = (void **)__p[0];
  }
  if ((v18 & 0x80u) == 0) {
    std::string::size_type v15 = v18;
  }
  else {
    std::string::size_type v15 = (std::string::size_type)__p[1];
  }
  long long v16 = std::string::append(&v23, (const std::string::value_type *)v14, v15);
  *a2 = *v16;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if ((char)v18 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if ((char)v20 < 0) {
    operator delete(v19[0]);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
}

void sub_E73A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::AddShift::InitData(uint64_t a1, uint64_t *a2)
{
  float v35 = 0.0;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 168), &v34);
  long long v32 = 0uLL;
  uint64_t v33 = 0;
  while (1)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_67;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)&v32, v4, v5);
    if ((SHIBYTE(v33) & 0x80000000) == 0) {
      break;
    }
    uint64_t v10 = *((void *)&v32 + 1);
    if (*((void *)&v32 + 1) == 11
      && (*(void *)v32 == 0x72615074696E493CLL ? (BOOL v11 = *(void *)(v32 + 3) == 0x3E6D617261507469) : (BOOL v11 = 0), v11))
    {
LABEL_36:
      long long v13 = &v35;
    }
    else
    {
      if (*((void *)&v32 + 1) == 15)
      {
        BOOL v12 = *(void *)v32 == 0x61526E7261654C3CLL && *(void *)(v32 + 7) == 0x3E66656F43657461;
        long long v13 = (float *)(a1 + 176);
        if (v12) {
          goto LABEL_56;
        }
        uint64_t v10 = *((void *)&v32 + 1);
      }
      if (v10 == 18)
      {
        if (*(void *)v32 == 0x6E6569646172473CLL
          && *(void *)(v32 + 8) == 0x7079546D726F4E74
          && *(_WORD *)(v32 + 16) == 15973)
        {
LABEL_45:
          kaldi::ReadToken(a2, 0, (uint64_t)&v34, v6, v7);
          goto LABEL_57;
        }
        uint64_t v10 = *((void *)&v32 + 1);
      }
      if (v10 != 9) {
        goto LABEL_58;
      }
      BOOL v16 = *(void *)v32 == 0x6461724778614D3CLL && *(unsigned char *)(v32 + 8) == 62;
      long long v13 = (float *)(a1 + 172);
      if (!v16)
      {
        uint64_t v10 = *((void *)&v32 + 1);
LABEL_58:
        if (v10 == 12)
        {
          uint64_t v8 = (long long *)v32;
          goto LABEL_62;
        }
LABEL_72:
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", 725);
        uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Unknown token ", 14);
        if (v33 >= 0) {
          int v27 = &v32;
        }
        else {
          int v27 = (long long *)v32;
        }
        if (v33 >= 0) {
          uint64_t v28 = HIBYTE(v33);
        }
        else {
          uint64_t v28 = *((void *)&v32 + 1);
        }
        int v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
        int v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", a typo in config?", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" (InitParam|LearnRateCoef|GradientNormType|MaxGrad)", 51);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31);
      }
    }
LABEL_56:
    kaldi::ReadBasicType<float>(a2, 0, v13, v6, v7);
LABEL_57:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  uint64_t v8 = &v32;
  switch(HIBYTE(v33))
  {
    case 9:
      goto LABEL_51;
    case 0xB:
      if ((void)v32 != 0x72615074696E493CLL || *(void *)((char *)&v32 + 3) != 0x3E6D617261507469) {
        goto LABEL_72;
      }
      goto LABEL_36;
    case 0xC:
      goto LABEL_62;
    case 0xF:
      BOOL v19 = (void)v32 == 0x61526E7261654C3CLL && *(void *)((char *)&v32 + 7) == 0x3E66656F43657461;
      long long v13 = (float *)(a1 + 176);
      if (!v19) {
        goto LABEL_50;
      }
      goto LABEL_56;
    case 0x12:
      if ((void)v32 == 0x6E6569646172473CLL
        && *((void *)&v32 + 1) == 0x7079546D726F4E74
        && (unsigned __int16)v33 == 15973)
      {
        goto LABEL_45;
      }
LABEL_50:
      if (HIBYTE(v33) == 9)
      {
LABEL_51:
        BOOL v20 = (void)v32 == 0x6461724778614D3CLL && BYTE8(v32) == 62;
        long long v13 = (float *)(a1 + 172);
        if (!v20) {
          goto LABEL_72;
        }
        goto LABEL_56;
      }
      if (HIBYTE(v33) != 12) {
        goto LABEL_72;
      }
      uint64_t v8 = &v32;
LABEL_62:
      uint64_t v21 = *(void *)v8;
      int v22 = *((_DWORD *)v8 + 2);
      if (v21 != 0x6E6F706D6F432F3CLL || v22 != 1047817829) {
        goto LABEL_72;
      }
LABEL_67:
      *(_DWORD *)(a1 + kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized<kaldi::nnet1::Quantizable16BitComponentItf>((uint64_t)this - 168) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v34);
      kaldi::CuVector<float>::Resize(a1 + 88, *(unsigned int *)(a1 + 8), 0, v24, v25);
      kaldi::CuVectorBase<float>::Set(a1 + 88, v35);
      if (SHIBYTE(v33) < 0) {
        operator delete((void *)v32);
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      return;
    default:
      goto LABEL_72;
  }
}

void sub_E7810(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 121) < 0) {
    operator delete(*(void **)(v1 - 144));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AddShift::WriteData(_DWORD *a1, void *a2, int a3)
{
  uint64_t v5 = a1 + 22;
  (*(void (**)(_DWORD *))(*(void *)a1 + 168))(a1);

  kaldi::CuVectorBase<float>::Write(v5, a2, a3, v6, v7);
}

uint64_t *kaldi::nnet1::AddShift::PropagateFnc(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, const char *a5)
{
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a3, a2, 111, a4, a5);

  return kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)a3, a1 + 88, v7, v8, v9, 1.0, 1.0);
}

double kaldi::nnet1::AddShift::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  while (kaldi::Peek(a2, a3) == 60)
  {
    long long v28 = 0uLL;
    uint64_t v29 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v28, v6, v7);
    if (SHIBYTE(v29) < 0)
    {
      uint64_t v13 = *((void *)&v28 + 1);
      if (*((void *)&v28 + 1) != 15
        || (*(void *)v28 == 0x61526E7261654C3CLL ? (BOOL v14 = *(void *)(v28 + 7) == 0x3E66656F43657461) : (BOOL v14 = 0),
            std::string::size_type v15 = (float *)(a1 + 176),
            !v14))
      {
        if (*((void *)&v28 + 1) == 18)
        {
          if (*(void *)v28 == 0x6E6569646172473CLL
            && *(void *)(v28 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v28 + 16) == 15973)
          {
            goto LABEL_46;
          }
          uint64_t v13 = *((void *)&v28 + 1);
        }
        if (v13 != 9) {
          goto LABEL_49;
        }
        BOOL v12 = (long long *)v28;
        goto LABEL_31;
      }
    }
    else
    {
      if (HIBYTE(v29) == 9)
      {
        BOOL v12 = &v28;
LABEL_31:
        uint64_t v18 = *(void *)v12;
        int v19 = *((unsigned __int8 *)v12 + 8);
        BOOL v20 = v18 == 0x6461724778614D3CLL && v19 == 62;
        std::string::size_type v15 = (float *)(a1 + 172);
        if (!v20)
        {
LABEL_49:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", 751);
          std::string v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
          if (v29 >= 0) {
            uint64_t v24 = &v28;
          }
          else {
            uint64_t v24 = (long long *)v28;
          }
          if (v29 >= 0) {
            uint64_t v25 = HIBYTE(v29);
          }
          else {
            uint64_t v25 = *((void *)&v28 + 1);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        goto LABEL_41;
      }
      if (HIBYTE(v29) != 15)
      {
        if (HIBYTE(v29) != 18) {
          goto LABEL_49;
        }
        BOOL v10 = (void)v28 == 0x6E6569646172473CLL && *((void *)&v28 + 1) == 0x7079546D726F4E74;
        if (!v10 || (unsigned __int16)v29 != 15973) {
          goto LABEL_49;
        }
LABEL_46:
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v27 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p, v8, v9);
        *(_DWORD *)(a1 + kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized<kaldi::nnet1::Quantizable16BitComponentItf>((uint64_t)this - 168) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v27) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_42;
      }
      BOOL v21 = (void)v28 == 0x61526E7261654C3CLL && *(void *)((char *)&v28 + 7) == 0x3E66656F43657461;
      std::string::size_type v15 = (float *)(a1 + 176);
      if (!v21) {
        goto LABEL_49;
      }
    }
LABEL_41:
    kaldi::ReadBasicType<float>(a2, a3, v15, v8, v9);
LABEL_42:
    if (SHIBYTE(v29) < 0) {
      operator delete((void *)v28);
    }
  }
  return kaldi::CuVector<float>::Read(a1 + 88, a2, a3, v6, v7);
}

void sub_E7C00()
{
}

void *kaldi::nnet1::AddShift::WriteConfig(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", a4, a5);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v8, v9);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 168), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v10, v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v12, v13);
  return kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
}

void sub_E7CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::AddShift::NumParams(kaldi::nnet1::AddShift *this)
{
  return *((unsigned int *)this + 26);
}

_DWORD *kaldi::nnet1::AddShift::GetParams(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::Vector<float>::Resize(a2, *(unsigned int *)(a1 + 8), 0, a4, a5);

  return kaldi::CuVectorBase<float>::CopyToVec<float>((_DWORD *)(a1 + 88), (uint64_t)a2, v7, v8, v9);
}

_DWORD *kaldi::nnet1::AddShift::SetParams(_DWORD *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(_DWORD *))(*(void *)a1 + 176))(a1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)&stru_2E8.addr + 5, "wei_src.Dim() == NumParams()", v7);
  }

  return kaldi::CuVectorBase<float>::CopyFromVec<float>(a1 + 22, a2, v5, v6, v7);
}

double kaldi::nnet1::AddShift::SumParams(kaldi::nnet1::AddShift *this)
{
  return kaldi::CuVectorBase<float>::Sum((uint64_t)this + 88);
}

void *kaldi::nnet1::AddShift::PerturbParams(kaldi::nnet1::AddShift *this, float a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v8 = *((unsigned int *)this + 26);
  v13[0] = off_262E60;
  memset(&v13[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v13, v8, 1u, a5, a6);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v13);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 88, (uint64_t)v13, v9, v10, v11, a2, 1.0);
  return kaldi::CuVector<float>::~CuVector(v13);
}

void sub_E7E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::AddShift::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8 = (_DWORD **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  (*((void (**)(_DWORD **, uint64_t, uint64_t, void, void))*v8 + 29))(v8, a2, a3, 0, 0);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a4, v9, 1, v10, v11);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v8[15], (uint64_t)a4, v12, v13, v14);
  std::string::size_type v15 = (uint64_t (*)(_DWORD **))*((void *)*v8 + 1);

  return v15(v8);
}

void kaldi::nnet1::AddShift::AccumGradients(kaldi::nnet1::AddShift *a1, uint64_t a2, _DWORD *a3, uint64_t a4, int a5)
{
  kaldi::nnet1::AddShift::EnsureCorrs(a1);
  *(_DWORD *)(*((void *)a1 + 23) + 4 * a5) = *(_DWORD *)(a2 + 20);
  uint64_t v13 = *((void *)a1 + 15) + 32 * a5;
  *(void *)(v13 + ++*(void *)(result + 24) = a4;

  kaldi::CuVectorBase<float>::AddRowSumMat(v13, a3, 1.0, 0.0, v10, v11, v12);
}

uint64_t kaldi::nnet1::AddShift::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 17std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a3;
  *(_DWORD *)(result + kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized<kaldi::nnet1::Quantizable16BitComponentItf>((uint64_t)this - 168) = a2;
  *(unsigned char *)(result + 208) = 0;
  return result;
}

void kaldi::nnet1::AddShift::NormalizeGradients(kaldi::nnet1::AddShift *this, float a2, int a3, uint64_t a4, uint64_t a5, const char *a6)
{
  int v6 = *((_DWORD *)this + 42);
  if (v6 == 3)
  {
    if (a2 >= 0.0 && a2 <= 1.0) {
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((void *)this + 15) + 32 * a3, *((void *)this + 18) + 32 * a3, a2, a4, a5, a6);
    }
  }
  else if (v6 == 2)
  {
    if (a2 > 0.0)
    {
      if (*((unsigned char *)this + 84)) {
        a2 = (float)*(int *)(*((void *)this + 23) + 4 * a3) * a2;
      }
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((void *)this + 15) + 32 * a3, (_DWORD *)(*((void *)this + 18) + 32 * a3), a4, a5, a6, a2);
    }
  }
  else if (v6 == 1 && a2 > 0.0)
  {
    if (*((unsigned char *)this + 84)) {
      a2 = (float)*(int *)(*((void *)this + 23) + 4 * a3) * a2;
    }
    kaldi::nnet1::UpdatableComponent::ClipGradient(*((void *)this + 15) + 32 * a3, a2);
  }
}

void kaldi::nnet1::AddShift::UpdateWeights(kaldi::nnet1::AddShift *this, void *a2, int a3)
{
  kaldi::nnet1::AddShift::EnsureCorrs(this);
  uint64_t v9 = *((unsigned int *)this + 20);
  if (a3 >= 0) {
    unsigned int v10 = a3;
  }
  else {
    unsigned int v10 = *((_DWORD *)this + 20);
  }
  if (v9 == 1) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v10;
  }
  if ((int)v11 > (int)v9) {
    kaldi::KaldiAssertFailure_((kaldi *)"UpdateWeights", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)&stru_338.size + 3, "batch_idx <= opts_.num_subbatches", v8);
  }
  float v12 = *((float *)this + 14);
  uint64_t v13 = *((void *)this + 15);
  uint64_t v14 = v13 + 32 * (int)v11;
  *(void *)(v14 + ++*(void *)(result + 24) = a2;
  *(void *)(*((void *)this + 18) + 32 * (int)v11 + ++*(void *)(result + 24) = a2;
  if (v11 == v9)
  {
    kaldi::CuVectorBase<float>::AddVec(v14, v13, v6, v7, v8, 1.0, 0.0);
    if (*((int *)this + 20) > 1)
    {
      uint64_t v15 = 1;
      uint64_t v16 = 32;
      do
      {
        kaldi::CuVectorBase<float>::AddVec(*((void *)this + 15) + 32 * (int)v11, *((void *)this + 15) + v16, v6, v7, v8, 1.0, 1.0);
        ++v15;
        v16 += 32;
      }
      while (v15 < *((int *)this + 20));
    }
    long long v17 = (int *)*((void *)this + 23);
    v17[(int)v11] = 0;
    if ((int)v9 >= 1)
    {
      int v18 = 0;
      int v19 = v17;
      do
      {
        int v20 = *v19++;
        v18 += v20;
        v17[(int)v11] = v18;
        --v9;
      }
      while (v9);
    }
  }
  if (*((unsigned char *)this + 84)) {
    float v12 = v12 / (float)*(int *)(*((void *)this + 23) + 4 * (int)v11);
  }
  if (*((float *)this + 43) >= 0.0) {
    (*(void (**)(kaldi::nnet1::AddShift *, uint64_t))(*(void *)this + 248))(this, v11);
  }
  *((void *)this + 14) = a2;
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 88, *((void *)this + 15) + 32 * (int)v11, v6, v7, v8, -(float)(v12 * *((float *)this + 44)), 1.0);
  BOOL v21 = (unsigned char *)*((void *)this + 23);
  if (v11 == *((_DWORD *)this + 20))
  {
    int v22 = (unsigned char *)*((void *)this + 24);
    if (v21 != v22)
    {
      bzero(v21, ((v22 - v21 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    }
  }
  else
  {
    *(_DWORD *)&v21[4 * (int)v11] = 0;
  }
}

void kaldi::nnet1::Rescale::Copy(kaldi::nnet1::Rescale *this)
{
}

void sub_E8334()
{
}

uint64_t kaldi::nnet1::Rescale::Info(kaldi::nnet1::Rescale *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  (*(void (**)(kaldi::nnet1::Rescale *, void *, void))(*(void *)this + 168))(this, v12, 0);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\n scale_data", 12);
  kaldi::nnet1::MomentStatistics<float>((_DWORD *)this + 22, v3, v4, v5, v6);
  if ((v11 & 0x80u) == 0) {
    uint64_t v7 = __p;
  }
  else {
    uint64_t v7 = (void **)__p[0];
  }
  if ((v11 & 0x80u) == 0) {
    uint64_t v8 = v11;
  }
  else {
    uint64_t v8 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v7, v8);
  if ((char)v11 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_E8508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Rescale::InfoGradient(kaldi::nnet1::Rescale *this@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v21, "\n  scale_data_grad");
  kaldi::nnet1::MomentStatistics<float>((void *)this + 15, v4, v5, v6, v7);
  if ((v20 & 0x80u) == 0) {
    uint64_t v8 = v19;
  }
  else {
    uint64_t v8 = (void **)v19[0];
  }
  if ((v20 & 0x80u) == 0) {
    std::string::size_type v9 = v20;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v19[1];
  }
  unsigned int v10 = std::string::append(&v21, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  float v12 = std::string::append(&v22, ", lr-coef ");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v18 & 0x80u) == 0) {
    uint64_t v14 = __p;
  }
  else {
    uint64_t v14 = (void **)__p[0];
  }
  if ((v18 & 0x80u) == 0) {
    std::string::size_type v15 = v18;
  }
  else {
    std::string::size_type v15 = (std::string::size_type)__p[1];
  }
  uint64_t v16 = std::string::append(&v23, (const std::string::value_type *)v14, v15);
  *a2 = *v16;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if ((char)v18 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if ((char)v20 < 0) {
    operator delete(v19[0]);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
}

void sub_E8684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Rescale::InitData(uint64_t a1, uint64_t *a2)
{
  float v35 = 0.0;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 216), &v34);
  long long v32 = 0uLL;
  uint64_t v33 = 0;
  while (1)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_67;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)&v32, v4, v5);
    if ((SHIBYTE(v33) & 0x80000000) == 0) {
      break;
    }
    uint64_t v10 = *((void *)&v32 + 1);
    if (*((void *)&v32 + 1) == 11
      && (*(void *)v32 == 0x72615074696E493CLL ? (BOOL v11 = *(void *)(v32 + 3) == 0x3E6D617261507469) : (BOOL v11 = 0), v11))
    {
LABEL_36:
      long long v13 = &v35;
    }
    else
    {
      if (*((void *)&v32 + 1) == 15)
      {
        BOOL v12 = *(void *)v32 == 0x61526E7261654C3CLL && *(void *)(v32 + 7) == 0x3E66656F43657461;
        long long v13 = (float *)(a1 + 224);
        if (v12) {
          goto LABEL_56;
        }
        uint64_t v10 = *((void *)&v32 + 1);
      }
      if (v10 == 18)
      {
        if (*(void *)v32 == 0x6E6569646172473CLL
          && *(void *)(v32 + 8) == 0x7079546D726F4E74
          && *(_WORD *)(v32 + 16) == 15973)
        {
LABEL_45:
          kaldi::ReadToken(a2, 0, (uint64_t)&v34, v6, v7);
          goto LABEL_57;
        }
        uint64_t v10 = *((void *)&v32 + 1);
      }
      if (v10 != 9) {
        goto LABEL_58;
      }
      BOOL v16 = *(void *)v32 == 0x6461724778614D3CLL && *(unsigned char *)(v32 + 8) == 62;
      long long v13 = (float *)(a1 + 220);
      if (!v16)
      {
        uint64_t v10 = *((void *)&v32 + 1);
LABEL_58:
        if (v10 == 12)
        {
          uint64_t v8 = (long long *)v32;
          goto LABEL_62;
        }
LABEL_72:
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", 1002);
        uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Unknown token ", 14);
        if (v33 >= 0) {
          uint64_t v27 = &v32;
        }
        else {
          uint64_t v27 = (long long *)v32;
        }
        if (v33 >= 0) {
          uint64_t v28 = HIBYTE(v33);
        }
        else {
          uint64_t v28 = *((void *)&v32 + 1);
        }
        uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
        int v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", a typo in config?", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" (InitParam)", 12);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31);
      }
    }
LABEL_56:
    kaldi::ReadBasicType<float>(a2, 0, v13, v6, v7);
LABEL_57:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  uint64_t v8 = &v32;
  switch(HIBYTE(v33))
  {
    case 9:
      goto LABEL_51;
    case 0xB:
      if ((void)v32 != 0x72615074696E493CLL || *(void *)((char *)&v32 + 3) != 0x3E6D617261507469) {
        goto LABEL_72;
      }
      goto LABEL_36;
    case 0xC:
      goto LABEL_62;
    case 0xF:
      BOOL v19 = (void)v32 == 0x61526E7261654C3CLL && *(void *)((char *)&v32 + 7) == 0x3E66656F43657461;
      long long v13 = (float *)(a1 + 224);
      if (!v19) {
        goto LABEL_50;
      }
      goto LABEL_56;
    case 0x12:
      if ((void)v32 == 0x6E6569646172473CLL
        && *((void *)&v32 + 1) == 0x7079546D726F4E74
        && (unsigned __int16)v33 == 15973)
      {
        goto LABEL_45;
      }
LABEL_50:
      if (HIBYTE(v33) == 9)
      {
LABEL_51:
        BOOL v20 = (void)v32 == 0x6461724778614D3CLL && BYTE8(v32) == 62;
        long long v13 = (float *)(a1 + 220);
        if (!v20) {
          goto LABEL_72;
        }
        goto LABEL_56;
      }
      if (HIBYTE(v33) != 12) {
        goto LABEL_72;
      }
      uint64_t v8 = &v32;
LABEL_62:
      uint64_t v21 = *(void *)v8;
      int v22 = *((_DWORD *)v8 + 2);
      if (v21 != 0x6E6F706D6F432F3CLL || v22 != 1047817829) {
        goto LABEL_72;
      }
LABEL_67:
      *(_DWORD *)(a1 + 216) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v34);
      kaldi::CuVector<float>::Resize(a1 + 88, *(unsigned int *)(a1 + 8), 0, v24, v25);
      kaldi::CuVectorBase<float>::Set(a1 + 88, v35);
      if (SHIBYTE(v33) < 0) {
        operator delete((void *)v32);
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      return;
    default:
      goto LABEL_72;
  }
}

void sub_E8AF4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 121) < 0) {
    operator delete(*(void **)(v1 - 144));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Rescale::PropagateFnc(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, const char *a5)
{
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a3, a2, 111, a4, a5);

  return kaldi::CuMatrixBase<float>::MulColsVec((uint64_t)a3, a1 + 88, v7, v8, v9);
}

uint64_t kaldi::nnet1::Rescale::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a5, a4, 111, a4, (const char *)a5);

  return kaldi::CuMatrixBase<float>::MulColsVec((uint64_t)a5, a1 + 88, v7, v8, v9);
}

double kaldi::nnet1::Rescale::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  while (kaldi::Peek(a2, a3) == 60)
  {
    long long v28 = 0uLL;
    uint64_t v29 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v28, v6, v7);
    if (SHIBYTE(v29) < 0)
    {
      uint64_t v13 = *((void *)&v28 + 1);
      if (*((void *)&v28 + 1) != 15
        || (*(void *)v28 == 0x61526E7261654C3CLL ? (BOOL v14 = *(void *)(v28 + 7) == 0x3E66656F43657461) : (BOOL v14 = 0),
            std::string::size_type v15 = (float *)(a1 + 224),
            !v14))
      {
        if (*((void *)&v28 + 1) == 18)
        {
          if (*(void *)v28 == 0x6E6569646172473CLL
            && *(void *)(v28 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v28 + 16) == 15973)
          {
            goto LABEL_46;
          }
          uint64_t v13 = *((void *)&v28 + 1);
        }
        if (v13 != 9) {
          goto LABEL_49;
        }
        BOOL v12 = (long long *)v28;
        goto LABEL_31;
      }
    }
    else
    {
      if (HIBYTE(v29) == 9)
      {
        BOOL v12 = &v28;
LABEL_31:
        uint64_t v18 = *(void *)v12;
        int v19 = *((unsigned __int8 *)v12 + 8);
        BOOL v20 = v18 == 0x6461724778614D3CLL && v19 == 62;
        std::string::size_type v15 = (float *)(a1 + 220);
        if (!v20)
        {
LABEL_49:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", 1027);
          std::string v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
          if (v29 >= 0) {
            uint64_t v24 = &v28;
          }
          else {
            uint64_t v24 = (long long *)v28;
          }
          if (v29 >= 0) {
            uint64_t v25 = HIBYTE(v29);
          }
          else {
            uint64_t v25 = *((void *)&v28 + 1);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        goto LABEL_41;
      }
      if (HIBYTE(v29) != 15)
      {
        if (HIBYTE(v29) != 18) {
          goto LABEL_49;
        }
        BOOL v10 = (void)v28 == 0x6E6569646172473CLL && *((void *)&v28 + 1) == 0x7079546D726F4E74;
        if (!v10 || (unsigned __int16)v29 != 15973) {
          goto LABEL_49;
        }
LABEL_46:
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v27 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p, v8, v9);
        *(_DWORD *)(a1 + 216) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v27) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_42;
      }
      BOOL v21 = (void)v28 == 0x61526E7261654C3CLL && *(void *)((char *)&v28 + 7) == 0x3E66656F43657461;
      std::string::size_type v15 = (float *)(a1 + 224);
      if (!v21) {
        goto LABEL_49;
      }
    }
LABEL_41:
    kaldi::ReadBasicType<float>(a2, a3, v15, v8, v9);
LABEL_42:
    if (SHIBYTE(v29) < 0) {
      operator delete((void *)v28);
    }
  }
  return kaldi::CuVector<float>::Read(a1 + 88, a2, a3, v6, v7);
}

void sub_E8EB8()
{
}

void *kaldi::nnet1::Rescale::WriteConfig(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", a4, a5);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v8, v9);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 216), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v10, v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v12, v13);
  return kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
}

void sub_E8F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *kaldi::nnet1::Rescale::SetParams(_DWORD *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(_DWORD *))(*(void *)a1 + 176))(a1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)&stru_3D8.reserved2, "wei_src.Dim() == NumParams()", v7);
  }

  return kaldi::CuVectorBase<float>::CopyFromVec<float>(a1 + 22, a2, v5, v6, v7);
}

void kaldi::nnet1::Rescale::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  kaldi::nnet1::Rescale::EnsureCorrs((kaldi::nnet1::Rescale *)a1);
  uint64_t v10 = *(void *)(a1 + 120) + 32 * a5;
  *(void *)(v10 + ++*(void *)(result + 24) = a4;
  kaldi::CuVectorBase<float>::SetZero(v10);
  *(_DWORD *)(*(void *)(a1 + 232) + 4 * a5) = *(_DWORD *)(a2 + 20);
  *(void *)(a1 + 200) = a4;
  kaldi::CuMatrix<float>::operator=(a1 + 168, a3);
  kaldi::CuMatrixBase<float>::MulElements(a1 + 168, a2, v11, v12, v13);
  uint64_t v17 = *(void *)(a1 + 120) + 32 * a5;

  kaldi::CuVectorBase<float>::AddRowSumMat(v17, (_DWORD *)(a1 + 168), 1.0, 1.0, v14, v15, v16);
}

uint64_t kaldi::nnet1::Rescale::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 220) = a3;
  *(_DWORD *)(result + 216) = a2;
  *(unsigned char *)(result + 256) = 0;
  return result;
}

void kaldi::nnet1::Rescale::NormalizeGradients(kaldi::nnet1::Rescale *this, float a2, int a3, uint64_t a4, uint64_t a5, const char *a6)
{
  int v6 = *((_DWORD *)this + 54);
  if (v6 == 3)
  {
    if (a2 >= 0.0 && a2 <= 1.0) {
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((void *)this + 15) + 32 * a3, *((void *)this + 18) + 32 * a3, a2, a4, a5, a6);
    }
  }
  else if (v6 == 2)
  {
    if (a2 > 0.0)
    {
      if (*((unsigned char *)this + 84)) {
        a2 = (float)*(int *)(*((void *)this + 29) + 4 * a3) * a2;
      }
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((void *)this + 15) + 32 * a3, (_DWORD *)(*((void *)this + 18) + 32 * a3), a4, a5, a6, a2);
    }
  }
  else if (v6 == 1 && a2 > 0.0)
  {
    if (*((unsigned char *)this + 84)) {
      a2 = (float)*(int *)(*((void *)this + 29) + 4 * a3) * a2;
    }
    kaldi::nnet1::UpdatableComponent::ClipGradient(*((void *)this + 15) + 32 * a3, a2);
  }
}

void kaldi::nnet1::Rescale::UpdateWeights(kaldi::nnet1::Rescale *this, void *a2, int a3)
{
  kaldi::nnet1::Rescale::EnsureCorrs(this);
  uint64_t v9 = *((unsigned int *)this + 20);
  if (a3 >= 0) {
    unsigned int v10 = a3;
  }
  else {
    unsigned int v10 = *((_DWORD *)this + 20);
  }
  if (v9 == 1) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v10;
  }
  if ((int)v11 > (int)v9) {
    kaldi::KaldiAssertFailure_((kaldi *)"UpdateWeights", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", &stru_478.sectname[4], "batch_idx <= opts_.num_subbatches", v8);
  }
  float v12 = *((float *)this + 14);
  uint64_t v13 = *((void *)this + 15);
  uint64_t v14 = v13 + 32 * (int)v11;
  *(void *)(v14 + ++*(void *)(result + 24) = a2;
  *(void *)(*((void *)this + 18) + 32 * (int)v11 + ++*(void *)(result + 24) = a2;
  if (v11 == v9)
  {
    kaldi::CuVectorBase<float>::AddVec(v14, v13, v6, v7, v8, 1.0, 0.0);
    if (*((int *)this + 20) > 1)
    {
      uint64_t v15 = 1;
      uint64_t v16 = 32;
      do
      {
        kaldi::CuVectorBase<float>::AddVec(*((void *)this + 15) + 32 * (int)v11, *((void *)this + 15) + v16, v6, v7, v8, 1.0, 1.0);
        ++v15;
        v16 += 32;
      }
      while (v15 < *((int *)this + 20));
    }
    uint64_t v17 = (int *)*((void *)this + 29);
    v17[(int)v11] = 0;
    if ((int)v9 >= 1)
    {
      int v18 = 0;
      int v19 = v17;
      do
      {
        int v20 = *v19++;
        v18 += v20;
        v17[(int)v11] = v18;
        --v9;
      }
      while (v9);
    }
  }
  if (*((unsigned char *)this + 84)) {
    float v12 = v12 / (float)*(int *)(*((void *)this + 29) + 4 * (int)v11);
  }
  if (*((float *)this + 55) >= 0.0) {
    (*(void (**)(kaldi::nnet1::Rescale *, uint64_t))(*(void *)this + 248))(this, v11);
  }
  *((void *)this + 14) = a2;
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 88, *((void *)this + 15) + 32 * (int)v11, v6, v7, v8, -(float)(v12 * *((float *)this + 56)), 1.0);
  BOOL v21 = (unsigned char *)*((void *)this + 29);
  if (v11 == *((_DWORD *)this + 20))
  {
    int v22 = (unsigned char *)*((void *)this + 30);
    if (v21 != v22)
    {
      bzero(v21, ((v22 - v21 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    }
  }
  else
  {
    *(_DWORD *)&v21[4 * (int)v11] = 0;
  }
}

void kaldi::nnet1::Rbm::Copy(kaldi::nnet1::Rbm *this)
{
}

void sub_E940C()
{
}

uint64_t kaldi::nnet1::Rbm::GetType(kaldi::nnet1::Rbm *this)
{
  return 1025;
}

void kaldi::nnet1::Rbm::InitData(unsigned int *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3, uint64_t a4, const char *a5)
{
  v138 = 0;
  uint64_t v139 = 0;
  uint64_t v140 = 0;
  v135 = 0;
  uint64_t v136 = 0;
  uint64_t v137 = 0;
  uint64_t v133 = 0;
  uint64_t v134 = 0;
  int v132 = 1036831949;
  int v131 = -1;
  v128 = 0;
  uint64_t v129 = 0;
  uint64_t v130 = 0;
  long long v126 = 0uLL;
  uint64_t v8 = a2 + 4;
  uint64_t v127 = 0;
  while (1)
  {
    if ((*((unsigned char *)v8 + *(void *)(*a2 - 24)) & 2) != 0) {
      goto LABEL_138;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)&v126, a4, a5);
    if ((SHIBYTE(v127) & 0x80000000) == 0) {
      break;
    }
    switch(*((void *)&v126 + 1))
    {
      case 0xCLL:
        int v41 = (long long *)v126;
        if (*(void *)v126 == 0x546E65646469483CLL && *(_DWORD *)(v126 + 8) == 1046835321)
        {
LABEL_93:
          long long v32 = (void **)&v135;
LABEL_106:
          kaldi::ReadToken(a2, 0, (uint64_t)v32, v9, v10);
        }
        else
        {
          if (*(void *)v126 != 0x536D6F646E61523CLL || *(_DWORD *)(v126 + 8) != 1046766949)
          {
            if (*((void *)&v126 + 1) == 12) {
              goto LABEL_133;
            }
            goto LABEL_251;
          }
LABEL_24:
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v131, v9, v10);
        }
LABEL_131:
        std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
        break;
      case 0xDLL:
        if (*(void *)v126 == 0x656C62697369563CLL && *(void *)(v126 + 5) == 0x3E65707954656C62)
        {
LABEL_92:
          long long v32 = (void **)&v138;
          goto LABEL_106;
        }
        if (*(void *)v126 != 0x74536D617261503CLL || *(void *)(v126 + 5) != 0x3E7665646474536DLL) {
          goto LABEL_251;
        }
LABEL_91:
        uint64_t v29 = (float *)&v132;
        goto LABEL_130;
      case 0x10:
        if (*(void *)v126 != 0x426E65646469483CLL || *(void *)(v126 + 8) != 0x3E6E61654D736169) {
          goto LABEL_251;
        }
LABEL_112:
        uint64_t v29 = (float *)&v133 + 1;
        goto LABEL_130;
      case 0x11:
        if (*(void *)v126 == 0x656C62697369563CLL
          && *(void *)(v126 + 8) == 0x6E61654D73616942
          && *(unsigned char *)(v126 + 16) == 62)
        {
LABEL_129:
          uint64_t v29 = (float *)&v134 + 1;
        }
        else
        {
          if (*(void *)v126 != 0x426E65646469483CLL
            || *(void *)(v126 + 8) != 0x65676E6152736169
            || *(unsigned char *)(v126 + 16) != 62)
          {
            goto LABEL_251;
          }
LABEL_128:
          uint64_t v29 = (float *)&v133;
        }
LABEL_130:
        kaldi::ReadBasicType<float>(a2, 0, v29, v9, v10);
        goto LABEL_131;
      case 0x12:
        if (*(void *)v126 != 0x656C62697369563CLL
          || *(void *)(v126 + 8) != 0x676E615273616942
          || *(_WORD *)(v126 + 16) != 15973)
        {
          goto LABEL_251;
        }
LABEL_81:
        uint64_t v29 = (float *)&v134;
        goto LABEL_130;
      case 0x19:
        if (*(void *)v126 != 0x656C62697369563CLL
          || *(void *)(v126 + 8) != 0x6E766D4373616942
          || *(void *)(v126 + 16) != 0x656D616E656C6946
          || *(unsigned char *)(v126 + 24) != 62)
        {
          goto LABEL_251;
        }
LABEL_105:
        long long v32 = (void **)&v128;
        goto LABEL_106;
      default:
        goto LABEL_251;
    }
  }
  switch(HIBYTE(v127))
  {
    case 0xC:
      if ((void)v126 == 0x546E65646469483CLL && DWORD2(v126) == 1046835321) {
        goto LABEL_93;
      }
      if ((void)v126 == 0x536D6F646E61523CLL && DWORD2(v126) == 1046766949) {
        goto LABEL_24;
      }
      int v41 = &v126;
      break;
    case 0xD:
      if ((void)v126 == 0x656C62697369563CLL && *(void *)((char *)&v126 + 5) == 0x3E65707954656C62) {
        goto LABEL_92;
      }
      if ((void)v126 != 0x74536D617261503CLL || *(void *)((char *)&v126 + 5) != 0x3E7665646474536DLL) {
        goto LABEL_251;
      }
      goto LABEL_91;
    case 0x10:
      if ((void)v126 != 0x426E65646469483CLL || *((void *)&v126 + 1) != 0x3E6E61654D736169) {
        goto LABEL_251;
      }
      goto LABEL_112;
    case 0x11:
      if ((void)v126 == 0x656C62697369563CLL
        && *((void *)&v126 + 1) == 0x6E61654D73616942
        && v127 == 62)
      {
        goto LABEL_129;
      }
      if ((void)v126 != 0x426E65646469483CLL
        || *((void *)&v126 + 1) != 0x65676E6152736169
        || v127 != 62)
      {
        goto LABEL_251;
      }
      goto LABEL_128;
    case 0x12:
      if ((void)v126 != 0x656C62697369563CLL
        || *((void *)&v126 + 1) != 0x676E615273616942
        || (unsigned __int16)v127 != 15973)
      {
        goto LABEL_251;
      }
      goto LABEL_81;
    case 0x19:
      if ((void)v126 != 0x656C62697369563CLL
        || *((void *)&v126 + 1) != 0x6E766D4373616942
        || v127 != 0x656D616E656C6946
        || v128 != 62)
      {
        goto LABEL_251;
      }
      goto LABEL_105;
    default:
      goto LABEL_251;
  }
LABEL_133:
  uint64_t v42 = *(void *)v41;
  int v43 = *((_DWORD *)v41 + 2);
  if (v42 != 0x6E6F706D6F432F3CLL || v43 != 1047817829)
  {
LABEL_251:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v112, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-rbm.h", 131);
    std::string v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"Unknown token ", 14);
    if (v127 >= 0) {
      int v102 = &v126;
    }
    else {
      int v102 = (long long *)v126;
    }
    if (v127 >= 0) {
      uint64_t v103 = HIBYTE(v127);
    }
    else {
      uint64_t v103 = *((void *)&v126 + 1);
    }
    int v104 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)v102, v103);
    v105 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)" Typo in config?", 16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)" (VisibleType|HiddenType|VisibleBiasMean|VisibleBiasRange|HiddenBiasMean|HiddenBiasRange|ParamStddev|VisibleBiasCmvnFilename|RandomSeed)", 136);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v112);
  }
LABEL_138:
  if ((SHIBYTE(v140) & 0x80000000) == 0)
  {
    BOOL v45 = &v138;
    switch(HIBYTE(v140))
    {
      case 4:
        int v46 = (int)v138;
        goto LABEL_143;
      case 5:
        if (v138 != 1937072487 || BYTE4(v138) != 115) {
          goto LABEL_260;
        }
        goto LABEL_169;
      case 8:
        goto LABEL_156;
      case 9:
        if (v138 != (unsigned char *)0x6C6C756F6E726542 || v139 != 105) {
          goto LABEL_260;
        }
        goto LABEL_163;
      default:
        goto LABEL_260;
    }
  }
  switch(v139)
  {
    case 4:
      int v46 = *(_DWORD *)v138;
LABEL_143:
      if (v46 != 1852990818) {
        goto LABEL_260;
      }
      goto LABEL_163;
    case 5:
      if (*(_DWORD *)v138 != 1937072487 || v138[4] != 115) {
        goto LABEL_260;
      }
      goto LABEL_169;
    case 8:
      BOOL v45 = v138;
LABEL_156:
      if (*v45 != 0x6E61697373756147) {
        goto LABEL_260;
      }
LABEL_169:
      int v50 = 1;
      goto LABEL_170;
    case 9:
      if (*(void *)v138 != 0x6C6C756F6E726542 || v138[8] != 105) {
        goto LABEL_260;
      }
LABEL_163:
      int v50 = 0;
LABEL_170:
      a1[74] = v50;
      if ((v137 & 0x8000000000000000) == 0)
      {
        unint64_t v52 = &v135;
        switch(HIBYTE(v137))
        {
          case 4:
            int v53 = (int)v135;
            goto LABEL_175;
          case 5:
            if (v135 != 1937072487 || BYTE4(v135) != 115) {
              goto LABEL_267;
            }
            goto LABEL_201;
          case 8:
            goto LABEL_188;
          case 9:
            if (v135 != (unsigned char *)0x6C6C756F6E726542 || v136 != 105) {
              goto LABEL_267;
            }
            goto LABEL_195;
          default:
            goto LABEL_267;
        }
      }
      break;
    default:
LABEL_260:
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v112, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-rbm.h", 142);
      v106 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"Wrong <VisibleType>", 19);
      if (v140 >= 0) {
        v107 = &v138;
      }
      else {
        v107 = (unsigned char **)v138;
      }
      if (v140 >= 0) {
        uint64_t v108 = HIBYTE(v140);
      }
      else {
        uint64_t v108 = v139;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)v107, v108);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v112);
  }
  switch(v136)
  {
    case 4:
      int v53 = *(_DWORD *)v135;
LABEL_175:
      if (v53 != 1852990818) {
        goto LABEL_267;
      }
      goto LABEL_195;
    case 5:
      if (*(_DWORD *)v135 != 1937072487 || v135[4] != 115) {
        goto LABEL_267;
      }
      goto LABEL_201;
    case 8:
      unint64_t v52 = v135;
LABEL_188:
      if (*v52 != 0x6E61697373756147) {
        goto LABEL_267;
      }
LABEL_201:
      int v57 = 1;
      goto LABEL_202;
    case 9:
      if (*(void *)v135 != 0x6C6C756F6E726542 || v135[8] != 105) {
        goto LABEL_267;
      }
LABEL_195:
      int v57 = 0;
LABEL_202:
      a1[75] = v57;
      if (v131 >= 1) {
        kaldi::UniformRandomNumber::SetRandomSeeds(a3, v131);
      }
      kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v122, a3);
      kaldi::Matrix<float>::Matrix((uint64_t)&v118, a1[3], a1[2], 0, 0);
      int v62 = a1[3];
      if (v62 >= 1)
      {
        int v63 = 0;
        LODWORD(v64) = a1[2];
        do
        {
          if ((int)v64 >= 1)
          {
            unint64_t v65 = 0;
            do
            {
              float v66 = *(float *)&v132;
              kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v122, 0, v59, v60, v61);
              if (v120 <= v63 || v65 >= v119) {
                kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)&stru_68.addr, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v61);
              }
              *(float *)(v118 + 4 * v63 * v121 + 4 * v65++) = v66 * v67;
              int64_t v64 = (int)a1[2];
            }
            while ((uint64_t)v65 < v64);
            int v62 = a1[3];
          }
          ++v63;
        }
        while (v63 < v62);
      }
      kaldi::CuMatrix<float>::operator=((uint64_t)(a1 + 18), (kaldi::ContextDependency *)&v118);
      uint64_t v69 = a1[3];
      uint64_t v116 = 0;
      uint64_t v117 = 0;
      v115 = 0;
      kaldi::Vector<float>::Resize((void **)&v115, v69, 0, v70, v71);
      if ((int)a1[3] < 1)
      {
        uint64_t v78 = v116;
      }
      else
      {
        unint64_t v75 = 0;
        do
        {
          float v76 = *((float *)&v133 + 1);
          float v77 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v72, v73, v74);
          uint64_t v78 = v116;
          if (v75 >= v116) {
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", stru_68.sectname, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v74);
          }
          float v79 = v76 + (v77 + -0.5) * *(float *)&v133;
          v115[v75++] = v79;
        }
        while ((uint64_t)v75 < (int)a1[3]);
      }
      kaldi::CuVector<float>::Resize((uint64_t)(a1 + 38), v78, 1u, v73, v74);
      kaldi::CuVectorBase<float>::CopyFromVec<float>(a1 + 38, (uint64_t)&v115, v80, v81, v82);
      if (SHIBYTE(v130) < 0)
      {
        if (v129)
        {
LABEL_223:
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v112, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-rbm.h", 174);
            uint64_t v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"Initializing from <VisibleBiasCmvnFilename> ", 44);
            if (v130 >= 0) {
              uint64_t v86 = (void **)&v128;
            }
            else {
              uint64_t v86 = v128;
            }
            if (v130 >= 0) {
              uint64_t v87 = HIBYTE(v130);
            }
            else {
              uint64_t v87 = v129;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)v86, v87);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v112);
          }
          kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)&v112);
        }
      }
      else if (HIBYTE(v130))
      {
        goto LABEL_223;
      }
      uint64_t v88 = a1[2];
      uint64_t v113 = 0;
      uint64_t v114 = 0;
      v112 = 0;
      kaldi::Vector<float>::Resize((void **)&v112, v88, 0, v83, v84);
      if ((int)a1[2] < 1)
      {
        uint64_t v95 = v113;
      }
      else
      {
        unint64_t v92 = 0;
        do
        {
          float v93 = *((float *)&v134 + 1);
          float v94 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v89, v90, v91);
          uint64_t v95 = v113;
          if (v92 >= v113) {
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", stru_68.sectname, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v91);
          }
          float v96 = v93 + (v94 + -0.5) * *(float *)&v134;
          v112[v92++] = v96;
        }
        while ((uint64_t)v92 < (int)a1[2]);
      }
      std::string v97 = a1 + 30;
      kaldi::CuVector<float>::Resize((uint64_t)v97, v95, 1u, v90, v91);
      kaldi::CuVectorBase<float>::CopyFromVec<float>(v97, (uint64_t)&v112, v98, v99, v100);
      kaldi::Vector<float>::Destroy((uint64_t)&v112);
      kaldi::Vector<float>::Destroy((uint64_t)&v115);
      kaldi::Matrix<float>::~Matrix((uint64_t)&v118);
      if (__p)
      {
        v125 = __p;
        operator delete(__p);
      }
      v112 = (float *)&v123;
      std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
      if (SHIBYTE(v127) < 0) {
        operator delete((void *)v126);
      }
      if (SHIBYTE(v130) < 0) {
        operator delete(v128);
      }
      if (SHIBYTE(v137) < 0) {
        operator delete(v135);
      }
      if (SHIBYTE(v140) < 0) {
        operator delete(v138);
      }
      return;
    default:
LABEL_267:
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v112, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-rbm.h", 146);
      v109 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"Wrong <HiddenType>", 18);
      if (v137 >= 0) {
        v110 = &v135;
      }
      else {
        v110 = (unsigned char **)v135;
      }
      if (v137 >= 0) {
        uint64_t v111 = HIBYTE(v137);
      }
      else {
        uint64_t v111 = v136;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)v110, v111);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v112);
  }
}

void sub_EA3B4()
{
  kaldi::Vector<float>::Destroy(&v0);
  JUMPOUT(0xEA3DCLL);
}

void sub_EA3CC(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x247]) < 0) {
    operator delete((void *)STACK[0x230]);
  }
  if (*(char *)(v1 - 225) < 0) {
    operator delete(*(void **)(v1 - 248));
  }
  if (*(char *)(v1 - 177) < 0) {
    operator delete(*(void **)(v1 - 200));
  }
  if (*(char *)(v1 - 153) < 0) {
    operator delete(*(void **)(v1 - 176));
  }
  _Unwind_Resume(a1);
}

void sub_EA3D4()
{
  kaldi::Matrix<float>::~Matrix(&v0);
  kaldi::GaussRandomNumber::~GaussRandomNumber((kaldi::GaussRandomNumber *)&v1);
  JUMPOUT(0xEA3ECLL);
}

void kaldi::nnet1::Rbm::WriteData(_DWORD *a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  int v8 = a1[74];
  if (v8)
  {
    if (v8 != 1)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v18, "WriteData", "../subproject/libquasar/libkaldi/src/nnet/nnet-rbm.h", 224);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Unknown type ", 13);
      std::ostream::operator<<();
      goto LABEL_14;
    }
    uint64_t v9 = "gauss";
  }
  else
  {
    uint64_t v9 = "bern";
  }
  kaldi::WriteToken(a2, a3, (kaldi *)v9, a4, a5);
  int v12 = a1[75];
  if (v12)
  {
    if (v12 == 1)
    {
      uint64_t v13 = "gauss";
      goto LABEL_9;
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v18, "WriteData", "../subproject/libquasar/libkaldi/src/nnet/nnet-rbm.h", 229);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Unknown type ", 13);
    std::ostream::operator<<();
LABEL_14:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v18);
  }
  uint64_t v13 = "bern";
LABEL_9:
  kaldi::WriteToken(a2, a3, (kaldi *)v13, v10, v11);
  kaldi::CuMatrixBase<float>::Write((uint64_t)(a1 + 18), a2, (int)a3, 0);
  kaldi::CuVectorBase<float>::Write(a1 + 30, a2, (int)a3, v14, v15);

  kaldi::CuVectorBase<float>::Write(a1 + 38, a2, (int)a3, v16, v17);
}

void kaldi::nnet1::Rbm::PropagateFnc(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, const char *a5)
{
  kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)a3, a1 + 152, (uint64_t)a3, a4, a5, 1.0, 0.0);
  kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)a3, a2, CblasNoTrans, a1 + 72, &stru_68.sectname[8], 1.0, 1.0);
  if (!*(_DWORD *)(a1 + 300))
  {
    kaldi::CuMatrixBase<float>::Sigmoid(a3, a3, v8, v9, v10);
  }
}

void kaldi::nnet1::Rbm::ReadData(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  long long v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  std::string __p = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  kaldi::ReadToken(a2, a3, (uint64_t)&v32, a4, a5);
  kaldi::ReadToken(a2, a3, (uint64_t)&__p, v8, v9);
  if ((SHIBYTE(v34) & 0x80000000) == 0)
  {
    if (HIBYTE(v34) != 4)
    {
      if (HIBYTE(v34) != 5) {
        goto LABEL_18;
      }
      uint64_t v10 = (unsigned __int8 *)&v32;
      goto LABEL_9;
    }
    if (v32 != 1852990818) {
      goto LABEL_18;
    }
LABEL_16:
    int v14 = 0;
    goto LABEL_17;
  }
  if (v33 == 4 && *(_DWORD *)v32 == 1852990818) {
    goto LABEL_16;
  }
  if (v33 != 5) {
    goto LABEL_18;
  }
  uint64_t v10 = (unsigned __int8 *)v32;
LABEL_9:
  int v11 = *(_DWORD *)v10;
  int v12 = v10[4];
  if (v11 == 1937072487 && v12 == 115)
  {
    int v14 = 1;
LABEL_17:
    a1[74] = v14;
  }
LABEL_18:
  if ((SHIBYTE(v31) & 0x80000000) == 0)
  {
    if (HIBYTE(v31) != 4)
    {
      if (HIBYTE(v31) != 5) {
        goto LABEL_35;
      }
      p_p = (unsigned __int8 *)&__p;
      goto LABEL_26;
    }
    if (__p != 1852990818) {
      goto LABEL_35;
    }
LABEL_33:
    int v19 = 0;
    goto LABEL_34;
  }
  if (v30 == 4 && *(_DWORD *)__p == 1852990818) {
    goto LABEL_33;
  }
  if (v30 != 5) {
    goto LABEL_35;
  }
  p_p = (unsigned __int8 *)__p;
LABEL_26:
  int v16 = *(_DWORD *)p_p;
  int v17 = p_p[4];
  if (v16 == 1937072487 && v17 == 115)
  {
    int v19 = 1;
LABEL_34:
    a1[75] = v19;
  }
LABEL_35:
  kaldi::CuMatrix<float>::Read((uint64_t)(a1 + 18), a2, a3, 0);
  kaldi::CuVector<float>::Read((uint64_t)(a1 + 30), a2, a3, v20, v21);
  kaldi::CuVector<float>::Read((uint64_t)(a1 + 38), a2, a3, v22, v23);
  int v25 = a1[23];
  if (v25 != a1[3])
  {
    uint64_t v27 = "vis_hid_.NumRows() == output_dim_";
    long long v28 = (unsigned char *)(&stru_B8 + 30);
    goto LABEL_48;
  }
  int v26 = a1[22];
  if (v26 != a1[2])
  {
    uint64_t v27 = "vis_hid_.NumCols() == input_dim_";
    long long v28 = (unsigned char *)(&stru_B8 + 31);
    goto LABEL_48;
  }
  if (a1[34] != v26)
  {
    uint64_t v27 = "vis_bias_.Dim() == input_dim_";
    long long v28 = (unsigned char *)(&stru_B8 + 32);
    goto LABEL_48;
  }
  if (a1[42] != v25)
  {
    uint64_t v27 = "hid_bias_.Dim() == output_dim_";
    long long v28 = (char *)&stru_B8.addr + 1;
LABEL_48:
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-rbm.h", v28, v27, v24);
  }
  if (SHIBYTE(v31) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(v32);
  }
}

void sub_EA978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Rbm::Reconstruct(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (a1[3] != *(_DWORD *)(a2 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14, "Reconstruct", "../subproject/libquasar/libkaldi/src/nnet/nnet-rbm.h", 253);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Nonmatching dims, component:", 28);
    uint64_t v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" data:", 6);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
  }
  uint64_t v8 = a1[2];
  uint64_t v9 = *(unsigned int *)(a2 + 20);
  if (__PAIR64__(v9, v8) != *(void *)(a3 + 16)) {
    kaldi::CuMatrix<float>::Resize(a3, v9, v8, 0, 0);
  }
  kaldi::CuMatrixBase<float>::AddVecToRows(a3, (uint64_t)(a1 + 30), v8, a4, a5, 1.0, 0.0);
  kaldi::CuMatrixBase<float>::AddMatMat(a3, a2, CblasNoTrans, (uint64_t)(a1 + 18), &stru_68.sectname[7], 1.0, 1.0);
  if (!a1[74])
  {
    kaldi::CuMatrixBase<float>::Sigmoid((_DWORD *)a3, (_DWORD *)a3, v10, v11, v12);
  }
}

void kaldi::nnet1::Rbm::RbmUpdate(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t a5)
{
  int v5 = a2[5];
  BOOL v7 = v5 == a3[5] && v5 == a4[5] && v5 == *(_DWORD *)(a5 + 20);
  if (!v7
    || (int v10 = a2[4], v10 != a4[4])
    || (int v13 = a3[4], v13 != *(_DWORD *)(a5 + 16))
    || v10 != *(_DWORD *)(a1 + 8)
    || v13 != *(_DWORD *)(a1 + 12))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"RbmUpdate", "../subproject/libquasar/libkaldi/src/nnet/nnet-rbm.h", stru_108.segname, "pos_vis.NumRows() == pos_hid.NumRows() && pos_vis.NumRows() == neg_vis.NumRows() && pos_vis.NumRows() == neg_hid.NumRows() && pos_vis.NumCols() == neg_vis.NumCols() && pos_hid.NumCols() == neg_hid.NumCols() && pos_vis.NumCols() == input_dim_ && pos_hid.NumCols() == output_dim_", (const char *)a5);
  }
  uint64_t v15 = *(unsigned int *)(a1 + 92);
  if (*(_DWORD *)(a1 + 204) == v15)
  {
    uint64_t v16 = *(unsigned int *)(a1 + 88);
    if (*(_DWORD *)(a1 + 200) == v16)
    {
      if (*(_DWORD *)(a1 + 248) == *(_DWORD *)(a1 + 136))
      {
        uint64_t v16 = *(unsigned int *)(a1 + 200);
        if (*(_DWORD *)(a1 + 280) == *(_DWORD *)(a1 + 168)) {
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v16 = *(unsigned int *)(a1 + 200);
      }
    }
  }
  else
  {
    uint64_t v16 = *(unsigned int *)(a1 + 88);
  }
  kaldi::CuMatrix<float>::Resize(a1 + 184, v15, v16, 0, 0);
  kaldi::CuVector<float>::Resize(a1 + 232, *(unsigned int *)(a1 + 136), 0, v17, v18);
  kaldi::CuVector<float>::Resize(a1 + 264, *(unsigned int *)(a1 + 168), 0, v19, v20);
LABEL_20:
  if (*(_DWORD *)(a1 + 296) == 1
    && (kaldi::nnet1::CheckNanInf<float>((uint64_t)a2, "pos_vis", v16, (uint64_t)a4, (const char *)a5),
        kaldi::nnet1::CheckNanInf<float>((uint64_t)a3, "pos_hid", v21, v22, v23),
        kaldi::nnet1::CheckNanInf<float>((uint64_t)a4, "neg_vis", v24, v25, v26),
        kaldi::nnet1::CheckNanInf<float>(a5, "pos_hid", v27, v28, v29),
        float v34 = kaldi::nnet1::ComputeStdDev<float>((uint64_t)a2, v30, v31, v32, v33),
        float v39 = kaldi::nnet1::ComputeStdDev<float>((uint64_t)a4, v35, v36, v37, v38),
        (float)(v34 + v34) < v39))
  {
    kaldi::CuMatrixBase<float>::Scale(a1 + 72, v34 / v39);
    kaldi::CuVectorBase<float>::Scale(a1 + 120, v34 / v39);
    kaldi::CuVectorBase<float>::Scale(a1 + 152, v34 / v39);
    float v40 = *(float *)(a1 + 48) * 0.9;
    *(float *)(a1 + 48) = v40;
    kaldi::CuMatrixBase<float>::SetZero(a1 + 184);
    kaldi::CuVectorBase<float>::SetZero(a1 + 232);
    kaldi::CuVectorBase<float>::SetZero(a1 + 264);
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v74, "RbmUpdate", "../subproject/libquasar/libkaldi/src/nnet/nnet-rbm.h", 337);
      int v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"Mismatch between pos_vis and neg_vis variances, ", 48);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"danger of weight explosion. a) Reducing weights with scale ", 59);
      uint64_t v42 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" b) Lowering learning rate to ", 30);
      int v43 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" [pos_vis_std:", 14);
      int v44 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)",neg_vis_std:", 13);
      BOOL v45 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"]", 1);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v74);
    }
  }
  else
  {
    float v47 = *(float *)(a1 + 48);
    float v46 = *(float *)(a1 + 52);
    float v48 = *(float *)(a1 + 68);
    float v49 = (float)(int)a2[5];
    float v50 = (float)-v47 / v49;
    kaldi::CuMatrixBase<float>::AddMatMat(a1 + 184, a5, CblasTrans, (uint64_t)a4, &stru_68.sectname[7], v50, v46);
    float v51 = v47 / v49;
    kaldi::CuMatrixBase<float>::AddMatMat(a1 + 184, (uint64_t)a3, CblasTrans, (uint64_t)a2, &stru_68.sectname[7], v51, 1.0);
    kaldi::CuMatrixBase<float>::AddMat(a1 + 184, a1 + 72, 111, v52, v53, -(float)(v47 * v48), 1.0);
    kaldi::CuMatrixBase<float>::AddMat(a1 + 72, a1 + 184, 111, v54, v55, 1.0, 1.0);
    kaldi::CuVectorBase<float>::AddRowSumMat(a1 + 232, a4, v50, v46, v56, v57, v58);
    kaldi::CuVectorBase<float>::AddRowSumMat(a1 + 232, a2, v51, 1.0, v59, v60, v61);
    kaldi::CuVectorBase<float>::AddVec(a1 + 120, a1 + 232, v62, v63, v64, 1.0, 1.0);
    kaldi::CuVectorBase<float>::AddRowSumMat(a1 + 264, (_DWORD *)a5, v50, v46, v65, v66, v67);
    kaldi::CuVectorBase<float>::AddRowSumMat(a1 + 264, a3, v51, 1.0, v68, v69, v70);
    kaldi::CuVectorBase<float>::AddVec(a1 + 152, a1 + 264, v71, v72, v73, 1.0, 1.0);
  }
}

void sub_EAF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::Rbm::VisType(kaldi::nnet1::Rbm *this)
{
  return *((unsigned int *)this + 74);
}

uint64_t kaldi::nnet1::Rbm::HidType(kaldi::nnet1::Rbm *this)
{
  return *((unsigned int *)this + 75);
}

void *kaldi::nnet1::Rbm::WriteAsNnet(_DWORD *a1, void *a2, uint64_t a3)
{
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)((char *)&stru_B8.reserved2 + 1), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p, v6, v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteBasicType<int>(a2, a3);
  if ((a3 & 1) == 0) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
  }
  kaldi::CuMatrixBase<float>::Write((uint64_t)(a1 + 18), a2, a3, 0);
  kaldi::CuVectorBase<float>::Write(a1 + 38, a2, a3, v8, v9);
  uint64_t result = (void *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 200))(a1);
  if (result)
  {
    if (a3) {
      return result;
    }
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
  }
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)&stru_1F8.sectname[12], &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p, v11, v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteBasicType<int>(a2, a3);
  uint64_t result = (void *)kaldi::WriteBasicType<int>(a2, a3);
  if ((a3 & 1) == 0) {
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
  }
  return result;
}

void sub_EB0AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::MultiSoftmax::Copy(kaldi::nnet1::MultiSoftmax *this)
{
}

void sub_EB130()
{
}

uint64_t kaldi::nnet1::MultiSoftmax::GetType(kaldi::nnet1::MultiSoftmax *this)
{
  return 522;
}

void kaldi::nnet1::MultiSoftmax::InitData(std::vector<int> *this, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  BOOL v7 = a2 + 4;
  uint64_t v8 = this + 2;
  while ((*((unsigned char *)v7 + *(void *)(*a2 - 24)) & 2) == 0)
  {
    kaldi::ReadToken(a2, 0, (uint64_t)&v16, a4, a5);
    if (SHIBYTE(v18) < 0)
    {
      if (v17 != 8) {
        goto LABEL_13;
      }
      uint64_t v9 = v16;
    }
    else
    {
      if (SHIBYTE(v18) != 8) {
        goto LABEL_13;
      }
      uint64_t v9 = (void **)&v16;
    }
    if (*v9 != (void *)0x3E736D6944534D3CLL)
    {
LABEL_13:
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-multisoftmax-component.h", 38);
      int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Unknown token ", 14);
      if (v18 >= 0) {
        uint64_t v11 = (void **)&v16;
      }
      else {
        uint64_t v11 = v16;
      }
      if (v18 >= 0) {
        uint64_t v12 = HIBYTE(v18);
      }
      else {
        uint64_t v12 = v17;
      }
      int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
      int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", a typo in config?", 19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" (MSDims)", 9);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
    }
    kaldi::ReadIntegerVector<int>(a2, 0, v8, 0, 0, 0, 0);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  kaldi::nnet1::BlockSoftmax::InitOffset(this);
  if (SHIBYTE(v18) < 0) {
    operator delete(v16);
  }
}

void sub_EB2EC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 49) < 0) {
    operator delete(*(void **)(v1 - 72));
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Recurrent::HistoryStateSize(kaldi::nnet1::Recurrent *this)
{
  return *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12);
}

void kaldi::nnet1::Recurrent::ResetHistoryState(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "../subproject/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)&stru_B8.addr + 3, "batch_idx >= 0 && batch_idx < ropts_.num_subbatches", v8);
  }
  unint64_t v9 = a2[1];
  uint64_t v10 = *(void *)(a1 + 8) + 48 * a4;
  if (v9 != *(_DWORD *)(v10 + 20)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "../subproject/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)&stru_B8.addr + 4, "sequence_idx.size() == history_state_[batch_idx].NumRows()", v8);
  }
  *(void *)(v10 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a3;
  if (v9)
  {
    for (unint64_t i = 0; i < v9; ++i)
    {
      if ((*(void *)(*a2 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i))
      {
        uint64_t v12 = *(void *)(a1 + 8) + 48 * a4;
        if (i >= *(unsigned int *)(v12 + 20)) {
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v8);
        }
        uint64_t v13 = *(void *)(v12 + 8) + 4 * *(_DWORD *)(v12 + 24) * (int)i;
        unsigned int v14 = *(_DWORD *)(v12 + 16);
        uint64_t v15 = *(void *)(v12 + 32);
        v16[1] = v13;
        v16[0] = &off_262E20;
        void v16[2] = v14;
        uint64_t v16[3] = v15;
        kaldi::CuVectorBase<float>::SetZero((uint64_t)v16);
        unint64_t v9 = a2[1];
      }
    }
  }
}

void kaldi::nnet1::Recurrent::ResetHistoryState(kaldi::nnet1::Recurrent *this)
{
  (*(void (**)(kaldi::nnet1::Recurrent *))(*(void *)this + 88))(this);
  for (uint64_t i = *((void *)this + 1); i != *((void *)this + 2); i += 48)
    kaldi::CuMatrixBase<float>::SetZero(i);
}

unsigned int *kaldi::nnet1::Recurrent::GetHistoryState(uint64_t a1, unsigned int *a2, unsigned int a3, uint64_t a4, const char *a5)
{
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "../subproject/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)&stru_B8.align, "batch_idx >= 0 && batch_idx < ropts_.num_subbatches", a5);
  }
  uint64_t v8 = *(void *)(a1 + 8) + 48 * a3;
  kaldi::CuMatrix<float>::Resize((uint64_t)a2, *(unsigned int *)(v8 + 20), *(unsigned int *)(v8 + 16), 1u, 0);
  uint64_t v11 = *(void *)(a1 + 8) + 48 * a3;

  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, v11, 111, v9, v10);
}

_DWORD *kaldi::nnet1::Recurrent::GetHistoryState(uint64_t a1, _DWORD *a2, unsigned int a3, uint64_t a4, const char *a5)
{
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (int)a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "../subproject/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)&stru_B8.reloff + 2, "batch_idx >= 0 && batch_idx < ropts_.num_subbatches", a5);
  }
  if ((a3 & 0x80000000) != 0
    || (uint64_t v7 = *(void *)(a1 + 8) + 48 * a4, *(_DWORD *)(v7 + 20) <= (signed int)a3))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "../subproject/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)&stru_B8.reloff + 3, "sequence_idx >= 0 && sequence_idx < history_state_[batch_idx].NumRows()", a5);
  }
  unsigned int v9 = a4;
  kaldi::CuVector<float>::Resize((uint64_t)a2, *(unsigned int *)(v7 + 16), 1u, a4, a5);
  uint64_t v13 = *(void *)(a1 + 8) + 48 * v9;
  if (*(_DWORD *)(v13 + 20) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", &stru_1F8.segname[11], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v12);
  }
  uint64_t v14 = *(void *)(v13 + 8) + 4 * (int)(*(_DWORD *)(v13 + 24) * a3);
  unsigned int v15 = *(_DWORD *)(v13 + 16);
  uint64_t v16 = *(void *)(v13 + 32);
  v18[1] = v14;
  v18[0] = &off_262E20;
  v18[2] = v15;
  void v18[3] = v16;
  return kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v18, v10, v11, v12);
}

unsigned int *kaldi::nnet1::Recurrent::SetHistoryState(uint64_t a1, uint64_t a2, unsigned int a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "../subproject/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)&stru_B8.flags + 2, "batch_idx >= 0 && batch_idx < ropts_.num_subbatches", v7);
  }
  uint64_t v8 = (unsigned int *)(*(void *)(a1 + 8) + 48 * a3);
  if (*(_DWORD *)(a2 + 20) != v8[5]) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "../subproject/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)&stru_B8.flags + 3, "history.NumRows() == history_state_[batch_idx].NumRows()", v7);
  }
  if (*(_DWORD *)(a2 + 16) != v8[4]) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "../subproject/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)&stru_B8.reserved1, "history.NumCols() == history_state_[batch_idx].NumCols()", v7);
  }

  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(v8, a2, 111, v6, v7);
}

_DWORD *kaldi::nnet1::Recurrent::SetHistoryState(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a4) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "../subproject/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)&stru_B8.reserved2 + 2, "batch_idx >= 0 && batch_idx < ropts_.num_subbatches", v10);
  }
  if (a3 < 0 || (uint64_t v11 = *(void *)(a1 + 8) + 48 * a4, *(_DWORD *)(v11 + 20) <= a3)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "../subproject/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)&stru_B8.reserved2 + 3, "sequence_idx >= 0 && sequence_idx < history_state_[batch_idx].NumRows()", v10);
  }
  unsigned int v12 = *(_DWORD *)(a2 + 16);
  if (v12 != *(_DWORD *)(v11 + 16)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "../subproject/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)&stru_B8.reserved3, "history.Dim() == history_state_[batch_idx].NumCols()", v10);
  }
  uint64_t v13 = *(void *)(v11 + 8) + 4 * *(_DWORD *)(v11 + 24) * a3;
  uint64_t v14 = *(void *)(v11 + 32);
  v16[1] = v13;
  v16[0] = &off_262E20;
  void v16[2] = v12;
  uint64_t v16[3] = v14;
  return kaldi::CuVectorBase<float>::CopyFromVec(v16, a2, v8, v9, v10);
}

void kaldi::nnet1::Recurrent::EnsureBuffers(kaldi::nnet1::Recurrent *this)
{
  if (!*((unsigned char *)this + 388))
  {
    if (*(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 8) != *(_DWORD *)((char *)this
                                                                                          + *(void *)(*(void *)this - 24)
                                                                                          + 12))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10, "EnsureBuffers", "../subproject/libquasar/libkaldi/src/nnet/nnet-recurrent.h", 602);
      uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"this implementation only models the strict recurrent component, i.e, it requests the input ", 91);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"and output dimensions be the same,  you set input/out dimension to ", 67);
      uint64_t v9 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" and ", 5);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
    }
    int v2 = *((_DWORD *)this + 20);
    if (v2 > 1) {
      int v3 = v2 + 1;
    }
    else {
      int v3 = 1;
    }
    std::vector<int>::size_type v4 = v3;
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 1, v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 42, v3);
    if (v3 >= 1)
    {
      uint64_t v5 = 0;
      uint64_t v6 = (*((_DWORD *)this + 24) + *((_DWORD *)this + 24) * *((_DWORD *)this + 25));
      uint64_t v7 = (char *)this + 12;
      do
      {
        kaldi::CuMatrix<float>::Resize(*((void *)this + 1) + v5, *((unsigned int *)this + 24), *(unsigned int *)&v7[*(void *)(*(void *)this - 24)], 0, 0);
        kaldi::CuMatrix<float>::Resize(*((void *)this + 42) + v5, v6, *(unsigned int *)&v7[*(void *)(*(void *)this - 24)], 0, 0);
        v5 += 48;
      }
      while (48 * v4 != v5);
    }
    std::vector<int>::resize((std::vector<int> *)this + 17, v4);
    *((unsigned char *)this + 388) = 1;
  }
}

_DWORD *kaldi::nnet1::Recurrent::SetInternalBoundary(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v7 = (void *)(a1 + 480);
  uint64_t v8 = *(void *)(a1 + 480);
  if (v8 == *(void *)(a1 + 488))
  {
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 480), *(int *)(a1 + 80));
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 504), *(int *)(a1 + 80));
    uint64_t v8 = *(void *)(a1 + 480);
  }
  kaldi::CuVector<float>::Resize(v8 + 32 * a3, *(unsigned int *)(a2 + 16), 1u, a4, a5);
  uint64_t v13 = (_DWORD *)(*v7 + 32 * a3);

  return kaldi::CuVectorBase<float>::CopyFromVec(v13, a2, v10, v11, v12);
}

void kaldi::nnet1::Recurrent::SetTrainOptions(kaldi::nnet1::Recurrent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  *((_WORD *)this + 194) = 0;
}

void kaldi::nnet1::Recurrent::Copy(kaldi::nnet1::Recurrent *this)
{
}

void sub_EBC40()
{
}

uint64_t kaldi::nnet1::Recurrent::GetType(kaldi::nnet1::Recurrent *this)
{
  return 273;
}

void kaldi::nnet1::Recurrent::InitData(uint64_t *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  float v99 = 2.0;
  int v100 = -1073741824;
  int v98 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)((char *)&def_5A5E8 + 2), &v97);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*((unsigned int *)a1 + 39), &v96);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*((unsigned int *)a1 + 96), &v95);
  int v94 = -1;
  memset(v93, 0, sizeof(v93));
  while (2)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_152;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v93, v6, v7);
    if ((SHIBYTE(v93[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v93[2]))
      {
        case 9:
          BOOL v10 = v93[0] == (void *)0x6D726F4E78614D3CLL && LOBYTE(v93[1]) == 62;
          uint64_t v11 = (float *)(a1 + 50);
          if (!v10)
          {
            BOOL v12 = v93[0] == (void *)0x6461724778614D3CLL && LOBYTE(v93[1]) == 62;
            uint64_t v11 = (float *)(a1 + 19);
            if (!v12) {
              goto LABEL_197;
            }
          }
          goto LABEL_109;
        case 0xA:
          if (v93[0] != (void *)0x61654D736169423CLL || LOWORD(v93[1]) != 15982) {
            goto LABEL_197;
          }
          goto LABEL_75;
        case 0xB:
          if (v93[0] != (void *)0x6E6152736169423CLL || *(void **)((char *)v93 + 3) != (void *)0x3E65676E61527361) {
            goto LABEL_197;
          }
          goto LABEL_55;
        case 0xC:
          if (v93[0] == (void *)0x536D6F646E61523CLL && LODWORD(v93[1]) == 1046766949) {
            goto LABEL_143;
          }
          float v40 = v93;
          goto LABEL_147;
        case 0xD:
          if (v93[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v93 + 5) != (void *)0x3E7665646474536DLL) {
            goto LABEL_197;
          }
          goto LABEL_108;
        case 0xE:
          if (v93[0] != (void *)0x656E696C6E6F4E3CLL || *(void **)((char *)v93 + 6) != (void *)0x3E7974697261656ELL) {
            goto LABEL_197;
          }
          goto LABEL_136;
        case 0xF:
          BOOL v27 = v93[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v93 + 7) == (void *)0x3E66656F43657461;
          uint64_t v11 = (float *)(a1 + 49);
          if (!v27) {
            goto LABEL_197;
          }
          goto LABEL_109;
        case 0x12:
          if (v93[0] != (void *)0x6E6569646172473CLL
            || v93[1] != (void *)0x7079546D726F4E74
            || LOWORD(v93[2]) != 15973)
          {
            goto LABEL_197;
          }
          goto LABEL_64;
        case 0x13:
          BOOL v16 = v93[0] == (void *)0x61654C736169423CLL
             && v93[1] == (void *)0x6F43657461526E72
             && *(void **)((char *)&v93[1] + 3) == (void *)0x3E66656F43657461;
          uint64_t v11 = (float *)a1 + 99;
          if (v16) {
            goto LABEL_109;
          }
          if (v93[0] != (void *)0x61725474696E493CLL
            || v93[1] != (void *)0x79546D726F66736ELL
            || *(void **)((char *)&v93[1] + 3) != (void *)0x3E657079546D726FLL)
          {
            goto LABEL_197;
          }
          goto LABEL_96;
        default:
          goto LABEL_197;
      }
    }
    switch((unint64_t)v93[1])
    {
      case 9uLL:
        BOOL v13 = *(void *)v93[0] == 0x6D726F4E78614D3CLL && *((unsigned char *)v93[0] + 8) == 62;
        uint64_t v11 = (float *)(a1 + 50);
        if (!v13)
        {
          BOOL v14 = *(void *)v93[0] == 0x6461724778614D3CLL && *((unsigned char *)v93[0] + 8) == 62;
          uint64_t v11 = (float *)(a1 + 19);
          if (!v14) {
            goto LABEL_129;
          }
        }
        goto LABEL_109;
      case 0xAuLL:
        if (*(void *)v93[0] != 0x61654D736169423CLL || *((_WORD *)v93[0] + 4) != 15982) {
          goto LABEL_129;
        }
LABEL_75:
        uint64_t v11 = (float *)&v100;
        goto LABEL_109;
      case 0xBuLL:
        if (*(void *)v93[0] != 0x6E6152736169423CLL || *(void *)((char *)v93[0] + 3) != 0x3E65676E61527361) {
          goto LABEL_129;
        }
LABEL_55:
        uint64_t v11 = &v99;
        goto LABEL_109;
      case 0xCuLL:
        goto LABEL_138;
      case 0xDuLL:
        if (*(void *)v93[0] != 0x74536D617261503CLL || *(void *)((char *)v93[0] + 5) != 0x3E7665646474536DLL) {
          goto LABEL_197;
        }
LABEL_108:
        uint64_t v11 = (float *)&v98;
        goto LABEL_109;
      case 0xEuLL:
        goto LABEL_131;
      case 0xFuLL:
        BOOL v37 = *(void *)v93[0] == 0x61526E7261654C3CLL && *(void *)((char *)v93[0] + 7) == 0x3E66656F43657461;
        uint64_t v11 = (float *)(a1 + 49);
        if (!v37) {
          goto LABEL_129;
        }
        goto LABEL_109;
      case 0x12uLL:
        if (*(void *)v93[0] == 0x6E6569646172473CLL
          && *((void *)v93[0] + 1) == 0x7079546D726F4E74
          && *((_WORD *)v93[0] + 8) == 15973)
        {
LABEL_64:
          uint64_t v24 = &v96;
          goto LABEL_137;
        }
LABEL_129:
        if (v93[1] == &dword_C)
        {
LABEL_138:
          if (*(void *)v93[0] != 0x536D6F646E61523CLL || *((_DWORD *)v93[0] + 2) != 1046766949) {
            goto LABEL_145;
          }
LABEL_143:
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v94, v8, v9);
          goto LABEL_144;
        }
        if (v93[1] != (char *)&dword_C + 2) {
          goto LABEL_197;
        }
LABEL_131:
        if (*(void *)v93[0] != 0x656E696C6E6F4E3CLL || *(void *)((char *)v93[0] + 6) != 0x3E7974697261656ELL) {
          goto LABEL_197;
        }
LABEL_136:
        uint64_t v24 = &v95;
        goto LABEL_137;
      case 0x13uLL:
        BOOL v29 = *(void *)v93[0] == 0x61654C736169423CLL
           && *((void *)v93[0] + 1) == 0x6F43657461526E72
           && *(void *)((char *)v93[0] + 11) == 0x3E66656F43657461;
        uint64_t v11 = (float *)a1 + 99;
        if (v29)
        {
LABEL_109:
          kaldi::ReadBasicType<float>(a2, 0, v11, v8, v9);
          goto LABEL_144;
        }
        if (*(void *)v93[0] == 0x61725474696E493CLL
          && *((void *)v93[0] + 1) == 0x79546D726F66736ELL
          && *(void *)((char *)v93[0] + 11) == 0x3E657079546D726FLL)
        {
LABEL_96:
          uint64_t v24 = &v97;
LABEL_137:
          kaldi::ReadToken(a2, 0, (uint64_t)v24, v8, v9);
LABEL_144:
          std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
          continue;
        }
LABEL_145:
        if (v93[1] != &dword_C) {
          goto LABEL_197;
        }
        float v40 = (void **)v93[0];
LABEL_147:
        int v41 = *v40;
        int v42 = *((_DWORD *)v40 + 2);
        if (v41 != (void *)0x6E6F706D6F432F3CLL || v42 != 1047817829)
        {
LABEL_197:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-recurrent.h", 79);
          float v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"Unknown token ", 14);
          if (SHIBYTE(v93[2]) >= 0) {
            uint64_t v78 = v93;
          }
          else {
            uint64_t v78 = (void **)v93[0];
          }
          if (SHIBYTE(v93[2]) >= 0) {
            uint64_t v79 = HIBYTE(v93[2]);
          }
          else {
            uint64_t v79 = (uint64_t)v93[1];
          }
          uint64_t v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)v78, v79);
          uint64_t v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)", a typo in config?", 19);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)" (Nonlinearity|ParamStddev|BiasMean|BiasRange|LearnRateCoef|BiasLearnRateCoef|MaxNorm|RandomSeed|MaxGrad|InitTransformType|GradientNormType)", 140);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
        }
LABEL_152:
        *((_DWORD *)a1 + 96) = kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&v95);
        int inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v97);
        *((_DWORD *)a1 + 39) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v96);
        if (v94 >= 1) {
          kaldi::UniformRandomNumber::SetRandomSeeds(a3, v94);
        }
        kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v89, a3);
        kaldi::Matrix<float>::Matrix((uint64_t)&v85, *(unsigned int *)((char *)a1 + *(void *)(*a1 - 24) + 12), *(unsigned int *)((char *)a1 + *(void *)(*a1 - 24) + 8), 0, 0);
        uint64_t v49 = (uint64_t)a1 + 12;
        uint64_t v48 = *a1;
        if (*(int *)((char *)a1 + *(void *)(*a1 - 24) + 12) >= 1)
        {
          unint64_t v50 = 0;
          float v51 = a1 + 1;
          while (1)
          {
            uint64_t v52 = *(void *)(v48 - 24);
            if (*(int *)((char *)v51 + v52) >= 1) {
              break;
            }
LABEL_178:
            if ((uint64_t)++v50 >= *(int *)(v49 + v52)) {
              goto LABEL_179;
            }
          }
          unint64_t v53 = 0;
          while (2)
          {
            if (inited)
            {
              if (inited != 2)
              {
                if (inited == 1)
                {
                  float v54 = *(float *)&v98;
                  float v55 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v45, v46, v47);
                  if (v50 >= v87 || v53 >= v86) {
                    goto LABEL_196;
                  }
                  uint64_t v56 = (char *)v85 + 4 * (int)v50 * v88;
                  float v57 = (v55 + -0.5) * (float)(v54 + v54);
                  break;
                }
LABEL_177:
                ++v53;
                uint64_t v48 = *a1;
                uint64_t v52 = *(void *)(*a1 - 24);
                if ((uint64_t)v53 >= *(int *)((char *)v51 + v52)) {
                  goto LABEL_178;
                }
                continue;
              }
              float v58 = *(float *)&v98;
              kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v89, 0, v45, v46, v47);
              if (v50 >= v87 || v53 >= v86) {
                goto LABEL_196;
              }
              uint64_t v56 = (char *)v85 + 4 * (int)v50 * v88;
              float v57 = v58 * v59;
            }
            else
            {
              if (v50 >= v87 || v53 >= v86) {
LABEL_196:
              }
                kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)&stru_68.addr, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v47);
              uint64_t v56 = (char *)v85 + 4 * (int)v50 * v88;
              if (v50 == v53) {
                float v57 = 1.0;
              }
              else {
                float v57 = 0.0;
              }
            }
            break;
          }
          *(float *)&v56[4 * v53] = v57;
          goto LABEL_177;
        }
LABEL_179:
        kaldi::CuMatrix<float>::operator=((uint64_t)(a1 + 20), (kaldi::ContextDependency *)&v85);
        uint64_t v62 = *(unsigned int *)((char *)a1 + *(void *)(*a1 - 24) + 12);
        uint64_t v83 = 0;
        uint64_t v84 = 0;
        std::vector<int> v82 = 0;
        kaldi::Vector<float>::Resize((void **)&v82, v62, 0, v63, v64);
        if (*(int *)(v49 + *(void *)(*a1 - 24)) < 1)
        {
          uint64_t v71 = v83;
        }
        else
        {
          unint64_t v68 = 0;
          do
          {
            float v69 = *(float *)&v100;
            float v70 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v65, v66, v67);
            uint64_t v71 = v83;
            if (v68 >= v83) {
              kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", stru_68.sectname, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v67);
            }
            float v72 = v69 + (v70 + -0.5) * v99;
            v82[v68++] = v72;
          }
          while ((uint64_t)v68 < *(int *)(v49 + *(void *)(*a1 - 24)));
        }
        uint64_t v73 = a1 + 26;
        kaldi::CuVector<float>::Resize((uint64_t)v73, v71, 1u, v66, v67);
        kaldi::CuVectorBase<float>::CopyFromVec<float>(v73, (uint64_t)&v82, v74, v75, v76);
        kaldi::Vector<float>::Destroy((uint64_t)&v82);
        kaldi::Matrix<float>::~Matrix((uint64_t)&v85);
        if (__p)
        {
          unint64_t v92 = __p;
          operator delete(__p);
        }
        uint64_t v85 = (void **)&v90;
        std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v85);
        if (SHIBYTE(v93[2]) < 0) {
          operator delete(v93[0]);
        }
        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v95.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v96.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v97.__r_.__value_.__l.__data_);
        }
        return;
      default:
        goto LABEL_197;
    }
  }
}

void sub_EC768()
{
  kaldi::Vector<float>::Destroy(&v0);
  JUMPOUT(0xEC790);
}

void sub_EC780(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 217) < 0) {
    operator delete(*(void **)(v1 - 240));
  }
  if (*(char *)(v1 - 185) < 0) {
    operator delete(*(void **)(v1 - 208));
  }
  if (*(char *)(v1 - 161) < 0) {
    operator delete(*(void **)(v1 - 184));
  }
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  _Unwind_Resume(exception_object);
}

void sub_EC788()
{
  kaldi::Matrix<float>::~Matrix(&v0);
  kaldi::GaussRandomNumber::~GaussRandomNumber((kaldi::GaussRandomNumber *)&v1);
  JUMPOUT(0xEC7A0);
}

void kaldi::nnet1::Recurrent::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  while (kaldi::Peek(a2, a3) == 60)
  {
    memset(v43, 0, 24);
    kaldi::ReadToken(a2, a3, (uint64_t)v43, v7, v8);
    if ((SHIBYTE(v43[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v43[2]))
      {
        case 9:
          goto LABEL_58;
        case 0xE:
          goto LABEL_4;
        case 0xF:
          BOOL v30 = v43[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v43 + 7) == (void *)0x3E66656F43657461;
          BOOL v14 = (float *)(a1 + 392);
          if (!v30) {
            goto LABEL_96;
          }
          goto LABEL_83;
        case 0x12:
          goto LABEL_64;
        case 0x13:
          BOOL v23 = v43[0] == (void *)0x61654C736169423CLL
             && v43[1] == (void *)0x6F43657461526E72
             && *(void **)((char *)&v43[1] + 3) == (void *)0x3E66656F43657461;
          BOOL v14 = (float *)(a1 + 396);
          if (v23) {
            goto LABEL_83;
          }
          switch(HIBYTE(v43[2]))
          {
            case 9u:
              goto LABEL_58;
            case 0x12u:
LABEL_64:
              if (v43[0] == (void *)0x6E6569646172473CLL
                && v43[1] == (void *)0x7079546D726F4E74
                && LOWORD(v43[2]) == 15973)
              {
                goto LABEL_89;
              }
              break;
            case 0xEu:
LABEL_4:
              if (v43[0] == (void *)0x656E696C6E6F4E3CLL && *(void **)((char *)v43 + 6) == (void *)0x3E7974697261656ELL) {
                goto LABEL_88;
              }
              if (HIBYTE(v43[2]) != 9) {
                goto LABEL_96;
              }
LABEL_58:
              BOOL v24 = v43[0] == (void *)0x6D726F4E78614D3CLL && LOBYTE(v43[1]) == 62;
              BOOL v14 = (float *)(a1 + 400);
              if (v24) {
                goto LABEL_83;
              }
              break;
            default:
              goto LABEL_96;
          }
          if (HIBYTE(v43[2]) != 9) {
            goto LABEL_96;
          }
          uint64_t v21 = v43;
          break;
        default:
          goto LABEL_96;
      }
      goto LABEL_73;
    }
    BOOL v12 = (char *)v43[1];
    if (v43[1] != (char *)&dword_C + 3
      || (*(void *)v43[0] == 0x61526E7261654C3CLL
        ? (BOOL v13 = *(void *)((char *)v43[0] + 7) == 0x3E66656F43657461)
        : (BOOL v13 = 0),
          BOOL v14 = (float *)(a1 + 392),
          !v13))
    {
      if (v43[1] == (char *)&dword_10 + 3)
      {
        BOOL v16 = *(void *)v43[0] == 0x61654C736169423CLL
           && *((void *)v43[0] + 1) == 0x6F43657461526E72
           && *(void *)((char *)v43[0] + 11) == 0x3E66656F43657461;
        BOOL v14 = (float *)(a1 + 396);
        if (v16) {
          goto LABEL_83;
        }
        BOOL v12 = (char *)v43[1];
      }
      if (v12 == (unsigned char *)&dword_C + 2)
      {
        if (*(void *)v43[0] == 0x656E696C6E6F4E3CLL && *(void *)((char *)v43[0] + 6) == 0x3E7974697261656ELL)
        {
LABEL_88:
          std::string __p = 0;
          uint64_t v41 = 0;
          uint64_t v42 = 0;
          kaldi::ReadToken(a2, a3, (uint64_t)&__p, v9, v10);
          *(_DWORD *)(a1 + 384) = kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&__p);
          goto LABEL_90;
        }
        BOOL v12 = (char *)v43[1];
      }
      if (v12 != (unsigned char *)&dword_8 + 1) {
        goto LABEL_36;
      }
      BOOL v18 = *(void *)v43[0] == 0x6D726F4E78614D3CLL && *((unsigned char *)v43[0] + 8) == 62;
      BOOL v14 = (float *)(a1 + 400);
      if (!v18)
      {
        BOOL v12 = (char *)v43[1];
LABEL_36:
        if (v12 == (unsigned char *)&dword_10 + 2)
        {
          if (*(void *)v43[0] == 0x6E6569646172473CLL
            && *((void *)v43[0] + 1) == 0x7079546D726F4E74
            && *((_WORD *)v43[0] + 8) == 15973)
          {
LABEL_89:
            std::string __p = 0;
            uint64_t v41 = 0;
            uint64_t v42 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)&__p, v9, v10);
            *(_DWORD *)(a1 + 156) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&__p);
LABEL_90:
            if (SHIBYTE(v42) < 0) {
              operator delete(__p);
            }
            goto LABEL_84;
          }
          BOOL v12 = (char *)v43[1];
        }
        if (v12 != (unsigned char *)&dword_8 + 1) {
          goto LABEL_96;
        }
        uint64_t v21 = (void **)v43[0];
LABEL_73:
        BOOL v27 = *v21;
        int v28 = *((unsigned __int8 *)v21 + 8);
        BOOL v29 = v27 == (void *)0x6461724778614D3CLL && v28 == 62;
        BOOL v14 = (float *)(a1 + 152);
        if (!v29)
        {
LABEL_96:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-recurrent.h", 134);
          uint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"unrecognized config token ", 26);
          if (SHIBYTE(v43[2]) >= 0) {
            BOOL v37 = v43;
          }
          else {
            BOOL v37 = (void **)v43[0];
          }
          if (SHIBYTE(v43[2]) >= 0) {
            uint64_t v38 = HIBYTE(v43[2]);
          }
          else {
            uint64_t v38 = (uint64_t)v43[1];
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
        }
      }
    }
LABEL_83:
    kaldi::ReadBasicType<float>(a2, a3, v14, v9, v10);
LABEL_84:
    if (SHIBYTE(v43[2]) < 0) {
      operator delete(v43[0]);
    }
  }
  kaldi::CuMatrix<float>::Read(a1 + 160, a2, a3, a4);
  kaldi::CuVector<float>::Read(a1 + 208, a2, a3, v31, v32);
  int v34 = *(_DWORD *)(a1 + 180);
  uint64_t v35 = a1 + *(void *)(*(void *)a1 - 24);
  if (v34 != *(_DWORD *)(v35 + 12)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)&stru_68.addr + 5, "linearity_.NumRows() == output_dim_", v33);
  }
  if (*(_DWORD *)(a1 + 176) != *(_DWORD *)(v35 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)&stru_68.addr + 6, "linearity_.NumCols() == input_dim_", v33);
  }
  if (*(_DWORD *)(a1 + 224) != v34) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)&stru_68.addr + 7, "bias_.Dim() == output_dim_", v33);
  }
}

void sub_ECDC8()
{
}

void *kaldi::nnet1::Recurrent::WriteConfig(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", a4, a5);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<BiasLearnRateCoef>", v8, v9);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxNorm>", v10, v11);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<Nonlinearity>", v12, v13);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 384), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v14, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v16, v17);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v18, v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v20, v21);
  return kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
}

void sub_ECF5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Recurrent::WriteData(_DWORD *a1, void *a2, int a3, int a4)
{
  uint64_t v8 = a1 + 52;
  (*(void (**)(_DWORD *))(*(void *)a1 + 168))(a1);
  kaldi::CuMatrixBase<float>::Write((uint64_t)(a1 + 40), a2, a3, a4);

  kaldi::CuVectorBase<float>::Write(v8, a2, a3, v9, v10);
}

uint64_t kaldi::nnet1::Recurrent::NumParams(kaldi::nnet1::Recurrent *this)
{
  return (*((_DWORD *)this + 56) + *((_DWORD *)this + 44) * *((_DWORD *)this + 45));
}

_DWORD *kaldi::nnet1::Recurrent::GetParams(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 184))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  int v10 = a1[44] * a1[45];
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  if (v10 > *(_DWORD *)(a2 + 8)
    || (unsigned int v15 = *(void **)a2,
        LODWORD(v16) = v10,
        kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v15, a1 + 40, v7, v8, v9),
        int v13 = a1[56],
        uint64_t v16 = 0,
        uint64_t v17 = 0,
        (v13 + v10) > *(_DWORD *)(a2 + 8)))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v9);
  }
  unsigned int v15 = (void *)(*(void *)a2 + 4 * v10);
  LODWORD(v16) = v13;
  return kaldi::CuVectorBase<float>::CopyToVec<float>(a1 + 52, (uint64_t)&v15, v11, v12, v9);
}

_DWORD *kaldi::nnet1::Recurrent::SetParams(_DWORD *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(_DWORD *))(*(void *)a1 + 184))(a1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "../subproject/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)&stru_68.reserved2 + 1, "wei_src.Dim() == NumParams()", v5);
  }
  int v6 = a1[44] * a1[45];
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  if (v6 > *(_DWORD *)(a2 + 8) {
    || (uint64_t v11 = *(char **)a2,
  }
        LODWORD(v1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v6,
        kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)(a1 + 40), &v11),
        int v9 = a1[56],
        uint64_t v12 = 0,
        uint64_t v13 = 0,
        (v9 + v6) > *(_DWORD *)(a2 + 8)))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v5);
  }
  uint64_t v11 = (char *)(*(void *)a2 + 4 * v6);
  LODWORD(v1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v9;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(a1 + 52, (uint64_t)&v11, v7, v8, v5);
}

float kaldi::nnet1::Recurrent::SumParams(kaldi::nnet1::Recurrent *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  float v6 = kaldi::CuMatrixBase<float>::Sum((uint64_t)this + 160, a2, a3, a4, a5);
  double v7 = kaldi::CuVectorBase<float>::Sum((uint64_t)this + 208);
  return v6 + *(float *)&v7;
}

uint64_t kaldi::nnet1::Recurrent::PerturbParams(kaldi::nnet1::Recurrent *this, float a2)
{
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v14, *((unsigned int *)this + 45), *((unsigned int *)this + 44), 1u, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v14);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 160, (uint64_t)v14, 111, v4, v5, a2, 1.0);
  uint64_t v6 = *((unsigned int *)this + 56);
  v13[0] = off_262E60;
  memset(&v13[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v13, v6, 1u, v7, v8);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v13);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 208, (uint64_t)v13, v9, v10, v11, a2, 1.0);
  kaldi::CuVector<float>::~CuVector(v13);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v14);
}

void sub_ED320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Recurrent::Info(kaldi::nnet1::Recurrent *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  (*(void (**)(kaldi::nnet1::Recurrent *, void *, void))(*(void *)this + 168))(this, v18, 0);
  int v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n linearity", 11);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 160);
  if ((v17 & 0x80u) == 0) {
    int v3 = v16;
  }
  else {
    int v3 = (void **)v16[0];
  }
  if ((v17 & 0x80u) == 0) {
    uint64_t v4 = v17;
  }
  else {
    uint64_t v4 = (uint64_t)v16[1];
  }
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\n bias", 6);
  kaldi::nnet1::MomentStatistics<float>((_DWORD *)this + 52, v7, v8, v9, v10);
  if ((v15 & 0x80u) == 0) {
    uint64_t v11 = __p;
  }
  else {
    uint64_t v11 = (void **)__p[0];
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v12 = v15;
  }
  else {
    uint64_t v12 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v11, v12);
  if ((char)v15 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v17 < 0) {
    operator delete(v16[0]);
  }
  std::stringbuf::str();
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_ED554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Recurrent::InfoGradient(kaldi::nnet1::Recurrent *this@<X0>, void *a2@<X8>)
{
  if (*((unsigned char *)this + 388) && *((unsigned char *)this + 389))
  {
    std::string::basic_string[abi:ne180100]<0>(&v50, "\n  linearity_grad");
    kaldi::nnet1::MomentStatistics<float>((void *)this + 30, v4, v5, v6, v7);
    if ((v49 & 0x80u) == 0) {
      uint64_t v8 = v48;
    }
    else {
      uint64_t v8 = (void **)v48[0];
    }
    if ((v49 & 0x80u) == 0) {
      std::string::size_type v9 = v49;
    }
    else {
      std::string::size_type v9 = (std::string::size_type)v48[1];
    }
    uint64_t v10 = std::string::append(&v50, (const std::string::value_type *)v8, v9);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    uint64_t v12 = std::string::append(&v51, ", lr-coef ");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    kaldi::nnet1::ToString<float>();
    if ((v47 & 0x80u) == 0) {
      uint64_t v14 = v46;
    }
    else {
      uint64_t v14 = (void **)v46[0];
    }
    if ((v47 & 0x80u) == 0) {
      std::string::size_type v15 = v47;
    }
    else {
      std::string::size_type v15 = (std::string::size_type)v46[1];
    }
    uint64_t v16 = std::string::append(&v52, (const std::string::value_type *)v14, v15);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    uint64_t v18 = std::string::append(&v53, ", max-norm ");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    kaldi::nnet1::ToString<float>();
    if ((v45 & 0x80u) == 0) {
      uint64_t v20 = v44;
    }
    else {
      uint64_t v20 = (void **)v44[0];
    }
    if ((v45 & 0x80u) == 0) {
      std::string::size_type v21 = v45;
    }
    else {
      std::string::size_type v21 = (std::string::size_type)v44[1];
    }
    uint64_t v22 = std::string::append(&v54, (const std::string::value_type *)v20, v21);
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    BOOL v24 = std::string::append(&v55, "\n  bias_grad");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    kaldi::nnet1::MomentStatistics<float>((void *)this + 33, v26, v27, v28, v29);
    if ((v43 & 0x80u) == 0) {
      BOOL v30 = v42;
    }
    else {
      BOOL v30 = (void **)v42[0];
    }
    if ((v43 & 0x80u) == 0) {
      std::string::size_type v31 = v43;
    }
    else {
      std::string::size_type v31 = (std::string::size_type)v42[1];
    }
    uint64_t v32 = std::string::append(&v56, (const std::string::value_type *)v30, v31);
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    int v34 = std::string::append(&v57, ", lr-coef ");
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    kaldi::nnet1::ToString<float>();
    if ((v41 & 0x80u) == 0) {
      uint64_t v36 = __p;
    }
    else {
      uint64_t v36 = (void **)__p[0];
    }
    if ((v41 & 0x80u) == 0) {
      std::string::size_type v37 = v41;
    }
    else {
      std::string::size_type v37 = (std::string::size_type)__p[1];
    }
    uint64_t v38 = std::string::append(&v58, (const std::string::value_type *)v36, v37);
    long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    a2[2] = *((void *)&v38->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    if ((char)v41 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    if ((char)v43 < 0) {
      operator delete(v42[0]);
    }
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
    if ((char)v45 < 0) {
      operator delete(v44[0]);
    }
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v54.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v53.__r_.__value_.__l.__data_);
    }
    if ((char)v47 < 0) {
      operator delete(v46[0]);
    }
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
    if ((char)v49 < 0) {
      operator delete(v48[0]);
    }
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "\n  linearity_grad is uninitialized\n  bias_grad is uninitialized");
  }
}

void sub_ED90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v64 - 41) < 0) {
    operator delete(*(void **)(v64 - 64));
  }
  if (*(char *)(v64 - 73) < 0) {
    operator delete(*(void **)(v64 - 96));
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(char *)(v64 - 105) < 0) {
    operator delete(*(void **)(v64 - 128));
  }
  if (*(char *)(v64 - 137) < 0) {
    operator delete(*(void **)(v64 - 160));
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (*(char *)(v64 - 169) < 0) {
    operator delete(*(void **)(v64 - 192));
  }
  if (a64 < 0) {
    operator delete(a59);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  _Unwind_Resume(a1);
}

void sub_EDA38()
{
}

void sub_EDA40()
{
}

void sub_EDA48()
{
}

void sub_EDA50()
{
}

void sub_EDA58()
{
}

uint64_t kaldi::nnet1::Recurrent::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a3;
  *(_DWORD *)(result + 156) = a2;
  *(unsigned char *)(result + 388) = 0;
  return result;
}

uint64_t kaldi::nnet1::Recurrent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  uint64_t v9 = *(unsigned int *)(a1 + 96);
  int v10 = *(_DWORD *)(a2 + 20);
  int v55 = *(_DWORD *)(a1 + 100);
  if (v10 != v9 * v55) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "../subproject/libquasar/libkaldi/src/nnet/nnet-recurrent.h", &stru_108.segname[11], "in.NumRows() == num_sequences * T", v8);
  }
  uint64_t v11 = *(void *)(a3 + 32);
  uint64_t v12 = *(void *)(a1 + 336);
  uint64_t v13 = v12 + 48 * a4;
  *(void *)(v13 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v11;
  *(void *)(*(void *)(a1 + 8) + 48 * a4 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v11;
  uint64_t v14 = *(void *)(a1 + 480);
  if (*(void *)(a1 + 488) == v14 || (int v15 = *(_DWORD *)(v14 + 32 * a4 + 16), v15 < 1))
  {
    int v54 = 0;
  }
  else
  {
    if (v15 != v10) {
      kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "../subproject/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)&stru_108.addr + 2, "boundary_[batch_idx].Dim() == in.NumRows()", v8);
    }
    uint64_t v16 = *(void *)(a1 + 504) + 48 * a4;
    *(void *)(v16 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v11;
    int v54 = 1;
    kaldi::CuMatrix<float>::Resize(v16, v9, *(unsigned int *)(v13 + 16), 1u, 0);
    uint64_t v12 = *(void *)(a1 + 336);
  }
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v57, v12 + 48 * a4, 0, v9, 0, *(_DWORD *)(v12 + 48 * a4 + 16));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v57, *(void *)(a1 + 8) + 48 * a4, 111, v17, v18);
  std::string v53 = (unsigned int *)a3;
  std::string v57 = off_262D80;
  long long v58 = 0u;
  long long v59 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v57);
  uint64_t v19 = *(void *)(a1 + 336) + 48 * a4;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v57, v19, v9, v10, 0, *(_DWORD *)(v19 + 16));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v57, a2, 111, v20, v21);
  std::string v57 = off_262D80;
  long long v58 = 0u;
  long long v59 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v57);
  uint64_t v22 = *(void *)(a1 + 336) + 48 * a4;
  int v52 = v10;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v57, v22, v9, v10, 0, *(_DWORD *)(v22 + 16));
  kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)&v57, a1 + 208, v23, v24, v25, 1.0, 1.0);
  std::string v57 = off_262D80;
  long long v58 = 0u;
  long long v59 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v57);
  if (v55 >= 1)
  {
    int v26 = 0;
    int v27 = 0;
    int v28 = 1;
    do
    {
      uint64_t v29 = *(void *)(a1 + 336) + 48 * a4;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v60, v29, v9 + v26, v9, 0, *(_DWORD *)(v29 + 16));
      if ((v27 + 1) > 1) {
        int v31 = v54;
      }
      else {
        int v31 = 0;
      }
      int v32 = v26;
      if (v31 == 1)
      {
        uint64_t v33 = *(void *)(a1 + 504);
        kaldi::CuSubVector<float>::CuSubVector(&v57, *(void *)(a1 + 480) + 32 * a4, v26, v9, v30);
        kaldi::CuMatrixBase<float>::CopySelectedRows(v33 + 48 * a4, (uint64_t)&v60, (uint64_t)&v57, 0, v34);
        int v32 = (v28 - 1) * v9;
      }
      uint64_t v35 = *(void *)(a1 + 336) + 48 * a4;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v57, v35, v32, v9, 0, *(_DWORD *)(v35 + 16));
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v60, (uint64_t)&v57, CblasNoTrans, a1 + 160, &stru_68.sectname[8], 1.0, 1.0);
      std::string v57 = off_262D80;
      long long v58 = 0u;
      long long v59 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v57);
      if (v31)
      {
        uint64_t v39 = *(void *)(a1 + 504);
        kaldi::CuSubVector<float>::CuSubVector(&v57, *(void *)(a1 + 480) + 32 * a4, v32, v9, v38);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v60, v39 + 48 * a4, (uint64_t)&v57, 0, v40);
      }
      int v41 = *(_DWORD *)(a1 + 384);
      switch(v41)
      {
        case 520:
          kaldi::CuMatrixBase<float>::ApplyFloor((uint64_t)&v60, 0.0);
          break;
        case 517:
          kaldi::CuMatrixBase<float>::Tanh(&v60, &v60, v36, v37, v38);
          break;
        case 516:
          kaldi::CuMatrixBase<float>::Sigmoid(&v60, &v60, v36, v37, v38);
          break;
        default:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v57, "PropagateFnc", "../subproject/libquasar/libkaldi/src/nnet/nnet-recurrent.h", 349);
          unsigned __int8 v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)"Unknown nonlinearity type: ", 27);
          kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 384), &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)p_p, size);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v57);
      }
      uint64_t v60 = off_262D80;
      long long v61 = 0u;
      long long v62 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v60);
      ++v28;
      ++v27;
      v26 += v9;
    }
    while (v55 != v27);
  }
  uint64_t v42 = *(void *)(a1 + 336) + 48 * a4;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v57, v42, v9, v52, 0, *(_DWORD *)(v42 + 16));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v53, (uint64_t)&v57, 111, v43, v44);
  std::string v57 = off_262D80;
  long long v58 = 0u;
  long long v59 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v57);
  unsigned __int8 v45 = (unsigned int *)(*(void *)(a1 + 8) + 48 * a4);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v57, *(void *)(a1 + 336) + 48 * a4, v52, v9, 0, *(_DWORD *)(*(void *)(a1 + 336) + 48 * a4 + 16));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v45, (uint64_t)&v57, 111, v46, v47);
  std::string v57 = off_262D80;
  long long v58 = 0u;
  long long v59 = 0u;
  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v57);
}

void sub_EE0B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _OWORD *a12)
{
  *(void *)(v12 - 128) = off_262D80;
  *a12 = 0u;
  a12[1] = 0u;
  JUMPOUT(0xEE0FCLL);
}

void sub_EE108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void (**a17)())
{
  a17 = off_262D80;
  *uint64_t v17 = 0u;
  v17[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a17);
  JUMPOUT(0xEE0CCLL);
}

uint64_t kaldi::nnet1::Recurrent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v11 = off_262D80;
  *(void *)&long long v12 = v4;
  *((void *)&v12 + 1) = v3 | 0x100000000;
  LODWORD(v13) = v3;
  DWORD1(v13) = v3;
  *((void *)&v13 + 1) = *(void *)(a2 + 24);
  unsigned int v5 = *(_DWORD *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 8);
  uint64_t v8 = off_262D80;
  *(void *)&long long v9 = v6;
  *((void *)&v9 + 1) = v5 | 0x100000000;
  LODWORD(v10) = v5;
  DWORD1(v10) = v5;
  *((void *)&v10 + 1) = *(void *)(a3 + 24);
  (*(void (**)(uint64_t, void (***)(), void (***)(), void))(*(void *)a1 + 248))(a1, &v11, &v8, 0);
  uint64_t v8 = off_262D80;
  long long v9 = 0u;
  long long v10 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v8);
  uint64_t v11 = off_262D80;
  long long v12 = 0u;
  long long v13 = 0u;
  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v11);
}

void sub_EE250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16 = v14;
  _OWORD *v15 = 0u;
  v15[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a9);
  *uint64_t v16 = 0u;
  v16[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a14);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Recurrent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, int a6)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  kaldi::nnet1::Recurrent::EnsureTrainingBuffers((kaldi::nnet1::Recurrent *)a1);
  if (a5) {
    uint64_t v11 = (uint64_t)a5;
  }
  else {
    uint64_t v11 = a4;
  }
  uint64_t v12 = *(void *)(v11 + 32);
  uint64_t v13 = a6;
  *(void *)(*(void *)(a1 + 336) + 48 * a6 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v12;
  uint64_t v14 = *(void *)(a1 + 360);
  uint64_t v15 = v14 + 48 * a6;
  *(void *)(v15 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v12;
  uint64_t v16 = *(unsigned int *)(a1 + 96);
  int v49 = *(_DWORD *)(a1 + 100);
  uint64_t v17 = *(void *)(a1 + 480);
  if (*(void *)(a1 + 488) == v17 || (int v18 = *(_DWORD *)(v17 + 32 * v13 + 16), v18 < 1))
  {
    int v48 = 0;
  }
  else
  {
    if (v18 != *(_DWORD *)(a4 + 20)) {
      kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "../subproject/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)&stru_158.size + 1, "boundary_[batch_idx].Dim() == out_diff.NumRows()", v10);
    }
    uint64_t v19 = *(void *)(a1 + 504) + 48 * (int)v13;
    *(void *)(v19 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v12;
    int v48 = 1;
    kaldi::CuMatrix<float>::Resize(v19, v16, *(unsigned int *)(v15 + 16), 1u, 0);
    uint64_t v14 = *(void *)(a1 + 360);
  }
  uint64_t v20 = (v16 * v49);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v51, v14 + 48 * (int)v13, 0, v16 * v49, 0, *(_DWORD *)(v14 + 48 * (int)v13 + 16));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v51, a4, 111, v21, v22);
  std::string v51 = off_262D80;
  long long v52 = 0u;
  long long v53 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v51);
  uint64_t v23 = *(void *)(a1 + 360) + 48 * (int)v13;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v51, v23, v20, v16, 0, *(_DWORD *)(v23 + 16));
  kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v51);
  std::string v51 = off_262D80;
  long long v52 = 0u;
  long long v53 = 0u;
  uint64_t result = fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v51);
  if (v49 >= 1)
  {
    int v25 = 0;
    int v26 = v49;
    do
    {
      uint64_t v27 = v20;
      int v28 = v20 + v25;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v57, *(void *)(a1 + 336) + 48 * v13, v28, v16, 0, *(_DWORD *)(*(void *)(a1 + 336) + 48 * v13 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v54, *(void *)(a1 + 360) + 48 * v13, v16 * (v49 - 1) + v25, v16, 0, *(_DWORD *)(*(void *)(a1 + 360) + 48 * v13 + 16));
      if (v26 < v49) {
        int v30 = v48;
      }
      else {
        int v30 = 0;
      }
      if (v30 == 1)
      {
        uint64_t v31 = *(void *)(a1 + 504);
        kaldi::CuSubVector<float>::CuSubVector(&v51, *(void *)(a1 + 480) + 32 * v13, v28, v16, v29);
        kaldi::CuMatrixBase<float>::CopySelectedRows(v31 + 48 * (int)v13, (uint64_t)&v54, (uint64_t)&v51, 0, v32);
      }
      uint64_t v33 = *(void *)(a1 + 360) + 48 * (int)v13;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v51, v33, v28, v16, 0, *(_DWORD *)(v33 + 16));
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v54, (uint64_t)&v51, CblasNoTrans, a1 + 160, &stru_68.sectname[7], 1.0, 1.0);
      std::string v51 = off_262D80;
      long long v52 = 0u;
      long long v53 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v51);
      if (v30)
      {
        uint64_t v36 = *(void *)(a1 + 504);
        kaldi::CuSubVector<float>::CuSubVector(&v51, *(void *)(a1 + 480) + 32 * v13, v28, v16, v35);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v54, v36 + 48 * (int)v13, (uint64_t)&v51, 0, v37);
      }
      int v38 = *(_DWORD *)(a1 + 384);
      if (v38 == 520)
      {
        kaldi::CuMatrixBase<float>::ApplyHeaviside((uint64_t)&v57);
        uint64_t v20 = v27;
        kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v54, (uint64_t)&v57, v39, v40, v41);
      }
      else
      {
        uint64_t v20 = v27;
        if (v38 == 517)
        {
          kaldi::CuMatrixBase<float>::DiffTanh((uint64_t)&v54, (uint64_t)&v57, (uint64_t)&v54, v34, v35);
        }
        else
        {
          if (v38 != 516)
          {
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v51, "BackpropagateFnc", "../subproject/libquasar/libkaldi/src/nnet/nnet-recurrent.h", 430);
            unsigned __int8 v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v51, (uint64_t)"Unknown nonlinearity type: ", 27);
            kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 384), &__p);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = __p.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)p_p, size);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v51);
          }
          kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v54, (uint64_t)&v57, (uint64_t)&v54, v34, v35);
        }
      }
      int v54 = off_262D80;
      --v26;
      long long v55 = 0u;
      long long v56 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v54);
      std::string v57 = off_262D80;
      long long v58 = 0u;
      long long v59 = 0u;
      uint64_t result = fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v57);
      v25 -= v16;
    }
    while ((v26 + 1) > 1);
  }
  if (a5)
  {
    uint64_t v42 = *(void *)(a1 + 360) + 48 * (int)v13;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v51, v42, 0, v20, 0, *(_DWORD *)(v42 + 16));
    kaldi::CuMatrixBase<float>::CopyFromMat<float>(a5, (uint64_t)&v51, 111, v43, v44);
    std::string v51 = off_262D80;
    long long v52 = 0u;
    long long v53 = 0u;
    return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v51);
  }
  return result;
}

void sub_EE838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _OWORD *a10, uint64_t a11, _OWORD *a12)
{
  *(void *)(v12 - kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized<kaldi::nnet1::Quantizable16BitComponentItf>((uint64_t)this - 168) = off_262D80;
  *a12 = 0u;
  a12[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v12 - 168);
  *(void *)(v12 - 128) = off_262D80;
  *a10 = 0u;
  a10[1] = 0u;
  JUMPOUT(0xEE8FCLL);
}

uint64_t kaldi::nnet1::Recurrent::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  kaldi::nnet1::Recurrent::EnsureTrainingBuffers((kaldi::nnet1::Recurrent *)a1);
  uint64_t v10 = a5;
  uint64_t v11 = *(void *)(a1 + 240) + 48 * a5;
  *(void *)(v11 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a4;
  *(void *)(*(void *)(a1 + 264) + 32 * a5 + ++*(void *)(result + 24) = a4;
  int v12 = *(_DWORD *)(a1 + 96);
  int v13 = *(_DWORD *)(a1 + 100);
  float v14 = *(float *)(a1 + 60);
  int v15 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(*(void *)(a1 + 408) + 4 * a5) = v15;
  if (v15 != *(_DWORD *)(a1 + 96) * *(_DWORD *)(a1 + 100)) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "../subproject/libquasar/libkaldi/src/nnet/nnet-recurrent.h", &stru_1A8.segname[14], "num_frames_[batch_idx] == ropts_.bptt_steps * ropts_.num_sequences", v9);
  }
  uint64_t v16 = *(void *)(a1 + 360) + 48 * a5;
  int v17 = v13 * v12;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v27, v16, 0, v13 * v12, 0, *(_DWORD *)(v16 + 16));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v24, *(void *)(a1 + 336) + 48 * v10, 0, v17, 0, *(_DWORD *)(*(void *)(a1 + 336) + 48 * v10 + 16));
  kaldi::CuMatrixBase<float>::AddMatMat(v11, (uint64_t)&v27, CblasTrans, (uint64_t)&v24, &stru_68.sectname[7], 1.0, v14);
  uint64_t v24 = off_262D80;
  long long v25 = 0u;
  long long v26 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v24);
  uint64_t v27 = off_262D80;
  long long v28 = 0u;
  long long v29 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v27);
  uint64_t v18 = *(void *)(a1 + 264) + 32 * v10;
  uint64_t v19 = *(void *)(a1 + 360) + 48 * (int)v10;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v27, v19, 0, v17, 0, *(_DWORD *)(v19 + 16));
  kaldi::CuVectorBase<float>::AddRowSumMat(v18, &v27, 1.0, v14, v20, v21, v22);
  uint64_t v27 = off_262D80;
  long long v28 = 0u;
  long long v29 = 0u;
  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v27);
}

void sub_EEB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void (**a14)(), long long a15, long long a16)
{
  a14 = off_262D80;
  a15 = 0u;
  a16 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a14);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Recurrent::NormalizeGradients(kaldi::nnet1::Recurrent *this, float a2, unsigned int a3, uint64_t a4, uint64_t a5, const char *a6)
{
  if ((a3 & 0x80000000) != 0 || *((_DWORD *)this + 20) <= (signed int)a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"NormalizeGradients", "../subproject/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)&stru_1A8.size + 3, "batch_idx >= 0 && batch_idx < ropts_.num_subbatches", a6);
  }
  float v7 = a2;
  int v8 = *((_DWORD *)this + 39);
  if (v8 == 3)
  {
    if (a2 >= 0.0 && a2 <= 1.0)
    {
      uint64_t v10 = a3;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((void *)this + 30) + 48 * a3, *((void *)this + 36) + 48 * a3, a2);
      uint64_t v14 = *((void *)this + 33) + 32 * v10;
      uint64_t v15 = *((void *)this + 39) + 32 * v10;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v14, v15, v7, v11, v12, v13);
    }
  }
  else if (v8 == 1)
  {
    if (a2 > 0.0)
    {
      uint64_t v9 = a3;
      if (*((unsigned char *)this + 84)) {
        float v7 = (float)*(int *)(*((void *)this + 51) + 4 * a3) * a2;
      }
      kaldi::nnet1::UpdatableComponent::ClipGradient(*((void *)this + 30) + 48 * a3, v7);
      uint64_t v17 = *((void *)this + 33) + 32 * v9;
      kaldi::nnet1::UpdatableComponent::ClipGradient(v17, v7);
    }
  }
  else if (a2 > 0.0 && v8 == 2)
  {
    uint64_t v16 = a3;
    if (*((unsigned char *)this + 84)) {
      float v7 = (float)*(int *)(*((void *)this + 51) + 4 * a3) * a2;
    }
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((void *)this + 30) + 48 * a3, (unsigned int *)(*((void *)this + 36) + 48 * a3), v7, a4, a5, a6);
    uint64_t v21 = *((void *)this + 33) + 32 * v16;
    uint64_t v22 = (_DWORD *)(*((void *)this + 39) + 32 * v16);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v21, v22, v18, v19, v20, v7);
  }
}

void kaldi::nnet1::Recurrent::UpdateWeights(kaldi::nnet1::Recurrent *this, void *a2, int a3)
{
  (*(void (**)(kaldi::nnet1::Recurrent *))(*(void *)this + 88))(this);
  kaldi::nnet1::Recurrent::EnsureTrainingBuffers(this);
  float v9 = *(float *)((char *)this + *(void *)(*(void *)this - 24) + 56);
  float v11 = *((float *)this + 16);
  float v10 = *((float *)this + 17);
  *((void *)this + ++*(void *)(result + 24) = a2;
  *((void *)this + 29) = a2;
  uint64_t v12 = *((unsigned int *)this + 20);
  if (a3 >= 0) {
    unsigned int v13 = a3;
  }
  else {
    unsigned int v13 = *((_DWORD *)this + 20);
  }
  if (v12 == 1) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = v13;
  }
  if ((int)v14 > (int)v12) {
    kaldi::KaldiAssertFailure_((kaldi *)"UpdateWeights", "../subproject/libquasar/libkaldi/src/nnet/nnet-recurrent.h", (const char *)&stru_1A8.reserved3 + 3, "batch_idx <= ropts_.num_subbatches", v8);
  }
  uint64_t v15 = *((void *)this + 30);
  uint64_t v16 = v15 + 48 * (int)v14;
  *(void *)(v16 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
  *(void *)(*((void *)this + 33) + 32 * (int)v14 + ++*(void *)(result + 24) = a2;
  *(void *)(*((void *)this + 36) + 48 * (int)v14 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
  *(void *)(*((void *)this + 39) + 32 * (int)v14 + ++*(void *)(result + 24) = a2;
  if (v14 == v12)
  {
    kaldi::CuMatrixBase<float>::AddMat(v16, v15, 111, v7, v8, 1.0, 0.0);
    kaldi::CuVectorBase<float>::AddVec(*((void *)this + 33) + 32 * (int)v14, *((void *)this + 33), v17, v18, v19, 1.0, 0.0);
    if (*((int *)this + 20) > 1)
    {
      uint64_t v20 = 1;
      uint64_t v21 = 32;
      uint64_t v22 = 48;
      do
      {
        kaldi::CuMatrixBase<float>::AddMat(*((void *)this + 30) + 48 * (int)v14, *((void *)this + 30) + v22, 111, v7, v8, 1.0, 1.0);
        kaldi::CuVectorBase<float>::AddVec(*((void *)this + 33) + 32 * (int)v14, *((void *)this + 33) + v21, v23, v24, v25, 1.0, 1.0);
        ++v20;
        v22 += 48;
        v21 += 32;
      }
      while (v20 < *((int *)this + 20));
    }
    long long v26 = (int *)*((void *)this + 51);
    v26[(int)v14] = 0;
    if ((int)v12 >= 1)
    {
      int v27 = 0;
      long long v28 = v26;
      do
      {
        int v29 = *v28++;
        v27 += v29;
        v26[(int)v14] = v27;
        --v12;
      }
      while (v12);
    }
  }
  if (*((unsigned char *)this + 84)) {
    float v9 = v9 / (float)*(int *)(*((void *)this + 51) + 4 * (int)v14);
  }
  if (*((float *)this + 38) >= 0.0) {
    (*(void (**)(kaldi::nnet1::Recurrent *, uint64_t))(*(void *)this + 280))(this, v14);
  }
  if (v11 != 0.0) {
    kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 160, (uint64_t)this + 160, 111, v7, v8, (float)-(float)(v9 * v11) * (float)*(int *)(*((void *)this + 51) + 4 * (int)v14), 1.0);
  }
  uint64_t v30 = *((void *)this + 30);
  if (v10 != 0.0)
  {
    kaldi::cu::RegularizeL1<float>((_DWORD *)this + 40, v30 + 48 * (int)v14, (float)(v10 * v9) * (float)*(int *)(*((void *)this + 51) + 4 * (int)v14), v9, v6, v7, v8);
    uint64_t v30 = *((void *)this + 30);
  }
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 160, v30 + 48 * (int)v14, 111, v7, v8, -(float)(v9 * *((float *)this + 98)), 1.0);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 208, *((void *)this + 33) + 32 * (int)v14, v31, v32, v33, -(float)(v9 * *((float *)this + 99)), 1.0);
  if (*((float *)this + 100) > 0.0)
  {
    *((void *)this + 58) = a2;
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)this + 108, (uint64_t)this + 160, 111, v34, v35);
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)this + 432, (uint64_t)this + 160, v36, v37, v38);
    uint64_t v39 = *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12);
    v52[2] = 0;
    long long v53 = 0;
    v52[0] = off_262E60;
    v52[1] = 0;
    kaldi::CuVector<float>::Resize((uint64_t)v52, v39, 0, v40, v41);
    long long v53 = a2;
    kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)v52, (unsigned int *)this + 108, 1.0, 0.0, v42, v43, v44);
    kaldi::CuVectorBase<float>::ApplyPow((uint64_t)v52, 0.5);
    kaldi::CuVector<float>::CuVector((uint64_t)v51, (uint64_t)v52, v45, v46, v47);
    kaldi::CuVectorBase<float>::Scale((uint64_t)v51, 1.0 / *((float *)this + 100));
    kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)v51, 1.0);
    kaldi::CuVectorBase<float>::InvertElements((uint64_t)v51);
    kaldi::CuMatrixBase<float>::MulRowsVec((uint64_t)this + 160, (uint64_t)v51, v48, v49, v50);
    kaldi::CuVector<float>::~CuVector(v51);
    kaldi::CuVector<float>::~CuVector(v52);
  }
}

void sub_EF160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Recurrent::GetGradient(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = (const void *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 136))(a1);
  if (v8) {
  else
  }
    float v9 = 0;
  (*((void (**)(_DWORD **, uint64_t, uint64_t, void, void))*v9 + 34))(v9, a2, a3, 0, 0);
  uint64_t v10 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 184))(a1);
  kaldi::Vector<float>::Resize((void **)a4, v10, 1, v11, v12);
  int v16 = a1[44] * a1[45];
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  if (v16 > *(_DWORD *)(a4 + 8) {
    || (uint64_t v21 = *(void **)a4,
  }
        LODWORD(v2std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v16,
        kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v21, v9[30], v13, v14, v15),
        int v19 = a1[56],
        uint64_t v22 = 0,
        uint64_t v23 = 0,
        (v19 + v16) > *(_DWORD *)(a4 + 8)))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v15);
  }
  uint64_t v21 = (void *)(*(void *)a4 + 4 * v16);
  LODWORD(v2std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v19;
  kaldi::CuVectorBase<float>::CopyToVec<float>(v9[33], (uint64_t)&v21, v17, v18, v15);
  return (*((uint64_t (**)(_DWORD **))*v9 + 1))(v9);
}

void virtual thunk to'kaldi::nnet1::Recurrent::Copy(kaldi::nnet1::Recurrent *this)
{
}

uint64_t virtual thunk to'kaldi::nnet1::Recurrent::Info(kaldi::nnet1::Recurrent *this)
{
  return kaldi::nnet1::Recurrent::Info((kaldi::nnet1::Recurrent *)((char *)this + *(void *)(*(void *)this - 80)));
}

void virtual thunk to'kaldi::nnet1::Recurrent::InfoGradient(kaldi::nnet1::Recurrent *this@<X0>, void *a2@<X8>)
{
}

void virtual thunk to'kaldi::nnet1::Recurrent::InitData(void *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
}

void virtual thunk to'kaldi::nnet1::Recurrent::WriteData(void *a1, void *a2, int a3, int a4)
{
}

uint64_t virtual thunk to'kaldi::nnet1::Recurrent::PropagateFnc(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  return kaldi::nnet1::Recurrent::PropagateFnc((uint64_t)a1 + *(void *)(*a1 - 128), a2, a3, a4);
}

uint64_t virtual thunk to'kaldi::nnet1::Recurrent::PropagateFnc(void *a1, uint64_t a2, uint64_t a3)
{
  return kaldi::nnet1::Recurrent::PropagateFnc((uint64_t)a1 + *(void *)(*a1 - 136), a2, a3);
}

uint64_t virtual thunk to'kaldi::nnet1::Recurrent::BackpropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, int a6)
{
  return kaldi::nnet1::Recurrent::BackpropagateFnc((uint64_t)a1 + *(void *)(*a1 - 144), a2, a3, a4, a5, a6);
}

void virtual thunk to'kaldi::nnet1::Recurrent::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
}

void *virtual thunk to'kaldi::nnet1::Recurrent::WriteConfig(void *a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::Recurrent::WriteConfig((uint64_t)a1 + *(void *)(*a1 - 184), a2, a3, a4, a5);
}

uint64_t virtual thunk to'kaldi::nnet1::Recurrent::NumParams(kaldi::nnet1::Recurrent *this)
{
  return (*(_DWORD *)((char *)this + *(void *)(*(void *)this - 192) + 224)
                      + *(_DWORD *)((char *)this + *(void *)(*(void *)this - 192) + 176)
                      * *(_DWORD *)((char *)this + *(void *)(*(void *)this - 192) + 180));
}

_DWORD *virtual thunk to'kaldi::nnet1::Recurrent::GetParams(void *a1, uint64_t a2)
{
  return kaldi::nnet1::Recurrent::GetParams((void *)((char *)a1 + *(void *)(*a1 - 200)), a2);
}

_DWORD *virtual thunk to'kaldi::nnet1::Recurrent::SetParams(void *a1, uint64_t a2)
{
  return kaldi::nnet1::Recurrent::SetParams((void *)((char *)a1 + *(void *)(*a1 - 208)), a2);
}

float virtual thunk to'kaldi::nnet1::Recurrent::SumParams(kaldi::nnet1::Recurrent *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unsigned int v5 = (char *)this + *(void *)(*(void *)this - 224);
  float v6 = kaldi::CuMatrixBase<float>::Sum((uint64_t)(v5 + 160), a2, a3, a4, a5);
  double v7 = kaldi::CuVectorBase<float>::Sum((uint64_t)(v5 + 208));
  return v6 + *(float *)&v7;
}

uint64_t virtual thunk to'kaldi::nnet1::Recurrent::PerturbParams(kaldi::nnet1::Recurrent *this, float a2)
{
  return kaldi::nnet1::Recurrent::PerturbParams((kaldi::nnet1::Recurrent *)((char *)this + *(void *)(*(void *)this - 232)), a2);
}

uint64_t virtual thunk to'kaldi::nnet1::Recurrent::GetGradient(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::Recurrent::GetGradient((void *)((char *)a1 + *(void *)(*a1 - 240)), a2, a3, a4);
}

uint64_t virtual thunk to'kaldi::nnet1::Recurrent::AccumGradients(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return kaldi::nnet1::Recurrent::AccumGradients((uint64_t)a1 + *(void *)(*a1 - 248), a2, a3, a4, a5);
}

void *virtual thunk to'kaldi::nnet1::Recurrent::SetGradientNormalization(void *result, int a2, float a3)
{
  unsigned int v3 = (float *)((char *)result + *(void *)(*result - 256));
  v3[38] = a3;
  *((_DWORD *)v3 + 39) = a2;
  *((unsigned char *)v3 + 388) = 0;
  return result;
}

void virtual thunk to'kaldi::nnet1::Recurrent::NormalizeGradients(kaldi::nnet1::Recurrent *this, float a2, unsigned int a3, uint64_t a4, uint64_t a5, const char *a6)
{
}

void virtual thunk to'kaldi::nnet1::Recurrent::UpdateWeights(kaldi::nnet1::Recurrent *this, void *a2, int a3)
{
}

void virtual thunk to'kaldi::nnet1::Recurrent::SetTrainOptions(kaldi::nnet1::Recurrent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  int v2 = (kaldi::nnet1::Recurrent *)((char *)this + *(void *)(*(void *)this - 280));
  kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(v2, a2);
  *((_WORD *)v2 + 194) = 0;
}

void kaldi::nnet1::ConvolutionalComponent::Copy(kaldi::nnet1::ConvolutionalComponent *this)
{
}

void sub_EF678()
{
}

uint64_t kaldi::nnet1::ConvolutionalComponent::GetType(kaldi::nnet1::ConvolutionalComponent *this)
{
  return 261;
}

uint64_t kaldi::nnet1::ConvolutionalComponent::Info(kaldi::nnet1::ConvolutionalComponent *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  (*(void (**)(kaldi::nnet1::ConvolutionalComponent *, void *, void))(*(void *)this + 168))(this, v18, 0);
  int v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n filters: ", 11);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 104);
  if ((v17 & 0x80u) == 0) {
    unsigned int v3 = v16;
  }
  else {
    unsigned int v3 = (void **)v16[0];
  }
  if ((v17 & 0x80u) == 0) {
    uint64_t v4 = v17;
  }
  else {
    uint64_t v4 = (uint64_t)v16[1];
  }
  unsigned int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  float v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\n bias: ", 8);
  kaldi::nnet1::MomentStatistics<float>((_DWORD *)this + 38, v7, v8, v9, v10);
  if ((v15 & 0x80u) == 0) {
    uint64_t v11 = __p;
  }
  else {
    uint64_t v11 = (void **)__p[0];
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v12 = v15;
  }
  else {
    uint64_t v12 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v11, v12);
  if ((char)v15 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v17 < 0) {
    operator delete(v16[0]);
  }
  std::stringbuf::str();
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_EF8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalComponent::InfoGradient(kaldi::nnet1::ConvolutionalComponent *this@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v49, "\n  filters_grad");
  kaldi::nnet1::MomentStatistics<float>((void *)this + 24, v4, v5, v6, v7);
  if ((v48 & 0x80u) == 0) {
    uint64_t v8 = v47;
  }
  else {
    uint64_t v8 = (void **)v47[0];
  }
  if ((v48 & 0x80u) == 0) {
    std::string::size_type v9 = v48;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v47[1];
  }
  uint64_t v10 = std::string::append(&v49, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  uint64_t v12 = std::string::append(&v50, ", lr-coef ");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v46 & 0x80u) == 0) {
    uint64_t v14 = v45;
  }
  else {
    uint64_t v14 = (void **)v45[0];
  }
  if ((v46 & 0x80u) == 0) {
    std::string::size_type v15 = v46;
  }
  else {
    std::string::size_type v15 = (std::string::size_type)v45[1];
  }
  int v16 = std::string::append(&v51, (const std::string::value_type *)v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  uint64_t v18 = std::string::append(&v52, ", max-norm ");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v44 & 0x80u) == 0) {
    uint64_t v20 = v43;
  }
  else {
    uint64_t v20 = (void **)v43[0];
  }
  if ((v44 & 0x80u) == 0) {
    std::string::size_type v21 = v44;
  }
  else {
    std::string::size_type v21 = (std::string::size_type)v43[1];
  }
  uint64_t v22 = std::string::append(&v53, (const std::string::value_type *)v20, v21);
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  uint64_t v24 = std::string::append(&v54, "\n  bias_grad");
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((void *)this + 27, v26, v27, v28, v29);
  if ((v42 & 0x80u) == 0) {
    uint64_t v30 = v41;
  }
  else {
    uint64_t v30 = (void **)v41[0];
  }
  if ((v42 & 0x80u) == 0) {
    std::string::size_type v31 = v42;
  }
  else {
    std::string::size_type v31 = (std::string::size_type)v41[1];
  }
  uint64_t v32 = std::string::append(&v55, (const std::string::value_type *)v30, v31);
  long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  uint64_t v34 = std::string::append(&v56, ", lr-coef ");
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v40 & 0x80u) == 0) {
    uint64_t v36 = __p;
  }
  else {
    uint64_t v36 = (void **)__p[0];
  }
  if ((v40 & 0x80u) == 0) {
    std::string::size_type v37 = v40;
  }
  else {
    std::string::size_type v37 = (std::string::size_type)__p[1];
  }
  int v38 = std::string::append(&v57, (const std::string::value_type *)v36, v37);
  *a2 = *v38;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  if ((char)v40 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if ((char)v42 < 0) {
    operator delete(v41[0]);
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if ((char)v44 < 0) {
    operator delete(v43[0]);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if ((char)v46 < 0) {
    operator delete(v45[0]);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if ((char)v48 < 0) {
    operator delete(v47[0]);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
}

void sub_EFC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v64 - 41) < 0) {
    operator delete(*(void **)(v64 - 64));
  }
  if (*(char *)(v64 - 73) < 0) {
    operator delete(*(void **)(v64 - 96));
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(char *)(v64 - 105) < 0) {
    operator delete(*(void **)(v64 - 128));
  }
  if (*(char *)(v64 - 137) < 0) {
    operator delete(*(void **)(v64 - 160));
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (*(char *)(v64 - 169) < 0) {
    operator delete(*(void **)(v64 - 192));
  }
  if (a64 < 0) {
    operator delete(a59);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  _Unwind_Resume(a1);
}

void sub_EFD54()
{
}

void sub_EFD5C()
{
}

void sub_EFD64()
{
}

void sub_EFD6C()
{
}

void sub_EFD74()
{
}

void kaldi::nnet1::ConvolutionalComponent::InitData(_DWORD *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  float v93 = 2.0;
  int v94 = -1073741824;
  int v92 = 1036831949;
  int v91 = -1;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)a1[46], &v90);
  memset(v89, 0, sizeof(v89));
  float v76 = a1 + 23;
  float v77 = a1 + 22;
  while (2)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_139;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v89, v6, v7);
    if ((SHIBYTE(v89[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v89[2]))
      {
        case 9:
          BOOL v10 = v89[0] == (void *)0x6D726F4E78614D3CLL && LOBYTE(v89[1]) == 62;
          long long v11 = (float *)(a1 + 74);
          if (v10) {
            goto LABEL_128;
          }
          BOOL v12 = v89[0] == (void *)0x6461724778614D3CLL && LOBYTE(v89[1]) == 62;
          long long v11 = (float *)(a1 + 47);
          if (v12) {
            goto LABEL_128;
          }
          if ((HIBYTE(v89[2]) & 0x80) != 0) {
            goto LABEL_131;
          }
          goto LABEL_177;
        case 0xA:
          if (v89[0] == (void *)0x61654D736169423CLL && LOWORD(v89[1]) == 15982) {
            goto LABEL_89;
          }
          BOOL v24 = v89[0] == (void *)0x694468637461503CLL && LOWORD(v89[1]) == 15981;
          goto LABEL_87;
        case 0xB:
          if (v89[0] == (void *)0x6E6152736169423CLL && *(void **)((char *)v89 + 3) == (void *)0x3E65676E61527361) {
            goto LABEL_79;
          }
          BOOL v19 = v89[0] == (void *)0x745368637461503CLL && *(void **)((char *)v89 + 3) == (void *)0x3E70657453686374;
          goto LABEL_77;
        case 0xC:
          if (v89[0] == (void *)0x536D6F646E61523CLL && LODWORD(v89[1]) == 1046766949) {
            goto LABEL_95;
          }
          uint64_t v36 = v89;
          goto LABEL_134;
        case 0xD:
          if (v89[0] == (void *)0x74536D617261503CLL && *(void **)((char *)v89 + 5) == (void *)0x3E7665646474536DLL) {
            goto LABEL_119;
          }
          BOOL v16 = v89[0] == (void *)0x745368637461503CLL && *(void **)((char *)v89 + 5) == (void *)0x3E65646972745368;
          goto LABEL_116;
        case 0xF:
          BOOL v17 = v89[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v89 + 7) == (void *)0x3E66656F43657461;
          goto LABEL_68;
        case 0x12:
          if (v89[0] != (void *)0x6E6569646172473CLL
            || v89[1] != (void *)0x7079546D726F4E74
            || LOWORD(v89[2]) != 15973)
          {
            goto LABEL_177;
          }
          goto LABEL_64;
        case 0x13:
          BOOL v21 = v89[0] == (void *)0x61654C736169423CLL
             && v89[1] == (void *)0x6F43657461526E72
             && *(void **)((char *)&v89[1] + 3) == (void *)0x3E66656F43657461;
          goto LABEL_126;
        default:
          goto LABEL_177;
      }
    }
    long long v13 = (int *)v89[1];
    switch((unint64_t)v89[1])
    {
      case 9uLL:
        BOOL v14 = *(void *)v89[0] == 0x6D726F4E78614D3CLL && *((unsigned char *)v89[0] + 8) == 62;
        long long v11 = (float *)(a1 + 74);
        if (!v14) {
          goto LABEL_104;
        }
        goto LABEL_128;
      case 0xAuLL:
        if (*(void *)v89[0] == 0x61654D736169423CLL && *((_WORD *)v89[0] + 4) == 15982)
        {
LABEL_89:
          long long v11 = (float *)&v94;
          goto LABEL_128;
        }
        BOOL v24 = *(void *)v89[0] == 0x694468637461503CLL && *((_WORD *)v89[0] + 4) == 15981;
LABEL_87:
        uint64_t v28 = a1 + 22;
        if (!v24) {
          goto LABEL_177;
        }
        goto LABEL_118;
      case 0xBuLL:
        if (*(void *)v89[0] == 0x6E6152736169423CLL && *(void *)((char *)v89[0] + 3) == 0x3E65676E61527361)
        {
LABEL_79:
          long long v11 = &v93;
          goto LABEL_128;
        }
        BOOL v19 = *(void *)v89[0] == 0x745368637461503CLL && *(void *)((char *)v89[0] + 3) == 0x3E70657453686374;
LABEL_77:
        uint64_t v28 = a1 + 23;
        if (!v19) {
          goto LABEL_177;
        }
        goto LABEL_118;
      case 0xCuLL:
        if (*(void *)v89[0] != 0x536D6F646E61523CLL || *((_DWORD *)v89[0] + 2) != 1046766949) {
          goto LABEL_133;
        }
LABEL_95:
        uint64_t v28 = &v91;
        goto LABEL_118;
      case 0xDuLL:
        if (*(void *)v89[0] == 0x74536D617261503CLL && *(void *)((char *)v89[0] + 5) == 0x3E7665646474536DLL)
        {
LABEL_119:
          long long v11 = (float *)&v92;
          goto LABEL_128;
        }
        BOOL v16 = *(void *)v89[0] == 0x745368637461503CLL && *(void *)((char *)v89[0] + 5) == 0x3E65646972745368;
LABEL_116:
        uint64_t v28 = a1 + 24;
        if (!v16) {
          goto LABEL_177;
        }
LABEL_118:
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v28, v8, v9);
        goto LABEL_129;
      case 0xFuLL:
        BOOL v17 = *(void *)v89[0] == 0x61526E7261654C3CLL && *(void *)((char *)v89[0] + 7) == 0x3E66656F43657461;
LABEL_68:
        long long v11 = (float *)(a1 + 72);
        if (!v17) {
          goto LABEL_177;
        }
        goto LABEL_128;
      case 0x12uLL:
        if (*(void *)v89[0] == 0x6E6569646172473CLL
          && *((void *)v89[0] + 1) == 0x7079546D726F4E74
          && *((_WORD *)v89[0] + 8) == 15973)
        {
LABEL_64:
          kaldi::ReadToken(a2, 0, (uint64_t)&v90, v8, v9);
          goto LABEL_129;
        }
        if (v89[1] != (char *)&dword_8 + 1) {
          goto LABEL_132;
        }
LABEL_104:
        BOOL v33 = *(void *)v89[0] == 0x6461724778614D3CLL && *((unsigned char *)v89[0] + 8) == 62;
        long long v11 = (float *)(a1 + 47);
        if (v33)
        {
LABEL_128:
          kaldi::ReadBasicType<float>(a2, 0, v11, v8, v9);
LABEL_129:
          std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
          continue;
        }
LABEL_131:
        long long v13 = (int *)v89[1];
LABEL_132:
        if (v13 != &dword_C)
        {
LABEL_177:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v85, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", 114);
          uint64_t v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"Unknown token ", 14);
          if (SHIBYTE(v89[2]) >= 0) {
            float v72 = v89;
          }
          else {
            float v72 = (void **)v89[0];
          }
          if (SHIBYTE(v89[2]) >= 0) {
            uint64_t v73 = HIBYTE(v89[2]);
          }
          else {
            uint64_t v73 = (uint64_t)v89[1];
          }
          uint64_t v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)v72, v73);
          uint64_t v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)", a typo in config?", 19);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)" (ParamStddev|BiasMean|BiasRange|PatchDim|PatchStep|PatchStride|MaxNorm|GradientNormType|MaxGrad|RandomSeed)", 108);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v85);
        }
LABEL_133:
        uint64_t v36 = (void **)v89[0];
LABEL_134:
        std::string::size_type v37 = *v36;
        int v38 = *((_DWORD *)v36 + 2);
        if (v37 != (void *)0x6E6F706D6F432F3CLL || v38 != 1047817829) {
          goto LABEL_177;
        }
LABEL_139:
        a1[46] = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v90);
        int v41 = a1[2];
        int v42 = a1[24];
        int v43 = v41 / v42;
        if (v41 % v42) {
          kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", &stru_68.segname[6], "input_dim_ % patch_stride_ == 0", v40);
        }
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v85, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", 128);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"num_splice ", 11);
          std::ostream::operator<<();
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v85);
          int v42 = a1[24];
        }
        int v44 = v42 - *v77;
        if (v44 % *v76) {
          kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", &stru_68.segname[10], "(patch_stride_ - patch_dim_) % patch_step_ == 0", v40);
        }
        int v45 = v44 / *v76 + 1;
        if (kaldi::g_kaldi_verbose_level < 0)
        {
          uint64_t v46 = (*v77 * v43);
        }
        else
        {
          kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v85, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", 132);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"num_patches ", 12);
          std::ostream::operator<<();
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v85);
          uint64_t v46 = (*v77 * v43);
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v85, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", 135);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"filter_dim ", 11);
            std::ostream::operator<<();
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v85);
          }
        }
        int v47 = a1[3];
        uint64_t v48 = (v47 / v45);
        if (v47 % v45) {
          kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", (const char *)&stru_68.addr + 1, "output_dim_ % num_patches == 0", v40);
        }
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v85, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", 139);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"num_filters ", 12);
          std::ostream::operator<<();
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v85);
        }
        if (v91 >= 1) {
          kaldi::UniformRandomNumber::SetRandomSeeds(a3, v91);
        }
        kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v85, a3);
        kaldi::Matrix<float>::Matrix((uint64_t)&v81, v48, v46, 0, 0);
        if ((int)v48 >= 1)
        {
          unsigned int v52 = 0;
          do
          {
            if ((int)v46 >= 1)
            {
              unint64_t v53 = 0;
              do
              {
                float v54 = *(float *)&v92;
                kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v85, 0, v49, v50, v51);
                if (v83 <= v52 || v53 >= v82) {
                  kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)&stru_68.addr, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v51);
                }
                *((float *)v81 + (int)(v52 * v84) + v53++) = v54 * v55;
              }
              while (v46 != v53);
            }
            ++v52;
          }
          while (v52 != v48);
        }
        kaldi::CuMatrix<float>::operator=((uint64_t)(a1 + 26), (kaldi::ContextDependency *)&v81);
        uint64_t v78 = 0;
        uint64_t v79 = 0;
        uint64_t v80 = 0;
        kaldi::Vector<float>::Resize((void **)&v78, v48, 0, v57, v58);
        if ((int)v48 <= 0)
        {
          uint64_t v65 = v79;
        }
        else
        {
          for (unint64_t i = 0; i != v48; ++i)
          {
            float v63 = *(float *)&v94;
            float v64 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v59, v60, v61);
            uint64_t v65 = v79;
            if (i >= v79) {
              kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", stru_68.sectname, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v61);
            }
            float v66 = v63 + (v64 + -0.5) * v93;
            v78[i] = v66;
          }
        }
        float v67 = a1 + 38;
        kaldi::CuVector<float>::Resize((uint64_t)v67, v65, 1u, v60, v61);
        kaldi::CuVectorBase<float>::CopyFromVec<float>(v67, (uint64_t)&v78, v68, v69, v70);
        kaldi::Vector<float>::Destroy((uint64_t)&v78);
        kaldi::Matrix<float>::~Matrix((uint64_t)&v81);
        if (__p)
        {
          int v88 = __p;
          operator delete(__p);
        }
        uint64_t v81 = (void **)&v86;
        std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v81);
        if (SHIBYTE(v89[2]) < 0) {
          operator delete(v89[0]);
        }
        if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v90.__r_.__value_.__l.__data_);
        }
        return;
      case 0x13uLL:
        BOOL v21 = *(void *)v89[0] == 0x61654C736169423CLL
           && *((void *)v89[0] + 1) == 0x6F43657461526E72
           && *(void *)((char *)v89[0] + 11) == 0x3E66656F43657461;
LABEL_126:
        long long v11 = (float *)(a1 + 73);
        if (!v21) {
          goto LABEL_177;
        }
        goto LABEL_128;
      default:
        goto LABEL_132;
    }
  }
}

void sub_F0944()
{
  kaldi::Vector<float>::Destroy(&v0);
  JUMPOUT(0xF096CLL);
}

void sub_F095C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 145) < 0) {
    operator delete(*(void **)(v1 - 168));
  }
  if (*(char *)(v1 - 121) < 0) {
    operator delete(*(void **)(v1 - 144));
  }
  _Unwind_Resume(exception_object);
}

void sub_F0964()
{
  kaldi::Matrix<float>::~Matrix(&v0);
  kaldi::GaussRandomNumber::~GaussRandomNumber((kaldi::GaussRandomNumber *)&v1);
  JUMPOUT(0xF097CLL);
}

void kaldi::nnet1::ConvolutionalComponent::WriteData(_DWORD *a1, void *a2, int a3)
{
  uint64_t v6 = a1 + 38;
  (*(void (**)(_DWORD *))(*(void *)a1 + 168))(a1);
  kaldi::CuMatrixBase<float>::Write((uint64_t)(a1 + 26), a2, a3, 0);

  kaldi::CuVectorBase<float>::Write(v6, a2, a3, v7, v8);
}

uint64_t *kaldi::nnet1::ConvolutionalComponent::PropagateFnc(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  int v5 = *((_DWORD *)result + 2);
  int v6 = *((_DWORD *)result + 24);
  unsigned int v39 = *(_DWORD *)(a2 + 20);
  int v7 = *((_DWORD *)result + 31);
  uint64_t v37 = *((int *)result + 30);
  int v41 = result + 38;
  int v8 = (v6 - *((_DWORD *)result + 22)) / *((_DWORD *)result + 23);
  if (result[39] == result[38])
  {
    std::vector<kaldi::CuMatrix<float>>::resize(v41, v8 + 1);
    uint64_t result = std::vector<kaldi::CuMatrix<float>>::resize(v4 + 41, v8 + 1);
    if (v8 < 0) {
      return result;
    }
  }
  else if (v8 < 0)
  {
    return result;
  }
  uint64_t v36 = a3;
  uint64_t v9 = 0;
  uint64_t v35 = (uint64_t)(v4 + 13);
  uint64_t v40 = (v8 + 1);
  int v10 = v5 / v6;
  uint64_t v11 = v37;
  do
  {
    kaldi::CuMatrix<float>::Resize(*v41 + 48 * v9, v39, v11, 0, 0);
    memset(__p, 0, 24);
    if (v10 < 1)
    {
      uint64_t v28 = 0;
      BOOL v14 = 0;
    }
    else
    {
      BOOL v14 = 0;
      int v15 = 0;
      int v16 = *((_DWORD *)v4 + 22);
      do
      {
        if (v16 >= 1)
        {
          for (int i = 0; i < v16; ++i)
          {
            int v18 = i + *((_DWORD *)v4 + 23) * v9 + *((_DWORD *)v4 + 24) * v15;
            if ((unint64_t)v14 >= *(void *)&__p[16])
            {
              BOOL v19 = *(_DWORD **)__p;
              uint64_t v20 = ((uint64_t)v14 - *(void *)__p) >> 2;
              unint64_t v21 = v20 + 1;
              if ((unint64_t)(v20 + 1) >> 62) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v22 = *(void *)&__p[16] - *(void *)__p;
              if ((uint64_t)(*(void *)&__p[16] - *(void *)__p) >> 1 > v21) {
                unint64_t v21 = v22 >> 1;
              }
              if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v23 = v21;
              }
              if (v23)
              {
                BOOL v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&__p[16], v23);
                BOOL v19 = *(_DWORD **)__p;
                BOOL v14 = *(_DWORD **)&__p[8];
              }
              else
              {
                BOOL v24 = 0;
              }
              long long v25 = &v24[4 * v20];
              *(_DWORD *)long long v25 = v18;
              uint64_t v26 = v25 + 4;
              while (v14 != v19)
              {
                int v27 = *--v14;
                *((_DWORD *)v25 - 1) = v27;
                v25 -= 4;
              }
              *(void *)std::string __p = v25;
              *(void *)&__p[8] = v26;
              *(void *)&__p[16] = &v24[4 * v23];
              if (v19) {
                operator delete(v19);
              }
              BOOL v14 = v26;
            }
            else
            {
              *v14++ = v18;
            }
            *(void *)&__p[8] = v14;
            int v16 = *((_DWORD *)v4 + 22);
          }
        }
        ++v15;
      }
      while (v15 != v10);
      uint64_t v28 = *(void *)__p;
      uint64_t v11 = v37;
    }
    if (v11 != ((uint64_t)v14 - v28) >> 2) {
      kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", (const char *)&stru_108.reserved1, "column_mask.size() == filter_dim", v13);
    }
    kaldi::CuMatrixBase<float>::CopyCols(*v41 + 48 * v9, a2, (unsigned int **)__p, v12, v13);
    if (*(void *)__p)
    {
      *(void *)&__p[8] = *(void *)__p;
      operator delete(*(void **)__p);
    }
    ++v9;
  }
  while (v9 != v40);
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = (uint64_t)(v4 + 19);
  do
  {
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)__p, v36, 0, *(_DWORD *)(v36 + 20), v30, v7);
    kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)__p, v31, v32, v33, v34, 1.0, 0.0);
    kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)__p, *v41 + v29, CblasNoTrans, v35, &stru_68.sectname[8], 1.0, 1.0);
    *(void *)std::string __p = off_262D80;
    memset(&__p[8], 0, 32);
    uint64_t result = (uint64_t *)fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(__p);
    uint64_t v30 = (const char *)(v30 + v7);
    v29 += 48;
  }
  while (48 * v40 != v29);
  return result;
}

void sub_F0DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *kaldi::nnet1::ConvolutionalComponent::BackpropagateFnc(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5 = result[24];
  int v6 = (v5 - result[22]) / result[23];
  if ((v6 & 0x80000000) == 0)
  {
    uint64_t v9 = result;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v21 = (uint64_t)(result + 26);
    unsigned int v20 = *(_DWORD *)(a2 + 20);
    uint64_t v13 = result[30];
    int v12 = result[31];
    uint64_t v19 = (v6 + 1);
    int v14 = result[2] / v5;
    do
    {
      kaldi::CuMatrix<float>::Resize(*((void *)v9 + 41) + v10, v20, v13, 0, 0);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v25, a4, 0, *(_DWORD *)(a4 + 20), v11, v12);
      kaldi::CuMatrixBase<float>::AddMatMat(*((void *)v9 + 41) + v10, (uint64_t)&v25, CblasNoTrans, v21, &stru_68.sectname[7], 1.0, 0.0);
      long long v25 = off_262D80;
      long long v26 = 0u;
      long long v27 = 0u;
      uint64_t result = (_DWORD *)fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v25);
      uint64_t v11 = (const char *)(v11 + v12);
      v10 += 48;
    }
    while (48 * v19 != v10);
    uint64_t v15 = 0;
    do
    {
      if (v14 >= 1)
      {
        for (int i = 0; i != v14; ++i)
        {
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v25, *((void *)v9 + 41) + 48 * v15, 0, *(_DWORD *)(*((void *)v9 + 41) + 48 * v15 + 20), (const char *)(v9[22] * i), v9[22]);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v22, a5, 0, *(_DWORD *)(a5 + 20), (const char *)(v9[23] * v15 + v9[24] * i), v9[22]);
          kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v22, (uint64_t)&v25, 111, v17, v18, 1.0, 1.0);
          uint64_t v22 = off_262D80;
          long long v23 = 0u;
          long long v24 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v22);
          long long v25 = off_262D80;
          long long v26 = 0u;
          long long v27 = 0u;
          uint64_t result = (_DWORD *)fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v25);
        }
      }
      ++v15;
    }
    while (v15 != v19);
  }
  return result;
}

void sub_F1058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void (**a18)())
{
  a18 = off_262D80;
  _OWORD *v18 = 0u;
  v18[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a18);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalComponent::ReadData(float *a1, uint64_t *a2, uint64_t a3)
{
  while (kaldi::Peek(a2, a3) == 60)
  {
    memset(v53, 0, 24);
    kaldi::ReadToken(a2, a3, (uint64_t)v53, v6, v7);
    if ((SHIBYTE(v53[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v53[2]))
      {
        case 9:
          goto LABEL_85;
        case 0xA:
          BOOL v10 = v53[0] == (void *)0x694468637461503CLL && LOWORD(v53[1]) == 15981;
          uint64_t v11 = (uint64_t)(a1 + 22);
          if (!v10) {
            goto LABEL_119;
          }
          goto LABEL_75;
        case 0xB:
          BOOL v25 = v53[0] == (void *)0x745368637461503CLL && *(void **)((char *)v53 + 3) == (void *)0x3E70657453686374;
          uint64_t v11 = (uint64_t)(a1 + 23);
          if (!v25) {
            goto LABEL_84;
          }
          goto LABEL_75;
        case 0xD:
          BOOL v26 = v53[0] == (void *)0x745368637461503CLL && *(void **)((char *)v53 + 5) == (void *)0x3E65646972745368;
          uint64_t v11 = (uint64_t)(a1 + 24);
          if (!v26) {
            goto LABEL_84;
          }
          goto LABEL_75;
        case 0xF:
          BOOL v24 = v53[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v53 + 7) == (void *)0x3E66656F43657461;
          uint64_t v17 = a1 + 72;
          if (!v24) {
            goto LABEL_84;
          }
          goto LABEL_105;
        case 0x12:
          goto LABEL_91;
        case 0x13:
          BOOL v28 = v53[0] == (void *)0x61654C736169423CLL
             && v53[1] == (void *)0x6F43657461526E72
             && *(void **)((char *)&v53[1] + 3) == (void *)0x3E66656F43657461;
          uint64_t v17 = a1 + 73;
          if (v28) {
            goto LABEL_105;
          }
          if (HIBYTE(v53[2]) == 18)
          {
LABEL_91:
            if (v53[0] == (void *)0x6E6569646172473CLL
              && v53[1] == (void *)0x7079546D726F4E74
              && LOWORD(v53[2]) == 15973)
            {
              goto LABEL_110;
            }
          }
          else
          {
LABEL_84:
            if (HIBYTE(v53[2]) != 9) {
              goto LABEL_119;
            }
LABEL_85:
            BOOL v29 = v53[0] == (void *)0x6D726F4E78614D3CLL && LOBYTE(v53[1]) == 62;
            uint64_t v17 = a1 + 74;
            if (v29) {
              goto LABEL_105;
            }
          }
          if (HIBYTE(v53[2]) != 9) {
            goto LABEL_119;
          }
          long long v23 = v53;
          break;
        default:
          goto LABEL_119;
      }
      goto LABEL_100;
    }
    int v12 = (char *)v53[1];
    if (v53[1] != (char *)&dword_8 + 2
      || (*(void *)v53[0] == 0x694468637461503CLL ? (BOOL v13 = *((unsigned __int16 *)v53[0] + 4) == 15981) : (BOOL v13 = 0),
          uint64_t v11 = (uint64_t)(a1 + 22),
          !v13))
    {
      if (v53[1] == (char *)&dword_8 + 3)
      {
        BOOL v14 = *(void *)v53[0] == 0x745368637461503CLL && *(void *)((char *)v53[0] + 3) == 0x3E70657453686374;
        uint64_t v11 = (uint64_t)(a1 + 23);
        if (v14) {
          goto LABEL_75;
        }
        int v12 = (char *)v53[1];
      }
      if (v12 != (unsigned char *)&dword_C + 1) {
        goto LABEL_26;
      }
      BOOL v15 = *(void *)v53[0] == 0x745368637461503CLL && *(void *)((char *)v53[0] + 5) == 0x3E65646972745368;
      uint64_t v11 = (uint64_t)(a1 + 24);
      if (!v15)
      {
        int v12 = (char *)v53[1];
LABEL_26:
        if (v12 == (unsigned char *)&dword_C + 3)
        {
          BOOL v16 = *(void *)v53[0] == 0x61526E7261654C3CLL && *(void *)((char *)v53[0] + 7) == 0x3E66656F43657461;
          uint64_t v17 = a1 + 72;
          if (!v16)
          {
            int v12 = (char *)v53[1];
            goto LABEL_32;
          }
LABEL_105:
          kaldi::ReadBasicType<float>(a2, a3, v17, v8, v9);
          goto LABEL_106;
        }
LABEL_32:
        if (v12 == (unsigned char *)&dword_10 + 3)
        {
          BOOL v19 = *(void *)v53[0] == 0x61654C736169423CLL
             && *((void *)v53[0] + 1) == 0x6F43657461526E72
             && *(void *)((char *)v53[0] + 11) == 0x3E66656F43657461;
          uint64_t v17 = a1 + 73;
          if (v19) {
            goto LABEL_105;
          }
          int v12 = (char *)v53[1];
        }
        if (v12 == (unsigned char *)&dword_8 + 1)
        {
          BOOL v20 = *(void *)v53[0] == 0x6D726F4E78614D3CLL && *((unsigned char *)v53[0] + 8) == 62;
          uint64_t v17 = a1 + 74;
          if (v20) {
            goto LABEL_105;
          }
          int v12 = (char *)v53[1];
        }
        if (v12 == (unsigned char *)&dword_10 + 2)
        {
          if (*(void *)v53[0] == 0x6E6569646172473CLL
            && *((void *)v53[0] + 1) == 0x7079546D726F4E74
            && *((_WORD *)v53[0] + 8) == 15973)
          {
LABEL_110:
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v52 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)__p, v8, v9);
            *((_DWORD *)a1 + 46) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
            if (SHIBYTE(v52) < 0) {
              operator delete(__p[0]);
            }
            goto LABEL_106;
          }
          int v12 = (char *)v53[1];
        }
        if (v12 != (unsigned char *)&dword_8 + 1) {
          goto LABEL_119;
        }
        long long v23 = (void **)v53[0];
LABEL_100:
        uint64_t v32 = *v23;
        int v33 = *((unsigned __int8 *)v23 + 8);
        BOOL v34 = v32 == (void *)0x6461724778614D3CLL && v33 == 62;
        uint64_t v17 = a1 + 47;
        if (!v34)
        {
LABEL_119:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", 188);
          uint64_t v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
          if (SHIBYTE(v53[2]) >= 0) {
            uint64_t v49 = v53;
          }
          else {
            uint64_t v49 = (void **)v53[0];
          }
          if (SHIBYTE(v53[2]) >= 0) {
            uint64_t v50 = HIBYTE(v53[2]);
          }
          else {
            uint64_t v50 = (uint64_t)v53[1];
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v49, v50);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        goto LABEL_105;
      }
    }
LABEL_75:
    kaldi::ReadBasicType<int>(a2, a3, v11, v8, v9);
LABEL_106:
    if (SHIBYTE(v53[2]) < 0) {
      operator delete(v53[0]);
    }
  }
  kaldi::CuMatrix<float>::Read((uint64_t)(a1 + 26), a2, a3, 0);
  kaldi::CuVector<float>::Read((uint64_t)(a1 + 38), a2, a3, v35, v36);
  int v38 = *((_DWORD *)a1 + 2);
  int v39 = *((_DWORD *)a1 + 24);
  int v40 = v38 / v39;
  if (v38 % v39) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", stru_B8.segname, "input_dim_ % patch_stride_ == 0", v37);
  }
  int v41 = *((_DWORD *)a1 + 22);
  int v42 = *((_DWORD *)a1 + 23);
  int v43 = v39 - v41;
  int v44 = (v39 - v41) / v42;
  if (v43 % v42) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", &stru_B8.segname[3], "(patch_stride_ - patch_dim_) % patch_step_ == 0", v37);
  }
  int v45 = v44 + 1;
  int v46 = *((_DWORD *)a1 + 3);
  int v47 = v46 / (v44 + 1);
  if (v46 != v47 * v45) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", &stru_B8.segname[8], "output_dim_ % num_patches == 0", v37);
  }
  if (v47 != *((_DWORD *)a1 + 31)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", &stru_B8.segname[11], "num_filters == filters_.NumRows()", v37);
  }
  if (v47 != *((_DWORD *)a1 + 42)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", &stru_B8.segname[12], "num_filters == bias_.Dim()", v37);
  }
  if (v40 * v41 != *((_DWORD *)a1 + 30)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", &stru_B8.segname[13], "filter_dim == filters_.NumCols()", v37);
  }
}

void sub_F17D8()
{
}

void *kaldi::nnet1::ConvolutionalComponent::WriteConfig(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<PatchDim>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PatchStep>", v8, v9);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PatchStride>", v10, v11);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", v12, v13);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<BiasLearnRateCoef>", v14, v15);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxNorm>", v16, v17);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v18, v19);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 184), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v20, v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v22, v23);
  return kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
}

void sub_F1998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::ConvolutionalComponent::NumParams(kaldi::nnet1::ConvolutionalComponent *this)
{
  return (*((_DWORD *)this + 42) + *((_DWORD *)this + 30) * *((_DWORD *)this + 31));
}

_DWORD *kaldi::nnet1::ConvolutionalComponent::GetParams(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  int v10 = a1[30] * a1[31];
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  if (v10 > *(_DWORD *)(a2 + 8)
    || (BOOL v15 = *(void **)a2,
        LODWORD(v16) = v10,
        kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v15, a1 + 26, v7, v8, v9),
        int v13 = a1[42],
        uint64_t v16 = 0,
        uint64_t v17 = 0,
        (v13 + v10) > *(_DWORD *)(a2 + 8)))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v9);
  }
  BOOL v15 = (void *)(*(void *)a2 + 4 * v10);
  LODWORD(v16) = v13;
  return kaldi::CuVectorBase<float>::CopyToVec<float>(a1 + 38, (uint64_t)&v15, v11, v12, v9);
}

_DWORD *kaldi::nnet1::ConvolutionalComponent::SetParams(_DWORD *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(_DWORD *))(*(void *)a1 + 176))(a1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", (const char *)&stru_B8.reserved3 + 2, "wei_src.Dim() == NumParams()", v5);
  }
  int v6 = a1[30] * a1[31];
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  if (v6 > *(_DWORD *)(a2 + 8) {
    || (uint64_t v11 = *(char **)a2,
  }
        LODWORD(v1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v6,
        kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)(a1 + 26), &v11),
        int v9 = a1[42],
        uint64_t v12 = 0,
        uint64_t v13 = 0,
        (v9 + v6) > *(_DWORD *)(a2 + 8)))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v5);
  }
  uint64_t v11 = (char *)(*(void *)a2 + 4 * v6);
  LODWORD(v1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v9;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(a1 + 38, (uint64_t)&v11, v7, v8, v5);
}

float kaldi::nnet1::ConvolutionalComponent::SumParams(kaldi::nnet1::ConvolutionalComponent *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  float v6 = kaldi::CuMatrixBase<float>::Sum((uint64_t)this + 104, a2, a3, a4, a5);
  double v7 = kaldi::CuVectorBase<float>::Sum((uint64_t)this + 152);
  return v6 + *(float *)&v7;
}

uint64_t kaldi::nnet1::ConvolutionalComponent::PerturbParams(kaldi::nnet1::ConvolutionalComponent *this, float a2)
{
  unsigned int v3 = this;
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v14, *((unsigned int *)this + 31), *((unsigned int *)this + 30), 1u, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v14);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)v3 + 104, (uint64_t)v14, 111, v4, v5, a2, 1.0);
  unsigned int v3 = (kaldi::nnet1::ConvolutionalComponent *)((char *)v3 + 152);
  kaldi::CuVector<float>::CuVector((uint64_t)v13, (uint64_t)v3, v6, v7, v8);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v13);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)v3, (uint64_t)v13, v9, v10, v11, a2, 1.0);
  kaldi::CuVector<float>::~CuVector(v13);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v14);
}

void sub_F1CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalComponent::GetGradient(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (_DWORD **)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 16))(a1);
  (*((void (**)(_DWORD **, uint64_t, uint64_t, void, void))*v8 + 29))(v8, a2, a3, 0, 0);
  int v12 = a1[30] * a1[31];
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  if (v12 > *(_DWORD *)(a4 + 8)
    || (uint64_t v17 = *(void *)a4,
        LODWORD(v18) = v12,
        kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v17, v8[24], v9, v10, v11),
        int v15 = a1[42],
        uint64_t v18 = 0,
        uint64_t v19 = 0,
        (v15 + v12) > *(_DWORD *)(a4 + 8)))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v11);
  }
  uint64_t v17 = *(void *)a4 + 4 * v12;
  LODWORD(v18) = v15;
  kaldi::CuVectorBase<float>::CopyToVec<float>(v8[27], (uint64_t)&v17, v13, v14, v11);
  return (*((uint64_t (**)(_DWORD **))*v8 + 1))(v8);
}

void kaldi::nnet1::ConvolutionalComponent::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  kaldi::nnet1::ConvolutionalComponent::EnsureCorrs((kaldi::nnet1::ConvolutionalComponent *)a1);
  int v10 = (*(_DWORD *)(a1 + 96) - *(_DWORD *)(a1 + 88)) / *(_DWORD *)(a1 + 92);
  int v11 = *(_DWORD *)(a1 + 124);
  int v12 = *(_DWORD *)(a2 + 20);
  uint64_t v13 = a5;
  *(_DWORD *)(*(void *)(a1 + 352) + 4 * a5) = v12;
  uint64_t v14 = *(void *)(a1 + 192) + 48 * a5;
  *(void *)(v14 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a4;
  *(void *)(*(void *)(a1 + 216) + 32 * a5 + ++*(void *)(result + 24) = a4;
  kaldi::CuMatrixBase<float>::SetZero(v14);
  kaldi::CuVectorBase<float>::SetZero(*(void *)(a1 + 216) + 32 * a5);
  if ((v10 & 0x80000000) == 0)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 48 * (v10 + 1);
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v21, a3, 0, *(_DWORD *)(a3 + 20), v16, v11);
      kaldi::CuMatrixBase<float>::AddMatMat(*(void *)(a1 + 192) + 48 * (int)v13, (uint64_t)&v21, CblasTrans, *(void *)(a1 + 304) + v15, &stru_68.sectname[7], 1.0, 1.0);
      kaldi::CuVectorBase<float>::AddRowSumMat(*(void *)(a1 + 216) + 32 * v13, &v21, 1.0, 1.0, v18, v19, v20);
      uint64_t v21 = off_262D80;
      long long v22 = 0u;
      long long v23 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v21);
      uint64_t v16 = (const char *)(v16 + v11);
      v15 += 48;
    }
    while (v17 != v15);
  }
}

void sub_F1F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (**a10)())
{
  a10 = off_262D80;
  *int v10 = 0u;
  v10[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a10);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalComponent::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 188) = a3;
  *(_DWORD *)(result + 184) = a2;
  *(unsigned char *)(result + 376) = 0;
  return result;
}

void kaldi::nnet1::ConvolutionalComponent::NormalizeGradients(kaldi::nnet1::ConvolutionalComponent *this, float a2, int a3, uint64_t a4, uint64_t a5, const char *a6)
{
  float v6 = a2;
  int v8 = *((_DWORD *)this + 46);
  if (v8 == 3)
  {
    if (a2 >= 0.0 && a2 <= 1.0)
    {
      uint64_t v11 = a3;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((void *)this + 24) + 48 * a3, *((void *)this + 30) + 48 * a3, a2);
      uint64_t v15 = *((void *)this + 27) + 32 * v11;
      uint64_t v16 = *((void *)this + 33) + 32 * v11;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v15, v16, v6, v12, v13, v14);
    }
  }
  else if (v8 == 2)
  {
    if (a2 > 0.0)
    {
      uint64_t v17 = a3;
      if (*((unsigned char *)this + 84)) {
        float v6 = (float)*(int *)(*((void *)this + 44) + 4 * a3) * a2;
      }
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((void *)this + 24) + 48 * a3, (unsigned int *)(*((void *)this + 30) + 48 * a3), v6, a4, a5, a6);
      uint64_t v22 = *((void *)this + 27) + 32 * v17;
      long long v23 = (_DWORD *)(*((void *)this + 33) + 32 * v17);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v22, v23, v19, v20, v21, v6);
    }
  }
  else if (v8 == 1 && a2 > 0.0)
  {
    uint64_t v9 = a3;
    if (*((unsigned char *)this + 84)) {
      float v6 = (float)*(int *)(*((void *)this + 44) + 4 * a3) * a2;
    }
    kaldi::nnet1::UpdatableComponent::ClipGradient(*((void *)this + 24) + 48 * a3, v6);
    uint64_t v18 = *((void *)this + 27) + 32 * v9;
    kaldi::nnet1::UpdatableComponent::ClipGradient(v18, v6);
  }
}

void kaldi::nnet1::ConvolutionalComponent::UpdateWeights(kaldi::nnet1::ConvolutionalComponent *this, void *a2, int a3)
{
  kaldi::nnet1::ConvolutionalComponent::EnsureCorrs(this);
  uint64_t v8 = *((unsigned int *)this + 20);
  if (a3 >= 0) {
    unsigned int v9 = a3;
  }
  else {
    unsigned int v9 = *((_DWORD *)this + 20);
  }
  if (v8 == 1) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v9;
  }
  if ((int)v10 > (int)v8) {
    kaldi::KaldiAssertFailure_((kaldi *)"UpdateWeights", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-component.h", &stru_1A8.segname[1], "batch_idx <= opts_.num_subbatches", v7);
  }
  int v11 = (*((_DWORD *)this + 24) - *((_DWORD *)this + 22)) / *((_DWORD *)this + 23);
  float v12 = *((float *)this + 14);
  uint64_t v13 = *((void *)this + 24);
  uint64_t v14 = v13 + 48 * (int)v10;
  *(void *)(v14 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
  *(void *)(*((void *)this + 27) + 32 * (int)v10 + ++*(void *)(result + 24) = a2;
  *(void *)(*((void *)this + 30) + 48 * (int)v10 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
  *(void *)(*((void *)this + 33) + 32 * (int)v10 + ++*(void *)(result + 24) = a2;
  if (v10 == v8)
  {
    kaldi::CuMatrixBase<float>::AddMat(v14, v13, 111, v6, v7, 1.0, 0.0);
    kaldi::CuVectorBase<float>::AddVec(*((void *)this + 27) + 32 * (int)v10, *((void *)this + 27), v15, v16, v17, 1.0, 0.0);
    if (*((int *)this + 20) > 1)
    {
      uint64_t v20 = 1;
      uint64_t v21 = 32;
      uint64_t v22 = 48;
      do
      {
        kaldi::CuMatrixBase<float>::AddMat(*((void *)this + 24) + 48 * (int)v10, *((void *)this + 24) + v22, 111, v18, v19, 1.0, 1.0);
        kaldi::CuVectorBase<float>::AddVec(*((void *)this + 27) + 32 * (int)v10, *((void *)this + 27) + v21, v23, v24, v25, 1.0, 1.0);
        ++v20;
        v22 += 48;
        v21 += 32;
      }
      while (v20 < *((int *)this + 20));
    }
    BOOL v26 = (int *)*((void *)this + 44);
    v26[(int)v10] = 0;
    if ((int)v8 >= 1)
    {
      int v27 = 0;
      BOOL v28 = v26;
      do
      {
        int v29 = *v28++;
        v27 += v29;
        v26[(int)v10] = v27;
        --v8;
      }
      while (v8);
    }
  }
  if (*((unsigned char *)this + 84)) {
    float v12 = v12 / (float)*(int *)(*((void *)this + 44) + 4 * (int)v10);
  }
  float v30 = 1.0 / (double)(v11 + 1);
  kaldi::CuMatrixBase<float>::Scale(*((void *)this + 24) + 48 * (int)v10, v30);
  kaldi::CuVectorBase<float>::Scale(*((void *)this + 27) + 32 * (int)v10, v30);
  if (*((float *)this + 47) >= 0.0) {
    (*(void (**)(kaldi::nnet1::ConvolutionalComponent *, uint64_t))(*(void *)this + 248))(this, v10);
  }
  *((void *)this + 17) = a2;
  *((void *)this + 2std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 104, *((void *)this + 24) + 48 * (int)v10, 111, v31, v32, -(float)(v12 * *((float *)this + 72)), 1.0);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 152, *((void *)this + 27) + 32 * (int)v10, v33, v34, v35, -(float)(v12 * *((float *)this + 73)), 1.0);
  if (*((float *)this + 74) > 0.0)
  {
    kaldi::CuMatrix<float>::CuMatrix(v56, (char *)this + 104, 111);
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)v56, (uint64_t)this + 104, v36, v37, v38);
    uint64_t v39 = *((unsigned int *)this + 31);
    v54[2] = 0;
    float v55 = 0;
    v54[0] = off_262E60;
    v54[1] = 0;
    kaldi::CuVector<float>::Resize((uint64_t)v54, v39, 0, v40, v41);
    float v55 = a2;
    kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)v54, v56, 1.0, 0.0, v42, v43, v44);
    kaldi::CuVectorBase<float>::ApplyPow((uint64_t)v54, 0.5);
    kaldi::CuVector<float>::CuVector((uint64_t)v53, (uint64_t)v54, v45, v46, v47);
    kaldi::CuVectorBase<float>::Scale((uint64_t)v53, 1.0 / *((float *)this + 74));
    kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)v53, 1.0);
    kaldi::CuVectorBase<float>::InvertElements((uint64_t)v53);
    kaldi::CuMatrixBase<float>::MulRowsVec((uint64_t)this + 104, (uint64_t)v53, v48, v49, v50);
    kaldi::CuVector<float>::~CuVector(v53);
    kaldi::CuVector<float>::~CuVector(v54);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v56);
  }
  std::string v51 = (unsigned char *)*((void *)this + 44);
  if (v10 == *((_DWORD *)this + 20))
  {
    uint64_t v52 = (unsigned char *)*((void *)this + 45);
    if (v51 != v52) {
      bzero(v51, ((v52 - v51 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    }
  }
  else
  {
    *(_DWORD *)&v51[4 * (int)v10] = 0;
  }
}

void sub_F24F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AveragePoolingComponent::Copy(kaldi::nnet1::AveragePoolingComponent *this)
{
}

void sub_F25D4()
{
}

uint64_t kaldi::nnet1::AveragePoolingComponent::GetType(kaldi::nnet1::AveragePoolingComponent *this)
{
  return 2050;
}

void kaldi::nnet1::AveragePoolingComponent::InitData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v6 = a2 + 4;
  uint64_t v7 = (float *)(a1 + 60);
  uint64_t v8 = (_DWORD *)(a1 + 56);
  uint64_t v9 = (_DWORD *)(a1 + 52);
  uint64_t v10 = (_DWORD *)(a1 + 48);
  while (1)
  {
    if ((*((unsigned char *)v6 + *(void *)(*a2 - 24)) & 2) != 0) {
      goto LABEL_58;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)&v32, a4, a5);
    if ((SHIBYTE(v34) & 0x80000000) == 0)
    {
      if (HIBYTE(v34) != 7)
      {
        if (HIBYTE(v34) == 10)
        {
          BOOL v19 = v32 == (char *)0x7A69536C6F6F503CLL && (unsigned __int16)v33 == 15973;
          uint64_t v13 = (uint64_t)v10;
          if (!v19)
          {
            BOOL v20 = v32 == (char *)0x6574536C6F6F503CLL && (unsigned __int16)v33 == 15984;
            uint64_t v13 = (uint64_t)v9;
            if (!v20) {
              goto LABEL_64;
            }
          }
        }
        else
        {
          if (HIBYTE(v34) != 12) {
            goto LABEL_64;
          }
          BOOL v12 = v32 == (char *)0x7274536C6F6F503CLL && v33 == 1046832233;
          uint64_t v13 = (uint64_t)v8;
          if (!v12)
          {
            uint64_t v22 = &v32;
            goto LABEL_53;
          }
        }
        goto LABEL_49;
      }
      if (v32 != 1633899324 || *(_DWORD *)((char *)&v32 + 3) != 1046834273) {
        goto LABEL_64;
      }
LABEL_48:
      kaldi::ReadBasicType<float>(a2, 0, v7, v11, a5);
      goto LABEL_50;
    }
    uint64_t v14 = v33;
    if (v33 == 10)
    {
      BOOL v15 = *(void *)v32 == 0x7A69536C6F6F503CLL && *((_WORD *)v32 + 4) == 15973;
      uint64_t v13 = (uint64_t)v10;
      if (v15) {
        goto LABEL_49;
      }
      BOOL v16 = *(void *)v32 == 0x6574536C6F6F503CLL && *((_WORD *)v32 + 4) == 15984;
      uint64_t v13 = (uint64_t)v9;
      if (v16) {
        goto LABEL_49;
      }
      uint64_t v14 = v33;
    }
    if (v14 != 12) {
      goto LABEL_28;
    }
    BOOL v17 = *(void *)v32 == 0x7274536C6F6F503CLL && *((_DWORD *)v32 + 2) == 1046832233;
    uint64_t v13 = (uint64_t)v8;
    if (!v17) {
      break;
    }
LABEL_49:
    kaldi::ReadBasicType<int>(a2, 0, v13, v11, a5);
LABEL_50:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  uint64_t v14 = v33;
LABEL_28:
  if (v14 != 7) {
    goto LABEL_51;
  }
  if (*(_DWORD *)v32 == 1633899324 && *(_DWORD *)(v32 + 3) == 1046834273) {
    goto LABEL_48;
  }
  uint64_t v14 = v33;
LABEL_51:
  if (v14 != 12) {
    goto LABEL_64;
  }
  uint64_t v22 = (char **)v32;
LABEL_53:
  uint64_t v23 = (uint64_t)*v22;
  int v24 = *((_DWORD *)v22 + 2);
  if (v23 != 0x6E6F706D6F432F3CLL || v24 != 1047817829)
  {
LABEL_64:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-average-pooling-component.h", 61);
    BOOL v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Unknown token ", 14);
    if (v34 >= 0) {
      int v27 = &v32;
    }
    else {
      int v27 = (char **)v32;
    }
    if (v34 >= 0) {
      uint64_t v28 = HIBYTE(v34);
    }
    else {
      uint64_t v28 = v33;
    }
    int v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
    float v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" (PoolSize|PoolStep|PoolStride|Scale)", 37);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31);
  }
LABEL_58:
  if (!*v10 || !*v9 || !*v8) {
    kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-average-pooling-component.h", (const char *)&stru_20.vmsize + 2, "pool_size_ != 0 && pool_step_ != 0 && pool_stride_ != 0", a5);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(v32);
  }
}

void sub_F2984(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::AveragePoolingComponent::WriteData(int a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<PoolSize>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PoolStep>", v7, v8);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PoolStride>", v9, v10);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<Scale>", v11, v12);

  return kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
}

float *kaldi::nnet1::AveragePoolingComponent::PropagateFnc(float *result, uint64_t a2, uint64_t a3)
{
  int v3 = (*((_DWORD *)result + 2) / *((_DWORD *)result + 14) - *((_DWORD *)result + 12)) / *((_DWORD *)result + 13);
  if ((v3 & 0x80000000) == 0)
  {
    uint64_t v6 = result;
    int v7 = 0;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v16, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(*((_DWORD *)v6 + 14) * v7), *((_DWORD *)v6 + 14));
      kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v16);
      int v8 = *((_DWORD *)v6 + 12);
      if (v8 >= 1)
      {
        for (int i = 0; i < v8; ++i)
        {
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v13, a2, 0, *(_DWORD *)(a2 + 20), (const char *)((i + v7 * *((_DWORD *)v6 + 13)) * *((_DWORD *)v6 + 14)), *((_DWORD *)v6 + 14));
          kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v16, (uint64_t)&v13, 111, v10, v11, 1.0, 1.0);
          uint64_t v13 = off_262D80;
          long long v14 = 0u;
          long long v15 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v13);
          int v8 = *((_DWORD *)v6 + 12);
        }
      }
      kaldi::CuMatrixBase<float>::Scale((uint64_t)&v16, v6[15] / (float)v8);
      BOOL v16 = off_262D80;
      long long v17 = 0u;
      long long v18 = 0u;
      uint64_t result = (float *)fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v16);
    }
    while (v7++ != v3);
  }
  return result;
}

void sub_F2BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void (**a14)())
{
  a14 = off_262D80;
  *long long v14 = 0u;
  v14[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a14);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AveragePoolingComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8 = *(_DWORD *)(a1 + 52);
  uint64_t v9 = (*(_DWORD *)(a1 + 8) / *(_DWORD *)(a1 + 56));
  int v10 = *(_DWORD *)(a1 + 48);
  __x[0] = 0;
  std::vector<int>::vector(&v29, (int)v9, __x);
  kaldi::CuMatrixBase<float>::SetZero(a5);
  int v11 = *(_DWORD *)(a1 + 48);
  int v22 = ((int)v9 - v10) / v8;
  if ((v22 & 0x80000000) == 0)
  {
    int v12 = 0;
    do
    {
      if (v11 >= 1)
      {
        uint64_t v13 = 0;
        do
        {
          int v14 = *(_DWORD *)(a1 + 52);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)__x, a5, 0, *(_DWORD *)(a5 + 20), (const char *)((v13 + v12 * v14) * *(_DWORD *)(a1 + 56)), *(_DWORD *)(a1 + 56));
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v23, a4, 0, *(_DWORD *)(a4 + 20), (const char *)(*(_DWORD *)(a1 + 56) * v12), *(_DWORD *)(a1 + 56));
          kaldi::CuMatrixBase<float>::AddMat((uint64_t)__x, (uint64_t)&v23, 111, v15, v16, 1.0, 1.0);
          ++v29.__begin_[v13 + v12 * v14];
          uint64_t v23 = off_262D80;
          long long v24 = 0u;
          long long v25 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v23);
          *(void *)std::vector<int>::value_type __x = off_262D80;
          long long v27 = 0u;
          long long v28 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(__x);
          int v11 = *(_DWORD *)(a1 + 48);
          ++v13;
        }
        while ((int)v13 < v11);
      }
    }
    while (v12++ != v22);
  }
  kaldi::CuMatrixBase<float>::Scale(a5, *(float *)(a1 + 60) / (float)v11);
  if ((int)v9 >= 1)
  {
    for (uint64_t i = 0; i != v9; ++i)
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)__x, a5, 0, *(_DWORD *)(a5 + 20), (const char *)(*(_DWORD *)(a1 + 56) * i), *(_DWORD *)(a1 + 56));
      int v20 = v29.__begin_[i];
      if (v20 <= 0) {
        kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "../subproject/libquasar/libkaldi/src/nnet/nnet-average-pooling-component.h", (const char *)&stru_68.align + 2, "patch_summands[p] > 0", v19);
      }
      float v21 = 1.0 / (double)v20;
      kaldi::CuMatrixBase<float>::Scale((uint64_t)__x, v21);
      *(void *)std::vector<int>::value_type __x = off_262D80;
      long long v27 = 0u;
      long long v28 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(__x);
    }
  }
  if (v29.__begin_)
  {
    v29.__end_ = v29.__begin_;
    operator delete(v29.__begin_);
  }
}

void sub_F2EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::AveragePoolingComponent::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  kaldi::ExpectToken(a2, a3, (kaldi *)"<PoolSize>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 48, v6, v7);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<PoolStep>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 52, v8, v9);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<PoolStride>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 56, v10, v11);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<Scale>");
  kaldi::ReadBasicType<float>(a2, a3, (float *)(a1 + 60), v12, v13);
  int v15 = *(_DWORD *)(a1 + 8);
  int v16 = *(_DWORD *)(a1 + 56);
  if (v15 % v16) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-average-pooling-component.h", (const char *)&stru_20.filesize + 4, "input_dim_ % pool_stride_ == 0", v14);
  }
  int v17 = v15 / v16 - *(_DWORD *)(a1 + 48);
  int v18 = *(_DWORD *)(a1 + 52);
  if (v17 % v18) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-average-pooling-component.h", (const char *)&stru_20.filesize + 7, "(num_patches - pool_size_) % pool_step_ == 0", v14);
  }
  if (*(_DWORD *)(a1 + 12) != v16 + v16 * (v17 / v18)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-average-pooling-component.h", (const char *)&stru_20.maxprot + 2, "output_dim_ == num_pools * pool_stride_", v14);
  }
}

void kaldi::nnet1::MaxPoolingComponent::Copy(kaldi::nnet1::MaxPoolingComponent *this)
{
}

void sub_F31C0()
{
}

uint64_t kaldi::nnet1::MaxPoolingComponent::GetType(kaldi::nnet1::MaxPoolingComponent *this)
{
  return 2052;
}

void kaldi::nnet1::MaxPoolingComponent::InitData(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  std::vector<int> v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v6 = a2 + 4;
  int v7 = a1 + 14;
  uint64_t v8 = a1 + 13;
  uint64_t v9 = a1 + 12;
  while (1)
  {
    if ((*((unsigned char *)v6 + *(void *)(*a2 - 24)) & 2) != 0) {
      goto LABEL_44;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)&v29, a4, a5);
    if ((SHIBYTE(v31) & 0x80000000) == 0)
    {
      if (HIBYTE(v31) == 10)
      {
        BOOL v17 = v29 == (_WORD *)0x7A69536C6F6F503CLL && (unsigned __int16)v30 == 15973;
        uint64_t v12 = (uint64_t)v9;
        if (!v17)
        {
          BOOL v18 = v29 == (_WORD *)0x6574536C6F6F503CLL && (unsigned __int16)v30 == 15984;
          uint64_t v12 = (uint64_t)v8;
          if (!v18) {
            goto LABEL_50;
          }
        }
      }
      else
      {
        if (HIBYTE(v31) != 12) {
          goto LABEL_50;
        }
        BOOL v11 = v29 == (_WORD *)0x7274536C6F6F503CLL && v30 == 1046832233;
        uint64_t v12 = (uint64_t)v7;
        if (!v11)
        {
          BOOL v19 = &v29;
          goto LABEL_39;
        }
      }
      goto LABEL_36;
    }
    uint64_t v13 = v30;
    if (v30 == 10)
    {
      BOOL v14 = *(void *)v29 == 0x7A69536C6F6F503CLL && v29[4] == 15973;
      uint64_t v12 = (uint64_t)v9;
      if (v14) {
        goto LABEL_36;
      }
      BOOL v15 = *(void *)v29 == 0x6574536C6F6F503CLL && v29[4] == 15984;
      uint64_t v12 = (uint64_t)v8;
      if (v15) {
        goto LABEL_36;
      }
      uint64_t v13 = v30;
    }
    if (v13 != 12) {
      goto LABEL_50;
    }
    BOOL v16 = *(void *)v29 == 0x7274536C6F6F503CLL && *((_DWORD *)v29 + 2) == 1046832233;
    uint64_t v12 = (uint64_t)v7;
    if (!v16) {
      break;
    }
LABEL_36:
    kaldi::ReadBasicType<int>(a2, 0, v12, v10, a5);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  if (v30 != 12) {
    goto LABEL_50;
  }
  BOOL v19 = (_WORD **)v29;
LABEL_39:
  uint64_t v20 = (uint64_t)*v19;
  int v21 = *((_DWORD *)v19 + 2);
  if (v20 != 0x6E6F706D6F432F3CLL || v21 != 1047817829)
  {
LABEL_50:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-max-pooling-component.h", 60);
    uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Unknown token ", 14);
    if (v31 >= 0) {
      long long v24 = &v29;
    }
    else {
      long long v24 = (_WORD **)v29;
    }
    if (v31 >= 0) {
      uint64_t v25 = HIBYTE(v31);
    }
    else {
      uint64_t v25 = v30;
    }
    BOOL v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
    long long v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" (PoolSize|PoolStep|PoolStride)", 31);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28);
  }
LABEL_44:
  if (!*v9 || !*v8 || !*v7) {
    kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-max-pooling-component.h", (const char *)&stru_20.vmsize + 1, "pool_size_ != 0 && pool_step_ != 0 && pool_stride_ != 0", a5);
  }
  if (SHIBYTE(v31) < 0) {
    operator delete(v29);
  }
}

void sub_F34DC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MaxPoolingComponent::WriteData(int a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<PoolSize>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PoolStep>", v7, v8);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PoolStride>", v9, v10);

  return kaldi::WriteBasicType<int>(a2, (int)a3);
}

_DWORD *kaldi::nnet1::MaxPoolingComponent::PropagateFnc(_DWORD *result, uint64_t a2, uint64_t a3)
{
  int v3 = (result[2] / result[14] - result[12]) / result[13];
  if ((v3 & 0x80000000) == 0)
  {
    uint64_t v6 = result;
    int v7 = 0;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v20, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(v6[14] * v7), v6[14]);
      kaldi::CuMatrixBase<float>::Set((uint64_t)&v20, v8, v9, v10, v11, -1.0e20);
      if ((int)v6[12] >= 1)
      {
        int v12 = 0;
        do
        {
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v17, a2, 0, *(_DWORD *)(a2 + 20), (const char *)((v12 + v7 * v6[13]) * v6[14]), v6[14]);
          kaldi::CuMatrixBase<float>::Max((uint64_t)&v20, (uint64_t)&v17, v13, v14, v15);
          BOOL v17 = off_262D80;
          long long v18 = 0u;
          long long v19 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v17);
          ++v12;
        }
        while (v12 < v6[12]);
      }
      uint64_t v20 = off_262D80;
      long long v21 = 0u;
      long long v22 = 0u;
      uint64_t result = (_DWORD *)fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v20);
    }
    while (v7++ != v3);
  }
  return result;
}

void sub_F3710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void (**a14)())
{
  a14 = off_262D80;
  *uint64_t v14 = 0u;
  v14[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a14);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MaxPoolingComponent::BackpropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10 = a1[13];
  uint64_t v11 = (a1[2] / a1[14]);
  int v12 = a1[12];
  __x[0] = 0;
  std::vector<int>::vector(&v47, (int)v11, __x);
  uint64_t v30 = a5;
  kaldi::CuMatrixBase<float>::SetZero(a5);
  int v29 = ((int)v11 - v12) / v10;
  if ((v29 & 0x80000000) == 0)
  {
    int v13 = 0;
    int v14 = a1[12];
    do
    {
      if (v14 >= 1)
      {
        uint64_t v15 = 0;
        do
        {
          int v16 = v13 * a1[13];
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v44, a2, 0, *(_DWORD *)(a2 + 20), (const char *)((v15 + v16) * a1[14]), a1[14]);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v41, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(a1[14] * v13), a1[14]);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v38, v30, 0, *(_DWORD *)(v30 + 20), (const char *)(a1[14] * (v15 + v16)), a1[14]);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v31, a4, 0, *(_DWORD *)(a4 + 20), (const char *)(a1[14] * v13), a1[14]);
          kaldi::CuMatrix<float>::CuMatrix(__x, &v31, 111);
          uint64_t v31 = off_262D80;
          long long v32 = 0u;
          long long v33 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v31);
          long long v32 = 0u;
          long long v33 = 0u;
          uint64_t v31 = (void (**)())off_262DC8;
          char v34 = 0;
          kaldi::CuMatrixBase<float>::EqualElementMask((uint64_t)&v44, (uint64_t)&v41, (uint64_t)&v31, v17, v18);
          kaldi::CuMatrixBase<float>::MulElements((uint64_t)__x, (uint64_t)&v31, v19, v20, v21);
          kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v38, (uint64_t)__x, 111, v22, v23, 1.0, 1.0);
          ++v47.__begin_[v15 + v16];
          kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v31);
          kaldi::CuMatrix<float>::~CuMatrix((uint64_t)__x);
          int v38 = off_262D80;
          long long v39 = 0u;
          long long v40 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v38);
          int v41 = off_262D80;
          long long v42 = 0u;
          long long v43 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v41);
          int v44 = off_262D80;
          long long v45 = 0u;
          long long v46 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v44);
          int v14 = a1[12];
          ++v15;
        }
        while ((int)v15 < v14);
      }
    }
    while (v13++ != v29);
  }
  if ((int)v11 >= 1)
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)__x, v30, 0, *(_DWORD *)(v30 + 20), (const char *)(a1[14] * i), a1[14]);
      int v27 = v47.__begin_[i];
      if (v27 <= 0) {
        kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "../subproject/libquasar/libkaldi/src/nnet/nnet-max-pooling-component.h", (const char *)&stru_68.reloff, "patch_summands[p] > 0", v26);
      }
      float v28 = 1.0 / (double)v27;
      kaldi::CuMatrixBase<float>::Scale((uint64_t)__x, v28);
      *(void *)std::vector<int>::value_type __x = off_262D80;
      long long v36 = 0u;
      long long v37 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(__x);
    }
  }
  if (v47.__begin_)
  {
    v47.__end_ = v47.__begin_;
    operator delete(v47.__begin_);
  }
}

void sub_F3B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  long long v33 = *(void **)(v31 - 128);
  if (v33)
  {
    *(void *)(v31 - 120) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::MaxPoolingComponent::ReadData(_DWORD *a1, uint64_t *a2, int a3)
{
  kaldi::ExpectToken(a2, a3, (kaldi *)"<PoolSize>");
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)(a1 + 12), v6, v7);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<PoolStep>");
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)(a1 + 13), v8, v9);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<PoolStride>");
  uint64_t result = kaldi::ReadBasicType<int>(a2, a3, (uint64_t)(a1 + 14), v10, v11);
  int v14 = a1[2];
  int v15 = a1[14];
  if (v14 % v15) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-max-pooling-component.h", (const char *)&stru_20.filesize + 1, "input_dim_ % pool_stride_ == 0", v13);
  }
  int v16 = v14 / v15 - a1[12];
  int v17 = a1[13];
  if (v16 % v17) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-max-pooling-component.h", (const char *)&stru_20.filesize + 4, "(num_patches - pool_size_) % pool_step_ == 0", v13);
  }
  if (a1[3] != v15 + v15 * (v16 / v17)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-max-pooling-component.h", (const char *)&stru_20.filesize + 7, "output_dim_ == num_pools * pool_stride_", v13);
  }
  return result;
}

void kaldi::nnet1::TemporalMaxPoolingComponent::Copy(kaldi::nnet1::TemporalMaxPoolingComponent *this)
{
}

void sub_F3E60()
{
}

uint64_t kaldi::nnet1::TemporalMaxPoolingComponent::GetType(kaldi::nnet1::TemporalMaxPoolingComponent *this)
{
  return 2058;
}

uint64_t kaldi::nnet1::TemporalMaxPoolingComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a3 + 20) != 1) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "../subproject/libquasar/libkaldi/src/nnet/nnet-temporal-max-pooling-component.h", &stru_20.segname[14], "out->NumRows() == 1", a5);
  }
  uint64_t result = kaldi::CuMatrixBase<float>::Set(a3, a2, a3, a4, a5, -1.0e20);
  if (*(int *)(a2 + 20) >= 1)
  {
    int v8 = 0;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v12, a2, v8, 1, 0, *(_DWORD *)(a2 + 16));
      kaldi::CuMatrixBase<float>::Max(a3, (uint64_t)&v12, v9, v10, v11);
      int v12 = off_262D80;
      long long v13 = 0u;
      long long v14 = 0u;
      uint64_t result = fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v12);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a2 + 20));
  }
  return result;
}

void sub_F3F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (**a10)())
{
  a10 = off_262D80;
  *uint64_t v10 = 0u;
  v10[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a10);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::TemporalMaxPoolingComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a3 + 20) != 1) {
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "../subproject/libquasar/libkaldi/src/nnet/nnet-temporal-max-pooling-component.h", (const char *)&stru_20.vmsize + 3, "out.NumRows() == 1", a5);
  }
  if (*(_DWORD *)(a4 + 20) != 1) {
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "../subproject/libquasar/libkaldi/src/nnet/nnet-temporal-max-pooling-component.h", (const char *)&stru_20.vmsize + 4, "out_diff.NumRows() == 1", a5);
  }
  long long v23 = 0u;
  long long v22 = 0u;
  long long v21 = off_262DC8;
  char v24 = 0;
  unsigned int v7 = *(_DWORD *)(a3 + 16);
  uint64_t v8 = *(void *)(a3 + 32);
  uint64_t v18 = *(void *)(a3 + 8);
  int v17 = &off_262E20;
  uint64_t v19 = v7;
  uint64_t v20 = v8;
  kaldi::CuMatrixBase<float>::EqualElementColMask(a2, (uint64_t)&v17, (uint64_t)&v21, a4, a5);
  if (!*(_DWORD *)(a4 + 20)) {
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", &stru_1F8.segname[11], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v11);
  }
  unsigned int v12 = *(_DWORD *)(a4 + 16);
  uint64_t v13 = *(void *)(a4 + 32);
  uint64_t v18 = *(void *)(a4 + 8);
  int v17 = &off_262E20;
  uint64_t v19 = v12;
  uint64_t v20 = v13;
  kaldi::CuMatrixBase<float>::MulColsVec((uint64_t)&v21, (uint64_t)&v17, v9, v10, v11);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)a5, (uint64_t)&v21, 111, v14, v15, 1.0, 1.0);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v21);
}

void sub_F414C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AveragePooling2DComponent::Copy(kaldi::nnet1::AveragePooling2DComponent *this)
{
}

void sub_F4224()
{
}

uint64_t kaldi::nnet1::AveragePooling2DComponent::GetType(kaldi::nnet1::AveragePooling2DComponent *this)
{
  return 2051;
}

void kaldi::nnet1::AveragePooling2DComponent::InitData(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  long long v38 = 0uLL;
  uint64_t v39 = 0;
  uint64_t v6 = a2 + 4;
  unsigned int v7 = a1 + 17;
  uint64_t v8 = a1 + 16;
  uint64_t v35 = a1 + 15;
  long long v36 = a1 + 14;
  uint64_t v9 = a1 + 13;
  uint64_t v10 = a1 + 12;
  while (1)
  {
    if ((*((unsigned char *)v6 + *(void *)(*a2 - 24)) & 2) != 0) {
      goto LABEL_76;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)&v38, a4, a5);
    if (SHIBYTE(v39) < 0) {
      break;
    }
    if (HIBYTE(v39) == 10)
    {
      BOOL v19 = (void)v38 == 0x654C5870616D463CLL && WORD4(v38) == 15982;
      uint64_t v13 = (uint64_t)v10;
      if (v19) {
        goto LABEL_59;
      }
      BOOL v20 = (void)v38 == 0x654C5970616D463CLL && WORD4(v38) == 15982;
      uint64_t v13 = (uint64_t)v9;
      if (v20) {
        goto LABEL_59;
      }
      BOOL v21 = (void)v38 == 0x654C586C6F6F503CLL && WORD4(v38) == 15982;
      uint64_t v13 = (uint64_t)v36;
      if (v21) {
        goto LABEL_59;
      }
      goto LABEL_43;
    }
    if (HIBYTE(v39) != 11)
    {
      if (HIBYTE(v39) == 12)
      {
        BOOL v26 = &v38;
        goto LABEL_71;
      }
      goto LABEL_80;
    }
    BOOL v12 = (void)v38 == 0x7453586C6F6F503CLL && *(void *)((char *)&v38 + 3) == 0x3E70657453586C6FLL;
    uint64_t v13 = (uint64_t)v8;
    if (!v12)
    {
      BOOL v14 = (void)v38 == 0x7453596C6F6F503CLL && *(void *)((char *)&v38 + 3) == 0x3E70657453596C6FLL;
      uint64_t v13 = (uint64_t)v7;
      if (!v14) {
        goto LABEL_80;
      }
    }
LABEL_59:
    kaldi::ReadBasicType<int>(a2, 0, v13, v11, a5);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  uint64_t v15 = *((void *)&v38 + 1);
  if (*((void *)&v38 + 1) != 10) {
    goto LABEL_48;
  }
  BOOL v16 = *(void *)v38 == 0x654C5870616D463CLL && *(_WORD *)(v38 + 8) == 15982;
  uint64_t v13 = (uint64_t)v10;
  if (v16) {
    goto LABEL_59;
  }
  BOOL v17 = *(void *)v38 == 0x654C5970616D463CLL && *(_WORD *)(v38 + 8) == 15982;
  uint64_t v13 = (uint64_t)v9;
  if (v17) {
    goto LABEL_59;
  }
  BOOL v18 = *(void *)v38 == 0x654C586C6F6F503CLL && *(_WORD *)(v38 + 8) == 15982;
  uint64_t v13 = (uint64_t)v36;
  if (v18) {
    goto LABEL_59;
  }
  if ((v39 & 0x8000000000000000) == 0)
  {
    if (HIBYTE(v39) != 10) {
      goto LABEL_80;
    }
LABEL_43:
    BOOL v22 = (void)v38 == 0x654C596C6F6F503CLL && WORD4(v38) == 15982;
    uint64_t v13 = (uint64_t)v35;
    if (!v22) {
      goto LABEL_80;
    }
    goto LABEL_59;
  }
  BOOL v25 = *(void *)v38 == 0x654C596C6F6F503CLL && *(_WORD *)(v38 + 8) == 15982;
  uint64_t v13 = (uint64_t)v35;
  if (v25) {
    goto LABEL_59;
  }
  uint64_t v15 = *((void *)&v38 + 1);
LABEL_48:
  if (v15 != 11) {
    goto LABEL_69;
  }
  BOOL v23 = *(void *)v38 == 0x7453586C6F6F503CLL && *(void *)(v38 + 3) == 0x3E70657453586C6FLL;
  uint64_t v13 = (uint64_t)v8;
  if (v23) {
    goto LABEL_59;
  }
  uint64_t v15 = *((void *)&v38 + 1);
  if (*((void *)&v38 + 1) != 11) {
    goto LABEL_69;
  }
  BOOL v24 = *(void *)v38 == 0x7453596C6F6F503CLL && *(void *)(v38 + 3) == 0x3E70657453596C6FLL;
  uint64_t v13 = (uint64_t)v7;
  if (v24) {
    goto LABEL_59;
  }
  if ((v39 & 0x8000000000000000) == 0) {
    goto LABEL_80;
  }
LABEL_69:
  if (v15 != 12) {
    goto LABEL_80;
  }
  BOOL v26 = (long long *)v38;
LABEL_71:
  uint64_t v27 = *(void *)v26;
  int v28 = *((_DWORD *)v26 + 2);
  if (v27 != 0x6E6F706D6F432F3CLL || v28 != 1047817829)
  {
LABEL_80:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-average-pooling-2d-component.h", 65);
    uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Unknown token ", 14);
    if (v39 >= 0) {
      uint64_t v31 = &v38;
    }
    else {
      uint64_t v31 = (long long *)v38;
    }
    if (v39 >= 0) {
      uint64_t v32 = HIBYTE(v39);
    }
    else {
      uint64_t v32 = *((void *)&v38 + 1);
    }
    long long v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v31, v32);
    char v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" (FmapXLen|FmapYLen|PoolXLen|PoolYLen|PoolXStep|PoolYStep)", 58);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
  }
LABEL_76:
  if (!(*v9 * *v10 * *v36 * *v35 * *v8 * *v7)) {
    kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-average-pooling-2d-component.h", (const char *)&stru_20.vmsize + 6, "fmap_x_len_ * fmap_y_len_ * pool_x_len_ * pool_y_len_ * pool_x_step_ * pool_y_step_ != 0", a5);
  }
  if (SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
}

void sub_F46B8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::AveragePooling2DComponent::WriteData(int a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<FmapXLen>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FmapYLen>", v7, v8);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PoolXLen>", v9, v10);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PoolYLen>", v11, v12);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PoolXStep>", v13, v14);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PoolYStep>", v15, v16);

  return kaldi::WriteBasicType<int>(a2, (int)a3);
}

float kaldi::nnet1::AveragePooling2DComponent::PropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v7 = a1[12];
  int v6 = a1[13];
  int v8 = a1[2] / (v6 * v7);
  int v9 = a1[16];
  int v22 = a1[15];
  int v23 = a1[14];
  int v10 = a1[17];
  kaldi::CuMatrixBase<float>::SetZero(a3);
  if (v8 >= 1)
  {
    int v27 = (v7 - v23) / v9;
    int v24 = (v6 - v22) / v10;
    for (int i = 0; i != v8; ++i)
    {
      if ((v24 & 0x80000000) == 0)
      {
        int v26 = 0;
        do
        {
          if ((v27 & 0x80000000) == 0)
          {
            int v11 = 0;
            do
            {
              kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v31, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(v11 + (v26 + i * (v24 + 1)) * (v27 + 1)), 1);
              int v12 = a1[15];
              if (v12 >= 1)
              {
                int v13 = 0;
                int v14 = a1[14];
                int v15 = a1[12] * (v26 * a1[17] + i * a1[13]) + a1[16] * v11;
                do
                {
                  if (v14 >= 1)
                  {
                    for (int j = 0; j < v14; ++j)
                    {
                      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v28, a2, 0, *(_DWORD *)(a2 + 20), (const char *)(v15 + j + v13 * a1[12]), 1);
                      kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v31, (uint64_t)&v28, 111, v17, v18, 1.0, 1.0);
                      int v28 = off_262D80;
                      long long v29 = 0u;
                      long long v30 = 0u;
                      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v28);
                      int v14 = a1[14];
                    }
                    int v12 = a1[15];
                  }
                  ++v13;
                }
                while (v13 < v12);
              }
              uint64_t v31 = off_262D80;
              long long v32 = 0u;
              long long v33 = 0u;
              fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v31);
              BOOL v19 = v11++ == v27;
            }
            while (!v19);
          }
          BOOL v19 = v26++ == v24;
        }
        while (!v19);
      }
    }
  }
  float v20 = 1.0 / (double)(v22 * v23);
  kaldi::CuMatrixBase<float>::Scale(a3, v20);
  return result;
}

void sub_F4A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (**a15)(), uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void (**a20)())
{
  a15 = off_262D80;
  *BOOL v21 = 0u;
  v21[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a15);
  a20 = off_262D80;
  *float v20 = 0u;
  v20[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a20);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AveragePooling2DComponent::BackpropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9 = a1[12];
  int v8 = a1[13];
  int v10 = a1[2] / (v8 * v9);
  int v11 = a1[14];
  int v12 = a1[15];
  int v14 = a1[16];
  int v13 = a1[17];
  kaldi::CuMatrixBase<float>::SetZero(a5);
  int v25 = v10;
  if (v10 >= 1)
  {
    int v29 = (v9 - v11) / v14;
    int v26 = (v8 - v12) / v13;
    int v27 = 0;
    float v15 = 1.0 / (double)(v12 * v11);
    do
    {
      if ((v26 & 0x80000000) == 0)
      {
        int v28 = 0;
        do
        {
          if ((v29 & 0x80000000) == 0)
          {
            int v16 = 0;
            do
            {
              kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v33, a4, 0, *(_DWORD *)(a4 + 20), (const char *)(v16 + (v28 + v27 * (v26 + 1)) * (v29 + 1)), 1);
              int v17 = a1[15];
              if (v17 >= 1)
              {
                int v18 = 0;
                int v19 = a1[14];
                int v20 = a1[12] * (v28 * a1[17] + v27 * a1[13]) + a1[16] * v16;
                do
                {
                  if (v19 >= 1)
                  {
                    for (int i = 0; i < v19; ++i)
                    {
                      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v30, a5, 0, *(_DWORD *)(a5 + 20), (const char *)(v20 + i + v18 * a1[12]), 1);
                      kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v30, (uint64_t)&v33, 111, v22, v23, v15, 1.0);
                      long long v30 = off_262D80;
                      long long v31 = 0u;
                      long long v32 = 0u;
                      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v30);
                      int v19 = a1[14];
                    }
                    int v17 = a1[15];
                  }
                  ++v18;
                }
                while (v18 < v17);
              }
              long long v33 = off_262D80;
              long long v34 = 0u;
              long long v35 = 0u;
              fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v33);
              BOOL v24 = v16++ == v29;
            }
            while (!v24);
          }
          BOOL v24 = v28++ == v26;
        }
        while (!v24);
      }
      ++v27;
    }
    while (v27 != v25);
  }
}

void sub_F4D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (**a15)(), uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void (**a20)())
{
  a15 = off_262D80;
  *BOOL v21 = 0u;
  v21[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a15);
  a20 = off_262D80;
  *int v20 = 0u;
  v20[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a20);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AveragePooling2DComponent::ReadData(_DWORD *a1, uint64_t *a2, int a3)
{
  kaldi::ExpectToken(a2, a3, (kaldi *)"<FmapXLen>");
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)(a1 + 12), v6, v7);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<FmapYLen>");
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)(a1 + 13), v8, v9);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<PoolXLen>");
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)(a1 + 14), v10, v11);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<PoolYLen>");
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)(a1 + 15), v12, v13);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<PoolXStep>");
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)(a1 + 16), v14, v15);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<PoolYStep>");
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)(a1 + 17), v16, v17);
  int v19 = a1[2];
  int v20 = a1[12];
  int v21 = a1[13] * v20;
  int v22 = v19 / v21;
  if (v19 % v21) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-average-pooling-2d-component.h", (const char *)&stru_20.initprot + 1, "input_dim_ % (fmap_x_len_ * fmap_y_len_) == 0", v18);
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v31, "ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-average-pooling-2d-component.h", 95);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"num_fmaps ", 10);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v31);
    int v20 = a1[12];
  }
  int v23 = v20 - a1[14];
  int v24 = a1[16];
  int v25 = v23 / v24;
  if (v23 % v24) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-average-pooling-2d-component.h", (const char *)&stru_20.nsects + 1, "(fmap_x_len_ - pool_x_len_) % (pool_x_step_) == 0", v18);
  }
  int v26 = a1[13] - a1[15];
  int v27 = a1[17];
  int v28 = v26 / v27;
  if (v26 % v27) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-average-pooling-2d-component.h", (const char *)&stru_20.nsects + 2, "(fmap_y_len_ - pool_y_len_) % (pool_y_step_) == 0", v18);
  }
  int v29 = a1[3];
  int v30 = v25 + 1 + (v25 + 1) * v28;
  if (v29 % v30) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-average-pooling-2d-component.h", (const char *)&stru_20.flags + 3, "output_dim_ % (out_fmap_x_len * out_fmap_y_len) == 0", v18);
  }
  if (v22 != v29 / v30) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-average-pooling-2d-component.h", &stru_68.sectname[1], "num_input_fmaps == num_output_fmaps", v18);
  }
}

void sub_F5060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::nnet1::MaxPooling2DComponent::Copy(kaldi::nnet1::MaxPooling2DComponent *this)
{
}

void sub_F50BC()
{
}

uint64_t kaldi::nnet1::MaxPooling2DComponent::GetType(kaldi::nnet1::MaxPooling2DComponent *this)
{
  return 2053;
}

void kaldi::nnet1::MaxPooling2DComponent::InitData(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  long long v40 = 0uLL;
  uint64_t v41 = 0;
  int v7 = a2 + 4;
  uint64_t v8 = a1 + 17;
  int v9 = a1 + 16;
  long long v37 = a1 + 15;
  long long v38 = a1 + 14;
  uint64_t v10 = a1 + 13;
  int v11 = a1 + 12;
  while (1)
  {
    if ((*((unsigned char *)v7 + *(void *)(*a2 - 24)) & 2) != 0) {
      goto LABEL_76;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)&v40, a4, a5);
    if (SHIBYTE(v41) < 0) {
      break;
    }
    if (HIBYTE(v41) == 10)
    {
      BOOL v20 = (void)v40 == 0x654C5870616D463CLL && WORD4(v40) == 15982;
      uint64_t v14 = (uint64_t)v11;
      if (v20) {
        goto LABEL_59;
      }
      BOOL v21 = (void)v40 == 0x654C5970616D463CLL && WORD4(v40) == 15982;
      uint64_t v14 = (uint64_t)v10;
      if (v21) {
        goto LABEL_59;
      }
      BOOL v22 = (void)v40 == 0x654C586C6F6F503CLL && WORD4(v40) == 15982;
      uint64_t v14 = (uint64_t)v38;
      if (v22) {
        goto LABEL_59;
      }
      goto LABEL_43;
    }
    if (HIBYTE(v41) != 11)
    {
      if (HIBYTE(v41) == 12)
      {
        int v27 = &v40;
        goto LABEL_71;
      }
      goto LABEL_81;
    }
    BOOL v13 = (void)v40 == 0x7453586C6F6F503CLL && *(void *)((char *)&v40 + 3) == 0x3E70657453586C6FLL;
    uint64_t v14 = (uint64_t)v9;
    if (!v13)
    {
      BOOL v15 = (void)v40 == 0x7453596C6F6F503CLL && *(void *)((char *)&v40 + 3) == 0x3E70657453596C6FLL;
      uint64_t v14 = (uint64_t)v8;
      if (!v15) {
        goto LABEL_81;
      }
    }
LABEL_59:
    kaldi::ReadBasicType<int>(a2, 0, v14, v12, a5);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  uint64_t v16 = *((void *)&v40 + 1);
  if (*((void *)&v40 + 1) != 10) {
    goto LABEL_48;
  }
  BOOL v17 = *(void *)v40 == 0x654C5870616D463CLL && *(_WORD *)(v40 + 8) == 15982;
  uint64_t v14 = (uint64_t)v11;
  if (v17) {
    goto LABEL_59;
  }
  BOOL v18 = *(void *)v40 == 0x654C5970616D463CLL && *(_WORD *)(v40 + 8) == 15982;
  uint64_t v14 = (uint64_t)v10;
  if (v18) {
    goto LABEL_59;
  }
  BOOL v19 = *(void *)v40 == 0x654C586C6F6F503CLL && *(_WORD *)(v40 + 8) == 15982;
  uint64_t v14 = (uint64_t)v38;
  if (v19) {
    goto LABEL_59;
  }
  if ((v41 & 0x8000000000000000) == 0)
  {
    if (HIBYTE(v41) != 10) {
      goto LABEL_81;
    }
LABEL_43:
    BOOL v23 = (void)v40 == 0x654C596C6F6F503CLL && WORD4(v40) == 15982;
    uint64_t v14 = (uint64_t)v37;
    if (!v23) {
      goto LABEL_81;
    }
    goto LABEL_59;
  }
  BOOL v26 = *(void *)v40 == 0x654C596C6F6F503CLL && *(_WORD *)(v40 + 8) == 15982;
  uint64_t v14 = (uint64_t)v37;
  if (v26) {
    goto LABEL_59;
  }
  uint64_t v16 = *((void *)&v40 + 1);
LABEL_48:
  if (v16 != 11) {
    goto LABEL_69;
  }
  BOOL v24 = *(void *)v40 == 0x7453586C6F6F503CLL && *(void *)(v40 + 3) == 0x3E70657453586C6FLL;
  uint64_t v14 = (uint64_t)v9;
  if (v24) {
    goto LABEL_59;
  }
  uint64_t v16 = *((void *)&v40 + 1);
  if (*((void *)&v40 + 1) != 11) {
    goto LABEL_69;
  }
  BOOL v25 = *(void *)v40 == 0x7453596C6F6F503CLL && *(void *)(v40 + 3) == 0x3E70657453596C6FLL;
  uint64_t v14 = (uint64_t)v8;
  if (v25) {
    goto LABEL_59;
  }
  if ((v41 & 0x8000000000000000) == 0) {
    goto LABEL_81;
  }
LABEL_69:
  if (v16 != 12) {
    goto LABEL_81;
  }
  int v27 = (long long *)v40;
LABEL_71:
  uint64_t v28 = *(void *)v27;
  int v29 = *((_DWORD *)v27 + 2);
  if (v28 != 0x6E6F706D6F432F3CLL || v29 != 1047817829)
  {
LABEL_81:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v39, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-max-pooling-2d-component.h", 116);
    long long v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Unknown token ", 14);
    if (v41 >= 0) {
      long long v33 = &v40;
    }
    else {
      long long v33 = (long long *)v40;
    }
    if (v41 >= 0) {
      uint64_t v34 = HIBYTE(v41);
    }
    else {
      uint64_t v34 = *((void *)&v40 + 1);
    }
    long long v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v33, v34);
    long long v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" (FmapXLen|FmapYLen|PoolXLen|PoolYLen|PoolXStep|PoolYStep)", 58);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v39);
  }
LABEL_76:
  int v31 = a1[13] * a1[12];
  if (a1[2] % v31)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v39, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-max-pooling-2d-component.h", 121);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Invalid component parameters", 28);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v39);
  }
  if (!(*v38 * v31 * *v37 * *v9 * *v8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-max-pooling-2d-component.h", &stru_68.segname[2], "fmap_x_len_ * fmap_y_len_ * pool_x_len_ * pool_y_len_ * pool_x_step_ * pool_y_step_ != 0", a5);
  }
  if (SHIBYTE(v41) < 0) {
    operator delete((void *)v40);
  }
}

void sub_F55B4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MaxPooling2DComponent::PropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v9 = a1[12];
  int v8 = a1[13];
  int v10 = a1[2] / (v8 * v9);
  int v12 = a1[14];
  int v11 = a1[15];
  int v14 = a1[16];
  int v13 = a1[17];
  uint64_t result = kaldi::CuMatrixBase<float>::Set(a3, a2, a3, a4, a5, -1.0e20);
  int v26 = v10;
  if (v10 >= 1)
  {
    int v30 = (v9 - v12) / v14;
    int v27 = (v8 - v11) / v13;
    int v28 = 0;
    do
    {
      if ((v27 & 0x80000000) == 0)
      {
        int v29 = 0;
        do
        {
          if ((v30 & 0x80000000) == 0)
          {
            int v16 = 0;
            do
            {
              kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v34, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(v16 + (v29 + v28 * (v27 + 1)) * (v30 + 1)), 1);
              int v17 = a1[15];
              if (v17 >= 1)
              {
                int v18 = 0;
                int v19 = a1[14];
                int v20 = a1[12] * (v29 * a1[17] + v28 * a1[13]) + a1[16] * v16;
                do
                {
                  if (v19 >= 1)
                  {
                    for (int i = 0; i < v19; ++i)
                    {
                      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v31, a2, 0, *(_DWORD *)(a2 + 20), (const char *)(v20 + i + v18 * a1[12]), 1);
                      kaldi::CuMatrixBase<float>::Max((uint64_t)&v34, (uint64_t)&v31, v22, v23, v24);
                      int v31 = off_262D80;
                      long long v32 = 0u;
                      long long v33 = 0u;
                      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v31);
                      int v19 = a1[14];
                    }
                    int v17 = a1[15];
                  }
                  ++v18;
                }
                while (v18 < v17);
              }
              uint64_t v34 = off_262D80;
              long long v35 = 0u;
              long long v36 = 0u;
              uint64_t result = fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v34);
              BOOL v25 = v16++ == v30;
            }
            while (!v25);
          }
          BOOL v25 = v29++ == v27;
        }
        while (!v25);
      }
      ++v28;
    }
    while (v28 != v26);
  }
  return result;
}

void sub_F5820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (**a15)(), uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void (**a20)())
{
  a15 = off_262D80;
  *BOOL v21 = 0u;
  v21[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a15);
  a20 = off_262D80;
  *int v20 = 0u;
  v20[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a20);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MaxPooling2DComponent::BackpropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9 = a1[12];
  int v8 = a1[13];
  int v10 = a1[2] / (v8 * v9);
  int v12 = a1[14];
  int v11 = a1[15];
  int v14 = a1[16];
  int v13 = a1[17];
  kaldi::CuMatrixBase<float>::SetZero(a5);
  if (v10 >= 1)
  {
    int v33 = 0;
    int v38 = (v9 - v12) / v14;
    int v15 = (v8 - v11) / v13;
    int v31 = v15 + 1;
    int v32 = v15;
    do
    {
      if ((v15 & 0x80000000) == 0)
      {
        int v34 = 0;
        do
        {
          if ((v38 & 0x80000000) == 0)
          {
            int v16 = 0;
            int v37 = (v34 + v33 * v31) * (v38 + 1);
            do
            {
              kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v53, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(v16 + v37), 1);
              kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v50, a4, 0, *(_DWORD *)(a4 + 20), (const char *)(v16 + v37), 1);
              int v39 = v16;
              int v17 = a1[15];
              if (v17 >= 1)
              {
                int v18 = 0;
                int v19 = a1[14];
                int v20 = a1[12] * (v34 * a1[17] + v33 * a1[13]) + a1[16] * v16;
                do
                {
                  if (v19 >= 1)
                  {
                    for (int i = 0; i < v19; ++i)
                    {
                      uint64_t v22 = (const char *)(v20 + i + v18 * a1[12]);
                      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v47, a2, 0, *(_DWORD *)(a2 + 20), v22, 1);
                      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v44, a5, 0, *(_DWORD *)(a5 + 20), v22, 1);
                      long long v41 = 0u;
                      long long v42 = 0u;
                      long long v40 = off_262DC8;
                      char v43 = 0;
                      kaldi::CuMatrixBase<float>::EqualElementMask((uint64_t)&v47, (uint64_t)&v53, (uint64_t)&v40, v23, v24);
                      kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v40, (uint64_t)&v50, v25, v26, v27);
                      kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v44, (uint64_t)&v40, 111, v28, v29, 1.0, 1.0);
                      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v40);
                      int v44 = off_262D80;
                      long long v45 = 0u;
                      long long v46 = 0u;
                      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v44);
                      std::vector<int> v47 = off_262D80;
                      long long v48 = 0u;
                      long long v49 = 0u;
                      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v47);
                      int v19 = a1[14];
                    }
                    int v17 = a1[15];
                  }
                  ++v18;
                }
                while (v18 < v17);
              }
              uint64_t v50 = off_262D80;
              long long v51 = 0u;
              long long v52 = 0u;
              fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v50);
              unint64_t v53 = off_262D80;
              long long v54 = 0u;
              long long v55 = 0u;
              fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v53);
              int v16 = v39 + 1;
            }
            while (v39 != v38);
          }
          int v15 = v32;
        }
        while (v34++ != v32);
      }
      ++v33;
    }
    while (v33 != v10);
  }
}

void sub_F5C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _OWORD *a15)
{
  *(void *)(v15 - 128) = off_262D80;
  *a15 = 0u;
  a15[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v15 - 128);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MaxPooling2DComponent::ReadData(_DWORD *a1, uint64_t *a2, int a3)
{
  kaldi::ExpectToken(a2, a3, (kaldi *)"<FmapXLen>");
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)(a1 + 12), v6, v7);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<FmapYLen>");
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)(a1 + 13), v8, v9);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<PoolXLen>");
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)(a1 + 14), v10, v11);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<PoolYLen>");
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)(a1 + 15), v12, v13);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<PoolXStep>");
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)(a1 + 16), v14, v15);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<PoolYStep>");
  uint64_t result = kaldi::ReadBasicType<int>(a2, a3, (uint64_t)(a1 + 17), v16, v17);
  int v20 = a1[2];
  int v22 = a1[12];
  int v21 = a1[13];
  int v23 = v20 / (v21 * v22);
  if (v20 % (v21 * v22)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-max-pooling-2d-component.h", (const char *)&stru_68.align + 1, "input_dim_ % (fmap_x_len_ * fmap_y_len_) == 0", v19);
  }
  int v24 = (v22 - a1[14]) / a1[16] + 1;
  int v25 = a1[3];
  int v26 = v24 + v24 * ((v21 - a1[15]) / a1[17]);
  if (v25 % v26) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-max-pooling-2d-component.h", (const char *)&stru_68.reloff + 2, "output_dim_ % (out_fmap_x_len * out_fmap_y_len) == 0", v19);
  }
  if (v23 != v25 / v26) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-max-pooling-2d-component.h", (const char *)&stru_68.nreloc, "num_input_fmaps == num_output_fmaps", v19);
  }
  return result;
}

void kaldi::nnet1::Desplice::Copy(kaldi::nnet1::Desplice *this)
{
}

void sub_F5EF8()
{
}

uint64_t kaldi::nnet1::Desplice::GetType(kaldi::nnet1::Desplice *this)
{
  return 1027;
}

uint64_t kaldi::nnet1::Desplice::OutputRowCount(kaldi::nnet1::Desplice *this, int a2)
{
  return (*((_DWORD *)this + 2) / *((_DWORD *)this + 3) * a2);
}

void kaldi::nnet1::Desplice::InitData(kaldi::nnet1::Desplice *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  long long v28 = 0uLL;
  uint64_t v29 = 0;
  uint64_t v6 = a2 + 4;
  int v7 = (char *)a1 + 56;
  uint64_t v8 = (char *)a1 + 52;
  int v9 = (char *)a1 + 48;
  while (1)
  {
    if ((*((unsigned char *)v6 + *(void *)(*a2 - 24)) & 2) != 0) {
      goto LABEL_48;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)&v28, a4, a5);
    if ((SHIBYTE(v29) & 0x80000000) == 0)
    {
      switch(HIBYTE(v29))
      {
        case 0xBu:
          BOOL v16 = (void)v28 == 0x69727453776F523CLL && *(void *)((char *)&v28 + 3) == 0x3E65646972745377;
          a3 = (uint64_t)v8;
          if (!v16) {
            goto LABEL_51;
          }
          break;
        case 0xCu:
          BOOL v15 = (void)v28 == 0x6E654C656D69543CLL && DWORD2(v28) == 1047032935;
          a3 = (uint64_t)v7;
          if (!v15)
          {
            int v17 = &v28;
            goto LABEL_43;
          }
          break;
        case 0xEu:
          BOOL v10 = (void)v28 == 0x4C6563696C70533CLL && *(void *)((char *)&v28 + 6) == 0x3E6874676E654C65;
          a3 = (uint64_t)v9;
          if (!v10) {
            goto LABEL_51;
          }
          break;
        default:
          goto LABEL_51;
      }
      goto LABEL_40;
    }
    uint64_t v11 = *((void *)&v28 + 1);
    if (*((void *)&v28 + 1) == 11)
    {
      BOOL v13 = *(void *)v28 == 0x69727453776F523CLL && *(void *)(v28 + 3) == 0x3E65646972745377;
      a3 = (uint64_t)v8;
      if (v13) {
        goto LABEL_40;
      }
      uint64_t v11 = *((void *)&v28 + 1);
    }
    else if (*((void *)&v28 + 1) == 14)
    {
      BOOL v12 = *(void *)v28 == 0x4C6563696C70533CLL && *(void *)(v28 + 6) == 0x3E6874676E654C65;
      a3 = (uint64_t)v9;
      if (v12) {
        goto LABEL_40;
      }
    }
    if (v11 != 12) {
      goto LABEL_51;
    }
    BOOL v14 = *(void *)v28 == 0x6E654C656D69543CLL && *(_DWORD *)(v28 + 8) == 1047032935;
    a3 = (uint64_t)v7;
    if (!v14) {
      break;
    }
LABEL_40:
    kaldi::ReadBasicType<int>(a2, 0, a3, a4, a5);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  if (*((void *)&v28 + 1) != 12) {
    goto LABEL_51;
  }
  int v17 = (long long *)v28;
LABEL_43:
  uint64_t v18 = *(void *)v17;
  int v19 = *((_DWORD *)v17 + 2);
  if (v18 != 0x6E6F706D6F432F3CLL || v19 != 1047817829)
  {
LABEL_51:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolution-splicer.h", 62);
    int v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Unknown token ", 14);
    if (v29 >= 0) {
      int v22 = &v28;
    }
    else {
      int v22 = (long long *)v28;
    }
    if (v29 >= 0) {
      uint64_t v23 = HIBYTE(v29);
    }
    else {
      uint64_t v23 = *((void *)&v28 + 1);
    }
    int v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    int v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" (FmapXLen|FmapYLen|PoolXLen|PoolYLen|PoolXStep|PoolYStep)", 58);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27);
  }
LABEL_48:
  kaldi::nnet1::Desplice::Init(a1, (uint64_t)a2, a3, a4, a5);
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)v28);
  }
}

void sub_F6240(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Desplice::WriteData(int a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<SpliceLength>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<RowStride>", v7, v8);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<TimeLength>", v9, v10);

  return kaldi::WriteBasicType<int>(a2, (int)a3);
}

uint64_t kaldi::nnet1::Desplice::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5 = *(_DWORD *)(a1 + 52);
  if (*(_DWORD *)(a2 + 20) % v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolution-splicer.h", (const char *)&stru_20.initprot + 1, "(in.NumRows() % row_stride_) == 0", a5);
  }
  int v6 = *(_DWORD *)(a2 + 24) * v5;

  return kaldi::CuMatrixBase<float>::CopyIndexedItems(a3, a2, (int *)(a1 + 64), a1 + 88, v6);
}

uint64_t kaldi::nnet1::Desplice::BackpropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5 = a1[12];
  if (*(_DWORD *)(a4 + 20) != v5 * *(_DWORD *)(a2 + 20)) {
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolution-splicer.h", (const char *)&stru_20.flags + 2, "out_diff.NumRows() == in.NumRows() * splice_length_", a5);
  }
  int v6 = a1[13] * v5 * *(_DWORD *)(a4 + 24);

  return kaldi::CuMatrixBase<float>::CopyIndexedItems((uint64_t)a5, a4, a1 + 28, (uint64_t)(a1 + 34), v6);
}

void kaldi::nnet1::Desplice::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v6 = a1 + 52;
  *(void *)(a1 + 48) = 0x100000001;
  uint64_t v7 = a1 + 48;
  *(_DWORD *)(a1 + 56) = 1;
  uint64_t v8 = a1 + 56;
  kaldi::ExpectToken(a2, a3, (kaldi *)"<SpliceLength>");
  kaldi::ReadBasicType<int>(a2, a3, v7, v9, v10);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<RowStride>");
  kaldi::ReadBasicType<int>(a2, a3, v6, v11, v12);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<TimeLength>");
  kaldi::ReadBasicType<int>(a2, a3, v8, v13, v14);

  kaldi::nnet1::Desplice::Init((kaldi::nnet1::Desplice *)a1, v15, v16, v17, v18);
}

void kaldi::nnet1::SentenceAveragingComponent::Copy(kaldi::nnet1::SentenceAveragingComponent *this)
{
}

void sub_F65B0()
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v0);
  operator delete();
}

uint64_t kaldi::nnet1::SentenceAveragingComponent::GetType(kaldi::nnet1::SentenceAveragingComponent *this)
{
  return 2049;
}

void kaldi::nnet1::SentenceAveragingComponent::Info(kaldi::nnet1::SentenceAveragingComponent *this@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, "nested_network {\n");
  kaldi::nnet1::Nnet::Info((uint64_t *)__p, (kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 88));
  if ((v10 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v10 & 0x80u) == 0) {
    std::string::size_type v5 = v10;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  uint64_t v6 = std::string::append(&v11, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  uint64_t v8 = std::string::append(&v12, "}\n");
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if ((char)v10 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_F66C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::SentenceAveragingComponent::InfoGradient(kaldi::nnet1::SentenceAveragingComponent *this@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, "nested_gradient {\n");
  kaldi::nnet1::Nnet::InfoGradient((kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 88), __p);
  if ((v10 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v10 & 0x80u) == 0) {
    std::string::size_type v5 = v10;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  uint64_t v6 = std::string::append(&v11, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  uint64_t v8 = std::string::append(&v12, "}\n");
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if ((char)v10 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_F67F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::SentenceAveragingComponent::InitData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  long long v49 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  long long v46 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v6 = a2 + 4;
  long long v7 = (float *)(a1 + 464);
  char v43 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  while ((*((unsigned char *)v6 + *(void *)(*a2 - 24)) & 2) == 0)
  {
    kaldi::ReadToken(a2, 0, (uint64_t)&v43, a4, a5);
    if (SHIBYTE(v45) < 0)
    {
      if (v44 != 17)
      {
        if (v44 != 20
          || (*v43 == 0x4E64657473654E3CLL ? (BOOL v13 = v43[1] == 0x6E656C694674656ELL) : (BOOL v13 = 0),
              v13 ? (BOOL v14 = *((unsigned int *)v43 + 4) == 1046834529) : (BOOL v14 = 0),
              !v14))
        {
LABEL_82:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v42, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-sentence-averaging-component.h", 54);
          long long v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Unknown token ", 14);
          if (v45 >= 0) {
            int v37 = &v43;
          }
          else {
            int v37 = (void **)v43;
          }
          if (v45 >= 0) {
            uint64_t v38 = HIBYTE(v45);
          }
          else {
            uint64_t v38 = v44;
          }
          int v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" Typo in config?", 16);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v42);
        }
        goto LABEL_14;
      }
      if (*v43 == 0x4E64657473654E3CLL && v43[1] == 0x6F746F725074656ELL && *((unsigned char *)v43 + 16) == 62)
      {
LABEL_50:
        std::string v12 = &v46;
        goto LABEL_51;
      }
      uint64_t v17 = v43;
    }
    else
    {
      if (HIBYTE(v45) != 17)
      {
        if (HIBYTE(v45) != 20) {
          goto LABEL_82;
        }
        BOOL v10 = v43 == (void *)0x4E64657473654E3CLL && v44 == 0x6E656C694674656ELL;
        if (!v10 || v45 != 1046834529) {
          goto LABEL_82;
        }
LABEL_14:
        std::string v12 = &v49;
LABEL_51:
        kaldi::ReadToken(a2, 0, (uint64_t)v12, v8, v9);
        goto LABEL_52;
      }
      if (v43 == (void *)0x4E64657473654E3CLL && v44 == 0x6F746F725074656ELL && v45 == 62) {
        goto LABEL_50;
      }
      uint64_t v17 = (uint64_t *)&v43;
    }
    uint64_t v20 = *v17;
    int v21 = (void *)v17[1];
    int v22 = *((unsigned __int8 *)v17 + 16);
    if (v20 != 0x61526E7261654C3CLL || v21 != (void *)0x726F746361466574 || v22 != 62) {
      goto LABEL_82;
    }
    kaldi::ReadBasicType<float>(a2, 0, v7, v8, v9);
LABEL_52:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  int v25 = HIBYTE(v48);
  if (SHIBYTE(v48) < 0)
  {
    if (!v47) {
      goto LABEL_57;
    }
LABEL_55:
    char v26 = 1;
  }
  else
  {
    if (HIBYTE(v48)) {
      goto LABEL_55;
    }
LABEL_57:
    char v26 = 0;
  }
  if (SHIBYTE(v51) < 0)
  {
    if (!v50) {
      goto LABEL_67;
    }
LABEL_60:
    if ((v26 & 1) == 0) {
      goto LABEL_61;
    }
LABEL_68:
    long long v28 = "(nested_nnet_proto != \"\") ^ (nested_nnet_filename != \"\")";
    uint64_t v29 = (unsigned char *)(&stru_20 + 26);
LABEL_91:
    kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-sentence-averaging-component.h", v29, v28, a5);
  }
  if (HIBYTE(v51)) {
    goto LABEL_60;
  }
LABEL_67:
  if ((v26 & 1) == 0) {
    goto LABEL_68;
  }
LABEL_61:
  if ((v51 & 0x8000000000000000) == 0)
  {
    if (!HIBYTE(v51)) {
      goto LABEL_63;
    }
LABEL_70:
    kaldi::nnet1::Nnet::Read(a1 + 88, (uint64_t)&v49);
    int v25 = HIBYTE(v48);
    if (v48 < 0) {
      goto LABEL_71;
    }
LABEL_64:
    uint64_t v27 = a1;
    if (!v25) {
      goto LABEL_73;
    }
LABEL_72:
    kaldi::nnet1::Nnet::Init((kaldi::nnet1::Nnet *)(v27 + 88), (uint64_t)&v46, a3);
    goto LABEL_73;
  }
  if (v50) {
    goto LABEL_70;
  }
LABEL_63:
  if ((v48 & 0x8000000000000000) == 0) {
    goto LABEL_64;
  }
LABEL_71:
  uint64_t v27 = a1;
  if (v47) {
    goto LABEL_72;
  }
LABEL_73:
  int v30 = *(_DWORD *)(v27 + 8);
  int v31 = (kaldi::nnet1::Nnet *)(v27 + 88);
  if (v30 != kaldi::nnet1::Nnet::InputDim(v31, (uint64_t)a2, a3, a4, a5))
  {
    long long v28 = "InputDim() == nnet_.InputDim()";
    uint64_t v29 = (unsigned char *)(&stru_20 + 30);
    goto LABEL_91;
  }
  int v35 = *(_DWORD *)(a1 + 12);
  if (v35 != *(_DWORD *)(a1 + 8) + kaldi::nnet1::Nnet::OutputDim(v31, v32, v33, v34, a5))
  {
    long long v28 = "OutputDim() == nnet_.OutputDim() + InputDim()";
    uint64_t v29 = (char *)&stru_20.vmaddr + 7;
    goto LABEL_91;
  }
  if (SHIBYTE(v45) < 0) {
    operator delete(v43);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete(v46);
  }
  if (SHIBYTE(v51) < 0) {
    operator delete(v49);
  }
}

void sub_F6C08(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 113) < 0) {
    operator delete(*(void **)(v1 - 136));
  }
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::SentenceAveragingComponent::WriteData(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::Nnet::Write((uint64_t *)(a1 + 88), a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::SentenceAveragingComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  v33[1] = 0;
  uint64_t v34 = 0;
  char v37 = 0;
  uint64_t v7 = *(void *)(a3 + 32);
  v33[0] = off_262DC8;
  uint64_t v35 = 0;
  uint64_t v36 = v7;
  uint64_t v8 = (kaldi::nnet1::Nnet *)(a1 + 88);
  kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>((uint64_t *)(a1 + 88), a2, (uint64_t)v33, a4, a5);
  int v9 = *(_DWORD *)(a2 + 16);
  BOOL v14 = (const char *)kaldi::nnet1::Nnet::OutputDim(v8, v10, v11, v12, v13);
  int v15 = HIDWORD(v34);
  v31[1] = 0;
  v31[2] = 0;
  v31[0] = off_262E60;
  uint64_t v32 = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v31, (uint64_t)v14, 0, v16, v17);
  uint64_t v32 = *(void *)(a3 + 32);
  float v18 = 1.0 / (double)v15;
  kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)v31, v33, v18, 0.0, v19, v20, v21);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v28, a3, 0, *(_DWORD *)(a3 + 20), 0, (int)v14);
  kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)&v28, (uint64_t)v31, v22, v23, v24, 1.0, 0.0);
  long long v28 = off_262D80;
  long long v29 = 0u;
  long long v30 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v28);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v28, a3, 0, *(_DWORD *)(a3 + 20), v14, v9);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v28, a2, 111, v25, v26);
  long long v28 = off_262D80;
  long long v29 = 0u;
  long long v30 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v28);
  kaldi::CuVector<float>::~CuVector(v31);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v33);
}

void sub_F6E0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  va_arg(va1, void);
  va_arg(va1, void);
  va_arg(va1, void);
  va_arg(va1, void);
  va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  int v3 = off_262D80;
  long long v5 = 0u;
  long long v6 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator((void (***)())va);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va1);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SentenceAveragingComponent::BackpropagateFnc(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  if (a5)
  {
    int v7 = *(_DWORD *)(a2 + 16);
    uint64_t v8 = (const char *)kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(result + 88), a2, a3, a4, a5);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v11, a4, 0, *(_DWORD *)(a4 + 20), v8, v7);
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)a5, (uint64_t)&v11, 111, v9, v10);
    uint64_t v11 = off_262D80;
    long long v12 = 0u;
    long long v13 = 0u;
    return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v11);
  }
  return result;
}

void sub_F6F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (**a10)(), long long a11, long long a12)
{
  a10 = off_262D80;
  a11 = 0u;
  a12 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a10);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SentenceAveragingComponent::ReadData(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  long long v5 = (kaldi::nnet1::Nnet *)(a1 + 11);
  kaldi::nnet1::Nnet::Read(a1 + 11, a2, a3, a4);
  if (kaldi::nnet1::Nnet::InputDim(v5, v6, v7, v8, v9) != *((_DWORD *)a1 + 2)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-sentence-averaging-component.h", (const char *)&stru_20.vmsize + 4, "nnet_.InputDim() == InputDim()", v13);
  }
  uint64_t result = kaldi::nnet1::Nnet::OutputDim(v5, v10, v11, v12, v13);
  if (*((_DWORD *)a1 + 2) + result != *((_DWORD *)a1 + 3)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-sentence-averaging-component.h", (const char *)&stru_20.vmsize + 5, "nnet_.OutputDim() + InputDim() == OutputDim()", v15);
  }
  return result;
}

uint64_t kaldi::nnet1::SentenceAveragingComponent::NumParams(kaldi::nnet1::SentenceAveragingComponent *this)
{
  return kaldi::nnet1::Nnet::NumParams((kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 88));
}

uint64_t kaldi::nnet1::SentenceAveragingComponent::GetParams(uint64_t a1, void **a2)
{
  int v3 = (kaldi::nnet1::Nnet *)(a1 + 88);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0, v5, v6);

  return kaldi::nnet1::Nnet::GetParams(v3, (uint64_t)a2);
}

uint64_t kaldi::nnet1::SentenceAveragingComponent::SetParams(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(uint64_t))(*(void *)a1 + 176))(a1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "../subproject/libquasar/libkaldi/src/nnet/nnet-sentence-averaging-component.h", (const char *)&stru_20.filesize, "wei_src.Dim() == NumParams()", v5);
  }

  return kaldi::nnet1::Nnet::SetParams((kaldi::nnet1::Nnet *)(a1 + 88), a2);
}

float kaldi::nnet1::SentenceAveragingComponent::SumParams(kaldi::nnet1::SentenceAveragingComponent *this)
{
  return kaldi::nnet1::Nnet::SumParams((kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 88));
}

void *kaldi::nnet1::SentenceAveragingComponent::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v8 = (void ***)(a1 + 88);
  uint64_t v9 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 88), a2, a3, a4, a5);
  uint64_t v10 = *(unsigned int *)(a3 + 20);
  v25[1] = 0;
  v25[2] = 0;
  v25[0] = off_262E60;
  uint64_t v25[3] = a4;
  kaldi::CuVector<float>::Resize((uint64_t)v25, v9, 1u, v11, v12);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v22, a3, 0, *(_DWORD *)(a3 + 20), 0, v9);
  float v13 = 1.0 / (double)(int)v10;
  kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)v25, &v22, v13, 0.0, v14, v15, v16);
  uint64_t v22 = off_262D80;
  long long v23 = 0u;
  long long v24 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v22);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)&v22, v10, v9, 1u, a4, 0);
  kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)&v22, (uint64_t)v25, v17, v18, v19, 1.0, 0.0);
  kaldi::nnet1::Nnet::Backpropagate(v8, (uint64_t)&v22, 0, (uint64_t)a5, v20);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v22);
  return kaldi::CuVector<float>::~CuVector(v25);
}

void sub_F7268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::SentenceAveragingComponent::UpdateWeights(kaldi::nnet1::SentenceAveragingComponent *this, void *a2, uint64_t a3)
{
}

void kaldi::nnet1::SentenceAveragingComponent::SetTrainOptions(kaldi::nnet1::SentenceAveragingComponent *this, const kaldi::nnet1::NnetTrainOptions *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = off_26E7B8;
  *(_OWORD *)uint64_t v6 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)&v6[3] + 3) = *(_OWORD *)((char *)a2 + 23);
  v6[0] = *((float *)this + 116) * v6[0];
  kaldi::nnet1::Nnet::SetTrainOptions((kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 88), (kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 48), 1, a4, a5);
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)&v5);
}

void sub_F7350(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::FramePoolingComponent::Copy(kaldi::nnet1::FramePoolingComponent *this)
{
}

void sub_F73AC()
{
}

uint64_t kaldi::nnet1::FramePoolingComponent::GetType(kaldi::nnet1::FramePoolingComponent *this)
{
  return 2054;
}

uint64_t kaldi::nnet1::FramePoolingComponent::Info(kaldi::nnet1::FramePoolingComponent *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\n  (offset,weights) : ", 22);
  if (*((void *)this + 16) != *((void *)this + 15))
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"(", 1);
      int v4 = (void *)std::ostream::operator<<();
      uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)",", 1);
      kaldi::VectorBase<float>::Write(*((void *)this + 15) + v2, v5, 0);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"), ", 3);
      ++v3;
      v2 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 16) - *((void *)this + 15)) >> 3) > v3);
  }
  std::stringbuf::str();
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_F75D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::FramePoolingComponent::InfoGradient(kaldi::nnet1::FramePoolingComponent *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n  lr-coef ", 11);
  kaldi::nnet1::ToString<float>();
  if ((v13 & 0x80u) == 0) {
    unint64_t v3 = v12;
  }
  else {
    unint64_t v3 = (void **)v12[0];
  }
  if ((v13 & 0x80u) == 0) {
    uint64_t v4 = v13;
  }
  else {
    uint64_t v4 = (uint64_t)v12[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  if ((char)v13 < 0) {
    operator delete(v12[0]);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n  (offset,weights_grad) : ", 27);
  if (*((void *)this + 19) != *((void *)this + 18))
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      uint64_t v7 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)",", 1);
      kaldi::VectorBase<float>::Write(*((void *)this + 18) + v5, v10, 0);
      std::ostream::sentry::sentry();
      char v8 = (char *)v10 + *(void *)(v10[0] - 24);
      if ((v8[32] & 5) == 0)
      {
        (*(void (**)(void **__return_ptr))(**((void **)v8 + 5) + 32))(v12);
        if (v14 == -1) {
          std::ios_base::clear((std::ios_base *)((char *)v10 + *(void *)(v10[0] - 24)), *(_DWORD *)((char *)&v10[4] + *(void *)(v10[0] - 24)) | 4);
        }
      }
      std::ostream::sentry::~sentry();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"), ", 3);
      ++v6;
      v5 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 19) - *((void *)this + 18)) >> 3) > v6);
  }
  std::stringbuf::str();
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_F7908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 - 209) < 0) {
    operator delete(*(void **)(v9 - 232));
  }
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::FramePoolingComponent::InitData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v7 = &v66;
  uint64_t v75 = 0;
  float v76 = 0;
  uint64_t v77 = 0;
  float v72 = 0;
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  int v68 = 1008981770;
  char v8 = a2 + 4;
  long long v66 = 0uLL;
  uint64_t v9 = (char *)(a1 + 172);
  uint64_t v10 = (int *)(a1 + 88);
  uint64_t v67 = 0;
  while (1)
  {
    if ((*((unsigned char *)v8 + *(void *)(*a2 - 24)) & 2) != 0) {
      goto LABEL_86;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)&v66, a4, a5);
    if ((SHIBYTE(v67) & 0x80000000) == 0) {
      break;
    }
    uint64_t v13 = *((void *)&v66 + 1);
    if (*((void *)&v66 + 1) == 12 && *(void *)v66 == 0x657275746165463CLL && *(_DWORD *)(v66 + 8) == 1047357764)
    {
LABEL_69:
      kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v10, v11, a5);
      goto LABEL_77;
    }
    if (*((void *)&v66 + 1) == 15)
    {
      if (*(void *)v66 == 0x6C6172746E65433CLL && *(void *)(v66 + 7) == 0x3E74657366664F6CLL)
      {
LABEL_67:
        uint64_t v20 = (std::vector<int> *)&v72;
        goto LABEL_68;
      }
      uint64_t v13 = *((void *)&v66 + 1);
    }
    if (v13 == 10)
    {
      if (*(void *)v66 == 0x7A69536C6F6F503CLL && *(_WORD *)(v66 + 8) == 15973)
      {
LABEL_45:
        uint64_t v20 = (std::vector<int> *)&v75;
LABEL_68:
        kaldi::ReadIntegerVector<int>(a2, 0, v20, 0, 0, 0, 0);
        goto LABEL_77;
      }
      uint64_t v13 = *((void *)&v66 + 1);
    }
    if (v13 == 12)
    {
      if (*(void *)v66 == 0x6965576C6F6F503CLL && *(_DWORD *)(v66 + 8) == 1047816295)
      {
LABEL_70:
        kaldi::Vector<float>::Read((uint64_t)&v69, a2, 0, 0, a5);
        goto LABEL_77;
      }
      uint64_t v13 = *((void *)&v66 + 1);
    }
    if (v13 != 15) {
      goto LABEL_39;
    }
    if (*(void *)v66 != 0x61526E7261654C3CLL || *(void *)(v66 + 7) != 0x3E66656F43657461)
    {
      uint64_t v13 = *((void *)&v66 + 1);
LABEL_39:
      if (v13 != 11) {
        goto LABEL_78;
      }
      if (*(void *)v66 != 0x696C616D726F4E3CLL || *(void *)(v66 + 3) != 0x3E657A696C616D72)
      {
        uint64_t v13 = *((void *)&v66 + 1);
LABEL_78:
        if (v13 == 12)
        {
          uint64_t v7 = (long long *)v66;
          goto LABEL_81;
        }
        goto LABEL_127;
      }
LABEL_66:
      kaldi::ReadBasicType<BOOL>(a2, 0, v9, v11, a5);
      goto LABEL_77;
    }
LABEL_76:
    kaldi::ReadBasicType<float>(a2, 0, (float *)&v68, v11, a5);
LABEL_77:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  switch(HIBYTE(v67))
  {
    case 0xA:
LABEL_5:
      if ((void)v66 != 0x7A69536C6F6F503CLL || WORD4(v66) != 15973) {
        goto LABEL_127;
      }
      goto LABEL_45;
    case 0xB:
      goto LABEL_61;
    case 0xC:
      if ((void)v66 == 0x657275746165463CLL && DWORD2(v66) == 1047357764) {
        goto LABEL_69;
      }
LABEL_50:
      if ((void)v66 == 0x6965576C6F6F503CLL && DWORD2(v66) == 1047816295) {
        goto LABEL_70;
      }
LABEL_54:
      if (HIBYTE(v67) == 11)
      {
LABEL_61:
        if ((void)v66 != 0x696C616D726F4E3CLL || *(void *)((char *)&v66 + 3) != 0x3E657A696C616D72) {
          goto LABEL_127;
        }
        goto LABEL_66;
      }
      if (HIBYTE(v67) != 12) {
        goto LABEL_127;
      }
LABEL_81:
      if (*(void *)v7 != 0x6E6F706D6F432F3CLL || *((_DWORD *)v7 + 2) != 1047817829)
      {
LABEL_127:
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v63, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", 75);
        std::string v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"Unknown token ", 14);
        if (v67 >= 0) {
          uint64_t v57 = &v66;
        }
        else {
          uint64_t v57 = (long long *)v66;
        }
        if (v67 >= 0) {
          uint64_t v58 = HIBYTE(v67);
        }
        else {
          uint64_t v58 = *((void *)&v66 + 1);
        }
        uint64_t v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)v57, v58);
        uint64_t v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)", a typo in config?", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)" (FeatureDim|CentralOffset <vec>|PoolSize <vec>|LearnRateCoef|Normalize)", 72);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v63);
      }
LABEL_86:
      if (*v10 <= 0)
      {
        long long v61 = "feature_dim_ > 0";
        long long v62 = (unsigned char *)(&stru_20 + 48);
        goto LABEL_138;
      }
      uint64_t v27 = v73 - (unsigned char *)v72;
      if (v73 == (unsigned char *)v72)
      {
        long long v61 = "central_offset.size() > 0";
        long long v62 = (unsigned char *)(&stru_20 + 49);
        goto LABEL_138;
      }
      if (v27 >> 2 != v76 - v75)
      {
        long long v61 = "central_offset.size() == pool_size.size()";
        long long v62 = (char *)&stru_20.filesize + 2;
LABEL_138:
        kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", v62, v61, a5);
      }
      int v28 = *(_DWORD *)(a1 + 8) / *v10;
      if (v28 >= 1) {
        int v29 = v28 - 1;
      }
      else {
        int v29 = *(_DWORD *)(a1 + 8) / *v10;
      }
      long long v30 = (int **)(a1 + 96);
      std::vector<int>::resize((std::vector<int> *)(a1 + 96), (int)(v27 >> 2));
      int v31 = (uint64_t *)(a1 + 120);
      std::vector<kaldi::Vector<float>>::resize((uint64_t *)(a1 + 120), (int)(v27 >> 2));
      unint64_t v35 = (unint64_t)v27 >> 2;
      uint64_t v36 = ((unint64_t)v27 >> 2);
      if ((int)v35 >= 1)
      {
        uint64_t v37 = 0;
        int v38 = (v29 >> 1) + 1;
        do
        {
          int v39 = v75;
          int v40 = v75[v37];
          if (v40 >= -1) {
            int v40 = -1;
          }
          (*v30)[v37] = v38 + v72[v37] + v40;
          int v41 = v39[v37];
          if (v41 >= 0) {
            uint64_t v42 = v41;
          }
          else {
            uint64_t v42 = -v41;
          }
          kaldi::Vector<float>::Resize((void **)(*v31 + 24 * v37), v42, 0, v33, v34);
          int v43 = v75[v37];
          if (v43 < 0) {
            int v43 = -v43;
          }
          float v44 = 1.0 / (double)v43;
          kaldi::VectorBase<float>::Set(*v31 + 24 * v37++, v44);
        }
        while (v37 != v36);
      }
      *(_DWORD *)(a1 + kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized<kaldi::nnet1::Quantizable16BitComponentItf>((uint64_t)this - 168) = v68;
      if (v70)
      {
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v63, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", 96);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"Initializing from pool-weight vector", 36);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v63);
        }
        if ((int)v35 < 1)
        {
          int v46 = 0;
        }
        else
        {
          uint64_t v45 = 0;
          int v46 = 0;
          uint64_t v47 = *v31;
          do
          {
            uint64_t v48 = v47 + v45;
            int v49 = *(_DWORD *)(v47 + v45 + 8);
            uint64_t v63 = 0;
            uint64_t v64 = 0;
            uint64_t v65 = 0;
            if (v49 + v46 > v70) {
              kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v34);
            }
            uint64_t v63 = v69 + 4 * v46;
            LODWORD(v64) = v49;
            kaldi::VectorBase<float>::CopyFromVec(v48, (uint64_t)&v63, v32, v33, v34);
            uint64_t v47 = *v31;
            v46 += *(_DWORD *)(*v31 + v45 + 8);
            v45 += 24;
          }
          while (8 * (2 * v36 + v35) != v45);
        }
        if (v46 != v70) {
          kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", (const char *)&stru_20.flags + 2, "num_weights == pool_weight.Dim()", v34);
        }
      }
      if ((int)v35 >= 1)
      {
        uint64_t v50 = 0;
        uint64_t v51 = *v30;
        long long v52 = "offset_[p] >= 0";
        while (1)
        {
          int v54 = *v51++;
          int v53 = v54;
          if (v54 < 0) {
            break;
          }
          if (*(_DWORD *)(*v31 + v50 + 8) + v53 > v28)
          {
            long long v55 = (unsigned char *)(&stru_68 + 3);
            long long v52 = "offset_[p] + weight_[p].Dim() <= num_frames";
            goto LABEL_126;
          }
          v50 += 24;
          if (8 * (2 * v36 + v35) == v50) {
            goto LABEL_117;
          }
        }
        long long v55 = &stru_68.sectname[2];
LABEL_126:
        kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", v55, v52, v34);
      }
LABEL_117:
      if (SHIBYTE(v67) < 0) {
        operator delete((void *)v66);
      }
      kaldi::Vector<float>::Destroy((uint64_t)&v69);
      if (v72)
      {
        uint64_t v73 = v72;
        operator delete(v72);
      }
      if (v75)
      {
        float v76 = v75;
        operator delete(v75);
      }
      return;
    case 0xF:
      if ((void)v66 != 0x6C6172746E65433CLL || *(void *)((char *)&v66 + 7) != 0x3E74657366664F6CLL)
      {
        switch(HIBYTE(v67))
        {
          case 0xA:
            goto LABEL_5;
          case 0xB:
            goto LABEL_61;
          case 0xC:
            goto LABEL_50;
          case 0xF:
            if ((void)v66 != 0x61526E7261654C3CLL || *(void *)((char *)&v66 + 7) != 0x3E66656F43657461) {
              goto LABEL_54;
            }
            goto LABEL_76;
          default:
            goto LABEL_127;
        }
      }
      goto LABEL_67;
    default:
      goto LABEL_127;
  }
}

void sub_F81AC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 185) < 0) {
    operator delete(*(void **)(v1 - 208));
  }
  kaldi::Vector<float>::Destroy(v1 - 176);
  kaldi::nnet1::FramePoolingComponent::InitData(v1 - 176, v1 - 152, v1 - 128);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::FramePoolingComponent::WriteData(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<FeatureDim>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", v8, v9);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<Normalize>", v10, v11);
  kaldi::WriteBasicType<BOOL>(a2, (char)a3, *(unsigned __int8 *)(a1 + 172));
  kaldi::WriteToken(a2, a3, (kaldi *)"<FrameOffset>", v12, v13);
  kaldi::WriteIntegerByteArray<int>(a2, (int)a3, 0, (uint64_t)(*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 2, *(void *)(a1 + 96));
  kaldi::WriteToken(a2, a3, (kaldi *)"<FrameWeight>", v14, v15);
  unint64_t v16 = *(void *)(a1 + 104) - *(void *)(a1 + 96);
  if ((int)(v16 >> 2) >= 1)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 24 * (v16 >> 2);
    do
    {
      kaldi::VectorBase<float>::Write(*(void *)(a1 + 120) + v17, a2, (int)a3);
      v17 += 24;
    }
    while (v18 != v17);
  }
}

uint64_t kaldi::nnet1::FramePoolingComponent::PropagateFnc(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5 = *(_DWORD *)(result + 88);
  if (*(_DWORD *)(a2 + 16) % v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "../subproject/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", (const char *)&stru_B8.size + 1, "in.NumCols() % feature_dim_ == 0", a5);
  }
  if (*(_DWORD *)(a3 + 16) % v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "../subproject/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", (const char *)&stru_B8.size + 2, "out->NumCols() % feature_dim_ == 0", a5);
  }
  uint64_t v7 = result;
  unint64_t v8 = *(void *)(result + 104) - *(void *)(result + 96);
  if ((int)(v8 >> 2) >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = (v8 >> 2);
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v20, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(*(_DWORD *)(v7 + 88) * v10), *(_DWORD *)(v7 + 88));
      kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v20);
      uint64_t v12 = *(void *)(v7 + 120) + 24 * v10;
      if (*(int *)(v12 + 8) >= 1)
      {
        uint64_t v13 = 0;
        do
        {
          float v14 = *(float *)(*(void *)v12 + 4 * v13);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v17, a2, 0, *(_DWORD *)(a2 + 20), (const char *)((v13 + *(_DWORD *)(*(void *)(v7 + 96) + 4 * v10)) * *(_DWORD *)(v7 + 88)), *(_DWORD *)(v7 + 88));
          kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v20, (uint64_t)&v17, 111, v15, v16, v14, 1.0);
          uint64_t v17 = off_262D80;
          long long v18 = 0u;
          long long v19 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v17);
          ++v13;
          uint64_t v12 = *(void *)(v7 + 120) + 24 * v10;
        }
        while (v13 < *(int *)(v12 + 8));
      }
      uint64_t v20 = off_262D80;
      long long v21 = 0u;
      long long v22 = 0u;
      uint64_t result = fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v20);
      ++v10;
    }
    while (v10 != v11);
  }
  return result;
}

void sub_F8534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void (**a14)())
{
  a14 = off_262D80;
  *float v14 = 0u;
  v14[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a14);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::FramePoolingComponent::BackpropagateFnc()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "BackpropagateFnc", "../subproject/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", 244);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::FramePoolingComponent::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  kaldi::ExpectToken(a2, a3, (kaldi *)"<FeatureDim>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 88, v6, v7);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<LearnRateCoef>");
  kaldi::ReadBasicType<float>(a2, a3, (float *)(a1 + 168), v8, v9);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<Normalize>");
  kaldi::ReadBasicType<BOOL>(a2, a3, (char *)(a1 + 172), v10, v11);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<FrameOffset>");
  kaldi::ReadIntegerVector<int>(a2, a3, (std::vector<int> *)(a1 + 96), 0, 0, 0, 0);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<FrameWeight>");
  uint64_t v12 = *(void *)(a1 + 104) - *(void *)(a1 + 96);
  unint64_t v13 = (unint64_t)v12 >> 2;
  std::vector<kaldi::Vector<float>>::resize((uint64_t *)(a1 + 120), (int)(v12 >> 2));
  uint64_t v15 = ((unint64_t)v12 >> 2);
  if ((int)v13 >= 1)
  {
    uint64_t v16 = 0;
    do
    {
      kaldi::Vector<float>::Read(*(void *)(a1 + 120) + v16, a2, a3, 0, v14);
      v16 += 24;
    }
    while (8 * (2 * v15 + v13) != v16);
  }
  int v17 = *(_DWORD *)(a1 + 8);
  int v18 = *(_DWORD *)(a1 + 88);
  int v19 = v17 / v18;
  if (v17 % v18) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", (const char *)&stru_68.addr, "input_dim_ % feature_dim_ == 0", v14);
  }
  int v20 = *(_DWORD *)(a1 + 12);
  if (v20 % v18) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", (const char *)&stru_68.addr + 1, "output_dim_ % feature_dim_ == 0", v14);
  }
  if (v20 / v18 != v13) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", (const char *)&stru_68.addr + 2, "output_dim_ / feature_dim_ == num_pools", v14);
  }
  long long v21 = *(int **)(a1 + 96);
  uint64_t v22 = *(void *)(a1 + 120);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 128) - v22) >> 3) != (uint64_t)(*(void *)(a1 + 104) - (void)v21) >> 2) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", (const char *)&stru_68.addr + 3, "offset_.size() == weight_.size()", v14);
  }
  if ((int)v13 >= 1)
  {
    long long v23 = (_DWORD *)(v22 + 8);
    do
    {
      int v25 = *v21++;
      int v24 = v25;
      if (v25 < 0) {
        kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", (const char *)&stru_68.addr + 7, "offset_[p] >= 0", v14);
      }
      if (v24 + *v23 - 1 >= v19) {
        kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", (const char *)&stru_68.size, "offset_[p] + (weight_[p].Dim()-1) < total_frame", v14);
      }
      v23 += 6;
      --v15;
    }
    while (v15);
  }
}

uint64_t kaldi::nnet1::FramePoolingComponent::NumParams(kaldi::nnet1::FramePoolingComponent *this)
{
  uint64_t v2 = *((void *)this + 15);
  uint64_t v1 = *((void *)this + 16);
  uint64_t result = 0;
  uint64_t v4 = v1 - v2;
  if (v4)
  {
    unint64_t v5 = v4 / 24;
    if (v5 <= 1) {
      unint64_t v5 = 1;
    }
    uint64_t v6 = (int *)(v2 + 8);
    do
    {
      int v7 = *v6;
      v6 += 6;
      uint64_t result = (v7 + result);
      --v5;
    }
    while (v5);
  }
  return result;
}

void kaldi::nnet1::FramePoolingComponent::GetParams(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  uint64_t v10 = a1[15];
  if (a1[16] == v10)
  {
    int v12 = 0;
  }
  else
  {
    unint64_t v11 = 0;
    int v12 = 0;
    uint64_t v13 = 8;
    do
    {
      uint64_t v14 = v10 + v13 - 8;
      int v15 = *(_DWORD *)(v10 + v13);
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      if ((v15 + v12) > *(_DWORD *)(a2 + 8)) {
        kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v9);
      }
      uint64_t v16 = *(void *)a2 + 4 * v12;
      LODWORD(v17) = v15;
      kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v16, v14, v7, v8, v9);
      uint64_t v10 = a1[15];
      v12 += *(_DWORD *)(v10 + v13);
      ++v11;
      v13 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[16] - v10) >> 3) > v11);
  }
  if (v12 != *(_DWORD *)(a2 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetParams", "../subproject/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", (const char *)&stru_68.reserved2 + 3, "offset == wei_copy->Dim()", v9);
  }
}

uint64_t kaldi::nnet1::FramePoolingComponent::SetParams(void *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(void *))(*a1 + 176))(a1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "../subproject/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", (const char *)&stru_68.reserved3 + 3, "wei_src.Dim() == NumParams()", v7);
  }
  uint64_t v8 = a1[15];
  if (a1[16] == v8)
  {
    int v10 = 0;
  }
  else
  {
    unint64_t v9 = 0;
    int v10 = 0;
    uint64_t v11 = 8;
    do
    {
      uint64_t v12 = v8 + v11 - 8;
      int v13 = *(_DWORD *)(v8 + v11);
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      if ((v13 + v10) > *(_DWORD *)(a2 + 8)) {
        kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v7);
      }
      uint64_t v16 = *(void *)a2 + 4 * v10;
      LODWORD(v17) = v13;
      kaldi::VectorBase<float>::CopyFromVec(v12, (uint64_t)&v16, v5, v6, v7);
      uint64_t v8 = a1[15];
      v10 += *(_DWORD *)(v8 + v11);
      ++v9;
      v11 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[16] - v8) >> 3) > v9);
  }
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 176))(a1);
  if (v10 != result) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "../subproject/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", &stru_B8.sectname[5], "offset == NumParams()", v15);
  }
  return result;
}

float kaldi::nnet1::FramePoolingComponent::SumParams(kaldi::nnet1::FramePoolingComponent *this)
{
  uint64_t v1 = *((void *)this + 15);
  if (*((void *)this + 16) == v1) {
    return 0.0;
  }
  uint64_t v3 = 0;
  unint64_t v4 = 0;
  float v5 = 0.0;
  do
  {
    double v6 = kaldi::VectorBase<float>::Sum(v1 + v3);
    float v5 = v5 + *(float *)&v6;
    ++v4;
    uint64_t v1 = *((void *)this + 15);
    v3 += 24;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 16) - v1) >> 3) > v4);
  return v5;
}

void kaldi::nnet1::FramePoolingComponent::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v9 = (void *)(a1 + 144);
  unint64_t v10 = *(void *)(a1 + 104) - *(void *)(a1 + 96);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3) != (int)(v10 >> 2)) {
    std::vector<kaldi::Vector<float>>::resize((uint64_t *)(a1 + 144), (int)((uint64_t)v10 >> 2));
  }
  if ((int)(v10 >> 2) >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v29 = (v10 >> 2);
    uint64_t v12 = *(void *)(a1 + 120);
    do
    {
      kaldi::Vector<float>::Resize((void **)(*(void *)(a1 + 144) + 24 * v11), *(unsigned int *)(v12 + 24 * v11 + 8), 0, a4, a5);
      uint64_t v12 = *(void *)(a1 + 120);
      if (*(int *)(v12 + 24 * v11 + 8) >= 1)
      {
        unint64_t v14 = 0;
        do
        {
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v34, a2, 0, *(_DWORD *)(a2 + 20), (const char *)((v14 + *(_DWORD *)(*(void *)(a1 + 96) + 4 * v11)) * *(_DWORD *)(a1 + 88)), *(_DWORD *)(a1 + 88));
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v31, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(*(_DWORD *)(a1 + 88) * v11), *(_DWORD *)(a1 + 88));
          *((void *)&v36 + 1) = a4;
          *((void *)&v33 + 1) = a4;
          kaldi::CuMatrix<float>::CuMatrix(v30, &v34, 111);
          kaldi::CuMatrixBase<float>::MulElements((uint64_t)v30, (uint64_t)&v31, v15, v16, v17);
          float v23 = kaldi::CuMatrixBase<float>::Sum((uint64_t)v30, v18, v19, v20, v21);
          uint64_t v24 = *v9 + 24 * v11;
          if (v14 >= *(unsigned int *)(v24 + 8)) {
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", stru_68.sectname, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v22);
          }
          *(float *)(*(void *)v24 + 4 * v14) = v23;
          kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v30);
          int v31 = off_262D80;
          long long v32 = 0u;
          long long v33 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v31);
          uint64_t v34 = off_262D80;
          long long v35 = 0u;
          long long v36 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v34);
          ++v14;
          uint64_t v12 = *(void *)(a1 + 120);
        }
        while ((uint64_t)v14 < *(int *)(v12 + 24 * v11 + 8));
      }
      ++v11;
    }
    while (v11 != v29);
    uint64_t v25 = 0;
    do
    {
      kaldi::VectorBase<float>::AddVec<float>(*(void *)(a1 + 120) + v25, *(void *)(a1 + 144) + v25, -(float)(*(float *)(a1 + 168) * *(float *)(a1 + 56)), v13, a4, a5);
      v25 += 24;
    }
    while (24 * v29 != v25);
    if (*(unsigned char *)(a1 + 172))
    {
      uint64_t v26 = 0;
      do
      {
        kaldi::VectorBase<float>::ApplyFloor(*(void *)(a1 + 120) + v26, 0.0);
        uint64_t v27 = *(void *)(a1 + 120) + v26;
        double v28 = kaldi::VectorBase<float>::Sum(v27);
        kaldi::VectorBase<float>::Scale(v27, 1.0 / *(float *)&v28);
        v26 += 24;
      }
      while (24 * v29 != v26);
    }
  }
}

void sub_F8F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void (**a16)(), uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void (**a21)())
{
  a16 = off_262D80;
  *uint64_t v22 = 0u;
  v22[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a16);
  a21 = off_262D80;
  *long long v21 = 0u;
  v21[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a21);
  _Unwind_Resume(a1);
}

__n128 kaldi::nnet1::FramePoolingComponent::SetTrainOptions(kaldi::nnet1::FramePoolingComponent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  if (*((_DWORD *)a2 + 8) != 1)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3, "SetTrainOptions", "../subproject/libquasar/libkaldi/src/nnet/nnet-frame-pooling-component.h", 294);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "the multi subbatch version for this class is not implemented yet");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  __n128 result = *(__n128 *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)((char *)a2 + 23);
  *(__n128 *)((char *)this + 56) = result;
  return result;
}

uint64_t kaldi::nnet1::ParallelComponent::HistoryStateSize(kaldi::nnet1::ParallelComponent *this)
{
  uint64_t v1 = (kaldi::nnet1::Nnet *)*((void *)this + 23);
  uint64_t v2 = (kaldi::nnet1::Nnet *)*((void *)this + 24);
  if (v1 == v2) {
    return 0;
  }
  LODWORD(v3) = 0;
  do
  {
    uint64_t v3 = kaldi::nnet1::Nnet::HistoryStateSize(v1) + v3;
    uint64_t v1 = (kaldi::nnet1::Nnet *)((char *)v1 + 376);
  }
  while (v1 != v2);
  return v3;
}

void *kaldi::nnet1::ParallelComponent::ResetHistoryState(void *result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  float v5 = (void *)result[23];
  for (int i = (void *)result[24]; v5 != i; v5 += 47)
    __n128 result = kaldi::nnet1::Nnet::ResetHistoryStateIfExists(v5, a2, a3, a4, a5);
  return result;
}

uint64_t kaldi::nnet1::ParallelComponent::ResetHistoryState(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 184);
  uint64_t v2 = *(void *)(this + 192);
  while (v1 != v2)
  {
    this = kaldi::nnet1::Nnet::ResetHistoryStateIfExists(v1);
    v1 += 376;
  }
  return this;
}

void kaldi::nnet1::ParallelComponent::GetHistoryState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 96);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  int v17 = v7;
  kaldi::CuMatrix<float>::Resize(a2, v6, v7, 1u, 0);
  unint64_t v9 = *(kaldi::nnet1::Nnet **)(a1 + 184);
  unint64_t v10 = *(kaldi::nnet1::Nnet **)(a1 + 192);
  if (v9 == v10)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      kaldi::nnet1::Nnet::GetHistoricalComponents(v9, &v21);
      uint64_t v12 = v21;
      uint64_t v13 = (uint64_t (**)())v22;
      if (v21)
      {
        *(void *)&long long v22 = v21;
        operator delete(v21);
      }
      if (v12 != v13)
      {
        long long v22 = 0u;
        long long v23 = 0u;
        long long v21 = off_262DC8;
        char v24 = 0;
        kaldi::nnet1::Nnet::GetHistoryState((uint64_t)v9, (uint64_t)&v21, a3);
        if (HIDWORD(v22) != v6) {
          kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "../subproject/libquasar/libkaldi/src/nnet/nnet-parallel-component.h", &stru_B8.segname[4], "comp_history.NumRows() == num_seq", v14);
        }
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v18, a2, 0, *(_DWORD *)(a2 + 20), v11, SDWORD2(v22));
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v18, (uint64_t)&v21, 111, v15, v16);
        uint64_t v18 = off_262D80;
        long long v19 = 0u;
        long long v20 = 0u;
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v18);
        uint64_t v11 = (const char *)(DWORD2(v22) + v11);
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v21);
      }
      unint64_t v9 = (kaldi::nnet1::Nnet *)((char *)v9 + 376);
    }
    while (v9 != v10);
  }
  if (v11 != v17) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "../subproject/libquasar/libkaldi/src/nnet/nnet-parallel-component.h", &stru_B8.segname[9], "count == history_size", v8);
  }
}

void sub_F930C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  unint64_t v4 = off_262D80;
  _OWORD *v2 = 0u;
  v2[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator((void (***)())va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ParallelComponent::GetHistoryState(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  int v21 = v8;
  kaldi::CuVector<float>::Resize(a2, v8, 1u, v9, v10);
  uint64_t v12 = (kaldi::nnet1::Nnet *)a1[23];
  uint64_t v13 = (kaldi::nnet1::Nnet *)a1[24];
  if (v12 == v13)
  {
    int v14 = 0;
  }
  else
  {
    int v14 = 0;
    do
    {
      kaldi::nnet1::Nnet::GetHistoricalComponents(v12, &v23);
      uint64_t v16 = v23;
      uint64_t v15 = v24;
      if (v23)
      {
        char v24 = v23;
        operator delete(v23);
      }
      if (v16 != v15)
      {
        char v24 = 0;
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        long long v23 = off_262E60;
        kaldi::nnet1::Nnet::GetHistoryState(v12, (uint64_t)&v23, a3, a4, v11);
        kaldi::CuSubVector<float>::CuSubVector(v22, a2, v14, v25, v17);
        kaldi::CuVectorBase<float>::CopyFromVec(v22, (uint64_t)&v23, v18, v19, v20);
        v14 += v25;
        kaldi::CuVector<float>::~CuVector(&v23);
      }
      uint64_t v12 = (kaldi::nnet1::Nnet *)((char *)v12 + 376);
    }
    while (v12 != v13);
  }
  if (v14 != v21) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "../subproject/libquasar/libkaldi/src/nnet/nnet-parallel-component.h", (const char *)&stru_B8.size + 1, "count == history_size", v11);
  }
}

void sub_F94D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ParallelComponent::SetHistoryState(void *a1, uint64_t a2, uint64_t a3)
{
  int v7 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  if (*(_DWORD *)(a2 + 16) != v7)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v17, "SetHistoryState", "../subproject/libquasar/libkaldi/src/nnet/nnet-parallel-component.h", 232);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"the ParallelComponent has history size ", 39);
    uint64_t v16 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" , but the input history data has dimension ", 44);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v17);
  }
  uint64_t v8 = (kaldi::nnet1::Nnet *)a1[23];
  uint64_t v9 = (kaldi::nnet1::Nnet *)a1[24];
  if (v8 == v9)
  {
    LODWORD(v10) = 0;
  }
  else
  {
    unint64_t v10 = 0;
    do
    {
      kaldi::nnet1::Nnet::GetHistoricalComponents(v8, &v17);
      uint64_t v11 = v17;
      uint64_t v12 = (void (**)())v18;
      if (v17)
      {
        *(void *)&long long v18 = v17;
        operator delete(v17);
      }
      if (v11 != v12)
      {
        int v13 = kaldi::nnet1::Nnet::HistoryStateSize(v8);
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v17, a2, 0, *(_DWORD *)(a2 + 20), v10, v13);
        kaldi::nnet1::Nnet::SetHistoryState((uint64_t)v8, (uint64_t)&v17, a3, v14, v15);
        int v17 = off_262D80;
        long long v18 = 0u;
        long long v19 = 0u;
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v17);
        unint64_t v10 = (const char *)(v13 + v10);
      }
      uint64_t v8 = (kaldi::nnet1::Nnet *)((char *)v8 + 376);
    }
    while (v8 != v9);
  }
  if (v10 != v7) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "../subproject/libquasar/libkaldi/src/nnet/nnet-parallel-component.h", (const char *)&stru_B8.nreloc, "count == history_size", v6);
  }
}

void sub_F96B0(uint64_t a1, ...)
{
  va_start(va, a1);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void sub_F96C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (**a10)())
{
  a10 = off_262D80;
  *unint64_t v10 = 0u;
  v10[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ParallelComponent::SetHistoryState(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v9 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  if (*(_DWORD *)(a2 + 16) != v9)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v19, "SetHistoryState", "../subproject/libquasar/libkaldi/src/nnet/nnet-parallel-component.h", 251);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"the network has history size ", 29);
    long long v18 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" , but the input history data has dimension ", 44);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v19);
  }
  unint64_t v10 = (kaldi::nnet1::Nnet *)a1[23];
  uint64_t v11 = (kaldi::nnet1::Nnet *)a1[24];
  if (v10 == v11)
  {
    int v12 = 0;
  }
  else
  {
    int v12 = 0;
    do
    {
      kaldi::nnet1::Nnet::GetHistoricalComponents(v10, &v19);
      int v13 = v19;
      uint64_t v14 = v20;
      if (v19)
      {
        long long v20 = v19;
        operator delete(v19);
      }
      if (v13 != v14)
      {
        int v15 = kaldi::nnet1::Nnet::HistoryStateSize(v10);
        kaldi::CuSubVector<float>::CuSubVector(&v19, a2, v12, v15, v16);
        kaldi::nnet1::Nnet::SetHistoryState((uint64_t)v10, (uint64_t)&v19, a3, a4, v17);
        v12 += v15;
      }
      unint64_t v10 = (kaldi::nnet1::Nnet *)((char *)v10 + 376);
    }
    while (v10 != v11);
  }
  if (v12 != v9) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "../subproject/libquasar/libkaldi/src/nnet/nnet-parallel-component.h", (const char *)&stru_B8.reserved3 + 3, "count == history_size", v8);
  }
}

void sub_F9888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::nnet1::ParallelComponent::SetHistoryOptions(kaldi::nnet1::ParallelComponent *this, const kaldi::nnet1::HistoryOptions *a2)
{
  unint64_t v4 = (const void *)(*(uint64_t (**)(kaldi::nnet1::ParallelComponent *))(*(void *)this + 120))(this);
  if (v5)
  {
    long long v6 = *(_OWORD *)(v5 + 8);
    *(_OWORD *)&v11[15] = *(_OWORD *)(v5 + 23);
    *(_OWORD *)uint64_t v11 = v6;
    unint64_t v10 = off_26E7F8;
    int v12 = off_26E818;
    int v7 = *((_DWORD *)v5 + 13);
    int v13 = *((_DWORD *)a2 + 2);
    int v14 = v7;
    (*(void (**)(kaldi::nnet1::ParallelComponent *, void (***)(kaldi::nnet1::RecurrentNnetTrainOptions *__hidden)))(*(void *)this + 104))(this, &v10);
    *((_DWORD *)this + 10) = *((_DWORD *)a2 + 2);
    int v9 = (kaldi::nnet1::Nnet *)*((void *)this + 23);
    uint64_t v8 = (kaldi::nnet1::Nnet *)*((void *)this + 24);
    while (v9 != v8)
    {
      kaldi::nnet1::Nnet::SetHistoryOptions(v9, a2, 1);
      int v9 = (kaldi::nnet1::Nnet *)((char *)v9 + 376);
    }
    kaldi::nnet1::RecurrentNnetTrainOptions::~RecurrentNnetTrainOptions((kaldi::nnet1::RecurrentNnetTrainOptions *)&v10);
  }
  else if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10, "SetHistoryOptions", "../subproject/libquasar/libkaldi/src/nnet/nnet-parallel-component.h", 492);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Inconsistent return type: RecurrentBaseComponent::GetTrainOptions() can not be cast to RecurrentNnetTrainOptions", 112);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
  }
}

void sub_F9A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::ParallelComponent::SetInternalBoundary(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 184);
  for (uint64_t i = *(void *)(result + 192); v3 != i; v3 += 376)
    __n128 result = kaldi::nnet1::Nnet::SetInternalBoundary(v3, a2, a3);
  return result;
}

void kaldi::nnet1::ParallelComponent::SetTrainOptions(kaldi::nnet1::ParallelComponent *this, const kaldi::nnet1::NnetTrainOptions *lpsrc)
{
  if (*((_DWORD *)lpsrc + 8) == 1)
  {
    *((unsigned char *)this + 178) = *((unsigned char *)lpsrc + 38);
    {
      operator new();
    }
    operator new();
  }
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "SetTrainOptions", "../subproject/libquasar/libkaldi/src/nnet/nnet-parallel-component.h", 510);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "the multi subbatch version for this class is not implemented yet");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
}

void sub_F9D00(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ParallelComponent::Copy(kaldi::nnet1::ParallelComponent *this)
{
}

void sub_F9D90()
{
}

uint64_t kaldi::nnet1::ParallelComponent::GetType(kaldi::nnet1::ParallelComponent *this)
{
  return 2055;
}

void kaldi::nnet1::ParallelComponent::InitData(kaldi::nnet1::ParallelComponent *this, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  long long v55 = 0;
  std::string v56 = 0;
  unint64_t v57 = 0;
  long long v52 = 0;
  int v53 = 0;
  unint64_t v54 = 0;
  int v7 = a2 + 4;
  int v49 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
LABEL_2:
  if ((*((unsigned char *)v7 + *(void *)(*a2 - 24)) & 2) == 0)
  {
    kaldi::ReadToken(a2, 0, (uint64_t)&v49, a4, a5);
    if ((SHIBYTE(v51) & 0x80000000) == 0)
    {
      if (HIBYTE(v51) != 17)
      {
        if (HIBYTE(v51) == 20)
        {
          BOOL v10 = v49 == (void *)0x4E64657473654E3CLL && v50 == 0x6E656C694674656ELL;
          if (v10 && v51 == 1046834529) {
            goto LABEL_14;
          }
        }
LABEL_98:
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__s, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-parallel-component.h", 73);
        uint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s, (uint64_t)"Unknown token ", 14);
        if (v51 >= 0) {
          int v43 = &v49;
        }
        else {
          int v43 = (void **)v49;
        }
        if (v51 >= 0) {
          uint64_t v44 = HIBYTE(v51);
        }
        else {
          uint64_t v44 = v50;
        }
        uint64_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v43, v44);
        int v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)", typo in config?", 17);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)" (NestedNnetFilename|NestedNnetProto)", 37);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__s);
      }
      uint64_t v25 = (uint64_t *)&v49;
      goto LABEL_54;
    }
    if (v50 == 17)
    {
      uint64_t v25 = v49;
LABEL_54:
      uint64_t v26 = *v25;
      uint64_t v27 = (void *)v25[1];
      int v28 = *((unsigned __int8 *)v25 + 16);
      if (v26 != 0x4E64657473654E3CLL || v27 != (void *)0x6F746F725074656ELL || v28 != 62) {
        goto LABEL_98;
      }
      while (1)
      {
        if ((*((unsigned char *)v7 + *(void *)(*a2 - 24)) & 2) != 0) {
          goto LABEL_89;
        }
        __s[0] = 0;
        __s[1] = 0;
        std::string::size_type v48 = 0;
        kaldi::ReadToken(a2, 0, (uint64_t)__s, v8, v9);
        if (SHIBYTE(v48) < 0)
        {
          long long v32 = __s[1];
          if (__s[1] != (unsigned char *)&dword_10 + 2)
          {
            int v38 = v56;
            if ((unint64_t)v56 < v57) {
              goto LABEL_81;
            }
            goto LABEL_83;
          }
          int v31 = (std::string::value_type **)__s[0];
        }
        else
        {
          if (SHIBYTE(v48) != 18)
          {
            int v38 = v56;
            if ((unint64_t)v56 < v57) {
              goto LABEL_79;
            }
            goto LABEL_83;
          }
          int v31 = __s;
        }
        long long v33 = *v31;
        uint64_t v34 = v31[1];
        int v35 = *((unsigned __int16 *)v31 + 8);
        if (v33 == (std::string::value_type *)0x64657473654E2F3CLL
          && v34 == (std::string::value_type *)0x746F725074656E4ELL
          && v35 == 15983)
        {
          char v41 = 0;
          if ((v48 & 0x8000000000000000) == 0) {
            goto LABEL_85;
          }
LABEL_88:
          operator delete(__s[0]);
          if ((v41 & 1) == 0) {
            goto LABEL_89;
          }
        }
        else
        {
          int v38 = v56;
          if ((unint64_t)v56 < v57)
          {
            if (SHIBYTE(v48) < 0)
            {
              long long v32 = __s[1];
LABEL_81:
              std::string::__init_copy_ctor_external(v38, __s[0], (std::string::size_type)v32);
            }
            else
            {
LABEL_79:
              long long v39 = *(_OWORD *)__s;
              v38->__r_.__value_.__r.__words[2] = v48;
              *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v39;
            }
            uint64_t v40 = (uint64_t)&v38[1];
            goto LABEL_84;
          }
LABEL_83:
          uint64_t v40 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v55, (long long *)__s);
LABEL_84:
          std::string v56 = (std::string *)v40;
          char v41 = 1;
          if ((v48 & 0x8000000000000000) != 0) {
            goto LABEL_88;
          }
LABEL_85:
          if ((v41 & 1) == 0) {
            goto LABEL_89;
          }
        }
      }
    }
    if (v50 != 20) {
      goto LABEL_98;
    }
    BOOL v23 = *v49 == 0x4E64657473654E3CLL && v49[1] == 0x6E656C694674656ELL;
    if (!v23 || *((_DWORD *)v49 + 4) != 1046834529) {
      goto LABEL_98;
    }
    while (1)
    {
LABEL_14:
      if ((*((unsigned char *)v7 + *(void *)(*a2 - 24)) & 2) != 0)
      {
LABEL_89:
        std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
        goto LABEL_2;
      }
      __s[0] = 0;
      __s[1] = 0;
      std::string::size_type v48 = 0;
      kaldi::ReadToken(a2, 0, (uint64_t)__s, v8, v9);
      if (SHIBYTE(v48) < 0)
      {
        int v13 = __s[1];
        if (__s[1] != (unsigned char *)&dword_14 + 1)
        {
          long long v19 = v53;
          if ((unint64_t)v53 < v54) {
            goto LABEL_33;
          }
          goto LABEL_35;
        }
        int v12 = (std::string::value_type **)__s[0];
      }
      else
      {
        if (SHIBYTE(v48) != 21)
        {
          long long v19 = v53;
          if ((unint64_t)v53 < v54) {
            goto LABEL_31;
          }
          goto LABEL_35;
        }
        int v12 = __s;
      }
      int v14 = *v12;
      int v15 = v12[1];
      uint64_t v16 = *(uint64_t *)((char *)v12 + 13);
      if (v14 == (std::string::value_type *)0x64657473654E2F3CLL
        && v15 == (std::string::value_type *)0x656C694674656E4ELL
        && v16 == 0x3E656D616E656C69)
      {
        char v22 = 0;
        if ((v48 & 0x8000000000000000) == 0) {
          goto LABEL_38;
        }
LABEL_37:
        operator delete(__s[0]);
        goto LABEL_38;
      }
      long long v19 = v53;
      if ((unint64_t)v53 < v54)
      {
        if (SHIBYTE(v48) < 0)
        {
          int v13 = __s[1];
LABEL_33:
          std::string::__init_copy_ctor_external(v19, __s[0], (std::string::size_type)v13);
        }
        else
        {
LABEL_31:
          long long v20 = *(_OWORD *)__s;
          v19->__r_.__value_.__r.__words[2] = v48;
          *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
        }
        uint64_t v21 = (uint64_t)&v19[1];
        goto LABEL_36;
      }
LABEL_35:
      uint64_t v21 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v52, (long long *)__s);
LABEL_36:
      int v53 = (std::string *)v21;
      char v22 = 1;
      if ((v48 & 0x8000000000000000) != 0) {
        goto LABEL_37;
      }
LABEL_38:
      if ((v22 & 1) == 0) {
        goto LABEL_89;
      }
    }
  }
  if ((v56 != v55) == (v53 != v52)) {
    kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-parallel-component.h", (const char *)&stru_20.fileoff + 6, "(nested_nnet_proto.size() > 0) ^ (nested_nnet_filename.size() > 0)", a5);
  }
  if (v53 != v52) {
    kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)__s);
  }
  if (v56 != v55) {
    kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)__s);
  }
  kaldi::nnet1::ParallelComponent::CheckNetworkDimensions((uint64_t *)this, (uint64_t)a2, a3, a4, a5);
  if (SHIBYTE(v51) < 0) {
    operator delete(v49);
  }
  __s[0] = (std::string::value_type *)&v52;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__s);
  __s[0] = (std::string::value_type *)&v55;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__s);
}

void sub_FA3DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v16 - 128) = v15;
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v16 - 137) < 0) {
    operator delete(*(void **)(v16 - 160));
  }
  std::string __p = (void *)(v16 - 136);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = (void *)(v16 - 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_FA3E8()
{
}

void sub_FA3FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v16 - 104) = v15;
  if (a15 < 0) {
    operator delete(a10);
  }
  JUMPOUT(0xFA428);
}

void sub_FA408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  if (*(char *)(v10 - 137) < 0) {
    operator delete(*(void **)(v10 - 160));
  }
  a10 = (void **)(v10 - 136);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 - 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void sub_FA410()
{
}

uint64_t *kaldi::nnet1::ParallelComponent::ReadData(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::ExpectToken(a2, a3, (kaldi *)"<NestedNnetCount>");
  int v20 = 0;
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v20, v8, v9);
  std::vector<kaldi::nnet1::Nnet>::resize(a1 + 23, v20);
  if (v20 >= 1)
  {
    uint64_t v10 = 0;
    for (uint64_t i = 0; i < v20; ++i)
    {
      kaldi::ExpectToken(a2, a3, (kaldi *)"<NestedNnet>");
      int v19 = 0;
      kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v19, v12, v13);
      kaldi::nnet1::Nnet::Read((uint64_t **)(a1[23] + v10), a2, a3, a4);
      v10 += 376;
    }
  }
  kaldi::ExpectToken(a2, a3, (kaldi *)"</ParallelComponent>");
  return kaldi::nnet1::ParallelComponent::CheckNetworkDimensions(a1, v14, v15, v16, v17);
}

void *kaldi::nnet1::ParallelComponent::WriteData(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v9 = 0x51B3BEA3677D46CFLL * ((uint64_t)(*(void *)(a1 + 192) - *(void *)(a1 + 184)) >> 3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<NestedNnetCount>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  if ((int)v9 >= 1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 376 * v9;
    int v14 = 1;
    do
    {
      kaldi::WriteToken(a2, a3, (kaldi *)"<NestedNnet>", v10, v11);
      kaldi::WriteBasicType<int>(a2, (int)a3);
      kaldi::nnet1::Nnet::Write((uint64_t *)(*(void *)(a1 + 184) + v12), a2, (uint64_t)a3, a4, v15);
      v12 += 376;
      ++v14;
    }
    while (v13 != v12);
  }

  return kaldi::WriteToken(a2, a3, (kaldi *)"</ParallelComponent>", v10, v11);
}

uint64_t kaldi::nnet1::ParallelComponent::NumParams(kaldi::nnet1::ParallelComponent *this)
{
  uint64_t v1 = (kaldi::nnet1::Nnet *)*((void *)this + 23);
  uint64_t v2 = (kaldi::nnet1::Nnet *)*((void *)this + 24);
  if (v1 == v2) {
    return 0;
  }
  LODWORD(v3) = 0;
  do
  {
    uint64_t v3 = kaldi::nnet1::Nnet::NumParams(v1) + v3;
    uint64_t v1 = (kaldi::nnet1::Nnet *)((char *)v1 + 376);
  }
  while (v1 != v2);
  return v3;
}

uint64_t kaldi::nnet1::ParallelComponent::CountZeroCorr(uint64_t this, int *a2, int *a3, uint64_t a4, const char *a5)
{
  *a2 = 0;
  *a3 = 0;
  float v5 = *(kaldi::nnet1::Nnet **)(this + 184);
  for (i = *(kaldi::nnet1::Nnet **)(this + 192); v5 != i; float v5 = (kaldi::nnet1::Nnet *)((char *)v5 + 376))
  {
    if ((int)((*((void *)v5 + 1) - *(void *)v5) >> 3) >= 1)
    {
      int v9 = 0;
      do
      {
        this = kaldi::nnet1::Nnet::IsComponentFrozen(v5, v9, (uint64_t)a3, a4, a5);
        if ((this & 1) == 0)
        {
          Component = (const void *)kaldi::nnet1::Nnet::GetComponent(v5, v9, (uint64_t)a3, a4, a5);
          this = (*(uint64_t (**)(const void *))(*(void *)Component + 32))(Component);
          if (this)
          {
            uint64_t v12 = 0;
            this = (*(uint64_t (**)(void *, char *, uint64_t *))(*(void *)v11 + 40))(v11, (char *)&v12 + 4, &v12);
            *a2 += HIDWORD(v12);
            *a3 += v12;
          }
        }
        ++v9;
      }
      while (v9 < (int)((*((void *)v5 + 1) - *(void *)v5) >> 3));
    }
  }
  return this;
}

uint64_t kaldi::nnet1::ParallelComponent::VectorizeWeightsCorrs(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  float v5 = *(kaldi::nnet1::Nnet **)(result + 184);
  for (i = *(kaldi::nnet1::Nnet **)(result + 192); v5 != i; float v5 = (kaldi::nnet1::Nnet *)((char *)v5 + 376))
  {
    if ((int)((*((void *)v5 + 1) - *(void *)v5) >> 3) >= 1)
    {
      int v10 = 0;
      do
      {
        Component = (const void *)kaldi::nnet1::Nnet::GetComponent(v5, v10, a3, a4, a5);
        __n128 result = (*(uint64_t (**)(const void *))(*(void *)Component + 32))(Component);
        if (result)
        {
          __n128 result = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 48))(v12, a2, a3, a4);
        }
        ++v10;
      }
      while (v10 < (int)((*((void *)v5 + 1) - *(void *)v5) >> 3));
    }
  }
  return result;
}

uint64_t kaldi::nnet1::ParallelComponent::GetNormalizedLearningRate(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  float v5 = *(kaldi::nnet1::Nnet **)(this + 184);
  long long v6 = *(kaldi::nnet1::Nnet **)(this + 192);
  if (v5 != v6)
  {
    char v8 = 0;
    float v9 = NAN;
    while ((int)((*((void *)v5 + 1) - *(void *)v5) >> 3) < 1)
    {
      float v12 = v9;
LABEL_15:
      float v5 = (kaldi::nnet1::Nnet *)((char *)v5 + 376);
      float v9 = v12;
      if (v5 == v6) {
        return this;
      }
    }
    int v10 = 0;
    while (1)
    {
      uint64_t Component = kaldi::nnet1::Nnet::GetComponent(v5, v10, a3, a4, a5);
      this = (*(uint64_t (**)(uint64_t))(*(void *)Component + 32))(Component);
      if (this)
      {
        this = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)Component + 200))(Component, a2);
        if ((v8 & 1) == 0)
        {
          char v8 = 1;
          goto LABEL_12;
        }
        if (v9 != v12)
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14, "GetNormalizedLearningRate", "../subproject/libquasar/libkaldi/src/nnet/nnet-parallel-component.h", 321);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Two different learning rates: ", 30);
          uint64_t v13 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" ", 1);
          std::ostream::operator<<();
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
        }
        char v8 = 1;
      }
      float v12 = v9;
LABEL_12:
      ++v10;
      float v9 = v12;
      if (v10 >= (int)((*((void *)v5 + 1) - *(void *)v5) >> 3)) {
        goto LABEL_15;
      }
    }
  }
  return this;
}

uint64_t kaldi::nnet1::ParallelComponent::GetParams(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  int v7 = (kaldi::nnet1::Nnet *)a1[23];
  char v8 = (kaldi::nnet1::Nnet *)a1[24];
  if (v7 == v8)
  {
    int v9 = 0;
  }
  else
  {
    int v9 = 0;
    do
    {
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      kaldi::nnet1::Nnet::GetParams(v7, (uint64_t)&v19);
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v16 = 0;
      if ((v20 + v9) > *(_DWORD *)(a2 + 8)) {
        kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v12);
      }
      uint64_t v16 = *(void *)a2 + 4 * v9;
      LODWORD(v17) = v20;
      kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v16, (uint64_t)&v19, v10, v11, v12);
      int v13 = v20;
      kaldi::Vector<float>::Destroy((uint64_t)&v19);
      v9 += v13;
      int v7 = (kaldi::nnet1::Nnet *)((char *)v7 + 376);
    }
    while (v7 != v8);
  }
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 176))(a1);
  if (v9 != result) {
    kaldi::KaldiAssertFailure_((kaldi *)"GetParams", "../subproject/libquasar/libkaldi/src/nnet/nnet-parallel-component.h", (const char *)&stru_108.reserved2 + 2, "offset == NumParams()", v15);
  }
  return result;
}

void sub_FACA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ParallelComponent::SetParams(void *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(void *))(*a1 + 176))(a1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "../subproject/libquasar/libkaldi/src/nnet/nnet-parallel-component.h", (const char *)&stru_108.reserved3 + 2, "wei_src.Dim() == NumParams()", v5);
  }
  long long v6 = (kaldi::nnet1::Nnet *)a1[23];
  int v7 = (kaldi::nnet1::Nnet *)a1[24];
  if (v6 == v7)
  {
    int v11 = 0;
  }
  else
  {
    int v8 = 0;
    do
    {
      int v9 = kaldi::nnet1::Nnet::NumParams(v6);
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      int v11 = v9 + v8;
      if ((v9 + v8) > *(_DWORD *)(a2 + 8)) {
        kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v10);
      }
      uint64_t v14 = *(void *)a2 + 4 * v8;
      LODWORD(v15) = v9;
      kaldi::nnet1::Nnet::SetParams(v6, (uint64_t)&v14);
      long long v6 = (kaldi::nnet1::Nnet *)((char *)v6 + 376);
      int v8 = v11;
    }
    while (v6 != v7);
  }
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 176))(a1);
  if (v11 != result) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "../subproject/libquasar/libkaldi/src/nnet/nnet-parallel-component.h", &stru_158.sectname[5], "offset == NumParams()", v13);
  }
  return result;
}

float kaldi::nnet1::ParallelComponent::SumParams(kaldi::nnet1::ParallelComponent *this)
{
  uint64_t v1 = (kaldi::nnet1::Nnet *)*((void *)this + 23);
  uint64_t v2 = (kaldi::nnet1::Nnet *)*((void *)this + 24);
  float v3 = 0.0;
  while (v1 != v2)
  {
    float v3 = v3 + kaldi::nnet1::Nnet::SumParams(v1);
    uint64_t v1 = (kaldi::nnet1::Nnet *)((char *)v1 + 376);
  }
  return v3;
}

uint64_t kaldi::nnet1::ParallelComponent::Info@<X0>(kaldi::nnet1::ParallelComponent *this@<X0>, std::string *a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  if (*((void *)this + 24) != *((void *)this + 23))
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"nested_network #", 16);
      ++v5;
      long long v6 = (void *)std::ostream::operator<<();
      int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"{\n", 2);
      kaldi::nnet1::Nnet::Info((uint64_t *)__p, (kaldi::nnet1::Nnet *)(*((void *)this + 23) + v4));
      if ((v17 & 0x80u) == 0) {
        int v8 = __p;
      }
      else {
        int v8 = (void **)__p[0];
      }
      if ((v17 & 0x80u) == 0) {
        uint64_t v9 = v17;
      }
      else {
        uint64_t v9 = (uint64_t)__p[1];
      }
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"}\n", 2);
      if ((char)v17 < 0) {
        operator delete(__p[0]);
      }
      v4 += 376;
    }
    while (0x51B3BEA3677D46CFLL * ((uint64_t)(*((void *)this + 24) - *((void *)this + 23)) >> 3) > v5);
  }
  std::stringbuf::str();
  uint64_t v11 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  int v12 = (char)v11;
  std::string::size_type v13 = (std::string::size_type)a2 + v11;
  if (v12 >= 0)
  {
    std::string::size_type v14 = (std::string::size_type)a2;
  }
  else
  {
    std::string::size_type v13 = a2->__r_.__value_.__r.__words[0] + a2->__r_.__value_.__l.__size_;
    std::string::size_type v14 = a2->__r_.__value_.__r.__words[0];
  }
  std::string::erase(a2, ~v14 + v13, 1uLL);
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_FB0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (*(char *)(v5 + 23) < 0) {
    operator delete(*(void **)v5);
  }
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ParallelComponent::InfoGradient@<X0>(kaldi::nnet1::ParallelComponent *this@<X0>, std::string *a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  if (*((void *)this + 24) != *((void *)this + 23))
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"nested_gradient #", 17);
      ++v5;
      long long v6 = (void *)std::ostream::operator<<();
      int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"{\n", 2);
      kaldi::nnet1::Nnet::InfoGradient((kaldi::nnet1::Nnet *)(*((void *)this + 23) + v4), __p);
      if ((v17 & 0x80u) == 0) {
        int v8 = __p;
      }
      else {
        int v8 = (void **)__p[0];
      }
      if ((v17 & 0x80u) == 0) {
        uint64_t v9 = v17;
      }
      else {
        uint64_t v9 = (uint64_t)__p[1];
      }
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"}\n", 2);
      if ((char)v17 < 0) {
        operator delete(__p[0]);
      }
      v4 += 376;
    }
    while (0x51B3BEA3677D46CFLL * ((uint64_t)(*((void *)this + 24) - *((void *)this + 23)) >> 3) > v5);
  }
  std::stringbuf::str();
  uint64_t v11 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  int v12 = (char)v11;
  std::string::size_type v13 = (std::string::size_type)a2 + v11;
  if (v12 >= 0)
  {
    std::string::size_type v14 = (std::string::size_type)a2;
  }
  else
  {
    std::string::size_type v13 = a2->__r_.__value_.__r.__words[0] + a2->__r_.__value_.__l.__size_;
    std::string::size_type v14 = a2->__r_.__value_.__r.__words[0];
  }
  std::string::erase(a2, ~v14 + v13, 1uLL);
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_FB35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (*(char *)(v5 + 23) < 0) {
    operator delete(*(void **)v5);
  }
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ParallelComponent::InfoPropagate(kaldi::nnet1::ParallelComponent *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  if (*((void *)this + 24) != *((void *)this + 23))
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"nested_propagate #", 18);
      ++v3;
      uint64_t v4 = (void *)std::ostream::operator<<();
      uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"{\n", 2);
      kaldi::nnet1::Nnet::InfoPropagate((kaldi::nnet1::Nnet *)(*((void *)this + 23) + v2), __p);
      if ((v11 & 0x80u) == 0) {
        long long v6 = __p;
      }
      else {
        long long v6 = (void **)__p[0];
      }
      if ((v11 & 0x80u) == 0) {
        uint64_t v7 = v11;
      }
      else {
        uint64_t v7 = (uint64_t)__p[1];
      }
      int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"}\n", 2);
      if ((char)v11 < 0) {
        operator delete(__p[0]);
      }
      v2 += 376;
    }
    while (0x51B3BEA3677D46CFLL * ((uint64_t)(*((void *)this + 24) - *((void *)this + 23)) >> 3) > v3);
  }
  std::stringbuf::str();
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_FB5B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t kaldi::nnet1::ParallelComponent::InfoBackPropagate(kaldi::nnet1::ParallelComponent *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  if (*((void *)this + 24) != *((void *)this + 23))
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"nested_backpropagate #", 22);
      ++v3;
      uint64_t v4 = (void *)std::ostream::operator<<();
      uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"{\n", 2);
      kaldi::nnet1::Nnet::InfoBackPropagate((kaldi::nnet1::Nnet *)(*((void *)this + 23) + v2), __p);
      if ((v11 & 0x80u) == 0) {
        long long v6 = __p;
      }
      else {
        long long v6 = (void **)__p[0];
      }
      if ((v11 & 0x80u) == 0) {
        uint64_t v7 = v11;
      }
      else {
        uint64_t v7 = (uint64_t)__p[1];
      }
      int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"}\n", 2);
      if ((char)v11 < 0) {
        operator delete(__p[0]);
      }
      v2 += 376;
    }
    while (0x51B3BEA3677D46CFLL * ((uint64_t)(*((void *)this + 24) - *((void *)this + 23)) >> 3) > v3);
  }
  std::stringbuf::str();
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_FB800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t kaldi::nnet1::ParallelComponent::PropagateFnc(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unsigned int v27 = a4;
  uint64_t v5 = *(kaldi::nnet1::Nnet **)(result + 184);
  int v28 = *(kaldi::nnet1::Nnet **)(result + 192);
  if (v5 != v28)
  {
    int v8 = (unsigned char *)result;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)(a3 + 32);
    do
    {
      int v12 = kaldi::nnet1::Nnet::InputDim(v5, a2, a3, a4, a5);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v34, a2, 0, *(_DWORD *)(a2 + 20), v9, v12);
      int v17 = kaldi::nnet1::Nnet::OutputDim(v5, v13, v14, v15, v16);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v31, a3, 0, *(_DWORD *)(a3 + 20), v10, v17);
      *((void *)&v36 + 1) = v11;
      *((void *)&v33 + 1) = v11;
      memset(&v29[1], 0, 24);
      char v30 = 0;
      v29[0] = off_262DC8;
      v29[4] = v11;
      if (v8[178]) {
        kaldi::nnet1::Nnet::Feedforward((uint64_t *)v5, (uint64_t)&v34, (uint64_t)v29, -1, 0);
      }
      else {
        kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>((uint64_t *)v5, (uint64_t)&v34, (uint64_t)v29, v27, v18);
      }
      if (v8[176]) {
        uint64_t v9 = (const char *)(kaldi::nnet1::Nnet::InputDim(v5, v19, v20, v21, v22) + v9);
      }
      if (v8[177])
      {
        kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v31, (uint64_t)v29, 111, v21, v22, 1.0, 1.0);
      }
      else
      {
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v31, (uint64_t)v29, 111, v21, v22);
        uint64_t v10 = (const char *)(kaldi::nnet1::Nnet::OutputDim(v5, v23, v24, v25, v26) + v10);
      }
      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v29);
      int v31 = off_262D80;
      long long v32 = 0u;
      long long v33 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v31);
      uint64_t v34 = off_262D80;
      long long v35 = 0u;
      long long v36 = 0u;
      uint64_t result = fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v34);
      uint64_t v5 = (kaldi::nnet1::Nnet *)((char *)v5 + 376);
    }
    while (v5 != v28);
  }
  return result;
}

void sub_FBA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void (**a22)())
{
  a22 = off_262D80;
  *char v22 = 0u;
  v22[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a22);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ParallelComponent::BackpropagateFnc(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  if (a5) {
    uint64_t v6 = a5;
  }
  else {
    uint64_t v6 = a4;
  }
  uint64_t v7 = *(kaldi::nnet1::Nnet **)(result + 184);
  unsigned int v27 = *(kaldi::nnet1::Nnet **)(result + 192);
  if (v7 != v27)
  {
    uint64_t v10 = result;
    uint64_t v11 = 0;
    int v12 = 0;
    uint64_t v13 = *(void *)(v6 + 32);
    do
    {
      int v14 = kaldi::nnet1::Nnet::OutputDim(v7, a2, a3, a4, (const char *)a5);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v34, a4, 0, *(_DWORD *)(a4 + 20), v12, v14);
      *((void *)&v36 + 1) = v13;
      if (a5)
      {
        int v19 = kaldi::nnet1::Nnet::InputDim(v7, v15, v16, v17, v18);
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v31, a5, 0, *(_DWORD *)(a5 + 20), v11, v19);
        *((void *)&v33 + 1) = v13;
        memset(&v29[1], 0, 24);
        char v30 = 0;
        v29[0] = off_262DC8;
        v29[4] = v13;
        kaldi::nnet1::Nnet::Backpropagate((void ***)v7, (uint64_t)&v34, (uint64_t)v29, a6, v20);
        if (*(unsigned char *)(v10 + 176)) {
          kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v31, (uint64_t)v29, 111, v21, v22);
        }
        else {
          kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v31, (uint64_t)v29, 111, v21, v22, 1.0, 1.0);
        }
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v29);
        int v31 = off_262D80;
        long long v32 = 0u;
        long long v33 = 0u;
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v31);
      }
      else
      {
        kaldi::nnet1::Nnet::Backpropagate((void ***)v7, (uint64_t)&v34, 0, a6, v18);
      }
      if (*(unsigned char *)(v10 + 176)) {
        uint64_t v11 = (const char *)(kaldi::nnet1::Nnet::InputDim(v7, v23, v24, v25, v26) + v11);
      }
      if (!*(unsigned char *)(v10 + 177)) {
        int v12 = (const char *)(kaldi::nnet1::Nnet::OutputDim(v7, v23, v24, v25, v26) + v12);
      }
      uint64_t v34 = off_262D80;
      long long v35 = 0u;
      long long v36 = 0u;
      uint64_t result = fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v34);
      uint64_t v7 = (kaldi::nnet1::Nnet *)((char *)v7 + 376);
    }
    while (v7 != v27);
  }
  return result;
}

void sub_FBCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void (**a22)())
{
  a22 = off_262D80;
  *char v22 = 0u;
  v22[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a22);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::ParallelComponent::SetGradientNormalization(void *result, uint64_t a2, float a3)
{
  unint64_t v3 = (void *)result[23];
  if (v3 != (void *)result[24])
  {
    uint64_t v6 = result;
    do
    {
      uint64_t result = kaldi::nnet1::Nnet::SetGradientNormalization(v3, a2, 0, 0, a3);
      v3 += 47;
    }
    while (v3 != (void *)v6[24]);
  }
  return result;
}

void kaldi::nnet1::ParallelComponent::UpdateWeights(kaldi::nnet1::ParallelComponent *this, void *a2, uint64_t a3)
{
  for (uint64_t i = (kaldi::nnet1::Nnet *)*((void *)this + 23);
        i != *((kaldi::nnet1::Nnet **)this + 24);
        uint64_t i = (kaldi::nnet1::Nnet *)((char *)i + 376))
  {
    kaldi::nnet1::Nnet::Update(i, a2, a3);
  }
}

void kaldi::nnet1::ParallelComponent::CopyQuantized8Bit(kaldi::nnet1::ParallelComponent *this)
{
}

void sub_FBE98()
{
}

void kaldi::nnet1::ParallelComponent::CopyQuantized16Bit(kaldi::nnet1::ParallelComponent *this)
{
}

void sub_FBF3C()
{
}

void non-virtual thunk to'kaldi::nnet1::ParallelComponent::CopyQuantized8Bit(kaldi::nnet1::ParallelComponent *this)
{
}

void non-virtual thunk to'kaldi::nnet1::ParallelComponent::CopyQuantized16Bit(kaldi::nnet1::ParallelComponent *this)
{
}

void virtual thunk to'kaldi::nnet1::ParallelComponent::Copy(kaldi::nnet1::ParallelComponent *this)
{
  kaldi::nnet1::ParallelComponent::Copy((kaldi::nnet1::ParallelComponent *)((char *)this
                                                                          + *(void *)(*(void *)this - 32)));
}

uint64_t virtual thunk to'kaldi::nnet1::ParallelComponent::CountZeroCorr(kaldi::nnet1::ParallelComponent *this, int *a2, int *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::ParallelComponent::CountZeroCorr((uint64_t)this + *(void *)(*(void *)this - 56), a2, a3, a4, a5);
}

uint64_t virtual thunk to'kaldi::nnet1::ParallelComponent::VectorizeWeightsCorrs(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::ParallelComponent::VectorizeWeightsCorrs((uint64_t)a1 + *(void *)(*a1 - 64), a2, a3, a4, a5);
}

uint64_t virtual thunk to'kaldi::nnet1::ParallelComponent::Info@<X0>(kaldi::nnet1::ParallelComponent *this@<X0>, std::string *a2@<X8>)
{
  return kaldi::nnet1::ParallelComponent::Info((kaldi::nnet1::ParallelComponent *)((char *)this + *(void *)(*(void *)this - 80)), a2);
}

uint64_t virtual thunk to'kaldi::nnet1::ParallelComponent::InfoGradient@<X0>(kaldi::nnet1::ParallelComponent *this@<X0>, std::string *a2@<X8>)
{
  return kaldi::nnet1::ParallelComponent::InfoGradient((kaldi::nnet1::ParallelComponent *)((char *)this + *(void *)(*(void *)this - 88)), a2);
}

uint64_t virtual thunk to'kaldi::nnet1::ParallelComponent::InfoPropagate(kaldi::nnet1::ParallelComponent *this)
{
  return kaldi::nnet1::ParallelComponent::InfoPropagate((kaldi::nnet1::ParallelComponent *)((char *)this
                                                                                          + *(void *)(*(void *)this - 96)));
}

uint64_t virtual thunk to'kaldi::nnet1::ParallelComponent::InfoBackPropagate(kaldi::nnet1::ParallelComponent *this)
{
  return kaldi::nnet1::ParallelComponent::InfoBackPropagate((kaldi::nnet1::ParallelComponent *)((char *)this
                                                                                              + *(void *)(*(void *)this - 104)));
}

void virtual thunk to'kaldi::nnet1::ParallelComponent::InitData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
}

void *virtual thunk to'kaldi::nnet1::ParallelComponent::WriteData(void *a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::ParallelComponent::WriteData((uint64_t)a1 + *(void *)(*a1 - 120), a2, a3, a4, a5);
}

uint64_t virtual thunk to'kaldi::nnet1::ParallelComponent::PropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::ParallelComponent::PropagateFnc((uint64_t)a1 + *(void *)(*a1 - 128), a2, a3, a4, a5);
}

uint64_t virtual thunk to'kaldi::nnet1::ParallelComponent::BackpropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  return kaldi::nnet1::ParallelComponent::BackpropagateFnc((uint64_t)a1 + *(void *)(*a1 - 144), a2, a3, a4, a5, a6);
}

uint64_t *virtual thunk to'kaldi::nnet1::ParallelComponent::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::ParallelComponent::ReadData((void *)((char *)a1 + *(void *)(*a1 - 176)), a2, a3, a4);
}

uint64_t virtual thunk to'kaldi::nnet1::ParallelComponent::NumParams(kaldi::nnet1::ParallelComponent *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 192);
  uint64_t v2 = (kaldi::nnet1::Nnet *)*((void *)v1 + 23);
  unint64_t v3 = (kaldi::nnet1::Nnet *)*((void *)v1 + 24);
  if (v2 == v3) {
    return 0;
  }
  LODWORD(v4) = 0;
  do
  {
    uint64_t v4 = kaldi::nnet1::Nnet::NumParams(v2) + v4;
    uint64_t v2 = (kaldi::nnet1::Nnet *)((char *)v2 + 376);
  }
  while (v2 != v3);
  return v4;
}

uint64_t virtual thunk to'kaldi::nnet1::ParallelComponent::GetParams(void *a1, uint64_t a2)
{
  return kaldi::nnet1::ParallelComponent::GetParams((void *)((char *)a1 + *(void *)(*a1 - 200)), a2);
}

uint64_t virtual thunk to'kaldi::nnet1::ParallelComponent::SetParams(void *a1, uint64_t a2)
{
  return kaldi::nnet1::ParallelComponent::SetParams((void *)((char *)a1 + *(void *)(*a1 - 208)), a2);
}

uint64_t virtual thunk to'kaldi::nnet1::ParallelComponent::GetNormalizedLearningRate(kaldi::nnet1::ParallelComponent *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::ParallelComponent::GetNormalizedLearningRate((uint64_t)this + *(void *)(*(void *)this - 216), a2, a3, a4, a5);
}

float virtual thunk to'kaldi::nnet1::ParallelComponent::SumParams(kaldi::nnet1::ParallelComponent *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 224);
  uint64_t v2 = (kaldi::nnet1::Nnet *)*((void *)v1 + 23);
  unint64_t v3 = (kaldi::nnet1::Nnet *)*((void *)v1 + 24);
  float v4 = 0.0;
  while (v2 != v3)
  {
    float v4 = v4 + kaldi::nnet1::Nnet::SumParams(v2);
    uint64_t v2 = (kaldi::nnet1::Nnet *)((char *)v2 + 376);
  }
  return v4;
}

void *virtual thunk to'kaldi::nnet1::ParallelComponent::SetGradientNormalization(void *result, uint64_t a2, float a3)
{
  unint64_t v3 = (char *)result + *(void *)(*result - 256);
  for (uint64_t i = (void *)*((void *)v3 + 23); i != *((void **)v3 + 24); i += 47)
    uint64_t result = kaldi::nnet1::Nnet::SetGradientNormalization(i, a2, 0, 0, a3);
  return result;
}

void virtual thunk to'kaldi::nnet1::ParallelComponent::UpdateWeights(kaldi::nnet1::ParallelComponent *this, void *a2, uint64_t a3)
{
  unint64_t v3 = (char *)this + *(void *)(*(void *)this - 272);
  for (uint64_t i = (kaldi::nnet1::Nnet *)*((void *)v3 + 23);
        i != *((kaldi::nnet1::Nnet **)v3 + 24);
        uint64_t i = (kaldi::nnet1::Nnet *)((char *)i + 376))
  {
    kaldi::nnet1::Nnet::Update(i, a2, a3);
  }
}

void virtual thunk to'kaldi::nnet1::ParallelComponent::SetTrainOptions(kaldi::nnet1::ParallelComponent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
}

void kaldi::nnet1::InterpolationComponent::Copy(kaldi::nnet1::InterpolationComponent *this)
{
}

void sub_FC370()
{
}

uint64_t kaldi::nnet1::InterpolationComponent::GetType(kaldi::nnet1::InterpolationComponent *this)
{
  return 1039;
}

void kaldi::nnet1::InterpolationComponent::InitData(uint64_t a1, uint64_t *a2)
{
  uint64_t v23 = 0;
  float v4 = (void **)(a1 + 48);
  *(void *)(a1 + 56) = *(void *)(a1 + 48);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<NumComponents>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v23, v5, v6);
  if ((int)v23 < 1 || (int v7 = *(_DWORD *)(a1 + 8), v7 % (int)v23))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-interpolation-component.h", 106);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v22, "The input dimension is not divisible by the number of components");
    goto LABEL_26;
  }
  if (v7 / (int)v23 != *(_DWORD *)(a1 + 12))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-interpolation-component.h", 109);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v22, "The output dimension does not match the dimension of individual component");
LABEL_26:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
  }
  int v8 = 0;
  do
  {
    kaldi::ExpectToken(a2, 0, (kaldi *)"<ComponentWeight>");
    kaldi::ReadBasicType<float>(a2, 0, (float *)&v23 + 1, v9, v10);
    int v12 = *(char **)(a1 + 56);
    unint64_t v11 = *(void *)(a1 + 64);
    if ((unint64_t)v12 >= v11)
    {
      int v14 = (char *)*v4;
      uint64_t v15 = (v12 - (unsigned char *)*v4) >> 2;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 62) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v17 = v11 - (void)v14;
      if (v17 >> 1 > v16) {
        unint64_t v16 = v17 >> 1;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        int v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 64, v18);
        int v14 = *(char **)(a1 + 48);
        int v12 = *(char **)(a1 + 56);
      }
      else
      {
        int v19 = 0;
      }
      uint64_t v20 = &v19[4 * v15];
      *(_DWORD *)uint64_t v20 = HIDWORD(v23);
      uint64_t v13 = v20 + 4;
      while (v12 != v14)
      {
        int v21 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v20 - 1) = v21;
        v20 -= 4;
      }
      *(void *)(a1 + 48) = v20;
      *(void *)(a1 + 56) = v13;
      *(void *)(a1 + 64) = &v19[4 * v18];
      if (v14) {
        operator delete(v14);
      }
    }
    else
    {
      *(_DWORD *)int v12 = HIDWORD(v23);
      uint64_t v13 = v12 + 4;
    }
    *(void *)(a1 + 56) = v13;
    ++v8;
  }
  while (v8 < (int)v23);
  kaldi::ExpectToken(a2, 0, (kaldi *)"</InterpolationComponent>");
}

void *kaldi::nnet1::InterpolationComponent::WriteData(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<NumComponents>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  if ((a3 & 1) == 0)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
    uint64_t v10 = std::locale::use_facet(&v15, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale(&v15);
    std::ostream::put();
    std::ostream::flush();
  }
  if (*(void *)(a1 + 56) != *(void *)(a1 + 48))
  {
    unint64_t v11 = 0;
    do
    {
      kaldi::WriteToken(a2, a3, (kaldi *)"<ComponentWeight>", v8, v9);
      kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
      if ((a3 & 1) == 0)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
        int v12 = std::locale::use_facet(&v15, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
        std::locale::~locale(&v15);
        std::ostream::put();
        std::ostream::flush();
      }
      ++v11;
    }
    while (v11 < (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 2);
  }
  uint64_t result = kaldi::WriteToken(a2, a3, (kaldi *)"</InterpolationComponent>", v8, v9);
  if ((a3 & 1) == 0)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
    int v14 = std::locale::use_facet(&v15, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    std::locale::~locale(&v15);
    std::ostream::put();
    return (void *)std::ostream::flush();
  }
  return result;
}

void sub_FC814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t kaldi::nnet1::InterpolationComponent::PropagateFnc(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 56) - *(void *)(result + 48);
  if (v3)
  {
    uint64_t v6 = result;
    unint64_t v7 = 0;
    unint64_t v8 = *(int *)(result + 8) / (unint64_t)(v3 >> 2);
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v12, a2, 0, *(_DWORD *)(a2 + 20), (const char *)(v7 * v8), v8);
      if (v7) {
        float v11 = 1.0;
      }
      else {
        float v11 = 0.0;
      }
      kaldi::CuMatrixBase<float>::AddMat(a3, (uint64_t)&v12, 111, v9, v10, *(float *)(*(void *)(v6 + 48) + 4 * v7), v11);
      int v12 = off_262D80;
      long long v13 = 0u;
      long long v14 = 0u;
      uint64_t result = fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v12);
      ++v7;
    }
    while (v7 < (uint64_t)(*(void *)(v6 + 56) - *(void *)(v6 + 48)) >> 2);
  }
  return result;
}

void sub_FC928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (**a10)())
{
  a10 = off_262D80;
  *uint64_t v10 = 0u;
  v10[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::InterpolationComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(void *)(a1 + 56) - *(void *)(a1 + 48);
  if (v5)
  {
    uint64_t v9 = 0;
    unint64_t v10 = *(int *)(a1 + 8) / (unint64_t)(v5 >> 2);
    do
    {
      unint64_t v11 = v9 + 1;
      kaldi::CuSubVector<float>::CuSubVector(v16, a2, v9 * v10, (v9 + 1) * v10 - 1, a5);
      if (v9) {
        float v15 = 1.0;
      }
      else {
        float v15 = 0.0;
      }
      kaldi::CuVectorBase<float>::AddVec(a3, (uint64_t)v16, v12, v13, v14, *(float *)(*(void *)(a1 + 48) + 4 * v9++), v15);
    }
    while (v11 < (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 2);
  }
}

uint64_t kaldi::nnet1::InterpolationComponent::BackpropagateFnc(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(result + 56) - *(void *)(result + 48);
  if (v5)
  {
    uint64_t v8 = result;
    unint64_t v9 = 0;
    uint64_t v10 = *(void *)(a4 + 32);
    unint64_t v11 = *(int *)(result + 8) / (unint64_t)(v5 >> 2);
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v14, a5, 0, *(_DWORD *)(a5 + 20), (const char *)(v9 * v11), v11);
      *((void *)&v16 + 1) = v10;
      kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v14, a4, 111, v12, v13, *(float *)(*(void *)(v8 + 48) + 4 * v9), 0.0);
      long long v14 = off_262D80;
      long long v15 = 0u;
      long long v16 = 0u;
      uint64_t result = fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v14);
      ++v9;
    }
    while (v9 < (uint64_t)(*(void *)(v8 + 56) - *(void *)(v8 + 48)) >> 2);
  }
  return result;
}

void sub_FCB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (**a10)())
{
  a10 = off_262D80;
  *uint64_t v10 = 0u;
  v10[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a10);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::InterpolationComponent::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  unint64_t v9 = *(int *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a4 + 24);
  uint64_t v13 = *(unsigned int *)(a4 + 16);
  _DWORD v27[2] = 0;
  uint64_t v28 = 0;
  v27[0] = off_262E60;
  v27[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v27, v13, 0, a4, a5);
  uint64_t v28 = v12;
  if (*(void *)(a1 + 56) != *(void *)(a1 + 48))
  {
    unint64_t v14 = 0;
    unint64_t v15 = v9 / ((v10 - v11) >> 2);
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v24, a2, 0, *(_DWORD *)(a2 + 20), (const char *)(a3 + v14 * v15), 1);
      *((void *)&v26 + 1) = v12;
      kaldi::CuVectorBase<float>::CopyRowsFromMat((uint64_t)v27, &v24, v16, v17, v18);
      if (v14) {
        float v22 = 1.0;
      }
      else {
        float v22 = 0.0;
      }
      kaldi::CuVectorBase<float>::AddVec(a4, (uint64_t)v27, v19, v20, v21, *(float *)(*(void *)(a1 + 48) + 4 * v14), v22);
      uint64_t v24 = off_262D80;
      long long v25 = 0u;
      long long v26 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v24);
      ++v14;
    }
    while (v14 < (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 2);
  }
  return kaldi::CuVector<float>::~CuVector(v27);
}

void sub_FCCA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::InterpolationComponent::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  *(void *)long long v25 = 0;
  uint64_t v6 = (void **)(a1 + 48);
  *(void *)(a1 + 56) = *(void *)(a1 + 48);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<NumComponents>");
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)v25, v7, v8);
  if (v25[0] < 1 || (int v9 = *(_DWORD *)(a1 + 8), v9 % v25[0]))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24, "ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-interpolation-component.h", 128);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v24, "The input dimension is not divisible by the number of components");
    goto LABEL_26;
  }
  if (v9 / v25[0] != *(_DWORD *)(a1 + 12))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24, "ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-interpolation-component.h", 131);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v24, "The output dimension does not match the dimension of individual component");
LABEL_26:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24);
  }
  int v10 = 0;
  do
  {
    kaldi::ExpectToken(a2, a3, (kaldi *)"<ComponentWeight>");
    kaldi::ReadBasicType<float>(a2, a3, (float *)&v25[1], v11, v12);
    unint64_t v14 = *(char **)(a1 + 56);
    unint64_t v13 = *(void *)(a1 + 64);
    if ((unint64_t)v14 >= v13)
    {
      uint64_t v16 = (char *)*v6;
      uint64_t v17 = (v14 - (unsigned char *)*v6) >> 2;
      unint64_t v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 62) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v19 = v13 - (void)v16;
      if (v19 >> 1 > v18) {
        unint64_t v18 = v19 >> 1;
      }
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v18;
      }
      if (v20)
      {
        int v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 64, v20);
        uint64_t v16 = *(char **)(a1 + 48);
        unint64_t v14 = *(char **)(a1 + 56);
      }
      else
      {
        int v21 = 0;
      }
      float v22 = &v21[4 * v17];
      *(_DWORD *)float v22 = v25[1];
      unint64_t v15 = v22 + 4;
      while (v14 != v16)
      {
        int v23 = *((_DWORD *)v14 - 1);
        v14 -= 4;
        *((_DWORD *)v22 - 1) = v23;
        v22 -= 4;
      }
      *(void *)(a1 + 48) = v22;
      *(void *)(a1 + 56) = v15;
      *(void *)(a1 + 64) = &v21[4 * v20];
      if (v16) {
        operator delete(v16);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v14 = v25[1];
      unint64_t v15 = v14 + 4;
    }
    *(void *)(a1 + 56) = v15;
    ++v10;
  }
  while (v10 < v25[0]);
  kaldi::ExpectToken(a2, a3, (kaldi *)"</InterpolationComponent>");
}

char *kaldi::nnet1::InterpolationComponent::SetComponentWeights(uint64_t a1, uint64_t a2)
{
  uint64_t result = (char *)(a1 + 48);
  if (result != (char *)a2) {
    return std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  return result;
}

void kaldi::nnet1::CompressedWordVecComponent::Copy(kaldi::nnet1::CompressedWordVecComponent *this)
{
}

void sub_FCFF8()
{
  *uint64_t v0 = v1;
  uint64_t v2 = (void *)v0[3];
  if (v2)
  {
    v0[4] = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t kaldi::nnet1::CompressedWordVecComponent::GetType(kaldi::nnet1::CompressedWordVecComponent *this)
{
  return 271;
}

uint64_t kaldi::nnet1::CompressedWordVecComponent::Info(kaldi::nnet1::CompressedWordVecComponent *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
  (*(void (**)(kaldi::nnet1::CompressedWordVecComponent *, void *, void))(*(void *)this + 168))(this, v3, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"\n CompressedWordVec table", 25);
  std::stringbuf::str();
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_FD1AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::CompressedWordVecComponent::WriteData(uint64_t a1, void *a2, int a3, uint64_t a4, const char *a5)
{
  return kaldi::CompressedMatrix::Write((uint64_t *)(a1 + 48), a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::CompressedWordVecComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "../subproject/libquasar/libkaldi/src/nnet/nnet-compressed-word-vec-component.h", &stru_20.segname[10], "in.NumCols() == this->input_dim_", a5);
  }

  return kaldi::CuMatrixBase<float>::ConcatenateVec(a3, (uint64_t *)(a1 + 48), a2, a4, a5);
}

void kaldi::nnet1::CompressedWordVecComponent::ReadData(uint64_t a1, void *a2, int a3, uint64_t a4)
{
}

void kaldi::nnet1::WordVecComponent::Copy(kaldi::nnet1::WordVecComponent *this)
{
}

void sub_FD27C()
{
}

uint64_t kaldi::nnet1::WordVecComponent::GetType(kaldi::nnet1::WordVecComponent *this)
{
  return 268;
}

uint64_t kaldi::nnet1::WordVecComponent::CountZeroCorr(kaldi::nnet1::WordVecComponent *this, int *a2, int *a3)
{
  uint64_t result = (*(uint64_t (**)(kaldi::nnet1::WordVecComponent *))(*(void *)this + 176))(this);
  *a3 = result;
  *a2 = 0;
  if (*((_DWORD *)this + 71))
  {
    uint64_t result = kaldi::CuMatrixBase<float>::CountZeros((uint64_t)this + 264, v7, v8, v9, v10);
    *a2 = result;
  }
  return result;
}

uint64_t kaldi::nnet1::WordVecComponent::Info(kaldi::nnet1::WordVecComponent *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  (*(void (**)(kaldi::nnet1::WordVecComponent *, void *, void))(*(void *)this + 168))(this, v8, 0);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n WordVec table", 15);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 96);
  if ((v7 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v7 & 0x80u) == 0) {
    uint64_t v4 = v7;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  if (v9 < 0) {
    operator delete((void *)v8[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_FD4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::WordVecComponent::InfoGradient@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "\n we don't save intermediate gradient");
}

void kaldi::nnet1::WordVecComponent::InitData(unsigned int *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int v70 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)((char *)&def_5A5E8 + 2), &v69);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)a1[60], &v68);
  int v67 = -1;
  memset(v66, 0, sizeof(v66));
  uint64_t v8 = (int *)(a1 + 62);
  while (2)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) == 0)
    {
      kaldi::ReadToken(a2, 0, (uint64_t)v66, v6, v7);
      if (SHIBYTE(v66[2]) < 0)
      {
        switch((unint64_t)v66[1])
        {
          case 9uLL:
            BOOL v11 = *(void *)v66[0] == 0x6461724778614D3CLL && *((unsigned char *)v66[0] + 8) == 62;
LABEL_12:
            uint64_t v12 = (float *)(a1 + 61);
            if (!v11) {
              goto LABEL_144;
            }
            goto LABEL_82;
          case 0xBuLL:
            BOOL v20 = *(void *)v66[0] == 0x69536261636F563CLL && *(void *)((char *)v66[0] + 3) == 0x3E657A6953626163;
LABEL_86:
            unint64_t v15 = (int *)(a1 + 62);
            if (!v20) {
              goto LABEL_144;
            }
            goto LABEL_88;
          case 0xCuLL:
            if (*(void *)v66[0] != 0x536D6F646E61523CLL || *((_DWORD *)v66[0] + 2) != 1046766949) {
              goto LABEL_101;
            }
LABEL_66:
            unint64_t v15 = &v67;
LABEL_88:
            kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v15, v9, v10);
            goto LABEL_99;
          case 0xDuLL:
            if (*(void *)v66[0] != 0x74536D617261503CLL || *(void *)((char *)v66[0] + 5) != 0x3E7665646474536DLL) {
              goto LABEL_144;
            }
LABEL_81:
            uint64_t v12 = (float *)&v70;
LABEL_82:
            kaldi::ReadBasicType<float>(a2, 0, v12, v9, v10);
            goto LABEL_99;
          case 0xFuLL:
            BOOL v13 = *(void *)v66[0] == 0x61526E7261654C3CLL && *(void *)((char *)v66[0] + 7) == 0x3E66656F43657461;
LABEL_54:
            uint64_t v12 = (float *)(a1 + 65);
            if (!v13) {
              goto LABEL_144;
            }
            goto LABEL_82;
          case 0x10uLL:
            BOOL v23 = *(void *)v66[0] == 0x5372656C6C69463CLL && *((void *)v66[0] + 1) == 0x3E64496C6F626D79;
            unint64_t v15 = (int *)(a1 + 63);
            if (v23) {
              goto LABEL_88;
            }
            if (v66[1] != &dword_C) {
              goto LABEL_144;
            }
LABEL_101:
            int v31 = (void **)v66[0];
            goto LABEL_102;
          case 0x12uLL:
            if (*(void *)v66[0] != 0x6E6569646172473CLL
              || *((void *)v66[0] + 1) != 0x7079546D726F4E74
              || *((_WORD *)v66[0] + 8) != 15973)
            {
              goto LABEL_144;
            }
LABEL_97:
            unsigned int v27 = &v68;
            goto LABEL_98;
          case 0x13uLL:
            if (*(void *)v66[0] != 0x61725474696E493CLL
              || *((void *)v66[0] + 1) != 0x79546D726F66736ELL
              || *(void *)((char *)v66[0] + 11) != 0x3E657079546D726FLL)
            {
              goto LABEL_144;
            }
LABEL_75:
            unsigned int v27 = &v69;
LABEL_98:
            kaldi::ReadToken(a2, 0, (uint64_t)v27, v9, v10);
LABEL_99:
            std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
            continue;
          default:
            goto LABEL_144;
        }
      }
      switch(HIBYTE(v66[2]))
      {
        case 9:
          BOOL v11 = v66[0] == (void *)0x6461724778614D3CLL && LOBYTE(v66[1]) == 62;
          goto LABEL_12;
        case 0xB:
          BOOL v20 = v66[0] == (void *)0x69536261636F563CLL && *(void **)((char *)v66 + 3) == (void *)0x3E657A6953626163;
          goto LABEL_86;
        case 0xC:
          if (v66[0] == (void *)0x536D6F646E61523CLL && LODWORD(v66[1]) == 1046766949) {
            goto LABEL_66;
          }
          int v31 = v66;
          break;
        case 0xD:
          if (v66[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v66 + 5) != (void *)0x3E7665646474536DLL) {
            goto LABEL_144;
          }
          goto LABEL_81;
        case 0xF:
          BOOL v13 = v66[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v66 + 7) == (void *)0x3E66656F43657461;
          goto LABEL_54;
        case 0x10:
          BOOL v14 = v66[0] == (void *)0x5372656C6C69463CLL && v66[1] == (void *)0x3E64496C6F626D79;
          unint64_t v15 = (int *)(a1 + 63);
          if (!v14) {
            goto LABEL_144;
          }
          goto LABEL_88;
        case 0x12:
          if (v66[0] != (void *)0x6E6569646172473CLL
            || v66[1] != (void *)0x7079546D726F4E74
            || LOWORD(v66[2]) != 15973)
          {
            goto LABEL_144;
          }
          goto LABEL_97;
        case 0x13:
          if (v66[0] != (void *)0x61725474696E493CLL
            || v66[1] != (void *)0x79546D726F66736ELL
            || *(void **)((char *)&v66[1] + 3) != (void *)0x3E657079546D726FLL)
          {
            goto LABEL_144;
          }
          goto LABEL_75;
        default:
          goto LABEL_144;
      }
LABEL_102:
      long long v32 = *v31;
      int v33 = *((_DWORD *)v31 + 2);
      if (v32 != (void *)0x6E6F706D6F432F3CLL || v33 != 1047817829)
      {
LABEL_144:
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v62, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-word-vec-component.h", 90);
        long long v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"Unknown token ", 14);
        if (SHIBYTE(v66[2]) >= 0) {
          int v53 = v66;
        }
        else {
          int v53 = (void **)v66[0];
        }
        if (SHIBYTE(v66[2]) >= 0) {
          uint64_t v54 = HIBYTE(v66[2]);
        }
        else {
          uint64_t v54 = (uint64_t)v66[1];
        }
        long long v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v53, v54);
        std::string v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)", a typo in config?", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)" (ParamStddev|LearnRateCoef|VocabSize|RandomSeed|InitTransformType|GradientNormType|MaxGrad)", 92);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v62);
      }
    }
    break;
  }
  if (*v8 <= 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v62, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-word-vec-component.h", 96);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"invalid vocabulary size ", 24);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v62);
  }
  int inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v69);
  a1[60] = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v68);
  if (!inited)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v62, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-word-vec-component.h", 104);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"it doesn't make sense to initialize the word vec as an identify matrix", 70);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v62);
  }
  if (v67 >= 1) {
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v67);
  }
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v62, a3);
  kaldi::CuMatrix<float>::Resize((uint64_t)(a1 + 24), a1[62], a1[64], 1u, 0);
  kaldi::Matrix<float>::Matrix((uint64_t)&v58, a1[62], a1[64], 0, 0);
  int v39 = *v8;
  if (*v8 < 1) {
    goto LABEL_131;
  }
  unsigned int v40 = 0;
  LODWORD(v41) = a1[64];
  do
  {
    if ((int)v41 < 1) {
      goto LABEL_130;
    }
    unint64_t v42 = 0;
    do
    {
      if (inited == 2)
      {
        float v48 = *(float *)&v70;
        kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v62, 0, v36, v37, v38);
        if (v60 <= v40 || v42 >= v59) {
LABEL_143:
        }
          kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)&stru_68.addr, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v38);
        int v46 = (char *)v58 + 4 * (int)(v40 * v61);
        float v47 = v48 * v49;
      }
      else
      {
        if (inited != 1) {
          goto LABEL_128;
        }
        float v43 = *(float *)&v70;
        float v44 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v36, v37, v38);
        if (v60 <= v40 || v42 >= v59) {
          goto LABEL_143;
        }
        int v46 = (char *)v58 + 4 * (int)(v40 * v61);
        float v47 = (v44 + -0.5) * (float)(v43 + v43);
      }
      *(float *)&v46[4 * v42] = v47;
LABEL_128:
      ++v42;
      int64_t v41 = (int)a1[64];
    }
    while ((uint64_t)v42 < v41);
    int v39 = *v8;
LABEL_130:
    ++v40;
  }
  while ((int)v40 < v39);
LABEL_131:
  signed int v51 = a1[63];
  if ((v51 & 0x80000000) == 0)
  {
    if (v51 >= v39) {
      kaldi::KaldiAssertFailure_((kaldi *)"InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-word-vec-component.h", stru_68.segname, "filler_id_ < voc_size_", v38);
    }
    kaldi::MatrixBase<float>::Row((uint64_t)&v58, v51, v38, v57);
    kaldi::VectorBase<float>::SetZero((uint64_t)v57);
  }
  kaldi::CuMatrix<float>::operator=((uint64_t)(a1 + 24), (kaldi::ContextDependency *)&v58);
  kaldi::Matrix<float>::~Matrix((uint64_t)&v58);
  if (__p)
  {
    uint64_t v65 = __p;
    operator delete(__p);
  }
  uint64_t v58 = (void **)&v63;
  std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v58);
  if (SHIBYTE(v66[2]) < 0) {
    operator delete(v66[0]);
  }
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
}

void sub_FDDD4()
{
}

void sub_FDDE0(_Unwind_Exception *a1)
{
  kaldi::Matrix<float>::~Matrix(&v3);
  kaldi::GaussRandomNumber::~GaussRandomNumber((kaldi::GaussRandomNumber *)&v4);
  if (*(char *)(v1 - 169) < 0) {
    operator delete(*(void **)(v1 - 192));
  }
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 113) < 0) {
    operator delete(*(void **)(v1 - 136));
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::WordVecComponent::WriteData(uint64_t a1, void *a2, int a3, int a4)
{
  uint64_t v7 = a1 + 96;
  (*(void (**)(uint64_t))(*(void *)a1 + 168))(a1);

  return kaldi::CuMatrixBase<float>::Write(v7, a2, a3, a4);
}

float *kaldi::nnet1::WordVecComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "../subproject/libquasar/libkaldi/src/nnet/nnet-word-vec-component.h", &stru_B8.segname[9], "in.NumCols() == this->input_dim_", a5);
  }

  return kaldi::CuMatrixBase<float>::ConcatenateVec(a3, a1 + 96, a2, a4, a5);
}

uint64_t kaldi::nnet1::WordVecComponent::ReadData(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (kaldi::Peek(a2, a3) == 60)
  {
    while (1)
    {
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      kaldi::ReadToken(a2, a3, (uint64_t)&v36, v7, v8);
      if ((SHIBYTE(v37) & 0x80000000) == 0) {
        break;
      }
      uint64_t v14 = *((void *)&v36 + 1);
      if (*((void *)&v36 + 1) != 11
        || (*(void *)v36 == 0x69536261636F563CLL ? (BOOL v15 = *(void *)(v36 + 3) == 0x3E657A6953626163) : (BOOL v15 = 0),
            uint64_t v13 = (uint64_t)(a1 + 62),
            !v15))
      {
        if (*((void *)&v36 + 1) == 15)
        {
          BOOL v16 = *(void *)v36 == 0x61526E7261654C3CLL && *(void *)(v36 + 7) == 0x3E66656F43657461;
          uint64_t v17 = (float *)(a1 + 65);
          if (v16) {
            goto LABEL_62;
          }
          uint64_t v14 = *((void *)&v36 + 1);
        }
        if (v14 == 18)
        {
          if (*(void *)v36 == 0x6E6569646172473CLL
            && *(void *)(v36 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v36 + 16) == 15973)
          {
LABEL_67:
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v35 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)__p, v9, v10);
            a1[60] = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
            if (SHIBYTE(v35) < 0) {
              operator delete(__p[0]);
            }
            goto LABEL_63;
          }
          uint64_t v14 = *((void *)&v36 + 1);
        }
        if (v14 == 9)
        {
          BOOL v20 = *(void *)v36 == 0x6461724778614D3CLL && *(unsigned char *)(v36 + 8) == 62;
          uint64_t v17 = (float *)(a1 + 61);
          if (v20) {
            goto LABEL_62;
          }
          uint64_t v14 = *((void *)&v36 + 1);
        }
        if (v14 != 16) {
          goto LABEL_73;
        }
        BOOL v11 = (uint64_t *)v36;
LABEL_37:
        uint64_t v21 = *v11;
        uint64_t v22 = v11[1];
        BOOL v23 = v21 == 0x5372656C6C69463CLL && v22 == 0x3E64496C6F626D79;
        uint64_t v13 = (uint64_t)(a1 + 63);
        if (!v23) {
          goto LABEL_73;
        }
      }
LABEL_42:
      kaldi::ReadBasicType<int>(a2, a3, v13, v9, v10);
LABEL_63:
      if (SHIBYTE(v37) < 0) {
        operator delete((void *)v36);
      }
      if (kaldi::Peek(a2, a3) != 60) {
        goto LABEL_69;
      }
    }
    BOOL v11 = (uint64_t *)&v36;
    switch(HIBYTE(v37))
    {
      case 9:
        goto LABEL_57;
      case 0xB:
        BOOL v12 = (void)v36 == 0x69536261636F563CLL && *(void *)((char *)&v36 + 3) == 0x3E657A6953626163;
        uint64_t v13 = (uint64_t)(a1 + 62);
        if (!v12) {
          goto LABEL_73;
        }
        goto LABEL_42;
      case 0xF:
        BOOL v26 = (void)v36 == 0x61526E7261654C3CLL && *(void *)((char *)&v36 + 7) == 0x3E66656F43657461;
        uint64_t v17 = (float *)(a1 + 65);
        if (!v26) {
          goto LABEL_56;
        }
        break;
      case 0x10:
        goto LABEL_37;
      case 0x12:
        if ((void)v36 == 0x6E6569646172473CLL
          && *((void *)&v36 + 1) == 0x7079546D726F4E74
          && (unsigned __int16)v37 == 15973)
        {
          goto LABEL_67;
        }
        if (HIBYTE(v37) == 16)
        {
          BOOL v11 = (uint64_t *)&v36;
          goto LABEL_37;
        }
LABEL_56:
        if (HIBYTE(v37) != 9) {
          goto LABEL_73;
        }
LABEL_57:
        BOOL v27 = (void)v36 == 0x6461724778614D3CLL && BYTE8(v36) == 62;
        uint64_t v17 = (float *)(a1 + 61);
        if (!v27)
        {
LABEL_73:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-word-vec-component.h", 146);
          char v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
          if (v37 >= 0) {
            int v31 = &v36;
          }
          else {
            int v31 = (long long *)v36;
          }
          if (v37 >= 0) {
            uint64_t v32 = HIBYTE(v37);
          }
          else {
            uint64_t v32 = *((void *)&v36 + 1);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v31, v32);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        return result;
      default:
        goto LABEL_73;
    }
LABEL_62:
    kaldi::ReadBasicType<float>(a2, a3, v17, v9, v10);
    goto LABEL_63;
  }
LABEL_69:
  if ((int)a1[62] <= 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-word-vec-component.h", 151);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"invalid vocabulary size ", 24);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  uint64_t result = kaldi::CuMatrix<float>::Read((uint64_t)(a1 + 24), a2, a3, a4);
  if (a1[29] != a1[62]) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-word-vec-component.h", (const char *)&stru_68.offset + 3, "vec_table_.NumRows() == voc_size_", v29);
  }
  if (a1[28] != a1[64]) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-word-vec-component.h", (const char *)&stru_68.align, "vec_table_.NumCols() == embed_dim_", v29);
  }
  return result;
}

void sub_FE440()
{
}

uint64_t kaldi::nnet1::WordVecComponent::WriteConfig(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<VocabSize>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", v8, v9);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v10, v11);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 240), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v12, v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v14, v15);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FillerSymbolId>", v16, v17);
  return kaldi::WriteBasicType<int>(a2, (int)a3);
}

void sub_FE590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::WordVecComponent::NumParams(kaldi::nnet1::WordVecComponent *this)
{
  return (*((_DWORD *)this + 28) * *((_DWORD *)this + 29));
}

void *kaldi::nnet1::WordVecComponent::GetParams(_DWORD *a1, void **a2)
{
  uint64_t v3 = a1 + 24;
  uint64_t v4 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 1, v5, v6);

  return kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)a2, v3, v7, v8, v9);
}

int *kaldi::nnet1::WordVecComponent::SetParams(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(uint64_t))(*(void *)a1 + 176))(a1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "../subproject/libquasar/libkaldi/src/nnet/nnet-word-vec-component.h", &stru_B8.sectname[3], "wei_src.Dim() == NumParams()", v5);
  }

  return kaldi::CuMatrixBase<float>::CopyRowsFromVec(a1 + 96, (char **)a2);
}

float kaldi::nnet1::WordVecComponent::SumParams(kaldi::nnet1::WordVecComponent *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::CuMatrixBase<float>::Sum((uint64_t)this + 96, a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::WordVecComponent::PerturbParams(kaldi::nnet1::WordVecComponent *this, float a2)
{
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v7, *((unsigned int *)this + 29), *((unsigned int *)this + 28), 1u, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v7);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 96, (uint64_t)v7, 111, v4, v5, a2, 1.0);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v7);
}

void sub_FE738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *kaldi::nnet1::WordVecComponent::GetGradient(uint64_t a1, uint64_t a2, _DWORD *a3, void **a4, const char *a5)
{
  kaldi::Vector<float>::Resize(a4, (a3[4] * a3[5]), 1, (uint64_t)a4, a5);

  return kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)a4, a3, v7, v8, v9);
}

void kaldi::nnet1::WordVecComponent::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "../subproject/libquasar/libkaldi/src/nnet/nnet-word-vec-component.h", (const char *)&stru_B8.reloff + 1, "input.NumCols() == this->input_dim_", a5);
  }
  int v6 = *(_DWORD *)(a2 + 20);
  if (*(_DWORD *)(a3 + 20) != v6) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "../subproject/libquasar/libkaldi/src/nnet/nnet-word-vec-component.h", (const char *)&stru_B8.reloff + 2, "diff.NumRows() == batch_size", a5);
  }
  if (*(_DWORD *)(a3 + 16) != *(_DWORD *)(a1 + 12)) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "../subproject/libquasar/libkaldi/src/nnet/nnet-word-vec-component.h", (const char *)&stru_B8.reloff + 3, "diff.NumCols() == this->output_dim_", a5);
  }
  float v9 = *(float *)(a1 + 56);
  if (*(unsigned char *)(a1 + 84)) {
    float v9 = v9 / (float)v6;
  }
  float v10 = *(float *)(a1 + 244);
  if (v10 <= 0.0)
  {
    uint64_t v11 = a3;
  }
  else
  {
    uint64_t v11 = a1 + 144;
    *(void *)(a1 + 176) = a4;
    kaldi::CuMatrix<float>::operator=(a1 + 144, a3);
    int v12 = *(_DWORD *)(a1 + 240);
    if (v12 == 2)
    {
      float v14 = (float)v6;
      if (!*(unsigned char *)(a1 + 84)) {
        float v14 = 1.0;
      }
      float v15 = v10 * v14;
      *(void *)(a1 + 2++*(void *)(result + 24) = a4;
      kaldi::CuMatrix<float>::Resize(a1 + 192, *(unsigned int *)(a1 + 164), *(unsigned int *)(a1 + 160), 1u, 0);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(a1 + 144, (unsigned int *)(a1 + 192), v15, v16, v17, v18);
    }
    else if (v12 == 1)
    {
      float v13 = (float)v6;
      if (!*(unsigned char *)(a1 + 84)) {
        float v13 = 1.0;
      }
      kaldi::nnet1::UpdatableComponent::ClipGradient(a1 + 144, v10 * v13);
    }
  }
  float v19 = *(float *)(a1 + 72);
  if (v19 <= 0.0)
  {
    *(void *)(a1 + 128) = a4;
    kaldi::CuMatrixBase<float>::AddIndexedRows(a1 + 96, a2, v11, a4, a5, -(float)(v9 * *(float *)(a1 + 260)));
  }
  else
  {
    if (*(void *)(a1 + 320) == *(void *)(a1 + 312))
    {
      kaldi::CuMatrix<float>::Resize(a1 + 264, *(unsigned int *)(a1 + 116), *(unsigned int *)(a1 + 112), 0, 0);
      kaldi::nnet1::QuantizerResidualAggregator::PushSetup((uint64_t *)(a1 + 312), a1 + 264);
    }
    *(void *)(a1 + 296) = a4;
    kaldi::CuMatrixBase<float>::SetZero(a1 + 264);
    kaldi::CuMatrixBase<float>::AddIndexedRows(a1 + 264, a2, v11, v20, v21, 1.0);
    kaldi::nnet1::QuantizerResidualAggregator::Quantize((kaldi::nnet1::QuantizerResidualAggregator *)(a1 + 312), *(_DWORD *)(a1 + 76), v19, v22, v23, v24);
    *(void *)(a1 + 128) = a4;
    kaldi::CuMatrixBase<float>::AddMat(a1 + 96, a1 + 264, 111, v25, v26, -(float)(v9 * *(float *)(a1 + 260)), 1.0);
  }
  unsigned int v28 = *(_DWORD *)(a1 + 252);
  if ((v28 & 0x80000000) == 0)
  {
    if ((signed int)v28 >= *(_DWORD *)(a1 + 248)) {
      kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "../subproject/libquasar/libkaldi/src/nnet/nnet-word-vec-component.h", &stru_108.segname[13], "filler_id_ < voc_size_", v27);
    }
    if (*(_DWORD *)(a1 + 116) <= v28) {
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.addr + 1, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v27);
    }
    unsigned int v29 = *(_DWORD *)(a1 + 112);
    uint64_t v30 = *(void *)(a1 + 128);
    v31[1] = *(void *)(a1 + 104) + 4 * (int)(*(_DWORD *)(a1 + 120) * v28);
    v31[0] = &off_262E20;
    v31[2] = v29;
    void v31[3] = v30;
    kaldi::CuVectorBase<float>::SetZero((uint64_t)v31);
  }
}

void kaldi::nnet1::WordVecComponent::SetGradientNormalization(uint64_t a1, int a2, float a3)
{
  if (a2 == 3)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3, "SetGradientNormalization", "../subproject/libquasar/libkaldi/src/nnet/nnet-word-vec-component.h", 223);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"RMSPROP is not implemented in word embedding yet", 48);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    }
  }
  else
  {
    *(float *)(a1 + 244) = a3;
    *(_DWORD *)(a1 + 240) = a2;
  }
}

void sub_FEB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::nnet1::WordVecComponent::CopyCompressed(kaldi::nnet1::WordVecComponent *this)
{
}

void sub_FEB9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::WordVecComponent::CopyCompressed(kaldi::nnet1::WordVecComponent *this)
{
}

void kaldi::nnet1::FofeWordVecComponent::Copy(kaldi::nnet1::FofeWordVecComponent *this)
{
}

void sub_FEC90()
{
  kaldi::CuMatrix<float>::~CuMatrix(v1);
  kaldi::nnet1::WordVecComponent::~WordVecComponent(v0);
  operator delete();
}

uint64_t kaldi::nnet1::FofeWordVecComponent::GetType(kaldi::nnet1::FofeWordVecComponent *this)
{
  return 269;
}

uint64_t kaldi::nnet1::FofeWordVecComponent::PropagateFnc(kaldi::nnet1::FofeWordVecComponent *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8 = *(_DWORD *)(a2 + 20);
  kaldi::nnet1::FofeWordVecComponent::Prepare(a1, v8);
  kaldi::nnet1::WordVecComponent::PropagateFnc((uint64_t)a1, a2, (uint64_t)a1 + 440, a4, v9);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v11, (uint64_t)a1 + 392, 0, 1, (const char *)(*((_DWORD *)a1 + 102) - v8), v8);
  kaldi::CuMatrixBase<float>::AddMatMat(a3, (uint64_t)&v11, CblasNoTrans, (uint64_t)a1 + 440, &stru_68.sectname[7], 1.0, 0.0);
  uint64_t v11 = off_262D80;
  long long v12 = 0u;
  long long v13 = 0u;
  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v11);
}

void sub_FEDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (**a10)(), long long a11, long long a12)
{
  a10 = off_262D80;
  a11 = 0u;
  a12 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::FofeWordVecComponent::AccumGradients()
{
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0, "AccumGradients", "../subproject/libquasar/libkaldi/src/nnet/nnet-word-vec-component.h", 434);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"not implemented", 15);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  }
}

void sub_FEE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::nnet1::SharedNceComponent::Copy(kaldi::nnet1::SharedNceComponent *this)
{
}

void sub_FEEBC()
{
}

uint64_t kaldi::nnet1::SharedNceComponent::GetType(kaldi::nnet1::SharedNceComponent *this)
{
  return 284;
}

uint64_t kaldi::nnet1::SharedNceComponent::Info(kaldi::nnet1::SharedNceComponent *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  (*(void (**)(kaldi::nnet1::SharedNceComponent *, void *, void))(*(void *)this + 168))(this, v18, 0);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n linearity", 11);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 88);
  if ((v17 & 0x80u) == 0) {
    uint64_t v3 = v16;
  }
  else {
    uint64_t v3 = (void **)v16[0];
  }
  if ((v17 & 0x80u) == 0) {
    uint64_t v4 = v17;
  }
  else {
    uint64_t v4 = (uint64_t)v16[1];
  }
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\n bias", 6);
  kaldi::nnet1::MomentStatistics<float>((_DWORD *)this + 34, v7, v8, v9, v10);
  if ((v15 & 0x80u) == 0) {
    uint64_t v11 = __p;
  }
  else {
    uint64_t v11 = (void **)__p[0];
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v12 = v15;
  }
  else {
    uint64_t v12 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v11, v12);
  if ((char)v15 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v17 < 0) {
    operator delete(v16[0]);
  }
  std::stringbuf::str();
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_FF0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SharedNceComponent::InfoGradient(kaldi::nnet1::SharedNceComponent *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v20);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n  linearity_grad", 17);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 216);
  if ((v19 & 0x80u) == 0) {
    uint64_t v3 = v18;
  }
  else {
    uint64_t v3 = (void **)v18[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v4 = v19;
  }
  else {
    uint64_t v4 = (uint64_t)v18[1];
  }
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", lr-coef ", 10);
  int v6 = (void *)std::ostream::operator<<();
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\n bias", 6);
  kaldi::nnet1::MomentStatistics<float>((_DWORD *)this + 78, v8, v9, v10, v11);
  if ((v17 & 0x80u) == 0) {
    uint64_t v12 = __p;
  }
  else {
    uint64_t v12 = (void **)__p[0];
  }
  if ((v17 & 0x80u) == 0) {
    uint64_t v13 = v17;
  }
  else {
    uint64_t v13 = (uint64_t)__p[1];
  }
  float v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v12, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", bias-lr-coef ", 15);
  std::ostream::operator<<();
  if ((char)v17 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v19 < 0) {
    operator delete(v18[0]);
  }
  std::stringbuf::str();
  if (v21 < 0) {
    operator delete((void *)v20[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_FF34C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::SharedNceComponent::InitData(unsigned int *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  float v93 = 2.0;
  int v94 = -1073741824;
  int v92 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)((char *)&def_5A5E8 + 2), &v91);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)a1[104], &v90);
  int v89 = -1;
  memset(v88, 0, sizeof(v88));
  while (2)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_132;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v88, v6, v7);
    if ((SHIBYTE(v88[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v88[2]))
      {
        case 9:
          BOOL v10 = v88[0] == (void *)0x6461724778614D3CLL && LOBYTE(v88[1]) == 62;
          uint64_t v11 = (float *)(a1 + 105);
          if (!v10) {
            goto LABEL_177;
          }
          goto LABEL_123;
        case 0xA:
          if (v88[0] != (void *)0x61654D736169423CLL || LOWORD(v88[1]) != 15982) {
            goto LABEL_177;
          }
          goto LABEL_59;
        case 0xB:
          if (v88[0] != (void *)0x6E6152736169423CLL || *(void **)((char *)v88 + 3) != (void *)0x3E65676E61527361) {
            goto LABEL_177;
          }
          goto LABEL_32;
        case 0xC:
          if (v88[0] == (void *)0x536D6F646E61523CLL && LODWORD(v88[1]) == 1046766949) {
            goto LABEL_91;
          }
          uint64_t v37 = v88;
          goto LABEL_127;
        case 0xD:
          if (v88[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v88 + 5) != (void *)0x3E7665646474536DLL) {
            goto LABEL_177;
          }
          goto LABEL_73;
        case 0xF:
          BOOL v15 = v88[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v88 + 7) == (void *)0x3E66656F43657461;
          uint64_t v11 = (float *)(a1 + 102);
          if (!v15) {
            goto LABEL_177;
          }
          goto LABEL_123;
        case 0x12:
          if (v88[0] != (void *)0x6E6569646172473CLL
            || v88[1] != (void *)0x7079546D726F4E74
            || LOWORD(v88[2]) != 15973)
          {
            goto LABEL_177;
          }
          goto LABEL_116;
        case 0x13:
          BOOL v18 = v88[0] == (void *)0x61654C736169423CLL
             && v88[1] == (void *)0x6F43657461526E72
             && *(void **)((char *)&v88[1] + 3) == (void *)0x3E66656F43657461;
          uint64_t v11 = (float *)(a1 + 103);
          if (v18) {
            goto LABEL_123;
          }
          if (v88[0] != (void *)0x61725474696E493CLL
            || v88[1] != (void *)0x79546D726F66736ELL
            || *(void **)((char *)&v88[1] + 3) != (void *)0x3E657079546D726FLL)
          {
            goto LABEL_177;
          }
          goto LABEL_48;
        default:
          goto LABEL_177;
      }
    }
    uint64_t v12 = (int *)v88[1];
    switch((unint64_t)v88[1])
    {
      case 9uLL:
        goto LABEL_118;
      case 0xAuLL:
        if (*(void *)v88[0] != 0x61654D736169423CLL || *((_WORD *)v88[0] + 4) != 15982) {
          goto LABEL_84;
        }
LABEL_59:
        uint64_t v11 = (float *)&v94;
        goto LABEL_123;
      case 0xBuLL:
        if (*(void *)v88[0] != 0x6E6152736169423CLL || *(void *)((char *)v88[0] + 3) != 0x3E65676E61527361) {
          goto LABEL_84;
        }
LABEL_32:
        uint64_t v11 = &v93;
        goto LABEL_123;
      case 0xCuLL:
        goto LABEL_86;
      case 0xDuLL:
        if (*(void *)v88[0] != 0x74536D617261503CLL || *(void *)((char *)v88[0] + 5) != 0x3E7665646474536DLL) {
          goto LABEL_177;
        }
LABEL_73:
        uint64_t v11 = (float *)&v92;
        goto LABEL_123;
      case 0xFuLL:
        BOOL v27 = *(void *)v88[0] == 0x61526E7261654C3CLL && *(void *)((char *)v88[0] + 7) == 0x3E66656F43657461;
        uint64_t v11 = (float *)(a1 + 102);
        if (v27) {
          goto LABEL_123;
        }
LABEL_84:
        if (v88[1] == (char *)&dword_8 + 1) {
          goto LABEL_118;
        }
        if (v88[1] != &dword_C) {
          goto LABEL_107;
        }
LABEL_86:
        if (*(void *)v88[0] == 0x536D6F646E61523CLL && *((_DWORD *)v88[0] + 2) == 1046766949)
        {
LABEL_91:
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v89, v8, v9);
          goto LABEL_124;
        }
LABEL_106:
        if (v88[1] != (char *)&dword_8 + 1)
        {
LABEL_107:
          if (v88[1] != (char *)&dword_10 + 2) {
            goto LABEL_125;
          }
LABEL_108:
          if (*(void *)v88[0] != 0x6E6569646172473CLL
            || *((void *)v88[0] + 1) != 0x7079546D726F4E74
            || *((_WORD *)v88[0] + 8) != 15973)
          {
            goto LABEL_177;
          }
LABEL_116:
          char v21 = &v90;
LABEL_117:
          kaldi::ReadToken(a2, 0, (uint64_t)v21, v8, v9);
LABEL_124:
          std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
          continue;
        }
LABEL_118:
        BOOL v36 = *(void *)v88[0] == 0x6461724778614D3CLL && *((unsigned char *)v88[0] + 8) == 62;
        uint64_t v11 = (float *)(a1 + 105);
        if (v36)
        {
LABEL_123:
          kaldi::ReadBasicType<float>(a2, 0, v11, v8, v9);
          goto LABEL_124;
        }
        uint64_t v12 = (int *)v88[1];
LABEL_125:
        if (v12 != &dword_C) {
          goto LABEL_177;
        }
        uint64_t v37 = (void **)v88[0];
LABEL_127:
        int v38 = *v37;
        int v39 = *((_DWORD *)v37 + 2);
        if (v38 != (void *)0x6E6F706D6F432F3CLL || v39 != 1047817829)
        {
LABEL_177:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v84, "InitData", "../subproject/libquasar/libkaldi/src/nnet/nnet-shared-nce-component.h", 78);
          float v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"Unknown token ", 14);
          if (SHIBYTE(v88[2]) >= 0) {
            uint64_t v73 = v88;
          }
          else {
            uint64_t v73 = (void **)v88[0];
          }
          if (SHIBYTE(v88[2]) >= 0) {
            uint64_t v74 = HIBYTE(v88[2]);
          }
          else {
            uint64_t v74 = (uint64_t)v88[1];
          }
          uint64_t v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)v73, v74);
          float v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)", a typo in config?", 19);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)" (ParamStddev|BiasMean|BiasRange|LearnRateCoef|BiasLearnRateCoef|InitTransformType|RandomSeed|GradientNormType|MaxGrad)", 119);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v84);
        }
LABEL_132:
        int inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v91);
        a1[104] = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v90);
        if (v89 >= 1) {
          kaldi::UniformRandomNumber::SetRandomSeeds(a3, v89);
        }
        kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v84, a3);
        kaldi::Matrix<float>::Matrix((uint64_t)&v80, a1[3], a1[2], 0, 0);
        int v45 = a1[3];
        if (v45 < 1) {
          goto LABEL_160;
        }
        unint64_t v46 = 0;
        LODWORD(v47) = a1[2];
        while (2)
        {
          if ((int)v47 < 1) {
            goto LABEL_159;
          }
          unint64_t v48 = 0;
          while (2)
          {
            switch(inited)
            {
              case 0:
                if (v46 >= v82 || v48 >= v81) {
LABEL_175:
                }
                  kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)&stru_68.addr, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v44);
                signed int v51 = (char *)v80 + 4 * (int)v46 * v83;
                if (v46 == v48) {
                  float v52 = 1.0;
                }
                else {
                  float v52 = 0.0;
                }
                goto LABEL_156;
              case 2:
                float v53 = *(float *)&v92;
                kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v84, 0, v42, v43, v44);
                if (v46 >= v82 || v48 >= v81) {
                  goto LABEL_175;
                }
                signed int v51 = (char *)v80 + 4 * (int)v46 * v83;
                float v52 = v53 * v54;
LABEL_156:
                *(float *)&v51[4 * v48] = v52;
                break;
              case 1:
                float v49 = *(float *)&v92;
                float v50 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v42, v43, v44);
                if (v46 >= v82 || v48 >= v81) {
                  goto LABEL_175;
                }
                signed int v51 = (char *)v80 + 4 * (int)v46 * v83;
                float v52 = (v50 + -0.5) * (float)(v49 + v49);
                goto LABEL_156;
            }
            ++v48;
            int64_t v47 = (int)a1[2];
            if ((uint64_t)v48 < v47) {
              continue;
            }
            break;
          }
          int v45 = a1[3];
LABEL_159:
          if ((uint64_t)++v46 < v45) {
            continue;
          }
          break;
        }
LABEL_160:
        kaldi::CuMatrix<float>::operator=((uint64_t)(a1 + 22), (kaldi::ContextDependency *)&v80);
        uint64_t v57 = a1[3];
        uint64_t v78 = 0;
        uint64_t v79 = 0;
        uint64_t v77 = 0;
        kaldi::Vector<float>::Resize((void **)&v77, v57, 0, v58, v59);
        if ((int)a1[3] < 1)
        {
          uint64_t v66 = v78;
        }
        else
        {
          unint64_t v63 = 0;
          do
          {
            float v64 = *(float *)&v94;
            float v65 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v60, v61, v62);
            uint64_t v66 = v78;
            if (v63 >= v78) {
              kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", stru_68.sectname, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v62);
            }
            float v67 = v64 + (v65 + -0.5) * v93;
            v77[v63++] = v67;
          }
          while ((uint64_t)v63 < (int)a1[3]);
        }
        std::string v68 = a1 + 34;
        kaldi::CuVector<float>::Resize((uint64_t)v68, v66, 1u, v61, v62);
        kaldi::CuVectorBase<float>::CopyFromVec<float>(v68, (uint64_t)&v77, v69, v70, v71);
        kaldi::Vector<float>::Destroy((uint64_t)&v77);
        kaldi::Matrix<float>::~Matrix((uint64_t)&v80);
        if (__p)
        {
          unsigned int v87 = __p;
          operator delete(__p);
        }
        uint64_t v80 = (void **)&v85;
        std::vector<std::vector<std::pair<int,int>>>::__destroy_vector::operator()[abi:ne180100](&v80);
        if (SHIBYTE(v88[2]) < 0) {
          operator delete(v88[0]);
        }
        if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v90.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v91.__r_.__value_.__l.__data_);
        }
        return;
      case 0x12uLL:
        goto LABEL_108;
      case 0x13uLL:
        BOOL v31 = *(void *)v88[0] == 0x61654C736169423CLL
           && *((void *)v88[0] + 1) == 0x6F43657461526E72
           && *(void *)((char *)v88[0] + 11) == 0x3E66656F43657461;
        uint64_t v11 = (float *)(a1 + 103);
        if (v31) {
          goto LABEL_123;
        }
        if (*(void *)v88[0] != 0x61725474696E493CLL
          || *((void *)v88[0] + 1) != 0x79546D726F66736ELL
          || *(void *)((char *)v88[0] + 11) != 0x3E657079546D726FLL)
        {
          goto LABEL_106;
        }
LABEL_48:
        char v21 = &v91;
        goto LABEL_117;
      default:
        goto LABEL_125;
    }
  }
}

void sub_FFD00()
{
  kaldi::Vector<float>::Destroy(&v0);
  JUMPOUT(0xFFD28);
}

void sub_FFD18(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 193) < 0) {
    operator delete(*(void **)(v1 - 216));
  }
  if (*(char *)(v1 - 161) < 0) {
    operator delete(*(void **)(v1 - 184));
  }
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  _Unwind_Resume(exception_object);
}

void sub_FFD20()
{
  kaldi::Matrix<float>::~Matrix(&v0);
  kaldi::GaussRandomNumber::~GaussRandomNumber((kaldi::GaussRandomNumber *)&v1);
  JUMPOUT(0xFFD38);
}

void kaldi::nnet1::SharedNceComponent::WriteData(_DWORD *a1, void *a2, int a3, int a4)
{
  uint64_t v8 = a1 + 34;
  (*(void (**)(_DWORD *))(*(void *)a1 + 168))(a1);
  kaldi::CuMatrixBase<float>::Write((uint64_t)(a1 + 22), a2, a3, a4);

  kaldi::CuVectorBase<float>::Write(v8, a2, a3, v9, v10);
}

void kaldi::nnet1::SharedNceComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v8 = *(void *)(a1 + 424);
  if (v8 && (int v9 = *(_DWORD *)(v8 + 16), v9 >= 1))
  {
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v13, a3, 0, *(_DWORD *)(a3 + 20), 0, v9);
    kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)&v13, a1 + 312, v10, v11, v12, 1.0, 0.0);
    kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v13, a2, CblasNoTrans, a1 + 168, &stru_68.sectname[8], 1.0, 1.0);
    uint64_t v13 = off_262D80;
    long long v14 = 0u;
    long long v15 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v13);
  }
  else
  {
    kaldi::CuMatrixBase<float>::AddVecToRows(a3, a1 + 136, a3, a4, a5, 1.0, 0.0);
    kaldi::CuMatrixBase<float>::AddMatMat(a3, a2, CblasNoTrans, a1 + 88, &stru_68.sectname[8], 1.0, 1.0);
  }
}

void sub_FFF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (**a10)(), long long a11, long long a12)
{
  a10 = off_262D80;
  a11 = 0u;
  a12 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::SharedNceComponent::PropagateFnc(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, const char *a5)
{
  kaldi::CuVectorBase<float>::CopyFromVec(a3, a1 + 136, (uint64_t)a3, a4, a5);

  kaldi::CuVectorBase<float>::AddMatVec((uint64_t)a3, (_DWORD *)(a1 + 88), CblasNoTrans, a2, v8, 1.0, 1.0);
}

void kaldi::nnet1::SharedNceComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(a1 + 424);
  if (v7 && (int v8 = *(_DWORD *)(v7 + 16), v8 >= 1))
  {
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v9, a4, 0, *(_DWORD *)(a4 + 20), 0, v8);
    kaldi::CuMatrixBase<float>::AddMatMat(a5, (uint64_t)&v9, CblasNoTrans, a1 + 168, &stru_68.sectname[7], 1.0, 0.0);
    int v9 = off_262D80;
    long long v10 = 0u;
    long long v11 = 0u;
    fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v9);
  }
  else
  {
    kaldi::CuMatrixBase<float>::AddMatMat(a5, a4, CblasNoTrans, a1 + 88, &stru_68.sectname[7], 1.0, 0.0);
  }
}

void sub_100104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (**a10)(), long long a11, long long a12)
{
  a10 = off_262D80;
  a11 = 0u;
  a12 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::SharedNceComponent::GetUnitOutputFnc(uint64_t a1, _DWORD *a2, unsigned int a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 152) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.h", &stru_108.sectname[6], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a5);
  }
  kaldi::CuVectorBase<float>::Set(a4, *(float *)(*(void *)(a1 + 144) + 4 * (int)a3));
  if (*(_DWORD *)(a1 + 108) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", &stru_1F8.segname[11], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v9);
  }
  unsigned int v10 = *(_DWORD *)(a1 + 104);
  uint64_t v11 = *(void *)(a1 + 120);
  v12[1] = *(void *)(a1 + 96) + 4 * (int)(*(_DWORD *)(a1 + 112) * a3);
  v12[0] = &off_262E20;
  v12[2] = v10;
  v12[3] = v11;
  kaldi::CuVectorBase<float>::AddMatVec(a4, a2, CblasNoTrans, (uint64_t)v12, v9, 1.0, 1.0);
}

float kaldi::nnet1::SharedNceComponent::GetUnitOutputFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 152) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.h", &stru_108.sectname[6], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a5);
  }
  if (*(_DWORD *)(a1 + 108) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", &stru_1F8.segname[11], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", a5);
  }
  float v5 = *(float *)(*(void *)(a1 + 144) + 4 * (int)a3);
  unsigned int v6 = *(_DWORD *)(a1 + 104);
  uint64_t v7 = *(void *)(a1 + 120);
  v9[1] = *(void *)(a1 + 96) + 4 * *(_DWORD *)(a1 + 112) * (int)a3;
  v9[0] = &off_262E20;
  v9[2] = v6;
  uint64_t v9[3] = v7;
  return v5 + kaldi::VecVec<float>(a2, (uint64_t)v9, a3, a4, a5);
}

void kaldi::nnet1::SharedNceComponent::ReadData(float *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  while (kaldi::Peek(a2, a3) == 60)
  {
    memset(v37, 0, 24);
    kaldi::ReadToken(a2, a3, (uint64_t)v37, v7, v8);
    if (SHIBYTE(v37[2]) < 0)
    {
      uint64_t v13 = (char *)v37[1];
      if (v37[1] != (char *)&dword_C + 3
        || (*(void *)v37[0] == 0x61526E7261654C3CLL
          ? (BOOL v14 = *(void *)((char *)v37[0] + 7) == 0x3E66656F43657461)
          : (BOOL v14 = 0),
            uint64_t v12 = a1 + 102,
            !v14))
      {
        if (v37[1] != (char *)&dword_10 + 3) {
          goto LABEL_25;
        }
        BOOL v15 = *(void *)v37[0] == 0x61654C736169423CLL && *((void *)v37[0] + 1) == 0x6F43657461526E72;
        BOOL v16 = v15 && *(void *)((char *)v37[0] + 11) == 0x3E66656F43657461;
        uint64_t v12 = a1 + 103;
        if (!v16)
        {
          uint64_t v13 = (char *)v37[1];
LABEL_25:
          if (v13 == (unsigned char *)&dword_10 + 2)
          {
            if (*(void *)v37[0] == 0x6E6569646172473CLL
              && *((void *)v37[0] + 1) == 0x7079546D726F4E74
              && *((_WORD *)v37[0] + 8) == 15973)
            {
              goto LABEL_65;
            }
            uint64_t v13 = (char *)v37[1];
          }
          if (v13 != (unsigned char *)&dword_8 + 1) {
            goto LABEL_71;
          }
          unsigned __int8 v19 = (void **)v37[0];
LABEL_55:
          uint64_t v24 = *v19;
          int v25 = *((unsigned __int8 *)v19 + 8);
          BOOL v26 = v24 == (void *)0x6461724778614D3CLL && v25 == 62;
          uint64_t v12 = a1 + 105;
          if (!v26) {
            goto LABEL_71;
          }
        }
      }
    }
    else if (HIBYTE(v37[2]) > 0x11u)
    {
      if (HIBYTE(v37[2]) == 18)
      {
        if (v37[0] != (void *)0x6E6569646172473CLL || v37[1] != (void *)0x7079546D726F4E74 || LOWORD(v37[2]) != 15973)
        {
LABEL_71:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-shared-nce-component.h", 131);
          BOOL v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
          if (SHIBYTE(v37[2]) >= 0) {
            uint64_t v32 = v37;
          }
          else {
            uint64_t v32 = (void **)v37[0];
          }
          if (SHIBYTE(v37[2]) >= 0) {
            uint64_t v33 = HIBYTE(v37[2]);
          }
          else {
            uint64_t v33 = (uint64_t)v37[1];
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
LABEL_65:
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v36 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p, v9, v10);
        *((_DWORD *)a1 + 104) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v36) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_61;
      }
      if (HIBYTE(v37[2]) != 19) {
        goto LABEL_71;
      }
      BOOL v20 = v37[0] == (void *)0x61654C736169423CLL && v37[1] == (void *)0x6F43657461526E72;
      BOOL v21 = v20 && *(void **)((char *)&v37[1] + 3) == (void *)0x3E66656F43657461;
      uint64_t v12 = a1 + 103;
      if (!v21) {
        goto LABEL_71;
      }
    }
    else
    {
      if (HIBYTE(v37[2]) == 9)
      {
        unsigned __int8 v19 = v37;
        goto LABEL_55;
      }
      if (HIBYTE(v37[2]) != 15) {
        goto LABEL_71;
      }
      BOOL v11 = v37[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v37 + 7) == (void *)0x3E66656F43657461;
      uint64_t v12 = a1 + 102;
      if (!v11) {
        goto LABEL_71;
      }
    }
    kaldi::ReadBasicType<float>(a2, a3, v12, v9, v10);
LABEL_61:
    if (SHIBYTE(v37[2]) < 0) {
      operator delete(v37[0]);
    }
  }
  kaldi::CuMatrix<float>::Read((uint64_t)(a1 + 22), a2, a3, a4);
  kaldi::CuVector<float>::Read((uint64_t)(a1 + 34), a2, a3, v27, v28);
  int v30 = *((_DWORD *)a1 + 27);
  if (v30 != *((_DWORD *)a1 + 3)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-shared-nce-component.h", (const char *)&stru_68.addr + 3, "linearity_.NumRows() == output_dim_", v29);
  }
  if (*((_DWORD *)a1 + 26) != *((_DWORD *)a1 + 2)) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-shared-nce-component.h", (const char *)&stru_68.addr + 4, "linearity_.NumCols() == input_dim_", v29);
  }
  if (*((_DWORD *)a1 + 38) != v30) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-shared-nce-component.h", (const char *)&stru_68.addr + 5, "bias_.Dim() == output_dim_", v29);
  }
}

void sub_10075C()
{
}

void *kaldi::nnet1::SharedNceComponent::WriteConfig(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", a4, a5);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<BiasLearnRateCoef>", v8, v9);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v10, v11);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 416), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v12, v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v14, v15);
  return kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
}

void sub_100860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::SharedNceComponent::NumParams(kaldi::nnet1::SharedNceComponent *this)
{
  return (*((_DWORD *)this + 38) + *((_DWORD *)this + 26) * *((_DWORD *)this + 27));
}

_DWORD *kaldi::nnet1::SharedNceComponent::GetParams(_DWORD *a1, uint64_t a2)
{
  int v4 = a1[26] * a1[27];
  uint64_t v5 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v5, 0, v6, v7);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  if (v4 > *(_DWORD *)(a2 + 8)
    || (BOOL v15 = *(void **)a2,
        LODWORD(v16) = v4,
        kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v15, a1 + 22, v8, v9, v10),
        int v13 = a1[38],
        uint64_t v16 = 0,
        uint64_t v17 = 0,
        (v13 + v4) > *(_DWORD *)(a2 + 8)))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v10);
  }
  BOOL v15 = (void *)(*(void *)a2 + 4 * v4);
  LODWORD(v16) = v13;
  return kaldi::CuVectorBase<float>::CopyToVec<float>(a1 + 34, (uint64_t)&v15, v11, v12, v10);
}

_DWORD *kaldi::nnet1::SharedNceComponent::SetParams(_DWORD *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(_DWORD *))(*(void *)a1 + 176))(a1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "../subproject/libquasar/libkaldi/src/nnet/nnet-shared-nce-component.h", &stru_B8.sectname[6], "wei_src.Dim() == NumParams()", v5);
  }
  int v6 = a1[26] * a1[27];
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  if (v6 > *(_DWORD *)(a2 + 8) {
    || (uint64_t v11 = *(char **)a2,
  }
        LODWORD(v1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v6,
        kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)(a1 + 22), &v11),
        int v9 = a1[38],
        uint64_t v12 = 0,
        uint64_t v13 = 0,
        (v9 + v6) > *(_DWORD *)(a2 + 8)))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v5);
  }
  uint64_t v11 = (char *)(*(void *)a2 + 4 * v6);
  LODWORD(v1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v9;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(a1 + 34, (uint64_t)&v11, v7, v8, v5);
}

float kaldi::nnet1::SharedNceComponent::SumParams(kaldi::nnet1::SharedNceComponent *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  float v6 = kaldi::CuMatrixBase<float>::Sum((uint64_t)this + 88, a2, a3, a4, a5);
  double v7 = kaldi::CuVectorBase<float>::Sum((uint64_t)this + 136);
  return v6 + *(float *)&v7;
}

uint64_t kaldi::nnet1::SharedNceComponent::PerturbParams(kaldi::nnet1::SharedNceComponent *this, float a2)
{
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v14, *((unsigned int *)this + 27), *((unsigned int *)this + 26), 1u, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v14);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 88, (uint64_t)v14, 111, v4, v5, a2, 1.0);
  uint64_t v6 = *((unsigned int *)this + 38);
  v13[0] = off_262E60;
  memset(&v13[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v13, v6, 1u, v7, v8);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v13);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 136, (uint64_t)v13, v9, v10, v11, a2, 1.0);
  kaldi::CuVector<float>::~CuVector(v13);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v14);
}

void sub_100B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::SharedNceComponent::GetGradient(_DWORD *a1, uint64_t a2, uint64_t a3, void **a4, const char *a5)
{
  uint64_t v6 = a1 + 54;
  kaldi::Vector<float>::Resize(a4, (a1[58] * a1[59]), 0, (uint64_t)a4, a5);

  return kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)a4, v6, v7, v8, v9);
}

uint64_t kaldi::nnet1::SharedNceComponent::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(void *)(a1 + 424);
  if (!v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "../subproject/libquasar/libkaldi/src/nnet/nnet-shared-nce-component.h", &stru_108.sectname[14], "active_output_", a5);
  }
  int v6 = *(_DWORD *)(v5 + 16);
  if (v6 <= 0) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "../subproject/libquasar/libkaldi/src/nnet/nnet-shared-nce-component.h", stru_108.segname, "num_samples > 0", a5);
  }
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "../subproject/libquasar/libkaldi/src/nnet/nnet-shared-nce-component.h", &stru_108.segname[3], "input.NumCols() == input_dim_", a5);
  }
  int v10 = *(_DWORD *)(a2 + 20);
  if (*(_DWORD *)(a3 + 20) != v10) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "../subproject/libquasar/libkaldi/src/nnet/nnet-shared-nce-component.h", &stru_108.segname[4], "diff.NumRows() == batch_size", a5);
  }
  *(void *)(a1 + 248) = a4;
  kaldi::CuMatrix<float>::Resize(a1 + 216, *(unsigned int *)(a1 + 188), *(unsigned int *)(a1 + 184), 3u, 0);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v45, a3, 0, *(_DWORD *)(a3 + 20), 0, v6);
  kaldi::CuMatrixBase<float>::AddMatMat(a1 + 216, (uint64_t)&v45, CblasTrans, a2, &stru_68.sectname[7], 1.0, 0.0);
  *(void *)(a1 + 368) = a4;
  kaldi::CuVector<float>::Resize(a1 + 344, *(unsigned int *)(a1 + 328), 3u, v12, v13);
  kaldi::CuVectorBase<float>::AddRowSumMat(a1 + 344, &v45, 1.0, 0.0, v14, v15, v16);
  *(void *)(a1 + 120) = a4;
  *(void *)(a1 + 1--*(_DWORD *)(a9 + 60) = a4;
  float v17 = *(float *)(a1 + 56);
  if (*(unsigned char *)(a1 + 84)) {
    float v17 = v17 / (float)v10;
  }
  float v18 = *(float *)(a1 + 420);
  if (v18 > 0.0)
  {
    float v19 = (float)v10;
    if (!*(unsigned char *)(a1 + 84)) {
      float v19 = 1.0;
    }
    float v20 = v19 * v18;
    int v21 = *(_DWORD *)(a1 + 416);
    if (v21 == 1)
    {
      kaldi::nnet1::UpdatableComponent::ClipGradient(a1 + 216, v19 * v18);
      kaldi::nnet1::UpdatableComponent::ClipGradient(a1 + 344, v20);
    }
    else if (v21 == 2)
    {
      *(void *)(a1 + 296) = a4;
      kaldi::CuMatrix<float>::Resize(a1 + 264, *(unsigned int *)(a1 + 236), *(unsigned int *)(a1 + 232), 1u, 0);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(a1 + 216, (unsigned int *)(a1 + 264), v20, v22, v23, v24);
      *(void *)(a1 + 400) = a4;
      kaldi::CuVector<float>::Resize(a1 + 376, *(unsigned int *)(a1 + 360), 1u, v25, v26);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(a1 + 344, (_DWORD *)(a1 + 376), v27, v28, v29, v20);
    }
  }
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v42, *(void *)(a1 + 424), v6);
  kaldi::CuMatrixBase<float>::AddIndexedRows(a1 + 88, (uint64_t)&v42, a1 + 216, v30, v31, -(float)(v17 * *(float *)(a1 + 408)));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v39, a1 + 136, *(_DWORD *)(a1 + 12));
  float v32 = *(float *)(a1 + 412);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v36, a1 + 344, v6);
  kaldi::CuMatrixBase<float>::AddIndexedRows((uint64_t)&v39, (uint64_t)&v42, (uint64_t)&v36, v33, v34, v32 * (float)-v17);
  uint64_t v36 = off_262D80;
  long long v37 = 0u;
  long long v38 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v36);
  *(void *)(a1 + 4++*(void *)(result + 24) = 0;
  int v39 = off_262D80;
  long long v40 = 0u;
  long long v41 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v39);
  uint64_t v42 = off_262D80;
  long long v43 = 0u;
  long long v44 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v42);
  int v45 = off_262D80;
  long long v46 = 0u;
  long long v47 = 0u;
  return fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v45);
}

void sub_100F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (**a9)(), long long a10, long long a11, void (**a12)(), long long a13, long long a14, void (**a15)(), long long a16, long long a17, void (**a18)())
{
  a9 = off_262D80;
  a10 = 0u;
  a11 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a9);
  a12 = off_262D80;
  a13 = 0u;
  a14 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a12);
  a15 = off_262D80;
  a16 = 0u;
  a17 = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a15);
  a18 = off_262D80;
  *(_OWORD *)(v18 + 8) = 0u;
  *(_OWORD *)(v18 + ++*(void *)(result + 24) = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a18);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SharedNceComponent::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  if (a2 == 3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3, "SetGradientNormalization", "../subproject/libquasar/libkaldi/src/nnet/nnet-shared-nce-component.h", 261);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "it does not make sense to do RMSPROP in this component");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  *(float *)(result + 420) = a3;
  *(_DWORD *)(result + 416) = a2;
  return result;
}

void kaldi::nnet1::CompressedWordTransComponent::Copy(kaldi::nnet1::CompressedWordTransComponent *this)
{
}

void sub_101154()
{
}

uint64_t kaldi::nnet1::CompressedWordTransComponent::GetType(kaldi::nnet1::CompressedWordTransComponent *this)
{
  return 1040;
}

uint64_t kaldi::nnet1::CompressedWordTransComponent::Info(kaldi::nnet1::CompressedWordTransComponent *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
  (*(void (**)(kaldi::nnet1::CompressedWordTransComponent *, void *, void))(*(void *)this + 168))(this, v3, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"\n CompressedWordTrans table", 27);
  std::stringbuf::str();
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1012EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::CompressedWordTransComponent::WriteData(uint64_t a1, void *a2, int a3, uint64_t a4, const char *a5)
{
  return kaldi::CompressedMatrix::Write((uint64_t *)(a1 + 80), a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::CompressedWordTransComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5 = *(_DWORD *)(a2 + 16);
  if (v5 != *(_DWORD *)(a1 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "../subproject/libquasar/libkaldi/src/nnet/nnet-compressed-word-trans-component.h", (const char *)&stru_20.vmaddr + 5, "in.NumCols() == input_dim_", a5);
  }
  uint64_t v9 = (uint64_t *)(a1 + 80);
  uint64_t v8 = *(void *)(a1 + 80);
  if (v8) {
    LODWORD(v8) = *(_DWORD *)(v8 + 8);
  }
  if (*(_DWORD *)(a1 + 96) != (int)v8 / v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "../subproject/libquasar/libkaldi/src/nnet/nnet-compressed-word-trans-component.h", (const char *)&stru_20.vmaddr + 6, "voc_size_ == vec_table_.NumRows() / input_dim_", a5);
  }
  kaldi::CuMatrix<float>::CuMatrix(v16, a2, 111);
  kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)v16, a1 + 48, v10, v11, v12, 1.0, 1.0);
  kaldi::CuMatrixBase<float>::SetZero(a3);
  kaldi::CuMatrixBase<float>::SummarizeVec(a3, v9, (uint64_t)v16, v13, v14);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v16);
}

void sub_1013EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float kaldi::nnet1::CompressedWordTransComponent::ReadData(uint64_t a1, void *a2, int a3, uint64_t a4)
{
  kaldi::CompressedMatrix::Read(a1 + 80, a2, a3, a4);
  uint64_t v9 = *(void *)(a1 + 80);
  if (!v9)
  {
    int v10 = *(_DWORD *)(a1 + 12);
    if (!v10)
    {
      int v11 = *(_DWORD *)(a1 + 8);
      goto LABEL_7;
    }
LABEL_10:
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-compressed-word-trans-component.h", stru_20.segname, "vec_table_.NumCols() == output_dim_", v8);
  }
  if (*(_DWORD *)(v9 + 12) != *(_DWORD *)(a1 + 12)) {
    goto LABEL_10;
  }
  int v10 = *(_DWORD *)(v9 + 8);
  int v11 = *(_DWORD *)(a1 + 8);
  if (v10 % v11) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-compressed-word-trans-component.h", &stru_20.segname[1], "vec_table_.NumRows() % input_dim_ == 0", v8);
  }
LABEL_7:
  *(_DWORD *)(a1 + 96) = v10 / v11;

  return kaldi::nnet1::CompressedWordTransComponent::InitIndexOffsets((kaldi::nnet1::CompressedWordTransComponent *)a1, v5, v6, v7, v8);
}

void kaldi::nnet1::AffineTransform::AffineTransform(kaldi::nnet1::AffineTransform *this, int a2, int a3)
{
  *((_DWORD *)this + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 6) = off_26E7B8;
  *(_OWORD *)((char *)this + 56) = xmmword_20CEC0;
  *((_DWORD *)this + 18) = -1082130432;
  *(void *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 4std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((unsigned char *)this + 86) = 0;
  *(void *)this = off_2635E0;
  *((void *)this + 11) = off_263720;
  *((void *)this + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = off_263748;
  *((void *)this + 13) = off_263770;
  operator new();
}

void sub_1016C0()
{
}

double kaldi::nnet1::ConvolutionalComponent::ConvolutionalComponent(kaldi::nnet1::ConvolutionalComponent *this, int a2, int a3)
{
  *((_DWORD *)this + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 6) = off_26E7B8;
  *(_OWORD *)((char *)this + 56) = xmmword_20CEC0;
  *((_DWORD *)this + 18) = -1082130432;
  *(void *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 4std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((unsigned char *)this + 86) = 0;
  *(void *)this = off_264FF0;
  *((void *)this + 11) = 0;
  *((_DWORD *)this + ++*(void *)(result + 24) = 0;
  double result = 0.0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((void *)this + 13) = off_262DC8;
  *((unsigned char *)this + 144) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 2std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((void *)this + 19) = off_262E60;
  *((void *)this + 20) = 0;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 23std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((void *)this + 35) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *((void *)this + 36) = _D1;
  *((_DWORD *)this + 74) = 0;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 2std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 361) = 0u;
  return result;
}

double kaldi::nnet1::WordVecComponent::WordVecComponent(kaldi::nnet1::WordVecComponent *this, int a2, int a3, uint64_t a4, const char *a5)
{
  *((_DWORD *)this + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 6) = off_26E7B8;
  *(_OWORD *)((char *)this + 56) = xmmword_20CEC0;
  *((_DWORD *)this + 18) = -1082130432;
  *(void *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 4std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((unsigned char *)this + 86) = 0;
  *(void *)this = off_2665C0;
  *((void *)this + 11) = off_2666F0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((void *)this + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = off_262DC8;
  *((unsigned char *)this + 136) = 0;
  *(_OWORD *)((char *)this + kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized<kaldi::nnet1::Quantizable16BitComponentItf>((uint64_t)this - 168) = 0u;
  *(_OWORD *)((char *)this + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *((void *)this + 18) = off_262DC8;
  *((unsigned char *)this + 184) = 0;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((void *)this + ++*(void *)(result + 24) = off_262DC8;
  *((unsigned char *)this + 23std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((void *)this + 30) = 0;
  *((void *)this + 31) = 0xFFFFFFFF00000000;
  *((_DWORD *)this + 64) = a3 / a2;
  *((_DWORD *)this + 65) = 1065353216;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((void *)this + 33) = off_262DC8;
  *((unsigned char *)this + 304) = 0;
  *((void *)this + 47) = 0;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 3--*(_DWORD *)(a9 + 60) = 0u;
  *(_OWORD *)((char *)this + 31std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  if (a3 % a2) {
    kaldi::KaldiAssertFailure_((kaldi *)"WordVecComponent", "../subproject/libquasar/libkaldi/src/nnet/nnet-word-vec-component.h", &stru_20.segname[4], "dim_out % dim_in == 0", a5);
  }
  return result;
}

void sub_101A30(_Unwind_Exception *a1)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v6);
  kaldi::CuMatrix<float>::~CuMatrix(v5);
  kaldi::CuMatrix<float>::~CuMatrix(v4);
  kaldi::CuMatrix<float>::~CuMatrix(v3);
  kaldi::CuMatrix<float>::~CuMatrix(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::FofeWordVecComponent::FofeWordVecComponent(kaldi::nnet1::FofeWordVecComponent *this, int a2, int a3, uint64_t a4, const char *a5)
{
  kaldi::nnet1::WordVecComponent::WordVecComponent(this, a2, a3, a4, a5);
  *(void *)uint64_t v5 = off_265358;
  *(void *)(v5 + 88) = off_265488;
  *(_DWORD *)(v5 + 384) = 1060320051;
  double result = 0.0;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 416) = 0u;
  *(void *)(v5 + 39std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = off_262DC8;
  *(unsigned char *)(v5 + 43std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(_OWORD *)(v5 + 448) = 0u;
  *(_OWORD *)(v5 + 464) = 0u;
  *(void *)(v5 + 440) = off_262DC8;
  *(unsigned char *)(v5 + 480) = 0;
  return result;
}

uint64_t kaldi::nnet1::CompressedWordVecComponent::CompressedWordVecComponent(uint64_t this, int a2, int a3, uint64_t a4, const char *a5)
{
  *(_DWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a3;
  *(_WORD *)(this + 16) = 0;
  *(void *)(this + ++*(void *)(result + 24) = 0;
  *(void *)(this + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(this + 40) = 0;
  *(void *)(this + 48) = 0;
  *(void *)this = off_264F30;
  *(unsigned char *)(this + 56) = 0;
  if (a3 % a2) {
    kaldi::KaldiAssertFailure_((kaldi *)"CompressedWordVecComponent", "../subproject/libquasar/libkaldi/src/nnet/nnet-compressed-word-vec-component.h", (const char *)&dword_14 + 3, "dim_out % dim_in == 0", a5);
  }
  return this;
}

void sub_101BD0(_Unwind_Exception *a1)
{
  kaldi::CompressedMatrix::Destroy(v3);
  *uint64_t v1 = v2;
  uint64_t v5 = (void *)v1[3];
  if (v5)
  {
    v1[4] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

double kaldi::nnet1::Rbm::Rbm(kaldi::nnet1::Rbm *this, int a2, int a3)
{
  *((_DWORD *)this + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 6) = 0x3F0000003ECCCCCDLL;
  *((_DWORD *)this + 14) = 1063675494;
  *(void *)((char *)this + --*(_DWORD *)(a9 + 60) = 0x7A12000000028;
  *((_DWORD *)this + 17) = 961656599;
  *(void *)this = off_265BD8;
  double result = 0.0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((void *)this + 9) = off_262DC8;
  *((unsigned char *)this + 11std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 15) = off_262E60;
  *((void *)this + 16) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 2std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((void *)this + 19) = off_262E60;
  *((void *)this + 20) = 0;
  *((_OWORD *)this + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((void *)this + 23) = off_262DC8;
  *((unsigned char *)this + 2++*(void *)(result + 24) = 0;
  *((void *)this + 31) = 0;
  *((void *)this + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((void *)this + 29) = off_262E60;
  *((void *)this + 30) = 0;
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 0;
  *((void *)this + 33) = off_262E60;
  *((void *)this + 34) = 0;
  return result;
}

double kaldi::nnet1::CnnRearrangeComponent::CnnRearrangeComponent(kaldi::nnet1::CnnRearrangeComponent *this, int a2, int a3, uint64_t a4, const char *a5)
{
  *((_DWORD *)this + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *(void *)this = off_268700;
  double result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  if (a2 != a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"CnnRearrangeComponent", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_108.size + 1, "dim_in == dim_out", a5);
  }
  return result;
}

void sub_101DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  uint64_t v14 = (void *)v11[10];
  if (v14) {
    free(v14);
  }
  void *v12 = 0;
  v12[1] = 0;
  v12[2] = 0;
  uint64_t v15 = (void *)v11[7];
  if (v15) {
    free(v15);
  }
  *a10 = 0;
  a10[1] = 0;
  a10[2] = 0;
  void *v11 = v10;
  uint64_t v16 = (void *)v11[3];
  if (v16)
  {
    v11[4] = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

kaldi::nnet1::Padding2DComponent *kaldi::nnet1::Padding2DComponent::Padding2DComponent(kaldi::nnet1::Padding2DComponent *this, int a2, int a3)
{
  *((_DWORD *)this + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *(void *)this = off_2688B0;
  kaldi::nnet1::Padding2DComponent::Init(this);
  return this;
}

void sub_101EA0(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = off_264E70;
  uint64_t v3 = (void *)v1[3];
  if (v3)
  {
    v1[4] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

kaldi::nnet1::AddShift *kaldi::nnet1::AddShift::AddShift(kaldi::nnet1::AddShift *this, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  *((_DWORD *)this + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 6) = off_26E7B8;
  *(_OWORD *)((char *)this + 56) = xmmword_20CEC0;
  *((_DWORD *)this + 18) = -1082130432;
  *(void *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 4std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((unsigned char *)this + 86) = 0;
  *(void *)this = off_264C88;
  *((void *)this + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 11) = off_262E60;
  *((void *)this + 14) = 0;
  kaldi::CuVector<float>::Resize((uint64_t)this + 88, a2, 1u, a4, a5);
  *((void *)this + 21) = 0;
  *(_OWORD *)((char *)this + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_DWORD *)this + 44) = 1065353216;
  *((void *)this + ++*(void *)(result + 24) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 23) = 0;
  *((unsigned char *)this + 208) = 0;
  return this;
}

void sub_101FC4(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

kaldi::nnet1::Rescale *kaldi::nnet1::Rescale::Rescale(kaldi::nnet1::Rescale *this, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  *((_DWORD *)this + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 6) = off_26E7B8;
  *(_OWORD *)((char *)this + 56) = xmmword_20CEC0;
  *((_DWORD *)this + 18) = -1082130432;
  *(void *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 4std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((unsigned char *)this + 86) = 0;
  *(void *)this = off_266060;
  *((void *)this + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 11) = off_262E60;
  *((void *)this + 14) = 0;
  kaldi::CuVector<float>::Resize((uint64_t)this + 88, a2, 1u, a4, a5);
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *((void *)this + 21) = off_262DC8;
  *((unsigned char *)this + 208) = 0;
  *((_DWORD *)this + 54) = 0;
  *(void *)((char *)this + 220) = 0x3F80000000000000;
  *((void *)this + 30) = 0;
  *((void *)this + 31) = 0;
  *((void *)this + 29) = 0;
  *((unsigned char *)this + 256) = 0;
  return this;
}

void sub_1020F0(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

kaldi::nnet1::KlHmm *kaldi::nnet1::KlHmm::KlHmm(kaldi::nnet1::KlHmm *this, uint64_t a2, uint64_t a3)
{
  *((_DWORD *)this + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *(void *)this = off_265710;
  kaldi::Matrix<double>::Matrix((uint64_t)this + 48, a3, a2, 0, 0);
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((void *)this + 11) = off_262DC8;
  *((unsigned char *)this + 128) = 0;
  return this;
}

void sub_102198(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = off_264E70;
  uint64_t v3 = (void *)v1[3];
  if (v3)
  {
    v1[4] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::SentenceAveragingComponent::SentenceAveragingComponent(kaldi::nnet1::SentenceAveragingComponent *this, int a2, int a3, float a4)
{
  *((_DWORD *)this + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 6) = off_26E7B8;
  *(_OWORD *)((char *)this + 56) = xmmword_20CEC0;
  *((_DWORD *)this + 18) = -1082130432;
  *(void *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 4std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((unsigned char *)this + 86) = 0;
  *(void *)this = off_266188;
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::SentenceAveragingComponent *)((char *)this + 88));
}

void sub_10227C(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::FramePoolingComponent::FramePoolingComponent(kaldi::nnet1::FramePoolingComponent *this, int a2, int a3)
{
  *((_DWORD *)this + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 6) = off_26E7B8;
  *(_OWORD *)((char *)this + 56) = xmmword_20CEC0;
  *((_DWORD *)this + 18) = -1082130432;
  *(void *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 4std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((unsigned char *)this + 86) = 0;
  *(void *)this = off_2654B0;
  *((_DWORD *)this + 2std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  double result = 0.0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((void *)this + 20) = 0;
  *((_DWORD *)this + 4std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 1008981770;
  *((unsigned char *)this + 17std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  return result;
}

uint64_t kaldi::nnet1::DuplicateComponent::DuplicateComponent(uint64_t this, int a2, int a3, uint64_t a4, const char *a5)
{
  *(_DWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a3;
  *(_WORD *)(this + 16) = 0;
  *(void *)(this + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(this + 40) = 0;
  *(void *)(this + ++*(void *)(result + 24) = 0;
  *(void *)this = off_2670C0;
  if (a2 > a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"DuplicateComponent", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", (const char *)&stru_1F8.reserved3 + 1, "dim_in <= dim_out", a5);
  }
  *(void *)(this + 48) = 0;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

void sub_1023D4(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = v2;
  uint64_t v4 = (void *)v1[3];
  if (v4)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::IdentityComponent::IdentityComponent(uint64_t this, int a2, int a3, uint64_t a4, const char *a5)
{
  *(_DWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a3;
  *(_WORD *)(this + 16) = 0;
  *(void *)(this + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(this + 40) = 0;
  *(void *)(this + ++*(void *)(result + 24) = 0;
  *(void *)this = off_267000;
  if (a2 != a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"IdentityComponent", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", &stru_1F8.segname[6], "dim_in == dim_out", a5);
  }
  return this;
}

void sub_102494(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = v2;
  uint64_t v4 = (void *)v1[3];
  if (v4)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

kaldi::nnet1::SharedNceComponent *kaldi::nnet1::SharedNceComponent::SharedNceComponent(kaldi::nnet1::SharedNceComponent *this, uint64_t a2, uint64_t a3)
{
  *((_DWORD *)this + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 6) = off_26E7B8;
  *(_OWORD *)((char *)this + 56) = xmmword_20CEC0;
  *((_DWORD *)this + 18) = -1082130432;
  *(void *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 4std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((unsigned char *)this + 86) = 0;
  *(void *)this = off_2662B0;
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)this + 88, a3, a2, 0, 0, 0);
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 17) = off_262E60;
  *((void *)this + 20) = 0;
  kaldi::CuVector<float>::Resize((uint64_t)this + 136, a3, 0, v5, v6);
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *((void *)this + 21) = off_262DC8;
  *((unsigned char *)this + 208) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((void *)this + 27) = off_262DC8;
  *((unsigned char *)this + 256) = 0;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((void *)this + 33) = off_262DC8;
  *((unsigned char *)this + 304) = 0;
  *((void *)this + 41) = 0;
  *((void *)this + 4std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((void *)this + 39) = off_262E60;
  *((void *)this + 40) = 0;
  *((void *)this + 44) = 0;
  *((void *)this + 45) = 0;
  *((void *)this + 43) = off_262E60;
  *((void *)this + 49) = 0;
  *((void *)this + 50) = 0;
  *((void *)this + 48) = 0;
  *((void *)this + 46) = 0;
  *((void *)this + 47) = off_262E60;
  __asm { FMOV            V0.2S, #1.0 }
  *((void *)this + 51) = _D0;
  *((void *)this + 5std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((void *)this + 53) = 0;
  return this;
}

void sub_1026A4(_Unwind_Exception *a1)
{
  kaldi::CuMatrix<float>::~CuMatrix(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::TemporalMaxPoolingComponent::TemporalMaxPoolingComponent(uint64_t this, int a2, int a3, uint64_t a4, const char *a5)
{
  *(_DWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a3;
  *(_WORD *)(this + 16) = 0;
  *(void *)(this + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(this + 40) = 0;
  *(void *)(this + ++*(void *)(result + 24) = 0;
  *(void *)this = off_2677E0;
  if (a2 != a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"TemporalMaxPoolingComponent", "../subproject/libquasar/libkaldi/src/nnet/nnet-temporal-max-pooling-component.h", &stru_20.segname[4], "dim_in == dim_out", a5);
  }
  return this;
}

void sub_102768(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = v2;
  uint64_t v4 = (void *)v1[3];
  if (v4)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

kaldi::nnet1::InterpolationComponent *kaldi::nnet1::InterpolationComponent::InterpolationComponent(kaldi::nnet1::InterpolationComponent *this, int a2, int a3)
{
  *((_DWORD *)this + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  uint64_t v4 = (void **)((char *)this + 48);
  *(void *)this = off_265648;
  int v5 = a2 / a3;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  if (a2 % a3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "InterpolationComponent", "../subproject/libquasar/libkaldi/src/nnet/nnet-interpolation-component.h", 29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"The input dimension is not divisible by the output dimension", 60);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
  }
  if (v5 >= 1)
  {
    uint64_t v6 = 0;
    int v7 = 0;
    float v8 = 1.0 / (double)v5;
    uint64_t v9 = (void *)((char *)this + 64);
    do
    {
      if ((unint64_t)v6 >= *v9)
      {
        int v11 = (float *)*v4;
        uint64_t v12 = ((char *)v6 - (unsigned char *)*v4) >> 2;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = *v9 - (void)v11;
        if (v14 >> 1 > v13) {
          unint64_t v13 = v14 >> 1;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)this + 64, v15);
          int v11 = (float *)*((void *)this + 6);
          uint64_t v6 = (float *)*((void *)this + 7);
        }
        else
        {
          uint64_t v16 = 0;
        }
        float v17 = (float *)&v16[4 * v12];
        *float v17 = v8;
        uint64_t v10 = v17 + 1;
        while (v6 != v11)
        {
          int v18 = *((_DWORD *)v6-- - 1);
          *((_DWORD *)v17-- - 1) = v18;
        }
        *((void *)this + 6) = v17;
        *((void *)this + 7) = v10;
        *((void *)this + 8) = &v16[4 * v15];
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        *uint64_t v6 = v8;
        uint64_t v10 = v6 + 1;
      }
      *((void *)this + 7) = v10;
      ++v7;
      uint64_t v6 = v10;
    }
    while (v7 != v5);
  }
  return this;
}

void sub_10296C(_Unwind_Exception *exception_object)
{
  int v5 = *v3;
  if (*v3)
  {
    v1[7] = v5;
    operator delete(v5);
  }
  *uint64_t v1 = v2;
  uint64_t v6 = (void *)v1[3];
  if (v6)
  {
    v1[4] = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

kaldi::nnet1::CompressedWordTransComponent *kaldi::nnet1::CompressedWordTransComponent::CompressedWordTransComponent(kaldi::nnet1::CompressedWordTransComponent *this, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  *((_DWORD *)this + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *(void *)this = off_266718;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 6) = off_262E60;
  *((void *)this + 7) = 0;
  kaldi::CuVector<float>::Resize((uint64_t)this + 48, a2, 0, a4, a5);
  *((void *)this + 10) = 0;
  *((unsigned char *)this + 88) = 0;
  *((_DWORD *)this + ++*(void *)(result + 24) = -1;
  return this;
}

void sub_102A2C(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = off_264E70;
  uint64_t v3 = (void *)v1[3];
  if (v3)
  {
    v1[4] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *kaldi::nnet1::AttentionBaseInferenceComponent::AttentionBaseInferenceComponent(uint64_t *this, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *this = *a2;
  *(uint64_t *)((char *)this + *(void *)(v2 - 40)) = a2[1];
  *(uint64_t *)((char *)this + *(void *)(*this - 48)) = a2[2];
  *(uint64_t *)((char *)this + *(void *)(*this - 56)) = a2[3];
  return this;
}

double kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this, uint64_t *a2)
{
  uint64_t v3 = kaldi::nnet1::AttentionBaseInferenceComponent::AttentionBaseInferenceComponent((uint64_t *)this, a2 + 1);
  uint64_t v4 = *a2;
  uint64_t *v3 = *a2;
  *(uint64_t *)((char *)v3 + *(void *)(v4 - 40)) = a2[5];
  *(uint64_t *)((char *)v3 + *(void *)(*v3 - 48)) = a2[6];
  *(uint64_t *)((char *)v3 + *(void *)(*v3 - 56)) = a2[7];
  double result = 0.0;
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  v3[1] = (uint64_t)off_262DC8;
  *((unsigned char *)v3 + 48) = 0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  v3[7] = (uint64_t)off_262DC8;
  *((unsigned char *)v3 + 96) = 0;
  *((unsigned char *)v3 + 104) = 0;
  *((_DWORD *)v3 + 27) = 1065353216;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  return result;
}

void kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(kaldi::nnet1::MultiHeadAttention *this, uint64_t *a2)
{
  kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(this, a2 + 1);
  uint64_t v3 = *a2;
  *(void *)uint64_t v4 = *a2;
  *(void *)(v4 + *(void *)(v3 - 40)) = a2[9];
  *(void *)(v4 + *(void *)(*(void *)v4 - 48)) = a2[10];
  *(void *)(v4 + *(void *)(*(void *)v4 - 56)) = a2[11];
  *(_DWORD *)(v4 + 144) = -1;
}

uint64_t kaldi::nnet1::RelaxedSoftmax::RelaxedSoftmax(uint64_t this, int a2, int a3, float a4)
{
  *(_DWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a3;
  *(_WORD *)(this + 16) = 0;
  *(void *)(this + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(this + 40) = 0;
  *(void *)(this + ++*(void *)(result + 24) = 0;
  *(void *)this = off_266880;
  *(float *)(this + 48) = a4;
  if (a4 <= 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RelaxedSoftmax", "../subproject/libquasar/libkaldi/src/nnet/nnet-activation.h", 59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Relaxation factor must be positive; found: ",
      43);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return this;
}

void sub_102F54(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = v2;
  uint64_t v4 = (void *)v1[3];
  if (v4)
  {
    v1[4] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

kaldi::nnet1::BlockSoftmax *kaldi::nnet1::BlockSoftmax::BlockSoftmax(kaldi::nnet1::BlockSoftmax *this, const kaldi::nnet1::BlockSoftmax *a2)
{
  *(void *)this = off_264E70;
  uint64_t v4 = *((void *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((void *)this + 1) = v4;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)this + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3);
  *(void *)this = off_264DB0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 6, *((const void **)a2 + 6), *((void *)a2 + 7), (uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 2);
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 9, *((const void **)a2 + 9), *((void *)a2 + 10), (uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 2);
  return this;
}

void sub_103048(_Unwind_Exception *exception_object)
{
  int v5 = *v3;
  if (*v3)
  {
    v1[7] = v5;
    operator delete(v5);
  }
  *uint64_t v1 = v2;
  uint64_t v6 = (void *)v1[3];
  if (v6)
  {
    v1[4] = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::BlockSoftmax::InitOffset(std::vector<int> *this)
{
  std::vector<int>::size_type v2 = this[2].__end_ - this[2].__begin_ + 1;
  LODWORD(v12[0]) = 0;
  std::vector<int>::resize(this + 3, v2, (std::vector<int>::const_reference)v12);
  std::vector<int>::pointer begin = this[2].__begin_;
  std::vector<int>::pointer end = this[2].__end_;
  uint64_t v5 = (char *)end - (char *)begin;
  if (end != begin)
  {
    std::vector<int>::pointer v6 = this[3].__begin_;
    unint64_t v7 = v5 >> 2;
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    int v10 = *v6;
    float v8 = v6 + 1;
    int v9 = v10;
    do
    {
      int v11 = *begin++;
      v9 += v11;
      *v8++ = v9;
      --v7;
    }
    while (v7);
  }
  if (HIDWORD(this->__end_) != *(this[3].__end_ - 1))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12, "InitOffset", "../subproject/libquasar/libkaldi/src/nnet/nnet-activation.h", 273);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "Total block dimensions and output dimension mismatch");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
}

int *kaldi::CuArray<int>::CuArray(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(void *)(a2 + 16);
  kaldi::CuArray<int>::Resize((uint64_t)a1, *(_DWORD *)a2, 1u, a4, a5);
  uint64_t v7 = *a1;
  if (v7) {
    memcpy(*((void **)a1 + 1), *(const void **)(a2 + 8), 4 * v7);
  }
  return a1;
}

void *kaldi::operator<<<int>(void *a1, int *a2)
{
  memset(&__p, 0, sizeof(__p));
  kaldi::CuArray<int>::CopyToVec(a2, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[", 1);
  if (__p.__end_ != __p.__begin_)
  {
    unint64_t v3 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
      std::ostream::operator<<();
      ++v3;
    }
    while (v3 < __p.__end_ - __p.__begin_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ]\n", 3);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  return a1;
}

void sub_103278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

kaldi::nnet1::AddShift *kaldi::nnet1::AddShift::AddShift(kaldi::nnet1::AddShift *this, const kaldi::nnet1::AddShift *a2)
{
  *(void *)this = off_264E70;
  uint64_t v4 = *((void *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((void *)this + 1) = v4;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)this + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3);
  *(void *)this = off_266498;
  *((void *)this + 6) = off_26E7B8;
  long long v5 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)((char *)a2 + 71);
  *(_OWORD *)((char *)this + 56) = v5;
  *(void *)this = off_264C88;
  kaldi::CuVector<float>::CuVector((uint64_t)this + 88, (uint64_t)a2 + 88, v6, v7, v8);
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)this + 15, *((void *)a2 + 15), *((void *)a2 + 16), (uint64_t)(*((void *)a2 + 16) - *((void *)a2 + 15)) >> 5);
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)this + 18, *((void *)a2 + 18), *((void *)a2 + 19), (uint64_t)(*((void *)a2 + 19) - *((void *)a2 + 18)) >> 5);
  uint64_t v9 = *((void *)a2 + 21);
  int v10 = *((_DWORD *)a2 + 44);
  *((void *)this + 23) = 0;
  *((_DWORD *)this + 44) = v10;
  *((void *)this + 21) = v9;
  *((void *)this + ++*(void *)(result + 24) = 0;
  *((void *)this + 25) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 23, *((const void **)a2 + 23), *((void *)a2 + 24), (uint64_t)(*((void *)a2 + 24) - *((void *)a2 + 23)) >> 2);
  *((unsigned char *)this + 208) = *((unsigned char *)a2 + 208);
  return this;
}

void sub_10340C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  kaldi::CuVector<float>::~CuVector(v3);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
  _Unwind_Resume(a1);
}

void sub_1035A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AddShift::EnsureCorrs(kaldi::nnet1::AddShift *this)
{
  if (!*((unsigned char *)this + 208))
  {
    int v2 = *((_DWORD *)this + 42);
    int v3 = *((_DWORD *)this + 20);
    if (v3 > 1) {
      int v4 = v3 + 1;
    }
    else {
      int v4 = 1;
    }
    std::vector<int>::size_type v5 = v4;
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 15, v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 18, v4);
    if (v4 >= 1)
    {
      uint64_t v8 = 0;
      unsigned int v9 = v2 & 0xFFFFFFFE;
      do
      {
        kaldi::CuVector<float>::Resize(*((void *)this + 15) + v8, *((unsigned int *)this + 26), 0, v6, v7);
        if (v9 == 2)
        {
          kaldi::CuVector<float>::Resize(*((void *)this + 18) + v8, *((unsigned int *)this + 26), 1u, v6, v7);
          if (*((_DWORD *)this + 42) == 3) {
            kaldi::CuVectorBase<float>::Set(*((void *)this + 18) + v8, 1.0);
          }
        }
        v8 += 32;
      }
      while (32 * v5 != v8);
    }
    std::vector<int>::resize((std::vector<int> *)((char *)this + 184), v5);
    *((unsigned char *)this + 208) = 1;
  }
}

kaldi::nnet1::Rescale *kaldi::nnet1::Rescale::Rescale(kaldi::nnet1::Rescale *this, const kaldi::nnet1::Rescale *a2)
{
  *(void *)this = off_264E70;
  uint64_t v4 = *((void *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((void *)this + 1) = v4;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)this + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3);
  *(void *)this = off_266498;
  *((void *)this + 6) = off_26E7B8;
  long long v5 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)((char *)a2 + 71);
  *(_OWORD *)((char *)this + 56) = v5;
  *(void *)this = off_266060;
  kaldi::CuVector<float>::CuVector((uint64_t)this + 88, (uint64_t)a2 + 88, v6, v7, v8);
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)this + 15, *((void *)a2 + 15), *((void *)a2 + 16), (uint64_t)(*((void *)a2 + 16) - *((void *)a2 + 15)) >> 5);
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)this + 18, *((void *)a2 + 18), *((void *)a2 + 19), (uint64_t)(*((void *)a2 + 19) - *((void *)a2 + 18)) >> 5);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 168, (char *)a2 + 168, 111);
  uint64_t v9 = *((void *)a2 + 27);
  int v10 = *((_DWORD *)a2 + 56);
  *((void *)this + 29) = 0;
  *((_DWORD *)this + 56) = v10;
  *((void *)this + 27) = v9;
  *((void *)this + 30) = 0;
  *((void *)this + 31) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 29, *((const void **)a2 + 29), *((void *)a2 + 30), (uint64_t)(*((void *)a2 + 30) - *((void *)a2 + 29)) >> 2);
  *((unsigned char *)this + 256) = *((unsigned char *)a2 + 256);
  return this;
}

void sub_103850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::CuMatrix<float>::~CuMatrix(v4);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  kaldi::CuVector<float>::~CuVector(v3);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Rescale::EnsureCorrs(kaldi::nnet1::Rescale *this)
{
  if (!*((unsigned char *)this + 256))
  {
    int v2 = *((_DWORD *)this + 54);
    int v3 = *((_DWORD *)this + 20);
    if (v3 > 1) {
      int v4 = v3 + 1;
    }
    else {
      int v4 = 1;
    }
    std::vector<int>::size_type v5 = v4;
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 15, v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 18, v4);
    if (v4 >= 1)
    {
      uint64_t v8 = 0;
      unsigned int v9 = v2 & 0xFFFFFFFE;
      do
      {
        kaldi::CuVector<float>::Resize(*((void *)this + 15) + v8, *((unsigned int *)this + 26), 0, v6, v7);
        if (v9 == 2)
        {
          kaldi::CuVector<float>::Resize(*((void *)this + 18) + v8, *((unsigned int *)this + 26), 1u, v6, v7);
          if (*((_DWORD *)this + 54) == 3) {
            kaldi::CuVectorBase<float>::Set(*((void *)this + 18) + v8, 1.0);
          }
        }
        v8 += 32;
      }
      while (32 * v5 != v8);
    }
    std::vector<int>::resize((std::vector<int> *)((char *)this + 232), v5);
    *((unsigned char *)this + 256) = 1;
  }
}

kaldi::nnet1::Rbm *kaldi::nnet1::Rbm::Rbm(kaldi::nnet1::Rbm *this, const kaldi::nnet1::Rbm *a2)
{
  *(void *)this = off_264E70;
  uint64_t v4 = *((void *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((void *)this + 1) = v4;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)this + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3);
  *(void *)this = off_2671E0;
  long long v5 = *((_OWORD *)a2 + 3);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((_OWORD *)this + 3) = v5;
  *(void *)this = off_265BD8;
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 72, (char *)a2 + 72, 111);
  kaldi::CuVector<float>::CuVector((uint64_t)this + 120, (uint64_t)a2 + 120, v6, v7, v8);
  kaldi::CuVector<float>::CuVector((uint64_t)this + 152, (uint64_t)a2 + 152, v9, v10, v11);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 184, (char *)a2 + 184, 111);
  kaldi::CuVector<float>::CuVector((uint64_t)this + 232, (uint64_t)a2 + 232, v12, v13, v14);
  kaldi::CuVector<float>::CuVector((uint64_t)this + 264, (uint64_t)a2 + 264, v15, v16, v17);
  *((void *)this + 37) = *((void *)a2 + 37);
  return this;
}

void sub_103AE0(_Unwind_Exception *a1)
{
  kaldi::CuVector<float>::~CuVector(v7);
  kaldi::CuMatrix<float>::~CuMatrix(v6);
  kaldi::CuVector<float>::~CuVector(v5);
  kaldi::CuVector<float>::~CuVector(v4);
  kaldi::CuMatrix<float>::~CuMatrix(v3);
  *uint64_t v1 = v2;
  uint64_t v9 = (void *)v1[3];
  if (v9)
  {
    v1[4] = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

void sub_103B48()
{
}

float kaldi::nnet1::CheckNanInf<float>(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  float result = kaldi::CuMatrixBase<float>::Sum(a1, (uint64_t)a2, a3, a4, a5);
  if (fabsf(result) == INFINITY)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8, "CheckNanInf", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", 232);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"'inf' in ", 9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, a2);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  return result;
}

float kaldi::nnet1::ComputeStdDev<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v7 = *(_DWORD *)(a1 + 16);
  int v6 = *(_DWORD *)(a1 + 20);
  float v8 = kaldi::CuMatrixBase<float>::Sum(a1, a2, a3, a4, a5);
  uint64_t v9 = kaldi::CuMatrix<float>::CuMatrix(v25, a1, 111);
  kaldi::CuMatrixBase<float>::MulElements(v9, a1, v10, v11, v12);
  float v17 = kaldi::CuMatrixBase<float>::Sum((uint64_t)v25, v13, v14, v15, v16);
  float v18 = (float)(v7 * v6);
  float v19 = v8 / v18;
  float v20 = v17 / v18;
  if ((float)(v20 - (float)(v19 * v19)) >= 0.0)
  {
    float v21 = v20 - (float)(v19 * v19);
  }
  else
  {
    float v21 = 0.0;
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24, "ComputeStdDev", "../subproject/libquasar/libkaldi/src/nnet/nnet-various.h", 247);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Forcing the variance to be non-negative! ", 41);
      uint64_t v22 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"->0.0", 5);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
    }
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v25);
  return sqrtf(v21);
}

void sub_103D28(_Unwind_Exception *a1)
{
  kaldi::CuMatrix<float>::~CuMatrix(v1 - 96);
  _Unwind_Resume(a1);
}

kaldi::nnet1::Recurrent *kaldi::nnet1::Recurrent::Recurrent(kaldi::nnet1::Recurrent *this, const kaldi::nnet1::Recurrent *a2)
{
  uint64_t v4 = (char *)a2 + *(void *)(*(void *)a2 - 24);
  *((void *)this + 66) = off_264E70;
  uint64_t v5 = *((void *)v4 + 1);
  *((_WORD *)this + 27std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = *((_WORD *)v4 + 8);
  *((void *)this + 67) = v5;
  *((void *)this + 69) = 0;
  *((void *)this + 71) = 0;
  *((void *)this + 70) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)this + 69, *((const void **)v4 + 3), *((void *)v4 + 4), (uint64_t)(*((void *)v4 + 4) - *((void *)v4 + 3)) >> 3);
  *((void *)this + 66) = off_266498;
  *((void *)this + 7std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = off_26E7B8;
  long long v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)((char *)this + 599) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)((char *)this + 584) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent(this, (const kaldi::nnet1::RecurrentBaseComponent *)off_266038, (uint64_t)a2);
  *(void *)this = off_265CC8;
  *((void *)this + 66) = off_265F18;
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 160, (char *)a2 + 160, 111);
  kaldi::CuVector<float>::CuVector((uint64_t)this + 208, (uint64_t)a2 + 208, v7, v8, v9);
  *((void *)this + 30) = 0;
  *((void *)this + 31) = 0;
  *((void *)this + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 30, *((void *)a2 + 30), *((void *)a2 + 31), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 31) - *((void *)a2 + 30)) >> 4));
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  *((void *)this + 35) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)this + 33, *((void *)a2 + 33), *((void *)a2 + 34), (uint64_t)(*((void *)a2 + 34) - *((void *)a2 + 33)) >> 5);
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  *((void *)this + 38) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 36, *((void *)a2 + 36), *((void *)a2 + 37), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 37) - *((void *)a2 + 36)) >> 4));
  *((void *)this + 39) = 0;
  *((void *)this + 40) = 0;
  *((void *)this + 41) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)this + 39, *((void *)a2 + 39), *((void *)a2 + 40), (uint64_t)(*((void *)a2 + 40) - *((void *)a2 + 39)) >> 5);
  *((void *)this + 4std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((void *)this + 43) = 0;
  *((void *)this + 44) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 42, *((void *)a2 + 42), *((void *)a2 + 43), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 43) - *((void *)a2 + 42)) >> 4));
  *((void *)this + 45) = 0;
  *((void *)this + 46) = 0;
  *((void *)this + 47) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 45, *((void *)a2 + 45), *((void *)a2 + 46), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 46) - *((void *)a2 + 45)) >> 4));
  long long v10 = *((_OWORD *)a2 + 24);
  *((_DWORD *)this + 100) = *((_DWORD *)a2 + 100);
  *((_OWORD *)this + ++*(void *)(result + 24) = v10;
  *((void *)this + 5std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((void *)this + 53) = 0;
  *((void *)this + 51) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 51, *((const void **)a2 + 51), *((void *)a2 + 52), (uint64_t)(*((void *)a2 + 52) - *((void *)a2 + 51)) >> 2);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 432, (char *)a2 + 432, 111);
  *((void *)this + --*(_DWORD *)(a9 + 60) = 0;
  *((void *)this + 61) = 0;
  *((void *)this + 6std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)this + 60, *((void *)a2 + 60), *((void *)a2 + 61), (uint64_t)(*((void *)a2 + 61) - *((void *)a2 + 60)) >> 5);
  *((void *)this + 63) = 0;
  *((void *)this + 64) = 0;
  *((void *)this + 65) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 63, *((void *)a2 + 63), *((void *)a2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 64) - *((void *)a2 + 63)) >> 4));
  return this;
}

void sub_104054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void *a12, uint64_t a13, void **a14)
{
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a14);
  kaldi::CuMatrix<float>::~CuMatrix(v17);
  float v19 = *v16;
  if (*v16)
  {
    *((void *)v15 + 5std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v19;
    operator delete(v19);
  }
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a14);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a14);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a14);
  a14 = a10;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a14);
  a14 = a11;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a14);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a14);
  kaldi::CuVector<float>::~CuVector(a12);
  kaldi::CuMatrix<float>::~CuMatrix(a13);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(v15, (uint64_t *)off_266038);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v14);
  _Unwind_Resume(a1);
}

void sub_10411C()
{
}

void sub_104124()
{
}

void sub_10412C()
{
}

void sub_104134()
{
}

void sub_10413C()
{
}

void sub_104144()
{
}

void sub_10414C()
{
}

void sub_104154()
{
}

kaldi::nnet1::RecurrentBaseComponent *kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent(kaldi::nnet1::RecurrentBaseComponent *this, const kaldi::nnet1::RecurrentBaseComponent *a2, uint64_t a3)
{
  *(void *)this = off_2655D8;
  *((void *)this + std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 1, *(void *)(a3 + 8), *(void *)(a3 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 4));
  *((void *)this + 4) = off_26E7D8;
  *((_DWORD *)this + 10) = *(_DWORD *)(a3 + 40);
  uint64_t v6 = *(void *)a2;
  *(void *)this = *(void *)a2;
  *(void *)((char *)this + *(void *)(v6 - 24)) = *((void *)a2 + 1);
  *((void *)this + 6) = off_26E7B8;
  long long v7 = *(_OWORD *)(a3 + 56);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)(a3 + 71);
  *(_OWORD *)((char *)this + 56) = v7;
  *(void *)&long long v7 = *(void *)(a3 + 96);
  *((void *)this + 13) = 0;
  *((void *)this + 6) = off_26E7F8;
  *((void *)this + 11) = off_26E818;
  *((void *)this + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v7;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)this + 13, *(void *)(a3 + 104), *(void *)(a3 + 112), (uint64_t)(*(void *)(a3 + 112) - *(void *)(a3 + 104)) >> 5);
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 16, *(void *)(a3 + 128), *(void *)(a3 + 136), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 136) - *(void *)(a3 + 128)) >> 4));
  *((void *)this + 19) = *(void *)(a3 + 152);
  return this;
}

void sub_104348(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  kaldi::nnet1::RecurrentNnetTrainOptions::~RecurrentNnetTrainOptions(v3);
  kaldi::nnet1::HistoricalComponent::~HistoricalComponent(v2);
  _Unwind_Resume(a1);
}

void sub_1044BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Recurrent::EnsureTrainingBuffers(kaldi::nnet1::Recurrent *this)
{
  if (!*((unsigned char *)this + 389))
  {
    int v2 = *((_DWORD *)this + 39);
    int v3 = *((_DWORD *)this + 20);
    if (v3 > 1) {
      uint64_t v4 = (v3 + 1);
    }
    else {
      uint64_t v4 = 1;
    }
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 30, (int)v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 33, (int)v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 45, (int)v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 36, (int)v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 39, (int)v4);
    if ((int)v4 >= 1)
    {
      uint64_t v5 = 0;
      uint64_t v6 = (*((_DWORD *)this + 24) + *((_DWORD *)this + 24) * *((_DWORD *)this + 25));
      unsigned int v7 = v2 & 0xFFFFFFFE;
      do
      {
        kaldi::CuMatrix<float>::Resize(*((void *)this + 30) + 48 * v5, *((unsigned int *)this + 45), *((unsigned int *)this + 44), 0, 0);
        kaldi::CuVector<float>::Resize(*((void *)this + 33) + 32 * v5, *((unsigned int *)this + 56), 0, v8, v9);
        kaldi::CuMatrix<float>::Resize(*((void *)this + 45) + 48 * v5, v6, *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12), 0, 0);
        if (v7 == 2)
        {
          kaldi::CuMatrix<float>::Resize(*((void *)this + 36) + 48 * v5, *((unsigned int *)this + 45), *((unsigned int *)this + 44), 1u, 0);
          kaldi::CuVector<float>::Resize(*((void *)this + 39) + 32 * v5, *((unsigned int *)this + 56), 1u, v10, v11);
          if (*((_DWORD *)this + 39) == 3)
          {
            kaldi::CuMatrixBase<float>::Set(*((void *)this + 36) + 48 * v5, v12, v13, v14, v15, 1.0);
            kaldi::CuVectorBase<float>::Set(*((void *)this + 39) + 32 * v5, 1.0);
          }
        }
        ++v5;
      }
      while (v5 != v4);
    }
    if (*((float *)this + 100) > 0.0) {
      kaldi::CuMatrix<float>::Resize((uint64_t)this + 432, *((unsigned int *)this + 45), *((unsigned int *)this + 44), 1u, 0);
    }
    *((unsigned char *)this + 389) = 1;
  }
}

kaldi::nnet1::ConvolutionalComponent *kaldi::nnet1::ConvolutionalComponent::ConvolutionalComponent(kaldi::nnet1::ConvolutionalComponent *this, const kaldi::nnet1::ConvolutionalComponent *a2)
{
  *(void *)this = off_264E70;
  uint64_t v4 = *((void *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((void *)this + 1) = v4;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)this + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3);
  *(void *)this = off_266498;
  *((void *)this + 6) = off_26E7B8;
  long long v5 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)((char *)a2 + 71);
  *(_OWORD *)((char *)this + 56) = v5;
  *(void *)this = off_264FF0;
  uint64_t v6 = *((void *)a2 + 11);
  *((_DWORD *)this + ++*(void *)(result + 24) = *((_DWORD *)a2 + 24);
  *((void *)this + 11) = v6;
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 104, (char *)a2 + 104, 111);
  kaldi::CuVector<float>::CuVector((uint64_t)this + 152, (uint64_t)a2 + 152, v7, v8, v9);
  uint64_t v10 = *((void *)a2 + 23);
  *((void *)this + ++*(void *)(result + 24) = 0;
  *((void *)this + 23) = v10;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 24, *((void *)a2 + 24), *((void *)a2 + 25), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 25) - *((void *)a2 + 24)) >> 4));
  *((void *)this + 27) = 0;
  *((void *)this + 28) = 0;
  *((void *)this + 29) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)this + 27, *((void *)a2 + 27), *((void *)a2 + 28), (uint64_t)(*((void *)a2 + 28) - *((void *)a2 + 27)) >> 5);
  *((void *)this + 30) = 0;
  *((void *)this + 31) = 0;
  *((void *)this + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 30, *((void *)a2 + 30), *((void *)a2 + 31), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 31) - *((void *)a2 + 30)) >> 4));
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  *((void *)this + 35) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)this + 33, *((void *)a2 + 33), *((void *)a2 + 34), (uint64_t)(*((void *)a2 + 34) - *((void *)a2 + 33)) >> 5);
  uint64_t v11 = *((void *)a2 + 36);
  *((_DWORD *)this + 74) = *((_DWORD *)a2 + 74);
  *((void *)this + 36) = v11;
  *((void *)this + 39) = 0;
  *((void *)this + 40) = 0;
  *((void *)this + 38) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 38, *((void *)a2 + 38), *((void *)a2 + 39), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 39) - *((void *)a2 + 38)) >> 4));
  *((void *)this + 41) = 0;
  *((void *)this + 4std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((void *)this + 43) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 41, *((void *)a2 + 41), *((void *)a2 + 42), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 42) - *((void *)a2 + 41)) >> 4));
  *((void *)this + 44) = 0;
  *((void *)this + 45) = 0;
  *((void *)this + 46) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 44, *((const void **)a2 + 44), *((void *)a2 + 45), (uint64_t)(*((void *)a2 + 45) - *((void *)a2 + 44)) >> 2);
  *((unsigned char *)this + 376) = *((unsigned char *)a2 + 376);
  return this;
}

void sub_1048FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  kaldi::CuVector<float>::~CuVector(v3);
  kaldi::CuMatrix<float>::~CuMatrix(a2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
  _Unwind_Resume(a1);
}

void sub_104988()
{
}

void sub_104990()
{
}

void sub_104998()
{
}

void sub_1049A0()
{
}

void kaldi::nnet1::ConvolutionalComponent::EnsureCorrs(kaldi::nnet1::ConvolutionalComponent *this)
{
  if (!*((unsigned char *)this + 376))
  {
    int v2 = *((_DWORD *)this + 46);
    int v3 = *((_DWORD *)this + 20);
    if (v3 > 1) {
      int v4 = v3 + 1;
    }
    else {
      int v4 = 1;
    }
    std::vector<int>::size_type v5 = v4;
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 24, v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 27, v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 30, v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 33, v4);
    if (v4 >= 1)
    {
      uint64_t v6 = 0;
      unsigned int v7 = v2 & 0xFFFFFFFE;
      do
      {
        kaldi::CuMatrix<float>::Resize(*((void *)this + 24) + 48 * v6, *((unsigned int *)this + 31), *((unsigned int *)this + 30), 0, 0);
        kaldi::CuVector<float>::Resize(*((void *)this + 27) + 32 * v6, *((unsigned int *)this + 31), 0, v8, v9);
        if (v7 == 2)
        {
          kaldi::CuMatrix<float>::Resize(*((void *)this + 30) + 48 * v6, *((unsigned int *)this + 31), *((unsigned int *)this + 30), 1u, 0);
          kaldi::CuVector<float>::Resize(*((void *)this + 33) + 32 * v6, *((unsigned int *)this + 31), 1u, v10, v11);
          if (*((_DWORD *)this + 46) == 3)
          {
            kaldi::CuMatrixBase<float>::Set(*((void *)this + 30) + 48 * v6, v12, v13, v14, v15, 1.0);
            kaldi::CuVectorBase<float>::Set(*((void *)this + 33) + 32 * v6, 1.0);
          }
        }
        ++v6;
      }
      while (v6 != v5);
    }
    std::vector<int>::resize((std::vector<int> *)((char *)this + 352), v5);
    *((unsigned char *)this + 376) = 1;
  }
}

kaldi::nnet1::MaxPooling2DComponent *kaldi::nnet1::MaxPooling2DComponent::MaxPooling2DComponent(kaldi::nnet1::MaxPooling2DComponent *this, const kaldi::nnet1::MaxPooling2DComponent *a2)
{
  *(void *)this = off_264E70;
  uint64_t v4 = *((void *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((void *)this + 1) = v4;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)this + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3);
  *(void *)this = off_264BC8;
  *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
  *((void *)this + 8) = *((void *)a2 + 8);
  return this;
}

kaldi::nnet1::Desplice *kaldi::nnet1::Desplice::Desplice(kaldi::nnet1::Desplice *this, const kaldi::nnet1::Desplice *a2)
{
  *(void *)this = off_264E70;
  uint64_t v4 = *((void *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((void *)this + 1) = v4;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)this + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3);
  *(void *)this = off_2651D8;
  uint64_t v5 = *((void *)a2 + 6);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((void *)this + 6) = v5;
  kaldi::CuArray<int>::CuArray((int *)this + 16, (uint64_t)a2 + 64, v6, v7, v8);
  kaldi::CuArray<int>::CuArray((int *)this + 22, (uint64_t)a2 + 88, v9, v10, v11);
  kaldi::CuArray<int>::CuArray((int *)this + 28, (uint64_t)a2 + 112, v12, v13, v14);
  kaldi::CuArray<int>::CuArray((int *)this + 34, (uint64_t)a2 + 136, v15, v16, v17);
  return this;
}

void sub_104C88(_Unwind_Exception *exception_object)
{
  uint64_t v7 = (void *)v1[15];
  if (v7) {
    free(v7);
  }
  void *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  uint64_t v8 = (void *)v1[12];
  if (v8) {
    free(v8);
  }
  *uint64_t v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  uint64_t v9 = (void *)v1[9];
  if (v9) {
    free(v9);
  }
  void *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  *uint64_t v1 = v2;
  uint64_t v10 = (void *)v1[3];
  if (v10)
  {
    v1[4] = v10;
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Desplice::Init(kaldi::nnet1::Desplice *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5 = *((_DWORD *)this + 2);
  int v6 = *((_DWORD *)this + 14);
  int v7 = v5 / v6;
  if (v5 % v6) {
    kaldi::KaldiAssertFailure_((kaldi *)"Init", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolution-splicer.h", &stru_68.sectname[15], "input_dim_ % time_length_ == 0", a5);
  }
  int v9 = *((_DWORD *)this + 12);
  int v10 = v6 / v9;
  int v11 = *((_DWORD *)this + 3);
  if (v11 != v10 * v7) {
    kaldi::KaldiAssertFailure_((kaldi *)"Init", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolution-splicer.h", &stru_68.segname[2], "output_dim_ == out_time_length * other_dim", a5);
  }
  int v12 = *((_DWORD *)this + 13) * v9;
  std::vector<int>::vector(&v46, v11 * v12);
  std::vector<int>::vector(&v45, *((int *)this + 3) * (uint64_t)v12);
  std::vector<int>::size_type v13 = *((int *)this + 13) * (uint64_t)*((int *)this + 2);
  LODWORD(__x.__begin_) = -1;
  std::vector<int>::vector(&v44, v13, (const std::vector<int>::value_type *)&__x);
  std::vector<int>::size_type v14 = *((int *)this + 13) * (uint64_t)*((int *)this + 2);
  std::vector<int>::value_type v42 = -1;
  std::vector<int>::vector(&__x, v14, &v42);
  if (v12 >= 1)
  {
    int v17 = 0;
    uint64_t v15 = "n >= 0 && n < output_dim_";
    do
    {
      if (v7 >= 1)
      {
        int v18 = 0;
        for (int i = 0; i != v7; ++i)
        {
          if (v10 >= 1)
          {
            int v20 = 0;
            std::vector<int>::pointer begin = v46.__begin_;
            unint64_t v22 = v46.__end_ - v46.__begin_;
            std::vector<int>::pointer v23 = v44.__begin_;
            unint64_t v24 = v44.__end_ - v44.__begin_;
            uint64_t v16 = (const char *)v45.__begin_;
            std::vector<int>::pointer v25 = __x.__begin_;
            uint64_t v26 = v18;
            while (1)
            {
              if (v18 < 0 || (int v27 = *((_DWORD *)this + 3), (int)v26 >= v27))
              {
                long long v41 = (unsigned char *)(&stru_68 + 33);
                goto LABEL_35;
              }
              int v28 = v18 + v20 + v17 * v27;
              if (v22 <= v28) {
                break;
              }
              int v29 = *((_DWORD *)this + 13);
              if (v29 < 0)
              {
                long long v41 = (unsigned char *)(&stru_68 + 35);
                uint64_t v15 = "r >= 0 && r < row_stride_";
                goto LABEL_35;
              }
              int v30 = v17 / v29 + *((_DWORD *)this + 12) * v20;
              int v31 = *((_DWORD *)this + 14);
              int v32 = v30 + v31 * i;
              if (v32 < 0 || (int v33 = *((_DWORD *)this + 2), v32 >= v33))
              {
                long long v41 = (unsigned char *)(&stru_68 + 36);
                uint64_t v15 = "c >= 0 && c < input_dim_";
                goto LABEL_35;
              }
              if (v30 >= v31)
              {
                long long v41 = (unsigned char *)(&stru_68 + 37);
                uint64_t v15 = "src_frame < time_length_";
                goto LABEL_35;
              }
              int v34 = v17 % v29;
              if (v24 <= v32 + v33 * v34)
              {
                long long v41 = (unsigned char *)(&stru_68 + 38);
                uint64_t v15 = "r * input_dim_ + c < backward_r_h.size()";
                goto LABEL_35;
              }
              begin[v28] = v34;
              *(_DWORD *)&v16[4 * v26 + 4 * *((int *)this + 3) * (uint64_t)v17] = v32;
              v23[v32 + *((_DWORD *)this + 2) * v34] = v17;
              v25[v32 + *((_DWORD *)this + 2) * v34] = v26;
              ++v20;
              ++v26;
              if (v10 == v20) {
                goto LABEL_18;
              }
            }
            long long v41 = (char *)&stru_68.addr + 2;
            uint64_t v15 = "m * output_dim_ + n < forward_r_h.size()";
LABEL_35:
            kaldi::KaldiAssertFailure_((kaldi *)"Init", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolution-splicer.h", v41, v15, v16);
          }
LABEL_18:
          v18 += v10;
        }
      }
      ++v17;
    }
    while (v17 != v12);
  }
  kaldi::CuArray<int>::Resize((uint64_t)this + 64, (unint64_t)((char *)v46.__end_ - (char *)v46.__begin_) >> 2, 1u, (uint64_t)v15, v16);
  memcpy(*((void **)this + 9), v46.__begin_, (char *)v46.__end_ - (char *)v46.__begin_);
  kaldi::CuArray<int>::Resize((uint64_t)this + 88, (unint64_t)((char *)v45.__end_ - (char *)v45.__begin_) >> 2, 1u, v35, v36);
  memcpy(*((void **)this + 12), v45.__begin_, (char *)v45.__end_ - (char *)v45.__begin_);
  kaldi::CuArray<int>::Resize((uint64_t)this + 112, (unint64_t)((char *)v44.__end_ - (char *)v44.__begin_) >> 2, 1u, v37, v38);
  memcpy(*((void **)this + 15), v44.__begin_, (char *)v44.__end_ - (char *)v44.__begin_);
  kaldi::CuArray<int>::Resize((uint64_t)this + 136, (unint64_t)((char *)__x.__end_ - (char *)__x.__begin_) >> 2, 1u, v39, v40);
  memcpy(*((void **)this + 18), __x.__begin_, (char *)__x.__end_ - (char *)__x.__begin_);
  if (__x.__begin_)
  {
    __x.__end_ = __x.__begin_;
    operator delete(__x.__begin_);
  }
  if (v44.__begin_)
  {
    v44.__end_ = v44.__begin_;
    operator delete(v44.__begin_);
  }
  if (v45.__begin_)
  {
    v45.__end_ = v45.__begin_;
    operator delete(v45.__begin_);
  }
  if (v46.__begin_)
  {
    v46.__end_ = v46.__begin_;
    operator delete(v46.__begin_);
  }
}

void sub_105088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

kaldi::nnet1::FramePoolingComponent *kaldi::nnet1::FramePoolingComponent::FramePoolingComponent(kaldi::nnet1::FramePoolingComponent *this, const kaldi::nnet1::FramePoolingComponent *a2)
{
  *(void *)this = off_264E70;
  uint64_t v4 = *((void *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((void *)this + 1) = v4;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)this + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3);
  *(void *)this = off_266498;
  *((void *)this + 6) = off_26E7B8;
  long long v5 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)((char *)a2 + 71);
  *(_OWORD *)((char *)this + 56) = v5;
  *(void *)this = off_2654B0;
  *((_DWORD *)this + 2std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = *((_DWORD *)a2 + 22);
  *((void *)this + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 12, *((const void **)a2 + 12), *((void *)a2 + 13), (uint64_t)(*((void *)a2 + 13) - *((void *)a2 + 12)) >> 2);
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  std::vector<kaldi::Vector<float>>::__init_with_size[abi:ne180100]<kaldi::Vector<float>*,kaldi::Vector<float>*>((void *)this + 15, *((void *)a2 + 15), *((void *)a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 16) - *((void *)a2 + 15)) >> 3));
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  std::vector<kaldi::Vector<float>>::__init_with_size[abi:ne180100]<kaldi::Vector<float>*,kaldi::Vector<float>*>((void *)this + 18, *((void *)a2 + 18), *((void *)a2 + 19), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 19) - *((void *)a2 + 18)) >> 3));
  int v6 = *((_DWORD *)a2 + 42);
  *((unsigned char *)this + 17std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = *((unsigned char *)a2 + 172);
  *((_DWORD *)this + 4std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v6;
  return this;
}

void sub_105264(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  long long v5 = *v3;
  if (*v3)
  {
    *((void *)v2 + 13) = v5;
    operator delete(v5);
  }
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
  _Unwind_Resume(a1);
}

void *std::vector<kaldi::Vector<float>>::__init_with_size[abi:ne180100]<kaldi::Vector<float>*,kaldi::Vector<float>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    std::vector<std::vector<int>>::__vallocate[abi:ne180100](result, a4);
    float result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::Vector<float>>,kaldi::Vector<float>*,kaldi::Vector<float>*,kaldi::Vector<float>*>((uint64_t)(v6 + 2), a2, a3, v6[1], v7);
    v6[1] = result;
  }
  return result;
}

void sub_10530C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::Vector<float>>,kaldi::Vector<float>*,kaldi::Vector<float>*,kaldi::Vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = a4;
  uint64_t v14 = a4;
  uint64_t v15 = a4;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a2 != a3)
  {
    uint64_t v7 = a2;
    do
    {
      *(void *)uint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
      *(void *)(v5 + 16) = 0;
      kaldi::Vector<float>::Resize((void **)v5, *(unsigned int *)(v7 + 8), 1, a4, a5);
      kaldi::VectorBase<float>::CopyFromVec(v5, v7, v8, v9, v10);
      v7 += 24;
      uint64_t v5 = v15 + 24;
      v15 += 24;
    }
    while (v7 != a3);
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::Vector<float>>,kaldi::Vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v5;
}

void sub_1053D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::Vector<float>>,kaldi::Vector<float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::Vector<float>>,kaldi::Vector<float>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::Vector<float>>,kaldi::Vector<float>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 24;
    kaldi::Vector<float>::Destroy(v1);
  }
}

kaldi::nnet1::ParallelComponent *kaldi::nnet1::ParallelComponent::ParallelComponent(kaldi::nnet1::ParallelComponent *this, const kaldi::nnet1::ParallelComponent *a2)
{
  uint64_t v4 = (char *)a2 + *(void *)(*(void *)a2 - 24);
  *((void *)this + 26) = off_264E70;
  uint64_t v5 = *((void *)v4 + 1);
  *((_WORD *)this + 11std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = *((_WORD *)v4 + 8);
  *((void *)this + 27) = v5;
  *((void *)this + 30) = 0;
  *((void *)this + 31) = 0;
  *((void *)this + 29) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)this + 29, *((const void **)v4 + 3), *((void *)v4 + 4), (uint64_t)(*((void *)v4 + 4) - *((void *)v4 + 3)) >> 3);
  *((void *)this + 26) = off_266498;
  *((void *)this + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = off_26E7B8;
  long long v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)((char *)this + 279) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)((char *)this + 264) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent(this, (const kaldi::nnet1::RecurrentBaseComponent *)off_265BB0, (uint64_t)a2);
  *(void *)this = off_2657D8;
  *((void *)this + 26) = off_265A90;
  *((void *)this + 20) = off_265930;
  *((void *)this + 21) = off_265958;
  __int16 v7 = *((_WORD *)a2 + 88);
  char v8 = *((unsigned char *)a2 + 178);
  *((void *)this + 23) = 0;
  *((unsigned char *)this + 178) = v8;
  *((_WORD *)this + 88) = v7;
  *((void *)this + ++*(void *)(result + 24) = 0;
  *((void *)this + 25) = 0;
  std::vector<kaldi::nnet1::Nnet>::__init_with_size[abi:ne180100]<kaldi::nnet1::Nnet*,kaldi::nnet1::Nnet*>((void *)this + 23, *((void *)a2 + 23), *((void *)a2 + 24), 0x51B3BEA3677D46CFLL * ((uint64_t)(*((void *)a2 + 24) - *((void *)a2 + 23)) >> 3));
  return this;
}

void sub_105610(_Unwind_Exception *a1)
{
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(v2, (uint64_t *)off_265BB0);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

void *std::vector<kaldi::nnet1::Nnet>::__init_with_size[abi:ne180100]<kaldi::nnet1::Nnet*,kaldi::nnet1::Nnet*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<kaldi::nnet1::Nnet>::__vallocate[abi:ne180100](result, a4);
    float result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::nnet1::Nnet>,kaldi::nnet1::Nnet*,kaldi::nnet1::Nnet*,kaldi::nnet1::Nnet*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1056A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<kaldi::nnet1::Nnet>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<kaldi::nnet1::Nnet>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAE4C415C9882BALL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  float result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::nnet1::Nnet>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[376 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::nnet1::Nnet>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAE4C415C9882BALL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(376 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::nnet1::Nnet>,kaldi::nnet1::Nnet*,kaldi::nnet1::Nnet*,kaldi::nnet1::Nnet*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a4 + v7), (const kaldi::nnet1::Nnet *)(a2 + v7));
      v7 += 376;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1057C8(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 376;
    do
    {
      kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(v4 + v2));
      v2 -= 376;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<kaldi::nnet1::Nnet>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(v4 - 376));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *kaldi::nnet1::ParallelComponent::CheckNetworkDimensions(uint64_t *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = (uint64_t)this;
  *((unsigned char *)this + 177) = 1;
  long long v6 = (kaldi::nnet1::Nnet *)this[23];
  uint64_t v7 = (kaldi::nnet1::Nnet *)this[24];
  if (v6 == v7)
  {
    int v9 = 0;
    int v8 = 0;
    uint64_t v20 = *this;
  }
  else
  {
    int v8 = 0;
    int v9 = 0;
    do
    {
      int v10 = kaldi::nnet1::Nnet::InputDim(v6, a2, a3, a4, a5);
      int v15 = kaldi::nnet1::Nnet::OutputDim(v6, v11, v12, v13, v14);
      this = (uint64_t *)kaldi::nnet1::Nnet::OutputDim(v6, v16, v17, v18, v19);
      uint64_t v20 = *(void *)v5;
      if (this != *(_DWORD *)(v5 + 12 + *(void *)(*(void *)v5 - 24))) {
        *(unsigned char *)(v5 + 177) = 0;
      }
      v8 += v10;
      v9 += v15;
      long long v6 = (kaldi::nnet1::Nnet *)((char *)v6 + 376);
    }
    while (v6 != v7);
  }
  *(unsigned char *)(v5 + 176) = 1;
  uint64_t v21 = v20;
  uint64_t v22 = *(int *)(v5 + *(void *)(v20 - 24) + 8);
  if (v22 != v8)
  {
    if (v8 / (unint64_t)(0x51B3BEA3677D46CFLL * ((uint64_t)(*(void *)(v5 + 192) - *(void *)(v5 + 184)) >> 3)) != v22)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "CheckNetworkDimensions", "../subproject/libquasar/libkaldi/src/nnet/nnet-parallel-component.h", 587);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "Input dimension of parallel component and input dimensions of nested networks do not match.");
      goto LABEL_16;
    }
    *(unsigned char *)(v5 + 176) = 0;
  }
  if (!*(unsigned char *)(v5 + 177) && *(_DWORD *)(v5 + *(void *)(v21 - 24) + 12) != v9)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "CheckNetworkDimensions", "../subproject/libquasar/libkaldi/src/nnet/nnet-parallel-component.h", 592);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "Output dimension of parallel component and output dimensions of nested networks do not match.");
LABEL_16:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
  }
  return this;
}

uint64_t std::vector<kaldi::nnet1::Nnet>::__push_back_slow_path<kaldi::nnet1::Nnet const&>(uint64_t *a1, const kaldi::nnet1::Nnet *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x51B3BEA3677D46CFLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0xAE4C415C9882B9) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x51B3BEA3677D46CFLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x572620AE4C415CLL) {
    unint64_t v9 = 0xAE4C415C9882B9;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::nnet1::Nnet>>(v7, v9);
  }
  else {
    int v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = (kaldi::nnet1::Nnet *)&v10[376 * v4];
  uint64_t v16 = &v10[376 * v9];
  kaldi::nnet1::Nnet::Nnet(v14, a2);
  int v15 = (char *)v14 + 376;
  std::vector<kaldi::nnet1::Nnet>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<kaldi::nnet1::Nnet>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_105B6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::nnet1::Nnet>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::nnet1::Nnet>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::nnet1::Nnet>,std::reverse_iterator<kaldi::nnet1::Nnet*>,std::reverse_iterator<kaldi::nnet1::Nnet*>,std::reverse_iterator<kaldi::nnet1::Nnet*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::nnet1::Nnet>,std::reverse_iterator<kaldi::nnet1::Nnet*>,std::reverse_iterator<kaldi::nnet1::Nnet*>,std::reverse_iterator<kaldi::nnet1::Nnet*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 376;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = (kaldi::nnet1::Nnet *)(v11 + v10);
    v10 -= 376;
    kaldi::nnet1::Nnet::Nnet(v12, (const kaldi::nnet1::Nnet *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<kaldi::nnet1::Nnet>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 376;
    kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(i - 376));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<kaldi::nnet1::Nnet>::resize(void *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0x51B3BEA3677D46CFLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<kaldi::nnet1::Nnet>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 376 * a2;
    while (v3 != v7)
      kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(v3 - 376));
    a1[1] = v7;
  }
}

uint64_t std::vector<kaldi::nnet1::Nnet>::__append(void *a1, unint64_t a2)
{
  uint64_t v5 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v4 = v5;
  unint64_t v6 = *(kaldi::nnet1::Nnet **)(result - 8);
  if (0x51B3BEA3677D46CFLL * ((v5 - (uint64_t)v6) >> 3) < a2)
  {
    uint64_t v7 = 0x51B3BEA3677D46CFLL * (((uint64_t)v6 - *a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 <= 0xAE4C415C9882B9)
    {
      unint64_t v9 = 0x51B3BEA3677D46CFLL * ((v4 - *a1) >> 3);
      if (2 * v9 > v8) {
        unint64_t v8 = 2 * v9;
      }
      if (v9 >= 0x572620AE4C415CLL) {
        unint64_t v10 = 0xAE4C415C9882B9;
      }
      else {
        unint64_t v10 = v8;
      }
      if (v10) {
        uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::nnet1::Nnet>>(result, v10);
      }
      else {
        uint64_t v11 = 0;
      }
      kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)&v11[376 * v7]);
    }
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  if (a2) {
    kaldi::nnet1::Nnet::Nnet(v6);
  }
  a1[1] = v6;
  return result;
}

void sub_105ED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::nnet1::Nnet>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

kaldi::nnet1::WordVecComponent *kaldi::nnet1::WordVecComponent::WordVecComponent(kaldi::nnet1::WordVecComponent *this, const kaldi::nnet1::WordVecComponent *a2)
{
  *(void *)this = off_264E70;
  uint64_t v4 = *((void *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((void *)this + 1) = v4;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)this + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3);
  *(void *)this = off_266498;
  *((void *)this + 6) = off_26E7B8;
  long long v5 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)((char *)a2 + 71);
  *(_OWORD *)((char *)this + 56) = v5;
  *(void *)this = off_2665C0;
  *((void *)this + 11) = off_2666F0;
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 96, (char *)a2 + 96, 111);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 144, (char *)a2 + 144, 111);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 192, (char *)a2 + 192, 111);
  long long v6 = *((_OWORD *)a2 + 15);
  *((void *)this + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = *((void *)a2 + 32);
  *((_OWORD *)this + 15) = v6;
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 264, (char *)a2 + 264, 111);
  *((void *)this + 39) = 0;
  *((void *)this + 40) = 0;
  *((void *)this + 41) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 39, *((void *)a2 + 39), *((void *)a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 40) - *((void *)a2 + 39)) >> 4));
  *((void *)this + 4std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *((void *)this + 43) = 0;
  *((void *)this + 44) = 0;
  std::vector<kaldi::CuSubMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuSubMatrix<float>*,kaldi::CuSubMatrix<float>*>((void *)this + 42, *((void *)a2 + 42), *((void *)a2 + 43), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 43) - *((void *)a2 + 42)) >> 3));
  *((void *)this + 45) = 0;
  *((void *)this + 46) = 0;
  *((void *)this + 47) = 0;
  std::vector<kaldi::CuSubMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuSubMatrix<float>*,kaldi::CuSubMatrix<float>*>((void *)this + 45, *((void *)a2 + 45), *((void *)a2 + 46), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 46) - *((void *)a2 + 45)) >> 3));
  return this;
}

void sub_1060F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  kaldi::CuMatrix<float>::~CuMatrix(v6);
  kaldi::CuMatrix<float>::~CuMatrix(v5);
  kaldi::CuMatrix<float>::~CuMatrix(v4);
  kaldi::CuMatrix<float>::~CuMatrix(v3);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
  _Unwind_Resume(a1);
}

void sub_106164()
{
}

void sub_10616C()
{
}

void *std::vector<kaldi::CuSubMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuSubMatrix<float>*,kaldi::CuSubMatrix<float>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<kaldi::CuSubMatrix<float>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy[abi:ne180100]<std::allocator<kaldi::CuSubMatrix<float>>,kaldi::CuSubMatrix<float>*,kaldi::CuSubMatrix<float>*,kaldi::CuSubMatrix<float>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1061DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<kaldi::CuSubMatrix<float>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::GallicWeight<int,fst::LogWeightTpl<float>,(fst::GallicType)0>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy[abi:ne180100]<std::allocator<kaldi::CuSubMatrix<float>>,kaldi::CuSubMatrix<float>*,kaldi::CuSubMatrix<float>*,kaldi::CuSubMatrix<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = a4;
  if (a2 != a3)
  {
    uint64_t v5 = a4;
    do
    {
      uint64_t v6 = *(void *)(a2 + 32);
      *(void *)(result + 8) = *(void *)(a2 + 8);
      *(_OWORD *)(result + 16) = *(_OWORD *)(a2 + 16);
      *(void *)(result + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = v6;
      *(void *)uint64_t result = off_262D80;
      result += 40;
      a2 += 40;
      v5 += 40;
    }
    while (a2 != a3);
  }
  return result;
}

void kaldi::nnet1::FofeWordVecComponent::Prepare(kaldi::nnet1::FofeWordVecComponent *this, uint64_t a2)
{
  if (*((_DWORD *)this + 102) < (int)a2)
  {
    kaldi::CuMatrix<float>::Resize((uint64_t)this + 392, 1, a2, 1u, 0);
    if (!*((_DWORD *)this + 103)) {
      goto LABEL_11;
    }
    unint64_t v5 = *((unsigned int *)this + 102);
    if (v5 <= (int)a2 - 1) {
      goto LABEL_11;
    }
    uint64_t v6 = *((void *)this + 50);
    *(_DWORD *)(v6 + 4 * ((int)a2 - 1)) = 1065353216;
    uint64_t v7 = (a2 - 2);
    if ((int)a2 >= 2)
    {
      while (v7 + 1 < v5)
      {
        *(float *)(v6 + 4 * v7) = *(float *)(v6 + 4 * v7 + 4) * *((float *)this + 96);
        if (v7-- <= 0) {
          goto LABEL_8;
        }
      }
LABEL_11:
      kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)&stru_1F8.size + 1, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v4);
    }
  }
LABEL_8:
  uint64_t v9 = *((unsigned int *)this + 3);

  kaldi::CuMatrix<float>::Resize((uint64_t)this + 440, a2, v9, 1u, 0);
}

kaldi::nnet1::SharedNceComponent *kaldi::nnet1::SharedNceComponent::SharedNceComponent(kaldi::nnet1::SharedNceComponent *this, const kaldi::nnet1::SharedNceComponent *a2)
{
  *(void *)this = off_264E70;
  uint64_t v4 = *((void *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((void *)this + 1) = v4;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)this + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3);
  *(void *)this = off_266498;
  *((void *)this + 6) = off_26E7B8;
  long long v5 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)((char *)a2 + 71);
  *(_OWORD *)((char *)this + 56) = v5;
  *(void *)this = off_2662B0;
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 88, (char *)a2 + 88, 111);
  kaldi::CuVector<float>::CuVector((uint64_t)this + 136, (uint64_t)a2 + 136, v6, v7, v8);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 168, (char *)a2 + 168, 111);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 216, (char *)a2 + 216, 111);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 264, (char *)a2 + 264, 111);
  kaldi::CuVector<float>::CuVector((uint64_t)this + 312, (uint64_t)a2 + 312, v9, v10, v11);
  kaldi::CuVector<float>::CuVector((uint64_t)this + 344, (uint64_t)a2 + 344, v12, v13, v14);
  kaldi::CuVector<float>::CuVector((uint64_t)this + 376, (uint64_t)a2 + 376, v15, v16, v17);
  long long v18 = *(_OWORD *)((char *)a2 + 408);
  *((void *)this + 53) = *((void *)a2 + 53);
  *(_OWORD *)((char *)this + 408) = v18;
  return this;
}

void sub_10652C(_Unwind_Exception *a1)
{
  kaldi::CuVector<float>::~CuVector(v8);
  kaldi::CuVector<float>::~CuVector(v7);
  kaldi::CuMatrix<float>::~CuMatrix(v6);
  kaldi::CuMatrix<float>::~CuMatrix(v5);
  kaldi::CuMatrix<float>::~CuMatrix(v4);
  kaldi::CuVector<float>::~CuVector(v3);
  kaldi::CuMatrix<float>::~CuMatrix(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

void sub_106598()
{
}

void sub_1065A0()
{
}

void sub_1065A8()
{
}

uint64_t kaldi::nnet1::CompressedWordTransComponent::SetVecTable(kaldi::nnet1::CompressedWordTransComponent *this, const kaldi::CompressedMatrix *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v7 = *(void *)a2;
  if (!*(void *)a2)
  {
    int v8 = *((_DWORD *)this + 3);
    if (!v8)
    {
      int v9 = *((_DWORD *)this + 2);
      goto LABEL_7;
    }
LABEL_10:
    kaldi::KaldiAssertFailure_((kaldi *)"SetVecTable", "../subproject/libquasar/libkaldi/src/nnet/nnet-compressed-word-trans-component.h", (const char *)&stru_20.initprot + 1, "src.NumCols() == output_dim_", a5);
  }
  if (*(_DWORD *)(v7 + 12) != *((_DWORD *)this + 3)) {
    goto LABEL_10;
  }
  int v8 = *(_DWORD *)(v7 + 8);
  int v9 = *((_DWORD *)this + 2);
  if (v8 % v9) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetVecTable", "../subproject/libquasar/libkaldi/src/nnet/nnet-compressed-word-trans-component.h", (const char *)&stru_20.initprot + 2, "src.NumRows() % input_dim_ == 0", a5);
  }
LABEL_7:
  *((_DWORD *)this + ++*(void *)(result + 24) = v8 / v9;
  kaldi::nnet1::CompressedWordTransComponent::InitIndexOffsets(this, (uint64_t)a2, a3, a4, a5);

  return kaldi::CompressedMatrix::operator=((uint64_t)this + 80, (uint64_t)a2, v10, v11, v12);
}

float kaldi::nnet1::CompressedWordTransComponent::InitIndexOffsets(kaldi::nnet1::CompressedWordTransComponent *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *((unsigned int *)this + 2);
  if ((int)v5 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *((unsigned int *)this + 16);
    do
    {
      if (v7 == v6) {
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)&stru_B8.reserved3 + 2, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a5);
      }
      float result = (float)(*((_DWORD *)this + 24) * v6);
      *(float *)(*((void *)this + 7) + 4 * v6++) = result;
    }
    while (v5 != v6);
  }
  return result;
}

void kaldi::nnet1::Component::GetComponentTypeMap(void)::$_0::operator()()
{
}

void sub_107D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x40uLL);
    int v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *int v9 = 0;
    *((_DWORD *)v7 + 14) = 0;
    std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

void *std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>(uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        int v8 = (void *)v4;
        int v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v8;
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, v9, a3)) {
        break;
      }
      uint64_t v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    int v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<kaldi::nnet1::Component::GetGradientNormTypeMap(void)::$_0 &&>>()
{
}

void sub_108138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<kaldi::nnet1::Component::GetMatrixInitTypeMap(void)::$_0 &&>>()
{
}

void sub_108298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = a1 + 8;
  do
  {
    BOOL v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    int v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      int v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32))) {
    return v2;
  }
  return v6;
}

uint64_t kaldi::nnet1::QuantizedAffineTransform<signed char>::QuantizedAffineTransform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  *(void *)a1 = off_2637F0;
  kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(a1 + 48, a3, a2);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 11std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 96) = off_262E60;
  *(void *)(a1 + 120) = 0;
  kaldi::CuVector<float>::Resize(a1 + 96, a3, 0, v5, v6);
  return a1;
}

void sub_10840C(_Unwind_Exception *a1)
{
  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v3);
  *uint64_t v1 = v2;
  uint64_t v5 = (void *)v1[3];
  if (v5)
  {
    v1[4] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::QuantizedAffineTransform<short>::QuantizedAffineTransform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  *(void *)a1 = off_2638C8;
  kaldi::QuantizedMatrix<short>::QuantizedMatrix(a1 + 48, a3, a2);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 11std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 96) = off_262E60;
  *(void *)(a1 + 120) = 0;
  kaldi::CuVector<float>::Resize(a1 + 96, a3, 0, v5, v6);
  return a1;
}

void sub_1084FC(_Unwind_Exception *a1)
{
  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v3);
  *uint64_t v1 = v2;
  uint64_t v5 = (void *)v1[3];
  if (v5)
  {
    v1[4] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::VectorwiseQuantizedAffineTransform(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  *(void *)a1 = off_2639A0;
  kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(a1 + 48, a3, a2);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = off_262E60;
  *(void *)(a1 + 11std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  kaldi::CuVector<float>::Resize(a1 + 88, a3, 0, v5, v6);
  return a1;
}

void sub_1085EC(_Unwind_Exception *a1)
{
  kaldi::VectorwiseQuantizedMatrix<signed char>::~VectorwiseQuantizedMatrix(v3);
  *uint64_t v1 = v2;
  uint64_t v5 = (void *)v1[3];
  if (v5)
  {
    v1[4] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::VectorwiseQuantizedAffineTransform(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  *(void *)a1 = off_267C38;
  kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(a1 + 48, a3, a2);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = off_262E60;
  *(void *)(a1 + 11std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  kaldi::CuVector<float>::Resize(a1 + 88, a3, 0, v5, v6);
  return a1;
}

void sub_1086DC(_Unwind_Exception *a1)
{
  kaldi::VectorwiseQuantizedMatrix<short>::~VectorwiseQuantizedMatrix(v3);
  *uint64_t v1 = v2;
  uint64_t v5 = (void *)v1[3];
  if (v5)
  {
    v1[4] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::~VectorwiseQuantizedAffineTransform(void *a1)
{
  kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::~VectorwiseQuantizedAffineTransform(a1);

  operator delete();
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::Copy()
{
}

void sub_108790()
{
}

uint64_t kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::GetType()
{
  return 1042;
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::WriteData(uint64_t a1, void *a2, int a3)
{
  kaldi::VectorwiseQuantizedMatrix<short>::Write((unsigned int *)(a1 + 48), a2, a3);

  kaldi::CuVectorBase<float>::Write((_DWORD *)(a1 + 88), a2, a3, v6, v7);
}

uint64_t *kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::CuMatrixBase<float>::AddMatMat<short>(a3, a2, 111, (_DWORD *)(a1 + 48), &stru_68.sectname[8], 1.0, 0.0);

  return kaldi::CuMatrixBase<float>::AddVecToRows(a3, a1 + 88, v5, v6, v7, 1.0, 1.0);
}

void kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 104) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.h", &stru_108.sectname[6], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a5);
  }
  kaldi::CuVectorBase<float>::Set(a4, *(float *)(*(void *)(a1 + 96) + 4 * a3));
  kaldi::VectorwiseQuantizedMatrix<short>::Row(a1 + 48, a3, (uint64_t)v11);
  kaldi::QuantizedVectorBase<short>::AddMatVec((uint64_t)v11, a2 + 8, a4 + 8, 1.0, v9, v10);
}

float kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a1 + 104) <= a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/cudamatrix/cu-vector.h", &stru_108.sectname[6], "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", a5);
  }
  float v6 = *(float *)(*(void *)(a1 + 96) + 4 * a3);
  kaldi::VectorwiseQuantizedMatrix<short>::Row(a1 + 48, a3, (uint64_t)v11);
  return v6 + kaldi::VecVec<float,short>(a2, (uint64_t)v11, v7, v8, v9);
}

double kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::ReadData(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::VectorwiseQuantizedMatrix<short>::Read(a1 + 12, a2, a3, a4);
  double result = kaldi::CuVector<float>::Read((uint64_t)(a1 + 22), a2, a3, v7, v8);
  if (a1[26] != a1[3]) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "../subproject/libquasar/libkaldi/src/nnet/nnet-vectorwise-quantized-affine-transform.h", &stru_20.segname[7], "bias_.Dim() == output_dim_", v9);
  }
  return result;
}

void *kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::~VectorwiseQuantizedAffineTransform(void *a1)
{
  *a1 = off_267C38;
  kaldi::CuVector<float>::~CuVector(a1 + 11);
  uint64_t v2 = a1[9];
  a1[9] = 0;
  if (v2) {
    operator delete();
  }
  uint64_t v3 = a1[7];
  a1[7] = 0;
  if (v3) {
    operator delete();
  }
  *a1 = off_264E70;
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t kaldi::nnet1::VectorwiseQuantizedAffineTransform<short>::VectorwiseQuantizedAffineTransform(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_264E70;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = off_267C38;
  kaldi::VectorwiseQuantizedMatrix<short>::VectorwiseQuantizedMatrix(a1 + 48, a2 + 48);
  kaldi::CuVector<float>::CuVector(a1 + 88, a2 + 88, v5, v6, v7);
  return a1;
}

void sub_108B6C(_Unwind_Exception *a1)
{
  kaldi::VectorwiseQuantizedMatrix<short>::~VectorwiseQuantizedMatrix(v3);
  *uint64_t v1 = v2;
  uint64_t v5 = (void *)v1[3];
  if (v5)
  {
    v1[4] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void kaldi::nnet1::FramePoolingComponent::InitData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)a3;
  if (*(void *)a3)
  {
    *(void *)(a3 + 8) = v5;
    operator delete(v5);
  }
}

double kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::Convolutional2DComponent(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  *(void *)(a1 + 48) = off_26E7B8;
  *(_OWORD *)(a1 + 56) = xmmword_20CEC0;
  *(_DWORD *)(a1 + 7std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = -1082130432;
  *(void *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 86) = 0;
  *(void *)a1 = off_267CF8;
  *(void *)(a1 + 88) = off_267E30;
  *(void *)(a1 + 96) = off_267E58;
  double result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(a1 + 136) = _D1;
  *(_OWORD *)(a1 + 1--*(_DWORD *)(a9 + 60) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 19std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 2++*(void *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 27std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 35std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 43std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 329) = 0u;
  return result;
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::Convolutional2DComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_264E70;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = off_266498;
  *(void *)(a1 + 48) = off_26E7B8;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = off_267CF8;
  *(void *)(a1 + 88) = off_267E30;
  *(void *)(a1 + 96) = off_267E58;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized<kaldi::nnet1::Quantizable16BitComponentItf>((uint64_t)this - 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 23std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 31std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 43std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 35std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::AssignMembers<kaldi::CuMatrixBase<float>>(a1, a2, v6, v7, v8);
  return a1;
}

void sub_108E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(v10 + 376));
  uint64_t v14 = *(void **)(v10 + 352);
  if (v14)
  {
    *(void *)(v10 + 3--*(_DWORD *)(a9 + 60) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void **)(v10 + 320);
  if (v15)
  {
    *(void *)(v10 + 328) = v15;
    operator delete(v15);
  }
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v16 = *(void *)(v10 + 192);
  *(void *)(v10 + 19std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
  }
  uint64_t v17 = *(void *)(v10 + 184);
  *(void *)(v10 + 184) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 24))(v17);
  }
  a10 = (void **)(v10 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v12);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)v10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::AssignMembers<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  __n128 v7 = *(__n128 *)(a2 + 120);
  *(__n128 *)(a1 + 120) = v7;
  v7.n128_u64[0] = *(void *)(a2 + 136);
  *(void *)(a1 + 136) = v7.n128_u64[0];
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  v7.n128_u32[0] = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 148) = v7.n128_u32[0];
  if (a1 == a2)
  {
    *(unsigned char *)(a1 + 344) = 0;
  }
  else
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 320), *(char **)(a2 + 320), *(void *)(a2 + 328), (uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 2);
    *(unsigned char *)(a1 + 344) = 0;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 352), *(char **)(a2 + 352), *(void *)(a2 + 360), (uint64_t)(*(void *)(a2 + 360) - *(void *)(a2 + 352)) >> 2);
  }
  if (*(void *)(a2 + 184)) {
    operator new();
  }
  uint64_t v8 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = 0;
  if (v8) {
    (*(void (**)(uint64_t, __n128))(*(void *)v8 + 24))(v8, v7);
  }
  if (*(void *)(a2 + 192)) {
    operator new();
  }
  uint64_t v9 = *(void *)(a1 + 192);
  *(void *)(a1 + 19std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  if (v9) {
    (*(void (**)(uint64_t, __n128))(*(void *)v9 + 16))(v9, v7);
  }
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::UpdateBNNSFilter(a1, a2, a3, a4, a5);
  if (*(void *)(a2 + 384) != *(void *)(a2 + 376)) {
    kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 376));
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v10, "AssignMembers", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1451);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"After assign, Convolution filter has padding? ", 46);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v10);
  }
}

void sub_1091CC()
{
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::~Convolutional2DComponent(uint64_t a1)
{
  *(void *)a1 = off_267CF8;
  uint64_t v2 = a1 + 88;
  *(void *)(a1 + 88) = off_267E30;
  uint64_t v3 = a1 + 96;
  *(void *)(a1 + 96) = off_267E58;
  uint64_t v4 = *(void **)(a1 + 152);
  if (v4)
  {
    BNNSFilterDestroy(v4);
    *(void *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  }
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 376));
  long long v5 = *(void **)(a1 + 352);
  if (v5)
  {
    *(void *)(a1 + 3--*(_DWORD *)(a9 + 60) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 320);
  if (v6)
  {
    *(void *)(a1 + 328) = v6;
    operator delete(v6);
  }
  uint64_t v9 = (void **)(a1 + 296);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 272);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 248);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 224);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 200);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v7 = *(void *)(a1 + 192);
  *(void *)(a1 + 19std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
  }
  uint64_t v9 = (void **)(a1 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v3);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  uint64_t vars8;

  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::~Convolutional2DComponent(a1);

  operator delete();
}

void non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::~Convolutional2DComponent(uint64_t a1)
{
}

{
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::~Convolutional2DComponent(a1 - 96);
}

{
  uint64_t vars8;

  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::~Convolutional2DComponent(a1 - 88);

  operator delete();
}

{
  uint64_t vars8;

  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::~Convolutional2DComponent(a1 - 96);

  operator delete();
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::Copy()
{
}

void sub_1094C0()
{
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::InitData(int *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  uint64_t v6 = v79;
  int v83 = 0x40000000;
  int v84 = -1073741824;
  int v82 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)a1[36], &v81);
  int v80 = -1;
  memset(v79, 0, sizeof(v79));
  uint64_t v9 = a1 + 29;
  uint64_t v10 = a1 + 28;
  while (1)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_189;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v79, v7, v8);
    if (SHIBYTE(v79[2]) < 0)
    {
      uint64_t v16 = v79[1];
      switch(v79[1])
      {
        case 6:
          BOOL v17 = *(_DWORD *)v79[0] == 1684099132 && *(_WORD *)(v79[0] + 4) == 15960;
          uint64_t v14 = a1 + 32;
          if (v17) {
            goto LABEL_169;
          }
          BOOL v18 = *(_DWORD *)v79[0] == 1684099132 && *(_WORD *)(v79[0] + 4) == 15961;
          uint64_t v14 = a1 + 33;
          if (v18) {
            goto LABEL_169;
          }
          if (v79[1] != 15) {
            goto LABEL_29;
          }
LABEL_24:
          BOOL v19 = *(void *)v79[0] == 0x61526E7261654C3CLL && *(void *)(v79[0] + 7) == 0x3E66656F43657461;
          uint64_t v20 = a1 + 34;
          if (v19) {
            break;
          }
          uint64_t v16 = v79[1];
LABEL_29:
          if (v16 != 19) {
            goto LABEL_38;
          }
          BOOL v22 = *(void *)v79[0] == 0x61654C736169423CLL
             && *(void *)(v79[0] + 8) == 0x6F43657461526E72
             && *(void *)(v79[0] + 11) == 0x3E66656F43657461;
          uint64_t v20 = a1 + 35;
          if (v22) {
            break;
          }
          uint64_t v16 = v79[1];
LABEL_38:
          if (v16 != 12) {
            goto LABEL_44;
          }
          if (*(void *)v79[0] == 0x536D6F646E61523CLL && *(_DWORD *)(v79[0] + 8) == 1046766949) {
            goto LABEL_168;
          }
          uint64_t v16 = v79[1];
LABEL_44:
          if (v16 != 18) {
            goto LABEL_53;
          }
          if (*(void *)v79[0] == 0x6E6569646172473CLL
            && *(void *)(v79[0] + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v79[0] + 16) == 15973)
          {
            goto LABEL_76;
          }
          uint64_t v16 = v79[1];
LABEL_53:
          if (v16 != 9) {
            goto LABEL_182;
          }
          BOOL v26 = *(void *)v79[0] == 0x6461724778614D3CLL && *(unsigned char *)(v79[0] + 8) == 62;
          uint64_t v20 = a1 + 37;
          if (v26) {
            break;
          }
          uint64_t v16 = v79[1];
LABEL_182:
          if (v16 != 12) {
            goto LABEL_175;
          }
          uint64_t v6 = (void *)v79[0];
          goto LABEL_184;
        case 0xALL:
          if (*(void *)v79[0] != 0x61654D736169423CLL || *(_WORD *)(v79[0] + 8) != 15982)
          {
            BOOL v44 = *(void *)v79[0] == 0x654C5870616D463CLL && *(_WORD *)(v79[0] + 8) == 15982;
            uint64_t v14 = a1 + 26;
            if (!v44)
            {
              BOOL v45 = *(void *)v79[0] == 0x654C5970616D463CLL && *(_WORD *)(v79[0] + 8) == 15982;
              uint64_t v14 = a1 + 27;
              if (!v45)
              {
                BOOL v46 = *(void *)v79[0] == 0x654C58746C69463CLL && *(_WORD *)(v79[0] + 8) == 15982;
                uint64_t v14 = a1 + 28;
                if (!v46)
                {
                  BOOL v36 = *(void *)v79[0] == 0x654C59746C69463CLL && *(_WORD *)(v79[0] + 8) == 15982;
LABEL_147:
                  uint64_t v14 = a1 + 29;
                  if (!v36) {
                    goto LABEL_175;
                  }
                }
              }
            }
            goto LABEL_169;
          }
LABEL_170:
          uint64_t v20 = &v84;
          break;
        case 0xBLL:
          if (*(void *)v79[0] != 0x6E6152736169423CLL || *(void *)(v79[0] + 3) != 0x3E65676E61527361)
          {
            BOOL v48 = *(void *)v79[0] == 0x745358746C69463CLL && *(void *)(v79[0] + 3) == 0x3E7065745358746CLL;
            uint64_t v14 = a1 + 30;
            if (!v48)
            {
              BOOL v39 = *(void *)v79[0] == 0x745359746C69463CLL && *(void *)(v79[0] + 3) == 0x3E7065745359746CLL;
LABEL_160:
              uint64_t v14 = a1 + 31;
              if (!v39) {
                goto LABEL_175;
              }
            }
            goto LABEL_169;
          }
LABEL_171:
          uint64_t v20 = &v83;
          break;
        case 0xDLL:
          if (*(void *)v79[0] != 0x74536D617261503CLL || *(void *)(v79[0] + 5) != 0x3E7665646474536DLL) {
            goto LABEL_175;
          }
LABEL_167:
          uint64_t v20 = &v82;
          break;
        case 0xFLL:
          goto LABEL_24;
        default:
          goto LABEL_29;
      }
    }
    else
    {
      switch(HIBYTE(v79[2]))
      {
        case 6:
          BOOL v13 = LODWORD(v79[0]) == 1684099132 && WORD2(v79[0]) == 15960;
          uint64_t v14 = a1 + 32;
          if (!v13)
          {
            BOOL v15 = LODWORD(v79[0]) == 1684099132 && WORD2(v79[0]) == 15961;
            uint64_t v14 = a1 + 33;
            if (!v15) {
              goto LABEL_175;
            }
          }
          goto LABEL_169;
        case 9:
          goto LABEL_123;
        case 0xA:
          if (v79[0] == 0x61654D736169423CLL && LOWORD(v79[1]) == 15982) {
            goto LABEL_170;
          }
          BOOL v33 = v79[0] == 0x654C5870616D463CLL && LOWORD(v79[1]) == 15982;
          uint64_t v14 = a1 + 26;
          if (v33) {
            goto LABEL_169;
          }
          BOOL v34 = v79[0] == 0x654C5970616D463CLL && LOWORD(v79[1]) == 15982;
          uint64_t v14 = a1 + 27;
          if (v34) {
            goto LABEL_169;
          }
          BOOL v35 = v79[0] == 0x654C58746C69463CLL && LOWORD(v79[1]) == 15982;
          uint64_t v14 = a1 + 28;
          if (v35) {
            goto LABEL_169;
          }
          BOOL v36 = v79[0] == 0x654C59746C69463CLL && LOWORD(v79[1]) == 15982;
          goto LABEL_147;
        case 0xB:
          if (v79[0] == 0x6E6152736169423CLL && *(void *)((char *)v79 + 3) == 0x3E65676E61527361) {
            goto LABEL_171;
          }
          BOOL v38 = v79[0] == 0x745358746C69463CLL && *(void *)((char *)v79 + 3) == 0x3E7065745358746CLL;
          uint64_t v14 = a1 + 30;
          if (v38) {
            goto LABEL_169;
          }
          BOOL v39 = v79[0] == 0x745359746C69463CLL && *(void *)((char *)v79 + 3) == 0x3E7065745359746CLL;
          goto LABEL_160;
        case 0xC:
          goto LABEL_118;
        case 0xD:
          if (v79[0] != 0x74536D617261503CLL || *(void *)((char *)v79 + 5) != 0x3E7665646474536DLL) {
            goto LABEL_175;
          }
          goto LABEL_167;
        case 0xF:
          BOOL v40 = v79[0] == 0x61526E7261654C3CLL && *(void *)((char *)v79 + 7) == 0x3E66656F43657461;
          uint64_t v20 = a1 + 34;
          if (v40) {
            break;
          }
          if (HIBYTE(v79[2]) != 9) {
            goto LABEL_117;
          }
          goto LABEL_123;
        case 0x12:
          goto LABEL_68;
        case 0x13:
          BOOL v28 = v79[0] == 0x61654C736169423CLL
             && v79[1] == 0x6F43657461526E72
             && *(void *)((char *)&v79[1] + 3) == 0x3E66656F43657461;
          uint64_t v20 = a1 + 35;
          if (v28) {
            break;
          }
          if (HIBYTE(v79[2]) == 9) {
            goto LABEL_123;
          }
          if (HIBYTE(v79[2]) == 18)
          {
LABEL_68:
            if (v79[0] == 0x6E6569646172473CLL && v79[1] == 0x7079546D726F4E74 && LOWORD(v79[2]) == 15973)
            {
LABEL_76:
              kaldi::ReadToken(a2, 0, (uint64_t)&v81, v11, v12);
              goto LABEL_173;
            }
          }
          else
          {
LABEL_117:
            if (HIBYTE(v79[2]) != 12) {
              goto LABEL_175;
            }
LABEL_118:
            if (v79[0] == 0x536D6F646E61523CLL && LODWORD(v79[1]) == 1046766949)
            {
LABEL_168:
              uint64_t v14 = &v80;
LABEL_169:
              kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v14, v11, v12);
              goto LABEL_173;
            }
          }
          if (HIBYTE(v79[2]) != 9)
          {
            if (HIBYTE(v79[2]) == 12)
            {
LABEL_184:
              if (*v6 == 0x6E6F706D6F432F3CLL && *((_DWORD *)v6 + 2) == 1047817829)
              {
LABEL_189:
                a1[36] = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v81);
                int v56 = a1[2];
                int v58 = a1[26];
                int v57 = a1[27];
                int v59 = v56 / (v57 * v58);
                if (!(v56 % (v57 * v58)))
                {
                  int v60 = (v58 + 2 * a1[32] - a1[28]) / a1[30] + 1;
                  int v61 = a1[3];
                  int v62 = v60 + v60 * ((v57 + 2 * a1[33] - a1[29]) / a1[31]);
                  uint64_t v63 = (v61 / v62);
                  if (!(v61 % v62))
                  {
                    if (v80 >= 1) {
                      kaldi::UniformRandomNumber::SetRandomSeeds(a3, v80);
                    }
                    kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v78, a3);
                    kaldi::Matrix<float>::Matrix((uint64_t)&v74, v63, (*v10 * v59 * *v9), 0, 0);
                    if ((int)v63 >= 1)
                    {
                      unsigned int v67 = 0;
                      int v68 = *v10;
                      int v69 = *v9;
                      do
                      {
                        if (v69 * v59 * v68 >= 1)
                        {
                          unint64_t v70 = 0;
                          do
                          {
                            float v71 = *(float *)&v82;
                            kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v78, 0, v64, v65, v66);
                            if (v76 <= v67 || v70 >= v75) {
                              kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)&stru_68.addr, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v66);
                            }
                            *(float *)(v74 + 4 * (int)(v67 * v77) + 4 * v70++) = v71 * v72;
                            int v68 = *v10;
                            int v69 = *v9;
                          }
                          while ((uint64_t)v70 < *v10 * v59 * *v9);
                        }
                        ++v67;
                      }
                      while (v67 != v63);
                    }
                    kaldi::ContextDependency::CentralPosition((kaldi::ContextDependency *)&v74);
                    kaldi::ContextDependency::ContextWidth((kaldi::ContextDependency *)&v74);
                    kaldi::nnet1::NewMatrix<kaldi::CuMatrixBase<float>>();
                  }
                  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 336);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"output_dim_ % (out_fmap_x_len * out_fmap_y_len) == 0", 52);
                  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78);
                }
                kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 330);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"input_dim_ % (fmap_x_len_ * fmap_y_len_) == 0", 45);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78);
              }
            }
LABEL_175:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 318);
            float v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"Unknown token ", 14);
            if (v79[2] >= 0) {
              signed int v51 = v79;
            }
            else {
              signed int v51 = (void *)v79[0];
            }
            if (v79[2] >= 0) {
              uint64_t v52 = HIBYTE(v79[2]);
            }
            else {
              uint64_t v52 = v79[1];
            }
            float v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v51, v52);
            float v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)", a typo in config?", 19);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" (ParamStddev|BiasMean|BiasRange|FmapXLen|FmapYLen|FiltXLen|FiltYLen|FiltXStep|FiltYStep|ConnectFmap|LearnRateCoef|BiasLearnRateCoef|RandomSeed|GradientNormType|MaxGrad)", 169);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78);
          }
LABEL_123:
          BOOL v42 = v79[0] == 0x6461724778614D3CLL && LOBYTE(v79[1]) == 62;
          uint64_t v20 = a1 + 37;
          if (!v42) {
            goto LABEL_175;
          }
          break;
        default:
          goto LABEL_175;
      }
    }
    kaldi::ReadBasicType<float>(a2, 0, (float *)v20, v11, v12);
LABEL_173:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
}

void sub_10A20C()
{
  kaldi::Vector<float>::Destroy(&v0);
  JUMPOUT(0x10A234);
}

void sub_10A224(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 153) < 0) {
    operator delete(*(void **)(v1 - 176));
  }
  if (*(char *)(v1 - 121) < 0) {
    operator delete(*(void **)(v1 - 144));
  }
  _Unwind_Resume(exception_object);
}

void sub_10A22C()
{
  kaldi::Matrix<float>::~Matrix(&v0);
  kaldi::GaussRandomNumber::~GaussRandomNumber((kaldi::GaussRandomNumber *)&v1);
  JUMPOUT(0x10A244);
}

void kaldi::nnet1::NewMatrix<kaldi::CuMatrixBase<float>>()
{
}

void sub_10A334()
{
}

void *kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::UpdateBNNSFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = *(void **)(a1 + 152);
  if (v6)
  {
    BNNSFilterDestroy(v6);
    *(void *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  }
  size_t v7 = *(int *)(a1 + 104);
  size_t v8 = *(int *)(a1 + 108);
  int v9 = *(_DWORD *)(a1 + 8) / ((int)v8 * (int)v7);
  size_t v10 = *(int *)(a1 + 128);
  size_t v11 = *(int *)(a1 + 132);
  size_t v13 = *(int *)(a1 + 112);
  size_t v12 = *(int *)(a1 + 116);
  size_t v14 = *(int *)(a1 + 120);
  size_t v15 = *(int *)(a1 + 124);
  int v16 = ((int)v7 + 2 * (int)v10 - (int)v13) / (int)v14 + 1;
  int v17 = ((int)v8 + 2 * (int)v11 - (int)v12) / (int)v15 + 1;
  int v18 = *(_DWORD *)(a1 + 12) / (v17 * v16);
  in_desc.width = v7;
  in_desc.height = v8;
  in_desc.channels = v9;
  in_desc.row_stride = v7;
  in_desc.image_stride = (int)v8 * (int)v7;
  in_desc.data_type = BNNSDataTypeFloat32;
  *(void *)&in_desc.data_scale = 1065353216;
  out_desc.width = v16;
  out_desc.height = v17;
  out_desc.channels = v18;
  out_desc.row_stride = v16;
  out_desc.image_stride = v17 * v16;
  out_desc.data_type = BNNSDataTypeFloat32;
  *(void *)&out_desc.data_scale = 1065353216;
  memset(&layer_params.weights.data_bias, 0, 96);
  layer_params.x_stride = v14;
  layer_params.y_stride = v15;
  layer_params.x_padding = v10;
  layer_params.y_padding = v11;
  layer_params.k_width = v13;
  layer_params.k_height = v12;
  layer_params.in_channels = v9;
  layer_params.out_channels = v18;
  *(void *)&layer_params.weights.data_type = 0x3F80000000010020;
  uint64_t v19 = *(void *)(a1 + 184);
  uint64_t v20 = *(void *)(a1 + 192);
  layer_params.weights.int data = *(const void **)(v19 + 8);
  layer_params.weights.data_table = 0;
  layer_params.bias.data_type = BNNSDataTypeFloat32;
  layer_params.bias.int data = *(const void **)(v20 + 8);
  layer_params.bias.data_scale = 1.0;
  layer_params.bias.data_table = 0;
  uint64_t v22 = *(unsigned int *)(v19 + 16);
  uint64_t v21 = *(unsigned int *)(v19 + 20);
  if ((int)v13 * (uint64_t)v9 * v12 * v18 != v21 * v22) {
    kaldi::KaldiAssertFailure_((kaldi *)"UpdateBNNSFilter", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", &stru_428.segname[7], "filters_->NumCols() * filters_->NumRows() == (bp.k_width * bp.k_height * bp.in_channels * bp.out_channels)", a5);
  }
  if (v22 == *(_DWORD *)(v19 + 24))
  {
    BNNSFilterParameters filter_params = *(BNNSFilterParameters *)ymmword_20D7C8;
    double result = BNNSFilterCreateConvolutionLayer(&in_desc, &out_desc, &layer_params, &filter_params);
    *(void *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = result;
  }
  else
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params, "UpdateBNNSFilter", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1090);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&filter_params, (uint64_t)"Unsupported BNNS filter weight arrangement", 42);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params);
      uint64_t v25 = *(void *)(a1 + 184);
      uint64_t v22 = *(unsigned int *)(v25 + 16);
      uint64_t v21 = *(unsigned int *)(v25 + 20);
    }
    memset(&v30, 0, sizeof(v30));
    kaldi::Matrix<float>::Matrix((uint64_t)v29, v21, v22, 1, (unsigned char *)&def_5A5E8 + 1);
    kaldi::CuMatrixBase<float>::CopyToMat<float>(*(void *)(a1 + 184), v29, 111, v26, v27);
    int v28 = kaldi::ContextDependency::ContextWidth((kaldi::ContextDependency *)v29);
    if (v28 != fst::StateOrderQueue<int>::Head_((uint64_t)v29)
      && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params, "UpdateBNNSFilter", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1096);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&filter_params, (uint64_t)"It did not work", 15);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params);
    }
    layer_params.weights.int data = *(const void **)v29;
    *(void *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = BNNSFilterCreateConvolutionLayer(&in_desc, &out_desc, &layer_params, &v30);
    kaldi::Matrix<float>::~Matrix((uint64_t)v29);
    double result = *(void **)(a1 + 152);
  }
  if (!result) {
    kaldi::KaldiAssertFailure_((kaldi *)"UpdateBNNSFilter", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", (const char *)&stru_428.offset, "bnns_filter_", v24);
  }
  return result;
}

void sub_10A620(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va1);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::ReadData(float *a1, uint64_t *a2, int a3)
{
  if (kaldi::Peek(a2, a3) != 60)
  {
LABEL_142:
    int v41 = *((_DWORD *)a1 + 26);
    int v40 = *((_DWORD *)a1 + 27);
    if (*((_DWORD *)a1 + 2) % (v40 * v41))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 415);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "input_dim_ % (fmap_x_len_ * fmap_y_len_) == 0");
    }
    else
    {
      int v42 = (v41 + 2 * *((_DWORD *)a1 + 32) - *((_DWORD *)a1 + 28)) / *((_DWORD *)a1 + 30) + 1;
      if (!(*((_DWORD *)a1 + 3)
           % (v42 + v42 * ((v40 + 2 * *((_DWORD *)a1 + 33) - *((_DWORD *)a1 + 29)) / *((_DWORD *)a1 + 31)))))
        kaldi::nnet1::NewMatrix<kaldi::CuMatrixBase<float>>();
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 417);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "output_dim_ % (out_fmap_x_len * out_fmap_y_len) == 0");
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  while (1)
  {
    memset(v48, 0, 24);
    kaldi::ReadToken(a2, a3, (uint64_t)v48, v6, v7);
    if ((SHIBYTE(v48[2]) & 0x80000000) == 0)
    {
      uint64_t v10 = v48;
      switch(HIBYTE(v48[2]))
      {
        case 6:
          goto LABEL_133;
        case 9:
LABEL_4:
          BOOL v11 = v48[0] == (void *)0x6461724778614D3CLL && LOBYTE(v48[1]) == 62;
          uint64_t v12 = a1 + 37;
          if (!v11) {
            goto LABEL_8;
          }
          goto LABEL_109;
        case 0xA:
LABEL_69:
          BOOL v27 = v48[0] == (void *)0x654C5870616D463CLL && LOWORD(v48[1]) == 15982;
          uint64_t v21 = (uint64_t)(a1 + 26);
          if (v27) {
            goto LABEL_138;
          }
          if (HIBYTE(v48[2]) == 6) {
            goto LABEL_101;
          }
          if (HIBYTE(v48[2]) != 10) {
            goto LABEL_137;
          }
          BOOL v28 = v48[0] == (void *)0x654C5970616D463CLL && LOWORD(v48[1]) == 15982;
          uint64_t v21 = (uint64_t)(a1 + 27);
          if (!v28) {
            goto LABEL_79;
          }
          goto LABEL_138;
        case 0xB:
LABEL_89:
          BOOL v31 = v48[0] == (void *)0x745358746C69463CLL && *(void **)((char *)v48 + 3) == (void *)0x3E7065745358746CLL;
          uint64_t v21 = (uint64_t)(a1 + 30);
          if (v31) {
            goto LABEL_138;
          }
          if (HIBYTE(v48[2]) == 6) {
            goto LABEL_101;
          }
          if (HIBYTE(v48[2]) != 11) {
            goto LABEL_137;
          }
          BOOL v32 = v48[0] == (void *)0x745359746C69463CLL && *(void **)((char *)v48 + 3) == (void *)0x3E7065745359746CLL;
          uint64_t v21 = (uint64_t)(a1 + 31);
          if (!v32) {
            goto LABEL_137;
          }
          goto LABEL_138;
        case 0xF:
          BOOL v33 = v48[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v48 + 7) == (void *)0x3E66656F43657461;
          uint64_t v12 = a1 + 34;
          if (!v33) {
            goto LABEL_137;
          }
          goto LABEL_109;
        case 0x12:
LABEL_61:
          if (v48[0] != (void *)0x6E6569646172473CLL
            || v48[1] != (void *)0x7079546D726F4E74
            || LOWORD(v48[2]) != 15973)
          {
            uint64_t v10 = v48;
            switch(HIBYTE(v48[2]))
            {
              case 6:
                goto LABEL_133;
              case 9:
                goto LABEL_4;
              case 0xA:
                goto LABEL_69;
              case 0xB:
                goto LABEL_89;
              default:
                goto LABEL_137;
            }
          }
          goto LABEL_102;
        case 0x13:
          BOOL v24 = v48[0] == (void *)0x61654C736169423CLL
             && v48[1] == (void *)0x6F43657461526E72
             && *(void **)((char *)&v48[1] + 3) == (void *)0x3E66656F43657461;
          uint64_t v12 = a1 + 35;
          if (!v24)
          {
            switch(HIBYTE(v48[2]))
            {
              case 9:
                goto LABEL_4;
              case 0xA:
                goto LABEL_69;
              case 0xB:
                goto LABEL_89;
              case 0xC:
              case 0xD:
              case 0xE:
              case 0xF:
              case 0x10:
              case 0x11:
                goto LABEL_137;
              case 0x12:
                goto LABEL_61;
              default:
                goto LABEL_8;
            }
          }
          goto LABEL_109;
        default:
          goto LABEL_137;
      }
    }
    size_t v13 = (char *)v48[1];
    if (v48[1] == (char *)&dword_C + 3)
    {
      BOOL v14 = *(void *)v48[0] == 0x61526E7261654C3CLL && *(void *)((char *)v48[0] + 7) == 0x3E66656F43657461;
      uint64_t v12 = a1 + 34;
      if (v14) {
        goto LABEL_109;
      }
    }
    if (v48[1] == (char *)&dword_10 + 3)
    {
      BOOL v16 = *(void *)v48[0] == 0x61654C736169423CLL
         && *((void *)v48[0] + 1) == 0x6F43657461526E72
         && *(void *)((char *)v48[0] + 11) == 0x3E66656F43657461;
      uint64_t v12 = a1 + 35;
      if (v16) {
        goto LABEL_109;
      }
      size_t v13 = (char *)v48[1];
    }
    if (v13 == (unsigned char *)&dword_10 + 2)
    {
      if (*(void *)v48[0] == 0x6E6569646172473CLL
        && *((void *)v48[0] + 1) == 0x7079546D726F4E74
        && *((_WORD *)v48[0] + 8) == 15973)
      {
LABEL_102:
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v47 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p, v8, v9);
        *((_DWORD *)a1 + 36) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v47) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_139;
      }
      size_t v13 = (char *)v48[1];
    }
    if (v13 != (unsigned char *)&dword_8 + 1) {
      goto LABEL_39;
    }
    BOOL v19 = *(void *)v48[0] == 0x6461724778614D3CLL && *((unsigned char *)v48[0] + 8) == 62;
    uint64_t v12 = a1 + 37;
    if (!v19)
    {
      size_t v13 = (char *)v48[1];
LABEL_39:
      if (v13 == (unsigned char *)&dword_8 + 2)
      {
        BOOL v20 = *(void *)v48[0] == 0x654C5870616D463CLL && *((_WORD *)v48[0] + 4) == 15982;
        uint64_t v21 = (uint64_t)(a1 + 26);
        if (v20) {
          goto LABEL_138;
        }
        size_t v13 = (char *)v48[1];
        if (v48[1] == (char *)&dword_8 + 2)
        {
          BOOL v22 = *(void *)v48[0] == 0x654C5970616D463CLL && *((_WORD *)v48[0] + 4) == 15982;
          uint64_t v21 = (uint64_t)(a1 + 27);
          if (v22) {
            goto LABEL_138;
          }
          if ((HIBYTE(v48[2]) & 0x80) == 0)
          {
            if (HIBYTE(v48[2]) != 6)
            {
              if (HIBYTE(v48[2]) != 10) {
                goto LABEL_137;
              }
LABEL_79:
              BOOL v29 = v48[0] == (void *)0x654C58746C69463CLL && LOWORD(v48[1]) == 15982;
              uint64_t v21 = (uint64_t)(a1 + 28);
              if (!v29)
              {
                BOOL v30 = v48[0] == (void *)0x654C59746C69463CLL && LOWORD(v48[1]) == 15982;
                uint64_t v21 = (uint64_t)(a1 + 29);
                if (!v30) {
                  goto LABEL_137;
                }
              }
LABEL_138:
              kaldi::ReadBasicType<int>(a2, a3, v21, v8, v9);
              goto LABEL_139;
            }
LABEL_101:
            uint64_t v10 = v48;
LABEL_133:
            BOOL v38 = *(_DWORD *)v10 == 1684099132 && *((_WORD *)v10 + 2) == 15960;
            uint64_t v21 = (uint64_t)(a1 + 32);
            if (!v38) {
              goto LABEL_137;
            }
            goto LABEL_138;
          }
          BOOL v34 = *(void *)v48[0] == 0x654C58746C69463CLL && *((_WORD *)v48[0] + 4) == 15982;
          uint64_t v21 = (uint64_t)(a1 + 28);
          if (v34) {
            goto LABEL_138;
          }
          size_t v13 = (char *)v48[1];
          BOOL v35 = *(void *)v48[0] == 0x654C59746C69463CLL && *((_WORD *)v48[0] + 4) == 15982;
          uint64_t v21 = (uint64_t)(a1 + 29);
          if (v35) {
            goto LABEL_138;
          }
          if ((HIBYTE(v48[2]) & 0x80) == 0) {
            goto LABEL_8;
          }
        }
      }
      if (v13 != (unsigned char *)&dword_8 + 3) {
        goto LABEL_131;
      }
      BOOL v36 = *(void *)v48[0] == 0x745358746C69463CLL && *(void *)((char *)v48[0] + 3) == 0x3E7065745358746CLL;
      uint64_t v21 = (uint64_t)(a1 + 30);
      if (v36) {
        goto LABEL_138;
      }
      size_t v13 = (char *)v48[1];
      if (v48[1] != (char *)&dword_8 + 3) {
        goto LABEL_131;
      }
      BOOL v37 = *(void *)v48[0] == 0x745359746C69463CLL && *(void *)((char *)v48[0] + 3) == 0x3E7065745359746CLL;
      uint64_t v21 = (uint64_t)(a1 + 31);
      if (v37) {
        goto LABEL_138;
      }
      if ((HIBYTE(v48[2]) & 0x80) == 0)
      {
LABEL_8:
        if (HIBYTE(v48[2]) == 6) {
          goto LABEL_101;
        }
      }
      else
      {
LABEL_131:
        if (v13 == (unsigned char *)&dword_4 + 2)
        {
          uint64_t v10 = (void **)v48[0];
          goto LABEL_133;
        }
      }
LABEL_137:
      BOOL v39 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v48, "<PadY>");
      uint64_t v21 = (uint64_t)(a1 + 33);
      if (!v39)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 401);
        long long v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
        if (SHIBYTE(v48[2]) >= 0) {
          BOOL v44 = v48;
        }
        else {
          BOOL v44 = (void **)v48[0];
        }
        if (SHIBYTE(v48[2]) >= 0) {
          uint64_t v45 = HIBYTE(v48[2]);
        }
        else {
          uint64_t v45 = (uint64_t)v48[1];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v44, v45);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      goto LABEL_138;
    }
LABEL_109:
    kaldi::ReadBasicType<float>(a2, a3, v12, v8, v9);
LABEL_139:
    if (SHIBYTE(v48[2]) < 0) {
      operator delete(v48[0]);
    }
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_142;
    }
  }
}

void sub_10B048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v22 - 89) < 0) {
    operator delete(*(void **)(v22 - 112));
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::WriteConfig(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", a4, a5);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<BiasLearnRateCoef>", v8, v9);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v10, v11);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 144), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v12, v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v14, v15);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FmapXLen>", v16, v17);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FmapYLen>", v18, v19);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FiltXLen>", v20, v21);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FiltYLen>", v22, v23);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FiltXStep>", v24, v25);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FiltYStep>", v26, v27);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PadX>", v28, v29);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PadY>", v30, v31);
  return kaldi::WriteBasicType<int>(a2, (int)a3);
}

void sub_10B300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::WriteData(uint64_t *a1, void *a2, int a3, int a4)
{
  (*(void (**)(uint64_t *))(*a1 + 168))(a1);
  kaldi::CuMatrixBase<float>::Write(a1[23], a2, a3, a4);
  uint64_t v10 = (_DWORD *)a1[24];

  kaldi::CuVectorBase<float>::Write(v10, a2, a3, v8, v9);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::NumParams(uint64_t a1)
{
  return (*(_DWORD *)(*(void *)(a1 + 192) + 16)
                      + *(_DWORD *)(*(void *)(a1 + 184) + 16) * *(_DWORD *)(*(void *)(a1 + 184) + 20));
}

_DWORD *kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::GetParams(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  uint64_t v10 = (_DWORD *)a1[23];
  int v11 = v10[4] * v10[5];
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  if (v11 > *(_DWORD *)(a2 + 8)
    || (int v17 = *(void **)a2,
        LODWORD(v18) = v11,
        kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v17, v10, v7, v8, v9),
        uint64_t v14 = (_DWORD *)a1[24],
        int v15 = v14[4],
        uint64_t v18 = 0,
        uint64_t v19 = 0,
        (v15 + v11) > *(_DWORD *)(a2 + 8)))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v9);
  }
  int v17 = (void *)(*(void *)a2 + 4 * v11);
  LODWORD(v18) = v15;
  return kaldi::CuVectorBase<float>::CopyToVec<float>(v14, (uint64_t)&v17, v12, v13, v9);
}

_DWORD *kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::SetParams(void *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(void *))(*a1 + 176))(a1))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v13, "SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 502);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v13, "wei_src.Dim() == NumParams()");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v13);
  }
  uint64_t v6 = a1[23];
  int v7 = *(_DWORD *)(v6 + 16) * *(_DWORD *)(v6 + 20);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  if (v7 > *(_DWORD *)(a2 + 8)
    || (uint64_t v13 = *(char **)a2,
        LODWORD(v14) = v7,
        kaldi::CuMatrixBase<float>::CopyRowsFromVec(v6, &v13),
        uint64_t v10 = (_DWORD *)a1[24],
        int v11 = v10[4],
        uint64_t v14 = 0,
        uint64_t v15 = 0,
        (v11 + v7) > *(_DWORD *)(a2 + 8)))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v5);
  }
  uint64_t v13 = (char *)(*(void *)a2 + 4 * v7);
  LODWORD(v14) = v11;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v10, (uint64_t)&v13, v8, v9, v5);
}

float kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::SumParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  float v6 = kaldi::CuMatrixBase<float>::Sum(*(void *)(a1 + 184), a2, a3, a4, a5);
  double v7 = kaldi::CuVectorBase<float>::Sum(*(void *)(a1 + 192));
  return v6 + *(float *)&v7;
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::PerturbParams(uint64_t a1, float a2)
{
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v14, *(unsigned int *)(*(void *)(a1 + 184) + 20), *(unsigned int *)(*(void *)(a1 + 184) + 16), 1u, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v14);
  kaldi::CuMatrixBase<float>::AddMat(*(void *)(a1 + 184), (uint64_t)v14, 111, v4, v5, a2, 1.0);
  uint64_t v6 = *(unsigned int *)(*(void *)(a1 + 192) + 16);
  v13[0] = off_262E60;
  memset(&v13[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v13, v6, 1u, v7, v8);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v13);
  kaldi::CuVectorBase<float>::AddVec(*(void *)(a1 + 192), (uint64_t)v13, v9, v10, v11, a2, 1.0);
  kaldi::CuVector<float>::~CuVector(v13);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v14);
}

void sub_10B6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::Info(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
  (*(void (**)(uint64_t, void *, void))(*(void *)a1 + 168))(a1, v21, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" OutSizeX:", 10);
  uint64_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" OutSizeY:", 10);
  uint64_t v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" InFmaps:", 9);
  uint64_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" OutFmaps:", 10);
  std::ostream::operator<<();
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\n filters: ", 11);
  kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 184));
  if ((v20 & 0x80u) == 0) {
    uint64_t v6 = v19;
  }
  else {
    uint64_t v6 = (void **)v19[0];
  }
  if ((v20 & 0x80u) == 0) {
    uint64_t v7 = v20;
  }
  else {
    uint64_t v7 = (uint64_t)v19[1];
  }
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n bias: ", 8);
  kaldi::nnet1::MomentStatistics<float>(*(_DWORD **)(a1 + 192), v10, v11, v12, v13);
  if ((v18 & 0x80u) == 0) {
    uint64_t v14 = __p;
  }
  else {
    uint64_t v14 = (void **)__p[0];
  }
  if ((v18 & 0x80u) == 0) {
    uint64_t v15 = v18;
  }
  else {
    uint64_t v15 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v14, v15);
  if ((char)v18 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v20 < 0) {
    operator delete(v19[0]);
  }
  std::stringbuf::str();
  if (v22 < 0) {
    operator delete((void *)v21[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_10B9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  std::ostringstream::~ostringstream((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v41, "\n  ");
  kaldi::nnet1::MomentStatistics<float>((void *)(a1 + 200), v4, v5, v6, v7);
  if ((v40 & 0x80u) == 0) {
    uint64_t v8 = v39;
  }
  else {
    uint64_t v8 = (void **)v39[0];
  }
  if ((v40 & 0x80u) == 0) {
    std::string::size_type v9 = v40;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v39[1];
  }
  uint64_t v10 = std::string::append(&v41, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  uint64_t v12 = std::string::append(&v42, ", lr-coef ");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v38 & 0x80u) == 0) {
    uint64_t v14 = v37;
  }
  else {
    uint64_t v14 = (void **)v37[0];
  }
  if ((v38 & 0x80u) == 0) {
    std::string::size_type v15 = v38;
  }
  else {
    std::string::size_type v15 = (std::string::size_type)v37[1];
  }
  uint64_t v16 = std::string::append(&v43, (const std::string::value_type *)v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  unsigned __int8 v18 = std::string::append(&v44, "\n  bias_grad");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((void *)(a1 + 224), v20, v21, v22, v23);
  if ((v36 & 0x80u) == 0) {
    uint64_t v24 = v35;
  }
  else {
    uint64_t v24 = (void **)v35[0];
  }
  if ((v36 & 0x80u) == 0) {
    std::string::size_type v25 = v36;
  }
  else {
    std::string::size_type v25 = (std::string::size_type)v35[1];
  }
  uint64_t v26 = std::string::append(&v45, (const std::string::value_type *)v24, v25);
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  uint64_t v28 = std::string::append(&v46, ", lr-coef ");
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v34 & 0x80u) == 0) {
    uint64_t v30 = __p;
  }
  else {
    uint64_t v30 = (void **)__p[0];
  }
  if ((v34 & 0x80u) == 0) {
    std::string::size_type v31 = v34;
  }
  else {
    std::string::size_type v31 = (std::string::size_type)__p[1];
  }
  BOOL v32 = std::string::append(&v47, (const std::string::value_type *)v30, v31);
  *a2 = *v32;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  if ((char)v34 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if ((char)v36 < 0) {
    operator delete(v35[0]);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if ((char)v38 < 0) {
    operator delete(v37[0]);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if ((char)v40 < 0) {
    operator delete(v39[0]);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
}

void sub_10BCB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v52 - 57) < 0) {
    operator delete(*(void **)(v52 - 80));
  }
  if (*(char *)(v52 - 89) < 0) {
    operator delete(*(void **)(v52 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v52 - 121) < 0) {
    operator delete(*(void **)(v52 - 144));
  }
  if (*(char *)(v52 - 153) < 0) {
    operator delete(*(void **)(v52 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  _Unwind_Resume(exception_object);
}

void sub_10BDB4()
{
}

void sub_10BDBC()
{
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (a4 || !*(unsigned char *)(a1 + 17)) {
    kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::PropagateCpu(a1, a2, a3, a4, a5);
  }
  else {
    kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::PropagateBNNS(a1, a2, a3, 0, a5);
  }
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::PropagateBNNS(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  uint64_t v5 = *(void **)(a1 + 152);
  if (!v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateBNNS", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", (const char *)&stru_428.align + 1, "bnns_filter_", a5);
  }
  if (a4)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8, "PropagateBNNS", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1120);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, "BNNS only supports one batch");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  uint64_t result = BNNSFilterApplyBatch(v5, *(int *)(a2 + 20), *(const void **)(a2 + 8), *(int *)(a2 + 24), *(void **)(a3 + 8), *(int *)(a3 + 24));
  if (result) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateBNNS", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", (const char *)&stru_428.nreloc, "ret == 0", v7);
  }
  return result;
}

void sub_10BEA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::PropagateCpu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5 = *(_DWORD *)(a1 + 104);
  int v6 = *(_DWORD *)(a1 + 108);
  uint64_t v7 = (const char *)((v5 + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120));
  int v79 = (v6 + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124);
  uint64_t v78 = (v79 + 1);
  int v8 = v78 * (v7 + 1);
  if (*(_DWORD *)(*(void *)(a1 + 184) + 20) != *(_DWORD *)(a1 + 12) / v8) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateCpu", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", stru_478.sectname, "num_filters == num_output_fmaps", a5);
  }
  int v9 = a4;
  uint64_t v10 = a3;
  uint64_t v80 = (*(_DWORD *)(a1 + 12) / v8);
  int v12 = *(_DWORD *)(a1 + 8);
  uint64_t v13 = *(unsigned int *)(a2 + 20);
  uint64_t v85 = (uint64_t *)(a1 + 296);
  uint64_t v14 = *(void *)(a1 + 296);
  unint64_t v15 = *(int *)(a1 + 80);
  int v83 = v78 * (v7 + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 304) - v14) >> 3) < v15)
  {
    std::vector<std::vector<kaldi::CuMatrix<float>>>::resize(v85, v15);
    int v8 = v78 * (v7 + 1);
    uint64_t v14 = *v85;
    uint64_t v10 = a3;
  }
  uint64_t v77 = (v7 + 1);
  int v86 = v9;
  long long v17 = (uint64_t *)(v14 + 24 * v9);
  if (0xAAAAAAAAAAAAAAABLL * ((v17[1] - *v17) >> 4) < v8)
  {
    std::vector<kaldi::CuMatrix<float>>::resize(v17, v8);
    int v8 = v78 * (v7 + 1);
  }
  if (v8 >= 1)
  {
    uint64_t v18 = 0;
    do
    {
      kaldi::CuMatrix<float>::Resize(*(void *)(*(void *)(a1 + 296) + 24 * v9) + v18, v13, *(unsigned int *)(*(void *)(a1 + 184) + 16), 0, 0);
      v18 += 48;
    }
    while (48 * v83 != v18);
  }
  uint64_t v81 = v10;
  int v82 = (uint64_t *)(a1 + 160);
  unint64_t v19 = *(int *)(a1 + 80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 168) - *(void *)(a1 + 160)) >> 4) < v19) {
    std::vector<kaldi::CuMatrix<float>>::resize(v82, v19);
  }
  int v20 = *(_DWORD *)(a1 + 132);
  int v21 = *(_DWORD *)(a1 + 108);
  int v22 = *(_DWORD *)(a1 + 116);
  int v89 = -v20;
  if (v20 + v21 - v22 < -v20) {
    goto LABEL_69;
  }
  int v23 = 0;
  int v24 = *(_DWORD *)(a1 + 128);
  int v25 = *(_DWORD *)(a1 + 104);
  int v26 = *(_DWORD *)(a1 + 112);
  int v88 = v12 / (v6 * v5);
  do
  {
    int v27 = -v24;
    if (v24 + v25 - v26 < -v24) {
      goto LABEL_68;
    }
    uint64_t v28 = v23;
    do
    {
      uint64_t v87 = v28;
      memset(&__p, 0, sizeof(__p));
      if (v88 < 1) {
        goto LABEL_64;
      }
      std::vector<int>::pointer end = 0;
      int v30 = 0;
      int v31 = v27 + v25 * v89;
      int v32 = *(_DWORD *)(a1 + 116);
      do
      {
        if (v32 < 1) {
          goto LABEL_63;
        }
        for (int i = 0; i < v32; ++i)
        {
          if (v26 < 1) {
            continue;
          }
          int v34 = 0;
          int v35 = i + v89;
          do
          {
            if (v35 < 0 || (int v36 = *(_DWORD *)(a1 + 108), v35 >= v36))
            {
              value = __p.__end_cap_.__value_;
            }
            else
            {
              value = __p.__end_cap_.__value_;
              if (v34 + v27 >= 0)
              {
                int v38 = *(_DWORD *)(a1 + 104);
                if (v34 + v27 < v38)
                {
                  int v39 = v31 + v34 + (i + v36 * v30) * v38;
                  if (end >= __p.__end_cap_.__value_)
                  {
                    std::vector<int>::pointer begin = __p.__begin_;
                    uint64_t v50 = end - __p.__begin_;
                    unint64_t v51 = v50 + 1;
                    if ((unint64_t)(v50 + 1) >> 62) {
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    }
                    int64_t v52 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
                    if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v51) {
                      unint64_t v51 = v52 >> 1;
                    }
                    if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v53 = v51;
                    }
                    if (v53)
                    {
                      float v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&__p.__end_cap_, v53);
                      std::vector<int>::pointer begin = __p.__begin_;
                      std::vector<int>::pointer end = __p.__end_;
                    }
                    else
                    {
                      float v54 = 0;
                    }
                    long long v55 = (int *)&v54[4 * v50];
                    *long long v55 = v39;
                    int v56 = v55 + 1;
                    while (end != begin)
                    {
                      int v57 = *--end;
                      *--long long v55 = v57;
                    }
                    __p.__begin_ = v55;
                    __p.__end_ = v56;
                    __p.__end_cap_.__value_ = (int *)&v54[4 * v53];
                    if (begin) {
                      operator delete(begin);
                    }
                    std::vector<int>::pointer end = v56;
                  }
                  else
                  {
                    *end++ = v39;
                  }
                  goto LABEL_60;
                }
              }
            }
            if (end >= value)
            {
              std::vector<int>::pointer v40 = __p.__begin_;
              uint64_t v41 = end - __p.__begin_;
              unint64_t v42 = v41 + 1;
              if ((unint64_t)(v41 + 1) >> 62) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v43 = (char *)value - (char *)__p.__begin_;
              if (v43 >> 1 > v42) {
                unint64_t v42 = v43 >> 1;
              }
              if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v44 = v42;
              }
              if (v44)
              {
                std::string v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&__p.__end_cap_, v44);
                std::vector<int>::pointer v40 = __p.__begin_;
                std::vector<int>::pointer end = __p.__end_;
              }
              else
              {
                std::string v45 = 0;
              }
              std::string v46 = (int *)&v45[4 * v41];
              *std::string v46 = -1;
              std::string v47 = v46 + 1;
              while (end != v40)
              {
                int v48 = *--end;
                *--std::string v46 = v48;
              }
              __p.__begin_ = v46;
              __p.__end_ = v47;
              __p.__end_cap_.__value_ = (int *)&v45[4 * v44];
              if (v40) {
                operator delete(v40);
              }
              std::vector<int>::pointer end = v47;
            }
            else
            {
              *end++ = -1;
            }
LABEL_60:
            __p.__end_ = end;
            ++v34;
            int v26 = *(_DWORD *)(a1 + 112);
          }
          while (v34 < v26);
          int v32 = *(_DWORD *)(a1 + 116);
        }
LABEL_63:
        ++v30;
      }
      while (v30 != v88);
LABEL_64:
      kaldi::CuMatrixBase<float>::CopyCols(*(void *)(*v85 + 24 * v86) + 48 * v87, a2, (unsigned int **)&__p, a4, a5);
      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
      uint64_t v28 = v87 + 1;
      v27 += *(_DWORD *)(a1 + 120);
      int v25 = *(_DWORD *)(a1 + 104);
      int v24 = *(_DWORD *)(a1 + 128);
      int v26 = *(_DWORD *)(a1 + 112);
    }
    while (v27 <= v24 + v25 - v26);
    int v21 = *(_DWORD *)(a1 + 108);
    int v20 = *(_DWORD *)(a1 + 132);
    int v23 = v87 + 1;
    int v22 = *(_DWORD *)(a1 + 116);
LABEL_68:
    v89 += *(_DWORD *)(a1 + 124);
  }
  while (v89 <= v20 + v21 - v22);
LABEL_69:
  kaldi::CuMatrix<float>::Resize(*v82 + 48 * v86, *(unsigned int *)(v81 + 20), *(unsigned int *)(v81 + 16), 3u, 0);
  if (v83 >= 1)
  {
    uint64_t v58 = 0;
    int v59 = 0;
    do
    {
      uint64_t v60 = *(void *)(a1 + 160) + 48 * v86;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&__p, v60, 0, *(_DWORD *)(v60 + 20), v59, v80);
      kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)&__p, *(void *)(a1 + 192), v61, v62, v63, 1.0, 0.0);
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&__p, *(void *)(*(void *)(a1 + 296) + 24 * v86) + v58, CblasNoTrans, *(void *)(a1 + 184), &stru_68.sectname[8], 1.0, 1.0);
      __p.__begin_ = (std::vector<int>::pointer)off_262D80;
      *(_OWORD *)&__p.__end_ = 0u;
      long long v91 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&__p);
      int v59 = (const char *)(v59 + v80);
      v58 += 48;
    }
    while (48 * v83 != v58);
  }
  std::vector<int>::vector(&__p, *(int *)(a1 + 12));
  if ((int)v80 >= 1)
  {
    uint64_t v65 = 0;
    uint64x2_t v66 = (uint64x2_t)vdupq_n_s64(v77 - 1);
    int64x2_t v67 = vdupq_n_s64(2uLL);
    uint64_t v68 = 1;
    do
    {
      if ((v79 & 0x80000000) == 0)
      {
        uint64_t v69 = 0;
        unint64_t v70 = &__p.__begin_[v68];
        int v71 = v65;
        do
        {
          if ((v7 & 0x80000000) == 0)
          {
            float v72 = v70;
            uint64_t v73 = (v77 + 1) & 0x1FFFFFFFELL;
            int v74 = v71;
            int64x2_t v75 = (int64x2_t)xmmword_204A30;
            do
            {
              int32x2_t v76 = vmovn_s64((int64x2_t)vcgeq_u64(v66, (uint64x2_t)v75));
              if (v76.i8[0]) {
                *(v72 - 1) = v74;
              }
              uint64_t v64 = v76.u32[1];
              if (v76.i8[4])
              {
                uint64_t v64 = (v80 + v74);
                *float v72 = v64;
              }
              int64x2_t v75 = vaddq_s64(v75, v67);
              v74 += 2 * v80;
              v72 += 2;
              v73 -= 2;
            }
            while (v73);
          }
          ++v69;
          v71 += v80 * v77;
          v70 += (int)v7 + 1;
        }
        while (v69 != v78);
      }
      ++v65;
      v68 += (int)v78 * (uint64_t)(int)v77;
    }
    while (v65 != v80);
  }
  kaldi::CuMatrixBase<float>::CopyCols(v81, *v82 + 48 * v86, (unsigned int **)&__p, v64, v7);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_10C5B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::BackpropagateCpu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, int a6)
{
  int v6 = (*(_DWORD *)(a1 + 104) + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120);
  int v7 = v6 + 1;
  int v8 = (*(_DWORD *)(a1 + 108) + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124);
  uint64_t v9 = (v8 + 1);
  int v10 = v9 * (v6 + 1);
  uint64_t v11 = (*(_DWORD *)(a1 + 12) / v10);
  if (*(_DWORD *)(*(void *)(a1 + 184) + 20) == v11)
  {
    unint64_t v14 = a6;
    kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 160) + 48 * a6, *(unsigned int *)(a4 + 20), *(unsigned int *)(a4 + 16), 3u, 0);
    std::vector<int>::vector(&v29, *(int *)(a1 + 12));
    if ((int)v11 >= 1)
    {
      int v17 = 0;
      uint64_t v18 = 0;
      for (uint64_t i = 0; i != v11; ++i)
      {
        if ((v8 & 0x80000000) == 0)
        {
          uint64_t v20 = 0;
          int v21 = &v29.__begin_[v18];
          int v22 = v17;
          do
          {
            uint64_t v23 = (v6 + 1);
            int v24 = v22;
            int v25 = v21;
            if ((v6 & 0x80000000) == 0)
            {
              do
              {
                int *v25 = v24;
                v25 += v11;
                ++v24;
                --v23;
              }
              while (v23);
            }
            ++v20;
            v21 += v7 * v11;
            v22 += v7;
          }
          while (v20 != v9);
        }
        ++v18;
        v17 += v10;
      }
    }
    kaldi::CuMatrixBase<float>::CopyCols(*(void *)(a1 + 160) + 48 * (int)v14, a4, (unsigned int **)&v29, v15, v16);
    std::vector<kaldi::CuSubMatrix<float>>::vector(v28, v10);
    uint64_t v26 = *(void *)(a1 + 24);
    if (v14 < (*(void *)(a1 + 32) - v26) >> 3) {
      kaldi::CuWorkspace::GetChildWorkspace(*(kaldi::CuWorkspace **)(v26 + 8 * v14), -1);
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v27, "BackpropagateCpu", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1327);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Convolutional2DComponent needs workspace set to perform back-propagation", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v27);
  }
  kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateCpu", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", &stru_518.sectname[5], "num_filters == num_output_fmaps", a5);
}

void sub_10CBC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, kaldi::CuWorkspace *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  a22 = v22 - 136;
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  int v24 = *(void **)(v22 - 112);
  if (v24)
  {
    *(void *)(v22 - 104) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 148) = a3;
  *(_DWORD *)(result + 144) = a2;
  *(unsigned char *)(result + 344) = 0;
  return result;
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::NormalizeGradients(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  float v7 = a6;
  int v9 = *(_DWORD *)(a1 + 144);
  if (v9 == 3)
  {
    if (a6 >= 0.0 && a6 <= 1.0)
    {
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*(void *)(*(void *)(a1 + 200) + 8 * a2), *(void *)(a1 + 248) + 48 * a2, a6);
      uint64_t v15 = *(void *)(*(void *)(a1 + 224) + 8 * a2);
      uint64_t v16 = *(void *)(a1 + 272) + 32 * a2;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v15, v16, v7, v12, v13, v14);
    }
  }
  else if (v9 == 2)
  {
    if (a6 > 0.0)
    {
      uint64_t v17 = a2;
      if (*(unsigned char *)(a1 + 84)) {
        float v7 = (float)*(int *)(*(void *)(a1 + 320) + 4 * a2) * a6;
      }
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*(void *)(*(void *)(a1 + 200) + 8 * a2), (unsigned int *)(*(void *)(a1 + 248) + 48 * a2), v7, a3, a4, a5);
      uint64_t v22 = *(void *)(*(void *)(a1 + 224) + 8 * v17);
      uint64_t v23 = (_DWORD *)(*(void *)(a1 + 272) + 32 * v17);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v22, v23, v19, v20, v21, v7);
    }
  }
  else if (v9 == 1 && a6 > 0.0)
  {
    uint64_t v10 = a2;
    if (*(unsigned char *)(a1 + 84)) {
      float v7 = (float)*(int *)(*(void *)(a1 + 320) + 4 * a2) * a6;
    }
    kaldi::nnet1::UpdatableComponent::ClipGradient(*(void *)(*(void *)(a1 + 200) + 8 * a2), v7);
    uint64_t v18 = *(void *)(*(void *)(a1 + 224) + 8 * v10);
    kaldi::nnet1::UpdatableComponent::ClipGradient(v18, v7);
  }
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);

  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::AccumGradientsCpu(a1, a2, a3, a4, a5);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 344))
  {
    int v2 = *(_DWORD *)(a1 + 80);
    if (v2 > 1) {
      int v3 = v2 + 1;
    }
    else {
      int v3 = 1;
    }
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 200), v3);
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize((uint64_t *)(a1 + 224), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 248), v3);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 272), v3);
    if (v3 >= 1) {
      operator new();
    }
    std::vector<int>::resize((std::vector<int> *)(a1 + 320), v3);
    *(unsigned char *)(a1 + 344) = 1;
  }
}

void sub_10D148()
{
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::AccumGradientsCpu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5 = (*(_DWORD *)(a1 + 104) + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120) + 1;
  int v6 = v5 + v5 * ((*(_DWORD *)(a1 + 108) + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124));
  int v7 = *(_DWORD *)(a1 + 12) / v6;
  if (*(_DWORD *)(*(void *)(a1 + 184) + 20) != v7) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradientsCpu", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", (const char *)&stru_298.size + 6, "num_filters == num_output_fmaps", a5);
  }
  int v8 = (int)a5;
  *(_DWORD *)(*(void *)(a1 + 320) + 4 * (int)a5) = *(_DWORD *)(a2 + 20);
  uint64_t v10 = *(void *)(a1 + 200);
  *(void *)(*(void *)(v10 + 8 * (int)a5) + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a4;
  *(void *)(*(void *)(*(void *)(a1 + 224) + 8 * (int)a5) + ++*(void *)(result + 24) = a4;
  kaldi::CuMatrixBase<float>::SetZero(*(void *)(v10 + 8 * (int)a5));
  kaldi::CuVectorBase<float>::SetZero(*(void *)(*(void *)(a1 + 224) + 8 * v8));
  if (v6 >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 48 * v6;
    do
    {
      uint64_t v14 = *(void *)(a1 + 160) + 48 * v8;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v18, v14, 0, *(_DWORD *)(v14 + 20), v12, v7);
      kaldi::CuMatrixBase<float>::AddMatMat(*(void *)(*(void *)(a1 + 200) + 8 * v8), (uint64_t)&v18, CblasTrans, *(void *)(*(void *)(a1 + 296) + 24 * v8) + v11, &stru_68.sectname[7], 1.0, 1.0);
      kaldi::CuVectorBase<float>::AddRowSumMat(*(void *)(*(void *)(a1 + 224) + 8 * v8), &v18, 1.0, 1.0, v15, v16, v17);
      uint64_t v18 = off_262D80;
      long long v19 = 0u;
      long long v20 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v18);
      uint64_t v12 = (const char *)(v12 + v7);
      v11 += 48;
    }
    while (v13 != v11);
  }
}

void sub_10D338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (**a10)())
{
  a10 = off_262D80;
  *uint64_t v10 = 0u;
  v10[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a10);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::GetGradient(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = (_DWORD ***)(*(uint64_t (**)(void *))(*a1 + 16))(a1);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v24, *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v23, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0, 0);
  ((void (*)(_DWORD ***, uint64_t, unsigned char *, void))(*v8)[14])(v8, a2, v24, 0);
  ((void (*)(_DWORD ***, uint64_t, unsigned char *, uint64_t, unsigned char *, void))(*v8)[16])(v8, a2, v24, a3, v23, 0);
  ((void (*)(_DWORD ***, uint64_t, uint64_t, void, void))(*v8)[29])(v8, a2, a3, 0, 0);
  int v9 = *(_DWORD *)(a1[23] + 16) * *(_DWORD *)(a1[23] + 20);
  kaldi::Vector<float>::Resize((void **)a4, (*(_DWORD *)(a1[24] + 16) + v9), 0, v10, v11);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if (v9 > *(_DWORD *)(a4 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v14);
  }
  long long v20 = *(void **)a4;
  LODWORD(v21) = v9;
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v20, *v8[25], v12, v13, v14);
  int v18 = *(_DWORD *)(a1[24] + 16);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if ((v18 + v9) > *(_DWORD *)(a4 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v17);
  }
  long long v20 = (void *)(*(void *)a4 + 4 * v9);
  LODWORD(v21) = v18;
  kaldi::CuVectorBase<float>::CopyToVec<float>(*v8[28], (uint64_t)&v20, v15, v16, v17);
  ((void (*)(_DWORD ***))(*v8)[1])(v8);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v23);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v24);
}

void sub_10D5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

float kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 84)) {
    return *(float *)(a1 + 56);
  }
  uint64_t v2 = *(void *)(a1 + 352);
  unint64_t v3 = *(void *)(a1 + 360) - v2;
  if (!v3) {
    return NAN;
  }
  unint64_t v4 = v3 >> 2;
  if ((int)v4 <= a2) {
    return NAN;
  }
  int v5 = v4 - 1;
  if (a2 >= 0) {
    int v5 = a2;
  }
  return *(float *)(v2 + 4 * v5);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  *a3 = *(_DWORD *)(*(void *)(a1 + 192) + 16)
      + *(_DWORD *)(*(void *)(a1 + 184) + 16) * *(_DWORD *)(*(void *)(a1 + 184) + 20);
  uint64_t v10 = *(void *)(a1 + 200);
  uint64_t v11 = *(void *)(a1 + 208) - v10;
  if (v11 && (uint64_t v12 = *(void *)(a1 + 232) - *(void *)(a1 + 224)) != 0)
  {
    uint64_t v13 = v11 >> 3;
    uint64_t v14 = v12 >> 3;
    int v15 = *(_DWORD *)(a1 + 80);
    if (v15 == 1) {
      int v15 = 0;
    }
    uint64_t v16 = v15;
    uint64_t v17 = v14 - 1;
    if (v13 - 1 != v15 || v17 != v15)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "CountZeroCorr", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 212);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Unexpected mismatch in indexes: ", 32);
      uint64_t v21 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"  ", 2);
      uint64_t v22 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"  ", 2);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
    }
    int v19 = kaldi::CuMatrixBase<float>::CountZeros(*(void *)(v10 + 8 * v15), v6, v7, v8, v9);
    int v20 = kaldi::CuVectorBase<float>::CountZeros(*(void *)(*(void *)(a1 + 224) + 8 * v16)) + v19;
  }
  else
  {
    int v20 = 0;
  }
  *a2 = v20;
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::VectorizeWeightsCorrs(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 232);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "Weights are already vectorized");
  }
  else
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v5, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 235);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Performing vectorization of convolutional 2d component", 54);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v5);
    }
    int v4 = *(_DWORD *)(*(void *)(a1 + 192) + 16)
       + *(_DWORD *)(*(void *)(a1 + 184) + 16) * *(_DWORD *)(*(void *)(a1 + 184) + 20);
    if (v4 == (*(unsigned int (**)(uint64_t))(*(void *)a1 + 176))(a1)) {
      kaldi::NewCuSubOrMat<float>(*(void *)(a1 + 184), a2 != 0);
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 238);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "(nlinparams + bias_->Dim()) == NumParams()");
  }
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
}

void sub_10DCDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit()
{
}

void sub_10DD58()
{
}

void non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit()
{
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit()
{
}

void sub_10DDCC()
{
}

void non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit()
{
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(void *)(*(void *)(a1 + 208) - 8));
  uint64_t v4 = *(void *)(*(void *)(a1 + 232) - 8);

  return kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v4);
}

void std::vector<std::vector<kaldi::CuMatrix<float>>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v3 = (void **)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<kaldi::CuMatrix<float>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      uint64_t v8 = v3;
      std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

double kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::Convolutional2DComponent(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  *(void *)(a1 + 48) = off_26E7B8;
  *(_OWORD *)(a1 + 56) = xmmword_20CEC0;
  *(_DWORD *)(a1 + 7std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = -1082130432;
  *(void *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 86) = 0;
  *(void *)a1 = off_267E80;
  *(void *)(a1 + 88) = off_267FB8;
  *(void *)(a1 + 96) = off_267FE0;
  double result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(a1 + 136) = _D1;
  *(_OWORD *)(a1 + 1--*(_DWORD *)(a9 + 60) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 19std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 2++*(void *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 27std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 35std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 43std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 329) = 0u;
  return result;
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::Convolutional2DComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_264E70;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = off_266498;
  *(void *)(a1 + 48) = off_26E7B8;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = off_267E80;
  *(void *)(a1 + 88) = off_267FB8;
  *(void *)(a1 + 96) = off_267FE0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized<kaldi::nnet1::Quantizable16BitComponentItf>((uint64_t)this - 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 23std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 31std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 43std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 35std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AssignMembers<kaldi::QuantizedMatrix<signed char>>(a1, a2);
  return a1;
}

void sub_10E190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(v10 + 376));
  uint64_t v14 = *(void **)(v10 + 352);
  if (v14)
  {
    *(void *)(v10 + 3--*(_DWORD *)(a9 + 60) = v14;
    operator delete(v14);
  }
  int v15 = *(void **)(v10 + 320);
  if (v15)
  {
    *(void *)(v10 + 328) = v15;
    operator delete(v15);
  }
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v16 = *(void *)(v10 + 192);
  *(void *)(v10 + 19std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(v10 + 184), 0);
  a10 = (void **)(v10 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v12);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)v10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AssignMembers<kaldi::QuantizedMatrix<signed char>>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  if (a1 == a2)
  {
    *(unsigned char *)(a1 + 344) = 0;
  }
  else
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 320), *(char **)(a2 + 320), *(void *)(a2 + 328), (uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 2);
    *(unsigned char *)(a1 + 344) = 0;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 352), *(char **)(a2 + 352), *(void *)(a2 + 360), (uint64_t)(*(void *)(a2 + 360) - *(void *)(a2 + 352)) >> 2);
  }
  if (*(void *)(a2 + 184)) {
    operator new();
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), 0);
  if (*(void *)(a2 + 192)) {
    operator new();
  }
  uint64_t v4 = *(void *)(a1 + 192);
  *(void *)(a1 + 19std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::UpdateBNNSFilter(a1);
  if (*(void *)(a2 + 384) != *(void *)(a2 + 376)) {
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 376));
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v5, "AssignMembers", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1451);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"After assign, Convolution filter has padding? ", 46);
    kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
    kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v5);
  }
}

void sub_10E4A4()
{
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::~Convolutional2DComponent(uint64_t a1)
{
  *(void *)a1 = off_267E80;
  uint64_t v2 = a1 + 88;
  *(void *)(a1 + 88) = off_267FB8;
  uint64_t v3 = a1 + 96;
  *(void *)(a1 + 96) = off_267FE0;
  uint64_t v4 = *(void **)(a1 + 152);
  if (v4)
  {
    BNNSFilterDestroy(v4);
    *(void *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  }
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 376));
  long long v5 = *(void **)(a1 + 352);
  if (v5)
  {
    *(void *)(a1 + 3--*(_DWORD *)(a9 + 60) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *(void **)(a1 + 320);
  if (v6)
  {
    *(void *)(a1 + 328) = v6;
    operator delete(v6);
  }
  uint64_t v8 = (void **)(a1 + 296);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 272);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 248);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 224);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 200);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v7 = *(void *)(a1 + 192);
  *(void *)(a1 + 19std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), 0);
  uint64_t v8 = (void **)(a1 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v3);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  uint64_t vars8;

  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::~Convolutional2DComponent(a1);

  operator delete();
}

void non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::~Convolutional2DComponent(uint64_t a1)
{
}

{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::~Convolutional2DComponent(a1 - 96);
}

{
  uint64_t vars8;

  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::~Convolutional2DComponent(a1 - 88);

  operator delete();
}

{
  uint64_t vars8;

  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::~Convolutional2DComponent(a1 - 96);

  operator delete();
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::Copy()
{
}

void sub_10E77C()
{
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::InitData(int *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  unint64_t v6 = v79;
  int v83 = 0x40000000;
  int v84 = -1073741824;
  int v82 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)a1[36], &v81);
  int v80 = -1;
  memset(v79, 0, sizeof(v79));
  uint64_t v9 = a1 + 29;
  uint64_t v10 = a1 + 28;
  while (1)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_189;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v79, v7, v8);
    if (SHIBYTE(v79[2]) < 0)
    {
      uint64_t v16 = v79[1];
      switch(v79[1])
      {
        case 6:
          BOOL v17 = *(_DWORD *)v79[0] == 1684099132 && *(_WORD *)(v79[0] + 4) == 15960;
          uint64_t v14 = a1 + 32;
          if (v17) {
            goto LABEL_169;
          }
          BOOL v18 = *(_DWORD *)v79[0] == 1684099132 && *(_WORD *)(v79[0] + 4) == 15961;
          uint64_t v14 = a1 + 33;
          if (v18) {
            goto LABEL_169;
          }
          if (v79[1] != 15) {
            goto LABEL_29;
          }
LABEL_24:
          BOOL v19 = *(void *)v79[0] == 0x61526E7261654C3CLL && *(void *)(v79[0] + 7) == 0x3E66656F43657461;
          int v20 = a1 + 34;
          if (v19) {
            break;
          }
          uint64_t v16 = v79[1];
LABEL_29:
          if (v16 != 19) {
            goto LABEL_38;
          }
          BOOL v22 = *(void *)v79[0] == 0x61654C736169423CLL
             && *(void *)(v79[0] + 8) == 0x6F43657461526E72
             && *(void *)(v79[0] + 11) == 0x3E66656F43657461;
          int v20 = a1 + 35;
          if (v22) {
            break;
          }
          uint64_t v16 = v79[1];
LABEL_38:
          if (v16 != 12) {
            goto LABEL_44;
          }
          if (*(void *)v79[0] == 0x536D6F646E61523CLL && *(_DWORD *)(v79[0] + 8) == 1046766949) {
            goto LABEL_168;
          }
          uint64_t v16 = v79[1];
LABEL_44:
          if (v16 != 18) {
            goto LABEL_53;
          }
          if (*(void *)v79[0] == 0x6E6569646172473CLL
            && *(void *)(v79[0] + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v79[0] + 16) == 15973)
          {
            goto LABEL_76;
          }
          uint64_t v16 = v79[1];
LABEL_53:
          if (v16 != 9) {
            goto LABEL_182;
          }
          BOOL v26 = *(void *)v79[0] == 0x6461724778614D3CLL && *(unsigned char *)(v79[0] + 8) == 62;
          int v20 = a1 + 37;
          if (v26) {
            break;
          }
          uint64_t v16 = v79[1];
LABEL_182:
          if (v16 != 12) {
            goto LABEL_175;
          }
          unint64_t v6 = (void *)v79[0];
          goto LABEL_184;
        case 0xALL:
          if (*(void *)v79[0] != 0x61654D736169423CLL || *(_WORD *)(v79[0] + 8) != 15982)
          {
            BOOL v44 = *(void *)v79[0] == 0x654C5870616D463CLL && *(_WORD *)(v79[0] + 8) == 15982;
            uint64_t v14 = a1 + 26;
            if (!v44)
            {
              BOOL v45 = *(void *)v79[0] == 0x654C5970616D463CLL && *(_WORD *)(v79[0] + 8) == 15982;
              uint64_t v14 = a1 + 27;
              if (!v45)
              {
                BOOL v46 = *(void *)v79[0] == 0x654C58746C69463CLL && *(_WORD *)(v79[0] + 8) == 15982;
                uint64_t v14 = a1 + 28;
                if (!v46)
                {
                  BOOL v36 = *(void *)v79[0] == 0x654C59746C69463CLL && *(_WORD *)(v79[0] + 8) == 15982;
LABEL_147:
                  uint64_t v14 = a1 + 29;
                  if (!v36) {
                    goto LABEL_175;
                  }
                }
              }
            }
            goto LABEL_169;
          }
LABEL_170:
          int v20 = &v84;
          break;
        case 0xBLL:
          if (*(void *)v79[0] != 0x6E6152736169423CLL || *(void *)(v79[0] + 3) != 0x3E65676E61527361)
          {
            BOOL v48 = *(void *)v79[0] == 0x745358746C69463CLL && *(void *)(v79[0] + 3) == 0x3E7065745358746CLL;
            uint64_t v14 = a1 + 30;
            if (!v48)
            {
              BOOL v39 = *(void *)v79[0] == 0x745359746C69463CLL && *(void *)(v79[0] + 3) == 0x3E7065745359746CLL;
LABEL_160:
              uint64_t v14 = a1 + 31;
              if (!v39) {
                goto LABEL_175;
              }
            }
            goto LABEL_169;
          }
LABEL_171:
          int v20 = &v83;
          break;
        case 0xDLL:
          if (*(void *)v79[0] != 0x74536D617261503CLL || *(void *)(v79[0] + 5) != 0x3E7665646474536DLL) {
            goto LABEL_175;
          }
LABEL_167:
          int v20 = &v82;
          break;
        case 0xFLL:
          goto LABEL_24;
        default:
          goto LABEL_29;
      }
    }
    else
    {
      switch(HIBYTE(v79[2]))
      {
        case 6:
          BOOL v13 = LODWORD(v79[0]) == 1684099132 && WORD2(v79[0]) == 15960;
          uint64_t v14 = a1 + 32;
          if (!v13)
          {
            BOOL v15 = LODWORD(v79[0]) == 1684099132 && WORD2(v79[0]) == 15961;
            uint64_t v14 = a1 + 33;
            if (!v15) {
              goto LABEL_175;
            }
          }
          goto LABEL_169;
        case 9:
          goto LABEL_123;
        case 0xA:
          if (v79[0] == 0x61654D736169423CLL && LOWORD(v79[1]) == 15982) {
            goto LABEL_170;
          }
          BOOL v33 = v79[0] == 0x654C5870616D463CLL && LOWORD(v79[1]) == 15982;
          uint64_t v14 = a1 + 26;
          if (v33) {
            goto LABEL_169;
          }
          BOOL v34 = v79[0] == 0x654C5970616D463CLL && LOWORD(v79[1]) == 15982;
          uint64_t v14 = a1 + 27;
          if (v34) {
            goto LABEL_169;
          }
          BOOL v35 = v79[0] == 0x654C58746C69463CLL && LOWORD(v79[1]) == 15982;
          uint64_t v14 = a1 + 28;
          if (v35) {
            goto LABEL_169;
          }
          BOOL v36 = v79[0] == 0x654C59746C69463CLL && LOWORD(v79[1]) == 15982;
          goto LABEL_147;
        case 0xB:
          if (v79[0] == 0x6E6152736169423CLL && *(void *)((char *)v79 + 3) == 0x3E65676E61527361) {
            goto LABEL_171;
          }
          BOOL v38 = v79[0] == 0x745358746C69463CLL && *(void *)((char *)v79 + 3) == 0x3E7065745358746CLL;
          uint64_t v14 = a1 + 30;
          if (v38) {
            goto LABEL_169;
          }
          BOOL v39 = v79[0] == 0x745359746C69463CLL && *(void *)((char *)v79 + 3) == 0x3E7065745359746CLL;
          goto LABEL_160;
        case 0xC:
          goto LABEL_118;
        case 0xD:
          if (v79[0] != 0x74536D617261503CLL || *(void *)((char *)v79 + 5) != 0x3E7665646474536DLL) {
            goto LABEL_175;
          }
          goto LABEL_167;
        case 0xF:
          BOOL v40 = v79[0] == 0x61526E7261654C3CLL && *(void *)((char *)v79 + 7) == 0x3E66656F43657461;
          int v20 = a1 + 34;
          if (v40) {
            break;
          }
          if (HIBYTE(v79[2]) != 9) {
            goto LABEL_117;
          }
          goto LABEL_123;
        case 0x12:
          goto LABEL_68;
        case 0x13:
          BOOL v28 = v79[0] == 0x61654C736169423CLL
             && v79[1] == 0x6F43657461526E72
             && *(void *)((char *)&v79[1] + 3) == 0x3E66656F43657461;
          int v20 = a1 + 35;
          if (v28) {
            break;
          }
          if (HIBYTE(v79[2]) == 9) {
            goto LABEL_123;
          }
          if (HIBYTE(v79[2]) == 18)
          {
LABEL_68:
            if (v79[0] == 0x6E6569646172473CLL && v79[1] == 0x7079546D726F4E74 && LOWORD(v79[2]) == 15973)
            {
LABEL_76:
              kaldi::ReadToken(a2, 0, (uint64_t)&v81, v11, v12);
              goto LABEL_173;
            }
          }
          else
          {
LABEL_117:
            if (HIBYTE(v79[2]) != 12) {
              goto LABEL_175;
            }
LABEL_118:
            if (v79[0] == 0x536D6F646E61523CLL && LODWORD(v79[1]) == 1046766949)
            {
LABEL_168:
              uint64_t v14 = &v80;
LABEL_169:
              kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v14, v11, v12);
              goto LABEL_173;
            }
          }
          if (HIBYTE(v79[2]) != 9)
          {
            if (HIBYTE(v79[2]) == 12)
            {
LABEL_184:
              if (*v6 == 0x6E6F706D6F432F3CLL && *((_DWORD *)v6 + 2) == 1047817829)
              {
LABEL_189:
                a1[36] = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v81);
                int v56 = a1[2];
                int v58 = a1[26];
                int v57 = a1[27];
                int v59 = v56 / (v57 * v58);
                if (!(v56 % (v57 * v58)))
                {
                  int v60 = (v58 + 2 * a1[32] - a1[28]) / a1[30] + 1;
                  int v61 = a1[3];
                  int v62 = v60 + v60 * ((v57 + 2 * a1[33] - a1[29]) / a1[31]);
                  uint64_t v63 = (v61 / v62);
                  if (!(v61 % v62))
                  {
                    if (v80 >= 1) {
                      kaldi::UniformRandomNumber::SetRandomSeeds(a3, v80);
                    }
                    kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v78, a3);
                    kaldi::Matrix<float>::Matrix((uint64_t)&v74, v63, (*v10 * v59 * *v9), 0, 0);
                    if ((int)v63 >= 1)
                    {
                      unsigned int v67 = 0;
                      int v68 = *v10;
                      int v69 = *v9;
                      do
                      {
                        if (v69 * v59 * v68 >= 1)
                        {
                          unint64_t v70 = 0;
                          do
                          {
                            float v71 = *(float *)&v82;
                            kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v78, 0, v64, v65, v66);
                            if (v76 <= v67 || v70 >= v75) {
                              kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)&stru_68.addr, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v66);
                            }
                            *(float *)(v74 + 4 * (int)(v67 * v77) + 4 * v70++) = v71 * v72;
                            int v68 = *v10;
                            int v69 = *v9;
                          }
                          while ((uint64_t)v70 < *v10 * v59 * *v9);
                        }
                        ++v67;
                      }
                      while (v67 != v63);
                    }
                    kaldi::ContextDependency::CentralPosition((kaldi::ContextDependency *)&v74);
                    kaldi::ContextDependency::ContextWidth((kaldi::ContextDependency *)&v74);
                    kaldi::nnet1::NewMatrix<kaldi::QuantizedMatrix<signed char>>();
                  }
                  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 336);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"output_dim_ % (out_fmap_x_len * out_fmap_y_len) == 0", 52);
                  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78);
                }
                kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 330);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"input_dim_ % (fmap_x_len_ * fmap_y_len_) == 0", 45);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78);
              }
            }
LABEL_175:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 318);
            uint64_t v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"Unknown token ", 14);
            if (v79[2] >= 0) {
              unint64_t v51 = v79;
            }
            else {
              unint64_t v51 = (void *)v79[0];
            }
            if (v79[2] >= 0) {
              uint64_t v52 = HIBYTE(v79[2]);
            }
            else {
              uint64_t v52 = v79[1];
            }
            unint64_t v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v51, v52);
            float v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)", a typo in config?", 19);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" (ParamStddev|BiasMean|BiasRange|FmapXLen|FmapYLen|FiltXLen|FiltYLen|FiltXStep|FiltYStep|ConnectFmap|LearnRateCoef|BiasLearnRateCoef|RandomSeed|GradientNormType|MaxGrad)", 169);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78);
          }
LABEL_123:
          BOOL v42 = v79[0] == 0x6461724778614D3CLL && LOBYTE(v79[1]) == 62;
          int v20 = a1 + 37;
          if (!v42) {
            goto LABEL_175;
          }
          break;
        default:
          goto LABEL_175;
      }
    }
    kaldi::ReadBasicType<float>(a2, 0, (float *)v20, v11, v12);
LABEL_173:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
}

void sub_10F498()
{
  kaldi::Vector<float>::Destroy(&v0);
  JUMPOUT(0x10F4C0);
}

void sub_10F4B0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 153) < 0) {
    operator delete(*(void **)(v1 - 176));
  }
  if (*(char *)(v1 - 121) < 0) {
    operator delete(*(void **)(v1 - 144));
  }
  _Unwind_Resume(exception_object);
}

void sub_10F4B8()
{
  kaldi::Matrix<float>::~Matrix(&v0);
  kaldi::GaussRandomNumber::~GaussRandomNumber((kaldi::GaussRandomNumber *)&v1);
  JUMPOUT(0x10F4D0);
}

void kaldi::nnet1::NewMatrix<kaldi::QuantizedMatrix<signed char>>()
{
}

void sub_10F5B4()
{
}

void *kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::UpdateBNNSFilter(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 152);
  if (v2)
  {
    BNNSFilterDestroy(v2);
    *(void *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  }
  size_t v3 = *(int *)(a1 + 104);
  size_t v4 = *(int *)(a1 + 108);
  int v5 = *(_DWORD *)(a1 + 12);
  int v6 = *(_DWORD *)(a1 + 8) / ((int)v4 * (int)v3);
  size_t v7 = *(int *)(a1 + 128);
  size_t v8 = *(int *)(a1 + 132);
  size_t v9 = *(int *)(a1 + 112);
  size_t v10 = *(int *)(a1 + 116);
  size_t v11 = *(int *)(a1 + 120);
  size_t v12 = *(int *)(a1 + 124);
  int v13 = ((int)v3 + 2 * (int)v7 - (int)v9) / (int)v11 + 1;
  int v14 = ((int)v4 + 2 * (int)v8 - (int)v10) / (int)v12 + 1;
  in_desc.width = v3;
  in_desc.height = v4;
  uint64_t v15 = v6;
  in_desc.channels = v6;
  in_desc.row_stride = v3;
  in_desc.image_stride = (int)v4 * (int)v3;
  in_desc.data_type = BNNSDataTypeFloat32;
  *(void *)&in_desc.data_scale = 1065353216;
  out_desc.width = v13;
  out_desc.height = v14;
  int v16 = v5 / (v14 * v13);
  uint64_t v17 = v16;
  out_desc.channels = v16;
  out_desc.row_stride = v13;
  out_desc.image_stride = v14 * v13;
  out_desc.data_type = BNNSDataTypeFloat32;
  *(void *)&out_desc.data_scale = 1065353216;
  memset(&layer_params.weights.data_bias, 0, 96);
  layer_params.x_stride = v11;
  layer_params.y_stride = v12;
  layer_params.x_padding = v7;
  layer_params.y_padding = v8;
  layer_params.k_width = v9;
  layer_params.k_height = v10;
  layer_params.in_channels = v6;
  layer_params.out_channels = v16;
  layer_params.weights.data_type = BNNSDataTypeInt8;
  layer_params.weights.int data = (const void *)kaldi::QuantizedMatrixBase<signed char>::Data(*(void *)(a1 + 184));
  uint64_t v18 = *(void *)(a1 + 184);
  uint64_t v19 = *(void *)(a1 + 192);
  float v20 = *(float *)(v18 + 12);
  layer_params.bias.data_type = BNNSDataTypeFloat32;
  layer_params.weights.data_scale = 1.0 / v20;
  layer_params.weights.data_bias = 0.0;
  layer_params.weights.data_table = 0;
  uint64_t v21 = *(const void **)(v19 + 8);
  *(void *)&layer_params.bias.data_scale = 1065353216;
  layer_params.bias.int data = v21;
  layer_params.bias.data_table = 0;
  layer_params.activation.function = BNNSActivationFunctionIdentity;
  int v22 = kaldi::QuantizedMatrixBase<short>::NumCols(v18);
  if ((int)v10 * (uint64_t)(int)v9 * v15 * v17 != kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184))
                                                * v22)
    kaldi::KaldiAssertFailure_((kaldi *)"UpdateBNNSFilter", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", &stru_428.segname[7], "filters_->NumCols() * filters_->NumRows() == (bp.k_width * bp.k_height * bp.in_channels * bp.out_channels)", v23);
  int v24 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
  if (v24 == kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184)))
  {
    BNNSFilterParameters filter_params = *(BNNSFilterParameters *)ymmword_20D7C8;
    double result = BNNSFilterCreateConvolutionLayer(&in_desc, &out_desc, &layer_params, &filter_params);
    *(void *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = result;
  }
  else
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params, "UpdateBNNSFilter", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1090);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&filter_params, (uint64_t)"Unsupported BNNS filter weight arrangement", 42);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params);
    }
    memset(&v30, 0, sizeof(v30));
    uint64_t v27 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
    uint64_t v28 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
    kaldi::Matrix<float>::Matrix((uint64_t)v29, v27, v28, 1, (unsigned char *)&def_5A5E8 + 1);
    kaldi::MatrixBase<float>::CopyFromMat<signed char>((uint64_t)v29, *(unsigned int **)(a1 + 184), 111);
    LODWORD(v27) = kaldi::ContextDependency::ContextWidth((kaldi::ContextDependency *)v29);
    if (v27 != fst::StateOrderQueue<int>::Head_((uint64_t)v29)
      && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params, "UpdateBNNSFilter", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1096);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&filter_params, (uint64_t)"It did not work", 15);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params);
    }
    layer_params.weights.int data = (const void *)v29[0];
    *(void *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = BNNSFilterCreateConvolutionLayer(&in_desc, &out_desc, &layer_params, &v30);
    kaldi::Matrix<float>::~Matrix((uint64_t)v29);
    double result = *(void **)(a1 + 152);
  }
  if (!result) {
    kaldi::KaldiAssertFailure_((kaldi *)"UpdateBNNSFilter", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", (const char *)&stru_428.offset, "bnns_filter_", v26);
  }
  return result;
}

void sub_10F8FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va1);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::ReadData(float *a1, uint64_t *a2, int a3)
{
  if (kaldi::Peek(a2, a3) != 60)
  {
LABEL_142:
    int v41 = *((_DWORD *)a1 + 26);
    int v40 = *((_DWORD *)a1 + 27);
    if (*((_DWORD *)a1 + 2) % (v40 * v41))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 415);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "input_dim_ % (fmap_x_len_ * fmap_y_len_) == 0");
    }
    else
    {
      int v42 = (v41 + 2 * *((_DWORD *)a1 + 32) - *((_DWORD *)a1 + 28)) / *((_DWORD *)a1 + 30) + 1;
      if (!(*((_DWORD *)a1 + 3)
           % (v42 + v42 * ((v40 + 2 * *((_DWORD *)a1 + 33) - *((_DWORD *)a1 + 29)) / *((_DWORD *)a1 + 31)))))
        kaldi::nnet1::NewMatrix<kaldi::QuantizedMatrix<signed char>>();
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 417);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "output_dim_ % (out_fmap_x_len * out_fmap_y_len) == 0");
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  while (1)
  {
    memset(v48, 0, 24);
    kaldi::ReadToken(a2, a3, (uint64_t)v48, v6, v7);
    if ((SHIBYTE(v48[2]) & 0x80000000) == 0)
    {
      uint64_t v10 = v48;
      switch(HIBYTE(v48[2]))
      {
        case 6:
          goto LABEL_133;
        case 9:
LABEL_4:
          BOOL v11 = v48[0] == (void *)0x6461724778614D3CLL && LOBYTE(v48[1]) == 62;
          uint64_t v12 = a1 + 37;
          if (!v11) {
            goto LABEL_8;
          }
          goto LABEL_109;
        case 0xA:
LABEL_69:
          BOOL v27 = v48[0] == (void *)0x654C5870616D463CLL && LOWORD(v48[1]) == 15982;
          uint64_t v21 = (uint64_t)(a1 + 26);
          if (v27) {
            goto LABEL_138;
          }
          if (HIBYTE(v48[2]) == 6) {
            goto LABEL_101;
          }
          if (HIBYTE(v48[2]) != 10) {
            goto LABEL_137;
          }
          BOOL v28 = v48[0] == (void *)0x654C5970616D463CLL && LOWORD(v48[1]) == 15982;
          uint64_t v21 = (uint64_t)(a1 + 27);
          if (!v28) {
            goto LABEL_79;
          }
          goto LABEL_138;
        case 0xB:
LABEL_89:
          BOOL v31 = v48[0] == (void *)0x745358746C69463CLL && *(void **)((char *)v48 + 3) == (void *)0x3E7065745358746CLL;
          uint64_t v21 = (uint64_t)(a1 + 30);
          if (v31) {
            goto LABEL_138;
          }
          if (HIBYTE(v48[2]) == 6) {
            goto LABEL_101;
          }
          if (HIBYTE(v48[2]) != 11) {
            goto LABEL_137;
          }
          BOOL v32 = v48[0] == (void *)0x745359746C69463CLL && *(void **)((char *)v48 + 3) == (void *)0x3E7065745359746CLL;
          uint64_t v21 = (uint64_t)(a1 + 31);
          if (!v32) {
            goto LABEL_137;
          }
          goto LABEL_138;
        case 0xF:
          BOOL v33 = v48[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v48 + 7) == (void *)0x3E66656F43657461;
          uint64_t v12 = a1 + 34;
          if (!v33) {
            goto LABEL_137;
          }
          goto LABEL_109;
        case 0x12:
LABEL_61:
          if (v48[0] != (void *)0x6E6569646172473CLL
            || v48[1] != (void *)0x7079546D726F4E74
            || LOWORD(v48[2]) != 15973)
          {
            uint64_t v10 = v48;
            switch(HIBYTE(v48[2]))
            {
              case 6:
                goto LABEL_133;
              case 9:
                goto LABEL_4;
              case 0xA:
                goto LABEL_69;
              case 0xB:
                goto LABEL_89;
              default:
                goto LABEL_137;
            }
          }
          goto LABEL_102;
        case 0x13:
          BOOL v24 = v48[0] == (void *)0x61654C736169423CLL
             && v48[1] == (void *)0x6F43657461526E72
             && *(void **)((char *)&v48[1] + 3) == (void *)0x3E66656F43657461;
          uint64_t v12 = a1 + 35;
          if (!v24)
          {
            switch(HIBYTE(v48[2]))
            {
              case 9:
                goto LABEL_4;
              case 0xA:
                goto LABEL_69;
              case 0xB:
                goto LABEL_89;
              case 0xC:
              case 0xD:
              case 0xE:
              case 0xF:
              case 0x10:
              case 0x11:
                goto LABEL_137;
              case 0x12:
                goto LABEL_61;
              default:
                goto LABEL_8;
            }
          }
          goto LABEL_109;
        default:
          goto LABEL_137;
      }
    }
    int v13 = (char *)v48[1];
    if (v48[1] == (char *)&dword_C + 3)
    {
      BOOL v14 = *(void *)v48[0] == 0x61526E7261654C3CLL && *(void *)((char *)v48[0] + 7) == 0x3E66656F43657461;
      uint64_t v12 = a1 + 34;
      if (v14) {
        goto LABEL_109;
      }
    }
    if (v48[1] == (char *)&dword_10 + 3)
    {
      BOOL v16 = *(void *)v48[0] == 0x61654C736169423CLL
         && *((void *)v48[0] + 1) == 0x6F43657461526E72
         && *(void *)((char *)v48[0] + 11) == 0x3E66656F43657461;
      uint64_t v12 = a1 + 35;
      if (v16) {
        goto LABEL_109;
      }
      int v13 = (char *)v48[1];
    }
    if (v13 == (unsigned char *)&dword_10 + 2)
    {
      if (*(void *)v48[0] == 0x6E6569646172473CLL
        && *((void *)v48[0] + 1) == 0x7079546D726F4E74
        && *((_WORD *)v48[0] + 8) == 15973)
      {
LABEL_102:
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v47 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p, v8, v9);
        *((_DWORD *)a1 + 36) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v47) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_139;
      }
      int v13 = (char *)v48[1];
    }
    if (v13 != (unsigned char *)&dword_8 + 1) {
      goto LABEL_39;
    }
    BOOL v19 = *(void *)v48[0] == 0x6461724778614D3CLL && *((unsigned char *)v48[0] + 8) == 62;
    uint64_t v12 = a1 + 37;
    if (!v19)
    {
      int v13 = (char *)v48[1];
LABEL_39:
      if (v13 == (unsigned char *)&dword_8 + 2)
      {
        BOOL v20 = *(void *)v48[0] == 0x654C5870616D463CLL && *((_WORD *)v48[0] + 4) == 15982;
        uint64_t v21 = (uint64_t)(a1 + 26);
        if (v20) {
          goto LABEL_138;
        }
        int v13 = (char *)v48[1];
        if (v48[1] == (char *)&dword_8 + 2)
        {
          BOOL v22 = *(void *)v48[0] == 0x654C5970616D463CLL && *((_WORD *)v48[0] + 4) == 15982;
          uint64_t v21 = (uint64_t)(a1 + 27);
          if (v22) {
            goto LABEL_138;
          }
          if ((HIBYTE(v48[2]) & 0x80) == 0)
          {
            if (HIBYTE(v48[2]) != 6)
            {
              if (HIBYTE(v48[2]) != 10) {
                goto LABEL_137;
              }
LABEL_79:
              BOOL v29 = v48[0] == (void *)0x654C58746C69463CLL && LOWORD(v48[1]) == 15982;
              uint64_t v21 = (uint64_t)(a1 + 28);
              if (!v29)
              {
                BOOL v30 = v48[0] == (void *)0x654C59746C69463CLL && LOWORD(v48[1]) == 15982;
                uint64_t v21 = (uint64_t)(a1 + 29);
                if (!v30) {
                  goto LABEL_137;
                }
              }
LABEL_138:
              kaldi::ReadBasicType<int>(a2, a3, v21, v8, v9);
              goto LABEL_139;
            }
LABEL_101:
            uint64_t v10 = v48;
LABEL_133:
            BOOL v38 = *(_DWORD *)v10 == 1684099132 && *((_WORD *)v10 + 2) == 15960;
            uint64_t v21 = (uint64_t)(a1 + 32);
            if (!v38) {
              goto LABEL_137;
            }
            goto LABEL_138;
          }
          BOOL v34 = *(void *)v48[0] == 0x654C58746C69463CLL && *((_WORD *)v48[0] + 4) == 15982;
          uint64_t v21 = (uint64_t)(a1 + 28);
          if (v34) {
            goto LABEL_138;
          }
          int v13 = (char *)v48[1];
          BOOL v35 = *(void *)v48[0] == 0x654C59746C69463CLL && *((_WORD *)v48[0] + 4) == 15982;
          uint64_t v21 = (uint64_t)(a1 + 29);
          if (v35) {
            goto LABEL_138;
          }
          if ((HIBYTE(v48[2]) & 0x80) == 0) {
            goto LABEL_8;
          }
        }
      }
      if (v13 != (unsigned char *)&dword_8 + 3) {
        goto LABEL_131;
      }
      BOOL v36 = *(void *)v48[0] == 0x745358746C69463CLL && *(void *)((char *)v48[0] + 3) == 0x3E7065745358746CLL;
      uint64_t v21 = (uint64_t)(a1 + 30);
      if (v36) {
        goto LABEL_138;
      }
      int v13 = (char *)v48[1];
      if (v48[1] != (char *)&dword_8 + 3) {
        goto LABEL_131;
      }
      BOOL v37 = *(void *)v48[0] == 0x745359746C69463CLL && *(void *)((char *)v48[0] + 3) == 0x3E7065745359746CLL;
      uint64_t v21 = (uint64_t)(a1 + 31);
      if (v37) {
        goto LABEL_138;
      }
      if ((HIBYTE(v48[2]) & 0x80) == 0)
      {
LABEL_8:
        if (HIBYTE(v48[2]) == 6) {
          goto LABEL_101;
        }
      }
      else
      {
LABEL_131:
        if (v13 == (unsigned char *)&dword_4 + 2)
        {
          uint64_t v10 = (void **)v48[0];
          goto LABEL_133;
        }
      }
LABEL_137:
      BOOL v39 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v48, "<PadY>");
      uint64_t v21 = (uint64_t)(a1 + 33);
      if (!v39)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 401);
        uint64_t v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
        if (SHIBYTE(v48[2]) >= 0) {
          BOOL v44 = v48;
        }
        else {
          BOOL v44 = (void **)v48[0];
        }
        if (SHIBYTE(v48[2]) >= 0) {
          uint64_t v45 = HIBYTE(v48[2]);
        }
        else {
          uint64_t v45 = (uint64_t)v48[1];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v44, v45);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      goto LABEL_138;
    }
LABEL_109:
    kaldi::ReadBasicType<float>(a2, a3, v12, v8, v9);
LABEL_139:
    if (SHIBYTE(v48[2]) < 0) {
      operator delete(v48[0]);
    }
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_142;
    }
  }
}

void sub_1102E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v22 - 89) < 0) {
    operator delete(*(void **)(v22 - 112));
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::WriteConfig(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", a4, a5);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<BiasLearnRateCoef>", v8, v9);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v10, v11);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 144), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v12, v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v14, v15);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FmapXLen>", v16, v17);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FmapYLen>", v18, v19);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FiltXLen>", v20, v21);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FiltYLen>", v22, v23);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FiltXStep>", v24, v25);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FiltYStep>", v26, v27);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PadX>", v28, v29);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PadY>", v30, v31);
  return kaldi::WriteBasicType<int>(a2, (int)a3);
}

void sub_110598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::WriteData(uint64_t a1, void *a2, int a3, int a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 168))(a1);
  kaldi::QuantizedMatrix<signed char>::Write(*(int **)(a1 + 184), a2, a3, a4);
  uint64_t v10 = *(_DWORD **)(a1 + 192);

  kaldi::CuVectorBase<float>::Write(v10, a2, a3, v8, v9);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::NumParams(uint64_t a1)
{
  int v2 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
  return *(_DWORD *)(*(void *)(a1 + 192) + 16)
       + kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184)) * v2;
}

_DWORD *kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::GetParams(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  int v7 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
  unsigned int v9 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184)) * v7;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  if (v9 > *(_DWORD *)(a2 + 8)
    || (uint64_t v15 = *(void **)a2,
        LODWORD(v16) = v9,
        kaldi::VectorBase<float>::CopyRowsFromMat<signed char>((uint64_t *)&v15, *(unsigned int **)(a1 + 184)),
        uint64_t v12 = *(_DWORD **)(a1 + 192),
        int v13 = v12[4],
        uint64_t v16 = 0,
        uint64_t v17 = 0,
        v13 + v9 > *(_DWORD *)(a2 + 8)))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v8);
  }
  uint64_t v15 = (void *)(*(void *)a2 + 4 * (int)v9);
  LODWORD(v16) = v13;
  return kaldi::CuVectorBase<float>::CopyToVec<float>(v12, (uint64_t)&v15, v10, v11, v8);
}

_DWORD *kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::SetParams(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(uint64_t))(*(void *)a1 + 176))(a1))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v14, "SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 502);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v14, "wei_src.Dim() == NumParams()");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v14);
  }
  int v5 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
  unsigned int v7 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184)) * v5;
  uint64_t v8 = *(unsigned int **)(a1 + 184);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  if (v7 > *(_DWORD *)(a2 + 8)
    || (uint64_t v14 = *(char **)a2,
        LODWORD(v15) = v7,
        kaldi::QuantizedMatrixBase<signed char>::CopyRowsFromVec(v8, &v14),
        uint64_t v11 = *(_DWORD **)(a1 + 192),
        int v12 = v11[4],
        uint64_t v15 = 0,
        uint64_t v16 = 0,
        v12 + v7 > *(_DWORD *)(a2 + 8)))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v6);
  }
  uint64_t v14 = (char *)(*(void *)a2 + 4 * (int)v7);
  LODWORD(v15) = v12;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v11, (uint64_t)&v14, v9, v10, v6);
}

float kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::SumParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  float v6 = kaldi::QuantizedMatrixBase<signed char>::Sum(*(int **)(a1 + 184), a2, a3, a4, a5);
  double v7 = kaldi::CuVectorBase<float>::Sum(*(void *)(a1 + 192));
  return v6 + *(float *)&v7;
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::PerturbParams(uint64_t a1)
{
  uint64_t v2 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
  uint64_t v3 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v4, v2, v3, 1u, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v4);
  kaldi::QuantizedMatrixBase<signed char>::AddMat();
}

uint64_t sub_110964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v7 = *(unsigned int *)(*(void *)(v5 + 192) + 16);
  v12[0] = off_262E60;
  memset(&v12[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v12, v7, 1u, a4, a5);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v12);
  kaldi::CuVectorBase<float>::AddVec(*(void *)(v5 + 192), (uint64_t)v12, v8, v9, v10, v6, 1.0);
  kaldi::CuVector<float>::~CuVector(v12);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v13);
}

void sub_1109DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::Info(unsigned int **a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
  (*((void (**)(unsigned int **, void *, void))*a1 + 21))(a1, v21, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" OutSizeX:", 10);
  uint64_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" OutSizeY:", 10);
  uint64_t v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" InFmaps:", 9);
  int v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" OutFmaps:", 10);
  std::ostream::operator<<();
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\n filters: ", 11);
  kaldi::nnet1::MomentStatistics<signed char>(a1[23]);
  if ((v20 & 0x80u) == 0) {
    float v6 = v19;
  }
  else {
    float v6 = (void **)v19[0];
  }
  if ((v20 & 0x80u) == 0) {
    uint64_t v7 = v20;
  }
  else {
    uint64_t v7 = (uint64_t)v19[1];
  }
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n bias: ", 8);
  kaldi::nnet1::MomentStatistics<float>(a1[24], v10, v11, v12, v13);
  if ((v18 & 0x80u) == 0) {
    uint64_t v14 = __p;
  }
  else {
    uint64_t v14 = (void **)__p[0];
  }
  if ((v18 & 0x80u) == 0) {
    uint64_t v15 = v18;
  }
  else {
    uint64_t v15 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v14, v15);
  if ((char)v18 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v20 < 0) {
    operator delete(v19[0]);
  }
  std::stringbuf::str();
  if (v22 < 0) {
    operator delete((void *)v21[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_110CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  std::ostringstream::~ostringstream((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v41, "\n  ");
  kaldi::nnet1::MomentStatistics<float>((void *)(a1 + 200), v4, v5, v6, v7);
  if ((v40 & 0x80u) == 0) {
    uint64_t v8 = v39;
  }
  else {
    uint64_t v8 = (void **)v39[0];
  }
  if ((v40 & 0x80u) == 0) {
    std::string::size_type v9 = v40;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v39[1];
  }
  uint64_t v10 = std::string::append(&v41, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  uint64_t v12 = std::string::append(&v42, ", lr-coef ");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v38 & 0x80u) == 0) {
    uint64_t v14 = v37;
  }
  else {
    uint64_t v14 = (void **)v37[0];
  }
  if ((v38 & 0x80u) == 0) {
    std::string::size_type v15 = v38;
  }
  else {
    std::string::size_type v15 = (std::string::size_type)v37[1];
  }
  uint64_t v16 = std::string::append(&v43, (const std::string::value_type *)v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  unsigned __int8 v18 = std::string::append(&v44, "\n  bias_grad");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((void *)(a1 + 224), v20, v21, v22, v23);
  if ((v36 & 0x80u) == 0) {
    uint64_t v24 = v35;
  }
  else {
    uint64_t v24 = (void **)v35[0];
  }
  if ((v36 & 0x80u) == 0) {
    std::string::size_type v25 = v36;
  }
  else {
    std::string::size_type v25 = (std::string::size_type)v35[1];
  }
  uint64_t v26 = std::string::append(&v45, (const std::string::value_type *)v24, v25);
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  uint64_t v28 = std::string::append(&v46, ", lr-coef ");
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v34 & 0x80u) == 0) {
    uint64_t v30 = __p;
  }
  else {
    uint64_t v30 = (void **)__p[0];
  }
  if ((v34 & 0x80u) == 0) {
    std::string::size_type v31 = v34;
  }
  else {
    std::string::size_type v31 = (std::string::size_type)__p[1];
  }
  BOOL v32 = std::string::append(&v47, (const std::string::value_type *)v30, v31);
  *a2 = *v32;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  if ((char)v34 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if ((char)v36 < 0) {
    operator delete(v35[0]);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if ((char)v38 < 0) {
    operator delete(v37[0]);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if ((char)v40 < 0) {
    operator delete(v39[0]);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
}

void sub_110FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v52 - 57) < 0) {
    operator delete(*(void **)(v52 - 80));
  }
  if (*(char *)(v52 - 89) < 0) {
    operator delete(*(void **)(v52 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v52 - 121) < 0) {
    operator delete(*(void **)(v52 - 144));
  }
  if (*(char *)(v52 - 153) < 0) {
    operator delete(*(void **)(v52 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  _Unwind_Resume(exception_object);
}

void sub_1110AC()
{
}

void sub_1110B4()
{
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  if (a4 || !*(unsigned char *)(a1 + 17)) {
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::PropagateCpu(a1, a2, a3, a4);
  }
  else {
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::PropagateBNNS(a1, a2, a3, 0, a5);
  }
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::PropagateBNNS(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  uint64_t v5 = *(void **)(a1 + 152);
  if (!v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateBNNS", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", (const char *)&stru_428.align + 1, "bnns_filter_", a5);
  }
  if (a4)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8, "PropagateBNNS", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1120);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, "BNNS only supports one batch");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  uint64_t result = BNNSFilterApplyBatch(v5, *(int *)(a2 + 20), *(const void **)(a2 + 8), *(int *)(a2 + 24), *(void **)(a3 + 8), *(int *)(a3 + 24));
  if (result) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateBNNS", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", (const char *)&stru_428.nreloc, "ret == 0", v7);
  }
  return result;
}

void sub_111198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::PropagateCpu(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8 = *(_DWORD *)(a1 + 104);
  int v9 = *(_DWORD *)(a1 + 108);
  uint64_t v10 = (const char *)((v8 + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120));
  int v81 = (v9 + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124);
  uint64_t v80 = (v81 + 1);
  int v90 = *(_DWORD *)(a1 + 8);
  int v85 = v80 * (v10 + 1);
  uint64_t v82 = (*(_DWORD *)(a1 + 12) / v85);
  if (kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184)) != v82) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateCpu", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", stru_478.sectname, "num_filters == num_output_fmaps", v12);
  }
  uint64_t v13 = *(unsigned int *)(a2 + 20);
  uint64_t v86 = a2;
  uint64_t v87 = (uint64_t *)(a1 + 296);
  uint64_t v14 = *(void *)(a1 + 296);
  unint64_t v15 = *(int *)(a1 + 80);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 304) - v14) >> 3) < v15)
  {
    std::vector<std::vector<kaldi::CuMatrix<float>>>::resize(v87, v15);
    uint64_t v14 = *v87;
  }
  uint64_t v78 = (v10 + 1);
  int v79 = v10;
  int v88 = a4;
  uint64_t v16 = (uint64_t *)(v14 + 24 * a4);
  if (0xAAAAAAAAAAAAAAABLL * ((v16[1] - *v16) >> 4) < v85) {
    std::vector<kaldi::CuMatrix<float>>::resize(v16, v85);
  }
  if (v85 >= 1)
  {
    uint64_t v17 = 0;
    do
    {
      uint64_t v18 = *(void *)(*(void *)(a1 + 296) + 24 * v88) + v17;
      uint64_t v19 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
      kaldi::CuMatrix<float>::Resize(v18, v13, v19, 0, 0);
      v17 += 48;
    }
    while (48 * v85 != v17);
  }
  uint64_t v83 = a3;
  int v84 = (uint64_t *)(a1 + 160);
  unint64_t v20 = *(int *)(a1 + 80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 168) - *(void *)(a1 + 160)) >> 4) < v20) {
    std::vector<kaldi::CuMatrix<float>>::resize(v84, v20);
  }
  int v21 = *(_DWORD *)(a1 + 132);
  int v22 = *(_DWORD *)(a1 + 108);
  int v23 = *(_DWORD *)(a1 + 116);
  int v92 = -v21;
  if (v21 + v22 - v23 < -v21) {
    goto LABEL_69;
  }
  int v24 = 0;
  int v25 = *(_DWORD *)(a1 + 128);
  int v26 = *(_DWORD *)(a1 + 104);
  int v27 = *(_DWORD *)(a1 + 112);
  int v91 = v90 / (v9 * v8);
  do
  {
    int v28 = -v25;
    if (v25 + v26 - v27 < -v25) {
      goto LABEL_68;
    }
    uint64_t v29 = v24;
    do
    {
      uint64_t v89 = v29;
      memset(&__p, 0, sizeof(__p));
      if (v91 < 1) {
        goto LABEL_64;
      }
      std::vector<int>::pointer end = 0;
      int v31 = 0;
      int v32 = v28 + v26 * v92;
      int v33 = *(_DWORD *)(a1 + 116);
      do
      {
        if (v33 < 1) {
          goto LABEL_63;
        }
        for (int i = 0; i < v33; ++i)
        {
          if (v27 < 1) {
            continue;
          }
          int v35 = 0;
          int v36 = i + v92;
          do
          {
            if (v36 < 0 || (int v37 = *(_DWORD *)(a1 + 108), v36 >= v37))
            {
              value = __p.__end_cap_.__value_;
            }
            else
            {
              value = __p.__end_cap_.__value_;
              if (v35 + v28 >= 0)
              {
                int v39 = *(_DWORD *)(a1 + 104);
                if (v35 + v28 < v39)
                {
                  int v40 = v32 + v35 + (i + v37 * v31) * v39;
                  if (end >= __p.__end_cap_.__value_)
                  {
                    std::vector<int>::pointer begin = __p.__begin_;
                    uint64_t v51 = end - __p.__begin_;
                    unint64_t v52 = v51 + 1;
                    if ((unint64_t)(v51 + 1) >> 62) {
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    }
                    int64_t v53 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
                    if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v52) {
                      unint64_t v52 = v53 >> 1;
                    }
                    if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v54 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v54 = v52;
                    }
                    if (v54)
                    {
                      long long v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&__p.__end_cap_, v54);
                      std::vector<int>::pointer begin = __p.__begin_;
                      std::vector<int>::pointer end = __p.__end_;
                    }
                    else
                    {
                      long long v55 = 0;
                    }
                    int v56 = (int *)&v55[4 * v51];
                    int *v56 = v40;
                    int v57 = v56 + 1;
                    while (end != begin)
                    {
                      int v58 = *--end;
                      *--int v56 = v58;
                    }
                    __p.__begin_ = v56;
                    __p.__end_ = v57;
                    __p.__end_cap_.__value_ = (int *)&v55[4 * v54];
                    if (begin) {
                      operator delete(begin);
                    }
                    std::vector<int>::pointer end = v57;
                  }
                  else
                  {
                    *end++ = v40;
                  }
                  goto LABEL_60;
                }
              }
            }
            if (end >= value)
            {
              std::vector<int>::pointer v41 = __p.__begin_;
              uint64_t v42 = end - __p.__begin_;
              unint64_t v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 62) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v44 = (char *)value - (char *)__p.__begin_;
              if (v44 >> 1 > v43) {
                unint64_t v43 = v44 >> 1;
              }
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v45 = v43;
              }
              if (v45)
              {
                std::string v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&__p.__end_cap_, v45);
                std::vector<int>::pointer v41 = __p.__begin_;
                std::vector<int>::pointer end = __p.__end_;
              }
              else
              {
                std::string v46 = 0;
              }
              std::string v47 = (int *)&v46[4 * v42];
              *std::string v47 = -1;
              BOOL v48 = v47 + 1;
              while (end != v41)
              {
                int v49 = *--end;
                *--std::string v47 = v49;
              }
              __p.__begin_ = v47;
              __p.__end_ = v48;
              __p.__end_cap_.__value_ = (int *)&v46[4 * v45];
              if (v41) {
                operator delete(v41);
              }
              std::vector<int>::pointer end = v48;
            }
            else
            {
              *end++ = -1;
            }
LABEL_60:
            __p.__end_ = end;
            ++v35;
            int v27 = *(_DWORD *)(a1 + 112);
          }
          while (v35 < v27);
          int v33 = *(_DWORD *)(a1 + 116);
        }
LABEL_63:
        ++v31;
      }
      while (v31 != v91);
LABEL_64:
      kaldi::CuMatrixBase<float>::CopyCols(*(void *)(*v87 + 24 * v88) + 48 * v89, v86, (unsigned int **)&__p, v11, v12);
      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
      uint64_t v29 = v89 + 1;
      v28 += *(_DWORD *)(a1 + 120);
      int v26 = *(_DWORD *)(a1 + 104);
      int v25 = *(_DWORD *)(a1 + 128);
      int v27 = *(_DWORD *)(a1 + 112);
    }
    while (v28 <= v25 + v26 - v27);
    int v22 = *(_DWORD *)(a1 + 108);
    int v21 = *(_DWORD *)(a1 + 132);
    int v24 = v89 + 1;
    int v23 = *(_DWORD *)(a1 + 116);
LABEL_68:
    v92 += *(_DWORD *)(a1 + 124);
  }
  while (v92 <= v21 + v22 - v23);
LABEL_69:
  kaldi::CuMatrix<float>::Resize(*v84 + 48 * v88, *(unsigned int *)(v83 + 20), *(unsigned int *)(v83 + 16), 3u, 0);
  if (v85 >= 1)
  {
    uint64_t v59 = 0;
    int v60 = 0;
    do
    {
      uint64_t v61 = *(void *)(a1 + 160) + 48 * v88;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&__p, v61, 0, *(_DWORD *)(v61 + 20), v60, v82);
      kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)&__p, *(void *)(a1 + 192), v62, v63, v64, 1.0, 0.0);
      kaldi::CuMatrixBase<float>::AddMatMat<signed char>((uint64_t)&__p, *(void *)(*(void *)(a1 + 296) + 24 * v88) + v59, 111, *(unsigned int **)(a1 + 184), &stru_68.sectname[8], 1.0, 1.0);
      __p.__begin_ = (std::vector<int>::pointer)off_262D80;
      *(_OWORD *)&__p.__end_ = 0u;
      long long v94 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&__p);
      int v60 = (const char *)(v60 + v82);
      v59 += 48;
    }
    while (48 * v85 != v59);
  }
  std::vector<int>::vector(&__p, *(int *)(a1 + 12));
  if ((int)v82 >= 1)
  {
    uint64_t v66 = 0;
    uint64x2_t v67 = (uint64x2_t)vdupq_n_s64(v78 - 1);
    int64x2_t v68 = vdupq_n_s64(2uLL);
    uint64_t v69 = 1;
    do
    {
      if ((v81 & 0x80000000) == 0)
      {
        uint64_t v70 = 0;
        float v71 = &__p.__begin_[v69];
        int v72 = v66;
        do
        {
          if ((v79 & 0x80000000) == 0)
          {
            uint64_t v73 = v71;
            uint64_t v74 = (v78 + 1) & 0x1FFFFFFFELL;
            int v75 = v72;
            int64x2_t v76 = (int64x2_t)xmmword_204A30;
            do
            {
              int32x2_t v77 = vmovn_s64((int64x2_t)vcgeq_u64(v67, (uint64x2_t)v76));
              if (v77.i8[0]) {
                *(v73 - 1) = v75;
              }
              uint64_t v65 = v77.u32[1];
              if (v77.i8[4])
              {
                uint64_t v65 = (v82 + v75);
                *uint64_t v73 = v65;
              }
              int64x2_t v76 = vaddq_s64(v76, v68);
              v75 += 2 * v82;
              v73 += 2;
              v74 -= 2;
            }
            while (v74);
          }
          ++v70;
          v72 += v82 * v78;
          v71 += (int)v79 + 1;
        }
        while (v70 != v80);
      }
      ++v66;
      v69 += (int)v80 * (uint64_t)(int)v78;
    }
    while (v66 != v82);
  }
  kaldi::CuMatrixBase<float>::CopyCols(v83, *v84 + 48 * v88, (unsigned int **)&__p, v65, v79);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_111898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::BackpropagateCpu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v9 = (*(_DWORD *)(a1 + 104) + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120);
  int v10 = v9 + 1;
  int v11 = (*(_DWORD *)(a1 + 108) + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124);
  uint64_t v12 = (v11 + 1);
  int v13 = v12 * (v9 + 1);
  uint64_t v14 = (*(_DWORD *)(a1 + 12) / v13);
  if (kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184)) == v14)
  {
    kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 160) + 48 * a6, *(unsigned int *)(a4 + 20), *(unsigned int *)(a4 + 16), 3u, 0);
    std::vector<int>::vector(&v30, *(int *)(a1 + 12));
    if ((int)v14 >= 1)
    {
      int v18 = 0;
      uint64_t v19 = 0;
      for (uint64_t i = 0; i != v14; ++i)
      {
        if ((v11 & 0x80000000) == 0)
        {
          uint64_t v21 = 0;
          int v22 = &v30.__begin_[v19];
          int v23 = v18;
          do
          {
            uint64_t v24 = (v9 + 1);
            int v25 = v23;
            int v26 = v22;
            if ((v9 & 0x80000000) == 0)
            {
              do
              {
                *int v26 = v25;
                v26 += v14;
                ++v25;
                --v24;
              }
              while (v24);
            }
            ++v21;
            v22 += v10 * v14;
            v23 += v10;
          }
          while (v21 != v12);
        }
        ++v19;
        v18 += v13;
      }
    }
    kaldi::CuMatrixBase<float>::CopyCols(*(void *)(a1 + 160) + 48 * a6, a4, (unsigned int **)&v30, v16, v17);
    std::vector<kaldi::CuSubMatrix<float>>::vector(v29, v13);
    uint64_t v27 = *(void *)(a1 + 24);
    if (a6 < (unint64_t)((*(void *)(a1 + 32) - v27) >> 3)) {
      kaldi::CuWorkspace::GetChildWorkspace(*(kaldi::CuWorkspace **)(v27 + 8 * a6), -1);
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v28, "BackpropagateCpu", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1327);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Convolutional2DComponent needs workspace set to perform back-propagation", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v28);
  }
  kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateCpu", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", &stru_518.sectname[5], "num_filters == num_output_fmaps", v15);
}

void sub_111EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, kaldi::CuWorkspace *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  a22 = v22 - 136;
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  uint64_t v24 = *(void **)(v22 - 112);
  if (v24)
  {
    *(void *)(v22 - 104) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 148) = a3;
  *(_DWORD *)(result + 144) = a2;
  *(unsigned char *)(result + 344) = 0;
  return result;
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::NormalizeGradients(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  float v7 = a6;
  int v9 = *(_DWORD *)(a1 + 144);
  if (v9 == 3)
  {
    if (a6 >= 0.0 && a6 <= 1.0)
    {
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*(void *)(*(void *)(a1 + 200) + 8 * a2), *(void *)(a1 + 248) + 48 * a2, a6);
      uint64_t v15 = *(void *)(*(void *)(a1 + 224) + 8 * a2);
      uint64_t v16 = *(void *)(a1 + 272) + 32 * a2;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v15, v16, v7, v12, v13, v14);
    }
  }
  else if (v9 == 2)
  {
    if (a6 > 0.0)
    {
      uint64_t v17 = a2;
      if (*(unsigned char *)(a1 + 84)) {
        float v7 = (float)*(int *)(*(void *)(a1 + 320) + 4 * a2) * a6;
      }
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*(void *)(*(void *)(a1 + 200) + 8 * a2), (unsigned int *)(*(void *)(a1 + 248) + 48 * a2), v7, a3, a4, a5);
      uint64_t v22 = *(void *)(*(void *)(a1 + 224) + 8 * v17);
      int v23 = (_DWORD *)(*(void *)(a1 + 272) + 32 * v17);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v22, v23, v19, v20, v21, v7);
    }
  }
  else if (v9 == 1 && a6 > 0.0)
  {
    uint64_t v10 = a2;
    if (*(unsigned char *)(a1 + 84)) {
      float v7 = (float)*(int *)(*(void *)(a1 + 320) + 4 * a2) * a6;
    }
    kaldi::nnet1::UpdatableComponent::ClipGradient(*(void *)(*(void *)(a1 + 200) + 8 * a2), v7);
    uint64_t v18 = *(void *)(*(void *)(a1 + 224) + 8 * v10);
    kaldi::nnet1::UpdatableComponent::ClipGradient(v18, v7);
  }
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(a1);

  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AccumGradientsCpu(a1, a2, a3, a4, a5);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 344))
  {
    int v2 = *(_DWORD *)(a1 + 80);
    if (v2 > 1) {
      int v3 = v2 + 1;
    }
    else {
      int v3 = 1;
    }
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 200), v3);
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize((uint64_t *)(a1 + 224), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 248), v3);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 272), v3);
    if (v3 >= 1)
    {
      kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
      kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
      operator new();
    }
    std::vector<int>::resize((std::vector<int> *)(a1 + 320), v3);
    *(unsigned char *)(a1 + 344) = 1;
  }
}

void sub_112478()
{
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AccumGradientsCpu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v9 = (*(_DWORD *)(a1 + 104) + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120) + 1;
  int v10 = v9 + v9 * ((*(_DWORD *)(a1 + 108) + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124));
  int v11 = *(_DWORD *)(a1 + 12) / v10;
  if (kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184)) != v11) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradientsCpu", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", (const char *)&stru_298.size + 6, "num_filters == num_output_fmaps", v12);
  }
  *(_DWORD *)(*(void *)(a1 + 320) + 4 * a5) = *(_DWORD *)(a2 + 20);
  uint64_t v13 = *(void *)(a1 + 200);
  *(void *)(*(void *)(v13 + 8 * a5) + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a4;
  *(void *)(*(void *)(*(void *)(a1 + 224) + 8 * a5) + ++*(void *)(result + 24) = a4;
  kaldi::CuMatrixBase<float>::SetZero(*(void *)(v13 + 8 * a5));
  kaldi::CuVectorBase<float>::SetZero(*(void *)(*(void *)(a1 + 224) + 8 * a5));
  if (v10 >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 48 * v10;
    do
    {
      uint64_t v17 = *(void *)(a1 + 160) + 48 * a5;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v21, v17, 0, *(_DWORD *)(v17 + 20), v15, v11);
      kaldi::CuMatrixBase<float>::AddMatMat(*(void *)(*(void *)(a1 + 200) + 8 * a5), (uint64_t)&v21, CblasTrans, *(void *)(*(void *)(a1 + 296) + 24 * a5) + v14, &stru_68.sectname[7], 1.0, 1.0);
      kaldi::CuVectorBase<float>::AddRowSumMat(*(void *)(*(void *)(a1 + 224) + 8 * a5), &v21, 1.0, 1.0, v18, v19, v20);
      uint64_t v21 = off_262D80;
      long long v22 = 0u;
      long long v23 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v21);
      uint64_t v15 = (const char *)(v15 + v11);
      v14 += 48;
    }
    while (v16 != v14);
  }
}

void sub_112670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (**a10)())
{
  a10 = off_262D80;
  *int v10 = 0u;
  v10[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::UpdateWeights()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 752);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unsupported");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = (_DWORD ***)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v24, *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v23, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0, 0);
  ((void (*)(_DWORD ***, uint64_t, unsigned char *, void))(*v8)[14])(v8, a2, v24, 0);
  ((void (*)(_DWORD ***, uint64_t, unsigned char *, uint64_t, unsigned char *, void))(*v8)[16])(v8, a2, v24, a3, v23, 0);
  ((void (*)(_DWORD ***, uint64_t, uint64_t, void, void))(*v8)[29])(v8, a2, a3, 0, 0);
  LODWORD(a3) = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
  unsigned int v9 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184)) * a3;
  kaldi::Vector<float>::Resize((void **)a4, *(_DWORD *)(*(void *)(a1 + 192) + 16) + v9, 0, v10, v11);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if (v9 > *(_DWORD *)(a4 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v14);
  }
  uint64_t v20 = *(void **)a4;
  LODWORD(v21) = v9;
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v20, *v8[25], v12, v13, v14);
  int v18 = *(_DWORD *)(*(void *)(a1 + 192) + 16);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if (v18 + v9 > *(_DWORD *)(a4 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v17);
  }
  uint64_t v20 = (void *)(*(void *)a4 + 4 * (int)v9);
  LODWORD(v21) = v18;
  kaldi::CuVectorBase<float>::CopyToVec<float>(*v8[28], (uint64_t)&v20, v15, v16, v17);
  ((void (*)(_DWORD ***))(*v8)[1])(v8);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v23);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v24);
}

void sub_112960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

float kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 84)) {
    return *(float *)(a1 + 56);
  }
  uint64_t v2 = *(void *)(a1 + 352);
  unint64_t v3 = *(void *)(a1 + 360) - v2;
  if (!v3) {
    return NAN;
  }
  unint64_t v4 = v3 >> 2;
  if ((int)v4 <= a2) {
    return NAN;
  }
  int v5 = v4 - 1;
  if (a2 >= 0) {
    int v5 = a2;
  }
  return *(float *)(v2 + 4 * v5);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(a1);
  int v6 = *(_DWORD *)(*(void *)(a1 + 192) + 16);
  int v7 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
  uint64_t result = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
  *a3 = v6 + result * v7;
  uint64_t v13 = *(void *)(a1 + 200);
  uint64_t v14 = *(void *)(a1 + 208) - v13;
  if (v14 && (uint64_t v15 = *(void *)(a1 + 232) - *(void *)(a1 + 224)) != 0)
  {
    uint64_t v16 = v14 >> 3;
    uint64_t v17 = v15 >> 3;
    int v18 = *(_DWORD *)(a1 + 80);
    if (v18 == 1) {
      int v18 = 0;
    }
    uint64_t v19 = v18;
    uint64_t v20 = v17 - 1;
    if (v16 - 1 != v18 || v20 != v18)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v26, "CountZeroCorr", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 212);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Unexpected mismatch in indexes: ", 32);
      uint64_t v24 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"  ", 2);
      int v25 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"  ", 2);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v26);
    }
    int v22 = kaldi::CuMatrixBase<float>::CountZeros(*(void *)(v13 + 8 * v18), v9, v10, v11, v12);
    uint64_t result = kaldi::CuVectorBase<float>::CountZeros(*(void *)(*(void *)(a1 + 224) + 8 * v19));
    int v23 = result + v22;
  }
  else
  {
    int v23 = 0;
  }
  *a2 = v23;
  return result;
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::VectorizeWeightsCorrs(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 232);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "Weights are already vectorized");
  }
  else
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v4, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 235);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Performing vectorization of convolutional 2d component", 54);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v4);
    }
    int v2 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
    int v3 = *(_DWORD *)(*(void *)(a1 + 192) + 16)
       + kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184)) * v2;
    if (v3 == (*(unsigned int (**)(uint64_t))(*(void *)a1 + 176))(a1)) {
      operator new();
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 238);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "(nlinparams + bias_->Dim()) == NumParams()");
  }
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
}

void sub_113050(uint64_t a1, ...)
{
  va_start(va, a1);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit()
{
}

void sub_1130EC()
{
}

void non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit()
{
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit()
{
}

void sub_113160()
{
}

void non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit()
{
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(a1);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(void *)(*(void *)(a1 + 208) - 8));
  uint64_t v4 = *(void *)(*(void *)(a1 + 232) - 8);

  return kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v4);
}

double kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::Convolutional2DComponent(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  *(void *)(a1 + 48) = off_26E7B8;
  *(_OWORD *)(a1 + 56) = xmmword_20CEC0;
  *(_DWORD *)(a1 + 7std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = -1082130432;
  *(void *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 86) = 0;
  *(void *)a1 = off_268008;
  *(void *)(a1 + 88) = off_268140;
  *(void *)(a1 + 96) = off_268168;
  double result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(a1 + 136) = _D1;
  *(_OWORD *)(a1 + 1--*(_DWORD *)(a9 + 60) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 19std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 2++*(void *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 27std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 35std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 43std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 329) = 0u;
  return result;
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::Convolutional2DComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_264E70;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = off_266498;
  *(void *)(a1 + 48) = off_26E7B8;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = off_268008;
  *(void *)(a1 + 88) = off_268140;
  *(void *)(a1 + 96) = off_268168;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized<kaldi::nnet1::Quantizable16BitComponentItf>((uint64_t)this - 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 23std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 31std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 43std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 35std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AssignMembers<kaldi::QuantizedMatrix<short>>(a1, a2);
  return a1;
}

void sub_11347C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(v10 + 376));
  uint64_t v14 = *(void **)(v10 + 352);
  if (v14)
  {
    *(void *)(v10 + 3--*(_DWORD *)(a9 + 60) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void **)(v10 + 320);
  if (v15)
  {
    *(void *)(v10 + 328) = v15;
    operator delete(v15);
  }
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v16 = *(void *)(v10 + 192);
  *(void *)(v10 + 19std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(v10 + 184), 0);
  a10 = (void **)(v10 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v12);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)v10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AssignMembers<kaldi::QuantizedMatrix<short>>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  if (a1 == a2)
  {
    *(unsigned char *)(a1 + 344) = 0;
  }
  else
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 320), *(char **)(a2 + 320), *(void *)(a2 + 328), (uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 2);
    *(unsigned char *)(a1 + 344) = 0;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 352), *(char **)(a2 + 352), *(void *)(a2 + 360), (uint64_t)(*(void *)(a2 + 360) - *(void *)(a2 + 352)) >> 2);
  }
  if (*(void *)(a2 + 184)) {
    operator new();
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), 0);
  if (*(void *)(a2 + 192)) {
    operator new();
  }
  uint64_t v4 = *(void *)(a1 + 192);
  *(void *)(a1 + 19std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::UpdateBNNSFilter(a1);
  if (*(void *)(a2 + 384) != *(void *)(a2 + 376)) {
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 376));
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v5, "AssignMembers", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1451);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"After assign, Convolution filter has padding? ", 46);
    kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
    kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v5);
  }
}

void sub_113790()
{
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::~Convolutional2DComponent(uint64_t a1)
{
  *(void *)a1 = off_268008;
  uint64_t v2 = a1 + 88;
  *(void *)(a1 + 88) = off_268140;
  uint64_t v3 = a1 + 96;
  *(void *)(a1 + 96) = off_268168;
  uint64_t v4 = *(void **)(a1 + 152);
  if (v4)
  {
    BNNSFilterDestroy(v4);
    *(void *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  }
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 376));
  long long v5 = *(void **)(a1 + 352);
  if (v5)
  {
    *(void *)(a1 + 3--*(_DWORD *)(a9 + 60) = v5;
    operator delete(v5);
  }
  int v6 = *(void **)(a1 + 320);
  if (v6)
  {
    *(void *)(a1 + 328) = v6;
    operator delete(v6);
  }
  uint64_t v8 = (void **)(a1 + 296);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 272);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 248);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 224);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 200);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v7 = *(void *)(a1 + 192);
  *(void *)(a1 + 19std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), 0);
  uint64_t v8 = (void **)(a1 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v3);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  uint64_t vars8;

  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::~Convolutional2DComponent(a1);

  operator delete();
}

void non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::~Convolutional2DComponent(uint64_t a1)
{
}

{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::~Convolutional2DComponent(a1 - 96);
}

{
  uint64_t vars8;

  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::~Convolutional2DComponent(a1 - 88);

  operator delete();
}

{
  uint64_t vars8;

  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::~Convolutional2DComponent(a1 - 96);

  operator delete();
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::Copy()
{
}

void sub_113A68()
{
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::InitData(int *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int v6 = v79;
  int v83 = 0x40000000;
  int v84 = -1073741824;
  int v82 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)a1[36], &v81);
  int v80 = -1;
  memset(v79, 0, sizeof(v79));
  uint64_t v9 = a1 + 29;
  uint64_t v10 = a1 + 28;
  while (1)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_189;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v79, v7, v8);
    if (SHIBYTE(v79[2]) < 0)
    {
      uint64_t v16 = v79[1];
      switch(v79[1])
      {
        case 6:
          BOOL v17 = *(_DWORD *)v79[0] == 1684099132 && *(_WORD *)(v79[0] + 4) == 15960;
          uint64_t v14 = a1 + 32;
          if (v17) {
            goto LABEL_169;
          }
          BOOL v18 = *(_DWORD *)v79[0] == 1684099132 && *(_WORD *)(v79[0] + 4) == 15961;
          uint64_t v14 = a1 + 33;
          if (v18) {
            goto LABEL_169;
          }
          if (v79[1] != 15) {
            goto LABEL_29;
          }
LABEL_24:
          BOOL v19 = *(void *)v79[0] == 0x61526E7261654C3CLL && *(void *)(v79[0] + 7) == 0x3E66656F43657461;
          uint64_t v20 = a1 + 34;
          if (v19) {
            break;
          }
          uint64_t v16 = v79[1];
LABEL_29:
          if (v16 != 19) {
            goto LABEL_38;
          }
          BOOL v22 = *(void *)v79[0] == 0x61654C736169423CLL
             && *(void *)(v79[0] + 8) == 0x6F43657461526E72
             && *(void *)(v79[0] + 11) == 0x3E66656F43657461;
          uint64_t v20 = a1 + 35;
          if (v22) {
            break;
          }
          uint64_t v16 = v79[1];
LABEL_38:
          if (v16 != 12) {
            goto LABEL_44;
          }
          if (*(void *)v79[0] == 0x536D6F646E61523CLL && *(_DWORD *)(v79[0] + 8) == 1046766949) {
            goto LABEL_168;
          }
          uint64_t v16 = v79[1];
LABEL_44:
          if (v16 != 18) {
            goto LABEL_53;
          }
          if (*(void *)v79[0] == 0x6E6569646172473CLL
            && *(void *)(v79[0] + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v79[0] + 16) == 15973)
          {
            goto LABEL_76;
          }
          uint64_t v16 = v79[1];
LABEL_53:
          if (v16 != 9) {
            goto LABEL_182;
          }
          BOOL v26 = *(void *)v79[0] == 0x6461724778614D3CLL && *(unsigned char *)(v79[0] + 8) == 62;
          uint64_t v20 = a1 + 37;
          if (v26) {
            break;
          }
          uint64_t v16 = v79[1];
LABEL_182:
          if (v16 != 12) {
            goto LABEL_175;
          }
          int v6 = (void *)v79[0];
          goto LABEL_184;
        case 0xALL:
          if (*(void *)v79[0] != 0x61654D736169423CLL || *(_WORD *)(v79[0] + 8) != 15982)
          {
            BOOL v44 = *(void *)v79[0] == 0x654C5870616D463CLL && *(_WORD *)(v79[0] + 8) == 15982;
            uint64_t v14 = a1 + 26;
            if (!v44)
            {
              BOOL v45 = *(void *)v79[0] == 0x654C5970616D463CLL && *(_WORD *)(v79[0] + 8) == 15982;
              uint64_t v14 = a1 + 27;
              if (!v45)
              {
                BOOL v46 = *(void *)v79[0] == 0x654C58746C69463CLL && *(_WORD *)(v79[0] + 8) == 15982;
                uint64_t v14 = a1 + 28;
                if (!v46)
                {
                  BOOL v36 = *(void *)v79[0] == 0x654C59746C69463CLL && *(_WORD *)(v79[0] + 8) == 15982;
LABEL_147:
                  uint64_t v14 = a1 + 29;
                  if (!v36) {
                    goto LABEL_175;
                  }
                }
              }
            }
            goto LABEL_169;
          }
LABEL_170:
          uint64_t v20 = &v84;
          break;
        case 0xBLL:
          if (*(void *)v79[0] != 0x6E6152736169423CLL || *(void *)(v79[0] + 3) != 0x3E65676E61527361)
          {
            BOOL v48 = *(void *)v79[0] == 0x745358746C69463CLL && *(void *)(v79[0] + 3) == 0x3E7065745358746CLL;
            uint64_t v14 = a1 + 30;
            if (!v48)
            {
              BOOL v39 = *(void *)v79[0] == 0x745359746C69463CLL && *(void *)(v79[0] + 3) == 0x3E7065745359746CLL;
LABEL_160:
              uint64_t v14 = a1 + 31;
              if (!v39) {
                goto LABEL_175;
              }
            }
            goto LABEL_169;
          }
LABEL_171:
          uint64_t v20 = &v83;
          break;
        case 0xDLL:
          if (*(void *)v79[0] != 0x74536D617261503CLL || *(void *)(v79[0] + 5) != 0x3E7665646474536DLL) {
            goto LABEL_175;
          }
LABEL_167:
          uint64_t v20 = &v82;
          break;
        case 0xFLL:
          goto LABEL_24;
        default:
          goto LABEL_29;
      }
    }
    else
    {
      switch(HIBYTE(v79[2]))
      {
        case 6:
          BOOL v13 = LODWORD(v79[0]) == 1684099132 && WORD2(v79[0]) == 15960;
          uint64_t v14 = a1 + 32;
          if (!v13)
          {
            BOOL v15 = LODWORD(v79[0]) == 1684099132 && WORD2(v79[0]) == 15961;
            uint64_t v14 = a1 + 33;
            if (!v15) {
              goto LABEL_175;
            }
          }
          goto LABEL_169;
        case 9:
          goto LABEL_123;
        case 0xA:
          if (v79[0] == 0x61654D736169423CLL && LOWORD(v79[1]) == 15982) {
            goto LABEL_170;
          }
          BOOL v33 = v79[0] == 0x654C5870616D463CLL && LOWORD(v79[1]) == 15982;
          uint64_t v14 = a1 + 26;
          if (v33) {
            goto LABEL_169;
          }
          BOOL v34 = v79[0] == 0x654C5970616D463CLL && LOWORD(v79[1]) == 15982;
          uint64_t v14 = a1 + 27;
          if (v34) {
            goto LABEL_169;
          }
          BOOL v35 = v79[0] == 0x654C58746C69463CLL && LOWORD(v79[1]) == 15982;
          uint64_t v14 = a1 + 28;
          if (v35) {
            goto LABEL_169;
          }
          BOOL v36 = v79[0] == 0x654C59746C69463CLL && LOWORD(v79[1]) == 15982;
          goto LABEL_147;
        case 0xB:
          if (v79[0] == 0x6E6152736169423CLL && *(void *)((char *)v79 + 3) == 0x3E65676E61527361) {
            goto LABEL_171;
          }
          BOOL v38 = v79[0] == 0x745358746C69463CLL && *(void *)((char *)v79 + 3) == 0x3E7065745358746CLL;
          uint64_t v14 = a1 + 30;
          if (v38) {
            goto LABEL_169;
          }
          BOOL v39 = v79[0] == 0x745359746C69463CLL && *(void *)((char *)v79 + 3) == 0x3E7065745359746CLL;
          goto LABEL_160;
        case 0xC:
          goto LABEL_118;
        case 0xD:
          if (v79[0] != 0x74536D617261503CLL || *(void *)((char *)v79 + 5) != 0x3E7665646474536DLL) {
            goto LABEL_175;
          }
          goto LABEL_167;
        case 0xF:
          BOOL v40 = v79[0] == 0x61526E7261654C3CLL && *(void *)((char *)v79 + 7) == 0x3E66656F43657461;
          uint64_t v20 = a1 + 34;
          if (v40) {
            break;
          }
          if (HIBYTE(v79[2]) != 9) {
            goto LABEL_117;
          }
          goto LABEL_123;
        case 0x12:
          goto LABEL_68;
        case 0x13:
          BOOL v28 = v79[0] == 0x61654C736169423CLL
             && v79[1] == 0x6F43657461526E72
             && *(void *)((char *)&v79[1] + 3) == 0x3E66656F43657461;
          uint64_t v20 = a1 + 35;
          if (v28) {
            break;
          }
          if (HIBYTE(v79[2]) == 9) {
            goto LABEL_123;
          }
          if (HIBYTE(v79[2]) == 18)
          {
LABEL_68:
            if (v79[0] == 0x6E6569646172473CLL && v79[1] == 0x7079546D726F4E74 && LOWORD(v79[2]) == 15973)
            {
LABEL_76:
              kaldi::ReadToken(a2, 0, (uint64_t)&v81, v11, v12);
              goto LABEL_173;
            }
          }
          else
          {
LABEL_117:
            if (HIBYTE(v79[2]) != 12) {
              goto LABEL_175;
            }
LABEL_118:
            if (v79[0] == 0x536D6F646E61523CLL && LODWORD(v79[1]) == 1046766949)
            {
LABEL_168:
              uint64_t v14 = &v80;
LABEL_169:
              kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v14, v11, v12);
              goto LABEL_173;
            }
          }
          if (HIBYTE(v79[2]) != 9)
          {
            if (HIBYTE(v79[2]) == 12)
            {
LABEL_184:
              if (*v6 == 0x6E6F706D6F432F3CLL && *((_DWORD *)v6 + 2) == 1047817829)
              {
LABEL_189:
                a1[36] = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v81);
                int v56 = a1[2];
                int v58 = a1[26];
                int v57 = a1[27];
                int v59 = v56 / (v57 * v58);
                if (!(v56 % (v57 * v58)))
                {
                  int v60 = (v58 + 2 * a1[32] - a1[28]) / a1[30] + 1;
                  int v61 = a1[3];
                  int v62 = v60 + v60 * ((v57 + 2 * a1[33] - a1[29]) / a1[31]);
                  uint64_t v63 = (v61 / v62);
                  if (!(v61 % v62))
                  {
                    if (v80 >= 1) {
                      kaldi::UniformRandomNumber::SetRandomSeeds(a3, v80);
                    }
                    kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v78, a3);
                    kaldi::Matrix<float>::Matrix((uint64_t)&v74, v63, (*v10 * v59 * *v9), 0, 0);
                    if ((int)v63 >= 1)
                    {
                      unsigned int v67 = 0;
                      int v68 = *v10;
                      int v69 = *v9;
                      do
                      {
                        if (v69 * v59 * v68 >= 1)
                        {
                          unint64_t v70 = 0;
                          do
                          {
                            float v71 = *(float *)&v82;
                            kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v78, 0, v64, v65, v66);
                            if (v76 <= v67 || v70 >= v75) {
                              kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)&stru_68.addr, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v66);
                            }
                            *(float *)(v74 + 4 * (int)(v67 * v77) + 4 * v70++) = v71 * v72;
                            int v68 = *v10;
                            int v69 = *v9;
                          }
                          while ((uint64_t)v70 < *v10 * v59 * *v9);
                        }
                        ++v67;
                      }
                      while (v67 != v63);
                    }
                    kaldi::ContextDependency::CentralPosition((kaldi::ContextDependency *)&v74);
                    kaldi::ContextDependency::ContextWidth((kaldi::ContextDependency *)&v74);
                    kaldi::nnet1::NewMatrix<kaldi::QuantizedMatrix<short>>();
                  }
                  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 336);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"output_dim_ % (out_fmap_x_len * out_fmap_y_len) == 0", 52);
                  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78);
                }
                kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 330);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"input_dim_ % (fmap_x_len_ * fmap_y_len_) == 0", 45);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78);
              }
            }
LABEL_175:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 318);
            uint64_t v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"Unknown token ", 14);
            if (v79[2] >= 0) {
              uint64_t v51 = v79;
            }
            else {
              uint64_t v51 = (void *)v79[0];
            }
            if (v79[2] >= 0) {
              uint64_t v52 = HIBYTE(v79[2]);
            }
            else {
              uint64_t v52 = v79[1];
            }
            int64_t v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v51, v52);
            unint64_t v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)", a typo in config?", 19);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" (ParamStddev|BiasMean|BiasRange|FmapXLen|FmapYLen|FiltXLen|FiltYLen|FiltXStep|FiltYStep|ConnectFmap|LearnRateCoef|BiasLearnRateCoef|RandomSeed|GradientNormType|MaxGrad)", 169);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v78);
          }
LABEL_123:
          BOOL v42 = v79[0] == 0x6461724778614D3CLL && LOBYTE(v79[1]) == 62;
          uint64_t v20 = a1 + 37;
          if (!v42) {
            goto LABEL_175;
          }
          break;
        default:
          goto LABEL_175;
      }
    }
    kaldi::ReadBasicType<float>(a2, 0, (float *)v20, v11, v12);
LABEL_173:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
}

void sub_114784()
{
  kaldi::Vector<float>::Destroy(&v0);
  JUMPOUT(0x1147ACLL);
}

void sub_11479C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 153) < 0) {
    operator delete(*(void **)(v1 - 176));
  }
  if (*(char *)(v1 - 121) < 0) {
    operator delete(*(void **)(v1 - 144));
  }
  _Unwind_Resume(exception_object);
}

void sub_1147A4()
{
  kaldi::Matrix<float>::~Matrix(&v0);
  kaldi::GaussRandomNumber::~GaussRandomNumber((kaldi::GaussRandomNumber *)&v1);
  JUMPOUT(0x1147BCLL);
}

void kaldi::nnet1::NewMatrix<kaldi::QuantizedMatrix<short>>()
{
}

void sub_1148A0()
{
}

void *kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::UpdateBNNSFilter(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 152);
  if (v2)
  {
    BNNSFilterDestroy(v2);
    *(void *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  }
  size_t v3 = *(int *)(a1 + 104);
  size_t v4 = *(int *)(a1 + 108);
  int v5 = *(_DWORD *)(a1 + 12);
  int v6 = *(_DWORD *)(a1 + 8) / ((int)v4 * (int)v3);
  size_t v7 = *(int *)(a1 + 128);
  size_t v8 = *(int *)(a1 + 132);
  size_t v9 = *(int *)(a1 + 112);
  size_t v10 = *(int *)(a1 + 116);
  size_t v11 = *(int *)(a1 + 120);
  size_t v12 = *(int *)(a1 + 124);
  int v13 = ((int)v3 + 2 * (int)v7 - (int)v9) / (int)v11 + 1;
  int v14 = ((int)v4 + 2 * (int)v8 - (int)v10) / (int)v12 + 1;
  in_desc.width = v3;
  in_desc.height = v4;
  uint64_t v15 = v6;
  in_desc.channels = v6;
  in_desc.row_stride = v3;
  in_desc.image_stride = (int)v4 * (int)v3;
  in_desc.data_type = BNNSDataTypeFloat32;
  *(void *)&in_desc.data_scale = 1065353216;
  out_desc.width = v13;
  out_desc.height = v14;
  int v16 = v5 / (v14 * v13);
  uint64_t v17 = v16;
  out_desc.channels = v16;
  out_desc.row_stride = v13;
  out_desc.image_stride = v14 * v13;
  out_desc.data_type = BNNSDataTypeFloat32;
  *(void *)&out_desc.data_scale = 1065353216;
  memset(&layer_params.weights.data_bias, 0, 96);
  layer_params.x_stride = v11;
  layer_params.y_stride = v12;
  layer_params.x_padding = v7;
  layer_params.y_padding = v8;
  layer_params.k_width = v9;
  layer_params.k_height = v10;
  layer_params.in_channels = v6;
  layer_params.out_channels = v16;
  layer_params.weights.data_type = BNNSDataTypeInt16;
  layer_params.weights.int data = (const void *)kaldi::QuantizedMatrixBase<signed char>::Data(*(void *)(a1 + 184));
  uint64_t v18 = *(void *)(a1 + 184);
  uint64_t v19 = *(void *)(a1 + 192);
  float v20 = *(float *)(v18 + 12);
  layer_params.bias.data_type = BNNSDataTypeFloat32;
  layer_params.weights.data_scale = 1.0 / v20;
  layer_params.weights.data_bias = 0.0;
  layer_params.weights.data_table = 0;
  uint64_t v21 = *(const void **)(v19 + 8);
  *(void *)&layer_params.bias.data_scale = 1065353216;
  layer_params.bias.int data = v21;
  layer_params.bias.data_table = 0;
  layer_params.activation.function = BNNSActivationFunctionIdentity;
  int v22 = kaldi::QuantizedMatrixBase<short>::NumCols(v18);
  if ((int)v10 * (uint64_t)(int)v9 * v15 * v17 != kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184))
                                                * v22)
    kaldi::KaldiAssertFailure_((kaldi *)"UpdateBNNSFilter", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", &stru_428.segname[7], "filters_->NumCols() * filters_->NumRows() == (bp.k_width * bp.k_height * bp.in_channels * bp.out_channels)", v23);
  int v24 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
  if (v24 == kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184)))
  {
    BNNSFilterParameters filter_params = *(BNNSFilterParameters *)ymmword_20D7C8;
    double result = BNNSFilterCreateConvolutionLayer(&in_desc, &out_desc, &layer_params, &filter_params);
    *(void *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = result;
  }
  else
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params, "UpdateBNNSFilter", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1090);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&filter_params, (uint64_t)"Unsupported BNNS filter weight arrangement", 42);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params);
    }
    memset(&v30, 0, sizeof(v30));
    uint64_t v27 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
    uint64_t v28 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
    kaldi::Matrix<float>::Matrix((uint64_t)v29, v27, v28, 1, (unsigned char *)&def_5A5E8 + 1);
    kaldi::MatrixBase<float>::CopyFromMat<short>((uint64_t)v29, *(unsigned int **)(a1 + 184), 111);
    LODWORD(v27) = kaldi::ContextDependency::ContextWidth((kaldi::ContextDependency *)v29);
    if (v27 != fst::StateOrderQueue<int>::Head_((uint64_t)v29)
      && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params, "UpdateBNNSFilter", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1096);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&filter_params, (uint64_t)"It did not work", 15);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params);
    }
    layer_params.weights.int data = (const void *)v29[0];
    *(void *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = BNNSFilterCreateConvolutionLayer(&in_desc, &out_desc, &layer_params, &v30);
    kaldi::Matrix<float>::~Matrix((uint64_t)v29);
    double result = *(void **)(a1 + 152);
  }
  if (!result) {
    kaldi::KaldiAssertFailure_((kaldi *)"UpdateBNNSFilter", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", (const char *)&stru_428.offset, "bnns_filter_", v26);
  }
  return result;
}

void sub_114BE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va1);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::ReadData(float *a1, uint64_t *a2, int a3)
{
  if (kaldi::Peek(a2, a3) != 60)
  {
LABEL_142:
    int v41 = *((_DWORD *)a1 + 26);
    int v40 = *((_DWORD *)a1 + 27);
    if (*((_DWORD *)a1 + 2) % (v40 * v41))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 415);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "input_dim_ % (fmap_x_len_ * fmap_y_len_) == 0");
    }
    else
    {
      int v42 = (v41 + 2 * *((_DWORD *)a1 + 32) - *((_DWORD *)a1 + 28)) / *((_DWORD *)a1 + 30) + 1;
      if (!(*((_DWORD *)a1 + 3)
           % (v42 + v42 * ((v40 + 2 * *((_DWORD *)a1 + 33) - *((_DWORD *)a1 + 29)) / *((_DWORD *)a1 + 31)))))
        kaldi::nnet1::NewMatrix<kaldi::QuantizedMatrix<short>>();
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 417);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "output_dim_ % (out_fmap_x_len * out_fmap_y_len) == 0");
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  while (1)
  {
    memset(v48, 0, 24);
    kaldi::ReadToken(a2, a3, (uint64_t)v48, v6, v7);
    if ((SHIBYTE(v48[2]) & 0x80000000) == 0)
    {
      uint64_t v10 = v48;
      switch(HIBYTE(v48[2]))
      {
        case 6:
          goto LABEL_133;
        case 9:
LABEL_4:
          BOOL v11 = v48[0] == (void *)0x6461724778614D3CLL && LOBYTE(v48[1]) == 62;
          uint64_t v12 = a1 + 37;
          if (!v11) {
            goto LABEL_8;
          }
          goto LABEL_109;
        case 0xA:
LABEL_69:
          BOOL v27 = v48[0] == (void *)0x654C5870616D463CLL && LOWORD(v48[1]) == 15982;
          uint64_t v21 = (uint64_t)(a1 + 26);
          if (v27) {
            goto LABEL_138;
          }
          if (HIBYTE(v48[2]) == 6) {
            goto LABEL_101;
          }
          if (HIBYTE(v48[2]) != 10) {
            goto LABEL_137;
          }
          BOOL v28 = v48[0] == (void *)0x654C5970616D463CLL && LOWORD(v48[1]) == 15982;
          uint64_t v21 = (uint64_t)(a1 + 27);
          if (!v28) {
            goto LABEL_79;
          }
          goto LABEL_138;
        case 0xB:
LABEL_89:
          BOOL v31 = v48[0] == (void *)0x745358746C69463CLL && *(void **)((char *)v48 + 3) == (void *)0x3E7065745358746CLL;
          uint64_t v21 = (uint64_t)(a1 + 30);
          if (v31) {
            goto LABEL_138;
          }
          if (HIBYTE(v48[2]) == 6) {
            goto LABEL_101;
          }
          if (HIBYTE(v48[2]) != 11) {
            goto LABEL_137;
          }
          BOOL v32 = v48[0] == (void *)0x745359746C69463CLL && *(void **)((char *)v48 + 3) == (void *)0x3E7065745359746CLL;
          uint64_t v21 = (uint64_t)(a1 + 31);
          if (!v32) {
            goto LABEL_137;
          }
          goto LABEL_138;
        case 0xF:
          BOOL v33 = v48[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v48 + 7) == (void *)0x3E66656F43657461;
          uint64_t v12 = a1 + 34;
          if (!v33) {
            goto LABEL_137;
          }
          goto LABEL_109;
        case 0x12:
LABEL_61:
          if (v48[0] != (void *)0x6E6569646172473CLL
            || v48[1] != (void *)0x7079546D726F4E74
            || LOWORD(v48[2]) != 15973)
          {
            uint64_t v10 = v48;
            switch(HIBYTE(v48[2]))
            {
              case 6:
                goto LABEL_133;
              case 9:
                goto LABEL_4;
              case 0xA:
                goto LABEL_69;
              case 0xB:
                goto LABEL_89;
              default:
                goto LABEL_137;
            }
          }
          goto LABEL_102;
        case 0x13:
          BOOL v24 = v48[0] == (void *)0x61654C736169423CLL
             && v48[1] == (void *)0x6F43657461526E72
             && *(void **)((char *)&v48[1] + 3) == (void *)0x3E66656F43657461;
          uint64_t v12 = a1 + 35;
          if (!v24)
          {
            switch(HIBYTE(v48[2]))
            {
              case 9:
                goto LABEL_4;
              case 0xA:
                goto LABEL_69;
              case 0xB:
                goto LABEL_89;
              case 0xC:
              case 0xD:
              case 0xE:
              case 0xF:
              case 0x10:
              case 0x11:
                goto LABEL_137;
              case 0x12:
                goto LABEL_61;
              default:
                goto LABEL_8;
            }
          }
          goto LABEL_109;
        default:
          goto LABEL_137;
      }
    }
    int v13 = (char *)v48[1];
    if (v48[1] == (char *)&dword_C + 3)
    {
      BOOL v14 = *(void *)v48[0] == 0x61526E7261654C3CLL && *(void *)((char *)v48[0] + 7) == 0x3E66656F43657461;
      uint64_t v12 = a1 + 34;
      if (v14) {
        goto LABEL_109;
      }
    }
    if (v48[1] == (char *)&dword_10 + 3)
    {
      BOOL v16 = *(void *)v48[0] == 0x61654C736169423CLL
         && *((void *)v48[0] + 1) == 0x6F43657461526E72
         && *(void *)((char *)v48[0] + 11) == 0x3E66656F43657461;
      uint64_t v12 = a1 + 35;
      if (v16) {
        goto LABEL_109;
      }
      int v13 = (char *)v48[1];
    }
    if (v13 == (unsigned char *)&dword_10 + 2)
    {
      if (*(void *)v48[0] == 0x6E6569646172473CLL
        && *((void *)v48[0] + 1) == 0x7079546D726F4E74
        && *((_WORD *)v48[0] + 8) == 15973)
      {
LABEL_102:
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v47 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p, v8, v9);
        *((_DWORD *)a1 + 36) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v47) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_139;
      }
      int v13 = (char *)v48[1];
    }
    if (v13 != (unsigned char *)&dword_8 + 1) {
      goto LABEL_39;
    }
    BOOL v19 = *(void *)v48[0] == 0x6461724778614D3CLL && *((unsigned char *)v48[0] + 8) == 62;
    uint64_t v12 = a1 + 37;
    if (!v19)
    {
      int v13 = (char *)v48[1];
LABEL_39:
      if (v13 == (unsigned char *)&dword_8 + 2)
      {
        BOOL v20 = *(void *)v48[0] == 0x654C5870616D463CLL && *((_WORD *)v48[0] + 4) == 15982;
        uint64_t v21 = (uint64_t)(a1 + 26);
        if (v20) {
          goto LABEL_138;
        }
        int v13 = (char *)v48[1];
        if (v48[1] == (char *)&dword_8 + 2)
        {
          BOOL v22 = *(void *)v48[0] == 0x654C5970616D463CLL && *((_WORD *)v48[0] + 4) == 15982;
          uint64_t v21 = (uint64_t)(a1 + 27);
          if (v22) {
            goto LABEL_138;
          }
          if ((HIBYTE(v48[2]) & 0x80) == 0)
          {
            if (HIBYTE(v48[2]) != 6)
            {
              if (HIBYTE(v48[2]) != 10) {
                goto LABEL_137;
              }
LABEL_79:
              BOOL v29 = v48[0] == (void *)0x654C58746C69463CLL && LOWORD(v48[1]) == 15982;
              uint64_t v21 = (uint64_t)(a1 + 28);
              if (!v29)
              {
                BOOL v30 = v48[0] == (void *)0x654C59746C69463CLL && LOWORD(v48[1]) == 15982;
                uint64_t v21 = (uint64_t)(a1 + 29);
                if (!v30) {
                  goto LABEL_137;
                }
              }
LABEL_138:
              kaldi::ReadBasicType<int>(a2, a3, v21, v8, v9);
              goto LABEL_139;
            }
LABEL_101:
            uint64_t v10 = v48;
LABEL_133:
            BOOL v38 = *(_DWORD *)v10 == 1684099132 && *((_WORD *)v10 + 2) == 15960;
            uint64_t v21 = (uint64_t)(a1 + 32);
            if (!v38) {
              goto LABEL_137;
            }
            goto LABEL_138;
          }
          BOOL v34 = *(void *)v48[0] == 0x654C58746C69463CLL && *((_WORD *)v48[0] + 4) == 15982;
          uint64_t v21 = (uint64_t)(a1 + 28);
          if (v34) {
            goto LABEL_138;
          }
          int v13 = (char *)v48[1];
          BOOL v35 = *(void *)v48[0] == 0x654C59746C69463CLL && *((_WORD *)v48[0] + 4) == 15982;
          uint64_t v21 = (uint64_t)(a1 + 29);
          if (v35) {
            goto LABEL_138;
          }
          if ((HIBYTE(v48[2]) & 0x80) == 0) {
            goto LABEL_8;
          }
        }
      }
      if (v13 != (unsigned char *)&dword_8 + 3) {
        goto LABEL_131;
      }
      BOOL v36 = *(void *)v48[0] == 0x745358746C69463CLL && *(void *)((char *)v48[0] + 3) == 0x3E7065745358746CLL;
      uint64_t v21 = (uint64_t)(a1 + 30);
      if (v36) {
        goto LABEL_138;
      }
      int v13 = (char *)v48[1];
      if (v48[1] != (char *)&dword_8 + 3) {
        goto LABEL_131;
      }
      BOOL v37 = *(void *)v48[0] == 0x745359746C69463CLL && *(void *)((char *)v48[0] + 3) == 0x3E7065745359746CLL;
      uint64_t v21 = (uint64_t)(a1 + 31);
      if (v37) {
        goto LABEL_138;
      }
      if ((HIBYTE(v48[2]) & 0x80) == 0)
      {
LABEL_8:
        if (HIBYTE(v48[2]) == 6) {
          goto LABEL_101;
        }
      }
      else
      {
LABEL_131:
        if (v13 == (unsigned char *)&dword_4 + 2)
        {
          uint64_t v10 = (void **)v48[0];
          goto LABEL_133;
        }
      }
LABEL_137:
      BOOL v39 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v48, "<PadY>");
      uint64_t v21 = (uint64_t)(a1 + 33);
      if (!v39)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 401);
        unint64_t v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
        if (SHIBYTE(v48[2]) >= 0) {
          BOOL v44 = v48;
        }
        else {
          BOOL v44 = (void **)v48[0];
        }
        if (SHIBYTE(v48[2]) >= 0) {
          uint64_t v45 = HIBYTE(v48[2]);
        }
        else {
          uint64_t v45 = (uint64_t)v48[1];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v44, v45);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      goto LABEL_138;
    }
LABEL_109:
    kaldi::ReadBasicType<float>(a2, a3, v12, v8, v9);
LABEL_139:
    if (SHIBYTE(v48[2]) < 0) {
      operator delete(v48[0]);
    }
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_142;
    }
  }
}

void sub_1155CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v22 - 89) < 0) {
    operator delete(*(void **)(v22 - 112));
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::WriteConfig(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", a4, a5);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<BiasLearnRateCoef>", v8, v9);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v10, v11);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 144), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v12, v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v14, v15);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FmapXLen>", v16, v17);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FmapYLen>", v18, v19);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FiltXLen>", v20, v21);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FiltYLen>", v22, v23);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FiltXStep>", v24, v25);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FiltYStep>", v26, v27);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PadX>", v28, v29);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PadY>", v30, v31);
  return kaldi::WriteBasicType<int>(a2, (int)a3);
}

void sub_115884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::WriteData(uint64_t a1, void *a2, int a3, int a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 168))(a1);
  kaldi::QuantizedMatrix<short>::Write(*(int **)(a1 + 184), a2, a3, a4);
  uint64_t v10 = *(_DWORD **)(a1 + 192);

  kaldi::CuVectorBase<float>::Write(v10, a2, a3, v8, v9);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::NumParams(uint64_t a1)
{
  int v2 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
  return *(_DWORD *)(*(void *)(a1 + 192) + 16)
       + kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184)) * v2;
}

_DWORD *kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::GetParams(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  int v7 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
  unsigned int v9 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184)) * v7;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  if (v9 > *(_DWORD *)(a2 + 8)
    || (uint64_t v15 = *(void **)a2,
        LODWORD(v16) = v9,
        kaldi::VectorBase<float>::CopyRowsFromMat<short>((uint64_t *)&v15, *(unsigned int **)(a1 + 184)),
        uint64_t v12 = *(_DWORD **)(a1 + 192),
        int v13 = v12[4],
        uint64_t v16 = 0,
        uint64_t v17 = 0,
        v13 + v9 > *(_DWORD *)(a2 + 8)))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v8);
  }
  uint64_t v15 = (void *)(*(void *)a2 + 4 * (int)v9);
  LODWORD(v16) = v13;
  return kaldi::CuVectorBase<float>::CopyToVec<float>(v12, (uint64_t)&v15, v10, v11, v8);
}

_DWORD *kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::SetParams(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(uint64_t))(*(void *)a1 + 176))(a1))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v14, "SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 502);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v14, "wei_src.Dim() == NumParams()");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v14);
  }
  int v5 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
  unsigned int v7 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184)) * v5;
  uint64_t v8 = *(unsigned int **)(a1 + 184);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  if (v7 > *(_DWORD *)(a2 + 8)
    || (uint64_t v14 = *(char **)a2,
        LODWORD(v15) = v7,
        kaldi::QuantizedMatrixBase<short>::CopyRowsFromVec(v8, &v14),
        uint64_t v11 = *(_DWORD **)(a1 + 192),
        int v12 = v11[4],
        uint64_t v15 = 0,
        uint64_t v16 = 0,
        v12 + v7 > *(_DWORD *)(a2 + 8)))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v6);
  }
  uint64_t v14 = (char *)(*(void *)a2 + 4 * (int)v7);
  LODWORD(v15) = v12;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v11, (uint64_t)&v14, v9, v10, v6);
}

float kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::SumParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  float v6 = kaldi::QuantizedMatrixBase<short>::Sum(*(int **)(a1 + 184), a2, a3, a4, a5);
  double v7 = kaldi::CuVectorBase<float>::Sum(*(void *)(a1 + 192));
  return v6 + *(float *)&v7;
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::PerturbParams(uint64_t a1)
{
  uint64_t v2 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
  uint64_t v3 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v4, v2, v3, 1u, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v4);
  kaldi::QuantizedMatrixBase<short>::AddMat();
}

uint64_t sub_115C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v7 = *(unsigned int *)(*(void *)(v5 + 192) + 16);
  v12[0] = off_262E60;
  memset(&v12[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v12, v7, 1u, a4, a5);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v12);
  kaldi::CuVectorBase<float>::AddVec(*(void *)(v5 + 192), (uint64_t)v12, v8, v9, v10, v6, 1.0);
  kaldi::CuVector<float>::~CuVector(v12);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v13);
}

void sub_115CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::Info(unsigned int **a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
  (*((void (**)(unsigned int **, void *, void))*a1 + 21))(a1, v21, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" OutSizeX:", 10);
  uint64_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" OutSizeY:", 10);
  uint64_t v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" InFmaps:", 9);
  int v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" OutFmaps:", 10);
  std::ostream::operator<<();
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\n filters: ", 11);
  kaldi::nnet1::MomentStatistics<short>(a1[23]);
  if ((v20 & 0x80u) == 0) {
    float v6 = v19;
  }
  else {
    float v6 = (void **)v19[0];
  }
  if ((v20 & 0x80u) == 0) {
    uint64_t v7 = v20;
  }
  else {
    uint64_t v7 = (uint64_t)v19[1];
  }
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n bias: ", 8);
  kaldi::nnet1::MomentStatistics<float>(a1[24], v10, v11, v12, v13);
  if ((v18 & 0x80u) == 0) {
    uint64_t v14 = __p;
  }
  else {
    uint64_t v14 = (void **)__p[0];
  }
  if ((v18 & 0x80u) == 0) {
    uint64_t v15 = v18;
  }
  else {
    uint64_t v15 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v14, v15);
  if ((char)v18 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v20 < 0) {
    operator delete(v19[0]);
  }
  std::stringbuf::str();
  if (v22 < 0) {
    operator delete((void *)v21[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_115FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  std::ostringstream::~ostringstream((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v41, "\n  ");
  kaldi::nnet1::MomentStatistics<float>((void *)(a1 + 200), v4, v5, v6, v7);
  if ((v40 & 0x80u) == 0) {
    uint64_t v8 = v39;
  }
  else {
    uint64_t v8 = (void **)v39[0];
  }
  if ((v40 & 0x80u) == 0) {
    std::string::size_type v9 = v40;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v39[1];
  }
  uint64_t v10 = std::string::append(&v41, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  uint64_t v12 = std::string::append(&v42, ", lr-coef ");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v38 & 0x80u) == 0) {
    uint64_t v14 = v37;
  }
  else {
    uint64_t v14 = (void **)v37[0];
  }
  if ((v38 & 0x80u) == 0) {
    std::string::size_type v15 = v38;
  }
  else {
    std::string::size_type v15 = (std::string::size_type)v37[1];
  }
  uint64_t v16 = std::string::append(&v43, (const std::string::value_type *)v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  unsigned __int8 v18 = std::string::append(&v44, "\n  bias_grad");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((void *)(a1 + 224), v20, v21, v22, v23);
  if ((v36 & 0x80u) == 0) {
    uint64_t v24 = v35;
  }
  else {
    uint64_t v24 = (void **)v35[0];
  }
  if ((v36 & 0x80u) == 0) {
    std::string::size_type v25 = v36;
  }
  else {
    std::string::size_type v25 = (std::string::size_type)v35[1];
  }
  uint64_t v26 = std::string::append(&v45, (const std::string::value_type *)v24, v25);
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  uint64_t v28 = std::string::append(&v46, ", lr-coef ");
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v34 & 0x80u) == 0) {
    uint64_t v30 = __p;
  }
  else {
    uint64_t v30 = (void **)__p[0];
  }
  if ((v34 & 0x80u) == 0) {
    std::string::size_type v31 = v34;
  }
  else {
    std::string::size_type v31 = (std::string::size_type)__p[1];
  }
  BOOL v32 = std::string::append(&v47, (const std::string::value_type *)v30, v31);
  *a2 = *v32;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  if ((char)v34 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if ((char)v36 < 0) {
    operator delete(v35[0]);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if ((char)v38 < 0) {
    operator delete(v37[0]);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if ((char)v40 < 0) {
    operator delete(v39[0]);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
}

void sub_11629C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v52 - 57) < 0) {
    operator delete(*(void **)(v52 - 80));
  }
  if (*(char *)(v52 - 89) < 0) {
    operator delete(*(void **)(v52 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v52 - 121) < 0) {
    operator delete(*(void **)(v52 - 144));
  }
  if (*(char *)(v52 - 153) < 0) {
    operator delete(*(void **)(v52 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  _Unwind_Resume(exception_object);
}

void sub_116398()
{
}

void sub_1163A0()
{
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  if (a4 || !*(unsigned char *)(a1 + 17)) {
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::PropagateCpu(a1, a2, a3, a4);
  }
  else {
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::PropagateBNNS(a1, a2, a3, 0, a5);
  }
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::PropagateBNNS(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  uint64_t v5 = *(void **)(a1 + 152);
  if (!v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateBNNS", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", (const char *)&stru_428.align + 1, "bnns_filter_", a5);
  }
  if (a4)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8, "PropagateBNNS", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1120);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, "BNNS only supports one batch");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  uint64_t result = BNNSFilterApplyBatch(v5, *(int *)(a2 + 20), *(const void **)(a2 + 8), *(int *)(a2 + 24), *(void **)(a3 + 8), *(int *)(a3 + 24));
  if (result) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateBNNS", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", (const char *)&stru_428.nreloc, "ret == 0", v7);
  }
  return result;
}

void sub_116484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::PropagateCpu(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8 = *(_DWORD *)(a1 + 104);
  int v9 = *(_DWORD *)(a1 + 108);
  uint64_t v10 = (const char *)((v8 + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120));
  int v81 = (v9 + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124);
  uint64_t v80 = (v81 + 1);
  int v90 = *(_DWORD *)(a1 + 8);
  int v85 = v80 * (v10 + 1);
  uint64_t v82 = (*(_DWORD *)(a1 + 12) / v85);
  if (kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184)) != v82) {
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateCpu", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", stru_478.sectname, "num_filters == num_output_fmaps", v12);
  }
  uint64_t v13 = *(unsigned int *)(a2 + 20);
  uint64_t v86 = a2;
  uint64_t v87 = (uint64_t *)(a1 + 296);
  uint64_t v14 = *(void *)(a1 + 296);
  unint64_t v15 = *(int *)(a1 + 80);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 304) - v14) >> 3) < v15)
  {
    std::vector<std::vector<kaldi::CuMatrix<float>>>::resize(v87, v15);
    uint64_t v14 = *v87;
  }
  uint64_t v78 = (v10 + 1);
  int v79 = v10;
  int v88 = a4;
  uint64_t v16 = (uint64_t *)(v14 + 24 * a4);
  if (0xAAAAAAAAAAAAAAABLL * ((v16[1] - *v16) >> 4) < v85) {
    std::vector<kaldi::CuMatrix<float>>::resize(v16, v85);
  }
  if (v85 >= 1)
  {
    uint64_t v17 = 0;
    do
    {
      uint64_t v18 = *(void *)(*(void *)(a1 + 296) + 24 * v88) + v17;
      uint64_t v19 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
      kaldi::CuMatrix<float>::Resize(v18, v13, v19, 0, 0);
      v17 += 48;
    }
    while (48 * v85 != v17);
  }
  uint64_t v83 = a3;
  int v84 = (uint64_t *)(a1 + 160);
  unint64_t v20 = *(int *)(a1 + 80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 168) - *(void *)(a1 + 160)) >> 4) < v20) {
    std::vector<kaldi::CuMatrix<float>>::resize(v84, v20);
  }
  int v21 = *(_DWORD *)(a1 + 132);
  int v22 = *(_DWORD *)(a1 + 108);
  int v23 = *(_DWORD *)(a1 + 116);
  int v92 = -v21;
  if (v21 + v22 - v23 < -v21) {
    goto LABEL_69;
  }
  int v24 = 0;
  int v25 = *(_DWORD *)(a1 + 128);
  int v26 = *(_DWORD *)(a1 + 104);
  int v27 = *(_DWORD *)(a1 + 112);
  int v91 = v90 / (v9 * v8);
  do
  {
    int v28 = -v25;
    if (v25 + v26 - v27 < -v25) {
      goto LABEL_68;
    }
    uint64_t v29 = v24;
    do
    {
      uint64_t v89 = v29;
      memset(&__p, 0, sizeof(__p));
      if (v91 < 1) {
        goto LABEL_64;
      }
      std::vector<int>::pointer end = 0;
      int v31 = 0;
      int v32 = v28 + v26 * v92;
      int v33 = *(_DWORD *)(a1 + 116);
      do
      {
        if (v33 < 1) {
          goto LABEL_63;
        }
        for (int i = 0; i < v33; ++i)
        {
          if (v27 < 1) {
            continue;
          }
          int v35 = 0;
          int v36 = i + v92;
          do
          {
            if (v36 < 0 || (int v37 = *(_DWORD *)(a1 + 108), v36 >= v37))
            {
              value = __p.__end_cap_.__value_;
            }
            else
            {
              value = __p.__end_cap_.__value_;
              if (v35 + v28 >= 0)
              {
                int v39 = *(_DWORD *)(a1 + 104);
                if (v35 + v28 < v39)
                {
                  int v40 = v32 + v35 + (i + v37 * v31) * v39;
                  if (end >= __p.__end_cap_.__value_)
                  {
                    std::vector<int>::pointer begin = __p.__begin_;
                    uint64_t v51 = end - __p.__begin_;
                    unint64_t v52 = v51 + 1;
                    if ((unint64_t)(v51 + 1) >> 62) {
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    }
                    int64_t v53 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
                    if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v52) {
                      unint64_t v52 = v53 >> 1;
                    }
                    if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v54 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v54 = v52;
                    }
                    if (v54)
                    {
                      long long v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&__p.__end_cap_, v54);
                      std::vector<int>::pointer begin = __p.__begin_;
                      std::vector<int>::pointer end = __p.__end_;
                    }
                    else
                    {
                      long long v55 = 0;
                    }
                    int v56 = (int *)&v55[4 * v51];
                    int *v56 = v40;
                    int v57 = v56 + 1;
                    while (end != begin)
                    {
                      int v58 = *--end;
                      *--int v56 = v58;
                    }
                    __p.__begin_ = v56;
                    __p.__end_ = v57;
                    __p.__end_cap_.__value_ = (int *)&v55[4 * v54];
                    if (begin) {
                      operator delete(begin);
                    }
                    std::vector<int>::pointer end = v57;
                  }
                  else
                  {
                    *end++ = v40;
                  }
                  goto LABEL_60;
                }
              }
            }
            if (end >= value)
            {
              std::vector<int>::pointer v41 = __p.__begin_;
              uint64_t v42 = end - __p.__begin_;
              unint64_t v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 62) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v44 = (char *)value - (char *)__p.__begin_;
              if (v44 >> 1 > v43) {
                unint64_t v43 = v44 >> 1;
              }
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v45 = v43;
              }
              if (v45)
              {
                std::string v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&__p.__end_cap_, v45);
                std::vector<int>::pointer v41 = __p.__begin_;
                std::vector<int>::pointer end = __p.__end_;
              }
              else
              {
                std::string v46 = 0;
              }
              std::string v47 = (int *)&v46[4 * v42];
              *std::string v47 = -1;
              BOOL v48 = v47 + 1;
              while (end != v41)
              {
                int v49 = *--end;
                *--std::string v47 = v49;
              }
              __p.__begin_ = v47;
              __p.__end_ = v48;
              __p.__end_cap_.__value_ = (int *)&v46[4 * v45];
              if (v41) {
                operator delete(v41);
              }
              std::vector<int>::pointer end = v48;
            }
            else
            {
              *end++ = -1;
            }
LABEL_60:
            __p.__end_ = end;
            ++v35;
            int v27 = *(_DWORD *)(a1 + 112);
          }
          while (v35 < v27);
          int v33 = *(_DWORD *)(a1 + 116);
        }
LABEL_63:
        ++v31;
      }
      while (v31 != v91);
LABEL_64:
      kaldi::CuMatrixBase<float>::CopyCols(*(void *)(*v87 + 24 * v88) + 48 * v89, v86, (unsigned int **)&__p, v11, v12);
      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
      uint64_t v29 = v89 + 1;
      v28 += *(_DWORD *)(a1 + 120);
      int v26 = *(_DWORD *)(a1 + 104);
      int v25 = *(_DWORD *)(a1 + 128);
      int v27 = *(_DWORD *)(a1 + 112);
    }
    while (v28 <= v25 + v26 - v27);
    int v22 = *(_DWORD *)(a1 + 108);
    int v21 = *(_DWORD *)(a1 + 132);
    int v24 = v89 + 1;
    int v23 = *(_DWORD *)(a1 + 116);
LABEL_68:
    v92 += *(_DWORD *)(a1 + 124);
  }
  while (v92 <= v21 + v22 - v23);
LABEL_69:
  kaldi::CuMatrix<float>::Resize(*v84 + 48 * v88, *(unsigned int *)(v83 + 20), *(unsigned int *)(v83 + 16), 3u, 0);
  if (v85 >= 1)
  {
    uint64_t v59 = 0;
    int v60 = 0;
    do
    {
      uint64_t v61 = *(void *)(a1 + 160) + 48 * v88;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&__p, v61, 0, *(_DWORD *)(v61 + 20), v60, v82);
      kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)&__p, *(void *)(a1 + 192), v62, v63, v64, 1.0, 0.0);
      kaldi::CuMatrixBase<float>::AddMatMat<short>((uint64_t)&__p, *(void *)(*(void *)(a1 + 296) + 24 * v88) + v59, 111, *(unsigned int **)(a1 + 184), &stru_68.sectname[8], 1.0, 1.0);
      __p.__begin_ = (std::vector<int>::pointer)off_262D80;
      *(_OWORD *)&__p.__end_ = 0u;
      long long v94 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&__p);
      int v60 = (const char *)(v60 + v82);
      v59 += 48;
    }
    while (48 * v85 != v59);
  }
  std::vector<int>::vector(&__p, *(int *)(a1 + 12));
  if ((int)v82 >= 1)
  {
    uint64_t v66 = 0;
    uint64x2_t v67 = (uint64x2_t)vdupq_n_s64(v78 - 1);
    int64x2_t v68 = vdupq_n_s64(2uLL);
    uint64_t v69 = 1;
    do
    {
      if ((v81 & 0x80000000) == 0)
      {
        uint64_t v70 = 0;
        float v71 = &__p.__begin_[v69];
        int v72 = v66;
        do
        {
          if ((v79 & 0x80000000) == 0)
          {
            uint64_t v73 = v71;
            uint64_t v74 = (v78 + 1) & 0x1FFFFFFFELL;
            int v75 = v72;
            int64x2_t v76 = (int64x2_t)xmmword_204A30;
            do
            {
              int32x2_t v77 = vmovn_s64((int64x2_t)vcgeq_u64(v67, (uint64x2_t)v76));
              if (v77.i8[0]) {
                *(v73 - 1) = v75;
              }
              uint64_t v65 = v77.u32[1];
              if (v77.i8[4])
              {
                uint64_t v65 = (v82 + v75);
                *uint64_t v73 = v65;
              }
              int64x2_t v76 = vaddq_s64(v76, v68);
              v75 += 2 * v82;
              v73 += 2;
              v74 -= 2;
            }
            while (v74);
          }
          ++v70;
          v72 += v82 * v78;
          v71 += (int)v79 + 1;
        }
        while (v70 != v80);
      }
      ++v66;
      v69 += (int)v80 * (uint64_t)(int)v78;
    }
    while (v66 != v82);
  }
  kaldi::CuMatrixBase<float>::CopyCols(v83, *v84 + 48 * v88, (unsigned int **)&__p, v65, v79);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_116B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::BackpropagateCpu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v9 = (*(_DWORD *)(a1 + 104) + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120);
  int v10 = v9 + 1;
  int v11 = (*(_DWORD *)(a1 + 108) + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124);
  uint64_t v12 = (v11 + 1);
  int v13 = v12 * (v9 + 1);
  uint64_t v14 = (*(_DWORD *)(a1 + 12) / v13);
  if (kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184)) == v14)
  {
    kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 160) + 48 * a6, *(unsigned int *)(a4 + 20), *(unsigned int *)(a4 + 16), 3u, 0);
    std::vector<int>::vector(&v30, *(int *)(a1 + 12));
    if ((int)v14 >= 1)
    {
      int v18 = 0;
      uint64_t v19 = 0;
      for (uint64_t i = 0; i != v14; ++i)
      {
        if ((v11 & 0x80000000) == 0)
        {
          uint64_t v21 = 0;
          int v22 = &v30.__begin_[v19];
          int v23 = v18;
          do
          {
            uint64_t v24 = (v9 + 1);
            int v25 = v23;
            int v26 = v22;
            if ((v9 & 0x80000000) == 0)
            {
              do
              {
                *int v26 = v25;
                v26 += v14;
                ++v25;
                --v24;
              }
              while (v24);
            }
            ++v21;
            v22 += v10 * v14;
            v23 += v10;
          }
          while (v21 != v12);
        }
        ++v19;
        v18 += v13;
      }
    }
    kaldi::CuMatrixBase<float>::CopyCols(*(void *)(a1 + 160) + 48 * a6, a4, (unsigned int **)&v30, v16, v17);
    std::vector<kaldi::CuSubMatrix<float>>::vector(v29, v13);
    uint64_t v27 = *(void *)(a1 + 24);
    if (a6 < (unint64_t)((*(void *)(a1 + 32) - v27) >> 3)) {
      kaldi::CuWorkspace::GetChildWorkspace(*(kaldi::CuWorkspace **)(v27 + 8 * a6), -1);
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v28, "BackpropagateCpu", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1327);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Convolutional2DComponent needs workspace set to perform back-propagation", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v28);
  }
  kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateCpu", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", &stru_518.sectname[5], "num_filters == num_output_fmaps", v15);
}

void sub_1171AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, kaldi::CuWorkspace *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  a22 = v22 - 136;
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  uint64_t v24 = *(void **)(v22 - 112);
  if (v24)
  {
    *(void *)(v22 - 104) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 148) = a3;
  *(_DWORD *)(result + 144) = a2;
  *(unsigned char *)(result + 344) = 0;
  return result;
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::NormalizeGradients(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  float v7 = a6;
  int v9 = *(_DWORD *)(a1 + 144);
  if (v9 == 3)
  {
    if (a6 >= 0.0 && a6 <= 1.0)
    {
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*(void *)(*(void *)(a1 + 200) + 8 * a2), *(void *)(a1 + 248) + 48 * a2, a6);
      uint64_t v15 = *(void *)(*(void *)(a1 + 224) + 8 * a2);
      uint64_t v16 = *(void *)(a1 + 272) + 32 * a2;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v15, v16, v7, v12, v13, v14);
    }
  }
  else if (v9 == 2)
  {
    if (a6 > 0.0)
    {
      uint64_t v17 = a2;
      if (*(unsigned char *)(a1 + 84)) {
        float v7 = (float)*(int *)(*(void *)(a1 + 320) + 4 * a2) * a6;
      }
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*(void *)(*(void *)(a1 + 200) + 8 * a2), (unsigned int *)(*(void *)(a1 + 248) + 48 * a2), v7, a3, a4, a5);
      uint64_t v22 = *(void *)(*(void *)(a1 + 224) + 8 * v17);
      int v23 = (_DWORD *)(*(void *)(a1 + 272) + 32 * v17);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v22, v23, v19, v20, v21, v7);
    }
  }
  else if (v9 == 1 && a6 > 0.0)
  {
    uint64_t v10 = a2;
    if (*(unsigned char *)(a1 + 84)) {
      float v7 = (float)*(int *)(*(void *)(a1 + 320) + 4 * a2) * a6;
    }
    kaldi::nnet1::UpdatableComponent::ClipGradient(*(void *)(*(void *)(a1 + 200) + 8 * a2), v7);
    uint64_t v18 = *(void *)(*(void *)(a1 + 224) + 8 * v10);
    kaldi::nnet1::UpdatableComponent::ClipGradient(v18, v7);
  }
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::EnsureCorrs(a1);

  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AccumGradientsCpu(a1, a2, a3, a4, a5);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::EnsureCorrs(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 344))
  {
    int v2 = *(_DWORD *)(a1 + 80);
    if (v2 > 1) {
      int v3 = v2 + 1;
    }
    else {
      int v3 = 1;
    }
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 200), v3);
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize((uint64_t *)(a1 + 224), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 248), v3);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 272), v3);
    if (v3 >= 1)
    {
      kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
      kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
      operator new();
    }
    std::vector<int>::resize((std::vector<int> *)(a1 + 320), v3);
    *(unsigned char *)(a1 + 344) = 1;
  }
}

void sub_117764()
{
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AccumGradientsCpu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v9 = (*(_DWORD *)(a1 + 104) + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120) + 1;
  int v10 = v9 + v9 * ((*(_DWORD *)(a1 + 108) + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124));
  int v11 = *(_DWORD *)(a1 + 12) / v10;
  if (kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184)) != v11) {
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradientsCpu", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", (const char *)&stru_298.size + 6, "num_filters == num_output_fmaps", v12);
  }
  *(_DWORD *)(*(void *)(a1 + 320) + 4 * a5) = *(_DWORD *)(a2 + 20);
  uint64_t v13 = *(void *)(a1 + 200);
  *(void *)(*(void *)(v13 + 8 * a5) + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a4;
  *(void *)(*(void *)(*(void *)(a1 + 224) + 8 * a5) + ++*(void *)(result + 24) = a4;
  kaldi::CuMatrixBase<float>::SetZero(*(void *)(v13 + 8 * a5));
  kaldi::CuVectorBase<float>::SetZero(*(void *)(*(void *)(a1 + 224) + 8 * a5));
  if (v10 >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 48 * v10;
    do
    {
      uint64_t v17 = *(void *)(a1 + 160) + 48 * a5;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v21, v17, 0, *(_DWORD *)(v17 + 20), v15, v11);
      kaldi::CuMatrixBase<float>::AddMatMat(*(void *)(*(void *)(a1 + 200) + 8 * a5), (uint64_t)&v21, CblasTrans, *(void *)(*(void *)(a1 + 296) + 24 * a5) + v14, &stru_68.sectname[7], 1.0, 1.0);
      kaldi::CuVectorBase<float>::AddRowSumMat(*(void *)(*(void *)(a1 + 224) + 8 * a5), &v21, 1.0, 1.0, v18, v19, v20);
      uint64_t v21 = off_262D80;
      long long v22 = 0u;
      long long v23 = 0u;
      fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v21);
      uint64_t v15 = (const char *)(v15 + v11);
      v14 += 48;
    }
    while (v16 != v14);
  }
}

void sub_11795C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (**a10)())
{
  a10 = off_262D80;
  *int v10 = 0u;
  v10[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::UpdateWeights()
{
  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 752);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unsupported");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = (_DWORD ***)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v24, *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v23, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0, 0);
  ((void (*)(_DWORD ***, uint64_t, unsigned char *, void))(*v8)[14])(v8, a2, v24, 0);
  ((void (*)(_DWORD ***, uint64_t, unsigned char *, uint64_t, unsigned char *, void))(*v8)[16])(v8, a2, v24, a3, v23, 0);
  ((void (*)(_DWORD ***, uint64_t, uint64_t, void, void))(*v8)[29])(v8, a2, a3, 0, 0);
  LODWORD(a3) = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
  unsigned int v9 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184)) * a3;
  kaldi::Vector<float>::Resize((void **)a4, *(_DWORD *)(*(void *)(a1 + 192) + 16) + v9, 0, v10, v11);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if (v9 > *(_DWORD *)(a4 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v14);
  }
  uint64_t v20 = *(void **)a4;
  LODWORD(v21) = v9;
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v20, *v8[25], v12, v13, v14);
  int v18 = *(_DWORD *)(*(void *)(a1 + 192) + 16);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if (v18 + v9 > *(_DWORD *)(a4 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v17);
  }
  uint64_t v20 = (void *)(*(void *)a4 + 4 * (int)v9);
  LODWORD(v21) = v18;
  kaldi::CuVectorBase<float>::CopyToVec<float>(*v8[28], (uint64_t)&v20, v15, v16, v17);
  ((void (*)(_DWORD ***))(*v8)[1])(v8);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v23);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v24);
}

void sub_117C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

float kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 84)) {
    return *(float *)(a1 + 56);
  }
  uint64_t v2 = *(void *)(a1 + 352);
  unint64_t v3 = *(void *)(a1 + 360) - v2;
  if (!v3) {
    return NAN;
  }
  unint64_t v4 = v3 >> 2;
  if ((int)v4 <= a2) {
    return NAN;
  }
  int v5 = v4 - 1;
  if (a2 >= 0) {
    int v5 = a2;
  }
  return *(float *)(v2 + 4 * v5);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::EnsureCorrs(a1);
  int v6 = *(_DWORD *)(*(void *)(a1 + 192) + 16);
  int v7 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
  uint64_t result = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
  *a3 = v6 + result * v7;
  uint64_t v13 = *(void *)(a1 + 200);
  uint64_t v14 = *(void *)(a1 + 208) - v13;
  if (v14 && (uint64_t v15 = *(void *)(a1 + 232) - *(void *)(a1 + 224)) != 0)
  {
    uint64_t v16 = v14 >> 3;
    uint64_t v17 = v15 >> 3;
    int v18 = *(_DWORD *)(a1 + 80);
    if (v18 == 1) {
      int v18 = 0;
    }
    uint64_t v19 = v18;
    uint64_t v20 = v17 - 1;
    if (v16 - 1 != v18 || v20 != v18)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v26, "CountZeroCorr", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 212);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Unexpected mismatch in indexes: ", 32);
      uint64_t v24 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"  ", 2);
      int v25 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"  ", 2);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v26);
    }
    int v22 = kaldi::CuMatrixBase<float>::CountZeros(*(void *)(v13 + 8 * v18), v9, v10, v11, v12);
    uint64_t result = kaldi::CuVectorBase<float>::CountZeros(*(void *)(*(void *)(a1 + 224) + 8 * v19));
    int v23 = result + v22;
  }
  else
  {
    int v23 = 0;
  }
  *a2 = v23;
  return result;
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::VectorizeWeightsCorrs(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 232);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "Weights are already vectorized");
  }
  else
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v4, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 235);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Performing vectorization of convolutional 2d component", 54);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v4);
    }
    int v2 = kaldi::QuantizedMatrixBase<short>::NumRows(*(unsigned int **)(a1 + 184));
    int v3 = *(_DWORD *)(*(void *)(a1 + 192) + 16)
       + kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184)) * v2;
    if (v3 == (*(unsigned int (**)(uint64_t))(*(void *)a1 + 176))(a1)) {
      operator new();
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 238);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "(nlinparams + bias_->Dim()) == NumParams()");
  }
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
}

void sub_11833C(uint64_t a1, ...)
{
  va_start(va, a1);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit()
{
}

void sub_1183D8()
{
}

void non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit()
{
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit()
{
}

void sub_11844C()
{
}

void non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit()
{
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::EnsureCorrs(a1);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(void *)(*(void *)(a1 + 208) - 8));
  uint64_t v4 = *(void *)(*(void *)(a1 + 232) - 8);

  return kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v4);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::GetType()
{
  return 265;
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::GetType()
{
  return 266;
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::GetType()
{
  return 267;
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::UpdateWeights(uint64_t a1, uint64_t a2, int a3)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  float v10 = *(float *)(a1 + 64);
  float v9 = *(float *)(a1 + 68);
  float v11 = *(float *)(a1 + 72);
  int v12 = *(_DWORD *)(a1 + 76);
  *(void *)(*(void *)(a1 + 184) + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
  *(void *)(*(void *)(a1 + 192) + ++*(void *)(result + 24) = a2;
  uint64_t v13 = *(unsigned int *)(a1 + 80);
  if (a3 >= 0) {
    unsigned int v14 = a3;
  }
  else {
    unsigned int v14 = *(_DWORD *)(a1 + 80);
  }
  if (v13 == 1) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = v14;
  }
  if ((int)v15 > (int)v13) {
    kaldi::KaldiAssertFailure_((kaldi *)"UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", (const char *)&stru_2E8.addr + 1, "batch_idx <= opts_.num_subbatches", v8);
  }
  uint64_t v16 = *(uint64_t **)(a1 + 200);
  *(void *)(v16[(int)v15] + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
  *(void *)(*(void *)(*(void *)(a1 + 224) + 8 * (int)v15) + ++*(void *)(result + 24) = a2;
  *(void *)(*(void *)(a1 + 248) + 48 * (int)v15 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
  *(void *)(*(void *)(a1 + 272) + 32 * (int)v15 + ++*(void *)(result + 24) = a2;
  if (v15 == v13)
  {
    kaldi::CuMatrixBase<float>::AddMat(v16[(int)v15], *v16, 111, v7, v8, 1.0, 0.0);
    kaldi::CuVectorBase<float>::AddVec(*(void *)(*(void *)(a1 + 224) + 8 * (int)v15), **(void **)(a1 + 224), v17, v18, v19, 1.0, 0.0);
    if (*(int *)(a1 + 80) > 1)
    {
      uint64_t v20 = 1;
      do
      {
        kaldi::CuMatrixBase<float>::AddMat(*(void *)(*(void *)(a1 + 200) + 8 * (int)v15), *(void *)(*(void *)(a1 + 200) + 8 * v20), 111, v7, v8, 1.0, 1.0);
        kaldi::CuVectorBase<float>::AddVec(*(void *)(*(void *)(a1 + 224) + 8 * (int)v15), *(void *)(*(void *)(a1 + 224) + 8 * v20++), v21, v22, v23, 1.0, 1.0);
      }
      while (v20 < *(int *)(a1 + 80));
    }
    uint64_t v24 = *(int **)(a1 + 320);
    v24[(int)v15] = 0;
    if ((int)v13 >= 1)
    {
      int v25 = 0;
      int v26 = v24;
      do
      {
        int v27 = *v26++;
        v25 += v27;
        v24[(int)v15] = v25;
        --v13;
      }
      while (v13);
    }
  }
  float v28 = *(float *)(a1 + 56);
  if (*(unsigned char *)(a1 + 84)) {
    float v28 = v28 / (float)*(int *)(*(void *)(a1 + 320) + 4 * (int)v15);
  }
  uint64_t v29 = *(void *)(a1 + 352);
  if ((int)v15 >= (unint64_t)((*(void *)(a1 + 360) - v29) >> 2))
  {
    LODWORD(v35[0]) = 2143289344;
    std::vector<float>::resize(a1 + 352, (int)v15 + 1, v35);
    uint64_t v29 = *(void *)(a1 + 352);
  }
  *(float *)(v29 + 4 * (int)v15) = v28;
  if (*(float *)(a1 + 148) >= 0.0) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 248))(a1, v15);
  }
  if (v10 != 0.0) {
    kaldi::CuMatrixBase<float>::AddMat(*(void *)(a1 + 184), *(void *)(a1 + 184), 111, v7, v8, (float)-(float)(v28 * v10) * (float)*(int *)(*(void *)(a1 + 320) + 4 * (int)v15), 1.0);
  }
  if (v9 != 0.0) {
    kaldi::cu::RegularizeL1<float>(*(_DWORD **)(a1 + 184), *(void *)(*(void *)(a1 + 200) + 8 * (int)v15), (float)(v9 * v28) * (float)*(int *)(*(void *)(a1 + 320) + 4 * (int)v15), v28, v6, v7, v8);
  }
  if (v11 > 0.0)
  {
    if (*(int *)(a1 + 80) >= 2)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v35, "UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 816);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v35, "the multi batch gradient quantization does not work yet");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v35);
    }
    if (*(void *)(a1 + 384) == *(void *)(a1 + 376)) {
      kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 376));
    }
    kaldi::nnet1::QuantizerResidualAggregator::Quantize((kaldi::nnet1::QuantizerResidualAggregator *)(a1 + 376), v12, v11, v6, v7, v8);
  }
  kaldi::CuMatrixBase<float>::AddMat(*(void *)(a1 + 184), *(void *)(*(void *)(a1 + 200) + 8 * (int)v15), 111, v7, v8, -(float)(v28 * *(float *)(a1 + 136)), 1.0);
  kaldi::CuVectorBase<float>::AddVec(*(void *)(a1 + 192), *(void *)(*(void *)(a1 + 224) + 8 * (int)v15), v30, v31, v32, -(float)(v28 * *(float *)(a1 + 140)), 1.0);
  int v33 = *(unsigned char **)(a1 + 320);
  if (v15 == *(_DWORD *)(a1 + 80))
  {
    unsigned __int8 v34 = *(unsigned char **)(a1 + 328);
    if (v33 != v34) {
      bzero(v33, ((v34 - v33 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    }
  }
  else
  {
    *(_DWORD *)&v33[4 * (int)v15] = 0;
  }
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::Convolutional2DComponent<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_264E70;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = off_266498;
  *(void *)(a1 + 48) = off_26E7B8;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = off_267E80;
  *(void *)(a1 + 88) = off_267FB8;
  *(void *)(a1 + 96) = off_267FE0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized<kaldi::nnet1::Quantizable16BitComponentItf>((uint64_t)this - 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 23std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 31std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 43std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 35std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AssignMembers<kaldi::CuMatrixBase<float>>(a1, a2);
  return a1;
}

void sub_118A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(v10 + 376));
  unsigned int v14 = *(void **)(v10 + 352);
  if (v14)
  {
    *(void *)(v10 + 3--*(_DWORD *)(a9 + 60) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void **)(v10 + 320);
  if (v15)
  {
    *(void *)(v10 + 328) = v15;
    operator delete(v15);
  }
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v16 = *(void *)(v10 + 192);
  *(void *)(v10 + 19std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(v10 + 184), 0);
  a10 = (void **)(v10 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v12);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)v10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AssignMembers<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  if (a1 != a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 320), *(char **)(a2 + 320), *(void *)(a2 + 328), (uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 2);
  }
  *(unsigned char *)(a1 + 344) = 0;
  if (a1 != a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 352), *(char **)(a2 + 352), *(void *)(a2 + 360), (uint64_t)(*(void *)(a2 + 360) - *(void *)(a2 + 352)) >> 2);
  }
  if (*(void *)(a2 + 184)) {
    operator new();
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), 0);
  if (*(void *)(a2 + 192)) {
    operator new();
  }
  uint64_t v4 = *(void *)(a1 + 192);
  *(void *)(a1 + 19std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::UpdateBNNSFilter(a1);
  if (*(void *)(a2 + 384) != *(void *)(a2 + 376)) {
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 376));
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v5, "AssignMembers", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1451);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"After assign, Convolution filter has padding? ", 46);
    kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
    kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v5);
  }
}

void sub_118D1C()
{
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::Convolutional2DComponent<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_264E70;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = off_266498;
  *(void *)(a1 + 48) = off_26E7B8;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = off_268008;
  *(void *)(a1 + 88) = off_268140;
  *(void *)(a1 + 96) = off_268168;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized<kaldi::nnet1::Quantizable16BitComponentItf>((uint64_t)this - 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 23std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 31std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 43std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 35std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AssignMembers<kaldi::CuMatrixBase<float>>(a1, a2);
  return a1;
}

void sub_118F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(v10 + 376));
  unsigned int v14 = *(void **)(v10 + 352);
  if (v14)
  {
    *(void *)(v10 + 3--*(_DWORD *)(a9 + 60) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void **)(v10 + 320);
  if (v15)
  {
    *(void *)(v10 + 328) = v15;
    operator delete(v15);
  }
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v16 = *(void *)(v10 + 192);
  *(void *)(v10 + 19std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(v10 + 184), 0);
  a10 = (void **)(v10 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v12);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)v10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AssignMembers<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  if (a1 != a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 320), *(char **)(a2 + 320), *(void *)(a2 + 328), (uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 2);
  }
  *(unsigned char *)(a1 + 344) = 0;
  if (a1 != a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 352), *(char **)(a2 + 352), *(void *)(a2 + 360), (uint64_t)(*(void *)(a2 + 360) - *(void *)(a2 + 352)) >> 2);
  }
  if (*(void *)(a2 + 184)) {
    operator new();
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), 0);
  if (*(void *)(a2 + 192)) {
    operator new();
  }
  uint64_t v4 = *(void *)(a1 + 192);
  *(void *)(a1 + 19std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::UpdateBNNSFilter(a1);
  if (*(void *)(a2 + 384) != *(void *)(a2 + 376)) {
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 376));
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v5, "AssignMembers", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1451);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"After assign, Convolution filter has padding? ", 46);
    kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
    kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v5);
  }
}

void sub_11921C()
{
}

void std::vector<std::vector<kaldi::CuMatrix<float>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::Vector<float>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<kaldi::CuMatrix<float>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<kaldi::CuMatrix<float>>>::~__split_buffer(&v15);
  }
}

void sub_1193C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<kaldi::CuMatrix<float>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<kaldi::CuMatrix<float>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<kaldi::CuMatrix<float>>>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<kaldi::CuMatrix<float>>>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - ++*(void *)(result + 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - ++*(void *)(result + 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::CuMatrix<float>>>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::CuMatrix<float>>>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::CuMatrix<float>>>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::CuMatrix<float>>>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  int v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    int v3 = v1;
    std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<kaldi::CuMatrix<float>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<kaldi::CuMatrix<float>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void *std::vector<kaldi::CuSubMatrix<float>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuSubMatrix<float>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 40 * a2;
    uint64_t v6 = 40 * a2;
    uint64_t v7 = (_OWORD *)(v4 + 8);
    do
    {
      *uint64_t v7 = 0uLL;
      v7[1] = 0uLL;
      *((void *)v7 - 1) = off_262D80;
      uint64_t v7 = (_OWORD *)((char *)v7 + 40);
      v4 += 40;
      v6 -= 40;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_119694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_264E70;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = off_266498;
  *(void *)(a1 + 48) = off_26E7B8;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = off_268008;
  *(void *)(a1 + 88) = off_268140;
  *(void *)(a1 + 96) = off_268168;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized<kaldi::nnet1::Quantizable16BitComponentItf>((uint64_t)this - 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 23std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 31std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 43std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 35std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AssignMembers<kaldi::QuantizedMatrix<signed char>>(a1, a2);
  return a1;
}

void sub_119844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(v10 + 376));
  long long v14 = *(void **)(v10 + 352);
  if (v14)
  {
    *(void *)(v10 + 3--*(_DWORD *)(a9 + 60) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void **)(v10 + 320);
  if (v15)
  {
    *(void *)(v10 + 328) = v15;
    operator delete(v15);
  }
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v16 = *(void *)(v10 + 192);
  *(void *)(v10 + 19std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(v10 + 184), 0);
  a10 = (void **)(v10 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v12);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)v10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AssignMembers<kaldi::QuantizedMatrix<signed char>>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  if (a1 != a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 320), *(char **)(a2 + 320), *(void *)(a2 + 328), (uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 2);
  }
  *(unsigned char *)(a1 + 344) = 0;
  if (a1 != a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 352), *(char **)(a2 + 352), *(void *)(a2 + 360), (uint64_t)(*(void *)(a2 + 360) - *(void *)(a2 + 352)) >> 2);
  }
  if (*(void *)(a2 + 184)) {
    operator new();
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), 0);
  if (*(void *)(a2 + 192)) {
    operator new();
  }
  uint64_t v4 = *(void *)(a1 + 192);
  *(void *)(a1 + 19std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::UpdateBNNSFilter(a1);
  if (*(void *)(a2 + 384) != *(void *)(a2 + 376)) {
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 376));
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v5, "AssignMembers", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1451);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"After assign, Convolution filter has padding? ", 46);
    kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
    kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v5);
  }
}

void sub_119B58()
{
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_264E70;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = off_266498;
  *(void *)(a1 + 48) = off_26E7B8;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = off_267E80;
  *(void *)(a1 + 88) = off_267FB8;
  *(void *)(a1 + 96) = off_267FE0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized<kaldi::nnet1::Quantizable16BitComponentItf>((uint64_t)this - 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 23std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 31std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 43std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 35std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AssignMembers<kaldi::QuantizedMatrix<short>>(a1, a2);
  return a1;
}

void sub_119D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(v10 + 376));
  long long v14 = *(void **)(v10 + 352);
  if (v14)
  {
    *(void *)(v10 + 3--*(_DWORD *)(a9 + 60) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void **)(v10 + 320);
  if (v15)
  {
    *(void *)(v10 + 328) = v15;
    operator delete(v15);
  }
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v16 = *(void *)(v10 + 192);
  *(void *)(v10 + 19std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(v10 + 184), 0);
  a10 = (void **)(v10 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v12);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)v10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AssignMembers<kaldi::QuantizedMatrix<short>>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  if (a1 != a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 320), *(char **)(a2 + 320), *(void *)(a2 + 328), (uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 2);
  }
  *(unsigned char *)(a1 + 344) = 0;
  if (a1 != a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 352), *(char **)(a2 + 352), *(void *)(a2 + 360), (uint64_t)(*(void *)(a2 + 360) - *(void *)(a2 + 352)) >> 2);
  }
  if (*(void *)(a2 + 184)) {
    operator new();
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), 0);
  if (*(void *)(a2 + 192)) {
    operator new();
  }
  uint64_t v4 = *(void *)(a1 + 192);
  *(void *)(a1 + 19std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::UpdateBNNSFilter(a1);
  if (*(void *)(a2 + 384) != *(void *)(a2 + 376)) {
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 376));
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v5, "AssignMembers", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-2d-component.cc", 1451);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"After assign, Convolution filter has padding? ", 46);
    kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
    kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v5);
  }
}

void sub_11A058()
{
}

double kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ConvolutionalMaxPoolingComponent(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  *(void *)(a1 + 48) = off_26E7B8;
  *(_OWORD *)(a1 + 56) = xmmword_20CEC0;
  *(_DWORD *)(a1 + 7std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = -1082130432;
  *(void *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 86) = 0;
  *(void *)a1 = off_268268;
  *(void *)(a1 + 88) = off_2683A0;
  *(void *)(a1 + 96) = off_2683C8;
  double result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 23std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized<kaldi::nnet1::Quantizable16BitComponentItf>((uint64_t)this - 168) = 0u;
  *(_OWORD *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(a1 + 264) = _D1;
  *(_DWORD *)(a1 + 27std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 276) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(void *)(a1 + 55std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 35std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 43std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(unsigned char *)(a1 + 480) = 0;
  return result;
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ConvolutionalMaxPoolingComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_264E70;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = off_266498;
  *(void *)(a1 + 48) = off_26E7B8;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = off_268268;
  *(void *)(a1 + 88) = off_2683A0;
  *(void *)(a1 + 96) = off_2683C8;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 1--*(_DWORD *)(a9 + 60) = 0;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 168), (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)(a1 + 192), (uint64_t)(*(void *)(a2 + 200) - *(void *)(a2 + 192)) >> 3);
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 2++*(void *)(result + 24) = 0;
  *(void *)(a1 + 23std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 216), *(void *)(a2 + 216), *(void *)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 224) - *(void *)(a2 + 216)) >> 4));
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)(a1 + 240), *(void *)(a2 + 240), *(void *)(a2 + 248), (uint64_t)(*(void *)(a2 + 248) - *(void *)(a2 + 240)) >> 5);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(_DWORD *)(a1 + 27std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 288), *(const void **)(a2 + 288), *(void *)(a2 + 296), (uint64_t)(*(void *)(a2 + 296) - *(void *)(a2 + 288)) >> 2);
  *(void *)(a1 + 31std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 312), *(const void **)(a2 + 312), *(void *)(a2 + 320), (uint64_t)(*(void *)(a2 + 320) - *(void *)(a2 + 312)) >> 2);
  *(void *)(a1 + 55std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 35std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 43std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(unsigned char *)(a1 + 480) = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15, "ConvolutionalMaxPoolingComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 76);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  uint64_t v6 = *(void *)(a2 + 152);
  if (v6) {
    kaldi::NewCuSubOrMat<float>(v6, 0);
  }
  if (*(void *)(a2 + 160)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v8 = *(void *)(a1 + 168);
  uint64_t v7 = *(void *)(a1 + 176);
  if (v7 != v8)
  {
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = *(void *)(*(void *)(a2 + 168) + 8 * v9);
      if (v10) {
        kaldi::NewCuSubOrMat<float>(v10, *(unsigned __int8 *)(a1 + 16));
      }
      ++v9;
    }
    while (v9 < (v7 - v8) >> 3);
  }
  uint64_t v12 = *(void *)(a1 + 192);
  uint64_t v11 = *(void *)(a1 + 200);
  if (v11 != v12)
  {
    unint64_t v13 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 192) + 8 * v13)) {
        kaldi::NewCuSubOrVec<float>();
      }
      ++v13;
    }
    while (v13 < (v11 - v12) >> 3);
  }
  if (*(void *)(a2 + 496) != *(void *)(a2 + 488)) {
    kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator((void *)a1, (uint64_t *)(a1 + 488));
  }
  return a1;
}

void sub_11A6F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object, void **a13, uint64_t a14, uint64_t a15, void *a16)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v17);
  uint64_t v20 = (void *)*((void *)v16 + 57);
  if (v20) {
    operator delete(v20);
  }
  a16 = (void *)((char *)v16 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  uint64_t v21 = *v19;
  if (*v19)
  {
    *((void *)v16 + 40) = v21;
    operator delete(v21);
  }
  uint64_t v22 = *a13;
  if (*a13)
  {
    *((void *)v16 + 37) = v22;
    operator delete(v22);
  }
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  uint64_t v23 = *((void *)v16 + 20);
  *((void *)v16 + 20) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
  }
  uint64_t v24 = *v18;
  uint64_t *v18 = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 24))(v24);
  }
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a14);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a15);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v16);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(void *a1, uint64_t *a2)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs((uint64_t)a1);
  uint64_t v7 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad((uint64_t)a1, ((a1[22] - a1[21]) >> 3) - 1, v4, v5, v6);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v7);
  uint64_t v11 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad((uint64_t)a1, ((a1[25] - a1[24]) >> 3) - 1, v8, v9, v10);

  return kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v11);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::~ConvolutionalMaxPoolingComponent(uint64_t a1)
{
  *(void *)a1 = off_268268;
  uint64_t v2 = a1 + 88;
  *(void *)(a1 + 88) = off_2683A0;
  uint64_t v3 = a1 + 96;
  *(void *)(a1 + 96) = off_2683C8;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 488));
  uint64_t v4 = *(void **)(a1 + 456);
  if (v4) {
    operator delete(v4);
  }
  uint64_t v9 = (void **)(a1 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v5 = *(void **)(a1 + 312);
  if (v5)
  {
    *(void *)(a1 + 320) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 288);
  if (v6)
  {
    *(void *)(a1 + 296) = v6;
    operator delete(v6);
  }
  uint64_t v9 = (void **)(a1 + 240);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 216);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 192);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 168);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v7 = *(void *)(a1 + 160);
  *(void *)(a1 + 1--*(_DWORD *)(a9 + 60) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 152);
  *(void *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
  }
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v3);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  uint64_t vars8;

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::~ConvolutionalMaxPoolingComponent(a1);

  operator delete();
}

void non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::~ConvolutionalMaxPoolingComponent(uint64_t a1)
{
}

{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::~ConvolutionalMaxPoolingComponent(a1 - 96);
}

{
  uint64_t vars8;

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::~ConvolutionalMaxPoolingComponent(a1 - 88);

  operator delete();
}

{
  uint64_t vars8;

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::~ConvolutionalMaxPoolingComponent(a1 - 96);

  operator delete();
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::Copy()
{
}

void sub_11ABD0()
{
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3, uint64_t a4, const char *a5)
{
  int v93 = 0x40000000;
  int v94 = -1073741824;
  int v92 = 1036831949;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a1 + 8);
  uint64_t v8 = (int *)(a1 + 116);
  *(void *)(a1 + 13std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0x100000001;
  uint64_t v9 = (int *)(a1 + 132);
  int v91 = -1;
  memset(v90, 0, sizeof(v90));
  uint64_t v10 = a2 + 4;
  uint64_t v11 = (int *)(a1 + 280);
  int v79 = (int *)(a1 + 128);
  uint64_t v80 = (int *)(a1 + 264);
  uint64_t v12 = (int *)(a1 + 124);
  int32x2_t v77 = (int *)(a1 + 136);
  uint64_t v78 = (int *)(a1 + 120);
  int v81 = (int *)(a1 + 112);
  uint64_t v82 = (int *)(a1 + 268);
  uint64_t v83 = (int *)(a1 + 108);
  unint64_t v13 = (int *)(a1 + 104);
  while (1)
  {
    if ((*((unsigned char *)v10 + *(void *)(*a2 - 24)) & 2) != 0)
    {
      int v52 = *(_DWORD *)(a1 + 8);
      int v53 = *(_DWORD *)(a1 + 12);
      int v55 = *(_DWORD *)(a1 + 104);
      int v54 = *(_DWORD *)(a1 + 108);
      int v56 = *(_DWORD *)(a1 + 132);
      int v57 = v52 / v55 - *(_DWORD *)(a1 + 128);
      int v58 = *(_DWORD *)(a1 + 120);
      int v59 = *(_DWORD *)(a1 + 136);
      int v60 = (v58 - v56) / v59 + 1;
      *(_DWORD *)(a1 + 148) = v60;
      int v61 = v54 * v60;
      int v62 = v53 / v61;
      *(_DWORD *)(a1 + 140) = v57;
      *(_DWORD *)(a1 + 144) = v53 / v61;
      if (v56 >= 1 && v58 >= v56)
      {
        if (v59 > 0)
        {
          if (v53 == v61 * v62)
          {
            if (v52 == v52 / v55 * v55)
            {
              if (*v12 + *v81 * (v58 - 1) + *v8 * (v62 - 1) <= v57)
              {
                if (v91 >= 1) {
                  kaldi::UniformRandomNumber::SetRandomSeeds(a3, v91);
                }
                kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v88, a3);
                kaldi::Matrix<float>::Matrix((uint64_t)&v84, ((*(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 124)) * *(_DWORD *)(a1 + 104)), (*(_DWORD *)(a1 + 144) * *(_DWORD *)(a1 + 108)), 0, 0);
                for (int i = 0; i < (int)kaldi::ContextDependency::CentralPosition((kaldi::ContextDependency *)&v84); ++i)
                {
                  for (unint64_t j = 0;
                        (uint64_t)j < (int)kaldi::ContextDependency::ContextWidth((kaldi::ContextDependency *)&v84);
                        ++j)
                  {
                    float v68 = *(float *)&v92;
                    kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v88, 0, v65, v66, v67);
                    if (v86 <= i || j >= v85) {
                      kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)&stru_68.addr, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v69);
                    }
                    *(float *)(v84 + 4 * i * v87 + 4 * j) = v68 * v70;
                  }
                }
                if (!*(void *)(a1 + 152)) {
                  operator new();
                }
                kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 275);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"pointer is thought to be un-initialized here", 44);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
              }
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 261);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"ConvolutionalMaxPoolingComponent: too few input bands to compute the output", 75);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
            }
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 257);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"ConvolutionalMaxPoolingComponent: input dim mismatch", 52);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
          }
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 254);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"ConvolutionalMaxPoolingComponent: output dim mismatch", 53);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
        }
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 251);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"ConvolutionalMaxPoolingComponent: Max pooling step must be >= 1", 63);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
      }
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 249);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"ConvolutionalMaxPoolingComponent: Invalid max pooling size", 58);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v90, a4, a5);
    if ((SHIBYTE(v90[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v90[2]))
      {
        case 9:
          goto LABEL_78;
        case 0xA:
          if (v90[0] == 0x61654D736169423CLL && LOWORD(v90[1]) == 15982) {
            goto LABEL_165;
          }
          BOOL v17 = v90[0] == 0x7A69536C6F6F503CLL && LOWORD(v90[1]) == 15973;
          uint64_t v18 = v9;
          if (v17) {
            goto LABEL_162;
          }
          BOOL v19 = v90[0] == 0x6574536C6F6F503CLL && LOWORD(v90[1]) == 15984;
          uint64_t v18 = v77;
          if (v19) {
            goto LABEL_162;
          }
          if ((v90[2] & 0x8000000000000000) != 0) {
            goto LABEL_33;
          }
LABEL_77:
          if (HIBYTE(v90[2]) != 9) {
            goto LABEL_189;
          }
LABEL_78:
          BOOL v35 = v90[0] == 0x6D726F4E78614D3CLL && LOBYTE(v90[1]) == 62;
          uint64_t v30 = v11;
          if (v35) {
            goto LABEL_166;
          }
          if ((v90[2] & 0x8000000000000000) != 0) {
            goto LABEL_83;
          }
          goto LABEL_189;
        case 0xB:
          if (v90[0] == 0x6E6152736169423CLL && *(void *)((char *)v90 + 3) == 0x3E65676E61527361) {
            goto LABEL_164;
          }
          BOOL v32 = v90[0] == 0x745368637461503CLL && *(void *)((char *)v90 + 3) == 0x3E70657453686374;
          goto LABEL_110;
        case 0xC:
          BOOL v36 = v90[0] == 0x537265746C69463CLL && LODWORD(v90[1]) == 1046837865;
          uint64_t v18 = v12;
          if (!v36) {
            goto LABEL_88;
          }
          goto LABEL_162;
        case 0xD:
          if (v90[0] == 0x74536D617261503CLL && *(void *)((char *)v90 + 5) == 0x3E7665646474536DLL) {
            goto LABEL_163;
          }
          BOOL v25 = v90[0] == 0x6E6F69746365533CLL && *(void *)((char *)v90 + 5) == 0x3E706574536E6F69;
          uint64_t v18 = v8;
          if (v25) {
            goto LABEL_162;
          }
          BOOL v26 = v90[0] == 0x6E6F69746365533CLL && *(void *)((char *)v90 + 5) == 0x3E657A69536E6F69;
          goto LABEL_123;
        case 0xF:
          BOOL v27 = v90[0] == 0x75746165466E493CLL && *(void *)((char *)v90 + 7) == 0x3E7370614D657275;
          uint64_t v18 = v13;
          if (v27) {
            goto LABEL_162;
          }
          BOOL v28 = v90[0] == 0x65726168536E493CLL && *(void *)((char *)v90 + 7) == 0x3E73646E61426465;
          uint64_t v18 = v79;
          if (v28) {
            goto LABEL_162;
          }
          BOOL v29 = v90[0] == 0x61526E7261654C3CLL && *(void *)((char *)v90 + 7) == 0x3E66656F43657461;
          uint64_t v30 = v80;
          if (v29) {
            goto LABEL_166;
          }
          if (HIBYTE(v90[2]) == 9) {
            goto LABEL_78;
          }
          if (HIBYTE(v90[2]) != 12) {
            goto LABEL_189;
          }
LABEL_88:
          int v37 = v90;
          goto LABEL_156;
        case 0x10:
          BOOL v38 = v90[0] == 0x7461654674754F3CLL && v90[1] == 0x3E7370614D657275;
          goto LABEL_101;
        case 0x13:
          BOOL v34 = v90[0] == 0x61654C736169423CLL
             && v90[1] == 0x6F43657461526E72
             && *(void *)((char *)&v90[1] + 3) == 0x3E66656F43657461;
          uint64_t v30 = v82;
          if (v34) {
            goto LABEL_166;
          }
          if (HIBYTE(v90[2]) != 12) {
            goto LABEL_77;
          }
          goto LABEL_88;
        default:
          goto LABEL_189;
      }
    }
    uint64_t v20 = v90[1];
    switch(v90[1])
    {
      case 0xALL:
        if (*(void *)v90[0] == 0x61654D736169423CLL && *(_WORD *)(v90[0] + 8) == 15982)
        {
LABEL_165:
          uint64_t v30 = &v94;
        }
        else
        {
          BOOL v22 = *(void *)v90[0] == 0x7A69536C6F6F503CLL && *(_WORD *)(v90[0] + 8) == 15973;
          uint64_t v18 = v9;
          if (v22) {
            goto LABEL_162;
          }
          if (v90[1] == 10)
          {
            BOOL v23 = *(void *)v90[0] == 0x6574536C6F6F503CLL && *(_WORD *)(v90[0] + 8) == 15984;
            uint64_t v18 = v77;
            if (v23) {
              goto LABEL_162;
            }
LABEL_33:
            uint64_t v20 = v90[1];
          }
LABEL_34:
          if (v20 == 15)
          {
LABEL_133:
            BOOL v45 = *(void *)v90[0] == 0x61526E7261654C3CLL && *(void *)(v90[0] + 7) == 0x3E66656F43657461;
            uint64_t v30 = v80;
            if (v45) {
              goto LABEL_166;
            }
            uint64_t v20 = v90[1];
          }
          if (v20 == 19)
          {
            BOOL v47 = *(void *)v90[0] == 0x61654C736169423CLL
               && *(void *)(v90[0] + 8) == 0x6F43657461526E72
               && *(void *)(v90[0] + 11) == 0x3E66656F43657461;
            uint64_t v30 = v82;
            if (v47) {
              goto LABEL_166;
            }
            uint64_t v20 = v90[1];
          }
          if (v20 != 9) {
            goto LABEL_154;
          }
          BOOL v48 = *(void *)v90[0] == 0x6D726F4E78614D3CLL && *(unsigned char *)(v90[0] + 8) == 62;
          uint64_t v30 = v11;
          if (!v48)
          {
LABEL_83:
            uint64_t v20 = v90[1];
LABEL_154:
            if (v20 != 12) {
              goto LABEL_189;
            }
LABEL_155:
            int v37 = (void *)v90[0];
LABEL_156:
            uint64_t v49 = *v37;
            int v50 = *((_DWORD *)v37 + 2);
            if (v49 != 0x536D6F646E61523CLL || v50 != 1046766949)
            {
LABEL_189:
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 237);
              int v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"Unknown token ", 14);
              if (v90[2] >= 0) {
                uint64_t v73 = v90;
              }
              else {
                uint64_t v73 = (void *)v90[0];
              }
              if (v90[2] >= 0) {
                uint64_t v74 = HIBYTE(v90[2]);
              }
              else {
                uint64_t v74 = v90[1];
              }
              int v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)v73, v74);
              int64x2_t v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)", a typo in config?", 19);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)" (ParamStddev|BiasMean|BiasRange|InFeatureMaps|OutFeatureMaps|PatchStep|SectionStep|SectionSize|FilterSize|LearnRateCoef|BiasLearnRateCoef|MaxNorm|RandomSeed)", 158);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
            }
            uint64_t v18 = &v91;
LABEL_162:
            kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v18, v14, v15);
            goto LABEL_167;
          }
        }
LABEL_166:
        kaldi::ReadBasicType<float>(a2, 0, (float *)v30, v14, v15);
LABEL_167:
        std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
        break;
      case 0xBLL:
        if (*(void *)v90[0] != 0x6E6152736169423CLL || *(void *)(v90[0] + 3) != 0x3E65676E61527361)
        {
          BOOL v32 = *(void *)v90[0] == 0x745368637461503CLL && *(void *)(v90[0] + 3) == 0x3E70657453686374;
LABEL_110:
          uint64_t v18 = v81;
          if (!v32) {
            goto LABEL_189;
          }
          goto LABEL_162;
        }
LABEL_164:
        uint64_t v30 = &v93;
        goto LABEL_166;
      case 0xCLL:
        BOOL v39 = *(void *)v90[0] == 0x537265746C69463CLL && *(_DWORD *)(v90[0] + 8) == 1046837865;
        uint64_t v18 = v12;
        if (!v39) {
          goto LABEL_155;
        }
        goto LABEL_162;
      case 0xDLL:
        if (*(void *)v90[0] != 0x74536D617261503CLL || *(void *)(v90[0] + 5) != 0x3E7665646474536DLL)
        {
          BOOL v42 = *(void *)v90[0] == 0x6E6F69746365533CLL && *(void *)(v90[0] + 5) == 0x3E706574536E6F69;
          uint64_t v18 = v8;
          if (!v42)
          {
            BOOL v26 = *(void *)v90[0] == 0x6E6F69746365533CLL && *(void *)(v90[0] + 5) == 0x3E657A69536E6F69;
LABEL_123:
            uint64_t v18 = v78;
            if (!v26) {
              goto LABEL_189;
            }
          }
          goto LABEL_162;
        }
LABEL_163:
        uint64_t v30 = &v92;
        goto LABEL_166;
      case 0xFLL:
        BOOL v43 = *(void *)v90[0] == 0x75746165466E493CLL && *(void *)(v90[0] + 7) == 0x3E7370614D657275;
        uint64_t v18 = v13;
        if (!v43)
        {
          BOOL v44 = *(void *)v90[0] == 0x65726168536E493CLL && *(void *)(v90[0] + 7) == 0x3E73646E61426465;
          uint64_t v18 = v79;
          if (!v44) {
            goto LABEL_133;
          }
        }
        goto LABEL_162;
      case 0x10:
        BOOL v38 = *(void *)v90[0] == 0x7461654674754F3CLL && *(void *)(v90[0] + 8) == 0x3E7370614D657275;
LABEL_101:
        uint64_t v18 = v83;
        if (!v38) {
          goto LABEL_189;
        }
        goto LABEL_162;
      default:
        goto LABEL_34;
    }
  }
}

void sub_11BAD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  JUMPOUT(0x11BB00);
}

void sub_11BAF0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 121) < 0) {
    operator delete(*(void **)(v1 - 144));
  }
  _Unwind_Resume(exception_object);
}

void sub_11BAFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::GaussRandomNumber::~GaussRandomNumber((kaldi::GaussRandomNumber *)va1);
  JUMPOUT(0x11BB10);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a1 + 8);
  uint64_t v6 = a1 + 116;
  *(void *)(a1 + 13std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0x100000001;
  uint64_t v7 = a1 + 132;
  uint64_t v52 = a1 + 136;
  if (kaldi::Peek(a2, a3) != 60)
  {
LABEL_142:
    int v45 = *(_DWORD *)(a1 + 12);
    int v46 = *(_DWORD *)(a1 + 108);
    int v47 = *(_DWORD *)(a1 + 8) / *(_DWORD *)(a1 + 104) - *(_DWORD *)(a1 + 128);
    int v48 = (*(_DWORD *)(a1 + 120) - *(_DWORD *)(a1 + 132)) / *(_DWORD *)(a1 + 136) + 1;
    *(_DWORD *)(a1 + 148) = v48;
    *(unsigned char *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 140) = v47;
    *(_DWORD *)(a1 + 144) = v45 / (v46 * v48);
    LOBYTE(v55) = 0;
    kaldi::ReadBasicType<char>(a2, a3, &v55, v8, v9);
    if (!*(void *)(a1 + 152))
    {
      kaldi::ExpectToken(a2, a3, (kaldi *)"<Filters>");
      operator new();
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 348);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "pointer is thought to be un-initialized here");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  while (1)
  {
    long long v55 = 0uLL;
    uint64_t v56 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v55, v8, v9);
    if ((SHIBYTE(v56) & 0x80000000) == 0)
    {
      uint64_t v12 = (uint64_t *)&v55;
      switch(HIBYTE(v56))
      {
        case 0xA:
          goto LABEL_87;
        case 0xB:
LABEL_4:
          BOOL v13 = (void)v55 == 0x745368637461503CLL && *(void *)((char *)&v55 + 3) == 0x3E70657453686374;
          uint64_t v14 = a1 + 112;
          if (!v13) {
            goto LABEL_86;
          }
          goto LABEL_136;
        case 0xC:
          goto LABEL_81;
        case 0xD:
LABEL_68:
          BOOL v27 = (void)v55 == 0x6E6F69746365533CLL && *(void *)((char *)&v55 + 5) == 0x3E706574536E6F69;
          uint64_t v14 = v6;
          if (v27) {
            goto LABEL_136;
          }
          if (HIBYTE(v56) == 10) {
            goto LABEL_87;
          }
          if (HIBYTE(v56) == 12) {
            goto LABEL_81;
          }
          if (HIBYTE(v56) != 13) {
            goto LABEL_132;
          }
          BOOL v28 = (void)v55 == 0x6E6F69746365533CLL && *(void *)((char *)&v55 + 5) == 0x3E657A69536E6F69;
          uint64_t v14 = a1 + 120;
          if (!v28) {
            goto LABEL_132;
          }
          goto LABEL_136;
        case 0xF:
          BOOL v22 = (void)v55 == 0x75746165466E493CLL && *(void *)((char *)&v55 + 7) == 0x3E7370614D657275;
          uint64_t v14 = a1 + 104;
          if (v22) {
            goto LABEL_136;
          }
LABEL_52:
          BOOL v23 = (void)v55 == 0x65726168536E493CLL && *(void *)((char *)&v55 + 7) == 0x3E73646E61426465;
          uint64_t v14 = a1 + 128;
          if (v23) {
            goto LABEL_136;
          }
          if (HIBYTE(v56) != 15) {
            goto LABEL_86;
          }
          BOOL v24 = (void)v55 == 0x61526E7261654C3CLL && *(void *)((char *)&v55 + 7) == 0x3E66656F43657461;
          BOOL v25 = (float *)(a1 + 264);
          if (!v24) {
            goto LABEL_132;
          }
          goto LABEL_138;
        case 0x10:
          BOOL v26 = (void)v55 == 0x7461654674754F3CLL && *((void *)&v55 + 1) == 0x3E7370614D657275;
          uint64_t v14 = a1 + 108;
          if (!v26)
          {
            switch(HIBYTE(v56))
            {
              case 0xA:
                goto LABEL_87;
              case 0xB:
                goto LABEL_4;
              case 0xC:
                goto LABEL_81;
              case 0xD:
                goto LABEL_68;
              case 0xF:
                goto LABEL_52;
              default:
                goto LABEL_132;
            }
          }
          goto LABEL_136;
        case 0x13:
          goto LABEL_125;
        default:
          goto LABEL_132;
      }
    }
    uint64_t v15 = *((void *)&v55 + 1);
    if (*((void *)&v55 + 1) == 15)
    {
      BOOL v16 = *(void *)v55 == 0x75746165466E493CLL && *(void *)(v55 + 7) == 0x3E7370614D657275;
      uint64_t v14 = a1 + 104;
      if (v16) {
        goto LABEL_136;
      }
    }
    if (*((void *)&v55 + 1) == 16)
    {
      BOOL v17 = *(void *)v55 == 0x7461654674754F3CLL && *(void *)(v55 + 8) == 0x3E7370614D657275;
      uint64_t v14 = a1 + 108;
      if (v17) {
        goto LABEL_136;
      }
      uint64_t v15 = *((void *)&v55 + 1);
    }
    if (v15 == 11)
    {
      BOOL v18 = *(void *)v55 == 0x745368637461503CLL && *(void *)(v55 + 3) == 0x3E70657453686374;
      uint64_t v14 = a1 + 112;
      if (v18) {
        goto LABEL_136;
      }
      uint64_t v15 = *((void *)&v55 + 1);
    }
    if (v15 != 13) {
      goto LABEL_41;
    }
    BOOL v19 = *(void *)v55 == 0x6E6F69746365533CLL && *(void *)(v55 + 5) == 0x3E706574536E6F69;
    uint64_t v14 = v6;
    if (v19) {
      goto LABEL_136;
    }
    uint64_t v15 = *((void *)&v55 + 1);
    if (*((void *)&v55 + 1) != 13) {
      goto LABEL_41;
    }
    BOOL v20 = *(void *)v55 == 0x6E6F69746365533CLL && *(void *)(v55 + 5) == 0x3E657A69536E6F69;
    uint64_t v14 = a1 + 120;
    if (v20) {
      goto LABEL_136;
    }
    if ((v56 & 0x8000000000000000) == 0)
    {
      if (HIBYTE(v56) == 10) {
        goto LABEL_87;
      }
      if (HIBYTE(v56) != 12) {
        goto LABEL_132;
      }
LABEL_81:
      BOOL v29 = (void)v55 == 0x537265746C69463CLL && DWORD2(v55) == 1046837865;
      uint64_t v14 = a1 + 124;
      if (v29) {
        goto LABEL_136;
      }
      if ((v56 & 0x8000000000000000) == 0)
      {
LABEL_86:
        if (HIBYTE(v56) != 10) {
          goto LABEL_132;
        }
LABEL_87:
        BOOL v30 = (void)v55 == 0x7A69536C6F6F503CLL && WORD4(v55) == 15973;
        uint64_t v14 = v7;
        if (v30) {
          goto LABEL_136;
        }
        if ((v56 & 0x8000000000000000) == 0)
        {
          if (HIBYTE(v56) != 10) {
            goto LABEL_132;
          }
          BOOL v31 = (void)v55 == 0x6574536C6F6F503CLL && WORD4(v55) == 15984;
          uint64_t v14 = v52;
          if (!v31) {
            goto LABEL_132;
          }
          goto LABEL_136;
        }
LABEL_111:
        uint64_t v15 = *((void *)&v55 + 1);
        if (*((void *)&v55 + 1) != 10) {
          goto LABEL_117;
        }
        BOOL v34 = *(void *)v55 == 0x6574536C6F6F503CLL && *(_WORD *)(v55 + 8) == 15984;
        uint64_t v14 = v52;
        if (!v34)
        {
          if (v56 < 0)
          {
LABEL_117:
            if (v15 == 15)
            {
              BOOL v35 = *(void *)v55 == 0x61526E7261654C3CLL && *(void *)(v55 + 7) == 0x3E66656F43657461;
              BOOL v25 = (float *)(a1 + 264);
              if (!v35)
              {
                uint64_t v15 = *((void *)&v55 + 1);
                goto LABEL_123;
              }
LABEL_138:
              kaldi::ReadBasicType<float>(a2, a3, v25, v10, v11);
              goto LABEL_139;
            }
LABEL_123:
            if (v15 == 19)
            {
              uint64_t v12 = (uint64_t *)v55;
LABEL_125:
              uint64_t v36 = *v12;
              uint64_t v37 = v12[1];
              uint64_t v38 = *(uint64_t *)((char *)v12 + 11);
              BOOL v39 = v36 == 0x61654C736169423CLL && v37 == 0x6F43657461526E72;
              BOOL v40 = v39 && v38 == 0x3E66656F43657461;
              BOOL v25 = (float *)(a1 + 268);
              if (v40) {
                goto LABEL_138;
              }
            }
          }
LABEL_132:
          BOOL v41 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v55, "<MaxNorm>");
          BOOL v25 = (float *)(a1 + 280);
          if (!v41)
          {
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v55, "<GradientNormType>"))
            {
              __p[0] = 0;
              __p[1] = 0;
              uint64_t v54 = 0;
              kaldi::ReadToken(a2, a3, (uint64_t)__p, v42, v43);
              *(_DWORD *)(a1 + 27std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
              if (SHIBYTE(v54) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_139;
            }
            BOOL v44 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v55, "<MaxGrad>");
            BOOL v25 = (float *)(a1 + 276);
            if (!v44)
            {
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 332);
              uint64_t v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
              if (v56 >= 0) {
                int v50 = &v55;
              }
              else {
                int v50 = (long long *)v55;
              }
              if (v56 >= 0) {
                uint64_t v51 = HIBYTE(v56);
              }
              else {
                uint64_t v51 = *((void *)&v55 + 1);
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)v50, v51);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
            }
          }
          goto LABEL_138;
        }
        goto LABEL_136;
      }
    }
    else
    {
LABEL_41:
      if (v15 != 12) {
        goto LABEL_100;
      }
      BOOL v21 = *(void *)v55 == 0x537265746C69463CLL && *(_DWORD *)(v55 + 8) == 1046837865;
      uint64_t v14 = a1 + 124;
      if (v21) {
        goto LABEL_136;
      }
    }
    uint64_t v15 = *((void *)&v55 + 1);
LABEL_100:
    if (v15 == 15)
    {
      BOOL v32 = *(void *)v55 == 0x65726168536E493CLL && *(void *)(v55 + 7) == 0x3E73646E61426465;
      uint64_t v14 = a1 + 128;
      if (v32) {
        goto LABEL_136;
      }
      uint64_t v15 = *((void *)&v55 + 1);
    }
    if (v15 != 10) {
      goto LABEL_117;
    }
    BOOL v33 = *(void *)v55 == 0x7A69536C6F6F503CLL && *(_WORD *)(v55 + 8) == 15973;
    uint64_t v14 = v7;
    if (!v33) {
      goto LABEL_111;
    }
LABEL_136:
    kaldi::ReadBasicType<int>(a2, a3, v14, v10, v11);
LABEL_139:
    if (SHIBYTE(v56) < 0) {
      operator delete((void *)v55);
    }
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_142;
    }
  }
}

void sub_11C764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 - 89) < 0) {
    operator delete(*(void **)(v22 - 112));
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::ReadBasicType<char>(void *a1, int a2, unsigned char *a3, uint64_t a4, const char *a5)
{
  if (!a3) {
    kaldi::KaldiAssertFailure_((kaldi *)"ReadBasicType", "../subproject/libquasar/libkaldi/src/base/io-funcs-inl.h", (const char *)&stru_20.vmsize + 3, "t != NULL", a5);
  }
  if (a2)
  {
    int v7 = std::istream::get();
    if (v7 == -1)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13, "ReadBasicType", "../subproject/libquasar/libkaldi/src/base/io-funcs-inl.h", 73);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "ReadBasicType: encountered end of stream.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
    }
    if (v7 << 24 != 0x1000000)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13, "ReadBasicType", "../subproject/libquasar/libkaldi/src/base/io-funcs-inl.h", 79);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"ReadBasicType: did not get expected integer type, ", 50);
      uint64_t v10 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" vs. ", 5);
      uint64_t v11 = (void *)std::ostream::operator<<();
      uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)".  You can change this code to successfully", 43);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, " read it later, if needed.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
    }
    uint64_t result = std::istream::read();
  }
  else
  {
    LOWORD(v13[0]) = 0;
    uint64_t result = std::istream::operator>>();
    *a3 = 0;
  }
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13, "ReadBasicType", "../subproject/libquasar/libkaldi/src/base/io-funcs-inl.h", 97);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Read failure in ReadBasicType, file position is ", 48);
    std::istream::tellg();
    uint64_t v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", next char is ", 15);
    std::istream::peek();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  return result;
}

void sub_11CA58(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::WriteConfig(uint64_t a1, void *a2, const char *a3, uint64_t a4, const char *a5)
{
  kaldi::WriteToken(a2, a3, (kaldi *)"<InFeatureMaps>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<OutFeatureMaps>", v8, v9);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PatchStep>", v10, v11);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<SectionStep>", v12, v13);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<SectionSize>", v14, v15);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FilterSize>", v16, v17);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<InSharedBands>", v18, v19);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PoolSize>", v20, v21);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PoolStep>", v22, v23);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", v24, v25);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<BiasLearnRateCoef>", v26, v27);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxNorm>", v28, v29);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v30, v31);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 272), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v32, v33);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v34, v35);
  return kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
}

void sub_11CCB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::WriteData(void *a1, void *a2, const char *a3, int a4)
{
  (*(void (**)(void *))(*a1 + 168))(a1);
  kaldi::WriteBasicType<char>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<Filters>", v8, v9);
  uint64_t v11 = a1[19];
  if (!v11) {
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 3, "filters_", v10);
  }
  kaldi::CuMatrixBase<float>::Write(v11, a2, (int)a3, a4);
  kaldi::WriteToken(a2, a3, (kaldi *)"<Bias>", v12, v13);
  uint64_t v16 = (_DWORD *)a1[20];
  if (!v16) {
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.offset + 3, "bias_", v15);
  }

  kaldi::CuVectorBase<float>::Write(v16, a2, (int)a3, v14, v15);
}

uint64_t kaldi::WriteBasicType<char>(void *a1, int a2)
{
  if (a2)
  {
    std::ostream::put();
    uint64_t result = std::ostream::write();
  }
  else
  {
    uint64_t v4 = (void *)std::ostream::operator<<();
    uint64_t result = (uint64_t)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" ", 1);
  }
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Write failure in WriteBasicType.");
  }
  return result;
}

void sub_11CE98(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::NumParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(void *)(a1 + 152);
  if (!v5) {
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 3, "filters_", a5);
  }
  uint64_t v6 = *(void *)(a1 + 160);
  if (!v6) {
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.offset + 3, "bias_", a5);
  }
  return (*(_DWORD *)(v6 + 16) + *(_DWORD *)(v5 + 16) * *(_DWORD *)(v5 + 20));
}

_DWORD *kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::GetParams(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  uint64_t v10 = (_DWORD *)a1[19];
  if (!v10) {
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 3, "filters_", v9);
  }
  int v11 = v10[4] * v10[5];
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  if (v11 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_6;
  }
  BOOL v17 = *(void **)a2;
  LODWORD(v18) = v11;
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v17, v10, v7, v8, v9);
  uint64_t v14 = (_DWORD *)a1[20];
  if (!v14) {
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.offset + 3, "bias_", v9);
  }
  int v15 = v14[4];
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  if ((v15 + v11) > *(_DWORD *)(a2 + 8)) {
LABEL_6:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v9);
  BOOL v17 = (void *)(*(void *)a2 + 4 * v11);
  LODWORD(v18) = v15;
  return kaldi::CuVectorBase<float>::CopyToVec<float>(v14, (uint64_t)&v17, v12, v13, v9);
}

_DWORD *kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::SetParams(void *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(void *))(*a1 + 176))(a1)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", (const char *)&stru_2E8.nreloc, "wei_src.Dim() == NumParams()", v5);
  }
  uint64_t v6 = a1[19];
  if (!v6) {
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 7, "filters_", v5);
  }
  int v7 = *(_DWORD *)(v6 + 16) * *(_DWORD *)(v6 + 20);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  if (v7 > *(_DWORD *)(a2 + 8)) {
    goto LABEL_7;
  }
  uint64_t v13 = *(char **)a2;
  LODWORD(v14) = v7;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec(v6, &v13);
  uint64_t v10 = (_DWORD *)a1[20];
  if (!v10) {
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.align + 3, "bias_", v5);
  }
  int v11 = v10[4];
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  if ((v11 + v7) > *(_DWORD *)(a2 + 8)) {
LABEL_7:
  }
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v5);
  uint64_t v13 = (char *)(*(void *)a2 + 4 * v7);
  LODWORD(v14) = v11;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v10, (uint64_t)&v13, v8, v9, v5);
}

float kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 84)) {
    return *(float *)(a1 + 56);
  }
  uint64_t v2 = *(void *)(a1 + 312);
  unint64_t v3 = *(void *)(a1 + 320) - v2;
  if (!v3) {
    return NAN;
  }
  unint64_t v4 = v3 >> 2;
  if ((int)v4 <= a2) {
    return NAN;
  }
  int v5 = v4 - 1;
  if (a2 >= 0) {
    int v5 = a2;
  }
  return *(float *)(v2 + 4 * v5);
}

float kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::SumParams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6 = *(void *)(a1 + 152);
  if (!v6) {
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 3, "filters_", a5);
  }
  float v8 = kaldi::CuMatrixBase<float>::Sum(v6, a2, a3, a4, a5);
  uint64_t v9 = *(void *)(a1 + 160);
  if (!v9) {
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.offset + 3, "bias_", v7);
  }
  float v10 = v8;
  double v11 = kaldi::CuVectorBase<float>::Sum(v9);
  return v10 + *(float *)&v11;
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::PerturbParams(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v6 = *(void *)(a1 + 152);
  if (!v6) {
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 7, "filters_", a6);
  }
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v19, *(unsigned int *)(v6 + 20), *(unsigned int *)(v6 + 16), 1u, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v19);
  uint64_t v11 = *(void *)(a1 + 152);
  if (!v11) {
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 7, "filters_", v10);
  }
  kaldi::CuMatrixBase<float>::AddMat(v11, (uint64_t)v19, 111, v9, v10, a2, 1.0);
  if (!*(void *)(a1 + 160)) {
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.align + 3, "bias_", v12);
  }
  kaldi::CuVector<float>::CuVector(v18);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v18);
  uint64_t v16 = *(void *)(a1 + 160);
  if (!v16) {
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.align + 3, "bias_", v15);
  }
  kaldi::CuVectorBase<float>::AddVec(v16, (uint64_t)v18, v13, v14, v15, a2, 1.0);
  kaldi::CuVector<float>::~CuVector(v18);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v19);
}

void sub_11D3B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::Info(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v32, " ");
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ParamsString(a1);
  if ((v31 & 0x80u) == 0) {
    unint64_t v4 = v30;
  }
  else {
    unint64_t v4 = (void **)v30[0];
  }
  if ((v31 & 0x80u) == 0) {
    std::string::size_type v5 = v31;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v30[1];
  }
  uint64_t v6 = std::string::append(&v32, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  float v8 = std::string::append(&v33, "\n  filters");
  long long v10 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v10;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  uint64_t v11 = *(void *)(a1 + 152);
  if (!v11) {
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 3, "filters_", v9);
  }
  kaldi::nnet1::MomentStatistics<float>(v11);
  if ((v29 & 0x80u) == 0) {
    uint64_t v12 = v28;
  }
  else {
    uint64_t v12 = (void **)v28[0];
  }
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v13 = v29;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v28[1];
  }
  uint64_t v14 = std::string::append(&v34, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  uint64_t v16 = std::string::append(&v35, "\n  bias");
  long long v21 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v21;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  uint64_t v22 = *(_DWORD **)(a1 + 160);
  if (!v22) {
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.offset + 3, "bias_", v20);
  }
  kaldi::nnet1::MomentStatistics<float>(v22, v17, v18, v19, v20);
  if ((v27 & 0x80u) == 0) {
    BOOL v23 = __p;
  }
  else {
    BOOL v23 = (void **)__p[0];
  }
  if ((v27 & 0x80u) == 0) {
    std::string::size_type v24 = v27;
  }
  else {
    std::string::size_type v24 = (std::string::size_type)__p[1];
  }
  BOOL v25 = std::string::append(&v36, (const std::string::value_type *)v23, v24);
  *a2 = *v25;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if ((char)v27 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if ((char)v29 < 0) {
    operator delete(v28[0]);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if ((char)v31 < 0) {
    operator delete(v30[0]);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
}

void sub_11D618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v45 - 41) < 0) {
    operator delete(*(void **)(v45 - 64));
  }
  if (*(char *)(v45 - 73) < 0) {
    operator delete(*(void **)(v45 - 96));
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ParamsString(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v4);
  (*(void (**)(uint64_t, void *, void))(*(void *)a1 + 168))(a1, v4, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" , # of sections: ", 18);
  uint64_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", section size after pooling: ", 30);
  std::ostream::operator<<();
  std::stringbuf::str();
  if (v5 < 0) {
    operator delete((void *)v4[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_11D868(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v57, " ");
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ParamsString(a1);
  if ((v56 & 0x80u) == 0) {
    unint64_t v4 = v55;
  }
  else {
    unint64_t v4 = (void **)v55[0];
  }
  if ((v56 & 0x80u) == 0) {
    std::string::size_type v5 = v56;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v55[1];
  }
  uint64_t v6 = std::string::append(&v57, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  float v8 = std::string::append(&v58, "\n  filters_grad");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((void *)(a1 + 168), v10, v11, v12, v13);
  if ((v54 & 0x80u) == 0) {
    uint64_t v14 = v53;
  }
  else {
    uint64_t v14 = (void **)v53[0];
  }
  if ((v54 & 0x80u) == 0) {
    std::string::size_type v15 = v54;
  }
  else {
    std::string::size_type v15 = (std::string::size_type)v53[1];
  }
  uint64_t v16 = std::string::append(&v59, (const std::string::value_type *)v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  uint64_t v18 = std::string::append(&v60, ", lr-coef ");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v52 & 0x80u) == 0) {
    uint64_t v20 = v51;
  }
  else {
    uint64_t v20 = (void **)v51[0];
  }
  if ((v52 & 0x80u) == 0) {
    std::string::size_type v21 = v52;
  }
  else {
    std::string::size_type v21 = (std::string::size_type)v51[1];
  }
  uint64_t v22 = std::string::append(&v61, (const std::string::value_type *)v20, v21);
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v24 = std::string::append(&v62, ", max-norm ");
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v63.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v50 & 0x80u) == 0) {
    uint64_t v26 = v49;
  }
  else {
    uint64_t v26 = (void **)v49[0];
  }
  if ((v50 & 0x80u) == 0) {
    std::string::size_type v27 = v50;
  }
  else {
    std::string::size_type v27 = (std::string::size_type)v49[1];
  }
  uint64_t v28 = std::string::append(&v63, (const std::string::value_type *)v26, v27);
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  uint64_t v30 = std::string::append(&v64, "\n  bias_grad");
  long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v65.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((void *)(a1 + 192), v32, v33, v34, v35);
  if ((v48 & 0x80u) == 0) {
    std::string v36 = v47;
  }
  else {
    std::string v36 = (void **)v47[0];
  }
  if ((v48 & 0x80u) == 0) {
    std::string::size_type v37 = v48;
  }
  else {
    std::string::size_type v37 = (std::string::size_type)v47[1];
  }
  uint64_t v38 = std::string::append(&v65, (const std::string::value_type *)v36, v37);
  long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v66.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  BOOL v40 = std::string::append(&v66, ", lr-coef ");
  long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v67.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v46 & 0x80u) == 0) {
    uint64_t v42 = __p;
  }
  else {
    uint64_t v42 = (void **)__p[0];
  }
  if ((v46 & 0x80u) == 0) {
    std::string::size_type v43 = v46;
  }
  else {
    std::string::size_type v43 = (std::string::size_type)__p[1];
  }
  BOOL v44 = std::string::append(&v67, (const std::string::value_type *)v42, v43);
  *a2 = *v44;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  if ((char)v46 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  if ((char)v48 < 0) {
    operator delete(v47[0]);
  }
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  if ((char)v50 < 0) {
    operator delete(v49[0]);
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  if ((char)v52 < 0) {
    operator delete(v51[0]);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if ((char)v54 < 0) {
    operator delete(v53[0]);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if ((char)v56 < 0) {
    operator delete(v55[0]);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
}

void sub_11DC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v73 - 57) < 0) {
    operator delete(*(void **)(v73 - 80));
  }
  if (*(char *)(v73 - 89) < 0) {
    operator delete(*(void **)(v73 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v73 - 121) < 0) {
    operator delete(*(void **)(v73 - 144));
  }
  if (*(char *)(v73 - 153) < 0) {
    operator delete(*(void **)(v73 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v73 - 185) < 0) {
    operator delete(*(void **)(v73 - 208));
  }
  if (*(char *)(v73 - 217) < 0) {
    operator delete(*(void **)(v73 - 240));
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a71 < 0) {
    operator delete(a66);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a64 < 0) {
    operator delete(a59);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  _Unwind_Resume(a1);
}

void sub_11DDB0()
{
}

void sub_11DDB8()
{
}

void sub_11DDC0()
{
}

void sub_11DDC8()
{
}

void sub_11DDD0()
{
}

void sub_11DDD8()
{
}

void sub_11DDE0()
{
}

void sub_11DDE8()
{
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::PropagateFncDirect(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitOutBuffers(a1);
  if (*(int *)(a1 + 128) <= 0) {
    float v8 = 0.0;
  }
  else {
    float v8 = 1.0;
  }
  uint64_t v36 = a2;
  kaldi::CuMatrix<float>::Resize(*(void *)(a1 + 384) + 48 * a4, *(unsigned int *)(a2 + 20), (*(_DWORD *)(a1 + 108) * *(_DWORD *)(a1 + 120)), 3u, 0);
  if (*(int *)(a1 + 144) >= 1)
  {
    int v9 = 0;
    do
    {
      int v10 = *(_DWORD *)(a1 + 120);
      if (*(int *)(a1 + 128) >= 1)
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(v10 * v9 * *(_DWORD *)(a1 + 108)), *(_DWORD *)(a1 + 108));
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, v36, 0, *(_DWORD *)(v36 + 20), (const char *)(*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 140)), *(_DWORD *)(a1 + 128) * *(_DWORD *)(a1 + 104));
        uint64_t v12 = *(void *)(a1 + 152);
        if (!v12) {
          kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 7, "filters_", v11);
        }
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v40, v12, *(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 124), *(_DWORD *)(a1 + 128) * *(_DWORD *)(a1 + 104), (const char *)(*(_DWORD *)(a1 + 108) * v9), *(_DWORD *)(a1 + 108));
        kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v46, (uint64_t)&v43, CblasNoTrans, (uint64_t)&v40, &stru_68.sectname[7], 1.0, 0.0);
        int v13 = *(_DWORD *)(a1 + 120);
        if (v13 >= 2)
        {
          for (int i = 1; i < v13; ++i)
          {
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v37, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(*(_DWORD *)(a1 + 108) * (i + v9 * v13)), *(_DWORD *)(a1 + 108));
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v37, (uint64_t)&v46, 111, v15, v16);
            std::string::size_type v37 = off_262D80;
            long long v38 = 0u;
            long long v39 = 0u;
            fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v37);
            int v13 = *(_DWORD *)(a1 + 120);
          }
        }
        BOOL v40 = off_262D80;
        long long v41 = 0u;
        long long v42 = 0u;
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v40);
        std::string::size_type v43 = off_262D80;
        long long v44 = 0u;
        long long v45 = 0u;
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v43);
        unsigned __int8 v46 = off_262D80;
        long long v47 = 0u;
        long long v48 = 0u;
        fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v46);
        int v10 = *(_DWORD *)(a1 + 120);
      }
      if (v10 >= 1)
      {
        int v17 = 0;
        do
        {
          uint64_t v18 = *(void *)(a1 + 384) + 48 * a4;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, v18, 0, *(_DWORD *)(v18 + 20), (const char *)(*(_DWORD *)(a1 + 108) * v17), *(_DWORD *)(a1 + 108));
          uint64_t v20 = *(void *)(a1 + 160);
          if (!v20) {
            kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.align + 3, "bias_", v19);
          }
          kaldi::CuSubVector<float>::CuSubVector(&v43, v20, *(_DWORD *)(a1 + 108) * v9, *(_DWORD *)(a1 + 108), v19);
          kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)&v46, (uint64_t)&v43, v21, v22, v23, 1.0, v8);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, v36, 0, *(_DWORD *)(v36 + 20), (const char *)((*(_DWORD *)(a1 + 116) * v9 + *(_DWORD *)(a1 + 112) * v17)* *(_DWORD *)(a1 + 104)), *(_DWORD *)(a1 + 124) * *(_DWORD *)(a1 + 104));
          uint64_t v25 = *(void *)(a1 + 152);
          if (!v25) {
            kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 7, "filters_", v24);
          }
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v40, v25, 0, *(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 124), (const char *)(*(_DWORD *)(a1 + 108) * v9), *(_DWORD *)(a1 + 108));
          kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v46, (uint64_t)&v43, CblasNoTrans, (uint64_t)&v40, &stru_68.sectname[7], 1.0, 1.0);
          BOOL v40 = off_262D80;
          long long v41 = 0u;
          long long v42 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v40);
          std::string::size_type v43 = off_262D80;
          long long v44 = 0u;
          long long v45 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v43);
          unsigned __int8 v46 = off_262D80;
          long long v47 = 0u;
          long long v48 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v46);
          ++v17;
        }
        while (v17 < *(_DWORD *)(a1 + 120));
      }
      int v26 = *(_DWORD *)(a1 + 148);
      if (v26 >= 1)
      {
        for (int j = 0; j < v26; ++j)
        {
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, a3, 0, *(_DWORD *)(a3 + 20), (const char *)(*(_DWORD *)(a1 + 108) * (j + v26 * v9)), *(_DWORD *)(a1 + 108));
          uint64_t v28 = *(void *)(a1 + 384) + 48 * a4;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, v28, 0, *(_DWORD *)(v28 + 20), (const char *)(*(_DWORD *)(a1 + 136) * j * *(_DWORD *)(a1 + 108)), *(_DWORD *)(a1 + 108));
          kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v46, (uint64_t)&v43, 111, v29, v30);
          std::string::size_type v43 = off_262D80;
          long long v44 = 0u;
          long long v45 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v43);
          if (*(int *)(a1 + 132) >= 2)
          {
            int v31 = 1;
            do
            {
              uint64_t v32 = *(void *)(a1 + 384) + 48 * a4;
              kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, v32, 0, *(_DWORD *)(v32 + 20), (const char *)((v31 + j * *(_DWORD *)(a1 + 136)) * *(_DWORD *)(a1 + 108)), *(_DWORD *)(a1 + 108));
              kaldi::CuMatrixBase<float>::Max((uint64_t)&v46, (uint64_t)&v43, v33, v34, v35);
              std::string::size_type v43 = off_262D80;
              long long v44 = 0u;
              long long v45 = 0u;
              fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v43);
              ++v31;
            }
            while (v31 < *(_DWORD *)(a1 + 132));
          }
          unsigned __int8 v46 = off_262D80;
          long long v47 = 0u;
          long long v48 = 0u;
          fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&v46);
          int v26 = *(_DWORD *)(a1 + 148);
        }
      }
      ++v9;
    }
    while (v9 < *(_DWORD *)(a1 + 144));
  }
}

void sub_11E3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void (**a22)(),uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void (**a27)())
{
  a22 = off_262D80;
  _OWORD *v28 = 0u;
  v28[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a22);
  a27 = off_262D80;
  _OWORD *v27 = 0u;
  v27[1] = 0u;
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(&a27);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::GetGradient(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v42, *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v41, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0, 0);
  (*(void (**)(uint64_t, uint64_t, unsigned char *, void))(*(void *)v8 + 112))(v8, a2, v42, 0);
  (*(void (**)(uint64_t, uint64_t, unsigned char *, uint64_t, unsigned char *, void))(*(void *)v8 + 128))(v8, a2, v42, a3, v41, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)v8 + 232))(v8, a2, a3, 0, 0);
  uint64_t v10 = a1[19];
  if (!v10) {
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 3, "filters_", v9);
  }
  int v12 = *(_DWORD *)(v10 + 16);
  int v11 = *(_DWORD *)(v10 + 20);
  uint64_t v13 = (*(uint64_t (**)(void *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a4, v13, 1, v14, v15);
  int v19 = v12 * v11;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  if (v19 > *(_DWORD *)(a4 + 8)) {
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)&stru_1F8.size + 6, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v18);
  }
  long long v38 = *(void **)a4;
  LODWORD(v39) = v19;
  uint64_t v20 = (_DWORD *)kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(v8, 0, v16, v17, v18);
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v38, v20, v21, v22, v23);
  uint64_t v27 = a1[20];
  if (!v27)
  {
    uint64_t v34 = "bias_";
    std::string v35 = (unsigned char *)(&stru_B8 + 51);
    uint64_t v36 = "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h";
    std::string::size_type v37 = "Bias";
    goto LABEL_10;
  }
  int v28 = *(_DWORD *)(v27 + 16);
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  if ((v28 + v19) > *(_DWORD *)(a4 + 8))
  {
    uint64_t v34 = "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMa"
          "trixIndexT>(t.Dim())";
    std::string v35 = (char *)&stru_1F8.size + 6;
    uint64_t v36 = "../subproject/libquasar/libkaldi/src/matrix/kaldi-vector.h";
    std::string::size_type v37 = "SubVector";
LABEL_10:
    kaldi::KaldiAssertFailure_((kaldi *)v37, v36, v35, v34, v26);
  }
  long long v38 = (void *)(*(void *)a4 + 4 * v19);
  LODWORD(v39) = v28;
  uint64_t v29 = (_DWORD *)kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(v8, 0, v24, v25, v26);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v29, (uint64_t)&v38, v30, v31, v32);
  (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v41);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v42);
}

void sub_11E7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(void *)(a1 + 168);
  if (a2 >= (unint64_t)((*(void *)(a1 + 176) - v5) >> 3)) {
    kaldi::KaldiAssertFailure_((kaldi *)"FiltersGrad", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.flags + 3, "filters_grad_.size() > i", a5);
  }
  uint64_t result = *(void *)(v5 + 8 * a2);
  if (!result) {
    kaldi::KaldiAssertFailure_((kaldi *)"FiltersGrad", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.reserved1, "filters_grad_[i]", a5);
  }
  return result;
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5 = *(void *)(a1 + 192);
  if (a2 >= (unint64_t)((*(void *)(a1 + 200) - v5) >> 3)) {
    kaldi::KaldiAssertFailure_((kaldi *)"BiasGrad", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.reserved3 + 1, "bias_grad_.size() > i", a5);
  }
  uint64_t result = *(void *)(v5 + 8 * a2);
  if (!result) {
    kaldi::KaldiAssertFailure_((kaldi *)"BiasGrad", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.reserved3 + 2, "bias_grad_[i]", a5);
  }
  return result;
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 276) = a3;
  *(_DWORD *)(result + 27std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a2;
  *(unsigned char *)(result + 480) = 0;
  return result;
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::NormalizeGradients(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  float v7 = a6;
  int v9 = *(_DWORD *)(a1 + 272);
  if (v9 == 3)
  {
    if (a6 >= 0.0 && a6 <= 1.0)
    {
      uint64_t v16 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, a2, a3, a4, a5);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v16, *(void *)(a1 + 216) + 48 * a2, v7);
      uint64_t v20 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, a2, v17, v18, v19);
      uint64_t v24 = *(void *)(a1 + 240) + 32 * a2;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v20, v24, v7, v21, v22, v23);
    }
  }
  else if (v9 == 2)
  {
    if (a6 > 0.0)
    {
      uint64_t v25 = a2;
      if (*(unsigned char *)(a1 + 84)) {
        float v7 = (float)*(int *)(*(void *)(a1 + 288) + 4 * a2) * a6;
      }
      uint64_t v26 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, a2, a3, a4, a5);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v26, (unsigned int *)(*(void *)(a1 + 216) + 48 * (int)v25), v7, v27, v28, v29);
      uint64_t v33 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, a2, v30, v31, v32);
      std::string::size_type v37 = (_DWORD *)(*(void *)(a1 + 240) + 32 * v25);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v33, v37, v34, v35, v36, v7);
    }
  }
  else if (v9 == 1 && a6 > 0.0)
  {
    if (*(unsigned char *)(a1 + 84)) {
      float v7 = (float)*(int *)(*(void *)(a1 + 288) + 4 * a2) * a6;
    }
    uint64_t v10 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, a2, a3, a4, a5);
    kaldi::nnet1::UpdatableComponent::ClipGradient(v10, v7);
    uint64_t v14 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, a2, v11, v12, v13);
    kaldi::nnet1::UpdatableComponent::ClipGradient(v14, v7);
  }
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  uint64_t v9 = *(void *)(a1 + 160);
  if (!v9) {
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.align + 3, "bias_", v8);
  }
  uint64_t v10 = *(void *)(a1 + 152);
  if (!v10) {
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 7, "filters_", v8);
  }
  *a3 = *(_DWORD *)(v9 + 16) + *(_DWORD *)(v10 + 16) * *(_DWORD *)(v10 + 20);
  uint64_t v11 = *(void *)(a1 + 176) - *(void *)(a1 + 168);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 200) - *(void *)(a1 + 192);
    if (v12)
    {
      uint64_t v13 = v11 >> 3;
      uint64_t v14 = v12 >> 3;
      if (*(_DWORD *)(a1 + 80) == 1) {
        int v15 = 0;
      }
      else {
        int v15 = *(_DWORD *)(a1 + 80);
      }
      uint64_t v16 = v14 - 1;
      if (v13 - 1 != v15 || v16 != v15)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v30, "CountZeroCorr", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 883);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Unexpected mismatch in indexes: ", 32);
        uint64_t v28 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"  ", 2);
        uint64_t v29 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"  ", 2);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v30);
      }
      uint64_t v18 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, v15, v6, v7, v8);
      int v23 = kaldi::CuMatrixBase<float>::CountZeros(v18, v19, v20, v21, v22);
      uint64_t v27 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, v15, v24, v25, v26);
      LODWORD(v11) = kaldi::CuVectorBase<float>::CountZeros(v27) + v23;
    }
    else
    {
      LODWORD(v11) = 0;
    }
  }
  *a2 = v11;
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(uint64_t a1)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitOutBuffers(a1);
  int v2 = *(_DWORD *)(a1 + 80);
  if (v2 > 1) {
    int v3 = v2 + 1;
  }
  else {
    int v3 = 1;
  }
  if (!*(unsigned char *)(a1 + 480))
  {
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 408), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 360), v3);
    std::vector<BOOL>::resize(a1 + 456, v3, 0);
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 168), v3);
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize((uint64_t *)(a1 + 192), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 216), v3);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 240), v3);
    if (v3 >= 1) {
      operator new();
    }
    std::vector<int>::resize((std::vector<int> *)(a1 + 288), v3);
    *(unsigned char *)(a1 + 480) = 1;
  }
}

void sub_11EF1C()
{
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit()
{
}

void sub_11EFA4()
{
}

void non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit()
{
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit()
{
}

void sub_11F018()
{
}

void non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit()
{
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::ApplyCorr(uint64_t a1, int a2, float a3)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  uint64_t v9 = *(void *)(a1 + 152);
  if (!v9) {
    kaldi::KaldiAssertFailure_((kaldi *)"Filters", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.size + 7, "filters_", v8);
  }
  float v10 = -(float)(a3 * *(float *)(a1 + 264));
  uint64_t v11 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad(a1, a2, v6, v7, v8);
  kaldi::CuMatrixBase<float>::AddMat(v9, v11, 111, v12, v13, v10, 1.0);
  uint64_t v17 = *(void *)(a1 + 160);
  if (!v17) {
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.h", (const char *)&stru_B8.align + 3, "bias_", v16);
  }
  float v18 = *(float *)(a1 + 268) * (float)-a3;
  uint64_t v19 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad(a1, a2, v14, v15, v16);

  kaldi::CuVectorBase<float>::AddVec(v17, v19, v20, v21, v22, v18, 1.0);
}

uint64_t *kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::InitOutBuffers(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 80);
  if (v2 > 1) {
    int v3 = v2 + 1;
  }
  else {
    int v3 = 1;
  }
  unint64_t v4 = v3;
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 336), v3);
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 384), v4);

  return std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 432), v4);
}

double kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ConvolutionalMaxPoolingComponent(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 1std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  *(void *)(a1 + 48) = off_26E7B8;
  *(_OWORD *)(a1 + 56) = xmmword_20CEC0;
  *(_DWORD *)(a1 + 7std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = -1082130432;
  *(void *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 86) = 0;
  *(void *)a1 = off_2683F0;
  *(void *)(a1 + 88) = off_268528;
  *(void *)(a1 + 96) = off_268550;
  double result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 23std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + kaldi::nnet1::BidirectionalRecurrentComponent::CopyQuantized<kaldi::nnet1::Quantizable16BitComponentItf>((uint64_t)this - 168) = 0u;
  *(_OWORD *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(a1 + 264) = _D1;
  *(_DWORD *)(a1 + 27std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 276) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(void *)(a1 + 55std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 35std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 43std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(unsigned char *)(a1 + 480) = 0;
  return result;
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ConvolutionalMaxPoolingComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_264E70;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 3std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(void *)(result + 24) = 0;
  std::vector<kaldi::EventMap *>::__init_with_size[abi:ne180100]<kaldi::EventMap **,kaldi::EventMap **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = off_266498;
  *(void *)(a1 + 48) = off_26E7B8;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = off_2683F0;
  *(void *)(a1 + 88) = off_268528;
  *(void *)(a1 + 96) = off_268550;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 15std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 1--*(_DWORD *)(a9 + 60) = 0;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 168), (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)(a1 + 192), (uint64_t)(*(void *)(a2 + 200) - *(void *)(a2 + 192)) >> 3);
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 2++*(void *)(result + 24) = 0;
  *(void *)(a1 + 23std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 216), *(void *)(a2 + 216), *(void *)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 224) - *(void *)(a2 + 216)) >> 4));
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)(a1 + 240), *(void *)(a2 + 240), *(void *)(a2 + 248), (uint64_t)(*(void *)(a2 + 248) - *(void *)(a2 + 240)) >> 5);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(_DWORD *)(a1 + 27std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 288), *(const void **)(a2 + 288), *(void *)(a2 + 296), (uint64_t)(*(void *)(a2 + 296) - *(void *)(a2 + 288)) >> 2);
  *(void *)(a1 + 31std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 312), *(const void **)(a2 + 312), *(void *)(a2 + 320), (uint64_t)(*(void *)(a2 + 320) - *(void *)(a2 + 312)) >> 2);
  *(void *)(a1 + 55std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 35std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 43std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(unsigned char *)(a1 + 480) = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14, "ConvolutionalMaxPoolingComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 76);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
  }
  if (*(void *)(a2 + 152)) {
    operator new();
  }
  if (*(void *)(a2 + 160)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v7 = *(void *)(a1 + 168);
  uint64_t v6 = *(void *)(a1 + 176);
  if (v6 != v7)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(*(void *)(a2 + 168) + 8 * v8);
      if (v9) {
        kaldi::NewCuSubOrMat<float>(v9, *(unsigned __int8 *)(a1 + 16));
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
  }
  uint64_t v11 = *(void *)(a1 + 192);
  uint64_t v10 = *(void *)(a1 + 200);
  if (v10 != v11)
  {
    unint64_t v12 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 192) + 8 * v12)) {
        kaldi::NewCuSubOrVec<float>();
      }
      ++v12;
    }
    while (v12 < (v10 - v11) >> 3);
  }
  if (*(void *)(a2 + 496) != *(void *)(a2 + 488)) {
    kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator((void *)a1, (uint64_t *)(a1 + 488));
  }
  return a1;
}

void sub_11F79C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, void **a12, void **a13, uint64_t a14, uint64_t a15, void *a16)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v17);
  uint64_t v19 = (void *)*((void *)v16 + 57);
  if (v19) {
    operator delete(v19);
  }
  a16 = (void *)((char *)v16 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (void *)((char *)v16 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  uint64_t v20 = *a12;
  if (*a12)
  {
    *((void *)v16 + 40) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *a13;
  if (*a13)
  {
    *((void *)v16 + 37) = v21;
    operator delete(v21);
  }
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  uint64_t v22 = *((void *)v16 + 20);
  *((void *)v16 + 20) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](v18, 0);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a14);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(a15);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v16);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(void *a1, uint64_t *a2)
{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs((uint64_t)a1);
  uint64_t v7 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::FiltersGrad((uint64_t)a1, ((a1[22] - a1[21]) >> 3) - 1, v4, v5, v6);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v7);
  uint64_t v11 = kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>::BiasGrad((uint64_t)a1, ((a1[25] - a1[24]) >> 3) - 1, v8, v9, v10);

  return kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v11);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::~ConvolutionalMaxPoolingComponent(uint64_t a1)
{
  *(void *)a1 = off_2683F0;
  uint64_t v2 = a1 + 88;
  *(void *)(a1 + 88) = off_268528;
  uint64_t v3 = a1 + 96;
  *(void *)(a1 + 96) = off_268550;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 488));
  uint64_t v4 = *(void **)(a1 + 456);
  if (v4) {
    operator delete(v4);
  }
  uint64_t v8 = (void **)(a1 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v5 = *(void **)(a1 + 312);
  if (v5)
  {
    *(void *)(a1 + 320) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 288);
  if (v6)
  {
    *(void *)(a1 + 296) = v6;
    operator delete(v6);
  }
  uint64_t v8 = (void **)(a1 + 240);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 216);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 192);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 168);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v7 = *(void *)(a1 + 160);
  *(void *)(a1 + 1--*(_DWORD *)(a9 + 60) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 152), 0);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v3);
  fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>>>>>>::~MutableArcIterator(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  uint64_t vars8;

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::~ConvolutionalMaxPoolingComponent(a1);

  operator delete();
}

void non-virtual thunk to'kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::~ConvolutionalMaxPoolingComponent(uint64_t a1)
{
}

{
  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::~ConvolutionalMaxPoolingComponent(a1 - 96);
}

{
  uint64_t vars8;

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::~ConvolutionalMaxPoolingComponent(a1 - 88);

  operator delete();
}

{
  uint64_t vars8;

  kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::~ConvolutionalMaxPoolingComponent(a1 - 96);

  operator delete();
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::Copy()
{
}

void sub_11FC54()
{
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3, uint64_t a4, const char *a5)
{
  int v93 = 0x40000000;
  int v94 = -1073741824;
  int v92 = 1036831949;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a1 + 8);
  uint64_t v8 = (int *)(a1 + 116);
  *(void *)(a1 + 13std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0x100000001;
  uint64_t v9 = (int *)(a1 + 132);
  int v91 = -1;
  memset(v90, 0, sizeof(v90));
  uint64_t v10 = a2 + 4;
  uint64_t v11 = (int *)(a1 + 280);
  int v79 = (int *)(a1 + 128);
  uint64_t v80 = (int *)(a1 + 264);
  unint64_t v12 = (int *)(a1 + 124);
  int32x2_t v77 = (int *)(a1 + 136);
  uint64_t v78 = (int *)(a1 + 120);
  int v81 = (int *)(a1 + 112);
  uint64_t v82 = (int *)(a1 + 268);
  uint64_t v83 = (int *)(a1 + 108);
  uint64_t v13 = (int *)(a1 + 104);
  while (1)
  {
    if ((*((unsigned char *)v10 + *(void *)(*a2 - 24)) & 2) != 0)
    {
      int v52 = *(_DWORD *)(a1 + 8);
      int v53 = *(_DWORD *)(a1 + 12);
      int v55 = *(_DWORD *)(a1 + 104);
      int v54 = *(_DWORD *)(a1 + 108);
      int v56 = *(_DWORD *)(a1 + 132);
      int v57 = v52 / v55 - *(_DWORD *)(a1 + 128);
      int v58 = *(_DWORD *)(a1 + 120);
      int v59 = *(_DWORD *)(a1 + 136);
      int v60 = (v58 - v56) / v59 + 1;
      *(_DWORD *)(a1 + 148) = v60;
      int v61 = v54 * v60;
      int v62 = v53 / v61;
      *(_DWORD *)(a1 + 140) = v57;
      *(_DWORD *)(a1 + 144) = v53 / v61;
      if (v56 >= 1 && v58 >= v56)
      {
        if (v59 > 0)
        {
          if (v53 == v61 * v62)
          {
            if (v52 == v52 / v55 * v55)
            {
              if (*v12 + *v81 * (v58 - 1) + *v8 * (v62 - 1) <= v57)
              {
                if (v91 >= 1) {
                  kaldi::UniformRandomNumber::SetRandomSeeds(a3, v91);
                }
                kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v88, a3);
                kaldi::Matrix<float>::Matrix((uint64_t)&v84, ((*(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 124)) * *(_DWORD *)(a1 + 104)), (*(_DWORD *)(a1 + 144) * *(_DWORD *)(a1 + 108)), 0, 0);
                for (int i = 0; i < (int)kaldi::ContextDependency::CentralPosition((kaldi::ContextDependency *)&v84); ++i)
                {
                  for (unint64_t j = 0;
                        (uint64_t)j < (int)kaldi::ContextDependency::ContextWidth((kaldi::ContextDependency *)&v84);
                        ++j)
                  {
                    float v68 = *(float *)&v92;
                    kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v88, 0, v65, v66, v67);
                    if (v86 <= i || j >= v85) {
                      kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../subproject/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)&stru_68.addr, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v69);
                    }
                    *(float *)(v84 + 4 * i * v87 + 4 * j) = v68 * v70;
                  }
                }
                if (!*(void *)(a1 + 152)) {
                  operator new();
                }
                kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 275);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"pointer is thought to be un-initialized here", 44);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
              }
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 261);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"ConvolutionalMaxPoolingComponent: too few input bands to compute the output", 75);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
            }
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 257);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"ConvolutionalMaxPoolingComponent: input dim mismatch", 52);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
          }
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 254);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"ConvolutionalMaxPoolingComponent: output dim mismatch", 53);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
        }
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 251);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"ConvolutionalMaxPoolingComponent: Max pooling step must be >= 1", 63);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
      }
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 249);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"ConvolutionalMaxPoolingComponent: Invalid max pooling size", 58);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v90, a4, a5);
    if ((SHIBYTE(v90[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v90[2]))
      {
        case 9:
          goto LABEL_78;
        case 0xA:
          if (v90[0] == 0x61654D736169423CLL && LOWORD(v90[1]) == 15982) {
            goto LABEL_165;
          }
          BOOL v17 = v90[0] == 0x7A69536C6F6F503CLL && LOWORD(v90[1]) == 15973;
          float v18 = v9;
          if (v17) {
            goto LABEL_162;
          }
          BOOL v19 = v90[0] == 0x6574536C6F6F503CLL && LOWORD(v90[1]) == 15984;
          float v18 = v77;
          if (v19) {
            goto LABEL_162;
          }
          if ((v90[2] & 0x8000000000000000) != 0) {
            goto LABEL_33;
          }
LABEL_77:
          if (HIBYTE(v90[2]) != 9) {
            goto LABEL_189;
          }
LABEL_78:
          BOOL v35 = v90[0] == 0x6D726F4E78614D3CLL && LOBYTE(v90[1]) == 62;
          uint64_t v30 = v11;
          if (v35) {
            goto LABEL_166;
          }
          if ((v90[2] & 0x8000000000000000) != 0) {
            goto LABEL_83;
          }
          goto LABEL_189;
        case 0xB:
          if (v90[0] == 0x6E6152736169423CLL && *(void *)((char *)v90 + 3) == 0x3E65676E61527361) {
            goto LABEL_164;
          }
          BOOL v32 = v90[0] == 0x745368637461503CLL && *(void *)((char *)v90 + 3) == 0x3E70657453686374;
          goto LABEL_110;
        case 0xC:
          BOOL v36 = v90[0] == 0x537265746C69463CLL && LODWORD(v90[1]) == 1046837865;
          float v18 = v12;
          if (!v36) {
            goto LABEL_88;
          }
          goto LABEL_162;
        case 0xD:
          if (v90[0] == 0x74536D617261503CLL && *(void *)((char *)v90 + 5) == 0x3E7665646474536DLL) {
            goto LABEL_163;
          }
          BOOL v25 = v90[0] == 0x6E6F69746365533CLL && *(void *)((char *)v90 + 5) == 0x3E706574536E6F69;
          float v18 = v8;
          if (v25) {
            goto LABEL_162;
          }
          BOOL v26 = v90[0] == 0x6E6F69746365533CLL && *(void *)((char *)v90 + 5) == 0x3E657A69536E6F69;
          goto LABEL_123;
        case 0xF:
          BOOL v27 = v90[0] == 0x75746165466E493CLL && *(void *)((char *)v90 + 7) == 0x3E7370614D657275;
          float v18 = v13;
          if (v27) {
            goto LABEL_162;
          }
          BOOL v28 = v90[0] == 0x65726168536E493CLL && *(void *)((char *)v90 + 7) == 0x3E73646E61426465;
          float v18 = v79;
          if (v28) {
            goto LABEL_162;
          }
          BOOL v29 = v90[0] == 0x61526E7261654C3CLL && *(void *)((char *)v90 + 7) == 0x3E66656F43657461;
          uint64_t v30 = v80;
          if (v29) {
            goto LABEL_166;
          }
          if (HIBYTE(v90[2]) == 9) {
            goto LABEL_78;
          }
          if (HIBYTE(v90[2]) != 12) {
            goto LABEL_189;
          }
LABEL_88:
          std::string::size_type v37 = v90;
          goto LABEL_156;
        case 0x10:
          BOOL v38 = v90[0] == 0x7461654674754F3CLL && v90[1] == 0x3E7370614D657275;
          goto LABEL_101;
        case 0x13:
          BOOL v34 = v90[0] == 0x61654C736169423CLL
             && v90[1] == 0x6F43657461526E72
             && *(void *)((char *)&v90[1] + 3) == 0x3E66656F43657461;
          uint64_t v30 = v82;
          if (v34) {
            goto LABEL_166;
          }
          if (HIBYTE(v90[2]) != 12) {
            goto LABEL_77;
          }
          goto LABEL_88;
        default:
          goto LABEL_189;
      }
    }
    uint64_t v20 = v90[1];
    switch(v90[1])
    {
      case 0xALL:
        if (*(void *)v90[0] == 0x61654D736169423CLL && *(_WORD *)(v90[0] + 8) == 15982)
        {
LABEL_165:
          uint64_t v30 = &v94;
        }
        else
        {
          BOOL v22 = *(void *)v90[0] == 0x7A69536C6F6F503CLL && *(_WORD *)(v90[0] + 8) == 15973;
          float v18 = v9;
          if (v22) {
            goto LABEL_162;
          }
          if (v90[1] == 10)
          {
            BOOL v23 = *(void *)v90[0] == 0x6574536C6F6F503CLL && *(_WORD *)(v90[0] + 8) == 15984;
            float v18 = v77;
            if (v23) {
              goto LABEL_162;
            }
LABEL_33:
            uint64_t v20 = v90[1];
          }
LABEL_34:
          if (v20 == 15)
          {
LABEL_133:
            BOOL v45 = *(void *)v90[0] == 0x61526E7261654C3CLL && *(void *)(v90[0] + 7) == 0x3E66656F43657461;
            uint64_t v30 = v80;
            if (v45) {
              goto LABEL_166;
            }
            uint64_t v20 = v90[1];
          }
          if (v20 == 19)
          {
            BOOL v47 = *(void *)v90[0] == 0x61654C736169423CLL
               && *(void *)(v90[0] + 8) == 0x6F43657461526E72
               && *(void *)(v90[0] + 11) == 0x3E66656F43657461;
            uint64_t v30 = v82;
            if (v47) {
              goto LABEL_166;
            }
            uint64_t v20 = v90[1];
          }
          if (v20 != 9) {
            goto LABEL_154;
          }
          BOOL v48 = *(void *)v90[0] == 0x6D726F4E78614D3CLL && *(unsigned char *)(v90[0] + 8) == 62;
          uint64_t v30 = v11;
          if (!v48)
          {
LABEL_83:
            uint64_t v20 = v90[1];
LABEL_154:
            if (v20 != 12) {
              goto LABEL_189;
            }
LABEL_155:
            std::string::size_type v37 = (void *)v90[0];
LABEL_156:
            uint64_t v49 = *v37;
            int v50 = *((_DWORD *)v37 + 2);
            if (v49 != 0x536D6F646E61523CLL || v50 != 1046766949)
            {
LABEL_189:
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 237);
              int v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"Unknown token ", 14);
              if (v90[2] >= 0) {
                uint64_t v73 = v90;
              }
              else {
                uint64_t v73 = (void *)v90[0];
              }
              if (v90[2] >= 0) {
                uint64_t v74 = HIBYTE(v90[2]);
              }
              else {
                uint64_t v74 = v90[1];
              }
              int v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)v73, v74);
              int64x2_t v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)", a typo in config?", 19);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)" (ParamStddev|BiasMean|BiasRange|InFeatureMaps|OutFeatureMaps|PatchStep|SectionStep|SectionSize|FilterSize|LearnRateCoef|BiasLearnRateCoef|MaxNorm|RandomSeed)", 158);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v89);
            }
            float v18 = &v91;
LABEL_162:
            kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v18, v14, v15);
            goto LABEL_167;
          }
        }
LABEL_166:
        kaldi::ReadBasicType<float>(a2, 0, (float *)v30, v14, v15);
LABEL_167:
        std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
        break;
      case 0xBLL:
        if (*(void *)v90[0] != 0x6E6152736169423CLL || *(void *)(v90[0] + 3) != 0x3E65676E61527361)
        {
          BOOL v32 = *(void *)v90[0] == 0x745368637461503CLL && *(void *)(v90[0] + 3) == 0x3E70657453686374;
LABEL_110:
          float v18 = v81;
          if (!v32) {
            goto LABEL_189;
          }
          goto LABEL_162;
        }
LABEL_164:
        uint64_t v30 = &v93;
        goto LABEL_166;
      case 0xCLL:
        BOOL v39 = *(void *)v90[0] == 0x537265746C69463CLL && *(_DWORD *)(v90[0] + 8) == 1046837865;
        float v18 = v12;
        if (!v39) {
          goto LABEL_155;
        }
        goto LABEL_162;
      case 0xDLL:
        if (*(void *)v90[0] != 0x74536D617261503CLL || *(void *)(v90[0] + 5) != 0x3E7665646474536DLL)
        {
          BOOL v42 = *(void *)v90[0] == 0x6E6F69746365533CLL && *(void *)(v90[0] + 5) == 0x3E706574536E6F69;
          float v18 = v8;
          if (!v42)
          {
            BOOL v26 = *(void *)v90[0] == 0x6E6F69746365533CLL && *(void *)(v90[0] + 5) == 0x3E657A69536E6F69;
LABEL_123:
            float v18 = v78;
            if (!v26) {
              goto LABEL_189;
            }
          }
          goto LABEL_162;
        }
LABEL_163:
        uint64_t v30 = &v92;
        goto LABEL_166;
      case 0xFLL:
        BOOL v43 = *(void *)v90[0] == 0x75746165466E493CLL && *(void *)(v90[0] + 7) == 0x3E7370614D657275;
        float v18 = v13;
        if (!v43)
        {
          BOOL v44 = *(void *)v90[0] == 0x65726168536E493CLL && *(void *)(v90[0] + 7) == 0x3E73646E61426465;
          float v18 = v79;
          if (!v44) {
            goto LABEL_133;
          }
        }
        goto LABEL_162;
      case 0x10:
        BOOL v38 = *(void *)v90[0] == 0x7461654674754F3CLL && *(void *)(v90[0] + 8) == 0x3E7370614D657275;
LABEL_101:
        float v18 = v83;
        if (!v38) {
          goto LABEL_189;
        }
        goto LABEL_162;
      default:
        goto LABEL_34;
    }
  }
}

void sub_120B30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  JUMPOUT(0x120B5CLL);
}

void sub_120B4C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 121) < 0) {
    operator delete(*(void **)(v1 - 144));
  }
  _Unwind_Resume(exception_object);
}

void sub_120B58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::GaussRandomNumber::~GaussRandomNumber((kaldi::GaussRandomNumber *)va1);
  JUMPOUT(0x120B6CLL);
}

void kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a1 + 8);
  uint64_t v6 = a1 + 116;
  *(void *)(a1 + 13std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = 0x100000001;
  uint64_t v7 = a1 + 132;
  uint64_t v52 = a1 + 136;
  if (kaldi::Peek(a2, a3) != 60)
  {
LABEL_142:
    int v45 = *(_DWORD *)(a1 + 12);
    int v46 = *(_DWORD *)(a1 + 108);
    int v47 = *(_DWORD *)(a1 + 8) / *(_DWORD *)(a1 + 104) - *(_DWORD *)(a1 + 128);
    int v48 = (*(_DWORD *)(a1 + 120) - *(_DWORD *)(a1 + 132)) / *(_DWORD *)(a1 + 136) + 1;
    *(_DWORD *)(a1 + 148) = v48;
    *(unsigned char *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 140) = v47;
    *(_DWORD *)(a1 + 144) = v45 / (v46 * v48);
    LOBYTE(v55) = 0;
    kaldi::ReadBasicType<char>(a2, a3, &v55, v8, v9);
    if (!*(void *)(a1 + 152))
    {
      kaldi::ExpectToken(a2, a3, (kaldi *)"<Filters>");
      operator new();
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 348);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "pointer is thought to be un-initialized here");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  while (1)
  {
    long long v55 = 0uLL;
    uint64_t v56 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v55, v8, v9);
    if ((SHIBYTE(v56) & 0x80000000) == 0)
    {
      uint64_t v12 = (uint64_t *)&v55;
      switch(HIBYTE(v56))
      {
        case 0xA:
          goto LABEL_87;
        case 0xB:
LABEL_4:
          BOOL v13 = (void)v55 == 0x745368637461503CLL && *(void *)((char *)&v55 + 3) == 0x3E70657453686374;
          uint64_t v14 = a1 + 112;
          if (!v13) {
            goto LABEL_86;
          }
          goto LABEL_136;
        case 0xC:
          goto LABEL_81;
        case 0xD:
LABEL_68:
          BOOL v27 = (void)v55 == 0x6E6F69746365533CLL && *(void *)((char *)&v55 + 5) == 0x3E706574536E6F69;
          uint64_t v14 = v6;
          if (v27) {
            goto LABEL_136;
          }
          if (HIBYTE(v56) == 10) {
            goto LABEL_87;
          }
          if (HIBYTE(v56) == 12) {
            goto LABEL_81;
          }
          if (HIBYTE(v56) != 13) {
            goto LABEL_132;
          }
          BOOL v28 = (void)v55 == 0x6E6F69746365533CLL && *(void *)((char *)&v55 + 5) == 0x3E657A69536E6F69;
          uint64_t v14 = a1 + 120;
          if (!v28) {
            goto LABEL_132;
          }
          goto LABEL_136;
        case 0xF:
          BOOL v22 = (void)v55 == 0x75746165466E493CLL && *(void *)((char *)&v55 + 7) == 0x3E7370614D657275;
          uint64_t v14 = a1 + 104;
          if (v22) {
            goto LABEL_136;
          }
LABEL_52:
          BOOL v23 = (void)v55 == 0x65726168536E493CLL && *(void *)((char *)&v55 + 7) == 0x3E73646E61426465;
          uint64_t v14 = a1 + 128;
          if (v23) {
            goto LABEL_136;
          }
          if (HIBYTE(v56) != 15) {
            goto LABEL_86;
          }
          BOOL v24 = (void)v55 == 0x61526E7261654C3CLL && *(void *)((char *)&v55 + 7) == 0x3E66656F43657461;
          BOOL v25 = (float *)(a1 + 264);
          if (!v24) {
            goto LABEL_132;
          }
          goto LABEL_138;
        case 0x10:
          BOOL v26 = (void)v55 == 0x7461654674754F3CLL && *((void *)&v55 + 1) == 0x3E7370614D657275;
          uint64_t v14 = a1 + 108;
          if (!v26)
          {
            switch(HIBYTE(v56))
            {
              case 0xA:
                goto LABEL_87;
              case 0xB:
                goto LABEL_4;
              case 0xC:
                goto LABEL_81;
              case 0xD:
                goto LABEL_68;
              case 0xF:
                goto LABEL_52;
              default:
                goto LABEL_132;
            }
          }
          goto LABEL_136;
        case 0x13:
          goto LABEL_125;
        default:
          goto LABEL_132;
      }
    }
    uint64_t v15 = *((void *)&v55 + 1);
    if (*((void *)&v55 + 1) == 15)
    {
      BOOL v16 = *(void *)v55 == 0x75746165466E493CLL && *(void *)(v55 + 7) == 0x3E7370614D657275;
      uint64_t v14 = a1 + 104;
      if (v16) {
        goto LABEL_136;
      }
    }
    if (*((void *)&v55 + 1) == 16)
    {
      BOOL v17 = *(void *)v55 == 0x7461654674754F3CLL && *(void *)(v55 + 8) == 0x3E7370614D657275;
      uint64_t v14 = a1 + 108;
      if (v17) {
        goto LABEL_136;
      }
      uint64_t v15 = *((void *)&v55 + 1);
    }
    if (v15 == 11)
    {
      BOOL v18 = *(void *)v55 == 0x745368637461503CLL && *(void *)(v55 + 3) == 0x3E70657453686374;
      uint64_t v14 = a1 + 112;
      if (v18) {
        goto LABEL_136;
      }
      uint64_t v15 = *((void *)&v55 + 1);
    }
    if (v15 != 13) {
      goto LABEL_41;
    }
    BOOL v19 = *(void *)v55 == 0x6E6F69746365533CLL && *(void *)(v55 + 5) == 0x3E706574536E6F69;
    uint64_t v14 = v6;
    if (v19) {
      goto LABEL_136;
    }
    uint64_t v15 = *((void *)&v55 + 1);
    if (*((void *)&v55 + 1) != 13) {
      goto LABEL_41;
    }
    BOOL v20 = *(void *)v55 == 0x6E6F69746365533CLL && *(void *)(v55 + 5) == 0x3E657A69536E6F69;
    uint64_t v14 = a1 + 120;
    if (v20) {
      goto LABEL_136;
    }
    if ((v56 & 0x8000000000000000) == 0)
    {
      if (HIBYTE(v56) == 10) {
        goto LABEL_87;
      }
      if (HIBYTE(v56) != 12) {
        goto LABEL_132;
      }
LABEL_81:
      BOOL v29 = (void)v55 == 0x537265746C69463CLL && DWORD2(v55) == 1046837865;
      uint64_t v14 = a1 + 124;
      if (v29) {
        goto LABEL_136;
      }
      if ((v56 & 0x8000000000000000) == 0)
      {
LABEL_86:
        if (HIBYTE(v56) != 10) {
          goto LABEL_132;
        }
LABEL_87:
        BOOL v30 = (void)v55 == 0x7A69536C6F6F503CLL && WORD4(v55) == 15973;
        uint64_t v14 = v7;
        if (v30) {
          goto LABEL_136;
        }
        if ((v56 & 0x8000000000000000) == 0)
        {
          if (HIBYTE(v56) != 10) {
            goto LABEL_132;
          }
          BOOL v31 = (void)v55 == 0x6574536C6F6F503CLL && WORD4(v55) == 15984;
          uint64_t v14 = v52;
          if (!v31) {
            goto LABEL_132;
          }
          goto LABEL_136;
        }
LABEL_111:
        uint64_t v15 = *((void *)&v55 + 1);
        if (*((void *)&v55 + 1) != 10) {
          goto LABEL_117;
        }
        BOOL v34 = *(void *)v55 == 0x6574536C6F6F503CLL && *(_WORD *)(v55 + 8) == 15984;
        uint64_t v14 = v52;
        if (!v34)
        {
          if (v56 < 0)
          {
LABEL_117:
            if (v15 == 15)
            {
              BOOL v35 = *(void *)v55 == 0x61526E7261654C3CLL && *(void *)(v55 + 7) == 0x3E66656F43657461;
              BOOL v25 = (float *)(a1 + 264);
              if (!v35)
              {
                uint64_t v15 = *((void *)&v55 + 1);
                goto LABEL_123;
              }
LABEL_138:
              kaldi::ReadBasicType<float>(a2, a3, v25, v10, v11);
              goto LABEL_139;
            }
LABEL_123:
            if (v15 == 19)
            {
              uint64_t v12 = (uint64_t *)v55;
LABEL_125:
              uint64_t v36 = *v12;
              uint64_t v37 = v12[1];
              uint64_t v38 = *(uint64_t *)((char *)v12 + 11);
              BOOL v39 = v36 == 0x61654C736169423CLL && v37 == 0x6F43657461526E72;
              BOOL v40 = v39 && v38 == 0x3E66656F43657461;
              BOOL v25 = (float *)(a1 + 268);
              if (v40) {
                goto LABEL_138;
              }
            }
          }
LABEL_132:
          BOOL v41 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v55, "<MaxNorm>");
          BOOL v25 = (float *)(a1 + 280);
          if (!v41)
          {
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v55, "<GradientNormType>"))
            {
              __p[0] = 0;
              __p[1] = 0;
              uint64_t v54 = 0;
              kaldi::ReadToken(a2, a3, (uint64_t)__p, v42, v43);
              *(_DWORD *)(a1 + 27std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>>> *>>::~deque[abi:ne180100]((void *)this + 2) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
              if (SHIBYTE(v54) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_139;
            }
            BOOL v44 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v55, "<MaxGrad>");
            BOOL v25 = (float *)(a1 + 276);
            if (!v44)
            {
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTSTraining/tts-speech-feature/subproject/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 332);
              uint64_t v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
              if (v56 >= 0) {
                int v50 = &v55;
              }
              else {
                int v50 = (long long *)v55;
              }
              if (v56 >= 0) {
                uint64_t v51 = HIBYTE(v56);
              }
              else {
                uint64_t v51 = *((void *)&v55 + 1);
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)v50, v51);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
            }
          }
          goto LABEL_138;
        }
        goto LABEL_136;
      }
    }
    else
    {
LABEL_41:
      if (v15 != 12) {
        goto LABEL_100;
      }
      BOOL v21 = *(void *)v55 == 0x537265746C69463CLL && *(_DWORD *)(v55 + 8) == 1046837865;
      uint64_t v14 = a1 + 124;
      if (v21) {
        goto LABEL_136;
      }
    }
    uint64_t v15 = *((void *)&v55 + 1);
LABEL_100:
    if (v15 == 15)
    {
      BOOL v32 = *(void *)v55 == 0x65726168536E493CLL && *(void *)(v55 + 7) == 0x3E73646E61426465;
      uint64_t v14 = a1 + 128;
      if (v32) {
        goto LABEL_136;
      }
      uint64_t v15 = *((void *)&v55 + 1);
    }
    if (v15 != 10) {
      goto LABEL_117;
    }
    BOOL v33 = *(void *)v55 == 0x7A69536C6F6F503CLL && *(_WORD *)(v55 + 8) == 15973;
    uint64_t v14 = v7;
    if (!v33) {
      goto LABEL_111;
    }
LABEL_136:
    kaldi::ReadBasicType<int>(a2, a3, v14, v10, v11);
LABEL_139:
    if (SHIBYTE(v56) < 0) {
      operator delete((void *)v55);
    }
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_142;
    }
  }
}